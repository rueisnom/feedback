<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/14187963">
    <body>
      <group id="14187963">
        <trans-unit id="abb6b4a544de50fb9bdc621b8b51a82d205e07c3" translate="yes" xml:space="preserve">
          <source>// set up the variable used for the instance of the main class</source>
          <target state="translated">/メインクラスのインスタンスに使用される変数を設定する</target>
        </trans-unit>
        <trans-unit id="e99f381ecf5a4f54dbd6192e3c9cbf4238c7dc10" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;newStage&lt;/code&gt; would be the new window. The problem is, I can't find a way to tell the controller where to look for the customer's info (by passing the id as parameter).</source>
          <target state="translated">&lt;code&gt;newStage&lt;/code&gt; が新しいウィンドウになります。 問題は、（IDをパラメーターとして渡すことによって）顧客の情報を探す場所をコントローラーに指示する方法が見つからないことです。</target>
        </trans-unit>
        <trans-unit id="cb5c34da153ae0147f32e5bc4d4c0c025d7a01aa" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;All files are listed in their entirety at the bottom of this post.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;すべてのファイルは、この投稿の下部に全体がリストされています。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d19ee85e645013f2e6b5feb33ff2693ff70682e3" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Be careful NOT to use a static load function on the FXMLLoader, or you will not be able to get your controller from your loader instance.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;FXMLLoaderで静的ロード関数を使用しないように注意してください。そうしないと、ローダーインスタンスからコントローラーを取得できなくなります。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3116d5258a5f9edea3c5a736e4390fd2fe59e466" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Example for Spring Boot Dependency Injection&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Spring Boot Dependency Injectionの例&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="74003107815f915a4cbe8fedd255db49b4dd35fb" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;To set a controller on a loader (in JavaFX 2.x) you CANNOT also define a &lt;code&gt;fx:controller&lt;/code&gt; attribute in your fxml file.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;ローダー（JavaFX 2.x）でコントローラーを設定するには、fxmlファイルで &lt;code&gt;fx:controller&lt;/code&gt; 属性を定義することもできません。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="33bb599a4d9b3474e81c6ed136ffc6985664020e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Additional information supplied by StackOverflow user named &lt;a href=&quot;https://stackoverflow.com/users/1281217/bgmf&quot;&gt;@dzim&lt;/a&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;StackOverflowユーザーが&lt;a href=&quot;https://stackoverflow.com/users/1281217/bgmf&quot;&gt;@dzim&lt;/a&gt;という名前で提供する追加情報&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e4fd9b1d0cef2b96ea8756f754cfda3df07303ad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Controller1.java:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Controller1.java:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="706060d063fd03f3ebcadfc4516d733aa40e2400" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Controller1.java&lt;/strong&gt; - The controller for the first FXML layout.</source>
          <target state="translated">&lt;strong&gt;Controller1.java-&lt;/strong&gt;最初のFXMLレイアウトのコントローラー。</target>
        </trans-unit>
        <trans-unit id="a006dc4fa708bd933c7fe6fb94bd24a686b17f66" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Controller2.java:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Controller2.java:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ad314d8b25f378a2fd5082b515d2bc0342fa369f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Controller2.java&lt;/strong&gt; - The controller for the second FXML layout.</source>
          <target state="translated">&lt;strong&gt;Controller2.java&lt;/strong&gt; -2番目のFXMLレイアウトのコントローラー。</target>
        </trans-unit>
        <trans-unit id="0b53f3af53d5ef2121636a2def3bc2e2451b965e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Follow-up Q&amp;amp;A&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;フォローアップQ＆A&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1dd65275cc31621283ddd43beeb8ed910906282a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Having the Controller Retrieve Parameters from an External Static Method&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;コントローラーに外部静的メソッドからパラメーターを取得させる&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="55d48d5a78ee7a1d081b3d7be28651cc57547a0a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Layout1.fxml:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Layout1.fxml:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6b2b3f469d405274016f600d777affb20d598614" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Layout1.fxml&lt;/strong&gt; - The FXML layout for the first scene.</source>
          <target state="translated">&lt;strong&gt;Layout1.fxml-&lt;/strong&gt;最初のシーンのFXMLレイアウト。</target>
        </trans-unit>
        <trans-unit id="a7a323d9193e2d0fe847422dc0a6e84178e3c637" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Layout2.fxml:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Layout2.fxml:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="03c7533bc42ff9e8a98d5f08f566ce0586dacef9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Layout2.fxml&lt;/strong&gt; - The FXML layout for the second scene.</source>
          <target state="translated">&lt;strong&gt;Layout2.fxml&lt;/strong&gt; -2番目のシーンのFXMLレイアウト。</target>
        </trans-unit>
        <trans-unit id="9c3c79da97c928fef80b3521532f1e13afa52851" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Main.java:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Main.java:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="57a371781447c4770a54384026c3775eca579201" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Main.java&lt;/strong&gt; - Simply used to start the application and call the first controller.</source>
          <target state="translated">&lt;strong&gt;Main.java-&lt;/strong&gt;アプリケーションを起動し、最初のコントローラーを呼び出すためだけに使用されます。</target>
        </trans-unit>
        <trans-unit id="e11a488151b7395c55e0d3c12c87f94afaa380d6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Passing Parameters Directly From the Caller to the Controller&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;呼び出し元からコントローラーに直接パラメーターを渡す&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7a9f0c31bf24b09da6c9598ec9c76a164314487f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Recommended Approach&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;推奨されるアプローチ&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7c03de514f34813514a6852828a3ee6c4b50625e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Remember first time you print the passing value you will get null,
You can use it after your windows loaded , same for everything you want to code for any other component.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;渡した値を初めて印刷するときは、nullになることを忘れないでください。これは、ウィンドウがロードされた後に使用できます。これは、他のコンポーネントに対してコーディングしたいすべてのものに同じです。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4162b0ad6ae79cf21c04d31cfdafeeafee2341b6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Setting a Controller on the FXMLLoader&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;FXMLLoaderでのコントローラーの設定&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="073ae2218732d9358e80ae1902f7902306ce3628" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;THE CODE&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;コード&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cc3a49e13baab6a33567288b2af488d382bdf5c8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The Goal:&lt;/strong&gt; To demonstrate passing values from &lt;code&gt;Controller1&lt;/code&gt; to &lt;code&gt;Controller2&lt;/code&gt; and vice versa.</source>
          <target state="translated">&lt;strong&gt;目標：&lt;/strong&gt; &lt;code&gt;Controller1&lt;/code&gt; からController2へ、およびその逆に値を渡すことを示す。</target>
        </trans-unit>
        <trans-unit id="fdce1e5006393aac40047e8d65fd67c3594d9b86" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The Program Flow:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;プログラムの流れ：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4220ce2b1c8cc0c6d124ad94f3351aed39ea287a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This WORKS ..&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;この作品..&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a98ad4e808fd0c18fba4705e6e10d4bc876a15e4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Use Dependency Injection&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;依存性注入を使用する&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="de0b045581aba063460234e9bfdb8df5c5d25f96" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Use an Event Bus&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;イベントバスを使用する&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5ff78f58a135f63eab81a0c70c9c59562db139b3" translate="yes" xml:space="preserve">
          <source>A new FXMLLoader is constructed as shown in the sample code i.e. &lt;code&gt;new FXMLLoader(location)&lt;/code&gt;.  The location is a URL and you can generate such a URL from an FXML resource by:</source>
          <target state="translated">サンプルコードに示すように、 &lt;code&gt;new FXMLLoader(location)&lt;/code&gt; の新しいFXMLLoaderが作成されます。 場所はURLであり、次の方法でFXMLリソースからそのようなURLを生成できます。</target>
        </trans-unit>
        <trans-unit id="cf8369ad6aaa8d9c6c9831fbef32ea6a5785247b" translate="yes" xml:space="preserve">
          <source>A really nice, clean dependency injection approach is exemplified by the &lt;a href=&quot;https://github.com/AdamBien/afterburner.fx&quot;&gt;afterburner.fx framework&lt;/a&gt; with a sample &lt;a href=&quot;https://github.com/AdamBien/airhacks-control&quot;&gt;air-hacks application&lt;/a&gt; that uses it.  afterburner.fx relies on JEE6 &lt;a href=&quot;http://docs.oracle.com/javaee/6/api/javax/inject/package-summary.html&quot;&gt;javax.inject&lt;/a&gt; to perform the dependency injection.</source>
          <target state="translated">本当に素敵でクリーンな依存性注入アプローチは、それを使用するサンプルの&lt;a href=&quot;https://github.com/AdamBien/airhacks-control&quot;&gt;エアハックアプリケーション&lt;/a&gt;を備えた&lt;a href=&quot;https://github.com/AdamBien/afterburner.fx&quot;&gt;afterburner.fxフレームワーク&lt;/a&gt;によって例示されます 。 afterburner.fxは、依存性注入を実行するためにJEE6 javax.injectに依存してい&lt;a href=&quot;http://docs.oracle.com/javaee/6/api/javax/inject/package-summary.html&quot;&gt;ます&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="7bb0e1b0ffe198292e784522ff3d4ebf10105789" translate="yes" xml:space="preserve">
          <source>Adding Spring Dependency Injection in JavaFX (JPA Repo, Service)</source>
          <target state="translated">JavaFXでのSpring依存性インジェクションの追加 (JPAレポ、サービス)</target>
        </trans-unit>
        <trans-unit id="ebd3258f892399f87b6ea3e36e5d69058e5f29cf" translate="yes" xml:space="preserve">
          <source>An example of JavaFX application and controller dependency injection with Spring is provided in the answer to:</source>
          <target state="translated">Springを使ったJavaFXアプリケーションとコントローラの依存性注入の例は、回答の中にあります。</target>
        </trans-unit>
        <trans-unit id="19e68b8d0194e5057adaf48bd6d1ea071bf200a9" translate="yes" xml:space="preserve">
          <source>And controller can check, if info is set. Also, you could use ObjectProperty for back-forward data transfering, if needed.</source>
          <target state="translated">また、情報が設定されているかどうかをコントローラがチェックすることができます。また、必要に応じて、ObjectPropertyを使ってバックフォワードでデータを転送することもできます。</target>
        </trans-unit>
        <trans-unit id="1cf8e2e9ab510630888b60536f5635d6e6ca8122" translate="yes" xml:space="preserve">
          <source>Another Controller</source>
          <target state="translated">別のコントローラ</target>
        </trans-unit>
        <trans-unit id="c87d339dfeeb0ffcb18ef3ea996bc725cc487ee7" translate="yes" xml:space="preserve">
          <source>Any ideas?</source>
          <target state="translated">何かアイデアは?</target>
        </trans-unit>
        <trans-unit id="e92e3d33e059386c328d9b8d4ad381786b220316" translate="yes" xml:space="preserve">
          <source>Below are all the FXML files</source>
          <target state="translated">以下はすべてのFXMLファイルです。</target>
        </trans-unit>
        <trans-unit id="07a6427feda30f20d22cedb205a0bd486316f5aa" translate="yes" xml:space="preserve">
          <source>Construct an FXMLLoader based upon fxml markup at a specified location</source>
          <target state="translated">指定された場所でfxmlマークアップに基づいてFXMLLoaderを構築します。</target>
        </trans-unit>
        <trans-unit id="84c08013cc1b8878e756f976d8b89868e75f3de8" translate="yes" xml:space="preserve">
          <source>Declare an instance of your class:</source>
          <target state="translated">クラスのインスタンスを宣言します。</target>
        </trans-unit>
        <trans-unit id="f68ec6d55942a0c9f7aca3b0a787a3b6dd7ff916" translate="yes" xml:space="preserve">
          <source>Declare your class as follows:</source>
          <target state="translated">以下のようにクラスを宣言します。</target>
        </trans-unit>
        <trans-unit id="54cb64146d9312c99e2870132fc6e3566cc21b79" translate="yes" xml:space="preserve">
          <source>Define value &lt;code&gt;External Text&lt;/code&gt; for namespace variable &lt;code&gt;labelText&lt;/code&gt;:</source>
          <target state="translated">名前空間変数 &lt;code&gt;labelText&lt;/code&gt; の &lt;code&gt;External Text&lt;/code&gt; 値を定義します。</target>
        </trans-unit>
        <trans-unit id="f86ef7c952f7f19ae04eda154561a0ccec2243b0" translate="yes" xml:space="preserve">
          <source>Due to the limitation on the &lt;code&gt;fx:controller&lt;/code&gt; definition in FXML, I personally prefer getting the controller from the FXMLLoader rather than setting the controller into the FXMLLoader.</source>
          <target state="translated">FXMLでの &lt;code&gt;fx:controller&lt;/code&gt; 定義の制限により、コントローラーをFXMLLoaderに設定するのではなく、FXMLLoaderからコントローラーを取得することを個人的に好みます。</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">スニペットを展開</target>
        </trans-unit>
        <trans-unit id="268be2165d2cdbe12455e11387e9be65790adc64" translate="yes" xml:space="preserve">
          <source>FXMLLoader instances themselves never know anything about domain objects.  You do not directly pass application specific domain objects into the FXMLLoader constructor, instead you:</source>
          <target state="translated">FXMLLoader インスタンス自身は、ドメインオブジェクトについて何も知りません。FXMLLoader のコンストラクタにアプリケーション固有のドメインオブジェクトを直接渡すことはありません。</target>
        </trans-unit>
        <trans-unit id="b59af5ad17a6394635c722d02c06978b624ebd48" translate="yes" xml:space="preserve">
          <source>FXMLLoader supports dependency injection systems like Guice, Spring or Java EE CDI by allowing you to set a custom controller factory on the FXMLLoader.  This provides a callback that you can use to create the controller instance with dependent values injected by the respective dependency injection system.</source>
          <target state="translated">FXMLLoader は、FXMLLoader 上にカスタムコントローラファクトリを設定することで、Guice や Spring、Java EE CDI のような依存性注入システムをサポートしています。これは、それぞれの依存性注入システムによって注入された依存値を持つコントローラのインスタンスを作成するために使用できるコールバックを提供します。</target>
        </trans-unit>
        <trans-unit id="564d7d05702c681636e47b0e56aa76bbd6912a7a" translate="yes" xml:space="preserve">
          <source>First Controller</source>
          <target state="translated">ファーストコントローラー</target>
        </trans-unit>
        <trans-unit id="74baca43944f027d260475e891f0c430b557744c" translate="yes" xml:space="preserve">
          <source>For example:
The user chooses a customer from a &lt;code&gt;TableView&lt;/code&gt; and a new window is opened, showing the customer's info.</source>
          <target state="translated">例：ユーザーが &lt;code&gt;TableView&lt;/code&gt; から顧客を選択すると、新しいウィンドウが開き、顧客の情報が表示されます。</target>
        </trans-unit>
        <trans-unit id="61d8d857d071491f65804bc615c9b9c10c888b1c" translate="yes" xml:space="preserve">
          <source>For larger, more complicated applications, it would be worthwhile investigating if you want to use &lt;a href=&quot;http://www.martinfowler.com/articles/injection.html&quot;&gt;Dependency Injection&lt;/a&gt; or &lt;a href=&quot;https://github.com/google/guava/wiki/EventBusExplained&quot;&gt;Event Bus&lt;/a&gt; mechanisms within your application.</source>
          <target state="translated">大規模で複雑なアプリケーションの場合、アプリケーション内で&lt;a href=&quot;http://www.martinfowler.com/articles/injection.html&quot;&gt;依存性注入&lt;/a&gt;または&lt;a href=&quot;https://github.com/google/guava/wiki/EventBusExplained&quot;&gt;イベントバス&lt;/a&gt;メカニズムを使用するかどうかを調べることは価値があります。</target>
        </trans-unit>
        <trans-unit id="2af30fac6d59dd4686931a4c5738334e1bd76128" translate="yes" xml:space="preserve">
          <source>For small applications I highly recommend passing parameters directly from the caller to the controller - it's simple, straightforward and requires no extra frameworks.</source>
          <target state="translated">小規模なアプリケーションには、呼び出し元から直接コントローラにパラメータを渡すことを強くお勧めします。</target>
        </trans-unit>
        <trans-unit id="fb30866abb900dbe4c1555db00feeb0198683f29" translate="yes" xml:space="preserve">
          <source>Get a controller from the FXMLLoader instance.</source>
          <target state="translated">FXMLLoader インスタンスからコントローラを取得します。</target>
        </trans-unit>
        <trans-unit id="09bd8a56267f0714c11a23f45e791bf42310feef" translate="yes" xml:space="preserve">
          <source>Greg Brown, the original FXML specification creator and implementor, often suggests considering use of an event bus, such as the Guava &lt;a href=&quot;https://github.com/google/guava/wiki/EventBusExplained&quot;&gt;EventBus&lt;/a&gt;, for communication between FXML instantiated controllers and other application logic.</source>
          <target state="translated">元のFXML仕様の作成者および実装者であるGreg Brownは、FXMLのインスタンス化されたコントローラーと他のアプリケーションロジック間の通信に、Guava &lt;a href=&quot;https://github.com/google/guava/wiki/EventBusExplained&quot;&gt;EventBus&lt;/a&gt;などのイベントバスの使用を検討することを提案しています。</target>
        </trans-unit>
        <trans-unit id="27fcd8e1c83c45efe40d40504a3d4d69ccb6583c" translate="yes" xml:space="preserve">
          <source>Here is a concrete implementation of the loader:</source>
          <target state="translated">ローダの具体的な実装をご紹介します。</target>
        </trans-unit>
        <trans-unit id="a84a9140afa84ffebc2626b7b3d1170a63d51b51" translate="yes" xml:space="preserve">
          <source>Here is an example for passing parameters to a fxml document through namespace.</source>
          <target state="translated">ここに、名前空間を介してfxmlドキュメントにパラメータを渡す例があります。</target>
        </trans-unit>
        <trans-unit id="19c5371aebfbd8d50893fe6962bcbd568839ccb7" translate="yes" xml:space="preserve">
          <source>Here is an example for using a controller injected by Guice.</source>
          <target state="translated">Guiceが注入したコントローラを使用した例を紹介します。</target>
        </trans-unit>
        <trans-unit id="20324de8dc7e477ff7d714fb91e7e53e9bd6438d" translate="yes" xml:space="preserve">
          <source>How can I pass parameters to a secondary window in javafx? Is there a way to communicate with the corresponding controller?</source>
          <target state="translated">javafxでセカンダリウィンドウにパラメータを渡すには?対応するコントローラと通信する方法はありますか?</target>
        </trans-unit>
        <trans-unit id="92b2ad8a5738a720470b310bf7e5ec71caff1f7e" translate="yes" xml:space="preserve">
          <source>I have a much simpler method creating an instance of the class using the initialize method.  I searched the Internet multiple days until finding this really simple method.</source>
          <target state="translated">initializeメソッドを使ってクラスのインスタンスを作成する、もっとシンプルな方法があります。私はこの本当にシンプルなメソッドを見つけるまで何日もインターネットを検索しました。</target>
        </trans-unit>
        <trans-unit id="27ad03be56ddb7b4d6f1994d440b5d583c9450c9" translate="yes" xml:space="preserve">
          <source>I realize this is a very old post and has some great answers already,
  but I wanted to make a simple MCVE to demonstrate one such approach and allow new coders a way to quickly see the concept in action.</source>
          <target state="translated">私はこれが非常に古いポストであり、すでにいくつかの素晴らしい答えを持っていることを認識していますが、私はそのようなアプローチの1つを実証するためにシンプルなMCVEを作成し、新しいコーダーがすぐにアクションで概念を見るための方法を可能にしたいと思いました。</target>
        </trans-unit>
        <trans-unit id="4817e5da2d13ac351d593aac00e2500c518d928e" translate="yes" xml:space="preserve">
          <source>In this example, we will use 5 files:</source>
          <target state="translated">この例では、5つのファイルを使用します。</target>
        </trans-unit>
        <trans-unit id="0bc3a14b314cd4233ac4624f9b57d27e6b49d011" translate="yes" xml:space="preserve">
          <source>Invoke methods on the retrieved controller to provide the controller with references to the domain objects.</source>
          <target state="translated">取得したコントローラのメソッドを呼び出して、ドメインオブジェクトへの参照をコントローラに提供します。</target>
        </trans-unit>
        <trans-unit id="1519e1c48675518575ae3a56fad2ff9c18a6e76e" translate="yes" xml:space="preserve">
          <source>It is a functional solution to a problem. A stage is returned from the &lt;code&gt;showCustomerDialog&lt;/code&gt; function so that a reference to it can be stored by an external class which may wish to do something, such as hide the stage based on a button click in the main window, at a later time.  An alternate, object-oriented solution could encapsulate the functionality and stage reference inside a CustomerDialog object or have a CustomerDialog extend Stage.  A full example for an object-oriented interface to a custom dialog encapsulating FXML, controller and model data is beyond the scope of this answer, but may make a worthwhile blog post for anybody inclined to create one.</source>
          <target state="translated">問題に対する機能的な解決策です。 ステージは &lt;code&gt;showCustomerDialog&lt;/code&gt; 関数から返されるので、後でメインウィンドウのボタンクリックに基づいてステージを非表示にするなど、何かを実行したい外部クラスによってステージへの参照を格納できます。 別のオブジェクト指向ソリューションでは、機能とステージ参照をCustomerDialogオブジェクト内にカプセル化したり、CustomerDialogでステージを拡張したりできます。 FXML、コントローラー、モデルデータをカプセル化するカスタムダイアログへのオブジェクト指向インターフェースの完全な例は、この回答の範囲を超えていますが、作成を志向する人にとって価値のあるブログ投稿になるかもしれません。</target>
        </trans-unit>
        <trans-unit id="997d74a1fe4edf3ad83a187a0cc538a2b99c157a" translate="yes" xml:space="preserve">
          <source>JavaFX FXML Parameter passing from Controller A to B and back</source>
          <target state="translated">JavaFX FXMLパラメータのコントローラAからBへの受け渡しとその前後の処理</target>
        </trans-unit>
        <trans-unit id="1d827930682be6484087708283eceeb882ca809b" translate="yes" xml:space="preserve">
          <source>Note this example loads the view into the center of a BoarderPane that is the root of the Scene in the Stage. This is irrelevant to the example (implementation detail of my specific use case) but decided to leave it in as some may find it useful.</source>
          <target state="translated">この例では、StageのSceneのルートであるBoarderPaneの中心にビューをロードしています。これは例とは無関係ですが(私の特定のユースケースの実装の詳細)、便利だと思う人もいるかもしれないので残しておくことにしました。</target>
        </trans-unit>
        <trans-unit id="15049a6d88f3144b5a82fe805a470268d5d15d62" translate="yes" xml:space="preserve">
          <source>Now you can pass parameter to any controller from whole application.</source>
          <target state="translated">これで、アプリケーション全体から任意のコントローラにパラメータを渡すことができるようになりました。</target>
        </trans-unit>
        <trans-unit id="d7ccca708d9c68061eeb7f18e3b2a0c5556a1197" translate="yes" xml:space="preserve">
          <source>Observe a documentation here:
&lt;a href=&quot;http://docs.oracle.com/javafx/2/api/javafx/fxml/doc-files/introduction_to_fxml.html&quot;&gt;http://docs.oracle.com/javafx/2/api/javafx/fxml/doc-files/introduction_to_fxml.html&lt;/a&gt;
Before the phrase &quot;In the first version, the handleButtonAction() is tagged with @FXML to allow markup defined in the controller's document to invoke it. In the second example, the button field is annotated to allow the loader to set its value. The initialize() method is similarly annotated.&quot;</source>
          <target state="translated">ここでドキュメントを確認してください： &lt;a href=&quot;http://docs.oracle.com/javafx/2/api/javafx/fxml/doc-files/introduction_to_fxml.html&quot;&gt;http&lt;/a&gt; ://docs.oracle.com/javafx/2/api/javafx/fxml/doc-files/introduction_to_fxml.html「最初のバージョンでは、handleButtonAction（）は@FXMLコントローラのドキュメントで定義されたマークアップが呼び出せるようにします。2番目の例では、ローダーが値を設定できるようにボタンフィールドに注釈が付けられています。initialize（）メソッドにも同様に注釈が付けられています。</target>
        </trans-unit>
        <trans-unit id="d8ac46e645653969cd8ac02364f9ec75b6f42760" translate="yes" xml:space="preserve">
          <source>One the most fundamental concepts working with any programming language is how to navigate from one (window, form or page) to another. Also while doing this navigation the developer often wants to pass data from one (window, form or page) and display or use the data passed</source>
          <target state="translated">どのようなプログラミング言語でも最も基本的な概念の一つは、あるウィンドウ、フォーム、ページから別のウィンドウへの移動方法です。また、このナビゲーションを行っている間、開発者はしばしばあるウィンドウ、フォーム、ページからデータを渡して、渡されたデータを表示したり、使用したりしたいと考えます。</target>
        </trans-unit>
        <trans-unit id="b2bf2aed2ddc4511794d1966adc6fa68911ab1ec" translate="yes" xml:space="preserve">
          <source>Page One Controller</source>
          <target state="translated">ページワンコントローラ</target>
        </trans-unit>
        <trans-unit id="11e30796b976252136488a8d426c5d1185cb04ba" translate="yes" xml:space="preserve">
          <source>Page Two Controller</source>
          <target state="translated">2 ページ コントローラー</target>
        </trans-unit>
        <trans-unit id="6e7f1da0b4e58b6e2d7f5a29528c1de8906c7db4" translate="yes" xml:space="preserve">
          <source>Pass custom data to an FXML controller by retrieving the controller from the FXML loader instance and calling a method on the controller to initialize it with the required data values.</source>
          <target state="translated">FXML ローダのインスタンスからコントローラを取得し、そのコントローラ上でメソッドを呼び出して、必要なデータ値で初期化することで、カスタムデータをFXMLコントローラに渡すことができます。</target>
        </trans-unit>
        <trans-unit id="22c72866e6a4401e26ebf50b7dfb2e1fa00ebcfb" translate="yes" xml:space="preserve">
          <source>Passing Parameters JavaFX FXML</source>
          <target state="translated">パラメータの渡し方 JavaFX FXML</target>
        </trans-unit>
        <trans-unit id="8fd5798c451970311c96864a4b13348ab3cafe86" translate="yes" xml:space="preserve">
          <source>Set up a method in your class as follows:</source>
          <target state="translated">以下のようにクラスにメソッドを設定します。</target>
        </trans-unit>
        <trans-unit id="09d874c6430a34f9f94e2bc5956cc87249533aff" translate="yes" xml:space="preserve">
          <source>So, you can call page.setUserData(info);</source>
          <target state="translated">そのため、page.setUserData(info)を呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="d16cd663d007203976f6b707c00861f099db0a30" translate="yes" xml:space="preserve">
          <source>So, you need to associate a controller with a node, and set a user data to the node.</source>
          <target state="translated">そこで、ノードにコントローラを関連付けて、ノードにユーザデータを設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="148506082c66e46a02527a315d5e969f66832ba3" translate="yes" xml:space="preserve">
          <source>Something like the following code:</source>
          <target state="translated">以下のコードのようなもの。</target>
        </trans-unit>
        <trans-unit id="b3604b8191e868952c41b5db9aece8f1eff7c961" translate="yes" xml:space="preserve">
          <source>Sometimes, you might want to pass results back to the caller, in which case you can check out the answer to the related question:</source>
          <target state="translated">時には、結果を発信者に伝えたい場合もありますが、その場合は関連する質問の回答を確認することができます。</target>
        </trans-unit>
        <trans-unit id="31bf3f8f69b932e3f1acbfc7c8959e44387c4888" translate="yes" xml:space="preserve">
          <source>Start Controller</source>
          <target state="translated">スタートコントローラ</target>
        </trans-unit>
        <trans-unit id="f6dd8b657be24785f2abfdf37bda7351dd11294e" translate="yes" xml:space="preserve">
          <source>The EventBus is a simple but powerful publish/subscribe API with annotations that allows POJOs to communicate with each other anywhere in a JVM without having to refer to each other.</source>
          <target state="translated">EventBusはアノテーションを備えたシンプルながらも強力なパブリッシュサブスクライブAPIで、POJOはお互いを参照することなく、JVM内のどこにいても通信を行うことができます。</target>
        </trans-unit>
        <trans-unit id="3f68fe9dd740f7622f2cddb0f86cb6d332806bb7" translate="yes" xml:space="preserve">
          <source>The code itself is also commented with some details of what is happening and how.</source>
          <target state="translated">コード自体にも、何がどうなっているのか、どのようになっているのかを詳細にコメントしています。</target>
        </trans-unit>
        <trans-unit id="d7ee052192384333cece7c842a928f8c8c68c625" translate="yes" xml:space="preserve">
          <source>The first scene contains a &lt;code&gt;TextField&lt;/code&gt;, a &lt;code&gt;Button&lt;/code&gt;, and a &lt;code&gt;Label&lt;/code&gt;. When the &lt;code&gt;Button&lt;/code&gt; is clicked, the second window is loaded and displayed, including the text entered in the &lt;code&gt;TextField&lt;/code&gt;.</source>
          <target state="translated">最初のシーンには、 &lt;code&gt;TextField&lt;/code&gt; 、 &lt;code&gt;Button&lt;/code&gt; 、および &lt;code&gt;Label&lt;/code&gt; が含まれています 。 &lt;code&gt;Button&lt;/code&gt; がクリックされると、 &lt;code&gt;TextField&lt;/code&gt; に入力されたテキストを含む2番目のウィンドウがロードされて表示されます 。</target>
        </trans-unit>
        <trans-unit id="e89b675bd57745459f9012d978836ee4fed7f3ef" translate="yes" xml:space="preserve">
          <source>The question of how to do it &quot;The Spring Boot Way&quot;, there was a discussion about JavaFX 2, which I anserwered in the attached permalink.
The approach is still valid and tested in March 2016, on Spring Boot v1.3.3.RELEASE:
&lt;a href=&quot;https://stackoverflow.com/a/36310391/1281217&quot;&gt;https://stackoverflow.com/a/36310391/1281217&lt;/a&gt;</source>
          <target state="translated">それをどのように行うかという質問「The Spring Boot Way」では、添付のパーマリンクで私が答えたJavaFX 2についての議論がありました。 このアプローチはまだ有効であり、2016年3月にSpring Boot v1.3.3.RELEASEでテストされてい&lt;a href=&quot;https://stackoverflow.com/a/36310391/1281217&quot;&gt;ます&lt;/a&gt; ： https ://stackoverflow.com/a/36310391/1281217</target>
        </trans-unit>
        <trans-unit id="82e3482bcddbb09c5152d3becc5b72853aaab86e" translate="yes" xml:space="preserve">
          <source>Then call the method in the initialize method:</source>
          <target state="translated">そして、initializeメソッドの中のメソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="695e286da54461134d0ffb2e93585086866574c4" translate="yes" xml:space="preserve">
          <source>Then in the second one declare a client, then at the bottom of your controller:</source>
          <target state="translated">次に、2番目のものでは、あなたのコントローラの下部に、クライアントを宣言します。</target>
        </trans-unit>
        <trans-unit id="c99fc6dd617a6cc2b70c852b05036d5464e823f3" translate="yes" xml:space="preserve">
          <source>This answer enumerates different mechanisms for passing parameters to FXML controllers.</source>
          <target state="translated">この回答では、FXMLコントローラにパラメータを渡すための様々なメカニズムを列挙しています。</target>
        </trans-unit>
        <trans-unit id="4c574944de10a90935170be07d6274d1b56596f9" translate="yes" xml:space="preserve">
          <source>This blog (by another writer) provides an alternate, but similar, &lt;a href=&quot;https://web.archive.org/web/20160612045146/http://ed4becky.net/homepage/javafx-from-the-trenches-singleton-controllers/&quot;&gt;example&lt;/a&gt;.</source>
          <target state="translated">このブログ（別のライターによる）は、代替の類似した&lt;a href=&quot;https://web.archive.org/web/20160612045146/http://ed4becky.net/homepage/javafx-from-the-trenches-singleton-controllers/&quot;&gt;例を&lt;/a&gt;提供しています。</target>
        </trans-unit>
        <trans-unit id="d3f64e1b7d926162d53189f69a231b6f11f696f3" translate="yes" xml:space="preserve">
          <source>This is a very simple demonstration and could surely stand for some improvement, but should make the concept very clear.</source>
          <target state="translated">これは非常にシンプルなデモンストレーションであり、確かに何らかの改善のために立つことができますが、コンセプトを非常に明確にする必要があります。</target>
        </trans-unit>
        <trans-unit id="58ff871b6a93ce45b14af622b058f94e1d743f85" translate="yes" xml:space="preserve">
          <source>This method is exemplified by Sergey's answer to &lt;a href=&quot;https://stackoverflow.com/a/10136403/1155209&quot;&gt;Javafx 2.0 How-to Application.getParameters() in a Controller.java file&lt;/a&gt;.</source>
          <target state="translated">このメソッドは&lt;a href=&quot;https://stackoverflow.com/a/10136403/1155209&quot;&gt;、Controller.javaファイルのJavafx 2.0 How-to Application.getParameters（）&lt;/a&gt;に対するSergeyの回答に例示されています 。</target>
        </trans-unit>
        <trans-unit id="e294a3637e40ee80112353a36d3e686c77f1a9e1" translate="yes" xml:space="preserve">
          <source>Upon entering text in the second scene's &lt;code&gt;TextField&lt;/code&gt; and clicking its &lt;code&gt;Button&lt;/code&gt;, the first scene's &lt;code&gt;Label&lt;/code&gt; is updated to show the entered text.</source>
          <target state="translated">2番目のシーンの &lt;code&gt;TextField&lt;/code&gt; にテキストを入力してその &lt;code&gt;Button&lt;/code&gt; をクリックすると、最初のシーンの &lt;code&gt;Label&lt;/code&gt; が更新され、入力したテキストが表示されます。</target>
        </trans-unit>
        <trans-unit id="e604afe2fab7851c738baa0703aa593c489afa8c" translate="yes" xml:space="preserve">
          <source>We said three because we will navigate between three (window, form or page) and use the concept of static variables to pass data around the (window, form or page)</source>
          <target state="translated">3つと言ったのは、3つの(ウィンドウ、フォーム、ページ)の間を移動し、静的変数の概念を使用してデータを渡すからです。</target>
        </trans-unit>
        <trans-unit id="db0a1b80667c8c0c7309198ff7e02cb67949b61e" translate="yes" xml:space="preserve">
          <source>We will also include some decision making code while we navigate</source>
          <target state="translated">また、ナビゲートしながら意思決定コードをいくつか入れていきます。</target>
        </trans-unit>
        <trans-unit id="786077af3bc091aedfb5ac41432ace630b739b49" translate="yes" xml:space="preserve">
          <source>Which you could use to add your info to the Node.</source>
          <target state="translated">これは、あなたの情報をノードに追加するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="17f368fb0c189ac7c03d30500a3d69c00c1c9daa" translate="yes" xml:space="preserve">
          <source>While most of the answers here provide good to excellent examples how to accomplish this we thought we would kick it up a notch or two or three</source>
          <target state="translated">ここにある回答のほとんどは、これを達成するための良い例から優れた例を提供していますが、私たちはそれを1つ、2つ、または3つ蹴り上げようと考えました。</target>
        </trans-unit>
        <trans-unit id="2aa783067aecb401bbd1b4f477cbd87034b29b91" translate="yes" xml:space="preserve">
          <source>Why answer a 6 year old question ?</source>
          <target state="translated">なぜ6歳の質問に答えるのか?</target>
        </trans-unit>
        <trans-unit id="c1eb36ced7883a452884956390912cc17ae8f088" translate="yes" xml:space="preserve">
          <source>Within the second scene, there is also a &lt;code&gt;TextField&lt;/code&gt;, a &lt;code&gt;Button&lt;/code&gt;, and a &lt;code&gt;Label&lt;/code&gt;. The &lt;code&gt;Label&lt;/code&gt; will display the text entered in the &lt;code&gt;TextField&lt;/code&gt; on the first scene.</source>
          <target state="translated">2番目のシーン内には、 &lt;code&gt;TextField&lt;/code&gt; 、 &lt;code&gt;Button&lt;/code&gt; 、および &lt;code&gt;Label&lt;/code&gt; もあります。 &lt;code&gt;Label&lt;/code&gt; は、最初のシーンの &lt;code&gt;TextField&lt;/code&gt; に入力されたテキストを表示します。</target>
        </trans-unit>
        <trans-unit id="921894831c197b9dfa4a8f25ac6ebda5487c7680" translate="yes" xml:space="preserve">
          <source>Yes you can.</source>
          <target state="translated">そうだな</target>
        </trans-unit>
        <trans-unit id="73b530ca384585cc2ac29282203c5ad1b15c177c" translate="yes" xml:space="preserve">
          <source>You can construct a new controller in code, passing any parameters you want from your caller into the controller constructor.  Once you have constructed a controller, you can set it on an FXMLLoader instance &lt;em&gt;before&lt;/em&gt; you invoke the &lt;code&gt;load()&lt;/code&gt;&lt;em&gt;instance&lt;/em&gt; method.</source>
          <target state="translated">コードで新しいコントローラーを作成し、必要なパラメーターを呼び出し元からコントローラーコンストラクターに渡すことができます。 コントローラを作成したら、 &lt;code&gt;load()&lt;/code&gt; &lt;em&gt;インスタンス&lt;/em&gt;メソッドを呼び出す&lt;em&gt;前&lt;/em&gt;に、FXMLLoaderインスタンス&lt;em&gt;に&lt;/em&gt;コントローラを設定でき&lt;em&gt;ます&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="3ead7a6dc421901bccc6c7ac969a9dde19578f7d" translate="yes" xml:space="preserve">
          <source>You can decide to use a public observable list to store public data, or just create a public setter method to store data and retrieve from the corresponding controller</source>
          <target state="translated">パブリックデータを格納するためにパブリックオブザーバブルリストを使用するか、単にパブリックセッターメソッドを作成してデータを格納し、対応するコントローラから取得するかを決めることができます。</target>
        </trans-unit>
        <trans-unit id="dcd8769e54975ae4d90bfc3d0d1dd8e004a1eea0" translate="yes" xml:space="preserve">
          <source>You have to create one Context Class.</source>
          <target state="translated">コンテキストクラスを1つ作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="6f81053bd7041eb7c1619453fa02334681231969" translate="yes" xml:space="preserve">
          <source>You have to just set instance of controller in initialization using</source>
          <target state="translated">を使用して初期化時にコントローラのインスタンスを設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="c0ccfe1fd7d9afe28f79a42585f7ea2c363af919" translate="yes" xml:space="preserve">
          <source>You need to add in the first controller:</source>
          <target state="translated">最初のコントローラーで追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="ed7bd1e5f4ebf3feafa43f27540f8e76a6da6195" translate="yes" xml:space="preserve">
          <source>and you can use it from your whole application just using</source>
          <target state="translated">を使用するだけで、アプリケーション全体から使用することができます。</target>
        </trans-unit>
        <trans-unit id="488628eb4fb22f92bb0121af1c4d3873d629e952" translate="yes" xml:space="preserve">
          <source>javafx.scene.Node class has a pair of methods 
setUserData(Object)
 and 
Object getUserData()</source>
          <target state="translated">javafx.scene.Nodeクラスには、setUserData(Object)とObject getUserData()のペアのメソッドがあります。</target>
        </trans-unit>
        <trans-unit id="bbd8c0d44e3b021ea295bd918cd65c9c5e691e93" translate="yes" xml:space="preserve">
          <source>on first method, why do you return Stage? The method can be void as well because you already giving the command show(); just before return stage;. How do you plan usage by returning the Stage</source>
          <target state="translated">最初のメソッドでは、なぜStageを返すのでしょうか?return stage;の直前に既に show();コマンドを与えているので、このメソッドも同様に void にすることができます。を返すことで、どのように利用を計画しているのでしょうか?</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
