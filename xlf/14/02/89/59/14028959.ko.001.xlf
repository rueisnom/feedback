<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://stackoverflow.com/questions/14028959">
    <body>
      <group id="14028959">
        <trans-unit id="8924a2a5367a406fb1257247f96708b20d64a0ee" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://api.jquery.com/on/#direct-and-delegated-events&quot;&gt;Delegated events&lt;/a&gt; have the advantage that they can process events from descendant elements that are added to the document at a later time.</source>
          <target state="translated">&lt;a href=&quot;http://api.jquery.com/on/#direct-and-delegated-events&quot;&gt;위임 된 이벤트&lt;/a&gt; 는 나중에 문서에 추가 된 하위 요소의 이벤트를 처리 할 수 ​​있다는 이점이 있습니다.</target>
        </trans-unit>
        <trans-unit id="e77d7bd8d73db8c4505911b5e1ebf30630b866f2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getElementById&lt;/code&gt; requires the passed string to be the ID &lt;em&gt;verbatim&lt;/em&gt;, and nothing else. If you prefix the passed string with a &lt;code&gt;#&lt;/code&gt;, and the ID does not start with a &lt;code&gt;#&lt;/code&gt;, nothing will be selected:</source>
          <target state="translated">&lt;code&gt;getElementById&lt;/code&gt; 는 전달 된 문자열이 ID &lt;em&gt;verbatim&lt;/em&gt; 이어야하며 다른 것은 없습니다. 전달 된 문자열 앞에 &lt;code&gt;#&lt;/code&gt; 을 붙이고 ID가 &lt;code&gt;#&lt;/code&gt; 으로 시작하지 않으면 아무것도 선택되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c0ba424acb76191e266fd4e8762af34efc701a68" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;For the remainder of this answer I will use &lt;code&gt;getElementById&lt;/code&gt; as example, but the same applies to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/DOM/element.getElementsByTagName&quot;&gt;&lt;code&gt;getElementsByTagName&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/DOM/Document.querySelector&quot;&gt;&lt;code&gt;querySelector&lt;/code&gt;&lt;/a&gt; and any other DOM method that selects elements.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;이 답변의 나머지 부분에서는 &lt;code&gt;getElementById&lt;/code&gt; 를 예로 사용하지만 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/DOM/element.getElementsByTagName&quot;&gt; &lt;code&gt;getElementsByTagName&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/DOM/Document.querySelector&quot;&gt; &lt;code&gt;querySelector&lt;/code&gt; &lt;/a&gt; 및 요소를 선택하는 다른 DOM 메소드에도 동일하게 적용됩니다.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="015a0be7c63c50d99aee14b3e37b72327797108f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Possible Reasons&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;가능한 이유&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7ed5bd5bb9f28780bff70ccf6e2b10fee249081b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reasons why id based selectors don't work&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ID 기반 선택기가 작동하지 않는 이유&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="14c7390212a62ca68547159c016f8ba2b1e8e9a2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short and simple:&lt;/strong&gt; Because the elements you are looking for do not exist in the document (yet).</source>
          <target state="translated">&lt;strong&gt;짧고 단순함 :&lt;/strong&gt; 찾고있는 요소가 문서에 존재하지 않기 때문에 (아직)</target>
        </trans-unit>
        <trans-unit id="72f2b8ea240994973b8c98d5825ace1bb9366049" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Solutions&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Solutions&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0a33cff9020a55fa3185256ec7c4be09e6bf6115" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;jQuery&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;jQuery&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ff5e9cc2d9b8cc293b94e8c06f8a77f837a8697c" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;Note: Placing scripts at the bottom is generally considered a &lt;a href=&quot;http://developer.yahoo.com/performance/rules.html#js_bottom&quot;&gt;best practice&lt;/a&gt;.&lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;참고 : 맨 아래에 스크립트를 배치하는 것이 일반적으로 &lt;a href=&quot;http://developer.yahoo.com/performance/rules.html#js_bottom&quot;&gt;모범 사례로&lt;/a&gt; 간주됩니다.&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="1593ebef4da197c68a8976ea44377017c1bc34f7" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;Note: The &lt;code&gt;defer&lt;/code&gt; attribute certainly &lt;em&gt;seems&lt;/em&gt; like a magic bullet &lt;em&gt;but&lt;/em&gt; it's important to be aware of the caveats...&lt;br/&gt;
1. &lt;code&gt;defer&lt;/code&gt; can only be used for external scripts, i.e.: those having a &lt;code&gt;src&lt;/code&gt; attribute.&lt;br/&gt;
2. be aware of &lt;a href=&quot;http://caniuse.com/script-defer&quot;&gt;browser support&lt;/a&gt;, i.e.: buggy implementation in IE &amp;lt; 10&lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;참고 : &lt;code&gt;defer&lt;/code&gt; 속성은 확실히 마법의 총알처럼 &lt;em&gt;보이지만&lt;/em&gt; 주의 사항을 알고 있어야합니다 ...&lt;/sub&gt; &lt;sub&gt;&lt;br/&gt;&lt;/sub&gt; &lt;sub&gt;1. &lt;code&gt;defer&lt;/code&gt; 은 외부 스크립트, 즉 &lt;code&gt;src&lt;/code&gt; 속성이있는 스크립트에만 사용할 수 있습니다.&lt;/sub&gt; &lt;sub&gt;&lt;br/&gt;&lt;/sub&gt; &lt;sub&gt;2. &lt;a href=&quot;http://caniuse.com/script-defer&quot;&gt;브라우저 지원&lt;/a&gt; 에주의하십시오. 예 : IE &amp;lt;10의 버그 구현&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="a69194614b3a689f24407f5dd67dd82b01afe526" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;Note: Typically, this pattern is reserved for elements which didn't exist at load-time &lt;em&gt;or&lt;/em&gt; to avoid attaching a large amount of handlers. It's also worth pointing out that while I've attached a handler to &lt;code&gt;document&lt;/code&gt; (for demonstrative purposes), you should select the nearest reliable ancestor.&lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;참고 : 일반적으로이 패턴은로드시 존재하지 않았 &lt;em&gt;거나&lt;/em&gt; 많은 양의 핸들러를 첨부하지 않도록하는 요소를 위해 예약되어 있습니다.&lt;/sub&gt; &lt;sub&gt; &lt;code&gt;document&lt;/code&gt; 처리기를 첨부했지만 (증명 목적으로) 가장 가까운 신뢰할 수있는 조상을 선택해야합니다.&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="5662f3c642a70828b666a05142606ad1be970a12" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;Note: You could simply bind to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Reference/Events/DOMContentLoaded&quot;&gt;&lt;code&gt;DOMContentLoaded&lt;/code&gt;&lt;/a&gt; or  &lt;code&gt;window.&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/window.onload?redirect=no&quot;&gt;onload&lt;/a&gt;&lt;/code&gt; but each has its caveats. jQuery's &lt;a href=&quot;http://api.jquery.com/ready/&quot;&gt;&lt;code&gt;ready()&lt;/code&gt;&lt;/a&gt; delivers a hybrid solution.&lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;참고 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Reference/Events/DOMContentLoaded&quot;&gt; &lt;code&gt;DOMContentLoaded&lt;/code&gt; &lt;/a&gt; 또는 &lt;code&gt;window.&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/window.onload?redirect=no&quot;&gt;onload&lt;/a&gt;&lt;/code&gt; 간단히 바인딩 할 수 있습니다.&lt;/sub&gt; &lt;sub&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/window.onload?redirect=no&quot;&gt;온로드&lt;/a&gt; 하지만 각각 경고가 있습니다.&lt;/sub&gt; &lt;sub&gt;jQuery의 &lt;a href=&quot;http://api.jquery.com/ready/&quot;&gt; &lt;code&gt;ready()&lt;/code&gt; &lt;/a&gt; 는 하이브리드 솔루션을 제공합니다.&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="080383d3ea001a7b11649ddd56e96e875ad6928e" translate="yes" xml:space="preserve">
          <source>A standard DOM method returning &lt;code&gt;null&lt;/code&gt; resulting in any of several errors:</source>
          <target state="translated">몇 가지 오류가 발생하여 &lt;code&gt;null&lt;/code&gt; 을 반환하는 표준 DOM 메서드 :</target>
        </trans-unit>
        <trans-unit id="9bca2ae53e344091d535523c3a1cc32d38418930" translate="yes" xml:space="preserve">
          <source>Again, though, it is most likely that the element you are looking for simply is not (yet) in the document, and you should do as Felix suggests. However, you should also be aware that that is increasingly not the only reason that an element might be unfindable (either temporarily or permanently).</source>
          <target state="translated">다시 말하지만, 당신이 찾고있는 요소가 문서에 아직 (아직) 포함되어 있지 않을 가능성이 높으며 Felix가 제안한대로해야합니다. 그러나 이것이 요소를 찾을 수없는 (일시적으로 또는 영구적으로) 유일한 이유는 아니라는 점에 유의해야합니다.</target>
        </trans-unit>
        <trans-unit id="07610623ac040b4810c15fdab757ac4ab9084743" translate="yes" xml:space="preserve">
          <source>Alternatively you can also use the shorthand syntax:</source>
          <target state="translated">또는 속기 구문을 사용할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="bdca6ee54e3417518e64c91140f6e7f5b753a038" translate="yes" xml:space="preserve">
          <source>An added twist is when jQuery is not found because you have loaded the script without protocol and are running from file system:</source>
          <target state="translated">프로토콜없이 스크립트를로드하고 파일 시스템에서 실행 중이므로 jQuery를 찾을 수없는 경우가 있습니다.</target>
        </trans-unit>
        <trans-unit id="1d339675909c02dd389577b6db384e83f090bc80" translate="yes" xml:space="preserve">
          <source>An element with the passed ID really does not exist in the document. You should double check that the ID you pass to &lt;code&gt;getElementById&lt;/code&gt; really matches an ID of an existing element in the (generated) HTML and that you have not &lt;em&gt;misspelled&lt;/em&gt; the ID (IDs are &lt;em&gt;case-sensitive&lt;/em&gt;!).</source>
          <target state="translated">전달 된 ID를 가진 요소가 문서에 실제로 존재하지 않습니다. &lt;code&gt;getElementById&lt;/code&gt; 에 전달한 ID가 (생성 된) HTML에있는 기존 요소의 ID와 실제로 일치하는지, &lt;em&gt;철자를 잘못 입력&lt;/em&gt; 하지 않았는지 다시 한 번 확인해야합니다 (ID는 &lt;em&gt;대소 문자를 구분합니다&lt;/em&gt; !).</target>
        </trans-unit>
        <trans-unit id="49f80df991332bde3bd1f84092e388c4b4b7e458" translate="yes" xml:space="preserve">
          <source>Any other spelling or capitalization will not work. For example, &lt;code&gt;document.getElementByClassName&lt;/code&gt; will throw an error.</source>
          <target state="translated">다른 철자 나 대문자는 작동하지 않습니다. 예를 들어, &lt;code&gt;document.getElementByClassName&lt;/code&gt; 은 오류를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="a213d53bf3b6149f7926f33dada23170edcc8f6d" translate="yes" xml:space="preserve">
          <source>As @FelixKling pointed out, the most likely scenario is that the nodes you are looking for do not exist (yet).</source>
          <target state="translated">@FelixKling이 지적했듯이 가장 가능성이 높은 시나리오는 찾고있는 노드가 존재하지 않는 것입니다 (아직).</target>
        </trans-unit>
        <trans-unit id="60a04123f756439b784cb366dca7abc4a288daf3" translate="yes" xml:space="preserve">
          <source>As almost everything we do when using jQuery reads or manipulates the document object model (DOM), we need to make sure that we start adding events etc. as soon as the DOM is ready.</source>
          <target state="translated">jQuery를 사용할 때 수행하는 거의 모든 것이 DOM (Document Object Model)을 읽거나 조작하므로 DOM이 준비 되 자마자 이벤트 등을 추가하기 시작해야합니다.</target>
        </trans-unit>
        <trans-unit id="d60f5991a3d77cef7e814ebfd8ca813c8403f2ec" translate="yes" xml:space="preserve">
          <source>Before you make a call to &lt;code&gt;getElementById&lt;/code&gt; (or any DOM method for that matter), make sure the elements you want to access exist, i.e. the DOM is loaded.</source>
          <target state="translated">&lt;code&gt;getElementById&lt;/code&gt; (또는 해당 사안에 대한 DOM 메소드)를 호출하기 전에 액세스하려는 요소가 존재하는지 확인하십시오 (예 : DOM이로드 됨).</target>
        </trans-unit>
        <trans-unit id="101e21a62a75fdd1d662483537000acc22dc3a9a" translate="yes" xml:space="preserve">
          <source>Both are equivalent.</source>
          <target state="translated">둘 다 동일합니다.</target>
        </trans-unit>
        <trans-unit id="85831e3e67da9b798926d1812a4b2ba0e21df397" translate="yes" xml:space="preserve">
          <source>Capitalization and spelling &lt;strong&gt;does matter&lt;/strong&gt; for all of the above. If the capitalization is different, or the spelling is different, the element will not be selected:</source>
          <target state="translated">대문자와 철자 &lt;strong&gt;는&lt;/strong&gt; 위의 모든 &lt;strong&gt;사항&lt;/strong&gt; 에 &lt;strong&gt;중요&lt;/strong&gt; 합니다. 대문자가 다르거 나 철자가 다른 경우 요소가 선택되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d7f69e049d11cfea430a186ac01ffac1bca0cfc8" translate="yes" xml:space="preserve">
          <source>Consider the following example:</source>
          <target state="translated">다음 예제를 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="2c56ae4b9ac8902b0b04046e5149f74839292980" translate="yes" xml:space="preserve">
          <source>Consider the following markup; script #1 fails to find the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; while script #2 succeeds:</source>
          <target state="translated">다음 마크 업을 고려하십시오. 스크립트 # 1이 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 를 찾지 못하면 스크립트 # 2가 성공합니다.</target>
        </trans-unit>
        <trans-unit id="7c3ebe530f2ce5e3b5c4b4bf17fd9884c0d12366" translate="yes" xml:space="preserve">
          <source>Defer your script until the DOM has been completely parsed, using &lt;a href=&quot;http://api.jquery.com/ready/&quot;&gt;&lt;code&gt;ready()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;http://api.jquery.com/ready/&quot;&gt; &lt;code&gt;ready()&lt;/code&gt; &lt;/a&gt; 사용하여 DOM이 완전히 파싱 될 때까지 스크립트를 연기하십시오.</target>
        </trans-unit>
        <trans-unit id="b8cf7e4da91612229d4bcc0a48e1bd4f4a2e3dce" translate="yes" xml:space="preserve">
          <source>Example problems include:</source>
          <target state="translated">문제의 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="9e0d870c1c90acdabf9461a58d30da031ec538fd" translate="yes" xml:space="preserve">
          <source>Example using bootstrap:</source>
          <target state="translated">부트 스트랩 사용 예 :</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">스 니펫 확장</target>
        </trans-unit>
        <trans-unit id="f15bc741c51141459dfa4c6314441e808bf627e7" translate="yes" xml:space="preserve">
          <source>First make sure that jQuery is loaded properly. &lt;a href=&quot;http://www.netmagazine.com/tutorials/javascript-debugging-beginners&quot;&gt;Use the browser's developer tools&lt;/a&gt; to find out whether the jQuery file was found and correct the URL if it wasn't (e.g. add the &lt;code&gt;http:&lt;/code&gt; or &lt;code&gt;https:&lt;/code&gt; scheme at the beginning, adjust the path, etc.)</source>
          <target state="translated">먼저 jQuery가 올바르게로드되었는지 확인하십시오. &lt;a href=&quot;http://www.netmagazine.com/tutorials/javascript-debugging-beginners&quot;&gt;브라우저의 개발자 도구&lt;/a&gt; 를 사용하여 jQuery 파일을 찾았는지 확인하고없는 경우 URL을 수정하십시오 (예 &lt;code&gt;https:&lt;/code&gt; 처음에 &lt;code&gt;http:&lt;/code&gt; 또는 https : 체계 추가, 경로 조정 등).</target>
        </trans-unit>
        <trans-unit id="f25a0dc25d2dd9a6949b815f32f5128e6fdd633c" translate="yes" xml:space="preserve">
          <source>For elements coming from Ajax responses, use the &lt;code&gt;.bind()&lt;/code&gt; method of jQuery. Older versions of jQuery had &lt;code&gt;.live()&lt;/code&gt; for the same.</source>
          <target state="translated">Ajax 응답에서 오는 요소의 경우 jQuery의 &lt;code&gt;.bind()&lt;/code&gt; 메소드를 사용하십시오. 이전 버전의 jQuery에는 &lt;code&gt;.live()&lt;/code&gt; 가 있습니다.</target>
        </trans-unit>
        <trans-unit id="6831d2a757d8250c7a891fd7a563a0288881a19d" translate="yes" xml:space="preserve">
          <source>For reference, here's the code from that &lt;a href=&quot;https://gh-canon.github.io/misc-demos/log-test-click.js&quot;&gt;external script&lt;/a&gt;:</source>
          <target state="translated">참고로 다음은 해당 &lt;a href=&quot;https://gh-canon.github.io/misc-demos/log-test-click.js&quot;&gt;외부 스크립트&lt;/a&gt; 의 코드입니다.</target>
        </trans-unit>
        <trans-unit id="37538f6aa944cc5a5401f51e8b09cf68e53008e5" translate="yes" xml:space="preserve">
          <source>However, modern development practices can often manipulate document elements outside of the document tree either with DocumentFragments or simply detaching/reattaching current elements directly.  Such techniques may be used as part of JavaScript templating or to avoid excessive repaint/reflow operations while the elements in question are being heavily altered.</source>
          <target state="translated">그러나 현대의 개발 관행은 종종 DocumentFragments를 사용하거나 현재 요소를 직접 분리 / 다시 연결하여 문서 트리 외부의 문서 요소를 조작 할 수 있습니다. 이러한 기술은 JavaScript 템플릿의 일부로 사용되거나 문제의 요소가 크게 변경되는 동안 과도한 다시 페인트 / 리플 로우 작업을 피하기 위해 사용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="abd4457878d0559055496b1a954b5f4cce92f90b" translate="yes" xml:space="preserve">
          <source>If script execution order is not the issue, another possible cause of the problem is that the element is not being selected properly:</source>
          <target state="translated">스크립트 실행 순서가 문제가 아닌 경우 문제의 또 다른 원인은 요소가 올바르게 선택되지 않았기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="e30cbec42caa43d109a65a685b33f9d790d949e9" translate="yes" xml:space="preserve">
          <source>If the element you are trying to access is inside an &lt;code&gt;iframe&lt;/code&gt; and you try to access it outside the context of the &lt;code&gt;iframe&lt;/code&gt; this will also cause it to fail.</source>
          <target state="translated">액세스하려는 요소가 &lt;code&gt;iframe&lt;/code&gt; 내부에 있고 iframe 컨텍스트 외부에서 액세스하려고하면 실패 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="c75388ce5a2b84caf295bcef65acf00bd12ee0e4" translate="yes" xml:space="preserve">
          <source>If you want to get an element in an iframe you can find out how &lt;a href=&quot;https://stackoverflow.com/a/1088569/1435985&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">iframe에서 요소를 얻으려면 &lt;a href=&quot;https://stackoverflow.com/a/1088569/1435985&quot;&gt;여기&lt;/a&gt; 에서 방법을 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="95d29a32089ccae4e1b2bb1d0691e6b1243e83aa" translate="yes" xml:space="preserve">
          <source>In fact, the &lt;a href=&quot;http://docs.jquery.com/Tutorials:Getting_Started_with_jQuery&quot;&gt;jQuery tutorial&lt;/a&gt; explicitly states:</source>
          <target state="translated">실제로 &lt;a href=&quot;http://docs.jquery.com/Tutorials:Getting_Started_with_jQuery&quot;&gt;jQuery 튜토리얼&lt;/a&gt; 은 다음과 같이 명시 적으로 설명합니다.</target>
        </trans-unit>
        <trans-unit id="a691503c17cd23abef6910c23b5d54eef8d766bf" translate="yes" xml:space="preserve">
          <source>Incidentally, in the &lt;a href=&quot;http://caniuse.com/queryselector&quot;&gt;majority of contemporary browsers&lt;/a&gt;, which implement &lt;code&gt;querySelector()&lt;/code&gt; and &lt;code&gt;querySelectorAll()&lt;/code&gt; methods, CSS-style notation is used to retrieve an element by its &lt;code&gt;id&lt;/code&gt;, for example: &lt;code&gt;document.querySelector('#elementID')&lt;/code&gt;, as opposed to the method by which an element is retrieved by its &lt;code&gt;id&lt;/code&gt; under &lt;code&gt;document.getElementById('elementID')&lt;/code&gt;; in the first the &lt;code&gt;#&lt;/code&gt; character is essential, in the second it would lead to the element not being retrieved.</source>
          <target state="translated">또한 &lt;code&gt;querySelector()&lt;/code&gt; 및 &lt;code&gt;querySelectorAll()&lt;/code&gt; 메소드를 구현하는 &lt;a href=&quot;http://caniuse.com/queryselector&quot;&gt;대부분의 최신 브라우저&lt;/a&gt; 에서 CSS 스타일 표기법은 &lt;code&gt;id&lt;/code&gt; 로 요소를 검색하는 데 사용됩니다 &lt;code&gt;document.querySelector('#elementID')&lt;/code&gt; 예 : document.querySelector ( '# elementID')) . &lt;code&gt;document.getElementById('elementID')&lt;/code&gt; 아래의 &lt;code&gt;id&lt;/code&gt; 로 요소를 검색하는 방법; 첫 번째에서 &lt;code&gt;#&lt;/code&gt; 문자는 필수적이며 두 번째에서 요소는 검색되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="47f9b9cf5ebdeefe6717ccf7045b5df0ccb11c3f" translate="yes" xml:space="preserve">
          <source>It has the unfortunate side effect of attempting and failing to load &lt;code&gt;file://somecdn.somewhere.com...&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;file://somecdn.somewhere.com...&lt;/code&gt; 로드 시도 실패의 불행한 부작용이 있습니다 ...</target>
        </trans-unit>
        <trans-unit id="d150f419df3bd87d0a85b14dd917cdb6a7970597" translate="yes" xml:space="preserve">
          <source>Listening to the &lt;code&gt;load&lt;/code&gt;/&lt;code&gt;DOMContentLoaded&lt;/code&gt;  events is exactly what jQuery is doing with &lt;a href=&quot;http://api.jquery.com/ready/&quot;&gt;&lt;code&gt;.ready()&lt;/code&gt; &lt;em&gt;&lt;sup&gt;[docs]&lt;/sup&gt;&lt;/em&gt;&lt;/a&gt;. All your jQuery code that affects DOM element should be inside that event handler.</source>
          <target state="translated">&lt;code&gt;load&lt;/code&gt; / &lt;code&gt;DOMContentLoaded&lt;/code&gt; 이벤트를 듣는 것은 jQuery가 &lt;a href=&quot;http://api.jquery.com/ready/&quot;&gt; &lt;code&gt;.ready()&lt;/code&gt; &lt;em&gt;&lt;sup&gt;[docs]를 사용&lt;/sup&gt;&lt;/em&gt;&lt;/a&gt; 하여 수행하는 것과 정확히 같습니다. DOM 요소에 영향을 미치는 모든 jQuery 코드는 해당 이벤트 핸들러 내에 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="916540a77390cfb70e2e75b4146066ec1363d178" translate="yes" xml:space="preserve">
          <source>Make sure you pass a string to these selector methods. If you pass something that isn't a string to &lt;code&gt;querySelector&lt;/code&gt;, &lt;code&gt;getElementById&lt;/code&gt;, etc, it almost certainly won't work.</source>
          <target state="translated">이 선택기 메소드에 문자열을 전달하십시오. &lt;code&gt;querySelector&lt;/code&gt; , &lt;code&gt;getElementById&lt;/code&gt; 등에 문자열이 아닌 것을 전달하면 거의 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a95828059436c8228e75685affdaa482639ff97a" translate="yes" xml:space="preserve">
          <source>More than one element with the same id is present which is causing a conflict.</source>
          <target state="translated">동일한 ID를 가진 둘 이상의 요소가 존재하여 충돌을 일으 킵니다.</target>
        </trans-unit>
        <trans-unit id="f931faf45cd462de3ad4f54b1ce6ac76a24330e1" translate="yes" xml:space="preserve">
          <source>Move your script further down the page, just before the closing body tag. Organized in this fashion, the rest of the document is parsed before your script is executed:</source>
          <target state="translated">닫는 body 태그 바로 앞에 스크립트를 페이지 아래로 이동하십시오. 이 방식으로 구성하면 스크립트가 실행되기 전에 문서의 나머지 부분이 구문 분석됩니다.</target>
        </trans-unit>
        <trans-unit id="538144420dc5bec57e3c11f07c6303e342cd5a73" translate="yes" xml:space="preserve">
          <source>My solution was to not use the id of an anchor element: &lt;code&gt;&amp;lt;a id='star_wars'&amp;gt;Place to jump to&amp;lt;/a&amp;gt;&lt;/code&gt;. Apparently blazor and other spa frameworks have issues jumping to anchors on the same page. To get around that I had to use &lt;code&gt;document.getElementById('star_wars')&lt;/code&gt;. However this didn't work until I put the id in a paragraph element instead: &lt;code&gt;&amp;lt;p id='star_wars'&amp;gt;Some paragraph&amp;lt;p&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">내 솔루션은 앵커 요소의 ID를 사용하지 않는 것입니다 : &lt;code&gt;&amp;lt;a id='star_wars'&amp;gt;Place to jump to&amp;lt;/a&amp;gt;&lt;/code&gt; . 분명히 블레이저와 다른 스파 프레임 워크는 같은 페이지의 앵커로 점프하는 데 문제가 있습니다. 그 문제를 해결하려면 &lt;code&gt;document.getElementById('star_wars')&lt;/code&gt; 을 사용해야했습니다. 그러나 &lt;code&gt;&amp;lt;p id='star_wars'&amp;gt;Some paragraph&amp;lt;p&amp;gt;&lt;/code&gt; 과 같이 단락 요소에 ID를 넣을 때까지 작동하지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="5f80d48c6e6bd62e1187567c2ae4b2160075cdb2" translate="yes" xml:space="preserve">
          <source>Option 1: Move your script</source>
          <target state="translated">옵션 1 : 스크립트 이동</target>
        </trans-unit>
        <trans-unit id="e5d3dc77c5774c2e4b5d0622ef95ea41d703f3d7" translate="yes" xml:space="preserve">
          <source>Option 2: jQuery's &lt;code&gt;ready()&lt;/code&gt;</source>
          <target state="translated">옵션 2 : jQuery의 &lt;code&gt;ready()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="765a188dc2bbe9e58e82091d54b34d3cf87c6084" translate="yes" xml:space="preserve">
          <source>Option 3: Event Delegation</source>
          <target state="translated">옵션 3 : 이벤트 위임</target>
        </trans-unit>
        <trans-unit id="ed487ab0a08e5b243ca84ee80c8218cb2fdfacc2" translate="yes" xml:space="preserve">
          <source>Option 4: The &lt;code&gt;defer&lt;/code&gt; attribute</source>
          <target state="translated">옵션 4 : &lt;code&gt;defer&lt;/code&gt; 속성</target>
        </trans-unit>
        <trans-unit id="80d1e84071881f5dcaf1e91b9b8f51255096fe78" translate="yes" xml:space="preserve">
          <source>Other solutions include listening to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/DOM/window.onload&quot;&gt;&lt;code&gt;load&lt;/code&gt; &lt;em&gt;&lt;sup&gt;[MDN]&lt;/sup&gt;&lt;/em&gt;&lt;/a&gt; or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla_event_reference/DOMContentLoaded_%28event%29&quot;&gt;&lt;code&gt;DOMContentLoaded&lt;/code&gt; &lt;em&gt;&lt;sup&gt;[MDN]&lt;/sup&gt;&lt;/em&gt;&lt;/a&gt; events. In these cases it does not matter where in the document you place the JavaScript code, you just have to remember to put all DOM processing code in the event handlers.</source>
          <target state="translated">다른 솔루션으로는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/DOM/window.onload&quot;&gt; &lt;code&gt;load&lt;/code&gt; &lt;em&gt;&lt;sup&gt;[MDN]&lt;/sup&gt;&lt;/em&gt;&lt;/a&gt; 또는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla_event_reference/DOMContentLoaded_%28event%29&quot;&gt; &lt;code&gt;DOMContentLoaded&lt;/code&gt; &lt;em&gt;&lt;sup&gt;[MDN]&lt;/sup&gt;&lt;/em&gt;&lt;/a&gt; 이벤트 청취가 있습니다. 이 경우 문서에서 JavaScript 코드를 배치하는 위치는 중요하지 않으며 모든 DOM 처리 코드를 이벤트 핸들러에 배치해야합니다.</target>
        </trans-unit>
        <trans-unit id="0a902d3f198dad7513a2e7821cf1e4cf668118f7" translate="yes" xml:space="preserve">
          <source>Please see the &lt;a href=&quot;http://www.quirksmode.org/js/introevents.html&quot;&gt;articles at quirksmode.org&lt;/a&gt; for more information regarding event handling and browser differences.</source>
          <target state="translated">이벤트 처리 및 브라우저 차이점에 대한 자세한 내용은 &lt;a href=&quot;http://www.quirksmode.org/js/introevents.html&quot;&gt;quirksmode.org&lt;/a&gt; 의 기사를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="7e4ff926baa4becadd4abb94d62d06d09a997c00" translate="yes" xml:space="preserve">
          <source>Similarly, for &lt;code&gt;getElementsByClassName&lt;/code&gt;, don't prefix the passed string with a &lt;code&gt;.&lt;/code&gt;:</source>
          <target state="translated">마찬가지로 &lt;code&gt;getElementsByClassName&lt;/code&gt; 의 경우 전달 된 문자열 앞에 접두사를 붙이지 마십시오 &lt;code&gt;.&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="dafff354107481c6b656c836a1d0b5fa69c17d39" translate="yes" xml:space="preserve">
          <source>Similarly, the new &quot;Shadow DOM&quot; functionality being rolled out across modern browsers allows elements to be part of the document, but not query-able by document.getElementById and all of its sibling methods (querySelector, etc.). This is done to encapsulate functionality and specifically hide it.</source>
          <target state="translated">마찬가지로 최신 브라우저에서 롤아웃되는 새로운 &quot;Shadow DOM&quot;기능을 사용하면 요소를 문서의 일부로 만들 수 있지만 document.getElementById 및 모든 형제 메서드 (querySelector 등)에서 쿼리 할 수는 없습니다. 이것은 기능을 캡슐화하고 구체적으로 숨기려고 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="586f205a19dc89dacd298b1026eddf22b562eb67" translate="yes" xml:space="preserve">
          <source>So, what should you do? You've got a few options:</source>
          <target state="translated">그래서 어떻게해야합니까? 몇 가지 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="ad75445fc0995250056cd81b47356a9e454e1852" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;div&lt;/code&gt; appears &lt;em&gt;after&lt;/em&gt; the &lt;code&gt;script&lt;/code&gt;. At the moment the script is executed, the element does not exist &lt;em&gt;yet&lt;/em&gt; and &lt;code&gt;getElementById&lt;/code&gt; will return &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;script&lt;/code&gt; &lt;em&gt;뒤에&lt;/em&gt; &lt;code&gt;div&lt;/code&gt; 가 나타납니다. 스크립트가 실행되는 시점에 요소는 &lt;em&gt;아직&lt;/em&gt; 존재하지 않으며 &lt;code&gt;getElementById&lt;/code&gt; 는 &lt;code&gt;null&lt;/code&gt; 을 리턴 합니다.</target>
        </trans-unit>
        <trans-unit id="4f141d4eb7c661355427cdcd27d3f176e0c5ea08" translate="yes" xml:space="preserve">
          <source>The element does not exist &lt;em&gt;at the moment&lt;/em&gt; you call &lt;code&gt;getElementById&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;getElementById&lt;/code&gt; 를 호출 &lt;em&gt;하는 시점에&lt;/em&gt; 요소가 없습니다.</target>
        </trans-unit>
        <trans-unit id="e7ede7d603adcf7dfbedd030a40130e8c177ee8f" translate="yes" xml:space="preserve">
          <source>The element exists, but it is not registered in DOM [in case of HTML nodes appended dynamically from Ajax responses].</source>
          <target state="translated">요소가 존재하지만 DOM에 등록되지 않았습니다 [Ajax 응답에서 동적으로 추가 된 HTML 노드의 경우].</target>
        </trans-unit>
        <trans-unit id="32cd415bf0c622f7c71bcfdff201777349f802ac" translate="yes" xml:space="preserve">
          <source>The element you were trying to find wasn&amp;rsquo;t in the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model&quot;&gt;DOM&lt;/a&gt; when your script ran.</source>
          <target state="translated">스크립트를 실행할 때 찾으려는 요소가 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model&quot;&gt;DOM&lt;/a&gt; 에 없었습니다.</target>
        </trans-unit>
        <trans-unit id="5c20f6380c5296e9dc3106f53ead7704368cb656" translate="yes" xml:space="preserve">
          <source>The element/DOM with id specified doesn't exist yet.</source>
          <target state="translated">ID가 지정된 요소 / DOM이 아직 존재하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f7256669e7054ec931b0ef399ee9abe501be8b45" translate="yes" xml:space="preserve">
          <source>The latter case is quite common. Browsers parse and process the HTML from top to bottom. That means that any call to a DOM element which occurs before that DOM element appears in the HTML, will fail.</source>
          <target state="translated">후자의 경우는 매우 일반적입니다. 브라우저는 HTML을 위에서 아래로 구문 분석하고 처리합니다. 즉, DOM 요소가 HTML에 나타나기 전에 발생하는 DOM 요소에 대한 호출은 실패합니다.</target>
        </trans-unit>
        <trans-unit id="5ba99d17d910a347626098bad4b56ce98cddcf64" translate="yes" xml:space="preserve">
          <source>The most common forms are:</source>
          <target state="translated">가장 일반적인 형태는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="2aeb7b0538f0d108fa33aadb5cdd665b87541c7b" translate="yes" xml:space="preserve">
          <source>The position of your DOM-reliant script can have a profound effect upon its behavior. Browsers parse HTML documents from top to bottom. Elements are added to the DOM and scripts are (generally) executed as they're encountered. &lt;strong&gt;This means that order matters.&lt;/strong&gt; Typically, scripts can't find elements which appear later in the markup because those elements have yet to be added to the DOM.</source>
          <target state="translated">DOM 의존 스크립트의 위치는 동작에 큰 영향을 줄 수 있습니다. 브라우저는 HTML 문서를 위에서 아래로 구문 분석합니다. 요소가 DOM에 추가되고 스크립트는 일반적으로 발생하는대로 실행됩니다. &lt;strong&gt;이것은 순서가 중요하다는 것을 의미합니다.&lt;/strong&gt; 일반적으로 스크립트는 마크 업에서 나중에 표시되는 요소를 찾을 수 없습니다. 이러한 요소는 아직 DOM에 추가되지 않았기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="da5bd825790b41cd649e60bab032c4ec699cd060" translate="yes" xml:space="preserve">
          <source>The rules here are, in most cases, identical to those for CSS selectors, and can be seen in detail &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">여기의 규칙은 대부분 CSS 선택기의 규칙과 동일하며 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors&quot;&gt;여기&lt;/a&gt; 에서 자세히 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5fa778e7c3c9aa6efc9a31fbba269350a13bff1a" translate="yes" xml:space="preserve">
          <source>The same applies to all selectors with jQuery. jQuery won't find elements if you &lt;em&gt;misspelled&lt;/em&gt; your selector or you are trying to select them &lt;em&gt;before they actually exist&lt;/em&gt;.</source>
          <target state="translated">jQuery를 사용하는 모든 선택기에 동일하게 적용됩니다. 선택기의 &lt;em&gt;철자가 틀리&lt;/em&gt; 거나 &lt;em&gt;실제로 존재하기 전에&lt;/em&gt; 선택하려고하면 jQuery가 요소를 찾지 &lt;em&gt;않습니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="90fc575537035603237429cd2b6951e4f61861a0" translate="yes" xml:space="preserve">
          <source>There are two reasons why an element might not exist:</source>
          <target state="translated">요소가 존재하지 않는 데는 두 가지 이유가 있습니다.</target>
        </trans-unit>
        <trans-unit id="070e887ce3ce8f4a2bd57f6125ac53bf5183a409" translate="yes" xml:space="preserve">
          <source>This can be ensured by simply putting your JavaScript &lt;em&gt;after&lt;/em&gt; the corresponding DOM element</source>
          <target state="translated">이는 해당 DOM 요소 다음에 JavaScript를두기 만하면 보장 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a381010cdf701b03dcc376cb82944d9e43aa7fd7" translate="yes" xml:space="preserve">
          <source>To do this, we register a ready event for the document.</source>
          <target state="translated">이를 위해 문서에 대한 준비된 이벤트를 등록합니다.</target>
        </trans-unit>
        <trans-unit id="dc128aa7cdcba37391eb09c2e71372f3f108508a" translate="yes" xml:space="preserve">
          <source>To match an element which has two or more attributes (like two class names, or a class name and a &lt;code&gt;data-&lt;/code&gt; attribute), put the selectors for each attribute next to each other in the selector string, &lt;em&gt;without&lt;/em&gt; a space separating them (because a space indicates the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Descendant_combinator&quot;&gt;descendant selector&lt;/a&gt;). For example, to select:</source>
          <target state="translated">두 개 이상의 속성 (예 : 두 개의 클래스 이름 또는 클래스 이름 및 &lt;code&gt;data-&lt;/code&gt; 속성)이있는 요소를 일치 시키려면 공백 &lt;em&gt;없이&lt;/em&gt; 구분 기호 문자열에서 각 속성의 선택기를 나란히 두십시오. 공백은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Descendant_combinator&quot;&gt;자손 선택기를&lt;/a&gt; 나타냅니다). 예를 들어, 다음을 선택하십시오.</target>
        </trans-unit>
        <trans-unit id="313116b8ef2d42c88923b993b1bc35879e7bac0a" translate="yes" xml:space="preserve">
          <source>Try to access the element after its declaration or alternatively use stuff like &lt;code&gt;$(document).ready();&lt;/code&gt;</source>
          <target state="translated">선언 후 요소에 액세스하거나 &lt;code&gt;$(document).ready();&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="455f90d95489802d06fdb6e0c7f2ec19ee678070" translate="yes" xml:space="preserve">
          <source>Uncaught TypeError: Cannot read property 'addEventListener' of null</source>
          <target state="translated">잡히지 않은 TypeError : null의 'addEventListener'속성을 읽을 수 없습니다</target>
        </trans-unit>
        <trans-unit id="f07cf9a0ba3f6ed7bad230b3a1a524d40a515c1a" translate="yes" xml:space="preserve">
          <source>Uncaught TypeError: Cannot read property 'style' of null</source>
          <target state="translated">잡히지 않은 TypeError : null의 'style'속성을 읽을 수 없습니다</target>
        </trans-unit>
        <trans-unit id="8d6c4f621f3fd98dd88c2eb2ba7c098113ff02cb" translate="yes" xml:space="preserve">
          <source>Uncaught TypeError: Cannot set property '...' of null
  Uncaught TypeError: Cannot read property '...' of null</source>
          <target state="translated">잡히지 않은 TypeError : null의 속성 '...'을 설정할 수 없습니다 잡히지 않은 TypeError : null의 속성 '...'을 읽을 수 없습니다</target>
        </trans-unit>
        <trans-unit id="9e46c56c3da96933c13555127a321d3ea74dddb6" translate="yes" xml:space="preserve">
          <source>Uncaught TypeError: Cannot set property 'onclick' of null</source>
          <target state="translated">잡히지 않은 TypeError : null 속성 'onclick'을 설정할 수 없습니다</target>
        </trans-unit>
        <trans-unit id="d3570e42a3ba550dc86040eeb782b6be83fd1511" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-defer&quot;&gt;&lt;code&gt;defer&lt;/code&gt;&lt;/a&gt; attribute of &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 의 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-defer&quot;&gt; &lt;code&gt;defer&lt;/code&gt; &lt;/a&gt; 속성을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="5e854ff9f7b0f779cfadaf41007115eea86b7f57" translate="yes" xml:space="preserve">
          <source>Use tools [for example, webdeveloper plugin for browsers] to find duplicate ids and remove them.</source>
          <target state="translated">도구 (예 : 브라우저 용 웹 개발자 플러그인)를 사용하여 중복 ID를 찾아 제거하십시오.</target>
        </trans-unit>
        <trans-unit id="dfcf619bd49916c9ab2578b9fa6ef9ac5a5c9fa1" translate="yes" xml:space="preserve">
          <source>What are the possible reasons for &lt;code&gt;document.getElementById&lt;/code&gt;, &lt;code&gt;$(&quot;#id&quot;)&lt;/code&gt; or any other DOM method / jQuery selector not finding the elements?</source>
          <target state="translated">&lt;code&gt;document.getElementById&lt;/code&gt; , &lt;code&gt;$(&quot;#id&quot;)&lt;/code&gt; 또는 다른 DOM 메소드 / jQuery 선택자가 요소를 찾지 못하는 이유는 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="f8e096c13c326ee14610dd8d0a85db716a8fe487" translate="yes" xml:space="preserve">
          <source>When an element raises an event (provided that it's a &lt;a href=&quot;http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-flow-bubbling&quot;&gt;bubbling&lt;/a&gt; event and nothing stops its propagation), each parent in that element's ancestry receives the event as well. That allows us to attach a handler to an existing element and sample events as they bubble up from its descendants... even those added after the handler is attached. All we have to do is check the event to see whether it was raised by the desired element and, if so, run our code.</source>
          <target state="translated">요소가 이벤트를 발생 시키면 ( &lt;a href=&quot;http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-flow-bubbling&quot;&gt;버블 링&lt;/a&gt; 이벤트이고 전파를 멈추지 않는 경우) 해당 요소의 상위 항목에있는 각 부모도 이벤트를받습니다. 이를 통해 핸들러를 기존 요소에 첨부하고 이벤트가 하위 요소에서 버블 링 될 때 이벤트 핸들러를 첨부 할 수 있습니다. 우리가해야 할 일은 원하는 요소에 의해 이벤트가 발생했는지 확인하고, 그렇다면 코드를 실행하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="034077f607672ac7f0bb8ae04ed3b39cd0ae8777" translate="yes" xml:space="preserve">
          <source>Why does jQuery or a DOM method such as getElementById not find the element</source>
          <target state="translated">jQuery 또는 getElementById와 같은 DOM 메소드가 요소를 찾지 못하는 이유</target>
        </trans-unit>
        <trans-unit id="dc184c711e7091bd8c98aecc5cbb62688c81257f" translate="yes" xml:space="preserve">
          <source>With querySelector, querySelectorAll, and jQuery, to match an element with a particular class name, put a &lt;code&gt;.&lt;/code&gt; directly before the class. Similarly, to match an element with a particular ID, put a &lt;code&gt;#&lt;/code&gt; directly before the ID:</source>
          <target state="translated">querySelector, querySelectorAll 및 jQuery를 사용하여 특정 클래스 이름과 요소를 일치 시키려면을 입력하십시오 &lt;code&gt;.&lt;/code&gt; 수업 직전에. 마찬가지로 요소를 특정 ID와 일치 시키려면 ID 바로 앞에 &lt;code&gt;#&lt;/code&gt; 을 넣으십시오.</target>
        </trans-unit>
        <trans-unit id="3610958c37c16c3b24428fbebdb492e6ac8edf70" translate="yes" xml:space="preserve">
          <source>You also need to make sure the methods have the proper capitalization and spelling. Use one of:</source>
          <target state="translated">또한 메소드에 대문자와 철자가 올바른지 확인해야합니다. 다음 중 하나를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="9e3289218ac52898f053a6f0437d4e0bcbf7432d" translate="yes" xml:space="preserve">
          <source>[&lt;code&gt;defer&lt;/code&gt;, a Boolean attribute,] is set to indicate to a browser that the script is meant to be executed after the document has been parsed, but before firing &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/DOMContentLoaded&quot;&gt;&lt;code&gt;DOMContentLoaded&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">[ &lt;code&gt;defer&lt;/code&gt; , Boolean attribute]는 문서가 파싱 된 후 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/DOMContentLoaded&quot;&gt; &lt;code&gt;DOMContentLoaded&lt;/code&gt; 를&lt;/a&gt; 실행하기 전에 스크립트가 실행되도록 브라우저에 표시하도록 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="efa4412560fb8b53d8dc861254ce0bc2ad113c4b" translate="yes" xml:space="preserve">
          <source>in which case you can also put the code just before the closing body tag (&lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt;) (all DOM elements will be available at the time the script is executed).</source>
          <target state="translated">이 경우 닫는 body 태그 ( &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; ) 바로 앞에 코드를 넣을 수도 있습니다 (스크립트가 실행될 때 모든 DOM 요소를 사용할 수 있음).</target>
        </trans-unit>
        <trans-unit id="4963706dc19c73d8cd5594cce8aa06cd58c3acad" translate="yes" xml:space="preserve">
          <source>jQuery &quot;getter&quot; methods (&lt;code&gt;.val()&lt;/code&gt;, &lt;code&gt;.html()&lt;/code&gt;, &lt;code&gt;.text()&lt;/code&gt;) returning &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">jQuery &quot;getter&quot;메소드 ( &lt;code&gt;.val()&lt;/code&gt; , &lt;code&gt;.html()&lt;/code&gt; &lt;code&gt;.text()&lt;/code&gt; )가 &lt;code&gt;undefined&lt;/code&gt; 리턴 함</target>
        </trans-unit>
        <trans-unit id="9802c6bb85e543ec9de385e4813742d2dfa50c5e" translate="yes" xml:space="preserve">
          <source>jQuery silently failing to bind an event handler</source>
          <target state="translated">jQuery가 자동으로 이벤트 핸들러를 바인드하지 못함</target>
        </trans-unit>
        <trans-unit id="b48732df8cf05d9e667edc4cd791abd8b129164a" translate="yes" xml:space="preserve">
          <source>jQuery's &lt;a href=&quot;http://api.jquery.com/on/&quot;&gt;&lt;code&gt;on()&lt;/code&gt;&lt;/a&gt; performs that logic for us. We simply provide an event name, a selector for the desired descendant, and an event handler:</source>
          <target state="translated">jQuery의 &lt;a href=&quot;http://api.jquery.com/on/&quot;&gt; &lt;code&gt;on()&lt;/code&gt; &lt;/a&gt; 은 우리를 위해 그 논리를 수행합니다. 이벤트 이름, 원하는 자손의 선택기 및 이벤트 핸들러를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="f1554d2488c689db68997692a791114636eddfeb" translate="yes" xml:space="preserve">
          <source>the problem is that the dom element 'speclist' is not created at the time the javascript code is getting executed. So I put the javascript code inside a function and called that function on body onload event.</source>
          <target state="translated">문제는 자바 스크립트 코드가 실행될 때 dom 요소 'speclist'가 생성되지 않는다는 것입니다. 그래서 자바 스크립트 코드를 함수 안에 넣고 body onload 이벤트에서 해당 함수를 호출했습니다.</target>
        </trans-unit>
        <trans-unit id="ea000fff68ad9d8ef18246e6d50c1bd51cfc4412" translate="yes" xml:space="preserve">
          <source>this syntax is used to allow the script to load via HTTPS on a page with protocol https:// and to load the HTTP version on a page with protocol http://</source>
          <target state="translated">이 구문은 https : // 프로토콜이있는 페이지에서 스크립트가 HTTPS를 통해로드되고 http : // 프로토콜이있는 페이지에서 HTTP 버전을로드하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="37ffc3ba660db3114b71640e124172897eb3e550" translate="yes" xml:space="preserve">
          <source>use &lt;code&gt;div.parent &amp;gt; span[data-username=&quot;bob&quot;]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;div.parent &amp;gt; span[data-username=&quot;bob&quot;]&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="27e695518a1c10295c5be7d8a96988309a4a6fef" translate="yes" xml:space="preserve">
          <source>use the query string &lt;code&gt;.foo.bar&lt;/code&gt;. To select</source>
          <target state="translated">쿼리 문자열 &lt;code&gt;.foo.bar&lt;/code&gt; 를 사용하십시오. 선택하려면</target>
        </trans-unit>
        <trans-unit id="d0d0d49284addfeef0dde4bef64d02e1717021c3" translate="yes" xml:space="preserve">
          <source>use the query string &lt;code&gt;.foo[data-bar=&quot;someData&quot;]&lt;/code&gt;. To select the &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; below:</source>
          <target state="translated">쿼리 문자열 &lt;code&gt;.foo[data-bar=&quot;someData&quot;]&lt;/code&gt; . 아래의 &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; 을 선택하려면 :</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
