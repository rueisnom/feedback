<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/14994391">
    <body>
      <group id="14994391">
        <trans-unit id="2e892d84a456775f25c00e4f845837dd39c07406" translate="yes" xml:space="preserve">
          <source>--&amp;gt;For any developer coming from jQuery background, my first advice would be to &quot;learn JavaScript as a first class language before jumping onto a rich framework like AngularJS!&quot;
I learned the above fact the hard way.</source>
          <target state="translated">-&amp;gt; Para cualquier desarrollador que venga de jQuery, mi primer consejo ser&amp;iacute;a &quot;aprender JavaScript como un lenguaje de primera clase antes de saltar a un marco rico como AngularJS&quot;. Aprend&amp;iacute; el hecho anterior de la manera dif&amp;iacute;cil.</target>
        </trans-unit>
        <trans-unit id="396fc50aacb3d9fb04c78bba466f7908a2e8385d" translate="yes" xml:space="preserve">
          <source>1. Don't design your page, and then change it with &lt;a href=&quot;http://en.wikipedia.org/wiki/Document_Object_Model&quot;&gt;DOM&lt;/a&gt; manipulations</source>
          <target state="translated">1. No dise&amp;ntilde;e su p&amp;aacute;gina y luego c&amp;aacute;mbiela con manipulaciones &lt;a href=&quot;http://en.wikipedia.org/wiki/Document_Object_Model&quot;&gt;DOM&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3828151a3b203e32a8d4b22c6fdb84d2f290a8bc" translate="yes" xml:space="preserve">
          <source>2. Don't augment jQuery with AngularJS</source>
          <target state="translated">2.No aumentes la jQuery con AngularJS</target>
        </trans-unit>
        <trans-unit id="cbedaed8896e96dbbaa762bfb0a519199fab646b" translate="yes" xml:space="preserve">
          <source>3. Always think in terms of architecture</source>
          <target state="translated">3.Piensa siempre en t√©rminos de arquitectura</target>
        </trans-unit>
        <trans-unit id="9bb57b273b075b57706f730ef766b8139c69ca9e" translate="yes" xml:space="preserve">
          <source>4. Test-driven development - &lt;em&gt;always&lt;/em&gt;</source>
          <target state="translated">4. Desarrollo basado en pruebas: &lt;em&gt;siempre&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5df0490b33144a83a19e27b67ca325463559d8dd" translate="yes" xml:space="preserve">
          <source>5. Conceptually, directives are &lt;em&gt;not&lt;/em&gt; packaged jQuery</source>
          <target state="translated">5. Conceptualmente, las directivas &lt;em&gt;no&lt;/em&gt; est&amp;aacute;n empaquetadas jQuery</target>
        </trans-unit>
        <trans-unit id="9d37a0363a38e4535d4fbf679c38b69053d2845a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;Dependency injection&lt;/a&gt; (DI) vs. Instatiation - aka de-spaghettification</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;Inyecci&amp;oacute;n de dependencia&lt;/a&gt; (DI) vs. Instatiation - tambi&amp;eacute;n conocido como desespaguetificaci&amp;oacute;n</target>
        </trans-unit>
        <trans-unit id="5b2bf38bee1c00dcbf6a933d82ad04998661ee32" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://en.wikipedia.org/wiki/Separation_of_concerns&quot;&gt;Separation of concerns&lt;/a&gt; (SOC) is a pattern that grew up over many years of web development for a variety of reasons including SEO, accessibility and browser incompatibility. It looks like this:</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/Separation_of_concerns&quot;&gt;La separaci&amp;oacute;n de preocupaciones&lt;/a&gt; (SOC) es un patr&amp;oacute;n que creci&amp;oacute; durante muchos a&amp;ntilde;os de desarrollo web por una variedad de razones que incluyen SEO, accesibilidad e incompatibilidad del navegador. Se parece a esto:</target>
        </trans-unit>
        <trans-unit id="50b9bf0923a4b128bb297b2cf829a6c75cccc91e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://jquery.com&quot;&gt;jQuery&lt;/a&gt;/ &lt;a href=&quot;http://underscorejs.org&quot;&gt;Underscore&lt;/a&gt; for the &lt;strong&gt;facade pattern&lt;/strong&gt; (like WYSIWYG's for manipulating the DOM)</source>
          <target state="translated">&lt;a href=&quot;http://jquery.com&quot;&gt;jQuery&lt;/a&gt; / &lt;a href=&quot;http://underscorejs.org&quot;&gt;Underscore&lt;/a&gt; para el &lt;strong&gt;patr&amp;oacute;n de fachada&lt;/strong&gt; (como WYSIWYG para manipular el DOM)</target>
        </trans-unit>
        <trans-unit id="69042625919dd0e27703e71445b2b7bd23b39703" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://knockoutjs.com&quot;&gt;KnockoutJS&lt;/a&gt; for the &lt;strong&gt;observable, publish/subscribe pattern&lt;/strong&gt;</source>
          <target state="translated">&lt;a href=&quot;http://knockoutjs.com&quot;&gt;KnockoutJS&lt;/a&gt; para el &lt;strong&gt;patr&amp;oacute;n observable de publicaci&amp;oacute;n / suscripci&amp;oacute;n&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d7a0982ee2f9c3c522d1ee89cd375e2cb7609417" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://prototypejs.org&quot;&gt;Prototype.js&lt;/a&gt; for the &lt;strong&gt;prototype/ constructor/ mixin pattern&lt;/strong&gt;</source>
          <target state="translated">&lt;a href=&quot;http://prototypejs.org&quot;&gt;Prototype.js&lt;/a&gt; para el &lt;strong&gt;patr&amp;oacute;n prototype / constructor / mixin&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="92b3217c5ba1cc0f9135ed9705adca8c3f975b4e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://requirejs.org&quot;&gt;RequireJS&lt;/a&gt;/ &lt;a href=&quot;https://github.com/cujojs/curl&quot;&gt;Curl.js&lt;/a&gt; for the &lt;strong&gt;module pattern/ AMD&lt;/strong&gt;</source>
          <target state="translated">&lt;a href=&quot;http://requirejs.org&quot;&gt;RequireJS&lt;/a&gt; / &lt;a href=&quot;https://github.com/cujojs/curl&quot;&gt;Curl.js&lt;/a&gt; para el &lt;strong&gt;patr&amp;oacute;n de m&amp;oacute;dulo / AMD&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d9b870b99d1adcc3ce0b3833fc3f86074e9524de" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://www.google.be/search?q=js+oop&quot;&gt;JavaScript Object-oriented Programming&lt;/a&gt; (this is a Google search link). It is not a library, but certainly a prerequisite to any application programming. It taught me the native implementations of the &lt;strong&gt;prototype, constructor, singleton &amp;amp; decorator patterns&lt;/strong&gt;</source>
          <target state="translated">&lt;a href=&quot;https://www.google.be/search?q=js+oop&quot;&gt;Programaci&amp;oacute;n orientada a objetos JavaScript&lt;/a&gt; (este es un enlace de b&amp;uacute;squeda de Google). No es una biblioteca, pero ciertamente es un requisito previo para la programaci&amp;oacute;n de cualquier aplicaci&amp;oacute;n. Me ense&amp;ntilde;&amp;oacute; las implementaciones nativas de los &lt;strong&gt;patrones de prototipo, constructor, singleton y decorador.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="abd6dd62d85dac964abb4fc9b6d39f70c1511d55" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;The AngularJS way is to extend the capabilities of native looking HTML.&lt;/em&gt; You should write HTML that looks like HTML, extended with custom attributes and elements.</source>
          <target state="translated">&lt;em&gt;La forma AngularJS es extender las capacidades de HTML de aspecto nativo.&lt;/em&gt; Debe escribir HTML que se parezca a HTML, extendido con atributos y elementos personalizados.</target>
        </trans-unit>
        <trans-unit id="42d5cb01532a1eb833bc5dc3442165730fc715f0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;AngularJS and jQuery:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;AngularJS y jQuery:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e2cb0e6123d036e1454b06c3e92f6619c31e7b8c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;AngularJS&lt;/strong&gt; is a beautiful client-side framework, highly testable, that combines tons of cool stuff such as MVC, &lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;dependency injection&lt;/a&gt;, data binding and much more.</source>
          <target state="translated">&lt;strong&gt;AngularJS&lt;/strong&gt; es un hermoso marco del lado del cliente, altamente comprobable, que combina toneladas de cosas interesantes como MVC, &lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;inyecci&amp;oacute;n de dependencia&lt;/a&gt; , enlace de datos y mucho m&amp;aacute;s.</target>
        </trans-unit>
        <trans-unit id="0f7938672e21aa28fcfa2974e178640ad994aae7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Controllers are great:&lt;/strong&gt;
Controllers take care of their own HTML, but this separation works well for common functionality well as. If you want to call the same function on the click of a button on master HTML, just write the same function name in each controller and write individual code.</source>
          <target state="translated">&lt;strong&gt;Los controladores son geniales: los&lt;/strong&gt; controladores se encargan de su propio HTML, pero esta separaci&amp;oacute;n tambi&amp;eacute;n funciona bien para la funcionalidad com&amp;uacute;n. Si desea llamar a la misma funci&amp;oacute;n haciendo clic en un bot&amp;oacute;n en HTML maestro, simplemente escriba el mismo nombre de funci&amp;oacute;n en cada controlador y escriba un c&amp;oacute;digo individual.</target>
        </trans-unit>
        <trans-unit id="c11e6c999d67e30b4dd08344b653ee2887d7eeb1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Extensibility&lt;/strong&gt;: Angular has extended the HTML directives using angular directives. Write expressions inside html and evaluate them on runtime. Create your own directives and services and use them in another project without any extra effort.</source>
          <target state="translated">&lt;strong&gt;Extensibilidad&lt;/strong&gt; : Angular ha extendido las directivas HTML utilizando directivas angulares. Escribe expresiones dentro de html y eval&amp;uacute;alas en tiempo de ejecuci&amp;oacute;n. Cree sus propias directivas y servicios y &amp;uacute;selos en otro proyecto sin ning&amp;uacute;n esfuerzo adicional.</target>
        </trans-unit>
        <trans-unit id="0a5df869fa8dc89f42caf2f14c8a4d5438689936" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;IGOR&lt;/strong&gt;: So think of directive as the instruction to the compiler that tells it whenever you come across this certain element or this CSS in the template, and you keep this kind of code and that code is in charge of the element and everything below that element in the DOM tree.</source>
          <target state="translated">&lt;strong&gt;IGOR&lt;/strong&gt; : Piensa en la directiva como la instrucci&amp;oacute;n para el compilador que le dice cada vez que te encuentras con este cierto elemento o este CSS en la plantilla, y mantienes este tipo de c&amp;oacute;digo y ese c&amp;oacute;digo est&amp;aacute; a cargo del elemento y todo lo que est&amp;aacute; debajo de ese elemento en el &amp;aacute;rbol DOM</target>
        </trans-unit>
        <trans-unit id="fb847df57ef2048ada827543b7b83275102b35c4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Ideal for &lt;a href=&quot;http://en.wikipedia.org/wiki/Representational_state_transfer#RESTful_web_services&quot;&gt;RESTful&lt;/a&gt; architecture:&lt;/strong&gt;
Being a complete frameworks makes AngularJS great to work with a RESTful architecture. To call REST CRUD APIs is very easier and</source>
          <target state="translated">&lt;strong&gt;Ideal para arquitectura &lt;a href=&quot;http://en.wikipedia.org/wiki/Representational_state_transfer#RESTful_web_services&quot;&gt;RESTful&lt;/a&gt; :&lt;/strong&gt; ser un marco completo hace que AngularJS sea ideal para trabajar con una arquitectura RESTful. Llamar a las API REST CRUD es muy f&amp;aacute;cil y</target>
        </trans-unit>
        <trans-unit id="6db3ad18a3fcffc3e35affc669f632a630d17906" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;If you have some data and are now trying to update HTML... STOP! update the model, and make sure your HTML is bound to the model.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Si tiene algunos datos y ahora est&amp;aacute; tratando de actualizar HTML ... &amp;iexcl;DET&amp;Eacute;NGASE!&lt;/strong&gt; &lt;strong&gt;actualice el modelo y aseg&amp;uacute;rese de que su HTML est&amp;eacute; vinculado al modelo.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a19b1a68f851522bd0cf824036f977b0867ca9fa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Imperative vs Declarative&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Imperativo vs declarativo&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f010845158f0f95b6de7c77468721d2aacc26955" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;MISKO&lt;/strong&gt;: [...] one of the things we thought about very hardly in Angular is, how do we provide lots of escape hatches so that you can get out and basically figure out a way out of this. So to us, the answer is this thing called &amp;ldquo;Directives&amp;rdquo;. &lt;strong&gt;And with directives, you essentially become a regular little jQuery JavaScript, you can do whatever you want.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;MISKO&lt;/strong&gt; : [...] una de las cosas en las que pensamos muy poco en Angular es c&amp;oacute;mo proporcionamos muchas trampillas de escape para que pueda salir y, b&amp;aacute;sicamente, encontrar una manera de salir de esto. Entonces, para nosotros, la respuesta es esta cosa llamada &quot;Directivas&quot;. &lt;strong&gt;Y con las directivas, esencialmente te conviertes en un peque&amp;ntilde;o JavaScript jQuery regular, puedes hacer lo que quieras.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fb2c2d380076a74aa03ad025fcf7629b16d2b1de" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Plugins extend jQuery. AngularJS Directives extend the capabilities of your browser.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Los complementos extienden jQuery.&lt;/strong&gt; &lt;strong&gt;Las directivas de AngularJS ampl&amp;iacute;an las capacidades de su navegador.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c47fced225128e4a144ce379fa468a4309c6e8e3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Plugins:&lt;/strong&gt;
There are many other similar features like showing an overlay in your app. You don't need to write code for it, just use an overlay plugin available as wc-overlay, and this will automatically take care of all &lt;a href=&quot;http://en.wikipedia.org/wiki/XMLHttpRequest&quot;&gt;XMLHttpRequest&lt;/a&gt; (XHR) requests.</source>
          <target state="translated">&lt;strong&gt;Complementos:&lt;/strong&gt; hay muchas otras caracter&amp;iacute;sticas similares, como mostrar una superposici&amp;oacute;n en su aplicaci&amp;oacute;n. No necesita escribir c&amp;oacute;digo para ello, solo use un complemento de superposici&amp;oacute;n disponible como wc-overlay, y esto se encargar&amp;aacute; autom&amp;aacute;ticamente de todas las solicitudes &lt;a href=&quot;http://en.wikipedia.org/wiki/XMLHttpRequest&quot;&gt;XMLHttpRequest&lt;/a&gt; (XHR).</target>
        </trans-unit>
        <trans-unit id="887a0d220804750ef67bb7862fb203a7bd2bcb18" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reusable directives are super:&lt;/strong&gt;
Write directives in one place and use it throughout the application. OMG!!! I used these directive for paging, regex, validations, etc. It is really cool!</source>
          <target state="translated">&lt;strong&gt;Las directivas reutilizables son excelentes:&lt;/strong&gt; escriba directivas en un solo lugar y &amp;uacute;selas en toda la aplicaci&amp;oacute;n. &amp;iexcl;&amp;iexcl;&amp;iexcl;DIOS MIO!!! Us&amp;eacute; estas directivas para paginaci&amp;oacute;n, expresiones regulares, validaciones, etc. &amp;iexcl;Es realmente genial!</target>
        </trans-unit>
        <trans-unit id="f69a19e5ccd84c1031161d37ece994aed62fe59d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Routing is strong:&lt;/strong&gt;
It's up to your implementation how you want to use it, but it requires very few lines of code to route the request to specify HTML and controller (JavaScript)</source>
          <target state="translated">&lt;strong&gt;El enrutamiento es s&amp;oacute;lido:&lt;/strong&gt; depende de su implementaci&amp;oacute;n c&amp;oacute;mo desea usarlo, pero requiere muy pocas l&amp;iacute;neas de c&amp;oacute;digo para enrutar la solicitud para especificar HTML y controlador (JavaScript)</target>
        </trans-unit>
        <trans-unit id="797f295648a2a0dbe2273589c1be293d5bfe525f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Services&lt;/strong&gt;: Write common codes using services and less code in controllers. Sevices can be used to share common functionalities among the controllers.</source>
          <target state="translated">&lt;strong&gt;Servicios&lt;/strong&gt; : escriba c&amp;oacute;digos comunes utilizando servicios y menos c&amp;oacute;digo en los controladores. Los servicios se pueden usar para compartir funcionalidades comunes entre los controladores.</target>
        </trans-unit>
        <trans-unit id="138e836a952df3aa65cdcd5ed6d0228190442e07" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Stop trying to drive your application from your JavaScript. Let the template drive the application, and let AngularJS take care of wiring the components together. This also is the Angular way.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Deja de intentar manejar tu aplicaci&amp;oacute;n desde tu JavaScript.&lt;/strong&gt; &lt;strong&gt;Deje que la plantilla controle la aplicaci&amp;oacute;n y deje que AngularJS se encargue de conectar los componentes entre s&amp;iacute;.&lt;/strong&gt; &lt;strong&gt;Esta tambi&amp;eacute;n es la forma angular.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fdb21836db9637198f74d2b8f19405107dec8dbd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This means that Angular is Template Driven&lt;/strong&gt;. Your template drives the JavaScript, not the other way around. This is a radical reversal of roles, and the complete opposite of the unobtrusive JavaScript we have been writing for the last 10 years or so. This can take some getting used to.</source>
          <target state="translated">&lt;strong&gt;Esto significa que Angular est&amp;aacute; controlado por plantillas&lt;/strong&gt; . Su plantilla impulsa el JavaScript, no al rev&amp;eacute;s. Esta es una inversi&amp;oacute;n radical de roles, y todo lo contrario del discreto JavaScript que hemos estado escribiendo durante los &amp;uacute;ltimos 10 a&amp;ntilde;os m&amp;aacute;s o menos. Esto puede llevar un tiempo acostumbrarse.</target>
        </trans-unit>
        <trans-unit id="20ab0f6802a5394aa105383981477201dead0b2d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Two-way data binding is amazing:&lt;/strong&gt; 
I had a grid with all functionality UPDATE, DELTE, INSERT. I have a data object that binds the grid's model using ng-repeat. You only need to write a single line of simple JavaScript code for delete and insert and that's it. grid automatically updates as the grid model changes instantly. Update functionality is real time, no code for it.
You feel amazing!!!</source>
          <target state="translated">&lt;strong&gt;El enlace de datos bidireccional es sorprendente:&lt;/strong&gt; ten&amp;iacute;a una cuadr&amp;iacute;cula con todas las funcionalidades ACTUALIZAR, ELIMINAR, INSERTAR. Tengo un objeto de datos que une el modelo de la cuadr&amp;iacute;cula usando ng-repeat. Solo necesita escribir una sola l&amp;iacute;nea de c&amp;oacute;digo JavaScript simple para eliminar e insertar y eso es todo. La cuadr&amp;iacute;cula se actualiza autom&amp;aacute;ticamente a medida que el modelo de cuadr&amp;iacute;cula cambia instant&amp;aacute;neamente. La funcionalidad de actualizaci&amp;oacute;n es en tiempo real, no hay c&amp;oacute;digo para ello. &amp;iexcl;&amp;iexcl;&amp;iexcl;Te sientes incre&amp;iacute;ble!!!</target>
        </trans-unit>
        <trans-unit id="36ae55072d91b6ded3403dc2b4cad372aaa77444" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Your HTML source is no longer semantic, instead, your API and compiled DOM are semantic.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Su fuente HTML ya no es sem&amp;aacute;ntica, en cambio, su API y DOM compilado son sem&amp;aacute;nticos.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3e0ed9f7320d225087a2cabdd3049cfd766fead2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;jQuery&lt;/strong&gt; is a library</source>
          <target state="translated">&lt;strong&gt;jQuery&lt;/strong&gt; es una biblioteca</target>
        </trans-unit>
        <trans-unit id="6c335564959dc2af53604b8909e474e66420b796" translate="yes" xml:space="preserve">
          <source>A nice thing about AngularJs is that it allows you to separate/isolate the DOM manipulation in the directives.  There are built-in directives ready for you to use such as ng-click. You can create your own custom directives that will contain all your view logic or DOM manipulation so you don't end up mingle DOM manipulation code in the controllers or services that should take care of the business logic.</source>
          <target state="translated">Lo bueno de AngularJs es que te permite separar la manipulaci√≥n de DOM en las directivas.Hay directivas incorporadas listas para que las uses,como ng-click.Puedes crear tus propias directivas personalizadas que contendr√°n toda tu l√≥gica de vista o manipulaci√≥n DOM para que no termines mezclando el c√≥digo de manipulaci√≥n DOM en los controladores o servicios que deben cuidar la l√≥gica del negocio.</target>
        </trans-unit>
        <trans-unit id="7ceb5d7ed6945141f56ba005625ff024d9d7eb17" translate="yes" xml:space="preserve">
          <source>A transcript of the entire episode is available at the link provided above.</source>
          <target state="translated">La transcripci√≥n de todo el episodio puede consultarse en el enlace que figura m√°s arriba.</target>
        </trans-unit>
        <trans-unit id="b8f9a78d78001336ae3c83f2d488f8880d463909" translate="yes" xml:space="preserve">
          <source>Actually, if you're using AngularJS, you don't need jQuery anymore. AngularJS itself has the binding and directive, which is a very good &quot;replacement&quot; for most things you can do with jQuery.</source>
          <target state="translated">En realidad,si est√°s usando AngularJS,no necesitas m√°s jQuery.AngularJS en s√≠ mismo tiene la vinculaci√≥n y la directiva,que es un muy buen &quot;reemplazo&quot; para la mayor√≠a de las cosas que puedes hacer con jQuery.</target>
        </trans-unit>
        <trans-unit id="a982e94ed93b338e6087c54069f224404ee9152d" translate="yes" xml:space="preserve">
          <source>Again, AngularJS does not play by their rules. In a stroke, &lt;strong&gt;AngularJS does away with a decade of received wisdom&lt;/strong&gt; and instead implements an MVC pattern in which the template is no longer semantic, not even a little bit.</source>
          <target state="translated">Nuevamente, AngularJS no juega con sus reglas. En un momento, &lt;strong&gt;AngularJS elimina una d&amp;eacute;cada de sabidur&amp;iacute;a recibida&lt;/strong&gt; y en su lugar implementa un patr&amp;oacute;n MVC en el que la plantilla ya no es sem&amp;aacute;ntica, ni siquiera un poco.</target>
        </trans-unit>
        <trans-unit id="dd4ee4af98c6fe65fb4b3c2b533d9c832398158d" translate="yes" xml:space="preserve">
          <source>Again, the template stuff is in the template, so you (or your users) can easily swap it out for one that meets any style necessary, and the &lt;strong&gt;logic&lt;/strong&gt; never had to be touched. Reusability - boom!</source>
          <target state="translated">Una vez m&amp;aacute;s, el contenido de la plantilla est&amp;aacute; en la plantilla, por lo que usted (o sus usuarios) pueden cambiarlo f&amp;aacute;cilmente por uno que cumpla con cualquier estilo necesario, y la &lt;strong&gt;l&amp;oacute;gica&lt;/strong&gt; nunca tuvo que ser tocada. Reutilizaci&amp;oacute;n - &amp;iexcl;boom!</target>
        </trans-unit>
        <trans-unit id="1480b134e7c98fe4782ceaa71c1becda85bf1d42" translate="yes" xml:space="preserve">
          <source>Ajax all of the time</source>
          <target state="translated">Ajax todo el tiempo</target>
        </trans-unit>
        <trans-unit id="7088908d0701fd67fecee7fd934804b9635f1eac" translate="yes" xml:space="preserve">
          <source>And I decided to make a tiny code snippet that help me quickly start a website using AngularJS with the power of jQuery Selector (using Sizzle).</source>
          <target state="translated">Y decid√≠ hacer un peque√±o fragmento de c√≥digo que me ayudara a iniciar r√°pidamente un sitio web usando AngularJS con el poder de jQuery Selector (usando Sizzle).</target>
        </trans-unit>
        <trans-unit id="b3c9932d142f6e1ee02747f1578184f1f2f6fc13" translate="yes" xml:space="preserve">
          <source>And all of the above tie into this over-arching theme: keep your concerns separate. Your view acts as the official record of what is supposed to happen (for the most part); your model represents your data; you have a service layer to perform reusable tasks; you do DOM manipulation and augment your view with directives; and you glue it all together with controllers. This was also mentioned in other answers, and the only thing I would add pertains to testability, which I discuss in another section below.</source>
          <target state="translated">Y todo lo anterior se relaciona con este tema general:mantener sus preocupaciones separadas.Tu vista act√∫a como el registro oficial de lo que se supone que debe ocurrir (en su mayor parte);tu modelo representa tus datos;tienes una capa de servicio para realizar tareas reutilizables;haces manipulaci√≥n DOM y aumentas tu vista con directivas;y lo pegas todo junto con los controladores.Esto tambi√©n se mencion√≥ en otras respuestas,y lo √∫nico que yo a√±adir√≠a se refiere a la comprobabilidad,que discutir√© en otra secci√≥n m√°s adelante.</target>
        </trans-unit>
        <trans-unit id="717ce7322f7d359fabb874116d82f9a23af3a1cf" translate="yes" xml:space="preserve">
          <source>And fifth, which we've mentioned in previous sections, why are we mixing template stuff into our logic?</source>
          <target state="translated">Y quinto,que hemos mencionado en secciones anteriores,¬øpor qu√© estamos mezclando cosas de plantilla en nuestra l√≥gica?</target>
        </trans-unit>
        <trans-unit id="31b7375227eaf487f50dd9c4d2a4be13432b0992" translate="yes" xml:space="preserve">
          <source>And now instead of using an unordered list, we're using Bootstrap alert boxes. And we never had to change the controller code! But more importantly, no matter &lt;em&gt;where&lt;/em&gt; or &lt;em&gt;how&lt;/em&gt; the log gets updated, the view will change too. Automatically. Neat!</source>
          <target state="translated">Y ahora, en lugar de usar una lista desordenada, estamos usando cuadros de alerta de Bootstrap. &amp;iexcl;Y nunca tuvimos que cambiar el c&amp;oacute;digo del controlador! Pero lo m&amp;aacute;s importante, no importa &lt;em&gt;d&amp;oacute;nde&lt;/em&gt; o &lt;em&gt;c&amp;oacute;mo&lt;/em&gt; se actualice el registro, la vista tambi&amp;eacute;n cambiar&amp;aacute;. Autom&amp;aacute;ticamente. &amp;iexcl;Ordenado!</target>
        </trans-unit>
        <trans-unit id="ded1b56b02466779ad820433f366b36a1ad7629b" translate="yes" xml:space="preserve">
          <source>And our view can look like this:</source>
          <target state="translated">Y nuestra vista puede verse as√≠:</target>
        </trans-unit>
        <trans-unit id="e0dec1075f573c8803a10203b7685e0ba502d0e0" translate="yes" xml:space="preserve">
          <source>And there are still all those other benefits, like testing - it's easy! No matter what's in the template, the directive's internal API is never touched, so refactoring is easy. You can change the template as much as you want without touching the directive. And no matter what you change, your tests still pass.</source>
          <target state="translated">Y todav√≠a hay todos esos otros beneficios,como las pruebas...¬°es f√°cil! No importa lo que haya en la plantilla,la API interna de la directiva nunca se toca,as√≠ que la refactorizaci√≥n es f√°cil.Puede cambiar la plantilla tanto como quiera sin tocar la directiva.Y no importa lo que cambie,sus pruebas siguen pasando.</target>
        </trans-unit>
        <trans-unit id="5bee056b415ffd9808306a38b2d56440081c0e20" translate="yes" xml:space="preserve">
          <source>And when we run our test, we can confirm that it fails. Only now should we create our directive:</source>
          <target state="translated">Y cuando hagamos la prueba,podremos confirmar que falla.S√≥lo ahora debemos crear nuestra directiva:</target>
        </trans-unit>
        <trans-unit id="180abb5e88521e466bf2e4475cd2b687c06483d9" translate="yes" xml:space="preserve">
          <source>And with DOM manipulation in AngularJS, you find yourself adding directives and filters, which you can think of as valid HTML extensions.</source>
          <target state="translated">Y con la manipulaci√≥n DOM en AngularJS,te encuentras a√±adiendo directivas y filtros,que puedes considerar como extensiones HTML v√°lidas.</target>
        </trans-unit>
        <trans-unit id="24580187a4254fa76812f2d649f1e29d6069e0b9" translate="yes" xml:space="preserve">
          <source>Angular and jQuery do different things. AngularJS gives you a set of tools to produce web applications. jQuery mainly gives you tools for modifying the DOM. If jQuery is present on your page, AngularJS will use it automatically. If it isn't, AngularJS ships with jQuery Lite, which is a cut down, but still perfectly usable version of jQuery.</source>
          <target state="translated">Angular y jQuery hacen cosas diferentes.AngularJS te da un conjunto de herramientas para producir aplicaciones web.jQuery principalmente te da herramientas para modificar el DOM.Si jQuery est√° presente en tu p√°gina,AngularJS lo usar√° autom√°ticamente.Si no lo est√°,AngularJS se env√≠a con jQuery Lite,que es una versi√≥n reducida pero perfectamente utilizable de jQuery.</target>
        </trans-unit>
        <trans-unit id="743831e45593d1d3b1984a6b44f8c8b5aff24099" translate="yes" xml:space="preserve">
          <source>Angular breaks down your app into 
- Controllers
- Services
- Views
- etc.</source>
          <target state="translated">Angular desglosa tu aplicaci√≥n en-Controladores-Servicios-Vistas-etc.</target>
        </trans-unit>
        <trans-unit id="2a3de4a9dc7c9f3bd23b0b53226033777b1c013b" translate="yes" xml:space="preserve">
          <source>AngularJS</source>
          <target state="translated">AngularJS</target>
        </trans-unit>
        <trans-unit id="f39ebda33fdd6cea30fb3e03a8a2d79fcda3487a" translate="yes" xml:space="preserve">
          <source>AngularJS allows you to make your own HTML tags/attributes that do things which work well with dynamic web applications (since HTML was designed for static pages).</source>
          <target state="translated">AngularJS le permite hacer sus propios tagsattributes HTML que hacen cosas que funcionan bien con aplicaciones web din√°micas (ya que el HTML fue dise√±ado para p√°ginas est√°ticas).</target>
        </trans-unit>
        <trans-unit id="83ef7970ea8e67c4542f275b5fdabad15e691725" translate="yes" xml:space="preserve">
          <source>AngularJS and jQuery adopt very different ideologies. If you're coming from jQuery you may find some of the differences surprising. Angular may make you angry.</source>
          <target state="translated">AngularJS y jQuery adoptan ideolog√≠as muy diferentes.Si vienes de jQuery puedes encontrar algunas de las diferencias sorprendentes.La angular puede hacerte enojar.</target>
        </trans-unit>
        <trans-unit id="fc13641dffc4ac29f5a7e6fba2f371197f917be0" translate="yes" xml:space="preserve">
          <source>AngularJS and jQuery are not enemies. It's possible to use jQuery within AngularJS very nicely. If you're using AngularJS well (templates, data-binding, $scope, directives, etc.) you will find you need a &lt;strong&gt;lot&lt;/strong&gt; less jQuery than you might otherwise require.</source>
          <target state="translated">AngularJS y jQuery no son enemigos. Es posible usar jQuery dentro de AngularJS muy bien. Si est&amp;aacute; utilizando bien AngularJS (plantillas, enlace de datos, $ scope, directivas, etc.), encontrar&amp;aacute; que necesita &lt;strong&gt;mucho&lt;/strong&gt; menos jQuery de lo que podr&amp;iacute;a necesitar.</target>
        </trans-unit>
        <trans-unit id="222ef2db3e23de37ca20387e96e35891b58e48cd" translate="yes" xml:space="preserve">
          <source>AngularJS changes the way you &lt;em&gt;find&lt;/em&gt; elements</source>
          <target state="translated">AngularJS cambia la forma de &lt;em&gt;encontrar&lt;/em&gt; elementos</target>
        </trans-unit>
        <trans-unit id="e1c2157022eaa4f2a0716583841f5203e08b070a" translate="yes" xml:space="preserve">
          <source>AngularJS comes with an entire set of tools to make this very easy; with &lt;code&gt;ngClass&lt;/code&gt; we can dynamically update the class; &lt;code&gt;ngModel&lt;/code&gt; allows two-way data binding; &lt;code&gt;ngShow&lt;/code&gt; and &lt;code&gt;ngHide&lt;/code&gt; programmatically show or hide an element; and many more - including the ones we write ourselves. In other words, we can do all kinds of awesomeness &lt;em&gt;without&lt;/em&gt; DOM manipulation. The less DOM manipulation, the easier directives are to test, the easier they are to style, the easier they are to change in the future, and the more re-usable and distributable they are.</source>
          <target state="translated">AngularJS viene con un conjunto completo de herramientas para hacer esto muy f&amp;aacute;cil; Con &lt;code&gt;ngClass&lt;/code&gt; podemos actualizar din&amp;aacute;micamente la clase; &lt;code&gt;ngModel&lt;/code&gt; permite el enlace de datos bidireccional; &lt;code&gt;ngShow&lt;/code&gt; y &lt;code&gt;ngHide&lt;/code&gt; muestran u ocultan mediante programaci&amp;oacute;n un elemento; y muchos m&amp;aacute;s, incluidos los que escribimos nosotros mismos. En otras palabras, podemos hacer todo tipo de genialidad &lt;em&gt;sin la&lt;/em&gt; manipulaci&amp;oacute;n DOM. Cuanta menos manipulaci&amp;oacute;n DOM, m&amp;aacute;s f&amp;aacute;ciles de probar las directivas, m&amp;aacute;s f&amp;aacute;ciles de dise&amp;ntilde;ar, m&amp;aacute;s f&amp;aacute;ciles de cambiar en el futuro y m&amp;aacute;s reutilizables y distribuibles.</target>
        </trans-unit>
        <trans-unit id="8a1f9a965073fef341c41540c540b536642219de" translate="yes" xml:space="preserve">
          <source>AngularJS doesn't need (or want) you to find elements using selectors - the primary difference between AngularJS's &lt;strong&gt;jqLite&lt;/strong&gt; versus full-blown &lt;strong&gt;jQuery&lt;/strong&gt; is that &lt;a href=&quot;https://docs.angularjs.org/api/ng/function/angular.element&quot;&gt;jqLite does not support selectors&lt;/a&gt;.</source>
          <target state="translated">AngularJS no necesita (o no quiere) que encuentre elementos usando selectores: la diferencia principal entre &lt;strong&gt;jqLite&lt;/strong&gt; de AngularJS y &lt;strong&gt;jQuery&lt;/strong&gt; completo es que &lt;a href=&quot;https://docs.angularjs.org/api/ng/function/angular.element&quot;&gt;jqLite no admite selectores&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d472a45e93868af2bd80d2ee2bab7981ad1a855e" translate="yes" xml:space="preserve">
          <source>AngularJS extends HTML, so you don't have to put &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; all over the place just to make an application. It makes HTML actually work for applications rather than what it was designed for, which is static, educational web pages. It accomplishes this in a roundabout way using JavaScript, but fundamentally it is an extension of HTML, not JavaScript.</source>
          <target state="translated">AngularJS extiende HTML, por lo que no tiene que poner &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; por todas partes solo para hacer una aplicaci&amp;oacute;n. Hace que HTML realmente funcione para aplicaciones en lugar de para lo que fue dise&amp;ntilde;ado, que es p&amp;aacute;ginas web est&amp;aacute;ticas y educativas. Lo logra de una manera indirecta usando JavaScript, pero fundamentalmente es una extensi&amp;oacute;n de HTML, no JavaScript.</target>
        </trans-unit>
        <trans-unit id="a790802605b2871a0ef2e9ba795618736b158088" translate="yes" xml:space="preserve">
          <source>AngularJS gives us service objects.</source>
          <target state="translated">AngularJS nos da objetos de servicio.</target>
        </trans-unit>
        <trans-unit id="580b72b69de2dbaa91260842ab501683adc90363" translate="yes" xml:space="preserve">
          <source>AngularJS gives you modules into which you can place your code. If you're writing a script that talks to Flickr for example, you might want to create a Flickr module to wrap all your Flickr related functions in. Modules can include other modules (DI). Your main application is usually a module, and this should include all the other modules your application will depend on.</source>
          <target state="translated">AngularJS te da m√≥dulos en los que puedes colocar tu c√≥digo.Si est√°s escribiendo un gui√≥n que habla con Flickr por ejemplo,tal vez quieras crear un m√≥dulo de Flickr para envolver todas tus funciones relacionadas con Flickr.Los m√≥dulos pueden incluir otros m√≥dulos (DI).Su aplicaci√≥n principal suele ser un m√≥dulo,y √©ste debe incluir todos los dem√°s m√≥dulos de los que depender√° su aplicaci√≥n.</target>
        </trans-unit>
        <trans-unit id="f5dbd7fd768f26aa68cfb19bda9fe60441f2e19f" translate="yes" xml:space="preserve">
          <source>AngularJS has $scope objects. These are special objects created and maintained by AngularJS in which you store your model. Certain directives will spawn a new $scope, which by default inherits from its wrapping $scope using JavaScript prototypical inheritance. The $scope object is accessible in the controller and the view.</source>
          <target state="translated">AngularJS tiene objetos de $scope.Estos son objetos especiales creados y mantenidos por AngularJS en los que almacena su modelo.Ciertas directivas dar√°n lugar a un nuevo $scope,que por defecto hereda de su envoltorio $scope usando la herencia protot√≠pica de JavaScript.El objeto $scope es accesible en el controlador y en la vista.</target>
        </trans-unit>
        <trans-unit id="3347e5a5c11ca76b8bae02225f867635154e1d18" translate="yes" xml:space="preserve">
          <source>AngularJS has the concept of &quot;Directives&quot; for DOM manipulation and designing reusable UI components, so you should use it whenever you feel the need of doing DOM manipulation related stuff (directives are only place where you should write jQuery code while using AngularJS).</source>
          <target state="translated">AngularJS tiene el concepto de &quot;Directivas&quot; para la manipulaci√≥n de DOM y el dise√±o de componentes de interfaz de usuario reutilizables,por lo que debes usarlo siempre que sientas la necesidad de hacer cosas relacionadas con la manipulaci√≥n de DOM (las directivas son s√≥lo el lugar donde debes escribir el c√≥digo jQuery mientras usas AngularJS).</target>
        </trans-unit>
        <trans-unit id="abb7d137ad0c0d41f229faf7978453fac70efa79" translate="yes" xml:space="preserve">
          <source>AngularJS instead gives you a &lt;strong&gt;compiler&lt;/strong&gt;.</source>
          <target state="translated">AngularJS en cambio te da un &lt;strong&gt;compilador&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="f454c455626fe5cac16b1e78b3064e9efba3a1f4" translate="yes" xml:space="preserve">
          <source>AngularJS involves some learning curve (more than jQuery :-).</source>
          <target state="translated">AngularJS implica una cierta curva de aprendizaje (m√°s que jQuery :-).</target>
        </trans-unit>
        <trans-unit id="0f33f894c7aeb275ff7e26043faaaba6c9273c31" translate="yes" xml:space="preserve">
          <source>AngularJS is an MV* framework.</source>
          <target state="translated">AngularJS es un marco MV*.</target>
        </trans-unit>
        <trans-unit id="496acda8671b0ee67088cb637f1c89eb97cd852d" translate="yes" xml:space="preserve">
          <source>AngularJS is an entire client-side framework that uses the &lt;a href=&quot;http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller&quot;&gt;MVC&lt;/a&gt; pattern (check out their &lt;a href=&quot;http://docs.angularjs.org/guide/concepts&quot;&gt;graphical representation&lt;/a&gt;). It greatly focuses on separation of concerns.</source>
          <target state="translated">AngularJS es un marco completo del lado del cliente que utiliza el patr&amp;oacute;n &lt;a href=&quot;http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller&quot;&gt;MVC&lt;/a&gt; (consulte su &lt;a href=&quot;http://docs.angularjs.org/guide/concepts&quot;&gt;representaci&amp;oacute;n gr&amp;aacute;fica&lt;/a&gt; ). Se centra en gran medida en la separaci&amp;oacute;n de las preocupaciones.</target>
        </trans-unit>
        <trans-unit id="ccc498700b07180690b810f63f70291230b83439" translate="yes" xml:space="preserve">
          <source>AngularJS itself includes a jQuery-lite edition within it. So for some basic DOM selection/manipulation, you really don't have to include the jQuery library (it saves many bytes to run on the network.)</source>
          <target state="translated">La propia AngularJS incluye una edici√≥n jQuery-lite dentro de ella.As√≠ que para una manipulaci√≥n b√°sica de la selecci√≥n DOM,realmente no tienes que incluir la biblioteca jQuery (guarda muchos bytes para ejecutarse en la red).</target>
        </trans-unit>
        <trans-unit id="f8eb1469e26f56c8a74bfdb88d4142545826f06f" translate="yes" xml:space="preserve">
          <source>AngularJS manages your dependencies for you. If you want an object, simply refer to it and AngularJS will get it for you.</source>
          <target state="translated">AngularJS maneja sus dependencias por usted.Si quieres un objeto,simplemente refi√©rete a √©l y AngularJS te lo conseguir√°.</target>
        </trans-unit>
        <trans-unit id="38dffc5e5dca986ffefa44052bb0ef43d021e403" translate="yes" xml:space="preserve">
          <source>AngularJS uses &lt;strong&gt;controllers&lt;/strong&gt; and directives (each of which can have their own controller, and/or compile and linking functions) to remove behavior from the view/structure (HTML).  Angular also has &lt;strong&gt;services&lt;/strong&gt; and &lt;strong&gt;filters&lt;/strong&gt; to help separate/organize your application.</source>
          <target state="translated">AngularJS utiliza &lt;strong&gt;controladores&lt;/strong&gt; y directivas (cada una de las cuales puede tener su propio controlador y / o compilar y vincular funciones) para eliminar el comportamiento de la vista / estructura (HTML). Angular tambi&amp;eacute;n tiene &lt;strong&gt;servicios&lt;/strong&gt; y &lt;strong&gt;filtros&lt;/strong&gt; para ayudar a separar / organizar su aplicaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="427ca6be55cbd36d29b597716cd026cabed3d117" translate="yes" xml:space="preserve">
          <source>AngularJS vs. jQuery</source>
          <target state="translated">AngularJS vs.jQuery</target>
        </trans-unit>
        <trans-unit id="209303f007b14469938fa3242370f0eed9fe6b7f" translate="yes" xml:space="preserve">
          <source>AngularJS will recognise that a FlickrService object is needed to instantiate the controller, and will provide one for us.</source>
          <target state="translated">AngularJS reconocer√° que se necesita un objeto FlickrService para instanciar el controlador,y nos proporcionar√° uno.</target>
        </trans-unit>
        <trans-unit id="89fd96e13c335779cf18929ce0e49db544e7b95a" translate="yes" xml:space="preserve">
          <source>AngularJS: THE model is the truth, and you always think from that ANGLE.</source>
          <target state="translated">AngularJS:EL modelo es la verdad,y siempre piensas desde ese √ÅNGULO.</target>
        </trans-unit>
        <trans-unit id="3bef657357e40dc720fc2a1d5a9a5e5e4d968b2d" translate="yes" xml:space="preserve">
          <source>AngularJs Cool Principle - If you want some changes on your UI think from model data change perspective. Change your data and UI will re-render itself. You need not to play around DOM each time unless and until it is hardly required and that should also be handled through Angular Directives.</source>
          <target state="translated">AngularJs Cool Principle-Si quieres algunos cambios en tu UI piensa desde la perspectiva del cambio de datos del modelo.Cambia tus datos y la interfaz de usuario se reproducir√°.No necesitas jugar con el DOM cada vez a menos y hasta que apenas se requiera y eso tambi√©n debe ser manejado a trav√©s de Directivas Angulares.</target>
        </trans-unit>
        <trans-unit id="4c7fa873dad04f6b1ea51f0bb4c021ea8dae7e48" translate="yes" xml:space="preserve">
          <source>AngularJs and JQuery are completely different at every level except the JQLite functionality and you will see it once you start learning the AngularJs core features (I explained it below).</source>
          <target state="translated">AngularJs y JQuery son completamente diferentes en todos los niveles excepto en la funcionalidad de JQLite y lo ver√°s una vez que empieces a aprender las caracter√≠sticas principales de AngularJs (lo expliqu√© m√°s abajo).</target>
        </trans-unit>
        <trans-unit id="3edbcd2b0fe8f2eeb3060452cd16d0c33d77cc16" translate="yes" xml:space="preserve">
          <source>AngularJs is a client side framework that offers to build the independent client side application. JQuery is a client side library that play around the DOM.</source>
          <target state="translated">AngularJs es un marco del lado del cliente que ofrece construir la aplicaci√≥n independiente del lado del cliente.JQuery es una biblioteca del lado del cliente que juega alrededor del DOM.</target>
        </trans-unit>
        <trans-unit id="5239585f0407322b9de9420fc353533aa0b142a9" translate="yes" xml:space="preserve">
          <source>Apart from mixing concerns, we also have the same problems of signifying intent that I mentioned before. But more importantly, we had to manually reference and update a DOM node. And if we want to delete a log entry, we have to code against the DOM for that too. How do we test the logic apart from the DOM? And what if we want to change the presentation?</source>
          <target state="translated">Adem√°s de mezclar las preocupaciones,tambi√©n tenemos los mismos problemas de intenci√≥n de significar que mencion√© antes.Pero lo m√°s importante es que tuvimos que referenciar y actualizar manualmente un nodo DOM.Y si queremos borrar una entrada de registro,tenemos que codificar contra el DOM para eso tambi√©n.¬øC√≥mo probamos la l√≥gica aparte del DOM? ¬øY si queremos cambiar la presentaci√≥n?</target>
        </trans-unit>
        <trans-unit id="4887e453b680689b4f5edbe3a009b399e0a9cd5f" translate="yes" xml:space="preserve">
          <source>Application design</source>
          <target state="translated">Dise√±o de la aplicaci√≥n</target>
        </trans-unit>
        <trans-unit id="390be301a8114b068b77d68bc38caf2bb1d0d455" translate="yes" xml:space="preserve">
          <source>Are there any server-side considerations/restrictions?</source>
          <target state="translated">¬øHay alguna restricci√≥n de consideraciones del lado del servidor?</target>
        </trans-unit>
        <trans-unit id="664c60d57cb407ffa5cf65a1d3cbd40930f03f80" translate="yes" xml:space="preserve">
          <source>As a JavaScript MV* beginner and purely focusing on the application architecture (not the server/client-side matters), I would certainly recommend the following resource (which I am surprised wasn't mentioned yet): &lt;a href=&quot;http://addyosmani.com/resources/essentialjsdesignpatterns/book/&quot;&gt;JavaScript Design Patterns&lt;/a&gt;, by Addy Osmani, as an introduction to different &lt;strong&gt;JavaScript Design Patterns&lt;/strong&gt;. The terms used in this answer are taken from the linked document above. I'm not going to repeat what was worded really well in the accepted answer. Instead, this answer links back to the &lt;strong&gt;theoretical backgrounds&lt;/strong&gt; which power AngularJS (and other libraries).</source>
          <target state="translated">Como principiante de JavaScript MV * y centrado exclusivamente en la arquitectura de la aplicaci&amp;oacute;n (no en el servidor / cliente), sin duda recomendar&amp;iacute;a el siguiente recurso (que me sorprende que a&amp;uacute;n no se haya mencionado): &lt;a href=&quot;http://addyosmani.com/resources/essentialjsdesignpatterns/book/&quot;&gt;Patrones de dise&amp;ntilde;o de JavaScript&lt;/a&gt; , por Addy Osmani , como introducci&amp;oacute;n a diferentes &lt;strong&gt;patrones de dise&amp;ntilde;o de JavaScript&lt;/strong&gt; . Los t&amp;eacute;rminos utilizados en esta respuesta se toman del documento vinculado anterior. No voy a repetir lo que fue redactado realmente bien en la respuesta aceptada. En cambio, esta respuesta se vincula con los &lt;strong&gt;antecedentes te&amp;oacute;ricos&lt;/strong&gt; que impulsan AngularJS (y otras bibliotecas).</target>
        </trans-unit>
        <trans-unit id="23a7327c34c86abe93b30fb5462eaf583c740d8f" translate="yes" xml:space="preserve">
          <source>At this point you likely have all sorts of questions concerning &lt;a href=&quot;http://en.wikipedia.org/wiki/Search_engine_optimization&quot;&gt;SEO&lt;/a&gt; and accessibility, and rightly so. There are open issues here. Most screen readers will now parse JavaScript. Search engines can also index &lt;a href=&quot;http://en.wikipedia.org/wiki/Ajax_%28programming%29&quot;&gt;AJAXed&lt;/a&gt; content. Nevertheless, you will want to make sure you are using pushstate URLs and you have a decent sitemap. See here for a discussion of the issue: &lt;a href=&quot;https://stackoverflow.com/a/23245379/687677&quot;&gt;https://stackoverflow.com/a/23245379/687677&lt;/a&gt;</source>
          <target state="translated">En este punto, es probable que tenga todo tipo de preguntas sobre &lt;a href=&quot;http://en.wikipedia.org/wiki/Search_engine_optimization&quot;&gt;SEO&lt;/a&gt; y accesibilidad, y con raz&amp;oacute;n. Hay problemas abiertos aqu&amp;iacute;. La mayor&amp;iacute;a de los lectores de pantalla ahora analizar&amp;aacute;n JavaScript. Los motores de b&amp;uacute;squeda tambi&amp;eacute;n pueden indexar contenido &lt;a href=&quot;http://en.wikipedia.org/wiki/Ajax_%28programming%29&quot;&gt;AJAXed&lt;/a&gt; . Sin embargo, querr&amp;aacute; asegurarse de que est&amp;aacute; utilizando URL de estado de inserci&amp;oacute;n y que tiene un mapa del sitio decente. Vea aqu&amp;iacute; para una discusi&amp;oacute;n del problema: &lt;a href=&quot;https://stackoverflow.com/a/23245379/687677&quot;&gt;https://stackoverflow.com/a/23245379/687677&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e64cce4dacf87903542cb264297ae0a879e80ca7" translate="yes" xml:space="preserve">
          <source>Attach a controller to each view (using ng-view and routing, or ng-controller). Have the controller find/get only whatever model data the view needs to do its job. Make controllers as thin as possible.</source>
          <target state="translated">Adjuntar un controlador a cada vista (usando ng-view y routing,o ng-controller).Haz que el controlador encuentre s√≥lo los datos del modelo que la vista necesita para hacer su trabajo.Haga los controladores tan delgados como sea posible.</target>
        </trans-unit>
        <trans-unit id="4988689ec96d69654ac1b4d26595c58327121e0c" translate="yes" xml:space="preserve">
          <source>Because AngularJS treats your HTML page as a template. The template is not supposed to be semantic as your content is typically stored in your model which ultimately comes from your API. AngularJS compiles your DOM with the model to produce a semantic web page.</source>
          <target state="translated">Porque AngularJS trata su p√°gina HTML como una plantilla.La plantilla no se supone que sea sem√°ntica ya que su contenido es t√≠picamente almacenado en su modelo que en √∫ltima instancia proviene de su API.AngularJS compila tu DOM con el modelo para producir una p√°gina web sem√°ntica.</target>
        </trans-unit>
        <trans-unit id="52ff735af719db7308ce1da781ad856d29790080" translate="yes" xml:space="preserve">
          <source>Because data binding is done from the template, using either an attribute or the curly brace syntax, it's super easy to do. There's little cognitive overhead associated with it so you'll find yourself doing it all the time.</source>
          <target state="translated">Debido a que la vinculaci√≥n de datos se hace desde la plantilla,usando un atributo o la sintaxis del rizo,es super f√°cil de hacer.Hay poca sobrecarga cognitiva asociada a ello,as√≠ que te encontrar√°s haci√©ndolo todo el tiempo.</target>
        </trans-unit>
        <trans-unit id="da1f91ccd2cdc9e39f69ad5bd7c07fde87791168" translate="yes" xml:space="preserve">
          <source>Being a framework, it hosts your code and takes ownership of decisions about what to call and when!</source>
          <target state="translated">Siendo un marco de trabajo,aloja su c√≥digo y se hace cargo de las decisiones sobre qu√© llamar y cu√°ndo!</target>
        </trans-unit>
        <trans-unit id="1ede8f40530371ca2072fafa529a4af2b37e9ba1" translate="yes" xml:space="preserve">
          <source>Binds the input element to &lt;code&gt;$scope.user.name&lt;/code&gt;. Updating the input will update the value in your current scope, and vice-versa.</source>
          <target state="translated">Vincula el elemento de entrada a &lt;code&gt;$scope.user.name&lt;/code&gt; . La actualizaci&amp;oacute;n de la entrada actualizar&amp;aacute; el valor en su alcance actual, y viceversa.</target>
        </trans-unit>
        <trans-unit id="723820bab62fc4cc602aaa7c4690e3b306e0a88e" translate="yes" xml:space="preserve">
          <source>But because we have separation of concerns, we can do test-driven development iteratively in AngularJS! For example, let's say we want a super-simple directive to indicate in our menu what our current route is. We can declare what we want in the view of our application:</source>
          <target state="translated">Pero debido a que tenemos la separaci√≥n de las preocupaciones,podemos hacer el desarrollo de prueba de forma iterativa en AngularJS! Por ejemplo,digamos que queremos una directiva s√∫per simple para indicar en nuestro men√∫ cu√°l es nuestra ruta actual.Podemos declarar lo que queremos en la vista de nuestra aplicaci√≥n:</target>
        </trans-unit>
        <trans-unit id="ce753a2c6da077456572ab747e44d38ca49b9bd8" translate="yes" xml:space="preserve">
          <source>But for that matter, our view could look like this:</source>
          <target state="translated">Pero para el caso,nuestra vista podr√≠a verse as√≠:</target>
        </trans-unit>
        <trans-unit id="05e4f17ec22790979e0e74231b4a9712ba108795" translate="yes" xml:space="preserve">
          <source>But in AngularJS, you must start from the ground up with your architecture in mind. Instead of starting by thinking &quot;I have this piece of the DOM and I want to make it do X&quot;, you have to start with what you want to accomplish, then go about designing your application, and then finally go about designing your view.</source>
          <target state="translated">Pero en AngularJS,debes empezar desde cero con tu arquitectura en mente.En lugar de empezar pensando &quot;Tengo esta pieza del DOM y quiero que haga X&quot;,tienes que empezar con lo que quieres lograr,luego ir a dise√±ar tu aplicaci√≥n,y finalmente ir a dise√±ar tu vista.</target>
        </trans-unit>
        <trans-unit id="706cdc463699e1ed474fcbc74dc48ab1f144a5d9" translate="yes" xml:space="preserve">
          <source>But let's dive a little deeper...</source>
          <target state="translated">Pero vamos a bucear un poco m√°s profundo...</target>
        </trans-unit>
        <trans-unit id="d00b45211d6f5e02dbf9930e954ca044f2728901" translate="yes" xml:space="preserve">
          <source>By googling, I see that there is a standalone jQuery selector module out there. It's Sizzle.</source>
          <target state="translated">Al buscar en Google,veo que hay un m√≥dulo selector de jQuery independiente por ah√≠.Es Sizzle.</target>
        </trans-unit>
        <trans-unit id="75ed687c979f0bd97e2a3c3bf1ba2c8068f3c723" translate="yes" xml:space="preserve">
          <source>CSS - Styling, without the CSS the page is still readable.</source>
          <target state="translated">CSS-Estilo,sin el CSS la p√°gina sigue siendo legible.</target>
        </trans-unit>
        <trans-unit id="5fbb684c9310c39e4a515fe80a2bcaad03a97701" translate="yes" xml:space="preserve">
          <source>Can you describe the paradigm shift that is necessary?</source>
          <target state="translated">¬øPuede describir el cambio de paradigma que es necesario?</target>
        </trans-unit>
        <trans-unit id="fc22be49056528fdaa6e3e976f7e5c0875c0ea23" translate="yes" xml:space="preserve">
          <source>Closure vs. $scope</source>
          <target state="translated">Cierre vs.alcance de los d√≥lares</target>
        </trans-unit>
        <trans-unit id="35313dc9f2a46f49b61938e95da8ca20b23eaa38" translate="yes" xml:space="preserve">
          <source>Controller - Your controller is a JavaScript function which hooks the view to the model. Its function is to initialise $scope. Depending on your application, you may or may not need to create a controller. You can have many controllers on a page.</source>
          <target state="translated">Controlador-Su controlador es una funci√≥n de JavaScript que engancha la vista al modelo.Su funci√≥n es inicializar el $scope.Dependiendo de su aplicaci√≥n,puede o no necesitar crear un controlador.Puedes tener muchos controladores en una p√°gina.</target>
        </trans-unit>
        <trans-unit id="38e5b6c1d5bdd30cd076016ffcf63fb6a6fe8ba7" translate="yes" xml:space="preserve">
          <source>Controllers and providers (services, factories, etc.) are for modifying the data model, NOT HTML.</source>
          <target state="translated">Los controladores y proveedores (servicios,f√°bricas,etc.)son para modificar el modelo de datos,NO el HTML.</target>
        </trans-unit>
        <trans-unit id="8190947945a5d101ce34179f8d52d23951e48521" translate="yes" xml:space="preserve">
          <source>DI means that instead of writing your application and wiring it together, you instead define a library of components, each identified by a string.</source>
          <target state="translated">DI significa que en lugar de escribir su aplicaci√≥n y conectarla,define una biblioteca de componentes,cada uno identificado por una cadena.</target>
        </trans-unit>
        <trans-unit id="d38cca5da9c7df446a12182ab09218cd420e4017" translate="yes" xml:space="preserve">
          <source>Data binding</source>
          <target state="translated">La vinculaci√≥n de los datos</target>
        </trans-unit>
        <trans-unit id="abe361ec5ac92ab2b51436412eccfc4c617ee10a" translate="yes" xml:space="preserve">
          <source>Dependency injection</source>
          <target state="translated">Inyecci√≥n de dependencia</target>
        </trans-unit>
        <trans-unit id="b4834f95740149caa4ab7c7998c3085a73d25833" translate="yes" xml:space="preserve">
          <source>Developers new to AngularJS often ask a question like: how do I find all links of a specific kind and add a directive onto them. The developer is always flabbergasted when we reply: you don't. But the reason you don't do that is that this is like half-jQuery, half-AngularJS, and no good. The problem here is that the developer is trying to &quot;do jQuery&quot; in the context of AngularJS. That's never going to work well. The view &lt;em&gt;is&lt;/em&gt; the official record. Outside of a directive (more on this below), you never, ever, &lt;em&gt;never&lt;/em&gt; change the DOM. And directives are applied &lt;em&gt;in the view&lt;/em&gt;, so intent is clear.</source>
          <target state="translated">Los desarrolladores nuevos en AngularJS a menudo hacen una pregunta como: &amp;iquest;c&amp;oacute;mo encuentro todos los enlaces de un tipo espec&amp;iacute;fico y agrego una directiva sobre ellos? El desarrollador siempre queda estupefacto cuando respondemos: usted no. Pero la raz&amp;oacute;n por la que no haces eso es que esto es como half-jQuery, half-AngularJS, y no sirve. El problema aqu&amp;iacute; es que el desarrollador est&amp;aacute; tratando de &quot;hacer jQuery&quot; en el contexto de AngularJS. Eso nunca va a funcionar bien. La vista &lt;em&gt;es&lt;/em&gt; el registro oficial. Fuera de una directiva (m&amp;aacute;s sobre esto a continuaci&amp;oacute;n), nunca, nunca, cambias el DOM. Y las directivas se aplican &lt;em&gt;en la vista&lt;/em&gt; , por lo que la intenci&amp;oacute;n es clara.</target>
        </trans-unit>
        <trans-unit id="53d7a9d92573e089ff93413770ae30c25ee69d14" translate="yes" xml:space="preserve">
          <source>Directives can then in turn pull in additional Angular components such as controllers, services, etc. What comes out the bottom of the compiler is a fully formed web application, wired up and ready to go.</source>
          <target state="translated">Las directivas pueden a su vez atraer componentes angulares adicionales como controladores,servicios,etc.Lo que sale de la parte inferior del compilador es una aplicaci√≥n web completamente formada,conectada y lista para funcionar.</target>
        </trans-unit>
        <trans-unit id="6e07f7c559632d31618e542f4fc425e25f0611c0" translate="yes" xml:space="preserve">
          <source>Distinct model layer</source>
          <target state="translated">Distinta capa modelo</target>
        </trans-unit>
        <trans-unit id="7d3e17491190e7a5dea94490347df028a3f9aa5e" translate="yes" xml:space="preserve">
          <source>Doing so will allow you to leverage their &lt;a href=&quot;http://docs.angularjs.org/api/ngResource.$resource&quot;&gt;resource factory&lt;/a&gt;, which creates an abstraction of your server side RESTful &lt;a href=&quot;http://en.wikipedia.org/wiki/Application_programming_interface&quot;&gt;API&lt;/a&gt; and makes server-side calls (get, save, delete, etc.) incredibly easy.</source>
          <target state="translated">Hacerlo le permitir&amp;aacute; aprovechar su &lt;a href=&quot;http://docs.angularjs.org/api/ngResource.$resource&quot;&gt;f&amp;aacute;brica de recursos&lt;/a&gt; , lo que crea una abstracci&amp;oacute;n de la &lt;a href=&quot;http://en.wikipedia.org/wiki/Application_programming_interface&quot;&gt;API&lt;/a&gt; RESTful del lado del servidor y hace que las llamadas del lado del servidor (obtener, guardar, eliminar, etc.) sean incre&amp;iacute;blemente f&amp;aacute;ciles.</target>
        </trans-unit>
        <trans-unit id="9fac905701ef3b0097c8764804ad3e59dbd915f9" translate="yes" xml:space="preserve">
          <source>Don't even use jQuery. Don't even include it. It will hold you back. And when you come to a problem that you think you know how to solve in jQuery already, before you reach for the &lt;code&gt;$&lt;/code&gt;, try to think about how to do it within the confines the AngularJS. If you don't know, ask! 19 times out of 20, the best way to do it doesn't need jQuery and to try to solve it with jQuery results in more work for you.</source>
          <target state="translated">Ni siquiera uses jQuery. Ni siquiera lo incluyas. Te detendr&amp;aacute;. Y cuando encuentre un problema que cree que ya sabe c&amp;oacute;mo resolver en jQuery, antes de alcanzar el &lt;code&gt;$&lt;/code&gt; , trate de pensar c&amp;oacute;mo hacerlo dentro de los l&amp;iacute;mites del AngularJS. Si no lo sabes, &amp;iexcl;pregunta! 19 de cada 20 veces, la mejor manera de hacerlo no necesita jQuery y tratar de resolverlo con jQuery resulta en m&amp;aacute;s trabajo para usted.</target>
        </trans-unit>
        <trans-unit id="2c79c2f8fe6cef139b77391f6699a0512a187188" translate="yes" xml:space="preserve">
          <source>Edit:</source>
          <target state="translated">Edit:</target>
        </trans-unit>
        <trans-unit id="22b7ff6e8b6f6df26b8528e8d5a05b683dda1ec4" translate="yes" xml:space="preserve">
          <source>First know that &lt;a href=&quot;http://en.wikipedia.org/wiki/Single-page_application&quot;&gt;single-page applications&lt;/a&gt; are &lt;em&gt;applications&lt;/em&gt;. They're &lt;em&gt;not&lt;/em&gt; webpages. So we need to think like a server-side developer &lt;em&gt;in addition&lt;/em&gt; to thinking like a client-side developer. We have to think about how to divide our application into individual, extensible, testable components.</source>
          <target state="translated">Primero sepa que &lt;a href=&quot;http://en.wikipedia.org/wiki/Single-page_application&quot;&gt;las aplicaciones de una sola p&amp;aacute;gina&lt;/a&gt; son &lt;em&gt;aplicaciones&lt;/em&gt; . No son p&amp;aacute;ginas web. Por lo tanto, debemos pensar como un desarrollador del lado del servidor &lt;em&gt;adem&amp;aacute;s&lt;/em&gt; de pensar como un desarrollador del lado del cliente. Tenemos que pensar en c&amp;oacute;mo dividir nuestra aplicaci&amp;oacute;n en componentes individuales, extensibles y comprobables.</target>
        </trans-unit>
        <trans-unit id="395a4b3bfca26bc0f15e623275df885c5164cd6a" translate="yes" xml:space="preserve">
          <source>First up, Angular doesn't replace jQuery</source>
          <target state="translated">Primero,Angular no reemplaza a jQuery</target>
        </trans-unit>
        <trans-unit id="2bd966a54c73aaa3f249cccf1a9fc029ccf3efc7" translate="yes" xml:space="preserve">
          <source>First, jQuery was never necessary. There's nothing we did here that needed jQuery at all!</source>
          <target state="translated">Primero,jQuery nunca fue necesario.¬°No hay nada de lo que hicimos aqu√≠ que necesitara jQuery en absoluto!</target>
        </trans-unit>
        <trans-unit id="900191e8f993958a06b036ac65d730e1bdaa6073" translate="yes" xml:space="preserve">
          <source>For a view that looks like this:</source>
          <target state="translated">Para una vista como esta:</target>
        </trans-unit>
        <trans-unit id="2e2c9d3bdb321bac05780afd95a48bfce104b09e" translate="yes" xml:space="preserve">
          <source>For example, here I define a service:</source>
          <target state="translated">Por ejemplo,aqu√≠ defino un servicio:</target>
        </trans-unit>
        <trans-unit id="de3e20808c116384b0a4b03719bffd49cb190884" translate="yes" xml:space="preserve">
          <source>For example, if you want a carousel on your page, you might define an unordered list of figures, perhaps wrapped in a nav element. You might then write some jQuery to select the list on the page and restyle it as a gallery with timeouts to do the sliding animation.</source>
          <target state="translated">Por ejemplo,si quiere un carrusel en su p√°gina,podr√≠a definir una lista de figuras sin orden,tal vez envueltas en un elemento de navegaci√≥n.Luego podr√≠as escribir algo de jQuery para seleccionar la lista de la p√°gina y volverla a dise√±ar como una galer√≠a con tiempos de espera para hacer la animaci√≥n de deslizamiento.</target>
        </trans-unit>
        <trans-unit id="991573402c0940207e9bacdb158be6295096e397" translate="yes" xml:space="preserve">
          <source>For example, when you get data from THE server which you intend to display in some format in the DOM, in jQuery, you need to '1. FIND' where in the DOM you want to place this data, the '2. UPDATE/APPEND' it there by creating a new node or just setting its &lt;a href=&quot;http://www.tizag.com/javascriptT/javascript-innerHTML.php&quot;&gt;innerHTML&lt;/a&gt;. Then when you want to update this view, you then '3. FIND' the location and '4. UPDATE'. This cycle of find and update all done within the same context of getting and formatting data from server is gone in AngularJS.</source>
          <target state="translated">Por ejemplo, cuando obtiene datos del servidor THE que pretende mostrar en alg&amp;uacute;n formato en el DOM, en jQuery, necesita '1. ENCONTRAR 'donde en el DOM desea colocar estos datos, el' 2. ACTUALIZAR / APROBAR 'all&amp;iacute; creando un nuevo nodo o simplemente configurando su &lt;a href=&quot;http://www.tizag.com/javascriptT/javascript-innerHTML.php&quot;&gt;innerHTML&lt;/a&gt; . Luego, cuando desee actualizar esta vista, entonces '3. ENCUENTRE 'la ubicaci&amp;oacute;n y' 4. ACTUALIZAR'. Este ciclo de b&amp;uacute;squeda y actualizaci&amp;oacute;n, todo hecho dentro del mismo contexto de obtenci&amp;oacute;n y formateo de datos del servidor, se ha ido en AngularJS.</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="850a95bbb6dd76741f2f32607f4ef86792316738" translate="yes" xml:space="preserve">
          <source>Fourth, closely related to the third, is that jqLite elements needn't be wrapped in &lt;code&gt;$&lt;/code&gt; - the &lt;code&gt;element&lt;/code&gt; that is passed to the &lt;code&gt;link&lt;/code&gt; function would &lt;em&gt;already be&lt;/em&gt; a jQuery element!</source>
          <target state="translated">El cuarto, estrechamente relacionado con el tercero, es que los elementos jqLite no necesitan estar envueltos en &lt;code&gt;$&lt;/code&gt; : &amp;iexcl;el &lt;code&gt;element&lt;/code&gt; o que se pasa a la funci&amp;oacute;n de &lt;code&gt;link&lt;/code&gt; &lt;em&gt;ya ser&amp;iacute;a&lt;/em&gt; un elemento jQuery!</target>
        </trans-unit>
        <trans-unit id="e937a7317ee9e666605382e9345fe01e5e87523e" translate="yes" xml:space="preserve">
          <source>From a broad perspective, DI means that you can declare components very freely and then from any other component, just ask for an instance of it and it will be granted. You don't have to know about loading order, or file locations, or anything like that. The power may not immediately be visible, but I'll provide just one (common) example: testing.</source>
          <target state="translated">Desde una perspectiva amplia,DI significa que puedes declarar los componentes muy libremente y luego de cualquier otro componente,s√≥lo pide una instancia de ello y se te conceder√°.No tienes que saber sobre el orden de carga,o las ubicaciones de los archivos,o algo as√≠.Puede que la potencia no sea visible inmediatamente,pero te dar√© s√≥lo un ejemplo (com√∫n):las pruebas.</target>
        </trans-unit>
        <trans-unit id="70376458c7e1d59978b45b6a33d1a41e52fb91db" translate="yes" xml:space="preserve">
          <source>Good luck.</source>
          <target state="translated">Buena suerte.</target>
        </trans-unit>
        <trans-unit id="a27f0fe6a21c158932ddc9c6ab32b680263c7a6e" translate="yes" xml:space="preserve">
          <source>HTML - Semantic meaning. The HTML should stand alone.</source>
          <target state="translated">HTML-Significado sem√°ntico.El HTML deber√≠a ser independiente.</target>
        </trans-unit>
        <trans-unit id="c5340e7474927e0f273d76b88c2f86f9341fb5de" translate="yes" xml:space="preserve">
          <source>HTML and directives define the layout and binding to the model.</source>
          <target state="translated">El HTML y las directivas definen el dise√±o y la vinculaci√≥n al modelo.</target>
        </trans-unit>
        <trans-unit id="7602bdeaf94c8c4d20e603fafd1c75516db6e8a6" translate="yes" xml:space="preserve">
          <source>Here's a quick example that shows the pattern I see most frequently. We want a toggleable button. (Note: this example is a little contrived and a skosh verbose to represent more complicated cases that are solved in exactly the same way.)</source>
          <target state="translated">Aqu√≠ hay un r√°pido ejemplo que muestra el patr√≥n que veo con m√°s frecuencia.Queremos un bot√≥n que se pueda cambiar.(Nota:este ejemplo es un poco artificioso y un skosh verboso para representar casos m√°s complicados que se resuelven exactamente de la misma manera).</target>
        </trans-unit>
        <trans-unit id="1b872c0b8b5cb91fbb546831e6921db7d5087ecd" translate="yes" xml:space="preserve">
          <source>How do I architect and design client-side web applications differently? What is the biggest difference?</source>
          <target state="translated">¬øC√≥mo puedo dise√±ar aplicaciones web del lado del cliente de forma diferente? ¬øCu√°l es la mayor diferencia?</target>
        </trans-unit>
        <trans-unit id="9ff77b581f89f632f34713ccc81664a4f91cf1b8" translate="yes" xml:space="preserve">
          <source>How do I architect and design client-side web apps differently?</source>
          <target state="translated">¬øC√≥mo puedo dise√±ar aplicaciones web del lado del cliente de forma diferente?</target>
        </trans-unit>
        <trans-unit id="8456215573486aa4c8df48dde90555787930b6c5" translate="yes" xml:space="preserve">
          <source>I find this question interesting, because my first serious exposure to JavaScript programming was &lt;a href=&quot;http://en.wikipedia.org/wiki/Node.js&quot;&gt;Node.js&lt;/a&gt; and AngularJS. I never learned jQuery, and I guess that's a good thing, because I don't have to unlearn anything. In fact, I actively avoid jQuery solutions to my problems, and instead, solely look for an &quot;AngularJS way&quot; to solve them. So, I guess my answer to this question would essentially boil down to, &quot;think like someone who never learned jQuery&quot; and avoid any temptation to incorporate jQuery directly (obviously AngularJS uses it to some extent behind the scenes).</source>
          <target state="translated">Encuentro esta pregunta interesante, porque mi primera exposici&amp;oacute;n seria a la programaci&amp;oacute;n de JavaScript fue &lt;a href=&quot;http://en.wikipedia.org/wiki/Node.js&quot;&gt;Node.js&lt;/a&gt; y AngularJS. Nunca aprend&amp;iacute; jQuery, y supongo que es algo bueno, porque no tengo que desaprender nada. De hecho, evito activamente las soluciones de jQuery a mis problemas y, en cambio, busco &amp;uacute;nicamente una &quot;forma AngularJS&quot; para resolverlos. Entonces, supongo que mi respuesta a esta pregunta se reducir&amp;iacute;a esencialmente a &quot;pensar como alguien que nunca aprendi&amp;oacute; jQuery&quot; y evitar cualquier tentaci&amp;oacute;n de incorporar jQuery directamente (obviamente, AngularJS lo usa en cierta medida detr&amp;aacute;s de escena).</target>
        </trans-unit>
        <trans-unit id="efb9e3de8580d4d388e6d1d2c1128365fcee76cb" translate="yes" xml:space="preserve">
          <source>I found it easier also, to test &lt;strong&gt;(1)&lt;/strong&gt; native JavaScript code and &lt;strong&gt;(2)&lt;/strong&gt; smaller libraries for each one of these patterns &lt;strong&gt;separately&lt;/strong&gt; before diving into one global framework. This allowed me to better understand which crucial issues a framework adresses (because you are personally faced with the problem).</source>
          <target state="translated">Tambi&amp;eacute;n me result&amp;oacute; m&amp;aacute;s f&amp;aacute;cil probar &lt;strong&gt;(1)&lt;/strong&gt; c&amp;oacute;digo JavaScript nativo y &lt;strong&gt;(2)&lt;/strong&gt; bibliotecas m&amp;aacute;s peque&amp;ntilde;as para cada uno de estos patrones por &lt;strong&gt;separado&lt;/strong&gt; antes de sumergirme en un marco global. Esto me permiti&amp;oacute; comprender mejor qu&amp;eacute; cuestiones cruciales aborda un marco (porque usted se enfrenta personalmente al problema).</target>
        </trans-unit>
        <trans-unit id="0f5fdb791dc830db0312c3e805b978f9fee42e94" translate="yes" xml:space="preserve">
          <source>I got so excited about AngularJS, I wrote a short book on it which you're very welcome to read online &lt;a href=&quot;http://nicholasjohnson.com/angular-book/&quot;&gt;http://nicholasjohnson.com/angular-book/&lt;/a&gt;. I hope it's helpful.</source>
          <target state="translated">Me emocion&amp;eacute; tanto con AngularJS que escrib&amp;iacute; un breve libro sobre &amp;eacute;l que pueden leer en l&amp;iacute;nea en &lt;a href=&quot;http://nicholasjohnson.com/angular-book/&quot;&gt;http://nicholasjohnson.com/angular-book/&lt;/a&gt; . Espero que sea &amp;uacute;til.</target>
        </trans-unit>
        <trans-unit id="cff209bb9bc1c566d085c39c77af21c5738cf6e4" translate="yes" xml:space="preserve">
          <source>I heard from a meetup I attended, one of the founders of Angular said they worked really hard to separate out the DOM manipulation so do not try to include them back in.</source>
          <target state="translated">Escuch√© en una reuni√≥n a la que asist√≠,que uno de los fundadores de Angular dijo que trabajaron muy duro para separar la manipulaci√≥n de DOM,as√≠ que no intenten incluirlos de nuevo.</target>
        </trans-unit>
        <trans-unit id="b1cc19c6fa446f86e199536080332bbd9a86f525" translate="yes" xml:space="preserve">
          <source>I see lots of developers new to AngularJS using directives as the place to throw a bunch of jQuery. In other words, they think &quot;since I can't do DOM manipulation in the controller, I'll take that code put it in a directive&quot;. While that certainly is much better, it's often &lt;em&gt;still wrong&lt;/em&gt;.</source>
          <target state="translated">Veo muchos desarrolladores nuevos en AngularJS que usan directivas como el lugar para lanzar un mont&amp;oacute;n de jQuery. En otras palabras, piensan &quot;como no puedo hacer la manipulaci&amp;oacute;n DOM en el controlador, tomar&amp;eacute; ese c&amp;oacute;digo y lo pondr&amp;eacute; en una directiva&quot;. Si bien eso ciertamente es mucho mejor, a menudo &lt;em&gt;todav&amp;iacute;a est&amp;aacute; mal&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="cc523ff786c336f7206f714e0c729f9f96a4ee5f" translate="yes" xml:space="preserve">
          <source>I shared my code here: &lt;a href=&quot;https://github.com/huytd/Sizzular&quot;&gt;https://github.com/huytd/Sizzular&lt;/a&gt;</source>
          <target state="translated">Compart&amp;iacute; mi c&amp;oacute;digo aqu&amp;iacute;: &lt;a href=&quot;https://github.com/huytd/Sizzular&quot;&gt;https://github.com/huytd/Sizzular&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="59b381689432e88b63f12501377e65b7661e38f1" translate="yes" xml:space="preserve">
          <source>I usually develop mobile applications using AngularJS and &lt;a href=&quot;http://en.wikipedia.org/wiki/PhoneGap&quot;&gt;Cordova&lt;/a&gt;. The ONLY thing from jQuery I needed is the Selector.</source>
          <target state="translated">Normalmente desarrollo aplicaciones m&amp;oacute;viles con AngularJS y &lt;a href=&quot;http://en.wikipedia.org/wiki/PhoneGap&quot;&gt;Cordova&lt;/a&gt; . Lo &amp;Uacute;NICO de jQuery que necesitaba es el Selector.</target>
        </trans-unit>
        <trans-unit id="68cf991557c35bd050972b963c214ad303e38353" translate="yes" xml:space="preserve">
          <source>I'm not looking for a detailed comparison between &lt;code&gt;jQuery&lt;/code&gt; and &lt;code&gt;AngularJS&lt;/code&gt;.</source>
          <target state="translated">No estoy buscando una comparaci&amp;oacute;n detallada entre &lt;code&gt;jQuery&lt;/code&gt; y &lt;code&gt;AngularJS&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f656d296b8b07178ef6945737f0889477b62c8e3" translate="yes" xml:space="preserve">
          <source>I've seen many developers here and on the mailing list create these elaborate solutions with jQuery plugins of 150 or 200 lines of code that they then glue into AngularJS with a collection of callbacks and &lt;code&gt;$apply&lt;/code&gt;s that are confusing and convoluted; but they eventually get it working! The problem is that in &lt;strong&gt;most&lt;/strong&gt; cases that jQuery plugin could be rewritten in AngularJS in a fraction of the code, where suddenly everything becomes comprehensible and straightforward.</source>
          <target state="translated">He visto a muchos desarrolladores aqu&amp;iacute; y en la lista de correo crear estas elaboradas soluciones con complementos jQuery de 150 o 200 l&amp;iacute;neas de c&amp;oacute;digo que luego pegan en AngularJS con una colecci&amp;oacute;n de devoluciones de llamada y &lt;code&gt;$apply&lt;/code&gt; que son confusas y complicadas; &amp;iexcl;pero finalmente lo hacen funcionar! El problema es que, en la &lt;strong&gt;mayor&amp;iacute;a de los&lt;/strong&gt; casos, el complemento jQuery podr&amp;iacute;a reescribirse en AngularJS en una fracci&amp;oacute;n del c&amp;oacute;digo, donde de repente todo se vuelve comprensible y directo.</target>
        </trans-unit>
        <trans-unit id="9faefb35c2c81504d51573a6b0bb40a2af1787a2" translate="yes" xml:space="preserve">
          <source>If this sounds like it might be over-prescriptive and limiting, nothing could be farther from the truth. Because AngularJS treats your HTML as code, you get &lt;strong&gt;HTML level granularity in your web application&lt;/strong&gt;. Everything is possible, and most things are surprisingly easy once you make a few conceptual leaps.</source>
          <target state="translated">Si esto suena como si fuera demasiado prescriptivo y limitante, nada podr&amp;iacute;a estar m&amp;aacute;s lejos de la verdad. Debido a que AngularJS trata su HTML como c&amp;oacute;digo, obtiene &lt;strong&gt;granularidad de nivel HTML en su aplicaci&amp;oacute;n web&lt;/strong&gt; . Todo es posible, y la mayor&amp;iacute;a de las cosas son sorprendentemente f&amp;aacute;ciles una vez que haces algunos saltos conceptuales.</target>
        </trans-unit>
        <trans-unit id="79f7744c5244c5d82136a0b399bcf24b88bb5af1" translate="yes" xml:space="preserve">
          <source>If you do use jQuery, you shouldn't be sprinkling it all over the place. The correct place for DOM manipulation in AngularJS is in a directive. More on these later.</source>
          <target state="translated">Si usas jQuery,no deber√≠as rociarlo por todos lados.El lugar correcto para la manipulaci√≥n de DOM en AngularJS est√° en una directiva.M√°s sobre esto m√°s tarde.</target>
        </trans-unit>
        <trans-unit id="b60077ec18c37edabed1d4367bf017ee53c9fbcf" translate="yes" xml:space="preserve">
          <source>If you need an HTML widget, create a directive.</source>
          <target state="translated">Si necesitas un widget HTML,crea una directiva.</target>
        </trans-unit>
        <trans-unit id="c0db6dddb3c36feeee526c677dfbbae3c8383c59" translate="yes" xml:space="preserve">
          <source>If you need to share data between controllers, create a service or factory - they are singletons that are shared across the application.</source>
          <target state="translated">Si necesita compartir datos entre controladores,cree un servicio o una f√°brica-son monolitos que se comparten a trav√©s de la aplicaci√≥n.</target>
        </trans-unit>
        <trans-unit id="4428aad89d5c0c9e8fe7de6ea30b96f7e38235d8" translate="yes" xml:space="preserve">
          <source>If you want a carousel, just use a &lt;code&gt;&amp;lt;carousel /&amp;gt;&lt;/code&gt; element, then define a directive to pull in a template, and make that sucker work.</source>
          <target state="translated">Si desea un carrusel, simplemente use un elemento &lt;code&gt;&amp;lt;carousel /&amp;gt;&lt;/code&gt; , luego defina una directiva para extraer una plantilla y hacer que ese tonto funcione.</target>
        </trans-unit>
        <trans-unit id="276ce11b5a508e459e0e3120bcd6327d2afadd20" translate="yes" xml:space="preserve">
          <source>If, like me, you lived through the browser wars, you might find this idea quite offensive. Get over it, it'll be worth it, I promise.</source>
          <target state="translated">Si,como yo,viviste las guerras de navegador,podr√≠as encontrar esta idea bastante ofensiva.Sup√©ralo,valdr√° la pena,lo prometo.</target>
        </trans-unit>
        <trans-unit id="5813cd91b1b8004097b86b34053bfec044d09858" translate="yes" xml:space="preserve">
          <source>Imperative &amp;rarr; declarative</source>
          <target state="translated">Imperativo &amp;rarr; declarativo</target>
        </trans-unit>
        <trans-unit id="07968492b4fc9b61f75164fde04e026e2f9fa45e" translate="yes" xml:space="preserve">
          <source>In &lt;strong&gt;AngularJS&lt;/strong&gt;, you use &lt;strong&gt;directives&lt;/strong&gt; to mark the elements directly, to wire them up:</source>
          <target state="translated">En &lt;strong&gt;AngularJS&lt;/strong&gt; , usa &lt;strong&gt;directivas&lt;/strong&gt; para marcar los elementos directamente, para conectarlos:</target>
        </trans-unit>
        <trans-unit id="f72af3c482bf1229ea3ff7aa97ad07e3cddd38f9" translate="yes" xml:space="preserve">
          <source>In &lt;strong&gt;jQuery&lt;/strong&gt;, you typically  use &lt;strong&gt;selectors&lt;/strong&gt; to find elements, and then wire them up:</source>
          <target state="translated">En &lt;strong&gt;jQuery&lt;/strong&gt; , normalmente usa &lt;strong&gt;selectores&lt;/strong&gt; para buscar elementos y luego los conecta:</target>
        </trans-unit>
        <trans-unit id="f023543783f6ea1287434a1d4ab86cd65d3608d2" translate="yes" xml:space="preserve">
          <source>In AngularJS we write smaller directives. Our dropdown directive would be ridiculously small. It might maintain the folded state, and provide methods to fold(), unfold() or toggle(). These methods would simply update $scope.menu.visible which is a boolean holding the state.</source>
          <target state="translated">En AngularJS escribimos directivas m√°s peque√±as.Nuestra directiva desplegable ser√≠a rid√≠culamente peque√±a.Podr√≠a mantener el estado de plegado,y proporcionar m√©todos para plegar(),desplegar()o conmutar().Estos m√©todos simplemente actualizar√≠an $scope.menu.visible que es un booleano que mantiene el estado.</target>
        </trans-unit>
        <trans-unit id="d8e03995fe1bd0fda78591a1efe81ead5f9d2dc8" translate="yes" xml:space="preserve">
          <source>In AngularJS you can do this too, but you are encouraged to make use of data binding. Change your model, and because the DOM is bound to it via a template your DOM will automatically update, no intervention required.</source>
          <target state="translated">En AngularJS tambi√©n puedes hacer esto,pero se te anima a hacer uso de la vinculaci√≥n de datos.Cambie su modelo,y como el DOM est√° vinculado a √©l a trav√©s de una plantilla,su DOM se actualizar√° autom√°ticamente,sin necesidad de intervenci√≥n.</target>
        </trans-unit>
        <trans-unit id="1ac2131eed6961b3bcec8b6db93b268ad621db10" translate="yes" xml:space="preserve">
          <source>In AngularJS, Ajax is your default go-to solution and it happens all the time, almost without you noticing. You can include templates with ng-include. You can apply a template with the simplest custom directive. You can wrap an Ajax call in a service and create yourself a &lt;a href=&quot;http://en.wikipedia.org/wiki/GitHub&quot;&gt;GitHub&lt;/a&gt; service, or a &lt;a href=&quot;http://en.wikipedia.org/wiki/Flickr&quot;&gt;Flickr&lt;/a&gt; service, which you can access with astonishing ease.</source>
          <target state="translated">En AngularJS, Ajax es su soluci&amp;oacute;n predeterminada y ocurre todo el tiempo, casi sin que lo note. Puede incluir plantillas con ng-include. Puede aplicar una plantilla con la directiva personalizada m&amp;aacute;s simple. Puede ajustar una llamada Ajax en un servicio y crearse un servicio &lt;a href=&quot;http://en.wikipedia.org/wiki/GitHub&quot;&gt;GitHub&lt;/a&gt; o un servicio &lt;a href=&quot;http://en.wikipedia.org/wiki/Flickr&quot;&gt;Flickr&lt;/a&gt; , al que puede acceder con asombrosa facilidad.</target>
        </trans-unit>
        <trans-unit id="e2b05f35093dd1f890c262faf35c9be008a7512c" translate="yes" xml:space="preserve">
          <source>In AngularJS, meaning lives in the model, the HTML is just a template, for display only.</source>
          <target state="translated">En AngularJS,es decir,vive en el modelo,el HTML es s√≥lo una plantilla,s√≥lo para mostrar.</target>
        </trans-unit>
        <trans-unit id="d68e1fa23f0a8a69226a8fe0de84d40b5cf7424f" translate="yes" xml:space="preserve">
          <source>In AngularJS, think about models, rather than jQuery-selected DOM elements that hold your data. Think about views as projections of those models, rather than registering callbacks to manipulate what the user sees.</source>
          <target state="translated">En AngularJS,piense en los modelos,m√°s que en los elementos DOM seleccionados por jQuery que contienen sus datos.Piense en las vistas como proyecciones de esos modelos,en lugar de registrar llamadas para manipular lo que el usuario ve.</target>
        </trans-unit>
        <trans-unit id="89cbb8617b950a42475e39e8432df7a8116707a2" translate="yes" xml:space="preserve">
          <source>In AngularJS, though, the view is the official record of view-based functionality. Our &lt;code&gt;ul&lt;/code&gt; declaration would look like this instead:</source>
          <target state="translated">Sin embargo, en AngularJS, la vista es el registro oficial de la funcionalidad basada en la vista. Nuestra declaraci&amp;oacute;n &lt;code&gt;ul&lt;/code&gt; se ver&amp;iacute;a as&amp;iacute; en su lugar:</target>
        </trans-unit>
        <trans-unit id="0162908cf1e7269bf496e946a61a8ada95cd6936" translate="yes" xml:space="preserve">
          <source>In AngularJS, we define directives. A directive is a function which returns a JSON object. This object tells AngularJS what DOM elements to look for, and what changes to make to them. Directives are hooked in to the template using either attributes or elements, which you invent. The idea is to extend the capabilities of HTML with new attributes and elements.</source>
          <target state="translated">En AngularJS,definimos directivas.Una directiva es una funci√≥n que devuelve un objeto JSON.Este objeto le dice a AngularJS qu√© elementos DOM buscar,y qu√© cambios hacer en ellos.Las directivas se enganchan a la plantilla usando atributos o elementos,que usted inventa.La idea es extender las capacidades del HTML con nuevos atributos y elementos.</target>
        </trans-unit>
        <trans-unit id="9ead8b9954017937b7508b690030cf694823a516" translate="yes" xml:space="preserve">
          <source>In AngularJS, you want to think about &lt;strong&gt;views&lt;/strong&gt; rather than DOM elements. Views are (declarative) HTML that contain AngularJS &lt;strong&gt;directives&lt;/strong&gt;. Directives set up the event handlers behind the scenes for us and give us dynamic databinding. Selectors are rarely used, so the need for IDs (and some types of classes) is greatly diminished. Views are tied to &lt;strong&gt;models&lt;/strong&gt; (via scopes). Views are a projection of the model. Events change models (that is, data, scope properties), and the views that project those models update &quot;automatically.&quot;</source>
          <target state="translated">En AngularJS, desea pensar en &lt;strong&gt;vistas en&lt;/strong&gt; lugar de elementos DOM. Las vistas son HTML (declarativo) que contienen &lt;strong&gt;directivas&lt;/strong&gt; AngularJS. Las directivas configuran los controladores de eventos detr&amp;aacute;s de escena para nosotros y nos brindan un enlace de datos din&amp;aacute;mico. Los selectores rara vez se usan, por lo que la necesidad de ID (y algunos tipos de clases) se ve muy disminuida. Las vistas est&amp;aacute;n vinculadas a &lt;strong&gt;modelos&lt;/strong&gt; (a trav&amp;eacute;s de &amp;aacute;mbitos). Las vistas son una proyecci&amp;oacute;n del modelo. Los eventos cambian los modelos (es decir, datos, propiedades del alcance) y las vistas que proyectan esos modelos se actualizan &quot;autom&amp;aacute;ticamente&quot;.</target>
        </trans-unit>
        <trans-unit id="0978a7538d2e9b597f501e430a1fc5188f95a6ac" translate="yes" xml:space="preserve">
          <source>In fact, AngularJS is one of the few JavaScript MV* frameworks (many JavaScript MVC tools still fall under the category library).</source>
          <target state="translated">De hecho,AngularJS es uno de los pocos marcos de trabajo de JavaScript MV*(muchas herramientas de JavaScript MVC todav√≠a entran en la biblioteca de categor√≠as).</target>
        </trans-unit>
        <trans-unit id="90ff4de51967b0e32cde73bafc0522d33f597359" translate="yes" xml:space="preserve">
          <source>In jQuery making an Ajax call is fairly simple, but it's still something you might think twice about. There's the added complexity to think about, and a fair chunk of script to maintain.</source>
          <target state="translated">En jQuery hacer una llamada a Ajax es bastante simple,pero es algo que podr√≠as pensar dos veces.Hay que pensar en la complejidad a√±adida,y un buen trozo de gui√≥n que mantener.</target>
        </trans-unit>
        <trans-unit id="4d193d7aba2968b4d212b2af011f3a04f803d0cc" translate="yes" xml:space="preserve">
          <source>In jQuery we define plugins by adding functions to the jQuery.prototype. We then hook these into the DOM by selecting elements and calling the plugin on the result. The idea is to extend the capabilities of jQuery.</source>
          <target state="translated">En jQuery definimos los plugins a√±adiendo funciones al prototipo jQuery.prototype.Luego las enganchamos en el DOM seleccionando elementos y llamando al plugin en el resultado.La idea es extender las capacidades de jQuery.</target>
        </trans-unit>
        <trans-unit id="91a51e946cb4f1b8c319d268bb1e04bc99f9428c" translate="yes" xml:space="preserve">
          <source>In jQuery you make all your DOM changes by hand. You construct new DOM elements programatically. If you have a JSON array and you want to put it to the DOM, you must write a function to generate the HTML and insert it.</source>
          <target state="translated">En jQuery haces todos tus cambios de DOM a mano.Construyes nuevos elementos DOM de forma programada.Si tienes una matriz JSON y quieres ponerla en el DOM,debes escribir una funci√≥n para generar el HTML e insertarlo.</target>
        </trans-unit>
        <trans-unit id="a18bb6e728d8ea68da1050a05d8c1caca3f92ba2" translate="yes" xml:space="preserve">
          <source>In jQuery, &lt;em&gt;selectors&lt;/em&gt; are used to find &lt;a href=&quot;http://en.wikipedia.org/wiki/Document_Object_Model&quot;&gt;DOM&lt;/a&gt; elements and then bind/register event handlers to them. When an event triggers, that (imperative) code executes to update/change the DOM.</source>
          <target state="translated">En jQuery, los &lt;em&gt;selectores&lt;/em&gt; se utilizan para buscar elementos &lt;a href=&quot;http://en.wikipedia.org/wiki/Document_Object_Model&quot;&gt;DOM&lt;/a&gt; y luego vincularlos / registrar controladores de eventos. Cuando se activa un evento, ese c&amp;oacute;digo (imperativo) se ejecuta para actualizar / cambiar el DOM.</target>
        </trans-unit>
        <trans-unit id="8a90029611394ef928be3afb0243d4a481afa763" translate="yes" xml:space="preserve">
          <source>In jQuery, if we want to accomplish a small non-dom related task such as pulling a feed from an API, we might write a little function to do that in our closure. That's a valid solution, but what if we  want to access that feed often? What if we want to reuse that code in another application?</source>
          <target state="translated">En jQuery,si queremos realizar una peque√±a tarea no relacionada con el dom,como extraer un feed de una API,podr√≠amos escribir una peque√±a funci√≥n para hacerlo en nuestro cierre.Esa es una soluci√≥n v√°lida,pero ¬øqu√© pasa si queremos acceder a ese feed a menudo? ¬øY si queremos reutilizar ese c√≥digo en otra aplicaci√≥n?</target>
        </trans-unit>
        <trans-unit id="578dbc27e0bbb209f2594106996aa6a42a880c64" translate="yes" xml:space="preserve">
          <source>In jQuery, in our application logic, we would activate it with something like:</source>
          <target state="translated">En jQuery,en nuestra l√≥gica de aplicaci√≥n,lo activ√°bamos con algo como:</target>
        </trans-unit>
        <trans-unit id="e592dbbf682e0219ae9b707b9547f8d0c26db26e" translate="yes" xml:space="preserve">
          <source>In jQuery, the DOM is kind of like the model. But in AngularJS, we have a separate model layer that we can manage in any way we want, completely independently from the view. This helps for the above data binding, maintains &lt;a href=&quot;http://en.wikipedia.org/wiki/Separation_of_concerns&quot;&gt;separation of concerns&lt;/a&gt;, and introduces far greater testability. Other answers mentioned this point, so I'll just leave it at that.</source>
          <target state="translated">En jQuery, el DOM es algo as&amp;iacute; como el modelo. Pero en AngularJS, tenemos una capa de modelo separada que podemos administrar de la forma que queramos, completamente independiente de la vista. Esto ayuda para el enlace de datos anterior, mantiene la &lt;a href=&quot;http://en.wikipedia.org/wiki/Separation_of_concerns&quot;&gt;separaci&amp;oacute;n de las preocupaciones&lt;/a&gt; e introduce una capacidad de prueba mucho mayor. Otras respuestas mencionaron este punto, as&amp;iacute; que lo dejar&amp;eacute; as&amp;iacute;.</target>
        </trans-unit>
        <trans-unit id="9df8eb4ba7e6248a7fa36700e17beb0b22254122" translate="yes" xml:space="preserve">
          <source>In jQuery, the only way to test is often to create the component independently with a sample/demo page against which our tests can perform DOM manipulation. So then we have to develop a component separately and &lt;em&gt;then&lt;/em&gt; integrate it into our application. How inconvenient! So much of the time, when developing with jQuery, we opt for iterative instead of test-driven development. And who could blame us?</source>
          <target state="translated">En jQuery, la &amp;uacute;nica forma de probar es a menudo crear el componente de forma independiente con una p&amp;aacute;gina de muestra / demostraci&amp;oacute;n contra la cual nuestras pruebas pueden realizar la manipulaci&amp;oacute;n DOM. Entonces, tenemos que desarrollar un componente por separado y &lt;em&gt;luego&lt;/em&gt; integrarlo en nuestra aplicaci&amp;oacute;n. &amp;iexcl;Qu&amp;eacute; inconveniente! Gran parte del tiempo, al desarrollar con jQuery, optamos por un desarrollo iterativo en lugar de un desarrollo basado en pruebas. &amp;iquest;Y qui&amp;eacute;n podr&amp;iacute;a culparnos?</target>
        </trans-unit>
        <trans-unit id="3d416179f5af40e5d18f244c9ec21f4ff3ba4392" translate="yes" xml:space="preserve">
          <source>In jQuery, we programmatically change the view. We could have a dropdown menu defined as a &lt;code&gt;ul&lt;/code&gt; like so:</source>
          <target state="translated">En jQuery, cambiamos la vista mediante programaci&amp;oacute;n. Podr&amp;iacute;amos tener un men&amp;uacute; desplegable definido como un &lt;code&gt;ul&lt;/code&gt; as&amp;iacute;:</target>
        </trans-unit>
        <trans-unit id="8cc873c923938462e55d7110881a14087792dc45" translate="yes" xml:space="preserve">
          <source>In jQuery, you design a page, and then you make it dynamic. This is because jQuery was designed for augmentation and has grown incredibly from that simple premise.</source>
          <target state="translated">En jQuery,dise√±as una p√°gina,y luego la haces din√°mica.Esto se debe a que jQuery fue dise√±ado para aumentar y ha crecido incre√≠blemente desde esa simple premisa.</target>
        </trans-unit>
        <trans-unit id="7090926b8952ded00ad0da61eb6e721bc8a14052" translate="yes" xml:space="preserve">
          <source>It focuses on &lt;a href=&quot;http://en.wikipedia.org/wiki/Separation_of_concerns&quot;&gt;separation of concerns&lt;/a&gt; and testing (&lt;a href=&quot;http://en.wikipedia.org/wiki/Unit_testing&quot;&gt;unit testing&lt;/a&gt; and end-to-end testing), which facilitates test-driven development.</source>
          <target state="translated">Se centra en la &lt;a href=&quot;http://en.wikipedia.org/wiki/Separation_of_concerns&quot;&gt;separaci&amp;oacute;n de preocupaciones&lt;/a&gt; y pruebas (pruebas &lt;a href=&quot;http://en.wikipedia.org/wiki/Unit_testing&quot;&gt;unitarias&lt;/a&gt; y pruebas de extremo a extremo), lo que facilita el desarrollo basado en pruebas.</target>
        </trans-unit>
        <trans-unit id="68f6b3301831188f15035c61039b24d8f4da1058" translate="yes" xml:space="preserve">
          <source>It looks like this:</source>
          <target state="translated">Se parece a esto:</target>
        </trans-unit>
        <trans-unit id="1bf8b46db45a60c96dc64642b65b408cb0586b2c" translate="yes" xml:space="preserve">
          <source>It's more similar to &lt;a href=&quot;http://en.wikipedia.org/wiki/XSLT&quot;&gt;XSLT&lt;/a&gt; than &lt;a href=&quot;http://en.wikipedia.org/wiki/Ruby_on_Rails&quot;&gt;Ruby on Rails&lt;/a&gt; for example.</source>
          <target state="translated">Es m&amp;aacute;s similar a &lt;a href=&quot;http://en.wikipedia.org/wiki/XSLT&quot;&gt;XSLT&lt;/a&gt; que &lt;a href=&quot;http://en.wikipedia.org/wiki/Ruby_on_Rails&quot;&gt;Ruby on Rails,&lt;/a&gt; por ejemplo.</target>
        </trans-unit>
        <trans-unit id="fa9f7423100ee20741ac52a057ba63a8dfdb5f92" translate="yes" xml:space="preserve">
          <source>It's really two very different states of mind.</source>
          <target state="translated">En realidad son dos estados de √°nimo muy diferentes.</target>
        </trans-unit>
        <trans-unit id="94d4826a0666242ba1ec0266cc07db08e55ebb65" translate="yes" xml:space="preserve">
          <source>JQuery plugins are created in a closure. Privacy is maintained within that closure. It's up to you to maintain your scope chain within that closure. You only really have access to the set of DOM nodes passed in to the plugin by jQuery, plus any local variables defined in the closure and any globals you have defined. This means that plugins are quite self contained. This is a good thing, but can get restrictive when creating a whole application. Trying to pass data between sections of a dynamic page becomes a chore.</source>
          <target state="translated">Los plugins de JQuery se crean en un cierre.La privacidad se mantiene dentro de ese cierre.Depende de ti mantener tu cadena de alcance dentro de ese cierre.S√≥lo tienes acceso al conjunto de nodos DOM pasados al plugin por jQuery,m√°s cualquier variable local definida en el cierre y cualquier global que hayas definido.Esto significa que los plugins son bastante autocontenidos.Esto es algo bueno,pero puede volverse restrictivo al crear una aplicaci√≥n completa.Intentar pasar datos entre secciones de una p√°gina din√°mica se convierte en una tarea.</target>
        </trans-unit>
        <trans-unit id="4f2edb980b5874e73b214306540044ccfc45d51f" translate="yes" xml:space="preserve">
          <source>JavaScript - Behaviour, without the script the content remains.</source>
          <target state="translated">JavaScript-Comportamiento,sin el gui√≥n el contenido permanece.</target>
        </trans-unit>
        <trans-unit id="0270aec9323c9370103673494bbf224ea44393df" translate="yes" xml:space="preserve">
          <source>Let's get down to the nitty gritty.</source>
          <target state="translated">Vayamos al grano.</target>
        </trans-unit>
        <trans-unit id="b836477afc268d4e57ddfe2bd54c811505cff526" translate="yes" xml:space="preserve">
          <source>Let's say in our application, we require a service that implements server-side storage through a &lt;a href=&quot;http://en.wikipedia.org/wiki/Representational_State_Transfer&quot;&gt;REST&lt;/a&gt; API and, depending on application state, local storage as well. When running tests on our controllers, we don't want to have to communicate with the server - we're testing the &lt;em&gt;controller&lt;/em&gt;, after all. We can just add a mock service of the same name as our original component, and the injector will ensure that our controller gets the fake one automatically - our controller doesn't and needn't know the difference.</source>
          <target state="translated">Digamos que en nuestra aplicaci&amp;oacute;n, requerimos un servicio que implemente el almacenamiento del lado del servidor a trav&amp;eacute;s de una API &lt;a href=&quot;http://en.wikipedia.org/wiki/Representational_State_Transfer&quot;&gt;REST&lt;/a&gt; y, dependiendo del estado de la aplicaci&amp;oacute;n, tambi&amp;eacute;n el almacenamiento local. Cuando ejecutamos pruebas en nuestros controladores, no queremos tener que comunicarnos con el servidor; despu&amp;eacute;s de todo, estamos probando el &lt;em&gt;controlador&lt;/em&gt; . Simplemente podemos agregar un servicio simulado con el mismo nombre que nuestro componente original, y el inyector se asegurar&amp;aacute; de que nuestro controlador obtenga el falso autom&amp;aacute;ticamente; nuestro controlador no sabe y no necesita saber la diferencia.</target>
        </trans-unit>
        <trans-unit id="019d0f43d35ebf4308b922e715c1e5edd09fa4ad" translate="yes" xml:space="preserve">
          <source>Let's say we have a shopping cart. We might define a ShoppingCartService which maintains our cart and contains methods for adding and removing items. Because the service is a singleton, and is shared by all other components, any object that needs to can write to the shopping cart and pull data from it. It's always the same cart.</source>
          <target state="translated">Digamos que tenemos un carrito de compras.Podr√≠amos definir un servicio de carrito de compras que mantenga nuestro carrito y contenga m√©todos para agregar y quitar art√≠culos.Debido a que el servicio es un solo bot√≥n,y es compartido por todos los dem√°s componentes,cualquier objeto que lo necesite puede escribir en el carrito de compras y sacar datos de √©l.Siempre es el mismo carro.</target>
        </trans-unit>
        <trans-unit id="727106c324e0d326b53eb51a45c4de3427303c78" translate="yes" xml:space="preserve">
          <source>Like me, you will quickly realize that AngularJS (or &lt;a href=&quot;http://en.wikipedia.org/wiki/Ember.js&quot;&gt;Ember.js&lt;/a&gt;, Durandal, &amp;amp; other MV* frameworks for that matter) is one complex framework assembling many of the different JavaScript design patterns.</source>
          <target state="translated">Al igual que yo, se dar&amp;aacute; cuenta r&amp;aacute;pidamente de que AngularJS (o &lt;a href=&quot;http://en.wikipedia.org/wiki/Ember.js&quot;&gt;Ember.js&lt;/a&gt; , Durandal y otros marcos MV * para el caso) es un marco complejo que ensambla muchos de los diferentes patrones de dise&amp;ntilde;o de JavaScript.</target>
        </trans-unit>
        <trans-unit id="1cfac11915904016eed201cd17895ef142e7298c" translate="yes" xml:space="preserve">
          <source>Likewise:</source>
          <target state="translated">Likewise:</target>
        </trans-unit>
        <trans-unit id="480a72e21e4eecb130022ee539c13f82e6fb2dfc" translate="yes" xml:space="preserve">
          <source>Listen to the podcast &lt;em&gt;&lt;a href=&quot;http://javascriptjabber.com/032-jsj-angular-js/&quot;&gt;JavaScript Jabber: Episode #32&lt;/a&gt;&lt;/em&gt; that features the original creators of AngularJS: Misko Hevery &amp;amp; Igor Minar. They talk a lot about what it's like to come to AngularJS from other JavaScript backgrounds, especially jQuery.</source>
          <target state="translated">Escuche el podcast &lt;em&gt;&lt;a href=&quot;http://javascriptjabber.com/032-jsj-angular-js/&quot;&gt;JavaScript Jabber: Episodio # 32&lt;/a&gt;&lt;/em&gt; que presenta a los creadores originales de AngularJS: Misko Hevery e Igor Minar. Hablan mucho sobre c&amp;oacute;mo es llegar a AngularJS desde otros fondos de JavaScript, especialmente jQuery.</target>
        </trans-unit>
        <trans-unit id="b67d9fb1be3c48bab4357a222d15c0c1c6b2a6cb" translate="yes" xml:space="preserve">
          <source>Lots of small directives vs. big plugins with configuration switches</source>
          <target state="translated">Muchas peque√±as directivas frente a grandes plugins con interruptores de configuraci√≥n</target>
        </trans-unit>
        <trans-unit id="d35f5ddc9a42a97abe31468fffd327ecf232b76a" translate="yes" xml:space="preserve">
          <source>MVC and SOC are not on opposite ends of the same scale, they are on completely different axes. SOC makes no sense in an AngularJS context. You have to forget it and move on.</source>
          <target state="translated">MVC y SOC no est√°n en extremos opuestos de la misma escala,est√°n en ejes completamente diferentes.El SOC no tiene sentido en un contexto de AngularJS.Tienes que olvidarlo y seguir adelante.</target>
        </trans-unit>
        <trans-unit id="c45a37dd264d950f6729ef56ff2a3c5abcd3a05d" translate="yes" xml:space="preserve">
          <source>Manual DOM changes vs. Data Binding</source>
          <target state="translated">Cambios manuales de DOM frente a la vinculaci√≥n de datos</target>
        </trans-unit>
        <trans-unit id="40e632bf9794198f4934d498879371d6d20bbd8f" translate="yes" xml:space="preserve">
          <source>Misko likes jQuery and doesn't object to you using it. However you will find as you advance that you can get a pretty much all of your work done using a combination of scope, templates and directives, and you should prefer this workflow where possible because your code will be more discrete, more configurable, and more Angular.</source>
          <target state="translated">A Misko le gusta el jQuery y no se opone a que lo uses.Sin embargo,a medida que avance descubrir√° que puede hacer casi todo su trabajo usando una combinaci√≥n de alcance,plantillas y directivas,y deber√≠a preferir este flujo de trabajo siempre que sea posible porque su c√≥digo ser√° m√°s discreto,m√°s configurable y m√°s angular.</target>
        </trans-unit>
        <trans-unit id="aec4fedd98ecef7252e688fd312c8e23a1997547" translate="yes" xml:space="preserve">
          <source>Model - your models contains your semantic data. Models are usually &lt;a href=&quot;http://en.wikipedia.org/wiki/JSON&quot;&gt;JSON&lt;/a&gt; objects. Models exist as attributes of an object called $scope. You can also store handy utility functions on $scope which your templates can then access.</source>
          <target state="translated">Modelo: sus modelos contienen sus datos sem&amp;aacute;nticos. Los modelos suelen ser objetos &lt;a href=&quot;http://en.wikipedia.org/wiki/JSON&quot;&gt;JSON&lt;/a&gt; . Los modelos existen como atributos de un objeto llamado $ scope. Tambi&amp;eacute;n puede almacenar pr&amp;aacute;cticas funciones de utilidad en $ scope a las que pueden acceder sus plantillas.</target>
        </trans-unit>
        <trans-unit id="19445a7cb4f59d8113ef809076f488b19366f851" translate="yes" xml:space="preserve">
          <source>Modular service architecture</source>
          <target state="translated">Arquitectura de servicio modular</target>
        </trans-unit>
        <trans-unit id="9f995a1445edebed9a0edf58ca86dd65ac082151" translate="yes" xml:space="preserve">
          <source>Modules contain AngularJS components. &lt;strong&gt;When we include a module, all the components in that module become available to us as a simple list identified by their unique strings&lt;/strong&gt;. We can then inject those components into each other using AngularJS's dependency injection mechanism.</source>
          <target state="translated">Los m&amp;oacute;dulos contienen componentes AngularJS. &lt;strong&gt;Cuando incluimos un m&amp;oacute;dulo, todos los componentes de ese m&amp;oacute;dulo est&amp;aacute;n disponibles para nosotros como una lista simple identificada por sus cadenas &amp;uacute;nicas&lt;/strong&gt; . Luego podemos inyectar esos componentes entre s&amp;iacute; utilizando el mecanismo de inyecci&amp;oacute;n de dependencia de AngularJS.</target>
        </trans-unit>
        <trans-unit id="70589733204c633c8000b33bb5a831052090d3fd" translate="yes" xml:space="preserve">
          <source>My little book</source>
          <target state="translated">Mi peque√±o libro</target>
        </trans-unit>
        <trans-unit id="07bfe1f4feee155120fcc275ea68f1bb17d3143b" translate="yes" xml:space="preserve">
          <source>NB: This list is not complete, nor 'the best libraries'; they just happen to be the libraries I used. These libraries also include more patterns, the ones mentioned are just their main focuses or original intents. If you feel something is missing from this list, please do mention it in the comments, and I will be glad to add it.</source>
          <target state="translated">NB:Esta lista no est√° completa,ni &quot;las mejores bibliotecas&quot;;s√≥lo son las bibliotecas que yo us√©.Estas bibliotecas tambi√©n incluyen m√°s patrones,los mencionados son s√≥lo sus principales enfoques o intenciones originales.Si sientes que falta algo en esta lista,por favor,menci√≥nalo en los comentarios,y estar√© encantado de a√±adirlo.</target>
        </trans-unit>
        <trans-unit id="9c8b27c78d13ab71411ac0fb47cbd272d9d671dd" translate="yes" xml:space="preserve">
          <source>Need to update on mouseover?</source>
          <target state="translated">¬øNecesitas actualizar el mouseover?</target>
        </trans-unit>
        <trans-unit id="aa01a327749e49bb46fbfc492f1fd3a49c1971bc" translate="yes" xml:space="preserve">
          <source>Now &lt;strong&gt;in our template&lt;/strong&gt; we can wire this up:</source>
          <target state="translated">Ahora &lt;strong&gt;en nuestra plantilla&lt;/strong&gt; podemos conectar esto:</target>
        </trans-unit>
        <trans-unit id="153e1db9288018367b69014d7e273ac9321adee5" translate="yes" xml:space="preserve">
          <source>Now when I want to use that service I just refer to it by name like this:</source>
          <target state="translated">Ahora,cuando quiero usar ese servicio,me refiero a √©l por su nombre,as√≠:</target>
        </trans-unit>
        <trans-unit id="0442ca4f2eae67ddd54b40deb8356ab4b3234010" translate="yes" xml:space="preserve">
          <source>Okay, now we can write a test for the non-existent &lt;code&gt;when-active&lt;/code&gt; directive:</source>
          <target state="translated">Bien, ahora podemos escribir una prueba para la directiva inexistente &lt;code&gt;when-active&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="7837f88043d6848be1c4e543d7bab6fecef2576e" translate="yes" xml:space="preserve">
          <source>One approach to designing an AngularJS application:</source>
          <target state="translated">Un enfoque para dise√±ar una aplicaci√≥n de AngularJS:</target>
        </trans-unit>
        <trans-unit id="2bf914d56359268ce76537cc99ef400aea8ea885" translate="yes" xml:space="preserve">
          <source>One more thing you will experience in AngularJS: in jQuery you call the jQuery functions a lot, in AngularJS, AngularJS will call your functions, so AngularJS will 'tell you how to do things', but the benefits are worth it, so learning AngularJS usually means learning what AngularJS wants or the way AngularJS requires that you present your functions and it will call it accordingly. This is one of the things that makes AngularJS a framework rather than a library.</source>
          <target state="translated">Una cosa m√°s que experimentar√° en AngularJS:en jQuery usted llama mucho a las funciones de jQuery,en AngularJS,AngularJS llamar√° a sus funciones,por lo que AngularJS le 'dir√° c√≥mo hacer las cosas',pero los beneficios valen la pena,por lo que aprender AngularJS normalmente significa aprender lo que AngularJS quiere o la forma en que AngularJS requiere que usted presente sus funciones y lo llamar√° en consecuencia.Esta es una de las cosas que hace que AngularJS sea un marco m√°s que una biblioteca.</target>
        </trans-unit>
        <trans-unit id="03d3b7c13e891111d419508c0bfcfcb11f3df270" translate="yes" xml:space="preserve">
          <source>One of the first questions I asked myself when starting AngularJS and running through the tutorials is &lt;strong&gt;&quot;Where is my code?&quot;&lt;/strong&gt;. I've written no JavaScript, and yet I have all this behaviour. The answer is obvious. Because AngularJS compiles the DOM, AngularJS is treating your HTML as code. For many simple cases it's often sufficient to just write a template and let AngularJS compile it into an application for you.</source>
          <target state="translated">Una de las primeras preguntas que me hice al iniciar AngularJS y ejecutar los tutoriales es &lt;strong&gt;&quot;&amp;iquest;D&amp;oacute;nde est&amp;aacute; mi c&amp;oacute;digo?&quot;&lt;/strong&gt; . No he escrito JavaScript y, sin embargo, tengo todo este comportamiento. La respuesta es obvia. Como AngularJS compila el DOM, AngularJS est&amp;aacute; tratando su HTML como c&amp;oacute;digo. Para muchos casos simples, a menudo es suficiente escribir una plantilla y dejar que AngularJS la compile en una aplicaci&amp;oacute;n para usted.</target>
        </trans-unit>
        <trans-unit id="5560b0b478cb184acb6dd255b743f68939c76bfb" translate="yes" xml:space="preserve">
          <source>One of the first things your will notice about AngularJS is that &lt;strong&gt;custom attributes are everywhere&lt;/strong&gt;. Your HTML will be littered with ng attributes, which are essentially onClick attributes on steroids. These are directives (compiler directives), and are one of the main ways in which the template is hooked to the model.</source>
          <target state="translated">Una de las primeras cosas que notar&amp;aacute; sobre AngularJS es que &lt;strong&gt;los atributos personalizados est&amp;aacute;n en todas partes&lt;/strong&gt; . Su HTML estar&amp;aacute; lleno de atributos ng, que son esencialmente atributos onClick en esteroides. Estas son directivas (directivas del compilador) y son una de las principales formas en que la plantilla se engancha al modelo.</target>
        </trans-unit>
        <trans-unit id="57ecf8a54298e4269c92c7bcc0dbba1ce9d013e8" translate="yes" xml:space="preserve">
          <source>One of the points made in the podcast made a lot of things click for me with respects to your question:</source>
          <target state="translated">Uno de los puntos del podcast hizo que muchas cosas encajaran para m√≠ con respecto a tu pregunta:</target>
        </trans-unit>
        <trans-unit id="d2d60cb91258951e85b2c255d25b7443475f73c6" translate="yes" xml:space="preserve">
          <source>Our test now passes &lt;em&gt;and&lt;/em&gt; our menu performs as requested. Our development is &lt;em&gt;both&lt;/em&gt; iterative &lt;em&gt;and&lt;/em&gt; test-driven. Wicked-cool.</source>
          <target state="translated">Nuestra prueba ahora pasa &lt;em&gt;y&lt;/em&gt; nuestro men&amp;uacute; funciona seg&amp;uacute;n lo solicitado. Nuestro desarrollo es &lt;em&gt;tanto&lt;/em&gt; iterativo &lt;em&gt;como&lt;/em&gt; probado. Genial.</target>
        </trans-unit>
        <trans-unit id="b1cda9d2edb4291daae963095ddaa44650f5868e" translate="yes" xml:space="preserve">
          <source>Out of all of the many jQuery plugins you've seen, used, or written, how many of them had an accompanying test suite? Not very many because jQuery isn't very amenable to that. But AngularJS is.</source>
          <target state="translated">De todos los muchos plugins de jQuery que has visto,usado o escrito,¬øcu√°ntos de ellos ten√≠an un paquete de pruebas adjunto? No muchos,porque jQuery no es muy susceptible a eso.Pero AngularJS s√≠ lo es.</target>
        </trans-unit>
        <trans-unit id="f9292427c33228bbb89cf354be2c739835887f3c" translate="yes" xml:space="preserve">
          <source>Plugins vs. Directives</source>
          <target state="translated">Plugins vs.Gu√≠as</target>
        </trans-unit>
        <trans-unit id="607f6c8afc68a939603967e0db86561e2011d68e" translate="yes" xml:space="preserve">
          <source>Prototypal inheritance</source>
          <target state="translated">Herencia protot√≠pica</target>
        </trans-unit>
        <trans-unit id="1125bad105ddcf506c8be1fdc620fda300253963" translate="yes" xml:space="preserve">
          <source>Put another way, if AngularJS doesn't do something out of the box, think how the team would accomplish it to fit right in with &lt;code&gt;ngClick&lt;/code&gt;, &lt;code&gt;ngClass&lt;/code&gt;, et al.</source>
          <target state="translated">Dicho de otra manera, si AngularJS no hace algo fuera de la caja, piense c&amp;oacute;mo lo lograr&amp;iacute;a el equipo para encajar perfectamente con &lt;code&gt;ngClick&lt;/code&gt; , &lt;code&gt;ngClass&lt;/code&gt; , et al.</target>
        </trans-unit>
        <trans-unit id="114cadb60225b9cfb70015e3d69c1e89f1ac48ce" translate="yes" xml:space="preserve">
          <source>Remember: don't design, and then mark up. You must architect, and then design.</source>
          <target state="translated">Recuerda:no dise√±es,y luego marca.Debes ser arquitecto,y luego dise√±ar.</target>
        </trans-unit>
        <trans-unit id="f161adf528d29607ada8937ad2e9d5fb2b6eb816" translate="yes" xml:space="preserve">
          <source>Say I have a component called 'FlickrService' which defines methods for pulling JSON feeds from Flickr. Now, if I want to write a controller that can access Flickr, I just need to refer to the 'FlickrService' by name when I declare the controller. AngularJS will take care of instantiating the component and making it available to my controller.</source>
          <target state="translated">Digamos que tengo un componente llamado 'FlickrService' que define los m√©todos para sacar las fuentes de JSON de Flickr.Ahora,si quiero escribir un controlador que pueda acceder a Flickr,s√≥lo necesito referirme al 'FlickrService' por su nombre cuando declare el controlador.AngularJS se encargar√° de instanciar el componente y ponerlo a disposici√≥n de mi controlador.</target>
        </trans-unit>
        <trans-unit id="19ccf6b268bdaab6e39621189c0b09a8c462daa5" translate="yes" xml:space="preserve">
          <source>Say you have a menu that you want to unfold on hover. Well now we have a problem. Our plugin has wired in our click handler for us, we're going to need to add a configuration option to make it behave differently in this specific case.</source>
          <target state="translated">Digamos que tienes un men√∫ que quieres desplegar en el aire.Bueno,ahora tenemos un problema.Nuestro plugin se ha cableado en nuestro manejador de clicks para nosotros,vamos a necesitar a√±adir una opci√≥n de configuraci√≥n para que se comporte de manera diferente en este caso espec√≠fico.</target>
        </trans-unit>
        <trans-unit id="7d90dd71a242dda24991720aaeaa5f7a73787c5c" translate="yes" xml:space="preserve">
          <source>Saying &quot;I have a jQuery background how do I think in AngularJS?&quot; is like saying &quot;I have an HTML background how do I think in JavaScript?&quot; The fact that you're asking the question shows you most likely don't understand the fundamental purposes of these two resources. This is why I chose to answer the question by simply pointing out the fundamental difference rather than going through the list saying &quot;AngularJS makes use of directives whereas jQuery uses CSS selectors to make a jQuery object which does this and that etc....&quot;. This question does not require a lengthy answer.</source>
          <target state="translated">Decir &quot;Tengo un fondo de jQuery ¬øc√≥mo pienso en AngularJS?&quot; es como decir &quot;Tengo un fondo de HTML ¬øc√≥mo pienso en JavaScript?&quot; El hecho de que est√©s haciendo la pregunta muestra que probablemente no entiendas los prop√≥sitos fundamentales de estos dos recursos.Por eso eleg√≠ responder a la pregunta se√±alando simplemente la diferencia fundamental en lugar de ir a trav√©s de la lista diciendo &quot;AngularJS hace uso de directivas mientras que jQuery usa selectores CSS para hacer un objeto jQuery que hace esto y aquello etc....&quot;.Esta pregunta no requiere una respuesta larga.</target>
        </trans-unit>
        <trans-unit id="b15d2624d8c5f4177ef0a3ab7aff382714a73357" translate="yes" xml:space="preserve">
          <source>Second, even if we already have jQuery on our page, there's no reason to use it here; we can simply use &lt;code&gt;angular.element&lt;/code&gt; and our component will still work when dropped into a project that doesn't have jQuery.</source>
          <target state="translated">Segundo, incluso si ya tenemos jQuery en nuestra p&amp;aacute;gina, no hay raz&amp;oacute;n para usarlo aqu&amp;iacute;; simplemente podemos usar &lt;code&gt;angular.element&lt;/code&gt; y nuestro componente seguir&amp;aacute; funcionando cuando se deje caer en un proyecto que no tenga jQuery.</target>
        </trans-unit>
        <trans-unit id="f1027ea73a1ce39cead4439ded7f29e2042983a5" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;https://stackoverflow.com/a/14346528/215945&quot;&gt;https://stackoverflow.com/a/14346528/215945&lt;/a&gt;</source>
          <target state="translated">Ver tambi&amp;eacute;n &lt;a href=&quot;https://stackoverflow.com/a/14346528/215945&quot;&gt;https://stackoverflow.com/a/14346528/215945&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5f1430a8f5652e40680c3ddd0c683243bf517e61" translate="yes" xml:space="preserve">
          <source>Semantic HTML vs. Semantic Models</source>
          <target state="translated">HTML sem√°ntico vs.modelos sem√°nticos</target>
        </trans-unit>
        <trans-unit id="53858a8768ea9c3d5fda9320b9574562086e2f5d" translate="yes" xml:space="preserve">
          <source>Separation of concerns</source>
          <target state="translated">Separaci√≥n de las preocupaciones</target>
        </trans-unit>
        <trans-unit id="6db963975c4efe88a2a596e7aed57f9bfc1a010d" translate="yes" xml:space="preserve">
          <source>Separation of concerns (SOC) vs. MVC</source>
          <target state="translated">Separaci√≥n de preocupaciones (SOC)vs.MVC</target>
        </trans-unit>
        <trans-unit id="5bc1e903eb4c935f3459b8bfa4ee30d83efd9017" translate="yes" xml:space="preserve">
          <source>Service Objects vs Helper Functions</source>
          <target state="translated">Objetos de servicio vs.funciones de ayuda</target>
        </trans-unit>
        <trans-unit id="4c836a91846e8f4077393af2f95820c64acdb8ff" translate="yes" xml:space="preserve">
          <source>Service objects are self-contained AngularJS components which we can use and reuse as we see fit. They are simple JSON objects containing functions and Data. They are always singletons, so if you store data on a service in one place, you can get that data out somewhere else just by requesting the same service.</source>
          <target state="translated">Los objetos de servicio son componentes aut√≥nomos de AngularJS que podemos usar y reutilizar como nos parezca.Son simples objetos JSON que contienen funciones y datos.Siempre son singleletons,as√≠ que si almacenas datos sobre un servicio en un lugar,puedes obtener esos datos en otro lugar con s√≥lo solicitar el mismo servicio.</target>
        </trans-unit>
        <trans-unit id="108da03ec5d5f76f957cbf432008dbadf4a072c6" translate="yes" xml:space="preserve">
          <source>Services are simple objects that contain functions and data. They are always singletons, meaning there can never be more than one of them. Say we want to access the Stack Overflow API, we might write a &lt;code&gt;StackOverflowService&lt;/code&gt; which defines methods for doing so.</source>
          <target state="translated">Los servicios son objetos simples que contienen funciones y datos. Siempre son singletons, lo que significa que nunca puede haber m&amp;aacute;s de uno. Supongamos que queremos acceder a la API de desbordamiento de pila, podr&amp;iacute;amos escribir un &lt;code&gt;StackOverflowService&lt;/code&gt; que defina los m&amp;eacute;todos para hacerlo.</target>
        </trans-unit>
        <trans-unit id="bcd9e97fc87fb6d10f4491826f78c5d81839dcbf" translate="yes" xml:space="preserve">
          <source>Similarly, don't start with the idea that jQuery does X, Y, and Z, so I'll just add AngularJS on top of that for models and controllers. This is &lt;em&gt;really&lt;/em&gt; tempting when you're just starting out, which is why I always recommend that new AngularJS developers don't use jQuery at all, at least until they get used to doing things the &quot;Angular Way&quot;.</source>
          <target state="translated">Del mismo modo, no comience con la idea de que jQuery hace X, Y y Z, por lo que solo agregar&amp;eacute; AngularJS adem&amp;aacute;s de eso para modelos y controladores. Esto es &lt;em&gt;realmente&lt;/em&gt; tentador cuando reci&amp;eacute;n est&amp;aacute;s comenzando, por eso siempre recomiendo que los nuevos desarrolladores de AngularJS no usen jQuery en absoluto, al menos hasta que se acostumbren a hacer las cosas de la &quot;manera angular&quot;.</target>
        </trans-unit>
        <trans-unit id="bcedf6e82233838f46efd8ce2fadad3c46a471c6" translate="yes" xml:space="preserve">
          <source>So if directives aren't just collections of jQuery-like functions, what are they? Directives are actually &lt;strong&gt;extensions of HTML&lt;/strong&gt;. If HTML doesn't do something you need it to do, you write a directive to do it for you, and then use it just as if it was part of HTML.</source>
          <target state="translated">Entonces, si las directivas no son solo colecciones de funciones similares a jQuery, &amp;iquest;qu&amp;eacute; son? Las directivas son en realidad &lt;strong&gt;extensiones de HTML&lt;/strong&gt; . Si HTML no hace algo que necesita que haga, escriba una directiva para que lo haga por usted y luego lo use como si fuera parte de HTML.</target>
        </trans-unit>
        <trans-unit id="6120b7aac76e709ec6a4b057e3e50cdedce773bf" translate="yes" xml:space="preserve">
          <source>So then &lt;em&gt;how&lt;/em&gt; do you do that? How do you &quot;think in AngularJS&quot;? Here are some general principles, contrasted with jQuery.</source>
          <target state="translated">Entonces, &lt;em&gt;&amp;iquest;c&amp;oacute;mo&lt;/em&gt; haces eso? &amp;iquest;C&amp;oacute;mo &quot;piensas en AngularJS&quot;? Aqu&amp;iacute; hay algunos principios generales, en contraste con jQuery.</target>
        </trans-unit>
        <trans-unit id="c8363d4dd045c968829900ac07d31222d3fe3f8c" translate="yes" xml:space="preserve">
          <source>So when people say &quot;don't include jQuery at all&quot;, it's mainly because they don't want you to use selectors; they want you to learn to use directives instead. Direct, not select!</source>
          <target state="translated">As√≠ que cuando la gente dice &quot;no incluyas jQuery en absoluto&quot;,es principalmente porque no quieren que uses selectores;quieren que aprendas a usar directivas en su lugar.¬°Dirigir,no seleccionar!</target>
        </trans-unit>
        <trans-unit id="353a803b7edb418ffb01abfd037657963de833b9" translate="yes" xml:space="preserve">
          <source>So, to directly answer your question: AngularJS is -very- opinionated and is a true MV* framework. However, you can still do all of the really cool stuff you know and love with jQuery inside of directives. It's not a matter of &quot;How do I do what I used to in jQuery?&quot; as much as it's a matter of &quot;How do I supplement AngularJS with all of the stuff I used to do in jQuery?&quot;</source>
          <target state="translated">As√≠ que,para responder directamente a su pregunta:AngularJS es -muy opinado y es un verdadero marco de MV*.Sin embargo,todav√≠a puedes hacer todas las cosas realmente geniales que conoces y amas con jQuery dentro de las directivas.No se trata de &quot;¬øC√≥mo hago lo que sol√≠a hacer en jQuery?&quot; sino de &quot;¬øC√≥mo complementaba AngularJS con todas las cosas que sol√≠a hacer en jQuery?&quot;</target>
        </trans-unit>
        <trans-unit id="615e1f97ec6c97206dc36b15588437a9d429a60e" translate="yes" xml:space="preserve">
          <source>Some directives just decorate what's already in the view (think &lt;code&gt;ngClass&lt;/code&gt;) and therefore sometimes do DOM manipulation straight away and then are basically done. But if a directive is like a &quot;widget&quot; and has a template, it should &lt;em&gt;also&lt;/em&gt; respect separation of concerns. That is, the template &lt;em&gt;too&lt;/em&gt; should remain largely independent from its implementation in the link and controller functions.</source>
          <target state="translated">Algunas directivas simplemente decoran lo que ya est&amp;aacute; en la vista (piense en &lt;code&gt;ngClass&lt;/code&gt; ) y, por lo tanto, a veces realizan la manipulaci&amp;oacute;n DOM de inmediato y luego b&amp;aacute;sicamente se hacen. Pero si una directiva es como un &quot;widget&quot; y tiene una plantilla, tambi&amp;eacute;n debe respetar la separaci&amp;oacute;n de preocupaciones. Es decir, la plantilla &lt;em&gt;tambi&amp;eacute;n&lt;/em&gt; debe permanecer en gran medida independiente de su implementaci&amp;oacute;n en las funciones de enlace y controlador.</target>
        </trans-unit>
        <trans-unit id="0b7f180f770b68b78d30a4012dd96f23b513a81e" translate="yes" xml:space="preserve">
          <source>Speaking of testing...</source>
          <target state="translated">Hablando de pruebas...</target>
        </trans-unit>
        <trans-unit id="12b71c3e0fe5f7c0b8d17cc03186e281412da4a8" translate="yes" xml:space="preserve">
          <source>Summary</source>
          <target state="translated">Summary</target>
        </trans-unit>
        <trans-unit id="2c1b6c2453539d082bde5c9bc024f6fe7db931a1" translate="yes" xml:space="preserve">
          <source>Suppose I'm familiar with developing client-side applications in &lt;a href=&quot;http://jquery.com/&quot;&gt;jQuery&lt;/a&gt;, but now I'd like to start using &lt;a href=&quot;http://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt;. Can you describe the paradigm shift that is necessary? Here are a few questions that might help you frame an answer:</source>
          <target state="translated">Supongamos que estoy familiarizado con el desarrollo de aplicaciones del lado del cliente en &lt;a href=&quot;http://jquery.com/&quot;&gt;jQuery&lt;/a&gt; , pero ahora me gustar&amp;iacute;a comenzar a usar &lt;a href=&quot;http://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt; . &amp;iquest;Puedes describir el cambio de paradigma que es necesario? Aqu&amp;iacute; hay algunas preguntas que pueden ayudarlo a formular una respuesta:</target>
        </trans-unit>
        <trans-unit id="fd6f41a20d68ad3b1c1fbfcea42f10e9427c9beb" translate="yes" xml:space="preserve">
          <source>Take the example of a dropdown. When writing a dropdown plugin you might be tempted to code in click handlers, perhaps a function to add in a chevron which is either up or down, perhaps change the class of the unfolded element, show hide the menu, all helpful stuff.</source>
          <target state="translated">Tomemos el ejemplo de un desplegable.Cuando escribes un plugin desplegable puedes estar tentado de codificar en manejadores de clic,tal vez una funci√≥n para a√±adir un chevron que est√© arriba o abajo,tal vez cambiar la clase del elemento desplegado,mostrar ocultar el men√∫,todas cosas √∫tiles.</target>
        </trans-unit>
        <trans-unit id="5f73c389448f9c45c912813ff91624715c6cc34b" translate="yes" xml:space="preserve">
          <source>The JavaScript is in control. The HTML has a completely independent existence. Your HTML remains semantic even without JavaScript. Onclick attributes are very bad practice.</source>
          <target state="translated">El JavaScript est√° en control.El HTML tiene una existencia completamente independiente.Su HTML permanece sem√°ntico incluso sin el JavaScript.Los atributos de Onclick son una muy mala pr√°ctica.</target>
        </trans-unit>
        <trans-unit id="130af66cb629f5431d0392abeadf163c2a137efa" translate="yes" xml:space="preserve">
          <source>The best way to start is going through &lt;a href=&quot;http://docs.angularjs.org/tutorial/&quot;&gt;their awesome tutorial&lt;/a&gt;. You can go through the steps in a couple of hours; however, in case you want to master the concepts behind the scenes, they include a myriad of reference for further reading.</source>
          <target state="translated">La mejor manera de comenzar es a trav&amp;eacute;s de &lt;a href=&quot;http://docs.angularjs.org/tutorial/&quot;&gt;su incre&amp;iacute;ble tutorial&lt;/a&gt; . Puedes seguir los pasos en un par de horas; sin embargo, en caso de que desee dominar los conceptos detr&amp;aacute;s de escena, incluyen una mir&amp;iacute;ada de referencias para lecturas adicionales.</target>
        </trans-unit>
        <trans-unit id="2e204a233be1d37e6b8cbf5eb65012ecf70edcf5" translate="yes" xml:space="preserve">
          <source>The big difference (TLDR)</source>
          <target state="translated">La gran diferencia (TLDR)</target>
        </trans-unit>
        <trans-unit id="907f9bbd858732c7716065c039f6505a1e2910ac" translate="yes" xml:space="preserve">
          <source>The bottom line is this: when solutioning, first &quot;think in AngularJS&quot;; if you can't think of a solution, ask the community; if after all of that there is no easy solution, &lt;em&gt;then&lt;/em&gt; feel free to reach for the jQuery. But don't let jQuery become a crutch or you'll never master AngularJS.</source>
          <target state="translated">La conclusi&amp;oacute;n es esta: al resolver, primero &quot;piense en AngularJS&quot;; si no puede pensar en una soluci&amp;oacute;n, preg&amp;uacute;ntele a la comunidad; si despu&amp;eacute;s de todo eso no hay una soluci&amp;oacute;n f&amp;aacute;cil, no dude en alcanzar jQuery. Pero no dejes que jQuery se convierta en una muleta o nunca dominar&amp;aacute;s AngularJS.</target>
        </trans-unit>
        <trans-unit id="e57a136d72c8717caeadf129317ca6ab40af1abf" translate="yes" xml:space="preserve">
          <source>The main thing to realise is that your template drives your application. Stop trying to write big plugins that do everything. Instead write little directives that do one thing, then write a simple template to wire them together.</source>
          <target state="translated">Lo m√°s importante es que la plantilla impulse la aplicaci√≥n.Deja de intentar escribir grandes plugins que lo hacen todo.En lugar de eso,escriba peque√±as directivas que hagan una cosa,y luego escriba una simple plantilla para unirlas.</target>
        </trans-unit>
        <trans-unit id="962f4b9dcab1b0d6684a689d197c000723b390d9" translate="yes" xml:space="preserve">
          <source>The template drives the application so we get HTML level granularity. If we want to make case by case exceptions, the template makes this easy.</source>
          <target state="translated">La plantilla dirige la aplicaci√≥n para que obtengamos granularidad a nivel HTML.Si queremos hacer excepciones caso por caso,la plantilla lo hace f√°cil.</target>
        </trans-unit>
        <trans-unit id="ab3b37bfaba497ececec74f637723357bb8a14df" translate="yes" xml:space="preserve">
          <source>The template is in the driving seat.</source>
          <target state="translated">La plantilla est√° en el asiento del conductor.</target>
        </trans-unit>
        <trans-unit id="dbd42a737715dc284713f8149c27aef45340aa3e" translate="yes" xml:space="preserve">
          <source>The tendency with jQuery is to write great big plugins like lightbox which we then configure by passing in numerous values and options.</source>
          <target state="translated">La tendencia con jQuery es escribir grandes plugins como lightbox que luego configuramos pasando numerosos valores y opciones.</target>
        </trans-unit>
        <trans-unit id="a78f488c2b28762effe665517b5bb3bf368fa282" translate="yes" xml:space="preserve">
          <source>The view is the &quot;official record&quot;</source>
          <target state="translated">La vista es el &quot;registro oficial&quot;</target>
        </trans-unit>
        <trans-unit id="1c2ed441fd1cd976f573b36eb08871514ae231f0" translate="yes" xml:space="preserve">
          <source>There are a few things wrong with this:</source>
          <target state="translated">Hay algunas cosas que est√°n mal en esto:</target>
        </trans-unit>
        <trans-unit id="a60b215ea4b528f70a3f3f95afa944b9858d76db" translate="yes" xml:space="preserve">
          <source>These two do the same thing, but in the AngularJS version anyone looking at the template knows what's supposed to happen. Whenever a new member of the development team comes on board, she can look at this and then &lt;em&gt;know&lt;/em&gt; that there is a directive called &lt;code&gt;dropdownMenu&lt;/code&gt; operating on it; she doesn't need to intuit the right answer or sift through any code. The view told us what was supposed to happen. Much cleaner.</source>
          <target state="translated">Estos dos hacen lo mismo, pero en la versi&amp;oacute;n AngularJS cualquiera que mire la plantilla sabe lo que se supone que debe suceder. Cada vez que un nuevo miembro del equipo de desarrollo se une, puede ver esto y luego &lt;em&gt;saber&lt;/em&gt; que hay una directiva llamada &lt;code&gt;dropdownMenu&lt;/code&gt; que opera en &amp;eacute;l; ella no necesita intuir la respuesta correcta o examinar cualquier c&amp;oacute;digo. La vista nos dijo lo que se supon&amp;iacute;a que suceder&amp;iacute;a. Mucho m&amp;aacute;s limpio.</target>
        </trans-unit>
        <trans-unit id="5b12bc82675fe1d062a24637098e0b0d6f018bd6" translate="yes" xml:space="preserve">
          <source>They're apples and oranges. You don't want to compare them. They're two different things. AngularJs has already jQuery lite built in which allows you to perform basic DOM manipulation without even including the full blown jQuery version.</source>
          <target state="translated">Son manzanas y naranjas.No quieres compararlas.Son dos cosas diferentes.AngularJs ya tiene jQuery lite incorporado que te permite realizar manipulaci√≥n b√°sica de DOM sin siquiera incluir la versi√≥n completa de jQuery.</target>
        </trans-unit>
        <trans-unit id="56611a6e765ec02b14bdc41b9a14cd86614e07d8" translate="yes" xml:space="preserve">
          <source>Think about how you want to present your models -- your views. Create HTML templates for each view, using the necessary directives to get dynamic databinding.</source>
          <target state="translated">Piensa en c√≥mo quieres presentar a tus modelos...tus puntos de vista.Cree plantillas HTML para cada vista,usando las directivas necesarias para obtener una base de datos din√°mica.</target>
        </trans-unit>
        <trans-unit id="27d048b935d814179e7c6a8517808bc5033c1c1e" translate="yes" xml:space="preserve">
          <source>Think about your models. Create services or your own JavaScript objects for those models.</source>
          <target state="translated">Piensa en tus modelos.Crea servicios o tus propios objetos JavaScript para esos modelos.</target>
        </trans-unit>
        <trans-unit id="c7f6bac1d5607c8628add234dae8dfe943f7ebea" translate="yes" xml:space="preserve">
          <source>Think less about unobtrusive JavaScript, and instead think in terms of HTML extensions.</source>
          <target state="translated">Piensa menos en un JavaScript discreto,y en su lugar piensa en t√©rminos de extensiones HTML.</target>
        </trans-unit>
        <trans-unit id="d9ef4e6d01c706c53e91d508343c6fe29cbd9c16" translate="yes" xml:space="preserve">
          <source>Think of the logger we programmed in section 3. Even if we put that in a directive, we &lt;em&gt;still&lt;/em&gt; want to do it the &quot;Angular Way&quot;. It &lt;em&gt;still&lt;/em&gt; doesn't take any DOM manipulation! There are lots of times when DOM manipulation is necessary, but it's a &lt;em&gt;lot&lt;/em&gt; rarer than you think! Before doing DOM manipulation &lt;em&gt;anywhere&lt;/em&gt; in your application, ask yourself if you really need to. There might be a better way.</source>
          <target state="translated">Piense en el registrador que programamos en la secci&amp;oacute;n 3. Incluso si lo ponemos en una directiva, &lt;em&gt;todav&amp;iacute;a&lt;/em&gt; queremos hacerlo &quot;Angular Way&quot;. &amp;iexcl; &lt;em&gt;Todav&amp;iacute;a&lt;/em&gt; no requiere ninguna manipulaci&amp;oacute;n DOM! Hay muchas ocasiones en que es necesaria la manipulaci&amp;oacute;n DOM, &amp;iexcl;pero es &lt;em&gt;mucho&lt;/em&gt; m&amp;aacute;s raro de lo que piensas! Antes de realizar la manipulaci&amp;oacute;n DOM en &lt;em&gt;cualquier parte&lt;/em&gt; de su aplicaci&amp;oacute;n, preg&amp;uacute;ntese si realmente lo necesita. Puede haber una mejor manera.</target>
        </trans-unit>
        <trans-unit id="59fba0d2a6be76b95e9437f56c0b3eb3aeefa64f" translate="yes" xml:space="preserve">
          <source>Third, even assuming jQuery &lt;em&gt;was&lt;/em&gt; required for this directive to work, jqLite (&lt;code&gt;angular.element&lt;/code&gt;) will &lt;em&gt;always&lt;/em&gt; use jQuery if it was loaded! So we needn't use the &lt;code&gt;$&lt;/code&gt; - we can just use &lt;code&gt;angular.element&lt;/code&gt;.</source>
          <target state="translated">En tercer lugar, incluso suponiendo que &lt;em&gt;se&lt;/em&gt; requiera jQuery para que esta directiva funcione, jqLite ( &lt;code&gt;angular.element&lt;/code&gt; ) &lt;em&gt;siempre&lt;/em&gt; usar&amp;aacute; jQuery si se carg&amp;oacute;. Por lo tanto, no necesitamos usar &lt;code&gt;$&lt;/code&gt; , solo podemos usar &lt;code&gt;angular.element&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e3dd8e8537bb1ca3481ce114c90c34fedaf33ea7" translate="yes" xml:space="preserve">
          <source>This a little messy and a trifle frail. But in AngularJS, we can do this:</source>
          <target state="translated">Esto es un poco desordenado y un poco fr√°gil.Pero en AngularJS,podemos hacer esto:</target>
        </trans-unit>
        <trans-unit id="751b9456fbde65691801d5e0cfad8c4a181a1230" translate="yes" xml:space="preserve">
          <source>This directive can be rewritten (even for very complicated cases!) much more simply like so:</source>
          <target state="translated">Esta directiva puede ser reescrita (¬°incluso para casos muy complicados!)de forma mucho m√°s sencilla:</target>
        </trans-unit>
        <trans-unit id="020626cca70fec4fadcd4c85e19094b67d89900d" translate="yes" xml:space="preserve">
          <source>This is a mistake in AngularJS.</source>
          <target state="translated">Esto es un error en AngularJS.</target>
        </trans-unit>
        <trans-unit id="3ee80553c6d3b6490cc47a8c1b3fc30604995853" translate="yes" xml:space="preserve">
          <source>This is a radical inversion of control that takes some getting used to.</source>
          <target state="translated">Se trata de una inversi√≥n radical de control a la que cuesta acostumbrarse.</target>
        </trans-unit>
        <trans-unit id="468caea94a05f6a1199b09552c745bdaee04f2e1" translate="yes" xml:space="preserve">
          <source>This is by far one of the most awesome features of AngularJS and cuts out a lot of the need to do the kinds of DOM manipulations I mentioned in the previous section. AngularJS will automatically update your view so you don't have to! In jQuery, we respond to events and then update content. Something like:</source>
          <target state="translated">Esta es,con mucho,una de las caracter√≠sticas m√°s impresionantes de AngularJS y elimina la necesidad de hacer el tipo de manipulaciones DOM que mencion√© en la secci√≥n anterior.¬°AngularJS actualizar√° autom√°ticamente tu vista para que no tengas que hacerlo! En jQuery,respondemos a los eventos y luego actualizamos el contenido.Algo as√≠ como:</target>
        </trans-unit>
        <trans-unit id="303ce135543d65882737386396b17832595260ae" translate="yes" xml:space="preserve">
          <source>This is normal, you should push through. Angular is worth it.</source>
          <target state="translated">Esto es normal,deber√≠as empujar a trav√©s.Angular vale la pena.</target>
        </trans-unit>
        <trans-unit id="7b1905aad1d40bfa2426382e15205e07ca50c045" translate="yes" xml:space="preserve">
          <source>This is really part of section 3 on architecture, but it's so important that I'm putting it as its own top-level section.</source>
          <target state="translated">Esto es realmente parte de la secci√≥n 3 sobre arquitectura,pero es tan importante que lo pongo como su propia secci√≥n de nivel superior.</target>
        </trans-unit>
        <trans-unit id="383c8572d2b60f8594b548e872ffb17f8b10ed55" translate="yes" xml:space="preserve">
          <source>This is the clever part. Because the structure of $scope inheritance roughly follows the structure of the DOM, elements have access to their own scope, and any containing scopes seamlessly, all the way up to the global $scope (which is not the same as the global scope).</source>
          <target state="translated">Esta es la parte inteligente.Debido a que la estructura de la herencia de $scope sigue aproximadamente la estructura del DOM,los elementos tienen acceso a su propio alcance,y a cualquier otro que contenga alcances sin problemas,hasta el $scope global (que no es lo mismo que el alcance global).</target>
        </trans-unit>
        <trans-unit id="f3085b36e84f35d5704fcffc8d2903ab4191c80b" translate="yes" xml:space="preserve">
          <source>This is the first big difference. To jQuery, your web page is a DOM to be manipulated. To AngularJS, your HTML is code to be compiled. AngularJS reads in your whole web page and literally compiles it into a new web page using its built in compiler.</source>
          <target state="translated">Esta es la primera gran diferencia.Para jQuery,su p√°gina web es un DOM para ser manipulado.Para AngularJS,tu HTML es un c√≥digo a ser compilado.AngularJS lee toda tu p√°gina web y literalmente la compila en una nueva p√°gina web usando su compilador incorporado.</target>
        </trans-unit>
        <trans-unit id="1ad2248d3589183cfe2efd76e3ed9a33f9b96543" translate="yes" xml:space="preserve">
          <source>This makes it much easier to pass data around, and to store data at an appropriate level. If a dropdown is unfolded, only the dropdown $scope needs to know about it. If the user updates their preferences, you might want to update the global $scope, and any nested scopes listening to the user preferences would automatically be alerted.</source>
          <target state="translated">Esto facilita mucho la transmisi√≥n de datos y el almacenamiento de datos a un nivel apropiado.Si se despliega un desplegable,s√≥lo el desplegable $scope necesita saberlo.Si el usuario actualiza sus preferencias,es posible que desee actualizar el $scope global,y cualquier alcance anidado que escuche las preferencias del usuario ser√° alertado autom√°ticamente.</target>
        </trans-unit>
        <trans-unit id="a8a3cb7a0749fede326fb94b0ea02af49e57374b" translate="yes" xml:space="preserve">
          <source>This makes wiring things together very easy, and pretty much eliminates any tendency towards spagettification. We have a flat list of components, and AngularJS hands them to us one by one as and when we need them.</source>
          <target state="translated">Esto hace que el cableado de las cosas sea muy f√°cil,y pr√°cticamente elimina cualquier tendencia a la espaguetizaci√≥n.Tenemos una lista plana de componentes,y AngularJS nos los entrega uno por uno cuando los necesitamos.</target>
        </trans-unit>
        <trans-unit id="01c6c85a35ab8aa0b42467c4fd5ea8262061e009" translate="yes" xml:space="preserve">
          <source>This might sound complicated, in fact, once you relax into it, it's like flying. You don't need to create the $scope object, AngularJS instantiates and configures it for you, correctly and appropriately based on your template hierarchy. AngularJS then makes it available to your component using the magic of dependency injection (more on this later).</source>
          <target state="translated">Esto puede sonar complicado,de hecho,una vez que te relajas en √©l,es como volar.No necesitas crear el objeto $scope,AngularJS lo instanciar√° y configurar√° por ti,correcta y apropiadamente basado en tu jerarqu√≠a de plantillas.AngularJS entonces lo pone a disposici√≥n de su componente usando la magia de la inyecci√≥n de dependencia (m√°s sobre esto m√°s adelante).</target>
        </trans-unit>
        <trans-unit id="026686ca92306b82d1e8c15693deeebfe16be490" translate="yes" xml:space="preserve">
          <source>Those are some very nice, but lengthy answers.</source>
          <target state="translated">Esas son algunas respuestas muy bonitas,pero largas.</target>
        </trans-unit>
        <trans-unit id="b3d3c648ebb51538f239af45aaff5bf2a9ed2172" translate="yes" xml:space="preserve">
          <source>Though I didn't show it here, the data binding is two-way. So those log messages could also be editable in the view just by doing this: &lt;code&gt;&amp;lt;input ng-model=&quot;entry.msg&quot; /&amp;gt;&lt;/code&gt;. And there was much rejoicing.</source>
          <target state="translated">Aunque no lo mostr&amp;eacute; aqu&amp;iacute;, el enlace de datos es bidireccional. Entonces, esos mensajes de registro tambi&amp;eacute;n podr&amp;iacute;an ser editables en la vista simplemente haciendo esto: &lt;code&gt;&amp;lt;input ng-model=&quot;entry.msg&quot; /&amp;gt;&lt;/code&gt; . Y hubo mucho regocijo.</target>
        </trans-unit>
        <trans-unit id="ea44fd1157e8b164de6f12bfc47356be4ca15c22" translate="yes" xml:space="preserve">
          <source>To answer this question, I want to share my experience on the first enterprise application with AngularJS. These are the most awesome features that Angular provide where we start changing our jQuery mindset and we get the Angular like a framework and not the library.</source>
          <target state="translated">Para responder a esta pregunta,quiero compartir mi experiencia en la primera aplicaci√≥n empresarial con AngularJS.Estas son las caracter√≠sticas m√°s impresionantes que Angular proporciona donde empezamos a cambiar nuestra mentalidad de jQuery y obtenemos el Angular como un marco de trabajo y no la biblioteca.</target>
        </trans-unit>
        <trans-unit id="d960bde17bc0fc487713623ef832bfbb6216643e" translate="yes" xml:space="preserve">
          <source>To describe the &quot;paradigm shift&quot;, I think a short answer can suffice.</source>
          <target state="translated">Para describir el &quot;cambio de paradigma&quot;,creo que una respuesta corta puede ser suficiente.</target>
        </trans-unit>
        <trans-unit id="74c492c9268c2ba44b4ae9400fc50533ad33c007" translate="yes" xml:space="preserve">
          <source>To help us out with separation of concerns is &lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;dependency injection&lt;/a&gt; (DI). If you come from a server-side language (from &lt;a href=&quot;http://en.wikipedia.org/wiki/Java_%28programming_language%29&quot;&gt;Java&lt;/a&gt; to &lt;a href=&quot;http://en.wikipedia.org/wiki/PHP&quot;&gt;PHP&lt;/a&gt;) you're probably familiar with this concept already, but if you're a client-side guy coming from jQuery, this concept can seem anything from silly to superfluous to hipster. But it's not. :-)</source>
          <target state="translated">Para ayudarnos con la separaci&amp;oacute;n de preocupaciones es &lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;la inyecci&amp;oacute;n de dependencia&lt;/a&gt; (DI). Si vienes de un lenguaje del lado del servidor (de &lt;a href=&quot;http://en.wikipedia.org/wiki/Java_%28programming_language%29&quot;&gt;Java&lt;/a&gt; a &lt;a href=&quot;http://en.wikipedia.org/wiki/PHP&quot;&gt;PHP&lt;/a&gt; ) probablemente ya est&amp;eacute;s familiarizado con este concepto, pero si eres un chico del lado del cliente que viene de jQuery, este concepto puede parecer desde tonto hasta superfluo o hipster . Pero no lo es. :-)</target>
        </trans-unit>
        <trans-unit id="57c4a51d2a57fb7332a311ca65fbda307945a043" translate="yes" xml:space="preserve">
          <source>To put in another way, in jQuery, you need to think about CSS selectors, that is, where is the &lt;code&gt;div&lt;/code&gt; or &lt;code&gt;td&lt;/code&gt; that has a class or attribute, etc., so that I can get their HTML or color or value, but in AngularJS, you will find yourself thinking like this: what model am I dealing with, I will set the model's value to true. You are not bothering yourself of whether the view reflecting this value is a checked box or resides in a &lt;code&gt;td&lt;/code&gt; element (details you would have often needed to think about in jQuery).</source>
          <target state="translated">Para decirlo de otra manera, en jQuery, debe pensar en los selectores CSS, es decir, d&amp;oacute;nde est&amp;aacute; el &lt;code&gt;div&lt;/code&gt; o &lt;code&gt;td&lt;/code&gt; que tiene una clase o atributo, etc., para que pueda obtener su HTML o color o valor, pero en AngularJS, se encontrar&amp;aacute; pensando as&amp;iacute;: con qu&amp;eacute; modelo estoy tratando, establecer&amp;eacute; el valor del modelo en verdadero. No se molesta en si la vista que refleja este valor es una casilla marcada o reside en un elemento &lt;code&gt;td&lt;/code&gt; (detalles que a menudo habr&amp;iacute;a tenido que pensar en jQuery).</target>
        </trans-unit>
        <trans-unit id="f4709eee581374c200f042fc55313a1c370597e0" translate="yes" xml:space="preserve">
          <source>To sum up</source>
          <target state="translated">Para resumir</target>
        </trans-unit>
        <trans-unit id="836dd86d4b838ebe7598bd4b4cf3a469296eba00" translate="yes" xml:space="preserve">
          <source>To sum up my experiences:</source>
          <target state="translated">Para resumir mis experiencias:</target>
        </trans-unit>
        <trans-unit id="ce1ba8a1eb8df452a4296dfeb3f52aabce22bb11" translate="yes" xml:space="preserve">
          <source>Unobtrusive JavaScript with Selectors vs. Declarative Templates</source>
          <target state="translated">Javascript discreto con selectores vs.plantillas declarativas</target>
        </trans-unit>
        <trans-unit id="7dbc3550a5fc4912024fa7d8d15ebd8dac9e9fc3" translate="yes" xml:space="preserve">
          <source>Until you start to use this, it's hard to explain just what a massive time boon this is. Nothing like AngularJS DI exists inside jQuery.</source>
          <target state="translated">Hasta que no empieces a usar esto,es dif√≠cil explicar la enorme ventaja temporal que supone.No existe nada como AngularJS DI dentro de jQuery.</target>
        </trans-unit>
        <trans-unit id="955f8bb419dd7b30b67b29f047877ec5da2bfed5" translate="yes" xml:space="preserve">
          <source>Until you want to make a small change.</source>
          <target state="translated">Hasta que quieras hacer un peque√±o cambio.</target>
        </trans-unit>
        <trans-unit id="03fc4791bb56c36c6c9fce6cb595b363618e13c3" translate="yes" xml:space="preserve">
          <source>View - Your views are written in HTML. The view is usually not semantic because your data lives in the model.</source>
          <target state="translated">Vista-Sus vistas est√°n escritas en HTML.La vista no suele ser sem√°ntica porque tus datos viven en el modelo.</target>
        </trans-unit>
        <trans-unit id="5a862f238c06fc71828a9a25732468b79fbb1861" translate="yes" xml:space="preserve">
          <source>What is the biggest difference? What should I stop doing/using; what should I start doing/using instead?</source>
          <target state="translated">¬øCu√°l es la mayor diferencia? ¬øQu√© deber√≠a dejar de consumir,qu√© deber√≠a empezar a consumir en su lugar?</target>
        </trans-unit>
        <trans-unit id="0170226ebb8fd23c58004be3a692707980e1d490" translate="yes" xml:space="preserve">
          <source>What should I stop doing/using; What should I start doing/using instead?</source>
          <target state="translated">¬øQu√© deber√≠a dejar de consumir? ¬øQu√© deber√≠a empezar a consumir en su lugar?</target>
        </trans-unit>
        <trans-unit id="6e7344707e452d84d6745b34070d9c7734587cd4" translate="yes" xml:space="preserve">
          <source>What this means is that AngularJS reads your entire DOM from top to bottom and treats it as code, literally as instructions to the compiler. As it traverses the DOM, It looks for specific &lt;strong&gt;directives&lt;/strong&gt; (compiler directives) that tell the AngularJS compiler how to behave and what to do. Directives are little objects full of JavaScript which can match against attributes, tags, classes or even comments.</source>
          <target state="translated">Lo que esto significa es que AngularJS lee todo su DOM de arriba a abajo y lo trata como c&amp;oacute;digo, literalmente como instrucciones para el compilador. A medida que atraviesa el DOM, busca &lt;strong&gt;directivas&lt;/strong&gt; espec&amp;iacute;ficas ( &lt;strong&gt;directivas del&lt;/strong&gt; compilador) que le dicen al compilador AngularJS c&amp;oacute;mo comportarse y qu&amp;eacute; hacer. Las directivas son peque&amp;ntilde;os objetos llenos de JavaScript que pueden coincidir con atributos, etiquetas, clases o incluso comentarios.</target>
        </trans-unit>
        <trans-unit id="065885e8affa9b9b626e5ee7819e4774e1e660cf" translate="yes" xml:space="preserve">
          <source>When the Angular compiler determines that a piece of the DOM matches a particular directive, it calls the directive function, passing it the DOM element, any attributes, the current $scope (which is a local variable store), and some other useful bits. These attributes may contain expressions which can be interpreted by the Directive, and which tell it how to render, and when it should redraw itself.</source>
          <target state="translated">Cuando el compilador Angular determina que una parte del DOM coincide con una directiva particular,llama a la funci√≥n directiva,pas√°ndole el elemento DOM,cualquier atributo,el $scope actual (que es un almac√©n de variables locales),y algunos otros bits √∫tiles.Estos atributos pueden contener expresiones que pueden ser interpretadas por la directiva,y que le dicen c√≥mo rendir,y cu√°ndo debe redibujarse.</target>
        </trans-unit>
        <trans-unit id="b1f85922f7e91e37e11942af0d06bbc55d4f2b85" translate="yes" xml:space="preserve">
          <source>When we just look at the view, it's not immediately obvious that there is any functionality here. For small applications, that's fine. But for non-trivial applications, things quickly get confusing and hard to maintain.</source>
          <target state="translated">Cuando miramos la vista,no es inmediatamente obvio que haya alguna funcionalidad aqu√≠.Para aplicaciones peque√±as,est√° bien.Pero para aplicaciones no triviales,las cosas se vuelven r√°pidamente confusas y dif√≠ciles de mantener.</target>
        </trans-unit>
        <trans-unit id="f1562ae865a8c76b7015478b8cdbdfe3f9de7697" translate="yes" xml:space="preserve">
          <source>When you first see this you might be tempted to write AngularJS off as old school intrusive JavaScript (like I did at first). In fact, AngularJS does not play by those rules. In AngularJS, your HTML5 is a template. It is compiled by AngularJS to produce your web page.</source>
          <target state="translated">Cuando veas esto por primera vez,podr√≠as estar tentado de escribir AngularJS como un JavaScript intrusivo de la vieja escuela (como lo hice yo al principio).De hecho,AngularJS no juega con esas reglas.En AngularJS,tu HTML5 es una plantilla.Es compilado por AngularJS para producir su p√°gina web.</target>
        </trans-unit>
        <trans-unit id="7f3d35681fa2c63c5104c34b879516df9d536a1b" translate="yes" xml:space="preserve">
          <source>With &lt;strong&gt;jQuery&lt;/strong&gt; you tell the DOM what needs to happen, step by step. With &lt;strong&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/AngularJS&quot;&gt;AngularJS&lt;/a&gt;&lt;/strong&gt; you describe what results you want but not how to do it. More on this &lt;a href=&quot;https://stackoverflow.com/questions/1784664/what-is-the-difference-between-declarative-and-imperative-programming&quot;&gt;here&lt;/a&gt;. Also, check out Mark Rajcok's answer.</source>
          <target state="translated">Con &lt;strong&gt;jQuery&lt;/strong&gt; le dices al DOM lo que debe suceder, paso a paso. Con &lt;strong&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/AngularJS&quot;&gt;AngularJS,&lt;/a&gt;&lt;/strong&gt; usted describe qu&amp;eacute; resultados desea pero no c&amp;oacute;mo hacerlo. M&amp;aacute;s sobre esto &lt;a href=&quot;https://stackoverflow.com/questions/1784664/what-is-the-difference-between-declarative-and-imperative-programming&quot;&gt;aqu&amp;iacute;&lt;/a&gt; . Adem&amp;aacute;s, mira la respuesta de Mark Rajcok.</target>
        </trans-unit>
        <trans-unit id="fc839325c446b08cf5a65d8819d89d6bb3164e33" translate="yes" xml:space="preserve">
          <source>With AngularJS you have your model (JavaScript objects you are already used to) and the value of the model tells you about the model (obviously) and about the view, and an operation on the model automatically propagates to the view, so you don't have to think about it. You will find yourself in AngularJS no longer finding things in the DOM.</source>
          <target state="translated">Con AngularJS tienes tu modelo (objetos de JavaScript a los que ya est√°s acostumbrado)y el valor del modelo te dice sobre el modelo (obviamente)y sobre la vista,y una operaci√≥n en el modelo se propaga autom√°ticamente a la vista,as√≠ que no tienes que pensar en ello.Te encontrar√°s en AngularJS no encontrando ya cosas en el DOM.</target>
        </trans-unit>
        <trans-unit id="4652c10e282176714fe41ae1e85eb5402efa7939" translate="yes" xml:space="preserve">
          <source>With jQuery your HTML page should contain semantic meaningful content. If the JavaScript is turned off (by a user or search engine) your content remains accessible.</source>
          <target state="translated">Con jQuery tu p√°gina HTML debe contener contenido sem√°ntico significativo.Si el JavaScript est√° desactivado (por un usuario o un motor de b√∫squeda)tu contenido permanece accesible.</target>
        </trans-unit>
        <trans-unit id="ca1706ec5fb5ac78f5fde18c0d8566fbe135cc3c" translate="yes" xml:space="preserve">
          <source>You can do a lot with jQuery without knowing about how JavaScript prototypal inheritance works. When developing AngularJS applications, you will avoid some common pitfalls if you have a good understanding of JavaScript inheritance. Recommended reading: &lt;a href=&quot;https://stackoverflow.com/questions/14049480/what-are-the-nuances-of-scope-prototypal-prototypical-inheritance-in-angularjs&quot;&gt;What are the nuances of scope prototypal / prototypical inheritance in AngularJS?&lt;/a&gt;</source>
          <target state="translated">Puede hacer mucho con jQuery sin saber c&amp;oacute;mo funciona la herencia de prototipos de JavaScript. Al desarrollar aplicaciones de AngularJS, evitar&amp;aacute; algunas trampas comunes si conoce bien la herencia de JavaScript. Lectura recomendada: &lt;a href=&quot;https://stackoverflow.com/questions/14049480/what-are-the-nuances-of-scope-prototypal-prototypical-inheritance-in-angularjs&quot;&gt;&amp;iquest;Cu&amp;aacute;les son los matices del alcance prototipo / herencia protot&amp;iacute;pica en AngularJS?&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d3bccb18f2df39489cf9c94bdc521ad8c56f6483" translate="yes" xml:space="preserve">
          <source>You get simple code reuse, if you want to write another application based on Flickr, you can just include the Flickr module and voila, you have access to all your Flickr related functions in your new application.</source>
          <target state="translated">Obtienes una simple reutilizaci√≥n de c√≥digo,si quieres escribir otra aplicaci√≥n basada en Flickr,s√≥lo tienes que incluir el m√≥dulo de Flickr y voila,tienes acceso a todas tus funciones relacionadas con Flickr en tu nueva aplicaci√≥n.</target>
        </trans-unit>
        <trans-unit id="07a633bd9c67d80494b78137069dcf9bff6f8d9c" translate="yes" xml:space="preserve">
          <source>You may use it on existing applications where you are already using pure jQuery. However, if you want to fully take advantage of the AngularJS features you may consider coding the server side using a &lt;a href=&quot;http://en.wikipedia.org/wiki/Representational_state_transfer#RESTful_web_services&quot;&gt;RESTful&lt;/a&gt; approach.</source>
          <target state="translated">Puede usarlo en aplicaciones existentes donde ya est&amp;aacute; usando jQuery puro. Sin embargo, si desea aprovechar al m&amp;aacute;ximo las caracter&amp;iacute;sticas de AngularJS, puede considerar codificar el lado del servidor utilizando un enfoque &lt;a href=&quot;http://en.wikipedia.org/wiki/Representational_state_transfer#RESTful_web_services&quot;&gt;RESTful&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="93e48c750ccd396d3473070f7e54269ec34e6751" translate="yes" xml:space="preserve">
          <source>You'll often hear &quot;only do DOM manipulation in a directive&quot;. &lt;strong&gt;This is a necessity.&lt;/strong&gt; Treat it with due deference!</source>
          <target state="translated">A menudo escuchar&amp;aacute; &quot;solo manipula DOM en una directiva&quot;. &lt;strong&gt;Esto es una necesidad&lt;/strong&gt; &amp;iexcl;Tr&amp;aacute;telo con la debida deferencia!</target>
        </trans-unit>
        <trans-unit id="e9d5a9c89b6ee27e430aeadc83c97fafeb311b2e" translate="yes" xml:space="preserve">
          <source>Your template drives your application. It's treated as a &lt;a href=&quot;http://en.wikipedia.org/wiki/Domain-specific_language&quot;&gt;DSL&lt;/a&gt;. You write AngularJS components, and AngularJS will take care of pulling them in and making them available at the right time based on the structure of your template. This is very different to a standard &lt;a href=&quot;http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller&quot;&gt;MVC&lt;/a&gt; pattern, where the template is just for output.</source>
          <target state="translated">Su plantilla impulsa su aplicaci&amp;oacute;n. Se trata como un &lt;a href=&quot;http://en.wikipedia.org/wiki/Domain-specific_language&quot;&gt;DSL&lt;/a&gt; . Usted escribe los componentes de AngularJS, y AngularJS se encargar&amp;aacute; de incorporarlos y ponerlos a su disposici&amp;oacute;n en el momento adecuado seg&amp;uacute;n la estructura de su plantilla. Esto es muy diferente a un patr&amp;oacute;n &lt;a href=&quot;http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller&quot;&gt;MVC&lt;/a&gt; est&amp;aacute;ndar, donde la plantilla es solo para salida.</target>
        </trans-unit>
        <trans-unit id="f63336c8b68dbd54d77ba260a5e6c9141be9ff84" translate="yes" xml:space="preserve">
          <source>Your template should be declarative; its meaning should be clear simply by reading it. We use custom attributes with meaningful names. We make up new HTML elements, again with meaningful names. A designer with minimal HTML knowledge and no coding skill can read your AngularJS template and understand what it is doing. He or she can make modifications. &lt;em&gt;This is the Angular way.&lt;/em&gt;</source>
          <target state="translated">Su plantilla debe ser declarativa; su significado debe quedar claro simplemente al leerlo. Utilizamos atributos personalizados con nombres significativos. Creamos nuevos elementos HTML, nuevamente con nombres significativos. Un dise&amp;ntilde;ador con un conocimiento m&amp;iacute;nimo de HTML y sin habilidad de codificaci&amp;oacute;n puede leer su plantilla AngularJS y comprender lo que est&amp;aacute; haciendo. &amp;Eacute;l o ella pueden hacer modificaciones. &lt;em&gt;Este es el camino angular.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5bdf7e60e32dde216fb6e902f1792e6d04b0b4e9" translate="yes" xml:space="preserve">
          <source>and there is one more thing, that's the directive. It's an attribute  you can attach to any DOM element and you can go nuts with jQuery within it without worrying about your jQuery ever conflicts with AngularJs components or messes up with its architecture.</source>
          <target state="translated">y hay una cosa m√°s,esa es la directiva.Es un atributo que puedes adjuntar a cualquier elemento DOM y puedes volverte loco con jQuery dentro de √©l sin preocuparte de que tu jQuery entre en conflicto con los componentes de AngularJs o se confunda con su arquitectura.</target>
        </trans-unit>
        <trans-unit id="00853d73f19844948fadbc48d500f997c46f7ee4" translate="yes" xml:space="preserve">
          <source>jQuery</source>
          <target state="translated">jQuery</target>
        </trans-unit>
        <trans-unit id="be925b4f423bcada24aaecc3aafd5c04280ae11d" translate="yes" xml:space="preserve">
          <source>jQuery employs &lt;a href=&quot;http://en.wikipedia.org/wiki/Unobtrusive_JavaScript&quot;&gt;unobtrusive JavaScript&lt;/a&gt; - behavior (JavaScript) is separated from the structure (HTML).</source>
          <target state="translated">jQuery emplea &lt;a href=&quot;http://en.wikipedia.org/wiki/Unobtrusive_JavaScript&quot;&gt;JavaScript discreto&lt;/a&gt; : el comportamiento (JavaScript) est&amp;aacute; separado de la estructura (HTML).</target>
        </trans-unit>
        <trans-unit id="c320142ede798313f44c3d11d76a83ae93eda792" translate="yes" xml:space="preserve">
          <source>jQuery gives you a toolkit for selecting arbitrary bits of the DOM and making ad-hoc changes to them. You can do pretty much anything you like piece by piece.</source>
          <target state="translated">jQuery te da un juego de herramientas para seleccionar los bits arbitrarios del DOM y hacer cambios ad-hoc en ellos.Puedes hacer casi todo lo que quieras pieza por pieza.</target>
        </trans-unit>
        <trans-unit id="a9491d0d475183db24d559659151458a8832e918" translate="yes" xml:space="preserve">
          <source>jQuery is a DOM manipulation library.</source>
          <target state="translated">jQuery es una biblioteca de manipulaci√≥n de DOM.</target>
        </trans-unit>
        <trans-unit id="dc5ccb5632110fdd3b6daae0577b2656f4f69591" translate="yes" xml:space="preserve">
          <source>jQuery is a way to make programming JavaScript in the browser easier. Shorter, cross-browser commands, etc.</source>
          <target state="translated">jQuery es una forma de hacer m√°s f√°cil la programaci√≥n de JavaScript en el navegador.Comandos m√°s cortos,cruzados en el navegador,etc.</target>
        </trans-unit>
        <trans-unit id="18f057b6ceb40d6c2c4a68a9d1752b11d2e478bc" translate="yes" xml:space="preserve">
          <source>jQuery is all about DOM manipulation. It solves all the cross browser pain otherwise you will have to deal with but it's not a framework that allows you to divide your app into components like AngularJS.</source>
          <target state="translated">jQuery es todo sobre la manipulaci√≥n de DOM.Resuelve todos los dolores del navegador,de lo contrario tendr√°s que lidiar con ellos,pero no es un marco de trabajo que te permita dividir tu aplicaci√≥n en componentes como AngularJS.</target>
        </trans-unit>
        <trans-unit id="b8a1fbe4c24f3cd32559fc40d013cf05b48575a8" translate="yes" xml:space="preserve">
          <source>jQuery is typically applied unobtrusively. Your JavaScript code is linked in the header (or the footer), and this is the only place it is mentioned. We use selectors to pick out bits of the page and write plugins to modify those parts.</source>
          <target state="translated">jQuery se aplica t√≠picamente de forma discreta.Su c√≥digo JavaScript est√° enlazado en el encabezado (o en el pie de p√°gina),y este es el √∫nico lugar donde se menciona.Usamos selectores para escoger partes de la p√°gina y escribimos plugins para modificar esas partes.</target>
        </trans-unit>
        <trans-unit id="970e2a9590ad405940e9e253b4e0d66959d31936" translate="yes" xml:space="preserve">
          <source>jQuery makes ridiculously long JavaScript commands like &lt;code&gt;getElementByHerpDerp&lt;/code&gt; shorter and cross-browser.</source>
          <target state="translated">jQuery hace que los comandos de JavaScript sean rid&amp;iacute;culamente largos, como &lt;code&gt;getElementByHerpDerp&lt;/code&gt; , m&amp;aacute;s cortos y cruzados.</target>
        </trans-unit>
        <trans-unit id="c7b8d7c0d6361934bbf52868690dfdb5012d95ae" translate="yes" xml:space="preserve">
          <source>jQuery says very little about how you should organise your code. AngularJS has opinions.</source>
          <target state="translated">jQuery dice muy poco sobre c√≥mo deber√≠as organizar tu c√≥digo.AngularJS tiene opiniones.</target>
        </trans-unit>
        <trans-unit id="34f8968c02f9b2effb99adc9f1eadb7ef80c5c90" translate="yes" xml:space="preserve">
          <source>jQuery: you think a lot about 'QUERYing the &lt;a href=&quot;http://en.wikipedia.org/wiki/Document_Object_Model&quot;&gt;DOM&lt;/a&gt;' for DOM elements and doing something.</source>
          <target state="translated">jQuery: piensas mucho en 'CONSULTAR el &lt;a href=&quot;http://en.wikipedia.org/wiki/Document_Object_Model&quot;&gt;DOM&lt;/a&gt; ' para elementos DOM y hacer algo.</target>
        </trans-unit>
        <trans-unit id="5ba0c567dacd0527890e40d7b7790df6aec5ca39" translate="yes" xml:space="preserve">
          <source>w00t!</source>
          <target state="translated">w00t!</target>
        </trans-unit>
        <trans-unit id="c546eb5a1fdcd9672da789e9684f30280d159a04" translate="yes" xml:space="preserve">
          <source>will output the user name in a paragraph. It's a live binding, so if the &lt;code&gt;$scope.user.name&lt;/code&gt; value is updated, the template will update too.</source>
          <target state="translated">mostrar&amp;aacute; el nombre de usuario en un p&amp;aacute;rrafo. Es un enlace en vivo, por lo que si se actualiza el valor de &lt;code&gt;$scope.user.name&lt;/code&gt; , la plantilla tambi&amp;eacute;n se actualizar&amp;aacute;.</target>
        </trans-unit>
        <trans-unit id="cbda61a42cf4628d5b234a95997da65ed8079da7" translate="yes" xml:space="preserve">
          <source>‚ÄúThinking in AngularJS‚Äù if I have a jQuery background</source>
          <target state="translated">&quot;Pensando en AngularJS&quot; si tengo un fondo de jQuery</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
