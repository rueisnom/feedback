<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://stackoverflow.com/questions/14038589">
    <body>
      <group id="14038589">
        <trans-unit id="3a74eb93d78e79284b38911d99d1ff71ac7ee8ab" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/eyalroz/cuda-api-wrappers&quot;&gt;&lt;strong&gt;Thin Modern-C++ wrappers for the CUDA Runtime API library&lt;/strong&gt;&lt;/a&gt; (Github)</source>
          <target state="translated">&lt;a href=&quot;https://github.com/eyalroz/cuda-api-wrappers&quot;&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;CUDA Runtime API 라이브러리&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (Github)를&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 위한 Thin Modern-C ++ 래퍼&lt;/font&gt;&lt;/strong&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e37160bbb537d25c3139f9591c1737b868ccb158" translate="yes" xml:space="preserve">
          <source>A client of &lt;code&gt;some_function&lt;/code&gt; can distinguish CUDA errors from other kinds of errors if desired:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;some_function&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 의 클라이언트는 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;원하는 경우 CUDA 오류를 다른 종류의 오류와 구별 할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9baf773579a487ed942d03017f6ff2bef3b35b64" translate="yes" xml:space="preserve">
          <source>A few links to how CUDA errors are automagically checked with these wrappers:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 래퍼로 CUDA 오류를 자동으로 확인하는 방법에 대한 몇 가지 링크 :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2a67284a307daab864e9997be377e0db1f4b5754" translate="yes" xml:space="preserve">
          <source>A second related question is how to check for errors in kernel launches, which can't be directly wrapped in a macro call like standard runtime API calls. For kernels, something like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;두 번째 관련 질문은 표준 런타임 API 호출과 같은 매크로 호출로 직접 래핑 할 수없는 커널 실행 오류를 확인하는 방법입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;커널의 경우 다음과 같습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c0cc18f1ec8aab1f7eb1990fe3cc9ca3b55458f3" translate="yes" xml:space="preserve">
          <source>A test program throwing and catching a bunch of exceptions</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;많은 예외를 던지고 잡는 테스트 프로그램&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bd9c83b7ff60ef6bdac16526d08b37f2088c2639" translate="yes" xml:space="preserve">
          <source>Again - all potential errors are checked and reported via a thrown exception. This code uses my</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다시 말하지만 모든 잠재적 오류는 예외를 통해 확인 및보고됩니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 코드는 내&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8a403285307dd8d9bee61acf40f0b737df17d010" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;thrust::system_error&lt;/code&gt; is a &lt;code&gt;std::runtime_error&lt;/code&gt;, we can alternatively handle it in the same manner of a broad class of errors if we don't require the precision of the previous example:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;때문에 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;thrust::system_error&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; A는 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::runtime_error&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 우리가 이전 예제의 정밀도를 필요로하지 않는 경우에, 우리는 양자 택일 오류의 다양한 클래스의 동일한 방식으로 처리 할 수 :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cc48186a49de9f93558a523f440822d8914a6182" translate="yes" xml:space="preserve">
          <source>Documentation for the error-related functionality</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;오류 관련 기능에 대한 설명서&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7bdcb86b12def8b476ed216091d19d6a2f3f82ff" translate="yes" xml:space="preserve">
          <source>Here's a reasonably terse way to do that by throwing a C++ exception derived from &lt;code&gt;std::runtime_error&lt;/code&gt; using &lt;code&gt;thrust::system_error&lt;/code&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다음은 &lt;/font&gt; &lt;code&gt;thrust::system_error&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; 사용하여 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::runtime_error&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 에서 파생 된 C ++ 예외를 발생 시켜서 합리적으로 간결한 방법입니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d447e5512516fd33d90a1544b452cdcf17fe5a66" translate="yes" xml:space="preserve">
          <source>I used to be irked by this problem; and I used to have a macro-cum-wrapper-function solution just like in Talonmies and Jared's answers, but, honestly? It makes using the CUDA Runtime API even more ugly and C-like.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;나는이 문제에 짜증이났다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Talonmies와 Jared의 답변과 마찬가지로 매크로 쿰 래퍼 기능 솔루션을 사용했지만 솔직히 말했습니까? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;CUDA Runtime API를 훨씬 추악하고 C와 비슷하게 사용합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e9e7cef7e8f8897ec9fe6e6cd0cfde9f3b14b6d2" translate="yes" xml:space="preserve">
          <source>If there is an error in a call, a textual message describing the error and the file and line in your code where the error occurred will be emitted to &lt;code&gt;stderr&lt;/code&gt; and the application will exit. You could conceivably modify &lt;code&gt;gpuAssert&lt;/code&gt; to raise an exception rather than call &lt;code&gt;exit()&lt;/code&gt; in a more sophisticated application if it were required.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;호출에 오류가있는 경우 오류를 설명하는 텍스트 메시지와 오류가 발생한 코드의 파일 및 행이 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;stderr&lt;/code&gt; 로 생성&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 되고 응용 프로그램이 종료됩니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;필요한 경우 좀 더 복잡한 응용 프로그램에서 &lt;/font&gt; &lt;code&gt;exit()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;호출하는 대신 예외를 발생 시키도록 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;gpuAssert&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;수정할 수 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;있습니다.&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="003c5cc74a6e46c5b431fd52eb329de392ad31ff" translate="yes" xml:space="preserve">
          <source>Looking through the answers and comments on CUDA questions, and in the &lt;a href=&quot;https://stackoverflow.com/tags/cuda/info&quot;&gt;CUDA tag wiki&lt;/a&gt;, I see it is often suggested that the return status of every API call should checked for errors. The API documentation contains functions like &lt;code&gt;cudaGetLastError&lt;/code&gt;, &lt;code&gt;cudaPeekAtLastError&lt;/code&gt;, and &lt;code&gt;cudaGetErrorString&lt;/code&gt;, but what is the best way to put these together to reliably catch and report errors without requiring lots of extra code?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;CUDA 질문에 대한 답변과 의견과 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/tags/cuda/info&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;CUDA 태그 위키&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 에서 모든 API 호출의 반환 상태에 오류가 있는지 확인하는 것이 좋습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;API 문서에는 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;cudaGetLastError&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;cudaPeekAtLastError&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 및 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;cudaGetErrorString&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 과 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;같은 함수가 포함되어 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;있지만 추가 코드를 많이 요구하지 않고 오류를 안정적으로 잡아보고보고하는 가장 좋은 방법은 무엇입니까?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1ea6d40fcd6ed3ec4883d43f7c92746797262296" translate="yes" xml:space="preserve">
          <source>Note that the exceptions carry both a string explanation and the CUDA runtime API status code after the failing call.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;예외는 호출 실패 후 문자열 설명과 CUDA 런타임 API 상태 코드를 모두 나타냅니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="edc86e942e36da3ac1661e81ede20aa41d9f1c2f" translate="yes" xml:space="preserve">
          <source>Note that when using &lt;a href=&quot;https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#cuda-dynamic-parallelism&quot;&gt;CUDA Dynamic Parallelism&lt;/a&gt;, a very similar methodology can and should be applied to any usage of the CUDA runtime API in device kernels, as well as after any device kernel launches:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#cuda-dynamic-parallelism&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;CUDA Dynamic Parallelism&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 을 사용할 때 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;장치 커널 에서뿐만 아니라 장치 커널이 시작된 후에도 CUDA 런타임 API 사용에 매우 유사한 방법론을 적용 할 수 있으며 적용해야합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1d24c5c2746808817d6b6481b904ddd13104ebab" translate="yes" xml:space="preserve">
          <source>Occasionally we may wish to report and recover from an error condition in a C++ context as part of a larger application.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;때때로 더 큰 응용 프로그램의 일부로 C ++ 컨텍스트에서 오류 조건을보고하고 복구 할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="285497b2e7885762225cbf3f38dc6dc33f23220f" translate="yes" xml:space="preserve">
          <source>Probably the best way to check for errors in runtime API code is to define an assert style handler function and wrapper macro like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;아마도 런타임 API 코드에서 오류를 확인하는 가장 좋은 방법은 다음과 같이 assert 스타일 핸들러 함수 및 랩퍼 매크로를 정의하는 것입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d4e1348b7315f21b925a40f3764236a8b7144b25" translate="yes" xml:space="preserve">
          <source>So I've approached this in a different and more fundamental way. For a sample of the result, here's part of the CUDA &lt;code&gt;vectorAdd&lt;/code&gt; sample - with &lt;em&gt;complete&lt;/em&gt; error checking of every runtime API call:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그래서 나는 다른 근본적인 방법으로 이것에 접근했습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;결과 샘플을 위해 다음은 CUDA &lt;/font&gt;&lt;/font&gt; &lt;code&gt;vectorAdd&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 샘플 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;의 일부입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;모든 런타임 API 호출에 대한 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;완벽한&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 오류 검사 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;와 함께 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bde7483af5f2bc68485f59a4f2974d788a25aa46" translate="yes" xml:space="preserve">
          <source>The C++-canonical way: Don't check for errors...use the C++ bindings which throw exceptions.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C ++ 표준 방법 : 오류를 확인하지 마십시오 ... 예외를 발생시키는 C ++ 바인딩을 사용하십시오.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="df416751e8a2d229d8b98d6297b404967b69b568" translate="yes" xml:space="preserve">
          <source>The output:</source>
          <target state="translated">출력 :</target>
        </trans-unit>
        <trans-unit id="3be12694aa2561741ce5d7192d8f62ee429738bc" translate="yes" xml:space="preserve">
          <source>The relevant code is copied below:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;관련 코드는 다음과 같습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7ad844c9d8f5bf897e25ab3e2ac67d6565ba6b37" translate="yes" xml:space="preserve">
          <source>The solution discussed &lt;a href=&quot;https://code.google.com/p/stanford-cs193g-sp2010/wiki/TutorialWhenSomethingGoesWrong&quot;&gt;here&lt;/a&gt; worked well for me. This solution uses built-in cuda functions and is very simple to implement.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;논의 된 솔루션 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://code.google.com/p/stanford-cs193g-sp2010/wiki/TutorialWhenSomethingGoesWrong&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;여기가&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 잘 날 위해 일했습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 솔루션은 내장 cuda 함수를 사용하며 구현이 매우 간단합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="890d71a7eb68f019602b05d670b28839d2a44f30" translate="yes" xml:space="preserve">
          <source>This will incorporate the filename, line number, and an English language description of the &lt;code&gt;cudaError_t&lt;/code&gt; into the thrown exception's &lt;code&gt;.what()&lt;/code&gt; member:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이것은 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;던져진 예외의 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;cudaError_t&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;.what()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 멤버에 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;파일 이름, 줄 번호 및 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;cudaError_t&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 의 영어 설명을 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;통합합니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="058ed78e78b535aaac72c39129072465321d8503" translate="yes" xml:space="preserve">
          <source>What is the canonical way to check for errors using the CUDA runtime API</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;CUDA 런타임 API를 사용하여 오류를 확인하는 정식 방법은 무엇입니까&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="758c10137099ebf94256c82812ca29ff027dbb11" translate="yes" xml:space="preserve">
          <source>You can then wrap each API call with the &lt;code&gt;gpuErrchk&lt;/code&gt; macro, which will process the return status of the API call it wraps, for example:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그런 다음 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;gpuErrchk&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 매크로로 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;각 API 호출을 랩핑 할 수 있습니다. 이렇게하면 랩핑 된 API 호출 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;의 리턴 상태가 처리됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="35f845c7a8de664a799bc45d5782ffc1111bed41" translate="yes" xml:space="preserve">
          <source>in which case the &lt;code&gt;cudaMemcpy&lt;/code&gt; call can return either errors which occurred during the kernel execution or those from the memory copy itself. This can be confusing for the beginner, and I would recommend using explicit synchronisation after a kernel launch during debugging to make it easier to understand where problems might be arising.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 경우 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;cudaMemcpy&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 호출은 커널 실행 중 발생한 오류 또는 메모리 사본 자체의 오류를 리턴 할 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;초보자에게는 혼란 스러울 수 있으므로 디버깅 중에 커널 시작 후 명시 적 동기화를 사용하여 문제가 발생한 위치를 쉽게 이해할 수 있도록하는 것이 좋습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ea65cea6cb4cc03639a278217c1c56d88606b8ec" translate="yes" xml:space="preserve">
          <source>talonmies' answer above is a fine way to abort an application in an &lt;code&gt;assert&lt;/code&gt;-style manner.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;위의 talonmies의 답변은 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;assert&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 스타일 방식으로 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;응용 프로그램을 중단시키는 좋은 방법 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3bee89285c7750cc62509b9df674ca9514d83a2c" translate="yes" xml:space="preserve">
          <source>will firstly check for invalid launch argument, then force the host to wait until the kernel stops and checks for an execution error. The synchronisation can be eliminated if you have a subsequent blocking API call like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;먼저 잘못된 시작 인수를 확인한 다음 커널이 중지되고 실행 오류를 확인할 때까지 호스트가 대기하도록합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다음과 같은 후속 차단 API 호출이있는 경우 동기화를 제거 할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
