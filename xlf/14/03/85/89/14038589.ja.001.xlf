<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/14038589">
    <body>
      <group id="14038589">
        <trans-unit id="3a74eb93d78e79284b38911d99d1ff71ac7ee8ab" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/eyalroz/cuda-api-wrappers&quot;&gt;&lt;strong&gt;Thin Modern-C++ wrappers for the CUDA Runtime API library&lt;/strong&gt;&lt;/a&gt; (Github)</source>
          <target state="translated">&lt;a href=&quot;https://github.com/eyalroz/cuda-api-wrappers&quot;&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;CUDAランタイムAPIライブラリ&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（Github）&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;用のThin Modern-C ++ラッパー&lt;/font&gt;&lt;/strong&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e37160bbb537d25c3139f9591c1737b868ccb158" translate="yes" xml:space="preserve">
          <source>A client of &lt;code&gt;some_function&lt;/code&gt; can distinguish CUDA errors from other kinds of errors if desired:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;some_function&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;のクライアントは&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、必要に応じてCUDAエラーを他の種類のエラーと区別できます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9baf773579a487ed942d03017f6ff2bef3b35b64" translate="yes" xml:space="preserve">
          <source>A few links to how CUDA errors are automagically checked with these wrappers:</source>
          <target state="translated">これらのラッパーでCUDAのエラーを自動チェックする方法へのリンクをいくつか紹介します。</target>
        </trans-unit>
        <trans-unit id="2a67284a307daab864e9997be377e0db1f4b5754" translate="yes" xml:space="preserve">
          <source>A second related question is how to check for errors in kernel launches, which can't be directly wrapped in a macro call like standard runtime API calls. For kernels, something like this:</source>
          <target state="translated">2つ目の関連する問題は、カーネルの起動時のエラーをどのようにチェックするかということで、標準的なランタイムAPIコールのようにマクロコールで直接ラップすることはできません。カーネルの場合は、次のようなものです。</target>
        </trans-unit>
        <trans-unit id="c0cc18f1ec8aab1f7eb1990fe3cc9ca3b55458f3" translate="yes" xml:space="preserve">
          <source>A test program throwing and catching a bunch of exceptions</source>
          <target state="translated">たくさんの例外を投げてキャッチするテストプログラム</target>
        </trans-unit>
        <trans-unit id="bd9c83b7ff60ef6bdac16526d08b37f2088c2639" translate="yes" xml:space="preserve">
          <source>Again - all potential errors are checked and reported via a thrown exception. This code uses my</source>
          <target state="translated">繰り返しになりますが、すべての潜在的なエラーはチェックされ、スローされた例外によって報告されます。このコードでは</target>
        </trans-unit>
        <trans-unit id="8a403285307dd8d9bee61acf40f0b737df17d010" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;thrust::system_error&lt;/code&gt; is a &lt;code&gt;std::runtime_error&lt;/code&gt;, we can alternatively handle it in the same manner of a broad class of errors if we don't require the precision of the previous example:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ので&lt;/font&gt;&lt;/font&gt; &lt;code&gt;thrust::system_error&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ある&lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::runtime_error&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、我々は前の例の精度を必要としない場合、我々は、代わりに、エラーの幅広いクラスのと同じ方法でそれを処理することができます：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cc48186a49de9f93558a523f440822d8914a6182" translate="yes" xml:space="preserve">
          <source>Documentation for the error-related functionality</source>
          <target state="translated">エラー関連機能のドキュメント</target>
        </trans-unit>
        <trans-unit id="7bdcb86b12def8b476ed216091d19d6a2f3f82ff" translate="yes" xml:space="preserve">
          <source>Here's a reasonably terse way to do that by throwing a C++ exception derived from &lt;code&gt;std::runtime_error&lt;/code&gt; using &lt;code&gt;thrust::system_error&lt;/code&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;以下は、&lt;/font&gt; &lt;code&gt;thrust::system_error&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;して&lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::runtime_error&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;から派生したC ++例外をスローすることにより、これを合理的に簡潔にする方法&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d447e5512516fd33d90a1544b452cdcf17fe5a66" translate="yes" xml:space="preserve">
          <source>I used to be irked by this problem; and I used to have a macro-cum-wrapper-function solution just like in Talonmies and Jared's answers, but, honestly? It makes using the CUDA Runtime API even more ugly and C-like.</source>
          <target state="translated">私はこの問題に苛立っていました。TalonmiesやJaredの回答にあるようなマクロとラッパー関数の解決策を持っていましたが、正直言って、この問題はCUDAランタイムAPIの使用をより醜くしてしまいます。それはCUDAランタイムAPIを使用することをさらに醜く、Cのようなものにします。</target>
        </trans-unit>
        <trans-unit id="e9e7cef7e8f8897ec9fe6e6cd0cfde9f3b14b6d2" translate="yes" xml:space="preserve">
          <source>If there is an error in a call, a textual message describing the error and the file and line in your code where the error occurred will be emitted to &lt;code&gt;stderr&lt;/code&gt; and the application will exit. You could conceivably modify &lt;code&gt;gpuAssert&lt;/code&gt; to raise an exception rather than call &lt;code&gt;exit()&lt;/code&gt; in a more sophisticated application if it were required.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;呼び出しにエラーがある場合、エラーと、エラーが発生したコード内のファイルと行を説明するテキストメッセージが&lt;/font&gt;&lt;/font&gt; &lt;code&gt;stderr&lt;/code&gt; に&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;送信され&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、アプリケーションが終了します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;必要に応じて、より洗練されたアプリケーションで&lt;/font&gt; &lt;code&gt;exit()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;呼び出すのではなく、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;gpuAssert&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;変更&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;して例外を発生させる&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ことができ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="003c5cc74a6e46c5b431fd52eb329de392ad31ff" translate="yes" xml:space="preserve">
          <source>Looking through the answers and comments on CUDA questions, and in the &lt;a href=&quot;https://stackoverflow.com/tags/cuda/info&quot;&gt;CUDA tag wiki&lt;/a&gt;, I see it is often suggested that the return status of every API call should checked for errors. The API documentation contains functions like &lt;code&gt;cudaGetLastError&lt;/code&gt;, &lt;code&gt;cudaPeekAtLastError&lt;/code&gt;, and &lt;code&gt;cudaGetErrorString&lt;/code&gt;, but what is the best way to put these together to reliably catch and report errors without requiring lots of extra code?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;CUDAの質問に対する回答とコメント、および&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/tags/cuda/info&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;CUDAタグのwiki&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を見ると、すべてのAPI呼び出しの戻りステータスでエラーを確認することが推奨されることがよくあります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;APIドキュメントは次のような機能が含まれている&lt;/font&gt;&lt;/font&gt; &lt;code&gt;cudaGetLastError&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;cudaPeekAtLastError&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、および&lt;/font&gt;&lt;/font&gt; &lt;code&gt;cudaGetErrorString&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が、余分なコードの多くを必要とせずに確実にキャッチし、レポートエラーにこれらを一緒に置くための最良の方法は何ですか？&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1ea6d40fcd6ed3ec4883d43f7c92746797262296" translate="yes" xml:space="preserve">
          <source>Note that the exceptions carry both a string explanation and the CUDA runtime API status code after the failing call.</source>
          <target state="translated">例外には、呼び出しに失敗した後に文字列の説明とCUDAランタイムAPIのステータスコードの両方が含まれていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="edc86e942e36da3ac1661e81ede20aa41d9f1c2f" translate="yes" xml:space="preserve">
          <source>Note that when using &lt;a href=&quot;https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#cuda-dynamic-parallelism&quot;&gt;CUDA Dynamic Parallelism&lt;/a&gt;, a very similar methodology can and should be applied to any usage of the CUDA runtime API in device kernels, as well as after any device kernel launches:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#cuda-dynamic-parallelism&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;CUDA Dynamic Parallelism&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用する場合&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、デバイスカーネルでのCUDAランタイムAPIの使用や、デバイスカーネルの起動後に、非常に類似した方法を適用できることに&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;注意してください&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1d24c5c2746808817d6b6481b904ddd13104ebab" translate="yes" xml:space="preserve">
          <source>Occasionally we may wish to report and recover from an error condition in a C++ context as part of a larger application.</source>
          <target state="translated">時々、より大きなアプリケーションの一部として、C++コンテキストのエラー状態を報告して回復したいと思うことがあります。</target>
        </trans-unit>
        <trans-unit id="285497b2e7885762225cbf3f38dc6dc33f23220f" translate="yes" xml:space="preserve">
          <source>Probably the best way to check for errors in runtime API code is to define an assert style handler function and wrapper macro like this:</source>
          <target state="translated">おそらく、ランタイムAPIコードのエラーをチェックする最良の方法は、以下のようなアサートスタイルハンドラ関数とラッパーマクロを定義することです。</target>
        </trans-unit>
        <trans-unit id="d4e1348b7315f21b925a40f3764236a8b7144b25" translate="yes" xml:space="preserve">
          <source>So I've approached this in a different and more fundamental way. For a sample of the result, here's part of the CUDA &lt;code&gt;vectorAdd&lt;/code&gt; sample - with &lt;em&gt;complete&lt;/em&gt; error checking of every runtime API call:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;だから私はこれに別のより根本的な方法で取り組みました。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;結果のサンプルについては、CUDA &lt;/font&gt;&lt;/font&gt; &lt;code&gt;vectorAdd&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サンプル&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の一部を以下に示し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。すべてのランタイムAPI呼び出しの&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;完全な&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;エラーチェックが含まれています。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bde7483af5f2bc68485f59a4f2974d788a25aa46" translate="yes" xml:space="preserve">
          <source>The C++-canonical way: Don't check for errors...use the C++ bindings which throw exceptions.</source>
          <target state="translated">C++の標準的な方法です。エラーをチェックしない...例外を投げるC++バインディングを使う。</target>
        </trans-unit>
        <trans-unit id="df416751e8a2d229d8b98d6297b404967b69b568" translate="yes" xml:space="preserve">
          <source>The output:</source>
          <target state="translated">アウトプットです。</target>
        </trans-unit>
        <trans-unit id="3be12694aa2561741ce5d7192d8f62ee429738bc" translate="yes" xml:space="preserve">
          <source>The relevant code is copied below:</source>
          <target state="translated">関連するコードを以下にコピーします。</target>
        </trans-unit>
        <trans-unit id="7ad844c9d8f5bf897e25ab3e2ac67d6565ba6b37" translate="yes" xml:space="preserve">
          <source>The solution discussed &lt;a href=&quot;https://code.google.com/p/stanford-cs193g-sp2010/wiki/TutorialWhenSomethingGoesWrong&quot;&gt;here&lt;/a&gt; worked well for me. This solution uses built-in cuda functions and is very simple to implement.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;https://code.google.com/p/stanford-cs193g-sp2010/wiki/TutorialWhenSomethingGoesWrong&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここで&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;説明し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;た&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;解決策は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私にとってはうまくいきました。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このソリューションは組み込みのcuda関数を使用しており、実装は非常に簡単です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="890d71a7eb68f019602b05d670b28839d2a44f30" translate="yes" xml:space="preserve">
          <source>This will incorporate the filename, line number, and an English language description of the &lt;code&gt;cudaError_t&lt;/code&gt; into the thrown exception's &lt;code&gt;.what()&lt;/code&gt; member:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;により、スローされた例外の&lt;/font&gt; &lt;code&gt;.what()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;メンバーに&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、ファイル名、行番号、および&lt;/font&gt;&lt;/font&gt; &lt;code&gt;cudaError_t&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;英語の説明が組み込まれます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="058ed78e78b535aaac72c39129072465321d8503" translate="yes" xml:space="preserve">
          <source>What is the canonical way to check for errors using the CUDA runtime API</source>
          <target state="translated">CUDAランタイムAPIを使ってエラーをチェックする定型的な方法とは?</target>
        </trans-unit>
        <trans-unit id="758c10137099ebf94256c82812ca29ff027dbb11" translate="yes" xml:space="preserve">
          <source>You can then wrap each API call with the &lt;code&gt;gpuErrchk&lt;/code&gt; macro, which will process the return status of the API call it wraps, for example:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;次に、各API呼び出しを&lt;/font&gt;&lt;/font&gt; &lt;code&gt;gpuErrchk&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;マクロで&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ラップできます。これは、ラップするAPI呼び出し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の戻りステータスを処理します。次に例を示します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="35f845c7a8de664a799bc45d5782ffc1111bed41" translate="yes" xml:space="preserve">
          <source>in which case the &lt;code&gt;cudaMemcpy&lt;/code&gt; call can return either errors which occurred during the kernel execution or those from the memory copy itself. This can be confusing for the beginner, and I would recommend using explicit synchronisation after a kernel launch during debugging to make it easier to understand where problems might be arising.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;その場合、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;cudaMemcpy&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;呼び出しは、カーネルの実行中に発生したエラーまたはメモリコピー自体からのエラーを返す可能性があります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは初心者には混乱する可能性があります。デバッグ中にカーネルの起動後に明示的な同期を使用して、問題が発生している可能性のある場所を簡単に理解できるようにすることをお勧めします。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ea65cea6cb4cc03639a278217c1c56d88606b8ec" translate="yes" xml:space="preserve">
          <source>talonmies' answer above is a fine way to abort an application in an &lt;code&gt;assert&lt;/code&gt;-style manner.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;上記のtalonmiesの回答は、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;assert&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;スタイルの方法で&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アプリケーションを中止するための優れた&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;方法です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3bee89285c7750cc62509b9df674ca9514d83a2c" translate="yes" xml:space="preserve">
          <source>will firstly check for invalid launch argument, then force the host to wait until the kernel stops and checks for an execution error. The synchronisation can be eliminated if you have a subsequent blocking API call like this:</source>
          <target state="translated">は最初に無効な起動引数をチェックし、その後カーネルが停止して実行エラーをチェックするまでホストを強制的に待たせます。このような後続のブロッキングAPIコールがあれば、同期をなくすことができます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
