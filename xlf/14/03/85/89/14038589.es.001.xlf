<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/14038589">
    <body>
      <group id="14038589">
        <trans-unit id="3a74eb93d78e79284b38911d99d1ff71ac7ee8ab" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/eyalroz/cuda-api-wrappers&quot;&gt;&lt;strong&gt;Thin Modern-C++ wrappers for the CUDA Runtime API library&lt;/strong&gt;&lt;/a&gt; (Github)</source>
          <target state="translated">&lt;a href=&quot;https://github.com/eyalroz/cuda-api-wrappers&quot;&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Contenedores Thin Modern-C ++ para la biblioteca API de tiempo de ejecuci&amp;oacute;n CUDA&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (Github)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e37160bbb537d25c3139f9591c1737b868ccb158" translate="yes" xml:space="preserve">
          <source>A client of &lt;code&gt;some_function&lt;/code&gt; can distinguish CUDA errors from other kinds of errors if desired:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Un cliente de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;some_function&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; puede distinguir los errores de CUDA de otros tipos de errores si lo desea:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9baf773579a487ed942d03017f6ff2bef3b35b64" translate="yes" xml:space="preserve">
          <source>A few links to how CUDA errors are automagically checked with these wrappers:</source>
          <target state="translated">Algunos enlaces a cómo los errores de CUDA se comprueban automáticamente con estos envoltorios:</target>
        </trans-unit>
        <trans-unit id="2a67284a307daab864e9997be377e0db1f4b5754" translate="yes" xml:space="preserve">
          <source>A second related question is how to check for errors in kernel launches, which can't be directly wrapped in a macro call like standard runtime API calls. For kernels, something like this:</source>
          <target state="translated">Una segunda pregunta relacionada es cómo comprobar si hay errores en los lanzamientos de kernel,que no pueden ser directamente envueltos en una llamada de macro como las llamadas estándar de la API de tiempo de ejecución.Para los kernels,algo como esto:</target>
        </trans-unit>
        <trans-unit id="c0cc18f1ec8aab1f7eb1990fe3cc9ca3b55458f3" translate="yes" xml:space="preserve">
          <source>A test program throwing and catching a bunch of exceptions</source>
          <target state="translated">Un programa de prueba lanzando y capturando un montón de excepciones</target>
        </trans-unit>
        <trans-unit id="bd9c83b7ff60ef6bdac16526d08b37f2088c2639" translate="yes" xml:space="preserve">
          <source>Again - all potential errors are checked and reported via a thrown exception. This code uses my</source>
          <target state="translated">Una vez más-todos los posibles errores se comprueban e informan a través de una excepción lanzada.Este código utiliza mi</target>
        </trans-unit>
        <trans-unit id="8a403285307dd8d9bee61acf40f0b737df17d010" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;thrust::system_error&lt;/code&gt; is a &lt;code&gt;std::runtime_error&lt;/code&gt;, we can alternatively handle it in the same manner of a broad class of errors if we don't require the precision of the previous example:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Debido a que &lt;/font&gt;&lt;/font&gt; &lt;code&gt;thrust::system_error&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es un &lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::runtime_error&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , alternativamente podemos manejarlo de la misma manera que una amplia clase de errores si no requerimos la precisi&amp;oacute;n del ejemplo anterior:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cc48186a49de9f93558a523f440822d8914a6182" translate="yes" xml:space="preserve">
          <source>Documentation for the error-related functionality</source>
          <target state="translated">Documentación para la funcionalidad relacionada con el error</target>
        </trans-unit>
        <trans-unit id="7bdcb86b12def8b476ed216091d19d6a2f3f82ff" translate="yes" xml:space="preserve">
          <source>Here's a reasonably terse way to do that by throwing a C++ exception derived from &lt;code&gt;std::runtime_error&lt;/code&gt; using &lt;code&gt;thrust::system_error&lt;/code&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Aqu&amp;iacute; hay una manera razonablemente breve de hacerlo lanzando una excepci&amp;oacute;n de C ++ derivada de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::runtime_error&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; usando &lt;/font&gt;&lt;/font&gt; &lt;code&gt;thrust::system_error&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d447e5512516fd33d90a1544b452cdcf17fe5a66" translate="yes" xml:space="preserve">
          <source>I used to be irked by this problem; and I used to have a macro-cum-wrapper-function solution just like in Talonmies and Jared's answers, but, honestly? It makes using the CUDA Runtime API even more ugly and C-like.</source>
          <target state="translated">Solía molestarme por este problema;y solía tener una solución con función de macroenvoltura como en las respuestas de Talonmies y Jared,pero,honestamente...Hace que el uso de la API de ejecución de CUDA sea aún más feo y similar a la C.</target>
        </trans-unit>
        <trans-unit id="e9e7cef7e8f8897ec9fe6e6cd0cfde9f3b14b6d2" translate="yes" xml:space="preserve">
          <source>If there is an error in a call, a textual message describing the error and the file and line in your code where the error occurred will be emitted to &lt;code&gt;stderr&lt;/code&gt; and the application will exit. You could conceivably modify &lt;code&gt;gpuAssert&lt;/code&gt; to raise an exception rather than call &lt;code&gt;exit()&lt;/code&gt; in a more sophisticated application if it were required.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si hay un error en una llamada, un mensaje de texto que describe el error y el archivo y la l&amp;iacute;nea en su c&amp;oacute;digo donde se produjo el error se emitir&amp;aacute; a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;stderr&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y la aplicaci&amp;oacute;n se cerrar&amp;aacute;. &lt;/font&gt;&lt;/font&gt; &lt;code&gt;gpuAssert&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; podr&amp;iacute;a modificar &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;gpuAssert&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para generar una excepci&amp;oacute;n en lugar de llamar a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;exit()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en una aplicaci&amp;oacute;n m&amp;aacute;s sofisticada si fuera necesario.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="003c5cc74a6e46c5b431fd52eb329de392ad31ff" translate="yes" xml:space="preserve">
          <source>Looking through the answers and comments on CUDA questions, and in the &lt;a href=&quot;https://stackoverflow.com/tags/cuda/info&quot;&gt;CUDA tag wiki&lt;/a&gt;, I see it is often suggested that the return status of every API call should checked for errors. The API documentation contains functions like &lt;code&gt;cudaGetLastError&lt;/code&gt;, &lt;code&gt;cudaPeekAtLastError&lt;/code&gt;, and &lt;code&gt;cudaGetErrorString&lt;/code&gt;, but what is the best way to put these together to reliably catch and report errors without requiring lots of extra code?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Al mirar las respuestas y los comentarios sobre las preguntas de CUDA, y en el &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/tags/cuda/info&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;wiki de etiquetas de CUDA&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , veo que a menudo se sugiere que el estado de retorno de cada llamada a la API debe verificarse en busca de errores. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La documentaci&amp;oacute;n de la API contiene funciones como &lt;/font&gt;&lt;/font&gt; &lt;code&gt;cudaGetLastError&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;cudaPeekAtLastError&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;cudaGetErrorString&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , pero &amp;iquest;cu&amp;aacute;l es la mejor manera de &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;unirlas&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para capturar e informar errores de manera confiable sin requerir mucho c&amp;oacute;digo adicional?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1ea6d40fcd6ed3ec4883d43f7c92746797262296" translate="yes" xml:space="preserve">
          <source>Note that the exceptions carry both a string explanation and the CUDA runtime API status code after the failing call.</source>
          <target state="translated">Tenga en cuenta que las excepciones llevan tanto una explicación de la cadena como el código de estado de la API en tiempo de ejecución de CUDA después de la llamada fallida.</target>
        </trans-unit>
        <trans-unit id="edc86e942e36da3ac1661e81ede20aa41d9f1c2f" translate="yes" xml:space="preserve">
          <source>Note that when using &lt;a href=&quot;https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#cuda-dynamic-parallelism&quot;&gt;CUDA Dynamic Parallelism&lt;/a&gt;, a very similar methodology can and should be applied to any usage of the CUDA runtime API in device kernels, as well as after any device kernel launches:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tenga en cuenta que cuando se utiliza el &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#cuda-dynamic-parallelism&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;paralelismo din&amp;aacute;mico de CUDA&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , una metodolog&amp;iacute;a muy similar puede y debe aplicarse a cualquier uso de la API de tiempo de ejecuci&amp;oacute;n de CUDA en los n&amp;uacute;cleos de dispositivos, as&amp;iacute; como despu&amp;eacute;s de que se inicie cualquier n&amp;uacute;cleo de dispositivos:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1d24c5c2746808817d6b6481b904ddd13104ebab" translate="yes" xml:space="preserve">
          <source>Occasionally we may wish to report and recover from an error condition in a C++ context as part of a larger application.</source>
          <target state="translated">Ocasionalmente podemos desear informar y recuperarnos de una condición de error en un contexto de C++como parte de una aplicación más amplia.</target>
        </trans-unit>
        <trans-unit id="285497b2e7885762225cbf3f38dc6dc33f23220f" translate="yes" xml:space="preserve">
          <source>Probably the best way to check for errors in runtime API code is to define an assert style handler function and wrapper macro like this:</source>
          <target state="translated">Probablemente la mejor manera de comprobar si hay errores en el código de la API en tiempo de ejecución es definir una función de manejo de estilo de afirmación y una macro de envoltura como esta:</target>
        </trans-unit>
        <trans-unit id="d4e1348b7315f21b925a40f3764236a8b7144b25" translate="yes" xml:space="preserve">
          <source>So I've approached this in a different and more fundamental way. For a sample of the result, here's part of the CUDA &lt;code&gt;vectorAdd&lt;/code&gt; sample - with &lt;em&gt;complete&lt;/em&gt; error checking of every runtime API call:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;As&amp;iacute; que he abordado esto de una manera diferente y m&amp;aacute;s fundamental. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para obtener una muestra del resultado, aqu&amp;iacute; hay parte de la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;muestra &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;CUDA &lt;/font&gt;&lt;/font&gt; &lt;code&gt;vectorAdd&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , con &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;una&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; verificaci&amp;oacute;n &lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;completa de&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; errores de cada llamada a la API de tiempo de ejecuci&amp;oacute;n:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bde7483af5f2bc68485f59a4f2974d788a25aa46" translate="yes" xml:space="preserve">
          <source>The C++-canonical way: Don't check for errors...use the C++ bindings which throw exceptions.</source>
          <target state="translated">La manera C++-canónica:No compruebe si hay errores...use los enlaces de C++que lanzan excepciones.</target>
        </trans-unit>
        <trans-unit id="df416751e8a2d229d8b98d6297b404967b69b568" translate="yes" xml:space="preserve">
          <source>The output:</source>
          <target state="translated">La salida:</target>
        </trans-unit>
        <trans-unit id="3be12694aa2561741ce5d7192d8f62ee429738bc" translate="yes" xml:space="preserve">
          <source>The relevant code is copied below:</source>
          <target state="translated">El código correspondiente se copia a continuación:</target>
        </trans-unit>
        <trans-unit id="7ad844c9d8f5bf897e25ab3e2ac67d6565ba6b37" translate="yes" xml:space="preserve">
          <source>The solution discussed &lt;a href=&quot;https://code.google.com/p/stanford-cs193g-sp2010/wiki/TutorialWhenSomethingGoesWrong&quot;&gt;here&lt;/a&gt; worked well for me. This solution uses built-in cuda functions and is very simple to implement.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La soluci&amp;oacute;n discutida &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://code.google.com/p/stanford-cs193g-sp2010/wiki/TutorialWhenSomethingGoesWrong&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;aqu&amp;iacute;&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; funcion&amp;oacute; bien para m&amp;iacute;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esta soluci&amp;oacute;n utiliza funciones integradas de cuda y es muy simple de implementar.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="890d71a7eb68f019602b05d670b28839d2a44f30" translate="yes" xml:space="preserve">
          <source>This will incorporate the filename, line number, and an English language description of the &lt;code&gt;cudaError_t&lt;/code&gt; into the thrown exception's &lt;code&gt;.what()&lt;/code&gt; member:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esto incorporar&amp;aacute; el nombre de archivo, el n&amp;uacute;mero de l&amp;iacute;nea y una descripci&amp;oacute;n en ingl&amp;eacute;s de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;cudaError_t&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en el &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;miembro &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.what &lt;/font&gt;&lt;/font&gt; &lt;code&gt;.what()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; la excepci&amp;oacute;n lanzada &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="058ed78e78b535aaac72c39129072465321d8503" translate="yes" xml:space="preserve">
          <source>What is the canonical way to check for errors using the CUDA runtime API</source>
          <target state="translated">¿Cuál es la forma canónica de comprobar si hay errores usando la API de tiempo de ejecución de CUDA</target>
        </trans-unit>
        <trans-unit id="758c10137099ebf94256c82812ca29ff027dbb11" translate="yes" xml:space="preserve">
          <source>You can then wrap each API call with the &lt;code&gt;gpuErrchk&lt;/code&gt; macro, which will process the return status of the API call it wraps, for example:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Luego puede ajustar cada llamada a la API con la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;macro &lt;/font&gt;&lt;/font&gt; &lt;code&gt;gpuErrchk&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , que procesar&amp;aacute; el estado de retorno de la llamada a la API que envuelve, por ejemplo:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="35f845c7a8de664a799bc45d5782ffc1111bed41" translate="yes" xml:space="preserve">
          <source>in which case the &lt;code&gt;cudaMemcpy&lt;/code&gt; call can return either errors which occurred during the kernel execution or those from the memory copy itself. This can be confusing for the beginner, and I would recommend using explicit synchronisation after a kernel launch during debugging to make it easier to understand where problems might be arising.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;en cuyo caso la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;llamada a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;cudaMemcpy&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; puede devolver errores que ocurrieron durante la ejecuci&amp;oacute;n del kernel o los de la copia de la memoria. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esto puede ser confuso para el principiante, y recomendar&amp;iacute;a usar la sincronizaci&amp;oacute;n expl&amp;iacute;cita despu&amp;eacute;s del inicio del kernel durante la depuraci&amp;oacute;n para que sea m&amp;aacute;s f&amp;aacute;cil entender d&amp;oacute;nde pueden surgir problemas.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ea65cea6cb4cc03639a278217c1c56d88606b8ec" translate="yes" xml:space="preserve">
          <source>talonmies' answer above is a fine way to abort an application in an &lt;code&gt;assert&lt;/code&gt;-style manner.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;respuesta talonmies' anterior es una buena manera de abortar una aplicaci&amp;oacute;n de una &lt;/font&gt;&lt;/font&gt; &lt;code&gt;assert&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; forma de estilo.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3bee89285c7750cc62509b9df674ca9514d83a2c" translate="yes" xml:space="preserve">
          <source>will firstly check for invalid launch argument, then force the host to wait until the kernel stops and checks for an execution error. The synchronisation can be eliminated if you have a subsequent blocking API call like this:</source>
          <target state="translated">primero comprobará si el argumento de lanzamiento es inválido,luego forzará al anfitrión a esperar hasta que el núcleo se detenga y compruebe si hay un error de ejecución.La sincronización puede eliminarse si se tiene una llamada a la API de bloqueo posterior como esta:</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
