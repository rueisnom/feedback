<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/14038589">
    <body>
      <group id="14038589">
        <trans-unit id="3a74eb93d78e79284b38911d99d1ff71ac7ee8ab" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/eyalroz/cuda-api-wrappers&quot;&gt;&lt;strong&gt;Thin Modern-C++ wrappers for the CUDA Runtime API library&lt;/strong&gt;&lt;/a&gt; (Github)</source>
          <target state="translated">&lt;a href=&quot;https://github.com/eyalroz/cuda-api-wrappers&quot;&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;CUDA运行时API库&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（Github）的&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Thin Modern-C ++包装器&lt;/font&gt;&lt;/strong&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e37160bbb537d25c3139f9591c1737b868ccb158" translate="yes" xml:space="preserve">
          <source>A client of &lt;code&gt;some_function&lt;/code&gt; can distinguish CUDA errors from other kinds of errors if desired:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果需要，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;some_function&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的客户端&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;可以将CUDA错误与其他类型的错误区分开：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9baf773579a487ed942d03017f6ff2bef3b35b64" translate="yes" xml:space="preserve">
          <source>A few links to how CUDA errors are automagically checked with these wrappers:</source>
          <target state="translated">关于CUDA错误如何用这些封装器自动检查的几个链接。</target>
        </trans-unit>
        <trans-unit id="2a67284a307daab864e9997be377e0db1f4b5754" translate="yes" xml:space="preserve">
          <source>A second related question is how to check for errors in kernel launches, which can't be directly wrapped in a macro call like standard runtime API calls. For kernels, something like this:</source>
          <target state="translated">第二个相关的问题是如何检查内核启动中的错误,不能像标准的运行时API调用那样直接封装在宏调用中。对于内核来说,类似于这样的东西。</target>
        </trans-unit>
        <trans-unit id="c0cc18f1ec8aab1f7eb1990fe3cc9ca3b55458f3" translate="yes" xml:space="preserve">
          <source>A test program throwing and catching a bunch of exceptions</source>
          <target state="translated">一个测试程序投掷和捕获一堆异常的测试程序</target>
        </trans-unit>
        <trans-unit id="bd9c83b7ff60ef6bdac16526d08b37f2088c2639" translate="yes" xml:space="preserve">
          <source>Again - all potential errors are checked and reported via a thrown exception. This code uses my</source>
          <target state="translated">同样,所有潜在的错误都会被检查并通过抛出的异常报告。这段代码使用了我的</target>
        </trans-unit>
        <trans-unit id="8a403285307dd8d9bee61acf40f0b737df17d010" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;thrust::system_error&lt;/code&gt; is a &lt;code&gt;std::runtime_error&lt;/code&gt;, we can alternatively handle it in the same manner of a broad class of errors if we don't require the precision of the previous example:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因为&lt;/font&gt;&lt;/font&gt; &lt;code&gt;thrust::system_error&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是&lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::runtime_error&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，如果我们不需要上一示例的精度，则可以用与广泛的错误类别相同的方式来处理它：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cc48186a49de9f93558a523f440822d8914a6182" translate="yes" xml:space="preserve">
          <source>Documentation for the error-related functionality</source>
          <target state="translated">关于错误相关功能的文件</target>
        </trans-unit>
        <trans-unit id="7bdcb86b12def8b476ed216091d19d6a2f3f82ff" translate="yes" xml:space="preserve">
          <source>Here's a reasonably terse way to do that by throwing a C++ exception derived from &lt;code&gt;std::runtime_error&lt;/code&gt; using &lt;code&gt;thrust::system_error&lt;/code&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这是一种合理的简洁方法，通过&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用&lt;/font&gt; &lt;code&gt;thrust::system_error&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;抛出从&lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::runtime_error&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;派生的C ++异常&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;来实现&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d447e5512516fd33d90a1544b452cdcf17fe5a66" translate="yes" xml:space="preserve">
          <source>I used to be irked by this problem; and I used to have a macro-cum-wrapper-function solution just like in Talonmies and Jared's answers, but, honestly? It makes using the CUDA Runtime API even more ugly and C-like.</source>
          <target state="translated">我曾经对这个问题感到恼火;而且我曾经有一个像Talonmies和Jared的答案一样的宏兼封装函数的解决方案,但是,说实话?这让使用CUDA Runtime API更丑陋,更像C语言。</target>
        </trans-unit>
        <trans-unit id="e9e7cef7e8f8897ec9fe6e6cd0cfde9f3b14b6d2" translate="yes" xml:space="preserve">
          <source>If there is an error in a call, a textual message describing the error and the file and line in your code where the error occurred will be emitted to &lt;code&gt;stderr&lt;/code&gt; and the application will exit. You could conceivably modify &lt;code&gt;gpuAssert&lt;/code&gt; to raise an exception rather than call &lt;code&gt;exit()&lt;/code&gt; in a more sophisticated application if it were required.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果调用中有错误，则描述错误的文本消息以及代码中发生错误的文件和行将被发送到&lt;/font&gt;&lt;/font&gt; &lt;code&gt;stderr&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，应用程序将退出。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;您可以想像地修改&lt;/font&gt;&lt;/font&gt; &lt;code&gt;gpuAssert&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;以引发异常，而不是&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在需要的情况下在更复杂的应用程序中&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;调用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;exit()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="003c5cc74a6e46c5b431fd52eb329de392ad31ff" translate="yes" xml:space="preserve">
          <source>Looking through the answers and comments on CUDA questions, and in the &lt;a href=&quot;https://stackoverflow.com/tags/cuda/info&quot;&gt;CUDA tag wiki&lt;/a&gt;, I see it is often suggested that the return status of every API call should checked for errors. The API documentation contains functions like &lt;code&gt;cudaGetLastError&lt;/code&gt;, &lt;code&gt;cudaPeekAtLastError&lt;/code&gt;, and &lt;code&gt;cudaGetErrorString&lt;/code&gt;, but what is the best way to put these together to reliably catch and report errors without requiring lots of extra code?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;浏览关于CUDA问题的答案和评论，以及在&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/tags/cuda/info&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;CUDA标签Wiki中&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，我经常发现建议检查每个API调用的返回状态是否有错误。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;API文档包含诸如&lt;/font&gt;&lt;/font&gt; &lt;code&gt;cudaGetLastError&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;cudaPeekAtLastError&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;和&lt;/font&gt;&lt;/font&gt; &lt;code&gt;cudaGetErrorString&lt;/code&gt; 之类的函数&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，但是将它们组合在一起以可靠地捕获和报告错误而不需要大量额外代码的最佳方法是什么？&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1ea6d40fcd6ed3ec4883d43f7c92746797262296" translate="yes" xml:space="preserve">
          <source>Note that the exceptions carry both a string explanation and the CUDA runtime API status code after the failing call.</source>
          <target state="translated">请注意,在调用失败后,异常同时携带字符串解释和CUDA运行时API状态代码。</target>
        </trans-unit>
        <trans-unit id="edc86e942e36da3ac1661e81ede20aa41d9f1c2f" translate="yes" xml:space="preserve">
          <source>Note that when using &lt;a href=&quot;https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#cuda-dynamic-parallelism&quot;&gt;CUDA Dynamic Parallelism&lt;/a&gt;, a very similar methodology can and should be applied to any usage of the CUDA runtime API in device kernels, as well as after any device kernel launches:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;请注意，在使用&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#cuda-dynamic-parallelism&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;CUDA动态并行时&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，可以并且应该将非常相似的方法应用于设备内核中以及任何设备内核启动之后对CUDA运行时API的任何使用：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1d24c5c2746808817d6b6481b904ddd13104ebab" translate="yes" xml:space="preserve">
          <source>Occasionally we may wish to report and recover from an error condition in a C++ context as part of a larger application.</source>
          <target state="translated">偶尔,我们可能希望在C++上下文中报告和恢复错误情况,作为一个更大的应用程序的一部分。</target>
        </trans-unit>
        <trans-unit id="285497b2e7885762225cbf3f38dc6dc33f23220f" translate="yes" xml:space="preserve">
          <source>Probably the best way to check for errors in runtime API code is to define an assert style handler function and wrapper macro like this:</source>
          <target state="translated">在运行时API代码中检查错误的最好方法可能是定义一个assert样式处理函数和封装宏,就像这样。</target>
        </trans-unit>
        <trans-unit id="d4e1348b7315f21b925a40f3764236a8b7144b25" translate="yes" xml:space="preserve">
          <source>So I've approached this in a different and more fundamental way. For a sample of the result, here's part of the CUDA &lt;code&gt;vectorAdd&lt;/code&gt; sample - with &lt;em&gt;complete&lt;/em&gt; error checking of every runtime API call:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因此，我以另一种更基本的方式来解决这个问题。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;有关结果的示例，这是CUDA &lt;/font&gt;&lt;/font&gt; &lt;code&gt;vectorAdd&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;示例&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的一部分&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;-带有&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对每个运行时API调用的&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;完整&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;错误检查：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bde7483af5f2bc68485f59a4f2974d788a25aa46" translate="yes" xml:space="preserve">
          <source>The C++-canonical way: Don't check for errors...use the C++ bindings which throw exceptions.</source>
          <target state="translated">用C++-canonical的方法。不要检查错误.....使用C++绑定,会抛出异常。</target>
        </trans-unit>
        <trans-unit id="df416751e8a2d229d8b98d6297b404967b69b568" translate="yes" xml:space="preserve">
          <source>The output:</source>
          <target state="translated">的输出。</target>
        </trans-unit>
        <trans-unit id="3be12694aa2561741ce5d7192d8f62ee429738bc" translate="yes" xml:space="preserve">
          <source>The relevant code is copied below:</source>
          <target state="translated">现将相关代码抄录如下。</target>
        </trans-unit>
        <trans-unit id="7ad844c9d8f5bf897e25ab3e2ac67d6565ba6b37" translate="yes" xml:space="preserve">
          <source>The solution discussed &lt;a href=&quot;https://code.google.com/p/stanford-cs193g-sp2010/wiki/TutorialWhenSomethingGoesWrong&quot;&gt;here&lt;/a&gt; worked well for me. This solution uses built-in cuda functions and is very simple to implement.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;https://code.google.com/p/stanford-cs193g-sp2010/wiki/TutorialWhenSomethingGoesWrong&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这里&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;讨论的解决方案&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对我来说效果很好。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;该解决方案使用内置的cuda函数，实现起来非常简单。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="890d71a7eb68f019602b05d670b28839d2a44f30" translate="yes" xml:space="preserve">
          <source>This will incorporate the filename, line number, and an English language description of the &lt;code&gt;cudaError_t&lt;/code&gt; into the thrown exception's &lt;code&gt;.what()&lt;/code&gt; member:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这会将&lt;/font&gt;&lt;/font&gt; &lt;code&gt;cudaError_t&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的文件名，行号和英语描述&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;合并到抛出的异常的&lt;/font&gt;&lt;/font&gt; &lt;code&gt;.what()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;成员中：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="058ed78e78b535aaac72c39129072465321d8503" translate="yes" xml:space="preserve">
          <source>What is the canonical way to check for errors using the CUDA runtime API</source>
          <target state="translated">使用CUDA运行时API检查错误的常规方法是什么?</target>
        </trans-unit>
        <trans-unit id="758c10137099ebf94256c82812ca29ff027dbb11" translate="yes" xml:space="preserve">
          <source>You can then wrap each API call with the &lt;code&gt;gpuErrchk&lt;/code&gt; macro, which will process the return status of the API call it wraps, for example:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;然后，您可以使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;gpuErrchk&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;宏&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;包装每个API调用，该&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;宏将处理包装的API调用的返回状态，例如：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="35f845c7a8de664a799bc45d5782ffc1111bed41" translate="yes" xml:space="preserve">
          <source>in which case the &lt;code&gt;cudaMemcpy&lt;/code&gt; call can return either errors which occurred during the kernel execution or those from the memory copy itself. This can be confusing for the beginner, and I would recommend using explicit synchronisation after a kernel launch during debugging to make it easier to understand where problems might be arising.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在这种情况下，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;cudaMemcpy&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;调用可以返回内核执行期间发生的错误或内存副本本身的错误。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这对于初学者可能会造成混淆，我建议在调试期间启动内核后使用显式同步，以使您更容易理解可能出现问题的位置。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ea65cea6cb4cc03639a278217c1c56d88606b8ec" translate="yes" xml:space="preserve">
          <source>talonmies' answer above is a fine way to abort an application in an &lt;code&gt;assert&lt;/code&gt;-style manner.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;talonmies的以上回答是一种以&lt;/font&gt;&lt;/font&gt; &lt;code&gt;assert&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;样式方式&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;中止应用程序的好&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;方法。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3bee89285c7750cc62509b9df674ca9514d83a2c" translate="yes" xml:space="preserve">
          <source>will firstly check for invalid launch argument, then force the host to wait until the kernel stops and checks for an execution error. The synchronisation can be eliminated if you have a subsequent blocking API call like this:</source>
          <target state="translated">将首先检查无效的启动参数,然后强迫主机等待内核停止并检查执行错误。如果你有一个像这样的后续阻断API调用,就可以消除同步。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
