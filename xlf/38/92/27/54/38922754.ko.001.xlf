<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://stackoverflow.com/questions/38922754">
    <body>
      <group id="38922754">
        <trans-unit id="8b386deca9817df4d9d4e35b35696c47d7c22b92" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Add the following in your build gradle file in Android Studio.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Android Studio의 빌드 gradle 파일에 다음을 추가하십시오.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="043c1435d1a44ba8a90d5868a5f9dd20fd27cb98" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Create the Application class and initialize it.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Application 클래스를 작성하고 초기화하십시오.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="81c0f51881f9e57861ba31f7d4bfe757dbd63520" translate="yes" xml:space="preserve">
          <source>Again, obvious to those who have any experience using Gradle in Java, but it took me a while to figure this out. If you see people saying &quot;Oh, just add &lt;code&gt;compile 'this-or-that.jar'&lt;/code&gt;&quot; or something similar, know that &lt;code&gt;compile&lt;/code&gt; is a directive in that build.gradle file that indicates compile-time dependencies. &lt;a href=&quot;https://docs.gradle.org/current/userguide/artifact_dependencies_tutorial.html&quot;&gt;Here's&lt;/a&gt; the official Gradle page on dependency management.</source>
          <target state="translated">Java에서 Gradle을 사용한 경험이있는 사람들에게는 분명하지만 이것을 알아내는 데 시간이 걸렸습니다. &quot;Oh, 그냥 &lt;code&gt;compile 'this-or-that.jar'&lt;/code&gt; &quot;또는 이와 유사한 것을 추가하는 사람들을 볼 경우, &lt;code&gt;compile&lt;/code&gt; 은 컴파일 타임 종속성을 나타내는 build.gradle 파일의 지시어라는 것을 알아야합니다. 종속성 관리에 대한 공식 Gradle 페이지는 &lt;a href=&quot;https://docs.gradle.org/current/userguide/artifact_dependencies_tutorial.html&quot;&gt;다음과 같습니다&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="234c2a3fe24c3c2aafef39b07961d880849b9184" translate="yes" xml:space="preserve">
          <source>Also add this to Application class:</source>
          <target state="translated">또한 이것을 Application 클래스에 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">스 니펫 확장</target>
        </trans-unit>
        <trans-unit id="51c32976d4b6b341c9b2368a542e456961a6e25d" translate="yes" xml:space="preserve">
          <source>Fifth Discovery: ThreeTenABP Is Managed by Jake Wharton, not by ThreeTen</source>
          <target state="translated">다섯 번째 발견 : ThreeTenABP는 ThreeTen이 아니라 Jake Wharton에 의해 관리됩니다.</target>
        </trans-unit>
        <trans-unit id="ca523badfe96a858d4444118375d02317a8dd6ee" translate="yes" xml:space="preserve">
          <source>First Discovery: Why You Have To Use &lt;em&gt;ThreeTenABP&lt;/em&gt; Instead of &lt;em&gt;java.time&lt;/em&gt;, &lt;em&gt;ThreeTen-Backport&lt;/em&gt;, or even &lt;em&gt;Joda-Time&lt;/em&gt;</source>
          <target state="translated">첫 번째 발견 : &lt;em&gt;java.time&lt;/em&gt; , &lt;em&gt;ThreeTen-Backport&lt;/em&gt; 또는 &lt;em&gt;Joda-Time&lt;/em&gt; 대신 &lt;em&gt;ThreeTenABP를 사용해야&lt;/em&gt; 하는 이유</target>
        </trans-unit>
        <trans-unit id="15286937432855e93f11d04a17f438b14df5894a" translate="yes" xml:space="preserve">
          <source>Fourth Discovery: Project Dependencies Are Listed in [project dir]/app/build.gradle</source>
          <target state="translated">네 번째 발견 : 프로젝트 종속성이 [프로젝트 디렉토리] /app/build.gradle에 나열됩니다.</target>
        </trans-unit>
        <trans-unit id="7f9680d588b5b23072e24ad21e2bcf901def9be0" translate="yes" xml:space="preserve">
          <source>High on my to-do list is to read the Gradle docs &lt;a href=&quot;https://gradle.org/getting-started-gradle/&quot;&gt;here&lt;/a&gt;, including their free eBooks. Had I read these weeks ago when I started learning Android, I would surely have known that Gradle can use the Maven Central Repository to manage dependencies in Android Projects. Furthermore, as detailed in &lt;a href=&quot;https://stackoverflow.com/a/26630422/2065427&quot;&gt;this&lt;/a&gt; StackOverflow answer, as of Android Studio 0.8.9, Gradle uses Maven Central Repository implicitly through Bintray's JCenter, which means you don't have to do any extra config to set up the repo -- you just list the dependencies.</source>
          <target state="translated">할 일 목록에서 가장 높은 것은 무료 전자 책을 포함하여 &lt;a href=&quot;https://gradle.org/getting-started-gradle/&quot;&gt;여기&lt;/a&gt; 에서 Gradle 문서를 읽는 것입니다. 몇 주 전에 Android 학습을 시작했을 때 Gradle이 Maven Central Repository를 사용하여 Android 프로젝트의 종속성을 관리 할 수 ​​있다는 것을 알고 있었을 것입니다. 또한 &lt;a href=&quot;https://stackoverflow.com/a/26630422/2065427&quot;&gt;이&lt;/a&gt; StackOverflow 답변에 자세히 설명 된 것처럼 Android Studio 0.8.9부터 Gradle은 Bintray의 JCenter를 통해 Maven Central Repository를 암시 적으로 사용하므로 저장소를 설정하기 위해 추가 구성을 수행 할 필요가 없습니다. 의존성.</target>
        </trans-unit>
        <trans-unit id="7d88bca3ed29444fd921181e6ca50269fb0579b6" translate="yes" xml:space="preserve">
          <source>How to use ThreeTenABP in Android Project</source>
          <target state="translated">Android 프로젝트에서 ThreeTenABP를 사용하는 방법</target>
        </trans-unit>
        <trans-unit id="65913a11c393121b734aed4bbf75c9211653271b" translate="yes" xml:space="preserve">
          <source>However, &lt;code&gt;java.time&lt;/code&gt; was introduced in &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_version_history#Java_SE_8&quot;&gt;Java 8&lt;/a&gt;. Android up to &lt;a href=&quot;https://en.wikipedia.org/wiki/Android_Marshmallow&quot;&gt;Marshmallow&lt;/a&gt; runs on Java 7 (&quot;Android N&quot; is the first version to introduce Java 8 language features). Thus, unless you're only targeting &lt;a href=&quot;https://en.wikipedia.org/wiki/Android_Nougat&quot;&gt;Android N &lt;em&gt;Nougat&lt;/em&gt;&lt;/a&gt; and above, you can't rely on Java 8 language features (I'm not actually sure this is 100% true, but this is how I understand it). So &lt;code&gt;java.time&lt;/code&gt; is out.</source>
          <target state="translated">그러나 &lt;code&gt;java.time&lt;/code&gt; 은 &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_version_history#Java_SE_8&quot;&gt;Java 8&lt;/a&gt; 에서 도입되었습니다. &lt;a href=&quot;https://en.wikipedia.org/wiki/Android_Marshmallow&quot;&gt;Marshmallow 이하의&lt;/a&gt; Android는 Java 7에서 실행됩니다 ( &quot;Android N&quot;은 Java 8 언어 기능을 도입 한 첫 번째 버전입니다). 따라서 &lt;a href=&quot;https://en.wikipedia.org/wiki/Android_Nougat&quot;&gt;Android N &lt;em&gt;Nougat 이상만을&lt;/em&gt;&lt;/a&gt; 대상으로하지 않는 한 Java 8 언어 기능을 사용할 수는 없습니다 (실제로 이것이 100 % 사실인지 확실하지 않지만 이것이 내가 이해하는 방법입니다). 따라서 &lt;code&gt;java.time&lt;/code&gt; 이 종료되었습니다.</target>
        </trans-unit>
        <trans-unit id="e1623cd9e694b308f97a0270070a1ab17bfe4d6c" translate="yes" xml:space="preserve">
          <source>I am asking this question because I am new to Java and Android and I searched for hours trying to figure this out. The answer came from a combination of related answers, so I figured I would document what I learned for anyone else who may be struggling. See answer.</source>
          <target state="translated">Java 및 Android를 처음 사용하기 때문에이 질문을하고 있으며 이것을 알아 내려고 몇 시간 동안 검색했습니다. 대답은 관련 답변의 조합에서 나왔으므로 어려움을 겪고있는 다른 사람에게 배운 것을 문서화 할 것이라고 생각했습니다. 답을보십시오.</target>
        </trans-unit>
        <trans-unit id="f6a6eaeeaec5499d0673f54be0c51bf990cd7b2a" translate="yes" xml:space="preserve">
          <source>I am using Android Studio 2.1.2. My Java setup is the following:</source>
          <target state="translated">Android Studio 2.1.2를 사용하고 있습니다. 내 Java 설정은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="afae2a39e63fa3ff30f2c45097982b44646282ae" translate="yes" xml:space="preserve">
          <source>Next is &lt;a href=&quot;http://www.threeten.org/threetenbp/&quot;&gt;&lt;em&gt;ThreeTen-Backport&lt;/em&gt;&lt;/a&gt;, which back-ports much (but not all) of the Java 8 &lt;code&gt;java.time&lt;/code&gt; functionality to Java 7. This is fine for most use cases, but, as indicated in the &lt;a href=&quot;https://github.com/JakeWharton/ThreeTenABP#why-not-use-threetenbp&quot;&gt;ThreeTenABP readme&lt;/a&gt;, it has performance issues with Android.</source>
          <target state="translated">다음으로 &lt;a href=&quot;http://www.threeten.org/threetenbp/&quot;&gt;&lt;em&gt;ThreeTen-Backport&lt;/em&gt;&lt;/a&gt; 는 Java 8 &lt;code&gt;java.time&lt;/code&gt; 기능의 많은 부분을 Java 7로 백 포트합니다. 대부분의 경우에 적합하지만 &lt;a href=&quot;https://github.com/JakeWharton/ThreeTenABP#why-not-use-threetenbp&quot;&gt;ThreeTenABP 추가 정보에&lt;/a&gt; 표시된대로 성능 문제가 있습니다. 기계적 인조 인간.</target>
        </trans-unit>
        <trans-unit id="77d7408d34d8c05285e9b0dc13bd9cd08a7879d2" translate="yes" xml:space="preserve">
          <source>Now it all seems pretty easy. You can get modern time handling functions in an Android project by making sure your &lt;code&gt;[project folder]/app/build.gradle&lt;/code&gt; file has the &lt;code&gt;implementation 'com.jakewharton.threetenabp:threetenabp:1.2.1'&lt;/code&gt; line in its &lt;code&gt;dependencies&lt;/code&gt; section:</source>
          <target state="translated">이제는 매우 쉬운 것처럼 보입니다. &lt;code&gt;[project folder]/app/build.gradle&lt;/code&gt; 파일의 &lt;code&gt;dependencies&lt;/code&gt; 섹션에 &lt;code&gt;implementation 'com.jakewharton.threetenabp:threetenabp:1.2.1'&lt;/code&gt; 줄이 구현 되어 있는지 확인하여 Android 프로젝트에서 최신 시간 처리 기능을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bab5cabe857d5be048483911ddaa35642de960b3" translate="yes" xml:space="preserve">
          <source>Second Discovery: Build Tools and Dependency Management</source>
          <target state="translated">두 번째 발견 : 빌드 도구 및 종속성 관리</target>
        </trans-unit>
        <trans-unit id="c59f5b2810e3bec094a1bfeff7c4473f6bdc114b" translate="yes" xml:space="preserve">
          <source>Since compiling a program -- especially one using a bunch of external libraries -- is complex, Java almost invariably uses a &lt;a href=&quot;https://en.wikipedia.org/wiki/Build_automation&quot;&gt;&quot;build tool&quot;&lt;/a&gt; to manage the process. &lt;a href=&quot;https://en.wikipedia.org/wiki/Make_(software)&quot;&gt;&lt;em&gt;Make&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Apache_Ant&quot;&gt;&lt;em&gt;Apache Ant&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Apache_Maven&quot;&gt;&lt;em&gt;Apache Maven&lt;/em&gt;&lt;/a&gt;, and &lt;a href=&quot;https://en.wikipedia.org/wiki/Gradle&quot;&gt;&lt;em&gt;Gradle&lt;/em&gt;&lt;/a&gt; are all build tools that are used with Java programs (see &lt;a href=&quot;https://technologyconversations.com/2014/06/18/build-tools/&quot;&gt;this post&lt;/a&gt; for comparisons). As noted further down, Gradle is the chosen build tool for Android projects.</source>
          <target state="translated">프로그램 (특히 많은 외부 라이브러리를 사용하는)을 컴파일하는 것은 복잡하기 때문에 Java는 거의 항상 &lt;a href=&quot;https://en.wikipedia.org/wiki/Build_automation&quot;&gt;&quot;빌드 도구&quot;&lt;/a&gt; 를 사용하여 프로세스를 관리합니다. &lt;a href=&quot;https://en.wikipedia.org/wiki/Make_(software)&quot;&gt;&lt;em&gt;Make&lt;/em&gt;&lt;/a&gt; , &lt;a href=&quot;https://en.wikipedia.org/wiki/Apache_Ant&quot;&gt;&lt;em&gt;Apache Ant&lt;/em&gt;&lt;/a&gt; , &lt;a href=&quot;https://en.wikipedia.org/wiki/Apache_Maven&quot;&gt;&lt;em&gt;Apache Maven&lt;/em&gt;&lt;/a&gt; 및 &lt;a href=&quot;https://en.wikipedia.org/wiki/Gradle&quot;&gt;&lt;em&gt;Gradle&lt;/em&gt;&lt;/a&gt; 은 모두 Java 프로그램과 함께 사용되는 빌드 도구입니다 (비교는 &lt;a href=&quot;https://technologyconversations.com/2014/06/18/build-tools/&quot;&gt;이 게시물&lt;/a&gt; 참조). 아래에서 언급했듯이 Gradle은 Android 프로젝트 용으로 선택된 빌드 도구입니다.</target>
        </trans-unit>
        <trans-unit id="7cd4a7270c64feabc3df09bda05bd5b40b7ab61c" translate="yes" xml:space="preserve">
          <source>So the last and seemingly correct option is &lt;a href=&quot;https://github.com/JakeWharton/ThreeTenABP&quot;&gt;&lt;em&gt;ThreeTenABP&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">따라서 마지막으로 올바른 옵션은 &lt;a href=&quot;https://github.com/JakeWharton/ThreeTenABP&quot;&gt;&lt;em&gt;ThreeTenABP&lt;/em&gt;&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="cfee5ab5f67d6df1c11067e33187c3d1e0a7caaf" translate="yes" xml:space="preserve">
          <source>Summary: Making it work</source>
          <target state="translated">요약 : 작동시키기</target>
        </trans-unit>
        <trans-unit id="396e8e29c161040a31c661f24a6567aa418980a6" translate="yes" xml:space="preserve">
          <source>The most obvious solution would be to use the built-in &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/package-summary.html&quot;&gt;&lt;code&gt;java.time&lt;/code&gt;&lt;/a&gt; package, since this is the new standard way to deal with time and dates in Java. It is an implementation of &lt;a href=&quot;https://jcp.org/en/jsr/detail?id=310&quot;&gt;JSR 310&lt;/a&gt;, which was a new standard proposal for time handling based on the &lt;a href=&quot;http://www.joda.org/joda-time/&quot;&gt;Joda-Time&lt;/a&gt; library.</source>
          <target state="translated">가장 확실한 해결책은 내장 &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/package-summary.html&quot;&gt; &lt;code&gt;java.time&lt;/code&gt; &lt;/a&gt; 패키지를 사용하는 것입니다. 이것이 Java의 시간과 날짜를 처리하는 새로운 표준 방법이기 때문입니다. &lt;a href=&quot;https://jcp.org/en/jsr/detail?id=310&quot;&gt;JSR 310&lt;/a&gt; 의 구현으로, &lt;a href=&quot;http://www.joda.org/joda-time/&quot;&gt;Joda-Time&lt;/a&gt; 라이브러리를 기반으로하는 시간 처리를위한 새로운 표준 제안이었습니다.</target>
        </trans-unit>
        <trans-unit id="e518064ff9740117d564f3ecd61132e117c23f7f" translate="yes" xml:space="preserve">
          <source>The next option might be &lt;a href=&quot;http://www.joda.org/joda-time/&quot;&gt;&lt;em&gt;Joda-Time&lt;/em&gt;&lt;/a&gt;, since &lt;a href=&quot;https://www.jcp.org/en/jsr/detail?id=310&quot;&gt;JSR 310&lt;/a&gt; was based on Joda-Time. However, as the &lt;a href=&quot;https://github.com/JakeWharton/ThreeTenABP#why-not-use-threetenbp&quot;&gt;ThreeTenABP readme&lt;/a&gt; indicates, for a number of reasons, Joda-Time is not the best option.</source>
          <target state="translated">다음 옵션은 &lt;a href=&quot;https://www.jcp.org/en/jsr/detail?id=310&quot;&gt;JSR 310&lt;/a&gt; 이 Joda-Time을 기반으로했기 때문에 &lt;a href=&quot;http://www.joda.org/joda-time/&quot;&gt;&lt;em&gt;Joda-Time&lt;/em&gt;&lt;/a&gt; 일 수 있습니다. 그러나 &lt;a href=&quot;https://github.com/JakeWharton/ThreeTenABP#why-not-use-threetenbp&quot;&gt;ThreeTenABP 추가 정보에서&lt;/a&gt; 알 수 있듯이 여러 가지 이유로 Joda-Time이 최선의 옵션이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="b889451f235571367bb20058e2dfe4e3827d56b9" translate="yes" xml:space="preserve">
          <source>These build tools include dependency management. Apache Maven appears to be the first to include a centralized package repository. Maven introduced the &lt;a href=&quot;https://search.maven.org/&quot;&gt;Maven Central Repository&lt;/a&gt;, which allows functionality equivalent to php's &lt;code&gt;composer&lt;/code&gt; with Packagist and Ruby's &lt;code&gt;gem&lt;/code&gt; with rubygems.org. In other words, the Maven Central Repository is to Maven (and Gradle) what Packagist is to composer -- a definitive and secure source for versioned packages.</source>
          <target state="translated">이러한 빌드 도구에는 종속성 관리가 포함됩니다. Apache Maven은 중앙 집중식 패키지 저장소를 포함하는 최초의 것으로 보입니다. 메이븐은 &lt;a href=&quot;https://search.maven.org/&quot;&gt;메이븐 센트럴 리포지토리 (Maven Central Repository&lt;/a&gt; )를 도입했다.이 패키지는 Packagist와 PHP의 &lt;code&gt;composer&lt;/code&gt; 와 rubygems.org의 루비의 &lt;code&gt;gem&lt;/code&gt; 과 동등한 기능을 가능하게한다. 다시 말해, Maven Central Repository는 Packagist가 작곡가에 대해 Maven (및 Gradle)을위한 것입니다. 버전 화 된 패키지를위한 결정적이고 안전한 소스입니다.</target>
        </trans-unit>
        <trans-unit id="768315b79cd10966f62c991e59d5e08270da1b88" translate="yes" xml:space="preserve">
          <source>Third Discovery: Gradle Handles Dependencies in Android Projects</source>
          <target state="translated">세 번째 발견 : Gradle, Android 프로젝트의 종속성 처리</target>
        </trans-unit>
        <trans-unit id="d869f5d32af6871802766705bf1d1cc9725fef0c" translate="yes" xml:space="preserve">
          <source>This is a really short version of the VERY LONG PROCESS of defining a new standard. All of these packages are pretty much the same thing: libraries that provide good, modern time handling functionality for Java. The differences are subtle but important.</source>
          <target state="translated">이것은 새로운 표준을 정의하는 매우 긴 프로세스의 매우 짧은 버전입니다. 이 모든 패키지는 거의 동일합니다. Java를위한 현대적이고 우수한 시간 처리 기능을 제공하는 라이브러리입니다. 차이점은 미묘하지만 중요합니다.</target>
        </trans-unit>
        <trans-unit id="31453897e93fc7f649fa022be2317aee5c16edb2" translate="yes" xml:space="preserve">
          <source>When I first hit this github repo, I didn't know what that compile line meant, and I tried to run it in my terminal (with an obvious and predictable failure). Frustrated, I didn't return to it until long after I figured the rest out, and finally realized that it's a Maven Repo line pointing to the &lt;code&gt;com.jakewharton.threetenabp&lt;/code&gt; repo, as opposed to the &lt;code&gt;org.threeten&lt;/code&gt; repo. That's why I thought the ThreeTenABP package wasn't in the Maven repo.</source>
          <target state="translated">처음 으로이 github 저장소에 도달했을 때, 나는 그 컴파일 라인이 무엇을 의미하는지 알지 못했고 터미널에서 실행하려고 시도했습니다 (명확하고 예측 가능한 실패). 좌절, 나는 나머지를 알아 낸 후 오랫동안 돌아 오지 않았고 마침내 &lt;code&gt;com.jakewharton.threetenabp&lt;/code&gt; repo와는 반대로 com.jakewharton.threetenabp repo를 가리키는 Maven Repo 라인임을 깨달았습니다. 그래서 ThreeTenABP 패키지가 Maven 저장소에 없다고 생각했습니다.</target>
        </trans-unit>
        <trans-unit id="bab2aac07d102f5a191b285de99054d2ad86bfbe" translate="yes" xml:space="preserve">
          <source>Yet another issue I spent too much time figuring out. If you look for ThreeTen in Maven Central, you'll only see packages for &lt;code&gt;threetenbp&lt;/code&gt;, not &lt;code&gt;threetenabp&lt;/code&gt;. If you go to the &lt;a href=&quot;https://github.com/JakeWharton/ThreeTenABP&quot;&gt;github repo for ThreeTenABP&lt;/a&gt;, you'll see that infamous &lt;code&gt;compile 'this-or-that'&lt;/code&gt; line under the Download section of the Readme.</source>
          <target state="translated">또 다른 문제는 알아내는 데 너무 많은 시간을 보냈습니다. Maven Central에서 &lt;code&gt;threetenbp&lt;/code&gt; 을 찾으면 threetenabp 가 아닌 &lt;code&gt;threetenabp&lt;/code&gt; 패키지 만 볼 수 있습니다. &lt;a href=&quot;https://github.com/JakeWharton/ThreeTenABP&quot;&gt;ThreeTenABP&lt;/a&gt; 의 github 리포지토리 로 가면 Readme의 다운로드 섹션에있는 악명 높은 &lt;code&gt;compile 'this-or-that'&lt;/code&gt; 줄이 표시됩니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
