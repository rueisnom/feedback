<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/38922754">
    <body>
      <group id="38922754">
        <trans-unit id="8b386deca9817df4d9d4e35b35696c47d7c22b92" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Add the following in your build gradle file in Android Studio.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Android StudioのビルドGradleファイルに以下を追加します。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="043c1435d1a44ba8a90d5868a5f9dd20fd27cb98" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Create the Application class and initialize it.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Applicationクラスを作成して初期化します。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="81c0f51881f9e57861ba31f7d4bfe757dbd63520" translate="yes" xml:space="preserve">
          <source>Again, obvious to those who have any experience using Gradle in Java, but it took me a while to figure this out. If you see people saying &quot;Oh, just add &lt;code&gt;compile 'this-or-that.jar'&lt;/code&gt;&quot; or something similar, know that &lt;code&gt;compile&lt;/code&gt; is a directive in that build.gradle file that indicates compile-time dependencies. &lt;a href=&quot;https://docs.gradle.org/current/userguide/artifact_dependencies_tutorial.html&quot;&gt;Here's&lt;/a&gt; the official Gradle page on dependency management.</source>
          <target state="translated">繰り返しますが、JavaでGradleを使用した経験のある人には明らかですが、これを理解するにはしばらく時間がかかりました。 「ああ、ただ &lt;code&gt;compile 'this-or-that.jar'&lt;/code&gt; を追加する」などと言っている人を見かけたら、 &lt;code&gt;compile&lt;/code&gt; はbuild.gradleファイル内のディレクティブであり、コンパイル時の依存関係を示します。 依存関係管理に関する公式のGradleページは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="234c2a3fe24c3c2aafef39b07961d880849b9184" translate="yes" xml:space="preserve">
          <source>Also add this to Application class:</source>
          <target state="translated">アプリケーションクラスにも追加します。</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">スニペットを展開</target>
        </trans-unit>
        <trans-unit id="51c32976d4b6b341c9b2368a542e456961a6e25d" translate="yes" xml:space="preserve">
          <source>Fifth Discovery: ThreeTenABP Is Managed by Jake Wharton, not by ThreeTen</source>
          <target state="translated">フィフス・ディスカバリー ThreeTenABPはThreeTenではなくジェイク・ウォートンが管理している</target>
        </trans-unit>
        <trans-unit id="ca523badfe96a858d4444118375d02317a8dd6ee" translate="yes" xml:space="preserve">
          <source>First Discovery: Why You Have To Use &lt;em&gt;ThreeTenABP&lt;/em&gt; Instead of &lt;em&gt;java.time&lt;/em&gt;, &lt;em&gt;ThreeTen-Backport&lt;/em&gt;, or even &lt;em&gt;Joda-Time&lt;/em&gt;</source>
          <target state="translated">最初の発見： &lt;em&gt;java.time&lt;/em&gt; 、 &lt;em&gt;ThreeTen-Backport&lt;/em&gt; 、または&lt;em&gt;Joda-&lt;/em&gt; &lt;em&gt;Timeの&lt;/em&gt;代わりに&lt;em&gt;ThreeTenABP&lt;/em&gt;を使用する&lt;em&gt;必要&lt;/em&gt;がある&lt;em&gt;理由&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="15286937432855e93f11d04a17f438b14df5894a" translate="yes" xml:space="preserve">
          <source>Fourth Discovery: Project Dependencies Are Listed in [project dir]/app/build.gradle</source>
          <target state="translated">4つ目の発見。プロジェクトの依存関係が [project dir]appbuild.gradle に記載されている</target>
        </trans-unit>
        <trans-unit id="7f9680d588b5b23072e24ad21e2bcf901def9be0" translate="yes" xml:space="preserve">
          <source>High on my to-do list is to read the Gradle docs &lt;a href=&quot;https://gradle.org/getting-started-gradle/&quot;&gt;here&lt;/a&gt;, including their free eBooks. Had I read these weeks ago when I started learning Android, I would surely have known that Gradle can use the Maven Central Repository to manage dependencies in Android Projects. Furthermore, as detailed in &lt;a href=&quot;https://stackoverflow.com/a/26630422/2065427&quot;&gt;this&lt;/a&gt; StackOverflow answer, as of Android Studio 0.8.9, Gradle uses Maven Central Repository implicitly through Bintray's JCenter, which means you don't have to do any extra config to set up the repo -- you just list the dependencies.</source>
          <target state="translated">私のやるべきことの上位は、無料の電子ブックを含め、 &lt;a href=&quot;https://gradle.org/getting-started-gradle/&quot;&gt;ここ&lt;/a&gt;でGradleドキュメントを読むことです。 Androidの学習を始めた数週間前に読んだとしたら、GradleがMaven Central Repositoryを使用してAndroidプロジェクトの依存関係を管理できることは確かに知っていただろう。 さらに、 &lt;a href=&quot;https://stackoverflow.com/a/26630422/2065427&quot;&gt;この&lt;/a&gt; StackOverflowの回答で詳しく説明されているように、Android Studio 0.8.9以降、GradleはBintrayのJCenterを通じて暗黙的にMaven Central Repositoryを使用します。つまり、リポジトリを設定するために追加の構成を行う必要はありません。依存関係。</target>
        </trans-unit>
        <trans-unit id="7d88bca3ed29444fd921181e6ca50269fb0579b6" translate="yes" xml:space="preserve">
          <source>How to use ThreeTenABP in Android Project</source>
          <target state="translated">AndroidプロジェクトでのThreeTenABPの使い方</target>
        </trans-unit>
        <trans-unit id="65913a11c393121b734aed4bbf75c9211653271b" translate="yes" xml:space="preserve">
          <source>However, &lt;code&gt;java.time&lt;/code&gt; was introduced in &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_version_history#Java_SE_8&quot;&gt;Java 8&lt;/a&gt;. Android up to &lt;a href=&quot;https://en.wikipedia.org/wiki/Android_Marshmallow&quot;&gt;Marshmallow&lt;/a&gt; runs on Java 7 (&quot;Android N&quot; is the first version to introduce Java 8 language features). Thus, unless you're only targeting &lt;a href=&quot;https://en.wikipedia.org/wiki/Android_Nougat&quot;&gt;Android N &lt;em&gt;Nougat&lt;/em&gt;&lt;/a&gt; and above, you can't rely on Java 8 language features (I'm not actually sure this is 100% true, but this is how I understand it). So &lt;code&gt;java.time&lt;/code&gt; is out.</source>
          <target state="translated">ただし、 &lt;code&gt;java.time&lt;/code&gt; は&lt;a href=&quot;https://en.wikipedia.org/wiki/Java_version_history#Java_SE_8&quot;&gt;Java 8で&lt;/a&gt;導入されました。 &lt;a href=&quot;https://en.wikipedia.org/wiki/Android_Marshmallow&quot;&gt;マシュマロ&lt;/a&gt;までのAndroidはJava 7で動作します（「Android N」はJava 8言語機能を導入した最初のバージョンです）。 したがって、 &lt;a href=&quot;https://en.wikipedia.org/wiki/Android_Nougat&quot;&gt;Android N &lt;em&gt;Nougat&lt;/em&gt;&lt;/a&gt;以上のみを対象としているのでない限り、Java 8言語機能に依存することはできません（これが100％trueであるかどうかは実際にはわかりませんが、これが私の理解です）。 だから &lt;code&gt;java.time&lt;/code&gt; が出ました。</target>
        </trans-unit>
        <trans-unit id="e1623cd9e694b308f97a0270070a1ab17bfe4d6c" translate="yes" xml:space="preserve">
          <source>I am asking this question because I am new to Java and Android and I searched for hours trying to figure this out. The answer came from a combination of related answers, so I figured I would document what I learned for anyone else who may be struggling. See answer.</source>
          <target state="translated">私がこの質問をしているのは、私がJavaとAndroidの初心者で、これを理解しようとして何時間も検索したからです。答えは関連する回答の組み合わせから出てきたので、苦労しているかもしれない他の人のために、私が学んだことを文書化しようと考えました。答えを参照してください。</target>
        </trans-unit>
        <trans-unit id="f6a6eaeeaec5499d0673f54be0c51bf990cd7b2a" translate="yes" xml:space="preserve">
          <source>I am using Android Studio 2.1.2. My Java setup is the following:</source>
          <target state="translated">私はAndroid Studio 2.1.2を使用しています。私のJavaの設定は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="afae2a39e63fa3ff30f2c45097982b44646282ae" translate="yes" xml:space="preserve">
          <source>Next is &lt;a href=&quot;http://www.threeten.org/threetenbp/&quot;&gt;&lt;em&gt;ThreeTen-Backport&lt;/em&gt;&lt;/a&gt;, which back-ports much (but not all) of the Java 8 &lt;code&gt;java.time&lt;/code&gt; functionality to Java 7. This is fine for most use cases, but, as indicated in the &lt;a href=&quot;https://github.com/JakeWharton/ThreeTenABP#why-not-use-threetenbp&quot;&gt;ThreeTenABP readme&lt;/a&gt;, it has performance issues with Android.</source>
          <target state="translated">次は&lt;a href=&quot;http://www.threeten.org/threetenbp/&quot;&gt;&lt;em&gt;ThreeTen-Backport&lt;/em&gt;&lt;/a&gt;です。これは、Java 8の &lt;code&gt;java.time&lt;/code&gt; 機能の多く（すべてではない）をJava 7にバックポートします。これはほとんどのユースケースで問題あり&lt;a href=&quot;https://github.com/JakeWharton/ThreeTenABP#why-not-use-threetenbp&quot;&gt;ません&lt;/a&gt;が、 ThreeTenABP readmeに示されているように、アンドロイド。</target>
        </trans-unit>
        <trans-unit id="77d7408d34d8c05285e9b0dc13bd9cd08a7879d2" translate="yes" xml:space="preserve">
          <source>Now it all seems pretty easy. You can get modern time handling functions in an Android project by making sure your &lt;code&gt;[project folder]/app/build.gradle&lt;/code&gt; file has the &lt;code&gt;implementation 'com.jakewharton.threetenabp:threetenabp:1.2.1'&lt;/code&gt; line in its &lt;code&gt;dependencies&lt;/code&gt; section:</source>
          <target state="translated">今ではすべてがとても簡単に思えます。 &lt;code&gt;[project folder]/app/build.gradle&lt;/code&gt; ファイルの &lt;code&gt;dependencies&lt;/code&gt; セクションに &lt;code&gt;implementation 'com.jakewharton.threetenabp:threetenabp:1.2.1'&lt;/code&gt; 行があることを確認することで、Androidプロジェクトで最新の時間処理機能を取得できます 。</target>
        </trans-unit>
        <trans-unit id="bab5cabe857d5be048483911ddaa35642de960b3" translate="yes" xml:space="preserve">
          <source>Second Discovery: Build Tools and Dependency Management</source>
          <target state="translated">第二の発見。ビルドツールと依存関係管理</target>
        </trans-unit>
        <trans-unit id="c59f5b2810e3bec094a1bfeff7c4473f6bdc114b" translate="yes" xml:space="preserve">
          <source>Since compiling a program -- especially one using a bunch of external libraries -- is complex, Java almost invariably uses a &lt;a href=&quot;https://en.wikipedia.org/wiki/Build_automation&quot;&gt;&quot;build tool&quot;&lt;/a&gt; to manage the process. &lt;a href=&quot;https://en.wikipedia.org/wiki/Make_(software)&quot;&gt;&lt;em&gt;Make&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Apache_Ant&quot;&gt;&lt;em&gt;Apache Ant&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Apache_Maven&quot;&gt;&lt;em&gt;Apache Maven&lt;/em&gt;&lt;/a&gt;, and &lt;a href=&quot;https://en.wikipedia.org/wiki/Gradle&quot;&gt;&lt;em&gt;Gradle&lt;/em&gt;&lt;/a&gt; are all build tools that are used with Java programs (see &lt;a href=&quot;https://technologyconversations.com/2014/06/18/build-tools/&quot;&gt;this post&lt;/a&gt; for comparisons). As noted further down, Gradle is the chosen build tool for Android projects.</source>
          <target state="translated">プログラムのコンパイル（特に、外部ライブラリの束を使用するプログラム）は複雑であるため、Javaはほぼ常に&lt;a href=&quot;https://en.wikipedia.org/wiki/Build_automation&quot;&gt;「ビルドツール」&lt;/a&gt;を使用してプロセスを管理します。 &lt;a href=&quot;https://en.wikipedia.org/wiki/Make_(software)&quot;&gt;&lt;em&gt;Make&lt;/em&gt;&lt;/a&gt; 、 &lt;a href=&quot;https://en.wikipedia.org/wiki/Apache_Ant&quot;&gt;&lt;em&gt;Apache Ant&lt;/em&gt;&lt;/a&gt; 、 &lt;a href=&quot;https://en.wikipedia.org/wiki/Apache_Maven&quot;&gt;&lt;em&gt;Apache Maven&lt;/em&gt;&lt;/a&gt; 、および&lt;a href=&quot;https://en.wikipedia.org/wiki/Gradle&quot;&gt;&lt;em&gt;Gradle&lt;/em&gt;&lt;/a&gt;はすべて、Javaプログラムで使用されるビルドツールです（比較については、 &lt;a href=&quot;https://technologyconversations.com/2014/06/18/build-tools/&quot;&gt;この投稿&lt;/a&gt;を参照してください）。 後で説明するように、GradleはAndroidプロジェクト用に選択されたビルドツールです。</target>
        </trans-unit>
        <trans-unit id="7cd4a7270c64feabc3df09bda05bd5b40b7ab61c" translate="yes" xml:space="preserve">
          <source>So the last and seemingly correct option is &lt;a href=&quot;https://github.com/JakeWharton/ThreeTenABP&quot;&gt;&lt;em&gt;ThreeTenABP&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">したがって、最後の、一見正しいオプションは&lt;a href=&quot;https://github.com/JakeWharton/ThreeTenABP&quot;&gt;&lt;em&gt;ThreeTenABP&lt;/em&gt;&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="cfee5ab5f67d6df1c11067e33187c3d1e0a7caaf" translate="yes" xml:space="preserve">
          <source>Summary: Making it work</source>
          <target state="translated">まとめ:うまくいくようにするために</target>
        </trans-unit>
        <trans-unit id="396e8e29c161040a31c661f24a6567aa418980a6" translate="yes" xml:space="preserve">
          <source>The most obvious solution would be to use the built-in &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/package-summary.html&quot;&gt;&lt;code&gt;java.time&lt;/code&gt;&lt;/a&gt; package, since this is the new standard way to deal with time and dates in Java. It is an implementation of &lt;a href=&quot;https://jcp.org/en/jsr/detail?id=310&quot;&gt;JSR 310&lt;/a&gt;, which was a new standard proposal for time handling based on the &lt;a href=&quot;http://www.joda.org/joda-time/&quot;&gt;Joda-Time&lt;/a&gt; library.</source>
          <target state="translated">最も明白な解決策は、組み込みの&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/package-summary.html&quot;&gt; &lt;code&gt;java.time&lt;/code&gt; &lt;/a&gt;パッケージを使用することです。これは、Javaで時刻と日付を処理するための新しい標準的な方法だからです。 これは、 &lt;a href=&quot;http://www.joda.org/joda-time/&quot;&gt;Joda-Time&lt;/a&gt;ライブラリに基づく時間処理の新しい標準提案である&lt;a href=&quot;https://jcp.org/en/jsr/detail?id=310&quot;&gt;JSR 310の&lt;/a&gt;実装です。</target>
        </trans-unit>
        <trans-unit id="e518064ff9740117d564f3ecd61132e117c23f7f" translate="yes" xml:space="preserve">
          <source>The next option might be &lt;a href=&quot;http://www.joda.org/joda-time/&quot;&gt;&lt;em&gt;Joda-Time&lt;/em&gt;&lt;/a&gt;, since &lt;a href=&quot;https://www.jcp.org/en/jsr/detail?id=310&quot;&gt;JSR 310&lt;/a&gt; was based on Joda-Time. However, as the &lt;a href=&quot;https://github.com/JakeWharton/ThreeTenABP#why-not-use-threetenbp&quot;&gt;ThreeTenABP readme&lt;/a&gt; indicates, for a number of reasons, Joda-Time is not the best option.</source>
          <target state="translated">&lt;a href=&quot;https://www.jcp.org/en/jsr/detail?id=310&quot;&gt;JSR 310&lt;/a&gt;はJoda-Timeに基づいていたため、次のオプションは&lt;a href=&quot;http://www.joda.org/joda-time/&quot;&gt;&lt;em&gt;Joda-Time&lt;/em&gt;&lt;/a&gt;かもしれません。 ただし、 &lt;a href=&quot;https://github.com/JakeWharton/ThreeTenABP#why-not-use-threetenbp&quot;&gt;ThreeTenABPのReadmeに&lt;/a&gt;示されているように、 さまざまな理由から、 Joda -Timeは最適なオプションではありません。</target>
        </trans-unit>
        <trans-unit id="b889451f235571367bb20058e2dfe4e3827d56b9" translate="yes" xml:space="preserve">
          <source>These build tools include dependency management. Apache Maven appears to be the first to include a centralized package repository. Maven introduced the &lt;a href=&quot;https://search.maven.org/&quot;&gt;Maven Central Repository&lt;/a&gt;, which allows functionality equivalent to php's &lt;code&gt;composer&lt;/code&gt; with Packagist and Ruby's &lt;code&gt;gem&lt;/code&gt; with rubygems.org. In other words, the Maven Central Repository is to Maven (and Gradle) what Packagist is to composer -- a definitive and secure source for versioned packages.</source>
          <target state="translated">これらのビルドツールには、依存関係管理が含まれます。 Apache Mavenは、一元化されたパッケージリポジトリを最初に組み込んだようです。 Mavenは&lt;a href=&quot;https://search.maven.org/&quot;&gt;Maven Central Repositoryを&lt;/a&gt;導入しました。これにより、Packagistを使用したphpの &lt;code&gt;composer&lt;/code&gt; およびrubygems.orgを使用したRubyの &lt;code&gt;gem&lt;/code&gt; と同等の機能が可能になります。 言い換えると、Mavenセントラルリポジトリは、Maven（およびGradle）にとって、Packagistが作曲するものであり、バージョン管理されたパッケージの確実で安全なソースです。</target>
        </trans-unit>
        <trans-unit id="768315b79cd10966f62c991e59d5e08270da1b88" translate="yes" xml:space="preserve">
          <source>Third Discovery: Gradle Handles Dependencies in Android Projects</source>
          <target state="translated">第三の発見。GradleはAndroidプロジェクトで依存関係を扱う</target>
        </trans-unit>
        <trans-unit id="d869f5d32af6871802766705bf1d1cc9725fef0c" translate="yes" xml:space="preserve">
          <source>This is a really short version of the VERY LONG PROCESS of defining a new standard. All of these packages are pretty much the same thing: libraries that provide good, modern time handling functionality for Java. The differences are subtle but important.</source>
          <target state="translated">これは、新しい標準を定義するという非常に長いプロセスの本当に短いバージョンです。これらのパッケージはすべて、Javaのための優れた現代的な時間処理機能を提供するライブラリであり、ほとんど同じものです。違いは微妙ですが、重要です。</target>
        </trans-unit>
        <trans-unit id="31453897e93fc7f649fa022be2317aee5c16edb2" translate="yes" xml:space="preserve">
          <source>When I first hit this github repo, I didn't know what that compile line meant, and I tried to run it in my terminal (with an obvious and predictable failure). Frustrated, I didn't return to it until long after I figured the rest out, and finally realized that it's a Maven Repo line pointing to the &lt;code&gt;com.jakewharton.threetenabp&lt;/code&gt; repo, as opposed to the &lt;code&gt;org.threeten&lt;/code&gt; repo. That's why I thought the ThreeTenABP package wasn't in the Maven repo.</source>
          <target state="translated">私が最初にこのgithubリポジトリにアクセスしたとき、そのコンパイル行が何を意味するのかわからなかったため、ターミナルで実行しようとしました（明らかで予測可能なエラーが発生しました）。 イライラして、私は残りの部分を理解してからしばらくして戻ってきませんでしたが、 &lt;code&gt;com.jakewharton.threetenabp&lt;/code&gt; リポジトリではなく、 com.jakewharton.threetenabpリポジトリを指しているMavenリポジトリの行であることにようやく気付きました。 そのため、ThreeTenABPパッケージはMavenリポジトリに含まれていないと思いました。</target>
        </trans-unit>
        <trans-unit id="bab2aac07d102f5a191b285de99054d2ad86bfbe" translate="yes" xml:space="preserve">
          <source>Yet another issue I spent too much time figuring out. If you look for ThreeTen in Maven Central, you'll only see packages for &lt;code&gt;threetenbp&lt;/code&gt;, not &lt;code&gt;threetenabp&lt;/code&gt;. If you go to the &lt;a href=&quot;https://github.com/JakeWharton/ThreeTenABP&quot;&gt;github repo for ThreeTenABP&lt;/a&gt;, you'll see that infamous &lt;code&gt;compile 'this-or-that'&lt;/code&gt; line under the Download section of the Readme.</source>
          <target state="translated">さらに別の問題で、考え出すのに時間がかかりすぎました。 Maven CentralでThreeTenを探すと、 &lt;code&gt;threetenbp&lt;/code&gt; ではなく &lt;code&gt;threetenabp&lt;/code&gt; パッケージのみが表示されます。 &lt;a href=&quot;https://github.com/JakeWharton/ThreeTenABP&quot;&gt;ThreeTenABP&lt;/a&gt;のgithubリポジトリにアクセス &lt;code&gt;compile 'this-or-that'&lt;/code&gt; と、Readmeのダウンロードセクションにある悪名高いコンパイル「this-or-that」行が表示されます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
