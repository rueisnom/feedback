<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/38922754">
    <body>
      <group id="38922754">
        <trans-unit id="8b386deca9817df4d9d4e35b35696c47d7c22b92" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Add the following in your build gradle file in Android Studio.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;在Android Studio的构建gradle文件中添加以下内容。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="043c1435d1a44ba8a90d5868a5f9dd20fd27cb98" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Create the Application class and initialize it.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;创建Application类并对其进行初始化。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="81c0f51881f9e57861ba31f7d4bfe757dbd63520" translate="yes" xml:space="preserve">
          <source>Again, obvious to those who have any experience using Gradle in Java, but it took me a while to figure this out. If you see people saying &quot;Oh, just add &lt;code&gt;compile 'this-or-that.jar'&lt;/code&gt;&quot; or something similar, know that &lt;code&gt;compile&lt;/code&gt; is a directive in that build.gradle file that indicates compile-time dependencies. &lt;a href=&quot;https://docs.gradle.org/current/userguide/artifact_dependencies_tutorial.html&quot;&gt;Here's&lt;/a&gt; the official Gradle page on dependency management.</source>
          <target state="translated">同样，对于那些在Java中使用Gradle有任何经验的人来说是显而易见的，但是花了我一段时间才弄清楚了。 如果您看到有人说&amp;ldquo;哦，只需添加 &lt;code&gt;compile 'this-or-that.jar'&lt;/code&gt; 或类似的东西，请知道 &lt;code&gt;compile&lt;/code&gt; 是该build.gradle文件中的指示编译时依赖性的指令。 &lt;a href=&quot;https://docs.gradle.org/current/userguide/artifact_dependencies_tutorial.html&quot;&gt;这是&lt;/a&gt;有关依赖管理的官方Gradle页面。</target>
        </trans-unit>
        <trans-unit id="234c2a3fe24c3c2aafef39b07961d880849b9184" translate="yes" xml:space="preserve">
          <source>Also add this to Application class:</source>
          <target state="translated">同时将此添加到应用类中。</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">扩展片段</target>
        </trans-unit>
        <trans-unit id="51c32976d4b6b341c9b2368a542e456961a6e25d" translate="yes" xml:space="preserve">
          <source>Fifth Discovery: ThreeTenABP Is Managed by Jake Wharton, not by ThreeTen</source>
          <target state="translated">第五发现。ThreeTenABP由Jake Wharton管理,而不是ThreeTen管理</target>
        </trans-unit>
        <trans-unit id="ca523badfe96a858d4444118375d02317a8dd6ee" translate="yes" xml:space="preserve">
          <source>First Discovery: Why You Have To Use &lt;em&gt;ThreeTenABP&lt;/em&gt; Instead of &lt;em&gt;java.time&lt;/em&gt;, &lt;em&gt;ThreeTen-Backport&lt;/em&gt;, or even &lt;em&gt;Joda-Time&lt;/em&gt;</source>
          <target state="translated">第一个发现：为什么必须使用&lt;em&gt;ThreeTenABP&lt;/em&gt;代替&lt;em&gt;java.time&lt;/em&gt; ， &lt;em&gt;ThreeTen-Backport&lt;/em&gt;甚至是&lt;em&gt;Joda-Time&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="15286937432855e93f11d04a17f438b14df5894a" translate="yes" xml:space="preserve">
          <source>Fourth Discovery: Project Dependencies Are Listed in [project dir]/app/build.gradle</source>
          <target state="translated">第四发现。项目依赖关系被列在[project dir]appbuild.gradle中。</target>
        </trans-unit>
        <trans-unit id="7f9680d588b5b23072e24ad21e2bcf901def9be0" translate="yes" xml:space="preserve">
          <source>High on my to-do list is to read the Gradle docs &lt;a href=&quot;https://gradle.org/getting-started-gradle/&quot;&gt;here&lt;/a&gt;, including their free eBooks. Had I read these weeks ago when I started learning Android, I would surely have known that Gradle can use the Maven Central Repository to manage dependencies in Android Projects. Furthermore, as detailed in &lt;a href=&quot;https://stackoverflow.com/a/26630422/2065427&quot;&gt;this&lt;/a&gt; StackOverflow answer, as of Android Studio 0.8.9, Gradle uses Maven Central Repository implicitly through Bintray's JCenter, which means you don't have to do any extra config to set up the repo -- you just list the dependencies.</source>
          <target state="translated">在我的工作清单上最重要的是在&lt;a href=&quot;https://gradle.org/getting-started-gradle/&quot;&gt;这里&lt;/a&gt;阅读Gradle文档，包括其免费电子书。 如果这些星期前我开始学习Android时已经读过，那么我肯定会知道Gradle可以使用Maven Central信息库来管理Android项目中的依赖项。 此外，如&lt;a href=&quot;https://stackoverflow.com/a/26630422/2065427&quot;&gt;该&lt;/a&gt; StackOverflow答案中所述，从Android Studio 0.8.9开始，Gradle通过Bintray的JCenter隐式使用了Maven Central Repository，这意味着您无需进行任何额外的配置即可设置存储库-您只需列出依赖性。</target>
        </trans-unit>
        <trans-unit id="7d88bca3ed29444fd921181e6ca50269fb0579b6" translate="yes" xml:space="preserve">
          <source>How to use ThreeTenABP in Android Project</source>
          <target state="translated">如何在安卓项目中使用ThreeTenABP?</target>
        </trans-unit>
        <trans-unit id="65913a11c393121b734aed4bbf75c9211653271b" translate="yes" xml:space="preserve">
          <source>However, &lt;code&gt;java.time&lt;/code&gt; was introduced in &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_version_history#Java_SE_8&quot;&gt;Java 8&lt;/a&gt;. Android up to &lt;a href=&quot;https://en.wikipedia.org/wiki/Android_Marshmallow&quot;&gt;Marshmallow&lt;/a&gt; runs on Java 7 (&quot;Android N&quot; is the first version to introduce Java 8 language features). Thus, unless you're only targeting &lt;a href=&quot;https://en.wikipedia.org/wiki/Android_Nougat&quot;&gt;Android N &lt;em&gt;Nougat&lt;/em&gt;&lt;/a&gt; and above, you can't rely on Java 8 language features (I'm not actually sure this is 100% true, but this is how I understand it). So &lt;code&gt;java.time&lt;/code&gt; is out.</source>
          <target state="translated">但是， &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_version_history#Java_SE_8&quot;&gt;Java 8&lt;/a&gt;是在Java 8中引入的。 高达&lt;a href=&quot;https://en.wikipedia.org/wiki/Android_Marshmallow&quot;&gt;Marshmallow的&lt;/a&gt; Android可在Java 7上运行（&amp;ldquo; Android N&amp;rdquo;是第一个引入Java 8语言功能的版本）。 因此，除非您仅针对&lt;a href=&quot;https://en.wikipedia.org/wiki/Android_Nougat&quot;&gt;Android N &lt;em&gt;Nougat&lt;/em&gt;&lt;/a&gt;及更高版本 ，否则您不能依赖Java 8语言功能（我不确定这是否100％正确，但这是我的理解）。 所以 &lt;code&gt;java.time&lt;/code&gt; 了。</target>
        </trans-unit>
        <trans-unit id="e1623cd9e694b308f97a0270070a1ab17bfe4d6c" translate="yes" xml:space="preserve">
          <source>I am asking this question because I am new to Java and Android and I searched for hours trying to figure this out. The answer came from a combination of related answers, so I figured I would document what I learned for anyone else who may be struggling. See answer.</source>
          <target state="translated">我问这个问题,是因为我对Java和Android是个新手,我找了好几个小时试图弄清楚这个问题。答案来自于相关答案的组合,所以我想把我所学到的东西记录下来,供其他可能正在纠结的人参考。请看答案。</target>
        </trans-unit>
        <trans-unit id="f6a6eaeeaec5499d0673f54be0c51bf990cd7b2a" translate="yes" xml:space="preserve">
          <source>I am using Android Studio 2.1.2. My Java setup is the following:</source>
          <target state="translated">我使用的是Android Studio 2.1.2。我的Java设置如下。</target>
        </trans-unit>
        <trans-unit id="afae2a39e63fa3ff30f2c45097982b44646282ae" translate="yes" xml:space="preserve">
          <source>Next is &lt;a href=&quot;http://www.threeten.org/threetenbp/&quot;&gt;&lt;em&gt;ThreeTen-Backport&lt;/em&gt;&lt;/a&gt;, which back-ports much (but not all) of the Java 8 &lt;code&gt;java.time&lt;/code&gt; functionality to Java 7. This is fine for most use cases, but, as indicated in the &lt;a href=&quot;https://github.com/JakeWharton/ThreeTenABP#why-not-use-threetenbp&quot;&gt;ThreeTenABP readme&lt;/a&gt;, it has performance issues with Android.</source>
          <target state="translated">接下来是&lt;a href=&quot;http://www.threeten.org/threetenbp/&quot;&gt;&lt;em&gt;ThreeTen-Backport&lt;/em&gt;&lt;/a&gt; ，它将很多（但不是全部）Java 8 &lt;code&gt;java.time&lt;/code&gt; 功能向后移植到Java7 。这对于大多数用例来说都很好，但是，如&lt;a href=&quot;https://github.com/JakeWharton/ThreeTenABP#why-not-use-threetenbp&quot;&gt;ThreeTenABP自述文件所述&lt;/a&gt; ，它存在性能问题。安卓</target>
        </trans-unit>
        <trans-unit id="77d7408d34d8c05285e9b0dc13bd9cd08a7879d2" translate="yes" xml:space="preserve">
          <source>Now it all seems pretty easy. You can get modern time handling functions in an Android project by making sure your &lt;code&gt;[project folder]/app/build.gradle&lt;/code&gt; file has the &lt;code&gt;implementation 'com.jakewharton.threetenabp:threetenabp:1.2.1'&lt;/code&gt; line in its &lt;code&gt;dependencies&lt;/code&gt; section:</source>
          <target state="translated">现在一切似乎都很容易。 通过确保您的 &lt;code&gt;[project folder]/app/build.gradle&lt;/code&gt; 文件在其 &lt;code&gt;dependencies&lt;/code&gt; 部分中具有 &lt;code&gt;implementation 'com.jakewharton.threetenabp:threetenabp:1.2.1'&lt;/code&gt; 行，您可以在Android项目中获得现代时间处理功能：</target>
        </trans-unit>
        <trans-unit id="bab5cabe857d5be048483911ddaa35642de960b3" translate="yes" xml:space="preserve">
          <source>Second Discovery: Build Tools and Dependency Management</source>
          <target state="translated">第二次发现。构建工具和依赖性管理</target>
        </trans-unit>
        <trans-unit id="c59f5b2810e3bec094a1bfeff7c4473f6bdc114b" translate="yes" xml:space="preserve">
          <source>Since compiling a program -- especially one using a bunch of external libraries -- is complex, Java almost invariably uses a &lt;a href=&quot;https://en.wikipedia.org/wiki/Build_automation&quot;&gt;&quot;build tool&quot;&lt;/a&gt; to manage the process. &lt;a href=&quot;https://en.wikipedia.org/wiki/Make_(software)&quot;&gt;&lt;em&gt;Make&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Apache_Ant&quot;&gt;&lt;em&gt;Apache Ant&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Apache_Maven&quot;&gt;&lt;em&gt;Apache Maven&lt;/em&gt;&lt;/a&gt;, and &lt;a href=&quot;https://en.wikipedia.org/wiki/Gradle&quot;&gt;&lt;em&gt;Gradle&lt;/em&gt;&lt;/a&gt; are all build tools that are used with Java programs (see &lt;a href=&quot;https://technologyconversations.com/2014/06/18/build-tools/&quot;&gt;this post&lt;/a&gt; for comparisons). As noted further down, Gradle is the chosen build tool for Android projects.</source>
          <target state="translated">由于编译程序（尤其是使用一堆外部库的程序）非常复杂，因此Java几乎总是使用&lt;a href=&quot;https://en.wikipedia.org/wiki/Build_automation&quot;&gt;&amp;ldquo;构建工具&amp;rdquo;&lt;/a&gt;来管理程序。 &lt;a href=&quot;https://en.wikipedia.org/wiki/Make_(software)&quot;&gt;&lt;em&gt;Make&lt;/em&gt;&lt;/a&gt; ， &lt;a href=&quot;https://en.wikipedia.org/wiki/Apache_Ant&quot;&gt;&lt;em&gt;Apache Ant&lt;/em&gt;&lt;/a&gt; ， &lt;a href=&quot;https://en.wikipedia.org/wiki/Apache_Maven&quot;&gt;&lt;em&gt;Apache Maven&lt;/em&gt;&lt;/a&gt;和&lt;a href=&quot;https://en.wikipedia.org/wiki/Gradle&quot;&gt;&lt;em&gt;Gradle&lt;/em&gt;&lt;/a&gt;都是与Java程序一起使用的构建工具（请参阅&lt;a href=&quot;https://technologyconversations.com/2014/06/18/build-tools/&quot;&gt;本帖子&lt;/a&gt;以进行比较）。 如后面所述，Gradle是Android项目的首选构建工具。</target>
        </trans-unit>
        <trans-unit id="7cd4a7270c64feabc3df09bda05bd5b40b7ab61c" translate="yes" xml:space="preserve">
          <source>So the last and seemingly correct option is &lt;a href=&quot;https://github.com/JakeWharton/ThreeTenABP&quot;&gt;&lt;em&gt;ThreeTenABP&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">因此，最后一个看似正确的选项是&lt;a href=&quot;https://github.com/JakeWharton/ThreeTenABP&quot;&gt;&lt;em&gt;ThreeTenABP&lt;/em&gt;&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="cfee5ab5f67d6df1c11067e33187c3d1e0a7caaf" translate="yes" xml:space="preserve">
          <source>Summary: Making it work</source>
          <target state="translated">摘要:使其发挥作用</target>
        </trans-unit>
        <trans-unit id="396e8e29c161040a31c661f24a6567aa418980a6" translate="yes" xml:space="preserve">
          <source>The most obvious solution would be to use the built-in &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/package-summary.html&quot;&gt;&lt;code&gt;java.time&lt;/code&gt;&lt;/a&gt; package, since this is the new standard way to deal with time and dates in Java. It is an implementation of &lt;a href=&quot;https://jcp.org/en/jsr/detail?id=310&quot;&gt;JSR 310&lt;/a&gt;, which was a new standard proposal for time handling based on the &lt;a href=&quot;http://www.joda.org/joda-time/&quot;&gt;Joda-Time&lt;/a&gt; library.</source>
          <target state="translated">最明显的解决方案是使用内置的&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/package-summary.html&quot;&gt; &lt;code&gt;java.time&lt;/code&gt; &lt;/a&gt;包，因为这是处理Java中时间和日期的新标准方法。 它是&lt;a href=&quot;https://jcp.org/en/jsr/detail?id=310&quot;&gt;JSR 310&lt;/a&gt;的实现，它是基于&lt;a href=&quot;http://www.joda.org/joda-time/&quot;&gt;Joda-Time&lt;/a&gt;库的时间处理的新标准建议。</target>
        </trans-unit>
        <trans-unit id="e518064ff9740117d564f3ecd61132e117c23f7f" translate="yes" xml:space="preserve">
          <source>The next option might be &lt;a href=&quot;http://www.joda.org/joda-time/&quot;&gt;&lt;em&gt;Joda-Time&lt;/em&gt;&lt;/a&gt;, since &lt;a href=&quot;https://www.jcp.org/en/jsr/detail?id=310&quot;&gt;JSR 310&lt;/a&gt; was based on Joda-Time. However, as the &lt;a href=&quot;https://github.com/JakeWharton/ThreeTenABP#why-not-use-threetenbp&quot;&gt;ThreeTenABP readme&lt;/a&gt; indicates, for a number of reasons, Joda-Time is not the best option.</source>
          <target state="translated">下一个选项可能是&lt;a href=&quot;http://www.joda.org/joda-time/&quot;&gt;&lt;em&gt;Joda-Time&lt;/em&gt;&lt;/a&gt; ，因为&lt;a href=&quot;https://www.jcp.org/en/jsr/detail?id=310&quot;&gt;JSR 310&lt;/a&gt;是基于Joda-Time的。 但是，正如&lt;a href=&quot;https://github.com/JakeWharton/ThreeTenABP#why-not-use-threetenbp&quot;&gt;ThreeTenABP自述文件所&lt;/a&gt;指出的，出于多种原因，Joda-Time并不是最佳选择。</target>
        </trans-unit>
        <trans-unit id="b889451f235571367bb20058e2dfe4e3827d56b9" translate="yes" xml:space="preserve">
          <source>These build tools include dependency management. Apache Maven appears to be the first to include a centralized package repository. Maven introduced the &lt;a href=&quot;https://search.maven.org/&quot;&gt;Maven Central Repository&lt;/a&gt;, which allows functionality equivalent to php's &lt;code&gt;composer&lt;/code&gt; with Packagist and Ruby's &lt;code&gt;gem&lt;/code&gt; with rubygems.org. In other words, the Maven Central Repository is to Maven (and Gradle) what Packagist is to composer -- a definitive and secure source for versioned packages.</source>
          <target state="translated">这些构建工具包括依赖项管理。 Apache Maven似乎是第一个包含集中式软件包存储库的仓库。 Maven引入了&lt;a href=&quot;https://search.maven.org/&quot;&gt;Maven中央存储库&lt;/a&gt; ，该库提供的功能等效于Packagist的php &lt;code&gt;composer&lt;/code&gt; 者和rubygems.org的Ruby的 &lt;code&gt;gem&lt;/code&gt; 。 换句话说，Maven中央存储库是Maven（和Gradle）对Packagist的构想，它是版本包的权威和安全来源。</target>
        </trans-unit>
        <trans-unit id="768315b79cd10966f62c991e59d5e08270da1b88" translate="yes" xml:space="preserve">
          <source>Third Discovery: Gradle Handles Dependencies in Android Projects</source>
          <target state="translated">第三次发现。Gradle处理Android项目中的依赖关系</target>
        </trans-unit>
        <trans-unit id="d869f5d32af6871802766705bf1d1cc9725fef0c" translate="yes" xml:space="preserve">
          <source>This is a really short version of the VERY LONG PROCESS of defining a new standard. All of these packages are pretty much the same thing: libraries that provide good, modern time handling functionality for Java. The differences are subtle but important.</source>
          <target state="translated">这是定义一个新标准的漫长过程中的一个非常简短的版本。所有这些包都是一样的:为Java提供良好的、现代的时间处理功能的库。它们之间的区别很细微,但很重要。</target>
        </trans-unit>
        <trans-unit id="31453897e93fc7f649fa022be2317aee5c16edb2" translate="yes" xml:space="preserve">
          <source>When I first hit this github repo, I didn't know what that compile line meant, and I tried to run it in my terminal (with an obvious and predictable failure). Frustrated, I didn't return to it until long after I figured the rest out, and finally realized that it's a Maven Repo line pointing to the &lt;code&gt;com.jakewharton.threetenabp&lt;/code&gt; repo, as opposed to the &lt;code&gt;org.threeten&lt;/code&gt; repo. That's why I thought the ThreeTenABP package wasn't in the Maven repo.</source>
          <target state="translated">当我第一次访问此github存储库时，我不知道该编译行的含义，因此我尝试在终端中运行它（出现明显且可预见的故障）。 沮丧的是，直到弄清其余内容后，我才回到很长一段时间，最后才意识到这是一条Maven Repo行，指向 &lt;code&gt;com.jakewharton.threetenabp&lt;/code&gt; repo，而不是 &lt;code&gt;org.threeten&lt;/code&gt; repo。 这就是为什么我认为ThreeTenABP软件包不在Maven存储库中。</target>
        </trans-unit>
        <trans-unit id="bab2aac07d102f5a191b285de99054d2ad86bfbe" translate="yes" xml:space="preserve">
          <source>Yet another issue I spent too much time figuring out. If you look for ThreeTen in Maven Central, you'll only see packages for &lt;code&gt;threetenbp&lt;/code&gt;, not &lt;code&gt;threetenabp&lt;/code&gt;. If you go to the &lt;a href=&quot;https://github.com/JakeWharton/ThreeTenABP&quot;&gt;github repo for ThreeTenABP&lt;/a&gt;, you'll see that infamous &lt;code&gt;compile 'this-or-that'&lt;/code&gt; line under the Download section of the Readme.</source>
          <target state="translated">我花了太多时间弄清楚另一个问题。 如果您在Maven Central中寻找ThreeTen，则只会看到 &lt;code&gt;threetenbp&lt;/code&gt; 软件包，而不是 &lt;code&gt;threetenabp&lt;/code&gt; 。 如果转到&lt;a href=&quot;https://github.com/JakeWharton/ThreeTenABP&quot;&gt;ThreeTenABP&lt;/a&gt;的github存储库 ，您会在自述文件的&amp;ldquo;下载&amp;rdquo;部分看到臭名昭著的 &lt;code&gt;compile 'this-or-that'&lt;/code&gt; the -that'&amp;rdquo;行。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
