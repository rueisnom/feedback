<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/388242">
    <body>
      <group id="388242">
        <trans-unit id="f9d918d89317e4567921b7cabc4657524230f17d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://en.cppreference.com/&quot;&gt;&lt;em&gt;cppreference.com (C++03/11/14/17/&amp;hellip;)&lt;/em&gt;&lt;/a&gt; (initiated by Nate Kohl) is a wiki that summarizes the basic core-language features and has extensive documentation of the C++ standard library. The documentation is very precise but is easier to read than the official standard document and provides better navigation due to its wiki nature. The project documents all versions of the C++ standard and the site allows filtering the display for a specific version. The project was &lt;a href=&quot;https://isocpp.org/blog/2015/07/cppcon-2014-cppreference.com-documenting-cpp-one-edit-at-a-time-nate-kohl&quot;&gt;presented by Nate Kohl at CppCon'14&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://en.cppreference.com/&quot;&gt;&lt;em&gt;cppreference.com（C ++ 03/11/14/17 /&amp;hellip;）&lt;/em&gt;&lt;/a&gt; （由Nate Kohl发起）是一个Wiki，概述了基本的核心语言功能，并提供了有关C ++标准库的大量文档。 该文档非常精确，但是比官方标准文档更易于阅读，并且由于其Wiki性质，因此提供了更好的导航。 该项目记录了C ++标准的所有版本，并且该站点允许过滤特定版本的显示。 该项目&lt;a href=&quot;https://isocpp.org/blog/2015/07/cppcon-2014-cppreference.com-documenting-cpp-one-edit-at-a-time-nate-kohl&quot;&gt;由Nate Kohl在CppCon'14上提出&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="3f867cd3016ffd99ea34518f168add88660e4c97" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.artima.com/shop/overview_of_the_new_cpp&quot;&gt;&lt;em&gt;Overview of the New C++ (C++11/14) (PDF only)&lt;/em&gt;&lt;/a&gt; (Scott Meyers) (&lt;strong&gt;updated for C++14&lt;/strong&gt;) These are the presentation materials (slides and some lecture notes) of a three-day training course offered by Scott Meyers, who's a highly respected author on C++. Even though the list of items is short, the quality is high.</source>
          <target state="translated">&lt;a href=&quot;http://www.artima.com/shop/overview_of_the_new_cpp&quot;&gt;&lt;em&gt;新C ++概述（C ++&lt;/em&gt;&lt;/a&gt; 11/14）（ &lt;em&gt;仅PDF）&lt;/em&gt; （Scott Meyers）（ &lt;strong&gt;已针对C ++ 14更新&lt;/strong&gt; ）这些是由Google提供的为期三天的培训课程的演示材料（幻灯片和一些讲义）斯科特&amp;middot;迈耶斯（Scott Meyers），他是C ++上受人尊敬的作者。 即使项目列表很短，质量也很高。</target>
        </trans-unit>
        <trans-unit id="b5ec74aa1a68b982553e8094cda3748cf0007920" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://leanpub.com/cpp17/&quot;&gt;&lt;em&gt;C++ 17 - The Complete Guide&lt;/em&gt;&lt;/a&gt; (Nicolai M. Josuttis) This book describes all the new features introduced in the C++17 Standard covering everything from the simple ones like 'Inline Variables', 'constexpr if' all the way up to 'Polymorphic Memory Resources' and 'New and Delete with overaligned Data'.</source>
          <target state="translated">&lt;a href=&quot;https://leanpub.com/cpp17/&quot;&gt;&lt;em&gt;C ++ 17-完整指南&lt;/em&gt;&lt;/a&gt; （Nicolai M. Josuttis）本书介绍了C ++ 17标准引入的所有新功能，涵盖了从简单的所有内容，例如&amp;ldquo;内联变量&amp;rdquo;，&amp;ldquo; constexpr if&amp;rdquo;一直到&amp;ldquo;多态&amp;rdquo;。内存资源&amp;rdquo;和&amp;ldquo;使用过对齐的数据新建和删除&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="b5e04538422f8beb843d44710eb4e2c1345eda75" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0139798099&quot;&gt;&lt;em&gt;Thinking in C++&lt;/em&gt;&lt;/a&gt; (Bruce Eckel, 2nd Edition, 2000).  Two volumes; is a tutorial style &lt;em&gt;free&lt;/em&gt; set of intro level books. Downloads: &lt;a href=&quot;https://ia800100.us.archive.org/10/items/TICPP2ndEdVolOne/TICPP-2nd-ed-Vol-one.zip&quot;&gt;vol 1&lt;/a&gt;, &lt;a href=&quot;https://ia800108.us.archive.org/24/items/TICPP2ndEdVolTwo/TICPP-2nd-ed-Vol-two.zip&quot;&gt;vol 2&lt;/a&gt;. Unfortunately they&amp;rsquo;re marred by a number of trivial errors (e.g. maintaining that temporaries are automatically &lt;code&gt;const&lt;/code&gt;), with no official errata list. A partial 3&lt;sup&gt;rd&lt;/sup&gt; party errata list is available at (&lt;a href=&quot;http://www.computersciencelab.com/Eckel.htm&quot;&gt;http://www.computersciencelab.com/Eckel.htm&lt;/a&gt;), but it&amp;rsquo;s apparently not maintained.</source>
          <target state="translated">&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0139798099&quot;&gt;&lt;em&gt;《用C ++进行思考》&lt;/em&gt;&lt;/a&gt; （Bruce Eckel，第二版，2000年）。 两卷； 是一套教程风格的入门级&lt;em&gt;免费&lt;/em&gt;书籍。 下载： &lt;a href=&quot;https://ia800100.us.archive.org/10/items/TICPP2ndEdVolOne/TICPP-2nd-ed-Vol-one.zip&quot;&gt;第1&lt;/a&gt; &lt;a href=&quot;https://ia800108.us.archive.org/24/items/TICPP2ndEdVolTwo/TICPP-2nd-ed-Vol-two.zip&quot;&gt;卷&lt;/a&gt; ， 第2卷 。 不幸的是，它们被许多琐碎的错误所破坏（例如，保持临时对象自动为 &lt;code&gt;const&lt;/code&gt; ），没有正式的勘误表。 可以从（ &lt;a href=&quot;http://www.computersciencelab.com/Eckel.htm&quot;&gt;http://www.computersciencelab.com/Eckel.htm&lt;/a&gt; ）获得部分第三方的勘误表，但显然并没有维护。</target>
        </trans-unit>
        <trans-unit id="c20ce9f9efcac9236091048ae44674524cec84c1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0201183951&quot;&gt;&lt;em&gt;The C++ IO Streams and Locales&lt;/em&gt;&lt;/a&gt; (Angelika Langer and Klaus Kreft)  There's very little to say about this book except that, if you want to know anything about streams and locales, then this is the one place to find definitive answers. &lt;a href=&quot;http://accu.org/index.php?module=bookreviews&amp;amp;func=search&amp;amp;rid=200&quot;&gt;[Review]&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0201183951&quot;&gt;&lt;em&gt;C ++ IO流和语言环境&lt;/em&gt;&lt;/a&gt; （Angelika Langer和Klaus Kreft）关于这本书的内容很少说，除了，如果您想了解有关流和语言环境的任何知识，那么这是找到确定答案的地方。 &lt;a href=&quot;http://accu.org/index.php?module=bookreviews&amp;amp;func=search&amp;amp;rid=200&quot;&gt;[评论]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="00eaeef927722507d7727198777261f474bf62bb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0201423391&quot;&gt;&lt;em&gt;Ruminations on C++&lt;/em&gt;&lt;/a&gt; - (Andrew Koenig and Barbara Moo) &lt;a href=&quot;http://accu.org/index.php?module=bookreviews&amp;amp;func=search&amp;amp;rid=776&quot;&gt;[Review]&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0201423391&quot;&gt;&lt;em&gt;C ++的反省&lt;/em&gt;&lt;/a&gt; -（Andrew Koenig和Barbara Moo） &lt;a href=&quot;http://accu.org/index.php?module=bookreviews&amp;amp;func=search&amp;amp;rid=776&quot;&gt;[评论]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a9b297b1861ba6e63ab49530562cedc7d09900dd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0201514591&quot;&gt;&lt;em&gt;The Annotated C++ Reference Manual&lt;/em&gt;&lt;/a&gt; (Bjarne Stroustrup, Margaret A. Ellis) This book is quite outdated in the fact that it explores the 1989 C++ 2.0 version - Templates, exceptions, namespaces and new casts were not yet introduced. Saying that however, this book goes through the entire C++ standard of the time explaining the rationale, the possible implementations, and features of the language. This is not a book to learn programming principles and patterns on C++, but to understand every aspect of the C++ language.</source>
          <target state="translated">&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0201514591&quot;&gt;&lt;em&gt;《带注释的C ++参考手册》&lt;/em&gt;&lt;/a&gt; （Bjarne Stroustrup，玛格丽特&amp;middot;A&amp;middot;埃利斯）在探索1989 C ++ 2.0版本的事实方面已经过时了-尚未引入模板，异常，名称空间和新类型。 话虽如此，这本书还是遍历了整个C ++标准，解释了该语言的基本原理，可能的实现和功能。 这不是一本学习C ++编程原理和模式的书，而是一本了解C ++语言各个方面的书。</target>
        </trans-unit>
        <trans-unit id="6ccf6268415acd377f9f2e70110ceec83387a313" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0201533936&quot;&gt;&lt;em&gt;Scientific and Engineering C++: An Introduction to Advanced Techniques and Examples&lt;/em&gt;&lt;/a&gt; (John Barton and Lee Nackman) 
It is a comprehensive and very detailed book that tried to explain and make use of all the features available in C++, in the context of numerical methods. It introduced at the time several new techniques, such as the Curiously Recurring Template Pattern (CRTP, also called Barton-Nackman trick).
It pioneered several techniques such as dimensional analysis and automatic differentiation. 
It came with a lot of compilable and useful code, ranging from an expression parser to a Lapack wrapper. 
The code is still available here: &lt;a href=&quot;http://www.informit.com/store/scientific-and-engineering-c-plus-plus-an-introduction-9780201533934&quot;&gt;http://www.informit.com/store/scientific-and-engineering-c-plus-plus-an-introduction-9780201533934&lt;/a&gt;.
Unfortunately, the books have become somewhat outdated in the style and C++ features, however, it was an incredible tour-de-force at the time (1994, pre-STL).
The chapters on dynamics inheritance are a bit complicated to understand and not very useful.
An updated version of this classic book that includes move semantics and the lessons learned from the STL would be very nice.</source>
          <target state="translated">&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0201533936&quot;&gt;&lt;em&gt;《科学与工程C ++：高级技术和示例简介》&lt;/em&gt;&lt;/a&gt; （约翰&amp;middot;巴顿和李&amp;middot;纳克曼）这本书是一本全面而非常详尽的书，试图在数值方法的背景下解释和利用C ++中的所有功能。 当时它引入了几种新技术，例如&amp;ldquo;好奇重复模板模式&amp;rdquo;（CRTP，也称为Barton-Nackman技巧）。 它开创了多种技术，例如尺寸分析和自动区分。 它附带了许多可编译且有用的代码，从表达式解析器到Lapack包装器。 该代码仍在此处提供： &lt;a href=&quot;http://www.informit.com/store/scientific-and-engineering-c-plus-plus-an-introduction-9780201533934&quot;&gt;http&lt;/a&gt; : //www.informit.com/store/scientific-and-engineering-c-plus-plus-an-introduction-9780201533934 。 不幸的是，这些书的样式和C ++功能已经有些过时了，但是，这在当时是不可思议的巡回演出（1994，STL之前）。 关于动力学继承的章节有些复杂，难以理解，并且没有什么用处。 这本经典书籍的更新版本非常不错，其中包括移动语义和从STL中吸取的教训。</target>
        </trans-unit>
        <trans-unit id="809901ca9d8ef4d4d2841999a5dd30e6c93bafbe" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0201543303&quot;&gt;&lt;em&gt;The Design and Evolution of C++&lt;/em&gt;&lt;/a&gt; (Bjarne Stroustrup)  If you want to know &lt;em&gt;why&lt;/em&gt; the language is the way it is, this book is where you find answers. This covers everything &lt;em&gt;before the standardization&lt;/em&gt; of C++.</source>
          <target state="translated">&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0201543303&quot;&gt;&lt;em&gt;C ++的设计和演变&lt;/em&gt;&lt;/a&gt; （Bjarne Stroustrup）如果您想知道&lt;em&gt;为什么&lt;/em&gt;语言如此，请在本书中找到答案。 这涵盖了C ++ &lt;em&gt;标准化之前的&lt;/em&gt;所有内容。</target>
        </trans-unit>
        <trans-unit id="4d4ea160d9325161dd4cada6a6213a0dfddfc7e5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0201548550&quot;&gt;&lt;em&gt;Advanced C++ Programming Styles and Idioms&lt;/em&gt;&lt;/a&gt; (James Coplien)  A predecessor of the pattern movement, it describes many C++-specific &amp;ldquo;idioms&amp;rdquo;. It's certainly a very good book and might still be worth a read if you can spare the time, but quite old and not up-to-date with current C++.</source>
          <target state="translated">&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0201548550&quot;&gt;&lt;em&gt;高级C ++编程样式和&lt;/em&gt;&lt;/a&gt;习惯用法（James Coplien）模式运动的前身，它描述了许多C ++特定的&amp;ldquo;习惯用语&amp;rdquo;。 这当然是一本非常好的书，如果您可以节省时间，可能仍然值得一读，但是它很老，而且不是最新的C ++。</target>
        </trans-unit>
        <trans-unit id="53f01f20e6fa1ca6317e73225408b3bf74d639f6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0201615622&quot;&gt;&lt;em&gt;Exceptional C++&lt;/em&gt;&lt;/a&gt; (Herb Sutter)  Presented as a set of puzzles, this has one of the best and thorough discussions of the proper resource management and exception safety in C++ through Resource Acquisition is Initialization (RAII) in addition to in-depth coverage of a variety of other topics including the pimpl idiom, name lookup, good class design, and the C++ memory model. &lt;a href=&quot;http://accu.org/index.php?module=bookreviews&amp;amp;func=search&amp;amp;rid=209&quot;&gt;[Review]&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0201615622&quot;&gt;&lt;em&gt;杰出的C ++&lt;/em&gt;&lt;/a&gt; （草皮萨特）以一系列难题的形式呈现，它对C ++中通过资源获取即初始化（RAII）进行适当的资源管理和异常安全性进行了最佳而透彻的讨论，此外还深入探讨了各种其他主题包括pimpl习惯用法，名称查找，良好的类设计和C ++内存模型。 &lt;a href=&quot;http://accu.org/index.php?module=bookreviews&amp;amp;func=search&amp;amp;rid=209&quot;&gt;[评论]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="523a09c730657d6627588ca169800b4c58f20dac" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0201633620&quot;&gt;&lt;em&gt;Large Scale C++ Software Design&lt;/em&gt;&lt;/a&gt; (John Lakos)  Lakos explains techniques to manage very big C++ software projects. Certainly, a good read, if it only was up to date. It was written long before C++ 98 and misses on many features (e.g. namespaces) important for large-scale projects. If you need to work in a big C++ software project, you might want to read it, although you need to take more than a grain of salt with it. The first volume of a new edition is &lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0201717069&quot;&gt;released in 2019&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0201633620&quot;&gt;&lt;em&gt;大型C ++软件设计&lt;/em&gt;&lt;/a&gt; （John Lakos）Lakos解释了管理大型C ++软件项目的技术。 当然，如果只是最新的话，那是一本好书。 它是在C ++ 98之前编写的，错过了对大型项目很重要的许多功能（例如，名称空间）。 如果您需要在大型C ++软件项目中工作，则可能需要阅读它，尽管您需要花很多精力。 新版本的第一卷&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0201717069&quot;&gt;于2019年发布&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="0f912ca087659cbbf44b90e067c4f0759022b75e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/020163371X&quot;&gt;&lt;em&gt;More Effective C++&lt;/em&gt;&lt;/a&gt; (Scott Meyers) Even more rules of thumb than &lt;em&gt;Effective C++&lt;/em&gt;. Not as important as the ones in the first book, but still good to know.</source>
          <target state="translated">&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/020163371X&quot;&gt;&lt;em&gt;更有效的C ++&lt;/em&gt;&lt;/a&gt; （Scott Meyers）比&amp;ldquo; &lt;em&gt;有效C ++&amp;rdquo;&lt;/em&gt;更多的经验法则。 虽然不如第一本书中的重要，但还是很高兴知道。</target>
        </trans-unit>
        <trans-unit id="d26a8f1b4fca58a7bc5c5dad7c92b89ac484f8b6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/020170353X&quot;&gt;&lt;em&gt;Accelerated C++&lt;/em&gt;&lt;/a&gt; (Andrew Koenig and Barbara Moo, 1st Edition - August 24, 2000)  This basically covers the same ground as the &lt;em&gt;C++ Primer&lt;/em&gt;, but does so on a fourth of its space. This is largely because it does not attempt to be an introduction to &lt;em&gt;programming&lt;/em&gt;, but an introduction to &lt;em&gt;C++&lt;/em&gt; for people who've previously programmed in some other language. It has a steeper learning curve, but, for those who can cope with this, it is a very compact introduction to the language. (Historically, it broke new ground by being the first beginner's book to use a modern approach to teaching the language.) Despite this, the C++
it teaches is purely C++98. &lt;a href=&quot;http://accu.org/index.php?module=bookreviews&amp;amp;func=search&amp;amp;rid=1185&quot;&gt;[Review]&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/020170353X&quot;&gt;&lt;em&gt;加速的C ++&lt;/em&gt;&lt;/a&gt; （Andrew Koenig和Barbara Moo，第1版-2000年8月24日）与&lt;em&gt;C ++ Primer&lt;/em&gt;基本相同，但&lt;em&gt;仅占&lt;/em&gt;其空间的四分之一。 这主要是因为它并非试图成为&lt;em&gt;编程&lt;/em&gt;的介绍，而是试图为以前使用其他语言进行编程的人介绍&lt;em&gt;C ++&lt;/em&gt; 。 它的学习曲线陡峭，但是，对于那些可以应付的人来说，它是对语言的非常紧凑的介绍。 （从历史上看，它是第一本使用现代方法教授语言的初学者书籍，开辟了新天地。）尽管如此，它所教授的C ++纯粹是C ++ 98。 &lt;a href=&quot;http://accu.org/index.php?module=bookreviews&amp;amp;func=search&amp;amp;rid=1185&quot;&gt;[评论]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ff3fb41a90c5d01bebd659d9bd295c8e020c99b6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0201704315&quot;&gt;&lt;em&gt;Modern C++ Design&lt;/em&gt;&lt;/a&gt; (Andrei Alexandrescu)  A groundbreaking book on advanced generic programming techniques.  Introduces policy-based design, type lists, and fundamental generic programming idioms then explains how many useful design patterns (including small object allocators, functors, factories, visitors, and multi-methods) can be implemented efficiently, modularly, and cleanly using generic programming. &lt;a href=&quot;http://accu.org/index.php?module=bookreviews&amp;amp;func=search&amp;amp;rid=979&quot;&gt;[Review]&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0201704315&quot;&gt;&lt;em&gt;现代C ++设计&lt;/em&gt;&lt;/a&gt; （Andrei Alexandrescu）关于高级通用编程技术的开创性著作。 介绍基于策略的设计，类型列表和基本的通用编程习惯用法，然后说明可以使用通用编程高效，模块化和干净地实现多少有用的设计模式（包括小对象分配器，函子，工厂，访问者和多方法） 。 &lt;a href=&quot;http://accu.org/index.php?module=bookreviews&amp;amp;func=search&amp;amp;rid=979&quot;&gt;[评论]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4fd7152c6fab15b84d2e16ab604c91e0f1123d30" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/020170434X&quot;&gt;&lt;em&gt;More Exceptional C++&lt;/em&gt;&lt;/a&gt; (Herb Sutter)  Covers additional exception safety topics not covered in &lt;em&gt;Exceptional C++&lt;/em&gt;, in addition to discussion of effective object-oriented programming in C++ and correct use of the STL. &lt;a href=&quot;http://accu.org/index.php?module=bookreviews&amp;amp;func=search&amp;amp;rid=784&quot;&gt;[Review]&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/020170434X&quot;&gt;&lt;em&gt;更多有关Exceptional C ++的内容&lt;/em&gt;&lt;/a&gt; （除草药外），除了讨论&lt;em&gt;C ++&lt;/em&gt;中有效的面向对象编程以及STL的正确使用以外，还涵盖了&lt;em&gt;Exceptional C ++中&lt;/em&gt;未涉及的其他异常安全主题。 &lt;a href=&quot;http://accu.org/index.php?module=bookreviews&amp;amp;func=search&amp;amp;rid=784&quot;&gt;[评论]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="aecc92d12d9d309965d37294bbbf91c0cc27a27f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0201734842&quot;&gt;&lt;em&gt;C++ Templates: The Complete Guide&lt;/em&gt;&lt;/a&gt; (David Vandevoorde and Nicolai M. Josuttis) This is &lt;em&gt;the&lt;/em&gt; book about templates as they existed before C++11.  It covers everything from the very basics to some of the most advanced template metaprogramming and explains every detail of how templates work (both conceptually and at how they are implemented) and discusses many common pitfalls.  Has excellent summaries of the One Definition Rule (ODR) and overload resolution in the appendices. A &lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0321714121&quot;&gt;second edition&lt;/a&gt; covering C++11, C++14 and C++17 has been already published. &lt;a href=&quot;http://accu.org/index.php?module=bookreviews&amp;amp;func=search&amp;amp;rid=506&quot;&gt;[Review]&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0201734842&quot;&gt;&lt;em&gt;C ++模板：完整指南&lt;/em&gt;&lt;/a&gt; （David Vandevoorde和Nicolai M. Josuttis）这是关于模板&lt;em&gt;的&lt;/em&gt;书，因为它们在C ++ 11之前就已存在。 它涵盖了从最基础到最高级的模板元编程的所有内容，并解释了模板如何工作的每个细节（从概念上以及如何实现），并讨论了许多常见的陷阱。 附录中具有出色的&amp;ldquo;一定义规则&amp;rdquo;（ODR）和重载分辨率的摘要。 已经出版了涵盖C ++ 11，C ++ 14和C ++ 17的&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0321714121&quot;&gt;第二版&lt;/a&gt; 。 &lt;a href=&quot;http://accu.org/index.php?module=bookreviews&amp;amp;func=search&amp;amp;rid=506&quot;&gt;[评论]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c3ad765446fca1244cf5ddfda64c97b4f86524dc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0201749629&quot;&gt;&lt;em&gt;Effective STL&lt;/em&gt;&lt;/a&gt; (Scott Meyers)  This aims to do the same to the part of the standard library coming from the STL what &lt;em&gt;Effective C++&lt;/em&gt; did to the language as a whole: It presents rules of thumb along with their rationale. &lt;a href=&quot;http://accu.org/index.php?module=bookreviews&amp;amp;func=search&amp;amp;rid=67&quot;&gt;[Review]&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0201749629&quot;&gt;&lt;em&gt;有效的STL&lt;/em&gt;&lt;/a&gt; （Scott Meyers）旨在对标准库中来自STL的部分进行相同的操作，就像&lt;em&gt;有效的C ++&lt;/em&gt;对整个语言所做的一样：它提供了经验法则及其原理。 &lt;a href=&quot;http://accu.org/index.php?module=bookreviews&amp;amp;func=search&amp;amp;rid=67&quot;&gt;[评论]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7b796de57a32fff0863980a8d036a1cc9f5ba153" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0201760428&quot;&gt;&lt;em&gt;Exceptional C++ Style&lt;/em&gt;&lt;/a&gt; (Herb Sutter)  Discusses generic programming, optimization, and resource management; this book also has an excellent exposition of how to write modular code in C++ by using non-member functions and the single responsibility principle. &lt;a href=&quot;http://accu.org/index.php?module=bookreviews&amp;amp;func=search&amp;amp;rid=107&quot;&gt;[Review]&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0201760428&quot;&gt;&lt;em&gt;出色的C ++风格&lt;/em&gt;&lt;/a&gt; （草药翻译）讨论通用编程，优化和资源管理； 本书还很好地阐述了如何通过使用非成员函数和单一职责原则来用C ++编写模块化代码。 &lt;a href=&quot;http://accu.org/index.php?module=bookreviews&amp;amp;func=search&amp;amp;rid=107&quot;&gt;[评论]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="173d19bad3dd7da8b2950b095396ce1ac6190fea" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0201834545&quot;&gt;&lt;em&gt;Inside the C++ Object Model&lt;/em&gt;&lt;/a&gt; (Stanley Lippman)  If you want to know how virtual member functions are commonly implemented and how base objects are commonly laid out in memory in a multi-inheritance scenario, and how all this affects performance, this is where you will find thorough discussions of such topics.</source>
          <target state="translated">&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0201834545&quot;&gt;&lt;em&gt;在C ++对象模型内部&lt;/em&gt;&lt;/a&gt; （Stanley Lippman）如果您想知道在多继承方案中通常如何实现虚拟成员函数以及在内存中通常如何布置基础对象，以及这如何影响性能，那么您将在这里找到有关此类主题的详尽讨论。</target>
        </trans-unit>
        <trans-unit id="e4fd3ad4d5cd5aa7b7f348a72cc94f3d3cf4d194" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0321113586&quot;&gt;&lt;em&gt;C++ Coding Standards&lt;/em&gt;&lt;/a&gt; (Herb Sutter and Andrei Alexandrescu) &amp;ldquo;Coding standards&amp;rdquo; here doesn't mean &amp;ldquo;how many spaces should I indent my code?&amp;rdquo;  This book contains 101 best practices, idioms, and common pitfalls that can help you to write correct, understandable, and efficient C++ code. &lt;a href=&quot;http://accu.org/index.php?module=bookreviews&amp;amp;func=search&amp;amp;rid=1439&quot;&gt;[Review]&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0321113586&quot;&gt;&lt;em&gt;C ++编码标准&lt;/em&gt;&lt;/a&gt; （Herb Sutter和Andrei Alexandrescu）&amp;ldquo;编码标准&amp;rdquo;在这里并不意味着&amp;ldquo;我应该缩进我的代码多少个空格？&amp;rdquo; 本书包含101个最佳实践，习惯用法和常见陷阱，可以帮助您编写正确，可理解且有效的C ++代码。 &lt;a href=&quot;http://accu.org/index.php?module=bookreviews&amp;amp;func=search&amp;amp;rid=1439&quot;&gt;[评论]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b4287f65d0b57579f8434f72cdf1ce3a5aba6664" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0321227255&quot;&gt;&lt;em&gt;C++ Template Metaprogramming&lt;/em&gt;&lt;/a&gt; (David Abrahams and Aleksey Gurtovoy)</source>
          <target state="translated">&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0321227255&quot;&gt;&lt;em&gt;C ++模板元编程&lt;/em&gt;&lt;/a&gt; （David Abrahams和Aleksey Gurtovoy）</target>
        </trans-unit>
        <trans-unit id="2230af863f13bba81183ad8f2f61b4af7dfdb549" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0321334876&quot;&gt;&lt;em&gt;Effective C++&lt;/em&gt;&lt;/a&gt; (Scott Meyers, 3rd Edition - May 22, 2005)  This was written with the aim of being the best second book C++ programmers should read, and it succeeded. Earlier editions were aimed at programmers coming from C, the third edition changes this and targets programmers coming from languages like Java. It presents ~50 easy-to-remember rules of thumb along with their rationale in a very accessible (and enjoyable) style. For C++11 and C++14 the examples and a few issues are outdated and Effective Modern C++ should be preferred. &lt;a href=&quot;http://accu.org/index.php?module=bookreviews&amp;amp;func=search&amp;amp;rid=700&quot;&gt;[Review]&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0321334876&quot;&gt;&lt;em&gt;有效的C ++&lt;/em&gt;&lt;/a&gt; （Scott Meyers，第3版-2005年5月22日），其目的是成为C ++程序员应该阅读的最好的第二本书，并且成功了。 早期版本针对的是C语言的程序员，第三版本对此进行了更改，并针对Java之类的程序员。 它以易于访问（和愉快）的风格呈现了约50个易于记忆的经验法则及其原理。 对于C ++ 11和C ++ 14，示例和一些问题已过时，应首选&amp;ldquo;有效的现代C ++&amp;rdquo;。 &lt;a href=&quot;http://accu.org/index.php?module=bookreviews&amp;amp;func=search&amp;amp;rid=700&quot;&gt;[评论]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="697a266ccc25bae4c5d622426ecc19cee0f5c6a6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0321623215&quot;&gt;&lt;em&gt;C++ Standard Library Tutorial and Reference&lt;/em&gt;&lt;/a&gt; (Nicolai Josuttis) (&lt;strong&gt;updated for C++11&lt;/strong&gt;) &lt;em&gt;The&lt;/em&gt; introduction and reference for the C++ Standard Library. The second edition (released on April 9, 2012) covers C++11. &lt;a href=&quot;http://accu.org/index.php?module=bookreviews&amp;amp;func=search&amp;amp;rid=1849&quot;&gt;[Review]&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0321623215&quot;&gt;&lt;em&gt;C ++标准库教程和参考&lt;/em&gt;&lt;/a&gt; （Nicolai Josuttis）（ &lt;strong&gt;已针对C ++ 11更新&lt;/strong&gt; ）C ++标准库&lt;em&gt;的&lt;/em&gt;介绍和参考。 第二版（2012年4月9日发布）涵盖C ++ 11。 &lt;a href=&quot;http://accu.org/index.php?module=bookreviews&amp;amp;func=search&amp;amp;rid=1849&quot;&gt;[评论]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1bc74438394b9ac362f7c5065b644f554d95f5fd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0321714113&quot;&gt;&lt;em&gt;C++ Primer&lt;/em&gt;&lt;/a&gt; * (Stanley Lippman, Jos&amp;eacute;e Lajoie, and Barbara E. Moo)  (&lt;strong&gt;updated for C++11&lt;/strong&gt;) Coming at 1k pages, this is a very thorough introduction into C++ that covers just about everything in the language in a very accessible format and in great detail. The fifth edition (released August 16, 2012) covers C++11. &lt;a href=&quot;http://accu.org/index.php?module=bookreviews&amp;amp;func=search&amp;amp;rid=1848&quot;&gt;[Review]&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0321714113&quot;&gt;&lt;em&gt;C ++ Primer&lt;/em&gt;&lt;/a&gt; *（Stanley Lippman，Jos&amp;eacute;eLajoie和Barbara E. Moo）（ &lt;strong&gt;针对C ++ 11更新&lt;/strong&gt; ）以1k页的篇幅&lt;strong&gt;对C ++&lt;/strong&gt;进行了非常全面的介绍，它以易于访问的格式涵盖了该语言的几乎所有内容。并且非常详细。 第五版（2012年8月16日发布）涵盖了C ++ 11。 &lt;a href=&quot;http://accu.org/index.php?module=bookreviews&amp;amp;func=search&amp;amp;rid=1848&quot;&gt;[评论]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="869dfc1654977728308026b7b2e1e3e106d213f4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0321958322&quot;&gt;&lt;em&gt;The C++ Programming Language&lt;/em&gt;&lt;/a&gt; (Bjarne Stroustrup) (&lt;strong&gt;updated for C++11&lt;/strong&gt;) The classic introduction to C++ by its creator. Written to parallel the classic K&amp;amp;R, this indeed reads very much like it and covers just about everything from the core language to the standard library, to programming paradigms to the language's philosophy. &lt;a href=&quot;http://accu.org/index.php?module=bookreviews&amp;amp;func=search&amp;amp;rid=1853&quot;&gt;[Review]&lt;/a&gt; Note: All releases of the C++ standard are tracked in this question: &lt;a href=&quot;https://stackoverflow.com/a/4653479/14065&quot;&gt;Where do I find the current C++ standard&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0321958322&quot;&gt;&lt;em&gt;C ++编程语言&lt;/em&gt;&lt;/a&gt; （Bjarne Stroustrup）（ &lt;strong&gt;已针对C ++ 11更新&lt;/strong&gt; ）创建者对C ++的经典介绍。 与经典K＆R并行编写，它的读法非常像它，涵盖了从核心语言到标准库，从编程范例到语言哲学的几乎所有内容。 &lt;a href=&quot;http://accu.org/index.php?module=bookreviews&amp;amp;func=search&amp;amp;rid=1853&quot;&gt;[评论]&lt;/a&gt;注意：此问题跟踪所有C ++标准版本： &lt;a href=&quot;https://stackoverflow.com/a/4653479/14065&quot;&gt;在哪里可以找到当前的C ++标准&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="da0159f95ed75e7537af87baced3febe60af7587" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0321992784&quot;&gt;&lt;em&gt;Programming: Principles and Practice Using C++&lt;/em&gt;&lt;/a&gt; (Bjarne Stroustrup, 2nd Edition - May 25, 2014) (&lt;strong&gt;updated for C++11/C++14&lt;/strong&gt;) An introduction to programming using C++ by the creator of the language. A good read, that assumes no previous programming experience, but is not only for beginners.</source>
          <target state="translated">&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0321992784&quot;&gt;&lt;em&gt;编程：使用C ++的原理和实践&lt;/em&gt;&lt;/a&gt; （Bjarne Stroustrup，第二版，2014年5月25日）（ &lt;strong&gt;已针对C ++ 11 / C ++ 14更新&lt;/strong&gt; ）语言的创建者对使用C ++进行编程的介绍。 一本不错的书，它假定您没有任何编程经验，而且不仅适合初学者。</target>
        </trans-unit>
        <trans-unit id="c9020f8cd0be475fedb4de9123508cc326364359" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/1460966163&quot;&gt;&lt;em&gt;Advanced C++ Metaprogramming&lt;/em&gt;&lt;/a&gt; (Davide Di Gennaro) A pre-C++11 manual of TMP techniques, focused more on practice than theory.  There are a ton of snippets in this book, some of which are made obsolete by type traits, but the techniques, are nonetheless useful to know.  If you can put up with the quirky formatting/editing, it is easier to read than Alexandrescu, and arguably, more rewarding.  For more experienced developers, there is a good chance that you may pick up something about a dark corner of C++ (a quirk) that usually only comes about through extensive experience.</source>
          <target state="translated">&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/1460966163&quot;&gt;&lt;em&gt;高级C ++元编程&lt;/em&gt;&lt;/a&gt; （Davide Di Gennaro），TMP技术的C ++ 11之前的手册，更着重于实践而不是理论。 本书中有很多片段，其中一些由于类型特征而变得过时，但是仍然可以了解一些技巧。 如果您可以忍受古怪的格式/编辑，那么它比Alexandrescu更容易阅读，并且可以说是更有收获的。 对于经验丰富的开发人员，您很有可能会从C ++的一个黑角（怪癖）中获得一些东西，而这些东西通常只能通过丰富的经验来实现。</target>
        </trans-unit>
        <trans-unit id="491d29c723a7d473841134c6eb63abd620ab5196" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/1491903996&quot;&gt;&lt;em&gt;Effective Modern C++&lt;/em&gt;&lt;/a&gt; (Scott Meyers) This is basically the new version of &lt;em&gt;Effective C++&lt;/em&gt;, aimed at C++ programmers making the transition from C++03 to C++11 and C++14.</source>
          <target state="translated">&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/1491903996&quot;&gt;&lt;em&gt;有效的现代C ++&lt;/em&gt;&lt;/a&gt; （Scott Meyers）这基本上是&lt;em&gt;有效C ++&lt;/em&gt;的新版本，针对的是C ++程序员，从C ++ 03过渡到C ++ 11和C ++ 14。</target>
        </trans-unit>
        <trans-unit id="f8fe1bee78382d5f7dfe425a0e1cadbd3e95e47a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/1933988770&quot;&gt;&lt;em&gt;C++ Concurrency In Action&lt;/em&gt;&lt;/a&gt; (Anthony Williams) A book covering C++11 concurrency support including the thread library, the atomics library, the C++ memory model, locks and mutexes, as well as issues of designing and debugging multithreaded applications. A &lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/1617294691&quot;&gt;second edition&lt;/a&gt; covering C++14 and C++17 has been already published.</source>
          <target state="translated">&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/1933988770&quot;&gt;&lt;em&gt;C ++并发性实践&lt;/em&gt;&lt;/a&gt; （Anthony Williams）涵盖C ++ 11并发性支持的书，其中包括线程库，原子库，C ++内存模型，锁和互斥体，以及设计和调试多线程应用程序的问题。 已经出版了涵盖C ++ 14和C ++ 17的&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/1617294691&quot;&gt;第二版&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="ce7269dd3f09530ebbf954f9bc271955ae3e7389" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/B00F8CWGOS&quot;&gt;&lt;em&gt;A Tour of C++&lt;/em&gt;&lt;/a&gt; (Bjarne Stroustrup) (&lt;strong&gt;&lt;a href=&quot;http://a.co/f7WPDeD&quot;&gt;2nd edition  for C++17&lt;/a&gt;&lt;/strong&gt;) The &amp;ldquo;tour&amp;rdquo; is a quick (about 180 pages and 14 chapters) tutorial overview of all of standard C++ (language and standard library, &lt;strong&gt;and using C++11&lt;/strong&gt;) at a moderately high level for people who already know C++ or at least are experienced programmers. This book is an extended version of the material that constitutes Chapters 2-5 of The C++ Programming Language, 4th edition.</source>
          <target state="translated">&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/B00F8CWGOS&quot;&gt;&lt;em&gt;C ++导览&lt;/em&gt;&lt;/a&gt; （Bjarne Stroustrup）（ &lt;strong&gt;&lt;a href=&quot;http://a.co/f7WPDeD&quot;&gt;C ++ 17的第二版&lt;/a&gt;&lt;/strong&gt; ）&amp;ldquo;导览&amp;rdquo;是对所有标准C ++（语言和标准库&lt;strong&gt;以及使用C ++&lt;/strong&gt; ）的快速概览（约180页和14章）。 &lt;strong&gt;11&lt;/strong&gt; ）对于已经了解C ++或至少是有经验的程序员的人来说，级别适中。 本书是构成C ++编程语言（第4版）第2-5章的材料的扩展版本。</target>
        </trans-unit>
        <trans-unit id="6b6697a0c2a1482e966dda3d993d2b7c0dcb00c2" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;The C++&lt;a href=&quot;https://www.iso.org/standard/50372.html&quot;&gt;11&lt;/a&gt;/&lt;a href=&quot;https://www.iso.org/standard/64029.html&quot;&gt;14&lt;/a&gt;/&lt;a href=&quot;https://www.iso.org/standard/68564.html&quot;&gt;17&lt;/a&gt; Standard (INCITS/ISO/IEC 14882:2011/2014/2017)&lt;/em&gt; This, of course, is the final arbiter of all that is or isn't C++. Be aware, however, that it is intended purely as a reference for &lt;em&gt;experienced&lt;/em&gt; users willing to devote considerable time and effort to its understanding. The C++17 standard is released in electronic form for 198 Swiss Francs.</source>
          <target state="translated">&lt;em&gt;C ++ 11/14/17标准（INCITS / ISO / IEC 14882：2011/2014/2017）&lt;/em&gt;当然，这是所有是否存在C ++的最终仲裁者。 但是请注意，它纯粹是为愿意为理解它付出大量时间和精力的有&lt;em&gt;经验的&lt;/em&gt;用户提供的参考。 C ++ 17标准以电子形式发布，价格为198瑞士法郎。</target>
        </trans-unit>
        <trans-unit id="1f996fa05714bb967d1d3dad45b15e3a4578137a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;C++11/14/17/&amp;hellip; References:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;C ++ 11/14/17 /&amp;hellip;参考：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="461f31882057ec224f923e0dcf40c2beacb287a4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Some information contained within these books may not be up-to-date or no longer considered best practice.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;这些书中包含的某些信息可能不是最新的，或者不再被视为最佳实践。</target>
        </trans-unit>
        <trans-unit id="d814fecbb236ff95202084ea95f4b88e4cce5252" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;
* Not to be confused with &lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0672326973&quot;&gt;&lt;em&gt;C++ Primer Plus&lt;/em&gt;&lt;/a&gt; (Stephen Prata), with a significantly less favorable &lt;a href=&quot;http://accu.org/index.php?module=bookreviews&amp;amp;func=search&amp;amp;rid=1744&quot;&gt;review&lt;/a&gt;.
&lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;*不要与&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0672326973&quot;&gt;&lt;em&gt;C ++ Primer Plus&lt;/em&gt;&lt;/a&gt; （Stephen Prata）混淆，它的评价要差得多。&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="fafbbffd1a85d713ba25d35cebf35d94da93577c" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;*Note: FAQs and other resources can be found in the &lt;a href=&quot;https://stackoverflow.com/tags/c%2b%2b/info&quot;&gt;C++ tag info&lt;/a&gt; and under &lt;a href=&quot;/questions/tagged/c%2b%2b-faq&quot;&gt;c++-faq&lt;/a&gt;. &lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;*注意：常见问题解答和其他资源可以在&lt;a href=&quot;https://stackoverflow.com/tags/c%2b%2b/info&quot;&gt;C ++标签信息&lt;/a&gt;和&lt;a href=&quot;/questions/tagged/c%2b%2b-faq&quot;&gt;c ++-faq下找到&lt;/a&gt; 。&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="4d064726954a17487f94e931f5b157b733ec22ed" translate="yes" xml:space="preserve">
          <source>Advanced</source>
          <target state="translated">Advanced</target>
        </trans-unit>
        <trans-unit id="60575a6ebba9f780b4312324662169830d12bea1" translate="yes" xml:space="preserve">
          <source>Beginner</source>
          <target state="translated">Beginner</target>
        </trans-unit>
        <trans-unit id="eb8de9ce8757ee3c542141ac80ff3b33dc04edff" translate="yes" xml:space="preserve">
          <source>Best practices</source>
          <target state="translated">最佳做法</target>
        </trans-unit>
        <trans-unit id="071175830fe7092b1a52f8c955bf4b092df97637" translate="yes" xml:space="preserve">
          <source>Classics / Older</source>
          <target state="translated">经典老字号</target>
        </trans-unit>
        <trans-unit id="b1cfe72fd27178870354f9f4e07bb82072caea55" translate="yes" xml:space="preserve">
          <source>Intermediate</source>
          <target state="translated">Intermediate</target>
        </trans-unit>
        <trans-unit id="7249db688fcac7e2a2f2bf1b7ad9f55e77e33b97" translate="yes" xml:space="preserve">
          <source>Introductory, no previous programming experience</source>
          <target state="translated">介绍性的,没有编程经验</target>
        </trans-unit>
        <trans-unit id="4c2b843e44fb7dca8e7d3407c76bdd778c47418b" translate="yes" xml:space="preserve">
          <source>Introductory, with previous programming experience</source>
          <target state="translated">初级,有编程经验</target>
        </trans-unit>
        <trans-unit id="af1dcc4aaa25fe83b8a89ba75807edec69e8d514" translate="yes" xml:space="preserve">
          <source>Please edit the accepted answer to provide &lt;strong&gt;quality books&lt;/strong&gt; and an approximate skill level &amp;mdash; &lt;em&gt;preferably&lt;/em&gt;&lt;strong&gt;after&lt;/strong&gt;&lt;em&gt;discussing your addition in &lt;a href=&quot;http://chat.stackoverflow.com/rooms/10/loungec&quot;&gt;the C++ chat room&lt;/a&gt;&lt;/em&gt;. (The regulars might mercilessly undo your work if they disagree with a recommendation.) Add a short blurb/description about each book that you have personally read/benefited from. Feel free to debate quality, headings, etc. Books that meet the criteria will be added to the list.  Books that have reviews by the Association of C and C++ Users (ACCU) have links to the review.</source>
          <target state="translated">请编辑接受的答案，以提供&lt;strong&gt;优质的书籍&lt;/strong&gt;和大致的技能水平- &lt;em&gt;最好&lt;/em&gt; &lt;strong&gt;在&lt;/strong&gt; &lt;em&gt;&lt;a href=&quot;http://chat.stackoverflow.com/rooms/10/loungec&quot;&gt;C ++聊天室中&lt;/a&gt;讨论您的添加内容&lt;/em&gt; &lt;strong&gt;之后&lt;/strong&gt; 。 （如果常规员工不同意建议，他们可能会毫不留情地撤消您的工作。）为您亲自阅读/从中受益的每本书添加简短的简介/说明。 随时讨论质量，标题等。符合条件的书籍将添加到列表中。 具有C和C ++用户协会（ACCU）的评论的书籍具有该评论的链接。</target>
        </trans-unit>
        <trans-unit id="8490ad3770e2562a83a8997c6373d3d062ef269a" translate="yes" xml:space="preserve">
          <source>Reference Style - All Levels</source>
          <target state="translated">参考风格----所有级别</target>
        </trans-unit>
        <trans-unit id="87501ec8f9c14578de24897ca30d9f6d23a240db" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md&quot;&gt;&lt;em&gt;C++ Core Guidelines (C++11/14/17/&amp;hellip;)&lt;/em&gt;&lt;/a&gt; (edited by Bjarne Stroustrup and Herb Sutter) is an evolving online document consisting of a set of guidelines for using modern C++ well. The guidelines are focused on relatively higher-level issues, such as interfaces, resource management, memory management and concurrency affecting application architecture and library design. The project was &lt;a href=&quot;https://isocpp.org/blog/2015/09/bjarne-stroustrup-announces-cpp-core-guidelines&quot;&gt;announced at CppCon'15 by Bjarne Stroustrup and others&lt;/a&gt; and welcomes contributions from the community. Most guidelines are supplemented with a rationale and examples as well as discussions of possible tool support. Many rules are designed specifically to be automatically checkable by static analysis tools.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md&quot;&gt;&lt;em&gt;C ++核心准则（C ++&lt;/em&gt;&lt;/a&gt; 11/14/17 &lt;em&gt;/&amp;hellip;）&lt;/em&gt; （由Bjarne Stroustrup和Herb Sutter编辑）是一个不断发展的在线文档，其中包含一组有关如何正确使用现代C ++的准则。 该指南侧重于相对较高级别的问题，例如接口，资源管理，内存管理以及影响应用程序体系结构和库设计的并发性。 &lt;a href=&quot;https://isocpp.org/blog/2015/09/bjarne-stroustrup-announces-cpp-core-guidelines&quot;&gt;Bjarne Stroustrup等人在CppCon'15上宣布了&lt;/a&gt;该项目，并欢迎社区的贡献。 大多数准则都补充有基本原理和示例以及有关可能的工具支持的讨论。 许多规则经过专门设计，可以由静态分析工具自动检查。</target>
        </trans-unit>
        <trans-unit id="8673b09ab00c20f74df61950867054395adce51f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://isocpp.org/faq&quot;&gt;&lt;em&gt;C++ Super-FAQ&lt;/em&gt;&lt;/a&gt; (Marshall Cline, Bjarne Stroustrup and others) is an effort by the Standard C++ Foundation to unify the C++ FAQs previously maintained individually by Marshall Cline and Bjarne Stroustrup and also incorporating new contributions. The items mostly address issues at an intermediate level and are often written with a humorous tone. Not all items might be fully up to date with the latest edition of the C++ standard yet.</source>
          <target state="translated">&lt;a href=&quot;https://isocpp.org/faq&quot;&gt;&lt;em&gt;C ++超级常见问题解答&lt;/em&gt;&lt;/a&gt; （Marshall Cline，Bjarne Stroustrup等）是标准C ++基金会的一项工作，旨在统一先前由Marshall Cline和Bjarne Stroustrup单独维护的C ++ FAQ，并且还加入了新的贡献。 这些项目大多以中级水平解决问题，并且通常以幽默的语气写出来。 并非所有项目都可以完全使用最新版本的C ++标准更新。</target>
        </trans-unit>
        <trans-unit id="4de753951e85340f9c4af73faeb307883e1b71fc" translate="yes" xml:space="preserve">
          <source>The C++17 standard is available, but seemingly not in an economical form &amp;ndash; &lt;a href=&quot;https://www.iso.org/standard/68564.html&quot;&gt;directly from the ISO&lt;/a&gt; it costs 198 Swiss Francs (about $200 US). For most people, the &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4659.pdf&quot;&gt;final draft before standardization&lt;/a&gt; is more than adequate (and free). Many will prefer an &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/n4778.pdf&quot;&gt;even newer draft&lt;/a&gt;, documenting new features that are likely to be included in C++20.</source>
          <target state="translated">可以使用C ++ 17标准，但似乎不是一种经济形式&amp;ndash; &lt;a href=&quot;https://www.iso.org/standard/68564.html&quot;&gt;直接从ISO&lt;/a&gt;定价为198瑞士法郎（约合200美元）。 对于大多数人来说， &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4659.pdf&quot;&gt;标准化之前&lt;/a&gt;的最终草案已足够（免费）。 许多人会更喜欢&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/n4778.pdf&quot;&gt;更新的草案&lt;/a&gt; ，其中记录了C ++ 20中可能包含的新功能。</target>
        </trans-unit>
        <trans-unit id="1f3cb028b6da88b6c74653791f11e503534cce53" translate="yes" xml:space="preserve">
          <source>The Definitive C++ Book Guide and List</source>
          <target state="translated">最终的C++书籍指南和列表</target>
        </trans-unit>
        <trans-unit id="4f8d2af30fed0ef3c4f5c0084d94c74ca73d472d" translate="yes" xml:space="preserve">
          <source>This question attempts to collect the few pearls among the dozens of bad C++ books that are published every year.</source>
          <target state="translated">这个问题试图在每年出版的几十本糟糕的C++书籍中,收集几颗珍珠。</target>
        </trans-unit>
        <trans-unit id="ff95ebfa116cc80f7d355e6706bd2f0a500253e6" translate="yes" xml:space="preserve">
          <source>Unlike many other programming languages, which are often picked up on the go from tutorials found on the Internet, few are able to quickly pick up C++ without studying a well-written C++ book. It is way too big and complex for doing this. In fact, it is so big and complex, that &lt;strong&gt;&lt;em&gt;there are very many very bad C++ books&lt;/em&gt;&lt;/strong&gt; out there. And we are not talking about bad style, but things like sporting &lt;em&gt;glaringly obvious factual errors&lt;/em&gt; and &lt;em&gt;promoting abysmally bad programming styles&lt;/em&gt;.</source>
          <target state="translated">与许多其他编程语言不同，这些语言通常是从Internet上的教程中随时获取的，而没有学习一本写得很好的C ++书籍，很少有人能够快速使用C ++。 这样做太大而复杂。 实际上，它是如此之大和复杂，以至于&lt;strong&gt;&lt;em&gt;有很多非常糟糕的C ++书籍&lt;/em&gt;&lt;/strong&gt; 。 我们不是在谈论不良风格，而是诸如炫耀&lt;em&gt;明显的事实错误&lt;/em&gt;和&lt;em&gt;推广极差的不良编程风格之类的事情&lt;/em&gt; 。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
