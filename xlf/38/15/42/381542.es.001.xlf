<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/381542">
    <body>
      <group id="381542">
        <trans-unit id="1c532b8e159d2f6be41bfbd2e6c1b3c3566c6f16" translate="yes" xml:space="preserve">
          <source>&quot;Pointer Arithmetic&quot; internally calculated as</source>
          <target state="translated">&quot;Aritmética de punteros&quot; calculada internamente como</target>
        </trans-unit>
        <trans-unit id="f90ed12168301e6151719fa19edb73514ba66ab9" translate="yes" xml:space="preserve">
          <source>(And in &lt;code&gt;array[i]&lt;/code&gt;, the array name is implicitly converted to a pointer to the array's first element.)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(Y en la &lt;/font&gt;&lt;/font&gt; &lt;code&gt;array[i]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , el nombre de la matriz se convierte impl&amp;iacute;citamente en un puntero al primer elemento de la matriz).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="665d882bc5ec3ea11a78f3e1d6d3b2faede30961" translate="yes" xml:space="preserve">
          <source>1) pointer to data</source>
          <target state="translated">1)apuntador a los datos</target>
        </trans-unit>
        <trans-unit id="6d4a55de86e2c176f93d7c8e25e81b8961a89739" translate="yes" xml:space="preserve">
          <source>2) const pointer to data</source>
          <target state="translated">2)puntero constante a los datos</target>
        </trans-unit>
        <trans-unit id="dc116f3e7b6cb13d1d9a8ee78be1aaf1c6bdb877" translate="yes" xml:space="preserve">
          <source>3) const pointer to const data</source>
          <target state="translated">3)puntero de la const a los datos de la const</target>
        </trans-unit>
        <trans-unit id="ecd8f0ab071dd440c98d22200e1ba9d53d322230" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;*(a+3)&lt;/code&gt; equals &lt;code&gt;*(3+a)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;*(a+3)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es igual a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;*(3+a)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="28201ef096f2131ccdc6a35516a0644b4ea983ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a&lt;/code&gt; is a pointer to the first element of the array. &lt;code&gt;a[5]&lt;/code&gt; is the value that's 5 &lt;strong&gt;elements&lt;/strong&gt; further from &lt;code&gt;a&lt;/code&gt;, which is the same as &lt;code&gt;*(a + 5)&lt;/code&gt;, and from elementary school math we know those are equal (addition is &lt;a href=&quot;https://en.wikipedia.org/wiki/commutative&quot;&gt;commutative&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es un puntero al primer elemento de la matriz. &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a[5]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es el valor que est&amp;aacute; 5 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;elementos&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; m&amp;aacute;s lejos de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , que es lo mismo que &lt;/font&gt;&lt;/font&gt; &lt;code&gt;*(a + 5)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , y de las matem&amp;aacute;ticas de la escuela primaria sabemos que son iguales (la suma es &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/commutative&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;conmutativa&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="249153e7dded62e636d80b565dbc2016bd13473b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a[2]&lt;/code&gt; is equals to 2[a] because the internal operation on both of this is</source>
          <target state="translated">&lt;code&gt;a[2]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es igual a 2 [a] porque la operaci&amp;oacute;n interna en ambos es&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7493043c20a2ee1a9aa0b07cb9d465f952679903" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;p++;&lt;/code&gt; is valid but &lt;code&gt;a++&lt;/code&gt; is invalid</source>
          <target state="translated">&lt;code&gt;p++;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;es v&amp;aacute;lido pero &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a++&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; no es v&amp;aacute;lido&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="985fb68b5b45504442a8d537a1489c21922d8f1b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;you can understand easily by&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;puedes entender f&amp;aacute;cilmente por&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a230fcbc7d44f33ab50dbec09842e1b4d1a49991" translate="yes" xml:space="preserve">
          <source>A little bit of history now.  Among other languages, BCPL had a fairly major influence on C's early development.  If you declared an array in BCPL with something like:</source>
          <target state="translated">Un poco de historia ahora.Entre otros idiomas,el BCPL tuvo una influencia bastante importante en el desarrollo temprano de C.Si declaras una matriz en BCPL con algo como:</target>
        </trans-unit>
        <trans-unit id="9d3c6f48e3938b4bed030f7359a3407d1923ba45" translate="yes" xml:space="preserve">
          <source>And over the years, any change to that rule would have broken existing code (though the 1989 ANSI C standard might have been a good opportunity).</source>
          <target state="translated">Y a lo largo de los años,cualquier cambio en esa regla habría roto el código existente (aunque la norma ANSI C de 1989 podría haber sido una buena oportunidad).</target>
        </trans-unit>
        <trans-unit id="9c34c03a8950c95878da245890e59067c02e7660" translate="yes" xml:space="preserve">
          <source>And, of course</source>
          <target state="translated">Y,por supuesto</target>
        </trans-unit>
        <trans-unit id="41762cb9625c061a27823eda935b612b05021406" translate="yes" xml:space="preserve">
          <source>As Joel points out in &lt;a href=&quot;https://stackoverflow.blog/2008/12/18/podcast-34/&quot;&gt;Stack Overflow podcast #34&lt;/a&gt;, in &lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0131103628&quot;&gt;C Programming Language&lt;/a&gt; (aka: K &amp;amp; R), there is mention of this property of arrays in C: &lt;code&gt;a[5] == 5[a]&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Como se&amp;ntilde;ala Joel en el &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.blog/2008/12/18/podcast-34/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;podcast Stack Overflow # 34&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , en &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0131103628&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C Programming Language&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (tambi&amp;eacute;n conocido como: K&amp;amp;R), se menciona esta propiedad de los arrays en C: &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a[5] == 5[a]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c95149555cd6976edeb71b3e72ed11b54a2b5b66" translate="yes" xml:space="preserve">
          <source>As we know that we can't change or modify const value in our program cause it's throws an &lt;strong&gt;ERROR&lt;/strong&gt; at compile time</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Como sabemos que no podemos cambiar o modificar el valor constante en nuestro programa porque arroja un &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ERROR&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en el momento de la compilaci&amp;oacute;n&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="90ab497a5e7b7464cce09bdb9f6aa2d857948dfb" translate="yes" xml:space="preserve">
          <source>Because array access is defined in terms of pointers.  &lt;code&gt;a[i]&lt;/code&gt; is defined to mean &lt;code&gt;*(a + i)&lt;/code&gt;, which is commutative.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Porque el acceso a la matriz se define en t&amp;eacute;rminos de punteros. &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a[i]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; se define como media &lt;/font&gt;&lt;/font&gt; &lt;code&gt;*(a + i)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , que es conmutativa.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cb668d53c34ceb6271676e0153f41c6ebe7f633f" translate="yes" xml:space="preserve">
          <source>But in this case we're talking specifically about pointer arithmetic, where one operand is a pointer and the other is an integer. (Integer + integer is a different operation, and pointer + pointer is nonsense.)</source>
          <target state="translated">Pero en este caso estamos hablando específicamente de aritmética de punteros,donde un operando es un puntero y el otro es un entero.(Entero+entero es una operación diferente,y puntero+puntero es una tontería.)</target>
        </trans-unit>
        <trans-unit id="aa1359c3969ec4c8fac3ce4354042aa785004056" translate="yes" xml:space="preserve">
          <source>But the commutativity of addition is not all that obvious in this case.</source>
          <target state="translated">Pero la conmutabilidad de la adición no es tan obvia en este caso.</target>
        </trans-unit>
        <trans-unit id="598b1c1d1625a55404599d1e3f3682223df0545c" translate="yes" xml:space="preserve">
          <source>C++ inherited this definition from C, which got it from B (the commutativity of array indexing is explicitly mentioned in the 1972 &lt;a href=&quot;https://www.bell-labs.com/usr/dmr/www/kbman.html&quot;&gt;Users' Reference to B&lt;/a&gt;), which got it from &lt;a href=&quot;https://www.bell-labs.com/usr/dmr/www/bcpl.html&quot;&gt;BCPL&lt;/a&gt; (manual dated 1967), which may well have gotten it from even earlier languages (CPL? Algol?).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C ++ hered&amp;oacute; esta definici&amp;oacute;n de C, que la obtuvo de B (la conmutatividad de la indexaci&amp;oacute;n de matrices se menciona expl&amp;iacute;citamente en la &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://www.bell-labs.com/usr/dmr/www/kbman.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Referencia de usuarios de&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 1972 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;a B&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ), que la obtuvo de &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://www.bell-labs.com/usr/dmr/www/bcpl.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;BCPL&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (manual fechado en 1967), que bien podr&amp;iacute;a haberla obtenido incluso idiomas anteriores (CPL? Algol?).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="988dcbc4fe0ee658747db4c81dc1258d95b8c55c" translate="yes" xml:space="preserve">
          <source>Changing C and/or C++ to require putting the pointer on the left and the integer on the right might break some existing code, but there would be no loss of real expressive power.</source>
          <target state="translated">Cambiar C y/o C++para requerir poner el puntero a la izquierda y el entero a la derecha podría romper algún código existente,pero no habría ninguna pérdida de poder expresivo real.</target>
        </trans-unit>
        <trans-unit id="8a6489d5b2c67a7d3726a70e1268159af4a397d9" translate="yes" xml:space="preserve">
          <source>Consider the following declarations:</source>
          <target state="translated">Considere las siguientes declaraciones:</target>
        </trans-unit>
        <trans-unit id="b652adbdb6a3ed93ed3cfa571249369d1118cb26" translate="yes" xml:space="preserve">
          <source>For addition, either both operands shall have arithmetic type, or &lt;em&gt;the left&lt;/em&gt;
  operand shall be a pointer to a complete object type and the &lt;em&gt;right operand&lt;/em&gt;
  shall have integer type.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Adem&amp;aacute;s, ambos operandos tendr&amp;aacute;n un tipo aritm&amp;eacute;tico o &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;el&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; operando &lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;izquierdo&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ser&amp;aacute; un puntero a un tipo de objeto completo y el &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;operando derecho&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tendr&amp;aacute; un tipo entero.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6d18d0f48b4c944be08073c1f32334fbe7cd130e" translate="yes" xml:space="preserve">
          <source>For addition, either both operands shall have arithmetic type, or one
  operand shall be a pointer to a complete object type and the other
  shall have integer type.</source>
          <target state="translated">Además,ambos operandos tendrán un tipo aritmético,o bien un operando será un puntero a un tipo de objeto completo y el otro tendrá un tipo entero.</target>
        </trans-unit>
        <trans-unit id="1403d7ce86f32bda0cd4edd41a6686136925e844" translate="yes" xml:space="preserve">
          <source>For pointers in C, we have</source>
          <target state="translated">Para los punteros en C,tenemos</target>
        </trans-unit>
        <trans-unit id="66d14b89e8fc22a7ab29c295425b86d1e3b0db09" translate="yes" xml:space="preserve">
          <source>Hence it is true that &lt;code&gt;a[5] == 5[a].&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por lo tanto, es cierto que &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a[5] == 5[a].&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e750355f8cd7e882204c80ce48acc16a8fd88644" translate="yes" xml:space="preserve">
          <source>How &lt;code&gt;a[5]&lt;/code&gt; will work -&amp;gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C&amp;oacute;mo funcionar&amp;aacute; &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a[5]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; -&amp;gt;&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f55bdf5fd546d350e0f04bb758dbb91c556fc521" translate="yes" xml:space="preserve">
          <source>I just find out this ugly syntax could be &quot;useful&quot;, or at least very fun to play with when you want to deal with an array of indexes which refer to positions into the same array. It can replace nested square brackets and make the code more readable !</source>
          <target state="translated">Acabo de descubrir que esta fea sintaxis podría ser &quot;útil&quot;,o al menos muy divertida para jugar cuando se quiere tratar con una serie de índices que se refieren a posiciones dentro de la misma serie.Puede reemplazar los corchetes anidados y hacer el código más legible!</target>
        </trans-unit>
        <trans-unit id="6523196f463ce8a226b083dadade80781f11a991" translate="yes" xml:space="preserve">
          <source>I know the question is answered, but I couldn't resist sharing this explanation.</source>
          <target state="translated">Sé que la pregunta está respondida,pero no pude resistirme a compartir esta explicación.</target>
        </trans-unit>
        <trans-unit id="879d6f03dde6396f4c6ef6e1366e84d24245382a" translate="yes" xml:space="preserve">
          <source>I remember Principles of Compiler design,
Let's assume &lt;code&gt;a&lt;/code&gt; is an &lt;code&gt;int&lt;/code&gt; array and size of &lt;code&gt;int&lt;/code&gt; is 2 bytes,
&amp;amp; Base address for &lt;code&gt;a&lt;/code&gt; is 1000.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Recuerdo los principios del dise&amp;ntilde;o del compilador, supongamos que &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es una &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;matriz &lt;/font&gt;&lt;/font&gt; &lt;code&gt;int&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y el tama&amp;ntilde;o de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;int&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es 2 bytes, y la direcci&amp;oacute;n base para &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es 1000.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4312bd7f2106bff89c992709b29c9074f9f2d5c3" translate="yes" xml:space="preserve">
          <source>I think something is being missed by the other answers.</source>
          <target state="translated">Creo que algo se está pasando por alto en las otras respuestas.</target>
        </trans-unit>
        <trans-unit id="0120639388c9d9eb979dfcb56da488ae93a32e77" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;http://cs-fundamentals.com/c-programming/arrays-in-c.php&quot;&gt;C arrays&lt;/a&gt;, &lt;code&gt;arr[3]&lt;/code&gt; and &lt;code&gt;3[arr]&lt;/code&gt; are the same, and their equivalent pointer notations are &lt;code&gt;*(arr + 3)&lt;/code&gt; to &lt;code&gt;*(3 + arr)&lt;/code&gt;. But on the contrary &lt;code&gt;[arr]3&lt;/code&gt; or &lt;code&gt;[3]arr&lt;/code&gt; is not correct and will result into syntax error, as &lt;code&gt;(arr + 3)*&lt;/code&gt; and &lt;code&gt;(3 + arr)*&lt;/code&gt; are not valid expressions. The reason is dereference operator should be placed before the address yielded by the expression, not after the address.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En las &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://cs-fundamentals.com/c-programming/arrays-in-c.php&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;matrices C&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;arr[3]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;3[arr]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; son iguales, y sus anotaciones de puntero equivalentes son &lt;/font&gt;&lt;/font&gt; &lt;code&gt;*(arr + 3)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;*(3 + arr)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . Pero por el contrario &lt;/font&gt;&lt;/font&gt; &lt;code&gt;[arr]3&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; o &lt;/font&gt;&lt;/font&gt; &lt;code&gt;[3]arr&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; no es correcto y dar&amp;aacute; como resultado un error de sintaxis, ya que &lt;/font&gt;&lt;/font&gt; &lt;code&gt;(arr + 3)*&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;(3 + arr)*&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; no son expresiones v&amp;aacute;lidas. La raz&amp;oacute;n es que el operador de desreferencia debe colocarse antes de la direcci&amp;oacute;n producida por la expresi&amp;oacute;n, no despu&amp;eacute;s de la direcci&amp;oacute;n.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="750606dee7fb039c0840d301abcb6a2a434c1b8c" translate="yes" xml:space="preserve">
          <source>In &lt;em&gt;a.out&lt;/em&gt;, the symbol &lt;em&gt;a&lt;/em&gt; is at an address that's the beginning of the array, and symbol &lt;em&gt;p&lt;/em&gt; is at an address where a pointer is stored, and the value of the pointer at that memory location is the beginning of the array.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;a.out&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , el s&amp;iacute;mbolo &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;a&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; est&amp;aacute; en una direcci&amp;oacute;n que es el comienzo de la matriz, y el s&amp;iacute;mbolo &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;p&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; est&amp;aacute; en una direcci&amp;oacute;n donde se almacena un puntero, y el valor del puntero en esa ubicaci&amp;oacute;n de memoria es el comienzo de la matriz.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="edb025b4d216cf36fb49869edda6fd6ce53178c2" translate="yes" xml:space="preserve">
          <source>In C</source>
          <target state="translated">En C</target>
        </trans-unit>
        <trans-unit id="0dfdd853ce75c25295e1a1a4ed0060949c855ba6" translate="yes" xml:space="preserve">
          <source>In C++ terms, we really have two sets of overloaded &lt;code&gt;+&lt;/code&gt; operators, which can be loosely described as:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En t&amp;eacute;rminos de C ++, realmente tenemos dos conjuntos de &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;operadores &lt;/font&gt;&lt;/font&gt; &lt;code&gt;+&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; sobrecargados &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;, que pueden describirse libremente como:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="078794ea29568f11e34617aa8c23cdbdff085dea" translate="yes" xml:space="preserve">
          <source>In fact, this is true, i.e wherever one writes &lt;code&gt;a[i]&lt;/code&gt; it can be
  replaced with &lt;code&gt;*(a + i)&lt;/code&gt;  without any problems. In fact, the compiler
  will create the same code in either case. Thus we see that pointer
  arithmetic is the same thing as array indexing. Either syntax produces
  the same result.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;De hecho, esto es cierto, es decir, donde se escribe &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a[i]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; se puede reemplazar con &lt;/font&gt;&lt;/font&gt; &lt;code&gt;*(a + i)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; sin ning&amp;uacute;n problema. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;De hecho, el compilador crear&amp;aacute; el mismo c&amp;oacute;digo en cualquier caso. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por lo tanto, vemos que la aritm&amp;eacute;tica del puntero es lo mismo que la indexaci&amp;oacute;n de matrices. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cualquiera de las sintaxis produce el mismo resultado.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ae47d23442a5f0fc06581a19aa48fcb525bb51fa" translate="yes" xml:space="preserve">
          <source>It could just as easily have said:</source>
          <target state="translated">Podría haber dicho lo mismo:</target>
        </trans-unit>
        <trans-unit id="434d5309f6fb971f10b66d6ec360b256083e8cb2" translate="yes" xml:space="preserve">
          <source>It has very good explanation in &lt;em&gt;A TUTORIAL ON POINTERS AND ARRAYS IN C&lt;/em&gt;
by Ted Jensen.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tiene muy buena explicaci&amp;oacute;n en &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;TUTORIAL SOBRE PUNTEROS Y ARRAYS EN C&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; por Ted Jensen.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e2c902ce692b4aec32e849e37c03678874983500" translate="yes" xml:space="preserve">
          <source>It will return me object at location 990.</source>
          <target state="translated">Me devolverá el objeto en la ubicación 990.</target>
        </trans-unit>
        <trans-unit id="a2e53b6a9b29ea8bc57610fcef4acc120a1007a6" translate="yes" xml:space="preserve">
          <source>Joel says that it's because of pointer arithmetic but I still don't understand. &lt;strong&gt;Why does &lt;code&gt;a[5] == 5[a]&lt;/code&gt;&lt;/strong&gt;?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Joel dice que se debe a la aritm&amp;eacute;tica del puntero, pero a&amp;uacute;n no lo entiendo. &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iquest;Por qu&amp;eacute; &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a[5] == 5[a]&lt;/code&gt; &lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a81097ac61f7a18c6ec85fdfc61133c0cc29d155" translate="yes" xml:space="preserve">
          <source>Just want to point out that C pointers and arrays are not the &lt;em&gt;same&lt;/em&gt;, although in this case the difference is not essential.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Solo quiero se&amp;ntilde;alar que los punteros y las matrices C no son lo &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;mismo&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , aunque en este caso la diferencia no es esencial.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2d2441f535495ef02a1cb465c8735af28bd5b07e" translate="yes" xml:space="preserve">
          <source>Nice question/answers.</source>
          <target state="translated">Bonitas respuestas a las preguntas.</target>
        </trans-unit>
        <trans-unit id="98bc25e30b7642e738cfd78e993ae40eb02b133f" translate="yes" xml:space="preserve">
          <source>Not an answer, but just some food for thought.
If class is having overloaded index/subscript operator, the expression &lt;code&gt;0[x]&lt;/code&gt; will not work:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;No es una respuesta, sino solo algo de reflexi&amp;oacute;n. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si la clase est&amp;aacute; sobrecargando el operador de &amp;iacute;ndice / sub&amp;iacute;ndice, la expresi&amp;oacute;n &lt;/font&gt;&lt;/font&gt; &lt;code&gt;0[x]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; no funcionar&amp;aacute;:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e132b0de5ac062a9a7fde0931c25b8dc3c7098ef" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;!&lt;/code&gt; in BCPL was both a unary prefix operator and a binary infix operator, in both cases doing indirection. just that the binary form included an addition of the two operands before doing the indirection.  Given the word oriented nature of BCPL (and B) this actually made a lot of sense.  The restriction of &quot;pointer and integer&quot; was made necessary in C when it gained data types, and &lt;code&gt;sizeof&lt;/code&gt; became a thing.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tenga en cuenta que &lt;/font&gt;&lt;/font&gt; &lt;code&gt;!&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;en BCPL era tanto un operador de prefijo unario como un operador de infijo binario, en ambos casos haciendo indirecci&amp;oacute;n. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;solo que la forma binaria inclu&amp;iacute;a una adici&amp;oacute;n de los dos operandos antes de hacer la indirecci&amp;oacute;n. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Dada la naturaleza orientada a las palabras de BCPL (y B), esto realmente ten&amp;iacute;a mucho sentido. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La restricci&amp;oacute;n de &quot;puntero e entero&quot; se hizo necesaria en C cuando gan&amp;oacute; tipos de datos, y el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;sizeof&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; convirti&amp;oacute; en una cosa.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4369357497b07857aa5f9f0d59e9912e60fc3c7d" translate="yes" xml:space="preserve">
          <source>Now, looking at this last
  expression, part of it.. &lt;code&gt;(a + i)&lt;/code&gt;, is a simple addition using the +
  operator and the rules of C state that such an expression is
  commutative. That is (a + i) is identical to &lt;code&gt;(i + a)&lt;/code&gt;. Thus we could
  write &lt;code&gt;*(i + a)&lt;/code&gt; just as easily as &lt;code&gt;*(a + i)&lt;/code&gt;.
  But &lt;code&gt;*(i + a)&lt;/code&gt; could have come from &lt;code&gt;i[a]&lt;/code&gt; ! From all of this comes the curious
  truth that if:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ahora, mirando esta &amp;uacute;ltima expresi&amp;oacute;n, parte de ella ... &lt;/font&gt;&lt;/font&gt; &lt;code&gt;(a + i)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , es una simple suma que utiliza el operador + y las reglas de C indican que dicha expresi&amp;oacute;n es conmutativa. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Es decir (a + i) es id&amp;eacute;ntico a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;(i + a)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por lo tanto, podr&amp;iacute;amos escribir &lt;/font&gt;&lt;/font&gt; &lt;code&gt;*(i + a)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tan f&amp;aacute;cilmente como &lt;/font&gt;&lt;/font&gt; &lt;code&gt;*(a + i)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iexcl;Pero &lt;/font&gt;&lt;/font&gt; &lt;code&gt;*(i + a)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; podr&amp;iacute;a haber venido de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;i[a]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ! &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;De todo esto viene la curiosa verdad de que si:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9a0101aaccd31e7c1a382541872ca61e4d2855c1" translate="yes" xml:space="preserve">
          <source>Of course, I'm quite sure that there is no use case for that in real code, but I found it interesting anyway :)</source>
          <target state="translated">Por supuesto,estoy bastante seguro de que no hay caso de uso para eso en el código real,pero lo encontré interesante de todos modos :)</target>
        </trans-unit>
        <trans-unit id="87f7ff2ab3e38a0526469ba301a1a7213140a45e" translate="yes" xml:space="preserve">
          <source>One thing no-one seems to have mentioned about Dinah's problem with &lt;code&gt;sizeof&lt;/code&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Algo que nadie parece haber mencionado sobre el problema de Dinah con &lt;/font&gt;&lt;/font&gt; &lt;code&gt;sizeof&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9699ca5988bf85c5aecce06a126016e9f4290eb8" translate="yes" xml:space="preserve">
          <source>Pointer is a &quot;variable&quot;</source>
          <target state="translated">El puntero es una &quot;variable&quot;</target>
        </trans-unit>
        <trans-unit id="cdd18b5479c5c8d9be0aa2854dc3d5207b558735" translate="yes" xml:space="preserve">
          <source>Similarly when the c code is broken down into 3-address code, 
&lt;code&gt;5[a]&lt;/code&gt; will become -&amp;gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;De manera similar, cuando el c&amp;oacute;digo c se divide en un c&amp;oacute;digo de 3 direcciones, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;5[a]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; se convertir&amp;aacute; en -&amp;gt;&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ab8965c2689cf4af80819e57f31c38b5a532dfaa" translate="yes" xml:space="preserve">
          <source>Since we dont have access to &lt;strong&gt;int&lt;/strong&gt; class, this cannot be done:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Como no tenemos acceso a la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;clase &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;int&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , esto no se puede hacer:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7d2f3a2be090331c6ed0efe4d14445e2a9ccaa11" translate="yes" xml:space="preserve">
          <source>So basically both the statements are pointing to the same location in memory and hence, &lt;code&gt;a[5] = 5[a]&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Entonces, b&amp;aacute;sicamente, ambas declaraciones apuntan a la misma ubicaci&amp;oacute;n en la memoria y, por lo tanto, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a[5] = 5[a]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="74bd9aec219e8a876efe5e9dbf297450688134e3" translate="yes" xml:space="preserve">
          <source>So now we have &lt;code&gt;arr[3]&lt;/code&gt; and &lt;code&gt;3[arr]&lt;/code&gt; meaning exactly the same thing, though the latter form should never appear outside the &lt;a href=&quot;http://ioccc.org/&quot;&gt;IOCCC&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Entonces ahora tenemos &lt;/font&gt;&lt;/font&gt; &lt;code&gt;arr[3]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;3[arr]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; significan exactamente lo mismo, aunque la &amp;uacute;ltima forma nunca deber&amp;iacute;a aparecer fuera de &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://ioccc.org/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;IOCCC&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8d87c687af6a603b7fae4247fa48fbea9ae67405" translate="yes" xml:space="preserve">
          <source>So the idea that array indexing is defined in terms of addition, and that addition, even of a pointer and an integer, is commutative, goes back many decades, to C's ancestor languages.</source>
          <target state="translated">Por lo tanto,la idea de que la indexación de matrices se define en términos de adición,y que la adición,incluso de un puntero y un entero,es conmutativa,se remonta a muchas décadas,a las lenguas ancestrales de C.</target>
        </trans-unit>
        <trans-unit id="a7dcde299d04157c827d07e041baf08423be13a0" translate="yes" xml:space="preserve">
          <source>So why is it this way?</source>
          <target state="translated">Entonces,¿por qué es así?</target>
        </trans-unit>
        <trans-unit id="e4519a10d3120a45f508a759d4090cbf678cee1a" translate="yes" xml:space="preserve">
          <source>So,</source>
          <target state="translated">So,</target>
        </trans-unit>
        <trans-unit id="8c89c7d498821658553bd1ecb86d67fddaaa6e8d" translate="yes" xml:space="preserve">
          <source>Ted Jensen explained it as:</source>
          <target state="translated">Ted Jensen lo explicó como:</target>
        </trans-unit>
        <trans-unit id="a0c02ea0bf226b00f8c97f9fbbcbfce6f19bd500" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;major difference&lt;/strong&gt; I found is...</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;principal diferencia&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que encontr&amp;eacute; es ...&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ddf31a3e26ab563612c3b60a159dbc37fda16b6f" translate="yes" xml:space="preserve">
          <source>The C standard defines the &lt;code&gt;[]&lt;/code&gt; operator as follows:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El est&amp;aacute;ndar C define el &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;operador &lt;/font&gt;&lt;/font&gt; &lt;code&gt;[]&lt;/code&gt; de la&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; siguiente manera:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="49e0ab5351629c999ecc0c6e397b25834b232a2e" translate="yes" xml:space="preserve">
          <source>The C standard's description of the &lt;code&gt;+&lt;/code&gt; operator (&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf&quot;&gt;N1570&lt;/a&gt; 6.5.6) says:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La descripci&amp;oacute;n del est&amp;aacute;ndar C del &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;operador &lt;/font&gt;&lt;/font&gt; &lt;code&gt;+&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ( &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;N1570&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 6.5.6) dice:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2007e88e85408e8f29febd9ef03d45f9952ac7ed" translate="yes" xml:space="preserve">
          <source>The compiler interprets &lt;code&gt;a[i]&lt;/code&gt; as &lt;code&gt;*(a+i)&lt;/code&gt; and the expression &lt;code&gt;5[a]&lt;/code&gt; evaluates to &lt;code&gt;*(5+a)&lt;/code&gt;. Since addition is commutative it turns out that both are equal. Hence the expression evaluates to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El compilador interpreta &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a[i]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; como &lt;/font&gt;&lt;/font&gt; &lt;code&gt;*(a+i)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y la expresi&amp;oacute;n &lt;/font&gt;&lt;/font&gt; &lt;code&gt;5[a]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; eval&amp;uacute;a como &lt;/font&gt;&lt;/font&gt; &lt;code&gt;*(5+a)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Como la suma es conmutativa, resulta que ambos son iguales. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por lo tanto, la expresi&amp;oacute;n se eval&amp;uacute;a como &lt;/font&gt;&lt;/font&gt; &lt;code&gt;true&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e003dbac549e08b0dd4688d334bec18afaeeeaeb" translate="yes" xml:space="preserve">
          <source>The innovation of dispensing with the extra word of storage and having the compiler insert the base address of the array when it was named came later.  According to the C history paper this happened at about the time structures were added to C.</source>
          <target state="translated">La innovación de prescindir de la palabra extra de almacenamiento y de que el compilador insertara la dirección base de la matriz cuando se nombrara vino después.De acuerdo con el documento de historia de C,esto ocurrió más o menos en el momento en que las estructuras fueron añadidas a C.</target>
        </trans-unit>
        <trans-unit id="e1d793f269a6c0a67206e321358c9256e4f0fa74" translate="yes" xml:space="preserve">
          <source>The main reason for this was that back in the 70's when C was designed, computers didn't have much memory (64KB was a lot), so the C compiler didn't do much syntax checking.  Hence &quot;&lt;code&gt;X[Y]&lt;/code&gt;&quot; was rather blindly translated into &quot;&lt;code&gt;*(X+Y)&lt;/code&gt;&quot;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La raz&amp;oacute;n principal de esto fue que en los a&amp;ntilde;os 70, cuando se dise&amp;ntilde;&amp;oacute; C, las computadoras no ten&amp;iacute;an mucha memoria (64KB era mucho), por lo que el compilador de C no hizo mucha verificaci&amp;oacute;n de sintaxis. Por lo tanto, &quot; &lt;/font&gt;&lt;/font&gt; &lt;code&gt;X[Y]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &quot; se tradujo ciegamente en &quot; &lt;/font&gt;&lt;/font&gt; &lt;code&gt;*(X+Y)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &quot;&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5598417c3877f380e96a22cde55fcdd9a8eba2a1" translate="yes" xml:space="preserve">
          <source>Therefore &lt;code&gt;a[5]&lt;/code&gt; will evaluate to:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por lo tanto, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a[5]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; evaluar&amp;aacute; a:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e28410e5118fc1353afc84b39ff63a4c00217208" translate="yes" xml:space="preserve">
          <source>This also explains the &quot;&lt;code&gt;+=&lt;/code&gt;&quot; and &quot;&lt;code&gt;++&lt;/code&gt;&quot; syntaxes.  Everything in the form &quot;&lt;code&gt;A = B + C&lt;/code&gt;&quot; had the same compiled form.  But, if B was the same object as A, then an assembly level optimization was available.  But the compiler wasn't bright enough to recognize it, so the developer had to (&lt;code&gt;A += C&lt;/code&gt;).   Similarly, if &lt;code&gt;C&lt;/code&gt; was &lt;code&gt;1&lt;/code&gt;, a different assembly level optimization was available, and again the developer had to make it explicit, because the compiler didn't recognize it.   (More recently compilers do, so those syntaxes are largely unnecessary these days)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esto tambi&amp;eacute;n explica las &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;sintaxis &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&quot; &lt;/font&gt;&lt;/font&gt; &lt;code&gt;+=&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &quot; y &quot; &lt;/font&gt;&lt;/font&gt; &lt;code&gt;++&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &quot;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Todo en la forma &quot; &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A = B + C&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &quot; ten&amp;iacute;a la misma forma compilada. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Pero, si B era el mismo objeto que A, entonces estaba disponible una optimizaci&amp;oacute;n de nivel de ensamblaje. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Pero el compilador no era lo suficientemente brillante como para reconocerlo, por lo que el desarrollador tuvo que ( &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A += C&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Del mismo modo, si &lt;/font&gt;&lt;/font&gt; &lt;code&gt;C&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; era &lt;/font&gt;&lt;/font&gt; &lt;code&gt;1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , una optimizaci&amp;oacute;n de nivel de ensamblaje diferente estaba disponible, y nuevamente el desarrollador tuvo que hacerlo expl&amp;iacute;cito, porque el compilador no lo reconoci&amp;oacute;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(Los compiladores m&amp;aacute;s recientes lo hacen, por lo que esas sintaxis son en gran medida innecesarias en estos d&amp;iacute;as)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2957c7291e8dd3b7c1bafc7a958af2782509f1ac" translate="yes" xml:space="preserve">
          <source>This explanation is also the reason why negative indexes in arrays work in C.</source>
          <target state="translated">Esta explicación es también la razón por la que los índices negativos de los conjuntos funcionan en C.</target>
        </trans-unit>
        <trans-unit id="8fc0a843bdfadc65145a35ad68cd5c63d07409c1" translate="yes" xml:space="preserve">
          <source>This is NOT saying that pointers and arrays
  are the same thing, they are not. We are only saying that to identify
  a given element of an array we have the choice of two syntaxes, one
  using array indexing and the other using pointer arithmetic, which
  yield identical results.</source>
          <target state="translated">Esto no quiere decir que los punteros y las matrices sean lo mismo,no lo son.Sólo estamos diciendo que para identificar un elemento dado de una matriz tenemos la opción de dos sintaxis,una que utiliza la indexación de la matriz y la otra que utiliza la aritmética de los punteros,que dan resultados idénticos.</target>
        </trans-unit>
        <trans-unit id="a225f9d9ce3692ad1562eee23a824ea01f5447d4" translate="yes" xml:space="preserve">
          <source>Those languages were much less strongly typed than modern C is. In particular, the distinction between pointers and integers was often ignored. (Early C programmers sometimes used pointers as unsigned integers, before the &lt;code&gt;unsigned&lt;/code&gt; keyword was added to the language.) So the idea of making addition non-commutative because the operands are of different types probably wouldn't have occurred to the designers of those languages. If a user wanted to add two &quot;things&quot;, whether those &quot;things&quot; are integers, pointers, or something else, it wasn't up to the language to prevent it.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esos lenguajes fueron mucho menos fuertemente tipados que el C moderno. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En particular, a menudo se ignoraba la distinci&amp;oacute;n entre punteros y enteros. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(Los primeros programadores de C a veces usaban punteros como enteros sin signo, antes de que la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;palabra clave &lt;/font&gt;&lt;/font&gt; &lt;code&gt;unsigned&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; se agregara al lenguaje). Por lo tanto, la idea de hacer que la suma no sea conmutativa porque los operandos son de diferentes tipos probablemente no se les habr&amp;iacute;a ocurrido a los dise&amp;ntilde;adores de esos idiomas . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si un usuario desea agregar dos &quot;cosas&quot;, ya sea que esas &quot;cosas&quot; sean n&amp;uacute;meros enteros, punteros u otra cosa, no depend&amp;iacute;a del idioma evitarlo.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f65772585dbe5c3f9be396b2762536b24bd6101e" translate="yes" xml:space="preserve">
          <source>To answer the question literally. It is not always true that &lt;code&gt;x == x&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para responder la pregunta literalmente. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;No siempre es cierto que &lt;/font&gt;&lt;/font&gt; &lt;code&gt;x == x&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1f115cf17db3cd235931483179db65280105e850" translate="yes" xml:space="preserve">
          <source>We can re-initialize the pointer by an address but not the same case with an array.</source>
          <target state="translated">Podemos reiniciar el puntero por una dirección pero no el mismo caso con una matriz.</target>
        </trans-unit>
        <trans-unit id="8e6493efc14ecc048b709d17d6a46595f95919cb" translate="yes" xml:space="preserve">
          <source>Well, this is a feature that is only possible because of the language support.</source>
          <target state="translated">Bueno,esta es una característica que sólo es posible por el soporte del lenguaje.</target>
        </trans-unit>
        <trans-unit id="06ef8221698e1df9e0d60c9945a8ac3f43b1e272" translate="yes" xml:space="preserve">
          <source>When both operands are of the same type, or even of different numeric types that are promoted to a common type, commutativity makes perfect sense: &lt;code&gt;x + y == y + x&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cuando ambos operandos son del mismo tipo, o incluso de diferentes tipos num&amp;eacute;ricos que se promueven a un tipo com&amp;uacute;n, la conmutatividad tiene mucho sentido: &lt;/font&gt;&lt;/font&gt; &lt;code&gt;x + y == y + x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="016171cdc5bdaa54ed0b2e5083fab7678a06cdf1" translate="yes" xml:space="preserve">
          <source>When you &lt;strong&gt;define an array&lt;/strong&gt; at a time one &lt;strong&gt;address is initialize&lt;/strong&gt; in that pointer</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cuando &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;define una matriz&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; a la vez &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;, se inicializa&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; una &lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;direcci&amp;oacute;n&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en ese puntero&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cc4155f374b80bf76ee1bda0459d1bd13e1acb80" translate="yes" xml:space="preserve">
          <source>With arrays, why is it the case that a[5] == 5[a]</source>
          <target state="translated">Con las matrices,¿por qué es el caso de que a[5]==5[a]</target>
        </trans-unit>
        <trans-unit id="8b25d23d68d162aaa08b9e9252d3485eb5bb4e54" translate="yes" xml:space="preserve">
          <source>Yes, &lt;code&gt;p[i]&lt;/code&gt; is by definition equivalent to &lt;code&gt;*(p+i)&lt;/code&gt;, which (because addition is commutative) is equivalent to &lt;code&gt;*(i+p)&lt;/code&gt;, which (again, by the definition of the &lt;code&gt;[]&lt;/code&gt; operator) is equivalent to &lt;code&gt;i[p]&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;S&amp;iacute;, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;p[i]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es, por definici&amp;oacute;n, equivalente a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;*(p+i)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , que (porque la suma es conmutativa) es equivalente a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;*(i+p)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , que (de nuevo, seg&amp;uacute;n la definici&amp;oacute;n del &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;operador &lt;/font&gt;&lt;/font&gt; &lt;code&gt;[]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ) es equivalente a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;i[p]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0db1547a0d27f180923b634a6c385bb5d0d5200d" translate="yes" xml:space="preserve">
          <source>You can only add an integer to a pointer, you can't add two pointers together. That way when adding a pointer to an integer, or an integer to a pointer, the compiler always knows which bit has a size that needs to be taken into account.</source>
          <target state="translated">Sólo puedes añadir un entero a un puntero,no puedes añadir dos punteros juntos.De esa manera,cuando se agrega un puntero a un entero,o un entero a un puntero,el compilador siempre sabe qué bit tiene un tamaño que debe tenerse en cuenta.</target>
        </trans-unit>
        <trans-unit id="ce350d74843615e170e417c9b55ec5ae40abbf7e" translate="yes" xml:space="preserve">
          <source>[] - that operator can be replaceable with pointer * .</source>
          <target state="translated">[]-ese operador puede ser reemplazado con el puntero*.</target>
        </trans-unit>
        <trans-unit id="6f2172deda32c22bb7ed326f855cd1e60b094d2c" translate="yes" xml:space="preserve">
          <source>a - containing address (people call it as base address) just like an (2) type of pointer in our list</source>
          <target state="translated">a-que contiene la dirección (la gente la llama como dirección base)al igual que un (2)tipo de puntero en nuestra lista</target>
        </trans-unit>
        <trans-unit id="97a88f2c750b6a9b26b40be8f3c5948f70a331d7" translate="yes" xml:space="preserve">
          <source>a[5] is nothing but *(a + 5)</source>
          <target state="translated">a[5]no es nada más que *(a+5)</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">and</target>
        </trans-unit>
        <trans-unit id="93091c2e64403052e4bd3ed3f36e43ef771c82a2" translate="yes" xml:space="preserve">
          <source>and &lt;code&gt;5[a]&lt;/code&gt; will evaluate to:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;5[a]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; evaluar&amp;aacute; a:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a0329e14c13535bcb6359a9184aa3bb549bbac0a" translate="yes" xml:space="preserve">
          <source>and also</source>
          <target state="translated">y también</target>
        </trans-unit>
        <trans-unit id="7b87ed0f8f42e4beea17f77738a242956f749a4c" translate="yes" xml:space="preserve">
          <source>and back to your question...</source>
          <target state="translated">y volviendo a tu pregunta...</target>
        </trans-unit>
        <trans-unit id="6e14a5162bf2176970b34c6a462fbb0f77fbdaba" translate="yes" xml:space="preserve">
          <source>and the arrays are type of (2) from our list</source>
          <target state="translated">y las matrices son del tipo (2)de nuestra lista</target>
        </trans-unit>
        <trans-unit id="77b73075908163972d844091f09a9b5bc0421fef" translate="yes" xml:space="preserve">
          <source>are different ways to refer to  an element in an array ! (NOT AT ALL WEIRD)</source>
          <target state="translated">son diferentes maneras de referirse a un elemento en un conjunto! (NO ES NADA RARO)</target>
        </trans-unit>
        <trans-unit id="02a97d497b5ebda3f799171a3381d322a9c53bce" translate="yes" xml:space="preserve">
          <source>array name is a &quot;mnemonic&quot; or &quot;synonym&quot;</source>
          <target state="translated">El nombre de la matriz es un &quot;mnemotécnico&quot; o &quot;sinónimo&quot;</target>
        </trans-unit>
        <trans-unit id="e650b4bcfab638a85de907196e6b5cfdd86dd6ce" translate="yes" xml:space="preserve">
          <source>i.e. if I access &lt;code&gt;a[-5]&lt;/code&gt; it will give me</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;es decir, si accedo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a[-5]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; me dar&amp;aacute;&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="785229f56486c15d2737b6075a53f6cb6bbec742" translate="yes" xml:space="preserve">
          <source>in c compiler</source>
          <target state="translated">en el compilador c</target>
        </trans-unit>
        <trans-unit id="988337ebfe6581049f95ede5081b3071f64d533f" translate="yes" xml:space="preserve">
          <source>in which case both &lt;code&gt;i + p&lt;/code&gt; and &lt;code&gt;i[p]&lt;/code&gt; would be illegal.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;en cuyo caso, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;i + p&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; e &lt;/font&gt;&lt;/font&gt; &lt;code&gt;i[p]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ser&amp;iacute;an ilegales.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c94c0e41bc274bd0e78c44d3277f3bef91ccf351" translate="yes" xml:space="preserve">
          <source>is the same as writing</source>
          <target state="translated">es lo mismo que escribir</target>
        </trans-unit>
        <trans-unit id="3160b126bd0ef17f439072b3f5f9ec151c6a6c87" translate="yes" xml:space="preserve">
          <source>of which only the first is really necessary.</source>
          <target state="translated">de los cuales sólo el primero es realmente necesario.</target>
        </trans-unit>
        <trans-unit id="b08aa496bf69321c55248a2a8c6e8a6b6565fcc5" translate="yes" xml:space="preserve">
          <source>pointer types</source>
          <target state="translated">tipos de puntero</target>
        </trans-unit>
        <trans-unit id="b024f8c2bfa6dbc6442cb571d5d5d6243c0ca744" translate="yes" xml:space="preserve">
          <source>prints</source>
          <target state="translated">prints</target>
        </trans-unit>
        <trans-unit id="6049b2ff36f9c94c3a5f5916f9eae4ace9ddc50b" translate="yes" xml:space="preserve">
          <source>really did have to do &lt;code&gt;J = !(V + 5)&lt;/code&gt; (using BCPL syntax) since it was necessary to fetch V to get the base address of the array.  Thus &lt;code&gt;V!5&lt;/code&gt; and &lt;code&gt;5!V&lt;/code&gt; were synonymous.  As an anecdotal observation, WAFL (Warwick Functional Language) was written in BCPL, and to the best of my memory tended to use the latter syntax rather than the former for accessing the nodes used as data storage.  Granted this is from somewhere between 35 and 40 years ago, so my memory is a little rusty. :)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;realmente ten&amp;iacute;a que hacer &lt;/font&gt;&lt;/font&gt; &lt;code&gt;J = !(V + 5)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (usando la sintaxis BCPL) ya que era necesario buscar V para obtener la direcci&amp;oacute;n base de la matriz. Por lo tanto, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;V!5&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;5!V&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; son sin&amp;oacute;nimos. Como observaci&amp;oacute;n anecd&amp;oacute;tica, WAFL (Warwick Functional Language) fue escrito en BCPL, y en lo mejor de mi memoria tend&amp;iacute;a a usar la &amp;uacute;ltima sintaxis en lugar de la primera para acceder a los nodos utilizados como almacenamiento de datos. De acuerdo, esto es de hace 35 a 40 a&amp;ntilde;os, as&amp;iacute; que mi memoria est&amp;aacute; un poco oxidada. :)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2599991ed8fb7accd72a93b52acec6c9e1462926" translate="yes" xml:space="preserve">
          <source>so finally...</source>
          <target state="translated">así que finalmente...</target>
        </trans-unit>
        <trans-unit id="45f0d72226f6c0a5c5c39929b28a3dfa425d4d83" translate="yes" xml:space="preserve">
          <source>that actually allocated 11 words of memory, not 10.  Typically V was the first, and contained the address of the immediately following word.  So unlike C, naming V went to that location and picked up the address of the zeroeth element of the array.  Therefore array indirection in BCPL, expressed as</source>
          <target state="translated">que en realidad asignó 11 palabras de memoria,no 10.Típicamente V fue la primera,y contenía la dirección de la palabra inmediatamente siguiente.Así que a diferencia de la C,nombrar a V fue a esa ubicación y recogió la dirección del elemento cero de la matriz.Por lo tanto,la matriz indirecta en BCPL,expresada como</target>
        </trans-unit>
        <trans-unit id="1935d7b6e1cdaa0cb2a12b33ef6db0f1f938bf83" translate="yes" xml:space="preserve">
          <source>writing</source>
          <target state="translated">writing</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
