<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/381542">
    <body>
      <group id="381542">
        <trans-unit id="1c532b8e159d2f6be41bfbd2e6c1b3c3566c6f16" translate="yes" xml:space="preserve">
          <source>&quot;Pointer Arithmetic&quot; internally calculated as</source>
          <target state="translated">&quot;ポインタ演算 &quot;は内部的に次のように計算されます。</target>
        </trans-unit>
        <trans-unit id="f90ed12168301e6151719fa19edb73514ba66ab9" translate="yes" xml:space="preserve">
          <source>(And in &lt;code&gt;array[i]&lt;/code&gt;, the array name is implicitly converted to a pointer to the array's first element.)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（そして&lt;/font&gt;&lt;/font&gt; &lt;code&gt;array[i]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;では、配列名は暗黙的に配列の最初の要素へのポインターに変換されます。）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="665d882bc5ec3ea11a78f3e1d6d3b2faede30961" translate="yes" xml:space="preserve">
          <source>1) pointer to data</source>
          <target state="translated">1)データへのポインタ</target>
        </trans-unit>
        <trans-unit id="6d4a55de86e2c176f93d7c8e25e81b8961a89739" translate="yes" xml:space="preserve">
          <source>2) const pointer to data</source>
          <target state="translated">2)データへの const ポインタ</target>
        </trans-unit>
        <trans-unit id="dc116f3e7b6cb13d1d9a8ee78be1aaf1c6bdb877" translate="yes" xml:space="preserve">
          <source>3) const pointer to const data</source>
          <target state="translated">3)const データへの const ポインタ</target>
        </trans-unit>
        <trans-unit id="ecd8f0ab071dd440c98d22200e1ba9d53d322230" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;*(a+3)&lt;/code&gt; equals &lt;code&gt;*(3+a)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;*(a+3)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt; &lt;code&gt;*(3+a)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;と等しい&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="28201ef096f2131ccdc6a35516a0644b4ea983ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a&lt;/code&gt; is a pointer to the first element of the array. &lt;code&gt;a[5]&lt;/code&gt; is the value that's 5 &lt;strong&gt;elements&lt;/strong&gt; further from &lt;code&gt;a&lt;/code&gt;, which is the same as &lt;code&gt;*(a + 5)&lt;/code&gt;, and from elementary school math we know those are equal (addition is &lt;a href=&quot;https://en.wikipedia.org/wiki/commutative&quot;&gt;commutative&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、配列の最初の要素へのポインターです。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a[5]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、&lt;/font&gt; &lt;code&gt;*(a + 5)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;と同じである&lt;/font&gt; &lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;からさらに&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;5 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;要素&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;離れ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;た値&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;であり、小学校の数学からこれらは等しいことがわかります（加算は&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/commutative&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;可換です&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="249153e7dded62e636d80b565dbc2016bd13473b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a[2]&lt;/code&gt; is equals to 2[a] because the internal operation on both of this is</source>
          <target state="translated">&lt;code&gt;a[2]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は2 [a &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;]&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と等しくなります。これは、両方の内部演算が&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7493043c20a2ee1a9aa0b07cb9d465f952679903" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;p++;&lt;/code&gt; is valid but &lt;code&gt;a++&lt;/code&gt; is invalid</source>
          <target state="translated">&lt;code&gt;p++;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は有効ですが&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a++&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は無効です&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="985fb68b5b45504442a8d537a1489c21922d8f1b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;you can understand easily by&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あなたは簡単に理解できます&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a230fcbc7d44f33ab50dbec09842e1b4d1a49991" translate="yes" xml:space="preserve">
          <source>A little bit of history now.  Among other languages, BCPL had a fairly major influence on C's early development.  If you declared an array in BCPL with something like:</source>
          <target state="translated">ここで少し歴史を振り返ってみましょう。他の言語の中でも、BCPLはC言語の初期の開発にかなり大きな影響を与えました。BCPLで配列を次のように宣言した場合。</target>
        </trans-unit>
        <trans-unit id="9d3c6f48e3938b4bed030f7359a3407d1923ba45" translate="yes" xml:space="preserve">
          <source>And over the years, any change to that rule would have broken existing code (though the 1989 ANSI C standard might have been a good opportunity).</source>
          <target state="translated">そして何年にもわたって、そのルールを変更すると、既存のコードが破られることになりました(1989年のANSI C規格は良い機会だったかもしれませんが)。</target>
        </trans-unit>
        <trans-unit id="9c34c03a8950c95878da245890e59067c02e7660" translate="yes" xml:space="preserve">
          <source>And, of course</source>
          <target state="translated">そして、もちろん</target>
        </trans-unit>
        <trans-unit id="41762cb9625c061a27823eda935b612b05021406" translate="yes" xml:space="preserve">
          <source>As Joel points out in &lt;a href=&quot;https://stackoverflow.blog/2008/12/18/podcast-34/&quot;&gt;Stack Overflow podcast #34&lt;/a&gt;, in &lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0131103628&quot;&gt;C Programming Language&lt;/a&gt; (aka: K &amp;amp; R), there is mention of this property of arrays in C: &lt;code&gt;a[5] == 5[a]&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Joel &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が&lt;/font&gt;&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0131103628&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cプログラミング言語&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（別名：K＆R）の&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.blog/2008/12/18/podcast-34/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Stack Overflowポッドキャスト＃34&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;で&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;指摘しているように&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の配列のこのプロパティについての言及があります：&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a[5] == 5[a]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c95149555cd6976edeb71b3e72ed11b54a2b5b66" translate="yes" xml:space="preserve">
          <source>As we know that we can't change or modify const value in our program cause it's throws an &lt;strong&gt;ERROR&lt;/strong&gt; at compile time</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プログラムでconst値を変更または変更できないことがわかっている&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ため、コンパイル時に&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ERRORが&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;スローさ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;れます&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="90ab497a5e7b7464cce09bdb9f6aa2d857948dfb" translate="yes" xml:space="preserve">
          <source>Because array access is defined in terms of pointers.  &lt;code&gt;a[i]&lt;/code&gt; is defined to mean &lt;code&gt;*(a + i)&lt;/code&gt;, which is commutative.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列アクセスはポインターの観点から定義されているためです。 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a[i]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、可換である&lt;/font&gt;&lt;/font&gt; &lt;code&gt;*(a + i)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を意味すると定義されてい&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cb668d53c34ceb6271676e0153f41c6ebe7f633f" translate="yes" xml:space="preserve">
          <source>But in this case we're talking specifically about pointer arithmetic, where one operand is a pointer and the other is an integer. (Integer + integer is a different operation, and pointer + pointer is nonsense.)</source>
          <target state="translated">しかし、この場合は、一方のオペランドがポインタで、他方が整数であるポインタ演算の話をしています。(整数+整数は別の演算であり、ポインタ+ポインタはナンセンスです)。</target>
        </trans-unit>
        <trans-unit id="aa1359c3969ec4c8fac3ce4354042aa785004056" translate="yes" xml:space="preserve">
          <source>But the commutativity of addition is not all that obvious in this case.</source>
          <target state="translated">しかし、この場合、加算の可換性はすべてが明らかではありません。</target>
        </trans-unit>
        <trans-unit id="598b1c1d1625a55404599d1e3f3682223df0545c" translate="yes" xml:space="preserve">
          <source>C++ inherited this definition from C, which got it from B (the commutativity of array indexing is explicitly mentioned in the 1972 &lt;a href=&quot;https://www.bell-labs.com/usr/dmr/www/kbman.html&quot;&gt;Users' Reference to B&lt;/a&gt;), which got it from &lt;a href=&quot;https://www.bell-labs.com/usr/dmr/www/bcpl.html&quot;&gt;BCPL&lt;/a&gt; (manual dated 1967), which may well have gotten it from even earlier languages (CPL? Algol?).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C ++は、B（配列インデックスの可換性が明示的に1972のに記載されているからそれを得たCからこの定義、継承された&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://www.bell-labs.com/usr/dmr/www/kbman.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Bにユーザリファレンス&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;からそれを得た）、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://www.bell-labs.com/usr/dmr/www/bcpl.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;BCPL&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;もさえからそれを得ていること（手動日付1967）、以前の言語（CPL？Algol？）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="988dcbc4fe0ee658747db4c81dc1258d95b8c55c" translate="yes" xml:space="preserve">
          <source>Changing C and/or C++ to require putting the pointer on the left and the integer on the right might break some existing code, but there would be no loss of real expressive power.</source>
          <target state="translated">CやC++を変更して、ポインタを左に、整数を右に置くことを要求するようにすると、既存のコードが壊れてしまうかもしれませんが、本当の表現力が失われることはありません。</target>
        </trans-unit>
        <trans-unit id="8a6489d5b2c67a7d3726a70e1268159af4a397d9" translate="yes" xml:space="preserve">
          <source>Consider the following declarations:</source>
          <target state="translated">以下の宣言を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="b652adbdb6a3ed93ed3cfa571249369d1118cb26" translate="yes" xml:space="preserve">
          <source>For addition, either both operands shall have arithmetic type, or &lt;em&gt;the left&lt;/em&gt;
  operand shall be a pointer to a complete object type and the &lt;em&gt;right operand&lt;/em&gt;
  shall have integer type.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;さらに、両方のオペランドが算術型であるか&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、左の&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; オペランドが完全なオブジェクト型へのポインタであり、&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;右のオペランド&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; が整数型である必要があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6d18d0f48b4c944be08073c1f32334fbe7cd130e" translate="yes" xml:space="preserve">
          <source>For addition, either both operands shall have arithmetic type, or one
  operand shall be a pointer to a complete object type and the other
  shall have integer type.</source>
          <target state="translated">また、両方のオペランドが算術型であるか、一方のオペランドが完全オブジェクト型へのポインタであり、他方のオペランドが整数型であるかのいずれかである。</target>
        </trans-unit>
        <trans-unit id="1403d7ce86f32bda0cd4edd41a6686136925e844" translate="yes" xml:space="preserve">
          <source>For pointers in C, we have</source>
          <target state="translated">C のポインタについては、次のようになります。</target>
        </trans-unit>
        <trans-unit id="66d14b89e8fc22a7ab29c295425b86d1e3b0db09" translate="yes" xml:space="preserve">
          <source>Hence it is true that &lt;code&gt;a[5] == 5[a].&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、&lt;/font&gt; &lt;code&gt;a[5] == 5[a].&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;で&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ある&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ことは事実です&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e750355f8cd7e882204c80ce48acc16a8fd88644" translate="yes" xml:space="preserve">
          <source>How &lt;code&gt;a[5]&lt;/code&gt; will work -&amp;gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;どのように&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a[5]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;動作します- &amp;gt;&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f55bdf5fd546d350e0f04bb758dbb91c556fc521" translate="yes" xml:space="preserve">
          <source>I just find out this ugly syntax could be &quot;useful&quot;, or at least very fun to play with when you want to deal with an array of indexes which refer to positions into the same array. It can replace nested square brackets and make the code more readable !</source>
          <target state="translated">この醜い構文は「役に立つ」かもしれないし、少なくとも、同じ配列の位置を参照するインデックスの配列を扱いたいときにはとても楽しいです。これは、入れ子になった角括弧を置き換えることができ、コードをより読みやすくすることができます!</target>
        </trans-unit>
        <trans-unit id="6523196f463ce8a226b083dadade80781f11a991" translate="yes" xml:space="preserve">
          <source>I know the question is answered, but I couldn't resist sharing this explanation.</source>
          <target state="translated">質問に答えているのはわかっているのですが、この説明を共有せずにはいられませんでした。</target>
        </trans-unit>
        <trans-unit id="879d6f03dde6396f4c6ef6e1366e84d24245382a" translate="yes" xml:space="preserve">
          <source>I remember Principles of Compiler design,
Let's assume &lt;code&gt;a&lt;/code&gt; is an &lt;code&gt;int&lt;/code&gt; array and size of &lt;code&gt;int&lt;/code&gt; is 2 bytes,
&amp;amp; Base address for &lt;code&gt;a&lt;/code&gt; is 1000.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私は、コンパイラの設計の原則を覚えて、レッツ・想定し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ている&lt;/font&gt; &lt;code&gt;int&lt;/code&gt; 型&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の配列やサイズ&lt;/font&gt; &lt;code&gt;int&lt;/code&gt; は&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 2バイトで、＆のベースアドレス&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;1000年です。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4312bd7f2106bff89c992709b29c9074f9f2d5c3" translate="yes" xml:space="preserve">
          <source>I think something is being missed by the other answers.</source>
          <target state="translated">他の回答で何かが見落とされているような気がします。</target>
        </trans-unit>
        <trans-unit id="0120639388c9d9eb979dfcb56da488ae93a32e77" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;http://cs-fundamentals.com/c-programming/arrays-in-c.php&quot;&gt;C arrays&lt;/a&gt;, &lt;code&gt;arr[3]&lt;/code&gt; and &lt;code&gt;3[arr]&lt;/code&gt; are the same, and their equivalent pointer notations are &lt;code&gt;*(arr + 3)&lt;/code&gt; to &lt;code&gt;*(3 + arr)&lt;/code&gt;. But on the contrary &lt;code&gt;[arr]3&lt;/code&gt; or &lt;code&gt;[3]arr&lt;/code&gt; is not correct and will result into syntax error, as &lt;code&gt;(arr + 3)*&lt;/code&gt; and &lt;code&gt;(3 + arr)*&lt;/code&gt; are not valid expressions. The reason is dereference operator should be placed before the address yielded by the expression, not after the address.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;http://cs-fundamentals.com/c-programming/arrays-in-c.php&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cアレイ&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;arr[3]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;及び&lt;/font&gt;&lt;/font&gt; &lt;code&gt;3[arr]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;同じであり、その等価ポインタ表記は&lt;/font&gt;&lt;/font&gt; &lt;code&gt;*(arr + 3)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;*(3 + arr)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。しかし、逆に&lt;/font&gt;&lt;/font&gt; &lt;code&gt;[arr]3&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;または&lt;/font&gt;&lt;/font&gt; &lt;code&gt;[3]arr&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は正しくありません。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;(arr + 3)*&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;および&lt;/font&gt;&lt;/font&gt; &lt;code&gt;(3 + arr)*&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は有効な式で&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はないため、構文エラーになります&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。その理由は、逆参照演算子は、アドレスの後にではなく、式によって生成されたアドレスの前に配置する必要があるためです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="750606dee7fb039c0840d301abcb6a2a434c1b8c" translate="yes" xml:space="preserve">
          <source>In &lt;em&gt;a.out&lt;/em&gt;, the symbol &lt;em&gt;a&lt;/em&gt; is at an address that's the beginning of the array, and symbol &lt;em&gt;p&lt;/em&gt; is at an address where a pointer is stored, and the value of the pointer at that memory location is the beginning of the array.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;a.outの&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、記号&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Aは&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列の先頭のアドレスであり、記号&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;pは&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ポインタが格納されているアドレスであり、そのメモリ位置にポインタの値は、配列の先頭です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="edb025b4d216cf36fb49869edda6fd6ce53178c2" translate="yes" xml:space="preserve">
          <source>In C</source>
          <target state="translated">Cでは</target>
        </trans-unit>
        <trans-unit id="0dfdd853ce75c25295e1a1a4ed0060949c855ba6" translate="yes" xml:space="preserve">
          <source>In C++ terms, we really have two sets of overloaded &lt;code&gt;+&lt;/code&gt; operators, which can be loosely described as:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C ++の用語では、実際には次の&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ように大まかに説明できる&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2つのオーバーロードされた&lt;/font&gt;&lt;/font&gt; &lt;code&gt;+&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;演算子の&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;セット&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="078794ea29568f11e34617aa8c23cdbdff085dea" translate="yes" xml:space="preserve">
          <source>In fact, this is true, i.e wherever one writes &lt;code&gt;a[i]&lt;/code&gt; it can be
  replaced with &lt;code&gt;*(a + i)&lt;/code&gt;  without any problems. In fact, the compiler
  will create the same code in either case. Thus we see that pointer
  arithmetic is the same thing as array indexing. Either syntax produces
  the same result.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;実際、これは真実です。つまり&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a[i]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;どこに書き込んで&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; も、問題なく&lt;/font&gt;&lt;/font&gt; &lt;code&gt;*(a + i)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;置き換えることができます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;実際、コンパイラはどちらの場合でも同じコードを作成します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、ポインタ演算は配列のインデックス付けと同じであることがわかります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;どちらの構文でも同じ結果になります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ae47d23442a5f0fc06581a19aa48fcb525bb51fa" translate="yes" xml:space="preserve">
          <source>It could just as easily have said:</source>
          <target state="translated">と言った方がいいかもしれませんね。</target>
        </trans-unit>
        <trans-unit id="434d5309f6fb971f10b66d6ec360b256083e8cb2" translate="yes" xml:space="preserve">
          <source>It has very good explanation in &lt;em&gt;A TUTORIAL ON POINTERS AND ARRAYS IN C&lt;/em&gt;
by Ted Jensen.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Ted Jensenによる&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cのポインタと配列に関するチュートリアル&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;で非常に良い説明があり&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e2c902ce692b4aec32e849e37c03678874983500" translate="yes" xml:space="preserve">
          <source>It will return me object at location 990.</source>
          <target state="translated">990番地のオブジェクトを返してくれます。</target>
        </trans-unit>
        <trans-unit id="a2e53b6a9b29ea8bc57610fcef4acc120a1007a6" translate="yes" xml:space="preserve">
          <source>Joel says that it's because of pointer arithmetic but I still don't understand. &lt;strong&gt;Why does &lt;code&gt;a[5] == 5[a]&lt;/code&gt;&lt;/strong&gt;?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ジョエルはそれがポインター算術のためであると言います、しかし私はまだ理解していません。&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;なぜ&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a[5] == 5[a]&lt;/code&gt; &lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ですか？&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a81097ac61f7a18c6ec85fdfc61133c0cc29d155" translate="yes" xml:space="preserve">
          <source>Just want to point out that C pointers and arrays are not the &lt;em&gt;same&lt;/em&gt;, although in this case the difference is not essential.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cポインターと配列は&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;同じ&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;で&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はないことを指摘したいだけです&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が、この場合、違いは本質的ではありません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2d2441f535495ef02a1cb465c8735af28bd5b07e" translate="yes" xml:space="preserve">
          <source>Nice question/answers.</source>
          <target state="translated">ナイスな質問回答ですね。</target>
        </trans-unit>
        <trans-unit id="98bc25e30b7642e738cfd78e993ae40eb02b133f" translate="yes" xml:space="preserve">
          <source>Not an answer, but just some food for thought.
If class is having overloaded index/subscript operator, the expression &lt;code&gt;0[x]&lt;/code&gt; will not work:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;答えではありませんが、考えるための食べ物です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;クラスにインデックス/添字演算子がオーバーロードされている場合、式&lt;/font&gt;&lt;/font&gt; &lt;code&gt;0[x]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は機能しません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e132b0de5ac062a9a7fde0931c25b8dc3c7098ef" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;!&lt;/code&gt; in BCPL was both a unary prefix operator and a binary infix operator, in both cases doing indirection. just that the binary form included an addition of the two operands before doing the indirection.  Given the word oriented nature of BCPL (and B) this actually made a lot of sense.  The restriction of &quot;pointer and integer&quot; was made necessary in C when it gained data types, and &lt;code&gt;sizeof&lt;/code&gt; became a thing.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;注意してください&lt;/font&gt;&lt;/font&gt; &lt;code&gt;!&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;BCPLでは、単項前置演算子と二項中置演算子の両方で、どちらの場合も間接指定を行いました。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;バイナリ形式には、間接指定を行う前に2つのオペランドが追加されているだけです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;BCPL（およびB）の単語指向の性質を考えると、これは実際には非常に理にかなっています。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;データ型を取得する際にCで「ポインタと整数」の制限が必要に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;なり、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;sizeof&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が物になりました。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4369357497b07857aa5f9f0d59e9912e60fc3c7d" translate="yes" xml:space="preserve">
          <source>Now, looking at this last
  expression, part of it.. &lt;code&gt;(a + i)&lt;/code&gt;, is a simple addition using the +
  operator and the rules of C state that such an expression is
  commutative. That is (a + i) is identical to &lt;code&gt;(i + a)&lt;/code&gt;. Thus we could
  write &lt;code&gt;*(i + a)&lt;/code&gt; just as easily as &lt;code&gt;*(a + i)&lt;/code&gt;.
  But &lt;code&gt;*(i + a)&lt;/code&gt; could have come from &lt;code&gt;i[a]&lt;/code&gt; ! From all of this comes the curious
  truth that if:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここで、この最後の式、その一部.. &lt;/font&gt;&lt;/font&gt; &lt;code&gt;(a + i)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を見ると、+演算子とCの規則を使用した単純な加算であり、そのような式は可換であると述べています。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;つまり、（a + i）は&lt;/font&gt;&lt;/font&gt; &lt;code&gt;(i + a)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と同じです&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt; &lt;code&gt;*(a + i)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;同じくらい簡単に&lt;/font&gt;&lt;/font&gt; &lt;code&gt;*(i + a)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;書くことができます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;しかし、&lt;/font&gt; &lt;code&gt;*(i + a)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt; &lt;code&gt;i[a]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;から来ている可能性があります&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これらすべてから、次のような奇妙な真実が生まれます。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9a0101aaccd31e7c1a382541872ca61e4d2855c1" translate="yes" xml:space="preserve">
          <source>Of course, I'm quite sure that there is no use case for that in real code, but I found it interesting anyway :)</source>
          <target state="translated">もちろん、実際のコードではそのようなユースケースがないことは間違いないのですが、とにかく面白いと思いました :)</target>
        </trans-unit>
        <trans-unit id="87f7ff2ab3e38a0526469ba301a1a7213140a45e" translate="yes" xml:space="preserve">
          <source>One thing no-one seems to have mentioned about Dinah's problem with &lt;code&gt;sizeof&lt;/code&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;sizeof&lt;/code&gt; での&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Dinahの問題について誰も言及していないように見えることの1つ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9699ca5988bf85c5aecce06a126016e9f4290eb8" translate="yes" xml:space="preserve">
          <source>Pointer is a &quot;variable&quot;</source>
          <target state="translated">ポインタは &quot;変数&quot;</target>
        </trans-unit>
        <trans-unit id="cdd18b5479c5c8d9be0aa2854dc3d5207b558735" translate="yes" xml:space="preserve">
          <source>Similarly when the c code is broken down into 3-address code, 
&lt;code&gt;5[a]&lt;/code&gt; will become -&amp;gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;同様に、cコードを3アドレスコードに分解すると、 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;5[a]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は-&amp;gt;&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ab8965c2689cf4af80819e57f31c38b5a532dfaa" translate="yes" xml:space="preserve">
          <source>Since we dont have access to &lt;strong&gt;int&lt;/strong&gt; class, this cannot be done:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;int&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;クラスに&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アクセス&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;できないため、これは実行できません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7d2f3a2be090331c6ed0efe4d14445e2a9ccaa11" translate="yes" xml:space="preserve">
          <source>So basically both the statements are pointing to the same location in memory and hence, &lt;code&gt;a[5] = 5[a]&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、基本的には両方のステートメントがメモリ内の同じ場所を指しているため、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a[5] = 5[a]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="74bd9aec219e8a876efe5e9dbf297450688134e3" translate="yes" xml:space="preserve">
          <source>So now we have &lt;code&gt;arr[3]&lt;/code&gt; and &lt;code&gt;3[arr]&lt;/code&gt; meaning exactly the same thing, though the latter form should never appear outside the &lt;a href=&quot;http://ioccc.org/&quot;&gt;IOCCC&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;arr[3]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;3[arr]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はまったく同じ意味ですが、後者の形式は&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://ioccc.org/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;IOCCCの&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;外側に表示されるべきではありません&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8d87c687af6a603b7fae4247fa48fbea9ae67405" translate="yes" xml:space="preserve">
          <source>So the idea that array indexing is defined in terms of addition, and that addition, even of a pointer and an integer, is commutative, goes back many decades, to C's ancestor languages.</source>
          <target state="translated">配列の添字は加算で定義され、ポインタや整数の加算は可換的であるという考え方は、C言語の祖先言語であるC言語に何十年も前にさかのぼります。</target>
        </trans-unit>
        <trans-unit id="a7dcde299d04157c827d07e041baf08423be13a0" translate="yes" xml:space="preserve">
          <source>So why is it this way?</source>
          <target state="translated">では、なぜこのような形になっているのでしょうか?</target>
        </trans-unit>
        <trans-unit id="e4519a10d3120a45f508a759d4090cbf678cee1a" translate="yes" xml:space="preserve">
          <source>So,</source>
          <target state="translated">So,</target>
        </trans-unit>
        <trans-unit id="8c89c7d498821658553bd1ecb86d67fddaaa6e8d" translate="yes" xml:space="preserve">
          <source>Ted Jensen explained it as:</source>
          <target state="translated">テッド・ジェンセンはこう説明した。</target>
        </trans-unit>
        <trans-unit id="a0c02ea0bf226b00f8c97f9fbbcbfce6f19bd500" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;major difference&lt;/strong&gt; I found is...</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;主な違い&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私が見つけたのです...&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ddf31a3e26ab563612c3b60a159dbc37fda16b6f" translate="yes" xml:space="preserve">
          <source>The C standard defines the &lt;code&gt;[]&lt;/code&gt; operator as follows:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C標準では、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;[]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;演算子を次のように&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;定義して&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;います。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="49e0ab5351629c999ecc0c6e397b25834b232a2e" translate="yes" xml:space="preserve">
          <source>The C standard's description of the &lt;code&gt;+&lt;/code&gt; operator (&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf&quot;&gt;N1570&lt;/a&gt; 6.5.6) says:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C規格の&lt;/font&gt;&lt;/font&gt; &lt;code&gt;+&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;演算子&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の説明&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;N1570&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 6.5.6）は次のように述べています。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2007e88e85408e8f29febd9ef03d45f9952ac7ed" translate="yes" xml:space="preserve">
          <source>The compiler interprets &lt;code&gt;a[i]&lt;/code&gt; as &lt;code&gt;*(a+i)&lt;/code&gt; and the expression &lt;code&gt;5[a]&lt;/code&gt; evaluates to &lt;code&gt;*(5+a)&lt;/code&gt;. Since addition is commutative it turns out that both are equal. Hence the expression evaluates to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コンパイラは&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a[i]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;/font&gt; &lt;code&gt;*(a+i)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;解釈&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、式&lt;/font&gt;&lt;/font&gt; &lt;code&gt;5[a]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;/font&gt; &lt;code&gt;*(5+a)&lt;/code&gt; と&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;評価され&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;加算は可換であるため、両方が等しいことがわかります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、式は&lt;/font&gt;&lt;/font&gt; &lt;code&gt;true&lt;/code&gt; と&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;評価され&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e003dbac549e08b0dd4688d334bec18afaeeeaeb" translate="yes" xml:space="preserve">
          <source>The innovation of dispensing with the extra word of storage and having the compiler insert the base address of the array when it was named came later.  According to the C history paper this happened at about the time structures were added to C.</source>
          <target state="translated">ストレージの余分なワードを削除して、名前が付けられたときに配列のベースアドレスをコンパイラに挿入させるという技術革新は、後になってからのことです。Cの歴史の論文によると、これは構造体がCに追加された頃に起こったことです。</target>
        </trans-unit>
        <trans-unit id="e1d793f269a6c0a67206e321358c9256e4f0fa74" translate="yes" xml:space="preserve">
          <source>The main reason for this was that back in the 70's when C was designed, computers didn't have much memory (64KB was a lot), so the C compiler didn't do much syntax checking.  Hence &quot;&lt;code&gt;X[Y]&lt;/code&gt;&quot; was rather blindly translated into &quot;&lt;code&gt;*(X+Y)&lt;/code&gt;&quot;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これの主な理由は、Cが設計された70年代には、コンピューターに十分なメモリがなかった（64KBが多かった）ため、Cコンパイラは構文チェックをあまり行わなかったためです。したがって、「&lt;/font&gt;&lt;/font&gt; &lt;code&gt;X[Y]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;」はやや盲目的に「&lt;/font&gt;&lt;/font&gt; &lt;code&gt;*(X+Y)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;」に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;変換されました&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5598417c3877f380e96a22cde55fcdd9a8eba2a1" translate="yes" xml:space="preserve">
          <source>Therefore &lt;code&gt;a[5]&lt;/code&gt; will evaluate to:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a[5]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は次のように評価されます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e28410e5118fc1353afc84b39ff63a4c00217208" translate="yes" xml:space="preserve">
          <source>This also explains the &quot;&lt;code&gt;+=&lt;/code&gt;&quot; and &quot;&lt;code&gt;++&lt;/code&gt;&quot; syntaxes.  Everything in the form &quot;&lt;code&gt;A = B + C&lt;/code&gt;&quot; had the same compiled form.  But, if B was the same object as A, then an assembly level optimization was available.  But the compiler wasn't bright enough to recognize it, so the developer had to (&lt;code&gt;A += C&lt;/code&gt;).   Similarly, if &lt;code&gt;C&lt;/code&gt; was &lt;code&gt;1&lt;/code&gt;, a different assembly level optimization was available, and again the developer had to make it explicit, because the compiler didn't recognize it.   (More recently compilers do, so those syntaxes are largely unnecessary these days)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは、「&lt;/font&gt;&lt;/font&gt; &lt;code&gt;+=&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;」および「&lt;/font&gt;&lt;/font&gt; &lt;code&gt;++&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;」の構文&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;についても説明してい&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;「&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A = B + C&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;」&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;という形式のすべてが&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;同じコンパイル済み形式でした。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ただし、BがAと同じオブジェクトである場合、アセンブリレベルの最適化が利用可能でした。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;しかし、コンパイラはそれを認識するほど明るくなかったので、開発者は（&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A += C&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;しなければなりませんでした&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;同様に、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;C&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が&lt;/font&gt;&lt;/font&gt; &lt;code&gt;1&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;場合、異なるアセンブリレベルの最適化が利用可能であり、コンパイラーがそれを認識しなかったため、開発者はそれを明示的にする必要がありました。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（最近ではコンパイラーが実行するため、これらの構文は最近ほとんど不要です）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2957c7291e8dd3b7c1bafc7a958af2782509f1ac" translate="yes" xml:space="preserve">
          <source>This explanation is also the reason why negative indexes in arrays work in C.</source>
          <target state="translated">この説明は、配列の負のインデックスがC言語で動作する理由でもあります。</target>
        </trans-unit>
        <trans-unit id="8fc0a843bdfadc65145a35ad68cd5c63d07409c1" translate="yes" xml:space="preserve">
          <source>This is NOT saying that pointers and arrays
  are the same thing, they are not. We are only saying that to identify
  a given element of an array we have the choice of two syntaxes, one
  using array indexing and the other using pointer arithmetic, which
  yield identical results.</source>
          <target state="translated">これはポインタと配列が同じものだと言っているのではありません。配列の指定された要素を識別するためには、配列のインデックスを使用する構文とポインタ演算を使用する構文の2つの構文がありますが、どちらも同じ結果になるということを言っているに過ぎません。</target>
        </trans-unit>
        <trans-unit id="a225f9d9ce3692ad1562eee23a824ea01f5447d4" translate="yes" xml:space="preserve">
          <source>Those languages were much less strongly typed than modern C is. In particular, the distinction between pointers and integers was often ignored. (Early C programmers sometimes used pointers as unsigned integers, before the &lt;code&gt;unsigned&lt;/code&gt; keyword was added to the language.) So the idea of making addition non-commutative because the operands are of different types probably wouldn't have occurred to the designers of those languages. If a user wanted to add two &quot;things&quot;, whether those &quot;things&quot; are integers, pointers, or something else, it wasn't up to the language to prevent it.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これらの言語は、現代のC言語ほど強く型付けされていませんでした。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;特に、ポインタと整数の違いはしばしば無視されました。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（初期のCプログラマーは、ポインターを符号なし整数として使用したことがあり、その後、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;unsigned&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;キーワードが言語に追加されました。）したがって、オペランドが異なる型であるため、加算を非可換にするという考えは、おそらくそれらの言語の設計者には思い浮かばなかったでしょう。 。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ユーザーが2つの「もの」を追加したい場合、それらの「もの」が整数、ポインター、またはその他のものであるかどうかにかかわらず、それを防ぐのは言語の責任ではありませんでした。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f65772585dbe5c3f9be396b2762536b24bd6101e" translate="yes" xml:space="preserve">
          <source>To answer the question literally. It is not always true that &lt;code&gt;x == x&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;文字通り質問に答えること。&lt;/font&gt; &lt;code&gt;x == x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;あるとは限らない&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1f115cf17db3cd235931483179db65280105e850" translate="yes" xml:space="preserve">
          <source>We can re-initialize the pointer by an address but not the same case with an array.</source>
          <target state="translated">アドレスでポインタを再初期化することはできますが、配列では同じケースではありません。</target>
        </trans-unit>
        <trans-unit id="8e6493efc14ecc048b709d17d6a46595f95919cb" translate="yes" xml:space="preserve">
          <source>Well, this is a feature that is only possible because of the language support.</source>
          <target state="translated">まあ、これは言語対応しているからこそできる機能ですね。</target>
        </trans-unit>
        <trans-unit id="06ef8221698e1df9e0d60c9945a8ac3f43b1e272" translate="yes" xml:space="preserve">
          <source>When both operands are of the same type, or even of different numeric types that are promoted to a common type, commutativity makes perfect sense: &lt;code&gt;x + y == y + x&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;両方のオペランドが同じ型である場合、または共通の型に昇格された異なる数値型であっても、可換性は完全に理にかなっています：&lt;/font&gt;&lt;/font&gt; &lt;code&gt;x + y == y + x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="016171cdc5bdaa54ed0b2e5083fab7678a06cdf1" translate="yes" xml:space="preserve">
          <source>When you &lt;strong&gt;define an array&lt;/strong&gt; at a time one &lt;strong&gt;address is initialize&lt;/strong&gt; in that pointer</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一度に&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;定義すると、&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そのポインタで&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;1つの&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アドレスが初期化&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;されます&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cc4155f374b80bf76ee1bda0459d1bd13e1acb80" translate="yes" xml:space="preserve">
          <source>With arrays, why is it the case that a[5] == 5[a]</source>
          <target state="translated">配列の場合、なぜ a[5]==5[a]となるのでしょうか?</target>
        </trans-unit>
        <trans-unit id="8b25d23d68d162aaa08b9e9252d3485eb5bb4e54" translate="yes" xml:space="preserve">
          <source>Yes, &lt;code&gt;p[i]&lt;/code&gt; is by definition equivalent to &lt;code&gt;*(p+i)&lt;/code&gt;, which (because addition is commutative) is equivalent to &lt;code&gt;*(i+p)&lt;/code&gt;, which (again, by the definition of the &lt;code&gt;[]&lt;/code&gt; operator) is equivalent to &lt;code&gt;i[p]&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はい、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;p[i]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;/font&gt; &lt;code&gt;*(p+i)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;同等の定義です&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。これは（加算は可換であるため）&lt;/font&gt;&lt;/font&gt; &lt;code&gt;*(i+p)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と同等です&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これも（&lt;/font&gt;&lt;/font&gt; &lt;code&gt;[]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;演算子の&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;定義による&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;））同等です。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;i[p]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0db1547a0d27f180923b634a6c385bb5d0d5200d" translate="yes" xml:space="preserve">
          <source>You can only add an integer to a pointer, you can't add two pointers together. That way when adding a pointer to an integer, or an integer to a pointer, the compiler always knows which bit has a size that needs to be taken into account.</source>
          <target state="translated">ポインタに追加できるのは整数だけで、2つのポインタを一緒に追加することはできません。そうすることで、ポインタを整数に追加するとき、あるいはポインタに整数を追加するときに、コンパイラは常にどのビットが考慮すべきサイズを持っているかを知ることができます。</target>
        </trans-unit>
        <trans-unit id="ce350d74843615e170e417c9b55ec5ae40abbf7e" translate="yes" xml:space="preserve">
          <source>[] - that operator can be replaceable with pointer * .</source>
          <target state="translated">[]-その演算子は,ポインタで置き換えることができます*.</target>
        </trans-unit>
        <trans-unit id="6f2172deda32c22bb7ed326f855cd1e60b094d2c" translate="yes" xml:space="preserve">
          <source>a - containing address (people call it as base address) just like an (2) type of pointer in our list</source>
          <target state="translated">a-アドレスを含む (人々はそれをベースアドレスと呼ぶ)私たちのリストの (2)型のポインタのように</target>
        </trans-unit>
        <trans-unit id="97a88f2c750b6a9b26b40be8f3c5948f70a331d7" translate="yes" xml:space="preserve">
          <source>a[5] is nothing but *(a + 5)</source>
          <target state="translated">a[5]は*(a+5)以外の何ものでもない</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">and</target>
        </trans-unit>
        <trans-unit id="93091c2e64403052e4bd3ed3f36e43ef771c82a2" translate="yes" xml:space="preserve">
          <source>and &lt;code&gt;5[a]&lt;/code&gt; will evaluate to:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そして&lt;/font&gt;&lt;/font&gt; &lt;code&gt;5[a]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と評価されます：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a0329e14c13535bcb6359a9184aa3bb549bbac0a" translate="yes" xml:space="preserve">
          <source>and also</source>
          <target state="translated">併せて</target>
        </trans-unit>
        <trans-unit id="7b87ed0f8f42e4beea17f77738a242956f749a4c" translate="yes" xml:space="preserve">
          <source>and back to your question...</source>
          <target state="translated">質問に戻ると...</target>
        </trans-unit>
        <trans-unit id="6e14a5162bf2176970b34c6a462fbb0f77fbdaba" translate="yes" xml:space="preserve">
          <source>and the arrays are type of (2) from our list</source>
          <target state="translated">で、配列はリストから(2)の型になります。</target>
        </trans-unit>
        <trans-unit id="77b73075908163972d844091f09a9b5bc0421fef" translate="yes" xml:space="preserve">
          <source>are different ways to refer to  an element in an array ! (NOT AT ALL WEIRD)</source>
          <target state="translated">は配列の要素を参照するための異なる方法です! (全く奇妙ではありません)</target>
        </trans-unit>
        <trans-unit id="02a97d497b5ebda3f799171a3381d322a9c53bce" translate="yes" xml:space="preserve">
          <source>array name is a &quot;mnemonic&quot; or &quot;synonym&quot;</source>
          <target state="translated">配列名は「ニモニック」または「同義語」です。</target>
        </trans-unit>
        <trans-unit id="e650b4bcfab638a85de907196e6b5cfdd86dd6ce" translate="yes" xml:space="preserve">
          <source>i.e. if I access &lt;code&gt;a[-5]&lt;/code&gt; it will give me</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;つまり&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a[-5]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;にアクセス&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;する&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と、&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="785229f56486c15d2737b6075a53f6cb6bbec742" translate="yes" xml:space="preserve">
          <source>in c compiler</source>
          <target state="translated">c コンパイラで</target>
        </trans-unit>
        <trans-unit id="988337ebfe6581049f95ede5081b3071f64d533f" translate="yes" xml:space="preserve">
          <source>in which case both &lt;code&gt;i + p&lt;/code&gt; and &lt;code&gt;i[p]&lt;/code&gt; would be illegal.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;その場合、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;i + p&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;i[p]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;両方&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が違法になります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c94c0e41bc274bd0e78c44d3277f3bef91ccf351" translate="yes" xml:space="preserve">
          <source>is the same as writing</source>
          <target state="translated">を書くのと同じです。</target>
        </trans-unit>
        <trans-unit id="3160b126bd0ef17f439072b3f5f9ec151c6a6c87" translate="yes" xml:space="preserve">
          <source>of which only the first is really necessary.</source>
          <target state="translated">のうち、本当に必要なのは最初のものだけです。</target>
        </trans-unit>
        <trans-unit id="b08aa496bf69321c55248a2a8c6e8a6b6565fcc5" translate="yes" xml:space="preserve">
          <source>pointer types</source>
          <target state="translated">ポインタ型</target>
        </trans-unit>
        <trans-unit id="b024f8c2bfa6dbc6442cb571d5d5d6243c0ca744" translate="yes" xml:space="preserve">
          <source>prints</source>
          <target state="translated">prints</target>
        </trans-unit>
        <trans-unit id="6049b2ff36f9c94c3a5f5916f9eae4ace9ddc50b" translate="yes" xml:space="preserve">
          <source>really did have to do &lt;code&gt;J = !(V + 5)&lt;/code&gt; (using BCPL syntax) since it was necessary to fetch V to get the base address of the array.  Thus &lt;code&gt;V!5&lt;/code&gt; and &lt;code&gt;5!V&lt;/code&gt; were synonymous.  As an anecdotal observation, WAFL (Warwick Functional Language) was written in BCPL, and to the best of my memory tended to use the latter syntax rather than the former for accessing the nodes used as data storage.  Granted this is from somewhere between 35 and 40 years ago, so my memory is a little rusty. :)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;本当にしなければならなかったの&lt;/font&gt;&lt;/font&gt; &lt;code&gt;J = !(V + 5)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列のベースアドレスを取得するためにVをフェッチする必要があったので、（BCPLの構文を使用）。したがって、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;V!5&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;5!V&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は同義でした。事例観察として、WAFL（ワーウィック関数型言語）はBCPLで記述されており、私の記憶の限りでは、データストレージとして使用されるノードへのアクセスには、前者ではなく後者の構文を使用する傾向がありました。これは35年から40年前のどこかからのものであるため、私の記憶は少し錆びています。 :)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2599991ed8fb7accd72a93b52acec6c9e1462926" translate="yes" xml:space="preserve">
          <source>so finally...</source>
          <target state="translated">それでやっと</target>
        </trans-unit>
        <trans-unit id="45f0d72226f6c0a5c5c39929b28a3dfa425d4d83" translate="yes" xml:space="preserve">
          <source>that actually allocated 11 words of memory, not 10.  Typically V was the first, and contained the address of the immediately following word.  So unlike C, naming V went to that location and picked up the address of the zeroeth element of the array.  Therefore array indirection in BCPL, expressed as</source>
          <target state="translated">は、実際には10ではなく11ワードのメモリを割り当てていました。通常、V は最初のワードで、その直後に続くワードのアドレスが含まれていました。そのため、Cとは異なり、Vの名前を指定すると、その場所に行き、配列の0番目の要素のアドレスを取得します。したがって、BCPLにおける配列のインダイレクトは、次のように表現されます。</target>
        </trans-unit>
        <trans-unit id="1935d7b6e1cdaa0cb2a12b33ef6db0f1f938bf83" translate="yes" xml:space="preserve">
          <source>writing</source>
          <target state="translated">writing</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
