<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://stackoverflow.com/questions/12953127">
    <body>
      <group id="12953127">
        <trans-unit id="ca68ea47f177871fefa9fde2305a3667021360c8" translate="yes" xml:space="preserve">
          <source>&amp;mdash; in a return statement in a function with a class return type, when the expression is the name of a
  non-volatile automatic object (other than a function or catch-clause parameter) with the same cvunqualified
  type as the function return type, the copy/move operation can be omitted by constructing
  the automatic object directly into the function&amp;rsquo;s return value</source>
          <target state="translated">&amp;mdash; 클래스 반환 유형이있는 함수의 return 문에서 표현식이 함수 반환 유형과 동일한 cvunqualified 유형을 가진 비 휘발성 자동 객체 (함수 또는 catch-clause 매개 변수 제외)의 이름 인 경우 자동 객체를 함수의 반환 값으로 직접 구성하여 복사 / 이동 작업을 생략 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2580328d3e8975b884f68dc5aa02a3b664fd6920" translate="yes" xml:space="preserve">
          <source>&amp;mdash; in a throw-expression, when the operand is the name of a non-volatile automatic object (other than a
  function or catch-clause parameter) whose scope does not extend beyond the end of the innermost
  enclosing try-block (if there is one), the copy/move operation from the operand to the exception
  object (15.1) can be omitted by constructing the automatic object directly into the exception object</source>
          <target state="translated">&amp;mdash; throw-expression에서 피연산자가 범위가 가장 안쪽에있는 try-block의 끝을 넘어 확장되지 않는 비 휘발성 자동 객체 (함수 또는 catch-clause 매개 변수 제외)의 이름 인 경우 (있는 경우) 1) 피연산자에서 예외 객체 (15.1) 로의 복사 / 이동 작업은 자동 객체를 예외 객체로 직접 구성하여 생략 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dd1636c409fbb9f9e461288cc295518fade43eef" translate="yes" xml:space="preserve">
          <source>&amp;mdash; when a temporary class object that has not been bound to a reference (12.2) would be copied/moved
  to a class object with the same cv-unqualified type, the copy/move operation can be omitted by
  constructing the temporary object directly into the target of the omitted copy/move</source>
          <target state="translated">&amp;mdash; 참조 (12.2)에 바인딩되지 않은 임시 클래스 객체를 동일한 cv-unqualified 유형의 클래스 객체로 복사 / 이동할 때 임시 객체를 객체에 직접 구성하여 복사 / 이동 작업을 생략 할 수 있습니다. 생략 된 복사 / 이동의 대상</target>
        </trans-unit>
        <trans-unit id="e849b3d1afae4fb6624516a457f13daf1c032a72" translate="yes" xml:space="preserve">
          <source>&amp;mdash; when the exception-declaration of an exception handler (Clause 15) declares an object of the same type
  (except for cv-qualification) as the exception object (15.1), the copy/move operation can be omitted
  by treating the exception-declaration as an alias for the exception object if the meaning of the program
  will be unchanged except for the execution of constructors and destructors for the object declared by
  the exception-declaration.</source>
          <target state="translated">&amp;mdash; 예외 처리기 (Clause 15)의 예외 선언이 예외 개체 (15.1)와 동일한 유형 (cv-qualification 제외)의 개체를 선언하면 예외 선언을 처리하여 복사 / 이동 작업을 생략 할 수 있습니다. 예외 선언에 의해 선언 된 객체에 대한 생성자와 소멸자의 실행을 제외하고 프로그램의 의미가 변경되지 않으면 예외 객체의 별명으로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="b027c79f21550537a67f8b7dc587755c6ff1fdb1" translate="yes" xml:space="preserve">
          <source>(Named) Return value optimization is a common form of copy elision. It refers to the situation where an object returned by value from a method has its copy elided. The example set forth in the standard illustrates &lt;strong&gt;named return value optimization&lt;/strong&gt;, since the object is named.</source>
          <target state="translated">(명명 된) 반환 값 최적화는 일반적인 형태의 복사 제거입니다. 메소드에서 값으로 리턴 된 오브젝트에 사본이 생략 된 상황을 나타냅니다. 표준에 제시된 예제는 오브젝트의 이름이 지정되므로 &lt;strong&gt;이름 지정된 리턴 값 최적화를&lt;/strong&gt; 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="78ea4d5fcb108b0de1d70b55bd35f08315d2bdea" translate="yes" xml:space="preserve">
          <source>12.8 Copying and moving class objects [class.copy]</source>
          <target state="translated">12.8 클래스 객체 복사 및 이동 [class.copy]</target>
        </trans-unit>
        <trans-unit id="5d6e19359ffd13f57603ac68f19486a1a89fb586" translate="yes" xml:space="preserve">
          <source>31) When certain criteria are met, an implementation is allowed to omit the copy/move construction of a class
  object, even if the copy/move constructor and/or destructor for the object have side effects. In such cases,
  the implementation treats the source and target of the omitted copy/move operation as simply two different
  ways of referring to the same object, and the destruction of that object occurs at the later of the times
  when the two objects would have been destroyed without the optimization.&lt;sup&gt;123&lt;/sup&gt; This elision of copy/move
  operations, called &lt;em&gt;copy elision&lt;/em&gt;, is permitted in the following circumstances (which may be combined to
  eliminate multiple copies):</source>
          <target state="translated">31) 특정 기준이 충족되면 객체의 복사 / 이동 생성자 및 / 또는 소멸자가 부작용이 있더라도 구현시 클래스 객체의 복사 / 이동 구성을 생략 할 수 있습니다. 이러한 경우, 구현은 생략 된 복사 / 이동 조작의 소스 및 대상을 동일한 오브젝트를 참조하는 두 가지 다른 방법으로 취급하며, 해당 오브젝트의 파괴는 두 오브젝트가 있었을 때 후기에 발생합니다. 최적화없이 파괴되었습니다. &lt;sup&gt;123&lt;/sup&gt; 복사 제거라고하는 복사 / 이동 작업 제거는 다음 상황에서 허용됩니다 (여러 복사본을 제거하기 위해 결합 할 수 있음).</target>
        </trans-unit>
        <trans-unit id="598b2d01071069706c333b3d4e3c3eedb82ba47c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;C++17&lt;/strong&gt;: As of C++17, Copy Elision is guaranteed when an object is returned directly:</source>
          <target state="translated">&lt;strong&gt;C ++ 17&lt;/strong&gt; : C ++ 17부터 객체가 직접 반환되면 Copy Elision이 보장됩니다.</target>
        </trans-unit>
        <trans-unit id="f4bca282132a0b145977e4b2cd548d906a8751ff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Copy elision&lt;/strong&gt; is defined in the standard in:</source>
          <target state="translated">&lt;strong&gt;복사 제거&lt;/strong&gt; 는 다음 표준에 정의되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="7c50e57bbedc5565d5fbb4c8f7f7100b92d15d94" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NRVO (Named Return Value Optimization)&lt;/strong&gt;: If a function returns a class type by value and the return statement's expression is the name of a non-volatile object with automatic storage duration (which isn't a function parameter), then the copy/move that would be performed by a non-optimising compiler can be omitted. If so, the returned value is constructed directly in the storage to which the function's return value would otherwise be moved or copied.</source>
          <target state="translated">&lt;strong&gt;NRVO (Named Return Value Optimization)&lt;/strong&gt; : 함수가 값으로 클래스 유형을 리턴하고 리턴 명령문의 표현식이 자동 저장 기간 (함수 매개 변수 아님)을 갖는 비 휘발성 오브젝트의 이름 인 경우 복사 / 이동 비 최적화 컴파일러에 의해 수행되는 것은 생략 될 수 있습니다. 그렇다면 반환 된 값은 함수의 반환 값이 이동되거나 복사 될 스토리지에 직접 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="851d7ec5341d9296a442091d5d783b05e7aeaf3d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;RVO (Return Value Optimization)&lt;/strong&gt;: If the function returns a nameless temporary object that would be moved or copied into the destination by a naive compiler, the copy or move can be omitted as per 1.</source>
          <target state="translated">&lt;strong&gt;RVO (Return Value Optimization)&lt;/strong&gt; : 함수가 순진한 컴파일러에 의해 목적지로 이동 또는 복사 될 이름이없는 임시 객체를 반환하는 경우 복사 또는 이동은 1에 따라 생략 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9c75d156cc061b114edf155ebf9cdb542670f521" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;123) Because only one object is destroyed instead of two, and one copy/move constructor is not executed, there is still one
  object destroyed for each one constructed.&lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;123) 두 개가 아닌 하나의 개체 만 파괴되고 하나의 복사 / 이동 생성자가 실행되지 않기 때문에 생성 된 개체마다 여전히 하나의 개체가 파괴됩니다.&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="e25fbbcdd3b8ee7b3e148845f16053ec6f56695b" translate="yes" xml:space="preserve">
          <source>A copy was made.</source>
          <target state="translated">사본이 만들어졌습니다.</target>
        </trans-unit>
        <trans-unit id="cefb3b77bcecf8e1017d9a41d819e99c7ac397a5" translate="yes" xml:space="preserve">
          <source>Common forms of copy elision</source>
          <target state="translated">일반적인 형태의 복사 제거</target>
        </trans-unit>
        <trans-unit id="e6d81920b7ee9638d49e5b2752375858a651fb85" translate="yes" xml:space="preserve">
          <source>Common limitations of copy elision are:</source>
          <target state="translated">복사 제거의 일반적인 제한 사항은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e39262defe80a83fac1b793497417432c8b1a879" translate="yes" xml:space="preserve">
          <source>Conclusion</source>
          <target state="translated">Conclusion</target>
        </trans-unit>
        <trans-unit id="29c1c21e9d67ccc520bc82a42f74f63a23067689" translate="yes" xml:space="preserve">
          <source>Copy elision is a compiler optimization technique that eliminates unnecessary copying/moving of objects.</source>
          <target state="translated">복사 제거는 불필요한 객체 복사 / 이동을 제거하는 컴파일러 최적화 기술입니다.</target>
        </trans-unit>
        <trans-unit id="fbfdd75bfdf8635bcfcd0cf966af8bb64f55364c" translate="yes" xml:space="preserve">
          <source>Copy elision is an optimization implemented by most compilers to prevent extra (potentially expensive) copies in certain situations. It makes returning by value or pass-by-value feasible in practice (restrictions apply).</source>
          <target state="translated">복사 제거는 특정 상황에서 추가 (잠재적으로 비싼) 복사를 방지하기 위해 대부분의 컴파일러가 구현하는 최적화입니다. 실제로는 가치 또는 가치 별 반품이 가능합니다 (제한 사항 적용).</target>
        </trans-unit>
        <trans-unit id="490dd5d7ca8c44cfeed4625143a3770a149e5198" translate="yes" xml:space="preserve">
          <source>Depending on the compiler &amp;amp; settings, the following outputs &lt;strong&gt;are all valid&lt;/strong&gt;:</source>
          <target state="translated">컴파일러 및 설정에 따라 다음 출력 &lt;strong&gt;이 모두 유효합니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="276cd53255b9b3ea88605cf74af8abdaf8beb8fc" translate="yes" xml:space="preserve">
          <source>Even when copy elision takes place and the copy-/move-constructor is not called, it must be present and accessible (as if no optimization happened at all), otherwise the program is ill-formed.</source>
          <target state="translated">복사 제거가 발생하고 복사 / 이동 생성자가 호출되지 않더라도 존재하고 액세스 할 수 있어야합니다 (최적화가 전혀 발생하지 않은 것처럼). 그렇지 않으면 프로그램이 잘못 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="98744a4749281c58f10aa4597039ee7e319247d7" translate="yes" xml:space="preserve">
          <source>For a less technical view &amp;amp; introduction - &lt;a href=&quot;https://stackoverflow.com/a/12953129/673730&quot;&gt;skip to this answer&lt;/a&gt;.</source>
          <target state="translated">기술적 인 견해와 소개가 필요하지 않으면 &lt;a href=&quot;https://stackoverflow.com/a/12953129/673730&quot;&gt;이 답변으로 건너 뛰십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="614719e36ba3c5b8c038c4b55c8a697a9cc2ffc1" translate="yes" xml:space="preserve">
          <source>For a technical overview - &lt;a href=&quot;https://stackoverflow.com/a/12953145/673730&quot;&gt;skip to this answer&lt;/a&gt;.</source>
          <target state="translated">기술 개요- &lt;a href=&quot;https://stackoverflow.com/a/12953145/673730&quot;&gt;이 답변으로 건너 뛰십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="f9375d9c1837abc76f0780795325da2541dc54ae" translate="yes" xml:space="preserve">
          <source>For a technical overview, see &lt;a href=&quot;https://stackoverflow.com/a/12953145/673730&quot;&gt;&lt;strong&gt;the standard reference&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">기술 개요 &lt;a href=&quot;https://stackoverflow.com/a/12953145/673730&quot;&gt;&lt;strong&gt;는 표준 참조를 참조하십시오&lt;/strong&gt;&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d874f6ce6007afba91b0703ce05e417c3456141a" translate="yes" xml:space="preserve">
          <source>For common cases where copy elision occurs - &lt;a href=&quot;https://stackoverflow.com/a/12953150/673730&quot;&gt;skip to this answer&lt;/a&gt;.</source>
          <target state="translated">복사 제거가 발생하는 일반적인 경우- &lt;a href=&quot;https://stackoverflow.com/a/12953150/673730&quot;&gt;이 답변으로 건너 뛰십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="01805fbf346c39ae2173772f959ccee1d0624130" translate="yes" xml:space="preserve">
          <source>GCC provides the &lt;code&gt;-fno-elide-constructors&lt;/code&gt; option to disable copy elision. 
If you want to avoid possible copy elision, use &lt;code&gt;-fno-elide-constructors&lt;/code&gt;.</source>
          <target state="translated">GCC는 &lt;code&gt;-fno-elide-constructors&lt;/code&gt; 옵션을 제공하여 복사 제거를 비활성화합니다. 가능한 복사 제거를 피하려면 &lt;code&gt;-fno-elide-constructors&lt;/code&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="2ef7bde608ce5404e97d5f042f95f89f1c232871" translate="yes" xml:space="preserve">
          <source>Hello World!</source>
          <target state="translated">안녕하세요 세계!</target>
        </trans-unit>
        <trans-unit id="d58287d09ddbef331cd242c7504df285cc86e34b" translate="yes" xml:space="preserve">
          <source>Here the criteria for elision can be combined to eliminate two calls to the copy constructor of class &lt;code&gt;Thing&lt;/code&gt;:
  the copying of the local automatic object &lt;code&gt;t&lt;/code&gt; into the temporary object for the return value of function &lt;code&gt;f()&lt;/code&gt;
  and the copying of that temporary object into object &lt;code&gt;t2&lt;/code&gt;. Effectively, the construction of the local object &lt;code&gt;t&lt;/code&gt;
  can be viewed as directly initializing the global object &lt;code&gt;t2&lt;/code&gt;, and that object&amp;rsquo;s destruction will occur at program
  exit. Adding a move constructor to Thing has the same effect, but it is the move construction from the
  temporary object to &lt;code&gt;t2&lt;/code&gt; that is elided.</source>
          <target state="translated">여기에서 제거 기준을 결합하여 &lt;code&gt;Thing&lt;/code&gt; 클래스의 복사 생성자에 대한 두 번의 호출을 제거 할 수 있습니다. 로컬 자동 객체 &lt;code&gt;t&lt;/code&gt; 를 함수 &lt;code&gt;f()&lt;/code&gt; 의 반환 값에 대한 임시 객체로 복사 및 해당 임시 객체를 객체로 복사 &lt;code&gt;t2&lt;/code&gt; . 효과적으로, 로컬 객체 &lt;code&gt;t&lt;/code&gt; 의 구성은 글로벌 객체 &lt;code&gt;t2&lt;/code&gt; 를 직접 초기화하는 것으로 볼 수 있으며, 그 객체의 파괴는 프로그램 종료시에 발생한다. Thing에 이동 생성자를 추가해도 동일한 효과가 있지만 임시 객체에서 제거 된 &lt;code&gt;t2&lt;/code&gt; 로의 이동 구성입니다.</target>
        </trans-unit>
        <trans-unit id="96fee38c7b19c6c4ca78f7e13941ae99616cfdd7" translate="yes" xml:space="preserve">
          <source>If a call to a copy or move constructor is elided, that constructor must still exist and must be accessible. This ensures that copy elision does not allow copying objects which are not normally copyable, e.g. because they have a private or deleted copy/move constructor.</source>
          <target state="translated">복사 또는 이동 생성자에 대한 호출이 생략 된 경우 해당 생성자가 여전히 존재하고 액세스 가능해야합니다. 이렇게하면 복사 제거가 일반적으로 복사 할 수없는 개체 (예 : 개인 또는 삭제 된 복사 / 이동 생성자가 있기 때문에)를 복사 할 수 없도록합니다.</target>
        </trans-unit>
        <trans-unit id="f3b669b04bbf8aef4317a0aa72fffe10d1a51478" translate="yes" xml:space="preserve">
          <source>If you were referenced to this question, you're probably looking for &lt;a href=&quot;https://stackoverflow.com/a/12953129/673730&quot;&gt;&lt;strong&gt;the introduction&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">이 질문을 언급했다면 아마도 &lt;a href=&quot;https://stackoverflow.com/a/12953129/673730&quot;&gt;&lt;strong&gt;소개를&lt;/strong&gt;&lt;/a&gt; 찾고있을 것입니다.</target>
        </trans-unit>
        <trans-unit id="c7dd4fddae03de8061cd2158291b3a9545b84ed1" translate="yes" xml:space="preserve">
          <source>In the following circumstances, a compiler is allowed to omit copy/move operations and hence not to call the associated constructor:</source>
          <target state="translated">다음과 같은 상황에서 컴파일러는 복사 / 이동 작업을 생략 할 수 있으므로 연결된 생성자를 호출하지 않아도됩니다.</target>
        </trans-unit>
        <trans-unit id="5b137b5e8755ef09af3707aed311db814b9d5a29" translate="yes" xml:space="preserve">
          <source>In what situations can they occur? What are limitations?</source>
          <target state="translated">어떤 상황에서 발생할 수 있습니까? 한계는 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="64980ce4228b437497970908317a4bbc4bc7acf1" translate="yes" xml:space="preserve">
          <source>It's the only form of optimization that elides (ha!) the as-if rule - &lt;strong&gt;copy elision can be applied even if copying/moving the object has side-effects&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;객체 복사 / 이동에 부작용이 있더라도&lt;/strong&gt; as-if 규칙 &lt;strong&gt;복사 제거를 적용 할 수&lt;/strong&gt; 있는 유일한 최적화 형식입니다 (ha!).</target>
        </trans-unit>
        <trans-unit id="f4d31d579250934aa8c5539513e042f00264d598" translate="yes" xml:space="preserve">
          <source>Most commercial-grade compilers support copy elision &amp;amp; (N)RVO (depending on optimization settings).</source>
          <target state="translated">대부분의 상업용 컴파일러는 복사 제거 및 (N) RVO (최적화 설정에 따라 다름)를 지원합니다.</target>
        </trans-unit>
        <trans-unit id="cb0e303ac5062305ae6fafc00c8a6d006a6dfafa" translate="yes" xml:space="preserve">
          <source>Now almost all compilers provide copy elision when optimisation is enabled (and if no other option is set to disable it).</source>
          <target state="translated">이제 거의 모든 컴파일러는 최적화가 활성화 된 경우 (및 다른 옵션이 비활성화되지 않은 경우) 복사 제거를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="aa9224d012c8e884eeaf72e0ac516f2a59976c6f" translate="yes" xml:space="preserve">
          <source>Other common places where copy elision takes place is when a &lt;strong&gt;temporary is passed by value&lt;/strong&gt;:</source>
          <target state="translated">복사 제거가 발생하는 다른 일반적인 장소는 &lt;strong&gt;임시 값이 값으로 전달되는 경우입니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="40b50d9e417452191b14b99cb338d3afa42d8c52" translate="yes" xml:space="preserve">
          <source>Regular &lt;strong&gt;return value optimization&lt;/strong&gt; occurs when a temporary is returned:</source>
          <target state="translated">임시가 반환되면 일반 &lt;strong&gt;반환 값 최적화&lt;/strong&gt; 가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="1eac2141ee15e30898fed570da08416209ff6f76" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://stackoverflow.com/a/12953150/673730&quot;&gt;&lt;strong&gt;common cases&lt;/strong&gt; here&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/a/12953150/673730&quot;&gt;&lt;strong&gt;일반적인 사례를&lt;/strong&gt;&lt;/a&gt; 참조 하십시오 .</target>
        </trans-unit>
        <trans-unit id="737c41f932ba8061b40df0ffaf27ac375db25aa6" translate="yes" xml:space="preserve">
          <source>Standard reference</source>
          <target state="translated">표준 참조</target>
        </trans-unit>
        <trans-unit id="fec0deb1889eb088a0f2ef252bac62cf1206ad2b" translate="yes" xml:space="preserve">
          <source>The example given is:</source>
          <target state="translated">주어진 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="a62650426116c07ea3f512ffc0f8723710652184" translate="yes" xml:space="preserve">
          <source>The following example taken from &lt;a href=&quot;http://en.wikipedia.org/wiki/Return_value_optimization&quot;&gt;Wikipedia&lt;/a&gt;:</source>
          <target state="translated">다음 예제는 &lt;a href=&quot;http://en.wikipedia.org/wiki/Return_value_optimization&quot;&gt;Wikipedia&lt;/a&gt; 에서 가져온 것입니다.</target>
        </trans-unit>
        <trans-unit id="b6635c82ae545142984bf1c3b629dfd616139d38" translate="yes" xml:space="preserve">
          <source>This also means fewer objects can be created, so you also can't rely on a specific number of destructors being called. You shouldn't have critical logic inside copy/move-constructors or destructors, as you can't rely on them being called.</source>
          <target state="translated">이것은 또한 더 적은 수의 객체를 생성 할 수 있다는 것을 의미하므로 호출되는 특정 소멸자 수에 의존 할 수도 없습니다. 복사 / 이동 생성자 또는 소멸자 내부에는 호출 할 수 없으므로 중요한 논리가 없어야합니다.</target>
        </trans-unit>
        <trans-unit id="ae6471e2b082f4881df1cf9fda939527ef9aa938" translate="yes" xml:space="preserve">
          <source>What are copy elision and return value optimization</source>
          <target state="translated">복사 제거 및 반환 값 최적화 란 무엇입니까</target>
        </trans-unit>
        <trans-unit id="62b72263405de42c2be0edb11944cafbc74c54d0" translate="yes" xml:space="preserve">
          <source>What is copy elision? What is (named) return value optimization? What do they imply?</source>
          <target state="translated">복제 제거 란 무엇입니까? 반환 값 최적화 란 무엇입니까? 그들은 무엇을 의미합니까?</target>
        </trans-unit>
        <trans-unit id="9113fc5fe923ee2d5e1c85e748812dd7b32a2a1e" translate="yes" xml:space="preserve">
          <source>With each copy elision, one construction and one matching destruction of the copy are omitted, thus saving CPU time, and one object is not created, thus saving space on the stack frame.</source>
          <target state="translated">각각의 카피 제거시, 카피의 하나의 구성 및 하나의 매칭 파괴가 생략되어 CPU 시간을 절약하고 하나의 객체가 생성되지 않으므로 스택 프레임상의 공간이 절약된다.</target>
        </trans-unit>
        <trans-unit id="70fa382897ec58f114b2ab7202943e62bd559271" translate="yes" xml:space="preserve">
          <source>You should permit such copy elision only in places where it won&amp;rsquo;t affect the observable behavior of your software. Copy elision is the only form of optimization permitted to have (i.e. elide) observable side-effects. Example:</source>
          <target state="translated">소프트웨어의 관찰 가능한 행동에 영향을 미치지 않는 장소에서만 그러한 복사 제거를 허용해야합니다. 복사 제거는 관찰 가능한 부작용을 갖도록 허용 된 유일한 최적화 형태입니다. 예:</target>
        </trans-unit>
        <trans-unit id="2a22995d4db73eba6824e4e29ac6f8af629c130e" translate="yes" xml:space="preserve">
          <source>and explained:</source>
          <target state="translated">설명했다 :</target>
        </trans-unit>
        <trans-unit id="df211ccdd94a63e0bcb9e6ae427a249484a49d60" translate="yes" xml:space="preserve">
          <source>as</source>
          <target state="translated">as</target>
        </trans-unit>
        <trans-unit id="1a2ca8d32e40defcaf29531d526f78857abacee5" translate="yes" xml:space="preserve">
          <source>conditional initialization</source>
          <target state="translated">조건부 초기화</target>
        </trans-unit>
        <trans-unit id="d791fcc41bc7bdcd58925821d6f9b90ca2e993e1" translate="yes" xml:space="preserve">
          <source>multiple return points</source>
          <target state="translated">여러 리턴 포인트</target>
        </trans-unit>
        <trans-unit id="8dabe2e94d353ad87f489995f56ab5b96aa4ba5a" translate="yes" xml:space="preserve">
          <source>or when an &lt;strong&gt;exception is thrown and caught by value&lt;/strong&gt;:</source>
          <target state="translated">또는 &lt;strong&gt;예외가 발생하여 값으로 잡힐&lt;/strong&gt; 때 :</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
