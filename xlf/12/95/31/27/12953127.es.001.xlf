<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/12953127">
    <body>
      <group id="12953127">
        <trans-unit id="ca68ea47f177871fefa9fde2305a3667021360c8" translate="yes" xml:space="preserve">
          <source>&amp;mdash; in a return statement in a function with a class return type, when the expression is the name of a
  non-volatile automatic object (other than a function or catch-clause parameter) with the same cvunqualified
  type as the function return type, the copy/move operation can be omitted by constructing
  the automatic object directly into the function&amp;rsquo;s return value</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;- en una declaraci&amp;oacute;n de retorno en una funci&amp;oacute;n con un tipo de retorno de clase, cuando la expresi&amp;oacute;n es el nombre de un objeto autom&amp;aacute;tico no vol&amp;aacute;til (que no sea una funci&amp;oacute;n o par&amp;aacute;metro de cl&amp;aacute;usula catch) con el mismo tipo cvunqualified que el tipo de retorno de funci&amp;oacute;n, el la operaci&amp;oacute;n de copiar / mover se puede omitir construyendo el objeto autom&amp;aacute;tico directamente en el valor de retorno de la funci&amp;oacute;n&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2580328d3e8975b884f68dc5aa02a3b664fd6920" translate="yes" xml:space="preserve">
          <source>&amp;mdash; in a throw-expression, when the operand is the name of a non-volatile automatic object (other than a
  function or catch-clause parameter) whose scope does not extend beyond the end of the innermost
  enclosing try-block (if there is one), the copy/move operation from the operand to the exception
  object (15.1) can be omitted by constructing the automatic object directly into the exception object</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;- en una expresi&amp;oacute;n de lanzamiento, cuando el operando es el nombre de un objeto autom&amp;aacute;tico no vol&amp;aacute;til (que no sea una funci&amp;oacute;n o par&amp;aacute;metro de cl&amp;aacute;usula catch) cuyo alcance no se extiende m&amp;aacute;s all&amp;aacute; del final del bloque de prueba que lo encierra m&amp;aacute;s interno (si existe uno), la operaci&amp;oacute;n de copiar / mover del operando al objeto de excepci&amp;oacute;n (15.1) se puede omitir construyendo el objeto autom&amp;aacute;tico directamente en el objeto de excepci&amp;oacute;n&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dd1636c409fbb9f9e461288cc295518fade43eef" translate="yes" xml:space="preserve">
          <source>&amp;mdash; when a temporary class object that has not been bound to a reference (12.2) would be copied/moved
  to a class object with the same cv-unqualified type, the copy/move operation can be omitted by
  constructing the temporary object directly into the target of the omitted copy/move</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;- cuando un objeto de clase temporal que no se ha vinculado a una referencia (12.2) se copiar&amp;iacute;a / mover&amp;iacute;a a un objeto de clase con el mismo tipo no calificado por cv, la operaci&amp;oacute;n de copiar / mover se puede omitir construyendo el objeto temporal directamente en el objetivo de la copia / movimiento omitido&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e849b3d1afae4fb6624516a457f13daf1c032a72" translate="yes" xml:space="preserve">
          <source>&amp;mdash; when the exception-declaration of an exception handler (Clause 15) declares an object of the same type
  (except for cv-qualification) as the exception object (15.1), the copy/move operation can be omitted
  by treating the exception-declaration as an alias for the exception object if the meaning of the program
  will be unchanged except for the execution of constructors and destructors for the object declared by
  the exception-declaration.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;- cuando la declaraci&amp;oacute;n de excepci&amp;oacute;n de un manejador de excepci&amp;oacute;n (Cl&amp;aacute;usula 15) declara un objeto del mismo tipo (excepto para la calificaci&amp;oacute;n cv) como el objeto de excepci&amp;oacute;n (15.1), la operaci&amp;oacute;n de copiar / mover puede omitirse tratando la declaraci&amp;oacute;n de excepci&amp;oacute;n como un alias para el objeto de excepci&amp;oacute;n si el significado del programa no cambiar&amp;aacute;, excepto para la ejecuci&amp;oacute;n de constructores y destructores para el objeto declarado por la declaraci&amp;oacute;n de excepci&amp;oacute;n.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b027c79f21550537a67f8b7dc587755c6ff1fdb1" translate="yes" xml:space="preserve">
          <source>(Named) Return value optimization is a common form of copy elision. It refers to the situation where an object returned by value from a method has its copy elided. The example set forth in the standard illustrates &lt;strong&gt;named return value optimization&lt;/strong&gt;, since the object is named.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(Nombre) La optimizaci&amp;oacute;n del valor de retorno es una forma com&amp;uacute;n de elisi&amp;oacute;n de copia. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Se refiere a la situaci&amp;oacute;n en la que un objeto devuelto por el valor de un m&amp;eacute;todo tiene su copia eliminada. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El ejemplo expuesto en el est&amp;aacute;ndar ilustra la &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;optimizaci&amp;oacute;n del valor de retorno con nombre&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , ya que el objeto tiene nombre.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="78ea4d5fcb108b0de1d70b55bd35f08315d2bdea" translate="yes" xml:space="preserve">
          <source>12.8 Copying and moving class objects [class.copy]</source>
          <target state="translated">12.8 Copiar y mover objetos de clase [class.copy]</target>
        </trans-unit>
        <trans-unit id="5d6e19359ffd13f57603ac68f19486a1a89fb586" translate="yes" xml:space="preserve">
          <source>31) When certain criteria are met, an implementation is allowed to omit the copy/move construction of a class
  object, even if the copy/move constructor and/or destructor for the object have side effects. In such cases,
  the implementation treats the source and target of the omitted copy/move operation as simply two different
  ways of referring to the same object, and the destruction of that object occurs at the later of the times
  when the two objects would have been destroyed without the optimization.&lt;sup&gt;123&lt;/sup&gt; This elision of copy/move
  operations, called &lt;em&gt;copy elision&lt;/em&gt;, is permitted in the following circumstances (which may be combined to
  eliminate multiple copies):</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;31) Cuando se cumplen ciertos criterios, se permite que una implementaci&amp;oacute;n omita la construcci&amp;oacute;n de copiar / mover de un objeto de clase, incluso si el constructor y / o destructor de copia / movimiento del objeto tiene efectos secundarios. En tales casos, la implementaci&amp;oacute;n trata el origen y el destino de la operaci&amp;oacute;n omitida de copiar / mover como simplemente dos formas diferentes de referirse al mismo objeto, y la destrucci&amp;oacute;n de ese objeto ocurre en el &amp;uacute;ltimo momento en que los dos objetos habr&amp;iacute;an sido destruido sin la optimizaci&amp;oacute;n. &lt;/font&gt;&lt;/font&gt;&lt;sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;123&lt;/font&gt;&lt;/font&gt;&lt;/sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Esta elisi&amp;oacute;n de operaciones de copiar / mover, llamada &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;copia de elisi&amp;oacute;n&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , est&amp;aacute; permitida en las siguientes circunstancias (que pueden combinarse para eliminar m&amp;uacute;ltiples copias):&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="598b2d01071069706c333b3d4e3c3eedb82ba47c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;C++17&lt;/strong&gt;: As of C++17, Copy Elision is guaranteed when an object is returned directly:</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C ++ 17&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : a partir de C ++ 17, Copy Elision est&amp;aacute; garantizado cuando un objeto se devuelve directamente:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f4bca282132a0b145977e4b2cd548d906a8751ff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Copy elision&lt;/strong&gt; is defined in the standard in:</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Copiar elisi&amp;oacute;n&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; se define en el est&amp;aacute;ndar en:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7c50e57bbedc5565d5fbb4c8f7f7100b92d15d94" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NRVO (Named Return Value Optimization)&lt;/strong&gt;: If a function returns a class type by value and the return statement's expression is the name of a non-volatile object with automatic storage duration (which isn't a function parameter), then the copy/move that would be performed by a non-optimising compiler can be omitted. If so, the returned value is constructed directly in the storage to which the function's return value would otherwise be moved or copied.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;NRVO (Optimizaci&amp;oacute;n de valor de retorno con nombre)&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : si una funci&amp;oacute;n devuelve un tipo de clase por valor y la expresi&amp;oacute;n de la declaraci&amp;oacute;n de retorno es el nombre de un objeto no vol&amp;aacute;til con duraci&amp;oacute;n de almacenamiento autom&amp;aacute;tico (que no es un par&amp;aacute;metro de funci&amp;oacute;n), entonces la copia / mover eso podr&amp;iacute;a ser realizado por un compilador no optimizador puede omitirse. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si es as&amp;iacute;, el valor devuelto se construye directamente en el almacenamiento al que, de lo contrario, el valor devuelto de la funci&amp;oacute;n se mover&amp;iacute;a o copiar&amp;iacute;a.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="851d7ec5341d9296a442091d5d783b05e7aeaf3d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;RVO (Return Value Optimization)&lt;/strong&gt;: If the function returns a nameless temporary object that would be moved or copied into the destination by a naive compiler, the copy or move can be omitted as per 1.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;RVO (Optimizaci&amp;oacute;n del valor de retorno)&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : si la funci&amp;oacute;n devuelve un objeto temporal sin nombre que ser&amp;iacute;a movido o copiado en el destino por un compilador ingenuo, la copia o el movimiento se pueden omitir seg&amp;uacute;n 1.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9c75d156cc061b114edf155ebf9cdb542670f521" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;123) Because only one object is destroyed instead of two, and one copy/move constructor is not executed, there is still one
  object destroyed for each one constructed.&lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;123) Debido a que solo se destruye un objeto en lugar de dos, y no se ejecuta un constructor de copia / movimiento, todav&amp;iacute;a hay un objeto destruido por cada uno construido.&lt;/font&gt;&lt;/font&gt;&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="e25fbbcdd3b8ee7b3e148845f16053ec6f56695b" translate="yes" xml:space="preserve">
          <source>A copy was made.</source>
          <target state="translated">Se hizo una copia.</target>
        </trans-unit>
        <trans-unit id="cefb3b77bcecf8e1017d9a41d819e99c7ac397a5" translate="yes" xml:space="preserve">
          <source>Common forms of copy elision</source>
          <target state="translated">Formas comunes de la elisión de la copia</target>
        </trans-unit>
        <trans-unit id="e6d81920b7ee9638d49e5b2752375858a651fb85" translate="yes" xml:space="preserve">
          <source>Common limitations of copy elision are:</source>
          <target state="translated">Las limitaciones comunes de la elisión de la copia son:</target>
        </trans-unit>
        <trans-unit id="e39262defe80a83fac1b793497417432c8b1a879" translate="yes" xml:space="preserve">
          <source>Conclusion</source>
          <target state="translated">Conclusion</target>
        </trans-unit>
        <trans-unit id="29c1c21e9d67ccc520bc82a42f74f63a23067689" translate="yes" xml:space="preserve">
          <source>Copy elision is a compiler optimization technique that eliminates unnecessary copying/moving of objects.</source>
          <target state="translated">La elisión de copia es una técnica de optimización del compilador que elimina el movimiento de copia innecesario de los objetos.</target>
        </trans-unit>
        <trans-unit id="fbfdd75bfdf8635bcfcd0cf966af8bb64f55364c" translate="yes" xml:space="preserve">
          <source>Copy elision is an optimization implemented by most compilers to prevent extra (potentially expensive) copies in certain situations. It makes returning by value or pass-by-value feasible in practice (restrictions apply).</source>
          <target state="translated">La elisión de copias es una optimización implementada por la mayoría de los compiladores para evitar copias extra (potencialmente costosas)en ciertas situaciones.Hace que el retorno por valor o valor de paso sea factible en la práctica (se aplican restricciones).</target>
        </trans-unit>
        <trans-unit id="490dd5d7ca8c44cfeed4625143a3770a149e5198" translate="yes" xml:space="preserve">
          <source>Depending on the compiler &amp;amp; settings, the following outputs &lt;strong&gt;are all valid&lt;/strong&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Dependiendo del compilador y la configuraci&amp;oacute;n, las siguientes salidas &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;son todas v&amp;aacute;lidas&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="276cd53255b9b3ea88605cf74af8abdaf8beb8fc" translate="yes" xml:space="preserve">
          <source>Even when copy elision takes place and the copy-/move-constructor is not called, it must be present and accessible (as if no optimization happened at all), otherwise the program is ill-formed.</source>
          <target state="translated">Incluso cuando se produce la elisión de la copia y no se llama al constructor de la copia,debe estar presente y accesible (como si no hubiera habido ninguna optimización),de lo contrario el programa está mal formado.</target>
        </trans-unit>
        <trans-unit id="98744a4749281c58f10aa4597039ee7e319247d7" translate="yes" xml:space="preserve">
          <source>For a less technical view &amp;amp; introduction - &lt;a href=&quot;https://stackoverflow.com/a/12953129/673730&quot;&gt;skip to this answer&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para una visi&amp;oacute;n e introducci&amp;oacute;n menos t&amp;eacute;cnica, &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/12953129/673730&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;salte a esta respuesta&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="614719e36ba3c5b8c038c4b55c8a697a9cc2ffc1" translate="yes" xml:space="preserve">
          <source>For a technical overview - &lt;a href=&quot;https://stackoverflow.com/a/12953145/673730&quot;&gt;skip to this answer&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para obtener una descripci&amp;oacute;n t&amp;eacute;cnica general, &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/12953145/673730&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;salte a esta respuesta&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f9375d9c1837abc76f0780795325da2541dc54ae" translate="yes" xml:space="preserve">
          <source>For a technical overview, see &lt;a href=&quot;https://stackoverflow.com/a/12953145/673730&quot;&gt;&lt;strong&gt;the standard reference&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para obtener una descripci&amp;oacute;n t&amp;eacute;cnica general, consulte &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/12953145/673730&quot;&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;la referencia est&amp;aacute;ndar&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d874f6ce6007afba91b0703ce05e417c3456141a" translate="yes" xml:space="preserve">
          <source>For common cases where copy elision occurs - &lt;a href=&quot;https://stackoverflow.com/a/12953150/673730&quot;&gt;skip to this answer&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para casos comunes donde se produce una elisi&amp;oacute;n de copia, &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/12953150/673730&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;salte a esta respuesta&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="01805fbf346c39ae2173772f959ccee1d0624130" translate="yes" xml:space="preserve">
          <source>GCC provides the &lt;code&gt;-fno-elide-constructors&lt;/code&gt; option to disable copy elision. 
If you want to avoid possible copy elision, use &lt;code&gt;-fno-elide-constructors&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;GCC proporciona la &lt;/font&gt;&lt;/font&gt; &lt;code&gt;-fno-elide-constructors&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para deshabilitar la elisi&amp;oacute;n de copia. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si desea evitar una posible elisi&amp;oacute;n de copia, use &lt;/font&gt;&lt;/font&gt; &lt;code&gt;-fno-elide-constructors&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2ef7bde608ce5404e97d5f042f95f89f1c232871" translate="yes" xml:space="preserve">
          <source>Hello World!</source>
          <target state="translated">¡Hola Mundo!</target>
        </trans-unit>
        <trans-unit id="d58287d09ddbef331cd242c7504df285cc86e34b" translate="yes" xml:space="preserve">
          <source>Here the criteria for elision can be combined to eliminate two calls to the copy constructor of class &lt;code&gt;Thing&lt;/code&gt;:
  the copying of the local automatic object &lt;code&gt;t&lt;/code&gt; into the temporary object for the return value of function &lt;code&gt;f()&lt;/code&gt;
  and the copying of that temporary object into object &lt;code&gt;t2&lt;/code&gt;. Effectively, the construction of the local object &lt;code&gt;t&lt;/code&gt;
  can be viewed as directly initializing the global object &lt;code&gt;t2&lt;/code&gt;, and that object&amp;rsquo;s destruction will occur at program
  exit. Adding a move constructor to Thing has the same effect, but it is the move construction from the
  temporary object to &lt;code&gt;t2&lt;/code&gt; that is elided.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Aqu&amp;iacute;, los criterios para la elisi&amp;oacute;n se pueden combinar para eliminar dos llamadas al constructor de copias de la clase &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Thing&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : la copia del objeto autom&amp;aacute;tico local &lt;/font&gt;&lt;/font&gt; &lt;code&gt;t&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en el objeto temporal para el valor de retorno de la funci&amp;oacute;n &lt;/font&gt;&lt;/font&gt; &lt;code&gt;f()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y la copia de ese objeto temporal en el objeto &lt;/font&gt;&lt;/font&gt; &lt;code&gt;t2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . Efectivamente, la construcci&amp;oacute;n del objeto local &lt;/font&gt;&lt;/font&gt; &lt;code&gt;t&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; puede verse como una inicializaci&amp;oacute;n directa del objeto global &lt;/font&gt;&lt;/font&gt; &lt;code&gt;t2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , y la destrucci&amp;oacute;n de ese objeto ocurrir&amp;aacute; a la salida del programa. Agregar un constructor de movimiento a Thing tiene el mismo efecto, pero es la construcci&amp;oacute;n de movimiento desde el objeto temporal a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;t2&lt;/code&gt; la&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que se elide.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="96fee38c7b19c6c4ca78f7e13941ae99616cfdd7" translate="yes" xml:space="preserve">
          <source>If a call to a copy or move constructor is elided, that constructor must still exist and must be accessible. This ensures that copy elision does not allow copying objects which are not normally copyable, e.g. because they have a private or deleted copy/move constructor.</source>
          <target state="translated">Si se elude la llamada a un constructor de copias o movimientos,ese constructor debe seguir existiendo y debe ser accesible.Esto asegura que la elisión de copia no permite copiar objetos que normalmente no son copiables,por ejemplo,porque tienen un constructor de movimiento de copia privado o borrado.</target>
        </trans-unit>
        <trans-unit id="f3b669b04bbf8aef4317a0aa72fffe10d1a51478" translate="yes" xml:space="preserve">
          <source>If you were referenced to this question, you're probably looking for &lt;a href=&quot;https://stackoverflow.com/a/12953129/673730&quot;&gt;&lt;strong&gt;the introduction&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si se hizo referencia a esta pregunta, probablemente est&amp;eacute; buscando &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/12953129/673730&quot;&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;la introducci&amp;oacute;n&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c7dd4fddae03de8061cd2158291b3a9545b84ed1" translate="yes" xml:space="preserve">
          <source>In the following circumstances, a compiler is allowed to omit copy/move operations and hence not to call the associated constructor:</source>
          <target state="translated">En las siguientes circunstancias,se permite a un compilador omitir las operaciones de copiado y,por lo tanto,no llamar al constructor asociado:</target>
        </trans-unit>
        <trans-unit id="5b137b5e8755ef09af3707aed311db814b9d5a29" translate="yes" xml:space="preserve">
          <source>In what situations can they occur? What are limitations?</source>
          <target state="translated">¿En qué situaciones pueden ocurrir? ¿Qué son las limitaciones?</target>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="64980ce4228b437497970908317a4bbc4bc7acf1" translate="yes" xml:space="preserve">
          <source>It's the only form of optimization that elides (ha!) the as-if rule - &lt;strong&gt;copy elision can be applied even if copying/moving the object has side-effects&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Es la &amp;uacute;nica forma de optimizaci&amp;oacute;n que elude (&amp;iexcl;ja!) La regla de si es as&amp;iacute;: la &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;elisi&amp;oacute;n de copia se puede aplicar incluso si copiar / mover el objeto tiene efectos secundarios&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f4d31d579250934aa8c5539513e042f00264d598" translate="yes" xml:space="preserve">
          <source>Most commercial-grade compilers support copy elision &amp;amp; (N)RVO (depending on optimization settings).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La mayor&amp;iacute;a de los compiladores de grado comercial admiten copia de corte y (N) RVO (dependiendo de la configuraci&amp;oacute;n de optimizaci&amp;oacute;n).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cb0e303ac5062305ae6fafc00c8a6d006a6dfafa" translate="yes" xml:space="preserve">
          <source>Now almost all compilers provide copy elision when optimisation is enabled (and if no other option is set to disable it).</source>
          <target state="translated">Ahora casi todos los compiladores proporcionan elision de copia cuando la optimización está activada (y si no hay otra opción para desactivarla).</target>
        </trans-unit>
        <trans-unit id="aa9224d012c8e884eeaf72e0ac516f2a59976c6f" translate="yes" xml:space="preserve">
          <source>Other common places where copy elision takes place is when a &lt;strong&gt;temporary is passed by value&lt;/strong&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Otros lugares comunes donde tiene lugar la elisi&amp;oacute;n de copia es cuando &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;se pasa un valor temporal por valor&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="40b50d9e417452191b14b99cb338d3afa42d8c52" translate="yes" xml:space="preserve">
          <source>Regular &lt;strong&gt;return value optimization&lt;/strong&gt; occurs when a temporary is returned:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;optimizaci&amp;oacute;n del valor de retorno&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; regular &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ocurre cuando se devuelve un temporal:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1eac2141ee15e30898fed570da08416209ff6f76" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://stackoverflow.com/a/12953150/673730&quot;&gt;&lt;strong&gt;common cases&lt;/strong&gt; here&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ver &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/12953150/673730&quot;&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;casos comunes&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; aqu&amp;iacute;&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="737c41f932ba8061b40df0ffaf27ac375db25aa6" translate="yes" xml:space="preserve">
          <source>Standard reference</source>
          <target state="translated">Referencia estándar</target>
        </trans-unit>
        <trans-unit id="fec0deb1889eb088a0f2ef252bac62cf1206ad2b" translate="yes" xml:space="preserve">
          <source>The example given is:</source>
          <target state="translated">El ejemplo dado es:</target>
        </trans-unit>
        <trans-unit id="a62650426116c07ea3f512ffc0f8723710652184" translate="yes" xml:space="preserve">
          <source>The following example taken from &lt;a href=&quot;http://en.wikipedia.org/wiki/Return_value_optimization&quot;&gt;Wikipedia&lt;/a&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El siguiente ejemplo tomado de &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Return_value_optimization&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Wikipedia&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b6635c82ae545142984bf1c3b629dfd616139d38" translate="yes" xml:space="preserve">
          <source>This also means fewer objects can be created, so you also can't rely on a specific number of destructors being called. You shouldn't have critical logic inside copy/move-constructors or destructors, as you can't rely on them being called.</source>
          <target state="translated">Esto también significa que se pueden crear menos objetos,por lo que tampoco se puede confiar en que se llame a un número específico de destructores.No deberías tener una lógica crítica dentro de los constructores o destructores de Copymove,ya que no puedes confiar en que sean llamados.</target>
        </trans-unit>
        <trans-unit id="ae6471e2b082f4881df1cf9fda939527ef9aa938" translate="yes" xml:space="preserve">
          <source>What are copy elision and return value optimization</source>
          <target state="translated">¿Qué son la elisión de copia y la optimización del valor de retorno</target>
        </trans-unit>
        <trans-unit id="62b72263405de42c2be0edb11944cafbc74c54d0" translate="yes" xml:space="preserve">
          <source>What is copy elision? What is (named) return value optimization? What do they imply?</source>
          <target state="translated">¿Qué es la elisión de copia? ¿Qué es la optimización del valor de retorno (denominado)? ¿Qué implican?</target>
        </trans-unit>
        <trans-unit id="9113fc5fe923ee2d5e1c85e748812dd7b32a2a1e" translate="yes" xml:space="preserve">
          <source>With each copy elision, one construction and one matching destruction of the copy are omitted, thus saving CPU time, and one object is not created, thus saving space on the stack frame.</source>
          <target state="translated">Con cada elisión de la copia,se omite una construcción y una destrucción coincidente de la copia,ahorrando así tiempo de la CPU,y no se crea un objeto,ahorrando así espacio en el marco de la pila.</target>
        </trans-unit>
        <trans-unit id="70fa382897ec58f114b2ab7202943e62bd559271" translate="yes" xml:space="preserve">
          <source>You should permit such copy elision only in places where it won&amp;rsquo;t affect the observable behavior of your software. Copy elision is the only form of optimization permitted to have (i.e. elide) observable side-effects. Example:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Debe permitir dicha copia de elisi&amp;oacute;n solo en lugares donde no afecte el comportamiento observable de su software. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Copiar elisi&amp;oacute;n es la &amp;uacute;nica forma de optimizaci&amp;oacute;n que permite tener (es decir, evitar) efectos secundarios observables. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ejemplo:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2a22995d4db73eba6824e4e29ac6f8af629c130e" translate="yes" xml:space="preserve">
          <source>and explained:</source>
          <target state="translated">y explicado:</target>
        </trans-unit>
        <trans-unit id="df211ccdd94a63e0bcb9e6ae427a249484a49d60" translate="yes" xml:space="preserve">
          <source>as</source>
          <target state="translated">as</target>
        </trans-unit>
        <trans-unit id="1a2ca8d32e40defcaf29531d526f78857abacee5" translate="yes" xml:space="preserve">
          <source>conditional initialization</source>
          <target state="translated">inicialización condicional</target>
        </trans-unit>
        <trans-unit id="d791fcc41bc7bdcd58925821d6f9b90ca2e993e1" translate="yes" xml:space="preserve">
          <source>multiple return points</source>
          <target state="translated">múltiples puntos de retorno</target>
        </trans-unit>
        <trans-unit id="8dabe2e94d353ad87f489995f56ab5b96aa4ba5a" translate="yes" xml:space="preserve">
          <source>or when an &lt;strong&gt;exception is thrown and caught by value&lt;/strong&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;o cuando una &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;excepci&amp;oacute;n es lanzada y capturada por valor&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
