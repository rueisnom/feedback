<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/12953127">
    <body>
      <group id="12953127">
        <trans-unit id="ca68ea47f177871fefa9fde2305a3667021360c8" translate="yes" xml:space="preserve">
          <source>&amp;mdash; in a return statement in a function with a class return type, when the expression is the name of a
  non-volatile automatic object (other than a function or catch-clause parameter) with the same cvunqualified
  type as the function return type, the copy/move operation can be omitted by constructing
  the automatic object directly into the function&amp;rsquo;s return value</source>
          <target state="translated">&amp;mdash;クラスの戻り値の型を持つ関数のreturnステートメントで、式が関数の戻り値の型と同じcvunqualified型を持つ（関数またはcatch-clauseパラメーター以外の）非揮発性自動オブジェクトの名前である場合、自動オブジェクトを関数の戻り値に直接作成することで、コピー/移動操作を省略できます。</target>
        </trans-unit>
        <trans-unit id="2580328d3e8975b884f68dc5aa02a3b664fd6920" translate="yes" xml:space="preserve">
          <source>&amp;mdash; in a throw-expression, when the operand is the name of a non-volatile automatic object (other than a
  function or catch-clause parameter) whose scope does not extend beyond the end of the innermost
  enclosing try-block (if there is one), the copy/move operation from the operand to the exception
  object (15.1) can be omitted by constructing the automatic object directly into the exception object</source>
          <target state="translated">&amp;mdash; throw式で、オペランドが、最も内側の囲んでいるtryブロックの終わりを超えて拡張されない（関数またはcatch-clauseパラメーター以外の）不揮発性自動オブジェクトの名前である場合（存在する場合） 1）、自動オブジェクトを直接例外オブジェクトに作成することにより、オペランドから例外オブジェクト（15.1）へのコピー/移動操作を省略できます。</target>
        </trans-unit>
        <trans-unit id="dd1636c409fbb9f9e461288cc295518fade43eef" translate="yes" xml:space="preserve">
          <source>&amp;mdash; when a temporary class object that has not been bound to a reference (12.2) would be copied/moved
  to a class object with the same cv-unqualified type, the copy/move operation can be omitted by
  constructing the temporary object directly into the target of the omitted copy/move</source>
          <target state="translated">&amp;mdash;参照（12.2）にバインドされていない一時クラスオブジェクトが同じcv非修飾タイプのクラスオブジェクトにコピー/移動される場合、一時オブジェクトを直接作成して、コピー/移動操作を省略できます。省略されたコピー/移動のターゲット</target>
        </trans-unit>
        <trans-unit id="e849b3d1afae4fb6624516a457f13daf1c032a72" translate="yes" xml:space="preserve">
          <source>&amp;mdash; when the exception-declaration of an exception handler (Clause 15) declares an object of the same type
  (except for cv-qualification) as the exception object (15.1), the copy/move operation can be omitted
  by treating the exception-declaration as an alias for the exception object if the meaning of the program
  will be unchanged except for the execution of constructors and destructors for the object declared by
  the exception-declaration.</source>
          <target state="translated">&amp;mdash;例外ハンドラの例外宣言（条項15）が例外オブジェクト（15.1）と同じタイプのオブジェクト（cv-qualificationを除く）を宣言する場合、コピー/移動操作は例外宣言を処理することで省略できます。 exception-declarationで宣言されたオブジェクトのコンストラクタとデストラクタの実行を除いて、プログラムの意味が変更されない場合は、例外オブジェクトのエイリアスとして。</target>
        </trans-unit>
        <trans-unit id="b027c79f21550537a67f8b7dc587755c6ff1fdb1" translate="yes" xml:space="preserve">
          <source>(Named) Return value optimization is a common form of copy elision. It refers to the situation where an object returned by value from a method has its copy elided. The example set forth in the standard illustrates &lt;strong&gt;named return value optimization&lt;/strong&gt;, since the object is named.</source>
          <target state="translated">（名前付き）戻り値の最適化は、コピー省略の一般的な形式です。 これは、メソッドから値によって返されたオブジェクトのコピーが省略されている状況を指します。 標準で説明&lt;strong&gt;さ&lt;/strong&gt;れている例は、オブジェクトに名前が付けられているため、 &lt;strong&gt;名前付き戻り値の最適化を&lt;/strong&gt;示しています。</target>
        </trans-unit>
        <trans-unit id="78ea4d5fcb108b0de1d70b55bd35f08315d2bdea" translate="yes" xml:space="preserve">
          <source>12.8 Copying and moving class objects [class.copy]</source>
          <target state="translated">12.8 クラスオブジェクトのコピーと移動 [class.copy]</target>
        </trans-unit>
        <trans-unit id="5d6e19359ffd13f57603ac68f19486a1a89fb586" translate="yes" xml:space="preserve">
          <source>31) When certain criteria are met, an implementation is allowed to omit the copy/move construction of a class
  object, even if the copy/move constructor and/or destructor for the object have side effects. In such cases,
  the implementation treats the source and target of the omitted copy/move operation as simply two different
  ways of referring to the same object, and the destruction of that object occurs at the later of the times
  when the two objects would have been destroyed without the optimization.&lt;sup&gt;123&lt;/sup&gt; This elision of copy/move
  operations, called &lt;em&gt;copy elision&lt;/em&gt;, is permitted in the following circumstances (which may be combined to
  eliminate multiple copies):</source>
          <target state="translated">31）特定の基準が満たされると、オブジェクトのコピー/移動コンストラクターおよび/またはデストラクタに副作用がある場合でも、実装はクラスオブジェクトのコピー/移動構成を省略できます。 このような場合、実装は、省略されたコピー/移動操作のソースとターゲットを、同じオブジェクトを参照する2つの異なる方法として扱い、そのオブジェクトの破棄は、2つのオブジェクトが後であったときに遅くなります。最適化なしで破棄されました。 &lt;sup&gt;123&lt;/sup&gt;このコピー/移動操作の&lt;em&gt;省略は&lt;/em&gt; 、 &lt;em&gt;コピー省略&lt;/em&gt;と呼ばれ、次の状況で許可されます（複数のコピーを削除するために組み合わせることができます）：</target>
        </trans-unit>
        <trans-unit id="598b2d01071069706c333b3d4e3c3eedb82ba47c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;C++17&lt;/strong&gt;: As of C++17, Copy Elision is guaranteed when an object is returned directly:</source>
          <target state="translated">&lt;strong&gt;C ++ 17&lt;/strong&gt; ：C ++ 17以降、オブジェクトが直接返される場合、コピーエリシオンが保証されます。</target>
        </trans-unit>
        <trans-unit id="f4bca282132a0b145977e4b2cd548d906a8751ff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Copy elision&lt;/strong&gt; is defined in the standard in:</source>
          <target state="translated">&lt;strong&gt;コピー省略&lt;/strong&gt;は標準で次のように定義されています。</target>
        </trans-unit>
        <trans-unit id="7c50e57bbedc5565d5fbb4c8f7f7100b92d15d94" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NRVO (Named Return Value Optimization)&lt;/strong&gt;: If a function returns a class type by value and the return statement's expression is the name of a non-volatile object with automatic storage duration (which isn't a function parameter), then the copy/move that would be performed by a non-optimising compiler can be omitted. If so, the returned value is constructed directly in the storage to which the function's return value would otherwise be moved or copied.</source>
          <target state="translated">&lt;strong&gt;NRVO（名前付き戻り値の最適化）&lt;/strong&gt; ：関数が値によってクラスタイプを返し、returnステートメントの式が自動ストレージ期間（関数パラメーターではない）を持つ不揮発性オブジェクトの名前である場合、コピー/移動最適化されていないコンパイラによって実行されることは省略できます。 その場合、戻り値は、関数の戻り値が移動またはコピーされるストレージに直接作成されます。</target>
        </trans-unit>
        <trans-unit id="851d7ec5341d9296a442091d5d783b05e7aeaf3d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;RVO (Return Value Optimization)&lt;/strong&gt;: If the function returns a nameless temporary object that would be moved or copied into the destination by a naive compiler, the copy or move can be omitted as per 1.</source>
          <target state="translated">&lt;strong&gt;RVO（戻り値の最適化）&lt;/strong&gt; ：関数が単純なコンパイラーによって宛先に移動またはコピーされる名前のない一時オブジェクトを返す場合、1のようにコピーまたは移動を省略できます。</target>
        </trans-unit>
        <trans-unit id="9c75d156cc061b114edf155ebf9cdb542670f521" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;123) Because only one object is destroyed instead of two, and one copy/move constructor is not executed, there is still one
  object destroyed for each one constructed.&lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;123）2つではなく1つのオブジェクトのみが破棄され、1つのコピー/移動コンストラクターが実行されないため、構築されたオブジェクトごとに1つのオブジェクトが破棄されます。&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="e25fbbcdd3b8ee7b3e148845f16053ec6f56695b" translate="yes" xml:space="preserve">
          <source>A copy was made.</source>
          <target state="translated">コピーができました。</target>
        </trans-unit>
        <trans-unit id="cefb3b77bcecf8e1017d9a41d819e99c7ac397a5" translate="yes" xml:space="preserve">
          <source>Common forms of copy elision</source>
          <target state="translated">コピーエリシオンの一般的な形態</target>
        </trans-unit>
        <trans-unit id="e6d81920b7ee9638d49e5b2752375858a651fb85" translate="yes" xml:space="preserve">
          <source>Common limitations of copy elision are:</source>
          <target state="translated">コピーエリシオンの一般的な制限は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="e39262defe80a83fac1b793497417432c8b1a879" translate="yes" xml:space="preserve">
          <source>Conclusion</source>
          <target state="translated">Conclusion</target>
        </trans-unit>
        <trans-unit id="29c1c21e9d67ccc520bc82a42f74f63a23067689" translate="yes" xml:space="preserve">
          <source>Copy elision is a compiler optimization technique that eliminates unnecessary copying/moving of objects.</source>
          <target state="translated">コピーエリシオンとは、オブジェクトの不要なコピームーブを排除するコンパイラの最適化手法です。</target>
        </trans-unit>
        <trans-unit id="fbfdd75bfdf8635bcfcd0cf966af8bb64f55364c" translate="yes" xml:space="preserve">
          <source>Copy elision is an optimization implemented by most compilers to prevent extra (potentially expensive) copies in certain situations. It makes returning by value or pass-by-value feasible in practice (restrictions apply).</source>
          <target state="translated">コピーエリシオンは、特定の状況で余分な(高価な)コピーを防ぐために、ほとんどのコンパイラで実装されている最適化です。これにより、実際には値で返すか、値を渡して返すことが可能になります(制限が適用されます)。</target>
        </trans-unit>
        <trans-unit id="490dd5d7ca8c44cfeed4625143a3770a149e5198" translate="yes" xml:space="preserve">
          <source>Depending on the compiler &amp;amp; settings, the following outputs &lt;strong&gt;are all valid&lt;/strong&gt;:</source>
          <target state="translated">コンパイラと設定に応じて、次の出力&lt;strong&gt;はすべて有効です&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="276cd53255b9b3ea88605cf74af8abdaf8beb8fc" translate="yes" xml:space="preserve">
          <source>Even when copy elision takes place and the copy-/move-constructor is not called, it must be present and accessible (as if no optimization happened at all), otherwise the program is ill-formed.</source>
          <target state="translated">コピーエリシオンが行われていてコピー移動コンストラクタが呼ばれていない場合でも,(最適化が全く行われていないかのように)存在し,アクセス可能でなければなりません.</target>
        </trans-unit>
        <trans-unit id="98744a4749281c58f10aa4597039ee7e319247d7" translate="yes" xml:space="preserve">
          <source>For a less technical view &amp;amp; introduction - &lt;a href=&quot;https://stackoverflow.com/a/12953129/673730&quot;&gt;skip to this answer&lt;/a&gt;.</source>
          <target state="translated">あまり技術的ではない見解と&lt;a href=&quot;https://stackoverflow.com/a/12953129/673730&quot;&gt;概要については、この回答にスキップしてください&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="614719e36ba3c5b8c038c4b55c8a697a9cc2ffc1" translate="yes" xml:space="preserve">
          <source>For a technical overview - &lt;a href=&quot;https://stackoverflow.com/a/12953145/673730&quot;&gt;skip to this answer&lt;/a&gt;.</source>
          <target state="translated">技術概要については、 &lt;a href=&quot;https://stackoverflow.com/a/12953145/673730&quot;&gt;この回答にスキップしてください&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="f9375d9c1837abc76f0780795325da2541dc54ae" translate="yes" xml:space="preserve">
          <source>For a technical overview, see &lt;a href=&quot;https://stackoverflow.com/a/12953145/673730&quot;&gt;&lt;strong&gt;the standard reference&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">技術概要については&lt;a href=&quot;https://stackoverflow.com/a/12953145/673730&quot;&gt;&lt;strong&gt;、標準リファレンスを参照してください&lt;/strong&gt;&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="d874f6ce6007afba91b0703ce05e417c3456141a" translate="yes" xml:space="preserve">
          <source>For common cases where copy elision occurs - &lt;a href=&quot;https://stackoverflow.com/a/12953150/673730&quot;&gt;skip to this answer&lt;/a&gt;.</source>
          <target state="translated">コピーエリクションが発生する一般的なケースについては&lt;a href=&quot;https://stackoverflow.com/a/12953150/673730&quot;&gt;、この回答にスキップしてください&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="01805fbf346c39ae2173772f959ccee1d0624130" translate="yes" xml:space="preserve">
          <source>GCC provides the &lt;code&gt;-fno-elide-constructors&lt;/code&gt; option to disable copy elision. 
If you want to avoid possible copy elision, use &lt;code&gt;-fno-elide-constructors&lt;/code&gt;.</source>
          <target state="translated">GCCには、コピーの省略を無効にする &lt;code&gt;-fno-elide-constructors&lt;/code&gt; オプションが用意されています。 コピーの省略を回避したい場合は、 &lt;code&gt;-fno-elide-constructors&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="2ef7bde608ce5404e97d5f042f95f89f1c232871" translate="yes" xml:space="preserve">
          <source>Hello World!</source>
          <target state="translated">ハローワールド</target>
        </trans-unit>
        <trans-unit id="d58287d09ddbef331cd242c7504df285cc86e34b" translate="yes" xml:space="preserve">
          <source>Here the criteria for elision can be combined to eliminate two calls to the copy constructor of class &lt;code&gt;Thing&lt;/code&gt;:
  the copying of the local automatic object &lt;code&gt;t&lt;/code&gt; into the temporary object for the return value of function &lt;code&gt;f()&lt;/code&gt;
  and the copying of that temporary object into object &lt;code&gt;t2&lt;/code&gt;. Effectively, the construction of the local object &lt;code&gt;t&lt;/code&gt;
  can be viewed as directly initializing the global object &lt;code&gt;t2&lt;/code&gt;, and that object&amp;rsquo;s destruction will occur at program
  exit. Adding a move constructor to Thing has the same effect, but it is the move construction from the
  temporary object to &lt;code&gt;t2&lt;/code&gt; that is elided.</source>
          <target state="translated">ここで、省略の基準を組み合わせて、クラス &lt;code&gt;Thing&lt;/code&gt; のコピーコンストラクターへの2つの呼び出しを削除できます。ローカル自動オブジェクト &lt;code&gt;t&lt;/code&gt; を関数 &lt;code&gt;f()&lt;/code&gt; の戻り値の一時オブジェクトにコピーし、その一時オブジェクトをオブジェクトにコピーします。 &lt;code&gt;t2&lt;/code&gt; 。 事実上、ローカルオブジェクト &lt;code&gt;t&lt;/code&gt; の構築は、グローバルオブジェクト &lt;code&gt;t2&lt;/code&gt; を直接初期化すると見なすことができ、そのオブジェクトの破棄はプログラムの終了時に発生します。 Thingにmoveコンストラクターを追加しても同じ効果がありますが、一時オブジェクトから &lt;code&gt;t2&lt;/code&gt; へのmove構築が省略されています。</target>
        </trans-unit>
        <trans-unit id="96fee38c7b19c6c4ca78f7e13941ae99616cfdd7" translate="yes" xml:space="preserve">
          <source>If a call to a copy or move constructor is elided, that constructor must still exist and must be accessible. This ensures that copy elision does not allow copying objects which are not normally copyable, e.g. because they have a private or deleted copy/move constructor.</source>
          <target state="translated">コピーや移動のコンストラクタの呼び出しが省略された場合、そのコンストラクタはまだ存在していなければならず、アクセス可能でなければなりません。これにより、コピーエリシオンでは、通常はコピーできないオブジェクトをコピーすることができなくなります。</target>
        </trans-unit>
        <trans-unit id="f3b669b04bbf8aef4317a0aa72fffe10d1a51478" translate="yes" xml:space="preserve">
          <source>If you were referenced to this question, you're probably looking for &lt;a href=&quot;https://stackoverflow.com/a/12953129/673730&quot;&gt;&lt;strong&gt;the introduction&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">この質問を参照された場合は、おそらく&lt;a href=&quot;https://stackoverflow.com/a/12953129/673730&quot;&gt;&lt;strong&gt;導入部を&lt;/strong&gt;&lt;/a&gt;探しているでしょう。</target>
        </trans-unit>
        <trans-unit id="c7dd4fddae03de8061cd2158291b3a9545b84ed1" translate="yes" xml:space="preserve">
          <source>In the following circumstances, a compiler is allowed to omit copy/move operations and hence not to call the associated constructor:</source>
          <target state="translated">以下の状況では、コンパイラはコピー移動操作を省略することができ、関連するコンストラクタを呼び出さないことができます。</target>
        </trans-unit>
        <trans-unit id="5b137b5e8755ef09af3707aed311db814b9d5a29" translate="yes" xml:space="preserve">
          <source>In what situations can they occur? What are limitations?</source>
          <target state="translated">どのような状況で発生するのか?制限とは何ですか?</target>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="64980ce4228b437497970908317a4bbc4bc7acf1" translate="yes" xml:space="preserve">
          <source>It's the only form of optimization that elides (ha!) the as-if rule - &lt;strong&gt;copy elision can be applied even if copying/moving the object has side-effects&lt;/strong&gt;.</source>
          <target state="translated">as-ifルールを回避する（ha！）唯一の最適化形式です。 &lt;strong&gt;オブジェクトのコピー/移動に副作用があっても、コピーの省略は適用できます&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="f4d31d579250934aa8c5539513e042f00264d598" translate="yes" xml:space="preserve">
          <source>Most commercial-grade compilers support copy elision &amp;amp; (N)RVO (depending on optimization settings).</source>
          <target state="translated">ほとんどの商用グレードのコンパイラは、コピーの省略と（N）RVOをサポートします（最適化設定によって異なります）。</target>
        </trans-unit>
        <trans-unit id="cb0e303ac5062305ae6fafc00c8a6d006a6dfafa" translate="yes" xml:space="preserve">
          <source>Now almost all compilers provide copy elision when optimisation is enabled (and if no other option is set to disable it).</source>
          <target state="translated">現在では、ほとんどのコンパイラが最適化を有効にするとコピーエリシオンを提供するようになりました(他のオプションが設定されていない場合は無効にします)。</target>
        </trans-unit>
        <trans-unit id="aa9224d012c8e884eeaf72e0ac516f2a59976c6f" translate="yes" xml:space="preserve">
          <source>Other common places where copy elision takes place is when a &lt;strong&gt;temporary is passed by value&lt;/strong&gt;:</source>
          <target state="translated">コピーの省略が行われる他の一般的な場所は、 &lt;strong&gt;一時が値で渡される場合です&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="40b50d9e417452191b14b99cb338d3afa42d8c52" translate="yes" xml:space="preserve">
          <source>Regular &lt;strong&gt;return value optimization&lt;/strong&gt; occurs when a temporary is returned:</source>
          <target state="translated">一時が返されると、通常の&lt;strong&gt;戻り値の最適化&lt;/strong&gt;が行われます。</target>
        </trans-unit>
        <trans-unit id="1eac2141ee15e30898fed570da08416209ff6f76" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://stackoverflow.com/a/12953150/673730&quot;&gt;&lt;strong&gt;common cases&lt;/strong&gt; here&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/a/12953150/673730&quot;&gt;&lt;strong&gt;一般的なケースについては、&lt;/strong&gt;こちらを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="737c41f932ba8061b40df0ffaf27ac375db25aa6" translate="yes" xml:space="preserve">
          <source>Standard reference</source>
          <target state="translated">標準参照</target>
        </trans-unit>
        <trans-unit id="fec0deb1889eb088a0f2ef252bac62cf1206ad2b" translate="yes" xml:space="preserve">
          <source>The example given is:</source>
          <target state="translated">与えられた例は</target>
        </trans-unit>
        <trans-unit id="a62650426116c07ea3f512ffc0f8723710652184" translate="yes" xml:space="preserve">
          <source>The following example taken from &lt;a href=&quot;http://en.wikipedia.org/wiki/Return_value_optimization&quot;&gt;Wikipedia&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/Return_value_optimization&quot;&gt;Wikipedia&lt;/a&gt;からの次の例：</target>
        </trans-unit>
        <trans-unit id="b6635c82ae545142984bf1c3b629dfd616139d38" translate="yes" xml:space="preserve">
          <source>This also means fewer objects can be created, so you also can't rely on a specific number of destructors being called. You shouldn't have critical logic inside copy/move-constructors or destructors, as you can't rely on them being called.</source>
          <target state="translated">これはまた、作成できるオブジェクトの数が少ないことを意味するので、特定の数のデストラクタが呼び出されることに頼ることもできません。copymove-constructors や destructors が呼び出されることに頼ることができないので、クリティカルなロジックを copymove-constructors や destructors の内部に持つべきではありません。</target>
        </trans-unit>
        <trans-unit id="ae6471e2b082f4881df1cf9fda939527ef9aa938" translate="yes" xml:space="preserve">
          <source>What are copy elision and return value optimization</source>
          <target state="translated">コピーエリシオンと戻り値最適化とは</target>
        </trans-unit>
        <trans-unit id="62b72263405de42c2be0edb11944cafbc74c54d0" translate="yes" xml:space="preserve">
          <source>What is copy elision? What is (named) return value optimization? What do they imply?</source>
          <target state="translated">コピーエリシオンとは?(名前付き)戻り値最適化とは?何を意味するのか?</target>
        </trans-unit>
        <trans-unit id="9113fc5fe923ee2d5e1c85e748812dd7b32a2a1e" translate="yes" xml:space="preserve">
          <source>With each copy elision, one construction and one matching destruction of the copy are omitted, thus saving CPU time, and one object is not created, thus saving space on the stack frame.</source>
          <target state="translated">各コピーエリシオンでは、コピーの1つの構築と1つのマッチング破壊が省略されるため、CPU時間が節約され、1つのオブジェクトが作成されないため、スタックフレームのスペースが節約されます。</target>
        </trans-unit>
        <trans-unit id="70fa382897ec58f114b2ab7202943e62bd559271" translate="yes" xml:space="preserve">
          <source>You should permit such copy elision only in places where it won&amp;rsquo;t affect the observable behavior of your software. Copy elision is the only form of optimization permitted to have (i.e. elide) observable side-effects. Example:</source>
          <target state="translated">このようなコピーの省略は、ソフトウェアの監視可能な動作に影響を与えない場所でのみ許可する必要があります。 コピー省略は、観察可能な副作用を許可する（つまり、排除する）最適化の唯一の形式です。 例：</target>
        </trans-unit>
        <trans-unit id="2a22995d4db73eba6824e4e29ac6f8af629c130e" translate="yes" xml:space="preserve">
          <source>and explained:</source>
          <target state="translated">と説明しました。</target>
        </trans-unit>
        <trans-unit id="df211ccdd94a63e0bcb9e6ae427a249484a49d60" translate="yes" xml:space="preserve">
          <source>as</source>
          <target state="translated">as</target>
        </trans-unit>
        <trans-unit id="1a2ca8d32e40defcaf29531d526f78857abacee5" translate="yes" xml:space="preserve">
          <source>conditional initialization</source>
          <target state="translated">条件付き初期化</target>
        </trans-unit>
        <trans-unit id="d791fcc41bc7bdcd58925821d6f9b90ca2e993e1" translate="yes" xml:space="preserve">
          <source>multiple return points</source>
          <target state="translated">多重帰還点</target>
        </trans-unit>
        <trans-unit id="8dabe2e94d353ad87f489995f56ab5b96aa4ba5a" translate="yes" xml:space="preserve">
          <source>or when an &lt;strong&gt;exception is thrown and caught by value&lt;/strong&gt;:</source>
          <target state="translated">または&lt;strong&gt;例外がスローされ、値によってキャッチされた場合&lt;/strong&gt; ：</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
