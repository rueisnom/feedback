<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/12953127">
    <body>
      <group id="12953127">
        <trans-unit id="ca68ea47f177871fefa9fde2305a3667021360c8" translate="yes" xml:space="preserve">
          <source>&amp;mdash; in a return statement in a function with a class return type, when the expression is the name of a
  non-volatile automatic object (other than a function or catch-clause parameter) with the same cvunqualified
  type as the function return type, the copy/move operation can be omitted by constructing
  the automatic object directly into the function&amp;rsquo;s return value</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;mdash;在具有类返回类型的函数的返回语句中，当表达式是具有与函数返回类型相同的cvunqualified类型的非易失性自动对象（函数或catch子句参数除外）的名称时，通过将自动对象直接构造到函数的返回值中，可以省略复制/移动操作&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2580328d3e8975b884f68dc5aa02a3b664fd6920" translate="yes" xml:space="preserve">
          <source>&amp;mdash; in a throw-expression, when the operand is the name of a non-volatile automatic object (other than a
  function or catch-clause parameter) whose scope does not extend beyond the end of the innermost
  enclosing try-block (if there is one), the copy/move operation from the operand to the exception
  object (15.1) can be omitted by constructing the automatic object directly into the exception object</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;mdash;在throw-expression中，当操作数是非易失性自动对象（函数或catch子句参数除外）的名称时，其范围不会超出最里面的try-block的末尾（如果存在）一种），可以通过将自动对象直接构造为异常对象来省略从操作数到异常对象（15.1）的复制/移动操作&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dd1636c409fbb9f9e461288cc295518fade43eef" translate="yes" xml:space="preserve">
          <source>&amp;mdash; when a temporary class object that has not been bound to a reference (12.2) would be copied/moved
  to a class object with the same cv-unqualified type, the copy/move operation can be omitted by
  constructing the temporary object directly into the target of the omitted copy/move</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;mdash;当尚未绑定到引用（12.2）的临时类对象将被复制/移动到具有相同cv-unqualtype类型的类对象时，可以通过将临时对象直接构造为以下形式来省略复制/移动操作：省略复制/移动的目标&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e849b3d1afae4fb6624516a457f13daf1c032a72" translate="yes" xml:space="preserve">
          <source>&amp;mdash; when the exception-declaration of an exception handler (Clause 15) declares an object of the same type
  (except for cv-qualification) as the exception object (15.1), the copy/move operation can be omitted
  by treating the exception-declaration as an alias for the exception object if the meaning of the program
  will be unchanged except for the execution of constructors and destructors for the object declared by
  the exception-declaration.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;mdash;当异常处理程序的异常声明（第15条）声明与异常对象（15.1）相同类型的对象（cv限定除外）时，可以通过处理异常声明来省略复制/移动操作如果程序的含义没有改变，则将其作为异常对象的别名，但对于由异常声明所声明的对象执行构造函数和析构函数除外。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b027c79f21550537a67f8b7dc587755c6ff1fdb1" translate="yes" xml:space="preserve">
          <source>(Named) Return value optimization is a common form of copy elision. It refers to the situation where an object returned by value from a method has its copy elided. The example set forth in the standard illustrates &lt;strong&gt;named return value optimization&lt;/strong&gt;, since the object is named.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（命名）返回值优化是复制省略的一种常见形式。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;它指的是从方法返回的值删除了对象的情况。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;标准中阐述的示例说明了&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;命名返回值优化&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，因为对象是命名的。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="78ea4d5fcb108b0de1d70b55bd35f08315d2bdea" translate="yes" xml:space="preserve">
          <source>12.8 Copying and moving class objects [class.copy]</source>
          <target state="translated">12.8 复制和移动类对象 [class.copy]</target>
        </trans-unit>
        <trans-unit id="5d6e19359ffd13f57603ac68f19486a1a89fb586" translate="yes" xml:space="preserve">
          <source>31) When certain criteria are met, an implementation is allowed to omit the copy/move construction of a class
  object, even if the copy/move constructor and/or destructor for the object have side effects. In such cases,
  the implementation treats the source and target of the omitted copy/move operation as simply two different
  ways of referring to the same object, and the destruction of that object occurs at the later of the times
  when the two objects would have been destroyed without the optimization.&lt;sup&gt;123&lt;/sup&gt; This elision of copy/move
  operations, called &lt;em&gt;copy elision&lt;/em&gt;, is permitted in the following circumstances (which may be combined to
  eliminate multiple copies):</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;31）当满足某些条件时，即使该对象的复制/移动构造函数和/或析构函数具有副作用，也允许实现忽略类对象的复制/移动构造。在这种情况下，实现将忽略的复制/移动操作的源和目标视为引用同一对象的两种不同方式，并且该对象的销毁发生在两个对象本来应该以较晚的时间发生。没有优化就销毁。&lt;/font&gt;&lt;/font&gt;&lt;sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;123&lt;/font&gt;&lt;/font&gt;&lt;/sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在以下情况下允许&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;复制/移动操作的这种省略，称为&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;复制&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;删除（可以合并以消除多个副本）：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="598b2d01071069706c333b3d4e3c3eedb82ba47c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;C++17&lt;/strong&gt;: As of C++17, Copy Elision is guaranteed when an object is returned directly:</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C ++ 17&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：从C ++ 17开始，直接返回对象时，可以保证复制消除：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f4bca282132a0b145977e4b2cd548d906a8751ff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Copy elision&lt;/strong&gt; is defined in the standard in:</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;复制省略&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在以下标准中定义：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7c50e57bbedc5565d5fbb4c8f7f7100b92d15d94" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NRVO (Named Return Value Optimization)&lt;/strong&gt;: If a function returns a class type by value and the return statement's expression is the name of a non-volatile object with automatic storage duration (which isn't a function parameter), then the copy/move that would be performed by a non-optimising compiler can be omitted. If so, the returned value is constructed directly in the storage to which the function's return value would otherwise be moved or copied.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;NRVO（命名返回值优化）&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：如果函数按值返回类类型，并且return语句的表达式是具有自动存储持续时间（不是函数参数）的非易失性对象的名称，则复制/移动由非优化编译器执行的操作可以省略。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果是这样，则直接在函数中将函数的返回值移动或复制到的存储器中构造返回值。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="851d7ec5341d9296a442091d5d783b05e7aeaf3d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;RVO (Return Value Optimization)&lt;/strong&gt;: If the function returns a nameless temporary object that would be moved or copied into the destination by a naive compiler, the copy or move can be omitted as per 1.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;RVO（返回值优化）&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：如果函数返回的是无名临时对象，该对象将由天真的编译器移动或复制到目标中，则可以按照1忽略复制或移动。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9c75d156cc061b114edf155ebf9cdb542670f521" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;123) Because only one object is destroyed instead of two, and one copy/move constructor is not executed, there is still one
  object destroyed for each one constructed.&lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;123）因为仅销毁了一个对象而不是两个，并且没有执行一个复制/移动构造函数，所以对于每个构造的对象，仍然销毁了一个对象。&lt;/font&gt;&lt;/font&gt;&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="e25fbbcdd3b8ee7b3e148845f16053ec6f56695b" translate="yes" xml:space="preserve">
          <source>A copy was made.</source>
          <target state="translated">拷贝了一份。</target>
        </trans-unit>
        <trans-unit id="cefb3b77bcecf8e1017d9a41d819e99c7ac397a5" translate="yes" xml:space="preserve">
          <source>Common forms of copy elision</source>
          <target state="translated">常见的复制脱模形式</target>
        </trans-unit>
        <trans-unit id="e6d81920b7ee9638d49e5b2752375858a651fb85" translate="yes" xml:space="preserve">
          <source>Common limitations of copy elision are:</source>
          <target state="translated">常见的复制脱模限制是:</target>
        </trans-unit>
        <trans-unit id="e39262defe80a83fac1b793497417432c8b1a879" translate="yes" xml:space="preserve">
          <source>Conclusion</source>
          <target state="translated">Conclusion</target>
        </trans-unit>
        <trans-unit id="29c1c21e9d67ccc520bc82a42f74f63a23067689" translate="yes" xml:space="preserve">
          <source>Copy elision is a compiler optimization technique that eliminates unnecessary copying/moving of objects.</source>
          <target state="translated">Copy elision是一种编译器优化技术,可以消除对象的不必要的复制移动。</target>
        </trans-unit>
        <trans-unit id="fbfdd75bfdf8635bcfcd0cf966af8bb64f55364c" translate="yes" xml:space="preserve">
          <source>Copy elision is an optimization implemented by most compilers to prevent extra (potentially expensive) copies in certain situations. It makes returning by value or pass-by-value feasible in practice (restrictions apply).</source>
          <target state="translated">Copy elision 是大多数编译器实现的一种优化,以防止在某些情况下出现额外的(可能是昂贵的)拷贝。它使得按值返回或逐值传递在实践中是可行的(有限制)。</target>
        </trans-unit>
        <trans-unit id="490dd5d7ca8c44cfeed4625143a3770a149e5198" translate="yes" xml:space="preserve">
          <source>Depending on the compiler &amp;amp; settings, the following outputs &lt;strong&gt;are all valid&lt;/strong&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;根据编译器和设置，以下输出&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;均有效&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="276cd53255b9b3ea88605cf74af8abdaf8beb8fc" translate="yes" xml:space="preserve">
          <source>Even when copy elision takes place and the copy-/move-constructor is not called, it must be present and accessible (as if no optimization happened at all), otherwise the program is ill-formed.</source>
          <target state="translated">即使发生了copy elision,而copy-move-constructor没有被调用,它也必须存在并可访问(就像根本没有发生任何优化一样),否则程序是不成形的。</target>
        </trans-unit>
        <trans-unit id="98744a4749281c58f10aa4597039ee7e319247d7" translate="yes" xml:space="preserve">
          <source>For a less technical view &amp;amp; introduction - &lt;a href=&quot;https://stackoverflow.com/a/12953129/673730&quot;&gt;skip to this answer&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对于较不技术的观点和介绍，请&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/12953129/673730&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;跳至此答案&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="614719e36ba3c5b8c038c4b55c8a697a9cc2ffc1" translate="yes" xml:space="preserve">
          <source>For a technical overview - &lt;a href=&quot;https://stackoverflow.com/a/12953145/673730&quot;&gt;skip to this answer&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;有关技术概述，请&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/12953145/673730&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;跳至此答案&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f9375d9c1837abc76f0780795325da2541dc54ae" translate="yes" xml:space="preserve">
          <source>For a technical overview, see &lt;a href=&quot;https://stackoverflow.com/a/12953145/673730&quot;&gt;&lt;strong&gt;the standard reference&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;有关技术概述，请参见&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/12953145/673730&quot;&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;标准参考&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d874f6ce6007afba91b0703ce05e417c3456141a" translate="yes" xml:space="preserve">
          <source>For common cases where copy elision occurs - &lt;a href=&quot;https://stackoverflow.com/a/12953150/673730&quot;&gt;skip to this answer&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对于发生复制&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/12953150/673730&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;省略的&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;常见情况，请&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;跳至此答案&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="01805fbf346c39ae2173772f959ccee1d0624130" translate="yes" xml:space="preserve">
          <source>GCC provides the &lt;code&gt;-fno-elide-constructors&lt;/code&gt; option to disable copy elision. 
If you want to avoid possible copy elision, use &lt;code&gt;-fno-elide-constructors&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;GCC提供了&lt;/font&gt;&lt;/font&gt; &lt;code&gt;-fno-elide-constructors&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; elide &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;-constructors&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;选项来禁用复制省略。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果要避免可能的复制省略，请使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;-fno-elide-constructors&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; elide &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;-constructors&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2ef7bde608ce5404e97d5f042f95f89f1c232871" translate="yes" xml:space="preserve">
          <source>Hello World!</source>
          <target state="translated">你好世界!</target>
        </trans-unit>
        <trans-unit id="d58287d09ddbef331cd242c7504df285cc86e34b" translate="yes" xml:space="preserve">
          <source>Here the criteria for elision can be combined to eliminate two calls to the copy constructor of class &lt;code&gt;Thing&lt;/code&gt;:
  the copying of the local automatic object &lt;code&gt;t&lt;/code&gt; into the temporary object for the return value of function &lt;code&gt;f()&lt;/code&gt;
  and the copying of that temporary object into object &lt;code&gt;t2&lt;/code&gt;. Effectively, the construction of the local object &lt;code&gt;t&lt;/code&gt;
  can be viewed as directly initializing the global object &lt;code&gt;t2&lt;/code&gt;, and that object&amp;rsquo;s destruction will occur at program
  exit. Adding a move constructor to Thing has the same effect, but it is the move construction from the
  temporary object to &lt;code&gt;t2&lt;/code&gt; that is elided.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在这里，可以将省略标准组合起来，以消除对&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Thing&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;类的复制构造函数的两次调用&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：将本地自动对象&lt;/font&gt;&lt;/font&gt; &lt;code&gt;t&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;复制&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;到函数&lt;/font&gt;&lt;/font&gt; &lt;code&gt;f()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的返回值的临时对象中，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 以及将该临时对象复制到object中&lt;/font&gt;&lt;/font&gt; &lt;code&gt;t2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。实际上，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 可以将&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;本地对象&lt;/font&gt;&lt;/font&gt; &lt;code&gt;t&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的构造&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;视为直接初始化全局对象&lt;/font&gt;&lt;/font&gt; &lt;code&gt;t2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，并且该对象的破坏将在程序退出时发生。在Thing中添加move构造函数具有相同的效果，但是&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;可以避免&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;从临时对象到&lt;/font&gt;&lt;/font&gt; &lt;code&gt;t2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的move构造&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="96fee38c7b19c6c4ca78f7e13941ae99616cfdd7" translate="yes" xml:space="preserve">
          <source>If a call to a copy or move constructor is elided, that constructor must still exist and must be accessible. This ensures that copy elision does not allow copying objects which are not normally copyable, e.g. because they have a private or deleted copy/move constructor.</source>
          <target state="translated">如果对复制或移动构造函数的调用被删除,那么该构造函数必须仍然存在,并且必须是可访问的。这就确保了copy elision不允许复制那些通常不能复制的对象,例如,因为它们有一个私有或删除的copymove构造函数。</target>
        </trans-unit>
        <trans-unit id="f3b669b04bbf8aef4317a0aa72fffe10d1a51478" translate="yes" xml:space="preserve">
          <source>If you were referenced to this question, you're probably looking for &lt;a href=&quot;https://stackoverflow.com/a/12953129/673730&quot;&gt;&lt;strong&gt;the introduction&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果您提到此问题，则可能正在寻找&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/12953129/673730&quot;&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;介绍&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c7dd4fddae03de8061cd2158291b3a9545b84ed1" translate="yes" xml:space="preserve">
          <source>In the following circumstances, a compiler is allowed to omit copy/move operations and hence not to call the associated constructor:</source>
          <target state="translated">在以下情况下,编译器可以省略copymove操作,从而不调用相关的构造函数。</target>
        </trans-unit>
        <trans-unit id="5b137b5e8755ef09af3707aed311db814b9d5a29" translate="yes" xml:space="preserve">
          <source>In what situations can they occur? What are limitations?</source>
          <target state="translated">在哪些情况下会出现?又有哪些限制?</target>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="64980ce4228b437497970908317a4bbc4bc7acf1" translate="yes" xml:space="preserve">
          <source>It's the only form of optimization that elides (ha!) the as-if rule - &lt;strong&gt;copy elision can be applied even if copying/moving the object has side-effects&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这是唯一可以避免（ha！）优化规则的形式，&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;即使复制/移动对象有副作用，也可以应用&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;按规则&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;复制&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;规则&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f4d31d579250934aa8c5539513e042f00264d598" translate="yes" xml:space="preserve">
          <source>Most commercial-grade compilers support copy elision &amp;amp; (N)RVO (depending on optimization settings).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;大多数商业级编译器都支持复制省略和（N）RVO（取决于优化设置）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cb0e303ac5062305ae6fafc00c8a6d006a6dfafa" translate="yes" xml:space="preserve">
          <source>Now almost all compilers provide copy elision when optimisation is enabled (and if no other option is set to disable it).</source>
          <target state="translated">现在,几乎所有的编译器在启用优化时都提供了复制 elision(如果没有其他选项设置为禁用)。</target>
        </trans-unit>
        <trans-unit id="aa9224d012c8e884eeaf72e0ac516f2a59976c6f" translate="yes" xml:space="preserve">
          <source>Other common places where copy elision takes place is when a &lt;strong&gt;temporary is passed by value&lt;/strong&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;发生复制省略的其他常见位置是&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;按值传递临时值时&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="40b50d9e417452191b14b99cb338d3afa42d8c52" translate="yes" xml:space="preserve">
          <source>Regular &lt;strong&gt;return value optimization&lt;/strong&gt; occurs when a temporary is returned:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;返回&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;临时&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;值&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;时，会进行&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;常规的&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;返回值优化&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1eac2141ee15e30898fed570da08416209ff6f76" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://stackoverflow.com/a/12953150/673730&quot;&gt;&lt;strong&gt;common cases&lt;/strong&gt; here&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;a href=&quot;https://stackoverflow.com/a/12953150/673730&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在这里&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;查看&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;常见情况&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="737c41f932ba8061b40df0ffaf27ac375db25aa6" translate="yes" xml:space="preserve">
          <source>Standard reference</source>
          <target state="translated">标准参考资料</target>
        </trans-unit>
        <trans-unit id="fec0deb1889eb088a0f2ef252bac62cf1206ad2b" translate="yes" xml:space="preserve">
          <source>The example given is:</source>
          <target state="translated">所举的例子是:</target>
        </trans-unit>
        <trans-unit id="a62650426116c07ea3f512ffc0f8723710652184" translate="yes" xml:space="preserve">
          <source>The following example taken from &lt;a href=&quot;http://en.wikipedia.org/wiki/Return_value_optimization&quot;&gt;Wikipedia&lt;/a&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;以下示例摘自&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Return_value_optimization&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Wikipedia&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b6635c82ae545142984bf1c3b629dfd616139d38" translate="yes" xml:space="preserve">
          <source>This also means fewer objects can be created, so you also can't rely on a specific number of destructors being called. You shouldn't have critical logic inside copy/move-constructors or destructors, as you can't rely on them being called.</source>
          <target state="translated">这也意味着可以创建更少的对象,所以你也不能依赖特定数量的destructors被调用。你不应该在copymove-constructors或destructors里面有关键逻辑,因为你不能依赖它们被调用。</target>
        </trans-unit>
        <trans-unit id="ae6471e2b082f4881df1cf9fda939527ef9aa938" translate="yes" xml:space="preserve">
          <source>What are copy elision and return value optimization</source>
          <target state="translated">什么是复制脱敏和返回值优化</target>
        </trans-unit>
        <trans-unit id="62b72263405de42c2be0edb11944cafbc74c54d0" translate="yes" xml:space="preserve">
          <source>What is copy elision? What is (named) return value optimization? What do they imply?</source>
          <target state="translated">什么是复制脱敏?什么是(命名)返回值优化?它们意味着什么?</target>
        </trans-unit>
        <trans-unit id="9113fc5fe923ee2d5e1c85e748812dd7b32a2a1e" translate="yes" xml:space="preserve">
          <source>With each copy elision, one construction and one matching destruction of the copy are omitted, thus saving CPU time, and one object is not created, thus saving space on the stack frame.</source>
          <target state="translated">在每一次的复制 elision 中,省略了一个构造和一个匹配的销毁副本,从而节省了 CPU 时间,并且不创建一个对象,从而节省了堆栈框架上的空间。</target>
        </trans-unit>
        <trans-unit id="70fa382897ec58f114b2ab7202943e62bd559271" translate="yes" xml:space="preserve">
          <source>You should permit such copy elision only in places where it won&amp;rsquo;t affect the observable behavior of your software. Copy elision is the only form of optimization permitted to have (i.e. elide) observable side-effects. Example:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;您应该只在不会影响软件可观察到行为的地方允许这种复制省略。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;复制省略是允许具有（即消除）可观察到的副作用的唯一优化形式。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;例：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2a22995d4db73eba6824e4e29ac6f8af629c130e" translate="yes" xml:space="preserve">
          <source>and explained:</source>
          <target state="translated">并解释说:</target>
        </trans-unit>
        <trans-unit id="df211ccdd94a63e0bcb9e6ae427a249484a49d60" translate="yes" xml:space="preserve">
          <source>as</source>
          <target state="translated">as</target>
        </trans-unit>
        <trans-unit id="1a2ca8d32e40defcaf29531d526f78857abacee5" translate="yes" xml:space="preserve">
          <source>conditional initialization</source>
          <target state="translated">有条件的初始化</target>
        </trans-unit>
        <trans-unit id="d791fcc41bc7bdcd58925821d6f9b90ca2e993e1" translate="yes" xml:space="preserve">
          <source>multiple return points</source>
          <target state="translated">多返点</target>
        </trans-unit>
        <trans-unit id="8dabe2e94d353ad87f489995f56ab5b96aa4ba5a" translate="yes" xml:space="preserve">
          <source>or when an &lt;strong&gt;exception is thrown and caught by value&lt;/strong&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;或&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;抛出异常并按值捕获时&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
