<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/12573816">
    <body>
      <group id="12573816">
        <trans-unit id="c9cbc039ba0dda953e719495f032898e9956f254" translate="yes" xml:space="preserve">
          <source>&quot;An introduction to GCC&quot; &lt;a href=&quot;http://www.network-theory.co.uk/docs/gccintro/gccintro_75.html&quot;&gt;chapter 9&lt;/a&gt;.</source>
          <target state="translated">&quot;Una introducci&amp;oacute;n al CCG&quot; &lt;a href=&quot;http://www.network-theory.co.uk/docs/gccintro/gccintro_75.html&quot;&gt;cap&amp;iacute;tulo 9&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="9d7d5b868297c7e069f79fb3331f33b5984b8682" translate="yes" xml:space="preserve">
          <source>$ &lt;code&gt;g++ -g -std=c++17 -c file.cpp&lt;/code&gt; -&amp;gt; compiles file.cpp and file.h to file.o</source>
          <target state="translated">$ &lt;code&gt;g++ -g -std=c++17 -c file.cpp&lt;/code&gt; -&amp;gt; compila file.cpp y file.h a file.o</target>
        </trans-unit>
        <trans-unit id="e49790a3beb1dd7402b4cb606c79667d1433b0a4" translate="yes" xml:space="preserve">
          <source>$ &lt;code&gt;g++ -g -std=c++17 -c main.cpp&lt;/code&gt; -&amp;gt; compiles main.cpp to main.o</source>
          <target state="translated">$ &lt;code&gt;g++ -g -std=c++17 -c main.cpp&lt;/code&gt; -&amp;gt; compila main.cpp a main.o</target>
        </trans-unit>
        <trans-unit id="071ec213b517c0a8d3f03b45c60bc9f9f0b55435" translate="yes" xml:space="preserve">
          <source>$ &lt;code&gt;g++ -g -std=c++17 -o executable main.o file.o -lstdc++fs&lt;/code&gt; -&amp;gt; links main.o and file.o</source>
          <target state="translated">$ &lt;code&gt;g++ -g -std=c++17 -o executable main.o file.o -lstdc++fs&lt;/code&gt; -&amp;gt; enlaces main.o y file.o</target>
        </trans-unit>
        <trans-unit id="bad1abfbbc607215e826cba0225a7e15753aaefc" translate="yes" xml:space="preserve">
          <source>(Or: That linkage worked fine for you on, say, Fedora 23, but fails on Ubuntu 16.04)</source>
          <target state="translated">(O:Esa conexión funcionó bien para ti en,digamos,Fedora 23,pero falla en Ubuntu 16.04)</target>
        </trans-unit>
        <trans-unit id="74c25a55039995250f6d3f12bb86f1ae278cee30" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://coliru.stacked-crooked.com/a/e9221c4bb23f9cd0&quot;&gt;Code listing showing the techniques above&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://coliru.stacked-crooked.com/a/e9221c4bb23f9cd0&quot;&gt;Listado de c&amp;oacute;digo que muestra las t&amp;eacute;cnicas anteriores&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="2bf6077b839b27f134871fac7b06a0474aa39b4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;static&lt;/code&gt; data members must be defined outside the class in a &lt;strong&gt;single translation unit&lt;/strong&gt;:</source>
          <target state="translated">&lt;code&gt;static&lt;/code&gt; miembros de datos est&amp;aacute;ticos deben definirse fuera de la clase en una &lt;strong&gt;sola unidad de traducci&amp;oacute;n&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="89e5d36fe0239dd24cbe84c6df52545cb824576c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;virtual&lt;/code&gt; methods must either be implemented or defined as pure.</source>
          <target state="translated">&lt;code&gt;virtual&lt;/code&gt; m&amp;eacute;todos virtuales deben implementarse o definirse como puros.</target>
        </trans-unit>
        <trans-unit id="a6e978f78787cb65ba3c48dd61a5ce9874bb1e0e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;As a side note to the failing code sample; g++ warns about this as follows&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Como nota al margen del ejemplo de c&amp;oacute;digo que falla;&lt;/em&gt; &lt;em&gt;g ++ advierte sobre esto de la siguiente manera&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="bcdf4af6901fd0be253767cc15e18070c0140d96" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note&lt;/em&gt;, when the declaration of the operator (or function) only appears in the class, the name is not available for &quot;normal&quot; lookup, only for argument dependent lookup, from &lt;a href=&quot;http://en.cppreference.com/w/cpp/language/friend&quot;&gt;cppreference&lt;/a&gt;;</source>
          <target state="translated">&lt;em&gt;Tenga en cuenta que&lt;/em&gt; cuando la declaraci&amp;oacute;n del operador (o funci&amp;oacute;n) solo aparece en la clase, el nombre no est&amp;aacute; disponible para la b&amp;uacute;squeda &quot;normal&quot;, solo para la b&amp;uacute;squeda dependiente del argumento, de &lt;a href=&quot;http://en.cppreference.com/w/cpp/language/friend&quot;&gt;cppreference&lt;/a&gt; ;</target>
        </trans-unit>
        <trans-unit id="66ebd1f43ac511c6c708dab9f44756f21a71765e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Reading is optional from here on&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;La lectura es opcional de aqu&amp;iacute; en adelante&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="2438bd9596a6f2aad81a0222f2c18ffe262f7d81" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;[footnote]&lt;/em&gt; Implementations must behave as if these separate phases occur, although in practice different phases might be folded together.</source>
          <target state="translated">&lt;em&gt;[nota al pie] Las&lt;/em&gt; implementaciones deben comportarse como si ocurrieran estas fases separadas, aunque en la pr&amp;aacute;ctica las diferentes fases podr&amp;iacute;an plegarse juntas.</target>
        </trans-unit>
        <trans-unit id="a534858af77623fa6f10f6aa3f2334132487ee64" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;A wrapper around GNU ld that doesn't support linker scripts&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Un contenedor alrededor de GNU ld que no admite scripts de enlazador&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="835e534d0a03e685a5781ca6fe9811f767d58b55" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;A. What is symbol?&lt;/strong&gt;
In short, a symbol is a name. It can be a variable name, a function name, a class name, a typedef name, or anything except those names and signs that belong to C++ language. It is user defined or introduced by a dependency library (another user-defined).</source>
          <target state="translated">&lt;strong&gt;A. &amp;iquest;Qu&amp;eacute; es el s&amp;iacute;mbolo?&lt;/strong&gt; En resumen, un s&amp;iacute;mbolo es un nombre. Puede ser un nombre de variable, un nombre de funci&amp;oacute;n, un nombre de clase, un nombre de typedef o cualquier cosa, excepto los nombres y signos que pertenecen al lenguaje C ++. Es definido por el usuario o introducido por una biblioteca de dependencias (otra definida por el usuario).</target>
        </trans-unit>
        <trans-unit id="eec66c59c1dbab98e498c91f5e97e7ff8ab7101f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;All external entity references are resolved. Library components are linked to satisfy external references to entities not defined in the
  current translation. All such translator output is collected into a
  program image which contains information needed for execution in its
  execution environment.&lt;/strong&gt; (emphasis mine)</source>
          <target state="translated">&lt;strong&gt;Se resuelven todas las referencias de entidades externas.&lt;/strong&gt; &lt;strong&gt;Los componentes de la biblioteca est&amp;aacute;n vinculados para satisfacer referencias externas a entidades no definidas en la traducci&amp;oacute;n actual.&lt;/strong&gt; &lt;strong&gt;Todos los resultados del traductor se recopilan en una imagen del programa que contiene la informaci&amp;oacute;n necesaria para la ejecuci&amp;oacute;n en su entorno de ejecuci&amp;oacute;n.&lt;/strong&gt; (&amp;eacute;nfasis m&amp;iacute;o)</target>
        </trans-unit>
        <trans-unit id="dd8db3de81c77ec485d11b2559fd63ff6023c436" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;B. What is external?&lt;/strong&gt;
In VC++, every source file (.cpp,.c,etc.) is considered as a translation unit, the compiler compiles one unit at a time, and generate one object file(.obj) for the current translation unit. (Note that every header file that this source file included will be preprocessed and will be considered as part of this translation unit)Everything within a translation unit is considered as internal, everything else is considered as external. In C++, you may reference an external symbol by using keywords like &lt;code&gt;extern&lt;/code&gt;, &lt;code&gt;__declspec (dllimport)&lt;/code&gt; and so on.</source>
          <target state="translated">&lt;strong&gt;B. &amp;iquest;Qu&amp;eacute; es externo?&lt;/strong&gt; En VC ++, cada archivo fuente (.cpp, .c, etc.) se considera como una unidad de traducci&amp;oacute;n, el compilador compila una unidad a la vez y genera un archivo de objeto (.obj) para la unidad de traducci&amp;oacute;n actual. (Tenga en cuenta que cada archivo de encabezado que incluya este archivo fuente se procesar&amp;aacute; previamente y se considerar&amp;aacute; como parte de esta unidad de traducci&amp;oacute;n) Todo lo que se encuentra dentro de una unidad de traducci&amp;oacute;n se considera interno, todo lo dem&amp;aacute;s se considera externo. En C ++, puede hacer referencia a un s&amp;iacute;mbolo externo utilizando palabras clave como &lt;code&gt;extern&lt;/code&gt; , &lt;code&gt;__declspec (dllimport)&lt;/code&gt; , etc.</target>
        </trans-unit>
        <trans-unit id="6c2ca1047c2ef8497e41c914c53f8e7ca55ee476" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;C. What is &amp;ldquo;resolve&amp;rdquo;?&lt;/strong&gt;
Resolve is a linking-time term. In linking-time, linker attempts to find the external definition for every symbol in object files that cannot find its definition internally. The scope of this searching process including:</source>
          <target state="translated">&lt;strong&gt;C. &amp;iquest;Qu&amp;eacute; es &quot;resolver&quot;?&lt;/strong&gt; Resolver es un t&amp;eacute;rmino de tiempo de enlace. En el tiempo de enlace, el enlazador intenta encontrar la definici&amp;oacute;n externa para cada s&amp;iacute;mbolo en los archivos de objetos que no pueden encontrar su definici&amp;oacute;n internamente. El alcance de este proceso de b&amp;uacute;squeda incluye:</target>
        </trans-unit>
        <trans-unit id="7342049e2513cd5b99e201cfcb5bf3b14417789e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;D. Finally, why Unresolved External Symbol?&lt;/strong&gt;
If the linker cannot find the external definition for a symbol that has no definition internally, it reports an Unresolved External Symbol error.</source>
          <target state="translated">&lt;strong&gt;D. Finalmente, &amp;iquest;por qu&amp;eacute; s&amp;iacute;mbolo externo no resuelto?&lt;/strong&gt; Si el vinculador no puede encontrar la definici&amp;oacute;n externa de un s&amp;iacute;mbolo que no tiene una definici&amp;oacute;n interna, informa un error de s&amp;iacute;mbolo externo no resuelto.</target>
        </trans-unit>
        <trans-unit id="5b8a47f4b41b91b3d612aacb048ed208fcac6f16" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Different architectures&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Diferentes arquitecturas&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="be965b14abe7432b5fa433657763c3dc46c94955" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;E. Possible causes of LNK2019&lt;/strong&gt;: Unresolved External Symbol error.
We already know that this error is due to the linker failed to find the definition of external symbols, the possible causes can be sorted as:</source>
          <target state="translated">&lt;strong&gt;E. Posibles causas de LNK2019&lt;/strong&gt; : error de s&amp;iacute;mbolo externo no resuelto. Ya sabemos que este error se debe a que el enlazador no pudo encontrar la definici&amp;oacute;n de s&amp;iacute;mbolos externos, las posibles causas pueden clasificarse como:</target>
        </trans-unit>
        <trans-unit id="175dc84044f833f83a2c70ee5958f34ffa3867f0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;How To Solve this kind of error&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;C&amp;oacute;mo resolver este tipo de error&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="50f9819832db0d81b1174260f918040cd2cf7d74" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;If all else fails, recompile.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Si todo lo dem&amp;aacute;s falla, recompile.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cffd218845fdac972017077668b21dcb30366645" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Linked .lib file is associated to a .dll&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;El archivo .lib vinculado est&amp;aacute; asociado a un .dll&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="06b83ed7c66d61ec7db41c3a6e7b02f8577e43ef" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Observation&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Observation&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8940eb48005ed796b60ad830078b12d07df43be6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Steps In Linking a project&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Pasos para vincular un proyecto&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="75d4f8b2fa373cf046a6b677d6c35770b0294edb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Visual Studio NuGet package needs to be updated for new toolset version&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;El paquete Visual Studio NuGet debe actualizarse para la nueva versi&amp;oacute;n del conjunto de herramientas&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cb0c9feeb4bacc0fa3c37312d7a301912ecd4847" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;What's the meaning of compilation ?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&amp;iquest;Cu&amp;aacute;l es el significado de la compilaci&amp;oacute;n?&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1465fad7785625be27309d79cd0e820fa06d98f6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eg1.c&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;eg1.c&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="89c440cfe498cb89e3725891dfd833439ac8312d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eg2.c&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;eg2.c&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ff073c269c56360873674533870cbf8bfa429227" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;file.cpp&lt;/strong&gt;, the implementation of file.h, #include's &quot;&lt;strong&gt;file.h&lt;/strong&gt;&quot;</source>
          <target state="translated">&lt;strong&gt;file.cpp&lt;/strong&gt; , la implementaci&amp;oacute;n de file.h, &quot; &lt;strong&gt;include&lt;/strong&gt; &quot; &lt;strong&gt;file.h&lt;/strong&gt; &quot;</target>
        </trans-unit>
        <trans-unit id="f9ae04f6c866dcf587fa6e1e0dae001a09d7888a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;file.h&lt;/strong&gt; #include's &amp;lt;&lt;strong&gt;experimental::filesystem&lt;/strong&gt;&amp;gt; and contains the code above</source>
          <target state="translated">&lt;strong&gt;file.h&lt;/strong&gt; # include's &amp;lt; &lt;strong&gt;experimental :: filesystem&lt;/strong&gt; &amp;gt; y contiene el c&amp;oacute;digo anterior</target>
        </trans-unit>
        <trans-unit id="fddf0c10ac5731cb589a87bb2c2094c4fa147fdd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;main.cpp&lt;/strong&gt; #include's &amp;lt;&lt;strong&gt;filesystem&lt;/strong&gt;&amp;gt; and &quot;&lt;strong&gt;file.h&lt;/strong&gt;&quot;</source>
          <target state="translated">&lt;strong&gt;main.cpp&lt;/strong&gt; # include's &amp;lt; &lt;strong&gt;filesystem&lt;/strong&gt; &amp;gt; y &quot; &lt;strong&gt;file.h&lt;/strong&gt; &quot;</target>
        </trans-unit>
        <trans-unit id="2582c85be2b20f3244cd0cd3e45025f73c92ed51" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;my_lib.c&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;my_lib.c&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c230963946da5a9ed838b6a5933de9f154d5ef91" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;my_lib.h&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;my_lib.h&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2662021565cbcee02085174aa21cc7ecdb484907" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;undefined reference to &lt;code&gt;WinMain@16&lt;/code&gt; or similar &lt;em&gt;'unusual'&lt;/em&gt; &lt;code&gt;main()&lt;/code&gt; entry point reference&lt;/strong&gt; (especially for &lt;a href=&quot;/questions/tagged/visual-studio&quot;&gt;visual-studio&lt;/a&gt;).</source>
          <target state="translated">&lt;strong&gt;referencia indefinida a &lt;code&gt;WinMain@16&lt;/code&gt; o referencia de punto de entrada &lt;code&gt;main()&lt;/code&gt; &lt;em&gt;&quot;inusual&quot;&lt;/em&gt; similar&lt;/strong&gt; (especialmente para &lt;a href=&quot;/questions/tagged/visual-studio&quot;&gt;visual-studio&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="0acfceb277492d3fa70c2011c817d088faf04611" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;what is an &quot;undefined reference/unresolved external symbol&quot;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&amp;iquest;Qu&amp;eacute; es una &quot;referencia indefinida / s&amp;iacute;mbolo externo sin resolver&quot;?&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c3c395f4232d75cdbc21861202f537c9ca9121e5" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;Feel free to edit/add your own.&lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;Si&amp;eacute;ntase libre de editar / agregar el suyo.&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="d2d1d37fdef4865427a49fbf3bf6a77bd38bb6d1" translate="yes" xml:space="preserve">
          <source>A &quot;clean&quot; of the build can remove the &quot;dead wood&quot; that may be left lying around from previous builds, failed builds, incomplete builds and other build system related build issues.</source>
          <target state="translated">Una &quot;limpieza&quot; de la construcción puede eliminar la &quot;madera muerta&quot; que puede quedar por ahí de construcciones anteriores,construcciones fallidas,construcciones incompletas y otros problemas de construcción relacionados con el sistema de construcción.</target>
        </trans-unit>
        <trans-unit id="189f79f5d1a5faa4467603ef162262cccf65ca78" translate="yes" xml:space="preserve">
          <source>A Windows UNICODE build is built with &lt;code&gt;TCHAR&lt;/code&gt; etc. being defined as &lt;code&gt;wchar_t&lt;/code&gt; etc. When not building with &lt;code&gt;UNICODE&lt;/code&gt; defined as build with &lt;code&gt;TCHAR&lt;/code&gt; defined as &lt;code&gt;char&lt;/code&gt; etc. These &lt;code&gt;UNICODE&lt;/code&gt; and &lt;code&gt;_UNICODE&lt;/code&gt; defines affect all the &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/dd374131(v=vs.85).aspx&quot;&gt;&quot;&lt;code&gt;T&lt;/code&gt;&quot; string types&lt;/a&gt;; &lt;code&gt;LPTSTR&lt;/code&gt;, &lt;code&gt;LPCTSTR&lt;/code&gt; and their elk.</source>
          <target state="translated">Una compilaci&amp;oacute;n UNICODE de Windows se construye con &lt;code&gt;TCHAR&lt;/code&gt; , etc., que se define como &lt;code&gt;wchar_t&lt;/code&gt; , etc. &lt;code&gt;LPTSTR&lt;/code&gt; , &lt;code&gt;LPCTSTR&lt;/code&gt; y sus alces.</target>
        </trans-unit>
        <trans-unit id="90afd285297eb44d41e1f5773ca5cb874cbb19b4" translate="yes" xml:space="preserve">
          <source>A bug in the compiler/IDE</source>
          <target state="translated">Un error en el compiladorIDE</target>
        </trans-unit>
        <trans-unit id="a31d75bc9dfc18e7b2009004254a487c7ca05013" translate="yes" xml:space="preserve">
          <source>A common mistake is forgetting to qualify the name:</source>
          <target state="translated">Un error común es olvidarse de calificar el nombre:</target>
        </trans-unit>
        <trans-unit id="1f739d01292aa73c37e4aee39f036a3bb2a527ee" translate="yes" xml:space="preserve">
          <source>A minimal example involving a shared system library, the compression library &lt;code&gt;libz&lt;/code&gt;</source>
          <target state="translated">Un ejemplo m&amp;iacute;nimo que involucra una biblioteca de sistema compartida, la biblioteca de compresi&amp;oacute;n &lt;code&gt;libz&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="01c92916b56793a9454d489c312fa9257acc6107" translate="yes" xml:space="preserve">
          <source>A minimal example involving a static library you built yourself</source>
          <target state="translated">Un ejemplo mínimo que involucra una biblioteca estática que usted mismo construyó</target>
        </trans-unit>
        <trans-unit id="6d46bde77adddeb0b72386689fff3e28dd372bb9" translate="yes" xml:space="preserve">
          <source>A name first declared in a friend declaration within class or class template X becomes a member of the innermost enclosing namespace of X, but is not accessible for lookup (except argument-dependent lookup that considers X) unless a matching declaration at the namespace scope is provided...</source>
          <target state="translated">Un nombre declarado por primera vez en una declaración de amigo dentro de la clase o plantilla de clase X pasa a ser miembro del espacio de nombres adjunto más interior de X,pero no es accesible para su búsqueda (excepto la búsqueda dependiente de argumentos que considere X)a menos que se proporcione una declaración coincidente en el ámbito del espacio de nombres...</target>
        </trans-unit>
        <trans-unit id="5a03aa49c3c082188ccefd12449a2783226a9d4f" translate="yes" xml:space="preserve">
          <source>A pure &lt;code&gt;virtual&lt;/code&gt; destructor needs an implementation.</source>
          <target state="translated">Un destructor &lt;code&gt;virtual&lt;/code&gt; puro necesita una implementaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="ec2d47bd5e6c687188cca18e11b6e3a11fd20b4b" translate="yes" xml:space="preserve">
          <source>A shared library isn't an archive of object files or anything like it. It's
much more like a &lt;em&gt;program&lt;/em&gt; that doesn't have a &lt;code&gt;main&lt;/code&gt; function and
instead exposes multiple other symbols that it defines, so that other
programs can use them at runtime.</source>
          <target state="translated">Una biblioteca compartida no es un archivo de archivos de objetos ni nada parecido. Es mucho m&amp;aacute;s parecido a un &lt;em&gt;programa&lt;/em&gt; que no tiene una funci&amp;oacute;n &lt;code&gt;main&lt;/code&gt; y, en cambio, expone varios otros s&amp;iacute;mbolos que define, para que otros programas puedan usarlos en tiempo de ejecuci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="4f62d04e30be88d7be65eb3c4d8daefedf696027" translate="yes" xml:space="preserve">
          <source>A static library is an indexed archive of object files. When the linker
finds &lt;code&gt;-lmy_lib&lt;/code&gt; in the linkage sequence and figures out that this refers
to the static library &lt;code&gt;./libmy_lib.a&lt;/code&gt;, it wants to know whether your program
needs any of the object files in &lt;code&gt;libmy_lib.a&lt;/code&gt;.</source>
          <target state="translated">Una biblioteca est&amp;aacute;tica es un archivo indexado de archivos de objetos. Cuando el enlazador encuentra &lt;code&gt;-lmy_lib&lt;/code&gt; en la secuencia de enlace y descubre que esto se refiere a la biblioteca est&amp;aacute;tica &lt;code&gt;./libmy_lib.a&lt;/code&gt; , quiere saber si su programa necesita alguno de los archivos de objetos en &lt;code&gt;libmy_lib.a&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8b191d246d34f1e602a3e402976e900a1a875073" translate="yes" xml:space="preserve">
          <source>A typical variable declaration is</source>
          <target state="translated">Una declaración variable típica es</target>
        </trans-unit>
        <trans-unit id="82e2e65a5074a60696904cace45937b63edf3d64" translate="yes" xml:space="preserve">
          <source>Adjacent string literal tokens are concatenated.</source>
          <target state="translated">Las fichas literales de cuerda adyacentes están concatenadas.</target>
        </trans-unit>
        <trans-unit id="7fe45da2f4efcc86cb9b6567ee7a4ad6bf699b1f" translate="yes" xml:space="preserve">
          <source>After the assembler phase we have an object file, which contains any symbols to export. 
Look at the symbols</source>
          <target state="translated">Después de la fase de ensamblaje tenemos un archivo de objetos,que contiene cualquier símbolo para exportar.Mira los símbolos</target>
        </trans-unit>
        <trans-unit id="dbf5b9e02583394489628b8d6f4b8f7252c2835c" translate="yes" xml:space="preserve">
          <source>All libraries (.lib) that are either explicitly or implicitly
specified as additional dependencies of this building application.</source>
          <target state="translated">Todas las bibliotecas (.lib)que se especifican explícita o implícitamente como dependencias adicionales de esta aplicación de construcción.</target>
        </trans-unit>
        <trans-unit id="f594bd06c1caa0ead7f44aab9131622ae2e6ba7e" translate="yes" xml:space="preserve">
          <source>All object files that generated in compiling time</source>
          <target state="translated">Todos los archivos de objetos que se generaron en el tiempo de compilación</target>
        </trans-unit>
        <trans-unit id="4091f76b2539a23ecb3681b7960816da46fc1f49" translate="yes" xml:space="preserve">
          <source>All used member methods need to be defined if used.</source>
          <target state="translated">Es necesario definir todos los métodos de miembros utilizados,si es que se utilizan.</target>
        </trans-unit>
        <trans-unit id="258953ce5c44b3d94df6a62bf16b94620782ab0b" translate="yes" xml:space="preserve">
          <source>Allowing the friendship to extend to all instantiations of the templates, as follows;</source>
          <target state="translated">Permitiendo que la amistad se extienda a todas las instancias de las plantillas,como sigue;</target>
        </trans-unit>
        <trans-unit id="c827bc9706235eb6e58b62b8ed3b65b6653a561a" translate="yes" xml:space="preserve">
          <source>Also if you're using 3rd party libraries make sure you have the correct 32/64 bit binaries</source>
          <target state="translated">También si estás usando bibliotecas de terceros asegúrate de tener los binarios de 3264 bits correctos</target>
        </trans-unit>
        <trans-unit id="fcf665a8f73833aa185cc196d74ef511cdd50687" translate="yes" xml:space="preserve">
          <source>Alternatively one could declare the &lt;code&gt;const&lt;/code&gt; variable in file1.cpp with explicit &lt;code&gt;extern&lt;/code&gt;</source>
          <target state="translated">Alternativamente, uno podr&amp;iacute;a declarar la variable &lt;code&gt;const&lt;/code&gt; en file1.cpp con expl&amp;iacute;cito &lt;code&gt;extern&lt;/code&gt; o</target>
        </trans-unit>
        <trans-unit id="6faa1efbd9a22a841dece261aa541458bc6561d1" translate="yes" xml:space="preserve">
          <source>Alternatives include;</source>
          <target state="translated">Las alternativas incluyen;</target>
        </trans-unit>
        <trans-unit id="9142d2a0c57278cbac1656ede2c51ad79022c5e8" translate="yes" xml:space="preserve">
          <source>An example of how this can happen in the real world is explained below.</source>
          <target state="translated">A continuación se explica un ejemplo de cómo puede suceder esto en el mundo real.</target>
        </trans-unit>
        <trans-unit id="0978b0da32a1d538f6533aded9b037a5a632b0e0" translate="yes" xml:space="preserve">
          <source>An initializer can be provided for a &lt;code&gt;static&lt;/code&gt;&lt;code&gt;const&lt;/code&gt; data member of integral or enumeration type within the class definition; however, odr-use of this member will still require a namespace scope definition as described above. C++11 allows initialization inside the class for all &lt;code&gt;static const&lt;/code&gt; data members.</source>
          <target state="translated">Se puede proporcionar un inicializador para un miembro de datos &lt;code&gt;const&lt;/code&gt; &lt;code&gt;static&lt;/code&gt; de tipo integral o de enumeraci&amp;oacute;n dentro de la definici&amp;oacute;n de clase; sin embargo, odr-use de este miembro a&amp;uacute;n requerir&amp;aacute; una definici&amp;oacute;n del alcance del espacio de nombres como se describi&amp;oacute; anteriormente. C ++ 11 permite la inicializaci&amp;oacute;n dentro de la clase para todos &lt;code&gt;static const&lt;/code&gt; miembros de datos est&amp;aacute;ticos constantes .</target>
        </trans-unit>
        <trans-unit id="fe337499c7cf1304af8bc4b955a047cc2736dc7c" translate="yes" xml:space="preserve">
          <source>And a variation on example 2 involving &lt;code&gt;pkg-config&lt;/code&gt;:</source>
          <target state="translated">Y una variaci&amp;oacute;n en el ejemplo 2 que involucra &lt;code&gt;pkg-config&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="d551606414a99e264853eca34fd51b96854e0ecd" translate="yes" xml:space="preserve">
          <source>And then you go ahead and include the library in your own project.</source>
          <target state="translated">Y luego sigues adelante e incluyes la biblioteca en tu propio proyecto.</target>
        </trans-unit>
        <trans-unit id="b2245e86d8c2a2258df1e19537be1050df1ac011" translate="yes" xml:space="preserve">
          <source>As this is only a declaration, a &lt;strong&gt;single definition&lt;/strong&gt; is needed. A corresponding definition would be:</source>
          <target state="translated">Como esto es solo una declaraci&amp;oacute;n, se necesita una &lt;strong&gt;sola definici&amp;oacute;n&lt;/strong&gt; . Una definici&amp;oacute;n correspondiente ser&amp;iacute;a:</target>
        </trans-unit>
        <trans-unit id="b13d9a436d6efc6b48e4a9a36b25cc2355a5e4fc" translate="yes" xml:space="preserve">
          <source>At runtime, the system program loader will load a copy of &lt;code&gt;libz&lt;/code&gt; into the
same process as your program whenever it loads a copy of your program, to run it.</source>
          <target state="translated">En tiempo de ejecuci&amp;oacute;n, el cargador de programas del sistema cargar&amp;aacute; una copia de &lt;code&gt;libz&lt;/code&gt; en el mismo proceso que su programa cada vez que cargue una copia de su programa, para ejecutarlo.</target>
        </trans-unit>
        <trans-unit id="e5bb89d8a1b39ec5a184b94a75ab271ed2ff9d91" translate="yes" xml:space="preserve">
          <source>At runtime, whenever your program refers to something that is defined in
&lt;code&gt;libz&lt;/code&gt;, that reference uses the definition exported by the copy of &lt;code&gt;libz&lt;/code&gt; in
the same process.</source>
          <target state="translated">En tiempo de ejecuci&amp;oacute;n, siempre que su programa se refiera a algo definido en &lt;code&gt;libz&lt;/code&gt; , esa referencia utiliza la definici&amp;oacute;n exportada por la copia de &lt;code&gt;libz&lt;/code&gt; en el mismo proceso.</target>
        </trans-unit>
        <trans-unit id="8706fc513753f8a6ab494b836c139f955dd4de4b" translate="yes" xml:space="preserve">
          <source>Back in the day, it was normal for unix-like systems to link static and shared 
libraries by different rules. Static libraries in a linkage sequence were linked 
on the &lt;em&gt;as-needed&lt;/em&gt; basis explained in example 1, but shared libraries were linked unconditionally.</source>
          <target state="translated">En el pasado, era normal que los sistemas tipo Unix vincularan bibliotecas est&amp;aacute;ticas y compartidas por diferentes reglas. Las bibliotecas est&amp;aacute;ticas en una secuencia de enlace se vincularon &lt;em&gt;seg&amp;uacute;n fuera necesario seg&amp;uacute;n se&lt;/em&gt; explica en el ejemplo 1, pero las bibliotecas compartidas se vincularon incondicionalmente.</target>
        </trans-unit>
        <trans-unit id="4a50aaa9dbdd42f72fdba6a8715e83c2a0a34f3f" translate="yes" xml:space="preserve">
          <source>Be careful that the function you implement exactly matches the one you declared. For example, you may have mismatched cv-qualifiers:</source>
          <target state="translated">Ten cuidado de que la función que implementas coincida exactamente con la que declaraste.Por ejemplo,puede que hayas hecho coincidir erróneamente los calificadores de CV:</target>
        </trans-unit>
        <trans-unit id="380e27586685053a149a95794ec8ea13cd72b1ae" translate="yes" xml:space="preserve">
          <source>Because compiling and linking with a single command does not change the
order of the linkage sequence.</source>
          <target state="translated">Porque la compilación y el enlace con un solo comando no cambia el orden de la secuencia de enlace.</target>
        </trans-unit>
        <trans-unit id="791862e9f3cc350adeb09357b5234c80bae1d2ca" translate="yes" xml:space="preserve">
          <source>Befriending templates...</source>
          <target state="translated">Plantillas de amistad...</target>
        </trans-unit>
        <trans-unit id="0cadc8aa8215fefdf5f07d0ddc606c6dc435a0e8" translate="yes" xml:space="preserve">
          <source>Boom! You get a linker error and you have no idea why it's failing. The reason is that the common library uses different versions of the same include &lt;code&gt;common_math.h&lt;/code&gt; (I have made it obvious here in the example by including a different path, but it might not always be so obvious. Maybe the include path is different in the compiler settings).</source>
          <target state="translated">&amp;iexcl;Auge! Obtiene un error de vinculador y no tiene idea de por qu&amp;eacute; est&amp;aacute; fallando. La raz&amp;oacute;n es que la biblioteca com&amp;uacute;n usa diferentes versiones de la misma incluyen &lt;code&gt;common_math.h&lt;/code&gt; (lo he hecho obvio aqu&amp;iacute; en el ejemplo al incluir una ruta diferente, pero puede que no siempre sea tan obvio. Quiz&amp;aacute;s la ruta de inclusi&amp;oacute;n sea diferente en el configuraci&amp;oacute;n del compilador).</target>
        </trans-unit>
        <trans-unit id="6bcaff46ce13c984e730553cee278ae1c9aa1951" translate="yes" xml:space="preserve">
          <source>Building one library with &lt;code&gt;UNICODE&lt;/code&gt; defined and attempting to link it in a project where &lt;code&gt;UNICODE&lt;/code&gt; is not defined will result in linker errors since there will be a mismatch in the definition of &lt;code&gt;TCHAR&lt;/code&gt;; &lt;code&gt;char&lt;/code&gt; vs. &lt;code&gt;wchar_t&lt;/code&gt;.</source>
          <target state="translated">Construir una biblioteca con &lt;code&gt;UNICODE&lt;/code&gt; definido e intentar vincularlo en un proyecto donde &lt;code&gt;UNICODE&lt;/code&gt; no est&amp;aacute; definido dar&amp;aacute; como resultado errores de vinculador ya que habr&amp;aacute; una falta de coincidencia en la definici&amp;oacute;n de &lt;code&gt;TCHAR&lt;/code&gt; ; &lt;code&gt;char&lt;/code&gt; vs. &lt;code&gt;wchar_t&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2f699eafa666c4c4782584970203254bd4526ddb" translate="yes" xml:space="preserve">
          <source>But all the undefined &lt;em&gt;something&lt;/em&gt;s are declared in the header files you have
&lt;code&gt;#include&lt;/code&gt;d and are in fact defined in the libraries that you are linking.</source>
          <target state="translated">Pero todos los elementos indefinidos se declaran en los archivos de encabezado que tiene &lt;code&gt;#include&lt;/code&gt; d y, de hecho, se definen en las bibliotecas que est&amp;aacute; vinculando.</target>
        </trans-unit>
        <trans-unit id="04aa72c8afa3b9d7e1037f71bfc89ece6d7cb2d0" translate="yes" xml:space="preserve">
          <source>But when you try to link the program like:</source>
          <target state="translated">Pero cuando intentas vincular el programa como:</target>
        </trans-unit>
        <trans-unit id="e3bc3b59b5238ebf3734cce36298c84c3eecbc4c" translate="yes" xml:space="preserve">
          <source>By default, a linkage command generated by GCC, on your distro,
consumes the files in the linkage from left to right in
commandline sequence. When it finds that a file refers to &lt;em&gt;something&lt;/em&gt;
and does not contain a definition for it, to will search for a definition
in files further to the right. If it eventually finds a definition, the
reference is resolved. If any references remain unresolved at the end,
the linkage fails: the linker does not search backwards.</source>
          <target state="translated">Por defecto, un comando de enlace generado por GCC, en su distribuci&amp;oacute;n, consume los archivos en el enlace de izquierda a derecha en la secuencia de la l&amp;iacute;nea de comandos. Cuando encuentra que un archivo se refiere a &lt;em&gt;algo&lt;/em&gt; y no contiene una definici&amp;oacute;n para &amp;eacute;l, buscar&amp;aacute; una definici&amp;oacute;n en los archivos m&amp;aacute;s a la derecha. Si finalmente encuentra una definici&amp;oacute;n, la referencia se resuelve. Si alguna referencia permanece sin resolver al final, el enlace falla: el enlazador no busca hacia atr&amp;aacute;s.</target>
        </trans-unit>
        <trans-unit id="3eaf522e8926f987e615fe35f7fd9fdf75b655f7" translate="yes" xml:space="preserve">
          <source>Circular library dependency</source>
          <target state="translated">Dependencia de la biblioteca circular</target>
        </trans-unit>
        <trans-unit id="7241f66efa6b5c24d3508077d13fb171cabcc233" translate="yes" xml:space="preserve">
          <source>Class members:</source>
          <target state="translated">Miembros de la clase:</target>
        </trans-unit>
        <trans-unit id="aab52d092675fa0fe32cd101b3b21eff5dd78e87" translate="yes" xml:space="preserve">
          <source>Clean and rebuild</source>
          <target state="translated">Limpiar y reconstruir</target>
        </trans-unit>
        <trans-unit id="736a421be03fcda0d1784f7e1b58d5c6120e87ca" translate="yes" xml:space="preserve">
          <source>Clean the project (some IDEs have an option to do this, you can also
manually do it by deleting the object files)</source>
          <target state="translated">Limpiar el proyecto (algunos IDEs tienen una opción para hacerlo,también puedes hacerlo manualmente borrando los archivos de los objetos)</target>
        </trans-unit>
        <trans-unit id="3da20e0c7008360402f61cc375be71c5a21c62fe" translate="yes" xml:space="preserve">
          <source>Common causes include:</source>
          <target state="translated">Las causas comunes incluyen:</target>
        </trans-unit>
        <trans-unit id="1d20937e648b620d3e08501c7d2a0f7ca4d36b1e" translate="yes" xml:space="preserve">
          <source>Common error messages are &lt;code&gt;error LNK2001&lt;/code&gt;, &lt;code&gt;error LNK1120&lt;/code&gt;, &lt;code&gt;error LNK2019&lt;/code&gt; for &lt;strong&gt;Microsoft Visual Studio&lt;/strong&gt; and &lt;code&gt;undefined reference to&lt;/code&gt;&lt;em&gt;symbolName&lt;/em&gt; for &lt;strong&gt;GCC&lt;/strong&gt;.</source>
          <target state="translated">Los mensajes de error comunes son &lt;code&gt;error LNK2001&lt;/code&gt; , &lt;code&gt;error LNK1120&lt;/code&gt; , &lt;code&gt;error LNK2019&lt;/code&gt; para &lt;strong&gt;Microsoft Visual Studio&lt;/strong&gt; y &lt;code&gt;undefined reference to&lt;/code&gt; &lt;em&gt;symbolName&lt;/em&gt; para &lt;strong&gt;GCC&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="c3af93c7541eebebfdafcdd1eacb37d4febb317b" translate="yes" xml:space="preserve">
          <source>Common issues with class-type members</source>
          <target state="translated">Cuestiones comunes con los miembros de la clase</target>
        </trans-unit>
        <trans-unit id="7ad8095ab9f470817988dae41ebaff6c8b167424" translate="yes" xml:space="preserve">
          <source>Commonly, each translation unit will generate an object file that contains the definitions of the symbols defined in that translation unit. 
To use those symbols, you have to link against those object files.</source>
          <target state="translated">Comúnmente,cada unidad de traducción generará un archivo de objetos que contiene las definiciones de los símbolos definidos en esa unidad de traducción.Para usar esos símbolos,tienes que enlazar con esos archivos de objetos.</target>
        </trans-unit>
        <trans-unit id="e08db17708c9f5aa2791cb6be1dcc8a1c79a541b" translate="yes" xml:space="preserve">
          <source>Compile your program:</source>
          <target state="translated">Compila tu programa:</target>
        </trans-unit>
        <trans-unit id="db2b08b37977716ce6fab5afd8fb8ea79479ade1" translate="yes" xml:space="preserve">
          <source>Compile:</source>
          <target state="translated">Compile:</target>
        </trans-unit>
        <trans-unit id="679b3ff1ac1d63bde340799dcca67fa30e040c64" translate="yes" xml:space="preserve">
          <source>Compiler Time Error :</source>
          <target state="translated">Error de tiempo del compilador :</target>
        </trans-unit>
        <trans-unit id="c97768ea4c3948ab173981d2a5209cf05f227f68" translate="yes" xml:space="preserve">
          <source>Compiling a C++ program takes place in several steps, as specified by &lt;strong&gt;2.2&lt;/strong&gt;&lt;a href=&quot;https://stackoverflow.com/a/8834196&quot;&gt;(credits to Keith Thompson for the reference)&lt;/a&gt;:</source>
          <target state="translated">La compilaci&amp;oacute;n de un programa C ++ se lleva a cabo en varios pasos, como se especifica en &lt;strong&gt;2.2&lt;/strong&gt; &lt;a href=&quot;https://stackoverflow.com/a/8834196&quot;&gt;(cr&amp;eacute;ditos a Keith Thompson para la referencia)&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="c137971fb4bd72b08a0b43c3008b2cca54a397e2" translate="yes" xml:space="preserve">
          <source>Create the libraries:</source>
          <target state="translated">Crear las bibliotecas:</target>
        </trans-unit>
        <trans-unit id="7eaf2baed01488559bf5876cc3e60f17aa0d3628" translate="yes" xml:space="preserve">
          <source>DUMPBIN is your friend, if you are using Visual Studio. I'm sure other compilers have other similar tools.</source>
          <target state="translated">DUMPBIN es tu amigo,si usas Visual Studio.Estoy seguro de que otros compiladores tienen otras herramientas similares.</target>
        </trans-unit>
        <trans-unit id="719eb91a47aa71cdb65cf6c453c5e6fe62c3c90d" translate="yes" xml:space="preserve">
          <source>Data on what libraries are included in the link stage,</source>
          <target state="translated">Datos sobre qué bibliotecas están incluidas en la etapa de enlace,</target>
        </trans-unit>
        <trans-unit id="6773b3ac6ff9506cd52f19d8964c02fa4b90c9ba" translate="yes" xml:space="preserve">
          <source>Debugging the linker</source>
          <target state="translated">Depurar el enlazador</target>
        </trans-unit>
        <trans-unit id="849dcbe64c263df85f9b32a99f2eccecff6c214f" translate="yes" xml:space="preserve">
          <source>Declared and undefined variable or function.</source>
          <target state="translated">Variable o función declarada e indefinida.</target>
        </trans-unit>
        <trans-unit id="06460cd515ea02640e903aed7e4d4bb81068a27c" translate="yes" xml:space="preserve">
          <source>Declared but did not define a variable or function.</source>
          <target state="translated">Declaró pero no definió una variable o función.</target>
        </trans-unit>
        <trans-unit id="b75a543cd5362fb62c8422904fb2c049dcec7474" translate="yes" xml:space="preserve">
          <source>Declaring a destructor pure still requires you to define it (unlike a regular function):</source>
          <target state="translated">Declarar un destructor puro todavía requiere que lo definas (a diferencia de una función regular):</target>
        </trans-unit>
        <trans-unit id="567a15d424904d304f2d20a37eae9e3dd0be401d" translate="yes" xml:space="preserve">
          <source>Define all your symbol which you declare in your header files</source>
          <target state="translated">Defina todos los símbolos que declare en sus archivos de encabezamiento</target>
        </trans-unit>
        <trans-unit id="f5fce9ce350b9263578dfa2c8ab33e5e4582b42f" translate="yes" xml:space="preserve">
          <source>Definition does not exist</source>
          <target state="translated">La definición no existe</target>
        </trans-unit>
        <trans-unit id="1023459cba9e87450771da5a88dadcad9181c40b" translate="yes" xml:space="preserve">
          <source>Definition exists</source>
          <target state="translated">Existe una definición</target>
        </trans-unit>
        <trans-unit id="1f545375f3315c66c74f5b0635778013cb0153c5" translate="yes" xml:space="preserve">
          <source>Different versions of libraries</source>
          <target state="translated">Diferentes versiones de las bibliotecas</target>
        </trans-unit>
        <trans-unit id="0bee44622c3c31248d76530e7b83a53af7e4ae63" translate="yes" xml:space="preserve">
          <source>Do not forget to be consistent between the &quot;Release&quot; and &quot;Debug&quot; builds as well.</source>
          <target state="translated">No olvides ser consistente entre las construcciones de &quot;Liberación&quot; y &quot;Depuración&quot; también.</target>
        </trans-unit>
        <trans-unit id="62a321049a9684009d639a42bfcab348659b0468" translate="yes" xml:space="preserve">
          <source>Dump the exported symbols from the library into a text file.</source>
          <target state="translated">Volcar los símbolos exportados de la biblioteca en un archivo de texto.</target>
        </trans-unit>
        <trans-unit id="6ee565a8ad9a2e6032a63ac1db58b7bceef88bc8" translate="yes" xml:space="preserve">
          <source>EDIT 1: Rewrote first section to be easier to understand. Please comment below to let me know if something else needs to be fixed. Thanks!</source>
          <target state="translated">EDITORIAL 1:Reescribió la primera sección para que sea más fácil de entender.Por favor,comente a continuación para hacerme saber si hay algo más que necesite ser arreglado.Gracias.</target>
        </trans-unit>
        <trans-unit id="80d3f81150da8848a606c766ad627406abc917e5" translate="yes" xml:space="preserve">
          <source>Each instance of a backslash character (\) immediately followed by a new-line character is deleted, splicing physical source lines to
  form logical source lines. &lt;em&gt;[SNIP]&lt;/em&gt;</source>
          <target state="translated">Cada instancia de un car&amp;aacute;cter de barra diagonal inversa (\) seguida inmediatamente por un car&amp;aacute;cter de nueva l&amp;iacute;nea se elimina, empalmando las l&amp;iacute;neas de origen f&amp;iacute;sicas para formar l&amp;iacute;neas de origen l&amp;oacute;gicas. &lt;em&gt;[RECORTE]&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8873c9e0ad822c5ad29c877287ca38e9d0fb8223" translate="yes" xml:space="preserve">
          <source>Each source character set member in a character literal or a string literal, as well as each escape sequence and universal-character-name
  in a character literal or a non-raw string literal, is converted to
  the corresponding member of the execution character set; &lt;em&gt;[SNIP]&lt;/em&gt;</source>
          <target state="translated">Cada miembro del conjunto de caracteres de origen en un literal de caracteres o un literal de cadena, as&amp;iacute; como cada secuencia de escape y nombre de car&amp;aacute;cter universal en un literal de caracteres o un literal de cadena no sin formato, se convierte en el miembro correspondiente del conjunto de caracteres de ejecuci&amp;oacute;n; &lt;em&gt;[RECORTE]&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="dd08fa75ce4c1bea641e5c3ae90f422742fd49a5" translate="yes" xml:space="preserve">
          <source>Equivalently, instead of being defined in a C program, the function (or variable) &lt;code&gt;void foo()&lt;/code&gt; was defined in C++ but with C linkage:</source>
          <target state="translated">De manera equivalente, en lugar de definirse en un programa en C, la funci&amp;oacute;n (o variable) &lt;code&gt;void foo()&lt;/code&gt; se defini&amp;oacute; en C ++ pero con enlace C:</target>
        </trans-unit>
        <trans-unit id="50e31b9308416dd3a4f92b2300aa9833c975e02b" translate="yes" xml:space="preserve">
          <source>Even though this is a pretty old questions with multiple accepted answers, I'd like to share how to resolve an &lt;strong&gt;obscure&lt;/strong&gt; &quot;undefined reference to&quot; error.</source>
          <target state="translated">Aunque esta es una pregunta bastante antigua con m&amp;uacute;ltiples respuestas aceptadas, me gustar&amp;iacute;a compartir c&amp;oacute;mo resolver un &lt;strong&gt;oscuro&lt;/strong&gt; error de &quot;referencia indefinida a&quot;.</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="0f313c64cf7c57de167dfc0b70285d2f1097cf2a" translate="yes" xml:space="preserve">
          <source>Examples are in C. They could equally well be C++</source>
          <target state="translated">Los ejemplos están en C.Podrían ser igualmente C++</target>
        </trans-unit>
        <trans-unit id="6c8eeaf8a4d91827c91eda47c067002b02303f4f" translate="yes" xml:space="preserve">
          <source>Failure to link against appropriate libraries/object files or compile implementation files</source>
          <target state="translated">No se enlaza con los archivos de bibliotecas-objetos apropiados o no se compilan los archivos de implementación</target>
        </trans-unit>
        <trans-unit id="c24bada60625ab3c77ffebca4ef956b5b8222f43" translate="yes" xml:space="preserve">
          <source>First, &lt;strong&gt;example 1&lt;/strong&gt;, with static library &lt;code&gt;my_lib.a&lt;/code&gt;</source>
          <target state="translated">Primero, &lt;strong&gt;ejemplo 1&lt;/strong&gt; , con la biblioteca est&amp;aacute;tica &lt;code&gt;my_lib.a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6c8a30a094da8c776a823c101decae831165f64e" translate="yes" xml:space="preserve">
          <source>For &lt;strong&gt;XCode&lt;/strong&gt;:  Add the User Header Search Paths -&amp;gt; add the Library Search Path -&amp;gt; drag and drop the actual library reference into the project folder.</source>
          <target state="translated">Para &lt;strong&gt;XCode&lt;/strong&gt; : agregue las rutas de b&amp;uacute;squeda de encabezado de usuario -&amp;gt; agregue la ruta de b&amp;uacute;squeda de biblioteca -&amp;gt; arrastre y suelte la referencia de biblioteca real en la carpeta del proyecto.</target>
        </trans-unit>
        <trans-unit id="ba1b34dc3bbed11c2c9a66d05612d54f9428db05" translate="yes" xml:space="preserve">
          <source>For MSVC, &lt;code&gt;/VERBOSE&lt;/code&gt; (in particular &lt;code&gt;/VERBOSE:LIB&lt;/code&gt;) is added to the link command line.</source>
          <target state="translated">Para MSVC, &lt;code&gt;/VERBOSE&lt;/code&gt; (en particular &lt;code&gt;/VERBOSE:LIB&lt;/code&gt; ) se agrega a la l&amp;iacute;nea de comando de enlace.</target>
        </trans-unit>
        <trans-unit id="0ac9cca66a7ce03b39143760b921f502a3b2b9ee" translate="yes" xml:space="preserve">
          <source>For each file with extension .cpp is generated an object file .o and also Visual Studio writes the output in a file named &lt;em&gt;ProjectName.Cpp.Clean.txt&lt;/em&gt; which contains all object files that must be processed by the linker.</source>
          <target state="translated">Para cada archivo con extensi&amp;oacute;n .cpp se genera un archivo de objeto .o tambi&amp;eacute;n Visual Studio escribe la salida en un archivo llamado &lt;em&gt;ProjectName.Cpp.Clean.txt&lt;/em&gt; que contiene todos los archivos de objetos que el vinculador debe procesar.</target>
        </trans-unit>
        <trans-unit id="ce276678b262778ed8f87dcee2e92b419fef8499" translate="yes" xml:space="preserve">
          <source>For example we have some code</source>
          <target state="translated">Por ejemplo,tenemos un código</target>
        </trans-unit>
        <trans-unit id="2fa6951fcb69e2353b69b4e4f3615ca4d9cc266b" translate="yes" xml:space="preserve">
          <source>For example, if we have a function called foo defined in a.cpp:</source>
          <target state="translated">Por ejemplo,si tenemos una función llamada foo definida en a.cpp:</target>
        </trans-unit>
        <trans-unit id="5c105ae3962497b6a56958a1bf2d2d4a31d03dae" translate="yes" xml:space="preserve">
          <source>For example, the following would generate an error:</source>
          <target state="translated">Por ejemplo,lo siguiente generaría un error:</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="f2fcc968e71dd0b01c575698c3cd328beb1f8547" translate="yes" xml:space="preserve">
          <source>For further explanation and another possible solution (explicit instantiation) see &lt;a href=&quot;https://stackoverflow.com/questions/495021&quot;&gt;this question and answer&lt;/a&gt;.</source>
          <target state="translated">Para m&amp;aacute;s explicaciones y otra posible soluci&amp;oacute;n (instanciaci&amp;oacute;n expl&amp;iacute;cita) vea &lt;a href=&quot;https://stackoverflow.com/questions/495021&quot;&gt;esta pregunta y respuesta&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="6d26f3d31b9f80c9041094ecd1bfa2cf4a14f452" translate="yes" xml:space="preserve">
          <source>For gcc and clang; you would typically add &lt;code&gt;-v -Wl,--verbose&lt;/code&gt; or &lt;code&gt;-v -Wl,-v&lt;/code&gt; to the command line. More details can be found here;</source>
          <target state="translated">Para gcc y clang; normalmente agregar&amp;iacute;a &lt;code&gt;-v -Wl,--verbose&lt;/code&gt; o &lt;code&gt;-v -Wl,-v&lt;/code&gt; a la l&amp;iacute;nea de comando. M&amp;aacute;s detalles se pueden encontrar aqu&amp;iacute;;</target>
        </trans-unit>
        <trans-unit id="44635ad90325eff295e74bdeb91fbd8d078fabb1" translate="yes" xml:space="preserve">
          <source>For people coming from C it might be a surprise that in C++ global &lt;code&gt;const&lt;/code&gt;variables have internal (or static) linkage. In C this was not the case, as all global variables are implicitly &lt;code&gt;extern&lt;/code&gt; (i.e. when the &lt;code&gt;static&lt;/code&gt; keyword is missing).</source>
          <target state="translated">Para las personas que vienen de C, puede ser una sorpresa que en C ++ las variables globales &lt;code&gt;const&lt;/code&gt; tengan un enlace interno (o est&amp;aacute;tico). En C este no fue el caso, ya que todas las variables globales son impl&amp;iacute;citamente &lt;code&gt;extern&lt;/code&gt; as (es decir, cuando falta &lt;code&gt;static&lt;/code&gt; palabra clave est&amp;aacute;tica ).</target>
        </trans-unit>
        <trans-unit id="02ff37d17fe54fa59b6bdb89b9051f68c4f95602" translate="yes" xml:space="preserve">
          <source>For this to work, declare &lt;code&gt;X::foo()&lt;/code&gt; as pure:</source>
          <target state="translated">Para que esto funcione, declare &lt;code&gt;X::foo()&lt;/code&gt; como puro:</target>
        </trans-unit>
        <trans-unit id="d3b72bbcef1b0d4a5a3e0732613861aff970d936" translate="yes" xml:space="preserve">
          <source>Function return type, parameter number and types, and calling convention do not all exactly agree.</source>
          <target state="translated">El tipo de retorno de la función,el número y los tipos de parámetros y la convención de llamada no coinciden exactamente.</target>
        </trans-unit>
        <trans-unit id="adc354e3ed859611982bdeb24ea70c92b2b599b8" translate="yes" xml:space="preserve">
          <source>Function/variable declared as class member, defined as global (or vice versa).</source>
          <target state="translated">Variante funcional declarada como miembro de la clase,definida como global (o viceversa).</target>
        </trans-unit>
        <trans-unit id="c9e1736897f86f0f0ebd9367dfa1e73b18c72dbc" translate="yes" xml:space="preserve">
          <source>Function/variable declared in one namespace, defined in another.</source>
          <target state="translated">Variables funcionales declaradas en un espacio de nombres,definidas en otro.</target>
        </trans-unit>
        <trans-unit id="47885f9296315b51d23680105388ad37c4f8daa9" translate="yes" xml:space="preserve">
          <source>Further elaboration with an example</source>
          <target state="translated">Más detalles con un ejemplo</target>
        </trans-unit>
        <trans-unit id="1109ab69f5f30dff37d3dd93730a44c1ec557703" translate="yes" xml:space="preserve">
          <source>Given the code snippet of a template type with a friend operator (or function);</source>
          <target state="translated">Dado el fragmento de código de un tipo de plantilla con un operador amigo (o función);</target>
        </trans-unit>
        <trans-unit id="87a3d534ea37016d34d8be0559ae5f64128cdd0b" translate="yes" xml:space="preserve">
          <source>Here are &lt;a href=&quot;https://stackoverflow.com/questions/24715864/problems-importing-libraries-to-my-c-project-how-to-fix-this/24715865#24715865&quot;&gt;case1&lt;/a&gt; and &lt;a href=&quot;https://stackoverflow.com/questions/5259714/undefined-reference-to-winmain16&quot;&gt;case2&lt;/a&gt; handled in more detail from a &lt;em&gt;real world&lt;/em&gt; problem.</source>
          <target state="translated">Aqu&amp;iacute; se &lt;a href=&quot;https://stackoverflow.com/questions/5259714/undefined-reference-to-winmain16&quot;&gt;detallan el caso1&lt;/a&gt; y el caso2 con m&amp;aacute;s detalle de un problema del &lt;em&gt;mundo real&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="b457236fd45d4cf88f436ca559e82a847ed891f5" translate="yes" xml:space="preserve">
          <source>How do linkers work? The linker matches a function declaration (declared in the header) with its definition (in the shared library) by comparing their signatures. You can get a linker error if the linker doesn't find a function definition that matches perfectly.</source>
          <target state="translated">¿Cómo funcionan los enlazadores? El enlazador hace coincidir una declaración de función (declarada en el encabezamiento)con su definición (en la biblioteca compartida)comparando sus firmas.Puede obtener un error del enlazador si éste no encuentra una definición de función que coincida perfectamente.</target>
        </trans-unit>
        <trans-unit id="a4bca897be232f23b6899495a9467715ee2ea072" translate="yes" xml:space="preserve">
          <source>I can reproduce the problem in example 1, but not in example 2</source>
          <target state="translated">Puedo reproducir el problema en el ejemplo 1,pero no en el ejemplo 2</target>
        </trans-unit>
        <trans-unit id="f16eb78437de212d219271bcd70b1ba35516fa2e" translate="yes" xml:space="preserve">
          <source>I edited the package (in the &lt;code&gt;packages&lt;/code&gt; folder inside the solution's directory) by finding &lt;code&gt;packagename\build\native\packagename.targets&lt;/code&gt; and inside that file, copying all the &lt;code&gt;v110&lt;/code&gt; sections.  I changed the &lt;code&gt;v110&lt;/code&gt; to &lt;code&gt;v120&lt;/code&gt; in &lt;strong&gt;the condition fields only&lt;/strong&gt; being very careful to leave the filename paths all as &lt;code&gt;v110&lt;/code&gt;.  This simply allowed Visual Studio 2013 to link to the libraries for 2012, and in this case, it worked.</source>
          <target state="translated">Edit&amp;eacute; el paquete (en la carpeta de &lt;code&gt;packages&lt;/code&gt; dentro del directorio de la soluci&amp;oacute;n) buscando &lt;code&gt;packagename\build\native\packagename.targets&lt;/code&gt; y dentro de ese archivo, copiando todas las secciones &lt;code&gt;v110&lt;/code&gt; . Cambi&amp;eacute; el &lt;code&gt;v110&lt;/code&gt; a &lt;code&gt;v120&lt;/code&gt; en &lt;strong&gt;los campos de condici&amp;oacute;n solo&lt;/strong&gt; teniendo mucho cuidado de dejar todas las rutas de nombre de archivo como &lt;code&gt;v110&lt;/code&gt; . Esto simplemente permiti&amp;oacute; que Visual Studio 2013 se vincule a las bibliotecas para 2012 y, en este caso, funcion&amp;oacute;.</target>
        </trans-unit>
        <trans-unit id="e185b3c33f0b4245c7351066033029dca1ef7148" translate="yes" xml:space="preserve">
          <source>I had the same issue. Say i have projects MyProject and TestProject. I had effectively linked the lib file for MyProject to the TestProject. However, this lib file was produced as the DLL for the MyProject was built. Also, I did not contain source code for all methods in the MyProject, but only access to the DLL's entry points.</source>
          <target state="translated">Yo tuve el mismo problema.Digamos que tengo los proyectos MyProject y TestProject.Había vinculado efectivamente el archivo lib para MiProyecto con el TestProyecto.Sin embargo,este archivo lib se produjo cuando se construyó el DLL para el MyProject.Además,no contenía el código fuente de todos los métodos del MyProject,sino sólo el acceso a los puntos de entrada de la DLL.</target>
        </trans-unit>
        <trans-unit id="0436bfc3fe0e52928141662af3daf087596cf26f" translate="yes" xml:space="preserve">
          <source>I have two projects: &lt;code&gt;graphics.lib&lt;/code&gt; and &lt;code&gt;main.exe&lt;/code&gt;. Both projects depend on &lt;code&gt;common_math.h&lt;/code&gt;. Suppose the library exports the following function:</source>
          <target state="translated">Tengo dos proyectos: &lt;code&gt;graphics.lib&lt;/code&gt; y &lt;code&gt;main.exe&lt;/code&gt; . Ambos proyectos dependen de &lt;code&gt;common_math.h&lt;/code&gt; . Supongamos que la biblioteca exporta la siguiente funci&amp;oacute;n:</target>
        </trans-unit>
        <trans-unit id="956a2ac958701d2f4ab6fa4fc484437f762915e0" translate="yes" xml:space="preserve">
          <source>I just had this problem trying to link libpng with Visual Studio 2013.  The problem is that the package file only had libraries for Visual Studio 2010 and 2012.</source>
          <target state="translated">Acabo de tener un problema al intentar vincular la liberación con Visual Studio 2013.El problema es que el archivo del paquete sólo tenía bibliotecas para Visual Studio 2010 y 2012.</target>
        </trans-unit>
        <trans-unit id="e9b8b4b047b3721fecc60f4fca5ece4ff41298b6" translate="yes" xml:space="preserve">
          <source>I recently had this problem, and it turned out &lt;a href=&quot;https://stackoverflow.com/questions/27748699/unresolved-reference-to-constructor-which-is-defined/27748920#27748920&quot;&gt;it was a bug in Visual Studio Express 2013&lt;/a&gt;. I had to remove a source file from the project and re-add it to overcome the bug.</source>
          <target state="translated">Recientemente tuve este problema, y ​​result&amp;oacute; &lt;a href=&quot;https://stackoverflow.com/questions/27748699/unresolved-reference-to-constructor-which-is-defined/27748920#27748920&quot;&gt;que era un error en Visual Studio Express 2013&lt;/a&gt; . Tuve que eliminar un archivo fuente del proyecto y volver a agregarlo para superar el error.</target>
        </trans-unit>
        <trans-unit id="1f2758b006cc08918b9f02973af12be1faec02a9" translate="yes" xml:space="preserve">
          <source>I was recently able to get rid of an unresolved external error in Visual Studio 2012 just by recompiling the offending file. When I re-built, the error went away.</source>
          <target state="translated">Recientemente pude deshacerme de un error externo no resuelto en Visual Studio 2012 sólo recompilando el archivo ofensivo.Cuando lo reconstruí,el error desapareció.</target>
        </trans-unit>
        <trans-unit id="3655c386da677b651bbf58700cb3b35ab01cf79c" translate="yes" xml:space="preserve">
          <source>I was using an alias to refer to &lt;code&gt;std::filesystem::path&lt;/code&gt;: filesystem is in the standard library since C++17 but my program needed to &lt;strong&gt;also compile in C++14&lt;/strong&gt; so I decided to use a variable alias:</source>
          <target state="translated">Estaba usando un alias para referirme a &lt;code&gt;std::filesystem::path&lt;/code&gt; : el sistema de archivos est&amp;aacute; en la biblioteca est&amp;aacute;ndar desde C ++ 17 pero mi programa &lt;strong&gt;tambi&amp;eacute;n&lt;/strong&gt; necesitaba &lt;strong&gt;compilar en C ++ 14,&lt;/strong&gt; as&amp;iacute; que decid&amp;iacute; usar un alias variable:</target>
        </trans-unit>
        <trans-unit id="5173770afade73bcecf7a320d6a1ae32ba13af7d" translate="yes" xml:space="preserve">
          <source>I'll try to explain what is an &quot;undefined reference/unresolved external symbol&quot;.</source>
          <target state="translated">Intentaré explicar lo que es un &quot;símbolo externo no definido de referencia no resuelto&quot;.</target>
        </trans-unit>
        <trans-unit id="a04cfe5805e064fc6a684cbba78e89796fa1eff1" translate="yes" xml:space="preserve">
          <source>I've rejected some lines from output, because they do not matter</source>
          <target state="translated">He rechazado algunas líneas de salida,porque no importan</target>
        </trans-unit>
        <trans-unit id="2bb7febe7f23a580135ec4f7b408f003af4cb53e" translate="yes" xml:space="preserve">
          <source>If .cpp files depends on   additional .h files  in order to find symbols
that may or may not be defined in the file .cpp</source>
          <target state="translated">Si los archivos .cpp dependen de archivos .h adicionales para encontrar símbolos que pueden o no estar definidos en el archivo .cpp</target>
        </trans-unit>
        <trans-unit id="df67f3ef9d0be7171f81833f9b68966903db7af6" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;libfoo&lt;/code&gt; depends on &lt;code&gt;libbar&lt;/code&gt;, then your linkage correctly puts &lt;code&gt;libfoo&lt;/code&gt; before &lt;code&gt;libbar&lt;/code&gt;.</source>
          <target state="translated">Si &lt;code&gt;libfoo&lt;/code&gt; depende de &lt;code&gt;libbar&lt;/code&gt; , entonces su enlace coloca correctamente &lt;code&gt;libfoo&lt;/code&gt; antes de &lt;code&gt;libbar&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="461d3e959eb928d5e96fcebb9ba3f3fe9ab2bb40" translate="yes" xml:space="preserve">
          <source>If I just do:</source>
          <target state="translated">Si lo hago:</target>
        </trans-unit>
        <trans-unit id="da08d2f992c3ccba47f676d81d16d167ac1f33a4" translate="yes" xml:space="preserve">
          <source>If Linker finds an external symbol in one static library he includes the symbol in the output of the project.However, if the library is shared( dynamic ) he doesn't include the code ( symbols ) in output, but  &lt;em&gt;Run-Time&lt;/em&gt; crashes may occur</source>
          <target state="translated">Si Linker encuentra un s&amp;iacute;mbolo externo en una biblioteca est&amp;aacute;tica, incluye el s&amp;iacute;mbolo en la salida del proyecto. Sin embargo, si la biblioteca es compartida (din&amp;aacute;mica) no incluye el c&amp;oacute;digo (s&amp;iacute;mbolos) en la salida, pero &lt;em&gt;los&lt;/em&gt; bloqueos en &lt;em&gt;tiempo de ejecuci&amp;oacute;n&lt;/em&gt; pueden ocurrir</target>
        </trans-unit>
        <trans-unit id="980c254b69ed02be4226999c6e10d518c5a452c3" translate="yes" xml:space="preserve">
          <source>If an entire library is included in a header file (and was compiled as C code); the include will need to be as follows;</source>
          <target state="translated">Si se incluye toda una biblioteca en un archivo de encabezamiento (y se compiló como código C);la inclusión deberá ser como sigue;</target>
        </trans-unit>
        <trans-unit id="f26256c9ecf88ebe6b32a09b8f863a10b618c2ed" translate="yes" xml:space="preserve">
          <source>If exists one .cpp file in which the compiler could not find one symbol, a &lt;strong&gt;compiler time error&lt;/strong&gt; raises the message &lt;em&gt;Symbol x could not be found&lt;/em&gt;</source>
          <target state="translated">Si existe un archivo .cpp en el que el compilador no pudo encontrar un s&amp;iacute;mbolo, un &lt;strong&gt;error de tiempo del compilador&lt;/strong&gt; genera el mensaje &lt;em&gt;No se pudo encontrar&lt;/em&gt; el &lt;em&gt;s&amp;iacute;mbolo x&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b01078c7a78e15aafb190fba7f0e6960757acba2" translate="yes" xml:space="preserve">
          <source>If one symbol could not be found in object files he also is searched in Additional Libraries.For adding a new library to a project &lt;strong&gt;Configuration properties&lt;/strong&gt; -&amp;gt; &lt;strong&gt;VC++ Directories&lt;/strong&gt;  -&amp;gt; &lt;strong&gt;Library Directories&lt;/strong&gt; and here you specified additional folder for searching libraries and &lt;strong&gt;Configuration properties&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Linker&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Input&lt;/strong&gt; for specifying the name of the library. 
-If the Linker could not find the symbol which you write in one .cpp he raises a &lt;strong&gt;linker time error&lt;/strong&gt; which may sound like 
&lt;code&gt;error LNK2001: unresolved external symbol &quot;void __cdecl foo(void)&quot; (?foo@@YAXXZ)&lt;/code&gt;</source>
          <target state="translated">Si no se puede encontrar un s&amp;iacute;mbolo en los archivos de objetos, tambi&amp;eacute;n se busca en Bibliotecas adicionales. Para agregar una nueva biblioteca a un proyecto &lt;strong&gt;Propiedades de configuraci&amp;oacute;n&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Directorios VC ++&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Directorios de biblioteca&lt;/strong&gt; y aqu&amp;iacute; especific&amp;oacute; una carpeta adicional para buscar bibliotecas y &lt;strong&gt;propiedades de configuraci&amp;oacute;n&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Linker&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Entrada&lt;/strong&gt; para especificar el nombre de la biblioteca. -Si el Linker no puede encontrar el s&amp;iacute;mbolo que escribe en un .cpp, genera un &lt;strong&gt;error de tiempo del linker&lt;/strong&gt; que puede sonar como &lt;code&gt;error LNK2001: unresolved external symbol &quot;void __cdecl foo(void)&quot; (?foo@@YAXXZ)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="499b77dbfc0604ee9598e32b2d28291c11fb0b8e" translate="yes" xml:space="preserve">
          <source>If that is true, then the linker will &lt;em&gt;not&lt;/em&gt; copy any chunks out of &lt;code&gt;libz&lt;/code&gt; and
add them to your program; instead, it will just doctor the code of your program 
so that:-</source>
          <target state="translated">Si eso es cierto, entonces el enlazador &lt;em&gt;no&lt;/em&gt; copiar&amp;aacute; ning&amp;uacute;n fragmento de &lt;code&gt;libz&lt;/code&gt; y lo agregar&amp;aacute; a su programa; en su lugar, solo buscar&amp;aacute; el c&amp;oacute;digo de su programa para que:</target>
        </trans-unit>
        <trans-unit id="2c00c20b5f535cd9bc44be19371d9b66f3b65283" translate="yes" xml:space="preserve">
          <source>If that is true, then the linker will extract a copy of &lt;code&gt;my_lib.o&lt;/code&gt; from the library and
add it to your program. Then, your program contains a definition for &lt;code&gt;hw&lt;/code&gt;, so
its references to &lt;code&gt;hw&lt;/code&gt; are &lt;em&gt;resolved&lt;/em&gt;.</source>
          <target state="translated">Si eso es cierto, entonces el enlazador extraer&amp;aacute; una copia de &lt;code&gt;my_lib.o&lt;/code&gt; de la biblioteca y la agregar&amp;aacute; a su programa. Luego, su programa contiene una definici&amp;oacute;n para &lt;code&gt;hw&lt;/code&gt; , por lo que se &lt;em&gt;resuelven&lt;/em&gt; sus referencias a &lt;code&gt;hw&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="38c0025e9bec005d4513bd13d86176f0298b0557" translate="yes" xml:space="preserve">
          <source>If the implementation is outside the class definition, but in a header, the methods have to be marked as &lt;code&gt;inline&lt;/code&gt; to prevent a multiple definition.</source>
          <target state="translated">Si la implementaci&amp;oacute;n est&amp;aacute; fuera de la definici&amp;oacute;n de clase, pero en un encabezado, los m&amp;eacute;todos deben marcarse como en &lt;code&gt;inline&lt;/code&gt; para evitar una definici&amp;oacute;n m&amp;uacute;ltiple.</target>
        </trans-unit>
        <trans-unit id="75447576423c30e2c34a784049e8ce92fc59db32" translate="yes" xml:space="preserve">
          <source>If we want to call some functions in a library, but the import library is not added into the additional dependency list (set from: &lt;code&gt;Project | Properties | Configuration Properties | Linker | Input | Additional Dependency&lt;/code&gt;) of your project setting. Now the linker will report a LNK2019 since the definition does not exist in current searching scope.</source>
          <target state="translated">Si queremos invocar algunas funciones en una biblioteca, pero la biblioteca de importaci&amp;oacute;n no se agrega a la lista de dependencias adicional (establecida desde: &lt;code&gt;Project | Properties | Configuration Properties | Linker | Input | Additional Dependency&lt;/code&gt; ) de la configuraci&amp;oacute;n de su proyecto. Ahora el enlazador reportar&amp;aacute; un LNK2019 ya que la definici&amp;oacute;n no existe en el alcance de b&amp;uacute;squeda actual.</target>
        </trans-unit>
        <trans-unit id="fb9269e2b18055a742c1557e6ab1048d1318a42e" translate="yes" xml:space="preserve">
          <source>If you get linker errors about undefined references to symbols that involve types in the std::__cxx11 namespace or the tag [abi:cxx11] then it probably indicates that you are trying to link together object files that were compiled with different values for the _GLIBCXX_USE_CXX11_ABI macro. This commonly happens when linking to a third-party library that was compiled with an older version of GCC. If the third-party library cannot be rebuilt with the new ABI then you will need to recompile your code with the old ABI.</source>
          <target state="translated">Si se obtienen errores del enlazador sobre referencias indefinidas a símbolos que implican tipos en el espacio de nombres std::__cxx11 o la etiqueta [abi:cxx11]entonces probablemente indica que se está tratando de enlazar archivos de objetos que fueron compilados con valores diferentes para la macro _GLIBCXX_USE_CXX11_ABI.Esto ocurre comúnmente cuando se enlaza a una biblioteca de terceros que fue compilada con una versión anterior de GCC.Si la biblioteca de terceros no puede ser reconstruida con la nueva ABI,entonces tendrá que recompilar su código con la antigua ABI.</target>
        </trans-unit>
        <trans-unit id="f035da38c9a7e86389d0510b74c92ffc7c0c115a" translate="yes" xml:space="preserve">
          <source>If you're using Microsoft Visual Studio, you'll see that projects generate &lt;code&gt;.lib&lt;/code&gt; files. These contain a table of exported symbols, and a table of imported symbols. The imported symbols are resolved against the libraries you link against, and the exported symbols are provided for the libraries that use that &lt;code&gt;.lib&lt;/code&gt; (if any).</source>
          <target state="translated">Si est&amp;aacute; utilizando Microsoft Visual Studio, ver&amp;aacute; que los proyectos generan archivos &lt;code&gt;.lib&lt;/code&gt; . Contienen una tabla de s&amp;iacute;mbolos exportados y una tabla de s&amp;iacute;mbolos importados. Los s&amp;iacute;mbolos importados se resuelven en las bibliotecas con las que se vincula y los s&amp;iacute;mbolos exportados se proporcionan para las bibliotecas que usan ese &lt;code&gt;.lib&lt;/code&gt; (si corresponde).</target>
        </trans-unit>
        <trans-unit id="8833aea382a302f646216649f9921b661839e34c" translate="yes" xml:space="preserve">
          <source>If your IDE supports &lt;em&gt;Plain Console Projects&lt;/em&gt; you might want to choose this project type, instead of a windows application project.</source>
          <target state="translated">Si su IDE admite &lt;em&gt;proyectos de consola simple&lt;/em&gt; , puede elegir este tipo de proyecto, en lugar de un proyecto de aplicaci&amp;oacute;n de Windows.</target>
        </trans-unit>
        <trans-unit id="3f237fb8dc4cacf36f11d31545ebe99a25aef03b" translate="yes" xml:space="preserve">
          <source>In Windows programming, the tell-tale sign that you did not link a necessary library is that the name of the unresolved symbol begins with &lt;code&gt;__imp_&lt;/code&gt;. Look up the name of the function in the documentation, and it should say which library you need to use. For example, MSDN puts the information in a box at the bottom of each function in a section called &quot;Library&quot;.</source>
          <target state="translated">En la programaci&amp;oacute;n de Windows, el signo revelador de que no vincul&amp;oacute; una biblioteca necesaria es que el nombre del s&amp;iacute;mbolo no resuelto comienza con &lt;code&gt;__imp_&lt;/code&gt; . Busque el nombre de la funci&amp;oacute;n en la documentaci&amp;oacute;n, y deber&amp;iacute;a decir qu&amp;eacute; biblioteca necesita usar. Por ejemplo, MSDN coloca la informaci&amp;oacute;n en un cuadro en la parte inferior de cada funci&amp;oacute;n en una secci&amp;oacute;n llamada &quot;Biblioteca&quot;.</target>
        </trans-unit>
        <trans-unit id="66430e667fc7f840b097b706996793b9736a8e56" translate="yes" xml:space="preserve">
          <source>In addition to the library path including the directory of the library, this should be the full name of the library.</source>
          <target state="translated">Además de la ruta de la biblioteca incluyendo el directorio de la misma,este debe ser el nombre completo de la biblioteca.</target>
        </trans-unit>
        <trans-unit id="10bf6a64e5446398af8a3ba19c87d193fc7bdd0c" translate="yes" xml:space="preserve">
          <source>In b.cpp we want to call function foo, so we add</source>
          <target state="translated">En b.cpp queremos llamar a la función foo,así que añadimos</target>
        </trans-unit>
        <trans-unit id="e04d65d1151fc1eecd729107e8faa2882c68cf4a" translate="yes" xml:space="preserve">
          <source>In general the IDE or build will include some form of &quot;clean&quot; function, but this may not be correctly configured (e.g. in a manual makefile) or may fail (e.g. the intermediate or resultant binaries are read-only).</source>
          <target state="translated">En general,el IDE o la construcción incluirá algún tipo de función &quot;limpia&quot;,pero es posible que no esté correctamente configurada (por ejemplo,en un makefile manual)o que falle (por ejemplo,los binarios intermedios o resultantes son de sólo lectura).</target>
        </trans-unit>
        <trans-unit id="6703e5641bd382c96b9757b2f2d5f1a0d78b8aef" translate="yes" xml:space="preserve">
          <source>In that case, it means that the available symbols are for a different architecture than the one you are compiling for.</source>
          <target state="translated">En ese caso,significa que los símbolos disponibles son para una arquitectura diferente a la que está compilando.</target>
        </trans-unit>
        <trans-unit id="dc33cdb4c80f7ba7f9c92526e532ade7bc8fcd31" translate="yes" xml:space="preserve">
          <source>In the sequence of object files and libraries you want to link to make your
program, you are placing the libraries before the object files that refer to
them. You need to place the libraries &lt;em&gt;after&lt;/em&gt; the object files that refer
to them.</source>
          <target state="translated">En la secuencia de archivos de objetos y bibliotecas que desea vincular para hacer su programa, est&amp;aacute; colocando las bibliotecas antes de los archivos de objetos que se refieren a ellas. Debe colocar las bibliotecas &lt;em&gt;despu&amp;eacute;s de&lt;/em&gt; los archivos de objeto que se refieren a ellas.</target>
        </trans-unit>
        <trans-unit id="b2551cda3851296856857b433cfe97a4cfb2b4c9" translate="yes" xml:space="preserve">
          <source>Inconsistent &lt;code&gt;UNICODE&lt;/code&gt; definitions</source>
          <target state="translated">Definiciones de &lt;code&gt;UNICODE&lt;/code&gt; inconsistentes</target>
        </trans-unit>
        <trans-unit id="6fe63eb632221a0ab5535bb76d4c287ae69ff6c4" translate="yes" xml:space="preserve">
          <source>Incorrectly importing/exporting methods/classes across modules/dll (compiler specific).</source>
          <target state="translated">Importar incorrectamente las clases de métodos de exportación a través de los módulosdll (específicos del compilador).</target>
        </trans-unit>
        <trans-unit id="dcc92bce0411701f86858935b384ecc04c852ca4" translate="yes" xml:space="preserve">
          <source>Incorrectly importing/exporting methods/classes across modules/dll. (MSVS specific)</source>
          <target state="translated">Importar incorrectamente las clases de métodos de exportación a través de los módulosdll.(MSVS específico)</target>
        </trans-unit>
        <trans-unit id="cb120259d25bd6e5201a19869cfd5a9742881496" translate="yes" xml:space="preserve">
          <source>Interdependent library order</source>
          <target state="translated">Orden de la biblioteca interdependiente</target>
        </trans-unit>
        <trans-unit id="503e384f0e4e309c11e3d62de8daa731f1a8d2b6" translate="yes" xml:space="preserve">
          <source>Is it possible to still get a linker error even though the declaration and the definition seem to match? Yes! They might look the same in source code, but it really depends on what the compiler sees. Essentially you could end up with a situation like this:</source>
          <target state="translated">¿Es posible obtener un error de enlace aunque la declaración y la definición parezcan coincidir? ¡Sí! Puede que se vean igual en el código fuente,pero realmente depende de lo que vea el compilador.Esencialmente podrías terminar con una situación como esta:</target>
        </trans-unit>
        <trans-unit id="771fa3988067ff8a58eabb454bbc75170f08c3d6" translate="yes" xml:space="preserve">
          <source>It can also happen that you forget to add the file to the compilation, in which case the object file won't be generated. In &lt;strong&gt;gcc&lt;/strong&gt; you'd add the files to the command line. In &lt;strong&gt;MSVS&lt;/strong&gt; adding the file to the project will make it compile it automatically (albeit files can, manually, be individually excluded from the build).</source>
          <target state="translated">Tambi&amp;eacute;n puede suceder que olvide agregar el archivo a la compilaci&amp;oacute;n, en cuyo caso no se generar&amp;aacute; el archivo objeto. En &lt;strong&gt;gcc&lt;/strong&gt; , agregar&amp;iacute;a los archivos a la l&amp;iacute;nea de comando. En &lt;strong&gt;MSVS,&lt;/strong&gt; agregar el archivo al proyecto har&amp;aacute; que lo compile autom&amp;aacute;ticamente (aunque los archivos pueden, de forma manual, excluirse individualmente de la compilaci&amp;oacute;n).</target>
        </trans-unit>
        <trans-unit id="fe2ed6691d966ca4bdd41bbcc54c815e1cd0e42a" translate="yes" xml:space="preserve">
          <source>It has happened because our local_var_name is static, i.e. it is not visible for other modules. 
Now more deeply. Get the translation phase output</source>
          <target state="translated">Ha sucedido porque nuestro nombre_var_local es estático,es decir,no es visible para otros módulos.Ahora más profundamente.Obtener la salida de la fase de traducción</target>
        </trans-unit>
        <trans-unit id="627cb145db504cc28647105b8ad1ef86f1340665" translate="yes" xml:space="preserve">
          <source>It is uneconomical at &lt;em&gt;runtime&lt;/em&gt;, because it can cause shared libraries to be
loaded along with a program even if doesn't need them.</source>
          <target state="translated">No es econ&amp;oacute;mico en &lt;em&gt;tiempo&lt;/em&gt; de &lt;em&gt;ejecuci&amp;oacute;n&lt;/em&gt; , porque puede hacer que las bibliotecas compartidas se carguen junto con un programa, incluso si no las necesita.</target>
        </trans-unit>
        <trans-unit id="13f85c801fb44532a6193ffc156ba3a1273c4b81" translate="yes" xml:space="preserve">
          <source>LLVM &lt;a href=&quot;http://llvm.org/releases/3.6.2/docs/CommandGuide/llvm-link.html#cmdoption-v&quot;&gt;linker page&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://llvm.org/releases/3.6.2/docs/CommandGuide/llvm-link.html#cmdoption-v&quot;&gt;P&amp;aacute;gina de enlace de&lt;/a&gt; LLVM.</target>
        </trans-unit>
        <trans-unit id="f8b4459da7b6461b4c2299ccc79bca1d6aa1bc0f" translate="yes" xml:space="preserve">
          <source>Lastly, the &lt;code&gt;pkg-config&lt;/code&gt; variation of example 2 has a now obvious explanation.
After shell-expansion:</source>
          <target state="translated">Por &amp;uacute;ltimo, la variaci&amp;oacute;n &lt;code&gt;pkg-config&lt;/code&gt; del ejemplo 2 tiene una explicaci&amp;oacute;n ahora obvia. Despu&amp;eacute;s de la expansi&amp;oacute;n de la carcasa:</target>
        </trans-unit>
        <trans-unit id="46640750de5d6c26ef3345516697c4c8de1c5c05" translate="yes" xml:space="preserve">
          <source>Let's say I have three files: main.cpp, file.h, file.cpp:</source>
          <target state="translated">Digamos que tengo tres archivos:main.cpp,file.h,file.cpp:</target>
        </trans-unit>
        <trans-unit id="8fb4c3c64119c8c2cdfc81bebdd5f927b932e0aa" translate="yes" xml:space="preserve">
          <source>Link example 1 correctly:</source>
          <target state="translated">Enlaza el ejemplo 1 correctamente:</target>
        </trans-unit>
        <trans-unit id="bd65393a1e1fc0de6adb743f6af3918125bb0ecc" translate="yes" xml:space="preserve">
          <source>Link example 2 correctly:</source>
          <target state="translated">Enlaza el ejemplo 2 correctamente:</target>
        </trans-unit>
        <trans-unit id="eff7b8e1e01a437aa7f86d07bd975b1d3e3d6b4f" translate="yes" xml:space="preserve">
          <source>Link invocation (command line),</source>
          <target state="translated">Invocación de enlace (línea de comandos),</target>
        </trans-unit>
        <trans-unit id="4da0c7603f707d809b67abb53db4ebf240bc0929" translate="yes" xml:space="preserve">
          <source>Link our object files</source>
          <target state="translated">Enlazar nuestros archivos de objetos</target>
        </trans-unit>
        <trans-unit id="b4235ce9a11da86196b06273997efb6e1bb09f1b" translate="yes" xml:space="preserve">
          <source>Link the example 2 &lt;code&gt;pkg-config&lt;/code&gt; variation correctly:</source>
          <target state="translated">Enlace la variaci&amp;oacute;n del ejemplo 2 &lt;code&gt;pkg-config&lt;/code&gt; correctamente:</target>
        </trans-unit>
        <trans-unit id="a67761a97541734d3b1dd08a0be04d93cf4eb6b1" translate="yes" xml:space="preserve">
          <source>Linker Time Error</source>
          <target state="translated">Error de tiempo restante</target>
        </trans-unit>
        <trans-unit id="93df95814a97d8e558d63057388f44e8335ec3a6" translate="yes" xml:space="preserve">
          <source>Linker errors can happen when a header file and its associated shared library (.lib file) go out of sync. Let me explain.</source>
          <target state="translated">Los errores de los enlazadores pueden ocurrir cuando un archivo de cabecera y su biblioteca compartida asociada (archivo .lib)se desincronizan.Déjeme explicarle.</target>
        </trans-unit>
        <trans-unit id="2f12c9c12e76e06c4529ab38bf1b266c849ada4a" translate="yes" xml:space="preserve">
          <source>Linker sees exported symbols and links it. Now we try to uncomment lines in src2.cpp like here</source>
          <target state="translated">Linker ve los símbolos exportados y los vincula.Ahora intentamos descomentar las líneas en src2.cpp como aquí</target>
        </trans-unit>
        <trans-unit id="ff5d8fd0650014513ae22d4ad7c2df789c1613a9" translate="yes" xml:space="preserve">
          <source>Linux &lt;a href=&quot;http://linux.die.net/man/1/ld&quot;&gt;ld man page&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://linux.die.net/man/1/ld&quot;&gt;P&amp;aacute;gina de manual de&lt;/a&gt; Linux ld .</target>
        </trans-unit>
        <trans-unit id="1602232f4b5e2f467a8d3b007a0131ae5384e107" translate="yes" xml:space="preserve">
          <source>MSVS requires you to specify which symbols to export and import using &lt;code&gt;__declspec(dllexport)&lt;/code&gt; and &lt;code&gt;__declspec(dllimport)&lt;/code&gt;.</source>
          <target state="translated">MSVS requiere que especifique qu&amp;eacute; s&amp;iacute;mbolos exportar e importar utilizando &lt;code&gt;__declspec(dllexport)&lt;/code&gt; y &lt;code&gt;__declspec(dllimport)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="976f170a12de6c4ee60dc922bc6d9db457f350ab" translate="yes" xml:space="preserve">
          <source>Make object files</source>
          <target state="translated">Hacer archivos de objetos</target>
        </trans-unit>
        <trans-unit id="daa6e7741bcaa1754abaefe5829b55e9e65ff067" translate="yes" xml:space="preserve">
          <source>Make sure that your external library doesn't contain symbols that may enter into conflict with other symbols you defined in your header files</source>
          <target state="translated">Asegúrate de que tu biblioteca externa no contenga símbolos que puedan entrar en conflicto con otros símbolos que hayas definido en tus archivos de cabecera.</target>
        </trans-unit>
        <trans-unit id="9923a08fcadb46cb599ab38321c7d4b2a14511aa" translate="yes" xml:space="preserve">
          <source>Make sure you write your c++ project syntactical correct.</source>
          <target state="translated">Asegúrate de que escribes correctamente la sintaxis de tu proyecto c++.</target>
        </trans-unit>
        <trans-unit id="90926b930049fc977cdcf047eff29fccda6c34ad" translate="yes" xml:space="preserve">
          <source>Many Linux distros today configure their GCC toolchain so that its language drivers (&lt;code&gt;gcc&lt;/code&gt;,&lt;code&gt;g++&lt;/code&gt;,&lt;code&gt;gfortran&lt;/code&gt; etc)
instruct the system linker (&lt;code&gt;ld&lt;/code&gt;) to link shared libraries on an &lt;em&gt;as-needed&lt;/em&gt; basis.
You have got one of those distros.</source>
          <target state="translated">Muchas distribuciones de Linux configuran hoy su cadena de herramientas GCC para que sus controladores de idioma ( &lt;code&gt;gcc&lt;/code&gt; , &lt;code&gt;g++&lt;/code&gt; , &lt;code&gt;gfortran&lt;/code&gt; , etc.) instruyan al vinculador del sistema ( &lt;code&gt;ld&lt;/code&gt; ) para vincular bibliotecas compartidas &lt;em&gt;seg&amp;uacute;n sea necesario&lt;/em&gt; . Tienes una de esas distribuciones.</target>
        </trans-unit>
        <trans-unit id="1ea292f71f513f2f49b3c0ecc19893f09a021ecf" translate="yes" xml:space="preserve">
          <source>Microsoft offers a &lt;code&gt;#pragma&lt;/code&gt; to reference the correct library at link time;</source>
          <target state="translated">Microsoft ofrece un &lt;code&gt;#pragma&lt;/code&gt; para hacer referencia a la biblioteca correcta en el momento del enlace;</target>
        </trans-unit>
        <trans-unit id="c84452b5c5beed02d4bfc0b6a144ddbc0f9f2c52" translate="yes" xml:space="preserve">
          <source>Missing &quot;extern&quot; in &lt;code&gt;const&lt;/code&gt; variable declarations/definitions (C++ only)</source>
          <target state="translated">Falta &quot;extern&quot; en las declaraciones / definiciones de variables &lt;code&gt;const&lt;/code&gt; antes (solo C ++)</target>
        </trans-unit>
        <trans-unit id="a0b0d93816c556d77f42fe7a2651c42eb165889f" translate="yes" xml:space="preserve">
          <source>Missing &quot;extern&quot; in const variable declarations/definitions (C++ only)</source>
          <target state="translated">Falta &quot;externo&quot; en las definiciones de declaraciones de variables constantes (sólo C++)</target>
        </trans-unit>
        <trans-unit id="5eb6f3aa726cfe18f5057b4aefa2edb20315a029" translate="yes" xml:space="preserve">
          <source>Mistyping or not including the .lib extension when using the &lt;code&gt;#pragma&lt;/code&gt; (Microsoft Visual Studio)</source>
          <target state="translated">Escribir incorrectamente o no incluir la extensi&amp;oacute;n .lib cuando se usa &lt;code&gt;#pragma&lt;/code&gt; (Microsoft Visual Studio)</target>
        </trans-unit>
        <trans-unit id="f54d45d1a4464006ef586499c694d801d5a8d12c" translate="yes" xml:space="preserve">
          <source>More &lt;a href=&quot;https://gcc.gnu.org/wiki/Visibility&quot;&gt;information about visibility&lt;/a&gt; can be found on the gcc wiki.</source>
          <target state="translated">Se puede encontrar m&amp;aacute;s &lt;a href=&quot;https://gcc.gnu.org/wiki/Visibility&quot;&gt;informaci&amp;oacute;n sobre la visibilidad&lt;/a&gt; en el wiki de gcc.</target>
        </trans-unit>
        <trans-unit id="641fea9b7a86c80e1745eea04b284d17d7064212" translate="yes" xml:space="preserve">
          <source>Most modern linkers include a verbose option that prints out to varying degrees;</source>
          <target state="translated">La mayoría de los enlazadores modernos incluyen una opción verbosa que se imprime en varios grados;</target>
        </trans-unit>
        <trans-unit id="e559ced22868458277e7a84fcf34818870da0124" translate="yes" xml:space="preserve">
          <source>Multiple source files of the same name</source>
          <target state="translated">Múltiples archivos fuente del mismo nombre</target>
        </trans-unit>
        <trans-unit id="c767224b9650ce630e60df38453f62be584ffe15" translate="yes" xml:space="preserve">
          <source>Next, it finds &lt;code&gt;eg1.o&lt;/code&gt;, and adds it to be program. An object file in the
linkage sequence is always added to the program. Now, the program makes
a reference to &lt;code&gt;hw&lt;/code&gt;, and does not contain a definition of &lt;code&gt;hw&lt;/code&gt;; but
there is nothing left in the linkage sequence that could provide the missing
definition. The reference to &lt;code&gt;hw&lt;/code&gt; ends up &lt;em&gt;unresolved&lt;/em&gt;, and the linkage fails.</source>
          <target state="translated">Luego, encuentra &lt;code&gt;eg1.o&lt;/code&gt; , y lo agrega como programa. Un archivo de objeto en la secuencia de enlace siempre se agrega al programa. Ahora, el programa hace referencia a &lt;code&gt;hw&lt;/code&gt; y no contiene una definici&amp;oacute;n de &lt;code&gt;hw&lt;/code&gt; ; pero no queda nada en la secuencia de enlace que pueda proporcionar la definici&amp;oacute;n que falta. La referencia a &lt;code&gt;hw&lt;/code&gt; termina &lt;em&gt;sin resolverse&lt;/em&gt; y el enlace falla.</target>
        </trans-unit>
        <trans-unit id="f0d2f6223f521a208279e081a4e5a7ac2c7dd700" translate="yes" xml:space="preserve">
          <source>Non-&lt;code&gt;virtual&lt;/code&gt; class members</source>
          <target state="translated">Miembros de clase no &lt;code&gt;virtual&lt;/code&gt; es</target>
        </trans-unit>
        <trans-unit id="117ed9998cfcf9683b519b2cfb916a1303481e8f" translate="yes" xml:space="preserve">
          <source>Note how even though both the function declarations look identical in source code, but they are really different according to the compiler.</source>
          <target state="translated">Obsérvese cómo aunque ambas declaraciones de funciones parecen idénticas en el código fuente,pero son realmente diferentes según el compilador.</target>
        </trans-unit>
        <trans-unit id="5abbdb9f6a8ffe88fc827af5fbe46e7e3a900154" translate="yes" xml:space="preserve">
          <source>Note in this example, the linker would tell you it couldn't find &lt;code&gt;draw()&lt;/code&gt;, when in reality you know it obviously is being exported by the library. You could spend hours scratching your head wondering what went wrong. The thing is, the linker sees a different signature because the parameter types are slightly different. In the example, &lt;code&gt;vec3&lt;/code&gt; is a different type in both projects as far as the compiler is concerned. This could happen because they come from two slightly different include files (maybe the include files come from two different versions of the library).</source>
          <target state="translated">Tenga en cuenta que en este ejemplo, el enlazador le dir&amp;iacute;a que no puede encontrar &lt;code&gt;draw()&lt;/code&gt; , cuando en realidad sabe que obviamente la biblioteca lo est&amp;aacute; exportando. Podr&amp;iacute;as pasar horas rasc&amp;aacute;ndote la cabeza pregunt&amp;aacute;ndote qu&amp;eacute; sali&amp;oacute; mal. La cuesti&amp;oacute;n es que el vinculador ve una firma diferente porque los tipos de par&amp;aacute;metros son ligeramente diferentes. En el ejemplo, &lt;code&gt;vec3&lt;/code&gt; es un tipo diferente en ambos proyectos en lo que respecta al compilador. Esto podr&amp;iacute;a suceder porque provienen de dos archivos de inclusi&amp;oacute;n ligeramente diferentes (tal vez los archivos de inclusi&amp;oacute;n provienen de dos versiones diferentes de la biblioteca).</target>
        </trans-unit>
        <trans-unit id="23d4b3aa6710b3034b123422af2beef9dd73642c" translate="yes" xml:space="preserve">
          <source>Note the &lt;strong&gt;different libraries&lt;/strong&gt; used in main.cpp and file.h. Since main.cpp #include'd &quot;&lt;strong&gt;file.h&lt;/strong&gt;&quot; after &amp;lt;&lt;strong&gt;filesystem&lt;/strong&gt;&amp;gt;, the version of filesystem used there was &lt;strong&gt;the C++17 one&lt;/strong&gt;. I used to compile the program with the following commands:</source>
          <target state="translated">Tenga en cuenta las &lt;strong&gt;diferentes bibliotecas&lt;/strong&gt; utilizadas en main.cpp y file.h. Dado que main.cpp # include'd &quot; &lt;strong&gt;file.h&lt;/strong&gt; &quot; despu&amp;eacute;s de &amp;lt; &lt;strong&gt;filesystem&lt;/strong&gt; &amp;gt;, la versi&amp;oacute;n del sistema de archivos utilizada era &lt;strong&gt;la C ++ 17&lt;/strong&gt; . Sol&amp;iacute;a ​​compilar el programa con los siguientes comandos:</target>
        </trans-unit>
        <trans-unit id="6ce292ed7cabf956b3bed91089eb7d1238831776" translate="yes" xml:space="preserve">
          <source>Note the weird mangled name given in the linker error. (eg. draw@graphics@XYZ).</source>
          <target state="translated">Fíjese en el extraño nombre destrozado que se da en el error del enlazador.(por ejemplo,dibujo@gráfico@XYZ).</target>
        </trans-unit>
        <trans-unit id="3b2cfcdfa403dfa1ba5b0b9b3a8ea1bd2538d22c" translate="yes" xml:space="preserve">
          <source>Now when you build this code you will get a LNK2019 error complaining that foo is an unresolved symbol. In this case, we know that foo() has its definition in a.cpp, but different from the one we are calling(different return value). This is the case that definition exists.</source>
          <target state="translated">Ahora cuando construyas este código obtendrás un error LNK2019 quejándote de que el foo es un símbolo sin resolver.En este caso,sabemos que foo()tiene su definición en a.cpp,pero diferente de la que estamos llamando(diferente valor de retorno).Este es el caso de que esa definición existe.</target>
        </trans-unit>
        <trans-unit id="3fd0cadfd7a6c67e12488f6b0910e0bf6fc11715" translate="yes" xml:space="preserve">
          <source>OK (no errors), because we only build object file, linking is not done yet.
Try to link</source>
          <target state="translated">OK (sin errores),porque sólo construimos el archivo del objeto,el enlace no está hecho todavía.Intenta enlazar</target>
        </trans-unit>
        <trans-unit id="e251c8f846836883316a7f1bd7f47a5ca9918668" translate="yes" xml:space="preserve">
          <source>On Linux, it may be due to the wrong library folder (using &lt;code&gt;lib&lt;/code&gt; instead of &lt;code&gt;lib64&lt;/code&gt; for instance).</source>
          <target state="translated">En Linux, puede deberse a una carpeta de biblioteca incorrecta (por ejemplo, usando &lt;code&gt;lib&lt;/code&gt; en lugar de &lt;code&gt;lib64&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="86966d8cfc106dd026001fc5ff966b8b3018c853" translate="yes" xml:space="preserve">
          <source>On MacOS, there is the option of shipping both architectures in the same file. It may be that the link expects both versions to be there, but only one is. It can also be an issue with the wrong &lt;code&gt;lib&lt;/code&gt;/&lt;code&gt;lib64&lt;/code&gt; folder where the library is picked up.</source>
          <target state="translated">En MacOS, existe la opci&amp;oacute;n de enviar ambas arquitecturas en el mismo archivo. Puede ser que el enlace espere que ambas versiones est&amp;eacute;n all&amp;iacute;, pero solo una est&amp;aacute;. Tambi&amp;eacute;n puede ser un problema con la carpeta &lt;code&gt;lib&lt;/code&gt; / &lt;code&gt;lib64&lt;/code&gt; incorrecta donde se recoge la biblioteca.</target>
        </trans-unit>
        <trans-unit id="11ea8afa3c6fc752c5cd8f5e66cffa69d7e4417a" translate="yes" xml:space="preserve">
          <source>On Visual Studio, this is due to the wrong &quot;Platform&quot;, and you need to either select the proper one or install the proper version of the library.</source>
          <target state="translated">En Visual Studio,esto se debe a que la &quot;Plataforma&quot; no es la correcta,y necesitas seleccionar la adecuada o instalar la versión apropiada de la biblioteca.</target>
        </trans-unit>
        <trans-unit id="457c63213d9d88bc27b8181901ab2f67874c5025" translate="yes" xml:space="preserve">
          <source>Once the &quot;clean&quot; has completed, verify that the &quot;clean&quot; has succeeded and all the generated intermediate file (e.g. an automated makefile) have been successfully removed.</source>
          <target state="translated">Una vez que se haya completado la &quot;limpieza&quot;,verifique que la &quot;limpieza&quot; haya tenido éxito y que todos los archivos intermedios generados (por ejemplo,un makefile automatizado)se hayan eliminado con éxito.</target>
        </trans-unit>
        <trans-unit id="6f5728e6f888e3db2ef5e4e2e84aed1bcec411c8" translate="yes" xml:space="preserve">
          <source>Once the Linker find one symbol he doesn't search in other libraries for it</source>
          <target state="translated">Una vez que el Enlazador encuentra un símbolo,no lo busca en otras bibliotecas.</target>
        </trans-unit>
        <trans-unit id="94e5d03e6bfe739776bcda7bf67b4b04f50d00e4" translate="yes" xml:space="preserve">
          <source>One possible reason for linker errors with GCC 5.2.0 is that a new libstdc++ library ABI is now chosen by default.</source>
          <target state="translated">Una posible razón de los errores del enlazador con GCC 5.2.0 es que ahora se elige por defecto una nueva biblioteca libstdc++ABI.</target>
        </trans-unit>
        <trans-unit id="e8ebcbceae17e1cbcb7630b4e7cab992bde641ed" translate="yes" xml:space="preserve">
          <source>Or in the project settings;</source>
          <target state="translated">O en la configuración del proyecto;</target>
        </trans-unit>
        <trans-unit id="3324fb682ba3b5fa0fc5008f94f9c3c6cb160fbe" translate="yes" xml:space="preserve">
          <source>Or on the command line;</source>
          <target state="translated">O en la línea de mando;</target>
        </trans-unit>
        <trans-unit id="0d8974a160f915d9994dddc618b6681fd0f9d9cf" translate="yes" xml:space="preserve">
          <source>Or you could replace the -l argument with the full path of the .so, e.g. instead of &lt;code&gt;-ltbb&lt;/code&gt; do &lt;code&gt;/home/foo/tbb-4.3/linux/lib/intel64/gcc4.4/libtbb.so.2&lt;/code&gt;</source>
          <target state="translated">O podr&amp;iacute;a reemplazar el argumento -l con la ruta completa de .so, por ejemplo, en lugar de &lt;code&gt;-ltbb&lt;/code&gt; do &lt;code&gt;/home/foo/tbb-4.3/linux/lib/intel64/gcc4.4/libtbb.so.2&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4ae41d11bd46131c063f0debe5a8fdf31f161cd3" translate="yes" xml:space="preserve">
          <source>Or, the implementation for the &lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt; can be done inline inside the class definition;</source>
          <target state="translated">O bien, la implementaci&amp;oacute;n para el &lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt; se puede hacer en l&amp;iacute;nea dentro de la definici&amp;oacute;n de clase;</target>
        </trans-unit>
        <trans-unit id="80d315959f3ea9b04eb57b630f050abbf870cc02" translate="yes" xml:space="preserve">
          <source>Other examples of mismatches include</source>
          <target state="translated">Otros ejemplos de desajustes son</target>
        </trans-unit>
        <trans-unit id="6a535a2a245f2fac95298b5e9540153ebde66430" translate="yes" xml:space="preserve">
          <source>Parse all the object files and find the definition which was only declared in headers ( eg: The code of one method of a class as is mentioned in previous answers, or event the initialization of a static variable which is member inside a class)</source>
          <target state="translated">Analizar todos los archivos de objetos y encontrar la definición que sólo fue declarada en los encabezados (por ejemplo:el código de un método de una clase como se menciona en las respuestas anteriores,o en el caso de la inicialización de una variable estática que es miembro dentro de una clase).</target>
        </trans-unit>
        <trans-unit id="bd4adda29a59ab9ab7bbb53de56745feac90cde3" translate="yes" xml:space="preserve">
          <source>Pay attention to why the mangled names ended up different. You would be able to see that the parameter types are different, even though they look the same in the source code.</source>
          <target state="translated">Presta atención a por qué los nombres destrozados terminaron siendo diferentes.Podrías ver que los tipos de parámetros son diferentes,aunque se vean iguales en el código fuente.</target>
        </trans-unit>
        <trans-unit id="4041537c412b8e8a70cd213105a7f6d55c1d8225" translate="yes" xml:space="preserve">
          <source>Physical source file characters are mapped, in an implementation-defined manner, to the basic source character set
  (introducing new-line characters for end-of-line indicators) if
  necessary. &lt;em&gt;[SNIP]&lt;/em&gt;</source>
          <target state="translated">Los caracteres del archivo de origen f&amp;iacute;sico se asignan, de una manera definida por la implementaci&amp;oacute;n, al conjunto de caracteres de origen b&amp;aacute;sico (introduciendo caracteres de nueva l&amp;iacute;nea para indicadores de fin de l&amp;iacute;nea) si es necesario. &lt;em&gt;[RECORTE]&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4f7cb050a64d88fed430275cbf21ad78668fd798" translate="yes" xml:space="preserve">
          <source>Preprocessing directives are executed, macro invocations are expanded, and _Pragma unary operator expressions are executed. &lt;em&gt;[SNIP]&lt;/em&gt;</source>
          <target state="translated">Las directivas de preprocesamiento se ejecutan, las invocaciones de macros se expanden y las expresiones de operador _Pragma unario se ejecutan. &lt;em&gt;[RECORTE]&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6587b16429748e00b4db35eea2d58d775e0d0e77" translate="yes" xml:space="preserve">
          <source>Problems with template friends</source>
          <target state="translated">Problemas con los amigos de la plantilla</target>
        </trans-unit>
        <trans-unit id="0721f2ff9d4e8f8c71dbe1300b4338d0f46d327a" translate="yes" xml:space="preserve">
          <source>Project Properties &amp;gt; General &amp;gt; Project Defaults &amp;gt; Character Set</source>
          <target state="translated">Propiedades del proyecto&amp;gt; General&amp;gt; Valores predeterminados del proyecto&amp;gt; Conjunto de caracteres</target>
        </trans-unit>
        <trans-unit id="315cdbd0cc37f2f6eed7311d6a11376e81ab5846" translate="yes" xml:space="preserve">
          <source>Putting interdependent libraries in the wrong order is just one way
in which you can get files that &lt;em&gt;need&lt;/em&gt; definitions of things coming
later in the linkage than the files that &lt;em&gt;provide&lt;/em&gt; the definitions. Putting libraries before the 
object files that refer to them is another way of making the same mistake.</source>
          <target state="translated">Poner las bibliotecas interdependientes en el orden incorrecto es solo una forma en la que puede obtener archivos que &lt;em&gt;necesitan&lt;/em&gt; definiciones de cosas que vienen m&amp;aacute;s adelante en el enlace que los archivos que &lt;em&gt;proporcionan&lt;/em&gt; las definiciones. Poner bibliotecas antes de los archivos de objetos que se refieren a ellas es otra forma de cometer el mismo error.</target>
        </trans-unit>
        <trans-unit id="aa2e87051763ba52eba36f8604042df6dea47a55" translate="yes" xml:space="preserve">
          <source>Reason why they are different. In the example given above, they are different because of different include files.</source>
          <target state="translated">Razón por la cual son diferentes.En el ejemplo anterior,son diferentes debido a los diferentes archivos de inclusión.</target>
        </trans-unit>
        <trans-unit id="516aae52959dcf5398a9985414a78b8c24a4f0e5" translate="yes" xml:space="preserve">
          <source>Resolution</source>
          <target state="translated">Resolution</target>
        </trans-unit>
        <trans-unit id="36eb62592e54385368d992e3bfc823feb8a2ecf1" translate="yes" xml:space="preserve">
          <source>Same if you compile and link in one go:</source>
          <target state="translated">Lo mismo si compilas y enlazas de una sola vez:</target>
        </trans-unit>
        <trans-unit id="57b44b45b209c07e2cf396779f22bd7450198c5e" translate="yes" xml:space="preserve">
          <source>Say you defined symbol &lt;code&gt;a&lt;/code&gt; in &lt;code&gt;a.cpp&lt;/code&gt;. Now, &lt;code&gt;b.cpp&lt;/code&gt;&lt;em&gt;declared&lt;/em&gt; that symbol and used it. Before linking, it simply assumes that that symbol was defined &lt;em&gt;somewhere&lt;/em&gt;, but it doesn't yet care where. The linking phase is responsible for finding the symbol and correctly linking it to &lt;code&gt;b.cpp&lt;/code&gt; (well, actually to the object or library that uses it).</source>
          <target state="translated">Digamos que defini&amp;oacute; el s&amp;iacute;mbolo &lt;code&gt;a&lt;/code&gt; en &lt;code&gt;a.cpp&lt;/code&gt; . Ahora, &lt;code&gt;b.cpp&lt;/code&gt; &lt;em&gt;declar&amp;oacute;&lt;/em&gt; ese s&amp;iacute;mbolo y lo us&amp;oacute;. Antes de vincular, simplemente supone que ese s&amp;iacute;mbolo se defini&amp;oacute; en &lt;em&gt;alguna parte&lt;/em&gt; , pero a&amp;uacute;n no le importa d&amp;oacute;nde. La fase de enlace es responsable de encontrar el s&amp;iacute;mbolo y vincularlo correctamente a &lt;code&gt;b.cpp&lt;/code&gt; (bueno, en realidad al objeto o biblioteca que lo usa).</target>
        </trans-unit>
        <trans-unit id="d88c152a43cb27887978260a5c15f52ecc557b4e" translate="yes" xml:space="preserve">
          <source>Search for the exported symbol of interest, and notice that the mangled name is different.</source>
          <target state="translated">Busque el símbolo exportado de interés,y note que el nombre destrozado es diferente.</target>
        </trans-unit>
        <trans-unit id="f5e40313ea4a701259411817e6ec26f8b27269ef" translate="yes" xml:space="preserve">
          <source>Search paths used.</source>
          <target state="translated">Caminos de búsqueda utilizados.</target>
        </trans-unit>
        <trans-unit id="ef26caaa13a2223b4e5f1013e62b3dd0af211401" translate="yes" xml:space="preserve">
          <source>Second, &lt;strong&gt;example 2&lt;/strong&gt;, with shared library &lt;code&gt;libz&lt;/code&gt;</source>
          <target state="translated">Segundo, &lt;strong&gt;ejemplo 2&lt;/strong&gt; , con biblioteca compartida &lt;code&gt;libz&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2d8243a2c0e464492c9d563c4f92c56ae3421bcc" translate="yes" xml:space="preserve">
          <source>See also</source>
          <target state="translated">Ver también</target>
        </trans-unit>
        <trans-unit id="31a5c46ba7e3644d87e2c8692f9d7b577d4ff522" translate="yes" xml:space="preserve">
          <source>Similar mechanisms exist for other compilers/ platforms.</source>
          <target state="translated">Existen mecanismos similares para otras plataformas de compilación.</target>
        </trans-unit>
        <trans-unit id="ad1f924b7bbc2bcd7bd047b593952dcaf5c4a6a3" translate="yes" xml:space="preserve">
          <source>Similar remarks apply to functions. Declaring a function without defining it leads to the error:</source>
          <target state="translated">Observaciones similares se aplican a las funciones.Declarar una función sin definirla conduce al error:</target>
        </trans-unit>
        <trans-unit id="44febaad51a1168e7b5495233c9acbc83d1c9397" translate="yes" xml:space="preserve">
          <source>Similar to Windows-dlls, one would mark public functions with a define, for example &lt;code&gt;DLL_PUBLIC&lt;/code&gt; defined as:</source>
          <target state="translated">Similar a Windows-dlls, uno marcar&amp;iacute;a las funciones p&amp;uacute;blicas con una definici&amp;oacute;n, por ejemplo, &lt;code&gt;DLL_PUBLIC&lt;/code&gt; definida como:</target>
        </trans-unit>
        <trans-unit id="3791448e9c466323a781d1053225a28e2ed66066" translate="yes" xml:space="preserve">
          <source>Since it is not implemented, the linker fails to find it and results in the error.</source>
          <target state="translated">Como no está implementado,el enlazador no lo encuentra y resulta en el error.</target>
        </trans-unit>
        <trans-unit id="b88c50d7c2684c92f808dc0bef70ada825c3a195" translate="yes" xml:space="preserve">
          <source>Since people seem to be directed to this question when it comes to linker errors I am going to add this here.</source>
          <target state="translated">Ya que la gente parece ser dirigida a esta pregunta cuando se trata de errores de vinculación,voy a añadir esto aquí.</target>
        </trans-unit>
        <trans-unit id="5594c3defe9060176ac055ec30199b6a1925a1a0" translate="yes" xml:space="preserve">
          <source>So if you suddenly get linker errors when switching to a GCC after 5.1.0 this would be a thing to check out.</source>
          <target state="translated">Así que si de repente se producen errores de enlace al cambiar a un GCC después de la 5.1.0 esto sería algo a comprobar.</target>
        </trans-unit>
        <trans-unit id="7406dccb208de8f7859f688a7bf278cd1e4e822d" translate="yes" xml:space="preserve">
          <source>So the linkage fails just as it does if you &lt;em&gt;do&lt;/em&gt; run those two commands. The
only difference you notice in the failure is that gcc has generated a
temporary object file in the compile + link case, because you're not telling it
to use &lt;code&gt;eg1.o&lt;/code&gt;. We see:</source>
          <target state="translated">Por lo tanto, el enlace falla al igual que si ejecuta esos dos comandos. La &amp;uacute;nica diferencia que observa en el fallo es que gcc ha generado un archivo de objeto temporal en el caso de compilaci&amp;oacute;n + enlace, porque no le est&amp;aacute; diciendo que use &lt;code&gt;eg1.o&lt;/code&gt; . Vemos:</target>
        </trans-unit>
        <trans-unit id="0c7380eb36ac254fde0c5e28aa7521e54819d717" translate="yes" xml:space="preserve">
          <source>So the linker does not add &lt;code&gt;my_lib.o&lt;/code&gt; to the program and has no further
use for &lt;code&gt;libmy_lib.a&lt;/code&gt;.</source>
          <target state="translated">Por lo tanto, el enlazador no agrega &lt;code&gt;my_lib.o&lt;/code&gt; al programa y no tiene m&amp;aacute;s uso para &lt;code&gt;libmy_lib.a&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="389ef339b38d14a89c45ee18d949e24cc58f1d20" translate="yes" xml:space="preserve">
          <source>So to repeat again, the order &lt;strong&gt;DOES&lt;/strong&gt; matter!</source>
          <target state="translated">Entonces, para repetir de nuevo, &amp;iexcl;el orden s&amp;iacute; importa!</target>
        </trans-unit>
        <trans-unit id="ba83702c0f21aecaaf05b65e1c413ecbfdf89e6e" translate="yes" xml:space="preserve">
          <source>So, as a result - an &quot;undefined reference/unresolved external symbol error&quot; happens when the linker cannot find global symbols in the object files.</source>
          <target state="translated">Por lo tanto,como resultado-un &quot;error de símbolo externo no definido de referencia no resuelto&quot; ocurre cuando el enlazador no puede encontrar símbolos globales en los archivos de objetos.</target>
        </trans-unit>
        <trans-unit id="810e61562c0a90ab80a893ffeb7eb498e51ef3b8" translate="yes" xml:space="preserve">
          <source>So, we see follow symbols to export.</source>
          <target state="translated">Por lo tanto,vemos los siguientes símbolos para exportar.</target>
        </trans-unit>
        <trans-unit id="889eacaaf63948869a5ddecd71ff4abfdbeb0106" translate="yes" xml:space="preserve">
          <source>So, we've seen there is no label for local_var_name, that's why linker hasn't found it. But we are hackers :) and we can fix it. Open src1.s in your text editor and change</source>
          <target state="translated">Así que,hemos visto que no hay una etiqueta para local_var_name,por eso el enlazador no la ha encontrado.Pero somos hackers :)y podemos arreglarlo.Abre src1.s en tu editor de texto y cambia</target>
        </trans-unit>
        <trans-unit id="ed306cf6c07bf565cfeaa2c226cbfd2a2acd58af" translate="yes" xml:space="preserve">
          <source>Some .so files are actually &lt;a href=&quot;https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/4/html/Using_ld_the_GNU_Linker/simple-commands.html&quot;&gt;GNU ld linker scripts&lt;/a&gt;, e.g. &lt;a href=&quot;https://www.threadingbuildingblocks.org/download&quot;&gt;libtbb.so&lt;/a&gt; file is an ASCII text file with this contents:</source>
          <target state="translated">Algunos archivos .so son realmente &lt;a href=&quot;https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/4/html/Using_ld_the_GNU_Linker/simple-commands.html&quot;&gt;scripts de enlazador GNU ld&lt;/a&gt; , por ejemplo, el archivo &lt;a href=&quot;https://www.threadingbuildingblocks.org/download&quot;&gt;libtbb.so&lt;/a&gt; es un archivo de texto ASCII con este contenido:</target>
        </trans-unit>
        <trans-unit id="2701d02120f341c911b427c678b1b3ba58ab869e" translate="yes" xml:space="preserve">
          <source>Some members need to be defined even if not used explicitly:</source>
          <target state="translated">Es necesario definir algunos miembros aunque no se utilicen explícitamente:</target>
        </trans-unit>
        <trans-unit id="0ce76ec1b7032c9c8bc5feb3b6ece87aff083f39" translate="yes" xml:space="preserve">
          <source>Some more complex builds may not support this. For example, if you include -v in the compiler options, you can see that the &lt;a href=&quot;http://www.mainsoft.com/content/mainsoft-unix-and-linux-overview&quot;&gt;mainwin gcc wrapper mwdip&lt;/a&gt; discards linker script command files in the verbose output list of libraries to link in. A simple work around is to replace the linker script input command file with a copy of the file instead (or a symlink), e.g.</source>
          <target state="translated">Es posible que algunas compilaciones m&amp;aacute;s complejas no admitan esto. Por ejemplo, si incluye -v en las opciones del compilador, puede ver que &lt;a href=&quot;http://www.mainsoft.com/content/mainsoft-unix-and-linux-overview&quot;&gt;mainwin gcc wrapper mwdip&lt;/a&gt; descarta los archivos de comando de script de enlazador en la lista de salida detallada de las bibliotecas para vincular. Una soluci&amp;oacute;n simple es reemplazar el comando de entrada de script de enlazador archivo con una copia del archivo en su lugar (o un enlace simb&amp;oacute;lico), por ejemplo</target>
        </trans-unit>
        <trans-unit id="8da255b627a43c5967c21bd733eeffe48c9f7d7b" translate="yes" xml:space="preserve">
          <source>Specialized templates can be implemented in an implementation file and the implementation doesn't have to be visible, but the specialization must be previously declared.</source>
          <target state="translated">Las plantillas especializadas pueden implementarse en un archivo de implementación y la implementación no tiene que ser visible,pero la especialización debe ser declarada previamente.</target>
        </trans-unit>
        <trans-unit id="2bbb6a7ee8142005a47ef622c25910f07c59d91f" translate="yes" xml:space="preserve">
          <source>Steps to try if you believe it could be a bug in compiler/IDE:</source>
          <target state="translated">Pasos a seguir si crees que puede ser un error en el compiladorIDE:</target>
        </trans-unit>
        <trans-unit id="fe05b5a0cc2b31aa92f2910350d4890d86e8795c" translate="yes" xml:space="preserve">
          <source>Success:</source>
          <target state="translated">Success:</target>
        </trans-unit>
        <trans-unit id="82ca7ce44cf63b62393dd7422ee20047ef95bcd5" translate="yes" xml:space="preserve">
          <source>Suppose you have a big project written in c++ which has a thousand of .cpp files and a thousand of .h files.And let's says the project also depends on ten static libraries. Let's says we are on Windows and we build our project in Visual Studio 20xx. When you press Ctrl + F7 Visual Studio to start compiling the whole solution ( suppose we have just one project in the solution )</source>
          <target state="translated">Supongamos que tienes un gran proyecto escrito en c++que tiene mil archivos .cpp y mil archivos .h.Y digamos que el proyecto también depende de diez librerías estáticas.Digamos que estamos en Windows y construimos nuestro proyecto en Visual Studio 20xx.Cuando presionas Ctrl+F7 Visual Studio para comenzar a compilar toda la solución(supongamos que tenemos un solo proyecto en la solución )</target>
        </trans-unit>
        <trans-unit id="8380d950d527889dc4734ed54b11f16aca5a374d" translate="yes" xml:space="preserve">
          <source>Symbols were defined in a C program and used in C++ code.</source>
          <target state="translated">Los símbolos se definieron en un programa C y se usaron en código C++.</target>
        </trans-unit>
        <trans-unit id="2a9939fe25550be4dea8b1c736d43f816c2c5f20" translate="yes" xml:space="preserve">
          <source>Template implementations not visible.</source>
          <target state="translated">Las implementaciones de las plantillas no son visibles.</target>
        </trans-unit>
        <trans-unit id="8ef7c2da6f851f23bbe511ebc36d3de16160e803" translate="yes" xml:space="preserve">
          <source>That's because the distro on which the linkage works is one of the ones that 
does not configure its GCC toolchain to link shared libraries &lt;em&gt;as-needed&lt;/em&gt;.</source>
          <target state="translated">Esto se debe a que la distribuci&amp;oacute;n en la que funciona el enlace es una de las que no configura su cadena de herramientas GCC para vincular bibliotecas compartidas &lt;em&gt;seg&amp;uacute;n sea necesario&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="ddd5cfe744cba081a538a7341375f31cf8b1b45a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;libraryName&lt;/code&gt; here is just the bare name of the library, without platform-specific additions. So e.g. on Linux library files are usually called &lt;code&gt;libfoo.so&lt;/code&gt; but you'd only write &lt;code&gt;-lfoo&lt;/code&gt;. On Windows that same file might be called &lt;code&gt;foo.lib&lt;/code&gt;, but you'd use the same argument. You might have to add the directory where those files can be found using &lt;code&gt;-L&amp;lsaquo;directory&amp;rsaquo;&lt;/code&gt;. Make sure to not write a space after &lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;-L&lt;/code&gt;.</source>
          <target state="translated">El nombre de la biblioteca aqu&amp;iacute; es solo el nombre de la biblioteca, sin adiciones espec&amp;iacute;ficas de la plataforma. Entonces, por ejemplo, en Linux, los archivos de la biblioteca generalmente se llaman &lt;code&gt;libfoo.so&lt;/code&gt; , pero solo escribir&amp;iacute;as &lt;code&gt;-lfoo&lt;/code&gt; . En Windows, ese mismo archivo podr&amp;iacute;a llamarse &lt;code&gt;foo.lib&lt;/code&gt; , pero usar&amp;iacute;a el mismo argumento. Es posible que deba agregar el directorio donde se pueden encontrar esos archivos usando &lt;code&gt;-L&amp;lsaquo;directory&amp;rsaquo;&lt;/code&gt; . Aseg&amp;uacute;rese de no escribir un espacio despu&amp;eacute;s de &lt;code&gt;-l&lt;/code&gt; o &lt;code&gt;-L&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bd483f1251beaf7236d9997165b1d451b6bd1e48" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt; is being declared as a non-template function. For every type &lt;code&gt;T&lt;/code&gt; used with &lt;code&gt;Foo&lt;/code&gt;, there needs to be a non-templated &lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt;. For example, if there is a type &lt;code&gt;Foo&amp;lt;int&amp;gt;&lt;/code&gt; declared, then there must be an operator implementation as follows;</source>
          <target state="translated">El &lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt; se declara como una funci&amp;oacute;n que no es de plantilla. Para cada tipo &lt;code&gt;T&lt;/code&gt; utilizado con &lt;code&gt;Foo&lt;/code&gt; , debe haber un &lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt; sin plantilla &amp;lt;&amp;lt; . Por ejemplo, si hay un tipo &lt;code&gt;Foo&amp;lt;int&amp;gt;&lt;/code&gt; declarado, entonces debe haber una implementaci&amp;oacute;n del operador de la siguiente manera;</target>
        </trans-unit>
        <trans-unit id="f74bbb502cac87efc036b9625dd07f7ba8c32eb8" translate="yes" xml:space="preserve">
          <source>The C++ linker expects names to be mangled, so you have to declare the function as:</source>
          <target state="translated">El enlazador de C++espera que los nombres sean destrozados,así que tienes que declarar la función como:</target>
        </trans-unit>
        <trans-unit id="fa46de6d6b4941229d8b28acdcc1f6c203f0c516" translate="yes" xml:space="preserve">
          <source>The MSDN page on the &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/wdsk6as6.aspx&quot;&gt;&lt;code&gt;/VERBOSE&lt;/code&gt; linker option&lt;/a&gt;.</source>
          <target state="translated">La p&amp;aacute;gina de MSDN en la &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/wdsk6as6.aspx&quot;&gt;opci&amp;oacute;n del vinculador &lt;code&gt;/VERBOSE&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0a964c858e2f8e84f3cc4266073a14ab0c6127b2" translate="yes" xml:space="preserve">
          <source>The Second step of compilation is done by Linker.Linker should merge all the object file and build finally the output ( which may be an executable or a library)</source>
          <target state="translated">El segundo paso de la compilación es hecho por Linker.Linker debe fusionar todo el archivo objeto y construir finalmente el resultado (que puede ser un ejecutable o una biblioteca)</target>
        </trans-unit>
        <trans-unit id="b2a9f1a0bcdd74e12869a5f78bd29d7084686e17" translate="yes" xml:space="preserve">
          <source>The above code limits the friendship of the operator to the corresponding instantiation of &lt;code&gt;Foo&lt;/code&gt;, i.e. the &lt;code&gt;operator&amp;lt;&amp;lt; &amp;lt;int&amp;gt;&lt;/code&gt; instantiation is limited to access the private members of the instantiation of &lt;code&gt;Foo&amp;lt;int&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">El c&amp;oacute;digo anterior limita la amistad del operador a la instanciaci&amp;oacute;n correspondiente de &lt;code&gt;Foo&lt;/code&gt; , es decir, el &lt;code&gt;operator&amp;lt;&amp;lt; &amp;lt;int&amp;gt;&lt;/code&gt; instanciaci&amp;oacute;n se limita a acceder a los miembros privados de la instanciaci&amp;oacute;n de &lt;code&gt;Foo&amp;lt;int&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7cdbeecfba3fe1508804ada7c0e80ead504f0a5a" translate="yes" xml:space="preserve">
          <source>The alternative is applicable as well, if UNICODE is not intended to be used, make sure the defines are not set, and/or the multi-character setting is used in the projects and consistently applied.</source>
          <target state="translated">La alternativa también es aplicable,si no se pretende utilizar el UNICODE,asegúrese de que no se establezcan las definiciones,o que se utilice el ajuste de varios caracteres en los proyectos y se aplique de forma coherente.</target>
        </trans-unit>
        <trans-unit id="ab517e2a8ba12a27ab2bbd36c075257a2d62e599" translate="yes" xml:space="preserve">
          <source>The code:</source>
          <target state="translated">El código:</target>
        </trans-unit>
        <trans-unit id="96e15fc342a8a7b8e2a770b1887eaa0b6e5475ae" translate="yes" xml:space="preserve">
          <source>The correct solution is to hope the developer releases an updated package and then upgrade, but it worked for me by hacking in an extra setting for VS2013, pointing at the VS2012 library files.</source>
          <target state="translated">La solución correcta es esperar que el desarrollador publique un paquete actualizado y luego actualizarlo,pero a mí me funcionó hackeando una configuración extra para VS2013,apuntando a los archivos de la biblioteca de VS2012.</target>
        </trans-unit>
        <trans-unit id="39c6a6672a8c45fef828814fbc0a834a3d886d1e" translate="yes" xml:space="preserve">
          <source>The default behavior of gcc is that all symbols are visible. However, when the translation units are built with option &lt;code&gt;-fvisibility=hidden&lt;/code&gt;, only functions/symbols marked with &lt;code&gt;__attribute__ ((visibility (&quot;default&quot;)))&lt;/code&gt; are external in the resulting shared object.</source>
          <target state="translated">El comportamiento predeterminado de gcc es que todos los s&amp;iacute;mbolos son visibles. Sin embargo, cuando las unidades de traducci&amp;oacute;n se crean con la opci&amp;oacute;n &lt;code&gt;-fvisibility=hidden&lt;/code&gt; , solo las funciones / s&amp;iacute;mbolos marcados con &lt;code&gt;__attribute__ ((visibility (&quot;default&quot;)))&lt;/code&gt; son externos en el objeto compartido resultante.</target>
        </trans-unit>
        <trans-unit id="5d98ae42d70c1284a1b8e74bcfa80f5e6dc64e4b" translate="yes" xml:space="preserve">
          <source>The definition should be</source>
          <target state="translated">La definición debería ser</target>
        </trans-unit>
        <trans-unit id="fc35bde94bc482f0aba6406f3ef3e5fec63a5cd8" translate="yes" xml:space="preserve">
          <source>The different linkage rules for static and shared libraries can be confusing
to inexpert programmers, who may not know whether &lt;code&gt;-lfoo&lt;/code&gt; in their linkage
is going to resolve to &lt;code&gt;/some/where/libfoo.a&lt;/code&gt; or to &lt;code&gt;/some/where/libfoo.so&lt;/code&gt;,
and might not understand the difference between shared and static libraries
anyway.</source>
          <target state="translated">Las diferentes reglas de vinculaci&amp;oacute;n para bibliotecas est&amp;aacute;ticas y compartidas pueden ser confusas para los programadores inexpertos, que pueden no saber si &lt;code&gt;-lfoo&lt;/code&gt; en su vinculaci&amp;oacute;n se resolver&amp;aacute; en &lt;code&gt;/some/where/libfoo.a&lt;/code&gt; o &lt;code&gt;/some/where/libfoo.so&lt;/code&gt; , y podr&amp;iacute;a no entender la diferencia entre bibliotecas compartidas y est&amp;aacute;ticas de todos modos.</target>
        </trans-unit>
        <trans-unit id="aaebebac9d959c2f58827c7b922c7bafe9507b45" translate="yes" xml:space="preserve">
          <source>The error message from the compiler will often give you the full declaration of the variable or function that was declared but never defined. Compare it closely to the definition you provided. &lt;em&gt;Make sure every detail matches.&lt;/em&gt;</source>
          <target state="translated">El mensaje de error del compilador a menudo le dar&amp;aacute; la declaraci&amp;oacute;n completa de la variable o funci&amp;oacute;n que se declar&amp;oacute; pero nunca se defini&amp;oacute;. Comp&amp;aacute;relo estrechamente con la definici&amp;oacute;n que proporcion&amp;oacute;. &lt;em&gt;Aseg&amp;uacute;rese de que cada detalle coincida.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3c2fa91316cfdea05c933e01c86ec8f328458b71" translate="yes" xml:space="preserve">
          <source>The error usually includes a function a value with a &lt;code&gt;char&lt;/code&gt; or &lt;code&gt;wchar_t&lt;/code&gt; derived type, these could include &lt;code&gt;std::basic_string&amp;lt;&amp;gt;&lt;/code&gt; etc. as well. When browsing through the affected function in the code, there will often be a reference to &lt;code&gt;TCHAR&lt;/code&gt; or &lt;code&gt;std::basic_string&amp;lt;TCHAR&amp;gt;&lt;/code&gt; etc. This is a tell-tale sign that the code was originally intended for both a UNICODE and a Multi-Byte Character (or &quot;narrow&quot;) build.</source>
          <target state="translated">El error generalmente incluye una funci&amp;oacute;n de un valor con un tipo derivado &lt;code&gt;char&lt;/code&gt; o &lt;code&gt;wchar_t&lt;/code&gt; , estos tambi&amp;eacute;n podr&amp;iacute;an incluir &lt;code&gt;std::basic_string&amp;lt;&amp;gt;&lt;/code&gt; etc. Al navegar a trav&amp;eacute;s de la funci&amp;oacute;n afectada en el c&amp;oacute;digo, a menudo habr&amp;aacute; una referencia a &lt;code&gt;TCHAR&lt;/code&gt; o &lt;code&gt;std::basic_string&amp;lt;TCHAR&amp;gt;&lt;/code&gt; etc. Esta es una se&amp;ntilde;al reveladora de que el c&amp;oacute;digo fue originalmente dise&amp;ntilde;ado para un UNICODE y un Multi-Byte Car&amp;aacute;cter (o &quot;estrecho&quot;) de construcci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="814895756bf4ca3a731ef6c9e3952b7d303ddbd4" translate="yes" xml:space="preserve">
          <source>The explanation</source>
          <target state="translated">La explicación</target>
        </trans-unit>
        <trans-unit id="2d47f92cdddee137d7131c686bea6ba95385c1dd" translate="yes" xml:space="preserve">
          <source>The following would yield the error:</source>
          <target state="translated">Lo siguiente podría dar lugar a un error:</target>
        </trans-unit>
        <trans-unit id="dc651a3eb6c90a022d94d96235e9502e73444d46" translate="yes" xml:space="preserve">
          <source>The function (or variable) &lt;code&gt;void foo()&lt;/code&gt; was defined in a C program and you attempt to use it in a C++ program:</source>
          <target state="translated">La funci&amp;oacute;n (o variable) &lt;code&gt;void foo()&lt;/code&gt; se defini&amp;oacute; en un programa en C e intenta usarla en un programa en C ++:</target>
        </trans-unit>
        <trans-unit id="a01682bab1ad942d84e12a4ac6e6ac22aa1e51e4" translate="yes" xml:space="preserve">
          <source>The implementation can be inline, in the class definition itself:</source>
          <target state="translated">La implementación puede ser en línea,en la propia definición de la clase:</target>
        </trans-unit>
        <trans-unit id="edc532595d46d57575b847133085c91ba2256fee" translate="yes" xml:space="preserve">
          <source>The linkage:</source>
          <target state="translated">El enlace:</target>
        </trans-unit>
        <trans-unit id="de5f587780a7f48b676bf47c006c00b98834b61e" translate="yes" xml:space="preserve">
          <source>The linker will decide that your program needs &lt;code&gt;my_lib.o&lt;/code&gt; if and only if it already knows that
your program refers to &lt;code&gt;hw&lt;/code&gt;, in one or more of the object files it has already
added to the program, and that none of the object files it has already added
contains a definition for &lt;code&gt;hw&lt;/code&gt;.</source>
          <target state="translated">El vinculador decidir&amp;aacute; que su programa necesita &lt;code&gt;my_lib.o&lt;/code&gt; si y solo si ya sabe que su programa hace referencia a &lt;code&gt;hw&lt;/code&gt; , en uno o m&amp;aacute;s de los archivos de objetos que ya ha agregado al programa, y ​​que ninguno de los archivos de objetos que tiene ya agregado contiene una definici&amp;oacute;n para &lt;code&gt;hw&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0a63e56d03967bc268b8093019d175c83dfcea0a" translate="yes" xml:space="preserve">
          <source>The location of the libraries,</source>
          <target state="translated">La ubicación de las bibliotecas,</target>
        </trans-unit>
        <trans-unit id="11d6b7b1db5745c2043ea068ebb1b7afa5ed93de" translate="yes" xml:space="preserve">
          <source>The macro &lt;code&gt;THIS_MODULE&lt;/code&gt; would only be defined in the module that exports the function. That way, the declaration:</source>
          <target state="translated">La macro &lt;code&gt;THIS_MODULE&lt;/code&gt; solo se definir&amp;iacute;a en el m&amp;oacute;dulo que exporta la funci&amp;oacute;n. De esa manera, la declaraci&amp;oacute;n:</target>
        </trans-unit>
        <trans-unit id="eb453bce3db2538452e63a26b6b80e65d71ce5e3" translate="yes" xml:space="preserve">
          <source>The order in which interdependent linked libraries are specified is wrong</source>
          <target state="translated">El orden en que se especifican las bibliotecas vinculadas interdependientes es erróneo</target>
        </trans-unit>
        <trans-unit id="89ab932707a61a0d0cca439734dbbccf264ff41a" translate="yes" xml:space="preserve">
          <source>The order in which interdependent linked libraries are specified is wrong.</source>
          <target state="translated">El orden en que se especifican las bibliotecas vinculadas interdependientes es erróneo.</target>
        </trans-unit>
        <trans-unit id="4687e29b604f518f389340188cf76ad7ba3cfeab" translate="yes" xml:space="preserve">
          <source>The order in which libraries are linked DOES matter if the libraries depend on each other. In general, if library &lt;code&gt;A&lt;/code&gt; depends on library &lt;code&gt;B&lt;/code&gt;, then &lt;code&gt;libA&lt;/code&gt;&lt;strong&gt;MUST&lt;/strong&gt; appear before &lt;code&gt;libB&lt;/code&gt; in the linker flags.</source>
          <target state="translated">El orden en que las bibliotecas est&amp;aacute;n vinculadas importa si las bibliotecas dependen unas de otras. En general, si la biblioteca &lt;code&gt;A&lt;/code&gt; depende de la biblioteca &lt;code&gt;B&lt;/code&gt; , entonces &lt;code&gt;libA&lt;/code&gt; &lt;strong&gt;DEBE&lt;/strong&gt; aparecer antes de &lt;code&gt;libB&lt;/code&gt; en las banderas de enlace.</target>
        </trans-unit>
        <trans-unit id="c77074a1e65055c9b9d790d1eab74306e35ee769" translate="yes" xml:space="preserve">
          <source>The order of linking libraries &lt;strong&gt;does matter&lt;/strong&gt;.</source>
          <target state="translated">El orden de vinculaci&amp;oacute;n de las bibliotecas &lt;strong&gt;s&amp;iacute; importa&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="dfadc843995bf96fc6b50f95dc126fbb8c9952b5" translate="yes" xml:space="preserve">
          <source>The precedence among the syntax rules of translation is specified by the following phases &lt;em&gt;[see footnote]&lt;/em&gt;.</source>
          <target state="translated">La precedencia entre las reglas de sintaxis de la traducci&amp;oacute;n se especifica mediante las siguientes fases &lt;em&gt;[ver nota al pie]&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="24af2bb789cacc1f5d7b2771021236eabff0f64c" translate="yes" xml:space="preserve">
          <source>The process goes like this:</source>
          <target state="translated">El proceso es así:</target>
        </trans-unit>
        <trans-unit id="f9b8eb5b1acfcafd62389be8ee87a10159a198c2" translate="yes" xml:space="preserve">
          <source>The same result if you compile and link in one step, like:</source>
          <target state="translated">El mismo resultado si compilas y enlazas en un solo paso,como:</target>
        </trans-unit>
        <trans-unit id="7ebe1560f137cc486a8b481f98db368bc20a5bb3" translate="yes" xml:space="preserve">
          <source>The source file is decomposed into preprocessing tokens (2.5) and sequences of white-space characters (including comments). &lt;em&gt;[SNIP]&lt;/em&gt;</source>
          <target state="translated">El archivo fuente se descompone en tokens de preprocesamiento (2.5) y secuencias de caracteres de espacio en blanco (incluidos los comentarios). &lt;em&gt;[RECORTE]&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5fe7b5fd3c97072d8d933ccaa526d54b2cbe6724" translate="yes" xml:space="preserve">
          <source>The specified errors occur during this last stage of compilation, most commonly referred to as linking. It basically means that you compiled a bunch of implementation files into object files or libraries and now you want to get them to work together.</source>
          <target state="translated">Los errores especificados se producen durante esta última etapa de la compilación,más comúnmente conocida como vinculación.Básicamente significa que has compilado un montón de archivos de implementación en archivos de objetos o bibliotecas y ahora quieres que funcionen juntos.</target>
        </trans-unit>
        <trans-unit id="d25f8b67d426bc902107dbb9bd3d074093733c3c" translate="yes" xml:space="preserve">
          <source>There is further reading on template friends at &lt;a href=&quot;http://en.cppreference.com/w/cpp/language/friend#Template_friends&quot;&gt;cppreference&lt;/a&gt; and the &lt;a href=&quot;https://isocpp.org/wiki/faq/templates#template-friends&quot;&gt;C++ FAQ&lt;/a&gt;.</source>
          <target state="translated">Hay m&amp;aacute;s informaci&amp;oacute;n sobre la plantilla de amigos en &lt;a href=&quot;http://en.cppreference.com/w/cpp/language/friend#Template_friends&quot;&gt;cppreference&lt;/a&gt; y las &lt;a href=&quot;https://isocpp.org/wiki/faq/templates#template-friends&quot;&gt;preguntas frecuentes de C ++&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="51d2c1022c793ae6c997851c6c2911c491290dcf" translate="yes" xml:space="preserve">
          <source>There is only object file in &lt;code&gt;libmy_lib.a&lt;/code&gt;, namely &lt;code&gt;my_lib.o&lt;/code&gt;, and there's only one thing defined
in &lt;code&gt;my_lib.o&lt;/code&gt;, namely the function &lt;code&gt;hw&lt;/code&gt;.</source>
          <target state="translated">Solo hay un archivo de objeto en &lt;code&gt;libmy_lib.a&lt;/code&gt; , es &lt;code&gt;my_lib.o&lt;/code&gt; , my_lib.o , y solo hay una cosa definida en &lt;code&gt;my_lib.o&lt;/code&gt; , es decir, la funci&amp;oacute;n &lt;code&gt;hw&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fd7c821ca3bddaa894ed4036bbbcbeef36efee4a" translate="yes" xml:space="preserve">
          <source>This &lt;em&gt;process can be seen as a final resort, but is often a good first step&lt;/em&gt;; especially if the code related to the error has recently been added (either locally or from the source repository).</source>
          <target state="translated">Este &lt;em&gt;proceso puede verse como un recurso final, pero a menudo es un buen primer paso&lt;/em&gt; ; especialmente si el c&amp;oacute;digo relacionado con el error se ha agregado recientemente (ya sea localmente o desde el repositorio de origen).</target>
        </trans-unit>
        <trans-unit id="6ad971ec73e134596db3aa5d8e277e263d65c535" translate="yes" xml:space="preserve">
          <source>This behaviour is economical at linktime because the linker doesn't have to ponder
whether a shared library is needed by the program: if it's a shared library,
link it. And most libraries in most linkages are shared libraries. But there are disadvantages too:-</source>
          <target state="translated">Este comportamiento es económico en el momento del enlace porque el enlazador no tiene que ponderar si el programa necesita una biblioteca compartida:si es una biblioteca compartida,enlázala.Y la mayoría de las bibliotecas en la mayoría de los enlaces son bibliotecas compartidas.Pero también hay desventajas:-</target>
        </trans-unit>
        <trans-unit id="b891d63d48abebbaef68ad3645c7352c0b2f6c19" translate="yes" xml:space="preserve">
          <source>This can be done with either;</source>
          <target state="translated">Esto se puede hacer con cualquiera de los dos;</target>
        </trans-unit>
        <trans-unit id="49d63f2a1c780d571d49de8e11cd2c50aaeac867" translate="yes" xml:space="preserve">
          <source>This dual functionality is usually obtained through the use of a macro:</source>
          <target state="translated">Esta doble funcionalidad se obtiene normalmente mediante el uso de una macro:</target>
        </trans-unit>
        <trans-unit id="83d3af1836050ec99f7b707ceaa03f6ebb1c3de7" translate="yes" xml:space="preserve">
          <source>This happens because base class destructors are called when the object is destroyed implicitly, so a definition is required.</source>
          <target state="translated">Esto sucede porque los destructores de la clase base se llaman cuando el objeto se destruye implícitamente,por lo que se requiere una definición.</target>
        </trans-unit>
        <trans-unit id="24bcd3540cf7ff25e654495899de496726d609d7" translate="yes" xml:space="preserve">
          <source>This is one of most confusing error messages that every VC++ programmers have seen time and time again. Let&amp;rsquo;s make things clarity first.</source>
          <target state="translated">Este es uno de los mensajes de error m&amp;aacute;s confusos que todos los programadores de VC ++ han visto una y otra vez. Hagamos las cosas claras primero.</target>
        </trans-unit>
        <trans-unit id="fc953ac37a3ffbcc5b71f7b47d29511fb9fc75f9" translate="yes" xml:space="preserve">
          <source>This is similar to non-&lt;code&gt;virtual&lt;/code&gt; methods with no definition, with the added reasoning that 
the pure declaration generates a dummy vtable and you might get the linker error without using the function:</source>
          <target state="translated">Esto es similar a &lt;code&gt;virtual&lt;/code&gt; m&amp;eacute;todos no virtuales sin definici&amp;oacute;n, con el razonamiento adicional de que la declaraci&amp;oacute;n pura genera una vtable ficticia y puede obtener el error del vinculador sin usar la funci&amp;oacute;n:</target>
        </trans-unit>
        <trans-unit id="f40ecc90472f127aee96a0b27d92ae47b6f13c88" translate="yes" xml:space="preserve">
          <source>This means that when the linker finds &lt;code&gt;-lz&lt;/code&gt; in the linkage sequence, and figures out that this refers 
to the shared library (say) &lt;code&gt;/usr/lib/x86_64-linux-gnu/libz.so&lt;/code&gt;, it wants to know whether any references that it has added to your program that aren't yet defined have definitions that are exported by &lt;code&gt;libz&lt;/code&gt;</source>
          <target state="translated">Esto significa que cuando el enlazador encuentra &lt;code&gt;-lz&lt;/code&gt; en la secuencia de enlace, y descubre que esto se refiere a la biblioteca compartida (por ejemplo) &lt;code&gt;/usr/lib/x86_64-linux-gnu/libz.so&lt;/code&gt; , quiere saber si hay alguna referencia que se ha agregado a su programa que a&amp;uacute;n no est&amp;aacute; definido tiene definiciones que exporta &lt;code&gt;libz&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c7bd9513b51b299b1d7979bb703672c0c803ce8a" translate="yes" xml:space="preserve">
          <source>This searching process is called resolve.</source>
          <target state="translated">Este proceso de búsqueda se llama resolución.</target>
        </trans-unit>
        <trans-unit id="86854a6361abc1cef804c342988694879f4451d0" translate="yes" xml:space="preserve">
          <source>This trade-off has led to the schismatic situation today. Some distros have
changed their GCC linkage rules for shared libraries so that the &lt;em&gt;as-needed&lt;/em&gt;
principle applies for all libraries. Some distros have stuck with the old
way.</source>
          <target state="translated">Esta compensaci&amp;oacute;n ha llevado a la situaci&amp;oacute;n cism&amp;aacute;tica hoy. Algunas distribuciones han cambiado sus reglas de enlace de CCG para bibliotecas compartidas, de modo que el principio &lt;em&gt;seg&amp;uacute;n sea necesario se&lt;/em&gt; aplica a todas las bibliotecas. Algunas distribuciones se han quedado a la antigua usanza.</target>
        </trans-unit>
        <trans-unit id="c6f9c244e10c8db8baeddb7b6f7b289439a89f58" translate="yes" xml:space="preserve">
          <source>This usually happens when two (or more) libraries have a cyclic dependency. Library A attempts to use symbols in B.lib and library B attempts to use symbols from A.lib. Neither exist to start off with. When you attempt to compile A, the link step will fail because it can't find B.lib. A.lib will be generated, but no dll. You then compile B, which will succeed and generate B.lib. Re-compiling A will now work because B.lib is now found.</source>
          <target state="translated">Esto suele ocurrir cuando dos (o más)bibliotecas tienen una dependencia cíclica.La biblioteca A intenta utilizar símbolos de B.lib y la biblioteca B intenta utilizar símbolos de A.lib.Ninguna de las dos existe para empezar.Cuando intente compilar A,el paso de enlace fallará porque no puede encontrar B.lib.Se generará A.lib,pero no dll.Entonces compila B,que tendrá éxito y generará B.lib.La recompilación de A funcionará ahora porque B.lib se encuentra ahora.</target>
        </trans-unit>
        <trans-unit id="dde9568d6caff7f7b573e0d0537eb77fffc36423" translate="yes" xml:space="preserve">
          <source>This way &lt;strong&gt;any function&lt;/strong&gt; contained in file.o and used in main.o that &lt;strong&gt;required &lt;code&gt;path_t&lt;/code&gt;&lt;/strong&gt; gave &quot;undefined reference&quot; errors because &lt;strong&gt;main.o&lt;/strong&gt; referred to &lt;strong&gt;&lt;code&gt;std::filesystem::path&lt;/code&gt;&lt;/strong&gt; but &lt;strong&gt;file.o&lt;/strong&gt; to &lt;strong&gt;&lt;code&gt;std::experimental::filesystem::path&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="translated">De esta manera, &lt;strong&gt;cualquier funci&amp;oacute;n&lt;/strong&gt; contenida en file.o y utilizada en main.o que &lt;strong&gt;requiriera &lt;code&gt;path_t&lt;/code&gt; &lt;/strong&gt; dio errores de &quot;referencia indefinida&quot; porque &lt;strong&gt;main.o se&lt;/strong&gt; refer&amp;iacute;a a &lt;strong&gt; &lt;code&gt;std::filesystem::path&lt;/code&gt; &lt;/strong&gt; pero &lt;strong&gt;file.o&lt;/strong&gt; a &lt;strong&gt; &lt;code&gt;std::experimental::filesystem::path&lt;/code&gt; &lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="a0d35af95e12b0dd0220a819e99aa16dadf25948" translate="yes" xml:space="preserve">
          <source>To correct this, build all the required libraries and projects with a consistent definition of &lt;code&gt;UNICODE&lt;/code&gt; (and &lt;code&gt;_UNICODE&lt;/code&gt;).</source>
          <target state="translated">Para corregir esto, cree todas las bibliotecas y proyectos necesarios con una definici&amp;oacute;n coherente de &lt;code&gt;UNICODE&lt;/code&gt; (y &lt;code&gt;_UNICODE&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="a38dce23594f07d3de4b2b2cc2a5ab210dc62856" translate="yes" xml:space="preserve">
          <source>To correct this, you can declare a template operator before the &lt;code&gt;Foo&lt;/code&gt; type and then declare as a friend, the appropriate instantiation. The syntax is a little awkward, but is looks as follows;</source>
          <target state="translated">Para corregir esto, puede declarar un operador de plantilla antes del tipo &lt;code&gt;Foo&lt;/code&gt; y luego declarar como amigo, la instancia apropiada. La sintaxis es un poco inc&amp;oacute;moda, pero tiene el siguiente aspecto;</target>
        </trans-unit>
        <trans-unit id="b278d2255a2fb839042b27cedfdcde4b13d42e77" translate="yes" xml:space="preserve">
          <source>To find which symbols in an object file are hidden run:</source>
          <target state="translated">Para encontrar qué símbolos de un archivo de objetos están ocultos,ejecute:</target>
        </trans-unit>
        <trans-unit id="f79e5cf712c1cebae4fd911b423526834fd1d23d" translate="yes" xml:space="preserve">
          <source>To fix this I just needed to &lt;strong&gt;change &amp;lt;experimental::filesystem&amp;gt; in file.h to &amp;lt;filesystem&amp;gt;&lt;/strong&gt;.</source>
          <target state="translated">Para solucionar esto, solo necesitaba &lt;strong&gt;cambiar &amp;lt;experimental :: filesystem&amp;gt; en file.h a &amp;lt;filesystem&amp;gt;&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="2243663083f071145668f251171c65a090b9e5f2" translate="yes" xml:space="preserve">
          <source>To fix this, you must move the definition of &lt;code&gt;X::foo&lt;/code&gt; to the header file or some place visible to the translation unit that uses it.</source>
          <target state="translated">Para solucionar esto, debe mover la definici&amp;oacute;n de &lt;code&gt;X::foo&lt;/code&gt; al archivo de encabezado o alg&amp;uacute;n lugar visible para la unidad de traducci&amp;oacute;n que lo utiliza.</target>
        </trans-unit>
        <trans-unit id="ac8e1b45e6bf97148cb8413c306ad6f5794875ec" translate="yes" xml:space="preserve">
          <source>To solve the issue, i built the MyProject as a LIB, and linked TestProject to this .lib file (i copy paste the generated .lib file into the TestProject folder). I can then build again MyProject as a DLL. It is compiling since the lib to which TestProject is linked does contain code for all methods in classes in MyProject.</source>
          <target state="translated">Para resolver el problema,construí el MyProject como una LIB,y enlacé TestProject a este archivo .lib (copié y pegué el archivo .lib generado en la carpeta de TestProject).Entonces puedo construir de nuevo MyProject como una DLL.Se está compilando ya que la lib a la que está vinculado TestProject contiene código para todos los métodos de las clases de MyProject.</target>
        </trans-unit>
        <trans-unit id="1f2f0e08ff5b2e59a5a31d4b807b32101fba5f64" translate="yes" xml:space="preserve">
          <source>Translated translation units and instantiation units are combined as follows: &lt;em&gt;[SNIP]&lt;/em&gt;</source>
          <target state="translated">Las unidades de traducci&amp;oacute;n traducida y las unidades de instanciaci&amp;oacute;n se combinan de la siguiente manera: &lt;em&gt;[SNIP]&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a7aef8e7498486de3cd6699dbe069fa0c309048a" translate="yes" xml:space="preserve">
          <source>Try start a new project,
copying all source code from the original one.</source>
          <target state="translated">Intenta empezar un nuevo proyecto,copiando todo el código fuente del original.</target>
        </trans-unit>
        <trans-unit id="7715c2c8a7f85ca33fe93cc7817eac47532e5dc6" translate="yes" xml:space="preserve">
          <source>Try to link your program with &lt;code&gt;libz&lt;/code&gt; and fail:</source>
          <target state="translated">Intente vincular su programa con &lt;code&gt;libz&lt;/code&gt; y falle:</target>
        </trans-unit>
        <trans-unit id="af5e2c5c3e6cb9cebd2829b0e884257cface4ba2" translate="yes" xml:space="preserve">
          <source>Under &lt;strong&gt;MSVS&lt;/strong&gt;, files added to a project automatically have their object files linked together and a &lt;code&gt;lib&lt;/code&gt; file would be generated (in common usage). To use the symbols in a separate project, you'd 
need to include the &lt;code&gt;lib&lt;/code&gt; files in the project settings. This is done in the Linker section of the project properties, in &lt;code&gt;Input -&amp;gt; Additional Dependencies&lt;/code&gt;. (the path to the &lt;code&gt;lib&lt;/code&gt; file should be
added in &lt;code&gt;Linker -&amp;gt; General -&amp;gt; Additional Library Directories&lt;/code&gt;) When using a third-party library that is provided with a &lt;code&gt;lib&lt;/code&gt; file, failure to do so usually results in the error.</source>
          <target state="translated">Bajo &lt;strong&gt;MSVS&lt;/strong&gt; , los archivos agregados a un proyecto autom&amp;aacute;ticamente tienen sus archivos de objeto vinculados entre s&amp;iacute; y se generar&amp;iacute;a un archivo &lt;code&gt;lib&lt;/code&gt; (en uso com&amp;uacute;n). Para usar los s&amp;iacute;mbolos en un proyecto separado, debe incluir los archivos &lt;code&gt;lib&lt;/code&gt; en la configuraci&amp;oacute;n del proyecto. Esto se hace en la secci&amp;oacute;n Enlace de las propiedades del proyecto, en &lt;code&gt;Input -&amp;gt; Additional Dependencies&lt;/code&gt; . (la ruta al archivo &lt;code&gt;lib&lt;/code&gt; debe agregarse en &lt;code&gt;Linker -&amp;gt; General -&amp;gt; Additional Library Directories&lt;/code&gt; ) Cuando se usa una biblioteca de terceros que se proporciona con un archivo &lt;code&gt;lib&lt;/code&gt; , el no hacerlo generalmente produce el error.</target>
        </trans-unit>
        <trans-unit id="09353e91d6dc1b681cb300414136507aacd9dc17" translate="yes" xml:space="preserve">
          <source>Under &lt;strong&gt;gcc&lt;/strong&gt; you would specify all object files that are to be linked together in the command line, or compile the implementation files together.</source>
          <target state="translated">En &lt;strong&gt;gcc&lt;/strong&gt; , especificar&amp;iacute;a todos los archivos de objetos que se vincular&amp;aacute;n en la l&amp;iacute;nea de comandos o compilar&amp;aacute; los archivos de implementaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="e8e07a144ac894fbd4a815eef8cb126c9d8444ca" translate="yes" xml:space="preserve">
          <source>Unspecialized templates must have their definitions visible to all translation units that use them. That means you can't separate the definition of a template
to an implementation file. If you must separate the implementation, the usual workaround is to have an &lt;code&gt;impl&lt;/code&gt; file which you include at the end of the header that
declares the template. A common situation is:</source>
          <target state="translated">Las plantillas no especializadas deben tener sus definiciones visibles para todas las unidades de traducci&amp;oacute;n que las utilizan. Eso significa que no puede separar la definici&amp;oacute;n de una plantilla a un archivo de implementaci&amp;oacute;n. Si debe separar la implementaci&amp;oacute;n, la soluci&amp;oacute;n habitual es tener un archivo &lt;code&gt;impl&lt;/code&gt; que incluya al final del encabezado que declara la plantilla. Una situaci&amp;oacute;n com&amp;uacute;n es:</target>
        </trans-unit>
        <trans-unit id="626a6bfb69f923133176d2288c20c9ad3e266875" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;#pragma once&lt;/code&gt; for allowing compiler not to include one header if it was already included in the current .cpp which are compiled</source>
          <target state="translated">Use &lt;code&gt;#pragma once&lt;/code&gt; para permitir que el compilador no incluya un encabezado si ya estaba incluido en el .cpp actual que se compila</target>
        </trans-unit>
        <trans-unit id="652d6febf33e65c27e03abc9bf57e88d8db07539" translate="yes" xml:space="preserve">
          <source>Use the linker to help diagnose the error</source>
          <target state="translated">Utilice el enlazador para ayudar a diagnosticar el error</target>
        </trans-unit>
        <trans-unit id="3df12d1763a76db1eb5f9e0c7142ced823b24c14" translate="yes" xml:space="preserve">
          <source>Visual Studio search into file &lt;strong&gt;.vcxproj&lt;/strong&gt; and start compiling each file which has the extension .cpp. Order of compilation is undefined.So you must not assume that the file main.cpp is compiled first</source>
          <target state="translated">Visual Studio busque en el archivo &lt;strong&gt;.vcxproj&lt;/strong&gt; y comience a compilar cada archivo que tenga la extensi&amp;oacute;n .cpp. El orden de compilaci&amp;oacute;n no est&amp;aacute; definido, por lo que no debe suponer que el archivo main.cpp se compila primero</target>
        </trans-unit>
        <trans-unit id="bc6493aa79682062f1e35506dac73e5d517d7fa9" translate="yes" xml:space="preserve">
          <source>What are undefined reference/unresolved external symbol errors? What are common causes and how to fix/prevent them?</source>
          <target state="translated">¿Qué son los errores de símbolos externos no definidos de referencia no resueltos? ¿Cuáles son las causas comunes y cómo se pueden evitar?</target>
        </trans-unit>
        <trans-unit id="db7e500851b237b0a75617adc43159c4e601d013" translate="yes" xml:space="preserve">
          <source>What are you doing wrong?</source>
          <target state="translated">¿Qué estás haciendo mal?</target>
        </trans-unit>
        <trans-unit id="2d7204271f918e6dc824c4de713ad791b4dc1110" translate="yes" xml:space="preserve">
          <source>What is an undefined reference/unresolved external symbol error and how do I fix it</source>
          <target state="translated">¿Qué es un error de referencia externa sin resolver y cómo lo arreglo?</target>
        </trans-unit>
        <trans-unit id="4632922517e4c4150df04140a0a11bc46ff27b5a" translate="yes" xml:space="preserve">
          <source>When a translation unit is compiled with &lt;code&gt;-fvisibility=hidden&lt;/code&gt; the resulting symbols have still external linkage (shown with upper case symbol type by &lt;code&gt;nm&lt;/code&gt;) and can be used for external linkage without problem if the object files become part of a static libraries. The linkage becomes local only when the object files are linked into a shared library.</source>
          <target state="translated">Cuando una unidad de traducci&amp;oacute;n se compila con &lt;code&gt;-fvisibility=hidden&lt;/code&gt; , los s&amp;iacute;mbolos resultantes todav&amp;iacute;a tienen un enlace externo (se muestra con el tipo de s&amp;iacute;mbolo en may&amp;uacute;scula por &lt;code&gt;nm&lt;/code&gt; ) y se pueden usar para un enlace externo sin problema si los archivos de objeto se vuelven parte de una biblioteca est&amp;aacute;tica. El enlace se vuelve local solo cuando los archivos de objeto est&amp;aacute;n vinculados a una biblioteca compartida.</target>
        </trans-unit>
        <trans-unit id="2c08affaeeed528ac9c1fa3dfa4effce084687ac" translate="yes" xml:space="preserve">
          <source>When linking against shared libraries, make sure that the used symbols are not hidden.</source>
          <target state="translated">Al enlazar con bibliotecas compartidas,asegúrese de que los símbolos utilizados no estén ocultos.</target>
        </trans-unit>
        <trans-unit id="9ca2a7655109619c5715fb8ca7ccc73f3615a640" translate="yes" xml:space="preserve">
          <source>When you run the command above, &lt;code&gt;gcc&lt;/code&gt; figures out that you want compilation +
linkage. So behind the scenes, it generates a compilation command, and runs
it, then generates a linkage command, and runs it, as if &lt;em&gt;you&lt;/em&gt; had run the
two commands:</source>
          <target state="translated">Cuando ejecuta el comando anterior, &lt;code&gt;gcc&lt;/code&gt; descubre que desea compilaci&amp;oacute;n + vinculaci&amp;oacute;n. Entonces, detr&amp;aacute;s de escena, genera un comando de compilaci&amp;oacute;n y lo ejecuta, luego genera un comando de enlace y lo ejecuta, como si hubiera ejecutado los dos comandos:</target>
        </trans-unit>
        <trans-unit id="4567f3b27b39712303adc4658d2e89c9f3ed6ec0" translate="yes" xml:space="preserve">
          <source>When you try to link the program like:</source>
          <target state="translated">Cuando intentas vincular el programa como:</target>
        </trans-unit>
        <trans-unit id="b31400492742589d7742b79425b053a4e29f6f8f" translate="yes" xml:space="preserve">
          <source>When you use the template to make sure you include the definition of each template function in the header file for allowing the compiler to generate appropriate code for any instantiations.</source>
          <target state="translated">Cuando utilice la plantilla,asegúrese de incluir la definición de cada función de la plantilla en el archivo de cabecera para permitir que el compilador genere el código apropiado para cualquier instanciación.</target>
        </trans-unit>
        <trans-unit id="e4d80ad940bb876bd92a024b5ff663f048b0473e" translate="yes" xml:space="preserve">
          <source>When your include paths are different</source>
          <target state="translated">Cuando sus caminos de inclusión son diferentes</target>
        </trans-unit>
        <trans-unit id="03365de1caa8827769bae8158a775de517156e6d" translate="yes" xml:space="preserve">
          <source>Which roughly corresponds to Windows'/MSVC-version:</source>
          <target state="translated">Lo que corresponde aproximadamente a la versión MSVC de Windows:</target>
        </trans-unit>
        <trans-unit id="246959a741f4264372238420ebdad97bd89a88ec" translate="yes" xml:space="preserve">
          <source>White-space characters separating tokens are no longer significant. Each preprocessing token is converted into a token. (2.7). The
  resulting tokens are syntactically and semantically analyzed and
  translated as a translation unit. &lt;em&gt;[SNIP]&lt;/em&gt;</source>
          <target state="translated">Los caracteres de espacio en blanco que separan las fichas ya no son significativos. Cada token de preprocesamiento se convierte en un token. (2.7) Los tokens resultantes se analizan sint&amp;aacute;ctica y sem&amp;aacute;nticamente y se traducen como una unidad de traducci&amp;oacute;n. &lt;em&gt;[RECORTE]&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b3057b9b641cbee71aae82fe2b981cf8b49a7f80" translate="yes" xml:space="preserve">
          <source>Why do I still get this problem even if I compile-and-link at the same time?</source>
          <target state="translated">¿Por qué sigo teniendo este problema aunque recopile y vincule al mismo tiempo?</target>
        </trans-unit>
        <trans-unit id="4c6dfe4286bb4038ff6570e5b46f04c49bbf7bf5" translate="yes" xml:space="preserve">
          <source>You are trying to compile and link your program with the GCC toolchain.</source>
          <target state="translated">Está intentando compilar y enlazar su programa con la cadena de herramientas GCC.</target>
        </trans-unit>
        <trans-unit id="91c1836cb1d64ed1ad44ab634dca30d630520583" translate="yes" xml:space="preserve">
          <source>You build your static library:</source>
          <target state="translated">Construyes tu biblioteca estática:</target>
        </trans-unit>
        <trans-unit id="2fd7e03d89627c87bdf0cf1f8eddb4e44c4ee89f" translate="yes" xml:space="preserve">
          <source>You can also use &lt;code&gt;nm&lt;/code&gt; with the option &lt;code&gt;-C&lt;/code&gt; to demangle the names (if C++ was used).</source>
          <target state="translated">Tambi&amp;eacute;n puede usar &lt;code&gt;nm&lt;/code&gt; con la opci&amp;oacute;n &lt;code&gt;-C&lt;/code&gt; para solicitar los nombres (si se utiliz&amp;oacute; C ++).</target>
        </trans-unit>
        <trans-unit id="eb4ed51d89a6db08d7aac2b244cdb0601cb7bc64" translate="yes" xml:space="preserve">
          <source>You can check whether the symbols your are looking for are external by invoking:</source>
          <target state="translated">Puedes comprobar si los símbolos que buscas son externos invocando:</target>
        </trans-unit>
        <trans-unit id="e80a1a5e2677479f692a83c2c89c313fa9e2dc07" translate="yes" xml:space="preserve">
          <source>You can similary import/export classes:</source>
          <target state="translated">Se pueden similiar las clases de importación y exportación:</target>
        </trans-unit>
        <trans-unit id="e3de844a4d66034d092d8886a7ce6acf2d81f628" translate="yes" xml:space="preserve">
          <source>You compile your program:</source>
          <target state="translated">Compila tu programa:</target>
        </trans-unit>
        <trans-unit id="5f4c7708a6df0a34a544a31a0505e1654dab7e88" translate="yes" xml:space="preserve">
          <source>You may have missed to choose the right project type with your actual IDE. The IDE may want to bind e.g. Windows Application projects to such entry point function (as specified in the missing reference above), instead of the commonly used &lt;code&gt;int main(int argc, char** argv);&lt;/code&gt; signature.</source>
          <target state="translated">Es posible que no haya elegido el tipo de proyecto correcto con su IDE real. El IDE puede querer vincular, por ejemplo, proyectos de aplicaciones de Windows a dicha funci&amp;oacute;n de punto de entrada (como se especifica en la referencia que falta m&amp;aacute;s arriba), en lugar del &lt;code&gt;int main(int argc, char** argv);&lt;/code&gt; com&amp;uacute;nmente utilizado (int argc, char ** argv); firma.</target>
        </trans-unit>
        <trans-unit id="9e82259a675941d9948a2eeb64a675ff5f0bac6e" translate="yes" xml:space="preserve">
          <source>You may see a message like:</source>
          <target state="translated">Puede que veas un mensaje como:</target>
        </trans-unit>
        <trans-unit id="0e60f4f947984fbf84f6c4fd28e3b1b296e997d0" translate="yes" xml:space="preserve">
          <source>You might ask how one ends up in a situation like that? &lt;strong&gt;Include paths&lt;/strong&gt; of course! If when compiling the shared library, the include path leads to &lt;code&gt;header1.h&lt;/code&gt; and you end up using &lt;code&gt;header2.h&lt;/code&gt; in your own program, you'll be left scratching your header wondering what happened (pun intended).</source>
          <target state="translated">&amp;iquest;Podr&amp;iacute;a preguntar c&amp;oacute;mo termina uno en una situaci&amp;oacute;n como esa? &lt;strong&gt;Incluye caminos,&lt;/strong&gt; por supuesto! Si al compilar la biblioteca compartida, la ruta de inclusi&amp;oacute;n conduce a &lt;code&gt;header1.h&lt;/code&gt; y termina usando &lt;code&gt;header2.h&lt;/code&gt; en su propio programa, se quedar&amp;aacute; rasc&amp;aacute;ndose el encabezado pregunt&amp;aacute;ndose qu&amp;eacute; sucedi&amp;oacute; (juego de palabras).</target>
        </trans-unit>
        <trans-unit id="2d39d52ae6b215a68d9cf55a1d98a408fa72b8cc" translate="yes" xml:space="preserve">
          <source>You try to link it with &lt;code&gt;libmy_lib.a&lt;/code&gt; and fail:</source>
          <target state="translated">Intenta vincularlo con &lt;code&gt;libmy_lib.a&lt;/code&gt; y falla:</target>
        </trans-unit>
        <trans-unit id="ac3540a5f0b565ea8381987f3a836626c11a6c8e" translate="yes" xml:space="preserve">
          <source>Your linkage consumes libraries before the object files that refer to them</source>
          <target state="translated">Su vinculación consume las bibliotecas antes que los archivos de objetos que se refieren a ellas</target>
        </trans-unit>
        <trans-unit id="374fcc2688ffa3e097d03ef0cda91f4abae3f9a6" translate="yes" xml:space="preserve">
          <source>Your linkage fails with &lt;code&gt;undefined reference to&lt;/code&gt;&lt;em&gt;something&lt;/em&gt; errors.</source>
          <target state="translated">Su enlace falla con una &lt;code&gt;undefined reference to&lt;/code&gt; &lt;em&gt;algo&lt;/em&gt; errores.</target>
        </trans-unit>
        <trans-unit id="a97d5c4fcdbab0b3e334224158a61c8ab8cdf3b8" translate="yes" xml:space="preserve">
          <source>Your linkage specifies all of the necessary libraries and library search paths</source>
          <target state="translated">Su enlace especifica todas las bibliotecas necesarias y las rutas de búsqueda de las bibliotecas</target>
        </trans-unit>
        <trans-unit id="1ede8f96ef941a4cd4a8b47db4fd4ec6dee457d7" translate="yes" xml:space="preserve">
          <source>Your program wants to refer to just one thing that has a definition exported by &lt;code&gt;libz&lt;/code&gt;,
namely the function &lt;code&gt;zlibVersion&lt;/code&gt;, which is referred to just once, in &lt;code&gt;eg2.c&lt;/code&gt;.
If the linker adds that reference to your program, and then finds the definition
exported by &lt;code&gt;libz&lt;/code&gt;, the reference is &lt;em&gt;resolved&lt;/em&gt;</source>
          <target state="translated">Su programa quiere referirse solo a una cosa que tiene una definici&amp;oacute;n exportada por &lt;code&gt;libz&lt;/code&gt; , a saber, la funci&amp;oacute;n &lt;code&gt;zlibVersion&lt;/code&gt; , a la que se hace referencia solo una vez, en &lt;code&gt;eg2.c&lt;/code&gt; . Si el vinculador agrega esa referencia a su programa y luego encuentra la definici&amp;oacute;n exportada por &lt;code&gt;libz&lt;/code&gt; , la referencia se &lt;em&gt;resuelve&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6630645888101f4b1ebaafc85246e04a796c1112" translate="yes" xml:space="preserve">
          <source>[1] By project I mean a set of source files that are linked together to produce either a library or an executable.</source>
          <target state="translated">1]Por proyecto me refiero a un conjunto de archivos fuente que se enlazan entre sí para producir una biblioteca o un ejecutable.</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">and</target>
        </trans-unit>
        <trans-unit id="73825e2f27276ce7cc0cb99fe4926aefead625b6" translate="yes" xml:space="preserve">
          <source>and rebuild an object file</source>
          <target state="translated">y reconstruir un archivo de objetos</target>
        </trans-unit>
        <trans-unit id="3a85961b64655acfc507843ec1ba2838a9155bab" translate="yes" xml:space="preserve">
          <source>and run it</source>
          <target state="translated">y la ejecute.</target>
        </trans-unit>
        <trans-unit id="6ab5682fa6ec7ce3b574c508f69fdd94179f902d" translate="yes" xml:space="preserve">
          <source>and similar errors with &lt;strong&gt;Microsoft Visual Studio&lt;/strong&gt;:</source>
          <target state="translated">y errores similares con &lt;strong&gt;Microsoft Visual Studio&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="73d70fffc648342f33ca44795d6cc820d7069f22" translate="yes" xml:space="preserve">
          <source>and tells the compiler that the definition is in one of the libraries you linked against (also see &lt;strong&gt;1)&lt;/strong&gt;).</source>
          <target state="translated">y le dice al compilador que la definici&amp;oacute;n est&amp;aacute; en una de las bibliotecas con las que se vincul&amp;oacute; (ver tambi&amp;eacute;n &lt;strong&gt;1)&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a885b4bb68e35a1301318ebf72bf542d958c8233" translate="yes" xml:space="preserve">
          <source>and tells the compiler to export the function, as the current module contains its definition. When including the declaration in a different module, it would expand to</source>
          <target state="translated">y le dice al compilador que exporte la función,ya que el módulo actual contiene su definición.Al incluir la declaración en un módulo diferente,se ampliaría a</target>
        </trans-unit>
        <trans-unit id="8081e608d396eb9fd48db5d9cb98df468f9b43c5" translate="yes" xml:space="preserve">
          <source>and you attempt to use it in a C++ program with C++ linkage.</source>
          <target state="translated">e intentas usarlo en un programa de C++con enlace C++.</target>
        </trans-unit>
        <trans-unit id="c02ceb78ff4863ee1a75d232c4f53af56b182ec9" translate="yes" xml:space="preserve">
          <source>becomes:</source>
          <target state="translated">becomes:</target>
        </trans-unit>
        <trans-unit id="f799f07bf625ffbca0fe04fdd368917957d04df0" translate="yes" xml:space="preserve">
          <source>correct would be to use a header file and include it in file2.cpp &lt;em&gt;and&lt;/em&gt; file1.cpp</source>
          <target state="translated">lo correcto ser&amp;iacute;a usar un archivo de encabezado e incluirlo en file2.cpp &lt;em&gt;y&lt;/em&gt; file1.cpp</target>
        </trans-unit>
        <trans-unit id="ad6a22cf9c1840cb2434e3d3948f70d3d82ff7a2" translate="yes" xml:space="preserve">
          <source>expands to</source>
          <target state="translated">se expande a</target>
        </trans-unit>
        <trans-unit id="8597eabf07801651c88304087bf20f69ac103fa3" translate="yes" xml:space="preserve">
          <source>i.e. you should have like below</source>
          <target state="translated">es decir,deberías tener como abajo</target>
        </trans-unit>
        <trans-unit id="6c8457cd65849bf5a9285f8b862e990e1a44ac09" translate="yes" xml:space="preserve">
          <source>instead of:</source>
          <target state="translated">en lugar de:</target>
        </trans-unit>
        <trans-unit id="4f0aa52d656a3d75867f784b7e9c5d23bf1321c0" translate="yes" xml:space="preserve">
          <source>link</source>
          <target state="translated">link</target>
        </trans-unit>
        <trans-unit id="293dce46f676980a9b1278e7251ff73eb7fa797d" translate="yes" xml:space="preserve">
          <source>note: i use g++ and Linux and all examples is for it</source>
          <target state="translated">nota:uso g++y Linux y todos los ejemplos son para ello</target>
        </trans-unit>
        <trans-unit id="36c55470c929c5d5f4d41ac78ab446fd5b77009b" translate="yes" xml:space="preserve">
          <source>now local_var_name has Bind GLOBAL (was LOCAL)</source>
          <target state="translated">ahora local_var_name tiene Bind GLOBAL (era LOCAL)</target>
        </trans-unit>
        <trans-unit id="fb74205393b3bb80203f54f7a8c9bcb830e8763e" translate="yes" xml:space="preserve">
          <source>ok, see readelf output (symbols)</source>
          <target state="translated">ok,vea la salida de la lectura (símbolos)</target>
        </trans-unit>
        <trans-unit id="3a328af911638e5bfc90b4e0e69e9c25737cc9a5" translate="yes" xml:space="preserve">
          <source>ok, we hack it :)</source>
          <target state="translated">Ok,lo hackeamos :)</target>
        </trans-unit>
        <trans-unit id="2328aeacf83c4c55bc1147be999690bfc6241ad3" translate="yes" xml:space="preserve">
          <source>or outside:</source>
          <target state="translated">o fuera:</target>
        </trans-unit>
        <trans-unit id="ceeb2cffd5c7262a750a941ceb1e733b45fbb7ca" translate="yes" xml:space="preserve">
          <source>src2.cpp exports nothing and we have seen no its symbols</source>
          <target state="translated">src2.cpp no exporta nada y no hemos visto sus símbolos</target>
        </trans-unit>
        <trans-unit id="2f0f1d7be52efe820ea8f283992862328386c64a" translate="yes" xml:space="preserve">
          <source>surely gcc has to compile &lt;code&gt;eg1.c&lt;/code&gt; first, and then link the resulting
object file with &lt;code&gt;libmy_lib.a&lt;/code&gt;.  So how can it not know that object file
is needed when it's doing the linking?</source>
          <target state="translated">seguramente gcc tiene que compilar &lt;code&gt;eg1.c&lt;/code&gt; primero, y luego vincular el archivo objeto resultante con &lt;code&gt;libmy_lib.a&lt;/code&gt; . Entonces, &amp;iquest;c&amp;oacute;mo puede no saber que se necesita el archivo de objeto cuando est&amp;aacute; haciendo el enlace?</target>
        </trans-unit>
        <trans-unit id="e01b8bf7137076c13f10eccf3ac7d89d9ac67196" translate="yes" xml:space="preserve">
          <source>the hidden/local symbols are shown by &lt;code&gt;nm&lt;/code&gt; with lowercase symbol type, for example &lt;code&gt;t&lt;/code&gt; instead of `T for code-section:</source>
          <target state="translated">los s&amp;iacute;mbolos ocultos / locales se muestran mediante &lt;code&gt;nm&lt;/code&gt; con un tipo de s&amp;iacute;mbolo en min&amp;uacute;scula, por ejemplo &lt;code&gt;t&lt;/code&gt; en lugar de `T para la secci&amp;oacute;n de c&amp;oacute;digo:</target>
        </trans-unit>
        <trans-unit id="5e0942b4293aac626166820cf457118f4f66b257" translate="yes" xml:space="preserve">
          <source>the linker &lt;em&gt;has not added&lt;/em&gt;&lt;code&gt;eg1.o&lt;/code&gt;&lt;em&gt;to the program&lt;/em&gt; when it sees
&lt;code&gt;-lmy_lib&lt;/code&gt;. Because at that point, it has not seen &lt;code&gt;eg1.o&lt;/code&gt;.
Your program does not yet make any references to &lt;code&gt;hw&lt;/code&gt;: it
does not yet make any references &lt;em&gt;at all&lt;/em&gt;, because all the references it makes
are in &lt;code&gt;eg1.o&lt;/code&gt;.</source>
          <target state="translated">el enlazador &lt;em&gt;no ha agregado&lt;/em&gt; &lt;code&gt;eg1.o&lt;/code&gt; &lt;em&gt;al programa&lt;/em&gt; cuando ve &lt;code&gt;-lmy_lib&lt;/code&gt; . Porque en ese punto, no ha visto &lt;code&gt;eg1.o&lt;/code&gt; . Su programa a&amp;uacute;n no hace ninguna referencia a &lt;code&gt;hw&lt;/code&gt; : todav&amp;iacute;a no hace ninguna referencia, porque todas las referencias que hace est&amp;aacute;n en &lt;code&gt;eg1.o&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="474bf0c29b756b32c6ea11e2c24831191c57e8a2" translate="yes" xml:space="preserve">
          <source>the order of events is wrong in just the same way as with example 1.
At the point when the linker finds &lt;code&gt;-lz&lt;/code&gt;, there are &lt;em&gt;no&lt;/em&gt; references to anything
in the program: they are all in &lt;code&gt;eg2.o&lt;/code&gt;, which has not yet been seen. So the
linker decides it has no use for &lt;code&gt;libz&lt;/code&gt;. When it reaches &lt;code&gt;eg2.o&lt;/code&gt;, adds it to the program,
and then has undefined reference to &lt;code&gt;zlibVersion&lt;/code&gt;, the linkage sequence is finished;
that reference is unresolved, and the linkage fails.</source>
          <target state="translated">el orden de los eventos es incorrecto de la misma manera que en el ejemplo 1. En el momento en que el enlazador encuentra &lt;code&gt;-lz&lt;/code&gt; , no &lt;em&gt;hay&lt;/em&gt; referencias a nada en el programa: todos est&amp;aacute;n en &lt;code&gt;eg2.o&lt;/code&gt; , que a&amp;uacute;n no se ha visto . Entonces el enlazador decide que no tiene uso para &lt;code&gt;libz&lt;/code&gt; . Cuando alcanza &lt;code&gt;eg2.o&lt;/code&gt; , lo agrega al programa y luego tiene una referencia indefinida a &lt;code&gt;zlibVersion&lt;/code&gt; , la secuencia de enlace finaliza; esa referencia no est&amp;aacute; resuelta y el enlace falla.</target>
        </trans-unit>
        <trans-unit id="4374aaee247fb237ce6c97d5c8d64bbe474d16de" translate="yes" xml:space="preserve">
          <source>to</source>
          <target state="translated">to</target>
        </trans-unit>
        <trans-unit id="7979c3fe74f25deb6892e5101b26610dc97c75eb" translate="yes" xml:space="preserve">
          <source>to declare function foo(), and call it in another function body, say &lt;code&gt;bar()&lt;/code&gt;:</source>
          <target state="translated">para declarar la funci&amp;oacute;n foo () y llamarla en otro cuerpo de funci&amp;oacute;n, por ejemplo &lt;code&gt;bar()&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="ec79436cd4ee8fbface339724362fc515088bfd8" translate="yes" xml:space="preserve">
          <source>undefined reference to `WinMain@16'</source>
          <target state="translated">referencia indefinida a &quot;WinMain@16</target>
        </trans-unit>
        <trans-unit id="b888bea9cd6729fbf7ebdc759e10b2f2dacf405c" translate="yes" xml:space="preserve">
          <source>we have changed the visibility of local_var_name and set its value to 456789.
Try to build an object file from it</source>
          <target state="translated">hemos cambiado la visibilidad de local_var_name y fijado su valor en 456789.Intenta construir un archivo objeto a partir de él</target>
        </trans-unit>
        <trans-unit id="a3bc4f467d60d6e7137cb42e5a2693f58a0ffef5" translate="yes" xml:space="preserve">
          <source>which is just example 2 again.</source>
          <target state="translated">que es sólo el ejemplo 2 otra vez.</target>
        </trans-unit>
        <trans-unit id="416857d2967c5146284d55951fb33a942176a9f1" translate="yes" xml:space="preserve">
          <source>will generate the following errors with &lt;strong&gt;GCC&lt;/strong&gt;:</source>
          <target state="translated">generar&amp;aacute; los siguientes errores con &lt;strong&gt;GCC&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="767ebf562599ebd8219e0bce2533fd52b533baeb" translate="yes" xml:space="preserve">
          <source>works just fine for you!</source>
          <target state="translated">funciona muy bien para ti!</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
