<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/1200621">
    <body>
      <group id="1200621">
        <trans-unit id="cadc0c0784f280561b6250baabac0758d79cd080" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Another Way:&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;別の方法：&lt;/font&gt;&lt;/font&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="244d7fa9531947c7afd08896b5eba15fa961d083" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Type[]&lt;/code&gt; is the &lt;em&gt;type&lt;/em&gt; of the &lt;em&gt;variable&lt;/em&gt; called name (&quot;name&quot; is called the &lt;em&gt;identifier&lt;/em&gt;).  The literal &quot;Type&quot; is the base type, and the brackets mean this is the array type of that base. Array types are in turn types of their own, which allows you to make multidimensional arrays like &lt;code&gt;Type[][]&lt;/code&gt; (the array type of Type[]). The keyword &lt;code&gt;new&lt;/code&gt; says to allocate memory for the new array.  The number between the bracket says how large the new array will be and how much memory to allocate. For instance, if Java knows that the base type &lt;code&gt;Type&lt;/code&gt; takes 32 bytes, and you want an array of size 5, it needs to internally allocate 32 * 5 = 160 bytes.</source>
          <target state="translated">&lt;code&gt;Type[]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;nameと呼ばれる&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;変数&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;タイプ&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（ &quot;name&quot;は&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;identifier&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と呼ばれ&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）。リテラルの「タイプ」はベースタイプであり、角かっこはこれがそのベースの配列タイプであることを意味します。配列型は、独自の型であり、&lt;/font&gt; &lt;code&gt;Type[][]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;（&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Type []&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の配列型）の&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ような多次元配列を作成できます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。キーワード&lt;/font&gt; &lt;code&gt;new&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、新しい配列にメモリを割り当てることを示します。括弧内の数字は、新しい配列の大きさと割り当てるメモリの量を示しています。たとえば、基本型&lt;/font&gt; &lt;code&gt;Type&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;が32バイトを取る&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ことをJavaが知っていて、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サイズ5の配列が必要な&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;場合、Javaは&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;内部的に32 * 5 = 160バイトを割り当てる必要があります。&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5185e05a799c32e8a959f347048b2f6b0cecd4d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;datatype&lt;/code&gt; should be in lower case.</source>
          <target state="translated">&lt;code&gt;datatype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は小文字でなければなりません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="234e109fd1b45d72c8300122bfec23c97b646b4a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;variableName&lt;/code&gt; is a reference to the array meaning that manipulating &lt;code&gt;variableName&lt;/code&gt; will manipulate &lt;code&gt;arrayName&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;variableName&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は配列への参照&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;つまり、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;variableName&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を操作すると&lt;/font&gt; &lt;code&gt;arrayName&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;が操作され&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a2783850360e42427e548e524e84f2d0b0b3c3bf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Dynamic Array:&lt;/strong&gt; No size limit is considered for this. (Pure dynamic arrays do not exist in Java. Instead, List is most encouraged)</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;動的配列：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サイズ制限は考慮されていません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（純粋な動的配列はJavaには存在しません。代わりに、リストを使用することをお勧めします）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b8e66cca0e8c233ada64437e2e49beed1617ed74" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;IMPORTANT: For referenced types, the default value stored in the array is null.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;重要：参照される型の場合、配列に格納されているデフォルト値はnullです。&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9544ba285ba91e391066529df8f36822f06c6b6b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Initializing an array means specifying the size of it.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列の初期化とは、配列のサイズを指定することです。&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d503246f642baf69b096a25b60a26d07f3fea8fb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Instantiating an Array in Java&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Javaでの配列のインスタンス化&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c88b408ed39fa66458056145fee9cfcc7d539f6a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;One-Dimensional Arrays :&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;1次元配列：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="96025033606dc9bbc2268b665a0b4d82540d86cc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Similar for multi-dimensional arrays&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;多次元配列と同様&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6aad8a0da464b440805dc35fd21c8cf8dab98940" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Static Array:&lt;/strong&gt; Fixed size array (Its size should be declared at start and can not be changed later)</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;静的配列：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;固定サイズの配列（そのサイズは最初に宣言する必要があり、後で変更することはできません）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="db22b2c5126204d225a05684d4dcf50ea5529c8f" translate="yes" xml:space="preserve">
          <source>Also, in case you want something more dynamic there is the List interface.  This will not perform as well, but is more flexible:</source>
          <target state="translated">また、よりダイナミックなものが必要な場合には、リストインターフェースがあります。これはパフォーマンスは劣りますが、より柔軟性があります。</target>
        </trans-unit>
        <trans-unit id="326dff1f84cdca33ec4cd86f8765659aceea2acf" translate="yes" xml:space="preserve">
          <source>Alternatively,</source>
          <target state="translated">Alternatively,</target>
        </trans-unit>
        <trans-unit id="c85c58dec99e5ab948d510b95570ff7548c7b434" translate="yes" xml:space="preserve">
          <source>Alternatively:</source>
          <target state="translated">Alternatively:</target>
        </trans-unit>
        <trans-unit id="ee43268c689363ed09ec9912c144be55d59b1dd4" translate="yes" xml:space="preserve">
          <source>An array of length 0</source>
          <target state="translated">長さ 0 の配列。</target>
        </trans-unit>
        <trans-unit id="164a20a8f3a572ab64c6fa43f452d94ab4407d27" translate="yes" xml:space="preserve">
          <source>And this one, for an initialized array:</source>
          <target state="translated">そしてこれは、初期化された配列のためのものです。</target>
        </trans-unit>
        <trans-unit id="95dc0492001977cf1b2f1f04376b2fc0ad777990" translate="yes" xml:space="preserve">
          <source>Another important feature is &lt;strong&gt;covariant&lt;/strong&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;もう1つの重要な機能は&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;共変です&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7d71f7145f690775938559b04d64509bcfb08592" translate="yes" xml:space="preserve">
          <source>Another way to declare and initialize ArrayList:</source>
          <target state="translated">ArrayListを宣言して初期化する別の方法。</target>
        </trans-unit>
        <trans-unit id="42da06e2e5c8fe1ae09c7964dd817c6acef4f50a" translate="yes" xml:space="preserve">
          <source>Array can contains primitives data types as well as objects of a class depending on the definition of array. In case of primitives data types, the actual values are stored in contiguous memory locations. In case of objects of a class, the actual objects are stored in heap segment.</source>
          <target state="translated">配列は、配列の定義によっては、プリミティブデータ型の他にクラスのオブジェクトを含むことができます。プリミティブデータ型の場合、実際の値は連続したメモリに格納されます。クラスのオブジェクトの場合、実際のオブジェクトはヒープセグメントに格納されます。</target>
        </trans-unit>
        <trans-unit id="accefd791cac597bc5fa0f35a3b89e51b59ae373" translate="yes" xml:space="preserve">
          <source>Array has two basic types.</source>
          <target state="translated">配列には基本的に2つのタイプがあります。</target>
        </trans-unit>
        <trans-unit id="6d5569a030423998b7630c054ede604adf8dad8f" translate="yes" xml:space="preserve">
          <source>Array is a sequential list of items</source>
          <target state="translated">配列は、項目の連続したリストです。</target>
        </trans-unit>
        <trans-unit id="4e322480a537d8262416f69ef614e4e5b6cf8be3" translate="yes" xml:space="preserve">
          <source>Assign values to the array:</source>
          <target state="translated">配列に値を代入します。</target>
        </trans-unit>
        <trans-unit id="33497ba90d7026a7fa3446f9e392e55fde88446a" translate="yes" xml:space="preserve">
          <source>But this third one shows the property of anonymous array-object creation which is pointed by a reference variable &quot;myIntArray&quot;, so if we write just &quot;new int[]{1,2,3};&quot; then this is how anonymous array-object can be created.</source>
          <target state="translated">しかし、この3つ目は、参照変数myIntArrayが指す匿名配列オブジェクト作成の性質を示しているので、「new int[]{1,2,3};」とだけ書いておけば、このように匿名配列オブジェクトを作成することができます。</target>
        </trans-unit>
        <trans-unit id="129f49de1cc02398c974caca314258ea1fb39ca3" translate="yes" xml:space="preserve">
          <source>But when you do it by &quot;method b&quot; you will not have to enter the values manually.</source>
          <target state="translated">しかし、「方法B」で行う場合は、手入力で値を入力する必要はありません。</target>
        </trans-unit>
        <trans-unit id="5ed8156d61c144fe241113791b538fdeadc42318" translate="yes" xml:space="preserve">
          <source>Create a random array for integers between [-50, 50] and for doubles [0, 1E17]:</source>
          <target state="translated">50,50]から[0,1E17]までの整数と倍数[0,1E17]のランダム配列を作成します。</target>
        </trans-unit>
        <trans-unit id="d6f37721bc043c8dd7475e584d1b0bdd4b256c24" translate="yes" xml:space="preserve">
          <source>Declaration</source>
          <target state="translated">Declaration</target>
        </trans-unit>
        <trans-unit id="f2bd05b5ef32bab86711a55b71b969b8c2b30fa7" translate="yes" xml:space="preserve">
          <source>Declare Array: &lt;code&gt;int[] arr;&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列の宣言：&lt;/font&gt;&lt;/font&gt; &lt;code&gt;int[] arr;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3106a3135287ef9d22ffbd2cc3086424c08e9915" translate="yes" xml:space="preserve">
          <source>Declare Multidimensional Array: &lt;code&gt;int[][] arr;&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;多次元配列の宣言：&lt;/font&gt;&lt;/font&gt; &lt;code&gt;int[][] arr;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7fdc5100d36eda5bebf1cea14b7ebe26ab8d8422" translate="yes" xml:space="preserve">
          <source>Declare and define an array</source>
          <target state="translated">配列の宣言と定義</target>
        </trans-unit>
        <trans-unit id="1cb8e47d668ae55028206105f8380afcc72c6f67" translate="yes" xml:space="preserve">
          <source>Declare and initialize for Java 8 and later. Create a simple integer array:</source>
          <target state="translated">Java 8以降のために宣言して初期化する。単純な整数配列を作成します。</target>
        </trans-unit>
        <trans-unit id="5c2dde373686791bddfe10dba25e3cdf0e1a3887" translate="yes" xml:space="preserve">
          <source>Declaring an array of object references:</source>
          <target state="translated">オブジェクト参照の配列を宣言します。</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">スニペットを展開</target>
        </trans-unit>
        <trans-unit id="9c2d4702ec71996e044b22d97312108a897d83ce" translate="yes" xml:space="preserve">
          <source>For Accessing:</source>
          <target state="translated">アクセスのために。</target>
        </trans-unit>
        <trans-unit id="58a696793c5e76ec79ef00906829b55fdf22d7ce" translate="yes" xml:space="preserve">
          <source>For Example</source>
          <target state="translated">例</target>
        </trans-unit>
        <trans-unit id="6784110dbf80d0bc4ac8a3483a105ff28115ba16" translate="yes" xml:space="preserve">
          <source>For String[] you must specify a constructor:</source>
          <target state="translated">String[]の場合はコンストラクタを指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="f8988a2e0164b227509109c9e7952fd00171df7a" translate="yes" xml:space="preserve">
          <source>For classes, for example &lt;code&gt;String&lt;/code&gt;, it's the same:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;クラス、たとえば&lt;/font&gt;&lt;/font&gt; &lt;code&gt;String&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;場合も同じです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6356ff71c59019c4b11cac3fd1c3b9558c879bc1" translate="yes" xml:space="preserve">
          <source>For creating arrays of class Objects you can use the &lt;code&gt;java.util.ArrayList&lt;/code&gt;. to define an array:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;クラスObjectの配列を作成するには、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;java.util.ArrayList&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用できます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列を定義するには：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="28f37995efbf25f1c4abc3377034c7ce5fda6de6" translate="yes" xml:space="preserve">
          <source>For explanation see multidimensional array detail at &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/java/nutsandbolts/arrays.html&quot;&gt;the official java tutorials&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;説明については&lt;/font&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/java/nutsandbolts/arrays.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、公式Javaチュートリアルの&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;多次元配列の詳細を参照し&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;てください&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cc6da86b5ed19cada5575e249da9bf0ba13d288d" translate="yes" xml:space="preserve">
          <source>For float double, the format of array will be same as integer.</source>
          <target state="translated">float doubleの場合、配列の形式は整数と同じになります。</target>
        </trans-unit>
        <trans-unit id="29e2d4316b320a43d5dd6309a7564aa20ec9bd2e" translate="yes" xml:space="preserve">
          <source>For primitive types:</source>
          <target state="translated">プリミティブ型の場合。</target>
        </trans-unit>
        <trans-unit id="6d804293fd89cde44bb0706729ad99a47ffe9ea8" translate="yes" xml:space="preserve">
          <source>How do I declare and initialize an array in Java</source>
          <target state="translated">Javaで配列を宣言して初期化するには?</target>
        </trans-unit>
        <trans-unit id="bca538f5c5fba391e8b7ce179647090a2c98f8a4" translate="yes" xml:space="preserve">
          <source>How do I declare and initialize an array in Java?</source>
          <target state="translated">Javaで配列を宣言して初期化するには?</target>
        </trans-unit>
        <trans-unit id="ca4e9151c2cb01cd4825f582341c7a661af772a3" translate="yes" xml:space="preserve">
          <source>I find it is helpful if you understand each part:</source>
          <target state="translated">それぞれの部分を理解していただけると助かります。</target>
        </trans-unit>
        <trans-unit id="e4335d0765b6b0af8090b872edcfdecfcaa215fd" translate="yes" xml:space="preserve">
          <source>If it's a character array:</source>
          <target state="translated">文字配列であれば</target>
        </trans-unit>
        <trans-unit id="a5e3f7f8fe2da5acf770608fc5cf8d303236b695" translate="yes" xml:space="preserve">
          <source>If it's a string array:</source>
          <target state="translated">文字列配列であれば</target>
        </trans-unit>
        <trans-unit id="9d0e02b3b82a035bde9f6a609898ef34aacf5115" translate="yes" xml:space="preserve">
          <source>If it's an object, then it's the same concept</source>
          <target state="translated">オブジェクトであれば、同じ概念の</target>
        </trans-unit>
        <trans-unit id="3e1f7f40a5c066553fb3427ac877638a4965fdc4" translate="yes" xml:space="preserve">
          <source>If we just write:</source>
          <target state="translated">書くだけなら</target>
        </trans-unit>
        <trans-unit id="32240437bf04caf5360119393dd11b250037631a" translate="yes" xml:space="preserve">
          <source>If you want to create arrays using reflections then you can do like this:</source>
          <target state="translated">反射を使って配列を作成したい場合は、次のようにします。</target>
        </trans-unit>
        <trans-unit id="454396ca246efda9bbdcb0585f168bec978eef8c" translate="yes" xml:space="preserve">
          <source>In Java 10</source>
          <target state="translated">Java 10では</target>
        </trans-unit>
        <trans-unit id="d102853cfe5d871bc5b70dbb3706e71ea57d72ca" translate="yes" xml:space="preserve">
          <source>In Java 8 you can use like this.</source>
          <target state="translated">Java 8ではこんな感じで使えます。</target>
        </trans-unit>
        <trans-unit id="fbb9c43b3fb09b2b5bb38abcc10762c48f28e4e9" translate="yes" xml:space="preserve">
          <source>In Java 9</source>
          <target state="translated">Java 9では</target>
        </trans-unit>
        <trans-unit id="4b7d5fa9337591e86f852a15cfbc8ea81641be0c" translate="yes" xml:space="preserve">
          <source>In case of objects, you need to either assign it to &lt;code&gt;null&lt;/code&gt; to initialize them using &lt;code&gt;new Type(..)&lt;/code&gt;, classes like &lt;code&gt;String&lt;/code&gt; and &lt;code&gt;Integer&lt;/code&gt; are special cases that will be handled as following</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;オブジェクトの場合、あなたはどちらかに割り当てる必要があり&lt;/font&gt;&lt;/font&gt; &lt;code&gt;null&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用してそれらを初期化する&lt;/font&gt;&lt;/font&gt; &lt;code&gt;new Type(..)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、のようなクラス&lt;/font&gt;&lt;/font&gt; &lt;code&gt;String&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Integer&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、次のように処理されます特殊なケースです&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="97c1bbd47adbba43089a0a1da92a7b8dda415aae" translate="yes" xml:space="preserve">
          <source>In general you can create arrays that's &lt;code&gt;M&lt;/code&gt; dimensional</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一般的に、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;M&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;次元の&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列を作成できます&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="74550664301794d02b0edd4f63d72b12d5a5184f" translate="yes" xml:space="preserve">
          <source>Initialise and provide data to the array</source>
          <target state="translated">配列の初期化とデータの提供</target>
        </trans-unit>
        <trans-unit id="68fa16ffd48f366e4fa8d57fea78ff03fcab0191" translate="yes" xml:space="preserve">
          <source>Initialization</source>
          <target state="translated">Initialization</target>
        </trans-unit>
        <trans-unit id="e82891031aa39a2eddaad402ebf9dcff46989374" translate="yes" xml:space="preserve">
          <source>Initialize Array: &lt;code&gt;int[] arr = new int[10];&lt;/code&gt; 10 represents the number of elements allowed in the array</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列の初期化：&lt;/font&gt;&lt;/font&gt; &lt;code&gt;int[] arr = new int[10];&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;10は、配列で許可される要素の数を表します&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8524a047fa9e7ee5a67dc4e3cc0764a7390faf0a" translate="yes" xml:space="preserve">
          <source>Initialize Multidimensional Array: &lt;code&gt;int[][] arr = new int[10][17];&lt;/code&gt; 10 rows and 17 columns and 170 elements because 10 times 17 is 170.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;多次元配列の初期化：&lt;/font&gt;&lt;/font&gt; &lt;code&gt;int[][] arr = new int[10][17];&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;10行17列と170要素なので、10行17列と170要素。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="07c42be23d589c822de15db4e756dbb3fb436370" translate="yes" xml:space="preserve">
          <source>Inside the method, &lt;code&gt;varargs&lt;/code&gt; is treated as a normal &lt;code&gt;int[]&lt;/code&gt;. &lt;code&gt;Type...&lt;/code&gt; can only be used in method parameters, so &lt;code&gt;int... i = new int[] {}&lt;/code&gt; will not compile.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;メソッド内では、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;varargs&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は通常の&lt;/font&gt;&lt;/font&gt; &lt;code&gt;int[]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;として扱われ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Type...&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はメソッドパラメータでのみ使用できるため、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;int... i = new int[] {}&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はコンパイルされません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a1f9655ab6910087005e63876eb03ed0b470ef46" translate="yes" xml:space="preserve">
          <source>It's absolutely fine if you put one box bracket at the end:</source>
          <target state="translated">最後にボックスブラケットを1個付ければ絶対に大丈夫です。</target>
        </trans-unit>
        <trans-unit id="2a5ba07490985c0b12beb0682f16574e89b75bc1" translate="yes" xml:space="preserve">
          <source>It's not mandatory that each inner element is of the same size.</source>
          <target state="translated">各内部要素が同じサイズであることは必須ではありません。</target>
        </trans-unit>
        <trans-unit id="e9035ff630424c0ba544af7be0e2b2871bd7369e" translate="yes" xml:space="preserve">
          <source>It's very easy to declare and initialize an array.
For example, you want to save five integer elements which are 1, 2, 3, 4, and 5 in an array. You can do it in the following way:</source>
          <target state="translated">配列を宣言して初期化するのはとても簡単です。例えば、1,2,3,4,5の5つの整数要素を配列に保存したいとします。以下のような方法で行うことができます。</target>
        </trans-unit>
        <trans-unit id="bb9b7d5821c04bb3fa00f80ad8362a3a43b1b115" translate="yes" xml:space="preserve">
          <source>It's worthy to note that creating an &lt;code&gt;M&lt;/code&gt; dimensional array is expensive in terms of Space. Since when you create an &lt;code&gt;M&lt;/code&gt; dimensional array with &lt;code&gt;N&lt;/code&gt; on all the dimensions, The total size of the array is bigger than &lt;code&gt;N^M&lt;/code&gt;, since each array has a reference, and at the M-dimension there is an (M-1)-dimensional array of references. The total size is as following</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;M&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;次元配列の&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;作成は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、スペースの点でコストがかかる&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ことに注意してください&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;すべての次元に&lt;/font&gt; &lt;code&gt;N&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;持つ&lt;/font&gt;&lt;/font&gt; &lt;code&gt;M&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;次元配列を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;作成するとき&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、各配列には参照があるため&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、配列の合計サイズは&lt;/font&gt; &lt;code&gt;N^M&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;より大きく&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、M次元には（M-1）-参照の次元配列。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;合計サイズは以下の通りです&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a9d638ce5bf60587999d44aed72b74552ba37415" translate="yes" xml:space="preserve">
          <source>Multidimensional Arrays</source>
          <target state="translated">多次元配列</target>
        </trans-unit>
        <trans-unit id="1ea1e4280a4c5f8ce40c94ad05af1e7eb5fd0eae" translate="yes" xml:space="preserve">
          <source>Multidimensional array</source>
          <target state="translated">多次元配列</target>
        </trans-unit>
        <trans-unit id="a9967ce7963d6e652a643d81a5ccb9bedc6e8951" translate="yes" xml:space="preserve">
          <source>Multidimensional arrays are much harder to deal with. Essentially, a 2D array is an array of arrays. &lt;code&gt;int[][]&lt;/code&gt; means an array of &lt;code&gt;int[]&lt;/code&gt;s. The key is that if an &lt;code&gt;int[][]&lt;/code&gt; is declared as &lt;code&gt;int[x][y]&lt;/code&gt;, the maximum index is &lt;code&gt;i[x-1][y-1]&lt;/code&gt;. Essentially, a rectangular &lt;code&gt;int[3][5]&lt;/code&gt; is:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;多次元配列は処理がはるかに困難です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;基本的に、2D配列は配列の配列です。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;int[][]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;int[]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列を意味し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;重要なのは、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;int[][]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が&lt;/font&gt;&lt;/font&gt; &lt;code&gt;int[x][y]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;として宣言されている&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;場合、最大インデックスは&lt;/font&gt;&lt;/font&gt; &lt;code&gt;i[x-1][y-1]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;基本的に、長方形の&lt;/font&gt;&lt;/font&gt; &lt;code&gt;int[3][5]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は次のとおりです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5fccf61b52eaa9c56e366ab05398b42ff4557195" translate="yes" xml:space="preserve">
          <source>Multidimensional arrays:</source>
          <target state="translated">多次元配列。</target>
        </trans-unit>
        <trans-unit id="90a418e3e8f324b5269483957bf28079362cd734" translate="yes" xml:space="preserve">
          <source>Note that in method parameters, &lt;code&gt;...&lt;/code&gt; indicates &lt;code&gt;variable arguments&lt;/code&gt;. Essentially, any number of parameters is fine. It's easier to explain with code:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;メソッドパラメータでは、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;...&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;/font&gt; &lt;code&gt;variable arguments&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;示し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;基本的に、任意の数のパラメーターで問題ありません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コードで説明する方が簡単です：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="abca571142ffdc6c46ab2ec1d093c6f96b4ecc6e" translate="yes" xml:space="preserve">
          <source>Note that when passing an &lt;code&gt;int[]&lt;/code&gt; to a method (or any other &lt;code&gt;Type[]&lt;/code&gt;), you cannot use the third way. In the statement &lt;code&gt;int[] i = *{a, b, c, d, etc}*&lt;/code&gt;, the compiler assumes that the &lt;code&gt;{...}&lt;/code&gt; means an &lt;code&gt;int[]&lt;/code&gt;. But that is because you are declaring a variable. When passing an array to a method, the declaration must either be &lt;code&gt;new Type[capacity]&lt;/code&gt; or &lt;code&gt;new Type[] {...}&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;int[]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;をメソッド（またはその他の&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Type[]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に渡す&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;場合、3番目の方法は使用できないことに注意してください。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ステートメント&lt;/font&gt;&lt;/font&gt; &lt;code&gt;int[] i = *{a, b, c, d, etc}*&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;では、コンパイラは&lt;/font&gt;&lt;/font&gt; &lt;code&gt;{...}&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が&lt;/font&gt;&lt;/font&gt; &lt;code&gt;int[]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;意味する&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と想定し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;しかし、それは変数を宣言しているからです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列をメソッドに渡す場合、宣言は&lt;/font&gt;&lt;/font&gt; &lt;code&gt;new Type[capacity]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;または&lt;/font&gt;&lt;/font&gt; &lt;code&gt;new Type[] {...}&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;なければなりません&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="83423c198b6099edba08f185f940042d5dba3b79" translate="yes" xml:space="preserve">
          <source>Note:</source>
          <target state="translated">Note:</target>
        </trans-unit>
        <trans-unit id="a57eb5af2c5c4dfb42fe10e5f6623498ba1807a3" translate="yes" xml:space="preserve">
          <source>Note: For convenience  int[] num is preferable because it clearly tells that you are talking here about array. Otherwise no difference. Not at all.</source>
          <target state="translated">注意:ここでは配列について話していることが明確にわかるので、便宜的には int[]num が望ましいです。そうでなければ違いはありません。全く違いはありません。</target>
        </trans-unit>
        <trans-unit id="cfe8dc71bda8259f167ad25591968e0d5b9e8d22" translate="yes" xml:space="preserve">
          <source>Now, the following also shows the declaration as well as initialization of the array:</source>
          <target state="translated">さて、次は配列の初期化だけでなく、宣言も示しています。</target>
        </trans-unit>
        <trans-unit id="0ff3b45138376d04f91d643b71e4326d0b67670d" translate="yes" xml:space="preserve">
          <source>One Dimensional Array</source>
          <target state="translated">一次元配列</target>
        </trans-unit>
        <trans-unit id="e72184f55cc026514b7160d78c3c5aef63c2a050" translate="yes" xml:space="preserve">
          <source>Or</source>
          <target state="translated">Or</target>
        </trans-unit>
        <trans-unit id="c2c7848cab8e1aa876905a1aa28f78325e17b185" translate="yes" xml:space="preserve">
          <source>Or (less preferred)</source>
          <target state="translated">または(あまり好ましくない</target>
        </trans-unit>
        <trans-unit id="f98f55e894bf6c6d3b253f45c662432464823fd0" translate="yes" xml:space="preserve">
          <source>Power-of-two sequence:</source>
          <target state="translated">パワー・オブ・ツー・シーケンス。</target>
        </trans-unit>
        <trans-unit id="c1709a0f66395b5233316c1b9c569cdce6381f00" translate="yes" xml:space="preserve">
          <source>Ragged Array (or Non-rectangular Array)</source>
          <target state="translated">ラグド配列(または非直方体配列</target>
        </trans-unit>
        <trans-unit id="d4bf874fb137eeaf177ce8ff80cba48e13ea6b4b" translate="yes" xml:space="preserve">
          <source>Ragged arrays are multidimensional arrays.</source>
          <target state="translated">ラグド配列は多次元配列です。</target>
        </trans-unit>
        <trans-unit id="5ad471f866060853ee0b27a1e2c75693bc6bc9da" translate="yes" xml:space="preserve">
          <source>Read from the array:</source>
          <target state="translated">配列から読み込みます。</target>
        </trans-unit>
        <trans-unit id="5e0aecab609a33c180d2798c48ea919c6b266d83" translate="yes" xml:space="preserve">
          <source>Ref: &lt;a href=&quot;https://www.geeksforgeeks.org/arrays-in-java/&quot;&gt;https://www.geeksforgeeks.org/arrays-in-java/&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;参照：&lt;/font&gt;&lt;a href=&quot;https://www.geeksforgeeks.org/arrays-in-java/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : &lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;//www.geeksforgeeks.org/arrays-in-java/&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="877cd88ac8443939104250bfbb46950f30b88cfa" translate="yes" xml:space="preserve">
          <source>So here we are defining columns explicitly.</source>
          <target state="translated">そこで、ここでは列を明示的に定義しています。</target>
        </trans-unit>
        <trans-unit id="1298f9c967d21f4a80c853ea5846b035384691dd" translate="yes" xml:space="preserve">
          <source>So the basic pattern is for initialization and declaration by method a is:</source>
          <target state="translated">なので、基本的なパターンとしては、初期化してメソッドaで宣言するのが基本です。</target>
        </trans-unit>
        <trans-unit id="76b15ddd9bbae2a42a5c96bc2b644d8162ba90e8" translate="yes" xml:space="preserve">
          <source>Some examples</source>
          <target state="translated">いくつかの例</target>
        </trans-unit>
        <trans-unit id="699d21b1cc9f463e20aceefefd74619a32876af0" translate="yes" xml:space="preserve">
          <source>Syntax for default values:</source>
          <target state="translated">デフォルト値の構文。</target>
        </trans-unit>
        <trans-unit id="23363058d5ecc4181f65d5588f53474c37f1b763" translate="yes" xml:space="preserve">
          <source>Syntax with values given (variable/field initialization):</source>
          <target state="translated">値が与えられた構文(変数フィールドの初期化)。</target>
        </trans-unit>
        <trans-unit id="7963f9855d20bac653579ad5e31e24efc41190d9" translate="yes" xml:space="preserve">
          <source>Take the primitive type &lt;code&gt;int&lt;/code&gt; for example. There are several ways to declare and &lt;code&gt;int&lt;/code&gt; array:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;たとえば&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、プリミティブ型&lt;/font&gt;&lt;/font&gt; &lt;code&gt;int&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;取り&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を宣言して&lt;/font&gt;&lt;/font&gt; &lt;code&gt;int&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;するには、いくつかの方法があります&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b63e59fd33cd8df365739014bcae6c1969efc01f" translate="yes" xml:space="preserve">
          <source>That declares an array called &lt;code&gt;arrayName&lt;/code&gt; of size 10 (you have elements 0 through 9 to use).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、サイズ10の&lt;/font&gt;&lt;/font&gt; &lt;code&gt;arrayName&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と呼ばれる配列を宣言し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます（使用する要素0〜9があります）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ec6a2229f621c89b08f6a049dddf3ca3638e72e5" translate="yes" xml:space="preserve">
          <source>The following shows the declaration as well as initialization of the array:</source>
          <target state="translated">以下に、配列の宣言と初期化を示します。</target>
        </trans-unit>
        <trans-unit id="1b344e5653321d31dd495bfb3ad4309baa420df8" translate="yes" xml:space="preserve">
          <source>The following shows the declaration of an array, but the array is not initialized:</source>
          <target state="translated">以下は配列の宣言を示していますが、配列は初期化されていません。</target>
        </trans-unit>
        <trans-unit id="429516426d9d21d59a40c1bcd51c56beda43a672" translate="yes" xml:space="preserve">
          <source>The general form of a one-dimensional array declaration is</source>
          <target state="translated">一次元配列宣言の一般的な形式は</target>
        </trans-unit>
        <trans-unit id="3f95b44caf0ba873a8ead040c61934dd0f7d2ec4" translate="yes" xml:space="preserve">
          <source>The third way of initializing is useful when you declare the array first and then initialize it. The cast is necessary here.</source>
          <target state="translated">3つ目の初期化の方法は、最初に配列を宣言してから初期化する場合に便利です。ここではキャストが必要です。</target>
        </trans-unit>
        <trans-unit id="4d4da839e17afe216e16445a6dc68cf412fe7357" translate="yes" xml:space="preserve">
          <source>There are a lot of answers here. I am adding a few tricky ways to create arrays (from an &lt;strong&gt;exam&lt;/strong&gt; point of view it's good to know this)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここにはたくさんの答えがあります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列を作成するためのいくつかのトリッキーな方法を追加します（&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;試験の&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;観点&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;から、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これを知っておくのは良いことです）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="00a2b88efef8a6ee1d84cd9057aaad4a96620a99" translate="yes" xml:space="preserve">
          <source>There are two main ways to make an array:</source>
          <target state="translated">配列を作る方法は主に2つあります。</target>
        </trans-unit>
        <trans-unit id="de2c60726dc477227d58cef5b5cc365aa18ebf1a" translate="yes" xml:space="preserve">
          <source>There are two types of array.</source>
          <target state="translated">配列には2種類あります。</target>
        </trans-unit>
        <trans-unit id="4691136e34d4186c7b08b7ed0cb03d8b37684462" translate="yes" xml:space="preserve">
          <source>There are various ways in which you can declare an array in Java:</source>
          <target state="translated">Javaで配列を宣言するには様々な方法があります。</target>
        </trans-unit>
        <trans-unit id="77a37c45c2d991061f2ae8ce24954d8253893b60" translate="yes" xml:space="preserve">
          <source>This one is pretty &lt;strong&gt;simple&lt;/strong&gt; and straightforward.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは非常に&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;シンプル&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;で簡単です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f32cb077b5c5428bab048225d9e28f1d1f3a22bd" translate="yes" xml:space="preserve">
          <source>This one, for an empty array:</source>
          <target state="translated">これは、空の配列に対して</target>
        </trans-unit>
        <trans-unit id="a49dd6da63450049fb4d1b6a20bc5663c0a1ff57" translate="yes" xml:space="preserve">
          <source>This time there isn't any need to mention the size in the box bracket. Even a simple variant of this is:</source>
          <target state="translated">今回は箱の括弧内のサイズについては言及する必要はありません。単純な変種でも</target>
        </trans-unit>
        <trans-unit id="7f713b1a57240f7e18f112723c5c496d19f578a5" translate="yes" xml:space="preserve">
          <source>This will create an array of length 3. As it holds a primitive type, int, all values are set to 0 by default. For example,</source>
          <target state="translated">これは長さ 3 の配列を作成します。 プリミティブ型である int を保持しているため、デフォルトではすべての値が 0 に設定されています。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="7c59af311a82c9e7a3736067595e5c686d8d602d" translate="yes" xml:space="preserve">
          <source>To declare a static array of Integer, string, float, etc... use the bellow declaration and initialization statements.</source>
          <target state="translated">整数、文字列、floatなどの静的配列を宣言するには、以下の宣言と初期化文を使用します。</target>
        </trans-unit>
        <trans-unit id="4fc4c5ad1821edbb2f27ab76f45dc7d826be6558" translate="yes" xml:space="preserve">
          <source>To use dynamic features, you have to use List... 
List is pure &lt;strong&gt;dynamic Array&lt;/strong&gt; and there is no need to declare size at beginning. 
Bellow is the proper way to declare a list in JAVA&amp;gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;動的機能を使用するには、Listを使用する&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;必要があり&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます... Listは純粋な&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;動的配列&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;であり、最初にサイズを宣言する必要はありません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;以下は、JAVAでリストを宣言する適切な方法です&amp;gt;&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2236c2cf7e54d7c093d96c8f71b61e7d40ca7e52" translate="yes" xml:space="preserve">
          <source>Using box brackets [] before the variable name</source>
          <target state="translated">変数名の前に箱括弧 []を使用する</target>
        </trans-unit>
        <trans-unit id="9fe3471b79eb33fc98fb097c1ccec3369b9df4ad" translate="yes" xml:space="preserve">
          <source>Using box brackets before the variable:</source>
          <target state="translated">変数の前に箱括弧を使用します。</target>
        </trans-unit>
        <trans-unit id="22286f2dd1b1d16f8a2f377c0d3ab3744a54473b" translate="yes" xml:space="preserve">
          <source>Using different &lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/java/util/stream/IntStream.html#iterate-int-java.util.function.IntPredicate-java.util.function.IntUnaryOperator-&quot;&gt;&lt;code&gt;IntStream.iterate&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/java/util/stream/IntStream.html#takeWhile-java.util.function.IntPredicate-&quot;&gt;&lt;code&gt;IntStream.takeWhile&lt;/code&gt;&lt;/a&gt; methods:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;異なる&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/java/util/stream/IntStream.html#iterate-int-java.util.function.IntPredicate-java.util.function.IntUnaryOperator-&quot;&gt; &lt;code&gt;IntStream.iterate&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;および&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/java/util/stream/IntStream.html#takeWhile-java.util.function.IntPredicate-&quot;&gt; &lt;code&gt;IntStream.takeWhile&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;メソッドの使用：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b6aca899afa49509a823ed95674e8cf0cbceeba5" translate="yes" xml:space="preserve">
          <source>Using the &lt;a href=&quot;https://developer.oracle.com/java/jdk-10-local-variable-type-inference.html&quot;&gt;Local Variable Type Inference&lt;/a&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用して&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://developer.oracle.com/java/jdk-10-local-variable-type-inference.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ローカル変数タイプ推論を&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fbfdd1a54278cf6b141db0c7bb5bd461606fbc30" translate="yes" xml:space="preserve">
          <source>With local variable type inference you only have to specify the type once:</source>
          <target state="translated">ローカル変数の型推論では、一度だけ型を指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="4c1241b566f6aceca467c183ea2715d0f828905a" translate="yes" xml:space="preserve">
          <source>With reflection, you can use &lt;code&gt;(Type[]) Array.newInstance(Type.class, capacity);&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;リフレクションでは、&lt;/font&gt; &lt;code&gt;(Type[]) Array.newInstance(Type.class, capacity);&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用できます&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e49c0d81b331685a918f561b6bb655f018f9663d" translate="yes" xml:space="preserve">
          <source>You can also create arrays with the values already there, such as</source>
          <target state="translated">また、すでに存在する値を使って、次のような配列を作成することもできます。</target>
        </trans-unit>
        <trans-unit id="3f7e1c9df460d6ac77819b0e92b2b28e4417e43a" translate="yes" xml:space="preserve">
          <source>You can also do it with &lt;code&gt;java.util.Arrays&lt;/code&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;java.util.Arrays&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;でも実行できます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="84e604823f41689c8333489976e7557a3c3b1284" translate="yes" xml:space="preserve">
          <source>You can also make multidimensional arrays, like this:</source>
          <target state="translated">このように多次元配列を作ることもできます。</target>
        </trans-unit>
        <trans-unit id="9d302345d26cedde51da53249bbfab47362bd3eb" translate="yes" xml:space="preserve">
          <source>You can either use array declaration or array literal (but only when you declare and affect the variable right away, array literals cannot be used for re-assigning an array).</source>
          <target state="translated">配列宣言か配列リテラルを使うことができます (ただし、宣言してすぐに変数に影響を与える場合に限ります。配列リテラルは配列の再代入には使えません)。</target>
        </trans-unit>
        <trans-unit id="982546c50726230bf3040272152168d500932d78" translate="yes" xml:space="preserve">
          <source>You can find more information in the &lt;a href=&quot;http://java.sun.com/docs/books/tutorial/java/nutsandbolts/arrays.html&quot;&gt;Sun tutorial&lt;/a&gt; site and the &lt;a href=&quot;http://java.sun.com/j2se/1.5.0/docs/api/java/util/Arrays.html&quot;&gt;JavaDoc&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;詳細については、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://java.sun.com/docs/books/tutorial/java/nutsandbolts/arrays.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Sunチュートリアル&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サイトと&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://java.sun.com/j2se/1.5.0/docs/api/java/util/Arrays.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;JavaDocを参照してください&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7966a57afd7865f6d3343a8ce4905b1d8f827d95" translate="yes" xml:space="preserve">
          <source>You have to make sure if you are using the above syntax, that the forward direction you have to specify the values in box brackets. Else it won't compile. Some examples:</source>
          <target state="translated">上記の構文を使用している場合は、順方向に箱括弧内の値を指定する必要があることを確認する必要があります。そうしないとコンパイルできません。いくつかの例を紹介します。</target>
        </trans-unit>
        <trans-unit id="21b825df3faa11615ed424e23e8cff717a5252d5" translate="yes" xml:space="preserve">
          <source>a)</source>
          <target state="translated">a)</target>
        </trans-unit>
        <trans-unit id="fddfc6e1d7666d90904c5e3b0ac5d66177c016ab" translate="yes" xml:space="preserve">
          <source>b)</source>
          <target state="translated">b)</target>
        </trans-unit>
        <trans-unit id="b59df146904a9d1ba0d2afeb5dcc655177ff38f5" translate="yes" xml:space="preserve">
          <source>but when you declare and initialize the array by &quot;method a&quot; you will have to enter the values manually or by loop or something.</source>
          <target state="translated">しかし、「メソッドa」で配列を宣言して初期化すると、手入力かループなどで値を入力しなければなりません。</target>
        </trans-unit>
        <trans-unit id="b58d80edf0d9a5f19d17ce43b0b4205bab0262a4" translate="yes" xml:space="preserve">
          <source>example:</source>
          <target state="translated">example:</target>
        </trans-unit>
        <trans-unit id="bc3eeab034567c452215cbfbbe733b44999db7d7" translate="yes" xml:space="preserve">
          <source>for loop that allows you to edit &lt;code&gt;arrayName&lt;/code&gt; (conventional for loop):</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;arrayName&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を編集できるforループ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（従来のforループ）：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ce57f9ec74d739a8f370ce118dcbd0d543eb0983" translate="yes" xml:space="preserve">
          <source>for loops:</source>
          <target state="translated">ループのための</target>
        </trans-unit>
        <trans-unit id="f8a544ea7cbffae352055223d1064e798cf761fd" translate="yes" xml:space="preserve">
          <source>is also valid, but I prefer the brackets after the type, because it's easier to see that the variable's type is actually an array.</source>
          <target state="translated">も有効ですが、変数の型が実際には配列であることがわかりやすいので、型の後の括弧の方が好きです。</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">or</target>
        </trans-unit>
        <trans-unit id="2d177ae0276c78ed9840fab7da5a7f708d7a6c1c" translate="yes" xml:space="preserve">
          <source>so the basic pattern is for initialization and declaration by method a) is:</source>
          <target state="translated">なので、基本的なパターンはメソッドa)による初期化と宣言です。</target>
        </trans-unit>
        <trans-unit id="139567a72ed93085de40c7389ceb1c59bc114445" translate="yes" xml:space="preserve">
          <source>this is not declaration of array, but the following statement makes the above declaration complete:</source>
          <target state="translated">これは配列の宣言ではありませんが、以下の記述で上記の宣言が完了します。</target>
        </trans-unit>
        <trans-unit id="ad5f9d461327a4b8f1d0119329a1e09300714928" translate="yes" xml:space="preserve">
          <source>where in all of these, you can use &lt;code&gt;int i[]&lt;/code&gt; instead of &lt;code&gt;int[] i&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これらすべてにおいて&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt; &lt;code&gt;int[] i&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;代わりに&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;int &lt;/font&gt;&lt;/font&gt; &lt;code&gt;int i[]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用できます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7a9afd2bad445d016e07ad73ac3df7a13b73f8de" translate="yes" xml:space="preserve">
          <source>which not only creates the empty space but fills it with those values. Java can tell that the primitives are integers and that there are 5 of them, so the size of the array can be determined implicitly.</source>
          <target state="translated">これは空のスペースを作るだけでなく,それらの値で埋めます.Javaはプリミティブが整数であることと、5個のプリミティブがあることを伝えることができるので、配列のサイズを暗黙のうちに決定することができます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
