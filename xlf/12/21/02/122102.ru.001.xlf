<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://stackoverflow.com/questions/122102">
    <body>
      <group id="122102">
        <trans-unit id="6a1296019722c59836161005f2200651d85a2d6b" translate="yes" xml:space="preserve">
          <source>(Disclaimer: I&amp;rsquo;m the author of the library.)</source>
          <target state="translated">(Отказ от ответственности: я автор библиотеки.)</target>
        </trans-unit>
        <trans-unit id="64955ad90328a8d466dc77f2dc2279f37ae3662c" translate="yes" xml:space="preserve">
          <source>1) ES5+, Using a simple function to do the copy for you:</source>
          <target state="translated">1)ES5+,Использование простой функции,чтобы сделать копию за вас:</target>
        </trans-unit>
        <trans-unit id="d473002fec1572f2b85186598bc9517a11e355ea" translate="yes" xml:space="preserve">
          <source>2) ES5+, using JSON.parse and JSON.stringify.</source>
          <target state="translated">2)ES5+,с использованием JSON.parse и JSON.stringify.</target>
        </trans-unit>
        <trans-unit id="595e78f83439199dfd79678374efbded89fb7322" translate="yes" xml:space="preserve">
          <source>3) AngularJs:</source>
          <target state="translated">3)Угловые Джей:</target>
        </trans-unit>
        <trans-unit id="5f0e185e8e5b75478a2f357848aa4f772facd6c6" translate="yes" xml:space="preserve">
          <source>4) jQuery:</source>
          <target state="translated">4)Кьюри:</target>
        </trans-unit>
        <trans-unit id="9b53c147c3475ec22efa77190558bea107a83b7b" translate="yes" xml:space="preserve">
          <source>5) UnderscoreJs &amp;amp; Loadash:</source>
          <target state="translated">5) Подчеркиваем и загружаем:</target>
        </trans-unit>
        <trans-unit id="901156299a6be7b4f59b3097131ee9dbc77718da" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://docs.angularjs.org/api/ng/function/angular.copy&quot;&gt;&lt;code&gt;angular.copy&lt;/code&gt;&lt;/a&gt; also provides a method of deep copying objects and arrays.</source>
          <target state="translated">&lt;a href=&quot;https://docs.angularjs.org/api/ng/function/angular.copy&quot;&gt; &lt;code&gt;angular.copy&lt;/code&gt; &lt;/a&gt; также предоставляет метод глубокого копирования объектов и массивов.</target>
        </trans-unit>
        <trans-unit id="009bfcf1b070cdc110e58ad916aeb0ebdd5fb726" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://en.wikipedia.org/wiki/Underscore.js&quot;&gt;Underscore.js&lt;/a&gt;'s _.clone (string arrays, number arrays - only)</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/Underscore.js&quot;&gt;Underscore.js&lt;/a&gt; 's _.clone (строковые массивы, только числовые массивы)</target>
        </trans-unit>
        <trans-unit id="d9cf8b86d9893dcf61ff2d65c7eb23e635af6fe1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Cloning&lt;/code&gt; an Object was always a concern in JS, but it was all about before ES6, I list different ways of copying an object in JavaScript below, imagine you have the Object below and would like to have a deep copy of that:</source>
          <target state="translated">&lt;code&gt;Cloning&lt;/code&gt; объекта всегда было проблемой в JS, но все это было до ES6, ниже я перечисляю различные способы копирования объекта в JavaScript, представьте, что у вас есть объект ниже и вы хотели бы иметь его глубокую копию:</target>
        </trans-unit>
        <trans-unit id="e3149223c859806faae33f5160b811c702a73d01" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;history.pushState()&lt;/code&gt; and &lt;code&gt;history.replaceState()&lt;/code&gt; both create a structured clone of their first argument, and assign that value to &lt;code&gt;history.state&lt;/code&gt;. You can use this to create a structured clone of any object like this:</source>
          <target state="translated">&lt;code&gt;history.pushState()&lt;/code&gt; и &lt;code&gt;history.replaceState()&lt;/code&gt; создают структурированный клон своего первого аргумента и присваивают это значение &lt;code&gt;history.state&lt;/code&gt; . Вы можете использовать это для создания структурированного клона любого объекта, подобного этому:</target>
        </trans-unit>
        <trans-unit id="4161b70173526960cb9aed49c9b88b668cf10704" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;1. Using JSON.parse(JSON.stringify(object));&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;1. Использование JSON.parse (JSON.stringify (object));&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1902f5bf21360f09c0db26295028d1ff7489b4b8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;2.Using created method&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;2. Используя созданный метод&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e25db176022db52099ed443a6726dba8845a1e00" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;3. Using Lo-Dash's _.cloneDeep&lt;/strong&gt; link &lt;a href=&quot;https://lodash.com/docs/4.17.10#cloneDeep&quot;&gt;lodash&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;3. Использование Lo-Dash _.cloneDeep&lt;/strong&gt; link &lt;a href=&quot;https://lodash.com/docs/4.17.10#cloneDeep&quot;&gt;lodash&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f624b1179f0402d969c1657cc787f2504858735b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;4. Using Object.assign() method&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;4. Использование метода Object.assign ()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cac2e850fe6d5af9f8c9a6142b37ad1f9f7009f5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;5.Using Underscore.js _.clone&lt;/strong&gt; link &lt;a href=&quot;https://underscorejs.org/#clone&quot;&gt;Underscore.js&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;5. Использование Underscore.js _.clone&lt;/strong&gt; link &lt;a href=&quot;https://underscorejs.org/#clone&quot;&gt;Underscore.js&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="494d7a306558ccca865e63d4652b0aa9495ea94a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign&quot;&gt;Update for ES6&lt;/a&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign&quot;&gt;Обновление для ES6&lt;/a&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="42934660e07ea14a1593287aab8a40230f206a26" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;BUT WRONG WHEN&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;НО НЕПРАВИЛЬНО КОГДА&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="98bbf0f0be2eb3fe8c5b2688cd063913ea643d9f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deep copy an array of objects (two or more levels - reference pointers):&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Глубокая копия массива объектов (два или более уровня - ссылочные указатели):&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9b73a8e5416d0ea62f53c8ecdcde1fb969db3c61" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deep copy an array of strings or numbers (one level - no reference pointers):&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Глубокая копия массива строк или чисел (один уровень - без ссылочных указателей):&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e52cb53b46101153f1ec8feb581dd78c9635e122" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deep copy by performance:&lt;/strong&gt;
Ranked from best to worst</source>
          <target state="translated">&lt;strong&gt;Глубокое копирование по производительности:&lt;/strong&gt; от лучшего к худшему</target>
        </trans-unit>
        <trans-unit id="0b010fb26c7bfe7fd7f5a621d8d8ff63f4765e61" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deep copying objects in JavaScript (I think the best and the simplest)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Глубокое копирование объектов в JavaScript (я думаю, лучший и самый простой)&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4e021e8096db3c4f40241955870ff1f94ba900d5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;EDIT:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;EDIT:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5fbf4a00d6a882121a802d2725d98940aaaeb108" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Edit:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Edit:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="687c20fc62b97668702acfaf2fdc65e95783fd7b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSBEN.CH Performance Benchmarking Playground 1~3 &lt;a href=&quot;http://jsben.ch/KVQLd&quot;&gt;http://jsben.ch/KVQLd&lt;/a&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;JSBEN.CH Performance Benchmarking Playground 1 ~ 3 &lt;a href=&quot;http://jsben.ch/KVQLd&quot;&gt;http://jsben.ch/KVQLd&lt;/a&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ca11451a7949aedbb8d25daa4c6e2c9c733a532d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Jsben&lt;/strong&gt; from the answer above updated to show that a recursive deep clone beats all the others mentioned: &lt;a href=&quot;http://jsben.ch/13YKQ&quot;&gt;http://jsben.ch/13YKQ&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;Jsben&lt;/strong&gt; из приведенного выше ответа обновлен, чтобы показать, что рекурсивный глубокий клон превосходит все остальные упомянутые: &lt;a href=&quot;http://jsben.ch/13YKQ&quot;&gt;http://jsben.ch/13YKQ&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2555b6b4406c27e0b54955990463a4b720d6d0cc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Jsperf&lt;/strong&gt; ranks it number one here: &lt;a href=&quot;https://jsperf.com/deep-copy-vs-json-stringify-json-parse/5&quot;&gt;https://jsperf.com/deep-copy-vs-json-stringify-json-parse/5&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;Jsperf&lt;/strong&gt; оценивает это номер один здесь: &lt;a href=&quot;https://jsperf.com/deep-copy-vs-json-stringify-json-parse/5&quot;&gt;https://jsperf.com/deep-copy-vs-json-stringify-json-parse/5&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e99feda972b8e68f59dd8de4c023595f522160c0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE:&lt;/strong&gt;  If you use some of this, you may have problems with some iteration who use &lt;code&gt;hasOwnProperty&lt;/code&gt;. Because, &lt;code&gt;create&lt;/code&gt; create new empty object who inherits &lt;code&gt;oldObject&lt;/code&gt;. But it is still useful and practical for cloning objects.</source>
          <target state="translated">&lt;strong&gt;ПРИМЕЧАНИЕ.&lt;/strong&gt; Если вы используете что-то из этого, у вас могут возникнуть проблемы с некоторыми итерациями, использующими &lt;code&gt;hasOwnProperty&lt;/code&gt; . Потому что, &lt;code&gt;create&lt;/code&gt; создать новый пустой объект, который наследует &lt;code&gt;oldObject&lt;/code&gt; . Но это все еще полезно и практично для клонирования объектов.</target>
        </trans-unit>
        <trans-unit id="65ffb366670c8905ce2cbfbc0625f63dca2cef8b" translate="yes" xml:space="preserve">
          <source>Additionally, please note that, in Chrome 65 at least, native cloning is not the way to go. According to JSPerf, performing native cloning by creating a new function is nearly &lt;strong&gt;800x&lt;/strong&gt; slower than using JSON.stringify which is incredibly fast all the way across the board.</source>
          <target state="translated">Кроме того, обратите внимание, что, по крайней мере, в Chrome 65, клонирование по-родному не подходит. Согласно JSPerf, выполнение нативного клонирования путем создания новой функции почти в &lt;strong&gt;800 раз&lt;/strong&gt; медленнее, чем при использовании JSON.stringify, который невероятно быстр по всем направлениям.</target>
        </trans-unit>
        <trans-unit id="e9fbc91983624098eab0a0b9d68cfc16ffd38c16" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign&quot;&gt;&lt;code&gt;Object.assign&lt;/code&gt;&lt;/a&gt; method is part of the ECMAScript 2015 (ES6) standard and does exactly what you need.</source>
          <target state="translated">Метод &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign&quot;&gt; &lt;code&gt;Object.assign&lt;/code&gt; &lt;/a&gt; является частью стандарта ECMAScript 2015 (ES6) и делает именно то, что вам нужно.</target>
        </trans-unit>
        <trans-unit id="a0c9d534b25ad917673b687d062bc3704ac1ff81" translate="yes" xml:space="preserve">
          <source>And .slice() has better performance than .concat(),
&lt;a href=&quot;http://jsperf.com/duplicate-array-slice-vs-concat/3&quot;&gt;http://jsperf.com/duplicate-array-slice-vs-concat/3&lt;/a&gt;</source>
          <target state="translated">И .slice () имеет лучшую производительность, чем .concat (), &lt;a href=&quot;http://jsperf.com/duplicate-array-slice-vs-concat/3&quot;&gt;http://jsperf.com/duplicate-array-slice-vs-concat/3&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2a237d4316f291003b4b86dad80c344ac6f420dc" translate="yes" xml:space="preserve">
          <source>And here's the function for quick reference:</source>
          <target state="translated">И вот функция для быстрой справки:</target>
        </trans-unit>
        <trans-unit id="cc865b9cd1412c3a1c78268236049f2cf0ff478f" translate="yes" xml:space="preserve">
          <source>And shallow copy one-liner (&lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015&quot;&gt;ECMAScript 6th edition&lt;/a&gt;, 2015):</source>
          <target state="translated">И однострочная копия мелкой копии ( &lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015&quot;&gt;ECMAScript 6th edition&lt;/a&gt; , 2015):</target>
        </trans-unit>
        <trans-unit id="2a3de4a9dc7c9f3bd23b0b53226033777b1c013b" translate="yes" xml:space="preserve">
          <source>AngularJS</source>
          <target state="translated">AngularJS</target>
        </trans-unit>
        <trans-unit id="38e2141eb9ea203ffeb32d4cd55e0a65c6cf0af8" translate="yes" xml:space="preserve">
          <source>AngularJS - &lt;a href=&quot;https://docs.angularjs.org/api/ng/function/angular.copy&quot;&gt;&lt;code&gt;angular.copy&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">AngularJS - &lt;a href=&quot;https://docs.angularjs.org/api/ng/function/angular.copy&quot;&gt; &lt;code&gt;angular.copy&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="dbb5fb1e128b60678a581b67d84a563bc06d30de" translate="yes" xml:space="preserve">
          <source>As long as you don't assign an object to anything it maintains no reference in memory.  So to make an object that you want to share among other objects, you'll have to create a factory like so:</source>
          <target state="translated">До тех пор,пока вы не назначите объект ни на что,на что он не ссылается в памяти.Поэтому,чтобы сделать объект,которым вы хотите поделиться с другими объектами,вам придется создать такую фабрику:</target>
        </trans-unit>
        <trans-unit id="113eae0600518a1898dafd21a63c05f2d981cee1" translate="yes" xml:space="preserve">
          <source>Assuming that you have only variables and not any functions in your object, you can  just use:</source>
          <target state="translated">Предполагая,что в вашем объекте есть только переменные,а не функции,вы можете просто использовать:</target>
        </trans-unit>
        <trans-unit id="885484b4ce4212e28b9e1f43dae9669bda2c3f25" translate="yes" xml:space="preserve">
          <source>Asynchronous Workaround: Usable. 😕</source>
          <target state="translated">Асинхронный обходной путь:Полезный.😕</target>
        </trans-unit>
        <trans-unit id="45d1707d26f931a8d5a0db1965460102f4e3ff0c" translate="yes" xml:space="preserve">
          <source>Beware using the &lt;code&gt;JSON.parse(JSON.stringify(obj))&lt;/code&gt; method on &lt;code&gt;Date&lt;/code&gt; objects - &lt;code&gt;JSON.stringify(new Date())&lt;/code&gt; returns a string representation of the date in ISO format, which &lt;code&gt;JSON.parse()&lt;/code&gt;&lt;strong&gt;doesn't&lt;/strong&gt; convert back to a &lt;code&gt;Date&lt;/code&gt; object. &lt;a href=&quot;https://stackoverflow.com/questions/11491938/issues-with-date-when-using-json-stringify-and-json-parse/11491993#11491993&quot;&gt;See this answer for more details&lt;/a&gt;.</source>
          <target state="translated">Остерегайтесь использования &lt;code&gt;JSON.parse(JSON.stringify(obj))&lt;/code&gt; для объектов &lt;code&gt;Date&lt;/code&gt; - &lt;code&gt;JSON.stringify(new Date())&lt;/code&gt; возвращает строковое представление даты в формате ISO, которое &lt;code&gt;JSON.parse()&lt;/code&gt; &lt;strong&gt;не&lt;/strong&gt; конвертирует обратно к объекту &lt;code&gt;Date&lt;/code&gt; . &lt;a href=&quot;https://stackoverflow.com/questions/11491938/issues-with-date-when-using-json-stringify-and-json-parse/11491993#11491993&quot;&gt;Смотрите этот ответ для более подробной информации&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="2973236548453f38ead1f38928c94284e9ecced4" translate="yes" xml:space="preserve">
          <source>Browsers do not currently provide a direct interface for the structured cloning algorithm, but a global &lt;code&gt;structuredClone()&lt;/code&gt; function has been discussed in &lt;a href=&quot;https://github.com/whatwg/html/issues/793&quot;&gt;whatwg/html#793 on GitHub&lt;/a&gt;. As currently proposed, using it for most purposes would be as simple as:</source>
          <target state="translated">Браузеры в настоящее время не предоставляют прямой интерфейс для алгоритма структурированного клонирования, но глобальная функция &lt;a href=&quot;https://github.com/whatwg/html/issues/793&quot;&gt;structdClone&lt;/a&gt; &lt;code&gt;structuredClone()&lt;/code&gt; обсуждалась в whatwg / html # 793 на GitHub . В настоящее время предлагается использовать его для большинства целей так же просто, как:</target>
        </trans-unit>
        <trans-unit id="12dd3382e21919424cc1c91dd85712739a9d2a65" translate="yes" xml:space="preserve">
          <source>Checkout this benchmark: &lt;a href=&quot;http://jsben.ch/#/bWfk9&quot;&gt;http://jsben.ch/#/bWfk9&lt;/a&gt;</source>
          <target state="translated">Проверьте этот тест: &lt;a href=&quot;http://jsben.ch/#/bWfk9&quot;&gt;http://jsben.ch/#/bWfk9&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ca567dda33cdf7058994a40bb9ef4db135c7d283" translate="yes" xml:space="preserve">
          <source>Code:</source>
          <target state="translated">Code:</target>
        </trans-unit>
        <trans-unit id="33f64e6db7d2271df61b32aa8af7e37929c89a90" translate="yes" xml:space="preserve">
          <source>Concatenation (string arrays, number arrays - only)</source>
          <target state="translated">Концентрация (строковые массивы,числовые массивы-только)</target>
        </trans-unit>
        <trans-unit id="62deea81938f50a7bee5245055544936da12eca8" translate="yes" xml:space="preserve">
          <source>Crockford suggests (and I prefer) using this function:</source>
          <target state="translated">Крокфорд предлагает (и я предпочитаю)использовать эту функцию:</target>
        </trans-unit>
        <trans-unit id="b03a8e60580e981cb3346f2471707bf40078fbfc" translate="yes" xml:space="preserve">
          <source>Custom function: for-loop or recursive copy</source>
          <target state="translated">Изготовленная на заказ функция:для петли или рекурсивной копии</target>
        </trans-unit>
        <trans-unit id="2a51e59697fbe92dbb2e644bf2b96a60a7492a59" translate="yes" xml:space="preserve">
          <source>Cyclic array test...</source>
          <target state="translated">Тест на циклический массив...</target>
        </trans-unit>
        <trans-unit id="6132b55eb09b417ca145535639ce3a5e8b1dabcd" translate="yes" xml:space="preserve">
          <source>Direct Support in Browsers: Maybe Eventually? 😐</source>
          <target state="translated">Прямая поддержка в браузерах:Может быть,в конце концов? 😐</target>
        </trans-unit>
        <trans-unit id="f340712260381d35a53813a65d261137ac25e7e6" translate="yes" xml:space="preserve">
          <source>ES6</source>
          <target state="translated">ES6</target>
        </trans-unit>
        <trans-unit id="c59815c7f257e5f2bd8a4266850beddb6342fb92" translate="yes" xml:space="preserve">
          <source>Example Use:</source>
          <target state="translated">Пример использования:</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">Расширить фрагмент</target>
        </trans-unit>
        <trans-unit id="16ba7f824c47b8dd6421330a2246967e2e7b4d98" translate="yes" xml:space="preserve">
          <source>Fast cloning with data loss - JSON.parse/stringify</source>
          <target state="translated">Быстрое клонирование с потерей данных-JSON.parsestringify</target>
        </trans-unit>
        <trans-unit id="5df81ffa82179b458e1d55e350db9d88805a69b2" translate="yes" xml:space="preserve">
          <source>Features:</source>
          <target state="translated">Features:</target>
        </trans-unit>
        <trans-unit id="548b5bb5625e9995c9b6a6c0c6caa954f3d6146a" translate="yes" xml:space="preserve">
          <source>For completeness, note that ES6 offers two shallow copy mechanisms: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign&quot;&gt;&lt;code&gt;Object.assign()&lt;/code&gt;&lt;/a&gt; and the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax&quot;&gt;spread syntax&lt;/a&gt;.
which copies values of all enumerable own properties from one object to another. For example:</source>
          <target state="translated">Для полноты заметим, что ES6 предлагает два механизма поверхностного копирования: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign&quot;&gt; &lt;code&gt;Object.assign()&lt;/code&gt; &lt;/a&gt; и &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax&quot;&gt;синтаксис распространения&lt;/a&gt; . который копирует значения всех перечисляемых собственных свойств из одного объекта в другой. Например:</target>
        </trans-unit>
        <trans-unit id="f44cbbef6a62693cba2e071062336ff3dc94bb80" translate="yes" xml:space="preserve">
          <source>For exemple if  &lt;code&gt;oldObject.a = 5;&lt;/code&gt;</source>
          <target state="translated">Например, если &lt;code&gt;oldObject.a = 5;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f57eb53b7c897cb1b501d5248fb863801dd72556" translate="yes" xml:space="preserve">
          <source>For plain old JavaScript objects, a tried and true good way to clone an object in modern runtimes is quite simply:</source>
          <target state="translated">Для простых старых JavaScript-объектов попробованный и действительно хороший способ клонирования объекта в современном исполнении довольно прост:</target>
        </trans-unit>
        <trans-unit id="290ba1968d5c0e35790807a7d71890b939dd1191" translate="yes" xml:space="preserve">
          <source>For the people who want to use the &lt;code&gt;JSON.parse(JSON.stringify(obj))&lt;/code&gt; version, but without losing the Date objects, you can use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#Using_the_reviver_parameter&quot;&gt;second argument of &lt;code&gt;parse&lt;/code&gt; method&lt;/a&gt; to convert the strings back to Date:</source>
          <target state="translated">Для людей, которые хотят использовать &lt;code&gt;JSON.parse(JSON.stringify(obj))&lt;/code&gt; , но не теряя объекты Date, вы можете использовать &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#Using_the_reviver_parameter&quot;&gt;второй аргумент метода &lt;code&gt;parse&lt;/code&gt; &lt;/a&gt; для преобразования строк обратно в Date:</target>
        </trans-unit>
        <trans-unit id="819886a4425ab8b131d38de099cf7d21b2593149" translate="yes" xml:space="preserve">
          <source>Function test...</source>
          <target state="translated">Функциональный тест...</target>
        </trans-unit>
        <trans-unit id="283604d15a7ac67eabe5b3c0f40f636ecca3c9e6" translate="yes" xml:space="preserve">
          <source>Here is an example on how to use it:</source>
          <target state="translated">Вот пример,как его использовать:</target>
        </trans-unit>
        <trans-unit id="986b97ae19544455c19671d7339eadc9fb9e0e07" translate="yes" xml:space="preserve">
          <source>Here's a more robust version (thanks to Justin McCandless this now supports cyclic references as well):</source>
          <target state="translated">Вот более надежная версия (благодаря Джастину МакКэндлесу она теперь поддерживает и циклические ссылки):</target>
        </trans-unit>
        <trans-unit id="a5601ce43e9ecb2f018a4f09ccd9028408b86893" translate="yes" xml:space="preserve">
          <source>Here's a version of ConroyP's answer above that works even if the constructor has required parameters:</source>
          <target state="translated">Ниже приведена версия ответа ConroyP,которая работает,даже если конструктор имеет необходимые параметры:</target>
        </trans-unit>
        <trans-unit id="43785ecb3cc28739be6434fed6fb0759ce3749d8" translate="yes" xml:space="preserve">
          <source>Hope these help...</source>
          <target state="translated">Надеюсь,это поможет...</target>
        </trans-unit>
        <trans-unit id="9049385ac01962cfa840cada7563fa5809874c60" translate="yes" xml:space="preserve">
          <source>I disagree with the answer with the greatest votes &lt;a href=&quot;https://stackoverflow.com/a/5344074/1110941&quot;&gt;here&lt;/a&gt;. A &lt;strong&gt;Recursive Deep Clone&lt;/strong&gt; is &lt;strong&gt;much faster&lt;/strong&gt; than the &lt;em&gt;JSON.parse(JSON.stringify(obj))&lt;/em&gt; approach mentioned.</source>
          <target state="translated">Я не согласен с ответом с наибольшим количеством голосов &lt;a href=&quot;https://stackoverflow.com/a/5344074/1110941&quot;&gt;здесь&lt;/a&gt; . &lt;strong&gt;Рекурсивный глубокий клон&lt;/strong&gt; &lt;strong&gt;намного быстрее,&lt;/strong&gt; чем упомянутый &lt;em&gt;подход JSON.parse (JSON.stringify (obj))&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="d8d10e7469763c4fa551d6c8215a34b7f532b787" translate="yes" xml:space="preserve">
          <source>I have two good answers depending on whether your objective is to clone a &quot;plain old JavaScript object&quot; or not.</source>
          <target state="translated">У меня есть два хороших ответа в зависимости от того,будет ли ваша цель клонировать &quot;обычный старый объект JavaScript&quot; или нет.</target>
        </trans-unit>
        <trans-unit id="a7fc0603da96abdae3ed58d9e47ceb2a514ed8c2" translate="yes" xml:space="preserve">
          <source>I know this is an old post, but I thought this may be of some help to the next person who stumbles along.</source>
          <target state="translated">Я знаю,что это старый пост,но я подумал,что это может помочь следующему человеку,который наткнется на него.</target>
        </trans-unit>
        <trans-unit id="770b6fd856a41550954cd1546783c443b5849773" translate="yes" xml:space="preserve">
          <source>I'm surprised no canonical solution exists.</source>
          <target state="translated">Удивительно,что канонического решения не существует.</target>
        </trans-unit>
        <trans-unit id="489f920024365227ffd4310703cdb9fed08a94ca" translate="yes" xml:space="preserve">
          <source>I've also seen recursive copying functions with various flaws.</source>
          <target state="translated">Я также видел рекурсивные функции копирования с различными недостатками.</target>
        </trans-unit>
        <trans-unit id="0ab70149b7f9dac23be9515659eb536b44c9781b" translate="yes" xml:space="preserve">
          <source>I've done things like &lt;code&gt;obj = JSON.parse(JSON.stringify(o));&lt;/code&gt; but question the efficiency.</source>
          <target state="translated">Я сделал такие вещи, как &lt;code&gt;obj = JSON.parse(JSON.stringify(o));&lt;/code&gt; но вопрос эффективности.</target>
        </trans-unit>
        <trans-unit id="2adf921803ec4757f8d2c2ba821f04b210f4ff78" translate="yes" xml:space="preserve">
          <source>If there wasn't any builtin one, you could try:</source>
          <target state="translated">Если бы не было никакой встроенной,можно было бы попробовать:</target>
        </trans-unit>
        <trans-unit id="9398424fd79f967ba29c3a2b98b9498a1b81b153" translate="yes" xml:space="preserve">
          <source>If you are using Javascript ES6 try this native method for cloning or shallow copy.</source>
          <target state="translated">Если вы используете Javascript ES6,попробуйте этот родной метод для клонирования или поверхностного копирования.</target>
        </trans-unit>
        <trans-unit id="9090a40c83a01a70b916e0798f48cfa367bb40e1" translate="yes" xml:space="preserve">
          <source>If you do not use &lt;code&gt;Date&lt;/code&gt;s, functions, &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;Infinity&lt;/code&gt;, RegExps, Maps, Sets, Blobs, FileLists, ImageDatas, sparse Arrays, Typed Arrays or other complex types within your object, a very simple one liner to deep clone an object is:</source>
          <target state="translated">Если вы не используете &lt;code&gt;Date&lt;/code&gt; s, функции, &lt;code&gt;undefined&lt;/code&gt; , &lt;code&gt;Infinity&lt;/code&gt; , RegExps, Карты, Наборы, BLOB-объекты, FileLists, ImageDatas, разреженные массивы, типизированные массивы или другие сложные типы в вашем объекте, очень простой вкладыш для глубокого клонирования объекта :</target>
        </trans-unit>
        <trans-unit id="07552e6b07e4b59604aa421015a02d6d4053e7f4" translate="yes" xml:space="preserve">
          <source>If you know the structure of the objects you are trying to clone or can avoid deep nested arrays you can write a simple &lt;code&gt;for (var i in obj)&lt;/code&gt; loop to clone your object while checking hasOwnProperty and it will be much much faster than jQuery.</source>
          <target state="translated">Если вы знаете структуру объектов, которые вы пытаетесь клонировать, или можете избежать вложенных массивов, вы можете написать простой цикл &lt;code&gt;for (var i in obj)&lt;/code&gt; для клонирования вашего объекта при проверке hasOwnProperty, и он будет намного быстрее, чем jQuery.</target>
        </trans-unit>
        <trans-unit id="50c28e80de0f4e89573c3db98a84c97a95a95f4a" translate="yes" xml:space="preserve">
          <source>If you're using it, the &lt;a href=&quot;http://documentcloud.github.com/underscore/&quot;&gt;Underscore.js&lt;/a&gt; library has a &lt;a href=&quot;http://documentcloud.github.com/underscore/#clone&quot;&gt;clone&lt;/a&gt; method.</source>
          <target state="translated">Если вы используете его, в библиотеке &lt;a href=&quot;http://documentcloud.github.com/underscore/&quot;&gt;Underscore.js&lt;/a&gt; есть метод &lt;a href=&quot;http://documentcloud.github.com/underscore/#clone&quot;&gt;clone&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="32c99c466e4a0911b1659ab32d74fd72754b74b4" translate="yes" xml:space="preserve">
          <source>In my previous tests where speed was a main concern I found</source>
          <target state="translated">В моих предыдущих тестах,где скорость была главной проблемой,я обнаружил.</target>
        </trans-unit>
        <trans-unit id="401b0ccb46c432dff2afad559300cc0def5cbae9" translate="yes" xml:space="preserve">
          <source>Install it with</source>
          <target state="translated">Установите его с</target>
        </trans-unit>
        <trans-unit id="6cee4a345e292df7d0d5add981b24de0948ebe09" translate="yes" xml:space="preserve">
          <source>Is it efficient? Heck yes. We've tried all kinds of cloning methods and this works best. I'm sure some ninja could conjure up a faster method. But I suspect we're talking about marginal gains.</source>
          <target state="translated">Это эффективно? Черт возьми,да.Мы перепробовали все виды методов клонирования,и это работает лучше всего.Я уверен,что какой-нибудь ниндзя может придумать более быстрый метод.Но я подозреваю,что мы говорим о маргинальных выгодах.</target>
        </trans-unit>
        <trans-unit id="552c5e4d033ed42b95333527705d38f03287c127" translate="yes" xml:space="preserve">
          <source>Is this efficient? Heck yes. Given that the goal is to produce a true deep-copy clone, then you're going to have to walk the members of the source object graph. With this approach, you can tweak exactly which child members to treat and how to manually handle custom types.</source>
          <target state="translated">Это эффективно? Черт возьми,да.Учитывая,что цель заключается в создании настоящей глубокой копии клона,то вам придется ходить членов исходного графика объектов.При таком подходе вы можете точно подстроить,с какими именно детьми нужно обращаться и как вручную обрабатывать пользовательские типы.</target>
        </trans-unit>
        <trans-unit id="c94a08f19c18e9bc889cd680ef7113eda1f000c9" translate="yes" xml:space="preserve">
          <source>It's called &quot;structured cloning&quot;, works experimentally in Node 11 and later, and hopefully will land in browsers. See &lt;a href=&quot;https://stackoverflow.com/questions/122102/what-is-the-most-efficient-way-to-deep-clone-an-object-in-javascript/10916838#10916838&quot;&gt;this answer&lt;/a&gt; for more details.</source>
          <target state="translated">Он называется &amp;laquo;структурированное клонирование&amp;raquo;, работает экспериментально в Node 11 и более поздних версиях и, надеюсь, появится в браузерах. Смотрите &lt;a href=&quot;https://stackoverflow.com/questions/122102/what-is-the-most-efficient-way-to-deep-clone-an-object-in-javascript/10916838#10916838&quot;&gt;этот ответ&lt;/a&gt; для более подробной информации.</target>
        </trans-unit>
        <trans-unit id="a50766b911feda7edb7ebbbfa654117a491b7986" translate="yes" xml:space="preserve">
          <source>It's terse, works as expected and you don't need a library.</source>
          <target state="translated">Это лаконично,работает,как и ожидалось,и тебе не нужна библиотека.</target>
        </trans-unit>
        <trans-unit id="8bed1ab98bd53aec22f5714f0cb05545fe888159" translate="yes" xml:space="preserve">
          <source>JSON.parse (string arrays, number arrays, object arrays - only)</source>
          <target state="translated">JSON.parse (строковые массивы,числовые массивы,массивы объектов-только)</target>
        </trans-unit>
        <trans-unit id="c8e5e57858ab0b5524280bd8428db7c8b55655d8" translate="yes" xml:space="preserve">
          <source>JavaScript trace engines suck at optimizing &lt;code&gt;for..in&lt;/code&gt; loops and checking hasOwnProperty will slow you down as well. Manual clone when speed is an absolute must.</source>
          <target state="translated">&lt;code&gt;for..in&lt;/code&gt; трассировки JavaScript не справляются с оптимизацией циклов for..in, а проверка hasOwnProperty также замедляет работу. Ручное клонирование, когда скорость абсолютно необходима.</target>
        </trans-unit>
        <trans-unit id="12a1fd73ed0eae8ce0f0c007e80a4dec94139630" translate="yes" xml:space="preserve">
          <source>Just because I didn't see &lt;a href=&quot;http://en.wikipedia.org/wiki/AngularJS&quot;&gt;AngularJS&lt;/a&gt; mentioned and thought that people might want to know...</source>
          <target state="translated">Просто потому, что я не видел упоминания &lt;a href=&quot;http://en.wikipedia.org/wiki/AngularJS&quot;&gt;AngularJS&lt;/a&gt; и думал, что люди могут захотеть узнать ...</target>
        </trans-unit>
        <trans-unit id="b5aceb860a4a7199d83d003b87e1425b7dd2c21b" translate="yes" xml:space="preserve">
          <source>Lastly if you are attempting to clone a known object structure in a hot loop you can get MUCH MUCH MORE PERFORMANCE by simply in-lining the clone procedure and manually constructing the object.</source>
          <target state="translated">Наконец,если вы пытаетесь клонировать известную структуру объекта в горячем цикле,вы можете получить MUCH MUCH MORE PERFORMANCE,просто выровняв процедуру клонирования и построив объект вручную.</target>
        </trans-unit>
        <trans-unit id="79bcce380c0ce7e7dd7c24c0657c08ae5b245de7" translate="yes" xml:space="preserve">
          <source>Let's also assume that your intention is to create a complete clone with no prototype references back to the source object. If you're not interested in a complete clone, then you can use many of the Object.clone() routines provided in some of the other answers (Crockford's pattern).</source>
          <target state="translated">Предположим также,что вы намерены создать полный клон без ссылок на прототип исходного объекта.Если вас не интересует полный клон,то вы можете использовать многие из процедур Object.clone(),предусмотренных в некоторых других ответах (шаблон Крокфорда).</target>
        </trans-unit>
        <trans-unit id="520d8bb109a39b45dd5e79bd3747a98f5ff3f2e3" translate="yes" xml:space="preserve">
          <source>Lo-Dash's _.cloneDeep</source>
          <target state="translated">Lo-Dash's _.cloneDeep</target>
        </trans-unit>
        <trans-unit id="209152665b8c481035d0e6dfb91586cec34a0c79" translate="yes" xml:space="preserve">
          <source>Lodash has a nice &lt;a href=&quot;http://lodash.com/docs#cloneDeep&quot;&gt;_.cloneDeep(value)&lt;/a&gt; method:</source>
          <target state="translated">У Lodash есть хороший &lt;a href=&quot;http://lodash.com/docs#cloneDeep&quot;&gt;метод _.cloneDeep (value)&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="d05e9acdcff333355c411ee686bab6ff0133f9cc" translate="yes" xml:space="preserve">
          <source>Native deep cloning</source>
          <target state="translated">глубокое клонирование коренных жителей</target>
        </trans-unit>
        <trans-unit id="e6539f71531625a7144c73c7a36f5fd478b0b5fe" translate="yes" xml:space="preserve">
          <source>Not only is this code brief, but it's also very readable. It's pretty easy to extend.</source>
          <target state="translated">Этот код не только краткий,но и очень читабельный.Его довольно легко расширить.</target>
        </trans-unit>
        <trans-unit id="d4bf0db1b60eef8c1813d1041bc18495d9ce39ca" translate="yes" xml:space="preserve">
          <source>Note that the source object must be a pure JSON object. This is to say, all of its nested properties must be scalars (like boolean, string, array, object, etc). Any functions or special objects like RegExp or Date will not be cloned.</source>
          <target state="translated">Обратите внимание,что исходный объект должен быть чистым JSON-объектом.Это значит,что все его вложенные свойства должны быть скалярами (например,булевыми,строковыми,массивами,объектами и т.д.).Любые функции или специальные объекты,такие как RegExp или Date,не будут клонироваться.</target>
        </trans-unit>
        <trans-unit id="92030dffe19cafc2b1d2c1490105e85367237388" translate="yes" xml:space="preserve">
          <source>Now, for non-plain JavaScript objects, there isn't a really simple answer.  In fact, there can't be because of the dynamic nature of JavaScript functions and inner object state. Deep cloning a JSON structure with functions inside requires you recreate those functions and their inner context. And JavaScript simply doesn't have a standardized way of doing that.</source>
          <target state="translated">Теперь,для непростых JavaScript-объектов,нет действительно простого ответа.На самом деле не может быть из-за динамической природы JavaScript-функций и внутреннего состояния объекта.Глубокое клонирование JSON структуры с функциями внутри требует воссоздания этих функций и их внутреннего контекста.И у JavaScript просто нет стандартизированного способа сделать это.</target>
        </trans-unit>
        <trans-unit id="2dddac477d2fc4da4f071b02ecb0e5c67e1c4eec" translate="yes" xml:space="preserve">
          <source>Only when you can use &lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015&quot;&gt;ECMAScript 6&lt;/a&gt; or &lt;a href=&quot;https://en.wikipedia.org/wiki/Source-to-source_compiler&quot;&gt;transpilers&lt;/a&gt;.</source>
          <target state="translated">Только тогда, когда вы можете использовать &lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015&quot;&gt;ECMAScript 6&lt;/a&gt; или &lt;a href=&quot;https://en.wikipedia.org/wiki/Source-to-source_compiler&quot;&gt;транспортеры&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a146c2606b2683fa89a081df852f2344d61d9122" translate="yes" xml:space="preserve">
          <source>Preserves getter/setter.</source>
          <target state="translated">Сохраняет геттерсеттер.</target>
        </trans-unit>
        <trans-unit id="ead9d710f07a34e7916d508ba40f3bfe0a8e2dec" translate="yes" xml:space="preserve">
          <source>Preserves prototype informations.</source>
          <target state="translated">Сохраняет информацию о прототипах.</target>
        </trans-unit>
        <trans-unit id="b94a461fa5defe5b279c9608d6e61c90faa2d659" translate="yes" xml:space="preserve">
          <source>Read more...</source>
          <target state="translated">Подробнее...</target>
        </trans-unit>
        <trans-unit id="8497cdbe15233a52b824e49dffae225b8ff72450" translate="yes" xml:space="preserve">
          <source>Reassignment &quot;=&quot; (string arrays, number arrays - only)</source>
          <target state="translated">Перераспределение &quot;=&quot; (строковые массивы,числовые массивы-только).</target>
        </trans-unit>
        <trans-unit id="9081c30a10752ce26712d2709bcc2abcd45f5c59" translate="yes" xml:space="preserve">
          <source>Reliable cloning using a library</source>
          <target state="translated">Надежное клонирование с использованием библиотеки</target>
        </trans-unit>
        <trans-unit id="471c7b148e65bf588090efbb408cf2fb82ab9380" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://stackoverflow.com/questions/122102/what-is-the-most-efficient-way-to-deep-clone-an-object-in-javascript/5344074#5344074&quot;&gt;Corban's answer&lt;/a&gt; for benchmarks.</source>
          <target state="translated">См &lt;a href=&quot;https://stackoverflow.com/questions/122102/what-is-the-most-efficient-way-to-deep-clone-an-object-in-javascript/5344074#5344074&quot;&gt;ответ Corban&lt;/a&gt; для ориентиров.</target>
        </trans-unit>
        <trans-unit id="436e1d9882fcfbc9f3b2875a8d9852f501984dbe" translate="yes" xml:space="preserve">
          <source>Shallow copy one-liner (&lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript#5th_Edition&quot;&gt;ECMAScript 5th edition&lt;/a&gt;):</source>
          <target state="translated">Однострочная копия мелкой копии ( &lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript#5th_Edition&quot;&gt;ECMAScript 5-е издание&lt;/a&gt; ):</target>
        </trans-unit>
        <trans-unit id="4bcb4e163bf193fe874c35e7a1a754e4ed2bd51c" translate="yes" xml:space="preserve">
          <source>Show code snippet</source>
          <target state="translated">Показать фрагмент кода</target>
        </trans-unit>
        <trans-unit id="d9cc20901b278592274b450a481e3147b18f747f" translate="yes" xml:space="preserve">
          <source>Since cloning objects is not trivial (complex types, circular references, function etc.), most major libraries provide function to clone objects. &lt;strong&gt;Don't reinvent the wheel&lt;/strong&gt; - if you're already using a library, check if it has an object cloning function. For example,</source>
          <target state="translated">Поскольку клонирование объектов не является тривиальным (сложные типы, циклические ссылки, функции и т. Д.), Большинство основных библиотек предоставляют функции для клонирования объектов. &lt;strong&gt;Не изобретайте колесо&lt;/strong&gt; - если вы уже используете библиотеку, проверьте, есть ли у нее функция клонирования объектов. Например,</target>
        </trans-unit>
        <trans-unit id="77920747b65548ba6059a3d815b6120916ef3d84" translate="yes" xml:space="preserve">
          <source>Slice (string arrays, number arrays - only)</source>
          <target state="translated">Слайс (строковые массивы,числовые массивы-только)</target>
        </trans-unit>
        <trans-unit id="1ffe9a46d7be9b8028812dac880cc2994ed293c7" translate="yes" xml:space="preserve">
          <source>So there you go. Two approaches. Both are efficient in my view.</source>
          <target state="translated">Ну вот.Два подхода.Оба,на мой взгляд,эффективны.</target>
        </trans-unit>
        <trans-unit id="6ad3b82357863678ee1004a1578b7bbd9d5bb008" translate="yes" xml:space="preserve">
          <source>Structured Cloning</source>
          <target state="translated">Структурированное клонирование</target>
        </trans-unit>
        <trans-unit id="23f01f984def29d2ca8450b6649412c885cc1ab0" translate="yes" xml:space="preserve">
          <source>Support in Node.js: Experimental 🙂</source>
          <target state="translated">Поддержка в Node.js:экспериментальный 🙂.</target>
        </trans-unit>
        <trans-unit id="59e328d320b19ac5a6aaa19e1f21c6d03c007174" translate="yes" xml:space="preserve">
          <source>Synchronous Workarounds: Awful! 🤢</source>
          <target state="translated">Синхронные обходные пути:Ужасно! 🤢</target>
        </trans-unit>
        <trans-unit id="5d3e2372695f63ce0c53a4f4135db20d5ae16db5" translate="yes" xml:space="preserve">
          <source>Test:</source>
          <target state="translated">Test:</target>
        </trans-unit>
        <trans-unit id="a5e11aaef6d86dbb08ddecaba334a8d38a925a15" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Notification/Notification&quot;&gt;&lt;code&gt;Notification&lt;/code&gt; constructor&lt;/a&gt; creates a structured clone of its associated data. It also attempts to display a browser notification to the user, but this will silently fail unless you have requested notification permission. In case you have the permission for other purposes, we'll immediately close the notification we've created.</source>
          <target state="translated">Конструктор &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Notification/Notification&quot;&gt; &lt;code&gt;Notification&lt;/code&gt; &lt;/a&gt; создает структурированный клон связанных с ним данных. Он также пытается отобразить уведомление в браузере для пользователя, но это автоматически завершится ошибкой, если вы не запросили разрешение на уведомление. Если у вас есть разрешение для других целей, мы немедленно закроем созданное нами уведомление.</target>
        </trans-unit>
        <trans-unit id="33abd86738e91ddf762ad34b84e77510ca29a298" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;v8&lt;/code&gt; module in Node.js currently (as of Node 11) &lt;a href=&quot;https://nodejs.org/api/all.html#v8_serialization_api&quot;&gt;exposes the structured serialization API directly&lt;/a&gt;, but this functionality is still marked as &quot;experimental&quot;, and subject to change or removal in future versions. If you're using a compatible version, cloning an object is as simple as:</source>
          <target state="translated">Модуль &lt;code&gt;v8&lt;/code&gt; в Node.js в настоящее время (по состоянию на Node 11) &lt;a href=&quot;https://nodejs.org/api/all.html#v8_serialization_api&quot;&gt;напрямую предоставляет API структурированной сериализации&lt;/a&gt; , но эта функциональность все еще помечена как &amp;laquo;экспериментальная&amp;raquo; и может быть изменена или удалена в будущих версиях. Если вы используете совместимую версию, клонирование объекта так же просто, как:</target>
        </trans-unit>
        <trans-unit id="4ebf0771ba83c4cde2f39337676c4fc1f72d4b19" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;polyfill&lt;/strong&gt; to support older browsers:</source>
          <target state="translated">&lt;strong&gt;Polyfill&lt;/strong&gt; для поддержки старых браузеров:</target>
        </trans-unit>
        <trans-unit id="6ad8ed5785225ec56294ca4522abde5f0721c0e0" translate="yes" xml:space="preserve">
          <source>The HTML standard includes &lt;a href=&quot;https://html.spec.whatwg.org/multipage/structured-data.html#safe-passing-of-structured-data&quot;&gt;&lt;strong&gt;an internal structured cloning/serialization algorithm&lt;/strong&gt;&lt;/a&gt; that can create deep clones of objects. It is still limited to certain built-in types, but in addition to the few types supported by JSON it also supports Dates, RegExps, Maps, Sets, Blobs, FileLists, ImageDatas, sparse Arrays, Typed Arrays, and probably more in the future. It also preserves references within the cloned data, allowing it to support cyclical and recursive structures that would cause errors for JSON.</source>
          <target state="translated">Стандарт HTML включает &lt;a href=&quot;https://html.spec.whatwg.org/multipage/structured-data.html#safe-passing-of-structured-data&quot;&gt;&lt;strong&gt;внутренний структурированный алгоритм клонирования / сериализации,&lt;/strong&gt;&lt;/a&gt; который может создавать глубокие клоны объектов. Он по-прежнему ограничен определенными встроенными типами, но в дополнение к нескольким типам, поддерживаемым JSON, он также поддерживает Dates, RegExps, Карты, Наборы, BLOB-объекты, FileLists, ImageDatas, разреженные массивы, Typed Arrays и, возможно, больше в будущем. , Он также сохраняет ссылки в клонированных данных, что позволяет поддерживать циклические и рекурсивные структуры, которые могут вызвать ошибки для JSON.</target>
        </trans-unit>
        <trans-unit id="7db166788c70c64b3e72f12a43552987dd23d268" translate="yes" xml:space="preserve">
          <source>The Object.assign() method is used to copy the values of all enumerable own properties from one or more source objects to a target object.</source>
          <target state="translated">Метод Object.assign()используется для копирования значений всех бесчисленных собственных свойств из одного или нескольких исходных объектов в целевой объект.</target>
        </trans-unit>
        <trans-unit id="ea189bc649e6f71823539572e783a6707400ee47" translate="yes" xml:space="preserve">
          <source>The correct way to do this, once again, is via a convenience method that you declare and reuse within your code. The convenience method can be endowed with some understanding of your own objects so you can make sure to properly recreate the graph within the new object.</source>
          <target state="translated">Правильным способом сделать это,опять же,является метод удобства,который вы объявляете и повторно используете в вашем коде.Метод удобства может быть наделен некоторым пониманием ваших собственных объектов,чтобы вы могли убедиться в правильном воссоздании графа внутри нового объекта.</target>
        </trans-unit>
        <trans-unit id="9863ec7b812e3f1bc60cd8d2b37675bbd39e8ece" translate="yes" xml:space="preserve">
          <source>The efficient way to clone(not deep-clone) an object in one line of code</source>
          <target state="translated">Эффективный способ клонирования (а не глубокого клонирования)объекта в одной строке кода</target>
        </trans-unit>
        <trans-unit id="68231b93a0105cba9f5b826511c388f535a2a982" translate="yes" xml:space="preserve">
          <source>The following creates two instances of the same object. I found it and am using it currently. It's simple and easy to use.</source>
          <target state="translated">Далее создаются два экземпляра одного и того же объекта.Я нашел его и использую в настоящее время.Он прост и легок в использовании.</target>
        </trans-unit>
        <trans-unit id="81c869f74b5ea4e2a848d31cc904d67ee6808a0c" translate="yes" xml:space="preserve">
          <source>The lower-overhead way to create a structured clone with existing APIs is to post the data through one port of a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MessageChannel&quot;&gt;MessageChannels&lt;/a&gt;. The other port will emit a &lt;code&gt;message&lt;/code&gt; event with a structured clone of the attached &lt;code&gt;.data&lt;/code&gt;. Unfortunately, listening for these events is necessarily asynchronous, and the synchronous alternatives are less practical.</source>
          <target state="translated">Более простой способ создания структурированного клона с существующими API-интерфейсами заключается в публикации данных через один порт &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MessageChannel&quot;&gt;MessageChannels&lt;/a&gt; . Другой порт отправит событие &lt;code&gt;message&lt;/code&gt; со структурированным клоном прикрепленных данных &lt;code&gt;.data&lt;/code&gt; . К сожалению, прослушивание этих событий обязательно асинхронно, а синхронные альтернативы менее практичны.</target>
        </trans-unit>
        <trans-unit id="536fc99bec8cacfcec8ccb3299a2a1474cf19dcb" translate="yes" xml:space="preserve">
          <source>The main idea is that you need to special handle the instantiation of your functions (or prototypal classes, so to speak) on a per-type basis. Here, he's provided a few examples for RegExp and Date.</source>
          <target state="translated">Основная идея заключается в том,что вам необходимо специально обрабатывать инстанцирование ваших функций (или,так сказать,прототипных классов)по каждому типу.Здесь он привел несколько примеров для RegExp и Date.</target>
        </trans-unit>
        <trans-unit id="1d03570e2e4e838e8bb030726d270bea7041f2a1" translate="yes" xml:space="preserve">
          <source>Then you can use it in your source code.</source>
          <target state="translated">Тогда вы можете использовать его в своем исходном коде.</target>
        </trans-unit>
        <trans-unit id="7e11c30d9fea076d912b290d667b8727da4dc4c8" translate="yes" xml:space="preserve">
          <source>There are few ways to copy this object, without changing the origin:</source>
          <target state="translated">Существует несколько способов скопировать этот объект,не изменяя его происхождение:</target>
        </trans-unit>
        <trans-unit id="9cffbdc2a939f45667c5e54f6158fadd340d9c4f" translate="yes" xml:space="preserve">
          <source>There are no good options for creating structured clones synchronously. Here are a couple of impractical hacks instead.</source>
          <target state="translated">Нет хороших вариантов для создания структурированных клонов синхронно.Вот пара непрактичных взломов вместо этого.</target>
        </trans-unit>
        <trans-unit id="8f852663584757d02b70dc28699f14dc551eb913" translate="yes" xml:space="preserve">
          <source>There seems to be no ideal deep clone operator yet for array-like objects.  As the code below illustrates, John Resig's jQuery cloner turns arrays with non-numeric properties into objects that are not arrays, and RegDwight's JSON cloner drops the non-numeric properties. The following tests illustrate these points on multiple browsers:</source>
          <target state="translated">Похоже,что идеального оператора глубокого клонирования для массивов-подобных объектов пока нет.Как показывает приведенный ниже код,клонер jQuery Джона Резига превращает массивы с нецифровыми свойствами в объекты,которые не являются массивами,а JSON клонер RegDwight сбрасывает нецифровые свойства.Следующие тесты иллюстрируют эти моменты в нескольких браузерах:</target>
        </trans-unit>
        <trans-unit id="84ff52d11742048bbbf7e36d51403e124337ed31" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s a &lt;a href=&quot;https://github.com/pvorb/node-clone&quot;&gt;library (called &amp;ldquo;clone&amp;rdquo;)&lt;/a&gt;, that does this quite well. It provides the most complete recursive cloning/copying of arbitrary objects that I know of. It also supports circular references, which is not covered by the other answers, yet.</source>
          <target state="translated">Есть &lt;a href=&quot;https://github.com/pvorb/node-clone&quot;&gt;библиотека (называемая &amp;laquo;клон&amp;raquo;)&lt;/a&gt; , которая делает это довольно хорошо. Он обеспечивает наиболее полное рекурсивное клонирование / копирование произвольных известных мне объектов. Он также поддерживает циклические ссылки, которые пока не охвачены другими ответами.</target>
        </trans-unit>
        <trans-unit id="e7b585b51a7333981d26696014816bccfeeada81" translate="yes" xml:space="preserve">
          <source>This approach is just simple and easy to implement. Wrap it into a convenience function and if you really need to squeeze out some gain, go for at a later time.</source>
          <target state="translated">Такой подход прост и легок в реализации.Заверните его в удобную функцию,и если вам действительно нужно выжать некоторую выгоду,займитесь этим позже.</target>
        </trans-unit>
        <trans-unit id="a4c2ce0bbf189255ab3b0ca57da43d56b020264a" translate="yes" xml:space="preserve">
          <source>This function is also available in my &lt;a href=&quot;https://github.com/mbrowne/simpleoo.js&quot;&gt;simpleoo&lt;/a&gt; library.</source>
          <target state="translated">Эта функция также доступна в моей библиотеке &lt;a href=&quot;https://github.com/mbrowne/simpleoo.js&quot;&gt;simpleoo&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a2600c189d23edb0a999cab533a05c507062b041" translate="yes" xml:space="preserve">
          <source>This is a polyfill for &lt;code&gt;Object.create&lt;/code&gt;, so you also can use this.</source>
          <target state="translated">Это polyfill для &lt;code&gt;Object.create&lt;/code&gt; , так что вы также можете использовать это.</target>
        </trans-unit>
        <trans-unit id="b0774eac90a9b638a66235a82ded80aefa2940d1" translate="yes" xml:space="preserve">
          <source>This is the right idea. The author (David Walsh) has commented out the cloning of generalized functions. This is something you might choose to do, depending on your use case.</source>
          <target state="translated">Это правильная идея.Автор (Дэвид Уолш)прокомментировал клонирование обобщенных функций.Это то,что вы можете выбрать,в зависимости от вашего случая использования.</target>
        </trans-unit>
        <trans-unit id="261e9b62de8d2e123bde54a815e45553f2317283" translate="yes" xml:space="preserve">
          <source>This is what I'm using:</source>
          <target state="translated">Это то,что я использую:</target>
        </trans-unit>
        <trans-unit id="659e6c4ea4f37da8a5c31506b04d0f7b8ce21552" translate="yes" xml:space="preserve">
          <source>This isn't generally the most efficient solution, but it does what I need. Simple test cases below...</source>
          <target state="translated">Обычно это не самое эффективное решение,но оно делает то,что мне нужно.Простые тестовые случаи ниже...</target>
        </trans-unit>
        <trans-unit id="b052950d236ec1a18041eaee77d62414407e7bd9" translate="yes" xml:space="preserve">
          <source>Though synchronous, this can be extremely slow. It incurs all of the overhead associated with manipulating the browser history. Calling this method repeatedly can cause Chrome to become temporarily unresponsive.</source>
          <target state="translated">Хотя и синхронно,но это может быть очень медленно.Это вызывает все накладные расходы,связанные с манипуляциями с историей браузера.Повторное обращение к этому методу может привести к тому,что Chrome временно перестанет реагировать.</target>
        </trans-unit>
        <trans-unit id="4c7029866039c44326f3319eb1294370f86d4564" translate="yes" xml:space="preserve">
          <source>Unless this is shipped, browsers' structured clone implementations are only exposed indirectly.</source>
          <target state="translated">До тех пор,пока это не будет отправлено,структурированные реализации клонов браузеров будут выставлены только косвенно.</target>
        </trans-unit>
        <trans-unit id="b2c5543687bd4d6c54ea15dfda6268506dab5876" translate="yes" xml:space="preserve">
          <source>Use third-party utility functions:</source>
          <target state="translated">Используйте функции сторонней утилиты:</target>
        </trans-unit>
        <trans-unit id="12afa7c8b04e82eddbbfa9613e488fc9ac57905e" translate="yes" xml:space="preserve">
          <source>We're written our own, but the best general approach I've seen is covered here:</source>
          <target state="translated">Мы написали свой собственный,но лучший общий подход,который я видел,освещен здесь:</target>
        </trans-unit>
        <trans-unit id="15e0b646854548e9595e09e3f8c81bad137eacfc" translate="yes" xml:space="preserve">
          <source>Well if you're using angular you could do this too</source>
          <target state="translated">Ну,если ты используешь угловой,ты тоже можешь это сделать.</target>
        </trans-unit>
        <trans-unit id="3be707e8e7ad5100370791fab3839100ec17bea8" translate="yes" xml:space="preserve">
          <source>What is the most efficient way to clone a JavaScript object? I've seen &lt;code&gt;obj = eval(uneval(o));&lt;/code&gt; being used, but &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/uneval&quot;&gt;that's non-standard and only supported by Firefox&lt;/a&gt;.</source>
          <target state="translated">Каков наиболее эффективный способ клонирования объекта JavaScript? Я видел &lt;code&gt;obj = eval(uneval(o));&lt;/code&gt; используется, но &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/uneval&quot;&gt;это нестандартно и поддерживается только Firefox&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c95066fb63f8c02592924418250d8d1861631e67" translate="yes" xml:space="preserve">
          <source>What is the most efficient way to deep clone an object in JavaScript</source>
          <target state="translated">Какой наиболее эффективный способ глубокого клонирования объекта в JavaScript</target>
        </trans-unit>
        <trans-unit id="7a2a34b88909df7977df57d0390303941a8129af" translate="yes" xml:space="preserve">
          <source>When an array contains numbers and strings - functions like .slice(), .concat(), .splice(), the assignment operator &quot;=&quot;, and Underscore.js's clone function; will make a deep copy of the array's elements.</source>
          <target state="translated">Когда массив содержит числа и строки-функции типа .slice(),.concat(),.splice(),оператор присваивания &quot;=&quot; и функция клонирования Underscore.js;сделает глубокую копию элементов массива.</target>
        </trans-unit>
        <trans-unit id="cdf361e2d01fbaaba5c870b9a5cc0ddc1970f725" translate="yes" xml:space="preserve">
          <source>Where jQuery's $.extend has better performance:</source>
          <target state="translated">Там,где у jQuery $.extension есть лучшая производительность:</target>
        </trans-unit>
        <trans-unit id="1e686536bd3ad6cc14390d72268d9b52abcfd59c" translate="yes" xml:space="preserve">
          <source>Where reassignment has the fastest performance:</source>
          <target state="translated">Там,где переназначение происходит быстрее всего:</target>
        </trans-unit>
        <trans-unit id="432e630fa9f7810fc1984a5382863e495968b087" translate="yes" xml:space="preserve">
          <source>Won't trigger getter/setter while copying.</source>
          <target state="translated">Не сработает при копировании.</target>
        </trans-unit>
        <trans-unit id="b2f232831d9d24acc20b048dfb05151b87a88152" translate="yes" xml:space="preserve">
          <source>Works with both &lt;strong&gt;object-literal&lt;/strong&gt; and &lt;strong&gt;functional&lt;/strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Object-oriented_programming&quot;&gt;OO&lt;/a&gt; writing styles.</source>
          <target state="translated">Работает как с &lt;strong&gt;объектно-буквальным, так&lt;/strong&gt; и с &lt;strong&gt;функциональным&lt;/strong&gt; стилем записи &lt;a href=&quot;https://en.wikipedia.org/wiki/Object-oriented_programming&quot;&gt;ОО&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="84c744fef8c48f835b1712f23263e95be8178b11" translate="yes" xml:space="preserve">
          <source>Write a custom function (has faster performance than $.extend() or JSON.parse):</source>
          <target state="translated">Напишите пользовательскую функцию (имеет более высокую производительность,чем $.extended()или JSON.parse):</target>
        </trans-unit>
        <trans-unit id="24eeec13a5cfa1b9871ffaa5ffc4932c30eb71ee" translate="yes" xml:space="preserve">
          <source>You can &lt;a href=&quot;https://npmjs.org/package/clone&quot;&gt;find it on npm&lt;/a&gt;, too. It can be used for the browser as well as Node.js.</source>
          <target state="translated">Вы также можете &lt;a href=&quot;https://npmjs.org/package/clone&quot;&gt;найти его на npm&lt;/a&gt; . Может использоваться как для браузера, так и для Node.js.</target>
        </trans-unit>
        <trans-unit id="4f425e9cb6e5145a30b05e659d988d2ffe18b8f1" translate="yes" xml:space="preserve">
          <source>You can also download the source code manually.</source>
          <target state="translated">Вы также можете скачать исходный код вручную.</target>
        </trans-unit>
        <trans-unit id="b94da3599274cc93c9ee4f4d4dce4fea875b2503" translate="yes" xml:space="preserve">
          <source>but:</source>
          <target state="translated">but:</target>
        </trans-unit>
        <trans-unit id="e74b9178c2fa31f951a6a374c99e4397640909b4" translate="yes" xml:space="preserve">
          <source>jQuery - &lt;a href=&quot;https://api.jquery.com/jquery.extend/#jQuery-extend-deep-target-object1-objectN&quot;&gt;&lt;code&gt;jQuery.extend(true, { }, oldObject)&lt;/code&gt;&lt;/a&gt;; &lt;code&gt;.clone()&lt;/code&gt; only clones DOM elements</source>
          <target state="translated">jQuery - &lt;a href=&quot;https://api.jquery.com/jquery.extend/#jQuery-extend-deep-target-object1-objectN&quot;&gt; &lt;code&gt;jQuery.extend(true, { }, oldObject)&lt;/code&gt; &lt;/a&gt; ; &lt;code&gt;.clone()&lt;/code&gt; клонирует только элементы DOM</target>
        </trans-unit>
        <trans-unit id="aff43fd35dc0a7127d413fb9abde08f7e745d659" translate="yes" xml:space="preserve">
          <source>jQuery's $.extend</source>
          <target state="translated">продление jQuery на $./что-л.</target>
        </trans-unit>
        <trans-unit id="d76c148e34e5a1d4cd7e4820e11d94f69b142c70" translate="yes" xml:space="preserve">
          <source>jQuery.extend is pretty fast when the &lt;code&gt;deep&lt;/code&gt; flag is set to &lt;code&gt;false&lt;/code&gt; (shallow clone). It is a good option, because it includes some extra logic for type validation and doesn't copy over undefined properties, etc., but this will also slow you down a little.</source>
          <target state="translated">jQuery.extend работает довольно быстро, когда для флага &lt;code&gt;deep&lt;/code&gt; установлено значение &lt;code&gt;false&lt;/code&gt; (мелкий клон). Это хороший вариант, потому что он включает некоторую дополнительную логику для проверки типа и не копирует неопределенные свойства и т. Д., Но это также немного замедлит работу.</target>
        </trans-unit>
        <trans-unit id="72cb6f36022d5578d8037e1ec22bab7293805704" translate="yes" xml:space="preserve">
          <source>lodash - &lt;a href=&quot;https://lodash.com/docs#cloneDeep&quot;&gt;&lt;code&gt;cloneDeep&lt;/code&gt;&lt;/a&gt;; can be imported separately via the &lt;a href=&quot;https://www.npmjs.com/package/lodash.clonedeep&quot;&gt;lodash.clonedeep&lt;/a&gt; module and is probably your best choice if you're not already using a library that provides a deep cloning function</source>
          <target state="translated">lodash - &lt;a href=&quot;https://lodash.com/docs#cloneDeep&quot;&gt; &lt;code&gt;cloneDeep&lt;/code&gt; &lt;/a&gt; ; может быть импортирован отдельно через модуль &lt;a href=&quot;https://www.npmjs.com/package/lodash.clonedeep&quot;&gt;lodash.clonedeep&lt;/a&gt; и, вероятно, является вашим лучшим выбором, если вы еще не используете библиотеку, которая обеспечивает функцию глубокого клонирования</target>
        </trans-unit>
        <trans-unit id="22d04dec45befefb1dfdd91ef937ed7da722a1c5" translate="yes" xml:space="preserve">
          <source>or package it with &lt;a href=&quot;https://github.com/ender-js/Ender&quot;&gt;Ender&lt;/a&gt;.</source>
          <target state="translated">или упакуй это с &lt;a href=&quot;https://github.com/ender-js/Ender&quot;&gt;Эндером&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="636610f807f175806bd4985783c71d6617b0dcdb" translate="yes" xml:space="preserve">
          <source>to be the slowest way to deep clone an object (it is slower than &lt;a href=&quot;https://api.jquery.com/jQuery.extend/&quot;&gt;jQuery.extend&lt;/a&gt; with &lt;code&gt;deep&lt;/code&gt; flag set true by 10-20%).</source>
          <target state="translated">быть самым медленным способом глубокого клонирования объекта (это медленнее, чем &lt;a href=&quot;https://api.jquery.com/jQuery.extend/&quot;&gt;jQuery.extend&lt;/a&gt; с &lt;code&gt;deep&lt;/code&gt; флагом, установленным в true на 10-20%).</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
