<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/122102">
    <body>
      <group id="122102">
        <trans-unit id="6a1296019722c59836161005f2200651d85a2d6b" translate="yes" xml:space="preserve">
          <source>(Disclaimer: I&amp;rsquo;m the author of the library.)</source>
          <target state="translated">(Descargo de responsabilidad: soy el autor de la biblioteca).</target>
        </trans-unit>
        <trans-unit id="64955ad90328a8d466dc77f2dc2279f37ae3662c" translate="yes" xml:space="preserve">
          <source>1) ES5+, Using a simple function to do the copy for you:</source>
          <target state="translated">1)ES5+,Usando una simple funci√≥n para hacer la copia por ti:</target>
        </trans-unit>
        <trans-unit id="d473002fec1572f2b85186598bc9517a11e355ea" translate="yes" xml:space="preserve">
          <source>2) ES5+, using JSON.parse and JSON.stringify.</source>
          <target state="translated">2)ES5+,usando JSON.parse y JSON.stringify.</target>
        </trans-unit>
        <trans-unit id="595e78f83439199dfd79678374efbded89fb7322" translate="yes" xml:space="preserve">
          <source>3) AngularJs:</source>
          <target state="translated">3)AngularJs:</target>
        </trans-unit>
        <trans-unit id="5f0e185e8e5b75478a2f357848aa4f772facd6c6" translate="yes" xml:space="preserve">
          <source>4) jQuery:</source>
          <target state="translated">4)jQuery:</target>
        </trans-unit>
        <trans-unit id="9b53c147c3475ec22efa77190558bea107a83b7b" translate="yes" xml:space="preserve">
          <source>5) UnderscoreJs &amp;amp; Loadash:</source>
          <target state="translated">5) subrayado Js y Loadash:</target>
        </trans-unit>
        <trans-unit id="901156299a6be7b4f59b3097131ee9dbc77718da" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://docs.angularjs.org/api/ng/function/angular.copy&quot;&gt;&lt;code&gt;angular.copy&lt;/code&gt;&lt;/a&gt; also provides a method of deep copying objects and arrays.</source>
          <target state="translated">&lt;a href=&quot;https://docs.angularjs.org/api/ng/function/angular.copy&quot;&gt; &lt;code&gt;angular.copy&lt;/code&gt; &lt;/a&gt; tambi&amp;eacute;n proporciona un m&amp;eacute;todo de copia profunda de objetos y matrices.</target>
        </trans-unit>
        <trans-unit id="009bfcf1b070cdc110e58ad916aeb0ebdd5fb726" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://en.wikipedia.org/wiki/Underscore.js&quot;&gt;Underscore.js&lt;/a&gt;'s _.clone (string arrays, number arrays - only)</source>
          <target state="translated">_.Clone de &lt;a href=&quot;https://en.wikipedia.org/wiki/Underscore.js&quot;&gt;Underscore.js&lt;/a&gt; (matrices de cadenas, matrices de n&amp;uacute;meros - solo)</target>
        </trans-unit>
        <trans-unit id="d9cf8b86d9893dcf61ff2d65c7eb23e635af6fe1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Cloning&lt;/code&gt; an Object was always a concern in JS, but it was all about before ES6, I list different ways of copying an object in JavaScript below, imagine you have the Object below and would like to have a deep copy of that:</source>
          <target state="translated">&lt;code&gt;Cloning&lt;/code&gt; un objeto siempre fue una preocupaci&amp;oacute;n en JS, pero se trataba de antes de ES6, enumero diferentes formas de copiar un objeto en JavaScript a continuaci&amp;oacute;n, imagina que tienes el objeto a continuaci&amp;oacute;n y me gustar&amp;iacute;a tener una copia profunda de eso:</target>
        </trans-unit>
        <trans-unit id="e3149223c859806faae33f5160b811c702a73d01" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;history.pushState()&lt;/code&gt; and &lt;code&gt;history.replaceState()&lt;/code&gt; both create a structured clone of their first argument, and assign that value to &lt;code&gt;history.state&lt;/code&gt;. You can use this to create a structured clone of any object like this:</source>
          <target state="translated">&lt;code&gt;history.pushState()&lt;/code&gt; y &lt;code&gt;history.replaceState()&lt;/code&gt; crean un clon estructurado de su primer argumento y asignan ese valor a &lt;code&gt;history.state&lt;/code&gt; . Puede usar esto para crear un clon estructurado de cualquier objeto como este:</target>
        </trans-unit>
        <trans-unit id="4161b70173526960cb9aed49c9b88b668cf10704" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;1. Using JSON.parse(JSON.stringify(object));&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;1. Usando JSON.parse (JSON.stringify (objeto));&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1902f5bf21360f09c0db26295028d1ff7489b4b8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;2.Using created method&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;2.Utilizando el m&amp;eacute;todo creado&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e25db176022db52099ed443a6726dba8845a1e00" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;3. Using Lo-Dash's _.cloneDeep&lt;/strong&gt; link &lt;a href=&quot;https://lodash.com/docs/4.17.10#cloneDeep&quot;&gt;lodash&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;3. Usando el&lt;/strong&gt; enlace &lt;a href=&quot;https://lodash.com/docs/4.17.10#cloneDeep&quot;&gt;_.cloneDeep de&lt;/a&gt; &lt;strong&gt;Lo-Dash&lt;/strong&gt; lodash</target>
        </trans-unit>
        <trans-unit id="f624b1179f0402d969c1657cc787f2504858735b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;4. Using Object.assign() method&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;4. Usando el m&amp;eacute;todo Object.assign ()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cac2e850fe6d5af9f8c9a6142b37ad1f9f7009f5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;5.Using Underscore.js _.clone&lt;/strong&gt; link &lt;a href=&quot;https://underscorejs.org/#clone&quot;&gt;Underscore.js&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;5.Utilizando Underscore.js _.clone&lt;/strong&gt; link &lt;a href=&quot;https://underscorejs.org/#clone&quot;&gt;Underscore.js&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="494d7a306558ccca865e63d4652b0aa9495ea94a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign&quot;&gt;Update for ES6&lt;/a&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign&quot;&gt;Actualizaci&amp;oacute;n para ES6&lt;/a&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="42934660e07ea14a1593287aab8a40230f206a26" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;BUT WRONG WHEN&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;PERO MAL CUANDO&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="98bbf0f0be2eb3fe8c5b2688cd063913ea643d9f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deep copy an array of objects (two or more levels - reference pointers):&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Copie en profundidad una matriz de objetos (dos o m&amp;aacute;s niveles - punteros de referencia):&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9b73a8e5416d0ea62f53c8ecdcde1fb969db3c61" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deep copy an array of strings or numbers (one level - no reference pointers):&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Copie en profundidad una matriz de cadenas o n&amp;uacute;meros (un nivel, sin punteros de referencia):&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e52cb53b46101153f1ec8feb581dd78c9635e122" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deep copy by performance:&lt;/strong&gt;
Ranked from best to worst</source>
          <target state="translated">&lt;strong&gt;Copia profunda por rendimiento:&lt;/strong&gt; clasificado de mejor a peor</target>
        </trans-unit>
        <trans-unit id="0b010fb26c7bfe7fd7f5a621d8d8ff63f4765e61" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deep copying objects in JavaScript (I think the best and the simplest)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Copia profunda de objetos en JavaScript (creo que el mejor y el m&amp;aacute;s simple)&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4e021e8096db3c4f40241955870ff1f94ba900d5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;EDIT:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;EDIT:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5fbf4a00d6a882121a802d2725d98940aaaeb108" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Edit:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Edit:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="687c20fc62b97668702acfaf2fdc65e95783fd7b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSBEN.CH Performance Benchmarking Playground 1~3 &lt;a href=&quot;http://jsben.ch/KVQLd&quot;&gt;http://jsben.ch/KVQLd&lt;/a&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;JSBEN.CH Performance Benchmarking Playground 1 ~ 3 &lt;a href=&quot;http://jsben.ch/KVQLd&quot;&gt;http://jsben.ch/KVQLd&lt;/a&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ca11451a7949aedbb8d25daa4c6e2c9c733a532d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Jsben&lt;/strong&gt; from the answer above updated to show that a recursive deep clone beats all the others mentioned: &lt;a href=&quot;http://jsben.ch/13YKQ&quot;&gt;http://jsben.ch/13YKQ&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;Jsben&lt;/strong&gt; de la respuesta anterior se actualiz&amp;oacute; para mostrar que un clon profundo recursivo supera a todos los dem&amp;aacute;s mencionados: &lt;a href=&quot;http://jsben.ch/13YKQ&quot;&gt;http://jsben.ch/13YKQ&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2555b6b4406c27e0b54955990463a4b720d6d0cc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Jsperf&lt;/strong&gt; ranks it number one here: &lt;a href=&quot;https://jsperf.com/deep-copy-vs-json-stringify-json-parse/5&quot;&gt;https://jsperf.com/deep-copy-vs-json-stringify-json-parse/5&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;Jsperf lo&lt;/strong&gt; clasifica como el n&amp;uacute;mero uno aqu&amp;iacute;: &lt;a href=&quot;https://jsperf.com/deep-copy-vs-json-stringify-json-parse/5&quot;&gt;https://jsperf.com/deep-copy-vs-json-stringify-json-parse/5&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e99feda972b8e68f59dd8de4c023595f522160c0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE:&lt;/strong&gt;  If you use some of this, you may have problems with some iteration who use &lt;code&gt;hasOwnProperty&lt;/code&gt;. Because, &lt;code&gt;create&lt;/code&gt; create new empty object who inherits &lt;code&gt;oldObject&lt;/code&gt;. But it is still useful and practical for cloning objects.</source>
          <target state="translated">&lt;strong&gt;NOTA:&lt;/strong&gt; Si usa algo de esto, puede tener problemas con algunas iteraciones que usan &lt;code&gt;hasOwnProperty&lt;/code&gt; . Porque, &lt;code&gt;create&lt;/code&gt; crea un nuevo objeto vac&amp;iacute;o que hereda &lt;code&gt;oldObject&lt;/code&gt; . Pero sigue siendo &amp;uacute;til y pr&amp;aacute;ctico para clonar objetos.</target>
        </trans-unit>
        <trans-unit id="65ffb366670c8905ce2cbfbc0625f63dca2cef8b" translate="yes" xml:space="preserve">
          <source>Additionally, please note that, in Chrome 65 at least, native cloning is not the way to go. According to JSPerf, performing native cloning by creating a new function is nearly &lt;strong&gt;800x&lt;/strong&gt; slower than using JSON.stringify which is incredibly fast all the way across the board.</source>
          <target state="translated">Adem&amp;aacute;s, tenga en cuenta que, al menos en Chrome 65, la clonaci&amp;oacute;n nativa no es el camino a seguir. Seg&amp;uacute;n JSPerf, realizar una clonaci&amp;oacute;n nativa creando una nueva funci&amp;oacute;n es casi 800 veces m&amp;aacute;s lento que usar JSON.stringify, que es incre&amp;iacute;blemente r&amp;aacute;pido en todos los &amp;aacute;mbitos.</target>
        </trans-unit>
        <trans-unit id="e9fbc91983624098eab0a0b9d68cfc16ffd38c16" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign&quot;&gt;&lt;code&gt;Object.assign&lt;/code&gt;&lt;/a&gt; method is part of the ECMAScript 2015 (ES6) standard and does exactly what you need.</source>
          <target state="translated">Un m&amp;eacute;todo &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign&quot;&gt; &lt;code&gt;Object.assign&lt;/code&gt; &lt;/a&gt; es parte del est&amp;aacute;ndar ECMAScript 2015 (ES6) y hace exactamente lo que necesita.</target>
        </trans-unit>
        <trans-unit id="a0c9d534b25ad917673b687d062bc3704ac1ff81" translate="yes" xml:space="preserve">
          <source>And .slice() has better performance than .concat(),
&lt;a href=&quot;http://jsperf.com/duplicate-array-slice-vs-concat/3&quot;&gt;http://jsperf.com/duplicate-array-slice-vs-concat/3&lt;/a&gt;</source>
          <target state="translated">Y .slice () tiene un mejor rendimiento que .concat (), &lt;a href=&quot;http://jsperf.com/duplicate-array-slice-vs-concat/3&quot;&gt;http://jsperf.com/duplicate-array-slice-vs-concat/3&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2a237d4316f291003b4b86dad80c344ac6f420dc" translate="yes" xml:space="preserve">
          <source>And here's the function for quick reference:</source>
          <target state="translated">Y aqu√≠ est√° la funci√≥n de referencia r√°pida:</target>
        </trans-unit>
        <trans-unit id="cc865b9cd1412c3a1c78268236049f2cf0ff478f" translate="yes" xml:space="preserve">
          <source>And shallow copy one-liner (&lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015&quot;&gt;ECMAScript 6th edition&lt;/a&gt;, 2015):</source>
          <target state="translated">Y copia superficial de una sola l&amp;iacute;nea ( &lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015&quot;&gt;ECMAScript 6ta edici&amp;oacute;n&lt;/a&gt; , 2015):</target>
        </trans-unit>
        <trans-unit id="2a3de4a9dc7c9f3bd23b0b53226033777b1c013b" translate="yes" xml:space="preserve">
          <source>AngularJS</source>
          <target state="translated">AngularJS</target>
        </trans-unit>
        <trans-unit id="38e2141eb9ea203ffeb32d4cd55e0a65c6cf0af8" translate="yes" xml:space="preserve">
          <source>AngularJS - &lt;a href=&quot;https://docs.angularjs.org/api/ng/function/angular.copy&quot;&gt;&lt;code&gt;angular.copy&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">AngularJS - &lt;a href=&quot;https://docs.angularjs.org/api/ng/function/angular.copy&quot;&gt; &lt;code&gt;angular.copy&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="dbb5fb1e128b60678a581b67d84a563bc06d30de" translate="yes" xml:space="preserve">
          <source>As long as you don't assign an object to anything it maintains no reference in memory.  So to make an object that you want to share among other objects, you'll have to create a factory like so:</source>
          <target state="translated">Mientras no asignes un objeto a nada,no mantiene ninguna referencia en la memoria.As√≠ que para hacer un objeto que quieras compartir entre otros objetos,tendr√°s que crear una f√°brica como esta:</target>
        </trans-unit>
        <trans-unit id="113eae0600518a1898dafd21a63c05f2d981cee1" translate="yes" xml:space="preserve">
          <source>Assuming that you have only variables and not any functions in your object, you can  just use:</source>
          <target state="translated">Asumiendo que s√≥lo tienes variables y no funciones en tu objeto,s√≥lo puedes usar:</target>
        </trans-unit>
        <trans-unit id="885484b4ce4212e28b9e1f43dae9669bda2c3f25" translate="yes" xml:space="preserve">
          <source>Asynchronous Workaround: Usable. üòï</source>
          <target state="translated">Soluci√≥n asincr√≥nica:Utilizable.üòï</target>
        </trans-unit>
        <trans-unit id="45d1707d26f931a8d5a0db1965460102f4e3ff0c" translate="yes" xml:space="preserve">
          <source>Beware using the &lt;code&gt;JSON.parse(JSON.stringify(obj))&lt;/code&gt; method on &lt;code&gt;Date&lt;/code&gt; objects - &lt;code&gt;JSON.stringify(new Date())&lt;/code&gt; returns a string representation of the date in ISO format, which &lt;code&gt;JSON.parse()&lt;/code&gt;&lt;strong&gt;doesn't&lt;/strong&gt; convert back to a &lt;code&gt;Date&lt;/code&gt; object. &lt;a href=&quot;https://stackoverflow.com/questions/11491938/issues-with-date-when-using-json-stringify-and-json-parse/11491993#11491993&quot;&gt;See this answer for more details&lt;/a&gt;.</source>
          <target state="translated">Tenga cuidado al usar el &lt;code&gt;JSON.parse(JSON.stringify(obj))&lt;/code&gt; en objetos &lt;code&gt;Date&lt;/code&gt; : &lt;code&gt;JSON.stringify(new Date())&lt;/code&gt; devuelve una representaci&amp;oacute;n de cadena de la fecha en formato ISO, que &lt;code&gt;JSON.parse()&lt;/code&gt; &lt;strong&gt;no&lt;/strong&gt; convierte de nuevo a un objeto &lt;code&gt;Date&lt;/code&gt; . &lt;a href=&quot;https://stackoverflow.com/questions/11491938/issues-with-date-when-using-json-stringify-and-json-parse/11491993#11491993&quot;&gt;Vea esta respuesta para m&amp;aacute;s detalles&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="2973236548453f38ead1f38928c94284e9ecced4" translate="yes" xml:space="preserve">
          <source>Browsers do not currently provide a direct interface for the structured cloning algorithm, but a global &lt;code&gt;structuredClone()&lt;/code&gt; function has been discussed in &lt;a href=&quot;https://github.com/whatwg/html/issues/793&quot;&gt;whatwg/html#793 on GitHub&lt;/a&gt;. As currently proposed, using it for most purposes would be as simple as:</source>
          <target state="translated">Los navegadores actualmente no proporcionan una interfaz directa para el algoritmo de clonaci&amp;oacute;n estructurada, pero se ha discutido una funci&amp;oacute;n &lt;code&gt;structuredClone()&lt;/code&gt; &lt;a href=&quot;https://github.com/whatwg/html/issues/793&quot;&gt;globalClone&lt;/a&gt; () en whatwg / html # 793 en GitHub . Como se propone actualmente, usarlo para la mayor&amp;iacute;a de los prop&amp;oacute;sitos ser&amp;iacute;a tan simple como:</target>
        </trans-unit>
        <trans-unit id="12dd3382e21919424cc1c91dd85712739a9d2a65" translate="yes" xml:space="preserve">
          <source>Checkout this benchmark: &lt;a href=&quot;http://jsben.ch/#/bWfk9&quot;&gt;http://jsben.ch/#/bWfk9&lt;/a&gt;</source>
          <target state="translated">Consulte este punto de referencia: &lt;a href=&quot;http://jsben.ch/#/bWfk9&quot;&gt;http://jsben.ch/#/bWfk9&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ca567dda33cdf7058994a40bb9ef4db135c7d283" translate="yes" xml:space="preserve">
          <source>Code:</source>
          <target state="translated">Code:</target>
        </trans-unit>
        <trans-unit id="33f64e6db7d2271df61b32aa8af7e37929c89a90" translate="yes" xml:space="preserve">
          <source>Concatenation (string arrays, number arrays - only)</source>
          <target state="translated">Concatenaci√≥n (arreglos de cuerdas,arreglos de n√∫meros-solamente)</target>
        </trans-unit>
        <trans-unit id="62deea81938f50a7bee5245055544936da12eca8" translate="yes" xml:space="preserve">
          <source>Crockford suggests (and I prefer) using this function:</source>
          <target state="translated">Crockford sugiere (y yo prefiero)usar esta funci√≥n:</target>
        </trans-unit>
        <trans-unit id="b03a8e60580e981cb3346f2471707bf40078fbfc" translate="yes" xml:space="preserve">
          <source>Custom function: for-loop or recursive copy</source>
          <target state="translated">Funci√≥n personalizada:para el bucle o la copia recursiva</target>
        </trans-unit>
        <trans-unit id="2a51e59697fbe92dbb2e644bf2b96a60a7492a59" translate="yes" xml:space="preserve">
          <source>Cyclic array test...</source>
          <target state="translated">La prueba de la matriz c√≠clica...</target>
        </trans-unit>
        <trans-unit id="6132b55eb09b417ca145535639ce3a5e8b1dabcd" translate="yes" xml:space="preserve">
          <source>Direct Support in Browsers: Maybe Eventually? üòê</source>
          <target state="translated">Apoyo directo en los navegadores:¬øQuiz√°s con el tiempo? üòê</target>
        </trans-unit>
        <trans-unit id="f340712260381d35a53813a65d261137ac25e7e6" translate="yes" xml:space="preserve">
          <source>ES6</source>
          <target state="translated">ES6</target>
        </trans-unit>
        <trans-unit id="c59815c7f257e5f2bd8a4266850beddb6342fb92" translate="yes" xml:space="preserve">
          <source>Example Use:</source>
          <target state="translated">Ejemplo de uso:</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">Ampliar fragmento</target>
        </trans-unit>
        <trans-unit id="16ba7f824c47b8dd6421330a2246967e2e7b4d98" translate="yes" xml:space="preserve">
          <source>Fast cloning with data loss - JSON.parse/stringify</source>
          <target state="translated">Clonaci√≥n r√°pida con p√©rdida de datos-JSON.parsestringify</target>
        </trans-unit>
        <trans-unit id="5df81ffa82179b458e1d55e350db9d88805a69b2" translate="yes" xml:space="preserve">
          <source>Features:</source>
          <target state="translated">Features:</target>
        </trans-unit>
        <trans-unit id="548b5bb5625e9995c9b6a6c0c6caa954f3d6146a" translate="yes" xml:space="preserve">
          <source>For completeness, note that ES6 offers two shallow copy mechanisms: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign&quot;&gt;&lt;code&gt;Object.assign()&lt;/code&gt;&lt;/a&gt; and the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax&quot;&gt;spread syntax&lt;/a&gt;.
which copies values of all enumerable own properties from one object to another. For example:</source>
          <target state="translated">Para completar, tenga en cuenta que ES6 ofrece dos mecanismos de copia superficial: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign&quot;&gt; &lt;code&gt;Object.assign()&lt;/code&gt; &lt;/a&gt; y la &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax&quot;&gt;sintaxis de propagaci&amp;oacute;n&lt;/a&gt; . que copia los valores de todas las propiedades propias enumerables de un objeto a otro. Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="f44cbbef6a62693cba2e071062336ff3dc94bb80" translate="yes" xml:space="preserve">
          <source>For exemple if  &lt;code&gt;oldObject.a = 5;&lt;/code&gt;</source>
          <target state="translated">Por ejemplo si &lt;code&gt;oldObject.a = 5;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f57eb53b7c897cb1b501d5248fb863801dd72556" translate="yes" xml:space="preserve">
          <source>For plain old JavaScript objects, a tried and true good way to clone an object in modern runtimes is quite simply:</source>
          <target state="translated">Para los simples objetos JavaScript,una buena forma de clonar un objeto en los tiempos modernos es bastante simple:</target>
        </trans-unit>
        <trans-unit id="290ba1968d5c0e35790807a7d71890b939dd1191" translate="yes" xml:space="preserve">
          <source>For the people who want to use the &lt;code&gt;JSON.parse(JSON.stringify(obj))&lt;/code&gt; version, but without losing the Date objects, you can use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#Using_the_reviver_parameter&quot;&gt;second argument of &lt;code&gt;parse&lt;/code&gt; method&lt;/a&gt; to convert the strings back to Date:</source>
          <target state="translated">Para las personas que desean usar la &lt;code&gt;JSON.parse(JSON.stringify(obj))&lt;/code&gt; , pero sin perder los objetos Date, puede usar el &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#Using_the_reviver_parameter&quot;&gt;segundo argumento del m&amp;eacute;todo &lt;code&gt;parse&lt;/code&gt; &lt;/a&gt; para convertir las cadenas de nuevo a Date:</target>
        </trans-unit>
        <trans-unit id="819886a4425ab8b131d38de099cf7d21b2593149" translate="yes" xml:space="preserve">
          <source>Function test...</source>
          <target state="translated">Prueba de funcionamiento...</target>
        </trans-unit>
        <trans-unit id="283604d15a7ac67eabe5b3c0f40f636ecca3c9e6" translate="yes" xml:space="preserve">
          <source>Here is an example on how to use it:</source>
          <target state="translated">Aqu√≠ hay un ejemplo de c√≥mo usarlo:</target>
        </trans-unit>
        <trans-unit id="986b97ae19544455c19671d7339eadc9fb9e0e07" translate="yes" xml:space="preserve">
          <source>Here's a more robust version (thanks to Justin McCandless this now supports cyclic references as well):</source>
          <target state="translated">Aqu√≠ hay una versi√≥n m√°s robusta (gracias a Justin McCandless ahora tambi√©n soporta referencias c√≠clicas):</target>
        </trans-unit>
        <trans-unit id="a5601ce43e9ecb2f018a4f09ccd9028408b86893" translate="yes" xml:space="preserve">
          <source>Here's a version of ConroyP's answer above that works even if the constructor has required parameters:</source>
          <target state="translated">Aqu√≠ hay una versi√≥n de la respuesta de ConroyP arriba que funciona incluso si el constructor tiene los par√°metros requeridos:</target>
        </trans-unit>
        <trans-unit id="43785ecb3cc28739be6434fed6fb0759ce3749d8" translate="yes" xml:space="preserve">
          <source>Hope these help...</source>
          <target state="translated">Espero que esto ayude...</target>
        </trans-unit>
        <trans-unit id="9049385ac01962cfa840cada7563fa5809874c60" translate="yes" xml:space="preserve">
          <source>I disagree with the answer with the greatest votes &lt;a href=&quot;https://stackoverflow.com/a/5344074/1110941&quot;&gt;here&lt;/a&gt;. A &lt;strong&gt;Recursive Deep Clone&lt;/strong&gt; is &lt;strong&gt;much faster&lt;/strong&gt; than the &lt;em&gt;JSON.parse(JSON.stringify(obj))&lt;/em&gt; approach mentioned.</source>
          <target state="translated">No estoy de acuerdo con la respuesta con los mejores votos &lt;a href=&quot;https://stackoverflow.com/a/5344074/1110941&quot;&gt;aqu&amp;iacute;&lt;/a&gt; . Un &lt;strong&gt;clon profundo recursivo&lt;/strong&gt; es &lt;strong&gt;mucho m&amp;aacute;s r&amp;aacute;pido&lt;/strong&gt; que el &lt;em&gt;enfoque JSON.parse (JSON.stringify (obj))&lt;/em&gt; mencionado.</target>
        </trans-unit>
        <trans-unit id="d8d10e7469763c4fa551d6c8215a34b7f532b787" translate="yes" xml:space="preserve">
          <source>I have two good answers depending on whether your objective is to clone a &quot;plain old JavaScript object&quot; or not.</source>
          <target state="translated">Tengo dos buenas respuestas dependiendo de si su objetivo es clonar un &quot;simple objeto JavaScript&quot; o no.</target>
        </trans-unit>
        <trans-unit id="a7fc0603da96abdae3ed58d9e47ceb2a514ed8c2" translate="yes" xml:space="preserve">
          <source>I know this is an old post, but I thought this may be of some help to the next person who stumbles along.</source>
          <target state="translated">S√© que es un puesto viejo,pero pens√© que podr√≠a ser de ayuda para la pr√≥xima persona que se tropiece.</target>
        </trans-unit>
        <trans-unit id="770b6fd856a41550954cd1546783c443b5849773" translate="yes" xml:space="preserve">
          <source>I'm surprised no canonical solution exists.</source>
          <target state="translated">Me sorprende que no exista una soluci√≥n can√≥nica.</target>
        </trans-unit>
        <trans-unit id="489f920024365227ffd4310703cdb9fed08a94ca" translate="yes" xml:space="preserve">
          <source>I've also seen recursive copying functions with various flaws.</source>
          <target state="translated">Tambi√©n he visto funciones de copia recursivas con varios defectos.</target>
        </trans-unit>
        <trans-unit id="0ab70149b7f9dac23be9515659eb536b44c9781b" translate="yes" xml:space="preserve">
          <source>I've done things like &lt;code&gt;obj = JSON.parse(JSON.stringify(o));&lt;/code&gt; but question the efficiency.</source>
          <target state="translated">He hecho cosas como &lt;code&gt;obj = JSON.parse(JSON.stringify(o));&lt;/code&gt; Pero cuestiona la eficiencia.</target>
        </trans-unit>
        <trans-unit id="2adf921803ec4757f8d2c2ba821f04b210f4ff78" translate="yes" xml:space="preserve">
          <source>If there wasn't any builtin one, you could try:</source>
          <target state="translated">Si no hubiera uno incorporado,podr√≠as intentarlo:</target>
        </trans-unit>
        <trans-unit id="9398424fd79f967ba29c3a2b98b9498a1b81b153" translate="yes" xml:space="preserve">
          <source>If you are using Javascript ES6 try this native method for cloning or shallow copy.</source>
          <target state="translated">Si est√° usando Javascript ES6 pruebe este m√©todo nativo de clonaci√≥n o copia superficial.</target>
        </trans-unit>
        <trans-unit id="9090a40c83a01a70b916e0798f48cfa367bb40e1" translate="yes" xml:space="preserve">
          <source>If you do not use &lt;code&gt;Date&lt;/code&gt;s, functions, &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;Infinity&lt;/code&gt;, RegExps, Maps, Sets, Blobs, FileLists, ImageDatas, sparse Arrays, Typed Arrays or other complex types within your object, a very simple one liner to deep clone an object is:</source>
          <target state="translated">Si no utiliza &lt;code&gt;Date&lt;/code&gt; s, funciones, &lt;code&gt;undefined&lt;/code&gt; , &lt;code&gt;Infinity&lt;/code&gt; , RegExps, Maps, Sets, Blobs, FileLists, ImageDatas, Spar Arrays, Typed Arrays u otros tipos complejos dentro de su objeto, un revestimiento muy simple para clonar en profundidad un objeto es :</target>
        </trans-unit>
        <trans-unit id="07552e6b07e4b59604aa421015a02d6d4053e7f4" translate="yes" xml:space="preserve">
          <source>If you know the structure of the objects you are trying to clone or can avoid deep nested arrays you can write a simple &lt;code&gt;for (var i in obj)&lt;/code&gt; loop to clone your object while checking hasOwnProperty and it will be much much faster than jQuery.</source>
          <target state="translated">Si conoce la estructura de los objetos que est&amp;aacute; intentando clonar o puede evitar matrices anidadas profundas, puede escribir un ciclo simple &lt;code&gt;for (var i in obj)&lt;/code&gt; para clonar su objeto mientras verifica hasOwnProperty y ser&amp;aacute; mucho m&amp;aacute;s r&amp;aacute;pido que jQuery.</target>
        </trans-unit>
        <trans-unit id="50c28e80de0f4e89573c3db98a84c97a95a95f4a" translate="yes" xml:space="preserve">
          <source>If you're using it, the &lt;a href=&quot;http://documentcloud.github.com/underscore/&quot;&gt;Underscore.js&lt;/a&gt; library has a &lt;a href=&quot;http://documentcloud.github.com/underscore/#clone&quot;&gt;clone&lt;/a&gt; method.</source>
          <target state="translated">Si lo est&amp;aacute; utilizando, la biblioteca &lt;a href=&quot;http://documentcloud.github.com/underscore/&quot;&gt;Underscore.js&lt;/a&gt; tiene un m&amp;eacute;todo de &lt;a href=&quot;http://documentcloud.github.com/underscore/#clone&quot;&gt;clonaci&amp;oacute;n&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="32c99c466e4a0911b1659ab32d74fd72754b74b4" translate="yes" xml:space="preserve">
          <source>In my previous tests where speed was a main concern I found</source>
          <target state="translated">En mis pruebas anteriores,en las que la velocidad era una de las principales preocupaciones,encontr√©</target>
        </trans-unit>
        <trans-unit id="401b0ccb46c432dff2afad559300cc0def5cbae9" translate="yes" xml:space="preserve">
          <source>Install it with</source>
          <target state="translated">Instalarlo con</target>
        </trans-unit>
        <trans-unit id="6cee4a345e292df7d0d5add981b24de0948ebe09" translate="yes" xml:space="preserve">
          <source>Is it efficient? Heck yes. We've tried all kinds of cloning methods and this works best. I'm sure some ninja could conjure up a faster method. But I suspect we're talking about marginal gains.</source>
          <target state="translated">¬øEs eficiente? Claro que s√≠.Hemos probado todo tipo de m√©todos de clonaci√≥n y este funciona mejor.Estoy seguro de que alg√∫n ninja podr√≠a inventar un m√©todo m√°s r√°pido.Pero sospecho que estamos hablando de ganancias marginales.</target>
        </trans-unit>
        <trans-unit id="552c5e4d033ed42b95333527705d38f03287c127" translate="yes" xml:space="preserve">
          <source>Is this efficient? Heck yes. Given that the goal is to produce a true deep-copy clone, then you're going to have to walk the members of the source object graph. With this approach, you can tweak exactly which child members to treat and how to manually handle custom types.</source>
          <target state="translated">¬øEsto es eficiente? Claro que s√≠.Dado que el objetivo es producir un verdadero clon de copia profunda,entonces vas a tener que caminar los miembros del gr√°fico del objeto fuente.Con este enfoque,puedes ajustar exactamente qu√© miembros infantiles tratar y c√≥mo manejar manualmente los tipos personalizados.</target>
        </trans-unit>
        <trans-unit id="c94a08f19c18e9bc889cd680ef7113eda1f000c9" translate="yes" xml:space="preserve">
          <source>It's called &quot;structured cloning&quot;, works experimentally in Node 11 and later, and hopefully will land in browsers. See &lt;a href=&quot;https://stackoverflow.com/questions/122102/what-is-the-most-efficient-way-to-deep-clone-an-object-in-javascript/10916838#10916838&quot;&gt;this answer&lt;/a&gt; for more details.</source>
          <target state="translated">Se llama &quot;clonaci&amp;oacute;n estructurada&quot;, funciona experimentalmente en el Nodo 11 y posteriores, y con suerte aterrizar&amp;aacute; en los navegadores. Vea &lt;a href=&quot;https://stackoverflow.com/questions/122102/what-is-the-most-efficient-way-to-deep-clone-an-object-in-javascript/10916838#10916838&quot;&gt;esta respuesta&lt;/a&gt; para m&amp;aacute;s detalles.</target>
        </trans-unit>
        <trans-unit id="a50766b911feda7edb7ebbbfa654117a491b7986" translate="yes" xml:space="preserve">
          <source>It's terse, works as expected and you don't need a library.</source>
          <target state="translated">Es conciso,funciona como se espera y no necesitas una biblioteca.</target>
        </trans-unit>
        <trans-unit id="8bed1ab98bd53aec22f5714f0cb05545fe888159" translate="yes" xml:space="preserve">
          <source>JSON.parse (string arrays, number arrays, object arrays - only)</source>
          <target state="translated">JSON.parse (arreglos de cuerdas,arreglos de n√∫meros,arreglos de objetos-s√≥lo)</target>
        </trans-unit>
        <trans-unit id="c8e5e57858ab0b5524280bd8428db7c8b55655d8" translate="yes" xml:space="preserve">
          <source>JavaScript trace engines suck at optimizing &lt;code&gt;for..in&lt;/code&gt; loops and checking hasOwnProperty will slow you down as well. Manual clone when speed is an absolute must.</source>
          <target state="translated">Los motores de rastreo de JavaScript son muy &lt;code&gt;for..in&lt;/code&gt; optimizaci&amp;oacute;n de ... en bucles y la comprobaci&amp;oacute;n de hasOwnProperty tambi&amp;eacute;n lo ralentizar&amp;aacute;. Clonaci&amp;oacute;n manual cuando la velocidad es imprescindible.</target>
        </trans-unit>
        <trans-unit id="12a1fd73ed0eae8ce0f0c007e80a4dec94139630" translate="yes" xml:space="preserve">
          <source>Just because I didn't see &lt;a href=&quot;http://en.wikipedia.org/wiki/AngularJS&quot;&gt;AngularJS&lt;/a&gt; mentioned and thought that people might want to know...</source>
          <target state="translated">Solo porque no vi a &lt;a href=&quot;http://en.wikipedia.org/wiki/AngularJS&quot;&gt;AngularJS&lt;/a&gt; mencionado y pens&amp;eacute; que la gente querr&amp;iacute;a saber ...</target>
        </trans-unit>
        <trans-unit id="b5aceb860a4a7199d83d003b87e1425b7dd2c21b" translate="yes" xml:space="preserve">
          <source>Lastly if you are attempting to clone a known object structure in a hot loop you can get MUCH MUCH MORE PERFORMANCE by simply in-lining the clone procedure and manually constructing the object.</source>
          <target state="translated">Por √∫ltimo,si se intenta clonar una estructura de objeto conocido en un bucle caliente,se puede obtener MUCHO M√ÅS RENDIMIENTO con s√≥lo introducir el procedimiento de clonaci√≥n y construir manualmente el objeto.</target>
        </trans-unit>
        <trans-unit id="79bcce380c0ce7e7dd7c24c0657c08ae5b245de7" translate="yes" xml:space="preserve">
          <source>Let's also assume that your intention is to create a complete clone with no prototype references back to the source object. If you're not interested in a complete clone, then you can use many of the Object.clone() routines provided in some of the other answers (Crockford's pattern).</source>
          <target state="translated">Supongamos tambi√©n que su intenci√≥n es crear un clon completo sin referencias de prototipos del objeto fuente.Si no est√°s interesado en un clon completo,entonces puedes usar muchas de las rutinas de Object.clone()proporcionadas en algunas de las otras respuestas (el patr√≥n de Crockford).</target>
        </trans-unit>
        <trans-unit id="520d8bb109a39b45dd5e79bd3747a98f5ff3f2e3" translate="yes" xml:space="preserve">
          <source>Lo-Dash's _.cloneDeep</source>
          <target state="translated">Lo-Dash's _.cloneDeep</target>
        </trans-unit>
        <trans-unit id="209152665b8c481035d0e6dfb91586cec34a0c79" translate="yes" xml:space="preserve">
          <source>Lodash has a nice &lt;a href=&quot;http://lodash.com/docs#cloneDeep&quot;&gt;_.cloneDeep(value)&lt;/a&gt; method:</source>
          <target state="translated">Lodash tiene un buen &lt;a href=&quot;http://lodash.com/docs#cloneDeep&quot;&gt;m&amp;eacute;todo _.cloneDeep (value)&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="d05e9acdcff333355c411ee686bab6ff0133f9cc" translate="yes" xml:space="preserve">
          <source>Native deep cloning</source>
          <target state="translated">La clonaci√≥n profunda de los nativos</target>
        </trans-unit>
        <trans-unit id="e6539f71531625a7144c73c7a36f5fd478b0b5fe" translate="yes" xml:space="preserve">
          <source>Not only is this code brief, but it's also very readable. It's pretty easy to extend.</source>
          <target state="translated">Este c√≥digo no s√≥lo es breve,sino que tambi√©n es muy legible.Es bastante f√°cil de extender.</target>
        </trans-unit>
        <trans-unit id="d4bf0db1b60eef8c1813d1041bc18495d9ce39ca" translate="yes" xml:space="preserve">
          <source>Note that the source object must be a pure JSON object. This is to say, all of its nested properties must be scalars (like boolean, string, array, object, etc). Any functions or special objects like RegExp or Date will not be cloned.</source>
          <target state="translated">Tenga en cuenta que el objeto fuente debe ser un objeto JSON puro.Es decir,todas sus propiedades anidadas deben ser escalares (como booleano,cadena,matriz,objeto,etc.).Cualquier funci√≥n u objeto especial como RegExp o Date no ser√° clonado.</target>
        </trans-unit>
        <trans-unit id="92030dffe19cafc2b1d2c1490105e85367237388" translate="yes" xml:space="preserve">
          <source>Now, for non-plain JavaScript objects, there isn't a really simple answer.  In fact, there can't be because of the dynamic nature of JavaScript functions and inner object state. Deep cloning a JSON structure with functions inside requires you recreate those functions and their inner context. And JavaScript simply doesn't have a standardized way of doing that.</source>
          <target state="translated">Ahora,para los objetos de JavaScript no explicados,no hay una respuesta realmente simple.De hecho,no puede haberla debido a la naturaleza din√°mica de las funciones de JavaScript y el estado del objeto interno.La clonaci√≥n profunda de una estructura JSON con funciones en su interior requiere recrear esas funciones y su contexto interno.Y JavaScript simplemente no tiene una forma estandarizada de hacerlo.</target>
        </trans-unit>
        <trans-unit id="2dddac477d2fc4da4f071b02ecb0e5c67e1c4eec" translate="yes" xml:space="preserve">
          <source>Only when you can use &lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015&quot;&gt;ECMAScript 6&lt;/a&gt; or &lt;a href=&quot;https://en.wikipedia.org/wiki/Source-to-source_compiler&quot;&gt;transpilers&lt;/a&gt;.</source>
          <target state="translated">Solo cuando puede usar &lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015&quot;&gt;ECMAScript 6&lt;/a&gt; o &lt;a href=&quot;https://en.wikipedia.org/wiki/Source-to-source_compiler&quot;&gt;transpilers&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a146c2606b2683fa89a081df852f2344d61d9122" translate="yes" xml:space="preserve">
          <source>Preserves getter/setter.</source>
          <target state="translated">Conserva el gettersetter.</target>
        </trans-unit>
        <trans-unit id="ead9d710f07a34e7916d508ba40f3bfe0a8e2dec" translate="yes" xml:space="preserve">
          <source>Preserves prototype informations.</source>
          <target state="translated">Preserva la informaci√≥n de los prototipos.</target>
        </trans-unit>
        <trans-unit id="b94a461fa5defe5b279c9608d6e61c90faa2d659" translate="yes" xml:space="preserve">
          <source>Read more...</source>
          <target state="translated">Leer m√°s...</target>
        </trans-unit>
        <trans-unit id="8497cdbe15233a52b824e49dffae225b8ff72450" translate="yes" xml:space="preserve">
          <source>Reassignment &quot;=&quot; (string arrays, number arrays - only)</source>
          <target state="translated">Reasignaci√≥n &quot;=&quot; (matrices de cadenas,matrices de n√∫meros-s√≥lo)</target>
        </trans-unit>
        <trans-unit id="9081c30a10752ce26712d2709bcc2abcd45f5c59" translate="yes" xml:space="preserve">
          <source>Reliable cloning using a library</source>
          <target state="translated">Clonaci√≥n fiable utilizando una biblioteca</target>
        </trans-unit>
        <trans-unit id="471c7b148e65bf588090efbb408cf2fb82ab9380" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://stackoverflow.com/questions/122102/what-is-the-most-efficient-way-to-deep-clone-an-object-in-javascript/5344074#5344074&quot;&gt;Corban's answer&lt;/a&gt; for benchmarks.</source>
          <target state="translated">Ver &lt;a href=&quot;https://stackoverflow.com/questions/122102/what-is-the-most-efficient-way-to-deep-clone-an-object-in-javascript/5344074#5344074&quot;&gt;la respuesta de Corban&lt;/a&gt; para puntos de referencia.</target>
        </trans-unit>
        <trans-unit id="436e1d9882fcfbc9f3b2875a8d9852f501984dbe" translate="yes" xml:space="preserve">
          <source>Shallow copy one-liner (&lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript#5th_Edition&quot;&gt;ECMAScript 5th edition&lt;/a&gt;):</source>
          <target state="translated">Shallow copy one-liner ( &lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript#5th_Edition&quot;&gt;ECMAScript 5th edition&lt;/a&gt; ):</target>
        </trans-unit>
        <trans-unit id="4bcb4e163bf193fe874c35e7a1a754e4ed2bd51c" translate="yes" xml:space="preserve">
          <source>Show code snippet</source>
          <target state="translated">Mostrar fragmento de c√≥digo</target>
        </trans-unit>
        <trans-unit id="d9cc20901b278592274b450a481e3147b18f747f" translate="yes" xml:space="preserve">
          <source>Since cloning objects is not trivial (complex types, circular references, function etc.), most major libraries provide function to clone objects. &lt;strong&gt;Don't reinvent the wheel&lt;/strong&gt; - if you're already using a library, check if it has an object cloning function. For example,</source>
          <target state="translated">Dado que la clonaci&amp;oacute;n de objetos no es trivial (tipos complejos, referencias circulares, funciones, etc.), la mayor&amp;iacute;a de las bibliotecas principales proporcionan funciones para clonar objetos. &lt;strong&gt;No reinvente la rueda&lt;/strong&gt; : si ya est&amp;aacute; utilizando una biblioteca, verifique si tiene una funci&amp;oacute;n de clonaci&amp;oacute;n de objetos. Por ejemplo,</target>
        </trans-unit>
        <trans-unit id="77920747b65548ba6059a3d815b6120916ef3d84" translate="yes" xml:space="preserve">
          <source>Slice (string arrays, number arrays - only)</source>
          <target state="translated">Slice (matrices de cuerdas,matrices de n√∫meros-s√≥lo)</target>
        </trans-unit>
        <trans-unit id="1ffe9a46d7be9b8028812dac880cc2994ed293c7" translate="yes" xml:space="preserve">
          <source>So there you go. Two approaches. Both are efficient in my view.</source>
          <target state="translated">As√≠ que ah√≠ lo tienes.Dos aproximaciones.Ambos son eficientes en mi opini√≥n.</target>
        </trans-unit>
        <trans-unit id="6ad3b82357863678ee1004a1578b7bbd9d5bb008" translate="yes" xml:space="preserve">
          <source>Structured Cloning</source>
          <target state="translated">Clonaci√≥n estructurada</target>
        </trans-unit>
        <trans-unit id="23f01f984def29d2ca8450b6649412c885cc1ab0" translate="yes" xml:space="preserve">
          <source>Support in Node.js: Experimental üôÇ</source>
          <target state="translated">Soporte en Node.js:Experimental üôÇ</target>
        </trans-unit>
        <trans-unit id="59e328d320b19ac5a6aaa19e1f21c6d03c007174" translate="yes" xml:space="preserve">
          <source>Synchronous Workarounds: Awful! ü§¢</source>
          <target state="translated">Soluciones sincr√≥nicas:¬°Incre√≠ble! ü§¢</target>
        </trans-unit>
        <trans-unit id="5d3e2372695f63ce0c53a4f4135db20d5ae16db5" translate="yes" xml:space="preserve">
          <source>Test:</source>
          <target state="translated">Test:</target>
        </trans-unit>
        <trans-unit id="a5e11aaef6d86dbb08ddecaba334a8d38a925a15" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Notification/Notification&quot;&gt;&lt;code&gt;Notification&lt;/code&gt; constructor&lt;/a&gt; creates a structured clone of its associated data. It also attempts to display a browser notification to the user, but this will silently fail unless you have requested notification permission. In case you have the permission for other purposes, we'll immediately close the notification we've created.</source>
          <target state="translated">El &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Notification/Notification&quot;&gt;constructor de &lt;code&gt;Notification&lt;/code&gt; &lt;/a&gt; crea un clon estructurado de sus datos asociados. Tambi&amp;eacute;n intenta mostrar una notificaci&amp;oacute;n del navegador al usuario, pero esto fallar&amp;aacute; silenciosamente a menos que haya solicitado permiso de notificaci&amp;oacute;n. En caso de que tenga permiso para otros fines, cerraremos inmediatamente la notificaci&amp;oacute;n que hemos creado.</target>
        </trans-unit>
        <trans-unit id="33abd86738e91ddf762ad34b84e77510ca29a298" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;v8&lt;/code&gt; module in Node.js currently (as of Node 11) &lt;a href=&quot;https://nodejs.org/api/all.html#v8_serialization_api&quot;&gt;exposes the structured serialization API directly&lt;/a&gt;, but this functionality is still marked as &quot;experimental&quot;, and subject to change or removal in future versions. If you're using a compatible version, cloning an object is as simple as:</source>
          <target state="translated">El m&amp;oacute;dulo &lt;code&gt;v8&lt;/code&gt; en Node.js actualmente (a partir del Nodo 11) &lt;a href=&quot;https://nodejs.org/api/all.html#v8_serialization_api&quot;&gt;expone la API de serializaci&amp;oacute;n estructurada directamente&lt;/a&gt; , pero esta funcionalidad todav&amp;iacute;a est&amp;aacute; marcada como &quot;experimental&quot; y est&amp;aacute; sujeta a cambios o eliminaci&amp;oacute;n en futuras versiones. Si est&amp;aacute; utilizando una versi&amp;oacute;n compatible, clonar un objeto es tan simple como:</target>
        </trans-unit>
        <trans-unit id="4ebf0771ba83c4cde2f39337676c4fc1f72d4b19" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;polyfill&lt;/strong&gt; to support older browsers:</source>
          <target state="translated">El &lt;strong&gt;polyfill&lt;/strong&gt; para admitir navegadores antiguos:</target>
        </trans-unit>
        <trans-unit id="6ad8ed5785225ec56294ca4522abde5f0721c0e0" translate="yes" xml:space="preserve">
          <source>The HTML standard includes &lt;a href=&quot;https://html.spec.whatwg.org/multipage/structured-data.html#safe-passing-of-structured-data&quot;&gt;&lt;strong&gt;an internal structured cloning/serialization algorithm&lt;/strong&gt;&lt;/a&gt; that can create deep clones of objects. It is still limited to certain built-in types, but in addition to the few types supported by JSON it also supports Dates, RegExps, Maps, Sets, Blobs, FileLists, ImageDatas, sparse Arrays, Typed Arrays, and probably more in the future. It also preserves references within the cloned data, allowing it to support cyclical and recursive structures that would cause errors for JSON.</source>
          <target state="translated">El est&amp;aacute;ndar HTML incluye &lt;a href=&quot;https://html.spec.whatwg.org/multipage/structured-data.html#safe-passing-of-structured-data&quot;&gt;&lt;strong&gt;un algoritmo de clonaci&amp;oacute;n / serializaci&amp;oacute;n estructurado interno&lt;/strong&gt;&lt;/a&gt; que puede crear clones profundos de objetos. Todav&amp;iacute;a est&amp;aacute; limitado a ciertos tipos integrados, pero adem&amp;aacute;s de los pocos tipos admitidos por JSON, tambi&amp;eacute;n es compatible con Fechas, RegExps, Mapas, Conjuntos, Blobs, Listas de archivos, ImageDatas, Matrices dispersas, Matrices escritas y probablemente m&amp;aacute;s en el futuro . Tambi&amp;eacute;n conserva referencias dentro de los datos clonados, lo que le permite soportar estructuras c&amp;iacute;clicas y recursivas que causar&amp;iacute;an errores para JSON.</target>
        </trans-unit>
        <trans-unit id="7db166788c70c64b3e72f12a43552987dd23d268" translate="yes" xml:space="preserve">
          <source>The Object.assign() method is used to copy the values of all enumerable own properties from one or more source objects to a target object.</source>
          <target state="translated">El m√©todo Object.assign()se utiliza para copiar los valores de todas las propiedades propias enumerables de uno o m√°s objetos de origen a un objeto de destino.</target>
        </trans-unit>
        <trans-unit id="ea189bc649e6f71823539572e783a6707400ee47" translate="yes" xml:space="preserve">
          <source>The correct way to do this, once again, is via a convenience method that you declare and reuse within your code. The convenience method can be endowed with some understanding of your own objects so you can make sure to properly recreate the graph within the new object.</source>
          <target state="translated">La forma correcta de hacerlo,una vez m√°s,es a trav√©s de un m√©todo de conveniencia que usted declara y reutiliza dentro de su c√≥digo.El m√©todo de conveniencia puede ser dotado de cierta comprensi√≥n de sus propios objetos para que pueda asegurarse de recrear adecuadamente el gr√°fico dentro del nuevo objeto.</target>
        </trans-unit>
        <trans-unit id="9863ec7b812e3f1bc60cd8d2b37675bbd39e8ece" translate="yes" xml:space="preserve">
          <source>The efficient way to clone(not deep-clone) an object in one line of code</source>
          <target state="translated">La forma eficiente de clonar (no la clonaci√≥n profunda)un objeto en una l√≠nea de c√≥digo</target>
        </trans-unit>
        <trans-unit id="68231b93a0105cba9f5b826511c388f535a2a982" translate="yes" xml:space="preserve">
          <source>The following creates two instances of the same object. I found it and am using it currently. It's simple and easy to use.</source>
          <target state="translated">Lo siguiente crea dos instancias del mismo objeto.Lo encontr√© y lo estoy usando actualmente.Es simple y f√°cil de usar.</target>
        </trans-unit>
        <trans-unit id="81c869f74b5ea4e2a848d31cc904d67ee6808a0c" translate="yes" xml:space="preserve">
          <source>The lower-overhead way to create a structured clone with existing APIs is to post the data through one port of a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MessageChannel&quot;&gt;MessageChannels&lt;/a&gt;. The other port will emit a &lt;code&gt;message&lt;/code&gt; event with a structured clone of the attached &lt;code&gt;.data&lt;/code&gt;. Unfortunately, listening for these events is necessarily asynchronous, and the synchronous alternatives are less practical.</source>
          <target state="translated">La forma m&amp;aacute;s econ&amp;oacute;mica de crear un clon estructurado con las API existentes es publicar los datos a trav&amp;eacute;s de un puerto de un &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MessageChannel&quot;&gt;MessageChannels&lt;/a&gt; . El otro puerto emitir&amp;aacute; un evento de &lt;code&gt;message&lt;/code&gt; con un clon estructurado de los datos adjuntos. Desafortunadamente, escuchar estos eventos es necesariamente as&amp;iacute;ncrono, y las alternativas sincr&amp;oacute;nicas son menos pr&amp;aacute;cticas.</target>
        </trans-unit>
        <trans-unit id="536fc99bec8cacfcec8ccb3299a2a1474cf19dcb" translate="yes" xml:space="preserve">
          <source>The main idea is that you need to special handle the instantiation of your functions (or prototypal classes, so to speak) on a per-type basis. Here, he's provided a few examples for RegExp and Date.</source>
          <target state="translated">La idea principal es que necesita manejar de manera especial la instanciaci√≥n de sus funciones (o las clases protot√≠picas,por as√≠ decirlo)en cada tipo.Aqu√≠,ha proporcionado algunos ejemplos para RegExp y Date.</target>
        </trans-unit>
        <trans-unit id="1d03570e2e4e838e8bb030726d270bea7041f2a1" translate="yes" xml:space="preserve">
          <source>Then you can use it in your source code.</source>
          <target state="translated">Entonces puedes usarlo en tu c√≥digo fuente.</target>
        </trans-unit>
        <trans-unit id="7e11c30d9fea076d912b290d667b8727da4dc4c8" translate="yes" xml:space="preserve">
          <source>There are few ways to copy this object, without changing the origin:</source>
          <target state="translated">Hay pocas maneras de copiar este objeto,sin cambiar el origen:</target>
        </trans-unit>
        <trans-unit id="9cffbdc2a939f45667c5e54f6158fadd340d9c4f" translate="yes" xml:space="preserve">
          <source>There are no good options for creating structured clones synchronously. Here are a couple of impractical hacks instead.</source>
          <target state="translated">No hay buenas opciones para crear clones estructurados de forma sincronizada.Aqu√≠ hay un par de hackeos impr√°cticos en su lugar.</target>
        </trans-unit>
        <trans-unit id="8f852663584757d02b70dc28699f14dc551eb913" translate="yes" xml:space="preserve">
          <source>There seems to be no ideal deep clone operator yet for array-like objects.  As the code below illustrates, John Resig's jQuery cloner turns arrays with non-numeric properties into objects that are not arrays, and RegDwight's JSON cloner drops the non-numeric properties. The following tests illustrate these points on multiple browsers:</source>
          <target state="translated">No parece haber un operador de clonaci√≥n profunda ideal a√∫n para los objetos de tipo &quot;array&quot;.Como el c√≥digo de abajo ilustra,el clonador jQuery de John Resig convierte matrices con propiedades no num√©ricas en objetos que no son matrices,y el clonador JSON de RegDwight deja caer las propiedades no num√©ricas.Las siguientes pruebas ilustran estos puntos en m√∫ltiples navegadores:</target>
        </trans-unit>
        <trans-unit id="84ff52d11742048bbbf7e36d51403e124337ed31" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s a &lt;a href=&quot;https://github.com/pvorb/node-clone&quot;&gt;library (called &amp;ldquo;clone&amp;rdquo;)&lt;/a&gt;, that does this quite well. It provides the most complete recursive cloning/copying of arbitrary objects that I know of. It also supports circular references, which is not covered by the other answers, yet.</source>
          <target state="translated">Hay una &lt;a href=&quot;https://github.com/pvorb/node-clone&quot;&gt;biblioteca (llamada &quot;clon&quot;)&lt;/a&gt; , que hace esto bastante bien. Proporciona la clonaci&amp;oacute;n / copia recursiva m&amp;aacute;s completa de objetos arbitrarios que conozco. Tambi&amp;eacute;n admite referencias circulares, que a&amp;uacute;n no est&amp;aacute;n cubiertas por las otras respuestas.</target>
        </trans-unit>
        <trans-unit id="e7b585b51a7333981d26696014816bccfeeada81" translate="yes" xml:space="preserve">
          <source>This approach is just simple and easy to implement. Wrap it into a convenience function and if you really need to squeeze out some gain, go for at a later time.</source>
          <target state="translated">Este enfoque es simple y f√°cil de implementar.Envu√©lvelo en una funci√≥n de conveniencia y si realmente necesitas exprimir alguna ganancia,ve por ella m√°s adelante.</target>
        </trans-unit>
        <trans-unit id="a4c2ce0bbf189255ab3b0ca57da43d56b020264a" translate="yes" xml:space="preserve">
          <source>This function is also available in my &lt;a href=&quot;https://github.com/mbrowne/simpleoo.js&quot;&gt;simpleoo&lt;/a&gt; library.</source>
          <target state="translated">Esta funci&amp;oacute;n tambi&amp;eacute;n est&amp;aacute; disponible en mi biblioteca &lt;a href=&quot;https://github.com/mbrowne/simpleoo.js&quot;&gt;simpleoo&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a2600c189d23edb0a999cab533a05c507062b041" translate="yes" xml:space="preserve">
          <source>This is a polyfill for &lt;code&gt;Object.create&lt;/code&gt;, so you also can use this.</source>
          <target state="translated">Este es un polyfill para &lt;code&gt;Object.create&lt;/code&gt; , por lo que tambi&amp;eacute;n puede usarlo.</target>
        </trans-unit>
        <trans-unit id="b0774eac90a9b638a66235a82ded80aefa2940d1" translate="yes" xml:space="preserve">
          <source>This is the right idea. The author (David Walsh) has commented out the cloning of generalized functions. This is something you might choose to do, depending on your use case.</source>
          <target state="translated">Esta es la idea correcta.El autor (David Walsh)ha comentado la clonaci√≥n de funciones generalizadas.Esto es algo que podr√≠a elegir hacer,dependiendo de su caso de uso.</target>
        </trans-unit>
        <trans-unit id="261e9b62de8d2e123bde54a815e45553f2317283" translate="yes" xml:space="preserve">
          <source>This is what I'm using:</source>
          <target state="translated">Esto es lo que estoy usando:</target>
        </trans-unit>
        <trans-unit id="659e6c4ea4f37da8a5c31506b04d0f7b8ce21552" translate="yes" xml:space="preserve">
          <source>This isn't generally the most efficient solution, but it does what I need. Simple test cases below...</source>
          <target state="translated">Esta no es generalmente la soluci√≥n m√°s eficiente,pero hace lo que necesito.Los simples casos de prueba de abajo...</target>
        </trans-unit>
        <trans-unit id="b052950d236ec1a18041eaee77d62414407e7bd9" translate="yes" xml:space="preserve">
          <source>Though synchronous, this can be extremely slow. It incurs all of the overhead associated with manipulating the browser history. Calling this method repeatedly can cause Chrome to become temporarily unresponsive.</source>
          <target state="translated">Aunque es sincr√≥nico,puede ser extremadamente lento.Se incurre en todos los gastos asociados con la manipulaci√≥n del historial del navegador.Llamar a este m√©todo repetidamente puede causar que Chrome no responda temporalmente.</target>
        </trans-unit>
        <trans-unit id="4c7029866039c44326f3319eb1294370f86d4564" translate="yes" xml:space="preserve">
          <source>Unless this is shipped, browsers' structured clone implementations are only exposed indirectly.</source>
          <target state="translated">A menos que esto se env√≠e,las implementaciones de clones estructurados de los navegadores s√≥lo se exponen indirectamente.</target>
        </trans-unit>
        <trans-unit id="b2c5543687bd4d6c54ea15dfda6268506dab5876" translate="yes" xml:space="preserve">
          <source>Use third-party utility functions:</source>
          <target state="translated">Utilice las funciones de utilidad de terceros:</target>
        </trans-unit>
        <trans-unit id="12afa7c8b04e82eddbbfa9613e488fc9ac57905e" translate="yes" xml:space="preserve">
          <source>We're written our own, but the best general approach I've seen is covered here:</source>
          <target state="translated">Nosotros escribimos lo nuestro,pero el mejor enfoque general que he visto est√° cubierto aqu√≠:</target>
        </trans-unit>
        <trans-unit id="15e0b646854548e9595e09e3f8c81bad137eacfc" translate="yes" xml:space="preserve">
          <source>Well if you're using angular you could do this too</source>
          <target state="translated">Bueno,si est√°s usando angular,podr√≠as hacer esto tambi√©n.</target>
        </trans-unit>
        <trans-unit id="3be707e8e7ad5100370791fab3839100ec17bea8" translate="yes" xml:space="preserve">
          <source>What is the most efficient way to clone a JavaScript object? I've seen &lt;code&gt;obj = eval(uneval(o));&lt;/code&gt; being used, but &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/uneval&quot;&gt;that's non-standard and only supported by Firefox&lt;/a&gt;.</source>
          <target state="translated">&amp;iquest;Cu&amp;aacute;l es la forma m&amp;aacute;s eficiente de clonar un objeto JavaScript? He visto &lt;code&gt;obj = eval(uneval(o));&lt;/code&gt; se usa, pero &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/uneval&quot;&gt;eso no es est&amp;aacute;ndar y solo es compatible con Firefox&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c95066fb63f8c02592924418250d8d1861631e67" translate="yes" xml:space="preserve">
          <source>What is the most efficient way to deep clone an object in JavaScript</source>
          <target state="translated">¬øCu√°l es la forma m√°s eficiente de clonar en profundidad un objeto en JavaScript</target>
        </trans-unit>
        <trans-unit id="7a2a34b88909df7977df57d0390303941a8129af" translate="yes" xml:space="preserve">
          <source>When an array contains numbers and strings - functions like .slice(), .concat(), .splice(), the assignment operator &quot;=&quot;, and Underscore.js's clone function; will make a deep copy of the array's elements.</source>
          <target state="translated">Cuando un array contiene n√∫meros y cadenas -funciones como .slice(),.concat(),.splice(),el operador de asignaci√≥n &quot;=&quot;,y la funci√≥n de clonaci√≥n de Underscore.js;har√° una copia profunda de los elementos del array.</target>
        </trans-unit>
        <trans-unit id="cdf361e2d01fbaaba5c870b9a5cc0ddc1970f725" translate="yes" xml:space="preserve">
          <source>Where jQuery's $.extend has better performance:</source>
          <target state="translated">Donde el $.extend de jQuery tiene mejor rendimiento:</target>
        </trans-unit>
        <trans-unit id="1e686536bd3ad6cc14390d72268d9b52abcfd59c" translate="yes" xml:space="preserve">
          <source>Where reassignment has the fastest performance:</source>
          <target state="translated">Donde la reasignaci√≥n tiene el rendimiento m√°s r√°pido:</target>
        </trans-unit>
        <trans-unit id="432e630fa9f7810fc1984a5382863e495968b087" translate="yes" xml:space="preserve">
          <source>Won't trigger getter/setter while copying.</source>
          <target state="translated">No activar√° el gettersetter mientras se copia.</target>
        </trans-unit>
        <trans-unit id="b2f232831d9d24acc20b048dfb05151b87a88152" translate="yes" xml:space="preserve">
          <source>Works with both &lt;strong&gt;object-literal&lt;/strong&gt; and &lt;strong&gt;functional&lt;/strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Object-oriented_programming&quot;&gt;OO&lt;/a&gt; writing styles.</source>
          <target state="translated">Funciona con estilos de escritura &lt;a href=&quot;https://en.wikipedia.org/wiki/Object-oriented_programming&quot;&gt;OO&lt;/a&gt; tanto &lt;strong&gt;literales&lt;/strong&gt; como &lt;strong&gt;funcionales&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="84c744fef8c48f835b1712f23263e95be8178b11" translate="yes" xml:space="preserve">
          <source>Write a custom function (has faster performance than $.extend() or JSON.parse):</source>
          <target state="translated">Escribir una funci√≥n personalizada (tiene un rendimiento m√°s r√°pido que $.extend()o JSON.parse):</target>
        </trans-unit>
        <trans-unit id="24eeec13a5cfa1b9871ffaa5ffc4932c30eb71ee" translate="yes" xml:space="preserve">
          <source>You can &lt;a href=&quot;https://npmjs.org/package/clone&quot;&gt;find it on npm&lt;/a&gt;, too. It can be used for the browser as well as Node.js.</source>
          <target state="translated">Tambi&amp;eacute;n puedes &lt;a href=&quot;https://npmjs.org/package/clone&quot;&gt;encontrarlo en npm&lt;/a&gt; . Se puede usar tanto para el navegador como para Node.js.</target>
        </trans-unit>
        <trans-unit id="4f425e9cb6e5145a30b05e659d988d2ffe18b8f1" translate="yes" xml:space="preserve">
          <source>You can also download the source code manually.</source>
          <target state="translated">Tambi√©n puedes descargar el c√≥digo fuente manualmente.</target>
        </trans-unit>
        <trans-unit id="b94da3599274cc93c9ee4f4d4dce4fea875b2503" translate="yes" xml:space="preserve">
          <source>but:</source>
          <target state="translated">but:</target>
        </trans-unit>
        <trans-unit id="e74b9178c2fa31f951a6a374c99e4397640909b4" translate="yes" xml:space="preserve">
          <source>jQuery - &lt;a href=&quot;https://api.jquery.com/jquery.extend/#jQuery-extend-deep-target-object1-objectN&quot;&gt;&lt;code&gt;jQuery.extend(true, { }, oldObject)&lt;/code&gt;&lt;/a&gt;; &lt;code&gt;.clone()&lt;/code&gt; only clones DOM elements</source>
          <target state="translated">jQuery - &lt;a href=&quot;https://api.jquery.com/jquery.extend/#jQuery-extend-deep-target-object1-objectN&quot;&gt; &lt;code&gt;jQuery.extend(true, { }, oldObject)&lt;/code&gt; &lt;/a&gt; ; &lt;code&gt;.clone()&lt;/code&gt; solo clona elementos DOM</target>
        </trans-unit>
        <trans-unit id="aff43fd35dc0a7127d413fb9abde08f7e745d659" translate="yes" xml:space="preserve">
          <source>jQuery's $.extend</source>
          <target state="translated">jQuery's $.extend</target>
        </trans-unit>
        <trans-unit id="d76c148e34e5a1d4cd7e4820e11d94f69b142c70" translate="yes" xml:space="preserve">
          <source>jQuery.extend is pretty fast when the &lt;code&gt;deep&lt;/code&gt; flag is set to &lt;code&gt;false&lt;/code&gt; (shallow clone). It is a good option, because it includes some extra logic for type validation and doesn't copy over undefined properties, etc., but this will also slow you down a little.</source>
          <target state="translated">jQuery.extend es bastante r&amp;aacute;pido cuando el indicador &lt;code&gt;deep&lt;/code&gt; se establece en &lt;code&gt;false&lt;/code&gt; (clon superficial). Es una buena opci&amp;oacute;n, ya que incluye una l&amp;oacute;gica adicional para la validaci&amp;oacute;n de tipos y no copia propiedades indefinidas, etc., pero esto tambi&amp;eacute;n lo ralentizar&amp;aacute; un poco.</target>
        </trans-unit>
        <trans-unit id="72cb6f36022d5578d8037e1ec22bab7293805704" translate="yes" xml:space="preserve">
          <source>lodash - &lt;a href=&quot;https://lodash.com/docs#cloneDeep&quot;&gt;&lt;code&gt;cloneDeep&lt;/code&gt;&lt;/a&gt;; can be imported separately via the &lt;a href=&quot;https://www.npmjs.com/package/lodash.clonedeep&quot;&gt;lodash.clonedeep&lt;/a&gt; module and is probably your best choice if you're not already using a library that provides a deep cloning function</source>
          <target state="translated">lodash - &lt;a href=&quot;https://lodash.com/docs#cloneDeep&quot;&gt; &lt;code&gt;cloneDeep&lt;/code&gt; &lt;/a&gt; ; se puede importar por separado a trav&amp;eacute;s del m&amp;oacute;dulo &lt;a href=&quot;https://www.npmjs.com/package/lodash.clonedeep&quot;&gt;lodash.clonedeep&lt;/a&gt; y es probablemente su mejor opci&amp;oacute;n si a&amp;uacute;n no est&amp;aacute; utilizando una biblioteca que proporciona una funci&amp;oacute;n de clonaci&amp;oacute;n profunda</target>
        </trans-unit>
        <trans-unit id="22d04dec45befefb1dfdd91ef937ed7da722a1c5" translate="yes" xml:space="preserve">
          <source>or package it with &lt;a href=&quot;https://github.com/ender-js/Ender&quot;&gt;Ender&lt;/a&gt;.</source>
          <target state="translated">o empaqu&amp;eacute;telo con &lt;a href=&quot;https://github.com/ender-js/Ender&quot;&gt;Ender&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="636610f807f175806bd4985783c71d6617b0dcdb" translate="yes" xml:space="preserve">
          <source>to be the slowest way to deep clone an object (it is slower than &lt;a href=&quot;https://api.jquery.com/jQuery.extend/&quot;&gt;jQuery.extend&lt;/a&gt; with &lt;code&gt;deep&lt;/code&gt; flag set true by 10-20%).</source>
          <target state="translated">ser la forma m&amp;aacute;s lenta de clonar en profundidad un objeto (es m&amp;aacute;s lento que &lt;a href=&quot;https://api.jquery.com/jQuery.extend/&quot;&gt;jQuery.extend&lt;/a&gt; con &lt;code&gt;deep&lt;/code&gt; indicador de profundidad establecido en un 10-20%).</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
