<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://stackoverflow.com/questions/1260748">
    <body>
      <group id="1260748">
        <trans-unit id="75df9034e5f0ab05b359ebfc7a5adfe151a4e7be" translate="yes" xml:space="preserve">
          <source>&quot;&lt;strong&gt;&lt;code&gt;submodule deinit&lt;/code&gt;&lt;/strong&gt;&quot; is the way to do so.</source>
          <target state="translated">&quot; &lt;strong&gt; &lt;code&gt;submodule deinit&lt;/code&gt; &lt;/strong&gt; &quot;가 그렇게하는 방법입니다.</target>
        </trans-unit>
        <trans-unit id="392629899d45cbd47895259061d0ff3ce069a21a" translate="yes" xml:space="preserve">
          <source>'&lt;code&gt;add&lt;/code&gt;' step which records the url of a submodule in the &lt;code&gt;.gitmodules&lt;/code&gt; file: it is need to removed for you.</source>
          <target state="translated">&lt;code&gt;.gitmodules&lt;/code&gt; 파일에 하위 모듈의 URL을 기록하는 ' &lt;code&gt;add&lt;/code&gt; '단계 : 제거해야합니다.</target>
        </trans-unit>
        <trans-unit id="ba14dc44bc5523cd7563fc3f492c061f4fee5caf" translate="yes" xml:space="preserve">
          <source>(1) does &lt;code&gt;git submodule init&lt;/code&gt;, so updates &lt;code&gt;.git/config&lt;/code&gt;</source>
          <target state="translated">(1) &lt;code&gt;git submodule init&lt;/code&gt; 을 수행하므로 &lt;code&gt;.git/config&lt;/code&gt; 를 업데이트하십시오.</target>
        </trans-unit>
        <trans-unit id="1def3c48d21d75360ae1012a64badda431d5c9f8" translate="yes" xml:space="preserve">
          <source>(1) updates &lt;code&gt;.git/config&lt;/code&gt;</source>
          <target state="translated">(1) &lt;code&gt;.git/config&lt;/code&gt; 업데이트</target>
        </trans-unit>
        <trans-unit id="2bfa5d8a2c4831b5555fbe1d921bfe0b0daa6946" translate="yes" xml:space="preserve">
          <source>(2) does &lt;code&gt;git submodule update&lt;/code&gt;, so, nonrecursively checks out the module</source>
          <target state="translated">(2) &lt;code&gt;git submodule update&lt;/code&gt; 이므로 비재 귀적으로 모듈을 체크 아웃합니다.</target>
        </trans-unit>
        <trans-unit id="87430307f79e6849310bc162e840241234657bae" translate="yes" xml:space="preserve">
          <source>(2) removes the files of the module</source>
          <target state="translated">(2) 모듈의 파일을 제거합니다</target>
        </trans-unit>
        <trans-unit id="5b7ac361af4e1fa2234d4108d3c13c3178644919" translate="yes" xml:space="preserve">
          <source>(3) checks out the submodules of the submodule recursively</source>
          <target state="translated">(3) 서브 모듈의 서브 모듈을 재귀 적으로 체크 아웃</target>
        </trans-unit>
        <trans-unit id="e448bb7d60c08bf380e6fbcfd10962aa317f505b" translate="yes" xml:space="preserve">
          <source>(3) thereby recursively removes the submodules of the submodule</source>
          <target state="translated">(3) 따라서 서브 모듈의 서브 모듈을 재귀 적으로 제거한다</target>
        </trans-unit>
        <trans-unit id="bd69d69fcfe49811745d93e0b6615040b2390e32" translate="yes" xml:space="preserve">
          <source>(4) updates &lt;code&gt;.gitmodules&lt;/code&gt;</source>
          <target state="translated">(4) &lt;code&gt;.gitmodules&lt;/code&gt; 업데이트</target>
        </trans-unit>
        <trans-unit id="58191c64dc8bbe69521049950c192a0d5bdbf1b5" translate="yes" xml:space="preserve">
          <source>--Update (07/05/2017)--</source>
          <target state="translated">-업데이트 (07/05/2017)-</target>
        </trans-unit>
        <trans-unit id="7a417a4483cc8de89c115f7f25e2cef55458ef45" translate="yes" xml:space="preserve">
          <source>1.) Delete the relevant section from the .gitmodules file. You can use below command:</source>
          <target state="translated">1.) .gitmodules 파일에서 관련 섹션을 삭제하십시오. 아래 명령을 사용할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="3d6c68cdaff83acff1043cae63b2018b1a52345c" translate="yes" xml:space="preserve">
          <source>2.) Stage the &lt;code&gt;.gitmodules&lt;/code&gt; changes</source>
          <target state="translated">2.) &lt;code&gt;.gitmodules&lt;/code&gt; 변경 사항 준비</target>
        </trans-unit>
        <trans-unit id="d50d54b4b2084be963c6b5c7d014d39b559d9a71" translate="yes" xml:space="preserve">
          <source>3.) Delete the relevant section from &lt;code&gt;.git/config&lt;/code&gt;. You can use below command:</source>
          <target state="translated">3.) &lt;code&gt;.git/config&lt;/code&gt; 에서 관련 섹션을 삭제하십시오. 아래 명령을 사용할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="c7277a2c26f6c06aa691b4ee280630cf46308f95" translate="yes" xml:space="preserve">
          <source>4.) Remove the gitlink (no trailing slash):</source>
          <target state="translated">4.) gitlink를 제거하십시오 (후행 슬래시 없음).</target>
        </trans-unit>
        <trans-unit id="6926a4354a0cd992e6eb7e030d616319df849d60" translate="yes" xml:space="preserve">
          <source>5.) Cleanup the &lt;code&gt;.git/modules&lt;/code&gt;:</source>
          <target state="translated">5.) &lt;code&gt;.git/modules&lt;/code&gt; 를 정리하십시오 :</target>
        </trans-unit>
        <trans-unit id="31b5db34f8e0cc9ff4eb92359a3f2275053ad125" translate="yes" xml:space="preserve">
          <source>6.) Commit:</source>
          <target state="translated">6.) 커밋 :</target>
        </trans-unit>
        <trans-unit id="17fbaa47e0f16f4a560962bdb629bc835837f27c" translate="yes" xml:space="preserve">
          <source>7.) Delete the now untracked submodule files</source>
          <target state="translated">7.) 이제 추적되지 않은 하위 모듈 파일을 삭제하십시오.</target>
        </trans-unit>
        <trans-unit id="d445583f729dd42045a188617be6fbd6bb1316d3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://en.wiktionary.org/wiki/FWIW&quot;&gt;FWIW&lt;/a&gt;, I also removed the &lt;code&gt;.git&lt;/code&gt; folder before doing the &lt;code&gt;git add&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://en.wiktionary.org/wiki/FWIW&quot;&gt;FWIW&lt;/a&gt; , &lt;code&gt;git add&lt;/code&gt; 를 수행하기 전에 &lt;code&gt;.git&lt;/code&gt; 폴더도 제거했습니다.</target>
        </trans-unit>
        <trans-unit id="905ecf03ef6bfc25f887e5d7e45974d4e3967f8a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;$submodule&quot;&lt;/code&gt; is just to emphasize where to put the name, and that you have to be careful with spaces and the like</source>
          <target state="translated">&lt;code&gt;&quot;$submodule&quot;&lt;/code&gt; 은 이름을 넣을 위치를 강조하기위한 것이며 공백 등에주의해야합니다.</target>
        </trans-unit>
        <trans-unit id="2733c62b60e8bd5dd536c8ef3689b5af08022833" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.gitmodules&lt;/code&gt; then looks like</source>
          <target state="translated">&lt;code&gt;.gitmodules&lt;/code&gt; 는 다음과 같습니다</target>
        </trans-unit>
        <trans-unit id="2343005b3df511792c4afb1585be1c47863c9e77" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git rm --cached path_to_submodule&lt;/code&gt; (no trailing slash)</source>
          <target state="translated">&lt;code&gt;git rm --cached path_to_submodule&lt;/code&gt; (후행 슬래시 없음)</target>
        </trans-unit>
        <trans-unit id="fa85b914c450e6a5b0d93c0557415248bf31dc21" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git rm --cached path_to_submodule&lt;/code&gt; (no trailing slash).</source>
          <target state="translated">&lt;code&gt;git rm --cached path_to_submodule&lt;/code&gt; (후행 슬래시 없음).</target>
        </trans-unit>
        <trans-unit id="97b1d2b8f55b09b5693d68a244020ec30599996d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git rm&lt;/code&gt;: See &lt;a href=&quot;https://github.com/git/git/commit/95c16418f0375e2fc325f32c3d7578fba9cfd7ef&quot;&gt;commit 95c16418&lt;/a&gt;:</source>
          <target state="translated">&lt;code&gt;git rm&lt;/code&gt; : &lt;a href=&quot;https://github.com/git/git/commit/95c16418f0375e2fc325f32c3d7578fba9cfd7ef&quot;&gt;커밋 95c16418&lt;/a&gt; 참조 :</target>
        </trans-unit>
        <trans-unit id="33816e486b1c4f37297aff7ca4f58d0b84c3544d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git submodule deinit&lt;/code&gt;: It stems from &lt;a href=&quot;http://git.661346.n2.nabble.com/PATCH-v3-submodule-add-deinit-command-td7576946.html&quot;&gt;this patch&lt;/a&gt;:</source>
          <target state="translated">&lt;code&gt;git submodule deinit&lt;/code&gt; : &lt;a href=&quot;http://git.661346.n2.nabble.com/PATCH-v3-submodule-add-deinit-command-td7576946.html&quot;&gt;이 패치&lt;/a&gt; 에서 파생 됩니다 .</target>
        </trans-unit>
        <trans-unit id="56c73fccdad0005e7be1ce912f0d4cb4d049d8d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ls -1p .git/modules/&lt;/code&gt; gives</source>
          <target state="translated">&lt;code&gt;ls -1p .git/modules/&lt;/code&gt; 제공</target>
        </trans-unit>
        <trans-unit id="4f86b6191be8658ecb05ac980276737fa12f267e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rm -rf&lt;/code&gt;: This is mentioned in &lt;a href=&quot;https://stackoverflow.com/users/2753241/daniel-schroeder&quot;&gt;Daniel Schroeder&lt;/a&gt;'s &lt;a href=&quot;https://stackoverflow.com/a/26505847/6309&quot;&gt;answer&lt;/a&gt;, and summarized by &lt;a href=&quot;https://stackoverflow.com/users/246776/eonil&quot;&gt;Eonil&lt;/a&gt; in &lt;a href=&quot;https://stackoverflow.com/questions/1260748/how-do-i-remove-a-git-submodule/16162000?noredirect=1#comment41729982_16162000&quot;&gt;the comments&lt;/a&gt;:</source>
          <target state="translated">&lt;code&gt;rm -rf&lt;/code&gt; : &lt;a href=&quot;https://stackoverflow.com/users/2753241/daniel-schroeder&quot;&gt;Daniel Schroeder&lt;/a&gt; 의 &lt;a href=&quot;https://stackoverflow.com/a/26505847/6309&quot;&gt;답변&lt;/a&gt; 에서 언급되었으며 &lt;a href=&quot;https://stackoverflow.com/users/246776/eonil&quot;&gt;Eonil&lt;/a&gt; 이 다음과 같이 &lt;a href=&quot;https://stackoverflow.com/questions/1260748/how-do-i-remove-a-git-submodule/16162000?noredirect=1#comment41729982_16162000&quot;&gt;주석&lt;/a&gt; 에 요약했습니다.</target>
        </trans-unit>
        <trans-unit id="86744ef5bc68f6c9217ef19e3202a295ca39d1cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;workhorse:~/path/to/worktree$ git merge --ff-only FETCH_HEAD&lt;/code&gt;.  If this does not work, use &lt;code&gt;git reset --soft FETCH_HEAD&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;workhorse:~/path/to/worktree$ git merge --ff-only FETCH_HEAD&lt;/code&gt; 입니다. 이것이 작동하지 않으면 &lt;code&gt;git reset --soft FETCH_HEAD&lt;/code&gt; 를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="333a0434bdebb9dc141381dac1154fa4cc4da677" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;workhorse:~/path/to/worktree$ git status --porcelain&lt;/code&gt;&lt;strong&gt;must not&lt;/strong&gt; output anything!  If it does, cleanup things first!</source>
          <target state="translated">&lt;code&gt;workhorse:~/path/to/worktree$ git status --porcelain&lt;/code&gt; &lt;strong&gt;은&lt;/strong&gt; 아무것도 출력 &lt;strong&gt;하지&lt;/strong&gt; 않아야 &lt;strong&gt;합니다&lt;/strong&gt; ! 그렇다면 먼저 정리하십시오!</target>
        </trans-unit>
        <trans-unit id="fa376d13f407fd16366f7120c7aaf255adb47552" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Please note:&lt;/em&gt;&lt;code&gt;$submodulepath&lt;/code&gt; doesn't contain leading or trailing slashes.</source>
          <target state="translated">&lt;em&gt;참고 :&lt;/em&gt; &lt;code&gt;$submodulepath&lt;/code&gt; 에는 선행 또는 후행 슬래시가 포함되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="aaef89dbbebca68bd2777431d3b44acd06d21585" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Background&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Background&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="560172c61c1dbb6f80b4e7fdab37acc8aea8ba55" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;In theory&lt;/strong&gt;, &lt;code&gt;git rm&lt;/code&gt; in &lt;em&gt;step 1&lt;/em&gt; should take care of it. Hopefully, the second part of OP question can be answered positively one day (that this can be done in one command).</source>
          <target state="translated">&lt;strong&gt;이론적으로&lt;/strong&gt; &lt;em&gt;1 단계의&lt;/em&gt; &lt;code&gt;git rm&lt;/code&gt; 이 처리해야합니다. OP 질문의 두 번째 부분은 언젠가 긍정적으로 대답 할 수 있기를 바랍니다 (이것은 하나의 명령으로 수행 될 수 있음).</target>
        </trans-unit>
        <trans-unit id="3f3b24aeaaa0bd39c01d2e5c5520fcffe3389465" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Never touch the insides of the &lt;code&gt;.git&lt;/code&gt; directory yourself!&lt;/strong&gt;  Editing inside &lt;code&gt;.git&lt;/code&gt; enters the dark side.  Stay away at all cost!</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;.git&lt;/code&gt; 디렉토리 내부를 직접 만지지 마십시오!&lt;/strong&gt; &lt;code&gt;.git&lt;/code&gt; 내부를 편집하면 어두운면으로 들어갑니다. 모든 비용을 멀리하십시오!</target>
        </trans-unit>
        <trans-unit id="f4edeb813ceace49f9f305b324528b67449b2b03" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also&lt;/strong&gt;: &lt;a href=&quot;https://stackoverflow.com/a/7646931/5614968&quot;&gt;alternative steps below&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/a/7646931/5614968&quot;&gt;아래의 대체 단계&lt;/a&gt; &lt;strong&gt;도 참조하십시오&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="5de5593ad47f9242fa4149d9113f83b1e00a5d77" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Simple steps&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;간단한 단계&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e4b56a9672367d8f4ac4843beceba6b73aacffb1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To completely remove a submodule, additionally manually delete &lt;code&gt;$GIT_DIR/modules/&amp;lt;name&amp;gt;/&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;하위 모듈을 완전히 제거하려면 &lt;code&gt;$GIT_DIR/modules/&amp;lt;name&amp;gt;/&lt;/code&gt; 수동으로 삭제하십시오&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="8f1b14f0b0c084f7ab89a5ad01392fdab3452174" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To remove a submodule you need to:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;서브 모듈을 제거하려면 다음이 필요합니다.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a1222bda332630854cdae80006e1fe6ce32dad9f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To summarize, this is what you should do :&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;요약하면 다음과 같습니다.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="02d418269e8389c6167327b90ad8e42318134f27" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;deinit&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;deinit&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="127322f3facbebe1c97e1d50f00d2eb7ef8eb670" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;(Merged by &lt;a href=&quot;https://github.com/gitster&quot;&gt;Junio C Hamano -- &lt;code&gt;gitster&lt;/code&gt; --&lt;/a&gt; in &lt;a href=&quot;https://github.com/git/git/commit/ead8dbe2e14ee9a2a18ccd0ad7bca806e1be0d54&quot;&gt;commit ead8dbe&lt;/a&gt;, 13 Feb 2018)&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;( &lt;a href=&quot;https://github.com/gitster&quot;&gt;Junio ​​C &lt;code&gt;gitster&lt;/code&gt; &lt;/a&gt; 의해 병합 됨 -gitster - &lt;a href=&quot;https://github.com/git/git/commit/ead8dbe2e14ee9a2a18ccd0ad7bca806e1be0d54&quot;&gt;commit ead8dbe&lt;/a&gt; , 2018 년 2 월 13 일)&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="e989f340019df7efe0e1d18d51185107965d21dc" translate="yes" xml:space="preserve">
          <source>A further reason is shown above.  Look at the &lt;code&gt;ls&lt;/code&gt;.  What do you see there?</source>
          <target state="translated">다른 이유는 위에 나와 있습니다. &lt;code&gt;ls&lt;/code&gt; 를보십시오 . 거기에서 무엇을 보십니까?</target>
        </trans-unit>
        <trans-unit id="f1acf21180f55e5ce393b96bb991be68f1799a0b" translate="yes" xml:space="preserve">
          <source>A submodule can be deleted by running &lt;code&gt;git rm &amp;lt;submodule path&amp;gt; &amp;amp;&amp;amp; git commit&lt;/code&gt;. This can be undone using &lt;code&gt;git revert&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;git rm &amp;lt;submodule path&amp;gt; &amp;amp;&amp;amp; git commit&lt;/code&gt; 을 실행하여 서브 모듈을 삭제할 수 있습니다. &lt;code&gt;git revert&lt;/code&gt; 사용하여 취소 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a19083aae8c4f24f25eb2b5fe29e28e8e67633bd" translate="yes" xml:space="preserve">
          <source>A submodule cloned using git 1.7.8 or newer will leave at most four traces of itself in your local repo. The process for removing those four traces is given by the three commands below:</source>
          <target state="translated">git 1.7.8 이상을 사용하여 복제 된 하위 모듈은 로컬 저장소에 최대 네 개의 흔적을 남깁니다. 이 네 가지 트레이스를 제거하는 프로세스는 아래 세 가지 명령으로 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="20daf22b77b7ac0c68775a88bf34854b508544cd" translate="yes" xml:space="preserve">
          <source>Additional 2 more steps mentioned below are needed to clean submodule completely in local cloned copy.</source>
          <target state="translated">로컬 복제 사본에서 서브 모듈을 완전히 정리하려면 아래에 언급 된 추가 2 단계가 더 필요합니다.</target>
        </trans-unit>
        <trans-unit id="caa4bb0d75166dea06c08fa522d2d965c057300a" translate="yes" xml:space="preserve">
          <source>After experimenting with all the different answers on this site, I ended up with this solution:</source>
          <target state="translated">이 사이트에서 다른 모든 답변을 실험 한 후이 솔루션을 사용했습니다.</target>
        </trans-unit>
        <trans-unit id="45e899784b28fb9d3aa33853ddd0da06eeab7ee4" translate="yes" xml:space="preserve">
          <source>Also have a look at &lt;a href=&quot;https://stackoverflow.com/a/5387510/319266&quot;&gt;an answer to &lt;em&gt;Can I unpopulate a Git submodule?&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">또한 &lt;a href=&quot;https://stackoverflow.com/a/5387510/319266&quot;&gt;&lt;em&gt;Git 하위 모듈을 채울 수 있습니까?&lt;/em&gt;&lt;/a&gt; 에 대한 답변도 살펴보십시오 &lt;em&gt;.&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="ef314e5782dfa75dcdd61039070894834b22f6d1" translate="yes" xml:space="preserve">
          <source>And from the philosophical view, wiping history is always wrong!
  &lt;a href=&quot;https://en.wikipedia.org/wiki/Quantum_eraser_experiment&quot;&gt;Except for quantum mechanics&lt;/a&gt;, as usual, but this is something completely different.</source>
          <target state="translated">그리고 철학적 인 관점에서, 역사를 닦는 것은 항상 잘못입니다! 일반적으로 &lt;a href=&quot;https://en.wikipedia.org/wiki/Quantum_eraser_experiment&quot;&gt;양자 역학을 제외하고&lt;/a&gt; 는 완전히 다른 것입니다.</target>
        </trans-unit>
        <trans-unit id="cc8b18a25873b09f8f3ee5c3e3b42e01f7b9cc25" translate="yes" xml:space="preserve">
          <source>And yes, you can blame &lt;code&gt;git&lt;/code&gt; for this, as many handy things were missing in &lt;code&gt;git&lt;/code&gt; in the past.  Like a proper way to remove submodules again.</source>
          <target state="translated">그리고 예, 과거에 &lt;code&gt;git&lt;/code&gt; 에서 많은 편리한 것들이 빠져 있었기 때문에 &lt;code&gt;git&lt;/code&gt; 을 비난 할 수 있습니다. 하위 모듈을 다시 제거하는 적절한 방법과 같습니다.</target>
        </trans-unit>
        <trans-unit id="5f26a89694b84641815648077efb61627fedc522" translate="yes" xml:space="preserve">
          <source>And you do not lose history.  In case you forgot to push the very latest version of the old submodule, you can enter the local copy and do so later on.  Note that it is quite common that somebody forgets to push some submodules (because this is a PITA for newcomers, until they became accustomed to &lt;code&gt;git&lt;/code&gt;).</source>
          <target state="translated">그리고 당신은 역사를 잃지 않습니다. 최신 하위 모듈의 최신 버전을 푸시하는 것을 잊어 버린 경우 로컬 사본을 입력하고 나중에 그렇게 할 수 있습니다. 누군가가 일부 서브 모듈을 푸시하는 것을 잊어 버리는 것이 일반적입니다 (이것은 초보자가 &lt;code&gt;git&lt;/code&gt; 에 익숙해 질 때까지 PITA이기 때문에).</target>
        </trans-unit>
        <trans-unit id="fbe9849172bead15ca97554d7588bd92c11f98ef" translate="yes" xml:space="preserve">
          <source>As @Mark Cheverton's answer correctly pointed out, if the second line isn't used, even if you removed the submodule for now, the remnant .git/modules/the_submodule folder will prevent the same submodule from being added back or replaced in the future. Also, as @VonC mentioned, &lt;code&gt;git rm&lt;/code&gt; will do most of the job on a submodule.</source>
          <target state="translated">@ Mark Cheverton의 대답이 올바르게 지적했듯이 두 번째 줄을 사용하지 않으면 지금 하위 모듈을 제거하더라도 나머지 .git / modules / the_submodule 폴더는 동일한 하위 모듈이 나중에 다시 추가되거나 교체되지 못하게합니다 . 또한 @VonC가 언급했듯이 &lt;code&gt;git rm&lt;/code&gt; 은 서브 모듈에서 대부분의 작업을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="8a56ce8c54478dc506c0263c4ee63a89060e12db" translate="yes" xml:space="preserve">
          <source>As pointed out correctly in the comments and &lt;a href=&quot;https://stackoverflow.com/a/44863971/683218&quot;&gt;other answers&lt;/a&gt;, the two commands (although functionally sufficient to remove a submodule), do leave a trace in the &lt;code&gt;[submodule &quot;the_submodule&quot;]&lt;/code&gt; section of &lt;code&gt;.git/config&lt;/code&gt; (as of July 2017), which can be removed using a third command:</source>
          <target state="translated">주석과 &lt;a href=&quot;https://stackoverflow.com/a/44863971/683218&quot;&gt;다른 답변&lt;/a&gt; 에서 올바르게 지적했듯이 두 명령 (기능적으로 서브 모듈을 제거하기에 충분하지만)은 &lt;code&gt;.git/config&lt;/code&gt; (2017 년 7 월 현재)의 &lt;code&gt;[submodule &quot;the_submodule&quot;]&lt;/code&gt; 섹션에 추적을 남깁니다. 세 번째 명령을 사용하여 제거 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c44d79cf1fbed8080ef33f23ace585cb888ec5a0" translate="yes" xml:space="preserve">
          <source>But as of July 2017, &lt;em&gt;step 2&lt;/em&gt; is necessary to remove data in &lt;code&gt;.git/modules/&lt;/code&gt; for otherwise, you can't e.g. add the submodule back in the future.</source>
          <target state="translated">그러나 2017 년 7 월 현재 &lt;code&gt;.git/modules/&lt;/code&gt; 에서 데이터를 제거하려면 &lt;em&gt;2 단계&lt;/em&gt; 가 필요합니다. 그렇지 않으면 나중에 하위 모듈을 다시 추가 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="e0928c3d1bff80d43c5ce3a0d3cbbb445490d82d" translate="yes" xml:space="preserve">
          <source>But currently there is no easy way they can tell git they do not care about a submodule anymore and wants to get rid of the local work tree (unless the user knows a lot about submodule internals and removes the &quot;&lt;code&gt;submodule.$name.url&lt;/code&gt;&quot; setting from &lt;code&gt;.git/config&lt;/code&gt; together with the work tree himself).</source>
          <target state="translated">그러나 현재 하위 모듈에 대해 신경 쓰지 않고 로컬 작업 트리를 제거하고 싶다고 사용자가 하위 모듈 내부에 대해 많이 알고 &quot; &lt;code&gt;submodule.$name.url&lt;/code&gt; &quot;을 제거하지 않는 한 git에게 말할 수있는 쉬운 방법은 없습니다 . &lt;code&gt;.git/config&lt;/code&gt; 에서 작업 트리 자체와 함께 설정).</target>
        </trans-unit>
        <trans-unit id="7babdd9be2896a6b41852600857f85d2a33822a0" translate="yes" xml:space="preserve">
          <source>But the submodule's section in &lt;code&gt;.gitmodules&lt;/code&gt; is left untouched, which is a leftover of the now removed submodule and might irritate users (as opposed to the setting in &lt;code&gt;.git/config&lt;/code&gt;, this must stay as a reminder that the user showed interest in this submodule so it will be repopulated later when an older commit is checked out).</source>
          <target state="translated">그러나 &lt;code&gt;.gitmodules&lt;/code&gt; 의 서브 모듈 섹션은 그대로 유지됩니다.이 모듈은 이제 제거 된 서브 모듈의 남은 부분이며 사용자를 자극 할 수 있습니다 ( &lt;code&gt;.git/config&lt;/code&gt; 설정과 달리 사용자 가이 서브 모듈에 관심을 보였음을 상기시켜줍니다. 따라서 이전 커밋이 체크 아웃되면 나중에 다시 채워집니다).</target>
        </trans-unit>
        <trans-unit id="654ba1186f9f8bc755889fb6230dc270ff5b17f3" translate="yes" xml:space="preserve">
          <source>By the way, is there a reason I can't simply do 
&lt;code&gt;git submodule rm whatever&lt;/code&gt; ?</source>
          <target state="translated">그건 그렇고, 단순히 &lt;code&gt;git submodule rm whatever&lt;/code&gt; 할 수없는 이유가 있습니까?</target>
        </trans-unit>
        <trans-unit id="e98297a1c3d718ff8261d27aba3f2b66d62691bb" translate="yes" xml:space="preserve">
          <source>Call: &lt;code&gt;git add .gitmodules&lt;/code&gt;</source>
          <target state="translated">전화 : &lt;code&gt;git add .gitmodules&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5901d1e3a4cbf3904a5d9fc6f6176b76be6cf36e" translate="yes" xml:space="preserve">
          <source>Call: &lt;code&gt;git rm &amp;lt;path to submodule&amp;gt;&lt;/code&gt;</source>
          <target state="translated">호출 : &lt;code&gt;git rm &amp;lt;path to submodule&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7baaa05bcd5f4f1c97b1fec74cb6a7a70bfdad6d" translate="yes" xml:space="preserve">
          <source>Call: &lt;code&gt;git submodule deinit &amp;lt;path to submodule&amp;gt;&lt;/code&gt;</source>
          <target state="translated">호출 : &lt;code&gt;git submodule deinit &amp;lt;path to submodule&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5f6a34c22b102e752b6415f7f23b75ba181aa11e" translate="yes" xml:space="preserve">
          <source>Cleaning manually up is good, because this way you perhaps detect some things you forgot about.</source>
          <target state="translated">이 방법으로 잊어 버린 일부를 감지 할 수 있으므로 수동으로 정리하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="410ae06d82adb99361cf58d1e36f069d269d3801" translate="yes" xml:space="preserve">
          <source>Cleanup things first</source>
          <target state="translated">먼저 정리하기</target>
        </trans-unit>
        <trans-unit id="1a1873ab51c74e8b39327ee42dade7a407e5a22d" translate="yes" xml:space="preserve">
          <source>Commit</source>
          <target state="translated">Commit</target>
        </trans-unit>
        <trans-unit id="9f949d035d28ec36be524e327a07d367ab7967b9" translate="yes" xml:space="preserve">
          <source>Commit and Push</source>
          <target state="translated">커밋과 푸시</target>
        </trans-unit>
        <trans-unit id="4aa83793e006e33aa824385f88ae1a9cd0ebe7c6" translate="yes" xml:space="preserve">
          <source>Commit it &lt;code&gt;git commit -m &quot;Removed submodule xxx&quot;&lt;/code&gt;</source>
          <target state="translated">커밋 &lt;code&gt;git commit -m &quot;Removed submodule xxx&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cf609498bbd9f449c87f10c8fb42468b310b2435" translate="yes" xml:space="preserve">
          <source>Commit it &lt;code&gt;git commit -m &quot;Removed submodule xxx&quot;&lt;/code&gt; and push.</source>
          <target state="translated">&lt;code&gt;git commit -m &quot;Removed submodule xxx&quot;&lt;/code&gt; 를 커밋 하고 푸시합니다.</target>
        </trans-unit>
        <trans-unit id="e179e8a2bc74ae797f87c8700661844fbbfa36a7" translate="yes" xml:space="preserve">
          <source>Commit the changes:</source>
          <target state="translated">변경 사항을 커밋하십시오.</target>
        </trans-unit>
        <trans-unit id="df62bf4beff627a092931fe581233752c41b4f32" translate="yes" xml:space="preserve">
          <source>Commit the superproject</source>
          <target state="translated">슈퍼 프로젝트 커밋</target>
        </trans-unit>
        <trans-unit id="d41a98cd75e2192cb8a8edadfa294e67c7350684" translate="yes" xml:space="preserve">
          <source>Complain when for a submodule given on the command line the url setting can't be found in &lt;code&gt;.git/config&lt;/code&gt;, but nonetheless don't fail.</source>
          <target state="translated">커맨드 라인에 주어진 서브 모듈에 대해 URL 설정을 &lt;code&gt;.git/config&lt;/code&gt; 에서 찾을 수 없지만 그럼에도 불구하고 실패하지는 마십시오.</target>
        </trans-unit>
        <trans-unit id="2ad47fcc2584e4323df21d5330c0c6a37ff5c902" translate="yes" xml:space="preserve">
          <source>Create bash script file in the &lt;code&gt;$HOME&lt;/code&gt; dir named i.e. &lt;code&gt;remove_submodule.sh&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;$HOME&lt;/code&gt; 디렉토리에 bash 스크립트 파일을 작성하십시오 (예 : &lt;code&gt;remove_submodule.sh&lt;/code&gt; ) .</target>
        </trans-unit>
        <trans-unit id="87f8da7866a67dbf2c107e2520b24b799c535746" translate="yes" xml:space="preserve">
          <source>Currently using &quot;&lt;code&gt;git rm&lt;/code&gt;&quot; on a submodule removes the submodule's work tree from that of the superproject and the gitlink from the index.</source>
          <target state="translated">현재 서브 모듈에서 &quot; &lt;code&gt;git rm&lt;/code&gt; &quot;을 사용하면 서브 프로젝트의 작업 트리가 수퍼 프로젝트의 작업 트리에서 제거되고 인덱스에서 gitlink가 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="257afc1db76dcf4ed31ec80af396bee086359a49" translate="yes" xml:space="preserve">
          <source>Delete the now untracked submodule files</source>
          <target state="translated">지금 추적되지 않은 서브 모듈 파일 삭제</target>
        </trans-unit>
        <trans-unit id="714c675ee2c0ed84cf83a604c45a55a7ef4720f4" translate="yes" xml:space="preserve">
          <source>Delete the now untracked submodule files:</source>
          <target state="translated">이제 추적되지 않은 서브 모듈 파일을 삭제하십시오.</target>
        </trans-unit>
        <trans-unit id="6a1e5a18768e5ee86609c2887a160c28a23f9af9" translate="yes" xml:space="preserve">
          <source>Delete the relevant line from the .gitmodules file:</source>
          <target state="translated">.gitmodules 파일에서 관련 행을 삭제하십시오.</target>
        </trans-unit>
        <trans-unit id="fbfcbc9b0c44d9483f1dcc147e847a0cb6588380" translate="yes" xml:space="preserve">
          <source>Delete the relevant section from .git/config</source>
          <target state="translated">.git / config에서 관련 섹션을 삭제하십시오.</target>
        </trans-unit>
        <trans-unit id="51a16c4540e80245374ed29ce8500a4673d30257" translate="yes" xml:space="preserve">
          <source>Delete the relevant section from &lt;code&gt;.git/config&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.git/config&lt;/code&gt; 에서 관련 섹션을 삭제하십시오.</target>
        </trans-unit>
        <trans-unit id="dfea2604ab2ac62ffda9e7aceae892ee4794dc80" translate="yes" xml:space="preserve">
          <source>Delete the relevant section from the &lt;code&gt;.gitmodules&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;.gitmodules&lt;/code&gt; 파일에서 관련 섹션을 삭제하십시오.</target>
        </trans-unit>
        <trans-unit id="29c3105e21ac6e88dacf4911f8ffbeec430aa89e" translate="yes" xml:space="preserve">
          <source>Delete unused files:</source>
          <target state="translated">사용하지 않는 파일을 삭제하십시오.</target>
        </trans-unit>
        <trans-unit id="62700a7a416a31504d7e646aee6bf8684aedf1f1" translate="yes" xml:space="preserve">
          <source>Do &lt;code&gt;rm -rf .git/modules/path_to_submodule&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;rm -rf .git/modules/path_to_submodule&lt;/code&gt; 을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="b32ef340ea4702fd5f41dbe4001671d76174ef71" translate="yes" xml:space="preserve">
          <source>Explanation</source>
          <target state="translated">Explanation</target>
        </trans-unit>
        <trans-unit id="f997879d5d21701a4d5f702a7ece2ea818b0d8e7" translate="yes" xml:space="preserve">
          <source>FYI you probably guessed it: &lt;a href=&quot;https://github.com/hilbix/&quot;&gt;hilbix&lt;/a&gt; is my GitHub account.</source>
          <target state="translated">참고로 아마 추측했을 것입니다 : &lt;a href=&quot;https://github.com/hilbix/&quot;&gt;hilbix&lt;/a&gt; 는 내 GitHub 계정입니다.</target>
        </trans-unit>
        <trans-unit id="78809aa187b9eddc5af4246fb332d13bee6ab0ff" translate="yes" xml:space="preserve">
          <source>Fail if the current work tree contains modifications unless forced.</source>
          <target state="translated">현재 작업 트리에 수정 사항이 없으면 수정하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="4c1a503f73f8e093aef972d62aecd04aa4fe3052" translate="yes" xml:space="preserve">
          <source>For old versions of git (circa ~1.8.5) use:</source>
          <target state="translated">이전 버전의 git (~ 1.8.5 경)의 경우 다음을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="dc74bf328d942c8a3d1b6a29d937e5fc3e7a9b51" translate="yes" xml:space="preserve">
          <source>For the benefit of the reader, this here tries to sum it up and give a step-by-step guide on how to do it if things do not work as expected.  Following is the &lt;strong&gt;tested and safe way&lt;/strong&gt; for &lt;code&gt;git&lt;/code&gt; version &lt;code&gt;2.17&lt;/code&gt; and above &lt;strong&gt;to get rid of a submodule&lt;/strong&gt;:</source>
          <target state="translated">독자의 이익을 위해 여기에 요약하여 문제가 예상대로 작동하지 않는 경우 어떻게 수행하는지 단계별로 안내합니다. 다음은 &lt;code&gt;git&lt;/code&gt; 버전 &lt;code&gt;2.17&lt;/code&gt; 이상 &lt;strong&gt;에서 서브 모듈을 제거&lt;/strong&gt; 하는 &lt;strong&gt;테스트되고 안전한 방법&lt;/strong&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="5fc8ccd64556db2c1ca7c48a472d9aef3748b47b" translate="yes" xml:space="preserve">
          <source>For this, most answers suggest using &lt;code&gt;git submodule deinit&lt;/code&gt;. I find it more explicit and less confusing to use &lt;code&gt;git config -f .git/config --remove-section&lt;/code&gt;. According to the &lt;a href=&quot;https://git-scm.com/docs/git-submodule&quot;&gt;git-submodule documentation&lt;/a&gt;, &lt;code&gt;git deinit&lt;/code&gt;:</source>
          <target state="translated">이를 위해 대부분의 답변은 &lt;code&gt;git submodule deinit&lt;/code&gt; 사용을 제안합니다. &lt;code&gt;git config -f .git/config --remove-section&lt;/code&gt; 을 사용하는 것이 더 명확하고 혼란스럽지 않습니다. &lt;a href=&quot;https://git-scm.com/docs/git-submodule&quot;&gt;git-submodule documentation&lt;/a&gt; 에 따르면 &lt;code&gt;git deinit&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="25d21c4ba0be8d54505fc4fc64a9c1a452c8b3ae" translate="yes" xml:space="preserve">
          <source>From &lt;a href=&quot;https://git-scm.com/docs/git-submodule#git-submodule-deinit&quot;&gt;git docs&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://git-scm.com/docs/git-submodule#git-submodule-deinit&quot;&gt;자식 문서에서&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="497761ef6cf11e80b06fa91d23a87e5980756bab" translate="yes" xml:space="preserve">
          <source>Help those users by providing a '&lt;strong&gt;&lt;code&gt;deinit&lt;/code&gt;&lt;/strong&gt;' command.</source>
          <target state="translated">' &lt;strong&gt; &lt;code&gt;deinit&lt;/code&gt; &lt;/strong&gt; '명령을 제공하여 해당 사용자를 지원하십시오.</target>
        </trans-unit>
        <trans-unit id="55d1b528fd36bb87622cfda7fa67d527253631cc" translate="yes" xml:space="preserve">
          <source>Here are the 4 steps that I found necessary or useful (important ones first):</source>
          <target state="translated">필요하거나 유용한 것으로 밝혀진 4 가지 단계는 다음과 같습니다 (중요한 단계부터).</target>
        </trans-unit>
        <trans-unit id="cf9c0a6a5ddd62dcd8d1f5fdd899db98657132c7" translate="yes" xml:space="preserve">
          <source>Here is what I did :</source>
          <target state="translated">여기 내가 한 일이 있습니다.</target>
        </trans-unit>
        <trans-unit id="765108d3c3a16b0ea93f264353cf3253ae6aad85" translate="yes" xml:space="preserve">
          <source>How do I remove a Git submodule?</source>
          <target state="translated">Git 서브 모듈을 어떻게 제거합니까?</target>
        </trans-unit>
        <trans-unit id="8f261ccf8b516deafc68ea6154e6f9fac50dc5ad" translate="yes" xml:space="preserve">
          <source>How do I remove a submodule</source>
          <target state="translated">서브 모듈을 제거하는 방법</target>
        </trans-unit>
        <trans-unit id="50c6462f090c77763c128a0c36efcefc6c304783" translate="yes" xml:space="preserve">
          <source>However if you removed the cached directory, both different checkouts will stumble upon each other, because you will not use the &lt;code&gt;--name&lt;/code&gt; options, right?  So each time you do the checkout you perhaps have to remove the &lt;code&gt;.git/modules/&amp;lt;module&amp;gt;/&lt;/code&gt; directory again and again.  This is extremely cumbersome and makes it hard to use something like &lt;code&gt;git bisect&lt;/code&gt;.</source>
          <target state="translated">그러나 캐시 된 디렉토리를 제거하면 &lt;code&gt;--name&lt;/code&gt; 옵션을 사용하지 않기 때문에 서로 다른 체크 아웃이 서로 우연히 발견됩니다. 따라서 체크 아웃 할 때마다 &lt;code&gt;.git/modules/&amp;lt;module&amp;gt;/&lt;/code&gt; 디렉토리를 반복해서 제거해야합니다. 이것은 매우 성가 &lt;code&gt;git bisect&lt;/code&gt; 와 같은 것을 사용하기 어렵게 만듭니다.</target>
        </trans-unit>
        <trans-unit id="53aab762c31e6f4ae6d674356840ca0ce7056c02" translate="yes" xml:space="preserve">
          <source>I found &lt;code&gt;deinit&lt;/code&gt; works good for me:</source>
          <target state="translated">&lt;code&gt;deinit&lt;/code&gt; 가 저에게 효과적이라는 것을 알았습니다.</target>
        </trans-unit>
        <trans-unit id="860bf7d1aa2ed8627981b87e00d3554e84998cec" translate="yes" xml:space="preserve">
          <source>I had to take John Douthat's steps one step further and &lt;code&gt;cd&lt;/code&gt; into the submodule's directory, and then remove the Git repository:</source>
          <target state="translated">John Douthat의 단계를 한 단계 더 발전시켜 하위 모듈의 디렉토리로 이동 한 다음 Git 저장소를 제거해야했습니다.</target>
        </trans-unit>
        <trans-unit id="015a7a4c095a9a2c77ccb5195c738f2b21bbae76" translate="yes" xml:space="preserve">
          <source>I just found the .submodule (forgot exact name) hidden file, it has a list... you can erase them individually that way. I just had one, so I deleted it. Simple, but it might mess up Git, since I don't know if anything's attached to the submodule. Seems ok so far, aside from libetpan's usual upgrade issue, but that's (hopefully) unrelated.</source>
          <target state="translated">방금 .submodule (정확한 이름을 잊어 버렸습니다) 숨겨진 파일을 찾았습니다. 목록이 있습니다 ... 그러면 개별적으로 삭제할 수 있습니다. 방금 하나 가지고 있었으므로 삭제했습니다. 간단하지만 하위 모듈에 무엇이 부착되어 있는지 알 수 없으므로 Git을 망칠 수 있습니다. libetpan의 일반적인 업그레이드 문제를 제외하고는 지금까지는 괜찮아 보이지만 관련이 없습니다.</target>
        </trans-unit>
        <trans-unit id="a6afd773ce6f263c31511a06f44b6de5f6167e18" translate="yes" xml:space="preserve">
          <source>I recently find out a git project which include many useful git related command: &lt;a href=&quot;https://github.com/visionmedia/git-extras&quot;&gt;https://github.com/visionmedia/git-extras&lt;/a&gt;</source>
          <target state="translated">나는 최근에 유용한 git 관련 명령을 포함하는 git 프로젝트를 발견했다 : &lt;a href=&quot;https://github.com/visionmedia/git-extras&quot;&gt;https://github.com/visionmedia/git-extras&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6387706717b8e1c3e0e13b7909685148dd6383e5" translate="yes" xml:space="preserve">
          <source>I think there is a very dangerous part in the documentation of &lt;code&gt;git submodule&lt;/code&gt;.
  It recommends to remove &lt;code&gt;$GIT_DIR/modules/&amp;lt;name&amp;gt;/&lt;/code&gt; yourself.
  &lt;strong&gt;In my understanding this is not only plain wrong, it is extremely dangerous and provokes major headaches in future!&lt;/strong&gt;  See below.</source>
          <target state="translated">&lt;code&gt;git submodule&lt;/code&gt; 문서에 매우 위험한 부분이 있다고 생각합니다. &lt;code&gt;$GIT_DIR/modules/&amp;lt;name&amp;gt;/&lt;/code&gt; 자신을 제거하는 것이 좋습니다. &lt;strong&gt;내 이해에서 이것은 명백한 잘못 일뿐 만 아니라 매우 위험하며 앞으로 큰 두통을 유발합니다!&lt;/strong&gt; 아래를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="89842fa02734c275d35ae3b8be04b64bb240e814" translate="yes" xml:space="preserve">
          <source>I've created a bash script to ease the removal process. It also checks whether there are changes in the repo left unsaved and asks for confirmation. 
It has been tested on &lt;code&gt;os x&lt;/code&gt; would be interesting to know if it works as is on common linux distros as well:</source>
          <target state="translated">제거 프로세스를 쉽게하기 위해 bash 스크립트를 만들었습니다. 또한 저장되지 않은 레포지토리에 변경 사항이 있는지 확인하고 확인을 요청합니다. &lt;code&gt;os x&lt;/code&gt; 에서 테스트되었으며 일반적인 Linux 배포판에서와 같이 작동하는지 확인하는 것이 흥미로울 것입니다.</target>
        </trans-unit>
        <trans-unit id="c69ba17ec241247896c43f8648b114e49f41ff06" translate="yes" xml:space="preserve">
          <source>If git complains about some leftovers, &lt;code&gt;git status&lt;/code&gt; and &lt;code&gt;git clean -ixfd&lt;/code&gt; is your friend</source>
          <target state="translated">git이 남은 음식에 대해 불평하면 git &lt;code&gt;git status&lt;/code&gt; 및 &lt;code&gt;git clean -ixfd&lt;/code&gt; 가 친구입니다.</target>
        </trans-unit>
        <trans-unit id="63ee2337454055e2c5a1df3a99c3ce46401a6507" translate="yes" xml:space="preserve">
          <source>If git complains about unsaved stuff, commit and push it somewhere safe.</source>
          <target state="translated">git이 저장되지 않은 것들에 대해 불평한다면, 안전한 곳으로 옮기고 밀어 넣으십시오.</target>
        </trans-unit>
        <trans-unit id="3f3ed29bdef5da858818084524bd6488f2ea957a" translate="yes" xml:space="preserve">
          <source>If on Windows ignore the first line and replace &lt;code&gt;&quot;$submodule&quot;&lt;/code&gt; with the Windows way of a properly specified path to the submodule.  (I am not Windows)</source>
          <target state="translated">Windows의 경우 첫 번째 행을 무시하고 &lt;code&gt;&quot;$submodule&quot;&lt;/code&gt; 을 서브 모듈의 경로가 올바르게 지정된 Windows 방식으로 바꾸십시오. (나는 Windows가 아니다)</target>
        </trans-unit>
        <trans-unit id="831eb64e8247de1446e4cb7a4cc379e459ac5988" translate="yes" xml:space="preserve">
          <source>If the submodule was &lt;em&gt;accidentally&lt;/em&gt; added because you added, committed and pushed a folder that was already a Git repository (contained &lt;code&gt;.git&lt;/code&gt;), you won&amp;rsquo;t have a &lt;code&gt;.gitmodules&lt;/code&gt; file to edit, or anything in &lt;code&gt;.git/config&lt;/code&gt;. &lt;a href=&quot;http://humansky.com/2011/12/accidentally-adding-a-git-submodule/&quot;&gt;In this case all you need&lt;/a&gt; is :</source>
          <target state="translated">이미 Git 리포지토리 ( &lt;code&gt;.git&lt;/code&gt; 포함) 인 폴더를 추가, 커밋 및 푸시하여 하위 모듈이 &lt;em&gt;실수로&lt;/em&gt; 추가 된 경우 편집 할 &lt;code&gt;.gitmodules&lt;/code&gt; 파일이나 &lt;code&gt;.git/config&lt;/code&gt; 파일이 없습니다. &lt;a href=&quot;http://humansky.com/2011/12/accidentally-adding-a-git-submodule/&quot;&gt;이 경우 필요한&lt;/a&gt; 것은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="15834ba1f4b1b4ac03270dfe95e309670b97a32b" translate="yes" xml:space="preserve">
          <source>If this does not work for you, see below.</source>
          <target state="translated">그래도 문제가 해결되지 않으면 아래를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="530c66395f376e61c9a49da5c6b39d22d6fa771c" translate="yes" xml:space="preserve">
          <source>If this fails</source>
          <target state="translated">이것이 실패하면</target>
        </trans-unit>
        <trans-unit id="25df07c5ef99d18de088a5274381d9f236746a74" translate="yes" xml:space="preserve">
          <source>If you forget that last step, and try to add what was a submodule as a regular directory, you would get error message like:</source>
          <target state="translated">마지막 단계를 잊어 버렸고 하위 모듈을 일반 디렉토리로 추가하려고하면 다음과 같은 오류 메시지가 나타납니다.</target>
        </trans-unit>
        <trans-unit id="2358adfd9cc20e715b8926c85ec13e8289fae8a5" translate="yes" xml:space="preserve">
          <source>If you have just added the submodule, and for example, you simply added the wrong submodule or you added it to the wrong place, simply do &lt;code&gt;git stash&lt;/code&gt; then delete the folder. This is assuming that adding the submodule is the only thing you did in the recent repo.</source>
          <target state="translated">하위 모듈을 방금 추가 한 경우 (예를 들어, 잘못된 하위 모듈을 추가했거나 잘못된 위치에 추가 한 경우) &lt;code&gt;git stash&lt;/code&gt; 를 수행 한 다음 폴더를 삭제하십시오. 하위 모듈을 추가하는 것이 최근 리포지토리에서 수행 한 유일한 작업이라고 가정합니다.</target>
        </trans-unit>
        <trans-unit id="d2e51f4f83fc5dbf580e4b6e554dde8ca0e0e720" translate="yes" xml:space="preserve">
          <source>If you'll write on git's mailing list probably someone will do a shell script for you.</source>
          <target state="translated">git의 메일 링리스트에 글을 쓰면 누군가가 당신을 위해 쉘 스크립트를 할 것입니다.</target>
        </trans-unit>
        <trans-unit id="3483406dcae7d71a00f29eb55a64a55412e5b296" translate="yes" xml:space="preserve">
          <source>If your machine is too old there is no &lt;code&gt;submodule deinit&lt;/code&gt; in your &lt;code&gt;git&lt;/code&gt;.  If you do not want (or can) update your &lt;code&gt;git&lt;/code&gt;, then just use another machine with a newer &lt;code&gt;git&lt;/code&gt;!  &lt;code&gt;git&lt;/code&gt; is meant to be fully distributed, so you can use another &lt;code&gt;git&lt;/code&gt; to get the job done:</source>
          <target state="translated">머신이 너무 오래된 경우 &lt;code&gt;git&lt;/code&gt; 에 &lt;code&gt;submodule deinit&lt;/code&gt; 가 없습니다. &lt;code&gt;git&lt;/code&gt; 을 업데이트하지 않으려면 (또는 새로운 &lt;code&gt;git&lt;/code&gt; 과 함께 다른 머신을 사용하십시오!) &lt;code&gt;git&lt;/code&gt; 은 완전히 분산되어 있으므로 다른 &lt;code&gt;git&lt;/code&gt; 을 사용하여 작업을 완료 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e52bb58a973aad3c8d92637982bc99be4938b956" translate="yes" xml:space="preserve">
          <source>In addition to the recommendations, I also had to &lt;code&gt;rm -Rf .git/modules/path/to/submodule&lt;/code&gt; to be able to add a new submodule with the same name (in my case I was replacing a fork with the original)</source>
          <target state="translated">권장 사항 외에도 동일한 이름의 새 하위 모듈을 추가 할 수 있도록 &lt;code&gt;rm -Rf .git/modules/path/to/submodule&lt;/code&gt; 을 사용해야했습니다 (제 경우 포크를 원본으로 대체했습니다)</target>
        </trans-unit>
        <trans-unit id="7779d279428a771a1db5928faf3789b7b21461dc" translate="yes" xml:space="preserve">
          <source>In case you need to do it in &lt;strong&gt;one line command&lt;/strong&gt; with bash script as below:</source>
          <target state="translated">아래와 같이 bash 스크립트를 사용하여 &lt;strong&gt;한 줄 명령&lt;/strong&gt; 으로 수행 해야하는 경우 :</target>
        </trans-unit>
        <trans-unit id="ac8eed6985381ac4f5ec9d9169a82442f3ebdd9b" translate="yes" xml:space="preserve">
          <source>In latest git just 4 operation is needed to remove the git submodule.</source>
          <target state="translated">최신 git에서는 git 서브 모듈을 제거하기 위해 4 작업 만 필요합니다.</target>
        </trans-unit>
        <trans-unit id="a79274d6836343740dfbb485e2f71c2afdbfd0cd" translate="yes" xml:space="preserve">
          <source>Install it and type :</source>
          <target state="translated">그것을 설치하고 입력하십시오 :</target>
        </trans-unit>
        <trans-unit id="beb8e0516d42815bd918ce3bb6abe132187c49bc" translate="yes" xml:space="preserve">
          <source>It is a call to a C function.</source>
          <target state="translated">C 함수를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="b306748ea8f10ffc7822981d50e5d68932480da1" translate="yes" xml:space="preserve">
          <source>It is a good idea to do &lt;code&gt;git rebase HEAD&lt;/code&gt; first and &lt;code&gt;git commit&lt;/code&gt;
at the end, if you put this in a script.</source>
          <target state="translated">스크립트에 &lt;code&gt;git rebase HEAD&lt;/code&gt; 를 먼저 수행하고 끝에 &lt;code&gt;git commit&lt;/code&gt; 을 수행하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="74b86000d17877d210cbb561f5db624a7d0d2cd7" translate="yes" xml:space="preserve">
          <source>It's easy if you start to become accustomed to powerful &lt;code&gt;git&lt;/code&gt; features like this.</source>
          <target state="translated">이와 같은 강력한 &lt;code&gt;git&lt;/code&gt; 기능에 익숙해지기 시작하면 쉽습니다.</target>
        </trans-unit>
        <trans-unit id="c9bba89555d0112d1cb8f2952c0f07cfbc5b5ebf" translate="yes" xml:space="preserve">
          <source>Just a note. Since git 1.8.5.2, two commands will do:</source>
          <target state="translated">그냥 참고하십시오. git 1.8.5.2부터 두 가지 명령이 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="2fe657eb0e4abbfb951e77f1649241b3c367fb35" translate="yes" xml:space="preserve">
          <source>Just to clarify, &lt;code&gt;the_submodule&lt;/code&gt; is the relative path of the submodule inside the project. For example, it's &lt;code&gt;subdir/my_submodule&lt;/code&gt; if the submodule is inside a subdirectory &lt;code&gt;subdir&lt;/code&gt;.</source>
          <target state="translated">명확히하기 위해 &lt;code&gt;the_submodule&lt;/code&gt; 은 프로젝트 내부의 하위 모듈의 상대 경로입니다. 예를 들어, 서브 모듈이 서브 디렉토리 &lt;code&gt;subdir&lt;/code&gt; 내에 있으면 &lt;code&gt;subdir/my_submodule&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="6d8e4195bff1e4526d17a64f16f4449c001ff7c3" translate="yes" xml:space="preserve">
          <source>Last but not least, if you don't  &lt;code&gt;git commit&lt;/code&gt;, you will/may get an error when doing &lt;code&gt;git submodule summary&lt;/code&gt; (as of git 2.7):</source>
          <target state="translated">마지막으로, &lt;code&gt;git commit&lt;/code&gt; 을 사용하지 않으면 &lt;code&gt;git submodule summary&lt;/code&gt; 수행 할 때 오류가 발생할 수 있습니다 (git 2.7 기준).</target>
        </trans-unit>
        <trans-unit id="ea08f333ccafd808414fb3cfbebb5465d8af0771" translate="yes" xml:space="preserve">
          <source>Let &quot;&lt;code&gt;git rm&lt;/code&gt;&quot; help the user by not only removing the submodule from the work tree but by also removing the &quot;&lt;code&gt;submodule.&amp;lt;submodule name&amp;gt;&lt;/code&gt;&quot; section from the &lt;code&gt;.gitmodules&lt;/code&gt; file and stage both.</source>
          <target state="translated">&quot; &lt;code&gt;git rm&lt;/code&gt; &quot;은 작업 트리에서 서브 모듈을 제거 할뿐만 아니라 &lt;code&gt;.gitmodules&lt;/code&gt; 파일에서 &quot; &lt;code&gt;submodule.&amp;lt;submodule name&amp;gt;&lt;/code&gt; &quot;섹션을 제거하여 사용자를 돕고 둘 다 준비하십시오.</target>
        </trans-unit>
        <trans-unit id="9efaf3094c5ff7e5ecd0c6fb08b5f4842538a677" translate="yes" xml:space="preserve">
          <source>No options.  Nothing dangerous.  And do not even consider doing more!</source>
          <target state="translated">옵션이 없습니다. 위험한 것은 없습니다. 그리고 더 많은 것을 고려하지 마십시오!</target>
        </trans-unit>
        <trans-unit id="da7038b6159ab37164aeb7442907c881108aff7e" translate="yes" xml:space="preserve">
          <source>Note that</source>
          <target state="translated">참고</target>
        </trans-unit>
        <trans-unit id="71305b94bd982a19edb0a9d099d629b36b66081c" translate="yes" xml:space="preserve">
          <source>Note that if you cannot &lt;code&gt;ssh&lt;/code&gt; in, there are trainloads of ways to transport &lt;code&gt;git&lt;/code&gt; repositories.  You can copy your worktree on some USB stick (including the &lt;code&gt;.git&lt;/code&gt; directory), and clone from the stick.  Clone the copy, just to get things in a clean fashion again.  This might be a PITA, in case your submodules are not accessible from othermachine directly.  But there is a solution for this, too:</source>
          <target state="translated">&lt;code&gt;ssh&lt;/code&gt; in을 할 수 없다면 &lt;code&gt;git&lt;/code&gt; 저장소를 전송하는 방법이 많이 있습니다. 작업 트리를 일부 USB 스틱 ( &lt;code&gt;.git&lt;/code&gt; 디렉토리 포함)에 복사하고 스틱에서 복제 할 수 있습니다. 복사본을 복제하여 다시 깔끔하게 정리하십시오. 하위 시스템에 다른 시스템에서 직접 액세스 할 수없는 경우 PITA 일 수 있습니다. 그러나 이것에 대한 해결책도 있습니다.</target>
        </trans-unit>
        <trans-unit id="f73de20c626e01db20a21e29eb576ab8a7c5dbc6" translate="yes" xml:space="preserve">
          <source>Note: since Git 2.17 (Q2 2018), git submodule deinit is no longer a shell script.</source>
          <target state="translated">참고 : Git 2.17 (Q2 2018) 이후 git 서브 모듈 deinit는 더 이상 쉘 스크립트가 아닙니다.</target>
        </trans-unit>
        <trans-unit id="29ccc2aa6e79b7e8592eae231fb1715b934d0f3e" translate="yes" xml:space="preserve">
          <source>Noticed nobody posted manual erasing, so added</source>
          <target state="translated">아무도 수동 지우기를 게시하지 않았으므로 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="24331d380c4850094ac60dc4967aa72e501c89ca" translate="yes" xml:space="preserve">
          <source>Now cleanup things, until &lt;code&gt;git status&lt;/code&gt; is clean again.  You are able to do so, because you have had it clean before, thanks to the first step.</source>
          <target state="translated">이제 &lt;code&gt;git status&lt;/code&gt; 가 다시 깨끗해질 때까지 정리하십시오. 첫 단계 덕분에 이전에 깨끗해 졌기 때문에 그렇게 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4b455356f9aebbd6e08e4d490aecff866a4f38a8" translate="yes" xml:space="preserve">
          <source>Now do the submodule stuff</source>
          <target state="translated">이제 서브 모듈 작업을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="551fa99714c5e4eb749f5a69b500d469323b45b9" translate="yes" xml:space="preserve">
          <source>Perhaps there are more ways to fail I am not aware of (I am just some &lt;code&gt;git&lt;/code&gt; power-user.)</source>
          <target state="translated">아마도 내가 알지 못하는 더 많은 방법이 있습니다 (나는 단지 &lt;code&gt;git&lt;/code&gt; power-user 일뿐입니다).</target>
        </trans-unit>
        <trans-unit id="fb5875b7fb04736c05b7eaa5c63ab6e73168f6c6" translate="yes" xml:space="preserve">
          <source>Possible fixes follow.</source>
          <target state="translated">가능한 수정 사항은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="512a47cd62f589f1f1588966b448ad0fa8c1f9bd" translate="yes" xml:space="preserve">
          <source>Probably people want to remove the cached repository, because they are afraid to run into a problem later.  This is true, but running into that &quot;problem&quot; is the correct way to solve it!  Because the fix is easy, and done right you will be able to live happily ever after.  This avoids more cumbersome trouble than when you remove the data yourself.</source>
          <target state="translated">아마도 사람들은 나중에 문제가 발생하기를 두려워하기 때문에 캐시 된 저장소를 제거하려고합니다. 이것은 사실이지만 그 &quot;문제&quot;에 부딪 치는 것이 그것을 해결하는 올바른 방법입니다! 수정이 쉽고, 제대로 이루어지기 때문에 행복하게 살 수 있습니다. 이렇게하면 데이터를 직접 제거 할 때보 다 더 번거로운 문제를 피할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6450755e9b2094889e9a11aab2fd243d8dd57e03" translate="yes" xml:space="preserve">
          <source>Put that in your git config, and then you can do: &lt;code&gt;git rms path/to/submodule&lt;/code&gt;</source>
          <target state="translated">git config에 넣고 &lt;code&gt;git rms path/to/submodule&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f8325bd509f9d03a3fed169c6a3c996dda82f932" translate="yes" xml:space="preserve">
          <source>Remove config entries:</source>
          <target state="translated">구성 항목을 제거하십시오.</target>
        </trans-unit>
        <trans-unit id="c2e7934f6d851cf78cd268e754efa79a5f69d90e" translate="yes" xml:space="preserve">
          <source>Remove corresponding entry in  &lt;code&gt;.gitmodules&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;.gitmodules&lt;/code&gt; 에서 해당 항목을 제거하십시오.</target>
        </trans-unit>
        <trans-unit id="52edaaa65838b9618a0c45f5344063667c5304f4" translate="yes" xml:space="preserve">
          <source>Remove directory from index:</source>
          <target state="translated">색인에서 디렉토리를 제거하십시오.</target>
        </trans-unit>
        <trans-unit id="50152eefea72779f07e643f78685e467a7b57e56" translate="yes" xml:space="preserve">
          <source>Remove the corresponding entry in  &lt;code&gt;.gitmodules&lt;/code&gt; file. Entry might be like mentioned below</source>
          <target state="translated">&lt;code&gt;.gitmodules&lt;/code&gt; 파일에서 해당 항목을 제거하십시오. 아래에 언급 된 것과 같은 항목이있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="90cea0f669d7575f5dbf4d99f3d77288b6929621" translate="yes" xml:space="preserve">
          <source>Remove the corresponding entry in &lt;code&gt;.git/config&lt;/code&gt; file. Entry might be like mentioned below</source>
          <target state="translated">&lt;code&gt;.git/config&lt;/code&gt; 파일에서 해당 항목을 제거하십시오. 아래에 언급 된 것과 같은 항목이있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9bf85edce9928368050f04396df441a974e0df09" translate="yes" xml:space="preserve">
          <source>Remove the section from &lt;code&gt;.gitmodules&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;.gitmodules&lt;/code&gt; 에서 섹션을 제거하십시오.</target>
        </trans-unit>
        <trans-unit id="fea3115915a43e8381b5ea1504502fbaec6ae450" translate="yes" xml:space="preserve">
          <source>Remove the submodule directory &lt;code&gt;git rm --cached &amp;lt;path_to_submodule&amp;gt;&lt;/code&gt;</source>
          <target state="translated">서브 모듈 디렉토리를 제거하십시오. &lt;code&gt;git rm --cached &amp;lt;path_to_submodule&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2fe024baab888ced8538357fa9639436e266a39a" translate="yes" xml:space="preserve">
          <source>Remove the submodule directory &lt;code&gt;git rm --cached &amp;lt;path_to_submodule&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">서브 모듈 디렉토리 &lt;code&gt;git rm --cached &amp;lt;path_to_submodule&amp;gt;&lt;/code&gt; 을 제거하십시오.</target>
        </trans-unit>
        <trans-unit id="69c0d47518c8eba1d94b84e1b1c7fe35090d69e9" translate="yes" xml:space="preserve">
          <source>Remove the submodule files from the working tree and index:</source>
          <target state="translated">작업 트리 및 색인에서 서브 모듈 파일을 제거하십시오.</target>
        </trans-unit>
        <trans-unit id="e528120a26c9506a34107af57b5db40ff39a9cee" translate="yes" xml:space="preserve">
          <source>Remove the submodule's &lt;code&gt;.git&lt;/code&gt; directory:</source>
          <target state="translated">서브 모듈의 &lt;code&gt;.git&lt;/code&gt; 디렉토리를 제거하십시오 :</target>
        </trans-unit>
        <trans-unit id="4c539c37dcddedb6eaa766dd31e83115153d8021" translate="yes" xml:space="preserve">
          <source>Removing git submodule</source>
          <target state="translated">자식 서브 모듈 제거</target>
        </trans-unit>
        <trans-unit id="247f6e4943c76c92b5c6c8d51b7623da37673dc0" translate="yes" xml:space="preserve">
          <source>Run:</source>
          <target state="translated">Run:</target>
        </trans-unit>
        <trans-unit id="92c7ed21c91bb0dc58af31a7a7b3156b9c9355d2" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/git/git/commit/2e612731b55f1a83fb5b7f4ecb9391f0cba63cb2&quot;&gt;commit 2e61273&lt;/a&gt;, &lt;a href=&quot;https://github.com/git/git/commit/13424764db3273091d136bd470cf14852255c98c&quot;&gt;commit 1342476&lt;/a&gt; (14 Jan 2018) by &lt;a href=&quot;https://github.com/pratham-pc&quot;&gt;Prathamesh Chavan (&lt;code&gt;pratham-pc&lt;/code&gt;)&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/pratham-pc&quot;&gt;Prathamesh Chavan ( &lt;code&gt;pratham-pc&lt;/code&gt; )의&lt;/a&gt; &lt;a href=&quot;https://github.com/git/git/commit/2e612731b55f1a83fb5b7f4ecb9391f0cba63cb2&quot;&gt;commit 2e61273&lt;/a&gt; , &lt;a href=&quot;https://github.com/git/git/commit/13424764db3273091d136bd470cf14852255c98c&quot;&gt;commit 1342476&lt;/a&gt; (2018 년 1 월 14 일)을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="2eb27c67a5a0f682799c799740fd38e1fc56c1e2" translate="yes" xml:space="preserve">
          <source>See also : &lt;a href=&quot;https://git.wiki.kernel.org/index.php/GitSubmoduleTutorial#Removal&quot;&gt;Alternative guide lines&lt;/a&gt;</source>
          <target state="translated">참조 : &lt;a href=&quot;https://git.wiki.kernel.org/index.php/GitSubmoduleTutorial#Removal&quot;&gt;대체 가이드 라인&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f86a264719e3e3b19e7fda40b65ea0f4de2b04fc" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;path_to_submodule&lt;/code&gt; var (no trailing slash):</source>
          <target state="translated">&lt;code&gt;path_to_submodule&lt;/code&gt; var 설정 (후행 슬래시 없음) :</target>
        </trans-unit>
        <trans-unit id="ac5e420135368e6e8685950b68810f791c6d3a36" translate="yes" xml:space="preserve">
          <source>Set path_to_submodule var (no trailing slash):</source>
          <target state="translated">path_to_submodule var 설정 (후행 슬래시 없음) :</target>
        </trans-unit>
        <trans-unit id="c4c57eaf6511aa0b1778e9f337c36953c575794b" translate="yes" xml:space="preserve">
          <source>Since &lt;a href=&quot;https://github.com/git/git/blob/v1.8.3-rc0/Documentation/RelNotes/1.8.3.txt#L135-L137&quot;&gt;git1.8.3 (April 22d, 2013)&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://github.com/git/git/blob/v1.8.3-rc0/Documentation/RelNotes/1.8.3.txt#L135-L137&quot;&gt;git1.8.3&lt;/a&gt; 이후 (2013 년 4 월 22 일) :</target>
        </trans-unit>
        <trans-unit id="7aea01fb7e0a326873472417fd77f1cf9f6130f8" translate="yes" xml:space="preserve">
          <source>Since git1.8.5, the &lt;code&gt;git rm&lt;/code&gt; takes &lt;em&gt;also&lt;/em&gt; care of the:</source>
          <target state="translated">git1.8.5부터 &lt;code&gt;git rm&lt;/code&gt; 은 다음 &lt;em&gt;을&lt;/em&gt; 처리합니다.</target>
        </trans-unit>
        <trans-unit id="593dfbffe2738dac23aa7df5ae761789570f6443" translate="yes" xml:space="preserve">
          <source>So I understand complaints of people, saying &quot;Why doesn't do &lt;code&gt;git&lt;/code&gt; the obvious thing for me&quot;.  This is because &quot;obvious&quot; here depends from the point of view.  Reliability in each and every situation is far more important.  Hence what's obvious for you often is not the right thing in all possible technical situations.  Please remember that:  AFAICS &lt;code&gt;git&lt;/code&gt; follows the technical path, not the social one.  (Hence the clever name: git)</source>
          <target state="translated">그래서 나는 왜 사람들이 나를 위해 명백한 것을하지 않는지에 대한 사람들의 불만을 이해합니다. 여기에서 &quot;명확한&quot;관점에서 볼 수 있기 때문입니다. 모든 상황에서 안정성이 훨씬 더 중요합니다. 그러므로 당신에게 명백한 것은 모든 가능한 기술적 상황에서 올바른 것이 아닙니다. AFAICS &lt;code&gt;git&lt;/code&gt; 은 사회적 경로가 아닌 기술적 경로를 따릅니다. (따라서 영리한 이름 : git)</target>
        </trans-unit>
        <trans-unit id="32abb9915218927c05d7b7a046ed1e8d6ef4d76a" translate="yes" xml:space="preserve">
          <source>So if you once delete a submodule with this method and re-add them again, it will not be possible because repository already been corrupted.</source>
          <target state="translated">따라서이 방법으로 하위 모듈을 한 번 삭제 한 후 다시 추가하면 리포지토리가 이미 손상되었으므로 불가능합니다.</target>
        </trans-unit>
        <trans-unit id="9c7973d0b379489c167109c1ef5e5b26fe7165e5" translate="yes" xml:space="preserve">
          <source>So if you wish to remove the modules, but be able to restore it quickly,
then do just this:</source>
          <target state="translated">따라서 모듈을 제거하고 싶지만 빠르게 복원 할 수있게하려면 다음과 같이하십시오.</target>
        </trans-unit>
        <trans-unit id="c0f93fbdf8917be6789844051b680d64104e83ef" translate="yes" xml:space="preserve">
          <source>So not only most other answers fall into this dangerous trap, &lt;a href=&quot;https://github.com/tj/git-extras/issues/799&quot;&gt;even very popular &lt;code&gt;git&lt;/code&gt; extensions had this bug&lt;/a&gt; (&lt;a href=&quot;https://github.com/tj/git-extras/pull/801&quot;&gt;it's now fixed there&lt;/a&gt;)!  So better keep your hands of the &lt;code&gt;.git/&lt;/code&gt; directory if you do not exactly, what you are doing!</source>
          <target state="translated">따라서 대부분의 다른 답변은이 위험한 함정에 빠질뿐만 &lt;a href=&quot;https://github.com/tj/git-extras/issues/799&quot;&gt;아니라 매우 인기있는 &lt;code&gt;git&lt;/code&gt; 확장 프로그램 에도이 버그가 있습니다&lt;/a&gt; ( &lt;a href=&quot;https://github.com/tj/git-extras/pull/801&quot;&gt;이제 수정되었습니다&lt;/a&gt; )! 정확하게하고 있지 않으면 &lt;code&gt;.git/&lt;/code&gt; 디렉토리를 유지하는 것이 좋습니다!</target>
        </trans-unit>
        <trans-unit id="76e086d913d7417c384b06312a8fdea974faf301" translate="yes" xml:space="preserve">
          <source>So there is a very technical reason to keep this module directory as a placeholder.  People who recommend to remove something below &lt;code&gt;.git/modules/&lt;/code&gt; either do not know better or forget to tell you that this makes powerful features like &lt;code&gt;git bisect&lt;/code&gt; nearly impossible to use if this crosses such a submodule incompatibility.</source>
          <target state="translated">따라서이 모듈 디렉토리를 자리 표시 자로 유지해야하는 매우 기술적 이유가 있습니다. &lt;code&gt;.git/modules/&lt;/code&gt; 아래에서 무언가를 제거하도록 권장하는 사람들은 더 잘 알지 못하거나 &lt;code&gt;git bisect&lt;/code&gt; 와 같은 강력한 기능이 하위 모듈 비 호환성을 넘어 서면 사용하기가 거의 불가능하다는 것을 잊어 버립니다.</target>
        </trans-unit>
        <trans-unit id="3b9cd30d73c1a5f6674e86a9e0989be9398677fd" translate="yes" xml:space="preserve">
          <source>Source: &lt;code&gt;git help submodules&lt;/code&gt;</source>
          <target state="translated">출처 : &lt;code&gt;git help submodules&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="44a99fe5ccb53d1ad9da9430b7357dee83089a83" translate="yes" xml:space="preserve">
          <source>Stage changes &lt;code&gt;git add .gitmodules&lt;/code&gt;</source>
          <target state="translated">스테이지 변경 &lt;code&gt;git add .gitmodules&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a39381dcbab1341b838eeafda2a6d527a86141fc" translate="yes" xml:space="preserve">
          <source>Stage the &lt;code&gt;.gitmodules&lt;/code&gt; changes:</source>
          <target state="translated">&lt;code&gt;.gitmodules&lt;/code&gt; 변경 사항을 준비하십시오.</target>
        </trans-unit>
        <trans-unit id="adb9fa34e4e0a154badd833b66c859d7244d3f02" translate="yes" xml:space="preserve">
          <source>Step 3 removes the section for &lt;code&gt;the_submodule&lt;/code&gt; in the file &lt;code&gt;.git/config&lt;/code&gt;. This should be done for completeness. (The entry may cause problems for older git versions, but I don't have one to test).</source>
          <target state="translated">3 단계는 &lt;code&gt;.git/config&lt;/code&gt; 파일에서 &lt;code&gt;the_submodule&lt;/code&gt; 에 대한 섹션을 제거합니다. 이것은 완전성을 위해 수행되어야합니다. (이 항목은 이전 git 버전에서 문제를 일으킬 수 있지만 테스트 할 버전이 없습니다).</target>
        </trans-unit>
        <trans-unit id="12b71c3e0fe5f7c0b8d17cc03186e281412da4a8" translate="yes" xml:space="preserve">
          <source>Summary</source>
          <target state="translated">Summary</target>
        </trans-unit>
        <trans-unit id="d14518d1477563720b992fbf4dcefd5f409c4826" translate="yes" xml:space="preserve">
          <source>Tested with Debian Buster &lt;code&gt;2.20.1&lt;/code&gt; and Ubuntu 18.04 &lt;code&gt;2.17.1&lt;/code&gt;.</source>
          <target state="translated">데비안 버스터 &lt;code&gt;2.20.1&lt;/code&gt; 및 우분투 18.04 &lt;code&gt;2.17.1&lt;/code&gt; 테스트.</target>
        </trans-unit>
        <trans-unit id="1d704f866e17c2f392cd1986aece26173a4f8b8f" translate="yes" xml:space="preserve">
          <source>That will remove that directory stored in the index with a special mode &quot;160000&quot;, marking it as a submodule root directory.</source>
          <target state="translated">그러면 특수 모드 &quot;160000&quot;으로 인덱스에 저장된 해당 디렉토리가 서브 모듈 루트 디렉토리로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="24962f784414ddc6635805dc57d580cb79b2541f" translate="yes" xml:space="preserve">
          <source>That's it.</source>
          <target state="translated">그게 다야.</target>
        </trans-unit>
        <trans-unit id="95480d6c3828c85dd40b3f196be66d63de1eaa2b" translate="yes" xml:space="preserve">
          <source>Thats easy:</source>
          <target state="translated">간단합니다.</target>
        </trans-unit>
        <trans-unit id="7d422cddfa6dd0924d16d922b712206343cb158b" translate="yes" xml:space="preserve">
          <source>The 3-steps removal process would then be:</source>
          <target state="translated">3 단계 제거 프로세스는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6d715a96d41bcc4f42879f0e1e7e70118568f25a" translate="yes" xml:space="preserve">
          <source>The commands above may fail due to following:</source>
          <target state="translated">다음 명령으로 인해 위의 명령이 실패 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="14ff80c43826dca01a461df75fc16f07233bf97e" translate="yes" xml:space="preserve">
          <source>The deletion process also uses &lt;code&gt;git rm&lt;/code&gt; (since git1.8.5 October 2013).</source>
          <target state="translated">삭제 프로세스는 &lt;code&gt;git rm&lt;/code&gt; 을 사용합니다 ( git 1.8.5 10 월 2013 이후).</target>
        </trans-unit>
        <trans-unit id="0a8b7fae183dbf60b87929d7bf3aa1719bcc54ea" translate="yes" xml:space="preserve">
          <source>The deletion removes the superproject's tracking data, which are both the gitlink entry and the section in the &lt;code&gt;.gitmodules&lt;/code&gt; file.</source>
          <target state="translated">삭제하면 gitlink 항목과 &lt;code&gt;.gitmodules&lt;/code&gt; 파일의 섹션 인 수퍼 프로젝트의 추적 데이터가 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="87899e148899ca0ff17d91b13eb3e19d96011a3b" translate="yes" xml:space="preserve">
          <source>The last line outputs following error:</source>
          <target state="translated">마지막 줄은 다음과 같은 오류를 출력합니다.</target>
        </trans-unit>
        <trans-unit id="c48018dec73cb0d3452d7bb06b1423b199193668" translate="yes" xml:space="preserve">
          <source>The majority of answers to this question are outdated, incomplete, or unnecessarily complex.</source>
          <target state="translated">이 질문에 대한 대부분의 답변은 구식이거나 불완전하거나 불필요하게 복잡합니다.</target>
        </trans-unit>
        <trans-unit id="e00f28fbc3d55a4640f420ad9099d6639da494be" translate="yes" xml:space="preserve">
          <source>The submodule's working directory is removed from the file system, but the Git directory is kept around as it to make it possible to checkout past commits without requiring fetching from another repository.</source>
          <target state="translated">서브 모듈의 작업 디렉토리는 파일 시스템에서 제거되지만 Git 디렉토리는 다른 저장소에서 가져 오지 않고도 과거의 커밋을 체크 아웃 할 수 있도록 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="11a69552b50cf6d380d20092704cd1871fc3a143" translate="yes" xml:space="preserve">
          <source>Then I could commit the files as a part of the parent Git repository without the old reference to a submodule.</source>
          <target state="translated">그런 다음 하위 모듈에 대한 이전 참조없이 부모 Git 저장소의 일부로 파일을 커밋 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="87eaf9cb0dc9221b0705a3c64911ebda6b424319" translate="yes" xml:space="preserve">
          <source>Then things are done. The submodule directory will be removed from your repo and still exist in your filesystem. You can then commit the change like: &lt;code&gt;git commit -am &quot;Remove the submodule&quot;&lt;/code&gt;.</source>
          <target state="translated">그런 다음 일이 완료됩니다. 서브 모듈 디렉토리는 repo에서 제거되고 파일 시스템에 여전히 존재합니다. 그런 다음 &lt;code&gt;git commit -am &quot;Remove the submodule&quot;&lt;/code&gt; 와 같이 변경 사항을 커밋 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="93c968c4fdf875495af084a5662faf0bd3a0a0ea" translate="yes" xml:space="preserve">
          <source>There was no Porcelain way to say &quot;I no longer am interested in this submodule&quot;, once you express your interest in a submodule with &quot;&lt;code&gt;submodule init&lt;/code&gt;&quot;.</source>
          <target state="translated">&quot; &lt;code&gt;submodule init&lt;/code&gt; &quot;로 서브 모듈에 관심을 표명 한 후에 &quot;나는 더 이상이 서브 모듈에 관심이 없다&quot;고 말할 수있는 도자기 방법이 없었습니다.</target>
        </trans-unit>
        <trans-unit id="38e1218090a99f970bcf2410f99308d0aa90c9fd" translate="yes" xml:space="preserve">
          <source>These 5th and 6th steps does not creates any changes which needs commit.</source>
          <target state="translated">이 5 단계와 6 단계는 커밋이 필요한 변경 사항을 생성하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d9f83abcd0efc17820e9f7b16f98452c41d98faf" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;othermachine&lt;/code&gt; can be some VM, or some Ubuntu WSL under Windows, whatever.  Even a &lt;code&gt;chroot&lt;/code&gt; (but I assume that you are non-root, because if you are &lt;code&gt;root&lt;/code&gt; it should be more easy to update to the newer &lt;code&gt;git&lt;/code&gt;).</source>
          <target state="translated">이 다른 &lt;code&gt;othermachine&lt;/code&gt; 은 VM이거나 Windows의 Ubuntu WSL 일 수 있습니다. &lt;code&gt;chroot&lt;/code&gt; 조차도 (그러나 루트가 아닌 것으로 가정합니다. 루트 인 경우 최신 &lt;code&gt;git&lt;/code&gt; 으로 업데이트하기가 더 쉽기 때문에).</target>
        </trans-unit>
        <trans-unit id="e9ed6324492e445628826d291002a3c4b8bedd07" translate="yes" xml:space="preserve">
          <source>This &lt;strong&gt;removes the whole &lt;code&gt;submodule.&amp;lt;name&amp;gt;&lt;/code&gt; section from &lt;code&gt;.git/config&lt;/code&gt; either for the given
  submodule(s)&lt;/strong&gt; (or for all those which have been initialized if '&lt;code&gt;.&lt;/code&gt;' is given).</source>
          <target state="translated">이렇게 &lt;strong&gt;하면 주어진 하위 모듈&lt;/strong&gt; (또는 ' &lt;code&gt;.&lt;/code&gt; '이 제공된 경우 초기화 된 모든 &lt;strong&gt;하위 모듈)에 대해 &lt;code&gt;.git/config&lt;/code&gt; 에서 전체 &lt;code&gt;submodule.&amp;lt;name&amp;gt;&lt;/code&gt; 섹션&lt;/strong&gt; 이 &lt;strong&gt;제거&lt;/strong&gt; 됩니다.</target>
        </trans-unit>
        <trans-unit id="ed891ffd8ed07489de62b972759741015572a031" translate="yes" xml:space="preserve">
          <source>This cannot be fully symmetric, as keeping it strictly symmetric does not make much sense.  There simply is no need for more than two commands.  Also &quot;pulling in the data&quot; is implicit, because you need it, but removing the cached information is not done, because this is not needed at all and might wipe precious data.</source>
          <target state="translated">엄격하게 대칭을 유지하는 것은 의미가 없으므로 완전히 대칭이 될 수는 없습니다. 단순히 두 개 이상의 명령이 필요하지 않습니다. 또한 &quot;데이터 풀링 (pulling in the data)&quot;은 필요하기 때문에 암시 적이지만 캐시 된 정보를 제거하는 것은 수행되지 않습니다. 이는 전혀 필요하지 않으며 소중한 데이터를 지울 수 있기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="d5a8eb02dd70d8f0864431159797c06c330396d3" translate="yes" xml:space="preserve">
          <source>This is not only true for you.  It also is true for all others using your repository.</source>
          <target state="translated">이것은 당신에게만 해당되는 것은 아닙니다. 또한 저장소를 사용하는 다른 모든 사람들에게도 해당됩니다.</target>
        </trans-unit>
        <trans-unit id="43b0e09fc2033bb86af3cdf155067446979d13da" translate="yes" xml:space="preserve">
          <source>This is regardless of whether you do steps 2 or 3.</source>
          <target state="translated">2 단계 또는 3 단계를 수행하는지 여부에 관계없이 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="ff6cc9af1c994655cfb603e312bfe461cf4e4760" translate="yes" xml:space="preserve">
          <source>This leaves &lt;code&gt;.git/modules/&amp;lt;path-to-submodule&amp;gt;/&lt;/code&gt; unchanged.</source>
          <target state="translated">이것은 &lt;code&gt;.git/modules/&amp;lt;path-to-submodule&amp;gt;/&lt;/code&gt; 을 변경하지 않은 채로 둡니다.</target>
        </trans-unit>
        <trans-unit id="7c9f3428912942e6a0f63f1435a130706ac6e9b8" translate="yes" xml:space="preserve">
          <source>This leaves you with a clean checkout with no changes to commit.</source>
          <target state="translated">커밋 할 변경없이 깔끔한 체크 아웃이 가능합니다.</target>
        </trans-unit>
        <trans-unit id="bfd37047b1c782691d2a43f60e1962877cbc2d60" translate="yes" xml:space="preserve">
          <source>This restores the exact same state as before you added the submodule. You can right away add the submodule again, which was not possible with most of the answers here.</source>
          <target state="translated">서브 모듈을 추가하기 전과 동일한 상태로 복원됩니다. 서브 모듈을 즉시 다시 추가 할 수 있습니다. 대부분의 답변으로는 불가능했습니다.</target>
        </trans-unit>
        <trans-unit id="651663fb7c8232755ea68bccbbcc2cf4eaeae173" translate="yes" xml:space="preserve">
          <source>This takes care if the (de)initialization steps (&lt;code&gt;.git/config&lt;/code&gt; and &lt;code&gt;.git/modules/xxx&lt;/code&gt;)</source>
          <target state="translated">이것은 (de) 초기화 단계 ( &lt;code&gt;.git/config&lt;/code&gt; 및 &lt;code&gt;.git/modules/xxx&lt;/code&gt; )를 처리합니다.</target>
        </trans-unit>
        <trans-unit id="10fe421614bb42b3b26ac3c2e5073767e8c8a9ae" translate="yes" xml:space="preserve">
          <source>This truly is puzzling to newcomers, but basically is a good thing:  &lt;code&gt;git&lt;/code&gt; just does the obviously thing and does that right, and does not even try to do more.  &lt;code&gt;git&lt;/code&gt; is a tool, which must do a reliable job, instead of being just another &quot;Eierlegende Wollmilchsau&quot; (&quot;Eierlegende Wollmilchsau&quot; translates for me to &quot;some evil version of a Swiss army knife&quot;).</source>
          <target state="translated">이것은 진정으로 새로운 이민자에게 수수께끼이지만, 기본적으로 좋은 것입니다 : &lt;code&gt;git&lt;/code&gt; 은 분명히 분명한 일을하고 올바르게 수행하며 더 많은 일을 시도하지도 않습니다. &lt;code&gt;git&lt;/code&gt; 은 또 다른 &quot;Eierlegende Wollmilchsau&quot;( &quot;Eierlegende Wollmilchsau&quot;는 &quot;스위스 군용 칼의 일부 악의적 인 버전&quot;으로 해석 됨)가 아니라 신뢰할 수있는 작업을 수행해야하는 도구입니다.</target>
        </trans-unit>
        <trans-unit id="596b8118b43155b52e9b5314fcb917b51eea60a8" translate="yes" xml:space="preserve">
          <source>This was tested with:</source>
          <target state="translated">이것은 다음과 같이 테스트되었습니다.</target>
        </trans-unit>
        <trans-unit id="313acf286ea454b402082bbc2bb414491f9edfb6" translate="yes" xml:space="preserve">
          <source>This way &lt;strong&gt;in future you can switch branches/commit forward and backward and will never get into any trouble again&lt;/strong&gt;, due to &lt;code&gt;two/&lt;/code&gt; having two different (and possibly incompatible) upstream repositories.  And the best is:  You keep both cached locally, too.</source>
          <target state="translated">이 방법 &lt;strong&gt;으로 앞으로 분기 / 커밋을 앞뒤로 전환 할 수 있으며&lt;/strong&gt; 두 개의 서로 다른 (그리고 호환되지 않는) 업스트림 리포지토리가 있기 때문에 &lt;strong&gt;다시&lt;/strong&gt; 는 &lt;strong&gt;문제가 발생하지&lt;/strong&gt; 않습니다. 가장 좋은 방법은 다음과 같습니다. 둘 다 로컬에 캐시 된 상태로 유지합니다.</target>
        </trans-unit>
        <trans-unit id="b09cff1dd1db179343c9c021aaa8972ecf92a753" translate="yes" xml:space="preserve">
          <source>To remove a &lt;code&gt;git&lt;/code&gt; submodule below 4 steps are needed.</source>
          <target state="translated">&lt;code&gt;git&lt;/code&gt; 서브 모듈을 제거하려면 4 단계가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="4a4b4d7e790894904087f5595c7b221e46036c76" translate="yes" xml:space="preserve">
          <source>To remove a submodule added using:</source>
          <target state="translated">다음을 사용하여 추가 된 서브 모듈을 제거하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="e840d7466b559eb0f0b23357086bf7848201520d" translate="yes" xml:space="preserve">
          <source>To summarize, this is what you should do :</source>
          <target state="translated">요약하면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="0ff9656c2360991772c502bcb624d39289d26ed5" translate="yes" xml:space="preserve">
          <source>Track changes made to .gitmodules</source>
          <target state="translated">.gitmodule에 대한 변경 사항 추적</target>
        </trans-unit>
        <trans-unit id="01d9d4bd68ab0b71b96630724db69bbc9e650688" translate="yes" xml:space="preserve">
          <source>Try to abstain from options to &lt;code&gt;rm&lt;/code&gt; and &lt;code&gt;deinit&lt;/code&gt; as long as you can.  Options (like &lt;code&gt;-f&lt;/code&gt;) for &lt;code&gt;git&lt;/code&gt; are good if you are a Pro.  But as you came here, you probably are not so experienced in the &lt;code&gt;submodule&lt;/code&gt; area.  So better be safe than sorry.</source>
          <target state="translated">가능한 한 옵션에서 &lt;code&gt;rm&lt;/code&gt; 을 &lt;code&gt;deinit&lt;/code&gt; 하고 초기화 를 해제하십시오. &lt;code&gt;git&lt;/code&gt; 에 대한 옵션 ( &lt;code&gt;-f&lt;/code&gt; 등 )은 Pro 인 경우 좋습니다. 그러나 당신이 여기에 왔을 때, 당신은 아마도 &lt;code&gt;submodule&lt;/code&gt; 영역에서 경험이 많지 않을 것입니다. 따라서 미안보다 안전합니다.</target>
        </trans-unit>
        <trans-unit id="40669d18e0823e45a4c8dda101264e80ce1404c9" translate="yes" xml:space="preserve">
          <source>Unregister the given submodules ... If you really want to remove a
  submodule from the repository and commit that use git-rm[1]
  &lt;strong&gt;instead&lt;/strong&gt;.</source>
          <target state="translated">주어진 서브 모듈의 등록을 해제합니다 ... 리포지토리에서 서브 모듈을 제거하고 &lt;strong&gt;대신&lt;/strong&gt; git-rm [1]을 사용하여 커밋하려면.</target>
        </trans-unit>
        <trans-unit id="b84a4b6364611d2bc031759abf5dcf0d3e4b2e89" translate="yes" xml:space="preserve">
          <source>Unregister the given submodules, i.e. remove the whole &lt;code&gt;submodule.$name&lt;/code&gt;
  section from .git/config together with their work tree.</source>
          <target state="translated">주어진 서브 모듈의 등록을 해제하십시오 &lt;code&gt;submodule.$name&lt;/code&gt; 즉 .git / config에서 전체 서브 모듈. $ name 섹션을 작업 트리와 함께 제거하십시오.</target>
        </trans-unit>
        <trans-unit id="17afc2cf9cdbab3e5d8d6b0ce546a16eb53640c3" translate="yes" xml:space="preserve">
          <source>Unstage and remove $path_to_submodule only from the index (to prevent losing information)</source>
          <target state="translated">인덱스에서 $ path_to_submodule을 스테이지 해제하고 제거하십시오 (정보 손실을 방지하기 위해).</target>
        </trans-unit>
        <trans-unit id="7c7c17d96895ab1edc446745a7cbb9bce2c4eab4" translate="yes" xml:space="preserve">
          <source>Use a newer &lt;code&gt;git&lt;/code&gt;</source>
          <target state="translated">최신 &lt;code&gt;git&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="21a569a10b913e4067a51d36b1e566feb183e389" translate="yes" xml:space="preserve">
          <source>Via the page &lt;em&gt;&lt;a href=&quot;https://git.wiki.kernel.org/index.php/GitSubmoduleTutorial#Removal&quot;&gt;Git Submodule Tutorial&lt;/a&gt;&lt;/em&gt;:</source>
          <target state="translated">&lt;em&gt;&lt;a href=&quot;https://git.wiki.kernel.org/index.php/GitSubmoduleTutorial#Removal&quot;&gt;Git 서브 모듈 튜토리얼&lt;/a&gt;&lt;/em&gt; 페이지를 통해 :</target>
        </trans-unit>
        <trans-unit id="c94e855e54cd9a7ccbadd695335791061fdec071" translate="yes" xml:space="preserve">
          <source>Warning!</source>
          <target state="translated">Warning!</target>
        </trans-unit>
        <trans-unit id="f6bafaa418c14b7db01de21b2e5950df4fdadcde" translate="yes" xml:space="preserve">
          <source>Well, the 2nd variant of module &lt;code&gt;two/&lt;/code&gt; is not under &lt;code&gt;.git/modules/two/&lt;/code&gt;, it is under &lt;code&gt;.git/modules/someunusedname/&lt;/code&gt;!  So things like &lt;code&gt;git rm $module; rm -f .git/module/$module&lt;/code&gt; are totally wrong!  You must either consult &lt;code&gt;module/.git&lt;/code&gt; or &lt;code&gt;.gitmodules&lt;/code&gt; to find the right thing to remove!</source>
          <target state="translated">글쎄, 모듈 &lt;code&gt;two/&lt;/code&gt; 번째 변형은 &lt;code&gt;.git/modules/two/&lt;/code&gt; 아래에 있지 않고 &lt;code&gt;.git/modules/someunusedname/&lt;/code&gt; 아래에 있습니다 ! &lt;code&gt;git rm $module; rm -f .git/module/$module&lt;/code&gt; 과 같은 것들 ; rm -f .git / module / $ module 은 완전히 잘못되었습니다! 제거 할 올바른 것을 찾으려면 &lt;code&gt;module/.git&lt;/code&gt; 또는 &lt;code&gt;.gitmodules&lt;/code&gt; 를 참조해야합니다!</target>
        </trans-unit>
        <trans-unit id="17ec077994c0965f33148294d84c827da6cdac4a" translate="yes" xml:space="preserve">
          <source>What I'm currently doing Dec 2012 (combines most of these answers):</source>
          <target state="translated">내가 현재 2012 년 12 월하고있는 일 (이 답변의 대부분을 결합) :</target>
        </trans-unit>
        <trans-unit id="53939b94fa1711b1a7c570e811a85bafd8afd403" translate="yes" xml:space="preserve">
          <source>What to do now?  Well, just do exactly as told!  Use &lt;code&gt;--name someunusedname&lt;/code&gt;</source>
          <target state="translated">지금 무엇을해야합니까? 글쎄, 정확히 말한대로하십시오! &lt;code&gt;--name someunusedname&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="22898919b72150cd9f5f1ea6b3e1bff1df5bded1" translate="yes" xml:space="preserve">
          <source>When you do &lt;code&gt;git submodule add&lt;/code&gt;, it only adds it to &lt;code&gt;.gitmodules&lt;/code&gt;, but
once you did &lt;code&gt;git submodule init&lt;/code&gt;, it added to &lt;code&gt;.git/config&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;git submodule add&lt;/code&gt; 를 수행하면 &lt;code&gt;.gitmodules&lt;/code&gt; 에만 추가되지만 &lt;code&gt;git submodule init&lt;/code&gt; 를 수행하면 &lt;code&gt;.git/config&lt;/code&gt; 에 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="11d9064bfaeb9b71916696d7c5fab45081499344" translate="yes" xml:space="preserve">
          <source>Why never remove &lt;code&gt;$GIT_DIR/modules/&amp;lt;name&amp;gt;/&lt;/code&gt;?</source>
          <target state="translated">왜 &lt;code&gt;$GIT_DIR/modules/&amp;lt;name&amp;gt;/&lt;/code&gt; 제거하지 않습니까?</target>
        </trans-unit>
        <trans-unit id="4c02475ea0a104471540c380d2a920b4b0a90b00" translate="yes" xml:space="preserve">
          <source>Why this error?  Because &lt;code&gt;.git/modules/two/&lt;/code&gt; previously was populated from &lt;a href=&quot;https://github.com/hilbix/empty.git&quot;&gt;https://github.com/hilbix/empty.git&lt;/a&gt; and now shall be re-populated from something else, namely &lt;a href=&quot;https://github.com/hilbix/src.git&quot;&gt;https://github.com/hilbix/src.git&lt;/a&gt;.  You won't see this if you re-populate it from &lt;a href=&quot;https://github.com/hilbix/empty.git&quot;&gt;https://github.com/hilbix/empty.git&lt;/a&gt;</source>
          <target state="translated">왜이 오류가 발생합니까? &lt;code&gt;.git/modules/two/&lt;/code&gt; 이전에 &lt;a href=&quot;https://github.com/hilbix/empty.git&quot;&gt;https://github.com/hilbix/empty.git&lt;/a&gt; 에서 채워졌으며 이제 다른 것, 즉 &lt;a href=&quot;https://github.com/hilbix/src.git&quot;&gt;https://github.com/hilbix/src.git&lt;/a&gt; 에서 다시 채워지기 때문에 . &lt;a href=&quot;https://github.com/hilbix/empty.git&quot;&gt;https://github.com/hilbix/empty.git&lt;/a&gt; 에서 다시 채울 경우이 메시지가 표시되지 않습니다</target>
        </trans-unit>
        <trans-unit id="2d37e6a6f9105af4847908c33501a8800652476a" translate="yes" xml:space="preserve">
          <source>With &quot;&lt;code&gt;git submodule init&lt;/code&gt;&quot; the user is able to tell git they care about one or more submodules and wants to have it populated on the next call to &quot;&lt;code&gt;git submodule update&lt;/code&gt;&quot;.</source>
          <target state="translated">&quot; &lt;code&gt;git submodule init&lt;/code&gt; &quot;를 사용하면 사용자는 git에게 하나 이상의 서브 모듈에 대해 신경을 쓰면서 다음에 &quot; &lt;code&gt;git submodule update&lt;/code&gt; &quot;를 호출 할 때이를 채우려 고합니다.</target>
        </trans-unit>
        <trans-unit id="6c4c14376896bb21bdd7eadd89140b659cb40e96" translate="yes" xml:space="preserve">
          <source>With git 2.17 and above it's just:</source>
          <target state="translated">git 2.17 이상에서는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="a593fc6d174f81c09a0f106366de92244e03a3cb" translate="yes" xml:space="preserve">
          <source>You can probably get away with the above two steps for git 1.8.5+ as &lt;a href=&quot;https://stackoverflow.com/a/21211232/3363202&quot;&gt;tinlyx's answer&lt;/a&gt; noted, as all &lt;code&gt;git submodule&lt;/code&gt; commands seem to work.</source>
          <target state="translated">모든 &lt;code&gt;git submodule&lt;/code&gt; 명령이 작동하는 것처럼 &lt;a href=&quot;https://stackoverflow.com/a/21211232/3363202&quot;&gt;tinlyx의 답변이&lt;/a&gt; 지적했듯이 git 1.8.5 이상에 대해 위의 두 단계를 벗어날 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fec26e3f8230a518d5e1741dc787d3ee7e6062e2" translate="yes" xml:space="preserve">
          <source>You can use an alias to automate the solutions provided by others:</source>
          <target state="translated">별명을 사용하여 다른 사람이 제공 한 솔루션을 자동화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="082e02cc74f2b7fa3b0c46fdc924a8bb08cc4240" translate="yes" xml:space="preserve">
          <source>You can use this multiply, and this is saved into &lt;code&gt;$HOME/.gitconfig&lt;/code&gt;.  Something like</source>
          <target state="translated">이 곱셈을 사용할 수 있으며 &lt;code&gt;$HOME/.gitconfig&lt;/code&gt; 저장됩니다. 같은 것</target>
        </trans-unit>
        <trans-unit id="cd3a606e7e1d2f85631ef8e8f851aebcfd11d8a4" translate="yes" xml:space="preserve">
          <source>You have done something in the past which is unsupported by &lt;code&gt;git&lt;/code&gt;.  Then you are on the dark side and things get ugly and complicated.  (Perhaps using another machine fixes it.)</source>
          <target state="translated">과거에 &lt;code&gt;git&lt;/code&gt; 이 지원하지 않는 것을 수행했습니다. 그럼 당신은 어두운 편에 있고 일이 추악하고 복잡해집니다. (아마 다른 기계를 사용하면 문제가 해결 될 수 있습니다.)</target>
        </trans-unit>
        <trans-unit id="027c6b3f95dc37999af133f32f39ca951ec5b710" translate="yes" xml:space="preserve">
          <source>You have uncommitted data and might lose data.  Then better commit them first.</source>
          <target state="translated">커밋되지 않은 데이터가 있으며 데이터가 손실 될 수 있습니다. 그런 다음 먼저 커밋하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="b184733b05d2b2fb0fa48f553782e9e03032c673" translate="yes" xml:space="preserve">
          <source>You must remove the entry in &lt;code&gt;.gitmodules&lt;/code&gt; and &lt;code&gt;.git/config&lt;/code&gt;, and remove the directory of the module from the history:</source>
          <target state="translated">&lt;code&gt;.gitmodules&lt;/code&gt; 및 &lt;code&gt;.git/config&lt;/code&gt; 에서 항목을 제거하고 히스토리에서 모듈 디렉토리를 제거해야합니다.</target>
        </trans-unit>
        <trans-unit id="8b02087b8f74f00315e8888ed3c0bd73eeafce64" translate="yes" xml:space="preserve">
          <source>You see, there is no &lt;code&gt;-f&lt;/code&gt; needed on &lt;code&gt;submodule deinit&lt;/code&gt;.  If things are clean, in a &lt;code&gt;git clean&lt;/code&gt; sense.  Also note that &lt;code&gt;git clean -x&lt;/code&gt; is not needed.  &lt;strong&gt;This means &lt;code&gt;git submodule deinit&lt;/code&gt; unconditionally removes untracked files which are ignored.&lt;/strong&gt;  This is usually what you want, but do not forget about it.  Sometimes ignored files might be precious, like cached data which takes hours to days to be calculated again.</source>
          <target state="translated">&lt;code&gt;submodule deinit&lt;/code&gt; 에는 &lt;code&gt;-f&lt;/code&gt; 가 필요하지 않습니다. 일이 깨끗하다면, &lt;code&gt;git clean&lt;/code&gt; 의미입니다. 또한 &lt;code&gt;git clean -x&lt;/code&gt; 는 필요하지 않습니다. &lt;strong&gt;이것은 &lt;code&gt;git submodule deinit&lt;/code&gt; 가 무시되는 추적되지 않은 파일을 무조건 제거한다는 것을 의미합니다.&lt;/strong&gt; 이것은 일반적으로 원하는 것이지만 잊지 마십시오. 때로는 다시 계산하는 데 몇 시간에서 며칠이 걸리는 캐시 된 데이터와 같이 무시 된 파일이 소중 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="29b8b4521c511ad84fe7fdb3cce1cf9a2bcb01ee" translate="yes" xml:space="preserve">
          <source>You will have to delete the module files on your project manually.</source>
          <target state="translated">프로젝트에서 모듈 파일을 수동으로 삭제해야합니다.</target>
        </trans-unit>
        <trans-unit id="825806d08a98b7786e8612378baf5d216ab45418" translate="yes" xml:space="preserve">
          <source>Your &lt;code&gt;git&lt;/code&gt; is too old.  Then use a newer &lt;code&gt;git&lt;/code&gt;.  (See below how to.)</source>
          <target state="translated">&lt;code&gt;git&lt;/code&gt; 이 너무 늙었다. 그런 다음 최신 &lt;code&gt;git&lt;/code&gt; 을 사용하십시오. (아래 방법 참조)</target>
        </trans-unit>
        <trans-unit id="b3263d261892cd0fe088e87c994b93105a165597" translate="yes" xml:space="preserve">
          <source>Your submodule is not clean in a &lt;code&gt;git clean&lt;/code&gt; sense.  Then first clean your submodule using that command.  (See below.)</source>
          <target state="translated">서브 모듈은 &lt;code&gt;git clean&lt;/code&gt; 의미로 깨끗 하지 않습니다. 그런 다음 먼저 해당 명령을 사용하여 서브 모듈을 청소하십시오. (아래 참조)</target>
        </trans-unit>
        <trans-unit id="c5f61f79aa84e788870e87c6a3a7273f7a40b8d3" translate="yes" xml:space="preserve">
          <source>also is quite the inverse to</source>
          <target state="translated">또한 상당히 반대입니다</target>
        </trans-unit>
        <trans-unit id="fc021cf751bd19536fe97dc7c3e97f26df48da1d" translate="yes" xml:space="preserve">
          <source>because some commands basically need to do more than just a single thing:</source>
          <target state="translated">일부 명령은 기본적으로 단일 작업 이상을 수행해야하기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="786e97b3ee9fc4b292d5852c2c5943153c4ce91a" translate="yes" xml:space="preserve">
          <source>but</source>
          <target state="translated">but</target>
        </trans-unit>
        <trans-unit id="a379c85f8c69a0d3679d831f2b58817f66b078af" translate="yes" xml:space="preserve">
          <source>into</source>
          <target state="translated">into</target>
        </trans-unit>
        <trans-unit id="e9701ce3d2a3e65a5ba9a8b06bf157883a5f2cca" translate="yes" xml:space="preserve">
          <source>is the direct inverse to</source>
          <target state="translated">직접적으로</target>
        </trans-unit>
        <trans-unit id="067397bd0d1f8d785870c974f9dffe54efdc75de" translate="yes" xml:space="preserve">
          <source>pulls in further data if needed</source>
          <target state="translated">필요한 경우 추가 데이터를 가져옵니다</target>
        </trans-unit>
        <trans-unit id="a63f4ed1ad5856b0ef695a7abace53c0751617ff" translate="yes" xml:space="preserve">
          <source>pulls in the data to &lt;code&gt;.git/modules/NAME/&lt;/code&gt;</source>
          <target state="translated">데이터를 &lt;code&gt;.git/modules/NAME/&lt;/code&gt; 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="31cb2c3126ff597e73a7ee4c23e71508f6b6fc6d" translate="yes" xml:space="preserve">
          <source>rewrites URLs like</source>
          <target state="translated">같은 URL을 다시 작성</target>
        </trans-unit>
        <trans-unit id="1a98271a19ad55f7c6adc32e923d003f60257391" translate="yes" xml:space="preserve">
          <source>the submodule &lt;strong&gt;&lt;a href=&quot;https://stackoverflow.com/questions/1992018/git-submodule-update-needed-only-initially/2227598#2227598&quot;&gt;special entry&lt;/a&gt;&lt;/strong&gt; (as illustrated by &lt;a href=&quot;https://stackoverflow.com/q/16574625/6309&quot;&gt;this question&lt;/a&gt;): the git rm removes it from the index:</source>
          <target state="translated">하위 모듈 &lt;strong&gt;&lt;a href=&quot;https://stackoverflow.com/questions/1992018/git-submodule-update-needed-only-initially/2227598#2227598&quot;&gt;특수 항목&lt;/a&gt;&lt;/strong&gt; ( &lt;a href=&quot;https://stackoverflow.com/q/16574625/6309&quot;&gt;이 질문에&lt;/a&gt; 설명되어 있음) : git rm은 색인에서 항목을 제거합니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
