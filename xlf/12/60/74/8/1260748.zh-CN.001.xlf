<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/1260748">
    <body>
      <group id="1260748">
        <trans-unit id="75df9034e5f0ab05b359ebfc7a5adfe151a4e7be" translate="yes" xml:space="preserve">
          <source>&quot;&lt;strong&gt;&lt;code&gt;submodule deinit&lt;/code&gt;&lt;/strong&gt;&quot; is the way to do so.</source>
          <target state="translated">&amp;ldquo; &lt;strong&gt; &lt;code&gt;submodule deinit&lt;/code&gt; &lt;/strong&gt; &amp;rdquo;是这样做的方法。</target>
        </trans-unit>
        <trans-unit id="392629899d45cbd47895259061d0ff3ce069a21a" translate="yes" xml:space="preserve">
          <source>'&lt;code&gt;add&lt;/code&gt;' step which records the url of a submodule in the &lt;code&gt;.gitmodules&lt;/code&gt; file: it is need to removed for you.</source>
          <target state="translated">&amp;ldquo; &lt;code&gt;add&lt;/code&gt; &amp;rdquo;步骤在 &lt;code&gt;.gitmodules&lt;/code&gt; 文件中记录子模块的url：需要为您删除。</target>
        </trans-unit>
        <trans-unit id="ba14dc44bc5523cd7563fc3f492c061f4fee5caf" translate="yes" xml:space="preserve">
          <source>(1) does &lt;code&gt;git submodule init&lt;/code&gt;, so updates &lt;code&gt;.git/config&lt;/code&gt;</source>
          <target state="translated">（1）执行 &lt;code&gt;git submodule init&lt;/code&gt; ，因此更新 &lt;code&gt;.git/config&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1def3c48d21d75360ae1012a64badda431d5c9f8" translate="yes" xml:space="preserve">
          <source>(1) updates &lt;code&gt;.git/config&lt;/code&gt;</source>
          <target state="translated">（1）更新 &lt;code&gt;.git/config&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2bfa5d8a2c4831b5555fbe1d921bfe0b0daa6946" translate="yes" xml:space="preserve">
          <source>(2) does &lt;code&gt;git submodule update&lt;/code&gt;, so, nonrecursively checks out the module</source>
          <target state="translated">（2）进行 &lt;code&gt;git submodule update&lt;/code&gt; ，因此，非递归地检出模块</target>
        </trans-unit>
        <trans-unit id="87430307f79e6849310bc162e840241234657bae" translate="yes" xml:space="preserve">
          <source>(2) removes the files of the module</source>
          <target state="translated">2)删除模块中的文件</target>
        </trans-unit>
        <trans-unit id="5b7ac361af4e1fa2234d4108d3c13c3178644919" translate="yes" xml:space="preserve">
          <source>(3) checks out the submodules of the submodule recursively</source>
          <target state="translated">(3)递归检查出子模块的子模块</target>
        </trans-unit>
        <trans-unit id="e448bb7d60c08bf380e6fbcfd10962aa317f505b" translate="yes" xml:space="preserve">
          <source>(3) thereby recursively removes the submodules of the submodule</source>
          <target state="translated">(3)从而递归删除子模块中的子模块</target>
        </trans-unit>
        <trans-unit id="bd69d69fcfe49811745d93e0b6615040b2390e32" translate="yes" xml:space="preserve">
          <source>(4) updates &lt;code&gt;.gitmodules&lt;/code&gt;</source>
          <target state="translated">（4）更新 &lt;code&gt;.gitmodules&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="58191c64dc8bbe69521049950c192a0d5bdbf1b5" translate="yes" xml:space="preserve">
          <source>--Update (07/05/2017)--</source>
          <target state="translated">更新(07052017)------</target>
        </trans-unit>
        <trans-unit id="7a417a4483cc8de89c115f7f25e2cef55458ef45" translate="yes" xml:space="preserve">
          <source>1.) Delete the relevant section from the .gitmodules file. You can use below command:</source>
          <target state="translated">1.)1)删除.gitmodules文件中的相关部分。你可以使用下面的命令。</target>
        </trans-unit>
        <trans-unit id="3d6c68cdaff83acff1043cae63b2018b1a52345c" translate="yes" xml:space="preserve">
          <source>2.) Stage the &lt;code&gt;.gitmodules&lt;/code&gt; changes</source>
          <target state="translated">2.）进行 &lt;code&gt;.gitmodules&lt;/code&gt; 更改</target>
        </trans-unit>
        <trans-unit id="d50d54b4b2084be963c6b5c7d014d39b559d9a71" translate="yes" xml:space="preserve">
          <source>3.) Delete the relevant section from &lt;code&gt;.git/config&lt;/code&gt;. You can use below command:</source>
          <target state="translated">3.）从 &lt;code&gt;.git/config&lt;/code&gt; 中删除相关部分。 您可以使用以下命令：</target>
        </trans-unit>
        <trans-unit id="c7277a2c26f6c06aa691b4ee280630cf46308f95" translate="yes" xml:space="preserve">
          <source>4.) Remove the gitlink (no trailing slash):</source>
          <target state="translated">4.)移除git链接(没有斜杠)。</target>
        </trans-unit>
        <trans-unit id="6926a4354a0cd992e6eb7e030d616319df849d60" translate="yes" xml:space="preserve">
          <source>5.) Cleanup the &lt;code&gt;.git/modules&lt;/code&gt;:</source>
          <target state="translated">5.）清理 &lt;code&gt;.git/modules&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="31b5db34f8e0cc9ff4eb92359a3f2275053ad125" translate="yes" xml:space="preserve">
          <source>6.) Commit:</source>
          <target state="translated">6.)承诺。</target>
        </trans-unit>
        <trans-unit id="17fbaa47e0f16f4a560962bdb629bc835837f27c" translate="yes" xml:space="preserve">
          <source>7.) Delete the now untracked submodule files</source>
          <target state="translated">7.)删除现在未被跟踪的子模块文件。</target>
        </trans-unit>
        <trans-unit id="d445583f729dd42045a188617be6fbd6bb1316d3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://en.wiktionary.org/wiki/FWIW&quot;&gt;FWIW&lt;/a&gt;, I also removed the &lt;code&gt;.git&lt;/code&gt; folder before doing the &lt;code&gt;git add&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://en.wiktionary.org/wiki/FWIW&quot;&gt;FWIW&lt;/a&gt; ，在执行 &lt;code&gt;git add&lt;/code&gt; 之前，我还删除了 &lt;code&gt;.git&lt;/code&gt; 文件夹。</target>
        </trans-unit>
        <trans-unit id="905ecf03ef6bfc25f887e5d7e45974d4e3967f8a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;$submodule&quot;&lt;/code&gt; is just to emphasize where to put the name, and that you have to be careful with spaces and the like</source>
          <target state="translated">&lt;code&gt;&quot;$submodule&quot;&lt;/code&gt; 只是为了强调名称的位置，并且您必须注意空格等</target>
        </trans-unit>
        <trans-unit id="2733c62b60e8bd5dd536c8ef3689b5af08022833" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.gitmodules&lt;/code&gt; then looks like</source>
          <target state="translated">&lt;code&gt;.gitmodules&lt;/code&gt; 然后看起来像</target>
        </trans-unit>
        <trans-unit id="2343005b3df511792c4afb1585be1c47863c9e77" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git rm --cached path_to_submodule&lt;/code&gt; (no trailing slash)</source>
          <target state="translated">&lt;code&gt;git rm --cached path_to_submodule&lt;/code&gt; （不带斜杠）</target>
        </trans-unit>
        <trans-unit id="fa85b914c450e6a5b0d93c0557415248bf31dc21" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git rm --cached path_to_submodule&lt;/code&gt; (no trailing slash).</source>
          <target state="translated">&lt;code&gt;git rm --cached path_to_submodule&lt;/code&gt; （没有斜杠）。</target>
        </trans-unit>
        <trans-unit id="97b1d2b8f55b09b5693d68a244020ec30599996d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git rm&lt;/code&gt;: See &lt;a href=&quot;https://github.com/git/git/commit/95c16418f0375e2fc325f32c3d7578fba9cfd7ef&quot;&gt;commit 95c16418&lt;/a&gt;:</source>
          <target state="translated">&lt;code&gt;git rm&lt;/code&gt; ：参见&lt;a href=&quot;https://github.com/git/git/commit/95c16418f0375e2fc325f32c3d7578fba9cfd7ef&quot;&gt;提交95c16418&lt;/a&gt; ：</target>
        </trans-unit>
        <trans-unit id="33816e486b1c4f37297aff7ca4f58d0b84c3544d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git submodule deinit&lt;/code&gt;: It stems from &lt;a href=&quot;http://git.661346.n2.nabble.com/PATCH-v3-submodule-add-deinit-command-td7576946.html&quot;&gt;this patch&lt;/a&gt;:</source>
          <target state="translated">&lt;code&gt;git submodule deinit&lt;/code&gt; ：它源于&lt;a href=&quot;http://git.661346.n2.nabble.com/PATCH-v3-submodule-add-deinit-command-td7576946.html&quot;&gt;此补丁&lt;/a&gt; ：</target>
        </trans-unit>
        <trans-unit id="56c73fccdad0005e7be1ce912f0d4cb4d049d8d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ls -1p .git/modules/&lt;/code&gt; gives</source>
          <target state="translated">&lt;code&gt;ls -1p .git/modules/&lt;/code&gt; 给出</target>
        </trans-unit>
        <trans-unit id="4f86b6191be8658ecb05ac980276737fa12f267e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rm -rf&lt;/code&gt;: This is mentioned in &lt;a href=&quot;https://stackoverflow.com/users/2753241/daniel-schroeder&quot;&gt;Daniel Schroeder&lt;/a&gt;'s &lt;a href=&quot;https://stackoverflow.com/a/26505847/6309&quot;&gt;answer&lt;/a&gt;, and summarized by &lt;a href=&quot;https://stackoverflow.com/users/246776/eonil&quot;&gt;Eonil&lt;/a&gt; in &lt;a href=&quot;https://stackoverflow.com/questions/1260748/how-do-i-remove-a-git-submodule/16162000?noredirect=1#comment41729982_16162000&quot;&gt;the comments&lt;/a&gt;:</source>
          <target state="translated">&lt;code&gt;rm -rf&lt;/code&gt; ：这是&lt;a href=&quot;https://stackoverflow.com/users/2753241/daniel-schroeder&quot;&gt;Daniel Schroeder&lt;/a&gt;的&lt;a href=&quot;https://stackoverflow.com/a/26505847/6309&quot;&gt;回答中&lt;/a&gt;提到的，并由&lt;a href=&quot;https://stackoverflow.com/users/246776/eonil&quot;&gt;Eonil&lt;/a&gt;在&lt;a href=&quot;https://stackoverflow.com/questions/1260748/how-do-i-remove-a-git-submodule/16162000?noredirect=1#comment41729982_16162000&quot;&gt;评论中&lt;/a&gt;总结：</target>
        </trans-unit>
        <trans-unit id="86744ef5bc68f6c9217ef19e3202a295ca39d1cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;workhorse:~/path/to/worktree$ git merge --ff-only FETCH_HEAD&lt;/code&gt;.  If this does not work, use &lt;code&gt;git reset --soft FETCH_HEAD&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;workhorse:~/path/to/worktree$ git merge --ff-only FETCH_HEAD&lt;/code&gt; 。 如果这不起作用，请使用 &lt;code&gt;git reset --soft FETCH_HEAD&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="333a0434bdebb9dc141381dac1154fa4cc4da677" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;workhorse:~/path/to/worktree$ git status --porcelain&lt;/code&gt;&lt;strong&gt;must not&lt;/strong&gt; output anything!  If it does, cleanup things first!</source>
          <target state="translated">&lt;code&gt;workhorse:~/path/to/worktree$ git status --porcelain&lt;/code&gt; &lt;strong&gt;不能&lt;/strong&gt;输出任何东西！ 如果是这样，请先清理东西！</target>
        </trans-unit>
        <trans-unit id="fa376d13f407fd16366f7120c7aaf255adb47552" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Please note:&lt;/em&gt;&lt;code&gt;$submodulepath&lt;/code&gt; doesn't contain leading or trailing slashes.</source>
          <target state="translated">&lt;em&gt;请注意：&lt;/em&gt; &lt;code&gt;$submodulepath&lt;/code&gt; 不包含前导或尾部斜杠。</target>
        </trans-unit>
        <trans-unit id="aaef89dbbebca68bd2777431d3b44acd06d21585" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Background&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Background&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="560172c61c1dbb6f80b4e7fdab37acc8aea8ba55" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;In theory&lt;/strong&gt;, &lt;code&gt;git rm&lt;/code&gt; in &lt;em&gt;step 1&lt;/em&gt; should take care of it. Hopefully, the second part of OP question can be answered positively one day (that this can be done in one command).</source>
          <target state="translated">&lt;strong&gt;从理论上讲&lt;/strong&gt; ， &lt;em&gt;第1步中的&lt;/em&gt; &lt;code&gt;git rm&lt;/code&gt; 应该照顾好它。 希望OP问题的第二部分可以在一天之内得到肯定的回答（可以在一个命令中完成）。</target>
        </trans-unit>
        <trans-unit id="3f3b24aeaaa0bd39c01d2e5c5520fcffe3389465" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Never touch the insides of the &lt;code&gt;.git&lt;/code&gt; directory yourself!&lt;/strong&gt;  Editing inside &lt;code&gt;.git&lt;/code&gt; enters the dark side.  Stay away at all cost!</source>
          <target state="translated">&lt;strong&gt;切勿自己触摸 &lt;code&gt;.git&lt;/code&gt; 目录的内部！&lt;/strong&gt; 在 &lt;code&gt;.git&lt;/code&gt; 中进行编辑会进入黑暗的一面。 不惜一切代价远离！</target>
        </trans-unit>
        <trans-unit id="f4edeb813ceace49f9f305b324528b67449b2b03" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also&lt;/strong&gt;: &lt;a href=&quot;https://stackoverflow.com/a/7646931/5614968&quot;&gt;alternative steps below&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;另请参阅&lt;/strong&gt; ： &lt;a href=&quot;https://stackoverflow.com/a/7646931/5614968&quot;&gt;以下替代步骤&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="5de5593ad47f9242fa4149d9113f83b1e00a5d77" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Simple steps&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;简单步骤&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e4b56a9672367d8f4ac4843beceba6b73aacffb1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To completely remove a submodule, additionally manually delete &lt;code&gt;$GIT_DIR/modules/&amp;lt;name&amp;gt;/&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;要完全删除子模块，请另外手动删除 &lt;code&gt;$GIT_DIR/modules/&amp;lt;name&amp;gt;/&lt;/code&gt; &lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="8f1b14f0b0c084f7ab89a5ad01392fdab3452174" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To remove a submodule you need to:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;要删除子模块，您需要：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a1222bda332630854cdae80006e1fe6ce32dad9f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To summarize, this is what you should do :&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;总而言之，这是您应该做的：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="02d418269e8389c6167327b90ad8e42318134f27" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;deinit&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;deinit&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="127322f3facbebe1c97e1d50f00d2eb7ef8eb670" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;(Merged by &lt;a href=&quot;https://github.com/gitster&quot;&gt;Junio C Hamano -- &lt;code&gt;gitster&lt;/code&gt; --&lt;/a&gt; in &lt;a href=&quot;https://github.com/git/git/commit/ead8dbe2e14ee9a2a18ccd0ad7bca806e1be0d54&quot;&gt;commit ead8dbe&lt;/a&gt;, 13 Feb 2018)&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;（由&lt;a href=&quot;https://github.com/gitster&quot;&gt;Junio C &lt;code&gt;gitster&lt;/code&gt; - gitster-&lt;/a&gt;在&lt;a href=&quot;https://github.com/git/git/commit/ead8dbe2e14ee9a2a18ccd0ad7bca806e1be0d54&quot;&gt;commit ead8dbe中合并&lt;/a&gt; ，2018年2月13日）&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="e989f340019df7efe0e1d18d51185107965d21dc" translate="yes" xml:space="preserve">
          <source>A further reason is shown above.  Look at the &lt;code&gt;ls&lt;/code&gt;.  What do you see there?</source>
          <target state="translated">上面显示了另一个原因。 看 &lt;code&gt;ls&lt;/code&gt; 。 您在那看到什么？</target>
        </trans-unit>
        <trans-unit id="f1acf21180f55e5ce393b96bb991be68f1799a0b" translate="yes" xml:space="preserve">
          <source>A submodule can be deleted by running &lt;code&gt;git rm &amp;lt;submodule path&amp;gt; &amp;amp;&amp;amp; git commit&lt;/code&gt;. This can be undone using &lt;code&gt;git revert&lt;/code&gt;.</source>
          <target state="translated">可以通过运行 &lt;code&gt;git rm &amp;lt;submodule path&amp;gt; &amp;amp;&amp;amp; git commit&lt;/code&gt; 删除子模块 。 可以使用 &lt;code&gt;git revert&lt;/code&gt; 撤消。</target>
        </trans-unit>
        <trans-unit id="a19083aae8c4f24f25eb2b5fe29e28e8e67633bd" translate="yes" xml:space="preserve">
          <source>A submodule cloned using git 1.7.8 or newer will leave at most four traces of itself in your local repo. The process for removing those four traces is given by the three commands below:</source>
          <target state="translated">使用 git 1.7.8 或更新版本的子模块克隆的子模块最多会在你的本地版本库中留下四个痕迹。删除这四个痕迹的过程由下面的三个命令给出。</target>
        </trans-unit>
        <trans-unit id="20daf22b77b7ac0c68775a88bf34854b508544cd" translate="yes" xml:space="preserve">
          <source>Additional 2 more steps mentioned below are needed to clean submodule completely in local cloned copy.</source>
          <target state="translated">下面提到的另外2个步骤是需要在本地克隆副本中完全清理子模块。</target>
        </trans-unit>
        <trans-unit id="caa4bb0d75166dea06c08fa522d2d965c057300a" translate="yes" xml:space="preserve">
          <source>After experimenting with all the different answers on this site, I ended up with this solution:</source>
          <target state="translated">在尝试了这个网站上所有不同的答案后,我最终选择了这个方案。</target>
        </trans-unit>
        <trans-unit id="45e899784b28fb9d3aa33853ddd0da06eeab7ee4" translate="yes" xml:space="preserve">
          <source>Also have a look at &lt;a href=&quot;https://stackoverflow.com/a/5387510/319266&quot;&gt;an answer to &lt;em&gt;Can I unpopulate a Git submodule?&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">另请&lt;a href=&quot;https://stackoverflow.com/a/5387510/319266&quot;&gt;&lt;em&gt;参阅&amp;ldquo;我可以不填充Git子模块吗？&amp;rdquo;&lt;/em&gt;的答案&lt;em&gt;。&lt;/em&gt;&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="ef314e5782dfa75dcdd61039070894834b22f6d1" translate="yes" xml:space="preserve">
          <source>And from the philosophical view, wiping history is always wrong!
  &lt;a href=&quot;https://en.wikipedia.org/wiki/Quantum_eraser_experiment&quot;&gt;Except for quantum mechanics&lt;/a&gt;, as usual, but this is something completely different.</source>
          <target state="translated">从哲学的角度来看，抹除历史总是错误的！ &lt;a href=&quot;https://en.wikipedia.org/wiki/Quantum_eraser_experiment&quot;&gt;除了量子力学&lt;/a&gt; ，像往常一样，但这是完全不同的。</target>
        </trans-unit>
        <trans-unit id="cc8b18a25873b09f8f3ee5c3e3b42e01f7b9cc25" translate="yes" xml:space="preserve">
          <source>And yes, you can blame &lt;code&gt;git&lt;/code&gt; for this, as many handy things were missing in &lt;code&gt;git&lt;/code&gt; in the past.  Like a proper way to remove submodules again.</source>
          <target state="translated">是的，您可以为此归咎于 &lt;code&gt;git&lt;/code&gt; ，因为过去 &lt;code&gt;git&lt;/code&gt; 中缺少许多方便的东西。 就像再次删除子模块的正确方法一样。</target>
        </trans-unit>
        <trans-unit id="5f26a89694b84641815648077efb61627fedc522" translate="yes" xml:space="preserve">
          <source>And you do not lose history.  In case you forgot to push the very latest version of the old submodule, you can enter the local copy and do so later on.  Note that it is quite common that somebody forgets to push some submodules (because this is a PITA for newcomers, until they became accustomed to &lt;code&gt;git&lt;/code&gt;).</source>
          <target state="translated">而且您不会失去历史。 如果您忘记推送最新版本的旧子模块，则可以输入本地副本，稍后再输入。 请注意，很普遍有人忘记推送某些子模块（因为这是新手的PITA，直到他们习惯了 &lt;code&gt;git&lt;/code&gt; 为止）。</target>
        </trans-unit>
        <trans-unit id="fbe9849172bead15ca97554d7588bd92c11f98ef" translate="yes" xml:space="preserve">
          <source>As @Mark Cheverton's answer correctly pointed out, if the second line isn't used, even if you removed the submodule for now, the remnant .git/modules/the_submodule folder will prevent the same submodule from being added back or replaced in the future. Also, as @VonC mentioned, &lt;code&gt;git rm&lt;/code&gt; will do most of the job on a submodule.</source>
          <target state="translated">正如@Mark Cheverton的答案正确指出的那样，如果不使用第二行，即使现在删除了子模块，残留的.git / modules / the_submodule文件夹也将阻止将来再添加或替换同一子模块。 。 另外，正如@VonC所述， &lt;code&gt;git rm&lt;/code&gt; 将在子模块上完成大部分工作。</target>
        </trans-unit>
        <trans-unit id="8a56ce8c54478dc506c0263c4ee63a89060e12db" translate="yes" xml:space="preserve">
          <source>As pointed out correctly in the comments and &lt;a href=&quot;https://stackoverflow.com/a/44863971/683218&quot;&gt;other answers&lt;/a&gt;, the two commands (although functionally sufficient to remove a submodule), do leave a trace in the &lt;code&gt;[submodule &quot;the_submodule&quot;]&lt;/code&gt; section of &lt;code&gt;.git/config&lt;/code&gt; (as of July 2017), which can be removed using a third command:</source>
          <target state="translated">正如评论和&lt;a href=&quot;https://stackoverflow.com/a/44863971/683218&quot;&gt;其他答案中&lt;/a&gt;正确指出的那样，这两个命令（尽管功能上足以删除子模块）确实在 &lt;code&gt;.git/config&lt;/code&gt; 的 &lt;code&gt;[submodule &quot;the_submodule&quot;]&lt;/code&gt; 部分（截至2017年7月）中留下了痕迹，可以使用第三个命令删除：</target>
        </trans-unit>
        <trans-unit id="c44d79cf1fbed8080ef33f23ace585cb888ec5a0" translate="yes" xml:space="preserve">
          <source>But as of July 2017, &lt;em&gt;step 2&lt;/em&gt; is necessary to remove data in &lt;code&gt;.git/modules/&lt;/code&gt; for otherwise, you can't e.g. add the submodule back in the future.</source>
          <target state="translated">但是从2017年7月开始，必须删除&lt;em&gt;第2步&lt;/em&gt;才能删除 &lt;code&gt;.git/modules/&lt;/code&gt; 中的数据，否则您将无法在以后添加子模块。</target>
        </trans-unit>
        <trans-unit id="e0928c3d1bff80d43c5ce3a0d3cbbb445490d82d" translate="yes" xml:space="preserve">
          <source>But currently there is no easy way they can tell git they do not care about a submodule anymore and wants to get rid of the local work tree (unless the user knows a lot about submodule internals and removes the &quot;&lt;code&gt;submodule.$name.url&lt;/code&gt;&quot; setting from &lt;code&gt;.git/config&lt;/code&gt; together with the work tree himself).</source>
          <target state="translated">但是目前，没有一种简单的方法可以告诉git他们不再关心子模块，并且想要摆脱本地工作树（除非用户 &lt;code&gt;submodule.$name.url&lt;/code&gt; 模块内部了解很多，并删除&amp;ldquo; submodule。$ name.url &amp;rdquo; &lt;code&gt;.git/config&lt;/code&gt; 中的设置以及工作树本身）。</target>
        </trans-unit>
        <trans-unit id="7babdd9be2896a6b41852600857f85d2a33822a0" translate="yes" xml:space="preserve">
          <source>But the submodule's section in &lt;code&gt;.gitmodules&lt;/code&gt; is left untouched, which is a leftover of the now removed submodule and might irritate users (as opposed to the setting in &lt;code&gt;.git/config&lt;/code&gt;, this must stay as a reminder that the user showed interest in this submodule so it will be repopulated later when an older commit is checked out).</source>
          <target state="translated">但是 &lt;code&gt;.gitmodules&lt;/code&gt; 中子模块的部分保持不变，这是现在删除的子模块的剩余部分，可能会激怒用户（与 &lt;code&gt;.git/config&lt;/code&gt; 中的设置相反，这必须作为提醒用户对该子模块表现出兴趣因此稍后检出较旧的提交时，它将重新填充。</target>
        </trans-unit>
        <trans-unit id="654ba1186f9f8bc755889fb6230dc270ff5b17f3" translate="yes" xml:space="preserve">
          <source>By the way, is there a reason I can't simply do 
&lt;code&gt;git submodule rm whatever&lt;/code&gt; ?</source>
          <target state="translated">顺便说一句，有一个原因我不能简单地做 &lt;code&gt;git submodule rm whatever&lt;/code&gt; 吗？</target>
        </trans-unit>
        <trans-unit id="e98297a1c3d718ff8261d27aba3f2b66d62691bb" translate="yes" xml:space="preserve">
          <source>Call: &lt;code&gt;git add .gitmodules&lt;/code&gt;</source>
          <target state="translated">致电： &lt;code&gt;git add .gitmodules&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5901d1e3a4cbf3904a5d9fc6f6176b76be6cf36e" translate="yes" xml:space="preserve">
          <source>Call: &lt;code&gt;git rm &amp;lt;path to submodule&amp;gt;&lt;/code&gt;</source>
          <target state="translated">调用： &lt;code&gt;git rm &amp;lt;path to submodule&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7baaa05bcd5f4f1c97b1fec74cb6a7a70bfdad6d" translate="yes" xml:space="preserve">
          <source>Call: &lt;code&gt;git submodule deinit &amp;lt;path to submodule&amp;gt;&lt;/code&gt;</source>
          <target state="translated">调用： &lt;code&gt;git submodule deinit &amp;lt;path to submodule&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5f6a34c22b102e752b6415f7f23b75ba181aa11e" translate="yes" xml:space="preserve">
          <source>Cleaning manually up is good, because this way you perhaps detect some things you forgot about.</source>
          <target state="translated">手动清理是很好的,因为这样可以或许检测出一些你忘了的东西。</target>
        </trans-unit>
        <trans-unit id="410ae06d82adb99361cf58d1e36f069d269d3801" translate="yes" xml:space="preserve">
          <source>Cleanup things first</source>
          <target state="translated">先把东西清理干净</target>
        </trans-unit>
        <trans-unit id="1a1873ab51c74e8b39327ee42dade7a407e5a22d" translate="yes" xml:space="preserve">
          <source>Commit</source>
          <target state="translated">Commit</target>
        </trans-unit>
        <trans-unit id="9f949d035d28ec36be524e327a07d367ab7967b9" translate="yes" xml:space="preserve">
          <source>Commit and Push</source>
          <target state="translated">承诺和推动</target>
        </trans-unit>
        <trans-unit id="4aa83793e006e33aa824385f88ae1a9cd0ebe7c6" translate="yes" xml:space="preserve">
          <source>Commit it &lt;code&gt;git commit -m &quot;Removed submodule xxx&quot;&lt;/code&gt;</source>
          <target state="translated">提交 &lt;code&gt;git commit -m &quot;Removed submodule xxx&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cf609498bbd9f449c87f10c8fb42468b310b2435" translate="yes" xml:space="preserve">
          <source>Commit it &lt;code&gt;git commit -m &quot;Removed submodule xxx&quot;&lt;/code&gt; and push.</source>
          <target state="translated">提交 &lt;code&gt;git commit -m &quot;Removed submodule xxx&quot;&lt;/code&gt; 并推送。</target>
        </trans-unit>
        <trans-unit id="e179e8a2bc74ae797f87c8700661844fbbfa36a7" translate="yes" xml:space="preserve">
          <source>Commit the changes:</source>
          <target state="translated">承诺改变。</target>
        </trans-unit>
        <trans-unit id="df62bf4beff627a092931fe581233752c41b4f32" translate="yes" xml:space="preserve">
          <source>Commit the superproject</source>
          <target state="translated">承担超级项目</target>
        </trans-unit>
        <trans-unit id="d41a98cd75e2192cb8a8edadfa294e67c7350684" translate="yes" xml:space="preserve">
          <source>Complain when for a submodule given on the command line the url setting can't be found in &lt;code&gt;.git/config&lt;/code&gt;, but nonetheless don't fail.</source>
          <target state="translated">对于在命令行上给出的子模块，如果在 &lt;code&gt;.git/config&lt;/code&gt; 中找不到url设置，则应进行投诉，但不要失败。</target>
        </trans-unit>
        <trans-unit id="2ad47fcc2584e4323df21d5330c0c6a37ff5c902" translate="yes" xml:space="preserve">
          <source>Create bash script file in the &lt;code&gt;$HOME&lt;/code&gt; dir named i.e. &lt;code&gt;remove_submodule.sh&lt;/code&gt;:</source>
          <target state="translated">在 &lt;code&gt;$HOME&lt;/code&gt; 目录中创建bash脚本文件，名称为ie &lt;code&gt;remove_submodule.sh&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="87f8da7866a67dbf2c107e2520b24b799c535746" translate="yes" xml:space="preserve">
          <source>Currently using &quot;&lt;code&gt;git rm&lt;/code&gt;&quot; on a submodule removes the submodule's work tree from that of the superproject and the gitlink from the index.</source>
          <target state="translated">当前在子模块上使用&amp;ldquo; &lt;code&gt;git rm&lt;/code&gt; &amp;rdquo;会从超级项目的工作树中删除子模块的工作树，并从索引中删除gitlink。</target>
        </trans-unit>
        <trans-unit id="257afc1db76dcf4ed31ec80af396bee086359a49" translate="yes" xml:space="preserve">
          <source>Delete the now untracked submodule files</source>
          <target state="translated">删除现在未被跟踪的子模块文件</target>
        </trans-unit>
        <trans-unit id="714c675ee2c0ed84cf83a604c45a55a7ef4720f4" translate="yes" xml:space="preserve">
          <source>Delete the now untracked submodule files:</source>
          <target state="translated">删除现在未被跟踪的子模块文件。</target>
        </trans-unit>
        <trans-unit id="6a1e5a18768e5ee86609c2887a160c28a23f9af9" translate="yes" xml:space="preserve">
          <source>Delete the relevant line from the .gitmodules file:</source>
          <target state="translated">删除.gitmodules文件中的相关行。</target>
        </trans-unit>
        <trans-unit id="fbfcbc9b0c44d9483f1dcc147e847a0cb6588380" translate="yes" xml:space="preserve">
          <source>Delete the relevant section from .git/config</source>
          <target state="translated">删除.gitconfig中的相关部分。</target>
        </trans-unit>
        <trans-unit id="51a16c4540e80245374ed29ce8500a4673d30257" translate="yes" xml:space="preserve">
          <source>Delete the relevant section from &lt;code&gt;.git/config&lt;/code&gt;.</source>
          <target state="translated">从 &lt;code&gt;.git/config&lt;/code&gt; 中删除相关部分。</target>
        </trans-unit>
        <trans-unit id="dfea2604ab2ac62ffda9e7aceae892ee4794dc80" translate="yes" xml:space="preserve">
          <source>Delete the relevant section from the &lt;code&gt;.gitmodules&lt;/code&gt; file.</source>
          <target state="translated">从 &lt;code&gt;.gitmodules&lt;/code&gt; 文件中删除相关部分。</target>
        </trans-unit>
        <trans-unit id="29c3105e21ac6e88dacf4911f8ffbeec430aa89e" translate="yes" xml:space="preserve">
          <source>Delete unused files:</source>
          <target state="translated">删除未使用的文件。</target>
        </trans-unit>
        <trans-unit id="62700a7a416a31504d7e646aee6bf8684aedf1f1" translate="yes" xml:space="preserve">
          <source>Do &lt;code&gt;rm -rf .git/modules/path_to_submodule&lt;/code&gt;</source>
          <target state="translated">做 &lt;code&gt;rm -rf .git/modules/path_to_submodule&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="b32ef340ea4702fd5f41dbe4001671d76174ef71" translate="yes" xml:space="preserve">
          <source>Explanation</source>
          <target state="translated">Explanation</target>
        </trans-unit>
        <trans-unit id="f997879d5d21701a4d5f702a7ece2ea818b0d8e7" translate="yes" xml:space="preserve">
          <source>FYI you probably guessed it: &lt;a href=&quot;https://github.com/hilbix/&quot;&gt;hilbix&lt;/a&gt; is my GitHub account.</source>
          <target state="translated">仅供参考，您可能会猜到： &lt;a href=&quot;https://github.com/hilbix/&quot;&gt;hilbix&lt;/a&gt;是我的GitHub帐户。</target>
        </trans-unit>
        <trans-unit id="78809aa187b9eddc5af4246fb332d13bee6ab0ff" translate="yes" xml:space="preserve">
          <source>Fail if the current work tree contains modifications unless forced.</source>
          <target state="translated">如果当前工作树包含修改,则失败,除非强制执行。</target>
        </trans-unit>
        <trans-unit id="4c1a503f73f8e093aef972d62aecd04aa4fe3052" translate="yes" xml:space="preserve">
          <source>For old versions of git (circa ~1.8.5) use:</source>
          <target state="translated">对于老版本的git(约1.8.5版本),请使用。</target>
        </trans-unit>
        <trans-unit id="dc74bf328d942c8a3d1b6a29d937e5fc3e7a9b51" translate="yes" xml:space="preserve">
          <source>For the benefit of the reader, this here tries to sum it up and give a step-by-step guide on how to do it if things do not work as expected.  Following is the &lt;strong&gt;tested and safe way&lt;/strong&gt; for &lt;code&gt;git&lt;/code&gt; version &lt;code&gt;2.17&lt;/code&gt; and above &lt;strong&gt;to get rid of a submodule&lt;/strong&gt;:</source>
          <target state="translated">为了读者的利益，这里尝试对它进行总结，并逐步指导如何在无法正常工作的情况下进行操作。 以下是 &lt;code&gt;git&lt;/code&gt; 版本 &lt;code&gt;2.17&lt;/code&gt; 及更高版本&lt;strong&gt;摆脱子模块&lt;/strong&gt;的&lt;strong&gt;经过测试且安全的方法&lt;/strong&gt; ：</target>
        </trans-unit>
        <trans-unit id="5fc8ccd64556db2c1ca7c48a472d9aef3748b47b" translate="yes" xml:space="preserve">
          <source>For this, most answers suggest using &lt;code&gt;git submodule deinit&lt;/code&gt;. I find it more explicit and less confusing to use &lt;code&gt;git config -f .git/config --remove-section&lt;/code&gt;. According to the &lt;a href=&quot;https://git-scm.com/docs/git-submodule&quot;&gt;git-submodule documentation&lt;/a&gt;, &lt;code&gt;git deinit&lt;/code&gt;:</source>
          <target state="translated">为此，大多数答案建议使用 &lt;code&gt;git submodule deinit&lt;/code&gt; 。 我发现使用 &lt;code&gt;git config -f .git/config --remove-section&lt;/code&gt; 更加明确和混乱。 根据&lt;a href=&quot;https://git-scm.com/docs/git-submodule&quot;&gt;git-submodule文档&lt;/a&gt; ， &lt;code&gt;git deinit&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="25d21c4ba0be8d54505fc4fc64a9c1a452c8b3ae" translate="yes" xml:space="preserve">
          <source>From &lt;a href=&quot;https://git-scm.com/docs/git-submodule#git-submodule-deinit&quot;&gt;git docs&lt;/a&gt;:</source>
          <target state="translated">从&lt;a href=&quot;https://git-scm.com/docs/git-submodule#git-submodule-deinit&quot;&gt;git docs&lt;/a&gt; ：</target>
        </trans-unit>
        <trans-unit id="497761ef6cf11e80b06fa91d23a87e5980756bab" translate="yes" xml:space="preserve">
          <source>Help those users by providing a '&lt;strong&gt;&lt;code&gt;deinit&lt;/code&gt;&lt;/strong&gt;' command.</source>
          <target state="translated">通过提供&amp;ldquo; &lt;strong&gt; &lt;code&gt;deinit&lt;/code&gt; &lt;/strong&gt; &amp;rdquo;命令来帮助那些用户。</target>
        </trans-unit>
        <trans-unit id="55d1b528fd36bb87622cfda7fa67d527253631cc" translate="yes" xml:space="preserve">
          <source>Here are the 4 steps that I found necessary or useful (important ones first):</source>
          <target state="translated">以下是我觉得有必要或有用的4个步骤(重要的先说说)。</target>
        </trans-unit>
        <trans-unit id="cf9c0a6a5ddd62dcd8d1f5fdd899db98657132c7" translate="yes" xml:space="preserve">
          <source>Here is what I did :</source>
          <target state="translated">我是这样做的。</target>
        </trans-unit>
        <trans-unit id="765108d3c3a16b0ea93f264353cf3253ae6aad85" translate="yes" xml:space="preserve">
          <source>How do I remove a Git submodule?</source>
          <target state="translated">如何删除一个Git子模块?</target>
        </trans-unit>
        <trans-unit id="8f261ccf8b516deafc68ea6154e6f9fac50dc5ad" translate="yes" xml:space="preserve">
          <source>How do I remove a submodule</source>
          <target state="translated">如何删除一个子模块</target>
        </trans-unit>
        <trans-unit id="50c6462f090c77763c128a0c36efcefc6c304783" translate="yes" xml:space="preserve">
          <source>However if you removed the cached directory, both different checkouts will stumble upon each other, because you will not use the &lt;code&gt;--name&lt;/code&gt; options, right?  So each time you do the checkout you perhaps have to remove the &lt;code&gt;.git/modules/&amp;lt;module&amp;gt;/&lt;/code&gt; directory again and again.  This is extremely cumbersome and makes it hard to use something like &lt;code&gt;git bisect&lt;/code&gt;.</source>
          <target state="translated">但是，如果删除了缓存的目录，则两个不同的检出都将相互碰到，因为您将不会使用 &lt;code&gt;--name&lt;/code&gt; 选项，对吗？ 因此，每次执行结帐操作时，您可能不得不一次又一次删除 &lt;code&gt;.git/modules/&amp;lt;module&amp;gt;/&lt;/code&gt; 目录。 这非常麻烦，并且很难使用 &lt;code&gt;git bisect&lt;/code&gt; 之类的东西。</target>
        </trans-unit>
        <trans-unit id="53aab762c31e6f4ae6d674356840ca0ce7056c02" translate="yes" xml:space="preserve">
          <source>I found &lt;code&gt;deinit&lt;/code&gt; works good for me:</source>
          <target state="translated">我发现 &lt;code&gt;deinit&lt;/code&gt; 对我有用 ：</target>
        </trans-unit>
        <trans-unit id="860bf7d1aa2ed8627981b87e00d3554e84998cec" translate="yes" xml:space="preserve">
          <source>I had to take John Douthat's steps one step further and &lt;code&gt;cd&lt;/code&gt; into the submodule's directory, and then remove the Git repository:</source>
          <target state="translated">我必须进一步执行John Douthat的步骤，并进入子模块的目录，然后删除Git存储库：</target>
        </trans-unit>
        <trans-unit id="015a7a4c095a9a2c77ccb5195c738f2b21bbae76" translate="yes" xml:space="preserve">
          <source>I just found the .submodule (forgot exact name) hidden file, it has a list... you can erase them individually that way. I just had one, so I deleted it. Simple, but it might mess up Git, since I don't know if anything's attached to the submodule. Seems ok so far, aside from libetpan's usual upgrade issue, but that's (hopefully) unrelated.</source>
          <target state="translated">我刚刚找到了.子模块(具体名字忘了)的隐藏文件,里面有一个列表...........你可以把它们单独删掉,这样就可以了。我刚刚有一个,所以我把它删了。很简单,但可能会把Git弄得一团糟,因为我不知道这个子模块是否有什么东西被附加到了子模块上。目前看来还行,除了libetpan通常的升级问题,但那是(希望)无关的。</target>
        </trans-unit>
        <trans-unit id="a6afd773ce6f263c31511a06f44b6de5f6167e18" translate="yes" xml:space="preserve">
          <source>I recently find out a git project which include many useful git related command: &lt;a href=&quot;https://github.com/visionmedia/git-extras&quot;&gt;https://github.com/visionmedia/git-extras&lt;/a&gt;</source>
          <target state="translated">我最近发现了一个git项目，其中包括许多与git相关的有用命令： &lt;a href=&quot;https://github.com/visionmedia/git-extras&quot;&gt;https&lt;/a&gt; : //github.com/visionmedia/git-extras</target>
        </trans-unit>
        <trans-unit id="6387706717b8e1c3e0e13b7909685148dd6383e5" translate="yes" xml:space="preserve">
          <source>I think there is a very dangerous part in the documentation of &lt;code&gt;git submodule&lt;/code&gt;.
  It recommends to remove &lt;code&gt;$GIT_DIR/modules/&amp;lt;name&amp;gt;/&lt;/code&gt; yourself.
  &lt;strong&gt;In my understanding this is not only plain wrong, it is extremely dangerous and provokes major headaches in future!&lt;/strong&gt;  See below.</source>
          <target state="translated">我认为 &lt;code&gt;git submodule&lt;/code&gt; 的文档中有一个非常危险的部分。 建议您自己删除 &lt;code&gt;$GIT_DIR/modules/&amp;lt;name&amp;gt;/&lt;/code&gt; 。 &lt;strong&gt;以我的理解，这不仅是错误的，而且是非常危险的，并且在将来引起了很多头痛！&lt;/strong&gt; 见下文。</target>
        </trans-unit>
        <trans-unit id="89842fa02734c275d35ae3b8be04b64bb240e814" translate="yes" xml:space="preserve">
          <source>I've created a bash script to ease the removal process. It also checks whether there are changes in the repo left unsaved and asks for confirmation. 
It has been tested on &lt;code&gt;os x&lt;/code&gt; would be interesting to know if it works as is on common linux distros as well:</source>
          <target state="translated">我创建了一个bash脚本来简化删除过程。 它还检查未保存的回购中是否有更改，并要求确认。 它已经在 &lt;code&gt;os x&lt;/code&gt; 上进行了测试，很有趣的是知道它是否也可以在普通的Linux发行版上正常工作：</target>
        </trans-unit>
        <trans-unit id="c69ba17ec241247896c43f8648b114e49f41ff06" translate="yes" xml:space="preserve">
          <source>If git complains about some leftovers, &lt;code&gt;git status&lt;/code&gt; and &lt;code&gt;git clean -ixfd&lt;/code&gt; is your friend</source>
          <target state="translated">如果git抱怨剩余物，则 &lt;code&gt;git status&lt;/code&gt; 和 &lt;code&gt;git clean -ixfd&lt;/code&gt; 是您的朋友</target>
        </trans-unit>
        <trans-unit id="63ee2337454055e2c5a1df3a99c3ce46401a6507" translate="yes" xml:space="preserve">
          <source>If git complains about unsaved stuff, commit and push it somewhere safe.</source>
          <target state="translated">如果git抱怨未保存的东西,提交并推送到安全的地方。</target>
        </trans-unit>
        <trans-unit id="3f3ed29bdef5da858818084524bd6488f2ea957a" translate="yes" xml:space="preserve">
          <source>If on Windows ignore the first line and replace &lt;code&gt;&quot;$submodule&quot;&lt;/code&gt; with the Windows way of a properly specified path to the submodule.  (I am not Windows)</source>
          <target state="translated">如果在Windows上，则忽略第一行，并使用Windows的正确指定子模块路径的方式替换 &lt;code&gt;&quot;$submodule&quot;&lt;/code&gt; 。 （我不是Windows）</target>
        </trans-unit>
        <trans-unit id="831eb64e8247de1446e4cb7a4cc379e459ac5988" translate="yes" xml:space="preserve">
          <source>If the submodule was &lt;em&gt;accidentally&lt;/em&gt; added because you added, committed and pushed a folder that was already a Git repository (contained &lt;code&gt;.git&lt;/code&gt;), you won&amp;rsquo;t have a &lt;code&gt;.gitmodules&lt;/code&gt; file to edit, or anything in &lt;code&gt;.git/config&lt;/code&gt;. &lt;a href=&quot;http://humansky.com/2011/12/accidentally-adding-a-git-submodule/&quot;&gt;In this case all you need&lt;/a&gt; is :</source>
          <target state="translated">如果由于添加，提交并推送了已经是Git存储库（包含 &lt;code&gt;.git&lt;/code&gt; ）的文件夹而&lt;em&gt;意外&lt;/em&gt;添加了子模块，则将没有 &lt;code&gt;.gitmodules&lt;/code&gt; 文件或 &lt;code&gt;.git/config&lt;/code&gt; 中的任何内容。 &lt;a href=&quot;http://humansky.com/2011/12/accidentally-adding-a-git-submodule/&quot;&gt;在这种情况下，您需要做的&lt;/a&gt;是：</target>
        </trans-unit>
        <trans-unit id="15834ba1f4b1b4ac03270dfe95e309670b97a32b" translate="yes" xml:space="preserve">
          <source>If this does not work for you, see below.</source>
          <target state="translated">如果这对你不适用,请看下文。</target>
        </trans-unit>
        <trans-unit id="530c66395f376e61c9a49da5c6b39d22d6fa771c" translate="yes" xml:space="preserve">
          <source>If this fails</source>
          <target state="translated">如果失败了</target>
        </trans-unit>
        <trans-unit id="25df07c5ef99d18de088a5274381d9f236746a74" translate="yes" xml:space="preserve">
          <source>If you forget that last step, and try to add what was a submodule as a regular directory, you would get error message like:</source>
          <target state="translated">如果你忘记了最后这一步,并试图将原来的子模块添加为一个常规目录,你会得到类似于这样的错误信息。</target>
        </trans-unit>
        <trans-unit id="2358adfd9cc20e715b8926c85ec13e8289fae8a5" translate="yes" xml:space="preserve">
          <source>If you have just added the submodule, and for example, you simply added the wrong submodule or you added it to the wrong place, simply do &lt;code&gt;git stash&lt;/code&gt; then delete the folder. This is assuming that adding the submodule is the only thing you did in the recent repo.</source>
          <target state="translated">如果您刚刚添加了子模块，例如，您只是添加了错误的子模块或将其添加到错误的位置，只需执行 &lt;code&gt;git stash&lt;/code&gt; 然后删除文件夹。 这是假设添加子模块是您在最近的存储库中所做的唯一一件事。</target>
        </trans-unit>
        <trans-unit id="d2e51f4f83fc5dbf580e4b6e554dde8ca0e0e720" translate="yes" xml:space="preserve">
          <source>If you'll write on git's mailing list probably someone will do a shell script for you.</source>
          <target state="translated">如果你在git的邮件列表中写,可能有人会给你做一个shell脚本。</target>
        </trans-unit>
        <trans-unit id="3483406dcae7d71a00f29eb55a64a55412e5b296" translate="yes" xml:space="preserve">
          <source>If your machine is too old there is no &lt;code&gt;submodule deinit&lt;/code&gt; in your &lt;code&gt;git&lt;/code&gt;.  If you do not want (or can) update your &lt;code&gt;git&lt;/code&gt;, then just use another machine with a newer &lt;code&gt;git&lt;/code&gt;!  &lt;code&gt;git&lt;/code&gt; is meant to be fully distributed, so you can use another &lt;code&gt;git&lt;/code&gt; to get the job done:</source>
          <target state="translated">如果您的机器太旧，则 &lt;code&gt;git&lt;/code&gt; 中没有 &lt;code&gt;submodule deinit&lt;/code&gt; 。 如果您不想（或可以）更新您的 &lt;code&gt;git&lt;/code&gt; ，那么只需使用另一台具有较新 &lt;code&gt;git&lt;/code&gt; 的机器！ &lt;code&gt;git&lt;/code&gt; 是要完全分发的，因此您可以使用另一个 &lt;code&gt;git&lt;/code&gt; 来完成工作：</target>
        </trans-unit>
        <trans-unit id="e52bb58a973aad3c8d92637982bc99be4938b956" translate="yes" xml:space="preserve">
          <source>In addition to the recommendations, I also had to &lt;code&gt;rm -Rf .git/modules/path/to/submodule&lt;/code&gt; to be able to add a new submodule with the same name (in my case I was replacing a fork with the original)</source>
          <target state="translated">除了建议之外，我还必须使用 &lt;code&gt;rm -Rf .git/modules/path/to/submodule&lt;/code&gt; 才能添加具有相同名称的新子模块（在我的情况下，我将叉子替换为原始名称）</target>
        </trans-unit>
        <trans-unit id="7779d279428a771a1db5928faf3789b7b21461dc" translate="yes" xml:space="preserve">
          <source>In case you need to do it in &lt;strong&gt;one line command&lt;/strong&gt; with bash script as below:</source>
          <target state="translated">如果您需要使用bash脚本在&lt;strong&gt;一行命令中执行&lt;/strong&gt;以下操作：</target>
        </trans-unit>
        <trans-unit id="ac8eed6985381ac4f5ec9d9169a82442f3ebdd9b" translate="yes" xml:space="preserve">
          <source>In latest git just 4 operation is needed to remove the git submodule.</source>
          <target state="translated">在最新的git中,只需要4次操作就可以删除git子模块。</target>
        </trans-unit>
        <trans-unit id="a79274d6836343740dfbb485e2f71c2afdbfd0cd" translate="yes" xml:space="preserve">
          <source>Install it and type :</source>
          <target state="translated">安装好了,就可以进行类型化操作了。</target>
        </trans-unit>
        <trans-unit id="beb8e0516d42815bd918ce3bb6abe132187c49bc" translate="yes" xml:space="preserve">
          <source>It is a call to a C function.</source>
          <target state="translated">它是对C函数的一个调用。</target>
        </trans-unit>
        <trans-unit id="b306748ea8f10ffc7822981d50e5d68932480da1" translate="yes" xml:space="preserve">
          <source>It is a good idea to do &lt;code&gt;git rebase HEAD&lt;/code&gt; first and &lt;code&gt;git commit&lt;/code&gt;
at the end, if you put this in a script.</source>
          <target state="translated">如果将其放在脚本中，最好先执行 &lt;code&gt;git rebase HEAD&lt;/code&gt; 并最后执行 &lt;code&gt;git commit&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="74b86000d17877d210cbb561f5db624a7d0d2cd7" translate="yes" xml:space="preserve">
          <source>It's easy if you start to become accustomed to powerful &lt;code&gt;git&lt;/code&gt; features like this.</source>
          <target state="translated">如果您开始习惯这种强大的 &lt;code&gt;git&lt;/code&gt; 功能，这很容易。</target>
        </trans-unit>
        <trans-unit id="c9bba89555d0112d1cb8f2952c0f07cfbc5b5ebf" translate="yes" xml:space="preserve">
          <source>Just a note. Since git 1.8.5.2, two commands will do:</source>
          <target state="translated">只需要注意一下。自从git 1.8.5.2之后,两个命令就可以了。</target>
        </trans-unit>
        <trans-unit id="2fe657eb0e4abbfb951e77f1649241b3c367fb35" translate="yes" xml:space="preserve">
          <source>Just to clarify, &lt;code&gt;the_submodule&lt;/code&gt; is the relative path of the submodule inside the project. For example, it's &lt;code&gt;subdir/my_submodule&lt;/code&gt; if the submodule is inside a subdirectory &lt;code&gt;subdir&lt;/code&gt;.</source>
          <target state="translated">为了明确 &lt;code&gt;the_submodule&lt;/code&gt; ， the_submodule是项目内部子模块的相对路径。 例如，如果子模块位于子目录 &lt;code&gt;subdir&lt;/code&gt; 中, &lt;code&gt;subdir/my_submodule&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6d8e4195bff1e4526d17a64f16f4449c001ff7c3" translate="yes" xml:space="preserve">
          <source>Last but not least, if you don't  &lt;code&gt;git commit&lt;/code&gt;, you will/may get an error when doing &lt;code&gt;git submodule summary&lt;/code&gt; (as of git 2.7):</source>
          <target state="translated">最后但并非最不重要的一点是，如果您不进行 &lt;code&gt;git commit&lt;/code&gt; ，则在执行 &lt;code&gt;git submodule summary&lt;/code&gt; （自git 2.7起）时/可能会出错：</target>
        </trans-unit>
        <trans-unit id="ea08f333ccafd808414fb3cfbebb5465d8af0771" translate="yes" xml:space="preserve">
          <source>Let &quot;&lt;code&gt;git rm&lt;/code&gt;&quot; help the user by not only removing the submodule from the work tree but by also removing the &quot;&lt;code&gt;submodule.&amp;lt;submodule name&amp;gt;&lt;/code&gt;&quot; section from the &lt;code&gt;.gitmodules&lt;/code&gt; file and stage both.</source>
          <target state="translated">让&amp;ldquo; &lt;code&gt;git rm&lt;/code&gt; &amp;rdquo;不仅通过从工作树中删除子模块，而且还从 &lt;code&gt;.gitmodules&lt;/code&gt; 文件中删除&amp;ldquo; &lt;code&gt;submodule.&amp;lt;submodule name&amp;gt;&lt;/code&gt; &amp;rdquo;部分并同时上演两个步骤来为用户提供帮助。</target>
        </trans-unit>
        <trans-unit id="9efaf3094c5ff7e5ecd0c6fb08b5f4842538a677" translate="yes" xml:space="preserve">
          <source>No options.  Nothing dangerous.  And do not even consider doing more!</source>
          <target state="translated">没有选择。没有什么危险的。甚至不要考虑做更多的事情!</target>
        </trans-unit>
        <trans-unit id="da7038b6159ab37164aeb7442907c881108aff7e" translate="yes" xml:space="preserve">
          <source>Note that</source>
          <target state="translated">注意到</target>
        </trans-unit>
        <trans-unit id="71305b94bd982a19edb0a9d099d629b36b66081c" translate="yes" xml:space="preserve">
          <source>Note that if you cannot &lt;code&gt;ssh&lt;/code&gt; in, there are trainloads of ways to transport &lt;code&gt;git&lt;/code&gt; repositories.  You can copy your worktree on some USB stick (including the &lt;code&gt;.git&lt;/code&gt; directory), and clone from the stick.  Clone the copy, just to get things in a clean fashion again.  This might be a PITA, in case your submodules are not accessible from othermachine directly.  But there is a solution for this, too:</source>
          <target state="translated">请注意，如果您不能使用 &lt;code&gt;ssh&lt;/code&gt; ，则有大量的方法来传输 &lt;code&gt;git&lt;/code&gt; 存储库。 您可以将工作树复制到某些USB记忆棒（包括 &lt;code&gt;.git&lt;/code&gt; 目录）上，然后从记忆棒进行克隆。 克隆副本，只是为了以一种干净的方式再次获取内容。 如果您的子模块不能直接从其他计算机访问，则可能是PITA。 但是也有一个解决方案：</target>
        </trans-unit>
        <trans-unit id="f73de20c626e01db20a21e29eb576ab8a7c5dbc6" translate="yes" xml:space="preserve">
          <source>Note: since Git 2.17 (Q2 2018), git submodule deinit is no longer a shell script.</source>
          <target state="translated">注:自Git 2.17(2018年Q2)以来,git子模块deinit不再是shell脚本。</target>
        </trans-unit>
        <trans-unit id="29ccc2aa6e79b7e8592eae231fb1715b934d0f3e" translate="yes" xml:space="preserve">
          <source>Noticed nobody posted manual erasing, so added</source>
          <target state="translated">注意到没有人贴出手动擦除,所以添加了</target>
        </trans-unit>
        <trans-unit id="24331d380c4850094ac60dc4967aa72e501c89ca" translate="yes" xml:space="preserve">
          <source>Now cleanup things, until &lt;code&gt;git status&lt;/code&gt; is clean again.  You are able to do so, because you have had it clean before, thanks to the first step.</source>
          <target state="translated">现在清理东西，直到 &lt;code&gt;git status&lt;/code&gt; 再次干净。 您可以这样做，因为由于第一步，您之前已经将它清理干净。</target>
        </trans-unit>
        <trans-unit id="4b455356f9aebbd6e08e4d490aecff866a4f38a8" translate="yes" xml:space="preserve">
          <source>Now do the submodule stuff</source>
          <target state="translated">现在做子模块的事情</target>
        </trans-unit>
        <trans-unit id="551fa99714c5e4eb749f5a69b500d469323b45b9" translate="yes" xml:space="preserve">
          <source>Perhaps there are more ways to fail I am not aware of (I am just some &lt;code&gt;git&lt;/code&gt; power-user.)</source>
          <target state="translated">也许还有更多我不知道的失败方法（我只是一些 &lt;code&gt;git&lt;/code&gt; power-user。）</target>
        </trans-unit>
        <trans-unit id="fb5875b7fb04736c05b7eaa5c63ab6e73168f6c6" translate="yes" xml:space="preserve">
          <source>Possible fixes follow.</source>
          <target state="translated">可能的修复方法如下。</target>
        </trans-unit>
        <trans-unit id="512a47cd62f589f1f1588966b448ad0fa8c1f9bd" translate="yes" xml:space="preserve">
          <source>Probably people want to remove the cached repository, because they are afraid to run into a problem later.  This is true, but running into that &quot;problem&quot; is the correct way to solve it!  Because the fix is easy, and done right you will be able to live happily ever after.  This avoids more cumbersome trouble than when you remove the data yourself.</source>
          <target state="translated">可能大家都想把缓存的版本库删除,因为怕以后遇到问题。这句话是没错,但是碰到那个 &quot;问题 &quot;才是正确的解决方法! 因为解决方法很简单,只要做对了,你就能过上幸福的生活。这样比你自己去掉数据的时候,避免了更多的繁琐的麻烦。</target>
        </trans-unit>
        <trans-unit id="6450755e9b2094889e9a11aab2fd243d8dd57e03" translate="yes" xml:space="preserve">
          <source>Put that in your git config, and then you can do: &lt;code&gt;git rms path/to/submodule&lt;/code&gt;</source>
          <target state="translated">将其放在您的git配置中，然后您可以执行以下操作： &lt;code&gt;git rms path/to/submodule&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f8325bd509f9d03a3fed169c6a3c996dda82f932" translate="yes" xml:space="preserve">
          <source>Remove config entries:</source>
          <target state="translated">移除配置项。</target>
        </trans-unit>
        <trans-unit id="c2e7934f6d851cf78cd268e754efa79a5f69d90e" translate="yes" xml:space="preserve">
          <source>Remove corresponding entry in  &lt;code&gt;.gitmodules&lt;/code&gt;</source>
          <target state="translated">删除 &lt;code&gt;.gitmodules&lt;/code&gt; 中的相应条目</target>
        </trans-unit>
        <trans-unit id="52edaaa65838b9618a0c45f5344063667c5304f4" translate="yes" xml:space="preserve">
          <source>Remove directory from index:</source>
          <target state="translated">从索引中删除目录。</target>
        </trans-unit>
        <trans-unit id="50152eefea72779f07e643f78685e467a7b57e56" translate="yes" xml:space="preserve">
          <source>Remove the corresponding entry in  &lt;code&gt;.gitmodules&lt;/code&gt; file. Entry might be like mentioned below</source>
          <target state="translated">删除 &lt;code&gt;.gitmodules&lt;/code&gt; 文件中的相应条目。 条目可能如下所述</target>
        </trans-unit>
        <trans-unit id="90cea0f669d7575f5dbf4d99f3d77288b6929621" translate="yes" xml:space="preserve">
          <source>Remove the corresponding entry in &lt;code&gt;.git/config&lt;/code&gt; file. Entry might be like mentioned below</source>
          <target state="translated">删除 &lt;code&gt;.git/config&lt;/code&gt; 文件中的相应条目。 条目可能如下所述</target>
        </trans-unit>
        <trans-unit id="9bf85edce9928368050f04396df441a974e0df09" translate="yes" xml:space="preserve">
          <source>Remove the section from &lt;code&gt;.gitmodules&lt;/code&gt;</source>
          <target state="translated">从 &lt;code&gt;.gitmodules&lt;/code&gt; 中删除该部分</target>
        </trans-unit>
        <trans-unit id="fea3115915a43e8381b5ea1504502fbaec6ae450" translate="yes" xml:space="preserve">
          <source>Remove the submodule directory &lt;code&gt;git rm --cached &amp;lt;path_to_submodule&amp;gt;&lt;/code&gt;</source>
          <target state="translated">删除子模块目录 &lt;code&gt;git rm --cached &amp;lt;path_to_submodule&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2fe024baab888ced8538357fa9639436e266a39a" translate="yes" xml:space="preserve">
          <source>Remove the submodule directory &lt;code&gt;git rm --cached &amp;lt;path_to_submodule&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">删除子模块目录 &lt;code&gt;git rm --cached &amp;lt;path_to_submodule&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="69c0d47518c8eba1d94b84e1b1c7fe35090d69e9" translate="yes" xml:space="preserve">
          <source>Remove the submodule files from the working tree and index:</source>
          <target state="translated">从工作树和索引中删除子模块文件。</target>
        </trans-unit>
        <trans-unit id="e528120a26c9506a34107af57b5db40ff39a9cee" translate="yes" xml:space="preserve">
          <source>Remove the submodule's &lt;code&gt;.git&lt;/code&gt; directory:</source>
          <target state="translated">删除子模块的 &lt;code&gt;.git&lt;/code&gt; 目录：</target>
        </trans-unit>
        <trans-unit id="4c539c37dcddedb6eaa766dd31e83115153d8021" translate="yes" xml:space="preserve">
          <source>Removing git submodule</source>
          <target state="translated">移除git子模块</target>
        </trans-unit>
        <trans-unit id="247f6e4943c76c92b5c6c8d51b7623da37673dc0" translate="yes" xml:space="preserve">
          <source>Run:</source>
          <target state="translated">Run:</target>
        </trans-unit>
        <trans-unit id="92c7ed21c91bb0dc58af31a7a7b3156b9c9355d2" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/git/git/commit/2e612731b55f1a83fb5b7f4ecb9391f0cba63cb2&quot;&gt;commit 2e61273&lt;/a&gt;, &lt;a href=&quot;https://github.com/git/git/commit/13424764db3273091d136bd470cf14852255c98c&quot;&gt;commit 1342476&lt;/a&gt; (14 Jan 2018) by &lt;a href=&quot;https://github.com/pratham-pc&quot;&gt;Prathamesh Chavan (&lt;code&gt;pratham-pc&lt;/code&gt;)&lt;/a&gt;.</source>
          <target state="translated">参见&lt;a href=&quot;https://github.com/pratham-pc&quot;&gt;Prathamesh Chavan（ &lt;code&gt;pratham-pc&lt;/code&gt; ）的&lt;/a&gt; &lt;a href=&quot;https://github.com/git/git/commit/2e612731b55f1a83fb5b7f4ecb9391f0cba63cb2&quot;&gt;commit 2e61273&lt;/a&gt;和&lt;a href=&quot;https://github.com/git/git/commit/13424764db3273091d136bd470cf14852255c98c&quot;&gt;commit 1342476&lt;/a&gt; （2018年1月14日） 。</target>
        </trans-unit>
        <trans-unit id="2eb27c67a5a0f682799c799740fd38e1fc56c1e2" translate="yes" xml:space="preserve">
          <source>See also : &lt;a href=&quot;https://git.wiki.kernel.org/index.php/GitSubmoduleTutorial#Removal&quot;&gt;Alternative guide lines&lt;/a&gt;</source>
          <target state="translated">另请参阅： &lt;a href=&quot;https://git.wiki.kernel.org/index.php/GitSubmoduleTutorial#Removal&quot;&gt;替代指南&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f86a264719e3e3b19e7fda40b65ea0f4de2b04fc" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;path_to_submodule&lt;/code&gt; var (no trailing slash):</source>
          <target state="translated">设置 &lt;code&gt;path_to_submodule&lt;/code&gt; var（不带斜杠）：</target>
        </trans-unit>
        <trans-unit id="ac5e420135368e6e8685950b68810f791c6d3a36" translate="yes" xml:space="preserve">
          <source>Set path_to_submodule var (no trailing slash):</source>
          <target state="translated">设置 path_to_submodule var (没有斜杠)。</target>
        </trans-unit>
        <trans-unit id="c4c57eaf6511aa0b1778e9f337c36953c575794b" translate="yes" xml:space="preserve">
          <source>Since &lt;a href=&quot;https://github.com/git/git/blob/v1.8.3-rc0/Documentation/RelNotes/1.8.3.txt#L135-L137&quot;&gt;git1.8.3 (April 22d, 2013)&lt;/a&gt;:</source>
          <target state="translated">自&lt;a href=&quot;https://github.com/git/git/blob/v1.8.3-rc0/Documentation/RelNotes/1.8.3.txt#L135-L137&quot;&gt;git1.8.3（2013年4月22日）&lt;/a&gt; ：</target>
        </trans-unit>
        <trans-unit id="7aea01fb7e0a326873472417fd77f1cf9f6130f8" translate="yes" xml:space="preserve">
          <source>Since git1.8.5, the &lt;code&gt;git rm&lt;/code&gt; takes &lt;em&gt;also&lt;/em&gt; care of the:</source>
          <target state="translated">从git1.8.5开始， &lt;code&gt;git rm&lt;/code&gt; &lt;em&gt;还&lt;/em&gt;负责：</target>
        </trans-unit>
        <trans-unit id="593dfbffe2738dac23aa7df5ae761789570f6443" translate="yes" xml:space="preserve">
          <source>So I understand complaints of people, saying &quot;Why doesn't do &lt;code&gt;git&lt;/code&gt; the obvious thing for me&quot;.  This is because &quot;obvious&quot; here depends from the point of view.  Reliability in each and every situation is far more important.  Hence what's obvious for you often is not the right thing in all possible technical situations.  Please remember that:  AFAICS &lt;code&gt;git&lt;/code&gt; follows the technical path, not the social one.  (Hence the clever name: git)</source>
          <target state="translated">所以我理解人们的抱怨，说：&amp;ldquo;为什么不对我来说做显而易见的事情&amp;rdquo;。 这是因为这里的&amp;ldquo;明显&amp;rdquo;取决于观点。 在每种情况下的可靠性都更为重要。 因此，在所有可能的技术情况下，通常对您而言显而易见的事情并不是正确的选择。 请记住：AFAICS &lt;code&gt;git&lt;/code&gt; 遵循技术路线，而不是社交路线。 （因此，聪明的名字是：git）</target>
        </trans-unit>
        <trans-unit id="32abb9915218927c05d7b7a046ed1e8d6ef4d76a" translate="yes" xml:space="preserve">
          <source>So if you once delete a submodule with this method and re-add them again, it will not be possible because repository already been corrupted.</source>
          <target state="translated">所以如果你用这个方法删除一次子模块,再重新添加它们,就不可能了,因为版本库已经被破坏了。</target>
        </trans-unit>
        <trans-unit id="9c7973d0b379489c167109c1ef5e5b26fe7165e5" translate="yes" xml:space="preserve">
          <source>So if you wish to remove the modules, but be able to restore it quickly,
then do just this:</source>
          <target state="translated">所以,如果你想删除模块,但又能快速恢复,那就这样做吧。</target>
        </trans-unit>
        <trans-unit id="c0f93fbdf8917be6789844051b680d64104e83ef" translate="yes" xml:space="preserve">
          <source>So not only most other answers fall into this dangerous trap, &lt;a href=&quot;https://github.com/tj/git-extras/issues/799&quot;&gt;even very popular &lt;code&gt;git&lt;/code&gt; extensions had this bug&lt;/a&gt; (&lt;a href=&quot;https://github.com/tj/git-extras/pull/801&quot;&gt;it's now fixed there&lt;/a&gt;)!  So better keep your hands of the &lt;code&gt;.git/&lt;/code&gt; directory if you do not exactly, what you are doing!</source>
          <target state="translated">因此，不仅大多数其他答案都陷入了这一危险陷阱， &lt;a href=&quot;https://github.com/tj/git-extras/issues/799&quot;&gt;即使是非常流行的 &lt;code&gt;git&lt;/code&gt; 扩展也存在此错误&lt;/a&gt; （ &lt;a href=&quot;https://github.com/tj/git-extras/pull/801&quot;&gt;现已在此处修复&lt;/a&gt; ）！ 因此，如果您不完全了解自己在做什么，最好将其放在 &lt;code&gt;.git/&lt;/code&gt; 目录下！</target>
        </trans-unit>
        <trans-unit id="76e086d913d7417c384b06312a8fdea974faf301" translate="yes" xml:space="preserve">
          <source>So there is a very technical reason to keep this module directory as a placeholder.  People who recommend to remove something below &lt;code&gt;.git/modules/&lt;/code&gt; either do not know better or forget to tell you that this makes powerful features like &lt;code&gt;git bisect&lt;/code&gt; nearly impossible to use if this crosses such a submodule incompatibility.</source>
          <target state="translated">因此，将这个模块目录保留为占位符是非常技术性的原因。 建议删除 &lt;code&gt;.git/modules/&lt;/code&gt; 可能不太了解，或者忘记告诉您，这将导致像 &lt;code&gt;git bisect&lt;/code&gt; 这样的强大功能几乎无法使用，如果它跨越了此类子模块不兼容的情况。</target>
        </trans-unit>
        <trans-unit id="3b9cd30d73c1a5f6674e86a9e0989be9398677fd" translate="yes" xml:space="preserve">
          <source>Source: &lt;code&gt;git help submodules&lt;/code&gt;</source>
          <target state="translated">来源： &lt;code&gt;git help submodules&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="44a99fe5ccb53d1ad9da9430b7357dee83089a83" translate="yes" xml:space="preserve">
          <source>Stage changes &lt;code&gt;git add .gitmodules&lt;/code&gt;</source>
          <target state="translated">阶段更改 &lt;code&gt;git add .gitmodules&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a39381dcbab1341b838eeafda2a6d527a86141fc" translate="yes" xml:space="preserve">
          <source>Stage the &lt;code&gt;.gitmodules&lt;/code&gt; changes:</source>
          <target state="translated">&lt;code&gt;.gitmodules&lt;/code&gt; 更改：</target>
        </trans-unit>
        <trans-unit id="adb9fa34e4e0a154badd833b66c859d7244d3f02" translate="yes" xml:space="preserve">
          <source>Step 3 removes the section for &lt;code&gt;the_submodule&lt;/code&gt; in the file &lt;code&gt;.git/config&lt;/code&gt;. This should be done for completeness. (The entry may cause problems for older git versions, but I don't have one to test).</source>
          <target state="translated">步骤3在文件 &lt;code&gt;.git/config&lt;/code&gt; 中删除 &lt;code&gt;the_submodule&lt;/code&gt; 的部分。 为了完整起见，应该这样做。 （该条目可能会导致较旧的git版本出现问题，但我没有要测试的版本）。</target>
        </trans-unit>
        <trans-unit id="12b71c3e0fe5f7c0b8d17cc03186e281412da4a8" translate="yes" xml:space="preserve">
          <source>Summary</source>
          <target state="translated">Summary</target>
        </trans-unit>
        <trans-unit id="d14518d1477563720b992fbf4dcefd5f409c4826" translate="yes" xml:space="preserve">
          <source>Tested with Debian Buster &lt;code&gt;2.20.1&lt;/code&gt; and Ubuntu 18.04 &lt;code&gt;2.17.1&lt;/code&gt;.</source>
          <target state="translated">在Debian Buster &lt;code&gt;2.20.1&lt;/code&gt; 和Ubuntu 18.04 &lt;code&gt;2.17.1&lt;/code&gt; 上进行了测试 。</target>
        </trans-unit>
        <trans-unit id="1d704f866e17c2f392cd1986aece26173a4f8b8f" translate="yes" xml:space="preserve">
          <source>That will remove that directory stored in the index with a special mode &quot;160000&quot;, marking it as a submodule root directory.</source>
          <target state="translated">这将删除存储在索引中的那个目录,并以特殊模式 &quot;160000 &quot;标记为子模块根目录。</target>
        </trans-unit>
        <trans-unit id="24962f784414ddc6635805dc57d580cb79b2541f" translate="yes" xml:space="preserve">
          <source>That's it.</source>
          <target state="translated">就这样吧。</target>
        </trans-unit>
        <trans-unit id="95480d6c3828c85dd40b3f196be66d63de1eaa2b" translate="yes" xml:space="preserve">
          <source>Thats easy:</source>
          <target state="translated">这很简单。</target>
        </trans-unit>
        <trans-unit id="7d422cddfa6dd0924d16d922b712206343cb158b" translate="yes" xml:space="preserve">
          <source>The 3-steps removal process would then be:</source>
          <target state="translated">那么,这3个步骤的清除过程将是:</target>
        </trans-unit>
        <trans-unit id="6d715a96d41bcc4f42879f0e1e7e70118568f25a" translate="yes" xml:space="preserve">
          <source>The commands above may fail due to following:</source>
          <target state="translated">上述命令可能由于以下原因而失效。</target>
        </trans-unit>
        <trans-unit id="14ff80c43826dca01a461df75fc16f07233bf97e" translate="yes" xml:space="preserve">
          <source>The deletion process also uses &lt;code&gt;git rm&lt;/code&gt; (since git1.8.5 October 2013).</source>
          <target state="translated">删除过程也使用 &lt;code&gt;git rm&lt;/code&gt; （自git1.8.5（2013年10月起））。</target>
        </trans-unit>
        <trans-unit id="0a8b7fae183dbf60b87929d7bf3aa1719bcc54ea" translate="yes" xml:space="preserve">
          <source>The deletion removes the superproject's tracking data, which are both the gitlink entry and the section in the &lt;code&gt;.gitmodules&lt;/code&gt; file.</source>
          <target state="translated">删除操作将删除超级项目的跟踪数据，该数据既是gitlink条目，也是 &lt;code&gt;.gitmodules&lt;/code&gt; 文件中的部分。</target>
        </trans-unit>
        <trans-unit id="87899e148899ca0ff17d91b13eb3e19d96011a3b" translate="yes" xml:space="preserve">
          <source>The last line outputs following error:</source>
          <target state="translated">最后一行输出以下错误。</target>
        </trans-unit>
        <trans-unit id="c48018dec73cb0d3452d7bb06b1423b199193668" translate="yes" xml:space="preserve">
          <source>The majority of answers to this question are outdated, incomplete, or unnecessarily complex.</source>
          <target state="translated">这个问题的答案大多是过时的、不完整的或不必要的复杂。</target>
        </trans-unit>
        <trans-unit id="e00f28fbc3d55a4640f420ad9099d6639da494be" translate="yes" xml:space="preserve">
          <source>The submodule's working directory is removed from the file system, but the Git directory is kept around as it to make it possible to checkout past commits without requiring fetching from another repository.</source>
          <target state="translated">子模块的工作目录被从文件系统中删除,但Git目录被保留下来,因为这样可以在不需要从另一个仓库中提取过去的提交的情况下,查看过去的提交。</target>
        </trans-unit>
        <trans-unit id="11a69552b50cf6d380d20092704cd1871fc3a143" translate="yes" xml:space="preserve">
          <source>Then I could commit the files as a part of the parent Git repository without the old reference to a submodule.</source>
          <target state="translated">这样我就可以把这些文件作为父级 Git 仓库的一部分提交,而不需要旧的子模块引用。</target>
        </trans-unit>
        <trans-unit id="87eaf9cb0dc9221b0705a3c64911ebda6b424319" translate="yes" xml:space="preserve">
          <source>Then things are done. The submodule directory will be removed from your repo and still exist in your filesystem. You can then commit the change like: &lt;code&gt;git commit -am &quot;Remove the submodule&quot;&lt;/code&gt;.</source>
          <target state="translated">然后事情就完成了。 子模块目录将从您的存储库中删除，并且仍然存在于您的文件系统中。 然后，您可以像这样提交更改： &lt;code&gt;git commit -am &quot;Remove the submodule&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="93c968c4fdf875495af084a5662faf0bd3a0a0ea" translate="yes" xml:space="preserve">
          <source>There was no Porcelain way to say &quot;I no longer am interested in this submodule&quot;, once you express your interest in a submodule with &quot;&lt;code&gt;submodule init&lt;/code&gt;&quot;.</source>
          <target state="translated">一旦用&amp;ldquo; &lt;code&gt;submodule init&lt;/code&gt; &amp;rdquo;表达了对子模块的兴趣，就不会用瓷器的方式说&amp;ldquo;我对这个子模块不再感兴趣&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="38e1218090a99f970bcf2410f99308d0aa90c9fd" translate="yes" xml:space="preserve">
          <source>These 5th and 6th steps does not creates any changes which needs commit.</source>
          <target state="translated">这些第五步和第六步不会产生任何需要提交的变化。</target>
        </trans-unit>
        <trans-unit id="d9f83abcd0efc17820e9f7b16f98452c41d98faf" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;othermachine&lt;/code&gt; can be some VM, or some Ubuntu WSL under Windows, whatever.  Even a &lt;code&gt;chroot&lt;/code&gt; (but I assume that you are non-root, because if you are &lt;code&gt;root&lt;/code&gt; it should be more easy to update to the newer &lt;code&gt;git&lt;/code&gt;).</source>
          <target state="translated">该 &lt;code&gt;othermachine&lt;/code&gt; 可以是某些VM，也可以是Windows下的某些Ubuntu WSL，无论如何。 甚至是 &lt;code&gt;chroot&lt;/code&gt; （但我假设您不是root用户，因为如果您是 &lt;code&gt;root&lt;/code&gt; 用户 ，则更容易将其更新为较新的 &lt;code&gt;git&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="e9ed6324492e445628826d291002a3c4b8bedd07" translate="yes" xml:space="preserve">
          <source>This &lt;strong&gt;removes the whole &lt;code&gt;submodule.&amp;lt;name&amp;gt;&lt;/code&gt; section from &lt;code&gt;.git/config&lt;/code&gt; either for the given
  submodule(s)&lt;/strong&gt; (or for all those which have been initialized if '&lt;code&gt;.&lt;/code&gt;' is given).</source>
          <target state="translated">这&lt;strong&gt;将从 &lt;code&gt;.git/config&lt;/code&gt; 中删除给定子模块&lt;/strong&gt; （或&lt;strong&gt;给定的所有子模块&lt;/strong&gt; ，如果给出了' &lt;code&gt;.&lt;/code&gt; '的所有&lt;strong&gt;子模块）的 &lt;code&gt;submodule.&amp;lt;name&amp;gt;&lt;/code&gt; 部分&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="ed891ffd8ed07489de62b972759741015572a031" translate="yes" xml:space="preserve">
          <source>This cannot be fully symmetric, as keeping it strictly symmetric does not make much sense.  There simply is no need for more than two commands.  Also &quot;pulling in the data&quot; is implicit, because you need it, but removing the cached information is not done, because this is not needed at all and might wipe precious data.</source>
          <target state="translated">这不可能是完全对称的,因为保持严格的对称并没有什么意义。根本就不需要两个以上的命令。另外,&quot;拉入数据 &quot;是隐含的,因为你需要它,但删除缓存信息是不做的,因为这根本不需要,可能会擦掉宝贵的数据。</target>
        </trans-unit>
        <trans-unit id="d5a8eb02dd70d8f0864431159797c06c330396d3" translate="yes" xml:space="preserve">
          <source>This is not only true for you.  It also is true for all others using your repository.</source>
          <target state="translated">这不仅是对你来说是如此。对所有使用你的资源库的其他人也是如此。</target>
        </trans-unit>
        <trans-unit id="43b0e09fc2033bb86af3cdf155067446979d13da" translate="yes" xml:space="preserve">
          <source>This is regardless of whether you do steps 2 or 3.</source>
          <target state="translated">这是不管你是做第二步还是第三步。</target>
        </trans-unit>
        <trans-unit id="ff6cc9af1c994655cfb603e312bfe461cf4e4760" translate="yes" xml:space="preserve">
          <source>This leaves &lt;code&gt;.git/modules/&amp;lt;path-to-submodule&amp;gt;/&lt;/code&gt; unchanged.</source>
          <target state="translated">这使 &lt;code&gt;.git/modules/&amp;lt;path-to-submodule&amp;gt;/&lt;/code&gt; 保持不变。</target>
        </trans-unit>
        <trans-unit id="7c9f3428912942e6a0f63f1435a130706ac6e9b8" translate="yes" xml:space="preserve">
          <source>This leaves you with a clean checkout with no changes to commit.</source>
          <target state="translated">这就给你留下了一个干净利落的结账,没有任何改动的承诺。</target>
        </trans-unit>
        <trans-unit id="bfd37047b1c782691d2a43f60e1962877cbc2d60" translate="yes" xml:space="preserve">
          <source>This restores the exact same state as before you added the submodule. You can right away add the submodule again, which was not possible with most of the answers here.</source>
          <target state="translated">这将恢复与添加子模块之前完全相同的状态。你可以马上再次添加子模块,这在这里的大多数答案中是不可能的。</target>
        </trans-unit>
        <trans-unit id="651663fb7c8232755ea68bccbbcc2cf4eaeae173" translate="yes" xml:space="preserve">
          <source>This takes care if the (de)initialization steps (&lt;code&gt;.git/config&lt;/code&gt; and &lt;code&gt;.git/modules/xxx&lt;/code&gt;)</source>
          <target state="translated">如果（取消）初始化步骤（ &lt;code&gt;.git/config&lt;/code&gt; 和 &lt;code&gt;.git/modules/xxx&lt;/code&gt; ），这会引起注意</target>
        </trans-unit>
        <trans-unit id="10fe421614bb42b3b26ac3c2e5073767e8c8a9ae" translate="yes" xml:space="preserve">
          <source>This truly is puzzling to newcomers, but basically is a good thing:  &lt;code&gt;git&lt;/code&gt; just does the obviously thing and does that right, and does not even try to do more.  &lt;code&gt;git&lt;/code&gt; is a tool, which must do a reliable job, instead of being just another &quot;Eierlegende Wollmilchsau&quot; (&quot;Eierlegende Wollmilchsau&quot; translates for me to &quot;some evil version of a Swiss army knife&quot;).</source>
          <target state="translated">这确实让新手感到困惑，但基本上是一件好事： &lt;code&gt;git&lt;/code&gt; 只是做了显而易见的事情并且做到了正确，甚至没有尝试做更多的事情。 &lt;code&gt;git&lt;/code&gt; 是一种工具，必须做得可靠，而不仅仅是另一个&amp;ldquo; Eierlegende Wollmilchsau&amp;rdquo;（&amp;ldquo; Eierlegende Wollmilchsau&amp;rdquo;对我来说是&amp;ldquo;瑞士军刀的某种邪恶版本&amp;rdquo;）。</target>
        </trans-unit>
        <trans-unit id="596b8118b43155b52e9b5314fcb917b51eea60a8" translate="yes" xml:space="preserve">
          <source>This was tested with:</source>
          <target state="translated">这是经测试与。</target>
        </trans-unit>
        <trans-unit id="313acf286ea454b402082bbc2bb414491f9edfb6" translate="yes" xml:space="preserve">
          <source>This way &lt;strong&gt;in future you can switch branches/commit forward and backward and will never get into any trouble again&lt;/strong&gt;, due to &lt;code&gt;two/&lt;/code&gt; having two different (and possibly incompatible) upstream repositories.  And the best is:  You keep both cached locally, too.</source>
          <target state="translated">&lt;strong&gt;将来，通过&lt;/strong&gt;这种方式&lt;strong&gt;，您可以向前和向后切换分支/提交，并且永远不会再遇到任何麻烦&lt;/strong&gt; ，因为 &lt;code&gt;two/&lt;/code&gt; 具有两个不同的（并且可能是不兼容的）上游存储库。 最好的是：您也将两者都保留在本地缓存。</target>
        </trans-unit>
        <trans-unit id="b09cff1dd1db179343c9c021aaa8972ecf92a753" translate="yes" xml:space="preserve">
          <source>To remove a &lt;code&gt;git&lt;/code&gt; submodule below 4 steps are needed.</source>
          <target state="translated">要删除 &lt;code&gt;git&lt;/code&gt; 子模块，需要执行以下4个步骤。</target>
        </trans-unit>
        <trans-unit id="4a4b4d7e790894904087f5595c7b221e46036c76" translate="yes" xml:space="preserve">
          <source>To remove a submodule added using:</source>
          <target state="translated">要删除添加的子模块,可以使用以下方法:</target>
        </trans-unit>
        <trans-unit id="e840d7466b559eb0f0b23357086bf7848201520d" translate="yes" xml:space="preserve">
          <source>To summarize, this is what you should do :</source>
          <target state="translated">总结一下,这就是你应该做的事情。</target>
        </trans-unit>
        <trans-unit id="0ff9656c2360991772c502bcb624d39289d26ed5" translate="yes" xml:space="preserve">
          <source>Track changes made to .gitmodules</source>
          <target state="translated">跟踪对.gitmodules的修改</target>
        </trans-unit>
        <trans-unit id="01d9d4bd68ab0b71b96630724db69bbc9e650688" translate="yes" xml:space="preserve">
          <source>Try to abstain from options to &lt;code&gt;rm&lt;/code&gt; and &lt;code&gt;deinit&lt;/code&gt; as long as you can.  Options (like &lt;code&gt;-f&lt;/code&gt;) for &lt;code&gt;git&lt;/code&gt; are good if you are a Pro.  But as you came here, you probably are not so experienced in the &lt;code&gt;submodule&lt;/code&gt; area.  So better be safe than sorry.</source>
          <target state="translated">尽可能地放弃对 &lt;code&gt;rm&lt;/code&gt; 和 &lt;code&gt;deinit&lt;/code&gt; 的选择。 如果您是专业人士，则 &lt;code&gt;git&lt;/code&gt; 的选项（例如 &lt;code&gt;-f&lt;/code&gt; ）会很好。 但是，当您来到这里时，您可能在 &lt;code&gt;submodule&lt;/code&gt; 领域并不那么有经验。 因此，最好不要后悔。</target>
        </trans-unit>
        <trans-unit id="40669d18e0823e45a4c8dda101264e80ce1404c9" translate="yes" xml:space="preserve">
          <source>Unregister the given submodules ... If you really want to remove a
  submodule from the repository and commit that use git-rm[1]
  &lt;strong&gt;instead&lt;/strong&gt;.</source>
          <target state="translated">注销给定的子模块...如果您确实要从存储库中删除一个子模块，然后使用git-rm [1]进行提交。</target>
        </trans-unit>
        <trans-unit id="b84a4b6364611d2bc031759abf5dcf0d3e4b2e89" translate="yes" xml:space="preserve">
          <source>Unregister the given submodules, i.e. remove the whole &lt;code&gt;submodule.$name&lt;/code&gt;
  section from .git/config together with their work tree.</source>
          <target state="translated">取消注册给定的子模块，即从.git / config中删除整个 &lt;code&gt;submodule.$name&lt;/code&gt; 部分及其工作树。</target>
        </trans-unit>
        <trans-unit id="17afc2cf9cdbab3e5d8d6b0ce546a16eb53640c3" translate="yes" xml:space="preserve">
          <source>Unstage and remove $path_to_submodule only from the index (to prevent losing information)</source>
          <target state="translated">取消阶段,只从索引中删除$path_to_submodule(防止信息丢失)。</target>
        </trans-unit>
        <trans-unit id="7c7c17d96895ab1edc446745a7cbb9bce2c4eab4" translate="yes" xml:space="preserve">
          <source>Use a newer &lt;code&gt;git&lt;/code&gt;</source>
          <target state="translated">使用较新的 &lt;code&gt;git&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="21a569a10b913e4067a51d36b1e566feb183e389" translate="yes" xml:space="preserve">
          <source>Via the page &lt;em&gt;&lt;a href=&quot;https://git.wiki.kernel.org/index.php/GitSubmoduleTutorial#Removal&quot;&gt;Git Submodule Tutorial&lt;/a&gt;&lt;/em&gt;:</source>
          <target state="translated">通过页面&lt;em&gt;&lt;a href=&quot;https://git.wiki.kernel.org/index.php/GitSubmoduleTutorial#Removal&quot;&gt;Git Submodule Tutorial&lt;/a&gt;&lt;/em&gt; ：</target>
        </trans-unit>
        <trans-unit id="c94e855e54cd9a7ccbadd695335791061fdec071" translate="yes" xml:space="preserve">
          <source>Warning!</source>
          <target state="translated">Warning!</target>
        </trans-unit>
        <trans-unit id="f6bafaa418c14b7db01de21b2e5950df4fdadcde" translate="yes" xml:space="preserve">
          <source>Well, the 2nd variant of module &lt;code&gt;two/&lt;/code&gt; is not under &lt;code&gt;.git/modules/two/&lt;/code&gt;, it is under &lt;code&gt;.git/modules/someunusedname/&lt;/code&gt;!  So things like &lt;code&gt;git rm $module; rm -f .git/module/$module&lt;/code&gt; are totally wrong!  You must either consult &lt;code&gt;module/.git&lt;/code&gt; or &lt;code&gt;.gitmodules&lt;/code&gt; to find the right thing to remove!</source>
          <target state="translated">好吧，模块 &lt;code&gt;two/&lt;/code&gt; 的第二个变体不在 &lt;code&gt;.git/modules/two/&lt;/code&gt; ，而是在 &lt;code&gt;.git/modules/someunusedname/&lt;/code&gt; ！ 所以像 &lt;code&gt;git rm $module; rm -f .git/module/$module&lt;/code&gt; rm -f .git / module / $ module是完全错误的！ 您必须查阅 &lt;code&gt;module/.git&lt;/code&gt; 或 &lt;code&gt;.gitmodules&lt;/code&gt; 才能找到要删除的正确内容！</target>
        </trans-unit>
        <trans-unit id="17ec077994c0965f33148294d84c827da6cdac4a" translate="yes" xml:space="preserve">
          <source>What I'm currently doing Dec 2012 (combines most of these answers):</source>
          <target state="translated">我目前正在做的事情 2012年12月(结合这些答案中的大部分)。</target>
        </trans-unit>
        <trans-unit id="53939b94fa1711b1a7c570e811a85bafd8afd403" translate="yes" xml:space="preserve">
          <source>What to do now?  Well, just do exactly as told!  Use &lt;code&gt;--name someunusedname&lt;/code&gt;</source>
          <target state="translated">现在要做什么？ 好吧，完全按照指示执行！ 使用 &lt;code&gt;--name someunusedname&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="22898919b72150cd9f5f1ea6b3e1bff1df5bded1" translate="yes" xml:space="preserve">
          <source>When you do &lt;code&gt;git submodule add&lt;/code&gt;, it only adds it to &lt;code&gt;.gitmodules&lt;/code&gt;, but
once you did &lt;code&gt;git submodule init&lt;/code&gt;, it added to &lt;code&gt;.git/config&lt;/code&gt;.</source>
          <target state="translated">当您执行 &lt;code&gt;git submodule add&lt;/code&gt; 时 ，它只会将其添加到 &lt;code&gt;.gitmodules&lt;/code&gt; 中 ，但是一旦您执行 &lt;code&gt;git submodule init&lt;/code&gt; 时 ，它就会添加到 &lt;code&gt;.git/config&lt;/code&gt; 中 。</target>
        </trans-unit>
        <trans-unit id="11d9064bfaeb9b71916696d7c5fab45081499344" translate="yes" xml:space="preserve">
          <source>Why never remove &lt;code&gt;$GIT_DIR/modules/&amp;lt;name&amp;gt;/&lt;/code&gt;?</source>
          <target state="translated">为什么从不删除 &lt;code&gt;$GIT_DIR/modules/&amp;lt;name&amp;gt;/&lt;/code&gt; ？</target>
        </trans-unit>
        <trans-unit id="4c02475ea0a104471540c380d2a920b4b0a90b00" translate="yes" xml:space="preserve">
          <source>Why this error?  Because &lt;code&gt;.git/modules/two/&lt;/code&gt; previously was populated from &lt;a href=&quot;https://github.com/hilbix/empty.git&quot;&gt;https://github.com/hilbix/empty.git&lt;/a&gt; and now shall be re-populated from something else, namely &lt;a href=&quot;https://github.com/hilbix/src.git&quot;&gt;https://github.com/hilbix/src.git&lt;/a&gt;.  You won't see this if you re-populate it from &lt;a href=&quot;https://github.com/hilbix/empty.git&quot;&gt;https://github.com/hilbix/empty.git&lt;/a&gt;</source>
          <target state="translated">为什么会出现这个错误？ 因为 &lt;code&gt;.git/modules/two/&lt;/code&gt; 以前是从&lt;a href=&quot;https://github.com/hilbix/empty.git&quot;&gt;https://github.com/hilbix/empty.git&lt;/a&gt;填充的，现在应该从其他地方（即&lt;a href=&quot;https://github.com/hilbix/src.git&quot;&gt;https://github.com/hilbix/src.git）&lt;/a&gt;重新填充。 如果您从&lt;a href=&quot;https://github.com/hilbix/empty.git&quot;&gt;https://github.com/hilbix/empty.git&lt;/a&gt;重新填充它，您将看不到它。</target>
        </trans-unit>
        <trans-unit id="2d37e6a6f9105af4847908c33501a8800652476a" translate="yes" xml:space="preserve">
          <source>With &quot;&lt;code&gt;git submodule init&lt;/code&gt;&quot; the user is able to tell git they care about one or more submodules and wants to have it populated on the next call to &quot;&lt;code&gt;git submodule update&lt;/code&gt;&quot;.</source>
          <target state="translated">使用&amp;ldquo; &lt;code&gt;git submodule init&lt;/code&gt; &amp;rdquo;，用户可以告诉git他们关心一个或多个子模块，并希望在下一次调用&amp;ldquo; &lt;code&gt;git submodule update&lt;/code&gt; &amp;rdquo;时填充它。</target>
        </trans-unit>
        <trans-unit id="6c4c14376896bb21bdd7eadd89140b659cb40e96" translate="yes" xml:space="preserve">
          <source>With git 2.17 and above it's just:</source>
          <target state="translated">用git 2.17及以上版本就可以了。</target>
        </trans-unit>
        <trans-unit id="a593fc6d174f81c09a0f106366de92244e03a3cb" translate="yes" xml:space="preserve">
          <source>You can probably get away with the above two steps for git 1.8.5+ as &lt;a href=&quot;https://stackoverflow.com/a/21211232/3363202&quot;&gt;tinlyx's answer&lt;/a&gt; noted, as all &lt;code&gt;git submodule&lt;/code&gt; commands seem to work.</source>
          <target state="translated">正如&lt;a href=&quot;https://stackoverflow.com/a/21211232/3363202&quot;&gt;tinlyx的回答所&lt;/a&gt;指出的那样，您可能可以摆脱git 1.8.5+的上述两个步骤，因为所有 &lt;code&gt;git submodule&lt;/code&gt; 命令似乎都可以工作。</target>
        </trans-unit>
        <trans-unit id="fec26e3f8230a518d5e1741dc787d3ee7e6062e2" translate="yes" xml:space="preserve">
          <source>You can use an alias to automate the solutions provided by others:</source>
          <target state="translated">你可以使用别名来自动化他人提供的解决方案。</target>
        </trans-unit>
        <trans-unit id="082e02cc74f2b7fa3b0c46fdc924a8bb08cc4240" translate="yes" xml:space="preserve">
          <source>You can use this multiply, and this is saved into &lt;code&gt;$HOME/.gitconfig&lt;/code&gt;.  Something like</source>
          <target state="translated">您可以使用此乘法，并将其保存到 &lt;code&gt;$HOME/.gitconfig&lt;/code&gt; 。 就像是</target>
        </trans-unit>
        <trans-unit id="cd3a606e7e1d2f85631ef8e8f851aebcfd11d8a4" translate="yes" xml:space="preserve">
          <source>You have done something in the past which is unsupported by &lt;code&gt;git&lt;/code&gt;.  Then you are on the dark side and things get ugly and complicated.  (Perhaps using another machine fixes it.)</source>
          <target state="translated">您过去做过 &lt;code&gt;git&lt;/code&gt; 不支持的事情。 然后，您处于阴暗面，事情变得丑陋而复杂。 （也许使用另一台机器对其进行了修复。）</target>
        </trans-unit>
        <trans-unit id="027c6b3f95dc37999af133f32f39ca951ec5b710" translate="yes" xml:space="preserve">
          <source>You have uncommitted data and might lose data.  Then better commit them first.</source>
          <target state="translated">你有未提交的数据,可能会丢失数据。那么最好先提交给他们。</target>
        </trans-unit>
        <trans-unit id="b184733b05d2b2fb0fa48f553782e9e03032c673" translate="yes" xml:space="preserve">
          <source>You must remove the entry in &lt;code&gt;.gitmodules&lt;/code&gt; and &lt;code&gt;.git/config&lt;/code&gt;, and remove the directory of the module from the history:</source>
          <target state="translated">您必须删除 &lt;code&gt;.gitmodules&lt;/code&gt; 和 &lt;code&gt;.git/config&lt;/code&gt; 中的条目，并从历史记录中删除模块的目录：</target>
        </trans-unit>
        <trans-unit id="8b02087b8f74f00315e8888ed3c0bd73eeafce64" translate="yes" xml:space="preserve">
          <source>You see, there is no &lt;code&gt;-f&lt;/code&gt; needed on &lt;code&gt;submodule deinit&lt;/code&gt;.  If things are clean, in a &lt;code&gt;git clean&lt;/code&gt; sense.  Also note that &lt;code&gt;git clean -x&lt;/code&gt; is not needed.  &lt;strong&gt;This means &lt;code&gt;git submodule deinit&lt;/code&gt; unconditionally removes untracked files which are ignored.&lt;/strong&gt;  This is usually what you want, but do not forget about it.  Sometimes ignored files might be precious, like cached data which takes hours to days to be calculated again.</source>
          <target state="translated">您会看到， &lt;code&gt;submodule deinit&lt;/code&gt; 上不需要 &lt;code&gt;-f&lt;/code&gt; 。 如果一切都干净，从 &lt;code&gt;git clean&lt;/code&gt; 的角度来看。 另请注意，不需要 &lt;code&gt;git clean -x&lt;/code&gt; 。 &lt;strong&gt;这意味着 &lt;code&gt;git submodule deinit&lt;/code&gt; 无条件删除被忽略的未跟踪文件。&lt;/strong&gt; 这通常是您想要的，但不要忘记它。 有时，被忽略的文件可能很珍贵，例如缓存的数据需要数小时至数天才能重新计算。</target>
        </trans-unit>
        <trans-unit id="29b8b4521c511ad84fe7fdb3cce1cf9a2bcb01ee" translate="yes" xml:space="preserve">
          <source>You will have to delete the module files on your project manually.</source>
          <target state="translated">你必须手动删除项目中的模块文件。</target>
        </trans-unit>
        <trans-unit id="825806d08a98b7786e8612378baf5d216ab45418" translate="yes" xml:space="preserve">
          <source>Your &lt;code&gt;git&lt;/code&gt; is too old.  Then use a newer &lt;code&gt;git&lt;/code&gt;.  (See below how to.)</source>
          <target state="translated">您的 &lt;code&gt;git&lt;/code&gt; 太旧了。 然后使用较新的 &lt;code&gt;git&lt;/code&gt; 。 （请参阅下面的方法。）</target>
        </trans-unit>
        <trans-unit id="b3263d261892cd0fe088e87c994b93105a165597" translate="yes" xml:space="preserve">
          <source>Your submodule is not clean in a &lt;code&gt;git clean&lt;/code&gt; sense.  Then first clean your submodule using that command.  (See below.)</source>
          <target state="translated">从 &lt;code&gt;git clean&lt;/code&gt; 的角度来看，您的子模块不干净。 然后，首先使用该命令清理您的子模块。 （见下文。）</target>
        </trans-unit>
        <trans-unit id="c5f61f79aa84e788870e87c6a3a7273f7a40b8d3" translate="yes" xml:space="preserve">
          <source>also is quite the inverse to</source>
          <target state="translated">恰恰相反,也是</target>
        </trans-unit>
        <trans-unit id="fc021cf751bd19536fe97dc7c3e97f26df48da1d" translate="yes" xml:space="preserve">
          <source>because some commands basically need to do more than just a single thing:</source>
          <target state="translated">因为有些命令基本上需要做的事情不止是一件事。</target>
        </trans-unit>
        <trans-unit id="786e97b3ee9fc4b292d5852c2c5943153c4ce91a" translate="yes" xml:space="preserve">
          <source>but</source>
          <target state="translated">but</target>
        </trans-unit>
        <trans-unit id="a379c85f8c69a0d3679d831f2b58817f66b078af" translate="yes" xml:space="preserve">
          <source>into</source>
          <target state="translated">into</target>
        </trans-unit>
        <trans-unit id="e9701ce3d2a3e65a5ba9a8b06bf157883a5f2cca" translate="yes" xml:space="preserve">
          <source>is the direct inverse to</source>
          <target state="translated">是直接逆向</target>
        </trans-unit>
        <trans-unit id="067397bd0d1f8d785870c974f9dffe54efdc75de" translate="yes" xml:space="preserve">
          <source>pulls in further data if needed</source>
          <target state="translated">如有需要,可进一步拉入数据</target>
        </trans-unit>
        <trans-unit id="a63f4ed1ad5856b0ef695a7abace53c0751617ff" translate="yes" xml:space="preserve">
          <source>pulls in the data to &lt;code&gt;.git/modules/NAME/&lt;/code&gt;</source>
          <target state="translated">将数据提取到 &lt;code&gt;.git/modules/NAME/&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="31cb2c3126ff597e73a7ee4c23e71508f6b6fc6d" translate="yes" xml:space="preserve">
          <source>rewrites URLs like</source>
          <target state="translated">重写URL,如</target>
        </trans-unit>
        <trans-unit id="1a98271a19ad55f7c6adc32e923d003f60257391" translate="yes" xml:space="preserve">
          <source>the submodule &lt;strong&gt;&lt;a href=&quot;https://stackoverflow.com/questions/1992018/git-submodule-update-needed-only-initially/2227598#2227598&quot;&gt;special entry&lt;/a&gt;&lt;/strong&gt; (as illustrated by &lt;a href=&quot;https://stackoverflow.com/q/16574625/6309&quot;&gt;this question&lt;/a&gt;): the git rm removes it from the index:</source>
          <target state="translated">子模块&lt;strong&gt;&lt;a href=&quot;https://stackoverflow.com/questions/1992018/git-submodule-update-needed-only-initially/2227598#2227598&quot;&gt;特殊条目&lt;/a&gt;&lt;/strong&gt; （ &lt;a href=&quot;https://stackoverflow.com/q/16574625/6309&quot;&gt;如此问题所示&lt;/a&gt; ）：git rm将其从索引中删除：</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
