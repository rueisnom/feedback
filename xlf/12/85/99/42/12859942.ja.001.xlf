<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/12859942">
    <body>
      <group id="12859942">
        <trans-unit id="6cda3a126b38102fb9da9475533aaf3305f7fc81" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://en.wikipedia.org/wiki/Stored_procedure&quot;&gt;Stored procedures&lt;/a&gt; (can't handle multiple result sets)</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/Stored_procedure&quot;&gt;ストアドプロシージャ&lt;/a&gt; （複数の結果セットを処理できません）</target>
        </trans-unit>
        <trans-unit id="b3ded5903fe8ef5cae508b2ae92f896e2213e013" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://php.net/manual/en/book.mysqli.php&quot;&gt;MySQLi&lt;/a&gt; is the 'improved' extension for working with MySQL databases. It takes advantage of features that are available in newer versions of the MySQL server, exposes both a function-oriented and an object-oriented interface to the developer and a does few other nifty things.</source>
          <target state="translated">&lt;a href=&quot;http://php.net/manual/en/book.mysqli.php&quot;&gt;MySQLi&lt;/a&gt;は、MySQLデータベースを操作するための「改善された」拡張機能です。 MySQLサーバーの新しいバージョンで利用可能な機能を利用し、関数指向とオブジェクト指向の両方のインターフェイスを開発者に公開し、その他いくつかの気の利いたことを行います。</target>
        </trans-unit>
        <trans-unit id="d17381afa285d004079efeb7bdb099fd00671abd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://php.net/manual/en/book.pdo.php&quot;&gt;PDO&lt;/a&gt; offers an API that consolidates most of the functionality that was previously spread across the major database access extensions, i.e. MySQL, PostgreSQL, SQLite, MSSQL, etc. The interface exposes high-level objects for the programmer to work with database connections, queries and result sets, and low-level drivers perform communication and resource handling with the database server. A lot of discussion and work is going into PDO and it&amp;rsquo;s considered the appropriate method of working with databases in modern, professional code.</source>
          <target state="translated">&lt;a href=&quot;http://php.net/manual/en/book.pdo.php&quot;&gt;PDO&lt;/a&gt;は、以前は主要なデータベースアクセス拡張機能（MySQL、PostgreSQL、SQLite、MSSQLなど）に分散されていた機能のほとんどを統合するAPIを提供します。インターフェイスは、プログラマーがデータベース接続、クエリ、および結果セット、および低レベルのドライバーは、データベースサーバーとの通信およびリソース処理を実行します。 PDOについては多くの議論と作業が行われており、最新の専門的なコードでデータベースを操作する適切な方法と見なされています。</target>
        </trans-unit>
        <trans-unit id="046ffaee85489e61d2263f509946570f847cc8ea" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://php.net/manual/en/pdostatement.fetchall.php&quot;&gt;&lt;code&gt;PDOStatement::fetchAll()&lt;/code&gt;&lt;/a&gt; - Returns an array containing all of the result set rows</source>
          <target state="translated">&lt;a href=&quot;http://php.net/manual/en/pdostatement.fetchall.php&quot;&gt; &lt;code&gt;PDOStatement::fetchAll()&lt;/code&gt; &lt;/a&gt; -すべての結果セット行を含む配列を返す</target>
        </trans-unit>
        <trans-unit id="b28a28e308fceeb11923ec4f6b51a94fdc522831" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://php.net/manual/en/pdostatement.fetchcolumn.php&quot;&gt;&lt;code&gt;PDOStatement::fetchColumn()&lt;/code&gt;&lt;/a&gt; - Returns a single column from the next row of a result set</source>
          <target state="translated">&lt;a href=&quot;http://php.net/manual/en/pdostatement.fetchcolumn.php&quot;&gt; &lt;code&gt;PDOStatement::fetchColumn()&lt;/code&gt; &lt;/a&gt; -結果セットの次の行から単一の列を返す</target>
        </trans-unit>
        <trans-unit id="f38ca8ad882074ee896d85b8ff9c3b2f2d31a650" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://php.net/manual/en/pdostatement.fetchobject.php&quot;&gt;&lt;code&gt;PDOStatement::fetchObject()&lt;/code&gt;&lt;/a&gt; - Fetches the next row and returns it as an object.</source>
          <target state="translated">&lt;a href=&quot;http://php.net/manual/en/pdostatement.fetchobject.php&quot;&gt; &lt;code&gt;PDOStatement::fetchObject()&lt;/code&gt; &lt;/a&gt; -次の行をフェッチし、それをオブジェクトとして返します。</target>
        </trans-unit>
        <trans-unit id="6f018387924cb8a35b2d0d50bcf690d933b109aa" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://php.net/manual/en/pdostatement.setfetchmode.php&quot;&gt;&lt;code&gt;PDOStatement::setFetchMode()&lt;/code&gt;&lt;/a&gt; - Set the default fetch mode for this statement</source>
          <target state="translated">&lt;a href=&quot;http://php.net/manual/en/pdostatement.setfetchmode.php&quot;&gt; &lt;code&gt;PDOStatement::setFetchMode()&lt;/code&gt; &lt;/a&gt; -このステートメントのデフォルトのフェッチモードを設定する</target>
        </trans-unit>
        <trans-unit id="0fa08d46c3da4c6dbad08eae37dd7aabd954a814" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://stackoverflow.com/q/12859942&quot;&gt;&lt;strong&gt;Please, don't use &lt;code&gt;mysql_*&lt;/code&gt; functions in new code&lt;/strong&gt;&lt;/a&gt;. They are no longer maintained &lt;a href=&quot;https://wiki.php.net/rfc/mysql_deprecation&quot;&gt;and are officially deprecated&lt;/a&gt;. See the &lt;a href=&quot;http://uk.php.net/manual/en/function.mysql-connect.php&quot;&gt;&lt;strong&gt;red box&lt;/strong&gt;&lt;/a&gt;? Learn about &lt;a href=&quot;http://en.wikipedia.org/wiki/Prepared_statement&quot;&gt;&lt;em&gt;prepared statements&lt;/em&gt;&lt;/a&gt; instead, and use &lt;a href=&quot;http://php.net/pdo&quot;&gt;PDO&lt;/a&gt; or &lt;a href=&quot;http://php.net/mysqli&quot;&gt;MySQLi&lt;/a&gt; - &lt;a href=&quot;http://php.net/manual/en/mysqlinfo.api.choosing.php&quot;&gt;this article&lt;/a&gt; will help you decide which. If you choose PDO, &lt;a href=&quot;http://wiki.hashphp.org/PDO_Tutorial_for_MySQL_Developers&quot;&gt;here is a good tutorial&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/q/12859942&quot;&gt;&lt;strong&gt;新しいコードでは &lt;code&gt;mysql_*&lt;/code&gt; 関数を使用しないでください&lt;/strong&gt;&lt;/a&gt; 。 それらはもはや保守されておらず&lt;a href=&quot;https://wiki.php.net/rfc/mysql_deprecation&quot;&gt;、正式に非推奨になってい&lt;/a&gt;ます。 &lt;a href=&quot;http://uk.php.net/manual/en/function.mysql-connect.php&quot;&gt;&lt;strong&gt;赤い箱&lt;/strong&gt;&lt;/a&gt;が&lt;strong&gt;見えます&lt;/strong&gt;か？ 代わりに&lt;a href=&quot;http://en.wikipedia.org/wiki/Prepared_statement&quot;&gt;&lt;em&gt;準備されたステートメント&lt;/em&gt;&lt;/a&gt;について学び、 &lt;a href=&quot;http://php.net/pdo&quot;&gt;PDO&lt;/a&gt;または&lt;a href=&quot;http://php.net/mysqli&quot;&gt;MySQLi&lt;/a&gt;を使用してください。 &lt;a href=&quot;http://php.net/manual/en/mysqlinfo.api.choosing.php&quot;&gt;この記事&lt;/a&gt;はどちらを選択するかを支援します。 PDOを選択した場合&lt;a href=&quot;http://wiki.hashphp.org/PDO_Tutorial_for_MySQL_Developers&quot;&gt;は&lt;/a&gt; 、 こちらが良いチュートリアルです。</target>
        </trans-unit>
        <trans-unit id="f6ffdb59a47d534bf1c4ce50a2ab19c2c804aac9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;OR die()&lt;/code&gt; is not a good way to handle the error since we can not handle the thing in &lt;code&gt;die&lt;/code&gt;. It will just end the script abruptly and then echo the error to the screen which you usually do NOT want to show to your end users, and let bloody hackers discover your schema. Alternately, the return values of &lt;code&gt;mysql_*&lt;/code&gt; functions can often be used in conjunction with &lt;a href=&quot;http://php.net/mysql_error&quot;&gt;mysql_error()&lt;/a&gt; to handle errors.</source>
          <target state="translated">&lt;code&gt;OR die()&lt;/code&gt; は、 &lt;code&gt;die&lt;/code&gt; で処理できないため、エラーを処理するのに適した方法ではありません。 スクリプトを突然終了し、通常はエンドユーザーに表示したくないエラーを画面にエコーし、血なまぐさいハッカーにスキーマを発見させます。 あるいは、 &lt;code&gt;mysql_*&lt;/code&gt; 関数の戻り値を&lt;a href=&quot;http://php.net/mysql_error&quot;&gt;mysql_error（）&lt;/a&gt;と組み合わせて使用​​して、エラーを処理することもできます。</target>
        </trans-unit>
        <trans-unit id="f8d90257eb4cba009d9da07c259d01492dd67cb6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PDO::ERRMODE_EXCEPTION&lt;/code&gt;: Throw exceptions. It represents an error raised by PDO. You should not throw a &lt;code&gt;PDOException&lt;/code&gt; from your own code. See &lt;em&gt;Exceptions&lt;/em&gt; for more information about exceptions in PHP. It acts very much like &lt;code&gt;or die(mysql_error());&lt;/code&gt;, when it isn't caught. But unlike &lt;code&gt;or die()&lt;/code&gt;, the &lt;code&gt;PDOException&lt;/code&gt; can be caught and handled gracefully if you choose to do so.</source>
          <target state="translated">&lt;code&gt;PDO::ERRMODE_EXCEPTION&lt;/code&gt; ：例外をスローします。 PDOによって発生したエラーを表します。 独自のコードから &lt;code&gt;PDOException&lt;/code&gt; をスローしないでください。 PHPの例外の詳細については、 &lt;em&gt;例外&lt;/em&gt;を参照してください。 これは、 &lt;code&gt;or die(mysql_error());&lt;/code&gt; 非常によく似た動作をします。 つかまらない時。 しかし、 &lt;code&gt;or die()&lt;/code&gt; とは異なり、 &lt;code&gt;PDOException&lt;/code&gt; することを選択した場合、 PDOExceptionをキャッチして正常に処理できます。</target>
        </trans-unit>
        <trans-unit id="5515c76631bc1066c78ab2cd9cdef4e2a606b1d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PDO::ERRMODE_SILENT&lt;/code&gt;. It's just setting error codes and acts pretty much the same as &lt;code&gt;mysql_*&lt;/code&gt; where you must check each result and then look at &lt;code&gt;$db-&amp;gt;errorInfo();&lt;/code&gt; to get the error details.</source>
          <target state="translated">&lt;code&gt;PDO::ERRMODE_SILENT&lt;/code&gt; 。 これはエラーコードを設定するだけで、 &lt;code&gt;mysql_*&lt;/code&gt; とほぼ同じように動作し 、各結果を確認して &lt;code&gt;$db-&amp;gt;errorInfo();&lt;/code&gt; 確認する必要があります。 エラーの詳細を取得します。</target>
        </trans-unit>
        <trans-unit id="e7c4b1bce0513c7fb8025092a93478da761f79aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PDO::ERRMODE_WARNING&lt;/code&gt; Raise &lt;code&gt;E_WARNING&lt;/code&gt;. (Run-time warnings (non-fatal errors). Execution of the script is not halted.)</source>
          <target state="translated">&lt;code&gt;PDO::ERRMODE_WARNING&lt;/code&gt; &lt;code&gt;E_WARNING&lt;/code&gt; を発生させます。 （実行時警告（致命的でないエラー）。スクリプトの実行は停止されません。）</target>
        </trans-unit>
        <trans-unit id="e02705f324751cbe9f1129e09c39ee8bf3c6790e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PDO::FETCH_ASSOC&lt;/code&gt;: returns an array indexed by column name as returned in your result set</source>
          <target state="translated">&lt;code&gt;PDO::FETCH_ASSOC&lt;/code&gt; ：結果セットで返された列名でインデックス付けされた配列を返します</target>
        </trans-unit>
        <trans-unit id="c53f912043ed13d79a8752a65b60437033b9a967" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PDO::FETCH_BOTH&lt;/code&gt; (default): returns an array indexed by both column name and 0-indexed column number as returned in your result set</source>
          <target state="translated">&lt;code&gt;PDO::FETCH_BOTH&lt;/code&gt; （デフォルト）：結果セットで返されるように、列名と0インデックスの列番号の両方でインデックスが付けられた配列を返します</target>
        </trans-unit>
        <trans-unit id="64c39564f8d39a4c2fdc909d2132ee966fa92c95" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PDO&lt;/code&gt; offers a better solution: exceptions. Anything we do with &lt;code&gt;PDO&lt;/code&gt; should be wrapped in a &lt;code&gt;try&lt;/code&gt;-&lt;code&gt;catch&lt;/code&gt; block. We can force &lt;code&gt;PDO&lt;/code&gt; into one of three error modes by setting the error mode attribute. Three error handling modes are below.</source>
          <target state="translated">&lt;code&gt;PDO&lt;/code&gt; はより良いソリューションを提供します：例外。 &lt;code&gt;PDO&lt;/code&gt; で行うことはすべて、 &lt;code&gt;try&lt;/code&gt; - &lt;code&gt;catch&lt;/code&gt; ブロックでラップする必要があります。 エラーモード属性を設定することで、 &lt;code&gt;PDO&lt;/code&gt; を3つのエラーモードのいずれかに強制できます。 3つのエラー処理モードを以下に示します。</target>
        </trans-unit>
        <trans-unit id="b690a13d160e3bb95e6e3e9ad4972ca25987a5b0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SELECT&lt;/code&gt;, &lt;code&gt;INSERT&lt;/code&gt;, &lt;code&gt;UPDATE&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt; prepared queries</source>
          <target state="translated">&lt;code&gt;SELECT&lt;/code&gt; 、 &lt;code&gt;INSERT&lt;/code&gt; 、 &lt;code&gt;UPDATE&lt;/code&gt; 、 &lt;code&gt;DELETE&lt;/code&gt; の準備されたクエリ</target>
        </trans-unit>
        <trans-unit id="8bf705f99d5823b73420e7e85ef046dfddb3f6d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ext/mysql&lt;/code&gt; was built for &lt;strong&gt;MySQL 3.23&lt;/strong&gt; and only got very few additions since then while mostly keeping compatibility with this old version which makes the code a bit harder to maintain. Missing features that is not supported by &lt;code&gt;ext/mysql&lt;/code&gt; include: (&lt;em&gt;&lt;a href=&quot;https://wiki.php.net/rfc/mysql_deprecation&quot;&gt;from PHP manual&lt;/a&gt;&lt;/em&gt;).</source>
          <target state="translated">&lt;code&gt;ext/mysql&lt;/code&gt; は&lt;strong&gt;MySQL 3.23&lt;/strong&gt;用に構築されており、それ以降は追加がほとんどありませんが、コードの保守が少し難しくなるこの古いバージョンとの互換性はほとんど維持されています。 &lt;code&gt;ext/mysql&lt;/code&gt; でサポートされていない不足している機能は次のとおりです（ &lt;em&gt;&lt;a href=&quot;https://wiki.php.net/rfc/mysql_deprecation&quot;&gt;PHPマニュアルから&lt;/a&gt;&lt;/em&gt; ）。</target>
        </trans-unit>
        <trans-unit id="616d50367e59cecd8e39af146c7cc40afc851bf7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mysql_*&lt;/code&gt; extension does not support &lt;strong&gt;prepared statements&lt;/strong&gt;, which is (among other things) a very effective countermeasure against &lt;strong&gt;SQL Injection&lt;/strong&gt;. It fixed a very serious vulnerability in MySQL dependent applications which allows attackers to gain access to your script and perform &lt;strong&gt;any possible query&lt;/strong&gt; on your database.</source>
          <target state="translated">&lt;code&gt;mysql_*&lt;/code&gt; 拡張機能は、 &lt;strong&gt;準備されたステートメントを&lt;/strong&gt;サポートしていません。これは（とりわけ） &lt;strong&gt;SQLインジェクション&lt;/strong&gt;に対する非常に効果的な対策です。 MySQLに依存するアプリケーションの非常に深刻な脆弱性を修正しました。これにより、攻撃者がスクリプトにアクセスし、データベースで&lt;strong&gt;可能なクエリ&lt;/strong&gt;を実行&lt;strong&gt;する可能性があります&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="04f4afe04132a28eaf0cf86a418f420d470d506d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pdo_query()&lt;/code&gt; adds very facile support for bound parameters. Converting old code is straightforward:</source>
          <target state="translated">&lt;code&gt;pdo_query()&lt;/code&gt; は、バインドされたパラメーターの非常に簡単なサポートを追加します。 古いコードの変換は簡単です：</target>
        </trans-unit>
        <trans-unit id="75528272c8ccd5010c8d8ca46c4a8dfbf9778675" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;and so on...&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;等々...&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5237e9f27ed52517cac1144483a5b7980060c686" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;voila&lt;/em&gt;, everything is parameterized and safe.</source>
          <target state="translated">&lt;em&gt;出来上がり&lt;/em&gt; 、すべてがパラメータ化され、安全です。</target>
        </trans-unit>
        <trans-unit id="3fcb0c24213528d4e6d53492a70d7a8291036328" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;&lt;code&gt;mysql_&lt;/code&gt;&lt;/s&gt;&lt;code&gt;connect()&lt;/code&gt; becomes &lt;b&gt;&lt;code&gt;pdo_&lt;/code&gt;&lt;/b&gt;&lt;code&gt;connect()&lt;/code&gt;</source>
          <target state="translated">&lt;s&gt; &lt;code&gt;mysql_&lt;/code&gt; connect&lt;/s&gt; &lt;code&gt;connect()&lt;/code&gt; は&lt;b&gt; &lt;code&gt;pdo_&lt;/code&gt; connect&lt;/b&gt; （）になり&lt;b&gt;ます&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="5b3d112ed884c4390787d133672862205824e4fd" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;&lt;code&gt;mysql_&lt;/code&gt;&lt;/s&gt;&lt;code&gt;fetch_array()&lt;/code&gt; becomes &lt;b&gt;&lt;code&gt;pdo_&lt;/code&gt;&lt;/b&gt;&lt;code&gt;fetch_array()&lt;/code&gt;</source>
          <target state="translated">&lt;s&gt; &lt;code&gt;mysql_&lt;/code&gt; &lt;/s&gt; &lt;code&gt;fetch_array()&lt;/code&gt; は&lt;b&gt; &lt;code&gt;pdo_&lt;/code&gt; &lt;/b&gt; &lt;code&gt;fetch_array()&lt;/code&gt; になります</target>
        </trans-unit>
        <trans-unit id="a21fb7cc60ddb95c041c9f9ded1d45b2a7edf190" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;&lt;code&gt;mysql_&lt;/code&gt;&lt;/s&gt;&lt;code&gt;fetch_assoc()&lt;/code&gt; becomes &lt;b&gt;&lt;code&gt;pdo_&lt;/code&gt;&lt;/b&gt;&lt;code&gt;fetch_assoc()&lt;/code&gt;</source>
          <target state="translated">&lt;s&gt; &lt;code&gt;mysql_&lt;/code&gt; &lt;/s&gt; &lt;code&gt;fetch_assoc()&lt;/code&gt; は&lt;b&gt; &lt;code&gt;pdo_&lt;/code&gt; &lt;/b&gt; &lt;code&gt;fetch_assoc()&lt;/code&gt; になります</target>
        </trans-unit>
        <trans-unit id="ef13a65638ca5d535b808e90281c25f89511e748" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;&lt;code&gt;mysql_&lt;/code&gt;&lt;/s&gt;&lt;code&gt;insert_id()&lt;/code&gt; becomes &lt;b&gt;&lt;code&gt;pdo_&lt;/code&gt;&lt;/b&gt;&lt;code&gt;insert_id()&lt;/code&gt;</source>
          <target state="translated">&lt;s&gt; &lt;code&gt;mysql_&lt;/code&gt; &lt;/s&gt; &lt;code&gt;insert_id()&lt;/code&gt; は&lt;b&gt; &lt;code&gt;pdo_&lt;/code&gt; &lt;/b&gt; &lt;code&gt;insert_id()&lt;/code&gt; になります</target>
        </trans-unit>
        <trans-unit id="cc407c0ffce461b779a38bb1fc0dc99251428726" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;&lt;code&gt;mysql_&lt;/code&gt;&lt;/s&gt;&lt;code&gt;num_rows()&lt;/code&gt; becomes &lt;b&gt;&lt;code&gt;pdo_&lt;/code&gt;&lt;/b&gt;&lt;code&gt;num_rows()&lt;/code&gt;</source>
          <target state="translated">&lt;s&gt; &lt;code&gt;mysql_&lt;/code&gt; &lt;/s&gt; &lt;code&gt;num_rows()&lt;/code&gt; は&lt;b&gt; &lt;code&gt;pdo_&lt;/code&gt; &lt;/b&gt; &lt;code&gt;num_rows()&lt;/code&gt; になります</target>
        </trans-unit>
        <trans-unit id="9f9a2ad43ca1e733f76816229b4aa318182e265e" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;&lt;code&gt;mysql_&lt;/code&gt;&lt;/s&gt;&lt;code&gt;query()&lt;/code&gt; becomes &lt;b&gt;&lt;code&gt;pdo_&lt;/code&gt;&lt;/b&gt;&lt;code&gt;query()&lt;/code&gt;</source>
          <target state="translated">&lt;s&gt; &lt;code&gt;mysql_&lt;/code&gt; &lt;/s&gt; &lt;code&gt;query()&lt;/code&gt; は&lt;s&gt;pdo_&lt;/s&gt; query（）になり &lt;code&gt;query()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="de66ab6b7bdbd02e289701939878dd5dd7d2fb27" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;&lt;code&gt;mysql_&lt;/code&gt;&lt;/s&gt;&lt;code&gt;real_escape_string()&lt;/code&gt; becomes &lt;b&gt;&lt;code&gt;pdo_&lt;/code&gt;&lt;/b&gt;&lt;code&gt;real_escape_string()&lt;/code&gt;</source>
          <target state="translated">&lt;s&gt; &lt;code&gt;mysql_&lt;/code&gt; &lt;/s&gt; &lt;code&gt;real_escape_string()&lt;/code&gt; は&lt;b&gt; &lt;code&gt;pdo_&lt;/code&gt; &lt;/b&gt; &lt;code&gt;real_escape_string()&lt;/code&gt; になります</target>
        </trans-unit>
        <trans-unit id="9f0b58668ae25ccfe5bdc1cbae5c9ee2cddd631f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;a href=&quot;http://php.net/manual/en/mysqli.quickstart.prepared-statements.php&quot;&gt;Prepared statements&lt;/a&gt; or parameterized queries&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;http://php.net/manual/en/mysqli.quickstart.prepared-statements.php&quot;&gt;準備されたステートメント&lt;/a&gt;またはパラメーター化されたクエリ&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="375f987ed1362ce8666be1d597bccb89f0a4b4e1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;DELETE&lt;/code&gt;&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;DELETE&lt;/code&gt;&lt;/strong&gt;:</target>
        </trans-unit>
        <trans-unit id="e1373de0a72aae36b8557c0139b699198b6a40ae" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;INSERT&lt;/code&gt;&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;INSERT&lt;/code&gt;&lt;/strong&gt;:</target>
        </trans-unit>
        <trans-unit id="ae0641e9808706462aeeee3ff5fada2631f3e370" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;SELECT&lt;/code&gt;&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;SELECT&lt;/code&gt;&lt;/strong&gt;:</target>
        </trans-unit>
        <trans-unit id="7d55ef0f6c839d55762a2f54ead50913fcbd88be" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;UPDATE&lt;/code&gt;&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;UPDATE&lt;/code&gt;&lt;/strong&gt;:</target>
        </trans-unit>
        <trans-unit id="4af3d4a1c360d57942900ff0fcaf6dc0a9cff4b4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;ext/mysql&lt;/code&gt;&lt;/strong&gt; was &lt;a href=&quot;https://wiki.php.net/rfc/mysql_deprecation&quot;&gt;&lt;strong&gt;officially deprecated as of PHP 5.5&lt;/strong&gt;&lt;/a&gt; and has been &lt;a href=&quot;https://wiki.php.net/rfc/remove_deprecated_functionality_in_php7&quot;&gt;&lt;strong&gt;removed as of PHP 7&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;ext/mysql&lt;/code&gt; &lt;/strong&gt;は&lt;a href=&quot;https://wiki.php.net/rfc/mysql_deprecation&quot;&gt;&lt;strong&gt;、PHP 5.5で正式に非推奨&lt;/strong&gt;&lt;/a&gt;となり&lt;a href=&quot;https://wiki.php.net/rfc/remove_deprecated_functionality_in_php7&quot;&gt;&lt;strong&gt;、PHP 7で削除されました&lt;/strong&gt;&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="21d3709bc3604de67baa10faab0af9188543ecb1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;A.&lt;/strong&gt; A prepared statement is a pre-compiled SQL statement that can be executed multiple times by sending only the data to the server.</source>
          <target state="translated">&lt;strong&gt;A.&lt;/strong&gt;準備済みステートメントとは、データのみをサーバーに送信することで複数回実行できるコンパイル済みSQLステートメントです。</target>
        </trans-unit>
        <trans-unit id="66bcf27ed5345c3e7d140adfa9c56ebb3359dfcf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;A.&lt;/strong&gt; Let's have an example:</source>
          <target state="translated">&lt;strong&gt;A.&lt;/strong&gt;例を挙げましょう：</target>
        </trans-unit>
        <trans-unit id="7d69176c1f43d19cde596ba2b74bea58f3c1bad5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;A.&lt;/strong&gt; Named placeholders. Use descriptive names preceded by a colon, instead of question marks. We don't care about position/order of value in name place holder:</source>
          <target state="translated">&lt;strong&gt;A.&lt;/strong&gt;名前付きプレースホルダー。 疑問符ではなく、コロンを前に付けた説明的な名前を使用します。 名前プレースホルダーでの値の位置/順序は関係ありません。</target>
        </trans-unit>
        <trans-unit id="1aecc95b507fcd1d0e6fda933de9c7becbbe5a09" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Also, there are some false or non-significant reasons, like&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;また、次のようないくつかの誤ったまたは重要ではない理由があります&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fbda4158ca375d01bee8e519487823e89ac0c2a0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Can we set attributes after PDO construction?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;PDOの構築後に属性を設定できますか？&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="71900205aba19377ace55dba6e80e5d49843cfb8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Contemporary database APIs are just &lt;em&gt;easier&lt;/em&gt; to use.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;現代のデータベースAPIは&lt;em&gt;使いやすい&lt;/em&gt;だけ&lt;em&gt;です&lt;/em&gt; 。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3ce243cbd8cc444c680e66a9ca31863339ae7a10" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Execute&lt;/strong&gt;: At a later time, the application supplies (or binds) values for the parameters, and the DBMS executes the statement (possibly returning a result). The application may execute the statement as many times as it wants with different values. In this example, it might supply 'Bread' for the first parameter and &lt;code&gt;1.00&lt;/code&gt; for the second parameter.</source>
          <target state="translated">&lt;strong&gt;実行&lt;/strong&gt; ：後で、アプリケーションがパラメーターの値を提供（またはバインド）し、DBMSがステートメントを実行します（結果を返す可能性があります）。 アプリケーションは、文を異なる値で何度でも実行できます。 この例では、最初のパラメーターに「パン」を、2番目のパラメーターに &lt;code&gt;1.00&lt;/code&gt; を指定します。</target>
        </trans-unit>
        <trans-unit id="b76647d0abd6627dc3e3d7aed8eb990660dd95d4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Getting the Last Inserted ID&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;最後に挿入されたIDの取得&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bbeb2123bb627ff2057e11808030689ea471e52f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Getting the row count&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;行数の取得&lt;/strong&gt; ：</target>
        </trans-unit>
        <trans-unit id="3d2b4c709812584ec969783a6880ad9830f30c48" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Good read&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;良い読み&lt;/strong&gt; ：</target>
        </trans-unit>
        <trans-unit id="ca5ca16bcc78e74bfbd4891290090d73b43c0d80" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Good read&lt;/strong&gt;: &lt;a href=&quot;http://php.net/manual/en/pdo.connections.php&quot;&gt;Connections and Connection management &amp;para;&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;お読みください&lt;/strong&gt; ： &lt;a href=&quot;http://php.net/manual/en/pdo.connections.php&quot;&gt;接続と接続管理&amp;para;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="64787817e9b226c3de70d33bdb039da28b3c4415" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Historic note on magic_quotes.&lt;/strong&gt; That feature is rightly deprecated. It's often incorrectly portrayed as failed &lt;em&gt;security&lt;/em&gt; feature however. But magic_quotes are as much a failed security feature as tennis balls have failed as nutrition source. That simply wasn't their purpose.</source>
          <target state="translated">&lt;strong&gt;magic_quotesに関する歴史的なメモ。&lt;/strong&gt; その機能は当然非推奨です。 ただし、 &lt;em&gt;セキュリティ&lt;/em&gt;機能の失敗と誤って表現されることがよくあります。 しかし、magic_quotesは、栄養源として失敗したテニスボールと同じくらい、失敗したセキュリティ機能です。 それは単に彼らの目的ではありませんでした。</target>
        </trans-unit>
        <trans-unit id="7c2c76a00e13c745b512b4a84fde6bd4d754f51e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Instead, you should learn of prepared statements&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;代わりに、準備されたステートメントについて学ぶ必要があります&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d0dbca28c12bb63433f617f4435842da2de64f12" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NEW! - ext/mysql is now &lt;em&gt;&lt;a href=&quot;https://wiki.php.net/rfc/mysql_deprecation&quot;&gt;officially deprecated as of PHP 5.5!&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;新着！&lt;/strong&gt; &lt;strong&gt;-ext / mysqlが&lt;em&gt;&lt;a href=&quot;https://wiki.php.net/rfc/mysql_deprecation&quot;&gt;PHP 5.5で正式に非推奨になりました！&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f35097e2b1b38de5ec88177ea2b0967e5b0e99a3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;NOTE:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3bcee5544ef56b940a214706dc29617b2b713720" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt;: In &lt;strong&gt;unnamed placeholders&lt;/strong&gt; we must take care of the proper order of the elements in the array that we are passing to the &lt;code&gt;PDOStatement::execute()&lt;/code&gt; method.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt; ： &lt;strong&gt;名前のないプレースホルダーで&lt;/strong&gt;は、 &lt;code&gt;PDOStatement::execute()&lt;/code&gt; メソッドに渡す配列内の要素の適切な順序に注意する必要があります。</target>
        </trans-unit>
        <trans-unit id="a2fb3e1339eb87a7998bdbb7ee4cd05d10c3a4ae" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Neither mysqli_* nor PDO functions should have appeared in the application code.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;mysqli_ *もPDO関数もアプリケーションコードに表示されるべきではありませんでした。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dda929987f6bc860e4d7687f0f9b9055c3b38c38" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Nevertheless, there are also some non-technical issues, which can make your experience a bit harder&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;それにもかかわらず、いくつかの非技術的な問題もあり、経験を少し難しくする可能性があります&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ee452aec63009c2bd7bbfd6f03acd850aab819f8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; you can also use &lt;code&gt;charset=UTF-8&lt;/code&gt;, but sometimes it causes an error, so it's better to use &lt;code&gt;utf8&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;charset=UTF-8&lt;/code&gt; を使用することもできますが、エラーが発生する場合があるため、 &lt;code&gt;utf8&lt;/code&gt; を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="8f722b24d30ed0d049e9217e7bf9e78930a63b61" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: If you are using the method like below (&lt;code&gt;query()&lt;/code&gt;), this method returns a &lt;code&gt;PDOStatement&lt;/code&gt; object. So if you want to fetch the result, use it like above.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt; ：以下のようなメソッド（ &lt;code&gt;query()&lt;/code&gt; ）を使用している場合、このメソッドは &lt;code&gt;PDOStatement&lt;/code&gt; オブジェクトを返します。 したがって、結果をフェッチしたい場合は、上記のように使用します。</target>
        </trans-unit>
        <trans-unit id="1d0a361ba3da0755ad03adc9e9d32cb4ed1a08c8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Prepare&lt;/strong&gt;: The statement template is created by the application and sent to the database management system (DBMS). Certain values are left unspecified, called parameters, placeholders or bind variables (labelled &lt;code&gt;?&lt;/code&gt; below):</source>
          <target state="translated">&lt;strong&gt;準備&lt;/strong&gt; ：ステートメントテンプレートはアプリケーションによって作成され、データベース管理システム（DBMS）に送信されます。 パラメータ、プレースホルダ、またはバインド変数と呼ばれる特定の値は未指定のままになります（以下で &lt;code&gt;?&lt;/code&gt; と表示されています ）。</target>
        </trans-unit>
        <trans-unit id="8de8d53910fb26580d0d1462d5f15822e1f2f8fd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Prepared Statements&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;準備されたステートメント&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="83772b3402056078699b22b03ae7c71d472d223a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Q.&lt;/strong&gt; So now, what are named placeholders and how do I use them?</source>
          <target state="translated">&lt;strong&gt;Q.&lt;/strong&gt;では、名前付きプレースホルダーとは何ですか、またどのように使用するのですか？</target>
        </trans-unit>
        <trans-unit id="bf935138dd58afb317f393a58a87a426e51d9625" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Q.&lt;/strong&gt; So now, what are unnamed placeholders and how do I use them?</source>
          <target state="translated">&lt;strong&gt;Q.&lt;/strong&gt;では、名前のないプレースホルダーとは何ですか、またどのように使用するのですか？</target>
        </trans-unit>
        <trans-unit id="246454779aad75d51088bb0de1cda979d51768d6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Q.&lt;/strong&gt; What is a prepared statement and why do I need them?</source>
          <target state="translated">&lt;strong&gt;Q.&lt;/strong&gt;準備されたステートメントとは何ですか、なぜそれらが必要なのですか？</target>
        </trans-unit>
        <trans-unit id="bc3aaa8f04d43e44f616656297e0c78c54e1f172" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reason to not use &lt;code&gt;mysql_*&lt;/code&gt; function&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;mysql_*&lt;/code&gt; 関数を使用しない理由&lt;/strong&gt; ：</target>
        </trans-unit>
        <trans-unit id="c7cfb15d4b60ac9b33a75c31e26bd7807779ace0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See the Red Box?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;赤い箱が見える？&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="eb999dd362a05e63929ca191a77eea6b0e5a6b94" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Suppressing deprecation warnings&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;非推奨の警告の抑制&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3c1160a54ccd72e93448ddb4bc662e0ee249f6fc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;They are no longer maintained, and are officially deprecated&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;それらはもはやメンテナンスされておらず、正式に非推奨になっています&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="14c3edf5863da2e2fc42e3f847cd0cec2427b6c7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Use either PDO or MySQLi&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;PDOまたはMySQLiを使用する&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ba557ea612da45ee87ea50fbc09e07ea7b1520ff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yes&lt;/strong&gt;, we can also set some attributes after PDO construction with the &lt;code&gt;setAttribute&lt;/code&gt; method:</source>
          <target state="translated">&lt;strong&gt;はい&lt;/strong&gt; 、 &lt;code&gt;setAttribute&lt;/code&gt; メソッドを使用して、PDOの作成後にいくつかの属性を設定することもできます。</target>
        </trans-unit>
        <trans-unit id="8cf01d9490d0b537b44b782fd8131a614ece8d85" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mysql_*&lt;/strong&gt; functions do not support prepared statements.</source>
          <target state="translated">&lt;strong&gt;mysql_ *&lt;/strong&gt;関数は準備されたステートメントをサポートしません。</target>
        </trans-unit>
        <trans-unit id="e42abeed45b2dfef66fccc34fef34fdbe2a6d2f5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mysql_*&lt;/strong&gt; functions do not support the binding of parameters.</source>
          <target state="translated">&lt;strong&gt;mysql_ *&lt;/strong&gt;関数はパラメーターのバインディングをサポートしていません。</target>
        </trans-unit>
        <trans-unit id="ac0f78e16e8962d33c7f864e2d4cfab79ed85fb4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mysql_*&lt;/strong&gt; functions lack functionality for Object Oriented Programming.</source>
          <target state="translated">&lt;strong&gt;mysql_ *&lt;/strong&gt;関数には、オブジェクト指向プログラミングの機能がありません。</target>
        </trans-unit>
        <trans-unit id="9ab107729188b218548fbdc2bdea183a073fe436" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mysql_*&lt;/strong&gt; functions were deprecated (as of &lt;strong&gt;PHP 5.5&lt;/strong&gt;) given the fact that better functions and code structures were developed. The fact that the function was deprecated means that no more effort will be placed into improving it in terms of performance and security, &lt;strong&gt;which means it is less future proof&lt;/strong&gt;.</source>
          <target state="translated">より優れた関数とコード構造が開発されたという事実を&lt;strong&gt;踏まえて、mysql_ *&lt;/strong&gt;関数は廃止されました（ &lt;strong&gt;PHP 5.5以降&lt;/strong&gt; ）。 この機能が廃止されたという事実は、パフォーマンスとセキュリティの観点から機能を改善するためのこれ以上の努力がなされないこと&lt;strong&gt;を意味し&lt;/strong&gt;ます。 &lt;strong&gt;つまり&lt;/strong&gt; 、 &lt;strong&gt;将来の保証は少なくなります&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="2a9ce00004e2016f2cadb930b22a5cb4bfad93c2" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;&lt;em&gt;Insert and delete will be covered later.&lt;/em&gt;&lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;&lt;em&gt;挿入と削除については後で説明します。&lt;/em&gt;&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="4605e640a44a2903dc29f4d7c4d5f1a5d3a737e6" translate="yes" xml:space="preserve">
          <source>A common practice when using &lt;code&gt;mysql_*&lt;/code&gt; is:</source>
          <target state="translated">&lt;code&gt;mysql_*&lt;/code&gt; を使用する場合の一般的な方法は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="a13839e20b6d574ce0048134aef78b15481c1e5c" translate="yes" xml:space="preserve">
          <source>A simple and short PDO tutorial</source>
          <target state="translated">シンプルで短いPDOのチュートリアル</target>
        </trans-unit>
        <trans-unit id="48250fcdf8841a07f5b1248699a34ceeeef49b50" translate="yes" xml:space="preserve">
          <source>A. &amp;ldquo;&lt;strong&gt;PDO &amp;ndash; PHP Data Objects&lt;/strong&gt; &amp;ndash; is a database access layer providing a uniform method of access to multiple databases.&amp;rdquo;</source>
          <target state="translated">A.「 &lt;strong&gt;PDO（PHP Data Objects&lt;/strong&gt; ）は、複数のデータベースへの統一的なアクセス方法を提供するデータベースアクセスレイヤーです。」</target>
        </trans-unit>
        <trans-unit id="2f434a1f9a23e4564ea51f72e542f32afebac04b" translate="yes" xml:space="preserve">
          <source>API supports Multiple Statements and all MySQL 4.1+ functionality - Supported by MySQLi and mostly also by PDO</source>
          <target state="translated">APIはMultiple StatementsとMySQL 4.1+のすべての機能をサポート-MySQLiとPDOでサポートされています。</target>
        </trans-unit>
        <trans-unit id="1fc3feb37f7a72085af4f28967eb6151ee8d1c5e" translate="yes" xml:space="preserve">
          <source>API supports Stored Procedures: Both MySQLi and PDO</source>
          <target state="translated">APIはストアドプロシージャをサポートしています。MySQLiとPDOの両方</target>
        </trans-unit>
        <trans-unit id="f09f90c57066a24eee0eb4f850c58410d1012793" translate="yes" xml:space="preserve">
          <source>API supports client-side Prepared Statements: Supported only by PDO</source>
          <target state="translated">API はクライアント側の Prepared Statements をサポートしています。PDO でのみサポートされています。</target>
        </trans-unit>
        <trans-unit id="bc6bd620a8604b899ec28a40dd9fd604faf87f73" translate="yes" xml:space="preserve">
          <source>API supports server-side Prepared Statements: Supported by MYSQLi and PDO</source>
          <target state="translated">APIはサーバーサイドのPrepared Statementsをサポートしています。MYSQLiとPDOでサポートされています。</target>
        </trans-unit>
        <trans-unit id="34890013f003ff6a72ea8f3325210ceb78fdcc4d" translate="yes" xml:space="preserve">
          <source>Above point quoted from Quentin's answer</source>
          <target state="translated">Quentinの答えから引用された上記の点</target>
        </trans-unit>
        <trans-unit id="fd9035ed506b5a7ea270a5b3e1a41eff0a713ea2" translate="yes" xml:space="preserve">
          <source>Add them as comma delimited function parameters to &lt;code&gt;pdo_query()&lt;/code&gt;.</source>
          <target state="translated">それらをコンマ区切りの関数パラメーターとして &lt;code&gt;pdo_query()&lt;/code&gt; に追加します。</target>
        </trans-unit>
        <trans-unit id="01fb17f71e8b9143a9904e6eb49ef6a34b6db1f8" translate="yes" xml:space="preserve">
          <source>Also, you can handle by &lt;code&gt;or die()&lt;/code&gt; or we can say like &lt;code&gt;mysql_*&lt;/code&gt;, but it will be really varied. You can hide the dangerous error messages in production by turning &lt;code&gt;display_errors off&lt;/code&gt; and just reading your error log.</source>
          <target state="translated">また、by &lt;code&gt;or die()&lt;/code&gt; または &lt;code&gt;mysql_*&lt;/code&gt; のように処理することもできますが、実際にはさまざまです。 &lt;code&gt;display_errors off&lt;/code&gt; てエラーログを読み取るだけで、本番環境の危険なエラーメッセージを非表示にできます。</target>
        </trans-unit>
        <trans-unit id="65ace5a4919de42d6ac9e8e70a32858585a56919" translate="yes" xml:space="preserve">
          <source>Amazing! Hi-fives all round, the code correctly verified an admin. It's perfect!</source>
          <target state="translated">驚いた!全てのラウンドでハイタッチ、コードは正しく管理者を確認しました。それは完璧です!</target>
        </trans-unit>
        <trans-unit id="67c99697e4cd741a12219ff4ecfee60683efb9b6" translate="yes" xml:space="preserve">
          <source>And a better way is &lt;code&gt;PDO&lt;/code&gt;, and I am now writing a simple &lt;code&gt;PDO&lt;/code&gt; tutorial.</source>
          <target state="translated">そしてより良い方法は &lt;code&gt;PDO&lt;/code&gt; であり、私は今簡単な &lt;code&gt;PDO&lt;/code&gt; チュートリアルを書いています。</target>
        </trans-unit>
        <trans-unit id="120d08ba81249a9f81e7d175247796e5cff77a30" translate="yes" xml:space="preserve">
          <source>And contrary - if you have an abstraction layer between your application code and mysql API - &lt;strong&gt;it doesn't actually matter which engine is used.&lt;/strong&gt; You can use mysql ext until it goes deprecated and then easily rewrite your abstraction class to another engine, &lt;strong&gt;having all the application code intact.&lt;/strong&gt;</source>
          <target state="translated">逆に、アプリケーションコードとmysql APIの間に抽象化レイヤーがある場合、 &lt;strong&gt;実際にどのエンジンを使用するかは問題ではありません。&lt;/strong&gt; mysql extが非推奨になるまで使用でき、その後、抽象化クラスを別のエンジンに簡単に書き換えて、 &lt;strong&gt;すべてのアプリケーションコードをそのままにできます。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="42319ef1243e1cb43dbc04ce225a03a2d0c6b42e" translate="yes" xml:space="preserve">
          <source>And in pdo, this same thing can be done by:</source>
          <target state="translated">そして、pdoでは、これと同じことができる。</target>
        </trans-unit>
        <trans-unit id="0993bf28ecd55614b8bb57ddce1033f985cb8e69" translate="yes" xml:space="preserve">
          <source>And it will be too wordy and most likely unsafe.</source>
          <target state="translated">そして、それはあまりにも言葉が多すぎて、ほとんどの場合、安全ではないでしょう。</target>
        </trans-unit>
        <trans-unit id="f8d456b41786de88a2dbb3af1c629f6c1141c80c" translate="yes" xml:space="preserve">
          <source>And the later PHP developer team has taken the decision to generate &lt;a href=&quot;https://github.com/php/php-src/commit/b7091aaf0137d97cf4aa4a402ec50b3946d369c0&quot;&gt;&lt;strong&gt;&lt;code&gt;E_DEPRECATED&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; errors when users connect to MySQL, whether through &lt;code&gt;mysql_connect()&lt;/code&gt;, &lt;code&gt;mysql_pconnect()&lt;/code&gt; or the implicit connection functionality built into &lt;code&gt;ext/mysql&lt;/code&gt;.</source>
          <target state="translated">後のPHP開発者チームは、ユーザーがMySQLに接続するときに、 &lt;code&gt;mysql_connect()&lt;/code&gt; 、 &lt;code&gt;mysql_pconnect()&lt;/code&gt; 、または &lt;code&gt;ext/mysql&lt;/code&gt; に組み込まれている暗黙的な接続機能を使用して&lt;a href=&quot;https://github.com/php/php-src/commit/b7091aaf0137d97cf4aa4a402ec50b3946d369c0&quot;&gt;&lt;strong&gt; &lt;code&gt;E_DEPRECATED&lt;/code&gt; &lt;/strong&gt;&lt;/a&gt;エラーを生成することを決定しました。</target>
        </trans-unit>
        <trans-unit id="ef4d4c6fb57c79a8162041f226c5e4efb9e26af4" translate="yes" xml:space="preserve">
          <source>And the output is:</source>
          <target state="translated">そしてアウトプットは</target>
        </trans-unit>
        <trans-unit id="968a4fefe78eb6c9a0fb316c9f7ac9217c1ea9fc" translate="yes" xml:space="preserve">
          <source>And you can wrap it in &lt;code&gt;try&lt;/code&gt;-&lt;code&gt;catch&lt;/code&gt;, like below:</source>
          <target state="translated">そして、あなたはそれを &lt;code&gt;try&lt;/code&gt; - &lt;code&gt;catch&lt;/code&gt; でラップすることができます、以下のように：</target>
        </trans-unit>
        <trans-unit id="dedf5ccdeb6bf446ef7cfb01d8db4c4b042b2078" translate="yes" xml:space="preserve">
          <source>Another example:</source>
          <target state="translated">別の例です。</target>
        </trans-unit>
        <trans-unit id="8899017bb75139a8d05c4ded944ef88bb6b69e08" translate="yes" xml:space="preserve">
          <source>Another nice feature for &lt;code&gt;OOP&lt;/code&gt; friends is that named placeholders have the ability to insert objects directly into your database, assuming the properties match the named fields. For example:</source>
          <target state="translated">&lt;code&gt;OOP&lt;/code&gt; フレンドにとってもう1つの優れた機能は、名前付きプレースホルダーが、プロパティが名前付きフィールドと一致すると想定して、オブジェクトをデータベースに直接挿入できることです。 例えば：</target>
        </trans-unit>
        <trans-unit id="498040b4cb115e9716562169981fc9fa03b6e734" translate="yes" xml:space="preserve">
          <source>Any of the new functionality in MySQL 5.1 or later</source>
          <target state="translated">MySQL 5.1 以降の新機能のいずれか</target>
        </trans-unit>
        <trans-unit id="0e5e1aea7f23bc2927b5d23c2cbc5412b05fce82" translate="yes" xml:space="preserve">
          <source>As an example, someone could use &lt;code&gt;&quot;enhzflep); drop table users&quot;&lt;/code&gt; as a username. The old functions will allow executing multiple statements per query, so something like that nasty bugger can delete a whole table.</source>
          <target state="translated">例として、ユーザー名として &lt;code&gt;&quot;enhzflep); drop table users&quot;&lt;/code&gt; を使用することができます。 古い関数では、クエリごとに複数のステートメントを実行できるため、その厄介なバグのようなものがテーブル全体を削除する可能性があります。</target>
        </trans-unit>
        <trans-unit id="d5ad27cf2144b732b070aaef3f6328e7557022c6" translate="yes" xml:space="preserve">
          <source>As explained in the above answers, the alternatives to mysql are mysqli and PDO (PHP Data Objects).</source>
          <target state="translated">上記の回答で説明したように、mysqlに代わるものとしては、mysqliとPDO(PHPデータオブジェクト)があります。</target>
        </trans-unit>
        <trans-unit id="242084bedb9aa3c73ad1bd7da789bee02633449f" translate="yes" xml:space="preserve">
          <source>Because (amongst other reasons) it's much harder to ensure the input data is sanitized. If you use parametrized queries, as one does with PDO or mysqli you can entirely avoid the risk.</source>
          <target state="translated">なぜなら (他の理由の中でも特に)入力データを確実にサニタイズするのがはるかに難しいからです。PDO や mysqli のようにパラメトリッククエリを使えば、そのリスクを完全に回避することができます。</target>
        </trans-unit>
        <trans-unit id="06606943663433f539cbc360dbd06b2bc39a6263" translate="yes" xml:space="preserve">
          <source>Below is an example of how you can do it:</source>
          <target state="translated">以下、その方法の一例を紹介します。</target>
        </trans-unit>
        <trans-unit id="123eebf3efbb03421b5f4b2571c2660d81b303c7" translate="yes" xml:space="preserve">
          <source>Beware that parameter binding still isn't a magic one-stop solution against &lt;em&gt;all&lt;/em&gt; SQL injections. It handles the most common use for data/values. But can't whitelist column name / table identifiers, help with dynamic clause construction, or just plain array value lists.</source>
          <target state="translated">パラメータのバインドは、 &lt;em&gt;すべての&lt;/em&gt; SQLインジェクションに対する魔法のワンストップソリューションではないことに注意してください。 データ/値の最も一般的な用途を処理します。 ただし、列名/テーブル識別子をホワイトリストに登録したり、動的な句の作成を支援したり、単純な配列値リストを作成したりすることはできません。</target>
        </trans-unit>
        <trans-unit id="dbf3abea317b3728874b25d75ef5a69530c550f8" translate="yes" xml:space="preserve">
          <source>Both MySQLi and PDO were introduced in PHP 5.0, whereas MySQL was introduced prior to PHP 3.0. A point to note is that MySQL is included in PHP5.x though deprecated in later versions.</source>
          <target state="translated">MySQLi と PDO は共に PHP 5.0 で導入されましたが、MySQL は PHP 3.0 より前に導入されています。注意点としては、MySQLはPHP5.xに含まれていますが、それ以降のバージョンでは非推奨となっています。</target>
        </trans-unit>
        <trans-unit id="51020afda7d0112c97929b784637a312225d970c" translate="yes" xml:space="preserve">
          <source>Bound parameters can be easy to use</source>
          <target state="translated">バウンドパラメータが使いやすい</target>
        </trans-unit>
        <trans-unit id="300f56277ff5fe0394d55c2ebdaf31a5d9ca5560" translate="yes" xml:space="preserve">
          <source>Brilliant, not enter in the following:</source>
          <target state="translated">ブリリアント、以下に入力しないでください。</target>
        </trans-unit>
        <trans-unit id="13baed15c99f957c80af17236b205876746fb816" translate="yes" xml:space="preserve">
          <source>But as first step just &lt;strong&gt;get rid of the &lt;code&gt;_real_escape_string&lt;/code&gt;&lt;/strong&gt; call.</source>
          <target state="translated">ただし、最初のステップとして&lt;strong&gt;、 &lt;code&gt;_real_escape_string&lt;/code&gt; &lt;/strong&gt;呼び出しを&lt;strong&gt;削除し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="c2b6b6db7e4e3dfb886e45b51b27e98f7d6f7e48" translate="yes" xml:space="preserve">
          <source>But okay, if you don't like the red box in the manual, a problem of choice arises: mysqli or PDO?</source>
          <target state="translated">しかし、大丈夫、マニュアルの赤箱が気に入らない場合は、mysqliかPDOかという選択の問題が発生します。</target>
        </trans-unit>
        <trans-unit id="0ea2f9f9df0901957a54cc00384ae3ecf9e7598f" translate="yes" xml:space="preserve">
          <source>But, in my opinion, the proposed solution is no better either.</source>
          <target state="translated">しかし、私の考えでは、提案されている解決策もそれ以上のものではありません。</target>
        </trans-unit>
        <trans-unit id="87f8df6d2b63e036157cc4d012be4719078a49b1" translate="yes" xml:space="preserve">
          <source>Can be replaced with just an foreach iteration:</source>
          <target state="translated">foreachの繰り返しだけで置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="98de0e635b4201b0c76f621b74657cf746901ace" translate="yes" xml:space="preserve">
          <source>Compare it with usual PDO inserts, when every single field name being repeated six to ten times - in all these numerous named placeholders, bindings, and query definitions.</source>
          <target state="translated">通常のPDOの挿入と比較すると、フィールド名が6回から10回繰り返されている場合、これらの多数の名前付きプレースホルダ、バインディング、およびクエリ定義の中で、すべてのフィールド名が繰り返されます。</target>
        </trans-unit>
        <trans-unit id="f2b2bc84e981266a2ed8528d294c0bc718096013" translate="yes" xml:space="preserve">
          <source>Compare this one single line with &lt;a href=&quot;https://stackoverflow.com/a/15991146/285587&quot;&gt;amount of code you will need with PDO&lt;/a&gt;.</source>
          <target state="translated">この1行&lt;a href=&quot;https://stackoverflow.com/a/15991146/285587&quot;&gt;をPDOで必要になるコードの量と&lt;/a&gt;比較してください。</target>
        </trans-unit>
        <trans-unit id="46ead4045fbadbc2f0b37b6046e5803972459710" translate="yes" xml:space="preserve">
          <source>Compression</source>
          <target state="translated">Compression</target>
        </trans-unit>
        <trans-unit id="9f82982d2197b2fb50ef5bc31251b1e69637c99f" translate="yes" xml:space="preserve">
          <source>Congrats, you just allowed me to enter your super-protected admins only section with me entering a false username and a false password. Seriously, if you don't believe me, create the database with the code I provided, and run this PHP code - which at glance REALLY does seem to verify the username and password rather nicely.</source>
          <target state="translated">おめでとう、あなたは私が偽のユーザー名と偽のパスワードを入力することで、あなたの超保護された管理者専用のセクションに入ることを許してくれました。もし私の言うことが信じられないのであれば、私が提供したコードでデータベースを作成し、このPHPコードを実行してみてください。</target>
        </trans-unit>
        <trans-unit id="9cdd246b67ff3115cf8e58af1aa4662b256a8fa8" translate="yes" xml:space="preserve">
          <source>Connecting to MySQL</source>
          <target state="translated">MySQLへの接続</target>
        </trans-unit>
        <trans-unit id="f84015d92e165e7b3f840594a075b9ee6030c2a1" translate="yes" xml:space="preserve">
          <source>Correct order would have been: deprecatedly &lt;code&gt;stripslashes&lt;/code&gt; as the innermost call, then &lt;code&gt;trim&lt;/code&gt;, afterwards &lt;code&gt;strip_tags&lt;/code&gt;, &lt;code&gt;htmlentities&lt;/code&gt; for output context, and only lastly the &lt;code&gt;_escape_string&lt;/code&gt; as its application should directly preceed the SQL intersparsing.</source>
          <target state="translated">正しい順序は次のとおりです。非推奨に最も内側の呼び出しとして &lt;code&gt;stripslashes&lt;/code&gt; 、次に &lt;code&gt;trim&lt;/code&gt; し 、その後 &lt;code&gt;strip_tags&lt;/code&gt; 、出力コンテキストの &lt;code&gt;htmlentities&lt;/code&gt; 、そして最後に &lt;code&gt;_escape_string&lt;/code&gt; をアプリケーションがSQLインターパースの直前に置く必要があります。</target>
        </trans-unit>
        <trans-unit id="274ac70de9ee561047b2d6020375c34942dc13aa" translate="yes" xml:space="preserve">
          <source>Doesn't support &lt;a href=&quot;http://en.wikipedia.org/wiki/Database_transaction&quot;&gt;transactions&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/Database_transaction&quot;&gt;トランザクションを&lt;/a&gt;サポートしていません</target>
        </trans-unit>
        <trans-unit id="5b91190ed508aa1ebccf4667808bf07650ab04f8" translate="yes" xml:space="preserve">
          <source>Doesn't support Multiple Statements (who need them?)</source>
          <target state="translated">複数のステートメントをサポートしていない(誰が必要としているのか?</target>
        </trans-unit>
        <trans-unit id="d44232efd1fd248676980ae2cdc482a57df4a84c" translate="yes" xml:space="preserve">
          <source>Doesn't support Prepared Statements or Parametrized Queries</source>
          <target state="translated">プリペアド ステートメントやパラメトリック クエリはサポートしていません。</target>
        </trans-unit>
        <trans-unit id="6c479d1a8515470d066edea5ea563b89e68cc6f8" translate="yes" xml:space="preserve">
          <source>Doesn't support Stored Procedures (we were using &lt;code&gt;mysql_query(&quot;CALL my_proc&quot;);&lt;/code&gt; for ages)</source>
          <target state="translated">ストアドプロシージャをサポートしていません（ &lt;code&gt;mysql_query(&quot;CALL my_proc&quot;);&lt;/code&gt; を使用していました）。</target>
        </trans-unit>
        <trans-unit id="866143011c8a05791bf29b94865c70519ad71e72" translate="yes" xml:space="preserve">
          <source>Doesn't support Transactions (same as above)</source>
          <target state="translated">トランザクションに対応していない(同上</target>
        </trans-unit>
        <trans-unit id="fce860154fdb146e5f646b4901b94461c45d68e0" translate="yes" xml:space="preserve">
          <source>Doesn't support all of the functionality in MySQL 5.1</source>
          <target state="translated">MySQL 5.1 のすべての機能をサポートしていない</target>
        </trans-unit>
        <trans-unit id="3cf92a22337ed0b5bde371c6efea5d06737ca874" translate="yes" xml:space="preserve">
          <source>Doesn't support multiple statements</source>
          <target state="translated">複数のステートメントをサポートしていない</target>
        </trans-unit>
        <trans-unit id="864e78e1d6a762f1e100177dd6406de3ab443864" translate="yes" xml:space="preserve">
          <source>Doesn't support non-blocking, asynchronous queries</source>
          <target state="translated">ノンブロッキングの非同期クエリはサポートしていません。</target>
        </trans-unit>
        <trans-unit id="d1636c7a918bc55871631f47bbb14d7249b434bf" translate="yes" xml:space="preserve">
          <source>Doesn't support prepared statements or &lt;a href=&quot;http://en.wikipedia.org/wiki/Prepared_statement&quot;&gt;parameterized queries&lt;/a&gt;</source>
          <target state="translated">準備されたステートメントまたは&lt;a href=&quot;http://en.wikipedia.org/wiki/Prepared_statement&quot;&gt;パラメーター化されたクエリを&lt;/a&gt;サポートしていません</target>
        </trans-unit>
        <trans-unit id="2b1078a18b28afd9f7f8df361d462c8be33bb483" translate="yes" xml:space="preserve">
          <source>Doesn't support stored procedures</source>
          <target state="translated">ストアドプロシージャをサポートしていない</target>
        </trans-unit>
        <trans-unit id="913e0c4a5ec4213ac6b0e5bc84a0b4952dd23744" translate="yes" xml:space="preserve">
          <source>Doesn't support:</source>
          <target state="translated">サポートしていません。</target>
        </trans-unit>
        <trans-unit id="3a2186dd09a53f0acfd3661a66ceb59c176eaf88" translate="yes" xml:space="preserve">
          <source>Ease of use</source>
          <target state="translated">使いやすさ</target>
        </trans-unit>
        <trans-unit id="db8c650e4e279285960b1784a6fbbece934a01e3" translate="yes" xml:space="preserve">
          <source>Embedded server support</source>
          <target state="translated">組み込みサーバーのサポート</target>
        </trans-unit>
        <trans-unit id="6d7b79456a20370d710fa37e809943165d11f572" translate="yes" xml:space="preserve">
          <source>Encryption (SSL)</source>
          <target state="translated">暗号化(SSL</target>
        </trans-unit>
        <trans-unit id="5b860d134c5b348f6cc8170ac43f9694cf148a8f" translate="yes" xml:space="preserve">
          <source>Enhanced debugging capabilities</source>
          <target state="translated">デバッグ機能の強化</target>
        </trans-unit>
        <trans-unit id="6f31dd815c428bc663ce257d3df663a6858bc6b0" translate="yes" xml:space="preserve">
          <source>Enter in the following:</source>
          <target state="translated">以下に入力してください。</target>
        </trans-unit>
        <trans-unit id="09fa2a067aee2197e8eb1a89b00eefbf6e88e347" translate="yes" xml:space="preserve">
          <source>Equivalent pdo_* functions in place of &lt;s&gt;mysql_*&lt;/s&gt;</source>
          <target state="translated">mysql_ *の代わりに同等のpdo_ *関数</target>
        </trans-unit>
        <trans-unit id="5fff1f56919b006049c274c6c76fbbe56470ee4c" translate="yes" xml:space="preserve">
          <source>Error Handling</source>
          <target state="translated">エラー処理</target>
        </trans-unit>
        <trans-unit id="2f3b48eb0edc6001d7879dc58945e065cc2e3e5a" translate="yes" xml:space="preserve">
          <source>Error handling is much easier in &lt;code&gt;PDO&lt;/code&gt; than &lt;code&gt;mysql_*&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;PDO&lt;/code&gt; でのエラー処理は &lt;code&gt;mysql_*&lt;/code&gt; よりはるかに簡単です。</target>
        </trans-unit>
        <trans-unit id="fec40d777dec6257585f890975134a9cea348678" translate="yes" xml:space="preserve">
          <source>Errors and error handling &amp;para;</source>
          <target state="translated">エラーとエラー処理&amp;para;</target>
        </trans-unit>
        <trans-unit id="c019ec3bcff0bb2854b0e299ba32a9eee4bd0ee3" translate="yes" xml:space="preserve">
          <source>Et voil&amp;agrave;.</source>
          <target state="translated">Etvoil&amp;agrave;。</target>
        </trans-unit>
        <trans-unit id="1286a514865def6edb80f749d66c5420df3e9cc2" translate="yes" xml:space="preserve">
          <source>Exceptions &amp;para;</source>
          <target state="translated">例外&amp;para;</target>
        </trans-unit>
        <trans-unit id="ca51f996bb09297e02939f7b41f4c178b7775704" translate="yes" xml:space="preserve">
          <source>Fetch Modes</source>
          <target state="translated">フェッチモード</target>
        </trans-unit>
        <trans-unit id="0cda57057d1816d4de9cdbd01aece5021ed7c626" translate="yes" xml:space="preserve">
          <source>First of all, I explain how to select fetch mode:</source>
          <target state="translated">まず、フェッチモードの選択方法について説明します。</target>
        </trans-unit>
        <trans-unit id="17ba645d365edcb5b41c66ee76e97181eab4127f" translate="yes" xml:space="preserve">
          <source>First off, please feel free to create this test mysql database (I have called mine prep):</source>
          <target state="translated">まず最初に、このテストmysqlデータベース(私は地雷予備軍と呼んでいます)を作成してください。</target>
        </trans-unit>
        <trans-unit id="dde1356568f59e4b14dee0b21b6e2107618e0338" translate="yes" xml:space="preserve">
          <source>First, let's begin with the standard comment we give everyone:</source>
          <target state="translated">まずは、誰にでもつける定番のコメントから始めましょう。</target>
        </trans-unit>
        <trans-unit id="5659b9d449b5b012e0b098e81e7ed2f20fe0f375" translate="yes" xml:space="preserve">
          <source>Fix or remove any oldschool &lt;a href=&quot;https://stackoverflow.com/questions/3126072/what-are-the-best-php-input-sanitizing-functions&quot;&gt;&lt;code&gt;sanitize()&lt;/code&gt;&lt;/a&gt; function</source>
          <target state="translated">オールドスクールの&lt;a href=&quot;https://stackoverflow.com/questions/3126072/what-are-the-best-php-input-sanitizing-functions&quot;&gt; &lt;code&gt;sanitize()&lt;/code&gt; &lt;/a&gt;関数を修正または削除する</target>
        </trans-unit>
        <trans-unit id="3aa75d58669bb5ac8b40367ea713bcccf7011235" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;strong&gt;&lt;a href=&quot;https://stackoverflow.com/questions/60174/best-way-to-prevent-sql-injection-in-php&quot;&gt;How can I prevent SQL injection in PHP?&lt;/a&gt;&lt;/strong&gt;</source>
          <target state="translated">詳細について&lt;strong&gt;&lt;a href=&quot;https://stackoverflow.com/questions/60174/best-way-to-prevent-sql-injection-in-php&quot;&gt;は、PHPでSQLインジェクションを防ぐに&lt;/a&gt;&lt;/strong&gt;は&lt;strong&gt;どうすればよいですか？を&lt;/strong&gt;参照してください&lt;strong&gt;。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="07593710668e04f42ef94baca94b6702963b9675" translate="yes" xml:space="preserve">
          <source>Full Charset support</source>
          <target state="translated">フルチャセット対応</target>
        </trans-unit>
        <trans-unit id="55dc1ba13909c533de685b19d9a8793a296b2045" translate="yes" xml:space="preserve">
          <source>Get rid of &lt;code&gt;'&lt;/code&gt; single quotes that previously enclosed string values/variables.</source>
          <target state="translated">&lt;code&gt;'&lt;/code&gt; 以前に文字列値/変数を囲んでいた一重引用符を取り除きます。</target>
        </trans-unit>
        <trans-unit id="6eed48caa38c8545e4fcf00ca0a37b5a7cf30396" translate="yes" xml:space="preserve">
          <source>Has been &lt;strong&gt;&lt;a href=&quot;https://wiki.php.net/rfc/remove_deprecated_functionality_in_php7#extmysql&quot;&gt;removed&lt;/a&gt; entirely&lt;/strong&gt; as of PHP 7.0 (released December 2015)</source>
          <target state="translated">PHP 7.0（2015年12月リリース）から&lt;strong&gt;完全に&lt;a href=&quot;https://wiki.php.net/rfc/remove_deprecated_functionality_in_php7#extmysql&quot;&gt;削除&lt;/a&gt;さ&lt;/strong&gt;れました。</target>
        </trans-unit>
        <trans-unit id="292c37ca19719be96899acb843e9a5c01e00d6c6" translate="yes" xml:space="preserve">
          <source>Here I think you are familiar with all except &lt;code&gt;DSN&lt;/code&gt;; this is new in &lt;code&gt;PDO&lt;/code&gt;. A &lt;code&gt;DSN&lt;/code&gt; is basically a string of options that tell &lt;code&gt;PDO&lt;/code&gt; which driver to use, and connection details. For further reference, check &lt;a href=&quot;http://www.php.net/manual/en/ref.pdo-mysql.connection.php&quot;&gt;PDO MySQL DSN&lt;/a&gt;.</source>
          <target state="translated">ここでは、 &lt;code&gt;DSN&lt;/code&gt; 以外のすべてに精通していると思います。 これは &lt;code&gt;PDO&lt;/code&gt; の新機能です。 &lt;code&gt;DSN&lt;/code&gt; は基本的に、使用するドライバーと接続の詳細を &lt;code&gt;PDO&lt;/code&gt; に指示する一連のオプションです。 詳細については、 &lt;a href=&quot;http://www.php.net/manual/en/ref.pdo-mysql.connection.php&quot;&gt;PDO MySQL DSNを&lt;/a&gt;確認してください。</target>
        </trans-unit>
        <trans-unit id="019fa0bc748b8d714e14e0a14973bd4b152ee106" translate="yes" xml:space="preserve">
          <source>Here are some examples based on my &lt;a href=&quot;https://github.com/colshrapnel/safemysql/blob/master/safemysql.class.php&quot;&gt;safemysql class&lt;/a&gt; to show how such an abstraction class ought to be:</source>
          <target state="translated">このような抽象クラスがどうあるべきかを示すために、私の&lt;a href=&quot;https://github.com/colshrapnel/safemysql/blob/master/safemysql.class.php&quot;&gt;safemysqlクラス&lt;/a&gt;に基づいたいくつかの例を以下に示します。</target>
        </trans-unit>
        <trans-unit id="e75030adb468b3a20795417b746e352d74186766" translate="yes" xml:space="preserve">
          <source>How about:</source>
          <target state="translated">どうですか?</target>
        </trans-unit>
        <trans-unit id="f26d6694fb7f66ecaf4fa1fbfe7bfe24ef194112" translate="yes" xml:space="preserve">
          <source>How prepared statements differ</source>
          <target state="translated">準備書面の違い</target>
        </trans-unit>
        <trans-unit id="ad5800a3aa56f013a36e72eea8f14ecf9737e3a7" translate="yes" xml:space="preserve">
          <source>However &lt;code&gt;PDO&lt;/code&gt; and/or &lt;code&gt;MySQLi&lt;/code&gt; are not completely safe. Check the answer &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/a/12202218/1723893&quot;&gt;Are PDO prepared statements sufficient to prevent SQL injection?&lt;/a&gt;&lt;/em&gt; by &lt;a href=&quot;https://stackoverflow.com/users/338665/ircmaxell&quot;&gt;ircmaxell&lt;/a&gt;. Also, I am quoting some part from his answer:</source>
          <target state="translated">ただし、 &lt;code&gt;PDO&lt;/code&gt; や &lt;code&gt;MySQLi&lt;/code&gt; は完全に安全ではありません。 回答を確認してください&lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/a/12202218/1723893&quot;&gt;PDOの準備済みステートメントはSQLインジェクションを防ぐのに十分ですか？&lt;/a&gt;&lt;/em&gt; によって&lt;a href=&quot;https://stackoverflow.com/users/338665/ircmaxell&quot;&gt;ircmaxell&lt;/a&gt; 。 また、私は彼の答えから一部を引用しています：</target>
        </trans-unit>
        <trans-unit id="de3f6b6dffdfbc0e7f9d59202608ca2d11708387" translate="yes" xml:space="preserve">
          <source>However, PDO is not a silver bullet too and has its hardships.</source>
          <target state="translated">しかし、PDOも銀の弾丸ではありませんし、苦労もあります。</target>
        </trans-unit>
        <trans-unit id="2326670ae94db3911611b4826e5793726e96d9a3" translate="yes" xml:space="preserve">
          <source>However, this isn't about folks yelling at you now, this is about showing you how to make your code more secure.</source>
          <target state="translated">しかし、これは怒鳴っている人のことではなく、コードをより安全にする方法を示しているのです。</target>
        </trans-unit>
        <trans-unit id="c9bbba0df8331566d9a670652804604f09ff8317" translate="yes" xml:space="preserve">
          <source>Hybrid PDO use</source>
          <target state="translated">ハイブリッドPDOの使用</target>
        </trans-unit>
        <trans-unit id="5e7fba6fe256396d77ecf48550f90f920c0cc0f5" translate="yes" xml:space="preserve">
          <source>I find the above answers really lengthy, so to summarize:</source>
          <target state="translated">上記の回答は本当に長文になってしまいましたので、要約しますと</target>
        </trans-unit>
        <trans-unit id="f888fecc5715ba4d43b06bf6c44a1576614e0cd5" translate="yes" xml:space="preserve">
          <source>I will later explain why prepare emulation should be turned off. To find reason please check &lt;a href=&quot;https://stackoverflow.com/a/12202218/1723893&quot;&gt;this post&lt;/a&gt;.</source>
          <target state="translated">後で、準備エミュレーションをオフにする必要がある理由を説明します。 理由を見つけるには、 &lt;a href=&quot;https://stackoverflow.com/a/12202218/1723893&quot;&gt;この投稿&lt;/a&gt;をチェックしてください。</target>
        </trans-unit>
        <trans-unit id="28dfd8eb5aa64d92b1531d7f65006651386ac1e5" translate="yes" xml:space="preserve">
          <source>If one were to use PDO of mysqli, the user-name would end-up being &lt;code&gt;&quot;enhzflep); drop table users&quot;&lt;/code&gt;.</source>
          <target state="translated">mysqliのPDOを使用すると、ユーザー名は &lt;code&gt;&quot;enhzflep); drop table users&quot;&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="4376248962eeae9e24a09673cabe25c9fe2dda0b" translate="yes" xml:space="preserve">
          <source>If there is any connection error, it will throw a &lt;code&gt;PDOException&lt;/code&gt; object that can be caught to handle &lt;code&gt;Exception&lt;/code&gt; further.</source>
          <target state="translated">接続エラーがある場合は、キャッチして &lt;code&gt;Exception&lt;/code&gt; さらに処理できる &lt;code&gt;PDOException&lt;/code&gt; オブジェクトをスローします。</target>
        </trans-unit>
        <trans-unit id="94d17d9e7f39fa252ce5b88628ec7ce8a80613f1" translate="yes" xml:space="preserve">
          <source>If there was any mention of &lt;code&gt;stripslashes()&lt;/code&gt; in your sanitize function, it may indicate a higher level oversight.</source>
          <target state="translated">sanitize関数で &lt;code&gt;stripslashes()&lt;/code&gt; について言及があった場合は、より高いレベルの監視を示している可能性があります。</target>
        </trans-unit>
        <trans-unit id="4b4c10e7726c178ac937120403512eeb1525dc8e" translate="yes" xml:space="preserve">
          <source>If they don't work on my site, why do I get errors like</source>
          <target state="translated">私のサイトで動作しない場合、なぜ次のようなエラーが発生するのでしょうか?</target>
        </trans-unit>
        <trans-unit id="846ece56704dd1bb57e31e8af6a84a5ac5a26943" translate="yes" xml:space="preserve">
          <source>If you need more reasons:</source>
          <target state="translated">もっと理由が必要なら</target>
        </trans-unit>
        <trans-unit id="c46e5bd047077b5ae27ca605ac5c2cfb2afbb0b6" translate="yes" xml:space="preserve">
          <source>If you need them - these are no doubt technical reasons to move away from mysql extension toward something more stylish and modern-looking.</source>
          <target state="translated">あなたがそれらを必要とする場合-これらは、よりスタイリッシュでモダンな外観の何かに向かってmysqlの拡張子から離れて移動するための技術的な理由であることは間違いありません。</target>
        </trans-unit>
        <trans-unit id="2407ac2d8afe5ad1d4210ba943dda290fb411756" translate="yes" xml:space="preserve">
          <source>If you understand the necessity of using a &lt;em&gt;database abstraction layer&lt;/em&gt; and looking for an API to create one, &lt;strong&gt;mysqli&lt;/strong&gt; is a very good choice, as it indeed supports many mysql-specific features.</source>
          <target state="translated">&lt;em&gt;データベースアブストラクションレイヤー&lt;/em&gt;を使用する必要性を理解し、それを作成するためのAPIを探す場合、実際に多くのmysql固有の機能をサポートしているため、 &lt;strong&gt;mysqli&lt;/strong&gt;は非常に良い選択です。</target>
        </trans-unit>
        <trans-unit id="d41a7c07f4fd244d7cfdcf97a95a4ac1ba508f7c" translate="yes" xml:space="preserve">
          <source>If you want to simplify your database interaction further, mappers like &lt;a href=&quot;http://j4mie.github.io/idiormandparis/&quot;&gt;Paris/Idiorm&lt;/a&gt; are worth a try. Just like nobody uses the bland DOM in JavaScript anymore, you don't have to babysit a raw database interface nowadays.</source>
          <target state="translated">データベースの相互作用をさらに単純化したい場合は、 &lt;a href=&quot;http://j4mie.github.io/idiormandparis/&quot;&gt;Paris / Idiormの&lt;/a&gt;ようなマッパーが試してみる価値があります。 JavaScriptで平凡なDOMを使用する人がいないのと同じように、現在、未加工のデータベースインターフェースをベビーシットする必要はありません。</target>
        </trans-unit>
        <trans-unit id="a03e56ddd1d9eaedeb9d91db1610b19c15481de8" translate="yes" xml:space="preserve">
          <source>If, like vast majority of PHP folks, you are using raw API calls right in the application code (which is essentially wrong practice) - &lt;strong&gt;PDO is the only choice&lt;/strong&gt;, as this extension pretends to be not just API but rather a semi-DAL, still incomplete but offers many important features, with two of them makes PDO critically distinguished from mysqli:</source>
          <target state="translated">ほとんどのPHP関係者のように、アプリケーションコードで直接API呼び出しを使用している場合（これは基本的に間違った方法です）-この拡張機能はAPIだけでなくセミDALのふりをしているため、 &lt;strong&gt;PDOが唯一の選択肢です&lt;/strong&gt; 。まだ不完全ですが、多くの重要な機能を提供します。そのうちの2つは、PDOをmysqliと明確に区​​別します。</target>
        </trans-unit>
        <trans-unit id="5f5e48429d30c2e5c8c7ca18ee430f4c425e3ebe" translate="yes" xml:space="preserve">
          <source>In PDO Data, it is obtained via the &lt;code&gt;-&amp;gt;fetch()&lt;/code&gt;, a method of your statement handle. Before calling fetch, the best approach would be telling PDO how you&amp;rsquo;d like the data to be fetched. In the below section I am explaining this.</source>
          <target state="translated">PDOデータでは、ステートメントハンドルのメソッドである &lt;code&gt;-&amp;gt;fetch()&lt;/code&gt; を介して取得されます。 fetchを呼び出す前に、最善の方法は、データをどのようにフェッチするかをPDOに指示することです。 以下のセクションでは、これについて説明します。</target>
        </trans-unit>
        <trans-unit id="3859a21002fff48190278b32ba00eefe967fe002" translate="yes" xml:space="preserve">
          <source>In particular you should fix any &lt;code&gt;sanitize&lt;/code&gt; or &lt;code&gt;clean&lt;/code&gt; or &lt;code&gt;filterThis&lt;/code&gt; or &lt;code&gt;clean_data&lt;/code&gt; functions as advertised by dated tutorials in one form or the other:</source>
          <target state="translated">特に、いずれかの形式の日付付きチュートリアルでアドバタイズされた &lt;code&gt;clean_data&lt;/code&gt; 、 &lt;code&gt;clean&lt;/code&gt; または &lt;code&gt;filterThis&lt;/code&gt; またはclean_data関数を修正する必要があります。</target>
        </trans-unit>
        <trans-unit id="ba93b0ae18afe09edfc1991f28f940835559bcc0" translate="yes" xml:space="preserve">
          <source>In the above query &lt;a href=&quot;http://php.net/manual/en/pdo.exec.php&quot;&gt;&lt;code&gt;PDO::exec&lt;/code&gt;&lt;/a&gt; execute an SQL statement and returns the number of affected rows.</source>
          <target state="translated">上記のクエリでは、 &lt;a href=&quot;http://php.net/manual/en/pdo.exec.php&quot;&gt; &lt;code&gt;PDO::exec&lt;/code&gt; &lt;/a&gt;はSQLステートメントを実行し、影響を受けた行の数を返します。</target>
        </trans-unit>
        <trans-unit id="37976e7c9d1ceb09ad128295fdb921a6584e75ca" translate="yes" xml:space="preserve">
          <source>In the above, I have been using &lt;code&gt;fetch()&lt;/code&gt;. You can also use:</source>
          <target state="translated">上記では、私は &lt;code&gt;fetch()&lt;/code&gt; を使用しています。 次のものも使用できます。</target>
        </trans-unit>
        <trans-unit id="838f76e4ca8001fae4cd38b944929578bd91104a" translate="yes" xml:space="preserve">
          <source>In the above, you can see those &lt;code&gt;?&lt;/code&gt; instead of a name like in a name place holder. Now in the first example, we assign variables to the various placeholders (&lt;code&gt;$stmt-&amp;gt;bindValue(1, $name, PDO::PARAM_STR);&lt;/code&gt;). Then, we assign values to those placeholders and execute the statement. In the second example, the first array element goes to the first &lt;code&gt;?&lt;/code&gt; and the second to the second &lt;code&gt;?&lt;/code&gt;.</source>
          <target state="translated">上記では、それらを見ることができます &lt;code&gt;?&lt;/code&gt; 名前プレースホルダーのような名前の代わりに。 最初の例では、変数をさまざまなプレースホルダーに割り当てます（ &lt;code&gt;$stmt-&amp;gt;bindValue(1, $name, PDO::PARAM_STR);&lt;/code&gt; ）。 次に、それらのプレースホルダーに値を割り当て、ステートメントを実行します。 2番目の例では、最初の配列要素は最初の &lt;code&gt;?&lt;/code&gt; そして2番目から2番目 &lt;code&gt;?&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="51e69d1bd76f27cf149eed630feb3e8bbbe3e693" translate="yes" xml:space="preserve">
          <source>Insert and Update or Delete statements</source>
          <target state="translated">ステートメントの挿入と更新または削除</target>
        </trans-unit>
        <trans-unit id="f6116d88666e16df0efbdad2df064412c9f30a13" translate="yes" xml:space="preserve">
          <source>Instead of using &lt;code&gt;mysql_num_rows&lt;/code&gt; to get the number of returned rows, you can get a &lt;code&gt;PDOStatement&lt;/code&gt; and do &lt;code&gt;rowCount()&lt;/code&gt;, like:</source>
          <target state="translated">&lt;code&gt;mysql_num_rows&lt;/code&gt; を使用して返された行の数を取得する代わりに、 &lt;code&gt;PDOStatement&lt;/code&gt; を取得して、次のように &lt;code&gt;rowCount()&lt;/code&gt; を実行できます 。</target>
        </trans-unit>
        <trans-unit id="2f4f5b358872d7afce164df88c9ed86e13417775" translate="yes" xml:space="preserve">
          <source>Is &lt;strong&gt;officially &lt;a href=&quot;https://wiki.php.net/rfc/mysql_deprecation&quot;&gt;deprecated&lt;/a&gt;&lt;/strong&gt; as of PHP 5.5 (released June 2013).</source>
          <target state="translated">PHP 5.5（2013年6月リリース）から&lt;strong&gt;正式に&lt;a href=&quot;https://wiki.php.net/rfc/mysql_deprecation&quot;&gt;非推奨になり&lt;/a&gt;&lt;/strong&gt;ました。</target>
        </trans-unit>
        <trans-unit id="f27190c0d5f51b1ca6eb014f6b10e0503b10a2e9" translate="yes" xml:space="preserve">
          <source>Is not under active development</source>
          <target state="translated">積極的な開発中ではない</target>
        </trans-unit>
        <trans-unit id="dcf8be11b129ed1d3fa675563db73c8506041b9b" translate="yes" xml:space="preserve">
          <source>It is only usable if you are using an old version of &lt;code&gt;MySQL&lt;/code&gt; which I do not recommended.</source>
          <target state="translated">私がお勧めしない古いバージョンの &lt;code&gt;MySQL&lt;/code&gt; を使用している場合にのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="5e9565aafd703c4317b924ba9cdbc3c14be98c98" translate="yes" xml:space="preserve">
          <source>It seems to me &lt;strong&gt;too idealistic&lt;/strong&gt; a dream that all those PHP users will learn how to handle SQL queries properly at once. Most likely they would just change mysql_* to mysqli_* mechanically, &lt;strong&gt;leaving the approach the same&lt;/strong&gt;. Especially because mysqli makes prepared statements usage incredible painful and troublesome.</source>
          <target state="translated">これらのすべてのPHPユーザーがSQLクエリを一度に適切に処理する方法を学ぶことは、 &lt;strong&gt;あまりにも理想的&lt;/strong&gt;な夢のようです。 ほとんどの場合、彼らはmysql_ *をmysqli_ *に機械的に変更するだけで&lt;strong&gt;、アプローチは同じ&lt;/strong&gt;です。 特にmysqliは準備されたステートメントの使用を信じられないほど苦痛で面倒にするためです。</target>
        </trans-unit>
        <trans-unit id="ffe81de05696768d78038c224645412434af0ab5" translate="yes" xml:space="preserve">
          <source>It's best to start at simplifying again however. For example the common result fetching:</source>
          <target state="translated">しかし、再び単純化することから始めるのがベストです。例えば、一般的な結果のフェッチ。</target>
        </trans-unit>
        <trans-unit id="7bd40f368444a59ce546d97ec42b7235ad3f6390" translate="yes" xml:space="preserve">
          <source>It's mostly the &lt;em&gt;bound parameters&lt;/em&gt; which can simplify code. And with &lt;a href=&quot;https://stackoverflow.com/a/14110189&quot;&gt;excellent tutorials (as seen above)&lt;/a&gt; the transition to &lt;a href=&quot;http://php.net/PDO&quot;&gt;PDO&lt;/a&gt; isn't overly arduous.</source>
          <target state="translated">コードを簡略化できるのは、主に&lt;em&gt;バインドされたパラメーター&lt;/em&gt;です。 &lt;a href=&quot;https://stackoverflow.com/a/14110189&quot;&gt;（上記のように）優れたチュートリアル&lt;/a&gt;が&lt;a href=&quot;http://php.net/PDO&quot;&gt;あれ&lt;/a&gt;ば、 PDOへの移行はそれほど難しくありません。</target>
        </trans-unit>
        <trans-unit id="48bb63e397a815a1d4028b30f85fed998e978b00" translate="yes" xml:space="preserve">
          <source>It's possible to define almost all &lt;code&gt;mysql_*&lt;/code&gt; functions using mysqli or PDO. Just include them on top of your old PHP application, and it will work on PHP7. My solution &lt;a href=&quot;https://github.com/sunhater/php7-mysql/blob/master/php7-mysql.php&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">mysqliまたはPDOを使用して、ほぼすべての &lt;code&gt;mysql_*&lt;/code&gt; 関数を定義できます。 古いPHPアプリケーションの上にそれらを含めるだけで、PHP7で動作します。 私の解決策は&lt;a href=&quot;https://github.com/sunhater/php7-mysql/blob/master/php7-mysql.php&quot;&gt;こちら&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="0e54f725cef35b6c2a077269e4ced4587f8f5e96" translate="yes" xml:space="preserve">
          <source>Just don't escape a variable &lt;em&gt;and&lt;/em&gt; bind it in the same query.</source>
          <target state="translated">変数&lt;em&gt;を&lt;/em&gt;エスケープせず、同じクエリにバインドしないでください。</target>
        </trans-unit>
        <trans-unit id="5cc04691e5722139d5540eb38b3f8fdedafc04b3" translate="yes" xml:space="preserve">
          <source>Just switching to &lt;a href=&quot;/questions/tagged/pdo&quot;&gt;pdo&lt;/a&gt; doesn't quite cut it. &lt;code&gt;pdo_query()&lt;/code&gt; is also just a frontend onto it.</source>
          <target state="translated">&lt;a href=&quot;/questions/tagged/pdo&quot;&gt;pdoに&lt;/a&gt;切り替えただけでは完全にうまくいきません。 &lt;code&gt;pdo_query()&lt;/code&gt; も、それに対する単なるフロントエンドです。</target>
        </trans-unit>
        <trans-unit id="66ec5c04732160bf6b782f5fc5a7fd3d0a54ffb2" translate="yes" xml:space="preserve">
          <source>Lack of support for prepared statements is particularly important as they provide a clearer, less error prone method of escaping and quoting external data than manually escaping it with a separate function call.</source>
          <target state="translated">準備された文のサポートがないことは、外部データを手動で別の関数を呼び出してエスケープするよりも、明確でエラーが発生しにくい方法を提供しているため、特に重要です。</target>
        </trans-unit>
        <trans-unit id="ef74674a0032ecad5b46a45642e5b320f61a0320" translate="yes" xml:space="preserve">
          <source>Lack of support for prepared statements is particularly important as they provide a clearer, less error-prone method of escaping and quoting external data than manually escaping it with a separate function call.</source>
          <target state="translated">準備されたステートメントのサポートがないことは、外部データを手動で別の関数を呼び出してエスケープするよりも、明確でエラーの発生しにくい方法を提供するため、特に重要です。</target>
        </trans-unit>
        <trans-unit id="a5c76c162b06e13ac4bcdfd672e71bd3f45ca6a4" translate="yes" xml:space="preserve">
          <source>Lacks an OO interface</source>
          <target state="translated">OOインターフェースを欠いている</target>
        </trans-unit>
        <trans-unit id="f4466bc90729ac480010ac96a72f88b0375e70c8" translate="yes" xml:space="preserve">
          <source>Lacks an OO interface (to create one is a matter of several hours)</source>
          <target state="translated">OOインターフェースを欠いている(作るのは数時間の問題)</target>
        </trans-unit>
        <trans-unit id="1d16e278bd69ab650d0b2ca2923fa1b532adb204" translate="yes" xml:space="preserve">
          <source>Lastly, this isn't to say that this is PERFECT code. There are many more things that you could do to improve it, use hashed passwords for example, ensure that when you store sensetive information in the database, you don't store it in plain text, have multiple levels of verification - but really, if you just change your old injection prone code to this, you will be WELL along the way to writing good code - and the fact that you have gotten this far and are still reading gives me a sense of hope that you will not only implement this type of code when writing your websites and applications, but that you might go out and research those other things I just mentioned - and more. Write the best code you can, not the most basic code that barely functions.</source>
          <target state="translated">最後に、これはこれが完璧なコードだと言うことではありません。改善するためにできることはもっとたくさんあります。例えば、ハッシュ化されたパスワードを使用したり、データベースに感覚的な情報を保存するときに、プレーンテキストで保存しないようにしたり、複数のレベルの検証をしたり-しかし、本当に、あなたの古いインジェクションが発生しやすいコードをこれに変更するだけで、あなたはそれを行うことができます。あなたは良いコードを書くための道に沿ってウェルになります-そして、あなたがここまで来て、まだ読んでいるという事実は、あなたがあなたのウェブサイトやアプリケーションを書くときにコードのこのタイプを実装するだけでなく、あなたが出て行くかもしれないし、私がちょうど言及した他のものを研究することを私に希望の感覚を与えます-そして、より多くの。あなたができる最高のコードを書くのであって、かろうじて機能する最も基本的なコードではありません。</target>
        </trans-unit>
        <trans-unit id="d94fac60f2ec2499ed53938148c85015abf6f2b1" translate="yes" xml:space="preserve">
          <source>Let's go through this, sentence by sentence, and explain:</source>
          <target state="translated">一文一文、説明していきましょう。</target>
        </trans-unit>
        <trans-unit id="e754152995eed2c697af0b43150ac82ad5ccb3c4" translate="yes" xml:space="preserve">
          <source>Lets assume the following script is the verification process for an admin on a website (simplified but working if you copy and use it for testing):</source>
          <target state="translated">以下のスクリプトがWebサイトの管理者の検証プロセスであると仮定してみましょう(単純化されていますが、コピーしてテストに使用すれば動作します)。</target>
        </trans-unit>
        <trans-unit id="a707aa190f760150c8ff8256bff3171e748227a0" translate="yes" xml:space="preserve">
          <source>Like:</source>
          <target state="translated">Like:</target>
        </trans-unit>
        <trans-unit id="b11d87a0679fc93bf95cfcb6a2752248f89d290e" translate="yes" xml:space="preserve">
          <source>Maybe I am too ignorant, but I never had an opportunity to use them things like</source>
          <target state="translated">私が無知すぎるのかもしれませんが、私には、それらのものを使用する機会がありませんでした。</target>
        </trans-unit>
        <trans-unit id="17fe9ca6bbb425d8633e6b31c6b723df16a660db" translate="yes" xml:space="preserve">
          <source>More importantly you can pass $_REQUEST[] variables safely behind any query. When submitted &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; fields match the database structure exactly it's even shorter:</source>
          <target state="translated">さらに重要なことに、$ _ REQUEST []変数をクエリの背後で安全に渡すことができます。 送信された &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; フィールドはデータベース構造と完全に一致し、さらに短くなります。</target>
        </trans-unit>
        <trans-unit id="f1587de204fa79f4a4783af5600a077de5317c2d" translate="yes" xml:space="preserve">
          <source>Most glaring bug here is the lack of documentation. More significantly the order of filtering was in exactly the wrong order.</source>
          <target state="translated">ここで最も目立ったバグは、ドキュメントがないことです。さらに重要なのは、フィルタリングの順番が正確に間違っていたことです。</target>
        </trans-unit>
        <trans-unit id="f92274be79830199dc63b7643aad05843b510053" translate="yes" xml:space="preserve">
          <source>Move your variables out of the SQL string.</source>
          <target state="translated">変数をSQL文字列の外に移動します。</target>
        </trans-unit>
        <trans-unit id="1bdcae0a8ea855d5e4a88cd02e009731df745843" translate="yes" xml:space="preserve">
          <source>Moving away from &lt;code&gt;ext/mysql&lt;/code&gt; is not only about security, but also about having access to all the features of the MySQL database.</source>
          <target state="translated">&lt;code&gt;ext/mysql&lt;/code&gt; から離れることは、セキュリティだけでなく、MySQLデータベースのすべての機能にアクセスできることも重要です。</target>
        </trans-unit>
        <trans-unit id="e35ac0203a1fef2dcb5b1881363e036ecd70d1e9" translate="yes" xml:space="preserve">
          <source>Multiple Statements</source>
          <target state="translated">複数のステートメント</target>
        </trans-unit>
        <trans-unit id="c49860262ec681368ccb9bcf9cb9facc422187d7" translate="yes" xml:space="preserve">
          <source>MySQL deprecated in PHP 5.5.0, and removed in PHP 7.0.0. For a large and old application, this is difficult to search and replace each function.</source>
          <target state="translated">MySQLはPHP 5.5.0で非推奨となり、PHP 7.0.0で削除されました。大規模で古いアプリケーションの場合、各関数を検索して置換するのが大変です。</target>
        </trans-unit>
        <trans-unit id="e8bb7548ab9b8605aff82c9f2282425a263a1641" translate="yes" xml:space="preserve">
          <source>Nevertheless, everyone talking about extensions always missing the &lt;strong&gt;2 important facts&lt;/strong&gt; about Mysqli and PDO:</source>
          <target state="translated">それにもかかわらず、拡張機能について話している誰もが、MysqliとPDOに関する&lt;strong&gt;2つの重要な事実を&lt;/strong&gt;常に欠いています。</target>
        </trans-unit>
        <trans-unit id="7d2fa77f8c62d7e4e20bf83f1d23da735eceaaeb" translate="yes" xml:space="preserve">
          <source>Newer! ext/mysql &lt;em&gt;&lt;a href=&quot;https://wiki.php.net/rfc/remove_deprecated_functionality_in_php7&quot;&gt;has been removed in PHP 7&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">新しい！ ext / mysql &lt;em&gt;&lt;a href=&quot;https://wiki.php.net/rfc/remove_deprecated_functionality_in_php7&quot;&gt;はPHP 7で削除されました&lt;/a&gt;&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="685d76edff92343d24a20b8ec69b6efaff99726a" translate="yes" xml:space="preserve">
          <source>Non-blocking, asynchronous queries</source>
          <target state="translated">ノンブロッキング、非同期クエリ</target>
        </trans-unit>
        <trans-unit id="68345c1292e1cc90d4f880a94c3bca3d035eaeb2" translate="yes" xml:space="preserve">
          <source>Not to mention that &lt;em&gt;native&lt;/em&gt; prepared statements &lt;strong&gt;aren't enough to protect&lt;/strong&gt; from SQL injections, and neither mysqli nor PDO offers a solution.</source>
          <target state="translated">言うまでもなく、 &lt;em&gt;ネイティブの&lt;/em&gt;準備されたステートメント&lt;strong&gt;は&lt;/strong&gt; SQLインジェクション&lt;strong&gt;から保護するのに十分ではなく&lt;/strong&gt; 、mysqliもPDOもソリューションを提供しません。</target>
        </trans-unit>
        <trans-unit id="c63f37e1f56dcfbabca1e890130ce1ea2da2597c" translate="yes" xml:space="preserve">
          <source>Not under active development</source>
          <target state="translated">積極的な開発中ではない</target>
        </trans-unit>
        <trans-unit id="943cf0ecd5faca4611853075578258bc2002ba56" translate="yes" xml:space="preserve">
          <source>Not under active development (so what? does it affect &lt;em&gt;you&lt;/em&gt; in any practical way?)</source>
          <target state="translated">活発な開発が行われていない（つまり、何が実際的な影響&lt;em&gt;を&lt;/em&gt;与え&lt;em&gt;て&lt;/em&gt;いるのか？）</target>
        </trans-unit>
        <trans-unit id="bb2ac3999c57f46e2bd9758251dbcf1d84afb4d6" translate="yes" xml:space="preserve">
          <source>Note that this will also hide &lt;strong&gt;other deprecation warnings&lt;/strong&gt;, which, however, may be for things other than MySQL. (&lt;em&gt;&lt;a href=&quot;https://wiki.php.net/rfc/mysql_deprecation#workarounds&quot;&gt;from PHP manual&lt;/a&gt;&lt;/em&gt;)</source>
          <target state="translated">これにより、 &lt;strong&gt;他の非推奨の警告&lt;/strong&gt;も非表示になることに注意してください。ただし、MySQL以外のものである可能性があります。 （ &lt;em&gt;&lt;a href=&quot;https://wiki.php.net/rfc/mysql_deprecation#workarounds&quot;&gt;PHPマニュアルから&lt;/a&gt;&lt;/em&gt; ）</target>
        </trans-unit>
        <trans-unit id="bda5dde931c8e24b349d67e7a7b806e98b96812c" translate="yes" xml:space="preserve">
          <source>Note the use of &lt;code&gt;PDO::FETCH_ASSOC&lt;/code&gt; in the &lt;code&gt;fetch()&lt;/code&gt; and &lt;code&gt;fetchAll()&lt;/code&gt; code above. This tells &lt;code&gt;PDO&lt;/code&gt; to return the rows as an associative array with the field names as keys. There are many other fetch modes too which I will explain one by one.</source>
          <target state="translated">上記の &lt;code&gt;fetch()&lt;/code&gt; および &lt;code&gt;fetchAll()&lt;/code&gt; コードでの &lt;code&gt;PDO::FETCH_ASSOC&lt;/code&gt; 使用に注意してください。 これは、フィールド名をキーとする連想配列として行を返すように &lt;code&gt;PDO&lt;/code&gt; に指示します。 他にも多くのフェッチモードがありますが、これらについては1つずつ説明します。</target>
        </trans-unit>
        <trans-unit id="390aff0245fd3f60ed591a199d4ab419c07a3c3d" translate="yes" xml:space="preserve">
          <source>Now I come to fetch mode:</source>
          <target state="translated">今、私はフェッチモードに来ています。</target>
        </trans-unit>
        <trans-unit id="df9f2bb47f2f3240e6cc68b55730527bb6d13c2e" translate="yes" xml:space="preserve">
          <source>Now in &lt;code&gt;PDO&lt;/code&gt;, you can do this like:</source>
          <target state="translated">&lt;code&gt;PDO&lt;/code&gt; では、次のように実行できます。</target>
        </trans-unit>
        <trans-unit id="f01b36c532e5c2589a140fa7f84b5b0a69b50379" translate="yes" xml:space="preserve">
          <source>Now it's time to actually &lt;em&gt;utilize&lt;/em&gt; it.</source>
          <target state="translated">さあ、実際に&lt;em&gt;活用し&lt;/em&gt;てみましょう。</target>
        </trans-unit>
        <trans-unit id="af4e1cd344ecad42d4d3ae20475ecfd47bd9b08f" translate="yes" xml:space="preserve">
          <source>Now, after reading all the things above, you are probably thinking: what the heck is that when I just want to start leaning simple &lt;code&gt;SELECT&lt;/code&gt;, &lt;code&gt;INSERT&lt;/code&gt;, &lt;code&gt;UPDATE&lt;/code&gt;, or &lt;code&gt;DELETE&lt;/code&gt; statements? Don't worry, here we go:</source>
          <target state="translated">さて、上記のすべてを読んだ後、あなたはおそらく考えているでしょう：単純な &lt;code&gt;SELECT&lt;/code&gt; 、 &lt;code&gt;INSERT&lt;/code&gt; 、 &lt;code&gt;UPDATE&lt;/code&gt; 、または &lt;code&gt;DELETE&lt;/code&gt; ステートメントを学習し始めたいだけなのは一体何ですか？ 心配しないで、ここに行きます：</target>
        </trans-unit>
        <trans-unit id="bb447931ebe2bec10f8d27c32d8b085d4929ad94" translate="yes" xml:space="preserve">
          <source>Now, lets have a look at that code again, this time written using a PDO object:</source>
          <target state="translated">では、もう一度そのコードを見てみましょう。今回は PDO オブジェクトを使って書いています。</target>
        </trans-unit>
        <trans-unit id="d95a06cc3375c57a4fb46a5611bf33dc0eac0163" translate="yes" xml:space="preserve">
          <source>Now, lets try the data that a clever chap would enter to try to get past our little verification system:</source>
          <target state="translated">さて、賢い人が入力したデータを試してみよう我々の小さな検証システムを通過しようとする。</target>
        </trans-unit>
        <trans-unit id="c56d47755ee1354ee2f207be52265612e2153d71" translate="yes" xml:space="preserve">
          <source>Now, you have the better options of using &lt;a href=&quot;http://php.net/manual/en/book.mysqli.php&quot;&gt;mysqli_&lt;/a&gt; or &lt;a href=&quot;http://www.php.net/manual/en/book.pdo.php&quot;&gt;PDO&lt;/a&gt;. I am personally a big fan of PDO, so I will be using PDO in the rest of this answer. There are pro's and con's, but personally I find that the pro's far outweigh the con's. It's portable across multiple database engines - whether you are using MySQL or Oracle or just about bloody anything - just by changing the connection string, it has all the fancy features we want to use and it is nice and clean. I like clean.</source>
          <target state="translated">これで、 &lt;a href=&quot;http://php.net/manual/en/book.mysqli.php&quot;&gt;mysqli_&lt;/a&gt;または&lt;a href=&quot;http://www.php.net/manual/en/book.pdo.php&quot;&gt;PDO&lt;/a&gt;を使用するためのより良いオプションがあります。 私は個人的にPDOの大ファンなので、この回答の残りの部分ではPDOを使用します。 プロとコンがありますが、個人的にはプロの方がコンの方をはるかに上回っています。 MySQLやOracleを使用している場合でも、流血なものを使用している場合でも、接続文字列を変更するだけで、複数のデータベースエンジン間で移植可能であり、使用したいすべての優れた機能を備えており、見た目もすっきりしています。 きれいが好きです。</target>
        </trans-unit>
        <trans-unit id="b4df376bcf338aaf237cc2ceb55bc64301fbe1d9" translate="yes" xml:space="preserve">
          <source>Object-oriented interface</source>
          <target state="translated">オブジェクト指向インタフェース</target>
        </trans-unit>
        <trans-unit id="79f9618f1912184bc89ea96846cec252f2b5b111" translate="yes" xml:space="preserve">
          <source>Often string variables aren't just interpolated into SQL, but concatenated with escaping calls in between.</source>
          <target state="translated">多くの場合、文字列変数は単にSQLに補間されるのではなく、その間にエスケープコールを挟んで連結されています。</target>
        </trans-unit>
        <trans-unit id="0842d63b94cdae1d97ca5df8b49fbf2cefb344db" translate="yes" xml:space="preserve">
          <source>Oh, I just got a little excited, it worked: The check passed. We have a verified admin!</source>
          <target state="translated">あ、ちょっと興奮しただけで、うまくいった。チェックは通過しました。私たちは、検証された管理者を持っています</target>
        </trans-unit>
        <trans-unit id="94c3dc399cf5b64e36b7c400dadceac39bc77b5b" translate="yes" xml:space="preserve">
          <source>Okay, so what went wrong, and how can we fix it?</source>
          <target state="translated">何が悪かったの?どうやって直せばいいの?</target>
        </trans-unit>
        <trans-unit id="e33efcc54426fd4f64d01de7305ceab6f21b294b" translate="yes" xml:space="preserve">
          <source>Once you have converted all &lt;s&gt;&lt;code&gt;mysql_&lt;/code&gt;&lt;/s&gt; calls to &lt;code&gt;pdo_query&lt;/code&gt; with bound params, remove all redundant &lt;code&gt;pdo_real_escape_string&lt;/code&gt; calls.</source>
          <target state="translated">すべての&lt;s&gt; &lt;code&gt;mysql_&lt;/code&gt; &lt;/s&gt;呼び出しをバインドされた &lt;code&gt;pdo_query&lt;/code&gt; を使用してpdo_queryに変換したら、冗長なすべての &lt;code&gt;pdo_real_escape_string&lt;/code&gt; 呼び出しを削除します。</target>
        </trans-unit>
        <trans-unit id="e72184f55cc026514b7160d78c3c5aef63c2a050" translate="yes" xml:space="preserve">
          <source>Or</source>
          <target state="translated">Or</target>
        </trans-unit>
        <trans-unit id="dccb816213ce63a2edee44cd16d1bf786620eda9" translate="yes" xml:space="preserve">
          <source>Or better yet a direct and complete array retrieval:</source>
          <target state="translated">あるいは、直接かつ完全な配列の検索が可能な方が良いでしょう。</target>
        </trans-unit>
        <trans-unit id="d291165f3e48fa04de2df661e5577d3237e36a86" translate="yes" xml:space="preserve">
          <source>Other options</source>
          <target state="translated">その他のオプション</target>
        </trans-unit>
        <trans-unit id="80c9afff3fc6e7a45d3cc8c0ba82a6e36345cadc" translate="yes" xml:space="preserve">
          <source>PHP offers three different APIs to connect to MySQL. These are the &lt;a href=&quot;http://in1.php.net/manual/en/book.mysql.php&quot;&gt;&lt;code&gt;mysql&lt;/code&gt;&lt;/a&gt;(removed as of PHP 7), &lt;a href=&quot;http://uk.php.net/manual/en/book.mysqli.php&quot;&gt;&lt;code&gt;mysqli&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;http://php.net/manual/en/book.pdo.php&quot;&gt;&lt;code&gt;PDO&lt;/code&gt;&lt;/a&gt; extensions.</source>
          <target state="translated">PHPは、MySQLに接続するための3つの異なるAPIを提供します。 これらは、 &lt;a href=&quot;http://in1.php.net/manual/en/book.mysql.php&quot;&gt; &lt;code&gt;mysql&lt;/code&gt; &lt;/a&gt; （PHP 7で削除）、 &lt;a href=&quot;http://uk.php.net/manual/en/book.mysqli.php&quot;&gt; &lt;code&gt;mysqli&lt;/code&gt; &lt;/a&gt; 、および&lt;a href=&quot;http://php.net/manual/en/book.pdo.php&quot;&gt; &lt;code&gt;PDO&lt;/code&gt; &lt;/a&gt;拡張機能です。</target>
        </trans-unit>
        <trans-unit id="66b1f6ccb868a51c719c54211a58306d2ce6458b" translate="yes" xml:space="preserve">
          <source>Place question marks &lt;code&gt;?&lt;/code&gt; as placeholders where the variables were before.</source>
          <target state="translated">疑問符を付け &lt;code&gt;?&lt;/code&gt; 変数が以前にあったプレースホルダーとして。</target>
        </trans-unit>
        <trans-unit id="7478e01a69a59cf96a526ecfcd34a76707511615" translate="yes" xml:space="preserve">
          <source>Prepared statement &lt;strong&gt;isn't a silver bullet&lt;/strong&gt;. There are dynamical identifiers which cannot be bound using prepared statements. There are dynamical queries with an unknown number of parameters which makes query building a difficult task.</source>
          <target state="translated">準備された声明&lt;strong&gt;は特効薬ではありません&lt;/strong&gt; 。 準備されたステートメントを使用してバインドできない動的識別子があります。 不明な数のパラメーターを持つ動的クエリがあり、クエリの作成が困難なタスクになります。</target>
        </trans-unit>
        <trans-unit id="88e0e0a0df815f954f20830db35becc23bd2fb02" translate="yes" xml:space="preserve">
          <source>Prepared statements</source>
          <target state="translated">作成されたステートメント</target>
        </trans-unit>
        <trans-unit id="0b0459e39e775d8d016c9a1b7d9fbb9cf8ae780b" translate="yes" xml:space="preserve">
          <source>Q. First question in my mind was: what is `PDO`?</source>
          <target state="translated">Q.私の頭の中にあった最初の質問は、「PDO`とは何ですか?</target>
        </trans-unit>
        <trans-unit id="cb0e0b93a85516a6c4a7283d442e3274fb701224" translate="yes" xml:space="preserve">
          <source>Remember that pdo_* still allows &lt;em&gt;either or&lt;/em&gt;.</source>
          <target state="translated">pdo_ *でも&lt;em&gt;、またはのいずれかを&lt;/em&gt;使用できることに注意してください。</target>
        </trans-unit>
        <trans-unit id="3e04ee6f5fe2cec54a2d0b8c7a1e5d97c3761798" translate="yes" xml:space="preserve">
          <source>Remove the &lt;s&gt;&lt;code&gt;mysql_&lt;/code&gt;&lt;/s&gt; function prefix &lt;em&gt;everywhere&lt;/em&gt; and replace it with &lt;strong&gt;&lt;code&gt;pdo_&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="translated">&lt;em&gt;すべての場所で&lt;/em&gt; &lt;s&gt; &lt;code&gt;mysql_&lt;/code&gt; &lt;/s&gt;関数の接頭辞を削除し、それを&lt;strong&gt; &lt;code&gt;pdo_&lt;/code&gt; に置き換え&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="6e950042d73e706574ab836f1c73abbaeaec437a" translate="yes" xml:space="preserve">
          <source>Removed as of PHP 7</source>
          <target state="translated">PHP 7 で削除</target>
        </trans-unit>
        <trans-unit id="f71536fa3d10e36d63218592cefa79677819294b" translate="yes" xml:space="preserve">
          <source>Rewriting a larger code base at once however takes time. Raison d'&amp;ecirc;tre for this intermediate alternative:</source>
          <target state="translated">ただし、大きなコードベースを一度に書き換えるには時間がかかります。 この中間的な代替案の存在理由：</target>
        </trans-unit>
        <trans-unit id="b7b089287c11c303c7e28345b34bb09873f7b3e2" translate="yes" xml:space="preserve">
          <source>Rewriting doesn't have to stop at using the new pdo_ function names. You could one by one transition each pdo_query() into a plain $pdo-&amp;gt;prepare()-&amp;gt;execute() call.</source>
          <target state="translated">書き換えは、新しいpdo_関数名の使用で停止する必要はありません。 各pdo_query（）を1つずつ単純な$ pdo-&amp;gt; prepare（）-&amp;gt; execute（）呼び出しに移行できます。</target>
        </trans-unit>
        <trans-unit id="d18471042a4567ba79deea1a219d4a26d8d8459a" translate="yes" xml:space="preserve">
          <source>SQL injections simply are when &lt;em&gt;data bleeds into code&lt;/em&gt; context. A database server can't later spot where PHP originally glued variables inbetween query clauses.</source>
          <target state="translated">SQLインジェクションは、単に&lt;em&gt;データがコード&lt;/em&gt;コンテキストに&lt;em&gt;流れ込んだ&lt;/em&gt;ときです。 データベースサーバーは、PHPが元々クエリ句の間に変数を接着していた場所を特定できません。</target>
        </trans-unit>
        <trans-unit id="e665bf1f2a0279913bf81f45ec5a5c78ea174425" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://bobby-tables.com/&quot;&gt;bobby-tables.com&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://bobby-tables.com/&quot;&gt;bobby-tables.comを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5434d7a025004202b6c9d1ef189773a1aad44220" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://php.net/manual/en/mysqlinfo.api.choosing.php&quot;&gt;&lt;strong&gt;the comparison of SQL extensions&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://php.net/manual/en/mysqlinfo.api.choosing.php&quot;&gt;&lt;strong&gt;SQL拡張機能の比較を&lt;/strong&gt;&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="7489fd89c972450ae2f6ec9bf321744a53fac8d8" translate="yes" xml:space="preserve">
          <source>See how I constructed my &quot;password&quot; so that it would first close the single quote around the password, then introduce a completely new comparison? Then just for safety, I added another &quot;string&quot; so that the single quote would get closed as expected in the code we originally had.</source>
          <target state="translated">私がどのようにして「password」を構築したかを見て、最初にパスワードの周りのシングルクォートを閉じてから、全く新しい比較を導入するようにしました。そして、安全のためにもう一つの &quot;文字列 &quot;を追加して、元々持っていたコードで予想されていたようにシングルクォートが閉じられるようにしました。</target>
        </trans-unit>
        <trans-unit id="55506229592fa23e7b5870b9dc6c5aa7e1583634" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;http://php.net/manual/en/mysqlinfo.api.choosing.php&quot;&gt;comparison of SQL extensions&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://php.net/manual/en/mysqlinfo.api.choosing.php&quot;&gt;SQL拡張機能&lt;/a&gt;の比較をご覧ください。</target>
        </trans-unit>
        <trans-unit id="8332ef556cea9f1f40a6c76849dace653964c7a0" translate="yes" xml:space="preserve">
          <source>Seems legit enough at first glance.</source>
          <target state="translated">一見すると合法的なように見えるが</target>
        </trans-unit>
        <trans-unit id="af912eddd3068889909f441f05cc66e7d588440d" translate="yes" xml:space="preserve">
          <source>Selecting Data</source>
          <target state="translated">データの選択</target>
        </trans-unit>
        <trans-unit id="418dc8b027c0175bc948e9cbb66d6a25f398bcb1" translate="yes" xml:space="preserve">
          <source>Simply &lt;code&gt;include_once(&lt;/code&gt;&lt;a href=&quot;http://fossil.include-once.org/upgradephp/artifact/43ab742241e5a3be43d31764dd333ba68e245360&quot;&gt;&lt;code&gt;&quot;pdo_mysql.php&quot;&lt;/code&gt;&lt;/a&gt;&lt;code&gt;);&lt;/code&gt; in each invocation script that has to interact with the database.</source>
          <target state="translated">単に &lt;code&gt;include_once(&lt;/code&gt; &lt;a href=&quot;http://fossil.include-once.org/upgradephp/artifact/43ab742241e5a3be43d31764dd333ba68e245360&quot;&gt; &lt;code&gt;&quot;pdo_mysql.php&quot;&lt;/code&gt; &lt;/a&gt; &lt;code&gt;);&lt;/code&gt; データベースと対話する必要がある各呼び出しスクリプト内。</target>
        </trans-unit>
        <trans-unit id="da5002da9abdeebe9fb4cab82878e2462cde36fb" translate="yes" xml:space="preserve">
          <source>Since it is deprecated, using it makes your code less future proof.</source>
          <target state="translated">これは非推奨なので、これを使うとコードの将来性が低くなります。</target>
        </trans-unit>
        <trans-unit id="181dff808d342cf7f9e72760d9c8e79ed94e35e7" translate="yes" xml:space="preserve">
          <source>So much simplicity. But let's get back to some more rewriting advises and technical reasons on why you may want to get rid of &lt;s&gt;&lt;code&gt;mysql_&lt;/code&gt;&lt;/s&gt; and escaping.</source>
          <target state="translated">とてもシンプルです。 しかし、 &lt;s&gt; &lt;code&gt;mysql_&lt;/code&gt; &lt;/s&gt;とエスケープを取り除く理由について、いくつかの書き換えに関するアドバイスと技術的な理由に戻りましょう。</target>
        </trans-unit>
        <trans-unit id="0e06bdf278d741a7d2afe7a65871fe0c7c71210f" translate="yes" xml:space="preserve">
          <source>So this hopefully visualized some &lt;em&gt;practical&lt;/em&gt; reasons and a worthwile pathway to drop &lt;s&gt;&lt;code&gt;mysql_&lt;/code&gt;&lt;/s&gt;.</source>
          <target state="translated">したがって、うまくいけば、いくつかの&lt;em&gt;実用的な&lt;/em&gt;理由と、mysql_を削除する価値のある経路が視覚化され&lt;s&gt; &lt;code&gt;mysql_&lt;/code&gt; &lt;/s&gt; 。</target>
        </trans-unit>
        <trans-unit id="3012707c2195366927599a0dd74ecf1430c805f0" translate="yes" xml:space="preserve">
          <source>So what you are doing in &lt;code&gt;mysql_*&lt;/code&gt; is:</source>
          <target state="translated">したがって、 &lt;code&gt;mysql_*&lt;/code&gt; で実行していることは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="502276f58db137875cfb6cf92bfa59236b8263ac" translate="yes" xml:space="preserve">
          <source>So, I wrote solutions for all the common pitfalls and complex cases in the &lt;a href=&quot;https://stackoverflow.com/tags/pdo/info&quot;&gt;&lt;strong&gt;PDO tag wiki&lt;/strong&gt;&lt;/a&gt;</source>
          <target state="translated">だから、私はすべての一般的な落とし穴と複雑なケースの解決策を&lt;a href=&quot;https://stackoverflow.com/tags/pdo/info&quot;&gt;&lt;strong&gt;PDOタグwiki&lt;/strong&gt;&lt;/a&gt;に書いた</target>
        </trans-unit>
        <trans-unit id="72d2f3bbb78bd884d0b025adc79a648f2da15e63" translate="yes" xml:space="preserve">
          <source>So, how do we protect your sacred admin section and make it nice and secure? The first thing to do will be to stop using those really old and deprecated &lt;code&gt;mysql_*&lt;/code&gt; functions. I know, you followed a tutorial you found online and it works, but it's old, it's outdated and in the space of a few minutes, I have just broken past it without so much as breaking a sweat.</source>
          <target state="translated">では、どのようにしてあなたの神聖な管理セクションを保護し、それを美しく安全なものにするのでしょうか？ 最初にすべきことは、これらの本当に古く非推奨の &lt;code&gt;mysql_*&lt;/code&gt; 関数の使用を停止することです。 あなたはオンラインで見つけたチュートリアルに従ってきましたが、それは機能しますが、それは古く、時代遅れであり、数分の間に、私は汗をかくほどではなく、それを乗り越えたところです。</target>
        </trans-unit>
        <trans-unit id="156ae2c1a681018477e990b03ebe020a3aacb23e" translate="yes" xml:space="preserve">
          <source>So, if you are an average PHP user and want to save yourself a ton of headaches when using native prepared statements, PDO - again - is the only choice.</source>
          <target state="translated">ですから、もしあなたが平均的なPHPユーザーで、ネイティブの準備された文を使用する際の頭痛の種を減らしたいのであれば、PDO-繰り返しになりますが-が唯一の選択肢となります。</target>
        </trans-unit>
        <trans-unit id="09bd59ae9fef4f113a6fb3d96fee1aae3a9fb79f" translate="yes" xml:space="preserve">
          <source>So, in answer, THAT IS WHY YOU ARE BEING YELLED AT.</source>
          <target state="translated">答えは、それがあなたが怒鳴られている理由です。</target>
        </trans-unit>
        <trans-unit id="4586573c065a2c5d5186ace73cde0c4532012c55" translate="yes" xml:space="preserve">
          <source>So, instead of fighting this honest extension, I'd prefer to fight wrong practices and educate people in the right ways.</source>
          <target state="translated">だから、この素直な延長線上で戦うよりも、間違った慣習と戦って、正しい方法で人を教育した方がいいと思います。</target>
        </trans-unit>
        <trans-unit id="977784c6079621feedaf15de1c0e69f13959d921" translate="yes" xml:space="preserve">
          <source>So, just switching to PDO or mysqli is not enough. One has to use an ORM, or a query builder, or whatever database abstraction class instead of calling raw API functions in their code.</source>
          <target state="translated">ですから、PDO や mysqli に切り替えるだけでは十分ではありません。コードの中で生の API 関数を呼び出すのではなく、ORM やクエリビルダ、あるいはデータベースの抽象化クラスを使用しなければなりません。</target>
        </trans-unit>
        <trans-unit id="6a4c25a013fc181e44690a0c81f43ed6d49a2760" translate="yes" xml:space="preserve">
          <source>So, lets have a look at what went wrong, and why I just got into your super-admin-only-bat-cave. I took a guess and assumed that you weren't being careful with your inputs and simply passed them to the database directly. I constructed the input in a way tht would CHANGE the query that you were actually running. So, what was it supposed to be, and what did it end up being?</source>
          <target state="translated">だから、何が間違っていたのかを見てみましょう、そしてなぜ私はあなたのスーパー管理者専用のコウモリの洞窟に入ったのか。私は、あなたが入力に注意を払っておらず、単にデータベースに直接渡しているのではないかと推測しました。私はあなたが実際に実行していたクエリを変更するように 入力を構築しました。それで、それが何であることになっていたのか、そしてそれが何であることになったのか?</target>
        </trans-unit>
        <trans-unit id="419b0e23c522675ea4d8d7c937461eb95377a4fe" translate="yes" xml:space="preserve">
          <source>So, once more - it is not just raw driver should be your concern but abstraction class, useful not only for silly examples from beginner's manual but to solve whatever real-life problems.</source>
          <target state="translated">だから、もう一度-それだけではなく、生のドライバはあなたの懸念であるべきであるが、抽象化クラスは、初心者のマニュアルから愚かな例のためだけでなく、実際の生活の問題を解決するために有用なだけではありません。</target>
        </trans-unit>
        <trans-unit id="8cf0be74cb1010c94f25e5fc839c648278844902" translate="yes" xml:space="preserve">
          <source>Source: &lt;a href=&quot;http://us2.php.net/manual/en/mysqli.overview.php&quot;&gt;MySQLi overview&lt;/a&gt;</source>
          <target state="translated">出典： &lt;a href=&quot;http://us2.php.net/manual/en/mysqli.overview.php&quot;&gt;MySQLiの概要&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fcb447d1aaebb249a35efcda9785a596a7569ba1" translate="yes" xml:space="preserve">
          <source>Speaking of &lt;em&gt;technical&lt;/em&gt; reasons, there are only a few, extremely specific and rarely used. Most likely you will never ever use them in your life.</source>
          <target state="translated">&lt;em&gt;技術的な&lt;/em&gt;理由といえば、ごく少数であり、非常に具体的でほとんど使用されていません。 ほとんどの場合、あなたはあなたの人生でそれらを決して使用しないでしょう。</target>
        </trans-unit>
        <trans-unit id="bf36b631054e4b9ebdd95cb1972bb398da13213f" translate="yes" xml:space="preserve">
          <source>Stored procedures</source>
          <target state="translated">ストアドプロシージャ</target>
        </trans-unit>
        <trans-unit id="43f21f37b385b47e7aca36f912842875218a10aa" translate="yes" xml:space="preserve">
          <source>String/value handling is delegated to PDO and its parameterized statements.</source>
          <target state="translated">文字列値の処理はPDOとそのパラメータ化されたステートメントに委譲されます。</target>
        </trans-unit>
        <trans-unit id="f330726eae49c3e09ec43d61637f5396a5a55745" translate="yes" xml:space="preserve">
          <source>Super! Working as expected, now lets try the actual username and password:</source>
          <target state="translated">すごいですね! 期待通りに動作しているので、実際のユーザー名とパスワードを試してみましょう。</target>
        </trans-unit>
        <trans-unit id="dfadaca1a30bce993f932dca13aff0957793e885" translate="yes" xml:space="preserve">
          <source>Support for Multiple Statements</source>
          <target state="translated">複数のステートメントのサポート</target>
        </trans-unit>
        <trans-unit id="2142d72824641e7c7d357d78453232623a4fd7ff" translate="yes" xml:space="preserve">
          <source>Support for Prepared Statements</source>
          <target state="translated">作成されたステートメントのサポート</target>
        </trans-unit>
        <trans-unit id="1051e4c201c5f65414e7b143a72570669fd228ca" translate="yes" xml:space="preserve">
          <source>Support for Transactions</source>
          <target state="translated">トランザクションのサポート</target>
        </trans-unit>
        <trans-unit id="aa4d81fe71bb245630f293271255fef6e35bbfad" translate="yes" xml:space="preserve">
          <source>That was commonly there to undo damage (double escaping) from the deprecated &lt;a href=&quot;http://php.net/magic_quotes&quot;&gt;&lt;code&gt;magic_quotes&lt;/code&gt;&lt;/a&gt;. Which however is &lt;a href=&quot;https://stackoverflow.com/questions/517008/how-to-turn-off-magic-quotes-on-shared-hosting&quot;&gt;best fixed centrally&lt;/a&gt;, not string by string.</source>
          <target state="translated">これは一般的に、廃止された&lt;a href=&quot;http://php.net/magic_quotes&quot;&gt; &lt;code&gt;magic_quotes&lt;/code&gt; &lt;/a&gt;からのダメージ（ダブルエスケープ）を元に戻すためにありました。 ただし、文字列&lt;a href=&quot;https://stackoverflow.com/questions/517008/how-to-turn-off-magic-quotes-on-shared-hosting&quot;&gt;ごと&lt;/a&gt;ではなく、 中央で修正するのが最適です。</target>
        </trans-unit>
        <trans-unit id="34467e1287edc5b797be2730e35c61969473a83f" translate="yes" xml:space="preserve">
          <source>That's the query, but when we replace the variables with the actual inputs that we used, we get the following:</source>
          <target state="translated">これがクエリですが、変数を実際に使用した入力に置き換えると以下のようになります。</target>
        </trans-unit>
        <trans-unit id="e35c0916a18283d4ea1f81a70d61efa106dd1b1f" translate="yes" xml:space="preserve">
          <source>The &quot;new&quot; password authentication method (on by default in MySQL 5.6; required in 5.7)</source>
          <target state="translated">新しい」パスワード認証方法 (MySQL 5.6 ではデフォルトでオン、5.7 では必須)</target>
        </trans-unit>
        <trans-unit id="a8deffdde633f6dcdac49482f5db747ce9e171b6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mysql_*&lt;/code&gt; functions used to be very popular, but their use is not encouraged anymore. The documentation team is discussing the database security situation, and educating users to move away from the commonly used ext/mysql extension is part of this (check &lt;em&gt;&lt;a href=&quot;http://news.php.net/php.internals/53799&quot;&gt;php.internals: deprecating ext/mysql&lt;/a&gt;&lt;/em&gt;).</source>
          <target state="translated">&lt;code&gt;mysql_*&lt;/code&gt; 関数は非常に人気がありましたが、その使用は推奨されなくなりました。 ドキュメントチームはデータベースのセキュリティ状況について議論しており、一般的に使用されるext / mysql拡張機能から離れるようにユーザーを教育することはこれの一部です（ &lt;em&gt;&lt;a href=&quot;http://news.php.net/php.internals/53799&quot;&gt;php.internalsを&lt;/a&gt;&lt;/em&gt;確認して&lt;em&gt;ください：ext / mysqlを非推奨にし&lt;/em&gt;ます）。</target>
        </trans-unit>
        <trans-unit id="d67db1d2a3f9c279e59ee7cbab7e7ad484b23610" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mysql_&lt;/code&gt; functions:</source>
          <target state="translated">&lt;code&gt;mysql_&lt;/code&gt; 関数：</target>
        </trans-unit>
        <trans-unit id="8555deeb46964ebda4fb022ebe48c5e2ada84f62" translate="yes" xml:space="preserve">
          <source>The DBMS parses, compiles, and performs query optimization on the statement template, and stores the result without executing it.</source>
          <target state="translated">DBMSは、ステートメントテンプレート上でクエリの解析、コンパイル、最適化を行い、実行せずに結果を保存します。</target>
        </trans-unit>
        <trans-unit id="23a504e237cda5d5bd1d5d68ab647b0abc87ece7" translate="yes" xml:space="preserve">
          <source>The MySQL extension is the oldest of the three and was the original way that developers used to communicate with MySQL. This extension is now being &lt;a href=&quot;http://php.net/manual/en/migration55.deprecated.php&quot;&gt;deprecated&lt;/a&gt; in favor of the other &lt;a href=&quot;http://php.net/manual/en/book.mysqli.php&quot;&gt;two&lt;/a&gt;&lt;a href=&quot;http://php.net/manual/en/book.pdo.php&quot;&gt;alternatives&lt;/a&gt; because of improvements made in newer releases of both PHP and MySQL.</source>
          <target state="translated">MySQL拡張機能は、3つのうち最も古いものであり、開発者がMySQLと通信するために使用した最初の方法でした。 PHPとMySQLの両方の新しいリリースで行われた改善のため、この拡張機能は現在、他の&lt;a href=&quot;http://php.net/manual/en/book.mysqli.php&quot;&gt;2つの&lt;/a&gt; &lt;a href=&quot;http://php.net/manual/en/book.pdo.php&quot;&gt;代替案の&lt;/a&gt;ために&lt;a href=&quot;http://php.net/manual/en/migration55.deprecated.php&quot;&gt;廃止さ&lt;/a&gt;れています。</target>
        </trans-unit>
        <trans-unit id="f8a41f267bbe8e8e99d77e3f59457faa0a4e2d32" translate="yes" xml:space="preserve">
          <source>The MySQL extension:</source>
          <target state="translated">MySQLの拡張機能です。</target>
        </trans-unit>
        <trans-unit id="21414d4d700662c909aebc645c1a9d88f9c8e575" translate="yes" xml:space="preserve">
          <source>The PDOException class &amp;para;</source>
          <target state="translated">PDOExceptionクラス&amp;para;</target>
        </trans-unit>
        <trans-unit id="ceaa748e73e903659c37e91ec7bc481b4aba692e" translate="yes" xml:space="preserve">
          <source>The above method is only useful when you are not using variable in query. But when you need to use a variable in a query, do not ever ever try like the above and there for  &lt;a href=&quot;http://en.wikipedia.org/wiki/Prepared_statement&quot;&gt;&lt;strong&gt;prepared statement or parameterized statement&lt;/strong&gt;&lt;/a&gt; is.</source>
          <target state="translated">上記の方法は、クエリで変数を使用していない場合にのみ役立ちます。 ただし、クエリで変数を使用する必要がある場合は、これまでに説明したようなことを行わないでください。 &lt;a href=&quot;http://en.wikipedia.org/wiki/Prepared_statement&quot;&gt;&lt;strong&gt;準備されたステートメントやパラメーター化されたステートメント&lt;/strong&gt;&lt;/a&gt;が存在し&lt;strong&gt;ます&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="b16db0ed6b33fd376c4271f150426eeb37d5407a" translate="yes" xml:space="preserve">
          <source>The advantage becomes more obvious for lengthier code.</source>
          <target state="translated">コードが長くなると、その利点がより明らかになります。</target>
        </trans-unit>
        <trans-unit id="5a186859a541d2250d60b00b21cdf3c3b63312a9" translate="yes" xml:space="preserve">
          <source>The analytic and synthetic reasons were already mentioned. For newcomers there's a more significant incentive to stop using the dated mysql_ functions.</source>
          <target state="translated">分析的な理由と合成的な理由はすでに述べた。新規参入者にとっては、時代遅れのmysql_関数の使用をやめるというもっと大きなインセンティブがあります。</target>
        </trans-unit>
        <trans-unit id="27bb7e6155e751876dec5eb5272f609fe02b5ef0" translate="yes" xml:space="preserve">
          <source>The article &lt;em&gt;&lt;a href=&quot;http://net.tutsplus.com/tutorials/php/pdo-vs-mysqli-which-should-you-use/&quot;&gt;PDO vs. MySQLi: Which Should You Use?&lt;/a&gt;&lt;/em&gt; by &lt;a href=&quot;http://webarto.com/&quot;&gt;&lt;strong&gt;Dejan Marjanovic&lt;/strong&gt;&lt;/a&gt; will help you to choose.</source>
          <target state="translated">記事&lt;em&gt;&lt;a href=&quot;http://net.tutsplus.com/tutorials/php/pdo-vs-mysqli-which-should-you-use/&quot;&gt;PDOとMySQLi：どちらを使用すればよいですか？&lt;/a&gt;&lt;/em&gt; &lt;a href=&quot;http://webarto.com/&quot;&gt;&lt;strong&gt;Dejan Marjanovic&lt;/strong&gt;&lt;/a&gt;によってあなたが選択するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="99a09cf05588a6ee72d21881c364b7fa6b57bb3e" translate="yes" xml:space="preserve">
          <source>The functions which are as similar to this &lt;code&gt;mysql_connect()&lt;/code&gt;, &lt;code&gt;mysql_query()&lt;/code&gt; type are the previous version PHP i.e(PHP 4) functions and now not in use .</source>
          <target state="translated">この &lt;code&gt;mysql_connect()&lt;/code&gt; 、 &lt;code&gt;mysql_query()&lt;/code&gt; タイプと同様の関数は、以前のバージョンのPHP ie（PHP 4）関数であり、現在は使用されていません。</target>
        </trans-unit>
        <trans-unit id="4abbb603d8f2b2afd3d6309a44e29670822a32ff" translate="yes" xml:space="preserve">
          <source>The last one is an interesting point. Although mysql ext do not support &lt;em&gt;native&lt;/em&gt; prepared statements, they aren't required for the safety. We can easily fake prepared statements using manually handled placeholders (just like PDO does):</source>
          <target state="translated">最後は面白い点です。 mysql extは&lt;em&gt;ネイティブの&lt;/em&gt;準備済みステートメントをサポートしていませんが、安全のために必須ではありません。 （PDOと同じように）手動で処理されたプレースホルダーを使用して、準備されたステートメントを簡単に偽造できます。</target>
        </trans-unit>
        <trans-unit id="2dada7706eedc4cc1377e36d4ff7b1cba1c73978" translate="yes" xml:space="preserve">
          <source>The major differences are that there are no more &lt;code&gt;mysql_*&lt;/code&gt; functions. It's all done via a PDO object, secondly, it is using a prepared statement. Now, what's a prepred statement you ask? It's a way to tell the database ahead of running a query, what the query is that we are going to run. In this case, we tell the database: &quot;Hi, I am going to run a select statement wanting id, userid and pass from the table users where the userid is a variable and the pass is also a variable.&quot;.</source>
          <target state="translated">主な違いは、 &lt;code&gt;mysql_*&lt;/code&gt; 関数がなくなることです 。 すべてPDOオブジェクトを介して行われます。次に、準備されたステートメントを使用します。 さて、あなたが尋ねる準備された声明は何ですか？ これは、クエリを実行する前に、実行するクエリをデータベースに通知する方法です。 この場合、データベースに「こんにちは、ID、ユーザーID、およびユーザーIDが変数でパスが変数でもあるテーブルユーザーからのパスを要求するSELECTステートメントを実行します。」と伝えます。</target>
        </trans-unit>
        <trans-unit id="2dccd3b2ef63bf7cb2dcdbff4e9bf66af2258b71" translate="yes" xml:space="preserve">
          <source>The mysqli extension has a number of
  benefits, the key enhancements over
  the mysql extension being:</source>
          <target state="translated">mysqli 拡張モジュールには多くの利点があります。</target>
        </trans-unit>
        <trans-unit id="562dc1125a1bf25b7d1d24db6381f0d3d62bbedd" translate="yes" xml:space="preserve">
          <source>The original implementation in PHP2/FI introduced it explicitly with just &quot;&lt;em&gt;quotes will be automatically escaped making it easier to pass form data directly to msql queries&lt;/em&gt;&quot;. Notably it was accidentially safe to use with &lt;a href=&quot;http://www.hughes.com.au/products/msql/&quot;&gt;mSQL&lt;/a&gt;, as that supported ASCII only.</source>
          <target state="translated">PHP2 / FIの元の実装では、「 &lt;em&gt;引用符は自動的にエスケープされ、フォームデータをmsqlクエリに直接渡すのが簡単になる&lt;/em&gt; 」というだけで明示的に導入されました。 特に、 &lt;a href=&quot;http://www.hughes.com.au/products/msql/&quot;&gt;mSQL&lt;/a&gt;はASCIIのみをサポートしていたため、誤って使用しても安全でした。</target>
        </trans-unit>
        <trans-unit id="aebcc1312a3d5f8dc2dd1e177025cf78c72eda79" translate="yes" xml:space="preserve">
          <source>The other is to turn off prepare emulation which is enabled in the &lt;code&gt;MySQL&lt;/code&gt; driver by default, but prepare emulation should be turned off to use &lt;code&gt;PDO&lt;/code&gt; safely.</source>
          <target state="translated">もう1つは、 &lt;code&gt;MySQL&lt;/code&gt; ドライバーでデフォルトで有効になっている準備エミュレーションをオフにすることですが、 &lt;code&gt;PDO&lt;/code&gt; を安全に使用するには、準備エミュレーションをオフにする必要があります。</target>
        </trans-unit>
        <trans-unit id="e1647f08fd0d03cfed6027ec69a028632d0edcfe" translate="yes" xml:space="preserve">
          <source>The output is as follows:</source>
          <target state="translated">出力は以下のようになります。</target>
        </trans-unit>
        <trans-unit id="1c80ab0d65d86371430abcdf8ed4202036dd3c5d" translate="yes" xml:space="preserve">
          <source>The placeholder feature is provided by the real PDO behind it.</source>
          <target state="translated">プレースホルダ機能は、その背後にある実際のPDOによって提供されています。</target>
        </trans-unit>
        <trans-unit id="b025ee4adb8cf0f65ed9aabff546b7033803e091" translate="yes" xml:space="preserve">
          <source>The results are fantastic. Lets try those username and password combinations from before again:</source>
          <target state="translated">結果は素晴らしいです。ユーザー名とパスワードの組み合わせをもう一度試してみましょう。</target>
        </trans-unit>
        <trans-unit id="6367ed4377cb731bc3493ca0a1f8fb62d7a404f7" translate="yes" xml:space="preserve">
          <source>The typical workflow of using a prepared statement is as follows (&lt;a href=&quot;http://en.wikipedia.org/wiki/Prepared_statement&quot;&gt;quoted from Wikipedia three 3 point&lt;/a&gt;):</source>
          <target state="translated">準備済みステートメントを使用する一般的なワークフローは次のとおりです（ &lt;a href=&quot;http://en.wikipedia.org/wiki/Prepared_statement&quot;&gt;Wikipediaの3つの3ポイントから引用&lt;/a&gt; ）。</target>
        </trans-unit>
        <trans-unit id="c0663df1a52266fe58480cc90e9a9f1077932a7a" translate="yes" xml:space="preserve">
          <source>The user has to enter a login and password, right?</source>
          <target state="translated">ユーザーはログインとパスワードを入力する必要がありますよね。</target>
        </trans-unit>
        <trans-unit id="bd441197e0d87715716a19344182973372419d2a" translate="yes" xml:space="preserve">
          <source>Then PHP3/Zend reintroduced magic_quotes for MySQL and misdocumented it. But originally it was just a &lt;a href=&quot;https://stackoverflow.com/questions/16098194/why-magic-quotes-has-been-removed-from-php-5-4&quot;&gt;convenience feature&lt;/a&gt;, not intend for security.</source>
          <target state="translated">その後、PHP3 / ZendはMySQLのmagic_quotesを再導入し、それを誤って文書化しました。 しかし、もともとはセキュリティを目的としたものではなく、単なる&lt;a href=&quot;https://stackoverflow.com/questions/16098194/why-magic-quotes-has-been-removed-from-php-5-4&quot;&gt;便利な機能&lt;/a&gt;でした。</target>
        </trans-unit>
        <trans-unit id="57c2defd4b5ec30df25974856ac6eb0286c19204" translate="yes" xml:space="preserve">
          <source>Then compare with &lt;a href=&quot;https://stackoverflow.com/a/17874410/285587&quot;&gt;crazy amount of code&lt;/a&gt; you will need with raw Mysqli prepared statements.
Note that error handling, profiling, query logging already built in and running.</source>
          <target state="translated">次に、Mysqliで準備された生のステートメントを使用して必要となる&lt;a href=&quot;https://stackoverflow.com/a/17874410/285587&quot;&gt;膨大な量のコード&lt;/a&gt;と比較します。 エラー処理、プロファイリング、クエリロギングは、すでに組み込まれて実行されていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="c9c4db9de41823c261f34da4aa90c4b93945d84c" translate="yes" xml:space="preserve">
          <source>Then, in the execute statement, we pass the database an array with all the variables that it now expects.</source>
          <target state="translated">そして、execute文の中で、データベースが期待するすべての変数の配列を渡します。</target>
        </trans-unit>
        <trans-unit id="c69679c49c5f8114f4079ae3ec807eb8cad58847" translate="yes" xml:space="preserve">
          <source>There are better, more robust and well-built alternatives, &lt;strong&gt;&lt;a href=&quot;http://php.net/pdo&quot;&gt;PDO - PHP Database Object&lt;/a&gt;&lt;/strong&gt;, which offers a complete OOP approach to database interaction, and &lt;strong&gt;&lt;a href=&quot;http://php.net/mysqli&quot;&gt;MySQLi&lt;/a&gt;&lt;/strong&gt;, which is a MySQL specific improvement.</source>
          <target state="translated">より優れた、より堅牢で十分に構築された代替手段、データベース相互作用への完全なOOPアプローチを提供する&lt;strong&gt;&lt;a href=&quot;http://php.net/pdo&quot;&gt;PDO-PHP Database Object&lt;/a&gt;&lt;/strong&gt; 、およびMySQL固有の改善である&lt;strong&gt;&lt;a href=&quot;http://php.net/mysqli&quot;&gt;MySQLi&lt;/a&gt;&lt;/strong&gt;があります。</target>
        </trans-unit>
        <trans-unit id="52a787558155f6b79392728bd50c95fa82bc40c0" translate="yes" xml:space="preserve">
          <source>There are even more choices! Read about them all in &lt;a href=&quot;http://www.php.net/manual/en/pdostatement.fetch.php&quot;&gt;&lt;code&gt;PDOStatement&lt;/code&gt; Fetch documentation.&lt;/a&gt;.</source>
          <target state="translated">さらに選択肢があります！ &lt;a href=&quot;http://www.php.net/manual/en/pdostatement.fetch.php&quot;&gt; &lt;code&gt;PDOStatement&lt;/code&gt; Fetchのドキュメント&lt;/a&gt;でそれらすべてについて読んでください。 。</target>
        </trans-unit>
        <trans-unit id="0536d09b1c2f82b31a60e587322bf4e9ae190fe2" translate="yes" xml:space="preserve">
          <source>There are many reasons, but perhaps the most important one is that those functions encourage insecure programming practices because they do not support prepared statements. Prepared statements help prevent SQL injection attacks.</source>
          <target state="translated">理由はたくさんありますが、おそらく最も重要なのは、これらの関数が準備された文をサポートしていないために、安全ではないプログラミングの習慣を助長していることです。プリペアド文はSQLインジェクション攻撃を防ぐのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="b5b472b07cd013e7228dcd85aa4b24ebd1742ea3" translate="yes" xml:space="preserve">
          <source>There ought to be an &lt;strong&gt;abstraction layer&lt;/strong&gt; between them and application code, which will do all the dirty job of binding, looping, error handling, etc. inside, making application code DRY and clean. Especially for the complex cases like dynamical query building.</source>
          <target state="translated">それらとアプリケーションコードの間に&lt;strong&gt;抽象化レイヤー&lt;/strong&gt;が存在する必要があります。これにより、バインディング、ループ、エラー処理などのすべてのダーティジョブが内部で実行され、アプリケーションコードがDRYでクリーンになります。 特に、動的クエリの構築などの複雑なケースでは。</target>
        </trans-unit>
        <trans-unit id="5aa178ec91604559d6a4a1f12b3fe446f5816ce4" translate="yes" xml:space="preserve">
          <source>These &lt;code&gt;pdo_*&lt;/code&gt; wrapper functions make a coding-friendly stop-gap API. (It's pretty much what &lt;code&gt;MYSQLI&lt;/code&gt; could have been if it wasn't for the idiosyncratic function signature shift). They also expose the real PDO at most times.</source>
          <target state="translated">これらの &lt;code&gt;pdo_*&lt;/code&gt; ラッパー関数は、コーディングに適したストップギャップAPIを作成します。 （それが特異な関数シグネチャシフトのためでなければ、それは &lt;code&gt;MYSQLI&lt;/code&gt; であったであろうものとほぼ同じです）。 また、ほとんどの場合、実際のP​​DOを公開します。</target>
        </trans-unit>
        <trans-unit id="66a2a549e1414faaaca0f781d02836464a0a76dc" translate="yes" xml:space="preserve">
          <source>These are replaced by &lt;code&gt;mysqli_connect()&lt;/code&gt;, &lt;code&gt;mysqli_query()&lt;/code&gt; similarly in the latest PHP5.</source>
          <target state="translated">これらは、最新のPHP5 &lt;code&gt;mysqli_query()&lt;/code&gt; 同様に &lt;code&gt;mysqli_connect()&lt;/code&gt; 、 mysqli_query（）に置き換えられています。</target>
        </trans-unit>
        <trans-unit id="b9701d5279e360121f1a9236afe73ce6cdab2437" translate="yes" xml:space="preserve">
          <source>This answer is written to show just how trivial it is to bypass poorly written PHP user-validation code, how (and using what) these attacks work and how to replace the old MySQL functions with a secure prepared statement - and basically, why StackOverflow users (probably with a lot of rep) are barking at new users asking questions to improve their code.</source>
          <target state="translated">この回答は、稚拙に書かれた PHP のユーザ検証コードを迂回することがいかに些細なことか、これらの攻撃がどのように(そして何を使って)機能するか、古い MySQL の関数を安全な準備された文に置き換える方法を示すために書かれています-そして基本的には、なぜ StackOverflow のユーザ(おそらく多くの反響を得ている)が、自分のコードを改善するために質問をしてくる新しいユーザに吠えているのかを示すために書かれています。</target>
        </trans-unit>
        <trans-unit id="acf591526b7653913fa0342793a9a8eed4e6efa1" translate="yes" xml:space="preserve">
          <source>This is a classic SQL injection attack. One of the simplest for that matter. On the scale of attack vectors, this is a toddler attacking a tank - and winning.</source>
          <target state="translated">これは古典的なSQLインジェクション攻撃です。その点では最も単純な攻撃の一つです。攻撃のベクトルのスケールで言えば、これは幼児が戦車を攻撃して勝ったようなものです。</target>
        </trans-unit>
        <trans-unit id="53d154ecdaa8d6b0fba2af9eefdc52d17f07dcb7" translate="yes" xml:space="preserve">
          <source>This is the reason behind the error.</source>
          <target state="translated">これがエラーの原因です。</target>
        </trans-unit>
        <trans-unit id="6bafa12ee03b3bf471f9002286e0bb60d99c0b9e" translate="yes" xml:space="preserve">
          <source>This is why you are being yelled at when posting questions - it's because people can see that your code can be bypassed wihout even trying. Please, do use this question and answer to improve your code, to make it more secure and to use functions that are current.</source>
          <target state="translated">これが質問を投稿するときに怒鳴られる理由です-それは、あなたのコードが試してもいないのにバイパスされることを人々が見ることができるからです。どうか、この質問と回答を使ってコードを改善し、より安全にし、最新の関数を使用するようにしてください。</target>
        </trans-unit>
        <trans-unit id="7d8ecdcb3fa76fbbc753f992ef32e06a8691ab30" translate="yes" xml:space="preserve">
          <source>This latter issue is a problem.</source>
          <target state="translated">この後者の問題は</target>
        </trans-unit>
        <trans-unit id="b327464305947f9b5efea8f1e165dfaa4f7af138" translate="yes" xml:space="preserve">
          <source>This means that as of &lt;a href=&quot;https://www.php.net/eol.php&quot;&gt;31 Dec 2018&lt;/a&gt; it does not exist in any supported version of PHP. If you are using a version of PHP which supports it, you are using a version which doesn't get security problems fixed.</source>
          <target state="translated">つまり、 &lt;a href=&quot;https://www.php.net/eol.php&quot;&gt;2018年12月31日&lt;/a&gt;現在、サポートされているどのバージョンのPHPにも存在しません。 それをサポートするバージョンのPHPを使用している場合は、セキュリティの問題が修正されていないバージョンを使用しています。</target>
        </trans-unit>
        <trans-unit id="c5028f4b1c5e464cbdf5fbc73b406c40f8937746" translate="yes" xml:space="preserve">
          <source>This means that the PHP community is gradually dropping support for these very old functions. They are likely to not exist in a future (recent) version of PHP! Continued use of these functions may break your code in the (not so) far future.</source>
          <target state="translated">これは、PHP コミュニティがこれらの非常に古い関数のサポートを徐々に減らしていることを意味します。これらの関数は、将来の (最近の)PHP のバージョンでは存在しない可能性が高いのです! これらの関数を使い続けると、(そう遠くない将来に)あなたのコードが壊れてしまうかもしれません。</target>
        </trans-unit>
        <trans-unit id="a9447e1e24f2f798f77e4acb808ca245ef8e28b9" translate="yes" xml:space="preserve">
          <source>This time, we get the following:</source>
          <target state="translated">今回は以下のようになります。</target>
        </trans-unit>
        <trans-unit id="7b5d0b0f701ec4934ce62c2d94018de81b4de43f" translate="yes" xml:space="preserve">
          <source>Thus also allowed &lt;code&gt;:named&lt;/code&gt; placeholder lists later.</source>
          <target state="translated">したがって、後ほど &lt;code&gt;:named&lt;/code&gt; プレースホルダーリストも許可されます。</target>
        </trans-unit>
        <trans-unit id="1e3281a962e6db2e54e787f796eb7d2b1582389a" translate="yes" xml:space="preserve">
          <source>Transactions</source>
          <target state="translated">Transactions</target>
        </trans-unit>
        <trans-unit id="5ce32adc4f972e95e060d45591a7aa082f17d9f6" translate="yes" xml:space="preserve">
          <source>Unless you also introduce parameter binding or can utilize something else from the nicer API, it's a pointless switch. I hope it's portrayed simple enough to not further the discouragement to newcomers. (Education usually works better than prohibition.)</source>
          <target state="translated">パラメータバインディングも導入するか、ナイスなAPIから何か別のものを活用できない限り、無意味な切り替えです。新規参入者への落胆を助長しないように、シンプルに描かれているといいですね。(通常、教育は禁止よりも効果があります)。</target>
        </trans-unit>
        <trans-unit id="9f6d94af323287247ddbdf1bbc2b55dbba5ca657" translate="yes" xml:space="preserve">
          <source>Use one of the &lt;a href=&quot;http://php.net/security.magicquotes.disabling&quot;&gt;userland reversal&lt;/a&gt; approaches. Then remove the &lt;code&gt;stripslashes()&lt;/code&gt; in the &lt;code&gt;sanitize&lt;/code&gt; function.</source>
          <target state="translated">&lt;a href=&quot;http://php.net/security.magicquotes.disabling&quot;&gt;ユーザーランドの反転&lt;/a&gt;アプローチのいずれかを使用します。 次に、 &lt;code&gt;stripslashes()&lt;/code&gt; 関数でstripslashes（）を削除します。</target>
        </trans-unit>
        <trans-unit id="d22feee0d218aca696cac86b7e4deb1dabc1af1d" translate="yes" xml:space="preserve">
          <source>User wasn't verified. Awesome.</source>
          <target state="translated">ユーザーは確認されていません 凄いですね。</target>
        </trans-unit>
        <trans-unit id="ef7051e396eea2b5e406d5540802dd68853d889b" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;http://fossil.include-once.org/upgradephp/artifact/43ab742241e5a3be43d31764dd333ba68e245360&quot;&gt;&amp;lt;&lt;strong&gt;pdo_mysql.php&lt;/strong&gt;&amp;gt;&lt;/a&gt; you can switch from the old mysql_ functions with &lt;em&gt;minimal effort&lt;/em&gt;. It adds &lt;code&gt;pdo_&lt;/code&gt; function wrappers which replace their &lt;code&gt;mysql_&lt;/code&gt; counterparts.</source>
          <target state="translated">&lt;a href=&quot;http://fossil.include-once.org/upgradephp/artifact/43ab742241e5a3be43d31764dd333ba68e245360&quot;&gt;&amp;lt; &lt;strong&gt;pdo_mysql.php&lt;/strong&gt; &amp;gt;&lt;/a&gt;を使用すると、 &lt;em&gt;最小限の労力で&lt;/em&gt;古いmysql_関数から切り替えることができます。 &lt;code&gt;mysql_&lt;/code&gt; に対応する &lt;code&gt;pdo_&lt;/code&gt; 関数ラッパーを追加します。</target>
        </trans-unit>
        <trans-unit id="a3546de296990f00559369725f6b73e5773d07ec" translate="yes" xml:space="preserve">
          <source>Using prepared statements in &lt;code&gt;PDO&lt;/code&gt; or &lt;code&gt;mysqli&lt;/code&gt; will make it so that these sorts of programming errors are more difficult to make.</source>
          <target state="translated">&lt;code&gt;PDO&lt;/code&gt; または &lt;code&gt;mysqli&lt;/code&gt; で準備済みステートメントを使用すると、このようなプログラミングエラーが発生しにくくなります。</target>
        </trans-unit>
        <trans-unit id="486fedcd9d1e44ea49d7fea32a811becae9a5ea2" translate="yes" xml:space="preserve">
          <source>Warning: mysql_connect(): No such file or directory</source>
          <target state="translated">警告:mysql_connect()。そのようなファイルまたはディレクトリはありません</target>
        </trans-unit>
        <trans-unit id="4c5244a83456f7a8a64e8871234ed5b7ddc13050" translate="yes" xml:space="preserve">
          <source>We can use MySQL functions by creating a wrapper function for each below is running code. &lt;a href=&quot;https://www.talkforweb.com.au/php/how-to-use-mysql-in-php-7-version&quot;&gt;Click here&lt;/a&gt;</source>
          <target state="translated">MySQL関数を使用するには、コードを実行している以下のそれぞれに対してラッパー関数を作成します。 &lt;a href=&quot;https://www.talkforweb.com.au/php/how-to-use-mysql-in-php-7-version&quot;&gt;ここをクリック&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="75b20bd2200600dac46620c83364968245f98595" translate="yes" xml:space="preserve">
          <source>Well, not really. Lets say the user is a clever little person. Lets say the person is me.</source>
          <target state="translated">まあ、そうでもない。ユーザーが賢い小さな人だとしましょう。その人が私だとしよう</target>
        </trans-unit>
        <trans-unit id="7899429896ac711595aff78d7cfe787d90c838cd" translate="yes" xml:space="preserve">
          <source>Well, the answer would be as follows:</source>
          <target state="translated">まあ、答えは次のようになるでしょう。</target>
        </trans-unit>
        <trans-unit id="0fbfa99fed4d886de39ca6ae2e0a7d91af92c318" translate="yes" xml:space="preserve">
          <source>What are the technical reasons for why one shouldn't use &lt;code&gt;mysql_*&lt;/code&gt; functions? (e.g. &lt;code&gt;mysql_query()&lt;/code&gt;, &lt;code&gt;mysql_connect()&lt;/code&gt; or &lt;code&gt;mysql_real_escape_string()&lt;/code&gt;)?</source>
          <target state="translated">&lt;code&gt;mysql_*&lt;/code&gt; 関数を使用してはならない理由は何ですか？ （例： &lt;code&gt;mysql_query()&lt;/code&gt; 、 &lt;code&gt;mysql_connect()&lt;/code&gt; または &lt;code&gt;mysql_real_escape_string()&lt;/code&gt; ）？</target>
        </trans-unit>
        <trans-unit id="cd38c24be39c82544339ccc932bdc9bf31585932" translate="yes" xml:space="preserve">
          <source>What we are doing in &lt;code&gt;mysql_*&lt;/code&gt; function is:</source>
          <target state="translated">&lt;code&gt;mysql_*&lt;/code&gt; 関数で行っていることは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="b21a3658c12dc7f9942d92330d6ba7faf54fd2f5" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;mysql_*&lt;/code&gt; functions, you have to remember to run user-supplied parameters through &lt;code&gt;mysql_real_escape_string()&lt;/code&gt;. If you forget in just one place or if you happen to escape only part of the input, your database may be subject to attack.</source>
          <target state="translated">&lt;code&gt;mysql_*&lt;/code&gt; 関数を使用するときは、 &lt;code&gt;mysql_real_escape_string()&lt;/code&gt; を介してユーザー指定のパラメーターを実行することを忘れないでください。 1か所だけで忘れたり、入力の一部だけをエスケープしたりすると、データベースが攻撃を受ける可能性があります。</target>
        </trans-unit>
        <trans-unit id="2931a1a4cd0a0347c48feeaca13f011b624aed4e" translate="yes" xml:space="preserve">
          <source>When you go on any &lt;code&gt;mysql_*&lt;/code&gt; function manual page, you see a red box, explaining it should not be used anymore.</source>
          <target state="translated">&lt;code&gt;mysql_*&lt;/code&gt; 関数のマニュアルページに移動すると、赤いボックスが表示され、これを使用しないでください。</target>
        </trans-unit>
        <trans-unit id="cf411fb39b805de367075ecc7671c209fb94fd0c" translate="yes" xml:space="preserve">
          <source>When you go to any &lt;code&gt;mysql&lt;/code&gt; function manual page, you see a red box, explaining it should not be used anymore.</source>
          <target state="translated">&lt;code&gt;mysql&lt;/code&gt; 関数のマニュアルページに移動すると、赤いボックスが表示され、もう使用しないように説明しています。</target>
        </trans-unit>
        <trans-unit id="de52d720c2b9fc0148a79e4ac0bf6e334c6922de" translate="yes" xml:space="preserve">
          <source>When you scramble string variables into the SQL queries, it doesn't just get more intricate for you to follow. It's also extraneous effort for MySQL to segregate code and data again.</source>
          <target state="translated">SQLクエリに文字列変数をスクランブルしても、それはあなたが従うためにより複雑になるだけではありません。また、MySQLがコードとデータを再び分離するのも余計な手間です。</target>
        </trans-unit>
        <trans-unit id="08e4f5d49c704cc6527ca62c9c0c5f10e94a3848" translate="yes" xml:space="preserve">
          <source>While code is being converted to &lt;code&gt;MySQLi&lt;/code&gt;/&lt;code&gt;PDO&lt;/code&gt;, &lt;code&gt;E_DEPRECATED&lt;/code&gt; errors can be suppressed by setting &lt;code&gt;error_reporting&lt;/code&gt; in &lt;strong&gt;php.ini&lt;/strong&gt; to exclude &lt;code&gt;E_DEPRECATED:&lt;/code&gt;</source>
          <target state="translated">コードが &lt;code&gt;MySQLi&lt;/code&gt; / &lt;code&gt;PDO&lt;/code&gt; に変換されている間、 &lt;strong&gt;php.iniで&lt;/strong&gt; &lt;code&gt;error_reporting&lt;/code&gt; を設定し&lt;strong&gt;て&lt;/strong&gt; &lt;code&gt;E_DEPRECATED:&lt;/code&gt; を除外することにより、 &lt;code&gt;E_DEPRECATED&lt;/code&gt; エラーを抑制できます。</target>
        </trans-unit>
        <trans-unit id="e96fbd5b6300a2987f662d74b0a387a6eaee6777" translate="yes" xml:space="preserve">
          <source>While it qualifies for the simplest-thing-that-could-possibly-work category, it's also still very experimental code. I just wrote it over the weekend. There's a plethora of alternatives however. Just google for &lt;a href=&quot;https://www.google.de/search?client=stackoverflow&amp;amp;q=PHP+database+abstraction&quot;&gt;PHP database abstraction&lt;/a&gt; and browse a little. There always have been and will be lots of excellent libraries for such tasks.</source>
          <target state="translated">それは、最も単純なものである可能性のある作業カテゴリに適格ですが、それでも非常に実験的なコードです。 週末に書いただけです。 ただし、選択肢はたくさんあります。 &lt;a href=&quot;https://www.google.de/search?client=stackoverflow&amp;amp;q=PHP+database+abstraction&quot;&gt;PHPデータベースの抽象化の&lt;/a&gt;ためにグーグルし、少し閲覧します。 そのようなタスクのための優れたライブラリが常にあり、今後もたくさんあります。</target>
        </trans-unit>
        <trans-unit id="3db062dc13c427b5833ae038cf2841371c4940cd" translate="yes" xml:space="preserve">
          <source>While this answer stresses that you should care about the readability advantages of dropping &lt;s&gt;&lt;code&gt;mysql_&lt;/code&gt;&lt;/s&gt;. There's occasionally also a performance advantage (repeated INSERTs with just differing values) due to this visible and technical data/code separation.</source>
          <target state="translated">この回答は、 &lt;s&gt; &lt;code&gt;mysql_&lt;/code&gt; &lt;/s&gt;を削除することの読みやすさの利点に注意する必要があることを強調しています。 この可視的で技術的なデータとコードの分離により、パフォーマンス上の利点（値が異なるだけのINSERTの繰り返し）も時々あります。</target>
        </trans-unit>
        <trans-unit id="21e2caea4476d26af34541ca7c909c7ff2fa4a7f" translate="yes" xml:space="preserve">
          <source>Why</source>
          <target state="translated">Why</target>
        </trans-unit>
        <trans-unit id="3ef9f79b5eb449f72b3fdf90c2c98ca4727dbf72" translate="yes" xml:space="preserve">
          <source>Why should I use something else even if they work on my site?</source>
          <target state="translated">自分のサイトでは機能しているのに、なぜ他のものを使わなければならないのでしょうか?</target>
        </trans-unit>
        <trans-unit id="bef272d0089010f98f10750eee469e97be3484f5" translate="yes" xml:space="preserve">
          <source>Why shouldn't I use mysql_* functions in PHP</source>
          <target state="translated">PHPでmysql_*関数を使用してはいけない理由</target>
        </trans-unit>
        <trans-unit id="4ba7de6b07d2790dbe183ff8860e4b3a376efb27" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;?&lt;/code&gt; placeholders applied you don't have to bother with that:</source>
          <target state="translated">とは &lt;code&gt;?&lt;/code&gt; プレースホルダーはあなたがそれを気にする必要がないと適用しました：</target>
        </trans-unit>
        <trans-unit id="1b521949ba1a0d81fe7f7a22ca009f139258af49" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;PDO&lt;/code&gt;: All you need to do is create a new &lt;code&gt;PDO&lt;/code&gt; object. The constructor accepts parameters for specifying the database source &lt;code&gt;PDO&lt;/code&gt;'s constructor mostly takes four parameters which are &lt;code&gt;DSN&lt;/code&gt; (data source name) and  optionally &lt;code&gt;username&lt;/code&gt;, &lt;code&gt;password&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;PDO&lt;/code&gt; を使用する場合：新しい &lt;code&gt;PDO&lt;/code&gt; オブジェクトを作成するだけです。 コンストラクターは、データベースソースを指定するためのパラメーターを受け入れます &lt;code&gt;PDO&lt;/code&gt; のコンストラクターは、ほとんどの場合、 &lt;code&gt;DSN&lt;/code&gt; （データソース名）と、オプションで &lt;code&gt;username&lt;/code&gt; 、 &lt;code&gt;password&lt;/code&gt; の 4つのパラメーターを取ります 。</target>
        </trans-unit>
        <trans-unit id="e432386262217c200274bffa28234079d822668e" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;mysql_*&lt;/code&gt; function or we can say it the old way (deprecated in PHP 5.5 and above)</source>
          <target state="translated">&lt;code&gt;mysql_*&lt;/code&gt; 関数を使用するか、古い方法と言えます（PHP 5.5以降では非推奨）</target>
        </trans-unit>
        <trans-unit id="aa425a4526ed951fbc2faa2bf53cf3ac2eedcb7b" translate="yes" xml:space="preserve">
          <source>With bound parameters you separate SQL code and SQL-context values in your PHP code. But it doesn't get shuffled up again behind the scenes (except with PDO::EMULATE_PREPARES). Your database receives the unvaried SQL commands and 1:1 variable values.</source>
          <target state="translated">バインドされたパラメータを使用すると、PHP コードの中で SQL コードと SQL コンテキストの値を分離することができます。しかし、それが舞台裏で再びシャッフルされることはありません (PDO::EMULATE_PREPARES を使用した場合を除く)。データベースは、変数なしの SQL コマンドと 1:1 の変数値を受け取ります。</target>
        </trans-unit>
        <trans-unit id="e7b9c34542bc7220d2b9d0c79dbfc014575aed6b" translate="yes" xml:space="preserve">
          <source>With that done, we can move to our PHP code.</source>
          <target state="translated">これで、PHPのコードに移ることができます。</target>
        </trans-unit>
        <trans-unit id="bd1fd1c6043beb37d33d7ef7c193233e05a2152e" translate="yes" xml:space="preserve">
          <source>You can also bind using an execute array as well:</source>
          <target state="translated">また、実行配列を使ってバインドすることもできます。</target>
        </trans-unit>
        <trans-unit id="39834359a3e108415bb98b0c8863a7cd433c0634" translate="yes" xml:space="preserve">
          <source>You can also pass in several driver options as an array to the fourth parameter. I recommend passing the parameter which puts &lt;code&gt;PDO&lt;/code&gt; into exception mode. Because some &lt;code&gt;PDO&lt;/code&gt; drivers don't support native prepared statements, so &lt;code&gt;PDO&lt;/code&gt; performs emulation of the prepare. It also lets you manually enable this emulation. To use the native server-side prepared statements, you should explicitly set it &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">いくつかのドライバーオプションを配列として4番目のパラメーターに渡すこともできます。 &lt;code&gt;PDO&lt;/code&gt; を例外モードにするパラメーターを渡すことをお勧めします。 一部の &lt;code&gt;PDO&lt;/code&gt; ドライバーはネイティブの準備済みステートメントをサポートしないため、 PDOは準備のエミュレーションを実行します。 また、このエミュレーションを手動で有効にすることもできます。 ネイティブのサーバー側の準備済みステートメントを使用するには、明示的に &lt;code&gt;false&lt;/code&gt; に設定する必要があります 。</target>
        </trans-unit>
        <trans-unit id="0106d16cdb27ff2ec30c1b900ece093440a823c3" translate="yes" xml:space="preserve">
          <source>You can hardly find an example for PDO to handle such practical case.</source>
          <target state="translated">PDOがこのような実用的なケースに対応する例はほとんど見当たりません。</target>
        </trans-unit>
        <trans-unit id="193b814af13365eaaf93b92758d562e11bdc9a6e" translate="yes" xml:space="preserve">
          <source>You can use a prepared statement by including placeholders in your SQL. There are basically three ones without placeholders (don't try this with variable its above one), one with unnamed placeholders, and one with named placeholders.</source>
          <target state="translated">SQLにプレースホルダを含めることで、準備された文を使うことができます。基本的には、プレースホルダのないもの(上の変数では試してはいけません)、名前のないもの、名前付きプレースホルダのあるものの3つがあります。</target>
        </trans-unit>
        <trans-unit id="9f8aaea6ff6d99acc02af021cf0de60526c70b07" translate="yes" xml:space="preserve">
          <source>You do not have to handle with &lt;code&gt;try&lt;/code&gt;-&lt;code&gt;catch&lt;/code&gt; right now. You can catch it at any time appropriate, but I strongly recommend you to use &lt;code&gt;try&lt;/code&gt;-&lt;code&gt;catch&lt;/code&gt;. Also it may make more sense to catch it at outside the function that calls the &lt;code&gt;PDO&lt;/code&gt; stuff:</source>
          <target state="translated">&lt;code&gt;try&lt;/code&gt; で処理する必要はありません-今すぐ &lt;code&gt;catch&lt;/code&gt; してください 。 いつでも適切にキャッチできますが、 &lt;code&gt;try&lt;/code&gt; - &lt;code&gt;catch&lt;/code&gt; を使用することを強くお勧めします。 また、 &lt;code&gt;PDO&lt;/code&gt; を呼び出す関数の外でそれをキャッチする方が理にかなっているかもしれません：</target>
        </trans-unit>
        <trans-unit id="f6ec43a805132e214cc4951849805b992f1dca6d" translate="yes" xml:space="preserve">
          <source>You just need a less unwieldy API.</source>
          <target state="translated">扱いにくいAPIが必要なだけです。</target>
        </trans-unit>
        <trans-unit id="83c916251fa57138befaf512e453b91c66f1222f" translate="yes" xml:space="preserve">
          <source>You may have to keep the rest of your &lt;code&gt;sanitize()&lt;/code&gt; function for now if your database and application flow expect HTML-context-safe strings. Add a comment that it applies only HTML escaping henceforth.</source>
          <target state="translated">データベースとアプリケーションフローがHTMLコンテキストセーフな文字列を想定している場合は、今のところ残りの &lt;code&gt;sanitize()&lt;/code&gt; 関数を保持する必要があるかもしれません。 今後はHTMLエスケープのみが適用されるというコメントを追加します。</target>
        </trans-unit>
        <trans-unit id="109ef7c7ad471c0fd553af6c791c965eb0053415" translate="yes" xml:space="preserve">
          <source>You'll get more helpful warnings in most cases than PDO or mysql_ usually provide after failed queries.</source>
          <target state="translated">ほとんどの場合、PDOやmysql_が通常提供しているクエリの失敗後の警告よりも有用な警告が表示されます。</target>
        </trans-unit>
        <trans-unit id="00c17ebf04ff3d123b5bf045615793029cdab7eb" translate="yes" xml:space="preserve">
          <source>Your code is &lt;em&gt;using&lt;/em&gt; PDO.</source>
          <target state="translated">コードでPDO &lt;em&gt;を使用してい&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="114e82ddc86b988c9f233dd5f847ff571f7ead99" translate="yes" xml:space="preserve">
          <source>Your code will work alike and still mostly look the same:</source>
          <target state="translated">あなたのコードは同じように動作し、ほとんど同じように見えます。</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">and</target>
        </trans-unit>
        <trans-unit id="09e7d790f3ab05e4f56ffe51297bfcdde73f15bf" translate="yes" xml:space="preserve">
          <source>and submit it.</source>
          <target state="translated">と提出してください。</target>
        </trans-unit>
        <trans-unit id="12328e72903e2254dcef3aa99b38ab6b1480db8b" translate="yes" xml:space="preserve">
          <source>are out of date - they're not maintained any more</source>
          <target state="translated">が古くなっている</target>
        </trans-unit>
        <trans-unit id="ed3059ee362c75dcd7469e8cfbf286738600b576" translate="yes" xml:space="preserve">
          <source>being an average PHP user, most likely your idea of using these functions is error-prone and wrong. Just because of all these numerous tutorials and manuals which teach you the wrong way. Not the functions themselves - I have to emphasize it - but the way they are used.</source>
          <target state="translated">平均的な PHP ユーザであれば、これらの関数を使用することについてのあなたの考えはエラーを起こしやすく間違っている可能性が高いでしょう。なぜなら、これら多くのチュートリアルやマニュアルがあなたに間違った方法を教えているからです。関数そのものではなく-私はそれを強調しなければなりません-しかし、それらが使用される方法です。</target>
        </trans-unit>
        <trans-unit id="7a880ef5359c5138ea32e24d56e7ada875ea4f77" translate="yes" xml:space="preserve">
          <source>don't allow you to move easily to another database backend</source>
          <target state="translated">別のデータベースバックエンドに簡単に移動することができません。</target>
        </trans-unit>
        <trans-unit id="830033092d1fd68deec56e78e5679b5bb240badd" translate="yes" xml:space="preserve">
          <source>don't support prepared statements, hence</source>
          <target state="translated">用意されたステートメントをサポートしていないので</target>
        </trans-unit>
        <trans-unit id="2935b5bb29398649ebd070be72ec96b9e5d1dcad" translate="yes" xml:space="preserve">
          <source>encourage programmers to use concatenation to build queries, leading to SQL injection vulnerabilities</source>
          <target state="translated">SQL インジェクションの脆弱性につながる結合を使用してクエリを構築することをプログラマーに奨励します。</target>
        </trans-unit>
        <trans-unit id="acc54e219ffe07f00fcf43d7c700c28aea05aca4" translate="yes" xml:space="preserve">
          <source>further use of these functions with modern PHP versions will raise deprecated-level notices. They simply can be turned off.</source>
          <target state="translated">これらの関数を最新の PHP バージョンで使用すると、非推奨レベルの通知が表示されます。これらは単にオフにすることができます。</target>
        </trans-unit>
        <trans-unit id="d815f35640c25abe234d7b810ff746628e851f0e" translate="yes" xml:space="preserve">
          <source>in a distant future, they can be possibly removed from the default PHP build. Not a big deal too, as mydsql ext will be moved into PECL and every hoster will be happy to compile PHP with it, as they don't want to lose clients whose sites were working for decades.</source>
          <target state="translated">遠い将来、それらはデフォルトのPHPビルドから削除される可能性があります。mydsql extはPECLに移行され、すべてのホスティング業者はそれでPHPをコンパイルすることに満足しているので、大したことではありません。</target>
        </trans-unit>
        <trans-unit id="7f76e98f72dce710ff68c2850ea89b8fb65a8322" translate="yes" xml:space="preserve">
          <source>non-blocking, asynchronous queries</source>
          <target state="translated">ノンブロッキング非同期クエリ</target>
        </trans-unit>
        <trans-unit id="de7c9165c22b2bbc30bc3ecad1c9e6bf4b9c7c6f" translate="yes" xml:space="preserve">
          <source>stored procedures returning multiple resultsets</source>
          <target state="translated">ストアドプロシージャが複数の結果セットを返す</target>
        </trans-unit>
        <trans-unit id="95b2ac54f95972248a7b13860ea1d8810f52eeb0" translate="yes" xml:space="preserve">
          <source>strong resistance from Stackoverflow community. Еverytime you mention these honest functions, you being told that they are under strict taboo.</source>
          <target state="translated">Stackoverflow コミュニティから強い抵抗を受けています。これらの正直な機能について言及するたびに、それらは厳格なタブーの下にあると言われています。</target>
        </trans-unit>
        <trans-unit id="4ca2ac0512b37905e3e07228b035c03f882fec79" translate="yes" xml:space="preserve">
          <source>the list goes on ...</source>
          <target state="translated">挙げればきりがない</target>
        </trans-unit>
        <trans-unit id="2eb74edb23d3b49834fb5098164392d5ce9f9a09" translate="yes" xml:space="preserve">
          <source>unlike mysqli, PDO can always return query result in a simple usual array, while mysqli can do it only on mysqlnd installations.</source>
          <target state="translated">mysqli とは異なり、PDO は常にクエリの結果をシンプルな通常の配列で返すことができますが、mysqli は mysqlnd のインストール時にのみクエリを返すことができます。</target>
        </trans-unit>
        <trans-unit id="aa4f5271f5951ab6344d7de045285abcfe2bf002" translate="yes" xml:space="preserve">
          <source>unlike mysqli, PDO can bind placeholders &lt;em&gt;by value&lt;/em&gt;, which makes dynamically built queries feasible without several screens of quite messy code.</source>
          <target state="translated">mysqliとは異なり、PDOはプレースホルダー&lt;em&gt;をvalueによって&lt;/em&gt;バインドでき&lt;em&gt;ます&lt;/em&gt; 。これにより、動的に構築されたクエリを、かなり厄介なコードのいくつかの画面なしで実行可能にします。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
