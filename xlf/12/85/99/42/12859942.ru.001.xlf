<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://stackoverflow.com/questions/12859942">
    <body>
      <group id="12859942">
        <trans-unit id="6cda3a126b38102fb9da9475533aaf3305f7fc81" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://en.wikipedia.org/wiki/Stored_procedure&quot;&gt;Stored procedures&lt;/a&gt; (can't handle multiple result sets)</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/Stored_procedure&quot;&gt;Хранимые процедуры&lt;/a&gt; (не могут обрабатывать несколько наборов результатов)</target>
        </trans-unit>
        <trans-unit id="b3ded5903fe8ef5cae508b2ae92f896e2213e013" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://php.net/manual/en/book.mysqli.php&quot;&gt;MySQLi&lt;/a&gt; is the 'improved' extension for working with MySQL databases. It takes advantage of features that are available in newer versions of the MySQL server, exposes both a function-oriented and an object-oriented interface to the developer and a does few other nifty things.</source>
          <target state="translated">&lt;a href=&quot;http://php.net/manual/en/book.mysqli.php&quot;&gt;MySQLi&lt;/a&gt; - это &amp;laquo;улучшенное&amp;raquo; расширение для работы с базами данных MySQL. Он использует преимущества функций, доступных в более новых версиях сервера MySQL, предоставляет разработчикам как функционально-ориентированный, так и объектно-ориентированный интерфейс и делает несколько других изящных вещей.</target>
        </trans-unit>
        <trans-unit id="d17381afa285d004079efeb7bdb099fd00671abd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://php.net/manual/en/book.pdo.php&quot;&gt;PDO&lt;/a&gt; offers an API that consolidates most of the functionality that was previously spread across the major database access extensions, i.e. MySQL, PostgreSQL, SQLite, MSSQL, etc. The interface exposes high-level objects for the programmer to work with database connections, queries and result sets, and low-level drivers perform communication and resource handling with the database server. A lot of discussion and work is going into PDO and it&amp;rsquo;s considered the appropriate method of working with databases in modern, professional code.</source>
          <target state="translated">&lt;a href=&quot;http://php.net/manual/en/book.pdo.php&quot;&gt;PDO&lt;/a&gt; предлагает API, который объединяет большинство функций, которые ранее были распространены на основные расширения доступа к базе данных, то есть MySQL, PostgreSQL, SQLite, MSSQL и т. Д. Интерфейс предоставляет высокоуровневые объекты для программиста для работы с соединениями с базой данных, запросами и наборы результатов и низкоуровневые драйверы осуществляют связь и обработку ресурсов с сервером базы данных. Много дискуссий и работы идет о PDO, и он считается подходящим методом работы с базами данных в современном профессиональном коде.</target>
        </trans-unit>
        <trans-unit id="046ffaee85489e61d2263f509946570f847cc8ea" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://php.net/manual/en/pdostatement.fetchall.php&quot;&gt;&lt;code&gt;PDOStatement::fetchAll()&lt;/code&gt;&lt;/a&gt; - Returns an array containing all of the result set rows</source>
          <target state="translated">&lt;a href=&quot;http://php.net/manual/en/pdostatement.fetchall.php&quot;&gt; &lt;code&gt;PDOStatement::fetchAll()&lt;/code&gt; &lt;/a&gt; - возвращает массив, содержащий все строки результирующего набора</target>
        </trans-unit>
        <trans-unit id="b28a28e308fceeb11923ec4f6b51a94fdc522831" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://php.net/manual/en/pdostatement.fetchcolumn.php&quot;&gt;&lt;code&gt;PDOStatement::fetchColumn()&lt;/code&gt;&lt;/a&gt; - Returns a single column from the next row of a result set</source>
          <target state="translated">&lt;a href=&quot;http://php.net/manual/en/pdostatement.fetchcolumn.php&quot;&gt; &lt;code&gt;PDOStatement::fetchColumn()&lt;/code&gt; &lt;/a&gt; - возвращает один столбец из следующей строки набора результатов</target>
        </trans-unit>
        <trans-unit id="f38ca8ad882074ee896d85b8ff9c3b2f2d31a650" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://php.net/manual/en/pdostatement.fetchobject.php&quot;&gt;&lt;code&gt;PDOStatement::fetchObject()&lt;/code&gt;&lt;/a&gt; - Fetches the next row and returns it as an object.</source>
          <target state="translated">&lt;a href=&quot;http://php.net/manual/en/pdostatement.fetchobject.php&quot;&gt; &lt;code&gt;PDOStatement::fetchObject()&lt;/code&gt; &lt;/a&gt; - извлекает следующую строку и возвращает ее как объект.</target>
        </trans-unit>
        <trans-unit id="6f018387924cb8a35b2d0d50bcf690d933b109aa" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://php.net/manual/en/pdostatement.setfetchmode.php&quot;&gt;&lt;code&gt;PDOStatement::setFetchMode()&lt;/code&gt;&lt;/a&gt; - Set the default fetch mode for this statement</source>
          <target state="translated">&lt;a href=&quot;http://php.net/manual/en/pdostatement.setfetchmode.php&quot;&gt; &lt;code&gt;PDOStatement::setFetchMode()&lt;/code&gt; &lt;/a&gt; - устанавливает режим выборки по умолчанию для этого оператора</target>
        </trans-unit>
        <trans-unit id="0fa08d46c3da4c6dbad08eae37dd7aabd954a814" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://stackoverflow.com/q/12859942&quot;&gt;&lt;strong&gt;Please, don't use &lt;code&gt;mysql_*&lt;/code&gt; functions in new code&lt;/strong&gt;&lt;/a&gt;. They are no longer maintained &lt;a href=&quot;https://wiki.php.net/rfc/mysql_deprecation&quot;&gt;and are officially deprecated&lt;/a&gt;. See the &lt;a href=&quot;http://uk.php.net/manual/en/function.mysql-connect.php&quot;&gt;&lt;strong&gt;red box&lt;/strong&gt;&lt;/a&gt;? Learn about &lt;a href=&quot;http://en.wikipedia.org/wiki/Prepared_statement&quot;&gt;&lt;em&gt;prepared statements&lt;/em&gt;&lt;/a&gt; instead, and use &lt;a href=&quot;http://php.net/pdo&quot;&gt;PDO&lt;/a&gt; or &lt;a href=&quot;http://php.net/mysqli&quot;&gt;MySQLi&lt;/a&gt; - &lt;a href=&quot;http://php.net/manual/en/mysqlinfo.api.choosing.php&quot;&gt;this article&lt;/a&gt; will help you decide which. If you choose PDO, &lt;a href=&quot;http://wiki.hashphp.org/PDO_Tutorial_for_MySQL_Developers&quot;&gt;here is a good tutorial&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/q/12859942&quot;&gt;&lt;strong&gt;Пожалуйста, не используйте функции &lt;code&gt;mysql_*&lt;/code&gt; в новом коде&lt;/strong&gt;&lt;/a&gt; . Они больше не поддерживаются &lt;a href=&quot;https://wiki.php.net/rfc/mysql_deprecation&quot;&gt;и официально устарели&lt;/a&gt; . Видишь &lt;a href=&quot;http://uk.php.net/manual/en/function.mysql-connect.php&quot;&gt;&lt;strong&gt;красную коробку&lt;/strong&gt;&lt;/a&gt; ? Вместо этого узнайте о &lt;a href=&quot;http://en.wikipedia.org/wiki/Prepared_statement&quot;&gt;&lt;em&gt;готовых утверждениях&lt;/em&gt;&lt;/a&gt; и используйте &lt;a href=&quot;http://php.net/pdo&quot;&gt;PDO&lt;/a&gt; или &lt;a href=&quot;http://php.net/mysqli&quot;&gt;MySQLi&lt;/a&gt; - &lt;a href=&quot;http://php.net/manual/en/mysqlinfo.api.choosing.php&quot;&gt;эта статья&lt;/a&gt; поможет вам решить, какие именно. Если вы выбираете PDO, &lt;a href=&quot;http://wiki.hashphp.org/PDO_Tutorial_for_MySQL_Developers&quot;&gt;вот хороший учебник&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="f6ffdb59a47d534bf1c4ce50a2ab19c2c804aac9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;OR die()&lt;/code&gt; is not a good way to handle the error since we can not handle the thing in &lt;code&gt;die&lt;/code&gt;. It will just end the script abruptly and then echo the error to the screen which you usually do NOT want to show to your end users, and let bloody hackers discover your schema. Alternately, the return values of &lt;code&gt;mysql_*&lt;/code&gt; functions can often be used in conjunction with &lt;a href=&quot;http://php.net/mysql_error&quot;&gt;mysql_error()&lt;/a&gt; to handle errors.</source>
          <target state="translated">&lt;code&gt;OR die()&lt;/code&gt; не является хорошим способом обработки ошибки, поскольку мы не можем обработать эту вещь в &lt;code&gt;die&lt;/code&gt; . Он просто внезапно завершит выполнение сценария, а затем отобразит ошибку на экране, которую вы обычно НЕ хотите показывать своим конечным пользователям, и позволит кровавым хакерам обнаружить вашу схему. Альтернативно, возвращаемые значения функций &lt;code&gt;mysql_*&lt;/code&gt; могут часто использоваться вместе с &lt;a href=&quot;http://php.net/mysql_error&quot;&gt;mysql_error ()&lt;/a&gt; для обработки ошибок.</target>
        </trans-unit>
        <trans-unit id="f8d90257eb4cba009d9da07c259d01492dd67cb6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PDO::ERRMODE_EXCEPTION&lt;/code&gt;: Throw exceptions. It represents an error raised by PDO. You should not throw a &lt;code&gt;PDOException&lt;/code&gt; from your own code. See &lt;em&gt;Exceptions&lt;/em&gt; for more information about exceptions in PHP. It acts very much like &lt;code&gt;or die(mysql_error());&lt;/code&gt;, when it isn't caught. But unlike &lt;code&gt;or die()&lt;/code&gt;, the &lt;code&gt;PDOException&lt;/code&gt; can be caught and handled gracefully if you choose to do so.</source>
          <target state="translated">&lt;code&gt;PDO::ERRMODE_EXCEPTION&lt;/code&gt; : генерировать исключения. Это представляет ошибку, выдвинутую PDO. Вы не должны выбрасывать &lt;code&gt;PDOException&lt;/code&gt; из своего собственного кода. Посмотрите &lt;em&gt;Исключения&lt;/em&gt; для получения дополнительной информации об исключениях в PHP. Он действует очень похоже &lt;code&gt;or die(mysql_error());&lt;/code&gt; , когда он не пойман. Но в отличие от &lt;code&gt;or die()&lt;/code&gt; , &lt;code&gt;PDOException&lt;/code&gt; может быть перехвачено и обработано изящно, если вы решите это сделать.</target>
        </trans-unit>
        <trans-unit id="5515c76631bc1066c78ab2cd9cdef4e2a606b1d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PDO::ERRMODE_SILENT&lt;/code&gt;. It's just setting error codes and acts pretty much the same as &lt;code&gt;mysql_*&lt;/code&gt; where you must check each result and then look at &lt;code&gt;$db-&amp;gt;errorInfo();&lt;/code&gt; to get the error details.</source>
          <target state="translated">&lt;code&gt;PDO::ERRMODE_SILENT&lt;/code&gt; . Он просто устанавливает коды ошибок и действует почти так же, как &lt;code&gt;mysql_*&lt;/code&gt; , где вы должны проверить каждый результат и затем посмотреть на &lt;code&gt;$db-&amp;gt;errorInfo();&lt;/code&gt; чтобы получить подробности об ошибке.</target>
        </trans-unit>
        <trans-unit id="e7c4b1bce0513c7fb8025092a93478da761f79aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PDO::ERRMODE_WARNING&lt;/code&gt; Raise &lt;code&gt;E_WARNING&lt;/code&gt;. (Run-time warnings (non-fatal errors). Execution of the script is not halted.)</source>
          <target state="translated">&lt;code&gt;PDO::ERRMODE_WARNING&lt;/code&gt; Поднять &lt;code&gt;E_WARNING&lt;/code&gt; . (Предупреждения во время выполнения (не фатальные ошибки). Выполнение сценария не прекращается.)</target>
        </trans-unit>
        <trans-unit id="e02705f324751cbe9f1129e09c39ee8bf3c6790e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PDO::FETCH_ASSOC&lt;/code&gt;: returns an array indexed by column name as returned in your result set</source>
          <target state="translated">&lt;code&gt;PDO::FETCH_ASSOC&lt;/code&gt; : возвращает массив, проиндексированный по имени столбца, как возвращено в вашем наборе результатов</target>
        </trans-unit>
        <trans-unit id="c53f912043ed13d79a8752a65b60437033b9a967" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PDO::FETCH_BOTH&lt;/code&gt; (default): returns an array indexed by both column name and 0-indexed column number as returned in your result set</source>
          <target state="translated">&lt;code&gt;PDO::FETCH_BOTH&lt;/code&gt; (по умолчанию): возвращает массив, проиндексированный как по имени столбца, так и по номеру столбца с 0 индексами, как возвращено в вашем наборе результатов</target>
        </trans-unit>
        <trans-unit id="64c39564f8d39a4c2fdc909d2132ee966fa92c95" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PDO&lt;/code&gt; offers a better solution: exceptions. Anything we do with &lt;code&gt;PDO&lt;/code&gt; should be wrapped in a &lt;code&gt;try&lt;/code&gt;-&lt;code&gt;catch&lt;/code&gt; block. We can force &lt;code&gt;PDO&lt;/code&gt; into one of three error modes by setting the error mode attribute. Three error handling modes are below.</source>
          <target state="translated">&lt;code&gt;PDO&lt;/code&gt; предлагает лучшее решение: исключения. Все, что мы делаем с &lt;code&gt;PDO&lt;/code&gt; , должно быть заключено в блок &lt;code&gt;try&lt;/code&gt; - &lt;code&gt;catch&lt;/code&gt; . Мы можем принудительно &lt;code&gt;PDO&lt;/code&gt; в один из трех режимов ошибок, установив атрибут режима ошибок. Три режима обработки ошибок приведены ниже.</target>
        </trans-unit>
        <trans-unit id="b690a13d160e3bb95e6e3e9ad4972ca25987a5b0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SELECT&lt;/code&gt;, &lt;code&gt;INSERT&lt;/code&gt;, &lt;code&gt;UPDATE&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt; prepared queries</source>
          <target state="translated">&lt;code&gt;SELECT&lt;/code&gt; , &lt;code&gt;INSERT&lt;/code&gt; , &lt;code&gt;UPDATE&lt;/code&gt; , &lt;code&gt;DELETE&lt;/code&gt; подготовленные запросы</target>
        </trans-unit>
        <trans-unit id="8bf705f99d5823b73420e7e85ef046dfddb3f6d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ext/mysql&lt;/code&gt; was built for &lt;strong&gt;MySQL 3.23&lt;/strong&gt; and only got very few additions since then while mostly keeping compatibility with this old version which makes the code a bit harder to maintain. Missing features that is not supported by &lt;code&gt;ext/mysql&lt;/code&gt; include: (&lt;em&gt;&lt;a href=&quot;https://wiki.php.net/rfc/mysql_deprecation&quot;&gt;from PHP manual&lt;/a&gt;&lt;/em&gt;).</source>
          <target state="translated">&lt;code&gt;ext/mysql&lt;/code&gt; был построен для &lt;strong&gt;MySQL 3.23&lt;/strong&gt; и с тех пор получил лишь очень мало дополнений, сохраняя при этом совместимость с этой старой версией, что делает код немного сложнее поддерживать. К отсутствующим функциям, которые не поддерживаются &lt;code&gt;ext/mysql&lt;/code&gt; , относятся: ( &lt;em&gt;&lt;a href=&quot;https://wiki.php.net/rfc/mysql_deprecation&quot;&gt;из руководства по PHP&lt;/a&gt;&lt;/em&gt; ).</target>
        </trans-unit>
        <trans-unit id="616d50367e59cecd8e39af146c7cc40afc851bf7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mysql_*&lt;/code&gt; extension does not support &lt;strong&gt;prepared statements&lt;/strong&gt;, which is (among other things) a very effective countermeasure against &lt;strong&gt;SQL Injection&lt;/strong&gt;. It fixed a very serious vulnerability in MySQL dependent applications which allows attackers to gain access to your script and perform &lt;strong&gt;any possible query&lt;/strong&gt; on your database.</source>
          <target state="translated">&lt;code&gt;mysql_*&lt;/code&gt; не поддерживает &lt;strong&gt;подготовленные операторы&lt;/strong&gt; , что (среди прочего) является очень эффективной контрмерой против &lt;strong&gt;SQL-инъекции&lt;/strong&gt; . Он исправил очень серьезную уязвимость в MySQL-зависимых приложениях, которая позволяет злоумышленникам получить доступ к вашему сценарию и выполнить &lt;strong&gt;любой возможный запрос&lt;/strong&gt; к вашей базе данных.</target>
        </trans-unit>
        <trans-unit id="04f4afe04132a28eaf0cf86a418f420d470d506d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pdo_query()&lt;/code&gt; adds very facile support for bound parameters. Converting old code is straightforward:</source>
          <target state="translated">&lt;code&gt;pdo_query()&lt;/code&gt; добавляет очень легкую поддержку для связанных параметров. Преобразовать старый код просто:</target>
        </trans-unit>
        <trans-unit id="75528272c8ccd5010c8d8ca46c4a8dfbf9778675" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;and so on...&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;и так далее...&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5237e9f27ed52517cac1144483a5b7980060c686" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;voila&lt;/em&gt;, everything is parameterized and safe.</source>
          <target state="translated">&lt;em&gt;Вуаля&lt;/em&gt; , все параметризовано и безопасно.</target>
        </trans-unit>
        <trans-unit id="3fcb0c24213528d4e6d53492a70d7a8291036328" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;&lt;code&gt;mysql_&lt;/code&gt;&lt;/s&gt;&lt;code&gt;connect()&lt;/code&gt; becomes &lt;b&gt;&lt;code&gt;pdo_&lt;/code&gt;&lt;/b&gt;&lt;code&gt;connect()&lt;/code&gt;</source>
          <target state="translated">&lt;s&gt; &lt;code&gt;mysql_&lt;/code&gt; &lt;/s&gt; &lt;code&gt;connect()&lt;/code&gt; становится &lt;b&gt; &lt;code&gt;pdo_&lt;/code&gt; &lt;/b&gt; &lt;code&gt;connect()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5b3d112ed884c4390787d133672862205824e4fd" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;&lt;code&gt;mysql_&lt;/code&gt;&lt;/s&gt;&lt;code&gt;fetch_array()&lt;/code&gt; becomes &lt;b&gt;&lt;code&gt;pdo_&lt;/code&gt;&lt;/b&gt;&lt;code&gt;fetch_array()&lt;/code&gt;</source>
          <target state="translated">&lt;s&gt; &lt;code&gt;mysql_&lt;/code&gt; &lt;/s&gt; &lt;code&gt;fetch_array()&lt;/code&gt; становится &lt;b&gt; &lt;code&gt;pdo_&lt;/code&gt; &lt;/b&gt; &lt;code&gt;fetch_array()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a21fb7cc60ddb95c041c9f9ded1d45b2a7edf190" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;&lt;code&gt;mysql_&lt;/code&gt;&lt;/s&gt;&lt;code&gt;fetch_assoc()&lt;/code&gt; becomes &lt;b&gt;&lt;code&gt;pdo_&lt;/code&gt;&lt;/b&gt;&lt;code&gt;fetch_assoc()&lt;/code&gt;</source>
          <target state="translated">&lt;s&gt; &lt;code&gt;mysql_&lt;/code&gt; &lt;/s&gt; &lt;code&gt;fetch_assoc()&lt;/code&gt; становится &lt;b&gt; &lt;code&gt;pdo_&lt;/code&gt; &lt;/b&gt; &lt;code&gt;fetch_assoc()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ef13a65638ca5d535b808e90281c25f89511e748" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;&lt;code&gt;mysql_&lt;/code&gt;&lt;/s&gt;&lt;code&gt;insert_id()&lt;/code&gt; becomes &lt;b&gt;&lt;code&gt;pdo_&lt;/code&gt;&lt;/b&gt;&lt;code&gt;insert_id()&lt;/code&gt;</source>
          <target state="translated">&lt;s&gt; &lt;code&gt;mysql_&lt;/code&gt; &lt;/s&gt; &lt;code&gt;insert_id()&lt;/code&gt; становится &lt;b&gt; &lt;code&gt;pdo_&lt;/code&gt; &lt;/b&gt; &lt;code&gt;insert_id()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cc407c0ffce461b779a38bb1fc0dc99251428726" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;&lt;code&gt;mysql_&lt;/code&gt;&lt;/s&gt;&lt;code&gt;num_rows()&lt;/code&gt; becomes &lt;b&gt;&lt;code&gt;pdo_&lt;/code&gt;&lt;/b&gt;&lt;code&gt;num_rows()&lt;/code&gt;</source>
          <target state="translated">&lt;s&gt; &lt;code&gt;mysql_&lt;/code&gt; &lt;/s&gt; &lt;code&gt;num_rows()&lt;/code&gt; становится &lt;b&gt; &lt;code&gt;pdo_&lt;/code&gt; &lt;/b&gt; &lt;code&gt;num_rows()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9f9a2ad43ca1e733f76816229b4aa318182e265e" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;&lt;code&gt;mysql_&lt;/code&gt;&lt;/s&gt;&lt;code&gt;query()&lt;/code&gt; becomes &lt;b&gt;&lt;code&gt;pdo_&lt;/code&gt;&lt;/b&gt;&lt;code&gt;query()&lt;/code&gt;</source>
          <target state="translated">&lt;s&gt; &lt;code&gt;mysql_&lt;/code&gt; &lt;/s&gt; &lt;code&gt;query()&lt;/code&gt; становится &lt;b&gt; &lt;code&gt;pdo_&lt;/code&gt; &lt;/b&gt; &lt;code&gt;query()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="de66ab6b7bdbd02e289701939878dd5dd7d2fb27" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;&lt;code&gt;mysql_&lt;/code&gt;&lt;/s&gt;&lt;code&gt;real_escape_string()&lt;/code&gt; becomes &lt;b&gt;&lt;code&gt;pdo_&lt;/code&gt;&lt;/b&gt;&lt;code&gt;real_escape_string()&lt;/code&gt;</source>
          <target state="translated">&lt;s&gt; &lt;code&gt;mysql_&lt;/code&gt; &lt;/s&gt; &lt;code&gt;real_escape_string()&lt;/code&gt; становится &lt;b&gt; &lt;code&gt;pdo_&lt;/code&gt; &lt;/b&gt; &lt;code&gt;real_escape_string()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9f0b58668ae25ccfe5bdc1cbae5c9ee2cddd631f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;a href=&quot;http://php.net/manual/en/mysqli.quickstart.prepared-statements.php&quot;&gt;Prepared statements&lt;/a&gt; or parameterized queries&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;http://php.net/manual/en/mysqli.quickstart.prepared-statements.php&quot;&gt;Подготовленные операторы&lt;/a&gt; или параметризованные запросы&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="375f987ed1362ce8666be1d597bccb89f0a4b4e1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;DELETE&lt;/code&gt;&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;DELETE&lt;/code&gt;&lt;/strong&gt;:</target>
        </trans-unit>
        <trans-unit id="e1373de0a72aae36b8557c0139b699198b6a40ae" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;INSERT&lt;/code&gt;&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;INSERT&lt;/code&gt;&lt;/strong&gt;:</target>
        </trans-unit>
        <trans-unit id="ae0641e9808706462aeeee3ff5fada2631f3e370" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;SELECT&lt;/code&gt;&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;SELECT&lt;/code&gt;&lt;/strong&gt;:</target>
        </trans-unit>
        <trans-unit id="7d55ef0f6c839d55762a2f54ead50913fcbd88be" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;UPDATE&lt;/code&gt;&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;UPDATE&lt;/code&gt;&lt;/strong&gt;:</target>
        </trans-unit>
        <trans-unit id="4af3d4a1c360d57942900ff0fcaf6dc0a9cff4b4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;ext/mysql&lt;/code&gt;&lt;/strong&gt; was &lt;a href=&quot;https://wiki.php.net/rfc/mysql_deprecation&quot;&gt;&lt;strong&gt;officially deprecated as of PHP 5.5&lt;/strong&gt;&lt;/a&gt; and has been &lt;a href=&quot;https://wiki.php.net/rfc/remove_deprecated_functionality_in_php7&quot;&gt;&lt;strong&gt;removed as of PHP 7&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">Начиная с &lt;a href=&quot;https://wiki.php.net/rfc/mysql_deprecation&quot;&gt;&lt;strong&gt;PHP 5.5,&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt; &lt;code&gt;ext/mysql&lt;/code&gt; &lt;/strong&gt; &lt;strong&gt;официально устарела&lt;/strong&gt; и &lt;a href=&quot;https://wiki.php.net/rfc/remove_deprecated_functionality_in_php7&quot;&gt;&lt;strong&gt;удалена с PHP 7&lt;/strong&gt;&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="21d3709bc3604de67baa10faab0af9188543ecb1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;A.&lt;/strong&gt; A prepared statement is a pre-compiled SQL statement that can be executed multiple times by sending only the data to the server.</source>
          <target state="translated">&lt;strong&gt;О.&lt;/strong&gt; Подготовленный оператор - это предварительно скомпилированный оператор SQL, который можно выполнить несколько раз, отправив только данные на сервер.</target>
        </trans-unit>
        <trans-unit id="66bcf27ed5345c3e7d140adfa9c56ebb3359dfcf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;A.&lt;/strong&gt; Let's have an example:</source>
          <target state="translated">&lt;strong&gt;А.&lt;/strong&gt; Давайте приведем пример:</target>
        </trans-unit>
        <trans-unit id="7d69176c1f43d19cde596ba2b74bea58f3c1bad5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;A.&lt;/strong&gt; Named placeholders. Use descriptive names preceded by a colon, instead of question marks. We don't care about position/order of value in name place holder:</source>
          <target state="translated">&lt;strong&gt;А.&lt;/strong&gt; Именованные заполнители. Используйте описательные имена, начинающиеся с двоеточия, вместо вопросительных знаков. Нас не волнует позиция / порядок значений в названии местозаполнителя:</target>
        </trans-unit>
        <trans-unit id="1aecc95b507fcd1d0e6fda933de9c7becbbe5a09" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Also, there are some false or non-significant reasons, like&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Кроме того, есть несколько ложных или несущественных причин, таких как&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fbda4158ca375d01bee8e519487823e89ac0c2a0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Can we set attributes after PDO construction?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Можем ли мы установить атрибуты после построения PDO?&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="71900205aba19377ace55dba6e80e5d49843cfb8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Contemporary database APIs are just &lt;em&gt;easier&lt;/em&gt; to use.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Современные API баз данных &lt;em&gt;проще&lt;/em&gt; в использовании.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3ce243cbd8cc444c680e66a9ca31863339ae7a10" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Execute&lt;/strong&gt;: At a later time, the application supplies (or binds) values for the parameters, and the DBMS executes the statement (possibly returning a result). The application may execute the statement as many times as it wants with different values. In this example, it might supply 'Bread' for the first parameter and &lt;code&gt;1.00&lt;/code&gt; for the second parameter.</source>
          <target state="translated">&lt;strong&gt;Выполнение&lt;/strong&gt; : позднее приложение предоставляет (или связывает) значения для параметров, и СУБД выполняет инструкцию (возможно, возвращая результат). Приложение может выполнить инструкцию столько раз, сколько захочет, с разными значениями. В этом примере он может предоставить &amp;laquo;Хлеб&amp;raquo; для первого параметра и &lt;code&gt;1.00&lt;/code&gt; для второго параметра.</target>
        </trans-unit>
        <trans-unit id="b76647d0abd6627dc3e3d7aed8eb990660dd95d4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Getting the Last Inserted ID&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Получение последнего введенного идентификатора&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bbeb2123bb627ff2057e11808030689ea471e52f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Getting the row count&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;Получение количества строк&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="3d2b4c709812584ec969783a6880ad9830f30c48" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Good read&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;Хорошо читать&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="ca5ca16bcc78e74bfbd4891290090d73b43c0d80" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Good read&lt;/strong&gt;: &lt;a href=&quot;http://php.net/manual/en/pdo.connections.php&quot;&gt;Connections and Connection management &amp;para;&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;Хорошее чтение&lt;/strong&gt; : &lt;a href=&quot;http://php.net/manual/en/pdo.connections.php&quot;&gt;Соединения и Управление соединениями &amp;para;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="64787817e9b226c3de70d33bdb039da28b3c4415" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Historic note on magic_quotes.&lt;/strong&gt; That feature is rightly deprecated. It's often incorrectly portrayed as failed &lt;em&gt;security&lt;/em&gt; feature however. But magic_quotes are as much a failed security feature as tennis balls have failed as nutrition source. That simply wasn't their purpose.</source>
          <target state="translated">&lt;strong&gt;Историческая справка о magic_quotes.&lt;/strong&gt; Эта функция по праву считается устаревшей. Однако часто это неправильно изображается как сбойная функция &lt;em&gt;безопасности&lt;/em&gt; . Но magic_quotes - такая же неудачная функция безопасности, как и теннисные мячи, как источник питания. Это просто не было их целью.</target>
        </trans-unit>
        <trans-unit id="7c2c76a00e13c745b512b4a84fde6bd4d754f51e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Instead, you should learn of prepared statements&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Вместо этого вы должны узнать о готовых утверждениях&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d0dbca28c12bb63433f617f4435842da2de64f12" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NEW! - ext/mysql is now &lt;em&gt;&lt;a href=&quot;https://wiki.php.net/rfc/mysql_deprecation&quot;&gt;officially deprecated as of PHP 5.5!&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;NEW!&lt;/strong&gt; &lt;strong&gt;- ext / mysql &lt;em&gt;&lt;a href=&quot;https://wiki.php.net/rfc/mysql_deprecation&quot;&gt;официально объявлен устаревшим с PHP 5.5!&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f35097e2b1b38de5ec88177ea2b0967e5b0e99a3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;NOTE:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3bcee5544ef56b940a214706dc29617b2b713720" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt;: In &lt;strong&gt;unnamed placeholders&lt;/strong&gt; we must take care of the proper order of the elements in the array that we are passing to the &lt;code&gt;PDOStatement::execute()&lt;/code&gt; method.</source>
          <target state="translated">&lt;strong&gt;ПРИМЕЧАНИЕ&lt;/strong&gt; . В &lt;strong&gt;безымянных заполнителях&lt;/strong&gt; мы должны позаботиться о правильном порядке элементов в массиве, который мы &lt;code&gt;PDOStatement::execute()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a2fb3e1339eb87a7998bdbb7ee4cd05d10c3a4ae" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Neither mysqli_* nor PDO functions should have appeared in the application code.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Ни mysqli_ *, ни функции PDO не должны были появиться в коде приложения.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dda929987f6bc860e4d7687f0f9b9055c3b38c38" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Nevertheless, there are also some non-technical issues, which can make your experience a bit harder&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Тем не менее, есть также некоторые нетехнические проблемы, которые могут сделать ваш опыт немного сложнее&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ee452aec63009c2bd7bbfd6f03acd850aab819f8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; you can also use &lt;code&gt;charset=UTF-8&lt;/code&gt;, but sometimes it causes an error, so it's better to use &lt;code&gt;utf8&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;Примечание:&lt;/strong&gt; вы также можете использовать &lt;code&gt;charset=UTF-8&lt;/code&gt; , но иногда это приводит к ошибке, поэтому лучше использовать &lt;code&gt;utf8&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8f722b24d30ed0d049e9217e7bf9e78930a63b61" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: If you are using the method like below (&lt;code&gt;query()&lt;/code&gt;), this method returns a &lt;code&gt;PDOStatement&lt;/code&gt; object. So if you want to fetch the result, use it like above.</source>
          <target state="translated">&lt;strong&gt;Примечание&lt;/strong&gt; . Если вы используете метод, &lt;code&gt;PDOStatement&lt;/code&gt; ниже ( &lt;code&gt;query()&lt;/code&gt; ), этот метод возвращает объект PDOStatement . Поэтому, если вы хотите получить результат, используйте его, как указано выше.</target>
        </trans-unit>
        <trans-unit id="1d0a361ba3da0755ad03adc9e9d32cb4ed1a08c8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Prepare&lt;/strong&gt;: The statement template is created by the application and sent to the database management system (DBMS). Certain values are left unspecified, called parameters, placeholders or bind variables (labelled &lt;code&gt;?&lt;/code&gt; below):</source>
          <target state="translated">&lt;strong&gt;Подготовка&lt;/strong&gt; : шаблон выписки создается приложением и отправляется в систему управления базами данных (СУБД). Некоторые значения не указываются, называются параметрами, заполнителями или переменными связывания (помечены &lt;code&gt;?&lt;/code&gt; Ниже):</target>
        </trans-unit>
        <trans-unit id="8de8d53910fb26580d0d1462d5f15822e1f2f8fd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Prepared Statements&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Подготовленные заявления&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="83772b3402056078699b22b03ae7c71d472d223a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Q.&lt;/strong&gt; So now, what are named placeholders and how do I use them?</source>
          <target state="translated">&lt;strong&gt;Q.&lt;/strong&gt; Так что теперь, как называются заполнители и как их использовать?</target>
        </trans-unit>
        <trans-unit id="bf935138dd58afb317f393a58a87a426e51d9625" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Q.&lt;/strong&gt; So now, what are unnamed placeholders and how do I use them?</source>
          <target state="translated">&lt;strong&gt;В.&lt;/strong&gt; Итак, что же такое безымянные заполнители и как их использовать?</target>
        </trans-unit>
        <trans-unit id="246454779aad75d51088bb0de1cda979d51768d6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Q.&lt;/strong&gt; What is a prepared statement and why do I need them?</source>
          <target state="translated">&lt;strong&gt;В.&lt;/strong&gt; Что такое подготовленное утверждение и зачем оно мне?</target>
        </trans-unit>
        <trans-unit id="bc3aaa8f04d43e44f616656297e0c78c54e1f172" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reason to not use &lt;code&gt;mysql_*&lt;/code&gt; function&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;Причина не использовать функцию &lt;code&gt;mysql_*&lt;/code&gt; &lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="c7cfb15d4b60ac9b33a75c31e26bd7807779ace0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See the Red Box?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Видишь красную коробку?&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="eb999dd362a05e63929ca191a77eea6b0e5a6b94" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Suppressing deprecation warnings&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Подавление предупреждений об устаревании&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3c1160a54ccd72e93448ddb4bc662e0ee249f6fc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;They are no longer maintained, and are officially deprecated&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Они больше не поддерживаются и официально устарели&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="14c3edf5863da2e2fc42e3f847cd0cec2427b6c7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Use either PDO or MySQLi&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Используйте либо PDO, либо MySQLi&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ba557ea612da45ee87ea50fbc09e07ea7b1520ff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yes&lt;/strong&gt;, we can also set some attributes after PDO construction with the &lt;code&gt;setAttribute&lt;/code&gt; method:</source>
          <target state="translated">&lt;strong&gt;Да&lt;/strong&gt; , мы также можем установить некоторые атрибуты после построения PDO с &lt;code&gt;setAttribute&lt;/code&gt; метода setAttribute :</target>
        </trans-unit>
        <trans-unit id="8cf01d9490d0b537b44b782fd8131a614ece8d85" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mysql_*&lt;/strong&gt; functions do not support prepared statements.</source>
          <target state="translated">&lt;strong&gt;Функции mysql_ *&lt;/strong&gt; не поддерживают подготовленные операторы.</target>
        </trans-unit>
        <trans-unit id="e42abeed45b2dfef66fccc34fef34fdbe2a6d2f5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mysql_*&lt;/strong&gt; functions do not support the binding of parameters.</source>
          <target state="translated">&lt;strong&gt;Функции mysql_ *&lt;/strong&gt; не поддерживают привязку параметров.</target>
        </trans-unit>
        <trans-unit id="ac0f78e16e8962d33c7f864e2d4cfab79ed85fb4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mysql_*&lt;/strong&gt; functions lack functionality for Object Oriented Programming.</source>
          <target state="translated">&lt;strong&gt;В функциях mysql_ *&lt;/strong&gt; отсутствует функциональность для объектно-ориентированного программирования.</target>
        </trans-unit>
        <trans-unit id="9ab107729188b218548fbdc2bdea183a073fe436" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mysql_*&lt;/strong&gt; functions were deprecated (as of &lt;strong&gt;PHP 5.5&lt;/strong&gt;) given the fact that better functions and code structures were developed. The fact that the function was deprecated means that no more effort will be placed into improving it in terms of performance and security, &lt;strong&gt;which means it is less future proof&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;Функции mysql_ *&lt;/strong&gt; устарели ( &lt;strong&gt;начиная&lt;/strong&gt; с &lt;strong&gt;PHP 5.5&lt;/strong&gt; ), учитывая тот факт, что были разработаны более совершенные функции и структуры кода. Тот факт, что эта функция устарела, означает, что больше не нужно прилагать усилий для ее улучшения с точки зрения производительности и безопасности, &lt;strong&gt;что означает&lt;/strong&gt; , &lt;strong&gt;что она менее надежна в будущем&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="2a9ce00004e2016f2cadb930b22a5cb4bfad93c2" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;&lt;em&gt;Insert and delete will be covered later.&lt;/em&gt;&lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;&lt;em&gt;Вставка и удаление будут рассмотрены позже.&lt;/em&gt;&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="4605e640a44a2903dc29f4d7c4d5f1a5d3a737e6" translate="yes" xml:space="preserve">
          <source>A common practice when using &lt;code&gt;mysql_*&lt;/code&gt; is:</source>
          <target state="translated">Обычная практика при использовании &lt;code&gt;mysql_*&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="a13839e20b6d574ce0048134aef78b15481c1e5c" translate="yes" xml:space="preserve">
          <source>A simple and short PDO tutorial</source>
          <target state="translated">Простое и краткое руководство по PDO.</target>
        </trans-unit>
        <trans-unit id="48250fcdf8841a07f5b1248699a34ceeeef49b50" translate="yes" xml:space="preserve">
          <source>A. &amp;ldquo;&lt;strong&gt;PDO &amp;ndash; PHP Data Objects&lt;/strong&gt; &amp;ndash; is a database access layer providing a uniform method of access to multiple databases.&amp;rdquo;</source>
          <target state="translated">A. &amp;laquo; &lt;strong&gt;PDO - PHP Data Objects&lt;/strong&gt; - это уровень доступа к базе данных, обеспечивающий единый метод доступа к нескольким базам данных&amp;raquo;.</target>
        </trans-unit>
        <trans-unit id="2f434a1f9a23e4564ea51f72e542f32afebac04b" translate="yes" xml:space="preserve">
          <source>API supports Multiple Statements and all MySQL 4.1+ functionality - Supported by MySQLi and mostly also by PDO</source>
          <target state="translated">API поддерживает Multiple Statements и всю функциональность MySQL 4.1+-Поддерживается MySQLi,а также в основном PDO.</target>
        </trans-unit>
        <trans-unit id="1fc3feb37f7a72085af4f28967eb6151ee8d1c5e" translate="yes" xml:space="preserve">
          <source>API supports Stored Procedures: Both MySQLi and PDO</source>
          <target state="translated">API поддерживает &quot;Хранимые процедуры&quot;:Как MySQLi,так и PDO</target>
        </trans-unit>
        <trans-unit id="f09f90c57066a24eee0eb4f850c58410d1012793" translate="yes" xml:space="preserve">
          <source>API supports client-side Prepared Statements: Supported only by PDO</source>
          <target state="translated">API поддерживает готовые заявления клиентов:Поддерживается только PDO</target>
        </trans-unit>
        <trans-unit id="bc6bd620a8604b899ec28a40dd9fd604faf87f73" translate="yes" xml:space="preserve">
          <source>API supports server-side Prepared Statements: Supported by MYSQLi and PDO</source>
          <target state="translated">API поддерживает готовые заявления на стороне сервера:Поддержка MYSQLi и PDO</target>
        </trans-unit>
        <trans-unit id="34890013f003ff6a72ea8f3325210ceb78fdcc4d" translate="yes" xml:space="preserve">
          <source>Above point quoted from Quentin's answer</source>
          <target state="translated">Вышеуказанный пункт процитирован из ответа Квентина</target>
        </trans-unit>
        <trans-unit id="fd9035ed506b5a7ea270a5b3e1a41eff0a713ea2" translate="yes" xml:space="preserve">
          <source>Add them as comma delimited function parameters to &lt;code&gt;pdo_query()&lt;/code&gt;.</source>
          <target state="translated">Добавьте их в качестве параметров функции, разделенных запятыми, в &lt;code&gt;pdo_query()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="01fb17f71e8b9143a9904e6eb49ef6a34b6db1f8" translate="yes" xml:space="preserve">
          <source>Also, you can handle by &lt;code&gt;or die()&lt;/code&gt; or we can say like &lt;code&gt;mysql_*&lt;/code&gt;, but it will be really varied. You can hide the dangerous error messages in production by turning &lt;code&gt;display_errors off&lt;/code&gt; and just reading your error log.</source>
          <target state="translated">Кроме того, вы можете обрабатывать &lt;code&gt;or die()&lt;/code&gt; или мы можем сказать как &lt;code&gt;mysql_*&lt;/code&gt; , но это будет действительно различным. Вы можете скрыть опасные сообщения об ошибках в производственном процессе, отключив &lt;code&gt;display_errors off&lt;/code&gt; и просто прочитав свой журнал ошибок.</target>
        </trans-unit>
        <trans-unit id="65ace5a4919de42d6ac9e8e70a32858585a56919" translate="yes" xml:space="preserve">
          <source>Amazing! Hi-fives all round, the code correctly verified an admin. It's perfect!</source>
          <target state="translated">Удивительно! Привет-пятьдесятка по кругу,код правильно проверил администратора.Идеально!</target>
        </trans-unit>
        <trans-unit id="67c99697e4cd741a12219ff4ecfee60683efb9b6" translate="yes" xml:space="preserve">
          <source>And a better way is &lt;code&gt;PDO&lt;/code&gt;, and I am now writing a simple &lt;code&gt;PDO&lt;/code&gt; tutorial.</source>
          <target state="translated">И лучший способ - это &lt;code&gt;PDO&lt;/code&gt; , и сейчас я пишу простое руководство по &lt;code&gt;PDO&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="120d08ba81249a9f81e7d175247796e5cff77a30" translate="yes" xml:space="preserve">
          <source>And contrary - if you have an abstraction layer between your application code and mysql API - &lt;strong&gt;it doesn't actually matter which engine is used.&lt;/strong&gt; You can use mysql ext until it goes deprecated and then easily rewrite your abstraction class to another engine, &lt;strong&gt;having all the application code intact.&lt;/strong&gt;</source>
          <target state="translated">И наоборот - если у вас есть уровень абстракции между кодом приложения и MySQL API - на &lt;strong&gt;самом деле не имеет значения, какой движок используется.&lt;/strong&gt; Вы можете использовать mysql ext до тех пор, пока он не устареет, а затем легко переписать ваш класс абстракции на другой движок, &lt;strong&gt;оставив весь код приложения без изменений.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="42319ef1243e1cb43dbc04ce225a03a2d0c6b42e" translate="yes" xml:space="preserve">
          <source>And in pdo, this same thing can be done by:</source>
          <target state="translated">И в ПДО то же самое можно сделать:</target>
        </trans-unit>
        <trans-unit id="0993bf28ecd55614b8bb57ddce1033f985cb8e69" translate="yes" xml:space="preserve">
          <source>And it will be too wordy and most likely unsafe.</source>
          <target state="translated">И это будет слишком многословно и,скорее всего,небезопасно.</target>
        </trans-unit>
        <trans-unit id="f8d456b41786de88a2dbb3af1c629f6c1141c80c" translate="yes" xml:space="preserve">
          <source>And the later PHP developer team has taken the decision to generate &lt;a href=&quot;https://github.com/php/php-src/commit/b7091aaf0137d97cf4aa4a402ec50b3946d369c0&quot;&gt;&lt;strong&gt;&lt;code&gt;E_DEPRECATED&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; errors when users connect to MySQL, whether through &lt;code&gt;mysql_connect()&lt;/code&gt;, &lt;code&gt;mysql_pconnect()&lt;/code&gt; or the implicit connection functionality built into &lt;code&gt;ext/mysql&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/php/php-src/commit/b7091aaf0137d97cf4aa4a402ec50b3946d369c0&quot;&gt;&lt;strong&gt; &lt;code&gt;E_DEPRECATED&lt;/code&gt; &lt;/strong&gt;&lt;/a&gt; поздняя команда разработчиков PHP приняла решение генерировать ошибки &lt;strong&gt;E_DEPRECATED,&lt;/strong&gt; когда пользователи подключаются к MySQL, будь то через &lt;code&gt;mysql_connect()&lt;/code&gt; , &lt;code&gt;mysql_pconnect()&lt;/code&gt; или через функцию неявного подключения, встроенную в &lt;code&gt;ext/mysql&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ef4d4c6fb57c79a8162041f226c5e4efb9e26af4" translate="yes" xml:space="preserve">
          <source>And the output is:</source>
          <target state="translated">И результат:</target>
        </trans-unit>
        <trans-unit id="968a4fefe78eb6c9a0fb316c9f7ac9217c1ea9fc" translate="yes" xml:space="preserve">
          <source>And you can wrap it in &lt;code&gt;try&lt;/code&gt;-&lt;code&gt;catch&lt;/code&gt;, like below:</source>
          <target state="translated">И вы можете обернуть его в &lt;code&gt;try&lt;/code&gt; - &lt;code&gt;catch&lt;/code&gt; , как показано ниже:</target>
        </trans-unit>
        <trans-unit id="dedf5ccdeb6bf446ef7cfb01d8db4c4b042b2078" translate="yes" xml:space="preserve">
          <source>Another example:</source>
          <target state="translated">Еще один пример:</target>
        </trans-unit>
        <trans-unit id="8899017bb75139a8d05c4ded944ef88bb6b69e08" translate="yes" xml:space="preserve">
          <source>Another nice feature for &lt;code&gt;OOP&lt;/code&gt; friends is that named placeholders have the ability to insert objects directly into your database, assuming the properties match the named fields. For example:</source>
          <target state="translated">Еще одна приятная особенность для друзей &lt;code&gt;OOP&lt;/code&gt; состоит в том, что именованные заполнители имеют возможность вставлять объекты непосредственно в вашу базу данных, при условии, что свойства соответствуют именованным полям. Например:</target>
        </trans-unit>
        <trans-unit id="498040b4cb115e9716562169981fc9fa03b6e734" translate="yes" xml:space="preserve">
          <source>Any of the new functionality in MySQL 5.1 or later</source>
          <target state="translated">Любая из новых функциональных возможностей в MySQL 5.1 или более поздней версии.</target>
        </trans-unit>
        <trans-unit id="0e5e1aea7f23bc2927b5d23c2cbc5412b05fce82" translate="yes" xml:space="preserve">
          <source>As an example, someone could use &lt;code&gt;&quot;enhzflep); drop table users&quot;&lt;/code&gt; as a username. The old functions will allow executing multiple statements per query, so something like that nasty bugger can delete a whole table.</source>
          <target state="translated">Например, кто-то может использовать в качестве имени пользователя &lt;code&gt;&quot;enhzflep); drop table users&quot;&lt;/code&gt; . Старые функции позволят выполнять несколько операторов за запрос, поэтому что-то вроде этого мерзкого баггера может удалить всю таблицу.</target>
        </trans-unit>
        <trans-unit id="d5ad27cf2144b732b070aaef3f6328e7557022c6" translate="yes" xml:space="preserve">
          <source>As explained in the above answers, the alternatives to mysql are mysqli and PDO (PHP Data Objects).</source>
          <target state="translated">Как объяснено в вышеприведенных ответах,альтернативами mysql являются mysqli и PDO (PHP Data Objects).</target>
        </trans-unit>
        <trans-unit id="242084bedb9aa3c73ad1bd7da789bee02633449f" translate="yes" xml:space="preserve">
          <source>Because (amongst other reasons) it's much harder to ensure the input data is sanitized. If you use parametrized queries, as one does with PDO or mysqli you can entirely avoid the risk.</source>
          <target state="translated">Потому что (помимо других причин)гораздо сложнее обеспечить дезинфекцию входных данных.Если вы используете параметризованные запросы,как в случае с PDO или mysqli,вы можете полностью избежать риска.</target>
        </trans-unit>
        <trans-unit id="06606943663433f539cbc360dbd06b2bc39a6263" translate="yes" xml:space="preserve">
          <source>Below is an example of how you can do it:</source>
          <target state="translated">Ниже приведен пример того,как это можно сделать:</target>
        </trans-unit>
        <trans-unit id="123eebf3efbb03421b5f4b2571c2660d81b303c7" translate="yes" xml:space="preserve">
          <source>Beware that parameter binding still isn't a magic one-stop solution against &lt;em&gt;all&lt;/em&gt; SQL injections. It handles the most common use for data/values. But can't whitelist column name / table identifiers, help with dynamic clause construction, or just plain array value lists.</source>
          <target state="translated">Помните, что привязка параметров все еще не является волшебным универсальным решением против &lt;em&gt;всех&lt;/em&gt; SQL-инъекций. Он обрабатывает наиболее распространенное использование для данных / значений. Но он не может указать имя столбца / идентификаторы таблицы, помочь с построением динамического предложения или просто списком значений массива.</target>
        </trans-unit>
        <trans-unit id="dbf3abea317b3728874b25d75ef5a69530c550f8" translate="yes" xml:space="preserve">
          <source>Both MySQLi and PDO were introduced in PHP 5.0, whereas MySQL was introduced prior to PHP 3.0. A point to note is that MySQL is included in PHP5.x though deprecated in later versions.</source>
          <target state="translated">Как MySQLi,так и PDO были представлены в PHP 5.0,в то время как MySQL был представлен до PHP 3.0.Отметим,что MySQL включен в PHP5.x,хотя и устарел в более поздних версиях.</target>
        </trans-unit>
        <trans-unit id="51020afda7d0112c97929b784637a312225d970c" translate="yes" xml:space="preserve">
          <source>Bound parameters can be easy to use</source>
          <target state="translated">Связанные параметры могут быть просты в использовании</target>
        </trans-unit>
        <trans-unit id="300f56277ff5fe0394d55c2ebdaf31a5d9ca5560" translate="yes" xml:space="preserve">
          <source>Brilliant, not enter in the following:</source>
          <target state="translated">Блестяще,не входите в следующее:</target>
        </trans-unit>
        <trans-unit id="13baed15c99f957c80af17236b205876746fb816" translate="yes" xml:space="preserve">
          <source>But as first step just &lt;strong&gt;get rid of the &lt;code&gt;_real_escape_string&lt;/code&gt;&lt;/strong&gt; call.</source>
          <target state="translated">Но в качестве первого шага просто &lt;strong&gt;избавьтесь от&lt;/strong&gt; вызова &lt;strong&gt; &lt;code&gt;_real_escape_string&lt;/code&gt; &lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="c2b6b6db7e4e3dfb886e45b51b27e98f7d6f7e48" translate="yes" xml:space="preserve">
          <source>But okay, if you don't like the red box in the manual, a problem of choice arises: mysqli or PDO?</source>
          <target state="translated">Но ладно,если вам не нравится красная коробка в руководстве,возникает проблема выбора:mysqli или PDO?</target>
        </trans-unit>
        <trans-unit id="0ea2f9f9df0901957a54cc00384ae3ecf9e7598f" translate="yes" xml:space="preserve">
          <source>But, in my opinion, the proposed solution is no better either.</source>
          <target state="translated">Но,на мой взгляд,предлагаемое решение тоже не лучше.</target>
        </trans-unit>
        <trans-unit id="87f8df6d2b63e036157cc4d012be4719078a49b1" translate="yes" xml:space="preserve">
          <source>Can be replaced with just an foreach iteration:</source>
          <target state="translated">Может быть заменен только итерацией форакаса:</target>
        </trans-unit>
        <trans-unit id="98de0e635b4201b0c76f621b74657cf746901ace" translate="yes" xml:space="preserve">
          <source>Compare it with usual PDO inserts, when every single field name being repeated six to ten times - in all these numerous named placeholders, bindings, and query definitions.</source>
          <target state="translated">Сравните его с обычными вставками PDO,когда каждое отдельное имя поля повторяется шесть-десять раз-во всех этих многочисленных названных местах,связках и определениях запросов.</target>
        </trans-unit>
        <trans-unit id="f2b2bc84e981266a2ed8528d294c0bc718096013" translate="yes" xml:space="preserve">
          <source>Compare this one single line with &lt;a href=&quot;https://stackoverflow.com/a/15991146/285587&quot;&gt;amount of code you will need with PDO&lt;/a&gt;.</source>
          <target state="translated">Сравните эту единственную строку с &lt;a href=&quot;https://stackoverflow.com/a/15991146/285587&quot;&gt;количеством кода, который вам понадобится в PDO&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="46ead4045fbadbc2f0b37b6046e5803972459710" translate="yes" xml:space="preserve">
          <source>Compression</source>
          <target state="translated">Compression</target>
        </trans-unit>
        <trans-unit id="9f82982d2197b2fb50ef5bc31251b1e69637c99f" translate="yes" xml:space="preserve">
          <source>Congrats, you just allowed me to enter your super-protected admins only section with me entering a false username and a false password. Seriously, if you don't believe me, create the database with the code I provided, and run this PHP code - which at glance REALLY does seem to verify the username and password rather nicely.</source>
          <target state="translated">Поздравляю,вы только что позволили мне войти в ваш супер-защищенный админ раздел,где я ввел фальшивое имя пользователя и фальшивый пароль.Серьезно,если вы мне не верите,создайте базу данных с тем кодом,который я предоставил,и запустите этот PHP-код-который,на первый взгляд,РЕАЛЬНО проверяет имя пользователя и пароль довольно неплохо.</target>
        </trans-unit>
        <trans-unit id="9cdd246b67ff3115cf8e58af1aa4662b256a8fa8" translate="yes" xml:space="preserve">
          <source>Connecting to MySQL</source>
          <target state="translated">Подключение к MySQL</target>
        </trans-unit>
        <trans-unit id="f84015d92e165e7b3f840594a075b9ee6030c2a1" translate="yes" xml:space="preserve">
          <source>Correct order would have been: deprecatedly &lt;code&gt;stripslashes&lt;/code&gt; as the innermost call, then &lt;code&gt;trim&lt;/code&gt;, afterwards &lt;code&gt;strip_tags&lt;/code&gt;, &lt;code&gt;htmlentities&lt;/code&gt; for output context, and only lastly the &lt;code&gt;_escape_string&lt;/code&gt; as its application should directly preceed the SQL intersparsing.</source>
          <target state="translated">Правильный порядок был бы следующим: устарелое &lt;code&gt;stripslashes&lt;/code&gt; как внутреннего вызова, затем &lt;code&gt;trim&lt;/code&gt; , затем &lt;code&gt;strip_tags&lt;/code&gt; , &lt;code&gt;htmlentities&lt;/code&gt; для выходного контекста и, наконец, только &lt;code&gt;_escape_string&lt;/code&gt; , поскольку его приложение должно непосредственно предшествовать промежуточному анализу SQL.</target>
        </trans-unit>
        <trans-unit id="274ac70de9ee561047b2d6020375c34942dc13aa" translate="yes" xml:space="preserve">
          <source>Doesn't support &lt;a href=&quot;http://en.wikipedia.org/wiki/Database_transaction&quot;&gt;transactions&lt;/a&gt;</source>
          <target state="translated">Не поддерживает &lt;a href=&quot;http://en.wikipedia.org/wiki/Database_transaction&quot;&gt;транзакции&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5b91190ed508aa1ebccf4667808bf07650ab04f8" translate="yes" xml:space="preserve">
          <source>Doesn't support Multiple Statements (who need them?)</source>
          <target state="translated">Не поддерживает &quot;Множественные высказывания&quot; (кому они нужны?).</target>
        </trans-unit>
        <trans-unit id="d44232efd1fd248676980ae2cdc482a57df4a84c" translate="yes" xml:space="preserve">
          <source>Doesn't support Prepared Statements or Parametrized Queries</source>
          <target state="translated">Не поддерживает готовые заявления или параметризованные запросы.</target>
        </trans-unit>
        <trans-unit id="6c479d1a8515470d066edea5ea563b89e68cc6f8" translate="yes" xml:space="preserve">
          <source>Doesn't support Stored Procedures (we were using &lt;code&gt;mysql_query(&quot;CALL my_proc&quot;);&lt;/code&gt; for ages)</source>
          <target state="translated">Не поддерживает хранимые процедуры (мы использовали &lt;code&gt;mysql_query(&quot;CALL my_proc&quot;);&lt;/code&gt; целую вечность)</target>
        </trans-unit>
        <trans-unit id="866143011c8a05791bf29b94865c70519ad71e72" translate="yes" xml:space="preserve">
          <source>Doesn't support Transactions (same as above)</source>
          <target state="translated">Не поддерживает Операции (как и выше).</target>
        </trans-unit>
        <trans-unit id="fce860154fdb146e5f646b4901b94461c45d68e0" translate="yes" xml:space="preserve">
          <source>Doesn't support all of the functionality in MySQL 5.1</source>
          <target state="translated">Не поддерживает весь функционал в MySQL 5.1.</target>
        </trans-unit>
        <trans-unit id="3cf92a22337ed0b5bde371c6efea5d06737ca874" translate="yes" xml:space="preserve">
          <source>Doesn't support multiple statements</source>
          <target state="translated">Не поддерживает несколько утверждений</target>
        </trans-unit>
        <trans-unit id="864e78e1d6a762f1e100177dd6406de3ab443864" translate="yes" xml:space="preserve">
          <source>Doesn't support non-blocking, asynchronous queries</source>
          <target state="translated">Не поддерживает неблокирующие,асинхронные запросы.</target>
        </trans-unit>
        <trans-unit id="d1636c7a918bc55871631f47bbb14d7249b434bf" translate="yes" xml:space="preserve">
          <source>Doesn't support prepared statements or &lt;a href=&quot;http://en.wikipedia.org/wiki/Prepared_statement&quot;&gt;parameterized queries&lt;/a&gt;</source>
          <target state="translated">Не поддерживает подготовленные операторы или &lt;a href=&quot;http://en.wikipedia.org/wiki/Prepared_statement&quot;&gt;параметризованные запросы&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2b1078a18b28afd9f7f8df361d462c8be33bb483" translate="yes" xml:space="preserve">
          <source>Doesn't support stored procedures</source>
          <target state="translated">Не поддерживает хранимые процедуры</target>
        </trans-unit>
        <trans-unit id="913e0c4a5ec4213ac6b0e5bc84a0b4952dd23744" translate="yes" xml:space="preserve">
          <source>Doesn't support:</source>
          <target state="translated">Не поддерживает:</target>
        </trans-unit>
        <trans-unit id="3a2186dd09a53f0acfd3661a66ceb59c176eaf88" translate="yes" xml:space="preserve">
          <source>Ease of use</source>
          <target state="translated">Простота использования</target>
        </trans-unit>
        <trans-unit id="db8c650e4e279285960b1784a6fbbece934a01e3" translate="yes" xml:space="preserve">
          <source>Embedded server support</source>
          <target state="translated">Поддержка встроенного сервера</target>
        </trans-unit>
        <trans-unit id="6d7b79456a20370d710fa37e809943165d11f572" translate="yes" xml:space="preserve">
          <source>Encryption (SSL)</source>
          <target state="translated">Шифрование (SSL)</target>
        </trans-unit>
        <trans-unit id="5b860d134c5b348f6cc8170ac43f9694cf148a8f" translate="yes" xml:space="preserve">
          <source>Enhanced debugging capabilities</source>
          <target state="translated">Расширенные возможности отладки</target>
        </trans-unit>
        <trans-unit id="6f31dd815c428bc663ce257d3df663a6858bc6b0" translate="yes" xml:space="preserve">
          <source>Enter in the following:</source>
          <target state="translated">Введите следующее:</target>
        </trans-unit>
        <trans-unit id="09fa2a067aee2197e8eb1a89b00eefbf6e88e347" translate="yes" xml:space="preserve">
          <source>Equivalent pdo_* functions in place of &lt;s&gt;mysql_*&lt;/s&gt;</source>
          <target state="translated">Эквивалентные функции pdo_ * вместо &lt;s&gt;mysql_ *&lt;/s&gt;</target>
        </trans-unit>
        <trans-unit id="5fff1f56919b006049c274c6c76fbbe56470ee4c" translate="yes" xml:space="preserve">
          <source>Error Handling</source>
          <target state="translated">обработка ошибок</target>
        </trans-unit>
        <trans-unit id="2f3b48eb0edc6001d7879dc58945e065cc2e3e5a" translate="yes" xml:space="preserve">
          <source>Error handling is much easier in &lt;code&gt;PDO&lt;/code&gt; than &lt;code&gt;mysql_*&lt;/code&gt;.</source>
          <target state="translated">Обработка ошибок в &lt;code&gt;PDO&lt;/code&gt; намного проще, чем &lt;code&gt;mysql_*&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fec40d777dec6257585f890975134a9cea348678" translate="yes" xml:space="preserve">
          <source>Errors and error handling &amp;para;</source>
          <target state="translated">Ошибки и обработка ошибок &amp;para;</target>
        </trans-unit>
        <trans-unit id="c019ec3bcff0bb2854b0e299ba32a9eee4bd0ee3" translate="yes" xml:space="preserve">
          <source>Et voil&amp;agrave;.</source>
          <target state="translated">И вуаля.</target>
        </trans-unit>
        <trans-unit id="1286a514865def6edb80f749d66c5420df3e9cc2" translate="yes" xml:space="preserve">
          <source>Exceptions &amp;para;</source>
          <target state="translated">Исключения &amp;para;</target>
        </trans-unit>
        <trans-unit id="ca51f996bb09297e02939f7b41f4c178b7775704" translate="yes" xml:space="preserve">
          <source>Fetch Modes</source>
          <target state="translated">Извлекательные режимы</target>
        </trans-unit>
        <trans-unit id="0cda57057d1816d4de9cdbd01aece5021ed7c626" translate="yes" xml:space="preserve">
          <source>First of all, I explain how to select fetch mode:</source>
          <target state="translated">Прежде всего,я объясню,как выбрать режим извлечения:</target>
        </trans-unit>
        <trans-unit id="17ba645d365edcb5b41c66ee76e97181eab4127f" translate="yes" xml:space="preserve">
          <source>First off, please feel free to create this test mysql database (I have called mine prep):</source>
          <target state="translated">Для начала,пожалуйста,не стесняйтесь,создайте эту тестовую базу данных mysql (я назвал свою подготовительную):</target>
        </trans-unit>
        <trans-unit id="dde1356568f59e4b14dee0b21b6e2107618e0338" translate="yes" xml:space="preserve">
          <source>First, let's begin with the standard comment we give everyone:</source>
          <target state="translated">Сначала давайте начнем со стандартного комментария,который мы всем даем:</target>
        </trans-unit>
        <trans-unit id="5659b9d449b5b012e0b098e81e7ed2f20fe0f375" translate="yes" xml:space="preserve">
          <source>Fix or remove any oldschool &lt;a href=&quot;https://stackoverflow.com/questions/3126072/what-are-the-best-php-input-sanitizing-functions&quot;&gt;&lt;code&gt;sanitize()&lt;/code&gt;&lt;/a&gt; function</source>
          <target state="translated">Исправить или удалить любую функцию oldschool &lt;a href=&quot;https://stackoverflow.com/questions/3126072/what-are-the-best-php-input-sanitizing-functions&quot;&gt; &lt;code&gt;sanitize()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3aa75d58669bb5ac8b40367ea713bcccf7011235" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;strong&gt;&lt;a href=&quot;https://stackoverflow.com/questions/60174/best-way-to-prevent-sql-injection-in-php&quot;&gt;How can I prevent SQL injection in PHP?&lt;/a&gt;&lt;/strong&gt;</source>
          <target state="translated">Для получения дополнительной информации см. &lt;strong&gt;&lt;a href=&quot;https://stackoverflow.com/questions/60174/best-way-to-prevent-sql-injection-in-php&quot;&gt;Как я могу предотвратить внедрение SQL в PHP?&lt;/a&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="07593710668e04f42ef94baca94b6702963b9675" translate="yes" xml:space="preserve">
          <source>Full Charset support</source>
          <target state="translated">Полная поддержка Charset</target>
        </trans-unit>
        <trans-unit id="55dc1ba13909c533de685b19d9a8793a296b2045" translate="yes" xml:space="preserve">
          <source>Get rid of &lt;code&gt;'&lt;/code&gt; single quotes that previously enclosed string values/variables.</source>
          <target state="translated">Избавьтесь от одиночных кавычек, которые ранее заключали в себе строковые значения / переменные.</target>
        </trans-unit>
        <trans-unit id="6eed48caa38c8545e4fcf00ca0a37b5a7cf30396" translate="yes" xml:space="preserve">
          <source>Has been &lt;strong&gt;&lt;a href=&quot;https://wiki.php.net/rfc/remove_deprecated_functionality_in_php7#extmysql&quot;&gt;removed&lt;/a&gt; entirely&lt;/strong&gt; as of PHP 7.0 (released December 2015)</source>
          <target state="translated">&lt;strong&gt;Полностью &lt;a href=&quot;https://wiki.php.net/rfc/remove_deprecated_functionality_in_php7#extmysql&quot;&gt;удалено&lt;/a&gt;&lt;/strong&gt; с PHP 7.0 (выпущено в декабре 2015 г.)</target>
        </trans-unit>
        <trans-unit id="292c37ca19719be96899acb843e9a5c01e00d6c6" translate="yes" xml:space="preserve">
          <source>Here I think you are familiar with all except &lt;code&gt;DSN&lt;/code&gt;; this is new in &lt;code&gt;PDO&lt;/code&gt;. A &lt;code&gt;DSN&lt;/code&gt; is basically a string of options that tell &lt;code&gt;PDO&lt;/code&gt; which driver to use, and connection details. For further reference, check &lt;a href=&quot;http://www.php.net/manual/en/ref.pdo-mysql.connection.php&quot;&gt;PDO MySQL DSN&lt;/a&gt;.</source>
          <target state="translated">Здесь я думаю, что вы знакомы со всеми, кроме &lt;code&gt;DSN&lt;/code&gt; ; это новое в &lt;code&gt;PDO&lt;/code&gt; . &lt;code&gt;DSN&lt;/code&gt; - это в основном строка опций, которые сообщают &lt;code&gt;PDO&lt;/code&gt; , какой драйвер использовать, и сведения о соединении. Для дальнейшего ознакомления проверьте &lt;a href=&quot;http://www.php.net/manual/en/ref.pdo-mysql.connection.php&quot;&gt;PDO MySQL DSN&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="019fa0bc748b8d714e14e0a14973bd4b152ee106" translate="yes" xml:space="preserve">
          <source>Here are some examples based on my &lt;a href=&quot;https://github.com/colshrapnel/safemysql/blob/master/safemysql.class.php&quot;&gt;safemysql class&lt;/a&gt; to show how such an abstraction class ought to be:</source>
          <target state="translated">Вот несколько примеров, основанных на моем &lt;a href=&quot;https://github.com/colshrapnel/safemysql/blob/master/safemysql.class.php&quot;&gt;классе safemysql,&lt;/a&gt; чтобы показать, каким должен быть такой класс абстракции:</target>
        </trans-unit>
        <trans-unit id="e75030adb468b3a20795417b746e352d74186766" translate="yes" xml:space="preserve">
          <source>How about:</source>
          <target state="translated">Как насчет:</target>
        </trans-unit>
        <trans-unit id="f26d6694fb7f66ecaf4fa1fbfe7bfe24ef194112" translate="yes" xml:space="preserve">
          <source>How prepared statements differ</source>
          <target state="translated">Как отличаются подготовленные отчёты</target>
        </trans-unit>
        <trans-unit id="ad5800a3aa56f013a36e72eea8f14ecf9737e3a7" translate="yes" xml:space="preserve">
          <source>However &lt;code&gt;PDO&lt;/code&gt; and/or &lt;code&gt;MySQLi&lt;/code&gt; are not completely safe. Check the answer &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/a/12202218/1723893&quot;&gt;Are PDO prepared statements sufficient to prevent SQL injection?&lt;/a&gt;&lt;/em&gt; by &lt;a href=&quot;https://stackoverflow.com/users/338665/ircmaxell&quot;&gt;ircmaxell&lt;/a&gt;. Also, I am quoting some part from his answer:</source>
          <target state="translated">Однако &lt;code&gt;PDO&lt;/code&gt; и / или &lt;code&gt;MySQLi&lt;/code&gt; не являются полностью безопасными. Проверьте ответ &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/a/12202218/1723893&quot;&gt;Достаточно ли подготовленных операторов PDO для предотвращения внедрения SQL?&lt;/a&gt;&lt;/em&gt; по &lt;a href=&quot;https://stackoverflow.com/users/338665/ircmaxell&quot;&gt;ircmaxell&lt;/a&gt; . Также я цитирую некоторую часть из его ответа:</target>
        </trans-unit>
        <trans-unit id="de3f6b6dffdfbc0e7f9d59202608ca2d11708387" translate="yes" xml:space="preserve">
          <source>However, PDO is not a silver bullet too and has its hardships.</source>
          <target state="translated">Тем не менее,PDO не является серебряной пулей и имеет свои трудности.</target>
        </trans-unit>
        <trans-unit id="2326670ae94db3911611b4826e5793726e96d9a3" translate="yes" xml:space="preserve">
          <source>However, this isn't about folks yelling at you now, this is about showing you how to make your code more secure.</source>
          <target state="translated">Однако сейчас речь идет не о том,чтобы люди кричали на вас,а о том,чтобы показать вам,как сделать ваш код более безопасным.</target>
        </trans-unit>
        <trans-unit id="c9bbba0df8331566d9a670652804604f09ff8317" translate="yes" xml:space="preserve">
          <source>Hybrid PDO use</source>
          <target state="translated">Гибридное использование PDO</target>
        </trans-unit>
        <trans-unit id="5e7fba6fe256396d77ecf48550f90f920c0cc0f5" translate="yes" xml:space="preserve">
          <source>I find the above answers really lengthy, so to summarize:</source>
          <target state="translated">Я нахожу вышеприведенные ответы очень длинными,так что подытоживаю:</target>
        </trans-unit>
        <trans-unit id="f888fecc5715ba4d43b06bf6c44a1576614e0cd5" translate="yes" xml:space="preserve">
          <source>I will later explain why prepare emulation should be turned off. To find reason please check &lt;a href=&quot;https://stackoverflow.com/a/12202218/1723893&quot;&gt;this post&lt;/a&gt;.</source>
          <target state="translated">Позже я объясню, почему подготовка эмуляции должна быть отключена. Чтобы найти причину, пожалуйста, проверьте &lt;a href=&quot;https://stackoverflow.com/a/12202218/1723893&quot;&gt;этот пост&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="28dfd8eb5aa64d92b1531d7f65006651386ac1e5" translate="yes" xml:space="preserve">
          <source>If one were to use PDO of mysqli, the user-name would end-up being &lt;code&gt;&quot;enhzflep); drop table users&quot;&lt;/code&gt;.</source>
          <target state="translated">Если бы кто-то использовал PDO mysqli, имя пользователя в конечном итоге &lt;code&gt;&quot;enhzflep); drop table users&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4376248962eeae9e24a09673cabe25c9fe2dda0b" translate="yes" xml:space="preserve">
          <source>If there is any connection error, it will throw a &lt;code&gt;PDOException&lt;/code&gt; object that can be caught to handle &lt;code&gt;Exception&lt;/code&gt; further.</source>
          <target state="translated">Если возникает какая-либо ошибка соединения, он &lt;code&gt;PDOException&lt;/code&gt; объект PDOException, который может быть перехвачен для дальнейшей обработки &lt;code&gt;Exception&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="94d17d9e7f39fa252ce5b88628ec7ce8a80613f1" translate="yes" xml:space="preserve">
          <source>If there was any mention of &lt;code&gt;stripslashes()&lt;/code&gt; in your sanitize function, it may indicate a higher level oversight.</source>
          <target state="translated">Если в вашей функции дезинфекции было упоминание о &lt;code&gt;stripslashes()&lt;/code&gt; , это может указывать на более высокий уровень контроля.</target>
        </trans-unit>
        <trans-unit id="4b4c10e7726c178ac937120403512eeb1525dc8e" translate="yes" xml:space="preserve">
          <source>If they don't work on my site, why do I get errors like</source>
          <target state="translated">Если они не работают на моем сайте,почему я получаю такие ошибки,как</target>
        </trans-unit>
        <trans-unit id="846ece56704dd1bb57e31e8af6a84a5ac5a26943" translate="yes" xml:space="preserve">
          <source>If you need more reasons:</source>
          <target state="translated">Если тебе нужно больше причин:</target>
        </trans-unit>
        <trans-unit id="c46e5bd047077b5ae27ca605ac5c2cfb2afbb0b6" translate="yes" xml:space="preserve">
          <source>If you need them - these are no doubt technical reasons to move away from mysql extension toward something more stylish and modern-looking.</source>
          <target state="translated">Если они вам нужны-это,несомненно,технические причины для перехода от расширения mysql к чему-то более стильному и современному.</target>
        </trans-unit>
        <trans-unit id="2407ac2d8afe5ad1d4210ba943dda290fb411756" translate="yes" xml:space="preserve">
          <source>If you understand the necessity of using a &lt;em&gt;database abstraction layer&lt;/em&gt; and looking for an API to create one, &lt;strong&gt;mysqli&lt;/strong&gt; is a very good choice, as it indeed supports many mysql-specific features.</source>
          <target state="translated">Если вы понимаете необходимость использования &lt;em&gt;уровня абстракции базы данных&lt;/em&gt; и ищете API для его создания, &lt;strong&gt;mysqli&lt;/strong&gt; - очень хороший выбор, поскольку он действительно поддерживает многие специфичные для mysql функции.</target>
        </trans-unit>
        <trans-unit id="d41a7c07f4fd244d7cfdcf97a95a4ac1ba508f7c" translate="yes" xml:space="preserve">
          <source>If you want to simplify your database interaction further, mappers like &lt;a href=&quot;http://j4mie.github.io/idiormandparis/&quot;&gt;Paris/Idiorm&lt;/a&gt; are worth a try. Just like nobody uses the bland DOM in JavaScript anymore, you don't have to babysit a raw database interface nowadays.</source>
          <target state="translated">Если вы хотите еще больше упростить взаимодействие с базой данных, стоит попробовать такие картографы, как &lt;a href=&quot;http://j4mie.github.io/idiormandparis/&quot;&gt;Paris / Idiorm&lt;/a&gt; . Точно так же, как никто не использует более мягкий DOM в JavaScript, вам не нужно сейчас присматривать за сырым интерфейсом базы данных.</target>
        </trans-unit>
        <trans-unit id="a03e56ddd1d9eaedeb9d91db1610b19c15481de8" translate="yes" xml:space="preserve">
          <source>If, like vast majority of PHP folks, you are using raw API calls right in the application code (which is essentially wrong practice) - &lt;strong&gt;PDO is the only choice&lt;/strong&gt;, as this extension pretends to be not just API but rather a semi-DAL, still incomplete but offers many important features, with two of them makes PDO critically distinguished from mysqli:</source>
          <target state="translated">Если, как и подавляющее большинство PHP-пользователей, вы используете необработанные вызовы API прямо в коде приложения (что, по сути, является неправильной практикой), &lt;strong&gt;PDO - единственный выбор&lt;/strong&gt; , поскольку это расширение претендует на то, чтобы быть не просто API, а скорее полу-DAL, все еще неполный, но предлагает много важных функций, с двумя из них отличает PDO от mysqli:</target>
        </trans-unit>
        <trans-unit id="5f5e48429d30c2e5c8c7ca18ee430f4c425e3ebe" translate="yes" xml:space="preserve">
          <source>In PDO Data, it is obtained via the &lt;code&gt;-&amp;gt;fetch()&lt;/code&gt;, a method of your statement handle. Before calling fetch, the best approach would be telling PDO how you&amp;rsquo;d like the data to be fetched. In the below section I am explaining this.</source>
          <target state="translated">В данных PDO это получается с помощью &lt;code&gt;-&amp;gt;fetch()&lt;/code&gt; , метода вашего дескриптора оператора. Перед вызовом fetch лучшим подходом будет сообщить PDO, как вы хотите получать данные. В следующем разделе я объясняю это.</target>
        </trans-unit>
        <trans-unit id="3859a21002fff48190278b32ba00eefe967fe002" translate="yes" xml:space="preserve">
          <source>In particular you should fix any &lt;code&gt;sanitize&lt;/code&gt; or &lt;code&gt;clean&lt;/code&gt; or &lt;code&gt;filterThis&lt;/code&gt; or &lt;code&gt;clean_data&lt;/code&gt; functions as advertised by dated tutorials in one form or the other:</source>
          <target state="translated">В частности, вы должны исправить любые функции &lt;code&gt;sanitize&lt;/code&gt; или &lt;code&gt;clean&lt;/code&gt; или &lt;code&gt;clean_data&lt;/code&gt; или clean_data, как объявлено датированными учебниками в одной или другой форме:</target>
        </trans-unit>
        <trans-unit id="ba93b0ae18afe09edfc1991f28f940835559bcc0" translate="yes" xml:space="preserve">
          <source>In the above query &lt;a href=&quot;http://php.net/manual/en/pdo.exec.php&quot;&gt;&lt;code&gt;PDO::exec&lt;/code&gt;&lt;/a&gt; execute an SQL statement and returns the number of affected rows.</source>
          <target state="translated">В приведенном выше запросе &lt;a href=&quot;http://php.net/manual/en/pdo.exec.php&quot;&gt; &lt;code&gt;PDO::exec&lt;/code&gt; &lt;/a&gt; выполняет инструкцию SQL и возвращает количество затронутых строк.</target>
        </trans-unit>
        <trans-unit id="37976e7c9d1ceb09ad128295fdb921a6584e75ca" translate="yes" xml:space="preserve">
          <source>In the above, I have been using &lt;code&gt;fetch()&lt;/code&gt;. You can also use:</source>
          <target state="translated">Выше я использовал &lt;code&gt;fetch()&lt;/code&gt; . Вы также можете использовать:</target>
        </trans-unit>
        <trans-unit id="838f76e4ca8001fae4cd38b944929578bd91104a" translate="yes" xml:space="preserve">
          <source>In the above, you can see those &lt;code&gt;?&lt;/code&gt; instead of a name like in a name place holder. Now in the first example, we assign variables to the various placeholders (&lt;code&gt;$stmt-&amp;gt;bindValue(1, $name, PDO::PARAM_STR);&lt;/code&gt;). Then, we assign values to those placeholders and execute the statement. In the second example, the first array element goes to the first &lt;code&gt;?&lt;/code&gt; and the second to the second &lt;code&gt;?&lt;/code&gt;.</source>
          <target state="translated">Выше можно увидеть их &lt;code&gt;?&lt;/code&gt; вместо имени, как в названии местозаполнителя. Теперь в первом примере мы присваиваем переменные различным заполнителям ( &lt;code&gt;$stmt-&amp;gt;bindValue(1, $name, PDO::PARAM_STR);&lt;/code&gt; ). Затем мы присваиваем значения этим заполнителям и выполняем инструкцию. Во втором примере первый элемент массива переходит к первому &lt;code&gt;?&lt;/code&gt; а со второго на второе &lt;code&gt;?&lt;/code&gt; ,</target>
        </trans-unit>
        <trans-unit id="51e69d1bd76f27cf149eed630feb3e8bbbe3e693" translate="yes" xml:space="preserve">
          <source>Insert and Update or Delete statements</source>
          <target state="translated">Вставлять и обновлять или удалять утверждения</target>
        </trans-unit>
        <trans-unit id="f6116d88666e16df0efbdad2df064412c9f30a13" translate="yes" xml:space="preserve">
          <source>Instead of using &lt;code&gt;mysql_num_rows&lt;/code&gt; to get the number of returned rows, you can get a &lt;code&gt;PDOStatement&lt;/code&gt; and do &lt;code&gt;rowCount()&lt;/code&gt;, like:</source>
          <target state="translated">Вместо использования &lt;code&gt;mysql_num_rows&lt;/code&gt; для получения количества возвращаемых строк, вы можете получить &lt;code&gt;PDOStatement&lt;/code&gt; и выполнить &lt;code&gt;rowCount()&lt;/code&gt; , например:</target>
        </trans-unit>
        <trans-unit id="2f4f5b358872d7afce164df88c9ed86e13417775" translate="yes" xml:space="preserve">
          <source>Is &lt;strong&gt;officially &lt;a href=&quot;https://wiki.php.net/rfc/mysql_deprecation&quot;&gt;deprecated&lt;/a&gt;&lt;/strong&gt; as of PHP 5.5 (released June 2013).</source>
          <target state="translated">&lt;strong&gt;Официально &lt;a href=&quot;https://wiki.php.net/rfc/mysql_deprecation&quot;&gt;устарела с версии&lt;/a&gt;&lt;/strong&gt; PHP 5.5 (выпущена в июне 2013 г.).</target>
        </trans-unit>
        <trans-unit id="f27190c0d5f51b1ca6eb014f6b10e0503b10a2e9" translate="yes" xml:space="preserve">
          <source>Is not under active development</source>
          <target state="translated">Не находится в стадии активного развития</target>
        </trans-unit>
        <trans-unit id="dcf8be11b129ed1d3fa675563db73c8506041b9b" translate="yes" xml:space="preserve">
          <source>It is only usable if you are using an old version of &lt;code&gt;MySQL&lt;/code&gt; which I do not recommended.</source>
          <target state="translated">Это возможно только в том случае, если вы используете старую версию &lt;code&gt;MySQL&lt;/code&gt; , которую я не рекомендую.</target>
        </trans-unit>
        <trans-unit id="5e9565aafd703c4317b924ba9cdbc3c14be98c98" translate="yes" xml:space="preserve">
          <source>It seems to me &lt;strong&gt;too idealistic&lt;/strong&gt; a dream that all those PHP users will learn how to handle SQL queries properly at once. Most likely they would just change mysql_* to mysqli_* mechanically, &lt;strong&gt;leaving the approach the same&lt;/strong&gt;. Especially because mysqli makes prepared statements usage incredible painful and troublesome.</source>
          <target state="translated">Мне кажется &lt;strong&gt;слишком идеалистической&lt;/strong&gt; мечтой, что все эти пользователи PHP научатся правильно обрабатывать запросы SQL. Скорее всего, они просто изменили бы mysql_ * на mysqli_ * механически, &lt;strong&gt;оставив подход тот же&lt;/strong&gt; . Тем более, что mysqli делает использование готовых заявлений невероятно болезненным и хлопотным.</target>
        </trans-unit>
        <trans-unit id="ffe81de05696768d78038c224645412434af0ab5" translate="yes" xml:space="preserve">
          <source>It's best to start at simplifying again however. For example the common result fetching:</source>
          <target state="translated">Лучше всего начать с упрощения снова.Например,получение общего результата:</target>
        </trans-unit>
        <trans-unit id="7bd40f368444a59ce546d97ec42b7235ad3f6390" translate="yes" xml:space="preserve">
          <source>It's mostly the &lt;em&gt;bound parameters&lt;/em&gt; which can simplify code. And with &lt;a href=&quot;https://stackoverflow.com/a/14110189&quot;&gt;excellent tutorials (as seen above)&lt;/a&gt; the transition to &lt;a href=&quot;http://php.net/PDO&quot;&gt;PDO&lt;/a&gt; isn't overly arduous.</source>
          <target state="translated">В основном это &lt;em&gt;связанные параметры,&lt;/em&gt; которые могут упростить код. И с &lt;a href=&quot;https://stackoverflow.com/a/14110189&quot;&gt;отличными учебниками (как видно выше)&lt;/a&gt; переход на &lt;a href=&quot;http://php.net/PDO&quot;&gt;PDO&lt;/a&gt; не слишком труден.</target>
        </trans-unit>
        <trans-unit id="48bb63e397a815a1d4028b30f85fed998e978b00" translate="yes" xml:space="preserve">
          <source>It's possible to define almost all &lt;code&gt;mysql_*&lt;/code&gt; functions using mysqli or PDO. Just include them on top of your old PHP application, and it will work on PHP7. My solution &lt;a href=&quot;https://github.com/sunhater/php7-mysql/blob/master/php7-mysql.php&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">Можно определить почти все функции &lt;code&gt;mysql_*&lt;/code&gt; , используя mysqli или PDO. Просто включите их поверх старого приложения PHP, и оно будет работать на PHP7. Мое решение &lt;a href=&quot;https://github.com/sunhater/php7-mysql/blob/master/php7-mysql.php&quot;&gt;здесь&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0e54f725cef35b6c2a077269e4ced4587f8f5e96" translate="yes" xml:space="preserve">
          <source>Just don't escape a variable &lt;em&gt;and&lt;/em&gt; bind it in the same query.</source>
          <target state="translated">Просто не экранируйте переменную &lt;em&gt;и не&lt;/em&gt; связывайте ее в одном запросе.</target>
        </trans-unit>
        <trans-unit id="5cc04691e5722139d5540eb38b3f8fdedafc04b3" translate="yes" xml:space="preserve">
          <source>Just switching to &lt;a href=&quot;/questions/tagged/pdo&quot;&gt;pdo&lt;/a&gt; doesn't quite cut it. &lt;code&gt;pdo_query()&lt;/code&gt; is also just a frontend onto it.</source>
          <target state="translated">Просто переключение на &lt;a href=&quot;/questions/tagged/pdo&quot;&gt;pdo&lt;/a&gt; не совсем помогает . &lt;code&gt;pdo_query()&lt;/code&gt; также является только внешним интерфейсом.</target>
        </trans-unit>
        <trans-unit id="66ec5c04732160bf6b782f5fc5a7fd3d0a54ffb2" translate="yes" xml:space="preserve">
          <source>Lack of support for prepared statements is particularly important as they provide a clearer, less error prone method of escaping and quoting external data than manually escaping it with a separate function call.</source>
          <target state="translated">Отсутствие поддержки подготовленных заявлений особенно важно,так как они обеспечивают более ясный,менее склонный к ошибкам метод экранирования и цитирования внешних данных,чем ручное экранирование с помощью отдельного вызова функции.</target>
        </trans-unit>
        <trans-unit id="ef74674a0032ecad5b46a45642e5b320f61a0320" translate="yes" xml:space="preserve">
          <source>Lack of support for prepared statements is particularly important as they provide a clearer, less error-prone method of escaping and quoting external data than manually escaping it with a separate function call.</source>
          <target state="translated">Отсутствие поддержки подготовленных заявлений особенно важно,так как они обеспечивают более четкий,менее подверженный ошибкам метод экранирования и цитирования внешних данных,чем ручное экранирование с помощью отдельного вызова функции.</target>
        </trans-unit>
        <trans-unit id="a5c76c162b06e13ac4bcdfd672e71bd3f45ca6a4" translate="yes" xml:space="preserve">
          <source>Lacks an OO interface</source>
          <target state="translated">Отсутствие OO-интерфейса</target>
        </trans-unit>
        <trans-unit id="f4466bc90729ac480010ac96a72f88b0375e70c8" translate="yes" xml:space="preserve">
          <source>Lacks an OO interface (to create one is a matter of several hours)</source>
          <target state="translated">Отсутствие интерфейса OO (создание интерфейса-дело нескольких часов).</target>
        </trans-unit>
        <trans-unit id="1d16e278bd69ab650d0b2ca2923fa1b532adb204" translate="yes" xml:space="preserve">
          <source>Lastly, this isn't to say that this is PERFECT code. There are many more things that you could do to improve it, use hashed passwords for example, ensure that when you store sensetive information in the database, you don't store it in plain text, have multiple levels of verification - but really, if you just change your old injection prone code to this, you will be WELL along the way to writing good code - and the fact that you have gotten this far and are still reading gives me a sense of hope that you will not only implement this type of code when writing your websites and applications, but that you might go out and research those other things I just mentioned - and more. Write the best code you can, not the most basic code that barely functions.</source>
          <target state="translated">Наконец,это не значит,что это код PERFECT.Есть много других вещей,которые вы могли бы сделать,чтобы улучшить его,например,использовать хэшированные пароли,убедиться,что когда вы храните смысловую информацию в базе данных,вы не храните ее открытым текстом,не имеете многоуровневой верификации-но на самом деле,если вы просто измените свой старый код,склонный к инъекциям,на этот код,Вы будете БОЛЬШОЙ на пути к написанию хорошего кода-и тот факт,что вы зашли так далеко и все еще читаете,дает мне чувство надежды,что вы не только будете реализовывать этот тип кода при написании своих сайтов и приложений,но и будете выходить и исследовать те другие вещи,о которых я только что упомянул-и многое другое.Напишите лучший код,который вы можете,а не самый простой код,который едва функционирует.</target>
        </trans-unit>
        <trans-unit id="d94fac60f2ec2499ed53938148c85015abf6f2b1" translate="yes" xml:space="preserve">
          <source>Let's go through this, sentence by sentence, and explain:</source>
          <target state="translated">Давайте пройдем через это,предложение за предложением,и объясним:</target>
        </trans-unit>
        <trans-unit id="e754152995eed2c697af0b43150ac82ad5ccb3c4" translate="yes" xml:space="preserve">
          <source>Lets assume the following script is the verification process for an admin on a website (simplified but working if you copy and use it for testing):</source>
          <target state="translated">Допустим,следующий скрипт является процессом верификации для администратора на сайте (упрощенным,но работающим,если вы скопируете и используете его для тестирования):</target>
        </trans-unit>
        <trans-unit id="a707aa190f760150c8ff8256bff3171e748227a0" translate="yes" xml:space="preserve">
          <source>Like:</source>
          <target state="translated">Like:</target>
        </trans-unit>
        <trans-unit id="b11d87a0679fc93bf95cfcb6a2752248f89d290e" translate="yes" xml:space="preserve">
          <source>Maybe I am too ignorant, but I never had an opportunity to use them things like</source>
          <target state="translated">Может быть,я слишком невежественна,но у меня никогда не было возможности использовать такие вещи,как...</target>
        </trans-unit>
        <trans-unit id="17fe9ca6bbb425d8633e6b31c6b723df16a660db" translate="yes" xml:space="preserve">
          <source>More importantly you can pass $_REQUEST[] variables safely behind any query. When submitted &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; fields match the database structure exactly it's even shorter:</source>
          <target state="translated">Более того, вы можете безопасно передавать переменные $ _REQUEST [] за любым запросом. Когда отправленные поля &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; соответствуют структуре базы данных, она становится еще короче:</target>
        </trans-unit>
        <trans-unit id="f1587de204fa79f4a4783af5600a077de5317c2d" translate="yes" xml:space="preserve">
          <source>Most glaring bug here is the lack of documentation. More significantly the order of filtering was in exactly the wrong order.</source>
          <target state="translated">Самая яркая ошибка здесь-отсутствие документации.Более того,порядок фильтрации был точно не в том порядке.</target>
        </trans-unit>
        <trans-unit id="f92274be79830199dc63b7643aad05843b510053" translate="yes" xml:space="preserve">
          <source>Move your variables out of the SQL string.</source>
          <target state="translated">Переместите свои переменные из строки SQL.</target>
        </trans-unit>
        <trans-unit id="1bdcae0a8ea855d5e4a88cd02e009731df745843" translate="yes" xml:space="preserve">
          <source>Moving away from &lt;code&gt;ext/mysql&lt;/code&gt; is not only about security, but also about having access to all the features of the MySQL database.</source>
          <target state="translated">Отказ от &lt;code&gt;ext/mysql&lt;/code&gt; касается не только безопасности, но и доступа ко всем функциям базы данных MySQL.</target>
        </trans-unit>
        <trans-unit id="e35ac0203a1fef2dcb5b1881363e036ecd70d1e9" translate="yes" xml:space="preserve">
          <source>Multiple Statements</source>
          <target state="translated">Множественные заявления</target>
        </trans-unit>
        <trans-unit id="c49860262ec681368ccb9bcf9cb9facc422187d7" translate="yes" xml:space="preserve">
          <source>MySQL deprecated in PHP 5.5.0, and removed in PHP 7.0.0. For a large and old application, this is difficult to search and replace each function.</source>
          <target state="translated">MySQL устарел в PHP 5.5.0 и удален в PHP 7.0.0.Для большого и старого приложения,это трудно найти и заменить каждую функцию.</target>
        </trans-unit>
        <trans-unit id="e8bb7548ab9b8605aff82c9f2282425a263a1641" translate="yes" xml:space="preserve">
          <source>Nevertheless, everyone talking about extensions always missing the &lt;strong&gt;2 important facts&lt;/strong&gt; about Mysqli and PDO:</source>
          <target state="translated">Тем не менее, все, кто говорит о расширениях, всегда упускают &lt;strong&gt;два важных факта&lt;/strong&gt; о Mysqli и PDO:</target>
        </trans-unit>
        <trans-unit id="7d2fa77f8c62d7e4e20bf83f1d23da735eceaaeb" translate="yes" xml:space="preserve">
          <source>Newer! ext/mysql &lt;em&gt;&lt;a href=&quot;https://wiki.php.net/rfc/remove_deprecated_functionality_in_php7&quot;&gt;has been removed in PHP 7&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">Новее! ext / mysql &lt;em&gt;&lt;a href=&quot;https://wiki.php.net/rfc/remove_deprecated_functionality_in_php7&quot;&gt;был удален в PHP 7&lt;/a&gt;&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="685d76edff92343d24a20b8ec69b6efaff99726a" translate="yes" xml:space="preserve">
          <source>Non-blocking, asynchronous queries</source>
          <target state="translated">Блокирующие,асинхронные запросы</target>
        </trans-unit>
        <trans-unit id="68345c1292e1cc90d4f880a94c3bca3d035eaeb2" translate="yes" xml:space="preserve">
          <source>Not to mention that &lt;em&gt;native&lt;/em&gt; prepared statements &lt;strong&gt;aren't enough to protect&lt;/strong&gt; from SQL injections, and neither mysqli nor PDO offers a solution.</source>
          <target state="translated">Не говоря уже о том, что &lt;em&gt;собственных&lt;/em&gt; подготовленных операторов &lt;strong&gt;недостаточно для защиты&lt;/strong&gt; от SQL-инъекций, и ни mysqli, ни PDO не предлагают решения.</target>
        </trans-unit>
        <trans-unit id="c63f37e1f56dcfbabca1e890130ce1ea2da2597c" translate="yes" xml:space="preserve">
          <source>Not under active development</source>
          <target state="translated">Не находится в стадии активного развития</target>
        </trans-unit>
        <trans-unit id="943cf0ecd5faca4611853075578258bc2002ba56" translate="yes" xml:space="preserve">
          <source>Not under active development (so what? does it affect &lt;em&gt;you&lt;/em&gt; in any practical way?)</source>
          <target state="translated">Не в активном развитии (ну и что? Это как-то влияет на &lt;em&gt;тебя&lt;/em&gt; ?)</target>
        </trans-unit>
        <trans-unit id="bb2ac3999c57f46e2bd9758251dbcf1d84afb4d6" translate="yes" xml:space="preserve">
          <source>Note that this will also hide &lt;strong&gt;other deprecation warnings&lt;/strong&gt;, which, however, may be for things other than MySQL. (&lt;em&gt;&lt;a href=&quot;https://wiki.php.net/rfc/mysql_deprecation#workarounds&quot;&gt;from PHP manual&lt;/a&gt;&lt;/em&gt;)</source>
          <target state="translated">Обратите внимание, что это также скрывает &lt;strong&gt;другие предупреждения об устаревании&lt;/strong&gt; , которые, однако, могут относиться к вещам, отличным от MySQL. ( &lt;em&gt;&lt;a href=&quot;https://wiki.php.net/rfc/mysql_deprecation#workarounds&quot;&gt;из руководства по PHP&lt;/a&gt;&lt;/em&gt; )</target>
        </trans-unit>
        <trans-unit id="bda5dde931c8e24b349d67e7a7b806e98b96812c" translate="yes" xml:space="preserve">
          <source>Note the use of &lt;code&gt;PDO::FETCH_ASSOC&lt;/code&gt; in the &lt;code&gt;fetch()&lt;/code&gt; and &lt;code&gt;fetchAll()&lt;/code&gt; code above. This tells &lt;code&gt;PDO&lt;/code&gt; to return the rows as an associative array with the field names as keys. There are many other fetch modes too which I will explain one by one.</source>
          <target state="translated">Обратите внимание на использование &lt;code&gt;PDO::FETCH_ASSOC&lt;/code&gt; в приведенном выше коде &lt;code&gt;fetch()&lt;/code&gt; и &lt;code&gt;fetchAll()&lt;/code&gt; . Это говорит &lt;code&gt;PDO&lt;/code&gt; возвращать строки в виде ассоциативного массива с именами полей в качестве ключей. Есть также много других режимов извлечения, которые я объясню один за другим.</target>
        </trans-unit>
        <trans-unit id="390aff0245fd3f60ed591a199d4ab419c07a3c3d" translate="yes" xml:space="preserve">
          <source>Now I come to fetch mode:</source>
          <target state="translated">Теперь я перехожу в режим извлечения:</target>
        </trans-unit>
        <trans-unit id="df9f2bb47f2f3240e6cc68b55730527bb6d13c2e" translate="yes" xml:space="preserve">
          <source>Now in &lt;code&gt;PDO&lt;/code&gt;, you can do this like:</source>
          <target state="translated">Теперь в &lt;code&gt;PDO&lt;/code&gt; вы можете сделать это следующим образом:</target>
        </trans-unit>
        <trans-unit id="f01b36c532e5c2589a140fa7f84b5b0a69b50379" translate="yes" xml:space="preserve">
          <source>Now it's time to actually &lt;em&gt;utilize&lt;/em&gt; it.</source>
          <target state="translated">Теперь пришло время фактически &lt;em&gt;использовать&lt;/em&gt; это.</target>
        </trans-unit>
        <trans-unit id="af4e1cd344ecad42d4d3ae20475ecfd47bd9b08f" translate="yes" xml:space="preserve">
          <source>Now, after reading all the things above, you are probably thinking: what the heck is that when I just want to start leaning simple &lt;code&gt;SELECT&lt;/code&gt;, &lt;code&gt;INSERT&lt;/code&gt;, &lt;code&gt;UPDATE&lt;/code&gt;, or &lt;code&gt;DELETE&lt;/code&gt; statements? Don't worry, here we go:</source>
          <target state="translated">Теперь, прочитав все вышеперечисленное, вы, вероятно, подумаете: что за черт, когда я просто хочу начать опираться на простые &lt;code&gt;SELECT&lt;/code&gt; , &lt;code&gt;INSERT&lt;/code&gt; , &lt;code&gt;UPDATE&lt;/code&gt; или &lt;code&gt;DELETE&lt;/code&gt; ? Не волнуйтесь, здесь мы идем:</target>
        </trans-unit>
        <trans-unit id="bb447931ebe2bec10f8d27c32d8b085d4929ad94" translate="yes" xml:space="preserve">
          <source>Now, lets have a look at that code again, this time written using a PDO object:</source>
          <target state="translated">Теперь давайте еще раз взглянем на этот код,на этот раз написанный с использованием объекта PDO:</target>
        </trans-unit>
        <trans-unit id="d95a06cc3375c57a4fb46a5611bf33dc0eac0163" translate="yes" xml:space="preserve">
          <source>Now, lets try the data that a clever chap would enter to try to get past our little verification system:</source>
          <target state="translated">Теперь давайте попробуем данные,которые ввел бы умный парень,чтобы попытаться пройти мимо нашей маленькой системы проверки:</target>
        </trans-unit>
        <trans-unit id="c56d47755ee1354ee2f207be52265612e2153d71" translate="yes" xml:space="preserve">
          <source>Now, you have the better options of using &lt;a href=&quot;http://php.net/manual/en/book.mysqli.php&quot;&gt;mysqli_&lt;/a&gt; or &lt;a href=&quot;http://www.php.net/manual/en/book.pdo.php&quot;&gt;PDO&lt;/a&gt;. I am personally a big fan of PDO, so I will be using PDO in the rest of this answer. There are pro's and con's, but personally I find that the pro's far outweigh the con's. It's portable across multiple database engines - whether you are using MySQL or Oracle or just about bloody anything - just by changing the connection string, it has all the fancy features we want to use and it is nice and clean. I like clean.</source>
          <target state="translated">Теперь у вас есть лучшие варианты использования &lt;a href=&quot;http://php.net/manual/en/book.mysqli.php&quot;&gt;mysqli_&lt;/a&gt; или &lt;a href=&quot;http://www.php.net/manual/en/book.pdo.php&quot;&gt;PDO&lt;/a&gt; . Я лично большой поклонник PDO, поэтому я буду использовать PDO в оставшейся части этого ответа. Есть &amp;laquo;за&amp;raquo; и &amp;laquo;против&amp;raquo;, но лично я считаю, что &amp;laquo;за&amp;raquo; намного перевешивают &amp;laquo;против&amp;raquo;. Он переносим между несколькими ядрами баз данных - используете ли вы MySQL или Oracle или просто что-то кровавое - просто изменив строку подключения, он обладает всеми интересными функциями, которые мы хотим использовать, и он приятен и чист. Мне нравится чистый.</target>
        </trans-unit>
        <trans-unit id="b4df376bcf338aaf237cc2ceb55bc64301fbe1d9" translate="yes" xml:space="preserve">
          <source>Object-oriented interface</source>
          <target state="translated">Объектно-ориентированный интерфейс</target>
        </trans-unit>
        <trans-unit id="79f9618f1912184bc89ea96846cec252f2b5b111" translate="yes" xml:space="preserve">
          <source>Often string variables aren't just interpolated into SQL, but concatenated with escaping calls in between.</source>
          <target state="translated">Часто строковые переменные не просто интерполируются в SQL,а конкапсулируются с экранирующими вызовами между ними.</target>
        </trans-unit>
        <trans-unit id="0842d63b94cdae1d97ca5df8b49fbf2cefb344db" translate="yes" xml:space="preserve">
          <source>Oh, I just got a little excited, it worked: The check passed. We have a verified admin!</source>
          <target state="translated">О,я просто немного взволнован,это сработало:Чек прошел.У нас есть проверенный администратор!</target>
        </trans-unit>
        <trans-unit id="94c3dc399cf5b64e36b7c400dadceac39bc77b5b" translate="yes" xml:space="preserve">
          <source>Okay, so what went wrong, and how can we fix it?</source>
          <target state="translated">Ладно,так что пошло не так,и как мы можем это исправить?</target>
        </trans-unit>
        <trans-unit id="e33efcc54426fd4f64d01de7305ceab6f21b294b" translate="yes" xml:space="preserve">
          <source>Once you have converted all &lt;s&gt;&lt;code&gt;mysql_&lt;/code&gt;&lt;/s&gt; calls to &lt;code&gt;pdo_query&lt;/code&gt; with bound params, remove all redundant &lt;code&gt;pdo_real_escape_string&lt;/code&gt; calls.</source>
          <target state="translated">Как только вы преобразовали все вызовы &lt;s&gt; &lt;code&gt;mysql_&lt;/code&gt; &lt;/s&gt; в &lt;code&gt;pdo_query&lt;/code&gt; со связанными параметрами, удалите все избыточные вызовы &lt;code&gt;pdo_real_escape_string&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e72184f55cc026514b7160d78c3c5aef63c2a050" translate="yes" xml:space="preserve">
          <source>Or</source>
          <target state="translated">Or</target>
        </trans-unit>
        <trans-unit id="dccb816213ce63a2edee44cd16d1bf786620eda9" translate="yes" xml:space="preserve">
          <source>Or better yet a direct and complete array retrieval:</source>
          <target state="translated">Или,что еще лучше,прямое и полное извлечение массива:</target>
        </trans-unit>
        <trans-unit id="d291165f3e48fa04de2df661e5577d3237e36a86" translate="yes" xml:space="preserve">
          <source>Other options</source>
          <target state="translated">Другие варианты</target>
        </trans-unit>
        <trans-unit id="80c9afff3fc6e7a45d3cc8c0ba82a6e36345cadc" translate="yes" xml:space="preserve">
          <source>PHP offers three different APIs to connect to MySQL. These are the &lt;a href=&quot;http://in1.php.net/manual/en/book.mysql.php&quot;&gt;&lt;code&gt;mysql&lt;/code&gt;&lt;/a&gt;(removed as of PHP 7), &lt;a href=&quot;http://uk.php.net/manual/en/book.mysqli.php&quot;&gt;&lt;code&gt;mysqli&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;http://php.net/manual/en/book.pdo.php&quot;&gt;&lt;code&gt;PDO&lt;/code&gt;&lt;/a&gt; extensions.</source>
          <target state="translated">PHP предлагает три разных API для подключения к MySQL. Это &lt;a href=&quot;http://in1.php.net/manual/en/book.mysql.php&quot;&gt; &lt;code&gt;mysql&lt;/code&gt; &lt;/a&gt; (удалено с PHP 7), &lt;a href=&quot;http://uk.php.net/manual/en/book.mysqli.php&quot;&gt; &lt;code&gt;mysqli&lt;/code&gt; &lt;/a&gt; и расширения &lt;a href=&quot;http://php.net/manual/en/book.pdo.php&quot;&gt; &lt;code&gt;PDO&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="66b1f6ccb868a51c719c54211a58306d2ce6458b" translate="yes" xml:space="preserve">
          <source>Place question marks &lt;code&gt;?&lt;/code&gt; as placeholders where the variables were before.</source>
          <target state="translated">Ставить вопросительные знаки &lt;code&gt;?&lt;/code&gt; в качестве заполнителей, где переменные были раньше.</target>
        </trans-unit>
        <trans-unit id="7478e01a69a59cf96a526ecfcd34a76707511615" translate="yes" xml:space="preserve">
          <source>Prepared statement &lt;strong&gt;isn't a silver bullet&lt;/strong&gt;. There are dynamical identifiers which cannot be bound using prepared statements. There are dynamical queries with an unknown number of parameters which makes query building a difficult task.</source>
          <target state="translated">Подготовленное заявление &lt;strong&gt;не является серебряной пулей&lt;/strong&gt; . Существуют динамические идентификаторы, которые нельзя связать с помощью подготовленных операторов. Существуют динамические запросы с неизвестным количеством параметров, что затрудняет построение запросов.</target>
        </trans-unit>
        <trans-unit id="88e0e0a0df815f954f20830db35becc23bd2fb02" translate="yes" xml:space="preserve">
          <source>Prepared statements</source>
          <target state="translated">Подготовленные заявления</target>
        </trans-unit>
        <trans-unit id="0b0459e39e775d8d016c9a1b7d9fbb9cf8ae780b" translate="yes" xml:space="preserve">
          <source>Q. First question in my mind was: what is `PDO`?</source>
          <target state="translated">Q.Первый вопрос в моей голове был:что такое `PDO`?</target>
        </trans-unit>
        <trans-unit id="cb0e0b93a85516a6c4a7283d442e3274fb701224" translate="yes" xml:space="preserve">
          <source>Remember that pdo_* still allows &lt;em&gt;either or&lt;/em&gt;.</source>
          <target state="translated">Помните, что pdo_ * все еще позволяет &lt;em&gt;либо&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="3e04ee6f5fe2cec54a2d0b8c7a1e5d97c3761798" translate="yes" xml:space="preserve">
          <source>Remove the &lt;s&gt;&lt;code&gt;mysql_&lt;/code&gt;&lt;/s&gt; function prefix &lt;em&gt;everywhere&lt;/em&gt; and replace it with &lt;strong&gt;&lt;code&gt;pdo_&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="translated">Удалите &lt;s&gt; &lt;code&gt;mysql_&lt;/code&gt; &lt;/s&gt; функции &lt;s&gt;mysql_&lt;/s&gt; &lt;em&gt;везде&lt;/em&gt; и замените его на &lt;strong&gt; &lt;code&gt;pdo_&lt;/code&gt; &lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="6e950042d73e706574ab836f1c73abbaeaec437a" translate="yes" xml:space="preserve">
          <source>Removed as of PHP 7</source>
          <target state="translated">Удалено из PHP 7</target>
        </trans-unit>
        <trans-unit id="f71536fa3d10e36d63218592cefa79677819294b" translate="yes" xml:space="preserve">
          <source>Rewriting a larger code base at once however takes time. Raison d'&amp;ecirc;tre for this intermediate alternative:</source>
          <target state="translated">Переписывание большей кодовой базы за один раз, однако, требует времени. Raison d'&amp;ecirc;tre для этой промежуточной альтернативы:</target>
        </trans-unit>
        <trans-unit id="b7b089287c11c303c7e28345b34bb09873f7b3e2" translate="yes" xml:space="preserve">
          <source>Rewriting doesn't have to stop at using the new pdo_ function names. You could one by one transition each pdo_query() into a plain $pdo-&amp;gt;prepare()-&amp;gt;execute() call.</source>
          <target state="translated">Перезапись не должна останавливаться на использовании новых имен функций pdo_. Вы можете по одному переходить каждый pdo_query () в простой вызов $ pdo-&amp;gt; prepare () -&amp;gt; execute ().</target>
        </trans-unit>
        <trans-unit id="d18471042a4567ba79deea1a219d4a26d8d8459a" translate="yes" xml:space="preserve">
          <source>SQL injections simply are when &lt;em&gt;data bleeds into code&lt;/em&gt; context. A database server can't later spot where PHP originally glued variables inbetween query clauses.</source>
          <target state="translated">Инъекции SQL просто происходят, когда &lt;em&gt;данные&lt;/em&gt; попадают &lt;em&gt;в&lt;/em&gt; контекст &lt;em&gt;кода&lt;/em&gt; . Сервер базы данных не может позже определить, где PHP изначально склеивал переменные между предложениями запроса.</target>
        </trans-unit>
        <trans-unit id="e665bf1f2a0279913bf81f45ec5a5c78ea174425" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://bobby-tables.com/&quot;&gt;bobby-tables.com&lt;/a&gt;.</source>
          <target state="translated">Смотрите &lt;a href=&quot;http://bobby-tables.com/&quot;&gt;bobby-tables.com&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="5434d7a025004202b6c9d1ef189773a1aad44220" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://php.net/manual/en/mysqlinfo.api.choosing.php&quot;&gt;&lt;strong&gt;the comparison of SQL extensions&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">Смотрите &lt;a href=&quot;http://php.net/manual/en/mysqlinfo.api.choosing.php&quot;&gt;&lt;strong&gt;сравнение расширений SQL&lt;/strong&gt;&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="7489fd89c972450ae2f6ec9bf321744a53fac8d8" translate="yes" xml:space="preserve">
          <source>See how I constructed my &quot;password&quot; so that it would first close the single quote around the password, then introduce a completely new comparison? Then just for safety, I added another &quot;string&quot; so that the single quote would get closed as expected in the code we originally had.</source>
          <target state="translated">Видите,как я сконструировал свой &quot;пароль&quot; так,чтобы он сначала закрывал единственную цитату вокруг пароля,а затем вводил совершенно новое сравнение? Тогда просто для безопасности я добавил еще одну &quot;строку&quot;,чтобы одиночная кавычка закрылась,как и ожидалось,в том коде,который у нас был изначально.</target>
        </trans-unit>
        <trans-unit id="55506229592fa23e7b5870b9dc6c5aa7e1583634" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;http://php.net/manual/en/mysqlinfo.api.choosing.php&quot;&gt;comparison of SQL extensions&lt;/a&gt;.</source>
          <target state="translated">Смотрите &lt;a href=&quot;http://php.net/manual/en/mysqlinfo.api.choosing.php&quot;&gt;сравнение расширений SQL&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="8332ef556cea9f1f40a6c76849dace653964c7a0" translate="yes" xml:space="preserve">
          <source>Seems legit enough at first glance.</source>
          <target state="translated">На первый взгляд кажется достаточно законным.</target>
        </trans-unit>
        <trans-unit id="af912eddd3068889909f441f05cc66e7d588440d" translate="yes" xml:space="preserve">
          <source>Selecting Data</source>
          <target state="translated">Выбор данных</target>
        </trans-unit>
        <trans-unit id="418dc8b027c0175bc948e9cbb66d6a25f398bcb1" translate="yes" xml:space="preserve">
          <source>Simply &lt;code&gt;include_once(&lt;/code&gt;&lt;a href=&quot;http://fossil.include-once.org/upgradephp/artifact/43ab742241e5a3be43d31764dd333ba68e245360&quot;&gt;&lt;code&gt;&quot;pdo_mysql.php&quot;&lt;/code&gt;&lt;/a&gt;&lt;code&gt;);&lt;/code&gt; in each invocation script that has to interact with the database.</source>
          <target state="translated">Просто &lt;code&gt;include_once(&lt;/code&gt; &lt;a href=&quot;http://fossil.include-once.org/upgradephp/artifact/43ab742241e5a3be43d31764dd333ba68e245360&quot;&gt; &lt;code&gt;&quot;pdo_mysql.php&quot;&lt;/code&gt; &lt;/a&gt; &lt;code&gt;);&lt;/code&gt; в каждом скрипте вызова, который должен взаимодействовать с базой данных.</target>
        </trans-unit>
        <trans-unit id="da5002da9abdeebe9fb4cab82878e2462cde36fb" translate="yes" xml:space="preserve">
          <source>Since it is deprecated, using it makes your code less future proof.</source>
          <target state="translated">Поскольку он устарел,его использование делает ваш код менее перспективным.</target>
        </trans-unit>
        <trans-unit id="181dff808d342cf7f9e72760d9c8e79ed94e35e7" translate="yes" xml:space="preserve">
          <source>So much simplicity. But let's get back to some more rewriting advises and technical reasons on why you may want to get rid of &lt;s&gt;&lt;code&gt;mysql_&lt;/code&gt;&lt;/s&gt; and escaping.</source>
          <target state="translated">Так много простоты. Но давайте вернемся к еще нескольким советам по переписыванию и техническим причинам того, почему вы можете избавиться от &lt;s&gt; &lt;code&gt;mysql_&lt;/code&gt; &lt;/s&gt; и избежать побега.</target>
        </trans-unit>
        <trans-unit id="0e06bdf278d741a7d2afe7a65871fe0c7c71210f" translate="yes" xml:space="preserve">
          <source>So this hopefully visualized some &lt;em&gt;practical&lt;/em&gt; reasons and a worthwile pathway to drop &lt;s&gt;&lt;code&gt;mysql_&lt;/code&gt;&lt;/s&gt;.</source>
          <target state="translated">Таким образом, мы надеемся, что это наглядно продемонстрировало некоторые &lt;em&gt;практические&lt;/em&gt; причины и полезный путь для &lt;s&gt; &lt;code&gt;mysql_&lt;/code&gt; &lt;/s&gt; от &lt;s&gt;mysql_&lt;/s&gt; .</target>
        </trans-unit>
        <trans-unit id="3012707c2195366927599a0dd74ecf1430c805f0" translate="yes" xml:space="preserve">
          <source>So what you are doing in &lt;code&gt;mysql_*&lt;/code&gt; is:</source>
          <target state="translated">Итак, что вы делаете в &lt;code&gt;mysql_*&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="502276f58db137875cfb6cf92bfa59236b8263ac" translate="yes" xml:space="preserve">
          <source>So, I wrote solutions for all the common pitfalls and complex cases in the &lt;a href=&quot;https://stackoverflow.com/tags/pdo/info&quot;&gt;&lt;strong&gt;PDO tag wiki&lt;/strong&gt;&lt;/a&gt;</source>
          <target state="translated">Итак, я написал решения для всех распространенных ошибок и сложных случаев в &lt;a href=&quot;https://stackoverflow.com/tags/pdo/info&quot;&gt;&lt;strong&gt;вики тега PDO&lt;/strong&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="72d2f3bbb78bd884d0b025adc79a648f2da15e63" translate="yes" xml:space="preserve">
          <source>So, how do we protect your sacred admin section and make it nice and secure? The first thing to do will be to stop using those really old and deprecated &lt;code&gt;mysql_*&lt;/code&gt; functions. I know, you followed a tutorial you found online and it works, but it's old, it's outdated and in the space of a few minutes, I have just broken past it without so much as breaking a sweat.</source>
          <target state="translated">Итак, как мы можем защитить ваш священный раздел администратора и сделать его красивым и безопасным? Первое, что нужно сделать, это прекратить использовать эти действительно старые и устаревшие функции &lt;code&gt;mysql_*&lt;/code&gt; . Я знаю, что вы следовали учебному пособию, которое вы нашли в Интернете, и оно работает, но оно старое, оно устарело, и за несколько минут я только что прорвался мимо него, даже не потея.</target>
        </trans-unit>
        <trans-unit id="156ae2c1a681018477e990b03ebe020a3aacb23e" translate="yes" xml:space="preserve">
          <source>So, if you are an average PHP user and want to save yourself a ton of headaches when using native prepared statements, PDO - again - is the only choice.</source>
          <target state="translated">Итак,если вы обычный пользователь PHP и хотите сэкономить кучу головной боли при использовании нативных подготовленных выражений,PDO-опять же-это единственный выбор.</target>
        </trans-unit>
        <trans-unit id="09bd59ae9fef4f113a6fb3d96fee1aae3a9fb79f" translate="yes" xml:space="preserve">
          <source>So, in answer, THAT IS WHY YOU ARE BEING YELLED AT.</source>
          <target state="translated">Итак,в ответ,что это за то,что ты желтеешь.</target>
        </trans-unit>
        <trans-unit id="4586573c065a2c5d5186ace73cde0c4532012c55" translate="yes" xml:space="preserve">
          <source>So, instead of fighting this honest extension, I'd prefer to fight wrong practices and educate people in the right ways.</source>
          <target state="translated">Поэтому,вместо того,чтобы бороться с этим честным распространением,я предпочитаю бороться с неправильными практиками и просвещать людей правильными способами.</target>
        </trans-unit>
        <trans-unit id="977784c6079621feedaf15de1c0e69f13959d921" translate="yes" xml:space="preserve">
          <source>So, just switching to PDO or mysqli is not enough. One has to use an ORM, or a query builder, or whatever database abstraction class instead of calling raw API functions in their code.</source>
          <target state="translated">Значит,просто переключиться на PDO или mysqli недостаточно.Нужно использовать ORM,или конструктор запросов,или любой другой класс абстракции базы данных,вместо того,чтобы вызывать сырые API-функции в их коде.</target>
        </trans-unit>
        <trans-unit id="6a4c25a013fc181e44690a0c81f43ed6d49a2760" translate="yes" xml:space="preserve">
          <source>So, lets have a look at what went wrong, and why I just got into your super-admin-only-bat-cave. I took a guess and assumed that you weren't being careful with your inputs and simply passed them to the database directly. I constructed the input in a way tht would CHANGE the query that you were actually running. So, what was it supposed to be, and what did it end up being?</source>
          <target state="translated">Итак,давайте посмотрим,что пошло не так,и почему я только что попал в вашу супер-админную пещеру только для летучих мышей.Я угадал и предположил,что вы не были осторожны со своими входными данными и просто передали их в базу данных напрямую.Я построил входные данные таким образом,что они ИЗМЕНЯЮТ запрос,который вы на самом деле выполняли.Итак,что же это должно было быть,и чем это закончилось?</target>
        </trans-unit>
        <trans-unit id="419b0e23c522675ea4d8d7c937461eb95377a4fe" translate="yes" xml:space="preserve">
          <source>So, once more - it is not just raw driver should be your concern but abstraction class, useful not only for silly examples from beginner's manual but to solve whatever real-life problems.</source>
          <target state="translated">Итак,еще раз-это должен быть не просто сырой драйвер,а класс абстракции,полезный не только для глупых примеров из руководства новичка,но и для решения любых реальных проблем.</target>
        </trans-unit>
        <trans-unit id="8cf0be74cb1010c94f25e5fc839c648278844902" translate="yes" xml:space="preserve">
          <source>Source: &lt;a href=&quot;http://us2.php.net/manual/en/mysqli.overview.php&quot;&gt;MySQLi overview&lt;/a&gt;</source>
          <target state="translated">Источник: &lt;a href=&quot;http://us2.php.net/manual/en/mysqli.overview.php&quot;&gt;MySQLi обзор&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fcb447d1aaebb249a35efcda9785a596a7569ba1" translate="yes" xml:space="preserve">
          <source>Speaking of &lt;em&gt;technical&lt;/em&gt; reasons, there are only a few, extremely specific and rarely used. Most likely you will never ever use them in your life.</source>
          <target state="translated">Говоря о &lt;em&gt;технических&lt;/em&gt; причинах, их всего несколько, крайне специфичных и редко используемых. Скорее всего, вы никогда не будете использовать их в своей жизни.</target>
        </trans-unit>
        <trans-unit id="bf36b631054e4b9ebdd95cb1972bb398da13213f" translate="yes" xml:space="preserve">
          <source>Stored procedures</source>
          <target state="translated">Хранимые процедуры</target>
        </trans-unit>
        <trans-unit id="43f21f37b385b47e7aca36f912842875218a10aa" translate="yes" xml:space="preserve">
          <source>String/value handling is delegated to PDO and its parameterized statements.</source>
          <target state="translated">Обработка значений строк делегируется PDO и его параметризированным утверждениям.</target>
        </trans-unit>
        <trans-unit id="f330726eae49c3e09ec43d61637f5396a5a55745" translate="yes" xml:space="preserve">
          <source>Super! Working as expected, now lets try the actual username and password:</source>
          <target state="translated">Супер! Работает,как и ожидалось,теперь давайте попробуем настоящее имя пользователя и пароль:</target>
        </trans-unit>
        <trans-unit id="dfadaca1a30bce993f932dca13aff0957793e885" translate="yes" xml:space="preserve">
          <source>Support for Multiple Statements</source>
          <target state="translated">Поддержка множественных заявлений</target>
        </trans-unit>
        <trans-unit id="2142d72824641e7c7d357d78453232623a4fd7ff" translate="yes" xml:space="preserve">
          <source>Support for Prepared Statements</source>
          <target state="translated">Поддержка готовых заявлений</target>
        </trans-unit>
        <trans-unit id="1051e4c201c5f65414e7b143a72570669fd228ca" translate="yes" xml:space="preserve">
          <source>Support for Transactions</source>
          <target state="translated">Поддержка сделок</target>
        </trans-unit>
        <trans-unit id="aa4d81fe71bb245630f293271255fef6e35bbfad" translate="yes" xml:space="preserve">
          <source>That was commonly there to undo damage (double escaping) from the deprecated &lt;a href=&quot;http://php.net/magic_quotes&quot;&gt;&lt;code&gt;magic_quotes&lt;/code&gt;&lt;/a&gt;. Which however is &lt;a href=&quot;https://stackoverflow.com/questions/517008/how-to-turn-off-magic-quotes-on-shared-hosting&quot;&gt;best fixed centrally&lt;/a&gt;, not string by string.</source>
          <target state="translated">Обычно это было для отмены урона (двойного побега) от устаревших &lt;a href=&quot;http://php.net/magic_quotes&quot;&gt; &lt;code&gt;magic_quotes&lt;/code&gt; &lt;/a&gt; . Что, однако, &lt;a href=&quot;https://stackoverflow.com/questions/517008/how-to-turn-off-magic-quotes-on-shared-hosting&quot;&gt;лучше всего исправить по центру&lt;/a&gt; , а не по строкам.</target>
        </trans-unit>
        <trans-unit id="34467e1287edc5b797be2730e35c61969473a83f" translate="yes" xml:space="preserve">
          <source>That's the query, but when we replace the variables with the actual inputs that we used, we get the following:</source>
          <target state="translated">Это и есть запрос,но когда мы заменяем переменные на действительные входы,которые мы использовали,то получаем следующее:</target>
        </trans-unit>
        <trans-unit id="e35c0916a18283d4ea1f81a70d61efa106dd1b1f" translate="yes" xml:space="preserve">
          <source>The &quot;new&quot; password authentication method (on by default in MySQL 5.6; required in 5.7)</source>
          <target state="translated">Новый&quot; метод аутентификации с помощью пароля (по умолчанию в MySQL 5.6;требуется в 5.7).</target>
        </trans-unit>
        <trans-unit id="a8deffdde633f6dcdac49482f5db747ce9e171b6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mysql_*&lt;/code&gt; functions used to be very popular, but their use is not encouraged anymore. The documentation team is discussing the database security situation, and educating users to move away from the commonly used ext/mysql extension is part of this (check &lt;em&gt;&lt;a href=&quot;http://news.php.net/php.internals/53799&quot;&gt;php.internals: deprecating ext/mysql&lt;/a&gt;&lt;/em&gt;).</source>
          <target state="translated">&lt;code&gt;mysql_*&lt;/code&gt; функции mysql_ * были очень популярны, но их использование больше не поощряется. Команда разработчиков документации обсуждает ситуацию с безопасностью базы данных, и частью этого является обучение пользователей отходить от обычно используемого расширения ext / mysql (проверьте &lt;em&gt;&lt;a href=&quot;http://news.php.net/php.internals/53799&quot;&gt;php.internals: устарел ext / mysql&lt;/a&gt;&lt;/em&gt; ).</target>
        </trans-unit>
        <trans-unit id="d67db1d2a3f9c279e59ee7cbab7e7ad484b23610" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mysql_&lt;/code&gt; functions:</source>
          <target state="translated">&lt;code&gt;mysql_&lt;/code&gt; функции:</target>
        </trans-unit>
        <trans-unit id="8555deeb46964ebda4fb022ebe48c5e2ada84f62" translate="yes" xml:space="preserve">
          <source>The DBMS parses, compiles, and performs query optimization on the statement template, and stores the result without executing it.</source>
          <target state="translated">СУБД разбирает,компилирует и выполняет оптимизацию запросов по шаблону оператора и сохраняет результат без его выполнения.</target>
        </trans-unit>
        <trans-unit id="23a504e237cda5d5bd1d5d68ab647b0abc87ece7" translate="yes" xml:space="preserve">
          <source>The MySQL extension is the oldest of the three and was the original way that developers used to communicate with MySQL. This extension is now being &lt;a href=&quot;http://php.net/manual/en/migration55.deprecated.php&quot;&gt;deprecated&lt;/a&gt; in favor of the other &lt;a href=&quot;http://php.net/manual/en/book.mysqli.php&quot;&gt;two&lt;/a&gt;&lt;a href=&quot;http://php.net/manual/en/book.pdo.php&quot;&gt;alternatives&lt;/a&gt; because of improvements made in newer releases of both PHP and MySQL.</source>
          <target state="translated">Расширение MySQL является старейшим из трех и было оригинальным способом, который разработчики использовали для связи с MySQL. Это расширение в настоящее время считается &lt;a href=&quot;http://php.net/manual/en/migration55.deprecated.php&quot;&gt;устаревшим&lt;/a&gt; в пользу &lt;a href=&quot;http://php.net/manual/en/book.mysqli.php&quot;&gt;двух&lt;/a&gt; других &lt;a href=&quot;http://php.net/manual/en/book.pdo.php&quot;&gt;альтернатив&lt;/a&gt; из-за улучшений, сделанных в более новых выпусках как PHP, так и MySQL.</target>
        </trans-unit>
        <trans-unit id="f8a41f267bbe8e8e99d77e3f59457faa0a4e2d32" translate="yes" xml:space="preserve">
          <source>The MySQL extension:</source>
          <target state="translated">Расширение MySQL:</target>
        </trans-unit>
        <trans-unit id="21414d4d700662c909aebc645c1a9d88f9c8e575" translate="yes" xml:space="preserve">
          <source>The PDOException class &amp;para;</source>
          <target state="translated">Класс PDOException &amp;para;</target>
        </trans-unit>
        <trans-unit id="ceaa748e73e903659c37e91ec7bc481b4aba692e" translate="yes" xml:space="preserve">
          <source>The above method is only useful when you are not using variable in query. But when you need to use a variable in a query, do not ever ever try like the above and there for  &lt;a href=&quot;http://en.wikipedia.org/wiki/Prepared_statement&quot;&gt;&lt;strong&gt;prepared statement or parameterized statement&lt;/strong&gt;&lt;/a&gt; is.</source>
          <target state="translated">Вышеуказанный метод полезен только тогда, когда вы не используете переменную в запросе. Но когда вам нужно использовать переменную в запросе, никогда не пытайтесь делать то же самое, что и выше, для &lt;a href=&quot;http://en.wikipedia.org/wiki/Prepared_statement&quot;&gt;&lt;strong&gt;готового оператора или параметризованного оператора&lt;/strong&gt;&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b16db0ed6b33fd376c4271f150426eeb37d5407a" translate="yes" xml:space="preserve">
          <source>The advantage becomes more obvious for lengthier code.</source>
          <target state="translated">Преимущество становится более очевидным для более длинного кода.</target>
        </trans-unit>
        <trans-unit id="5a186859a541d2250d60b00b21cdf3c3b63312a9" translate="yes" xml:space="preserve">
          <source>The analytic and synthetic reasons were already mentioned. For newcomers there's a more significant incentive to stop using the dated mysql_ functions.</source>
          <target state="translated">Уже упоминались аналитические и синтетические причины.Для новичков более существенным стимулом является отказ от использования датированных функций mysql_.</target>
        </trans-unit>
        <trans-unit id="27bb7e6155e751876dec5eb5272f609fe02b5ef0" translate="yes" xml:space="preserve">
          <source>The article &lt;em&gt;&lt;a href=&quot;http://net.tutsplus.com/tutorials/php/pdo-vs-mysqli-which-should-you-use/&quot;&gt;PDO vs. MySQLi: Which Should You Use?&lt;/a&gt;&lt;/em&gt; by &lt;a href=&quot;http://webarto.com/&quot;&gt;&lt;strong&gt;Dejan Marjanovic&lt;/strong&gt;&lt;/a&gt; will help you to choose.</source>
          <target state="translated">Статья &lt;em&gt;&lt;a href=&quot;http://net.tutsplus.com/tutorials/php/pdo-vs-mysqli-which-should-you-use/&quot;&gt;PDO против MySQLi: что использовать?&lt;/a&gt;&lt;/em&gt; &lt;a href=&quot;http://webarto.com/&quot;&gt;&lt;strong&gt;Деян Марьянович&lt;/strong&gt;&lt;/a&gt; поможет вам выбрать.</target>
        </trans-unit>
        <trans-unit id="99a09cf05588a6ee72d21881c364b7fa6b57bb3e" translate="yes" xml:space="preserve">
          <source>The functions which are as similar to this &lt;code&gt;mysql_connect()&lt;/code&gt;, &lt;code&gt;mysql_query()&lt;/code&gt; type are the previous version PHP i.e(PHP 4) functions and now not in use .</source>
          <target state="translated">Функции, которые похожи на этот тип &lt;code&gt;mysql_connect()&lt;/code&gt; , &lt;code&gt;mysql_query()&lt;/code&gt; являются функциями предыдущей версии, то есть (PHP 4), и теперь не используются.</target>
        </trans-unit>
        <trans-unit id="4abbb603d8f2b2afd3d6309a44e29670822a32ff" translate="yes" xml:space="preserve">
          <source>The last one is an interesting point. Although mysql ext do not support &lt;em&gt;native&lt;/em&gt; prepared statements, they aren't required for the safety. We can easily fake prepared statements using manually handled placeholders (just like PDO does):</source>
          <target state="translated">Последний интересный момент. Хотя mysql ext не поддерживает &lt;em&gt;нативно&lt;/em&gt; подготовленные операторы, они не требуются для безопасности. Мы можем легко подделать подготовленные операторы, используя заполнители, обработанные вручную (как это делает PDO):</target>
        </trans-unit>
        <trans-unit id="2dada7706eedc4cc1377e36d4ff7b1cba1c73978" translate="yes" xml:space="preserve">
          <source>The major differences are that there are no more &lt;code&gt;mysql_*&lt;/code&gt; functions. It's all done via a PDO object, secondly, it is using a prepared statement. Now, what's a prepred statement you ask? It's a way to tell the database ahead of running a query, what the query is that we are going to run. In this case, we tell the database: &quot;Hi, I am going to run a select statement wanting id, userid and pass from the table users where the userid is a variable and the pass is also a variable.&quot;.</source>
          <target state="translated">Основное различие &lt;code&gt;mysql_*&lt;/code&gt; том, что больше нет функций mysql_ * . Все это делается через объект PDO, во-вторых, он использует подготовленный оператор. Теперь, какое предварительное утверждение вы спросите? Это способ сообщить базе данных перед запуском запроса, какой запрос мы собираемся запустить. В этом случае мы говорим базе данных: &amp;laquo;Привет, я собираюсь запустить оператор select с запросом идентификатора, идентификатора пользователя и пароля от пользователей таблицы, где идентификатор пользователя является переменной, а передача также является переменной&amp;raquo;.</target>
        </trans-unit>
        <trans-unit id="2dccd3b2ef63bf7cb2dcdbff4e9bf66af2258b71" translate="yes" xml:space="preserve">
          <source>The mysqli extension has a number of
  benefits, the key enhancements over
  the mysql extension being:</source>
          <target state="translated">Расширение mysqli имеет ряд преимуществ,основными из которых являются усовершенствования по сравнению с расширением mysql:</target>
        </trans-unit>
        <trans-unit id="562dc1125a1bf25b7d1d24db6381f0d3d62bbedd" translate="yes" xml:space="preserve">
          <source>The original implementation in PHP2/FI introduced it explicitly with just &quot;&lt;em&gt;quotes will be automatically escaped making it easier to pass form data directly to msql queries&lt;/em&gt;&quot;. Notably it was accidentially safe to use with &lt;a href=&quot;http://www.hughes.com.au/products/msql/&quot;&gt;mSQL&lt;/a&gt;, as that supported ASCII only.</source>
          <target state="translated">Исходная реализация в PHP2 / FI вводила это явно, просто &amp;laquo; &lt;em&gt;кавычки будут автоматически экранированы, что упростит передачу данных формы непосредственно в запросы msql&lt;/em&gt; &amp;raquo;. Примечательно, что это было безопасно для использования с &lt;a href=&quot;http://www.hughes.com.au/products/msql/&quot;&gt;mSQL&lt;/a&gt; , так как он поддерживал только ASCII.</target>
        </trans-unit>
        <trans-unit id="aebcc1312a3d5f8dc2dd1e177025cf78c72eda79" translate="yes" xml:space="preserve">
          <source>The other is to turn off prepare emulation which is enabled in the &lt;code&gt;MySQL&lt;/code&gt; driver by default, but prepare emulation should be turned off to use &lt;code&gt;PDO&lt;/code&gt; safely.</source>
          <target state="translated">Другой - отключить эмуляцию подготовки, которая по умолчанию включена в драйвере &lt;code&gt;MySQL&lt;/code&gt; , но эмуляцию подготовки следует отключить для безопасного использования &lt;code&gt;PDO&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e1647f08fd0d03cfed6027ec69a028632d0edcfe" translate="yes" xml:space="preserve">
          <source>The output is as follows:</source>
          <target state="translated">Выходные данные выглядят следующим образом:</target>
        </trans-unit>
        <trans-unit id="1c80ab0d65d86371430abcdf8ed4202036dd3c5d" translate="yes" xml:space="preserve">
          <source>The placeholder feature is provided by the real PDO behind it.</source>
          <target state="translated">Функция заполнителя обеспечивается реальными PDO,которые за ней стоят.</target>
        </trans-unit>
        <trans-unit id="b025ee4adb8cf0f65ed9aabff546b7033803e091" translate="yes" xml:space="preserve">
          <source>The results are fantastic. Lets try those username and password combinations from before again:</source>
          <target state="translated">Результаты просто фантастические.Давайте попробуем эти комбинации имен пользователей и паролей еще раз:</target>
        </trans-unit>
        <trans-unit id="6367ed4377cb731bc3493ca0a1f8fb62d7a404f7" translate="yes" xml:space="preserve">
          <source>The typical workflow of using a prepared statement is as follows (&lt;a href=&quot;http://en.wikipedia.org/wiki/Prepared_statement&quot;&gt;quoted from Wikipedia three 3 point&lt;/a&gt;):</source>
          <target state="translated">Типичный рабочий процесс использования подготовленного оператора выглядит следующим образом ( &lt;a href=&quot;http://en.wikipedia.org/wiki/Prepared_statement&quot;&gt;цитируется из Википедии три 3 пункта&lt;/a&gt; ):</target>
        </trans-unit>
        <trans-unit id="c0663df1a52266fe58480cc90e9a9f1077932a7a" translate="yes" xml:space="preserve">
          <source>The user has to enter a login and password, right?</source>
          <target state="translated">Пользователь должен ввести логин и пароль,так?</target>
        </trans-unit>
        <trans-unit id="bd441197e0d87715716a19344182973372419d2a" translate="yes" xml:space="preserve">
          <source>Then PHP3/Zend reintroduced magic_quotes for MySQL and misdocumented it. But originally it was just a &lt;a href=&quot;https://stackoverflow.com/questions/16098194/why-magic-quotes-has-been-removed-from-php-5-4&quot;&gt;convenience feature&lt;/a&gt;, not intend for security.</source>
          <target state="translated">Затем PHP3 / Zend заново ввел magic_quotes для MySQL и неправильно его документировал. Но изначально это была просто &lt;a href=&quot;https://stackoverflow.com/questions/16098194/why-magic-quotes-has-been-removed-from-php-5-4&quot;&gt;удобная функция&lt;/a&gt; , не предназначенная для безопасности.</target>
        </trans-unit>
        <trans-unit id="57c2defd4b5ec30df25974856ac6eb0286c19204" translate="yes" xml:space="preserve">
          <source>Then compare with &lt;a href=&quot;https://stackoverflow.com/a/17874410/285587&quot;&gt;crazy amount of code&lt;/a&gt; you will need with raw Mysqli prepared statements.
Note that error handling, profiling, query logging already built in and running.</source>
          <target state="translated">Затем сравните с &lt;a href=&quot;https://stackoverflow.com/a/17874410/285587&quot;&gt;безумным количеством кода, который&lt;/a&gt; вам понадобится, с необработанными инструкциями, написанными на Mysqli. Обратите внимание, что обработка ошибок, профилирование, ведение журнала запросов уже встроены и работают.</target>
        </trans-unit>
        <trans-unit id="c9c4db9de41823c261f34da4aa90c4b93945d84c" translate="yes" xml:space="preserve">
          <source>Then, in the execute statement, we pass the database an array with all the variables that it now expects.</source>
          <target state="translated">Затем,в операторе execute,мы передаем БД массив со всеми переменными,которые она теперь ожидает.</target>
        </trans-unit>
        <trans-unit id="c69679c49c5f8114f4079ae3ec807eb8cad58847" translate="yes" xml:space="preserve">
          <source>There are better, more robust and well-built alternatives, &lt;strong&gt;&lt;a href=&quot;http://php.net/pdo&quot;&gt;PDO - PHP Database Object&lt;/a&gt;&lt;/strong&gt;, which offers a complete OOP approach to database interaction, and &lt;strong&gt;&lt;a href=&quot;http://php.net/mysqli&quot;&gt;MySQLi&lt;/a&gt;&lt;/strong&gt;, which is a MySQL specific improvement.</source>
          <target state="translated">Существуют лучшие, более надежные и хорошо построенные альтернативы, &lt;strong&gt;&lt;a href=&quot;http://php.net/pdo&quot;&gt;PDO - объект базы данных PHP&lt;/a&gt;&lt;/strong&gt; , который предлагает полный подход ООП к взаимодействию с базой данных, и &lt;strong&gt;&lt;a href=&quot;http://php.net/mysqli&quot;&gt;MySQLi&lt;/a&gt;&lt;/strong&gt; , который является специфическим улучшением для MySQL.</target>
        </trans-unit>
        <trans-unit id="52a787558155f6b79392728bd50c95fa82bc40c0" translate="yes" xml:space="preserve">
          <source>There are even more choices! Read about them all in &lt;a href=&quot;http://www.php.net/manual/en/pdostatement.fetch.php&quot;&gt;&lt;code&gt;PDOStatement&lt;/code&gt; Fetch documentation.&lt;/a&gt;.</source>
          <target state="translated">Есть еще больше вариантов! Читайте о них все в &lt;a href=&quot;http://www.php.net/manual/en/pdostatement.fetch.php&quot;&gt;документации &lt;code&gt;PDOStatement&lt;/code&gt; Fetch.&lt;/a&gt; ,</target>
        </trans-unit>
        <trans-unit id="0536d09b1c2f82b31a60e587322bf4e9ae190fe2" translate="yes" xml:space="preserve">
          <source>There are many reasons, but perhaps the most important one is that those functions encourage insecure programming practices because they do not support prepared statements. Prepared statements help prevent SQL injection attacks.</source>
          <target state="translated">Есть много причин,но,пожалуй,самая важная из них заключается в том,что эти функции поощряют небезопасные методы программирования,поскольку они не поддерживают подготовленные заявления.Подготовленные заявления помогают предотвратить атаки SQL инъекций.</target>
        </trans-unit>
        <trans-unit id="b5b472b07cd013e7228dcd85aa4b24ebd1742ea3" translate="yes" xml:space="preserve">
          <source>There ought to be an &lt;strong&gt;abstraction layer&lt;/strong&gt; between them and application code, which will do all the dirty job of binding, looping, error handling, etc. inside, making application code DRY and clean. Especially for the complex cases like dynamical query building.</source>
          <target state="translated">Между ними и кодом приложения должен быть &lt;strong&gt;уровень абстракции&lt;/strong&gt; , который будет выполнять всю грязную работу по связыванию, зацикливанию, обработке ошибок и т. Д. Внутри, делая код приложения СУХИМЫМ и чистым. Особенно для сложных случаев, таких как динамическое построение запросов.</target>
        </trans-unit>
        <trans-unit id="5aa178ec91604559d6a4a1f12b3fe446f5816ce4" translate="yes" xml:space="preserve">
          <source>These &lt;code&gt;pdo_*&lt;/code&gt; wrapper functions make a coding-friendly stop-gap API. (It's pretty much what &lt;code&gt;MYSQLI&lt;/code&gt; could have been if it wasn't for the idiosyncratic function signature shift). They also expose the real PDO at most times.</source>
          <target state="translated">Эти &lt;code&gt;pdo_*&lt;/code&gt; обертки pdo_ * делают API-интерфейс для удобного программирования. (Это в значительной степени то, &lt;code&gt;MYSQLI&lt;/code&gt; мог бы быть MYSQLI , если бы не смещение сигнатур уникальной функции). Они также чаще всего выставляют настоящий PDO.</target>
        </trans-unit>
        <trans-unit id="66a2a549e1414faaaca0f781d02836464a0a76dc" translate="yes" xml:space="preserve">
          <source>These are replaced by &lt;code&gt;mysqli_connect()&lt;/code&gt;, &lt;code&gt;mysqli_query()&lt;/code&gt; similarly in the latest PHP5.</source>
          <target state="translated">Они заменены &lt;code&gt;mysqli_connect()&lt;/code&gt; , &lt;code&gt;mysqli_query()&lt;/code&gt; аналогично в последней версии PHP5.</target>
        </trans-unit>
        <trans-unit id="b9701d5279e360121f1a9236afe73ce6cdab2437" translate="yes" xml:space="preserve">
          <source>This answer is written to show just how trivial it is to bypass poorly written PHP user-validation code, how (and using what) these attacks work and how to replace the old MySQL functions with a secure prepared statement - and basically, why StackOverflow users (probably with a lot of rep) are barking at new users asking questions to improve their code.</source>
          <target state="translated">Этот ответ написан для того,чтобы показать,как тривиально обойти плохо написанный код проверки пользователей PHP,как (и используя что)эти атаки работают и как заменить старые MySQL функции безопасным подготовленным оператором-и в основном,почему пользователи StackOverflow (вероятно,с большим количеством ответов)лают на новых пользователей,задавая им вопросы по улучшению их кода.</target>
        </trans-unit>
        <trans-unit id="acf591526b7653913fa0342793a9a8eed4e6efa1" translate="yes" xml:space="preserve">
          <source>This is a classic SQL injection attack. One of the simplest for that matter. On the scale of attack vectors, this is a toddler attacking a tank - and winning.</source>
          <target state="translated">Это классическая атака SQL инъекций.Одна из самых простых в этом отношении.По масштабам векторов атаки,это младенец,атакующий танк-и побеждающий.</target>
        </trans-unit>
        <trans-unit id="53d154ecdaa8d6b0fba2af9eefdc52d17f07dcb7" translate="yes" xml:space="preserve">
          <source>This is the reason behind the error.</source>
          <target state="translated">Это и есть причина ошибки.</target>
        </trans-unit>
        <trans-unit id="6bafa12ee03b3bf471f9002286e0bb60d99c0b9e" translate="yes" xml:space="preserve">
          <source>This is why you are being yelled at when posting questions - it's because people can see that your code can be bypassed wihout even trying. Please, do use this question and answer to improve your code, to make it more secure and to use functions that are current.</source>
          <target state="translated">Вот почему на вас кричат,когда задают вопросы-это потому,что люди видят,что ваш код можно обойти,даже не пытаясь.Пожалуйста,используйте этот вопрос и ответ,чтобы улучшить свой код,сделать его более безопасным и использовать актуальные функции.</target>
        </trans-unit>
        <trans-unit id="7d8ecdcb3fa76fbbc753f992ef32e06a8691ab30" translate="yes" xml:space="preserve">
          <source>This latter issue is a problem.</source>
          <target state="translated">Этот последний вопрос является проблемой.</target>
        </trans-unit>
        <trans-unit id="b327464305947f9b5efea8f1e165dfaa4f7af138" translate="yes" xml:space="preserve">
          <source>This means that as of &lt;a href=&quot;https://www.php.net/eol.php&quot;&gt;31 Dec 2018&lt;/a&gt; it does not exist in any supported version of PHP. If you are using a version of PHP which supports it, you are using a version which doesn't get security problems fixed.</source>
          <target state="translated">Это означает, что по состоянию на &lt;a href=&quot;https://www.php.net/eol.php&quot;&gt;31 декабря 2018 года&lt;/a&gt; он не существует ни в одной поддерживаемой версии PHP. Если вы используете версию PHP, которая поддерживает его, вы используете версию, в которой не устранены проблемы безопасности.</target>
        </trans-unit>
        <trans-unit id="c5028f4b1c5e464cbdf5fbc73b406c40f8937746" translate="yes" xml:space="preserve">
          <source>This means that the PHP community is gradually dropping support for these very old functions. They are likely to not exist in a future (recent) version of PHP! Continued use of these functions may break your code in the (not so) far future.</source>
          <target state="translated">Это означает,что PHP-сообщество постепенно прекращает поддержку этих очень старых функций.Скорее всего,они не будут существовать в будущей (недавней)версии PHP! Продолжение использования этих функций может нарушить ваш код в (не так далеко)будущем.</target>
        </trans-unit>
        <trans-unit id="a9447e1e24f2f798f77e4acb808ca245ef8e28b9" translate="yes" xml:space="preserve">
          <source>This time, we get the following:</source>
          <target state="translated">На этот раз мы получим следующее:</target>
        </trans-unit>
        <trans-unit id="7b5d0b0f701ec4934ce62c2d94018de81b4de43f" translate="yes" xml:space="preserve">
          <source>Thus also allowed &lt;code&gt;:named&lt;/code&gt; placeholder lists later.</source>
          <target state="translated">Таким образом, также допускается &lt;code&gt;:named&lt;/code&gt; заполнители списки позже.</target>
        </trans-unit>
        <trans-unit id="1e3281a962e6db2e54e787f796eb7d2b1582389a" translate="yes" xml:space="preserve">
          <source>Transactions</source>
          <target state="translated">Transactions</target>
        </trans-unit>
        <trans-unit id="5ce32adc4f972e95e060d45591a7aa082f17d9f6" translate="yes" xml:space="preserve">
          <source>Unless you also introduce parameter binding or can utilize something else from the nicer API, it's a pointless switch. I hope it's portrayed simple enough to not further the discouragement to newcomers. (Education usually works better than prohibition.)</source>
          <target state="translated">Если вы также не введете привязку параметров или не сможете использовать что-то другое из более приятного API,то это бессмысленный переключатель.Надеюсь,он изображен достаточно просто,чтобы не отпугнуть новичков.(Обычно образование работает лучше,чем запрет.)</target>
        </trans-unit>
        <trans-unit id="9f6d94af323287247ddbdf1bbc2b55dbba5ca657" translate="yes" xml:space="preserve">
          <source>Use one of the &lt;a href=&quot;http://php.net/security.magicquotes.disabling&quot;&gt;userland reversal&lt;/a&gt; approaches. Then remove the &lt;code&gt;stripslashes()&lt;/code&gt; in the &lt;code&gt;sanitize&lt;/code&gt; function.</source>
          <target state="translated">Используйте один из подходов к &lt;a href=&quot;http://php.net/security.magicquotes.disabling&quot;&gt;изменению пользовательского&lt;/a&gt; пространства. Затем удалите &lt;code&gt;stripslashes()&lt;/code&gt; в функции очистки .</target>
        </trans-unit>
        <trans-unit id="d22feee0d218aca696cac86b7e4deb1dabc1af1d" translate="yes" xml:space="preserve">
          <source>User wasn't verified. Awesome.</source>
          <target state="translated">Пользователь не был проверен.Потрясающе.</target>
        </trans-unit>
        <trans-unit id="ef7051e396eea2b5e406d5540802dd68853d889b" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;http://fossil.include-once.org/upgradephp/artifact/43ab742241e5a3be43d31764dd333ba68e245360&quot;&gt;&amp;lt;&lt;strong&gt;pdo_mysql.php&lt;/strong&gt;&amp;gt;&lt;/a&gt; you can switch from the old mysql_ functions with &lt;em&gt;minimal effort&lt;/em&gt;. It adds &lt;code&gt;pdo_&lt;/code&gt; function wrappers which replace their &lt;code&gt;mysql_&lt;/code&gt; counterparts.</source>
          <target state="translated">Используя &lt;a href=&quot;http://fossil.include-once.org/upgradephp/artifact/43ab742241e5a3be43d31764dd333ba68e245360&quot;&gt;&amp;lt; &lt;strong&gt;pdo_mysql.php&lt;/strong&gt; &amp;gt;,&lt;/a&gt; вы можете переключаться со старых функций mysql_ с &lt;em&gt;минимальными усилиями&lt;/em&gt; . Это добавляет &lt;code&gt;pdo_&lt;/code&gt; функции pdo_, которые заменяют их аналоги &lt;code&gt;mysql_&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a3546de296990f00559369725f6b73e5773d07ec" translate="yes" xml:space="preserve">
          <source>Using prepared statements in &lt;code&gt;PDO&lt;/code&gt; or &lt;code&gt;mysqli&lt;/code&gt; will make it so that these sorts of programming errors are more difficult to make.</source>
          <target state="translated">Использование подготовленных операторов в &lt;code&gt;PDO&lt;/code&gt; или &lt;code&gt;mysqli&lt;/code&gt; сделает так, что такие виды ошибок программирования будут более трудными.</target>
        </trans-unit>
        <trans-unit id="486fedcd9d1e44ea49d7fea32a811becae9a5ea2" translate="yes" xml:space="preserve">
          <source>Warning: mysql_connect(): No such file or directory</source>
          <target state="translated">Предупреждение:mysql_connect():Нет такого файла или директории</target>
        </trans-unit>
        <trans-unit id="4c5244a83456f7a8a64e8871234ed5b7ddc13050" translate="yes" xml:space="preserve">
          <source>We can use MySQL functions by creating a wrapper function for each below is running code. &lt;a href=&quot;https://www.talkforweb.com.au/php/how-to-use-mysql-in-php-7-version&quot;&gt;Click here&lt;/a&gt;</source>
          <target state="translated">Мы можем использовать функции MySQL, создавая функцию-обертку для каждого ниже выполняемого кода. &lt;a href=&quot;https://www.talkforweb.com.au/php/how-to-use-mysql-in-php-7-version&quot;&gt;кликните сюда&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="75b20bd2200600dac46620c83364968245f98595" translate="yes" xml:space="preserve">
          <source>Well, not really. Lets say the user is a clever little person. Lets say the person is me.</source>
          <target state="translated">Ну,не совсем.Скажем так,пользователь-умный маленький человек.Скажем,что это я.</target>
        </trans-unit>
        <trans-unit id="7899429896ac711595aff78d7cfe787d90c838cd" translate="yes" xml:space="preserve">
          <source>Well, the answer would be as follows:</source>
          <target state="translated">Ну,ответ будет следующим:</target>
        </trans-unit>
        <trans-unit id="0fbfa99fed4d886de39ca6ae2e0a7d91af92c318" translate="yes" xml:space="preserve">
          <source>What are the technical reasons for why one shouldn't use &lt;code&gt;mysql_*&lt;/code&gt; functions? (e.g. &lt;code&gt;mysql_query()&lt;/code&gt;, &lt;code&gt;mysql_connect()&lt;/code&gt; or &lt;code&gt;mysql_real_escape_string()&lt;/code&gt;)?</source>
          <target state="translated">Каковы технические причины, по которым нельзя использовать функции &lt;code&gt;mysql_*&lt;/code&gt; ? (например, &lt;code&gt;mysql_query()&lt;/code&gt; , &lt;code&gt;mysql_connect()&lt;/code&gt; или &lt;code&gt;mysql_real_escape_string()&lt;/code&gt; )?</target>
        </trans-unit>
        <trans-unit id="cd38c24be39c82544339ccc932bdc9bf31585932" translate="yes" xml:space="preserve">
          <source>What we are doing in &lt;code&gt;mysql_*&lt;/code&gt; function is:</source>
          <target state="translated">Что мы делаем в функции &lt;code&gt;mysql_*&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="b21a3658c12dc7f9942d92330d6ba7faf54fd2f5" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;mysql_*&lt;/code&gt; functions, you have to remember to run user-supplied parameters through &lt;code&gt;mysql_real_escape_string()&lt;/code&gt;. If you forget in just one place or if you happen to escape only part of the input, your database may be subject to attack.</source>
          <target state="translated">При использовании функций &lt;code&gt;mysql_*&lt;/code&gt; вы должны не забывать запускать пользовательские параметры через &lt;code&gt;mysql_real_escape_string()&lt;/code&gt; . Если вы забыли только в одном месте или вам удалось избежать только части ввода, ваша база данных может подвергнуться атаке.</target>
        </trans-unit>
        <trans-unit id="2931a1a4cd0a0347c48feeaca13f011b624aed4e" translate="yes" xml:space="preserve">
          <source>When you go on any &lt;code&gt;mysql_*&lt;/code&gt; function manual page, you see a red box, explaining it should not be used anymore.</source>
          <target state="translated">Когда вы заходите на любую &lt;code&gt;mysql_*&lt;/code&gt; руководства по функциям mysql_ * , вы видите красное поле, объясняющее, что его больше не следует использовать.</target>
        </trans-unit>
        <trans-unit id="cf411fb39b805de367075ecc7671c209fb94fd0c" translate="yes" xml:space="preserve">
          <source>When you go to any &lt;code&gt;mysql&lt;/code&gt; function manual page, you see a red box, explaining it should not be used anymore.</source>
          <target state="translated">Когда вы переходите на любую страницу руководства по функциям &lt;code&gt;mysql&lt;/code&gt; , вы видите красное поле, объясняющее, что его больше не следует использовать.</target>
        </trans-unit>
        <trans-unit id="de52d720c2b9fc0148a79e4ac0bf6e334c6922de" translate="yes" xml:space="preserve">
          <source>When you scramble string variables into the SQL queries, it doesn't just get more intricate for you to follow. It's also extraneous effort for MySQL to segregate code and data again.</source>
          <target state="translated">Когда вы скребуете строковые переменные в SQL-запросах,это не просто становится более сложным для вас.Кроме того,MySQL прилагает дополнительные усилия для того,чтобы снова разделить код и данные.</target>
        </trans-unit>
        <trans-unit id="08e4f5d49c704cc6527ca62c9c0c5f10e94a3848" translate="yes" xml:space="preserve">
          <source>While code is being converted to &lt;code&gt;MySQLi&lt;/code&gt;/&lt;code&gt;PDO&lt;/code&gt;, &lt;code&gt;E_DEPRECATED&lt;/code&gt; errors can be suppressed by setting &lt;code&gt;error_reporting&lt;/code&gt; in &lt;strong&gt;php.ini&lt;/strong&gt; to exclude &lt;code&gt;E_DEPRECATED:&lt;/code&gt;</source>
          <target state="translated">Во время преобразования кода в &lt;code&gt;MySQLi&lt;/code&gt; / &lt;code&gt;PDO&lt;/code&gt; ошибки &lt;code&gt;E_DEPRECATED&lt;/code&gt; можно подавить, установив &lt;code&gt;error_reporting&lt;/code&gt; в &lt;strong&gt;php.ini&lt;/strong&gt; для исключения &lt;code&gt;E_DEPRECATED:&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e96fbd5b6300a2987f662d74b0a387a6eaee6777" translate="yes" xml:space="preserve">
          <source>While it qualifies for the simplest-thing-that-could-possibly-work category, it's also still very experimental code. I just wrote it over the weekend. There's a plethora of alternatives however. Just google for &lt;a href=&quot;https://www.google.de/search?client=stackoverflow&amp;amp;q=PHP+database+abstraction&quot;&gt;PHP database abstraction&lt;/a&gt; and browse a little. There always have been and will be lots of excellent libraries for such tasks.</source>
          <target state="translated">Несмотря на то, что он подходит для категории &amp;laquo;самая простая вещь, которая может быть возможна&amp;raquo;, он также все еще очень экспериментальный код. Я просто написал это на выходных. Однако существует множество альтернатив. Просто Google для &lt;a href=&quot;https://www.google.de/search?client=stackoverflow&amp;amp;q=PHP+database+abstraction&quot;&gt;PHP абстракции базы данных&lt;/a&gt; и немного просмотрите. Для таких задач всегда было и будет много отличных библиотек.</target>
        </trans-unit>
        <trans-unit id="3db062dc13c427b5833ae038cf2841371c4940cd" translate="yes" xml:space="preserve">
          <source>While this answer stresses that you should care about the readability advantages of dropping &lt;s&gt;&lt;code&gt;mysql_&lt;/code&gt;&lt;/s&gt;. There's occasionally also a performance advantage (repeated INSERTs with just differing values) due to this visible and technical data/code separation.</source>
          <target state="translated">Хотя в этом ответе подчеркивается, что вы должны заботиться о преимуществах читабельности отбрасывания &lt;s&gt; &lt;code&gt;mysql_&lt;/code&gt; &lt;/s&gt; . Из-за этого видимого и технического разделения данных и кода иногда появляется преимущество в производительности (повторяющиеся вставки с просто отличающимися значениями).</target>
        </trans-unit>
        <trans-unit id="21e2caea4476d26af34541ca7c909c7ff2fa4a7f" translate="yes" xml:space="preserve">
          <source>Why</source>
          <target state="translated">Why</target>
        </trans-unit>
        <trans-unit id="3ef9f79b5eb449f72b3fdf90c2c98ca4727dbf72" translate="yes" xml:space="preserve">
          <source>Why should I use something else even if they work on my site?</source>
          <target state="translated">Почему я должен использовать что-то другое,даже если они работают на моем сайте?</target>
        </trans-unit>
        <trans-unit id="bef272d0089010f98f10750eee469e97be3484f5" translate="yes" xml:space="preserve">
          <source>Why shouldn't I use mysql_* functions in PHP</source>
          <target state="translated">Почему я не должен использовать функции mysql_*в PHP.</target>
        </trans-unit>
        <trans-unit id="4ba7de6b07d2790dbe183ff8860e4b3a376efb27" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;?&lt;/code&gt; placeholders applied you don't have to bother with that:</source>
          <target state="translated">С &lt;code&gt;?&lt;/code&gt; заполнители подали заявку, вам не нужно беспокоиться об этом:</target>
        </trans-unit>
        <trans-unit id="1b521949ba1a0d81fe7f7a22ca009f139258af49" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;PDO&lt;/code&gt;: All you need to do is create a new &lt;code&gt;PDO&lt;/code&gt; object. The constructor accepts parameters for specifying the database source &lt;code&gt;PDO&lt;/code&gt;'s constructor mostly takes four parameters which are &lt;code&gt;DSN&lt;/code&gt; (data source name) and  optionally &lt;code&gt;username&lt;/code&gt;, &lt;code&gt;password&lt;/code&gt;.</source>
          <target state="translated">С &lt;code&gt;PDO&lt;/code&gt; : все, что вам нужно сделать, это создать новый объект &lt;code&gt;PDO&lt;/code&gt; . Конструктор принимает параметры для указания источника базы данных. Конструктор &lt;code&gt;PDO&lt;/code&gt; в основном принимает четыре параметра: &lt;code&gt;DSN&lt;/code&gt; (имя источника данных) и, необязательно, &lt;code&gt;username&lt;/code&gt; , &lt;code&gt;password&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e432386262217c200274bffa28234079d822668e" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;mysql_*&lt;/code&gt; function or we can say it the old way (deprecated in PHP 5.5 and above)</source>
          <target state="translated">С &lt;code&gt;mysql_*&lt;/code&gt; или мы можем сказать это по-старому (устарело в PHP 5.5 и выше)</target>
        </trans-unit>
        <trans-unit id="aa425a4526ed951fbc2faa2bf53cf3ac2eedcb7b" translate="yes" xml:space="preserve">
          <source>With bound parameters you separate SQL code and SQL-context values in your PHP code. But it doesn't get shuffled up again behind the scenes (except with PDO::EMULATE_PREPARES). Your database receives the unvaried SQL commands and 1:1 variable values.</source>
          <target state="translated">С привязанными параметрами вы разделяете SQL-код и SQL-контекстные значения в PHP-коде.Но он не перетасовывается снова за кулисами (за исключением PDO::EMULATE_PREPARES).Ваша БД получает неизмененные SQL команды и значения переменных 1:1.</target>
        </trans-unit>
        <trans-unit id="e7b9c34542bc7220d2b9d0c79dbfc014575aed6b" translate="yes" xml:space="preserve">
          <source>With that done, we can move to our PHP code.</source>
          <target state="translated">Сделав это,мы можем перейти к нашему PHP-коду.</target>
        </trans-unit>
        <trans-unit id="bd1fd1c6043beb37d33d7ef7c193233e05a2152e" translate="yes" xml:space="preserve">
          <source>You can also bind using an execute array as well:</source>
          <target state="translated">Вы также можете выполнить привязку с помощью массива execute:</target>
        </trans-unit>
        <trans-unit id="39834359a3e108415bb98b0c8863a7cd433c0634" translate="yes" xml:space="preserve">
          <source>You can also pass in several driver options as an array to the fourth parameter. I recommend passing the parameter which puts &lt;code&gt;PDO&lt;/code&gt; into exception mode. Because some &lt;code&gt;PDO&lt;/code&gt; drivers don't support native prepared statements, so &lt;code&gt;PDO&lt;/code&gt; performs emulation of the prepare. It also lets you manually enable this emulation. To use the native server-side prepared statements, you should explicitly set it &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">Вы также можете передать несколько параметров драйвера в виде массива к четвертому параметру. Я рекомендую передать параметр, который переводит &lt;code&gt;PDO&lt;/code&gt; в режим исключения. Поскольку некоторые драйверы &lt;code&gt;PDO&lt;/code&gt; не поддерживают собственные подготовленные операторы, &lt;code&gt;PDO&lt;/code&gt; выполняет эмуляцию подготовки. Это также позволяет вам вручную включить эту эмуляцию. Чтобы использовать встроенные операторы, подготовленные на стороне сервера, вы должны явно установить значение &lt;code&gt;false&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0106d16cdb27ff2ec30c1b900ece093440a823c3" translate="yes" xml:space="preserve">
          <source>You can hardly find an example for PDO to handle such practical case.</source>
          <target state="translated">Едва ли можно найти пример для PDO,чтобы справиться с таким практическим делом.</target>
        </trans-unit>
        <trans-unit id="193b814af13365eaaf93b92758d562e11bdc9a6e" translate="yes" xml:space="preserve">
          <source>You can use a prepared statement by including placeholders in your SQL. There are basically three ones without placeholders (don't try this with variable its above one), one with unnamed placeholders, and one with named placeholders.</source>
          <target state="translated">Вы можете использовать подготовленные операторы,включив в свой SQL держатели объявлений.В основном есть три плейсхолдера без плейсхолдеров (не пытайтесь сделать это с переменной выше одного),один с безымянными плейсхолдерами,и один с именованными плейсхолдерами.</target>
        </trans-unit>
        <trans-unit id="9f8aaea6ff6d99acc02af021cf0de60526c70b07" translate="yes" xml:space="preserve">
          <source>You do not have to handle with &lt;code&gt;try&lt;/code&gt;-&lt;code&gt;catch&lt;/code&gt; right now. You can catch it at any time appropriate, but I strongly recommend you to use &lt;code&gt;try&lt;/code&gt;-&lt;code&gt;catch&lt;/code&gt;. Also it may make more sense to catch it at outside the function that calls the &lt;code&gt;PDO&lt;/code&gt; stuff:</source>
          <target state="translated">Вы не должны справляться с &lt;code&gt;try&lt;/code&gt; - &lt;code&gt;catch&lt;/code&gt; прямо сейчас. Вы можете поймать его в любое удобное время, но я настоятельно рекомендую вам использовать &lt;code&gt;try&lt;/code&gt; - &lt;code&gt;catch&lt;/code&gt; . Также может иметь смысл поймать его вне функции, вызывающей &lt;code&gt;PDO&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="f6ec43a805132e214cc4951849805b992f1dca6d" translate="yes" xml:space="preserve">
          <source>You just need a less unwieldy API.</source>
          <target state="translated">Тебе просто нужен менее громоздкий API.</target>
        </trans-unit>
        <trans-unit id="83c916251fa57138befaf512e453b91c66f1222f" translate="yes" xml:space="preserve">
          <source>You may have to keep the rest of your &lt;code&gt;sanitize()&lt;/code&gt; function for now if your database and application flow expect HTML-context-safe strings. Add a comment that it applies only HTML escaping henceforth.</source>
          <target state="translated">Возможно, вам придется сохранить оставшуюся часть функции &lt;code&gt;sanitize()&lt;/code&gt; если ваша база данных и поток приложений ожидают HTML-контекстно-безопасные строки. Добавьте комментарий, что отныне он применяет только HTML.</target>
        </trans-unit>
        <trans-unit id="109ef7c7ad471c0fd553af6c791c965eb0053415" translate="yes" xml:space="preserve">
          <source>You'll get more helpful warnings in most cases than PDO or mysql_ usually provide after failed queries.</source>
          <target state="translated">В большинстве случаев вы получите более полезные предупреждения,чем PDO или mysql_,обычно выдаваемые после неудачных запросов.</target>
        </trans-unit>
        <trans-unit id="00c17ebf04ff3d123b5bf045615793029cdab7eb" translate="yes" xml:space="preserve">
          <source>Your code is &lt;em&gt;using&lt;/em&gt; PDO.</source>
          <target state="translated">Ваш код &lt;em&gt;использует&lt;/em&gt; PDO.</target>
        </trans-unit>
        <trans-unit id="114e82ddc86b988c9f233dd5f847ff571f7ead99" translate="yes" xml:space="preserve">
          <source>Your code will work alike and still mostly look the same:</source>
          <target state="translated">Ваш код будет работать одинаково и в основном выглядеть одинаково:</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">and</target>
        </trans-unit>
        <trans-unit id="09e7d790f3ab05e4f56ffe51297bfcdde73f15bf" translate="yes" xml:space="preserve">
          <source>and submit it.</source>
          <target state="translated">и представить его.</target>
        </trans-unit>
        <trans-unit id="12328e72903e2254dcef3aa99b38ab6b1480db8b" translate="yes" xml:space="preserve">
          <source>are out of date - they're not maintained any more</source>
          <target state="translated">устарели-они больше не обслуживаются.</target>
        </trans-unit>
        <trans-unit id="ed3059ee362c75dcd7469e8cfbf286738600b576" translate="yes" xml:space="preserve">
          <source>being an average PHP user, most likely your idea of using these functions is error-prone and wrong. Just because of all these numerous tutorials and manuals which teach you the wrong way. Not the functions themselves - I have to emphasize it - but the way they are used.</source>
          <target state="translated">Будучи обычным пользователем PHP,скорее всего,ваша идея использования этих функций предрасположена к ошибкам и ошибочна.Просто из-за всех этих многочисленных учебников и руководств,которые учат вас неправильному пути.Не сами функции-я должен это подчеркнуть-а то,как они используются.</target>
        </trans-unit>
        <trans-unit id="7a880ef5359c5138ea32e24d56e7ada875ea4f77" translate="yes" xml:space="preserve">
          <source>don't allow you to move easily to another database backend</source>
          <target state="translated">не позволяют легко переходить на другой бэкэнд базы данных.</target>
        </trans-unit>
        <trans-unit id="830033092d1fd68deec56e78e5679b5bb240badd" translate="yes" xml:space="preserve">
          <source>don't support prepared statements, hence</source>
          <target state="translated">не поддерживают подготовленные заявления,следовательно</target>
        </trans-unit>
        <trans-unit id="2935b5bb29398649ebd070be72ec96b9e5d1dcad" translate="yes" xml:space="preserve">
          <source>encourage programmers to use concatenation to build queries, leading to SQL injection vulnerabilities</source>
          <target state="translated">поощрять программистов использовать конкатеннацию для построения запросов,приводящую к уязвимостям SQL-инъекции</target>
        </trans-unit>
        <trans-unit id="acc54e219ffe07f00fcf43d7c700c28aea05aca4" translate="yes" xml:space="preserve">
          <source>further use of these functions with modern PHP versions will raise deprecated-level notices. They simply can be turned off.</source>
          <target state="translated">Дальнейшее использование этих функций в современных версиях PHP увеличит количество уведомлений устаревшего уровня.Их просто можно отключить.</target>
        </trans-unit>
        <trans-unit id="d815f35640c25abe234d7b810ff746628e851f0e" translate="yes" xml:space="preserve">
          <source>in a distant future, they can be possibly removed from the default PHP build. Not a big deal too, as mydsql ext will be moved into PECL and every hoster will be happy to compile PHP with it, as they don't want to lose clients whose sites were working for decades.</source>
          <target state="translated">в далеком будущем они могут быть удалены из сборки PHP по умолчанию.Ничего страшного,так как mydsql ext будет перемещен в PECL и каждый хостер будет рад скомпилировать PHP с ним,так как не хочет потерять клиентов,чьи сайты работали десятилетиями.</target>
        </trans-unit>
        <trans-unit id="7f76e98f72dce710ff68c2850ea89b8fb65a8322" translate="yes" xml:space="preserve">
          <source>non-blocking, asynchronous queries</source>
          <target state="translated">неблокирующие,асинхронные запросы</target>
        </trans-unit>
        <trans-unit id="de7c9165c22b2bbc30bc3ecad1c9e6bf4b9c7c6f" translate="yes" xml:space="preserve">
          <source>stored procedures returning multiple resultsets</source>
          <target state="translated">хранимые процедуры с возвратом множества результатов</target>
        </trans-unit>
        <trans-unit id="95b2ac54f95972248a7b13860ea1d8810f52eeb0" translate="yes" xml:space="preserve">
          <source>strong resistance from Stackoverflow community. Еverytime you mention these honest functions, you being told that they are under strict taboo.</source>
          <target state="translated">сильное сопротивление со стороны сообщества Stackoverflow.Каждый раз,когда вы упоминаете эти честные функции,вам говорят,что они находятся под строгим табу.</target>
        </trans-unit>
        <trans-unit id="4ca2ac0512b37905e3e07228b035c03f882fec79" translate="yes" xml:space="preserve">
          <source>the list goes on ...</source>
          <target state="translated">список продолжается...</target>
        </trans-unit>
        <trans-unit id="2eb74edb23d3b49834fb5098164392d5ce9f9a09" translate="yes" xml:space="preserve">
          <source>unlike mysqli, PDO can always return query result in a simple usual array, while mysqli can do it only on mysqlnd installations.</source>
          <target state="translated">В отличие от mysqli,PDO всегда может вернуть результат запроса в простом обычном массиве,в то время как mysqli может сделать это только при установке mysqlnd.</target>
        </trans-unit>
        <trans-unit id="aa4f5271f5951ab6344d7de045285abcfe2bf002" translate="yes" xml:space="preserve">
          <source>unlike mysqli, PDO can bind placeholders &lt;em&gt;by value&lt;/em&gt;, which makes dynamically built queries feasible without several screens of quite messy code.</source>
          <target state="translated">в отличие от mysqli, PDO может связывать заполнители &lt;em&gt;по значению&lt;/em&gt; , что делает динамически построенные запросы выполнимыми без нескольких экранов довольно грязного кода.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
