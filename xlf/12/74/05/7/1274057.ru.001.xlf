<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://stackoverflow.com/questions/1274057">
    <body>
      <group id="1274057">
        <trans-unit id="1b1b1894ca2eb1b577deb9d1c135b98a8bea6403" translate="yes" xml:space="preserve">
          <source>(Under Linux), I wanted to use the posts here suggesting the &lt;code&gt;ls-files --ignored --exclude-standard | xargs git rm -r --cached&lt;/code&gt; approach.  However, (some of) the files to be removed had an embedded newline/LF/&lt;code&gt;\n&lt;/code&gt; in their names.  Neither of the solutions:</source>
          <target state="translated">(Под Linux) я хотел использовать посты, предлагающие &lt;code&gt;ls-files --ignored --exclude-standard | xargs git rm -r --cached&lt;/code&gt; xargs git rm -r - кэшированный подход. Тем не менее, (некоторые из) файлов, которые должны быть удалены, имеют встроенную новую строку / LF / &lt;code&gt;\n&lt;/code&gt; в своих именах. Ни одно из решений:</target>
        </trans-unit>
        <trans-unit id="e165ff5a12e79393f418cbab5ffb6044b4b14192" translate="yes" xml:space="preserve">
          <source>1. You want to untrack a lot of files, or</source>
          <target state="translated">1.Ты хочешь распутать много файлов,или</target>
        </trans-unit>
        <trans-unit id="7291077bbcfea136ea78ae06fee8fb069775f45a" translate="yes" xml:space="preserve">
          <source>1.&lt;strong&gt;remove&lt;/strong&gt; the mistakenly added files &lt;strong&gt;from the directory/storage&lt;/strong&gt;. You can use &quot;rm -r&quot;(for linux) command or delete them by browsing the directories. Or move them to another location on your PC.[You maybe need to close the IDE if running for &lt;strong&gt;moving/removing&lt;/strong&gt;]</source>
          <target state="translated">1. &lt;strong&gt;удалите&lt;/strong&gt; ошибочно добавленные файлы &lt;strong&gt;из каталога / хранилища&lt;/strong&gt; . Вы можете использовать команду &amp;laquo;rm -r&amp;raquo; (для linux) или удалить их, просматривая каталоги. Или переместите их в другое место на вашем ПК. [Возможно, вам придется закрыть IDE, если вы хотите &lt;strong&gt;переместить / удалить&lt;/strong&gt; ]</target>
        </trans-unit>
        <trans-unit id="d29051284b7186e88c71b70107bdfe4f554cc6df" translate="yes" xml:space="preserve">
          <source>2. You updated your gitignore file</source>
          <target state="translated">2.Вы обновили свой файл gitignore</target>
        </trans-unit>
        <trans-unit id="3eee398533d29dfa830054675fbecc16f086d5fd" translate="yes" xml:space="preserve">
          <source>2.add the files / directories to &lt;code&gt;gitignore&lt;/code&gt; file now and save it.</source>
          <target state="translated">2. добавьте файлы / каталоги в файл &lt;code&gt;gitignore&lt;/code&gt; и сохраните его.</target>
        </trans-unit>
        <trans-unit id="67d7bf6b04b2072f859546335ca89f354bd6d7ad" translate="yes" xml:space="preserve">
          <source>3.now &lt;strong&gt;remove&lt;/strong&gt; them from &lt;strong&gt;git cache&lt;/strong&gt; by using these commands (if there are more than one directory, remove them one by one by repeatedly issuing this command)</source>
          <target state="translated">3. &lt;strong&gt;удалите&lt;/strong&gt; их из &lt;strong&gt;кэша git&lt;/strong&gt; с помощью этих команд (если существует несколько каталогов, удалите их одну за другой, повторно выполнив эту команду)</target>
        </trans-unit>
        <trans-unit id="3ea998bdf09e60d9d8abd1f7b841f09d1336d5a1" translate="yes" xml:space="preserve">
          <source>4.now &lt;strong&gt;do&lt;/strong&gt; a &lt;strong&gt;commit and push&lt;/strong&gt;, use these commands. This will &lt;em&gt;remove those files from git remote&lt;/em&gt; and make git &lt;em&gt;stop tracking&lt;/em&gt; those files.</source>
          <target state="translated">4. Теперь &lt;strong&gt;сделайте&lt;/strong&gt; &lt;strong&gt;коммит и нажмите&lt;/strong&gt; , используйте эти команды. Это &lt;em&gt;удалит эти файлы из git remote&lt;/em&gt; и заставит git &lt;em&gt;перестать отслеживать&lt;/em&gt; эти файлы.</target>
        </trans-unit>
        <trans-unit id="17ceece8d84cea60549ab352bf79b07ec65dbb55" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://fallengamer.livejournal.com/93321.html&quot;&gt;git assume-unchanged vs skip-worktree&lt;/a&gt;
 and &lt;a href=&quot;http://blog.stephan-partzsch.de/how-to-ignore-changes-in-tracked-files-with-git/&quot;&gt;How to ignore changes in tracked files with Git&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://fallengamer.livejournal.com/93321.html&quot;&gt;git предположить, что без изменений vs skip-worktree&lt;/a&gt; и &lt;a href=&quot;http://blog.stephan-partzsch.de/how-to-ignore-changes-in-tracked-files-with-git/&quot;&gt;как игнорировать изменения в отслеживаемых файлах с помощью Git&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="78e15ae328e1a2411f65d28cc06b7824a162f954" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://git-scm.com/docs/git-rm&quot;&gt;rm&lt;/a&gt; is the remove command</source>
          <target state="translated">&lt;a href=&quot;https://git-scm.com/docs/git-rm&quot;&gt;rm&lt;/a&gt; это команда удаления</target>
        </trans-unit>
        <trans-unit id="78fa9ca23f190aad15123aa1d43278ef66819081" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.gitignore&lt;/code&gt; will prevent untracked files from being added (without an &lt;code&gt;add -f&lt;/code&gt;) to the set of files tracked by git, however git will continue to track any files that are already being tracked.</source>
          <target state="translated">&lt;code&gt;.gitignore&lt;/code&gt; предотвратит добавление неотслеживаемых файлов (без &lt;code&gt;add -f&lt;/code&gt; ) к набору файлов, отслеживаемых git, однако git продолжит отслеживать любые файлы, которые уже отслеживаются.</target>
        </trans-unit>
        <trans-unit id="b026808a99fb865ebb4e469dc20949169d8d3ebb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git add .&lt;/code&gt; &amp;ndash; All files will be added back in, except those in &lt;code&gt;.gitignore&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;git add .&lt;/code&gt; - Все файлы будут добавлены обратно, кроме тех, что в &lt;code&gt;.gitignore&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cefd39b5696f3a5f3d24162aa70995ec62aae245" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git rm -r --cached .&lt;/code&gt; &amp;ndash; Remove all tracked files, including wanted and unwanted. Your code will be safe as long as you have saved locally.</source>
          <target state="translated">&lt;code&gt;git rm -r --cached .&lt;/code&gt; - Удалите все отслеживаемые файлы, включая нужные и нежелательные. Ваш код будет в безопасности, пока вы сохраняете локально.</target>
        </trans-unit>
        <trans-unit id="83a9f5eece9214779a020dba22cb30bd64224718" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&amp;ndash;cached&lt;/strong&gt; will only remove files from the index. Your files will still be there.</source>
          <target state="translated">&lt;strong&gt;&amp;ndash;Cached&lt;/strong&gt; удалит только файлы из индекса. Ваши файлы все еще будут там.</target>
        </trans-unit>
        <trans-unit id="9e0c75fb491e1244c9b2b4f6a21f09d08b9a34ad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;-r&lt;/strong&gt; will allow recursive removal</source>
          <target state="translated">&lt;strong&gt;-r&lt;/strong&gt; позволит рекурсивное удаление</target>
        </trans-unit>
        <trans-unit id="297d9ab2be574ee69d4645675e8640e0fd945953" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;First:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;First:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="77360b0eda618b65d4f5b9ac454d8549ce9b33ff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This solution is actually independent on &lt;code&gt;.gitignore&lt;/code&gt; as gitignore is only for untracked files.</source>
          <target state="translated">&lt;strong&gt;Примечание.&lt;/strong&gt; Это решение фактически не зависит от &lt;code&gt;.gitignore&lt;/code&gt; , поскольку gitignore предназначен только для неотслеживаемых файлов.</target>
        </trans-unit>
        <trans-unit id="3c6108204e2f399b187def4c0bd951a6d5898341" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Source link:&lt;/strong&gt;&lt;a href=&quot;http://www.codeblocq.com/2016/01/Untrack-files-already-added-to-git-repository-based-on-gitignore/&quot;&gt;http://www.codeblocq.com/2016/01/Untrack-files-already-added-to-git-repository-based-on-gitignore/&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;Ссылка на источник:&lt;/strong&gt; &lt;a href=&quot;http://www.codeblocq.com/2016/01/Untrack-files-already-added-to-git-repository-based-on-gitignore/&quot;&gt;http://www.codeblocq.com/2016/01/Untrack-files-already-added-to-git-repository-based-on-gitignore/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="eb20ad117f5ff375c73839d2b25fd98bfdfb7835" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Then:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Then:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0bd7c18fe821283d0a4d492412ca53a9045e75db" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This is no longer an issue in the latest git&lt;/strong&gt; (v2.17.1 at the time of writing).</source>
          <target state="translated">&lt;strong&gt;Это больше не проблема в последнем git&lt;/strong&gt; (v2.17.1 на момент написания).</target>
        </trans-unit>
        <trans-unit id="9a6beca2c5a4d325c54a1e8c74ed539c6d15f6f0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;WARNING: While this will not remove the physical file from your local, it will remove the files from other developers machines on next &lt;code&gt;git pull&lt;/code&gt;.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ВНИМАНИЕ: Хотя это не удалит физический файл из вашего локального, он будет удалять файлы с машин других разработчиков при следующем &lt;code&gt;git pull&lt;/code&gt; .&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="df8624410ba32bf182a54a6f8f84d790e9343215" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;WARNING&lt;/strong&gt;: this will delete the file from your entire history</source>
          <target state="translated">&lt;strong&gt;ВНИМАНИЕ&lt;/strong&gt; : это удалит файл из всей вашей истории</target>
        </trans-unit>
        <trans-unit id="1658da8ba77a3841c3a93544fd41a158b4742abf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;edit:&lt;/strong&gt; Since this answer was posted, a new option has been created and that should be prefered.  You should use &lt;strong&gt;&lt;code&gt;--skip-worktree&lt;/code&gt;&lt;/strong&gt; which is for modified tracked files that the user don't want to commit anymore and keep &lt;code&gt;--assume-unchanged&lt;/code&gt; for performance to prevent git to check status of big tracked files. See &lt;a href=&quot;https://stackoverflow.com/a/13631525/717372&quot;&gt;https://stackoverflow.com/a/13631525/717372&lt;/a&gt; for more details...</source>
          <target state="translated">&lt;strong&gt;изменить: так&lt;/strong&gt; как этот ответ был опубликован, новая опция была создана, и это должно быть предпочтительным. Вы должны использовать &lt;strong&gt; &lt;code&gt;--skip-worktree&lt;/code&gt; ,&lt;/strong&gt; который предназначен для измененных отслеживаемых файлов, которые пользователь больше не хочет фиксировать, и сохраняет &lt;code&gt;--assume-unchanged&lt;/code&gt; для повышения производительности, чтобы git не проверял состояние больших отслеживаемых файлов. См. &lt;a href=&quot;https://stackoverflow.com/a/13631525/717372&quot;&gt;Https://stackoverflow.com/a/13631525/717372&lt;/a&gt; для получения дополнительной информации ...</target>
        </trans-unit>
        <trans-unit id="21eb2ac0cdcc1bc65e7e9901f8bd153ae5987665" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;git update-index&lt;/strong&gt; does the job for me:</source>
          <target state="translated">&lt;strong&gt;git update-index&lt;/strong&gt; делает всю работу за меня:</target>
        </trans-unit>
        <trans-unit id="7b7d160b9ed59263729d1515ccfa762f8c20cadf" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;1&lt;/sup&gt; Because &lt;code&gt;/.git/info/exclude&lt;/code&gt; can be applied to all historical commits using the instructions above, perhaps details about getting a &lt;code&gt;.gitignore&lt;/code&gt; file &lt;em&gt;into&lt;/em&gt; the historical commit(s) that need it is beyond the scope of this answer.  I wanted a proper &lt;code&gt;.gitignore&lt;/code&gt; to be in the root commit, as if it was the first thing I did.  Others may not care since &lt;code&gt;/.git/info/exclude&lt;/code&gt; can accomplish the same thing regardless where the &lt;code&gt;.gitignore&lt;/code&gt; exists in the commit history, and clearly re-writing history is a &lt;strong&gt;very&lt;/strong&gt; touchy subject, even when aware of the &lt;a href=&quot;https://stackoverflow.com/q/1491001&quot;&gt;ramifications&lt;/a&gt;.</source>
          <target state="translated">&lt;sup&gt;1&lt;/sup&gt; Поскольку &lt;code&gt;/.git/info/exclude&lt;/code&gt; можно применять ко всем историческим коммитам, используя приведенные выше инструкции, возможно, подробности о получении файла &lt;code&gt;.gitignore&lt;/code&gt; &lt;em&gt;в&lt;/em&gt; исторические коммиты, &lt;em&gt;в которых&lt;/em&gt; это необходимо, выходят за рамки этого ответа. Я хотел, чтобы правильный &lt;code&gt;.gitignore&lt;/code&gt; был в корневом коммите , как будто это было первое, что я сделал. Другие могут не заботиться о том, что &lt;code&gt;/.git/info/exclude&lt;/code&gt; может выполнить одно и то же, независимо от того, где в &lt;code&gt;.gitignore&lt;/code&gt; существует .gitignore , и, очевидно, переписывание истории - &lt;strong&gt;очень&lt;/strong&gt; деликатный вопрос, даже когда известно о &lt;a href=&quot;https://stackoverflow.com/q/1491001&quot;&gt;последствиях&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="8b6da13045058d13d3e3a649a46432a4e053b78f" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;2&lt;/sup&gt; Enforcing git ignore behavior after-the-fact by committing the results of a standalone &lt;code&gt;git rm --cached&lt;/code&gt; command may result in newly-ignored file &lt;strong&gt;deletion&lt;/strong&gt; in future pulls from the force-pushed remote. The &lt;code&gt;--prune-empty&lt;/code&gt; flag in the following &lt;code&gt;git filter-branch&lt;/code&gt; command avoids this problem by automatically removing the previous &quot;delete all ignored files&quot; index-only commit.  Re-writing git history also changes commit hashes, which will &lt;a href=&quot;https://stackoverflow.com/q/1491001&quot;&gt;wreak havoc&lt;/a&gt; on future pulls from public/shared/collaborative repos.  Please understand the &lt;a href=&quot;https://stackoverflow.com/q/1491001&quot;&gt;ramifications&lt;/a&gt; fully before doing this to such a repo. &lt;a href=&quot;https://help.github.com/en/articles/removing-sensitive-data-from-a-repository&quot;&gt;This GitHub guide&lt;/a&gt; specifies the following:</source>
          <target state="translated">&lt;sup&gt;2&lt;/sup&gt; Применение принудительного игнорирования поведения git после &lt;code&gt;git rm --cached&lt;/code&gt; результатов автономной команды git rm --cached может привести к &lt;strong&gt;удалению&lt;/strong&gt; вновь игнорируемого файла при будущих извлечениях с удаленного принудительного нажатия. Флаг &lt;code&gt;--prune-empty&lt;/code&gt; в следующей команде &lt;code&gt;git filter-branch&lt;/code&gt; позволяет избежать этой проблемы, автоматически удаляя предыдущую фиксацию только для индекса &amp;laquo;удалить все игнорируемые файлы&amp;raquo;. Переписывание истории git также меняет хэши коммитов, что приведет к &lt;a href=&quot;https://stackoverflow.com/q/1491001&quot;&gt;хаосу&lt;/a&gt; в будущих извлечениях из публичных / общих / совместных репозиториев. Пожалуйста, поймите все &lt;a href=&quot;https://stackoverflow.com/q/1491001&quot;&gt;последствия,&lt;/a&gt; прежде чем делать это в таком репо. &lt;a href=&quot;https://help.github.com/en/articles/removing-sensitive-data-from-a-repository&quot;&gt;В этом руководстве GitHub&lt;/a&gt; указано следующее:</target>
        </trans-unit>
        <trans-unit id="35bcd509556e93a5b4f240c0aaa275f71d83fd11" translate="yes" xml:space="preserve">
          <source>All methods of enforcing git ignore behavior after-the-fact effectively re-write history and thus have &lt;a href=&quot;https://stackoverflow.com/q/1491001&quot;&gt;significant ramifications&lt;/a&gt; for any public/shared/collaborative repos that might be pulled after this process. &lt;sup&gt;2&lt;/sup&gt;</source>
          <target state="translated">Все методы принудительного применения git игнорируют поведение после факта, эффективно переписывают историю и, следовательно, имеют &lt;a href=&quot;https://stackoverflow.com/q/1491001&quot;&gt;значительные последствия&lt;/a&gt; для любых публичных / общих / совместных репозиториев, которые могут быть получены после этого процесса. &lt;sup&gt;2&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="7e9e185f8553a03fd2bb4775718d5197931af7f1" translate="yes" xml:space="preserve">
          <source>Also, the comments/&lt;a href=&quot;https://stackoverflow.com/posts/57454176/revisions&quot;&gt;revision history&lt;/a&gt; of &lt;a href=&quot;https://stackoverflow.com/a/57454176&quot;&gt;this answer&lt;/a&gt; (&lt;a href=&quot;https://stackoverflow.com/posts/57418769/revisions&quot;&gt;and revision history&lt;/a&gt; of &lt;a href=&quot;https://stackoverflow.com/posts/57418769&quot;&gt;this question&lt;/a&gt;) may be useful/enlightening.</source>
          <target state="translated">Кроме того, комментарии / &lt;a href=&quot;https://stackoverflow.com/posts/57454176/revisions&quot;&gt;история&lt;/a&gt; изменений &lt;a href=&quot;https://stackoverflow.com/a/57454176&quot;&gt;этого ответа&lt;/a&gt; ( &lt;a href=&quot;https://stackoverflow.com/posts/57418769/revisions&quot;&gt;и история&lt;/a&gt; изменений &lt;a href=&quot;https://stackoverflow.com/posts/57418769&quot;&gt;этого вопроса&lt;/a&gt; ) могут быть полезными / поучительными.</target>
        </trans-unit>
        <trans-unit id="f1837dc932cb205db53c46200c2d6db222867832" translate="yes" xml:space="preserve">
          <source>Alternative solutions that &lt;strong&gt;do not&lt;/strong&gt; affect the remote repo are &lt;code&gt;git update-index --assume-unchanged &amp;lt;/path/file&amp;gt;&lt;/code&gt; or &lt;code&gt;git update-index --skip-worktree &amp;lt;file&amp;gt;&lt;/code&gt;, examples of which can be found &lt;a href=&quot;https://stackoverflow.com/a/20241145&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">Альтернативными решениями, которые &lt;strong&gt;не&lt;/strong&gt; влияют на удаленное репо, являются &lt;code&gt;git update-index --assume-unchanged &amp;lt;/path/file&amp;gt;&lt;/code&gt; или &lt;code&gt;git update-index --skip-worktree &amp;lt;file&amp;gt;&lt;/code&gt; , примеры которых можно найти &lt;a href=&quot;https://stackoverflow.com/a/20241145&quot;&gt;здесь&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="6a41eb1605b5c4997fa5c53a67b3bccfeac6b535" translate="yes" xml:space="preserve">
          <source>Anti-recommentation: Don't use assume-unchanged, it will only end in tears (because having git lie to itself will cause bad things to happen, like your change being lost forever).</source>
          <target state="translated">Анти-коммуникация:Не используйте предположение-измененное,это закончится только слезами (потому что наличие git-лжи само по себе вызовет плохие вещи,как,например,ваша сдача будет потеряна навсегда).</target>
        </trans-unit>
        <trans-unit id="d67fefbf8e2fd8148f6312fb95b34f9b6c28c3ac" translate="yes" xml:space="preserve">
          <source>Basing on it I do the following, if file is already tracked:</source>
          <target state="translated">На основании этого я делаю следующее,если файл уже отслежен:</target>
        </trans-unit>
        <trans-unit id="ee0e2ab0d04aa5d054177f7139fe2f2993169040" translate="yes" xml:space="preserve">
          <source>Before proceeding, make sure all your changes are committed, including your .gitignore file.</source>
          <target state="translated">Перед тем,как продолжить,убедитесь,что все ваши изменения зафиксированы,включая ваш файл .gitignore.</target>
        </trans-unit>
        <trans-unit id="202ec7e461ae2d976889f5c200423159e33e4cff" translate="yes" xml:space="preserve">
          <source>But in Git every time you commit, or save the state of your project, it basically takes a picture of what &lt;strong&gt;&lt;em&gt;all your files&lt;/em&gt;&lt;/strong&gt; look like at that moment and stores a reference to that snapshot. So, if you added file once, it will always be present  in that snapshot.</source>
          <target state="translated">Но в Git каждый раз, когда вы фиксируете или сохраняете состояние вашего проекта, он в основном делает снимок того, как &lt;strong&gt;&lt;em&gt;все ваши файлы&lt;/em&gt;&lt;/strong&gt; выглядят в данный момент, и сохраняет ссылку на этот снимок. Таким образом, если вы добавили файл один раз, он всегда будет присутствовать в этом снимке.</target>
        </trans-unit>
        <trans-unit id="34982d9388d501a1c59663bb20321f9e535e5325" translate="yes" xml:space="preserve">
          <source>Commit file config-sample.ini and ignore file config.ini, have a script or similar copy the file as necessary if necessary.</source>
          <target state="translated">Зафиксируйте файл config-sample.ini и проигнорируйте файл config.ini,при необходимости скопируйте его скриптом или аналогичным образом.</target>
        </trans-unit>
        <trans-unit id="5e69dfeea1ca71ec5cba8ba3812cefb3dde8a6d7" translate="yes" xml:space="preserve">
          <source>Do the following steps serially,you will be fine.</source>
          <target state="translated">Делайте следующие шаги последовательно,вы будете в порядке.</target>
        </trans-unit>
        <trans-unit id="7efbf048e80845e59aa478983b3f909934d4ee15" translate="yes" xml:space="preserve">
          <source>Doing this went into each folder under the 'root' of where I was at and excluded all files that matched the pattern.</source>
          <target state="translated">Это попало в каждую папку под &quot;корнем&quot;,где я находился,и исключило все файлы,которые соответствовали шаблону.</target>
        </trans-unit>
        <trans-unit id="ce417ee80599859b918672e3deab176250d6a6fa" translate="yes" xml:space="preserve">
          <source>Especially for the IDE based files, I use this:</source>
          <target state="translated">Специально для IDE-файлов,я использую это:</target>
        </trans-unit>
        <trans-unit id="5f23cb20c4075e9581d1185b5b7df71903a476f7" translate="yes" xml:space="preserve">
          <source>FWIW, potential methods may include &lt;code&gt;git rebase&lt;/code&gt; or a &lt;code&gt;git filter-branch&lt;/code&gt; that copies an &lt;em&gt;external&lt;/em&gt;&lt;code&gt;.gitignore&lt;/code&gt; into each commit, like the answers to &lt;a href=&quot;https://stackoverflow.com/q/43463687&quot;&gt;this question&lt;/a&gt;</source>
          <target state="translated">Кстати, потенциальные методы могут включать &lt;code&gt;git rebase&lt;/code&gt; или &lt;code&gt;git filter-branch&lt;/code&gt; , который копирует &lt;em&gt;внешний&lt;/em&gt; &lt;code&gt;.gitignore&lt;/code&gt; в каждый коммит, как ответы на &lt;a href=&quot;https://stackoverflow.com/q/43463687&quot;&gt;этот вопрос.&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f9934c535834db75b1af736d96add4343490deca" translate="yes" xml:space="preserve">
          <source>File content will be replaced by the remote content. Paste your changes from safe place to file and perform again:</source>
          <target state="translated">Содержимое файла будет заменено на удаленное содержимое.Вставьте изменения из безопасного места в файл и выполните их снова:</target>
        </trans-unit>
        <trans-unit id="fbe38db5f25e43c80761fee281d19a80da24dfe5" translate="yes" xml:space="preserve">
          <source>Finally, follow the rest of &lt;a href=&quot;https://help.github.com/en/articles/removing-sensitive-data-from-a-repository&quot;&gt;this GitHub guide&lt;/a&gt; (starting at step 6) &lt;strong&gt;which includes important warnings/information about the commands below&lt;/strong&gt;.</source>
          <target state="translated">Наконец, следуйте остальной части &lt;a href=&quot;https://help.github.com/en/articles/removing-sensitive-data-from-a-repository&quot;&gt;этого руководства GitHub&lt;/a&gt; (начиная с шага 6), &lt;strong&gt;которое включает важные предупреждения / информацию о командах ниже&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="0ba0b957e82e6fe3a824c66fd56f4787439fab3c" translate="yes" xml:space="preserve">
          <source>Finally, make a commit!</source>
          <target state="translated">Наконец-то,берите на себя обязательство!</target>
        </trans-unit>
        <trans-unit id="ec0c3b76630fd745381cc215a284820af75a683a" translate="yes" xml:space="preserve">
          <source>Footnotes</source>
          <target state="translated">Footnotes</target>
        </trans-unit>
        <trans-unit id="3377231d1621da920e2f6d01f618d62a65db90db" translate="yes" xml:space="preserve">
          <source>For instance the slnx.sqlite, I just got rid off it completely like following:</source>
          <target state="translated">Например,slnx.sqlite,я только что избавился от него,как будто слежу за ним:</target>
        </trans-unit>
        <trans-unit id="3bc29b2292be0b2cd02509d2f723c4a7e560576e" translate="yes" xml:space="preserve">
          <source>From this moment all local changes in this file will be ignored and will not go to remote. If file is changed on remote, conflict will occure, when &lt;code&gt;git pull&lt;/code&gt;. Stash won't work. To resolve it, &lt;em&gt;copy file content to the safe place&lt;/em&gt; and follow these steps:</source>
          <target state="translated">С этого момента все локальные изменения в этом файле будут игнорироваться и не будут передаваться удаленно. Если файл изменяется на удаленном компьютере, конфликт будет происходить, когда &lt;code&gt;git pull&lt;/code&gt; . Тайник не сработает. Чтобы решить эту проблему, &lt;em&gt;скопируйте содержимое файла в безопасное место&lt;/em&gt; и выполните следующие действия:</target>
        </trans-unit>
        <trans-unit id="fbab929a9779a2ee3e87320c92fff544c9f8051f" translate="yes" xml:space="preserve">
          <source>General advice: &lt;strong&gt;start with a clean repo&lt;/strong&gt; - everything committed, nothing pending in working directory or index, &lt;strong&gt;and make a backup&lt;/strong&gt;!</source>
          <target state="translated">Общий совет: &lt;strong&gt;начните с чистого репо&lt;/strong&gt; - все зафиксировано, ничего не ожидается в рабочем каталоге или индексе, &lt;strong&gt;и сделайте резервную копию&lt;/strong&gt; !</target>
        </trans-unit>
        <trans-unit id="383228a7a69a177f4167123e5eea04fe6397b184" translate="yes" xml:space="preserve">
          <source>Hat tip to @AkiraYamamoto for pointing us in the right direction.</source>
          <target state="translated">Совет шляпы к @AkiraYamamoto,чтобы направить нас в правильном направлении.</target>
        </trans-unit>
        <trans-unit id="566e08627539a7d2ecb5033b1abbdc58839c476c" translate="yes" xml:space="preserve">
          <source>Have your application look for an ignored file config-overide.ini and use that over the committed file config.ini (or alternately, look for ~/.config/myapp.ini, or $MYCONFIGFILE)</source>
          <target state="translated">Пусть ваше приложение ищет игнорируемый файл config-overide.ini и использует его поверх файла config.ini (или поочередно ищет ~.configmyapp.ini,или $MYCONFIGFILE).</target>
        </trans-unit>
        <trans-unit id="5bf6447b60376b1563849f40943b48a5d87e3cf8" translate="yes" xml:space="preserve">
          <source>Hope this helps others!</source>
          <target state="translated">Надеюсь,это поможет другим!</target>
        </trans-unit>
        <trans-unit id="a1f359c689bb3b599c937d2b3bde4bbcb5336415" translate="yes" xml:space="preserve">
          <source>How do you force &lt;code&gt;git&lt;/code&gt; to completely forget about [a file]?</source>
          <target state="translated">Как вы заставляете &lt;code&gt;git&lt;/code&gt; полностью забыть о [файле]?</target>
        </trans-unit>
        <trans-unit id="3f4c43dc61508984fa8447acacd10ea274b878cc" translate="yes" xml:space="preserve">
          <source>How to make Git “forget” about a file that was tracked but is now in .gitignore</source>
          <target state="translated">Как заставить Git &quot;забыть&quot; о файле,который был отслежен,но теперь находится в .gitignore.</target>
        </trans-unit>
        <trans-unit id="ffb3146d4b977e8077d09a9c235b576b6fb6a3df" translate="yes" xml:space="preserve">
          <source>However, that file keeps showing up in &lt;code&gt;git status&lt;/code&gt; after it's edited. How do you force &lt;code&gt;git&lt;/code&gt; to completely forget about it?</source>
          <target state="translated">Однако этот файл продолжает отображаться в &lt;code&gt;git status&lt;/code&gt; после его редактирования. Как вы заставляете &lt;code&gt;git&lt;/code&gt; полностью забыть об этом?</target>
        </trans-unit>
        <trans-unit id="3da73f13e2ca68488453d76581d10690fca48b23" translate="yes" xml:space="preserve">
          <source>I accomplished this by using &lt;a href=&quot;http://git-scm.com/docs/git-filter-branch&quot;&gt;git filter-branch&lt;/a&gt;. The exact command I used was taken from the man page:</source>
          <target state="translated">Я сделал это с помощью &lt;a href=&quot;http://git-scm.com/docs/git-filter-branch&quot;&gt;git filter-branch&lt;/a&gt; . Точная команда, которую я использовал, была взята со страницы руководства:</target>
        </trans-unit>
        <trans-unit id="e3d824cfebc37780973279c6ef69aebdc266297a" translate="yes" xml:space="preserve">
          <source>I always use this command to remove those untracked files. 
One-line, Unix-style, clean output:</source>
          <target state="translated">Я всегда использую эту команду,чтобы удалить эти неотслеживаемые файлы.Однострочный,в стиле Unix,чистый вывод:</target>
        </trans-unit>
        <trans-unit id="30df5b0bdab26d64e3f314c5f82d939e368718be" translate="yes" xml:space="preserve">
          <source>I liked JonBrave's answer but I have messy enough working directories that commit -a scares me a bit, so here's what I've done:</source>
          <target state="translated">Мне понравился ответ ДжонБрейва,но у меня достаточно грязных рабочих директорий,которые совершают коммиты-это меня немного пугает,так что вот что я сделал:</target>
        </trans-unit>
        <trans-unit id="ae997b72f572c164f9db73d00da169b807fa2145" translate="yes" xml:space="preserve">
          <source>I recommend reading the documentation, but basically:</source>
          <target state="translated">Я рекомендую прочитать документацию,но в основном:</target>
        </trans-unit>
        <trans-unit id="298daaa4a77ce41f5637f4872a4f45b4106bf606" translate="yes" xml:space="preserve">
          <source>I think, that maybe git can't totally forget about file because of its conception (&lt;a href=&quot;https://git-scm.com/book/en/v2/Getting-Started-Git-Basics&quot;&gt;section &quot;Snapshots, Not Differences&quot;&lt;/a&gt;).</source>
          <target state="translated">Я думаю, что git не может полностью забыть о файле из-за его концепции ( &lt;a href=&quot;https://git-scm.com/book/en/v2/Getting-Started-Git-Basics&quot;&gt;раздел &amp;laquo;Снимки, а не различия&amp;raquo;&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="39a2708982ad9e80eba23666c91b4ae5bdb874e7" translate="yes" xml:space="preserve">
          <source>If anyone having hard time on Windows and you wanna ignore entire folder, 'cd' to desired the 'folder' and do 'Git Bash Here'.</source>
          <target state="translated">Если кто-то испытывает трудности с Windows,и вы хотите проигнорировать всю папку,'cd',чтобы выбрать 'папку' и сделать 'Git Bash Here'.</target>
        </trans-unit>
        <trans-unit id="0e021844325108de6923cd018135a48813b2d1b1" translate="yes" xml:space="preserve">
          <source>If everyone, who works with project, will perform &lt;code&gt;git update-index --skip-worktree &amp;lt;file&amp;gt;&lt;/code&gt;, problems with &lt;code&gt;pull&lt;/code&gt; should be absent. This solution is OK for configurations files, when every developer has their own project configuration.</source>
          <target state="translated">Если каждый, кто работает с проектом, будет выполнять &lt;code&gt;git update-index --skip-worktree &amp;lt;file&amp;gt;&lt;/code&gt; , проблемы с &lt;code&gt;pull&lt;/code&gt; должны отсутствовать. Это решение подходит для файлов конфигурации, когда каждый разработчик имеет свою собственную конфигурацию проекта.</target>
        </trans-unit>
        <trans-unit id="25e96f5e32b3e98d46d6a3c82c2a38e2f06e1122" translate="yes" xml:space="preserve">
          <source>If you cannot &lt;code&gt;git rm&lt;/code&gt; a tracked file because other people might need it (warning, even if &lt;em&gt;you&lt;/em&gt;&lt;code&gt;git rm --cached&lt;/code&gt;, when someone else gets this change, their files will be deleted in their filesystem).  These are often done due to config file overrides, authentication credentials, etc. Please look at &lt;a href=&quot;https://gist.github.com/1423106&quot;&gt;https://gist.github.com/1423106&lt;/a&gt; for ways people have worked around the problem.</source>
          <target state="translated">Если вы не можете получить отслеживаемый файл, потому что это может понадобиться другим людям (предупреждение, даже если &lt;em&gt;вы&lt;/em&gt; &lt;code&gt;git rm --cached&lt;/code&gt; , когда кто-то другой получит это изменение, его файлы будут удалены в их файловой системе). Это часто делается из-за переопределения файла конфигурации, учетных данных аутентификации и т. Д. Пожалуйста, посмотрите на &lt;a href=&quot;https://gist.github.com/1423106&quot;&gt;https://gist.github.com/1423106&lt;/a&gt; способы, которыми люди обошли проблему.</target>
        </trans-unit>
        <trans-unit id="9143aec05a9d0455022a9d3efa538b3f3f9385bc" translate="yes" xml:space="preserve">
          <source>If you don't want to use the CLI and are working on Windows, a very simple solution is to use &lt;a href=&quot;https://tortoisegit.org/&quot;&gt;TortoiseGit&lt;/a&gt;, it has the &quot;Delete (keep local)&quot; Action in the menu which works fine.</source>
          <target state="translated">Если вы не хотите использовать интерфейс командной строки и работаете в Windows, очень простым решением является использование &lt;a href=&quot;https://tortoisegit.org/&quot;&gt;TortoiseGit&lt;/a&gt; , в меню которого есть действие &amp;laquo;Удалить (сохранить локальное)&amp;raquo;, которое работает нормально.</target>
        </trans-unit>
        <trans-unit id="0d71f20100d6c8cc8bd6973525e16dd6ba961dbd" translate="yes" xml:space="preserve">
          <source>If you want to remove a whole folder, you need to remove all files in it recursively.</source>
          <target state="translated">Если вы хотите удалить целую папку,вам нужно удалить все файлы в ней рекурсивно.</target>
        </trans-unit>
        <trans-unit id="15d61d53688648e59ae0d7cc465a1adfc9f32e65" translate="yes" xml:space="preserve">
          <source>If you'd like to specify files by name, you can do that too:</source>
          <target state="translated">Если вы хотите указать файлы по имени,вы тоже можете это сделать:</target>
        </trans-unit>
        <trans-unit id="5903c3f8465c60a50db152209be8cfcd2f531ee6" translate="yes" xml:space="preserve">
          <source>Ignore them by:</source>
          <target state="translated">Не обращай на них внимания:</target>
        </trans-unit>
        <trans-unit id="6909856450b8468ce19ecf4aa7c57653169fd9a9" translate="yes" xml:space="preserve">
          <source>In case of already committed &lt;code&gt;DS_Store&lt;/code&gt;:</source>
          <target state="translated">В случае уже совершенного &lt;code&gt;DS_Store&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="cb61bbad89d4ac5b475150e04f8ff4d53d867cc4" translate="yes" xml:space="preserve">
          <source>In fact, this solution will cause the file to be &lt;strong&gt;deleted&lt;/strong&gt; in every other instance of the repository when executing a &lt;code&gt;git pull&lt;/code&gt;!</source>
          <target state="translated">Фактически, это решение приведет к &lt;strong&gt;удалению&lt;/strong&gt; файла во всех остальных экземплярах хранилища при выполнении &lt;code&gt;git pull&lt;/code&gt; !</target>
        </trans-unit>
        <trans-unit id="b6281cb7098a9a1bf8ab74eea9cf623585f3557d" translate="yes" xml:space="preserve">
          <source>In my case here, I had several .lock files in several directories that I needed to remove. I ran the following and it worked without having to go into each directory to remove them:</source>
          <target state="translated">В моем случае здесь,у меня было несколько .lock-файлов в нескольких каталогах,которые мне нужно было удалить.Я запустил следующее,и это сработало без необходимости заходить в каждый каталог для их удаления:</target>
        </trans-unit>
        <trans-unit id="f2ee46b5bf348489144ff43d13bb1f9db4b9e4cc" translate="yes" xml:space="preserve">
          <source>In the manual page &lt;strong&gt;git-ls-files(1)&lt;/strong&gt;, it states:</source>
          <target state="translated">На странице руководства &lt;strong&gt;git-ls-files (1)&lt;/strong&gt; говорится:</target>
        </trans-unit>
        <trans-unit id="1e3a8ac2b04f693dce99c91c6d013b19a784ceac" translate="yes" xml:space="preserve">
          <source>It is not very convenient to do this every time, when file has been changed on remote, but can protect it from overwriting by remote content.</source>
          <target state="translated">Это не очень удобно делать каждый раз,когда файл был изменен на удаленном компьютере,но может защитить его от перезаписи удаленным контентом.</target>
        </trans-unit>
        <trans-unit id="7da0a30820d35bda263d21ef6c921be754b4fb2b" translate="yes" xml:space="preserve">
          <source>It lists all your ignored files, replace every output line with a quoted line instead to handle paths with spaces inside, and pass everything to &lt;code&gt;git rm -r --cached&lt;/code&gt; to remove the paths/files/dirs from the index.</source>
          <target state="translated">Он перечисляет все ваши игнорируемые файлы, заменяет каждую строку вывода строкой в ​​кавычках, чтобы обрабатывать пути с пробелами внутри, и передает все в &lt;code&gt;git rm -r --cached&lt;/code&gt; для удаления путей / файлов / dirs из индекса.</target>
        </trans-unit>
        <trans-unit id="427dd941220a11cde80854cae040581bf7a7bc39" translate="yes" xml:space="preserve">
          <source>Just keep that in mind that some of those files stores some local user settings and preferences for projects (like what files you had open). So every time you navigate or do some changes in your IDE, that file is changed and therefore it checks it out and show as there are uncommitted changes.</source>
          <target state="translated">Просто имейте это в виду,что некоторые из этих файлов хранят некоторые локальные пользовательские настройки и предпочтения для проектов (например,какие файлы вы открывали).Поэтому каждый раз,когда вы перемещаетесь по IDE или делаете какие-то изменения,этот файл изменяется,и поэтому он проверяет его и показывает,как есть нефиксированные изменения.</target>
        </trans-unit>
        <trans-unit id="1e1f9446808bef2a81577b3811952c9be0140995" translate="yes" xml:space="preserve">
          <source>Keep the config file on a deploy branch dedicated to it that is never merged to master.  When you want to deploy/compile/test you merge to that branch and get that file.  This is essentially the smudge/clean approach except using human merge policies and extra-git modules.</source>
          <target state="translated">Сохраняйте файл конфигурации в развернутой ветке,выделенной для нее,которая никогда не сливается с основной.При установкеompiletest вы сливаете его с этой веткой и получаете этот файл.По сути,это подход с использованием smudgeclean,за исключением использования человеческих политик слияния и дополнительных модулей в Git'е.</target>
        </trans-unit>
        <trans-unit id="6b5335338767809a90c12fd0a6cc98271bc8581c" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s say you have already added/committed some files to your git repository and you then add them to your .gitignore; these files will still be present in your repository index. This article we will see how to get rid of them.</source>
          <target state="translated">Допустим, вы уже добавили / передали некоторые файлы в свой репозиторий git, а затем добавили их в свой .gitignore; эти файлы все еще будут присутствовать в вашем индексе репозитория. В этой статье мы увидим, как от них избавиться.</target>
        </trans-unit>
        <trans-unit id="3d06145c701eb9f7bcded9868ffbb9cfbfbf4af3" translate="yes" xml:space="preserve">
          <source>Move or copy the file to a safe location, so you don't lose it. Then git rm the file and commit. The file will still show up if you revert to one of those earlier commits, or another branch where it has not been removed. However, in all future commits, you will not see the file again. If the file is in the git ignore, then you can move it back into the folder, and git won't see it.</source>
          <target state="translated">Переместите или скопируйте файл в безопасное место,чтобы не потерять его.Тогда пропишите файл и зафиксируйте.Файл всё равно появится,если вы вернётесь к одному из тех более ранних коммитов или к другой ветке,где он не был удалён.Однако во всех будущих коммитах вы больше не увидите этот файл.Если файл находится в игнорируемом git'ом файле,то вы можете переместить его обратно в папку,и git его не увидит.</target>
        </trans-unit>
        <trans-unit id="b531fabd41eb9da9a0ba874d765d34f24cb5c8b2" translate="yes" xml:space="preserve">
          <source>Or one-liner:</source>
          <target state="translated">Или однолинейный:</target>
        </trans-unit>
        <trans-unit id="41da50eece3db9d79a767edff75028a53b36f061" translate="yes" xml:space="preserve">
          <source>Other devs that pull from now-modified remote repo should make a backup and then:</source>
          <target state="translated">Другие устройства,которые извлекаются из теперь измененного удаленного repo,должны сделать резервную копию,а затем:</target>
        </trans-unit>
        <trans-unit id="b54a2d9b41681e32ea54dbeeffc97236f62a7a92" translate="yes" xml:space="preserve">
          <source>Push the changes to your remote to see the changes effective there as well.</source>
          <target state="translated">Нажмите изменения на вашем пульте дистанционного управления,чтобы увидеть изменения,действующие там же.</target>
        </trans-unit>
        <trans-unit id="d5809414f5464acab9aa7ba79e8f76e8e3a3a51a" translate="yes" xml:space="preserve">
          <source>So I offer</source>
          <target state="translated">Поэтому я предлагаю</target>
        </trans-unit>
        <trans-unit id="960fb31d4493678100902bc9586b9c046362e226" translate="yes" xml:space="preserve">
          <source>Source: &lt;a href=&quot;https://confluence.atlassian.com/bitbucket/reduce-repository-size-321848262.html&quot;&gt;https://confluence.atlassian.com/bitbucket/reduce-repository-size-321848262.html&lt;/a&gt;</source>
          <target state="translated">Источник: &lt;a href=&quot;https://confluence.atlassian.com/bitbucket/reduce-repository-size-321848262.html&quot;&gt;https://confluence.atlassian.com/bitbucket/reduce-repository-size-321848262.html.&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="612e5a5b717eb6a345fff1875325e4e780814272" translate="yes" xml:space="preserve">
          <source>Step 1: Commit all your changes</source>
          <target state="translated">Шаг 1:Зафиксируйте все свои изменения</target>
        </trans-unit>
        <trans-unit id="77880434b84506c14708316521c7f71b103ddbdc" translate="yes" xml:space="preserve">
          <source>Step 2: Remove everything from the repository</source>
          <target state="translated">Шаг 2:Удалить все из репозитория</target>
        </trans-unit>
        <trans-unit id="9c2ed963345aea24138333def583839f931c4674" translate="yes" xml:space="preserve">
          <source>Step 3: Re add everything</source>
          <target state="translated">Шаг 3:Re добавить все</target>
        </trans-unit>
        <trans-unit id="1a2dff51a26bbc76eec72ab492cccbb8f3c8089b" translate="yes" xml:space="preserve">
          <source>Step 4: Commit</source>
          <target state="translated">Шаг 4:Принять обязательство</target>
        </trans-unit>
        <trans-unit id="62e557118db016748e85b8aff058461061ff972e" translate="yes" xml:space="preserve">
          <source>Tell your collaborators to &lt;a href=&quot;https://git-scm.com/book/en/Git-Branching-Rebasing&quot;&gt;rebase&lt;/a&gt;, &lt;em&gt;not&lt;/em&gt; merge, any branches they created off of your old (tainted) repository history. One merge commit could reintroduce some or all of the tainted history that you just went to the trouble of purging.</source>
          <target state="translated">Скажите вашим сотрудникам &lt;a href=&quot;https://git-scm.com/book/en/Git-Branching-Rebasing&quot;&gt;перебазировать&lt;/a&gt; , а &lt;em&gt;не&lt;/em&gt; объединить любые ветки, созданные ими из вашей старой (испорченной) истории хранилища. Один коммит слияния может заново ввести некоторые или всю испорченную историю, которую вы только что очистили.</target>
        </trans-unit>
        <trans-unit id="0507b4cf9226f930b3c47ada0f53498a6301526a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://rtyley.github.io/bfg-repo-cleaner/&quot;&gt;BFG&lt;/a&gt; is specifically designed for removing unwanted data like big files or passwords from Git repos, so it has a simple flag that will remove any large historical (not-in-your-current-commit) files: '--strip-blobs-bigger-than'</source>
          <target state="translated">&lt;a href=&quot;https://rtyley.github.io/bfg-repo-cleaner/&quot;&gt;BFG&lt;/a&gt; специально разработан для удаления нежелательных данных, таких как большие файлы или пароли, из репозиториев Git, поэтому он имеет простой флаг, который удаляет любые большие исторические файлы (не в вашем текущем коммите): '--strip-blobs- больше чем'</target>
        </trans-unit>
        <trans-unit id="cf74012f43e3173d4f2f3a304c076743addefd4b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.gitignore&lt;/code&gt; finally ignores tracked-but-deleted files. You can test this for yourself by running the following script. The final &lt;code&gt;git status&lt;/code&gt; statement should report &quot;nothing to commit&quot;.</source>
          <target state="translated">&lt;code&gt;.gitignore&lt;/code&gt; игнорирует отслеженные, но удаленные файлы. Вы можете проверить это сами, запустив следующий скрипт. В последнем заявлении о &lt;code&gt;git status&lt;/code&gt; должно быть указано &amp;laquo;ничего не совершать&amp;raquo;.</target>
        </trans-unit>
        <trans-unit id="18bd883e64a162aac02dba83baaf242c9aba9d6d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rm&lt;/code&gt; command can be unforgiving. If you wish to try what it does beforehand, add the &lt;code&gt;-n&lt;/code&gt; or &lt;code&gt;--dry-run&lt;/code&gt; flag to test things out.</source>
          <target state="translated">Команда &lt;code&gt;rm&lt;/code&gt; может быть неумолимой. Если вы хотите попробовать то, что он делает заранее, добавьте флаг &lt;code&gt;-n&lt;/code&gt; или &lt;code&gt;--dry-run&lt;/code&gt; для проверки.</target>
        </trans-unit>
        <trans-unit id="e219646ce5997a53b1eec4fddf7d5da98274f8a7" translate="yes" xml:space="preserve">
          <source>The BFG is 10-1000x faster than git filter-branch, and generally much easier to use - check the &lt;a href=&quot;https://rtyley.github.io/bfg-repo-cleaner/#usage&quot;&gt;full usage instructions&lt;/a&gt; and &lt;a href=&quot;https://rtyley.github.io/bfg-repo-cleaner/#examples&quot;&gt;examples&lt;/a&gt; for more details.</source>
          <target state="translated">BFG в 10-1000 раз быстрее, чем git filter-branch, и, как правило, намного проще в использовании - для получения более подробной информации ознакомьтесь с &lt;a href=&quot;https://rtyley.github.io/bfg-repo-cleaner/#usage&quot;&gt;полными инструкциями&lt;/a&gt; и &lt;a href=&quot;https://rtyley.github.io/bfg-repo-cleaner/#examples&quot;&gt;примерами&lt;/a&gt; использования</target>
        </trans-unit>
        <trans-unit id="4e1d1bc82d1b78eb89712cf8828bb7c8cc774d0a" translate="yes" xml:space="preserve">
          <source>The accepted answer does not &quot;make Git &lt;strong&gt;&quot;forget&quot;&lt;/strong&gt; about a file...&quot; (historically).  It only makes git &lt;strong&gt;ignore&lt;/strong&gt; the file in the present/future.</source>
          <target state="translated">Принятый ответ не &amp;laquo;заставляет Git &lt;strong&gt;&amp;raquo; забывать &amp;laquo;&lt;/strong&gt; о файле ...&amp;raquo; (исторически). Это только заставляет git &lt;strong&gt;игнорировать&lt;/strong&gt; файл в настоящем / будущем.</target>
        </trans-unit>
        <trans-unit id="bd8f4258fd7f17f2cbd6e097a5da666229f8a59c" translate="yes" xml:space="preserve">
          <source>The answer from Matt Fear was the most effective IMHO. The following is just a PowerShell script for those in windows to only remove files from their git repo that matches their exclusion list.</source>
          <target state="translated">Ответ от Мэтта Фарха был самым эффективным IMHO.Ниже приведён лишь PowerShell скрипт для тех,кто работает в Windows,чтобы удалять из своего git-репозитория только файлы,соответствующие их списку исключений.</target>
        </trans-unit>
        <trans-unit id="67e52d337d22c9b5bfb6014db3c396cfda77accb" translate="yes" xml:space="preserve">
          <source>The copy/paste answer is &lt;code&gt;git rm --cached -r .; git add .; git status&lt;/code&gt;</source>
          <target state="translated">Ответ копирования / вставки: &lt;code&gt;git rm --cached -r .; git add .; git status&lt;/code&gt; git add.; мерзавец статус</target>
        </trans-unit>
        <trans-unit id="78a25064d23dc897dd87d00c940f9b4e4c4ffb99" translate="yes" xml:space="preserve">
          <source>The correct way to force git to forget about a file is documented by GitHub &lt;a href=&quot;https://help.github.com/en/articles/removing-sensitive-data-from-a-repository&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">Правильный способ заставить git забыть о файле задокументирован GitHub &lt;a href=&quot;https://help.github.com/en/articles/removing-sensitive-data-from-a-repository&quot;&gt;здесь&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="e7351c780e287a42a26ece70eefbcf456f1046dd" translate="yes" xml:space="preserve">
          <source>The removal of the file from the head revision will happen on the next commit.</source>
          <target state="translated">Удаление файла из ревизии заголовка произойдёт при следующей фиксации.</target>
        </trans-unit>
        <trans-unit id="aef3fa74c8e59e395be7f68fe29a155144721883" translate="yes" xml:space="preserve">
          <source>The series of commands below will remove all of the items from the Git Index (not from the working directory or local repo), and then updates the Git Index, while respecting git ignores. &lt;em&gt;PS. Index = Cache&lt;/em&gt;</source>
          <target state="translated">Приведенная ниже серия команд удалит все элементы из индекса Git (не из рабочего каталога или локального репо), а затем обновит индекс Git, соблюдая при этом git. &lt;em&gt;PS.&lt;/em&gt; &lt;em&gt;Индекс = Кэш&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="059b6a3f58c111d094d712b8584163f9e7b63336" translate="yes" xml:space="preserve">
          <source>There is a file that was being tracked by &lt;code&gt;git&lt;/code&gt;, but now the file is on the &lt;code&gt;.gitignore&lt;/code&gt; list.</source>
          <target state="translated">Есть файл, который отслеживался &lt;code&gt;git&lt;/code&gt; , но теперь этот файл находится в списке &lt;code&gt;.gitignore&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="99eb079a0b8763cc9243db3017fce8f2b5f1c2b1" translate="yes" xml:space="preserve">
          <source>These 2 articles were helpful for me:</source>
          <target state="translated">Эти две статьи были полезны для меня:</target>
        </trans-unit>
        <trans-unit id="9b99e56bf3215466d4bcb6510e8f2ab3c18e92a1" translate="yes" xml:space="preserve">
          <source>This command will ignore the files that have already been committed to a Git repository but now we have added them to &lt;code&gt;.gitignore&lt;/code&gt;.</source>
          <target state="translated">Эта команда будет игнорировать файлы, которые уже были переданы в репозиторий Git, но теперь мы добавили их в &lt;code&gt;.gitignore&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6a80256c88620e0c46466e120451785a26291aed" translate="yes" xml:space="preserve">
          <source>This command will recreate the entire commit history, executing &lt;code&gt;git rm&lt;/code&gt; before each commit and so will get rid of the specified file. Don't forget to back it up before running the command as it &lt;em&gt;will&lt;/em&gt; be lost.</source>
          <target state="translated">Эта команда воссоздает всю историю коммитов, выполняя &lt;code&gt;git rm&lt;/code&gt; перед каждым коммитом и, таким образом, избавляется от указанного файла. Не забудьте сделать резервную копию перед выполнением команды, так как она &lt;em&gt;будет&lt;/em&gt; потеряна.</target>
        </trans-unit>
        <trans-unit id="aace7ffcc2632aa8ca6dcf3aeb06c1b3b98defb7" translate="yes" xml:space="preserve">
          <source>This method makes git &lt;strong&gt;completely forget&lt;/strong&gt; ignored files (&lt;strong&gt;past&lt;/strong&gt;/present/future), but does &lt;strong&gt;not&lt;/strong&gt; delete anything from working directory (even when re-pulled from remote).</source>
          <target state="translated">Этот метод заставляет git &lt;strong&gt;полностью забыть&lt;/strong&gt; игнорируемые файлы ( &lt;strong&gt;прошлые&lt;/strong&gt; / настоящие / будущие), но &lt;strong&gt;не&lt;/strong&gt; удаляет ничего из рабочего каталога (даже при повторном извлечении с удаленного компьютера).</target>
        </trans-unit>
        <trans-unit id="0fd8d975ab3598d0501dc78d1c2086af30973cad" translate="yes" xml:space="preserve">
          <source>This method requires usage of &lt;code&gt;/.git/info/exclude&lt;/code&gt; (preferred) &lt;strong&gt;OR&lt;/strong&gt; a &lt;strong&gt;pre-existing&lt;/strong&gt;&lt;code&gt;.gitignore&lt;/code&gt; in &lt;strong&gt;all&lt;/strong&gt; the commits that have files to be ignored/forgotten. &lt;sup&gt;1&lt;/sup&gt;</source>
          <target state="translated">Этот метод требует использования &lt;code&gt;/.git/info/exclude&lt;/code&gt; (предпочтительно) &lt;strong&gt;ИЛИ&lt;/strong&gt; &lt;strong&gt;ранее существовавшего&lt;/strong&gt; &lt;code&gt;.gitignore&lt;/code&gt; во &lt;strong&gt;всех&lt;/strong&gt; коммитах, в которых есть файлы, которые должны быть проигнорированы / забыты. &lt;sup&gt;1&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="ee4e1a639a65a59982342cdd0d5f935792f354b4" translate="yes" xml:space="preserve">
          <source>This problem is absent, for example, when using CVS. CVS stores information as a list of file-based changes. Information for CVS is a set of files and the changes made to each file over time.</source>
          <target state="translated">Эта проблема отсутствует,например,при использовании CVS.CVS хранит информацию в виде списка файловых изменений.Информация для CVS-это набор файлов и изменений,внесенных в каждый файл с течением времени.</target>
        </trans-unit>
        <trans-unit id="a3d360038ad27ca130f73142cff92cf439acd687" translate="yes" xml:space="preserve">
          <source>This takes the list of the ignored files and removes them from the index, then commits the changes.</source>
          <target state="translated">Он берет список игнорируемых файлов и удаляет их из индекса,затем фиксирует изменения.</target>
        </trans-unit>
        <trans-unit id="8ef3809914d0a4bf55ad9dbd46e75e9ee26c43d4" translate="yes" xml:space="preserve">
          <source>This uses the &lt;code&gt;-z&lt;/code&gt; argument to &lt;strong&gt;ls-files&lt;/strong&gt;, and the &lt;code&gt;-0&lt;/code&gt; argument to &lt;strong&gt;xargs&lt;/strong&gt; to cater safely/correctly for &quot;nasty&quot; characters in filenames.</source>
          <target state="translated">При этом используется аргумент &lt;code&gt;-z&lt;/code&gt; для &lt;strong&gt;ls-файлов&lt;/strong&gt; и аргумент &lt;code&gt;-0&lt;/code&gt; для &lt;strong&gt;xargs&lt;/strong&gt; для безопасного / правильного обслуживания &amp;laquo;неприятных&amp;raquo; символов в именах файлов.</target>
        </trans-unit>
        <trans-unit id="fac1fa39e67b6dbe6a9e8961a2ebbe207fd0a129" translate="yes" xml:space="preserve">
          <source>To clear your repo, use:</source>
          <target state="translated">Чтобы очистить ваше репо,используйте:</target>
        </trans-unit>
        <trans-unit id="9ece9b71ac3beff566f8bc63a178b67231ef3864" translate="yes" xml:space="preserve">
          <source>To stop tracking a file you need to remove it from the index. This can be achieved with this command.</source>
          <target state="translated">Чтобы перестать отслеживать файл,необходимо удалить его из индекса.Этого можно добиться с помощью данной команды.</target>
        </trans-unit>
        <trans-unit id="4e28adc0562a325e3e096fedb43aec2bcfc26cc2" translate="yes" xml:space="preserve">
          <source>To summarize:</source>
          <target state="translated">Подводя итог:</target>
        </trans-unit>
        <trans-unit id="9ef7a39f54d24e9a0a605a35fb91afa4588e67b8" translate="yes" xml:space="preserve">
          <source>Try to use gitattributes clean/smudge magic to apply and remove the changes for you, for instance smudge the config file as a checkout from an alternate branch and clean the config file as a checkout from HEAD.  This is tricky stuff, I don't recommend it for the novice user.</source>
          <target state="translated">Попробуйте использовать gitattributes cleansmudge magic,чтобы применить и удалить изменения для вас,например,размазать конфигурационный файл как извлечение из альтернативной ветки и очистить конфигурационный файл как извлечение из HEAD.Это хитрый материал,я не рекомендую его новичкам.</target>
        </trans-unit>
        <trans-unit id="e966285e3158a217aa4fa3d2055f125148a7452f" translate="yes" xml:space="preserve">
          <source>Update your &lt;code&gt;.gitignore&lt;/code&gt; file &amp;ndash; for instance, add a folder you don't want to track to &lt;code&gt;.gitignore&lt;/code&gt;.</source>
          <target state="translated">Обновите файл &lt;code&gt;.gitignore&lt;/code&gt; - например, добавьте папку, которую вы не хотите отслеживать, в &lt;code&gt;.gitignore&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c04f0b185dde023e1da3e23b5abf4ebb68539583" translate="yes" xml:space="preserve">
          <source>Use this when:</source>
          <target state="translated">Используй это когда:</target>
        </trans-unit>
        <trans-unit id="87f831e2d4c6393d9fcee8d70bc3691c05dbf836" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;git rm --cached&lt;/code&gt; command does not answer the original question:</source>
          <target state="translated">Использование команды &lt;code&gt;git rm --cached&lt;/code&gt; не отвечает на исходный вопрос:</target>
        </trans-unit>
        <trans-unit id="fe9e905994f09d5cd0a93eec644ef1b6cc083fae" translate="yes" xml:space="preserve">
          <source>What didn't work for me</source>
          <target state="translated">То,что не сработало на меня.</target>
        </trans-unit>
        <trans-unit id="cfaea70ee7364b7f2f10a028c48a9b68308aecdb" translate="yes" xml:space="preserve">
          <source>When -z option is not used, TAB, LF, and backslash characters in
  pathnames are represented as \t, \n, and \\, respectively.</source>
          <target state="translated">Когда опция -z не используется,символы TAB,LF и обратного слеша в именах представлены как \t,\n и \ соответственно.</target>
        </trans-unit>
        <trans-unit id="a1d3840d4562480d2399ecf6afe2d819b1729baa" translate="yes" xml:space="preserve">
          <source>You'll also need to (temporarily) &lt;a href=&quot;https://stackoverflow.com/a/10544328/4901390&quot;&gt;allow non-fast-forward pushes to your repository&lt;/a&gt;, since you're changing your git history.</source>
          <target state="translated">Вам также нужно (временно) &lt;a href=&quot;https://stackoverflow.com/a/10544328/4901390&quot;&gt;разрешить не-ускоренные пересылки в ваш репозиторий&lt;/a&gt; , так как вы изменяете свою историю git.</target>
        </trans-unit>
        <trans-unit id="ed971b2dd1c9a5b86271f2c62c00a985a6982cc2" translate="yes" xml:space="preserve">
          <source>Your repository is clean :)</source>
          <target state="translated">Ваше хранилище чистое :)</target>
        </trans-unit>
        <trans-unit id="84cbaf0a5f2e76b1082a2ed9f1526561e8163981" translate="yes" xml:space="preserve">
          <source>breaking it down:</source>
          <target state="translated">сломав его:</target>
        </trans-unit>
        <trans-unit id="4015b57a143aec5156fd1444a017a32137a3fd0f" translate="yes" xml:space="preserve">
          <source>commit</source>
          <target state="translated">commit</target>
        </trans-unit>
        <trans-unit id="824c64b13bca2d2655a812f22946c1edd153a100" translate="yes" xml:space="preserve">
          <source>cope with this situation (get errors about files not found).</source>
          <target state="translated">справиться с этой ситуацией (получить ошибки о не найденных файлах).</target>
        </trans-unit>
        <trans-unit id="e1f5dc1388efa7feb527c501975cbf1f88f8ed54" translate="yes" xml:space="preserve">
          <source>git config --global alias.exclude-ignored '!git ls-files -z --ignored --exclude-standard | xargs -0 git rm -r --cached &amp;amp;&amp;amp;  git ls-files -z --ignored --exclude-standard | xargs -0 git stage &amp;amp;&amp;amp;  git stage .gitignore &amp;amp;&amp;amp; git commit -m &quot;new gitignore and remove ignored files from index&quot;'</source>
          <target state="translated">git config --global alias.exclude-ignored '! git ls-files -z --ignored --exclude-standard | xargs -0 git rm -r --cached &amp;amp;&amp;amp; git ls-files -z --ignored --exclude-standard | xargs -0 git stage &amp;amp;&amp;amp; git stage .gitignore &amp;amp;&amp;amp; git commit -m &quot;новый gitignore и удаление игнорируемых файлов из индекса&quot; '</target>
        </trans-unit>
        <trans-unit id="ef4d26678574a73b0e350a9a486783df032bc301" translate="yes" xml:space="preserve">
          <source>just replace &lt;code&gt;full/path/to/file&lt;/code&gt; with the full path of the file. Make sure you've added the file to your &lt;code&gt;.gitignore&lt;/code&gt;.</source>
          <target state="translated">просто замените &lt;code&gt;full/path/to/file&lt;/code&gt; на полный путь к файлу. Убедитесь, что вы добавили файл в свой &lt;code&gt;.gitignore&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d57cea54209eef1efd8a4421791d849849a82490" translate="yes" xml:space="preserve">
          <source>move it out, commit, then move it back in. This has worked for me in the past. There is probably a 'gittier' way to accomplish this.</source>
          <target state="translated">вытащить его,зафиксировать,а потом вернуть обратно.Это сработало со мной в прошлом.Наверное,есть способ сделать это &quot;гиттнее&quot;.</target>
        </trans-unit>
        <trans-unit id="305ae145517f107f30ff7601792a2642c8676b9b" translate="yes" xml:space="preserve">
          <source>remove ignored files from index</source>
          <target state="translated">удалять игнорируемые файлы из индекса</target>
        </trans-unit>
        <trans-unit id="1ccf2fbbfa1279aaf960c3ec391069e720298640" translate="yes" xml:space="preserve">
          <source>so I think my solution is needed if filenames have any of these characters in them.</source>
          <target state="translated">так что я думаю,что мое решение необходимо,если в именах файлов есть хоть один из этих символов.</target>
        </trans-unit>
        <trans-unit id="478f9e84d9950a571b6e0c79abdf30102aa37957" translate="yes" xml:space="preserve">
          <source>stage .gitignore and the files you just removed</source>
          <target state="translated">стадия .gitignore и файлы,которые вы только что удалили.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
