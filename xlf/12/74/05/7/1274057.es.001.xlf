<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/1274057">
    <body>
      <group id="1274057">
        <trans-unit id="1b1b1894ca2eb1b577deb9d1c135b98a8bea6403" translate="yes" xml:space="preserve">
          <source>(Under Linux), I wanted to use the posts here suggesting the &lt;code&gt;ls-files --ignored --exclude-standard | xargs git rm -r --cached&lt;/code&gt; approach.  However, (some of) the files to be removed had an embedded newline/LF/&lt;code&gt;\n&lt;/code&gt; in their names.  Neither of the solutions:</source>
          <target state="translated">(En Linux), quer&amp;iacute;a usar las publicaciones aqu&amp;iacute; sugiriendo los &lt;code&gt;ls-files --ignored --exclude-standard | xargs git rm -r --cached&lt;/code&gt; xargs git rm -r - enfoque en cach&amp;eacute; . Sin embargo, (algunos de) los archivos que se eliminar&amp;aacute;n ten&amp;iacute;an una nueva l&amp;iacute;nea incrustada / LF / &lt;code&gt;\n&lt;/code&gt; en sus nombres. Ninguna de las soluciones:</target>
        </trans-unit>
        <trans-unit id="e165ff5a12e79393f418cbab5ffb6044b4b14192" translate="yes" xml:space="preserve">
          <source>1. You want to untrack a lot of files, or</source>
          <target state="translated">1.Quieres desentrañar un montón de archivos,o</target>
        </trans-unit>
        <trans-unit id="7291077bbcfea136ea78ae06fee8fb069775f45a" translate="yes" xml:space="preserve">
          <source>1.&lt;strong&gt;remove&lt;/strong&gt; the mistakenly added files &lt;strong&gt;from the directory/storage&lt;/strong&gt;. You can use &quot;rm -r&quot;(for linux) command or delete them by browsing the directories. Or move them to another location on your PC.[You maybe need to close the IDE if running for &lt;strong&gt;moving/removing&lt;/strong&gt;]</source>
          <target state="translated">1. &lt;strong&gt;elimine&lt;/strong&gt; los archivos agregados por error &lt;strong&gt;del directorio / almacenamiento&lt;/strong&gt; . Puede usar el comando &quot;rm -r&quot; (para linux) o eliminarlos explorando los directorios. O mu&amp;eacute;valos a otra ubicaci&amp;oacute;n en su PC. [Quiz&amp;aacute;s necesite cerrar el IDE si est&amp;aacute; ejecutando para &lt;strong&gt;mover / quitar&lt;/strong&gt; ]</target>
        </trans-unit>
        <trans-unit id="d29051284b7186e88c71b70107bdfe4f554cc6df" translate="yes" xml:space="preserve">
          <source>2. You updated your gitignore file</source>
          <target state="translated">2.Actualizó su archivo gitignore</target>
        </trans-unit>
        <trans-unit id="3eee398533d29dfa830054675fbecc16f086d5fd" translate="yes" xml:space="preserve">
          <source>2.add the files / directories to &lt;code&gt;gitignore&lt;/code&gt; file now and save it.</source>
          <target state="translated">2.agregue los archivos / directorios al archivo &lt;code&gt;gitignore&lt;/code&gt; ahora y gu&amp;aacute;rdelo.</target>
        </trans-unit>
        <trans-unit id="67d7bf6b04b2072f859546335ca89f354bd6d7ad" translate="yes" xml:space="preserve">
          <source>3.now &lt;strong&gt;remove&lt;/strong&gt; them from &lt;strong&gt;git cache&lt;/strong&gt; by using these commands (if there are more than one directory, remove them one by one by repeatedly issuing this command)</source>
          <target state="translated">3.ahora &lt;strong&gt;elim&amp;iacute;nelos&lt;/strong&gt; de la &lt;strong&gt;cach&amp;eacute; de git&lt;/strong&gt; utilizando estos comandos (si hay m&amp;aacute;s de un directorio, elim&amp;iacute;nelos uno por uno emitiendo este comando repetidamente)</target>
        </trans-unit>
        <trans-unit id="3ea998bdf09e60d9d8abd1f7b841f09d1336d5a1" translate="yes" xml:space="preserve">
          <source>4.now &lt;strong&gt;do&lt;/strong&gt; a &lt;strong&gt;commit and push&lt;/strong&gt;, use these commands. This will &lt;em&gt;remove those files from git remote&lt;/em&gt; and make git &lt;em&gt;stop tracking&lt;/em&gt; those files.</source>
          <target state="translated">4.ahora &lt;strong&gt;haz&lt;/strong&gt; un &lt;strong&gt;commit y push&lt;/strong&gt; , usa estos comandos. Esto &lt;em&gt;eliminar&amp;aacute; esos archivos de git remote&lt;/em&gt; y har&amp;aacute; que git &lt;em&gt;deje de rastrear&lt;/em&gt; esos archivos.</target>
        </trans-unit>
        <trans-unit id="17ceece8d84cea60549ab352bf79b07ec65dbb55" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://fallengamer.livejournal.com/93321.html&quot;&gt;git assume-unchanged vs skip-worktree&lt;/a&gt;
 and &lt;a href=&quot;http://blog.stephan-partzsch.de/how-to-ignore-changes-in-tracked-files-with-git/&quot;&gt;How to ignore changes in tracked files with Git&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://fallengamer.livejournal.com/93321.html&quot;&gt;git asumir-sin cambios vs skip-worktree&lt;/a&gt; y &lt;a href=&quot;http://blog.stephan-partzsch.de/how-to-ignore-changes-in-tracked-files-with-git/&quot;&gt;C&amp;oacute;mo ignorar los cambios en los archivos rastreados con Git&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="78e15ae328e1a2411f65d28cc06b7824a162f954" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://git-scm.com/docs/git-rm&quot;&gt;rm&lt;/a&gt; is the remove command</source>
          <target state="translated">&lt;a href=&quot;https://git-scm.com/docs/git-rm&quot;&gt;rm&lt;/a&gt; es el comando eliminar</target>
        </trans-unit>
        <trans-unit id="78fa9ca23f190aad15123aa1d43278ef66819081" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.gitignore&lt;/code&gt; will prevent untracked files from being added (without an &lt;code&gt;add -f&lt;/code&gt;) to the set of files tracked by git, however git will continue to track any files that are already being tracked.</source>
          <target state="translated">&lt;code&gt;.gitignore&lt;/code&gt; evitar&amp;aacute; que se agreguen archivos no rastreados (sin &lt;code&gt;add -f&lt;/code&gt; ) al conjunto de archivos rastreados por git, sin embargo, git continuar&amp;aacute; rastreando los archivos que ya se rastrean.</target>
        </trans-unit>
        <trans-unit id="b026808a99fb865ebb4e469dc20949169d8d3ebb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git add .&lt;/code&gt; &amp;ndash; All files will be added back in, except those in &lt;code&gt;.gitignore&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;git add .&lt;/code&gt; - Todos los archivos se volver&amp;aacute;n a agregar, excepto aquellos en &lt;code&gt;.gitignore&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cefd39b5696f3a5f3d24162aa70995ec62aae245" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git rm -r --cached .&lt;/code&gt; &amp;ndash; Remove all tracked files, including wanted and unwanted. Your code will be safe as long as you have saved locally.</source>
          <target state="translated">&lt;code&gt;git rm -r --cached .&lt;/code&gt; - Elimine todos los archivos rastreados, incluidos los deseados y no deseados. Su c&amp;oacute;digo estar&amp;aacute; seguro siempre que haya guardado localmente.</target>
        </trans-unit>
        <trans-unit id="83a9f5eece9214779a020dba22cb30bd64224718" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&amp;ndash;cached&lt;/strong&gt; will only remove files from the index. Your files will still be there.</source>
          <target state="translated">&lt;strong&gt;&amp;ndash;Cached&lt;/strong&gt; solo eliminar&amp;aacute; archivos del &amp;iacute;ndice. Tus archivos seguir&amp;aacute;n ah&amp;iacute;.</target>
        </trans-unit>
        <trans-unit id="9e0c75fb491e1244c9b2b4f6a21f09d08b9a34ad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;-r&lt;/strong&gt; will allow recursive removal</source>
          <target state="translated">&lt;strong&gt;-r&lt;/strong&gt; permitir&amp;aacute; la eliminaci&amp;oacute;n recursiva</target>
        </trans-unit>
        <trans-unit id="297d9ab2be574ee69d4645675e8640e0fd945953" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;First:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;First:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="77360b0eda618b65d4f5b9ac454d8549ce9b33ff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This solution is actually independent on &lt;code&gt;.gitignore&lt;/code&gt; as gitignore is only for untracked files.</source>
          <target state="translated">&lt;strong&gt;Nota:&lt;/strong&gt; Esta soluci&amp;oacute;n es realmente independiente de &lt;code&gt;.gitignore&lt;/code&gt; ya que gitignore es solo para archivos sin seguimiento.</target>
        </trans-unit>
        <trans-unit id="3c6108204e2f399b187def4c0bd951a6d5898341" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Source link:&lt;/strong&gt;&lt;a href=&quot;http://www.codeblocq.com/2016/01/Untrack-files-already-added-to-git-repository-based-on-gitignore/&quot;&gt;http://www.codeblocq.com/2016/01/Untrack-files-already-added-to-git-repository-based-on-gitignore/&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;Enlace de origen:&lt;/strong&gt; &lt;a href=&quot;http://www.codeblocq.com/2016/01/Untrack-files-already-added-to-git-repository-based-on-gitignore/&quot;&gt;http://www.codeblocq.com/2016/01/Untrack-files-already-added-to-git-repository-based-on-gitignore/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="eb20ad117f5ff375c73839d2b25fd98bfdfb7835" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Then:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Then:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0bd7c18fe821283d0a4d492412ca53a9045e75db" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This is no longer an issue in the latest git&lt;/strong&gt; (v2.17.1 at the time of writing).</source>
          <target state="translated">&lt;strong&gt;Esto ya no es un problema en el &amp;uacute;ltimo git&lt;/strong&gt; (v2.17.1 en el momento de la escritura).</target>
        </trans-unit>
        <trans-unit id="9a6beca2c5a4d325c54a1e8c74ed539c6d15f6f0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;WARNING: While this will not remove the physical file from your local, it will remove the files from other developers machines on next &lt;code&gt;git pull&lt;/code&gt;.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ADVERTENCIA: Si bien esto no eliminar&amp;aacute; el archivo f&amp;iacute;sico de su local, eliminar&amp;aacute; los archivos de otras m&amp;aacute;quinas de desarrolladores en el pr&amp;oacute;ximo &lt;code&gt;git pull&lt;/code&gt; .&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="df8624410ba32bf182a54a6f8f84d790e9343215" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;WARNING&lt;/strong&gt;: this will delete the file from your entire history</source>
          <target state="translated">&lt;strong&gt;ADVERTENCIA&lt;/strong&gt; : esto eliminar&amp;aacute; el archivo de todo tu historial</target>
        </trans-unit>
        <trans-unit id="1658da8ba77a3841c3a93544fd41a158b4742abf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;edit:&lt;/strong&gt; Since this answer was posted, a new option has been created and that should be prefered.  You should use &lt;strong&gt;&lt;code&gt;--skip-worktree&lt;/code&gt;&lt;/strong&gt; which is for modified tracked files that the user don't want to commit anymore and keep &lt;code&gt;--assume-unchanged&lt;/code&gt; for performance to prevent git to check status of big tracked files. See &lt;a href=&quot;https://stackoverflow.com/a/13631525/717372&quot;&gt;https://stackoverflow.com/a/13631525/717372&lt;/a&gt; for more details...</source>
          <target state="translated">&lt;strong&gt;editar:&lt;/strong&gt; desde que se public&amp;oacute; esta respuesta, se ha creado una nueva opci&amp;oacute;n que deber&amp;iacute;a preferirse. Deber&amp;iacute;a usar &lt;strong&gt; &lt;code&gt;--skip-worktree&lt;/code&gt; ,&lt;/strong&gt; que es para archivos rastreados modificados que el usuario ya no desea confirmar y mantener &lt;code&gt;--assume-unchanged&lt;/code&gt; para el rendimiento para evitar que git verifique el estado de los archivos rastreados grandes. Consulte &lt;a href=&quot;https://stackoverflow.com/a/13631525/717372&quot;&gt;https://stackoverflow.com/a/13631525/717372&lt;/a&gt; para obtener m&amp;aacute;s detalles ...</target>
        </trans-unit>
        <trans-unit id="21eb2ac0cdcc1bc65e7e9901f8bd153ae5987665" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;git update-index&lt;/strong&gt; does the job for me:</source>
          <target state="translated">&lt;strong&gt;git update-index&lt;/strong&gt; hace el trabajo por m&amp;iacute;:</target>
        </trans-unit>
        <trans-unit id="7b7d160b9ed59263729d1515ccfa762f8c20cadf" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;1&lt;/sup&gt; Because &lt;code&gt;/.git/info/exclude&lt;/code&gt; can be applied to all historical commits using the instructions above, perhaps details about getting a &lt;code&gt;.gitignore&lt;/code&gt; file &lt;em&gt;into&lt;/em&gt; the historical commit(s) that need it is beyond the scope of this answer.  I wanted a proper &lt;code&gt;.gitignore&lt;/code&gt; to be in the root commit, as if it was the first thing I did.  Others may not care since &lt;code&gt;/.git/info/exclude&lt;/code&gt; can accomplish the same thing regardless where the &lt;code&gt;.gitignore&lt;/code&gt; exists in the commit history, and clearly re-writing history is a &lt;strong&gt;very&lt;/strong&gt; touchy subject, even when aware of the &lt;a href=&quot;https://stackoverflow.com/q/1491001&quot;&gt;ramifications&lt;/a&gt;.</source>
          <target state="translated">&lt;sup&gt;1&lt;/sup&gt; Debido a que &lt;code&gt;/.git/info/exclude&lt;/code&gt; se puede aplicar a todas las confirmaciones hist&amp;oacute;ricas utilizando las instrucciones anteriores, quiz&amp;aacute;s los detalles sobre c&amp;oacute;mo obtener un archivo &lt;code&gt;.gitignore&lt;/code&gt; &lt;em&gt;en&lt;/em&gt; las confirmaciones hist&amp;oacute;ricas que lo necesitan est&amp;aacute;n fuera del alcance de esta respuesta. Quer&amp;iacute;a que un &lt;code&gt;.gitignore&lt;/code&gt; adecuado estuviera en el commit ra&amp;iacute;z, como si fuera lo primero que hiciera. Es posible que a otros no les importe, ya que &lt;code&gt;/.git/info/exclude&lt;/code&gt; puede lograr lo mismo independientemente de d&amp;oacute;nde &lt;code&gt;.gitignore&lt;/code&gt; el .gitignore en el historial de confirmaciones, y claramente reescribir el historial es un tema &lt;strong&gt;muy&lt;/strong&gt; delicado, incluso cuando se tiene conocimiento de las &lt;a href=&quot;https://stackoverflow.com/q/1491001&quot;&gt;ramificaciones&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="8b6da13045058d13d3e3a649a46432a4e053b78f" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;2&lt;/sup&gt; Enforcing git ignore behavior after-the-fact by committing the results of a standalone &lt;code&gt;git rm --cached&lt;/code&gt; command may result in newly-ignored file &lt;strong&gt;deletion&lt;/strong&gt; in future pulls from the force-pushed remote. The &lt;code&gt;--prune-empty&lt;/code&gt; flag in the following &lt;code&gt;git filter-branch&lt;/code&gt; command avoids this problem by automatically removing the previous &quot;delete all ignored files&quot; index-only commit.  Re-writing git history also changes commit hashes, which will &lt;a href=&quot;https://stackoverflow.com/q/1491001&quot;&gt;wreak havoc&lt;/a&gt; on future pulls from public/shared/collaborative repos.  Please understand the &lt;a href=&quot;https://stackoverflow.com/q/1491001&quot;&gt;ramifications&lt;/a&gt; fully before doing this to such a repo. &lt;a href=&quot;https://help.github.com/en/articles/removing-sensitive-data-from-a-repository&quot;&gt;This GitHub guide&lt;/a&gt; specifies the following:</source>
          <target state="translated">&lt;sup&gt;2&lt;/sup&gt; Hacer cumplir el comportamiento de git ignore despu&amp;eacute;s de los hechos al &lt;code&gt;git rm --cached&lt;/code&gt; los resultados de un comando independiente git rm --cached puede resultar en la &lt;strong&gt;eliminaci&amp;oacute;n de&lt;/strong&gt; archivos ignorados recientemente en futuros tirones del control remoto forzado. El &lt;code&gt;--prune-empty&lt;/code&gt; en el siguiente comando &lt;code&gt;git filter-branch&lt;/code&gt; evita este problema al eliminar autom&amp;aacute;ticamente la confirmaci&amp;oacute;n de solo &amp;iacute;ndice anterior &quot;eliminar todos los archivos ignorados&quot;. Reescribir el historial de git tambi&amp;eacute;n cambia los hash de confirmaci&amp;oacute;n, lo que causar&amp;aacute; &lt;a href=&quot;https://stackoverflow.com/q/1491001&quot;&gt;estragos&lt;/a&gt; en futuros tirones de repositorios p&amp;uacute;blicos / compartidos / colaborativos. Por favor, comprenda las &lt;a href=&quot;https://stackoverflow.com/q/1491001&quot;&gt;ramificaciones&lt;/a&gt; completamente antes de hacer esto a dicho repositorio. &lt;a href=&quot;https://help.github.com/en/articles/removing-sensitive-data-from-a-repository&quot;&gt;Esta gu&amp;iacute;a de GitHub&lt;/a&gt; especifica lo siguiente:</target>
        </trans-unit>
        <trans-unit id="35bcd509556e93a5b4f240c0aaa275f71d83fd11" translate="yes" xml:space="preserve">
          <source>All methods of enforcing git ignore behavior after-the-fact effectively re-write history and thus have &lt;a href=&quot;https://stackoverflow.com/q/1491001&quot;&gt;significant ramifications&lt;/a&gt; for any public/shared/collaborative repos that might be pulled after this process. &lt;sup&gt;2&lt;/sup&gt;</source>
          <target state="translated">Todos los m&amp;eacute;todos para hacer cumplir git ignoran el comportamiento despu&amp;eacute;s de los hechos reescriben el historial de manera efectiva y, por lo tanto, tienen &lt;a href=&quot;https://stackoverflow.com/q/1491001&quot;&gt;ramificaciones significativas&lt;/a&gt; para cualquier repositorio p&amp;uacute;blico / compartido / colaborativo que se pueda extraer despu&amp;eacute;s de este proceso. &lt;sup&gt;2&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="7e9e185f8553a03fd2bb4775718d5197931af7f1" translate="yes" xml:space="preserve">
          <source>Also, the comments/&lt;a href=&quot;https://stackoverflow.com/posts/57454176/revisions&quot;&gt;revision history&lt;/a&gt; of &lt;a href=&quot;https://stackoverflow.com/a/57454176&quot;&gt;this answer&lt;/a&gt; (&lt;a href=&quot;https://stackoverflow.com/posts/57418769/revisions&quot;&gt;and revision history&lt;/a&gt; of &lt;a href=&quot;https://stackoverflow.com/posts/57418769&quot;&gt;this question&lt;/a&gt;) may be useful/enlightening.</source>
          <target state="translated">Adem&amp;aacute;s, los comentarios / &lt;a href=&quot;https://stackoverflow.com/posts/57454176/revisions&quot;&gt;historial&lt;/a&gt; de revisi&amp;oacute;n de &lt;a href=&quot;https://stackoverflow.com/a/57454176&quot;&gt;esta respuesta&lt;/a&gt; ( &lt;a href=&quot;https://stackoverflow.com/posts/57418769/revisions&quot;&gt;y el historial&lt;/a&gt; de revisi&amp;oacute;n de &lt;a href=&quot;https://stackoverflow.com/posts/57418769&quot;&gt;esta pregunta&lt;/a&gt; ) pueden ser &amp;uacute;tiles / esclarecedores.</target>
        </trans-unit>
        <trans-unit id="f1837dc932cb205db53c46200c2d6db222867832" translate="yes" xml:space="preserve">
          <source>Alternative solutions that &lt;strong&gt;do not&lt;/strong&gt; affect the remote repo are &lt;code&gt;git update-index --assume-unchanged &amp;lt;/path/file&amp;gt;&lt;/code&gt; or &lt;code&gt;git update-index --skip-worktree &amp;lt;file&amp;gt;&lt;/code&gt;, examples of which can be found &lt;a href=&quot;https://stackoverflow.com/a/20241145&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">Las soluciones alternativas que &lt;strong&gt;no&lt;/strong&gt; afectan al repositorio remoto son &lt;code&gt;git update-index --assume-unchanged &amp;lt;/path/file&amp;gt;&lt;/code&gt; o &lt;code&gt;git update-index --skip-worktree &amp;lt;file&amp;gt;&lt;/code&gt; , cuyos ejemplos se pueden encontrar &lt;a href=&quot;https://stackoverflow.com/a/20241145&quot;&gt;aqu&amp;iacute;&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="6a41eb1605b5c4997fa5c53a67b3bccfeac6b535" translate="yes" xml:space="preserve">
          <source>Anti-recommentation: Don't use assume-unchanged, it will only end in tears (because having git lie to itself will cause bad things to happen, like your change being lost forever).</source>
          <target state="translated">Antirrecompensación:No uses el &quot;assume-unchanged&quot;,sólo terminará en lágrimas (porque el tener git mintiéndose a sí mismo causará que sucedan cosas malas,como que tu cambio se pierda para siempre).</target>
        </trans-unit>
        <trans-unit id="d67fefbf8e2fd8148f6312fb95b34f9b6c28c3ac" translate="yes" xml:space="preserve">
          <source>Basing on it I do the following, if file is already tracked:</source>
          <target state="translated">Basándome en ello hago lo siguiente,si el archivo ya está rastreado:</target>
        </trans-unit>
        <trans-unit id="ee0e2ab0d04aa5d054177f7139fe2f2993169040" translate="yes" xml:space="preserve">
          <source>Before proceeding, make sure all your changes are committed, including your .gitignore file.</source>
          <target state="translated">Antes de proceder,asegúrate de que todos los cambios se han realizado,incluyendo tu archivo .gitignore.</target>
        </trans-unit>
        <trans-unit id="202ec7e461ae2d976889f5c200423159e33e4cff" translate="yes" xml:space="preserve">
          <source>But in Git every time you commit, or save the state of your project, it basically takes a picture of what &lt;strong&gt;&lt;em&gt;all your files&lt;/em&gt;&lt;/strong&gt; look like at that moment and stores a reference to that snapshot. So, if you added file once, it will always be present  in that snapshot.</source>
          <target state="translated">Pero en Git cada vez que se compromete, o guarda el estado de su proyecto, b&amp;aacute;sicamente toma una imagen de c&amp;oacute;mo se ven &lt;strong&gt;&lt;em&gt;todos sus archivos&lt;/em&gt;&lt;/strong&gt; en ese momento y almacena una referencia a esa instant&amp;aacute;nea. Entonces, si agreg&amp;oacute; el archivo una vez, siempre estar&amp;aacute; presente en esa instant&amp;aacute;nea.</target>
        </trans-unit>
        <trans-unit id="34982d9388d501a1c59663bb20321f9e535e5325" translate="yes" xml:space="preserve">
          <source>Commit file config-sample.ini and ignore file config.ini, have a script or similar copy the file as necessary if necessary.</source>
          <target state="translated">Confirmar el archivo config-sample.ini e ignorar el archivo config.ini,hacer que un script o similar copie el archivo como sea necesario si es necesario.</target>
        </trans-unit>
        <trans-unit id="5e69dfeea1ca71ec5cba8ba3812cefb3dde8a6d7" translate="yes" xml:space="preserve">
          <source>Do the following steps serially,you will be fine.</source>
          <target state="translated">Haz los siguientes pasos en serie,estarás bien.</target>
        </trans-unit>
        <trans-unit id="7efbf048e80845e59aa478983b3f909934d4ee15" translate="yes" xml:space="preserve">
          <source>Doing this went into each folder under the 'root' of where I was at and excluded all files that matched the pattern.</source>
          <target state="translated">Al hacer esto entré en cada carpeta bajo la &quot;raíz&quot; de donde estaba y excluí todos los archivos que coincidían con el patrón.</target>
        </trans-unit>
        <trans-unit id="ce417ee80599859b918672e3deab176250d6a6fa" translate="yes" xml:space="preserve">
          <source>Especially for the IDE based files, I use this:</source>
          <target state="translated">Especialmente para los archivos basados en el IDE,uso esto:</target>
        </trans-unit>
        <trans-unit id="5f23cb20c4075e9581d1185b5b7df71903a476f7" translate="yes" xml:space="preserve">
          <source>FWIW, potential methods may include &lt;code&gt;git rebase&lt;/code&gt; or a &lt;code&gt;git filter-branch&lt;/code&gt; that copies an &lt;em&gt;external&lt;/em&gt;&lt;code&gt;.gitignore&lt;/code&gt; into each commit, like the answers to &lt;a href=&quot;https://stackoverflow.com/q/43463687&quot;&gt;this question&lt;/a&gt;</source>
          <target state="translated">FWIW, los m&amp;eacute;todos potenciales pueden incluir &lt;code&gt;git rebase&lt;/code&gt; o una &lt;code&gt;git filter-branch&lt;/code&gt; que copia un &lt;code&gt;.gitignore&lt;/code&gt; &lt;em&gt;externo&lt;/em&gt; en cada confirmaci&amp;oacute;n, como las respuestas a &lt;a href=&quot;https://stackoverflow.com/q/43463687&quot;&gt;esta pregunta&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f9934c535834db75b1af736d96add4343490deca" translate="yes" xml:space="preserve">
          <source>File content will be replaced by the remote content. Paste your changes from safe place to file and perform again:</source>
          <target state="translated">El contenido del archivo será reemplazado por el contenido remoto.Pegue los cambios de un lugar seguro al archivo y vuelva a realizarlos:</target>
        </trans-unit>
        <trans-unit id="fbe38db5f25e43c80761fee281d19a80da24dfe5" translate="yes" xml:space="preserve">
          <source>Finally, follow the rest of &lt;a href=&quot;https://help.github.com/en/articles/removing-sensitive-data-from-a-repository&quot;&gt;this GitHub guide&lt;/a&gt; (starting at step 6) &lt;strong&gt;which includes important warnings/information about the commands below&lt;/strong&gt;.</source>
          <target state="translated">Finalmente, siga el resto de &lt;a href=&quot;https://help.github.com/en/articles/removing-sensitive-data-from-a-repository&quot;&gt;esta gu&amp;iacute;a de GitHub&lt;/a&gt; (comenzando en el paso 6) &lt;strong&gt;que incluye advertencias / informaci&amp;oacute;n importante sobre los comandos a continuaci&amp;oacute;n&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="0ba0b957e82e6fe3a824c66fd56f4787439fab3c" translate="yes" xml:space="preserve">
          <source>Finally, make a commit!</source>
          <target state="translated">¡Por fin,comprométete!</target>
        </trans-unit>
        <trans-unit id="ec0c3b76630fd745381cc215a284820af75a683a" translate="yes" xml:space="preserve">
          <source>Footnotes</source>
          <target state="translated">Footnotes</target>
        </trans-unit>
        <trans-unit id="3377231d1621da920e2f6d01f618d62a65db90db" translate="yes" xml:space="preserve">
          <source>For instance the slnx.sqlite, I just got rid off it completely like following:</source>
          <target state="translated">Por ejemplo,el slnx.sqlite,me deshice de él completamente como si lo siguiera:</target>
        </trans-unit>
        <trans-unit id="3bc29b2292be0b2cd02509d2f723c4a7e560576e" translate="yes" xml:space="preserve">
          <source>From this moment all local changes in this file will be ignored and will not go to remote. If file is changed on remote, conflict will occure, when &lt;code&gt;git pull&lt;/code&gt;. Stash won't work. To resolve it, &lt;em&gt;copy file content to the safe place&lt;/em&gt; and follow these steps:</source>
          <target state="translated">A partir de este momento, todos los cambios locales en este archivo ser&amp;aacute;n ignorados y no ir&amp;aacute;n a remoto. Si el archivo se cambia en el control remoto, se producir&amp;aacute; un conflicto cuando &lt;code&gt;git pull&lt;/code&gt; . Stash no funcionar&amp;aacute;. Para resolverlo, &lt;em&gt;copie el contenido del archivo en el lugar seguro&lt;/em&gt; y siga estos pasos:</target>
        </trans-unit>
        <trans-unit id="fbab929a9779a2ee3e87320c92fff544c9f8051f" translate="yes" xml:space="preserve">
          <source>General advice: &lt;strong&gt;start with a clean repo&lt;/strong&gt; - everything committed, nothing pending in working directory or index, &lt;strong&gt;and make a backup&lt;/strong&gt;!</source>
          <target state="translated">Consejo general: &lt;strong&gt;comience con un repositorio limpio&lt;/strong&gt; : todo est&amp;aacute; comprometido, nada pendiente en el directorio o &amp;iacute;ndice de trabajo, &amp;iexcl; &lt;strong&gt;y haga una copia de seguridad&lt;/strong&gt; !</target>
        </trans-unit>
        <trans-unit id="383228a7a69a177f4167123e5eea04fe6397b184" translate="yes" xml:space="preserve">
          <source>Hat tip to @AkiraYamamoto for pointing us in the right direction.</source>
          <target state="translated">Un consejo para @AkiraYamamoto por indicarnos la dirección correcta.</target>
        </trans-unit>
        <trans-unit id="566e08627539a7d2ecb5033b1abbdc58839c476c" translate="yes" xml:space="preserve">
          <source>Have your application look for an ignored file config-overide.ini and use that over the committed file config.ini (or alternately, look for ~/.config/myapp.ini, or $MYCONFIGFILE)</source>
          <target state="translated">Haga que su aplicación busque un archivo ignorado config-overide.ini y lo use sobre el archivo comprometido config.ini (o alternativamente,busque ~.configmyapp.ini,o $MYCONFIGFILE)</target>
        </trans-unit>
        <trans-unit id="5bf6447b60376b1563849f40943b48a5d87e3cf8" translate="yes" xml:space="preserve">
          <source>Hope this helps others!</source>
          <target state="translated">¡Espero que esto ayude a los demás!</target>
        </trans-unit>
        <trans-unit id="a1f359c689bb3b599c937d2b3bde4bbcb5336415" translate="yes" xml:space="preserve">
          <source>How do you force &lt;code&gt;git&lt;/code&gt; to completely forget about [a file]?</source>
          <target state="translated">&amp;iquest;C&amp;oacute;mo &lt;code&gt;git&lt;/code&gt; a git a olvidarse por completo de [un archivo]?</target>
        </trans-unit>
        <trans-unit id="3f4c43dc61508984fa8447acacd10ea274b878cc" translate="yes" xml:space="preserve">
          <source>How to make Git “forget” about a file that was tracked but is now in .gitignore</source>
          <target state="translated">Cómo hacer que Git &quot;olvide&quot; un archivo que fue rastreado pero que ahora está en .gitignore</target>
        </trans-unit>
        <trans-unit id="ffb3146d4b977e8077d09a9c235b576b6fb6a3df" translate="yes" xml:space="preserve">
          <source>However, that file keeps showing up in &lt;code&gt;git status&lt;/code&gt; after it's edited. How do you force &lt;code&gt;git&lt;/code&gt; to completely forget about it?</source>
          <target state="translated">Sin embargo, ese archivo sigue apareciendo en &lt;code&gt;git status&lt;/code&gt; despu&amp;eacute;s de ser editado. &amp;iquest;C&amp;oacute;mo &lt;code&gt;git&lt;/code&gt; a git a olvidarse por completo?</target>
        </trans-unit>
        <trans-unit id="3da73f13e2ca68488453d76581d10690fca48b23" translate="yes" xml:space="preserve">
          <source>I accomplished this by using &lt;a href=&quot;http://git-scm.com/docs/git-filter-branch&quot;&gt;git filter-branch&lt;/a&gt;. The exact command I used was taken from the man page:</source>
          <target state="translated">Lo logr&amp;eacute; usando &lt;a href=&quot;http://git-scm.com/docs/git-filter-branch&quot;&gt;git filter-branch&lt;/a&gt; . El comando exacto que utilic&amp;eacute; fue tomado de la p&amp;aacute;gina del manual:</target>
        </trans-unit>
        <trans-unit id="e3d824cfebc37780973279c6ef69aebdc266297a" translate="yes" xml:space="preserve">
          <source>I always use this command to remove those untracked files. 
One-line, Unix-style, clean output:</source>
          <target state="translated">Siempre uso este comando para eliminar esos archivos no rastreados.Una línea,estilo Unix,salida limpia:</target>
        </trans-unit>
        <trans-unit id="30df5b0bdab26d64e3f314c5f82d939e368718be" translate="yes" xml:space="preserve">
          <source>I liked JonBrave's answer but I have messy enough working directories that commit -a scares me a bit, so here's what I've done:</source>
          <target state="translated">Me gustó la respuesta de JonBrave pero tengo suficientes directorios de trabajo que se comprometen...me asusta un poco,así que esto es lo que he hecho:</target>
        </trans-unit>
        <trans-unit id="ae997b72f572c164f9db73d00da169b807fa2145" translate="yes" xml:space="preserve">
          <source>I recommend reading the documentation, but basically:</source>
          <target state="translated">Recomiendo leer la documentación,pero básicamente:</target>
        </trans-unit>
        <trans-unit id="298daaa4a77ce41f5637f4872a4f45b4106bf606" translate="yes" xml:space="preserve">
          <source>I think, that maybe git can't totally forget about file because of its conception (&lt;a href=&quot;https://git-scm.com/book/en/v2/Getting-Started-Git-Basics&quot;&gt;section &quot;Snapshots, Not Differences&quot;&lt;/a&gt;).</source>
          <target state="translated">Creo que tal vez git no puede olvidarse por completo del archivo debido a su concepci&amp;oacute;n ( &lt;a href=&quot;https://git-scm.com/book/en/v2/Getting-Started-Git-Basics&quot;&gt;secci&amp;oacute;n &quot;Instant&amp;aacute;neas, no diferencias&quot;&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="39a2708982ad9e80eba23666c91b4ae5bdb874e7" translate="yes" xml:space="preserve">
          <source>If anyone having hard time on Windows and you wanna ignore entire folder, 'cd' to desired the 'folder' and do 'Git Bash Here'.</source>
          <target state="translated">Si alguien tiene problemas con Windows y quiere ignorar toda la carpeta,&quot;cd&quot; a la &quot;carpeta&quot; deseada y haga &quot;Git Bash Here&quot;.</target>
        </trans-unit>
        <trans-unit id="0e021844325108de6923cd018135a48813b2d1b1" translate="yes" xml:space="preserve">
          <source>If everyone, who works with project, will perform &lt;code&gt;git update-index --skip-worktree &amp;lt;file&amp;gt;&lt;/code&gt;, problems with &lt;code&gt;pull&lt;/code&gt; should be absent. This solution is OK for configurations files, when every developer has their own project configuration.</source>
          <target state="translated">Si todos, que trabajan con el proyecto, realizar&amp;aacute;n &lt;code&gt;git update-index --skip-worktree &amp;lt;file&amp;gt;&lt;/code&gt; , los problemas con &lt;code&gt;pull&lt;/code&gt; deber&amp;iacute;an estar ausentes. Esta soluci&amp;oacute;n est&amp;aacute; bien para archivos de configuraci&amp;oacute;n, cuando cada desarrollador tiene su propia configuraci&amp;oacute;n de proyecto.</target>
        </trans-unit>
        <trans-unit id="25e96f5e32b3e98d46d6a3c82c2a38e2f06e1122" translate="yes" xml:space="preserve">
          <source>If you cannot &lt;code&gt;git rm&lt;/code&gt; a tracked file because other people might need it (warning, even if &lt;em&gt;you&lt;/em&gt;&lt;code&gt;git rm --cached&lt;/code&gt;, when someone else gets this change, their files will be deleted in their filesystem).  These are often done due to config file overrides, authentication credentials, etc. Please look at &lt;a href=&quot;https://gist.github.com/1423106&quot;&gt;https://gist.github.com/1423106&lt;/a&gt; for ways people have worked around the problem.</source>
          <target state="translated">Si no puede dar &lt;code&gt;git rm&lt;/code&gt; un archivo rastreado porque otras personas podr&amp;iacute;an necesitarlo (advertencia, incluso si &lt;code&gt;git rm --cached&lt;/code&gt; , cuando alguien m&amp;aacute;s recibe este cambio, sus archivos se eliminar&amp;aacute;n en su sistema de archivos). A menudo, esto se hace debido a anulaciones de archivos de configuraci&amp;oacute;n, credenciales de autenticaci&amp;oacute;n, etc. Consulte &lt;a href=&quot;https://gist.github.com/1423106&quot;&gt;https://gist.github.com/1423106&lt;/a&gt; para conocer las formas en que las personas han solucionado el problema.</target>
        </trans-unit>
        <trans-unit id="9143aec05a9d0455022a9d3efa538b3f3f9385bc" translate="yes" xml:space="preserve">
          <source>If you don't want to use the CLI and are working on Windows, a very simple solution is to use &lt;a href=&quot;https://tortoisegit.org/&quot;&gt;TortoiseGit&lt;/a&gt;, it has the &quot;Delete (keep local)&quot; Action in the menu which works fine.</source>
          <target state="translated">Si no desea usar la CLI y est&amp;aacute; trabajando en Windows, una soluci&amp;oacute;n muy simple es usar &lt;a href=&quot;https://tortoisegit.org/&quot;&gt;TortoiseGit&lt;/a&gt; , tiene la acci&amp;oacute;n &quot;Eliminar (mantener local)&quot; en el men&amp;uacute; que funciona bien.</target>
        </trans-unit>
        <trans-unit id="0d71f20100d6c8cc8bd6973525e16dd6ba961dbd" translate="yes" xml:space="preserve">
          <source>If you want to remove a whole folder, you need to remove all files in it recursively.</source>
          <target state="translated">Si quieres eliminar una carpeta entera,debes eliminar todos los archivos de la misma de forma recursiva.</target>
        </trans-unit>
        <trans-unit id="15d61d53688648e59ae0d7cc465a1adfc9f32e65" translate="yes" xml:space="preserve">
          <source>If you'd like to specify files by name, you can do that too:</source>
          <target state="translated">Si desea especificar los archivos por nombre,también puede hacerlo:</target>
        </trans-unit>
        <trans-unit id="5903c3f8465c60a50db152209be8cfcd2f531ee6" translate="yes" xml:space="preserve">
          <source>Ignore them by:</source>
          <target state="translated">Ignóralos:</target>
        </trans-unit>
        <trans-unit id="6909856450b8468ce19ecf4aa7c57653169fd9a9" translate="yes" xml:space="preserve">
          <source>In case of already committed &lt;code&gt;DS_Store&lt;/code&gt;:</source>
          <target state="translated">En caso de &lt;code&gt;DS_Store&lt;/code&gt; ya comprometido:</target>
        </trans-unit>
        <trans-unit id="cb61bbad89d4ac5b475150e04f8ff4d53d867cc4" translate="yes" xml:space="preserve">
          <source>In fact, this solution will cause the file to be &lt;strong&gt;deleted&lt;/strong&gt; in every other instance of the repository when executing a &lt;code&gt;git pull&lt;/code&gt;!</source>
          <target state="translated">De hecho, esta soluci&amp;oacute;n har&amp;aacute; que el archivo se &lt;strong&gt;elimine&lt;/strong&gt; en cualquier otra instancia del repositorio al ejecutar un &lt;code&gt;git pull&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b6281cb7098a9a1bf8ab74eea9cf623585f3557d" translate="yes" xml:space="preserve">
          <source>In my case here, I had several .lock files in several directories that I needed to remove. I ran the following and it worked without having to go into each directory to remove them:</source>
          <target state="translated">En mi caso,tenía varios archivos .lock en varios directorios que necesitaba eliminar.Corrí lo siguiente y funcionó sin tener que ir a cada directorio para eliminarlos:</target>
        </trans-unit>
        <trans-unit id="f2ee46b5bf348489144ff43d13bb1f9db4b9e4cc" translate="yes" xml:space="preserve">
          <source>In the manual page &lt;strong&gt;git-ls-files(1)&lt;/strong&gt;, it states:</source>
          <target state="translated">En la p&amp;aacute;gina del manual &lt;strong&gt;git-ls-files (1)&lt;/strong&gt; , dice:</target>
        </trans-unit>
        <trans-unit id="1e3a8ac2b04f693dce99c91c6d013b19a784ceac" translate="yes" xml:space="preserve">
          <source>It is not very convenient to do this every time, when file has been changed on remote, but can protect it from overwriting by remote content.</source>
          <target state="translated">No es muy conveniente hacer esto cada vez,cuando el archivo ha sido cambiado a distancia,pero puede protegerlo de la sobrescritura por contenido remoto.</target>
        </trans-unit>
        <trans-unit id="7da0a30820d35bda263d21ef6c921be754b4fb2b" translate="yes" xml:space="preserve">
          <source>It lists all your ignored files, replace every output line with a quoted line instead to handle paths with spaces inside, and pass everything to &lt;code&gt;git rm -r --cached&lt;/code&gt; to remove the paths/files/dirs from the index.</source>
          <target state="translated">Enumera todos sus archivos ignorados, reemplaza cada l&amp;iacute;nea de salida con una l&amp;iacute;nea entre comillas para manejar rutas con espacios en el interior y pasa todo a &lt;code&gt;git rm -r --cached&lt;/code&gt; para eliminar las rutas / archivos / directorios del &amp;iacute;ndice.</target>
        </trans-unit>
        <trans-unit id="427dd941220a11cde80854cae040581bf7a7bc39" translate="yes" xml:space="preserve">
          <source>Just keep that in mind that some of those files stores some local user settings and preferences for projects (like what files you had open). So every time you navigate or do some changes in your IDE, that file is changed and therefore it checks it out and show as there are uncommitted changes.</source>
          <target state="translated">Sólo ten en cuenta que algunos de esos archivos almacenan algunas configuraciones y preferencias de usuario locales para los proyectos (como qué archivos tenías abiertos).Por lo tanto,cada vez que navegas o realizas algún cambio en el IDE,ese archivo cambia y,por lo tanto,lo comprueba y muestra como hay cambios no comprometidos.</target>
        </trans-unit>
        <trans-unit id="1e1f9446808bef2a81577b3811952c9be0140995" translate="yes" xml:space="preserve">
          <source>Keep the config file on a deploy branch dedicated to it that is never merged to master.  When you want to deploy/compile/test you merge to that branch and get that file.  This is essentially the smudge/clean approach except using human merge policies and extra-git modules.</source>
          <target state="translated">Mantenga el archivo de configuración en una rama de despliegue dedicada a él que nunca se fusiona con el maestro.Cuando quieras desplegar el más poderoso te fusionas a esa rama y obtienes ese archivo.Este es esencialmente el enfoque de smudgeclean,excepto por el uso de políticas de fusión humana y módulos extra-git.</target>
        </trans-unit>
        <trans-unit id="6b5335338767809a90c12fd0a6cc98271bc8581c" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s say you have already added/committed some files to your git repository and you then add them to your .gitignore; these files will still be present in your repository index. This article we will see how to get rid of them.</source>
          <target state="translated">Digamos que ya ha agregado / comprometido algunos archivos a su repositorio git y luego los agrega a su .gitignore; estos archivos seguir&amp;aacute;n presentes en su &amp;iacute;ndice de repositorio. En este art&amp;iacute;culo veremos c&amp;oacute;mo deshacerse de ellos.</target>
        </trans-unit>
        <trans-unit id="3d06145c701eb9f7bcded9868ffbb9cfbfbf4af3" translate="yes" xml:space="preserve">
          <source>Move or copy the file to a safe location, so you don't lose it. Then git rm the file and commit. The file will still show up if you revert to one of those earlier commits, or another branch where it has not been removed. However, in all future commits, you will not see the file again. If the file is in the git ignore, then you can move it back into the folder, and git won't see it.</source>
          <target state="translated">Mueve o copia el archivo a un lugar seguro,para que no lo pierdas.Entonces,coge el archivo y confírmalo.El archivo seguirá apareciendo si vuelves a una de esas confirmaciones anteriores,o a otra rama donde no haya sido eliminado.Sin embargo,en todas las confirmaciones futuras,no verás el archivo de nuevo.Si el archivo está en el git ignorar,entonces puedes moverlo de nuevo a la carpeta,y el git no lo verá.</target>
        </trans-unit>
        <trans-unit id="b531fabd41eb9da9a0ba874d765d34f24cb5c8b2" translate="yes" xml:space="preserve">
          <source>Or one-liner:</source>
          <target state="translated">O una línea:</target>
        </trans-unit>
        <trans-unit id="41da50eece3db9d79a767edff75028a53b36f061" translate="yes" xml:space="preserve">
          <source>Other devs that pull from now-modified remote repo should make a backup and then:</source>
          <target state="translated">Otros dispositivos que se basan en el repositorio remoto ahora modificado deberían hacer una copia de seguridad y luego..:</target>
        </trans-unit>
        <trans-unit id="b54a2d9b41681e32ea54dbeeffc97236f62a7a92" translate="yes" xml:space="preserve">
          <source>Push the changes to your remote to see the changes effective there as well.</source>
          <target state="translated">Presione los cambios en su control remoto para ver los cambios efectivos allí también.</target>
        </trans-unit>
        <trans-unit id="d5809414f5464acab9aa7ba79e8f76e8e3a3a51a" translate="yes" xml:space="preserve">
          <source>So I offer</source>
          <target state="translated">Así que ofrezco</target>
        </trans-unit>
        <trans-unit id="960fb31d4493678100902bc9586b9c046362e226" translate="yes" xml:space="preserve">
          <source>Source: &lt;a href=&quot;https://confluence.atlassian.com/bitbucket/reduce-repository-size-321848262.html&quot;&gt;https://confluence.atlassian.com/bitbucket/reduce-repository-size-321848262.html&lt;/a&gt;</source>
          <target state="translated">Fuente: &lt;a href=&quot;https://confluence.atlassian.com/bitbucket/reduce-repository-size-321848262.html&quot;&gt;https://confluence.atlassian.com/bitbucket/reduce-repository-size-321848262.html&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="612e5a5b717eb6a345fff1875325e4e780814272" translate="yes" xml:space="preserve">
          <source>Step 1: Commit all your changes</source>
          <target state="translated">Paso 1:Compromete todos tus cambios</target>
        </trans-unit>
        <trans-unit id="77880434b84506c14708316521c7f71b103ddbdc" translate="yes" xml:space="preserve">
          <source>Step 2: Remove everything from the repository</source>
          <target state="translated">Paso 2:Quitar todo del depósito</target>
        </trans-unit>
        <trans-unit id="9c2ed963345aea24138333def583839f931c4674" translate="yes" xml:space="preserve">
          <source>Step 3: Re add everything</source>
          <target state="translated">Paso 3:Re agregar todo</target>
        </trans-unit>
        <trans-unit id="1a2dff51a26bbc76eec72ab492cccbb8f3c8089b" translate="yes" xml:space="preserve">
          <source>Step 4: Commit</source>
          <target state="translated">Paso 4:Comprometerse</target>
        </trans-unit>
        <trans-unit id="62e557118db016748e85b8aff058461061ff972e" translate="yes" xml:space="preserve">
          <source>Tell your collaborators to &lt;a href=&quot;https://git-scm.com/book/en/Git-Branching-Rebasing&quot;&gt;rebase&lt;/a&gt;, &lt;em&gt;not&lt;/em&gt; merge, any branches they created off of your old (tainted) repository history. One merge commit could reintroduce some or all of the tainted history that you just went to the trouble of purging.</source>
          <target state="translated">D&amp;iacute;gale a sus colaboradores que &lt;a href=&quot;https://git-scm.com/book/en/Git-Branching-Rebasing&quot;&gt;modifiquen&lt;/a&gt; , &lt;em&gt;no&lt;/em&gt; fusionen, las ramas que crearon a partir de su historial de repositorio antiguo (contaminado). Una confirmaci&amp;oacute;n de fusi&amp;oacute;n podr&amp;iacute;a reintroducir parte o la totalidad de la historia contaminada que acaba de tomarse la molestia de purgar.</target>
        </trans-unit>
        <trans-unit id="0507b4cf9226f930b3c47ada0f53498a6301526a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://rtyley.github.io/bfg-repo-cleaner/&quot;&gt;BFG&lt;/a&gt; is specifically designed for removing unwanted data like big files or passwords from Git repos, so it has a simple flag that will remove any large historical (not-in-your-current-commit) files: '--strip-blobs-bigger-than'</source>
          <target state="translated">El &lt;a href=&quot;https://rtyley.github.io/bfg-repo-cleaner/&quot;&gt;BFG&lt;/a&gt; est&amp;aacute; espec&amp;iacute;ficamente dise&amp;ntilde;ado para eliminar datos no deseados como archivos grandes o contrase&amp;ntilde;as de repositorios Git, por lo que tiene un indicador simple que eliminar&amp;aacute; cualquier archivo hist&amp;oacute;rico grande (no en su compromiso actual): '--strip-blobs- m&amp;aacute;s grande que'</target>
        </trans-unit>
        <trans-unit id="cf74012f43e3173d4f2f3a304c076743addefd4b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.gitignore&lt;/code&gt; finally ignores tracked-but-deleted files. You can test this for yourself by running the following script. The final &lt;code&gt;git status&lt;/code&gt; statement should report &quot;nothing to commit&quot;.</source>
          <target state="translated">El &lt;code&gt;.gitignore&lt;/code&gt; finalmente ignora los archivos rastreados pero eliminados. Puede probar esto usted mismo ejecutando el siguiente script. La declaraci&amp;oacute;n de &lt;code&gt;git status&lt;/code&gt; final de git debe informar &quot;nada que confirmar&quot;.</target>
        </trans-unit>
        <trans-unit id="18bd883e64a162aac02dba83baaf242c9aba9d6d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rm&lt;/code&gt; command can be unforgiving. If you wish to try what it does beforehand, add the &lt;code&gt;-n&lt;/code&gt; or &lt;code&gt;--dry-run&lt;/code&gt; flag to test things out.</source>
          <target state="translated">El comando &lt;code&gt;rm&lt;/code&gt; puede ser implacable. Si desea probar lo que hace de antemano, agregue el &lt;code&gt;--dry-run&lt;/code&gt; &lt;code&gt;-n&lt;/code&gt; o --dry-run para probar las cosas.</target>
        </trans-unit>
        <trans-unit id="e219646ce5997a53b1eec4fddf7d5da98274f8a7" translate="yes" xml:space="preserve">
          <source>The BFG is 10-1000x faster than git filter-branch, and generally much easier to use - check the &lt;a href=&quot;https://rtyley.github.io/bfg-repo-cleaner/#usage&quot;&gt;full usage instructions&lt;/a&gt; and &lt;a href=&quot;https://rtyley.github.io/bfg-repo-cleaner/#examples&quot;&gt;examples&lt;/a&gt; for more details.</source>
          <target state="translated">El BFG es 10-1000x m&amp;aacute;s r&amp;aacute;pido que git filter-branch y, en general, es mucho m&amp;aacute;s f&amp;aacute;cil de usar: consulte las &lt;a href=&quot;https://rtyley.github.io/bfg-repo-cleaner/#usage&quot;&gt;instrucciones de uso completas&lt;/a&gt; y los &lt;a href=&quot;https://rtyley.github.io/bfg-repo-cleaner/#examples&quot;&gt;ejemplos&lt;/a&gt; para obtener m&amp;aacute;s detalles.</target>
        </trans-unit>
        <trans-unit id="4e1d1bc82d1b78eb89712cf8828bb7c8cc774d0a" translate="yes" xml:space="preserve">
          <source>The accepted answer does not &quot;make Git &lt;strong&gt;&quot;forget&quot;&lt;/strong&gt; about a file...&quot; (historically).  It only makes git &lt;strong&gt;ignore&lt;/strong&gt; the file in the present/future.</source>
          <target state="translated">La respuesta aceptada no &quot;hace que Git &lt;strong&gt;&quot; se olvide &quot;&lt;/strong&gt; de un archivo ...&quot; (hist&amp;oacute;ricamente). Solo hace que git &lt;strong&gt;ignore&lt;/strong&gt; el archivo en el presente / futuro.</target>
        </trans-unit>
        <trans-unit id="bd8f4258fd7f17f2cbd6e097a5da666229f8a59c" translate="yes" xml:space="preserve">
          <source>The answer from Matt Fear was the most effective IMHO. The following is just a PowerShell script for those in windows to only remove files from their git repo that matches their exclusion list.</source>
          <target state="translated">La respuesta de Matt Fear fue la más efectiva IMHO.Lo siguiente es sólo un script de PowerShell para que los que están en windows sólo quiten los archivos de su repositorio git que coincidan con su lista de exclusión.</target>
        </trans-unit>
        <trans-unit id="67e52d337d22c9b5bfb6014db3c396cfda77accb" translate="yes" xml:space="preserve">
          <source>The copy/paste answer is &lt;code&gt;git rm --cached -r .; git add .; git status&lt;/code&gt;</source>
          <target state="translated">La respuesta de copiar / pegar es &lt;code&gt;git rm --cached -r .; git add .; git status&lt;/code&gt; git add. estado git</target>
        </trans-unit>
        <trans-unit id="78a25064d23dc897dd87d00c940f9b4e4c4ffb99" translate="yes" xml:space="preserve">
          <source>The correct way to force git to forget about a file is documented by GitHub &lt;a href=&quot;https://help.github.com/en/articles/removing-sensitive-data-from-a-repository&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">GitHub documenta &lt;a href=&quot;https://help.github.com/en/articles/removing-sensitive-data-from-a-repository&quot;&gt;aqu&amp;iacute; la&lt;/a&gt; forma correcta de forzar a git a olvidarse de un archivo.</target>
        </trans-unit>
        <trans-unit id="e7351c780e287a42a26ece70eefbcf456f1046dd" translate="yes" xml:space="preserve">
          <source>The removal of the file from the head revision will happen on the next commit.</source>
          <target state="translated">La eliminación del archivo de la revisión de la cabeza ocurrirá en la próxima confirmación.</target>
        </trans-unit>
        <trans-unit id="aef3fa74c8e59e395be7f68fe29a155144721883" translate="yes" xml:space="preserve">
          <source>The series of commands below will remove all of the items from the Git Index (not from the working directory or local repo), and then updates the Git Index, while respecting git ignores. &lt;em&gt;PS. Index = Cache&lt;/em&gt;</source>
          <target state="translated">La serie de comandos a continuaci&amp;oacute;n eliminar&amp;aacute; todos los elementos del &amp;Iacute;ndice de Git (no del directorio de trabajo o del repositorio local), y luego actualizar&amp;aacute; el &amp;Iacute;ndice de Git, respetando los ignorados de git. &lt;em&gt;PD.&lt;/em&gt; &lt;em&gt;&amp;Iacute;ndice = cach&amp;eacute;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="059b6a3f58c111d094d712b8584163f9e7b63336" translate="yes" xml:space="preserve">
          <source>There is a file that was being tracked by &lt;code&gt;git&lt;/code&gt;, but now the file is on the &lt;code&gt;.gitignore&lt;/code&gt; list.</source>
          <target state="translated">Hay un archivo que estaba siendo rastreado por &lt;code&gt;git&lt;/code&gt; , pero ahora el archivo est&amp;aacute; en la lista &lt;code&gt;.gitignore&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="99eb079a0b8763cc9243db3017fce8f2b5f1c2b1" translate="yes" xml:space="preserve">
          <source>These 2 articles were helpful for me:</source>
          <target state="translated">Estos dos artículos me ayudaron:</target>
        </trans-unit>
        <trans-unit id="9b99e56bf3215466d4bcb6510e8f2ab3c18e92a1" translate="yes" xml:space="preserve">
          <source>This command will ignore the files that have already been committed to a Git repository but now we have added them to &lt;code&gt;.gitignore&lt;/code&gt;.</source>
          <target state="translated">Este comando ignorar&amp;aacute; los archivos que ya se han &lt;code&gt;.gitignore&lt;/code&gt; a un repositorio de Git, pero ahora los hemos agregado a .gitignore .</target>
        </trans-unit>
        <trans-unit id="6a80256c88620e0c46466e120451785a26291aed" translate="yes" xml:space="preserve">
          <source>This command will recreate the entire commit history, executing &lt;code&gt;git rm&lt;/code&gt; before each commit and so will get rid of the specified file. Don't forget to back it up before running the command as it &lt;em&gt;will&lt;/em&gt; be lost.</source>
          <target state="translated">Este comando recrear&amp;aacute; todo el historial de confirmaci&amp;oacute;n, ejecutando &lt;code&gt;git rm&lt;/code&gt; antes de cada confirmaci&amp;oacute;n y, por lo tanto, eliminar&amp;aacute; el archivo especificado. No olvide hacer una copia de seguridad antes de ejecutar el comando, ya que &lt;em&gt;se&lt;/em&gt; perder&amp;aacute;.</target>
        </trans-unit>
        <trans-unit id="aace7ffcc2632aa8ca6dcf3aeb06c1b3b98defb7" translate="yes" xml:space="preserve">
          <source>This method makes git &lt;strong&gt;completely forget&lt;/strong&gt; ignored files (&lt;strong&gt;past&lt;/strong&gt;/present/future), but does &lt;strong&gt;not&lt;/strong&gt; delete anything from working directory (even when re-pulled from remote).</source>
          <target state="translated">Este m&amp;eacute;todo hace que git &lt;strong&gt;olvide por&lt;/strong&gt; completo los archivos ignorados ( &lt;strong&gt;pasado&lt;/strong&gt; / presente / futuro), pero &lt;strong&gt;no&lt;/strong&gt; elimina nada del directorio de trabajo (incluso cuando se vuelve a extraer desde el control remoto).</target>
        </trans-unit>
        <trans-unit id="0fd8d975ab3598d0501dc78d1c2086af30973cad" translate="yes" xml:space="preserve">
          <source>This method requires usage of &lt;code&gt;/.git/info/exclude&lt;/code&gt; (preferred) &lt;strong&gt;OR&lt;/strong&gt; a &lt;strong&gt;pre-existing&lt;/strong&gt;&lt;code&gt;.gitignore&lt;/code&gt; in &lt;strong&gt;all&lt;/strong&gt; the commits that have files to be ignored/forgotten. &lt;sup&gt;1&lt;/sup&gt;</source>
          <target state="translated">Este m&amp;eacute;todo requiere el uso de &lt;code&gt;/.git/info/exclude&lt;/code&gt; (preferido) &lt;strong&gt;O&lt;/strong&gt; un &lt;code&gt;.gitignore&lt;/code&gt; &lt;strong&gt;preexistente&lt;/strong&gt; en &lt;strong&gt;todas&lt;/strong&gt; las confirmaciones que tienen archivos que deben ignorarse / olvidarse. &lt;sup&gt;1&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="ee4e1a639a65a59982342cdd0d5f935792f354b4" translate="yes" xml:space="preserve">
          <source>This problem is absent, for example, when using CVS. CVS stores information as a list of file-based changes. Information for CVS is a set of files and the changes made to each file over time.</source>
          <target state="translated">Este problema está ausente,por ejemplo,cuando se utiliza CVS.El CVS almacena la información como una lista de cambios basados en archivos.La información para el CVS es un conjunto de archivos y los cambios realizados en cada archivo a lo largo del tiempo.</target>
        </trans-unit>
        <trans-unit id="a3d360038ad27ca130f73142cff92cf439acd687" translate="yes" xml:space="preserve">
          <source>This takes the list of the ignored files and removes them from the index, then commits the changes.</source>
          <target state="translated">Esto toma la lista de los archivos ignorados y los elimina del índice,luego confirma los cambios.</target>
        </trans-unit>
        <trans-unit id="8ef3809914d0a4bf55ad9dbd46e75e9ee26c43d4" translate="yes" xml:space="preserve">
          <source>This uses the &lt;code&gt;-z&lt;/code&gt; argument to &lt;strong&gt;ls-files&lt;/strong&gt;, and the &lt;code&gt;-0&lt;/code&gt; argument to &lt;strong&gt;xargs&lt;/strong&gt; to cater safely/correctly for &quot;nasty&quot; characters in filenames.</source>
          <target state="translated">Utiliza el argumento &lt;code&gt;-z&lt;/code&gt; para &lt;strong&gt;archivos ls&lt;/strong&gt; y el argumento &lt;code&gt;-0&lt;/code&gt; para &lt;strong&gt;xargs&lt;/strong&gt; para atender de forma segura / correcta los caracteres &quot;desagradables&quot; en los nombres de archivo.</target>
        </trans-unit>
        <trans-unit id="fac1fa39e67b6dbe6a9e8961a2ebbe207fd0a129" translate="yes" xml:space="preserve">
          <source>To clear your repo, use:</source>
          <target state="translated">Para limpiar tu repo,usa:</target>
        </trans-unit>
        <trans-unit id="9ece9b71ac3beff566f8bc63a178b67231ef3864" translate="yes" xml:space="preserve">
          <source>To stop tracking a file you need to remove it from the index. This can be achieved with this command.</source>
          <target state="translated">Para dejar de rastrear un archivo es necesario eliminarlo del índice.Esto se puede lograr con este comando.</target>
        </trans-unit>
        <trans-unit id="4e28adc0562a325e3e096fedb43aec2bcfc26cc2" translate="yes" xml:space="preserve">
          <source>To summarize:</source>
          <target state="translated">Para resumir:</target>
        </trans-unit>
        <trans-unit id="9ef7a39f54d24e9a0a605a35fb91afa4588e67b8" translate="yes" xml:space="preserve">
          <source>Try to use gitattributes clean/smudge magic to apply and remove the changes for you, for instance smudge the config file as a checkout from an alternate branch and clean the config file as a checkout from HEAD.  This is tricky stuff, I don't recommend it for the novice user.</source>
          <target state="translated">Intenta usar la magia de gitattributes cleansmudge para aplicar y eliminar los cambios por ti,por ejemplo,mancha el archivo de configuración como una salida de una rama alternativa y limpia el archivo de configuración como una salida de HEAD.Esto es algo complicado,no lo recomiendo para el usuario novato.</target>
        </trans-unit>
        <trans-unit id="e966285e3158a217aa4fa3d2055f125148a7452f" translate="yes" xml:space="preserve">
          <source>Update your &lt;code&gt;.gitignore&lt;/code&gt; file &amp;ndash; for instance, add a folder you don't want to track to &lt;code&gt;.gitignore&lt;/code&gt;.</source>
          <target state="translated">Actualice su archivo &lt;code&gt;.gitignore&lt;/code&gt; ; por ejemplo, agregue una carpeta que no desea rastrear a &lt;code&gt;.gitignore&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c04f0b185dde023e1da3e23b5abf4ebb68539583" translate="yes" xml:space="preserve">
          <source>Use this when:</source>
          <target state="translated">Usa esto cuando:</target>
        </trans-unit>
        <trans-unit id="87f831e2d4c6393d9fcee8d70bc3691c05dbf836" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;git rm --cached&lt;/code&gt; command does not answer the original question:</source>
          <target state="translated">El uso del comando &lt;code&gt;git rm --cached&lt;/code&gt; no responde la pregunta original:</target>
        </trans-unit>
        <trans-unit id="fe9e905994f09d5cd0a93eec644ef1b6cc083fae" translate="yes" xml:space="preserve">
          <source>What didn't work for me</source>
          <target state="translated">Lo que no funcionó para mí</target>
        </trans-unit>
        <trans-unit id="cfaea70ee7364b7f2f10a028c48a9b68308aecdb" translate="yes" xml:space="preserve">
          <source>When -z option is not used, TAB, LF, and backslash characters in
  pathnames are represented as \t, \n, and \\, respectively.</source>
          <target state="translated">Cuando no se usa la opción -z,los caracteres TAB,LF y la barra invertida en los nombres de las rutas se representan como \t,\N y \N respectivamente.</target>
        </trans-unit>
        <trans-unit id="a1d3840d4562480d2399ecf6afe2d819b1729baa" translate="yes" xml:space="preserve">
          <source>You'll also need to (temporarily) &lt;a href=&quot;https://stackoverflow.com/a/10544328/4901390&quot;&gt;allow non-fast-forward pushes to your repository&lt;/a&gt;, since you're changing your git history.</source>
          <target state="translated">Tambi&amp;eacute;n necesitar&amp;aacute; (temporalmente) &lt;a href=&quot;https://stackoverflow.com/a/10544328/4901390&quot;&gt;permitir empujes no r&amp;aacute;pidos hacia adelante a su repositorio&lt;/a&gt; , ya que est&amp;aacute; cambiando su historial de git.</target>
        </trans-unit>
        <trans-unit id="ed971b2dd1c9a5b86271f2c62c00a985a6982cc2" translate="yes" xml:space="preserve">
          <source>Your repository is clean :)</source>
          <target state="translated">Su depósito está limpio :)</target>
        </trans-unit>
        <trans-unit id="84cbaf0a5f2e76b1082a2ed9f1526561e8163981" translate="yes" xml:space="preserve">
          <source>breaking it down:</source>
          <target state="translated">...que se descomponga:</target>
        </trans-unit>
        <trans-unit id="4015b57a143aec5156fd1444a017a32137a3fd0f" translate="yes" xml:space="preserve">
          <source>commit</source>
          <target state="translated">commit</target>
        </trans-unit>
        <trans-unit id="824c64b13bca2d2655a812f22946c1edd153a100" translate="yes" xml:space="preserve">
          <source>cope with this situation (get errors about files not found).</source>
          <target state="translated">hacer frente a esta situación (obtener errores sobre los archivos no encontrados).</target>
        </trans-unit>
        <trans-unit id="e1f5dc1388efa7feb527c501975cbf1f88f8ed54" translate="yes" xml:space="preserve">
          <source>git config --global alias.exclude-ignored '!git ls-files -z --ignored --exclude-standard | xargs -0 git rm -r --cached &amp;amp;&amp;amp;  git ls-files -z --ignored --exclude-standard | xargs -0 git stage &amp;amp;&amp;amp;  git stage .gitignore &amp;amp;&amp;amp; git commit -m &quot;new gitignore and remove ignored files from index&quot;'</source>
          <target state="translated">git config --global alias.exclude-ignored '! git ls-files -z --no ignorado --exclude-standard | xargs -0 git rm -r --cached &amp;amp;&amp;amp; git ls-files -z --no ignorado --exclude-standard | xargs -0 git stage &amp;amp;&amp;amp; git stage .gitignore &amp;amp;&amp;amp; git commit -m &quot;nuevo gitignore y elimina los archivos ignorados del &amp;iacute;ndice&quot; '</target>
        </trans-unit>
        <trans-unit id="ef4d26678574a73b0e350a9a486783df032bc301" translate="yes" xml:space="preserve">
          <source>just replace &lt;code&gt;full/path/to/file&lt;/code&gt; with the full path of the file. Make sure you've added the file to your &lt;code&gt;.gitignore&lt;/code&gt;.</source>
          <target state="translated">simplemente reemplace &lt;code&gt;full/path/to/file&lt;/code&gt; con la ruta completa del archivo. Aseg&amp;uacute;rese de haber agregado el archivo a su &lt;code&gt;.gitignore&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d57cea54209eef1efd8a4421791d849849a82490" translate="yes" xml:space="preserve">
          <source>move it out, commit, then move it back in. This has worked for me in the past. There is probably a 'gittier' way to accomplish this.</source>
          <target state="translated">...lo sacamos,lo comprometemos,y lo volvemos a meter.Esto me ha funcionado en el pasado.Probablemente hay una forma más &quot;gitano&quot; de lograr esto.</target>
        </trans-unit>
        <trans-unit id="305ae145517f107f30ff7601792a2642c8676b9b" translate="yes" xml:space="preserve">
          <source>remove ignored files from index</source>
          <target state="translated">eliminar los archivos ignorados del índice</target>
        </trans-unit>
        <trans-unit id="1ccf2fbbfa1279aaf960c3ec391069e720298640" translate="yes" xml:space="preserve">
          <source>so I think my solution is needed if filenames have any of these characters in them.</source>
          <target state="translated">así que creo que mi solución es necesaria si los nombres de archivo tienen alguno de estos personajes.</target>
        </trans-unit>
        <trans-unit id="478f9e84d9950a571b6e0c79abdf30102aa37957" translate="yes" xml:space="preserve">
          <source>stage .gitignore and the files you just removed</source>
          <target state="translated">stage .gitignore y los archivos que acabas de eliminar</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
