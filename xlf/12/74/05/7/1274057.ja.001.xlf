<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/1274057">
    <body>
      <group id="1274057">
        <trans-unit id="1b1b1894ca2eb1b577deb9d1c135b98a8bea6403" translate="yes" xml:space="preserve">
          <source>(Under Linux), I wanted to use the posts here suggesting the &lt;code&gt;ls-files --ignored --exclude-standard | xargs git rm -r --cached&lt;/code&gt; approach.  However, (some of) the files to be removed had an embedded newline/LF/&lt;code&gt;\n&lt;/code&gt; in their names.  Neither of the solutions:</source>
          <target state="translated">（Linuxの場合） &lt;code&gt;ls-files --ignored --exclude-standard | xargs git rm -r --cached&lt;/code&gt; xargs git rm -r --cachedアプローチ。 ただし、削除されるファイル（の一部）の名前には、改行/ LF / &lt;code&gt;\n&lt;/code&gt; が埋め込まれていました。 どちらのソリューションも：</target>
        </trans-unit>
        <trans-unit id="e165ff5a12e79393f418cbab5ffb6044b4b14192" translate="yes" xml:space="preserve">
          <source>1. You want to untrack a lot of files, or</source>
          <target state="translated">1.たくさんのファイルをアントラックしたい場合や</target>
        </trans-unit>
        <trans-unit id="7291077bbcfea136ea78ae06fee8fb069775f45a" translate="yes" xml:space="preserve">
          <source>1.&lt;strong&gt;remove&lt;/strong&gt; the mistakenly added files &lt;strong&gt;from the directory/storage&lt;/strong&gt;. You can use &quot;rm -r&quot;(for linux) command or delete them by browsing the directories. Or move them to another location on your PC.[You maybe need to close the IDE if running for &lt;strong&gt;moving/removing&lt;/strong&gt;]</source>
          <target state="translated">1.誤って追加されたファイル&lt;strong&gt;をディレクトリ/ストレージから&lt;/strong&gt; &lt;strong&gt;削除&lt;/strong&gt;します。 「rm -r」（Linuxの場合）コマンドを使用するか、ディレクトリを参照して削除できます。 または、PC上の別の場所に移動します。[ &lt;strong&gt;移動/削除の&lt;/strong&gt;ため&lt;strong&gt;に&lt;/strong&gt;実行している場合は、IDEを閉じる必要がある場合があります]</target>
        </trans-unit>
        <trans-unit id="d29051284b7186e88c71b70107bdfe4f554cc6df" translate="yes" xml:space="preserve">
          <source>2. You updated your gitignore file</source>
          <target state="translated">2.gitignoreファイルを更新した</target>
        </trans-unit>
        <trans-unit id="3eee398533d29dfa830054675fbecc16f086d5fd" translate="yes" xml:space="preserve">
          <source>2.add the files / directories to &lt;code&gt;gitignore&lt;/code&gt; file now and save it.</source>
          <target state="translated">2.今すぐ &lt;code&gt;gitignore&lt;/code&gt; ファイルにファイル/ディレクトリを追加して保存します。</target>
        </trans-unit>
        <trans-unit id="67d7bf6b04b2072f859546335ca89f354bd6d7ad" translate="yes" xml:space="preserve">
          <source>3.now &lt;strong&gt;remove&lt;/strong&gt; them from &lt;strong&gt;git cache&lt;/strong&gt; by using these commands (if there are more than one directory, remove them one by one by repeatedly issuing this command)</source>
          <target state="translated">3.これらのコマンドを使用して&lt;strong&gt;gitキャッシュ&lt;/strong&gt;から&lt;strong&gt;削除&lt;/strong&gt;します（複数のディレクトリがある場合は、このコマンドを繰り返し発行して1つずつ削除します）。</target>
        </trans-unit>
        <trans-unit id="3ea998bdf09e60d9d8abd1f7b841f09d1336d5a1" translate="yes" xml:space="preserve">
          <source>4.now &lt;strong&gt;do&lt;/strong&gt; a &lt;strong&gt;commit and push&lt;/strong&gt;, use these commands. This will &lt;em&gt;remove those files from git remote&lt;/em&gt; and make git &lt;em&gt;stop tracking&lt;/em&gt; those files.</source>
          <target state="translated">4.今&lt;strong&gt;コミットしてプッシュし&lt;/strong&gt; 、これらのコマンドを使用します。 これにより&lt;em&gt;、これらのファイルがgit remoteから削除され、gitが&lt;/em&gt;それらのファイルの&lt;em&gt;追跡を停止し&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="17ceece8d84cea60549ab352bf79b07ec65dbb55" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://fallengamer.livejournal.com/93321.html&quot;&gt;git assume-unchanged vs skip-worktree&lt;/a&gt;
 and &lt;a href=&quot;http://blog.stephan-partzsch.de/how-to-ignore-changes-in-tracked-files-with-git/&quot;&gt;How to ignore changes in tracked files with Git&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://fallengamer.livejournal.com/93321.html&quot;&gt;git assume-unchanged vs skip-worktree&lt;/a&gt;および&lt;a href=&quot;http://blog.stephan-partzsch.de/how-to-ignore-changes-in-tracked-files-with-git/&quot;&gt;Gitで追跡されたファイルの変更を無視する方法&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="78e15ae328e1a2411f65d28cc06b7824a162f954" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://git-scm.com/docs/git-rm&quot;&gt;rm&lt;/a&gt; is the remove command</source>
          <target state="translated">&lt;a href=&quot;https://git-scm.com/docs/git-rm&quot;&gt;rm&lt;/a&gt;は削除コマンドです</target>
        </trans-unit>
        <trans-unit id="78fa9ca23f190aad15123aa1d43278ef66819081" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.gitignore&lt;/code&gt; will prevent untracked files from being added (without an &lt;code&gt;add -f&lt;/code&gt;) to the set of files tracked by git, however git will continue to track any files that are already being tracked.</source>
          <target state="translated">&lt;code&gt;.gitignore&lt;/code&gt; は、追跡されていないファイルが（ &lt;code&gt;add -f&lt;/code&gt; なしで）gitによって追跡されるファイルのセットに追加されないようにしますが、gitはすでに追跡されているファイルを追跡し続けます。</target>
        </trans-unit>
        <trans-unit id="b026808a99fb865ebb4e469dc20949169d8d3ebb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git add .&lt;/code&gt; &amp;ndash; All files will be added back in, except those in &lt;code&gt;.gitignore&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;git add .&lt;/code&gt; &amp;ndash; &lt;code&gt;.gitignore&lt;/code&gt; 内のファイルを除いて、すべてのファイルが再び追加されます。</target>
        </trans-unit>
        <trans-unit id="cefd39b5696f3a5f3d24162aa70995ec62aae245" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git rm -r --cached .&lt;/code&gt; &amp;ndash; Remove all tracked files, including wanted and unwanted. Your code will be safe as long as you have saved locally.</source>
          <target state="translated">&lt;code&gt;git rm -r --cached .&lt;/code&gt; &amp;ndash;必要なファイルと不要なファイルを含む、追跡されているすべてのファイルを削除します。 ローカルに保存している限り、コードは安全です。</target>
        </trans-unit>
        <trans-unit id="83a9f5eece9214779a020dba22cb30bd64224718" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&amp;ndash;cached&lt;/strong&gt; will only remove files from the index. Your files will still be there.</source>
          <target state="translated">&lt;strong&gt;&amp;ndash;cached&lt;/strong&gt;は、インデックスからファイルを削除するだけです。 ファイルはそのまま残ります。</target>
        </trans-unit>
        <trans-unit id="9e0c75fb491e1244c9b2b4f6a21f09d08b9a34ad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;-r&lt;/strong&gt; will allow recursive removal</source>
          <target state="translated">&lt;strong&gt;-r&lt;/strong&gt;は再帰的な削除を許可します</target>
        </trans-unit>
        <trans-unit id="297d9ab2be574ee69d4645675e8640e0fd945953" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;First:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;First:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="77360b0eda618b65d4f5b9ac454d8549ce9b33ff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This solution is actually independent on &lt;code&gt;.gitignore&lt;/code&gt; as gitignore is only for untracked files.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; gitignoreは追跡されていないファイル専用であるため、このソリューションは実際には &lt;code&gt;.gitignore&lt;/code&gt; に依存していません 。</target>
        </trans-unit>
        <trans-unit id="3c6108204e2f399b187def4c0bd951a6d5898341" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Source link:&lt;/strong&gt;&lt;a href=&quot;http://www.codeblocq.com/2016/01/Untrack-files-already-added-to-git-repository-based-on-gitignore/&quot;&gt;http://www.codeblocq.com/2016/01/Untrack-files-already-added-to-git-repository-based-on-gitignore/&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;ソースリンク：&lt;/strong&gt; &lt;a href=&quot;http://www.codeblocq.com/2016/01/Untrack-files-already-added-to-git-repository-based-on-gitignore/&quot;&gt;http&lt;/a&gt; &lt;strong&gt;:&lt;/strong&gt; //www.codeblocq.com/2016/01/Untrack-files-already-added-to-git-repository-based-on-gitignore/</target>
        </trans-unit>
        <trans-unit id="eb20ad117f5ff375c73839d2b25fd98bfdfb7835" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Then:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Then:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0bd7c18fe821283d0a4d492412ca53a9045e75db" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This is no longer an issue in the latest git&lt;/strong&gt; (v2.17.1 at the time of writing).</source>
          <target state="translated">&lt;strong&gt;これは、最新のgit&lt;/strong&gt; （執筆時点ではv2.17.1）では&lt;strong&gt;問題ではなくなりました&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="9a6beca2c5a4d325c54a1e8c74ed539c6d15f6f0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;WARNING: While this will not remove the physical file from your local, it will remove the files from other developers machines on next &lt;code&gt;git pull&lt;/code&gt;.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;警告：これはローカルから物理ファイルを削除しませんが、次の &lt;code&gt;git pull&lt;/code&gt; で他の開発者マシンからファイルを削除します。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="df8624410ba32bf182a54a6f8f84d790e9343215" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;WARNING&lt;/strong&gt;: this will delete the file from your entire history</source>
          <target state="translated">&lt;strong&gt;警告&lt;/strong&gt; ：これにより、履歴全体からファイルが削除されます</target>
        </trans-unit>
        <trans-unit id="1658da8ba77a3841c3a93544fd41a158b4742abf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;edit:&lt;/strong&gt; Since this answer was posted, a new option has been created and that should be prefered.  You should use &lt;strong&gt;&lt;code&gt;--skip-worktree&lt;/code&gt;&lt;/strong&gt; which is for modified tracked files that the user don't want to commit anymore and keep &lt;code&gt;--assume-unchanged&lt;/code&gt; for performance to prevent git to check status of big tracked files. See &lt;a href=&quot;https://stackoverflow.com/a/13631525/717372&quot;&gt;https://stackoverflow.com/a/13631525/717372&lt;/a&gt; for more details...</source>
          <target state="translated">&lt;strong&gt;編集：&lt;/strong&gt;この回答が投稿されてから、新しいオプションが作成されました。 gitが大きな追跡ファイルのステータスをチェックするのを防ぐために、ユーザーがもうコミットしたくない変更済み追跡ファイル用の&lt;strong&gt; &lt;code&gt;--skip-worktree&lt;/code&gt; &lt;/strong&gt;を使用して、パフォーマンスのために &lt;code&gt;--assume-unchanged&lt;/code&gt; を維持する必要があります。 詳細については、 &lt;a href=&quot;https://stackoverflow.com/a/13631525/717372&quot;&gt;https：//stackoverflow.com/a/13631525/717372&lt;/a&gt;を参照してください...</target>
        </trans-unit>
        <trans-unit id="21eb2ac0cdcc1bc65e7e9901f8bd153ae5987665" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;git update-index&lt;/strong&gt; does the job for me:</source>
          <target state="translated">&lt;strong&gt;git update-index&lt;/strong&gt;は私のために仕事をします：</target>
        </trans-unit>
        <trans-unit id="7b7d160b9ed59263729d1515ccfa762f8c20cadf" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;1&lt;/sup&gt; Because &lt;code&gt;/.git/info/exclude&lt;/code&gt; can be applied to all historical commits using the instructions above, perhaps details about getting a &lt;code&gt;.gitignore&lt;/code&gt; file &lt;em&gt;into&lt;/em&gt; the historical commit(s) that need it is beyond the scope of this answer.  I wanted a proper &lt;code&gt;.gitignore&lt;/code&gt; to be in the root commit, as if it was the first thing I did.  Others may not care since &lt;code&gt;/.git/info/exclude&lt;/code&gt; can accomplish the same thing regardless where the &lt;code&gt;.gitignore&lt;/code&gt; exists in the commit history, and clearly re-writing history is a &lt;strong&gt;very&lt;/strong&gt; touchy subject, even when aware of the &lt;a href=&quot;https://stackoverflow.com/q/1491001&quot;&gt;ramifications&lt;/a&gt;.</source>
          <target state="translated">&lt;sup&gt;1&lt;/sup&gt; &lt;code&gt;/.git/info/exclude&lt;/code&gt; は上記の手順を使用してすべての履歴コミットに適用できるため、おそらく &lt;code&gt;.gitignore&lt;/code&gt; ファイル&lt;em&gt;を&lt;/em&gt;履歴コミットに&lt;em&gt;入れ&lt;/em&gt;てそれを必要とする詳細は、この回答の範囲を超えています。 私が &lt;code&gt;.gitignore&lt;/code&gt; たように、適切な.gitignoreをルートコミットに含めたいと思いました。 &lt;code&gt;/.git/info/exclude&lt;/code&gt; は &lt;code&gt;.gitignore&lt;/code&gt; がコミット履歴のどこに存在していても同じことを実行できるため、他の人は気にしないかもしれません。また、 &lt;a href=&quot;https://stackoverflow.com/q/1491001&quot;&gt;影響を&lt;/a&gt;認識している場合でも、履歴の再書き込みは&lt;strong&gt;非常に&lt;/strong&gt; 扱いにくいテーマです。</target>
        </trans-unit>
        <trans-unit id="8b6da13045058d13d3e3a649a46432a4e053b78f" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;2&lt;/sup&gt; Enforcing git ignore behavior after-the-fact by committing the results of a standalone &lt;code&gt;git rm --cached&lt;/code&gt; command may result in newly-ignored file &lt;strong&gt;deletion&lt;/strong&gt; in future pulls from the force-pushed remote. The &lt;code&gt;--prune-empty&lt;/code&gt; flag in the following &lt;code&gt;git filter-branch&lt;/code&gt; command avoids this problem by automatically removing the previous &quot;delete all ignored files&quot; index-only commit.  Re-writing git history also changes commit hashes, which will &lt;a href=&quot;https://stackoverflow.com/q/1491001&quot;&gt;wreak havoc&lt;/a&gt; on future pulls from public/shared/collaborative repos.  Please understand the &lt;a href=&quot;https://stackoverflow.com/q/1491001&quot;&gt;ramifications&lt;/a&gt; fully before doing this to such a repo. &lt;a href=&quot;https://help.github.com/en/articles/removing-sensitive-data-from-a-repository&quot;&gt;This GitHub guide&lt;/a&gt; specifies the following:</source>
          <target state="translated">&lt;sup&gt;2&lt;/sup&gt;スタンドアロンの &lt;code&gt;git rm --cached&lt;/code&gt; コマンドの結果をコミットすることにより、git ignore動作を実際に強制すると、強制プッシュされたリモートからの今後のプルで、新しく無視されたファイルが&lt;strong&gt;削除&lt;/strong&gt;される可能性があります。 次の &lt;code&gt;git filter-branch&lt;/code&gt; コマンドの &lt;code&gt;--prune-empty&lt;/code&gt; フラグは、以前の「無視されたすべてのファイルを削除する」インデックスのみのコミットを自動的に削除することにより、この問題を回避します。 git履歴を書き直すと、コミットハッシュも変更されます。これは、パブリック/共有/共同リポジトリからの将来のプルで&lt;a href=&quot;https://stackoverflow.com/q/1491001&quot;&gt;大混乱を引き起こし&lt;/a&gt;ます。 このようなリポジトリにこれを行う前に、 &lt;a href=&quot;https://stackoverflow.com/q/1491001&quot;&gt;影響を&lt;/a&gt;十分に理解してください。 &lt;a href=&quot;https://help.github.com/en/articles/removing-sensitive-data-from-a-repository&quot;&gt;このGitHubガイドで&lt;/a&gt;は、次のことを指定しています。</target>
        </trans-unit>
        <trans-unit id="35bcd509556e93a5b4f240c0aaa275f71d83fd11" translate="yes" xml:space="preserve">
          <source>All methods of enforcing git ignore behavior after-the-fact effectively re-write history and thus have &lt;a href=&quot;https://stackoverflow.com/q/1491001&quot;&gt;significant ramifications&lt;/a&gt; for any public/shared/collaborative repos that might be pulled after this process. &lt;sup&gt;2&lt;/sup&gt;</source>
          <target state="translated">git ignoreの動作を実際に実行するすべての方法は、履歴を事実上再書き込みするため、このプロセスの後にプルされる可能性のあるパブリック/共有/コラボレーションのリポジトリには&lt;a href=&quot;https://stackoverflow.com/q/1491001&quot;&gt;大きな影響&lt;/a&gt;があります。 &lt;sup&gt;2&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="7e9e185f8553a03fd2bb4775718d5197931af7f1" translate="yes" xml:space="preserve">
          <source>Also, the comments/&lt;a href=&quot;https://stackoverflow.com/posts/57454176/revisions&quot;&gt;revision history&lt;/a&gt; of &lt;a href=&quot;https://stackoverflow.com/a/57454176&quot;&gt;this answer&lt;/a&gt; (&lt;a href=&quot;https://stackoverflow.com/posts/57418769/revisions&quot;&gt;and revision history&lt;/a&gt; of &lt;a href=&quot;https://stackoverflow.com/posts/57418769&quot;&gt;this question&lt;/a&gt;) may be useful/enlightening.</source>
          <target state="translated">また、 &lt;a href=&quot;https://stackoverflow.com/a/57454176&quot;&gt;この回答&lt;/a&gt;のコメント/ &lt;a href=&quot;https://stackoverflow.com/posts/57454176/revisions&quot;&gt;改訂履歴&lt;/a&gt; （ &lt;a href=&quot;https://stackoverflow.com/posts/57418769/revisions&quot;&gt;および&lt;/a&gt; &lt;a href=&quot;https://stackoverflow.com/posts/57418769&quot;&gt;この質問の&lt;/a&gt; 改訂履歴 ）も参考になるでしょう。</target>
        </trans-unit>
        <trans-unit id="f1837dc932cb205db53c46200c2d6db222867832" translate="yes" xml:space="preserve">
          <source>Alternative solutions that &lt;strong&gt;do not&lt;/strong&gt; affect the remote repo are &lt;code&gt;git update-index --assume-unchanged &amp;lt;/path/file&amp;gt;&lt;/code&gt; or &lt;code&gt;git update-index --skip-worktree &amp;lt;file&amp;gt;&lt;/code&gt;, examples of which can be found &lt;a href=&quot;https://stackoverflow.com/a/20241145&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">リモートリポジトリに影響を与え&lt;strong&gt;ない&lt;/strong&gt;代替ソリューションは、 &lt;code&gt;git update-index --assume-unchanged &amp;lt;/path/file&amp;gt;&lt;/code&gt; または &lt;code&gt;git update-index --skip-worktree &amp;lt;file&amp;gt;&lt;/code&gt; であり 、その例は&lt;a href=&quot;https://stackoverflow.com/a/20241145&quot;&gt;ここにあります&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="6a41eb1605b5c4997fa5c53a67b3bccfeac6b535" translate="yes" xml:space="preserve">
          <source>Anti-recommentation: Don't use assume-unchanged, it will only end in tears (because having git lie to itself will cause bad things to happen, like your change being lost forever).</source>
          <target state="translated">反コメント。assume-unchanged を使わないでください。</target>
        </trans-unit>
        <trans-unit id="d67fefbf8e2fd8148f6312fb95b34f9b6c28c3ac" translate="yes" xml:space="preserve">
          <source>Basing on it I do the following, if file is already tracked:</source>
          <target state="translated">それに基づいて、ファイルが既に追跡されている場合は以下のようにしています。</target>
        </trans-unit>
        <trans-unit id="ee0e2ab0d04aa5d054177f7139fe2f2993169040" translate="yes" xml:space="preserve">
          <source>Before proceeding, make sure all your changes are committed, including your .gitignore file.</source>
          <target state="translated">先に進む前に、.gitignore ファイルを含めてすべての変更がコミットされていることを確認してください。</target>
        </trans-unit>
        <trans-unit id="202ec7e461ae2d976889f5c200423159e33e4cff" translate="yes" xml:space="preserve">
          <source>But in Git every time you commit, or save the state of your project, it basically takes a picture of what &lt;strong&gt;&lt;em&gt;all your files&lt;/em&gt;&lt;/strong&gt; look like at that moment and stores a reference to that snapshot. So, if you added file once, it will always be present  in that snapshot.</source>
          <target state="translated">しかし、Gitでは、プロジェクトの状態をコミットまたは保存するたびに、基本的に、その時点での&lt;strong&gt;&lt;em&gt;すべてのファイル&lt;/em&gt;&lt;/strong&gt;の状態を写真に撮り、そのスナップショットへの参照を保存します。 したがって、ファイルを一度追加すると、そのスナップショットには常に存在します。</target>
        </trans-unit>
        <trans-unit id="34982d9388d501a1c59663bb20321f9e535e5325" translate="yes" xml:space="preserve">
          <source>Commit file config-sample.ini and ignore file config.ini, have a script or similar copy the file as necessary if necessary.</source>
          <target state="translated">config-sample.iniファイルをコミットし、config.iniファイルは無視して、必要に応じてスクリプトなどでファイルをコピーしてもらいます。</target>
        </trans-unit>
        <trans-unit id="5e69dfeea1ca71ec5cba8ba3812cefb3dde8a6d7" translate="yes" xml:space="preserve">
          <source>Do the following steps serially,you will be fine.</source>
          <target state="translated">次のステップを連続的に実行すると、大丈夫です。</target>
        </trans-unit>
        <trans-unit id="7efbf048e80845e59aa478983b3f909934d4ee15" translate="yes" xml:space="preserve">
          <source>Doing this went into each folder under the 'root' of where I was at and excluded all files that matched the pattern.</source>
          <target state="translated">これを行うと、私がいた場所の'ルート'の下にある各フォルダに入り、パターンに一致するすべてのファイルを除外しました。</target>
        </trans-unit>
        <trans-unit id="ce417ee80599859b918672e3deab176250d6a6fa" translate="yes" xml:space="preserve">
          <source>Especially for the IDE based files, I use this:</source>
          <target state="translated">特にIDEベースのファイルにはこれを使っています。</target>
        </trans-unit>
        <trans-unit id="5f23cb20c4075e9581d1185b5b7df71903a476f7" translate="yes" xml:space="preserve">
          <source>FWIW, potential methods may include &lt;code&gt;git rebase&lt;/code&gt; or a &lt;code&gt;git filter-branch&lt;/code&gt; that copies an &lt;em&gt;external&lt;/em&gt;&lt;code&gt;.gitignore&lt;/code&gt; into each commit, like the answers to &lt;a href=&quot;https://stackoverflow.com/q/43463687&quot;&gt;this question&lt;/a&gt;</source>
          <target state="translated">FWIW、潜在的なメソッドには、 &lt;a href=&quot;https://stackoverflow.com/q/43463687&quot;&gt;この質問&lt;/a&gt;への回答のように、各コミットに&lt;em&gt;外部&lt;/em&gt; &lt;code&gt;.gitignore&lt;/code&gt; をコピーする &lt;code&gt;git rebase&lt;/code&gt; または &lt;code&gt;git filter-branch&lt;/code&gt; が含まれる場合があります</target>
        </trans-unit>
        <trans-unit id="f9934c535834db75b1af736d96add4343490deca" translate="yes" xml:space="preserve">
          <source>File content will be replaced by the remote content. Paste your changes from safe place to file and perform again:</source>
          <target state="translated">ファイルの内容は、リモートの内容に置き換えられます。変更した内容を安全な場所からファイルに貼り付けて、再度実行します。</target>
        </trans-unit>
        <trans-unit id="fbe38db5f25e43c80761fee281d19a80da24dfe5" translate="yes" xml:space="preserve">
          <source>Finally, follow the rest of &lt;a href=&quot;https://help.github.com/en/articles/removing-sensitive-data-from-a-repository&quot;&gt;this GitHub guide&lt;/a&gt; (starting at step 6) &lt;strong&gt;which includes important warnings/information about the commands below&lt;/strong&gt;.</source>
          <target state="translated">最後に、 &lt;strong&gt;以下のコマンドに関する重要な警告/情報を含む&lt;/strong&gt; &lt;a href=&quot;https://help.github.com/en/articles/removing-sensitive-data-from-a-repository&quot;&gt;このGitHubガイドの&lt;/a&gt;残り（手順6以降）に従ってください 。</target>
        </trans-unit>
        <trans-unit id="0ba0b957e82e6fe3a824c66fd56f4787439fab3c" translate="yes" xml:space="preserve">
          <source>Finally, make a commit!</source>
          <target state="translated">ついにコミットします!</target>
        </trans-unit>
        <trans-unit id="ec0c3b76630fd745381cc215a284820af75a683a" translate="yes" xml:space="preserve">
          <source>Footnotes</source>
          <target state="translated">Footnotes</target>
        </trans-unit>
        <trans-unit id="3377231d1621da920e2f6d01f618d62a65db90db" translate="yes" xml:space="preserve">
          <source>For instance the slnx.sqlite, I just got rid off it completely like following:</source>
          <target state="translated">例えば、slnx.sqliteは、以下のように完全に駆除しました。</target>
        </trans-unit>
        <trans-unit id="3bc29b2292be0b2cd02509d2f723c4a7e560576e" translate="yes" xml:space="preserve">
          <source>From this moment all local changes in this file will be ignored and will not go to remote. If file is changed on remote, conflict will occure, when &lt;code&gt;git pull&lt;/code&gt;. Stash won't work. To resolve it, &lt;em&gt;copy file content to the safe place&lt;/em&gt; and follow these steps:</source>
          <target state="translated">この時点から、このファイル内のすべてのローカル変更は無視され、リモートには送信されません。 リモートでファイルが変更された場合、 &lt;code&gt;git pull&lt;/code&gt; を実行すると競合が発生します 。 Stashは機能しません。 これを解決するには、 &lt;em&gt;ファイルの内容を安全な場所&lt;/em&gt;に&lt;em&gt;コピーし&lt;/em&gt; 、次の手順に従います。</target>
        </trans-unit>
        <trans-unit id="fbab929a9779a2ee3e87320c92fff544c9f8051f" translate="yes" xml:space="preserve">
          <source>General advice: &lt;strong&gt;start with a clean repo&lt;/strong&gt; - everything committed, nothing pending in working directory or index, &lt;strong&gt;and make a backup&lt;/strong&gt;!</source>
          <target state="translated">一般的なアドバイス： &lt;strong&gt;クリーンなリポジトリから始めてください&lt;/strong&gt; -すべてコミットされ、作業ディレクトリまたはインデックスで何も保留されておらず&lt;strong&gt;、バックアップを作成して&lt;/strong&gt;ください！</target>
        </trans-unit>
        <trans-unit id="383228a7a69a177f4167123e5eea04fe6397b184" translate="yes" xml:space="preserve">
          <source>Hat tip to @AkiraYamamoto for pointing us in the right direction.</source>
          <target state="translated">私たちを正しい方向に導いてくれた @AkiraYamamoto さんに感謝します。</target>
        </trans-unit>
        <trans-unit id="566e08627539a7d2ecb5033b1abbdc58839c476c" translate="yes" xml:space="preserve">
          <source>Have your application look for an ignored file config-overide.ini and use that over the committed file config.ini (or alternately, look for ~/.config/myapp.ini, or $MYCONFIGFILE)</source>
          <target state="translated">アプリケーションが無視された config-overide.ini を探して、コミットされた config.ini の上にそれを使用するようにしてください (あるいは、~.configmyapp.ini や $MYCONFIGFILE を探してください)。</target>
        </trans-unit>
        <trans-unit id="5bf6447b60376b1563849f40943b48a5d87e3cf8" translate="yes" xml:space="preserve">
          <source>Hope this helps others!</source>
          <target state="translated">これが他の人の助けになることを願っています</target>
        </trans-unit>
        <trans-unit id="a1f359c689bb3b599c937d2b3bde4bbcb5336415" translate="yes" xml:space="preserve">
          <source>How do you force &lt;code&gt;git&lt;/code&gt; to completely forget about [a file]?</source>
          <target state="translated">どのようにして &lt;code&gt;git&lt;/code&gt; に[ファイル]を完全に忘れさせるのですか？</target>
        </trans-unit>
        <trans-unit id="3f4c43dc61508984fa8447acacd10ea274b878cc" translate="yes" xml:space="preserve">
          <source>How to make Git “forget” about a file that was tracked but is now in .gitignore</source>
          <target state="translated">追跡されていたファイルが .gitignore になっていることを Git に &quot;忘れる&quot; ようにする方法</target>
        </trans-unit>
        <trans-unit id="ffb3146d4b977e8077d09a9c235b576b6fb6a3df" translate="yes" xml:space="preserve">
          <source>However, that file keeps showing up in &lt;code&gt;git status&lt;/code&gt; after it's edited. How do you force &lt;code&gt;git&lt;/code&gt; to completely forget about it?</source>
          <target state="translated">ただし、そのファイルは編集後も &lt;code&gt;git status&lt;/code&gt; 表示され続けます。 どのようにして &lt;code&gt;git&lt;/code&gt; に完全にそれを忘れさせるのですか？</target>
        </trans-unit>
        <trans-unit id="3da73f13e2ca68488453d76581d10690fca48b23" translate="yes" xml:space="preserve">
          <source>I accomplished this by using &lt;a href=&quot;http://git-scm.com/docs/git-filter-branch&quot;&gt;git filter-branch&lt;/a&gt;. The exact command I used was taken from the man page:</source>
          <target state="translated">私は&lt;a href=&quot;http://git-scm.com/docs/git-filter-branch&quot;&gt;git filter-branch&lt;/a&gt;を使用してこれを実現しました。 私が使用した正確なコマンドは、manページから取得されました。</target>
        </trans-unit>
        <trans-unit id="e3d824cfebc37780973279c6ef69aebdc266297a" translate="yes" xml:space="preserve">
          <source>I always use this command to remove those untracked files. 
One-line, Unix-style, clean output:</source>
          <target state="translated">私はいつもこのコマンドを使って、それらの追跡されていないファイルを削除しています。一行 Unix スタイルのクリーンな出力。</target>
        </trans-unit>
        <trans-unit id="30df5b0bdab26d64e3f314c5f82d939e368718be" translate="yes" xml:space="preserve">
          <source>I liked JonBrave's answer but I have messy enough working directories that commit -a scares me a bit, so here's what I've done:</source>
          <target state="translated">私はJonBraveの答えが好きだったが、私はコミットする -aは私を少し怖がらせる十分に厄介な作業ディレクトリを持っているので、ここでは私がやったことは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="ae997b72f572c164f9db73d00da169b807fa2145" translate="yes" xml:space="preserve">
          <source>I recommend reading the documentation, but basically:</source>
          <target state="translated">ドキュメントを読むことをお勧めしますが、基本的には</target>
        </trans-unit>
        <trans-unit id="298daaa4a77ce41f5637f4872a4f45b4106bf606" translate="yes" xml:space="preserve">
          <source>I think, that maybe git can't totally forget about file because of its conception (&lt;a href=&quot;https://git-scm.com/book/en/v2/Getting-Started-Git-Basics&quot;&gt;section &quot;Snapshots, Not Differences&quot;&lt;/a&gt;).</source>
          <target state="translated">おそらく、gitはその概念（ &lt;a href=&quot;https://git-scm.com/book/en/v2/Getting-Started-Git-Basics&quot;&gt;セクション「スナップショット、違いではない」&lt;/a&gt; ）のため、ファイルを完全に忘れることはできないと思います。</target>
        </trans-unit>
        <trans-unit id="39a2708982ad9e80eba23666c91b4ae5bdb874e7" translate="yes" xml:space="preserve">
          <source>If anyone having hard time on Windows and you wanna ignore entire folder, 'cd' to desired the 'folder' and do 'Git Bash Here'.</source>
          <target state="translated">もしWindowsでは時間がなくて、フォルダ全体を無視したい場合は、目的のフォルダに'cd'して'Git Bash Here'を実行してください。</target>
        </trans-unit>
        <trans-unit id="0e021844325108de6923cd018135a48813b2d1b1" translate="yes" xml:space="preserve">
          <source>If everyone, who works with project, will perform &lt;code&gt;git update-index --skip-worktree &amp;lt;file&amp;gt;&lt;/code&gt;, problems with &lt;code&gt;pull&lt;/code&gt; should be absent. This solution is OK for configurations files, when every developer has their own project configuration.</source>
          <target state="translated">プロジェクトで作業するすべての人が &lt;code&gt;git update-index --skip-worktree &amp;lt;file&amp;gt;&lt;/code&gt; を実行する場合、 &lt;code&gt;pull&lt;/code&gt; に関する問題は存在しないはずです。 このソリューションは、すべての開発者が独自のプロジェクト構成を持っている場合、構成ファイルには問題ありません。</target>
        </trans-unit>
        <trans-unit id="25e96f5e32b3e98d46d6a3c82c2a38e2f06e1122" translate="yes" xml:space="preserve">
          <source>If you cannot &lt;code&gt;git rm&lt;/code&gt; a tracked file because other people might need it (warning, even if &lt;em&gt;you&lt;/em&gt;&lt;code&gt;git rm --cached&lt;/code&gt;, when someone else gets this change, their files will be deleted in their filesystem).  These are often done due to config file overrides, authentication credentials, etc. Please look at &lt;a href=&quot;https://gist.github.com/1423106&quot;&gt;https://gist.github.com/1423106&lt;/a&gt; for ways people have worked around the problem.</source>
          <target state="translated">他の人がそれを必要とする可能性があるために追跡されたファイルを &lt;code&gt;git rm&lt;/code&gt; できない場合（警告、 &lt;code&gt;git rm --cached&lt;/code&gt; を使用していても、他の誰かがこの変更を受け取ると、そのファイルはファイルシステムから削除されます）。 これらは、構成ファイルのオーバーライド、認証資格情報などが原因でよく行われます。人々が問題を回避した方法については、 &lt;a href=&quot;https://gist.github.com/1423106&quot;&gt;https：//gist.github.com/1423106&lt;/a&gt;を参照してください 。</target>
        </trans-unit>
        <trans-unit id="9143aec05a9d0455022a9d3efa538b3f3f9385bc" translate="yes" xml:space="preserve">
          <source>If you don't want to use the CLI and are working on Windows, a very simple solution is to use &lt;a href=&quot;https://tortoisegit.org/&quot;&gt;TortoiseGit&lt;/a&gt;, it has the &quot;Delete (keep local)&quot; Action in the menu which works fine.</source>
          <target state="translated">CLIを使用せずにWindowsで作業している場合、 &lt;a href=&quot;https://tortoisegit.org/&quot;&gt;TortoiseGit&lt;/a&gt;を使用するのが非常に簡単な解決策です。TortoiseGitにはメニューに「削除（ローカルに保持）」アクションがあり、正常に機能します。</target>
        </trans-unit>
        <trans-unit id="0d71f20100d6c8cc8bd6973525e16dd6ba961dbd" translate="yes" xml:space="preserve">
          <source>If you want to remove a whole folder, you need to remove all files in it recursively.</source>
          <target state="translated">フォルダ全体を削除したい場合は、そのフォルダ内のすべてのファイルを再帰的に削除する必要があります。</target>
        </trans-unit>
        <trans-unit id="15d61d53688648e59ae0d7cc465a1adfc9f32e65" translate="yes" xml:space="preserve">
          <source>If you'd like to specify files by name, you can do that too:</source>
          <target state="translated">ファイルを名前で指定したい場合は、それもできます。</target>
        </trans-unit>
        <trans-unit id="5903c3f8465c60a50db152209be8cfcd2f531ee6" translate="yes" xml:space="preserve">
          <source>Ignore them by:</source>
          <target state="translated">無視してください。</target>
        </trans-unit>
        <trans-unit id="6909856450b8468ce19ecf4aa7c57653169fd9a9" translate="yes" xml:space="preserve">
          <source>In case of already committed &lt;code&gt;DS_Store&lt;/code&gt;:</source>
          <target state="translated">既にコミットされた &lt;code&gt;DS_Store&lt;/code&gt; の場合：</target>
        </trans-unit>
        <trans-unit id="cb61bbad89d4ac5b475150e04f8ff4d53d867cc4" translate="yes" xml:space="preserve">
          <source>In fact, this solution will cause the file to be &lt;strong&gt;deleted&lt;/strong&gt; in every other instance of the repository when executing a &lt;code&gt;git pull&lt;/code&gt;!</source>
          <target state="translated">実際、このソリューションでは、 &lt;code&gt;git pull&lt;/code&gt; を実行すると、リポジトリの他のすべてのインスタンスでファイルが&lt;strong&gt;削除さ&lt;/strong&gt;れます。</target>
        </trans-unit>
        <trans-unit id="b6281cb7098a9a1bf8ab74eea9cf623585f3557d" translate="yes" xml:space="preserve">
          <source>In my case here, I had several .lock files in several directories that I needed to remove. I ran the following and it worked without having to go into each directory to remove them:</source>
          <target state="translated">ここでの私の場合、削除する必要があるいくつかのディレクトリにいくつかの.lockファイルがありました。以下を実行してみたところ、各ディレクトリに入って削除しなくてもうまくいきました。</target>
        </trans-unit>
        <trans-unit id="f2ee46b5bf348489144ff43d13bb1f9db4b9e4cc" translate="yes" xml:space="preserve">
          <source>In the manual page &lt;strong&gt;git-ls-files(1)&lt;/strong&gt;, it states:</source>
          <target state="translated">マニュアルページ&lt;strong&gt;git-ls-files（1）には&lt;/strong&gt; 、次のように記載されています：</target>
        </trans-unit>
        <trans-unit id="1e3a8ac2b04f693dce99c91c6d013b19a784ceac" translate="yes" xml:space="preserve">
          <source>It is not very convenient to do this every time, when file has been changed on remote, but can protect it from overwriting by remote content.</source>
          <target state="translated">リモートでファイルが変更された場合、毎回これを行うのはあまり便利ではありませんが、リモートコンテンツによる上書きから保護することができます。</target>
        </trans-unit>
        <trans-unit id="7da0a30820d35bda263d21ef6c921be754b4fb2b" translate="yes" xml:space="preserve">
          <source>It lists all your ignored files, replace every output line with a quoted line instead to handle paths with spaces inside, and pass everything to &lt;code&gt;git rm -r --cached&lt;/code&gt; to remove the paths/files/dirs from the index.</source>
          <target state="translated">無視されたすべてのファイルをリストし、すべての出力行を引用符付きの行に置き換えて、パスを内部でスペースで処理し、すべてを &lt;code&gt;git rm -r --cached&lt;/code&gt; に渡して、パスからパス/ファイル/ディレクトリをインデックスから削除します。</target>
        </trans-unit>
        <trans-unit id="427dd941220a11cde80854cae040581bf7a7bc39" translate="yes" xml:space="preserve">
          <source>Just keep that in mind that some of those files stores some local user settings and preferences for projects (like what files you had open). So every time you navigate or do some changes in your IDE, that file is changed and therefore it checks it out and show as there are uncommitted changes.</source>
          <target state="translated">これらのファイルの中には、ローカルのユーザー設定やプロジェクトの環境設定 (開いているファイルなど)が保存されているものがあることを覚えておいてください。そのため、IDE をナビゲートしたり変更を加えたりするたびに、そのファイルが変更され、コミットされていない変更があることがチェックアウトされて表示されます。</target>
        </trans-unit>
        <trans-unit id="1e1f9446808bef2a81577b3811952c9be0140995" translate="yes" xml:space="preserve">
          <source>Keep the config file on a deploy branch dedicated to it that is never merged to master.  When you want to deploy/compile/test you merge to that branch and get that file.  This is essentially the smudge/clean approach except using human merge policies and extra-git modules.</source>
          <target state="translated">設定ファイルは、master にマージされない専用の deploy ブランチに保管してください。コンパイルテストをデプロイしたいときは、そのブランチにマージしてそのファイルを取得します。これは、人間のマージポリシーと余分な git モジュールを使用する以外は、基本的には smudgeclean のアプローチです。</target>
        </trans-unit>
        <trans-unit id="6b5335338767809a90c12fd0a6cc98271bc8581c" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s say you have already added/committed some files to your git repository and you then add them to your .gitignore; these files will still be present in your repository index. This article we will see how to get rid of them.</source>
          <target state="translated">すでにgitリポジトリにいくつかのファイルを追加/コミットしていて、それらを.gitignoreに追加したとします。 これらのファイルは引き続きリポジトリインデックスに存在します。 この記事では、それらを取り除く方法について説明します。</target>
        </trans-unit>
        <trans-unit id="3d06145c701eb9f7bcded9868ffbb9cfbfbf4af3" translate="yes" xml:space="preserve">
          <source>Move or copy the file to a safe location, so you don't lose it. Then git rm the file and commit. The file will still show up if you revert to one of those earlier commits, or another branch where it has not been removed. However, in all future commits, you will not see the file again. If the file is in the git ignore, then you can move it back into the folder, and git won't see it.</source>
          <target state="translated">ファイルを紛失しないように安全な場所に移動またはコピーします。それから git rm でファイルをコミットします。以前のコミットのいずれか、あるいは削除されていない別のブランチに戻ってもファイルは表示されます。しかし、今後のすべてのコミットでは、そのファイルは再び表示されることはありません。ファイルが git ignore にある場合は、そのファイルをフォルダに戻しても git には表示されません。</target>
        </trans-unit>
        <trans-unit id="b531fabd41eb9da9a0ba874d765d34f24cb5c8b2" translate="yes" xml:space="preserve">
          <source>Or one-liner:</source>
          <target state="translated">あるいはワンライナー。</target>
        </trans-unit>
        <trans-unit id="41da50eece3db9d79a767edff75028a53b36f061" translate="yes" xml:space="preserve">
          <source>Other devs that pull from now-modified remote repo should make a backup and then:</source>
          <target state="translated">現在修正されたリモートレポからプルする他の開発者はバックアップを取ってからにしてください。</target>
        </trans-unit>
        <trans-unit id="b54a2d9b41681e32ea54dbeeffc97236f62a7a92" translate="yes" xml:space="preserve">
          <source>Push the changes to your remote to see the changes effective there as well.</source>
          <target state="translated">変更をリモートにプッシュすると、そこでも有効な変更を確認することができます。</target>
        </trans-unit>
        <trans-unit id="d5809414f5464acab9aa7ba79e8f76e8e3a3a51a" translate="yes" xml:space="preserve">
          <source>So I offer</source>
          <target state="translated">だから私は提供します</target>
        </trans-unit>
        <trans-unit id="960fb31d4493678100902bc9586b9c046362e226" translate="yes" xml:space="preserve">
          <source>Source: &lt;a href=&quot;https://confluence.atlassian.com/bitbucket/reduce-repository-size-321848262.html&quot;&gt;https://confluence.atlassian.com/bitbucket/reduce-repository-size-321848262.html&lt;/a&gt;</source>
          <target state="translated">ソース： &lt;a href=&quot;https://confluence.atlassian.com/bitbucket/reduce-repository-size-321848262.html&quot;&gt;https&lt;/a&gt; : //confluence.atlassian.com/bitbucket/reduce-repository-size-321848262.html</target>
        </trans-unit>
        <trans-unit id="612e5a5b717eb6a345fff1875325e4e780814272" translate="yes" xml:space="preserve">
          <source>Step 1: Commit all your changes</source>
          <target state="translated">ステップ 1:すべての変更をコミットする</target>
        </trans-unit>
        <trans-unit id="77880434b84506c14708316521c7f71b103ddbdc" translate="yes" xml:space="preserve">
          <source>Step 2: Remove everything from the repository</source>
          <target state="translated">ステップ2:リポジトリからすべてを削除する</target>
        </trans-unit>
        <trans-unit id="9c2ed963345aea24138333def583839f931c4674" translate="yes" xml:space="preserve">
          <source>Step 3: Re add everything</source>
          <target state="translated">ステップ3:すべてを再追加</target>
        </trans-unit>
        <trans-unit id="1a2dff51a26bbc76eec72ab492cccbb8f3c8089b" translate="yes" xml:space="preserve">
          <source>Step 4: Commit</source>
          <target state="translated">ステップ4:コミット</target>
        </trans-unit>
        <trans-unit id="62e557118db016748e85b8aff058461061ff972e" translate="yes" xml:space="preserve">
          <source>Tell your collaborators to &lt;a href=&quot;https://git-scm.com/book/en/Git-Branching-Rebasing&quot;&gt;rebase&lt;/a&gt;, &lt;em&gt;not&lt;/em&gt; merge, any branches they created off of your old (tainted) repository history. One merge commit could reintroduce some or all of the tainted history that you just went to the trouble of purging.</source>
          <target state="translated">古い（汚染された）リポジトリの履歴から作成したブランチをマージするのでは&lt;em&gt;なく&lt;/em&gt; 、 &lt;a href=&quot;https://git-scm.com/book/en/Git-Branching-Rebasing&quot;&gt;リベース&lt;/a&gt;するようにコラボレーターに伝えます。 1つのマージコミットで、パージの問題に行った汚染された履歴の一部またはすべてを再導入できます。</target>
        </trans-unit>
        <trans-unit id="0507b4cf9226f930b3c47ada0f53498a6301526a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://rtyley.github.io/bfg-repo-cleaner/&quot;&gt;BFG&lt;/a&gt; is specifically designed for removing unwanted data like big files or passwords from Git repos, so it has a simple flag that will remove any large historical (not-in-your-current-commit) files: '--strip-blobs-bigger-than'</source>
          <target state="translated">&lt;a href=&quot;https://rtyley.github.io/bfg-repo-cleaner/&quot;&gt;BFG&lt;/a&gt;はGitリポジトリから大きなファイルやパスワードなどの不要なデータを削除するために特別に設計されているため、大きな履歴ファイル（現在のコミットではない）を削除する単純なフラグがあります： '--strip-blobs-より大きい'</target>
        </trans-unit>
        <trans-unit id="cf74012f43e3173d4f2f3a304c076743addefd4b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.gitignore&lt;/code&gt; finally ignores tracked-but-deleted files. You can test this for yourself by running the following script. The final &lt;code&gt;git status&lt;/code&gt; statement should report &quot;nothing to commit&quot;.</source>
          <target state="translated">&lt;code&gt;.gitignore&lt;/code&gt; は、追跡されたが削除されたファイルを最終的に無視します。 次のスクリプトを実行して、これを自分でテストできます。 最後の &lt;code&gt;git status&lt;/code&gt; ステートメントは「何もコミットしない」と報告する必要があります。</target>
        </trans-unit>
        <trans-unit id="18bd883e64a162aac02dba83baaf242c9aba9d6d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rm&lt;/code&gt; command can be unforgiving. If you wish to try what it does beforehand, add the &lt;code&gt;-n&lt;/code&gt; or &lt;code&gt;--dry-run&lt;/code&gt; flag to test things out.</source>
          <target state="translated">&lt;code&gt;rm&lt;/code&gt; コマンドは、許容できない場合があります。 事前に試してみたい場合は、 &lt;code&gt;-n&lt;/code&gt; または &lt;code&gt;--dry-run&lt;/code&gt; フラグを追加してテストしてください。</target>
        </trans-unit>
        <trans-unit id="e219646ce5997a53b1eec4fddf7d5da98274f8a7" translate="yes" xml:space="preserve">
          <source>The BFG is 10-1000x faster than git filter-branch, and generally much easier to use - check the &lt;a href=&quot;https://rtyley.github.io/bfg-repo-cleaner/#usage&quot;&gt;full usage instructions&lt;/a&gt; and &lt;a href=&quot;https://rtyley.github.io/bfg-repo-cleaner/#examples&quot;&gt;examples&lt;/a&gt; for more details.</source>
          <target state="translated">BFGはgitフィルターブランチよりも10〜1000倍高速で、通常ははるかに使いやすくなっています。詳細については、 &lt;a href=&quot;https://rtyley.github.io/bfg-repo-cleaner/#usage&quot;&gt;完全な使用手順&lt;/a&gt;と&lt;a href=&quot;https://rtyley.github.io/bfg-repo-cleaner/#examples&quot;&gt;例&lt;/a&gt;を確認してください。</target>
        </trans-unit>
        <trans-unit id="4e1d1bc82d1b78eb89712cf8828bb7c8cc774d0a" translate="yes" xml:space="preserve">
          <source>The accepted answer does not &quot;make Git &lt;strong&gt;&quot;forget&quot;&lt;/strong&gt; about a file...&quot; (historically).  It only makes git &lt;strong&gt;ignore&lt;/strong&gt; the file in the present/future.</source>
          <target state="translated">受け入れられた答えは「ファイルについてGitを&lt;strong&gt;「忘れる」&lt;/strong&gt; ...」ではありません（歴史的に）。 gitに現在/将来のファイルを&lt;strong&gt;無視さ&lt;/strong&gt;せるだけです。</target>
        </trans-unit>
        <trans-unit id="bd8f4258fd7f17f2cbd6e097a5da666229f8a59c" translate="yes" xml:space="preserve">
          <source>The answer from Matt Fear was the most effective IMHO. The following is just a PowerShell script for those in windows to only remove files from their git repo that matches their exclusion list.</source>
          <target state="translated">Matt Fear の回答が最も効果的でした。以下は、Windows で git repo から除外リストに一致するファイルだけを削除するための PowerShell スクリプトです。</target>
        </trans-unit>
        <trans-unit id="67e52d337d22c9b5bfb6014db3c396cfda77accb" translate="yes" xml:space="preserve">
          <source>The copy/paste answer is &lt;code&gt;git rm --cached -r .; git add .; git status&lt;/code&gt;</source>
          <target state="translated">コピー/貼り付けの答えは &lt;code&gt;git rm --cached -r .; git add .; git status&lt;/code&gt; git add ;; gitステータス</target>
        </trans-unit>
        <trans-unit id="78a25064d23dc897dd87d00c940f9b4e4c4ffb99" translate="yes" xml:space="preserve">
          <source>The correct way to force git to forget about a file is documented by GitHub &lt;a href=&quot;https://help.github.com/en/articles/removing-sensitive-data-from-a-repository&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">gitにファイルのことを忘れさせる正しい方法は、GitHubによって&lt;a href=&quot;https://help.github.com/en/articles/removing-sensitive-data-from-a-repository&quot;&gt;ここに&lt;/a&gt;文書化されています 。</target>
        </trans-unit>
        <trans-unit id="e7351c780e287a42a26ece70eefbcf456f1046dd" translate="yes" xml:space="preserve">
          <source>The removal of the file from the head revision will happen on the next commit.</source>
          <target state="translated">ヘッドリビジョンからの削除は次のコミットで行われます。</target>
        </trans-unit>
        <trans-unit id="aef3fa74c8e59e395be7f68fe29a155144721883" translate="yes" xml:space="preserve">
          <source>The series of commands below will remove all of the items from the Git Index (not from the working directory or local repo), and then updates the Git Index, while respecting git ignores. &lt;em&gt;PS. Index = Cache&lt;/em&gt;</source>
          <target state="translated">以下の一連のコマンドは、Gitインデックスから（作業ディレクトリやローカルリポジトリからではなく）すべてのアイテムを削除し、Gitを無視しながらGitインデックスを更新します。 &lt;em&gt;PS。&lt;/em&gt; &lt;em&gt;インデックス=キャッシュ&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="059b6a3f58c111d094d712b8584163f9e7b63336" translate="yes" xml:space="preserve">
          <source>There is a file that was being tracked by &lt;code&gt;git&lt;/code&gt;, but now the file is on the &lt;code&gt;.gitignore&lt;/code&gt; list.</source>
          <target state="translated">&lt;code&gt;git&lt;/code&gt; によって追跡されていたファイルがありますが、このファイルは &lt;code&gt;.gitignore&lt;/code&gt; リストにあります。</target>
        </trans-unit>
        <trans-unit id="99eb079a0b8763cc9243db3017fce8f2b5f1c2b1" translate="yes" xml:space="preserve">
          <source>These 2 articles were helpful for me:</source>
          <target state="translated">この2つの記事が参考になりました。</target>
        </trans-unit>
        <trans-unit id="9b99e56bf3215466d4bcb6510e8f2ab3c18e92a1" translate="yes" xml:space="preserve">
          <source>This command will ignore the files that have already been committed to a Git repository but now we have added them to &lt;code&gt;.gitignore&lt;/code&gt;.</source>
          <target state="translated">このコマンドは、Gitリポジトリに既にコミットされているファイルを無視しますが、今ではそれらを &lt;code&gt;.gitignore&lt;/code&gt; に追加しました。</target>
        </trans-unit>
        <trans-unit id="6a80256c88620e0c46466e120451785a26291aed" translate="yes" xml:space="preserve">
          <source>This command will recreate the entire commit history, executing &lt;code&gt;git rm&lt;/code&gt; before each commit and so will get rid of the specified file. Don't forget to back it up before running the command as it &lt;em&gt;will&lt;/em&gt; be lost.</source>
          <target state="translated">このコマンドは、コミット履歴全体を再作成し、各コミットの前に &lt;code&gt;git rm&lt;/code&gt; を実行して、指定されたファイルを削除します。 コマンドが失われるので、コマンドを実行する前&lt;em&gt;に&lt;/em&gt;必ずバックアップしてください。</target>
        </trans-unit>
        <trans-unit id="aace7ffcc2632aa8ca6dcf3aeb06c1b3b98defb7" translate="yes" xml:space="preserve">
          <source>This method makes git &lt;strong&gt;completely forget&lt;/strong&gt; ignored files (&lt;strong&gt;past&lt;/strong&gt;/present/future), but does &lt;strong&gt;not&lt;/strong&gt; delete anything from working directory (even when re-pulled from remote).</source>
          <target state="translated">このメソッドはgitに無視されたファイル（ &lt;strong&gt;過去&lt;/strong&gt; / present / future）を&lt;strong&gt;完全に忘れさせ&lt;/strong&gt;ますが、（リモートから再プルされた場合でも）作業ディレクトリから何も削除しませ&lt;strong&gt;ん&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="0fd8d975ab3598d0501dc78d1c2086af30973cad" translate="yes" xml:space="preserve">
          <source>This method requires usage of &lt;code&gt;/.git/info/exclude&lt;/code&gt; (preferred) &lt;strong&gt;OR&lt;/strong&gt; a &lt;strong&gt;pre-existing&lt;/strong&gt;&lt;code&gt;.gitignore&lt;/code&gt; in &lt;strong&gt;all&lt;/strong&gt; the commits that have files to be ignored/forgotten. &lt;sup&gt;1&lt;/sup&gt;</source>
          <target state="translated">この方法では、 &lt;code&gt;/.git/info/exclude&lt;/code&gt; / info / exclude （推奨） &lt;strong&gt;または&lt;/strong&gt; &lt;strong&gt;既存の&lt;/strong&gt; &lt;code&gt;.gitignore&lt;/code&gt; を使用し&lt;strong&gt;て&lt;/strong&gt; 、ファイルを無視/忘れる&lt;strong&gt;すべて&lt;/strong&gt;のコミットを行う必要があります。 &lt;sup&gt;1&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="ee4e1a639a65a59982342cdd0d5f935792f354b4" translate="yes" xml:space="preserve">
          <source>This problem is absent, for example, when using CVS. CVS stores information as a list of file-based changes. Information for CVS is a set of files and the changes made to each file over time.</source>
          <target state="translated">この問題は、例えばCVSを使用している場合には存在しません。CVS は情報をファイルベースの変更のリストとして保存します。CVSにとっての情報とは、ファイルの集合であり、時間の経過とともに各ファイルに加えられた変更です。</target>
        </trans-unit>
        <trans-unit id="a3d360038ad27ca130f73142cff92cf439acd687" translate="yes" xml:space="preserve">
          <source>This takes the list of the ignored files and removes them from the index, then commits the changes.</source>
          <target state="translated">無視されたファイルのリストを取得してインデックスから削除し、変更をコミットします。</target>
        </trans-unit>
        <trans-unit id="8ef3809914d0a4bf55ad9dbd46e75e9ee26c43d4" translate="yes" xml:space="preserve">
          <source>This uses the &lt;code&gt;-z&lt;/code&gt; argument to &lt;strong&gt;ls-files&lt;/strong&gt;, and the &lt;code&gt;-0&lt;/code&gt; argument to &lt;strong&gt;xargs&lt;/strong&gt; to cater safely/correctly for &quot;nasty&quot; characters in filenames.</source>
          <target state="translated">これは&lt;strong&gt;ls-filesに&lt;/strong&gt; &lt;code&gt;-z&lt;/code&gt; 引数を使用し、 &lt;strong&gt;xargs&lt;/strong&gt;に &lt;code&gt;-0&lt;/code&gt; 引数を使用して、ファイル名の「厄介な」文字を安全かつ正確に処理します。</target>
        </trans-unit>
        <trans-unit id="fac1fa39e67b6dbe6a9e8961a2ebbe207fd0a129" translate="yes" xml:space="preserve">
          <source>To clear your repo, use:</source>
          <target state="translated">レポをクリアするには、以下のようにします。</target>
        </trans-unit>
        <trans-unit id="9ece9b71ac3beff566f8bc63a178b67231ef3864" translate="yes" xml:space="preserve">
          <source>To stop tracking a file you need to remove it from the index. This can be achieved with this command.</source>
          <target state="translated">ファイルの追跡を停止するには、そのファイルをインデックスから削除する必要があります。これは以下のコマンドで行うことができます。</target>
        </trans-unit>
        <trans-unit id="4e28adc0562a325e3e096fedb43aec2bcfc26cc2" translate="yes" xml:space="preserve">
          <source>To summarize:</source>
          <target state="translated">要約すると</target>
        </trans-unit>
        <trans-unit id="9ef7a39f54d24e9a0a605a35fb91afa4588e67b8" translate="yes" xml:space="preserve">
          <source>Try to use gitattributes clean/smudge magic to apply and remove the changes for you, for instance smudge the config file as a checkout from an alternate branch and clean the config file as a checkout from HEAD.  This is tricky stuff, I don't recommend it for the novice user.</source>
          <target state="translated">gitattributes の cleansmudge マジックを使って、変更を適用したり削除したりしてみましょう。これはトリッキーなので、初心者にはお勧めできません。</target>
        </trans-unit>
        <trans-unit id="e966285e3158a217aa4fa3d2055f125148a7452f" translate="yes" xml:space="preserve">
          <source>Update your &lt;code&gt;.gitignore&lt;/code&gt; file &amp;ndash; for instance, add a folder you don't want to track to &lt;code&gt;.gitignore&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.gitignore&lt;/code&gt; ファイルを更新します。たとえば、追跡したくないフォルダーを.gitignoreに追加します。</target>
        </trans-unit>
        <trans-unit id="c04f0b185dde023e1da3e23b5abf4ebb68539583" translate="yes" xml:space="preserve">
          <source>Use this when:</source>
          <target state="translated">こんな時に使います。</target>
        </trans-unit>
        <trans-unit id="87f831e2d4c6393d9fcee8d70bc3691c05dbf836" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;git rm --cached&lt;/code&gt; command does not answer the original question:</source>
          <target state="translated">&lt;code&gt;git rm --cached&lt;/code&gt; コマンドを使用しても、元の質問には回答しません。</target>
        </trans-unit>
        <trans-unit id="fe9e905994f09d5cd0a93eec644ef1b6cc083fae" translate="yes" xml:space="preserve">
          <source>What didn't work for me</source>
          <target state="translated">私には効かなかったこと</target>
        </trans-unit>
        <trans-unit id="cfaea70ee7364b7f2f10a028c48a9b68308aecdb" translate="yes" xml:space="preserve">
          <source>When -z option is not used, TAB, LF, and backslash characters in
  pathnames are represented as \t, \n, and \\, respectively.</source>
          <target state="translated">z オプションを使用しない場合、パス名の TAB,LF,バックスラッシュは、それぞれ ♦,♦,♦,♦,♦,♦,♦,♦,♦,♦と表記する。</target>
        </trans-unit>
        <trans-unit id="a1d3840d4562480d2399ecf6afe2d819b1729baa" translate="yes" xml:space="preserve">
          <source>You'll also need to (temporarily) &lt;a href=&quot;https://stackoverflow.com/a/10544328/4901390&quot;&gt;allow non-fast-forward pushes to your repository&lt;/a&gt;, since you're changing your git history.</source>
          <target state="translated">また、git履歴を変更している&lt;a href=&quot;https://stackoverflow.com/a/10544328/4901390&quot;&gt;ため、リポジトリへの非早送りプッシュ&lt;/a&gt;を（一時的に） 許可する必要があります。</target>
        </trans-unit>
        <trans-unit id="ed971b2dd1c9a5b86271f2c62c00a985a6982cc2" translate="yes" xml:space="preserve">
          <source>Your repository is clean :)</source>
          <target state="translated">あなたのリポジトリはきれいです :)</target>
        </trans-unit>
        <trans-unit id="84cbaf0a5f2e76b1082a2ed9f1526561e8163981" translate="yes" xml:space="preserve">
          <source>breaking it down:</source>
          <target state="translated">壊すんだ</target>
        </trans-unit>
        <trans-unit id="4015b57a143aec5156fd1444a017a32137a3fd0f" translate="yes" xml:space="preserve">
          <source>commit</source>
          <target state="translated">commit</target>
        </trans-unit>
        <trans-unit id="824c64b13bca2d2655a812f22946c1edd153a100" translate="yes" xml:space="preserve">
          <source>cope with this situation (get errors about files not found).</source>
          <target state="translated">この状況に対処する (ファイルが見つからない場合にエラーが発生する)。</target>
        </trans-unit>
        <trans-unit id="e1f5dc1388efa7feb527c501975cbf1f88f8ed54" translate="yes" xml:space="preserve">
          <source>git config --global alias.exclude-ignored '!git ls-files -z --ignored --exclude-standard | xargs -0 git rm -r --cached &amp;amp;&amp;amp;  git ls-files -z --ignored --exclude-standard | xargs -0 git stage &amp;amp;&amp;amp;  git stage .gitignore &amp;amp;&amp;amp; git commit -m &quot;new gitignore and remove ignored files from index&quot;'</source>
          <target state="translated">git config --global alias.exclude-ignored '！git ls-files -z --ignored --exclude-standard | xargs -0 git rm -r --cached &amp;amp;&amp;amp; git ls-files -z --ignored --exclude-standard | xargs -0 gitステージ&amp;amp;&amp;amp; gitステージ.gitignore &amp;amp;&amp;amp; git commit -m &quot;新しいgitignoreと無視されたファイルをインデックスから削除&quot; &quot;</target>
        </trans-unit>
        <trans-unit id="ef4d26678574a73b0e350a9a486783df032bc301" translate="yes" xml:space="preserve">
          <source>just replace &lt;code&gt;full/path/to/file&lt;/code&gt; with the full path of the file. Make sure you've added the file to your &lt;code&gt;.gitignore&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;full/path/to/file&lt;/code&gt; をファイルの完全パスに置き換えるだけです。 ファイルが &lt;code&gt;.gitignore&lt;/code&gt; に追加されていることを確認してください。</target>
        </trans-unit>
        <trans-unit id="d57cea54209eef1efd8a4421791d849849a82490" translate="yes" xml:space="preserve">
          <source>move it out, commit, then move it back in. This has worked for me in the past. There is probably a 'gittier' way to accomplish this.</source>
          <target state="translated">移動させてコミットしてから 元に戻します これは過去に私のためにうまくいったことがあります。これを達成するためには、おそらく 'gittier' な方法があるでしょう。</target>
        </trans-unit>
        <trans-unit id="305ae145517f107f30ff7601792a2642c8676b9b" translate="yes" xml:space="preserve">
          <source>remove ignored files from index</source>
          <target state="translated">インデックスから無視されたファイルを削除する</target>
        </trans-unit>
        <trans-unit id="1ccf2fbbfa1279aaf960c3ec391069e720298640" translate="yes" xml:space="preserve">
          <source>so I think my solution is needed if filenames have any of these characters in them.</source>
          <target state="translated">そのため、ファイル名にこれらの文字が含まれている場合は、私の解決策が必要になると思います。</target>
        </trans-unit>
        <trans-unit id="478f9e84d9950a571b6e0c79abdf30102aa37957" translate="yes" xml:space="preserve">
          <source>stage .gitignore and the files you just removed</source>
          <target state="translated">ステージの .gitignore と、先ほど削除したファイルを指定します。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
