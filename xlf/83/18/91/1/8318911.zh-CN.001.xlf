<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/8318911">
    <body>
      <group id="8318911">
        <trans-unit id="b6d6d3bed5e4360c8f981fc61092af8db40788be" translate="yes" xml:space="preserve">
          <source>...produces a document with a &lt;strong&gt;red background&lt;/strong&gt; across all browsers and platforms.</source>
          <target state="translated">...在所有浏览器和平台上产生&lt;strong&gt;背景&lt;/strong&gt;为&lt;strong&gt;红色&lt;/strong&gt;的文档。</target>
        </trans-unit>
        <trans-unit id="90c79427a637d3c801f8bcf85aee6ce09e84e94e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;C00C00000000&lt;/code&gt; =&amp;gt; &lt;code&gt;R:C00C, G:0000, B:0000&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;C00C00000000&lt;/code&gt; =&amp;gt; &lt;code&gt;R:C00C, G:0000, B:0000&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5908ea286f207046f7d7ff51a76583b34e4f1935" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ChuCknorris&lt;/code&gt; translates to &lt;code&gt;c00c0000000&lt;/code&gt;.  At this point, the browser will divide the string into three equal sections, indicating &lt;em&gt;Red&lt;/em&gt;, &lt;em&gt;Green&lt;/em&gt; and &lt;em&gt;Blue&lt;/em&gt; values: &lt;code&gt;c00c 0000 0000&lt;/code&gt;.  Extra bits in each section will be ignored, which makes the final result &lt;code&gt;#c00000&lt;/code&gt; which is a reddish color.</source>
          <target state="translated">&lt;code&gt;ChuCknorris&lt;/code&gt; 转换为 &lt;code&gt;c00c0000000&lt;/code&gt; 。 此时，浏览器会将字符串分为三个相等的部分，分别指示&lt;em&gt;Red&lt;/em&gt; ， &lt;em&gt;Green&lt;/em&gt;和&lt;em&gt;Blue&lt;/em&gt;值： &lt;code&gt;c00c 0000 0000&lt;/code&gt; 。 每个部分中的多余位都将被忽略，这将使最终结果 &lt;code&gt;#c00000&lt;/code&gt; 是带红色的颜色。</target>
        </trans-unit>
        <trans-unit id="c34f0e7761f96717c2bb3d2582bd4f5e58d37cd4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;R:C00C, G:0000, B:0000&lt;/code&gt; =&amp;gt; &lt;code&gt;R:C0, G:00, B:00&lt;/code&gt; =&amp;gt; &lt;code&gt;C00000&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;R:C00C, G:0000, B:0000&lt;/code&gt; =&amp;gt; &lt;code&gt;R:C0, G:00, B:00&lt;/code&gt; =&amp;gt; &lt;code&gt;C00000&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bdbd8e58905068323db13fcb9503c60d5874e2ff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;chucknorris&lt;/code&gt; starts with &lt;code&gt;c&lt;/code&gt; which is recognised character in hexadecimal, also it's converting all unrecognised characters into &lt;code&gt;0&lt;/code&gt;!</source>
          <target state="translated">&lt;code&gt;chucknorris&lt;/code&gt; 以 &lt;code&gt;c&lt;/code&gt; 开头， c是十六进制的可识别字符，它还将所有无法识别的字符转换为 &lt;code&gt;0&lt;/code&gt; ！</target>
        </trans-unit>
        <trans-unit id="e20468aa188cf92984a3fe7c4e72c85ba9f5ee1e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;P.S. The numbers in brackets are the browser versions I tested on.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;PS括号中的数字是我测试过的浏览器版本。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c332061cf4bd899460b0a4c0a7eaa14bdb27b163" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Answer:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Answer:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f11a76626f3923193066b36bddea5202082482d1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;chucknorris&lt;/strong&gt; starts with &lt;strong&gt;c&lt;/strong&gt;, and the browser reads it into a hexadecimal value.</source>
          <target state="translated">&lt;strong&gt;chucknorris&lt;/strong&gt;以&lt;strong&gt;c&lt;/strong&gt;开头，浏览器将其读取为十六进制值。</target>
        </trans-unit>
        <trans-unit id="70dba0a8d26cfc893b536aca75d8cef34e574a8f" translate="yes" xml:space="preserve">
          <source>Because A, B, C, D, E, and F are &lt;a href=&quot;https://en.wikipedia.org/wiki/Hexadecimal&quot;&gt;characters in hexadecimal&lt;/a&gt;.</source>
          <target state="translated">因为A，B，C，D，E和F是&lt;a href=&quot;https://en.wikipedia.org/wiki/Hexadecimal&quot;&gt;十六进制字符&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="6383e2acd181bb3a5ec4afd24b43ced0521882a9" translate="yes" xml:space="preserve">
          <source>Below is a partial implementation of the algorithm. It does not handle errors or cases where the user enters a valid color.</source>
          <target state="translated">下面是该算法的部分实现。它不处理错误或用户输入有效颜色的情况。</target>
        </trans-unit>
        <trans-unit id="cab63b218aa009ada235109baffd10be95227fbc" translate="yes" xml:space="preserve">
          <source>But we know valid hexadecimal for RGB is just 2 characters, means &lt;code&gt;R: c0, G: 00, B:00&lt;/code&gt;</source>
          <target state="translated">但是我们知道RGB的有效十六进制只有2个字符，表示 &lt;code&gt;R: c0, G: 00, B:00&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a504a3c367a66f1ea44d16c56de7ba4785e7f063" translate="yes" xml:space="preserve">
          <source>Chuck Norris doesn't conform to web standards. Web standards conform
  to him. #BADA55</source>
          <target state="translated">Chuck Norris不符合网络标准。网络标准符合他的标准。#BADA55</target>
        </trans-unit>
        <trans-unit id="25f2a36123f930c6195de2f2a76a7893477fa1a1" translate="yes" xml:space="preserve">
          <source>Discard all characters except the first 2</source>
          <target state="translated">除前2个字符外,所有的字符都要丢弃</target>
        </trans-unit>
        <trans-unit id="e8481aaeb9bf6d1a4ee42e981e8214c61919ad5b" translate="yes" xml:space="preserve">
          <source>Discard all characters except the last 8</source>
          <target state="translated">除最后8个字符外,所有字符都要丢弃</target>
        </trans-unit>
        <trans-unit id="6ef923436ac0445f743a32432826c89b75857e3f" translate="yes" xml:space="preserve">
          <source>Discard leading zeros one by one &lt;strong&gt;as long as all components have a leading zero&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;只要所有组件都具有前导零&lt;/strong&gt; ，则一一丢弃&lt;strong&gt;前导零。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">扩展片段</target>
        </trans-unit>
        <trans-unit id="2ad6903c956477937e34db882a192413e0f2a6e8" translate="yes" xml:space="preserve">
          <source>Finally, show &lt;code&gt;bgcolor = C00000&lt;/code&gt; in the web browser.</source>
          <target state="translated">最后，在网络浏览器中显示 &lt;code&gt;bgcolor = C00000&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bbf2c4484b34d3367380273de15a9c5ece0fe0fc" translate="yes" xml:space="preserve">
          <source>For example, notice that each character is parsed as a hex digit and then is shifted into a 32-bit integer &lt;strong&gt;without checking for overflow&lt;/strong&gt;. Only eight hex digits fit into a 32-bit integer, which is why only the last 8 characters are considered. After parsing the hex digits into 32-bit integers, they are then truncated into 8-bit integers by dividing them by 16 until they fit into 8-bit, which is why leading zeros are ignored.</source>
          <target state="translated">例如，请注意，每个字符都被解析为十六进制数字，然后在&lt;strong&gt;不检查overflow的情况下&lt;/strong&gt;被转换为32位整数。 32位整数只能容纳8个十六进制数字，这就是为什么只考虑最后8个字符的原因。 将十六进制数字解析为32位整数后，然后将它们除以16，直到它们适合8位，然后将其截断为8位整数，这就是为什么忽略前导零的原因。</target>
        </trans-unit>
        <trans-unit id="83c640cf08966d805f9e82d6eba98fb691fc3312" translate="yes" xml:space="preserve">
          <source>Here's an example demonstrating it:</source>
          <target state="translated">这里有一个例子来证明。</target>
        </trans-unit>
        <trans-unit id="c4e4d6e50d0e6a2b0fb0bba88b73470d1bead009" translate="yes" xml:space="preserve">
          <source>Here's an example demonstrating the &lt;code&gt;bgcolor&lt;/code&gt; attribute in action, to produce this &quot;amazing&quot; colour swatch:</source>
          <target state="translated">这是一个演示 &lt;code&gt;bgcolor&lt;/code&gt; 属性的示例，以产生此&amp;ldquo;惊人的&amp;rdquo;颜色样本：</target>
        </trans-unit>
        <trans-unit id="5e148392e4d81aa2c0e735090f9dfd1c412a57f8" translate="yes" xml:space="preserve">
          <source>How come certain random strings produce colors when entered as background colors in HTML? For example:</source>
          <target state="translated">为什么在HTML中输入某些随机字符串作为背景色时,会产生颜色?比如说</target>
        </trans-unit>
        <trans-unit id="b3ee309bb5fe3a685dbf781e5fe4fb694d9e5227" translate="yes" xml:space="preserve">
          <source>I also added the steps in the image as a quick reference for you:</source>
          <target state="translated">我还把图片中的步骤补充了一下,供大家快速参考。</target>
        </trans-unit>
        <trans-unit id="5e43306214b153b4803bd9a0de3b097cebda39ee" translate="yes" xml:space="preserve">
          <source>I originally encountered this when someone pointed out you could do &lt;code&gt;color=&quot;crap&quot;&lt;/code&gt; and, well, it comes out brown.</source>
          <target state="translated">我最初遇到此问题的原因是有人指出您可以进行 &lt;code&gt;color=&quot;crap&quot;&lt;/code&gt; ，结果它变成了棕色。</target>
        </trans-unit>
        <trans-unit id="794fcecab5a94318c4d8b4733915683f1b282056" translate="yes" xml:space="preserve">
          <source>I was able to use these rules to correctly interpret the following strings:</source>
          <target state="translated">我能够用这些规则来正确解释下面的字符串。</target>
        </trans-unit>
        <trans-unit id="4fc6645bc14aeb18dea2272bce3f5a7ad18fdb45" translate="yes" xml:space="preserve">
          <source>I'm sorry to disagree, but according to the rules for parsing a legacy color value posted by &lt;a href=&quot;https://stackoverflow.com/a/12630675/282110&quot;&gt;@Yuhong Bao&lt;/a&gt;, &lt;code&gt;chucknorris&lt;/code&gt; DOES NOT equate to &lt;code&gt;#CC0000&lt;/code&gt;, but rather to &lt;code&gt;#C00000&lt;/code&gt;, a very similar but slightly different hue of red. I used the &lt;a href=&quot;https://addons.mozilla.org/en-us/firefox/addon/colorzilla/&quot;&gt;Firefox ColorZilla add-on&lt;/a&gt; to verify this.</source>
          <target state="translated">抱歉，不同意，但是根据解析&lt;a href=&quot;https://stackoverflow.com/a/12630675/282110&quot;&gt;@Yuhong Bao&lt;/a&gt;发布的旧色值的规则， &lt;code&gt;chucknorris&lt;/code&gt; 不等于 &lt;code&gt;#CC0000&lt;/code&gt; ，而是等于 &lt;code&gt;#C00000&lt;/code&gt; ，这是一个非常相似但略有不同的红色。 我使用&lt;a href=&quot;https://addons.mozilla.org/en-us/firefox/addon/colorzilla/&quot;&gt;Firefox ColorZilla加载项进行&lt;/a&gt;了验证。</target>
        </trans-unit>
        <trans-unit id="96407bc67b95cb75ff2f84517c9c4326b5387c2d" translate="yes" xml:space="preserve">
          <source>If we apply the rules in turn from the blog post, we get the following:</source>
          <target state="translated">如果我们从博文中依次套用这些规则,就会得到如下结果。</target>
        </trans-unit>
        <trans-unit id="1ba6534d2ba347bc8825172a692c88fa554b840b" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;chucknorris&lt;/code&gt;, everything except &lt;strong&gt;&lt;code&gt;c&lt;/code&gt;&lt;/strong&gt; is not a valid hex value.</source>
          <target state="translated">在 &lt;code&gt;chucknorris&lt;/code&gt; 中 ，除&lt;strong&gt; &lt;code&gt;c&lt;/code&gt; &lt;/strong&gt;外的所有内容都不是有效的十六进制值。</target>
        </trans-unit>
        <trans-unit id="290fec8b4271fbd11d019422133fa5ea4202765d" translate="yes" xml:space="preserve">
          <source>Interestingly, while &lt;code&gt;chucknorri&lt;/code&gt; produces a red background as well, &lt;code&gt;chucknorr&lt;/code&gt; produces a yellow background.</source>
          <target state="translated">有趣的是，尽管 &lt;code&gt;chucknorri&lt;/code&gt; 产生红色背景，但 &lt;code&gt;chucknorr&lt;/code&gt; 产生黄色背景。</target>
        </trans-unit>
        <trans-unit id="765cfa7e7dfbf72d563a17f756b39e567a44fd65" translate="yes" xml:space="preserve">
          <source>It is from the blog post &lt;em&gt;&lt;a href=&quot;http://scrappy-do.blogspot.com/2004/08/little-rant-about-microsoft-internet.html&quot;&gt;A little rant about Microsoft Internet Explorer's color parsing&lt;/a&gt;&lt;/em&gt; which covers it in great detail, including varying lengths of color values, etc.</source>
          <target state="translated">摘自博客文章&lt;em&gt;&lt;a href=&quot;http://scrappy-do.blogspot.com/2004/08/little-rant-about-microsoft-internet.html&quot;&gt;关于Microsoft Internet Explorer的颜色解析的一点怨言&lt;/a&gt;&lt;/em&gt; ，它详细介绍了它，包括不同长度的颜色值等。</target>
        </trans-unit>
        <trans-unit id="dc5c8c17a5b4ac2fafa08f96f4999f4a955b0808" translate="yes" xml:space="preserve">
          <source>It's a holdover from the Netscape days:</source>
          <target state="translated">这是网景时代的遗留问题。</target>
        </trans-unit>
        <trans-unit id="4dcb6a6719024ce6cca04984eae3160fb4db813c" translate="yes" xml:space="preserve">
          <source>Missing digits are treated as 0[...]. An incorrect digit is simply interpreted as 0. For example the values #F0F0F0, F0F0F0, F0F0F, #FxFxFx and FxFxFx are all the same.</source>
          <target state="translated">缺失的数字被视为0[...]。例如#F0F0F0F0F0、F0F0F0F0、F0F0F0F0、F0F0F0F、#FxFxFxFx和FxFxFx都是一样的。</target>
        </trans-unit>
        <trans-unit id="69d2baba5d52206b59836e5f56bd1fe2aa3f836f" translate="yes" xml:space="preserve">
          <source>Most browsers will simply ignore any NON-hex values in your color string, substituting non-hex digits with zeros.</source>
          <target state="translated">大多数浏览器会简单地忽略你的颜色字符串中的任何非正则值,用零代替非正则值。</target>
        </trans-unit>
        <trans-unit id="57ebe10afc8571b57b2bfb670ecc0ff03286840d" translate="yes" xml:space="preserve">
          <source>Note, this does &lt;em&gt;not&lt;/em&gt; apply to CSS color parsing, which follow the CSS standard.</source>
          <target state="translated">请注意，这不适用于遵循CSS标准的CSS颜色解析。</target>
        </trans-unit>
        <trans-unit id="6e6c407fc9343097f5eb8da3005ef6583b42991a" translate="yes" xml:space="preserve">
          <source>Now they get divided by 3 for &lt;code&gt;RGB&lt;/code&gt;(red, green, blue)... &lt;code&gt;R: c00c, G: 0000, B:0000&lt;/code&gt;...</source>
          <target state="translated">现在它们被 &lt;code&gt;RGB&lt;/code&gt; （红色，绿色，蓝色）除以3 ... &lt;code&gt;R: c00c, G: 0000, B:0000&lt;/code&gt; ...</target>
        </trans-unit>
        <trans-unit id="c3c1ff36a5806b42f8d0732ec9c98d43f66cb06b" translate="yes" xml:space="preserve">
          <source>On a lighter note</source>
          <target state="translated">说句题外话</target>
        </trans-unit>
        <trans-unit id="2ee91262dc281714710a98baa64093dad825e899" translate="yes" xml:space="preserve">
          <source>Pad out to the next total number of characters divisible by 3 (11 -&amp;gt; 12)</source>
          <target state="translated">填充到下一个可被3整除的字符总数（11-&amp;gt; 12）</target>
        </trans-unit>
        <trans-unit id="c50cc129c3062e4377f3d8ffec65ddc847317b08" translate="yes" xml:space="preserve">
          <source>Replace all nonvalid hexadecimal characters with 0's</source>
          <target state="translated">用0代替所有非有效的十六进制字符</target>
        </trans-unit>
        <trans-unit id="4bcb4e163bf193fe874c35e7a1a754e4ed2bd51c" translate="yes" xml:space="preserve">
          <source>Show code snippet</source>
          <target state="translated">显示代码片段</target>
        </trans-unit>
        <trans-unit id="33da177fcd9603be4ffaee5cd1898f7bbd6de709" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;c&lt;/code&gt; is the only valid hex character in &lt;strong&gt;chucknorris&lt;/strong&gt;, the value turns into: &lt;code&gt;c00c00000000&lt;/code&gt;(&lt;strong&gt;0 for all values that were invalid&lt;/strong&gt;).</source>
          <target state="translated">由于 &lt;code&gt;c&lt;/code&gt; 是&lt;strong&gt;chucknorris中&lt;/strong&gt;唯一有效的十六进制字符， &lt;strong&gt;因此&lt;/strong&gt;该值变为： &lt;code&gt;c00c00000000&lt;/code&gt; （ &lt;strong&gt;对于所有无效的值均为0&lt;/strong&gt; ）。</target>
        </trans-unit>
        <trans-unit id="7c337b0ecd082d5d555f5c05d992447814e67fc8" translate="yes" xml:space="preserve">
          <source>Since valid hex values for html backgrounds only contain 2 digits for each color type (&lt;strong&gt;r&lt;/strong&gt;, &lt;strong&gt;g&lt;/strong&gt;, &lt;strong&gt;b&lt;/strong&gt;), the last 2 digits are truncated from each group, leaving an rgb value of &lt;code&gt;c00000&lt;/code&gt; which is a brick-reddish toned color.</source>
          <target state="translated">由于html背景的有效十六进制值仅包含每种颜色类型（ &lt;strong&gt;r&lt;/strong&gt; ， &lt;strong&gt;g&lt;/strong&gt; ， &lt;strong&gt;b&lt;/strong&gt; ）的2位数字，因此每组的最后2位数字均被截断，从而使rgb值 &lt;code&gt;c00000&lt;/code&gt; 为砖红色调的颜色。</target>
        </trans-unit>
        <trans-unit id="ab34b7402e9e42c1c9ec64c3affc073a0fb296c0" translate="yes" xml:space="preserve">
          <source>So &lt;code&gt;chucknorris&lt;/code&gt; in hexadecimal format becomes: &lt;code&gt;c00c00000000&lt;/code&gt;, all other characters become &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt; remains where they are...</source>
          <target state="translated">因此，十六进制格式的 &lt;code&gt;c00c00000000&lt;/code&gt; 变为： c00c00000000 ，所有其他字符变为 &lt;code&gt;0&lt;/code&gt; ,并且 &lt;code&gt;c&lt;/code&gt; 保留在它们所在的位置...</target>
        </trans-unit>
        <trans-unit id="be81fef282fbf90ea4f4b6ba08e17eef2b9550d6" translate="yes" xml:space="preserve">
          <source>So it gets converted to &lt;strong&gt;&lt;code&gt;c00c00000000&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="translated">因此将其转换为&lt;strong&gt; &lt;code&gt;c00c00000000&lt;/code&gt; &lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="6a226ac0686214f3851c2150f8bc75a10df0c5e0" translate="yes" xml:space="preserve">
          <source>So the real result is:</source>
          <target state="translated">所以真正的结果是:</target>
        </trans-unit>
        <trans-unit id="01706013cfdbcb0fc543d3c97784f3f4c235d630" translate="yes" xml:space="preserve">
          <source>Some examples:</source>
          <target state="translated">一些例子:</target>
        </trans-unit>
        <trans-unit id="9d90712d2d85ff7dc5b134241490237e188ff82e" translate="yes" xml:space="preserve">
          <source>Split into three equal groups, with each component representing the corresponding colour component of an RGB colour:</source>
          <target state="translated">分为三个等分量,每个分量代表RGB颜色的对应色分量。</target>
        </trans-unit>
        <trans-unit id="22b8684e77d5872811b2d2bd98487be9c70e6f95" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://www.w3.org/TR/html5/infrastructure.html#rules-for-parsing-a-legacy-color-value&quot;&gt;rules for parsing colors on legacy attributes&lt;/a&gt; involves additional steps than those mentioned in existing answers. The truncate component to 2 digits part is described as:</source>
          <target state="translated">&lt;a href=&quot;https://www.w3.org/TR/html5/infrastructure.html#rules-for-parsing-a-legacy-color-value&quot;&gt;解析旧属性上的颜色&lt;/a&gt;的规则涉及到比现有答案中提到的步骤更多的步骤。 将截断部分转换为2位数部分描述为：</target>
        </trans-unit>
        <trans-unit id="98bebaad014f443e9cfa6aa5e3bb2b6d335181e9" translate="yes" xml:space="preserve">
          <source>The WHATWG HTML spec has the exact algorithm for parsing a legacy color value:
&lt;a href=&quot;https://html.spec.whatwg.org/multipage/infrastructure.html#rules-for-parsing-a-legacy-colour-value&quot;&gt;https://html.spec.whatwg.org/multipage/infrastructure.html#rules-for-parsing-a-legacy-colour-value&lt;/a&gt;</source>
          <target state="translated">WHATWG HTML规范具有解析旧版颜色值的确切算法： &lt;a href=&quot;https://html.spec.whatwg.org/multipage/infrastructure.html#rules-for-parsing-a-legacy-colour-value&quot;&gt;https&lt;/a&gt; : //html.spec.whatwg.org/multipage/infrastructure.html#rules-for-parsing-a-legacy-colour-value</target>
        </trans-unit>
        <trans-unit id="563c77aaf3a6c4c0a6d5f9162b9b45a41b77afa5" translate="yes" xml:space="preserve">
          <source>The browser converts &lt;code&gt;chucknorris&lt;/code&gt; to a hexadecimal value, &lt;code&gt;C00C00000000&lt;/code&gt;.</source>
          <target state="translated">浏览器将 &lt;code&gt;chucknorris&lt;/code&gt; 转换为十六进制值 &lt;code&gt;C00C00000000&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="db492ccb7233e657b773304ac9c32d796a42ba87" translate="yes" xml:space="preserve">
          <source>The browser is trying to convert &lt;code&gt;chucknorris&lt;/code&gt; into hex colour code, because it's not a valid value.</source>
          <target state="translated">浏览器试图将 &lt;code&gt;chucknorris&lt;/code&gt; 转换为十六进制颜色代码，因为它不是有效值。</target>
        </trans-unit>
        <trans-unit id="3bb41ff155e8f44950032e41ef83da2257be30ae" translate="yes" xml:space="preserve">
          <source>The browser needs only two digits to indicate the colour:</source>
          <target state="translated">浏览器只需要两个数字来表示颜色。</target>
        </trans-unit>
        <trans-unit id="adcdc605edb8695db4c3c6223cd61a037e20376a" translate="yes" xml:space="preserve">
          <source>The browser then divides the result into 3 groupds: &lt;code&gt;Red = c00c&lt;/code&gt;, &lt;code&gt;Green = 0000&lt;/code&gt;, &lt;code&gt;Blue = 0000&lt;/code&gt;.</source>
          <target state="translated">然后，浏览器将结果分为3组： &lt;code&gt;Red = c00c&lt;/code&gt; ， &lt;code&gt;Green = 0000&lt;/code&gt; ， &lt;code&gt;Blue = 0000&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0118d700e198b7fe2a7acf885fe97e75b338478f" translate="yes" xml:space="preserve">
          <source>The browser will try to convert &lt;strong&gt;chucknorris&lt;/strong&gt; into a hexadecimal value.</source>
          <target state="translated">浏览器将尝试将&lt;strong&gt;chucknorris&lt;/strong&gt;转换为十六进制值。</target>
        </trans-unit>
        <trans-unit id="244c5be6c1ed4f3119517a0cdca68341bfda23cf" translate="yes" xml:space="preserve">
          <source>The code Netscape Classic used for parsing color strings is open source:
&lt;a href=&quot;https://dxr.mozilla.org/classic/source/lib/layout/layimage.c#155&quot;&gt;https://dxr.mozilla.org/classic/source/lib/layout/layimage.c#155&lt;/a&gt;</source>
          <target state="translated">用于解析颜色字符串的Netscape Classic代码是开源的： &lt;a href=&quot;https://dxr.mozilla.org/classic/source/lib/layout/layimage.c#155&quot;&gt;https&lt;/a&gt; ： //dxr.mozilla.org/classic/source/lib/layout/layimage.c#155</target>
        </trans-unit>
        <trans-unit id="362cd8c956eec39c8859cae84ab2235fd7f2b8c1" translate="yes" xml:space="preserve">
          <source>The reason is the browser can &lt;strong&gt;not understand&lt;/strong&gt; it and try to somehow translate it to what it can understand and in this case into a hexadecimal value!...</source>
          <target state="translated">原因是浏览器&lt;strong&gt;无法理解&lt;/strong&gt;它，并尝试以某种方式将其转换为可以理解的值，在这种情况下，将其转换为十六进制值！</target>
        </trans-unit>
        <trans-unit id="cc2c9111fbc1046d9f042a864ddb534dbff0391d" translate="yes" xml:space="preserve">
          <source>The rules state:</source>
          <target state="translated">规则中规定:</target>
        </trans-unit>
        <trans-unit id="7b8eeefac6b07f44be74847c5f460c24fa05d0d7" translate="yes" xml:space="preserve">
          <source>Then the &lt;code&gt;C00C00000000&lt;/code&gt; hexadecimal value is converted to &lt;strong&gt;RGB&lt;/strong&gt; format (divided by 3):</source>
          <target state="translated">然后将 &lt;code&gt;C00C00000000&lt;/code&gt; 十六进制值转换为&lt;strong&gt;RGB&lt;/strong&gt;格式（除以3）：</target>
        </trans-unit>
        <trans-unit id="99b2d8c0528f0bb8b9733bf673e73481a97c434c" translate="yes" xml:space="preserve">
          <source>This also answers the other part of the question; why does &lt;code&gt;bgcolor=&quot;chucknorr&quot;&lt;/code&gt; produce a yellow colour? Well, if we apply the rules, the string is:</source>
          <target state="translated">这也回答了问题的另一部分。 为什么 &lt;code&gt;bgcolor=&quot;chucknorr&quot;&lt;/code&gt; 产生黄色？ 好吧，如果我们应用规则，则字符串为：</target>
        </trans-unit>
        <trans-unit id="7f6519c3c962b763ec04c1f3391d0840b781b47d" translate="yes" xml:space="preserve">
          <source>This seems to be an issue primarily with &lt;strong&gt;Internet&amp;nbsp;Explorer&lt;/strong&gt; and &lt;strong&gt;Opera&lt;/strong&gt; (12) as both Chrome (31) and Firefox (26) just ignore this.</source>
          <target state="translated">这似乎主要是&lt;strong&gt;Internet Explorer&lt;/strong&gt;和&lt;strong&gt;Opera&lt;/strong&gt; （12）的问题，因为Chrome（31）和Firefox（26）都忽略了这一点。</target>
        </trans-unit>
        <trans-unit id="982b4efb7f62e7ba16e6010f5d112c58a8dc8c0f" translate="yes" xml:space="preserve">
          <source>Truncate each of the arguments from the right down to two characters</source>
          <target state="translated">将每个参数从右侧截断到两个字符。</target>
        </trans-unit>
        <trans-unit id="e22523618c5e0152d5cb390dfdabf3dcb9d184bb" translate="yes" xml:space="preserve">
          <source>UPDATE: &lt;em&gt;The original answerers who said the color was &lt;code&gt;#CC0000&lt;/code&gt; have since edited their answers to include the correction.&lt;/em&gt;</source>
          <target state="translated">更新： &lt;em&gt;原来说颜色为 &lt;code&gt;#CC0000&lt;/code&gt; 的原始答复者已经编辑了他们的答案以包括更正。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2bb2894918109500d7347664d5db11d5763f5be5" translate="yes" xml:space="preserve">
          <source>Update: this code does not exactly match what is defined in the spec, but the only difference there is a few lines of code. I think it is these lines that was added (in Netscape 4):</source>
          <target state="translated">更新:这段代码与规范中的定义不完全一致,唯一的区别是有几行代码。我认为是这几行代码被添加了(在Netscape 4中)。</target>
        </trans-unit>
        <trans-unit id="a80832a90f0eb46f0620cb5802e9e519794d6d1a" translate="yes" xml:space="preserve">
          <source>What's going on here?</source>
          <target state="translated">这到底是怎么回事?</target>
        </trans-unit>
        <trans-unit id="4ac41a83308a6172be5bc58e0eb88bd447a0e42b" translate="yes" xml:space="preserve">
          <source>Which becomes &lt;strong&gt;#c00000&lt;/strong&gt;, a shade of red.</source>
          <target state="translated">变成&lt;strong&gt;＃c00000&lt;/strong&gt; ，红色阴影。</target>
        </trans-unit>
        <trans-unit id="a1cf917d626d52f0ed9d0975baea1e19c7cfce40" translate="yes" xml:space="preserve">
          <source>Which gives a light yellow gold colour. As the string starts off as 9 characters, we keep the second C this time around hence it ends up in the final colour value.</source>
          <target state="translated">这样就会呈现出淡淡的金黄色。由于字符串一开始是9个字符,所以这次我们保留了第二个C,因此最后的颜色值是最终的颜色。</target>
        </trans-unit>
        <trans-unit id="3b5332a6836335115a5e712a8f03989a61013d00" translate="yes" xml:space="preserve">
          <source>Which gives the following result:</source>
          <target state="translated">其中给出的结果如下:</target>
        </trans-unit>
        <trans-unit id="bf43a7d4d3de11551375719c67aac4c5393d224a" translate="yes" xml:space="preserve">
          <source>Why does HTML think “chucknorris” is a color</source>
          <target state="translated">为什么HTML认为 &quot;chucknorris &quot;是一种颜色?</target>
        </trans-unit>
        <trans-unit id="7a18bdea0d37a5050bfc3e29d04f2b01bb5d937f" translate="yes" xml:space="preserve">
          <source>keep the hex values, and add 0's where necessary: &lt;code&gt;C0 00 00&lt;/code&gt;</source>
          <target state="translated">保留十六进制值，并在必要时添加0： &lt;code&gt;C0 00 00&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2c47551fdaf627f26cf5a7355e4bce773c4d6dc9" translate="yes" xml:space="preserve">
          <source>make the string a length that is a multiple of 3 by adding 0s: &lt;code&gt;chucknorris0&lt;/code&gt;</source>
          <target state="translated">通过添加0将字符串的长度 &lt;code&gt;chucknorris0&lt;/code&gt; 3的倍数： chucknorris0</target>
        </trans-unit>
        <trans-unit id="30740490b283b12912b3d0fbe1a7800b1169f5a6" translate="yes" xml:space="preserve">
          <source>separate the string into 3 equal length strings: &lt;code&gt;chuc knor ris0&lt;/code&gt;</source>
          <target state="translated">将字符串分成3个相等长度的字符串： &lt;code&gt;chuc knor ris0&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4607b8a03bcdec83b0345e2fa20d1b08e5977fe0" translate="yes" xml:space="preserve">
          <source>truncate each string to 2 characters: &lt;code&gt;ch kn ri&lt;/code&gt;</source>
          <target state="translated">将每个字符串截断为2个字符： &lt;code&gt;ch kn ri&lt;/code&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
