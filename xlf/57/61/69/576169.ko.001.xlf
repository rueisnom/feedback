<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://stackoverflow.com/questions/576169">
    <body>
      <group id="576169">
        <trans-unit id="7b8a751539c1f000376949b749b7c8a70d30114d" translate="yes" xml:space="preserve">
          <source>&quot;What difference is there actually in this code?:&quot;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&quot;이 코드에는 실제로 어떤 차이점이 있습니까?&quot;&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b7aa86be7cf69101b5c11eff45b4a5a25afe38b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;super()&lt;/code&gt; lets you avoid referring to the base class explicitly, which can be nice. But the main advantage comes with multiple inheritance, where all sorts of &lt;a href=&quot;http://www.artima.com/weblogs/viewpost.jsp?thread=236275&quot;&gt;fun stuff&lt;/a&gt; can happen. See the &lt;a href=&quot;https://docs.python.org/2/library/functions.html#super&quot;&gt;standard docs on super&lt;/a&gt; if you haven't already.</source>
          <target state="translated">&lt;code&gt;super()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 사용하면 기본 클래스를 명시 적으로 참조하지 않아도되므로 좋을 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그러나 주요 장점은 모든 종류의 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.artima.com/weblogs/viewpost.jsp?thread=236275&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;재미있는 일&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 이 발생할 수있는 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다중 상속 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;아직 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.python.org/2/library/functions.html#super&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;표준 문서를&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 참조하십시오 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="521db6e7d01c98f987b74991f83b0fed3e15feda" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;(That answer is not clever or particularly interesting, but in spite of direct criticism in the comments and over 17 downvotes, the answerer persisted in suggesting it until a kind editor fixed his problem.)&lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(그 답변은 영리하거나 특히 흥미롭지 않지만, 의견과 17 개 이상의 공감 율에 대한 직접적인 비판에도 불구하고, 답변자는 친절한 편집자가 자신의 문제를 해결할 때까지 계속 제안했습니다.)&lt;/font&gt;&lt;/font&gt;&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="614d9df3f2f50804fb853ebd00b2ed6f6ad2eb78" translate="yes" xml:space="preserve">
          <source>And &lt;code&gt;UserA&lt;/code&gt; does not call the UserDependency method:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그리고 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;UserA&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 UserDependency 메소드를 호출하지 않습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="30d2c048fcea968e08992d23ac7fbd7b95cd036d" translate="yes" xml:space="preserve">
          <source>And let's create a dependency that we want to be called after the Child:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그리고 Child 다음에 호출하려는 종속성을 작성합시다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ce29b9d1efdb53530d63803e9b964b1f4be50c89" translate="yes" xml:space="preserve">
          <source>But &lt;code&gt;UserB&lt;/code&gt; does in-fact call UserDependency because &lt;code&gt;ChildB&lt;/code&gt; invokes &lt;code&gt;super&lt;/code&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그러나 &lt;/font&gt; &lt;code&gt;ChildB&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 &lt;/font&gt; &lt;code&gt;super&lt;/code&gt; 를&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 호출 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하기 때문에 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;UserB&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 실제로 &lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;UserDependency를&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 호출합니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="313d6c67c467add7dfcb14adfdb06ec3267c1cac" translate="yes" xml:space="preserve">
          <source>Criticism for another answer</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다른 답변에 대한 비판&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2d412a10077dff5a0bc8c827d967957b6da52c24" translate="yes" xml:space="preserve">
          <source>Criticisms of other answers:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다른 답변에 대한 비판 :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ec6725c61b26f37beb5a9d30c4ef6756963dbbf0" translate="yes" xml:space="preserve">
          <source>Explanation: That answer suggested calling super like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 답변은 다음과 같이 super를 호출하도록 제안했습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="775b70cb283b67e7b45195276b3f4a22c732fdcc" translate="yes" xml:space="preserve">
          <source>HOWEVER, this breaks calls to &lt;code&gt;super&lt;/code&gt; for any classes that inherit from your class, where &lt;code&gt;self.__class__&lt;/code&gt; could return a child class. For example:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그러나이이 휴식 통화 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;super&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 어떤 클래스에 대한 클래스에서 상속 그 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;self.__class__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 자식 클래스를 반환 할 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;예를 들면 다음과 같습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="982b6852585a46506fc4c63544abfdb4a56b3531" translate="yes" xml:space="preserve">
          <source>Here I have a class &lt;code&gt;Square&lt;/code&gt;, which is a sub-class of &lt;code&gt;Rectangle&lt;/code&gt;. Say I don't want to write a separate constructor for &lt;code&gt;Square&lt;/code&gt; because the constructor for &lt;code&gt;Rectangle&lt;/code&gt; is good enough, but for whatever reason I want to implement a Square so I can reimplement some other method.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;여기에 클래스가 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Square&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 의 하위 클래스, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Rectangle&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt; &lt;code&gt;Rectangle&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; 의 생성자 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;가 충분 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하기 때문에 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Square&lt;/code&gt; 에&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 대해 별도의 생성자를 작성하고 싶지 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;않지만 어떤 이유로 든 Square를 구현하고 싶기 때문에 다른 방법을 다시 구현할 수 있습니다.&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d897e7d1901facf67bdf7d5735cbe108fb04682d" translate="yes" xml:space="preserve">
          <source>Here's code that's actually closely equivalent to &lt;code&gt;super&lt;/code&gt; (how it's implemented in C, minus some checking and fallback behavior, and translated to Python):</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다음은 실제로 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;super&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 와 거의 동일한 코드입니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(C에서 구현하고 검사 및 폴백 동작을 뺀 방법을 파이썬으로 변환하는 방법).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f1c0ad9d2070cfca96329d11e6424dd5d65bf7d7" translate="yes" xml:space="preserve">
          <source>How does super do this in Python 3 without being told explicitly which class and instance from the method it was called from?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;파이썬 3에서 super는 어떻게 호출 된 메소드의 클래스와 인스턴스를 명시 적으로 말하지 않고 어떻게합니까?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1f712afe4c3219c174967bbc1c97e9c4cd7a2d41" translate="yes" xml:space="preserve">
          <source>I further explain below.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;나는 아래에 더 설명한다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="67806aef4cd47edf6c8e854ef035e14d94ae4a70" translate="yes" xml:space="preserve">
          <source>I illustrate this difference in an answer at the &lt;a href=&quot;https://stackoverflow.com/a/33469090/541136&quot;&gt;canonical question, How to use 'super' in Python?&lt;/a&gt;, which demonstrates &lt;strong&gt;dependency injection&lt;/strong&gt; and &lt;strong&gt;cooperative multiple inheritance&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;나는 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/33469090/541136&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;파이썬에서 '슈퍼'를 사용하는 방법&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 에 대한 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;정식 질문&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 에 대한 대답 에서이 차이점을 설명합니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;의존성 주입&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 과 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;협동 다중 상속&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 을 보여줍니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="69d18703f8012c82ef2ee70d9c0e7025ab7d9044" translate="yes" xml:space="preserve">
          <source>I'll explain here.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;여기에 설명하겠습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fbdc8ccf7c2e0f8509fddeb4507a897f08b912d7" translate="yes" xml:space="preserve">
          <source>I'm curious to know about the actual difference between the following 2 child classes.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다음 두 하위 클래스의 실제 차이점에 대해 알고 싶습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="013ae50259927eafd7dba45cabc87491454ed669" translate="yes" xml:space="preserve">
          <source>I'm trying to understand &lt;code&gt;super()&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &lt;code&gt;super()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 이해하려고합니다.&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3d510e01fd2580495a8dc56d24a934df91a79383" translate="yes" xml:space="preserve">
          <source>I'm trying to understand the use of &lt;code&gt;super()&lt;/code&gt;. From the looks of it, both child classes can be created, just fine.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;super()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 사용을 이해하려고합니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그것의 외관에서, 두 자식 클래스 모두 생성 될 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c983791dccd73919d081b5aa39a3de8e56dcc7cf" translate="yes" xml:space="preserve">
          <source>If Python didn't have &lt;code&gt;super&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;파이썬에 &lt;/font&gt; &lt;code&gt;super&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; 가 없다면&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="94cacf845a1e096419ac09fe42dd189a715f48f5" translate="yes" xml:space="preserve">
          <source>If we didn't have the &lt;code&gt;super&lt;/code&gt; object, we'd have to write this manual code everywhere (or recreate it!) to ensure that we call the proper next method in the Method Resolution Order!</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;super&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 객체를 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;가지고 있지 않다면 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;,이 매뉴얼 코드를 어디서나 작성하거나 (또는 ​​다시 작성해야) 메소드 해결 순서에서 올바른 다음 메소드를 호출해야합니다!&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f6bed384df46f8f09be1fe4311afafbbc891f8c7" translate="yes" xml:space="preserve">
          <source>If you add a &lt;code&gt;ClassC&lt;/code&gt; that uses multiple inheritance:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다중 상속을 사용 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하는 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;ClassC&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 추가하는 경우 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c7c49d3aea8156f1de53014c72b233b0c4a85a4a" translate="yes" xml:space="preserve">
          <source>In Python 2, we are required to use it like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;파이썬 2에서는 다음과 같이 사용해야합니다 :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bdf2b62bc2e9c4ad298cc3649b7b4279c94e2411" translate="yes" xml:space="preserve">
          <source>In Python 3, we can call it like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;파이썬 3에서는 다음과 같이 호출 할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="19d5f26fb874999b1aecef4edc966100fa016e8d" translate="yes" xml:space="preserve">
          <source>In no circumstance should you do the following, which another answer suggests, as you'll definitely get errors when you subclass ChildB:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ChildB를 서브 클래 싱 할 때 오류가 발생하기 때문에 다음과 같은 경우에는 다음과 같이해야합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="69e4d25ea0c4fe5d1668372c5acb33b65ab958e6" translate="yes" xml:space="preserve">
          <source>It gets the calling stack frame, and finds the class (implicitly stored as a local free variable, &lt;code&gt;__class__&lt;/code&gt;, making the calling function a closure over the class) and the first argument to that function, which should be the instance or class that informs it which Method Resolution Order (MRO) to use.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;호출 스택 프레임을 가져오고 클래스 (내재적으로 로컬 자유 변수 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;__class__&lt;/code&gt; 로&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 호출하여 호출 함수를 클래스에 대한 클로저로 지정 함)와 해당 함수의 첫 번째 인수 (이를 알려주는 인스턴스 또는 클래스)를 찾습니다. 사용할 MRO (Method Resolution Order)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8ce2ae31ef8a844e3b367354faa659a44b39cedb" translate="yes" xml:space="preserve">
          <source>It's been noted that in Python 3.0+ you can use</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Python 3.0 이상에서는 다음을 사용할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e2ded1d3b411cff93927f1c1b5c1a5bc18d0f6a2" translate="yes" xml:space="preserve">
          <source>It's rather hand-wavey and doesn't tell us much, but the point of &lt;code&gt;super&lt;/code&gt; is not to avoid writing the parent class. The point is to ensure that the next method in line in the method resolution order (MRO) is called. This becomes important in multiple inheritance.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;오히려 손이 흔들리고 많은 것을 말하지 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;는 않지만 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;super&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 의 요점은 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;부모 클래스를 쓰는 것을 피하는 것이 아닙니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;요점은 MRO (Method Resolution Order)에 따라 다음 메소드가 호출되도록하는 것입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이것은 다중 상속에서 중요합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1efb022ca61801794dbc70bf04ba0a45b0b44a78" translate="yes" xml:space="preserve">
          <source>Just a heads up... with Python 2.7, and I believe ever since &lt;code&gt;super()&lt;/code&gt; was introduced in version 2.2, you can only call &lt;a href=&quot;http://docs.python.org/library/functions.html#super&quot;&gt;&lt;code&gt;super()&lt;/code&gt;&lt;/a&gt; if one of the parents inherit from a class that eventually inherits &lt;code&gt;object&lt;/code&gt; (&lt;a href=&quot;http://docs.python.org/glossary.html#term-new-style-class&quot;&gt;new-style classes&lt;/a&gt;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;파이썬 2.7에서 머리를 숙이고 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;super()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 가 버전 2.2에 도입 된 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이래로 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;부모 중 하나가 결국 &lt;/font&gt; &lt;code&gt;object&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; 상속받는 클래스 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;( &lt;/font&gt;&lt;a href=&quot;http://docs.python.org/glossary.html#term-new-style-class&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;new-style classes)&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 에서 상속하면 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://docs.python.org/library/functions.html#super&quot;&gt; &lt;code&gt;super()&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 만 호출 할 수 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;있다고 생각 &lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;합니다&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ).&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c11b889063ddec79111dade62ed3e68cda5d425e" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;https://docs.python.org/3/library/functions.html#super&quot;&gt;the syntax changed in Python 3.0&lt;/a&gt;: you can just say &lt;code&gt;super().__init__()&lt;/code&gt; instead of &lt;code&gt;super(ChildB, self).__init__()&lt;/code&gt; which IMO is quite a bit nicer. The standard docs also refer to a &lt;a href=&quot;https://rhettinger.wordpress.com/2011/05/26/super-considered-super/&quot;&gt;guide to using &lt;code&gt;super()&lt;/code&gt;&lt;/a&gt; which is quite explanatory.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;참고 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.python.org/3/library/functions.html#super&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;파이썬 3.0에서 변경 구문&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : 당신은 그냥 말할 수있는 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;super().__init__()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 대신 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;super(ChildB, self).__init__()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 하는 IMO 꽤 비트 좋네요. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;표준 문서는 또한 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;매우 설명적인 &lt;/font&gt;&lt;a href=&quot;https://rhettinger.wordpress.com/2011/05/26/super-considered-super/&quot;&gt; &lt;code&gt;super()&lt;/code&gt; &lt;/a&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 사용 안내서를&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 참조합니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="120b8e7780aebaa08d66e08924d05a7926d88a33" translate="yes" xml:space="preserve">
          <source>Now remember, &lt;code&gt;ChildB&lt;/code&gt; uses super, &lt;code&gt;ChildA&lt;/code&gt; does not:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이제 기억 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;ChildB&lt;/code&gt; 는&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , 슈퍼 사용 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;ChildA&lt;/code&gt; 가&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 되지 않습니다 :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1e1bbbacc79ffa0321328ffd3a629b28c48e9fa4" translate="yes" xml:space="preserve">
          <source>Personally, as for python 2.7 code, I'm going to continue using &lt;code&gt;BaseClassName.__init__(self, args)&lt;/code&gt; until I actually get the advantage of using &lt;code&gt;super()&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;개인적으로 파이썬 2.7 코드는 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;실제로 &lt;/font&gt; &lt;code&gt;super()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; 사용의 이점을 얻을 때까지 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;BaseClassName.__init__(self, args)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 을 계속 사용 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;합니다.&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="656b5e0f28aa8e09c2d356dcaad53c550ed7e748" translate="yes" xml:space="preserve">
          <source>Since it requires that first argument for the MRO, &lt;a href=&quot;https://bugs.python.org/issue31118&quot;&gt;using &lt;code&gt;super&lt;/code&gt; with static methods is impossible&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MRO에 대한 첫 번째 인수가 필요하므로 &lt;/font&gt;&lt;a href=&quot;https://bugs.python.org/issue31118&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;정적 메소드와 함께 &lt;/font&gt;&lt;/a&gt; &lt;code&gt;super&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 &lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;사용 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하는 것은 불가능&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="50c6e41121c38b6b90d6b8a75b15ae39265fe7f4" translate="yes" xml:space="preserve">
          <source>So if you are designed your classes so that they can be used in a Cooperative Multiple Inheritance scenario, you use &lt;code&gt;super&lt;/code&gt; because you don't really know who is going to be the ancestor at runtime.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;따라서 Cooperative Multiple Inheritance 시나리오에서 클래스를 사용할 수 있도록 클래스를 설계 한 경우 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;런타임시 누가 조상이 될지 모르기 때문에 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;super&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 사용 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="681df8aa8e2438f396cffd8a248cb63baa354d56" translate="yes" xml:space="preserve">
          <source>Super has no side effects</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;슈퍼는 부작용이 없습니다&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cee4c8b6f9b0ed98c6a0f4aa78798e8c7179894c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://rhettinger.wordpress.com/2011/05/26/super-considered-super/&quot;&gt;super considered super post&lt;/a&gt; and &lt;a href=&quot;https://youtu.be/EiOglTERPEo&quot;&gt;pycon 2015 accompanying video&lt;/a&gt; explain this pretty well.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;https://rhettinger.wordpress.com/2011/05/26/super-considered-super/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;슈퍼 고려 슈퍼 포스트&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 와 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://youtu.be/EiOglTERPEo&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;pycon 2015 첨부 된 비디오는&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 꽤 잘 설명합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5e2ec71728d3de52aa02d0ab10c1f730dd4325c3" translate="yes" xml:space="preserve">
          <source>The main difference is that &lt;code&gt;ChildA.__init__&lt;/code&gt; will unconditionally call &lt;code&gt;Base.__init__&lt;/code&gt; whereas &lt;code&gt;ChildB.__init__&lt;/code&gt; will call &lt;code&gt;__init__&lt;/code&gt; in &lt;strong&gt;whatever class happens to be &lt;code&gt;ChildB&lt;/code&gt; ancestor in &lt;code&gt;self&lt;/code&gt;'s line of ancestors&lt;/strong&gt;
(which may differ from what you expect).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;가장 큰 차이점은 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;ChildA.__init__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 은 무조건 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Base.__init__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 호출 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하는 반면 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;ChildB.__init__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 &lt;/font&gt;&lt;strong&gt; &lt;code&gt;self&lt;/code&gt; &lt;/strong&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 조상 라인 &lt;/font&gt;&lt;/strong&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;에서 &lt;/font&gt;&lt;/strong&gt;&lt;strong&gt; &lt;code&gt;ChildB&lt;/code&gt; &lt;/strong&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 조상이되는 &lt;/font&gt;&lt;/strong&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;클래스&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 에서 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;__init__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 을 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;호출 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;한다는&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 것입니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (예상 한 것과 다를 수 있음).&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="73a82aa45bc046833ee1591294e52598ae55f315" translate="yes" xml:space="preserve">
          <source>The primary difference in this code is that you get a layer of indirection in the &lt;code&gt;__init__&lt;/code&gt; with &lt;code&gt;super&lt;/code&gt;, which uses the current class to determine the next class's &lt;code&gt;__init__&lt;/code&gt; to look up in the MRO.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 코드의 주요 차이점은에 간접 층을 얻을 수 있다는 것입니다 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;__init__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 와 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;super&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 다음 클래스의 결정은 현재 클래스를 사용하여, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;__init__&lt;/code&gt; 을&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; MRO에서 찾아 볼 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="efafeff5ca15dcf63ce39777e8527649737832f0" translate="yes" xml:space="preserve">
          <source>The reason we use &lt;code&gt;super&lt;/code&gt; is so that child classes that may be using cooperative multiple inheritance will call the correct next parent class function in the Method Resolution Order (MRO).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;super&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 사용하는 이유는 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;협력 다중 상속을 사용하는 하위 클래스가 MRO (Method Resolution Order)에서 올바른 다음 상위 클래스 함수를 호출하기 때문입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="128554c42e47d524faa5e1ee8f33583351379711" translate="yes" xml:space="preserve">
          <source>There isn't, really. &lt;code&gt;super()&lt;/code&gt; looks at the next class in the MRO (method resolution order, accessed with &lt;code&gt;cls.__mro__&lt;/code&gt;) to call the methods. Just calling the base &lt;code&gt;__init__&lt;/code&gt; calls the base &lt;code&gt;__init__&lt;/code&gt;. As it happens, the MRO has exactly one item-- the base. So you're really doing the exact same thing, but in a nicer way with &lt;code&gt;super()&lt;/code&gt; (particularly if you get into multiple inheritance later).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;실제로는 없습니다. &lt;/font&gt;&lt;/font&gt; &lt;code&gt;super()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 MRO의 다음 클래스 ( &lt;/font&gt;&lt;/font&gt; &lt;code&gt;cls.__mro__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 액세스하는 메소드 분석 순서 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;)를보고 메소드를 호출합니다. 그냥 기본 전화 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;__init__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 기본 호출 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;__init__&lt;/code&gt; 을&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . MRO에는 기본적으로 정확히 하나의 항목이 있습니다. 그래서 당신은 실제로 똑같은 일을하지만 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;super()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 사용하여 더 잘 수행합니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(특히 나중에 다중 상속을받는 경우).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5ad67f311c731daa8ad267b6d0a11ac4c75118fa" translate="yes" xml:space="preserve">
          <source>This is &lt;em&gt;completely&lt;/em&gt; wrong. &lt;code&gt;super&lt;/code&gt; lets us look up the next parent in the MRO (see the first section of this answer) for child classes. If you tell &lt;code&gt;super&lt;/code&gt; we're in the child instance's method, it will then lookup the next method in line (probably this one) resulting in recursion, probably causing a logical failure (in the answerer's example, it does) or a &lt;code&gt;RuntimeError&lt;/code&gt; when the recursion depth is exceeded.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이것은 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;완전히&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 잘못되었습니다. &lt;/font&gt;&lt;/font&gt; &lt;code&gt;super&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 하위 클래스에 대한 MRO의 다음 부모 (이 답변의 첫 번째 섹션 참조)를 찾도록합니다. &lt;/font&gt;&lt;/font&gt; &lt;code&gt;super&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 에게 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;우리가 자식 인스턴스의 메소드에 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;있다고 말하면 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다음 메소드를 라인 (아마도이 ​​메소드)으로 찾아 재귀를 일으키고 아마도 논리적 실패 (응답자의 예에서는) 또는 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;RuntimeError&lt;/code&gt; 일&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 때 재귀 깊이가 초과되었습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a02d639fb189fe9aaedd80d36e85b997afe1ce9b" translate="yes" xml:space="preserve">
          <source>Understanding Python super() with __init__() methods</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;__init __ () 메서드를 사용하여 Python super () 이해&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fd23c57c51d5b0bf648f12dd6739eb32afaa90bc" translate="yes" xml:space="preserve">
          <source>When I create a &lt;code&gt;Square&lt;/code&gt; using &lt;code&gt;mSquare = Square('a', 10,10)&lt;/code&gt;, Python calls the constructor for &lt;code&gt;Rectangle&lt;/code&gt; because I haven't given &lt;code&gt;Square&lt;/code&gt; its own constructor. However, in the constructor for &lt;code&gt;Rectangle&lt;/code&gt;, the call &lt;code&gt;super(self.__class__,self)&lt;/code&gt; is going to return the superclass of &lt;code&gt;mSquare&lt;/code&gt;, so it calls the constructor for &lt;code&gt;Rectangle&lt;/code&gt; again. This is how the infinite loop happens, as was mentioned by @S_C. In this case, when I run &lt;code&gt;super(...).__init__()&lt;/code&gt; I am calling the constructor for &lt;code&gt;Rectangle&lt;/code&gt; but since I give it no arguments, I will get an error.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;내가 만들 때 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Square&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 사용하여 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;mSquare = Square('a', 10,10)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , 파이썬의 생성자를 호출 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Rectangle&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 내가 제공하지 않았기 때문에 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Square&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 자신의 생성자를. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그러나, 생성자에 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Rectangle&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , 통화 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;super(self.__class__,self)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 의 슈퍼 클래스 반환하는 것입니다 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;mSquare&lt;/code&gt; 을&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 그래서 생성자 호출, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Rectangle&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 다시. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@S_C에서 언급했듯이 무한 루프가 발생하는 방식입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 경우 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;super(...).__init__()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 실행할 때 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Rectangle&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 의 생성자를 호출 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하지만 인수를 지정하지 않으므로 오류가 발생합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cde4744825e7e84a1b8198b65769881ad4e9dbb7" translate="yes" xml:space="preserve">
          <source>Without super, you are limited in your ability to use multiple inheritance:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;수퍼가 없으면 다중 상속을 사용할 수있는 능력이 제한됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="509a354e43247d3a90534a7d2167805abbd62537" translate="yes" xml:space="preserve">
          <source>Written a little more like native Python:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;네이티브 Python과 비슷합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5b0fa24c2bd9b59ace06430f7547a06122f05c72" translate="yes" xml:space="preserve">
          <source>You have inserted &lt;code&gt;Mixin&lt;/code&gt; in between &lt;code&gt;ChildB&lt;/code&gt; and &lt;code&gt;Base&lt;/code&gt;. And you can take advantage of it with &lt;code&gt;super()&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &lt;code&gt;ChildB&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; 와 &lt;/font&gt; &lt;code&gt;Base&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; 사이 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;에 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Mixin&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 을 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;삽입했습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그리고 당신은 &lt;/font&gt; &lt;code&gt;super()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; 로 그것을 이용할 수 있습니다&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="051f61a5e090c4143861ad401dc852d6833fe2f3" translate="yes" xml:space="preserve">
          <source>gets into infinite recursion.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;무한 재귀에 빠진다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cf8b646f8f800e8bea17e956b9ddc27f0224fb15" translate="yes" xml:space="preserve">
          <source>super() lets you avoid referring to the base class explicitly, which can be nice. . But the main advantage comes with multiple inheritance, where all sorts of fun stuff can happen. See the standard docs on super if you haven't already.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;super ()를 사용하면 기본 클래스를 명시 적으로 참조하지 않아도되므로 좋을 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그러나 주요 장점은 모든 종류의 재미있는 일이 발생할 수있는 다중 상속입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;아직 표준 문서를 참조하십시오.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c49f58ba362f4f30464f090b793e0b578153a1d1" translate="yes" xml:space="preserve">
          <source>then &lt;strong&gt;&lt;code&gt;Base&lt;/code&gt; is no longer the parent of &lt;code&gt;ChildB&lt;/code&gt;&lt;/strong&gt; for &lt;code&gt;ChildC&lt;/code&gt; instances. Now &lt;code&gt;super(ChildB, self)&lt;/code&gt; will point to &lt;code&gt;Mixin&lt;/code&gt; if &lt;code&gt;self&lt;/code&gt; is a &lt;code&gt;ChildC&lt;/code&gt; instance.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다음 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt; &lt;code&gt;Base&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 더 이상의 부모입니다 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;ChildB&lt;/code&gt; &lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 에 대한 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;ChildC&lt;/code&gt; 의&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 인스턴스. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이제 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;super(ChildB, self)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 가리 킵니다 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Mixin&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 경우 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;self&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; A는 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;ChildC&lt;/code&gt; 의&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 인스턴스.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cc6d1365e74eeffa3b579826e7726f0e6232cda9" translate="yes" xml:space="preserve">
          <source>to make your call, which is concise and does not require you to reference the parent OR class names explicitly, which can be handy. I just want to add that for Python 2.7 or under, it is possible to get this name-insensitive behaviour by writing &lt;code&gt;self.__class__&lt;/code&gt; instead of the class name, i.e.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;간결하고 전화를 걸기 위해 부모 OR 클래스 이름을 명시 적으로 참조 할 필요가 없으므로 편리합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;파이썬 2.7 이하에서는 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;클래스 이름 대신 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;self.__class__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;작성하여 이름에 무관 한 동작을 얻을 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="70bf8e981045e21a5186d16716649089997ddf70" translate="yes" xml:space="preserve">
          <source>works as expected</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;예상대로 작동&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
