<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/576169">
    <body>
      <group id="576169">
        <trans-unit id="7b8a751539c1f000376949b749b7c8a70d30114d" translate="yes" xml:space="preserve">
          <source>&quot;What difference is there actually in this code?:&quot;</source>
          <target state="translated">&quot;¿Qué diferencia hay realmente en este código?&quot;</target>
        </trans-unit>
        <trans-unit id="b7aa86be7cf69101b5c11eff45b4a5a25afe38b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;super()&lt;/code&gt; lets you avoid referring to the base class explicitly, which can be nice. But the main advantage comes with multiple inheritance, where all sorts of &lt;a href=&quot;http://www.artima.com/weblogs/viewpost.jsp?thread=236275&quot;&gt;fun stuff&lt;/a&gt; can happen. See the &lt;a href=&quot;https://docs.python.org/2/library/functions.html#super&quot;&gt;standard docs on super&lt;/a&gt; if you haven't already.</source>
          <target state="translated">&lt;code&gt;super()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; permite evitar referirse expl&amp;iacute;citamente a la clase base, lo que puede ser agradable. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Pero la principal ventaja viene con la herencia m&amp;uacute;ltiple, donde &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;pueden ocurrir &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;todo tipo de &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.artima.com/weblogs/viewpost.jsp?thread=236275&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;cosas divertidas&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vea los &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.python.org/2/library/functions.html#super&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;documentos est&amp;aacute;ndar en super&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; si a&amp;uacute;n no lo ha hecho.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="521db6e7d01c98f987b74991f83b0fed3e15feda" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;(That answer is not clever or particularly interesting, but in spite of direct criticism in the comments and over 17 downvotes, the answerer persisted in suggesting it until a kind editor fixed his problem.)&lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(Esa respuesta no es inteligente ni particularmente interesante, pero a pesar de las cr&amp;iacute;ticas directas en los comentarios y m&amp;aacute;s de 17 votos negativos, el respondedor persisti&amp;oacute; en sugerirlo hasta que un editor amable solucion&amp;oacute; su problema).&lt;/font&gt;&lt;/font&gt;&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="614d9df3f2f50804fb853ebd00b2ed6f6ad2eb78" translate="yes" xml:space="preserve">
          <source>And &lt;code&gt;UserA&lt;/code&gt; does not call the UserDependency method:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;UserA&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; no llama al m&amp;eacute;todo UserDependency:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="30d2c048fcea968e08992d23ac7fbd7b95cd036d" translate="yes" xml:space="preserve">
          <source>And let's create a dependency that we want to be called after the Child:</source>
          <target state="translated">Y creemos una dependencia que queremos que se llame como el Niño:</target>
        </trans-unit>
        <trans-unit id="ce29b9d1efdb53530d63803e9b964b1f4be50c89" translate="yes" xml:space="preserve">
          <source>But &lt;code&gt;UserB&lt;/code&gt; does in-fact call UserDependency because &lt;code&gt;ChildB&lt;/code&gt; invokes &lt;code&gt;super&lt;/code&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Pero &lt;/font&gt;&lt;/font&gt; &lt;code&gt;UserB&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; de hecho llama a UserDependency porque &lt;/font&gt;&lt;/font&gt; &lt;code&gt;ChildB&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; invoca &lt;/font&gt;&lt;/font&gt; &lt;code&gt;super&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="313d6c67c467add7dfcb14adfdb06ec3267c1cac" translate="yes" xml:space="preserve">
          <source>Criticism for another answer</source>
          <target state="translated">Crítica por otra respuesta</target>
        </trans-unit>
        <trans-unit id="2d412a10077dff5a0bc8c827d967957b6da52c24" translate="yes" xml:space="preserve">
          <source>Criticisms of other answers:</source>
          <target state="translated">Críticas a otras respuestas:</target>
        </trans-unit>
        <trans-unit id="ec6725c61b26f37beb5a9d30c4ef6756963dbbf0" translate="yes" xml:space="preserve">
          <source>Explanation: That answer suggested calling super like this:</source>
          <target state="translated">Explicación:Esa respuesta sugería llamar al súper así:</target>
        </trans-unit>
        <trans-unit id="775b70cb283b67e7b45195276b3f4a22c732fdcc" translate="yes" xml:space="preserve">
          <source>HOWEVER, this breaks calls to &lt;code&gt;super&lt;/code&gt; for any classes that inherit from your class, where &lt;code&gt;self.__class__&lt;/code&gt; could return a child class. For example:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;SIN EMBARGO, esto interrumpe las llamadas a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;super&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para cualquier clase que herede de su clase, donde &lt;/font&gt;&lt;/font&gt; &lt;code&gt;self.__class__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; podr&amp;iacute;a devolver una clase secundaria. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por ejemplo:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="982b6852585a46506fc4c63544abfdb4a56b3531" translate="yes" xml:space="preserve">
          <source>Here I have a class &lt;code&gt;Square&lt;/code&gt;, which is a sub-class of &lt;code&gt;Rectangle&lt;/code&gt;. Say I don't want to write a separate constructor for &lt;code&gt;Square&lt;/code&gt; because the constructor for &lt;code&gt;Rectangle&lt;/code&gt; is good enough, but for whatever reason I want to implement a Square so I can reimplement some other method.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Aqu&amp;iacute; tengo una clase &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Square&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , que es una subclase de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Rectangle&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . Digamos que no quiero escribir un constructor separado para &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Square&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; porque el constructor para &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Rectangle&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es lo suficientemente bueno, pero por cualquier raz&amp;oacute;n quiero implementar un Square para poder reimplementar alg&amp;uacute;n otro m&amp;eacute;todo.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d897e7d1901facf67bdf7d5735cbe108fb04682d" translate="yes" xml:space="preserve">
          <source>Here's code that's actually closely equivalent to &lt;code&gt;super&lt;/code&gt; (how it's implemented in C, minus some checking and fallback behavior, and translated to Python):</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Aqu&amp;iacute; hay un c&amp;oacute;digo que en realidad es muy equivalente a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;super&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (c&amp;oacute;mo se implementa en C, menos alg&amp;uacute;n comportamiento de comprobaci&amp;oacute;n y respaldo, y se traduce a Python):&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f1c0ad9d2070cfca96329d11e6424dd5d65bf7d7" translate="yes" xml:space="preserve">
          <source>How does super do this in Python 3 without being told explicitly which class and instance from the method it was called from?</source>
          <target state="translated">¿Cómo hace Super en Python 3 sin que se le diga explícitamente de qué clase e instancia del método se llamó?</target>
        </trans-unit>
        <trans-unit id="1f712afe4c3219c174967bbc1c97e9c4cd7a2d41" translate="yes" xml:space="preserve">
          <source>I further explain below.</source>
          <target state="translated">Lo explico más abajo.</target>
        </trans-unit>
        <trans-unit id="67806aef4cd47edf6c8e854ef035e14d94ae4a70" translate="yes" xml:space="preserve">
          <source>I illustrate this difference in an answer at the &lt;a href=&quot;https://stackoverflow.com/a/33469090/541136&quot;&gt;canonical question, How to use 'super' in Python?&lt;/a&gt;, which demonstrates &lt;strong&gt;dependency injection&lt;/strong&gt; and &lt;strong&gt;cooperative multiple inheritance&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ilustra esta diferencia en una respuesta a la &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/33469090/541136&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;pregunta can&amp;oacute;nica, &amp;iquest;C&amp;oacute;mo usar 'super' en Python? &lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;, que demuestra &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;inyecci&amp;oacute;n de dependencia&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;herencia m&amp;uacute;ltiple cooperativa&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="69d18703f8012c82ef2ee70d9c0e7025ab7d9044" translate="yes" xml:space="preserve">
          <source>I'll explain here.</source>
          <target state="translated">Te lo explicaré aquí.</target>
        </trans-unit>
        <trans-unit id="fbdc8ccf7c2e0f8509fddeb4507a897f08b912d7" translate="yes" xml:space="preserve">
          <source>I'm curious to know about the actual difference between the following 2 child classes.</source>
          <target state="translated">Tengo curiosidad por saber la diferencia real entre las siguientes dos clases de niños.</target>
        </trans-unit>
        <trans-unit id="013ae50259927eafd7dba45cabc87491454ed669" translate="yes" xml:space="preserve">
          <source>I'm trying to understand &lt;code&gt;super()&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Estoy tratando de entender &lt;/font&gt;&lt;/font&gt; &lt;code&gt;super()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3d510e01fd2580495a8dc56d24a934df91a79383" translate="yes" xml:space="preserve">
          <source>I'm trying to understand the use of &lt;code&gt;super()&lt;/code&gt;. From the looks of it, both child classes can be created, just fine.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Estoy tratando de entender el uso de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;super()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por lo que parece, ambas clases secundarias se pueden crear, muy bien.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c983791dccd73919d081b5aa39a3de8e56dcc7cf" translate="yes" xml:space="preserve">
          <source>If Python didn't have &lt;code&gt;super&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si Python no tuviera &lt;/font&gt;&lt;/font&gt; &lt;code&gt;super&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="94cacf845a1e096419ac09fe42dd189a715f48f5" translate="yes" xml:space="preserve">
          <source>If we didn't have the &lt;code&gt;super&lt;/code&gt; object, we'd have to write this manual code everywhere (or recreate it!) to ensure that we call the proper next method in the Method Resolution Order!</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si no tuvi&amp;eacute;ramos el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;super&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; objeto, tendr&amp;iacute;amos que escribir este c&amp;oacute;digo manual en todas partes (&amp;iexcl;o recrearlo!) Para asegurarnos de que llamamos al siguiente m&amp;eacute;todo adecuado en la Orden de resoluci&amp;oacute;n de m&amp;eacute;todos.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f6bed384df46f8f09be1fe4311afafbbc891f8c7" translate="yes" xml:space="preserve">
          <source>If you add a &lt;code&gt;ClassC&lt;/code&gt; that uses multiple inheritance:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si agrega un &lt;/font&gt;&lt;/font&gt; &lt;code&gt;ClassC&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que usa herencia m&amp;uacute;ltiple:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c7c49d3aea8156f1de53014c72b233b0c4a85a4a" translate="yes" xml:space="preserve">
          <source>In Python 2, we are required to use it like this:</source>
          <target state="translated">En Python 2,estamos obligados a usarlo así:</target>
        </trans-unit>
        <trans-unit id="bdf2b62bc2e9c4ad298cc3649b7b4279c94e2411" translate="yes" xml:space="preserve">
          <source>In Python 3, we can call it like this:</source>
          <target state="translated">En Python 3,podemos llamarlo así:</target>
        </trans-unit>
        <trans-unit id="19d5f26fb874999b1aecef4edc966100fa016e8d" translate="yes" xml:space="preserve">
          <source>In no circumstance should you do the following, which another answer suggests, as you'll definitely get errors when you subclass ChildB:</source>
          <target state="translated">Bajo ninguna circunstancia debe hacer lo siguiente,que otra respuesta sugiere,ya que definitivamente obtendrá errores cuando subclasifique a ChildB:</target>
        </trans-unit>
        <trans-unit id="69e4d25ea0c4fe5d1668372c5acb33b65ab958e6" translate="yes" xml:space="preserve">
          <source>It gets the calling stack frame, and finds the class (implicitly stored as a local free variable, &lt;code&gt;__class__&lt;/code&gt;, making the calling function a closure over the class) and the first argument to that function, which should be the instance or class that informs it which Method Resolution Order (MRO) to use.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Obtiene el marco de la pila de llamadas y encuentra la clase (almacenada impl&amp;iacute;citamente como una variable libre local, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;__class__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , haciendo que la funci&amp;oacute;n de llamada sea un cierre sobre la clase) y el primer argumento para esa funci&amp;oacute;n, que deber&amp;iacute;a ser la instancia o clase que lo informa qu&amp;eacute; orden de resoluci&amp;oacute;n de m&amp;eacute;todo (MRO) utilizar.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8ce2ae31ef8a844e3b367354faa659a44b39cedb" translate="yes" xml:space="preserve">
          <source>It's been noted that in Python 3.0+ you can use</source>
          <target state="translated">Se ha notado que en Python 3.0+se puede usar</target>
        </trans-unit>
        <trans-unit id="e2ded1d3b411cff93927f1c1b5c1a5bc18d0f6a2" translate="yes" xml:space="preserve">
          <source>It's rather hand-wavey and doesn't tell us much, but the point of &lt;code&gt;super&lt;/code&gt; is not to avoid writing the parent class. The point is to ensure that the next method in line in the method resolution order (MRO) is called. This becomes important in multiple inheritance.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Es bastante manual y no nos dice mucho, pero el punto de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;super&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; no es evitar escribir la clase principal. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El objetivo es garantizar que se llame al siguiente m&amp;eacute;todo en l&amp;iacute;nea en el orden de resoluci&amp;oacute;n de m&amp;eacute;todo (MRO). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esto se vuelve importante en la herencia m&amp;uacute;ltiple.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1efb022ca61801794dbc70bf04ba0a45b0b44a78" translate="yes" xml:space="preserve">
          <source>Just a heads up... with Python 2.7, and I believe ever since &lt;code&gt;super()&lt;/code&gt; was introduced in version 2.2, you can only call &lt;a href=&quot;http://docs.python.org/library/functions.html#super&quot;&gt;&lt;code&gt;super()&lt;/code&gt;&lt;/a&gt; if one of the parents inherit from a class that eventually inherits &lt;code&gt;object&lt;/code&gt; (&lt;a href=&quot;http://docs.python.org/glossary.html#term-new-style-class&quot;&gt;new-style classes&lt;/a&gt;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Solo un aviso ... con Python 2.7, y creo que desde que &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;se introdujo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;super()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en la versi&amp;oacute;n 2.2, solo se puede llamar a &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://docs.python.org/library/functions.html#super&quot;&gt; &lt;code&gt;super()&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; si uno de los padres hereda de una clase que finalmente hereda el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;object&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ( &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://docs.python.org/glossary.html#term-new-style-class&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;clases de estilo nuevo&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; )&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c11b889063ddec79111dade62ed3e68cda5d425e" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;https://docs.python.org/3/library/functions.html#super&quot;&gt;the syntax changed in Python 3.0&lt;/a&gt;: you can just say &lt;code&gt;super().__init__()&lt;/code&gt; instead of &lt;code&gt;super(ChildB, self).__init__()&lt;/code&gt; which IMO is quite a bit nicer. The standard docs also refer to a &lt;a href=&quot;https://rhettinger.wordpress.com/2011/05/26/super-considered-super/&quot;&gt;guide to using &lt;code&gt;super()&lt;/code&gt;&lt;/a&gt; which is quite explanatory.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tenga en cuenta que &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.python.org/3/library/functions.html#super&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;la sintaxis cambi&amp;oacute; en Python 3.0&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : solo puede decir &lt;/font&gt;&lt;/font&gt; &lt;code&gt;super().__init__()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; lugar de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;super(ChildB, self).__init__()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que IMO es bastante mejor. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Los documentos est&amp;aacute;ndar tambi&amp;eacute;n se refieren a una &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://rhettinger.wordpress.com/2011/05/26/super-considered-super/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;gu&amp;iacute;a para usar &lt;/font&gt;&lt;/font&gt; &lt;code&gt;super()&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que es bastante explicativa.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="120b8e7780aebaa08d66e08924d05a7926d88a33" translate="yes" xml:space="preserve">
          <source>Now remember, &lt;code&gt;ChildB&lt;/code&gt; uses super, &lt;code&gt;ChildA&lt;/code&gt; does not:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ahora recuerde, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;ChildB&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; usa super, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;ChildA&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; no:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1e1bbbacc79ffa0321328ffd3a629b28c48e9fa4" translate="yes" xml:space="preserve">
          <source>Personally, as for python 2.7 code, I'm going to continue using &lt;code&gt;BaseClassName.__init__(self, args)&lt;/code&gt; until I actually get the advantage of using &lt;code&gt;super()&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Personalmente, en cuanto al c&amp;oacute;digo python 2.7, continuar&amp;eacute; usando &lt;/font&gt;&lt;/font&gt; &lt;code&gt;BaseClassName.__init__(self, args)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; hasta que realmente tenga la ventaja de usar &lt;/font&gt;&lt;/font&gt; &lt;code&gt;super()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="656b5e0f28aa8e09c2d356dcaad53c550ed7e748" translate="yes" xml:space="preserve">
          <source>Since it requires that first argument for the MRO, &lt;a href=&quot;https://bugs.python.org/issue31118&quot;&gt;using &lt;code&gt;super&lt;/code&gt; with static methods is impossible&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Dado que requiere ese primer argumento para el MRO, &lt;/font&gt;&lt;a href=&quot;https://bugs.python.org/issue31118&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;es imposible &lt;/font&gt;&lt;/a&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;usar &lt;/font&gt;&lt;/font&gt; &lt;code&gt;super&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; con m&amp;eacute;todos est&amp;aacute;ticos&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="50c6e41121c38b6b90d6b8a75b15ae39265fe7f4" translate="yes" xml:space="preserve">
          <source>So if you are designed your classes so that they can be used in a Cooperative Multiple Inheritance scenario, you use &lt;code&gt;super&lt;/code&gt; because you don't really know who is going to be the ancestor at runtime.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Entonces, si est&amp;aacute; dise&amp;ntilde;ado sus clases para que puedan usarse en un escenario de herencia m&amp;uacute;ltiple cooperativa, usa &lt;/font&gt;&lt;/font&gt; &lt;code&gt;super&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; porque realmente no sabe qui&amp;eacute;n ser&amp;aacute; el antepasado en tiempo de ejecuci&amp;oacute;n.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="681df8aa8e2438f396cffd8a248cb63baa354d56" translate="yes" xml:space="preserve">
          <source>Super has no side effects</source>
          <target state="translated">El súper no tiene efectos secundarios</target>
        </trans-unit>
        <trans-unit id="cee4c8b6f9b0ed98c6a0f4aa78798e8c7179894c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://rhettinger.wordpress.com/2011/05/26/super-considered-super/&quot;&gt;super considered super post&lt;/a&gt; and &lt;a href=&quot;https://youtu.be/EiOglTERPEo&quot;&gt;pycon 2015 accompanying video&lt;/a&gt; explain this pretty well.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El &lt;/font&gt;&lt;a href=&quot;https://youtu.be/EiOglTERPEo&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;video &lt;/font&gt;&lt;/a&gt;&lt;/font&gt;&lt;a href=&quot;https://rhettinger.wordpress.com/2011/05/26/super-considered-super/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;s&amp;uacute;per considerado super post&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;pycon 2015 lo&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; explican bastante bien.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5e2ec71728d3de52aa02d0ab10c1f730dd4325c3" translate="yes" xml:space="preserve">
          <source>The main difference is that &lt;code&gt;ChildA.__init__&lt;/code&gt; will unconditionally call &lt;code&gt;Base.__init__&lt;/code&gt; whereas &lt;code&gt;ChildB.__init__&lt;/code&gt; will call &lt;code&gt;__init__&lt;/code&gt; in &lt;strong&gt;whatever class happens to be &lt;code&gt;ChildB&lt;/code&gt; ancestor in &lt;code&gt;self&lt;/code&gt;'s line of ancestors&lt;/strong&gt;
(which may differ from what you expect).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La principal diferencia es que &lt;/font&gt;&lt;/font&gt; &lt;code&gt;ChildA.__init__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; llamar&amp;aacute; incondicionalmente a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Base.__init__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; mientras que &lt;/font&gt;&lt;/font&gt; &lt;code&gt;ChildB.__init__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; llamar&amp;aacute; a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;__init__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;cualquier clase que sea &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ancestro de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;ChildB&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en &lt;/font&gt;&lt;/font&gt; &lt;code&gt;self&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; l&amp;iacute;nea de ancestros de uno mismo&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (que puede diferir de lo que usted espera).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="73a82aa45bc046833ee1591294e52598ae55f315" translate="yes" xml:space="preserve">
          <source>The primary difference in this code is that you get a layer of indirection in the &lt;code&gt;__init__&lt;/code&gt; with &lt;code&gt;super&lt;/code&gt;, which uses the current class to determine the next class's &lt;code&gt;__init__&lt;/code&gt; to look up in the MRO.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La principal diferencia en este c&amp;oacute;digo es que obtienes una capa de indirecci&amp;oacute;n en el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;__init__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; con &lt;/font&gt;&lt;/font&gt; &lt;code&gt;super&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , que usa la clase actual para determinar el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;__init__&lt;/code&gt; de&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; la siguiente clase &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;para buscar en el MRO.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="efafeff5ca15dcf63ce39777e8527649737832f0" translate="yes" xml:space="preserve">
          <source>The reason we use &lt;code&gt;super&lt;/code&gt; is so that child classes that may be using cooperative multiple inheritance will call the correct next parent class function in the Method Resolution Order (MRO).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La raz&amp;oacute;n por la que usamos &lt;/font&gt;&lt;/font&gt; &lt;code&gt;super&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es para que las clases secundarias que pueden estar usando herencia m&amp;uacute;ltiple cooperativa invoquen la siguiente funci&amp;oacute;n de clase primaria correcta en el Orden de resoluci&amp;oacute;n de m&amp;eacute;todos (MRO).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="128554c42e47d524faa5e1ee8f33583351379711" translate="yes" xml:space="preserve">
          <source>There isn't, really. &lt;code&gt;super()&lt;/code&gt; looks at the next class in the MRO (method resolution order, accessed with &lt;code&gt;cls.__mro__&lt;/code&gt;) to call the methods. Just calling the base &lt;code&gt;__init__&lt;/code&gt; calls the base &lt;code&gt;__init__&lt;/code&gt;. As it happens, the MRO has exactly one item-- the base. So you're really doing the exact same thing, but in a nicer way with &lt;code&gt;super()&lt;/code&gt; (particularly if you get into multiple inheritance later).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;No hay realmente. &lt;/font&gt;&lt;/font&gt; &lt;code&gt;super()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; mira la siguiente clase en el MRO (orden de resoluci&amp;oacute;n de m&amp;eacute;todo, accedido con &lt;/font&gt;&lt;/font&gt; &lt;code&gt;cls.__mro__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ) para llamar a los m&amp;eacute;todos. Simplemente llamando a la base &lt;/font&gt;&lt;/font&gt; &lt;code&gt;__init__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; llama a la base &lt;/font&gt;&lt;/font&gt; &lt;code&gt;__init__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . De hecho, el MRO tiene exactamente un elemento: la base. Entonces, realmente est&amp;aacute;s haciendo exactamente lo mismo, pero de una mejor manera con &lt;/font&gt;&lt;/font&gt; &lt;code&gt;super()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (particularmente si entras en herencia m&amp;uacute;ltiple m&amp;aacute;s adelante).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5ad67f311c731daa8ad267b6d0a11ac4c75118fa" translate="yes" xml:space="preserve">
          <source>This is &lt;em&gt;completely&lt;/em&gt; wrong. &lt;code&gt;super&lt;/code&gt; lets us look up the next parent in the MRO (see the first section of this answer) for child classes. If you tell &lt;code&gt;super&lt;/code&gt; we're in the child instance's method, it will then lookup the next method in line (probably this one) resulting in recursion, probably causing a logical failure (in the answerer's example, it does) or a &lt;code&gt;RuntimeError&lt;/code&gt; when the recursion depth is exceeded.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esto est&amp;aacute; &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;completamente&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; mal. &lt;/font&gt;&lt;/font&gt; &lt;code&gt;super&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; nos permite buscar el pr&amp;oacute;ximo padre en el MRO (ver la primera secci&amp;oacute;n de esta respuesta) para las clases de ni&amp;ntilde;os. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si le dice a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;super&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que estamos en el m&amp;eacute;todo de la instancia secundaria, buscar&amp;aacute; el siguiente m&amp;eacute;todo en l&amp;iacute;nea (probablemente este), lo que resultar&amp;aacute; en una recursi&amp;oacute;n, probablemente causando una falla l&amp;oacute;gica (en el ejemplo del respondedor, lo hace) o un &lt;/font&gt;&lt;/font&gt; &lt;code&gt;RuntimeError&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; cuando el Se excede la profundidad de recursi&amp;oacute;n.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a02d639fb189fe9aaedd80d36e85b997afe1ce9b" translate="yes" xml:space="preserve">
          <source>Understanding Python super() with __init__() methods</source>
          <target state="translated">Entendiendo Python super()con los métodos __init__()</target>
        </trans-unit>
        <trans-unit id="fd23c57c51d5b0bf648f12dd6739eb32afaa90bc" translate="yes" xml:space="preserve">
          <source>When I create a &lt;code&gt;Square&lt;/code&gt; using &lt;code&gt;mSquare = Square('a', 10,10)&lt;/code&gt;, Python calls the constructor for &lt;code&gt;Rectangle&lt;/code&gt; because I haven't given &lt;code&gt;Square&lt;/code&gt; its own constructor. However, in the constructor for &lt;code&gt;Rectangle&lt;/code&gt;, the call &lt;code&gt;super(self.__class__,self)&lt;/code&gt; is going to return the superclass of &lt;code&gt;mSquare&lt;/code&gt;, so it calls the constructor for &lt;code&gt;Rectangle&lt;/code&gt; again. This is how the infinite loop happens, as was mentioned by @S_C. In this case, when I run &lt;code&gt;super(...).__init__()&lt;/code&gt; I am calling the constructor for &lt;code&gt;Rectangle&lt;/code&gt; but since I give it no arguments, I will get an error.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cuando creo un &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Square&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; usando &lt;/font&gt;&lt;/font&gt; &lt;code&gt;mSquare = Square('a', 10,10)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , Python llama al constructor de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Rectangle&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; porque no le he dado a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Square&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; su propio constructor. Sin embargo, en el constructor de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Rectangle&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , la llamada &lt;/font&gt;&lt;/font&gt; &lt;code&gt;super(self.__class__,self)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; devolver&amp;aacute; la superclase de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;mSquare&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , por lo que llama al constructor de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Rectangle&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; nuevamente. As&amp;iacute; es como sucede el bucle infinito, como lo mencion&amp;oacute; @S_C. En este caso, cuando ejecuto &lt;/font&gt;&lt;/font&gt; &lt;code&gt;super(...).__init__()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; estoy llamando al constructor de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Rectangle&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; pero como no le doy argumentos, obtendr&amp;eacute; un error.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cde4744825e7e84a1b8198b65769881ad4e9dbb7" translate="yes" xml:space="preserve">
          <source>Without super, you are limited in your ability to use multiple inheritance:</source>
          <target state="translated">Sin super,estás limitado en tu capacidad de usar la herencia múltiple:</target>
        </trans-unit>
        <trans-unit id="509a354e43247d3a90534a7d2167805abbd62537" translate="yes" xml:space="preserve">
          <source>Written a little more like native Python:</source>
          <target state="translated">Escrito un poco más como la pitón nativa:</target>
        </trans-unit>
        <trans-unit id="5b0fa24c2bd9b59ace06430f7547a06122f05c72" translate="yes" xml:space="preserve">
          <source>You have inserted &lt;code&gt;Mixin&lt;/code&gt; in between &lt;code&gt;ChildB&lt;/code&gt; and &lt;code&gt;Base&lt;/code&gt;. And you can take advantage of it with &lt;code&gt;super()&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ha insertado &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Mixin&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; entre &lt;/font&gt;&lt;/font&gt; &lt;code&gt;ChildB&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Base&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Y puedes aprovecharlo con &lt;/font&gt;&lt;/font&gt; &lt;code&gt;super()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="051f61a5e090c4143861ad401dc852d6833fe2f3" translate="yes" xml:space="preserve">
          <source>gets into infinite recursion.</source>
          <target state="translated">...se vuelve infinitamente recurrente.</target>
        </trans-unit>
        <trans-unit id="cf8b646f8f800e8bea17e956b9ddc27f0224fb15" translate="yes" xml:space="preserve">
          <source>super() lets you avoid referring to the base class explicitly, which can be nice. . But the main advantage comes with multiple inheritance, where all sorts of fun stuff can happen. See the standard docs on super if you haven't already.</source>
          <target state="translated">super()te permite evitar referirte a la clase base explícitamente,lo que puede ser agradable..Pero la principal ventaja viene con la herencia múltiple,donde todo tipo de cosas divertidas pueden suceder.Mira los documentos estándar en super si no lo has hecho ya.</target>
        </trans-unit>
        <trans-unit id="c49f58ba362f4f30464f090b793e0b578153a1d1" translate="yes" xml:space="preserve">
          <source>then &lt;strong&gt;&lt;code&gt;Base&lt;/code&gt; is no longer the parent of &lt;code&gt;ChildB&lt;/code&gt;&lt;/strong&gt; for &lt;code&gt;ChildC&lt;/code&gt; instances. Now &lt;code&gt;super(ChildB, self)&lt;/code&gt; will point to &lt;code&gt;Mixin&lt;/code&gt; if &lt;code&gt;self&lt;/code&gt; is a &lt;code&gt;ChildC&lt;/code&gt; instance.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;entonces &lt;/font&gt;&lt;/font&gt;&lt;strong&gt; &lt;code&gt;Base&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ya no es el padre de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;ChildB&lt;/code&gt; &lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para &lt;/font&gt;&lt;/font&gt; &lt;code&gt;ChildC&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; instancias de &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ChildC&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ahora &lt;/font&gt;&lt;/font&gt; &lt;code&gt;super(ChildB, self)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; apuntar&amp;aacute; a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Mixin&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; si &lt;/font&gt;&lt;/font&gt; &lt;code&gt;self&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es una &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;instancia de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;ChildC&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cc6d1365e74eeffa3b579826e7726f0e6232cda9" translate="yes" xml:space="preserve">
          <source>to make your call, which is concise and does not require you to reference the parent OR class names explicitly, which can be handy. I just want to add that for Python 2.7 or under, it is possible to get this name-insensitive behaviour by writing &lt;code&gt;self.__class__&lt;/code&gt; instead of the class name, i.e.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;para hacer su llamada, lo cual es conciso y no requiere que haga referencia expl&amp;iacute;cita a los nombres de clase OR primarios, lo que puede ser &amp;uacute;til. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Solo quiero agregar que para Python 2.7 o inferior, es posible obtener este comportamiento insensible al nombre escribiendo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;self.__class__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; lugar del nombre de la clase, es decir&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="70bf8e981045e21a5186d16716649089997ddf70" translate="yes" xml:space="preserve">
          <source>works as expected</source>
          <target state="translated">funciona como se esperaba</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
