<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/576169">
    <body>
      <group id="576169">
        <trans-unit id="7b8a751539c1f000376949b749b7c8a70d30114d" translate="yes" xml:space="preserve">
          <source>&quot;What difference is there actually in this code?:&quot;</source>
          <target state="translated">&quot;このコードに実際に何の違いがあるのか?&quot;</target>
        </trans-unit>
        <trans-unit id="b7aa86be7cf69101b5c11eff45b4a5a25afe38b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;super()&lt;/code&gt; lets you avoid referring to the base class explicitly, which can be nice. But the main advantage comes with multiple inheritance, where all sorts of &lt;a href=&quot;http://www.artima.com/weblogs/viewpost.jsp?thread=236275&quot;&gt;fun stuff&lt;/a&gt; can happen. See the &lt;a href=&quot;https://docs.python.org/2/library/functions.html#super&quot;&gt;standard docs on super&lt;/a&gt; if you haven't already.</source>
          <target state="translated">&lt;code&gt;super()&lt;/code&gt; を&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用すると、基本クラスを明示的に参照することを回避できます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;しかし、主な利点は、あらゆる種類の&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.artima.com/weblogs/viewpost.jsp?thread=236275&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;楽しいこと&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が発生する可能性&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;がある多重継承にあります&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;まだの場合は&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.python.org/2/library/functions.html#super&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、super&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;標準ドキュメントを&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;参照してください&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="521db6e7d01c98f987b74991f83b0fed3e15feda" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;(That answer is not clever or particularly interesting, but in spite of direct criticism in the comments and over 17 downvotes, the answerer persisted in suggesting it until a kind editor fixed his problem.)&lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（その回答は賢明でも特に興味深いものでもありませんが、コメントや17以上の反対票への直接の批判にもかかわらず、親切な編集者が問題を修正するまで回答者は提案を続けました。）&lt;/font&gt;&lt;/font&gt;&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="614d9df3f2f50804fb853ebd00b2ed6f6ad2eb78" translate="yes" xml:space="preserve">
          <source>And &lt;code&gt;UserA&lt;/code&gt; does not call the UserDependency method:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;また、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;UserA&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はUserDependencyメソッドを呼び出しません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="30d2c048fcea968e08992d23ac7fbd7b95cd036d" translate="yes" xml:space="preserve">
          <source>And let's create a dependency that we want to be called after the Child:</source>
          <target state="translated">そして、Childの後に呼ばれたい依存関係を作ってみましょう。</target>
        </trans-unit>
        <trans-unit id="ce29b9d1efdb53530d63803e9b964b1f4be50c89" translate="yes" xml:space="preserve">
          <source>But &lt;code&gt;UserB&lt;/code&gt; does in-fact call UserDependency because &lt;code&gt;ChildB&lt;/code&gt; invokes &lt;code&gt;super&lt;/code&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;しかし&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt; &lt;code&gt;ChildB&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;が&lt;/font&gt; &lt;code&gt;super&lt;/code&gt; を&lt;font style=&quot;vertical-align: inherit;&quot;&gt;呼び出す&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ため&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;UserB&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は実際には&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;UserDependencyを&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;呼び出します&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="313d6c67c467add7dfcb14adfdb06ec3267c1cac" translate="yes" xml:space="preserve">
          <source>Criticism for another answer</source>
          <target state="translated">別の回答に対する批判</target>
        </trans-unit>
        <trans-unit id="2d412a10077dff5a0bc8c827d967957b6da52c24" translate="yes" xml:space="preserve">
          <source>Criticisms of other answers:</source>
          <target state="translated">他の回答への批判。</target>
        </trans-unit>
        <trans-unit id="ec6725c61b26f37beb5a9d30c4ef6756963dbbf0" translate="yes" xml:space="preserve">
          <source>Explanation: That answer suggested calling super like this:</source>
          <target state="translated">説明。その答えは、このようにスーパーを呼ぶことを示唆していた。</target>
        </trans-unit>
        <trans-unit id="775b70cb283b67e7b45195276b3f4a22c732fdcc" translate="yes" xml:space="preserve">
          <source>HOWEVER, this breaks calls to &lt;code&gt;super&lt;/code&gt; for any classes that inherit from your class, where &lt;code&gt;self.__class__&lt;/code&gt; could return a child class. For example:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ただし、これは&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、クラスから継承するすべてのクラスの&lt;/font&gt;&lt;/font&gt; &lt;code&gt;super&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;への&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;呼び出しを中断&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;します。ここで、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;self.__class__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は子クラスを返す可能&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;性&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;があります&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;例えば：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="982b6852585a46506fc4c63544abfdb4a56b3531" translate="yes" xml:space="preserve">
          <source>Here I have a class &lt;code&gt;Square&lt;/code&gt;, which is a sub-class of &lt;code&gt;Rectangle&lt;/code&gt;. Say I don't want to write a separate constructor for &lt;code&gt;Square&lt;/code&gt; because the constructor for &lt;code&gt;Rectangle&lt;/code&gt; is good enough, but for whatever reason I want to implement a Square so I can reimplement some other method.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;では、&lt;/font&gt; &lt;code&gt;Rectangle&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サブクラスである&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Square&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;クラスがあり&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt; &lt;code&gt;Rectangle&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;のコンストラクターで&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;十分な&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ので、&lt;/font&gt; &lt;code&gt;Square&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;個別のコンストラクターを作成したくないとしましょ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;う。ただし、何らかの理由でSquareを実装して他のメソッドを再実装できるようにしたいとします。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d897e7d1901facf67bdf7d5735cbe108fb04682d" translate="yes" xml:space="preserve">
          <source>Here's code that's actually closely equivalent to &lt;code&gt;super&lt;/code&gt; (how it's implemented in C, minus some checking and fallback behavior, and translated to Python):</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは実際には&lt;/font&gt;&lt;/font&gt; &lt;code&gt;super&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;とほぼ同等のコードです&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（Cでの実装方法から、チェックとフォールバックの動作を除いて、Pythonに変換した方法）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f1c0ad9d2070cfca96329d11e6424dd5d65bf7d7" translate="yes" xml:space="preserve">
          <source>How does super do this in Python 3 without being told explicitly which class and instance from the method it was called from?</source>
          <target state="translated">Python 3では、どのクラスから呼び出されたメソッドからどのインスタンスが呼び出されたかを明示的に教えてもらわずに、どのようにスーパーはこれを行うのでしょうか?</target>
        </trans-unit>
        <trans-unit id="1f712afe4c3219c174967bbc1c97e9c4cd7a2d41" translate="yes" xml:space="preserve">
          <source>I further explain below.</source>
          <target state="translated">さらに以下に説明します。</target>
        </trans-unit>
        <trans-unit id="67806aef4cd47edf6c8e854ef035e14d94ae4a70" translate="yes" xml:space="preserve">
          <source>I illustrate this difference in an answer at the &lt;a href=&quot;https://stackoverflow.com/a/33469090/541136&quot;&gt;canonical question, How to use 'super' in Python?&lt;/a&gt;, which demonstrates &lt;strong&gt;dependency injection&lt;/strong&gt; and &lt;strong&gt;cooperative multiple inheritance&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この違いを、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/33469090/541136&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;標準的な質問「Pythonで「スーパー」を使用する方法」の&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;回答で説明し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは、&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;依存性注入&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;協調的多重継承を示してい&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="69d18703f8012c82ef2ee70d9c0e7025ab7d9044" translate="yes" xml:space="preserve">
          <source>I'll explain here.</source>
          <target state="translated">ここで説明します。</target>
        </trans-unit>
        <trans-unit id="fbdc8ccf7c2e0f8509fddeb4507a897f08b912d7" translate="yes" xml:space="preserve">
          <source>I'm curious to know about the actual difference between the following 2 child classes.</source>
          <target state="translated">以下の2つの子クラスの実際の違いが気になります。</target>
        </trans-unit>
        <trans-unit id="013ae50259927eafd7dba45cabc87491454ed669" translate="yes" xml:space="preserve">
          <source>I'm trying to understand &lt;code&gt;super()&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私は&lt;/font&gt; &lt;code&gt;super()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;を理解しようとしています&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3d510e01fd2580495a8dc56d24a934df91a79383" translate="yes" xml:space="preserve">
          <source>I'm trying to understand the use of &lt;code&gt;super()&lt;/code&gt;. From the looks of it, both child classes can be created, just fine.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私は&lt;/font&gt;&lt;/font&gt; &lt;code&gt;super()&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用を理解しようとしています&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;その外観から、両方の子クラスを作成できます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c983791dccd73919d081b5aa39a3de8e56dcc7cf" translate="yes" xml:space="preserve">
          <source>If Python didn't have &lt;code&gt;super&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Pythonに&lt;/font&gt; &lt;code&gt;super&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;がない場合&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="94cacf845a1e096419ac09fe42dd189a715f48f5" translate="yes" xml:space="preserve">
          <source>If we didn't have the &lt;code&gt;super&lt;/code&gt; object, we'd have to write this manual code everywhere (or recreate it!) to ensure that we call the proper next method in the Method Resolution Order!</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;super&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;オブジェクト&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;がない場合は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、この手動コードをどこにでも（または再作成して）作成し、メソッド解決順序で適切な次のメソッドを呼び出すようにする必要があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f6bed384df46f8f09be1fe4311afafbbc891f8c7" translate="yes" xml:space="preserve">
          <source>If you add a &lt;code&gt;ClassC&lt;/code&gt; that uses multiple inheritance:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;多重継承を使用&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;する&lt;/font&gt;&lt;/font&gt; &lt;code&gt;ClassC&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を追加する場合&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c7c49d3aea8156f1de53014c72b233b0c4a85a4a" translate="yes" xml:space="preserve">
          <source>In Python 2, we are required to use it like this:</source>
          <target state="translated">Python 2では、こんな感じで使うことになっています。</target>
        </trans-unit>
        <trans-unit id="bdf2b62bc2e9c4ad298cc3649b7b4279c94e2411" translate="yes" xml:space="preserve">
          <source>In Python 3, we can call it like this:</source>
          <target state="translated">Python 3では、このように呼ぶことができます。</target>
        </trans-unit>
        <trans-unit id="19d5f26fb874999b1aecef4edc966100fa016e8d" translate="yes" xml:space="preserve">
          <source>In no circumstance should you do the following, which another answer suggests, as you'll definitely get errors when you subclass ChildB:</source>
          <target state="translated">いかなる場合でも、ChildBをサブクラス化すると間違いなくエラーになるので、他の回答が示唆しているような以下のようなことをしてはいけません。</target>
        </trans-unit>
        <trans-unit id="69e4d25ea0c4fe5d1668372c5acb33b65ab958e6" translate="yes" xml:space="preserve">
          <source>It gets the calling stack frame, and finds the class (implicitly stored as a local free variable, &lt;code&gt;__class__&lt;/code&gt;, making the calling function a closure over the class) and the first argument to that function, which should be the instance or class that informs it which Method Resolution Order (MRO) to use.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;呼び出しスタックフレームを取得し、クラス（暗黙的にローカルフリー変数&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__class__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;として保存され&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、呼び出し関数をクラスのクロージャーにします）と、その関数の最初の引数を通知します。使用するメソッド解決順序（MRO）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8ce2ae31ef8a844e3b367354faa659a44b39cedb" translate="yes" xml:space="preserve">
          <source>It's been noted that in Python 3.0+ you can use</source>
          <target state="translated">Python 3.0+では</target>
        </trans-unit>
        <trans-unit id="e2ded1d3b411cff93927f1c1b5c1a5bc18d0f6a2" translate="yes" xml:space="preserve">
          <source>It's rather hand-wavey and doesn't tell us much, but the point of &lt;code&gt;super&lt;/code&gt; is not to avoid writing the parent class. The point is to ensure that the next method in line in the method resolution order (MRO) is called. This becomes important in multiple inheritance.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;どちらかというと手で波打って多くのことはわかりませんが、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;super&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;のポイントは&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;親クラスの作成を避けることではありません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ポイントは、メソッド解決順序（MRO）の次のメソッドが確実に呼び出されるようにすることです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは多重継承で重要になります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1efb022ca61801794dbc70bf04ba0a45b0b44a78" translate="yes" xml:space="preserve">
          <source>Just a heads up... with Python 2.7, and I believe ever since &lt;code&gt;super()&lt;/code&gt; was introduced in version 2.2, you can only call &lt;a href=&quot;http://docs.python.org/library/functions.html#super&quot;&gt;&lt;code&gt;super()&lt;/code&gt;&lt;/a&gt; if one of the parents inherit from a class that eventually inherits &lt;code&gt;object&lt;/code&gt; (&lt;a href=&quot;http://docs.python.org/glossary.html#term-new-style-class&quot;&gt;new-style classes&lt;/a&gt;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ただのヘッドアップ... Python 2.7で、そして&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;バージョン2.2で&lt;/font&gt;&lt;/font&gt; &lt;code&gt;super()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が導入されて&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;以来&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、親の1つが最終的に&lt;/font&gt; &lt;code&gt;object&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;継承するクラス&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（&lt;/font&gt;&lt;a href=&quot;http://docs.python.org/glossary.html#term-new-style-class&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;新しいスタイルのクラス）を&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;継承する場合に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;のみ、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://docs.python.org/library/functions.html#super&quot;&gt; &lt;code&gt;super()&lt;/code&gt; を&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;呼び出すことができると思います&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c11b889063ddec79111dade62ed3e68cda5d425e" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;https://docs.python.org/3/library/functions.html#super&quot;&gt;the syntax changed in Python 3.0&lt;/a&gt;: you can just say &lt;code&gt;super().__init__()&lt;/code&gt; instead of &lt;code&gt;super(ChildB, self).__init__()&lt;/code&gt; which IMO is quite a bit nicer. The standard docs also refer to a &lt;a href=&quot;https://rhettinger.wordpress.com/2011/05/26/super-considered-super/&quot;&gt;guide to using &lt;code&gt;super()&lt;/code&gt;&lt;/a&gt; which is quite explanatory.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.python.org/3/library/functions.html#super&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Python 3.0では構文が変更され&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ていることに注意し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;て&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ください&lt;/font&gt; &lt;code&gt;super(ChildB, self).__init__()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;代わりに&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;super（&lt;/font&gt;&lt;/font&gt; &lt;code&gt;super().__init__()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と言うだけで&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;十分です。IMO&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はかなり&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;優れ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ています。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;標準のドキュメントは、&lt;/font&gt;&lt;a href=&quot;https://rhettinger.wordpress.com/2011/05/26/super-considered-super/&quot;&gt; &lt;code&gt;super()&lt;/code&gt; の&lt;/a&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に関する&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ガイドに&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;も言及してい&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="120b8e7780aebaa08d66e08924d05a7926d88a33" translate="yes" xml:space="preserve">
          <source>Now remember, &lt;code&gt;ChildB&lt;/code&gt; uses super, &lt;code&gt;ChildA&lt;/code&gt; does not:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここで、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;ChildB&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はsuperを使用し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ChildA&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は使用&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;しないこと&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に&lt;/font&gt;&lt;/font&gt; &lt;code&gt;ChildA&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;してください。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1e1bbbacc79ffa0321328ffd3a629b28c48e9fa4" translate="yes" xml:space="preserve">
          <source>Personally, as for python 2.7 code, I'm going to continue using &lt;code&gt;BaseClassName.__init__(self, args)&lt;/code&gt; until I actually get the advantage of using &lt;code&gt;super()&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;個人的には、Python 2.7コードについては、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;実際に&lt;/font&gt; &lt;code&gt;super()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用する利点が得られるまで&lt;/font&gt;&lt;/font&gt; &lt;code&gt;BaseClassName.__init__(self, args)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用し続け&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="656b5e0f28aa8e09c2d356dcaad53c550ed7e748" translate="yes" xml:space="preserve">
          <source>Since it requires that first argument for the MRO, &lt;a href=&quot;https://bugs.python.org/issue31118&quot;&gt;using &lt;code&gt;super&lt;/code&gt; with static methods is impossible&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MROの最初の引数が必要なため、&lt;/font&gt;&lt;a href=&quot;https://bugs.python.org/issue31118&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;静的メソッドで&lt;/font&gt;&lt;/a&gt; &lt;code&gt;super&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;することは不可能&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="50c6e41121c38b6b90d6b8a75b15ae39265fe7f4" translate="yes" xml:space="preserve">
          <source>So if you are designed your classes so that they can be used in a Cooperative Multiple Inheritance scenario, you use &lt;code&gt;super&lt;/code&gt; because you don't really know who is going to be the ancestor at runtime.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、協調的多重継承シナリオで使用できるようにクラスを設計して&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;いる場合は、実行時に祖先になる人物が本当にわからないため&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;super&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="681df8aa8e2438f396cffd8a248cb63baa354d56" translate="yes" xml:space="preserve">
          <source>Super has no side effects</source>
          <target state="translated">スーパーには副作用はありません</target>
        </trans-unit>
        <trans-unit id="cee4c8b6f9b0ed98c6a0f4aa78798e8c7179894c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://rhettinger.wordpress.com/2011/05/26/super-considered-super/&quot;&gt;super considered super post&lt;/a&gt; and &lt;a href=&quot;https://youtu.be/EiOglTERPEo&quot;&gt;pycon 2015 accompanying video&lt;/a&gt; explain this pretty well.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;https://rhettinger.wordpress.com/2011/05/26/super-considered-super/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;スーパーみなさスーパーポスト&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://youtu.be/EiOglTERPEo&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;pycon 2015付属のビデオは&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;かなりこれを説明します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5e2ec71728d3de52aa02d0ab10c1f730dd4325c3" translate="yes" xml:space="preserve">
          <source>The main difference is that &lt;code&gt;ChildA.__init__&lt;/code&gt; will unconditionally call &lt;code&gt;Base.__init__&lt;/code&gt; whereas &lt;code&gt;ChildB.__init__&lt;/code&gt; will call &lt;code&gt;__init__&lt;/code&gt; in &lt;strong&gt;whatever class happens to be &lt;code&gt;ChildB&lt;/code&gt; ancestor in &lt;code&gt;self&lt;/code&gt;'s line of ancestors&lt;/strong&gt;
(which may differ from what you expect).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;主な違いは、ということです&lt;/font&gt;&lt;/font&gt; &lt;code&gt;ChildA.__init__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;無条件に呼び出します&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Base.__init__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一方&lt;/font&gt;&lt;/font&gt; &lt;code&gt;ChildB.__init__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;呼び出します&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__init__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;で&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あることを起こるものは何でもクラス&lt;/font&gt;&lt;/font&gt; &lt;code&gt;ChildB&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;中に祖先&lt;/font&gt;&lt;/font&gt; &lt;code&gt;self&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の祖先の行&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; （あなたが期待するものとは異なる場合があります）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="73a82aa45bc046833ee1591294e52598ae55f315" translate="yes" xml:space="preserve">
          <source>The primary difference in this code is that you get a layer of indirection in the &lt;code&gt;__init__&lt;/code&gt; with &lt;code&gt;super&lt;/code&gt;, which uses the current class to determine the next class's &lt;code&gt;__init__&lt;/code&gt; to look up in the MRO.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このコードの主な違いは&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt; &lt;code&gt;super&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;で&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__init__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に間接層を取得することです&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。これにより、現在のクラスを使用して次のクラスの&lt;/font&gt; &lt;code&gt;__init__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;決定&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;し、MROで検索します。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="efafeff5ca15dcf63ce39777e8527649737832f0" translate="yes" xml:space="preserve">
          <source>The reason we use &lt;code&gt;super&lt;/code&gt; is so that child classes that may be using cooperative multiple inheritance will call the correct next parent class function in the Method Resolution Order (MRO).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;super&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用する理由&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、協調多重継承を使用している可能性のある子クラスが、メソッド解決順序（MRO）で正しい次の親クラス関数を呼び出すためです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="128554c42e47d524faa5e1ee8f33583351379711" translate="yes" xml:space="preserve">
          <source>There isn't, really. &lt;code&gt;super()&lt;/code&gt; looks at the next class in the MRO (method resolution order, accessed with &lt;code&gt;cls.__mro__&lt;/code&gt;) to call the methods. Just calling the base &lt;code&gt;__init__&lt;/code&gt; calls the base &lt;code&gt;__init__&lt;/code&gt;. As it happens, the MRO has exactly one item-- the base. So you're really doing the exact same thing, but in a nicer way with &lt;code&gt;super()&lt;/code&gt; (particularly if you get into multiple inheritance later).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;本当にありません。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;super()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、MROの次のクラス（メソッド解決順序、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;cls.__mro__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;でアクセス&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;調べ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;てメソッドを呼び出します。ただ、基本呼び出し&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__init__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ベースコール&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__init__&lt;/code&gt; を&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。たまたま、MROには1つのアイテム、つまりベースがあります。したがって、実際にはまったく同じことを行っていますが、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;super()&lt;/code&gt; を使用する&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;方が適切&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です（特に、後で多重継承を行う場合）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5ad67f311c731daa8ad267b6d0a11ac4c75118fa" translate="yes" xml:space="preserve">
          <source>This is &lt;em&gt;completely&lt;/em&gt; wrong. &lt;code&gt;super&lt;/code&gt; lets us look up the next parent in the MRO (see the first section of this answer) for child classes. If you tell &lt;code&gt;super&lt;/code&gt; we're in the child instance's method, it will then lookup the next method in line (probably this one) resulting in recursion, probably causing a logical failure (in the answerer's example, it does) or a &lt;code&gt;RuntimeError&lt;/code&gt; when the recursion depth is exceeded.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;完全に&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;間違っています。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;super&lt;/code&gt; を&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用すると、MROの次の親（この回答の最初のセクションを参照）で子クラスを検索できます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;子インスタンスのメソッドにいることを&lt;/font&gt;&lt;/font&gt; &lt;code&gt;super&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;伝える&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と、次のメソッド（おそらくこのメソッド）が検索され、再帰が発生し、おそらく論理エラー（応答側の例ではそうなります）または&lt;/font&gt;&lt;/font&gt; &lt;code&gt;RuntimeError&lt;/code&gt; が&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;発生すると、再帰の深さを超えています。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a02d639fb189fe9aaedd80d36e85b997afe1ce9b" translate="yes" xml:space="preserve">
          <source>Understanding Python super() with __init__() methods</source>
          <target state="translated">Python の super()を __init__()メソッドで理解する</target>
        </trans-unit>
        <trans-unit id="fd23c57c51d5b0bf648f12dd6739eb32afaa90bc" translate="yes" xml:space="preserve">
          <source>When I create a &lt;code&gt;Square&lt;/code&gt; using &lt;code&gt;mSquare = Square('a', 10,10)&lt;/code&gt;, Python calls the constructor for &lt;code&gt;Rectangle&lt;/code&gt; because I haven't given &lt;code&gt;Square&lt;/code&gt; its own constructor. However, in the constructor for &lt;code&gt;Rectangle&lt;/code&gt;, the call &lt;code&gt;super(self.__class__,self)&lt;/code&gt; is going to return the superclass of &lt;code&gt;mSquare&lt;/code&gt;, so it calls the constructor for &lt;code&gt;Rectangle&lt;/code&gt; again. This is how the infinite loop happens, as was mentioned by @S_C. In this case, when I run &lt;code&gt;super(...).__init__()&lt;/code&gt; I am calling the constructor for &lt;code&gt;Rectangle&lt;/code&gt; but since I give it no arguments, I will get an error.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私が作成したとき&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Square&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用して&lt;/font&gt;&lt;/font&gt; &lt;code&gt;mSquare = Square('a', 10,10)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、Pythonはのコンストラクタ呼び出して&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Rectangle&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私は与えられていないので、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Square&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;独自のコンストラクタを。ただし、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Rectangle&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;のコンストラクターで&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、呼び出し&lt;/font&gt;&lt;/font&gt; &lt;code&gt;super(self.__class__,self)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が&lt;/font&gt;&lt;/font&gt; &lt;code&gt;mSquare&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;のスーパークラスを&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;返す&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ため、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Rectangle&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;のコンストラクターを&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;再度&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;呼び出します&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。 @S_Cで述べたように、これが無限ループが発生する方法です。この場合、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;super(...).__init__()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を実行する&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Rectangle&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;のコンストラクターが呼び出され&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ますが、引数を指定しないため、エラーが発生します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cde4744825e7e84a1b8198b65769881ad4e9dbb7" translate="yes" xml:space="preserve">
          <source>Without super, you are limited in your ability to use multiple inheritance:</source>
          <target state="translated">管理人さんがいないと、複数の継承を使うことに限界があります。</target>
        </trans-unit>
        <trans-unit id="509a354e43247d3a90534a7d2167805abbd62537" translate="yes" xml:space="preserve">
          <source>Written a little more like native Python:</source>
          <target state="translated">もう少しネイティブのPythonに近い書き方をしました。</target>
        </trans-unit>
        <trans-unit id="5b0fa24c2bd9b59ace06430f7547a06122f05c72" translate="yes" xml:space="preserve">
          <source>You have inserted &lt;code&gt;Mixin&lt;/code&gt; in between &lt;code&gt;ChildB&lt;/code&gt; and &lt;code&gt;Base&lt;/code&gt;. And you can take advantage of it with &lt;code&gt;super()&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &lt;code&gt;ChildB&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt; &lt;code&gt;Base&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;間に&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Mixin&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を挿入しました&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そして、あなたは&lt;/font&gt; &lt;code&gt;super()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;でそれを利用することができます&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="051f61a5e090c4143861ad401dc852d6833fe2f3" translate="yes" xml:space="preserve">
          <source>gets into infinite recursion.</source>
          <target state="translated">は無限再帰に陥る。</target>
        </trans-unit>
        <trans-unit id="cf8b646f8f800e8bea17e956b9ddc27f0224fb15" translate="yes" xml:space="preserve">
          <source>super() lets you avoid referring to the base class explicitly, which can be nice. . But the main advantage comes with multiple inheritance, where all sorts of fun stuff can happen. See the standard docs on super if you haven't already.</source>
          <target state="translated">super()を使用することで、明示的に基底クラスを参照しないようにすることができます。しかし、主な利点は複数のクラスを継承できることです。スーパーに関する標準的なドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="c49f58ba362f4f30464f090b793e0b578153a1d1" translate="yes" xml:space="preserve">
          <source>then &lt;strong&gt;&lt;code&gt;Base&lt;/code&gt; is no longer the parent of &lt;code&gt;ChildB&lt;/code&gt;&lt;/strong&gt; for &lt;code&gt;ChildC&lt;/code&gt; instances. Now &lt;code&gt;super(ChildB, self)&lt;/code&gt; will point to &lt;code&gt;Mixin&lt;/code&gt; if &lt;code&gt;self&lt;/code&gt; is a &lt;code&gt;ChildC&lt;/code&gt; instance.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;その後、&lt;/font&gt;&lt;/font&gt;&lt;strong&gt; &lt;code&gt;Base&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;もはやの親ではありません&lt;/font&gt;&lt;/font&gt; &lt;code&gt;ChildB&lt;/code&gt; &lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ため&lt;/font&gt;&lt;/font&gt; &lt;code&gt;ChildC&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;インスタンス。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これで&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt; &lt;code&gt;self&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;が&lt;/font&gt; &lt;code&gt;ChildC&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;インスタンスの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;場合&lt;/font&gt;&lt;/font&gt; &lt;code&gt;super(ChildB, self)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Mixin&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;をポイントし&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cc6d1365e74eeffa3b579826e7726f0e6232cda9" translate="yes" xml:space="preserve">
          <source>to make your call, which is concise and does not require you to reference the parent OR class names explicitly, which can be handy. I just want to add that for Python 2.7 or under, it is possible to get this name-insensitive behaviour by writing &lt;code&gt;self.__class__&lt;/code&gt; instead of the class name, i.e.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;呼び出しを行うため。これは簡潔であり、親ORクラス名を明示的に参照する必要がないため、便利です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Python 2.7以前の場合はそれを追加したいだけです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;クラス名の代わりに&lt;/font&gt;&lt;/font&gt; &lt;code&gt;self.__class__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;書くことで、この名前に依存しない動作を実現できます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="70bf8e981045e21a5186d16716649089997ddf70" translate="yes" xml:space="preserve">
          <source>works as expected</source>
          <target state="translated">期待通りの仕事</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
