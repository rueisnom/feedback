<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/576169">
    <body>
      <group id="576169">
        <trans-unit id="7b8a751539c1f000376949b749b7c8a70d30114d" translate="yes" xml:space="preserve">
          <source>&quot;What difference is there actually in this code?:&quot;</source>
          <target state="translated">&quot;这段代码到底有什么区别?&quot;:&quot;</target>
        </trans-unit>
        <trans-unit id="b7aa86be7cf69101b5c11eff45b4a5a25afe38b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;super()&lt;/code&gt; lets you avoid referring to the base class explicitly, which can be nice. But the main advantage comes with multiple inheritance, where all sorts of &lt;a href=&quot;http://www.artima.com/weblogs/viewpost.jsp?thread=236275&quot;&gt;fun stuff&lt;/a&gt; can happen. See the &lt;a href=&quot;https://docs.python.org/2/library/functions.html#super&quot;&gt;standard docs on super&lt;/a&gt; if you haven't already.</source>
          <target state="translated">&lt;code&gt;super()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使您避免显式引用基类，这可能很好。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;但是主要优势来自多重继承，其中&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;可以发生&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;各种&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.artima.com/weblogs/viewpost.jsp?thread=236275&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;有趣的&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;事情。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果还没有的话，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;请参阅&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.python.org/2/library/functions.html#super&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;关于super&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;标准文档&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="521db6e7d01c98f987b74991f83b0fed3e15feda" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;(That answer is not clever or particularly interesting, but in spite of direct criticism in the comments and over 17 downvotes, the answerer persisted in suggesting it until a kind editor fixed his problem.)&lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（该答案不是很聪明，也不是特别有趣，但是尽管在评论中有直接的批评和超过17次否决票，回答者仍然坚持建议，直到善良的编辑解决了他的问题。）&lt;/font&gt;&lt;/font&gt;&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="614d9df3f2f50804fb853ebd00b2ed6f6ad2eb78" translate="yes" xml:space="preserve">
          <source>And &lt;code&gt;UserA&lt;/code&gt; does not call the UserDependency method:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;而且&lt;/font&gt;&lt;/font&gt; &lt;code&gt;UserA&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;不会调用UserDependency方法：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="30d2c048fcea968e08992d23ac7fbd7b95cd036d" translate="yes" xml:space="preserve">
          <source>And let's create a dependency that we want to be called after the Child:</source>
          <target state="translated">而让我们创建一个依附关系,我们希望在孩子之后被调用。</target>
        </trans-unit>
        <trans-unit id="ce29b9d1efdb53530d63803e9b964b1f4be50c89" translate="yes" xml:space="preserve">
          <source>But &lt;code&gt;UserB&lt;/code&gt; does in-fact call UserDependency because &lt;code&gt;ChildB&lt;/code&gt; invokes &lt;code&gt;super&lt;/code&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;但是&lt;/font&gt;&lt;/font&gt; &lt;code&gt;UserB&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;实际上会调用UserDependency，因为&lt;/font&gt;&lt;/font&gt; &lt;code&gt;ChildB&lt;/code&gt; 会&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;调用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;super&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="313d6c67c467add7dfcb14adfdb06ec3267c1cac" translate="yes" xml:space="preserve">
          <source>Criticism for another answer</source>
          <target state="translated">对另一个答案的批评</target>
        </trans-unit>
        <trans-unit id="2d412a10077dff5a0bc8c827d967957b6da52c24" translate="yes" xml:space="preserve">
          <source>Criticisms of other answers:</source>
          <target state="translated">对其他答案的批评。</target>
        </trans-unit>
        <trans-unit id="ec6725c61b26f37beb5a9d30c4ef6756963dbbf0" translate="yes" xml:space="preserve">
          <source>Explanation: That answer suggested calling super like this:</source>
          <target state="translated">解释一下。这句话建议你叫 &quot;像这样的超级&quot;。</target>
        </trans-unit>
        <trans-unit id="775b70cb283b67e7b45195276b3f4a22c732fdcc" translate="yes" xml:space="preserve">
          <source>HOWEVER, this breaks calls to &lt;code&gt;super&lt;/code&gt; for any classes that inherit from your class, where &lt;code&gt;self.__class__&lt;/code&gt; could return a child class. For example:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;但是，这会中断对&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;从您的类继承的任何类的&lt;/font&gt;&lt;/font&gt; &lt;code&gt;super&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;调用&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，其中&lt;/font&gt;&lt;/font&gt; &lt;code&gt;self.__class__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;可以返回子类。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;例如：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="982b6852585a46506fc4c63544abfdb4a56b3531" translate="yes" xml:space="preserve">
          <source>Here I have a class &lt;code&gt;Square&lt;/code&gt;, which is a sub-class of &lt;code&gt;Rectangle&lt;/code&gt;. Say I don't want to write a separate constructor for &lt;code&gt;Square&lt;/code&gt; because the constructor for &lt;code&gt;Rectangle&lt;/code&gt; is good enough, but for whatever reason I want to implement a Square so I can reimplement some other method.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在这里，我有一个&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Square&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;类&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，它是&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Rectangle&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的子类&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。说我不想为&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Square&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;编写一个单独的构造函数，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因为&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Rectangle&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的构造函数&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;已经足够好了，但是出于任何原因，我都想实现一个Square，以便可以重新实现其他方法。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d897e7d1901facf67bdf7d5735cbe108fb04682d" translate="yes" xml:space="preserve">
          <source>Here's code that's actually closely equivalent to &lt;code&gt;super&lt;/code&gt; (how it's implemented in C, minus some checking and fallback behavior, and translated to Python):</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这是实际上与&lt;/font&gt;&lt;/font&gt; &lt;code&gt;super&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;等效的代码&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（如何用C实现，减去一些检查和后备行为，并转换为Python）：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f1c0ad9d2070cfca96329d11e6424dd5d65bf7d7" translate="yes" xml:space="preserve">
          <source>How does super do this in Python 3 without being told explicitly which class and instance from the method it was called from?</source>
          <target state="translated">在Python 3中,super是如何做到这一点而不被显式地告诉它是从哪个类和实例调用的方法中调用的?</target>
        </trans-unit>
        <trans-unit id="1f712afe4c3219c174967bbc1c97e9c4cd7a2d41" translate="yes" xml:space="preserve">
          <source>I further explain below.</source>
          <target state="translated">下面我进一步解释一下。</target>
        </trans-unit>
        <trans-unit id="67806aef4cd47edf6c8e854ef035e14d94ae4a70" translate="yes" xml:space="preserve">
          <source>I illustrate this difference in an answer at the &lt;a href=&quot;https://stackoverflow.com/a/33469090/541136&quot;&gt;canonical question, How to use 'super' in Python?&lt;/a&gt;, which demonstrates &lt;strong&gt;dependency injection&lt;/strong&gt; and &lt;strong&gt;cooperative multiple inheritance&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我在一个&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/33469090/541136&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;标准问题&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的答案中说明了这种差异，该&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;问题是如何在Python中使用&amp;ldquo; super&amp;rdquo;的？&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，证明了&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;依赖注入&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;和&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;合作多重继承&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="69d18703f8012c82ef2ee70d9c0e7025ab7d9044" translate="yes" xml:space="preserve">
          <source>I'll explain here.</source>
          <target state="translated">我在这里解释一下。</target>
        </trans-unit>
        <trans-unit id="fbdc8ccf7c2e0f8509fddeb4507a897f08b912d7" translate="yes" xml:space="preserve">
          <source>I'm curious to know about the actual difference between the following 2 child classes.</source>
          <target state="translated">我很想知道下面两个孩子班的实际区别是什么?</target>
        </trans-unit>
        <trans-unit id="013ae50259927eafd7dba45cabc87491454ed669" translate="yes" xml:space="preserve">
          <source>I'm trying to understand &lt;code&gt;super()&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我正在尝试了解&lt;/font&gt;&lt;/font&gt; &lt;code&gt;super()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3d510e01fd2580495a8dc56d24a934df91a79383" translate="yes" xml:space="preserve">
          <source>I'm trying to understand the use of &lt;code&gt;super()&lt;/code&gt;. From the looks of it, both child classes can be created, just fine.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我试图了解&lt;/font&gt;&lt;/font&gt; &lt;code&gt;super()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的用法&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;从外观上看，可以创建两个子类。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c983791dccd73919d081b5aa39a3de8e56dcc7cf" translate="yes" xml:space="preserve">
          <source>If Python didn't have &lt;code&gt;super&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果Python没有&lt;/font&gt;&lt;/font&gt; &lt;code&gt;super&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="94cacf845a1e096419ac09fe42dd189a715f48f5" translate="yes" xml:space="preserve">
          <source>If we didn't have the &lt;code&gt;super&lt;/code&gt; object, we'd have to write this manual code everywhere (or recreate it!) to ensure that we call the proper next method in the Method Resolution Order!</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果没有&lt;/font&gt;&lt;/font&gt; &lt;code&gt;super&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对象，则必须在任何地方编写（或重新创建！）此手动代码，以确保我们在&amp;ldquo;方法解析顺序&amp;rdquo;中调用正确的下一个方法！&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f6bed384df46f8f09be1fe4311afafbbc891f8c7" translate="yes" xml:space="preserve">
          <source>If you add a &lt;code&gt;ClassC&lt;/code&gt; that uses multiple inheritance:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果添加&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用多重继承&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的&lt;/font&gt;&lt;/font&gt; &lt;code&gt;ClassC&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c7c49d3aea8156f1de53014c72b233b0c4a85a4a" translate="yes" xml:space="preserve">
          <source>In Python 2, we are required to use it like this:</source>
          <target state="translated">在Python 2中,我们需要这样使用它。</target>
        </trans-unit>
        <trans-unit id="bdf2b62bc2e9c4ad298cc3649b7b4279c94e2411" translate="yes" xml:space="preserve">
          <source>In Python 3, we can call it like this:</source>
          <target state="translated">在Python 3中,我们可以这样称呼它。</target>
        </trans-unit>
        <trans-unit id="19d5f26fb874999b1aecef4edc966100fa016e8d" translate="yes" xml:space="preserve">
          <source>In no circumstance should you do the following, which another answer suggests, as you'll definitely get errors when you subclass ChildB:</source>
          <target state="translated">在任何情况下,你都不应该做下面的事情,这也是另一个答案所提示的,因为当你对ChildB进行子类化时,肯定会出现错误。</target>
        </trans-unit>
        <trans-unit id="69e4d25ea0c4fe5d1668372c5acb33b65ab958e6" translate="yes" xml:space="preserve">
          <source>It gets the calling stack frame, and finds the class (implicitly stored as a local free variable, &lt;code&gt;__class__&lt;/code&gt;, making the calling function a closure over the class) and the first argument to that function, which should be the instance or class that informs it which Method Resolution Order (MRO) to use.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;它获取调用堆栈框架，并找到类（隐式存储为局部自由变量&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__class__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，使调用函数成为该类的闭包）和该函数的第一个参数，该参数应为通知它的实例或类。使用哪种方法解析顺序（MRO）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8ce2ae31ef8a844e3b367354faa659a44b39cedb" translate="yes" xml:space="preserve">
          <source>It's been noted that in Python 3.0+ you can use</source>
          <target state="translated">据悉,在Python 3.0+中,你可以使用</target>
        </trans-unit>
        <trans-unit id="e2ded1d3b411cff93927f1c1b5c1a5bc18d0f6a2" translate="yes" xml:space="preserve">
          <source>It's rather hand-wavey and doesn't tell us much, but the point of &lt;code&gt;super&lt;/code&gt; is not to avoid writing the parent class. The point is to ensure that the next method in line in the method resolution order (MRO) is called. This becomes important in multiple inheritance.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这有点手摇，不会告诉我们太多，但是&lt;/font&gt;&lt;/font&gt; &lt;code&gt;super&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的意义不是要避免编写父类。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;关键是要确保调用方法解析顺序（MRO）中的下一个方法。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这在多重继承中变得很重要。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1efb022ca61801794dbc70bf04ba0a45b0b44a78" translate="yes" xml:space="preserve">
          <source>Just a heads up... with Python 2.7, and I believe ever since &lt;code&gt;super()&lt;/code&gt; was introduced in version 2.2, you can only call &lt;a href=&quot;http://docs.python.org/library/functions.html#super&quot;&gt;&lt;code&gt;super()&lt;/code&gt;&lt;/a&gt; if one of the parents inherit from a class that eventually inherits &lt;code&gt;object&lt;/code&gt; (&lt;a href=&quot;http://docs.python.org/glossary.html#term-new-style-class&quot;&gt;new-style classes&lt;/a&gt;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;刚开始&amp;hellip;&amp;hellip;使用Python 2.7，我相信自从&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在版本2.2中引入&lt;/font&gt;&lt;/font&gt; &lt;code&gt;super()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;以来&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果父级之一从最终继承&lt;/font&gt; &lt;code&gt;object&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;的类继承&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（&lt;/font&gt;&lt;a href=&quot;http://docs.python.org/glossary.html#term-new-style-class&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;新样式类&lt;/font&gt;&lt;/a&gt;&lt;/font&gt;&lt;a href=&quot;http://docs.python.org/library/functions.html#super&quot;&gt; &lt;code&gt;super()&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;则&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;只能调用&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;super（）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c11b889063ddec79111dade62ed3e68cda5d425e" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;https://docs.python.org/3/library/functions.html#super&quot;&gt;the syntax changed in Python 3.0&lt;/a&gt;: you can just say &lt;code&gt;super().__init__()&lt;/code&gt; instead of &lt;code&gt;super(ChildB, self).__init__()&lt;/code&gt; which IMO is quite a bit nicer. The standard docs also refer to a &lt;a href=&quot;https://rhettinger.wordpress.com/2011/05/26/super-considered-super/&quot;&gt;guide to using &lt;code&gt;super()&lt;/code&gt;&lt;/a&gt; which is quite explanatory.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;请注意，&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.python.org/3/library/functions.html#super&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Python 3.0&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;中&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的语法已更改&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：您可以只说&lt;/font&gt;&lt;/font&gt; &lt;code&gt;super().__init__()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;而不是&lt;/font&gt;&lt;/font&gt; &lt;code&gt;super(ChildB, self).__init__()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，这对IMO来说要好得多。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;标准文档还参考了&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://rhettinger.wordpress.com/2011/05/26/super-considered-super/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;有关使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;super()&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;指南，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这非常具有解释性。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="120b8e7780aebaa08d66e08924d05a7926d88a33" translate="yes" xml:space="preserve">
          <source>Now remember, &lt;code&gt;ChildB&lt;/code&gt; uses super, &lt;code&gt;ChildA&lt;/code&gt; does not:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;现在记住，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;ChildB&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用超级，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;ChildA&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;不&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1e1bbbacc79ffa0321328ffd3a629b28c48e9fa4" translate="yes" xml:space="preserve">
          <source>Personally, as for python 2.7 code, I'm going to continue using &lt;code&gt;BaseClassName.__init__(self, args)&lt;/code&gt; until I actually get the advantage of using &lt;code&gt;super()&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;就个人而言，对于python 2.7代码，我将继续使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;BaseClassName.__init__(self, args)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;直到我真正获得使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;super()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的好处为止&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="656b5e0f28aa8e09c2d356dcaad53c550ed7e748" translate="yes" xml:space="preserve">
          <source>Since it requires that first argument for the MRO, &lt;a href=&quot;https://bugs.python.org/issue31118&quot;&gt;using &lt;code&gt;super&lt;/code&gt; with static methods is impossible&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;由于它需要MRO的第一个参数，因此&lt;/font&gt;&lt;a href=&quot;https://bugs.python.org/issue31118&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;无法&lt;/font&gt;&lt;/a&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;将&lt;/font&gt;&lt;/font&gt; &lt;code&gt;super&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;与静态方法一起&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="50c6e41121c38b6b90d6b8a75b15ae39265fe7f4" translate="yes" xml:space="preserve">
          <source>So if you are designed your classes so that they can be used in a Cooperative Multiple Inheritance scenario, you use &lt;code&gt;super&lt;/code&gt; because you don't really know who is going to be the ancestor at runtime.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因此，如果您将类设计为可以在&amp;ldquo;协作式多重继承&amp;rdquo;方案中使用，请使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;super&lt;/code&gt; ,&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因为您实际上并不知道在运行时谁将成为祖先。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="681df8aa8e2438f396cffd8a248cb63baa354d56" translate="yes" xml:space="preserve">
          <source>Super has no side effects</source>
          <target state="translated">超级没有任何副作用</target>
        </trans-unit>
        <trans-unit id="cee4c8b6f9b0ed98c6a0f4aa78798e8c7179894c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://rhettinger.wordpress.com/2011/05/26/super-considered-super/&quot;&gt;super considered super post&lt;/a&gt; and &lt;a href=&quot;https://youtu.be/EiOglTERPEo&quot;&gt;pycon 2015 accompanying video&lt;/a&gt; explain this pretty well.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;该&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://rhettinger.wordpress.com/2011/05/26/super-considered-super/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;超认为超级岗位&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;和&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://youtu.be/EiOglTERPEo&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;PYCON 2015年影随行&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;解释这相当不错。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5e2ec71728d3de52aa02d0ab10c1f730dd4325c3" translate="yes" xml:space="preserve">
          <source>The main difference is that &lt;code&gt;ChildA.__init__&lt;/code&gt; will unconditionally call &lt;code&gt;Base.__init__&lt;/code&gt; whereas &lt;code&gt;ChildB.__init__&lt;/code&gt; will call &lt;code&gt;__init__&lt;/code&gt; in &lt;strong&gt;whatever class happens to be &lt;code&gt;ChildB&lt;/code&gt; ancestor in &lt;code&gt;self&lt;/code&gt;'s line of ancestors&lt;/strong&gt;
(which may differ from what you expect).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;主要的区别是，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;ChildA.__init__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;将无条件呼叫&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Base.__init__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;而&lt;/font&gt;&lt;/font&gt; &lt;code&gt;ChildB.__init__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;会调用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__init__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;任何类恰好是&lt;/font&gt;&lt;/font&gt; &lt;code&gt;ChildB&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在祖先&lt;/font&gt;&lt;/font&gt; &lt;code&gt;self&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的祖先线&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; （可能与预期的不同）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="73a82aa45bc046833ee1591294e52598ae55f315" translate="yes" xml:space="preserve">
          <source>The primary difference in this code is that you get a layer of indirection in the &lt;code&gt;__init__&lt;/code&gt; with &lt;code&gt;super&lt;/code&gt;, which uses the current class to determine the next class's &lt;code&gt;__init__&lt;/code&gt; to look up in the MRO.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;该代码的主要区别在于，您可以在&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;带有&lt;/font&gt; &lt;code&gt;super&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;的&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__init__&lt;/code&gt; 中&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;获得一个间接层，该层&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用当前类来确定&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;要在MRO中查找&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的下一类的&lt;/font&gt; &lt;code&gt;__init__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="efafeff5ca15dcf63ce39777e8527649737832f0" translate="yes" xml:space="preserve">
          <source>The reason we use &lt;code&gt;super&lt;/code&gt; is so that child classes that may be using cooperative multiple inheritance will call the correct next parent class function in the Method Resolution Order (MRO).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我们使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;super&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的原因&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是，可能使用协作多重继承的子类将在&amp;ldquo;方法解析顺序&amp;rdquo;（MRO）中调用正确的下一个父类函数。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="128554c42e47d524faa5e1ee8f33583351379711" translate="yes" xml:space="preserve">
          <source>There isn't, really. &lt;code&gt;super()&lt;/code&gt; looks at the next class in the MRO (method resolution order, accessed with &lt;code&gt;cls.__mro__&lt;/code&gt;) to call the methods. Just calling the base &lt;code&gt;__init__&lt;/code&gt; calls the base &lt;code&gt;__init__&lt;/code&gt;. As it happens, the MRO has exactly one item-- the base. So you're really doing the exact same thing, but in a nicer way with &lt;code&gt;super()&lt;/code&gt; (particularly if you get into multiple inheritance later).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;真的没有。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;super()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;查看MRO中的下一个类（方法解析顺序，使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;cls.__mro__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;访问&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）以调用方法。只需调用基本&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__init__&lt;/code&gt; 即可&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;调用基本&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__init__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。碰巧的是，MRO只有一项-基础。因此，您实际上确实在做同样的事情，但是使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;super()&lt;/code&gt; 的&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;方式更好&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（特别是如果以后要进行多重继承的话）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5ad67f311c731daa8ad267b6d0a11ac4c75118fa" translate="yes" xml:space="preserve">
          <source>This is &lt;em&gt;completely&lt;/em&gt; wrong. &lt;code&gt;super&lt;/code&gt; lets us look up the next parent in the MRO (see the first section of this answer) for child classes. If you tell &lt;code&gt;super&lt;/code&gt; we're in the child instance's method, it will then lookup the next method in line (probably this one) resulting in recursion, probably causing a logical failure (in the answerer's example, it does) or a &lt;code&gt;RuntimeError&lt;/code&gt; when the recursion depth is exceeded.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这是&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;完全&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;错误的。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;super&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;让我们在MRO中查找下一个父类（请参阅此答案的第一部分）以获取子类。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果您告诉&lt;/font&gt;&lt;/font&gt; &lt;code&gt;super&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我们在子实例的方法中，则它将在行中查找下一个方法（可能是该方法），从而导致递归，这可能会导致逻辑故障（在回答者的示例中，确实如此），或者在运行&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;时&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;出现&lt;/font&gt;&lt;/font&gt; &lt;code&gt;RuntimeError&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。超过了递归深度。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a02d639fb189fe9aaedd80d36e85b997afe1ce9b" translate="yes" xml:space="preserve">
          <source>Understanding Python super() with __init__() methods</source>
          <target state="translated">用__init__()方法理解Python super()</target>
        </trans-unit>
        <trans-unit id="fd23c57c51d5b0bf648f12dd6739eb32afaa90bc" translate="yes" xml:space="preserve">
          <source>When I create a &lt;code&gt;Square&lt;/code&gt; using &lt;code&gt;mSquare = Square('a', 10,10)&lt;/code&gt;, Python calls the constructor for &lt;code&gt;Rectangle&lt;/code&gt; because I haven't given &lt;code&gt;Square&lt;/code&gt; its own constructor. However, in the constructor for &lt;code&gt;Rectangle&lt;/code&gt;, the call &lt;code&gt;super(self.__class__,self)&lt;/code&gt; is going to return the superclass of &lt;code&gt;mSquare&lt;/code&gt;, so it calls the constructor for &lt;code&gt;Rectangle&lt;/code&gt; again. This is how the infinite loop happens, as was mentioned by @S_C. In this case, when I run &lt;code&gt;super(...).__init__()&lt;/code&gt; I am calling the constructor for &lt;code&gt;Rectangle&lt;/code&gt; but since I give it no arguments, I will get an error.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;当我&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用&lt;/font&gt; &lt;code&gt;mSquare = Square('a', 10,10)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;创建一个&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Square&lt;/code&gt; 时&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，Python调用&lt;/font&gt; &lt;code&gt;Rectangle&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;的构造函数，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因为我没有给&lt;/font&gt; &lt;code&gt;Square&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;提供自己的构造函数。但是，在&lt;/font&gt; &lt;code&gt;Rectangle&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;的构造函数中&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，调用&lt;/font&gt; &lt;code&gt;super(self.__class__,self)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;将返回&lt;/font&gt; &lt;code&gt;mSquare&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;的超类&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，因此它将&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;再次&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;调用&lt;/font&gt; &lt;code&gt;Rectangle&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;的构造函数&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。如@S_C所述，这就是无限循环的发生方式。在这种情况下，当我运行&lt;/font&gt; &lt;code&gt;super(...).__init__()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;我正在调用&lt;/font&gt; &lt;code&gt;Rectangle&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;的构造函数，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;但由于没有给它提供任何参数，所以会出现错误。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cde4744825e7e84a1b8198b65769881ad4e9dbb7" translate="yes" xml:space="preserve">
          <source>Without super, you are limited in your ability to use multiple inheritance:</source>
          <target state="translated">没有超级,你的能力就会受到限制,无法使用多重继承。</target>
        </trans-unit>
        <trans-unit id="509a354e43247d3a90534a7d2167805abbd62537" translate="yes" xml:space="preserve">
          <source>Written a little more like native Python:</source>
          <target state="translated">写得有点像原生Python。</target>
        </trans-unit>
        <trans-unit id="5b0fa24c2bd9b59ace06430f7547a06122f05c72" translate="yes" xml:space="preserve">
          <source>You have inserted &lt;code&gt;Mixin&lt;/code&gt; in between &lt;code&gt;ChildB&lt;/code&gt; and &lt;code&gt;Base&lt;/code&gt;. And you can take advantage of it with &lt;code&gt;super()&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;您已经&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在&lt;/font&gt; &lt;code&gt;ChildB&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;和&lt;/font&gt; &lt;code&gt;Base&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;之间&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;插入了&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Mixin&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;您可以通过&lt;/font&gt; &lt;code&gt;super()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;来利用它&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="051f61a5e090c4143861ad401dc852d6833fe2f3" translate="yes" xml:space="preserve">
          <source>gets into infinite recursion.</source>
          <target state="translated">陷入无限递归。</target>
        </trans-unit>
        <trans-unit id="cf8b646f8f800e8bea17e956b9ddc27f0224fb15" translate="yes" xml:space="preserve">
          <source>super() lets you avoid referring to the base class explicitly, which can be nice. . But the main advantage comes with multiple inheritance, where all sorts of fun stuff can happen. See the standard docs on super if you haven't already.</source>
          <target state="translated">super()可以让你避免显式引用基类,这很不错。但主要的优势在于多继承,在这里可以发生各种有趣的事情。如果你还没有的话,请看关于 super 的标准文档。</target>
        </trans-unit>
        <trans-unit id="c49f58ba362f4f30464f090b793e0b578153a1d1" translate="yes" xml:space="preserve">
          <source>then &lt;strong&gt;&lt;code&gt;Base&lt;/code&gt; is no longer the parent of &lt;code&gt;ChildB&lt;/code&gt;&lt;/strong&gt; for &lt;code&gt;ChildC&lt;/code&gt; instances. Now &lt;code&gt;super(ChildB, self)&lt;/code&gt; will point to &lt;code&gt;Mixin&lt;/code&gt; if &lt;code&gt;self&lt;/code&gt; is a &lt;code&gt;ChildC&lt;/code&gt; instance.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;那么&lt;/font&gt;&lt;/font&gt;&lt;strong&gt; &lt;code&gt;Base&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;不再是父&lt;/font&gt;&lt;/font&gt; &lt;code&gt;ChildB&lt;/code&gt; &lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;为&lt;/font&gt;&lt;/font&gt; &lt;code&gt;ChildC&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;实例。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;现在&lt;/font&gt;&lt;/font&gt; &lt;code&gt;super(ChildB, self)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果&lt;/font&gt; &lt;code&gt;self&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;是&lt;/font&gt; &lt;code&gt;ChildC&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;实例&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，则super（ChildB，self）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;将指向&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Mixin&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cc6d1365e74eeffa3b579826e7726f0e6232cda9" translate="yes" xml:space="preserve">
          <source>to make your call, which is concise and does not require you to reference the parent OR class names explicitly, which can be handy. I just want to add that for Python 2.7 or under, it is possible to get this name-insensitive behaviour by writing &lt;code&gt;self.__class__&lt;/code&gt; instead of the class name, i.e.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;进行调用，这很简洁，不需要您显式地引用父级或类名，这很方便。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我只想添加它，对于python 2.7或更低版​​本，可以通过编写&lt;/font&gt;&lt;/font&gt; &lt;code&gt;self.__class__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;而不是类名&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;来获得名称不敏感的行为&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，即&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="70bf8e981045e21a5186d16716649089997ddf70" translate="yes" xml:space="preserve">
          <source>works as expected</source>
          <target state="translated">如愿以偿</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
