<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://stackoverflow.com/questions/572549">
    <body>
      <group id="572549">
        <trans-unit id="8211e5d22aa1b1159a30406dd120541a87bdc605" translate="yes" xml:space="preserve">
          <source>&quot;&lt;code&gt;git add -A .&lt;/code&gt;&quot; is equivalent to &quot;&lt;code&gt;git add .; git add -u .&lt;/code&gt;&quot;</source>
          <target state="translated">&quot; &lt;code&gt;git add -A .&lt;/code&gt; &quot;는 &quot; &lt;code&gt;git add .; git add -u .&lt;/code&gt; &quot;와 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="eca4f8f8b66688e8d60c40f6ac873b9e3b095fce" translate="yes" xml:space="preserve">
          <source>(Note the extra '&lt;code&gt;.&lt;/code&gt;' for &lt;code&gt;git add -A&lt;/code&gt; and &lt;code&gt;git add -u&lt;/code&gt;)</source>
          <target state="translated">( &lt;code&gt;git add -A&lt;/code&gt; 및 &lt;code&gt;git add -u&lt;/code&gt; 의 경우 추가 ' &lt;code&gt;.&lt;/code&gt; '참고)</target>
        </trans-unit>
        <trans-unit id="8312aae0bfe62d8197bfb79f02b36cf9bbae86c8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://git.kernel.org/cgit/git/git.git/tree/Documentation/RelNotes/2.0.0.txt&quot;&gt;Things changed&lt;/a&gt; with Git 2.0 (&lt;a href=&quot;https://en.wikipedia.org/wiki/Git#Releases[27][28]&quot;&gt;2014-05-28&lt;/a&gt;):</source>
          <target state="translated">Git 2.0 ( &lt;a href=&quot;https://en.wikipedia.org/wiki/Git#Releases[27][28]&quot;&gt;2014-05-28&lt;/a&gt; )으로 &lt;a href=&quot;https://git.kernel.org/cgit/git/git.git/tree/Documentation/RelNotes/2.0.0.txt&quot;&gt;변경된 사항&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="662ae99d544a2f2757ae74937b9cade59b33c921" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-A&lt;/code&gt; = &lt;code&gt;--all&lt;/code&gt; (no such &lt;code&gt;-a&lt;/code&gt;, which gives syntax error) = superset of all untracked/tracked files , unless in Git before 2.0, wherein if the dot filespec is given, then only that particular folder is considered. =&amp;gt; &lt;em&gt;if&lt;/em&gt; the item is recognized, &lt;code&gt;git add -A&lt;/code&gt; will find it and add it.</source>
          <target state="translated">2.0 이전의 Git이 아닌 한 &lt;code&gt;-A&lt;/code&gt; = &lt;code&gt;--all&lt;/code&gt; (구문 에러가 발생하는 &lt;code&gt;-a&lt;/code&gt; 와 같은 -a 없음) = 모든 추적되지 않은 / 추적 된 파일의 수퍼 세트. 여기서 도트 파일 스펙이 제공되면 해당 특정 폴더 만 고려됩니다. =&amp;gt; 항목이 인식되면 &lt;code&gt;git add -A&lt;/code&gt; 가 찾아서 추가합니다.</target>
        </trans-unit>
        <trans-unit id="502c4a912ef92578be4d0d2cb2e5ce32676575c7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-A&lt;/code&gt; is now the default</source>
          <target state="translated">&lt;code&gt;-A&lt;/code&gt; 는 이제 기본값입니다</target>
        </trans-unit>
        <trans-unit id="d708df0c2941b055ddd46c07e4ac1756a5590b36" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-u&lt;/code&gt; = &lt;code&gt;--update&lt;/code&gt; = subset to tracked files =&amp;gt; Add = No; Change = Yes; Delete = Yes. =&amp;gt; &lt;em&gt;if&lt;/em&gt; the item is tracked.</source>
          <target state="translated">&lt;code&gt;-u&lt;/code&gt; = &lt;code&gt;--update&lt;/code&gt; = 추적 된 파일의 하위 집합 =&amp;gt; 추가 = 아니요; 변화 = 예; 삭제 = 예. 항목을 추적하는 &lt;em&gt;경우&lt;/em&gt; =&amp;gt;</target>
        </trans-unit>
        <trans-unit id="fd2ca061733ba545b534757d25516bb55988835c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git add &amp;lt;path&amp;gt;&lt;/code&gt; is the same as &quot;&lt;code&gt;git add -A &amp;lt;path&amp;gt;&lt;/code&gt;&quot; now, so that
  &quot;&lt;code&gt;git add dir/&lt;/code&gt;&quot; will notice paths you removed from the directory and
  record the removal.</source>
          <target state="translated">&lt;code&gt;git add &amp;lt;path&amp;gt;&lt;/code&gt; 는 이제 &quot; &lt;code&gt;git add -A &amp;lt;path&amp;gt;&lt;/code&gt; &quot;와 동일하므로 &quot; &lt;code&gt;git add dir/&lt;/code&gt; &quot;은 디렉토리에서 제거 된 경로를 확인하고 제거를 기록합니다.</target>
        </trans-unit>
        <trans-unit id="38490d6e0d7cf799267a5bb2a056370c701fd4f2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git add --ignore-removal .&lt;/code&gt; adds new/modified files in the current directory</source>
          <target state="translated">&lt;code&gt;git add --ignore-removal .&lt;/code&gt; 현재 디렉토리에 새로운 / 수정 된 파일을 추가합니다</target>
        </trans-unit>
        <trans-unit id="c9acd2809252c7725070271b0f7a7526ef78615a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git add -A&lt;/code&gt; adds files to index from all folders in working tree.</source>
          <target state="translated">&lt;code&gt;git add -A&lt;/code&gt; 는 작업 트리의 모든 폴더에서 색인 할 파일을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="18e2244d4ba4dc6e833ef43a854c030001462cb8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git add -A&lt;/code&gt; is a handy shortcut for doing both of those.</source>
          <target state="translated">&lt;code&gt;git add -A&lt;/code&gt; 는 두 가지를 모두 수행하는 편리한 바로 가기입니다.</target>
        </trans-unit>
        <trans-unit id="b73d0a634a5bdb98af8cf3b39caf9c7b6ebdd057" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git add -A&lt;/code&gt; is equivalent to  &lt;code&gt;git add .; git add -u&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;git add -A&lt;/code&gt; 는 git add 와 같습니다 &lt;code&gt;git add .; git add -u&lt;/code&gt; git add -u .</target>
        </trans-unit>
        <trans-unit id="6a149b861f3dbcb05bdefec322018a7b894d504b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git add -A&lt;/code&gt; is equivalent to &lt;code&gt;git add --all&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;git add -A&lt;/code&gt; 는 &lt;code&gt;git add --all&lt;/code&gt; 과 같습니다.</target>
        </trans-unit>
        <trans-unit id="107c7403c87b25cb0385a3b312aaa3282ad94cc3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git add -A&lt;/code&gt; stages &lt;strong&gt;all changes&lt;/strong&gt;</source>
          <target state="translated">&lt;code&gt;git add -A&lt;/code&gt; 는 &lt;strong&gt;모든 변경을 준비합니다&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e367e583a6733760e5282b509c44eca8c1335acb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git add -u .&lt;/code&gt; adds modified/deleted files in the current directory</source>
          <target state="translated">&lt;code&gt;git add -u .&lt;/code&gt; 현재 디렉토리에 수정 / 삭제 된 파일을 추가합니다</target>
        </trans-unit>
        <trans-unit id="7295c760901d63583de51b4acf957d06fe40a258" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git add -u&lt;/code&gt; and &lt;code&gt;git add -A&lt;/code&gt; in a subdirectory without paths on the command line operate on the entire tree.</source>
          <target state="translated">명령 행에 경로가없는 서브 디렉토리의 &lt;code&gt;git add -u&lt;/code&gt; 및 &lt;code&gt;git add -A&lt;/code&gt; 는 전체 트리에서 작동합니다.</target>
        </trans-unit>
        <trans-unit id="9668ed380ebd84884d63660a767826d33dc95fbc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git add -u&lt;/code&gt; is equivalent to &lt;code&gt;git add --update&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;git add -u&lt;/code&gt; 는 &lt;code&gt;git add --update&lt;/code&gt; 와 같습니다.</target>
        </trans-unit>
        <trans-unit id="635392fa8db9777fc80dab0e690c2be00e749bc5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git add -u&lt;/code&gt; looks at all the &lt;em&gt;already&lt;/em&gt; tracked files and stages the changes to those files if they are different or if they have been removed. It does not add any new files, it only stages changes to already tracked files.</source>
          <target state="translated">&lt;code&gt;git add -u&lt;/code&gt; 는 &lt;em&gt;이미&lt;/em&gt; 추적 된 모든 파일을보고 해당 파일이 다르거 나 제거 된 경우 해당 파일에 대한 변경 사항을 준비합니다. 새 파일을 추가하지 않고 이미 추적 된 파일의 변경 사항 만 준비합니다.</target>
        </trans-unit>
        <trans-unit id="441376f56797301ee85482cf16bd8fc18c65f523" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git add -u&lt;/code&gt; stages modifications and deletions, &lt;strong&gt;without new files&lt;/strong&gt;</source>
          <target state="translated">&lt;code&gt;git add -u&lt;/code&gt; 는 &lt;strong&gt;새 파일없이&lt;/strong&gt; 수정 및 삭제를 준비 &lt;strong&gt;합니다&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="705290c98836b17f3e4efed1742c89338aa29335" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git add .&lt;/code&gt; and &lt;code&gt;git add -A .&lt;/code&gt; add new/modified/deleted files in the current directory</source>
          <target state="translated">&lt;code&gt;git add .&lt;/code&gt; 그리고 &lt;code&gt;git add -A .&lt;/code&gt; 현재 디렉토리에 새로운 / 수정 / 삭제 된 파일 추가</target>
        </trans-unit>
        <trans-unit id="e5695c1b9f6db93f7acd150fa9df85029d06e1d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git add .&lt;/code&gt; equals &lt;code&gt;git add -A .&lt;/code&gt; adds files to index only from current and children folders.</source>
          <target state="translated">&lt;code&gt;git add .&lt;/code&gt; &lt;code&gt;git add -A .&lt;/code&gt; 와 같습니다 . 현재 및 하위 폴더에서만 색인을 생성 할 파일을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="daace2494c83c0f8b4c42da7c2d316440fe6d00d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git add .&lt;/code&gt; stages new files and modifications, &lt;strong&gt;without deletions&lt;/strong&gt;</source>
          <target state="translated">&lt;code&gt;git add .&lt;/code&gt; &lt;strong&gt;삭제하지 않고&lt;/strong&gt; 새 파일 및 수정 단계</target>
        </trans-unit>
        <trans-unit id="ee54e143b5acb51ffd856c6b42267f91ffecdef6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git add&lt;/code&gt; is like &lt;code&gt;git add :/&lt;/code&gt; (&lt;a href=&quot;https://stackoverflow.com/a/31951899/6309&quot;&gt;add everything from top git repo folder&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;git add&lt;/code&gt; 는 &lt;code&gt;git add :/&lt;/code&gt; 와 같습니다 ( &lt;a href=&quot;https://stackoverflow.com/a/31951899/6309&quot;&gt;git repo 폴더에서 모든 것을 추가하십시오&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="8f597db408078e29fe52b30018f7c28b94b667ff" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;a href=&quot;http://pcottle.github.io/learnGitBranching/&quot;&gt;Learn Git Branching&lt;/a&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;a href=&quot;http://pcottle.github.io/learnGitBranching/&quot;&gt;힘내 분기 배우기&lt;/a&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4beff0b5f9058b6b7715f661a056b635a007f86f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;a href=&quot;https://onlywei.github.io/explain-git-with-d3/&quot;&gt;Explain Git With D3&lt;/a&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;a href=&quot;https://onlywei.github.io/explain-git-with-d3/&quot;&gt;D3와 힘내 설명&lt;/a&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="dbf539f9879e531b8e7c094a368b8b09934741eb" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/315911/git-for-beginners-the-definitive-practical-guide&quot;&gt;Git for beginners: The definitive practical guide&lt;/a&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/315911/git-for-beginners-the-definitive-practical-guide&quot;&gt;초보자를위한 Git : 확실한 실용 가이드&lt;/a&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e41d3b55d5a471d150111a8ec9e977f4ca9fc445" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;a href=&quot;https://try.github.io/levels/1/challenges/1&quot;&gt;Got 15 minutes and want to learn Git? (in an interactive way)&lt;/a&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;a href=&quot;https://try.github.io/levels/1/challenges/1&quot;&gt;15 분 동안 Git을 배우고 싶습니까?&lt;/a&gt;&lt;/em&gt; &lt;em&gt;(대화식으로)&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="89160f762b1b2a50973c6dcf02f20b20ddabf5d5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;This answer only applies to &lt;strong&gt;Git version 1.x&lt;/strong&gt;. For Git version 2.x, see other answers.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;이 답변은 &lt;strong&gt;Git 버전 1.x&lt;/strong&gt; 에만 적용됩니다.&lt;/em&gt; &lt;em&gt;Git 버전 2.x의 경우 다른 답변을 참조하십시오.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="74dd7b2f12d331316557eb38dd8a3b439f79c667" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;A warning is issued when these commands are run without a pathspec and when you have local changes outside the current directory&lt;/strong&gt;, because the behaviour in Git 2.0 will be different
  from today's version in such a situation.</source>
          <target state="translated">&lt;strong&gt;이러한 명령이 pathspec없이 실행될 때와 현재 디렉토리 외부에서 로컬로 변경 한 경우&lt;/strong&gt; Git 2.0의 동작이 현재 버전과 다르기 때문에 &lt;strong&gt;경고가&lt;/strong&gt; 발생합니다.</target>
        </trans-unit>
        <trans-unit id="963bfa4de40b8952c167c4c33c0851d9e25db9a7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Detail:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Detail:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="33e55402c435c4031710562e30ae9a88d58a4946" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Further reading:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;더 읽을 거리 :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f47383382e83f2a53431afaa324b5219c8584b82" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Git Version 1.x&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;힘내 버전 1.x&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="e2872544d167f2054bc1e0214f0bcada18f47d29" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Git Version 2.x&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;힘내 버전 2.x&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="a2fb070431451825a43dbcb68523c4e1049f4a93" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Summary:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Summary:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="68a7553c8bcc632ed67b09926e0d59cbca61c705" translate="yes" xml:space="preserve">
          <source>A more distilled quick answer:</source>
          <target state="translated">더 증류 된 빠른 답변 :</target>
        </trans-unit>
        <trans-unit id="4775f7e392240fd8132090e1709bc752b81ad7e6" translate="yes" xml:space="preserve">
          <source>And that's all.</source>
          <target state="translated">그리고 그게 다야.</target>
        </trans-unit>
        <trans-unit id="2d3e940372091f14953c08d43c0d3e09601e930a" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;git add -A&lt;/code&gt; or &lt;code&gt;git add -u&lt;/code&gt; would operate (starting git 2.0 only) on the &lt;strong&gt;entire working tree&lt;/strong&gt;, and not just on the current path.</source>
          <target state="translated">&lt;code&gt;git add -A&lt;/code&gt; 또는 &lt;code&gt;git add -u&lt;/code&gt; 는 현재 경로뿐만 아니라 &lt;strong&gt;전체 작업 트리&lt;/strong&gt; 에서 작동합니다 (git 2.0 만 시작).</target>
        </trans-unit>
        <trans-unit id="18796e16a7f497cb2d8a6fed1c9e5f5e6521814a" translate="yes" xml:space="preserve">
          <source>Both &lt;code&gt;git add .&lt;/code&gt; and &lt;code&gt;git add -A&lt;/code&gt; will stage all new, modified and deleted files in the newer versions of Git.</source>
          <target state="translated">두 &lt;code&gt;git add .&lt;/code&gt; 모두 add. &lt;code&gt;git add -A&lt;/code&gt; 는 새로운 버전의 Git에서 모든 새로운 수정 및 삭제 된 파일을 준비합니다.</target>
        </trans-unit>
        <trans-unit id="d0743eddc5e71834650d71256f38977cdf3ff971" translate="yes" xml:space="preserve">
          <source>Difference between “git add -A” and “git add .”</source>
          <target state="translated">&quot;git add -A&quot;와 &quot;git add.&quot;의 차이점</target>
        </trans-unit>
        <trans-unit id="fbab8f2bbe16a0fb95cfd03c49ae601ac21163f0" translate="yes" xml:space="preserve">
          <source>Does both below (same as &lt;em&gt;git add --all&lt;/em&gt;)</source>
          <target state="translated">아래 둘 다 수행합니다 ( &lt;em&gt;git add --all&lt;/em&gt; 과 동일)</target>
        </trans-unit>
        <trans-unit id="4d805e6af22217045bf6e345641aeeaa5744ea4a" translate="yes" xml:space="preserve">
          <source>Empty folders are never added by Git. They are never even listed as 'untracked'. (A workaround is to add a blank file, possibly invisible, to the tracked files.)</source>
          <target state="translated">빈 폴더는 Git에 의해 추가되지 않습니다. 그들은 심지어 '추적되지 않은'것으로 나열되지 않습니다. (해결 방법은 빈 파일을 추적 파일에 보이지 않게 추가하는 것입니다.)</target>
        </trans-unit>
        <trans-unit id="3fa983addb40ab569c332d87f82da77fe78c55dd" translate="yes" xml:space="preserve">
          <source>Ensure any hunks/files to be added are accounted for in &lt;code&gt;git status&lt;/code&gt;.</source>
          <target state="translated">추가 할 덩어리 / 파일이 &lt;code&gt;git status&lt;/code&gt; 에 있는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="47faae2a8cf9b59666d75395c9059db47457781b" translate="yes" xml:space="preserve">
          <source>From &lt;a href=&quot;https://stackoverflow.com/questions/572549/difference-between-git-add-a-and-git-add/572660#572660&quot;&gt;Charles' instructions&lt;/a&gt;, after testing my proposed understanding would be as follows:</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/questions/572549/difference-between-git-add-a-and-git-add/572660#572660&quot;&gt;Charles의 지침&lt;/a&gt; 에서 테스트 한 후 제안 된 이해는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="0aff0850f1e52edd94532aca98d696a44ddf6c99" translate="yes" xml:space="preserve">
          <source>From the top level of the repository, &quot;git add -A&quot;  to add all items. This works in all versions of Git.</source>
          <target state="translated">저장소의 최상위 레벨에서 &quot;git add -A&quot;를 사용하여 모든 항목을 추가하십시오. 이것은 모든 버전의 Git에서 작동합니다.</target>
        </trans-unit>
        <trans-unit id="2fcd704aefdad998338bef1859b9d6820ad1605b" translate="yes" xml:space="preserve">
          <source>Git status will not display subfolder information, that is, untracked files, unless at least one file in that subfolder is tracked. Before such time, Git considers the entire folder out of scope, a la 'empty'. It is empty of tracked items.</source>
          <target state="translated">Git 상태는 하위 폴더에있는 하나 이상의 파일을 추적하지 않는 한 하위 폴더 정보, 즉 추적되지 않은 파일을 표시하지 않습니다. 그 전에 Git은 전체 폴더가 범위를 벗어난 것으로 간주합니다. 추적 된 항목이 비어 있습니다.</target>
        </trans-unit>
        <trans-unit id="5c109476e18d5c4a64459749d8731468d9dfed09" translate="yes" xml:space="preserve">
          <source>Have a good &lt;code&gt;.gitignore&lt;/code&gt; file so that normally only files of interest are untracked and/or unrecognized.</source>
          <target state="translated">일반적으로 관심있는 파일 만 추적 및 / 또는 인식되지 않도록 좋은 &lt;code&gt;.gitignore&lt;/code&gt; 파일이 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="6c14d22cf82fbaa76e63a1f5887baa374f1e8d25" translate="yes" xml:space="preserve">
          <source>Here is a table for quick understanding:</source>
          <target state="translated">다음은 빠른 이해를위한 표입니다.</target>
        </trans-unit>
        <trans-unit id="51e85e4e8113fb3e1f07e1727e78d73f5f0043e6" translate="yes" xml:space="preserve">
          <source>Here's an example:</source>
          <target state="translated">예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="03d81fc6725ae7db8e5a235ed6f7bbead1226e9c" translate="yes" xml:space="preserve">
          <source>However, in v2.0, the operation can be limited to the current path: just add the explicit dot suffix (which is also valid in Git 1.9 or earlier);</source>
          <target state="translated">그러나 v2.0에서는 작업이 현재 경로로 제한 될 수 있습니다. 명시적인 점 접미사를 추가하십시오 (Git 1.9 이하 버전에서도 유효 함).</target>
        </trans-unit>
        <trans-unit id="d1e165100e084b9522d6c2049bc5134e7a1c03bc" translate="yes" xml:space="preserve">
          <source>I hope this may add some more clarity.</source>
          <target state="translated">이것이 더 명확해질 수 있기를 바랍니다.</target>
        </trans-unit>
        <trans-unit id="8d6a31ec28ca8c9162623ac6fd414434ccb86f8b" translate="yes" xml:space="preserve">
          <source>If any items are missing, due to invisible files/folders, add them separately.</source>
          <target state="translated">보이지 않는 파일 / 폴더로 인해 누락 된 항목이 있으면 별도로 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="c8dc6364886786dfd6726fe9524c134071fbb162" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;&amp;lt;pathspec&amp;gt;&lt;/code&gt; is given when -A option is used, all files in the entire working tree are updated (old versions of Git used to limit the update to the current directory and its subdirectories).</source>
          <target state="translated">-A 옵션을 사용할 때 &lt;code&gt;&amp;lt;pathspec&amp;gt;&lt;/code&gt; 을 지정하지 않으면 전체 작업 트리의 모든 파일이 업데이트됩니다 (이전 버전의 Git은 업데이트를 현재 디렉토리 및 하위 디렉토리로 제한하는 데 사용됨).</target>
        </trans-unit>
        <trans-unit id="51babe58b8cec0fb584658ff9ebfce3cd264ba4b" translate="yes" xml:space="preserve">
          <source>If there is a big bug, do 'git reset' to clear the index entirely.</source>
          <target state="translated">큰 버그가 있으면 'git reset'을 수행하여 인덱스를 완전히 지우십시오.</target>
        </trans-unit>
        <trans-unit id="fde13bf0f8790fc21d82323068da5b1c5f48a631" translate="yes" xml:space="preserve">
          <source>If you are in any subdirectory of the &lt;em&gt;working directory&lt;/em&gt;, &lt;code&gt;git add -A&lt;/code&gt; will add all files from the entire &lt;em&gt;working directory&lt;/em&gt;, and &lt;code&gt;git add .&lt;/code&gt; will add files from your &lt;em&gt;current directory&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;작업 디렉토리의&lt;/em&gt; 하위 디렉토리에 있다면 &lt;code&gt;git add -A&lt;/code&gt; 는 전체 &lt;em&gt;작업 디렉토리&lt;/em&gt; 의 모든 파일과 &lt;code&gt;git add .&lt;/code&gt; &lt;em&gt;현재 디렉토리&lt;/em&gt; 에서 파일을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="41e1884b3ffbe03732ab798dd8039a1aa56d5ce9" translate="yes" xml:space="preserve">
          <source>If you are located directly at the &lt;em&gt;working directory&lt;/em&gt;, then &lt;code&gt;git add -A&lt;/code&gt; and &lt;code&gt;git add .&lt;/code&gt; work without the difference.</source>
          <target state="translated">&lt;em&gt;작업 디렉토리&lt;/em&gt; 에 직접있는 경우 &lt;code&gt;git add -A&lt;/code&gt; 및 &lt;code&gt;git add .&lt;/code&gt; 차이없이 일하십시오.</target>
        </trans-unit>
        <trans-unit id="aa12583f80d3df11d17944625f2be1730ce739b8" translate="yes" xml:space="preserve">
          <source>If your current working directory is &lt;code&gt;/my-repo&lt;/code&gt;, and you do &lt;code&gt;rm rootfile.txt&lt;/code&gt;, then &lt;code&gt;cd subfolder&lt;/code&gt;, followed by &lt;code&gt;git add .&lt;/code&gt;, then it will &lt;em&gt;not&lt;/em&gt; stage the deleted file. But doing &lt;code&gt;git add -A&lt;/code&gt; will certainly stage this change no matter where you perform the command from.</source>
          <target state="translated">현재 작업 디렉토리가 &lt;code&gt;/my-repo&lt;/code&gt; 이고 &lt;code&gt;rm rootfile.txt&lt;/code&gt; 이면 &lt;code&gt;cd subfolder&lt;/code&gt; 와 &lt;code&gt;git add .&lt;/code&gt; 삭제 된 파일을 스테이징 &lt;em&gt;하지 않습니다&lt;/em&gt; . 그러나 &lt;code&gt;git add -A&lt;/code&gt; 를 수행하면 명령을 어디에서 수행하든이 변경 사항을 확실히 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="70bf03d8be3bdbf403407b6c68e4250e0014edc8" translate="yes" xml:space="preserve">
          <source>Important background knowledge about how Git 'adds':</source>
          <target state="translated">Git이 어떻게 추가되는지에 대한 중요한 배경 지식 :</target>
        </trans-unit>
        <trans-unit id="893dd36cb8e26bf9403aaed8bd4d85d83d60917c" translate="yes" xml:space="preserve">
          <source>In &lt;strong&gt;Git 2.x&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;Git 2.x에서&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="be7aeaad34b9c679237b5e2c3e33aa7063953747" translate="yes" xml:space="preserve">
          <source>In Git 2 the &lt;code&gt;-A&lt;/code&gt; option is now the default.</source>
          <target state="translated">힘내 2에서 &lt;code&gt;-A&lt;/code&gt; 옵션이 이제 기본값입니다.</target>
        </trans-unit>
        <trans-unit id="87aa644826e8b6e7f0b7611a74ccf66fa5effa52" translate="yes" xml:space="preserve">
          <source>In Git before 2.0, for the two limiters (update and all), the new default is to operate on the entire working tree, instead of the current path (Git 1.9 or earlier),</source>
          <target state="translated">2.0 이전의 Git에서 두 제한 기 (업데이트 및 모두)의 경우 새 기본값은 현재 경로 (Git 1.9 이하) 대신 전체 작업 트리에서 작동하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="7093987d748199aa08eb2ec318d95df258304d3d" translate="yes" xml:space="preserve">
          <source>In conclusion, my policy is:</source>
          <target state="translated">결론적으로, 나의 정책은 :</target>
        </trans-unit>
        <trans-unit id="3920c9fdf9c3c409a7981048de3b19d425d50983" translate="yes" xml:space="preserve">
          <source>In older versions of Git, &quot;&lt;code&gt;git add &amp;lt;path&amp;gt;&lt;/code&gt;&quot; used to ignore removals.</source>
          <target state="translated">이전 버전의 Git에서 &quot; &lt;code&gt;git add &amp;lt;path&amp;gt;&lt;/code&gt; &quot;는 제거를 무시하는 데 사용되었습니다.</target>
        </trans-unit>
        <trans-unit id="cf09a3b1dffb5b56a0ab5f57f18f05041efa217a" translate="yes" xml:space="preserve">
          <source>Invisible files, those prefixed with a dot, (dotfiles) are never automatically recognized by Git. They are never even listed as 'untracked'.</source>
          <target state="translated">접두사가 붙은 보이지 않는 파일 (dotfile)은 Git에 의해 자동으로 인식되지 않습니다. 그들은 심지어 '추적되지 않은'것으로 나열되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f12b4b31583725582ce4900c9aa4a1f8db4bcd76" translate="yes" xml:space="preserve">
          <source>Limiters may be -u or -A or nil.</source>
          <target state="translated">리미터는 -u 또는 -A 또는 nil 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="de9cea7a5d40d8e4ae9e138c0d6fbd77ecd7e2ab" translate="yes" xml:space="preserve">
          <source>Long-form flags:</source>
          <target state="translated">장문 플래그 :</target>
        </trans-unit>
        <trans-unit id="8e63bef8580255c4cea9690e343f96999273ded8" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;https://github.com/git/git/blob/master/Documentation/RelNotes/1.8.3.txt#L19-L30&quot;&gt;starting git 2.0 (Q1 or Q2 2014)&lt;/a&gt;, when talking about &lt;strong&gt;&lt;code&gt;git add .&lt;/code&gt;&lt;/strong&gt; (current path within the working tree), you must use '&lt;code&gt;.&lt;/code&gt;' in the other &lt;code&gt;git add&lt;/code&gt; commands as well.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;git add .&lt;/code&gt; &lt;/strong&gt; 에 대해 이야기 할 때 &lt;a href=&quot;https://github.com/git/git/blob/master/Documentation/RelNotes/1.8.3.txt#L19-L30&quot;&gt;git 2.0 (Q1 또는 Q2 2014)&lt;/a&gt; 을 시작 &lt;strong&gt;하십시오.&lt;/strong&gt; (작업 트리 내의 현재 경로)에는 '를 사용해야합니다 &lt;code&gt;.&lt;/code&gt; 다른 &lt;code&gt;git add&lt;/code&gt; 명령에서도 '.</target>
        </trans-unit>
        <trans-unit id="e7b709323f83e80eff4f7ead8be1b2823446f638" translate="yes" xml:space="preserve">
          <source>Note that git 2.7 (Nov. 2015) will allow you to add a folder named &quot;&lt;code&gt;:&lt;/code&gt;&quot;!</source>
          <target state="translated">git 2.7 (2015 년 11 월)을 사용하면 &quot; &lt;code&gt;:&lt;/code&gt; &quot;라는 폴더를 추가 할 수 있습니다!</target>
        </trans-unit>
        <trans-unit id="c0062dc518bae3504bc5c8f51ad0d4b20a970fca" translate="yes" xml:space="preserve">
          <source>Now, given that knowledge, we can apply the answers above.</source>
          <target state="translated">이제 그 지식이 주어지면 위의 답변을 적용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ee9e8fbdf681ae55614ea63c82626977b5481bfc" translate="yes" xml:space="preserve">
          <source>One thing that I would add is that if the &lt;code&gt;--interactive&lt;/code&gt; or &lt;code&gt;-p&lt;/code&gt; mode is used then &lt;code&gt;git add&lt;/code&gt; will behave as if the update (&lt;code&gt;-u&lt;/code&gt;) flag was used and not add new files.</source>
          <target state="translated">내가 추가 할 한 가지는 &lt;code&gt;--interactive&lt;/code&gt; 또는 &lt;code&gt;-p&lt;/code&gt; 모드를 사용하면 &lt;code&gt;git add&lt;/code&gt; 가 업데이트 ( &lt;code&gt;-u&lt;/code&gt; ) 플래그가 사용 된 것처럼 작동하고 새 파일을 추가하지 않는다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="2d50cc49f4fa69aa14d326c9861493dc429d6a1e" translate="yes" xml:space="preserve">
          <source>P.S.: information relates to &lt;a href=&quot;https://en.wikipedia.org/wiki/Git#Releases[27][28]&quot;&gt;Git 2.0&lt;/a&gt; (2014-05-28).</source>
          <target state="translated">추신 : 정보는 &lt;a href=&quot;https://en.wikipedia.org/wiki/Git#Releases[27][28]&quot;&gt;Git 2.0&lt;/a&gt; (2014-05-28)과 관련이 있습니다.</target>
        </trans-unit>
        <trans-unit id="039206f73a592312ff46445b249ba81996f65130" translate="yes" xml:space="preserve">
          <source>Pathspec may be a filepath or dot, '.' to indicate the current directory.</source>
          <target state="translated">Pathspec은 파일 경로 또는 점 '.'일 수 있습니다. 현재 디렉토리를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="0160676e693bf648dc3b9b208fa6ab49bf9735b2" translate="yes" xml:space="preserve">
          <source>Remove any desired items from the index if desired.</source>
          <target state="translated">원하는 경우 색인에서 원하는 항목을 제거하십시오.</target>
        </trans-unit>
        <trans-unit id="86d6f06bc64fbf3ebaca495d774f66f9e1789fa9" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/git/git/commit/29abb33978f713cd0a5cc3687bf61077b0928840&quot;&gt;commit 29abb33&lt;/a&gt; (25 Oct 2015) by &lt;a href=&quot;https://github.com/gitster&quot;&gt;Junio C Hamano (&lt;code&gt;gitster&lt;/code&gt;)&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/gitster&quot;&gt;Junio ​​C &lt;code&gt;gitster&lt;/code&gt; ( gitster )의&lt;/a&gt; &lt;a href=&quot;https://github.com/git/git/commit/29abb33978f713cd0a5cc3687bf61077b0928840&quot;&gt;commit 29abb33&lt;/a&gt; (2015 년 10 월 25 일)을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="ab25928ba88dbcf31cbcad130d5ed987c6e5179e" translate="yes" xml:space="preserve">
          <source>So for Git 2 the answer is:</source>
          <target state="translated">따라서 Git 2의 대답은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="53aefd6d20852e179c8667cc243f7550068fc10f" translate="yes" xml:space="preserve">
          <source>Specifying a filespec = '.' (dot), or the current directory, is not recursive unless &lt;code&gt;-A&lt;/code&gt; is also specified. Dot refers strictly to the current directory - it omits paths found above and below.</source>
          <target state="translated">파일 스펙 지정 = '.' &lt;code&gt;-A&lt;/code&gt; 도 지정하지 않으면 (점) 또는 현재 디렉토리는 재귀 적이 지 않습니다. 도트는 현재 디렉토리를 엄격하게 참조합니다. 위와 아래에있는 경로는 생략되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="d6d0b15c0dd06a04d000f53ebbc7482ae48de3a3" translate="yes" xml:space="preserve">
          <source>Stages modified + deleted files</source>
          <target state="translated">스테이지 수정 및 삭제 된 파일</target>
        </trans-unit>
        <trans-unit id="6d03bc554be38aa07f62a50d267a07808200b0b4" translate="yes" xml:space="preserve">
          <source>Stages new + modified files</source>
          <target state="translated">새로운 + 수정 된 파일 준비</target>
        </trans-unit>
        <trans-unit id="ab5c8fda74b21816fb224c4da3bb11fdc78bbeb6" translate="yes" xml:space="preserve">
          <source>That means:</source>
          <target state="translated">그 의미는:</target>
        </trans-unit>
        <trans-unit id="24f37766b3880ad3b65ac4edfce725f9bd8de84a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-A&lt;/code&gt; option adds, modifies, and removes index entries to match the working tree.</source>
          <target state="translated">&lt;code&gt;-A&lt;/code&gt; 옵션은 작업 트리와 일치하도록 색인 항목을 추가, 수정 및 제거합니다.</target>
        </trans-unit>
        <trans-unit id="9ff5b6940bd6e84654c466e9fc3a89341953faba" translate="yes" xml:space="preserve">
          <source>The command &lt;code&gt;git add [--all|-A]&lt;/code&gt; appears to be identical to &lt;code&gt;git add .&lt;/code&gt;. Is this correct? If not, how do they differ?</source>
          <target state="translated">&lt;code&gt;git add [--all|-A]&lt;/code&gt; 명령은 git add와 동일한 것으로 보입니다 &lt;code&gt;git add .&lt;/code&gt; . 이 올바른지? 그렇지 않다면 어떻게 다릅니 까?</target>
        </trans-unit>
        <trans-unit id="30b4c4f4406f0284587105748a0be273e04babdc" translate="yes" xml:space="preserve">
          <source>The difference is that &lt;code&gt;git add -A&lt;/code&gt; stages files in &quot;higher, current and subdirectories&quot; that belong to your working Git repository. But doing a &lt;code&gt;git add .&lt;/code&gt; only stages files in the current directory and subdirectories following it (&lt;em&gt;not&lt;/em&gt; the files lying outside, i.e., higher directories).</source>
          <target state="translated">차이점은 &lt;code&gt;git add -A&lt;/code&gt; 는 작업중인 Git 저장소에 속하는 &quot;높은, 현재 및 서브 디렉토리&quot;의 파일을 스테이지한다는 점입니다. 그러나 &lt;code&gt;git add .&lt;/code&gt; 수행 하십시오. 현재 디렉토리에있는 파일과 그 뒤에 오는 서브 디렉토리 만 준비합니다 (높은 디렉토리 외부에있는 파일이 &lt;em&gt;아님&lt;/em&gt; ).</target>
        </trans-unit>
        <trans-unit id="21e55678bb9009f1db9482429cd7f0cc9c625e84" translate="yes" xml:space="preserve">
          <source>The important point about &lt;code&gt;git add .&lt;/code&gt; is that it looks at the working tree and adds all those paths to the staged changes if they are either changed or are new and not ignored, it does not stage any 'rm' actions.</source>
          <target state="translated">&lt;code&gt;git add .&lt;/code&gt; 에 대한 중요한 점 . 작업 트리를보고 변경되거나 새로 작성되어 무시되지 않은 경우 모든 변경 경로를 준비된 변경에 추가한다는 점은 'rm'작업을 준비하지 않는다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="72c68d0bbcd705ab884e6ad481064a6046966ae3" translate="yes" xml:space="preserve">
          <source>The limiters are as follows.</source>
          <target state="translated">리미터는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="3e188287ad277d6006207d7281fd1ddfb86fb835" translate="yes" xml:space="preserve">
          <source>The old behavior is now available with &lt;code&gt;--ignore-removal&lt;/code&gt;.</source>
          <target state="translated">이전 동작은 이제 &lt;code&gt;--ignore-removal&lt;/code&gt; 과 함께 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e9188ae6d7c46eed3b2c49ecdce30ee328560abb" translate="yes" xml:space="preserve">
          <source>The pathspec is as follows.</source>
          <target state="translated">경로 사양은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="7839726681b51e1336bf8783789ff94e5d54f0ac" translate="yes" xml:space="preserve">
          <source>This blog post might also be helpful to understand in what situation those commands may be applied: &lt;em&gt;&lt;a href=&quot;http://www.geekgumbo.com/2010/05/16/removing-deleted-files-from-your-git-working-directory/&quot;&gt;Removing Deleted Files from your Git Working Directory&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">이 블로그 게시물은 이러한 명령이 적용될 수있는 상황을 이해하는 데 도움이 될 수 있습니다. &lt;em&gt;&lt;a href=&quot;http://www.geekgumbo.com/2010/05/16/removing-deleted-files-from-your-git-working-directory/&quot;&gt;Git 작업 디렉토리에서 삭제 된 파일 제거&lt;/a&gt;&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="eb426c8066d24f30dc62e2911d67811787d29348" translate="yes" xml:space="preserve">
          <source>Those commands will &lt;strong&gt;operate on the entire tree in Git 2.0 for consistency with &quot;&lt;code&gt;git commit -a&lt;/code&gt;&quot; and other commands&lt;/strong&gt;.
  Because there will be no mechanism to make &quot;&lt;code&gt;git add -u&lt;/code&gt;&quot; behave as if &quot;&lt;code&gt;git add -u .&lt;/code&gt;&quot;, it is important for those who are used to &quot;&lt;code&gt;git add -u&lt;/code&gt;&quot; (without pathspec) updating the index only for paths in the current subdirectory to start training their fingers to explicitly say &quot;&lt;code&gt;git add -u .&lt;/code&gt;&quot; when they mean it before Git 2.0 comes.</source>
          <target state="translated">이러한 명령은 &lt;strong&gt;&quot; &lt;code&gt;git commit -a&lt;/code&gt; &quot;및 기타 명령과 일관성을 유지하기 위해 Git 2.0의 전체 트리에서 작동합니다&lt;/strong&gt; . &quot; &lt;code&gt;git add -u&lt;/code&gt; &quot;를 &quot; git add -u &quot;처럼 동작하게하는 메커니즘이 없기 때문에 경로에 대해서만 인덱스를 업데이트하는 &quot; &lt;code&gt;git add -u&lt;/code&gt; &quot;(pathspec없이)에 익숙한 사람들에게 중요합니다. 현재 서브 디렉토리에서 Git 2.0이 나오기 전에 &quot; &lt;code&gt;git add -u .&lt;/code&gt; &quot;라고 명시 적으로 말하기 위해 손가락 훈련을 시작 하십시오 .</target>
        </trans-unit>
        <trans-unit id="945c4fe70715f90e18c0575c7aad5f14240c3201" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;.&lt;/code&gt; is added that limits the scope of the update to the directory you are currently in, as per the &lt;a href=&quot;https://git-scm.com/docs/git-add#git-add--A&quot;&gt;Git documentation&lt;/a&gt;</source>
          <target state="translated">때 &lt;a href=&quot;https://git-scm.com/docs/git-add#git-add--A&quot;&gt;Git 문서에&lt;/a&gt; 따라 현재의 디렉토리로 업데이트 범위를 제한하는 추가</target>
        </trans-unit>
        <trans-unit id="48341cfb44705c906cf38d92c052ea8f37022178" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;https://github.com/git/git/blob/f99a38c0121456822f8a9dfb7928eefceaa98201/Documentation/RelNotes/2.0.0.txt#L32-L36&quot;&gt;&lt;strong&gt;Git 2.0, &lt;code&gt;git add -A&lt;/code&gt; is default: &lt;code&gt;git add .&lt;/code&gt; equals &lt;code&gt;git add -A .&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/git/git/blob/f99a38c0121456822f8a9dfb7928eefceaa98201/Documentation/RelNotes/2.0.0.txt#L32-L36&quot;&gt;&lt;strong&gt;Git 2.0에서는 &lt;code&gt;git add -A&lt;/code&gt; 가 기본값입니다 : &lt;code&gt;git add .&lt;/code&gt; &lt;/strong&gt;&lt;/a&gt; &lt;strong&gt; &lt;code&gt;git add -A .&lt;/code&gt; 와 같습니다 .&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="15a7d031bdb4b85e8d2f61c9063d9a2e8c1a2bdb" translate="yes" xml:space="preserve">
          <source>Without the dot, add all files in the project regardless of the current directory.</source>
          <target state="translated">점이 없으면 현재 디렉토리에 관계없이 프로젝트의 모든 파일을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="990a0914d9e0f86470562025357e995fe617bed3" translate="yes" xml:space="preserve">
          <source>You can say &quot;&lt;code&gt;git add --ignore-removal &amp;lt;path&amp;gt;&lt;/code&gt;&quot; to
  add only added or modified paths in &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt;, if you really want to.</source>
          <target state="translated">&quot; &lt;code&gt;git add --ignore-removal &amp;lt;path&amp;gt;&lt;/code&gt; &quot;라고 말하면 실제로 원하는 경우 &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; 에 추가되거나 수정 된 경로 만 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e250892c1910d08f6fe65e9230024a29e81383a5" translate="yes" xml:space="preserve">
          <source>You can test the differences out with something like this (note that for Git version 2.x your output for &lt;code&gt;git add .&lt;/code&gt;&lt;code&gt;git status&lt;/code&gt;&lt;strong&gt;will&lt;/strong&gt; be different):</source>
          <target state="translated">다음과 같이 차이점을 테스트 할 수 있습니다 (Git 버전 2.x의 경우 &lt;code&gt;git add .&lt;/code&gt; 출력 결과는 다릅니다 . &lt;code&gt;git status&lt;/code&gt; &lt;strong&gt;가&lt;/strong&gt; 다릅니다).</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
