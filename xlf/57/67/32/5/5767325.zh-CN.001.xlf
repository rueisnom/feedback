<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/5767325">
    <body>
      <group id="5767325">
        <trans-unit id="0c26d1335bfdb0a9a870062ffeefc2e30e985324" translate="yes" xml:space="preserve">
          <source>(originally posted at &lt;a href=&quot;https://flaviocopes.com/how-to-remove-item-from-array/&quot;&gt;https://flaviocopes.com/how-to-remove-item-from-array/&lt;/a&gt;)</source>
          <target state="translated">（最初发布在&lt;a href=&quot;https://flaviocopes.com/how-to-remove-item-from-array/&quot;&gt;https://flaviocopes.com/how-to-remove-item-from-array/&lt;/a&gt; ）</target>
        </trans-unit>
        <trans-unit id="20c7a03b4b677a239898b7a143f487b7ce5a289d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://underscorejs.org/#without&quot;&gt;Underscore.js&lt;/a&gt; can be used to solve issues with multiple browsers. It uses in-build browser methods if present. If they are absent like in the case of older Internet&amp;nbsp;Explorer versions it uses its own custom methods.</source>
          <target state="translated">&lt;a href=&quot;http://underscorejs.org/#without&quot;&gt;Underscore.js&lt;/a&gt;可用于解决多个浏览器的问题。 如果存在，它将使用内置浏览器方法。 如果缺少它们（例如在较旧的Internet Explorer版本中），则使用其自己的自定义方法。</target>
        </trans-unit>
        <trans-unit id="c79ad5441320844b76631a15e17f3556c09229fc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://gist.github.com/zykadelic/5069236&quot;&gt;This gist here&lt;/a&gt; will solve your problem, and also deletes all occurrences of the argument instead of just 1 (or a specified value).</source>
          <target state="translated">&lt;a href=&quot;https://gist.github.com/zykadelic/5069236&quot;&gt;这里的要点&lt;/a&gt;将解决您的问题，并删除所有出现的参数，而不仅仅是1（或指定值）。</target>
        </trans-unit>
        <trans-unit id="611f858aa14bf07213924f276e7edb39ab092c59" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;slice()&lt;/code&gt; creates a new array with the indexes it receives. We simply create a new array, from start to the index we want to remove, and concatenate another array from the first position following the one we removed to the end of the array.</source>
          <target state="translated">&lt;code&gt;slice()&lt;/code&gt; 使用接收到的索引创建一个新数组。 我们只需创建一个新数组，即从开始到要删除的索引，然后将第一个数组从我们删除的数组之后的第一个位置连接到数组的末尾。</target>
        </trans-unit>
        <trans-unit id="ab82a2126411b9a66d7a7c357ca0f03f0c8a83de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;splice()&lt;/code&gt; (not to be confused with &lt;code&gt;slice()&lt;/code&gt;) mutates the original array, and should be avoided.</source>
          <target state="translated">&lt;code&gt;splice()&lt;/code&gt; （不要与 &lt;code&gt;slice()&lt;/code&gt; 混淆）会使原始数组发生突变，应避免使用。</target>
        </trans-unit>
        <trans-unit id="7a91b31039db5af6a19da64305b8acb0cdd87060" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE&lt;/em&gt; : If &quot;stringToRemoveFromArray&quot; is not located your in array, this will remove last element of array.</source>
          <target state="translated">&lt;em&gt;注意&lt;/em&gt; ：如果&amp;ldquo; stringToRemoveFromArray&amp;rdquo;不在数组中，则这将删除数组的最后一个元素。</target>
        </trans-unit>
        <trans-unit id="892178def7455cb09728ee3cb3fb0028d5065df3" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;indexof&lt;/em&gt; is approximately 10x slower than &lt;em&gt;move&lt;/em&gt;. Even if improved by removing the call to &lt;code&gt;indexOf&lt;/code&gt; in &lt;em&gt;splice&lt;/em&gt; it performs much worse than &lt;em&gt;move&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;indexof&lt;/em&gt;大约比&lt;em&gt;move&lt;/em&gt;慢10倍。 即使通过删除对&lt;em&gt;splice中的&lt;/em&gt; &lt;code&gt;indexOf&lt;/code&gt; 的调用进行了改进，它的性能也比&lt;em&gt;move&lt;/em&gt;差。</target>
        </trans-unit>
        <trans-unit id="8988123bae865b1300ce747e2d3850a0d9f80957" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;stringToRemoveFromArray&lt;/em&gt; : the string you want removed and 1 is the amount of elements you want to remove.</source>
          <target state="translated">&lt;em&gt;stringToRemoveFromArray&lt;/em&gt; ：要删除的字符串，1是要删除的元素数量。</target>
        </trans-unit>
        <trans-unit id="5d22c8d0967243a99bfdfa8445901cf449cae21f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;theArray&lt;/em&gt; : the array you want to remove something particular from</source>
          <target state="translated">&lt;em&gt;theArray&lt;/em&gt; ：要从中删除特定内容的数组</target>
        </trans-unit>
        <trans-unit id="74393367bc2c5b71b2d83967b6fab3e785a72270" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ES6 &amp;amp; without mutation:  (October 2016)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ES6且无突变：（2016年10月）&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="28bcb5a317964f025eef45656b431ea3cf298091" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Find and move (move):&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;查找并移动（移动）：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="076310371e6397adb469f1848e43527347fb1f5a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Hint&lt;/strong&gt;: please use an arrow function for filter callback unless you will get an empty array.</source>
          <target state="translated">&lt;strong&gt;提示&lt;/strong&gt; ：请使用箭头函数进行过滤器回调，除非您得到一个空数组。</target>
        </trans-unit>
        <trans-unit id="609b01c38b98b33ae1916781ecc012571ca8c1d8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;IMPORTANT&lt;/strong&gt; &quot;array.includes(...)&quot; function is not supported in Internet&amp;nbsp;Explorer at all, Chrome before 47 version, Firefox before 43 version, Safari before 9 version, and Edge before 14 version so &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes#Polyfill&quot;&gt;&lt;strong&gt;here is polyfill from Mozilla&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;重要提示&lt;/strong&gt; &amp;ldquo; array.includes（...）&amp;rdquo;功能在Internet Explorer，47之前的Chrome，43之前的Firefox，9之前的Safari和14之前的Edge中完全不支持，因此&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes#Polyfill&quot;&gt;&lt;strong&gt;这里是Mozilla的polyfill&lt;/strong&gt;&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="9de13012f59ad740527b2d1c338c09d2fa7a0e37" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;IMPORTANT&lt;/strong&gt; ECMAScript&amp;nbsp;6 &quot;() =&amp;gt; {}&quot; arrow function syntax is not supported in Internet&amp;nbsp;Explorer at all, Chrome before 45 version, Firefox before 22 version, and Safari before 10 version. To use ECMAScript&amp;nbsp;6 syntax in old browsers you can use &lt;a href=&quot;http://babeljs.io&quot;&gt;BabelJS&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;重要说明&lt;/strong&gt; ECMAScript 6的箭头函数语法完全不支持Internet Explorer，45之前的Chrome，22之前的Firefox和10之前的Safari。 要在旧的浏览器中使用ECMAScript 6语法，可以使用&lt;a href=&quot;http://babeljs.io&quot;&gt;BabelJS&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="88c307e9733bc20de3106e3cee5b55ca39bd7c72" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE:&lt;/strong&gt; it will update the given array, and return the affected rows.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;它将更新给定的数组，并返回受影响的行。</target>
        </trans-unit>
        <trans-unit id="deeb6d90d8ca244318bf1c9f0eb580d9609c129f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;OK,&lt;/strong&gt; for example you have the array below:</source>
          <target state="translated">&lt;strong&gt;好的，&lt;/strong&gt;例如，您具有以下数组：</target>
        </trans-unit>
        <trans-unit id="537bd903ff4c8e8f4da77846c6c743b57e4c6bea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Prototype method&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;原型法&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c2a6eb120ac5d954b7aa47baca4f35f487d47fe8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reference&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Reference&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="eee1c67bc9de7a8138d0f79bc463c5e056713e42" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Removing a particular element/string from an array can be done in a one-liner:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;从数组中删除特定的元素/字符串可以用一种方法完成：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9fe3363b4b4ec9ef2c31a15f451244a7adfb38f9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Results for array with 1.000.000 elements&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;包含1.000.000元素的数组的结果&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b16b2cedffbc2b7501c47a182bc43dca4a810f23" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Results for array with 10 elements&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;包含10个元素的数组的结果&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d4f9f56e9b68e077ca52dc3c48df130009f98852" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Run-times on nodejs for array with 1000 elements (average over 10000 runs):&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;在具有1000个元素的数组的nodejs上的运行时（平均运行10000次以上）：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="060b6b12ebe76d9863043cfb834041f940f23a02" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Stand-alone function&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;单机功能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4e954dff295697b281cc36c09cba48ef320dd588" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Try it yourself in BabelJS :)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;在BabelJS中自己尝试：)&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1b6578257f4bc0dd640490f50dead6b466dd6e87" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Update:&lt;/strong&gt; This method is recommended only if you cannot use ECMAScript 2015 (formerly known as ES6). If you can use it, other answers here provide much neater implementations.</source>
          <target state="translated">&lt;strong&gt;更新：&lt;/strong&gt;仅当您无法使用ECMAScript 2015（以前称为ES6）时，才建议使用此方法。 如果可以使用它，这里的其他答案将提供更整洁的实现。</target>
        </trans-unit>
        <trans-unit id="8eae0c2fd6aa8f39724e972da8dbfcc4b0341cb6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Use &lt;code&gt;indexOf&lt;/code&gt; and &lt;code&gt;splice&lt;/code&gt; (indexof):&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;使用 &lt;code&gt;indexOf&lt;/code&gt; 和 &lt;code&gt;splice&lt;/code&gt; （indexof）：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0d1fbe33957ad7bbde5209e065896287f2cb3d27" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Use only &lt;code&gt;splice&lt;/code&gt; (splice):&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;仅使用 &lt;code&gt;splice&lt;/code&gt; （splice）：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fdeffaeb0c1e585a81d090320b9ab7016c324272" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;delete&lt;/strong&gt;: &lt;code&gt;delete anArray[index];&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;delete&lt;/strong&gt; ： &lt;code&gt;delete anArray[index];&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="53ba754b3525a6a5261703a386db52a68312485f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;indexOf&lt;/strong&gt; :</source>
          <target state="translated">&lt;strong&gt;indexOf&lt;/strong&gt; ：</target>
        </trans-unit>
        <trans-unit id="644952719b332e9874e9cc1233c36f266cd932ca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;splice()&lt;/strong&gt;: &lt;code&gt;anArray.splice(index, 1);&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;splice（）&lt;/strong&gt; ： &lt;code&gt;anArray.splice(index, 1);&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="83bfc39e9a37dd6b6117105209aeac8ab281531a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;splice&lt;/strong&gt; :</source>
          <target state="translated">&lt;strong&gt;接头&lt;/strong&gt; ：</target>
        </trans-unit>
        <trans-unit id="c36e3a30f2d6a32cd5d72b825bdbbe142dde1e5e" translate="yes" xml:space="preserve">
          <source>A friend was having issues in &lt;a href=&quot;http://en.wikipedia.org/wiki/Internet_Explorer_8&quot;&gt;Internet&amp;nbsp;Explorer&amp;nbsp;8&lt;/a&gt; and showed me what he did. I told him it was wrong, and he told me he got the answer here. The current top answer will not work in all browsers (Internet&amp;nbsp;Explorer&amp;nbsp;8 for example), and it will only remove the first occurrence of the item.</source>
          <target state="translated">一个朋友在&lt;a href=&quot;http://en.wikipedia.org/wiki/Internet_Explorer_8&quot;&gt;Internet Explorer 8中&lt;/a&gt;遇到问题，向我展示了他的工作。 我告诉他这是错误的，他告诉我他在这里得到了答案。 当前的最佳答案不能在所有浏览器（例如Internet Explorer 8）中都起作用，并且只会删除该项目的第一个匹配项。</target>
        </trans-unit>
        <trans-unit id="5758b12998637b11f8929c6f80e63cd2fdb0c5dd" translate="yes" xml:space="preserve">
          <source>A more modern, &lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015&quot;&gt;ECMAScript 2015&lt;/a&gt; (formerly known as Harmony or ES&amp;nbsp;6) approach. Given:</source>
          <target state="translated">一种更现代的&lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015&quot;&gt;ECMAScript 2015&lt;/a&gt; （以前称为Harmony或ES 6）方法。 鉴于：</target>
        </trans-unit>
        <trans-unit id="f0b341371c6565d7f795ca026bfdd9eab34d1aac" translate="yes" xml:space="preserve">
          <source>A simple example to remove elements from array (from the website):</source>
          <target state="translated">一个简单的例子,从数组中删除元素(来自网站)。</target>
        </trans-unit>
        <trans-unit id="c2e29fc81b754b51a7bd4216b9db9005b928d64e" translate="yes" xml:space="preserve">
          <source>All the method described &lt;strong&gt;do not mutate the original array&lt;/strong&gt;, and instead create a new one.</source>
          <target state="translated">所描述的所有方法&lt;strong&gt;都不会改变原始数组&lt;/strong&gt; ，而是创建一个新&lt;strong&gt;数组&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="9b142d58affd0fb34a0888407fb2180dddcd912a" translate="yes" xml:space="preserve">
          <source>Also there are third-party libraries which do help you to do this, like Lodash or Underscore. For more information, look at lodash _.pull, _.pullAt or _.without.</source>
          <target state="translated">还有一些第三方的库可以帮助你完成这个任务,比如Lodash或Underscore。更多信息,请查看 lodash _.pull,_.pullAt 或 _.without。</target>
        </trans-unit>
        <trans-unit id="00717cffb29a457925f076b9a416f04196087b6a" translate="yes" xml:space="preserve">
          <source>An additional advantage of this method is that you can remove multiple items</source>
          <target state="translated">这种方法的另一个好处是,你可以删除多个项目</target>
        </trans-unit>
        <trans-unit id="8ee0b0a58a96e032a63a2d3d111c5ac52a5dcd76" translate="yes" xml:space="preserve">
          <source>And if you don't know the index of the item, you can use &lt;code&gt;array.indexOf(item)&lt;/code&gt; to get it (in a &lt;code&gt;if()&lt;/code&gt; to get one item or in a &lt;code&gt;while()&lt;/code&gt; to get all of them). &lt;code&gt;array.indexOf(item)&lt;/code&gt; returns either the index or -1 if not found.&amp;nbsp;</source>
          <target state="translated">而且，如果您不知道该项目的索引，则可以使用 &lt;code&gt;array.indexOf(item)&lt;/code&gt; 来获取它（在 &lt;code&gt;if()&lt;/code&gt; 中获得一个项目， &lt;code&gt;while()&lt;/code&gt; 在while（）中获得所有它们）。 &lt;code&gt;array.indexOf(item)&lt;/code&gt; 返回索引或-1（如果找不到）。</target>
        </trans-unit>
        <trans-unit id="270eff8f3ba7dc2ba8c56178ef7042dc932e6f85" translate="yes" xml:space="preserve">
          <source>And if you need the value of that item, you can just store the returned array's element:</source>
          <target state="translated">而如果你需要那个项的值,你可以直接存储返回数组的元素。</target>
        </trans-unit>
        <trans-unit id="7ebe39c21a8b58a31651c3a1906f84f5a963136b" translate="yes" xml:space="preserve">
          <source>And we want to delete number 4. You can simply use the below code:</source>
          <target state="translated">而我们要删除4号。你可以简单地使用下面的代码。</target>
        </trans-unit>
        <trans-unit id="afed19ab01cf9d1460611647f16032e1841d5acd" translate="yes" xml:space="preserve">
          <source>Array.prototype.includes</source>
          <target state="translated">Array.prototype.includes</target>
        </trans-unit>
        <trans-unit id="d205412e1013ba19f48e0e081ee7d15df8b656a4" translate="yes" xml:space="preserve">
          <source>Avoid mutating the original array</source>
          <target state="translated">避免突变原始数组</target>
        </trans-unit>
        <trans-unit id="7a4a66d748818d54d453c33cbac1fc30907786df" translate="yes" xml:space="preserve">
          <source>Based on all the answers which were mainly correct and taking into account the best practices suggested (especially not using Array.prototype directly), I came up with the below code:</source>
          <target state="translated">根据所有的答案主要是正确的,并考虑到建议的最佳实践(特别是不要直接使用Array.prototype),我得出了以下代码。</target>
        </trans-unit>
        <trans-unit id="752d68ce8018e6b7ad5769b04915aea42d6ee027" translate="yes" xml:space="preserve">
          <source>Be careful when you use delete for an array. It is good for deleting attributes of objects, but not so good for arrays. It is better to use &lt;code&gt;splice&lt;/code&gt; for arrays.</source>
          <target state="translated">对数组使用delete时要小心。 这对删除对象的属性很有用，但对数组却不太好。 最好对数组使用 &lt;code&gt;splice&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="67c0a1560b00da0823669062c515c2265a5ee5ef" translate="yes" xml:space="preserve">
          <source>But how about if you have the below array instead with a few [5]s in the array?</source>
          <target state="translated">但是,如果你用下面的数组来代替数组中的几个[5]s如何?</target>
        </trans-unit>
        <trans-unit id="636238f4494666df4527913fe2f601c1ca964feb" translate="yes" xml:space="preserve">
          <source>But if you want to delete a special item like &lt;code&gt;3&lt;/code&gt; and you don't know its index, do like below:</source>
          <target state="translated">但是，如果您要删除特殊项目（例如 &lt;code&gt;3&lt;/code&gt; )并且不知道其索引，请执行以下操作：</target>
        </trans-unit>
        <trans-unit id="9a3d31e2d9a524e74f6a3ee7975b24b4bf90ccd0" translate="yes" xml:space="preserve">
          <source>But the main reason I am posting this is to warn users against the alternative implementation suggested in the comments on that page (Dec 14, 2007):</source>
          <target state="translated">但是,我发布这篇文章的主要原因是为了警告用户不要使用该页面上的评论中建议的替代方案(2007年12月14日)。</target>
        </trans-unit>
        <trans-unit id="cb87061cb61c9dbe3608367c7bfb2df479657ca6" translate="yes" xml:space="preserve">
          <source>By index</source>
          <target state="translated">按索引</target>
        </trans-unit>
        <trans-unit id="6ee757280debcea7c9b487d87c4330ed2ff91427" translate="yes" xml:space="preserve">
          <source>By value</source>
          <target state="translated">按价值计算</target>
        </trans-unit>
        <trans-unit id="4808a232c259d694412a4e631f80e6995e0208a5" translate="yes" xml:space="preserve">
          <source>Call this function</source>
          <target state="translated">调用此函数</target>
        </trans-unit>
        <trans-unit id="5ce779ea8f657c1e9d48bc04cbf031ecd7bc9c0f" translate="yes" xml:space="preserve">
          <source>Check out this code. It works in every &lt;strong&gt;major browser&lt;/strong&gt;.</source>
          <target state="translated">查看此代码。 它适用于所有&lt;strong&gt;主流浏览器&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="a642c75da074a27c74e5e37cede4cdbecddc6d99" translate="yes" xml:space="preserve">
          <source>Comparison for browsers: Chrome v78.0.0, Safari v13.0.4, and Firefox v71.0.0</source>
          <target state="translated">浏览器的比较。浏览器比较:Chrome v78.0.0.0、Safari v13.0.4和Firefox v71.0.0</target>
        </trans-unit>
        <trans-unit id="bf1be2b7ad07bae2fe92475d10173eb638774def" translate="yes" xml:space="preserve">
          <source>Definition</source>
          <target state="translated">Definition</target>
        </trans-unit>
        <trans-unit id="dc3decbb93847518f1a049dcf49d0d7c6560bcc6" translate="yes" xml:space="preserve">
          <source>Details</source>
          <target state="translated">Details</target>
        </trans-unit>
        <trans-unit id="102af0498fc1a0fcc3c38d1f6e784f8f1d5131b4" translate="yes" xml:space="preserve">
          <source>Do it immutable (original array stay unchanged)</source>
          <target state="translated">做到一成不变(原来的阵列保持不变</target>
        </trans-unit>
        <trans-unit id="b0ef19e663785033e9ef614ab9b9239c8b35f5b5" translate="yes" xml:space="preserve">
          <source>Do it simple, intuitive and explicit (&lt;a href=&quot;https://en.wikipedia.org/wiki/Occam%27s_razor&quot;&gt;Occam's razor&lt;/a&gt;)</source>
          <target state="translated">做到简单，直观和明确（ &lt;a href=&quot;https://en.wikipedia.org/wiki/Occam%27s_razor&quot;&gt;Occam的剃刀&lt;/a&gt; ）</target>
        </trans-unit>
        <trans-unit id="3490e6ac5ef084f31168e6d30889da48f49ffa83" translate="yes" xml:space="preserve">
          <source>Do it with standard JavaScript functions, if your browser doesn't support them - &lt;strong&gt;use polyfill&lt;/strong&gt;</source>
          <target state="translated">如果您的浏览器不支持标准JavaScript函数，请执行此操作- &lt;strong&gt;使用polyfill&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d166af755baa9f234415014c48b3ed88460e376c" translate="yes" xml:space="preserve">
          <source>E.g. if you have an object with an Id field and you want the object removed from an array:</source>
          <target state="translated">例如,如果你有一个带有Id字段的对象,你想把这个对象从数组中删除。</target>
        </trans-unit>
        <trans-unit id="eb211e7a732a17308be1f309bdff241d6a90881b" translate="yes" xml:space="preserve">
          <source>Edited on 2016 October</source>
          <target state="translated">编辑日期:2016年10月</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">扩展片段</target>
        </trans-unit>
        <trans-unit id="30b0e12c2c94f47b68fa5ccb20476a6b70623235" translate="yes" xml:space="preserve">
          <source>Find the &lt;code&gt;index&lt;/code&gt; of the array element you want to remove using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf&quot;&gt;&lt;code&gt;indexOf&lt;/code&gt;&lt;/a&gt;, and then remove that index with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice&quot;&gt;&lt;code&gt;splice&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">使用&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf&quot;&gt; &lt;code&gt;indexOf&lt;/code&gt; &lt;/a&gt;查找要删除的数组元素的 &lt;code&gt;index&lt;/code&gt; ，然后使用&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice&quot;&gt; &lt;code&gt;splice&lt;/code&gt; &lt;/a&gt;删除该索引。</target>
        </trans-unit>
        <trans-unit id="cf873823acef1af3ee771a26f0cdf28493cf8f42" translate="yes" xml:space="preserve">
          <source>For further understanding you can read the MDN documentation on &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter&quot;&gt;Array.filter&lt;/a&gt;.</source>
          <target state="translated">为了进一步理解，您可以阅读&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter&quot;&gt;Array.filter&lt;/a&gt;上的MDN文档。</target>
        </trans-unit>
        <trans-unit id="7f2700ad4c98cd8039e72339d830fef9f1ae90bb" translate="yes" xml:space="preserve">
          <source>Functional composition</source>
          <target state="translated">功能组成</target>
        </trans-unit>
        <trans-unit id="be5d89754199fe4effe4dd3576c2f17fa6dcc9b8" translate="yes" xml:space="preserve">
          <source>Here are a few ways to &lt;strong&gt;remove an item from an array using JavaScript&lt;/strong&gt;.</source>
          <target state="translated">这是&lt;strong&gt;使用JavaScript从数组中删除项目&lt;/strong&gt;的几种方法。</target>
        </trans-unit>
        <trans-unit id="082f68197b52d18635b26ed39d4617bf4ee21c9d" translate="yes" xml:space="preserve">
          <source>How can I remove a specific item from an array</source>
          <target state="translated">如何从数组中删除一个特定的项目?</target>
        </trans-unit>
        <trans-unit id="8e090d332d9dabde6e435eafdb66e7b93d430d7f" translate="yes" xml:space="preserve">
          <source>How to use:</source>
          <target state="translated">如何使用。</target>
        </trans-unit>
        <trans-unit id="5b4032277da1069acfbec32fadd887ce6ff0eb2e" translate="yes" xml:space="preserve">
          <source>I am currently writing a blog post in which I have benchmarked several solutions for Array without problem and compared the time it takes to run. I will update this answer with the link once I finish that post. Just to let you know, I have compared the above against lodash's without and in case the browser supports &lt;code&gt;Map&lt;/code&gt;, it beats lodash! Notice that I am not using &lt;code&gt;Array.prototype.indexOf&lt;/code&gt; or &lt;code&gt;Array.prototype.includes&lt;/code&gt; as wrapping the exlcudeValues in a &lt;code&gt;Map&lt;/code&gt; or &lt;code&gt;Object&lt;/code&gt; makes querying faster!</source>
          <target state="translated">我目前正在写一篇博客文章，其中我毫无问题地对Array的几种解决方案进行了基准测试，并比较了运行时间。 完成该帖子后，我将使用链接更新此答案。 为了让您知道，我将上述内容与不带lodash的产品进行了比较，以防浏览器支持 &lt;code&gt;Map&lt;/code&gt; ，它击败了lodash！ 请注意，我没有使用 &lt;code&gt;Array.prototype.indexOf&lt;/code&gt; 或 &lt;code&gt;Array.prototype.includes&lt;/code&gt; ,因为将exlcudeValues包装在 &lt;code&gt;Map&lt;/code&gt; 或 &lt;code&gt;Object&lt;/code&gt; 中可以使查询更快！</target>
        </trans-unit>
        <trans-unit id="927b786a9b3b8d90436a3a819d7992491d63fccb" translate="yes" xml:space="preserve">
          <source>I don't know how you are expecting &lt;code&gt;array.remove(int)&lt;/code&gt; to behave. There are three possibilities I can think of that you might want.</source>
          <target state="translated">我不知道您期望 &lt;code&gt;array.remove(int)&lt;/code&gt; 表现如何。 我可以想到您可能想要的三种可能性。</target>
        </trans-unit>
        <trans-unit id="2fb2a8dc2409ddc56e72d778923d524f41705f2b" translate="yes" xml:space="preserve">
          <source>I have an array of numbers, and I'm using the &lt;code&gt;.push()&lt;/code&gt; method to add elements to it.</source>
          <target state="translated">我有一个数字数组，并且正在使用 &lt;code&gt;.push()&lt;/code&gt; 方法向其中添加元素。</target>
        </trans-unit>
        <trans-unit id="6ec608995ebf679f514ce2f47d8154853d69f60d" translate="yes" xml:space="preserve">
          <source>I have to use &lt;em&gt;core&lt;/em&gt; JavaScript - frameworks are not allowed.</source>
          <target state="translated">我必须使用&lt;em&gt;核心&lt;/em&gt; JavaScript-不允许使用框架。</target>
        </trans-unit>
        <trans-unit id="b91ef97accd928c1d49c2eafd10e5535d9f2567d" translate="yes" xml:space="preserve">
          <source>I know there are a lot of answers already, but many of them seem to over complicate the problem.  Here is a simple, recursive way of removing all instances of a key - calls self until index isn't found.  Yes, it only works in browsers with &lt;code&gt;indexOf&lt;/code&gt;, but it's simple and can be easily polyfilled.</source>
          <target state="translated">我知道已经有很多答案了，但是其中许多似乎使问题变得过于复杂。 这是删除键的所有实例的一种简单的递归方法-调用self直到找不到索引。 是的，它仅在带有 &lt;code&gt;indexOf&lt;/code&gt; 的浏览器中有效，但是它很简单并且可以轻松地进行填充。</target>
        </trans-unit>
        <trans-unit id="99f8ef90039d331cf04a0245f8741bad896c1816" translate="yes" xml:space="preserve">
          <source>I want to answer based on &lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015&quot;&gt;ECMAScript&amp;nbsp;6&lt;/a&gt;. Assume, you have an array like below:</source>
          <target state="translated">我想根据&lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015&quot;&gt;ECMAScript 6&lt;/a&gt;回答。 假设您有一个如下数组：</target>
        </trans-unit>
        <trans-unit id="f22753c9c42b1a1d3f482dec1414a40ee592735c" translate="yes" xml:space="preserve">
          <source>I'm pretty new to JavaScript and needed this functionality. I merely wrote this:</source>
          <target state="translated">我对JavaScript相当陌生,需要这个功能。我只是写了这个。</target>
        </trans-unit>
        <trans-unit id="1181f5b3e98c311ad4f68627ced64b09d807b95c" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;https://github.com/tc39/proposal-bind-operator&quot;&gt;&quot;This-Binding Syntax&quot;&lt;/a&gt; proposal is ever accepted, you'll be able to do this:</source>
          <target state="translated">如果&lt;a href=&quot;https://github.com/tc39/proposal-bind-operator&quot;&gt;&amp;ldquo; This-Binding Syntax&amp;rdquo;&lt;/a&gt;提议已被接受，则可以执行以下操作：</target>
        </trans-unit>
        <trans-unit id="fe98cb810962b5edccd9ad617768f8f2a4083258" translate="yes" xml:space="preserve">
          <source>If you are forced to use &lt;code&gt;delete&lt;/code&gt; for some reason, then you should use &lt;a href=&quot;https://stackoverflow.com/questions/9329446/for-each-over-an-array-in-javascript&quot;&gt;&lt;code&gt;for each&lt;/code&gt;&lt;/a&gt; loops when you need to loop through arrays. As the matter of fact, always avoid using indexed &lt;code&gt;for&lt;/code&gt; loops, if possible. That way the code would be more robust and less prone to problems with indexes.</source>
          <target state="translated">如果由于某种原因而被迫使用 &lt;code&gt;delete&lt;/code&gt; ，那么当您需要遍历数组时，应该&lt;a href=&quot;https://stackoverflow.com/questions/9329446/for-each-over-an-array-in-javascript&quot;&gt; &lt;code&gt;for each&lt;/code&gt; &lt;/a&gt;循环使用delete 。 实际上，如果可能，请始终避免使用索引 &lt;code&gt;for&lt;/code&gt; 循环。 这样，代码将更健壮，并且不易出现索引问题。</target>
        </trans-unit>
        <trans-unit id="f3372c2f5ce756c0a85bf1ae13434ef583a0b420" translate="yes" xml:space="preserve">
          <source>If you are reusing this function, you write a reusable function which will be attached to the &lt;em&gt;native&lt;/em&gt; array function like below:</source>
          <target state="translated">如果要重用此函数，请编写一个可重用的函数，该函数将附加到本&lt;em&gt;机&lt;/em&gt;数组函数，如下所示：</target>
        </trans-unit>
        <trans-unit id="bc4f3d4d9d3fd7908808745b03af3822dc8c23e1" translate="yes" xml:space="preserve">
          <source>If you do want an empty slot, delete is fine:</source>
          <target state="translated">如果你真的想要一个空位,删除也可以。</target>
        </trans-unit>
        <trans-unit id="fbfd1cb87dd44cdccdafdf3698d6ea6358bfdbaa" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t want to extend a global object, you can do something like the following, instead:</source>
          <target state="translated">如果您不想扩展全局对象，则可以执行以下操作：</target>
        </trans-unit>
        <trans-unit id="5942963f1ab27ee6bb5d5f5a0b74d4b5291141b2" translate="yes" xml:space="preserve">
          <source>If you don't, you should use the &lt;a href=&quot;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice&quot;&gt;splice&lt;/a&gt; method:</source>
          <target state="translated">如果不这样做，则应使用&lt;a href=&quot;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice&quot;&gt;splice&lt;/a&gt;方法：</target>
        </trans-unit>
        <trans-unit id="9572aa6fb591d1ba9a758c5dcffa6d3d5f13f53f" translate="yes" xml:space="preserve">
          <source>If you have access to newer Ecmascript versions on your client's computers (WARNING, may not work on older stations):</source>
          <target state="translated">如果您的客户的电脑上有较新的Ecmascript版本(警告,可能无法在旧站上运行)。</target>
        </trans-unit>
        <trans-unit id="7371d04296336bdc6cc86bc910a62bd92156f86f" translate="yes" xml:space="preserve">
          <source>If you have complex objects in the array you can use filters? 
In situations where $.inArray or array.splice is not as easy to use. Especially if the objects are perhaps shallow in the array.</source>
          <target state="translated">如果数组中的对象比较复杂,可以使用过滤器? 在$.inArray或array.splice的情况下,就没有那么好用了。尤其是当对象在数组中或许数组中的对象比较浅的时候。</target>
        </trans-unit>
        <trans-unit id="03661e4b8eeedca39fe42a165e0ff1f205706501" translate="yes" xml:space="preserve">
          <source>If you just want to make the element at index &lt;code&gt;i&lt;/code&gt; no longer exist, but you don't want the indexes of the other elements to change:</source>
          <target state="translated">如果只想使索引 &lt;code&gt;i&lt;/code&gt; 处的元素不再存在，但又不想更改其他元素的索引：</target>
        </trans-unit>
        <trans-unit id="6bebdca438b5d73432e1fa39809f57e0d61f8581" translate="yes" xml:space="preserve">
          <source>If you know the index of an item</source>
          <target state="translated">如果你知道一个项目的索引</target>
        </trans-unit>
        <trans-unit id="10e357536eb6c14e8daa988c5e9c2549670b880b" translate="yes" xml:space="preserve">
          <source>If you know the value</source>
          <target state="translated">如果你知道的价值</target>
        </trans-unit>
        <trans-unit id="4b30477bc084b9503454a9d63596c918f07bea32" translate="yes" xml:space="preserve">
          <source>If you want a new array with the deleted positions removed, you can always delete the specific element and filter out the array. It might need an extension of the &lt;a href=&quot;http://www.tutorialspoint.com/javascript/array_filter.htm&quot;&gt;array object&lt;/a&gt; for browsers that don't implement the filter method, but in the long term it's easier since all you do is this:</source>
          <target state="translated">如果要删除删除位置的新数组，则始终可以删除特定元素并过滤掉该数组。 对于未实现filter方法的浏览器，可能需要扩展&lt;a href=&quot;http://www.tutorialspoint.com/javascript/array_filter.htm&quot;&gt;array对象&lt;/a&gt; ，但是从长远来看，这很容易，因为您要做的就是：</target>
        </trans-unit>
        <trans-unit id="f73177c0ed0f47b2292c8281cec1b30bcc003d73" translate="yes" xml:space="preserve">
          <source>If you want to delete at a special index like &lt;code&gt;2&lt;/code&gt;, write the below code:</source>
          <target state="translated">如果要删除像 &lt;code&gt;2&lt;/code&gt; 这样的特殊索引，请编写以下代码：</target>
        </trans-unit>
        <trans-unit id="2e5d1d8d84d892f7295a13a744e6685cc8e63876" translate="yes" xml:space="preserve">
          <source>If you want to multiple values. Example:- 1,7,8</source>
          <target state="translated">如果你想要多个值。例如:-1,7,8</target>
        </trans-unit>
        <trans-unit id="3a6a212fba01ffed8f6fc4267775768fbbb30bed" translate="yes" xml:space="preserve">
          <source>If you want to remove an array value in an array. Example: [3,4,5]</source>
          <target state="translated">如果你想删除数组中的一个数组值。例子:[3,4,5][3,4,5]</target>
        </trans-unit>
        <trans-unit id="8b23b0bad0c2ead983b02550bf037747cf944928" translate="yes" xml:space="preserve">
          <source>If you want to remove every element with value &lt;code&gt;number&lt;/code&gt; from the array:</source>
          <target state="translated">如果要从数组中删除每个带有值 &lt;code&gt;number&lt;/code&gt; 元素：</target>
        </trans-unit>
        <trans-unit id="11c7cad7fbca387926792a22255bc6f88a7d7f1d" translate="yes" xml:space="preserve">
          <source>In Chrome the &lt;code&gt;array.splice&lt;/code&gt; (C) is the fastest in-place solution (the &lt;code&gt;delete&lt;/code&gt; (C) is similar fast - but it left an empty slot in the array (so it does not perform a 'full remove')). The &lt;code&gt;array.slice-splice&lt;/code&gt; (H) is the fastest immutable solution. The slowest is &lt;code&gt;array.filter&lt;/code&gt; (D and E). You can perform the test on your machine &lt;a href=&quot;https://jsperf.com/big-array-remove-element&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">在Chrome中， &lt;code&gt;array.splice&lt;/code&gt; （C）是最快的就地解决方案（ &lt;code&gt;delete&lt;/code&gt; （C）速度很快-但它在数组中留有空白位置（因此它不执行&amp;ldquo;完全删除&amp;rdquo;））。 &lt;code&gt;array.slice-splice&lt;/code&gt; （H）是最快的不可变解决方案。 最慢的是 &lt;code&gt;array.filter&lt;/code&gt; （D和E）。 您可以在&lt;a href=&quot;https://jsperf.com/big-array-remove-element&quot;&gt;此处&lt;/a&gt;在机器上执行测试。</target>
        </trans-unit>
        <trans-unit id="caf079bc0736886b51cf720bae37155f17dde8fc" translate="yes" xml:space="preserve">
          <source>In Chrome the &lt;code&gt;array.splice&lt;/code&gt; (C) is the fastest in-place solution. The &lt;code&gt;array.filter&lt;/code&gt; (D) is the fastest immutable solution. The slowest is &lt;code&gt;array.slice&lt;/code&gt; (F). You can perform the test on your machine &lt;a href=&quot;https://jsperf.com/small-array-remove-element&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">在Chrome中， &lt;code&gt;array.splice&lt;/code&gt; （C）是最快的就地解决方案。 &lt;code&gt;array.filter&lt;/code&gt; （D）是最快的不可变解决方案。 最慢的是 &lt;code&gt;array.slice&lt;/code&gt; （F）。 您可以在&lt;a href=&quot;https://jsperf.com/small-array-remove-element&quot;&gt;此处&lt;/a&gt;在机器上执行测试。</target>
        </trans-unit>
        <trans-unit id="e50e0d2f98661e18f47697909df261e2562aca3b" translate="yes" xml:space="preserve">
          <source>In case you want to do it in some order, you can use &lt;code&gt;array.pop()&lt;/code&gt; for the last one or &lt;code&gt;array.shift()&lt;/code&gt; for the first one (and both return the value of the item too).</source>
          <target state="translated">如果您想按某种顺序进行操作，则可以将 &lt;code&gt;array.pop()&lt;/code&gt; 用于最后一个，或者将 &lt;code&gt;array.shift()&lt;/code&gt; 用于第一个（并且两者也都返回该项的值）。</target>
        </trans-unit>
        <trans-unit id="88d94bafb139b60e6ad0c18bca1523e5097fc204" translate="yes" xml:space="preserve">
          <source>In tests I remove middle element from the array in different ways. The &lt;strong&gt;A, C&lt;/strong&gt; solutions are in-place. The &lt;strong&gt;B, D, E, F, G, H&lt;/strong&gt; solutions are immutable.</source>
          <target state="translated">在测试中，我以不同的方式从数组中删除了中间元素。 &lt;strong&gt;A，C&lt;/strong&gt;解决方案就位。 &lt;strong&gt;B，D，E，F，G，H&lt;/strong&gt;解决方案是不可变的。</target>
        </trans-unit>
        <trans-unit id="fa2a957836e3e3e965443e00d5b8014f957fd2d7" translate="yes" xml:space="preserve">
          <source>In this case, one good option is to use &lt;code&gt;filter()&lt;/code&gt;, which offers a more &lt;em&gt;declarative&lt;/em&gt; approach:</source>
          <target state="translated">在这种情况下，一个不错的选择是使用 &lt;code&gt;filter()&lt;/code&gt; ，它提供了一种更具&lt;em&gt;声明性的&lt;/em&gt;方法：</target>
        </trans-unit>
        <trans-unit id="498070503dedbcf580c4b4c58484bd91a1296236" translate="yes" xml:space="preserve">
          <source>In this code example I use &lt;strong&gt;&quot;array.filter(...)&quot;&lt;/strong&gt; function to remove unwanted items from an array. This function doesn't change the original array and creates a new one. If your browser doesn't support this function (e.g. Internet Explorer before version 9, or Firefox before version 1.5), consider using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter#Polyfill&quot;&gt;&lt;strong&gt;the filter polyfill from Mozilla&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">在此代码示例中，我使用&lt;strong&gt;&amp;ldquo; array.filter（...）&amp;rdquo;&lt;/strong&gt;函数从数组中删除不需要的项。 此函数不会更改原始数组，而是创建一个新数组。 如果您的浏览器不支持此功能（例如，版本9之前的Internet Explorer或版本1.5之前的Firefox），请考虑使用&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter#Polyfill&quot;&gt;&lt;strong&gt;Mozilla中的过滤器polyfill&lt;/strong&gt;&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="80818db9c412b0e73f689f5b35ec90056bf0f156" translate="yes" xml:space="preserve">
          <source>Includes supported browser is &lt;a href=&quot;https://www.w3schools.com/jsref/jsref_includes_array.asp&quot;&gt;link&lt;/a&gt;.</source>
          <target state="translated">包括受支持的浏览器是&lt;a href=&quot;https://www.w3schools.com/jsref/jsref_includes_array.asp&quot;&gt;link&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="a3b566523b6d44597530fd44e674307786fd43f6" translate="yes" xml:space="preserve">
          <source>Is there a simple way to remove a specific element from an array?</source>
          <target state="translated">有没有一种简单的方法可以从数组中删除特定元素?</target>
        </trans-unit>
        <trans-unit id="6d9faccbff79e531cf75ea60dafd6931c055c065" translate="yes" xml:space="preserve">
          <source>It depends on whether you want to keep an empty spot or not.</source>
          <target state="translated">就看你要不要留空位了。</target>
        </trans-unit>
        <trans-unit id="686571bd0f8f4510d5be45242cdd7f21b7d25fae" translate="yes" xml:space="preserve">
          <source>It loops through the array backwards (since indices and length will change as items are removed) and removes the item if it's found. It works in all browsers.</source>
          <target state="translated">它可以在数组中逆向循环(因为索引和长度会随着项的移除而改变),如果找到了,就会移除项。它在所有浏览器中都能正常工作。</target>
        </trans-unit>
        <trans-unit id="4f65363f7ff3162732e6955c472e3956fb50925b" translate="yes" xml:space="preserve">
          <source>It seems to work well at first, but through a painful process I discovered it fails when trying to remove the second to last element in an array. For example, if you have a 10-element array and you try to remove the 9th element with this:</source>
          <target state="translated">它一开始似乎很好用,但通过一个痛苦的过程,我发现当试图删除数组中的第二个到最后一个元素时,它就会失败。例如,如果你有一个10个元素的数组,你试图用这个方法来删除第9个元素。</target>
        </trans-unit>
        <trans-unit id="c5aa5f5ae0043ff28d03e1421f43352cc3a4915d" translate="yes" xml:space="preserve">
          <source>It should display &lt;code&gt;[1, 2, 3, 4, 6]&lt;/code&gt;.</source>
          <target state="translated">它应该显示 &lt;code&gt;[1, 2, 3, 4, 6]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="13c8f72d6490a322ee4ec3a3f6ba4f1da3965b80" translate="yes" xml:space="preserve">
          <source>Its always good practice to check if the element exists in your array first, before removing it.</source>
          <target state="translated">首先检查元素是否存在于你的数组中,然后再删除它。</target>
        </trans-unit>
        <trans-unit id="eb92a3c06243ace55e68e74a8ad80c70a428be40" translate="yes" xml:space="preserve">
          <source>John Resig &lt;a href=&quot;http://ejohn.org/blog/javascript-array-remove/&quot;&gt;posted a good implementation&lt;/a&gt;:</source>
          <target state="translated">John Resig &lt;a href=&quot;http://ejohn.org/blog/javascript-array-remove/&quot;&gt;发布了一个很好的实现&lt;/a&gt; ：</target>
        </trans-unit>
        <trans-unit id="83a8666e2fe0581a766f2f548db8c6082aad23b4" translate="yes" xml:space="preserve">
          <source>Keep in mind that when you use &lt;code&gt;delete&lt;/code&gt; for an array you could get wrong results for &lt;code&gt;anArray.length&lt;/code&gt;. In other words, &lt;code&gt;delete&lt;/code&gt; would remove the element, but it wouldn't update the value of length property.</source>
          <target state="translated">请记住，当对数组使用 &lt;code&gt;delete&lt;/code&gt; 时， &lt;code&gt;anArray.length&lt;/code&gt; 可能会得到错误的结果。 换句话说， &lt;code&gt;delete&lt;/code&gt; 会删除该元素，但不会更新length属性的值。</target>
        </trans-unit>
        <trans-unit id="7e90d8509520dead5bd5a5b859df180f1f691173" translate="yes" xml:space="preserve">
          <source>Let's find the simplest solution.</source>
          <target state="translated">让我们找到最简单的解决方案。</target>
        </trans-unit>
        <trans-unit id="4fe8642303776edd465667b801642d103c9ebf69" translate="yes" xml:space="preserve">
          <source>One method is to use &lt;code&gt;slice()&lt;/code&gt;:</source>
          <target state="translated">一种方法是使用 &lt;code&gt;slice()&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="fa81114985626064cd037702c8d3a5410af20899" translate="yes" xml:space="preserve">
          <source>Output - As expected.
[&quot;item1&quot;, &quot;item1&quot;]</source>
          <target state="translated">产出-如预期的那样。[&quot;项目1&quot;、&quot;项目1&quot;]</target>
        </trans-unit>
        <trans-unit id="e05424a323bcb65461ca7f73ba902a8cd6e1aef2" translate="yes" xml:space="preserve">
          <source>Output :</source>
          <target state="translated">产出 :</target>
        </trans-unit>
        <trans-unit id="63c904559993935c470f516c8b549ca7f3640dbb" translate="yes" xml:space="preserve">
          <source>Performance</source>
          <target state="translated">Performance</target>
        </trans-unit>
        <trans-unit id="1c6f860e82983c0e1d7308c9b028e952494b5b23" translate="yes" xml:space="preserve">
          <source>Remove ALL instances from an array</source>
          <target state="translated">移除数组中的所有实例</target>
        </trans-unit>
        <trans-unit id="dd345246f3a62eadb99621467548ed97cad3f9c8" translate="yes" xml:space="preserve">
          <source>Removing item (ECMA-262 Edition 5 code aka oldstyle JavaScript)</source>
          <target state="translated">移除项目(ECMA-262版5代码又名旧式JavaScript)。</target>
        </trans-unit>
        <trans-unit id="6021444c0ce03849355f32908527d14956560e4a" translate="yes" xml:space="preserve">
          <source>Removing item (ECMAScript 6 code)</source>
          <target state="translated">删除项目(ECMAScript 6代码)</target>
        </trans-unit>
        <trans-unit id="79698ecdbbb6691abfcc91f341416cfd3b919327" translate="yes" xml:space="preserve">
          <source>Removing multiple items</source>
          <target state="translated">移除多个项目</target>
        </trans-unit>
        <trans-unit id="1391fc6121536c69a9066cd7dc9a5fb16d5ccc6f" translate="yes" xml:space="preserve">
          <source>Removing multiple items (ECMAScript&amp;nbsp;7 code)</source>
          <target state="translated">删除多个项目（ECMAScript 7代码）</target>
        </trans-unit>
        <trans-unit id="3c18435712685ddfeaed93ce198962c0c5f904ef" translate="yes" xml:space="preserve">
          <source>Removing multiple items (in the future, maybe)</source>
          <target state="translated">移除多个项目(将来可能会)</target>
        </trans-unit>
        <trans-unit id="ca50a9128b4f70d51a41612e2cbc3c50eca21198" translate="yes" xml:space="preserve">
          <source>Reviewing the above function, despite the fact that it works fine, I realised there could be some performance improvement. Also using ES6 instead of ES5 is a much better approach. To that end, this is the improved code:</source>
          <target state="translated">回顾上述功能,尽管它的工作原理很好,但我意识到性能上还可以有一些改进。同时,使用ES6而不是ES5是一个更好的方法。为此,这就是改进后的代码。</target>
        </trans-unit>
        <trans-unit id="4bcb4e163bf193fe874c35e7a1a754e4ed2bd51c" translate="yes" xml:space="preserve">
          <source>Show code snippet</source>
          <target state="translated">显示代码片段</target>
        </trans-unit>
        <trans-unit id="396e7262b5eaaaad4ec7050568c42ec2308bf565" translate="yes" xml:space="preserve">
          <source>Suppose you have an array, and you want to remove an item in position &lt;code&gt;i&lt;/code&gt;.</source>
          <target state="translated">假设您有一个数组，并且想要删除位置 &lt;code&gt;i&lt;/code&gt; 的项目。</target>
        </trans-unit>
        <trans-unit id="d16064c8df6dfe7f81fca710dbc0a235aca8e2b7" translate="yes" xml:space="preserve">
          <source>Suppose you want to remove &lt;code&gt;5&lt;/code&gt; from the array, you can simply do it like this:</source>
          <target state="translated">假设您要从数组中删除 &lt;code&gt;5&lt;/code&gt; ，则可以这样简单地进行操作：</target>
        </trans-unit>
        <trans-unit id="bfaffadd71dc5fc67d907dab7b830f954260fa35" translate="yes" xml:space="preserve">
          <source>The conclusions</source>
          <target state="translated">结论</target>
        </trans-unit>
        <trans-unit id="d7904ee35e807fd3941ec5d6be346fc95b7844e0" translate="yes" xml:space="preserve">
          <source>The equivalent of something like -</source>
          <target state="translated">相当于类似的东西 --</target>
        </trans-unit>
        <trans-unit id="9e4b1951c4e95e36879f8b5fd3af791eea061e0b" translate="yes" xml:space="preserve">
          <source>The indexOf() command returns the first index at which a given element
  can be found in the array, or -1 if it is not present. This can be
  used along with splice() to search for an element and then remove it,
  even if you don&amp;rsquo;t know where it is in the array.</source>
          <target state="translated">indexOf（）命令返回可以在数组中找到给定元素的第一个索引；如果不存在，则返回-1。 可以将其与splice（）一起使用以搜索元素，然后将其删除，即使您不知道它在数组中的位置。</target>
        </trans-unit>
        <trans-unit id="a5c2d1fee1b47896b6980e235748f3e6548bf6c2" translate="yes" xml:space="preserve">
          <source>The second parameter of &lt;code&gt;splice&lt;/code&gt; is the number of elements to remove. Note that &lt;code&gt;splice&lt;/code&gt; modifies the array in place and returns a new array containing the elements that have been removed.</source>
          <target state="translated">&lt;code&gt;splice&lt;/code&gt; 的第二个参数是要删除的元素数。 请注意， &lt;code&gt;splice&lt;/code&gt; 会在适当位置修改数组，并返回一个包含已删除元素的新数组。</target>
        </trans-unit>
        <trans-unit id="bb6c0a0f03d89fc233f52358164cdf5afd892b2b" translate="yes" xml:space="preserve">
          <source>The splice() method adds/removes items to/from an array, and returns
  the removed item(s).</source>
          <target state="translated">splice()方法从数组中添加删除项,并返回被删除的项。</target>
        </trans-unit>
        <trans-unit id="d4607f5f4d353df616911ce44cbb32ce72dbbf7a" translate="yes" xml:space="preserve">
          <source>The splice() method changes the contents of an array by removing
  existing elements and/or adding new elements.</source>
          <target state="translated">splice()方法通过删除现有元素或添加新元素来改变数组的内容。</target>
        </trans-unit>
        <trans-unit id="100ca418894b30cc7048f6097c41af7932ab0077" translate="yes" xml:space="preserve">
          <source>Then when I want to use it:</source>
          <target state="translated">那么当我想用的时候。</target>
        </trans-unit>
        <trans-unit id="2304d640a16ae9bfebc931161006126d186e787e" translate="yes" xml:space="preserve">
          <source>Then:</source>
          <target state="translated">Then:</target>
        </trans-unit>
        <trans-unit id="d0784cbb4a7760d5504fc97cb4ffb29fd3ddafff" translate="yes" xml:space="preserve">
          <source>There are two major approaches:</source>
          <target state="translated">主要有两种方法:</target>
        </trans-unit>
        <trans-unit id="81ed33d4e6d26655e174a94f2749ed4bf5c89986" translate="yes" xml:space="preserve">
          <source>There is no need to use &lt;code&gt;indexOf&lt;/code&gt; or &lt;code&gt;splice&lt;/code&gt;. However, it performs better if you only want to remove one occurrence of an element.</source>
          <target state="translated">无需使用 &lt;code&gt;indexOf&lt;/code&gt; 或 &lt;code&gt;splice&lt;/code&gt; 。 但是，如果只想删除一个元素，它的性能会更好。</target>
        </trans-unit>
        <trans-unit id="f15d799c8985961cb5869dfa10f087e763105ff2" translate="yes" xml:space="preserve">
          <source>This provides a predicate instead of a value.</source>
          <target state="translated">这提供了一个谓语,而不是一个值。</target>
        </trans-unit>
        <trans-unit id="52cdaf49f7d8f6b0c1df575832e553cba5b685ce" translate="yes" xml:space="preserve">
          <source>This removes all elements from the array and also works faster than a combination of &lt;code&gt;slice&lt;/code&gt; and &lt;code&gt;indexOf&lt;/code&gt;.</source>
          <target state="translated">这将删除数组中的所有元素，并且比 &lt;code&gt;slice&lt;/code&gt; 和 &lt;code&gt;indexOf&lt;/code&gt; 的组合更快地工作。</target>
        </trans-unit>
        <trans-unit id="9c0327ed7faf0fa2151a1489f705eecf201e4b6e" translate="yes" xml:space="preserve">
          <source>This uses the ES6 arrow functions. You can use the traditional functions to support older browsers:</source>
          <target state="translated">这就使用了ES6的箭头功能。你可以使用传统的功能来支持旧的浏览器。</target>
        </trans-unit>
        <trans-unit id="34d0d7b577fb5006d8c1367d41d5e85742843924" translate="yes" xml:space="preserve">
          <source>This will give you a new array without the value you wanted to remove. So the result will be:</source>
          <target state="translated">这将给你一个新的数组,但没有你想删除的值。所以结果将是:</target>
        </trans-unit>
        <trans-unit id="4f86bec82e40ec8b9eaeb7815f5db7458e7f954c" translate="yes" xml:space="preserve">
          <source>To remove an element of an array at an index &lt;code&gt;i&lt;/code&gt;:</source>
          <target state="translated">要删除索引 &lt;code&gt;i&lt;/code&gt; 处的数组元素：</target>
        </trans-unit>
        <trans-unit id="14fdd2b48aac9ef5c9ec89a868f0525541e378f8" translate="yes" xml:space="preserve">
          <source>Today (2019-12-09) I conduct performance tests on macOS v10.13.6 (High Sierra) for chosen solutions. I show &lt;code&gt;delete&lt;/code&gt; (A), but I not use it in comparison with other methods, because it left empty space in the array.</source>
          <target state="translated">今天（2019-12-09）我在macOS v10.13.6（High Sierra）上针对所选解决方案进行了性能测试。 我显示了 &lt;code&gt;delete&lt;/code&gt; （A），但是我没有将其与其他方法相比使用，因为它在数组中留下了空白。</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="861a0e430ffac5e4ae6e11b7a947f2c32d388cf4" translate="yes" xml:space="preserve">
          <source>Usage:</source>
          <target state="translated">Usage:</target>
        </trans-unit>
        <trans-unit id="61fc9a71da87a6e263a155a0c228fa2a22592aa6" translate="yes" xml:space="preserve">
          <source>We need a loop to check them all, but an easier and more efficient way is using built-in JavaScript functions, so we write a function which use a filter like below instead:</source>
          <target state="translated">我们需要一个循环来检查它们,但一个更简单有效的方法是使用内置的JavaScript函数,所以我们写一个函数,使用像下面这样的过滤器来代替。</target>
        </trans-unit>
        <trans-unit id="054c50767d336aa2c0fab0b733b5916cca6932df" translate="yes" xml:space="preserve">
          <source>What if instead of a single item, you want to remove many items?</source>
          <target state="translated">如果不是单一的物品,而是要删除很多物品呢?</target>
        </trans-unit>
        <trans-unit id="3439f7b5c8df636860f7e93aae4a23f274295565" translate="yes" xml:space="preserve">
          <source>Where '3' is the value you want removed from the array.
The array would then become : &lt;code&gt;['1','2','4','5','6']&lt;/code&gt;</source>
          <target state="translated">其中&amp;ldquo; 3&amp;rdquo;是要从数组中删除的值。 数组将变为： &lt;code&gt;['1','2','4','5','6']&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="73b0a9d9b8aab9366bb561586105a737b1c9764b" translate="yes" xml:space="preserve">
          <source>Yielding:</source>
          <target state="translated">Yielding:</target>
        </trans-unit>
        <trans-unit id="7e37a657190bbcf503a467a4c0e23c15acbd411a" translate="yes" xml:space="preserve">
          <source>You can also expect to have holes in index numbers after using delete, e.g. you could end up with having indexes 1, 3, 4, 8, 9, and 11 and length as it was before using delete. In that case, all indexed &lt;code&gt;for&lt;/code&gt; loops would crash, since indexes are no longer sequential.</source>
          <target state="translated">您还可以期望在使用delete后索引号中出现空洞，例如，最终可能会具有使用delete之前的索引1、3、4、8、9、11和长度。 在那种情况下，所有索引的 &lt;code&gt;for&lt;/code&gt; 循环都会崩溃，因为索引不再是顺序的。</target>
        </trans-unit>
        <trans-unit id="6d862c4ba136e1333f173ee9b7d52087cbe9965c" translate="yes" xml:space="preserve">
          <source>You can do it easily with the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter&quot;&gt;filter&lt;/a&gt; method:</source>
          <target state="translated">您可以使用&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter&quot;&gt;filter&lt;/a&gt;方法轻松完成此操作：</target>
        </trans-unit>
        <trans-unit id="0a2db4b5a92e25c6369289d622cc110bc3bf9c4f" translate="yes" xml:space="preserve">
          <source>You can just create a function and remove items in series:</source>
          <target state="translated">你只需创建一个函数,然后将项目串联起来删除即可。</target>
        </trans-unit>
        <trans-unit id="002098575255d65cbec57e752daf6e1c47bbb58c" translate="yes" xml:space="preserve">
          <source>You can search for inclusion inside the callback function:</source>
          <target state="translated">你可以在回调函数内部搜索include。</target>
        </trans-unit>
        <trans-unit id="6c93bb9a764f92c4cd9e3021568ae17e60d7eb27" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel&lt;/a&gt; and a &lt;a href=&quot;http://cdn.polyfill.io/v2/docs/&quot;&gt;polyfill service&lt;/a&gt; to ensure this is well supported across browsers.</source>
          <target state="translated">您可以使用&lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel&lt;/a&gt;和&lt;a href=&quot;http://cdn.polyfill.io/v2/docs/&quot;&gt;polyfill服务&lt;/a&gt;来确保跨浏览器很好地支持此功能。</target>
        </trans-unit>
        <trans-unit id="f52cc7bf113a21c4595bd02c1fac3f9ec17a6d5f" translate="yes" xml:space="preserve">
          <source>You can use ES6. For example to delete the value '3' in this case:</source>
          <target state="translated">你可以使用ES6。例如在本例中删除值'3'。</target>
        </trans-unit>
        <trans-unit id="5fa3023aa716e47bf7ba5e1e19b1c5b9e07b794d" translate="yes" xml:space="preserve">
          <source>You can use lodash &lt;a href=&quot;https://lodash.com/docs#pull&quot;&gt;_.pull&lt;/a&gt; (mutate array), &lt;a href=&quot;https://lodash.com/docs#pullAt&quot;&gt;_.pullAt&lt;/a&gt; (mutate array) or &lt;a href=&quot;https://lodash.com/docs#without&quot;&gt;_.without&lt;/a&gt; (does't mutate array),</source>
          <target state="translated">您可以使用lodash的&lt;a href=&quot;https://lodash.com/docs#pull&quot;&gt;_.pull&lt;/a&gt; （变异数组）， &lt;a href=&quot;https://lodash.com/docs#pullAt&quot;&gt;_。pullAt&lt;/a&gt; （变异数组）或&lt;a href=&quot;https://lodash.com/docs#without&quot;&gt;_.without&lt;/a&gt; （不变异数组），</target>
        </trans-unit>
        <trans-unit id="f49a5758d107ebbe684596c249a0fdc11b83eec4" translate="yes" xml:space="preserve">
          <source>You end up with an 8-element array. Don't know why but I confirmed John's original implementation doesn't have this problem.</source>
          <target state="translated">你最终会得到一个8元素的数组。不知道为什么,但我确认了John的原始实现没有这个问题。</target>
        </trans-unit>
        <trans-unit id="b9fc17bfad1b9a6fd6c64747adcaa6bb50d9ef1d" translate="yes" xml:space="preserve">
          <source>You have 1 to 9 in the array, and you want remove 5. Use the below code:</source>
          <target state="translated">你的数组中有1到9,而你想删除5。请使用下面的代码。</target>
        </trans-unit>
        <trans-unit id="59523b44b65e68f2d1099dfaddb9b36d2488acef" translate="yes" xml:space="preserve">
          <source>You may have different needs than I, so you can easily modify it to suit them. I hope this helps someone.</source>
          <target state="translated">你的需求可能和我不一样,所以你可以根据自己的需求进行修改。希望能帮到大家。</target>
        </trans-unit>
        <trans-unit id="4517c7bd27ee98509d3d3d64259d8592b14ad787" translate="yes" xml:space="preserve">
          <source>You should never mutate your array. As this is against the functional programming pattern. You can create a new array without referencing the array you want to change data of using the ECMAScript&amp;nbsp;6 method &lt;code&gt;filter&lt;/code&gt;;</source>
          <target state="translated">您绝对不应更改数组。 因为这与功能编程模式相反。 您可以使用ECMAScript 6方法 &lt;code&gt;filter&lt;/code&gt; 来创建新数组，而无需引用要更改数据的数组；</target>
        </trans-unit>
        <trans-unit id="1e7aa9bc776935aa2d2140e956b3d836030ec1e7" translate="yes" xml:space="preserve">
          <source>for big arrays, &lt;code&gt;array.slice+splice&lt;/code&gt; (H) is the fastest immutable solution for Firefox and Safari; &lt;code&gt;Array.from&lt;/code&gt; (B) is fastest in Chrome</source>
          <target state="translated">对于大型数组， &lt;code&gt;array.slice+splice&lt;/code&gt; （H）是Firefox和Safari最快的不可变解决方案； &lt;code&gt;Array.from&lt;/code&gt; （B）在Chrome中最快</target>
        </trans-unit>
        <trans-unit id="14348e8799fa471cb246585eeb032e6ae549c74b" translate="yes" xml:space="preserve">
          <source>for small tables on Safari, surprisingly the mutable solution (C) is slower than the immutable solution (G)</source>
          <target state="translated">对于Safari上的小表,令人惊讶的是,可变方案(C)比不可变方案(G)的速度慢</target>
        </trans-unit>
        <trans-unit id="57a0ec7e27ed061e58b5d1fcf86d063da62ee153" translate="yes" xml:space="preserve">
          <source>mutable solutions are usually 1.5x-6x faster than immutable</source>
          <target state="translated">可变方案通常比不可变方案快1.5倍-6倍</target>
        </trans-unit>
        <trans-unit id="a41b9e33e04b38f7c477ab607acfc49a6205295d" translate="yes" xml:space="preserve">
          <source>or you can use Babel and transpile the ES6 code back to ES5 to make it more digestible to old browsers, yet write modern JavaScript in your code.</source>
          <target state="translated">或者你可以使用Babel,将ES6的代码移植回ES5,使其更容易被老式浏览器消化,同时在代码中写出现代的JavaScript。</target>
        </trans-unit>
        <trans-unit id="05b2859211ab032e64d81756f0257bb5cb1881e8" translate="yes" xml:space="preserve">
          <source>the fastest solution is &lt;code&gt;array.splice&lt;/code&gt; (C) (except Safari for small arrays where it has the second time)</source>
          <target state="translated">最快的解决方案是 &lt;code&gt;array.splice&lt;/code&gt; （C）（对于第二个小型阵列，Safari除外）</target>
        </trans-unit>
        <trans-unit id="365862a50c0682caa8baa6f30edca76e3e5f81ed" translate="yes" xml:space="preserve">
          <source>where:</source>
          <target state="translated">where:</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
