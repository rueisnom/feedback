<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/5767325">
    <body>
      <group id="5767325">
        <trans-unit id="0c26d1335bfdb0a9a870062ffeefc2e30e985324" translate="yes" xml:space="preserve">
          <source>(originally posted at &lt;a href=&quot;https://flaviocopes.com/how-to-remove-item-from-array/&quot;&gt;https://flaviocopes.com/how-to-remove-item-from-array/&lt;/a&gt;)</source>
          <target state="translated">（最初は&lt;a href=&quot;https://flaviocopes.com/how-to-remove-item-from-array/&quot;&gt;https://flaviocopes.com/how-to-remove-item-from-array/に&lt;/a&gt;投稿されています ）</target>
        </trans-unit>
        <trans-unit id="20c7a03b4b677a239898b7a143f487b7ce5a289d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://underscorejs.org/#without&quot;&gt;Underscore.js&lt;/a&gt; can be used to solve issues with multiple browsers. It uses in-build browser methods if present. If they are absent like in the case of older Internet&amp;nbsp;Explorer versions it uses its own custom methods.</source>
          <target state="translated">&lt;a href=&quot;http://underscorejs.org/#without&quot;&gt;Underscore.js&lt;/a&gt;は、複数のブラウザーの問題を解決するために使用できます。 存在する場合は、組み込みのブラウザメソッドを使用します。 古いバージョンのInternet Explorerの場合のように存在しない場合は、独自のカスタムメソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="c79ad5441320844b76631a15e17f3556c09229fc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://gist.github.com/zykadelic/5069236&quot;&gt;This gist here&lt;/a&gt; will solve your problem, and also deletes all occurrences of the argument instead of just 1 (or a specified value).</source>
          <target state="translated">&lt;a href=&quot;https://gist.github.com/zykadelic/5069236&quot;&gt;この要点&lt;/a&gt;は問題を解決し、1（または指定した値）だけでなく、引数のすべての出現を削除します。</target>
        </trans-unit>
        <trans-unit id="611f858aa14bf07213924f276e7edb39ab092c59" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;slice()&lt;/code&gt; creates a new array with the indexes it receives. We simply create a new array, from start to the index we want to remove, and concatenate another array from the first position following the one we removed to the end of the array.</source>
          <target state="translated">&lt;code&gt;slice()&lt;/code&gt; は、受け取ったインデックスを持つ新しい配列を作成します。 最初から削除するインデックスまで新しい配列を作成し、削除した配列に続く最初の位置から配列の最後まで別の配列を連結します。</target>
        </trans-unit>
        <trans-unit id="ab82a2126411b9a66d7a7c357ca0f03f0c8a83de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;splice()&lt;/code&gt; (not to be confused with &lt;code&gt;slice()&lt;/code&gt;) mutates the original array, and should be avoided.</source>
          <target state="translated">&lt;code&gt;splice()&lt;/code&gt; （ &lt;code&gt;slice()&lt;/code&gt; と混同しないでください）は元の配列を変更するため、回避する必要があります。</target>
        </trans-unit>
        <trans-unit id="7a91b31039db5af6a19da64305b8acb0cdd87060" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE&lt;/em&gt; : If &quot;stringToRemoveFromArray&quot; is not located your in array, this will remove last element of array.</source>
          <target state="translated">&lt;em&gt;注&lt;/em&gt; ：「stringToRemoveFromArray」が配列内にない場合、これは配列の最後の要素を削除します。</target>
        </trans-unit>
        <trans-unit id="892178def7455cb09728ee3cb3fb0028d5065df3" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;indexof&lt;/em&gt; is approximately 10x slower than &lt;em&gt;move&lt;/em&gt;. Even if improved by removing the call to &lt;code&gt;indexOf&lt;/code&gt; in &lt;em&gt;splice&lt;/em&gt; it performs much worse than &lt;em&gt;move&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;indexof&lt;/em&gt;は&lt;em&gt;move&lt;/em&gt;よりも約10倍遅く&lt;em&gt;なり&lt;/em&gt;ます。 &lt;em&gt;スプライス&lt;/em&gt;で &lt;code&gt;indexOf&lt;/code&gt; の呼び出しを削除して改善しても、 &lt;em&gt;move&lt;/em&gt;よりもパフォーマンスが大幅に低下します。</target>
        </trans-unit>
        <trans-unit id="8988123bae865b1300ce747e2d3850a0d9f80957" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;stringToRemoveFromArray&lt;/em&gt; : the string you want removed and 1 is the amount of elements you want to remove.</source>
          <target state="translated">&lt;em&gt;stringToRemoveFromArray&lt;/em&gt; ：削除する文字列。1は削除する要素の量です。</target>
        </trans-unit>
        <trans-unit id="5d22c8d0967243a99bfdfa8445901cf449cae21f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;theArray&lt;/em&gt; : the array you want to remove something particular from</source>
          <target state="translated">&lt;em&gt;theArray&lt;/em&gt; ：特定のものを削除する配列</target>
        </trans-unit>
        <trans-unit id="74393367bc2c5b71b2d83967b6fab3e785a72270" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ES6 &amp;amp; without mutation:  (October 2016)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ES6＆変異なし：（2016年10月）&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="28bcb5a317964f025eef45656b431ea3cf298091" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Find and move (move):&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;検索して移動（移動）：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="076310371e6397adb469f1848e43527347fb1f5a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Hint&lt;/strong&gt;: please use an arrow function for filter callback unless you will get an empty array.</source>
          <target state="translated">&lt;strong&gt;ヒント&lt;/strong&gt; ：空の配列を取得しない限り、フィルターコールバックには矢印関数を使用してください。</target>
        </trans-unit>
        <trans-unit id="609b01c38b98b33ae1916781ecc012571ca8c1d8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;IMPORTANT&lt;/strong&gt; &quot;array.includes(...)&quot; function is not supported in Internet&amp;nbsp;Explorer at all, Chrome before 47 version, Firefox before 43 version, Safari before 9 version, and Edge before 14 version so &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes#Polyfill&quot;&gt;&lt;strong&gt;here is polyfill from Mozilla&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;重要&lt;/strong&gt; 「array.includes（...）」関数はInternet Explorer、47バージョンより前のChrome、43バージョンより前のFirefox、9バージョンより前のSafari、および14バージョンより前のEdgeではまったくサポートされていないため&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes#Polyfill&quot;&gt;&lt;strong&gt;、Mozillaのポリフィルを使用し&lt;/strong&gt;&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="9de13012f59ad740527b2d1c338c09d2fa7a0e37" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;IMPORTANT&lt;/strong&gt; ECMAScript&amp;nbsp;6 &quot;() =&amp;gt; {}&quot; arrow function syntax is not supported in Internet&amp;nbsp;Explorer at all, Chrome before 45 version, Firefox before 22 version, and Safari before 10 version. To use ECMAScript&amp;nbsp;6 syntax in old browsers you can use &lt;a href=&quot;http://babeljs.io&quot;&gt;BabelJS&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;重要&lt;/strong&gt; ECMAScript 6 &quot;（）=&amp;gt; {}&quot;矢印関数構文は、Internet Explorer、45より前のバージョンのChrome、22バージョンより前のFirefox、および10バージョンより前のSafariではまったくサポートされていません。 古いブラウザーでECMAScript 6構文を使用するには、 &lt;a href=&quot;http://babeljs.io&quot;&gt;BabelJS&lt;/a&gt;を使用できます。</target>
        </trans-unit>
        <trans-unit id="88c307e9733bc20de3106e3cee5b55ca39bd7c72" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE:&lt;/strong&gt; it will update the given array, and return the affected rows.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;指定された配列を更新し、影響を受ける行を返します。</target>
        </trans-unit>
        <trans-unit id="deeb6d90d8ca244318bf1c9f0eb580d9609c129f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;OK,&lt;/strong&gt; for example you have the array below:</source>
          <target state="translated">&lt;strong&gt;OK、&lt;/strong&gt;例えばあなたは以下の配列を持っています：</target>
        </trans-unit>
        <trans-unit id="537bd903ff4c8e8f4da77846c6c743b57e4c6bea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Prototype method&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;プロトタイプ方式&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c2a6eb120ac5d954b7aa47baca4f35f487d47fe8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reference&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Reference&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="eee1c67bc9de7a8138d0f79bc463c5e056713e42" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Removing a particular element/string from an array can be done in a one-liner:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;配列から特定の要素/文字列を削除することはワンライナーで行うことができます：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9fe3363b4b4ec9ef2c31a15f451244a7adfb38f9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Results for array with 1.000.000 elements&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;1.000.000要素の配列の結果&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b16b2cedffbc2b7501c47a182bc43dca4a810f23" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Results for array with 10 elements&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;10要素の配列の結果&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d4f9f56e9b68e077ca52dc3c48df130009f98852" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Run-times on nodejs for array with 1000 elements (average over 10000 runs):&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;1000個の要素を持つ配列のnodejsでの実行時間（平均10000回を超える実行）：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="060b6b12ebe76d9863043cfb834041f940f23a02" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Stand-alone function&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;スタンドアロン機能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4e954dff295697b281cc36c09cba48ef320dd588" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Try it yourself in BabelJS :)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;BabelJSで試してみてください:)&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1b6578257f4bc0dd640490f50dead6b466dd6e87" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Update:&lt;/strong&gt; This method is recommended only if you cannot use ECMAScript 2015 (formerly known as ES6). If you can use it, other answers here provide much neater implementations.</source>
          <target state="translated">&lt;strong&gt;更新：&lt;/strong&gt;この方法は、ECMAScript 2015（旧称ES6）を使用できない場合にのみお勧めします。 あなたがそれを使うことができるなら、ここでの他の答えははるかにきれいな実装を提供します。</target>
        </trans-unit>
        <trans-unit id="8eae0c2fd6aa8f39724e972da8dbfcc4b0341cb6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Use &lt;code&gt;indexOf&lt;/code&gt; and &lt;code&gt;splice&lt;/code&gt; (indexof):&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;indexOf&lt;/code&gt; および &lt;code&gt;splice&lt;/code&gt; （indexof）を使用します。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0d1fbe33957ad7bbde5209e065896287f2cb3d27" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Use only &lt;code&gt;splice&lt;/code&gt; (splice):&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;splice&lt;/code&gt; のみを使用（スプライス）：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fdeffaeb0c1e585a81d090320b9ab7016c324272" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;delete&lt;/strong&gt;: &lt;code&gt;delete anArray[index];&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;delete&lt;/strong&gt; ： &lt;code&gt;delete anArray[index];&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="53ba754b3525a6a5261703a386db52a68312485f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;indexOf&lt;/strong&gt; :</source>
          <target state="translated">&lt;strong&gt;indexOf&lt;/strong&gt; ：</target>
        </trans-unit>
        <trans-unit id="644952719b332e9874e9cc1233c36f266cd932ca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;splice()&lt;/strong&gt;: &lt;code&gt;anArray.splice(index, 1);&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;splice（）&lt;/strong&gt; ： &lt;code&gt;anArray.splice(index, 1);&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="83bfc39e9a37dd6b6117105209aeac8ab281531a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;splice&lt;/strong&gt; :</source>
          <target state="translated">&lt;strong&gt;スプライス&lt;/strong&gt; ：</target>
        </trans-unit>
        <trans-unit id="c36e3a30f2d6a32cd5d72b825bdbbe142dde1e5e" translate="yes" xml:space="preserve">
          <source>A friend was having issues in &lt;a href=&quot;http://en.wikipedia.org/wiki/Internet_Explorer_8&quot;&gt;Internet&amp;nbsp;Explorer&amp;nbsp;8&lt;/a&gt; and showed me what he did. I told him it was wrong, and he told me he got the answer here. The current top answer will not work in all browsers (Internet&amp;nbsp;Explorer&amp;nbsp;8 for example), and it will only remove the first occurrence of the item.</source>
          <target state="translated">友人が&lt;a href=&quot;http://en.wikipedia.org/wiki/Internet_Explorer_8&quot;&gt;Internet Explorer 8で&lt;/a&gt;問題を抱えていて、彼が何をしたかを見せてくれました。 私はそれが間違っていると彼に言った、そして彼はここで答えを得たと私に言った。 現在の上位の回答はすべてのブラウザー（たとえばInternet Explorer 8）で機能するわけではなく、アイテムの最初の出現のみを削除します。</target>
        </trans-unit>
        <trans-unit id="5758b12998637b11f8929c6f80e63cd2fdb0c5dd" translate="yes" xml:space="preserve">
          <source>A more modern, &lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015&quot;&gt;ECMAScript 2015&lt;/a&gt; (formerly known as Harmony or ES&amp;nbsp;6) approach. Given:</source>
          <target state="translated">より近代的な&lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015&quot;&gt;ECMAScript 2015&lt;/a&gt; （旧称HarmonyまたはES 6）アプローチ。 与えられた：</target>
        </trans-unit>
        <trans-unit id="f0b341371c6565d7f795ca026bfdd9eab34d1aac" translate="yes" xml:space="preserve">
          <source>A simple example to remove elements from array (from the website):</source>
          <target state="translated">配列から要素を削除する簡単な例(Webサイトから)</target>
        </trans-unit>
        <trans-unit id="c2e29fc81b754b51a7bd4216b9db9005b928d64e" translate="yes" xml:space="preserve">
          <source>All the method described &lt;strong&gt;do not mutate the original array&lt;/strong&gt;, and instead create a new one.</source>
          <target state="translated">説明され&lt;strong&gt;ている&lt;/strong&gt;すべてのメソッド&lt;strong&gt;は元の配列を変更せず&lt;/strong&gt; 、代わりに新しい&lt;strong&gt;配列&lt;/strong&gt;を作成します。</target>
        </trans-unit>
        <trans-unit id="9b142d58affd0fb34a0888407fb2180dddcd912a" translate="yes" xml:space="preserve">
          <source>Also there are third-party libraries which do help you to do this, like Lodash or Underscore. For more information, look at lodash _.pull, _.pullAt or _.without.</source>
          <target state="translated">また、LodashやUnderscoreのようなサードパーティ製のライブラリもあります。詳細は lodash _.pull,_.pullAt または _.without を参照してください。</target>
        </trans-unit>
        <trans-unit id="00717cffb29a457925f076b9a416f04196087b6a" translate="yes" xml:space="preserve">
          <source>An additional advantage of this method is that you can remove multiple items</source>
          <target state="translated">この方法の追加の利点は、複数のアイテムを削除することができることです。</target>
        </trans-unit>
        <trans-unit id="8ee0b0a58a96e032a63a2d3d111c5ac52a5dcd76" translate="yes" xml:space="preserve">
          <source>And if you don't know the index of the item, you can use &lt;code&gt;array.indexOf(item)&lt;/code&gt; to get it (in a &lt;code&gt;if()&lt;/code&gt; to get one item or in a &lt;code&gt;while()&lt;/code&gt; to get all of them). &lt;code&gt;array.indexOf(item)&lt;/code&gt; returns either the index or -1 if not found.&amp;nbsp;</source>
          <target state="translated">また、アイテムのインデックスがわからない場合は、 &lt;code&gt;array.indexOf(item)&lt;/code&gt; を使用して取得できます（ &lt;code&gt;if()&lt;/code&gt; で 1つのアイテムを取得するか、 &lt;code&gt;while()&lt;/code&gt; ですべてを取得できます）。 &lt;code&gt;array.indexOf(item)&lt;/code&gt; はインデックスを返すか、見つからない場合は-1を返します。</target>
        </trans-unit>
        <trans-unit id="270eff8f3ba7dc2ba8c56178ef7042dc932e6f85" translate="yes" xml:space="preserve">
          <source>And if you need the value of that item, you can just store the returned array's element:</source>
          <target state="translated">そして、その項目の値が必要な場合は、返された配列の要素を格納すればよいのです。</target>
        </trans-unit>
        <trans-unit id="7ebe39c21a8b58a31651c3a1906f84f5a963136b" translate="yes" xml:space="preserve">
          <source>And we want to delete number 4. You can simply use the below code:</source>
          <target state="translated">そして、4番を削除したいのです。以下のコードを使うだけでOKです。</target>
        </trans-unit>
        <trans-unit id="afed19ab01cf9d1460611647f16032e1841d5acd" translate="yes" xml:space="preserve">
          <source>Array.prototype.includes</source>
          <target state="translated">Array.prototype.includes</target>
        </trans-unit>
        <trans-unit id="d205412e1013ba19f48e0e081ee7d15df8b656a4" translate="yes" xml:space="preserve">
          <source>Avoid mutating the original array</source>
          <target state="translated">元の配列の突然変異を避ける</target>
        </trans-unit>
        <trans-unit id="7a4a66d748818d54d453c33cbac1fc30907786df" translate="yes" xml:space="preserve">
          <source>Based on all the answers which were mainly correct and taking into account the best practices suggested (especially not using Array.prototype directly), I came up with the below code:</source>
          <target state="translated">主に正解だった回答をもとに、ベストプラクティス(特にArray.prototypeを直接使用しないこと)を考慮して、以下のコードを作成しました。</target>
        </trans-unit>
        <trans-unit id="752d68ce8018e6b7ad5769b04915aea42d6ee027" translate="yes" xml:space="preserve">
          <source>Be careful when you use delete for an array. It is good for deleting attributes of objects, but not so good for arrays. It is better to use &lt;code&gt;splice&lt;/code&gt; for arrays.</source>
          <target state="translated">配列の削除を使用するときは注意してください。 オブジェクトの属性の削除には適していますが、配列にはあまり適していません。 配列には &lt;code&gt;splice&lt;/code&gt; を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="67c0a1560b00da0823669062c515c2265a5ee5ef" translate="yes" xml:space="preserve">
          <source>But how about if you have the below array instead with a few [5]s in the array?</source>
          <target state="translated">しかし、代わりに以下のような配列で、配列の中にいくつかの[5]が入っている場合はどうでしょうか?</target>
        </trans-unit>
        <trans-unit id="636238f4494666df4527913fe2f601c1ca964feb" translate="yes" xml:space="preserve">
          <source>But if you want to delete a special item like &lt;code&gt;3&lt;/code&gt; and you don't know its index, do like below:</source>
          <target state="translated">しかし、 &lt;code&gt;3&lt;/code&gt; のような特別なアイテムを削除したいが、そのインデックスがわからない場合は、以下のようにします。</target>
        </trans-unit>
        <trans-unit id="9a3d31e2d9a524e74f6a3ee7975b24b4bf90ccd0" translate="yes" xml:space="preserve">
          <source>But the main reason I am posting this is to warn users against the alternative implementation suggested in the comments on that page (Dec 14, 2007):</source>
          <target state="translated">しかし、私がこれを投稿している主な理由は、そのページ(2007年12月14日)のコメントで提案された代替実装に対してユーザーに警告するためです。</target>
        </trans-unit>
        <trans-unit id="cb87061cb61c9dbe3608367c7bfb2df479657ca6" translate="yes" xml:space="preserve">
          <source>By index</source>
          <target state="translated">インデックス別</target>
        </trans-unit>
        <trans-unit id="6ee757280debcea7c9b487d87c4330ed2ff91427" translate="yes" xml:space="preserve">
          <source>By value</source>
          <target state="translated">値によって</target>
        </trans-unit>
        <trans-unit id="4808a232c259d694412a4e631f80e6995e0208a5" translate="yes" xml:space="preserve">
          <source>Call this function</source>
          <target state="translated">この関数を呼び出す</target>
        </trans-unit>
        <trans-unit id="5ce779ea8f657c1e9d48bc04cbf031ecd7bc9c0f" translate="yes" xml:space="preserve">
          <source>Check out this code. It works in every &lt;strong&gt;major browser&lt;/strong&gt;.</source>
          <target state="translated">このコードを確認してください。 それはすべての&lt;strong&gt;主要なブラウザで&lt;/strong&gt;動作します。</target>
        </trans-unit>
        <trans-unit id="a642c75da074a27c74e5e37cede4cdbecddc6d99" translate="yes" xml:space="preserve">
          <source>Comparison for browsers: Chrome v78.0.0, Safari v13.0.4, and Firefox v71.0.0</source>
          <target state="translated">ブラウザでの比較です。Chrome v78.0.0.0、Safari v13.0.4、Firefox v71.0.0</target>
        </trans-unit>
        <trans-unit id="bf1be2b7ad07bae2fe92475d10173eb638774def" translate="yes" xml:space="preserve">
          <source>Definition</source>
          <target state="translated">Definition</target>
        </trans-unit>
        <trans-unit id="dc3decbb93847518f1a049dcf49d0d7c6560bcc6" translate="yes" xml:space="preserve">
          <source>Details</source>
          <target state="translated">Details</target>
        </trans-unit>
        <trans-unit id="102af0498fc1a0fcc3c38d1f6e784f8f1d5131b4" translate="yes" xml:space="preserve">
          <source>Do it immutable (original array stay unchanged)</source>
          <target state="translated">不変であること (元の配列は変更されない)</target>
        </trans-unit>
        <trans-unit id="b0ef19e663785033e9ef614ab9b9239c8b35f5b5" translate="yes" xml:space="preserve">
          <source>Do it simple, intuitive and explicit (&lt;a href=&quot;https://en.wikipedia.org/wiki/Occam%27s_razor&quot;&gt;Occam's razor&lt;/a&gt;)</source>
          <target state="translated">シンプルで直感的かつ明示的に行う（ &lt;a href=&quot;https://en.wikipedia.org/wiki/Occam%27s_razor&quot;&gt;Occamのかみそり&lt;/a&gt; ）</target>
        </trans-unit>
        <trans-unit id="3490e6ac5ef084f31168e6d30889da48f49ffa83" translate="yes" xml:space="preserve">
          <source>Do it with standard JavaScript functions, if your browser doesn't support them - &lt;strong&gt;use polyfill&lt;/strong&gt;</source>
          <target state="translated">ブラウザがサポートしていない場合は、標準のJavaScript関数を&lt;strong&gt;使用して&lt;/strong&gt;ください- &lt;strong&gt;ポリフィルを使用してください&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d166af755baa9f234415014c48b3ed88460e376c" translate="yes" xml:space="preserve">
          <source>E.g. if you have an object with an Id field and you want the object removed from an array:</source>
          <target state="translated">例えば、Idフィールドを持つオブジェクトがあり、そのオブジェクトを配列から削除したい場合などです。</target>
        </trans-unit>
        <trans-unit id="eb211e7a732a17308be1f309bdff241d6a90881b" translate="yes" xml:space="preserve">
          <source>Edited on 2016 October</source>
          <target state="translated">2016年10月に編集しました</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">スニペットを展開</target>
        </trans-unit>
        <trans-unit id="30b0e12c2c94f47b68fa5ccb20476a6b70623235" translate="yes" xml:space="preserve">
          <source>Find the &lt;code&gt;index&lt;/code&gt; of the array element you want to remove using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf&quot;&gt;&lt;code&gt;indexOf&lt;/code&gt;&lt;/a&gt;, and then remove that index with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice&quot;&gt;&lt;code&gt;splice&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf&quot;&gt; &lt;code&gt;indexOf&lt;/code&gt; &lt;/a&gt;を使用して削除する配列要素の &lt;code&gt;index&lt;/code&gt; を見つけてから、 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice&quot;&gt; &lt;code&gt;splice&lt;/code&gt; &lt;/a&gt;を使用してそのインデックスを削除します。</target>
        </trans-unit>
        <trans-unit id="cf873823acef1af3ee771a26f0cdf28493cf8f42" translate="yes" xml:space="preserve">
          <source>For further understanding you can read the MDN documentation on &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter&quot;&gt;Array.filter&lt;/a&gt;.</source>
          <target state="translated">詳細については、 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter&quot;&gt;Array.filterの&lt;/a&gt; MDNドキュメントを参照してください 。</target>
        </trans-unit>
        <trans-unit id="7f2700ad4c98cd8039e72339d830fef9f1ae90bb" translate="yes" xml:space="preserve">
          <source>Functional composition</source>
          <target state="translated">機能構成</target>
        </trans-unit>
        <trans-unit id="be5d89754199fe4effe4dd3576c2f17fa6dcc9b8" translate="yes" xml:space="preserve">
          <source>Here are a few ways to &lt;strong&gt;remove an item from an array using JavaScript&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;JavaScriptを使用して配列から項目&lt;/strong&gt;を&lt;strong&gt;削除する&lt;/strong&gt;いくつかの方法を次に示し&lt;strong&gt;ます&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="082f68197b52d18635b26ed39d4617bf4ee21c9d" translate="yes" xml:space="preserve">
          <source>How can I remove a specific item from an array</source>
          <target state="translated">配列から特定の項目を削除するには</target>
        </trans-unit>
        <trans-unit id="8e090d332d9dabde6e435eafdb66e7b93d430d7f" translate="yes" xml:space="preserve">
          <source>How to use:</source>
          <target state="translated">どのように使用するか。</target>
        </trans-unit>
        <trans-unit id="5b4032277da1069acfbec32fadd887ce6ff0eb2e" translate="yes" xml:space="preserve">
          <source>I am currently writing a blog post in which I have benchmarked several solutions for Array without problem and compared the time it takes to run. I will update this answer with the link once I finish that post. Just to let you know, I have compared the above against lodash's without and in case the browser supports &lt;code&gt;Map&lt;/code&gt;, it beats lodash! Notice that I am not using &lt;code&gt;Array.prototype.indexOf&lt;/code&gt; or &lt;code&gt;Array.prototype.includes&lt;/code&gt; as wrapping the exlcudeValues in a &lt;code&gt;Map&lt;/code&gt; or &lt;code&gt;Object&lt;/code&gt; makes querying faster!</source>
          <target state="translated">私は現在、問題なくアレイのいくつかのソリューションをベンチマークし、実行にかかる時間を比較したブログ投稿を書いています。 この投稿を終えたら、この回答をリンクで更新します。 ちょうどあなたに知らせるために、私は上記をlodashのないものと比較しました、そしてブラウザが &lt;code&gt;Map&lt;/code&gt; サポートする場合、それはlodashに勝ります！ ExlcudeValuesを &lt;code&gt;Map&lt;/code&gt; または &lt;code&gt;Object&lt;/code&gt; でラップするとクエリが高速になるため、Array.prototype.indexOfまたは &lt;code&gt;Array.prototype.includes&lt;/code&gt; を使用していないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="927b786a9b3b8d90436a3a819d7992491d63fccb" translate="yes" xml:space="preserve">
          <source>I don't know how you are expecting &lt;code&gt;array.remove(int)&lt;/code&gt; to behave. There are three possibilities I can think of that you might want.</source>
          <target state="translated">&lt;code&gt;array.remove(int)&lt;/code&gt; がどのように動作することを期待しているかはわかりません。 あなたが望むかもしれないと私が考えることができる3つの可能性があります。</target>
        </trans-unit>
        <trans-unit id="2fb2a8dc2409ddc56e72d778923d524f41705f2b" translate="yes" xml:space="preserve">
          <source>I have an array of numbers, and I'm using the &lt;code&gt;.push()&lt;/code&gt; method to add elements to it.</source>
          <target state="translated">数値の配列があり、 &lt;code&gt;.push()&lt;/code&gt; メソッドを使用して要素を追加しています。</target>
        </trans-unit>
        <trans-unit id="6ec608995ebf679f514ce2f47d8154853d69f60d" translate="yes" xml:space="preserve">
          <source>I have to use &lt;em&gt;core&lt;/em&gt; JavaScript - frameworks are not allowed.</source>
          <target state="translated">&lt;em&gt;コア&lt;/em&gt; JavaScriptを使用する必要があります-フレームワークは許可されていません。</target>
        </trans-unit>
        <trans-unit id="b91ef97accd928c1d49c2eafd10e5535d9f2567d" translate="yes" xml:space="preserve">
          <source>I know there are a lot of answers already, but many of them seem to over complicate the problem.  Here is a simple, recursive way of removing all instances of a key - calls self until index isn't found.  Yes, it only works in browsers with &lt;code&gt;indexOf&lt;/code&gt;, but it's simple and can be easily polyfilled.</source>
          <target state="translated">私はすでに多くの答えがあることを知っていますが、それらの多くは問題を過度に複雑にしているようです。 キーのすべてのインスタンスを削除する単純な再帰的な方法を次に示します。インデックスが見つからなくなるまで自分自身を呼び出します。 はい、これは &lt;code&gt;indexOf&lt;/code&gt; を備えたブラウザでのみ機能しますが、シンプルで簡単にポリフィルできます。</target>
        </trans-unit>
        <trans-unit id="99f8ef90039d331cf04a0245f8741bad896c1816" translate="yes" xml:space="preserve">
          <source>I want to answer based on &lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015&quot;&gt;ECMAScript&amp;nbsp;6&lt;/a&gt;. Assume, you have an array like below:</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015&quot;&gt;ECMAScript 6に&lt;/a&gt;基づいて回答したいと思います。 次のような配列があるとします。</target>
        </trans-unit>
        <trans-unit id="f22753c9c42b1a1d3f482dec1414a40ee592735c" translate="yes" xml:space="preserve">
          <source>I'm pretty new to JavaScript and needed this functionality. I merely wrote this:</source>
          <target state="translated">私はJavaScriptにかなり新しいですし、この機能を必要としていました。私は単にこれを書いただけです。</target>
        </trans-unit>
        <trans-unit id="1181f5b3e98c311ad4f68627ced64b09d807b95c" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;https://github.com/tc39/proposal-bind-operator&quot;&gt;&quot;This-Binding Syntax&quot;&lt;/a&gt; proposal is ever accepted, you'll be able to do this:</source>
          <target state="translated">&lt;a href=&quot;https://github.com/tc39/proposal-bind-operator&quot;&gt;「This-Binding Syntax」の&lt;/a&gt;提案が受け入れられた場合、 これを行うことができます。</target>
        </trans-unit>
        <trans-unit id="fe98cb810962b5edccd9ad617768f8f2a4083258" translate="yes" xml:space="preserve">
          <source>If you are forced to use &lt;code&gt;delete&lt;/code&gt; for some reason, then you should use &lt;a href=&quot;https://stackoverflow.com/questions/9329446/for-each-over-an-array-in-javascript&quot;&gt;&lt;code&gt;for each&lt;/code&gt;&lt;/a&gt; loops when you need to loop through arrays. As the matter of fact, always avoid using indexed &lt;code&gt;for&lt;/code&gt; loops, if possible. That way the code would be more robust and less prone to problems with indexes.</source>
          <target state="translated">何らかの理由で &lt;code&gt;delete&lt;/code&gt; を使用せざるを得ない場合は、配列をループする必要があるとき&lt;a href=&quot;https://stackoverflow.com/questions/9329446/for-each-over-an-array-in-javascript&quot;&gt; &lt;code&gt;for each&lt;/code&gt; &lt;/a&gt;ループで使用する必要があります。 実際のところ、可能であれば、常にインデックス付き &lt;code&gt;for&lt;/code&gt; ループの使用は避けてください。 そうすれば、コードはより堅牢になり、インデックスに関する問題が発生しにくくなります。</target>
        </trans-unit>
        <trans-unit id="f3372c2f5ce756c0a85bf1ae13434ef583a0b420" translate="yes" xml:space="preserve">
          <source>If you are reusing this function, you write a reusable function which will be attached to the &lt;em&gt;native&lt;/em&gt; array function like below:</source>
          <target state="translated">この関数を再利用する場合は、次のように&lt;em&gt;ネイティブ&lt;/em&gt;配列関数にアタッチされる再利用可能な関数を記述します。</target>
        </trans-unit>
        <trans-unit id="bc4f3d4d9d3fd7908808745b03af3822dc8c23e1" translate="yes" xml:space="preserve">
          <source>If you do want an empty slot, delete is fine:</source>
          <target state="translated">空のスロットが欲しい場合は、deleteでいいです。</target>
        </trans-unit>
        <trans-unit id="fbfd1cb87dd44cdccdafdf3698d6ea6358bfdbaa" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t want to extend a global object, you can do something like the following, instead:</source>
          <target state="translated">グローバルオブジェクトを拡張したくない場合は、代わりに次のようなことができます：</target>
        </trans-unit>
        <trans-unit id="5942963f1ab27ee6bb5d5f5a0b74d4b5291141b2" translate="yes" xml:space="preserve">
          <source>If you don't, you should use the &lt;a href=&quot;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice&quot;&gt;splice&lt;/a&gt; method:</source>
          <target state="translated">そうでない場合は、 &lt;a href=&quot;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice&quot;&gt;splice&lt;/a&gt;メソッドを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="9572aa6fb591d1ba9a758c5dcffa6d3d5f13f53f" translate="yes" xml:space="preserve">
          <source>If you have access to newer Ecmascript versions on your client's computers (WARNING, may not work on older stations):</source>
          <target state="translated">クライアントのコンピュータで新しいバージョンのEcmascriptにアクセスできる場合(警告、古いステーションでは動作しない場合があります)。</target>
        </trans-unit>
        <trans-unit id="7371d04296336bdc6cc86bc910a62bd92156f86f" translate="yes" xml:space="preserve">
          <source>If you have complex objects in the array you can use filters? 
In situations where $.inArray or array.splice is not as easy to use. Especially if the objects are perhaps shallow in the array.</source>
          <target state="translated">配列の中に複雑なオブジェクトがある場合はフィルターを使用することができますか?状況では、$.inArrayやarray.spliceを使うのは簡単ではありません。特にオブジェクトがおそらく配列の中で浅い場合。</target>
        </trans-unit>
        <trans-unit id="03661e4b8eeedca39fe42a165e0ff1f205706501" translate="yes" xml:space="preserve">
          <source>If you just want to make the element at index &lt;code&gt;i&lt;/code&gt; no longer exist, but you don't want the indexes of the other elements to change:</source>
          <target state="translated">インデックス &lt;code&gt;i&lt;/code&gt; の要素を作成したいだけで、他の要素のインデックスを変更したくない場合：</target>
        </trans-unit>
        <trans-unit id="6bebdca438b5d73432e1fa39809f57e0d61f8581" translate="yes" xml:space="preserve">
          <source>If you know the index of an item</source>
          <target state="translated">アイテムのインデックスを知っている場合</target>
        </trans-unit>
        <trans-unit id="10e357536eb6c14e8daa988c5e9c2549670b880b" translate="yes" xml:space="preserve">
          <source>If you know the value</source>
          <target state="translated">値を知っていれば</target>
        </trans-unit>
        <trans-unit id="4b30477bc084b9503454a9d63596c918f07bea32" translate="yes" xml:space="preserve">
          <source>If you want a new array with the deleted positions removed, you can always delete the specific element and filter out the array. It might need an extension of the &lt;a href=&quot;http://www.tutorialspoint.com/javascript/array_filter.htm&quot;&gt;array object&lt;/a&gt; for browsers that don't implement the filter method, but in the long term it's easier since all you do is this:</source>
          <target state="translated">削除された位置を削除した新しい配列が必要な場合は、いつでも特定の要素を削除して、配列をフィルターで除外できます。 filterメソッドを実装していないブラウザーの&lt;a href=&quot;http://www.tutorialspoint.com/javascript/array_filter.htm&quot;&gt;場合&lt;/a&gt;は、 配列オブジェクトの拡張が必要になる可能性がありますが、長期的には、これを行うだけなので簡単です。</target>
        </trans-unit>
        <trans-unit id="f73177c0ed0f47b2292c8281cec1b30bcc003d73" translate="yes" xml:space="preserve">
          <source>If you want to delete at a special index like &lt;code&gt;2&lt;/code&gt;, write the below code:</source>
          <target state="translated">&lt;code&gt;2&lt;/code&gt; などの特別なインデックスで削除する場合は、次のコードを記述します。</target>
        </trans-unit>
        <trans-unit id="2e5d1d8d84d892f7295a13a744e6685cc8e63876" translate="yes" xml:space="preserve">
          <source>If you want to multiple values. Example:- 1,7,8</source>
          <target state="translated">複数の値を指定したい場合 例:-1,7,8</target>
        </trans-unit>
        <trans-unit id="3a6a212fba01ffed8f6fc4267775768fbbb30bed" translate="yes" xml:space="preserve">
          <source>If you want to remove an array value in an array. Example: [3,4,5]</source>
          <target state="translated">配列内の値を削除したい場合。例)配列内の値を削除したい場合。[3,4,5]</target>
        </trans-unit>
        <trans-unit id="8b23b0bad0c2ead983b02550bf037747cf944928" translate="yes" xml:space="preserve">
          <source>If you want to remove every element with value &lt;code&gt;number&lt;/code&gt; from the array:</source>
          <target state="translated">配列から値 &lt;code&gt;number&lt;/code&gt; のすべての要素を削除する場合：</target>
        </trans-unit>
        <trans-unit id="11c7cad7fbca387926792a22255bc6f88a7d7f1d" translate="yes" xml:space="preserve">
          <source>In Chrome the &lt;code&gt;array.splice&lt;/code&gt; (C) is the fastest in-place solution (the &lt;code&gt;delete&lt;/code&gt; (C) is similar fast - but it left an empty slot in the array (so it does not perform a 'full remove')). The &lt;code&gt;array.slice-splice&lt;/code&gt; (H) is the fastest immutable solution. The slowest is &lt;code&gt;array.filter&lt;/code&gt; (D and E). You can perform the test on your machine &lt;a href=&quot;https://jsperf.com/big-array-remove-element&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">Chromeでは、 &lt;code&gt;array.splice&lt;/code&gt; （C）が最速のインプレースソリューションです（ &lt;code&gt;delete&lt;/code&gt; （C）も同様に高速ですが、配列に空のスロットが残っているため、「完全な削除」は実行されません）。 &lt;code&gt;array.slice-splice&lt;/code&gt; （H）は、最速の不変ソリューションです。 最も遅いのは &lt;code&gt;array.filter&lt;/code&gt; （DおよびE）です。 &lt;a href=&quot;https://jsperf.com/big-array-remove-element&quot;&gt;ここで&lt;/a&gt;マシンのテストを実行できます 。</target>
        </trans-unit>
        <trans-unit id="caf079bc0736886b51cf720bae37155f17dde8fc" translate="yes" xml:space="preserve">
          <source>In Chrome the &lt;code&gt;array.splice&lt;/code&gt; (C) is the fastest in-place solution. The &lt;code&gt;array.filter&lt;/code&gt; (D) is the fastest immutable solution. The slowest is &lt;code&gt;array.slice&lt;/code&gt; (F). You can perform the test on your machine &lt;a href=&quot;https://jsperf.com/small-array-remove-element&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">Chromeでは、 &lt;code&gt;array.splice&lt;/code&gt; （C）が最速のインプレースソリューションです。 &lt;code&gt;array.filter&lt;/code&gt; （D）は最速の不変のソリューションです。 最も遅いのは &lt;code&gt;array.slice&lt;/code&gt; （F）です。 &lt;a href=&quot;https://jsperf.com/small-array-remove-element&quot;&gt;ここで&lt;/a&gt;マシンのテストを実行できます 。</target>
        </trans-unit>
        <trans-unit id="e50e0d2f98661e18f47697909df261e2562aca3b" translate="yes" xml:space="preserve">
          <source>In case you want to do it in some order, you can use &lt;code&gt;array.pop()&lt;/code&gt; for the last one or &lt;code&gt;array.shift()&lt;/code&gt; for the first one (and both return the value of the item too).</source>
          <target state="translated">順序どおりに実行したい場合は、最後の &lt;code&gt;array.pop()&lt;/code&gt; を使用するか、最初の配列にarray.shift（）を使用できます（両方ともアイテムの値も返します）。</target>
        </trans-unit>
        <trans-unit id="88d94bafb139b60e6ad0c18bca1523e5097fc204" translate="yes" xml:space="preserve">
          <source>In tests I remove middle element from the array in different ways. The &lt;strong&gt;A, C&lt;/strong&gt; solutions are in-place. The &lt;strong&gt;B, D, E, F, G, H&lt;/strong&gt; solutions are immutable.</source>
          <target state="translated">テストでは、さまざまな方法で配列から中央の要素を削除します。 &lt;strong&gt;A、C&lt;/strong&gt;ソリューションが配置されています。 &lt;strong&gt;B、D、E、F、G、H&lt;/strong&gt;ソリューションは不変です。</target>
        </trans-unit>
        <trans-unit id="fa2a957836e3e3e965443e00d5b8014f957fd2d7" translate="yes" xml:space="preserve">
          <source>In this case, one good option is to use &lt;code&gt;filter()&lt;/code&gt;, which offers a more &lt;em&gt;declarative&lt;/em&gt; approach:</source>
          <target state="translated">この場合、1つの優れたオプションは、より&lt;em&gt;宣言&lt;/em&gt;的なアプローチを提供する &lt;code&gt;filter()&lt;/code&gt; を使用することです。</target>
        </trans-unit>
        <trans-unit id="498070503dedbcf580c4b4c58484bd91a1296236" translate="yes" xml:space="preserve">
          <source>In this code example I use &lt;strong&gt;&quot;array.filter(...)&quot;&lt;/strong&gt; function to remove unwanted items from an array. This function doesn't change the original array and creates a new one. If your browser doesn't support this function (e.g. Internet Explorer before version 9, or Firefox before version 1.5), consider using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter#Polyfill&quot;&gt;&lt;strong&gt;the filter polyfill from Mozilla&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">このコード例では、 &lt;strong&gt;「array.filter（...）」&lt;/strong&gt;関数を使用して、不要なアイテムを配列から削除しています。 この関数は元の配列を変更せず、新しい配列を作成します。 ご使用のブラウザーがこの機能をサポートしていない場合（バージョン9より前のInternet Explorer、バージョン1.5より前のFirefoxなど）、 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter#Polyfill&quot;&gt;&lt;strong&gt;Mozillaのフィルターpolyfillの&lt;/strong&gt;&lt;/a&gt;使用を検討し&lt;strong&gt;てください&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="80818db9c412b0e73f689f5b35ec90056bf0f156" translate="yes" xml:space="preserve">
          <source>Includes supported browser is &lt;a href=&quot;https://www.w3schools.com/jsref/jsref_includes_array.asp&quot;&gt;link&lt;/a&gt;.</source>
          <target state="translated">サポートされているブラウザが&lt;a href=&quot;https://www.w3schools.com/jsref/jsref_includes_array.asp&quot;&gt;リンクに&lt;/a&gt;含まれています。</target>
        </trans-unit>
        <trans-unit id="a3b566523b6d44597530fd44e674307786fd43f6" translate="yes" xml:space="preserve">
          <source>Is there a simple way to remove a specific element from an array?</source>
          <target state="translated">配列から特定の要素を削除する簡単な方法はありますか?</target>
        </trans-unit>
        <trans-unit id="6d9faccbff79e531cf75ea60dafd6931c055c065" translate="yes" xml:space="preserve">
          <source>It depends on whether you want to keep an empty spot or not.</source>
          <target state="translated">空いている場所を確保したいかどうかにもよると思います。</target>
        </trans-unit>
        <trans-unit id="686571bd0f8f4510d5be45242cdd7f21b7d25fae" translate="yes" xml:space="preserve">
          <source>It loops through the array backwards (since indices and length will change as items are removed) and removes the item if it's found. It works in all browsers.</source>
          <target state="translated">配列を逆方向にループして(アイテムが削除されるとインデックスと長さが変わるので)、アイテムが見つかった場合は削除します。すべてのブラウザで動作します。</target>
        </trans-unit>
        <trans-unit id="4f65363f7ff3162732e6955c472e3956fb50925b" translate="yes" xml:space="preserve">
          <source>It seems to work well at first, but through a painful process I discovered it fails when trying to remove the second to last element in an array. For example, if you have a 10-element array and you try to remove the 9th element with this:</source>
          <target state="translated">最初はうまく動作しているように見えますが、配列の2番目から最後の要素を削除しようとしたときに失敗することを発見しました。例えば、10個の要素を持つ配列があり、9番目の要素を削除しようとした場合。</target>
        </trans-unit>
        <trans-unit id="c5aa5f5ae0043ff28d03e1421f43352cc3a4915d" translate="yes" xml:space="preserve">
          <source>It should display &lt;code&gt;[1, 2, 3, 4, 6]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;[1, 2, 3, 4, 6]&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="13c8f72d6490a322ee4ec3a3f6ba4f1da3965b80" translate="yes" xml:space="preserve">
          <source>Its always good practice to check if the element exists in your array first, before removing it.</source>
          <target state="translated">要素を削除する前に、まずその要素が配列に存在するかどうかをチェックするのは、常に良い習慣です。</target>
        </trans-unit>
        <trans-unit id="eb92a3c06243ace55e68e74a8ad80c70a428be40" translate="yes" xml:space="preserve">
          <source>John Resig &lt;a href=&quot;http://ejohn.org/blog/javascript-array-remove/&quot;&gt;posted a good implementation&lt;/a&gt;:</source>
          <target state="translated">John Resig &lt;a href=&quot;http://ejohn.org/blog/javascript-array-remove/&quot;&gt;は良い実装を投稿しました&lt;/a&gt; ：</target>
        </trans-unit>
        <trans-unit id="83a8666e2fe0581a766f2f548db8c6082aad23b4" translate="yes" xml:space="preserve">
          <source>Keep in mind that when you use &lt;code&gt;delete&lt;/code&gt; for an array you could get wrong results for &lt;code&gt;anArray.length&lt;/code&gt;. In other words, &lt;code&gt;delete&lt;/code&gt; would remove the element, but it wouldn't update the value of length property.</source>
          <target state="translated">配列に &lt;code&gt;delete&lt;/code&gt; を使用すると、 &lt;code&gt;anArray.length&lt;/code&gt; の結果が正しくなくなる可能性があることに注意してください 。 つまり、 &lt;code&gt;delete&lt;/code&gt; は要素を削除しますが、lengthプロパティの値を更新しません。</target>
        </trans-unit>
        <trans-unit id="7e90d8509520dead5bd5a5b859df180f1f691173" translate="yes" xml:space="preserve">
          <source>Let's find the simplest solution.</source>
          <target state="translated">一番簡単な解決策を探してみましょう。</target>
        </trans-unit>
        <trans-unit id="4fe8642303776edd465667b801642d103c9ebf69" translate="yes" xml:space="preserve">
          <source>One method is to use &lt;code&gt;slice()&lt;/code&gt;:</source>
          <target state="translated">1つの方法は、 &lt;code&gt;slice()&lt;/code&gt; を使用することです。</target>
        </trans-unit>
        <trans-unit id="fa81114985626064cd037702c8d3a5410af20899" translate="yes" xml:space="preserve">
          <source>Output - As expected.
[&quot;item1&quot;, &quot;item1&quot;]</source>
          <target state="translated">出力-予想通り。[&quot;item1&quot;,&quot;item1&quot;]</target>
        </trans-unit>
        <trans-unit id="e05424a323bcb65461ca7f73ba902a8cd6e1aef2" translate="yes" xml:space="preserve">
          <source>Output :</source>
          <target state="translated">出力 .</target>
        </trans-unit>
        <trans-unit id="63c904559993935c470f516c8b549ca7f3640dbb" translate="yes" xml:space="preserve">
          <source>Performance</source>
          <target state="translated">Performance</target>
        </trans-unit>
        <trans-unit id="1c6f860e82983c0e1d7308c9b028e952494b5b23" translate="yes" xml:space="preserve">
          <source>Remove ALL instances from an array</source>
          <target state="translated">配列からすべてのインスタンスを削除する</target>
        </trans-unit>
        <trans-unit id="dd345246f3a62eadb99621467548ed97cad3f9c8" translate="yes" xml:space="preserve">
          <source>Removing item (ECMA-262 Edition 5 code aka oldstyle JavaScript)</source>
          <target state="translated">アイテムの削除 (ECMA-262 Edition 5 コード別名 oldstyle JavaScript)</target>
        </trans-unit>
        <trans-unit id="6021444c0ce03849355f32908527d14956560e4a" translate="yes" xml:space="preserve">
          <source>Removing item (ECMAScript 6 code)</source>
          <target state="translated">項目の削除(ECMAScript 6 コード</target>
        </trans-unit>
        <trans-unit id="79698ecdbbb6691abfcc91f341416cfd3b919327" translate="yes" xml:space="preserve">
          <source>Removing multiple items</source>
          <target state="translated">複数のアイテムを削除する</target>
        </trans-unit>
        <trans-unit id="1391fc6121536c69a9066cd7dc9a5fb16d5ccc6f" translate="yes" xml:space="preserve">
          <source>Removing multiple items (ECMAScript&amp;nbsp;7 code)</source>
          <target state="translated">複数のアイテムの削除（ECMAScript 7コード）</target>
        </trans-unit>
        <trans-unit id="3c18435712685ddfeaed93ce198962c0c5f904ef" translate="yes" xml:space="preserve">
          <source>Removing multiple items (in the future, maybe)</source>
          <target state="translated">複数の項目を削除する(将来的には、たぶん</target>
        </trans-unit>
        <trans-unit id="ca50a9128b4f70d51a41612e2cbc3c50eca21198" translate="yes" xml:space="preserve">
          <source>Reviewing the above function, despite the fact that it works fine, I realised there could be some performance improvement. Also using ES6 instead of ES5 is a much better approach. To that end, this is the improved code:</source>
          <target state="translated">上記の機能を見直してみると、問題なく動作しているにもかかわらず、パフォーマンスの改善があることに気がつきました。また、ES5の代わりにES6を使用することは、はるかに良いアプローチです。そのために、これが改善されたコードです。</target>
        </trans-unit>
        <trans-unit id="4bcb4e163bf193fe874c35e7a1a754e4ed2bd51c" translate="yes" xml:space="preserve">
          <source>Show code snippet</source>
          <target state="translated">コードスニペットを表示</target>
        </trans-unit>
        <trans-unit id="396e7262b5eaaaad4ec7050568c42ec2308bf565" translate="yes" xml:space="preserve">
          <source>Suppose you have an array, and you want to remove an item in position &lt;code&gt;i&lt;/code&gt;.</source>
          <target state="translated">配列があり、位置 &lt;code&gt;i&lt;/code&gt; のアイテムを削除するとします。</target>
        </trans-unit>
        <trans-unit id="d16064c8df6dfe7f81fca710dbc0a235aca8e2b7" translate="yes" xml:space="preserve">
          <source>Suppose you want to remove &lt;code&gt;5&lt;/code&gt; from the array, you can simply do it like this:</source>
          <target state="translated">配列から &lt;code&gt;5&lt;/code&gt; を削除する場合は、次のように簡単に実行できます。</target>
        </trans-unit>
        <trans-unit id="bfaffadd71dc5fc67d907dab7b830f954260fa35" translate="yes" xml:space="preserve">
          <source>The conclusions</source>
          <target state="translated">結論</target>
        </trans-unit>
        <trans-unit id="d7904ee35e807fd3941ec5d6be346fc95b7844e0" translate="yes" xml:space="preserve">
          <source>The equivalent of something like -</source>
          <target state="translated">のようなものに相当します。</target>
        </trans-unit>
        <trans-unit id="9e4b1951c4e95e36879f8b5fd3af791eea061e0b" translate="yes" xml:space="preserve">
          <source>The indexOf() command returns the first index at which a given element
  can be found in the array, or -1 if it is not present. This can be
  used along with splice() to search for an element and then remove it,
  even if you don&amp;rsquo;t know where it is in the array.</source>
          <target state="translated">indexOf（）コマンドは、指定された要素が配列内で見つかる最初のインデックスを返します。存在しない場合は-1を返します。 これをsplice（）と一緒に使用して、配列のどこにあるかわからない場合でも、要素を検索して削除できます。</target>
        </trans-unit>
        <trans-unit id="a5c2d1fee1b47896b6980e235748f3e6548bf6c2" translate="yes" xml:space="preserve">
          <source>The second parameter of &lt;code&gt;splice&lt;/code&gt; is the number of elements to remove. Note that &lt;code&gt;splice&lt;/code&gt; modifies the array in place and returns a new array containing the elements that have been removed.</source>
          <target state="translated">&lt;code&gt;splice&lt;/code&gt; の2番目のパラメーターは、削除する要素の数です。 &lt;code&gt;splice&lt;/code&gt; は配列を適切に変更し、削除された要素を含む新しい配列を返すことに注意してください。</target>
        </trans-unit>
        <trans-unit id="bb6c0a0f03d89fc233f52358164cdf5afd892b2b" translate="yes" xml:space="preserve">
          <source>The splice() method adds/removes items to/from an array, and returns
  the removed item(s).</source>
          <target state="translated">splice()メソッドは、配列から項目を削除し、削除された項目を返します。</target>
        </trans-unit>
        <trans-unit id="d4607f5f4d353df616911ce44cbb32ce72dbbf7a" translate="yes" xml:space="preserve">
          <source>The splice() method changes the contents of an array by removing
  existing elements and/or adding new elements.</source>
          <target state="translated">splice()メソッドは、既存の要素を削除したり、新しい要素を追加したりして配列の内容を変更します。</target>
        </trans-unit>
        <trans-unit id="100ca418894b30cc7048f6097c41af7932ab0077" translate="yes" xml:space="preserve">
          <source>Then when I want to use it:</source>
          <target state="translated">そして、使いたい時に</target>
        </trans-unit>
        <trans-unit id="2304d640a16ae9bfebc931161006126d186e787e" translate="yes" xml:space="preserve">
          <source>Then:</source>
          <target state="translated">Then:</target>
        </trans-unit>
        <trans-unit id="d0784cbb4a7760d5504fc97cb4ffb29fd3ddafff" translate="yes" xml:space="preserve">
          <source>There are two major approaches:</source>
          <target state="translated">大きく分けて2つのアプローチがあります。</target>
        </trans-unit>
        <trans-unit id="81ed33d4e6d26655e174a94f2749ed4bf5c89986" translate="yes" xml:space="preserve">
          <source>There is no need to use &lt;code&gt;indexOf&lt;/code&gt; or &lt;code&gt;splice&lt;/code&gt;. However, it performs better if you only want to remove one occurrence of an element.</source>
          <target state="translated">&lt;code&gt;indexOf&lt;/code&gt; や &lt;code&gt;splice&lt;/code&gt; を使用する必要はありません。 ただし、要素の1つのオカレンスのみを削除する場合は、パフォーマンスが向上します。</target>
        </trans-unit>
        <trans-unit id="f15d799c8985961cb5869dfa10f087e763105ff2" translate="yes" xml:space="preserve">
          <source>This provides a predicate instead of a value.</source>
          <target state="translated">これは、値の代わりに述語を提供します。</target>
        </trans-unit>
        <trans-unit id="52cdaf49f7d8f6b0c1df575832e553cba5b685ce" translate="yes" xml:space="preserve">
          <source>This removes all elements from the array and also works faster than a combination of &lt;code&gt;slice&lt;/code&gt; and &lt;code&gt;indexOf&lt;/code&gt;.</source>
          <target state="translated">これにより、配列からすべての要素が削除され、 &lt;code&gt;slice&lt;/code&gt; と &lt;code&gt;indexOf&lt;/code&gt; の組み合わせよりも高速に動作します。</target>
        </trans-unit>
        <trans-unit id="9c0327ed7faf0fa2151a1489f705eecf201e4b6e" translate="yes" xml:space="preserve">
          <source>This uses the ES6 arrow functions. You can use the traditional functions to support older browsers:</source>
          <target state="translated">これはES6の矢印機能を使用しています。従来の機能を利用して、古いブラウザにも対応しています。</target>
        </trans-unit>
        <trans-unit id="34d0d7b577fb5006d8c1367d41d5e85742843924" translate="yes" xml:space="preserve">
          <source>This will give you a new array without the value you wanted to remove. So the result will be:</source>
          <target state="translated">これにより、削除したい値を含まない新しい配列が得られます。ということで、結果は次のようになります。</target>
        </trans-unit>
        <trans-unit id="4f86bec82e40ec8b9eaeb7815f5db7458e7f954c" translate="yes" xml:space="preserve">
          <source>To remove an element of an array at an index &lt;code&gt;i&lt;/code&gt;:</source>
          <target state="translated">インデックス &lt;code&gt;i&lt;/code&gt; にある配列の要素を削除するには：</target>
        </trans-unit>
        <trans-unit id="14fdd2b48aac9ef5c9ec89a868f0525541e378f8" translate="yes" xml:space="preserve">
          <source>Today (2019-12-09) I conduct performance tests on macOS v10.13.6 (High Sierra) for chosen solutions. I show &lt;code&gt;delete&lt;/code&gt; (A), but I not use it in comparison with other methods, because it left empty space in the array.</source>
          <target state="translated">今日（2019-12-09）選択したソリューションのmacOS v10.13.6（High Sierra）でパフォーマンステストを実施します。 &lt;code&gt;delete&lt;/code&gt; （A）を表示していますが、配列に空のスペースが残っているため、他の方法と比較して使用していません。</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="861a0e430ffac5e4ae6e11b7a947f2c32d388cf4" translate="yes" xml:space="preserve">
          <source>Usage:</source>
          <target state="translated">Usage:</target>
        </trans-unit>
        <trans-unit id="61fc9a71da87a6e263a155a0c228fa2a22592aa6" translate="yes" xml:space="preserve">
          <source>We need a loop to check them all, but an easier and more efficient way is using built-in JavaScript functions, so we write a function which use a filter like below instead:</source>
          <target state="translated">全てをチェックするにはループが必要ですが、より簡単で効率的な方法はJavaScriptの組み込み関数を使うことです。</target>
        </trans-unit>
        <trans-unit id="054c50767d336aa2c0fab0b733b5916cca6932df" translate="yes" xml:space="preserve">
          <source>What if instead of a single item, you want to remove many items?</source>
          <target state="translated">単品ではなく、多くのアイテムを削除したい場合はどうでしょうか?</target>
        </trans-unit>
        <trans-unit id="3439f7b5c8df636860f7e93aae4a23f274295565" translate="yes" xml:space="preserve">
          <source>Where '3' is the value you want removed from the array.
The array would then become : &lt;code&gt;['1','2','4','5','6']&lt;/code&gt;</source>
          <target state="translated">ここで、「3」は配列から削除する値です。 配列は次のようになります： &lt;code&gt;['1','2','4','5','6']&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="73b0a9d9b8aab9366bb561586105a737b1c9764b" translate="yes" xml:space="preserve">
          <source>Yielding:</source>
          <target state="translated">Yielding:</target>
        </trans-unit>
        <trans-unit id="7e37a657190bbcf503a467a4c0e23c15acbd411a" translate="yes" xml:space="preserve">
          <source>You can also expect to have holes in index numbers after using delete, e.g. you could end up with having indexes 1, 3, 4, 8, 9, and 11 and length as it was before using delete. In that case, all indexed &lt;code&gt;for&lt;/code&gt; loops would crash, since indexes are no longer sequential.</source>
          <target state="translated">また、削除を使用した後、インデックス1、3、4、8、9、および11と長さを持つことになる可能性があります。 その場合、インデックスがシーケンシャルではなくなる &lt;code&gt;for&lt;/code&gt; 、すべてのインデックス付きforループがクラッシュします。</target>
        </trans-unit>
        <trans-unit id="6d862c4ba136e1333f173ee9b7d52087cbe9965c" translate="yes" xml:space="preserve">
          <source>You can do it easily with the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter&quot;&gt;filter&lt;/a&gt; method:</source>
          <target state="translated">あなたは&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter&quot;&gt;filter&lt;/a&gt;メソッドでそれを簡単に行うことができます：</target>
        </trans-unit>
        <trans-unit id="0a2db4b5a92e25c6369289d622cc110bc3bf9c4f" translate="yes" xml:space="preserve">
          <source>You can just create a function and remove items in series:</source>
          <target state="translated">関数を作成して、連続している項目を削除するだけでOKです。</target>
        </trans-unit>
        <trans-unit id="002098575255d65cbec57e752daf6e1c47bbb58c" translate="yes" xml:space="preserve">
          <source>You can search for inclusion inside the callback function:</source>
          <target state="translated">コールバック関数内でインクルージョンを検索することができます。</target>
        </trans-unit>
        <trans-unit id="6c93bb9a764f92c4cd9e3021568ae17e60d7eb27" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel&lt;/a&gt; and a &lt;a href=&quot;http://cdn.polyfill.io/v2/docs/&quot;&gt;polyfill service&lt;/a&gt; to ensure this is well supported across browsers.</source>
          <target state="translated">&lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel&lt;/a&gt;と&lt;a href=&quot;http://cdn.polyfill.io/v2/docs/&quot;&gt;ポリフィルサービス&lt;/a&gt;を使用して、これがブラウザー全体で適切にサポートされていることを確認できます。</target>
        </trans-unit>
        <trans-unit id="f52cc7bf113a21c4595bd02c1fac3f9ec17a6d5f" translate="yes" xml:space="preserve">
          <source>You can use ES6. For example to delete the value '3' in this case:</source>
          <target state="translated">ES6を使用することができます。例えば、この場合は値「3」を削除します。</target>
        </trans-unit>
        <trans-unit id="5fa3023aa716e47bf7ba5e1e19b1c5b9e07b794d" translate="yes" xml:space="preserve">
          <source>You can use lodash &lt;a href=&quot;https://lodash.com/docs#pull&quot;&gt;_.pull&lt;/a&gt; (mutate array), &lt;a href=&quot;https://lodash.com/docs#pullAt&quot;&gt;_.pullAt&lt;/a&gt; (mutate array) or &lt;a href=&quot;https://lodash.com/docs#without&quot;&gt;_.without&lt;/a&gt; (does't mutate array),</source>
          <target state="translated">lodash &lt;a href=&quot;https://lodash.com/docs#pull&quot;&gt;_.pull&lt;/a&gt; （配列を変更）、 &lt;a href=&quot;https://lodash.com/docs#pullAt&quot;&gt;_。pullAt&lt;/a&gt; （配列を変更）、または&lt;a href=&quot;https://lodash.com/docs#without&quot;&gt;_.without&lt;/a&gt; （配列を変更しない）、</target>
        </trans-unit>
        <trans-unit id="f49a5758d107ebbe684596c249a0fdc11b83eec4" translate="yes" xml:space="preserve">
          <source>You end up with an 8-element array. Don't know why but I confirmed John's original implementation doesn't have this problem.</source>
          <target state="translated">結局8要素の配列になってしまいます。なぜかはわかりませんが、ジョンのオリジナルの実装ではこの問題がないことを確認しました。</target>
        </trans-unit>
        <trans-unit id="b9fc17bfad1b9a6fd6c64747adcaa6bb50d9ef1d" translate="yes" xml:space="preserve">
          <source>You have 1 to 9 in the array, and you want remove 5. Use the below code:</source>
          <target state="translated">1から9までの配列があり、5を削除したいとします。以下のコードを使用してください。</target>
        </trans-unit>
        <trans-unit id="59523b44b65e68f2d1099dfaddb9b36d2488acef" translate="yes" xml:space="preserve">
          <source>You may have different needs than I, so you can easily modify it to suit them. I hope this helps someone.</source>
          <target state="translated">私とは違うニーズがあるかもしれないので、それに合わせて簡単に修正することができます。誰かのお役に立てれば幸いです。</target>
        </trans-unit>
        <trans-unit id="4517c7bd27ee98509d3d3d64259d8592b14ad787" translate="yes" xml:space="preserve">
          <source>You should never mutate your array. As this is against the functional programming pattern. You can create a new array without referencing the array you want to change data of using the ECMAScript&amp;nbsp;6 method &lt;code&gt;filter&lt;/code&gt;;</source>
          <target state="translated">配列を変更しないでください。 これは関数型プログラミングパターンに反するためです。 ECMAScript 6メソッド &lt;code&gt;filter&lt;/code&gt; を使用して、データを変更する配列を参照せずに新しい配列を作成できます。</target>
        </trans-unit>
        <trans-unit id="1e7aa9bc776935aa2d2140e956b3d836030ec1e7" translate="yes" xml:space="preserve">
          <source>for big arrays, &lt;code&gt;array.slice+splice&lt;/code&gt; (H) is the fastest immutable solution for Firefox and Safari; &lt;code&gt;Array.from&lt;/code&gt; (B) is fastest in Chrome</source>
          <target state="translated">大きな配列の場合、 &lt;code&gt;array.slice+splice&lt;/code&gt; （H）は、FirefoxとSafariの最速の不変ソリューションです。 &lt;code&gt;Array.from&lt;/code&gt; （B）はChromeで最速</target>
        </trans-unit>
        <trans-unit id="14348e8799fa471cb246585eeb032e6ae549c74b" translate="yes" xml:space="preserve">
          <source>for small tables on Safari, surprisingly the mutable solution (C) is slower than the immutable solution (G)</source>
          <target state="translated">Safari上の小さなテーブルでは、驚くべきことに、不変解(G)よりも変異解(C)の方が遅くなります。</target>
        </trans-unit>
        <trans-unit id="57a0ec7e27ed061e58b5d1fcf86d063da62ee153" translate="yes" xml:space="preserve">
          <source>mutable solutions are usually 1.5x-6x faster than immutable</source>
          <target state="translated">変異解は通常、不変解に比べて1.5倍から6倍の速度で動作します。</target>
        </trans-unit>
        <trans-unit id="a41b9e33e04b38f7c477ab607acfc49a6205295d" translate="yes" xml:space="preserve">
          <source>or you can use Babel and transpile the ES6 code back to ES5 to make it more digestible to old browsers, yet write modern JavaScript in your code.</source>
          <target state="translated">あるいは、バベルを使ってES6のコードをES5に戻して、古いブラウザでも消化しやすいようにしつつ、コードに最新のJavaScriptを書くこともできます。</target>
        </trans-unit>
        <trans-unit id="05b2859211ab032e64d81756f0257bb5cb1881e8" translate="yes" xml:space="preserve">
          <source>the fastest solution is &lt;code&gt;array.splice&lt;/code&gt; (C) (except Safari for small arrays where it has the second time)</source>
          <target state="translated">最速の解決策は &lt;code&gt;array.splice&lt;/code&gt; （C）です（2回目の小さな配列のSafariを除く）</target>
        </trans-unit>
        <trans-unit id="365862a50c0682caa8baa6f30edca76e3e5f81ed" translate="yes" xml:space="preserve">
          <source>where:</source>
          <target state="translated">where:</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
