<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://stackoverflow.com/questions/5767325">
    <body>
      <group id="5767325">
        <trans-unit id="0c26d1335bfdb0a9a870062ffeefc2e30e985324" translate="yes" xml:space="preserve">
          <source>(originally posted at &lt;a href=&quot;https://flaviocopes.com/how-to-remove-item-from-array/&quot;&gt;https://flaviocopes.com/how-to-remove-item-from-array/&lt;/a&gt;)</source>
          <target state="translated">(원래 &lt;a href=&quot;https://flaviocopes.com/how-to-remove-item-from-array/&quot;&gt;https://flaviocopes.com/how-to-remove-item-from-array/에&lt;/a&gt; 게시)</target>
        </trans-unit>
        <trans-unit id="20c7a03b4b677a239898b7a143f487b7ce5a289d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://underscorejs.org/#without&quot;&gt;Underscore.js&lt;/a&gt; can be used to solve issues with multiple browsers. It uses in-build browser methods if present. If they are absent like in the case of older Internet&amp;nbsp;Explorer versions it uses its own custom methods.</source>
          <target state="translated">&lt;a href=&quot;http://underscorejs.org/#without&quot;&gt;Underscore.js&lt;/a&gt; 는 여러 브라우저의 문제를 해결하는 데 사용할 수 있습니다. 존재하는 경우 내장 브라우저 방법을 사용합니다. 이전 Internet Explorer 버전의 경우와 같이없는 경우 고유 한 사용자 지정 방법을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="c79ad5441320844b76631a15e17f3556c09229fc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://gist.github.com/zykadelic/5069236&quot;&gt;This gist here&lt;/a&gt; will solve your problem, and also deletes all occurrences of the argument instead of just 1 (or a specified value).</source>
          <target state="translated">&lt;a href=&quot;https://gist.github.com/zykadelic/5069236&quot;&gt;이 요점&lt;/a&gt; 은 문제를 해결하고 1 또는 지정된 값 대신 인수의 모든 발생을 삭제합니다.</target>
        </trans-unit>
        <trans-unit id="611f858aa14bf07213924f276e7edb39ab092c59" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;slice()&lt;/code&gt; creates a new array with the indexes it receives. We simply create a new array, from start to the index we want to remove, and concatenate another array from the first position following the one we removed to the end of the array.</source>
          <target state="translated">&lt;code&gt;slice()&lt;/code&gt; 는 수신 한 인덱스를 사용하여 새 배열을 만듭니다. 우리는 단순히 시작에서 제거하고자하는 인덱스에 이르기까지 새로운 배열을 만들고, 우리가 제거한 배열 다음에 오는 첫 번째 위치에서 다른 배열을 연결합니다.</target>
        </trans-unit>
        <trans-unit id="ab82a2126411b9a66d7a7c357ca0f03f0c8a83de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;splice()&lt;/code&gt; (not to be confused with &lt;code&gt;slice()&lt;/code&gt;) mutates the original array, and should be avoided.</source>
          <target state="translated">&lt;code&gt;splice()&lt;/code&gt; ( &lt;code&gt;slice()&lt;/code&gt; 와 혼동하지 말 것)는 원래 배열을 변경하므로 피해야합니다.</target>
        </trans-unit>
        <trans-unit id="7a91b31039db5af6a19da64305b8acb0cdd87060" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE&lt;/em&gt; : If &quot;stringToRemoveFromArray&quot; is not located your in array, this will remove last element of array.</source>
          <target state="translated">&lt;em&gt;참고&lt;/em&gt; : &quot;stringToRemoveFromArray&quot;가 배열에 없으면 배열의 마지막 요소가 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="892178def7455cb09728ee3cb3fb0028d5065df3" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;indexof&lt;/em&gt; is approximately 10x slower than &lt;em&gt;move&lt;/em&gt;. Even if improved by removing the call to &lt;code&gt;indexOf&lt;/code&gt; in &lt;em&gt;splice&lt;/em&gt; it performs much worse than &lt;em&gt;move&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;indexof&lt;/em&gt; 는 &lt;em&gt;이동&lt;/em&gt; 보다 약 10 배 느립니다. &lt;em&gt;스플 라이스&lt;/em&gt; 에서 &lt;code&gt;indexOf&lt;/code&gt; 에 대한 호출을 제거하여 개선하더라도 &lt;em&gt;이동&lt;/em&gt; 보다 훨씬 나쁩니다.</target>
        </trans-unit>
        <trans-unit id="8988123bae865b1300ce747e2d3850a0d9f80957" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;stringToRemoveFromArray&lt;/em&gt; : the string you want removed and 1 is the amount of elements you want to remove.</source>
          <target state="translated">&lt;em&gt;stringToRemoveFromArray&lt;/em&gt; : 제거하려는 문자열이고 1은 제거하려는 요소의 양입니다.</target>
        </trans-unit>
        <trans-unit id="5d22c8d0967243a99bfdfa8445901cf449cae21f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;theArray&lt;/em&gt; : the array you want to remove something particular from</source>
          <target state="translated">&lt;em&gt;theArray&lt;/em&gt; : 특정 항목을 제거하려는 배열</target>
        </trans-unit>
        <trans-unit id="74393367bc2c5b71b2d83967b6fab3e785a72270" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ES6 &amp;amp; without mutation:  (October 2016)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ES6 &amp;amp; 돌연변이 없음 : (2016 년 10 월)&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="28bcb5a317964f025eef45656b431ea3cf298091" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Find and move (move):&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;찾아서 이동 (이동) :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="076310371e6397adb469f1848e43527347fb1f5a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Hint&lt;/strong&gt;: please use an arrow function for filter callback unless you will get an empty array.</source>
          <target state="translated">&lt;strong&gt;힌트&lt;/strong&gt; : 빈 배열이 없으면 필터 콜백에 화살표 함수를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="609b01c38b98b33ae1916781ecc012571ca8c1d8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;IMPORTANT&lt;/strong&gt; &quot;array.includes(...)&quot; function is not supported in Internet&amp;nbsp;Explorer at all, Chrome before 47 version, Firefox before 43 version, Safari before 9 version, and Edge before 14 version so &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes#Polyfill&quot;&gt;&lt;strong&gt;here is polyfill from Mozilla&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;중요&lt;/strong&gt; &quot;array.includes (...)&quot;함수는 Internet Explorer, 47 이전 버전의 Chrome, 43 이전 버전의 Firefox, 9 이전 버전의 Safari 및 14 이전 버전의 Edge에서 전혀 지원되지 않으므로 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes#Polyfill&quot;&gt;&lt;strong&gt;Mozilla의 polyfill입니다&lt;/strong&gt;&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="9de13012f59ad740527b2d1c338c09d2fa7a0e37" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;IMPORTANT&lt;/strong&gt; ECMAScript&amp;nbsp;6 &quot;() =&amp;gt; {}&quot; arrow function syntax is not supported in Internet&amp;nbsp;Explorer at all, Chrome before 45 version, Firefox before 22 version, and Safari before 10 version. To use ECMAScript&amp;nbsp;6 syntax in old browsers you can use &lt;a href=&quot;http://babeljs.io&quot;&gt;BabelJS&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;중요&lt;/strong&gt; ECMAScript 6 &quot;() =&amp;gt; {}&quot;화살표 함수 구문은 Internet Explorer, 45 이전 버전의 Chrome, 22 이전 버전의 Firefox 및 10 이전 버전의 Safari에서 전혀 지원되지 않습니다. 이전 브라우저에서 ECMAScript 6 구문을 사용하려면 &lt;a href=&quot;http://babeljs.io&quot;&gt;BabelJS&lt;/a&gt; 를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="88c307e9733bc20de3106e3cee5b55ca39bd7c72" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE:&lt;/strong&gt; it will update the given array, and return the affected rows.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 주어진 배열을 업데이트하고 영향을받는 행을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="deeb6d90d8ca244318bf1c9f0eb580d9609c129f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;OK,&lt;/strong&gt; for example you have the array below:</source>
          <target state="translated">예를 들어 아래 배열이 있습니다.</target>
        </trans-unit>
        <trans-unit id="537bd903ff4c8e8f4da77846c6c743b57e4c6bea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Prototype method&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;프로토 타입 방법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c2a6eb120ac5d954b7aa47baca4f35f487d47fe8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reference&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Reference&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="eee1c67bc9de7a8138d0f79bc463c5e056713e42" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Removing a particular element/string from an array can be done in a one-liner:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;배열에서 특정 요소 / 문자열을 제거하는 것은 하나의 라이너로 수행 할 수 있습니다.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9fe3363b4b4ec9ef2c31a15f451244a7adfb38f9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Results for array with 1.000.000 elements&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;요소가 1.000.000 인 배열의 결과&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b16b2cedffbc2b7501c47a182bc43dca4a810f23" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Results for array with 10 elements&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;요소가 10 개인 배열의 결과&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d4f9f56e9b68e077ca52dc3c48df130009f98852" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Run-times on nodejs for array with 1000 elements (average over 10000 runs):&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;1000 개의 요소가있는 배열에 대한 nodejs의 런타임 (평균 10000 회 실행) :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="060b6b12ebe76d9863043cfb834041f940f23a02" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Stand-alone function&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;독립형 기능&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4e954dff295697b281cc36c09cba48ef320dd588" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Try it yourself in BabelJS :)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;BabelJS에서 직접보십시오 :)&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1b6578257f4bc0dd640490f50dead6b466dd6e87" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Update:&lt;/strong&gt; This method is recommended only if you cannot use ECMAScript 2015 (formerly known as ES6). If you can use it, other answers here provide much neater implementations.</source>
          <target state="translated">&lt;strong&gt;업데이트 :&lt;/strong&gt; 이 방법은 ECMAScript 2015 (이전의 ES6)를 사용할 수없는 경우에만 권장됩니다. 그것을 사용할 수 있다면, 여기에 다른 답변이 훨씬 깔끔한 구현을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="8eae0c2fd6aa8f39724e972da8dbfcc4b0341cb6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Use &lt;code&gt;indexOf&lt;/code&gt; and &lt;code&gt;splice&lt;/code&gt; (indexof):&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;indexOf&lt;/code&gt; 및 &lt;code&gt;splice&lt;/code&gt; (indexof)를 사용하십시오.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0d1fbe33957ad7bbde5209e065896287f2cb3d27" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Use only &lt;code&gt;splice&lt;/code&gt; (splice):&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;splice&lt;/code&gt; 만 사용하십시오 (스플 라이스) :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fdeffaeb0c1e585a81d090320b9ab7016c324272" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;delete&lt;/strong&gt;: &lt;code&gt;delete anArray[index];&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;delete&lt;/strong&gt; : &lt;code&gt;delete anArray[index];&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="53ba754b3525a6a5261703a386db52a68312485f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;indexOf&lt;/strong&gt; :</source>
          <target state="translated">&lt;strong&gt;indexOf&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="644952719b332e9874e9cc1233c36f266cd932ca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;splice()&lt;/strong&gt;: &lt;code&gt;anArray.splice(index, 1);&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;splice ()&lt;/strong&gt; : &lt;code&gt;anArray.splice(index, 1);&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="83bfc39e9a37dd6b6117105209aeac8ab281531a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;splice&lt;/strong&gt; :</source>
          <target state="translated">&lt;strong&gt;스플 라이스&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="c36e3a30f2d6a32cd5d72b825bdbbe142dde1e5e" translate="yes" xml:space="preserve">
          <source>A friend was having issues in &lt;a href=&quot;http://en.wikipedia.org/wiki/Internet_Explorer_8&quot;&gt;Internet&amp;nbsp;Explorer&amp;nbsp;8&lt;/a&gt; and showed me what he did. I told him it was wrong, and he told me he got the answer here. The current top answer will not work in all browsers (Internet&amp;nbsp;Explorer&amp;nbsp;8 for example), and it will only remove the first occurrence of the item.</source>
          <target state="translated">친구가 &lt;a href=&quot;http://en.wikipedia.org/wiki/Internet_Explorer_8&quot;&gt;Internet Explorer 8에&lt;/a&gt; 문제가있어서 자신이 한 일을 보여주었습니다. 나는 그것이 틀렸다고 말했고, 그는 여기에 답이 있다고 말했다. 현재 최고 답변은 일부 브라우저 (예 : Internet Explorer 8)에서 작동하지 않으며 항목의 첫 번째 항목 만 제거합니다.</target>
        </trans-unit>
        <trans-unit id="5758b12998637b11f8929c6f80e63cd2fdb0c5dd" translate="yes" xml:space="preserve">
          <source>A more modern, &lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015&quot;&gt;ECMAScript 2015&lt;/a&gt; (formerly known as Harmony or ES&amp;nbsp;6) approach. Given:</source>
          <target state="translated">보다 현대적인 &lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015&quot;&gt;ECMAScript 2015&lt;/a&gt; (이전 명칭 Harmony 또는 ES 6) 접근 방식. 주어진:</target>
        </trans-unit>
        <trans-unit id="f0b341371c6565d7f795ca026bfdd9eab34d1aac" translate="yes" xml:space="preserve">
          <source>A simple example to remove elements from array (from the website):</source>
          <target state="translated">웹 사이트에서 배열에서 요소를 제거하는 간단한 예 :</target>
        </trans-unit>
        <trans-unit id="c2e29fc81b754b51a7bd4216b9db9005b928d64e" translate="yes" xml:space="preserve">
          <source>All the method described &lt;strong&gt;do not mutate the original array&lt;/strong&gt;, and instead create a new one.</source>
          <target state="translated">설명 된 모든 메소드 &lt;strong&gt;는 원래 배열을 변경하지 않고&lt;/strong&gt; 대신 새 &lt;strong&gt;배열&lt;/strong&gt; 을 작성합니다.</target>
        </trans-unit>
        <trans-unit id="9b142d58affd0fb34a0888407fb2180dddcd912a" translate="yes" xml:space="preserve">
          <source>Also there are third-party libraries which do help you to do this, like Lodash or Underscore. For more information, look at lodash _.pull, _.pullAt or _.without.</source>
          <target state="translated">Lodash 또는 Underscore와 같이이를 수행하는 데 도움이되는 타사 라이브러리도 있습니다. 자세한 정보는 lodash _.pull, _.pullAt 또는 _.without을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="00717cffb29a457925f076b9a416f04196087b6a" translate="yes" xml:space="preserve">
          <source>An additional advantage of this method is that you can remove multiple items</source>
          <target state="translated">이 방법의 또 다른 장점은 여러 항목을 제거 할 수 있다는 것입니다</target>
        </trans-unit>
        <trans-unit id="8ee0b0a58a96e032a63a2d3d111c5ac52a5dcd76" translate="yes" xml:space="preserve">
          <source>And if you don't know the index of the item, you can use &lt;code&gt;array.indexOf(item)&lt;/code&gt; to get it (in a &lt;code&gt;if()&lt;/code&gt; to get one item or in a &lt;code&gt;while()&lt;/code&gt; to get all of them). &lt;code&gt;array.indexOf(item)&lt;/code&gt; returns either the index or -1 if not found.&amp;nbsp;</source>
          <target state="translated">그리고 항목의 색인을 모르는 경우 &lt;code&gt;array.indexOf(item)&lt;/code&gt; 을 사용하여 항목을 가져올 수 있습니다 ( &lt;code&gt;if()&lt;/code&gt; 에서 항목을 가져 오거나 &lt;code&gt;while()&lt;/code&gt; 에서 항목을 모두 가져 오기). &lt;code&gt;array.indexOf(item)&lt;/code&gt; 은 인덱스 또는 찾지 못한 경우 -1을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="270eff8f3ba7dc2ba8c56178ef7042dc932e6f85" translate="yes" xml:space="preserve">
          <source>And if you need the value of that item, you can just store the returned array's element:</source>
          <target state="translated">그리고 해당 항목의 값이 필요한 경우 반환 된 배열의 요소를 저장할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7ebe39c21a8b58a31651c3a1906f84f5a963136b" translate="yes" xml:space="preserve">
          <source>And we want to delete number 4. You can simply use the below code:</source>
          <target state="translated">그리고 우리는 숫자 4를 삭제하고 싶습니다. 아래 코드를 사용하면됩니다.</target>
        </trans-unit>
        <trans-unit id="afed19ab01cf9d1460611647f16032e1841d5acd" translate="yes" xml:space="preserve">
          <source>Array.prototype.includes</source>
          <target state="translated">Array.prototype.includes</target>
        </trans-unit>
        <trans-unit id="d205412e1013ba19f48e0e081ee7d15df8b656a4" translate="yes" xml:space="preserve">
          <source>Avoid mutating the original array</source>
          <target state="translated">원래 배열을 변경하지 마십시오</target>
        </trans-unit>
        <trans-unit id="7a4a66d748818d54d453c33cbac1fc30907786df" translate="yes" xml:space="preserve">
          <source>Based on all the answers which were mainly correct and taking into account the best practices suggested (especially not using Array.prototype directly), I came up with the below code:</source>
          <target state="translated">주로 정확하고 제안 된 모범 사례 (특히 Array.prototype을 직접 사용하지 않음)를 고려한 모든 답변을 바탕으로 아래 코드를 만들었습니다.</target>
        </trans-unit>
        <trans-unit id="752d68ce8018e6b7ad5769b04915aea42d6ee027" translate="yes" xml:space="preserve">
          <source>Be careful when you use delete for an array. It is good for deleting attributes of objects, but not so good for arrays. It is better to use &lt;code&gt;splice&lt;/code&gt; for arrays.</source>
          <target state="translated">배열에 delete를 사용할 때주의하십시오. 객체의 속성을 삭제하는 데는 좋지만 배열에는 좋지 않습니다. 배열에는 &lt;code&gt;splice&lt;/code&gt; 를 사용하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="67c0a1560b00da0823669062c515c2265a5ee5ef" translate="yes" xml:space="preserve">
          <source>But how about if you have the below array instead with a few [5]s in the array?</source>
          <target state="translated">그러나 배열에 몇 개의 [5]로 대신 아래 배열이 있다면 어떨까요?</target>
        </trans-unit>
        <trans-unit id="636238f4494666df4527913fe2f601c1ca964feb" translate="yes" xml:space="preserve">
          <source>But if you want to delete a special item like &lt;code&gt;3&lt;/code&gt; and you don't know its index, do like below:</source>
          <target state="translated">그러나 &lt;code&gt;3&lt;/code&gt; 과 같은 특수 항목을 삭제하고 색인을 모르는 경우 다음과 같이하십시오.</target>
        </trans-unit>
        <trans-unit id="9a3d31e2d9a524e74f6a3ee7975b24b4bf90ccd0" translate="yes" xml:space="preserve">
          <source>But the main reason I am posting this is to warn users against the alternative implementation suggested in the comments on that page (Dec 14, 2007):</source>
          <target state="translated">그러나 내가 이것을 게시하는 주된 이유는 사용자에게 해당 페이지의 의견에서 제안 된 대체 구현에 대해 경고하기위한 것입니다 (2007 년 12 월 14 일).</target>
        </trans-unit>
        <trans-unit id="cb87061cb61c9dbe3608367c7bfb2df479657ca6" translate="yes" xml:space="preserve">
          <source>By index</source>
          <target state="translated">색인 별</target>
        </trans-unit>
        <trans-unit id="6ee757280debcea7c9b487d87c4330ed2ff91427" translate="yes" xml:space="preserve">
          <source>By value</source>
          <target state="translated">가치</target>
        </trans-unit>
        <trans-unit id="4808a232c259d694412a4e631f80e6995e0208a5" translate="yes" xml:space="preserve">
          <source>Call this function</source>
          <target state="translated">이 함수를 호출</target>
        </trans-unit>
        <trans-unit id="5ce779ea8f657c1e9d48bc04cbf031ecd7bc9c0f" translate="yes" xml:space="preserve">
          <source>Check out this code. It works in every &lt;strong&gt;major browser&lt;/strong&gt;.</source>
          <target state="translated">이 코드를 확인하십시오. 모든 &lt;strong&gt;주요 브라우저&lt;/strong&gt; 에서 작동 &lt;strong&gt;합니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="a642c75da074a27c74e5e37cede4cdbecddc6d99" translate="yes" xml:space="preserve">
          <source>Comparison for browsers: Chrome v78.0.0, Safari v13.0.4, and Firefox v71.0.0</source>
          <target state="translated">브라우저 비교 : Chrome v78.0.0, Safari v13.0.4 및 Firefox v71.0.0</target>
        </trans-unit>
        <trans-unit id="bf1be2b7ad07bae2fe92475d10173eb638774def" translate="yes" xml:space="preserve">
          <source>Definition</source>
          <target state="translated">Definition</target>
        </trans-unit>
        <trans-unit id="dc3decbb93847518f1a049dcf49d0d7c6560bcc6" translate="yes" xml:space="preserve">
          <source>Details</source>
          <target state="translated">Details</target>
        </trans-unit>
        <trans-unit id="102af0498fc1a0fcc3c38d1f6e784f8f1d5131b4" translate="yes" xml:space="preserve">
          <source>Do it immutable (original array stay unchanged)</source>
          <target state="translated">변경 불가능 (원래 배열은 변경되지 않음)</target>
        </trans-unit>
        <trans-unit id="b0ef19e663785033e9ef614ab9b9239c8b35f5b5" translate="yes" xml:space="preserve">
          <source>Do it simple, intuitive and explicit (&lt;a href=&quot;https://en.wikipedia.org/wiki/Occam%27s_razor&quot;&gt;Occam's razor&lt;/a&gt;)</source>
          <target state="translated">간단하고 직관적이며 명시 적입니다 ( &lt;a href=&quot;https://en.wikipedia.org/wiki/Occam%27s_razor&quot;&gt;Occam 's razor&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="3490e6ac5ef084f31168e6d30889da48f49ffa83" translate="yes" xml:space="preserve">
          <source>Do it with standard JavaScript functions, if your browser doesn't support them - &lt;strong&gt;use polyfill&lt;/strong&gt;</source>
          <target state="translated">브라우저에서 지원하지 않는 경우 표준 JavaScript 함수로 수행하십시오. &lt;strong&gt;polyfill을 사용하십시오.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d166af755baa9f234415014c48b3ed88460e376c" translate="yes" xml:space="preserve">
          <source>E.g. if you have an object with an Id field and you want the object removed from an array:</source>
          <target state="translated">예를 들어 ID 필드가있는 객체가 있고 객체를 배열에서 제거하려는 경우 :</target>
        </trans-unit>
        <trans-unit id="eb211e7a732a17308be1f309bdff241d6a90881b" translate="yes" xml:space="preserve">
          <source>Edited on 2016 October</source>
          <target state="translated">2016 년 10 월 수정</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">스 니펫 확장</target>
        </trans-unit>
        <trans-unit id="30b0e12c2c94f47b68fa5ccb20476a6b70623235" translate="yes" xml:space="preserve">
          <source>Find the &lt;code&gt;index&lt;/code&gt; of the array element you want to remove using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf&quot;&gt;&lt;code&gt;indexOf&lt;/code&gt;&lt;/a&gt;, and then remove that index with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice&quot;&gt;&lt;code&gt;splice&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf&quot;&gt; &lt;code&gt;indexOf&lt;/code&gt; 를&lt;/a&gt; 사용하여 제거하려는 배열 요소의 &lt;code&gt;index&lt;/code&gt; 를 찾은 다음 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice&quot;&gt; &lt;code&gt;splice&lt;/code&gt; 로&lt;/a&gt; 해당 인덱스를 제거하십시오.</target>
        </trans-unit>
        <trans-unit id="cf873823acef1af3ee771a26f0cdf28493cf8f42" translate="yes" xml:space="preserve">
          <source>For further understanding you can read the MDN documentation on &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter&quot;&gt;Array.filter&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter&quot;&gt;Array.filter&lt;/a&gt; 에서 MDN 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="7f2700ad4c98cd8039e72339d830fef9f1ae90bb" translate="yes" xml:space="preserve">
          <source>Functional composition</source>
          <target state="translated">기능성 구성</target>
        </trans-unit>
        <trans-unit id="be5d89754199fe4effe4dd3576c2f17fa6dcc9b8" translate="yes" xml:space="preserve">
          <source>Here are a few ways to &lt;strong&gt;remove an item from an array using JavaScript&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;JavaScript를 사용하여 배열에서 항목&lt;/strong&gt; 을 &lt;strong&gt;제거하는&lt;/strong&gt; 몇 가지 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="082f68197b52d18635b26ed39d4617bf4ee21c9d" translate="yes" xml:space="preserve">
          <source>How can I remove a specific item from an array</source>
          <target state="translated">배열에서 특정 항목을 제거하는 방법</target>
        </trans-unit>
        <trans-unit id="8e090d332d9dabde6e435eafdb66e7b93d430d7f" translate="yes" xml:space="preserve">
          <source>How to use:</source>
          <target state="translated">사용하는 방법:</target>
        </trans-unit>
        <trans-unit id="5b4032277da1069acfbec32fadd887ce6ff0eb2e" translate="yes" xml:space="preserve">
          <source>I am currently writing a blog post in which I have benchmarked several solutions for Array without problem and compared the time it takes to run. I will update this answer with the link once I finish that post. Just to let you know, I have compared the above against lodash's without and in case the browser supports &lt;code&gt;Map&lt;/code&gt;, it beats lodash! Notice that I am not using &lt;code&gt;Array.prototype.indexOf&lt;/code&gt; or &lt;code&gt;Array.prototype.includes&lt;/code&gt; as wrapping the exlcudeValues in a &lt;code&gt;Map&lt;/code&gt; or &lt;code&gt;Object&lt;/code&gt; makes querying faster!</source>
          <target state="translated">현재 Array에 대한 몇 가지 솔루션을 문제없이 벤치마킹하고 실행하는 데 걸리는 시간을 비교 한 블로그 게시물을 작성 중입니다. 해당 게시물을 마치면 링크로이 답변을 업데이트하겠습니다. 알려 드리기 위해 위의 내용을 lodash와 비교했으며 브라우저가 &lt;code&gt;Map&lt;/code&gt; 을 지원하는 경우 lodash보다 뛰어납니다! ExlcudeValues를 &lt;code&gt;Map&lt;/code&gt; 또는 &lt;code&gt;Object&lt;/code&gt; 에 래핑하면 쿼리가 빨라지므로 &lt;code&gt;Array.prototype.indexOf&lt;/code&gt; 또는 &lt;code&gt;Array.prototype.includes&lt;/code&gt; 를 사용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="927b786a9b3b8d90436a3a819d7992491d63fccb" translate="yes" xml:space="preserve">
          <source>I don't know how you are expecting &lt;code&gt;array.remove(int)&lt;/code&gt; to behave. There are three possibilities I can think of that you might want.</source>
          <target state="translated">&lt;code&gt;array.remove(int)&lt;/code&gt; 가 어떻게 작동 할 지 모르겠습니다. 내가 생각할 수있는 세 가지 가능성이 있습니다.</target>
        </trans-unit>
        <trans-unit id="2fb2a8dc2409ddc56e72d778923d524f41705f2b" translate="yes" xml:space="preserve">
          <source>I have an array of numbers, and I'm using the &lt;code&gt;.push()&lt;/code&gt; method to add elements to it.</source>
          <target state="translated">숫자 배열이 있고 &lt;code&gt;.push()&lt;/code&gt; 메서드를 사용하여 요소를 추가하고 있습니다.</target>
        </trans-unit>
        <trans-unit id="6ec608995ebf679f514ce2f47d8154853d69f60d" translate="yes" xml:space="preserve">
          <source>I have to use &lt;em&gt;core&lt;/em&gt; JavaScript - frameworks are not allowed.</source>
          <target state="translated">&lt;em&gt;핵심&lt;/em&gt; JavaScript를 사용해야합니다. 프레임 워크는 허용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b91ef97accd928c1d49c2eafd10e5535d9f2567d" translate="yes" xml:space="preserve">
          <source>I know there are a lot of answers already, but many of them seem to over complicate the problem.  Here is a simple, recursive way of removing all instances of a key - calls self until index isn't found.  Yes, it only works in browsers with &lt;code&gt;indexOf&lt;/code&gt;, but it's simple and can be easily polyfilled.</source>
          <target state="translated">나는 이미 많은 대답이 있다는 것을 알고 있지만 많은 사람들이 문제를 지나치게 복잡하게하는 것 같습니다. 다음은 키의 모든 인스턴스를 제거하는 간단하고 재귀적인 방법입니다. 인덱스를 찾을 수 없을 때까지 자체 호출합니다. 예, &lt;code&gt;indexOf&lt;/code&gt; 브라우저에서만 작동하지만 간단하고 쉽게 채울 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="99f8ef90039d331cf04a0245f8741bad896c1816" translate="yes" xml:space="preserve">
          <source>I want to answer based on &lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015&quot;&gt;ECMAScript&amp;nbsp;6&lt;/a&gt;. Assume, you have an array like below:</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015&quot;&gt;ECMAScript 6을&lt;/a&gt; 기반으로 답변하고 싶습니다. 아래와 같은 배열이 있다고 가정하십시오.</target>
        </trans-unit>
        <trans-unit id="f22753c9c42b1a1d3f482dec1414a40ee592735c" translate="yes" xml:space="preserve">
          <source>I'm pretty new to JavaScript and needed this functionality. I merely wrote this:</source>
          <target state="translated">저는 JavaScript를 처음 접했고이 기능이 필요했습니다. 나는 단지 이것을 썼다 :</target>
        </trans-unit>
        <trans-unit id="1181f5b3e98c311ad4f68627ced64b09d807b95c" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;https://github.com/tc39/proposal-bind-operator&quot;&gt;&quot;This-Binding Syntax&quot;&lt;/a&gt; proposal is ever accepted, you'll be able to do this:</source>
          <target state="translated">&lt;a href=&quot;https://github.com/tc39/proposal-bind-operator&quot;&gt;&quot;This-Binding Syntax&quot;&lt;/a&gt; 제안이 승인되면 다음을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fe98cb810962b5edccd9ad617768f8f2a4083258" translate="yes" xml:space="preserve">
          <source>If you are forced to use &lt;code&gt;delete&lt;/code&gt; for some reason, then you should use &lt;a href=&quot;https://stackoverflow.com/questions/9329446/for-each-over-an-array-in-javascript&quot;&gt;&lt;code&gt;for each&lt;/code&gt;&lt;/a&gt; loops when you need to loop through arrays. As the matter of fact, always avoid using indexed &lt;code&gt;for&lt;/code&gt; loops, if possible. That way the code would be more robust and less prone to problems with indexes.</source>
          <target state="translated">어떤 이유로 &lt;code&gt;delete&lt;/code&gt; 를 사용해야하는 경우 배열을 반복해야 할 때 &lt;a href=&quot;https://stackoverflow.com/questions/9329446/for-each-over-an-array-in-javascript&quot;&gt; &lt;code&gt;for each&lt;/code&gt; &lt;/a&gt; 루프 마다 사용해야합니다. 사실, 가능하면 항상 색인화 된 &lt;code&gt;for&lt;/code&gt; 루프를 사용하지 마십시오. 그렇게하면 코드가 더 강력 해지고 인덱스 문제가 덜 발생합니다.</target>
        </trans-unit>
        <trans-unit id="f3372c2f5ce756c0a85bf1ae13434ef583a0b420" translate="yes" xml:space="preserve">
          <source>If you are reusing this function, you write a reusable function which will be attached to the &lt;em&gt;native&lt;/em&gt; array function like below:</source>
          <target state="translated">이 함수를 재사용하는 경우 재사용 가능한 함수를 작성하면 아래와 같이 &lt;em&gt;기본&lt;/em&gt; 배열 함수에 첨부됩니다.</target>
        </trans-unit>
        <trans-unit id="bc4f3d4d9d3fd7908808745b03af3822dc8c23e1" translate="yes" xml:space="preserve">
          <source>If you do want an empty slot, delete is fine:</source>
          <target state="translated">빈 슬롯을 원하면 삭제해도됩니다.</target>
        </trans-unit>
        <trans-unit id="fbfd1cb87dd44cdccdafdf3698d6ea6358bfdbaa" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t want to extend a global object, you can do something like the following, instead:</source>
          <target state="translated">전역 객체를 확장하지 않으려는 경우 대신 다음과 같은 작업을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5942963f1ab27ee6bb5d5f5a0b74d4b5291141b2" translate="yes" xml:space="preserve">
          <source>If you don't, you should use the &lt;a href=&quot;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice&quot;&gt;splice&lt;/a&gt; method:</source>
          <target state="translated">그렇지 않으면 &lt;a href=&quot;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice&quot;&gt;접속&lt;/a&gt; 방법을 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="9572aa6fb591d1ba9a758c5dcffa6d3d5f13f53f" translate="yes" xml:space="preserve">
          <source>If you have access to newer Ecmascript versions on your client's computers (WARNING, may not work on older stations):</source>
          <target state="translated">클라이언트 컴퓨터에서 최신 Ecmascript 버전에 액세스 할 수있는 경우 (경고, 이전 스테이션에서는 작동하지 않을 수 있음) :</target>
        </trans-unit>
        <trans-unit id="7371d04296336bdc6cc86bc910a62bd92156f86f" translate="yes" xml:space="preserve">
          <source>If you have complex objects in the array you can use filters? 
In situations where $.inArray or array.splice is not as easy to use. Especially if the objects are perhaps shallow in the array.</source>
          <target state="translated">배열에 복잡한 객체가 있다면 필터를 사용할 수 있습니까? $ .inArray 또는 array.splice가 사용하기 쉽지 않은 상황. 특히 객체가 배열에서 얕을 경우.</target>
        </trans-unit>
        <trans-unit id="03661e4b8eeedca39fe42a165e0ff1f205706501" translate="yes" xml:space="preserve">
          <source>If you just want to make the element at index &lt;code&gt;i&lt;/code&gt; no longer exist, but you don't want the indexes of the other elements to change:</source>
          <target state="translated">인덱스의 요소를 더 이상 만들지 않으려면 더 이상 존재하지 않지만 다른 요소의 인덱스를 변경하지 않으려는 경우 :</target>
        </trans-unit>
        <trans-unit id="6bebdca438b5d73432e1fa39809f57e0d61f8581" translate="yes" xml:space="preserve">
          <source>If you know the index of an item</source>
          <target state="translated">아이템의 인덱스를 알고 있다면</target>
        </trans-unit>
        <trans-unit id="10e357536eb6c14e8daa988c5e9c2549670b880b" translate="yes" xml:space="preserve">
          <source>If you know the value</source>
          <target state="translated">가치를 알고 있다면</target>
        </trans-unit>
        <trans-unit id="4b30477bc084b9503454a9d63596c918f07bea32" translate="yes" xml:space="preserve">
          <source>If you want a new array with the deleted positions removed, you can always delete the specific element and filter out the array. It might need an extension of the &lt;a href=&quot;http://www.tutorialspoint.com/javascript/array_filter.htm&quot;&gt;array object&lt;/a&gt; for browsers that don't implement the filter method, but in the long term it's easier since all you do is this:</source>
          <target state="translated">삭제 된 위치가 제거 된 새 배열을 원할 경우 항상 특정 요소를 삭제하고 배열을 필터링 할 수 있습니다. 필터 메소드를 구현하지 않는 브라우저의 경우 &lt;a href=&quot;http://www.tutorialspoint.com/javascript/array_filter.htm&quot;&gt;배열 객체&lt;/a&gt; 의 확장이 필요할 수 있지만 장기적으로는 모든 것이 다음과 같으므로 더 쉽습니다.</target>
        </trans-unit>
        <trans-unit id="f73177c0ed0f47b2292c8281cec1b30bcc003d73" translate="yes" xml:space="preserve">
          <source>If you want to delete at a special index like &lt;code&gt;2&lt;/code&gt;, write the below code:</source>
          <target state="translated">&lt;code&gt;2&lt;/code&gt; 와 같은 특수 색인에서 삭제하려면 아래 코드를 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="2e5d1d8d84d892f7295a13a744e6685cc8e63876" translate="yes" xml:space="preserve">
          <source>If you want to multiple values. Example:- 1,7,8</source>
          <target state="translated">여러 값을 원할 경우 예 :-1,7,8</target>
        </trans-unit>
        <trans-unit id="3a6a212fba01ffed8f6fc4267775768fbbb30bed" translate="yes" xml:space="preserve">
          <source>If you want to remove an array value in an array. Example: [3,4,5]</source>
          <target state="translated">배열에서 배열 값을 제거하려는 경우. 예 : [3,4,5]</target>
        </trans-unit>
        <trans-unit id="8b23b0bad0c2ead983b02550bf037747cf944928" translate="yes" xml:space="preserve">
          <source>If you want to remove every element with value &lt;code&gt;number&lt;/code&gt; from the array:</source>
          <target state="translated">배열에서 값 &lt;code&gt;number&lt;/code&gt; 를 가진 모든 요소를 ​​제거하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="11c7cad7fbca387926792a22255bc6f88a7d7f1d" translate="yes" xml:space="preserve">
          <source>In Chrome the &lt;code&gt;array.splice&lt;/code&gt; (C) is the fastest in-place solution (the &lt;code&gt;delete&lt;/code&gt; (C) is similar fast - but it left an empty slot in the array (so it does not perform a 'full remove')). The &lt;code&gt;array.slice-splice&lt;/code&gt; (H) is the fastest immutable solution. The slowest is &lt;code&gt;array.filter&lt;/code&gt; (D and E). You can perform the test on your machine &lt;a href=&quot;https://jsperf.com/big-array-remove-element&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">Chrome에서 &lt;code&gt;array.splice&lt;/code&gt; (C)는 가장 빠른 인플레 이스 솔루션입니다 ( &lt;code&gt;delete&lt;/code&gt; (C)는 빠르지 만 어레이에 빈 슬롯이 남아 있으므로 '전체 제거'를 수행하지 않습니다). &lt;code&gt;array.slice-splice&lt;/code&gt; (H)는 가장 빠른 불변 솔루션입니다. 가장 느린 것은 &lt;code&gt;array.filter&lt;/code&gt; (D 및 E)입니다. &lt;a href=&quot;https://jsperf.com/big-array-remove-element&quot;&gt;여기&lt;/a&gt; 에서 컴퓨터 에서 테스트를 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="caf079bc0736886b51cf720bae37155f17dde8fc" translate="yes" xml:space="preserve">
          <source>In Chrome the &lt;code&gt;array.splice&lt;/code&gt; (C) is the fastest in-place solution. The &lt;code&gt;array.filter&lt;/code&gt; (D) is the fastest immutable solution. The slowest is &lt;code&gt;array.slice&lt;/code&gt; (F). You can perform the test on your machine &lt;a href=&quot;https://jsperf.com/small-array-remove-element&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">Chrome에서는 &lt;code&gt;array.splice&lt;/code&gt; (C)가 가장 빠른 전체 솔루션입니다. &lt;code&gt;array.filter&lt;/code&gt; (D)는 가장 빠른 불변 솔루션입니다. 가장 느린 것은 &lt;code&gt;array.slice&lt;/code&gt; (F)입니다. &lt;a href=&quot;https://jsperf.com/small-array-remove-element&quot;&gt;여기&lt;/a&gt; 에서 컴퓨터 에서 테스트를 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e50e0d2f98661e18f47697909df261e2562aca3b" translate="yes" xml:space="preserve">
          <source>In case you want to do it in some order, you can use &lt;code&gt;array.pop()&lt;/code&gt; for the last one or &lt;code&gt;array.shift()&lt;/code&gt; for the first one (and both return the value of the item too).</source>
          <target state="translated">어떤 순서로하고 싶다면 마지막에 &lt;code&gt;array.shift()&lt;/code&gt; 을 사용하고 첫 번째에 array.shift () 를 사용하십시오 (두 항목 모두 값을 반환합니다).</target>
        </trans-unit>
        <trans-unit id="88d94bafb139b60e6ad0c18bca1523e5097fc204" translate="yes" xml:space="preserve">
          <source>In tests I remove middle element from the array in different ways. The &lt;strong&gt;A, C&lt;/strong&gt; solutions are in-place. The &lt;strong&gt;B, D, E, F, G, H&lt;/strong&gt; solutions are immutable.</source>
          <target state="translated">테스트에서 다른 방법으로 배열에서 중간 요소를 제거합니다. &lt;strong&gt;A, C&lt;/strong&gt; 솔루션이 제자리에 있습니다. &lt;strong&gt;B, D, E, F, G, H&lt;/strong&gt; 솔루션은 변경할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="fa2a957836e3e3e965443e00d5b8014f957fd2d7" translate="yes" xml:space="preserve">
          <source>In this case, one good option is to use &lt;code&gt;filter()&lt;/code&gt;, which offers a more &lt;em&gt;declarative&lt;/em&gt; approach:</source>
          <target state="translated">이 경우 한 가지 좋은 옵션은 더 &lt;em&gt;선언&lt;/em&gt; 적인 접근 방식을 제공하는 &lt;code&gt;filter()&lt;/code&gt; 를 사용하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="498070503dedbcf580c4b4c58484bd91a1296236" translate="yes" xml:space="preserve">
          <source>In this code example I use &lt;strong&gt;&quot;array.filter(...)&quot;&lt;/strong&gt; function to remove unwanted items from an array. This function doesn't change the original array and creates a new one. If your browser doesn't support this function (e.g. Internet Explorer before version 9, or Firefox before version 1.5), consider using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter#Polyfill&quot;&gt;&lt;strong&gt;the filter polyfill from Mozilla&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">이 코드 예제에서는 &lt;strong&gt;&quot;array.filter (...)&quot;&lt;/strong&gt; 함수를 사용하여 배열에서 불필요한 항목을 제거합니다. 이 함수는 원래 배열을 변경하지 않고 새 배열을 만듭니다. 브라우저가이 기능을 지원하지 않는 경우 (예 : 버전 9 이전의 Internet Explorer 또는 버전 1.5 이전의 Firefox) &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter#Polyfill&quot;&gt;&lt;strong&gt;Mozilla의 필터 폴리 필&lt;/strong&gt;&lt;/a&gt; 사용을 고려 &lt;strong&gt;하십시오&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="80818db9c412b0e73f689f5b35ec90056bf0f156" translate="yes" xml:space="preserve">
          <source>Includes supported browser is &lt;a href=&quot;https://www.w3schools.com/jsref/jsref_includes_array.asp&quot;&gt;link&lt;/a&gt;.</source>
          <target state="translated">지원되는 브라우저는 &lt;a href=&quot;https://www.w3schools.com/jsref/jsref_includes_array.asp&quot;&gt;link&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="a3b566523b6d44597530fd44e674307786fd43f6" translate="yes" xml:space="preserve">
          <source>Is there a simple way to remove a specific element from an array?</source>
          <target state="translated">배열에서 특정 요소를 제거하는 간단한 방법이 있습니까?</target>
        </trans-unit>
        <trans-unit id="6d9faccbff79e531cf75ea60dafd6931c055c065" translate="yes" xml:space="preserve">
          <source>It depends on whether you want to keep an empty spot or not.</source>
          <target state="translated">빈 자리를 유지할지 여부에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="686571bd0f8f4510d5be45242cdd7f21b7d25fae" translate="yes" xml:space="preserve">
          <source>It loops through the array backwards (since indices and length will change as items are removed) and removes the item if it's found. It works in all browsers.</source>
          <target state="translated">배열을 거꾸로 반복합니다 (항목이 제거됨에 따라 색인 및 길이가 변경되므로). 발견되면 항목을 제거합니다. 모든 브라우저에서 작동합니다.</target>
        </trans-unit>
        <trans-unit id="4f65363f7ff3162732e6955c472e3956fb50925b" translate="yes" xml:space="preserve">
          <source>It seems to work well at first, but through a painful process I discovered it fails when trying to remove the second to last element in an array. For example, if you have a 10-element array and you try to remove the 9th element with this:</source>
          <target state="translated">처음에는 잘 작동하는 것처럼 보이지만 고통스러운 프로세스를 통해 배열에서 두 번째에서 마지막 요소를 제거하려고 할 때 실패한다는 것을 알았습니다. 예를 들어 10 원소 배열이 있고 9 번째 원소를 제거하려고 시도하는 경우 :</target>
        </trans-unit>
        <trans-unit id="c5aa5f5ae0043ff28d03e1421f43352cc3a4915d" translate="yes" xml:space="preserve">
          <source>It should display &lt;code&gt;[1, 2, 3, 4, 6]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;[1, 2, 3, 4, 6]&lt;/code&gt; 이 표시되어야합니다.</target>
        </trans-unit>
        <trans-unit id="13c8f72d6490a322ee4ec3a3f6ba4f1da3965b80" translate="yes" xml:space="preserve">
          <source>Its always good practice to check if the element exists in your array first, before removing it.</source>
          <target state="translated">요소를 제거하기 전에 먼저 배열에 요소가 있는지 확인하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="eb92a3c06243ace55e68e74a8ad80c70a428be40" translate="yes" xml:space="preserve">
          <source>John Resig &lt;a href=&quot;http://ejohn.org/blog/javascript-array-remove/&quot;&gt;posted a good implementation&lt;/a&gt;:</source>
          <target state="translated">John Resig &lt;a href=&quot;http://ejohn.org/blog/javascript-array-remove/&quot;&gt;는 훌륭한 구현을 게시했습니다&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="83a8666e2fe0581a766f2f548db8c6082aad23b4" translate="yes" xml:space="preserve">
          <source>Keep in mind that when you use &lt;code&gt;delete&lt;/code&gt; for an array you could get wrong results for &lt;code&gt;anArray.length&lt;/code&gt;. In other words, &lt;code&gt;delete&lt;/code&gt; would remove the element, but it wouldn't update the value of length property.</source>
          <target state="translated">배열에 대해 &lt;code&gt;delete&lt;/code&gt; 를 사용하면 &lt;code&gt;anArray.length&lt;/code&gt; 에 대해 잘못된 결과가 발생할 수 있습니다. 즉, &lt;code&gt;delete&lt;/code&gt; 는 요소를 제거하지만 length 속성 값은 업데이트하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7e90d8509520dead5bd5a5b859df180f1f691173" translate="yes" xml:space="preserve">
          <source>Let's find the simplest solution.</source>
          <target state="translated">가장 간단한 해결책을 찾으십시오.</target>
        </trans-unit>
        <trans-unit id="4fe8642303776edd465667b801642d103c9ebf69" translate="yes" xml:space="preserve">
          <source>One method is to use &lt;code&gt;slice()&lt;/code&gt;:</source>
          <target state="translated">한 가지 방법은 &lt;code&gt;slice()&lt;/code&gt; 를 사용하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="fa81114985626064cd037702c8d3a5410af20899" translate="yes" xml:space="preserve">
          <source>Output - As expected.
[&quot;item1&quot;, &quot;item1&quot;]</source>
          <target state="translated">출력-예상대로. [ &quot;item1&quot;, &quot;item1&quot;]</target>
        </trans-unit>
        <trans-unit id="e05424a323bcb65461ca7f73ba902a8cd6e1aef2" translate="yes" xml:space="preserve">
          <source>Output :</source>
          <target state="translated">출력 :</target>
        </trans-unit>
        <trans-unit id="63c904559993935c470f516c8b549ca7f3640dbb" translate="yes" xml:space="preserve">
          <source>Performance</source>
          <target state="translated">Performance</target>
        </trans-unit>
        <trans-unit id="1c6f860e82983c0e1d7308c9b028e952494b5b23" translate="yes" xml:space="preserve">
          <source>Remove ALL instances from an array</source>
          <target state="translated">배열에서 모든 인스턴스 제거</target>
        </trans-unit>
        <trans-unit id="dd345246f3a62eadb99621467548ed97cad3f9c8" translate="yes" xml:space="preserve">
          <source>Removing item (ECMA-262 Edition 5 code aka oldstyle JavaScript)</source>
          <target state="translated">항목 제거 (ECMA-262 Edition 5 코드 일명 oldstyle JavaScript)</target>
        </trans-unit>
        <trans-unit id="6021444c0ce03849355f32908527d14956560e4a" translate="yes" xml:space="preserve">
          <source>Removing item (ECMAScript 6 code)</source>
          <target state="translated">항목 제거 (ECMAScript 6 코드)</target>
        </trans-unit>
        <trans-unit id="79698ecdbbb6691abfcc91f341416cfd3b919327" translate="yes" xml:space="preserve">
          <source>Removing multiple items</source>
          <target state="translated">여러 항목 제거</target>
        </trans-unit>
        <trans-unit id="1391fc6121536c69a9066cd7dc9a5fb16d5ccc6f" translate="yes" xml:space="preserve">
          <source>Removing multiple items (ECMAScript&amp;nbsp;7 code)</source>
          <target state="translated">여러 항목 제거 (ECMAScript 7 코드)</target>
        </trans-unit>
        <trans-unit id="3c18435712685ddfeaed93ce198962c0c5f904ef" translate="yes" xml:space="preserve">
          <source>Removing multiple items (in the future, maybe)</source>
          <target state="translated">여러 항목 제거 (향후에)</target>
        </trans-unit>
        <trans-unit id="ca50a9128b4f70d51a41612e2cbc3c50eca21198" translate="yes" xml:space="preserve">
          <source>Reviewing the above function, despite the fact that it works fine, I realised there could be some performance improvement. Also using ES6 instead of ES5 is a much better approach. To that end, this is the improved code:</source>
          <target state="translated">위의 기능을 검토하면 제대로 작동한다는 사실에도 불구하고 성능이 약간 향상 될 수 있음을 깨달았습니다. ES5 대신 ES6을 사용하는 것이 훨씬 더 나은 방법입니다. 이를 위해 다음은 개선 된 코드입니다.</target>
        </trans-unit>
        <trans-unit id="4bcb4e163bf193fe874c35e7a1a754e4ed2bd51c" translate="yes" xml:space="preserve">
          <source>Show code snippet</source>
          <target state="translated">코드 스 니펫 표시</target>
        </trans-unit>
        <trans-unit id="396e7262b5eaaaad4ec7050568c42ec2308bf565" translate="yes" xml:space="preserve">
          <source>Suppose you have an array, and you want to remove an item in position &lt;code&gt;i&lt;/code&gt;.</source>
          <target state="translated">배열이 있고 위치 &lt;code&gt;i&lt;/code&gt; 에서 항목을 제거하려고한다고 가정하십시오.</target>
        </trans-unit>
        <trans-unit id="d16064c8df6dfe7f81fca710dbc0a235aca8e2b7" translate="yes" xml:space="preserve">
          <source>Suppose you want to remove &lt;code&gt;5&lt;/code&gt; from the array, you can simply do it like this:</source>
          <target state="translated">배열에서 &lt;code&gt;5&lt;/code&gt; 를 제거한다고 가정하면 다음과 같이 간단하게 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bfaffadd71dc5fc67d907dab7b830f954260fa35" translate="yes" xml:space="preserve">
          <source>The conclusions</source>
          <target state="translated">결론</target>
        </trans-unit>
        <trans-unit id="d7904ee35e807fd3941ec5d6be346fc95b7844e0" translate="yes" xml:space="preserve">
          <source>The equivalent of something like -</source>
          <target state="translated">같은 것-</target>
        </trans-unit>
        <trans-unit id="9e4b1951c4e95e36879f8b5fd3af791eea061e0b" translate="yes" xml:space="preserve">
          <source>The indexOf() command returns the first index at which a given element
  can be found in the array, or -1 if it is not present. This can be
  used along with splice() to search for an element and then remove it,
  even if you don&amp;rsquo;t know where it is in the array.</source>
          <target state="translated">indexOf () 명령은 배열에서 주어진 요소를 찾을 수있는 첫 번째 인덱스를 반환하거나없는 경우 -1을 반환합니다. splice ()와 함께 사용하여 요소를 검색 한 다음 배열의 위치를 ​​모르더라도 제거 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a5c2d1fee1b47896b6980e235748f3e6548bf6c2" translate="yes" xml:space="preserve">
          <source>The second parameter of &lt;code&gt;splice&lt;/code&gt; is the number of elements to remove. Note that &lt;code&gt;splice&lt;/code&gt; modifies the array in place and returns a new array containing the elements that have been removed.</source>
          <target state="translated">접속의 두 번째 매개 변수는 제거 할 요소의 수입니다. &lt;code&gt;splice&lt;/code&gt; 는 배열을 제자리에서 수정하고 제거 된 요소가 포함 된 새 배열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="bb6c0a0f03d89fc233f52358164cdf5afd892b2b" translate="yes" xml:space="preserve">
          <source>The splice() method adds/removes items to/from an array, and returns
  the removed item(s).</source>
          <target state="translated">splice () 메서드는 배열에 항목을 추가 / 제거하고 제거 된 항목을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="d4607f5f4d353df616911ce44cbb32ce72dbbf7a" translate="yes" xml:space="preserve">
          <source>The splice() method changes the contents of an array by removing
  existing elements and/or adding new elements.</source>
          <target state="translated">splice () 메서드는 기존 요소를 제거하거나 새 요소를 추가하여 배열의 내용을 변경합니다.</target>
        </trans-unit>
        <trans-unit id="100ca418894b30cc7048f6097c41af7932ab0077" translate="yes" xml:space="preserve">
          <source>Then when I want to use it:</source>
          <target state="translated">그런 다음 사용하고 싶을 때 :</target>
        </trans-unit>
        <trans-unit id="2304d640a16ae9bfebc931161006126d186e787e" translate="yes" xml:space="preserve">
          <source>Then:</source>
          <target state="translated">Then:</target>
        </trans-unit>
        <trans-unit id="d0784cbb4a7760d5504fc97cb4ffb29fd3ddafff" translate="yes" xml:space="preserve">
          <source>There are two major approaches:</source>
          <target state="translated">두 가지 주요 접근 방식이 있습니다.</target>
        </trans-unit>
        <trans-unit id="81ed33d4e6d26655e174a94f2749ed4bf5c89986" translate="yes" xml:space="preserve">
          <source>There is no need to use &lt;code&gt;indexOf&lt;/code&gt; or &lt;code&gt;splice&lt;/code&gt;. However, it performs better if you only want to remove one occurrence of an element.</source>
          <target state="translated">&lt;code&gt;indexOf&lt;/code&gt; 또는 &lt;code&gt;splice&lt;/code&gt; 를 사용할 필요가 없습니다. 그러나 한 요소 만 제거하려는 경우 성능이 더 좋습니다.</target>
        </trans-unit>
        <trans-unit id="f15d799c8985961cb5869dfa10f087e763105ff2" translate="yes" xml:space="preserve">
          <source>This provides a predicate instead of a value.</source>
          <target state="translated">이것은 값 대신 술어를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="52cdaf49f7d8f6b0c1df575832e553cba5b685ce" translate="yes" xml:space="preserve">
          <source>This removes all elements from the array and also works faster than a combination of &lt;code&gt;slice&lt;/code&gt; and &lt;code&gt;indexOf&lt;/code&gt;.</source>
          <target state="translated">이렇게하면 배열에서 모든 요소가 제거되고 &lt;code&gt;slice&lt;/code&gt; 및 &lt;code&gt;indexOf&lt;/code&gt; 조합보다 빠르게 작동합니다.</target>
        </trans-unit>
        <trans-unit id="9c0327ed7faf0fa2151a1489f705eecf201e4b6e" translate="yes" xml:space="preserve">
          <source>This uses the ES6 arrow functions. You can use the traditional functions to support older browsers:</source>
          <target state="translated">ES6 화살표 기능을 사용합니다. 기존 기능을 사용하여 이전 브라우저를 지원할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="34d0d7b577fb5006d8c1367d41d5e85742843924" translate="yes" xml:space="preserve">
          <source>This will give you a new array without the value you wanted to remove. So the result will be:</source>
          <target state="translated">제거하려는 값이없는 새 배열이 제공됩니다. 결과는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="4f86bec82e40ec8b9eaeb7815f5db7458e7f954c" translate="yes" xml:space="preserve">
          <source>To remove an element of an array at an index &lt;code&gt;i&lt;/code&gt;:</source>
          <target state="translated">인덱스 &lt;code&gt;i&lt;/code&gt; 에서 배열의 요소를 제거하려면</target>
        </trans-unit>
        <trans-unit id="14fdd2b48aac9ef5c9ec89a868f0525541e378f8" translate="yes" xml:space="preserve">
          <source>Today (2019-12-09) I conduct performance tests on macOS v10.13.6 (High Sierra) for chosen solutions. I show &lt;code&gt;delete&lt;/code&gt; (A), but I not use it in comparison with other methods, because it left empty space in the array.</source>
          <target state="translated">오늘 (2019-12-09) 저는 선택한 솔루션에 대해 macOS v10.13.6 (High Sierra)에서 성능 테스트를 수행합니다. &lt;code&gt;delete&lt;/code&gt; (A)를 표시하지만 배열에 빈 공간이 남아 있기 때문에 다른 방법과 비교하여 사용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="861a0e430ffac5e4ae6e11b7a947f2c32d388cf4" translate="yes" xml:space="preserve">
          <source>Usage:</source>
          <target state="translated">Usage:</target>
        </trans-unit>
        <trans-unit id="61fc9a71da87a6e263a155a0c228fa2a22592aa6" translate="yes" xml:space="preserve">
          <source>We need a loop to check them all, but an easier and more efficient way is using built-in JavaScript functions, so we write a function which use a filter like below instead:</source>
          <target state="translated">모두 확인하려면 루프가 필요하지만 더 쉽고 효율적인 방법은 내장 JavaScript 함수를 사용하는 것이므로 대신 아래와 같은 필터를 사용하는 함수를 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="054c50767d336aa2c0fab0b733b5916cca6932df" translate="yes" xml:space="preserve">
          <source>What if instead of a single item, you want to remove many items?</source>
          <target state="translated">단일 항목 대신 많은 항목을 제거하려면 어떻게합니까?</target>
        </trans-unit>
        <trans-unit id="3439f7b5c8df636860f7e93aae4a23f274295565" translate="yes" xml:space="preserve">
          <source>Where '3' is the value you want removed from the array.
The array would then become : &lt;code&gt;['1','2','4','5','6']&lt;/code&gt;</source>
          <target state="translated">여기서 '3'은 배열에서 제거하려는 값입니다. 그러면 배열은 다음과 같이됩니다. &lt;code&gt;['1','2','4','5','6']&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="73b0a9d9b8aab9366bb561586105a737b1c9764b" translate="yes" xml:space="preserve">
          <source>Yielding:</source>
          <target state="translated">Yielding:</target>
        </trans-unit>
        <trans-unit id="7e37a657190bbcf503a467a4c0e23c15acbd411a" translate="yes" xml:space="preserve">
          <source>You can also expect to have holes in index numbers after using delete, e.g. you could end up with having indexes 1, 3, 4, 8, 9, and 11 and length as it was before using delete. In that case, all indexed &lt;code&gt;for&lt;/code&gt; loops would crash, since indexes are no longer sequential.</source>
          <target state="translated">삭제를 사용한 후 색인 번호에 구멍이있을 것으로 예상 할 수 있습니다. 예를 들어 삭제를 사용하기 전의 색인 1, 3, 4, 8, 9 및 11 및 길이를 가질 수 있습니다. 이 경우 인덱스가 더 이상 순차적이지 않기 때문에 인덱스 된 모든 &lt;code&gt;for&lt;/code&gt; 루프가 충돌합니다.</target>
        </trans-unit>
        <trans-unit id="6d862c4ba136e1333f173ee9b7d52087cbe9965c" translate="yes" xml:space="preserve">
          <source>You can do it easily with the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter&quot;&gt;filter&lt;/a&gt; method:</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter&quot;&gt;필터&lt;/a&gt; 방법으로 쉽게 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0a2db4b5a92e25c6369289d622cc110bc3bf9c4f" translate="yes" xml:space="preserve">
          <source>You can just create a function and remove items in series:</source>
          <target state="translated">함수를 만들고 항목을 연속으로 제거 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="002098575255d65cbec57e752daf6e1c47bbb58c" translate="yes" xml:space="preserve">
          <source>You can search for inclusion inside the callback function:</source>
          <target state="translated">콜백 함수 내에 포함을 검색 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6c93bb9a764f92c4cd9e3021568ae17e60d7eb27" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel&lt;/a&gt; and a &lt;a href=&quot;http://cdn.polyfill.io/v2/docs/&quot;&gt;polyfill service&lt;/a&gt; to ensure this is well supported across browsers.</source>
          <target state="translated">&lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel&lt;/a&gt; 및 &lt;a href=&quot;http://cdn.polyfill.io/v2/docs/&quot;&gt;polyfill 서비스&lt;/a&gt; 를 사용하여 브라우저에서이를 완벽하게 지원할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f52cc7bf113a21c4595bd02c1fac3f9ec17a6d5f" translate="yes" xml:space="preserve">
          <source>You can use ES6. For example to delete the value '3' in this case:</source>
          <target state="translated">ES6을 사용할 수 있습니다. 예를 들어이 경우 값 '3'을 삭제하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="5fa3023aa716e47bf7ba5e1e19b1c5b9e07b794d" translate="yes" xml:space="preserve">
          <source>You can use lodash &lt;a href=&quot;https://lodash.com/docs#pull&quot;&gt;_.pull&lt;/a&gt; (mutate array), &lt;a href=&quot;https://lodash.com/docs#pullAt&quot;&gt;_.pullAt&lt;/a&gt; (mutate array) or &lt;a href=&quot;https://lodash.com/docs#without&quot;&gt;_.without&lt;/a&gt; (does't mutate array),</source>
          <target state="translated">lodash &lt;a href=&quot;https://lodash.com/docs#pull&quot;&gt;_.pull&lt;/a&gt; (돌연변이 배열), &lt;a href=&quot;https://lodash.com/docs#pullAt&quot;&gt;_.pullAt&lt;/a&gt; (돌연변이 배열) 또는 &lt;a href=&quot;https://lodash.com/docs#without&quot;&gt;_.without&lt;/a&gt; (돌연변이하지 않음 )을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f49a5758d107ebbe684596c249a0fdc11b83eec4" translate="yes" xml:space="preserve">
          <source>You end up with an 8-element array. Don't know why but I confirmed John's original implementation doesn't have this problem.</source>
          <target state="translated">결국 8 요소 배열로 끝납니다. 이유를 모르지만 John의 원래 구현에는이 문제가 없음을 확인했습니다.</target>
        </trans-unit>
        <trans-unit id="b9fc17bfad1b9a6fd6c64747adcaa6bb50d9ef1d" translate="yes" xml:space="preserve">
          <source>You have 1 to 9 in the array, and you want remove 5. Use the below code:</source>
          <target state="translated">배열에 1-9가 있고 5를 제거하려고합니다. 아래 코드를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="59523b44b65e68f2d1099dfaddb9b36d2488acef" translate="yes" xml:space="preserve">
          <source>You may have different needs than I, so you can easily modify it to suit them. I hope this helps someone.</source>
          <target state="translated">본인과 다른 요구 사항이있을 수 있으므로 필요에 따라 쉽게 수정할 수 있습니다. 나는 이것이 누군가를 돕기를 바랍니다.</target>
        </trans-unit>
        <trans-unit id="4517c7bd27ee98509d3d3d64259d8592b14ad787" translate="yes" xml:space="preserve">
          <source>You should never mutate your array. As this is against the functional programming pattern. You can create a new array without referencing the array you want to change data of using the ECMAScript&amp;nbsp;6 method &lt;code&gt;filter&lt;/code&gt;;</source>
          <target state="translated">배열을 변경해서는 안됩니다. 이것은 기능적 프로그래밍 패턴에 위배됩니다. ECMAScript 6 메소드 &lt;code&gt;filter&lt;/code&gt; 를 사용하여 데이터를 변경하려는 어레이를 참조하지 않고 새 어레이를 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1e7aa9bc776935aa2d2140e956b3d836030ec1e7" translate="yes" xml:space="preserve">
          <source>for big arrays, &lt;code&gt;array.slice+splice&lt;/code&gt; (H) is the fastest immutable solution for Firefox and Safari; &lt;code&gt;Array.from&lt;/code&gt; (B) is fastest in Chrome</source>
          <target state="translated">큰 배열의 경우 &lt;code&gt;array.slice+splice&lt;/code&gt; (H)는 Firefox 및 Safari에서 가장 빠른 불변 솔루션입니다. &lt;code&gt;Array.from&lt;/code&gt; (B)는 Chrome에서 가장 빠릅니다.</target>
        </trans-unit>
        <trans-unit id="14348e8799fa471cb246585eeb032e6ae549c74b" translate="yes" xml:space="preserve">
          <source>for small tables on Safari, surprisingly the mutable solution (C) is slower than the immutable solution (G)</source>
          <target state="translated">Safari의 작은 테이블의 경우 놀랍게도 가변 솔루션 (C)이 불변 솔루션 (G)보다 느립니다.</target>
        </trans-unit>
        <trans-unit id="57a0ec7e27ed061e58b5d1fcf86d063da62ee153" translate="yes" xml:space="preserve">
          <source>mutable solutions are usually 1.5x-6x faster than immutable</source>
          <target state="translated">변경 가능한 솔루션은 일반적으로 변경 불가능한 것보다 1.5x-6x 빠릅니다.</target>
        </trans-unit>
        <trans-unit id="a41b9e33e04b38f7c477ab607acfc49a6205295d" translate="yes" xml:space="preserve">
          <source>or you can use Babel and transpile the ES6 code back to ES5 to make it more digestible to old browsers, yet write modern JavaScript in your code.</source>
          <target state="translated">또는 Babel을 사용하여 ES6 코드를 ES5로 다시 변환하여 이전 브라우저에서보다 소화하기 쉽게 만들 수 있지만 코드에서 최신 JavaScript를 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="05b2859211ab032e64d81756f0257bb5cb1881e8" translate="yes" xml:space="preserve">
          <source>the fastest solution is &lt;code&gt;array.splice&lt;/code&gt; (C) (except Safari for small arrays where it has the second time)</source>
          <target state="translated">가장 빠른 솔루션은 &lt;code&gt;array.splice&lt;/code&gt; (C)입니다 (두 번째로 작은 배열의 경우 Safari 제외)</target>
        </trans-unit>
        <trans-unit id="365862a50c0682caa8baa6f30edca76e3e5f81ed" translate="yes" xml:space="preserve">
          <source>where:</source>
          <target state="translated">where:</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
