<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/9229645">
    <body>
      <group id="9229645">
        <trans-unit id="545ccbaeb6c5eadd96d8aaf423358b6394811b09" translate="yes" xml:space="preserve">
          <source>&quot;Smart&quot; but na&amp;iuml;ve way</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Forma &quot;inteligente&quot; pero ingenua&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="58d24873a3fc1f2581ffb3c8c6ed219719ff1409" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter&quot;&gt;Here&lt;/a&gt; is nice explanation of &lt;code&gt;Array.filter()&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Aqu&amp;iacute;&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; hay una buena explicaci&amp;oacute;n de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Array.filter()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="995e9e0e5ed903ff01666d2a756fe857488bba64" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;_.uniq(array, [isSorted], [iterator])&lt;/code&gt;&lt;em&gt;Alias:&lt;/em&gt;&lt;strong&gt;unique&lt;/strong&gt;</source>
          <target state="translated">&lt;code&gt;_.uniq(array, [isSorted], [iterator])&lt;/code&gt; &lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Alias: &lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;uacute;nico&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a03992f86bbb97f9454701a5854982efc0c04f7a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;uniqueBy&lt;/code&gt; isn't as fast as an imperative implementation with loops, but it is way more expressive due to its genericity.</source>
          <target state="translated">&lt;code&gt;uniqueBy&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; no es tan r&amp;aacute;pido como una implementaci&amp;oacute;n imperativa con bucles, pero es mucho m&amp;aacute;s expresivo debido a su car&amp;aacute;cter gen&amp;eacute;rico.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cdd3bb84934ff61728eb9a490ffb508207ff4e0d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;uniqueBy&lt;/code&gt; utilizes mutations (&lt;code&gt;push(x) (acc)&lt;/code&gt;) hidden inside its body. It reuses the accumulator instead of throwing it away after each iteration. This reduces memory consumption and GC pressure. Since this side effect is wrapped inside the function, everything outside remains pure.</source>
          <target state="translated">&lt;code&gt;uniqueBy&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; utiliza mutaciones ( &lt;/font&gt;&lt;/font&gt; &lt;code&gt;push(x) (acc)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ) ocultas dentro de su cuerpo. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Reutiliza el acumulador en lugar de tirarlo despu&amp;eacute;s de cada iteraci&amp;oacute;n. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esto reduce el consumo de memoria y la presi&amp;oacute;n del GC. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Dado que este efecto secundario est&amp;aacute; envuelto dentro de la funci&amp;oacute;n, todo lo que queda afuera permanece puro.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d312cb48b363793232813139a115ef6f51aedee8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note: &lt;a href=&quot;http://lodash.com&quot;&gt;Lo-Dash&lt;/a&gt; (an &lt;a href=&quot;http://underscorejs.org/&quot;&gt;underscore&lt;/a&gt; competitor) also offers a comparable &lt;a href=&quot;http://lodash.com/docs#uniq&quot;&gt;.uniq&lt;/a&gt; implementation.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Nota: &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://lodash.com&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Lo-Dash&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (un &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;competidor de &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://underscorejs.org/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;subrayado&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ) tambi&amp;eacute;n ofrece una &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;implementaci&amp;oacute;n &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;comparable &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://lodash.com/docs#uniq&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.uniq&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="cdceb3de3f861e5954bc6fe33ff5ba380aa54a71" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;2019 edit:&lt;/strong&gt; Modern versions of JavaScript make this a much easier problem to solve.  Using &lt;code&gt;Set&lt;/code&gt; will work, regardless of whether your array contains objects, strings, numbers, or any other type.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Edici&amp;oacute;n de 2019: las&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; versiones modernas de JavaScript hacen que este sea un problema mucho m&amp;aacute;s f&amp;aacute;cil de resolver. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El uso de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Set&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; funcionar&amp;aacute;, independientemente de si su matriz contiene objetos, cadenas, n&amp;uacute;meros o cualquier otro tipo.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0e21d62008df898624989d75d47e7cb09c6a5375" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;a href=&quot;http://jsfiddle.net/ZNLUP/1/&quot;&gt;Example&lt;/a&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;http://jsfiddle.net/ZNLUP/1/&quot;&gt;Example&lt;/a&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e3bdb51f61286b91e876af275ac900201c1f8a95" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;a href=&quot;http://underscorejs.org/#uniq&quot;&gt;_.uniq&lt;/a&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;http://underscorejs.org/#uniq&quot;&gt;_.uniq&lt;/a&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a54f91ace3b2ad56bcf413aa86d26962a4ba6335" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ECMAScript 6: Use the new Set data structure (order-safe)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ECMAScript 6: Use la nueva estructura de datos Set (orden segura)&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4a97222c41b3523d91d2a7194468abc0762f7ee2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example usage:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ejemplo de uso:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="48bf5499e3ac63560ca0e0106a29021adb072bfb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Performance&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Performance&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="21aa429fd1f960433948c85037e5c8a8b7b989ec" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Solution 1&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Soluci&amp;oacute;n 1&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b92c9843bad7e62d5c47d0d1653f2216299facdc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Solution 2 (using Set)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Soluci&amp;oacute;n 2 (usando Set)&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="65ea5aea422a6fb8b4ebd86dc44393c9f42161c8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Test&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Test&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="693e8c2fd79ed99956157996c6819d2278b8d50f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This is probably one of the fastest way to remove permanently the duplicates from an array&lt;/strong&gt;
10x times faster than the most functions here.&amp;amp; 78x faster in safari</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esta es probablemente una de las formas m&amp;aacute;s r&amp;aacute;pidas de eliminar permanentemente los duplicados de una matriz&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 10 veces m&amp;aacute;s r&amp;aacute;pido que la mayor&amp;iacute;a de las funciones aqu&amp;iacute;. Y 78 veces m&amp;aacute;s r&amp;aacute;pido en safari&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="16711543421929b031abbd4ca5cd76cc5084d772" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Vanilla JS: Remove duplicates by tracking already seen values (order-safe)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vanilla JS: elimine los duplicados siguiendo los valores ya vistos (orden segura)&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="07f1d1fb1e7285534783acf3cbd3f5e1c2fbe825" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Vanilla JS: Remove duplicates using an Object like a Set&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vanilla JS: eliminar duplicados utilizando un objeto como un conjunto&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9178dc66b6ef86ddf72367ece3117f6f2bca4296" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;here is the simple method without any special libraries are special function,&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Aqu&amp;iacute; est&amp;aacute; el m&amp;eacute;todo simple sin ninguna biblioteca especial son funciones especiales,&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="951f540d63d2a9bd5664916fc0725d2c88d41882" translate="yes" xml:space="preserve">
          <source>A &quot;lazy&quot;, generator-based version of &lt;code&gt;uniq&lt;/code&gt; can be built on the same basis:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Una versi&amp;oacute;n &quot;unzy&quot;, basada en generador de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;uniq&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; se puede construir sobre la misma base:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="07a62db85b2117b350bb4cd41710e9ab8906b47f" translate="yes" xml:space="preserve">
          <source>A particularly useful &lt;code&gt;key()&lt;/code&gt; is &lt;code&gt;JSON.stringify&lt;/code&gt; which will remove objects that are physically different, but &quot;look&quot; the same:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Una &lt;/font&gt;&lt;/font&gt; &lt;code&gt;key()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; particularmente &amp;uacute;til &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;()&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es &lt;/font&gt;&lt;/font&gt; &lt;code&gt;JSON.stringify&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que eliminar&amp;aacute; los objetos que son f&amp;iacute;sicamente diferentes, pero &quot;se ven&quot; igual:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="95415bb6a579cb4f5c8ba0ceafdf9a061fbc4dcd" translate="yes" xml:space="preserve">
          <source>A simple but effective technique, is to use the &lt;code&gt;filter&lt;/code&gt; method in combination with the filter &lt;code&gt;function(value, index){ return this.indexOf(value) == index }&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Una t&amp;eacute;cnica simple pero efectiva es utilizar el &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;m&amp;eacute;todo de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;filter&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en combinaci&amp;oacute;n con la &lt;/font&gt;&lt;/font&gt; &lt;code&gt;function(value, index){ return this.indexOf(value) == index }&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; filtro &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(valor, &amp;iacute;ndice) {return this.indexOf (value) == index}&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3a878f8064854c12f88684f87d5edccf9e99cd3c" translate="yes" xml:space="preserve">
          <source>A single line version using array filter and indexOf functions:</source>
          <target state="translated">Una versión de una sola línea que utiliza funciones de filtro de matriz e índice:</target>
        </trans-unit>
        <trans-unit id="968334a83172654e833d9ad9bee60f4593ec84c5" translate="yes" xml:space="preserve">
          <source>A slight modification of thg435's excellent answer to use a custom comparator:</source>
          <target state="translated">Una ligera modificación de la excelente respuesta de thg435 para usar un comparador personalizado:</target>
        </trans-unit>
        <trans-unit id="82727c37fc882dca53361a569c38f63e752d01ca" translate="yes" xml:space="preserve">
          <source>A universal solution combines both approaches: it uses hash lookups for primitives and linear search for objects.</source>
          <target state="translated">Una solución universal combina ambos enfoques:utiliza búsquedas de hachís para los primitivos y la búsqueda lineal de objetos.</target>
        </trans-unit>
        <trans-unit id="6c563c21f20fe92abf54d4d1e6c370b0dce20ec2" translate="yes" xml:space="preserve">
          <source>Again, this doesn't work with objects (because all objects are equal for &lt;code&gt;sort&lt;/code&gt;). Additionally, we silently change the original array as a side effect - not good! However, if your input is already sorted, this is the way to go (just remove &lt;code&gt;sort&lt;/code&gt; from the above).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Nuevamente, esto no funciona con objetos (porque todos los objetos son iguales para la &lt;/font&gt;&lt;/font&gt; &lt;code&gt;sort&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Adem&amp;aacute;s, cambiamos silenciosamente la matriz original como efecto secundario, &amp;iexcl;no es bueno! &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Sin embargo, si su entrada ya est&amp;aacute; ordenada, este es el camino a seguir (simplemente elimine la &lt;/font&gt;&lt;/font&gt; &lt;code&gt;sort&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; de lo anterior).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1112e1a1136768b03425b1d614b072734f9a6f90" translate="yes" xml:space="preserve">
          <source>Although ES6 Solution is the best, I'm baffled as to how nobody has shown the following solution:</source>
          <target state="translated">Aunque la solución ES6 es la mejor,estoy desconcertado de cómo nadie ha mostrado la siguiente solución:</target>
        </trans-unit>
        <trans-unit id="cced73bd84dbbc926ab22fece5468cc51393b47d" translate="yes" xml:space="preserve">
          <source>Although concise, this algorithm is not particularly efficient for large arrays (quadratic time).</source>
          <target state="translated">Aunque es conciso,este algoritmo no es particularmente eficiente para las grandes matrices (tiempo cuadrático).</target>
        </trans-unit>
        <trans-unit id="1b8526fb50e81a179dc83cfe52a9aa2ac78cb27c" translate="yes" xml:space="preserve">
          <source>Another option is to sort the array first, and then remove each element equal to the preceding one:</source>
          <target state="translated">Otra opción es ordenar primero la matriz y luego eliminar cada elemento igual al anterior:</target>
        </trans-unit>
        <trans-unit id="0e311d9ee85ba5d7553634e3dbd1d24ebfc058ce" translate="yes" xml:space="preserve">
          <source>Apart from being a simpler, more terse solution than the current answers (minus the future-looking ES6 ones), I perf tested this and it was much faster as well:</source>
          <target state="translated">Aparte de ser una solución más simple y concisa que las respuestas actuales (menos las del futuro ES6),la probé y fue mucho más rápida también:</target>
        </trans-unit>
        <trans-unit id="693617f23b1d9b82b6ddaf03427bdce5100c36f7" translate="yes" xml:space="preserve">
          <source>Basically, we iterate over the array and, for each element, check if the first position of this element in the array is equal to the current position. Obviously, these two positions are different for duplicate elements.</source>
          <target state="translated">Básicamente,iteramos sobre la matriz y,para cada elemento,comprobamos si la primera posición de este elemento en la matriz es igual a la posición actual.Obviamente,estas dos posiciones son diferentes para los elementos duplicados.</target>
        </trans-unit>
        <trans-unit id="2b69cb94e2fd02706e10676920008541b3213bba" translate="yes" xml:space="preserve">
          <source>Bear in mind though that this also sorts the array.</source>
          <target state="translated">Tengan en cuenta,sin embargo,que esto también clasifica el conjunto.</target>
        </trans-unit>
        <trans-unit id="2e679bc577c84e239a221c9ab80c702c7dc59b46" translate="yes" xml:space="preserve">
          <source>Benefits of this approach:</source>
          <target state="translated">Beneficios de este enfoque:</target>
        </trans-unit>
        <trans-unit id="ea0df8386c4a7b2c2679f6ebcd420fd8589e491a" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;http://underscorejs.org/#uniq&quot;&gt;underscore&lt;/a&gt; and &lt;a href=&quot;https://lodash.com/docs#uniq&quot;&gt;Lo-Dash&lt;/a&gt; provide &lt;code&gt;uniq&lt;/code&gt; methods. Their algorithms are basically similar to the first snippet above and boil down to this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tanto el &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://underscorejs.org/#uniq&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;subrayado&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; como &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://lodash.com/docs#uniq&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Lo-Dash&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; proporcionan &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;m&amp;eacute;todos &lt;/font&gt;&lt;/font&gt; &lt;code&gt;uniq&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Sus algoritmos son b&amp;aacute;sicamente similares al primer fragmento de arriba y se reducen a esto:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6be24a97cdca9d9739d2f77bbc3f540977649073" translate="yes" xml:space="preserve">
          <source>Code example :</source>
          <target state="translated">Ejemplo de código :</target>
        </trans-unit>
        <trans-unit id="da723bc38aaf5f90859a67c0ad3328d59c066d34" translate="yes" xml:space="preserve">
          <source>D3.js</source>
          <target state="translated">D3.js</target>
        </trans-unit>
        <trans-unit id="071f175015a0f29b2243cd5a1dec24776d6a708a" translate="yes" xml:space="preserve">
          <source>Demo: &lt;a href=&quot;http://jsfiddle.net/46S7g/&quot;&gt;http://jsfiddle.net/46S7g/&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Demostraci&amp;oacute;n: &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://jsfiddle.net/46S7g/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http://jsfiddle.net/46S7g/&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="119a17a5588ca2c9539c4d577428f4c29af39e36" translate="yes" xml:space="preserve">
          <source>ECMAScript 6 adds the new &lt;code&gt;Set&lt;/code&gt; Data-Structure, which lets you store values of any type.  &lt;code&gt;Set.values&lt;/code&gt; returns elements in insertion order.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ECMAScript 6 agrega la nueva &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Estructura de datos de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Set&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , que le permite almacenar valores de cualquier tipo. &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Set.values&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; devuelve elementos en orden de inserci&amp;oacute;n.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f340712260381d35a53813a65d261137ac25e7e6" translate="yes" xml:space="preserve">
          <source>ES6</source>
          <target state="translated">ES6</target>
        </trans-unit>
        <trans-unit id="4dc5c144fd599775e0cb5c2819fefe484bbb50f0" translate="yes" xml:space="preserve">
          <source>ES6 provides the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set&quot;&gt;Set&lt;/a&gt; object, which makes things a whole lot easier:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ES6 proporciona el &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;objeto &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Set&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , que hace las cosas mucho m&amp;aacute;s f&amp;aacute;ciles:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">Ampliar fragmento</target>
        </trans-unit>
        <trans-unit id="62e61d677b74097f1324d0c47e3e4c694a67d9c8" translate="yes" xml:space="preserve">
          <source>Faster uniq with sorting</source>
          <target state="translated">Uniq más rápido con la clasificación</target>
        </trans-unit>
        <trans-unit id="5f07110dd5176567a6f93044cb1c87801610ae12" translate="yes" xml:space="preserve">
          <source>First or last?</source>
          <target state="translated">¿Primera o última?</target>
        </trans-unit>
        <trans-unit id="1fba1a8f8ac05db4a7ffb2d3a384f65031ecf0a2" translate="yes" xml:space="preserve">
          <source>Function calls are expensive in JavaScript, therefore the above solutions, as concise as they are, are not particularly efficient. For maximal performance, replace &lt;code&gt;filter&lt;/code&gt; with a loop and get rid of other function calls:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Las llamadas a funciones son caras en JavaScript, por lo tanto, las soluciones anteriores, por concisas que sean, no son particularmente eficientes. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para un rendimiento m&amp;aacute;ximo, reemplace el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;filter&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; con un bucle y desh&amp;aacute;gase de otras llamadas a funciones:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a3e705cc61a19f33d7c9c030f107a70569966485" translate="yes" xml:space="preserve">
          <source>Generators</source>
          <target state="translated">Generators</target>
        </trans-unit>
        <trans-unit id="325969aad6efa6a4492a383509a4216afef4fd35" translate="yes" xml:space="preserve">
          <source>Generic Functional Approach</source>
          <target state="translated">Enfoque funcional genérico</target>
        </trans-unit>
        <trans-unit id="f20c7800e07e5893ff765d93af93f5768dc8f851" translate="yes" xml:space="preserve">
          <source>Get all non-unique values (i.e.: duplicate/more than one occurrence) in an array</source>
          <target state="translated">Obtener todos los valores no únicos (es decir:duplicatemás de una ocurrencia)en un conjunto</target>
        </trans-unit>
        <trans-unit id="ca9caa9d6215f630d599081a01ca1d412a5ec674" translate="yes" xml:space="preserve">
          <source>Go for this one:</source>
          <target state="translated">Ve a por este:</target>
        </trans-unit>
        <trans-unit id="37f725fcd879ca56633a90748ea73597e6704eb9" translate="yes" xml:space="preserve">
          <source>Got tired of seeing all bad examples with for-loops or jQuery. Javascript has the perfect tools for this nowadays: sort, map and reduce.</source>
          <target state="translated">Me cansé de ver todos los malos ejemplos con for-loops o jQuery.Javascript tiene las herramientas perfectas para esto hoy en día:ordenar,mapear y reducir.</target>
        </trans-unit>
        <trans-unit id="306fc68e40113d3486ca591f2b04bb22a3b7fc46" translate="yes" xml:space="preserve">
          <source>Hashtables to the rescue</source>
          <target state="translated">Hashtables al rescate</target>
        </trans-unit>
        <trans-unit id="df6d2eab3d4ffaec2b30c4b30f1d175bcb142186" translate="yes" xml:space="preserve">
          <source>Here is a generic and strictly functional approach with ES2015:</source>
          <target state="translated">Aquí hay un enfoque genérico y estrictamente funcional con ES2015:</target>
        </trans-unit>
        <trans-unit id="3d8d2da92e3cf1ae944d73658d74a427be5090a2" translate="yes" xml:space="preserve">
          <source>Here is a simple answer to the question.</source>
          <target state="translated">Aquí hay una respuesta simple a la pregunta.</target>
        </trans-unit>
        <trans-unit id="1aaf61be25efa7f5a29b138cb733c7ac8207d756" translate="yes" xml:space="preserve">
          <source>Here is very simple for understanding and working anywhere (even in PhotoshopScript) code. Check it!</source>
          <target state="translated">Aquí es muy simple para entender y trabajar en cualquier lugar (incluso en PhotoshopScript)el código.Compruébalo!</target>
        </trans-unit>
        <trans-unit id="fc157aff3805697c4605ed92fa9f614748b76f5d" translate="yes" xml:space="preserve">
          <source>However, if you need an array with unique elements, why not use sets right from the beginning?</source>
          <target state="translated">Sin embargo,si necesitas un conjunto con elementos únicos,¿por qué no usar conjuntos desde el principio?</target>
        </trans-unit>
        <trans-unit id="17e70a10c792690d43997eb63da08ec4691a0202" translate="yes" xml:space="preserve">
          <source>I believe this is the best way to do this</source>
          <target state="translated">Creo que esta es la mejor manera de hacer esto</target>
        </trans-unit>
        <trans-unit id="474d6962cc2b53f1812502f640e5c172d5647568" translate="yes" xml:space="preserve">
          <source>I could point to all the codes that I've tried but I think it's useless because they don't work. I accept jQuery solutions too.</source>
          <target state="translated">Podría señalar todos los códigos que he probado pero creo que es inútil porque no funcionan.Yo también acepto las soluciones de jQuery.</target>
        </trans-unit>
        <trans-unit id="ee05eff2251d0b84a0e95f84a8c352222dbd8f24" translate="yes" xml:space="preserve">
          <source>I had done a detailed comparison of dupes removal at some other question but having noticed that this is the real place i just wanted to share it here as well.</source>
          <target state="translated">Había hecho una comparación detallada de la eliminación de los duplicados en alguna otra pregunta,pero habiendo notado que este es el lugar real,sólo quería compartirlo aquí también.</target>
        </trans-unit>
        <trans-unit id="0bc6794192adc78c20c5964545cd64cb0038bf78" translate="yes" xml:space="preserve">
          <source>I have a very simple JavaScript array that may or may not contain duplicates.</source>
          <target state="translated">Tengo un arreglo de JavaScript muy simple que puede o no contener duplicados.</target>
        </trans-unit>
        <trans-unit id="63e0cb18e79ace78ff32f62709207324c1710b04" translate="yes" xml:space="preserve">
          <source>I need to remove the duplicates and put the unique values in a new array.</source>
          <target state="translated">Necesito eliminar los duplicados y poner los valores únicos en un nuevo arreglo.</target>
        </trans-unit>
        <trans-unit id="73e031ed418e5210dcc5f12cb652d371edea5ffe" translate="yes" xml:space="preserve">
          <source>If by any chance you were using</source>
          <target state="translated">Si por casualidad estabas usando</target>
        </trans-unit>
        <trans-unit id="a437e7d2838cef61cfe7addea4b3ef534ddb827c" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;key&lt;/code&gt; is not primitive, you have to resort to the linear search:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si la &lt;/font&gt;&lt;/font&gt; &lt;code&gt;key&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; no es primitiva, debe recurrir a la b&amp;uacute;squeda lineal:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d1d6b7a33ee0a8e4800ddaea96bac45164f10742" translate="yes" xml:space="preserve">
          <source>If you identify &lt;code&gt;uniqueBy&lt;/code&gt; as the cause of a concrete performance penalty in your app, replace it with optimized code. That is, write your code first in an functional, declarative way. Afterwards, provided that you encounter performance issues, try to optimize the code at the locations, which are the cause of the problem.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si identifica &lt;/font&gt;&lt;/font&gt; &lt;code&gt;uniqueBy&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; como la causa de una penalizaci&amp;oacute;n de rendimiento concreta en su aplicaci&amp;oacute;n, reempl&amp;aacute;cela con un c&amp;oacute;digo optimizado. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Es decir, escriba su c&amp;oacute;digo primero de manera funcional y declarativa. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Despu&amp;eacute;s, siempre que encuentre problemas de rendimiento, intente optimizar el c&amp;oacute;digo en las ubicaciones, que son la causa del problema.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ab0e7dce3a908fc76ed51abf9ce326ecd69fa572" translate="yes" xml:space="preserve">
          <source>If you're using jQuery and can't stand anything without a dollar before it, it goes like this:</source>
          <target state="translated">Si estás usando jQuery y no puedes soportar nada sin un dólar antes de él,es así:</target>
        </trans-unit>
        <trans-unit id="3ae2dc00a66fdb22a311cc02495ede59bedc1485" translate="yes" xml:space="preserve">
          <source>In ECMAScript 6 (aka ECMAScript 2015), &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; can be used to filter out duplicates. Then it can be converted back to an array using the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator&quot;&gt;spread operator&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En ECMAScript 6 (tambi&amp;eacute;n conocido como ECMAScript 2015), &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set&quot;&gt; &lt;code&gt;Set&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; se puede usar para filtrar duplicados. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Luego se puede convertir de nuevo a una matriz utilizando el &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;operador de propagaci&amp;oacute;n&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5e544d373fe6916aa41b2a5e1f371276a9bcb65b" translate="yes" xml:space="preserve">
          <source>In ES6 you can use a &lt;code&gt;Set&lt;/code&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En ES6 puedes usar un &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Set&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="167dc2dcc835e6c3326aed0689ba6dc35074c355" translate="yes" xml:space="preserve">
          <source>In ES6 you have Sets and Spread which makes it very easy and performant to remove all duplicates:</source>
          <target state="translated">En el ES6 tienes Sets y Spread que hace que sea muy fácil y eficaz eliminar todos los duplicados:</target>
        </trans-unit>
        <trans-unit id="8989c181d4d1b67f8d668569a17e489505f527a8" translate="yes" xml:space="preserve">
          <source>In chrome  v51 reduce &amp;amp; lut : 23.90ms vs filter &amp;amp; indexOf : 1066ms</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En chrome v51 reduce y lut: 23.90ms vs filtro e &amp;iacute;ndice De: 1066ms&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fa679ec33507102effbf778174e8c2631726af00" translate="yes" xml:space="preserve">
          <source>In firefox v47 reduce &amp;amp; lut : 14.85ms vs filter &amp;amp; indexOf : 2836ms</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En firefox v47 reduce y lut: 14.85 ms vs filtro e &amp;iacute;ndice De: 2836 ms&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cea7ad738688d995989a24aaafa8546f256b3f7c" translate="yes" xml:space="preserve">
          <source>It's a library with a host of functions for manipulating arrays.</source>
          <target state="translated">Es una biblioteca con muchas funciones para manipular matrices.</target>
        </trans-unit>
        <trans-unit id="94b3de46d5fda8e179f2f28c575f153e17e60955" translate="yes" xml:space="preserve">
          <source>It's the tie to go along with jQuery's tux, and Backbone.js's
  suspenders.</source>
          <target state="translated">Es la corbata que va junto con el esmoquin de jQuery,y los tirantes de Backbone.js.</target>
        </trans-unit>
        <trans-unit id="27c968e6692b41bf6e1a241b870dc41ff1a51b17" translate="yes" xml:space="preserve">
          <source>Libraries</source>
          <target state="translated">Libraries</target>
        </trans-unit>
        <trans-unit id="c81f35699be685add34bac0ef905ea52b6be0ebe" translate="yes" xml:space="preserve">
          <source>Memory Consumption and Garbage Collection</source>
          <target state="translated">Consumo de memoria y recogida de basura</target>
        </trans-unit>
        <trans-unit id="47ae1edb4b6ab8e1304013b0910592cd36981138" translate="yes" xml:space="preserve">
          <source>More: &lt;a href=&quot;https://stackoverflow.com/a/25082874/2450730&quot;&gt;https://stackoverflow.com/a/25082874/2450730&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;M&amp;aacute;s: &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/25082874/2450730&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https://stackoverflow.com/a/25082874/2450730&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="85ebca451fa590d9155f3e01f22e262f73022640" translate="yes" xml:space="preserve">
          <source>My test case comparison:
&lt;a href=&quot;http://jsperf.com/remove-duplicate-array-tests&quot;&gt;http://jsperf.com/remove-duplicate-array-tests&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Mi comparaci&amp;oacute;n de casos de prueba: &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://jsperf.com/remove-duplicate-array-tests&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http://jsperf.com/remove-duplicate-array-tests&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ec0b4f527e5af3d0adc23eca5a85a60e6594e249" translate="yes" xml:space="preserve">
          <source>Note that, unlike in python, ES6 sets are iterated in insertion order, so this code preserves the order of the original array.</source>
          <target state="translated">Obsérvese que,a diferencia de la pitón,los conjuntos ES6 se iteran en orden de inserción,por lo que este código conserva el orden de la matriz original.</target>
        </trans-unit>
        <trans-unit id="b47bd34a85a2811e200020c3cbdd86b83d777f79" translate="yes" xml:space="preserve">
          <source>Now this is the spectacular comeback of Map()..! May be now you can make a better decision when you want to remove the dupes.</source>
          <target state="translated">¡Este es el espectacular regreso de Map()...! Puede ser que ahora puedas tomar una mejor decisión cuando quieras eliminar a los incautos.</target>
        </trans-unit>
        <trans-unit id="8afa1e13386a1232742d929f60c72774ec2326f7" translate="yes" xml:space="preserve">
          <source>Now uniqueArray contains no duplicates.</source>
          <target state="translated">Ahora uniqueArray no contiene duplicados.</target>
        </trans-unit>
        <trans-unit id="9ec2907aa469f6821b970a7fb3c51157c9cc9129" translate="yes" xml:space="preserve">
          <source>OK .. even though this one is O(n) and the others are O(n^2) i was curious to see benchmark comparison between this reduce / look up table and filter/indexOf combo (I choose Jeetendras very nice implementation &lt;a href=&quot;https://stackoverflow.com/a/37441144/4543207&quot;&gt;https://stackoverflow.com/a/37441144/4543207&lt;/a&gt;). I prepare a 100K item array filled with random positive integers in range 0-9999 and and it removes the duplicates. I repeat the test for 10 times and the average of the results show that they are no match in performance.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;OK ... a pesar de que este es O (n) y los otros son O (n ^ 2), ten&amp;iacute;a curiosidad por ver una comparaci&amp;oacute;n de referencia entre esta tabla de reducci&amp;oacute;n / b&amp;uacute;squeda y filtro / indexOf combo (elijo la muy buena implementaci&amp;oacute;n de Jeetendras &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/37441144/4543207&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https: //stackoverflow.com/a/37441144/4543207&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Preparo una matriz de elementos de 100K llena de enteros positivos aleatorios en el rango 0-9999 y elimina los duplicados. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Repito la prueba 10 veces y el promedio de los resultados muestra que no coinciden en rendimiento.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="14982fd566d790691f2414b94fff6c214b0ec176" translate="yes" xml:space="preserve">
          <source>One caveat: Array.lastIndexOf() was added in IE9, so if you need to go lower than that, you'll need to look elsewhere.</source>
          <target state="translated">Una advertencia:Array.lastIndexOf()fue agregado en IE9,así que si necesitas ir más bajo que eso,tendrás que buscar en otra parte.</target>
        </trans-unit>
        <trans-unit id="6359004d219d441a7fd98b18f76da96282a7a92a" translate="yes" xml:space="preserve">
          <source>One line:</source>
          <target state="translated">Una línea:</target>
        </trans-unit>
        <trans-unit id="425d7d39d9344fdef2a7433c1ea2dc8035792a02" translate="yes" xml:space="preserve">
          <source>Or, for an order-safe version, use an object to store all previously seen values, and check values against it before before adding to an array.</source>
          <target state="translated">O,para una versión de orden seguro,usar un objeto para almacenar todos los valores vistos anteriormente,y comprobar los valores contra él antes de añadirlos a una matriz.</target>
        </trans-unit>
        <trans-unit id="63c904559993935c470f516c8b549ca7f3640dbb" translate="yes" xml:space="preserve">
          <source>Performance</source>
          <target state="translated">Performance</target>
        </trans-unit>
        <trans-unit id="3130994b43da1d8950109e1c6564a8348e9d6104" translate="yes" xml:space="preserve">
          <source>Performance Considerations</source>
          <target state="translated">Consideraciones sobre el rendimiento</target>
        </trans-unit>
        <trans-unit id="34fb3eeb78fc7a90a5b1c546d9892accd7bbc4da" translate="yes" xml:space="preserve">
          <source>Produces a duplicate-free version of the &lt;strong&gt;array&lt;/strong&gt;, using === to test object
  equality. If you know in advance that the &lt;strong&gt;array&lt;/strong&gt; is sorted, passing
  &lt;em&gt;true&lt;/em&gt; for &lt;strong&gt;isSorted&lt;/strong&gt; will run a much faster algorithm. If you want to
  compute unique items based on a transformation, pass an &lt;strong&gt;iterator&lt;/strong&gt;
  function.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Produce una versi&amp;oacute;n libre de duplicados de la &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;matriz&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , usando === para probar la igualdad de objetos. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si sabe de antemano que la &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;matriz&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; est&amp;aacute; ordenada, pasar &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;true&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;isSorted&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ejecutar&amp;aacute; un algoritmo mucho m&amp;aacute;s r&amp;aacute;pido. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si desea calcular elementos &amp;uacute;nicos basados ​​en una transformaci&amp;oacute;n, pase una &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; funci&amp;oacute;n &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;iteradora&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="08211355427595285e350655413b390f94fa4272" translate="yes" xml:space="preserve">
          <source>Quick and dirty using jQuery:</source>
          <target state="translated">Rápido y sucio usando jQuery:</target>
        </trans-unit>
        <trans-unit id="9e88f9a1a4eb990b5d6e04b77c41e120b65441dc" translate="yes" xml:space="preserve">
          <source>Remove duplicate values from JS array</source>
          <target state="translated">Eliminar los valores duplicados de la matriz JS</target>
        </trans-unit>
        <trans-unit id="116ed58a9ac48ee9ed724a44f4d19057f2357651" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;https://jsfiddle.net/s6skxLtz/4/&quot;&gt;&lt;strong&gt;this Fiddle&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ver tambi&amp;eacute;n &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://jsfiddle.net/s6skxLtz/4/&quot;&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;este viol&amp;iacute;n&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4bcb4e163bf193fe874c35e7a1a754e4ed2bd51c" translate="yes" xml:space="preserve">
          <source>Show code snippet</source>
          <target state="translated">Mostrar fragmento de código</target>
        </trans-unit>
        <trans-unit id="699c6dcefd301187cfe53c9fcf84bb221d610c06" translate="yes" xml:space="preserve">
          <source>Similar question:</source>
          <target state="translated">Pregunta similar:</target>
        </trans-unit>
        <trans-unit id="ac39eb7eec1a33c69714ccbe982b60c62d2ed791" translate="yes" xml:space="preserve">
          <source>Simplest One I've run into so far. In es6.</source>
          <target state="translated">El más simple con el que me he encontrado hasta ahora.En es6.</target>
        </trans-unit>
        <trans-unit id="0ef0ebe3fc0c514a0634920d1e1254651fc565d2" translate="yes" xml:space="preserve">
          <source>So the options is:</source>
          <target state="translated">Así que las opciones son:</target>
        </trans-unit>
        <trans-unit id="f79100578fc71d13412d5f55525916acaffe9b47" translate="yes" xml:space="preserve">
          <source>Someone asked about ordering the results based on how many unique names there are:</source>
          <target state="translated">Alguien preguntó acerca de ordenar los resultados en base a cuántos nombres únicos hay:</target>
        </trans-unit>
        <trans-unit id="e1a48f3427d9eddfab0ade65ec4b1cca73c8f276" translate="yes" xml:space="preserve">
          <source>Sometimes it's desired to uniquify a list based on some criteria other than just equality, for example, to filter out objects that are different, but share some property. This can be done elegantly by passing a callback. This &quot;key&quot; callback is applied to each element, and elements with equal &quot;keys&quot; are removed. Since &lt;code&gt;key&lt;/code&gt; is expected to return a primitive, hash table will work fine here:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;A veces se desea uniquificar una lista basada en algunos criterios distintos de la igualdad, por ejemplo, para filtrar objetos que son diferentes, pero que comparten alguna propiedad. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esto se puede hacer con elegancia pasando una devoluci&amp;oacute;n de llamada. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esta devoluci&amp;oacute;n de llamada &quot;clave&quot; se aplica a cada elemento, y los elementos con &quot;claves&quot; iguales se eliminan. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Dado que &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;se espera que la &lt;/font&gt;&lt;/font&gt; &lt;code&gt;key&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; devuelva una primitiva, la tabla hash funcionar&amp;aacute; bien aqu&amp;iacute;:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="952df80db868b6b570fa1dbaecf544bd4d0434db" translate="yes" xml:space="preserve">
          <source>Sort based on occurrence:</source>
          <target state="translated">Clasificar en base a la ocurrencia:</target>
        </trans-unit>
        <trans-unit id="5ff57f4185e884322f43c9c59da60f12f41285ea" translate="yes" xml:space="preserve">
          <source>TL;DR</source>
          <target state="translated">TL;DR</target>
        </trans-unit>
        <trans-unit id="eb15050cfc7e83132ea94b727e93e728da0799e5" translate="yes" xml:space="preserve">
          <source>Test: &lt;a href=&quot;http://jsperf.com/wgu&quot;&gt;http://jsperf.com/wgu&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Prueba: &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://jsperf.com/wgu&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http://jsperf.com/wgu&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="586339606bc4a03362f3e59eaae6936619d62352" translate="yes" xml:space="preserve">
          <source>That said, if your arrays contain only primitives and you don't care about types (e.g. it's always numbers), this solution is optimal.</source>
          <target state="translated">Dicho esto,si tus matrices contienen sólo primitivas y no te importan los tipos (por ejemplo,siempre son números),esta solución es óptima.</target>
        </trans-unit>
        <trans-unit id="859dd2590c4a024ba0ed0e7e17925ec907bcb9ea" translate="yes" xml:space="preserve">
          <source>The best from two worlds</source>
          <target state="translated">Lo mejor de dos mundos</target>
        </trans-unit>
        <trans-unit id="9545a5d4e10dc6a7e8fabdf289be8c28ef8a32eb" translate="yes" xml:space="preserve">
          <source>The following is more than 80% faster than the jQuery method listed (see tests below).
It is an answer from a similar question a few years ago. If I come across the person who originally proposed it I will post credit.
Pure JS.</source>
          <target state="translated">Lo siguiente es más de un 80% más rápido que el método jQuery listado (ver pruebas más abajo).Es una respuesta de una pregunta similar de hace unos años.Si me encuentro con la persona que lo propuso originalmente,le daré crédito.Puro JS.</target>
        </trans-unit>
        <trans-unit id="c1be9748262459c0cfed18be8758a161fa9c3150" translate="yes" xml:space="preserve">
          <source>The implementation is so simple, defining a function is no longer warranted.</source>
          <target state="translated">La implementación es tan simple,que ya no se justifica la definición de una función.</target>
        </trans-unit>
        <trans-unit id="616fdf4d61602743bfe3812e3323328034f087f3" translate="yes" xml:space="preserve">
          <source>The most concise way to remove duplicates from an array using native javascript functions is to use a sequence like below:</source>
          <target state="translated">La forma más concisa de eliminar duplicados de una matriz usando funciones nativas de javascript es usar una secuencia como la siguiente:</target>
        </trans-unit>
        <trans-unit id="6edef424e78630f627fb00a487669aac7e7398e7" translate="yes" xml:space="preserve">
          <source>The thing to remember here is that objects MUST have unique keys. We are exploiting this to remove all the duplicates. I would have thought this would be the fastest solution (before ES6).</source>
          <target state="translated">Lo que hay que recordar aquí es que los objetos DEBEN tener claves únicas.Estamos explotando esto para eliminar todos los duplicados.Hubiera pensado que esta sería la solución más rápida (antes del ES6).</target>
        </trans-unit>
        <trans-unit id="17a346018132031a18b99a81d21bc3516ea51cac" translate="yes" xml:space="preserve">
          <source>The top answers have complexity of &lt;code&gt;O(n&amp;sup2;)&lt;/code&gt;, but this can be done with just &lt;code&gt;O(n)&lt;/code&gt; by using an object as a hash:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Las respuestas principales tienen una complejidad de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;O(n&amp;sup2;)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , pero esto se puede hacer solo con &lt;/font&gt;&lt;/font&gt; &lt;code&gt;O(n)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; usando un objeto como hash:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b10b0d292925ee11a5945997c1484ed24978572b" translate="yes" xml:space="preserve">
          <source>There are probably faster ways but this one is pretty decent.</source>
          <target state="translated">Probablemente hay formas más rápidas pero esta es bastante decente.</target>
        </trans-unit>
        <trans-unit id="caaf0e060e43d0ec0c496e3e516fdb861ff73f78" translate="yes" xml:space="preserve">
          <source>This chunk of ugly code does the same as the snippet #3 above, &lt;s&gt;but an order of magnitude faster&lt;/s&gt; (as of 2017 it's only twice as fast - JS core folks are doing a great job!)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Este trozo de c&amp;oacute;digo feo hace lo mismo que el fragmento n. &amp;deg; 3 anterior, &lt;/font&gt;&lt;/font&gt;&lt;s&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;pero un orden de magnitud m&amp;aacute;s r&amp;aacute;pido&lt;/font&gt;&lt;/font&gt;&lt;/s&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (a partir de 2017 es solo el doble de r&amp;aacute;pido, &amp;iexcl;la gente principal de JS est&amp;aacute; haciendo un gran trabajo!)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="34be48325432c435049de4b5fce8bf8f701c581a" translate="yes" xml:space="preserve">
          <source>This is how it's usually done. The idea is to place each element in a hashtable and then check for its presence instantly. This gives us linear time, but has at least two drawbacks:</source>
          <target state="translated">Así es como se hace normalmente.La idea es colocar cada elemento en un hachero y luego comprobar su presencia al instante.Esto nos da un tiempo lineal,pero tiene al menos dos inconvenientes:</target>
        </trans-unit>
        <trans-unit id="d32045aa30c503f5734fd8becb033645aa36217b" translate="yes" xml:space="preserve">
          <source>This is quadratic, but there are nice additional goodies, like wrapping native &lt;code&gt;indexOf&lt;/code&gt;, ability to uniqify by a key (&lt;code&gt;iteratee&lt;/code&gt; in their parlance), and optimizations for already sorted arrays.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esto es cuadr&amp;aacute;tico, pero hay buenos &lt;/font&gt;&lt;/font&gt; &lt;code&gt;indexOf&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; adicionales, como envolver &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;indexOf&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; nativo &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;, la capacidad de unificar por una clave ( &lt;/font&gt;&lt;/font&gt; &lt;code&gt;iteratee&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en su lenguaje) y optimizaciones para arreglos ya ordenados.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b649cb8117bb75036b30b3a7a995456bb6f20525" translate="yes" xml:space="preserve">
          <source>This will work for strings, numbers, and dates.  If your array contains objects, the above solution won't work because when coerced to a string, they will all have a value of &lt;code&gt;&quot;[object Object]&quot;&lt;/code&gt; (or something similar) and that isn't suitable as a lookup value.  You can get an &lt;code&gt;O(n)&lt;/code&gt; implementation for objects by setting a flag on the object itself:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esto funcionar&amp;aacute; para cadenas, n&amp;uacute;meros y fechas. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si su matriz contiene objetos, la soluci&amp;oacute;n anterior no funcionar&amp;aacute; porque cuando se los coaccione a una cadena, todos tendr&amp;aacute;n un valor de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;&quot;[object Object]&quot;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (o algo similar) y eso no es adecuado como valor de b&amp;uacute;squeda. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Puede obtener una &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;implementaci&amp;oacute;n &lt;/font&gt;&lt;/font&gt; &lt;code&gt;O(n)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para los objetos estableciendo un indicador en el objeto mismo:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="79d3991c69b5dc6ca2ddee16f91e7d5abb041f25" translate="yes" xml:space="preserve">
          <source>Uniq reduce while keeping existing order</source>
          <target state="translated">Uniq reducir mientras se mantiene el orden existente</target>
        </trans-unit>
        <trans-unit id="2db3a69f0328c81b98a84c394f2c5dfec1997cc5" translate="yes" xml:space="preserve">
          <source>Unique by...</source>
          <target state="translated">Único por...</target>
        </trans-unit>
        <trans-unit id="96aa205044de370fb2e8c218b80760bcb3e7b5dd" translate="yes" xml:space="preserve">
          <source>Update 2015: ES6 version:</source>
          <target state="translated">Actualización 2015:Versión ES6:</target>
        </trans-unit>
        <trans-unit id="57a042a26b313b47c5306abc13676f31e632febd" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;http://underscorejs.org/&quot;&gt;Underscore.js&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Use &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://underscorejs.org/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Underscore.js&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="00f6a4215968bee265bdb4841df188a8634d1f7f" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;Set&lt;/code&gt; variant above to keep the first, and the &lt;code&gt;Map&lt;/code&gt; to keep the last:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Use la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;variante &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Set&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; anterior para conservar el primero y el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Map&lt;/code&gt; a&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para conservar el &amp;uacute;ltimo:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9bdab3ec80310e6364af5c88041386a0a8d43071" translate="yes" xml:space="preserve">
          <source>Using the 3rd (&quot;this array&quot;) parameter of the filter callback we can avoid a closure of the array variable:</source>
          <target state="translated">Usando el tercer parámetro (&quot;este arreglo&quot;)de la retrollamada del filtro podemos evitar un cierre de la variable del arreglo:</target>
        </trans-unit>
        <trans-unit id="dedc2810deb822938789db53e1998a107e835ed2" translate="yes" xml:space="preserve">
          <source>Using the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set&quot;&gt;Set&lt;/a&gt; constructor and the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax&quot;&gt;spread syntax&lt;/a&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Usando el &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;constructor &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Set&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y la &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;sintaxis de propagaci&amp;oacute;n&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9078a5b06471b912debb1bb930353e48daf752a7" translate="yes" xml:space="preserve">
          <source>We can easily derive &lt;code&gt;unique&lt;/code&gt; from &lt;code&gt;unqiueBy&lt;/code&gt; or use the faster implementation utilizing &lt;code&gt;Set&lt;/code&gt;s:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Podemos f&amp;aacute;cilmente derivar &lt;/font&gt;&lt;/font&gt; &lt;code&gt;unique&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;unqiueBy&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; o utilizar la aplicaci&amp;oacute;n m&amp;aacute;s r&amp;aacute;pida utilizando &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Set&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; s:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d8edb0918abc7975f9aa03a86c637a0c01848e29" translate="yes" xml:space="preserve">
          <source>Well ok so far so good. But let's do it properly this time in the ES6 style. It looks so cool..! But as of now how it will perform against the powerful lut solution is a mystery to me. Lets first see the code and then benchmark it.</source>
          <target state="translated">Bueno,hasta ahora todo bien.Pero hagámoslo bien esta vez en el estilo ES6.¡Se ve tan bien...! Pero a partir de ahora,la forma en que se comportará contra la poderosa solución de lut es un misterio para mí.Primero veamos el código y luego hagamos un análisis comparativo.</target>
        </trans-unit>
        <trans-unit id="860d131c0ac854d1e9106c25332a2f1850c0bb0f" translate="yes" xml:space="preserve">
          <source>Well ok we are all happy now. But the lead role always comes last with some applause. I am sure some of you wonder what Set object would do. Now that since we are open to ES6 and we know Map is the winner of the previous games let us compare Map with Set as a final. A typical Real Madrid vs Barcelona game this time... or is it? Let's see who will win the el classico :)</source>
          <target state="translated">Bien,bien,ahora estamos todos contentos.Pero el papel principal siempre llega al final con algunos aplausos.Estoy seguro de que algunos de ustedes se preguntan qué es lo que haría el Set object.Ahora que estamos abiertos al ES6 y sabemos que Map es el ganador de los juegos anteriores,comparemos Map con Set como una final.Un típico partido del Real Madrid contra el Barcelona esta vez...¿o no? Veamos quién ganará el clásico :)</target>
        </trans-unit>
        <trans-unit id="370230f0e4c174bcdf24f181eccb216042d92fa9" translate="yes" xml:space="preserve">
          <source>When I tested both implementation (with and without Set) for performance in chrome, I found that the one with Set is much much faster!</source>
          <target state="translated">Cuando probé ambas implementaciones (con y sin Set)para el rendimiento en cromo,encontré que la que tiene Set es mucho más rápida!</target>
        </trans-unit>
        <trans-unit id="cc7d995a1841ad16ff9871b9c863d40c602272fb" translate="yes" xml:space="preserve">
          <source>When removing objects by a key, you might to want to keep the first of &quot;equal&quot; objects or the last one.</source>
          <target state="translated">Al quitar los objetos con una llave,puede que quieras conservar el primero de los objetos &quot;iguales&quot; o el último.</target>
        </trans-unit>
        <trans-unit id="9cd8fc792f4f69a6d051c2cf002e027d0f149103" translate="yes" xml:space="preserve">
          <source>Which one would  you use..? Well not so fast...! Don't be deceived. Map is at displacement. Now look... in all of the above cases we fill an array of size n with numbers of range &amp;lt; n. I mean we have an array of size 100 and we fill with random numbers 0..9 so there are definite duplicates and &quot;almost&quot; definitely each number has a duplicate. How about if we fill the array in size 100 with random numbers 0..9999. Let's now see Map playing at home. This time an Array of 100K items but random number range is 0..100M. We will do 100 consecutive tests to average the results. OK let's see the bets..! &amp;lt;- no typo</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iquest;Cu&amp;aacute;l usar&amp;iacute;as? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Pues no tan r&amp;aacute;pido ...! &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;No te dejes enga&amp;ntilde;ar. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El mapa est&amp;aacute; en desplazamiento. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ahora mire ... en todos los casos anteriores, llenamos una matriz de tama&amp;ntilde;o n con n&amp;uacute;meros de rango &amp;lt;n. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Quiero decir que tenemos una matriz de tama&amp;ntilde;o 100 y la llenamos con n&amp;uacute;meros aleatorios 0..9, por lo que hay duplicados definidos y &quot;casi&quot; definitivamente cada n&amp;uacute;mero tiene un duplicado. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iquest;Qu&amp;eacute; tal si llenamos la matriz en tama&amp;ntilde;o 100 con n&amp;uacute;meros aleatorios 0..9999. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ahora veamos el mapa jugando en casa. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esta vez, una matriz de 100K elementos pero el rango de n&amp;uacute;meros aleatorios es 0..100M. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Haremos 100 pruebas consecutivas para promediar los resultados. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;OK, veamos las apuestas ...! &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;lt;- sin error tipogr&amp;aacute;fico&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ed0003a930932e628cb1a02a165ccbe0cc5dd994" translate="yes" xml:space="preserve">
          <source>Wow that was short..! But how about the performance..? It's beautiful... Since the heavy weight of the filter / indexOf lifted over our shoulders now i can test an array 1M random items of positive integers in range 0..99999 to get an average from 10 consecutive tests. I can say this time it's a real match. See the result for yourself :)</source>
          <target state="translated">¡Wow,eso fue corto...! Pero,¿qué hay de la actuación ..? Es hermosa...Desde que el peso pesado del índice de filtro se levantó sobre nuestros hombros ahora puedo probar una serie de 1M de elementos aleatorios de números enteros positivos en el rango 0..99999 para obtener un promedio de 10 pruebas consecutivas.Puedo decir que esta vez es una coincidencia real.Vea el resultado por usted mismo :)</target>
        </trans-unit>
        <trans-unit id="ce3f0236d2d07dfd1e1329aa5c7e1c8b720a3cdc" translate="yes" xml:space="preserve">
          <source>Wow.. man..! Well unexpectedly it didn't turn out to be an el classico at all. More like Barcelona FC against CA Osasuna :))</source>
          <target state="translated">Wow ..hombre ..! Bueno,inesperadamente no resultó ser un &quot;El Clásico&quot; en absoluto.Más bien el Barcelona FC contra el CA Osasuna :))</target>
        </trans-unit>
        <trans-unit id="0045ab03b3aca5a7e131f5f18508af47c2d688cd" translate="yes" xml:space="preserve">
          <source>Yet another ES6(2015) way of doing this that already works on a few browsers is:</source>
          <target state="translated">Otra forma de hacer esto que ya funciona en algunos navegadores es:</target>
        </trans-unit>
        <trans-unit id="a32788844cd1d78d3a7e227d29ae1c9883b14fa4" translate="yes" xml:space="preserve">
          <source>You can always try putting it into an object, and then iterating through its keys:</source>
          <target state="translated">Siempre puedes intentar ponerlo en un objeto,y luego iterar a través de sus teclas:</target>
        </trans-unit>
        <trans-unit id="c27db2f5ed434825f020965cf078662d7a5d8b98" translate="yes" xml:space="preserve">
          <source>You can simply do it in JavaScript, with the help of the second - index - parameter of the &lt;code&gt;filter&lt;/code&gt; method:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Simplemente puede hacerlo en JavaScript, con la ayuda del segundo par&amp;aacute;metro - &amp;iacute;ndice - del &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;m&amp;eacute;todo de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;filter&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a5ccb2330f2aef610502456380da1cc91e063a81" translate="yes" xml:space="preserve">
          <source>You could do</source>
          <target state="translated">Podrías hacer</target>
        </trans-unit>
        <trans-unit id="05ae959e9015de3a83d1dea6e3427dfaa3c25b4a" translate="yes" xml:space="preserve">
          <source>cheers!</source>
          <target state="translated">cheers!</target>
        </trans-unit>
        <trans-unit id="cd5d12d528695cab4c8d95add53ef3ca6fd47109" translate="yes" xml:space="preserve">
          <source>declarative and succinct implementation</source>
          <target state="translated">aplicación declarativa y sucinta</target>
        </trans-unit>
        <trans-unit id="a99cf5f1a9763e6a0397f2b5d498a9bb4364ec64" translate="yes" xml:space="preserve">
          <source>for the same reason, all objects will be considered equal: &lt;code&gt;uniq([{foo:1},{foo:2}])&lt;/code&gt; will return just &lt;code&gt;[{foo:1}]&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;por la misma raz&amp;oacute;n, todos los objetos se considerar&amp;aacute;n iguales: &lt;/font&gt;&lt;/font&gt; &lt;code&gt;uniq([{foo:1},{foo:2}])&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; devolver&amp;aacute; solo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;[{foo:1}]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="edd094385c15a6fae3174a4693769654adcb5c9f" translate="yes" xml:space="preserve">
          <source>generic solution by using a separate comparator function</source>
          <target state="translated">solución genérica mediante el uso de una función de comparación separada</target>
        </trans-unit>
        <trans-unit id="e239f6a1612923e74eebee43c2cf2d9f6d25d119" translate="yes" xml:space="preserve">
          <source>if it's been seen already, skip it</source>
          <target state="translated">si ya ha sido visto,sáltatelo</target>
        </trans-unit>
        <trans-unit id="539c4ff4d14c88a5fc24a391f8070ba9e4472ef0" translate="yes" xml:space="preserve">
          <source>if you can't read the code above ask, read a javascript book or here are some explainations about shorter code. &lt;a href=&quot;https://stackoverflow.com/a/21353032/2450730&quot;&gt;https://stackoverflow.com/a/21353032/2450730&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;si no puede leer el c&amp;oacute;digo anterior, pregunte, lea un libro de JavaScript o aqu&amp;iacute; hay algunas explicaciones sobre el c&amp;oacute;digo m&amp;aacute;s corto. &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/21353032/2450730&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https://stackoverflow.com/a/21353032/2450730&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">or</target>
        </trans-unit>
        <trans-unit id="c229b20c8b114325c93aa2b6a418145f99a20e45" translate="yes" xml:space="preserve">
          <source>or a &lt;code&gt;Map&lt;/code&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;o un &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Map&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9b5d6e1242f2ba1f7c81b87521cdec9e7f9b1add" translate="yes" xml:space="preserve">
          <source>or even using the &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Spread_operator&quot;&gt;spread operator&lt;/a&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;o incluso usando el &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Spread_operator&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;operador de propagaci&amp;oacute;n&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="806d44b43276ce5b485db5f1967f4d34d2e458cf" translate="yes" xml:space="preserve">
          <source>or in short hand</source>
          <target state="translated">o en mano corta</target>
        </trans-unit>
        <trans-unit id="1c48b3865f2548c947e1cc5c1192b629d30d0abb" translate="yes" xml:space="preserve">
          <source>otherwise, yield it and add it to the set of already seen values</source>
          <target state="translated">de lo contrario,cédalo y añádalo al conjunto de valores ya vistos</target>
        </trans-unit>
        <trans-unit id="fc555c29c370c91539f0994e128f9c3486cc9088" translate="yes" xml:space="preserve">
          <source>reuse of other small, generic functions</source>
          <target state="translated">reutilización de otras funciones pequeñas y genéricas</target>
        </trans-unit>
        <trans-unit id="20a7cc06c25fd99a1f0af70cca43ef31af8d4467" translate="yes" xml:space="preserve">
          <source>since hash keys can only be strings or symbols in JavaScript, this code doesn't distinguish numbers and &quot;numeric strings&quot;. That is, &lt;code&gt;uniq([1,&quot;1&quot;])&lt;/code&gt; will return just &lt;code&gt;[1]&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Como las claves hash solo pueden ser cadenas o s&amp;iacute;mbolos en JavaScript, este c&amp;oacute;digo no distingue n&amp;uacute;meros y &quot;cadenas num&amp;eacute;ricas&quot;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Es decir, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;uniq([1,&quot;1&quot;])&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; devolver&amp;aacute; solo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;[1]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5b1efd96f20963e6d81c23833f2d90ccd388edad" translate="yes" xml:space="preserve">
          <source>sort | uniq</source>
          <target state="translated">uniq</target>
        </trans-unit>
        <trans-unit id="19231064d1513213b54b57152bb7ae4ff73cd591" translate="yes" xml:space="preserve">
          <source>take the next value from the argument</source>
          <target state="translated">tomar el siguiente valor del argumento</target>
        </trans-unit>
        <trans-unit id="37c6ff6e73a628714bf9271b1cad7a72b47334be" translate="yes" xml:space="preserve">
          <source>there's no need for &lt;code&gt;slice&lt;/code&gt; nor &lt;code&gt;indexOf&lt;/code&gt; within the reduce function, like i've seen in other examples! it makes sense to use it along with a filter function though:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;No hay necesidad de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;slice&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ni &lt;/font&gt;&lt;/font&gt; &lt;code&gt;indexOf&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; dentro de la funci&amp;oacute;n de reducci&amp;oacute;n, como he visto en otros ejemplos. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Sin embargo, tiene sentido usarlo junto con una funci&amp;oacute;n de filtro:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5f855f12d97c8a7d6bc7de54edc1f31c979f43ac" translate="yes" xml:space="preserve">
          <source>this can be made shorter in ES6 to</source>
          <target state="translated">esto puede hacerse más corto en ES6 para</target>
        </trans-unit>
        <trans-unit id="5782296420b9d703acbceb54a1f4355994661ab2" translate="yes" xml:space="preserve">
          <source>use &lt;code&gt;Array.filter()&lt;/code&gt; like this</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;use &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Array.filter()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; como este&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e80a5930769a9f4a323662f414c3d43a685d1f98" translate="yes" xml:space="preserve">
          <source>which both also work with non-primitive keys.</source>
          <target state="translated">que también funcionan con claves no primitivas.</target>
        </trans-unit>
        <trans-unit id="8729ffcac367e70cb40c317ee0944702856d5a01" translate="yes" xml:space="preserve">
          <source>which is, again, a variation of the first snippet.</source>
          <target state="translated">que es,de nuevo,una variación del primer fragmento.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
