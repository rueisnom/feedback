<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/9229645">
    <body>
      <group id="9229645">
        <trans-unit id="545ccbaeb6c5eadd96d8aaf423358b6394811b09" translate="yes" xml:space="preserve">
          <source>&quot;Smart&quot; but na&amp;iuml;ve way</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;「スマート」だが素朴な方法&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="58d24873a3fc1f2581ffb3c8c6ed219719ff1409" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter&quot;&gt;Here&lt;/a&gt; is nice explanation of &lt;code&gt;Array.filter()&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここ&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に&lt;/font&gt; &lt;code&gt;Array.filter()&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;良い説明があり&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="995e9e0e5ed903ff01666d2a756fe857488bba64" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;_.uniq(array, [isSorted], [iterator])&lt;/code&gt;&lt;em&gt;Alias:&lt;/em&gt;&lt;strong&gt;unique&lt;/strong&gt;</source>
          <target state="translated">&lt;code&gt;_.uniq(array, [isSorted], [iterator])&lt;/code&gt; &lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;エイリアス：&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一意&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a03992f86bbb97f9454701a5854982efc0c04f7a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;uniqueBy&lt;/code&gt; isn't as fast as an imperative implementation with loops, but it is way more expressive due to its genericity.</source>
          <target state="translated">&lt;code&gt;uniqueBy&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、ループを使用した命令型の実装ほど高速ではありませんが、その汎用性により、より表現力があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cdd3bb84934ff61728eb9a490ffb508207ff4e0d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;uniqueBy&lt;/code&gt; utilizes mutations (&lt;code&gt;push(x) (acc)&lt;/code&gt;) hidden inside its body. It reuses the accumulator instead of throwing it away after each iteration. This reduces memory consumption and GC pressure. Since this side effect is wrapped inside the function, everything outside remains pure.</source>
          <target state="translated">&lt;code&gt;uniqueBy&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、その本体内に隠された&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;突然変異（&lt;/font&gt;&lt;/font&gt; &lt;code&gt;push(x) (acc)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;利用し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アキュムレータは、繰り返しごとに捨てるのではなく、再利用します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これにより、メモリの消費とGCの負荷が軽減されます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この副作用は関数の内側にラップされているため、外側はすべて純粋なままです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d312cb48b363793232813139a115ef6f51aedee8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note: &lt;a href=&quot;http://lodash.com&quot;&gt;Lo-Dash&lt;/a&gt; (an &lt;a href=&quot;http://underscorejs.org/&quot;&gt;underscore&lt;/a&gt; competitor) also offers a comparable &lt;a href=&quot;http://lodash.com/docs#uniq&quot;&gt;.uniq&lt;/a&gt; implementation.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;注：&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://lodash.com&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Lo-Dash&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://underscorejs.org/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アンダースコアの&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;競合）も、同等の&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://lodash.com/docs#uniq&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.uniq&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;実装を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;提供しています&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="cdceb3de3f861e5954bc6fe33ff5ba380aa54a71" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;2019 edit:&lt;/strong&gt; Modern versions of JavaScript make this a much easier problem to solve.  Using &lt;code&gt;Set&lt;/code&gt; will work, regardless of whether your array contains objects, strings, numbers, or any other type.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2019編集：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; JavaScriptの最新バージョンでは、これを解決するのがはるかに簡単な問題になっています。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列にオブジェクト、文字列、数値、その他の型が含まれているかどうかに関係なく、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Set&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;できます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0e21d62008df898624989d75d47e7cb09c6a5375" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;a href=&quot;http://jsfiddle.net/ZNLUP/1/&quot;&gt;Example&lt;/a&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;http://jsfiddle.net/ZNLUP/1/&quot;&gt;Example&lt;/a&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e3bdb51f61286b91e876af275ac900201c1f8a95" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;a href=&quot;http://underscorejs.org/#uniq&quot;&gt;_.uniq&lt;/a&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;http://underscorejs.org/#uniq&quot;&gt;_.uniq&lt;/a&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a54f91ace3b2ad56bcf413aa86d26962a4ba6335" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ECMAScript 6: Use the new Set data structure (order-safe)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ECMAScript 6：新しいSetデータ構造を使用する（注文セーフ）&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4a97222c41b3523d91d2a7194468abc0762f7ee2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example usage:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用例：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="48bf5499e3ac63560ca0e0106a29021adb072bfb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Performance&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Performance&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="21aa429fd1f960433948c85037e5c8a8b7b989ec" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Solution 1&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;解決策1&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b92c9843bad7e62d5c47d0d1653f2216299facdc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Solution 2 (using Set)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ソリューション2（セットを使用）&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="65ea5aea422a6fb8b4ebd86dc44393c9f42161c8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Test&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Test&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="693e8c2fd79ed99956157996c6819d2278b8d50f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This is probably one of the fastest way to remove permanently the duplicates from an array&lt;/strong&gt;
10x times faster than the most functions here.&amp;amp; 78x faster in safari</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これはおそらく&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 、ここにあるほとんどの関数よりも10倍高速に&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列から重複を永久に削除する最も速い方法の1つ&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。＆サファリでは78倍高速&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="16711543421929b031abbd4ca5cd76cc5084d772" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Vanilla JS: Remove duplicates by tracking already seen values (order-safe)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vanilla JS：すでに見られた値を追跡することで重複を削除します（注文セーフ）&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="07f1d1fb1e7285534783acf3cbd3f5e1c2fbe825" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Vanilla JS: Remove duplicates using an Object like a Set&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;バニラJS：セットのようなオブジェクトを使用して重複を削除する&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9178dc66b6ef86ddf72367ece3117f6f2bca4296" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;here is the simple method without any special libraries are special function,&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここに、特別なライブラリなしの簡単な方法があります特別な関数です、&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="951f540d63d2a9bd5664916fc0725d2c88d41882" translate="yes" xml:space="preserve">
          <source>A &quot;lazy&quot;, generator-based version of &lt;code&gt;uniq&lt;/code&gt; can be built on the same basis:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;「怠惰な」ジェネレータベースのバージョンの&lt;/font&gt;&lt;/font&gt; &lt;code&gt;uniq&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;も同じように構築できます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="07a62db85b2117b350bb4cd41710e9ab8906b47f" translate="yes" xml:space="preserve">
          <source>A particularly useful &lt;code&gt;key()&lt;/code&gt; is &lt;code&gt;JSON.stringify&lt;/code&gt; which will remove objects that are physically different, but &quot;look&quot; the same:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;特に有用な&lt;/font&gt;&lt;/font&gt; &lt;code&gt;key()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;/font&gt; &lt;code&gt;JSON.stringify&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;で、物理的には異なるが同じように見えるオブジェクトを削除します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="95415bb6a579cb4f5c8ba0ceafdf9a061fbc4dcd" translate="yes" xml:space="preserve">
          <source>A simple but effective technique, is to use the &lt;code&gt;filter&lt;/code&gt; method in combination with the filter &lt;code&gt;function(value, index){ return this.indexOf(value) == index }&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;シンプルですが効果的な手法は、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;filter&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;メソッドをfilter &lt;/font&gt;&lt;/font&gt; &lt;code&gt;function(value, index){ return this.indexOf(value) == index }&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と組み合わせ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;て使用すること&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3a878f8064854c12f88684f87d5edccf9e99cd3c" translate="yes" xml:space="preserve">
          <source>A single line version using array filter and indexOf functions:</source>
          <target state="translated">配列フィルタとindexOf関数を使った一行バージョン。</target>
        </trans-unit>
        <trans-unit id="968334a83172654e833d9ad9bee60f4593ec84c5" translate="yes" xml:space="preserve">
          <source>A slight modification of thg435's excellent answer to use a custom comparator:</source>
          <target state="translated">カスタムコンパレータを使用するために、thg435さんの素晴らしい回答を少し修正しました。</target>
        </trans-unit>
        <trans-unit id="82727c37fc882dca53361a569c38f63e752d01ca" translate="yes" xml:space="preserve">
          <source>A universal solution combines both approaches: it uses hash lookups for primitives and linear search for objects.</source>
          <target state="translated">ユニバーサルソリューションは、プリミティブのハッシュ検索とオブジェクトの線形検索の両方のアプローチを組み合わせたものです。</target>
        </trans-unit>
        <trans-unit id="6c563c21f20fe92abf54d4d1e6c370b0dce20ec2" translate="yes" xml:space="preserve">
          <source>Again, this doesn't work with objects (because all objects are equal for &lt;code&gt;sort&lt;/code&gt;). Additionally, we silently change the original array as a side effect - not good! However, if your input is already sorted, this is the way to go (just remove &lt;code&gt;sort&lt;/code&gt; from the above).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;繰り返しますが、これはオブジェクトでは機能しません（すべてのオブジェクトが&lt;/font&gt;&lt;/font&gt; &lt;code&gt;sort&lt;/code&gt; で&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;等しいため&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;さらに、副作用として元の配列を黙って変更します-良くありません！&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ただし、入力がすでに並べ替えられている場合は、これが方法です（&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;上記の&lt;/font&gt;&lt;/font&gt; &lt;code&gt;sort&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;削除するだけ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1112e1a1136768b03425b1d614b072734f9a6f90" translate="yes" xml:space="preserve">
          <source>Although ES6 Solution is the best, I'm baffled as to how nobody has shown the following solution:</source>
          <target state="translated">ES6ソリューションは最高なのですが、以下のようなソリューションを誰も示していないことに困惑しています。</target>
        </trans-unit>
        <trans-unit id="cced73bd84dbbc926ab22fece5468cc51393b47d" translate="yes" xml:space="preserve">
          <source>Although concise, this algorithm is not particularly efficient for large arrays (quadratic time).</source>
          <target state="translated">簡潔ではありますが、このアルゴリズムは大規模な配列(二次時間)に対しては特に効率的ではありません。</target>
        </trans-unit>
        <trans-unit id="1b8526fb50e81a179dc83cfe52a9aa2ac78cb27c" translate="yes" xml:space="preserve">
          <source>Another option is to sort the array first, and then remove each element equal to the preceding one:</source>
          <target state="translated">もう一つの方法は、最初に配列をソートしてから、その前の要素と同じ要素を削除することです。</target>
        </trans-unit>
        <trans-unit id="0e311d9ee85ba5d7553634e3dbd1d24ebfc058ce" translate="yes" xml:space="preserve">
          <source>Apart from being a simpler, more terse solution than the current answers (minus the future-looking ES6 ones), I perf tested this and it was much faster as well:</source>
          <target state="translated">現在の解答よりもシンプルで簡潔な解答であることは別にして、(将来的なES6の解答を除いて)、私はこれをPerfテストして、それは同様にはるかに速かったです。</target>
        </trans-unit>
        <trans-unit id="693617f23b1d9b82b6ddaf03427bdce5100c36f7" translate="yes" xml:space="preserve">
          <source>Basically, we iterate over the array and, for each element, check if the first position of this element in the array is equal to the current position. Obviously, these two positions are different for duplicate elements.</source>
          <target state="translated">基本的には,配列を反復処理し,各要素について,配列内のこの要素の最初の位置が現在の位置と等しいかどうかをチェックします.明らかに、これら2つの位置は重複した要素については異なります。</target>
        </trans-unit>
        <trans-unit id="2b69cb94e2fd02706e10676920008541b3213bba" translate="yes" xml:space="preserve">
          <source>Bear in mind though that this also sorts the array.</source>
          <target state="translated">しかし、これも配列をソートすることに注意してください。</target>
        </trans-unit>
        <trans-unit id="2e679bc577c84e239a221c9ab80c702c7dc59b46" translate="yes" xml:space="preserve">
          <source>Benefits of this approach:</source>
          <target state="translated">この方法のメリット。</target>
        </trans-unit>
        <trans-unit id="ea0df8386c4a7b2c2679f6ebcd420fd8589e491a" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;http://underscorejs.org/#uniq&quot;&gt;underscore&lt;/a&gt; and &lt;a href=&quot;https://lodash.com/docs#uniq&quot;&gt;Lo-Dash&lt;/a&gt; provide &lt;code&gt;uniq&lt;/code&gt; methods. Their algorithms are basically similar to the first snippet above and boil down to this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;http://underscorejs.org/#uniq&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アンダースコア&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://lodash.com/docs#uniq&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Lo-Dash&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;どちらも&lt;/font&gt;&lt;/font&gt; &lt;code&gt;uniq&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;メソッドを&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;提供し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それらのアルゴリズムは基本的に上記の最初のスニペットに似ており、要約すると次のようになります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6be24a97cdca9d9739d2f77bbc3f540977649073" translate="yes" xml:space="preserve">
          <source>Code example :</source>
          <target state="translated">コード例 .</target>
        </trans-unit>
        <trans-unit id="da723bc38aaf5f90859a67c0ad3328d59c066d34" translate="yes" xml:space="preserve">
          <source>D3.js</source>
          <target state="translated">D3.js</target>
        </trans-unit>
        <trans-unit id="071f175015a0f29b2243cd5a1dec24776d6a708a" translate="yes" xml:space="preserve">
          <source>Demo: &lt;a href=&quot;http://jsfiddle.net/46S7g/&quot;&gt;http://jsfiddle.net/46S7g/&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;デモ：&lt;/font&gt;&lt;a href=&quot;http://jsfiddle.net/46S7g/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : &lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;//jsfiddle.net/46S7g/&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="119a17a5588ca2c9539c4d577428f4c29af39e36" translate="yes" xml:space="preserve">
          <source>ECMAScript 6 adds the new &lt;code&gt;Set&lt;/code&gt; Data-Structure, which lets you store values of any type.  &lt;code&gt;Set.values&lt;/code&gt; returns elements in insertion order.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ECMAScript 6は新しい&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Set&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Data-Structureを&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;追加し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。これにより、任意のタイプの値を保存できます。 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Set.values&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、挿入順に要素を返します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f340712260381d35a53813a65d261137ac25e7e6" translate="yes" xml:space="preserve">
          <source>ES6</source>
          <target state="translated">ES6</target>
        </trans-unit>
        <trans-unit id="4dc5c144fd599775e0cb5c2819fefe484bbb50f0" translate="yes" xml:space="preserve">
          <source>ES6 provides the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set&quot;&gt;Set&lt;/a&gt; object, which makes things a whole lot easier:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ES6には&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Set&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;オブジェクトが&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;用意されており、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;物事が非常に簡単になります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">スニペットを展開</target>
        </trans-unit>
        <trans-unit id="62e61d677b74097f1324d0c47e3e4c694a67d9c8" translate="yes" xml:space="preserve">
          <source>Faster uniq with sorting</source>
          <target state="translated">ソートでより高速なユニック</target>
        </trans-unit>
        <trans-unit id="5f07110dd5176567a6f93044cb1c87801610ae12" translate="yes" xml:space="preserve">
          <source>First or last?</source>
          <target state="translated">最初か最後か?</target>
        </trans-unit>
        <trans-unit id="1fba1a8f8ac05db4a7ffb2d3a384f65031ecf0a2" translate="yes" xml:space="preserve">
          <source>Function calls are expensive in JavaScript, therefore the above solutions, as concise as they are, are not particularly efficient. For maximal performance, replace &lt;code&gt;filter&lt;/code&gt; with a loop and get rid of other function calls:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;JavaScriptでは関数呼び出しはコストがかかるため、上記のソリューションは、簡潔であるほど、特に効率的ではありません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最大限のパフォーマンス&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を得るには、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;filter&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;をループに&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;置き換え&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、他の関数呼び出しを削除します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a3e705cc61a19f33d7c9c030f107a70569966485" translate="yes" xml:space="preserve">
          <source>Generators</source>
          <target state="translated">Generators</target>
        </trans-unit>
        <trans-unit id="325969aad6efa6a4492a383509a4216afef4fd35" translate="yes" xml:space="preserve">
          <source>Generic Functional Approach</source>
          <target state="translated">一般的な機能的アプローチ</target>
        </trans-unit>
        <trans-unit id="f20c7800e07e5893ff765d93af93f5768dc8f851" translate="yes" xml:space="preserve">
          <source>Get all non-unique values (i.e.: duplicate/more than one occurrence) in an array</source>
          <target state="translated">配列内の一意ではないすべての値 (すなわち、重複している複数の値)を取得します。</target>
        </trans-unit>
        <trans-unit id="ca9caa9d6215f630d599081a01ca1d412a5ec674" translate="yes" xml:space="preserve">
          <source>Go for this one:</source>
          <target state="translated">これにしてくれ</target>
        </trans-unit>
        <trans-unit id="37f725fcd879ca56633a90748ea73597e6704eb9" translate="yes" xml:space="preserve">
          <source>Got tired of seeing all bad examples with for-loops or jQuery. Javascript has the perfect tools for this nowadays: sort, map and reduce.</source>
          <target state="translated">フォアループやjQueryを使った悪い例を見るのに疲れました。最近のJavascriptには、ソート、マップ、リデュースなどの完璧なツールがあります。</target>
        </trans-unit>
        <trans-unit id="306fc68e40113d3486ca591f2b04bb22a3b7fc46" translate="yes" xml:space="preserve">
          <source>Hashtables to the rescue</source>
          <target state="translated">ハッシュテーブルの救済</target>
        </trans-unit>
        <trans-unit id="df6d2eab3d4ffaec2b30c4b30f1d175bcb142186" translate="yes" xml:space="preserve">
          <source>Here is a generic and strictly functional approach with ES2015:</source>
          <target state="translated">ここでは、ES2015を使った汎用的で厳密な機能的なアプローチをご紹介します。</target>
        </trans-unit>
        <trans-unit id="3d8d2da92e3cf1ae944d73658d74a427be5090a2" translate="yes" xml:space="preserve">
          <source>Here is a simple answer to the question.</source>
          <target state="translated">ここで簡単にお答えします。</target>
        </trans-unit>
        <trans-unit id="1aaf61be25efa7f5a29b138cb733c7ac8207d756" translate="yes" xml:space="preserve">
          <source>Here is very simple for understanding and working anywhere (even in PhotoshopScript) code. Check it!</source>
          <target state="translated">どこでも(PhotoshopScriptでも)コードを理解して作業するための非常に簡単な方法をご紹介します。ぜひチェックしてみてください。</target>
        </trans-unit>
        <trans-unit id="fc157aff3805697c4605ed92fa9f614748b76f5d" translate="yes" xml:space="preserve">
          <source>However, if you need an array with unique elements, why not use sets right from the beginning?</source>
          <target state="translated">しかし、ユニークな要素を持つ配列が必要な場合は、最初からセットを使うのはどうでしょうか?</target>
        </trans-unit>
        <trans-unit id="17e70a10c792690d43997eb63da08ec4691a0202" translate="yes" xml:space="preserve">
          <source>I believe this is the best way to do this</source>
          <target state="translated">と思っています。</target>
        </trans-unit>
        <trans-unit id="474d6962cc2b53f1812502f640e5c172d5647568" translate="yes" xml:space="preserve">
          <source>I could point to all the codes that I've tried but I think it's useless because they don't work. I accept jQuery solutions too.</source>
          <target state="translated">試したコードを全部指してもいいのですが、うまくいかないので無駄だと思います。jQueryでの解決策も受け付けています。</target>
        </trans-unit>
        <trans-unit id="ee05eff2251d0b84a0e95f84a8c352222dbd8f24" translate="yes" xml:space="preserve">
          <source>I had done a detailed comparison of dupes removal at some other question but having noticed that this is the real place i just wanted to share it here as well.</source>
          <target state="translated">私はいくつかの他の質問でダブりの除去の詳細な比較を行っていたが、ここが本当の場所であることに気づいたことで、私はちょうどここでもそれを共有したいと思いました。</target>
        </trans-unit>
        <trans-unit id="0bc6794192adc78c20c5964545cd64cb0038bf78" translate="yes" xml:space="preserve">
          <source>I have a very simple JavaScript array that may or may not contain duplicates.</source>
          <target state="translated">私は非常にシンプルなJavaScriptの配列を持っていますが、それは重複を含んでいるかもしれませんし、含まれていないかもしれません。</target>
        </trans-unit>
        <trans-unit id="63e0cb18e79ace78ff32f62709207324c1710b04" translate="yes" xml:space="preserve">
          <source>I need to remove the duplicates and put the unique values in a new array.</source>
          <target state="translated">重複を削除して、ユニークな値を新しい配列に入れたいのですが、どうすればいいでしょうか?</target>
        </trans-unit>
        <trans-unit id="73e031ed418e5210dcc5f12cb652d371edea5ffe" translate="yes" xml:space="preserve">
          <source>If by any chance you were using</source>
          <target state="translated">もしもあなたが</target>
        </trans-unit>
        <trans-unit id="a437e7d2838cef61cfe7addea4b3ef534ddb827c" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;key&lt;/code&gt; is not primitive, you have to resort to the linear search:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;key&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;がプリミティブでない&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;場合は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、線形検索に頼る必要があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d1d6b7a33ee0a8e4800ddaea96bac45164f10742" translate="yes" xml:space="preserve">
          <source>If you identify &lt;code&gt;uniqueBy&lt;/code&gt; as the cause of a concrete performance penalty in your app, replace it with optimized code. That is, write your code first in an functional, declarative way. Afterwards, provided that you encounter performance issues, try to optimize the code at the locations, which are the cause of the problem.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アプリの具体的なパフォーマンスペナルティの原因として&lt;/font&gt;&lt;/font&gt; &lt;code&gt;uniqueBy&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を特定&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;した場合は、最適化されたコードに置き換えます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;つまり、最初に機能的で宣言的な方法でコードを記述します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;その後、パフォーマンスの問題が発生した場合は、問題の原因となっている場所でコードを最適化してみてください。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ab0e7dce3a908fc76ed51abf9ce326ecd69fa572" translate="yes" xml:space="preserve">
          <source>If you're using jQuery and can't stand anything without a dollar before it, it goes like this:</source>
          <target state="translated">jQueryを使っていて、その前にドルがないと何も我慢できないという人は、こんな感じになります。</target>
        </trans-unit>
        <trans-unit id="3ae2dc00a66fdb22a311cc02495ede59bedc1485" translate="yes" xml:space="preserve">
          <source>In ECMAScript 6 (aka ECMAScript 2015), &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; can be used to filter out duplicates. Then it can be converted back to an array using the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator&quot;&gt;spread operator&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ECMAScript 6（別名ECMAScript 2015）では、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set&quot;&gt; &lt;code&gt;Set&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用して重複を除外で​​きます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;次に、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;spread演算子&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用して配列に変換し直すことができます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5e544d373fe6916aa41b2a5e1f371276a9bcb65b" translate="yes" xml:space="preserve">
          <source>In ES6 you can use a &lt;code&gt;Set&lt;/code&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ES6では&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Set&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用できます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="167dc2dcc835e6c3326aed0689ba6dc35074c355" translate="yes" xml:space="preserve">
          <source>In ES6 you have Sets and Spread which makes it very easy and performant to remove all duplicates:</source>
          <target state="translated">ES6には、セットとスプレッドがあり、これを使えば、重複しているものを簡単に取り除くことができます。</target>
        </trans-unit>
        <trans-unit id="8989c181d4d1b67f8d668569a17e489505f527a8" translate="yes" xml:space="preserve">
          <source>In chrome  v51 reduce &amp;amp; lut : 23.90ms vs filter &amp;amp; indexOf : 1066ms</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Chrome V51では、reduce＆lut：23.90ms vs filter＆indexOf：1066ms&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fa679ec33507102effbf778174e8c2631726af00" translate="yes" xml:space="preserve">
          <source>In firefox v47 reduce &amp;amp; lut : 14.85ms vs filter &amp;amp; indexOf : 2836ms</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;firefox v47では、reduce＆lut：14.85ms vs filter＆indexOf：2836ms&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cea7ad738688d995989a24aaafa8546f256b3f7c" translate="yes" xml:space="preserve">
          <source>It's a library with a host of functions for manipulating arrays.</source>
          <target state="translated">配列を操作するための関数のホストを持つライブラリです。</target>
        </trans-unit>
        <trans-unit id="94b3de46d5fda8e179f2f28c575f153e17e60955" translate="yes" xml:space="preserve">
          <source>It's the tie to go along with jQuery's tux, and Backbone.js's
  suspenders.</source>
          <target state="translated">jQueryのタキシードとBackbone.jsのサスペンダーに合わせたネクタイです。</target>
        </trans-unit>
        <trans-unit id="27c968e6692b41bf6e1a241b870dc41ff1a51b17" translate="yes" xml:space="preserve">
          <source>Libraries</source>
          <target state="translated">Libraries</target>
        </trans-unit>
        <trans-unit id="c81f35699be685add34bac0ef905ea52b6be0ebe" translate="yes" xml:space="preserve">
          <source>Memory Consumption and Garbage Collection</source>
          <target state="translated">メモリ消費とゴミの収集</target>
        </trans-unit>
        <trans-unit id="47ae1edb4b6ab8e1304013b0910592cd36981138" translate="yes" xml:space="preserve">
          <source>More: &lt;a href=&quot;https://stackoverflow.com/a/25082874/2450730&quot;&gt;https://stackoverflow.com/a/25082874/2450730&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;詳細：&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/25082874/2450730&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : &lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;//stackoverflow.com/a/25082874/2450730&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="85ebca451fa590d9155f3e01f22e262f73022640" translate="yes" xml:space="preserve">
          <source>My test case comparison:
&lt;a href=&quot;http://jsperf.com/remove-duplicate-array-tests&quot;&gt;http://jsperf.com/remove-duplicate-array-tests&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;テストケースの比較：&lt;/font&gt;&lt;a href=&quot;http://jsperf.com/remove-duplicate-array-tests&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : &lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;//jsperf.com/remove-duplicate-array-tests&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ec0b4f527e5af3d0adc23eca5a85a60e6594e249" translate="yes" xml:space="preserve">
          <source>Note that, unlike in python, ES6 sets are iterated in insertion order, so this code preserves the order of the original array.</source>
          <target state="translated">python とは異なり、ES6 のセットは挿入順にイテートされるので、このコードは元の配列の順番を保持することに注意してください。</target>
        </trans-unit>
        <trans-unit id="b47bd34a85a2811e200020c3cbdd86b83d777f79" translate="yes" xml:space="preserve">
          <source>Now this is the spectacular comeback of Map()..! May be now you can make a better decision when you want to remove the dupes.</source>
          <target state="translated">これがMap()の華麗なるカムバックです。これで、ダブりを削除したいときに、より良い判断ができるようになるかもしれません。</target>
        </trans-unit>
        <trans-unit id="8afa1e13386a1232742d929f60c72774ec2326f7" translate="yes" xml:space="preserve">
          <source>Now uniqueArray contains no duplicates.</source>
          <target state="translated">これで、uniqueArrayには重複したものが含まれなくなりました。</target>
        </trans-unit>
        <trans-unit id="9ec2907aa469f6821b970a7fb3c51157c9cc9129" translate="yes" xml:space="preserve">
          <source>OK .. even though this one is O(n) and the others are O(n^2) i was curious to see benchmark comparison between this reduce / look up table and filter/indexOf combo (I choose Jeetendras very nice implementation &lt;a href=&quot;https://stackoverflow.com/a/37441144/4543207&quot;&gt;https://stackoverflow.com/a/37441144/4543207&lt;/a&gt;). I prepare a 100K item array filled with random positive integers in range 0-9999 and and it removes the duplicates. I repeat the test for 10 times and the average of the results show that they are no match in performance.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これはO（n）で他はO（n ^ 2）ですが、この削減/ルックアップテーブルとフィルター/ indexOfコンボのベンチマーク比較を知りたいと思っていました（私はJeetendrasの非常に優れた実装&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/37441144/4543207&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を選択してい&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます： //stackoverflow.com/a/37441144/4543207&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;範囲0〜9999のランダムな正の整数で満たされた100Kの項目配列を準備し、重複を削除します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;テストを10回繰り返しましたが、結果の平均から、パフォーマンスが一致していないことがわかります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="14982fd566d790691f2414b94fff6c214b0ec176" translate="yes" xml:space="preserve">
          <source>One caveat: Array.lastIndexOf() was added in IE9, so if you need to go lower than that, you'll need to look elsewhere.</source>
          <target state="translated">ひとつ注意点があります:Array.lastIndexOf()は IE9 で追加されたので、それよりも低い値にする必要がある場合は、他の場所を探す必要があります。</target>
        </trans-unit>
        <trans-unit id="6359004d219d441a7fd98b18f76da96282a7a92a" translate="yes" xml:space="preserve">
          <source>One line:</source>
          <target state="translated">一行。</target>
        </trans-unit>
        <trans-unit id="425d7d39d9344fdef2a7433c1ea2dc8035792a02" translate="yes" xml:space="preserve">
          <source>Or, for an order-safe version, use an object to store all previously seen values, and check values against it before before adding to an array.</source>
          <target state="translated">あるいは、オーダーセーフのバージョンでは、オブジェクトを使用して、以前に見たすべての値を保存し、配列に追加する前に値をチェックします。</target>
        </trans-unit>
        <trans-unit id="63c904559993935c470f516c8b549ca7f3640dbb" translate="yes" xml:space="preserve">
          <source>Performance</source>
          <target state="translated">Performance</target>
        </trans-unit>
        <trans-unit id="3130994b43da1d8950109e1c6564a8348e9d6104" translate="yes" xml:space="preserve">
          <source>Performance Considerations</source>
          <target state="translated">パフォーマンスに関する考察</target>
        </trans-unit>
        <trans-unit id="34fb3eeb78fc7a90a5b1c546d9892accd7bbc4da" translate="yes" xml:space="preserve">
          <source>Produces a duplicate-free version of the &lt;strong&gt;array&lt;/strong&gt;, using === to test object
  equality. If you know in advance that the &lt;strong&gt;array&lt;/strong&gt; is sorted, passing
  &lt;em&gt;true&lt;/em&gt; for &lt;strong&gt;isSorted&lt;/strong&gt; will run a much faster algorithm. If you want to
  compute unique items based on a transformation, pass an &lt;strong&gt;iterator&lt;/strong&gt;
  function.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;===を使用してオブジェクトの等価性をテストし&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、重複のないバージョンの&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を生成します。&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;がソートさ &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;れていることが事前にわかっている場合&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;isSortedに&lt;/font&gt;&lt;/strong&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;true&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;渡す&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と、はるかに高速なアルゴリズムが実行されます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;変換に基づいて一意のアイテムを計算する場合は、&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;反復&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 関数を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;渡し&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="08211355427595285e350655413b390f94fa4272" translate="yes" xml:space="preserve">
          <source>Quick and dirty using jQuery:</source>
          <target state="translated">jQueryを使った手っ取り早くて汚い。</target>
        </trans-unit>
        <trans-unit id="9e88f9a1a4eb990b5d6e04b77c41e120b65441dc" translate="yes" xml:space="preserve">
          <source>Remove duplicate values from JS array</source>
          <target state="translated">JS配列から重複した値を削除する</target>
        </trans-unit>
        <trans-unit id="116ed58a9ac48ee9ed724a44f4d19057f2357651" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;https://jsfiddle.net/s6skxLtz/4/&quot;&gt;&lt;strong&gt;this Fiddle&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;https://jsfiddle.net/s6skxLtz/4/&quot;&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このフィドル&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;も参照してください&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4bcb4e163bf193fe874c35e7a1a754e4ed2bd51c" translate="yes" xml:space="preserve">
          <source>Show code snippet</source>
          <target state="translated">コードスニペットを表示</target>
        </trans-unit>
        <trans-unit id="699c6dcefd301187cfe53c9fcf84bb221d610c06" translate="yes" xml:space="preserve">
          <source>Similar question:</source>
          <target state="translated">似たような質問。</target>
        </trans-unit>
        <trans-unit id="ac39eb7eec1a33c69714ccbe982b60c62d2ed791" translate="yes" xml:space="preserve">
          <source>Simplest One I've run into so far. In es6.</source>
          <target state="translated">これまでに出会った中で 最も単純なものだ es6では</target>
        </trans-unit>
        <trans-unit id="0ef0ebe3fc0c514a0634920d1e1254651fc565d2" translate="yes" xml:space="preserve">
          <source>So the options is:</source>
          <target state="translated">選択肢があるんですね。</target>
        </trans-unit>
        <trans-unit id="f79100578fc71d13412d5f55525916acaffe9b47" translate="yes" xml:space="preserve">
          <source>Someone asked about ordering the results based on how many unique names there are:</source>
          <target state="translated">ユニークな名前が何個あるかで結果の順番を決めることについて質問した人がいました。</target>
        </trans-unit>
        <trans-unit id="e1a48f3427d9eddfab0ade65ec4b1cca73c8f276" translate="yes" xml:space="preserve">
          <source>Sometimes it's desired to uniquify a list based on some criteria other than just equality, for example, to filter out objects that are different, but share some property. This can be done elegantly by passing a callback. This &quot;key&quot; callback is applied to each element, and elements with equal &quot;keys&quot; are removed. Since &lt;code&gt;key&lt;/code&gt; is expected to return a primitive, hash table will work fine here:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;たとえば、異なるが、いくつかのプロパティを共有するオブジェクトをフィルターで除外するために、単なる等号以外の基準に基づいてリストを一意化することが必要な場合があります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは、コールバックを渡すことによってエレガントに行うことができます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この「キー」コールバックは各要素に適用され、等しい「キー」を持つ要素は削除されます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;以来&lt;/font&gt;&lt;/font&gt; &lt;code&gt;key&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プリミティブを返すことが期待されている、ハッシュテーブルは、ここでは正常に動作します：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="952df80db868b6b570fa1dbaecf544bd4d0434db" translate="yes" xml:space="preserve">
          <source>Sort based on occurrence:</source>
          <target state="translated">発生状況に応じてソートします。</target>
        </trans-unit>
        <trans-unit id="5ff57f4185e884322f43c9c59da60f12f41285ea" translate="yes" xml:space="preserve">
          <source>TL;DR</source>
          <target state="translated">TL;DR</target>
        </trans-unit>
        <trans-unit id="eb15050cfc7e83132ea94b727e93e728da0799e5" translate="yes" xml:space="preserve">
          <source>Test: &lt;a href=&quot;http://jsperf.com/wgu&quot;&gt;http://jsperf.com/wgu&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;テスト：&lt;/font&gt;&lt;a href=&quot;http://jsperf.com/wgu&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : &lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;//jsperf.com/wgu&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="586339606bc4a03362f3e59eaae6936619d62352" translate="yes" xml:space="preserve">
          <source>That said, if your arrays contain only primitives and you don't care about types (e.g. it's always numbers), this solution is optimal.</source>
          <target state="translated">つまり、あなたの配列がプリミティブだけを含み、型を気にしない場合(例:常に数値である)、この解決策が最適です。</target>
        </trans-unit>
        <trans-unit id="859dd2590c4a024ba0ed0e7e17925ec907bcb9ea" translate="yes" xml:space="preserve">
          <source>The best from two worlds</source>
          <target state="translated">二つの世界から最高のものを</target>
        </trans-unit>
        <trans-unit id="9545a5d4e10dc6a7e8fabdf289be8c28ef8a32eb" translate="yes" xml:space="preserve">
          <source>The following is more than 80% faster than the jQuery method listed (see tests below).
It is an answer from a similar question a few years ago. If I come across the person who originally proposed it I will post credit.
Pure JS.</source>
          <target state="translated">以下は、記載されているjQueryメソッド(以下のテストを参照)よりも80%以上高速です。これは数年前の似たような質問からの回答です。もともと提案した人に出くわしたらクレジットを載せておきます。Pure JSです。</target>
        </trans-unit>
        <trans-unit id="c1be9748262459c0cfed18be8758a161fa9c3150" translate="yes" xml:space="preserve">
          <source>The implementation is so simple, defining a function is no longer warranted.</source>
          <target state="translated">実装がとてもシンプルなので、関数を定義することはもはやワーチャリングされていません。</target>
        </trans-unit>
        <trans-unit id="616fdf4d61602743bfe3812e3323328034f087f3" translate="yes" xml:space="preserve">
          <source>The most concise way to remove duplicates from an array using native javascript functions is to use a sequence like below:</source>
          <target state="translated">javascriptのネイティブ関数を使って配列から重複を削除する最も簡潔な方法は、以下のようなシーケンスを使うことです。</target>
        </trans-unit>
        <trans-unit id="6edef424e78630f627fb00a487669aac7e7398e7" translate="yes" xml:space="preserve">
          <source>The thing to remember here is that objects MUST have unique keys. We are exploiting this to remove all the duplicates. I would have thought this would be the fastest solution (before ES6).</source>
          <target state="translated">ここで覚えておくべきことは、オブジェクトは一意のキーを持たなければならない(MUST)ということです。これを悪用して重複したものをすべて削除しています。これが(ES6以前の)最速の解決策だと思っていました。</target>
        </trans-unit>
        <trans-unit id="17a346018132031a18b99a81d21bc3516ea51cac" translate="yes" xml:space="preserve">
          <source>The top answers have complexity of &lt;code&gt;O(n&amp;sup2;)&lt;/code&gt;, but this can be done with just &lt;code&gt;O(n)&lt;/code&gt; by using an object as a hash:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;上位の回答は&lt;/font&gt;&lt;/font&gt; &lt;code&gt;O(n&amp;sup2;)&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;複雑さを持っています&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が、これは&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;オブジェクトをハッシュとして使用することで&lt;/font&gt;&lt;/font&gt; &lt;code&gt;O(n)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;だけで実行できます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b10b0d292925ee11a5945997c1484ed24978572b" translate="yes" xml:space="preserve">
          <source>There are probably faster ways but this one is pretty decent.</source>
          <target state="translated">もっと早い方法もあるだろうが、これはかなりまともだ。</target>
        </trans-unit>
        <trans-unit id="caaf0e060e43d0ec0c496e3e516fdb861ff73f78" translate="yes" xml:space="preserve">
          <source>This chunk of ugly code does the same as the snippet #3 above, &lt;s&gt;but an order of magnitude faster&lt;/s&gt; (as of 2017 it's only twice as fast - JS core folks are doing a great job!)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この醜いコードのチャンクは、上記のスニペット＃3と同じですが、&lt;/font&gt;&lt;/font&gt;&lt;s&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;桁違いに高速です&lt;/font&gt;&lt;/font&gt;&lt;/s&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（2017年の時点で、2倍の速度しかありません-JSコアの人々は素晴らしい仕事をしています！）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="34be48325432c435049de4b5fce8bf8f701c581a" translate="yes" xml:space="preserve">
          <source>This is how it's usually done. The idea is to place each element in a hashtable and then check for its presence instantly. This gives us linear time, but has at least two drawbacks:</source>
          <target state="translated">通常はこのような方法で行われます。このアイデアは、各要素をハッシュテーブルに配置して、その存在を即座にチェックするというものです。これは直線的な時間が得られますが、少なくとも2つの欠点があります。</target>
        </trans-unit>
        <trans-unit id="d32045aa30c503f5734fd8becb033645aa36217b" translate="yes" xml:space="preserve">
          <source>This is quadratic, but there are nice additional goodies, like wrapping native &lt;code&gt;indexOf&lt;/code&gt;, ability to uniqify by a key (&lt;code&gt;iteratee&lt;/code&gt; in their parlance), and optimizations for already sorted arrays.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは二次式ですが、ネイティブの&lt;/font&gt;&lt;/font&gt; &lt;code&gt;indexOf&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ラップ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、キーで一意化する機能（&lt;/font&gt;&lt;/font&gt; &lt;code&gt;iteratee&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;では&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;iteratee&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）、既に並べ替えられた配列の最適化&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;など、優れた追加機能があり&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b649cb8117bb75036b30b3a7a995456bb6f20525" translate="yes" xml:space="preserve">
          <source>This will work for strings, numbers, and dates.  If your array contains objects, the above solution won't work because when coerced to a string, they will all have a value of &lt;code&gt;&quot;[object Object]&quot;&lt;/code&gt; (or something similar) and that isn't suitable as a lookup value.  You can get an &lt;code&gt;O(n)&lt;/code&gt; implementation for objects by setting a flag on the object itself:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは、文字列、数値、日付に対して機能します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列にオブジェクトが含まれている場合、上記のソリューションは機能しません。文字列に強制変換されると、すべての&lt;/font&gt;&lt;/font&gt; &lt;code&gt;&quot;[object Object]&quot;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;「[オブジェクトオブジェクト]」&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（または同様の値）の値が含まれ、ルックアップ値として適切ではないためです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;オブジェクト自体にフラグを設定することで、オブジェクトの&lt;/font&gt;&lt;/font&gt; &lt;code&gt;O(n)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;実装を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;取得できます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="79d3991c69b5dc6ca2ddee16f91e7d5abb041f25" translate="yes" xml:space="preserve">
          <source>Uniq reduce while keeping existing order</source>
          <target state="translated">既存のオーダーを維持したままユニックリデュース</target>
        </trans-unit>
        <trans-unit id="2db3a69f0328c81b98a84c394f2c5dfec1997cc5" translate="yes" xml:space="preserve">
          <source>Unique by...</source>
          <target state="translated">ユニークな...</target>
        </trans-unit>
        <trans-unit id="96aa205044de370fb2e8c218b80760bcb3e7b5dd" translate="yes" xml:space="preserve">
          <source>Update 2015: ES6 version:</source>
          <target state="translated">2015年にアップデートしました。ES6版です。</target>
        </trans-unit>
        <trans-unit id="57a042a26b313b47c5306abc13676f31e632febd" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;http://underscorejs.org/&quot;&gt;Underscore.js&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;a href=&quot;http://underscorejs.org/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Underscore.jsを&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用する&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="00f6a4215968bee265bdb4841df188a8634d1f7f" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;Set&lt;/code&gt; variant above to keep the first, and the &lt;code&gt;Map&lt;/code&gt; to keep the last:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;上記&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Set&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;バリアントを&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;て最初を保持し、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Map&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用して最後を保持します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9bdab3ec80310e6364af5c88041386a0a8d43071" translate="yes" xml:space="preserve">
          <source>Using the 3rd (&quot;this array&quot;) parameter of the filter callback we can avoid a closure of the array variable:</source>
          <target state="translated">フィルタコールバックの 3 番目のパラメータ (&quot;this array&quot;)を使用すると、配列変数のクロージャを回避することができます。</target>
        </trans-unit>
        <trans-unit id="dedc2810deb822938789db53e1998a107e835ed2" translate="yes" xml:space="preserve">
          <source>Using the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set&quot;&gt;Set&lt;/a&gt; constructor and the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax&quot;&gt;spread syntax&lt;/a&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Set&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コンストラクターと&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;スプレッド構文&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9078a5b06471b912debb1bb930353e48daf752a7" translate="yes" xml:space="preserve">
          <source>We can easily derive &lt;code&gt;unique&lt;/code&gt; from &lt;code&gt;unqiueBy&lt;/code&gt; or use the faster implementation utilizing &lt;code&gt;Set&lt;/code&gt;s:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &lt;code&gt;unqiueBy&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;から&lt;/font&gt;&lt;/font&gt; &lt;code&gt;unique&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を簡単に派生&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;さ&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;せる&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;か、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Set&lt;/code&gt; を&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;利用してより高速な実装を使用&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;できます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d8edb0918abc7975f9aa03a86c637a0c01848e29" translate="yes" xml:space="preserve">
          <source>Well ok so far so good. But let's do it properly this time in the ES6 style. It looks so cool..! But as of now how it will perform against the powerful lut solution is a mystery to me. Lets first see the code and then benchmark it.</source>
          <target state="translated">うーん.........ここまではいいですね。でも今回はちゃんとES6風にやってみましょう。かっこいいですね...。しかし、今のところ、強力なLutソリューションに対してどのようなパフォーマンスを発揮するのかは謎です。まずはコードを見てからベンチマークしてみましょう。</target>
        </trans-unit>
        <trans-unit id="860d131c0ac854d1e9106c25332a2f1850c0bb0f" translate="yes" xml:space="preserve">
          <source>Well ok we are all happy now. But the lead role always comes last with some applause. I am sure some of you wonder what Set object would do. Now that since we are open to ES6 and we know Map is the winner of the previous games let us compare Map with Set as a final. A typical Real Madrid vs Barcelona game this time... or is it? Let's see who will win the el classico :)</source>
          <target state="translated">さて.........これで私たちは幸せになった。しかし、主役はいつも拍手喝采を受けて最後に来ます。あなたの中には、Set オブジェクトが何をするのか疑問に思っている人もいると思います。ES6に対応していて、Mapが以前のゲームの勝者であることがわかっているので、最終的にMapとSetを比較してみましょう。今回は典型的なレアルマドリード対バルセロナの試合です。エル・クラシコに勝つのは誰か見てみましょう :)</target>
        </trans-unit>
        <trans-unit id="370230f0e4c174bcdf24f181eccb216042d92fa9" translate="yes" xml:space="preserve">
          <source>When I tested both implementation (with and without Set) for performance in chrome, I found that the one with Set is much much faster!</source>
          <target state="translated">両方の実装(Setのあるものとないもの)でクロームでのパフォーマンスをテストしてみたところ、Setのあるものの方がずっと速いことがわかりました!</target>
        </trans-unit>
        <trans-unit id="cc7d995a1841ad16ff9871b9c863d40c602272fb" translate="yes" xml:space="preserve">
          <source>When removing objects by a key, you might to want to keep the first of &quot;equal&quot; objects or the last one.</source>
          <target state="translated">キーでオブジェクトを削除する場合、&quot;イコール &quot;オブジェクトの最初のものか、最後のものを残しておきたい場合があります。</target>
        </trans-unit>
        <trans-unit id="9cd8fc792f4f69a6d051c2cf002e027d0f149103" translate="yes" xml:space="preserve">
          <source>Which one would  you use..? Well not so fast...! Don't be deceived. Map is at displacement. Now look... in all of the above cases we fill an array of size n with numbers of range &amp;lt; n. I mean we have an array of size 100 and we fill with random numbers 0..9 so there are definite duplicates and &quot;almost&quot; definitely each number has a duplicate. How about if we fill the array in size 100 with random numbers 0..9999. Let's now see Map playing at home. This time an Array of 100K items but random number range is 0..100M. We will do 100 consecutive tests to average the results. OK let's see the bets..! &amp;lt;- no typo</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;どちらを使いますか？&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;まあそれほど速くない...！&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;だまされてはいけません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;地図がずれています。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここで見てください...上記のすべてのケースで、サイズnの配列に範囲&amp;lt;nの数を入力します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;つまり、サイズ100の配列があり、乱数0..9で満たされているため、明確な重複があり、「ほぼ」確実に各数に重複があります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サイズ100の配列に乱数0..9999を入力するとどうでしょうか。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;家で遊んでいるマップを見てみましょう。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;今回は100Kアイテムの配列ですが、乱数の範囲は0..100Mです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;結果を平均するために、100回連続してテストを行います。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;OK賭けを見てみましょう。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;lt;-タイプミスなし&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ed0003a930932e628cb1a02a165ccbe0cc5dd994" translate="yes" xml:space="preserve">
          <source>Wow that was short..! But how about the performance..? It's beautiful... Since the heavy weight of the filter / indexOf lifted over our shoulders now i can test an array 1M random items of positive integers in range 0..99999 to get an average from 10 consecutive tests. I can say this time it's a real match. See the result for yourself :)</source>
          <target state="translated">うわぁ...短かった...!(吉森)でも演奏はどうなんだよ...美しい...フィルタ indexOf の重荷が肩の荷を降ろしてくれたので、範囲 0 ~ 99999 の正の整数の配列 100 万個のランダムな項目をテストして、10 回の連続テストから平均値を得ることができます。今回は本当に一致しました。自分のために結果を見てください :)</target>
        </trans-unit>
        <trans-unit id="ce3f0236d2d07dfd1e1329aa5c7e1c8b720a3cdc" translate="yes" xml:space="preserve">
          <source>Wow.. man..! Well unexpectedly it didn't turn out to be an el classico at all. More like Barcelona FC against CA Osasuna :))</source>
          <target state="translated">うわぁ......男.....! 意外とエル・クラシコにはならなかったな。バルセロナFC対CAオサスナのような試合になってしまった。)</target>
        </trans-unit>
        <trans-unit id="0045ab03b3aca5a7e131f5f18508af47c2d688cd" translate="yes" xml:space="preserve">
          <source>Yet another ES6(2015) way of doing this that already works on a few browsers is:</source>
          <target state="translated">すでにいくつかのブラウザで動作しているES6(2015)の別の方法があります。</target>
        </trans-unit>
        <trans-unit id="a32788844cd1d78d3a7e227d29ae1c9883b14fa4" translate="yes" xml:space="preserve">
          <source>You can always try putting it into an object, and then iterating through its keys:</source>
          <target state="translated">これをオブジェクトに入れて、そのキーを反復してみるのもいいでしょう。</target>
        </trans-unit>
        <trans-unit id="c27db2f5ed434825f020965cf078662d7a5d8b98" translate="yes" xml:space="preserve">
          <source>You can simply do it in JavaScript, with the help of the second - index - parameter of the &lt;code&gt;filter&lt;/code&gt; method:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;filter&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;メソッドの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2番目の-index-パラメータを使用して、JavaScriptで簡単に実行できます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a5ccb2330f2aef610502456380da1cc91e063a81" translate="yes" xml:space="preserve">
          <source>You could do</source>
          <target state="translated">あなたならできる</target>
        </trans-unit>
        <trans-unit id="05ae959e9015de3a83d1dea6e3427dfaa3c25b4a" translate="yes" xml:space="preserve">
          <source>cheers!</source>
          <target state="translated">cheers!</target>
        </trans-unit>
        <trans-unit id="cd5d12d528695cab4c8d95add53ef3ca6fd47109" translate="yes" xml:space="preserve">
          <source>declarative and succinct implementation</source>
          <target state="translated">宣言的簡潔実装</target>
        </trans-unit>
        <trans-unit id="a99cf5f1a9763e6a0397f2b5d498a9bb4364ec64" translate="yes" xml:space="preserve">
          <source>for the same reason, all objects will be considered equal: &lt;code&gt;uniq([{foo:1},{foo:2}])&lt;/code&gt; will return just &lt;code&gt;[{foo:1}]&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;同じ理由で、すべてのオブジェクトは等しいと見なされます&lt;/font&gt;&lt;/font&gt; &lt;code&gt;uniq([{foo:1},{foo:2}])&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;/font&gt; &lt;code&gt;[{foo:1}]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;のみを返し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="edd094385c15a6fae3174a4693769654adcb5c9f" translate="yes" xml:space="preserve">
          <source>generic solution by using a separate comparator function</source>
          <target state="translated">別のコンパレータ関数を使用した汎用的なソリューション</target>
        </trans-unit>
        <trans-unit id="e239f6a1612923e74eebee43c2cf2d9f6d25d119" translate="yes" xml:space="preserve">
          <source>if it's been seen already, skip it</source>
          <target state="translated">見たことあるなら飛ばせばいい</target>
        </trans-unit>
        <trans-unit id="539c4ff4d14c88a5fc24a391f8070ba9e4472ef0" translate="yes" xml:space="preserve">
          <source>if you can't read the code above ask, read a javascript book or here are some explainations about shorter code. &lt;a href=&quot;https://stackoverflow.com/a/21353032/2450730&quot;&gt;https://stackoverflow.com/a/21353032/2450730&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;上記のコードが読めない場合は、JavaScriptの本を読んでください。&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/21353032/2450730&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https://stackoverflow.com/a/21353032/2450730&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">or</target>
        </trans-unit>
        <trans-unit id="c229b20c8b114325c93aa2b6a418145f99a20e45" translate="yes" xml:space="preserve">
          <source>or a &lt;code&gt;Map&lt;/code&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;または&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Map&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9b5d6e1242f2ba1f7c81b87521cdec9e7f9b1add" translate="yes" xml:space="preserve">
          <source>or even using the &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Spread_operator&quot;&gt;spread operator&lt;/a&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;または、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Spread_operator&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;spread演算子&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用する&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;こともできます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="806d44b43276ce5b485db5f1967f4d34d2e458cf" translate="yes" xml:space="preserve">
          <source>or in short hand</source>
          <target state="translated">或いは手短に</target>
        </trans-unit>
        <trans-unit id="1c48b3865f2548c947e1cc5c1192b629d30d0abb" translate="yes" xml:space="preserve">
          <source>otherwise, yield it and add it to the set of already seen values</source>
          <target state="translated">そうでなければ、それを降伏させて、すでに表示されている値のセットに追加します。</target>
        </trans-unit>
        <trans-unit id="fc555c29c370c91539f0994e128f9c3486cc9088" translate="yes" xml:space="preserve">
          <source>reuse of other small, generic functions</source>
          <target state="translated">他の小さな汎用機能の再利用</target>
        </trans-unit>
        <trans-unit id="20a7cc06c25fd99a1f0af70cca43ef31af8d4467" translate="yes" xml:space="preserve">
          <source>since hash keys can only be strings or symbols in JavaScript, this code doesn't distinguish numbers and &quot;numeric strings&quot;. That is, &lt;code&gt;uniq([1,&quot;1&quot;])&lt;/code&gt; will return just &lt;code&gt;[1]&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ハッシュキーはJavaScriptでは文字列または記号のみであるため、このコードは数値と「数値文字列」を区別しません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;つまり、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;uniq([1,&quot;1&quot;])&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt; &lt;code&gt;[1]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;だけを返し&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5b1efd96f20963e6d81c23833f2d90ccd388edad" translate="yes" xml:space="preserve">
          <source>sort | uniq</source>
          <target state="translated">uniq</target>
        </trans-unit>
        <trans-unit id="19231064d1513213b54b57152bb7ae4ff73cd591" translate="yes" xml:space="preserve">
          <source>take the next value from the argument</source>
          <target state="translated">引数の次の値を取る</target>
        </trans-unit>
        <trans-unit id="37c6ff6e73a628714bf9271b1cad7a72b47334be" translate="yes" xml:space="preserve">
          <source>there's no need for &lt;code&gt;slice&lt;/code&gt; nor &lt;code&gt;indexOf&lt;/code&gt; within the reduce function, like i've seen in other examples! it makes sense to use it along with a filter function though:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;他の例で見たように、reduce関数内&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;で&lt;/font&gt;&lt;/font&gt; &lt;code&gt;slice&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;も&lt;/font&gt;&lt;/font&gt; &lt;code&gt;indexOf&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;も&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;必要あり&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ません&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ただし、フィルター関数と一緒に使用するのは理にかなっています。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5f855f12d97c8a7d6bc7de54edc1f31c979f43ac" translate="yes" xml:space="preserve">
          <source>this can be made shorter in ES6 to</source>
          <target state="translated">これはES6ではもっと短くして</target>
        </trans-unit>
        <trans-unit id="5782296420b9d703acbceb54a1f4355994661ab2" translate="yes" xml:space="preserve">
          <source>use &lt;code&gt;Array.filter()&lt;/code&gt; like this</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このように&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Array.filter()&lt;/code&gt; を&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用して&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ください&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e80a5930769a9f4a323662f414c3d43a685d1f98" translate="yes" xml:space="preserve">
          <source>which both also work with non-primitive keys.</source>
          <target state="translated">これはどちらも非原始的なキーでも動作します。</target>
        </trans-unit>
        <trans-unit id="8729ffcac367e70cb40c317ee0944702856d5a01" translate="yes" xml:space="preserve">
          <source>which is, again, a variation of the first snippet.</source>
          <target state="translated">これはまた、最初のスニペットのバリエーションです。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
