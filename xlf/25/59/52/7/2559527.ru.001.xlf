<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://stackoverflow.com/questions/2559527">
    <body>
      <group id="2559527">
        <trans-unit id="d2aec5d71f25dd3c929c3ae05f315100ab9855ce" translate="yes" xml:space="preserve">
          <source>And the advice for you is: you misunderstood the idea of the scope of the variables and static functionalities. Get clear idea about that.</source>
          <target state="translated">И совет для вас:вы неправильно поняли идею объема переменных и статических функций.Получите четкое представление об этом.</target>
        </trans-unit>
        <trans-unit id="1456f898bebc17c04a971a20e9a659df53d983ae" translate="yes" xml:space="preserve">
          <source>Anything bound to the static keyword is available in the context of the class rather than in the context of an instance of the class</source>
          <target state="translated">Все,что связано со статическим ключевым словом,доступно в контексте класса,а не в контексте экземпляра класса</target>
        </trans-unit>
        <trans-unit id="f7655ad14779fb831345dd6017898bf950fa3f7b" translate="yes" xml:space="preserve">
          <source>As a corollary to the above</source>
          <target state="translated">Как следствие вышесказанного</target>
        </trans-unit>
        <trans-unit id="d600e5ecb3300a6c2840600e11a1121a709f80a0" translate="yes" xml:space="preserve">
          <source>At the same time, the car you see is an instance of the class &quot;car&quot; since it has all the properties which you expect: There is someone driving it, it has an engine, wheels.</source>
          <target state="translated">В то же время,автомобиль,который вы видите,является примером класса &quot;автомобиль&quot;,так как он имеет все свойства,которые вы ожидаете:Есть кто-то за рулем,у него есть двигатель,колеса.</target>
        </trans-unit>
        <trans-unit id="f52f9635c25173d612233d1a7bdfd13015dddc60" translate="yes" xml:space="preserve">
          <source>Before you call an instance method or instance variable It needs a object(Instance). When instance variable is called from static method compiler doesn't know which is the object this variable belongs to. Because static methods doesn't have an object (Only one copy always). When you call an instance variable or instance methods from instance method it refer the &lt;code&gt;this&lt;/code&gt; object. It means the variable belongs to whatever object created and each object have it's own copy of instance methods and variables.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Перед вызовом метода экземпляра или переменной экземпляра необходим объект (экземпляр). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Когда переменная экземпляра вызывается из статического метода, компилятор не знает, какому объекту принадлежит эта переменная. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Потому что у статических методов нет объекта (всегда только одна копия). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Когда вы вызываете переменную экземпляра или методы экземпляра из метода экземпляра, он ссылается на &lt;/font&gt;&lt;/font&gt; &lt;code&gt;this&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; объект. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Это означает, что переменная принадлежит любому созданному объекту, и каждый объект имеет свою собственную копию методов экземпляра и переменных.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fdf6cd3b285796913ce74a547e9045609a45a79c" translate="yes" xml:space="preserve">
          <source>Below code explains you neatly</source>
          <target state="translated">Ниже приведен код,объясняющий тебе</target>
        </trans-unit>
        <trans-unit id="b2d4f7289bb09ea7c868bd69996ab7600104e58d" translate="yes" xml:space="preserve">
          <source>But it gives the following error:</source>
          <target state="translated">Но это дает следующую ошибку:</target>
        </trans-unit>
        <trans-unit id="1c142a9be9f6b43f1957dd753348f42afd1f5c2e" translate="yes" xml:space="preserve">
          <source>E.g. 
Say, car has the property colour, and exhibits the behaviour 'motion'.
An instance of the car would be a Red Volkswagen Beetle in motion at 25kmph.</source>
          <target state="translated">Например,скажем,машина имеет цвет собственности,и демонстрирует поведение &quot;движения&quot;.Примером автомобиля может служить Red Volkswagen Beetle,движущийся со скоростью 25 км/ч.</target>
        </trans-unit>
        <trans-unit id="8ef2e1210c47909b18d1b60b9c30a0116c39a246" translate="yes" xml:space="preserve">
          <source>Example 1:</source>
          <target state="translated">Пример 1:</target>
        </trans-unit>
        <trans-unit id="af265b4af8b5dc4a436d1f9e01ebb8d28ab33ed0" translate="yes" xml:space="preserve">
          <source>HTH</source>
          <target state="translated">HTH</target>
        </trans-unit>
        <trans-unit id="3598138f0ee250c01a79c1a479cb4662b5ef5b8e" translate="yes" xml:space="preserve">
          <source>How do I get my methods to recognize my class variables?</source>
          <target state="translated">Как заставить мои методы распознавать переменные класса?</target>
        </trans-unit>
        <trans-unit id="838b94d6f796c95b2046c9e8357ca90591e46ffb" translate="yes" xml:space="preserve">
          <source>However, those variables and methods of the class which are outside of the &lt;code&gt;main()&lt;/code&gt; method which do not have the &lt;code&gt;static&lt;/code&gt; modifier can not be used until an instance of the class has been created as an object within the &lt;code&gt;main()&lt;/code&gt; method. After creating the object you can then use the variables and methods of the object. An attempt to use the variables and methods of the class which do not have the &lt;code&gt;static&lt;/code&gt; modifier without going through an object of the class is caught by the Java compiler at compile time and flagged as an error.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Однако те переменные и методы класса, которые не входят в метод &lt;/font&gt;&lt;/font&gt; &lt;code&gt;main()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; и не имеют &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; модификатора, не могут быть использованы до тех пор, пока экземпляр класса не будет создан как объект в &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;методе &lt;/font&gt;&lt;/font&gt; &lt;code&gt;main()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . После создания объекта вы можете использовать переменные и методы объекта. Попытка использовать переменные и методы класса, которые не имеют &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; модификатора, без прохождения через объект класса, перехватывается компилятором Java во время компиляции и помечается как ошибка.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c3f999018019b0336c0974ffb6d2aeab8ed94757" translate="yes" xml:space="preserve">
          <source>I will try to explain the static thing to you. First of all static variables do not belong to any particular instance of the class. They are recognized with the name of the class. Static methods again do not belong again to any particular instance. They can access only static variables. Imagine you call MyClass.myMethod() and myMethod is a static method. If you use non-static variables inside the method, how the hell on earth would it know which variables to use? That's why you can use from static methods only static variables. I repeat again they do NOT belong to any particular instance.</source>
          <target state="translated">Я постараюсь объяснить тебе эту статическую штуку.Прежде всего,статические переменные не принадлежат какому-либо конкретному экземпляру класса.Они распознаются по имени класса.Снова статические методы не принадлежат ни одному конкретному экземпляру.Им доступны только статические переменные.Представьте,что вы вызываете MyClass.myMethod()и myMethod является статическим методом.Если вы используете внутри метода нестатические переменные,откуда,черт возьми,он будет знать,какие переменные использовать? Поэтому из статических методов можно использовать только статические переменные.Повторяю еще раз,они НЕ принадлежат какому-либо конкретному экземпляру.</target>
        </trans-unit>
        <trans-unit id="5505403c960d97c565a4824355c06f0c1537b207" translate="yes" xml:space="preserve">
          <source>I've written this test code:</source>
          <target state="translated">Я написал этот тестовый код:</target>
        </trans-unit>
        <trans-unit id="c68edb472b533abd4a6c2c2d6895927750bd048e" translate="yes" xml:space="preserve">
          <source>If its not static, you need a variable of the class,</source>
          <target state="translated">Если она не статическая,то нужна переменная класса,</target>
        </trans-unit>
        <trans-unit id="779daebe3f0923ea58fe5a71b8c2ed6579bb6d06" translate="yes" xml:space="preserve">
          <source>If you observe in codes, Some functions are directly called with Class names like</source>
          <target state="translated">Если вы видите в кодах,то некоторые функции вызываются напрямую с именами классов,такими как</target>
        </trans-unit>
        <trans-unit id="4ad39630cafe914cf18e155e7ab4efa3acd337ea" translate="yes" xml:space="preserve">
          <source>In Example 2 CE error is because we call non static method from a static context. So it is not possible for ClassLoader to recognize method display() at compile time.So compile time error is occurred.</source>
          <target state="translated">В Примере 2 ошибка CE заключается в том,что мы вызываем нестатический метод из статического контекста.Поэтому при компиляции ClassLoader не может распознать метод display(),поэтому возникает ошибка компиляции.</target>
        </trans-unit>
        <trans-unit id="4b1ff3e182638f7bfae34492f4ac5391c71d7dc9" translate="yes" xml:space="preserve">
          <source>In order to have an initial entry point for an application, Java has adopted the convention that the Java program must have a class that contains a method with an agreed upon or special name. This special method is called &lt;code&gt;main()&lt;/code&gt;. Since the method must exist whether the class containing the main method has been instantiated or not, the &lt;code&gt;main()&lt;/code&gt; method must be declared with the &lt;code&gt;static&lt;/code&gt; modifier so that as soon as the class is loaded, the &lt;code&gt;main()&lt;/code&gt; method is available.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Чтобы иметь начальную точку входа для приложения, Java приняла соглашение, что программа Java должна иметь класс, который содержит метод с согласованным или специальным именем. Этот специальный метод называется &lt;/font&gt;&lt;/font&gt; &lt;code&gt;main()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . Поскольку метод должен существовать независимо от того, был ли создан экземпляр класса, содержащего метод main, метод &lt;/font&gt;&lt;/font&gt; &lt;code&gt;main()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; должен быть объявлен с &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;модификатором &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , чтобы после загрузки класса &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;метод &lt;/font&gt;&lt;/font&gt; &lt;code&gt;main()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; доступен.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dc468dd35b615fe993b0c722a26e797b4eaa8add" translate="yes" xml:space="preserve">
          <source>In the OO world, you define the class and inside the class, you define a field of type &lt;code&gt;Color&lt;/code&gt;. When the class is instantiated (when you create a specific instance), memory is reserved for the color and you can give this specific instance a color. Since these attributes are specific, they are non-static.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;В мире OO вы определяете класс, а внутри класса вы определяете поле типа &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Color&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Когда создается экземпляр класса (когда вы создаете конкретный экземпляр), память зарезервирована для цвета, и вы можете дать этому конкретному экземпляру цвет. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Поскольку эти атрибуты являются специфическими, они не являются статичными.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dd01adf6562fc2bb03b6c615e744b6dd2591a6ee" translate="yes" xml:space="preserve">
          <source>In your case, try this code as a starting block:</source>
          <target state="translated">В вашем случае,попробуйте этот код как стартовый блок:</target>
        </trans-unit>
        <trans-unit id="a5b4594a3aa8d550fa7797eca26adb62c2a9d02f" translate="yes" xml:space="preserve">
          <source>It is ClassLoader responsible to load the class files.Let's see what happens when we write our own classes.</source>
          <target state="translated">Именно ClassLoader отвечает за загрузку файлов классов.Посмотрим,что произойдет,когда мы напишем свои собственные классы.</target>
        </trans-unit>
        <trans-unit id="70d59f235488bc70f4665b941656a205723da62b" translate="yes" xml:space="preserve">
          <source>Let's analyze your program first..
In your program, your first method is &lt;code&gt;main()&lt;/code&gt;, and keep it in mind it is the static method... Then you declare the local variable for that method (compareCount, low, high, etc..). The scope of this variable is only the declared method, regardless of it being a static or non static method. So you can't use those variables outside that method. This is the basic error u made.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Давайте сначала проанализируем вашу программу. В вашей программе ваш первый метод - &lt;/font&gt;&lt;/font&gt; &lt;code&gt;main()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , и имейте в виду, что это статический метод ... Затем вы объявляете локальную переменную для этого метода (compareCount, low, high и т. Д.). .). Область действия этой переменной - только объявленный метод, независимо от того, является ли он статическим или нестатическим методом. Таким образом, вы не можете использовать эти переменные вне этого метода. Это основная ошибка, которую вы сделали.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="22ceb7c53031a505277c39133ceb61ac5c44f967" translate="yes" xml:space="preserve">
          <source>Let's see another example:
Example 2:</source>
          <target state="translated">Давайте посмотрим другой пример:Пример 2:</target>
        </trans-unit>
        <trans-unit id="5d3b8d5dcf1237e381425ebe03844b2a3b104923" translate="yes" xml:space="preserve">
          <source>Non-static variable cannot be referenced from a static context</source>
          <target state="translated">На нестатическую переменную нельзя ссылаться из статического контекста.</target>
        </trans-unit>
        <trans-unit id="26aca3a70772f82cba9551cc4b2634df9a1f490e" translate="yes" xml:space="preserve">
          <source>Now For ClassLoader it looks like:</source>
          <target state="translated">Теперь для ClassLoader это выглядит так:</target>
        </trans-unit>
        <trans-unit id="5aac769e54adb5f914debe950e39dc08d0a14c75" translate="yes" xml:space="preserve">
          <source>Now a static property of the car would be the number of wheels (4) on the road, and this would apply to all cars.</source>
          <target state="translated">Теперь статическим свойством автомобиля будет количество колес (4)на дороге,и это относится ко всем автомобилям.</target>
        </trans-unit>
        <trans-unit id="55f62b5fe733feed7075474749b56ada897ff79b" translate="yes" xml:space="preserve">
          <source>Now if we try to compile this code compiler will give CE error.
CE: non-static method display() cannot be referenced from a static context.</source>
          <target state="translated">Теперь,если мы попробуем скомпилировать этот компилятор кода,то получим ошибку CE.CE:на нестатический метод display()нельзя ссылаться из статического контекста.</target>
        </trans-unit>
        <trans-unit id="a4c6baf33cc894816461f3c33e7f435e8bd2366c" translate="yes" xml:space="preserve">
          <source>Now we can see that class &quot;StaticTest&quot; has 3 fields.But actually there is no existence of b,c member variable.But why ???. OK Lest's see. Here b,c are instance variable.Since instance variable gets the memory at the time of object creation. So here b,c are not getting any memory yet. That's why there is no existence of b,c. So There is only existence of a.
For ClassLoader it has only one information about a. ClassLoader yet not recognize b,c because it's object not instantiated yet.</source>
          <target state="translated">Теперь мы видим,что в классе &quot;StaticTest&quot; есть 3 поля.Но на самом деле нет никакой переменной-член b,c.Но почему ????.Ладно,Лест видит.Здесь b,c-переменная экземпляра.Так как переменная экземпляра получает память в момент создания объекта.Так что здесь b,c пока не получает никакой памяти.Вот почему не существует b,c.Значит,существует только a.Для ClassLoader он имеет только одну информацию о a.ClassLoader пока не распознает b,c,потому что это объект,который еще не инстанцирован.</target>
        </trans-unit>
        <trans-unit id="66e7974266b7f27644bb52cd8bb94ec7d92a6e90" translate="yes" xml:space="preserve">
          <source>Now you can add/use instances with in the method</source>
          <target state="translated">Теперь вы можете добавлять экземпляры с помощью метода</target>
        </trans-unit>
        <trans-unit id="5303b5862a7a03213993da7f02ba0ab845bf51a8" translate="yes" xml:space="preserve">
          <source>So the class says &quot;all cars have a color&quot; and the instance says &quot;this specific car is red&quot;.</source>
          <target state="translated">Таким образом,в классе сказано &quot;все автомобили имеют цвет&quot;,а в примере-&quot;этот конкретный автомобиль красный&quot;.</target>
        </trans-unit>
        <trans-unit id="ec7c8c4ad414a51df3965a76861df12c694b52ff" translate="yes" xml:space="preserve">
          <source>So you need to create an instance of your class as an object and then you can access the methods and variables of the class that have not been declared with the &lt;code&gt;static&lt;/code&gt; modifier. Once your Java program has started with the &lt;code&gt;main()&lt;/code&gt; function you can then use any variables or methods that have the modifier of &lt;code&gt;static&lt;/code&gt; since they exist as part of the class being loaded.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Поэтому вам нужно создать экземпляр вашего класса как объект, а затем вы можете получить доступ к методам и переменным класса, которые не были объявлены с помощью &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;модификатора &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . После запуска вашей Java-программы с &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;функцией &lt;/font&gt;&lt;/font&gt; &lt;code&gt;main()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; вы можете использовать любые переменные или методы, которые имеют модификатор &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static&lt;/code&gt; ,&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; поскольку они существуют как часть загружаемого класса.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dc0b8787e157ef7daaef4bc4295c1283c986652a" translate="yes" xml:space="preserve">
          <source>Static fields and methods are connected to the class itself and not its instances. If you have a class &lt;code&gt;A&lt;/code&gt;, a 'normal' method &lt;code&gt;b&lt;/code&gt;, and a static method &lt;code&gt;c&lt;/code&gt;, and you make an instance &lt;code&gt;a&lt;/code&gt; of your class &lt;code&gt;A&lt;/code&gt;, the calls to &lt;code&gt;A.c()&lt;/code&gt; and &lt;code&gt;a.b()&lt;/code&gt; are valid. Method &lt;code&gt;c()&lt;/code&gt; has no idea which instance is connected, so it cannot use non-static fields.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Статические поля и методы связаны с самим классом, а не с его экземплярами. Если у вас есть класс &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &amp;laquo;нормальный&amp;raquo; метод &lt;/font&gt;&lt;/font&gt; &lt;code&gt;b&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; и статический метод &lt;/font&gt;&lt;/font&gt; &lt;code&gt;c&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , и вы создаете экземпляр &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; вашего класса &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , вызовы &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A.c()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; и &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a.b()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; являются действительными. Метод &lt;/font&gt;&lt;/font&gt; &lt;code&gt;c()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; не знает, какой экземпляр подключен, поэтому он не может использовать нестатические поля.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dd9384367916225428aefbc0fd2391d0c819c3f9" translate="yes" xml:space="preserve">
          <source>Static fields and methods are shared with all instances. They are for values which are specific to the class and not a specific instance. For methods, this usually are global helper methods (like &lt;code&gt;Integer.parseInt()&lt;/code&gt;). For fields, it's usually constants (like car types, i.e. something where you have a limited set which doesn't change often).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Статические поля и методы являются общими для всех экземпляров. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Они предназначены для значений, специфичных для класса, а не для конкретного экземпляра. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Для методов это обычно глобальные вспомогательные методы (например, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Integer.parseInt()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Для полей это обычно константы (например, типы автомобилей, то есть то, где у вас есть ограниченный набор, который меняется не часто).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="36494db0df9466ed4e6b0bb1015d67aec1ba26f6" translate="yes" xml:space="preserve">
          <source>Static variables are marked as &lt;code&gt;static&lt;/code&gt; and instance variables doesn't have specific keyword.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Статические переменные помечаются как &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; а переменные экземпляра не имеют определенного ключевого слова.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8e0b9fd46cbe94367b2372ca27e7e29c075d5bac" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;static&lt;/code&gt; keyword modifies the lifecycle of a method or variable within a class. A &lt;code&gt;static&lt;/code&gt; method or variable is created at the time a class is loaded. A method or variable that is not declared as &lt;code&gt;static&lt;/code&gt; is created only when the class is instantiated as an object for example by using the &lt;code&gt;new&lt;/code&gt; operator.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;В &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; модифицирует ключевых слов Жизненный цикл метода или переменной в классе. &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; метод или переменная создается во время загружен класс. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Метод или переменная, которая не объявлена ​​как &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , создается, только когда экземпляр класса создается как объект, например, с помощью &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;оператора &lt;/font&gt;&lt;/font&gt; &lt;code&gt;new&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="390648a9531e0593ca91c8fcd1c34b99ba9c6525" translate="yes" xml:space="preserve">
          <source>The first thing is to know the difference between an instance of a class, and the class itself. A class models certain properties, and the behaviour of the whole in the context of those properties. An instance will define specific values for those properties.</source>
          <target state="translated">Первое,что нужно знать,это разницу между экземпляром класса и самим классом.Класс моделирует определенные свойства,и поведение целого в контексте этих свойств.Экземпляр определит конкретные значения для этих свойств.</target>
        </trans-unit>
        <trans-unit id="1a59be2f543a266d0dfe7ec6749aa19db8676e29" translate="yes" xml:space="preserve">
          <source>The lifecycle of a class, in broad terms, is:</source>
          <target state="translated">Жизненный цикл класса,в широком смысле:</target>
        </trans-unit>
        <trans-unit id="e09ee9207b516f080909bd79855b0c8feae78efc" translate="yes" xml:space="preserve">
          <source>The lifetime of a static field/method is equivalent to the lifetime of your application</source>
          <target state="translated">Срок службы статического полевого метода эквивалентен сроку службы вашего приложения.</target>
        </trans-unit>
        <trans-unit id="45e61462fec0ea6d869a606732bad6c26cb6d26e" translate="yes" xml:space="preserve">
          <source>The new &lt;code&gt;main()&lt;/code&gt; method creates an instance of the class it contains (sounds strange but since &lt;code&gt;main()&lt;/code&gt; is created with the class instead of with the instance, it can do this) and then calls an instance method (&lt;code&gt;run()&lt;/code&gt;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Новый &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;метод &lt;/font&gt;&lt;/font&gt; &lt;code&gt;main()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; создает экземпляр класса, который он содержит (звучит странно, но поскольку &lt;/font&gt;&lt;/font&gt; &lt;code&gt;main()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; создается с классом, а не с экземпляром, он может это сделать), а затем вызывает метод экземпляра ( &lt;/font&gt;&lt;/font&gt; &lt;code&gt;run()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ba17f3eb5b1f6622bb98dfac5f62c8e5968d76cc" translate="yes" xml:space="preserve">
          <source>The result is that when you start your Java application by a command line such as &lt;code&gt;java helloworld&lt;/code&gt; a series of actions happen. First of all a Java Virtual Machine is started up and initialized. Next the helloworld.class file containing the compiled Java code is loaded into the Java Virtual Machine. Then the Java Virtual Machine looks for a method in the &lt;code&gt;helloworld&lt;/code&gt; class that is called &lt;code&gt;main(String [] args)&lt;/code&gt;. this method must be &lt;code&gt;static&lt;/code&gt; so that it will exist even though the class has not actually been instantiated as an object. The Java Virtual Machine does not create an instance of the class by creating an object from the class. It just loads the class and starts execution at the &lt;code&gt;main()&lt;/code&gt; method.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;В результате, когда вы запускаете свое Java-приложение из командной строки, такой как &lt;/font&gt;&lt;/font&gt; &lt;code&gt;java helloworld&lt;/code&gt; ,&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; происходит ряд действий. Прежде всего, виртуальная машина Java запускается и инициализируется. Затем файл helloworld.class, содержащий скомпилированный код Java, загружается в виртуальную машину Java. Затем виртуальная машина Java ищет метод в &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;классе &lt;/font&gt;&lt;/font&gt; &lt;code&gt;helloworld&lt;/code&gt; ,&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; который называется &lt;/font&gt;&lt;/font&gt; &lt;code&gt;main(String [] args)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . этот метод должен быть &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; чтобы он существовал, даже если класс фактически не был создан как объект. Виртуальная машина Java не создает экземпляр класса путем создания объекта из класса. Он просто загружает класс и начинает выполнение с &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;метода &lt;/font&gt;&lt;/font&gt; &lt;code&gt;main()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0fd0cd58867fba502c049c9f6c94736acdd35d8d" translate="yes" xml:space="preserve">
          <source>The solution for you is that you either make your fields static or your methods non-static. You main could look like this then:</source>
          <target state="translated">Решение для вас заключается в том,что вы либо делаете свои поля статическими,либо ваши методы нестатическими.Тогда вы можете выглядеть следующим образом:</target>
        </trans-unit>
        <trans-unit id="9323c9f3505b2a95c08a5ec197540540572d98ef" translate="yes" xml:space="preserve">
          <source>The very basic thing is static variables or static methods are at class level. Class level variables or methods gets loaded prior to instance level methods or variables.And obviously the thing which is not loaded can not be used. So java compiler not letting the things to be handled at run time resolves at compile time. That's why it is giving you error non-static things can not be referred from static context. You just need to read about Class Level Scope, Instance Level Scope and Local Scope.</source>
          <target state="translated">Самое основное-это статические переменные или статические методы на уровне класса.Переменные или методы уровня класса загружаются перед методами уровня экземпляра или переменными,и очевидно,что то,что не загружается,не может быть использовано.Поэтому java-компилятор,не позволяющий работать во время компиляции,разрешается во время компиляции.Поэтому,давая ошибки,нестатические вещи не могут быть отнесены к статическому контексту.Достаточно просто прочитать о Scope уровня класса,Instance Level Scope и Local Scope.</target>
        </trans-unit>
        <trans-unit id="bb0438759b21be8d6fa47176b6cbb2df2b826e50" translate="yes" xml:space="preserve">
          <source>Then we come to next point. You told static is killing you. (It may be killing you but it only gives life to your program!!) First you must understand the basic thing.
*Static method calls only the static method and use only the static variable.
*Static variable or static method are not dependent on any instance of that class. (i.e. If you change any state of the static variable it will reflect in all objects of the class)
*Because of this you call it as a class variable or a class method.
And a lot more is there about the &quot;static&quot; keyword.
I hope now you get the idea. First change the scope of the variable and declare it as a static (to be able to use it in static methods).</source>
          <target state="translated">Тогда мы переходим к следующему пункту.Ты сказал,что статическое электричество убивает тебя.(Может быть,она и убивает вас,но она дает жизнь только вашей программе!!)Сначала вы должны понять главное.*Статический метод вызывает только статический метод и использует только статическую переменную.*Статическая переменная или статический метод не зависят ни от одного экземпляра этого класса.(т.е.если вы измените какое-либо состояние статической переменной,то она будет отражаться во всех объектах класса)*В связи с этим вы вызываете ее как переменную класса или как метод класса.И еще много чего о &quot;статическом&quot; ключевом слове.Надеюсь,теперь вы поняли.Сначала измените область видимости переменной и объявите ее статической (чтобы иметь возможность использовать ее в статических методах).</target>
        </trans-unit>
        <trans-unit id="7cfdb1cf2d05cf4d0790aeabaecf7a998c774d8d" translate="yes" xml:space="preserve">
          <source>This is because NamFnc and println wil be declared using key word static before them.</source>
          <target state="translated">Это происходит потому,что NamFnc и println будут объявлены с использованием ключевого слова static перед ними.</target>
        </trans-unit>
        <trans-unit id="27e1a6c2a446413eb561255236488609660d3153" translate="yes" xml:space="preserve">
          <source>This is bit diff to explain about static key word for all beginners.</source>
          <target state="translated">Это немного отличается,чтобы объяснить о статическом ключевом слове для всех новичков.</target>
        </trans-unit>
        <trans-unit id="b0c4aa70a1b80654cd9bcda07013ffb87eff889e" translate="yes" xml:space="preserve">
          <source>To be able to access them from your static methods they need to be static member variables, like this:</source>
          <target state="translated">Чтобы иметь доступ к ним из ваших статических методов,они должны быть статическими переменными-членов,как,например,это:</target>
        </trans-unit>
        <trans-unit id="2656f5aecff1e079f1ab521bdf4dac1038cb53ae" translate="yes" xml:space="preserve">
          <source>To solve your problem, you need to instantiate an instance (create an object) of your class so the runtime can reserve memory for the instance (otherwise, different instances would overwrite each other which you don't want).</source>
          <target state="translated">Чтобы решить вашу проблему,вам нужно инстанцировать экземпляр (создать объект)вашего класса,чтобы время выполнения могло зарезервировать память для этого экземпляра (в противном случае,различные экземпляры перезапишут друг друга,что вам не нужно).</target>
        </trans-unit>
        <trans-unit id="539d69698bbab3b002db35480dec636fa14a9588" translate="yes" xml:space="preserve">
          <source>You must understand the difference between a class and an instance of that class. If you see a car on the street, you know immediately that it's a car even if you can't see which model or type. This is because you compare what you see with the &lt;em&gt;class&lt;/em&gt; &quot;car&quot;. The class contains which is similar to all cars. Think of it as a template or an idea.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вы должны понимать разницу между классом и экземпляром этого класса. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Если вы видите автомобиль на улице, вы сразу же знаете, что это автомобиль, даже если вы не видите, какую модель или тип. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Это потому, что вы сравниваете то, что видите, с &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;классом&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &amp;laquo;машина&amp;raquo;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Класс содержит который похож на все автомобили. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Думайте об этом как шаблон или идея.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c1b6b80376a0d4497c8861939bc5b776f80ec246" translate="yes" xml:space="preserve">
          <source>You wil get to know it clearly when you work more with Classes and Objects.</source>
          <target state="translated">Вы узнаете это четко,когда будете больше работать с Классами и Объектами.</target>
        </trans-unit>
        <trans-unit id="dc674784561e27b2227e3462250dd671b32c4fd3" translate="yes" xml:space="preserve">
          <source>create an object with the &lt;code&gt;new&lt;/code&gt; operator using the class to make an instance of the class as an actual object and then when done with the object</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;создать объект с &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;оператором &lt;/font&gt;&lt;/font&gt; &lt;code&gt;new&lt;/code&gt; ,&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; используя класс, чтобы сделать экземпляр класса действительным объектом, а затем, когда это будет сделано с объектом&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="12a8502e4f50af9638b33a8989fbdb1df9824d1f" translate="yes" xml:space="preserve">
          <source>destroy the object reclaiming the resources it is holding such as memory during garbage collection.</source>
          <target state="translated">уничтожить объект,восстанавливающий ресурсы,которые он содержит,например,память во время уборки мусора.</target>
        </trans-unit>
        <trans-unit id="847752f58bd217bbb23a7b07574639a3a3447211" translate="yes" xml:space="preserve">
          <source>put dot after the class variable and</source>
          <target state="translated">поставить точку после переменной класса и</target>
        </trans-unit>
        <trans-unit id="cc226f9e2f3ab746b96051993d98192787fbf605" translate="yes" xml:space="preserve">
          <source>static fields, and methods must be invoked using the class-name e.g. MyProgram7.main(...)</source>
          <target state="translated">статические поля,и методы должны вызываться с использованием имени класса,например,MyProgram7.main(...).</target>
        </trans-unit>
        <trans-unit id="caf734e52efe3f4b85a81fec2d2bec42f855caad" translate="yes" xml:space="preserve">
          <source>the source code for the class is written creating a template or
pattern or stamp which can then be used to</source>
          <target state="translated">исходный код класса пишется,создавая шаблон или шаблон или штамп,которые затем могут быть использованы,чтобы</target>
        </trans-unit>
        <trans-unit id="8d22b50c348189ba313357307fcd3c1d549e12c7" translate="yes" xml:space="preserve">
          <source>then call function.</source>
          <target state="translated">затем вызвать функцию.</target>
        </trans-unit>
        <trans-unit id="4a28261b2bccbb507b1b76467aac8ef65d6fe809" translate="yes" xml:space="preserve">
          <source>variables within a method can not be static</source>
          <target state="translated">переменные внутри метода не могут быть статическими</target>
        </trans-unit>
        <trans-unit id="84c1a41d7170b5a32d2a24521aacbadd8f836d3b" translate="yes" xml:space="preserve">
          <source>|*| &lt;b&gt;Non Static :&lt;/b&gt;Non Static items can be called with Class Variable</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;| * | &lt;/font&gt;&lt;/font&gt;&lt;b&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Non Static:&lt;/font&gt;&lt;/font&gt;&lt;/b&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Нестатические элементы можно вызывать с помощью переменной класса&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4b74ecdf209ae54db532c1aff1f6a2836bd3f4d1" translate="yes" xml:space="preserve">
          <source>|*| &lt;b&gt;Static :&lt;/b&gt; Static items can be called with Class Name</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;| * | &lt;/font&gt;&lt;/font&gt;&lt;b&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Статический:&lt;/font&gt;&lt;/font&gt;&lt;/b&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Статические элементы могут быть вызваны с именем класса&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2f296b910c67258e1d52585136a179b73a188aea" translate="yes" xml:space="preserve">
          <source>|*| Static and non Static Class inside a Class :</source>
          <target state="translated">Ниже приведен код,объясняющий тебе</target>
        </trans-unit>
        <trans-unit id="70dd75e88766d32fa97bd5de4fce591df8373ad9" translate="yes" xml:space="preserve">
          <source>|*| Static and non Static function in class :</source>
          <target state="translated">Ниже приведен код,объясняющий тебе</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
