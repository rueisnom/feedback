<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/2559527">
    <body>
      <group id="2559527">
        <trans-unit id="d2aec5d71f25dd3c929c3ae05f315100ab9855ce" translate="yes" xml:space="preserve">
          <source>And the advice for you is: you misunderstood the idea of the scope of the variables and static functionalities. Get clear idea about that.</source>
          <target state="translated">そして、あなたへのアドバイスは、変数のスコープと静的な機能性の考え方を誤解しているということです。それについて明確な考えを持ってください。</target>
        </trans-unit>
        <trans-unit id="1456f898bebc17c04a971a20e9a659df53d983ae" translate="yes" xml:space="preserve">
          <source>Anything bound to the static keyword is available in the context of the class rather than in the context of an instance of the class</source>
          <target state="translated">static キーワードにバインドされたものは、クラスのインスタンスのコンテキストではなく、クラスのコンテキストで利用可能です。</target>
        </trans-unit>
        <trans-unit id="f7655ad14779fb831345dd6017898bf950fa3f7b" translate="yes" xml:space="preserve">
          <source>As a corollary to the above</source>
          <target state="translated">上記の補論として</target>
        </trans-unit>
        <trans-unit id="d600e5ecb3300a6c2840600e11a1121a709f80a0" translate="yes" xml:space="preserve">
          <source>At the same time, the car you see is an instance of the class &quot;car&quot; since it has all the properties which you expect: There is someone driving it, it has an engine, wheels.</source>
          <target state="translated">同時に、あなたが見ている車は、あなたが期待するすべてのプロパティを持っているので、クラス &quot;car &quot;のインスタンスです。誰かが運転していて、エンジンがあり、車輪があります。</target>
        </trans-unit>
        <trans-unit id="f52f9635c25173d612233d1a7bdfd13015dddc60" translate="yes" xml:space="preserve">
          <source>Before you call an instance method or instance variable It needs a object(Instance). When instance variable is called from static method compiler doesn't know which is the object this variable belongs to. Because static methods doesn't have an object (Only one copy always). When you call an instance variable or instance methods from instance method it refer the &lt;code&gt;this&lt;/code&gt; object. It means the variable belongs to whatever object created and each object have it's own copy of instance methods and variables.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;インスタンスメソッドまたはインスタンス変数を呼び出す前に、オブジェクト（インスタンス）が必要です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;静的メソッドコンパイラからインスタンス変数が呼び出された場合、コンパイラは、この変数がどのオブジェクトに属しているかがわかりません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;静的メソッドにはオブジェクトがないため（常に1つのコピーのみ）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;インスタンスメソッドからインスタンス変数またはインスタンスメソッドを呼び出すと、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;this&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;オブジェクトが&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;参照され&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;つまり、変数は作成されたオブジェクトに属し、各オブジェクトにはインスタンスメソッドと変数の独自のコピーがあります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fdf6cd3b285796913ce74a547e9045609a45a79c" translate="yes" xml:space="preserve">
          <source>Below code explains you neatly</source>
          <target state="translated">以下のコードで説明します。</target>
        </trans-unit>
        <trans-unit id="b2d4f7289bb09ea7c868bd69996ab7600104e58d" translate="yes" xml:space="preserve">
          <source>But it gives the following error:</source>
          <target state="translated">しかし、以下のようなエラーが出ます。</target>
        </trans-unit>
        <trans-unit id="1c142a9be9f6b43f1957dd753348f42afd1f5c2e" translate="yes" xml:space="preserve">
          <source>E.g. 
Say, car has the property colour, and exhibits the behaviour 'motion'.
An instance of the car would be a Red Volkswagen Beetle in motion at 25kmph.</source>
          <target state="translated">例えば、車がプロパティカラーを持っていて、「動き」という行動を示すとします。車の例としては 赤色のフォルクスワーゲンビートルが 時速25kmで動いているとします</target>
        </trans-unit>
        <trans-unit id="8ef2e1210c47909b18d1b60b9c30a0116c39a246" translate="yes" xml:space="preserve">
          <source>Example 1:</source>
          <target state="translated">例1.</target>
        </trans-unit>
        <trans-unit id="af265b4af8b5dc4a436d1f9e01ebb8d28ab33ed0" translate="yes" xml:space="preserve">
          <source>HTH</source>
          <target state="translated">HTH</target>
        </trans-unit>
        <trans-unit id="3598138f0ee250c01a79c1a479cb4662b5ef5b8e" translate="yes" xml:space="preserve">
          <source>How do I get my methods to recognize my class variables?</source>
          <target state="translated">自分のメソッドにクラス変数を認識させるにはどうすればいいですか?</target>
        </trans-unit>
        <trans-unit id="838b94d6f796c95b2046c9e8357ca90591e46ffb" translate="yes" xml:space="preserve">
          <source>However, those variables and methods of the class which are outside of the &lt;code&gt;main()&lt;/code&gt; method which do not have the &lt;code&gt;static&lt;/code&gt; modifier can not be used until an instance of the class has been created as an object within the &lt;code&gt;main()&lt;/code&gt; method. After creating the object you can then use the variables and methods of the object. An attempt to use the variables and methods of the class which do not have the &lt;code&gt;static&lt;/code&gt; modifier without going through an object of the class is caught by the Java compiler at compile time and flagged as an error.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ただし、&lt;/font&gt; &lt;code&gt;static&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;修飾子&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を持たない&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;main()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;メソッドの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;外部にあるクラスの変数およびメソッドは、クラス&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;のインスタンスが&lt;/font&gt; &lt;code&gt;main()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;メソッド&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;内のオブジェクトとして作成されるまで使用できません&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。オブジェクトを作成した後、オブジェクトの変数とメソッドを使用できます。クラス&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;のオブジェクトを経由せずに&lt;/font&gt; &lt;code&gt;static&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;修飾子&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を持たないクラスの変数とメソッドを使用しようとすると、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コンパイル時にJavaコンパイラーによってキャッチされ、エラーとしてフラグが立てられます。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c3f999018019b0336c0974ffb6d2aeab8ed94757" translate="yes" xml:space="preserve">
          <source>I will try to explain the static thing to you. First of all static variables do not belong to any particular instance of the class. They are recognized with the name of the class. Static methods again do not belong again to any particular instance. They can access only static variables. Imagine you call MyClass.myMethod() and myMethod is a static method. If you use non-static variables inside the method, how the hell on earth would it know which variables to use? That's why you can use from static methods only static variables. I repeat again they do NOT belong to any particular instance.</source>
          <target state="translated">静的なことを説明してみようと思います。まず第一に、静的変数はクラスの特定のインスタンスには属しません。それらはクラスの名前で認識されます。静的メソッドもまた、特定のインスタンスには属しません。静的メソッドは静的変数にしかアクセスできません。MyClass.myMethod()を呼び出して、myMethodが静的メソッドであることを想像してみてください。メソッドの中で非静的変数を使った場合、どの変数を使えばいいのか、一体どうやって知ることができるのでしょうか?だからこそ、静的メソッドからは静的変数だけを使うことができるのです。繰り返しになりますが、それらは特定のインスタンスには属しません。</target>
        </trans-unit>
        <trans-unit id="5505403c960d97c565a4824355c06f0c1537b207" translate="yes" xml:space="preserve">
          <source>I've written this test code:</source>
          <target state="translated">このテストコードを書きました。</target>
        </trans-unit>
        <trans-unit id="c68edb472b533abd4a6c2c2d6895927750bd048e" translate="yes" xml:space="preserve">
          <source>If its not static, you need a variable of the class,</source>
          <target state="translated">静的でない場合は、クラスの変数が必要です。</target>
        </trans-unit>
        <trans-unit id="779daebe3f0923ea58fe5a71b8c2ed6579bb6d06" translate="yes" xml:space="preserve">
          <source>If you observe in codes, Some functions are directly called with Class names like</source>
          <target state="translated">コードを見ていると、いくつかの関数がクラス名で直接呼ばれています。</target>
        </trans-unit>
        <trans-unit id="4ad39630cafe914cf18e155e7ab4efa3acd337ea" translate="yes" xml:space="preserve">
          <source>In Example 2 CE error is because we call non static method from a static context. So it is not possible for ClassLoader to recognize method display() at compile time.So compile time error is occurred.</source>
          <target state="translated">例2では、静的なコンテキストから静的ではないメソッドを呼び出したためにCEエラーが発生しています。そのため、コンパイル時にclassLoaderがdisplay()を認識できず、コンパイル時エラーが発生しています。</target>
        </trans-unit>
        <trans-unit id="4b1ff3e182638f7bfae34492f4ac5391c71d7dc9" translate="yes" xml:space="preserve">
          <source>In order to have an initial entry point for an application, Java has adopted the convention that the Java program must have a class that contains a method with an agreed upon or special name. This special method is called &lt;code&gt;main()&lt;/code&gt;. Since the method must exist whether the class containing the main method has been instantiated or not, the &lt;code&gt;main()&lt;/code&gt; method must be declared with the &lt;code&gt;static&lt;/code&gt; modifier so that as soon as the class is loaded, the &lt;code&gt;main()&lt;/code&gt; method is available.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アプリケーションの初期エントリポイントを持つために、Javaは、Javaプログラムには、合意された名前または特別な名前を持つメソッドを含むクラスが必要であるという規則を採用しています。この特別なメソッドは&lt;/font&gt;&lt;/font&gt; &lt;code&gt;main()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と呼ばれ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。メソッドが存在しなければならないので、メインメソッドを含むクラスがインスタンス化されたか否かを、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;main()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;メソッドを用いて宣言されなければならない&lt;/font&gt;&lt;/font&gt; &lt;code&gt;static&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;クラスがロードされるとすぐに、その結果、改質剤&lt;/font&gt;&lt;/font&gt; &lt;code&gt;main()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;メソッドが利用可能です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dc468dd35b615fe993b0c722a26e797b4eaa8add" translate="yes" xml:space="preserve">
          <source>In the OO world, you define the class and inside the class, you define a field of type &lt;code&gt;Color&lt;/code&gt;. When the class is instantiated (when you create a specific instance), memory is reserved for the color and you can give this specific instance a color. Since these attributes are specific, they are non-static.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;オブジェクト指向の世界では、クラスを定義し、クラスの内部では、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Color&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;タイプのフィールドを定義します&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;クラスがインスタンス化されるとき（特定のインスタンスを作成するとき）、メモリは色のために予約され、この特定のインスタンスに色を与えることができます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これらの属性は固有であるため、静的ではありません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dd01adf6562fc2bb03b6c615e744b6dd2591a6ee" translate="yes" xml:space="preserve">
          <source>In your case, try this code as a starting block:</source>
          <target state="translated">あなたの場合は、このコードをスタートブロックとして試してみてください。</target>
        </trans-unit>
        <trans-unit id="a5b4594a3aa8d550fa7797eca26adb62c2a9d02f" translate="yes" xml:space="preserve">
          <source>It is ClassLoader responsible to load the class files.Let's see what happens when we write our own classes.</source>
          <target state="translated">クラスファイルをロードするのはClassLoaderの役目です。</target>
        </trans-unit>
        <trans-unit id="70d59f235488bc70f4665b941656a205723da62b" translate="yes" xml:space="preserve">
          <source>Let's analyze your program first..
In your program, your first method is &lt;code&gt;main()&lt;/code&gt;, and keep it in mind it is the static method... Then you declare the local variable for that method (compareCount, low, high, etc..). The scope of this variable is only the declared method, regardless of it being a static or non static method. So you can't use those variables outside that method. This is the basic error u made.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最初にプログラムを分析しましょう。プログラムでは、最初のメソッドは&lt;/font&gt;&lt;/font&gt; &lt;code&gt;main()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;であり、静的メソッドであることを覚えておいてください...次に、そのメソッドのローカル変数（compareCount、low、highなど）を宣言します。 。）。この変数のスコープは、静的または非静的メソッドに関係なく、宣言されたメソッドのみです。そのため、それらの変数をそのメソッドの外で使用することはできません。これはあなたが作った基本的なエラーです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="22ceb7c53031a505277c39133ceb61ac5c44f967" translate="yes" xml:space="preserve">
          <source>Let's see another example:
Example 2:</source>
          <target state="translated">別の例を見てみましょう。例2を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="5d3b8d5dcf1237e381425ebe03844b2a3b104923" translate="yes" xml:space="preserve">
          <source>Non-static variable cannot be referenced from a static context</source>
          <target state="translated">静的コンテキストから非静的変数を参照できない</target>
        </trans-unit>
        <trans-unit id="26aca3a70772f82cba9551cc4b2634df9a1f490e" translate="yes" xml:space="preserve">
          <source>Now For ClassLoader it looks like:</source>
          <target state="translated">さて、ClassLoaderの場合は以下のようになります。</target>
        </trans-unit>
        <trans-unit id="5aac769e54adb5f914debe950e39dc08d0a14c75" translate="yes" xml:space="preserve">
          <source>Now a static property of the car would be the number of wheels (4) on the road, and this would apply to all cars.</source>
          <target state="translated">今、車の静的なプロパティは、道路上の車輪の数(4)になり、これはすべての車に適用されます。</target>
        </trans-unit>
        <trans-unit id="55f62b5fe733feed7075474749b56ada897ff79b" translate="yes" xml:space="preserve">
          <source>Now if we try to compile this code compiler will give CE error.
CE: non-static method display() cannot be referenced from a static context.</source>
          <target state="translated">このコードをコンパイルしようとすると、コンパイラはCEエラーを出します。CE:非静的メソッド display()は静的コンテキストから参照できません。</target>
        </trans-unit>
        <trans-unit id="a4c6baf33cc894816461f3c33e7f435e8bd2366c" translate="yes" xml:space="preserve">
          <source>Now we can see that class &quot;StaticTest&quot; has 3 fields.But actually there is no existence of b,c member variable.But why ???. OK Lest's see. Here b,c are instance variable.Since instance variable gets the memory at the time of object creation. So here b,c are not getting any memory yet. That's why there is no existence of b,c. So There is only existence of a.
For ClassLoader it has only one information about a. ClassLoader yet not recognize b,c because it's object not instantiated yet.</source>
          <target state="translated">これで、StaticTestクラスは3つのフィールドを持っていることがわかるが、実際にはb,cのメンバ変数は存在しない。OK、確認してみよう。ここではb,cはインスタンス変数であり、インスタンス変数はオブジェクト作成時にメモリを取得する。なので、ここではb,cはまだメモリを取得していません。だからb,cは存在しない。ClassLoaderはaに関する情報を一つしか持っていません。</target>
        </trans-unit>
        <trans-unit id="66e7974266b7f27644bb52cd8bb94ec7d92a6e90" translate="yes" xml:space="preserve">
          <source>Now you can add/use instances with in the method</source>
          <target state="translated">メソッドでインスタンスを追加できるようになりました。</target>
        </trans-unit>
        <trans-unit id="5303b5862a7a03213993da7f02ba0ab845bf51a8" translate="yes" xml:space="preserve">
          <source>So the class says &quot;all cars have a color&quot; and the instance says &quot;this specific car is red&quot;.</source>
          <target state="translated">つまり、クラスは「すべての車に色がある」と言っていて、インスタンスは「この特定の車は赤だ」と言っています。</target>
        </trans-unit>
        <trans-unit id="ec7c8c4ad414a51df3965a76861df12c694b52ff" translate="yes" xml:space="preserve">
          <source>So you need to create an instance of your class as an object and then you can access the methods and variables of the class that have not been declared with the &lt;code&gt;static&lt;/code&gt; modifier. Once your Java program has started with the &lt;code&gt;main()&lt;/code&gt; function you can then use any variables or methods that have the modifier of &lt;code&gt;static&lt;/code&gt; since they exist as part of the class being loaded.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そのため、クラスのインスタンスをオブジェクトとして作成する必要があり、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;static&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;修飾子で&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;宣言されていないクラスのメソッドと変数にアクセスできます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。 Javaプログラムが&lt;/font&gt;&lt;/font&gt; &lt;code&gt;main()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;関数で&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;開始すると、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;static&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の修飾子を持つ変数またはメソッドを使用できます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。これらはロードされるクラスの一部として存在するためです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dc0b8787e157ef7daaef4bc4295c1283c986652a" translate="yes" xml:space="preserve">
          <source>Static fields and methods are connected to the class itself and not its instances. If you have a class &lt;code&gt;A&lt;/code&gt;, a 'normal' method &lt;code&gt;b&lt;/code&gt;, and a static method &lt;code&gt;c&lt;/code&gt;, and you make an instance &lt;code&gt;a&lt;/code&gt; of your class &lt;code&gt;A&lt;/code&gt;, the calls to &lt;code&gt;A.c()&lt;/code&gt; and &lt;code&gt;a.b()&lt;/code&gt; are valid. Method &lt;code&gt;c()&lt;/code&gt; has no idea which instance is connected, so it cannot use non-static fields.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;静的フィールドとメソッドは、インスタンスではなくクラス自体に接続されます。クラス&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、「通常の」メソッド&lt;/font&gt;&lt;/font&gt; &lt;code&gt;b&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、および静的メソッド&lt;/font&gt;&lt;/font&gt; &lt;code&gt;c&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あり、クラス&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;インスタンス&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;a&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を作成する場合&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A.c()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;および&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a.b()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の呼び出し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は有効です。メソッド&lt;/font&gt;&lt;/font&gt; &lt;code&gt;c()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はどのインスタンスが接続されているかを認識していないため、非静的フィールドを使用できません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dd9384367916225428aefbc0fd2391d0c819c3f9" translate="yes" xml:space="preserve">
          <source>Static fields and methods are shared with all instances. They are for values which are specific to the class and not a specific instance. For methods, this usually are global helper methods (like &lt;code&gt;Integer.parseInt()&lt;/code&gt;). For fields, it's usually constants (like car types, i.e. something where you have a limited set which doesn't change often).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;静的フィールドとメソッドはすべてのインスタンスで共有されます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これらは、特定のインスタンスではなく、クラスに固有の値用です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;メソッドの場合、これは通常、グローバルヘルパーメソッド（&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Integer.parseInt()&lt;/code&gt; など&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;フィールドの場合、それは通常定数です（車のタイプ、つまり頻繁に変更されない限定されたセットがある場合など）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="36494db0df9466ed4e6b0bb1015d67aec1ba26f6" translate="yes" xml:space="preserve">
          <source>Static variables are marked as &lt;code&gt;static&lt;/code&gt; and instance variables doesn't have specific keyword.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;静的変数がマークされている&lt;/font&gt;&lt;/font&gt; &lt;code&gt;static&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;およびインスタンス変数は、特定のキーワードを持っていません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8e0b9fd46cbe94367b2372ca27e7e29c075d5bac" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;static&lt;/code&gt; keyword modifies the lifecycle of a method or variable within a class. A &lt;code&gt;static&lt;/code&gt; method or variable is created at the time a class is loaded. A method or variable that is not declared as &lt;code&gt;static&lt;/code&gt; is created only when the class is instantiated as an object for example by using the &lt;code&gt;new&lt;/code&gt; operator.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;static&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;キーワードは、クラス内のメソッドまたは変数のライフサイクルを変更します。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;static&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;メソッドや変数は、クラスがロードされる時に作成されます。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;static&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;として宣言されていないメソッドまたは変数は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、たとえば&lt;/font&gt;&lt;/font&gt; &lt;code&gt;new&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;演算子&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用してオブジェクトとしてインスタンス化されたときにのみ作成されます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="390648a9531e0593ca91c8fcd1c34b99ba9c6525" translate="yes" xml:space="preserve">
          <source>The first thing is to know the difference between an instance of a class, and the class itself. A class models certain properties, and the behaviour of the whole in the context of those properties. An instance will define specific values for those properties.</source>
          <target state="translated">まず第一に、クラスのインスタンスとクラス自体の違いを知ることです。クラスは特定のプロパティと、それらのプロパティのコンテキストでの全体の振る舞いをモデル化します。インスタンスはそれらのプロパティの特定の値を定義します。</target>
        </trans-unit>
        <trans-unit id="1a59be2f543a266d0dfe7ec6749aa19db8676e29" translate="yes" xml:space="preserve">
          <source>The lifecycle of a class, in broad terms, is:</source>
          <target state="translated">クラスのライフサイクルは、広い意味では、クラスのライフサイクルです。</target>
        </trans-unit>
        <trans-unit id="e09ee9207b516f080909bd79855b0c8feae78efc" translate="yes" xml:space="preserve">
          <source>The lifetime of a static field/method is equivalent to the lifetime of your application</source>
          <target state="translated">静的なフィールドメソッドの有効期限は、アプリケーションの有効期限と同じです。</target>
        </trans-unit>
        <trans-unit id="45e61462fec0ea6d869a606732bad6c26cb6d26e" translate="yes" xml:space="preserve">
          <source>The new &lt;code&gt;main()&lt;/code&gt; method creates an instance of the class it contains (sounds strange but since &lt;code&gt;main()&lt;/code&gt; is created with the class instead of with the instance, it can do this) and then calls an instance method (&lt;code&gt;run()&lt;/code&gt;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;新しい&lt;/font&gt;&lt;/font&gt; &lt;code&gt;main()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;メソッドは、それが含むクラスのインスタンスを作成します（奇妙に聞こえますが、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;main()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はインスタンスではなくクラスで作成されるため、これを実行できます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;次に、インスタンスメソッド（&lt;/font&gt;&lt;/font&gt; &lt;code&gt;run()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;呼び出します&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ba17f3eb5b1f6622bb98dfac5f62c8e5968d76cc" translate="yes" xml:space="preserve">
          <source>The result is that when you start your Java application by a command line such as &lt;code&gt;java helloworld&lt;/code&gt; a series of actions happen. First of all a Java Virtual Machine is started up and initialized. Next the helloworld.class file containing the compiled Java code is loaded into the Java Virtual Machine. Then the Java Virtual Machine looks for a method in the &lt;code&gt;helloworld&lt;/code&gt; class that is called &lt;code&gt;main(String [] args)&lt;/code&gt;. this method must be &lt;code&gt;static&lt;/code&gt; so that it will exist even though the class has not actually been instantiated as an object. The Java Virtual Machine does not create an instance of the class by creating an object from the class. It just loads the class and starts execution at the &lt;code&gt;main()&lt;/code&gt; method.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;その結果、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;java helloworld&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;などのコマンドラインでJavaアプリケーションを起動すると&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、一連のアクションが発生します。まず、Java仮想マシンが起動され、初期化されます。次に、コンパイルされたJavaコードを含むhelloworld.classファイルがJava仮想マシンにロードされます。次に、Java仮想マシンは&lt;/font&gt; &lt;code&gt;main(String [] args)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;と呼ばれる&lt;/font&gt;&lt;/font&gt; &lt;code&gt;helloworld&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;クラスで&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;メソッドを探し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;クラスが実際にオブジェクトとしてインスタンス化されていなくても存在&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;できる&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ように、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このメソッドは&lt;/font&gt; &lt;code&gt;static&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;なければなり&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ません。 Java仮想マシンは、クラスからオブジェクトを作成することによってクラスのインスタンスを作成しません。クラスをロードし、&lt;/font&gt; &lt;code&gt;main()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;メソッドで&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;実行を開始するだけ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0fd0cd58867fba502c049c9f6c94736acdd35d8d" translate="yes" xml:space="preserve">
          <source>The solution for you is that you either make your fields static or your methods non-static. You main could look like this then:</source>
          <target state="translated">解決策は、フィールドを静的にするか、メソッドを静的ではないものにすることです。メインは次のようになります。</target>
        </trans-unit>
        <trans-unit id="9323c9f3505b2a95c08a5ec197540540572d98ef" translate="yes" xml:space="preserve">
          <source>The very basic thing is static variables or static methods are at class level. Class level variables or methods gets loaded prior to instance level methods or variables.And obviously the thing which is not loaded can not be used. So java compiler not letting the things to be handled at run time resolves at compile time. That's why it is giving you error non-static things can not be referred from static context. You just need to read about Class Level Scope, Instance Level Scope and Local Scope.</source>
          <target state="translated">基本的なことは、静的変数や静的メソッドはクラスレベルであるということです。クラスレベルの変数やメソッドは、インスタンスレベルのメソッドや変数よりも先にロードされます。そのため、実行時に処理されないものはコンパイル時に解決されます。そのため、静的コンテキストから参照することができません。クラスレベルスコープ、インスタンスレベルスコープ、ローカルスコープを読む必要があります。</target>
        </trans-unit>
        <trans-unit id="bb0438759b21be8d6fa47176b6cbb2df2b826e50" translate="yes" xml:space="preserve">
          <source>Then we come to next point. You told static is killing you. (It may be killing you but it only gives life to your program!!) First you must understand the basic thing.
*Static method calls only the static method and use only the static variable.
*Static variable or static method are not dependent on any instance of that class. (i.e. If you change any state of the static variable it will reflect in all objects of the class)
*Because of this you call it as a class variable or a class method.
And a lot more is there about the &quot;static&quot; keyword.
I hope now you get the idea. First change the scope of the variable and declare it as a static (to be able to use it in static methods).</source>
          <target state="translated">そして、次のポイントに行きます。あなたは、スタティックがあなたを殺していると言いました。(それはあなたを殺しているかもしれませんが、プログラムに命を与えてくれるだけです!)まず基本的なことを理解してください。*静的メソッドは静的メソッドのみを呼び出し、静的変数のみを使用する。*静的変数や静的メソッドは、そのクラスのインスタンスには依存しない。静的変数の状態を変更すると、そのクラスのすべてのオブジェクトに反映されます)*このため、クラス変数やクラスメソッドとして呼ぶことになります。static&quot; キーワードについては、他にもたくさんのことがあります。これでお分かりいただけたかと思います。まず、変数のスコープを変更して、変数をスタティックと宣言します(スタティックメソッドで使えるようにするため)。</target>
        </trans-unit>
        <trans-unit id="7cfdb1cf2d05cf4d0790aeabaecf7a998c774d8d" translate="yes" xml:space="preserve">
          <source>This is because NamFnc and println wil be declared using key word static before them.</source>
          <target state="translated">これは、NamFncとprintlnがそれらの前にstaticというキーワードを使って宣言されているからです。</target>
        </trans-unit>
        <trans-unit id="27e1a6c2a446413eb561255236488609660d3153" translate="yes" xml:space="preserve">
          <source>This is bit diff to explain about static key word for all beginners.</source>
          <target state="translated">ここでは、初心者向けの静的キーワードについて説明します。</target>
        </trans-unit>
        <trans-unit id="b0c4aa70a1b80654cd9bcda07013ffb87eff889e" translate="yes" xml:space="preserve">
          <source>To be able to access them from your static methods they need to be static member variables, like this:</source>
          <target state="translated">静的メソッドからアクセスできるようにするには、以下のように静的なメンバ変数にする必要があります。</target>
        </trans-unit>
        <trans-unit id="2656f5aecff1e079f1ab521bdf4dac1038cb53ae" translate="yes" xml:space="preserve">
          <source>To solve your problem, you need to instantiate an instance (create an object) of your class so the runtime can reserve memory for the instance (otherwise, different instances would overwrite each other which you don't want).</source>
          <target state="translated">問題を解決するためには、ランタイムがインスタンス用のメモリを確保できるように、クラスのインスタンスを作成する必要があります(そうしないと、異なるインスタンスがお互いに上書きされてしまいますが、これは望ましくありません)。</target>
        </trans-unit>
        <trans-unit id="539d69698bbab3b002db35480dec636fa14a9588" translate="yes" xml:space="preserve">
          <source>You must understand the difference between a class and an instance of that class. If you see a car on the street, you know immediately that it's a car even if you can't see which model or type. This is because you compare what you see with the &lt;em&gt;class&lt;/em&gt; &quot;car&quot;. The class contains which is similar to all cars. Think of it as a template or an idea.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;クラスとそのクラスのインスタンスの違いを理解する必要があります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;路上で車を見ると、どのモデルやタイプかわからなくても、それが車であることがすぐにわかります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは、目にするものを&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;クラス&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;「車」&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と比較するためです&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;クラスには、すべての車に類似したものが含まれます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;テンプレートまたはアイデアと考えてください。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c1b6b80376a0d4497c8861939bc5b776f80ec246" translate="yes" xml:space="preserve">
          <source>You wil get to know it clearly when you work more with Classes and Objects.</source>
          <target state="translated">クラスやオブジェクトを使って作業を進めていくと、より明確に理解できるようになるでしょう。</target>
        </trans-unit>
        <trans-unit id="dc674784561e27b2227e3462250dd671b32c4fd3" translate="yes" xml:space="preserve">
          <source>create an object with the &lt;code&gt;new&lt;/code&gt; operator using the class to make an instance of the class as an actual object and then when done with the object</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;クラスを使用&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;して&lt;/font&gt;&lt;/font&gt; &lt;code&gt;new&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;演算子で&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;オブジェクトを作成&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;し、クラスのインスタンスを実際のオブジェクトとして&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;作成してから、オブジェクトの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用を終了します&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="12a8502e4f50af9638b33a8989fbdb1df9824d1f" translate="yes" xml:space="preserve">
          <source>destroy the object reclaiming the resources it is holding such as memory during garbage collection.</source>
          <target state="translated">ガベージコレクション中にメモリなどの保持しているリソースを回収するためにオブジェクトを破壊します。</target>
        </trans-unit>
        <trans-unit id="847752f58bd217bbb23a7b07574639a3a3447211" translate="yes" xml:space="preserve">
          <source>put dot after the class variable and</source>
          <target state="translated">クラス変数の後にドットを入れて</target>
        </trans-unit>
        <trans-unit id="cc226f9e2f3ab746b96051993d98192787fbf605" translate="yes" xml:space="preserve">
          <source>static fields, and methods must be invoked using the class-name e.g. MyProgram7.main(...)</source>
          <target state="translated">静的なフィールド、メソッドはクラス名を使って呼び出されなければなりません。</target>
        </trans-unit>
        <trans-unit id="caf734e52efe3f4b85a81fec2d2bec42f855caad" translate="yes" xml:space="preserve">
          <source>the source code for the class is written creating a template or
pattern or stamp which can then be used to</source>
          <target state="translated">クラスのソースコードは、テンプレートやパターン、スタンプを作成して書かれています。</target>
        </trans-unit>
        <trans-unit id="8d22b50c348189ba313357307fcd3c1d549e12c7" translate="yes" xml:space="preserve">
          <source>then call function.</source>
          <target state="translated">の場合は、関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="4a28261b2bccbb507b1b76467aac8ef65d6fe809" translate="yes" xml:space="preserve">
          <source>variables within a method can not be static</source>
          <target state="translated">メソッド内の変数は静的ではありません。</target>
        </trans-unit>
        <trans-unit id="84c1a41d7170b5a32d2a24521aacbadd8f836d3b" translate="yes" xml:space="preserve">
          <source>|*| &lt;b&gt;Non Static :&lt;/b&gt;Non Static items can be called with Class Variable</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;| * | &lt;/font&gt;&lt;/font&gt;&lt;b&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;非静的：&lt;/font&gt;&lt;/font&gt;&lt;/b&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;非静的項目はクラス変数で呼び出すことができます&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4b74ecdf209ae54db532c1aff1f6a2836bd3f4d1" translate="yes" xml:space="preserve">
          <source>|*| &lt;b&gt;Static :&lt;/b&gt; Static items can be called with Class Name</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;| * | &lt;/font&gt;&lt;/font&gt;&lt;b&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;静的：&lt;/font&gt;&lt;/font&gt;&lt;/b&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;静的項目はクラス名で呼び出すことができます&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2f296b910c67258e1d52585136a179b73a188aea" translate="yes" xml:space="preserve">
          <source>|*| Static and non Static Class inside a Class :</source>
          <target state="translated">以下のコードで説明します。</target>
        </trans-unit>
        <trans-unit id="70dd75e88766d32fa97bd5de4fce591df8373ad9" translate="yes" xml:space="preserve">
          <source>|*| Static and non Static function in class :</source>
          <target state="translated">以下のコードで説明します。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
