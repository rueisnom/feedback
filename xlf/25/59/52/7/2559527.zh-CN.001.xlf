<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/2559527">
    <body>
      <group id="2559527">
        <trans-unit id="d2aec5d71f25dd3c929c3ae05f315100ab9855ce" translate="yes" xml:space="preserve">
          <source>And the advice for you is: you misunderstood the idea of the scope of the variables and static functionalities. Get clear idea about that.</source>
          <target state="translated">而给你的建议是:你误解了变量的范围和静态功能的概念。对此要有一个清晰的认识。</target>
        </trans-unit>
        <trans-unit id="1456f898bebc17c04a971a20e9a659df53d983ae" translate="yes" xml:space="preserve">
          <source>Anything bound to the static keyword is available in the context of the class rather than in the context of an instance of the class</source>
          <target state="translated">任何与静态关键字绑定的东西都可以在类的上下文中使用,而不是在类的实例的上下文中使用。</target>
        </trans-unit>
        <trans-unit id="f7655ad14779fb831345dd6017898bf950fa3f7b" translate="yes" xml:space="preserve">
          <source>As a corollary to the above</source>
          <target state="translated">作为上述结论的必然结果</target>
        </trans-unit>
        <trans-unit id="d600e5ecb3300a6c2840600e11a1121a709f80a0" translate="yes" xml:space="preserve">
          <source>At the same time, the car you see is an instance of the class &quot;car&quot; since it has all the properties which you expect: There is someone driving it, it has an engine, wheels.</source>
          <target state="translated">同时,你看到的汽车是 &quot;汽车 &quot;类的一个实例,因为它具有你所期望的所有属性。有人驾驶着它,它有发动机,车轮。</target>
        </trans-unit>
        <trans-unit id="f52f9635c25173d612233d1a7bdfd13015dddc60" translate="yes" xml:space="preserve">
          <source>Before you call an instance method or instance variable It needs a object(Instance). When instance variable is called from static method compiler doesn't know which is the object this variable belongs to. Because static methods doesn't have an object (Only one copy always). When you call an instance variable or instance methods from instance method it refer the &lt;code&gt;this&lt;/code&gt; object. It means the variable belongs to whatever object created and each object have it's own copy of instance methods and variables.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在调用实例方法或实例变量之前，它需要一个对象（实例）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;从静态方法调用实例变量时，编译器不知道该变量属于哪个对象。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因为静态方法没有对象（总是只有一个副本）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;当您从实例方法调用实例变量或实例方法时，它将引用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;this&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对象。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这意味着变量属于任何创建的对象，并且每个对象都有其自己的实例方法和变量的副本。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fdf6cd3b285796913ce74a547e9045609a45a79c" translate="yes" xml:space="preserve">
          <source>Below code explains you neatly</source>
          <target state="translated">下面的代码为您简单解释一下</target>
        </trans-unit>
        <trans-unit id="b2d4f7289bb09ea7c868bd69996ab7600104e58d" translate="yes" xml:space="preserve">
          <source>But it gives the following error:</source>
          <target state="translated">但它给出的错误如下。</target>
        </trans-unit>
        <trans-unit id="1c142a9be9f6b43f1957dd753348f42afd1f5c2e" translate="yes" xml:space="preserve">
          <source>E.g. 
Say, car has the property colour, and exhibits the behaviour 'motion'.
An instance of the car would be a Red Volkswagen Beetle in motion at 25kmph.</source>
          <target state="translated">例如,说汽车具有属性颜色,并表现出 &quot;运动 &quot;行为。一个例子是一辆红色大众甲壳虫车以25km/h的速度行驶。</target>
        </trans-unit>
        <trans-unit id="8ef2e1210c47909b18d1b60b9c30a0116c39a246" translate="yes" xml:space="preserve">
          <source>Example 1:</source>
          <target state="translated">例1:</target>
        </trans-unit>
        <trans-unit id="af265b4af8b5dc4a436d1f9e01ebb8d28ab33ed0" translate="yes" xml:space="preserve">
          <source>HTH</source>
          <target state="translated">HTH</target>
        </trans-unit>
        <trans-unit id="3598138f0ee250c01a79c1a479cb4662b5ef5b8e" translate="yes" xml:space="preserve">
          <source>How do I get my methods to recognize my class variables?</source>
          <target state="translated">如何让我的方法识别我的类变量?</target>
        </trans-unit>
        <trans-unit id="838b94d6f796c95b2046c9e8357ca90591e46ffb" translate="yes" xml:space="preserve">
          <source>However, those variables and methods of the class which are outside of the &lt;code&gt;main()&lt;/code&gt; method which do not have the &lt;code&gt;static&lt;/code&gt; modifier can not be used until an instance of the class has been created as an object within the &lt;code&gt;main()&lt;/code&gt; method. After creating the object you can then use the variables and methods of the object. An attempt to use the variables and methods of the class which do not have the &lt;code&gt;static&lt;/code&gt; modifier without going through an object of the class is caught by the Java compiler at compile time and flagged as an error.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;但是，在&lt;/font&gt;&lt;/font&gt; &lt;code&gt;main()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;方法&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;外部&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;没有&lt;/font&gt;&lt;/font&gt; &lt;code&gt;static&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;修饰符的&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;那些类的变量和方法，只有在将该类&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的实例创建为&lt;/font&gt;&lt;/font&gt; &lt;code&gt;main()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;方法中&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的对象之后，才能使用&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。创建对象之后，可以使用对象的变量和方法。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Java编译器会在编译时&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;尝试尝试使用不具有&lt;/font&gt;&lt;/font&gt; &lt;code&gt;static&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;修饰符&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的类的变量和方法，而这些变量和方法&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;不经过类的对象，并在编译时被标记为错误。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c3f999018019b0336c0974ffb6d2aeab8ed94757" translate="yes" xml:space="preserve">
          <source>I will try to explain the static thing to you. First of all static variables do not belong to any particular instance of the class. They are recognized with the name of the class. Static methods again do not belong again to any particular instance. They can access only static variables. Imagine you call MyClass.myMethod() and myMethod is a static method. If you use non-static variables inside the method, how the hell on earth would it know which variables to use? That's why you can use from static methods only static variables. I repeat again they do NOT belong to any particular instance.</source>
          <target state="translated">我试着给大家解释一下静态的事情。首先静态变量不属于类的任何特定实例。它们是用类的名称来识别的。再次,静态方法也不属于任何特定的实例。它们只能访问静态变量。假设你调用MyClass.myMethod(),myMethod是一个静态方法。如果你在方法内部使用了非静态变量,它怎么会知道要使用哪些变量呢?这就是为什么你可以从静态方法中只使用静态变量。我再重复一遍,它们不属于任何特定的实例。</target>
        </trans-unit>
        <trans-unit id="5505403c960d97c565a4824355c06f0c1537b207" translate="yes" xml:space="preserve">
          <source>I've written this test code:</source>
          <target state="translated">我写过这个测试代码。</target>
        </trans-unit>
        <trans-unit id="c68edb472b533abd4a6c2c2d6895927750bd048e" translate="yes" xml:space="preserve">
          <source>If its not static, you need a variable of the class,</source>
          <target state="translated">如果它不是静态的,你需要一个类的变量。</target>
        </trans-unit>
        <trans-unit id="779daebe3f0923ea58fe5a71b8c2ed6579bb6d06" translate="yes" xml:space="preserve">
          <source>If you observe in codes, Some functions are directly called with Class names like</source>
          <target state="translated">如果你在代码中观察到,有些函数直接调用类名,如</target>
        </trans-unit>
        <trans-unit id="4ad39630cafe914cf18e155e7ab4efa3acd337ea" translate="yes" xml:space="preserve">
          <source>In Example 2 CE error is because we call non static method from a static context. So it is not possible for ClassLoader to recognize method display() at compile time.So compile time error is occurred.</source>
          <target state="translated">在例2中,CE错误是因为我们从静态上下文中调用了非静态方法。所以在编译时ClassLoader无法识别方法display(),所以在编译时出现了错误。</target>
        </trans-unit>
        <trans-unit id="4b1ff3e182638f7bfae34492f4ac5391c71d7dc9" translate="yes" xml:space="preserve">
          <source>In order to have an initial entry point for an application, Java has adopted the convention that the Java program must have a class that contains a method with an agreed upon or special name. This special method is called &lt;code&gt;main()&lt;/code&gt;. Since the method must exist whether the class containing the main method has been instantiated or not, the &lt;code&gt;main()&lt;/code&gt; method must be declared with the &lt;code&gt;static&lt;/code&gt; modifier so that as soon as the class is loaded, the &lt;code&gt;main()&lt;/code&gt; method is available.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;为了有一个应用程序的初始入口点，Java采用了以下约定：Java程序必须具有一个类，该类包含具有约定名称或特殊名称的方法。这种特殊的方法称为&lt;/font&gt;&lt;/font&gt; &lt;code&gt;main()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。由于无论是否已实例化包含main方法的类都必须存在该方法，因此&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;必须使用&lt;/font&gt; &lt;code&gt;static&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;修饰符&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;声明&lt;/font&gt;&lt;/font&gt; &lt;code&gt;main()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;方法，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;以便一旦加载该类，即可使用&lt;/font&gt; &lt;code&gt;main()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;方法。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dc468dd35b615fe993b0c722a26e797b4eaa8add" translate="yes" xml:space="preserve">
          <source>In the OO world, you define the class and inside the class, you define a field of type &lt;code&gt;Color&lt;/code&gt;. When the class is instantiated (when you create a specific instance), memory is reserved for the color and you can give this specific instance a color. Since these attributes are specific, they are non-static.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在OO世界中，您定义类，并在类内部定义&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Color&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;类型的字段&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;当实例化该类时（创建特定实例时），将为该颜色保留内存，并且可以为该特定实例指定颜色。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;由于这些属性是特定的，因此它们是非静态的。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dd01adf6562fc2bb03b6c615e744b6dd2591a6ee" translate="yes" xml:space="preserve">
          <source>In your case, try this code as a starting block:</source>
          <target state="translated">在你的情况下,请尝试用这段代码作为起始块。</target>
        </trans-unit>
        <trans-unit id="a5b4594a3aa8d550fa7797eca26adb62c2a9d02f" translate="yes" xml:space="preserve">
          <source>It is ClassLoader responsible to load the class files.Let's see what happens when we write our own classes.</source>
          <target state="translated">我们来看看当我们编写自己的类时,ClassLoader负责加载类文件。</target>
        </trans-unit>
        <trans-unit id="70d59f235488bc70f4665b941656a205723da62b" translate="yes" xml:space="preserve">
          <source>Let's analyze your program first..
In your program, your first method is &lt;code&gt;main()&lt;/code&gt;, and keep it in mind it is the static method... Then you declare the local variable for that method (compareCount, low, high, etc..). The scope of this variable is only the declared method, regardless of it being a static or non static method. So you can't use those variables outside that method. This is the basic error u made.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;让我们首先分析您的程序。.在您的程序中，您的第一个方法是&lt;/font&gt;&lt;/font&gt; &lt;code&gt;main()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，并记住它是静态方法...然后声明该方法的局部变量（compareCount，low，high等）。 ）。此变量的范围仅是声明的方法，无论它是静态方法还是非静态方法。因此，您不能在该方法之外使用这些变量。这是您犯的基本错误。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="22ceb7c53031a505277c39133ceb61ac5c44f967" translate="yes" xml:space="preserve">
          <source>Let's see another example:
Example 2:</source>
          <target state="translated">我们再来看看另一个例子。例子2。</target>
        </trans-unit>
        <trans-unit id="5d3b8d5dcf1237e381425ebe03844b2a3b104923" translate="yes" xml:space="preserve">
          <source>Non-static variable cannot be referenced from a static context</source>
          <target state="translated">不能从静态上下文中引用非静态变量</target>
        </trans-unit>
        <trans-unit id="26aca3a70772f82cba9551cc4b2634df9a1f490e" translate="yes" xml:space="preserve">
          <source>Now For ClassLoader it looks like:</source>
          <target state="translated">现在对于ClassLoader来说,它看起来像:</target>
        </trans-unit>
        <trans-unit id="5aac769e54adb5f914debe950e39dc08d0a14c75" translate="yes" xml:space="preserve">
          <source>Now a static property of the car would be the number of wheels (4) on the road, and this would apply to all cars.</source>
          <target state="translated">现在,汽车的一个静态属性是道路上的车轮数量(4个),这将适用于所有汽车。</target>
        </trans-unit>
        <trans-unit id="55f62b5fe733feed7075474749b56ada897ff79b" translate="yes" xml:space="preserve">
          <source>Now if we try to compile this code compiler will give CE error.
CE: non-static method display() cannot be referenced from a static context.</source>
          <target state="translated">现在如果我们尝试编译这段代码,编译器会给出CE错误。CE:非静态方法display()不能从静态上下文中引用。</target>
        </trans-unit>
        <trans-unit id="a4c6baf33cc894816461f3c33e7f435e8bd2366c" translate="yes" xml:space="preserve">
          <source>Now we can see that class &quot;StaticTest&quot; has 3 fields.But actually there is no existence of b,c member variable.But why ???. OK Lest's see. Here b,c are instance variable.Since instance variable gets the memory at the time of object creation. So here b,c are not getting any memory yet. That's why there is no existence of b,c. So There is only existence of a.
For ClassLoader it has only one information about a. ClassLoader yet not recognize b,c because it's object not instantiated yet.</source>
          <target state="translated">现在我们可以看到,类 &quot;StaticTest &quot;有3个字段,但实际上没有b,c成员变量的存在。好了,让我们来看看。这里的b,c是实例变量,因为实例变量在对象创建的时候会得到内存。所以这里的b,c还没有得到任何内存。这就是为什么b,c不存在的原因。所以只有a的存在,对于ClassLoader来说,它只有一个关于a的信息,ClassLoader还不能识别b,c,因为它的对象还没有实例化。</target>
        </trans-unit>
        <trans-unit id="66e7974266b7f27644bb52cd8bb94ec7d92a6e90" translate="yes" xml:space="preserve">
          <source>Now you can add/use instances with in the method</source>
          <target state="translated">现在,你可以在方法中添加使用实例与</target>
        </trans-unit>
        <trans-unit id="5303b5862a7a03213993da7f02ba0ab845bf51a8" translate="yes" xml:space="preserve">
          <source>So the class says &quot;all cars have a color&quot; and the instance says &quot;this specific car is red&quot;.</source>
          <target state="translated">所以类说 &quot;所有的车都有一个颜色&quot;,实例说 &quot;这个具体的车是红色的&quot;。</target>
        </trans-unit>
        <trans-unit id="ec7c8c4ad414a51df3965a76861df12c694b52ff" translate="yes" xml:space="preserve">
          <source>So you need to create an instance of your class as an object and then you can access the methods and variables of the class that have not been declared with the &lt;code&gt;static&lt;/code&gt; modifier. Once your Java program has started with the &lt;code&gt;main()&lt;/code&gt; function you can then use any variables or methods that have the modifier of &lt;code&gt;static&lt;/code&gt; since they exist as part of the class being loaded.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因此，您需要将类的实例创建为对象，然后可以访问未使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;static&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;修饰符&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;声明的类的方法和变量&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。一旦Java程序以&lt;/font&gt;&lt;/font&gt; &lt;code&gt;main()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;函数&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;启动，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;您就可以使用具有&lt;/font&gt;&lt;/font&gt; &lt;code&gt;static&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;修饰符的任何变量或方法，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因为它们作为要加载的类的一部分存在。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dc0b8787e157ef7daaef4bc4295c1283c986652a" translate="yes" xml:space="preserve">
          <source>Static fields and methods are connected to the class itself and not its instances. If you have a class &lt;code&gt;A&lt;/code&gt;, a 'normal' method &lt;code&gt;b&lt;/code&gt;, and a static method &lt;code&gt;c&lt;/code&gt;, and you make an instance &lt;code&gt;a&lt;/code&gt; of your class &lt;code&gt;A&lt;/code&gt;, the calls to &lt;code&gt;A.c()&lt;/code&gt; and &lt;code&gt;a.b()&lt;/code&gt; are valid. Method &lt;code&gt;c()&lt;/code&gt; has no idea which instance is connected, so it cannot use non-static fields.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;静态字段和方法连接到类本身而不是其实例。如果您具有类&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，&amp;ldquo;常规&amp;rdquo;方法&lt;/font&gt;&lt;/font&gt; &lt;code&gt;b&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;和静态方法&lt;/font&gt;&lt;/font&gt; &lt;code&gt;c&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，并且您使&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;类&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;的实例&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，则对&lt;/font&gt; &lt;code&gt;A.c()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;和&lt;/font&gt; &lt;code&gt;a.b()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;的调用&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;有效。方法&lt;/font&gt; &lt;code&gt;c()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;不知道连接了哪个实例，因此它不能使用非静态字段。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dd9384367916225428aefbc0fd2391d0c819c3f9" translate="yes" xml:space="preserve">
          <source>Static fields and methods are shared with all instances. They are for values which are specific to the class and not a specific instance. For methods, this usually are global helper methods (like &lt;code&gt;Integer.parseInt()&lt;/code&gt;). For fields, it's usually constants (like car types, i.e. something where you have a limited set which doesn't change often).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;静态字段和方法与所有实例共享。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;它们用于特定于类而不是特定实例的值。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对于方法，这通常是全局辅助方法（如&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Integer.parseInt()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对于字段，通常是常量（例如汽车类型，即您的集合有限且不经常更改的东西）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="36494db0df9466ed4e6b0bb1015d67aec1ba26f6" translate="yes" xml:space="preserve">
          <source>Static variables are marked as &lt;code&gt;static&lt;/code&gt; and instance variables doesn't have specific keyword.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;静态变量标记为&lt;/font&gt;&lt;/font&gt; &lt;code&gt;static&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，实例变量没有特定的关键字。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8e0b9fd46cbe94367b2372ca27e7e29c075d5bac" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;static&lt;/code&gt; keyword modifies the lifecycle of a method or variable within a class. A &lt;code&gt;static&lt;/code&gt; method or variable is created at the time a class is loaded. A method or variable that is not declared as &lt;code&gt;static&lt;/code&gt; is created only when the class is instantiated as an object for example by using the &lt;code&gt;new&lt;/code&gt; operator.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的&lt;/font&gt;&lt;/font&gt; &lt;code&gt;static&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;关键字修改类内的方法或可变的生命周期。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;加载类时会创建&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一个&lt;/font&gt;&lt;/font&gt; &lt;code&gt;static&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;方法或变量。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;仅当将类实例化为对象（例如，使用&lt;/font&gt; &lt;code&gt;new&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;运算符）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;时，才会创建&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;未声明为&lt;/font&gt;&lt;/font&gt; &lt;code&gt;static&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的方法或变量&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="390648a9531e0593ca91c8fcd1c34b99ba9c6525" translate="yes" xml:space="preserve">
          <source>The first thing is to know the difference between an instance of a class, and the class itself. A class models certain properties, and the behaviour of the whole in the context of those properties. An instance will define specific values for those properties.</source>
          <target state="translated">首先要知道一个类的实例,和类本身的区别。一个类是对某些属性进行建模,并在这些属性的上下文中对整体的行为进行建模。实例会定义这些属性的具体值。</target>
        </trans-unit>
        <trans-unit id="1a59be2f543a266d0dfe7ec6749aa19db8676e29" translate="yes" xml:space="preserve">
          <source>The lifecycle of a class, in broad terms, is:</source>
          <target state="translated">一个班级的生命周期,从广义上讲,是:。</target>
        </trans-unit>
        <trans-unit id="e09ee9207b516f080909bd79855b0c8feae78efc" translate="yes" xml:space="preserve">
          <source>The lifetime of a static field/method is equivalent to the lifetime of your application</source>
          <target state="translated">静态fieldmethod的寿命相当于你的应用程序的寿命。</target>
        </trans-unit>
        <trans-unit id="45e61462fec0ea6d869a606732bad6c26cb6d26e" translate="yes" xml:space="preserve">
          <source>The new &lt;code&gt;main()&lt;/code&gt; method creates an instance of the class it contains (sounds strange but since &lt;code&gt;main()&lt;/code&gt; is created with the class instead of with the instance, it can do this) and then calls an instance method (&lt;code&gt;run()&lt;/code&gt;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;新的&lt;/font&gt;&lt;/font&gt; &lt;code&gt;main()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;方法创建了它包含的类的一个实例（听起来很奇怪，但是由于&lt;/font&gt;&lt;/font&gt; &lt;code&gt;main()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是使用该类而不是使用该实例创建的，因此可以执行此操作），然后调用一个实例方法（&lt;/font&gt;&lt;/font&gt; &lt;code&gt;run()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ba17f3eb5b1f6622bb98dfac5f62c8e5968d76cc" translate="yes" xml:space="preserve">
          <source>The result is that when you start your Java application by a command line such as &lt;code&gt;java helloworld&lt;/code&gt; a series of actions happen. First of all a Java Virtual Machine is started up and initialized. Next the helloworld.class file containing the compiled Java code is loaded into the Java Virtual Machine. Then the Java Virtual Machine looks for a method in the &lt;code&gt;helloworld&lt;/code&gt; class that is called &lt;code&gt;main(String [] args)&lt;/code&gt;. this method must be &lt;code&gt;static&lt;/code&gt; so that it will exist even though the class has not actually been instantiated as an object. The Java Virtual Machine does not create an instance of the class by creating an object from the class. It just loads the class and starts execution at the &lt;code&gt;main()&lt;/code&gt; method.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;结果是，当您通过诸如&lt;/font&gt;&lt;/font&gt; &lt;code&gt;java helloworld&lt;/code&gt; 之&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;类的命令行启动Java应用程序时，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;会发生一系列操作。首先，将启动并初始化Java虚拟机。接下来，将包含编译后的Java代码的helloworld.class文件加载到Java虚拟机中。然后，Java虚拟机在&lt;/font&gt;&lt;/font&gt; &lt;code&gt;helloworld&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;类中&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;寻找一种&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;称为&lt;/font&gt;&lt;/font&gt; &lt;code&gt;main(String [] args)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。此方法必须是&lt;/font&gt;&lt;/font&gt; &lt;code&gt;static&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;以便即使实际上尚未将类实例化为对象，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;该方法&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;也将存在。 Java虚拟机不会通过从类创建对象来创建该类的实例。它只是加载类并从&lt;/font&gt;&lt;/font&gt; &lt;code&gt;main()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;方法&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;开始执行&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0fd0cd58867fba502c049c9f6c94736acdd35d8d" translate="yes" xml:space="preserve">
          <source>The solution for you is that you either make your fields static or your methods non-static. You main could look like this then:</source>
          <target state="translated">你的解决方案是,你要么让你的字段是静态的,要么让你的方法是非静态的。那么你的主页面可以是这样的。</target>
        </trans-unit>
        <trans-unit id="9323c9f3505b2a95c08a5ec197540540572d98ef" translate="yes" xml:space="preserve">
          <source>The very basic thing is static variables or static methods are at class level. Class level variables or methods gets loaded prior to instance level methods or variables.And obviously the thing which is not loaded can not be used. So java compiler not letting the things to be handled at run time resolves at compile time. That's why it is giving you error non-static things can not be referred from static context. You just need to read about Class Level Scope, Instance Level Scope and Local Scope.</source>
          <target state="translated">最基本的东西是静态变量或静态方法是在类级的。类级的变量或方法在实例级的方法或变量之前被加载。所以java编译器没有让运行时处理的东西在编译时解决。这就是为什么它给你的错误非静态的东西不能从静态上下文中引用。你只需要阅读一下类级范围、实例级范围和本地范围就可以了。</target>
        </trans-unit>
        <trans-unit id="bb0438759b21be8d6fa47176b6cbb2df2b826e50" translate="yes" xml:space="preserve">
          <source>Then we come to next point. You told static is killing you. (It may be killing you but it only gives life to your program!!) First you must understand the basic thing.
*Static method calls only the static method and use only the static variable.
*Static variable or static method are not dependent on any instance of that class. (i.e. If you change any state of the static variable it will reflect in all objects of the class)
*Because of this you call it as a class variable or a class method.
And a lot more is there about the &quot;static&quot; keyword.
I hope now you get the idea. First change the scope of the variable and declare it as a static (to be able to use it in static methods).</source>
          <target state="translated">那我们就说到下一个问题。你告诉静态是要命的。(它可能会要了你的命,但它只给你的程序带来了生命!)首先你必须了解基本的东西。*静态方法只调用静态方法,只使用静态变量。*静态变量或静态方法不依赖于该类的任何实例。(也就是说,如果你改变了静态变量的任何状态,它将反映在类的所有对象上)*因为这样,你就可以把它作为类变量或类方法调用。还有很多关于 &quot;static &quot;关键字的内容。我希望现在你能明白了。首先改变变量的范围,声明为静态(为了能够在静态方法中使用)。</target>
        </trans-unit>
        <trans-unit id="7cfdb1cf2d05cf4d0790aeabaecf7a998c774d8d" translate="yes" xml:space="preserve">
          <source>This is because NamFnc and println wil be declared using key word static before them.</source>
          <target state="translated">这是因为NamFnc和println会使用关键字static来声明。</target>
        </trans-unit>
        <trans-unit id="27e1a6c2a446413eb561255236488609660d3153" translate="yes" xml:space="preserve">
          <source>This is bit diff to explain about static key word for all beginners.</source>
          <target state="translated">这是对所有初学者的静态关键词的解释。</target>
        </trans-unit>
        <trans-unit id="b0c4aa70a1b80654cd9bcda07013ffb87eff889e" translate="yes" xml:space="preserve">
          <source>To be able to access them from your static methods they need to be static member variables, like this:</source>
          <target state="translated">为了能够从静态方法中访问它们,它们需要成为静态成员变量,就像这样。</target>
        </trans-unit>
        <trans-unit id="2656f5aecff1e079f1ab521bdf4dac1038cb53ae" translate="yes" xml:space="preserve">
          <source>To solve your problem, you need to instantiate an instance (create an object) of your class so the runtime can reserve memory for the instance (otherwise, different instances would overwrite each other which you don't want).</source>
          <target state="translated">为了解决你的问题,你需要实例化你的类的一个实例(创建一个对象),这样运行时就可以为这个实例预留内存(否则,不同的实例会互相覆盖,这是你不想要的)。</target>
        </trans-unit>
        <trans-unit id="539d69698bbab3b002db35480dec636fa14a9588" translate="yes" xml:space="preserve">
          <source>You must understand the difference between a class and an instance of that class. If you see a car on the street, you know immediately that it's a car even if you can't see which model or type. This is because you compare what you see with the &lt;em&gt;class&lt;/em&gt; &quot;car&quot;. The class contains which is similar to all cars. Think of it as a template or an idea.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;您必须了解一个类与该类实例之间的区别。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果您在街上看到汽车，即使您看不到哪种型号或类型，也会立即知道它是汽车。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这是因为您将看到的与&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;ldquo;汽车&amp;rdquo; &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;类&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;进行了比较&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;该类包含与所有汽车相似的类。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;可以将其视为模板或想法。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c1b6b80376a0d4497c8861939bc5b776f80ec246" translate="yes" xml:space="preserve">
          <source>You wil get to know it clearly when you work more with Classes and Objects.</source>
          <target state="translated">当你更多地使用Classes和Objects时,你会清楚地了解它。</target>
        </trans-unit>
        <trans-unit id="dc674784561e27b2227e3462250dd671b32c4fd3" translate="yes" xml:space="preserve">
          <source>create an object with the &lt;code&gt;new&lt;/code&gt; operator using the class to make an instance of the class as an actual object and then when done with the object</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用该类&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的&lt;/font&gt;&lt;/font&gt; &lt;code&gt;new&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;运算符&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;创建一个对象，使&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;该类的实例成为实际对象，然后在完成该对象后&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="12a8502e4f50af9638b33a8989fbdb1df9824d1f" translate="yes" xml:space="preserve">
          <source>destroy the object reclaiming the resources it is holding such as memory during garbage collection.</source>
          <target state="translated">销毁对象,收回它所持有的资源,如垃圾回收期间的内存等。</target>
        </trans-unit>
        <trans-unit id="847752f58bd217bbb23a7b07574639a3a3447211" translate="yes" xml:space="preserve">
          <source>put dot after the class variable and</source>
          <target state="translated">在类变量后加点</target>
        </trans-unit>
        <trans-unit id="cc226f9e2f3ab746b96051993d98192787fbf605" translate="yes" xml:space="preserve">
          <source>static fields, and methods must be invoked using the class-name e.g. MyProgram7.main(...)</source>
          <target state="translated">static字段,并且方法必须使用类名来调用,例如MyProgram7.main(...)</target>
        </trans-unit>
        <trans-unit id="caf734e52efe3f4b85a81fec2d2bec42f855caad" translate="yes" xml:space="preserve">
          <source>the source code for the class is written creating a template or
pattern or stamp which can then be used to</source>
          <target state="translated">编写类的源码,创建一个模板或模式或图章,然后可以用于</target>
        </trans-unit>
        <trans-unit id="8d22b50c348189ba313357307fcd3c1d549e12c7" translate="yes" xml:space="preserve">
          <source>then call function.</source>
          <target state="translated">然后调用函数。</target>
        </trans-unit>
        <trans-unit id="4a28261b2bccbb507b1b76467aac8ef65d6fe809" translate="yes" xml:space="preserve">
          <source>variables within a method can not be static</source>
          <target state="translated">方法中的变量不能是静态的</target>
        </trans-unit>
        <trans-unit id="84c1a41d7170b5a32d2a24521aacbadd8f836d3b" translate="yes" xml:space="preserve">
          <source>|*| &lt;b&gt;Non Static :&lt;/b&gt;Non Static items can be called with Class Variable</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;| * | &lt;/font&gt;&lt;/font&gt;&lt;b&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;非静态：&lt;/font&gt;&lt;/font&gt;&lt;/b&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;非静态项目可以使用类变量调用&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4b74ecdf209ae54db532c1aff1f6a2836bd3f4d1" translate="yes" xml:space="preserve">
          <source>|*| &lt;b&gt;Static :&lt;/b&gt; Static items can be called with Class Name</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;| * | &lt;/font&gt;&lt;/font&gt;&lt;b&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;静态：&lt;/font&gt;&lt;/font&gt;&lt;/b&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;可以使用类名调用静态项&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2f296b910c67258e1d52585136a179b73a188aea" translate="yes" xml:space="preserve">
          <source>|*| Static and non Static Class inside a Class :</source>
          <target state="translated">下面的代码为您简单解释一下</target>
        </trans-unit>
        <trans-unit id="70dd75e88766d32fa97bd5de4fce591df8373ad9" translate="yes" xml:space="preserve">
          <source>|*| Static and non Static function in class :</source>
          <target state="translated">下面的代码为您简单解释一下</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
