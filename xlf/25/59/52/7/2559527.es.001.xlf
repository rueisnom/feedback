<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/2559527">
    <body>
      <group id="2559527">
        <trans-unit id="d2aec5d71f25dd3c929c3ae05f315100ab9855ce" translate="yes" xml:space="preserve">
          <source>And the advice for you is: you misunderstood the idea of the scope of the variables and static functionalities. Get clear idea about that.</source>
          <target state="translated">Y el consejo para ti es:has malinterpretado la idea del alcance de las variables y las funcionalidades estáticas.Tengan una idea clara de eso.</target>
        </trans-unit>
        <trans-unit id="1456f898bebc17c04a971a20e9a659df53d983ae" translate="yes" xml:space="preserve">
          <source>Anything bound to the static keyword is available in the context of the class rather than in the context of an instance of the class</source>
          <target state="translated">Cualquier cosa ligada a la palabra clave estática está disponible en el contexto de la clase y no en el contexto de una instancia de la clase</target>
        </trans-unit>
        <trans-unit id="f7655ad14779fb831345dd6017898bf950fa3f7b" translate="yes" xml:space="preserve">
          <source>As a corollary to the above</source>
          <target state="translated">Como corolario de lo anterior</target>
        </trans-unit>
        <trans-unit id="d600e5ecb3300a6c2840600e11a1121a709f80a0" translate="yes" xml:space="preserve">
          <source>At the same time, the car you see is an instance of the class &quot;car&quot; since it has all the properties which you expect: There is someone driving it, it has an engine, wheels.</source>
          <target state="translated">Al mismo tiempo,el coche que ves es una instancia de la clase &quot;coche&quot; ya que tiene todas las propiedades que esperas:Hay alguien que lo conduce,tiene un motor,ruedas.</target>
        </trans-unit>
        <trans-unit id="f52f9635c25173d612233d1a7bdfd13015dddc60" translate="yes" xml:space="preserve">
          <source>Before you call an instance method or instance variable It needs a object(Instance). When instance variable is called from static method compiler doesn't know which is the object this variable belongs to. Because static methods doesn't have an object (Only one copy always). When you call an instance variable or instance methods from instance method it refer the &lt;code&gt;this&lt;/code&gt; object. It means the variable belongs to whatever object created and each object have it's own copy of instance methods and variables.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Antes de llamar a un m&amp;eacute;todo de instancia o variable de instancia Necesita un objeto (Instancia). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cuando se llama a la variable de instancia desde el m&amp;eacute;todo est&amp;aacute;tico, el compilador no sabe a qu&amp;eacute; objeto pertenece esta variable. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Porque los m&amp;eacute;todos est&amp;aacute;ticos no tienen un objeto (solo una copia siempre). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cuando llama a una variable de instancia o m&amp;eacute;todos de instancia desde el m&amp;eacute;todo de instancia, hace referencia a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;this&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; objeto. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Significa que la variable pertenece a cualquier objeto creado y cada objeto tiene su propia copia de m&amp;eacute;todos y variables de instancia.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fdf6cd3b285796913ce74a547e9045609a45a79c" translate="yes" xml:space="preserve">
          <source>Below code explains you neatly</source>
          <target state="translated">El siguiente código te explica claramente</target>
        </trans-unit>
        <trans-unit id="b2d4f7289bb09ea7c868bd69996ab7600104e58d" translate="yes" xml:space="preserve">
          <source>But it gives the following error:</source>
          <target state="translated">Pero da el siguiente error:</target>
        </trans-unit>
        <trans-unit id="1c142a9be9f6b43f1957dd753348f42afd1f5c2e" translate="yes" xml:space="preserve">
          <source>E.g. 
Say, car has the property colour, and exhibits the behaviour 'motion'.
An instance of the car would be a Red Volkswagen Beetle in motion at 25kmph.</source>
          <target state="translated">Por ejemplo,digamos que el coche tiene el color de la propiedad,y exhibe el comportamiento &quot;movimiento&quot;.Un ejemplo del coche sería un Volkswagen Escarabajo Rojo en movimiento a 25kmph.</target>
        </trans-unit>
        <trans-unit id="8ef2e1210c47909b18d1b60b9c30a0116c39a246" translate="yes" xml:space="preserve">
          <source>Example 1:</source>
          <target state="translated">Ejemplo 1:</target>
        </trans-unit>
        <trans-unit id="af265b4af8b5dc4a436d1f9e01ebb8d28ab33ed0" translate="yes" xml:space="preserve">
          <source>HTH</source>
          <target state="translated">HTH</target>
        </trans-unit>
        <trans-unit id="3598138f0ee250c01a79c1a479cb4662b5ef5b8e" translate="yes" xml:space="preserve">
          <source>How do I get my methods to recognize my class variables?</source>
          <target state="translated">¿Cómo consigo que mis métodos reconozcan mis variables de clase?</target>
        </trans-unit>
        <trans-unit id="838b94d6f796c95b2046c9e8357ca90591e46ffb" translate="yes" xml:space="preserve">
          <source>However, those variables and methods of the class which are outside of the &lt;code&gt;main()&lt;/code&gt; method which do not have the &lt;code&gt;static&lt;/code&gt; modifier can not be used until an instance of the class has been created as an object within the &lt;code&gt;main()&lt;/code&gt; method. After creating the object you can then use the variables and methods of the object. An attempt to use the variables and methods of the class which do not have the &lt;code&gt;static&lt;/code&gt; modifier without going through an object of the class is caught by the Java compiler at compile time and flagged as an error.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Sin embargo, aquellas variables y m&amp;eacute;todos de la clase que est&amp;aacute;n fuera del &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;m&amp;eacute;todo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;main()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que no tienen el &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;modificador &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; no pueden usarse hasta que se haya creado una instancia de la clase como un objeto dentro del &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;m&amp;eacute;todo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;main()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . Despu&amp;eacute;s de crear el objeto, puede usar las variables y los m&amp;eacute;todos del objeto. El &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;compilador de Java detecta &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;un intento de usar las variables y m&amp;eacute;todos de la clase que no tienen el &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;modificador &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; sin pasar por un objeto de la clase en el momento de la compilaci&amp;oacute;n y lo marca como un error.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c3f999018019b0336c0974ffb6d2aeab8ed94757" translate="yes" xml:space="preserve">
          <source>I will try to explain the static thing to you. First of all static variables do not belong to any particular instance of the class. They are recognized with the name of the class. Static methods again do not belong again to any particular instance. They can access only static variables. Imagine you call MyClass.myMethod() and myMethod is a static method. If you use non-static variables inside the method, how the hell on earth would it know which variables to use? That's why you can use from static methods only static variables. I repeat again they do NOT belong to any particular instance.</source>
          <target state="translated">Intentaré explicarte la estática.En primer lugar,las variables estáticas no pertenecen a ninguna instancia particular de la clase.Se reconocen con el nombre de la clase.Los métodos estáticos tampoco pertenecen a ninguna instancia en particular.Sólo pueden acceder a las variables estáticas.Imagina que llamas a MyClass.myMethod()y myMethod es un método estático.Si usas variables no estáticas dentro del método,¿cómo diablos sabría qué variables usar? Por eso puedes usar de los métodos estáticos sólo variables estáticas.Repito,NO pertenecen a ninguna instancia en particular.</target>
        </trans-unit>
        <trans-unit id="5505403c960d97c565a4824355c06f0c1537b207" translate="yes" xml:space="preserve">
          <source>I've written this test code:</source>
          <target state="translated">He escrito este código de prueba:</target>
        </trans-unit>
        <trans-unit id="c68edb472b533abd4a6c2c2d6895927750bd048e" translate="yes" xml:space="preserve">
          <source>If its not static, you need a variable of the class,</source>
          <target state="translated">Si no es estática,necesitas una variable de la clase,</target>
        </trans-unit>
        <trans-unit id="779daebe3f0923ea58fe5a71b8c2ed6579bb6d06" translate="yes" xml:space="preserve">
          <source>If you observe in codes, Some functions are directly called with Class names like</source>
          <target state="translated">Si observas en los códigos,algunas funciones son llamadas directamente con nombres de clase como</target>
        </trans-unit>
        <trans-unit id="4ad39630cafe914cf18e155e7ab4efa3acd337ea" translate="yes" xml:space="preserve">
          <source>In Example 2 CE error is because we call non static method from a static context. So it is not possible for ClassLoader to recognize method display() at compile time.So compile time error is occurred.</source>
          <target state="translated">En el ejemplo 2 el error de CE es porque llamamos método no estático de un contexto estático.Por lo tanto,no es posible que ClassLoader reconozca el método display()en tiempo de compilación.Así que se produce un error en tiempo de compilación.</target>
        </trans-unit>
        <trans-unit id="4b1ff3e182638f7bfae34492f4ac5391c71d7dc9" translate="yes" xml:space="preserve">
          <source>In order to have an initial entry point for an application, Java has adopted the convention that the Java program must have a class that contains a method with an agreed upon or special name. This special method is called &lt;code&gt;main()&lt;/code&gt;. Since the method must exist whether the class containing the main method has been instantiated or not, the &lt;code&gt;main()&lt;/code&gt; method must be declared with the &lt;code&gt;static&lt;/code&gt; modifier so that as soon as the class is loaded, the &lt;code&gt;main()&lt;/code&gt; method is available.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para tener un punto de entrada inicial para una aplicaci&amp;oacute;n, Java ha adoptado la convenci&amp;oacute;n de que el programa Java debe tener una clase que contenga un m&amp;eacute;todo con un nombre acordado o especial. Este m&amp;eacute;todo especial se llama &lt;/font&gt;&lt;/font&gt; &lt;code&gt;main()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . Dado que el m&amp;eacute;todo debe existir tanto si la clase que contiene el m&amp;eacute;todo principal se ha instanciado como si no, el &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;m&amp;eacute;todo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;main()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; debe declararse con el &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;modificador &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para que tan pronto como se cargue la clase, el &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;m&amp;eacute;todo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;main()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; est&amp;eacute; disponible.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dc468dd35b615fe993b0c722a26e797b4eaa8add" translate="yes" xml:space="preserve">
          <source>In the OO world, you define the class and inside the class, you define a field of type &lt;code&gt;Color&lt;/code&gt;. When the class is instantiated (when you create a specific instance), memory is reserved for the color and you can give this specific instance a color. Since these attributes are specific, they are non-static.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En el mundo OO, usted define la clase y dentro de la clase, define un campo de tipo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Color&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cuando se crea una instancia de la clase (cuando crea una instancia espec&amp;iacute;fica), la memoria se reserva para el color y puede darle un color a esta instancia espec&amp;iacute;fica. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Como estos atributos son espec&amp;iacute;ficos, no son est&amp;aacute;ticos.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dd01adf6562fc2bb03b6c615e744b6dd2591a6ee" translate="yes" xml:space="preserve">
          <source>In your case, try this code as a starting block:</source>
          <target state="translated">En su caso,pruebe este código como un bloque de inicio:</target>
        </trans-unit>
        <trans-unit id="a5b4594a3aa8d550fa7797eca26adb62c2a9d02f" translate="yes" xml:space="preserve">
          <source>It is ClassLoader responsible to load the class files.Let's see what happens when we write our own classes.</source>
          <target state="translated">Es el ClassLoader el responsable de cargar los archivos de las clases.Veamos qué pasa cuando escribimos nuestras propias clases.</target>
        </trans-unit>
        <trans-unit id="70d59f235488bc70f4665b941656a205723da62b" translate="yes" xml:space="preserve">
          <source>Let's analyze your program first..
In your program, your first method is &lt;code&gt;main()&lt;/code&gt;, and keep it in mind it is the static method... Then you declare the local variable for that method (compareCount, low, high, etc..). The scope of this variable is only the declared method, regardless of it being a static or non static method. So you can't use those variables outside that method. This is the basic error u made.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Analicemos su programa primero ... En su programa, su primer m&amp;eacute;todo es &lt;/font&gt;&lt;/font&gt; &lt;code&gt;main()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , y tenga en cuenta que es el m&amp;eacute;todo est&amp;aacute;tico ... Luego declara la variable local para ese m&amp;eacute;todo (compareCount, low, high, etc. .). El alcance de esta variable es solo el m&amp;eacute;todo declarado, independientemente de que sea un m&amp;eacute;todo est&amp;aacute;tico o no est&amp;aacute;tico. Entonces no puede usar esas variables fuera de ese m&amp;eacute;todo. Este es el error b&amp;aacute;sico que cometiste.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="22ceb7c53031a505277c39133ceb61ac5c44f967" translate="yes" xml:space="preserve">
          <source>Let's see another example:
Example 2:</source>
          <target state="translated">Veamos otro ejemplo:Ejemplo 2:</target>
        </trans-unit>
        <trans-unit id="5d3b8d5dcf1237e381425ebe03844b2a3b104923" translate="yes" xml:space="preserve">
          <source>Non-static variable cannot be referenced from a static context</source>
          <target state="translated">La variable no estática no puede ser referenciada desde un contexto estático</target>
        </trans-unit>
        <trans-unit id="26aca3a70772f82cba9551cc4b2634df9a1f490e" translate="yes" xml:space="preserve">
          <source>Now For ClassLoader it looks like:</source>
          <target state="translated">Ahora para ClassLoader parece:</target>
        </trans-unit>
        <trans-unit id="5aac769e54adb5f914debe950e39dc08d0a14c75" translate="yes" xml:space="preserve">
          <source>Now a static property of the car would be the number of wheels (4) on the road, and this would apply to all cars.</source>
          <target state="translated">Ahora una propiedad estática del coche sería el número de ruedas (4)en la carretera,y esto se aplicaría a todos los coches.</target>
        </trans-unit>
        <trans-unit id="55f62b5fe733feed7075474749b56ada897ff79b" translate="yes" xml:space="preserve">
          <source>Now if we try to compile this code compiler will give CE error.
CE: non-static method display() cannot be referenced from a static context.</source>
          <target state="translated">Ahora,si intentamos compilar este compilador de código dará un error CE.CE:el método no estático display()no puede ser referenciado desde un contexto estático.</target>
        </trans-unit>
        <trans-unit id="a4c6baf33cc894816461f3c33e7f435e8bd2366c" translate="yes" xml:space="preserve">
          <source>Now we can see that class &quot;StaticTest&quot; has 3 fields.But actually there is no existence of b,c member variable.But why ???. OK Lest's see. Here b,c are instance variable.Since instance variable gets the memory at the time of object creation. So here b,c are not getting any memory yet. That's why there is no existence of b,c. So There is only existence of a.
For ClassLoader it has only one information about a. ClassLoader yet not recognize b,c because it's object not instantiated yet.</source>
          <target state="translated">Ahora podemos ver que la clase &quot;StaticTest&quot; tiene 3 campos.Pero en realidad no existe una variable de miembro b,c.Pero ¿por qué? Bien,para que no lo veamos.Aquí b,c son variables de instancia.Ya que las variables de instancia tienen la memoria al momento de la creación del objeto.Así que aquí B,C no tienen memoria todavía.Por eso es que no existe la existencia de b,c.Así que sólo hay existencia de a.Para ClassLoader sólo tiene una información sobre a.ClassLoader aún no reconoce b,c porque es un objeto aún no instanciado.</target>
        </trans-unit>
        <trans-unit id="66e7974266b7f27644bb52cd8bb94ec7d92a6e90" translate="yes" xml:space="preserve">
          <source>Now you can add/use instances with in the method</source>
          <target state="translated">Ahora puede agregar instancias de uso con en el método</target>
        </trans-unit>
        <trans-unit id="5303b5862a7a03213993da7f02ba0ab845bf51a8" translate="yes" xml:space="preserve">
          <source>So the class says &quot;all cars have a color&quot; and the instance says &quot;this specific car is red&quot;.</source>
          <target state="translated">Así que la clase dice &quot;todos los coches tienen un color&quot; y la instancia dice &quot;este coche en concreto es rojo&quot;.</target>
        </trans-unit>
        <trans-unit id="ec7c8c4ad414a51df3965a76861df12c694b52ff" translate="yes" xml:space="preserve">
          <source>So you need to create an instance of your class as an object and then you can access the methods and variables of the class that have not been declared with the &lt;code&gt;static&lt;/code&gt; modifier. Once your Java program has started with the &lt;code&gt;main()&lt;/code&gt; function you can then use any variables or methods that have the modifier of &lt;code&gt;static&lt;/code&gt; since they exist as part of the class being loaded.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por lo tanto, debe crear una instancia de su clase como un objeto y luego puede acceder a los m&amp;eacute;todos y variables de la clase que no se han declarado con el &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;modificador &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . Una vez que su programa Java ha comenzado con la funci&amp;oacute;n &lt;/font&gt;&lt;/font&gt; &lt;code&gt;main()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , puede usar cualquier variable o m&amp;eacute;todo que tenga el modificador de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static&lt;/code&gt; ,&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ya que existe como parte de la clase que se est&amp;aacute; cargando.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dc0b8787e157ef7daaef4bc4295c1283c986652a" translate="yes" xml:space="preserve">
          <source>Static fields and methods are connected to the class itself and not its instances. If you have a class &lt;code&gt;A&lt;/code&gt;, a 'normal' method &lt;code&gt;b&lt;/code&gt;, and a static method &lt;code&gt;c&lt;/code&gt;, and you make an instance &lt;code&gt;a&lt;/code&gt; of your class &lt;code&gt;A&lt;/code&gt;, the calls to &lt;code&gt;A.c()&lt;/code&gt; and &lt;code&gt;a.b()&lt;/code&gt; are valid. Method &lt;code&gt;c()&lt;/code&gt; has no idea which instance is connected, so it cannot use non-static fields.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Los campos y m&amp;eacute;todos est&amp;aacute;ticos est&amp;aacute;n conectados a la clase misma y no a sus instancias. Si tiene una clase &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , un m&amp;eacute;todo 'normal' &lt;/font&gt;&lt;/font&gt; &lt;code&gt;b&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y un m&amp;eacute;todo est&amp;aacute;tico &lt;/font&gt;&lt;/font&gt; &lt;code&gt;c&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , y hace una instancia &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; de su clase &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , las llamadas a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A.c()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a.b()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; son v&amp;aacute;lidas. El m&amp;eacute;todo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;c()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; no tiene idea de qu&amp;eacute; instancia est&amp;aacute; conectada, por lo que no puede usar campos no est&amp;aacute;ticos.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dd9384367916225428aefbc0fd2391d0c819c3f9" translate="yes" xml:space="preserve">
          <source>Static fields and methods are shared with all instances. They are for values which are specific to the class and not a specific instance. For methods, this usually are global helper methods (like &lt;code&gt;Integer.parseInt()&lt;/code&gt;). For fields, it's usually constants (like car types, i.e. something where you have a limited set which doesn't change often).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Los campos y m&amp;eacute;todos est&amp;aacute;ticos se comparten con todas las instancias. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Son para valores que son espec&amp;iacute;ficos de la clase y no una instancia espec&amp;iacute;fica. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para los m&amp;eacute;todos, estos generalmente son m&amp;eacute;todos de ayuda global (como &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Integer.parseInt()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para los campos, generalmente son constantes (como los tipos de autom&amp;oacute;viles, es decir, algo en el que tiene un conjunto limitado que no cambia a menudo).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="36494db0df9466ed4e6b0bb1015d67aec1ba26f6" translate="yes" xml:space="preserve">
          <source>Static variables are marked as &lt;code&gt;static&lt;/code&gt; and instance variables doesn't have specific keyword.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Las variables est&amp;aacute;ticas se marcan como &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y las variables de instancia no tienen una palabra clave espec&amp;iacute;fica.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8e0b9fd46cbe94367b2372ca27e7e29c075d5bac" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;static&lt;/code&gt; keyword modifies the lifecycle of a method or variable within a class. A &lt;code&gt;static&lt;/code&gt; method or variable is created at the time a class is loaded. A method or variable that is not declared as &lt;code&gt;static&lt;/code&gt; is created only when the class is instantiated as an object for example by using the &lt;code&gt;new&lt;/code&gt; operator.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;palabra clave &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; modifica el ciclo de vida de un m&amp;eacute;todo o variable dentro de una clase. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Se &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;crea &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;un &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;m&amp;eacute;todo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; o variable en el momento en que se carga una clase. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Un m&amp;eacute;todo o variable que no se declara como &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; se crea solo cuando la clase se instancia como un objeto, por ejemplo, utilizando el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;new&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; operador.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="390648a9531e0593ca91c8fcd1c34b99ba9c6525" translate="yes" xml:space="preserve">
          <source>The first thing is to know the difference between an instance of a class, and the class itself. A class models certain properties, and the behaviour of the whole in the context of those properties. An instance will define specific values for those properties.</source>
          <target state="translated">Lo primero es saber la diferencia entre una instancia de una clase y la clase misma.Una clase modela ciertas propiedades,y el comportamiento del conjunto en el contexto de esas propiedades.Una instancia definirá valores específicos para esas propiedades.</target>
        </trans-unit>
        <trans-unit id="1a59be2f543a266d0dfe7ec6749aa19db8676e29" translate="yes" xml:space="preserve">
          <source>The lifecycle of a class, in broad terms, is:</source>
          <target state="translated">El ciclo de vida de una clase,en términos generales,es:</target>
        </trans-unit>
        <trans-unit id="e09ee9207b516f080909bd79855b0c8feae78efc" translate="yes" xml:space="preserve">
          <source>The lifetime of a static field/method is equivalent to the lifetime of your application</source>
          <target state="translated">La vida útil de un método de campo estático es equivalente a la vida útil de su aplicación</target>
        </trans-unit>
        <trans-unit id="45e61462fec0ea6d869a606732bad6c26cb6d26e" translate="yes" xml:space="preserve">
          <source>The new &lt;code&gt;main()&lt;/code&gt; method creates an instance of the class it contains (sounds strange but since &lt;code&gt;main()&lt;/code&gt; is created with the class instead of with the instance, it can do this) and then calls an instance method (&lt;code&gt;run()&lt;/code&gt;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El nuevo &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;m&amp;eacute;todo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;main()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; crea una instancia de la clase que contiene (suena extra&amp;ntilde;o pero como &lt;/font&gt;&lt;/font&gt; &lt;code&gt;main()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; se crea con la clase en lugar de con la instancia, puede hacer esto) y luego llama a un m&amp;eacute;todo de instancia ( &lt;/font&gt;&lt;/font&gt; &lt;code&gt;run()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ba17f3eb5b1f6622bb98dfac5f62c8e5968d76cc" translate="yes" xml:space="preserve">
          <source>The result is that when you start your Java application by a command line such as &lt;code&gt;java helloworld&lt;/code&gt; a series of actions happen. First of all a Java Virtual Machine is started up and initialized. Next the helloworld.class file containing the compiled Java code is loaded into the Java Virtual Machine. Then the Java Virtual Machine looks for a method in the &lt;code&gt;helloworld&lt;/code&gt; class that is called &lt;code&gt;main(String [] args)&lt;/code&gt;. this method must be &lt;code&gt;static&lt;/code&gt; so that it will exist even though the class has not actually been instantiated as an object. The Java Virtual Machine does not create an instance of the class by creating an object from the class. It just loads the class and starts execution at the &lt;code&gt;main()&lt;/code&gt; method.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El resultado es que cuando inicia su aplicaci&amp;oacute;n Java mediante una l&amp;iacute;nea de comando como &lt;/font&gt;&lt;/font&gt; &lt;code&gt;java helloworld&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , suceden una serie de acciones. En primer lugar, se inicia e inicializa una m&amp;aacute;quina virtual Java. A continuaci&amp;oacute;n, el archivo helloworld.class que contiene el c&amp;oacute;digo Java compilado se carga en la m&amp;aacute;quina virtual Java. Luego, la m&amp;aacute;quina virtual Java busca un m&amp;eacute;todo en la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;clase &lt;/font&gt;&lt;/font&gt; &lt;code&gt;helloworld&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que se llama &lt;/font&gt;&lt;/font&gt; &lt;code&gt;main(String [] args)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . Este m&amp;eacute;todo debe ser &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para que exista aunque la clase no haya sido instanciada como un objeto. Java Virtual Machine no crea una instancia de la clase al crear un objeto a partir de la clase. Simplemente carga la clase e inicia la ejecuci&amp;oacute;n en el &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;m&amp;eacute;todo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;main()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0fd0cd58867fba502c049c9f6c94736acdd35d8d" translate="yes" xml:space="preserve">
          <source>The solution for you is that you either make your fields static or your methods non-static. You main could look like this then:</source>
          <target state="translated">La solución para usted es que haga sus campos estáticos o sus métodos no estáticos.Entonces podrías tener este aspecto:</target>
        </trans-unit>
        <trans-unit id="9323c9f3505b2a95c08a5ec197540540572d98ef" translate="yes" xml:space="preserve">
          <source>The very basic thing is static variables or static methods are at class level. Class level variables or methods gets loaded prior to instance level methods or variables.And obviously the thing which is not loaded can not be used. So java compiler not letting the things to be handled at run time resolves at compile time. That's why it is giving you error non-static things can not be referred from static context. You just need to read about Class Level Scope, Instance Level Scope and Local Scope.</source>
          <target state="translated">Lo más básico es que las variables estáticas o los métodos estáticos están a nivel de clase.Las variables o métodos a nivel de clase se cargan antes que los métodos o variables a nivel de instancia.Y obviamente la cosa que no se carga no puede ser utilizada.Así que el compilador de Java no deja que las cosas que se manejan en tiempo de ejecución se resuelvan en tiempo de compilación.Es por eso que te da error que las cosas no estáticas no pueden ser referidas desde un contexto estático.Sólo tienes que leer sobre el alcance de nivel de clase,el alcance de nivel de instancia y el alcance local.</target>
        </trans-unit>
        <trans-unit id="bb0438759b21be8d6fa47176b6cbb2df2b826e50" translate="yes" xml:space="preserve">
          <source>Then we come to next point. You told static is killing you. (It may be killing you but it only gives life to your program!!) First you must understand the basic thing.
*Static method calls only the static method and use only the static variable.
*Static variable or static method are not dependent on any instance of that class. (i.e. If you change any state of the static variable it will reflect in all objects of the class)
*Because of this you call it as a class variable or a class method.
And a lot more is there about the &quot;static&quot; keyword.
I hope now you get the idea. First change the scope of the variable and declare it as a static (to be able to use it in static methods).</source>
          <target state="translated">Entonces llegamos al siguiente punto.Dijiste que la estática te está matando.(¡Puede que te esté matando,pero sólo da vida a tu programa!)Primero debes entender lo básico.*El método estático llama sólo al método estático y usa sólo la variable estática.*La variable estática o el método estático no dependen de ninguna instancia de esa clase.(es decir,si cambias cualquier estado de la variable estática se reflejará en todos los objetos de la clase)*Por eso lo llamas variable de clase o método de clase.Y hay mucho más sobre la palabra clave &quot;estática&quot;.Espero que ahora entiendas la idea.Primero cambia el alcance de la variable y declárala como estática (para poder usarla en métodos estáticos).</target>
        </trans-unit>
        <trans-unit id="7cfdb1cf2d05cf4d0790aeabaecf7a998c774d8d" translate="yes" xml:space="preserve">
          <source>This is because NamFnc and println wil be declared using key word static before them.</source>
          <target state="translated">Esto se debe a que NamFnc y Println serán declarados usando la palabra clave estática ante ellos.</target>
        </trans-unit>
        <trans-unit id="27e1a6c2a446413eb561255236488609660d3153" translate="yes" xml:space="preserve">
          <source>This is bit diff to explain about static key word for all beginners.</source>
          <target state="translated">Esto es un poco diferente para explicar la palabra clave estática para todos los principiantes.</target>
        </trans-unit>
        <trans-unit id="b0c4aa70a1b80654cd9bcda07013ffb87eff889e" translate="yes" xml:space="preserve">
          <source>To be able to access them from your static methods they need to be static member variables, like this:</source>
          <target state="translated">Para poder acceder a ellos desde sus métodos estáticos,deben ser variables de miembros estáticos,como esto:</target>
        </trans-unit>
        <trans-unit id="2656f5aecff1e079f1ab521bdf4dac1038cb53ae" translate="yes" xml:space="preserve">
          <source>To solve your problem, you need to instantiate an instance (create an object) of your class so the runtime can reserve memory for the instance (otherwise, different instances would overwrite each other which you don't want).</source>
          <target state="translated">Para resolver tu problema,necesitas instanciar una instancia (crear un objeto)de tu clase para que el tiempo de ejecución pueda reservar memoria para la instancia (de lo contrario,se sobrescribirían diferentes instancias que no quieres).</target>
        </trans-unit>
        <trans-unit id="539d69698bbab3b002db35480dec636fa14a9588" translate="yes" xml:space="preserve">
          <source>You must understand the difference between a class and an instance of that class. If you see a car on the street, you know immediately that it's a car even if you can't see which model or type. This is because you compare what you see with the &lt;em&gt;class&lt;/em&gt; &quot;car&quot;. The class contains which is similar to all cars. Think of it as a template or an idea.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Debe comprender la diferencia entre una clase y una instancia de esa clase. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si ve un autom&amp;oacute;vil en la calle, sabe de inmediato que es un autom&amp;oacute;vil, incluso si no puede ver qu&amp;eacute; modelo o tipo. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esto se debe a que comparas lo que ves con la &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;clase&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &quot;auto&quot;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La clase contiene cu&amp;aacute;l es similar a todos los autos. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Piense en ello como una plantilla o una idea.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c1b6b80376a0d4497c8861939bc5b776f80ec246" translate="yes" xml:space="preserve">
          <source>You wil get to know it clearly when you work more with Classes and Objects.</source>
          <target state="translated">Lo conocerás claramente cuando trabajes más con Clases y Objetos.</target>
        </trans-unit>
        <trans-unit id="dc674784561e27b2227e3462250dd671b32c4fd3" translate="yes" xml:space="preserve">
          <source>create an object with the &lt;code&gt;new&lt;/code&gt; operator using the class to make an instance of the class as an actual object and then when done with the object</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;cree un objeto con el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;new&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; operador usando la clase para hacer una instancia de la clase como un objeto real y luego cuando haya terminado con el objeto&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="12a8502e4f50af9638b33a8989fbdb1df9824d1f" translate="yes" xml:space="preserve">
          <source>destroy the object reclaiming the resources it is holding such as memory during garbage collection.</source>
          <target state="translated">destruye el objeto reclamando los recursos que tiene,como la memoria durante la recogida de basura.</target>
        </trans-unit>
        <trans-unit id="847752f58bd217bbb23a7b07574639a3a3447211" translate="yes" xml:space="preserve">
          <source>put dot after the class variable and</source>
          <target state="translated">poner el punto después de la variable de clase y</target>
        </trans-unit>
        <trans-unit id="cc226f9e2f3ab746b96051993d98192787fbf605" translate="yes" xml:space="preserve">
          <source>static fields, and methods must be invoked using the class-name e.g. MyProgram7.main(...)</source>
          <target state="translated">campos estáticos,y los métodos deben ser invocados usando el nombre de la clase,por ejemplo,MyProgram7.main(...)</target>
        </trans-unit>
        <trans-unit id="caf734e52efe3f4b85a81fec2d2bec42f855caad" translate="yes" xml:space="preserve">
          <source>the source code for the class is written creating a template or
pattern or stamp which can then be used to</source>
          <target state="translated">el código fuente de la clase se escribe creando una plantilla o patrón o sello que puede ser usado para</target>
        </trans-unit>
        <trans-unit id="8d22b50c348189ba313357307fcd3c1d549e12c7" translate="yes" xml:space="preserve">
          <source>then call function.</source>
          <target state="translated">y luego llamar a la función.</target>
        </trans-unit>
        <trans-unit id="4a28261b2bccbb507b1b76467aac8ef65d6fe809" translate="yes" xml:space="preserve">
          <source>variables within a method can not be static</source>
          <target state="translated">las variables dentro de un método no pueden ser estáticas</target>
        </trans-unit>
        <trans-unit id="84c1a41d7170b5a32d2a24521aacbadd8f836d3b" translate="yes" xml:space="preserve">
          <source>|*| &lt;b&gt;Non Static :&lt;/b&gt;Non Static items can be called with Class Variable</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;| * | &lt;/font&gt;&lt;/font&gt;&lt;b&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;No est&amp;aacute;tico: los elementos&lt;/font&gt;&lt;/font&gt;&lt;/b&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; no est&amp;aacute;ticos se pueden llamar con variable de clase&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4b74ecdf209ae54db532c1aff1f6a2836bd3f4d1" translate="yes" xml:space="preserve">
          <source>|*| &lt;b&gt;Static :&lt;/b&gt; Static items can be called with Class Name</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;| * | &lt;/font&gt;&lt;/font&gt;&lt;b&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Est&amp;aacute;tico: los&lt;/font&gt;&lt;/font&gt;&lt;/b&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; elementos est&amp;aacute;ticos se pueden llamar con el nombre de la clase&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2f296b910c67258e1d52585136a179b73a188aea" translate="yes" xml:space="preserve">
          <source>|*| Static and non Static Class inside a Class :</source>
          <target state="translated">El siguiente código te explica claramente</target>
        </trans-unit>
        <trans-unit id="70dd75e88766d32fa97bd5de4fce591df8373ad9" translate="yes" xml:space="preserve">
          <source>|*| Static and non Static function in class :</source>
          <target state="translated">El siguiente código te explica claramente</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
