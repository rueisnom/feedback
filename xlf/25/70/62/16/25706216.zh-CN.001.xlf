<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/25706216">
    <body>
      <group id="25706216">
        <trans-unit id="957e822a66c4cd727a172ce017b976793c539ce8" translate="yes" xml:space="preserve">
          <source>&quot;Can not find &quot; means that , compiler who can't find appropriate variable, method ,class etc...if you got that error massage , first of all you want to find code line where get error massage..And then you will able to find which variable , method or class have not define before using it.After confirmation  initialize that variable ,method or class can be used for later require...Consider the following example.</source>
          <target state="translated">&quot;找不到 &quot;是指,编译器找不到合适的变量、方法、类等...........如果你得到了那个错误的按摩,首先你要找到得到错误按摩的代码行,然后你就能找到哪个变量、方法或类在使用前没有定义,确认后初始化那个变量、方法或类就可以用于以后的需求.........考虑一下下面的例子。</target>
        </trans-unit>
        <trans-unit id="24c96569d576c7ebe4d6daa7a72a0eb62c82cc0c" translate="yes" xml:space="preserve">
          <source>&quot;Oh, there's duplicated code, let's pull that common line out&quot; -&amp;gt; and there it it.</source>
          <target state="translated">&amp;ldquo;哦，有重复的代码，让我们拉出这条共同的线&amp;rdquo;-&amp;gt;到那里。</target>
        </trans-unit>
        <trans-unit id="22591b4d7720782dd59a8af35b50ede3e7da3d2d" translate="yes" xml:space="preserve">
          <source>(An appropriate correction here might be to move the &lt;code&gt;if&lt;/code&gt; statement inside the loop, or to declare &lt;code&gt;i&lt;/code&gt; before the start of the loop.)</source>
          <target state="translated">（这里的一个适当的更正可能是在循环内移动 &lt;code&gt;if&lt;/code&gt; 语句，或者在循环开始之前声明 &lt;code&gt;i&lt;/code&gt; 。）</target>
        </trans-unit>
        <trans-unit id="b21307f81bb093b4ac6cb279c8bc9bc122c8257c" translate="yes" xml:space="preserve">
          <source>0. Is there any difference between the two errors?</source>
          <target state="translated">0.这两个错误之间是否有区别?</target>
        </trans-unit>
        <trans-unit id="47af34209ff48cea459d24fa2ed61e481cac48a2" translate="yes" xml:space="preserve">
          <source>1. What does a &quot;Cannot find symbol&quot; error mean?</source>
          <target state="translated">1.&quot;无法找到符号 &quot;错误是什么意思?</target>
        </trans-unit>
        <trans-unit id="41abe9f3e5e7f4a3013322c34f35cad640e38b54" translate="yes" xml:space="preserve">
          <source>2. What can cause a &quot;Cannot find symbol&quot; error?</source>
          <target state="translated">2.什么会导致 &quot;无法找到符号 &quot;错误?</target>
        </trans-unit>
        <trans-unit id="a3d5f1d259fa656ac221c118548d3a1650e61656" translate="yes" xml:space="preserve">
          <source>3. How do I fix these errors ?</source>
          <target state="translated">3.如何修复这些错误?</target>
        </trans-unit>
        <trans-unit id="03d29f0fb82a9492b7082940ddb681f90956c8be" translate="yes" xml:space="preserve">
          <source>4.  Obscure causes</source>
          <target state="translated">4.隐晦的原因</target>
        </trans-unit>
        <trans-unit id="705579ad0a0283cb97a39777fefdeea2a947b36f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Name:&lt;/code&gt; Java 11 support
&lt;code&gt;Location:&lt;/code&gt;&lt;a href=&quot;http://download.eclipse.org/eclipse/updates/4.9-P-builds&quot;&gt;http://download.eclipse.org/eclipse/updates/4.9-P-builds&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;Name:&lt;/code&gt; Java 11支持 &lt;code&gt;Location:&lt;/code&gt; &lt;a href=&quot;http://download.eclipse.org/eclipse/updates/4.9-P-builds&quot;&gt;http&lt;/a&gt; : //download.eclipse.org/eclipse/updates/4.9-P-builds</target>
        </trans-unit>
        <trans-unit id="35fd962df9f6fdd3ed5f739417e71dee7e252180" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;This question is designed to seed a comprehensive Q&amp;amp;A about these common compilation errors in Java.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;该问题旨在对Java中的这些常见编译错误进行全面的问答。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="fa638d9de16c8b504bfea0d133cc9139b1d84792" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;An earlier build problem&lt;/strong&gt;:  It is possible that an earlier build failed in a way that gave a JAR file with missing classes.  Such a failure would typically be noticed if you were using a build tool.  However if you are getting JAR files from someone else, you are dependent on &lt;em&gt;them&lt;/em&gt; building properly, and noticing errors.  If you suspect this, use &lt;code&gt;tar -tvf&lt;/code&gt; to list the contents of the suspect JAR file.</source>
          <target state="translated">&lt;strong&gt;较早的构建问题&lt;/strong&gt; ： &lt;strong&gt;较早的构建&lt;/strong&gt;可能会失败，从而导致JAR文件缺少类。 如果使用构建工具，通常会注意到这种故障。 但是，如果您从其他人那里获取JAR文件，则取决于&lt;em&gt;它们&lt;/em&gt;是否可以正确构建并注意到错误。 如果您怀疑这一点，请使用 &lt;code&gt;tar -tvf&lt;/code&gt; 列出可疑JAR文件的内容。</target>
        </trans-unit>
        <trans-unit id="edce9f898c723ffac07d6bd424761911b7392648" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Android issues&lt;/strong&gt;: When you are programming for Android, and you have &quot;Cannot find symbol&quot; errors related to &lt;code&gt;R&lt;/code&gt;, be aware that the &lt;code&gt;R&lt;/code&gt; symbols are defined by the &lt;code&gt;context.xml&lt;/code&gt; file.  Check that your &lt;code&gt;context.xml&lt;/code&gt; file is correct and in the correct place, and that the corresponding &lt;code&gt;R&lt;/code&gt; class file has been generated / compiled.  Note that the Java symbols are case sensitive, so the corresponding XML ids are be case sensitive too.</source>
          <target state="translated">&lt;strong&gt;Android问题&lt;/strong&gt; ：在为Android编程时，您遇到与 &lt;code&gt;R&lt;/code&gt; 相关的&amp;ldquo;找不到符号&amp;rdquo;错误，请注意， &lt;code&gt;R&lt;/code&gt; 符号是由 &lt;code&gt;context.xml&lt;/code&gt; 文件定义的。 检查您的 &lt;code&gt;context.xml&lt;/code&gt; 文件是正确的并且在正确的位置，并且已经生成/编译了相应的 &lt;code&gt;R&lt;/code&gt; 类文件。 请注意，Java符号区分大小写，因此相应的XML ID也区分大小写。</target>
        </trans-unit>
        <trans-unit id="6b176345032bd686742a8ae02322d91e3c5639b7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Homoglyphs:&lt;/strong&gt;  If you use UTF-8 encoding for your source files, it is possible to have identifiers that &lt;em&gt;look&lt;/em&gt; the same, but are in fact different because they contain homoglyphs.   See &lt;a href=&quot;http://en.wikipedia.org/wiki/Homoglyph&quot;&gt;this page&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;strong&gt;同源符号：&lt;/strong&gt;如果对源文件使用UTF-8编码，则可能具有&lt;em&gt;看起来&lt;/em&gt;相同但实际上不同的标识符，因为它们包含同源符号。 有关更多信息，请参&lt;a href=&quot;http://en.wikipedia.org/wiki/Homoglyph&quot;&gt;见此页面&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="83e75582b49b35484a908057aebffc972daa0010" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;IDE issues&lt;/strong&gt;: People have reported cases where their IDE gets confused and the compiler in the IDE cannot find a class that exists ... or the reverse situation.</source>
          <target state="translated">&lt;strong&gt;IDE问题&lt;/strong&gt; ：人们已经报告了他们的IDE混乱并且IDE中的编译器找不到存在的类的情况&amp;hellip;&amp;hellip;或相反的情况。</target>
        </trans-unit>
        <trans-unit id="a4f4233fe48639690c50968e2656b9636991c170" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Incorrect dependencies&lt;/strong&gt;: If you are using an IDE or a build tool that manages the build path and project dependencies, you may have made a mistake with the dependencies; e.g. left out a dependency, or selected the wrong version.  If you are using a build tool (Ant, Maven, Gradle, etc), check the project's build file.  If you are using an IDE, check the project's build path configuration.</source>
          <target state="translated">&lt;strong&gt;不正确的依赖关系&lt;/strong&gt; ：如果您使用的是IDE或管理构建路径和项目依赖关系的构建工具，则可能是错误的依赖关系； 例如遗漏了一个依赖项，或者选择了错误的版本。 如果您使用的是构建工具（Ant，Maven，Gradle等），请检查项目的构建文件。 如果使用的是IDE，请检查项目的构建路径配置。</target>
        </trans-unit>
        <trans-unit id="3c802a0bf910d0237921a609dca2340dcc104d7d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;One more example of 'Variable is out of scope'&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&amp;ldquo;变量超出范围&amp;rdquo;的另一个示例&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b37a54e16258a393402fe558531e06822c8fbc84" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Problem:&lt;/strong&gt; I was calling a static method defined in the class of a project A from a class defined in another project B. 
I was getting the following error:</source>
          <target state="translated">&lt;strong&gt;问题：&lt;/strong&gt;我正在从另一个项目B中定义的类调用在项目A的类中定义的静态方法。出现以下错误：</target>
        </trans-unit>
        <trans-unit id="c04b2c4f9118c6a97f6ad5c50b18596c96274718" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Redefining system classes&lt;/strong&gt;: I've seen cases where the compiler complains that &lt;code&gt;substring&lt;/code&gt; is an unknown symbol in something like the following</source>
          <target state="translated">&lt;strong&gt;重新定义系统类&lt;/strong&gt; ：我已经看到编译器抱怨 &lt;code&gt;substring&lt;/code&gt; 是未知符号的情况，如下所示</target>
        </trans-unit>
        <trans-unit id="a5693a104ce44ada27aadf2c5147a6397ad56886" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;SOLVED&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;SOLVED&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8c469be5bbee3166922402f3bd4179ce812079ab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Solution:&lt;/strong&gt; I resolved this by first building the project where the method is defined then the project where the method was being called from.</source>
          <target state="translated">&lt;strong&gt;解决方案：&lt;/strong&gt;我首先通过建立定义方法的项目，然后再从其中调用方法的项目来解决此问题。</target>
        </trans-unit>
        <trans-unit id="ec7aecfd09f1db68860166a485a2a3cb10dd91f9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;You are not recompiling&lt;/strong&gt;:  It sometimes happens that new Java programmers don't understand how the Java tool chain works, or haven't implemented a repeatable &quot;build process&quot;; e.g. using an IDE, Ant, Maven, Gradle and so on.  In such a situation, the programmer can end up chasing his tail looking for an illusory error that is &lt;em&gt;actually&lt;/em&gt; caused by not recompiling the code properly, and the like ...</source>
          <target state="translated">&lt;strong&gt;您无需重新编译&lt;/strong&gt; ：有时候，新Java程序员可能不了解Java工具链的工作方式，或者没有实现可重复的&amp;ldquo;构建过程&amp;rdquo;； 例如，使用IDE，Ant，Maven，Gradle等。 在这种情况下，程序员最终可能会追尾寻找一个虚幻的错误，该错误&lt;em&gt;实际上是&lt;/em&gt;由于未正确地重新编译代码而导致的，等等。</target>
        </trans-unit>
        <trans-unit id="279e0a0c57b48964447c3c7b49cb421013744ca1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;or&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;or&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="025904cc59d8e36f743100bbfea5c4813f69e74d" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;1 - If, perchance, you &lt;em&gt;do&lt;/em&gt; see this in a runtime exception or error message, then either you have configured your IDE to run code with compilation errors, or your application is generating and compiling code .. at runtime.&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;1-如果有可能在运行时异常或错误消息中看到此错误，则说明您已将IDE配置为运行带有编译错误的代码，或者您的应用程序正在运行时生成和编译代码。&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="dc9e185ff4316777d88c20d1d17c2bab349b7001" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;2 - The three basic principles of Civil Engineering: water doesn't flow uphill, a plank is stronger on its side, and &lt;em&gt;you can't push on a string&lt;/em&gt;.&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;2-土木工程的三个基本原则：水不向上流，木板在其侧面更坚固，并且&lt;em&gt;您不能用力压绳子&lt;/em&gt; 。&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="2b114f1e5460783ca9d3a27e500849e98f0dd6e4" translate="yes" xml:space="preserve">
          <source>A &quot;Cannot find symbol&quot; error is about the identifiers.  When your code is compiled, the compiler needs to work out what each and every identifier in your code means.</source>
          <target state="translated">&quot;无法找到符号 &quot;错误是关于标识符的问题。当你的代码被编译时,编译器需要找出你代码中的每一个标识符的含义。</target>
        </trans-unit>
        <trans-unit id="0a8c1ff4650864c41869e71a03df910a8fb32f74" translate="yes" xml:space="preserve">
          <source>A &quot;Cannot find symbol&quot; error means that the compiler cannot do this.  Your code appears to be referring to something that the compiler doesn't understand.</source>
          <target state="translated">&quot;Cannot find symbol &quot;错误意味着编译器无法完成这个任务。你的代码似乎指的是编译器不理解的东西。</target>
        </trans-unit>
        <trans-unit id="2d70f166b6d73bc68283e027fbc5e342301a458e" translate="yes" xml:space="preserve">
          <source>Add (Popup window will open) -&amp;gt;</source>
          <target state="translated">添加（将打开弹出窗口）-&amp;gt;</target>
        </trans-unit>
        <trans-unit id="976c32636008508e600cca2aa3c0bcf3a53bae93" translate="yes" xml:space="preserve">
          <source>As I've seen that kind of questions a few times already, maybe one more example to what's illegal even if it might &lt;em&gt;feel&lt;/em&gt; okay.</source>
          <target state="translated">正如我已经看过几次这样的问题一样，即使可能&lt;em&gt;觉得&lt;/em&gt;没问题，也许还有另一个例子说明违法行为。</target>
        </trans-unit>
        <trans-unit id="d75efb2ddff87e39d55914682bef37a47939dc0e" translate="yes" xml:space="preserve">
          <source>As a first order, there is only one cause.  The compiler looked in all of the places where the identifier &lt;em&gt;should&lt;/em&gt; be defined, and it couldn't find the definition.  This could be caused by a number of things.  The common ones are as follows:</source>
          <target state="translated">首先，只有一个原因。 编译器查看了&lt;em&gt;应该&lt;/em&gt;定义标识符的所有位置，但找不到该定义。 这可能是由多种原因引起的。 常见的如下：</target>
        </trans-unit>
        <trans-unit id="f8aaab4fe0ff7e8c861a1355b1e09583eec96149" translate="yes" xml:space="preserve">
          <source>But you'd be wrong.</source>
          <target state="translated">但你会错了。</target>
        </trans-unit>
        <trans-unit id="fea126191af5284e4a18e5cb7ff221180f042dd1" translate="yes" xml:space="preserve">
          <source>Clean &lt;code&gt;target&lt;/code&gt; directory.</source>
          <target state="translated">清理 &lt;code&gt;target&lt;/code&gt; 目录。</target>
        </trans-unit>
        <trans-unit id="10e1a36a6e86303ee4a132c4243a7ef3f4a0f97c" translate="yes" xml:space="preserve">
          <source>Comments and whitespace.</source>
          <target state="translated">评论和空白处。</target>
        </trans-unit>
        <trans-unit id="00c5252c394597f9ca37e455c6ff334c93f1a9f0" translate="yes" xml:space="preserve">
          <source>Consider this code:</source>
          <target state="translated">考虑一下这个代码。</target>
        </trans-unit>
        <trans-unit id="03a4abd57d000d82757a47e03f729cf2f66297f0" translate="yes" xml:space="preserve">
          <source>Define a class &lt;code&gt;A&lt;/code&gt; in &lt;code&gt;src/test/java&lt;/code&gt;.</source>
          <target state="translated">在 &lt;code&gt;src/test/java&lt;/code&gt; 中定义 &lt;code&gt;A&lt;/code&gt; 类。</target>
        </trans-unit>
        <trans-unit id="c623c7b768489fab630b485d95641b4aab649d5d" translate="yes" xml:space="preserve">
          <source>Define another class &lt;code&gt;B&lt;/code&gt; in &lt;code&gt;src/main/java&lt;/code&gt; that uses class &lt;code&gt;A&lt;/code&gt;.</source>
          <target state="translated">在 &lt;code&gt;src/main/java&lt;/code&gt; 中定义另一个使用类 &lt;code&gt;A&lt;/code&gt; 的类 &lt;code&gt;B&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3c749184705363c97aa3586bcea75ae3d37ba27c" translate="yes" xml:space="preserve">
          <source>Despite the previous declaration, the &lt;code&gt;tmp&lt;/code&gt; in the &lt;code&gt;tmp(...)&lt;/code&gt; expression is erroneous.  The compiler will look for a method called &lt;code&gt;tmp&lt;/code&gt;, and won't find one.  The previously declared &lt;code&gt;tmp&lt;/code&gt; is in the namespace for variables, not the namespace for methods.</source>
          <target state="translated">尽管有先前的声明，但 &lt;code&gt;tmp(...)&lt;/code&gt; 表达式中的tmp是错误的。 编译器将寻找一种名为 &lt;code&gt;tmp&lt;/code&gt; 的方法，但找不到。 先前声明的 &lt;code&gt;tmp&lt;/code&gt; 在变量的名称空间中，而不在方法的名称空间中。</target>
        </trans-unit>
        <trans-unit id="d66f4f4483f60c774568275881b207f08a5d8c82" translate="yes" xml:space="preserve">
          <source>Don't define your dependencies that way; i.e. don't make this mistake.</source>
          <target state="translated">不要这样定义你的依赖关系;也就是说,不要犯这个错误。</target>
        </trans-unit>
        <trans-unit id="4555e90d6a07ae7f3d831a41b212be91f5264f4e" translate="yes" xml:space="preserve">
          <source>Figure out &lt;em&gt;why&lt;/em&gt; the compiler is saying that it cannot find the symbol; see above!</source>
          <target state="translated">弄清楚&lt;em&gt;为什么&lt;/em&gt;编译器说找不到符号； 看上面！</target>
        </trans-unit>
        <trans-unit id="5a40d61defc50eada77edf3e51ddbdb20651cdbf" translate="yes" xml:space="preserve">
          <source>Finally do right click on project Debug as -&amp;gt; Maven clean, Maven build steps</source>
          <target state="translated">最后，右键单击项目Debug as-&amp;gt; Maven clean，Maven构建步骤</target>
        </trans-unit>
        <trans-unit id="b67b4431d08befda8369ca08185a5fa3fc057dd1" translate="yes" xml:space="preserve">
          <source>Firstly, it is a &lt;em&gt;compilation error&lt;/em&gt;&lt;sup&gt;1&lt;/sup&gt;.  It means that &lt;em&gt;either&lt;/em&gt; there is a problem in your Java source code, &lt;em&gt;or&lt;/em&gt; there is a problem in the way that you are compiling it.</source>
          <target state="translated">首先，它是&lt;em&gt;编译错误&lt;/em&gt; &lt;sup&gt;1&lt;/sup&gt; 。 这意味着您的Java源代码有问题， &lt;em&gt;或者&lt;/em&gt;您的编译方式有问题。</target>
        </trans-unit>
        <trans-unit id="1bff2a45c132371502c189a2ec96875f148f80ce" translate="yes" xml:space="preserve">
          <source>For cases where type or instance doesn't appear to have the member you were expecting it to have:</source>
          <target state="translated">对于类型或实例不具备您所期望的成员的情况。</target>
        </trans-unit>
        <trans-unit id="0eaf6b92b18a5e06656d1c2befd33a48f148eed9" translate="yes" xml:space="preserve">
          <source>For example, Java 7 and Java 8 have different APIs, so calling a non-existent API in an older Java version would cause this error.</source>
          <target state="translated">例如,Java 7和Java 8有不同的API,所以在旧的Java版本中调用一个不存在的API会导致这个错误。</target>
        </trans-unit>
        <trans-unit id="489ed2865822e0a639076b40cdcca536a50e7856" translate="yes" xml:space="preserve">
          <source>For hints, look closer at the class name name that throws an error and the line number, example:
Compilation failure
[ERROR] \applications\xxxxx.java:[44,30] error: cannot find symbol</source>
          <target state="translated">关于提示,请仔细看一下抛出错误的类名和行号,例如。Compilation failure [ERROR]\applications\xxxxx.java:[44,30]error:cannot find symbol</target>
        </trans-unit>
        <trans-unit id="508027fb1f56d20868add276f5eef8710605430f" translate="yes" xml:space="preserve">
          <source>For identifiers in general:</source>
          <target state="translated">对于一般的标识符:</target>
        </trans-unit>
        <trans-unit id="6264ba90ffdabb3d38c94db49b185cc1b45d025f" translate="yes" xml:space="preserve">
          <source>For identifiers that should be class names:</source>
          <target state="translated">对于应该是类名的标识符。</target>
        </trans-unit>
        <trans-unit id="d534eeffe880e9590bd41400cbacea70fd22e32d" translate="yes" xml:space="preserve">
          <source>For identifiers that should be method or field names:</source>
          <target state="translated">对于应该是方法或字段名称的标识符:</target>
        </trans-unit>
        <trans-unit id="a3246fd98c3edd208eada5e78b5fac9b65cdabb9" translate="yes" xml:space="preserve">
          <source>For identifiers that should refer to variables:</source>
          <target state="translated">对于应指变量的标识符:</target>
        </trans-unit>
        <trans-unit id="c81ac520ed90fc88097496e38469d529bfda23aa" translate="yes" xml:space="preserve">
          <source>Generally speaking, you start out by figuring out what &lt;em&gt;caused&lt;/em&gt; the compilation error.</source>
          <target state="translated">一般来说，首先要弄清楚是什么&lt;em&gt;导致&lt;/em&gt;了编译错误。</target>
        </trans-unit>
        <trans-unit id="e02ff48e182d307e3931c974c1774675df7fef1f" translate="yes" xml:space="preserve">
          <source>Here are a couple of cases where the &quot;Cannot find symbol&quot; is seemingly inexplicable ... until you look closer.</source>
          <target state="translated">下面是几个看似莫名其妙的 &quot;找不到符号 &quot;的情况...........直到你走近一看,才发现。</target>
        </trans-unit>
        <trans-unit id="7bb9305314b1da2ada3fcc9889b1fdf9e1b90014" translate="yes" xml:space="preserve">
          <source>Here is an example of how incorrect variable scoping can lead to a &quot;Cannot find symbol&quot; error:</source>
          <target state="translated">下面是一个例子,说明不正确的变量范围界定会导致 &quot;无法找到符号 &quot;错误。</target>
        </trans-unit>
        <trans-unit id="d9116bbb7526fea528102bbe4d7e6692b3eca94b" translate="yes" xml:space="preserve">
          <source>Here is an example that causes puzzlement where a typo leads to a seemingly inexplicable &quot;Cannot find symbol&quot; error:</source>
          <target state="translated">这里有一个例子让人疑惑不解,在这个例子中,一个错别字导致了一个看似莫名其妙的 &quot;找不到符号 &quot;的错误。</target>
        </trans-unit>
        <trans-unit id="38c44cdc5b4151c3b9d79cc6caec319a7d932ed7" translate="yes" xml:space="preserve">
          <source>Here is another example of &quot;Cannot find symbol&quot; error that is caused by a typo.</source>
          <target state="translated">下面是另一个由错别字引起的 &quot;找不到符号 &quot;错误的例子。</target>
        </trans-unit>
        <trans-unit id="411bea257ffa9a029ed8e85054f7b481d41d9a05" translate="yes" xml:space="preserve">
          <source>How does the programmer go about fixing them?</source>
          <target state="translated">程序员该如何去解决?</target>
        </trans-unit>
        <trans-unit id="a2b4add9394740694e235ef9369737b77324982b" translate="yes" xml:space="preserve">
          <source>I could add a declaration for &lt;code&gt;j&lt;/code&gt;&lt;em&gt;before&lt;/em&gt; the inner &lt;code&gt;for&lt;/code&gt; loop, or the outer &lt;code&gt;for&lt;/code&gt; loop - possibly correct.</source>
          <target state="translated">我可以在内部 &lt;code&gt;for&lt;/code&gt; 循环或外部 &lt;code&gt;for&lt;/code&gt; 循环&lt;em&gt;之前&lt;/em&gt;添加 &lt;code&gt;j&lt;/code&gt; 的声明-可能是正确的。</target>
        </trans-unit>
        <trans-unit id="b574f210ec1b9e0b834b37182250ad9e29535de3" translate="yes" xml:space="preserve">
          <source>I could change &lt;code&gt;j&lt;/code&gt; to &lt;code&gt;i&lt;/code&gt; in the inner &lt;code&gt;for&lt;/code&gt; loop - probably wrong!</source>
          <target state="translated">我可以在内部 &lt;code&gt;for&lt;/code&gt; 循环中将 &lt;code&gt;j&lt;/code&gt; 更改为 &lt;code&gt;i&lt;/code&gt; -可能错了！</target>
        </trans-unit>
        <trans-unit id="0c5cb638ac507461fc92e195933f3b988ffd2a85" translate="yes" xml:space="preserve">
          <source>I could change the inner &lt;code&gt;for&lt;/code&gt; to &lt;code&gt;for (int j = 1; j &amp;lt; 10; j++)&lt;/code&gt; - probably correct.</source>
          <target state="translated">我可以将 &lt;code&gt;for&lt;/code&gt; 的内部变量更改 &lt;code&gt;for (int j = 1; j &amp;lt; 10; j++)&lt;/code&gt; -可能是正确的。</target>
        </trans-unit>
        <trans-unit id="c664327bcb301c3bfaa2fa3f71294453f347c7a6" translate="yes" xml:space="preserve">
          <source>I too was getting this error. (for which I googled and I was directed to this page)</source>
          <target state="translated">我也得到这个错误。(为此,我上网搜索了一下,结果被引导到了这个页面)</target>
        </trans-unit>
        <trans-unit id="d318b2f5104ca4be4178cbec3a7dd716b5f623ec" translate="yes" xml:space="preserve">
          <source>I'll create a demo class and print a name...</source>
          <target state="translated">我会创建一个演示类并打印一个名字......</target>
        </trans-unit>
        <trans-unit id="a4aa95d612769c53f68101c2a4c905d8b8bcf31d" translate="yes" xml:space="preserve">
          <source>Identifiers: like &lt;code&gt;Reader&lt;/code&gt;, &lt;code&gt;i&lt;/code&gt;, &lt;code&gt;toString&lt;/code&gt;, &lt;code&gt;processEquibalancedElephants&lt;/code&gt;, and so on.</source>
          <target state="translated">标识符：如 &lt;code&gt;Reader&lt;/code&gt; ， &lt;code&gt;i&lt;/code&gt; ， &lt;code&gt;toString&lt;/code&gt; ， &lt;code&gt;processEquibalancedElephants&lt;/code&gt; 等。</target>
        </trans-unit>
        <trans-unit id="2ed04476eb06f51638e06c308e7b3b7f06e657c5" translate="yes" xml:space="preserve">
          <source>Identify which symbol that the error message is talking about.</source>
          <target state="translated">辨别出错误信息说的是哪个符号。</target>
        </trans-unit>
        <trans-unit id="d4b0225765fb3c89ea9f8d8462004e11a606ea1c" translate="yes" xml:space="preserve">
          <source>If eclipse Java build path is mapped to 7, 8 and in Project pom.xml Maven properties java.version is mentioned higher Java version(9,10,11, etc..,) than 7,8 you need to update in pom.xml file.</source>
          <target state="translated">如果eclipse的Java构建路径被映射到7、8,并且在Project pom.xml Maven属性中提到java.version比7、8更高的Java版本(9、10、11等),你需要在pom.xml文件中更新。</target>
        </trans-unit>
        <trans-unit id="3d8126f41737295a83d2045434a773bb08bb0309" translate="yes" xml:space="preserve">
          <source>If you are using IntelliJ</source>
          <target state="translated">如果您正在使用 IntelliJ</target>
        </trans-unit>
        <trans-unit id="01191d176211cc9cdeebc7bb6fc5b591a0bb0454" translate="yes" xml:space="preserve">
          <source>If you're getting this error in the build somewhere else, while your IDE says everything is perfectly fine, then check that you are using the same Java versions in both places.</source>
          <target state="translated">如果你在其他地方得到这个错误,而你的IDE却说一切正常,那么检查一下你在两个地方使用的Java版本是否相同。</target>
        </trans-unit>
        <trans-unit id="b4099add2e8deea09e90c019f0c17de2b69ce78e" translate="yes" xml:space="preserve">
          <source>In Eclipse if Java is mapped to Java version 11 and in pom.xml it is mapped to Java version 8. Update Eclipse support to Java 11 by go through below steps in eclipse IDE
Help -&amp;gt; Install New Software -&amp;gt;</source>
          <target state="translated">在Eclipse中，如果Java映射到Java版本11，在pom.xml中，它映射到Java版本8，请通过执行Eclipse IDE帮助-&amp;gt;安装新软件-&amp;gt;中的以下步骤来将Eclipse支持更新为Java 11。</target>
        </trans-unit>
        <trans-unit id="3707462d39f48e8f83d240929ef600d83c92bf96" translate="yes" xml:space="preserve">
          <source>In my case - I had to perform below operations:</source>
          <target state="translated">在我的情况下--我不得不执行下面的操作。</target>
        </trans-unit>
        <trans-unit id="279ed8fd3d42d71d6f60443a94cd0286001a4068" translate="yes" xml:space="preserve">
          <source>In the example I came across, the programmer had actually left out an operator.  What he meant to write was this:</source>
          <target state="translated">在我接触到的例子中,程序员实际上遗漏了一个运算器。他的意思是这样写的。</target>
        </trans-unit>
        <trans-unit id="fd4f868a9a9dc8ed33d186b40b683e819975d4a7" translate="yes" xml:space="preserve">
          <source>It turned out that the programmer had created their own version of &lt;code&gt;String&lt;/code&gt; and that his version of the class didn't define a &lt;code&gt;substring&lt;/code&gt; methods.</source>
          <target state="translated">事实证明，程序员创建了自己的 &lt;code&gt;String&lt;/code&gt; 版本，而他的类版本未定义 &lt;code&gt;substring&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="c3369b2c0b08c13aa5b2e2973d0f82561c0dcd99" translate="yes" xml:space="preserve">
          <source>It's especially bad if you thought you did something good. I've seen this kind of error after &quot;optimizing&quot; code like this:</source>
          <target state="translated">如果你以为自己做了什么好事,那就特别糟糕了。我见过这样的代码 &quot;优化 &quot;后出现这样的错误。</target>
        </trans-unit>
        <trans-unit id="96de2cd3373fca464752545482b01f898f3b2422" translate="yes" xml:space="preserve">
          <source>Java has no &lt;code&gt;free()&lt;/code&gt; or &lt;code&gt;delete&lt;/code&gt; operators, so it has to rely on tracking variable scope to find out when variables are no longer used (together with references to these variables of cause).</source>
          <target state="translated">Java没有 &lt;code&gt;free()&lt;/code&gt; 或 &lt;code&gt;delete&lt;/code&gt; 运算符，因此它必须依靠跟踪变量范围来确定何时不再使用变量（以及对这些cause变量的引用）。</target>
        </trans-unit>
        <trans-unit id="d5cf694131cfabd3f90b48c64a0948a32d0ac80d" translate="yes" xml:space="preserve">
          <source>Keywords: like &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;class&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, and so on.</source>
          <target state="translated">关键字：像 &lt;code&gt;true&lt;/code&gt; ， &lt;code&gt;false&lt;/code&gt; ， &lt;code&gt;class&lt;/code&gt; ， &lt;code&gt;while&lt;/code&gt; 等等。</target>
        </trans-unit>
        <trans-unit id="cf800e149fcda7f72650093e176be369e11e2411" translate="yes" xml:space="preserve">
          <source>Lesson: Don't define your own classes with the same names as common library classes!</source>
          <target state="translated">教训。不要把自己的班级定义成和普通库里的班级一样的名字!</target>
        </trans-unit>
        <trans-unit id="0c7944f98cdb5632c8df9726b7c06e89dc7cd3ba" translate="yes" xml:space="preserve">
          <source>Literals: like &lt;code&gt;42&lt;/code&gt; and &lt;code&gt;'X'&lt;/code&gt; and &lt;code&gt;&quot;Hi mum!&quot;&lt;/code&gt;.</source>
          <target state="translated">文字：例如 &lt;code&gt;42&lt;/code&gt; 和 &lt;code&gt;'X'&lt;/code&gt; 以及 &lt;code&gt;&quot;Hi mum!&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="322617019d38997630b02d475d33cb50cc1fd5ea" translate="yes" xml:space="preserve">
          <source>Look at the line in the file indicated by the compilation error message.</source>
          <target state="translated">看一下文件中的编译错误信息所表示的行。</target>
        </trans-unit>
        <trans-unit id="3f28f5aebc97bc7dc51c89b5c60fc4b886366293" translate="yes" xml:space="preserve">
          <source>Move &lt;code&gt;context.xml&lt;/code&gt; file from &lt;code&gt;src/java/package&lt;/code&gt; to the &lt;code&gt;resource&lt;/code&gt; directory (IntelliJ
IDE)</source>
          <target state="translated">将 &lt;code&gt;context.xml&lt;/code&gt; 文件从 &lt;code&gt;src/java/package&lt;/code&gt; 移到 &lt;code&gt;resource&lt;/code&gt; 目录（IntelliJ IDE）</target>
        </trans-unit>
        <trans-unit id="a101ed00baa59642409c5b221aeeee229dacccb6" translate="yes" xml:space="preserve">
          <source>Not really. &quot;Cannot find symbol&quot; and &quot;Cannot resolve symbol&quot; mean the same thing.  Some Java compilers use one phrase, and some the other one.</source>
          <target state="translated">不是真的。&quot;无法找到符号 &quot;和 &quot;无法解析符号 &quot;的意思是一样的。有些Java编译器使用一个词组,有些则是另一个词组。</target>
        </trans-unit>
        <trans-unit id="e682efe4ad58b7666e4a8c49fb873688aa94123d" translate="yes" xml:space="preserve">
          <source>Note that not every &quot;correction&quot; is correct. Consider this:</source>
          <target state="translated">注意,不是每一个 &quot;修正 &quot;都是正确的。考虑到这一点。</target>
        </trans-unit>
        <trans-unit id="36294ef436272a4b5d6f51acc508e02446f3c39e" translate="yes" xml:space="preserve">
          <source>Now look at the new output...</source>
          <target state="translated">现在看看新的输出.....</target>
        </trans-unit>
        <trans-unit id="ea758a54fb265bfd8c5bdc6b6c9abea5c055fc53" translate="yes" xml:space="preserve">
          <source>Now look at the result..</source>
          <target state="translated">现在看看结果.....</target>
        </trans-unit>
        <trans-unit id="f579c523960af1aec824c6fdc57af6d4abd76a1f" translate="yes" xml:space="preserve">
          <source>OR</source>
          <target state="translated">OR</target>
        </trans-unit>
        <trans-unit id="6fc668dd460be20b331a80fbe3b9b422a9f44840" translate="yes" xml:space="preserve">
          <source>Ok Successfully solved that error..At the same time , if you could get &quot;can not find method &quot; or &quot;can not find class&quot; something , At first,define a class or method and after use that..</source>
          <target state="translated">好吧,成功解决了这个错误,同时,如果你能得到 &quot;找不到方法 &quot;或 &quot;找不到类 &quot;的东西,首先,定义一个类或方法,然后用这个类或方法。</target>
        </trans-unit>
        <trans-unit id="a4fe2ac2e0f9bafcbcc63ef034d3e2b5ca534b71" translate="yes" xml:space="preserve">
          <source>One other cause is unsupported method of for java version say jdk7 vs 8.
Check your %JAVA_HOME%</source>
          <target state="translated">还有一个原因是不支持java版本的方法,比如jdk7 vs 8。</target>
        </trans-unit>
        <trans-unit id="115515e66b9f7e9d2d2d86abfa3a31ab847208ff" translate="yes" xml:space="preserve">
          <source>One way to get this error in Eclipse :</source>
          <target state="translated">一种方法是在Eclipse .NET中得到这个错误。</target>
        </trans-unit>
        <trans-unit id="0a09c8dcd5f58792f08b0cc65bc25b03bd62171e" translate="yes" xml:space="preserve">
          <source>Operators and other non-alphanumeric tokens: like &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;=&lt;/code&gt;, &lt;code&gt;{&lt;/code&gt;, and so on.</source>
          <target state="translated">运算符和其他非字母数字标记：如 &lt;code&gt;+&lt;/code&gt; ， &lt;code&gt;=&lt;/code&gt; ， &lt;code&gt;{&lt;/code&gt; 等。</target>
        </trans-unit>
        <trans-unit id="de3e7889b064a0064cc55612d55ec50f0847c14a" translate="yes" xml:space="preserve">
          <source>Other symbol errors on Android are likely to be due to previously mention reasons; e.g. missing or incorrect dependencies, incorrect package names, method or fields that don't exist in a particular API version, spelling / typing errors, and so on.</source>
          <target state="translated">Android上的其他符号错误很可能是由于前面提到的原因造成的,例如:依赖关系的缺失或不正确,包名不正确,方法或字段不存在于特定的API版本中,拼写错误等。</target>
        </trans-unit>
        <trans-unit id="fe4343952b64af4161002ce5ee028942a632b88c" translate="yes" xml:space="preserve">
          <source>Paste following link &lt;a href=&quot;http://download.eclipse.org/eclipse/updates/4.9-P-builds&quot;&gt;http://download.eclipse.org/eclipse/updates/4.9-P-builds&lt;/a&gt; at &lt;strong&gt;&lt;em&gt;Work With&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">在&lt;strong&gt;&lt;em&gt;工作时&lt;/em&gt;&lt;/strong&gt;粘贴以下链接&lt;a href=&quot;http://download.eclipse.org/eclipse/updates/4.9-P-builds&quot;&gt;http://download.eclipse.org/eclipse/updates/4.9-P-builds&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="57ba20500e8433587e3e15fadb2e06671f30ea8d" translate="yes" xml:space="preserve">
          <source>Perhaps the variable declaration is out of scope at the point you tried to use it.  (See example below)</source>
          <target state="translated">也许在你试图使用变量声明的时候,变量声明已经超出了范围。(见下面的例子)</target>
        </trans-unit>
        <trans-unit id="1320bf437a9c63a9f893bd4c962327e989878bd0" translate="yes" xml:space="preserve">
          <source>Perhaps you are mistakenly operating on an array rather than array element; e.g.</source>
          <target state="translated">也许你错误地操作了一个数组而不是数组元素,例如</target>
        </trans-unit>
        <trans-unit id="6aee976e340fbce67d71c60ea5215628b25acd69" translate="yes" xml:space="preserve">
          <source>Perhaps you are shadowing a static or instance variable.</source>
          <target state="translated">也许你的影子是一个静态或实例变量。</target>
        </trans-unit>
        <trans-unit id="46ff260697563ca568093a999da1ef5b12b44dc9" translate="yes" xml:space="preserve">
          <source>Perhaps you are trying to refer to a method or field that does not exist (i.e. has not been declared) in the type you are using; e.g. &lt;code&gt;&quot;someString&quot;.push()&lt;/code&gt;&lt;sup&gt;2&lt;/sup&gt;.</source>
          <target state="translated">也许您正在尝试引用所使用的类型中不存在（即尚未声明）的方法或字段； 例如 &lt;code&gt;&quot;someString&quot;.push()&lt;/code&gt; &lt;sup&gt;2&lt;/sup&gt; 。</target>
        </trans-unit>
        <trans-unit id="6a82a94ccdb7dbb7f268d442c7762df7c3f1f9eb" translate="yes" xml:space="preserve">
          <source>Perhaps you are trying to refer to an inherited method or field that wasn't declared in the parent / ancestor classes or interfaces.</source>
          <target state="translated">也许你要引用的是一个继承的方法或字段,而这个方法或字段并没有在父类或接口中声明。</target>
        </trans-unit>
        <trans-unit id="fdd7793f0ad12f111730e75e9d3fc8ea8c20d96d" translate="yes" xml:space="preserve">
          <source>Perhaps you are trying to use a method as a field, or vice versa; e.g. &lt;code&gt;&quot;someString&quot;.length&lt;/code&gt; or &lt;code&gt;someArray.length()&lt;/code&gt;.</source>
          <target state="translated">也许您正在尝试将方法用作字段，反之亦然； 例如 &lt;code&gt;&quot;someString&quot;.length&lt;/code&gt; 或 &lt;code&gt;someArray.length()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="12b0aca497ae9b4b3decc5ec061d41321b10b293" translate="yes" xml:space="preserve">
          <source>Perhaps you are trying to use something that was declared &quot;somewhere else&quot;; i.e. in a different context to where you have implicitly told the compiler to look.  (A different class?  A different scope?  A different package?  A different code-base?)</source>
          <target state="translated">也许你是想使用在 &quot;其他地方 &quot;声明的东西;也就是说,在不同的上下文中,你已经隐含地告诉编译器要找的东西。(不同的类?不同的类?不同的包?不同的代码库?)</target>
        </trans-unit>
        <trans-unit id="ef4cfdc9fe68d1619053569b2ca4a9ca6dd56e30" translate="yes" xml:space="preserve">
          <source>Perhaps you are using (compiling against) the wrong version of an API.</source>
          <target state="translated">也许你使用的是(针对)错误的API版本。</target>
        </trans-unit>
        <trans-unit id="ac650b2e5cd256fe4a76abdd9c783ac3a3188aba" translate="yes" xml:space="preserve">
          <source>Perhaps you forgot a &lt;code&gt;new&lt;/code&gt; as in:</source>
          <target state="translated">也许您忘记了以下 &lt;code&gt;new&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="0945cb62dcdac85c50e370f1aa2e90fd780795a3" translate="yes" xml:space="preserve">
          <source>Perhaps you forgot to cast your object to an appropriate subclass.</source>
          <target state="translated">也许你忘了把你的对象投给一个合适的子类。</target>
        </trans-unit>
        <trans-unit id="a83c9dc2e88fae89091fd1b60fbe89b4764d5d76" translate="yes" xml:space="preserve">
          <source>Perhaps you forgot to declare the variable.</source>
          <target state="translated">也许你忘了声明变量了。</target>
        </trans-unit>
        <trans-unit id="b4c11cb6a68260241e8f9ed0d217b264d3387939" translate="yes" xml:space="preserve">
          <source>Perhaps you forgot to import the class.</source>
          <target state="translated">也许你忘了导入类。</target>
        </trans-unit>
        <trans-unit id="7300f07d366229b926caa084b75f0d5b827d3738" translate="yes" xml:space="preserve">
          <source>Perhaps you got the case wrong; i.e. &lt;code&gt;stringBuilder&lt;/code&gt; instead of &lt;code&gt;StringBuilder&lt;/code&gt;.  All Java identifiers are case sensitive.</source>
          <target state="translated">也许你错了。 即 &lt;code&gt;stringBuilder&lt;/code&gt; 而不是 &lt;code&gt;StringBuilder&lt;/code&gt; 。 所有Java标识符均区分大小写。</target>
        </trans-unit>
        <trans-unit id="c55c00cf5f6b9ca455d9ff01d1a74ff9200a61df" translate="yes" xml:space="preserve">
          <source>Perhaps you have declared a nested class or a generic parameter that &lt;em&gt;shadows&lt;/em&gt; the type you were meaning to use.</source>
          <target state="translated">也许您已经声明了一个嵌套类或泛型参数，该类&lt;em&gt;掩盖&lt;/em&gt;了您打算使用的类型。</target>
        </trans-unit>
        <trans-unit id="8d832011eca37e28c618cae4601c9f67af94c90d" translate="yes" xml:space="preserve">
          <source>Perhaps you imported the wrong type; e.g. due to IDE completion or auto-correction.</source>
          <target state="translated">也许你导入了错误的类型;例如,由于IDE完成或自动校正的原因。</target>
        </trans-unit>
        <trans-unit id="3457de5ed68272b30bc1cee83d5c61dada01c081" translate="yes" xml:space="preserve">
          <source>Perhaps you spelled the name incorrectly; i.e. &lt;code&gt;StringBiulder&lt;/code&gt; instead of &lt;code&gt;StringBuilder&lt;/code&gt;.  Java cannot and will not attempt to compensate for bad spelling or typing errors.</source>
          <target state="translated">也许您拼写的名字不正确； 即 &lt;code&gt;StringBiulder&lt;/code&gt; 而不是 &lt;code&gt;StringBuilder&lt;/code&gt; 。 Java不能也不会尝试弥补拼写错误或输入错误。</target>
        </trans-unit>
        <trans-unit id="02d939dd2166f0aba900adb5ef93ce2e07880bd4" translate="yes" xml:space="preserve">
          <source>Perhaps you used &quot;star&quot; imports, but the class isn't defined in any of the packages that you imported.</source>
          <target state="translated">也许你使用的是 &quot;星型 &quot;导入,但在你导入的任何一个包中都没有定义这个类。</target>
        </trans-unit>
        <trans-unit id="1c880a383e9414b359a6bcd231c4c09c5c3e676e" translate="yes" xml:space="preserve">
          <source>Perhaps you used underscores inappropriately; i.e. &lt;code&gt;mystring&lt;/code&gt; and &lt;code&gt;my_string&lt;/code&gt; are different.  (If you stick to the Java style rules, you will be largely protected from this mistake ...)</source>
          <target state="translated">也许您不恰当地使用了下划线； 即 &lt;code&gt;mystring&lt;/code&gt; 和 &lt;code&gt;my_string&lt;/code&gt; 不同。 （如果您坚持使用Java样式规则，则将在很大程度上避免出现此错误...）</target>
        </trans-unit>
        <trans-unit id="53cc0754cd241aca6b6d84a3002595e2de09c7d7" translate="yes" xml:space="preserve">
          <source>Please explain the following about &quot;Cannot find symbol&quot; and &quot;Cannot resolve symbol&quot; errors:</source>
          <target state="translated">关于 &quot;无法找到符号 &quot;和 &quot;无法解决符号 &quot;的错误,请解释如下。</target>
        </trans-unit>
        <trans-unit id="e40dd27e85365d42501c3e5410ee1479ca80e733" translate="yes" xml:space="preserve">
          <source>Regularly build your codebase using Maven so that you pick up this mistake early.  One way to do that is to use a CI server.</source>
          <target state="translated">定期使用 Maven 构建你的代码库,这样你就可以及早发现这个错误。其中一个方法是使用CI服务器。</target>
        </trans-unit>
        <trans-unit id="888cbf38a75566abc056d55345f7f674edef10cb" translate="yes" xml:space="preserve">
          <source>Result : Eclipse will compile the code, but maven will give &quot;Cannot find symbol&quot;.</source>
          <target state="translated">结果:Eclipse会编译代码,但maven会给出 &quot;Cannot find symbol&quot;。</target>
        </trans-unit>
        <trans-unit id="f16e5da091aafb61a1ef145b9dd6df98c57ab4d7" translate="yes" xml:space="preserve">
          <source>Select &lt;strong&gt;Build&lt;/strong&gt;-&amp;gt;&lt;strong&gt;Rebuild Project&lt;/strong&gt; will solve it</source>
          <target state="translated">选择&lt;strong&gt;Build-&lt;/strong&gt; &amp;gt; &lt;strong&gt;Rebuild Project&lt;/strong&gt;将解决它</target>
        </trans-unit>
        <trans-unit id="7f0f422fa628ed3844254b3d368c3e78493dfc13" translate="yes" xml:space="preserve">
          <source>Solution :</source>
          <target state="translated">解决方案 :</target>
        </trans-unit>
        <trans-unit id="bcc27e1cb4ffe2cc4a2aa9ef163e5c6dfc44a236" translate="yes" xml:space="preserve">
          <source>Solution: Again compile it and then run test. For me it worked this way.</source>
          <target state="translated">解决办法。再次编译,然后运行测试。对我来说,它是这样工作的。</target>
        </trans-unit>
        <trans-unit id="6f240bcd6e2eb2162dcdd0d74d48224a6f6d5145" translate="yes" xml:space="preserve">
          <source>Suppose that the compiler says &quot;Cannot find symbol&quot; for &lt;code&gt;j&lt;/code&gt;.  There are many ways I could &quot;fix&quot; that:</source>
          <target state="translated">假设编译器为 &lt;code&gt;j&lt;/code&gt; 说&amp;ldquo;找不到符号&amp;rdquo;。 我可以通过多种方式&amp;ldquo;修复&amp;rdquo;该问题：</target>
        </trans-unit>
        <trans-unit id="e05af58fe572f58df5a2e87cc1750911eadbba9e" translate="yes" xml:space="preserve">
          <source>That error says, &quot;variable name can not find&quot;..Defining and initializing value for 'name' variable  can be abolished that error..Actually like this,</source>
          <target state="translated">这个错误提示 &quot;变量名称无法找到&quot;...定义和初始化'name'变量的值,可以取消这个错误。</target>
        </trans-unit>
        <trans-unit id="921b2d0459276f34152b34350cafb64c7e569d68" translate="yes" xml:space="preserve">
          <source>That's invalid code. Because neither of the variables named &lt;code&gt;message&lt;/code&gt; is visible outside of their respective scope - which would be the surrounding brackets &lt;code&gt;{}&lt;/code&gt; in this case.</source>
          <target state="translated">那是无效的代码。 因为没有两个名为 &lt;code&gt;message&lt;/code&gt; 的变量在它们各自的作用域之外可见-在这种情况下，将用括号 &lt;code&gt;{}&lt;/code&gt; 括起来。</target>
        </trans-unit>
        <trans-unit id="8a0a3e47242a89ac0ce11d2c73461bae9df0ac76" translate="yes" xml:space="preserve">
          <source>The  most common way to deal with this kind of scope-trouble would be to pre-assign the else-values to the variable names in the outside scope and then reassign in if:</source>
          <target state="translated">处理这种作用域问题的最常见的方法是将 else-值预分配给外部作用域中的变量名,然后在if中重新分配。</target>
        </trans-unit>
        <trans-unit id="142d9901807f8cfa96b29d25c5341d4e76e2f44b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{ ... }&lt;/code&gt; block is NOT the body of the &lt;code&gt;for&lt;/code&gt; loop, and therefore the previous declaration of &lt;code&gt;i&lt;/code&gt; in the &lt;code&gt;for&lt;/code&gt; statement is &lt;em&gt;out of scope&lt;/em&gt; in the block.</source>
          <target state="translated">&lt;code&gt;{ ... }&lt;/code&gt; 块不是 &lt;code&gt;for&lt;/code&gt; 循环的主体，因此 &lt;code&gt;for&lt;/code&gt; 语句中 &lt;code&gt;i&lt;/code&gt; 的先前声明&lt;em&gt;超出了&lt;/em&gt;该块&lt;em&gt;的范围&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="0f0ae74a91d8b9265d539eaa39911af2672b3656" translate="yes" xml:space="preserve">
          <source>The class being referenced was in another project and that dependency was not added to the Gradle build file of my project. So I added the dependency using</source>
          <target state="translated">被引用的类是在另一个项目中,而这个依赖关系没有被添加到我的项目的Gradle构建文件中。所以我使用了以下方法添加了这个依赖关系</target>
        </trans-unit>
        <trans-unit id="6848cc18f6b73237f2c46b3b819fef73c4ecf170" translate="yes" xml:space="preserve">
          <source>The point is that you &lt;em&gt;need&lt;/em&gt; to understand what your code is trying to do in order to find the right fix.</source>
          <target state="translated">关键是您&lt;em&gt;需要&lt;/em&gt;了解您的代码正在尝试做什么才能找到正确的修复程序。</target>
        </trans-unit>
        <trans-unit id="50ea0a272ac648921ff545f6cd9e88eb0c0e23d0" translate="yes" xml:space="preserve">
          <source>The problem is often a combination of the above.  For example, maybe you &quot;star&quot; imported &lt;code&gt;java.io.*&lt;/code&gt; and then tried to use the &lt;code&gt;Files&lt;/code&gt; class ... which is in &lt;code&gt;java.nio&lt;/code&gt; not &lt;code&gt;java.io&lt;/code&gt;.  Or maybe you meant to write &lt;code&gt;File&lt;/code&gt; ... which &lt;em&gt;is&lt;/em&gt; a class in &lt;code&gt;java.io&lt;/code&gt;.</source>
          <target state="translated">问题通常是上述情况的组合。 例如，也许您&amp;ldquo;星标&amp;rdquo;了导入的 &lt;code&gt;java.io.*&lt;/code&gt; ，然后尝试使用 &lt;code&gt;Files&lt;/code&gt; 类...，它在 &lt;code&gt;java.nio&lt;/code&gt; 中而不是 &lt;code&gt;java.io&lt;/code&gt; 中 。 也许您打算编写 &lt;code&gt;File&lt;/code&gt; ...，这&lt;em&gt;是&lt;/em&gt; &lt;code&gt;java.io&lt;/code&gt; 中的一个类。</target>
        </trans-unit>
        <trans-unit id="23430d7ccb9972344f087656883e74790288bbd6" translate="yes" xml:space="preserve">
          <source>The problem is the sneaky semicolon ( &lt;code&gt;;&lt;/code&gt; ) before the &lt;code&gt;{&lt;/code&gt;.  The Java language syntax defines a semicolon in that context to be an &lt;em&gt;empty statement&lt;/em&gt;.  The empty statement then becomes the body of the &lt;code&gt;for&lt;/code&gt; loop.  So that code actually means this:</source>
          <target state="translated">问题在于 &lt;code&gt;{&lt;/code&gt; 之前的冒号（ &lt;code&gt;;&lt;/code&gt; ）。 Java语言语法在该上下文中将分号定义为&lt;em&gt;空语句&lt;/em&gt; 。 空语句然后成为 &lt;code&gt;for&lt;/code&gt; 循环的主体。 因此该代码实际上意味着：</target>
        </trans-unit>
        <trans-unit id="964b4b2847be390ff11fa20a20389485904aaf25" translate="yes" xml:space="preserve">
          <source>Then you &lt;em&gt;think&lt;/em&gt; about what your code is supposed to be saying.  Then finally you work out what correction you need to make to your source code to do what you want.</source>
          <target state="translated">然后，您&lt;em&gt;考虑&lt;/em&gt;一下您的代码应该说什么。 最后，您确定需要对源代码进行哪些更正以执行所需的操作。</target>
        </trans-unit>
        <trans-unit id="8fbba0448a4a615ae5d97b9e2d16540fc9e93dd8" translate="yes" xml:space="preserve">
          <source>There are some other more obscure causes too ... which I will deal with below.</source>
          <target state="translated">还有其他一些更隐晦的原因...........下面我将讨论一下。</target>
        </trans-unit>
        <trans-unit id="07b3699aba68a830c1995f93285e9d7c1b599ab2" translate="yes" xml:space="preserve">
          <source>There can be various scenarios as people have mentioned above. A couple of things which have helped me resolve this.</source>
          <target state="translated">如上文中大家提到的各种情况,可以有各种情况。有几件事情帮我解决了这个问题。</target>
        </trans-unit>
        <trans-unit id="910b46255ff8e604c5beaaff16f2dec42cf1bade" translate="yes" xml:space="preserve">
          <source>There is another reason why the compiler might not find a symbol if you are compiling from the command line.  You might simply have forgotten to compile or recompile some other class.  For example, if you have classes &lt;code&gt;Foo&lt;/code&gt; and &lt;code&gt;Bar&lt;/code&gt; where &lt;code&gt;Foo&lt;/code&gt; uses &lt;code&gt;Bar&lt;/code&gt;.  If you have never compiled &lt;code&gt;Bar&lt;/code&gt; and you run &lt;code&gt;javac Foo.java&lt;/code&gt;, you are liable to find that the compiler can't find the symbol &lt;code&gt;Bar&lt;/code&gt;.  The simple answer is to compile &lt;code&gt;Foo&lt;/code&gt; and &lt;code&gt;Bar&lt;/code&gt; together; e.g. &lt;code&gt;javac Foo.java Bar.java&lt;/code&gt; or &lt;code&gt;javac *.java&lt;/code&gt;.  Or better still use a Java build tool; e.g. Ant, Maven, Gradle and so on.</source>
          <target state="translated">如果从命令行进行编译，则编译器可能找不到符号的另一个原因。 您可能只是忘记了编译或重新编译其他类。 例如，如果您有 &lt;code&gt;Foo&lt;/code&gt; 和 &lt;code&gt;Bar&lt;/code&gt; 类，其中 &lt;code&gt;Foo&lt;/code&gt; 使用 &lt;code&gt;Bar&lt;/code&gt; 。 如果您从未编译过 &lt;code&gt;Bar&lt;/code&gt; 并且运行了 &lt;code&gt;javac Foo.java&lt;/code&gt; ，则很可能会发现编译器找不到 &lt;code&gt;Bar&lt;/code&gt; 的符号。 简单的答案是将 &lt;code&gt;Foo&lt;/code&gt; 和 &lt;code&gt;Bar&lt;/code&gt; 一起编译。 例如 &lt;code&gt;javac Foo.java Bar.java&lt;/code&gt; 或 &lt;code&gt;javac *.java&lt;/code&gt; 。 或者最好还是使用Java构建工具； 例如Ant，Maven，Gradle等。</target>
        </trans-unit>
        <trans-unit id="f20dad4ddd9d0a0d2e853fd9b15c3aa9f2c83c67" translate="yes" xml:space="preserve">
          <source>This could be an IDE bug.  For instance @Joel Costigliola describes a scenario where Eclipse does not handle a Maven &quot;test&quot; tree correctly: &lt;a href=&quot;https://stackoverflow.com/a/37207223/139985&quot;&gt;&lt;strong&gt;see this answer&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">这可能是一个IDE错误。 例如，@ Joel Costigliola描述了Eclipse无法正确处理Maven&amp;ldquo;测试&amp;rdquo;树的情况： &lt;a href=&quot;https://stackoverflow.com/a/37207223/139985&quot;&gt;&lt;strong&gt;请参见以下答案&lt;/strong&gt;&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="2c02e35ce6f8c08d39a4eaefd079ff6e8e253dc3" translate="yes" xml:space="preserve">
          <source>This could happen if the IDE has been configured with the wrong JDK version.</source>
          <target state="translated">如果IDE配置了错误的JDK版本,可能会出现这种情况。</target>
        </trans-unit>
        <trans-unit id="bbbf5cadfff61e0873aeca6ad0ad9bee801aee81" translate="yes" xml:space="preserve">
          <source>This could happen if the IDE's caches get out of sync with the file system.  There are IDE specific ways to fix that.</source>
          <target state="translated">如果IDE的缓存与文件系统不同步,可能会出现这种情况。有IDE特定的方法可以解决这个问题。</target>
        </trans-unit>
        <trans-unit id="b01aafb35ab303a4d06337ae777e7a4e74e5c697" translate="yes" xml:space="preserve">
          <source>This will give a &quot;Cannot find symbol&quot; error for &lt;code&gt;i&lt;/code&gt; in the &lt;code&gt;if&lt;/code&gt; statement.  Though we previously declared &lt;code&gt;i&lt;/code&gt;, that declaration is only &lt;em&gt;in scope&lt;/em&gt; for the &lt;code&gt;for&lt;/code&gt; statement and its body.  The reference to &lt;code&gt;i&lt;/code&gt; in the &lt;code&gt;if&lt;/code&gt; statement &lt;em&gt;cannot see&lt;/em&gt; that declaration of &lt;code&gt;i&lt;/code&gt;.  It is &lt;em&gt;out of scope&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; 在if语句中，这将为我提供&amp;ldquo;找不到符号&amp;rdquo;错误。 尽管我们之前曾声明过 &lt;code&gt;i&lt;/code&gt; ，但该声明仅&lt;em&gt;在&lt;/em&gt; &lt;code&gt;for&lt;/code&gt; 语句及其主体的&lt;em&gt;范围内&lt;/em&gt; 。 在 &lt;code&gt;if&lt;/code&gt; 语句中对 &lt;code&gt;i&lt;/code&gt; 的引用&lt;em&gt;看不到&lt;/em&gt; &lt;code&gt;i&lt;/code&gt; 的声明。 它&lt;em&gt;超出范围&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="7e4c0f9d8e48bbc624e38c18014fa58020f5e9c0" translate="yes" xml:space="preserve">
          <source>This will give you a compilation error in the &lt;code&gt;println&lt;/code&gt; call saying that &lt;code&gt;i&lt;/code&gt; cannot be found.  But (I hear you say) I did declare it!</source>
          <target state="translated">这将在 &lt;code&gt;println&lt;/code&gt; 调用中给您一个编译错误，提示找不到我。 但是（我听到你说）我确实宣布了！</target>
        </trans-unit>
        <trans-unit id="b5ccecd55643c9ced3a50fb5f8f792ef974dcb2c" translate="yes" xml:space="preserve">
          <source>Underlying cause : Eclipse is using a combined build path for the main and test trees.  Unfortunately, it does not support using different build paths for different parts of an Eclipse project, which is what Maven requires.</source>
          <target state="translated">基本原因:Eclipse使用了主树和测试树的组合构建路径。不幸的是,它不支持对Eclipse项目的不同部分使用不同的构建路径,而这正是Maven所要求的。</target>
        </trans-unit>
        <trans-unit id="97afba8bad2290ed282ea6751ac60ea24d61f892" translate="yes" xml:space="preserve">
          <source>What does a “Cannot find symbol” or “Cannot resolve symbol” error mean</source>
          <target state="translated">&quot;无法找到符号 &quot;或 &quot;无法解析符号 &quot;错误是什么意思?</target>
        </trans-unit>
        <trans-unit id="5b2f493251efca62fc6a5c38c710e6fd686f0203" translate="yes" xml:space="preserve">
          <source>What does they mean?</source>
          <target state="translated">他们是什么意思?</target>
        </trans-unit>
        <trans-unit id="ec76a3c85720057360af6aeac69e22a0af9ba31f" translate="yes" xml:space="preserve">
          <source>What things can cause them?</source>
          <target state="translated">哪些事情会导致他们?</target>
        </trans-unit>
        <trans-unit id="8fa189b574b1f680fd1791244f734d9b433b58e2" translate="yes" xml:space="preserve">
          <source>You can avoid this by restricting yourself to ASCII or Latin-1 as the source file encoding, and using Java &lt;code&gt;\uxxxx&lt;/code&gt; escapes for other characters.</source>
          <target state="translated">通过将自己限制为ASCII或Latin-1作为源文件编码，并对其他字符使用Java &lt;code&gt;\uxxxx&lt;/code&gt; 转义，可以避免这种情况。</target>
        </trans-unit>
        <trans-unit id="5fbf64e54e9888bb7006f2741d492ad1a8fecdc3" translate="yes" xml:space="preserve">
          <source>You might say: &quot;But a variable named message is defined either way - so message &lt;em&gt;is&lt;/em&gt; defined after the &lt;code&gt;if&lt;/code&gt;&quot;.</source>
          <target state="translated">您可能会说：&amp;ldquo;但是以任何一种方式都定义了一个名为message的变量-因此message &lt;em&gt;是&lt;/em&gt;在 &lt;code&gt;if&lt;/code&gt; 后面定义的。</target>
        </trans-unit>
        <trans-unit id="301196cc561379b0dee95ceb62bac48de41efde9" translate="yes" xml:space="preserve">
          <source>You'll also get this error if you forget a &lt;code&gt;new&lt;/code&gt;:</source>
          <target state="translated">如果您忘记了一个 &lt;code&gt;new&lt;/code&gt; 也会得到这个错误：</target>
        </trans-unit>
        <trans-unit id="8a79906051f046557755cfac4f362ca1b99f878e" translate="yes" xml:space="preserve">
          <source>Your Java source code consists of the following things:</source>
          <target state="translated">你的Java源码包括以下内容。</target>
        </trans-unit>
        <trans-unit id="14b8a4ae1130c94635e900e4514a5d8e307392cf" translate="yes" xml:space="preserve">
          <source>and it worked. HTH!</source>
          <target state="translated">它的工作。HTH!</target>
        </trans-unit>
        <trans-unit id="cc72a00bf5f82a31e19586f8d5648eeb9609f807" translate="yes" xml:space="preserve">
          <source>and so on.</source>
          <target state="translated">诸如此类。</target>
        </trans-unit>
        <trans-unit id="c1219714543094deb1318e6c632a04eb1c699c1b" translate="yes" xml:space="preserve">
          <source>because the call without the &lt;code&gt;new&lt;/code&gt; keyword will try and look for a (local) method called &lt;code&gt;String&lt;/code&gt; without arguments - and that method signature is likely not defined.</source>
          <target state="translated">因为不带 &lt;code&gt;new&lt;/code&gt; 关键字的调用将尝试查找不带参数的名为 &lt;code&gt;String&lt;/code&gt; 的（本地）方法-该方法签名可能未定义。</target>
        </trans-unit>
        <trans-unit id="ce2eac679bc6f9f09c415d64a16ec2883ac8cf95" translate="yes" xml:space="preserve">
          <source>then update Java version in Maven properties of &lt;strong&gt;pom.xml&lt;/strong&gt; file as below</source>
          <target state="translated">然后如下所示更新&lt;strong&gt;pom.xml&lt;/strong&gt;文件的Maven属性中的Java版本</target>
        </trans-unit>
        <trans-unit id="a8032f8450ec41f406da73828d654efe884bfb75" translate="yes" xml:space="preserve">
          <source>versus</source>
          <target state="translated">versus</target>
        </trans-unit>
        <trans-unit id="bc793ddb89e7eeb5e8595ea1fd8a12af55ec917a" translate="yes" xml:space="preserve">
          <source>you compiled your code using maven compile and then used maven test to run it worked fine. Now if you changed something in your code and then without compiling you are running it, you will get this error.</source>
          <target state="translated">你用maven编译了你的代码,然后用maven测试来运行,效果很好。现在,如果你在代码中修改了一些东西,然后在没有编译的情况下运行,你会得到这个错误。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
