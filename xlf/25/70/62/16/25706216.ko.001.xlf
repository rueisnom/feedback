<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://stackoverflow.com/questions/25706216">
    <body>
      <group id="25706216">
        <trans-unit id="957e822a66c4cd727a172ce017b976793c539ce8" translate="yes" xml:space="preserve">
          <source>&quot;Can not find &quot; means that , compiler who can't find appropriate variable, method ,class etc...if you got that error massage , first of all you want to find code line where get error massage..And then you will able to find which variable , method or class have not define before using it.After confirmation  initialize that variable ,method or class can be used for later require...Consider the following example.</source>
          <target state="translated">&quot;찾을 수 없음&quot;은 적절한 변수, 메소드, 클래스 등을 찾을 수없는 컴파일러를 의미합니다. 오류 마사지를 받으면 먼저 오류 마사지를받는 코드 줄을 찾으십시오. 사용하기 전에 정의하지 않은 변수, 메소드 또는 클래스를 찾을 수 있습니다. 확인 후 해당 변수, 메소드 또는 클래스를 초기화하여 나중에 요구할 수 있습니다 ... 다음 예제를 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="24c96569d576c7ebe4d6daa7a72a0eb62c82cc0c" translate="yes" xml:space="preserve">
          <source>&quot;Oh, there's duplicated code, let's pull that common line out&quot; -&amp;gt; and there it it.</source>
          <target state="translated">&quot;오, 중복 된 코드가 있습니다. 공통 라인을 뽑아 봅시다&quot;-&amp;gt; 그리고 거기에 있습니다.</target>
        </trans-unit>
        <trans-unit id="22591b4d7720782dd59a8af35b50ede3e7da3d2d" translate="yes" xml:space="preserve">
          <source>(An appropriate correction here might be to move the &lt;code&gt;if&lt;/code&gt; statement inside the loop, or to declare &lt;code&gt;i&lt;/code&gt; before the start of the loop.)</source>
          <target state="translated">(여기서 루프 내에서 &lt;code&gt;if&lt;/code&gt; 문을 이동하거나 루프 시작 전에 &lt;code&gt;i&lt;/code&gt; 를 선언하는 것이 적절할 수 있습니다.)</target>
        </trans-unit>
        <trans-unit id="b21307f81bb093b4ac6cb279c8bc9bc122c8257c" translate="yes" xml:space="preserve">
          <source>0. Is there any difference between the two errors?</source>
          <target state="translated">0. 두 오류간에 차이가 있습니까?</target>
        </trans-unit>
        <trans-unit id="47af34209ff48cea459d24fa2ed61e481cac48a2" translate="yes" xml:space="preserve">
          <source>1. What does a &quot;Cannot find symbol&quot; error mean?</source>
          <target state="translated">1. &quot;기호를 찾을 수 없음&quot;오류는 무엇을 의미합니까?</target>
        </trans-unit>
        <trans-unit id="41abe9f3e5e7f4a3013322c34f35cad640e38b54" translate="yes" xml:space="preserve">
          <source>2. What can cause a &quot;Cannot find symbol&quot; error?</source>
          <target state="translated">2. &quot;기호를 찾을 수 없음&quot;오류의 원인은 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="a3d5f1d259fa656ac221c118548d3a1650e61656" translate="yes" xml:space="preserve">
          <source>3. How do I fix these errors ?</source>
          <target state="translated">3.이 오류를 어떻게 해결합니까?</target>
        </trans-unit>
        <trans-unit id="03d29f0fb82a9492b7082940ddb681f90956c8be" translate="yes" xml:space="preserve">
          <source>4.  Obscure causes</source>
          <target state="translated">4. 모호한 원인</target>
        </trans-unit>
        <trans-unit id="705579ad0a0283cb97a39777fefdeea2a947b36f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Name:&lt;/code&gt; Java 11 support
&lt;code&gt;Location:&lt;/code&gt;&lt;a href=&quot;http://download.eclipse.org/eclipse/updates/4.9-P-builds&quot;&gt;http://download.eclipse.org/eclipse/updates/4.9-P-builds&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;Name:&lt;/code&gt; Java 11 지원 &lt;code&gt;Location:&lt;/code&gt; &lt;a href=&quot;http://download.eclipse.org/eclipse/updates/4.9-P-builds&quot;&gt;http://download.eclipse.org/eclipse/updates/4.9-P-builds&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="35fd962df9f6fdd3ed5f739417e71dee7e252180" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;This question is designed to seed a comprehensive Q&amp;amp;A about these common compilation errors in Java.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;이 질문은 Java에서 이러한 일반적인 컴파일 오류에 대한 포괄적 인 Q &amp;amp; A를 제공하기 위해 고안되었습니다.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="fa638d9de16c8b504bfea0d133cc9139b1d84792" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;An earlier build problem&lt;/strong&gt;:  It is possible that an earlier build failed in a way that gave a JAR file with missing classes.  Such a failure would typically be noticed if you were using a build tool.  However if you are getting JAR files from someone else, you are dependent on &lt;em&gt;them&lt;/em&gt; building properly, and noticing errors.  If you suspect this, use &lt;code&gt;tar -tvf&lt;/code&gt; to list the contents of the suspect JAR file.</source>
          <target state="translated">&lt;strong&gt;이전 빌드 문제&lt;/strong&gt; : 클래스가 누락 된 JAR 파일을 제공하는 방식으로 이전 빌드가 실패했을 수 있습니다. 빌드 도구를 사용하는 경우 일반적으로 이러한 실패가 나타납니다. 그러나 다른 사람으로부터 JAR ​​파일을 얻는 경우 파일을 올바르게 빌드하고 오류를 확인 &lt;em&gt;하는&lt;/em&gt; 데 의존합니다. 의심되는 경우 &lt;code&gt;tar -tvf&lt;/code&gt; 를 사용하여 의심스러운 JAR 파일의 내용을 나열하십시오.</target>
        </trans-unit>
        <trans-unit id="edce9f898c723ffac07d6bd424761911b7392648" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Android issues&lt;/strong&gt;: When you are programming for Android, and you have &quot;Cannot find symbol&quot; errors related to &lt;code&gt;R&lt;/code&gt;, be aware that the &lt;code&gt;R&lt;/code&gt; symbols are defined by the &lt;code&gt;context.xml&lt;/code&gt; file.  Check that your &lt;code&gt;context.xml&lt;/code&gt; file is correct and in the correct place, and that the corresponding &lt;code&gt;R&lt;/code&gt; class file has been generated / compiled.  Note that the Java symbols are case sensitive, so the corresponding XML ids are be case sensitive too.</source>
          <target state="translated">&lt;strong&gt;Android 문제&lt;/strong&gt; : &lt;strong&gt;Android 용&lt;/strong&gt; 으로 프로그래밍하고 &lt;code&gt;R&lt;/code&gt; 과 관련된 &quot;기호를 찾을 수 없습니다&quot;오류가 발생하면 &lt;code&gt;R&lt;/code&gt; 기호는 &lt;code&gt;context.xml&lt;/code&gt; 파일에 의해 정의됩니다. &lt;code&gt;context.xml&lt;/code&gt; 파일이 올 바르고 올바른지, 해당 &lt;code&gt;R&lt;/code&gt; 클래스 파일이 생성 / 컴파일되었는지 확인하십시오. Java 기호는 대소 문자를 구분하므로 해당 XML ID도 대소 문자를 구분합니다.</target>
        </trans-unit>
        <trans-unit id="6b176345032bd686742a8ae02322d91e3c5639b7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Homoglyphs:&lt;/strong&gt;  If you use UTF-8 encoding for your source files, it is possible to have identifiers that &lt;em&gt;look&lt;/em&gt; the same, but are in fact different because they contain homoglyphs.   See &lt;a href=&quot;http://en.wikipedia.org/wiki/Homoglyph&quot;&gt;this page&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;strong&gt;상형 문자 :&lt;/strong&gt; 소스 파일에 UTF-8 인코딩을 사용하는 경우 식별자는 동일하지만 상형 문자를 포함하므로 실제로 다른 식별자를 가질 수 있습니다. 자세한 내용은 &lt;a href=&quot;http://en.wikipedia.org/wiki/Homoglyph&quot;&gt;이 페이지&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="83e75582b49b35484a908057aebffc972daa0010" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;IDE issues&lt;/strong&gt;: People have reported cases where their IDE gets confused and the compiler in the IDE cannot find a class that exists ... or the reverse situation.</source>
          <target state="translated">&lt;strong&gt;IDE 문제&lt;/strong&gt; : 사람들은 IDE가 혼란스러워 IDE의 컴파일러가 존재하는 클래스를 찾을 수없는 경우 또는 반대 상황을보고했습니다.</target>
        </trans-unit>
        <trans-unit id="a4f4233fe48639690c50968e2656b9636991c170" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Incorrect dependencies&lt;/strong&gt;: If you are using an IDE or a build tool that manages the build path and project dependencies, you may have made a mistake with the dependencies; e.g. left out a dependency, or selected the wrong version.  If you are using a build tool (Ant, Maven, Gradle, etc), check the project's build file.  If you are using an IDE, check the project's build path configuration.</source>
          <target state="translated">&lt;strong&gt;잘못된 종속성&lt;/strong&gt; : 빌드 경로 및 프로젝트 종속성을 관리하는 IDE 또는 빌드 도구를 사용하는 경우 종속성에 실수가있을 수 있습니다. 예를 들어 종속성을 제거하거나 잘못된 버전을 선택했습니다. 빌드 도구 (Ant, Maven, Gradle 등)를 사용하는 경우 프로젝트의 빌드 파일을 확인하십시오. IDE를 사용하는 경우 프로젝트의 빌드 경로 구성을 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="3c802a0bf910d0237921a609dca2340dcc104d7d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;One more example of 'Variable is out of scope'&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;'가변이 범위를 벗어남'의 또 다른 예&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b37a54e16258a393402fe558531e06822c8fbc84" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Problem:&lt;/strong&gt; I was calling a static method defined in the class of a project A from a class defined in another project B. 
I was getting the following error:</source>
          <target state="translated">&lt;strong&gt;문제점 :&lt;/strong&gt; 다른 프로젝트 B에 정의 된 클래스에서 프로젝트 A의 클래스에 정의 된 정적 메소드를 호출했습니다. 다음 오류가 발생했습니다.</target>
        </trans-unit>
        <trans-unit id="c04b2c4f9118c6a97f6ad5c50b18596c96274718" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Redefining system classes&lt;/strong&gt;: I've seen cases where the compiler complains that &lt;code&gt;substring&lt;/code&gt; is an unknown symbol in something like the following</source>
          <target state="translated">&lt;strong&gt;시스템 클래스 재정의&lt;/strong&gt; : 컴파일러에서 &lt;code&gt;substring&lt;/code&gt; 이 다음과 같은 알 수없는 기호라고 불평하는 경우를 보았습니다.</target>
        </trans-unit>
        <trans-unit id="a5693a104ce44ada27aadf2c5147a6397ad56886" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;SOLVED&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;SOLVED&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8c469be5bbee3166922402f3bd4179ce812079ab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Solution:&lt;/strong&gt; I resolved this by first building the project where the method is defined then the project where the method was being called from.</source>
          <target state="translated">&lt;strong&gt;솔루션 :&lt;/strong&gt; 먼저 메소드가 정의 된 프로젝트를 빌드 한 다음 메소드가 호출 된 프로젝트를 빌드하여이 문제를 해결했습니다.</target>
        </trans-unit>
        <trans-unit id="ec7aecfd09f1db68860166a485a2a3cb10dd91f9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;You are not recompiling&lt;/strong&gt;:  It sometimes happens that new Java programmers don't understand how the Java tool chain works, or haven't implemented a repeatable &quot;build process&quot;; e.g. using an IDE, Ant, Maven, Gradle and so on.  In such a situation, the programmer can end up chasing his tail looking for an illusory error that is &lt;em&gt;actually&lt;/em&gt; caused by not recompiling the code properly, and the like ...</source>
          <target state="translated">&lt;strong&gt;재 컴파일&lt;/strong&gt; 하지 않는 경우 : 새로운 Java 프로그래머가 Java 툴 체인의 작동 방식을 이해하지 못하거나 반복 가능한 &quot;빌드 프로세스&quot;를 구현하지 않은 경우가 있습니다. 예를 들어 IDE, Ant, Maven, Gradle 등을 사용합니다. 이러한 상황에서 프로그래머는 꼬리를 쫓아 결국 코드를 ​​올바르게 다시 컴파일하지 않아서 발생하는 환상적인 오류를 찾을 수 있습니다 ...</target>
        </trans-unit>
        <trans-unit id="279e0a0c57b48964447c3c7b49cb421013744ca1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;or&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;or&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="025904cc59d8e36f743100bbfea5c4813f69e74d" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;1 - If, perchance, you &lt;em&gt;do&lt;/em&gt; see this in a runtime exception or error message, then either you have configured your IDE to run code with compilation errors, or your application is generating and compiling code .. at runtime.&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;1-퍼런 스가 런타임 예외 또는 오류 메시지에 표시되면 컴파일 오류로 코드를 실행하도록 IDE를 구성했거나 런타임시 응용 프로그램이 코드를 생성 및 컴파일하는 중입니다.&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="dc9e185ff4316777d88c20d1d17c2bab349b7001" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;2 - The three basic principles of Civil Engineering: water doesn't flow uphill, a plank is stronger on its side, and &lt;em&gt;you can't push on a string&lt;/em&gt;.&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;2-토목 공학의 세 가지 기본 원칙 : 물이 오르막으로 흐르지 않고 판자가 더 강해져 &lt;em&gt;끈을 밀 수 없습니다&lt;/em&gt; .&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="2b114f1e5460783ca9d3a27e500849e98f0dd6e4" translate="yes" xml:space="preserve">
          <source>A &quot;Cannot find symbol&quot; error is about the identifiers.  When your code is compiled, the compiler needs to work out what each and every identifier in your code means.</source>
          <target state="translated">&quot;심볼을 찾을 수 없습니다&quot;오류는 식별자에 관한 것입니다. 코드가 컴파일되면 컴파일러는 코드의 각 식별자가 의미하는 바를 해결해야합니다.</target>
        </trans-unit>
        <trans-unit id="0a8c1ff4650864c41869e71a03df910a8fb32f74" translate="yes" xml:space="preserve">
          <source>A &quot;Cannot find symbol&quot; error means that the compiler cannot do this.  Your code appears to be referring to something that the compiler doesn't understand.</source>
          <target state="translated">&quot;기호를 찾을 수 없음&quot;오류는 컴파일러가이를 수행 할 수 없음을 의미합니다. 코드가 컴파일러가 이해하지 못하는 것을 나타내는 것으로 보입니다.</target>
        </trans-unit>
        <trans-unit id="2d70f166b6d73bc68283e027fbc5e342301a458e" translate="yes" xml:space="preserve">
          <source>Add (Popup window will open) -&amp;gt;</source>
          <target state="translated">추가 (팝업 창이 열립니다)-&amp;gt;</target>
        </trans-unit>
        <trans-unit id="976c32636008508e600cca2aa3c0bcf3a53bae93" translate="yes" xml:space="preserve">
          <source>As I've seen that kind of questions a few times already, maybe one more example to what's illegal even if it might &lt;em&gt;feel&lt;/em&gt; okay.</source>
          <target state="translated">내가 몇 번이나 그런 종류의 질문을 보았 듯이, 그것이 괜찮다고 &lt;em&gt;느낄&lt;/em&gt; 지라도 불법적 인 것에 대한 또 다른 예일 &lt;em&gt;것&lt;/em&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="d75efb2ddff87e39d55914682bef37a47939dc0e" translate="yes" xml:space="preserve">
          <source>As a first order, there is only one cause.  The compiler looked in all of the places where the identifier &lt;em&gt;should&lt;/em&gt; be defined, and it couldn't find the definition.  This could be caused by a number of things.  The common ones are as follows:</source>
          <target state="translated">첫 번째 주문은 원인이 하나뿐입니다. 컴파일러는 식별자 &lt;em&gt;를&lt;/em&gt; 정의 &lt;em&gt;해야하는&lt;/em&gt; 모든 위치를 조사했으며 정의를 찾을 수 없습니다. 여러 가지가 원인 일 수 있습니다. 일반적인 것은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f8aaab4fe0ff7e8c861a1355b1e09583eec96149" translate="yes" xml:space="preserve">
          <source>But you'd be wrong.</source>
          <target state="translated">그러나 당신은 틀릴 것입니다.</target>
        </trans-unit>
        <trans-unit id="fea126191af5284e4a18e5cb7ff221180f042dd1" translate="yes" xml:space="preserve">
          <source>Clean &lt;code&gt;target&lt;/code&gt; directory.</source>
          <target state="translated">&lt;code&gt;target&lt;/code&gt; 디렉토리를 정리하십시오.</target>
        </trans-unit>
        <trans-unit id="10e1a36a6e86303ee4a132c4243a7ef3f4a0f97c" translate="yes" xml:space="preserve">
          <source>Comments and whitespace.</source>
          <target state="translated">주석과 공백.</target>
        </trans-unit>
        <trans-unit id="00c5252c394597f9ca37e455c6ff334c93f1a9f0" translate="yes" xml:space="preserve">
          <source>Consider this code:</source>
          <target state="translated">이 코드를 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="03a4abd57d000d82757a47e03f729cf2f66297f0" translate="yes" xml:space="preserve">
          <source>Define a class &lt;code&gt;A&lt;/code&gt; in &lt;code&gt;src/test/java&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;src/test/java&lt;/code&gt; 에서 클래스 &lt;code&gt;A&lt;/code&gt; 를 정의하십시오.</target>
        </trans-unit>
        <trans-unit id="c623c7b768489fab630b485d95641b4aab649d5d" translate="yes" xml:space="preserve">
          <source>Define another class &lt;code&gt;B&lt;/code&gt; in &lt;code&gt;src/main/java&lt;/code&gt; that uses class &lt;code&gt;A&lt;/code&gt;.</source>
          <target state="translated">클래스 &lt;code&gt;A&lt;/code&gt; 를 사용하는 다른 클래스 &lt;code&gt;B&lt;/code&gt; 를 &lt;code&gt;src/main/java&lt;/code&gt; 에 정의하십시오.</target>
        </trans-unit>
        <trans-unit id="3c749184705363c97aa3586bcea75ae3d37ba27c" translate="yes" xml:space="preserve">
          <source>Despite the previous declaration, the &lt;code&gt;tmp&lt;/code&gt; in the &lt;code&gt;tmp(...)&lt;/code&gt; expression is erroneous.  The compiler will look for a method called &lt;code&gt;tmp&lt;/code&gt;, and won't find one.  The previously declared &lt;code&gt;tmp&lt;/code&gt; is in the namespace for variables, not the namespace for methods.</source>
          <target state="translated">이전 선언에도 불구하고 &lt;code&gt;tmp(...)&lt;/code&gt; 식의 tmp 가 잘못되었습니다. 컴파일러는 &lt;code&gt;tmp&lt;/code&gt; 라는 메소드를 찾고 찾지 않습니다. 이전에 선언 된 &lt;code&gt;tmp&lt;/code&gt; 는 메서드의 네임 스페이스가 아니라 변수의 네임 스페이스에 있습니다.</target>
        </trans-unit>
        <trans-unit id="d66f4f4483f60c774568275881b207f08a5d8c82" translate="yes" xml:space="preserve">
          <source>Don't define your dependencies that way; i.e. don't make this mistake.</source>
          <target state="translated">그런 식으로 의존성을 정의하지 마십시오. 즉,이 실수를하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="4555e90d6a07ae7f3d831a41b212be91f5264f4e" translate="yes" xml:space="preserve">
          <source>Figure out &lt;em&gt;why&lt;/em&gt; the compiler is saying that it cannot find the symbol; see above!</source>
          <target state="translated">컴파일러가 심볼을 찾을 수 없다고 말하는 &lt;em&gt;이유&lt;/em&gt; 를 파악하십시오. 위 참조!</target>
        </trans-unit>
        <trans-unit id="5a40d61defc50eada77edf3e51ddbdb20651cdbf" translate="yes" xml:space="preserve">
          <source>Finally do right click on project Debug as -&amp;gt; Maven clean, Maven build steps</source>
          <target state="translated">마지막으로 프로젝트 디버그를 마우스 오른쪽 버튼으로 클릭하십시오-&amp;gt; Maven clean, Maven 빌드 단계</target>
        </trans-unit>
        <trans-unit id="b67b4431d08befda8369ca08185a5fa3fc057dd1" translate="yes" xml:space="preserve">
          <source>Firstly, it is a &lt;em&gt;compilation error&lt;/em&gt;&lt;sup&gt;1&lt;/sup&gt;.  It means that &lt;em&gt;either&lt;/em&gt; there is a problem in your Java source code, &lt;em&gt;or&lt;/em&gt; there is a problem in the way that you are compiling it.</source>
          <target state="translated">먼저 &lt;em&gt;컴파일 오류&lt;/em&gt; &lt;sup&gt;1&lt;/sup&gt; 입니다. Java 소스 코드에 문제가 &lt;em&gt;있거나&lt;/em&gt; 컴파일하는 데 문제가 있음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="1bff2a45c132371502c189a2ec96875f148f80ce" translate="yes" xml:space="preserve">
          <source>For cases where type or instance doesn't appear to have the member you were expecting it to have:</source>
          <target state="translated">유형 또는 인스턴스에 예상 한 멤버가없는 것으로 보이는 경우 :</target>
        </trans-unit>
        <trans-unit id="0eaf6b92b18a5e06656d1c2befd33a48f148eed9" translate="yes" xml:space="preserve">
          <source>For example, Java 7 and Java 8 have different APIs, so calling a non-existent API in an older Java version would cause this error.</source>
          <target state="translated">예를 들어, Java 7과 Java 8의 API는 서로 다르므로 이전 Java 버전에서 존재하지 않는 API를 호출하면이 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="489ed2865822e0a639076b40cdcca536a50e7856" translate="yes" xml:space="preserve">
          <source>For hints, look closer at the class name name that throws an error and the line number, example:
Compilation failure
[ERROR] \applications\xxxxx.java:[44,30] error: cannot find symbol</source>
          <target state="translated">힌트를 보려면 오류가 발생하는 클래스 이름 이름과 줄 번호를 자세히 살펴보십시오. 예 : 컴파일 실패 [ERROR] \ applications \ xxxxx.java : [44,30] 오류 : 기호를 찾을 수 없습니다</target>
        </trans-unit>
        <trans-unit id="508027fb1f56d20868add276f5eef8710605430f" translate="yes" xml:space="preserve">
          <source>For identifiers in general:</source>
          <target state="translated">일반적으로 식별자의 경우 :</target>
        </trans-unit>
        <trans-unit id="6264ba90ffdabb3d38c94db49b185cc1b45d025f" translate="yes" xml:space="preserve">
          <source>For identifiers that should be class names:</source>
          <target state="translated">클래스 이름이어야하는 식별자의 경우 :</target>
        </trans-unit>
        <trans-unit id="d534eeffe880e9590bd41400cbacea70fd22e32d" translate="yes" xml:space="preserve">
          <source>For identifiers that should be method or field names:</source>
          <target state="translated">메소드 또는 필드 이름이어야하는 식별자의 경우 :</target>
        </trans-unit>
        <trans-unit id="a3246fd98c3edd208eada5e78b5fac9b65cdabb9" translate="yes" xml:space="preserve">
          <source>For identifiers that should refer to variables:</source>
          <target state="translated">변수를 참조해야하는 식별자 :</target>
        </trans-unit>
        <trans-unit id="c81ac520ed90fc88097496e38469d529bfda23aa" translate="yes" xml:space="preserve">
          <source>Generally speaking, you start out by figuring out what &lt;em&gt;caused&lt;/em&gt; the compilation error.</source>
          <target state="translated">일반적으로 컴파일 오류의 &lt;em&gt;원인&lt;/em&gt; 을 파악하여 시작합니다.</target>
        </trans-unit>
        <trans-unit id="e02ff48e182d307e3931c974c1774675df7fef1f" translate="yes" xml:space="preserve">
          <source>Here are a couple of cases where the &quot;Cannot find symbol&quot; is seemingly inexplicable ... until you look closer.</source>
          <target state="translated">다음은 &quot;심볼을 찾을 수 없음&quot;이 더 이상 보이지 않을 때까지 설명 할 수없는 몇 가지 경우입니다.</target>
        </trans-unit>
        <trans-unit id="7bb9305314b1da2ada3fcc9889b1fdf9e1b90014" translate="yes" xml:space="preserve">
          <source>Here is an example of how incorrect variable scoping can lead to a &quot;Cannot find symbol&quot; error:</source>
          <target state="translated">다음은 잘못된 변수 범위 지정으로 인해 &quot;기호를 찾을 수 없음&quot;오류가 발생하는 예입니다.</target>
        </trans-unit>
        <trans-unit id="d9116bbb7526fea528102bbe4d7e6692b3eca94b" translate="yes" xml:space="preserve">
          <source>Here is an example that causes puzzlement where a typo leads to a seemingly inexplicable &quot;Cannot find symbol&quot; error:</source>
          <target state="translated">다음은 오타가 설명 할 수없는 &quot;기호를 찾을 수 없음&quot;오류로 이어지는 당황스러운 예입니다.</target>
        </trans-unit>
        <trans-unit id="38c44cdc5b4151c3b9d79cc6caec319a7d932ed7" translate="yes" xml:space="preserve">
          <source>Here is another example of &quot;Cannot find symbol&quot; error that is caused by a typo.</source>
          <target state="translated">다음은 오타로 인한 &quot;기호를 찾을 수 없음&quot;오류의 다른 예입니다.</target>
        </trans-unit>
        <trans-unit id="411bea257ffa9a029ed8e85054f7b481d41d9a05" translate="yes" xml:space="preserve">
          <source>How does the programmer go about fixing them?</source>
          <target state="translated">프로그래머는 그것들을 어떻게 고치나요?</target>
        </trans-unit>
        <trans-unit id="a2b4add9394740694e235ef9369737b77324982b" translate="yes" xml:space="preserve">
          <source>I could add a declaration for &lt;code&gt;j&lt;/code&gt;&lt;em&gt;before&lt;/em&gt; the inner &lt;code&gt;for&lt;/code&gt; loop, or the outer &lt;code&gt;for&lt;/code&gt; loop - possibly correct.</source>
          <target state="translated">내부 &lt;code&gt;for&lt;/code&gt; 루프 또는 외부 &lt;code&gt;for&lt;/code&gt; 루프 &lt;em&gt;앞에&lt;/em&gt; &lt;code&gt;j&lt;/code&gt; 에 대한 선언을 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b574f210ec1b9e0b834b37182250ad9e29535de3" translate="yes" xml:space="preserve">
          <source>I could change &lt;code&gt;j&lt;/code&gt; to &lt;code&gt;i&lt;/code&gt; in the inner &lt;code&gt;for&lt;/code&gt; loop - probably wrong!</source>
          <target state="translated">내부 &lt;code&gt;for&lt;/code&gt; 루프에서 &lt;code&gt;j&lt;/code&gt; 를 &lt;code&gt;i&lt;/code&gt; 로 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0c5cb638ac507461fc92e195933f3b988ffd2a85" translate="yes" xml:space="preserve">
          <source>I could change the inner &lt;code&gt;for&lt;/code&gt; to &lt;code&gt;for (int j = 1; j &amp;lt; 10; j++)&lt;/code&gt; - probably correct.</source>
          <target state="translated">내부를 &lt;code&gt;for (int j = 1; j &amp;lt; 10; j++)&lt;/code&gt; 바꿀 수 있습니다. 아마 맞습니다.</target>
        </trans-unit>
        <trans-unit id="c664327bcb301c3bfaa2fa3f71294453f347c7a6" translate="yes" xml:space="preserve">
          <source>I too was getting this error. (for which I googled and I was directed to this page)</source>
          <target state="translated">나도이 오류가 발생했습니다. (내가 Google에 접속하여이 페이지로 연결됨)</target>
        </trans-unit>
        <trans-unit id="d318b2f5104ca4be4178cbec3a7dd716b5f623ec" translate="yes" xml:space="preserve">
          <source>I'll create a demo class and print a name...</source>
          <target state="translated">데모 클래스를 만들고 이름을 인쇄하겠습니다.</target>
        </trans-unit>
        <trans-unit id="a4aa95d612769c53f68101c2a4c905d8b8bcf31d" translate="yes" xml:space="preserve">
          <source>Identifiers: like &lt;code&gt;Reader&lt;/code&gt;, &lt;code&gt;i&lt;/code&gt;, &lt;code&gt;toString&lt;/code&gt;, &lt;code&gt;processEquibalancedElephants&lt;/code&gt;, and so on.</source>
          <target state="translated">식별자 : &lt;code&gt;Reader&lt;/code&gt; , &lt;code&gt;i&lt;/code&gt; , &lt;code&gt;toString&lt;/code&gt; , &lt;code&gt;processEquibalancedElephants&lt;/code&gt; 등.</target>
        </trans-unit>
        <trans-unit id="2ed04476eb06f51638e06c308e7b3b7f06e657c5" translate="yes" xml:space="preserve">
          <source>Identify which symbol that the error message is talking about.</source>
          <target state="translated">오류 메시지가 말하는 기호를 식별하십시오.</target>
        </trans-unit>
        <trans-unit id="d4b0225765fb3c89ea9f8d8462004e11a606ea1c" translate="yes" xml:space="preserve">
          <source>If eclipse Java build path is mapped to 7, 8 and in Project pom.xml Maven properties java.version is mentioned higher Java version(9,10,11, etc..,) than 7,8 you need to update in pom.xml file.</source>
          <target state="translated">일식 Java 빌드 경로가 7, 8에 매핑되고 Project pom.xml에서 Maven 속성 java.version이 7,8보다 높은 Java 버전 (9,10,11 등)으로 언급되면 pom에서 업데이트해야합니다. xml 파일.</target>
        </trans-unit>
        <trans-unit id="3d8126f41737295a83d2045434a773bb08bb0309" translate="yes" xml:space="preserve">
          <source>If you are using IntelliJ</source>
          <target state="translated">IntelliJ를 사용하는 경우</target>
        </trans-unit>
        <trans-unit id="01191d176211cc9cdeebc7bb6fc5b591a0bb0454" translate="yes" xml:space="preserve">
          <source>If you're getting this error in the build somewhere else, while your IDE says everything is perfectly fine, then check that you are using the same Java versions in both places.</source>
          <target state="translated">IDE에서 모든 것이 완벽하다고 말하면서 빌드 에서이 오류가 발생하면 두 곳에서 동일한 Java 버전을 사용하고 있는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="b4099add2e8deea09e90c019f0c17de2b69ce78e" translate="yes" xml:space="preserve">
          <source>In Eclipse if Java is mapped to Java version 11 and in pom.xml it is mapped to Java version 8. Update Eclipse support to Java 11 by go through below steps in eclipse IDE
Help -&amp;gt; Install New Software -&amp;gt;</source>
          <target state="translated">Eclipse에서 Java가 Java 버전 11에 맵핑되고 pom.xml에서는 Java 버전 8에 맵핑됩니다. Eclipse IDE 도움말-&amp;gt; 새 소프트웨어 설치-&amp;gt;에서 아래 단계를 수행하여 Eclipse 지원을 Java 11로 갱신하십시오.</target>
        </trans-unit>
        <trans-unit id="3707462d39f48e8f83d240929ef600d83c92bf96" translate="yes" xml:space="preserve">
          <source>In my case - I had to perform below operations:</source>
          <target state="translated">제 경우에는 아래 작업을 수행해야했습니다.</target>
        </trans-unit>
        <trans-unit id="279ed8fd3d42d71d6f60443a94cd0286001a4068" translate="yes" xml:space="preserve">
          <source>In the example I came across, the programmer had actually left out an operator.  What he meant to write was this:</source>
          <target state="translated">내가 만난 예에서 프로그래머는 실제로 운영자를 제외했습니다. 그가 쓰려고 한 것은 이것입니다.</target>
        </trans-unit>
        <trans-unit id="fd4f868a9a9dc8ed33d186b40b683e819975d4a7" translate="yes" xml:space="preserve">
          <source>It turned out that the programmer had created their own version of &lt;code&gt;String&lt;/code&gt; and that his version of the class didn't define a &lt;code&gt;substring&lt;/code&gt; methods.</source>
          <target state="translated">프로그래머가 자체 버전의 &lt;code&gt;String&lt;/code&gt; 을 작성했으며 클래스의 버전에서 &lt;code&gt;substring&lt;/code&gt; 메소드를 정의하지 않은 것으로 나타났습니다.</target>
        </trans-unit>
        <trans-unit id="c3369b2c0b08c13aa5b2e2973d0f82561c0dcd99" translate="yes" xml:space="preserve">
          <source>It's especially bad if you thought you did something good. I've seen this kind of error after &quot;optimizing&quot; code like this:</source>
          <target state="translated">좋은 일을했다고 생각하면 특히 나쁩니다. 다음과 같은 코드를 &quot;최적화&quot;한 후에 이런 종류의 오류가 발생했습니다.</target>
        </trans-unit>
        <trans-unit id="96de2cd3373fca464752545482b01f898f3b2422" translate="yes" xml:space="preserve">
          <source>Java has no &lt;code&gt;free()&lt;/code&gt; or &lt;code&gt;delete&lt;/code&gt; operators, so it has to rely on tracking variable scope to find out when variables are no longer used (together with references to these variables of cause).</source>
          <target state="translated">Java에는 &lt;code&gt;free()&lt;/code&gt; 또는 &lt;code&gt;delete&lt;/code&gt; 연산자가 없으므로 변수가 더 이상 사용되지 않는시기 (이러한 원인 변수에 대한 참조와 함께)를 찾으려면 변수 범위 추적에 의존해야합니다.</target>
        </trans-unit>
        <trans-unit id="d5cf694131cfabd3f90b48c64a0948a32d0ac80d" translate="yes" xml:space="preserve">
          <source>Keywords: like &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;class&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, and so on.</source>
          <target state="translated">키워드 : &lt;code&gt;true&lt;/code&gt; , &lt;code&gt;false&lt;/code&gt; , &lt;code&gt;class&lt;/code&gt; , &lt;code&gt;while&lt;/code&gt; 등</target>
        </trans-unit>
        <trans-unit id="cf800e149fcda7f72650093e176be369e11e2411" translate="yes" xml:space="preserve">
          <source>Lesson: Don't define your own classes with the same names as common library classes!</source>
          <target state="translated">레슨 : 공통 라이브러리 클래스와 이름이 같은 클래스를 직접 정의하지 마십시오!</target>
        </trans-unit>
        <trans-unit id="0c7944f98cdb5632c8df9726b7c06e89dc7cd3ba" translate="yes" xml:space="preserve">
          <source>Literals: like &lt;code&gt;42&lt;/code&gt; and &lt;code&gt;'X'&lt;/code&gt; and &lt;code&gt;&quot;Hi mum!&quot;&lt;/code&gt;.</source>
          <target state="translated">리터럴 : &lt;code&gt;42&lt;/code&gt; 와 같은 &lt;code&gt;'X'&lt;/code&gt; 와 &lt;code&gt;&quot;Hi mum!&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="322617019d38997630b02d475d33cb50cc1fd5ea" translate="yes" xml:space="preserve">
          <source>Look at the line in the file indicated by the compilation error message.</source>
          <target state="translated">컴파일 오류 메시지로 표시된 파일의 행을보십시오.</target>
        </trans-unit>
        <trans-unit id="3f28f5aebc97bc7dc51c89b5c60fc4b886366293" translate="yes" xml:space="preserve">
          <source>Move &lt;code&gt;context.xml&lt;/code&gt; file from &lt;code&gt;src/java/package&lt;/code&gt; to the &lt;code&gt;resource&lt;/code&gt; directory (IntelliJ
IDE)</source>
          <target state="translated">&lt;code&gt;context.xml&lt;/code&gt; 파일을 &lt;code&gt;src/java/package&lt;/code&gt; 에서 &lt;code&gt;resource&lt;/code&gt; 디렉토리 (IntelliJ IDE)로 이동</target>
        </trans-unit>
        <trans-unit id="a101ed00baa59642409c5b221aeeee229dacccb6" translate="yes" xml:space="preserve">
          <source>Not really. &quot;Cannot find symbol&quot; and &quot;Cannot resolve symbol&quot; mean the same thing.  Some Java compilers use one phrase, and some the other one.</source>
          <target state="translated">실제로는 아닙니다. &quot;기호를 찾을 수 없습니다&quot;와 &quot;기호를 확인할 수 없습니다&quot;는 같은 의미입니다. 일부 Java 컴파일러는 하나의 문구를 사용하고 일부는 다른 문구를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="e682efe4ad58b7666e4a8c49fb873688aa94123d" translate="yes" xml:space="preserve">
          <source>Note that not every &quot;correction&quot; is correct. Consider this:</source>
          <target state="translated">모든 &quot;수정&quot;이 올바른 것은 아닙니다. 이걸 고려하세요:</target>
        </trans-unit>
        <trans-unit id="36294ef436272a4b5d6f51acc508e02446f3c39e" translate="yes" xml:space="preserve">
          <source>Now look at the new output...</source>
          <target state="translated">이제 새로운 출력을보십시오 ...</target>
        </trans-unit>
        <trans-unit id="ea758a54fb265bfd8c5bdc6b6c9abea5c055fc53" translate="yes" xml:space="preserve">
          <source>Now look at the result..</source>
          <target state="translated">이제 결과를보십시오 ..</target>
        </trans-unit>
        <trans-unit id="f579c523960af1aec824c6fdc57af6d4abd76a1f" translate="yes" xml:space="preserve">
          <source>OR</source>
          <target state="translated">OR</target>
        </trans-unit>
        <trans-unit id="6fc668dd460be20b331a80fbe3b9b422a9f44840" translate="yes" xml:space="preserve">
          <source>Ok Successfully solved that error..At the same time , if you could get &quot;can not find method &quot; or &quot;can not find class&quot; something , At first,define a class or method and after use that..</source>
          <target state="translated">Ok는 성공적으로 그 오류를 해결했습니다 .. 동시에, 당신이 &quot;메소드를 찾을 수 없습니다&quot;또는 &quot;클래스를 찾을 수 없습니다&quot;를 얻을 수 있다면, 처음에는 클래스 또는 메소드를 정의하고 사용 후에 ..</target>
        </trans-unit>
        <trans-unit id="a4fe2ac2e0f9bafcbcc63ef034d3e2b5ca534b71" translate="yes" xml:space="preserve">
          <source>One other cause is unsupported method of for java version say jdk7 vs 8.
Check your %JAVA_HOME%</source>
          <target state="translated">또 다른 원인은 jdk7 대 8 버전의 Java 버전에서 지원되지 않는 방법입니다. % JAVA_HOME % 확인</target>
        </trans-unit>
        <trans-unit id="115515e66b9f7e9d2d2d86abfa3a31ab847208ff" translate="yes" xml:space="preserve">
          <source>One way to get this error in Eclipse :</source>
          <target state="translated">이클립스 에서이 오류를 얻는 한 가지 방법 :</target>
        </trans-unit>
        <trans-unit id="0a09c8dcd5f58792f08b0cc65bc25b03bd62171e" translate="yes" xml:space="preserve">
          <source>Operators and other non-alphanumeric tokens: like &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;=&lt;/code&gt;, &lt;code&gt;{&lt;/code&gt;, and so on.</source>
          <target state="translated">연산자 및 영숫자가 아닌 다른 토큰 (예 : &lt;code&gt;+&lt;/code&gt; , &lt;code&gt;=&lt;/code&gt; , &lt;code&gt;{&lt;/code&gt; 등)</target>
        </trans-unit>
        <trans-unit id="de3e7889b064a0064cc55612d55ec50f0847c14a" translate="yes" xml:space="preserve">
          <source>Other symbol errors on Android are likely to be due to previously mention reasons; e.g. missing or incorrect dependencies, incorrect package names, method or fields that don't exist in a particular API version, spelling / typing errors, and so on.</source>
          <target state="translated">Android의 다른 기호 오류는 이전에 언급 한 이유 때문일 수 있습니다. 예 : 누락되거나 잘못된 종속성, 잘못된 패키지 이름, 특정 API 버전에 존재하지 않는 메소드 또는 필드, 철자 / 입력 오류 등</target>
        </trans-unit>
        <trans-unit id="fe4343952b64af4161002ce5ee028942a632b88c" translate="yes" xml:space="preserve">
          <source>Paste following link &lt;a href=&quot;http://download.eclipse.org/eclipse/updates/4.9-P-builds&quot;&gt;http://download.eclipse.org/eclipse/updates/4.9-P-builds&lt;/a&gt; at &lt;strong&gt;&lt;em&gt;Work With&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">다음 링크에서 &lt;a href=&quot;http://download.eclipse.org/eclipse/updates/4.9-P-builds&quot;&gt;http://download.eclipse.org/eclipse/updates/4.9-P-builds&lt;/a&gt; 링크 붙여 넣기</target>
        </trans-unit>
        <trans-unit id="57ba20500e8433587e3e15fadb2e06671f30ea8d" translate="yes" xml:space="preserve">
          <source>Perhaps the variable declaration is out of scope at the point you tried to use it.  (See example below)</source>
          <target state="translated">아마도 변수 선언이 사용하려고 한 시점에서 범위를 벗어났습니다. (아래 예 참조)</target>
        </trans-unit>
        <trans-unit id="1320bf437a9c63a9f893bd4c962327e989878bd0" translate="yes" xml:space="preserve">
          <source>Perhaps you are mistakenly operating on an array rather than array element; e.g.</source>
          <target state="translated">아마도 배열 요소가 아닌 배열에서 실수로 작동하고있을 것입니다. 예 :</target>
        </trans-unit>
        <trans-unit id="6aee976e340fbce67d71c60ea5215628b25acd69" translate="yes" xml:space="preserve">
          <source>Perhaps you are shadowing a static or instance variable.</source>
          <target state="translated">아마도 당신은 정적 변수 나 인스턴스 변수를 가리고있을 것입니다.</target>
        </trans-unit>
        <trans-unit id="46ff260697563ca568093a999da1ef5b12b44dc9" translate="yes" xml:space="preserve">
          <source>Perhaps you are trying to refer to a method or field that does not exist (i.e. has not been declared) in the type you are using; e.g. &lt;code&gt;&quot;someString&quot;.push()&lt;/code&gt;&lt;sup&gt;2&lt;/sup&gt;.</source>
          <target state="translated">사용중인 유형에 존재하지 않는 (즉, 선언되지 않은) 메소드 또는 필드를 참조하려고합니다. 예 : &lt;code&gt;&quot;someString&quot;.push()&lt;/code&gt; &lt;sup&gt;2&lt;/sup&gt; .</target>
        </trans-unit>
        <trans-unit id="6a82a94ccdb7dbb7f268d442c7762df7c3f1f9eb" translate="yes" xml:space="preserve">
          <source>Perhaps you are trying to refer to an inherited method or field that wasn't declared in the parent / ancestor classes or interfaces.</source>
          <target state="translated">아마도 부모 / 조상 클래스 나 인터페이스에서 선언되지 않은 상속 된 메서드 나 필드를 참조하려고합니다.</target>
        </trans-unit>
        <trans-unit id="fdd7793f0ad12f111730e75e9d3fc8ea8c20d96d" translate="yes" xml:space="preserve">
          <source>Perhaps you are trying to use a method as a field, or vice versa; e.g. &lt;code&gt;&quot;someString&quot;.length&lt;/code&gt; or &lt;code&gt;someArray.length()&lt;/code&gt;.</source>
          <target state="translated">아마도 메소드를 필드로 사용하려고하거나 그 반대의 경우도 있습니다. 예를 들어 &lt;code&gt;&quot;someString&quot;.length&lt;/code&gt; 또는 &lt;code&gt;someArray.length()&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="12b0aca497ae9b4b3decc5ec061d41321b10b293" translate="yes" xml:space="preserve">
          <source>Perhaps you are trying to use something that was declared &quot;somewhere else&quot;; i.e. in a different context to where you have implicitly told the compiler to look.  (A different class?  A different scope?  A different package?  A different code-base?)</source>
          <target state="translated">아마도 당신은 &quot;다른 곳에서&quot;선언 된 것을 사용하려고 할 것입니다. 즉, 컴파일러가 암시 적으로 보도록 지시 한 다른 컨텍스트에서. (다른 클래스? 다른 범위? 다른 패키지? 다른 코드 기반?)</target>
        </trans-unit>
        <trans-unit id="ef4cfdc9fe68d1619053569b2ca4a9ca6dd56e30" translate="yes" xml:space="preserve">
          <source>Perhaps you are using (compiling against) the wrong version of an API.</source>
          <target state="translated">아마도 잘못된 버전의 API를 사용하고 있습니다 (컴파일).</target>
        </trans-unit>
        <trans-unit id="ac650b2e5cd256fe4a76abdd9c783ac3a3188aba" translate="yes" xml:space="preserve">
          <source>Perhaps you forgot a &lt;code&gt;new&lt;/code&gt; as in:</source>
          <target state="translated">아마도 다음과 같이 &lt;code&gt;new&lt;/code&gt; 것을 잊었을 것입니다.</target>
        </trans-unit>
        <trans-unit id="0945cb62dcdac85c50e370f1aa2e90fd780795a3" translate="yes" xml:space="preserve">
          <source>Perhaps you forgot to cast your object to an appropriate subclass.</source>
          <target state="translated">아마도 객체를 적절한 서브 클래스로 캐스팅하는 것을 잊었을 것입니다.</target>
        </trans-unit>
        <trans-unit id="a83c9dc2e88fae89091fd1b60fbe89b4764d5d76" translate="yes" xml:space="preserve">
          <source>Perhaps you forgot to declare the variable.</source>
          <target state="translated">변수 선언을 잊었을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b4c11cb6a68260241e8f9ed0d217b264d3387939" translate="yes" xml:space="preserve">
          <source>Perhaps you forgot to import the class.</source>
          <target state="translated">클래스를 가져 오는 것을 잊었을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7300f07d366229b926caa084b75f0d5b827d3738" translate="yes" xml:space="preserve">
          <source>Perhaps you got the case wrong; i.e. &lt;code&gt;stringBuilder&lt;/code&gt; instead of &lt;code&gt;StringBuilder&lt;/code&gt;.  All Java identifiers are case sensitive.</source>
          <target state="translated">아마도 당신은 사건이 잘못되었을 것입니다. 즉 &lt;code&gt;StringBuilder&lt;/code&gt; 대신 &lt;code&gt;stringBuilder&lt;/code&gt; 입니다. 모든 Java 식별자는 대소 문자를 구분합니다.</target>
        </trans-unit>
        <trans-unit id="c55c00cf5f6b9ca455d9ff01d1a74ff9200a61df" translate="yes" xml:space="preserve">
          <source>Perhaps you have declared a nested class or a generic parameter that &lt;em&gt;shadows&lt;/em&gt; the type you were meaning to use.</source>
          <target state="translated">아마도 사용하려는 유형을 &lt;em&gt;가리는&lt;/em&gt; 중첩 클래스 또는 일반 매개 변수를 선언했을 것입니다.</target>
        </trans-unit>
        <trans-unit id="8d832011eca37e28c618cae4601c9f67af94c90d" translate="yes" xml:space="preserve">
          <source>Perhaps you imported the wrong type; e.g. due to IDE completion or auto-correction.</source>
          <target state="translated">아마도 잘못된 유형을 가져 왔을 것입니다. 예를 들어 IDE 완성 또는 자동 수정으로 인해.</target>
        </trans-unit>
        <trans-unit id="3457de5ed68272b30bc1cee83d5c61dada01c081" translate="yes" xml:space="preserve">
          <source>Perhaps you spelled the name incorrectly; i.e. &lt;code&gt;StringBiulder&lt;/code&gt; instead of &lt;code&gt;StringBuilder&lt;/code&gt;.  Java cannot and will not attempt to compensate for bad spelling or typing errors.</source>
          <target state="translated">아마도 당신은 이름의 철자를 잘못 입력했을 것입니다; 즉 &lt;code&gt;StringBuilder&lt;/code&gt; 대신 &lt;code&gt;StringBiulder&lt;/code&gt; 입니다. Java는 잘못된 철자 나 타이핑 오류를 보상하려고 시도하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="02d939dd2166f0aba900adb5ef93ce2e07880bd4" translate="yes" xml:space="preserve">
          <source>Perhaps you used &quot;star&quot; imports, but the class isn't defined in any of the packages that you imported.</source>
          <target state="translated">&quot;스타&quot;가져 오기를 사용했을 수도 있지만 가져온 패키지에 클래스가 정의되어 있지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1c880a383e9414b359a6bcd231c4c09c5c3e676e" translate="yes" xml:space="preserve">
          <source>Perhaps you used underscores inappropriately; i.e. &lt;code&gt;mystring&lt;/code&gt; and &lt;code&gt;my_string&lt;/code&gt; are different.  (If you stick to the Java style rules, you will be largely protected from this mistake ...)</source>
          <target state="translated">아마도 밑줄을 부적절하게 사용했을 것입니다. 즉, &lt;code&gt;mystring&lt;/code&gt; 과 &lt;code&gt;my_string&lt;/code&gt; 은 다릅니다. (자바 스타일 규칙을 고수하면이 실수로부터 크게 보호됩니다 ...)</target>
        </trans-unit>
        <trans-unit id="53cc0754cd241aca6b6d84a3002595e2de09c7d7" translate="yes" xml:space="preserve">
          <source>Please explain the following about &quot;Cannot find symbol&quot; and &quot;Cannot resolve symbol&quot; errors:</source>
          <target state="translated">&quot;기호를 찾을 수 없음&quot;및 &quot;기호를 확인할 수 없음&quot;오류에 대해 다음을 설명하십시오.</target>
        </trans-unit>
        <trans-unit id="e40dd27e85365d42501c3e5410ee1479ca80e733" translate="yes" xml:space="preserve">
          <source>Regularly build your codebase using Maven so that you pick up this mistake early.  One way to do that is to use a CI server.</source>
          <target state="translated">Maven을 사용하여 정기적으로 코드베이스를 구축하여이 실수를 조기에 해결하십시오. 이를 수행하는 한 가지 방법은 CI 서버를 사용하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="888cbf38a75566abc056d55345f7f674edef10cb" translate="yes" xml:space="preserve">
          <source>Result : Eclipse will compile the code, but maven will give &quot;Cannot find symbol&quot;.</source>
          <target state="translated">결과 : Eclipse는 코드를 컴파일하지만 maven은 &quot;기호를 찾을 수 없음&quot;을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="f16e5da091aafb61a1ef145b9dd6df98c57ab4d7" translate="yes" xml:space="preserve">
          <source>Select &lt;strong&gt;Build&lt;/strong&gt;-&amp;gt;&lt;strong&gt;Rebuild Project&lt;/strong&gt; will solve it</source>
          <target state="translated">&lt;strong&gt;빌드&lt;/strong&gt; -&amp;gt; &lt;strong&gt;프로젝트 다시&lt;/strong&gt; &lt;strong&gt;빌드를&lt;/strong&gt; 선택하면 해결됩니다.</target>
        </trans-unit>
        <trans-unit id="7f0f422fa628ed3844254b3d368c3e78493dfc13" translate="yes" xml:space="preserve">
          <source>Solution :</source>
          <target state="translated">해결책 :</target>
        </trans-unit>
        <trans-unit id="bcc27e1cb4ffe2cc4a2aa9ef163e5c6dfc44a236" translate="yes" xml:space="preserve">
          <source>Solution: Again compile it and then run test. For me it worked this way.</source>
          <target state="translated">솔루션 : 다시 컴파일 한 다음 테스트를 실행하십시오. 나에게 이런 식으로 일했다.</target>
        </trans-unit>
        <trans-unit id="6f240bcd6e2eb2162dcdd0d74d48224a6f6d5145" translate="yes" xml:space="preserve">
          <source>Suppose that the compiler says &quot;Cannot find symbol&quot; for &lt;code&gt;j&lt;/code&gt;.  There are many ways I could &quot;fix&quot; that:</source>
          <target state="translated">컴파일러가 &lt;code&gt;j&lt;/code&gt; 에 대해 &quot;심볼을 찾을 수 없음&quot;이라고 가정합니다. 내가 &quot;수정&quot;할 수있는 방법은 여러 가지가 있습니다.</target>
        </trans-unit>
        <trans-unit id="e05af58fe572f58df5a2e87cc1750911eadbba9e" translate="yes" xml:space="preserve">
          <source>That error says, &quot;variable name can not find&quot;..Defining and initializing value for 'name' variable  can be abolished that error..Actually like this,</source>
          <target state="translated">'변수 이름을 찾을 수 없습니다'라는 오류가 표시됩니다. 'name'변수의 값을 정의하고 초기화하면 해당 오류를 폐지 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="921b2d0459276f34152b34350cafb64c7e569d68" translate="yes" xml:space="preserve">
          <source>That's invalid code. Because neither of the variables named &lt;code&gt;message&lt;/code&gt; is visible outside of their respective scope - which would be the surrounding brackets &lt;code&gt;{}&lt;/code&gt; in this case.</source>
          <target state="translated">유효하지 않은 코드입니다. &lt;code&gt;message&lt;/code&gt; 라는 변수 중 어느 것도 해당 범위 외부에 표시되지 않기 때문에이 경우 주변 괄호 &lt;code&gt;{}&lt;/code&gt; 가 됩니다.</target>
        </trans-unit>
        <trans-unit id="8a0a3e47242a89ac0ce11d2c73461bae9df0ac76" translate="yes" xml:space="preserve">
          <source>The  most common way to deal with this kind of scope-trouble would be to pre-assign the else-values to the variable names in the outside scope and then reassign in if:</source>
          <target state="translated">이러한 종류의 범위 문제를 처리하는 가장 일반적인 방법은 else-values를 외부 범위의 변수 이름에 미리 할당 한 다음 다음과 같은 경우에 다시 할당하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="142d9901807f8cfa96b29d25c5341d4e76e2f44b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{ ... }&lt;/code&gt; block is NOT the body of the &lt;code&gt;for&lt;/code&gt; loop, and therefore the previous declaration of &lt;code&gt;i&lt;/code&gt; in the &lt;code&gt;for&lt;/code&gt; statement is &lt;em&gt;out of scope&lt;/em&gt; in the block.</source>
          <target state="translated">&lt;code&gt;{ ... }&lt;/code&gt; 블록은 &lt;code&gt;for&lt;/code&gt; 루프의 본문이 아니므로 &lt;code&gt;for&lt;/code&gt; 문에서 &lt;code&gt;i&lt;/code&gt; 의 이전 선언이 블록 &lt;em&gt;의 범위&lt;/em&gt; 를 벗어납니다.</target>
        </trans-unit>
        <trans-unit id="0f0ae74a91d8b9265d539eaa39911af2672b3656" translate="yes" xml:space="preserve">
          <source>The class being referenced was in another project and that dependency was not added to the Gradle build file of my project. So I added the dependency using</source>
          <target state="translated">참조되는 클래스가 다른 프로젝트에 있었고 해당 종속성이 내 프로젝트의 Gradle 빌드 파일에 추가되지 않았습니다. 그래서 다음을 사용하여 종속성을 추가했습니다.</target>
        </trans-unit>
        <trans-unit id="6848cc18f6b73237f2c46b3b819fef73c4ecf170" translate="yes" xml:space="preserve">
          <source>The point is that you &lt;em&gt;need&lt;/em&gt; to understand what your code is trying to do in order to find the right fix.</source>
          <target state="translated">요점은 올바른 수정을 찾기 위해 코드에서 수행하려는 작업을 이해해야한다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="50ea0a272ac648921ff545f6cd9e88eb0c0e23d0" translate="yes" xml:space="preserve">
          <source>The problem is often a combination of the above.  For example, maybe you &quot;star&quot; imported &lt;code&gt;java.io.*&lt;/code&gt; and then tried to use the &lt;code&gt;Files&lt;/code&gt; class ... which is in &lt;code&gt;java.nio&lt;/code&gt; not &lt;code&gt;java.io&lt;/code&gt;.  Or maybe you meant to write &lt;code&gt;File&lt;/code&gt; ... which &lt;em&gt;is&lt;/em&gt; a class in &lt;code&gt;java.io&lt;/code&gt;.</source>
          <target state="translated">문제는 종종 위의 조합입니다. 예를 들어 &lt;code&gt;java.io.*&lt;/code&gt; 를 &quot;star&quot;로 가져온 다음 &lt;code&gt;java.io&lt;/code&gt; 가 아닌 &lt;code&gt;java.nio&lt;/code&gt; 에 있는 &lt;code&gt;Files&lt;/code&gt; 클래스를 사용하려고했습니다. 또는 &lt;code&gt;java.io&lt;/code&gt; 의 클래스 인 &lt;code&gt;File&lt;/code&gt; ...을 작성하려고했습니다.</target>
        </trans-unit>
        <trans-unit id="23430d7ccb9972344f087656883e74790288bbd6" translate="yes" xml:space="preserve">
          <source>The problem is the sneaky semicolon ( &lt;code&gt;;&lt;/code&gt; ) before the &lt;code&gt;{&lt;/code&gt;.  The Java language syntax defines a semicolon in that context to be an &lt;em&gt;empty statement&lt;/em&gt;.  The empty statement then becomes the body of the &lt;code&gt;for&lt;/code&gt; loop.  So that code actually means this:</source>
          <target state="translated">문제는 &lt;code&gt;{&lt;/code&gt; . 이전의 부적절한 세미콜론 ( &lt;code&gt;;&lt;/code&gt; )입니다. Java 언어 구문은 해당 컨텍스트에서 세미콜론을 &lt;em&gt;빈 명령문으로&lt;/em&gt; 정의합니다. 그런 다음 빈 명령문은 &lt;code&gt;for&lt;/code&gt; 루프의 본문이됩니다. 그래서 그 코드는 실제로 이것을 의미합니다 :</target>
        </trans-unit>
        <trans-unit id="964b4b2847be390ff11fa20a20389485904aaf25" translate="yes" xml:space="preserve">
          <source>Then you &lt;em&gt;think&lt;/em&gt; about what your code is supposed to be saying.  Then finally you work out what correction you need to make to your source code to do what you want.</source>
          <target state="translated">그런 다음 코드의 내용에 대해 생각합니다. 그런 다음 마지막으로 원하는 것을 수행하기 위해 소스 코드를 수정해야하는 문제를 해결합니다.</target>
        </trans-unit>
        <trans-unit id="8fbba0448a4a615ae5d97b9e2d16540fc9e93dd8" translate="yes" xml:space="preserve">
          <source>There are some other more obscure causes too ... which I will deal with below.</source>
          <target state="translated">다른 더 모호한 원인도 있습니다 ... 아래에서 다루겠습니다.</target>
        </trans-unit>
        <trans-unit id="07b3699aba68a830c1995f93285e9d7c1b599ab2" translate="yes" xml:space="preserve">
          <source>There can be various scenarios as people have mentioned above. A couple of things which have helped me resolve this.</source>
          <target state="translated">사람들이 위에서 언급 한 것처럼 다양한 시나리오가있을 수 있습니다. 이 문제를 해결하는 데 도움이 된 몇 가지 사항이 있습니다.</target>
        </trans-unit>
        <trans-unit id="910b46255ff8e604c5beaaff16f2dec42cf1bade" translate="yes" xml:space="preserve">
          <source>There is another reason why the compiler might not find a symbol if you are compiling from the command line.  You might simply have forgotten to compile or recompile some other class.  For example, if you have classes &lt;code&gt;Foo&lt;/code&gt; and &lt;code&gt;Bar&lt;/code&gt; where &lt;code&gt;Foo&lt;/code&gt; uses &lt;code&gt;Bar&lt;/code&gt;.  If you have never compiled &lt;code&gt;Bar&lt;/code&gt; and you run &lt;code&gt;javac Foo.java&lt;/code&gt;, you are liable to find that the compiler can't find the symbol &lt;code&gt;Bar&lt;/code&gt;.  The simple answer is to compile &lt;code&gt;Foo&lt;/code&gt; and &lt;code&gt;Bar&lt;/code&gt; together; e.g. &lt;code&gt;javac Foo.java Bar.java&lt;/code&gt; or &lt;code&gt;javac *.java&lt;/code&gt;.  Or better still use a Java build tool; e.g. Ant, Maven, Gradle and so on.</source>
          <target state="translated">명령 행에서 컴파일하는 경우 컴파일러가 기호를 찾지 못하는 또 다른 이유가 있습니다. 다른 클래스를 컴파일하거나 다시 컴파일하는 것을 잊었을 수 있습니다. 예를 들어, &lt;code&gt;Foo&lt;/code&gt; 가 &lt;code&gt;Bar&lt;/code&gt; 를 사용하는 클래스 &lt;code&gt;Foo&lt;/code&gt; 및 &lt;code&gt;Bar&lt;/code&gt; 가 있는 경우 &lt;code&gt;Bar&lt;/code&gt; 를 컴파일 한 적이없고 &lt;code&gt;javac Foo.java&lt;/code&gt; 를 실행하면 컴파일러가 &lt;code&gt;Bar&lt;/code&gt; 기호를 찾을 수 없다는 것을 알게됩니다. 간단한 대답은 &lt;code&gt;Foo&lt;/code&gt; 와 &lt;code&gt;Bar&lt;/code&gt; 를 함께 컴파일하는 것입니다. 예를 들어 &lt;code&gt;javac Foo.java Bar.java&lt;/code&gt; 또는 &lt;code&gt;javac *.java&lt;/code&gt; 입니다. 또는 여전히 Java 빌드 도구를 사용하는 것이 좋습니다. 예를 들어 Ant, Maven, Gradle 등.</target>
        </trans-unit>
        <trans-unit id="f20dad4ddd9d0a0d2e853fd9b15c3aa9f2c83c67" translate="yes" xml:space="preserve">
          <source>This could be an IDE bug.  For instance @Joel Costigliola describes a scenario where Eclipse does not handle a Maven &quot;test&quot; tree correctly: &lt;a href=&quot;https://stackoverflow.com/a/37207223/139985&quot;&gt;&lt;strong&gt;see this answer&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">이것은 IDE 버그 일 수 있습니다. 예를 들어 @Joel Costigliola는 Eclipse가 Maven &quot;테스트&quot;트리를 올바르게 처리하지 않는 시나리오를 설명합니다 ( &lt;a href=&quot;https://stackoverflow.com/a/37207223/139985&quot;&gt;&lt;strong&gt;이 답변 참조)&lt;/strong&gt;&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="2c02e35ce6f8c08d39a4eaefd079ff6e8e253dc3" translate="yes" xml:space="preserve">
          <source>This could happen if the IDE has been configured with the wrong JDK version.</source>
          <target state="translated">IDE가 잘못된 JDK 버전으로 구성된 경우 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bbbf5cadfff61e0873aeca6ad0ad9bee801aee81" translate="yes" xml:space="preserve">
          <source>This could happen if the IDE's caches get out of sync with the file system.  There are IDE specific ways to fix that.</source>
          <target state="translated">IDE의 캐시가 파일 시스템과 동기화되지 않으면 이런 일이 발생할 수 있습니다. 이를 해결하는 IDE 특정 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="b01aafb35ab303a4d06337ae777e7a4e74e5c697" translate="yes" xml:space="preserve">
          <source>This will give a &quot;Cannot find symbol&quot; error for &lt;code&gt;i&lt;/code&gt; in the &lt;code&gt;if&lt;/code&gt; statement.  Though we previously declared &lt;code&gt;i&lt;/code&gt;, that declaration is only &lt;em&gt;in scope&lt;/em&gt; for the &lt;code&gt;for&lt;/code&gt; statement and its body.  The reference to &lt;code&gt;i&lt;/code&gt; in the &lt;code&gt;if&lt;/code&gt; statement &lt;em&gt;cannot see&lt;/em&gt; that declaration of &lt;code&gt;i&lt;/code&gt;.  It is &lt;em&gt;out of scope&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; 문에서 &lt;code&gt;i&lt;/code&gt; 에 &quot;기호를 찾을 수 없음&quot;오류가 발생합니다. 이전에 &lt;code&gt;i&lt;/code&gt; 를 선언했지만 해당 선언은 &lt;code&gt;for&lt;/code&gt; 문과 본문의 &lt;em&gt;범위&lt;/em&gt; 에만 있습니다. &lt;code&gt;if&lt;/code&gt; 문의 &lt;code&gt;i&lt;/code&gt; 에 대한 &lt;em&gt;참조는&lt;/em&gt; 해당 &lt;code&gt;i&lt;/code&gt; 의 선언을 &lt;em&gt;볼 수 없습니다&lt;/em&gt; . &lt;em&gt;범위를 벗어났습니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="7e4c0f9d8e48bbc624e38c18014fa58020f5e9c0" translate="yes" xml:space="preserve">
          <source>This will give you a compilation error in the &lt;code&gt;println&lt;/code&gt; call saying that &lt;code&gt;i&lt;/code&gt; cannot be found.  But (I hear you say) I did declare it!</source>
          <target state="translated">이것은 &lt;code&gt;println&lt;/code&gt; 호출에서 &lt;code&gt;i&lt;/code&gt; 찾을 수 없다는 컴파일 오류를 줄 것입니다. 그러나 나는 당신이 그것을 선언했다!</target>
        </trans-unit>
        <trans-unit id="b5ccecd55643c9ced3a50fb5f8f792ef974dcb2c" translate="yes" xml:space="preserve">
          <source>Underlying cause : Eclipse is using a combined build path for the main and test trees.  Unfortunately, it does not support using different build paths for different parts of an Eclipse project, which is what Maven requires.</source>
          <target state="translated">기본 원인 : Eclipse는 기본 트리와 테스트 트리에 대해 빌드 경로를 결합하여 사용합니다. 불행히도 Maven이 요구하는 Eclipse 프로젝트의 다른 부분에 대해 다른 빌드 경로 사용을 지원하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="97afba8bad2290ed282ea6751ac60ea24d61f892" translate="yes" xml:space="preserve">
          <source>What does a “Cannot find symbol” or “Cannot resolve symbol” error mean</source>
          <target state="translated">&quot;기호를 찾을 수 없음&quot;또는 &quot;기호를 확인할 수 없음&quot;오류의 의미</target>
        </trans-unit>
        <trans-unit id="5b2f493251efca62fc6a5c38c710e6fd686f0203" translate="yes" xml:space="preserve">
          <source>What does they mean?</source>
          <target state="translated">그들은 무엇을 의미합니까?</target>
        </trans-unit>
        <trans-unit id="ec76a3c85720057360af6aeac69e22a0af9ba31f" translate="yes" xml:space="preserve">
          <source>What things can cause them?</source>
          <target state="translated">어떤 일이 그들을 일으킬 수 있습니까?</target>
        </trans-unit>
        <trans-unit id="8fa189b574b1f680fd1791244f734d9b433b58e2" translate="yes" xml:space="preserve">
          <source>You can avoid this by restricting yourself to ASCII or Latin-1 as the source file encoding, and using Java &lt;code&gt;\uxxxx&lt;/code&gt; escapes for other characters.</source>
          <target state="translated">소스 파일 인코딩으로 ASCII 또는 Latin-1로 제한하고 다른 문자에 Java &lt;code&gt;\uxxxx&lt;/code&gt; 이스케이프를 사용하면이를 피할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5fbf64e54e9888bb7006f2741d492ad1a8fecdc3" translate="yes" xml:space="preserve">
          <source>You might say: &quot;But a variable named message is defined either way - so message &lt;em&gt;is&lt;/em&gt; defined after the &lt;code&gt;if&lt;/code&gt;&quot;.</source>
          <target state="translated">&quot;하지만 message라는 변수는 어느 쪽이든 정의되어 있으므로 &lt;code&gt;if&lt;/code&gt; 뒤에 메시지 &lt;em&gt;가&lt;/em&gt; 정의 됩니다 .&quot;</target>
        </trans-unit>
        <trans-unit id="301196cc561379b0dee95ceb62bac48de41efde9" translate="yes" xml:space="preserve">
          <source>You'll also get this error if you forget a &lt;code&gt;new&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt; 것을 잊어 버린 경우 에도이 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="8a79906051f046557755cfac4f362ca1b99f878e" translate="yes" xml:space="preserve">
          <source>Your Java source code consists of the following things:</source>
          <target state="translated">Java 소스 코드는 다음으로 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="14b8a4ae1130c94635e900e4514a5d8e307392cf" translate="yes" xml:space="preserve">
          <source>and it worked. HTH!</source>
          <target state="translated">그리고 효과가있었습니다. HTH!</target>
        </trans-unit>
        <trans-unit id="cc72a00bf5f82a31e19586f8d5648eeb9609f807" translate="yes" xml:space="preserve">
          <source>and so on.</source>
          <target state="translated">등등.</target>
        </trans-unit>
        <trans-unit id="c1219714543094deb1318e6c632a04eb1c699c1b" translate="yes" xml:space="preserve">
          <source>because the call without the &lt;code&gt;new&lt;/code&gt; keyword will try and look for a (local) method called &lt;code&gt;String&lt;/code&gt; without arguments - and that method signature is likely not defined.</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt; 키워드가없는 호출은 인수가없는 &lt;code&gt;String&lt;/code&gt; 이라는 (로컬) 메소드를 찾고 시도하기 때문에 메소드 서명이 정의되지 않았을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ce2eac679bc6f9f09c415d64a16ec2883ac8cf95" translate="yes" xml:space="preserve">
          <source>then update Java version in Maven properties of &lt;strong&gt;pom.xml&lt;/strong&gt; file as below</source>
          <target state="translated">다음과 같이 &lt;strong&gt;pom.xml&lt;/strong&gt; 파일의 Maven 속성에서 Java 버전을 업데이트하십시오.</target>
        </trans-unit>
        <trans-unit id="a8032f8450ec41f406da73828d654efe884bfb75" translate="yes" xml:space="preserve">
          <source>versus</source>
          <target state="translated">versus</target>
        </trans-unit>
        <trans-unit id="bc793ddb89e7eeb5e8595ea1fd8a12af55ec917a" translate="yes" xml:space="preserve">
          <source>you compiled your code using maven compile and then used maven test to run it worked fine. Now if you changed something in your code and then without compiling you are running it, you will get this error.</source>
          <target state="translated">maven compile을 사용하여 코드를 컴파일 한 다음 maven 테스트를 사용하여 정상적으로 작동했습니다. 이제 코드에서 무언가를 변경하고 컴파일하지 않고 실행하면이 오류가 발생합니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
