<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/25706216">
    <body>
      <group id="25706216">
        <trans-unit id="957e822a66c4cd727a172ce017b976793c539ce8" translate="yes" xml:space="preserve">
          <source>&quot;Can not find &quot; means that , compiler who can't find appropriate variable, method ,class etc...if you got that error massage , first of all you want to find code line where get error massage..And then you will able to find which variable , method or class have not define before using it.After confirmation  initialize that variable ,method or class can be used for later require...Consider the following example.</source>
          <target state="translated">&quot;見つからない」というのは、コンパイラが適切な変数やメソッド、クラスなどを見つけられないことを意味します。もし、エラーが発生した場合は、まず、エラーが発生したコード行を見つけ、それを使用する前に定義されていない変数やメソッド、クラスを見つけることができます。</target>
        </trans-unit>
        <trans-unit id="24c96569d576c7ebe4d6daa7a72a0eb62c82cc0c" translate="yes" xml:space="preserve">
          <source>&quot;Oh, there's duplicated code, let's pull that common line out&quot; -&amp;gt; and there it it.</source>
          <target state="translated">「ああ、重複したコードがあるので、その共通の行を引き出しましょう」-&amp;gt;そして、それです。</target>
        </trans-unit>
        <trans-unit id="22591b4d7720782dd59a8af35b50ede3e7da3d2d" translate="yes" xml:space="preserve">
          <source>(An appropriate correction here might be to move the &lt;code&gt;if&lt;/code&gt; statement inside the loop, or to declare &lt;code&gt;i&lt;/code&gt; before the start of the loop.)</source>
          <target state="translated">（ここでの適切な修正は、ループ内で &lt;code&gt;if&lt;/code&gt; ステートメントを移動するか 、ループの開始前に &lt;code&gt;i&lt;/code&gt; を宣言することです。）</target>
        </trans-unit>
        <trans-unit id="b21307f81bb093b4ac6cb279c8bc9bc122c8257c" translate="yes" xml:space="preserve">
          <source>0. Is there any difference between the two errors?</source>
          <target state="translated">0.2つのエラーの違いはありますか?</target>
        </trans-unit>
        <trans-unit id="47af34209ff48cea459d24fa2ed61e481cac48a2" translate="yes" xml:space="preserve">
          <source>1. What does a &quot;Cannot find symbol&quot; error mean?</source>
          <target state="translated">1.シンボルが見つからない」というエラーの意味は?</target>
        </trans-unit>
        <trans-unit id="41abe9f3e5e7f4a3013322c34f35cad640e38b54" translate="yes" xml:space="preserve">
          <source>2. What can cause a &quot;Cannot find symbol&quot; error?</source>
          <target state="translated">2.シンボルが見つからない」エラーの原因は何ですか?</target>
        </trans-unit>
        <trans-unit id="a3d5f1d259fa656ac221c118548d3a1650e61656" translate="yes" xml:space="preserve">
          <source>3. How do I fix these errors ?</source>
          <target state="translated">3.どのようにしてこれらのエラーを修正できますか?</target>
        </trans-unit>
        <trans-unit id="03d29f0fb82a9492b7082940ddb681f90956c8be" translate="yes" xml:space="preserve">
          <source>4.  Obscure causes</source>
          <target state="translated">4.曖昧な原因</target>
        </trans-unit>
        <trans-unit id="705579ad0a0283cb97a39777fefdeea2a947b36f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Name:&lt;/code&gt; Java 11 support
&lt;code&gt;Location:&lt;/code&gt;&lt;a href=&quot;http://download.eclipse.org/eclipse/updates/4.9-P-builds&quot;&gt;http://download.eclipse.org/eclipse/updates/4.9-P-builds&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;Name:&lt;/code&gt; Java 11サポート &lt;code&gt;Location:&lt;/code&gt; &lt;a href=&quot;http://download.eclipse.org/eclipse/updates/4.9-P-builds&quot;&gt;http&lt;/a&gt; : //download.eclipse.org/eclipse/updates/4.9-P-builds</target>
        </trans-unit>
        <trans-unit id="35fd962df9f6fdd3ed5f739417e71dee7e252180" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;This question is designed to seed a comprehensive Q&amp;amp;A about these common compilation errors in Java.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;この質問は、Javaでのこれらの一般的なコンパイルエラーに関する包括的なQ＆Aを作成するためのものです。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="fa638d9de16c8b504bfea0d133cc9139b1d84792" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;An earlier build problem&lt;/strong&gt;:  It is possible that an earlier build failed in a way that gave a JAR file with missing classes.  Such a failure would typically be noticed if you were using a build tool.  However if you are getting JAR files from someone else, you are dependent on &lt;em&gt;them&lt;/em&gt; building properly, and noticing errors.  If you suspect this, use &lt;code&gt;tar -tvf&lt;/code&gt; to list the contents of the suspect JAR file.</source>
          <target state="translated">&lt;strong&gt;以前のビルドの問題&lt;/strong&gt; ：欠落しているクラスを含むJARファイルを提供するように、以前のビルドが失敗した可能性があります。 このような障害は、ビルドツールを使用している場合に通常発生します。 ただし、他の人からJARファイルを取得している場合は、 &lt;em&gt;それら&lt;/em&gt;が適切にビルドされ、エラーが発生し&lt;em&gt;ている&lt;/em&gt;ことに依存し&lt;em&gt;て&lt;/em&gt;います。 これが疑われる場合は、 &lt;code&gt;tar -tvf&lt;/code&gt; を使用して、疑わしいJARファイルの内容をリストします。</target>
        </trans-unit>
        <trans-unit id="edce9f898c723ffac07d6bd424761911b7392648" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Android issues&lt;/strong&gt;: When you are programming for Android, and you have &quot;Cannot find symbol&quot; errors related to &lt;code&gt;R&lt;/code&gt;, be aware that the &lt;code&gt;R&lt;/code&gt; symbols are defined by the &lt;code&gt;context.xml&lt;/code&gt; file.  Check that your &lt;code&gt;context.xml&lt;/code&gt; file is correct and in the correct place, and that the corresponding &lt;code&gt;R&lt;/code&gt; class file has been generated / compiled.  Note that the Java symbols are case sensitive, so the corresponding XML ids are be case sensitive too.</source>
          <target state="translated">&lt;strong&gt;Androidの問題&lt;/strong&gt; ：Android向けにプログラミングしているときに、 &lt;code&gt;R&lt;/code&gt; に関連する「シンボルが見つかりません」エラーが発生した場合、 &lt;code&gt;R&lt;/code&gt; シンボルは &lt;code&gt;context.xml&lt;/code&gt; ファイルで定義されていることに注意してください。 &lt;code&gt;context.xml&lt;/code&gt; ファイルが正しく、正しい場所にあること、および対応する &lt;code&gt;R&lt;/code&gt; クラスファイルが生成/コンパイルされていることを確認してください。 Javaシンボルでは大文字と小文字が区別されるため、対応するXML IDでも大文字と小文字が区別されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="6b176345032bd686742a8ae02322d91e3c5639b7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Homoglyphs:&lt;/strong&gt;  If you use UTF-8 encoding for your source files, it is possible to have identifiers that &lt;em&gt;look&lt;/em&gt; the same, but are in fact different because they contain homoglyphs.   See &lt;a href=&quot;http://en.wikipedia.org/wiki/Homoglyph&quot;&gt;this page&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;strong&gt;ホモグリフ：&lt;/strong&gt;ソースファイルにUTF-8エンコーディングを使用している場合、同じ&lt;em&gt;ように見える&lt;/em&gt;識別子を使用できますが、 &lt;strong&gt;ホモグリフ&lt;/strong&gt;が含まれているため、実際には異なります。 詳細については、 &lt;a href=&quot;http://en.wikipedia.org/wiki/Homoglyph&quot;&gt;このページ&lt;/a&gt;を参照してください 。</target>
        </trans-unit>
        <trans-unit id="83e75582b49b35484a908057aebffc972daa0010" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;IDE issues&lt;/strong&gt;: People have reported cases where their IDE gets confused and the compiler in the IDE cannot find a class that exists ... or the reverse situation.</source>
          <target state="translated">&lt;strong&gt;IDEの問題&lt;/strong&gt; ：IDEが混乱し、IDEのコンパイラーが存在するクラスを見つけられない、またはその逆の状況が報告されています。</target>
        </trans-unit>
        <trans-unit id="a4f4233fe48639690c50968e2656b9636991c170" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Incorrect dependencies&lt;/strong&gt;: If you are using an IDE or a build tool that manages the build path and project dependencies, you may have made a mistake with the dependencies; e.g. left out a dependency, or selected the wrong version.  If you are using a build tool (Ant, Maven, Gradle, etc), check the project's build file.  If you are using an IDE, check the project's build path configuration.</source>
          <target state="translated">&lt;strong&gt;不適切な依存関係&lt;/strong&gt; ： &lt;strong&gt;ビルドパス&lt;/strong&gt;とプロジェクトの依存関係を管理するIDEまたはビルドツールを使用している場合、依存関係に誤りがある可能性があります。 たとえば、依存関係を省略したり、間違ったバージョンを選択した。 ビルドツール（Ant、Maven、Gradleなど）を使用している場合は、プロジェクトのビルドファイルを確認してください。 IDEを使用している場合は、プロジェクトのビルドパス構成を確認してください。</target>
        </trans-unit>
        <trans-unit id="3c802a0bf910d0237921a609dca2340dcc104d7d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;One more example of 'Variable is out of scope'&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;「変数は範囲外です」のもう1つの例&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b37a54e16258a393402fe558531e06822c8fbc84" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Problem:&lt;/strong&gt; I was calling a static method defined in the class of a project A from a class defined in another project B. 
I was getting the following error:</source>
          <target state="translated">&lt;strong&gt;問題：&lt;/strong&gt;プロジェクトAのクラスで定義された静的メソッドを別のプロジェクトBで定義されたクラスから呼び出していました。次のエラーが発生しました：</target>
        </trans-unit>
        <trans-unit id="c04b2c4f9118c6a97f6ad5c50b18596c96274718" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Redefining system classes&lt;/strong&gt;: I've seen cases where the compiler complains that &lt;code&gt;substring&lt;/code&gt; is an unknown symbol in something like the following</source>
          <target state="translated">&lt;strong&gt;システムクラスの再定義&lt;/strong&gt; ：コンパイラが次のような &lt;code&gt;substring&lt;/code&gt; が不明なシンボルであると不平を言う場合を見てきました</target>
        </trans-unit>
        <trans-unit id="a5693a104ce44ada27aadf2c5147a6397ad56886" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;SOLVED&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;SOLVED&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8c469be5bbee3166922402f3bd4179ce812079ab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Solution:&lt;/strong&gt; I resolved this by first building the project where the method is defined then the project where the method was being called from.</source>
          <target state="translated">&lt;strong&gt;解決策：&lt;/strong&gt;最初にメソッドが定義されているプロジェクトをビルドし、次にメソッドが呼び出されているプロジェクトをビルドすることで、これを解決しました。</target>
        </trans-unit>
        <trans-unit id="ec7aecfd09f1db68860166a485a2a3cb10dd91f9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;You are not recompiling&lt;/strong&gt;:  It sometimes happens that new Java programmers don't understand how the Java tool chain works, or haven't implemented a repeatable &quot;build process&quot;; e.g. using an IDE, Ant, Maven, Gradle and so on.  In such a situation, the programmer can end up chasing his tail looking for an illusory error that is &lt;em&gt;actually&lt;/em&gt; caused by not recompiling the code properly, and the like ...</source>
          <target state="translated">&lt;strong&gt;再コンパイルしていない&lt;/strong&gt; ：新しいJavaプログラマーがJavaツールチェーンの動作を理解していない、または繰り返し可能な「ビルドプロセス」を実装していない場合があります。 たとえば、IDE、Ant、Maven、Gradleなどを使用します。 そのような状況では、プログラマーはコードを適切に再コンパイルしなかったことなどによって&lt;em&gt;実際に&lt;/em&gt;引き起こされている幻想的なエラーを探して尾を追いかけてしまう可能性があります...</target>
        </trans-unit>
        <trans-unit id="279e0a0c57b48964447c3c7b49cb421013744ca1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;or&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;or&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="025904cc59d8e36f743100bbfea5c4813f69e74d" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;1 - If, perchance, you &lt;em&gt;do&lt;/em&gt; see this in a runtime exception or error message, then either you have configured your IDE to run code with compilation errors, or your application is generating and compiling code .. at runtime.&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;1-ありがたいことに、実行時例外またはエラーメッセージにこれが表示される場合は、コンパイルエラーでコードを実行するようにIDEを構成しているか、アプリケーションが実行時にコードを生成およびコンパイルしています。&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="dc9e185ff4316777d88c20d1d17c2bab349b7001" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;2 - The three basic principles of Civil Engineering: water doesn't flow uphill, a plank is stronger on its side, and &lt;em&gt;you can't push on a string&lt;/em&gt;.&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;2-土木工学の3つの基本原則：水は上り坂に流れず、厚板はその側が強く&lt;em&gt;、紐を押すことはできません&lt;/em&gt; 。&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="2b114f1e5460783ca9d3a27e500849e98f0dd6e4" translate="yes" xml:space="preserve">
          <source>A &quot;Cannot find symbol&quot; error is about the identifiers.  When your code is compiled, the compiler needs to work out what each and every identifier in your code means.</source>
          <target state="translated">Cannot find symbol&quot; エラーは識別子に関するものです。あなたのコードがコンパイルされるとき、コンパイラはあなたのコードの各識別子が何を意味するのかを調べる必要があります。</target>
        </trans-unit>
        <trans-unit id="0a8c1ff4650864c41869e71a03df910a8fb32f74" translate="yes" xml:space="preserve">
          <source>A &quot;Cannot find symbol&quot; error means that the compiler cannot do this.  Your code appears to be referring to something that the compiler doesn't understand.</source>
          <target state="translated">Cannot find symbol&quot; エラーは、コンパイラがこれを実行できないことを意味します。あなたのコードは、コンパイラが理解できない何かを参照しているように見えます。</target>
        </trans-unit>
        <trans-unit id="2d70f166b6d73bc68283e027fbc5e342301a458e" translate="yes" xml:space="preserve">
          <source>Add (Popup window will open) -&amp;gt;</source>
          <target state="translated">追加（ポップアップウィンドウが開きます）-&amp;gt;</target>
        </trans-unit>
        <trans-unit id="976c32636008508e600cca2aa3c0bcf3a53bae93" translate="yes" xml:space="preserve">
          <source>As I've seen that kind of questions a few times already, maybe one more example to what's illegal even if it might &lt;em&gt;feel&lt;/em&gt; okay.</source>
          <target state="translated">この種の質問をすでに何度か見てきたので、たとえ大丈夫だと&lt;em&gt;感じ&lt;/em&gt;ても違法なものの例をもう1つ挙げます。</target>
        </trans-unit>
        <trans-unit id="d75efb2ddff87e39d55914682bef37a47939dc0e" translate="yes" xml:space="preserve">
          <source>As a first order, there is only one cause.  The compiler looked in all of the places where the identifier &lt;em&gt;should&lt;/em&gt; be defined, and it couldn't find the definition.  This could be caused by a number of things.  The common ones are as follows:</source>
          <target state="translated">最初の注文として、原因は1つだけです。 コンパイラは、識別子&lt;em&gt;を&lt;/em&gt;定義する&lt;em&gt;必要&lt;/em&gt;があるすべての場所を調べましたが、定義を見つけることができませんでした。 これにはいくつかの原因が考えられます。 一般的なものは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="f8aaab4fe0ff7e8c861a1355b1e09583eec96149" translate="yes" xml:space="preserve">
          <source>But you'd be wrong.</source>
          <target state="translated">でも、あなたは間違っているでしょう。</target>
        </trans-unit>
        <trans-unit id="fea126191af5284e4a18e5cb7ff221180f042dd1" translate="yes" xml:space="preserve">
          <source>Clean &lt;code&gt;target&lt;/code&gt; directory.</source>
          <target state="translated">&lt;code&gt;target&lt;/code&gt; ディレクトリを消去します。</target>
        </trans-unit>
        <trans-unit id="10e1a36a6e86303ee4a132c4243a7ef3f4a0f97c" translate="yes" xml:space="preserve">
          <source>Comments and whitespace.</source>
          <target state="translated">コメントと空白。</target>
        </trans-unit>
        <trans-unit id="00c5252c394597f9ca37e455c6ff334c93f1a9f0" translate="yes" xml:space="preserve">
          <source>Consider this code:</source>
          <target state="translated">このコードを考えてみてください。</target>
        </trans-unit>
        <trans-unit id="03a4abd57d000d82757a47e03f729cf2f66297f0" translate="yes" xml:space="preserve">
          <source>Define a class &lt;code&gt;A&lt;/code&gt; in &lt;code&gt;src/test/java&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;src/test/java&lt;/code&gt; でクラス &lt;code&gt;A&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="c623c7b768489fab630b485d95641b4aab649d5d" translate="yes" xml:space="preserve">
          <source>Define another class &lt;code&gt;B&lt;/code&gt; in &lt;code&gt;src/main/java&lt;/code&gt; that uses class &lt;code&gt;A&lt;/code&gt;.</source>
          <target state="translated">クラス &lt;code&gt;A&lt;/code&gt; を使用する別のクラス &lt;code&gt;B&lt;/code&gt; を &lt;code&gt;src/main/java&lt;/code&gt; で定義します。</target>
        </trans-unit>
        <trans-unit id="3c749184705363c97aa3586bcea75ae3d37ba27c" translate="yes" xml:space="preserve">
          <source>Despite the previous declaration, the &lt;code&gt;tmp&lt;/code&gt; in the &lt;code&gt;tmp(...)&lt;/code&gt; expression is erroneous.  The compiler will look for a method called &lt;code&gt;tmp&lt;/code&gt;, and won't find one.  The previously declared &lt;code&gt;tmp&lt;/code&gt; is in the namespace for variables, not the namespace for methods.</source>
          <target state="translated">前の宣言にもかかわらず、 &lt;code&gt;tmp(...)&lt;/code&gt; 式のtmpに誤りがあります。 コンパイラーは &lt;code&gt;tmp&lt;/code&gt; というメソッドを探しますが、見つかりません。 以前に宣言された &lt;code&gt;tmp&lt;/code&gt; は、メソッドの名前空間ではなく、変数の名前空間にあります。</target>
        </trans-unit>
        <trans-unit id="d66f4f4483f60c774568275881b207f08a5d8c82" translate="yes" xml:space="preserve">
          <source>Don't define your dependencies that way; i.e. don't make this mistake.</source>
          <target state="translated">依存関係をそのように定義してはいけません。</target>
        </trans-unit>
        <trans-unit id="4555e90d6a07ae7f3d831a41b212be91f5264f4e" translate="yes" xml:space="preserve">
          <source>Figure out &lt;em&gt;why&lt;/em&gt; the compiler is saying that it cannot find the symbol; see above!</source>
          <target state="translated">コンパイラがシンボルを見つけられないと言っている&lt;em&gt;理由を理解し&lt;/em&gt;てください。 上記を参照！</target>
        </trans-unit>
        <trans-unit id="5a40d61defc50eada77edf3e51ddbdb20651cdbf" translate="yes" xml:space="preserve">
          <source>Finally do right click on project Debug as -&amp;gt; Maven clean, Maven build steps</source>
          <target state="translated">最後にプロジェクトを右クリックして、Debug as-&amp;gt; Maven clean、Maven build stepsを実行します</target>
        </trans-unit>
        <trans-unit id="b67b4431d08befda8369ca08185a5fa3fc057dd1" translate="yes" xml:space="preserve">
          <source>Firstly, it is a &lt;em&gt;compilation error&lt;/em&gt;&lt;sup&gt;1&lt;/sup&gt;.  It means that &lt;em&gt;either&lt;/em&gt; there is a problem in your Java source code, &lt;em&gt;or&lt;/em&gt; there is a problem in the way that you are compiling it.</source>
          <target state="translated">まず、 &lt;em&gt;コンパイルエラー&lt;/em&gt; &lt;sup&gt;1&lt;/sup&gt;です。 これは、Javaソースコードに問題があるか、それをコンパイルする方法に問題があることを意味します。</target>
        </trans-unit>
        <trans-unit id="1bff2a45c132371502c189a2ec96875f148f80ce" translate="yes" xml:space="preserve">
          <source>For cases where type or instance doesn't appear to have the member you were expecting it to have:</source>
          <target state="translated">型やインスタンスが期待していたメンバを持っていないように見える場合。</target>
        </trans-unit>
        <trans-unit id="0eaf6b92b18a5e06656d1c2befd33a48f148eed9" translate="yes" xml:space="preserve">
          <source>For example, Java 7 and Java 8 have different APIs, so calling a non-existent API in an older Java version would cause this error.</source>
          <target state="translated">例えば、Java 7とJava 8ではAPIが異なるため、古いJavaバージョンで存在しないAPIを呼び出すと、このエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="489ed2865822e0a639076b40cdcca536a50e7856" translate="yes" xml:space="preserve">
          <source>For hints, look closer at the class name name that throws an error and the line number, example:
Compilation failure
[ERROR] \applications\xxxxx.java:[44,30] error: cannot find symbol</source>
          <target state="translated">ヒントは、エラーが出るクラス名と行番号をよく見てください。</target>
        </trans-unit>
        <trans-unit id="508027fb1f56d20868add276f5eef8710605430f" translate="yes" xml:space="preserve">
          <source>For identifiers in general:</source>
          <target state="translated">識別子全般について。</target>
        </trans-unit>
        <trans-unit id="6264ba90ffdabb3d38c94db49b185cc1b45d025f" translate="yes" xml:space="preserve">
          <source>For identifiers that should be class names:</source>
          <target state="translated">クラス名であるべき識別子の場合。</target>
        </trans-unit>
        <trans-unit id="d534eeffe880e9590bd41400cbacea70fd22e32d" translate="yes" xml:space="preserve">
          <source>For identifiers that should be method or field names:</source>
          <target state="translated">メソッド名やフィールド名であるべき識別子を指定します。</target>
        </trans-unit>
        <trans-unit id="a3246fd98c3edd208eada5e78b5fac9b65cdabb9" translate="yes" xml:space="preserve">
          <source>For identifiers that should refer to variables:</source>
          <target state="translated">変数を参照すべき識別子の場合。</target>
        </trans-unit>
        <trans-unit id="c81ac520ed90fc88097496e38469d529bfda23aa" translate="yes" xml:space="preserve">
          <source>Generally speaking, you start out by figuring out what &lt;em&gt;caused&lt;/em&gt; the compilation error.</source>
          <target state="translated">一般的に言えば、コンパイルエラーの&lt;em&gt;原因を&lt;/em&gt;突き止めることから始めます。</target>
        </trans-unit>
        <trans-unit id="e02ff48e182d307e3931c974c1774675df7fef1f" translate="yes" xml:space="preserve">
          <source>Here are a couple of cases where the &quot;Cannot find symbol&quot; is seemingly inexplicable ... until you look closer.</source>
          <target state="translated">ここでは、「シンボルが見つからない」という一見不可解なケースをいくつか紹介します......よく見るまでは。</target>
        </trans-unit>
        <trans-unit id="7bb9305314b1da2ada3fcc9889b1fdf9e1b90014" translate="yes" xml:space="preserve">
          <source>Here is an example of how incorrect variable scoping can lead to a &quot;Cannot find symbol&quot; error:</source>
          <target state="translated">ここでは、変数のスコープが正しくないと「シンボルが見つかりません」というエラーが発生する例を示します。</target>
        </trans-unit>
        <trans-unit id="d9116bbb7526fea528102bbe4d7e6692b3eca94b" translate="yes" xml:space="preserve">
          <source>Here is an example that causes puzzlement where a typo leads to a seemingly inexplicable &quot;Cannot find symbol&quot; error:</source>
          <target state="translated">ここでは、タイプミスが原因で、一見不可解な「記号が見つかりません」というエラーが発生し、困惑させてしまう例を紹介します。</target>
        </trans-unit>
        <trans-unit id="38c44cdc5b4151c3b9d79cc6caec319a7d932ed7" translate="yes" xml:space="preserve">
          <source>Here is another example of &quot;Cannot find symbol&quot; error that is caused by a typo.</source>
          <target state="translated">ここにも、タイプミスによる「シンボルが見つからない」エラーの例があります。</target>
        </trans-unit>
        <trans-unit id="411bea257ffa9a029ed8e85054f7b481d41d9a05" translate="yes" xml:space="preserve">
          <source>How does the programmer go about fixing them?</source>
          <target state="translated">プログラマーはどうやって直すの?</target>
        </trans-unit>
        <trans-unit id="a2b4add9394740694e235ef9369737b77324982b" translate="yes" xml:space="preserve">
          <source>I could add a declaration for &lt;code&gt;j&lt;/code&gt;&lt;em&gt;before&lt;/em&gt; the inner &lt;code&gt;for&lt;/code&gt; loop, or the outer &lt;code&gt;for&lt;/code&gt; loop - possibly correct.</source>
          <target state="translated">内側の &lt;code&gt;for&lt;/code&gt; ループまたは外側の &lt;code&gt;for&lt;/code&gt; ループの&lt;em&gt;前&lt;/em&gt;に &lt;code&gt;j&lt;/code&gt; の宣言を追加できます-おそらく正しいです。</target>
        </trans-unit>
        <trans-unit id="b574f210ec1b9e0b834b37182250ad9e29535de3" translate="yes" xml:space="preserve">
          <source>I could change &lt;code&gt;j&lt;/code&gt; to &lt;code&gt;i&lt;/code&gt; in the inner &lt;code&gt;for&lt;/code&gt; loop - probably wrong!</source>
          <target state="translated">内部の &lt;code&gt;for&lt;/code&gt; ループで &lt;code&gt;j&lt;/code&gt; を &lt;code&gt;i&lt;/code&gt; に変更できます-おそらく間違っています！</target>
        </trans-unit>
        <trans-unit id="0c5cb638ac507461fc92e195933f3b988ffd2a85" translate="yes" xml:space="preserve">
          <source>I could change the inner &lt;code&gt;for&lt;/code&gt; to &lt;code&gt;for (int j = 1; j &amp;lt; 10; j++)&lt;/code&gt; - probably correct.</source>
          <target state="translated">私はインナーを &lt;code&gt;for (int j = 1; j &amp;lt; 10; j++)&lt;/code&gt; 変更できます-おそらく正しいです。</target>
        </trans-unit>
        <trans-unit id="c664327bcb301c3bfaa2fa3f71294453f347c7a6" translate="yes" xml:space="preserve">
          <source>I too was getting this error. (for which I googled and I was directed to this page)</source>
          <target state="translated">私もこのエラーが出ました。(そのためにググったらこのページにたどり着きました)</target>
        </trans-unit>
        <trans-unit id="d318b2f5104ca4be4178cbec3a7dd716b5f623ec" translate="yes" xml:space="preserve">
          <source>I'll create a demo class and print a name...</source>
          <target state="translated">デモクラスを作って名前を印刷してみる・・・。</target>
        </trans-unit>
        <trans-unit id="a4aa95d612769c53f68101c2a4c905d8b8bcf31d" translate="yes" xml:space="preserve">
          <source>Identifiers: like &lt;code&gt;Reader&lt;/code&gt;, &lt;code&gt;i&lt;/code&gt;, &lt;code&gt;toString&lt;/code&gt;, &lt;code&gt;processEquibalancedElephants&lt;/code&gt;, and so on.</source>
          <target state="translated">識別子： &lt;code&gt;Reader&lt;/code&gt; 、 &lt;code&gt;i&lt;/code&gt; 、 &lt;code&gt;toString&lt;/code&gt; 、 &lt;code&gt;processEquibalancedElephants&lt;/code&gt; などのように。</target>
        </trans-unit>
        <trans-unit id="2ed04476eb06f51638e06c308e7b3b7f06e657c5" translate="yes" xml:space="preserve">
          <source>Identify which symbol that the error message is talking about.</source>
          <target state="translated">エラーメッセージが話しているシンボルを特定してください。</target>
        </trans-unit>
        <trans-unit id="d4b0225765fb3c89ea9f8d8462004e11a606ea1c" translate="yes" xml:space="preserve">
          <source>If eclipse Java build path is mapped to 7, 8 and in Project pom.xml Maven properties java.version is mentioned higher Java version(9,10,11, etc..,) than 7,8 you need to update in pom.xml file.</source>
          <target state="translated">eclipseのJavaビルドパスが7,8にマップされていて、Project pom.xmlのMavenプロパティでjava.versionが7,8よりも高いJavaバージョン(9,10,11など)と記載されている場合は、pom.xmlファイルを更新する必要があります。</target>
        </trans-unit>
        <trans-unit id="3d8126f41737295a83d2045434a773bb08bb0309" translate="yes" xml:space="preserve">
          <source>If you are using IntelliJ</source>
          <target state="translated">IntelliJを使用している場合</target>
        </trans-unit>
        <trans-unit id="01191d176211cc9cdeebc7bb6fc5b591a0bb0454" translate="yes" xml:space="preserve">
          <source>If you're getting this error in the build somewhere else, while your IDE says everything is perfectly fine, then check that you are using the same Java versions in both places.</source>
          <target state="translated">もし、IDE が問題ないと言っているのに、どこか他の場所のビルドでこのエラーが発生している場合は、両方の場所で同じ Java のバージョンを使用しているかどうかを確認してください。</target>
        </trans-unit>
        <trans-unit id="b4099add2e8deea09e90c019f0c17de2b69ce78e" translate="yes" xml:space="preserve">
          <source>In Eclipse if Java is mapped to Java version 11 and in pom.xml it is mapped to Java version 8. Update Eclipse support to Java 11 by go through below steps in eclipse IDE
Help -&amp;gt; Install New Software -&amp;gt;</source>
          <target state="translated">Eclipseでは、JavaがJavaバージョン11にマップされ、pom.xmlでJavaバージョン8にマップされます。EclipseIDEヘルプ-&amp;gt;新しいソフトウェアのインストール-&amp;gt;で以下の手順を実行して、EclipseサポートをJava 11に更新します。</target>
        </trans-unit>
        <trans-unit id="3707462d39f48e8f83d240929ef600d83c92bf96" translate="yes" xml:space="preserve">
          <source>In my case - I had to perform below operations:</source>
          <target state="translated">私の場合は-以下の操作をしなければならなかった。</target>
        </trans-unit>
        <trans-unit id="279ed8fd3d42d71d6f60443a94cd0286001a4068" translate="yes" xml:space="preserve">
          <source>In the example I came across, the programmer had actually left out an operator.  What he meant to write was this:</source>
          <target state="translated">私が出くわした例では、実はプログラマーは演算子を省いていました。彼が書きたかったのは、次のようなことです。</target>
        </trans-unit>
        <trans-unit id="fd4f868a9a9dc8ed33d186b40b683e819975d4a7" translate="yes" xml:space="preserve">
          <source>It turned out that the programmer had created their own version of &lt;code&gt;String&lt;/code&gt; and that his version of the class didn't define a &lt;code&gt;substring&lt;/code&gt; methods.</source>
          <target state="translated">プログラマーが独自のバージョンの &lt;code&gt;String&lt;/code&gt; を作成し、クラスの彼のバージョンは &lt;code&gt;substring&lt;/code&gt; メソッドを定義していないことがわかりました 。</target>
        </trans-unit>
        <trans-unit id="c3369b2c0b08c13aa5b2e2973d0f82561c0dcd99" translate="yes" xml:space="preserve">
          <source>It's especially bad if you thought you did something good. I've seen this kind of error after &quot;optimizing&quot; code like this:</source>
          <target state="translated">特に良いことをしたと思っていた場合は最悪です。このようなコードを「最適化」した後にこのようなエラーが出るのを見たことがあります。</target>
        </trans-unit>
        <trans-unit id="96de2cd3373fca464752545482b01f898f3b2422" translate="yes" xml:space="preserve">
          <source>Java has no &lt;code&gt;free()&lt;/code&gt; or &lt;code&gt;delete&lt;/code&gt; operators, so it has to rely on tracking variable scope to find out when variables are no longer used (together with references to these variables of cause).</source>
          <target state="translated">Javaには &lt;code&gt;free()&lt;/code&gt; または &lt;code&gt;delete&lt;/code&gt; 演算子がないため、変数が使用されなくなったときに（原因のこれらの変数への参照と共に）変数スコープの追跡に依存する必要があります。</target>
        </trans-unit>
        <trans-unit id="d5cf694131cfabd3f90b48c64a0948a32d0ac80d" translate="yes" xml:space="preserve">
          <source>Keywords: like &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;class&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, and so on.</source>
          <target state="translated">キーワード： &lt;code&gt;true&lt;/code&gt; 、 &lt;code&gt;false&lt;/code&gt; 、 &lt;code&gt;class&lt;/code&gt; 、 &lt;code&gt;while&lt;/code&gt; のように。</target>
        </trans-unit>
        <trans-unit id="cf800e149fcda7f72650093e176be369e11e2411" translate="yes" xml:space="preserve">
          <source>Lesson: Don't define your own classes with the same names as common library classes!</source>
          <target state="translated">レッスンです。一般的なライブラリクラスと同じ名前で自分のクラスを定義してはいけません!</target>
        </trans-unit>
        <trans-unit id="0c7944f98cdb5632c8df9726b7c06e89dc7cd3ba" translate="yes" xml:space="preserve">
          <source>Literals: like &lt;code&gt;42&lt;/code&gt; and &lt;code&gt;'X'&lt;/code&gt; and &lt;code&gt;&quot;Hi mum!&quot;&lt;/code&gt;.</source>
          <target state="translated">リテラル： &lt;code&gt;42&lt;/code&gt; や &lt;code&gt;'X'&lt;/code&gt; や &lt;code&gt;&quot;Hi mum!&quot;&lt;/code&gt; など 。</target>
        </trans-unit>
        <trans-unit id="322617019d38997630b02d475d33cb50cc1fd5ea" translate="yes" xml:space="preserve">
          <source>Look at the line in the file indicated by the compilation error message.</source>
          <target state="translated">コンパイルエラーメッセージが表示されているファイルの行を見てください。</target>
        </trans-unit>
        <trans-unit id="3f28f5aebc97bc7dc51c89b5c60fc4b886366293" translate="yes" xml:space="preserve">
          <source>Move &lt;code&gt;context.xml&lt;/code&gt; file from &lt;code&gt;src/java/package&lt;/code&gt; to the &lt;code&gt;resource&lt;/code&gt; directory (IntelliJ
IDE)</source>
          <target state="translated">&lt;code&gt;context.xml&lt;/code&gt; ファイルを &lt;code&gt;src/java/package&lt;/code&gt; から &lt;code&gt;resource&lt;/code&gt; ディレクトリに移動します（IntelliJ IDE）</target>
        </trans-unit>
        <trans-unit id="a101ed00baa59642409c5b221aeeee229dacccb6" translate="yes" xml:space="preserve">
          <source>Not really. &quot;Cannot find symbol&quot; and &quot;Cannot resolve symbol&quot; mean the same thing.  Some Java compilers use one phrase, and some the other one.</source>
          <target state="translated">そうでもないんです。&quot;シンボルが見つからない&quot; と &quot;シンボルを解決できない&quot; は同じ意味です。Javaのコンパイラによっては、片方のフレーズを使うものもあれば、もう片方のフレーズを使うものもあります。</target>
        </trans-unit>
        <trans-unit id="e682efe4ad58b7666e4a8c49fb873688aa94123d" translate="yes" xml:space="preserve">
          <source>Note that not every &quot;correction&quot; is correct. Consider this:</source>
          <target state="translated">すべての「修正」が正しいとは限らないことに注意してください。これを考えてみてください。</target>
        </trans-unit>
        <trans-unit id="36294ef436272a4b5d6f51acc508e02446f3c39e" translate="yes" xml:space="preserve">
          <source>Now look at the new output...</source>
          <target state="translated">さて、新しい出力を見てください...</target>
        </trans-unit>
        <trans-unit id="ea758a54fb265bfd8c5bdc6b6c9abea5c055fc53" translate="yes" xml:space="preserve">
          <source>Now look at the result..</source>
          <target state="translated">さて、結果を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="f579c523960af1aec824c6fdc57af6d4abd76a1f" translate="yes" xml:space="preserve">
          <source>OR</source>
          <target state="translated">OR</target>
        </trans-unit>
        <trans-unit id="6fc668dd460be20b331a80fbe3b9b422a9f44840" translate="yes" xml:space="preserve">
          <source>Ok Successfully solved that error..At the same time , if you could get &quot;can not find method &quot; or &quot;can not find class&quot; something , At first,define a class or method and after use that..</source>
          <target state="translated">同時に、「メソッドが見つからない」「クラスが見つからない」などのエラーが発生した場合は、まずクラスやメソッドを定義して、それを使ってみましょう。</target>
        </trans-unit>
        <trans-unit id="a4fe2ac2e0f9bafcbcc63ef034d3e2b5ca534b71" translate="yes" xml:space="preserve">
          <source>One other cause is unsupported method of for java version say jdk7 vs 8.
Check your %JAVA_HOME%</source>
          <target state="translated">他の原因としては、Java のバージョンが jdk7 と 8 の場合、サポートされていないメソッドがあります。</target>
        </trans-unit>
        <trans-unit id="115515e66b9f7e9d2d2d86abfa3a31ab847208ff" translate="yes" xml:space="preserve">
          <source>One way to get this error in Eclipse :</source>
          <target state="translated">Eclipse .NETでこのエラーを取得する1つの方法があります。</target>
        </trans-unit>
        <trans-unit id="0a09c8dcd5f58792f08b0cc65bc25b03bd62171e" translate="yes" xml:space="preserve">
          <source>Operators and other non-alphanumeric tokens: like &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;=&lt;/code&gt;, &lt;code&gt;{&lt;/code&gt;, and so on.</source>
          <target state="translated">演算子とその他の英数字以外のトークン： &lt;code&gt;+&lt;/code&gt; 、 &lt;code&gt;=&lt;/code&gt; 、 &lt;code&gt;{&lt;/code&gt; など。</target>
        </trans-unit>
        <trans-unit id="de3e7889b064a0064cc55612d55ec50f0847c14a" translate="yes" xml:space="preserve">
          <source>Other symbol errors on Android are likely to be due to previously mention reasons; e.g. missing or incorrect dependencies, incorrect package names, method or fields that don't exist in a particular API version, spelling / typing errors, and so on.</source>
          <target state="translated">Android でのその他のシンボルエラーは、先に述べた理由に起因する可能性があります。例えば、依存関係の欠落や不正確なパッケージ名、特定の API バージョンには存在しないメソッドやフィールド、スペルの入力ミスなどです。</target>
        </trans-unit>
        <trans-unit id="fe4343952b64af4161002ce5ee028942a632b88c" translate="yes" xml:space="preserve">
          <source>Paste following link &lt;a href=&quot;http://download.eclipse.org/eclipse/updates/4.9-P-builds&quot;&gt;http://download.eclipse.org/eclipse/updates/4.9-P-builds&lt;/a&gt; at &lt;strong&gt;&lt;em&gt;Work With&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">次のリンクを貼り付け&lt;a href=&quot;http://download.eclipse.org/eclipse/updates/4.9-P-builds&quot;&gt;http://download.eclipse.org/eclipse/updates/4.9-P-builds&lt;/a&gt; at &lt;strong&gt;&lt;em&gt;Work With&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="57ba20500e8433587e3e15fadb2e06671f30ea8d" translate="yes" xml:space="preserve">
          <source>Perhaps the variable declaration is out of scope at the point you tried to use it.  (See example below)</source>
          <target state="translated">おそらく、使用しようとした時点で変数宣言がスコープ外になっているのではないでしょうか。(以下の例を参照してください)</target>
        </trans-unit>
        <trans-unit id="1320bf437a9c63a9f893bd4c962327e989878bd0" translate="yes" xml:space="preserve">
          <source>Perhaps you are mistakenly operating on an array rather than array element; e.g.</source>
          <target state="translated">おそらく、間違って配列要素ではなく配列を操作しているのではないでしょうか。</target>
        </trans-unit>
        <trans-unit id="6aee976e340fbce67d71c60ea5215628b25acd69" translate="yes" xml:space="preserve">
          <source>Perhaps you are shadowing a static or instance variable.</source>
          <target state="translated">おそらく、静的変数やインスタンス変数をシャドウイングしているのではないでしょうか。</target>
        </trans-unit>
        <trans-unit id="46ff260697563ca568093a999da1ef5b12b44dc9" translate="yes" xml:space="preserve">
          <source>Perhaps you are trying to refer to a method or field that does not exist (i.e. has not been declared) in the type you are using; e.g. &lt;code&gt;&quot;someString&quot;.push()&lt;/code&gt;&lt;sup&gt;2&lt;/sup&gt;.</source>
          <target state="translated">おそらく、使用している型に存在しない（つまり、宣言されていない）メソッドまたはフィールドを参照しようとしている可能性があります。 例： &lt;code&gt;&quot;someString&quot;.push()&lt;/code&gt; &lt;sup&gt;2&lt;/sup&gt; 。</target>
        </trans-unit>
        <trans-unit id="6a82a94ccdb7dbb7f268d442c7762df7c3f1f9eb" translate="yes" xml:space="preserve">
          <source>Perhaps you are trying to refer to an inherited method or field that wasn't declared in the parent / ancestor classes or interfaces.</source>
          <target state="translated">おそらく、親の祖先クラスやインターフェイスで宣言されていない継承されたメソッドやフィールドを参照しようとしているのではないでしょうか。</target>
        </trans-unit>
        <trans-unit id="fdd7793f0ad12f111730e75e9d3fc8ea8c20d96d" translate="yes" xml:space="preserve">
          <source>Perhaps you are trying to use a method as a field, or vice versa; e.g. &lt;code&gt;&quot;someString&quot;.length&lt;/code&gt; or &lt;code&gt;someArray.length()&lt;/code&gt;.</source>
          <target state="translated">おそらく、メソッドをフィールドとして使用しようとしている、またはその逆です。 例： &lt;code&gt;&quot;someString&quot;.length&lt;/code&gt; または &lt;code&gt;someArray.length()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="12b0aca497ae9b4b3decc5ec061d41321b10b293" translate="yes" xml:space="preserve">
          <source>Perhaps you are trying to use something that was declared &quot;somewhere else&quot;; i.e. in a different context to where you have implicitly told the compiler to look.  (A different class?  A different scope?  A different package?  A different code-base?)</source>
          <target state="translated">おそらく、「どこか他の場所」で宣言されたものを使おうとしているのではないでしょうか。(別のクラス?違うスコープ?別のパッケージ?違うコードベース?)</target>
        </trans-unit>
        <trans-unit id="ef4cfdc9fe68d1619053569b2ca4a9ca6dd56e30" translate="yes" xml:space="preserve">
          <source>Perhaps you are using (compiling against) the wrong version of an API.</source>
          <target state="translated">おそらく、間違ったバージョンのAPIを使っている(コンパイルしている)のではないでしょうか。</target>
        </trans-unit>
        <trans-unit id="ac650b2e5cd256fe4a76abdd9c783ac3a3188aba" translate="yes" xml:space="preserve">
          <source>Perhaps you forgot a &lt;code&gt;new&lt;/code&gt; as in:</source>
          <target state="translated">おそらくあなたは次のように &lt;code&gt;new&lt;/code&gt; ものを忘れました：</target>
        </trans-unit>
        <trans-unit id="0945cb62dcdac85c50e370f1aa2e90fd780795a3" translate="yes" xml:space="preserve">
          <source>Perhaps you forgot to cast your object to an appropriate subclass.</source>
          <target state="translated">おそらく、オブジェクトを適切なサブクラスにキャストするのを忘れたのでしょう。</target>
        </trans-unit>
        <trans-unit id="a83c9dc2e88fae89091fd1b60fbe89b4764d5d76" translate="yes" xml:space="preserve">
          <source>Perhaps you forgot to declare the variable.</source>
          <target state="translated">おそらく、変数を宣言するのを忘れていたのでしょう。</target>
        </trans-unit>
        <trans-unit id="b4c11cb6a68260241e8f9ed0d217b264d3387939" translate="yes" xml:space="preserve">
          <source>Perhaps you forgot to import the class.</source>
          <target state="translated">おそらく、クラスをインポートするのを忘れているのではないでしょうか。</target>
        </trans-unit>
        <trans-unit id="7300f07d366229b926caa084b75f0d5b827d3738" translate="yes" xml:space="preserve">
          <source>Perhaps you got the case wrong; i.e. &lt;code&gt;stringBuilder&lt;/code&gt; instead of &lt;code&gt;StringBuilder&lt;/code&gt;.  All Java identifiers are case sensitive.</source>
          <target state="translated">おそらくあなたはケースを間違ってしまった。 つまり、 &lt;code&gt;StringBuilder&lt;/code&gt; ではなく &lt;code&gt;stringBuilder&lt;/code&gt; です。 すべてのJava識別子は大文字と小文字を区別します。</target>
        </trans-unit>
        <trans-unit id="c55c00cf5f6b9ca455d9ff01d1a74ff9200a61df" translate="yes" xml:space="preserve">
          <source>Perhaps you have declared a nested class or a generic parameter that &lt;em&gt;shadows&lt;/em&gt; the type you were meaning to use.</source>
          <target state="translated">おそらく、使用するつもりだった型を&lt;em&gt;隠す&lt;/em&gt;ネストされたクラスまたはジェネリックパラメーターを宣言しました。</target>
        </trans-unit>
        <trans-unit id="8d832011eca37e28c618cae4601c9f67af94c90d" translate="yes" xml:space="preserve">
          <source>Perhaps you imported the wrong type; e.g. due to IDE completion or auto-correction.</source>
          <target state="translated">IDEの補完や自動修正などの理由で、間違ったタイプをインポートしてしまったのかもしれません。</target>
        </trans-unit>
        <trans-unit id="3457de5ed68272b30bc1cee83d5c61dada01c081" translate="yes" xml:space="preserve">
          <source>Perhaps you spelled the name incorrectly; i.e. &lt;code&gt;StringBiulder&lt;/code&gt; instead of &lt;code&gt;StringBuilder&lt;/code&gt;.  Java cannot and will not attempt to compensate for bad spelling or typing errors.</source>
          <target state="translated">おそらく、名前のスペルを間違えたかもしれません。 つまり、 &lt;code&gt;StringBuilder&lt;/code&gt; ではなく &lt;code&gt;StringBiulder&lt;/code&gt; です。 Javaは、スペルミスや入力ミスを補うことはできません。</target>
        </trans-unit>
        <trans-unit id="02d939dd2166f0aba900adb5ef93ce2e07880bd4" translate="yes" xml:space="preserve">
          <source>Perhaps you used &quot;star&quot; imports, but the class isn't defined in any of the packages that you imported.</source>
          <target state="translated">おそらく &quot;star&quot; のインポートを使用したのでしょうが、インポートしたパッケージではクラスが定義されていません。</target>
        </trans-unit>
        <trans-unit id="1c880a383e9414b359a6bcd231c4c09c5c3e676e" translate="yes" xml:space="preserve">
          <source>Perhaps you used underscores inappropriately; i.e. &lt;code&gt;mystring&lt;/code&gt; and &lt;code&gt;my_string&lt;/code&gt; are different.  (If you stick to the Java style rules, you will be largely protected from this mistake ...)</source>
          <target state="translated">アンダースコアを不適切に使用した可能性があります。 つまり、 &lt;code&gt;mystring&lt;/code&gt; と &lt;code&gt;my_string&lt;/code&gt; は異なります。 （Javaスタイルのルールに固執すれば、この間違いからほぼ保護されます...）</target>
        </trans-unit>
        <trans-unit id="53cc0754cd241aca6b6d84a3002595e2de09c7d7" translate="yes" xml:space="preserve">
          <source>Please explain the following about &quot;Cannot find symbol&quot; and &quot;Cannot resolve symbol&quot; errors:</source>
          <target state="translated">シンボルが見つからない」「シンボルが解決できない」というエラーについて、以下の説明をお願いします。</target>
        </trans-unit>
        <trans-unit id="e40dd27e85365d42501c3e5410ee1479ca80e733" translate="yes" xml:space="preserve">
          <source>Regularly build your codebase using Maven so that you pick up this mistake early.  One way to do that is to use a CI server.</source>
          <target state="translated">この間違いを早期に発見できるように、定期的にMavenを使ってコードベースを構築してください。そのための1つの方法はCIサーバを使うことです。</target>
        </trans-unit>
        <trans-unit id="888cbf38a75566abc056d55345f7f674edef10cb" translate="yes" xml:space="preserve">
          <source>Result : Eclipse will compile the code, but maven will give &quot;Cannot find symbol&quot;.</source>
          <target state="translated">結果:Eclipseはコードをコンパイルしますが、mavenは &quot;Cannot find symbol &quot;と表示されます。</target>
        </trans-unit>
        <trans-unit id="f16e5da091aafb61a1ef145b9dd6df98c57ab4d7" translate="yes" xml:space="preserve">
          <source>Select &lt;strong&gt;Build&lt;/strong&gt;-&amp;gt;&lt;strong&gt;Rebuild Project&lt;/strong&gt; will solve it</source>
          <target state="translated">&lt;strong&gt;ビルド&lt;/strong&gt; -&amp;gt; &lt;strong&gt;プロジェクトの再&lt;/strong&gt; &lt;strong&gt;ビルドを&lt;/strong&gt;選択して解決します</target>
        </trans-unit>
        <trans-unit id="7f0f422fa628ed3844254b3d368c3e78493dfc13" translate="yes" xml:space="preserve">
          <source>Solution :</source>
          <target state="translated">解決策 .</target>
        </trans-unit>
        <trans-unit id="bcc27e1cb4ffe2cc4a2aa9ef163e5c6dfc44a236" translate="yes" xml:space="preserve">
          <source>Solution: Again compile it and then run test. For me it worked this way.</source>
          <target state="translated">解決策です。もう一度コンパイルしてからテストを実行してください。私の場合はこのように動作しました。</target>
        </trans-unit>
        <trans-unit id="6f240bcd6e2eb2162dcdd0d74d48224a6f6d5145" translate="yes" xml:space="preserve">
          <source>Suppose that the compiler says &quot;Cannot find symbol&quot; for &lt;code&gt;j&lt;/code&gt;.  There are many ways I could &quot;fix&quot; that:</source>
          <target state="translated">コンパイラが &lt;code&gt;j&lt;/code&gt; に対して「シンボルが見つかりません」と言ったとします。 それを「修正」できる方法はたくさんあります。</target>
        </trans-unit>
        <trans-unit id="e05af58fe572f58df5a2e87cc1750911eadbba9e" translate="yes" xml:space="preserve">
          <source>That error says, &quot;variable name can not find&quot;..Defining and initializing value for 'name' variable  can be abolished that error..Actually like this,</source>
          <target state="translated">このエラーは「変数名が見つかりません」というもので、変数名を定義して初期化することでそのエラーをなくすことができます。</target>
        </trans-unit>
        <trans-unit id="921b2d0459276f34152b34350cafb64c7e569d68" translate="yes" xml:space="preserve">
          <source>That's invalid code. Because neither of the variables named &lt;code&gt;message&lt;/code&gt; is visible outside of their respective scope - which would be the surrounding brackets &lt;code&gt;{}&lt;/code&gt; in this case.</source>
          <target state="translated">これは無効なコードです。 というのも、 &lt;code&gt;message&lt;/code&gt; という名前の変数は、それぞれのスコープの外には表示されません。この場合、括弧 &lt;code&gt;{}&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="8a0a3e47242a89ac0ce11d2c73461bae9df0ac76" translate="yes" xml:space="preserve">
          <source>The  most common way to deal with this kind of scope-trouble would be to pre-assign the else-values to the variable names in the outside scope and then reassign in if:</source>
          <target state="translated">この種のスコープトラブルに対処する最も一般的な方法は、外部スコープ内の変数名に else-value を事前に代入し、if 内で再代入することです。</target>
        </trans-unit>
        <trans-unit id="142d9901807f8cfa96b29d25c5341d4e76e2f44b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{ ... }&lt;/code&gt; block is NOT the body of the &lt;code&gt;for&lt;/code&gt; loop, and therefore the previous declaration of &lt;code&gt;i&lt;/code&gt; in the &lt;code&gt;for&lt;/code&gt; statement is &lt;em&gt;out of scope&lt;/em&gt; in the block.</source>
          <target state="translated">&lt;code&gt;{ ... }&lt;/code&gt; ブロックは &lt;code&gt;for&lt;/code&gt; ループの本体ではないため、 &lt;code&gt;for&lt;/code&gt; ステートメントでの &lt;code&gt;i&lt;/code&gt; の以前の宣言はブロック&lt;em&gt;のスコープ外&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="0f0ae74a91d8b9265d539eaa39911af2672b3656" translate="yes" xml:space="preserve">
          <source>The class being referenced was in another project and that dependency was not added to the Gradle build file of my project. So I added the dependency using</source>
          <target state="translated">参照されているクラスは別のプロジェクトにあり、その依存関係は私のプロジェクトのGradleビルドファイルには追加されていませんでした。そこで、依存関係を追加するには</target>
        </trans-unit>
        <trans-unit id="6848cc18f6b73237f2c46b3b819fef73c4ecf170" translate="yes" xml:space="preserve">
          <source>The point is that you &lt;em&gt;need&lt;/em&gt; to understand what your code is trying to do in order to find the right fix.</source>
          <target state="translated">ポイントは、正しい修正を見つけるために、コードが何をしようとしているのかを理解する&lt;em&gt;必要&lt;/em&gt;があるということです。</target>
        </trans-unit>
        <trans-unit id="50ea0a272ac648921ff545f6cd9e88eb0c0e23d0" translate="yes" xml:space="preserve">
          <source>The problem is often a combination of the above.  For example, maybe you &quot;star&quot; imported &lt;code&gt;java.io.*&lt;/code&gt; and then tried to use the &lt;code&gt;Files&lt;/code&gt; class ... which is in &lt;code&gt;java.nio&lt;/code&gt; not &lt;code&gt;java.io&lt;/code&gt;.  Or maybe you meant to write &lt;code&gt;File&lt;/code&gt; ... which &lt;em&gt;is&lt;/em&gt; a class in &lt;code&gt;java.io&lt;/code&gt;.</source>
          <target state="translated">多くの場合、問題は上記の組み合わせです。 たとえば、インポートした &lt;code&gt;java.io.*&lt;/code&gt; に 「スター」を付けてから、 &lt;code&gt;java.io&lt;/code&gt; ではなく &lt;code&gt;java.nio&lt;/code&gt; にある &lt;code&gt;Files&lt;/code&gt; クラス...を使用しようとした可能性があります 。 または、多分 &lt;code&gt;java.io&lt;/code&gt; のクラスである &lt;code&gt;File&lt;/code&gt; ...を書くつもりでした。</target>
        </trans-unit>
        <trans-unit id="23430d7ccb9972344f087656883e74790288bbd6" translate="yes" xml:space="preserve">
          <source>The problem is the sneaky semicolon ( &lt;code&gt;;&lt;/code&gt; ) before the &lt;code&gt;{&lt;/code&gt;.  The Java language syntax defines a semicolon in that context to be an &lt;em&gt;empty statement&lt;/em&gt;.  The empty statement then becomes the body of the &lt;code&gt;for&lt;/code&gt; loop.  So that code actually means this:</source>
          <target state="translated">問題は、 &lt;code&gt;{&lt;/code&gt; の前の卑劣なセミコロン（ &lt;code&gt;;&lt;/code&gt; ）です。 Java言語の構文では、そのコンテキストのセミコロンを&lt;em&gt;空のステートメント&lt;/em&gt;として定義しています。 次に、空のステートメントが &lt;code&gt;for&lt;/code&gt; ループの本体になります。 したがって、そのコードは実際にこれを意味します：</target>
        </trans-unit>
        <trans-unit id="964b4b2847be390ff11fa20a20389485904aaf25" translate="yes" xml:space="preserve">
          <source>Then you &lt;em&gt;think&lt;/em&gt; about what your code is supposed to be saying.  Then finally you work out what correction you need to make to your source code to do what you want.</source>
          <target state="translated">次に、コードが何を言っているのかを考えます。 次に、最終的に、ソースコードに必要な修正を加えて、必要なことを行います。</target>
        </trans-unit>
        <trans-unit id="8fbba0448a4a615ae5d97b9e2d16540fc9e93dd8" translate="yes" xml:space="preserve">
          <source>There are some other more obscure causes too ... which I will deal with below.</source>
          <target state="translated">他にもいくつかの不明瞭な原因があります......それは以下で説明します。</target>
        </trans-unit>
        <trans-unit id="07b3699aba68a830c1995f93285e9d7c1b599ab2" translate="yes" xml:space="preserve">
          <source>There can be various scenarios as people have mentioned above. A couple of things which have helped me resolve this.</source>
          <target state="translated">上で述べたように、様々なシナリオが考えられます。これを解決してくれたものがいくつかあります。</target>
        </trans-unit>
        <trans-unit id="910b46255ff8e604c5beaaff16f2dec42cf1bade" translate="yes" xml:space="preserve">
          <source>There is another reason why the compiler might not find a symbol if you are compiling from the command line.  You might simply have forgotten to compile or recompile some other class.  For example, if you have classes &lt;code&gt;Foo&lt;/code&gt; and &lt;code&gt;Bar&lt;/code&gt; where &lt;code&gt;Foo&lt;/code&gt; uses &lt;code&gt;Bar&lt;/code&gt;.  If you have never compiled &lt;code&gt;Bar&lt;/code&gt; and you run &lt;code&gt;javac Foo.java&lt;/code&gt;, you are liable to find that the compiler can't find the symbol &lt;code&gt;Bar&lt;/code&gt;.  The simple answer is to compile &lt;code&gt;Foo&lt;/code&gt; and &lt;code&gt;Bar&lt;/code&gt; together; e.g. &lt;code&gt;javac Foo.java Bar.java&lt;/code&gt; or &lt;code&gt;javac *.java&lt;/code&gt;.  Or better still use a Java build tool; e.g. Ant, Maven, Gradle and so on.</source>
          <target state="translated">コマンドラインからコンパイルしている場合、コンパイラがシンボルを見つけられない場合があるもう1つの理由があります。 他のクラスをコンパイルまたは再コンパイルするのを忘れただけかもしれません。 たとえば、 &lt;code&gt;Foo&lt;/code&gt; が &lt;code&gt;Bar&lt;/code&gt; を使用するクラス &lt;code&gt;Foo&lt;/code&gt; と &lt;code&gt;Bar&lt;/code&gt; があるとします。 &lt;code&gt;Bar&lt;/code&gt; をコンパイルしたことがなく、 &lt;code&gt;javac Foo.java&lt;/code&gt; を実行した場合、コンパイラーがシンボル &lt;code&gt;Bar&lt;/code&gt; を見つけられないことがあります。 簡単な答えは、 &lt;code&gt;Foo&lt;/code&gt; と &lt;code&gt;Bar&lt;/code&gt; を一緒にコンパイルすることです。 例： &lt;code&gt;javac Foo.java Bar.java&lt;/code&gt; または &lt;code&gt;javac *.java&lt;/code&gt; 。 または、Javaビルドツールを使用することをお勧めします。 例：Ant、Maven、Gradleなど。</target>
        </trans-unit>
        <trans-unit id="f20dad4ddd9d0a0d2e853fd9b15c3aa9f2c83c67" translate="yes" xml:space="preserve">
          <source>This could be an IDE bug.  For instance @Joel Costigliola describes a scenario where Eclipse does not handle a Maven &quot;test&quot; tree correctly: &lt;a href=&quot;https://stackoverflow.com/a/37207223/139985&quot;&gt;&lt;strong&gt;see this answer&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">これはIDEのバグである可能性があります。 たとえば、@ Joel Costigliolaは、EclipseがMavenの「テスト」ツリーを正しく処理しないシナリオについて説明してい&lt;a href=&quot;https://stackoverflow.com/a/37207223/139985&quot;&gt;&lt;strong&gt;ます&lt;/strong&gt;&lt;/a&gt; 。 &lt;strong&gt;この回答を参照してください&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="2c02e35ce6f8c08d39a4eaefd079ff6e8e253dc3" translate="yes" xml:space="preserve">
          <source>This could happen if the IDE has been configured with the wrong JDK version.</source>
          <target state="translated">これは、IDE が間違った JDK バージョンで設定されている場合に発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="bbbf5cadfff61e0873aeca6ad0ad9bee801aee81" translate="yes" xml:space="preserve">
          <source>This could happen if the IDE's caches get out of sync with the file system.  There are IDE specific ways to fix that.</source>
          <target state="translated">これは、IDE のキャッシュがファイル システムと同期していない場合に発生する可能性があります。これを修正するための IDE 固有の方法があります。</target>
        </trans-unit>
        <trans-unit id="b01aafb35ab303a4d06337ae777e7a4e74e5c697" translate="yes" xml:space="preserve">
          <source>This will give a &quot;Cannot find symbol&quot; error for &lt;code&gt;i&lt;/code&gt; in the &lt;code&gt;if&lt;/code&gt; statement.  Though we previously declared &lt;code&gt;i&lt;/code&gt;, that declaration is only &lt;em&gt;in scope&lt;/em&gt; for the &lt;code&gt;for&lt;/code&gt; statement and its body.  The reference to &lt;code&gt;i&lt;/code&gt; in the &lt;code&gt;if&lt;/code&gt; statement &lt;em&gt;cannot see&lt;/em&gt; that declaration of &lt;code&gt;i&lt;/code&gt;.  It is &lt;em&gt;out of scope&lt;/em&gt;.</source>
          <target state="translated">これにより、 &lt;code&gt;if&lt;/code&gt; ステートメントの &lt;code&gt;i&lt;/code&gt; に「シンボルが見つかりません」エラーが発生します。 以前に &lt;code&gt;i&lt;/code&gt; を宣言しましたが、その宣言は &lt;code&gt;for&lt;/code&gt; ステートメントとその本体の&lt;em&gt;スコープ内&lt;/em&gt;のみです。 &lt;code&gt;if&lt;/code&gt; ステートメントでの &lt;code&gt;i&lt;/code&gt; への &lt;em&gt;参照は&lt;/em&gt; 、そのiの宣言を&lt;em&gt;見る&lt;/em&gt;こと&lt;em&gt;ができません&lt;/em&gt; 。 &lt;em&gt;範囲外&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="7e4c0f9d8e48bbc624e38c18014fa58020f5e9c0" translate="yes" xml:space="preserve">
          <source>This will give you a compilation error in the &lt;code&gt;println&lt;/code&gt; call saying that &lt;code&gt;i&lt;/code&gt; cannot be found.  But (I hear you say) I did declare it!</source>
          <target state="translated">これにより、 &lt;code&gt;println&lt;/code&gt; 呼び出しで、見つからないというコンパイルエラーが発生します。 しかし、（私はあなたが言うのを聞きます）私はそれを宣言しました！</target>
        </trans-unit>
        <trans-unit id="b5ccecd55643c9ced3a50fb5f8f792ef974dcb2c" translate="yes" xml:space="preserve">
          <source>Underlying cause : Eclipse is using a combined build path for the main and test trees.  Unfortunately, it does not support using different build paths for different parts of an Eclipse project, which is what Maven requires.</source>
          <target state="translated">根本的な原因:Eclipse はメインツリーとテストツリーに結合されたビルドパスを使用しています。残念ながら、Eclipse プロジェクトの異なる部分に異なるビルドパスを使用することはサポートされていません。</target>
        </trans-unit>
        <trans-unit id="97afba8bad2290ed282ea6751ac60ea24d61f892" translate="yes" xml:space="preserve">
          <source>What does a “Cannot find symbol” or “Cannot resolve symbol” error mean</source>
          <target state="translated">シンボルが見つかりません」または「シンボルを解決できません」というエラーは何を意味しているのでしょうか?</target>
        </trans-unit>
        <trans-unit id="5b2f493251efca62fc6a5c38c710e6fd686f0203" translate="yes" xml:space="preserve">
          <source>What does they mean?</source>
          <target state="translated">どういう意味なんだろう?</target>
        </trans-unit>
        <trans-unit id="ec76a3c85720057360af6aeac69e22a0af9ba31f" translate="yes" xml:space="preserve">
          <source>What things can cause them?</source>
          <target state="translated">どのようなことが原因になるのでしょうか?</target>
        </trans-unit>
        <trans-unit id="8fa189b574b1f680fd1791244f734d9b433b58e2" translate="yes" xml:space="preserve">
          <source>You can avoid this by restricting yourself to ASCII or Latin-1 as the source file encoding, and using Java &lt;code&gt;\uxxxx&lt;/code&gt; escapes for other characters.</source>
          <target state="translated">これを回避するには、ソースファイルのエンコーディングをASCIIまたはLatin-1に制限し、他の文字にJava &lt;code&gt;\uxxxx&lt;/code&gt; エスケープを使用します。</target>
        </trans-unit>
        <trans-unit id="5fbf64e54e9888bb7006f2741d492ad1a8fecdc3" translate="yes" xml:space="preserve">
          <source>You might say: &quot;But a variable named message is defined either way - so message &lt;em&gt;is&lt;/em&gt; defined after the &lt;code&gt;if&lt;/code&gt;&quot;.</source>
          <target state="translated">あなたは言うかもしれません：「しかし、メッセージという名前の変数はどちらかの方法で定義されます-したがって、メッセージ&lt;em&gt;は&lt;/em&gt; &lt;code&gt;if&lt;/code&gt; の後に定義されます」。</target>
        </trans-unit>
        <trans-unit id="301196cc561379b0dee95ceb62bac48de41efde9" translate="yes" xml:space="preserve">
          <source>You'll also get this error if you forget a &lt;code&gt;new&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt; を忘れた場合にも、このエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="8a79906051f046557755cfac4f362ca1b99f878e" translate="yes" xml:space="preserve">
          <source>Your Java source code consists of the following things:</source>
          <target state="translated">あなたのJavaソースコードは、以下のもので構成されています。</target>
        </trans-unit>
        <trans-unit id="14b8a4ae1130c94635e900e4514a5d8e307392cf" translate="yes" xml:space="preserve">
          <source>and it worked. HTH!</source>
          <target state="translated">そして、それはうまくいった。HTH!</target>
        </trans-unit>
        <trans-unit id="cc72a00bf5f82a31e19586f8d5648eeb9609f807" translate="yes" xml:space="preserve">
          <source>and so on.</source>
          <target state="translated">といったようなことを言っています。</target>
        </trans-unit>
        <trans-unit id="c1219714543094deb1318e6c632a04eb1c699c1b" translate="yes" xml:space="preserve">
          <source>because the call without the &lt;code&gt;new&lt;/code&gt; keyword will try and look for a (local) method called &lt;code&gt;String&lt;/code&gt; without arguments - and that method signature is likely not defined.</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt; キーワードなしの呼び出しは、引数なしで &lt;code&gt;String&lt;/code&gt; と呼ばれる（ローカル）メソッドを探して探すためです。また、そのメソッドシグネチャは定義されていない可能性があります。</target>
        </trans-unit>
        <trans-unit id="ce2eac679bc6f9f09c415d64a16ec2883ac8cf95" translate="yes" xml:space="preserve">
          <source>then update Java version in Maven properties of &lt;strong&gt;pom.xml&lt;/strong&gt; file as below</source>
          <target state="translated">次に、以下のように&lt;strong&gt;pom.xml&lt;/strong&gt;ファイルのMavenプロパティのJavaバージョンを更新します</target>
        </trans-unit>
        <trans-unit id="a8032f8450ec41f406da73828d654efe884bfb75" translate="yes" xml:space="preserve">
          <source>versus</source>
          <target state="translated">versus</target>
        </trans-unit>
        <trans-unit id="bc793ddb89e7eeb5e8595ea1fd8a12af55ec917a" translate="yes" xml:space="preserve">
          <source>you compiled your code using maven compile and then used maven test to run it worked fine. Now if you changed something in your code and then without compiling you are running it, you will get this error.</source>
          <target state="translated">を使用してコードをコンパイルした後、mavenのテストを使用して実行した場合、問題なく動作しました。今、あなたのコードで何かを変更した後、コンパイルせずに実行している場合、このエラーが発生します。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
