<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/25203556">
    <body>
      <group id="25203556">
        <trans-unit id="c510d2e3eb78822e59de418242697b0036a06cff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;APIClient Initial Interface&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;APIClient初期インターフェース&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0fbc4cfbb8ed3c2e9e2e87bc959f96f26da6f10a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Completion Handler&lt;/strong&gt;
Inside set of block is executed and returned when source is available, Handler will wait until response comes so that UI can be updated after.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;完了ハンドラー&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ブロックのセットが実行され、ソースが利用可能になると返されます。ハンドラーは、応答が来るまで待機して、UIを後で更新できるようにします。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="96be8c32566abc60744917724e7efde3788f70b3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Delegates&lt;/strong&gt;
Set of methods will get triggered when delegate is been called, Source must be provided via methods itself</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;デリゲート&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; が呼び出されたときにメソッドの&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;デリゲート&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;セットがトリガーされます。ソースはメソッド自体を介して提供する必要があります&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9a52349be59d2dc0787abf428431179d1c994582" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Notification&lt;/strong&gt;
Bunch of information is triggered over all the app, Listner can retrieve n make use of that info. Async way of getting info through out the project.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;通知の&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 一連の情報がすべてのアプリでトリガーされ、Listnerはその情報を使用して取得できます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プロジェクト全体の情報を取得する非同期の方法。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="30e598d68bea586c7b116fd407356708bc4f521f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Swift 4.0&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Swift 4.0&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f61d88d5c22ed9179275db42ae2b2a5f30ba3e95" translate="yes" xml:space="preserve">
          <source>An alternative approach would be to return a callback that will provide the data you need as soon as it is ready.</source>
          <target state="translated">別のアプローチとしては、必要なデータが準備でき次第、コールバックを返すという方法もあります。</target>
        </trans-unit>
        <trans-unit id="7ebbab529e9a4820968d3b93810887172271b741" translate="yes" xml:space="preserve">
          <source>And you&amp;rsquo;d call it like so:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そして、あなたはそれを次のように呼ぶでしょう：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="67c377687d3900d9ca07b9ce4951a6e91f755ee8" translate="yes" xml:space="preserve">
          <source>But that&amp;rsquo;s not material here. The key issue is the use of completion handler to specify the block of code to be run when the asynchronous request is done.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;しかし、それはここでは重要ではありません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;重要な問題は、完了ハンドラーを使用して、非同期要求が行われたときに実行されるコードのブロックを指定することです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="154376a656eb7c75db283f478a773723f9e32779" translate="yes" xml:space="preserve">
          <source>Closures/Completion handler</source>
          <target state="translated">ClosuresCompletion ハンドラ</target>
        </trans-unit>
        <trans-unit id="7dcccba4f8856a9df41efcf1d5ea4f2cfd327cec" translate="yes" xml:space="preserve">
          <source>Delegates</source>
          <target state="translated">Delegates</target>
        </trans-unit>
        <trans-unit id="f9bdfe712ac0a387c156acf24c7385e968fd6f97" translate="yes" xml:space="preserve">
          <source>For async Request-Response you can use completion handler. See below I have modified the solution with completion handle paradigm.</source>
          <target state="translated">非同期のRequest-Responseの場合は、補完ハンドラを使うことができます。以下を参照して、補完ハンドルのパラダイムを使って解決してみました。</target>
        </trans-unit>
        <trans-unit id="4342310e3ebcfb54bffb8ea8cecbe88a2d6082f6" translate="yes" xml:space="preserve">
          <source>For example, in the forthcoming Swift 5, you&amp;rsquo;d use &lt;code&gt;Result&lt;/code&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;たとえば、次のSwift 5では、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Result&lt;/code&gt; を&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用します&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="377ea4eb3ce60143f054182667aa0740de1f96a3" translate="yes" xml:space="preserve">
          <source>Hopefully will expand to a full Scala-style Promise eventually (I may write it myself at some point; I'm sure other PRs would be welcome; it's not that difficult with Future already in place).</source>
          <target state="translated">願わくば、最終的には完全なScalaスタイルのPromiseにまで拡張されることを期待しています(いつかは自分で書くかもしれませんが、他のPRも歓迎されると思います。</target>
        </trans-unit>
        <trans-unit id="5a5285ec992e236e3e4c7bcc18b2ff2534c226cf" translate="yes" xml:space="preserve">
          <source>I do not recommend prefixing functions with &lt;code&gt;get&lt;/code&gt; in Swift. It will break certain kinds of interoperability with ObjC.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;get&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; in Swiftで&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;関数の前に付けることはお勧めしません&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは、ObjCとの特定の種類の相互運用性を破壊します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="eb97f7bf2cc0145e0d62c3441b05976a5078b82b" translate="yes" xml:space="preserve">
          <source>I have created a utility class in my Swift project that handles all the REST requests and responses. I have built a simple REST API so I can test my code. I have created a class method that needs to return an NSArray but because the API call is async I need to return from the method inside the async call. The problem is the async returns void.
If I were doing this in Node I would use JS promises but I can't figure out a solution that works in Swift.</source>
          <target state="translated">私のSwiftプロジェクトで、すべてのRESTリクエストとレスポンスを処理するユーティリティクラスを作成しました。自分のコードをテストできるように、シンプルなREST APIを構築しました。私はNSArrayを返す必要があるクラスメソッドを作成しましたが、API呼び出しが非同期なので、私は非同期呼び出し内のメソッドから返す必要があります。問題は async が void を返すことです。私がこれをNodeで行う場合、私はJSのプロミスを使用するでしょうが、Swiftで動作するソリューションを見つけることができません。</target>
        </trans-unit>
        <trans-unit id="4cab216081c44e467ea042d3bea6f1cf0163e308" translate="yes" xml:space="preserve">
          <source>I hope you're not still stuck on this, but the short answer is that you can't do this in Swift.</source>
          <target state="translated">まだ引っかかっていないならいいのですが、要するにSwiftではできないということです。</target>
        </trans-unit>
        <trans-unit id="a85d34eee2c0dc7f329c3645e89473d576581cdc" translate="yes" xml:space="preserve">
          <source>I recommend parsing all the way down to a &lt;code&gt;Book&lt;/code&gt; object before returning your results as a &lt;code&gt;Future&lt;/code&gt;. There are several ways this system can fail, and it's much more convenient if you check for all of those things before wrapping them up into a &lt;code&gt;Future&lt;/code&gt;. Getting to &lt;code&gt;[Book]&lt;/code&gt; is much better for the rest of your Swift code than handing around an &lt;code&gt;NSArray&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;結果を&lt;/font&gt; &lt;code&gt;Future&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;として返す前&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Book&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;オブジェクトまで&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;解析することをお勧めします&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このシステムが失敗する原因はいくつかありますが、それらを&lt;/font&gt; &lt;code&gt;Future&lt;/code&gt; に&lt;font style=&quot;vertical-align: inherit;&quot;&gt;まとめる前にそれらすべてをチェックすると、はるかに便利です&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt; &lt;code&gt;[Book]&lt;/code&gt; に&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アクセスする&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ことは、&lt;/font&gt; &lt;code&gt;NSArray&lt;/code&gt; を&lt;font style=&quot;vertical-align: inherit;&quot;&gt;渡すよりも、残りのSwiftコードにとってはるかに優れています&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4f50b663530b96f939105fe7522c566d07248099" translate="yes" xml:space="preserve">
          <source>In your particular case, I would probably create a &lt;code&gt;Result&amp;lt;[Book]&amp;gt;&lt;/code&gt; (based on &lt;a href=&quot;http://nomothetis.svbtle.com/error-handling-in-swift-part-ii&quot;&gt;Alexandros Salazar's version of &lt;code&gt;Result&lt;/code&gt;&lt;/a&gt;). Then your method signature would be:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あなたの特定のケースでは、おそらく&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Result&amp;lt;[Book]&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;作成します&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://nomothetis.svbtle.com/error-handling-in-swift-part-ii&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Alexandros Salazarの&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Result&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;のバージョンに&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;基づいてい&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;次に、メソッドの署名は次のようになります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="471af9c19515d20dd8b3e4e60b03f0f10772228b" translate="yes" xml:space="preserve">
          <source>Note, above I retired the use of &lt;code&gt;NSArray&lt;/code&gt; (we don&amp;rsquo;t use &lt;a href=&quot;https://developer.apple.com/documentation/foundation/object_runtime/classes_bridged_to_swift_standard_library_value_types&quot;&gt;those bridged Objective-C types&lt;/a&gt; any more). I assume that we had a &lt;code&gt;Genre&lt;/code&gt; type and we presumably used &lt;code&gt;JSONDecoder&lt;/code&gt;, rather than &lt;code&gt;JSONSerialization&lt;/code&gt;, to decode it. But this question didn&amp;rsquo;t have enough information about the underlying JSON to get into the details here, so I omitted that to avoid clouding the core issue, the use of closures as completion handlers.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;上記の&lt;/font&gt;&lt;/font&gt; &lt;code&gt;NSArray&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の使用を廃止したことに注意してください&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://developer.apple.com/documentation/foundation/object_runtime/classes_bridged_to_swift_standard_library_value_types&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ブリッジされたObjective-C型&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はもう&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用しません&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私たちは&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Genre&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;タイプがあり、おそらく&lt;/font&gt;&lt;/font&gt; &lt;code&gt;JSONDecoder&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ではなく&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;JSONDecoder&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;してデコードしたと&lt;/font&gt;&lt;/font&gt; &lt;code&gt;JSONSerialization&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;しかし、この質問には、基礎となるJSONに関する十分な情報がなかったため、ここで詳細を説明することはできませんでした。そのため、中核的な問題である完了ハンドラーとしてのクロージャーの使用を回避するために省略しました。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e2498b7932a662e153f66faf7f57580fcc196795" translate="yes" xml:space="preserve">
          <source>Note, above I&amp;rsquo;m dispatching the completion handler back to the main queue to simplify model and UI updates. Some developers take exception to this practice and either use whatever queue &lt;code&gt;URLSession&lt;/code&gt; used or use their own queue (requiring the caller to manually synchronize the results themselves).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;注：上記では、完了ハンドラーをメインキューにディスパッチして、モデルとUIの更新を簡略化しています。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一部の開発者は、この慣例に例外を設け、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;URLSession&lt;/code&gt; が&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用する&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;キューを&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用するか、独自のキューを使用します（呼び出し側に手動で結果を同期させる必要があります）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="70440046a3dc2e079f23ee1c57dfa76669b732aa" translate="yes" xml:space="preserve">
          <source>Notes</source>
          <target state="translated">Notes</target>
        </trans-unit>
        <trans-unit id="753a22b2eb617204efee4644795034b8ace1ee14" translate="yes" xml:space="preserve">
          <source>Notifications</source>
          <target state="translated">Notifications</target>
        </trans-unit>
        <trans-unit id="c3c7ca7344ce10210a898c17cb8bf8c0c6345900" translate="yes" xml:space="preserve">
          <source>Now Please check complete api structure</source>
          <target state="translated">では、完全なAPI構造を確認してください。</target>
        </trans-unit>
        <trans-unit id="ca2d425cef83128ec0a20ed97a298c67c80a9045" translate="yes" xml:space="preserve">
          <source>Observers can also be used to get notified once the async task has been completed.</source>
          <target state="translated">また、非同期タスクが完了したら通知を受けるためにオブザーバーを使用することもできます。</target>
        </trans-unit>
        <trans-unit id="95ea2250a94be92b9b5c99f8db93d804ceabeb6d" translate="yes" xml:space="preserve">
          <source>Returning data from async call in Swift function</source>
          <target state="translated">Swift 関数の async 呼び出しからデータを返す</target>
        </trans-unit>
        <trans-unit id="9ed518514a3cbea72d715d1d9c28704e12c8bc90" translate="yes" xml:space="preserve">
          <source>Swift 3 version of @Alexey Globchastyy's answer:</source>
          <target state="translated">Swift 3版の@Alexey Globchastyyさんの回答。</target>
        </trans-unit>
        <trans-unit id="51cd39f7d75342cd8ca5614506b3faa58c351053" translate="yes" xml:space="preserve">
          <source>Swiftz already offers Future, which is the basic building block of a Promise. A Future is a Promise that cannot fail (all terms here are based on the Scala interpretation, &lt;a href=&quot;https://stackoverflow.com/questions/22724883/js-deferred-promise-future-compared-to-functional-languages-like-scala?rq=1&quot;&gt;where a Promise is a Monad&lt;/a&gt;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;SwiftzはすでにPromiseの基本的なビルディングブロックであるFutureを提供しています。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;未来は失敗することのない約束です（ここでのすべての用語&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/22724883/js-deferred-promise-future-compared-to-functional-languages-like-scala?rq=1&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、約束がモナドである&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Scalaの解釈に基づいてい&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ac1f9ef245a3b10e54a68e4a4bcce32858364623" translate="yes" xml:space="preserve">
          <source>The basic pattern is to use completion handlers closure.</source>
          <target state="translated">基本的なパターンは、補完ハンドラのクロージャを使用することです。</target>
        </trans-unit>
        <trans-unit id="51fca48045be018843010b6a4c2c218f7615ed4d" translate="yes" xml:space="preserve">
          <source>The main thread is the UI thread, whenever you make an async task and you want to update the UI you must do all the UI changes on the UI thread</source>
          <target state="translated">メインスレッドはUIスレッドで、非同期タスクを作成してUIを更新したい場合は、UIスレッドですべてのUI変更を行う必要があります。</target>
        </trans-unit>
        <trans-unit id="0dccee69ee40909c637c9d01dee6680b7d63bdb6" translate="yes" xml:space="preserve">
          <source>The older, Swift 4 pattern is:</source>
          <target state="translated">古い、Swift4のパターンです。</target>
        </trans-unit>
        <trans-unit id="7e41ac91e7836703978c1c85deffd0fd393929f9" translate="yes" xml:space="preserve">
          <source>There are 3 ways of creating call back functions namely:
1. Completion handler
2. Notification
3. Delegates</source>
          <target state="translated">コールバック関数を作成するには、次の3つの方法があります。1.完了ハンドラ 2.通知 3.デリゲート</target>
        </trans-unit>
        <trans-unit id="4ef1f4651b9e21d01aa91ff891682983bbd68b47" translate="yes" xml:space="preserve">
          <source>There are mainly 3 ways of achieving callback in swift</source>
          <target state="translated">swift でコールバックを実現するには、主に以下の 3 つの方法があります。</target>
        </trans-unit>
        <trans-unit id="c8cfd31c5f2fa380e4e81d4e1997fbf3ba87ba8c" translate="yes" xml:space="preserve">
          <source>There are some very generic requirements that would like every good API Manager to satisfy:
will implement a &lt;strong&gt;protocol-oriented API Client.&lt;/strong&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;すべての優れたAPIマネージャーに満足してもらいたい、非常に一般的な要件がいくつかあり&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。プロトコル指向のAPIクライアント&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を実装し&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6edf876e1dd16ba30ab1e7bb46d6abf5e4cadf9a" translate="yes" xml:space="preserve">
          <source>This is a small use case that might be helpful:-</source>
          <target state="translated">これは役に立つかもしれない小さなユースケースです:-。</target>
        </trans-unit>
        <trans-unit id="6d93327a494f273f8373e66a922af984d7fa9ac9" translate="yes" xml:space="preserve">
          <source>Use completion blocks and activate then on the main thread.</source>
          <target state="translated">補完ブロックを使用して、メインスレッド上でアクティブにします。</target>
        </trans-unit>
        <trans-unit id="b107e7fde341f7c746ab2a50be30f16df2888d85" translate="yes" xml:space="preserve">
          <source>While calling the function:-</source>
          <target state="translated">関数を呼び出している間</target>
        </trans-unit>
        <trans-unit id="492600fc20952c19d7d564917a54861be600573c" translate="yes" xml:space="preserve">
          <source>You can call this function as below:</source>
          <target state="translated">この関数は以下のように呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="5f6fb05957878828dd52a0141b964038cd5da62a" translate="yes" xml:space="preserve">
          <source>You can pass callback, and call callback inside async call</source>
          <target state="translated">callbackを渡して、async call内でコールバックを呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="ed2e7ade7b8198c94d3afc330e61c9876d6f2e31" translate="yes" xml:space="preserve">
          <source>and then call this method:</source>
          <target state="translated">で、このメソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="b58d80edf0d9a5f19d17ce43b0b4205bab0262a4" translate="yes" xml:space="preserve">
          <source>example:</source>
          <target state="translated">example:</target>
        </trans-unit>
        <trans-unit id="1bc3878c5b1eaee17acdf12033cb2803a770ad3f" translate="yes" xml:space="preserve">
          <source>something like:</source>
          <target state="translated">のようなものです。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
