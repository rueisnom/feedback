<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://stackoverflow.com/questions/2591098">
    <body>
      <group id="2591098">
        <trans-unit id="ea65c5c96e1eac1d9c4435b5e12b399ffced32c4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://code.google.com/p/quick-json/&quot;&gt;quick-json parser&lt;/a&gt; is very straightforward, flexible, very fast and customizable. Try it</source>
          <target state="translated">&lt;a href=&quot;https://code.google.com/p/quick-json/&quot;&gt;Парсер quick-json&lt;/a&gt; очень простой, гибкий, очень быстрый и настраиваемый. Попробуй</target>
        </trans-unit>
        <trans-unit id="581c985eea09e3d23ece6c4273d96320b7a256bd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/FasterXML/jackson-databind/&quot;&gt;Jackson&lt;/a&gt; (&lt;a href=&quot;http://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind&quot;&gt;Maven&lt;/a&gt;)</source>
          <target state="translated">&lt;a href=&quot;https://github.com/FasterXML/jackson-databind/&quot;&gt;Джексон&lt;/a&gt; ( &lt;a href=&quot;http://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind&quot;&gt;Мавен&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="54b860be7eb1706dd022135cab0fcf7ba4e7faf3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/google/gson&quot;&gt;Google GSON&lt;/a&gt; (&lt;a href=&quot;http://mvnrepository.com/artifact/com.google.code.gson/gson&quot;&gt;Maven&lt;/a&gt;)</source>
          <target state="translated">&lt;a href=&quot;https://github.com/google/gson&quot;&gt;Google GSON&lt;/a&gt; ( &lt;a href=&quot;http://mvnrepository.com/artifact/com.google.code.gson/gson&quot;&gt;Maven&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="3ee7e3039883c031f4cdb591853c88b660863b1d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/stleary/JSON-java&quot;&gt;Org.JSON&lt;/a&gt; (&lt;a href=&quot;http://mvnrepository.com/artifact/org.json/json&quot;&gt;Maven&lt;/a&gt;)</source>
          <target state="translated">&lt;a href=&quot;https://github.com/stleary/JSON-java&quot;&gt;Org.JSON&lt;/a&gt; ( &lt;a href=&quot;http://mvnrepository.com/artifact/org.json/json&quot;&gt;Maven&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="05f76f0d55a1a802b770e68d6fdf7db04a914eee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;jsoniter&lt;/code&gt; (jsoniterator) is a relatively new and simple json library, designed to be simple and fast. All you need to do to deserialize json data is</source>
          <target state="translated">&lt;code&gt;jsoniter&lt;/code&gt; (jsoniterator) - относительно новая и простая библиотека json, разработанная, чтобы быть простой и быстрой. Все, что вам нужно сделать для десериализации данных JSON, это</target>
        </trans-unit>
        <trans-unit id="03610e46c3979f79023144c6bf30ea1d6e343100" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;fromJson()&lt;/em&gt;&lt;/strong&gt; &amp;ndash; Convert JSON into Java object</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;fromJson ()&lt;/em&gt;&lt;/strong&gt; - конвертировать JSON в объект Java</target>
        </trans-unit>
        <trans-unit id="705c755a5250c8b1f571cf8890ad4135858b182f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;toJson()&lt;/em&gt;&lt;/strong&gt; &amp;ndash; Convert Java object to JSON format</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;toJson ()&lt;/em&gt;&lt;/strong&gt; - конвертировать объект Java в формат JSON</target>
        </trans-unit>
        <trans-unit id="fb8f9c8b1988dbf445e49cc72e660540c1cce355" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Code for converting this JSON to a Java class.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Код для преобразования этого JSON в класс Java.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f561f0a28a73c1cfb924e851f87e5d54afde91ae" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;DSM is very good for complex json and xml.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;DSM очень хорош для сложных JSON и XML.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9251863320abe2fea319e96654ab3025da8e313e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Gson&lt;/strong&gt; is easy to learn and implement, what we need to know are following two methods</source>
          <target state="translated">&lt;strong&gt;Gson&lt;/strong&gt; легко выучить и реализовать, нам нужно знать следующие два метода</target>
        </trans-unit>
        <trans-unit id="ff1a5ff658b0821446261c49fa429c9c5086a950" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;I have JSON like this:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;У меня есть JSON, как это:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ab280e1e06c703b1cad8b270301293d1d14cc3ed" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Jackson&lt;/strong&gt; takes 6.5~7 seconds</source>
          <target state="translated">&lt;strong&gt;Джексон&lt;/strong&gt; занимает 6,5 ~ 7 секунд</target>
        </trans-unit>
        <trans-unit id="e7af3e9da3894854740bb7458fbfd889afae67ea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Java class&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Класс Java&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f1f5f742f9fbb132d6357c0198a1f1c2c4ef5414" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Maven&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Maven&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e1129c7696d19cfbf06a0a0f1333da3bff9e773b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Page&lt;/strong&gt; Class, a composite of &lt;strong&gt;PageInfo&lt;/strong&gt; Class and array of &lt;strong&gt;Post&lt;/strong&gt; Instances</source>
          <target state="translated">Класс &lt;strong&gt;страницы&lt;/strong&gt; , составная часть класса &lt;strong&gt;PageInfo&lt;/strong&gt; и массив &lt;strong&gt;почтовых&lt;/strong&gt; экземпляров</target>
        </trans-unit>
        <trans-unit id="0dc53093af6d0bc6129a4b99c67b4821d7476c6b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;PageInfo&lt;/strong&gt; Class</source>
          <target state="translated">Класс &lt;strong&gt;PageInfo&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5bdf7aae131dcf748c7b9ace65a6cbcede925cd4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Performance comparison&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Сравнение производительности&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1b1137c7cde8f7f4f635ccde6b622d5a38018762" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Posts&lt;/strong&gt; Class</source>
          <target state="translated">Класс &lt;strong&gt;сообщений&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="43f038c62b45a67bf440ca6fe8caa39490287184" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Solution&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Solution&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1886539a537103abdbc2deba551ee10fab14bc0c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 1&lt;/strong&gt;: Add the jayway JSON path dependency in your class path using Maven or download the JAR file and manually add it.</source>
          <target state="translated">&lt;strong&gt;Шаг 1.&lt;/strong&gt; Добавьте зависимость пути JSON JAYWAY в путь к классу с помощью Maven или загрузите файл JAR и добавьте его вручную.</target>
        </trans-unit>
        <trans-unit id="2fbd052391bb5db3b551a01917005442e6578fba" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 2&lt;/strong&gt;: Please save your input JSON as a file for this example. In my case I saved your JSON as sampleJson.txt. Note you missed a comma between pageInfo and posts.</source>
          <target state="translated">&lt;strong&gt;Шаг 2&lt;/strong&gt; : Пожалуйста, сохраните ваш входной JSON как файл для этого примера. В моем случае я сохранил ваш JSON как sampleJson.txt. Обратите внимание, что вы пропустили запятую между pageInfo и сообщениями.</target>
        </trans-unit>
        <trans-unit id="048e0b165aae8387f19fb8f66135b22372f11de4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 3&lt;/strong&gt;: Read the JSON contents from the above file using bufferedReader and save it as String.</source>
          <target state="translated">&lt;strong&gt;Шаг 3&lt;/strong&gt; : Считайте содержимое JSON из вышеуказанного файла, используя bufferedReader, и сохраните его как String.</target>
        </trans-unit>
        <trans-unit id="84f862c1d56afbc5d00599cfbabc74c958688a25" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 4&lt;/strong&gt;: Parse your JSON string using jayway JSON parser.</source>
          <target state="translated">&lt;strong&gt;Шаг 4&lt;/strong&gt; : Разобрать вашу строку JSON с помощью jayway JSON parser.</target>
        </trans-unit>
        <trans-unit id="cc327bb753d6694e6d587e28b624df3fd2decf43" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 5&lt;/strong&gt;: Read the details like below.</source>
          <target state="translated">&lt;strong&gt;Шаг 5&lt;/strong&gt; : Прочитайте детали как ниже.</target>
        </trans-unit>
        <trans-unit id="b913191ee8246154e8264c165558cedbc926ca35" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The output will be&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;Выход будет&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="200627b0eb37efd54845f9a6bd7c0133da5e8d51" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Update&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Update&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f25f3e28c57eff39cd3e2e6eadedc301de5413fd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;jackson-annotations-2.5.0.jar&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;jackson-annotations-2.5.0.jar&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="86d8a75250ca1708ac4c4b1ec45987048798776d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;jackson-core-2.5.1.jar&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;jackson-core-2.5.1.jar&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b6feda883de2fd3be3de89dd9b83fc93c7213d6a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;jackson-databind-2.5.1.jar&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;jackson-databind-2.5.1.jar&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="12743475bf50fb900579f074c47e0df51b6d05c5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;org.json&lt;/strong&gt; takes 20~21 seconds</source>
          <target state="translated">&lt;strong&gt;org.json&lt;/strong&gt; занимает 20 ~ 21 секунд</target>
        </trans-unit>
        <trans-unit id="fb28eb98a5cc6cac6edaa0094b2e5918a1aad2ec" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;page&lt;/strong&gt; variable serialized to json:</source>
          <target state="translated">переменная &lt;strong&gt;страницы,&lt;/strong&gt; сериализованная в json:</target>
        </trans-unit>
        <trans-unit id="d810459f3180bff7e2a7a6af2c59c8c67e8fa178" translate="yes" xml:space="preserve">
          <source>A - Explanation</source>
          <target state="translated">А-Пояснения</target>
        </trans-unit>
        <trans-unit id="b67ce5d5635f015e9f01c6db5b0c651824b1cb5b" translate="yes" xml:space="preserve">
          <source>Almost all the answers given requires a full deserialization of the JSON into a Java object before accessing the value in the property of interest. Another alternative, which does not go this route is to use &lt;a href=&quot;http://goessner.net/articles/JsonPath/&quot;&gt;JsonPATH&lt;/a&gt; which is like XPath for JSON and allows traversing of JSON objects.</source>
          <target state="translated">Практически для всех приведенных ответов требуется полная десериализация JSON в объект Java перед получением значения в интересующем свойстве. Другой альтернативой, которая не идет по этому пути, является использование &lt;a href=&quot;http://goessner.net/articles/JsonPath/&quot;&gt;JsonPATH,&lt;/a&gt; которое похоже на XPath для JSON и позволяет обходить объекты JSON.</target>
        </trans-unit>
        <trans-unit id="af8d410d429ad57fab9c29adda1ef85707482ce8" translate="yes" xml:space="preserve">
          <source>And &lt;strong&gt;to help you decide&lt;/strong&gt;... I found this article as well:</source>
          <target state="translated">И &lt;strong&gt;чтобы помочь вам решить&lt;/strong&gt; ... Я также нашел эту статью:</target>
        </trans-unit>
        <trans-unit id="663653cb78ef87e0bb6480289ada2bfff8942b72" translate="yes" xml:space="preserve">
          <source>Automatic model generation</source>
          <target state="translated">Автоматическая генерация модели</target>
        </trans-unit>
        <trans-unit id="b738ee3e56540b60fee89056a48118c59804bed7" translate="yes" xml:space="preserve">
          <source>B - Main POJO Class : Page</source>
          <target state="translated">B-Основной класс POJO:Страница</target>
        </trans-unit>
        <trans-unit id="d66d5132e915f27b988bbcb532fd4097e0995031" translate="yes" xml:space="preserve">
          <source>But if one just want to parse a JSON string and get some values, (OR create a JSON string from scratch to send over wire) just use JaveEE jar which contains JsonReader, JsonArray, JsonObject etc. You may want to download the implementation of that spec like javax.json. With these two jars I am able to parse the json and use the values.</source>
          <target state="translated">Но если вы просто хотите разобрать JSON-строку и получить некоторые значения (ИЛИ создать JSON-строку с нуля,чтобы отправить по проводу),просто используйте JaveEE банку,которая содержит JsonReader,JsonArray,JsonObject и т.д.Возможно,вы захотите скачать реализацию этой спецификации,как javax.json.С помощью этих двух банок я могу разобрать json и использовать значения.</target>
        </trans-unit>
        <trans-unit id="76ff8126da6f93d5ee3697f05578f8cbc37e3819" translate="yes" xml:space="preserve">
          <source>C - Child POJO Class : PageInfo</source>
          <target state="translated">C-Детский класс POJO:PageInfo</target>
        </trans-unit>
        <trans-unit id="8a2dc4ac0a59e84b96d9e4e2011a1d324b5615a6" translate="yes" xml:space="preserve">
          <source>Check out the &lt;a href=&quot;http://jsoniter.com/&quot;&gt;official website&lt;/a&gt;
for more information.</source>
          <target state="translated">Проверьте &lt;a href=&quot;http://jsoniter.com/&quot;&gt;официальный сайт&lt;/a&gt; для получения дополнительной информации.</target>
        </trans-unit>
        <trans-unit id="5d412e7449d9e26d0c1415515ac836426e5d9116" translate="yes" xml:space="preserve">
          <source>Check the JsonPath specification page for more information on the other ways to transverse JSON.</source>
          <target state="translated">Ознакомьтесь со страницей спецификации JsonPath для получения дополнительной информации о других способах поперечного JSON.</target>
        </trans-unit>
        <trans-unit id="5f16c172ef732329922fe4de767f371ef0e8a14c" translate="yes" xml:space="preserve">
          <source>Compliant with JSON specification (RFC4627)</source>
          <target state="translated">Соответствует спецификации JSON (RFC4627).</target>
        </trans-unit>
        <trans-unit id="69c7ed2e68fc1c1c410d3a15220f49b10f78ddc3" translate="yes" xml:space="preserve">
          <source>Configurable validation of key/value pairs of any JSON Hierarchy</source>
          <target state="translated">Настраиваемая проверка пар значений ключей любой JSON иерархии</target>
        </trans-unit>
        <trans-unit id="b43f50ee8ee18a4adf5d2723ee8fe73aa7a2fa98" translate="yes" xml:space="preserve">
          <source>Create Java object from JSON</source>
          <target state="translated">Создать объект Java из JSON</target>
        </trans-unit>
        <trans-unit id="bfe5f0fdd4ad15aa4bcd6cf27f41fdb5fa152040" translate="yes" xml:space="preserve">
          <source>Create a yaml Mapping file.</source>
          <target state="translated">Создайте ямлевую картографию.</target>
        </trans-unit>
        <trans-unit id="5a1f8dfe343d664415ddc94739883a4753af831f" translate="yes" xml:space="preserve">
          <source>Creating JSON:</source>
          <target state="translated">Создание JSON:</target>
        </trans-unit>
        <trans-unit id="ba357fa573625c18a64c4a5ec0aa47fe1deb81cf" translate="yes" xml:space="preserve">
          <source>D - Child POJO Class : Post</source>
          <target state="translated">D-Детский класс POJO:Почта</target>
        </trans-unit>
        <trans-unit id="1555271c54fe56903d1f72ec8246497a843bcfc1" translate="yes" xml:space="preserve">
          <source>Done. &lt;em&gt;Drops microphone&lt;/em&gt;.
This works with &lt;code&gt;JSONObjects&lt;/code&gt; as well. After that, you can just look through your hierarchy of &lt;code&gt;Objects&lt;/code&gt; using the &lt;code&gt;get()&lt;/code&gt; methods on your objects.</source>
          <target state="translated">Готово. &lt;em&gt;Отбрасывает микрофон&lt;/em&gt; . Это работает и с &lt;code&gt;JSONObjects&lt;/code&gt; . После этого вы можете просто просматривать иерархию &lt;code&gt;Objects&lt;/code&gt; используя методы &lt;code&gt;get()&lt;/code&gt; для ваших объектов.</target>
        </trans-unit>
        <trans-unit id="ab13932a6db4b8954dec2f6bc4eb7836527a70a7" translate="yes" xml:space="preserve">
          <source>Downloadable jar:  &lt;a href=&quot;http://mvnrepository.com/artifact/org.json/json&quot;&gt;http://mvnrepository.com/artifact/org.json/json&lt;/a&gt;</source>
          <target state="translated">Загружаемый jar: &lt;a href=&quot;http://mvnrepository.com/artifact/org.json/json&quot;&gt;http://mvnrepository.com/artifact/org.json/json&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2b4d50543ce7975d4b13d9a5652eeb5444ad618b" translate="yes" xml:space="preserve">
          <source>E - Sample JSON File : sampleJSONFile.json</source>
          <target state="translated">E-Образец файла JSON:образецJSONFile.json</target>
        </trans-unit>
        <trans-unit id="00feb5912c0950d28a766de9161106eb61bf7ec1" translate="yes" xml:space="preserve">
          <source>Ease of use (code is simple to write and legible) - that goes with features.</source>
          <target state="translated">Простота использования (код прост в написании и читается)-это сочетается с функциональностью.</target>
        </trans-unit>
        <trans-unit id="ce370a5c966639d991d2edbcf30aa43459931fb1" translate="yes" xml:space="preserve">
          <source>Easy to use # Very small footprint</source>
          <target state="translated">Простота использования#Очень маленькие размеры</target>
        </trans-unit>
        <trans-unit id="1203b487908e8c8120e99871d562a439ab5dac96" translate="yes" xml:space="preserve">
          <source>F - Demo Code</source>
          <target state="translated">F-Демонстрационный код</target>
        </trans-unit>
        <trans-unit id="5df81ffa82179b458e1d55e350db9d88805a69b2" translate="yes" xml:space="preserve">
          <source>Features:</source>
          <target state="translated">Features:</target>
        </trans-unit>
        <trans-unit id="4fd018f9b4541f8c7b5f7b837295fec5fbe165f9" translate="yes" xml:space="preserve">
          <source>First you need to select an &lt;strong&gt;implementation library&lt;/strong&gt; to do that.</source>
          <target state="translated">Для начала вам нужно выбрать &lt;strong&gt;библиотеку реализации&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="2fab5b640e16bedd65b12cef9e96c7aa9b3dc83b" translate="yes" xml:space="preserve">
          <source>For 1, see this benchmark: &lt;a href=&quot;https://github.com/fabienrenaud/java-json-benchmark&quot;&gt;https://github.com/fabienrenaud/java-json-benchmark&lt;/a&gt; I did using &lt;a href=&quot;http://openjdk.java.net/projects/code-tools/jmh/&quot;&gt;JMH&lt;/a&gt; which compares (jackson, gson, genson, fastjson, org.json, jsonp) performance of serializers and deserializers using stream and databind APIs.
For 2, you can find numerous examples on the Internet. The benchmark above can also be used as a source of examples...</source>
          <target state="translated">Для 1, смотрите этот тест: &lt;a href=&quot;https://github.com/fabienrenaud/java-json-benchmark&quot;&gt;https://github.com/fabienrenaud/java-json-benchmark&lt;/a&gt; Я сделал с помощью &lt;a href=&quot;http://openjdk.java.net/projects/code-tools/jmh/&quot;&gt;JMH,&lt;/a&gt; который сравнивает (Джексон, GSON, GENSON, FastJSON, ORG.JSON, JSONP) производительность сериализаторов и десериализаторов с использованием потока и API привязки данных. Для 2 вы можете найти множество примеров в Интернете. Вышеприведенный тест также можно использовать в качестве источника примеров ...</target>
        </trans-unit>
        <trans-unit id="2f0a74d7dfe882b3c0628193b58ea62013cab0bc" translate="yes" xml:space="preserve">
          <source>For further reference you can refer to the following &lt;a href=&quot;http://javahai.blogspot.in/2016/03/create-java-object-from-json-string.html&quot;&gt;link&lt;/a&gt;.</source>
          <target state="translated">Для дальнейшего ознакомления вы можете обратиться по следующей &lt;a href=&quot;http://javahai.blogspot.in/2016/03/create-java-object-from-json-string.html&quot;&gt;ссылке&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="cc0b99d1a4fc0b06d6dcf2ceb23a820e9c3d979e" translate="yes" xml:space="preserve">
          <source>For mobile apps: dependency/jar size</source>
          <target state="translated">Для мобильных приложений:размер зависимостей</target>
        </trans-unit>
        <trans-unit id="e5e03d0772320e98ed4376b556afec9cf1112698" translate="yes" xml:space="preserve">
          <source>For the sake of the example lets assume you have a class &lt;strong&gt;&lt;code&gt;Person&lt;/code&gt;&lt;/strong&gt; with just a &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="translated">Для примера давайте предположим, что у вас есть класс &lt;strong&gt; &lt;code&gt;Person&lt;/code&gt; &lt;/strong&gt; только с &lt;code&gt;name&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2885f44578c0f825368033cb53176134ed3d590b" translate="yes" xml:space="preserve">
          <source>For your particular example, the following code decodes your json with jackson:</source>
          <target state="translated">Для вашего конкретного примера,следующий код расшифровывает ваш json с помощью jackson:</target>
        </trans-unit>
        <trans-unit id="46bef7454065eebd2a67f75cdc30df17dc513844" translate="yes" xml:space="preserve">
          <source>From your example:</source>
          <target state="translated">Из твоего примера:</target>
        </trans-unit>
        <trans-unit id="a69798c76d0a5628b350f29769d994d62ecbe059" translate="yes" xml:space="preserve">
          <source>G - Demo Output</source>
          <target state="translated">G-Демо-выпуск</target>
        </trans-unit>
        <trans-unit id="9adca0a1f8e9c23815dd4bc100592ef7dd2c16b1" translate="yes" xml:space="preserve">
          <source>Gradle import</source>
          <target state="translated">Импорт колыбели</target>
        </trans-unit>
        <trans-unit id="5a3edd9462d95d94e4c206a206631620177058b8" translate="yes" xml:space="preserve">
          <source>Here is the required code;</source>
          <target state="translated">Вот необходимый код;</target>
        </trans-unit>
        <trans-unit id="cb1d161d6ba6dfb003d26634a915d135c72556ab" translate="yes" xml:space="preserve">
          <source>Here you can find a &lt;strong&gt;list of implementations&lt;/strong&gt; of JSR 353:</source>
          <target state="translated">Здесь вы можете найти &lt;strong&gt;список реализаций&lt;/strong&gt; JSR 353:</target>
        </trans-unit>
        <trans-unit id="ea240118c4bf850ae6636a1a53c032f94886def1" translate="yes" xml:space="preserve">
          <source>High-Performance JSON parser</source>
          <target state="translated">Высокопроизводительный парсер JSON</target>
        </trans-unit>
        <trans-unit id="e91c5dffba99be277021da86df113a93045c9b6d" translate="yes" xml:space="preserve">
          <source>Hope it helps!</source>
          <target state="translated">Надеюсь,это поможет!</target>
        </trans-unit>
        <trans-unit id="68df6e851d85c7d09297b9204c8a83b835f72f14" translate="yes" xml:space="preserve">
          <source>How to parse JSON in Java</source>
          <target state="translated">Как разобрать JSON на Java</target>
        </trans-unit>
        <trans-unit id="7cce87c2a84ffcdb1ce79866d0ce75d3a7b725e5" translate="yes" xml:space="preserve">
          <source>I believe the best practice should be to go through the official &lt;a href=&quot;http://json-processing-spec.java.net/&quot;&gt;Java JSON API&lt;/a&gt; which are still work in progress.</source>
          <target state="translated">Я считаю, что лучшая практика должна состоять в том, чтобы пройти через официальный &lt;a href=&quot;http://json-processing-spec.java.net/&quot;&gt;Java JSON API,&lt;/a&gt; который все еще находится в стадии разработки.</target>
        </trans-unit>
        <trans-unit id="2f9613b87bf96a3f80b384dbf2950b16ecee7d47" translate="yes" xml:space="preserve">
          <source>I have the following JSON text. How can I parse it to get the values of &lt;code&gt;pageName&lt;/code&gt;, &lt;code&gt;pagePic&lt;/code&gt;, &lt;code&gt;post_id&lt;/code&gt;, etc.?</source>
          <target state="translated">У меня есть следующий текст JSON. Как я могу разобрать его, чтобы получить значения &lt;code&gt;pageName&lt;/code&gt; , &lt;code&gt;pagePic&lt;/code&gt; , &lt;code&gt;post_id&lt;/code&gt; и т. Д.?</target>
        </trans-unit>
        <trans-unit id="d8f0c4e0c9f55071e5234777e393a4c7be6419e6" translate="yes" xml:space="preserve">
          <source>I want to retrieve the value of &quot;translatedText&quot; attribute e.g. &quot;Arbeit&quot; using Google's Gson.</source>
          <target state="translated">Я хочу получить значение атрибута &quot;translateText&quot;,например,&quot;Arbeit&quot; с помощью Google's Gson.</target>
        </trans-unit>
        <trans-unit id="d5f6b48ca5241e591de492e8026eabcfac5704ca" translate="yes" xml:space="preserve">
          <source>I wrote JSON content containing three arrays of respectively 20, 20 and 100 elements. I only want to get the 100 elements from the third array. I use the following JavaScript function to parse and get my entries.</source>
          <target state="translated">Я написал JSON содержание,содержащее три массива,соответственно,20,20 и 100 элементов.Я хочу получить только 100 элементов из третьего массива.Я использую следующую функцию JavaScript для разбора и получения своих записей.</target>
        </trans-unit>
        <trans-unit id="bc670ce71e17cb364032562f9990059824ae23de" translate="yes" xml:space="preserve">
          <source>I've just copied your JSON sample into this file and put it under the project folder.</source>
          <target state="translated">Я только что скопировал ваш образец JSON в этот файл и поместил его в папку проекта.</target>
        </trans-unit>
        <trans-unit id="ceb2cc12a904bbb5d45b6e59986a3aafd5b680bb" translate="yes" xml:space="preserve">
          <source>If one wants to create Java object from JSON and vice versa, use GSON or JACKSON third party jars etc.</source>
          <target state="translated">Если вы хотите создать Java-объект из JSON и наоборот,используйте банку GSON или JACKSON сторонних производителей и т.п.</target>
        </trans-unit>
        <trans-unit id="c35a7233c9b98527537ebaf8214644c098990138" translate="yes" xml:space="preserve">
          <source>If you don't need object de-serialisation but to simply get an attribute, you can try org.json (&lt;strong&gt;or look GSON example above!&lt;/strong&gt;)</source>
          <target state="translated">Если вам не нужна десериализация объекта, а требуется просто получить атрибут, вы можете попробовать org.json ( &lt;strong&gt;или посмотрите пример GSON выше!&lt;/strong&gt; )</target>
        </trans-unit>
        <trans-unit id="86de2921b10bc48cdd2792ee251a69936f29851b" translate="yes" xml:space="preserve">
          <source>If you go for Jackson, here is a good article about conversion between JSON to/from Java using Jackson: &lt;a href=&quot;https://www.mkyong.com/java/how-to-convert-java-object-to-from-json-jackson/&quot;&gt;https://www.mkyong.com/java/how-to-convert-java-object-to-from-json-jackson/&lt;/a&gt;</source>
          <target state="translated">Если вы идете за Джексоном, вот хорошая статья о преобразовании между JSON в / из Java с использованием Джексона: &lt;a href=&quot;https://www.mkyong.com/java/how-to-convert-java-object-to-from-json-jackson/&quot;&gt;https://www.mkyong.com/java/how-to-convert-java-object-to-from-json- джексон /&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b3a718b5da6f863dd650d28b31b7f39126c939b8" translate="yes" xml:space="preserve">
          <source>If you have some Java class(say Message) representing the JSON string(jsonString), you can use &lt;a href=&quot;https://github.com/FasterXML/jackson&quot;&gt;Jackson&lt;/a&gt;  JSON library with:</source>
          <target state="translated">Если у вас есть некоторый Java-класс (скажем, Message), представляющий строку JSON (jsonString), вы можете использовать библиотеку JSON &lt;a href=&quot;https://github.com/FasterXML/jackson&quot;&gt;Jackson&lt;/a&gt; с:</target>
        </trans-unit>
        <trans-unit id="7b6b38e774913e413531ed50fe8f99c268dc10e0" translate="yes" xml:space="preserve">
          <source>If you want to get a single attribute out you can do it easily with the Google library as well:</source>
          <target state="translated">Если вы хотите получить один атрибут,вы можете сделать это легко и с помощью библиотеки Google:</target>
        </trans-unit>
        <trans-unit id="f8db7127b046e469b834e6462fa961384b7d6965" translate="yes" xml:space="preserve">
          <source>In addition to other answers, I recomend this online opensource service &lt;a href=&quot;http://www.jsonschema2pojo.org/&quot;&gt;jsonschema2pojo.org&lt;/a&gt; for quick generating Java classes from json or json schema for GSON, Jackson 1.x or Jackson 2.x. For example, if you have:</source>
          <target state="translated">В дополнение к другим ответам я рекомендую этот онлайн-сервис с открытым исходным кодом &lt;a href=&quot;http://www.jsonschema2pojo.org/&quot;&gt;jsonschema2pojo.org&lt;/a&gt; для быстрой генерации классов Java из схемы json или json для GSON, Jackson 1.x или Jackson 2.x. Например, если у вас есть:</target>
        </trans-unit>
        <trans-unit id="2c59ace1ec6d4b3f2c5104567e4ac03a2a140852" translate="yes" xml:space="preserve">
          <source>In this case Jackson performs better than Nashorn, which performs much better than org.json.
Nashorn API is harder to use than org.json's or Jackson's. Depending on your requirements Jackson and Nashorn both can be viable solutions.</source>
          <target state="translated">В этом случае Джексон работает лучше,чем Нэшорн,который работает намного лучше,чем org.json.API Nashorn труднее использовать,чем org.json или Jackson.В зависимости от ваших требований и Джексон,и Насхорн могут быть жизнеспособными решениями.</target>
        </trans-unit>
        <trans-unit id="6ee9922191e0c50a3726173d2d2a5807b35d614f" translate="yes" xml:space="preserve">
          <source>In your JSON object, which is actually a &lt;strong&gt;composite&lt;/strong&gt; object, the main object consists o two sub-objects. So, our POJO classes should have the same hierarchy. I'll call the whole JSON Object as &lt;strong&gt;Page&lt;/strong&gt; object. &lt;strong&gt;Page&lt;/strong&gt; object consist of a &lt;strong&gt;PageInfo&lt;/strong&gt; object, and a &lt;strong&gt;Post&lt;/strong&gt; object array.</source>
          <target state="translated">В вашем объекте JSON, который на самом деле является &lt;strong&gt;составным&lt;/strong&gt; объектом, основной объект состоит из двух подобъектов. Итак, наши классы POJO должны иметь одинаковую иерархию. Я назову весь объект JSON как объект &lt;strong&gt;страницы&lt;/strong&gt; . Объект &lt;strong&gt;Page&lt;/strong&gt; состоит из объекта &lt;strong&gt;PageInfo&lt;/strong&gt; и массива объектов &lt;strong&gt;Post&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="7957cdd685e55b0659e0f881b1501d7538cec20a" translate="yes" xml:space="preserve">
          <source>It can be used like this:</source>
          <target state="translated">Его можно использовать вот так:</target>
        </trans-unit>
        <trans-unit id="b8a08f56b44c2d87e99bd4f90e6ce3b988da05f1" translate="yes" xml:space="preserve">
          <source>It is a specification and the good folks at JayWay have created a Java implementation for the specification which you can find here: &lt;a href=&quot;https://github.com/jayway/JsonPath&quot;&gt;https://github.com/jayway/JsonPath&lt;/a&gt;</source>
          <target state="translated">Это спецификация, и хорошие люди в JayWay создали реализацию Java для спецификации, которую вы можете найти здесь: &lt;a href=&quot;https://github.com/jayway/JsonPath&quot;&gt;https://github.com/jayway/JsonPath&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="031a4e76f0b39d0df073d934da5fc48da8d737e5" translate="yes" xml:space="preserve">
          <source>JSON</source>
          <target state="translated">JSON</target>
        </trans-unit>
        <trans-unit id="53caf5fac63a362f1b42f0a9bf30b0d1429744ca" translate="yes" xml:space="preserve">
          <source>Let me know if you have any questions.</source>
          <target state="translated">Дайте мне знать,если у вас возникнут вопросы.</target>
        </trans-unit>
        <trans-unit id="eb7d999e07b1970c76f70121da876b6c2277edcc" translate="yes" xml:space="preserve">
          <source>Let's say we have &lt;strong&gt;Page&lt;/strong&gt; class to deserialize given json data.</source>
          <target state="translated">Допустим, у нас есть класс &lt;strong&gt;Page&lt;/strong&gt; для десериализации данных JSON.</target>
        </trans-unit>
        <trans-unit id="3d575f5e4334f1ec638628bfc8458d0aaaae4399" translate="yes" xml:space="preserve">
          <source>Maven:</source>
          <target state="translated">Maven:</target>
        </trans-unit>
        <trans-unit id="68c2cc7f0ceaa3e499ecb4db331feb4debbbcc23" translate="yes" xml:space="preserve">
          <source>Model</source>
          <target state="translated">Model</target>
        </trans-unit>
        <trans-unit id="cf9db3cb2277b774f7e804d9f63363f022644951" translate="yes" xml:space="preserve">
          <source>My personal favourite as to the great JSON serialisation / de-serialisation of objects.</source>
          <target state="translated">Мой личный фаворит в отношении великой JSON сериализации де-сериализации объектов.</target>
        </trans-unit>
        <trans-unit id="bce347b8b84e91a762a886a1d5505fcc68cb0f69" translate="yes" xml:space="preserve">
          <source>No dependency on external libraries</source>
          <target state="translated">Отсутствие зависимости от внешних библиотек</target>
        </trans-unit>
        <trans-unit id="fd5a170699b9eb4b30561cd70cabb9b28942c677" translate="yes" xml:space="preserve">
          <source>Now you can parse using Gson library:</source>
          <target state="translated">Теперь ты можешь разобраться с помощью библиотеки Гсона:</target>
        </trans-unit>
        <trans-unit id="a484f9dc3e0f6afa1adeb91f3dbdf89f99016e46" translate="yes" xml:space="preserve">
          <source>Now, before anyone goes and downvotes this answer because it doesn't use GSON, org.json, Jackson, or any of the other 3rd party frameworks available, it's an example of &quot;required code&quot; per the question to parse the provided text.  I am well aware that &lt;a href=&quot;http://openjdk.java.net/jeps/198&quot;&gt;adherence to the current standard JSR 353 was not being considered for JDK 9&lt;/a&gt; and as such the &lt;a href=&quot;https://jcp.org/en/jsr/detail?id=353&quot;&gt;JSR 353 spec&lt;/a&gt; should be treated the same as any other 3rd party JSON handling implementation.</source>
          <target state="translated">Теперь, прежде чем кто-то пойдет и понизит этот ответ, потому что он не использует GSON, org.json, Jackson или любые другие доступные сторонние фреймворки, это пример &amp;laquo;необходимого кода&amp;raquo; в вопросе для анализа предоставленного текста. Мне хорошо известно, что &lt;a href=&quot;http://openjdk.java.net/jeps/198&quot;&gt;соблюдение текущего стандарта JSR 353 не рассматривалось для JDK 9,&lt;/a&gt; и поэтому &lt;a href=&quot;https://jcp.org/en/jsr/detail?id=353&quot;&gt;спецификацию JSR 353&lt;/a&gt; следует рассматривать так же, как и любую другую реализацию обработки JSON сторонних производителей.</target>
        </trans-unit>
        <trans-unit id="9bf41a6d92f4678e2f2e1714e549e74448f091ce" translate="yes" xml:space="preserve">
          <source>Now, use this object to get your values:</source>
          <target state="translated">Теперь используйте этот объект,чтобы получить свои значения:</target>
        </trans-unit>
        <trans-unit id="7e2ce87913736a80d592df235669758288745cc1" translate="yes" xml:space="preserve">
          <source>One can use &lt;a href=&quot;https://github.com/apache/incubator-netbeans-html4j&quot;&gt;Apache @Model annotation&lt;/a&gt; to create &lt;strong&gt;Java&lt;/strong&gt; model classes representing structure of &lt;strong&gt;JSON&lt;/strong&gt; files and use them to access various elements in the &lt;strong&gt;JSON&lt;/strong&gt; tree. Unlike other solutions this one &lt;em&gt;works completely without reflection&lt;/em&gt; and is thus suitable for environments where reflection is impossible or comes with significant overhead.</source>
          <target state="translated">Можно использовать &lt;a href=&quot;https://github.com/apache/incubator-netbeans-html4j&quot;&gt;аннотацию Apache @Model&lt;/a&gt; для создания классов модели &lt;strong&gt;Java,&lt;/strong&gt; представляющих структуру файлов &lt;strong&gt;JSON,&lt;/strong&gt; и использовать их для доступа к различным элементам в дереве &lt;strong&gt;JSON&lt;/strong&gt; . В отличие от других решений, это &lt;em&gt;работает полностью без отражения&lt;/em&gt; и поэтому подходит для условий, где отражение невозможно или сопровождается значительными накладными расходами.</target>
        </trans-unit>
        <trans-unit id="dff366f935f687805e17e00bde34355d9df3edef" translate="yes" xml:space="preserve">
          <source>Page class</source>
          <target state="translated">Класс страницы</target>
        </trans-unit>
        <trans-unit id="7294d33710169103141018bfcb0ee5ad3daa81e2" translate="yes" xml:space="preserve">
          <source>Parsing</source>
          <target state="translated">Parsing</target>
        </trans-unit>
        <trans-unit id="33e92b6b98157a0b3e332d3aff1d2cdddbdcc5a2" translate="yes" xml:space="preserve">
          <source>Parsing:</source>
          <target state="translated">Parsing:</target>
        </trans-unit>
        <trans-unit id="63c904559993935c470f516c8b549ca7f3640dbb" translate="yes" xml:space="preserve">
          <source>Performance</source>
          <target state="translated">Performance</target>
        </trans-unit>
        <trans-unit id="78567b320dd5ce717616b908847878e0a7b0a67c" translate="yes" xml:space="preserve">
          <source>Please do something like this:</source>
          <target state="translated">Пожалуйста,сделай что-нибудь вроде этого:</target>
        </trans-unit>
        <trans-unit id="2e3e17743adee6ed5daa287a499018808e01b737" translate="yes" xml:space="preserve">
          <source>Please follow the below steps.</source>
          <target state="translated">Пожалуйста,выполните следующие шаги.</target>
        </trans-unit>
        <trans-unit id="06a02c250ba2e9a5ec6d861f17aa8cad8565b535" translate="yes" xml:space="preserve">
          <source>Pluggable Custom Validation support - Keys/Values can be validated by configuring custom validators as and when encountered</source>
          <target state="translated">Поддержка Pluggable Custom Validation-KeysValues может быть проверен путем настройки пользовательских валидаторов по мере их появления.</target>
        </trans-unit>
        <trans-unit id="37f53753a64b29e001d0ac82c818162cc4fdeacc" translate="yes" xml:space="preserve">
          <source>Quick takeaway of the benchmark: &lt;strong&gt;Jackson&lt;/strong&gt; performs 5 to 6 times better than org.json and more than twice better than GSON.</source>
          <target state="translated">Быстрый тест: &lt;strong&gt;Джексон&lt;/strong&gt; работает в 5-6 раз лучше, чем org.json, и более чем в два раза лучше, чем GSON.</target>
        </trans-unit>
        <trans-unit id="5196b11c8315c8990c058efb8fc0fb14bee4e072" translate="yes" xml:space="preserve">
          <source>Raises developer friendly and easy to trace exceptions</source>
          <target state="translated">Поднимает разработчиков дружественных и легко прослеживаются исключения</target>
        </trans-unit>
        <trans-unit id="a7b6bb6b6a7622460165f03ea7d746ba932816dd" translate="yes" xml:space="preserve">
          <source>Read the following blog post, &lt;a href=&quot;http://javahai.blogspot.in/2016/03/create-java-object-from-json-string.html&quot;&gt;JSON in Java&lt;/a&gt;.</source>
          <target state="translated">Прочитайте следующий пост в блоге, &lt;a href=&quot;http://javahai.blogspot.in/2016/03/create-java-object-from-json-string.html&quot;&gt;JSON на Java&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="9ba33b97f81c7d33f86a74e8b5ced42856b9b058" translate="yes" xml:space="preserve">
          <source>Remember to import the library in the app Gradle file</source>
          <target state="translated">Не забудьте импортировать библиотеку в файл приложения Gradle</target>
        </trans-unit>
        <trans-unit id="8f09413ed3181ec583f8fe8a75d11dd2246abc05" translate="yes" xml:space="preserve">
          <source>Requires JDK 1.5</source>
          <target state="translated">Требования JDK 1.5</target>
        </trans-unit>
        <trans-unit id="aeac71ea0fd2ec62ec82e35cfa2b5656823dc3f1" translate="yes" xml:space="preserve">
          <source>Retrieve just one needed attribute</source>
          <target state="translated">Восстановить только один нужный атрибут</target>
        </trans-unit>
        <trans-unit id="747797349181f1717cb1e6154cba08113cc22a2d" translate="yes" xml:space="preserve">
          <source>Running the call a million times using &lt;strong&gt;Nashorn&lt;/strong&gt; takes 7.5~7.8 seconds</source>
          <target state="translated">Выполнение вызова миллион раз с помощью &lt;strong&gt;Nashorn&lt;/strong&gt; занимает 7,5 ~ 7,8 секунд</target>
        </trans-unit>
        <trans-unit id="6d5f28546a36aa1ca02116c9ecd7d308a81aec26" translate="yes" xml:space="preserve">
          <source>Sample data:</source>
          <target state="translated">Образцы данных:</target>
        </trans-unit>
        <trans-unit id="f984f1b22f545290ce43e2c70ffa6a52b1e2353c" translate="yes" xml:space="preserve">
          <source>Since nobody mentioned it yet, here is a beginning of a solution using &lt;a href=&quot;http://openjdk.java.net/projects/nashorn/&quot;&gt;Nashorn&lt;/a&gt; (JavaScript runtime part of Java 8, but deprecated in Java 11).</source>
          <target state="translated">Поскольку никто еще не упомянул об этом, вот начало решения, использующего &lt;a href=&quot;http://openjdk.java.net/projects/nashorn/&quot;&gt;Nashorn&lt;/a&gt; (JavaScript-часть Java 8, но не рекомендуется в Java 11).</target>
        </trans-unit>
        <trans-unit id="65201ee692e303421c8629f7432b4ea90f8187bb" translate="yes" xml:space="preserve">
          <source>So basically to use it, add it to your project, eg:</source>
          <target state="translated">Так что,в основном,чтобы использовать его,добавьте его в свой проект,например:</target>
        </trans-unit>
        <trans-unit id="fa4cda1b6f05e89b3e0fb913778da8d50fea28cf" translate="yes" xml:space="preserve">
          <source>So this is the JSON returned by Google Translate API:</source>
          <target state="translated">Итак,это JSON,возвращенный Google Translate API:</target>
        </trans-unit>
        <trans-unit id="61b0bb62aebfcdd9ea3216424e2be71fc16d3f18" translate="yes" xml:space="preserve">
          <source>So we have to create three different POJO classes;</source>
          <target state="translated">Поэтому мы должны создать три разных класса POJO;</target>
        </trans-unit>
        <trans-unit id="0b15f607ce4802b8168dc099d186021a765ea7ae" translate="yes" xml:space="preserve">
          <source>Specifically for JSON libraries (and any serialization/deserialization libs), databinding is also usually of interest as it removes the need of writing boiler-plate code to pack/unpack the data.</source>
          <target state="translated">Специально для JSON-библиотек (и любых libs сериализации-дезериализации),поиск по базе данных также обычно представляет интерес,так как устраняет необходимость написания кода boiler-plate для упаковки данных.</target>
        </trans-unit>
        <trans-unit id="c4a8ec5fbf826704a452d2ff8dc55a69f8d01117" translate="yes" xml:space="preserve">
          <source>Step 1: Create a POJO class of your data.</source>
          <target state="translated">Шаг 1:Создайте класс POJO ваших данных.</target>
        </trans-unit>
        <trans-unit id="f256c7c1bed808e53ff3cb16960966d3aaf1e80d" translate="yes" xml:space="preserve">
          <source>Step 2: Now create a object using JSON.</source>
          <target state="translated">Шаг 2:Теперь создайте объект с помощью JSON.</target>
        </trans-unit>
        <trans-unit id="f0fcfae11fa1883d14c0d9809e80909475c86ff6" translate="yes" xml:space="preserve">
          <source>Support for JSON Generation through object serialisation</source>
          <target state="translated">Поддержка генерации JSON через сериализацию объектов</target>
        </trans-unit>
        <trans-unit id="7eb03cadb2fc7eb966c242ad99350591d8b0f6d8" translate="yes" xml:space="preserve">
          <source>Support for collection type selection during parsing process</source>
          <target state="translated">Поддержка выбора типа коллекции в процессе анализа</target>
        </trans-unit>
        <trans-unit id="afac24cd0f87a58c47d5ce59dda54327482583d2" translate="yes" xml:space="preserve">
          <source>Support for two types of configuration (JSON/XML) for using quick-JSON validating parser</source>
          <target state="translated">Поддержка двух типов конфигурации (JSONXML)для использования быстрого парсера проверки-JSON</target>
        </trans-unit>
        <trans-unit id="d83e899da1f3b82cb28cd3141bdeff7abe873c2c" translate="yes" xml:space="preserve">
          <source>Supports Flexible/Configurable parsing approach</source>
          <target state="translated">Поддерживает гибкийКонфигурируемый подход к парсингу</target>
        </trans-unit>
        <trans-unit id="50a6c9deb20f64043205b5e165c63d8709b1e139" translate="yes" xml:space="preserve">
          <source>That is it! In addition to that here is a &lt;a href=&quot;http://dew.apidesign.org/dew/#7138581&quot;&gt;live gist&lt;/a&gt; showing similar example together with asynchronous network communication.</source>
          <target state="translated">Вот и все! В дополнение к этому, здесь приведен пример, демонстрирующий аналогичный пример вместе с асинхронным сетевым взаимодействием.</target>
        </trans-unit>
        <trans-unit id="e948eed3f7c58d6a508c2ea8ef03c2e28ca93572" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://www.jsonschema2pojo.org/&quot;&gt;jsonschema2pojo.org&lt;/a&gt; for GSON generated:</source>
          <target state="translated">&lt;a href=&quot;http://www.jsonschema2pojo.org/&quot;&gt;Jsonschema2pojo.org&lt;/a&gt; для GSON сгенерировал:</target>
        </trans-unit>
        <trans-unit id="e2c1a81b0b1db4f644b2eaf11f5657efbdc2422c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/stleary/JSON-java&quot;&gt;org.json&lt;/a&gt; library is easy to use. Example code below:</source>
          <target state="translated">Библиотека &lt;a href=&quot;https://github.com/stleary/JSON-java&quot;&gt;org.json&lt;/a&gt; проста в использовании. Пример кода ниже:</target>
        </trans-unit>
        <trans-unit id="a4a83b11267f4452d16f9ed523cdf2d6db64dafa" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Java API for JSON Processing (JSR 353)&lt;/strong&gt; provides portable APIs to parse, generate, transform, and query JSON using object model and streaming APIs.</source>
          <target state="translated">&lt;strong&gt;Java API для обработки JSON (JSR 353)&lt;/strong&gt; предоставляет переносимые API для анализа, генерации, преобразования и запроса JSON с использованием объектной модели и потоковых API.</target>
        </trans-unit>
        <trans-unit id="7952a2393450285e76fd98aa15897de2bc703396" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;reference implementation&lt;/strong&gt; is here: &lt;a href=&quot;https://jsonp.java.net/&quot;&gt;https://jsonp.java.net/&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;Справочная реализация&lt;/strong&gt; находится здесь: &lt;a href=&quot;https://jsonp.java.net/&quot;&gt;https://jsonp.java.net/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5728e0be6d0ee1ae0d0ddf88386b3d07df6e2a14" translate="yes" xml:space="preserve">
          <source>The below example shows how to read the text in the question, represented as the &quot;jsonText&quot; variable.  This solution uses the Java EE7 &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/json/package-summary.html&quot;&gt;javax.json&lt;/a&gt; API (which is mentioned in some of the other answers).  The reason I've added it as a separate answer is that the following code shows how to &lt;em&gt;actually&lt;/em&gt; access some of the values shown in the question.  An &lt;a href=&quot;https://jsonp.java.net/download.html&quot;&gt;implementation of the javax.json API&lt;/a&gt; would be required to make this code run.  The full package for each of the classes required was included as I didn't want to declare &quot;import&quot; statements.</source>
          <target state="translated">В приведенном ниже примере показано, как прочитать текст вопроса, представленный в виде переменной &amp;laquo;jsonText&amp;raquo;. В этом решении используется API Java EE7 &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/json/package-summary.html&quot;&gt;javax.json&lt;/a&gt; (который упоминается в некоторых других ответах). Причина, по которой я добавил его в качестве отдельного ответа, заключается в том, что следующий код показывает, как на &lt;em&gt;самом деле&lt;/em&gt; получить доступ к некоторым значениям, показанным в вопросе. Для запуска этого кода потребуется &lt;a href=&quot;https://jsonp.java.net/download.html&quot;&gt;реализация API javax.json&lt;/a&gt; . Полный пакет для каждого из необходимых классов был включен, так как я не хотел объявлять операторы import.</target>
        </trans-unit>
        <trans-unit id="f5634c0efba44765ff890cad41d8be7ab547400a" translate="yes" xml:space="preserve">
          <source>The most notorious ones are: Jackson, GSON, Genson, FastJson and org.json.</source>
          <target state="translated">Самые известные из них:Джексон,GSON,Genson,FastJson и org.json.</target>
        </trans-unit>
        <trans-unit id="23fffe987d93f66048ec9ac769e5dd36c834f920" translate="yes" xml:space="preserve">
          <source>The only package I've used is Jackson ObjectMapper, what we do is binding data;</source>
          <target state="translated">Единственный пакет,который я использовал,это Jackson ObjectMapper,то,что мы делаем,это связываем данные;</target>
        </trans-unit>
        <trans-unit id="808091f429ed669a8665cfed3ed98b2d4c2f6f6e" translate="yes" xml:space="preserve">
          <source>The required dependencies, the jar files is listed below;</source>
          <target state="translated">Необходимые зависимости,jar-файлы перечислены ниже;</target>
        </trans-unit>
        <trans-unit id="1fe5f9a38a375f6340eae1fa099d8dd1c4d26367" translate="yes" xml:space="preserve">
          <source>There are many JSON libraries available in Java.</source>
          <target state="translated">На Java доступно множество JSON-библиотек.</target>
        </trans-unit>
        <trans-unit id="cd7f393468d8ac71394cdc687baab38627b89b2c" translate="yes" xml:space="preserve">
          <source>There are many open source libraries present to parse JSON content to an object or just to read JSON values. Your requirement is just to read values and parsing it to custom object. So org.json library is enough in your case.</source>
          <target state="translated">Существует множество библиотек с открытым исходным кодом для разбора JSON-контента к объекту или просто для чтения JSON-значений.Ваше требование заключается в том,чтобы просто прочитать значения и разобрать их для пользовательского объекта.Поэтому библиотеки org.json достаточно в вашем случае.</target>
        </trans-unit>
        <trans-unit id="3beded183424f6ed0877466312d0466c173e267a" translate="yes" xml:space="preserve">
          <source>There are typically three things one should look at for choosing any library:</source>
          <target state="translated">Обычно есть три вещи,на которые следует обратить внимание при выборе любой библиотеки:</target>
        </trans-unit>
        <trans-unit id="3ccd26c78ba65de44475356a712b29bac1c5371b" translate="yes" xml:space="preserve">
          <source>There is a &lt;a href=&quot;https://github.com/JaroslavTulach/incubator-netbeans-html4j/blob/examples/examples/jsonparse/README.md&quot;&gt;sample Maven project&lt;/a&gt; showing the usage. First of all it defines the structure:</source>
          <target state="translated">Существует &lt;a href=&quot;https://github.com/JaroslavTulach/incubator-netbeans-html4j/blob/examples/examples/jsonparse/README.md&quot;&gt;пример проекта Maven,&lt;/a&gt; показывающий использование. Прежде всего это определяет структуру:</target>
        </trans-unit>
        <trans-unit id="a84dada52a2d88cfaf4879a9ebff060f7ba639b3" translate="yes" xml:space="preserve">
          <source>These APIs actually follow the DOM/SAX parsing model of XML.</source>
          <target state="translated">Эти API фактически следуют модели DOMSAX для разбора XML.</target>
        </trans-unit>
        <trans-unit id="f283c6a2c2d8218ba8199b2fc76c55313954c0ec" translate="yes" xml:space="preserve">
          <source>This blew my mind with how easy it was. You can just pass a &lt;code&gt;String&lt;/code&gt; holding your JSON to the constructor of a JSONObject in the default org.json package.</source>
          <target state="translated">Это поразило меня тем, как легко это было. Вы можете просто передать &lt;code&gt;String&lt;/code&gt; , содержащую ваш JSON, в конструктор JSONObject в пакете org.json по умолчанию.</target>
        </trans-unit>
        <trans-unit id="5993f0df1bb4be49ad42ceb63ecf7fd4d774f862" translate="yes" xml:space="preserve">
          <source>This post is a little bit old, but still I want to answer you question.</source>
          <target state="translated">Этот пост немного старый,но все же я хочу ответить на ваш вопрос.</target>
        </trans-unit>
        <trans-unit id="1744e31c7b17d23ecbea63ae91f72b82d93a03ec" translate="yes" xml:space="preserve">
          <source>Top answers on this page use too simple examples like object with one property (e.g. {name: value}). I think that still simple but real life example can help someone.</source>
          <target state="translated">Лучшие ответы на этой странице используют слишком простые примеры вроде объекта с одним свойством (например,{name:value}).Я думаю,что все же простой,но реальный пример может кому-то помочь.</target>
        </trans-unit>
        <trans-unit id="e08928c6100c5f26a6c10dcf288c804025b48e95" translate="yes" xml:space="preserve">
          <source>Two possible approaches:</source>
          <target state="translated">Два возможных подхода:</target>
        </trans-unit>
        <trans-unit id="cc14179c743382808f9e74d4e9ec10a570710306" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;https://github.com/ralfstx/minimal-json&quot;&gt;minimal-json&lt;/a&gt; which is very fast and easy to use.
You can parse from String obj and Stream.</source>
          <target state="translated">Используйте &lt;a href=&quot;https://github.com/ralfstx/minimal-json&quot;&gt;minimal-json,&lt;/a&gt; который очень быстрый и простой в использовании. Вы можете анализировать из String obj и Stream.</target>
        </trans-unit>
        <trans-unit id="9a4a7774e7a2a8f2cd9dd46a13350306f9b613c0" translate="yes" xml:space="preserve">
          <source>Use DSM to extract fields.</source>
          <target state="translated">Используйте DSM для извлечения полей.</target>
        </trans-unit>
        <trans-unit id="de80861d34aeb2ec7058638972e4a0316739e902" translate="yes" xml:space="preserve">
          <source>Use org.json library to parse it and create JsonObject:</source>
          <target state="translated">Используйте библиотеку org.json для ее разбора и создания JsonObject:</target>
        </trans-unit>
        <trans-unit id="d5ecf0ed037efb9183e2f08bdb08774b7852d7dc" translate="yes" xml:space="preserve">
          <source>Using this library you only need to create a model with the same JSON structure. Then the model is automatically filled in. You have to call your variables as your JSON keys, or use &lt;a href=&quot;https://www.javadoc.io/doc/com.google.code.gson/gson/latest/com.google.gson/com/google/gson/annotations/SerializedName.html&quot;&gt;&lt;code&gt;@SerializedName&lt;/code&gt;&lt;/a&gt; if you want to use different names.</source>
          <target state="translated">Используя эту библиотеку, вам нужно только создать модель с той же структурой JSON. Затем модель автоматически заполняется. Вы должны вызывать свои переменные в качестве ключей JSON или использовать &lt;a href=&quot;https://www.javadoc.io/doc/com.google.code.gson/gson/latest/com.google.gson/com/google/gson/annotations/SerializedName.html&quot;&gt; &lt;code&gt;@SerializedName&lt;/code&gt; ,&lt;/a&gt; если хотите использовать разные имена.</target>
        </trans-unit>
        <trans-unit id="ce452f49a22173c844854192c968edd7b0ab91dd" translate="yes" xml:space="preserve">
          <source>Validating and Non-Validating parser support</source>
          <target state="translated">Поддержка валидационных и не валидационных парсеров</target>
        </trans-unit>
        <trans-unit id="f56c314abd8f309e656f2b1afa4819e8b22a6b2a" translate="yes" xml:space="preserve">
          <source>We can use the JSONObject class to convert a JSON string to a JSON object,
and to iterate over the JSON object. Use the following code.</source>
          <target state="translated">Мы можем использовать класс JSONObject для преобразования JSON-строки в JSON-объект,а также для итераций над JSON-объектом.Используйте следующий код.</target>
        </trans-unit>
        <trans-unit id="d39e447fecdad1f90b83cab9cdabcd361a315fcd" translate="yes" xml:space="preserve">
          <source>What are the API that does implement JSR-353 (JSON)</source>
          <target state="translated">Что такое API,реализующий JSR-353 (JSON)?</target>
        </trans-unit>
        <trans-unit id="494e0a51f1cb85162e2e1d6c23583e1a1c2940ad" translate="yes" xml:space="preserve">
          <source>You can also loop through the &quot;posts&quot; array as so:</source>
          <target state="translated">Так же можно выполнять цикл через массив &quot;сообщения&quot;:</target>
        </trans-unit>
        <trans-unit id="2286851d16c9f677feb653c1051894fb28e1f3ee" translate="yes" xml:space="preserve">
          <source>You can generate model from JSON automatically using online tools like &lt;a href=&quot;http://www.jsonschema2pojo.org/&quot;&gt;this&lt;/a&gt;.</source>
          <target state="translated">Вы можете генерировать модель из JSON автоматически, используя такие онлайн-инструменты.</target>
        </trans-unit>
        <trans-unit id="f22b2364e92a604b636eb1af775cc217bf949a8b" translate="yes" xml:space="preserve">
          <source>You can see a complete example here:</source>
          <target state="translated">Полный пример можно посмотреть здесь:</target>
        </trans-unit>
        <trans-unit id="3871d2c5232d22375b0eeb6345c2e283ed7f4bcb" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;https://mfatihercik.github.io/dsm&quot;&gt;DSM&lt;/a&gt; stream parsing library for parsing complex json and XML document. DSM parse data only once and not load all data into memory.</source>
          <target state="translated">Вы можете использовать библиотеку разбора потока &lt;a href=&quot;https://mfatihercik.github.io/dsm&quot;&gt;DSM&lt;/a&gt; для разбора сложных документов json и XML. DSM анализирует данные только один раз и не загружает все данные в память.</target>
        </trans-unit>
        <trans-unit id="51dae0bf3fc8f570a97d4e9a63b4e622ad88275b" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;JsonNode&lt;/code&gt; for a structured tree representation of your JSON string. It's part of the rock solid &lt;a href=&quot;https://github.com/FasterXML/jackson&quot;&gt;&lt;em&gt;jackson&lt;/em&gt; library&lt;/a&gt; which is omnipresent.</source>
          <target state="translated">Вы можете использовать &lt;code&gt;JsonNode&lt;/code&gt; для структурированного представления дерева вашей строки JSON. Это часть &lt;a href=&quot;https://github.com/FasterXML/jackson&quot;&gt;библиотеки&lt;/a&gt; Rock &lt;em&gt;Solid Jackson,&lt;/em&gt; которая вездесуща.</target>
        </trans-unit>
        <trans-unit id="1739b37566f3eb9d69fdcaeff614eee0838dd678" translate="yes" xml:space="preserve">
          <source>You can use &lt;strong&gt;Jackson&lt;/strong&gt; libraries, for binding JSON String into &lt;strong&gt;POJO&lt;/strong&gt; (&lt;strong&gt;&lt;em&gt;Plain Old Java Object&lt;/em&gt;&lt;/strong&gt;) instances. POJO is simply a class with only private fields and public getter/setter methods. Jackson is going to traverse the methods (using &lt;strong&gt;reflection&lt;/strong&gt;), and maps the JSON object into the POJO instance as the field names of the class fits to the field names of the JSON object.</source>
          <target state="translated">Вы можете использовать библиотеки &lt;strong&gt;Джексона&lt;/strong&gt; для привязки JSON String к экземплярам &lt;strong&gt;POJO&lt;/strong&gt; ( &lt;strong&gt;&lt;em&gt;Plain Old Java Object&lt;/em&gt;&lt;/strong&gt; ). POJO - это просто класс с только закрытыми полями и общедоступными методами получения / установки. Джексон собирается обойти методы (используя &lt;strong&gt;отражение&lt;/strong&gt; ) и отображает объект JSON в экземпляр POJO, когда имена полей класса соответствуют именам полей объекта JSON.</target>
        </trans-unit>
        <trans-unit id="1833a7fcec164db264b95fc3f2c7116552f703f3" translate="yes" xml:space="preserve">
          <source>You can use &lt;strong&gt;Jayway JsonPath&lt;/strong&gt;. Below is a GitHub link with source code, pom details and good documentation.</source>
          <target state="translated">Вы можете использовать &lt;strong&gt;Jayway JsonPath&lt;/strong&gt; . Ниже приведена ссылка на GitHub с исходным кодом, подробностями о pom и хорошей документацией.</target>
        </trans-unit>
        <trans-unit id="27feb53b95d6cc0a8e5dbfe7c29a6b57cd36577c" translate="yes" xml:space="preserve">
          <source>You can use the Gson Library to parse the JSON string.</source>
          <target state="translated">Вы можете использовать библиотеку Гсона для разбора строки JSON.</target>
        </trans-unit>
        <trans-unit id="829d83a3ff692e4b324b2503fa7e9625db4df88a" translate="yes" xml:space="preserve">
          <source>You could use &lt;a href=&quot;https://github.com/google/gson&quot;&gt;Google Gson&lt;/a&gt;.</source>
          <target state="translated">Вы можете использовать &lt;a href=&quot;https://github.com/google/gson&quot;&gt;Google Gson&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="18f0351dcd2f2cc886942c22f5380be9b3d6b2ad" translate="yes" xml:space="preserve">
          <source>You may find more examples from: &lt;a href=&quot;http://theoryapp.com/parse-json-in-java/&quot;&gt;Parse JSON in Java&lt;/a&gt;</source>
          <target state="translated">Вы можете найти больше примеров из: &lt;a href=&quot;http://theoryapp.com/parse-json-in-java/&quot;&gt;Parse JSON на Java&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7e15bb5c01e7dd56499e37c634cf791d3a519aee" translate="yes" xml:space="preserve">
          <source>`</source>
          <target state="translated">`</target>
        </trans-unit>
        <trans-unit id="c4c7bfd2eb4f931d7799bfe2622f04431fafc657" translate="yes" xml:space="preserve">
          <source>and from message object you can fetch any of its attribute.</source>
          <target state="translated">и из объекта сообщения можно получить любой его атрибут.</target>
        </trans-unit>
        <trans-unit id="cf207c66af7e6aad1158ac914cd0992bc4f2b6bf" translate="yes" xml:space="preserve">
          <source>and then it uses the generated RepositoryInfo and Owner classes to parse the provided input stream and pick certain information up while doing that:</source>
          <target state="translated">Затем он использует сгенерированные классы RepositoryInfo и Owner для разбора предоставленного входного потока и получения определенной информации при этом:</target>
        </trans-unit>
        <trans-unit id="8e3d482d85fad29be0fda23ab59f7468fbda5329" translate="yes" xml:space="preserve">
          <source>and to use:</source>
          <target state="translated">и использовать:</target>
        </trans-unit>
        <trans-unit id="5e9b496a0935b15e72709835275b0a4dd4c2a1c6" translate="yes" xml:space="preserve">
          <source>etc...</source>
          <target state="translated">etc...</target>
        </trans-unit>
        <trans-unit id="161f626fb46e32dc28bb28ba0e99d92b77a220a5" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;jsonData&lt;/code&gt; is a string of json data.</source>
          <target state="translated">где &lt;code&gt;jsonData&lt;/code&gt; - это строка данных json.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
