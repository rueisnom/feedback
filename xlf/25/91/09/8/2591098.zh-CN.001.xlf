<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/2591098">
    <body>
      <group id="2591098">
        <trans-unit id="ea65c5c96e1eac1d9c4435b5e12b399ffced32c4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://code.google.com/p/quick-json/&quot;&gt;quick-json parser&lt;/a&gt; is very straightforward, flexible, very fast and customizable. Try it</source>
          <target state="translated">&lt;a href=&quot;https://code.google.com/p/quick-json/&quot;&gt;quick-json解析器&lt;/a&gt;非常简单，灵活，快速且可自定义。 尝试一下</target>
        </trans-unit>
        <trans-unit id="581c985eea09e3d23ece6c4273d96320b7a256bd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/FasterXML/jackson-databind/&quot;&gt;Jackson&lt;/a&gt; (&lt;a href=&quot;http://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind&quot;&gt;Maven&lt;/a&gt;)</source>
          <target state="translated">&lt;a href=&quot;https://github.com/FasterXML/jackson-databind/&quot;&gt;杰克逊&lt;/a&gt; （ &lt;a href=&quot;http://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind&quot;&gt;Maven&lt;/a&gt; ）</target>
        </trans-unit>
        <trans-unit id="54b860be7eb1706dd022135cab0fcf7ba4e7faf3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/google/gson&quot;&gt;Google GSON&lt;/a&gt; (&lt;a href=&quot;http://mvnrepository.com/artifact/com.google.code.gson/gson&quot;&gt;Maven&lt;/a&gt;)</source>
          <target state="translated">&lt;a href=&quot;https://github.com/google/gson&quot;&gt;Google GSON&lt;/a&gt; （ &lt;a href=&quot;http://mvnrepository.com/artifact/com.google.code.gson/gson&quot;&gt;Maven&lt;/a&gt; ）</target>
        </trans-unit>
        <trans-unit id="3ee7e3039883c031f4cdb591853c88b660863b1d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/stleary/JSON-java&quot;&gt;Org.JSON&lt;/a&gt; (&lt;a href=&quot;http://mvnrepository.com/artifact/org.json/json&quot;&gt;Maven&lt;/a&gt;)</source>
          <target state="translated">&lt;a href=&quot;https://github.com/stleary/JSON-java&quot;&gt;Org.JSON&lt;/a&gt; （ &lt;a href=&quot;http://mvnrepository.com/artifact/org.json/json&quot;&gt;Maven&lt;/a&gt; ）</target>
        </trans-unit>
        <trans-unit id="05f76f0d55a1a802b770e68d6fdf7db04a914eee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;jsoniter&lt;/code&gt; (jsoniterator) is a relatively new and simple json library, designed to be simple and fast. All you need to do to deserialize json data is</source>
          <target state="translated">&lt;code&gt;jsoniter&lt;/code&gt; （jsoniterator）是一个相对较新且简单的json库，旨在简单快速。 反序列化json数据所需要做的就是</target>
        </trans-unit>
        <trans-unit id="03610e46c3979f79023144c6bf30ea1d6e343100" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;fromJson()&lt;/em&gt;&lt;/strong&gt; &amp;ndash; Convert JSON into Java object</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;fromJson（）&lt;/em&gt;&lt;/strong&gt; &amp;ndash;将JSON转换为Java对象</target>
        </trans-unit>
        <trans-unit id="705c755a5250c8b1f571cf8890ad4135858b182f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;toJson()&lt;/em&gt;&lt;/strong&gt; &amp;ndash; Convert Java object to JSON format</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;toJson（）&lt;/em&gt;&lt;/strong&gt; &amp;ndash;将Java对象转换为JSON格式</target>
        </trans-unit>
        <trans-unit id="fb8f9c8b1988dbf445e49cc72e660540c1cce355" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Code for converting this JSON to a Java class.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;用于将此JSON转换为Java类的代码。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f561f0a28a73c1cfb924e851f87e5d54afde91ae" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;DSM is very good for complex json and xml.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;DSM非常适合复杂的json和xml。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9251863320abe2fea319e96654ab3025da8e313e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Gson&lt;/strong&gt; is easy to learn and implement, what we need to know are following two methods</source>
          <target state="translated">&lt;strong&gt;Gson&lt;/strong&gt;易于学习和实现，我们需要了解的是以下两种方法</target>
        </trans-unit>
        <trans-unit id="ff1a5ff658b0821446261c49fa429c9c5086a950" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;I have JSON like this:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;我有这样的JSON：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ab280e1e06c703b1cad8b270301293d1d14cc3ed" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Jackson&lt;/strong&gt; takes 6.5~7 seconds</source>
          <target state="translated">&lt;strong&gt;杰克逊&lt;/strong&gt;需要6.5〜7秒</target>
        </trans-unit>
        <trans-unit id="e7af3e9da3894854740bb7458fbfd889afae67ea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Java class&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Java类&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f1f5f742f9fbb132d6357c0198a1f1c2c4ef5414" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Maven&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Maven&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e1129c7696d19cfbf06a0a0f1333da3bff9e773b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Page&lt;/strong&gt; Class, a composite of &lt;strong&gt;PageInfo&lt;/strong&gt; Class and array of &lt;strong&gt;Post&lt;/strong&gt; Instances</source>
          <target state="translated">&lt;strong&gt;Page&lt;/strong&gt; Class， &lt;strong&gt;PageInfo&lt;/strong&gt; Class和&lt;strong&gt;Post&lt;/strong&gt; Instances数组的组合</target>
        </trans-unit>
        <trans-unit id="0dc53093af6d0bc6129a4b99c67b4821d7476c6b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;PageInfo&lt;/strong&gt; Class</source>
          <target state="translated">&lt;strong&gt;PageInfo&lt;/strong&gt;类</target>
        </trans-unit>
        <trans-unit id="5bdf7aae131dcf748c7b9ace65a6cbcede925cd4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Performance comparison&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;性能比较&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1b1137c7cde8f7f4f635ccde6b622d5a38018762" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Posts&lt;/strong&gt; Class</source>
          <target state="translated">&lt;strong&gt;职位&lt;/strong&gt;类别</target>
        </trans-unit>
        <trans-unit id="43f038c62b45a67bf440ca6fe8caa39490287184" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Solution&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Solution&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1886539a537103abdbc2deba551ee10fab14bc0c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 1&lt;/strong&gt;: Add the jayway JSON path dependency in your class path using Maven or download the JAR file and manually add it.</source>
          <target state="translated">&lt;strong&gt;步骤1&lt;/strong&gt; ：使用Maven在类路径中添加jayway JSON路径依赖项，或下载JAR文件并手动添加。</target>
        </trans-unit>
        <trans-unit id="2fbd052391bb5db3b551a01917005442e6578fba" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 2&lt;/strong&gt;: Please save your input JSON as a file for this example. In my case I saved your JSON as sampleJson.txt. Note you missed a comma between pageInfo and posts.</source>
          <target state="translated">&lt;strong&gt;步骤2&lt;/strong&gt; ：在此示例中，请将输入的JSON保存为文件。 就我而言，我将您的JSON保存为sampleJson.txt。 请注意，您错过了pageInfo和posts之间的逗号。</target>
        </trans-unit>
        <trans-unit id="048e0b165aae8387f19fb8f66135b22372f11de4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 3&lt;/strong&gt;: Read the JSON contents from the above file using bufferedReader and save it as String.</source>
          <target state="translated">&lt;strong&gt;步骤3&lt;/strong&gt; ：使用bufferedReader从上述文件中读取JSON内容，并将其另存为String。</target>
        </trans-unit>
        <trans-unit id="84f862c1d56afbc5d00599cfbabc74c958688a25" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 4&lt;/strong&gt;: Parse your JSON string using jayway JSON parser.</source>
          <target state="translated">&lt;strong&gt;步骤4&lt;/strong&gt; ：使用jayway JSON解析器解析JSON字符串。</target>
        </trans-unit>
        <trans-unit id="cc327bb753d6694e6d587e28b624df3fd2decf43" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 5&lt;/strong&gt;: Read the details like below.</source>
          <target state="translated">&lt;strong&gt;步骤5&lt;/strong&gt; ：阅读以下详细信息。</target>
        </trans-unit>
        <trans-unit id="b913191ee8246154e8264c165558cedbc926ca35" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The output will be&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;输出将是&lt;/strong&gt; ：</target>
        </trans-unit>
        <trans-unit id="200627b0eb37efd54845f9a6bd7c0133da5e8d51" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Update&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Update&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f25f3e28c57eff39cd3e2e6eadedc301de5413fd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;jackson-annotations-2.5.0.jar&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;jackson-annotations-2.5.0.jar&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="86d8a75250ca1708ac4c4b1ec45987048798776d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;jackson-core-2.5.1.jar&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;jackson-core-2.5.1.jar&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b6feda883de2fd3be3de89dd9b83fc93c7213d6a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;jackson-databind-2.5.1.jar&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;jackson-databind-2.5.1.jar&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="12743475bf50fb900579f074c47e0df51b6d05c5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;org.json&lt;/strong&gt; takes 20~21 seconds</source>
          <target state="translated">&lt;strong&gt;org.json&lt;/strong&gt;需要&lt;strong&gt;20〜21&lt;/strong&gt;秒</target>
        </trans-unit>
        <trans-unit id="fb28eb98a5cc6cac6edaa0094b2e5918a1aad2ec" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;page&lt;/strong&gt; variable serialized to json:</source>
          <target state="translated">&lt;strong&gt;页面&lt;/strong&gt;变量序列化为json：</target>
        </trans-unit>
        <trans-unit id="d810459f3180bff7e2a7a6af2c59c8c67e8fa178" translate="yes" xml:space="preserve">
          <source>A - Explanation</source>
          <target state="translated">A-解析</target>
        </trans-unit>
        <trans-unit id="b67ce5d5635f015e9f01c6db5b0c651824b1cb5b" translate="yes" xml:space="preserve">
          <source>Almost all the answers given requires a full deserialization of the JSON into a Java object before accessing the value in the property of interest. Another alternative, which does not go this route is to use &lt;a href=&quot;http://goessner.net/articles/JsonPath/&quot;&gt;JsonPATH&lt;/a&gt; which is like XPath for JSON and allows traversing of JSON objects.</source>
          <target state="translated">在访问感兴趣的属性中的值之前，几乎所有给出的答案都需要将JSON完全反序列化为Java对象。 另一个不走这条路的选择是使用&lt;a href=&quot;http://goessner.net/articles/JsonPath/&quot;&gt;JsonPATH&lt;/a&gt; ，它类似于XPath for JSON，并允许遍历JSON对象。</target>
        </trans-unit>
        <trans-unit id="af8d410d429ad57fab9c29adda1ef85707482ce8" translate="yes" xml:space="preserve">
          <source>And &lt;strong&gt;to help you decide&lt;/strong&gt;... I found this article as well:</source>
          <target state="translated">&lt;strong&gt;为了帮助您做出决定&lt;/strong&gt; &amp;hellip;&amp;hellip;我也找到了这篇文章：</target>
        </trans-unit>
        <trans-unit id="663653cb78ef87e0bb6480289ada2bfff8942b72" translate="yes" xml:space="preserve">
          <source>Automatic model generation</source>
          <target state="translated">自动生成模型</target>
        </trans-unit>
        <trans-unit id="b738ee3e56540b60fee89056a48118c59804bed7" translate="yes" xml:space="preserve">
          <source>B - Main POJO Class : Page</source>
          <target state="translated">B-POJO主班级:页</target>
        </trans-unit>
        <trans-unit id="d66d5132e915f27b988bbcb532fd4097e0995031" translate="yes" xml:space="preserve">
          <source>But if one just want to parse a JSON string and get some values, (OR create a JSON string from scratch to send over wire) just use JaveEE jar which contains JsonReader, JsonArray, JsonObject etc. You may want to download the implementation of that spec like javax.json. With these two jars I am able to parse the json and use the values.</source>
          <target state="translated">但如果你只想解析一个JSON字符串并得到一些值,(或者从头开始创建一个JSON字符串,通过网络发送),只需使用JaveEE jar,它包含JsonReader、JsonArray、JsonObject等。你可能需要下载像javax.json这样的规范的实现。有了这两个jar,我就可以解析json并使用这些值。</target>
        </trans-unit>
        <trans-unit id="76ff8126da6f93d5ee3697f05578f8cbc37e3819" translate="yes" xml:space="preserve">
          <source>C - Child POJO Class : PageInfo</source>
          <target state="translated">C-儿童POJO类:PageInfo</target>
        </trans-unit>
        <trans-unit id="8a2dc4ac0a59e84b96d9e4e2011a1d324b5615a6" translate="yes" xml:space="preserve">
          <source>Check out the &lt;a href=&quot;http://jsoniter.com/&quot;&gt;official website&lt;/a&gt;
for more information.</source>
          <target state="translated">请访问&lt;a href=&quot;http://jsoniter.com/&quot;&gt;官方网站&lt;/a&gt;以获取更多信息。</target>
        </trans-unit>
        <trans-unit id="5d412e7449d9e26d0c1415515ac836426e5d9116" translate="yes" xml:space="preserve">
          <source>Check the JsonPath specification page for more information on the other ways to transverse JSON.</source>
          <target state="translated">查看JsonPath规范页面,了解更多关于其他横穿JSON的方法。</target>
        </trans-unit>
        <trans-unit id="5f16c172ef732329922fe4de767f371ef0e8a14c" translate="yes" xml:space="preserve">
          <source>Compliant with JSON specification (RFC4627)</source>
          <target state="translated">符合JSON规范(RFC4627)</target>
        </trans-unit>
        <trans-unit id="69c7ed2e68fc1c1c410d3a15220f49b10f78ddc3" translate="yes" xml:space="preserve">
          <source>Configurable validation of key/value pairs of any JSON Hierarchy</source>
          <target state="translated">可配置的任何JSON Hierarchy的key-value对的可配置验证。</target>
        </trans-unit>
        <trans-unit id="b43f50ee8ee18a4adf5d2723ee8fe73aa7a2fa98" translate="yes" xml:space="preserve">
          <source>Create Java object from JSON</source>
          <target state="translated">从JSON创建Java对象</target>
        </trans-unit>
        <trans-unit id="bfe5f0fdd4ad15aa4bcd6cf27f41fdb5fa152040" translate="yes" xml:space="preserve">
          <source>Create a yaml Mapping file.</source>
          <target state="translated">创建一个yaml Mapping文件。</target>
        </trans-unit>
        <trans-unit id="5a1f8dfe343d664415ddc94739883a4753af831f" translate="yes" xml:space="preserve">
          <source>Creating JSON:</source>
          <target state="translated">创建JSON。</target>
        </trans-unit>
        <trans-unit id="ba357fa573625c18a64c4a5ec0aa47fe1deb81cf" translate="yes" xml:space="preserve">
          <source>D - Child POJO Class : Post</source>
          <target state="translated">D----------------------------------------------------儿童POJO班:职位</target>
        </trans-unit>
        <trans-unit id="1555271c54fe56903d1f72ec8246497a843bcfc1" translate="yes" xml:space="preserve">
          <source>Done. &lt;em&gt;Drops microphone&lt;/em&gt;.
This works with &lt;code&gt;JSONObjects&lt;/code&gt; as well. After that, you can just look through your hierarchy of &lt;code&gt;Objects&lt;/code&gt; using the &lt;code&gt;get()&lt;/code&gt; methods on your objects.</source>
          <target state="translated">做完了 &lt;em&gt;放下麦克风&lt;/em&gt; 。 这也适用于 &lt;code&gt;JSONObjects&lt;/code&gt; 。 之后，您可以使用 &lt;code&gt;Objects&lt;/code&gt; 的 &lt;code&gt;get()&lt;/code&gt; 方法浏览对象的层次结构。</target>
        </trans-unit>
        <trans-unit id="ab13932a6db4b8954dec2f6bc4eb7836527a70a7" translate="yes" xml:space="preserve">
          <source>Downloadable jar:  &lt;a href=&quot;http://mvnrepository.com/artifact/org.json/json&quot;&gt;http://mvnrepository.com/artifact/org.json/json&lt;/a&gt;</source>
          <target state="translated">可下载的jar： &lt;a href=&quot;http://mvnrepository.com/artifact/org.json/json&quot;&gt;http&lt;/a&gt; ： //mvnrepository.com/artifact/org.json/json</target>
        </trans-unit>
        <trans-unit id="2b4d50543ce7975d4b13d9a5652eeb5444ad618b" translate="yes" xml:space="preserve">
          <source>E - Sample JSON File : sampleJSONFile.json</source>
          <target state="translated">E-JSON文件样本:sampleaseJSONFile.json</target>
        </trans-unit>
        <trans-unit id="00feb5912c0950d28a766de9161106eb61bf7ec1" translate="yes" xml:space="preserve">
          <source>Ease of use (code is simple to write and legible) - that goes with features.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce370a5c966639d991d2edbcf30aa43459931fb1" translate="yes" xml:space="preserve">
          <source>Easy to use # Very small footprint</source>
          <target state="translated">易于使用 #占地面积小</target>
        </trans-unit>
        <trans-unit id="1203b487908e8c8120e99871d562a439ab5dac96" translate="yes" xml:space="preserve">
          <source>F - Demo Code</source>
          <target state="translated">F-演示代码</target>
        </trans-unit>
        <trans-unit id="5df81ffa82179b458e1d55e350db9d88805a69b2" translate="yes" xml:space="preserve">
          <source>Features:</source>
          <target state="translated">Features:</target>
        </trans-unit>
        <trans-unit id="4fd018f9b4541f8c7b5f7b837295fec5fbe165f9" translate="yes" xml:space="preserve">
          <source>First you need to select an &lt;strong&gt;implementation library&lt;/strong&gt; to do that.</source>
          <target state="translated">首先，您需要选择一个&lt;strong&gt;实现库&lt;/strong&gt;来做到这一点。</target>
        </trans-unit>
        <trans-unit id="2fab5b640e16bedd65b12cef9e96c7aa9b3dc83b" translate="yes" xml:space="preserve">
          <source>For 1, see this benchmark: &lt;a href=&quot;https://github.com/fabienrenaud/java-json-benchmark&quot;&gt;https://github.com/fabienrenaud/java-json-benchmark&lt;/a&gt; I did using &lt;a href=&quot;http://openjdk.java.net/projects/code-tools/jmh/&quot;&gt;JMH&lt;/a&gt; which compares (jackson, gson, genson, fastjson, org.json, jsonp) performance of serializers and deserializers using stream and databind APIs.
For 2, you can find numerous examples on the Internet. The benchmark above can also be used as a source of examples...</source>
          <target state="translated">对于1，请参见以下基准测试： &lt;a href=&quot;https://github.com/fabienrenaud/java-json-benchmark&quot;&gt;https&lt;/a&gt; : //github.com/fabienrenaud/java-json-benchmark我使用&lt;a href=&quot;http://openjdk.java.net/projects/code-tools/jmh/&quot;&gt;JMH&lt;/a&gt;进行了比较，它使用流比较（杰克逊，gson，genson，fastjson，org.json，jsonp）串行器和反序列化器的性能和databind API。 对于2，您可以在Internet上找到许多示例。 上面的基准也可以用作示例来源...</target>
        </trans-unit>
        <trans-unit id="2f0a74d7dfe882b3c0628193b58ea62013cab0bc" translate="yes" xml:space="preserve">
          <source>For further reference you can refer to the following &lt;a href=&quot;http://javahai.blogspot.in/2016/03/create-java-object-from-json-string.html&quot;&gt;link&lt;/a&gt;.</source>
          <target state="translated">有关更多参考，请参考以下&lt;a href=&quot;http://javahai.blogspot.in/2016/03/create-java-object-from-json-string.html&quot;&gt;链接&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="cc0b99d1a4fc0b06d6dcf2ceb23a820e9c3d979e" translate="yes" xml:space="preserve">
          <source>For mobile apps: dependency/jar size</source>
          <target state="translated">对于移动应用:dependencyjar大小</target>
        </trans-unit>
        <trans-unit id="e5e03d0772320e98ed4376b556afec9cf1112698" translate="yes" xml:space="preserve">
          <source>For the sake of the example lets assume you have a class &lt;strong&gt;&lt;code&gt;Person&lt;/code&gt;&lt;/strong&gt; with just a &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="translated">为了便于说明，假设您有一个&lt;strong&gt; &lt;code&gt;Person&lt;/code&gt; &lt;/strong&gt;类，仅包含一个 &lt;code&gt;name&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2885f44578c0f825368033cb53176134ed3d590b" translate="yes" xml:space="preserve">
          <source>For your particular example, the following code decodes your json with jackson:</source>
          <target state="translated">对于你的特殊例子,下面的代码用jackson解码你的json。</target>
        </trans-unit>
        <trans-unit id="46bef7454065eebd2a67f75cdc30df17dc513844" translate="yes" xml:space="preserve">
          <source>From your example:</source>
          <target state="translated">从你的例子来看。</target>
        </trans-unit>
        <trans-unit id="a69798c76d0a5628b350f29769d994d62ecbe059" translate="yes" xml:space="preserve">
          <source>G - Demo Output</source>
          <target state="translated">G-演示输出</target>
        </trans-unit>
        <trans-unit id="9adca0a1f8e9c23815dd4bc100592ef7dd2c16b1" translate="yes" xml:space="preserve">
          <source>Gradle import</source>
          <target state="translated">Gradle进口</target>
        </trans-unit>
        <trans-unit id="5a3edd9462d95d94e4c206a206631620177058b8" translate="yes" xml:space="preserve">
          <source>Here is the required code;</source>
          <target state="translated">这里是需要的代码。</target>
        </trans-unit>
        <trans-unit id="cb1d161d6ba6dfb003d26634a915d135c72556ab" translate="yes" xml:space="preserve">
          <source>Here you can find a &lt;strong&gt;list of implementations&lt;/strong&gt; of JSR 353:</source>
          <target state="translated">在这里，您可以找到JSR 353 &lt;strong&gt;的实现列表&lt;/strong&gt; ：</target>
        </trans-unit>
        <trans-unit id="ea240118c4bf850ae6636a1a53c032f94886def1" translate="yes" xml:space="preserve">
          <source>High-Performance JSON parser</source>
          <target state="translated">高性能的JSON解析器</target>
        </trans-unit>
        <trans-unit id="e91c5dffba99be277021da86df113a93045c9b6d" translate="yes" xml:space="preserve">
          <source>Hope it helps!</source>
          <target state="translated">希望对你有帮助!</target>
        </trans-unit>
        <trans-unit id="68df6e851d85c7d09297b9204c8a83b835f72f14" translate="yes" xml:space="preserve">
          <source>How to parse JSON in Java</source>
          <target state="translated">如何在Java中解析JSON</target>
        </trans-unit>
        <trans-unit id="7cce87c2a84ffcdb1ce79866d0ce75d3a7b725e5" translate="yes" xml:space="preserve">
          <source>I believe the best practice should be to go through the official &lt;a href=&quot;http://json-processing-spec.java.net/&quot;&gt;Java JSON API&lt;/a&gt; which are still work in progress.</source>
          <target state="translated">我认为最佳做法应该是通过仍在进行中的官方&lt;a href=&quot;http://json-processing-spec.java.net/&quot;&gt;Java JSON API&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="2f9613b87bf96a3f80b384dbf2950b16ecee7d47" translate="yes" xml:space="preserve">
          <source>I have the following JSON text. How can I parse it to get the values of &lt;code&gt;pageName&lt;/code&gt;, &lt;code&gt;pagePic&lt;/code&gt;, &lt;code&gt;post_id&lt;/code&gt;, etc.?</source>
          <target state="translated">我有以下JSON文本。 如何解析它以获得 &lt;code&gt;pageName&lt;/code&gt; ， &lt;code&gt;pagePic&lt;/code&gt; ， &lt;code&gt;post_id&lt;/code&gt; 等的值？</target>
        </trans-unit>
        <trans-unit id="d8f0c4e0c9f55071e5234777e393a4c7be6419e6" translate="yes" xml:space="preserve">
          <source>I want to retrieve the value of &quot;translatedText&quot; attribute e.g. &quot;Arbeit&quot; using Google's Gson.</source>
          <target state="translated">我想用Google的Gson检索 &quot;translatedText &quot;属性的值,例如 &quot;Arbeit&quot;。</target>
        </trans-unit>
        <trans-unit id="d5f6b48ca5241e591de492e8026eabcfac5704ca" translate="yes" xml:space="preserve">
          <source>I wrote JSON content containing three arrays of respectively 20, 20 and 100 elements. I only want to get the 100 elements from the third array. I use the following JavaScript function to parse and get my entries.</source>
          <target state="translated">我写了一个包含三个数组的JSON内容,分别包含20、20和100个元素的数组。我只想从第三个数组中获取100个元素。我使用下面的JavaScript函数来解析和获取我的条目。</target>
        </trans-unit>
        <trans-unit id="bc670ce71e17cb364032562f9990059824ae23de" translate="yes" xml:space="preserve">
          <source>I've just copied your JSON sample into this file and put it under the project folder.</source>
          <target state="translated">我刚刚把你的JSON样本复制到这个文件里,放在项目文件夹下。</target>
        </trans-unit>
        <trans-unit id="ceb2cc12a904bbb5d45b6e59986a3aafd5b680bb" translate="yes" xml:space="preserve">
          <source>If one wants to create Java object from JSON and vice versa, use GSON or JACKSON third party jars etc.</source>
          <target state="translated">如果想从JSON中创建Java对象,反之亦然,可以使用GSON或JACKSON等第三方jars。</target>
        </trans-unit>
        <trans-unit id="c35a7233c9b98527537ebaf8214644c098990138" translate="yes" xml:space="preserve">
          <source>If you don't need object de-serialisation but to simply get an attribute, you can try org.json (&lt;strong&gt;or look GSON example above!&lt;/strong&gt;)</source>
          <target state="translated">如果您不需要对象反序列化，而只需获取属性，则可以尝试org.json（ &lt;strong&gt;或查看上面的GSON示例！&lt;/strong&gt; ）</target>
        </trans-unit>
        <trans-unit id="86de2921b10bc48cdd2792ee251a69936f29851b" translate="yes" xml:space="preserve">
          <source>If you go for Jackson, here is a good article about conversion between JSON to/from Java using Jackson: &lt;a href=&quot;https://www.mkyong.com/java/how-to-convert-java-object-to-from-json-jackson/&quot;&gt;https://www.mkyong.com/java/how-to-convert-java-object-to-from-json-jackson/&lt;/a&gt;</source>
          <target state="translated">如果您选择Jackson，这是一篇有关使用Jackson在JSON与Java之间进行转换的好文章： &lt;a href=&quot;https://www.mkyong.com/java/how-to-convert-java-object-to-from-json-jackson/&quot;&gt;https&lt;/a&gt; : //www.mkyong.com/java/how-to-convert-java-object-to-from-json-杰克逊/</target>
        </trans-unit>
        <trans-unit id="b3a718b5da6f863dd650d28b31b7f39126c939b8" translate="yes" xml:space="preserve">
          <source>If you have some Java class(say Message) representing the JSON string(jsonString), you can use &lt;a href=&quot;https://github.com/FasterXML/jackson&quot;&gt;Jackson&lt;/a&gt;  JSON library with:</source>
          <target state="translated">如果您有一些表示JSON字符串（jsonString）的Java类（例如Message），则可以将&lt;a href=&quot;https://github.com/FasterXML/jackson&quot;&gt;Jackson&lt;/a&gt; JSON库用于：</target>
        </trans-unit>
        <trans-unit id="7b6b38e774913e413531ed50fe8f99c268dc10e0" translate="yes" xml:space="preserve">
          <source>If you want to get a single attribute out you can do it easily with the Google library as well:</source>
          <target state="translated">如果你想把单一的属性拿出来,你也可以用Google库轻松完成。</target>
        </trans-unit>
        <trans-unit id="f8db7127b046e469b834e6462fa961384b7d6965" translate="yes" xml:space="preserve">
          <source>In addition to other answers, I recomend this online opensource service &lt;a href=&quot;http://www.jsonschema2pojo.org/&quot;&gt;jsonschema2pojo.org&lt;/a&gt; for quick generating Java classes from json or json schema for GSON, Jackson 1.x or Jackson 2.x. For example, if you have:</source>
          <target state="translated">除了其他答案外，我建议将此在线开源服务&lt;a href=&quot;http://www.jsonschema2pojo.org/&quot;&gt;jsonschema2pojo.org推荐&lt;/a&gt;用于从JSON或JSON模式快速生成GSON，Jackson 1.x或Jackson 2.x的Java类。 例如，如果您有：</target>
        </trans-unit>
        <trans-unit id="2c59ace1ec6d4b3f2c5104567e4ac03a2a140852" translate="yes" xml:space="preserve">
          <source>In this case Jackson performs better than Nashorn, which performs much better than org.json.
Nashorn API is harder to use than org.json's or Jackson's. Depending on your requirements Jackson and Nashorn both can be viable solutions.</source>
          <target state="translated">在这种情况下,Jackson的表现比Nashorn要好,Nashorn的表现比org.json要好很多。Nashorn的API比org.json或Jackson的更难使用。根据你的需求,Jackson和Nashorn都可以成为可行的解决方案。</target>
        </trans-unit>
        <trans-unit id="6ee9922191e0c50a3726173d2d2a5807b35d614f" translate="yes" xml:space="preserve">
          <source>In your JSON object, which is actually a &lt;strong&gt;composite&lt;/strong&gt; object, the main object consists o two sub-objects. So, our POJO classes should have the same hierarchy. I'll call the whole JSON Object as &lt;strong&gt;Page&lt;/strong&gt; object. &lt;strong&gt;Page&lt;/strong&gt; object consist of a &lt;strong&gt;PageInfo&lt;/strong&gt; object, and a &lt;strong&gt;Post&lt;/strong&gt; object array.</source>
          <target state="translated">在您的JSON对象（实际上是一个&lt;strong&gt;复合&lt;/strong&gt;对象）中，主要对象包含两个子对象。 因此，我们的POJO类应该具有相同的层次结构。 我将整个JSON对象称为&lt;strong&gt;Page&lt;/strong&gt;对象。 &lt;strong&gt;Page&lt;/strong&gt;对象由&lt;strong&gt;PageInfo&lt;/strong&gt;对象和&lt;strong&gt;Post&lt;/strong&gt;对象数组组成。</target>
        </trans-unit>
        <trans-unit id="7957cdd685e55b0659e0f881b1501d7538cec20a" translate="yes" xml:space="preserve">
          <source>It can be used like this:</source>
          <target state="translated">它可以这样使用。</target>
        </trans-unit>
        <trans-unit id="b8a08f56b44c2d87e99bd4f90e6ce3b988da05f1" translate="yes" xml:space="preserve">
          <source>It is a specification and the good folks at JayWay have created a Java implementation for the specification which you can find here: &lt;a href=&quot;https://github.com/jayway/JsonPath&quot;&gt;https://github.com/jayway/JsonPath&lt;/a&gt;</source>
          <target state="translated">这是一个规范，JayWay的好伙伴为该规范创建了Java实现，您可以在这里找到： &lt;a href=&quot;https://github.com/jayway/JsonPath&quot;&gt;https&lt;/a&gt; : //github.com/jayway/JsonPath</target>
        </trans-unit>
        <trans-unit id="031a4e76f0b39d0df073d934da5fc48da8d737e5" translate="yes" xml:space="preserve">
          <source>JSON</source>
          <target state="translated">JSON</target>
        </trans-unit>
        <trans-unit id="53caf5fac63a362f1b42f0a9bf30b0d1429744ca" translate="yes" xml:space="preserve">
          <source>Let me know if you have any questions.</source>
          <target state="translated">如果你有什么问题请告诉我。</target>
        </trans-unit>
        <trans-unit id="eb7d999e07b1970c76f70121da876b6c2277edcc" translate="yes" xml:space="preserve">
          <source>Let's say we have &lt;strong&gt;Page&lt;/strong&gt; class to deserialize given json data.</source>
          <target state="translated">假设我们有&lt;strong&gt;Page&lt;/strong&gt;类可以反序列化给定的json数据。</target>
        </trans-unit>
        <trans-unit id="3d575f5e4334f1ec638628bfc8458d0aaaae4399" translate="yes" xml:space="preserve">
          <source>Maven:</source>
          <target state="translated">Maven:</target>
        </trans-unit>
        <trans-unit id="68c2cc7f0ceaa3e499ecb4db331feb4debbbcc23" translate="yes" xml:space="preserve">
          <source>Model</source>
          <target state="translated">Model</target>
        </trans-unit>
        <trans-unit id="cf9db3cb2277b774f7e804d9f63363f022644951" translate="yes" xml:space="preserve">
          <source>My personal favourite as to the great JSON serialisation / de-serialisation of objects.</source>
          <target state="translated">至于伟大的JSON序列化去序列化对象,我个人最喜欢。</target>
        </trans-unit>
        <trans-unit id="bce347b8b84e91a762a886a1d5505fcc68cb0f69" translate="yes" xml:space="preserve">
          <source>No dependency on external libraries</source>
          <target state="translated">不依赖外部库</target>
        </trans-unit>
        <trans-unit id="fd5a170699b9eb4b30561cd70cabb9b28942c677" translate="yes" xml:space="preserve">
          <source>Now you can parse using Gson library:</source>
          <target state="translated">现在你可以使用Gson库进行解析了。</target>
        </trans-unit>
        <trans-unit id="a484f9dc3e0f6afa1adeb91f3dbdf89f99016e46" translate="yes" xml:space="preserve">
          <source>Now, before anyone goes and downvotes this answer because it doesn't use GSON, org.json, Jackson, or any of the other 3rd party frameworks available, it's an example of &quot;required code&quot; per the question to parse the provided text.  I am well aware that &lt;a href=&quot;http://openjdk.java.net/jeps/198&quot;&gt;adherence to the current standard JSR 353 was not being considered for JDK 9&lt;/a&gt; and as such the &lt;a href=&quot;https://jcp.org/en/jsr/detail?id=353&quot;&gt;JSR 353 spec&lt;/a&gt; should be treated the same as any other 3rd party JSON handling implementation.</source>
          <target state="translated">现在，在任何人因为不使用GSON，org.json，Jackson或任何其他可用的第三方框架而拒绝回答这个问题之前，它是每个问题用于解析所提供文本的&amp;ldquo;必需代码&amp;rdquo;的示例。 我很清楚， &lt;a href=&quot;http://openjdk.java.net/jeps/198&quot;&gt;JDK 9并未考虑遵守当前标准JSR 353，因此&lt;/a&gt;应将&lt;a href=&quot;https://jcp.org/en/jsr/detail?id=353&quot;&gt;JSR 353规范&lt;/a&gt;与其他任何第三方的JSON处理实现一样对待。</target>
        </trans-unit>
        <trans-unit id="9bf41a6d92f4678e2f2e1714e549e74448f091ce" translate="yes" xml:space="preserve">
          <source>Now, use this object to get your values:</source>
          <target state="translated">现在,用这个对象来获取你的值。</target>
        </trans-unit>
        <trans-unit id="7e2ce87913736a80d592df235669758288745cc1" translate="yes" xml:space="preserve">
          <source>One can use &lt;a href=&quot;https://github.com/apache/incubator-netbeans-html4j&quot;&gt;Apache @Model annotation&lt;/a&gt; to create &lt;strong&gt;Java&lt;/strong&gt; model classes representing structure of &lt;strong&gt;JSON&lt;/strong&gt; files and use them to access various elements in the &lt;strong&gt;JSON&lt;/strong&gt; tree. Unlike other solutions this one &lt;em&gt;works completely without reflection&lt;/em&gt; and is thus suitable for environments where reflection is impossible or comes with significant overhead.</source>
          <target state="translated">可以使用&lt;a href=&quot;https://github.com/apache/incubator-netbeans-html4j&quot;&gt;Apache @Model批注&lt;/a&gt;创建表示&lt;strong&gt;JSON&lt;/strong&gt;文件结构的&lt;strong&gt;Java&lt;/strong&gt;模型类，并使用它们访问&lt;strong&gt;JSON&lt;/strong&gt;树中的各种元素。 与其他解决方案不同，该解决方案&lt;em&gt;完全无需反射即可工作&lt;/em&gt; ，因此适用于不可能进行反射或开销很大的环境。</target>
        </trans-unit>
        <trans-unit id="dff366f935f687805e17e00bde34355d9df3edef" translate="yes" xml:space="preserve">
          <source>Page class</source>
          <target state="translated">网页类</target>
        </trans-unit>
        <trans-unit id="7294d33710169103141018bfcb0ee5ad3daa81e2" translate="yes" xml:space="preserve">
          <source>Parsing</source>
          <target state="translated">Parsing</target>
        </trans-unit>
        <trans-unit id="33e92b6b98157a0b3e332d3aff1d2cdddbdcc5a2" translate="yes" xml:space="preserve">
          <source>Parsing:</source>
          <target state="translated">Parsing:</target>
        </trans-unit>
        <trans-unit id="63c904559993935c470f516c8b549ca7f3640dbb" translate="yes" xml:space="preserve">
          <source>Performance</source>
          <target state="translated">Performance</target>
        </trans-unit>
        <trans-unit id="78567b320dd5ce717616b908847878e0a7b0a67c" translate="yes" xml:space="preserve">
          <source>Please do something like this:</source>
          <target state="translated">请做这样的事情。</target>
        </trans-unit>
        <trans-unit id="2e3e17743adee6ed5daa287a499018808e01b737" translate="yes" xml:space="preserve">
          <source>Please follow the below steps.</source>
          <target state="translated">请按照以下步骤进行操作。</target>
        </trans-unit>
        <trans-unit id="06a02c250ba2e9a5ec6d861f17aa8cad8565b535" translate="yes" xml:space="preserve">
          <source>Pluggable Custom Validation support - Keys/Values can be validated by configuring custom validators as and when encountered</source>
          <target state="translated">可插拔的自定义验证支持-KeysValues可以通过配置自定义验证器来验证,当遇到时,可以通过配置自定义验证器来验证。</target>
        </trans-unit>
        <trans-unit id="37f53753a64b29e001d0ac82c818162cc4fdeacc" translate="yes" xml:space="preserve">
          <source>Quick takeaway of the benchmark: &lt;strong&gt;Jackson&lt;/strong&gt; performs 5 to 6 times better than org.json and more than twice better than GSON.</source>
          <target state="translated">快速基准测试： &lt;strong&gt;杰克逊的&lt;/strong&gt;性能比org.json好5到6倍，比GSON好2倍以上。</target>
        </trans-unit>
        <trans-unit id="5196b11c8315c8990c058efb8fc0fb14bee4e072" translate="yes" xml:space="preserve">
          <source>Raises developer friendly and easy to trace exceptions</source>
          <target state="translated">引发开发者友好且易于追踪的异常事件</target>
        </trans-unit>
        <trans-unit id="a7b6bb6b6a7622460165f03ea7d746ba932816dd" translate="yes" xml:space="preserve">
          <source>Read the following blog post, &lt;a href=&quot;http://javahai.blogspot.in/2016/03/create-java-object-from-json-string.html&quot;&gt;JSON in Java&lt;/a&gt;.</source>
          <target state="translated">阅读以下博客文章， &lt;a href=&quot;http://javahai.blogspot.in/2016/03/create-java-object-from-json-string.html&quot;&gt;Java JSON&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="9ba33b97f81c7d33f86a74e8b5ced42856b9b058" translate="yes" xml:space="preserve">
          <source>Remember to import the library in the app Gradle file</source>
          <target state="translated">记得要在App的Gradle文件中导入库</target>
        </trans-unit>
        <trans-unit id="8f09413ed3181ec583f8fe8a75d11dd2246abc05" translate="yes" xml:space="preserve">
          <source>Requires JDK 1.5</source>
          <target state="translated">要求JDK 1.5</target>
        </trans-unit>
        <trans-unit id="aeac71ea0fd2ec62ec82e35cfa2b5656823dc3f1" translate="yes" xml:space="preserve">
          <source>Retrieve just one needed attribute</source>
          <target state="translated">只检索到一个需要的属性</target>
        </trans-unit>
        <trans-unit id="747797349181f1717cb1e6154cba08113cc22a2d" translate="yes" xml:space="preserve">
          <source>Running the call a million times using &lt;strong&gt;Nashorn&lt;/strong&gt; takes 7.5~7.8 seconds</source>
          <target state="translated">使用&lt;strong&gt;Nashorn&lt;/strong&gt;进行一百万次通话需要&lt;strong&gt;7.5〜7.8&lt;/strong&gt;秒</target>
        </trans-unit>
        <trans-unit id="6d5f28546a36aa1ca02116c9ecd7d308a81aec26" translate="yes" xml:space="preserve">
          <source>Sample data:</source>
          <target state="translated">样本数据:</target>
        </trans-unit>
        <trans-unit id="f984f1b22f545290ce43e2c70ffa6a52b1e2353c" translate="yes" xml:space="preserve">
          <source>Since nobody mentioned it yet, here is a beginning of a solution using &lt;a href=&quot;http://openjdk.java.net/projects/nashorn/&quot;&gt;Nashorn&lt;/a&gt; (JavaScript runtime part of Java 8, but deprecated in Java 11).</source>
          <target state="translated">由于尚未有人提及，因此这是使用&lt;a href=&quot;http://openjdk.java.net/projects/nashorn/&quot;&gt;Nashorn&lt;/a&gt; （Java 8的JavaScript运行时部分，但在Java 11中已弃用）的解决方案的开始。</target>
        </trans-unit>
        <trans-unit id="65201ee692e303421c8629f7432b4ea90f8187bb" translate="yes" xml:space="preserve">
          <source>So basically to use it, add it to your project, eg:</source>
          <target state="translated">所以基本上要使用它,就把它添加到你的项目中,比如说。</target>
        </trans-unit>
        <trans-unit id="fa4cda1b6f05e89b3e0fb913778da8d50fea28cf" translate="yes" xml:space="preserve">
          <source>So this is the JSON returned by Google Translate API:</source>
          <target state="translated">所以这就是Google Translate API返回的JSON。</target>
        </trans-unit>
        <trans-unit id="61b0bb62aebfcdd9ea3216424e2be71fc16d3f18" translate="yes" xml:space="preserve">
          <source>So we have to create three different POJO classes;</source>
          <target state="translated">所以,我们必须创建三个不同的POJO类。</target>
        </trans-unit>
        <trans-unit id="0b15f607ce4802b8168dc099d186021a765ea7ae" translate="yes" xml:space="preserve">
          <source>Specifically for JSON libraries (and any serialization/deserialization libs), databinding is also usually of interest as it removes the need of writing boiler-plate code to pack/unpack the data.</source>
          <target state="translated">特别是对于JSON库(以及任何serializationdeserialization libs)来说,databinding通常也是很有意义的,因为它省去了编写boiler-plate代码来打包数据的麻烦。</target>
        </trans-unit>
        <trans-unit id="c4a8ec5fbf826704a452d2ff8dc55a69f8d01117" translate="yes" xml:space="preserve">
          <source>Step 1: Create a POJO class of your data.</source>
          <target state="translated">步骤1:为你的数据创建一个POJO类。</target>
        </trans-unit>
        <trans-unit id="f256c7c1bed808e53ff3cb16960966d3aaf1e80d" translate="yes" xml:space="preserve">
          <source>Step 2: Now create a object using JSON.</source>
          <target state="translated">第二步:现在使用JSON创建一个对象。</target>
        </trans-unit>
        <trans-unit id="f0fcfae11fa1883d14c0d9809e80909475c86ff6" translate="yes" xml:space="preserve">
          <source>Support for JSON Generation through object serialisation</source>
          <target state="translated">通过对象序列化支持JSON生成</target>
        </trans-unit>
        <trans-unit id="7eb03cadb2fc7eb966c242ad99350591d8b0f6d8" translate="yes" xml:space="preserve">
          <source>Support for collection type selection during parsing process</source>
          <target state="translated">支持解析过程中的集合类型选择</target>
        </trans-unit>
        <trans-unit id="afac24cd0f87a58c47d5ce59dda54327482583d2" translate="yes" xml:space="preserve">
          <source>Support for two types of configuration (JSON/XML) for using quick-JSON validating parser</source>
          <target state="translated">支持两种类型的配置(JSONXML),用于使用快速JSON验证解析器</target>
        </trans-unit>
        <trans-unit id="d83e899da1f3b82cb28cd3141bdeff7abe873c2c" translate="yes" xml:space="preserve">
          <source>Supports Flexible/Configurable parsing approach</source>
          <target state="translated">支持FlexibleConfigurable解析方法</target>
        </trans-unit>
        <trans-unit id="50a6c9deb20f64043205b5e165c63d8709b1e139" translate="yes" xml:space="preserve">
          <source>That is it! In addition to that here is a &lt;a href=&quot;http://dew.apidesign.org/dew/#7138581&quot;&gt;live gist&lt;/a&gt; showing similar example together with asynchronous network communication.</source>
          <target state="translated">这就对了！ 除此之外，这里还有一个&lt;a href=&quot;http://dew.apidesign.org/dew/#7138581&quot;&gt;实时要点，&lt;/a&gt;显示了类似的示例以及异步网络通信。</target>
        </trans-unit>
        <trans-unit id="e948eed3f7c58d6a508c2ea8ef03c2e28ca93572" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://www.jsonschema2pojo.org/&quot;&gt;jsonschema2pojo.org&lt;/a&gt; for GSON generated:</source>
          <target state="translated">用于GSON的jsonschema2pojo.org生成：</target>
        </trans-unit>
        <trans-unit id="e2c1a81b0b1db4f644b2eaf11f5657efbdc2422c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/stleary/JSON-java&quot;&gt;org.json&lt;/a&gt; library is easy to use. Example code below:</source>
          <target state="translated">&lt;a href=&quot;https://github.com/stleary/JSON-java&quot;&gt;org.json&lt;/a&gt;库易于使用。 下面的示例代码：</target>
        </trans-unit>
        <trans-unit id="a4a83b11267f4452d16f9ed523cdf2d6db64dafa" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Java API for JSON Processing (JSR 353)&lt;/strong&gt; provides portable APIs to parse, generate, transform, and query JSON using object model and streaming APIs.</source>
          <target state="translated">&lt;strong&gt;用于JSON处理&lt;/strong&gt;的&lt;strong&gt;Java API（JSR 353）&lt;/strong&gt;提供了可移植的API，以使用对象模型和流API来解析，生成，转换和查询JSON。</target>
        </trans-unit>
        <trans-unit id="7952a2393450285e76fd98aa15897de2bc703396" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;reference implementation&lt;/strong&gt; is here: &lt;a href=&quot;https://jsonp.java.net/&quot;&gt;https://jsonp.java.net/&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;参考实现&lt;/strong&gt;在这里： &lt;a href=&quot;https://jsonp.java.net/&quot;&gt;https&lt;/a&gt; : //jsonp.java.net/</target>
        </trans-unit>
        <trans-unit id="5728e0be6d0ee1ae0d0ddf88386b3d07df6e2a14" translate="yes" xml:space="preserve">
          <source>The below example shows how to read the text in the question, represented as the &quot;jsonText&quot; variable.  This solution uses the Java EE7 &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/json/package-summary.html&quot;&gt;javax.json&lt;/a&gt; API (which is mentioned in some of the other answers).  The reason I've added it as a separate answer is that the following code shows how to &lt;em&gt;actually&lt;/em&gt; access some of the values shown in the question.  An &lt;a href=&quot;https://jsonp.java.net/download.html&quot;&gt;implementation of the javax.json API&lt;/a&gt; would be required to make this code run.  The full package for each of the classes required was included as I didn't want to declare &quot;import&quot; statements.</source>
          <target state="translated">以下示例显示了如何读取问题中的文本，该文本表示为&amp;ldquo; jsonText&amp;rdquo;变量。 此解决方案使用Java EE7 &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/json/package-summary.html&quot;&gt;javax.json&lt;/a&gt; API（在其他一些答案中提到）。 我将其添加为单独答案的原因是，以下代码显示了如何&lt;em&gt;实际&lt;/em&gt;访问问题中显示的某些值。 要使此代码运行，需要&lt;a href=&quot;https://jsonp.java.net/download.html&quot;&gt;javax.json API&lt;/a&gt;的实现 。 包括了每个所需类的完整软件包，因为我不想声明&amp;ldquo; import&amp;rdquo;语句。</target>
        </trans-unit>
        <trans-unit id="f5634c0efba44765ff890cad41d8be7ab547400a" translate="yes" xml:space="preserve">
          <source>The most notorious ones are: Jackson, GSON, Genson, FastJson and org.json.</source>
          <target state="translated">最著名的有。Jackson、GSON、Genson、Genson、FastJson和org.json。</target>
        </trans-unit>
        <trans-unit id="23fffe987d93f66048ec9ac769e5dd36c834f920" translate="yes" xml:space="preserve">
          <source>The only package I've used is Jackson ObjectMapper, what we do is binding data;</source>
          <target state="translated">我唯一用过的包是Jackson ObjectMapper,我们做的是绑定数据。</target>
        </trans-unit>
        <trans-unit id="808091f429ed669a8665cfed3ed98b2d4c2f6f6e" translate="yes" xml:space="preserve">
          <source>The required dependencies, the jar files is listed below;</source>
          <target state="translated">所需的依赖关系,jar文件列举如下。</target>
        </trans-unit>
        <trans-unit id="1fe5f9a38a375f6340eae1fa099d8dd1c4d26367" translate="yes" xml:space="preserve">
          <source>There are many JSON libraries available in Java.</source>
          <target state="translated">在Java中,有很多JSON库。</target>
        </trans-unit>
        <trans-unit id="cd7f393468d8ac71394cdc687baab38627b89b2c" translate="yes" xml:space="preserve">
          <source>There are many open source libraries present to parse JSON content to an object or just to read JSON values. Your requirement is just to read values and parsing it to custom object. So org.json library is enough in your case.</source>
          <target state="translated">目前有很多开源的库来解析JSON内容到对象或者只是读取JSON值。你的需求只是读取值并将其解析为自定义对象。所以org.json库对你来说已经足够了。</target>
        </trans-unit>
        <trans-unit id="3beded183424f6ed0877466312d0466c173e267a" translate="yes" xml:space="preserve">
          <source>There are typically three things one should look at for choosing any library:</source>
          <target state="translated">一般来说,选择任何图书馆都要看三件事。</target>
        </trans-unit>
        <trans-unit id="3ccd26c78ba65de44475356a712b29bac1c5371b" translate="yes" xml:space="preserve">
          <source>There is a &lt;a href=&quot;https://github.com/JaroslavTulach/incubator-netbeans-html4j/blob/examples/examples/jsonparse/README.md&quot;&gt;sample Maven project&lt;/a&gt; showing the usage. First of all it defines the structure:</source>
          <target state="translated">有一个&lt;a href=&quot;https://github.com/JaroslavTulach/incubator-netbeans-html4j/blob/examples/examples/jsonparse/README.md&quot;&gt;示例Maven项目&lt;/a&gt;显示用法。 首先，它定义了结构：</target>
        </trans-unit>
        <trans-unit id="a84dada52a2d88cfaf4879a9ebff060f7ba639b3" translate="yes" xml:space="preserve">
          <source>These APIs actually follow the DOM/SAX parsing model of XML.</source>
          <target state="translated">这些API实际上遵循的是XML的DOMSAX解析模型。</target>
        </trans-unit>
        <trans-unit id="f283c6a2c2d8218ba8199b2fc76c55313954c0ec" translate="yes" xml:space="preserve">
          <source>This blew my mind with how easy it was. You can just pass a &lt;code&gt;String&lt;/code&gt; holding your JSON to the constructor of a JSONObject in the default org.json package.</source>
          <target state="translated">这让我很震惊。 您可以只将包含JSON的 &lt;code&gt;String&lt;/code&gt; 传递给默认org.json包中的JSONObject的构造函数。</target>
        </trans-unit>
        <trans-unit id="5993f0df1bb4be49ad42ceb63ecf7fd4d774f862" translate="yes" xml:space="preserve">
          <source>This post is a little bit old, but still I want to answer you question.</source>
          <target state="translated">这个帖子有点老了,但我还是想回答你的问题。</target>
        </trans-unit>
        <trans-unit id="1744e31c7b17d23ecbea63ae91f72b82d93a03ec" translate="yes" xml:space="preserve">
          <source>Top answers on this page use too simple examples like object with one property (e.g. {name: value}). I think that still simple but real life example can help someone.</source>
          <target state="translated">这个页面上的顶级答案使用了太简单的例子,比如说有一个属性的对象(比如{name:value})。我觉得这个例子还是很简单,但在现实生活中的例子可以帮助到别人。</target>
        </trans-unit>
        <trans-unit id="e08928c6100c5f26a6c10dcf288c804025b48e95" translate="yes" xml:space="preserve">
          <source>Two possible approaches:</source>
          <target state="translated">两种可能的方法:</target>
        </trans-unit>
        <trans-unit id="cc14179c743382808f9e74d4e9ec10a570710306" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;https://github.com/ralfstx/minimal-json&quot;&gt;minimal-json&lt;/a&gt; which is very fast and easy to use.
You can parse from String obj and Stream.</source>
          <target state="translated">使用&lt;a href=&quot;https://github.com/ralfstx/minimal-json&quot;&gt;minimum-json&lt;/a&gt; ，它非常快速且易于使用。 您可以从String obj和Stream进行解析。</target>
        </trans-unit>
        <trans-unit id="9a4a7774e7a2a8f2cd9dd46a13350306f9b613c0" translate="yes" xml:space="preserve">
          <source>Use DSM to extract fields.</source>
          <target state="translated">使用DSM来提取字段。</target>
        </trans-unit>
        <trans-unit id="de80861d34aeb2ec7058638972e4a0316739e902" translate="yes" xml:space="preserve">
          <source>Use org.json library to parse it and create JsonObject:</source>
          <target state="translated">使用org.json库来解析它并创建JsonObject。</target>
        </trans-unit>
        <trans-unit id="d5ecf0ed037efb9183e2f08bdb08774b7852d7dc" translate="yes" xml:space="preserve">
          <source>Using this library you only need to create a model with the same JSON structure. Then the model is automatically filled in. You have to call your variables as your JSON keys, or use &lt;a href=&quot;https://www.javadoc.io/doc/com.google.code.gson/gson/latest/com.google.gson/com/google/gson/annotations/SerializedName.html&quot;&gt;&lt;code&gt;@SerializedName&lt;/code&gt;&lt;/a&gt; if you want to use different names.</source>
          <target state="translated">使用此库，您只需创建具有相同JSON结构的模型。 然后将自动填充模型。您必须调用变量作为JSON键，或者如果要使用其他名称，请使用&lt;a href=&quot;https://www.javadoc.io/doc/com.google.code.gson/gson/latest/com.google.gson/com/google/gson/annotations/SerializedName.html&quot;&gt; &lt;code&gt;@SerializedName&lt;/code&gt; &lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="ce452f49a22173c844854192c968edd7b0ab91dd" translate="yes" xml:space="preserve">
          <source>Validating and Non-Validating parser support</source>
          <target state="translated">支持验证性和非验证性解析器</target>
        </trans-unit>
        <trans-unit id="f56c314abd8f309e656f2b1afa4819e8b22a6b2a" translate="yes" xml:space="preserve">
          <source>We can use the JSONObject class to convert a JSON string to a JSON object,
and to iterate over the JSON object. Use the following code.</source>
          <target state="translated">我们可以使用JSONObject类将JSON字符串转换为JSON对象,并对JSON对象进行迭代。使用下面的代码。</target>
        </trans-unit>
        <trans-unit id="d39e447fecdad1f90b83cab9cdabcd361a315fcd" translate="yes" xml:space="preserve">
          <source>What are the API that does implement JSR-353 (JSON)</source>
          <target state="translated">有哪些API可以实现JSR-353(JSON)?</target>
        </trans-unit>
        <trans-unit id="494e0a51f1cb85162e2e1d6c23583e1a1c2940ad" translate="yes" xml:space="preserve">
          <source>You can also loop through the &quot;posts&quot; array as so:</source>
          <target state="translated">你也可以在 &quot;帖子 &quot;数组中循环使用。</target>
        </trans-unit>
        <trans-unit id="2286851d16c9f677feb653c1051894fb28e1f3ee" translate="yes" xml:space="preserve">
          <source>You can generate model from JSON automatically using online tools like &lt;a href=&quot;http://www.jsonschema2pojo.org/&quot;&gt;this&lt;/a&gt;.</source>
          <target state="translated">您可以使用&lt;a href=&quot;http://www.jsonschema2pojo.org/&quot;&gt;此类&lt;/a&gt;在线工具从JSON自动生成模型。</target>
        </trans-unit>
        <trans-unit id="f22b2364e92a604b636eb1af775cc217bf949a8b" translate="yes" xml:space="preserve">
          <source>You can see a complete example here:</source>
          <target state="translated">你可以在这里看到一个完整的例子。</target>
        </trans-unit>
        <trans-unit id="3871d2c5232d22375b0eeb6345c2e283ed7f4bcb" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;https://mfatihercik.github.io/dsm&quot;&gt;DSM&lt;/a&gt; stream parsing library for parsing complex json and XML document. DSM parse data only once and not load all data into memory.</source>
          <target state="translated">您可以使用&lt;a href=&quot;https://mfatihercik.github.io/dsm&quot;&gt;DSM&lt;/a&gt;流解析库来解析复杂的json和XML文档。 DSM仅解析一次数据，而不会将所有数据加载到内存中。</target>
        </trans-unit>
        <trans-unit id="51dae0bf3fc8f570a97d4e9a63b4e622ad88275b" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;JsonNode&lt;/code&gt; for a structured tree representation of your JSON string. It's part of the rock solid &lt;a href=&quot;https://github.com/FasterXML/jackson&quot;&gt;&lt;em&gt;jackson&lt;/em&gt; library&lt;/a&gt; which is omnipresent.</source>
          <target state="translated">您可以将 &lt;code&gt;JsonNode&lt;/code&gt; 用于JSON字符串的结构化树表示形式。 它是无所不在的坚如磐石的&lt;a href=&quot;https://github.com/FasterXML/jackson&quot;&gt;&lt;em&gt;杰克逊&lt;/em&gt;图书馆&lt;/a&gt;的一部分。</target>
        </trans-unit>
        <trans-unit id="1739b37566f3eb9d69fdcaeff614eee0838dd678" translate="yes" xml:space="preserve">
          <source>You can use &lt;strong&gt;Jackson&lt;/strong&gt; libraries, for binding JSON String into &lt;strong&gt;POJO&lt;/strong&gt; (&lt;strong&gt;&lt;em&gt;Plain Old Java Object&lt;/em&gt;&lt;/strong&gt;) instances. POJO is simply a class with only private fields and public getter/setter methods. Jackson is going to traverse the methods (using &lt;strong&gt;reflection&lt;/strong&gt;), and maps the JSON object into the POJO instance as the field names of the class fits to the field names of the JSON object.</source>
          <target state="translated">您可以使用&lt;strong&gt;Jackson&lt;/strong&gt;库将JSON字符串绑定到&lt;strong&gt;POJO&lt;/strong&gt; （ &lt;strong&gt;&lt;em&gt;普通的旧Java对象&lt;/em&gt;&lt;/strong&gt; ）实例中。 POJO只是一个只有私有字段和公共getter / setter方法的类。 Jackson将遍历这些方法（使用&lt;strong&gt;Reflection&lt;/strong&gt; ），并将JSON对象映射到POJO实例中，因为该类的字段名称适合JSON对象的字段名称。</target>
        </trans-unit>
        <trans-unit id="1833a7fcec164db264b95fc3f2c7116552f703f3" translate="yes" xml:space="preserve">
          <source>You can use &lt;strong&gt;Jayway JsonPath&lt;/strong&gt;. Below is a GitHub link with source code, pom details and good documentation.</source>
          <target state="translated">您可以使用&lt;strong&gt;Jayway JsonPath&lt;/strong&gt; 。 以下是带有源代码，pom详细信息和良好文档的GitHub链接。</target>
        </trans-unit>
        <trans-unit id="27feb53b95d6cc0a8e5dbfe7c29a6b57cd36577c" translate="yes" xml:space="preserve">
          <source>You can use the Gson Library to parse the JSON string.</source>
          <target state="translated">你可以使用Gson库来解析JSON字符串。</target>
        </trans-unit>
        <trans-unit id="829d83a3ff692e4b324b2503fa7e9625db4df88a" translate="yes" xml:space="preserve">
          <source>You could use &lt;a href=&quot;https://github.com/google/gson&quot;&gt;Google Gson&lt;/a&gt;.</source>
          <target state="translated">您可以使用&lt;a href=&quot;https://github.com/google/gson&quot;&gt;Google Gson&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="18f0351dcd2f2cc886942c22f5380be9b3d6b2ad" translate="yes" xml:space="preserve">
          <source>You may find more examples from: &lt;a href=&quot;http://theoryapp.com/parse-json-in-java/&quot;&gt;Parse JSON in Java&lt;/a&gt;</source>
          <target state="translated">您可以从以下位置找到更多示例： &lt;a href=&quot;http://theoryapp.com/parse-json-in-java/&quot;&gt;Java解析JSON&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7e15bb5c01e7dd56499e37c634cf791d3a519aee" translate="yes" xml:space="preserve">
          <source>`</source>
          <target state="translated">`</target>
        </trans-unit>
        <trans-unit id="c4c7bfd2eb4f931d7799bfe2622f04431fafc657" translate="yes" xml:space="preserve">
          <source>and from message object you can fetch any of its attribute.</source>
          <target state="translated">并可以从消息对象中获取其任意属性。</target>
        </trans-unit>
        <trans-unit id="cf207c66af7e6aad1158ac914cd0992bc4f2b6bf" translate="yes" xml:space="preserve">
          <source>and then it uses the generated RepositoryInfo and Owner classes to parse the provided input stream and pick certain information up while doing that:</source>
          <target state="translated">然后它使用生成的 RepositoryInfo 和 Owner 类来解析所提供的输入流,并在做这些工作的同时提取某些信息。</target>
        </trans-unit>
        <trans-unit id="8e3d482d85fad29be0fda23ab59f7468fbda5329" translate="yes" xml:space="preserve">
          <source>and to use:</source>
          <target state="translated">和使用。</target>
        </trans-unit>
        <trans-unit id="5e9b496a0935b15e72709835275b0a4dd4c2a1c6" translate="yes" xml:space="preserve">
          <source>etc...</source>
          <target state="translated">etc...</target>
        </trans-unit>
        <trans-unit id="161f626fb46e32dc28bb28ba0e99d92b77a220a5" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;jsonData&lt;/code&gt; is a string of json data.</source>
          <target state="translated">其中 &lt;code&gt;jsonData&lt;/code&gt; 是json数据的字符串。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
