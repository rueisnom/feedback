<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/2591098">
    <body>
      <group id="2591098">
        <trans-unit id="ea65c5c96e1eac1d9c4435b5e12b399ffced32c4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://code.google.com/p/quick-json/&quot;&gt;quick-json parser&lt;/a&gt; is very straightforward, flexible, very fast and customizable. Try it</source>
          <target state="translated">&lt;a href=&quot;https://code.google.com/p/quick-json/&quot;&gt;quick-jsonパーサー&lt;/a&gt;は非常に単純で柔軟性があり、非常に高速でカスタマイズ可能です。 それを試してみてください</target>
        </trans-unit>
        <trans-unit id="581c985eea09e3d23ece6c4273d96320b7a256bd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/FasterXML/jackson-databind/&quot;&gt;Jackson&lt;/a&gt; (&lt;a href=&quot;http://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind&quot;&gt;Maven&lt;/a&gt;)</source>
          <target state="translated">&lt;a href=&quot;https://github.com/FasterXML/jackson-databind/&quot;&gt;ジャクソン&lt;/a&gt; （ &lt;a href=&quot;http://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind&quot;&gt;Maven&lt;/a&gt; ）</target>
        </trans-unit>
        <trans-unit id="54b860be7eb1706dd022135cab0fcf7ba4e7faf3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/google/gson&quot;&gt;Google GSON&lt;/a&gt; (&lt;a href=&quot;http://mvnrepository.com/artifact/com.google.code.gson/gson&quot;&gt;Maven&lt;/a&gt;)</source>
          <target state="translated">&lt;a href=&quot;https://github.com/google/gson&quot;&gt;Google GSON&lt;/a&gt; （ &lt;a href=&quot;http://mvnrepository.com/artifact/com.google.code.gson/gson&quot;&gt;Maven&lt;/a&gt; ）</target>
        </trans-unit>
        <trans-unit id="3ee7e3039883c031f4cdb591853c88b660863b1d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/stleary/JSON-java&quot;&gt;Org.JSON&lt;/a&gt; (&lt;a href=&quot;http://mvnrepository.com/artifact/org.json/json&quot;&gt;Maven&lt;/a&gt;)</source>
          <target state="translated">&lt;a href=&quot;https://github.com/stleary/JSON-java&quot;&gt;Org.JSON&lt;/a&gt; （ &lt;a href=&quot;http://mvnrepository.com/artifact/org.json/json&quot;&gt;Maven&lt;/a&gt; ）</target>
        </trans-unit>
        <trans-unit id="05f76f0d55a1a802b770e68d6fdf7db04a914eee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;jsoniter&lt;/code&gt; (jsoniterator) is a relatively new and simple json library, designed to be simple and fast. All you need to do to deserialize json data is</source>
          <target state="translated">&lt;code&gt;jsoniter&lt;/code&gt; （jsoniterator）は、比較的新しくてシンプルなjsonライブラリで、シンプルで高速になるように設計されています。 jsonデータをデシリアライズするために必要なのは</target>
        </trans-unit>
        <trans-unit id="03610e46c3979f79023144c6bf30ea1d6e343100" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;fromJson()&lt;/em&gt;&lt;/strong&gt; &amp;ndash; Convert JSON into Java object</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;fromJson（）&lt;/em&gt;&lt;/strong&gt; &amp;ndash; JSONをJavaオブジェクトに変換する</target>
        </trans-unit>
        <trans-unit id="705c755a5250c8b1f571cf8890ad4135858b182f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;toJson()&lt;/em&gt;&lt;/strong&gt; &amp;ndash; Convert Java object to JSON format</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;toJson（）&lt;/em&gt;&lt;/strong&gt; &amp;ndash; JavaオブジェクトをJSON形式に変換する</target>
        </trans-unit>
        <trans-unit id="fb8f9c8b1988dbf445e49cc72e660540c1cce355" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Code for converting this JSON to a Java class.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;このJSONをJavaクラスに変換するためのコード。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f561f0a28a73c1cfb924e851f87e5d54afde91ae" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;DSM is very good for complex json and xml.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;DSMは、複雑なjsonおよびxmlに非常に適しています。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9251863320abe2fea319e96654ab3025da8e313e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Gson&lt;/strong&gt; is easy to learn and implement, what we need to know are following two methods</source>
          <target state="translated">&lt;strong&gt;Gson&lt;/strong&gt;は簡単に習得して実装できます。知っておくべきことは、次の2つの方法です。</target>
        </trans-unit>
        <trans-unit id="ff1a5ff658b0821446261c49fa429c9c5086a950" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;I have JSON like this:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;私はこのようなJSONを持っています：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ab280e1e06c703b1cad8b270301293d1d14cc3ed" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Jackson&lt;/strong&gt; takes 6.5~7 seconds</source>
          <target state="translated">&lt;strong&gt;ジャクソン&lt;/strong&gt;は6.5〜7秒かかります</target>
        </trans-unit>
        <trans-unit id="e7af3e9da3894854740bb7458fbfd889afae67ea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Java class&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Javaクラス&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f1f5f742f9fbb132d6357c0198a1f1c2c4ef5414" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Maven&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Maven&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e1129c7696d19cfbf06a0a0f1333da3bff9e773b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Page&lt;/strong&gt; Class, a composite of &lt;strong&gt;PageInfo&lt;/strong&gt; Class and array of &lt;strong&gt;Post&lt;/strong&gt; Instances</source>
          <target state="translated">&lt;strong&gt;ページ&lt;/strong&gt;クラス、 &lt;strong&gt;PageInfo&lt;/strong&gt;クラスと&lt;strong&gt;ポスト&lt;/strong&gt;インスタンスの配列の複合</target>
        </trans-unit>
        <trans-unit id="0dc53093af6d0bc6129a4b99c67b4821d7476c6b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;PageInfo&lt;/strong&gt; Class</source>
          <target state="translated">&lt;strong&gt;PageInfo&lt;/strong&gt;クラス</target>
        </trans-unit>
        <trans-unit id="5bdf7aae131dcf748c7b9ace65a6cbcede925cd4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Performance comparison&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;性能比較&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1b1137c7cde8f7f4f635ccde6b622d5a38018762" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Posts&lt;/strong&gt; Class</source>
          <target state="translated">&lt;strong&gt;投稿&lt;/strong&gt;クラス</target>
        </trans-unit>
        <trans-unit id="43f038c62b45a67bf440ca6fe8caa39490287184" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Solution&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Solution&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1886539a537103abdbc2deba551ee10fab14bc0c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 1&lt;/strong&gt;: Add the jayway JSON path dependency in your class path using Maven or download the JAR file and manually add it.</source>
          <target state="translated">&lt;strong&gt;ステップ1&lt;/strong&gt; ：Mavenを使用してクラスパスにjayway JSONパス依存関係を追加するか、JARファイルをダウンロードして手動で追加します。</target>
        </trans-unit>
        <trans-unit id="2fbd052391bb5db3b551a01917005442e6578fba" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 2&lt;/strong&gt;: Please save your input JSON as a file for this example. In my case I saved your JSON as sampleJson.txt. Note you missed a comma between pageInfo and posts.</source>
          <target state="translated">&lt;strong&gt;ステップ2&lt;/strong&gt; ：この例では、入力JSONをファイルとして保存してください。 私の場合、JSONをsampleJson.txtとして保存しました。 pageInfoと投稿の間のカンマを逃したことに注意してください。</target>
        </trans-unit>
        <trans-unit id="048e0b165aae8387f19fb8f66135b22372f11de4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 3&lt;/strong&gt;: Read the JSON contents from the above file using bufferedReader and save it as String.</source>
          <target state="translated">&lt;strong&gt;ステップ3&lt;/strong&gt; ：bufferedReaderを使用して上記のファイルからJSONコンテンツを読み取り、文字列として保存します。</target>
        </trans-unit>
        <trans-unit id="84f862c1d56afbc5d00599cfbabc74c958688a25" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 4&lt;/strong&gt;: Parse your JSON string using jayway JSON parser.</source>
          <target state="translated">&lt;strong&gt;ステップ4&lt;/strong&gt; ：jayway JSONパーサーを使用してJSON文字列を解析します。</target>
        </trans-unit>
        <trans-unit id="cc327bb753d6694e6d587e28b624df3fd2decf43" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 5&lt;/strong&gt;: Read the details like below.</source>
          <target state="translated">&lt;strong&gt;ステップ5&lt;/strong&gt; ：以下のように詳細を読みます。</target>
        </trans-unit>
        <trans-unit id="b913191ee8246154e8264c165558cedbc926ca35" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The output will be&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;出力は次のようになります&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="200627b0eb37efd54845f9a6bd7c0133da5e8d51" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Update&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Update&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f25f3e28c57eff39cd3e2e6eadedc301de5413fd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;jackson-annotations-2.5.0.jar&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;jackson-annotations-2.5.0.jar&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="86d8a75250ca1708ac4c4b1ec45987048798776d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;jackson-core-2.5.1.jar&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;jackson-core-2.5.1.jar&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b6feda883de2fd3be3de89dd9b83fc93c7213d6a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;jackson-databind-2.5.1.jar&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;jackson-databind-2.5.1.jar&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="12743475bf50fb900579f074c47e0df51b6d05c5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;org.json&lt;/strong&gt; takes 20~21 seconds</source>
          <target state="translated">&lt;strong&gt;org.json&lt;/strong&gt;は&lt;strong&gt;20〜21&lt;/strong&gt;秒かかります</target>
        </trans-unit>
        <trans-unit id="fb28eb98a5cc6cac6edaa0094b2e5918a1aad2ec" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;page&lt;/strong&gt; variable serialized to json:</source>
          <target state="translated">jsonにシリアル化された&lt;strong&gt;ページ&lt;/strong&gt;変数：</target>
        </trans-unit>
        <trans-unit id="d810459f3180bff7e2a7a6af2c59c8c67e8fa178" translate="yes" xml:space="preserve">
          <source>A - Explanation</source>
          <target state="translated">A-説明</target>
        </trans-unit>
        <trans-unit id="b67ce5d5635f015e9f01c6db5b0c651824b1cb5b" translate="yes" xml:space="preserve">
          <source>Almost all the answers given requires a full deserialization of the JSON into a Java object before accessing the value in the property of interest. Another alternative, which does not go this route is to use &lt;a href=&quot;http://goessner.net/articles/JsonPath/&quot;&gt;JsonPATH&lt;/a&gt; which is like XPath for JSON and allows traversing of JSON objects.</source>
          <target state="translated">指定されたほとんどすべての回答では、対象のプロパティの値にアクセスする前に、JSONをJavaオブジェクトに完全に逆シリアル化する必要があります。 このルートを&lt;a href=&quot;http://goessner.net/articles/JsonPath/&quot;&gt;たどら&lt;/a&gt;ない別の方法は、JSONのXPathのようなJsonPATHを使用して、JSONオブジェクトのトラバースを可能にすることです。</target>
        </trans-unit>
        <trans-unit id="af8d410d429ad57fab9c29adda1ef85707482ce8" translate="yes" xml:space="preserve">
          <source>And &lt;strong&gt;to help you decide&lt;/strong&gt;... I found this article as well:</source>
          <target state="translated">そして&lt;strong&gt;、あなたが決めるのを助けるために&lt;/strong&gt; ...私はこの記事も見つけました：</target>
        </trans-unit>
        <trans-unit id="663653cb78ef87e0bb6480289ada2bfff8942b72" translate="yes" xml:space="preserve">
          <source>Automatic model generation</source>
          <target state="translated">モデルの自動生成</target>
        </trans-unit>
        <trans-unit id="b738ee3e56540b60fee89056a48118c59804bed7" translate="yes" xml:space="preserve">
          <source>B - Main POJO Class : Page</source>
          <target state="translated">B-メインPOJOクラス:ページ</target>
        </trans-unit>
        <trans-unit id="d66d5132e915f27b988bbcb532fd4097e0995031" translate="yes" xml:space="preserve">
          <source>But if one just want to parse a JSON string and get some values, (OR create a JSON string from scratch to send over wire) just use JaveEE jar which contains JsonReader, JsonArray, JsonObject etc. You may want to download the implementation of that spec like javax.json. With these two jars I am able to parse the json and use the values.</source>
          <target state="translated">しかし、JSON文字列を解析していくつかの値を取得したいだけならば、(または有線で送信するためにスクラッチからJSON文字列を作成したいだけならば)JsonReader,JsonArray,JsonObjectなどを含むJaveEEのjarを使用すればよいでしょう。javax.jsonのような仕様の実装をダウンロードしたいかもしれません。この2つのjarで、私はjsonをパースして値を使用することができます。</target>
        </trans-unit>
        <trans-unit id="76ff8126da6f93d5ee3697f05578f8cbc37e3819" translate="yes" xml:space="preserve">
          <source>C - Child POJO Class : PageInfo</source>
          <target state="translated">C-子 POJO クラス:PageInfo</target>
        </trans-unit>
        <trans-unit id="8a2dc4ac0a59e84b96d9e4e2011a1d324b5615a6" translate="yes" xml:space="preserve">
          <source>Check out the &lt;a href=&quot;http://jsoniter.com/&quot;&gt;official website&lt;/a&gt;
for more information.</source>
          <target state="translated">詳しくは&lt;a href=&quot;http://jsoniter.com/&quot;&gt;公式サイト&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="5d412e7449d9e26d0c1415515ac836426e5d9116" translate="yes" xml:space="preserve">
          <source>Check the JsonPath specification page for more information on the other ways to transverse JSON.</source>
          <target state="translated">その他のJSONを横断する方法については、JsonPathの仕様ページを確認してください。</target>
        </trans-unit>
        <trans-unit id="5f16c172ef732329922fe4de767f371ef0e8a14c" translate="yes" xml:space="preserve">
          <source>Compliant with JSON specification (RFC4627)</source>
          <target state="translated">JSON仕様(RFC4627)に準拠</target>
        </trans-unit>
        <trans-unit id="69c7ed2e68fc1c1c410d3a15220f49b10f78ddc3" translate="yes" xml:space="preserve">
          <source>Configurable validation of key/value pairs of any JSON Hierarchy</source>
          <target state="translated">任意のJSON階層のkey-valueペアの検証を設定可能</target>
        </trans-unit>
        <trans-unit id="b43f50ee8ee18a4adf5d2723ee8fe73aa7a2fa98" translate="yes" xml:space="preserve">
          <source>Create Java object from JSON</source>
          <target state="translated">JSONからJavaオブジェクトを作成</target>
        </trans-unit>
        <trans-unit id="bfe5f0fdd4ad15aa4bcd6cf27f41fdb5fa152040" translate="yes" xml:space="preserve">
          <source>Create a yaml Mapping file.</source>
          <target state="translated">yamlマッピングファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="5a1f8dfe343d664415ddc94739883a4753af831f" translate="yes" xml:space="preserve">
          <source>Creating JSON:</source>
          <target state="translated">JSONの作成。</target>
        </trans-unit>
        <trans-unit id="ba357fa573625c18a64c4a5ec0aa47fe1deb81cf" translate="yes" xml:space="preserve">
          <source>D - Child POJO Class : Post</source>
          <target state="translated">D-チャイルドPOJOクラス:ポスト</target>
        </trans-unit>
        <trans-unit id="1555271c54fe56903d1f72ec8246497a843bcfc1" translate="yes" xml:space="preserve">
          <source>Done. &lt;em&gt;Drops microphone&lt;/em&gt;.
This works with &lt;code&gt;JSONObjects&lt;/code&gt; as well. After that, you can just look through your hierarchy of &lt;code&gt;Objects&lt;/code&gt; using the &lt;code&gt;get()&lt;/code&gt; methods on your objects.</source>
          <target state="translated">できました。 &lt;em&gt;マイクを落とします&lt;/em&gt; 。 これは &lt;code&gt;JSONObjects&lt;/code&gt; でも機能します。 その後、 &lt;code&gt;Objects&lt;/code&gt; の &lt;code&gt;get()&lt;/code&gt; メソッドを使用して、 オブジェクトの階層を調べるだけです。</target>
        </trans-unit>
        <trans-unit id="ab13932a6db4b8954dec2f6bc4eb7836527a70a7" translate="yes" xml:space="preserve">
          <source>Downloadable jar:  &lt;a href=&quot;http://mvnrepository.com/artifact/org.json/json&quot;&gt;http://mvnrepository.com/artifact/org.json/json&lt;/a&gt;</source>
          <target state="translated">ダウンロード可能なjar： &lt;a href=&quot;http://mvnrepository.com/artifact/org.json/json&quot;&gt;http&lt;/a&gt; : //mvnrepository.com/artifact/org.json/json</target>
        </trans-unit>
        <trans-unit id="2b4d50543ce7975d4b13d9a5652eeb5444ad618b" translate="yes" xml:space="preserve">
          <source>E - Sample JSON File : sampleJSONFile.json</source>
          <target state="translated">E-サンプルJSONファイル:sampleJSONFile.json</target>
        </trans-unit>
        <trans-unit id="00feb5912c0950d28a766de9161106eb61bf7ec1" translate="yes" xml:space="preserve">
          <source>Ease of use (code is simple to write and legible) - that goes with features.</source>
          <target state="translated">使いやすさ(コードが書きやすく、読みやすい)-機能と相性が良い。</target>
        </trans-unit>
        <trans-unit id="ce370a5c966639d991d2edbcf30aa43459931fb1" translate="yes" xml:space="preserve">
          <source>Easy to use # Very small footprint</source>
          <target state="translated">使いやすい #非常に小さなフットプリント</target>
        </trans-unit>
        <trans-unit id="1203b487908e8c8120e99871d562a439ab5dac96" translate="yes" xml:space="preserve">
          <source>F - Demo Code</source>
          <target state="translated">F-デモコード</target>
        </trans-unit>
        <trans-unit id="5df81ffa82179b458e1d55e350db9d88805a69b2" translate="yes" xml:space="preserve">
          <source>Features:</source>
          <target state="translated">Features:</target>
        </trans-unit>
        <trans-unit id="4fd018f9b4541f8c7b5f7b837295fec5fbe165f9" translate="yes" xml:space="preserve">
          <source>First you need to select an &lt;strong&gt;implementation library&lt;/strong&gt; to do that.</source>
          <target state="translated">まず、その&lt;strong&gt;ための実装ライブラリ&lt;/strong&gt;を選択する必要があります。</target>
        </trans-unit>
        <trans-unit id="2fab5b640e16bedd65b12cef9e96c7aa9b3dc83b" translate="yes" xml:space="preserve">
          <source>For 1, see this benchmark: &lt;a href=&quot;https://github.com/fabienrenaud/java-json-benchmark&quot;&gt;https://github.com/fabienrenaud/java-json-benchmark&lt;/a&gt; I did using &lt;a href=&quot;http://openjdk.java.net/projects/code-tools/jmh/&quot;&gt;JMH&lt;/a&gt; which compares (jackson, gson, genson, fastjson, org.json, jsonp) performance of serializers and deserializers using stream and databind APIs.
For 2, you can find numerous examples on the Internet. The benchmark above can also be used as a source of examples...</source>
          <target state="translated">1については、次のベンチマークを参照してください。およびdatabind API。 2については、インターネット上で多数の例を見つけることができます。 上記のベンチマークは、例のソースとしても使用できます...</target>
        </trans-unit>
        <trans-unit id="2f0a74d7dfe882b3c0628193b58ea62013cab0bc" translate="yes" xml:space="preserve">
          <source>For further reference you can refer to the following &lt;a href=&quot;http://javahai.blogspot.in/2016/03/create-java-object-from-json-string.html&quot;&gt;link&lt;/a&gt;.</source>
          <target state="translated">詳細については、次の&lt;a href=&quot;http://javahai.blogspot.in/2016/03/create-java-object-from-json-string.html&quot;&gt;リンクを&lt;/a&gt;参照してください 。</target>
        </trans-unit>
        <trans-unit id="cc0b99d1a4fc0b06d6dcf2ceb23a820e9c3d979e" translate="yes" xml:space="preserve">
          <source>For mobile apps: dependency/jar size</source>
          <target state="translated">モバイルアプリの場合:dependencyjarのサイズ</target>
        </trans-unit>
        <trans-unit id="e5e03d0772320e98ed4376b556afec9cf1112698" translate="yes" xml:space="preserve">
          <source>For the sake of the example lets assume you have a class &lt;strong&gt;&lt;code&gt;Person&lt;/code&gt;&lt;/strong&gt; with just a &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="translated">例のために、 &lt;code&gt;name&lt;/code&gt; だけのクラス&lt;strong&gt; &lt;code&gt;Person&lt;/code&gt; &lt;/strong&gt;があると仮定しましょう。</target>
        </trans-unit>
        <trans-unit id="2885f44578c0f825368033cb53176134ed3d590b" translate="yes" xml:space="preserve">
          <source>For your particular example, the following code decodes your json with jackson:</source>
          <target state="translated">あなたの特定の例では、以下のコードが jackson で json をデコードしています。</target>
        </trans-unit>
        <trans-unit id="46bef7454065eebd2a67f75cdc30df17dc513844" translate="yes" xml:space="preserve">
          <source>From your example:</source>
          <target state="translated">あなたの例から</target>
        </trans-unit>
        <trans-unit id="a69798c76d0a5628b350f29769d994d62ecbe059" translate="yes" xml:space="preserve">
          <source>G - Demo Output</source>
          <target state="translated">G-デモ出力</target>
        </trans-unit>
        <trans-unit id="9adca0a1f8e9c23815dd4bc100592ef7dd2c16b1" translate="yes" xml:space="preserve">
          <source>Gradle import</source>
          <target state="translated">Gradleのインポート</target>
        </trans-unit>
        <trans-unit id="5a3edd9462d95d94e4c206a206631620177058b8" translate="yes" xml:space="preserve">
          <source>Here is the required code;</source>
          <target state="translated">ここに必要なコードがあります。</target>
        </trans-unit>
        <trans-unit id="cb1d161d6ba6dfb003d26634a915d135c72556ab" translate="yes" xml:space="preserve">
          <source>Here you can find a &lt;strong&gt;list of implementations&lt;/strong&gt; of JSR 353:</source>
          <target state="translated">ここに、JSR 353 &lt;strong&gt;の実装&lt;/strong&gt;の&lt;strong&gt;リスト&lt;/strong&gt;があります。</target>
        </trans-unit>
        <trans-unit id="ea240118c4bf850ae6636a1a53c032f94886def1" translate="yes" xml:space="preserve">
          <source>High-Performance JSON parser</source>
          <target state="translated">高性能な JSON パーサー</target>
        </trans-unit>
        <trans-unit id="e91c5dffba99be277021da86df113a93045c9b6d" translate="yes" xml:space="preserve">
          <source>Hope it helps!</source>
          <target state="translated">役に立つことを願っています</target>
        </trans-unit>
        <trans-unit id="68df6e851d85c7d09297b9204c8a83b835f72f14" translate="yes" xml:space="preserve">
          <source>How to parse JSON in Java</source>
          <target state="translated">JavaでJSONをパースする方法</target>
        </trans-unit>
        <trans-unit id="7cce87c2a84ffcdb1ce79866d0ce75d3a7b725e5" translate="yes" xml:space="preserve">
          <source>I believe the best practice should be to go through the official &lt;a href=&quot;http://json-processing-spec.java.net/&quot;&gt;Java JSON API&lt;/a&gt; which are still work in progress.</source>
          <target state="translated">ベストプラクティスは、まだ進行中の公式&lt;a href=&quot;http://json-processing-spec.java.net/&quot;&gt;Java JSON API&lt;/a&gt;を通過することであると私は信じています 。</target>
        </trans-unit>
        <trans-unit id="2f9613b87bf96a3f80b384dbf2950b16ecee7d47" translate="yes" xml:space="preserve">
          <source>I have the following JSON text. How can I parse it to get the values of &lt;code&gt;pageName&lt;/code&gt;, &lt;code&gt;pagePic&lt;/code&gt;, &lt;code&gt;post_id&lt;/code&gt;, etc.?</source>
          <target state="translated">次のJSONテキストがあります。 どのように解析して、 &lt;code&gt;pageName&lt;/code&gt; 、 &lt;code&gt;pagePic&lt;/code&gt; 、 &lt;code&gt;post_id&lt;/code&gt; などの値を取得できますか？</target>
        </trans-unit>
        <trans-unit id="d8f0c4e0c9f55071e5234777e393a4c7be6419e6" translate="yes" xml:space="preserve">
          <source>I want to retrieve the value of &quot;translatedText&quot; attribute e.g. &quot;Arbeit&quot; using Google's Gson.</source>
          <target state="translated">GoogleのGsonを使って &quot;translatedText &quot;属性、例えば &quot;Arbeit &quot;の値を取得したい。</target>
        </trans-unit>
        <trans-unit id="d5f6b48ca5241e591de492e8026eabcfac5704ca" translate="yes" xml:space="preserve">
          <source>I wrote JSON content containing three arrays of respectively 20, 20 and 100 elements. I only want to get the 100 elements from the third array. I use the following JavaScript function to parse and get my entries.</source>
          <target state="translated">それぞれ20、20、100要素の3つの配列を含むJSONコンテンツを書きました。私は3つ目の配列から100要素だけを取得したいと思います。私は以下のJavaScript関数を使って、エントリを解析して取得しています。</target>
        </trans-unit>
        <trans-unit id="bc670ce71e17cb364032562f9990059824ae23de" translate="yes" xml:space="preserve">
          <source>I've just copied your JSON sample into this file and put it under the project folder.</source>
          <target state="translated">あなたのJSONサンプルをこのファイルにコピーして、プロジェクトフォルダの下に置いておきました。</target>
        </trans-unit>
        <trans-unit id="ceb2cc12a904bbb5d45b6e59986a3aafd5b680bb" translate="yes" xml:space="preserve">
          <source>If one wants to create Java object from JSON and vice versa, use GSON or JACKSON third party jars etc.</source>
          <target state="translated">JSONからJavaオブジェクトを作成したい場合や、その逆の場合は、GSONやJACKSONなどのサードパーティ製のjarを使用します。</target>
        </trans-unit>
        <trans-unit id="c35a7233c9b98527537ebaf8214644c098990138" translate="yes" xml:space="preserve">
          <source>If you don't need object de-serialisation but to simply get an attribute, you can try org.json (&lt;strong&gt;or look GSON example above!&lt;/strong&gt;)</source>
          <target state="translated">オブジェクトの逆シリアル化は必要ないが、単に属性を取得する場合は、org.jsonを試すことができます（ &lt;strong&gt;または上記のGSONの例を見てください！&lt;/strong&gt; ）</target>
        </trans-unit>
        <trans-unit id="86de2921b10bc48cdd2792ee251a69936f29851b" translate="yes" xml:space="preserve">
          <source>If you go for Jackson, here is a good article about conversion between JSON to/from Java using Jackson: &lt;a href=&quot;https://www.mkyong.com/java/how-to-convert-java-object-to-from-json-jackson/&quot;&gt;https://www.mkyong.com/java/how-to-convert-java-object-to-from-json-jackson/&lt;/a&gt;</source>
          <target state="translated">ジャクソンに行くなら、ジャクソンを使用したJSONとJavaの間の変換についての良い記事があります： &lt;a href=&quot;https://www.mkyong.com/java/how-to-convert-java-object-to-from-json-jackson/&quot;&gt;https&lt;/a&gt; : //www.mkyong.com/java/how-to-convert-java-object-to-from-json-ジャクソン/</target>
        </trans-unit>
        <trans-unit id="b3a718b5da6f863dd650d28b31b7f39126c939b8" translate="yes" xml:space="preserve">
          <source>If you have some Java class(say Message) representing the JSON string(jsonString), you can use &lt;a href=&quot;https://github.com/FasterXML/jackson&quot;&gt;Jackson&lt;/a&gt;  JSON library with:</source>
          <target state="translated">JSON文字列（jsonString）を表すJavaクラス（メッセージなど）がある場合、 &lt;a href=&quot;https://github.com/FasterXML/jackson&quot;&gt;Jackson&lt;/a&gt; JSONライブラリを次のように使用できます。</target>
        </trans-unit>
        <trans-unit id="7b6b38e774913e413531ed50fe8f99c268dc10e0" translate="yes" xml:space="preserve">
          <source>If you want to get a single attribute out you can do it easily with the Google library as well:</source>
          <target state="translated">1つの属性を出したい場合は、Googleライブラリでも簡単にできます。</target>
        </trans-unit>
        <trans-unit id="f8db7127b046e469b834e6462fa961384b7d6965" translate="yes" xml:space="preserve">
          <source>In addition to other answers, I recomend this online opensource service &lt;a href=&quot;http://www.jsonschema2pojo.org/&quot;&gt;jsonschema2pojo.org&lt;/a&gt; for quick generating Java classes from json or json schema for GSON, Jackson 1.x or Jackson 2.x. For example, if you have:</source>
          <target state="translated">他の回答に加えて、GSON、Jackson 1.x、Jackson 2.xのjsonまたはjsonスキーマからJavaクラスをすばやく生成するために、このオンラインオープンソースサービス&lt;a href=&quot;http://www.jsonschema2pojo.org/&quot;&gt;jsonschema2pojo.org&lt;/a&gt;をお勧めします。 たとえば、次の場合：</target>
        </trans-unit>
        <trans-unit id="2c59ace1ec6d4b3f2c5104567e4ac03a2a140852" translate="yes" xml:space="preserve">
          <source>In this case Jackson performs better than Nashorn, which performs much better than org.json.
Nashorn API is harder to use than org.json's or Jackson's. Depending on your requirements Jackson and Nashorn both can be viable solutions.</source>
          <target state="translated">この場合、org.jsonよりも性能が良いNashornよりもJacksonの方が性能が良いです。NashornのAPIはorg.jsonやJacksonよりも使いにくいです。要件によっては、Jackson と Nashorn の両方が実行可能なソリューションになります。</target>
        </trans-unit>
        <trans-unit id="6ee9922191e0c50a3726173d2d2a5807b35d614f" translate="yes" xml:space="preserve">
          <source>In your JSON object, which is actually a &lt;strong&gt;composite&lt;/strong&gt; object, the main object consists o two sub-objects. So, our POJO classes should have the same hierarchy. I'll call the whole JSON Object as &lt;strong&gt;Page&lt;/strong&gt; object. &lt;strong&gt;Page&lt;/strong&gt; object consist of a &lt;strong&gt;PageInfo&lt;/strong&gt; object, and a &lt;strong&gt;Post&lt;/strong&gt; object array.</source>
          <target state="translated">実際には&lt;strong&gt;複合&lt;/strong&gt;オブジェクトであるJSONオブジェクトでは、メインオブジェクトは2つのサブオブジェクトで構成されます。 したがって、POJOクラスは同じ階層を持つ必要があります。 JSONオブジェクト全体を&lt;strong&gt;Page&lt;/strong&gt;オブジェクトとして呼び出します。 &lt;strong&gt;Page&lt;/strong&gt;オブジェクトは、 &lt;strong&gt;PageInfo&lt;/strong&gt;オブジェクトと&lt;strong&gt;Post&lt;/strong&gt;オブジェクト配列で構成されます。</target>
        </trans-unit>
        <trans-unit id="7957cdd685e55b0659e0f881b1501d7538cec20a" translate="yes" xml:space="preserve">
          <source>It can be used like this:</source>
          <target state="translated">こんな感じで使えます。</target>
        </trans-unit>
        <trans-unit id="b8a08f56b44c2d87e99bd4f90e6ce3b988da05f1" translate="yes" xml:space="preserve">
          <source>It is a specification and the good folks at JayWay have created a Java implementation for the specification which you can find here: &lt;a href=&quot;https://github.com/jayway/JsonPath&quot;&gt;https://github.com/jayway/JsonPath&lt;/a&gt;</source>
          <target state="translated">これは仕様であり、JayWayの優れた人々が仕様のJava実装を作成しています&lt;a href=&quot;https://github.com/jayway/JsonPath&quot;&gt;。https&lt;/a&gt; ： //github.com/jayway/JsonPathをご覧ください。</target>
        </trans-unit>
        <trans-unit id="031a4e76f0b39d0df073d934da5fc48da8d737e5" translate="yes" xml:space="preserve">
          <source>JSON</source>
          <target state="translated">JSON</target>
        </trans-unit>
        <trans-unit id="53caf5fac63a362f1b42f0a9bf30b0d1429744ca" translate="yes" xml:space="preserve">
          <source>Let me know if you have any questions.</source>
          <target state="translated">何か質問があったら教えてください。</target>
        </trans-unit>
        <trans-unit id="eb7d999e07b1970c76f70121da876b6c2277edcc" translate="yes" xml:space="preserve">
          <source>Let's say we have &lt;strong&gt;Page&lt;/strong&gt; class to deserialize given json data.</source>
          <target state="translated">与えられたjsonデータをデシリアライズする&lt;strong&gt;Page&lt;/strong&gt;クラスがあるとしましょう。</target>
        </trans-unit>
        <trans-unit id="3d575f5e4334f1ec638628bfc8458d0aaaae4399" translate="yes" xml:space="preserve">
          <source>Maven:</source>
          <target state="translated">Maven:</target>
        </trans-unit>
        <trans-unit id="68c2cc7f0ceaa3e499ecb4db331feb4debbbcc23" translate="yes" xml:space="preserve">
          <source>Model</source>
          <target state="translated">Model</target>
        </trans-unit>
        <trans-unit id="cf9db3cb2277b774f7e804d9f63363f022644951" translate="yes" xml:space="preserve">
          <source>My personal favourite as to the great JSON serialisation / de-serialisation of objects.</source>
          <target state="translated">オブジェクトの偉大なJSONシリアライズのデシリアライズとしての個人的なお気に入り。</target>
        </trans-unit>
        <trans-unit id="bce347b8b84e91a762a886a1d5505fcc68cb0f69" translate="yes" xml:space="preserve">
          <source>No dependency on external libraries</source>
          <target state="translated">外部ライブラリに依存しない</target>
        </trans-unit>
        <trans-unit id="fd5a170699b9eb4b30561cd70cabb9b28942c677" translate="yes" xml:space="preserve">
          <source>Now you can parse using Gson library:</source>
          <target state="translated">これでGsonライブラリを使ったパースができるようになりました。</target>
        </trans-unit>
        <trans-unit id="a484f9dc3e0f6afa1adeb91f3dbdf89f99016e46" translate="yes" xml:space="preserve">
          <source>Now, before anyone goes and downvotes this answer because it doesn't use GSON, org.json, Jackson, or any of the other 3rd party frameworks available, it's an example of &quot;required code&quot; per the question to parse the provided text.  I am well aware that &lt;a href=&quot;http://openjdk.java.net/jeps/198&quot;&gt;adherence to the current standard JSR 353 was not being considered for JDK 9&lt;/a&gt; and as such the &lt;a href=&quot;https://jcp.org/en/jsr/detail?id=353&quot;&gt;JSR 353 spec&lt;/a&gt; should be treated the same as any other 3rd party JSON handling implementation.</source>
          <target state="translated">さて、GSON、org.json、Jackson、またはその他の利用可能なサードパーティのフレームワークを使用していないため、誰もがこの回答に反対する前に、提供されたテキストを解析するための質問ごとの「必要なコード」の例です。 &lt;a href=&quot;http://openjdk.java.net/jeps/198&quot;&gt;現在の標準JSR 353への準拠はJDK 9では考慮されていなかったので&lt;/a&gt; 、 &lt;a href=&quot;https://jcp.org/en/jsr/detail?id=353&quot;&gt;JSR 353仕様&lt;/a&gt;は他のサードパーティのJSON処理実装と同じように扱う必要があることを私はよく知っています。</target>
        </trans-unit>
        <trans-unit id="9bf41a6d92f4678e2f2e1714e549e74448f091ce" translate="yes" xml:space="preserve">
          <source>Now, use this object to get your values:</source>
          <target state="translated">では、このオブジェクトを使って値を取得します。</target>
        </trans-unit>
        <trans-unit id="7e2ce87913736a80d592df235669758288745cc1" translate="yes" xml:space="preserve">
          <source>One can use &lt;a href=&quot;https://github.com/apache/incubator-netbeans-html4j&quot;&gt;Apache @Model annotation&lt;/a&gt; to create &lt;strong&gt;Java&lt;/strong&gt; model classes representing structure of &lt;strong&gt;JSON&lt;/strong&gt; files and use them to access various elements in the &lt;strong&gt;JSON&lt;/strong&gt; tree. Unlike other solutions this one &lt;em&gt;works completely without reflection&lt;/em&gt; and is thus suitable for environments where reflection is impossible or comes with significant overhead.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/apache/incubator-netbeans-html4j&quot;&gt;Apache @Modelアノテーション&lt;/a&gt;を使用して、 &lt;strong&gt;JSON&lt;/strong&gt;ファイルの構造を表す&lt;strong&gt;Java&lt;/strong&gt;モデルクラスを作成し、それらを使用して&lt;strong&gt;JSON&lt;/strong&gt;ツリーのさまざまな要素にアクセスできます。 他のソリューションとは異なり、これは&lt;em&gt;反射なしで完全に機能する&lt;/em&gt;ため、反射が不可能であるか、オーバーヘッドが大きい環境に適しています。</target>
        </trans-unit>
        <trans-unit id="dff366f935f687805e17e00bde34355d9df3edef" translate="yes" xml:space="preserve">
          <source>Page class</source>
          <target state="translated">ページクラス</target>
        </trans-unit>
        <trans-unit id="7294d33710169103141018bfcb0ee5ad3daa81e2" translate="yes" xml:space="preserve">
          <source>Parsing</source>
          <target state="translated">Parsing</target>
        </trans-unit>
        <trans-unit id="33e92b6b98157a0b3e332d3aff1d2cdddbdcc5a2" translate="yes" xml:space="preserve">
          <source>Parsing:</source>
          <target state="translated">Parsing:</target>
        </trans-unit>
        <trans-unit id="63c904559993935c470f516c8b549ca7f3640dbb" translate="yes" xml:space="preserve">
          <source>Performance</source>
          <target state="translated">Performance</target>
        </trans-unit>
        <trans-unit id="78567b320dd5ce717616b908847878e0a7b0a67c" translate="yes" xml:space="preserve">
          <source>Please do something like this:</source>
          <target state="translated">こんな感じでお願いします。</target>
        </trans-unit>
        <trans-unit id="2e3e17743adee6ed5daa287a499018808e01b737" translate="yes" xml:space="preserve">
          <source>Please follow the below steps.</source>
          <target state="translated">以下の手順でお願いします。</target>
        </trans-unit>
        <trans-unit id="06a02c250ba2e9a5ec6d861f17aa8cad8565b535" translate="yes" xml:space="preserve">
          <source>Pluggable Custom Validation support - Keys/Values can be validated by configuring custom validators as and when encountered</source>
          <target state="translated">プラグイン可能なカスタムバリデーションのサポート-KeysValues は、カスタムバリデーターを設定することでバリデーションを行うことができます。</target>
        </trans-unit>
        <trans-unit id="37f53753a64b29e001d0ac82c818162cc4fdeacc" translate="yes" xml:space="preserve">
          <source>Quick takeaway of the benchmark: &lt;strong&gt;Jackson&lt;/strong&gt; performs 5 to 6 times better than org.json and more than twice better than GSON.</source>
          <target state="translated">ベンチマークのクイックテイクアウト： &lt;strong&gt;Jackson&lt;/strong&gt;はorg.jsonよりも5〜6倍、GSONよりも2倍以上優れたパフォーマンスを発揮します。</target>
        </trans-unit>
        <trans-unit id="5196b11c8315c8990c058efb8fc0fb14bee4e072" translate="yes" xml:space="preserve">
          <source>Raises developer friendly and easy to trace exceptions</source>
          <target state="translated">開発者に優しく、追跡しやすい例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="a7b6bb6b6a7622460165f03ea7d746ba932816dd" translate="yes" xml:space="preserve">
          <source>Read the following blog post, &lt;a href=&quot;http://javahai.blogspot.in/2016/03/create-java-object-from-json-string.html&quot;&gt;JSON in Java&lt;/a&gt;.</source>
          <target state="translated">次のブログ投稿、 &lt;a href=&quot;http://javahai.blogspot.in/2016/03/create-java-object-from-json-string.html&quot;&gt;JSON in Java&lt;/a&gt;をお読みください。</target>
        </trans-unit>
        <trans-unit id="9ba33b97f81c7d33f86a74e8b5ced42856b9b058" translate="yes" xml:space="preserve">
          <source>Remember to import the library in the app Gradle file</source>
          <target state="translated">アプリのGradleファイルにライブラリをインポートすることを忘れないでください。</target>
        </trans-unit>
        <trans-unit id="8f09413ed3181ec583f8fe8a75d11dd2246abc05" translate="yes" xml:space="preserve">
          <source>Requires JDK 1.5</source>
          <target state="translated">要件 JDK 1.5</target>
        </trans-unit>
        <trans-unit id="aeac71ea0fd2ec62ec82e35cfa2b5656823dc3f1" translate="yes" xml:space="preserve">
          <source>Retrieve just one needed attribute</source>
          <target state="translated">必要な属性を1つだけ取得</target>
        </trans-unit>
        <trans-unit id="747797349181f1717cb1e6154cba08113cc22a2d" translate="yes" xml:space="preserve">
          <source>Running the call a million times using &lt;strong&gt;Nashorn&lt;/strong&gt; takes 7.5~7.8 seconds</source>
          <target state="translated">&lt;strong&gt;Nashorn&lt;/strong&gt;を使用して通話を100万回実行すると、 &lt;strong&gt;7.5〜7.8&lt;/strong&gt;秒かかります</target>
        </trans-unit>
        <trans-unit id="6d5f28546a36aa1ca02116c9ecd7d308a81aec26" translate="yes" xml:space="preserve">
          <source>Sample data:</source>
          <target state="translated">サンプルデータです。</target>
        </trans-unit>
        <trans-unit id="f984f1b22f545290ce43e2c70ffa6a52b1e2353c" translate="yes" xml:space="preserve">
          <source>Since nobody mentioned it yet, here is a beginning of a solution using &lt;a href=&quot;http://openjdk.java.net/projects/nashorn/&quot;&gt;Nashorn&lt;/a&gt; (JavaScript runtime part of Java 8, but deprecated in Java 11).</source>
          <target state="translated">まだ誰も言及していないため、ここに&lt;a href=&quot;http://openjdk.java.net/projects/nashorn/&quot;&gt;Nashorn&lt;/a&gt;を使用したソリューションの始まりがあります（Java 8のJavaScriptランタイム部分ですが、Java 11では非推奨です）。</target>
        </trans-unit>
        <trans-unit id="65201ee692e303421c8629f7432b4ea90f8187bb" translate="yes" xml:space="preserve">
          <source>So basically to use it, add it to your project, eg:</source>
          <target state="translated">だから基本的には、それを使用するには、例えば、プロジェクトに追加します。</target>
        </trans-unit>
        <trans-unit id="fa4cda1b6f05e89b3e0fb913778da8d50fea28cf" translate="yes" xml:space="preserve">
          <source>So this is the JSON returned by Google Translate API:</source>
          <target state="translated">ということで、これがGoogle翻訳APIが返すJSONです。</target>
        </trans-unit>
        <trans-unit id="61b0bb62aebfcdd9ea3216424e2be71fc16d3f18" translate="yes" xml:space="preserve">
          <source>So we have to create three different POJO classes;</source>
          <target state="translated">そこで、3つの異なるPOJOクラスを作成しなければなりません。</target>
        </trans-unit>
        <trans-unit id="0b15f607ce4802b8168dc099d186021a765ea7ae" translate="yes" xml:space="preserve">
          <source>Specifically for JSON libraries (and any serialization/deserialization libs), databinding is also usually of interest as it removes the need of writing boiler-plate code to pack/unpack the data.</source>
          <target state="translated">特にJSONライブラリ(およびserializationdeserialization libs)では、データをpackunpackするためのボイラープレートコードを書く必要がなくなるため、データバインディングは通常興味をそそられます。</target>
        </trans-unit>
        <trans-unit id="c4a8ec5fbf826704a452d2ff8dc55a69f8d01117" translate="yes" xml:space="preserve">
          <source>Step 1: Create a POJO class of your data.</source>
          <target state="translated">ステップ1:データのPOJOクラスを作成します。</target>
        </trans-unit>
        <trans-unit id="f256c7c1bed808e53ff3cb16960966d3aaf1e80d" translate="yes" xml:space="preserve">
          <source>Step 2: Now create a object using JSON.</source>
          <target state="translated">ステップ2:今度はJSONを使ってオブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="f0fcfae11fa1883d14c0d9809e80909475c86ff6" translate="yes" xml:space="preserve">
          <source>Support for JSON Generation through object serialisation</source>
          <target state="translated">オブジェクトシリアライズによるJSON生成のサポート</target>
        </trans-unit>
        <trans-unit id="7eb03cadb2fc7eb966c242ad99350591d8b0f6d8" translate="yes" xml:space="preserve">
          <source>Support for collection type selection during parsing process</source>
          <target state="translated">パース処理中のコレクションタイプの選択をサポート</target>
        </trans-unit>
        <trans-unit id="afac24cd0f87a58c47d5ce59dda54327482583d2" translate="yes" xml:space="preserve">
          <source>Support for two types of configuration (JSON/XML) for using quick-JSON validating parser</source>
          <target state="translated">クイックJSON検証パーサを利用するための2種類の設定(JSONXML)に対応</target>
        </trans-unit>
        <trans-unit id="d83e899da1f3b82cb28cd3141bdeff7abe873c2c" translate="yes" xml:space="preserve">
          <source>Supports Flexible/Configurable parsing approach</source>
          <target state="translated">FlexibleConfigurable parsingアプローチをサポートしています。</target>
        </trans-unit>
        <trans-unit id="50a6c9deb20f64043205b5e165c63d8709b1e139" translate="yes" xml:space="preserve">
          <source>That is it! In addition to that here is a &lt;a href=&quot;http://dew.apidesign.org/dew/#7138581&quot;&gt;live gist&lt;/a&gt; showing similar example together with asynchronous network communication.</source>
          <target state="translated">それだ！ これに加えて、非同期ネットワーク通信とともに同様の例を示す&lt;a href=&quot;http://dew.apidesign.org/dew/#7138581&quot;&gt;ライブ要点が&lt;/a&gt;あります。</target>
        </trans-unit>
        <trans-unit id="e948eed3f7c58d6a508c2ea8ef03c2e28ca93572" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://www.jsonschema2pojo.org/&quot;&gt;jsonschema2pojo.org&lt;/a&gt; for GSON generated:</source>
          <target state="translated">&lt;a href=&quot;http://www.jsonschema2pojo.org/&quot;&gt;GSON&lt;/a&gt;のjsonschema2pojo.orgが生成：</target>
        </trans-unit>
        <trans-unit id="e2c1a81b0b1db4f644b2eaf11f5657efbdc2422c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/stleary/JSON-java&quot;&gt;org.json&lt;/a&gt; library is easy to use. Example code below:</source>
          <target state="translated">&lt;a href=&quot;https://github.com/stleary/JSON-java&quot;&gt;org.json&lt;/a&gt;ライブラリは簡単に使用できます。 以下のサンプルコード：</target>
        </trans-unit>
        <trans-unit id="a4a83b11267f4452d16f9ed523cdf2d6db64dafa" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Java API for JSON Processing (JSR 353)&lt;/strong&gt; provides portable APIs to parse, generate, transform, and query JSON using object model and streaming APIs.</source>
          <target state="translated">&lt;strong&gt;JSON処理用&lt;/strong&gt;の&lt;strong&gt;Java API（JSR 353）&lt;/strong&gt;は、オブジェクトモデルとストリーミングAPIを使用してJSONを解析、生成、変換、クエリするためのポータブルAPIを提供します。</target>
        </trans-unit>
        <trans-unit id="7952a2393450285e76fd98aa15897de2bc703396" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;reference implementation&lt;/strong&gt; is here: &lt;a href=&quot;https://jsonp.java.net/&quot;&gt;https://jsonp.java.net/&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;リファレンス実装&lt;/strong&gt;はここにあります： &lt;a href=&quot;https://jsonp.java.net/&quot;&gt;https&lt;/a&gt; : //jsonp.java.net/</target>
        </trans-unit>
        <trans-unit id="5728e0be6d0ee1ae0d0ddf88386b3d07df6e2a14" translate="yes" xml:space="preserve">
          <source>The below example shows how to read the text in the question, represented as the &quot;jsonText&quot; variable.  This solution uses the Java EE7 &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/json/package-summary.html&quot;&gt;javax.json&lt;/a&gt; API (which is mentioned in some of the other answers).  The reason I've added it as a separate answer is that the following code shows how to &lt;em&gt;actually&lt;/em&gt; access some of the values shown in the question.  An &lt;a href=&quot;https://jsonp.java.net/download.html&quot;&gt;implementation of the javax.json API&lt;/a&gt; would be required to make this code run.  The full package for each of the classes required was included as I didn't want to declare &quot;import&quot; statements.</source>
          <target state="translated">以下の例は、「jsonText」変数として表される、質問のテキストを読み取る方法を示しています。 このソリューションは、Java EE7 &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/json/package-summary.html&quot;&gt;javax.json&lt;/a&gt; API（他の回答のいくつかで言及されています）を使用します。 別の回答として追加したのは、次のコードが、質問に示された値の一部に&lt;em&gt;実際に&lt;/em&gt;アクセスする方法を示しているためです。 このコードを実行するに&lt;a href=&quot;https://jsonp.java.net/download.html&quot;&gt;は、javax.json API&lt;/a&gt;の実装が必要です。 「インポート」ステートメントを宣言したくなかったので、必要な各クラスの完全なパッケージが含まれていました。</target>
        </trans-unit>
        <trans-unit id="f5634c0efba44765ff890cad41d8be7ab547400a" translate="yes" xml:space="preserve">
          <source>The most notorious ones are: Jackson, GSON, Genson, FastJson and org.json.</source>
          <target state="translated">最も有名なものは Jackson、GSON、Genson、FastJson、org.jsonです。</target>
        </trans-unit>
        <trans-unit id="23fffe987d93f66048ec9ac769e5dd36c834f920" translate="yes" xml:space="preserve">
          <source>The only package I've used is Jackson ObjectMapper, what we do is binding data;</source>
          <target state="translated">私が使っているパッケージはJackson ObjectMapperだけで、何をしているかというと、データのバインディングをしています。</target>
        </trans-unit>
        <trans-unit id="808091f429ed669a8665cfed3ed98b2d4c2f6f6e" translate="yes" xml:space="preserve">
          <source>The required dependencies, the jar files is listed below;</source>
          <target state="translated">必要な依存関係、jarファイルは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="1fe5f9a38a375f6340eae1fa099d8dd1c4d26367" translate="yes" xml:space="preserve">
          <source>There are many JSON libraries available in Java.</source>
          <target state="translated">JavaにはたくさんのJSONライブラリがあります。</target>
        </trans-unit>
        <trans-unit id="cd7f393468d8ac71394cdc687baab38627b89b2c" translate="yes" xml:space="preserve">
          <source>There are many open source libraries present to parse JSON content to an object or just to read JSON values. Your requirement is just to read values and parsing it to custom object. So org.json library is enough in your case.</source>
          <target state="translated">JSONの内容をオブジェクトにパースしたり、JSONの値を読み込んだりするためのオープンソースのライブラリが多数存在します。あなたの要件は、値を読み込んでカスタムオブジェクトにパースするだけです。ですから、あなたの場合はorg.jsonライブラリで十分です。</target>
        </trans-unit>
        <trans-unit id="3beded183424f6ed0877466312d0466c173e267a" translate="yes" xml:space="preserve">
          <source>There are typically three things one should look at for choosing any library:</source>
          <target state="translated">一般的に、図書館を選ぶ際に見るべき3つのことがあります。</target>
        </trans-unit>
        <trans-unit id="3ccd26c78ba65de44475356a712b29bac1c5371b" translate="yes" xml:space="preserve">
          <source>There is a &lt;a href=&quot;https://github.com/JaroslavTulach/incubator-netbeans-html4j/blob/examples/examples/jsonparse/README.md&quot;&gt;sample Maven project&lt;/a&gt; showing the usage. First of all it defines the structure:</source>
          <target state="translated">使用方法を示す&lt;a href=&quot;https://github.com/JaroslavTulach/incubator-netbeans-html4j/blob/examples/examples/jsonparse/README.md&quot;&gt;サンプルのMavenプロジェクト&lt;/a&gt;があります。 まず、構造を定義します。</target>
        </trans-unit>
        <trans-unit id="a84dada52a2d88cfaf4879a9ebff060f7ba639b3" translate="yes" xml:space="preserve">
          <source>These APIs actually follow the DOM/SAX parsing model of XML.</source>
          <target state="translated">これらの API は実際には XML の DOMSAX 解析モデルに従っています。</target>
        </trans-unit>
        <trans-unit id="f283c6a2c2d8218ba8199b2fc76c55313954c0ec" translate="yes" xml:space="preserve">
          <source>This blew my mind with how easy it was. You can just pass a &lt;code&gt;String&lt;/code&gt; holding your JSON to the constructor of a JSONObject in the default org.json package.</source>
          <target state="translated">これは、それがいかに簡単かで私の心を吹き飛ばしました。 JSONを保持する &lt;code&gt;String&lt;/code&gt; を、デフォルトのorg.jsonパッケージのJSONObjectのコンストラクターに渡すだけです。</target>
        </trans-unit>
        <trans-unit id="5993f0df1bb4be49ad42ceb63ecf7fd4d774f862" translate="yes" xml:space="preserve">
          <source>This post is a little bit old, but still I want to answer you question.</source>
          <target state="translated">この投稿は少し古いですが、それでも私はあなたの質問に答えたいと思います。</target>
        </trans-unit>
        <trans-unit id="1744e31c7b17d23ecbea63ae91f72b82d93a03ec" translate="yes" xml:space="preserve">
          <source>Top answers on this page use too simple examples like object with one property (e.g. {name: value}). I think that still simple but real life example can help someone.</source>
          <target state="translated">このページのトップアンサーは、プロパティが1つのオブジェクト(例:{name:value})のようなシンプルすぎる例を使用しています。私は、まだシンプルですが、実際の例が誰かの助けになると思います。</target>
        </trans-unit>
        <trans-unit id="e08928c6100c5f26a6c10dcf288c804025b48e95" translate="yes" xml:space="preserve">
          <source>Two possible approaches:</source>
          <target state="translated">2つの可能性のあるアプローチ。</target>
        </trans-unit>
        <trans-unit id="cc14179c743382808f9e74d4e9ec10a570710306" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;https://github.com/ralfstx/minimal-json&quot;&gt;minimal-json&lt;/a&gt; which is very fast and easy to use.
You can parse from String obj and Stream.</source>
          <target state="translated">非常に高速で使いやすい&lt;a href=&quot;https://github.com/ralfstx/minimal-json&quot;&gt;minimal-json&lt;/a&gt;を使用してください。 String objおよびStreamから解析できます。</target>
        </trans-unit>
        <trans-unit id="9a4a7774e7a2a8f2cd9dd46a13350306f9b613c0" translate="yes" xml:space="preserve">
          <source>Use DSM to extract fields.</source>
          <target state="translated">DSMを使用してフィールドを抽出します。</target>
        </trans-unit>
        <trans-unit id="de80861d34aeb2ec7058638972e4a0316739e902" translate="yes" xml:space="preserve">
          <source>Use org.json library to parse it and create JsonObject:</source>
          <target state="translated">org.jsonライブラリを使って解析し、JsonObjectを作成します。</target>
        </trans-unit>
        <trans-unit id="d5ecf0ed037efb9183e2f08bdb08774b7852d7dc" translate="yes" xml:space="preserve">
          <source>Using this library you only need to create a model with the same JSON structure. Then the model is automatically filled in. You have to call your variables as your JSON keys, or use &lt;a href=&quot;https://www.javadoc.io/doc/com.google.code.gson/gson/latest/com.google.gson/com/google/gson/annotations/SerializedName.html&quot;&gt;&lt;code&gt;@SerializedName&lt;/code&gt;&lt;/a&gt; if you want to use different names.</source>
          <target state="translated">このライブラリを使用すると、同じJSON構造を持つモデルを作成するだけで済みます。 次に、モデルが自動的に入力されます。変数をJSONキーとして呼び出すか、別の名前を使用する場合は&lt;a href=&quot;https://www.javadoc.io/doc/com.google.code.gson/gson/latest/com.google.gson/com/google/gson/annotations/SerializedName.html&quot;&gt; &lt;code&gt;@SerializedName&lt;/code&gt; &lt;/a&gt;を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="ce452f49a22173c844854192c968edd7b0ab91dd" translate="yes" xml:space="preserve">
          <source>Validating and Non-Validating parser support</source>
          <target state="translated">Validating パーサと Non-Validating パーサのサポート</target>
        </trans-unit>
        <trans-unit id="f56c314abd8f309e656f2b1afa4819e8b22a6b2a" translate="yes" xml:space="preserve">
          <source>We can use the JSONObject class to convert a JSON string to a JSON object,
and to iterate over the JSON object. Use the following code.</source>
          <target state="translated">JSONObjectクラスを使用して、JSON文字列をJSONオブジェクトに変換したり、JSONオブジェクトを反復処理したりすることができます。以下のコードを使用します。</target>
        </trans-unit>
        <trans-unit id="d39e447fecdad1f90b83cab9cdabcd361a315fcd" translate="yes" xml:space="preserve">
          <source>What are the API that does implement JSR-353 (JSON)</source>
          <target state="translated">JSR-353(JSON)を実装するAPIとは?</target>
        </trans-unit>
        <trans-unit id="494e0a51f1cb85162e2e1d6c23583e1a1c2940ad" translate="yes" xml:space="preserve">
          <source>You can also loop through the &quot;posts&quot; array as so:</source>
          <target state="translated">また、このように &quot;posts &quot;配列をループさせることもできます。</target>
        </trans-unit>
        <trans-unit id="2286851d16c9f677feb653c1051894fb28e1f3ee" translate="yes" xml:space="preserve">
          <source>You can generate model from JSON automatically using online tools like &lt;a href=&quot;http://www.jsonschema2pojo.org/&quot;&gt;this&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://www.jsonschema2pojo.org/&quot;&gt;この&lt;/a&gt;ようなオンラインツールを使用して、JSONからモデルを自動的に生成できます。</target>
        </trans-unit>
        <trans-unit id="f22b2364e92a604b636eb1af775cc217bf949a8b" translate="yes" xml:space="preserve">
          <source>You can see a complete example here:</source>
          <target state="translated">ここで完全な例を見ることができます。</target>
        </trans-unit>
        <trans-unit id="3871d2c5232d22375b0eeb6345c2e283ed7f4bcb" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;https://mfatihercik.github.io/dsm&quot;&gt;DSM&lt;/a&gt; stream parsing library for parsing complex json and XML document. DSM parse data only once and not load all data into memory.</source>
          <target state="translated">&lt;a href=&quot;https://mfatihercik.github.io/dsm&quot;&gt;DSM&lt;/a&gt;ストリーム解析ライブラリを使用して、複雑なjsonおよびXMLドキュメントを解析できます。 DSMはデータを1回だけ解析し、すべてのデータをメモリにロードしません。</target>
        </trans-unit>
        <trans-unit id="51dae0bf3fc8f570a97d4e9a63b4e622ad88275b" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;JsonNode&lt;/code&gt; for a structured tree representation of your JSON string. It's part of the rock solid &lt;a href=&quot;https://github.com/FasterXML/jackson&quot;&gt;&lt;em&gt;jackson&lt;/em&gt; library&lt;/a&gt; which is omnipresent.</source>
          <target state="translated">JSON文字列の構造化ツリー表現に &lt;code&gt;JsonNode&lt;/code&gt; を使用できます。 それは遍在しているロックソリッド&lt;a href=&quot;https://github.com/FasterXML/jackson&quot;&gt;&lt;em&gt;ジャクソン&lt;/em&gt;ライブラリ&lt;/a&gt;の一部です。</target>
        </trans-unit>
        <trans-unit id="1739b37566f3eb9d69fdcaeff614eee0838dd678" translate="yes" xml:space="preserve">
          <source>You can use &lt;strong&gt;Jackson&lt;/strong&gt; libraries, for binding JSON String into &lt;strong&gt;POJO&lt;/strong&gt; (&lt;strong&gt;&lt;em&gt;Plain Old Java Object&lt;/em&gt;&lt;/strong&gt;) instances. POJO is simply a class with only private fields and public getter/setter methods. Jackson is going to traverse the methods (using &lt;strong&gt;reflection&lt;/strong&gt;), and maps the JSON object into the POJO instance as the field names of the class fits to the field names of the JSON object.</source>
          <target state="translated">JSONライブラリーを&lt;strong&gt;POJO&lt;/strong&gt; （ &lt;strong&gt;&lt;em&gt;Plain Old Java Object&lt;/em&gt;&lt;/strong&gt; ）インスタンスにバインドするために、 &lt;strong&gt;Jackson&lt;/strong&gt;ライブラリーを使用できます。 POJOは、プライベートフィールドとパブリックゲッター/セッターメソッドのみを含むクラスです。 ジャクソンは（ &lt;strong&gt;リフレクション&lt;/strong&gt;を使用&lt;strong&gt;して&lt;/strong&gt; ）メソッドをトラバースし、クラスのフィールド名がJSONオブジェクトのフィールド名と一致するように、JSONオブジェクトをPOJOインスタンスにマップします。</target>
        </trans-unit>
        <trans-unit id="1833a7fcec164db264b95fc3f2c7116552f703f3" translate="yes" xml:space="preserve">
          <source>You can use &lt;strong&gt;Jayway JsonPath&lt;/strong&gt;. Below is a GitHub link with source code, pom details and good documentation.</source>
          <target state="translated">&lt;strong&gt;Jayway JsonPath&lt;/strong&gt;を使用できます。 以下は、ソースコード、pomの詳細、優れたドキュメントを含むGitHubリンクです。</target>
        </trans-unit>
        <trans-unit id="27feb53b95d6cc0a8e5dbfe7c29a6b57cd36577c" translate="yes" xml:space="preserve">
          <source>You can use the Gson Library to parse the JSON string.</source>
          <target state="translated">Gson ライブラリを使って JSON 文字列をパースすることができます。</target>
        </trans-unit>
        <trans-unit id="829d83a3ff692e4b324b2503fa7e9625db4df88a" translate="yes" xml:space="preserve">
          <source>You could use &lt;a href=&quot;https://github.com/google/gson&quot;&gt;Google Gson&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/google/gson&quot;&gt;Google Gsonを&lt;/a&gt;使用できます。</target>
        </trans-unit>
        <trans-unit id="18f0351dcd2f2cc886942c22f5380be9b3d6b2ad" translate="yes" xml:space="preserve">
          <source>You may find more examples from: &lt;a href=&quot;http://theoryapp.com/parse-json-in-java/&quot;&gt;Parse JSON in Java&lt;/a&gt;</source>
          <target state="translated">あなたはより多くの例を見つけるかもしれません： &lt;a href=&quot;http://theoryapp.com/parse-json-in-java/&quot;&gt;JavaでのJSONの解析&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7e15bb5c01e7dd56499e37c634cf791d3a519aee" translate="yes" xml:space="preserve">
          <source>`</source>
          <target state="translated">`</target>
        </trans-unit>
        <trans-unit id="c4c7bfd2eb4f931d7799bfe2622f04431fafc657" translate="yes" xml:space="preserve">
          <source>and from message object you can fetch any of its attribute.</source>
          <target state="translated">で、メッセージオブジェクトから任意の属性を取得することができます。</target>
        </trans-unit>
        <trans-unit id="cf207c66af7e6aad1158ac914cd0992bc4f2b6bf" translate="yes" xml:space="preserve">
          <source>and then it uses the generated RepositoryInfo and Owner classes to parse the provided input stream and pick certain information up while doing that:</source>
          <target state="translated">そして、生成された RepositoryInfo クラスと Owner クラスを使用して、提供された入力ストリームを解析し、その間に特定の情報をピックアップします。</target>
        </trans-unit>
        <trans-unit id="8e3d482d85fad29be0fda23ab59f7468fbda5329" translate="yes" xml:space="preserve">
          <source>and to use:</source>
          <target state="translated">と使用することができます。</target>
        </trans-unit>
        <trans-unit id="5e9b496a0935b15e72709835275b0a4dd4c2a1c6" translate="yes" xml:space="preserve">
          <source>etc...</source>
          <target state="translated">etc...</target>
        </trans-unit>
        <trans-unit id="161f626fb46e32dc28bb28ba0e99d92b77a220a5" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;jsonData&lt;/code&gt; is a string of json data.</source>
          <target state="translated">ここで、 &lt;code&gt;jsonData&lt;/code&gt; はjsonデータの文字列です。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
