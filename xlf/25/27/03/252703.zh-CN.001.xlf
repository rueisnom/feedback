<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/252703">
    <body>
      <group id="252703">
        <trans-unit id="70b7d255c4e92893f5ed0c09ddb4a442d548b2f1" translate="yes" xml:space="preserve">
          <source>1) &lt;strong&gt;The difference between &lt;code&gt;append&lt;/code&gt; and &lt;code&gt;extend&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">1） &lt;strong&gt; &lt;code&gt;append&lt;/code&gt; 和 &lt;code&gt;extend&lt;/code&gt; 之间的区别&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ab2a695f169966e321c1b3c9b136f73501c69488" translate="yes" xml:space="preserve">
          <source>2) &lt;strong&gt;Similarity between &lt;code&gt;append&lt;/code&gt; and &lt;code&gt;extend&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">2） &lt;strong&gt; &lt;code&gt;append&lt;/code&gt; 和 &lt;code&gt;extend&lt;/code&gt; 之间的相似性&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1af6c3789e468fb9b97d1fdaf4f96f869bc530f0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types&quot;&gt;&lt;code&gt;append&lt;/code&gt;&lt;/a&gt;: Appends object at the end.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types&quot;&gt; &lt;code&gt;append&lt;/code&gt; &lt;/a&gt; ：在最后追加对象。</target>
        </trans-unit>
        <trans-unit id="6e6530121285944097aa883fa0e71146dc804b7e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types&quot;&gt;&lt;code&gt;extend&lt;/code&gt;&lt;/a&gt;: Extends list by appending elements from the iterable.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types&quot;&gt; &lt;code&gt;extend&lt;/code&gt; &lt;/a&gt; ：通过添加来自iterable的元素来扩展列表。</target>
        </trans-unit>
        <trans-unit id="56037a5482c563e6083508c3dbe4db4c5f2dd78a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;append(object)&lt;/code&gt; - Updates the list by adding an object to the list.</source>
          <target state="translated">&lt;code&gt;append(object)&lt;/code&gt; -通过将对象添加到列表来更新列表。</target>
        </trans-unit>
        <trans-unit id="195da8d5db2501df35652252e9c31bafdf14d0a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;append&lt;/code&gt; &quot;extends&quot; the list (in place) by &lt;strong&gt;only one item&lt;/strong&gt;, the single object passed (as argument).</source>
          <target state="translated">&lt;code&gt;append&lt;/code&gt; &lt;strong&gt;仅将一项&lt;/strong&gt; （通过的单个对象（作为参数））&amp;ldquo;扩展&amp;rdquo;（就地）列表。</target>
        </trans-unit>
        <trans-unit id="e201063d351f7e744726a96fd16139627216b468" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;append&lt;/code&gt; adds an element to a list, and &lt;code&gt;extend&lt;/code&gt; concatenates the first list with another list (or another iterable, not necessarily a list.)</source>
          <target state="translated">&lt;code&gt;append&lt;/code&gt; 将元素添加到列表，然后 &lt;code&gt;extend&lt;/code&gt; 第一个列表与另一个列表（或另一个可迭代的列表，不一定是列表）连接在一起。</target>
        </trans-unit>
        <trans-unit id="c90ce0dfa39be2acdf4de0fd00b8ad1c7c2fbdc1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;append&lt;/code&gt; adds its argument as a single element to the end of a list. The length of the list itself will increase by one.</source>
          <target state="translated">&lt;code&gt;append&lt;/code&gt; 将其参数作为单个元素添加到列表的末尾。 列表本身的长度将增加一。</target>
        </trans-unit>
        <trans-unit id="1eb23d62627a5b29b6ae434c809f477b0a96b7fc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;append&lt;/code&gt; appends a single element. &lt;code&gt;extend&lt;/code&gt; appends a list of elements.</source>
          <target state="translated">&lt;code&gt;append&lt;/code&gt; 追加一个元素。 &lt;code&gt;extend&lt;/code&gt; 追加元素列表。</target>
        </trans-unit>
        <trans-unit id="c53fb1781eecc5dbd4e45de38ba66eaf09526ada" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extend()&lt;/code&gt; can be used with an iterator argument. Here is an example. You wish to make a list out of a list of lists this way:</source>
          <target state="translated">&lt;code&gt;extend()&lt;/code&gt; 可以与迭代器参数一起使用。 这是一个例子。 您希望通过以下方式从列表列表中列出一个列表：</target>
        </trans-unit>
        <trans-unit id="54c7efb153db4dcfedd27850a5bdbcc67ee8033b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extend(L)&lt;/code&gt; extends the list by appending all the items in the given list &lt;code&gt;L&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;extend(L)&lt;/code&gt; 通过在给定列表 &lt;code&gt;L&lt;/code&gt; 中附加所有项来扩展列表。</target>
        </trans-unit>
        <trans-unit id="449428f078254b818fc7a460a447f0686fa129a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extend(list)&lt;/code&gt; - Essentially concatenates two lists.</source>
          <target state="translated">&lt;code&gt;extend(list)&lt;/code&gt; -本质上是串联两个列表。</target>
        </trans-unit>
        <trans-unit id="6e5475464b8884d8301120f004ad00149b84905f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extend&lt;/code&gt; &quot;extends&quot; the list (in place) by &lt;strong&gt;as many items as&lt;/strong&gt; the object passed (as argument) contains.</source>
          <target state="translated">&lt;code&gt;extend&lt;/code&gt; &amp;ldquo;扩展&amp;rdquo;列表（就地）列表的数量与传递的对象（作为参数）所包含的数量一样多。</target>
        </trans-unit>
        <trans-unit id="3fc2f725a3d1f010fefd641d1892b1ee1f91e6fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extend&lt;/code&gt; iterates over its argument adding each element to the list, extending the list. The length of the list will increase by however many elements were in the iterable argument.</source>
          <target state="translated">&lt;code&gt;extend&lt;/code&gt; 对其参数进行迭代，将每个元素添加到列表中，从而扩展列表。 无论迭代参数中有多少元素，列表的长度都会增加。</target>
        </trans-unit>
        <trans-unit id="fe2546e6a922cf581b6922fa14fd645b38325c8c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;my_list + another_list&lt;/code&gt; creates a third list in memory, so you can return the result of it, but it requires that the second iterable be a list.</source>
          <target state="translated">&lt;code&gt;my_list + another_list&lt;/code&gt; 在内存中创建第三个列表，因此您可以返回它的结果，但是它要求第二个可迭代的列表。</target>
        </trans-unit>
        <trans-unit id="a0282174700fd8ac6b62a87710c430aaaba8b4d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;my_list += another_list&lt;/code&gt; modifies the list in-place (it &lt;em&gt;is&lt;/em&gt; the in-place operator, and lists are mutable objects, as we've seen) so it does not create a new list. It also works like extend, in that the second iterable can be any kind of iterable.</source>
          <target state="translated">&lt;code&gt;my_list += another_list&lt;/code&gt; 修改就地列表（它&lt;em&gt;是&lt;/em&gt;就地运算符，并且列表是可变对象，如我们所见），因此它不会创建新列表。 它也像扩展一样工作，因为第二个可迭代对象可以是任何一种可迭代对象。</target>
        </trans-unit>
        <trans-unit id="f7578f20b77af40f225f298cbcb73be6627161b6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;append&lt;/code&gt;&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;append&lt;/code&gt;&lt;/strong&gt;:</target>
        </trans-unit>
        <trans-unit id="0127262cede2cab585110eb2c03be6569a2c12e2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;extend&lt;/code&gt;&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;extend&lt;/code&gt;&lt;/strong&gt;:</target>
        </trans-unit>
        <trans-unit id="8a2ff2e2c62707adf50c6148d4505425791baf31" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;append()&lt;/em&gt;&lt;/strong&gt;: It is basically used in Python to add one element.</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;append（）&lt;/em&gt;&lt;/strong&gt; ：基本上在Python中用于添加一个元素。</target>
        </trans-unit>
        <trans-unit id="14eb46927e8d89134e522d4f00499b1d34001a08" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;extend()&lt;/em&gt;&lt;/strong&gt;: Where extend(), is used to merge two lists or insert multiple elements in one list.</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;extend（）&lt;/em&gt;&lt;/strong&gt; ：extend（）用于合并两个列表或在一个列表中插入多个元素。</target>
        </trans-unit>
        <trans-unit id="bce3f4a409dc0c67054a7e806ad3eecf69f742f8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Example&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="edec114d7838eaaa26c315e52fbbd3f12398b693" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;append&lt;/strong&gt;: add (something) to the end of a written document.</source>
          <target state="translated">&lt;strong&gt;append&lt;/strong&gt; ：在书面文档的末尾添加（某些内容）。</target>
        </trans-unit>
        <trans-unit id="b1e9d53522b23940ace67598f8e304257e1f3352" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;extend&lt;/strong&gt;: make larger. Enlarge or expand</source>
          <target state="translated">&lt;strong&gt;扩大&lt;/strong&gt; ：扩大。 放大或扩大</target>
        </trans-unit>
        <trans-unit id="f12a8425b5f8b5d83766f116609e798cf3d2736a" translate="yes" xml:space="preserve">
          <source>A commenter said:</source>
          <target state="translated">一位评论员说。</target>
        </trans-unit>
        <trans-unit id="e9861fac696e41c8635a5c24911b57eada4db3c3" translate="yes" xml:space="preserve">
          <source>Accepts any &lt;em&gt;iterable&lt;/em&gt; as its argument and makes the list &lt;em&gt;larger&lt;/em&gt;.</source>
          <target state="translated">接受任何&lt;em&gt;iterable&lt;/em&gt;作为其参数，并使列表&lt;em&gt;更大&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="7b129563b97b402d8049cf753bbc3e20261ad750" translate="yes" xml:space="preserve">
          <source>Adding more elements... with different results</source>
          <target state="translated">添加更多的元素...........有不同的结果</target>
        </trans-unit>
        <trans-unit id="4be32550b452f40fa51e2ab0d959e581fc012349" translate="yes" xml:space="preserve">
          <source>Adding one element with both methods</source>
          <target state="translated">用两种方法添加一个元素</target>
        </trans-unit>
        <trans-unit id="3bd26fd8398207d1b43767d782ed37724ff4ee89" translate="yes" xml:space="preserve">
          <source>Addressing a comment on timings</source>
          <target state="translated">处理关于时间问题的评论</target>
        </trans-unit>
        <trans-unit id="8985d7314d0e00979e7074fed170525d3b04f639" translate="yes" xml:space="preserve">
          <source>Also, these timings are not that important. I am just showing them to make the point that, in Python, doing the semantically correct thing is doing things the &lt;em&gt;Right&lt;/em&gt; Way&amp;trade;.</source>
          <target state="translated">同样，这些时间并不是那么重要。 我只是向他们表明，在Python中做正确的语义就是&lt;em&gt;正确的&lt;/em&gt;方法。</target>
        </trans-unit>
        <trans-unit id="123aea4459cfda9e1014bb1516b63b4575238e6c" translate="yes" xml:space="preserve">
          <source>An English dictionary defines the words &lt;code&gt;append&lt;/code&gt; and &lt;code&gt;extend&lt;/code&gt; as:</source>
          <target state="translated">英文字典中定义的 &lt;code&gt;append&lt;/code&gt; 和 &lt;code&gt;extend&lt;/code&gt; 词为：</target>
        </trans-unit>
        <trans-unit id="c82c64b1e995a03f9f27069b25caf973b1cd888a" translate="yes" xml:space="preserve">
          <source>An interesting point that has been hinted, but not explained, is that extend is faster than append. For any loop that has append inside should be considered to be replaced by list.extend(processed_elements).</source>
          <target state="translated">有一个有趣的点被暗示了,但没有解释,那就是extend比append快。对于任何有append里面的循环,应该考虑用list.extend(processed_elements)代替。</target>
        </trans-unit>
        <trans-unit id="018aae27d8c30554c8de46329857104e9cfa62e5" translate="yes" xml:space="preserve">
          <source>And we see that going out of our way to create an iterable just to use extend is a (minor) waste of time:</source>
          <target state="translated">而我们看到,仅仅是为了使用extension而不顾一切地去创建一个迭代,是一种(次要的)浪费时间。</target>
        </trans-unit>
        <trans-unit id="d6b2d924cdf87d59ab32e293efde3bb5f80d5ede" translate="yes" xml:space="preserve">
          <source>Append adds the entire data at once. The whole data will be added to the newly created index. On the other hand, &lt;code&gt;extend&lt;/code&gt;, as it name suggests, extends the current array.</source>
          <target state="translated">Append一次添加全部数据。 整个数据将被添加到新创建的索引中。 另一方面， &lt;code&gt;extend&lt;/code&gt; 顾名思义就是扩展当前数组。</target>
        </trans-unit>
        <trans-unit id="218d2be77aa21f8e1fa80975e1d52bafb2e198fc" translate="yes" xml:space="preserve">
          <source>Append and extend are one of the extensibility mechanisms in python.</source>
          <target state="translated">Append和扩展是python中的可扩展机制之一。</target>
        </trans-unit>
        <trans-unit id="82310d2db83e0bffcdb2cb1046a402703b91569f" translate="yes" xml:space="preserve">
          <source>Append has &lt;a href=&quot;https://wiki.python.org/moin/TimeComplexity&quot;&gt;constant time complexity&lt;/a&gt;, O(1).</source>
          <target state="translated">追加具有&lt;a href=&quot;https://wiki.python.org/moin/TimeComplexity&quot;&gt;恒定的时间复杂度&lt;/a&gt; O（1）。</target>
        </trans-unit>
        <trans-unit id="a434fa8cd6c552e1548e22e237aff0d10a359668" translate="yes" xml:space="preserve">
          <source>Append vs Extend</source>
          <target state="translated">附带与延伸</target>
        </trans-unit>
        <trans-unit id="1a9df5d80165788d628ca7925476c3964139df7b" translate="yes" xml:space="preserve">
          <source>Append: Adds an element to the end of the list.</source>
          <target state="translated">Append。在列表的末尾添加一个元素。</target>
        </trans-unit>
        <trans-unit id="44cccc038cbd4611ed1a5bc84803bd64f4954c09" translate="yes" xml:space="preserve">
          <source>Appends &lt;em&gt;any Python object as-is&lt;/em&gt; to the end of the list (i.e. as a
the last element in the list).</source>
          <target state="translated">将&lt;em&gt;所有Python对象原样&lt;/em&gt;追加到列表的末尾（即，作为列表中的最后一个元素）。</target>
        </trans-unit>
        <trans-unit id="94244f6d45b4ab70f0612edd71cd1f68ea4e50c7" translate="yes" xml:space="preserve">
          <source>As a result, both returns &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">结果，两个都返回 &lt;code&gt;None&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="318d03febd1ee6fd92ef15470179479c6ff55bf1" translate="yes" xml:space="preserve">
          <source>Back to our example, we can do</source>
          <target state="translated">回到我们的例子,我们可以做到</target>
        </trans-unit>
        <trans-unit id="4e48bd2e9bf5522034e523ecfa6f9cbb0633d97d" translate="yes" xml:space="preserve">
          <source>Bear in mind that apprending new elements might result in the realloaction of the whole list to a better location in memory. If this is done several times because we are appending 1 element at a time, overall performance suffers. In this sense, list.extend is analogous to &quot;&quot;.join(stringlist).</source>
          <target state="translated">请记住,添加新的元素可能会导致整个列表的实际运行到内存中更好的位置。如果这样做了好几次,因为我们一次只追加一个元素,那么整体性能会受到影响。在这个意义上,list.extend类似于&quot;&quot;.join(stringlist)。</target>
        </trans-unit>
        <trans-unit id="e97f9942bc15b33736d10eae0f865c61a5234097" translate="yes" xml:space="preserve">
          <source>Besides I make an exhaustive cheatsheet of all list's methods for your reference.</source>
          <target state="translated">另外,我把所有清单上的方法都做了一个详尽的小册子,供大家参考。</target>
        </trans-unit>
        <trans-unit id="8af004100ad3dfe672ee2f2df74580a4205ca4c9" translate="yes" xml:space="preserve">
          <source>Both &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;+=&lt;/code&gt; operators are defined for &lt;code&gt;list&lt;/code&gt;. They are semantically similar to extend.</source>
          <target state="translated">&lt;code&gt;+&lt;/code&gt; 和 &lt;code&gt;+=&lt;/code&gt; 运算符都为 &lt;code&gt;list&lt;/code&gt; 定义。 它们在语义上类似扩展。</target>
        </trans-unit>
        <trans-unit id="8cea93e5d27858e13b964a58dc49cc9784afe589" translate="yes" xml:space="preserve">
          <source>Both modify the list &lt;em&gt;in-place&lt;/em&gt;.</source>
          <target state="translated">两者都&lt;em&gt;就地&lt;/em&gt;修改列表。</target>
        </trans-unit>
        <trans-unit id="5c15aa9e32664b33f729fab83f0a48a3f35608a0" translate="yes" xml:space="preserve">
          <source>Both take exactly one argument.</source>
          <target state="translated">两者正好取一个论点。</target>
        </trans-unit>
        <trans-unit id="1f2765f828ce01b38fe87d53bc54780f4b1e79fe" translate="yes" xml:space="preserve">
          <source>But if you use the &lt;code&gt;append&lt;/code&gt; method, the result is OK. Because every time using the &lt;code&gt;extend&lt;/code&gt; method, it will always treat it as a list or any other collection type, iterate it, and place it after the previous list. A specific object can not be iterated, obviously.</source>
          <target state="translated">但是，如果使用 &lt;code&gt;append&lt;/code&gt; 方法，则结果可以。 因为每次使用 &lt;code&gt;extend&lt;/code&gt; 方法时，它总是将其视为列表或任何其他集合类型，对其进行迭代，并将其放置在上一个列表之后。 显然，不能迭代特定的对象。</target>
        </trans-unit>
        <trans-unit id="e39262defe80a83fac1b793497417432c8b1a879" translate="yes" xml:space="preserve">
          <source>Conclusion</source>
          <target state="translated">Conclusion</target>
        </trans-unit>
        <trans-unit id="da2da7e2bc2dc9f054a633624f329b7493a204c0" translate="yes" xml:space="preserve">
          <source>Do the semantically correct thing. If you want to append all elements in an iterable, use &lt;code&gt;extend&lt;/code&gt;. If you're just adding one element, use &lt;code&gt;append&lt;/code&gt;.</source>
          <target state="translated">做语义上正确的事情。 如果要以可迭代方式附加所有元素，请使用 &lt;code&gt;extend&lt;/code&gt; 。 如果仅添加一个元素，请使用 &lt;code&gt;append&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="10f18a826002b58a77378025a10ce911fa701a08" translate="yes" xml:space="preserve">
          <source>Don't get confused - &lt;code&gt;my_list = my_list + another_list&lt;/code&gt; is not equivalent to &lt;code&gt;+=&lt;/code&gt; - it gives you a brand new list assigned to my_list.</source>
          <target state="translated">请勿混淆 &lt;code&gt;my_list = my_list + another_list&lt;/code&gt; 不等同于 &lt;code&gt;+=&lt;/code&gt; -它为您提供了分配给my_list的全新列表。</target>
        </trans-unit>
        <trans-unit id="8ef2e1210c47909b18d1b60b9c30a0116c39a246" translate="yes" xml:space="preserve">
          <source>Example 1:</source>
          <target state="translated">例1:</target>
        </trans-unit>
        <trans-unit id="e11895e8b0e4fd9700bfd1eef21691b78b345f1b" translate="yes" xml:space="preserve">
          <source>Example 2:</source>
          <target state="translated">例2:</target>
        </trans-unit>
        <trans-unit id="a3691b50433e8309ce0693bf2d494a25e87168a9" translate="yes" xml:space="preserve">
          <source>Extend has time complexity, O(k).</source>
          <target state="translated">Extend有时间复杂性,O(k)。</target>
        </trans-unit>
        <trans-unit id="5fb1e2f656c5adb41e1c4ee68a9808fe15fb63cd" translate="yes" xml:space="preserve">
          <source>Extend: This is very useful when we want to join two or more lists into a single list. Without extend, if we want to join two lists, the resulting object will contain a list of lists.</source>
          <target state="translated">Extend(扩展)。当我们想把两个或更多的列表连接成一个列表时,这个功能非常有用。如果不使用extend,如果我们想把两个列表连接起来,所产生的对象将包含一个列表。</target>
        </trans-unit>
        <trans-unit id="dc3c09a115b4ee611eb7505826a4fa0c2a8495d8" translate="yes" xml:space="preserve">
          <source>For example</source>
          <target state="translated">比如说</target>
        </trans-unit>
        <trans-unit id="3f66052a107eaf9bae7cad0f61fb462f47ec2c47" translate="yes" xml:space="preserve">
          <source>From</source>
          <target state="translated">From</target>
        </trans-unit>
        <trans-unit id="b1e759b98f1f0ccc898bd690e8dc14b7a27acf7d" translate="yes" xml:space="preserve">
          <source>From &lt;em&gt;&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/1430224150&quot;&gt;Dive Into Python&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">从&lt;em&gt;&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/1430224150&quot;&gt;潜入Python&lt;/a&gt;&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="baf23460f399b5c16f97e8db76403f770b3dbb1f" translate="yes" xml:space="preserve">
          <source>Here is how equivalently &lt;code&gt;extend()&lt;/code&gt; can be used with an iterator argument:</source>
          <target state="translated">这是等效地 &lt;code&gt;extend()&lt;/code&gt; 与迭代器参数一起使用的方式：</target>
        </trans-unit>
        <trans-unit id="0e9d8a643011fd67f28b979e20dda79318cc1cdf" translate="yes" xml:space="preserve">
          <source>I hope I can make a useful supplement to this question. If your list stores a specific type object, for example &lt;code&gt;Info&lt;/code&gt;, here is a situation that &lt;code&gt;extend&lt;/code&gt; method is not suitable: In a &lt;code&gt;for&lt;/code&gt; loop and and generating an &lt;code&gt;Info&lt;/code&gt; object every time and using &lt;code&gt;extend&lt;/code&gt; to store it into your list, it will fail. The exception is like below:</source>
          <target state="translated">我希望我可以对这个问题做出有益的补充。 如果您的列表存储了特定的类型对象，例如 &lt;code&gt;Info&lt;/code&gt; ，则这种情况不适合使用 &lt;code&gt;extend&lt;/code&gt; 方法：在 &lt;code&gt;for&lt;/code&gt; 循环中，每次生成一个 &lt;code&gt;Info&lt;/code&gt; 对象，并使用 &lt;code&gt;extend&lt;/code&gt; 将其存储到您的列表中，它将失败。 异常如下所示：</target>
        </trans-unit>
        <trans-unit id="657934d5480ac30f96a36630d4a659770fc01e45" translate="yes" xml:space="preserve">
          <source>If we try to access the element at pos 2, we get a list ([3]), instead of the element. To join two lists, we'll have to use append.</source>
          <target state="translated">如果我们尝试访问pos 2的元素,我们得到的是一个列表([[3]),而不是元素。要将两个列表连接起来,我们必须使用append。</target>
        </trans-unit>
        <trans-unit id="e75fb7783804105a9dade83d72df5de83534afcf" translate="yes" xml:space="preserve">
          <source>If you only have a single element (not in an iterable) to add to the list, use &lt;code&gt;append&lt;/code&gt;.</source>
          <target state="translated">如果只有一个元素（不可迭代）添加到列表，请使用 &lt;code&gt;append&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9ce2025f5a6f0b96852bc47624b0b009478fe59b" translate="yes" xml:space="preserve">
          <source>If you pass a list of strings as argument:
&lt;code&gt;append&lt;/code&gt; will still add a single 'list' item at the end and
&lt;code&gt;extend&lt;/code&gt; will add as many 'list' items as the length of the passed list.</source>
          <target state="translated">如果您将字符串列表作为参数传递： &lt;code&gt;append&lt;/code&gt; 仍将在末尾添加单个&amp;ldquo;列表&amp;rdquo;项，而 &lt;code&gt;extend&lt;/code&gt; 将添加与传递的列表长度一样多的&amp;ldquo;列表&amp;rdquo;项。</target>
        </trans-unit>
        <trans-unit id="6c27f820634ecd34d8c93d2069f58787190aa47c" translate="yes" xml:space="preserve">
          <source>If you pass a string as argument:
&lt;code&gt;append&lt;/code&gt; will add a single string item at the end but
&lt;code&gt;extend&lt;/code&gt; will add as many &quot;single&quot; 'str' items as the length of that string.</source>
          <target state="translated">如果您将字符串作为参数传递： &lt;code&gt;append&lt;/code&gt; 将在字符串末尾添加单个字符串项，而 &lt;code&gt;extend&lt;/code&gt; 将添加与该字符串的长度一样多的&amp;ldquo;单个&amp;rdquo;&amp;ldquo; str&amp;rdquo;项。</target>
        </trans-unit>
        <trans-unit id="b78f53d6305e0bd43669afa71c43028bbf7c4ec8" translate="yes" xml:space="preserve">
          <source>If you use append for more than one element, you have to pass a list of elements as arguments and you will obtain a NESTED list!</source>
          <target state="translated">如果你对一个以上的元素使用append,你必须传递一个元素列表作为参数,你将得到一个NESTED的列表!</target>
        </trans-unit>
        <trans-unit id="2f14134054d2da414c86e62b237399f7524fad93" translate="yes" xml:space="preserve">
          <source>If you want to extend more than one element you should use extend, because you can only append one elment or one list of element:</source>
          <target state="translated">如果你想扩展一个以上的元素,你应该使用extend,因为你只能附加一个elment或一个元素列表。</target>
        </trans-unit>
        <trans-unit id="b799bef3e6eaf61deea4678f3fd5902b41abc370" translate="yes" xml:space="preserve">
          <source>Insert: The insert method was used to overcome the limitations of append. With insert, we can explicitly define the exact position we want our new element to be inserted at.</source>
          <target state="translated">插入法。insert方法是用来克服append的限制。使用插入法,我们可以明确地定义我们希望新元素插入的确切位置。</target>
        </trans-unit>
        <trans-unit id="61d800ca63db9c80878c85762026d4ba3a71f9a5" translate="yes" xml:space="preserve">
          <source>Instead with extend, you can extend a single element like this</source>
          <target state="translated">相反,使用extend,你可以像这样扩展一个单一的元素</target>
        </trans-unit>
        <trans-unit id="5ebf0e147c0278d4d1f190960458d3838c5a3a48" translate="yes" xml:space="preserve">
          <source>It's conceivable that you might test timings on two comparable operations and get an ambiguous or inverse result. Just focus on doing the semantically correct thing.</source>
          <target state="translated">可以想象,你可能会在两个类似的操作上测试时序,得到一个模棱两可的结果或相反的结果。只要专注于做语义上正确的事情就可以了。</target>
        </trans-unit>
        <trans-unit id="8d6abae937814c8446b46b317e8c03f82a94468a" translate="yes" xml:space="preserve">
          <source>It's like &lt;code&gt;l1&lt;/code&gt; reproduce a body inside her body(nested).</source>
          <target state="translated">就像 &lt;code&gt;l1&lt;/code&gt; 在她体内复制一个身体（嵌套）一样。</target>
        </trans-unit>
        <trans-unit id="54daf365a4d2e4b3c64c92d4325e4df1431034a7" translate="yes" xml:space="preserve">
          <source>It's like that two separated individuals get married and construct an united family.</source>
          <target state="translated">就像两个分居的人结婚,构建一个团结的家庭一样。</target>
        </trans-unit>
        <trans-unit id="146ce7efdd9cce77f63fb78418de3d3add79fb4e" translate="yes" xml:space="preserve">
          <source>Iterating through the multiple calls to &lt;code&gt;append&lt;/code&gt; adds to the complexity, making it equivalent to that of extend, and since extend's iteration is implemented in C, it will always be faster if you intend to append successive items from an iterable onto a list.</source>
          <target state="translated">遍历对 &lt;code&gt;append&lt;/code&gt; 的多次调用增加了复杂性，使其等效于extend的复杂性，并且由于extend的迭代是在C中实现的，因此，如果您打算将可迭代的连续项追加到列表中，它将总是更快。</target>
        </trans-unit>
        <trans-unit id="f9fabcb52c98df466f4e3fe1ec2f75d678220afb" translate="yes" xml:space="preserve">
          <source>Keep in mind that a string is an iterable, so if you extend a list with a string, you'll append each character as you iterate over the string (which may not be what you want):</source>
          <target state="translated">请记住,字符串是一个可迭代的字符串,所以如果你用字符串扩展一个列表,你会在迭代字符串时附加每个字符(这可能不是你想要的)。</target>
        </trans-unit>
        <trans-unit id="361a2e50aaf3f3647e8cc184af43e7eeadca1ac5" translate="yes" xml:space="preserve">
          <source>Method descriptor of insert(index, object). It takes two arguments, first being the index we want to insert our element and second the element itself.</source>
          <target state="translated">insert(index,object)的方法描述符。它需要两个参数,第一个是我们要插入元素的索引,第二个是元素本身。</target>
        </trans-unit>
        <trans-unit id="bac15f59ed08c4687a92f9c4fa82486f57ab95c8" translate="yes" xml:space="preserve">
          <source>Note that if you pass a list to append, it still adds one element:</source>
          <target state="translated">注意,如果你把一个列表传递给append,它仍然会增加一个元素。</target>
        </trans-unit>
        <trans-unit id="05ddc26970ee57dc0bf2d79f5074f9420c61a8ca" translate="yes" xml:space="preserve">
          <source>Ok, so let's create an experiment to see how this works out in time:</source>
          <target state="translated">好吧,那么我们来做个实验,看看这个实验的效果如何。</target>
        </trans-unit>
        <trans-unit id="7f8281c49648e4cc09e387553861d6d2d61a3bcc" translate="yes" xml:space="preserve">
          <source>Operator Overload, &lt;code&gt;__add__&lt;/code&gt; (&lt;code&gt;+&lt;/code&gt;) and &lt;code&gt;__iadd__&lt;/code&gt; (&lt;code&gt;+=&lt;/code&gt;)</source>
          <target state="translated">运算符重载， &lt;code&gt;__add__&lt;/code&gt; （ &lt;code&gt;+&lt;/code&gt; ）和 &lt;code&gt;__iadd__&lt;/code&gt; （ &lt;code&gt;+=&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="4cf01f31b71266a3cf554c4663848887f5073b79" translate="yes" xml:space="preserve">
          <source>Or, differently, from append, extend more elements in one time without nesting the list into the original one (that's the reason of the name extend)</source>
          <target state="translated">或者,换个说法,从append开始,在不将列表嵌套到原来的列表中的情况下,一次性扩展更多的元素(这就是extend这个名字的原因</target>
        </trans-unit>
        <trans-unit id="2614e0c117e0cda283c69f2d87897ba0998cc75c" translate="yes" xml:space="preserve">
          <source>Perfect answer, I just miss the timing of comparing adding only one element</source>
          <target state="translated">完美的答案,我只是怀念对比一下只加一个元素的时间。</target>
        </trans-unit>
        <trans-unit id="63c904559993935c470f516c8b549ca7f3640dbb" translate="yes" xml:space="preserve">
          <source>Performance</source>
          <target state="translated">Performance</target>
        </trans-unit>
        <trans-unit id="4d96ccf093f41ac7689bf0a4eea6b62508ca826a" translate="yes" xml:space="preserve">
          <source>Similarly &lt;code&gt;+=&lt;/code&gt; for in place behavior, but with slight differences from &lt;code&gt;append&lt;/code&gt; &amp;amp; &lt;code&gt;extend&lt;/code&gt;. One of the biggest differences of &lt;code&gt;+=&lt;/code&gt; from &lt;code&gt;append&lt;/code&gt; and &lt;code&gt;extend&lt;/code&gt; is when it is used in function scopes, see &lt;a href=&quot;https://www.toptal.com/python/top-10-mistakes-that-python-programmers-make?utm_medium=referral&amp;amp;utm_source=zeef.com&amp;amp;utm_campaign=ZEEF&quot;&gt;this blog post&lt;/a&gt;.</source>
          <target state="translated">类似地， &lt;code&gt;+=&lt;/code&gt; 用于就地行为，但与 &lt;code&gt;append&lt;/code&gt; 和 &lt;code&gt;extend&lt;/code&gt; 略有不同。 &lt;code&gt;+=&lt;/code&gt; 与 &lt;code&gt;append&lt;/code&gt; 和 &lt;code&gt;extend&lt;/code&gt; 的最大区别之一是在函数作用域中使用它时，请参阅&lt;a href=&quot;https://www.toptal.com/python/top-10-mistakes-that-python-programmers-make?utm_medium=referral&amp;amp;utm_source=zeef.com&amp;amp;utm_campaign=ZEEF&quot;&gt;此博客文章&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="c0013e5270ef3a7644248d57fedbc9d6718dfc82" translate="yes" xml:space="preserve">
          <source>So keep in mind that a list is an object. If you append another list onto a list, the first list will be a single object at the end of the list (which may not be what you want):</source>
          <target state="translated">所以请记住,一个列表是一个对象。如果你将另一个列表附加到一个列表上,那么第一个列表将在列表的末尾成为一个对象(这可能不是你想要的)。</target>
        </trans-unit>
        <trans-unit id="151e5a9949d53ec2d2147b85b6333eacf9bddd1d" translate="yes" xml:space="preserve">
          <source>So let's time them:</source>
          <target state="translated">所以,让我们为他们计时。</target>
        </trans-unit>
        <trans-unit id="81c3a31292e4d54c5e0370effd0142a0d9d6cf7b" translate="yes" xml:space="preserve">
          <source>So that you get a nested list</source>
          <target state="translated">这样你就可以得到一个嵌套的列表</target>
        </trans-unit>
        <trans-unit id="dd90b4e3c7659f6f79e165145181cc0f97396ae1" translate="yes" xml:space="preserve">
          <source>So with extend, each element of the iterable gets appended onto the list. For example:</source>
          <target state="translated">所以用extend,迭代的每个元素都会被附加到列表中。比如说</target>
        </trans-unit>
        <trans-unit id="ac7c397ffd61c8de48dc1a5da9bab2144d75dfb5" translate="yes" xml:space="preserve">
          <source>So, with more elements, you will use extend to get a list with more items.
You will use append, to append not more elements to the list, but one element that is a nested list as you can clearly see in the output of the code.</source>
          <target state="translated">所以,有了更多的元素,你将使用extend来得到一个有更多项目的列表。你将使用append,不是将更多的元素附加到列表中,而是将一个元素附加到一个嵌套的列表中,在代码的输出中可以清楚地看到。</target>
        </trans-unit>
        <trans-unit id="f9ea47d8e5cf1005d57559ab56bc43edc04878dd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;append()&lt;/code&gt; method adds a single item to the end of the list.</source>
          <target state="translated">&lt;code&gt;append()&lt;/code&gt; 方法将单个项目添加到列表的末尾。</target>
        </trans-unit>
        <trans-unit id="61ee3f8a5baedf33ca4da4b7ccca3140b1a29c8b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extend()&lt;/code&gt; method takes one argument, a list, and appends each of the items of the argument to the original list. (Lists are implemented as classes. &amp;ldquo;Creating&amp;rdquo; a list is really instantiating a class. As such, a list has methods that operate on it.)</source>
          <target state="translated">&lt;code&gt;extend()&lt;/code&gt; 方法采用一个参数，一个列表，并将该参数的每个项目附加到原始列表中。 （列表被实现为类。&amp;ldquo;创建&amp;rdquo;列表实际上是在实例化一个类。因此，列表具有对其进行操作的方法。）</target>
        </trans-unit>
        <trans-unit id="795a02157a2713c7cfc4f4c48b0c342157bc1523" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;list.append&lt;/code&gt; method appends an object to the end of the list.</source>
          <target state="translated">&lt;code&gt;list.append&lt;/code&gt; 方法将一个对象追加到列表的末尾。</target>
        </trans-unit>
        <trans-unit id="01abfd60216f64e7c90c916cff67dbe0ca07bbbb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;list.extend&lt;/code&gt; method extends a list by appending elements from an iterable:</source>
          <target state="translated">&lt;code&gt;list.extend&lt;/code&gt; 方法通过附加来自可迭代对象的元素来扩展列表：</target>
        </trans-unit>
        <trans-unit id="3c9c8129360f881d856c87a2ad6796645d1dd2c9" translate="yes" xml:space="preserve">
          <source>The default location that the new element will be added is always in the (length+1) position.</source>
          <target state="translated">新元素添加的默认位置总是在(长度+1)位置。</target>
        </trans-unit>
        <trans-unit id="b09c152f1ca5eaa27937cbc25ff4490936eaeb50" translate="yes" xml:space="preserve">
          <source>The following two snippets are semantically equivalent:</source>
          <target state="translated">下面两个片段在语义上是等价的。</target>
        </trans-unit>
        <trans-unit id="71336a7ff635447433643df7b49be7abf502a0e2" translate="yes" xml:space="preserve">
          <source>The latter may be faster as the loop is implemented in C.</source>
          <target state="translated">后者可能会更快,因为循环是用C语言实现的。</target>
        </trans-unit>
        <trans-unit id="e3920b0316f72ce847959e9c5913fced8446c0a9" translate="yes" xml:space="preserve">
          <source>The resulting list is always one-dimensional list (i.e. no nesting) and it may contain heterogeneous elements in it (e.g. characters, integers, float) as a result of applying &lt;code&gt;list(iterable)&lt;/code&gt;.</source>
          <target state="translated">结果列表始终是一维列表（即无嵌套），并且由于应用 &lt;code&gt;list(iterable)&lt;/code&gt; 的结果， 列表中可能包含异类元素（例如，字符，整数，浮点数） 。</target>
        </trans-unit>
        <trans-unit id="efd7f36e640a279458ddccd0a4eade9668135d7a" translate="yes" xml:space="preserve">
          <source>The resulting list may be nested and contain heterogeneous elements (i.e. list, string, tuple, dictionary, set, etc.)</source>
          <target state="translated">所产生的列表可以嵌套,并包含异构元素(如列表、字符串、元组、字典、集合等)。</target>
        </trans-unit>
        <trans-unit id="f243a510f0db75f86e86fc1f3299f701e8854962" translate="yes" xml:space="preserve">
          <source>This is the equivalent of &lt;code&gt;append&lt;/code&gt; and &lt;code&gt;extend&lt;/code&gt; using the &lt;code&gt;+&lt;/code&gt; operator:</source>
          <target state="translated">这等效于使用 &lt;code&gt;+&lt;/code&gt; 运算符进行 &lt;code&gt;append&lt;/code&gt; 和 &lt;code&gt;extend&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="bc8b698d49ba0c208cdadc49130422b02766e4fd" translate="yes" xml:space="preserve">
          <source>This may be slightly confusing for &lt;code&gt;str&lt;/code&gt; objects.</source>
          <target state="translated">对于 &lt;code&gt;str&lt;/code&gt; 对象，这可能会有些混乱。</target>
        </trans-unit>
        <trans-unit id="d8238dd1ed42b349b2431f2c95bc867c15dc49e9" translate="yes" xml:space="preserve">
          <source>Time Complexity</source>
          <target state="translated">时间的复杂性</target>
        </trans-unit>
        <trans-unit id="390a80d306c7219e0128230c4215f38ca3a07d81" translate="yes" xml:space="preserve">
          <source>To add a new element to the list, we can use append method in the following way.</source>
          <target state="translated">要在列表中添加一个新元素,我们可以使用append方法,方法如下。</target>
        </trans-unit>
        <trans-unit id="4620527dc6074b59e259322a7140017702d2dec5" translate="yes" xml:space="preserve">
          <source>To distinguish them intuitively</source>
          <target state="translated">为了直观地区分它们</target>
        </trans-unit>
        <trans-unit id="bbd836d048b13eca97bf87e4464d6d8894eca8e3" translate="yes" xml:space="preserve">
          <source>To join multiple lists</source>
          <target state="translated">要加入多个列表</target>
        </trans-unit>
        <trans-unit id="c94178f2c66a64dcce62c2462f6db0ac07ff6ad2" translate="yes" xml:space="preserve">
          <source>TypeError: 'Info' object is not iterable</source>
          <target state="translated">TypeError:'Info'对象不是可迭代的。</target>
        </trans-unit>
        <trans-unit id="6988ea32f7f5f7a47ec807be9eb57aa14ce492f2" translate="yes" xml:space="preserve">
          <source>We learn from this that there's nothing gained from using &lt;code&gt;extend&lt;/code&gt; when we have only &lt;em&gt;one&lt;/em&gt; element to append.</source>
          <target state="translated">我们从中了解到，只有&lt;em&gt;一个&lt;/em&gt;要追加的元素时，使用 &lt;code&gt;extend&lt;/code&gt; 没有任何好处。</target>
        </trans-unit>
        <trans-unit id="7fa46452569d7ac3ba94453ebba452bcdba6b76c" translate="yes" xml:space="preserve">
          <source>We see that &lt;code&gt;extend&lt;/code&gt; is semantically clearer, and that it can run much faster than &lt;code&gt;append&lt;/code&gt;, &lt;em&gt;when you intend to append each element in an iterable to a list.&lt;/em&gt;</source>
          <target state="translated">我们看到， &lt;code&gt;extend&lt;/code&gt; 在语义上更清晰，并且&lt;em&gt;当您打算将可迭代的每个元素附加到列表时&lt;/em&gt; ，它的运行速度比 &lt;code&gt;append&lt;/code&gt; 快得多&lt;em&gt;。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="901511367e729640df7f7dfd550d3e4ea28e2e3e" translate="yes" xml:space="preserve">
          <source>What is the difference between Python's list methods append and extend</source>
          <target state="translated">Python的列表方法append和extend有什么区别?</target>
        </trans-unit>
        <trans-unit id="c83b72408090bbcf60f573c877237a0c69315feb" translate="yes" xml:space="preserve">
          <source>What is the difference between the list methods append and extend?</source>
          <target state="translated">列表方法的附加和扩展有什么区别?</target>
        </trans-unit>
        <trans-unit id="df8960f2b3f3f051ea1245b98d99c0cedf22ad03" translate="yes" xml:space="preserve">
          <source>What's the difference between the list methods &lt;code&gt;append()&lt;/code&gt; and &lt;code&gt;extend()&lt;/code&gt;?</source>
          <target state="translated">列表方法 &lt;code&gt;append()&lt;/code&gt; 和 &lt;code&gt;extend()&lt;/code&gt; 有什么区别？</target>
        </trans-unit>
        <trans-unit id="c76829de88c35d40a9dda31676c8436549405422" translate="yes" xml:space="preserve">
          <source>Whatever the object is, whether a number, a string, another list, or something else, it gets added onto the end of &lt;code&gt;my_list&lt;/code&gt; as a single entry on the list.</source>
          <target state="translated">无论对象是什么，无论是数字，字符串，另一个列表还是其他对象，它都会作为列表上的单个条目添加到 &lt;code&gt;my_list&lt;/code&gt; 的末尾。</target>
        </trans-unit>
        <trans-unit id="e21791239d6e5e0e4bd4ffc22de27ad3b3d29e3b" translate="yes" xml:space="preserve">
          <source>While on &lt;code&gt;extend&lt;/code&gt; we get:</source>
          <target state="translated">在 &lt;code&gt;extend&lt;/code&gt; 我们得到：</target>
        </trans-unit>
        <trans-unit id="3f439ca7e2b069c465c0e6b9fa9228b8d941b585" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;append&lt;/code&gt; we get:</source>
          <target state="translated">使用 &lt;code&gt;append&lt;/code&gt; ,我们得到：</target>
        </trans-unit>
        <trans-unit id="5decd3c661d6c9ce86b6af8c78698a27eef3502d" translate="yes" xml:space="preserve">
          <source>With append you can append a single element that will extend the list:</source>
          <target state="translated">使用append,你可以附加一个元素来扩展列表。</target>
        </trans-unit>
        <trans-unit id="7ff9cd5327948e9fe20f164919d45efa0d4af4d9" translate="yes" xml:space="preserve">
          <source>With extend, instead, you pass a list as an argument, but you will obtain a list with the new element that is not nested in the old one.</source>
          <target state="translated">而使用extend,你可以传递一个列表作为参数,但你会得到一个没有嵌套在旧元素中的新元素的列表。</target>
        </trans-unit>
        <trans-unit id="be3bee787fda3098c300cbf4e102f65f8d60863f" translate="yes" xml:space="preserve">
          <source>With that knowledge, now let's understand</source>
          <target state="translated">有了这些知识,现在让我们了解一下</target>
        </trans-unit>
        <trans-unit id="b9304b221f9bd8bfd097b883fdd38d2ac508d843" translate="yes" xml:space="preserve">
          <source>You can use &quot;+&quot; for returning extend, instead of extending in place.</source>
          <target state="translated">你可以用 &quot;+&quot;来返回扩展,而不是原地扩展。</target>
        </trans-unit>
        <trans-unit id="6a83d7c862623b4dd7d237675fd23cdd987b84c1" translate="yes" xml:space="preserve">
          <source>You may use &lt;code&gt;itertools.chain.from_iterable()&lt;/code&gt; to do so. This method's output is an iterator. Its implementation is equivalent to</source>
          <target state="translated">您可以使用 &lt;code&gt;itertools.chain.from_iterable()&lt;/code&gt; 进行操作。 该方法的输出是一个迭代器。 它的实现等效于</target>
        </trans-unit>
        <trans-unit id="6408441492647951f094a8c8fae777b24d3e6fca" translate="yes" xml:space="preserve">
          <source>You may wonder what is more performant, since append can be used to achieve the same outcome as extend. The following functions do the same thing:</source>
          <target state="translated">你可能会想知道,既然append可以实现和extend一样的结果,那么哪种功能更有表现力。下面的函数都有同样的作用。</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">and</target>
        </trans-unit>
        <trans-unit id="09c139856a22440005aece734eea29cc8565ee7a" translate="yes" xml:space="preserve">
          <source>and get the wanted list.</source>
          <target state="translated">并获得通缉名单。</target>
        </trans-unit>
        <trans-unit id="0ca4e4bfa98a7ec016bfb4b4a3318b2c249a09da" translate="yes" xml:space="preserve">
          <source>append 1 element</source>
          <target state="translated">追加1个元素</target>
        </trans-unit>
        <trans-unit id="c6804bffd91f7dd325a47176d7ec90194ff30d8a" translate="yes" xml:space="preserve">
          <source>extend one element</source>
          <target state="translated">延伸一个元素</target>
        </trans-unit>
        <trans-unit id="a0c72a3ebef258a716defda6ef04845b9cc4a4aa" translate="yes" xml:space="preserve">
          <source>gives you: &lt;code&gt;[1, 2, 3, 4, 5]&lt;/code&gt;</source>
          <target state="translated">给您： &lt;code&gt;[1, 2, 3, 4, 5]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="68f0934d7434765e9dd78ddf1206d6d30f35bf0f" translate="yes" xml:space="preserve">
          <source>gives you: &lt;code&gt;[1, 2, 3, [4, 5]]&lt;/code&gt;</source>
          <target state="translated">给您： &lt;code&gt;[1, 2, 3, [4, 5]]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2bcec56171df3c6150684b60fb0f16c51e1923ed" translate="yes" xml:space="preserve">
          <source>produces:</source>
          <target state="translated">produces:</target>
        </trans-unit>
        <trans-unit id="7123605a27ed77f907c7b603922bfbaf91b71b3e" translate="yes" xml:space="preserve">
          <source>you want</source>
          <target state="translated">你要</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
