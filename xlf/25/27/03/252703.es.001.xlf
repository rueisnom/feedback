<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/252703">
    <body>
      <group id="252703">
        <trans-unit id="70b7d255c4e92893f5ed0c09ddb4a442d548b2f1" translate="yes" xml:space="preserve">
          <source>1) &lt;strong&gt;The difference between &lt;code&gt;append&lt;/code&gt; and &lt;code&gt;extend&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">1) &lt;strong&gt;La diferencia entre &lt;code&gt;append&lt;/code&gt; y &lt;code&gt;extend&lt;/code&gt; er&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ab2a695f169966e321c1b3c9b136f73501c69488" translate="yes" xml:space="preserve">
          <source>2) &lt;strong&gt;Similarity between &lt;code&gt;append&lt;/code&gt; and &lt;code&gt;extend&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">2) &lt;strong&gt;Similitud entre &lt;code&gt;append&lt;/code&gt; y &lt;code&gt;extend&lt;/code&gt; er&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1af6c3789e468fb9b97d1fdaf4f96f869bc530f0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types&quot;&gt;&lt;code&gt;append&lt;/code&gt;&lt;/a&gt;: Appends object at the end.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types&quot;&gt; &lt;code&gt;append&lt;/code&gt; &lt;/a&gt; : agrega objeto al final.</target>
        </trans-unit>
        <trans-unit id="6e6530121285944097aa883fa0e71146dc804b7e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types&quot;&gt;&lt;code&gt;extend&lt;/code&gt;&lt;/a&gt;: Extends list by appending elements from the iterable.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types&quot;&gt; &lt;code&gt;extend&lt;/code&gt; er&lt;/a&gt; : extiende la lista agregando elementos del iterable.</target>
        </trans-unit>
        <trans-unit id="56037a5482c563e6083508c3dbe4db4c5f2dd78a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;append(object)&lt;/code&gt; - Updates the list by adding an object to the list.</source>
          <target state="translated">&lt;code&gt;append(object)&lt;/code&gt; : actualiza la lista agregando un objeto a la lista.</target>
        </trans-unit>
        <trans-unit id="195da8d5db2501df35652252e9c31bafdf14d0a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;append&lt;/code&gt; &quot;extends&quot; the list (in place) by &lt;strong&gt;only one item&lt;/strong&gt;, the single object passed (as argument).</source>
          <target state="translated">&lt;code&gt;append&lt;/code&gt; &quot;extiende&quot; la lista (en su lugar) por &lt;strong&gt;un solo elemento&lt;/strong&gt; , el &amp;uacute;nico objeto pasado (como argumento).</target>
        </trans-unit>
        <trans-unit id="e201063d351f7e744726a96fd16139627216b468" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;append&lt;/code&gt; adds an element to a list, and &lt;code&gt;extend&lt;/code&gt; concatenates the first list with another list (or another iterable, not necessarily a list.)</source>
          <target state="translated">&lt;code&gt;append&lt;/code&gt; agrega un elemento a una lista, y &lt;code&gt;extend&lt;/code&gt; er concatena la primera lista con otra lista (u otro iterable, no necesariamente una lista).</target>
        </trans-unit>
        <trans-unit id="c90ce0dfa39be2acdf4de0fd00b8ad1c7c2fbdc1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;append&lt;/code&gt; adds its argument as a single element to the end of a list. The length of the list itself will increase by one.</source>
          <target state="translated">&lt;code&gt;append&lt;/code&gt; agrega su argumento como un elemento &amp;uacute;nico al final de una lista. La longitud de la lista aumentar&amp;aacute; en uno.</target>
        </trans-unit>
        <trans-unit id="1eb23d62627a5b29b6ae434c809f477b0a96b7fc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;append&lt;/code&gt; appends a single element. &lt;code&gt;extend&lt;/code&gt; appends a list of elements.</source>
          <target state="translated">&lt;code&gt;append&lt;/code&gt; agrega un solo elemento. &lt;code&gt;extend&lt;/code&gt; er agrega una lista de elementos.</target>
        </trans-unit>
        <trans-unit id="c53fb1781eecc5dbd4e45de38ba66eaf09526ada" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extend()&lt;/code&gt; can be used with an iterator argument. Here is an example. You wish to make a list out of a list of lists this way:</source>
          <target state="translated">&lt;code&gt;extend()&lt;/code&gt; se puede usar con un argumento iterador. Aqu&amp;iacute; hay un ejemplo. Desea hacer una lista de una lista de listas de esta manera:</target>
        </trans-unit>
        <trans-unit id="54c7efb153db4dcfedd27850a5bdbcc67ee8033b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extend(L)&lt;/code&gt; extends the list by appending all the items in the given list &lt;code&gt;L&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;extend(L)&lt;/code&gt; extiende la lista agregando todos los elementos en la lista dada &lt;code&gt;L&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="449428f078254b818fc7a460a447f0686fa129a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extend(list)&lt;/code&gt; - Essentially concatenates two lists.</source>
          <target state="translated">&lt;code&gt;extend(list)&lt;/code&gt; : esencialmente concatena dos listas.</target>
        </trans-unit>
        <trans-unit id="6e5475464b8884d8301120f004ad00149b84905f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extend&lt;/code&gt; &quot;extends&quot; the list (in place) by &lt;strong&gt;as many items as&lt;/strong&gt; the object passed (as argument) contains.</source>
          <target state="translated">&lt;code&gt;extend&lt;/code&gt; er &quot;extiende&quot; la lista (en su lugar) en &lt;strong&gt;tantos elementos como&lt;/strong&gt; contenga el objeto pasado (como argumento).</target>
        </trans-unit>
        <trans-unit id="3fc2f725a3d1f010fefd641d1892b1ee1f91e6fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extend&lt;/code&gt; iterates over its argument adding each element to the list, extending the list. The length of the list will increase by however many elements were in the iterable argument.</source>
          <target state="translated">&lt;code&gt;extend&lt;/code&gt; er itera sobre su argumento agregando cada elemento a la lista, extendiendo la lista. La longitud de la lista aumentar&amp;aacute; en la cantidad de elementos que haya en el argumento iterable.</target>
        </trans-unit>
        <trans-unit id="fe2546e6a922cf581b6922fa14fd645b38325c8c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;my_list + another_list&lt;/code&gt; creates a third list in memory, so you can return the result of it, but it requires that the second iterable be a list.</source>
          <target state="translated">&lt;code&gt;my_list + another_list&lt;/code&gt; crea una tercera lista en la memoria, por lo que puede devolver el resultado, pero requiere que el segundo iterable sea una lista.</target>
        </trans-unit>
        <trans-unit id="a0282174700fd8ac6b62a87710c430aaaba8b4d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;my_list += another_list&lt;/code&gt; modifies the list in-place (it &lt;em&gt;is&lt;/em&gt; the in-place operator, and lists are mutable objects, as we've seen) so it does not create a new list. It also works like extend, in that the second iterable can be any kind of iterable.</source>
          <target state="translated">&lt;code&gt;my_list += another_list&lt;/code&gt; modifica la lista en el lugar ( &lt;em&gt;es&lt;/em&gt; el operador en el lugar, y las listas son objetos mutables, como hemos visto) para que no cree una nueva lista. Tambi&amp;eacute;n funciona como extender, ya que el segundo iterable puede ser cualquier tipo de iterable.</target>
        </trans-unit>
        <trans-unit id="f7578f20b77af40f225f298cbcb73be6627161b6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;append&lt;/code&gt;&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;append&lt;/code&gt;&lt;/strong&gt;:</target>
        </trans-unit>
        <trans-unit id="0127262cede2cab585110eb2c03be6569a2c12e2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;extend&lt;/code&gt;&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;extend&lt;/code&gt;&lt;/strong&gt;:</target>
        </trans-unit>
        <trans-unit id="8a2ff2e2c62707adf50c6148d4505425791baf31" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;append()&lt;/em&gt;&lt;/strong&gt;: It is basically used in Python to add one element.</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;append ()&lt;/em&gt;&lt;/strong&gt; : se usa b&amp;aacute;sicamente en Python para agregar un elemento.</target>
        </trans-unit>
        <trans-unit id="14eb46927e8d89134e522d4f00499b1d34001a08" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;extend()&lt;/em&gt;&lt;/strong&gt;: Where extend(), is used to merge two lists or insert multiple elements in one list.</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;extend ()&lt;/em&gt;&lt;/strong&gt; : Donde extend (), se usa para fusionar dos listas o insertar m&amp;uacute;ltiples elementos en una lista.</target>
        </trans-unit>
        <trans-unit id="bce3f4a409dc0c67054a7e806ad3eecf69f742f8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Example&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="edec114d7838eaaa26c315e52fbbd3f12398b693" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;append&lt;/strong&gt;: add (something) to the end of a written document.</source>
          <target state="translated">&lt;strong&gt;agregar&lt;/strong&gt; : agregar (algo) al final de un documento escrito.</target>
        </trans-unit>
        <trans-unit id="b1e9d53522b23940ace67598f8e304257e1f3352" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;extend&lt;/strong&gt;: make larger. Enlarge or expand</source>
          <target state="translated">&lt;strong&gt;extender&lt;/strong&gt; : hacer m&amp;aacute;s grande. Agrandar o expandir</target>
        </trans-unit>
        <trans-unit id="f12a8425b5f8b5d83766f116609e798cf3d2736a" translate="yes" xml:space="preserve">
          <source>A commenter said:</source>
          <target state="translated">Un comentarista dijo:</target>
        </trans-unit>
        <trans-unit id="e9861fac696e41c8635a5c24911b57eada4db3c3" translate="yes" xml:space="preserve">
          <source>Accepts any &lt;em&gt;iterable&lt;/em&gt; as its argument and makes the list &lt;em&gt;larger&lt;/em&gt;.</source>
          <target state="translated">Acepta cualquier &lt;em&gt;iterable&lt;/em&gt; como argumento y hace que la lista sea &lt;em&gt;m&amp;aacute;s grande&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="7b129563b97b402d8049cf753bbc3e20261ad750" translate="yes" xml:space="preserve">
          <source>Adding more elements... with different results</source>
          <target state="translated">Añadiendo más elementos...con diferentes resultados</target>
        </trans-unit>
        <trans-unit id="4be32550b452f40fa51e2ab0d959e581fc012349" translate="yes" xml:space="preserve">
          <source>Adding one element with both methods</source>
          <target state="translated">Añadiendo un elemento con ambos métodos</target>
        </trans-unit>
        <trans-unit id="3bd26fd8398207d1b43767d782ed37724ff4ee89" translate="yes" xml:space="preserve">
          <source>Addressing a comment on timings</source>
          <target state="translated">Dirigiéndose a un comentario sobre los tiempos</target>
        </trans-unit>
        <trans-unit id="8985d7314d0e00979e7074fed170525d3b04f639" translate="yes" xml:space="preserve">
          <source>Also, these timings are not that important. I am just showing them to make the point that, in Python, doing the semantically correct thing is doing things the &lt;em&gt;Right&lt;/em&gt; Way&amp;trade;.</source>
          <target state="translated">Adem&amp;aacute;s, estos tiempos no son tan importantes. Solo les muestro para se&amp;ntilde;alar que, en Python, hacer lo sem&amp;aacute;nticamente correcto es hacer las cosas de la manera &lt;em&gt;correcta&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="123aea4459cfda9e1014bb1516b63b4575238e6c" translate="yes" xml:space="preserve">
          <source>An English dictionary defines the words &lt;code&gt;append&lt;/code&gt; and &lt;code&gt;extend&lt;/code&gt; as:</source>
          <target state="translated">Un diccionario de ingl&amp;eacute;s define las palabras &lt;code&gt;append&lt;/code&gt; y &lt;code&gt;extend&lt;/code&gt; er como:</target>
        </trans-unit>
        <trans-unit id="c82c64b1e995a03f9f27069b25caf973b1cd888a" translate="yes" xml:space="preserve">
          <source>An interesting point that has been hinted, but not explained, is that extend is faster than append. For any loop that has append inside should be considered to be replaced by list.extend(processed_elements).</source>
          <target state="translated">Un punto interesante que se ha insinuado,pero no explicado,es que extender es más rápido que añadir.Para cualquier bucle que tenga append dentro debe considerarse que se sustituye por list.extend(processed_elements).</target>
        </trans-unit>
        <trans-unit id="018aae27d8c30554c8de46329857104e9cfa62e5" translate="yes" xml:space="preserve">
          <source>And we see that going out of our way to create an iterable just to use extend is a (minor) waste of time:</source>
          <target state="translated">Y vemos que salirse de nuestro camino para crear una extensión iterable sólo para usar es una (pequeña)pérdida de tiempo:</target>
        </trans-unit>
        <trans-unit id="d6b2d924cdf87d59ab32e293efde3bb5f80d5ede" translate="yes" xml:space="preserve">
          <source>Append adds the entire data at once. The whole data will be added to the newly created index. On the other hand, &lt;code&gt;extend&lt;/code&gt;, as it name suggests, extends the current array.</source>
          <target state="translated">Anexar agrega todos los datos a la vez. Todos los datos se agregar&amp;aacute;n al &amp;iacute;ndice reci&amp;eacute;n creado. Por otro lado, &lt;code&gt;extend&lt;/code&gt; er , como su nombre lo indica, extiende la matriz actual.</target>
        </trans-unit>
        <trans-unit id="218d2be77aa21f8e1fa80975e1d52bafb2e198fc" translate="yes" xml:space="preserve">
          <source>Append and extend are one of the extensibility mechanisms in python.</source>
          <target state="translated">Apéndase y extiéndase es uno de los mecanismos de extensibilidad en la pitón.</target>
        </trans-unit>
        <trans-unit id="82310d2db83e0bffcdb2cb1046a402703b91569f" translate="yes" xml:space="preserve">
          <source>Append has &lt;a href=&quot;https://wiki.python.org/moin/TimeComplexity&quot;&gt;constant time complexity&lt;/a&gt;, O(1).</source>
          <target state="translated">Append tiene &lt;a href=&quot;https://wiki.python.org/moin/TimeComplexity&quot;&gt;una complejidad de tiempo constante&lt;/a&gt; , O (1).</target>
        </trans-unit>
        <trans-unit id="a434fa8cd6c552e1548e22e237aff0d10a359668" translate="yes" xml:space="preserve">
          <source>Append vs Extend</source>
          <target state="translated">Apéndices vs.Extensiones</target>
        </trans-unit>
        <trans-unit id="1a9df5d80165788d628ca7925476c3964139df7b" translate="yes" xml:space="preserve">
          <source>Append: Adds an element to the end of the list.</source>
          <target state="translated">Apéndices:Añade un elemento al final de la lista.</target>
        </trans-unit>
        <trans-unit id="44cccc038cbd4611ed1a5bc84803bd64f4954c09" translate="yes" xml:space="preserve">
          <source>Appends &lt;em&gt;any Python object as-is&lt;/em&gt; to the end of the list (i.e. as a
the last element in the list).</source>
          <target state="translated">Agrega &lt;em&gt;cualquier objeto Python tal como est&amp;aacute;&lt;/em&gt; al final de la lista (es decir, como el &amp;uacute;ltimo elemento de la lista).</target>
        </trans-unit>
        <trans-unit id="94244f6d45b4ab70f0612edd71cd1f68ea4e50c7" translate="yes" xml:space="preserve">
          <source>As a result, both returns &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">Como resultado, ambos devuelve &lt;code&gt;None&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="318d03febd1ee6fd92ef15470179479c6ff55bf1" translate="yes" xml:space="preserve">
          <source>Back to our example, we can do</source>
          <target state="translated">Volviendo a nuestro ejemplo,podemos hacer</target>
        </trans-unit>
        <trans-unit id="4e48bd2e9bf5522034e523ecfa6f9cbb0633d97d" translate="yes" xml:space="preserve">
          <source>Bear in mind that apprending new elements might result in the realloaction of the whole list to a better location in memory. If this is done several times because we are appending 1 element at a time, overall performance suffers. In this sense, list.extend is analogous to &quot;&quot;.join(stringlist).</source>
          <target state="translated">Tengan en cuenta que el aprendizaje de nuevos elementos podría resultar en la realineación de toda la lista a una mejor ubicación en la memoria.Si esto se hace varias veces porque estamos agregando un elemento a la vez,el rendimiento general sufre.En este sentido,list.extend es análogo a &quot;&quot;.join(stringlist).</target>
        </trans-unit>
        <trans-unit id="e97f9942bc15b33736d10eae0f865c61a5234097" translate="yes" xml:space="preserve">
          <source>Besides I make an exhaustive cheatsheet of all list's methods for your reference.</source>
          <target state="translated">Además hago una exhaustiva hoja de trucos de todos los métodos de la lista para su referencia.</target>
        </trans-unit>
        <trans-unit id="8af004100ad3dfe672ee2f2df74580a4205ca4c9" translate="yes" xml:space="preserve">
          <source>Both &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;+=&lt;/code&gt; operators are defined for &lt;code&gt;list&lt;/code&gt;. They are semantically similar to extend.</source>
          <target state="translated">Los operadores &lt;code&gt;+&lt;/code&gt; y &lt;code&gt;+=&lt;/code&gt; est&amp;aacute;n definidos para la &lt;code&gt;list&lt;/code&gt; a . Son sem&amp;aacute;nticamente similares a extender.</target>
        </trans-unit>
        <trans-unit id="8cea93e5d27858e13b964a58dc49cc9784afe589" translate="yes" xml:space="preserve">
          <source>Both modify the list &lt;em&gt;in-place&lt;/em&gt;.</source>
          <target state="translated">Ambos modifican la lista &lt;em&gt;en el lugar&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="5c15aa9e32664b33f729fab83f0a48a3f35608a0" translate="yes" xml:space="preserve">
          <source>Both take exactly one argument.</source>
          <target state="translated">Ambos toman exactamente un argumento.</target>
        </trans-unit>
        <trans-unit id="1f2765f828ce01b38fe87d53bc54780f4b1e79fe" translate="yes" xml:space="preserve">
          <source>But if you use the &lt;code&gt;append&lt;/code&gt; method, the result is OK. Because every time using the &lt;code&gt;extend&lt;/code&gt; method, it will always treat it as a list or any other collection type, iterate it, and place it after the previous list. A specific object can not be iterated, obviously.</source>
          <target state="translated">Pero si usa el m&amp;eacute;todo &lt;code&gt;append&lt;/code&gt; , el resultado es correcto. Porque cada vez que use el m&amp;eacute;todo &lt;code&gt;extend&lt;/code&gt; ido , siempre lo tratar&amp;aacute; como una lista o cualquier otro tipo de colecci&amp;oacute;n, lo iterar&amp;aacute; y lo colocar&amp;aacute; despu&amp;eacute;s de la lista anterior. Un objeto espec&amp;iacute;fico no puede ser iterado, obviamente.</target>
        </trans-unit>
        <trans-unit id="e39262defe80a83fac1b793497417432c8b1a879" translate="yes" xml:space="preserve">
          <source>Conclusion</source>
          <target state="translated">Conclusion</target>
        </trans-unit>
        <trans-unit id="da2da7e2bc2dc9f054a633624f329b7493a204c0" translate="yes" xml:space="preserve">
          <source>Do the semantically correct thing. If you want to append all elements in an iterable, use &lt;code&gt;extend&lt;/code&gt;. If you're just adding one element, use &lt;code&gt;append&lt;/code&gt;.</source>
          <target state="translated">Haz lo sem&amp;aacute;nticamente correcto. Si desea agregar todos los elementos en un iterable, use &lt;code&gt;extend&lt;/code&gt; er . Si solo est&amp;aacute; agregando un elemento, use &lt;code&gt;append&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="10f18a826002b58a77378025a10ce911fa701a08" translate="yes" xml:space="preserve">
          <source>Don't get confused - &lt;code&gt;my_list = my_list + another_list&lt;/code&gt; is not equivalent to &lt;code&gt;+=&lt;/code&gt; - it gives you a brand new list assigned to my_list.</source>
          <target state="translated">No se confunda - &lt;code&gt;my_list = my_list + another_list&lt;/code&gt; no es equivalente a &lt;code&gt;+=&lt;/code&gt; - le da una nueva lista asignada a my_list.</target>
        </trans-unit>
        <trans-unit id="8ef2e1210c47909b18d1b60b9c30a0116c39a246" translate="yes" xml:space="preserve">
          <source>Example 1:</source>
          <target state="translated">Ejemplo 1:</target>
        </trans-unit>
        <trans-unit id="e11895e8b0e4fd9700bfd1eef21691b78b345f1b" translate="yes" xml:space="preserve">
          <source>Example 2:</source>
          <target state="translated">Ejemplo 2:</target>
        </trans-unit>
        <trans-unit id="a3691b50433e8309ce0693bf2d494a25e87168a9" translate="yes" xml:space="preserve">
          <source>Extend has time complexity, O(k).</source>
          <target state="translated">La extensión tiene una complejidad temporal,O(k).</target>
        </trans-unit>
        <trans-unit id="5fb1e2f656c5adb41e1c4ee68a9808fe15fb63cd" translate="yes" xml:space="preserve">
          <source>Extend: This is very useful when we want to join two or more lists into a single list. Without extend, if we want to join two lists, the resulting object will contain a list of lists.</source>
          <target state="translated">Extiende:Esto es muy útil cuando queremos unir dos o más listas en una sola.Sin extender,si queremos unir dos listas,el objeto resultante contendrá una lista de listas.</target>
        </trans-unit>
        <trans-unit id="dc3c09a115b4ee611eb7505826a4fa0c2a8495d8" translate="yes" xml:space="preserve">
          <source>For example</source>
          <target state="translated">Por ejemplo</target>
        </trans-unit>
        <trans-unit id="3f66052a107eaf9bae7cad0f61fb462f47ec2c47" translate="yes" xml:space="preserve">
          <source>From</source>
          <target state="translated">From</target>
        </trans-unit>
        <trans-unit id="b1e759b98f1f0ccc898bd690e8dc14b7a27acf7d" translate="yes" xml:space="preserve">
          <source>From &lt;em&gt;&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/1430224150&quot;&gt;Dive Into Python&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">De &lt;em&gt;&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/1430224150&quot;&gt;sumergirse en Python&lt;/a&gt;&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="baf23460f399b5c16f97e8db76403f770b3dbb1f" translate="yes" xml:space="preserve">
          <source>Here is how equivalently &lt;code&gt;extend()&lt;/code&gt; can be used with an iterator argument:</source>
          <target state="translated">Aqu&amp;iacute; se explica c&amp;oacute;mo se puede usar &lt;code&gt;extend()&lt;/code&gt; manera equivalente con un argumento iterador:</target>
        </trans-unit>
        <trans-unit id="0e9d8a643011fd67f28b979e20dda79318cc1cdf" translate="yes" xml:space="preserve">
          <source>I hope I can make a useful supplement to this question. If your list stores a specific type object, for example &lt;code&gt;Info&lt;/code&gt;, here is a situation that &lt;code&gt;extend&lt;/code&gt; method is not suitable: In a &lt;code&gt;for&lt;/code&gt; loop and and generating an &lt;code&gt;Info&lt;/code&gt; object every time and using &lt;code&gt;extend&lt;/code&gt; to store it into your list, it will fail. The exception is like below:</source>
          <target state="translated">Espero poder hacer un complemento &amp;uacute;til a esta pregunta. Si su lista almacena un objeto de tipo espec&amp;iacute;fico, por ejemplo, &lt;code&gt;Info&lt;/code&gt; rmaci&amp;oacute;n , aqu&amp;iacute; hay una situaci&amp;oacute;n en la que &lt;code&gt;extend&lt;/code&gt; m&amp;eacute;todo de extensi&amp;oacute;n no es adecuado: en un ciclo &lt;code&gt;for&lt;/code&gt; y generando un objeto de &lt;code&gt;Info&lt;/code&gt; rmaci&amp;oacute;n cada vez y usando &lt;code&gt;extend&lt;/code&gt; er para almacenarlo en su lista, fallar&amp;aacute;. La excepci&amp;oacute;n es como a continuaci&amp;oacute;n:</target>
        </trans-unit>
        <trans-unit id="657934d5480ac30f96a36630d4a659770fc01e45" translate="yes" xml:space="preserve">
          <source>If we try to access the element at pos 2, we get a list ([3]), instead of the element. To join two lists, we'll have to use append.</source>
          <target state="translated">Si intentamos acceder al elemento en la posición 2,obtenemos una lista ([3]),en lugar del elemento.Para unir dos listas,tendremos que usar append.</target>
        </trans-unit>
        <trans-unit id="e75fb7783804105a9dade83d72df5de83534afcf" translate="yes" xml:space="preserve">
          <source>If you only have a single element (not in an iterable) to add to the list, use &lt;code&gt;append&lt;/code&gt;.</source>
          <target state="translated">Si solo tiene un elemento &amp;uacute;nico (no en un iterable) para agregar a la lista, use &lt;code&gt;append&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9ce2025f5a6f0b96852bc47624b0b009478fe59b" translate="yes" xml:space="preserve">
          <source>If you pass a list of strings as argument:
&lt;code&gt;append&lt;/code&gt; will still add a single 'list' item at the end and
&lt;code&gt;extend&lt;/code&gt; will add as many 'list' items as the length of the passed list.</source>
          <target state="translated">Si pasa una lista de cadenas como argumento: &lt;code&gt;append&lt;/code&gt; todav&amp;iacute;a agregar&amp;aacute; un solo elemento de 'lista' al final y &lt;code&gt;extend&lt;/code&gt; er agregar&amp;aacute; tantos elementos de 'lista' como la longitud de la lista pasada.</target>
        </trans-unit>
        <trans-unit id="6c27f820634ecd34d8c93d2069f58787190aa47c" translate="yes" xml:space="preserve">
          <source>If you pass a string as argument:
&lt;code&gt;append&lt;/code&gt; will add a single string item at the end but
&lt;code&gt;extend&lt;/code&gt; will add as many &quot;single&quot; 'str' items as the length of that string.</source>
          <target state="translated">Si pasa una cadena como argumento: &lt;code&gt;append&lt;/code&gt; agregar&amp;aacute; un solo elemento de cadena al final, pero &lt;code&gt;extend&lt;/code&gt; er agregar&amp;aacute; tantos elementos de &quot;cadena&quot; &amp;uacute;nica como la longitud de esa cadena.</target>
        </trans-unit>
        <trans-unit id="b78f53d6305e0bd43669afa71c43028bbf7c4ec8" translate="yes" xml:space="preserve">
          <source>If you use append for more than one element, you have to pass a list of elements as arguments and you will obtain a NESTED list!</source>
          <target state="translated">Si usas append para más de un elemento,tienes que pasar una lista de elementos como argumentos y obtendrás una lista NESTADA!</target>
        </trans-unit>
        <trans-unit id="2f14134054d2da414c86e62b237399f7524fad93" translate="yes" xml:space="preserve">
          <source>If you want to extend more than one element you should use extend, because you can only append one elment or one list of element:</source>
          <target state="translated">Si se quiere extender más de un elemento se debe usar extender,porque sólo se puede añadir un elemento o una lista de elementos:</target>
        </trans-unit>
        <trans-unit id="b799bef3e6eaf61deea4678f3fd5902b41abc370" translate="yes" xml:space="preserve">
          <source>Insert: The insert method was used to overcome the limitations of append. With insert, we can explicitly define the exact position we want our new element to be inserted at.</source>
          <target state="translated">Insertar:El método de inserción se utilizó para superar las limitaciones del apéndice.Con la inserción,podemos definir explícitamente la posición exacta en la que queremos que se inserte nuestro nuevo elemento.</target>
        </trans-unit>
        <trans-unit id="61d800ca63db9c80878c85762026d4ba3a71f9a5" translate="yes" xml:space="preserve">
          <source>Instead with extend, you can extend a single element like this</source>
          <target state="translated">En lugar de eso,con extender,puedes extender un solo elemento como este</target>
        </trans-unit>
        <trans-unit id="5ebf0e147c0278d4d1f190960458d3838c5a3a48" translate="yes" xml:space="preserve">
          <source>It's conceivable that you might test timings on two comparable operations and get an ambiguous or inverse result. Just focus on doing the semantically correct thing.</source>
          <target state="translated">Es concebible que puedas probar los tiempos en dos operaciones comparables y obtener un resultado ambiguo o inverso.Sólo concéntrate en hacer lo semánticamente correcto.</target>
        </trans-unit>
        <trans-unit id="8d6abae937814c8446b46b317e8c03f82a94468a" translate="yes" xml:space="preserve">
          <source>It's like &lt;code&gt;l1&lt;/code&gt; reproduce a body inside her body(nested).</source>
          <target state="translated">Es como si &lt;code&gt;l1&lt;/code&gt; reprodujera un cuerpo dentro de su cuerpo (anidado).</target>
        </trans-unit>
        <trans-unit id="54daf365a4d2e4b3c64c92d4325e4df1431034a7" translate="yes" xml:space="preserve">
          <source>It's like that two separated individuals get married and construct an united family.</source>
          <target state="translated">Es como si dos individuos separados se casaran y construyeran una familia unida.</target>
        </trans-unit>
        <trans-unit id="146ce7efdd9cce77f63fb78418de3d3add79fb4e" translate="yes" xml:space="preserve">
          <source>Iterating through the multiple calls to &lt;code&gt;append&lt;/code&gt; adds to the complexity, making it equivalent to that of extend, and since extend's iteration is implemented in C, it will always be faster if you intend to append successive items from an iterable onto a list.</source>
          <target state="translated">La iteraci&amp;oacute;n a trav&amp;eacute;s de las m&amp;uacute;ltiples llamadas para &lt;code&gt;append&lt;/code&gt; suma a la complejidad, haci&amp;eacute;ndola equivalente a la de extender, y dado que la iteraci&amp;oacute;n de extender se implementa en C, siempre ser&amp;aacute; m&amp;aacute;s r&amp;aacute;pido si tiene la intenci&amp;oacute;n de agregar elementos sucesivos de un iterable a una lista.</target>
        </trans-unit>
        <trans-unit id="f9fabcb52c98df466f4e3fe1ec2f75d678220afb" translate="yes" xml:space="preserve">
          <source>Keep in mind that a string is an iterable, so if you extend a list with a string, you'll append each character as you iterate over the string (which may not be what you want):</source>
          <target state="translated">Ten en cuenta que una cadena es un iterable,por lo que si extiendes una lista con una cadena,añadirás cada carácter a medida que iteres sobre la cadena (que puede no ser lo que quieres):</target>
        </trans-unit>
        <trans-unit id="361a2e50aaf3f3647e8cc184af43e7eeadca1ac5" translate="yes" xml:space="preserve">
          <source>Method descriptor of insert(index, object). It takes two arguments, first being the index we want to insert our element and second the element itself.</source>
          <target state="translated">Descriptor del método de inserción (índice,objeto).Se necesitan dos argumentos,el primero es el índice que queremos insertar nuestro elemento y el segundo el elemento mismo.</target>
        </trans-unit>
        <trans-unit id="bac15f59ed08c4687a92f9c4fa82486f57ab95c8" translate="yes" xml:space="preserve">
          <source>Note that if you pass a list to append, it still adds one element:</source>
          <target state="translated">Ten en cuenta que si pasas una lista para añadirla,sigue añadiendo un elemento:</target>
        </trans-unit>
        <trans-unit id="05ddc26970ee57dc0bf2d79f5074f9420c61a8ca" translate="yes" xml:space="preserve">
          <source>Ok, so let's create an experiment to see how this works out in time:</source>
          <target state="translated">Bien,vamos a crear un experimento para ver cómo funciona esto a tiempo:</target>
        </trans-unit>
        <trans-unit id="7f8281c49648e4cc09e387553861d6d2d61a3bcc" translate="yes" xml:space="preserve">
          <source>Operator Overload, &lt;code&gt;__add__&lt;/code&gt; (&lt;code&gt;+&lt;/code&gt;) and &lt;code&gt;__iadd__&lt;/code&gt; (&lt;code&gt;+=&lt;/code&gt;)</source>
          <target state="translated">Sobrecarga del operador, &lt;code&gt;__add__&lt;/code&gt; ( &lt;code&gt;+&lt;/code&gt; ) y &lt;code&gt;__iadd__&lt;/code&gt; ( &lt;code&gt;+=&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="4cf01f31b71266a3cf554c4663848887f5073b79" translate="yes" xml:space="preserve">
          <source>Or, differently, from append, extend more elements in one time without nesting the list into the original one (that's the reason of the name extend)</source>
          <target state="translated">O,de manera diferente,de apéndice,extender más elementos en una sola vez sin anidar la lista en la original (esa es la razón del nombre extender)</target>
        </trans-unit>
        <trans-unit id="2614e0c117e0cda283c69f2d87897ba0998cc75c" translate="yes" xml:space="preserve">
          <source>Perfect answer, I just miss the timing of comparing adding only one element</source>
          <target state="translated">La respuesta perfecta,es que extraño el momento de comparar la adición de un solo elemento...</target>
        </trans-unit>
        <trans-unit id="63c904559993935c470f516c8b549ca7f3640dbb" translate="yes" xml:space="preserve">
          <source>Performance</source>
          <target state="translated">Performance</target>
        </trans-unit>
        <trans-unit id="4d96ccf093f41ac7689bf0a4eea6b62508ca826a" translate="yes" xml:space="preserve">
          <source>Similarly &lt;code&gt;+=&lt;/code&gt; for in place behavior, but with slight differences from &lt;code&gt;append&lt;/code&gt; &amp;amp; &lt;code&gt;extend&lt;/code&gt;. One of the biggest differences of &lt;code&gt;+=&lt;/code&gt; from &lt;code&gt;append&lt;/code&gt; and &lt;code&gt;extend&lt;/code&gt; is when it is used in function scopes, see &lt;a href=&quot;https://www.toptal.com/python/top-10-mistakes-that-python-programmers-make?utm_medium=referral&amp;amp;utm_source=zeef.com&amp;amp;utm_campaign=ZEEF&quot;&gt;this blog post&lt;/a&gt;.</source>
          <target state="translated">Del mismo modo, &lt;code&gt;+=&lt;/code&gt; para el comportamiento en el lugar, pero con ligeras diferencias con respecto a &lt;code&gt;append&lt;/code&gt; y &lt;code&gt;extend&lt;/code&gt; er . Una de las mayores diferencias de &lt;code&gt;+=&lt;/code&gt; de &lt;code&gt;append&lt;/code&gt; y &lt;code&gt;extend&lt;/code&gt; er es cuando se usa en &amp;aacute;mbitos de funciones, consulte &lt;a href=&quot;https://www.toptal.com/python/top-10-mistakes-that-python-programmers-make?utm_medium=referral&amp;amp;utm_source=zeef.com&amp;amp;utm_campaign=ZEEF&quot;&gt;esta publicaci&amp;oacute;n de blog&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c0013e5270ef3a7644248d57fedbc9d6718dfc82" translate="yes" xml:space="preserve">
          <source>So keep in mind that a list is an object. If you append another list onto a list, the first list will be a single object at the end of the list (which may not be what you want):</source>
          <target state="translated">Así que ten en cuenta que una lista es un objeto.Si agregas otra lista a una lista,la primera lista será un solo objeto al final de la lista (que puede no ser lo que quieres):</target>
        </trans-unit>
        <trans-unit id="151e5a9949d53ec2d2147b85b6333eacf9bddd1d" translate="yes" xml:space="preserve">
          <source>So let's time them:</source>
          <target state="translated">Así que cronometrémoslos:</target>
        </trans-unit>
        <trans-unit id="81c3a31292e4d54c5e0370effd0142a0d9d6cf7b" translate="yes" xml:space="preserve">
          <source>So that you get a nested list</source>
          <target state="translated">Para que consigas una lista anidada</target>
        </trans-unit>
        <trans-unit id="dd90b4e3c7659f6f79e165145181cc0f97396ae1" translate="yes" xml:space="preserve">
          <source>So with extend, each element of the iterable gets appended onto the list. For example:</source>
          <target state="translated">Así que con la extensión,cada elemento de lo iterable se añade a la lista.Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="ac7c397ffd61c8de48dc1a5da9bab2144d75dfb5" translate="yes" xml:space="preserve">
          <source>So, with more elements, you will use extend to get a list with more items.
You will use append, to append not more elements to the list, but one element that is a nested list as you can clearly see in the output of the code.</source>
          <target state="translated">Así que,con más elementos,usarás extender para obtener una lista con más elementos.Usarás append,para añadir no más elementos a la lista,sino un elemento que es una lista anidada como puedes ver claramente en la salida del código.</target>
        </trans-unit>
        <trans-unit id="f9ea47d8e5cf1005d57559ab56bc43edc04878dd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;append()&lt;/code&gt; method adds a single item to the end of the list.</source>
          <target state="translated">El m&amp;eacute;todo &lt;code&gt;append()&lt;/code&gt; agrega un &amp;uacute;nico elemento al final de la lista.</target>
        </trans-unit>
        <trans-unit id="61ee3f8a5baedf33ca4da4b7ccca3140b1a29c8b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extend()&lt;/code&gt; method takes one argument, a list, and appends each of the items of the argument to the original list. (Lists are implemented as classes. &amp;ldquo;Creating&amp;rdquo; a list is really instantiating a class. As such, a list has methods that operate on it.)</source>
          <target state="translated">El m&amp;eacute;todo &lt;code&gt;extend()&lt;/code&gt; toma un argumento, una lista, y agrega cada uno de los elementos del argumento a la lista original. (Las listas se implementan como clases. &quot;Crear&quot; una lista es realmente crear una instancia de una clase. Como tal, una lista tiene m&amp;eacute;todos que funcionan en ella).</target>
        </trans-unit>
        <trans-unit id="795a02157a2713c7cfc4f4c48b0c342157bc1523" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;list.append&lt;/code&gt; method appends an object to the end of the list.</source>
          <target state="translated">El m&amp;eacute;todo &lt;code&gt;list.append&lt;/code&gt; agrega un objeto al final de la lista.</target>
        </trans-unit>
        <trans-unit id="01abfd60216f64e7c90c916cff67dbe0ca07bbbb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;list.extend&lt;/code&gt; method extends a list by appending elements from an iterable:</source>
          <target state="translated">El m&amp;eacute;todo &lt;code&gt;list.extend&lt;/code&gt; extiende una lista agregando elementos de un iterable:</target>
        </trans-unit>
        <trans-unit id="3c9c8129360f881d856c87a2ad6796645d1dd2c9" translate="yes" xml:space="preserve">
          <source>The default location that the new element will be added is always in the (length+1) position.</source>
          <target state="translated">La ubicación por defecto en la que se añadirá el nuevo elemento es siempre en la posición (longitud+1).</target>
        </trans-unit>
        <trans-unit id="b09c152f1ca5eaa27937cbc25ff4490936eaeb50" translate="yes" xml:space="preserve">
          <source>The following two snippets are semantically equivalent:</source>
          <target state="translated">Los siguientes dos fragmentos son semánticamente equivalentes:</target>
        </trans-unit>
        <trans-unit id="71336a7ff635447433643df7b49be7abf502a0e2" translate="yes" xml:space="preserve">
          <source>The latter may be faster as the loop is implemented in C.</source>
          <target state="translated">Este último puede ser más rápido ya que el bucle se implementa en C.</target>
        </trans-unit>
        <trans-unit id="e3920b0316f72ce847959e9c5913fced8446c0a9" translate="yes" xml:space="preserve">
          <source>The resulting list is always one-dimensional list (i.e. no nesting) and it may contain heterogeneous elements in it (e.g. characters, integers, float) as a result of applying &lt;code&gt;list(iterable)&lt;/code&gt;.</source>
          <target state="translated">La lista resultante es siempre una lista unidimensional (es decir, sin anidamiento) y puede contener elementos heterog&amp;eacute;neos (por ejemplo, caracteres, enteros, flotantes) como resultado de aplicar la &lt;code&gt;list(iterable)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="efd7f36e640a279458ddccd0a4eade9668135d7a" translate="yes" xml:space="preserve">
          <source>The resulting list may be nested and contain heterogeneous elements (i.e. list, string, tuple, dictionary, set, etc.)</source>
          <target state="translated">La lista resultante puede estar anidada y contener elementos heterogéneos (es decir,lista,cadena,tupla,diccionario,conjunto,etc.)</target>
        </trans-unit>
        <trans-unit id="f243a510f0db75f86e86fc1f3299f701e8854962" translate="yes" xml:space="preserve">
          <source>This is the equivalent of &lt;code&gt;append&lt;/code&gt; and &lt;code&gt;extend&lt;/code&gt; using the &lt;code&gt;+&lt;/code&gt; operator:</source>
          <target state="translated">Este es el equivalente de &lt;code&gt;append&lt;/code&gt; y &lt;code&gt;extend&lt;/code&gt; er usando el operador &lt;code&gt;+&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="bc8b698d49ba0c208cdadc49130422b02766e4fd" translate="yes" xml:space="preserve">
          <source>This may be slightly confusing for &lt;code&gt;str&lt;/code&gt; objects.</source>
          <target state="translated">Esto puede ser un poco confuso para los objetos &lt;code&gt;str&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d8238dd1ed42b349b2431f2c95bc867c15dc49e9" translate="yes" xml:space="preserve">
          <source>Time Complexity</source>
          <target state="translated">La complejidad del tiempo</target>
        </trans-unit>
        <trans-unit id="390a80d306c7219e0128230c4215f38ca3a07d81" translate="yes" xml:space="preserve">
          <source>To add a new element to the list, we can use append method in the following way.</source>
          <target state="translated">Para añadir un nuevo elemento a la lista,podemos usar el método append de la siguiente manera.</target>
        </trans-unit>
        <trans-unit id="4620527dc6074b59e259322a7140017702d2dec5" translate="yes" xml:space="preserve">
          <source>To distinguish them intuitively</source>
          <target state="translated">Para distinguirlos intuitivamente</target>
        </trans-unit>
        <trans-unit id="bbd836d048b13eca97bf87e4464d6d8894eca8e3" translate="yes" xml:space="preserve">
          <source>To join multiple lists</source>
          <target state="translated">Para unirse a múltiples listas</target>
        </trans-unit>
        <trans-unit id="c94178f2c66a64dcce62c2462f6db0ac07ff6ad2" translate="yes" xml:space="preserve">
          <source>TypeError: 'Info' object is not iterable</source>
          <target state="translated">TypeError:El objeto 'Info' no es iterable</target>
        </trans-unit>
        <trans-unit id="6988ea32f7f5f7a47ec807be9eb57aa14ce492f2" translate="yes" xml:space="preserve">
          <source>We learn from this that there's nothing gained from using &lt;code&gt;extend&lt;/code&gt; when we have only &lt;em&gt;one&lt;/em&gt; element to append.</source>
          <target state="translated">Aprendemos de esto que no se gana nada con el uso de &lt;code&gt;extend&lt;/code&gt; er cuando solo tenemos &lt;em&gt;un&lt;/em&gt; elemento para agregar.</target>
        </trans-unit>
        <trans-unit id="7fa46452569d7ac3ba94453ebba452bcdba6b76c" translate="yes" xml:space="preserve">
          <source>We see that &lt;code&gt;extend&lt;/code&gt; is semantically clearer, and that it can run much faster than &lt;code&gt;append&lt;/code&gt;, &lt;em&gt;when you intend to append each element in an iterable to a list.&lt;/em&gt;</source>
          <target state="translated">Vemos que &lt;code&gt;extend&lt;/code&gt; er es sem&amp;aacute;nticamente m&amp;aacute;s claro y que puede ejecutarse mucho m&amp;aacute;s r&amp;aacute;pido que &lt;code&gt;append&lt;/code&gt; , &lt;em&gt;cuando tiene la intenci&amp;oacute;n de agregar cada elemento en un iterable a una lista.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="901511367e729640df7f7dfd550d3e4ea28e2e3e" translate="yes" xml:space="preserve">
          <source>What is the difference between Python's list methods append and extend</source>
          <target state="translated">¿Cuál es la diferencia entre los métodos de la lista de Python que añaden y amplían</target>
        </trans-unit>
        <trans-unit id="c83b72408090bbcf60f573c877237a0c69315feb" translate="yes" xml:space="preserve">
          <source>What is the difference between the list methods append and extend?</source>
          <target state="translated">¿Cuál es la diferencia entre los métodos de la lista que se anexan y se extienden?</target>
        </trans-unit>
        <trans-unit id="df8960f2b3f3f051ea1245b98d99c0cedf22ad03" translate="yes" xml:space="preserve">
          <source>What's the difference between the list methods &lt;code&gt;append()&lt;/code&gt; and &lt;code&gt;extend()&lt;/code&gt;?</source>
          <target state="translated">&amp;iquest;Cu&amp;aacute;l es la diferencia entre los m&amp;eacute;todos de lista &lt;code&gt;append()&lt;/code&gt; y &lt;code&gt;extend()&lt;/code&gt; ?</target>
        </trans-unit>
        <trans-unit id="c76829de88c35d40a9dda31676c8436549405422" translate="yes" xml:space="preserve">
          <source>Whatever the object is, whether a number, a string, another list, or something else, it gets added onto the end of &lt;code&gt;my_list&lt;/code&gt; as a single entry on the list.</source>
          <target state="translated">Cualquiera que sea el objeto, ya sea un n&amp;uacute;mero, una cadena, otra lista u otra cosa, se agrega al final de &lt;code&gt;my_list&lt;/code&gt; como una sola entrada en la lista.</target>
        </trans-unit>
        <trans-unit id="e21791239d6e5e0e4bd4ffc22de27ad3b3d29e3b" translate="yes" xml:space="preserve">
          <source>While on &lt;code&gt;extend&lt;/code&gt; we get:</source>
          <target state="translated">Mientras que en &lt;code&gt;extend&lt;/code&gt; er obtenemos:</target>
        </trans-unit>
        <trans-unit id="3f439ca7e2b069c465c0e6b9fa9228b8d941b585" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;append&lt;/code&gt; we get:</source>
          <target state="translated">Con &lt;code&gt;append&lt;/code&gt; obtenemos:</target>
        </trans-unit>
        <trans-unit id="5decd3c661d6c9ce86b6af8c78698a27eef3502d" translate="yes" xml:space="preserve">
          <source>With append you can append a single element that will extend the list:</source>
          <target state="translated">Con append se puede añadir un solo elemento que amplíe la lista:</target>
        </trans-unit>
        <trans-unit id="7ff9cd5327948e9fe20f164919d45efa0d4af4d9" translate="yes" xml:space="preserve">
          <source>With extend, instead, you pass a list as an argument, but you will obtain a list with the new element that is not nested in the old one.</source>
          <target state="translated">Con extend,en cambio,se pasa una lista como argumento,pero se obtiene una lista con el nuevo elemento que no está anidado en el antiguo.</target>
        </trans-unit>
        <trans-unit id="be3bee787fda3098c300cbf4e102f65f8d60863f" translate="yes" xml:space="preserve">
          <source>With that knowledge, now let's understand</source>
          <target state="translated">Con ese conocimiento,ahora entendamos</target>
        </trans-unit>
        <trans-unit id="b9304b221f9bd8bfd097b883fdd38d2ac508d843" translate="yes" xml:space="preserve">
          <source>You can use &quot;+&quot; for returning extend, instead of extending in place.</source>
          <target state="translated">Puedes usar el &quot;+&quot; para volver a extenderse,en lugar de extenderse en el lugar.</target>
        </trans-unit>
        <trans-unit id="6a83d7c862623b4dd7d237675fd23cdd987b84c1" translate="yes" xml:space="preserve">
          <source>You may use &lt;code&gt;itertools.chain.from_iterable()&lt;/code&gt; to do so. This method's output is an iterator. Its implementation is equivalent to</source>
          <target state="translated">Puede usar &lt;code&gt;itertools.chain.from_iterable()&lt;/code&gt; para hacerlo. La salida de este m&amp;eacute;todo es un iterador. Su implementaci&amp;oacute;n es equivalente a</target>
        </trans-unit>
        <trans-unit id="6408441492647951f094a8c8fae777b24d3e6fca" translate="yes" xml:space="preserve">
          <source>You may wonder what is more performant, since append can be used to achieve the same outcome as extend. The following functions do the same thing:</source>
          <target state="translated">Se preguntará qué es más eficaz,ya que el apéndice puede ser utilizado para lograr el mismo resultado que la extensión.Las siguientes funciones hacen lo mismo:</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">and</target>
        </trans-unit>
        <trans-unit id="09c139856a22440005aece734eea29cc8565ee7a" translate="yes" xml:space="preserve">
          <source>and get the wanted list.</source>
          <target state="translated">y conseguir la lista de buscados.</target>
        </trans-unit>
        <trans-unit id="0ca4e4bfa98a7ec016bfb4b4a3318b2c249a09da" translate="yes" xml:space="preserve">
          <source>append 1 element</source>
          <target state="translated">añadir un elemento...</target>
        </trans-unit>
        <trans-unit id="c6804bffd91f7dd325a47176d7ec90194ff30d8a" translate="yes" xml:space="preserve">
          <source>extend one element</source>
          <target state="translated">extender un elemento</target>
        </trans-unit>
        <trans-unit id="a0c72a3ebef258a716defda6ef04845b9cc4a4aa" translate="yes" xml:space="preserve">
          <source>gives you: &lt;code&gt;[1, 2, 3, 4, 5]&lt;/code&gt;</source>
          <target state="translated">te da: &lt;code&gt;[1, 2, 3, 4, 5]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="68f0934d7434765e9dd78ddf1206d6d30f35bf0f" translate="yes" xml:space="preserve">
          <source>gives you: &lt;code&gt;[1, 2, 3, [4, 5]]&lt;/code&gt;</source>
          <target state="translated">te da: &lt;code&gt;[1, 2, 3, [4, 5]]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2bcec56171df3c6150684b60fb0f16c51e1923ed" translate="yes" xml:space="preserve">
          <source>produces:</source>
          <target state="translated">produces:</target>
        </trans-unit>
        <trans-unit id="7123605a27ed77f907c7b603922bfbaf91b71b3e" translate="yes" xml:space="preserve">
          <source>you want</source>
          <target state="translated">...que quieres...</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
