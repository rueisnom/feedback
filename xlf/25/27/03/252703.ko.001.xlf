<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://stackoverflow.com/questions/252703">
    <body>
      <group id="252703">
        <trans-unit id="70b7d255c4e92893f5ed0c09ddb4a442d548b2f1" translate="yes" xml:space="preserve">
          <source>1) &lt;strong&gt;The difference between &lt;code&gt;append&lt;/code&gt; and &lt;code&gt;extend&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">1) &lt;strong&gt; &lt;code&gt;append&lt;/code&gt; 와 &lt;code&gt;extend&lt;/code&gt; 의 차이점&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ab2a695f169966e321c1b3c9b136f73501c69488" translate="yes" xml:space="preserve">
          <source>2) &lt;strong&gt;Similarity between &lt;code&gt;append&lt;/code&gt; and &lt;code&gt;extend&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">2) &lt;strong&gt; &lt;code&gt;append&lt;/code&gt; 와 &lt;code&gt;extend&lt;/code&gt; 유사성&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1af6c3789e468fb9b97d1fdaf4f96f869bc530f0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types&quot;&gt;&lt;code&gt;append&lt;/code&gt;&lt;/a&gt;: Appends object at the end.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types&quot;&gt; &lt;code&gt;append&lt;/code&gt; &lt;/a&gt; : 끝에 객체를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="6e6530121285944097aa883fa0e71146dc804b7e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types&quot;&gt;&lt;code&gt;extend&lt;/code&gt;&lt;/a&gt;: Extends list by appending elements from the iterable.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types&quot;&gt; &lt;code&gt;extend&lt;/code&gt; &lt;/a&gt; : iterable에서 요소를 추가하여 목록을 확장합니다.</target>
        </trans-unit>
        <trans-unit id="56037a5482c563e6083508c3dbe4db4c5f2dd78a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;append(object)&lt;/code&gt; - Updates the list by adding an object to the list.</source>
          <target state="translated">&lt;code&gt;append(object)&lt;/code&gt; -목록에 개체를 추가하여 목록을 업데이트합니다.</target>
        </trans-unit>
        <trans-unit id="195da8d5db2501df35652252e9c31bafdf14d0a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;append&lt;/code&gt; &quot;extends&quot; the list (in place) by &lt;strong&gt;only one item&lt;/strong&gt;, the single object passed (as argument).</source>
          <target state="translated">&lt;strong&gt;하나의 item&lt;/strong&gt; 으로 &lt;strong&gt;만&lt;/strong&gt; 목록을 &quot;확장&quot;합니다 (단일 객체가 인수로 전달됨).</target>
        </trans-unit>
        <trans-unit id="e201063d351f7e744726a96fd16139627216b468" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;append&lt;/code&gt; adds an element to a list, and &lt;code&gt;extend&lt;/code&gt; concatenates the first list with another list (or another iterable, not necessarily a list.)</source>
          <target state="translated">&lt;code&gt;append&lt;/code&gt; 는 요소를 목록에 추가하고 &lt;code&gt;extend&lt;/code&gt; 는 첫 번째 목록을 다른 목록 (또는 목록이 아닌 다른 반복 가능 항목)과 연결합니다.</target>
        </trans-unit>
        <trans-unit id="c90ce0dfa39be2acdf4de0fd00b8ad1c7c2fbdc1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;append&lt;/code&gt; adds its argument as a single element to the end of a list. The length of the list itself will increase by one.</source>
          <target state="translated">&lt;code&gt;append&lt;/code&gt; 는 인수를 목록 끝에 단일 요소로 추가 합니다. 목록 자체의 길이는 1 씩 증가합니다.</target>
        </trans-unit>
        <trans-unit id="1eb23d62627a5b29b6ae434c809f477b0a96b7fc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;append&lt;/code&gt; appends a single element. &lt;code&gt;extend&lt;/code&gt; appends a list of elements.</source>
          <target state="translated">&lt;code&gt;append&lt;/code&gt; 는 단일 요소를 추가합니다. &lt;code&gt;extend&lt;/code&gt; 는 요소 목록을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="c53fb1781eecc5dbd4e45de38ba66eaf09526ada" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extend()&lt;/code&gt; can be used with an iterator argument. Here is an example. You wish to make a list out of a list of lists this way:</source>
          <target state="translated">&lt;code&gt;extend()&lt;/code&gt; 는 반복자 인수와 함께 사용할 수 있습니다. 다음은 예입니다. 이 방법으로 목록 목록에서 목록을 작성하려고합니다.</target>
        </trans-unit>
        <trans-unit id="54c7efb153db4dcfedd27850a5bdbcc67ee8033b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extend(L)&lt;/code&gt; extends the list by appending all the items in the given list &lt;code&gt;L&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;extend(L)&lt;/code&gt; 은 주어진 목록 &lt;code&gt;L&lt;/code&gt; 의 모든 항목을 추가하여 목록을 확장합니다.</target>
        </trans-unit>
        <trans-unit id="449428f078254b818fc7a460a447f0686fa129a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extend(list)&lt;/code&gt; - Essentially concatenates two lists.</source>
          <target state="translated">&lt;code&gt;extend(list)&lt;/code&gt; -두 목록을 본질적으로 연결합니다.</target>
        </trans-unit>
        <trans-unit id="6e5475464b8884d8301120f004ad00149b84905f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extend&lt;/code&gt; &quot;extends&quot; the list (in place) by &lt;strong&gt;as many items as&lt;/strong&gt; the object passed (as argument) contains.</source>
          <target state="translated">인수로 전달 된 객체가 포함하는 &lt;strong&gt;항목 수만큼&lt;/strong&gt; 목록을 &quot;확장&quot;합니다.</target>
        </trans-unit>
        <trans-unit id="3fc2f725a3d1f010fefd641d1892b1ee1f91e6fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extend&lt;/code&gt; iterates over its argument adding each element to the list, extending the list. The length of the list will increase by however many elements were in the iterable argument.</source>
          <target state="translated">&lt;code&gt;extend&lt;/code&gt; 은 각 요소를 목록에 추가하여 목록을 확장하는 인수를 반복합니다. 목록의 길이는 반복 가능한 인수에 많은 요소가 있었을 때 증가합니다.</target>
        </trans-unit>
        <trans-unit id="fe2546e6a922cf581b6922fa14fd645b38325c8c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;my_list + another_list&lt;/code&gt; creates a third list in memory, so you can return the result of it, but it requires that the second iterable be a list.</source>
          <target state="translated">&lt;code&gt;my_list + another_list&lt;/code&gt; 는 메모리에 세 번째 목록을 작성하므로 그 결과를 리턴 할 수 있지만 두 번째 iterable은 목록이어야합니다.</target>
        </trans-unit>
        <trans-unit id="a0282174700fd8ac6b62a87710c430aaaba8b4d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;my_list += another_list&lt;/code&gt; modifies the list in-place (it &lt;em&gt;is&lt;/em&gt; the in-place operator, and lists are mutable objects, as we've seen) so it does not create a new list. It also works like extend, in that the second iterable can be any kind of iterable.</source>
          <target state="translated">&lt;code&gt;my_list += another_list&lt;/code&gt; 는 목록을 현재 위치에서 수정합니다 (내부 연산자이며 목록은 변경 가능한 객체입니다). 그러면 새 목록이 생성되지 않습니다. 두 번째 iterable은 모든 종류의 iterable이 될 수 있다는 점에서 extend처럼 작동합니다.</target>
        </trans-unit>
        <trans-unit id="f7578f20b77af40f225f298cbcb73be6627161b6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;append&lt;/code&gt;&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;append&lt;/code&gt;&lt;/strong&gt;:</target>
        </trans-unit>
        <trans-unit id="0127262cede2cab585110eb2c03be6569a2c12e2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;extend&lt;/code&gt;&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;extend&lt;/code&gt;&lt;/strong&gt;:</target>
        </trans-unit>
        <trans-unit id="8a2ff2e2c62707adf50c6148d4505425791baf31" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;append()&lt;/em&gt;&lt;/strong&gt;: It is basically used in Python to add one element.</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;append ()&lt;/em&gt;&lt;/strong&gt; : 기본적으로 파이썬에서 하나의 요소를 추가하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="14eb46927e8d89134e522d4f00499b1d34001a08" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;extend()&lt;/em&gt;&lt;/strong&gt;: Where extend(), is used to merge two lists or insert multiple elements in one list.</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;extend ()&lt;/em&gt;&lt;/strong&gt; : extend ()는 두 목록을 병합하거나 하나의 목록에 여러 요소를 삽입하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="bce3f4a409dc0c67054a7e806ad3eecf69f742f8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Example&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="edec114d7838eaaa26c315e52fbbd3f12398b693" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;append&lt;/strong&gt;: add (something) to the end of a written document.</source>
          <target state="translated">&lt;strong&gt;추가&lt;/strong&gt; : 작성된 문서의 끝에 (무언가)를 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="b1e9d53522b23940ace67598f8e304257e1f3352" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;extend&lt;/strong&gt;: make larger. Enlarge or expand</source>
          <target state="translated">&lt;strong&gt;확장&lt;/strong&gt; : 더 크게 만듭니다. 확대 또는 확장</target>
        </trans-unit>
        <trans-unit id="f12a8425b5f8b5d83766f116609e798cf3d2736a" translate="yes" xml:space="preserve">
          <source>A commenter said:</source>
          <target state="translated">한 논평자는 말했다 :</target>
        </trans-unit>
        <trans-unit id="e9861fac696e41c8635a5c24911b57eada4db3c3" translate="yes" xml:space="preserve">
          <source>Accepts any &lt;em&gt;iterable&lt;/em&gt; as its argument and makes the list &lt;em&gt;larger&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;iterable&lt;/em&gt; 을 인수로 허용하고 목록을 &lt;em&gt;더 크게&lt;/em&gt; 만듭니다.</target>
        </trans-unit>
        <trans-unit id="7b129563b97b402d8049cf753bbc3e20261ad750" translate="yes" xml:space="preserve">
          <source>Adding more elements... with different results</source>
          <target state="translated">더 많은 요소 추가 ... 다른 결과</target>
        </trans-unit>
        <trans-unit id="4be32550b452f40fa51e2ab0d959e581fc012349" translate="yes" xml:space="preserve">
          <source>Adding one element with both methods</source>
          <target state="translated">두 가지 방법으로 하나의 요소 추가</target>
        </trans-unit>
        <trans-unit id="3bd26fd8398207d1b43767d782ed37724ff4ee89" translate="yes" xml:space="preserve">
          <source>Addressing a comment on timings</source>
          <target state="translated">타이밍에 대한 의견을 제시</target>
        </trans-unit>
        <trans-unit id="8985d7314d0e00979e7074fed170525d3b04f639" translate="yes" xml:space="preserve">
          <source>Also, these timings are not that important. I am just showing them to make the point that, in Python, doing the semantically correct thing is doing things the &lt;em&gt;Right&lt;/em&gt; Way&amp;trade;.</source>
          <target state="translated">또한 이러한 타이밍은 그다지 중요하지 않습니다. 파이썬에서 의미 론적으로 올바른 일을하는 것이 &lt;em&gt;Right&lt;/em&gt; Way &amp;trade;를하는 것임을 지적하기 위해 그것들을 보여주고 있습니다.</target>
        </trans-unit>
        <trans-unit id="123aea4459cfda9e1014bb1516b63b4575238e6c" translate="yes" xml:space="preserve">
          <source>An English dictionary defines the words &lt;code&gt;append&lt;/code&gt; and &lt;code&gt;extend&lt;/code&gt; as:</source>
          <target state="translated">영어 사전은 단어 &lt;code&gt;append&lt;/code&gt; 및 &lt;code&gt;extend&lt;/code&gt; 을 다음과 같이 정의합니다.</target>
        </trans-unit>
        <trans-unit id="c82c64b1e995a03f9f27069b25caf973b1cd888a" translate="yes" xml:space="preserve">
          <source>An interesting point that has been hinted, but not explained, is that extend is faster than append. For any loop that has append inside should be considered to be replaced by list.extend(processed_elements).</source>
          <target state="translated">암시되었지만 설명되지 않은 흥미로운 점은 확장이 추가보다 빠르다는 것입니다. 내부에 추가 된 루프의 경우 list.extend (processed_elements)로 대체되어야합니다.</target>
        </trans-unit>
        <trans-unit id="018aae27d8c30554c8de46329857104e9cfa62e5" translate="yes" xml:space="preserve">
          <source>And we see that going out of our way to create an iterable just to use extend is a (minor) waste of time:</source>
          <target state="translated">그리고 우리는 확장을 사용하기 위해 iterable을 만드는 길을 벗어나는 것이 (소액의) 시간 낭비라는 것을 알았습니다.</target>
        </trans-unit>
        <trans-unit id="d6b2d924cdf87d59ab32e293efde3bb5f80d5ede" translate="yes" xml:space="preserve">
          <source>Append adds the entire data at once. The whole data will be added to the newly created index. On the other hand, &lt;code&gt;extend&lt;/code&gt;, as it name suggests, extends the current array.</source>
          <target state="translated">추가는 전체 데이터를 한 번에 추가합니다. 전체 데이터가 새로 생성 된 인덱스에 추가됩니다. 반면, &lt;code&gt;extend&lt;/code&gt; 은 이름에서 알 수 있듯이 현재 배열을 확장합니다.</target>
        </trans-unit>
        <trans-unit id="218d2be77aa21f8e1fa80975e1d52bafb2e198fc" translate="yes" xml:space="preserve">
          <source>Append and extend are one of the extensibility mechanisms in python.</source>
          <target state="translated">추가 및 확장은 파이썬의 확장 성 메커니즘 중 하나입니다.</target>
        </trans-unit>
        <trans-unit id="82310d2db83e0bffcdb2cb1046a402703b91569f" translate="yes" xml:space="preserve">
          <source>Append has &lt;a href=&quot;https://wiki.python.org/moin/TimeComplexity&quot;&gt;constant time complexity&lt;/a&gt;, O(1).</source>
          <target state="translated">Append는 &lt;a href=&quot;https://wiki.python.org/moin/TimeComplexity&quot;&gt;일정한 시간 복잡도&lt;/a&gt; , O (1)를 갖습니다.</target>
        </trans-unit>
        <trans-unit id="a434fa8cd6c552e1548e22e237aff0d10a359668" translate="yes" xml:space="preserve">
          <source>Append vs Extend</source>
          <target state="translated">추가 대 확장</target>
        </trans-unit>
        <trans-unit id="1a9df5d80165788d628ca7925476c3964139df7b" translate="yes" xml:space="preserve">
          <source>Append: Adds an element to the end of the list.</source>
          <target state="translated">추가 : 목록 끝에 요소를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="44cccc038cbd4611ed1a5bc84803bd64f4954c09" translate="yes" xml:space="preserve">
          <source>Appends &lt;em&gt;any Python object as-is&lt;/em&gt; to the end of the list (i.e. as a
the last element in the list).</source>
          <target state="translated">&lt;em&gt;파이썬 객체를&lt;/em&gt; 리스트의 끝에 그대로 (즉,리스트의 마지막 요소) 추가합니다.</target>
        </trans-unit>
        <trans-unit id="94244f6d45b4ab70f0612edd71cd1f68ea4e50c7" translate="yes" xml:space="preserve">
          <source>As a result, both returns &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">결과적으로 둘 다 &lt;code&gt;None&lt;/code&gt; 을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="318d03febd1ee6fd92ef15470179479c6ff55bf1" translate="yes" xml:space="preserve">
          <source>Back to our example, we can do</source>
          <target state="translated">우리의 예로 돌아가서, 우리는 할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="4e48bd2e9bf5522034e523ecfa6f9cbb0633d97d" translate="yes" xml:space="preserve">
          <source>Bear in mind that apprending new elements might result in the realloaction of the whole list to a better location in memory. If this is done several times because we are appending 1 element at a time, overall performance suffers. In this sense, list.extend is analogous to &quot;&quot;.join(stringlist).</source>
          <target state="translated">새 요소를 추가하면 전체 목록이 메모리의 더 나은 위치에 다시 할당 될 수 있습니다. 한 번에 하나의 요소를 추가하기 때문에 여러 번 수행하면 전체 성능이 저하됩니다. 이런 의미에서 list.extend는 &quot;&quot;.join (stringlist)와 유사합니다.</target>
        </trans-unit>
        <trans-unit id="e97f9942bc15b33736d10eae0f865c61a5234097" translate="yes" xml:space="preserve">
          <source>Besides I make an exhaustive cheatsheet of all list's methods for your reference.</source>
          <target state="translated">게다가 나는 당신의 참고를 위해 모든 목록의 방법에 대한 완전한 치트 시트를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="8af004100ad3dfe672ee2f2df74580a4205ca4c9" translate="yes" xml:space="preserve">
          <source>Both &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;+=&lt;/code&gt; operators are defined for &lt;code&gt;list&lt;/code&gt;. They are semantically similar to extend.</source>
          <target state="translated">&lt;code&gt;+&lt;/code&gt; 및 &lt;code&gt;+=&lt;/code&gt; 연산자는 &lt;code&gt;list&lt;/code&gt; 에 대해 정의 됩니다 . 그것들은 확장 적으로 의미 상 유사합니다.</target>
        </trans-unit>
        <trans-unit id="8cea93e5d27858e13b964a58dc49cc9784afe589" translate="yes" xml:space="preserve">
          <source>Both modify the list &lt;em&gt;in-place&lt;/em&gt;.</source>
          <target state="translated">둘 다 목록 &lt;em&gt;을 제자리에서&lt;/em&gt; 수정합니다.</target>
        </trans-unit>
        <trans-unit id="5c15aa9e32664b33f729fab83f0a48a3f35608a0" translate="yes" xml:space="preserve">
          <source>Both take exactly one argument.</source>
          <target state="translated">둘 다 정확히 하나의 주장을 취합니다.</target>
        </trans-unit>
        <trans-unit id="1f2765f828ce01b38fe87d53bc54780f4b1e79fe" translate="yes" xml:space="preserve">
          <source>But if you use the &lt;code&gt;append&lt;/code&gt; method, the result is OK. Because every time using the &lt;code&gt;extend&lt;/code&gt; method, it will always treat it as a list or any other collection type, iterate it, and place it after the previous list. A specific object can not be iterated, obviously.</source>
          <target state="translated">그러나 &lt;code&gt;append&lt;/code&gt; 메소드를 사용하면 결과는 정상입니다. &lt;code&gt;extend&lt;/code&gt; 메소드를 사용할 때마다 항상 메소드를 목록 또는 다른 콜렉션 유형으로 취급하고 반복하여 이전 목록 뒤에 배치합니다. 특정 객체는 분명히 반복 될 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="e39262defe80a83fac1b793497417432c8b1a879" translate="yes" xml:space="preserve">
          <source>Conclusion</source>
          <target state="translated">Conclusion</target>
        </trans-unit>
        <trans-unit id="da2da7e2bc2dc9f054a633624f329b7493a204c0" translate="yes" xml:space="preserve">
          <source>Do the semantically correct thing. If you want to append all elements in an iterable, use &lt;code&gt;extend&lt;/code&gt;. If you're just adding one element, use &lt;code&gt;append&lt;/code&gt;.</source>
          <target state="translated">의미 적으로 올바른 일을하십시오. iterable에 모든 요소를 ​​추가하려면 &lt;code&gt;extend&lt;/code&gt; 를 사용하십시오. 하나의 요소 만 추가하는 경우 &lt;code&gt;append&lt;/code&gt; 를 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="10f18a826002b58a77378025a10ce911fa701a08" translate="yes" xml:space="preserve">
          <source>Don't get confused - &lt;code&gt;my_list = my_list + another_list&lt;/code&gt; is not equivalent to &lt;code&gt;+=&lt;/code&gt; - it gives you a brand new list assigned to my_list.</source>
          <target state="translated">혼동하지 마십시오 &lt;code&gt;my_list = my_list + another_list&lt;/code&gt; 는 &lt;code&gt;+=&lt;/code&gt; 와 동일하지 않습니다-my_list에 지정된 새로운 목록을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="8ef2e1210c47909b18d1b60b9c30a0116c39a246" translate="yes" xml:space="preserve">
          <source>Example 1:</source>
          <target state="translated">예 1 :</target>
        </trans-unit>
        <trans-unit id="e11895e8b0e4fd9700bfd1eef21691b78b345f1b" translate="yes" xml:space="preserve">
          <source>Example 2:</source>
          <target state="translated">예 2 :</target>
        </trans-unit>
        <trans-unit id="a3691b50433e8309ce0693bf2d494a25e87168a9" translate="yes" xml:space="preserve">
          <source>Extend has time complexity, O(k).</source>
          <target state="translated">Extend에는 시간이 복잡합니다 (O (k)).</target>
        </trans-unit>
        <trans-unit id="5fb1e2f656c5adb41e1c4ee68a9808fe15fb63cd" translate="yes" xml:space="preserve">
          <source>Extend: This is very useful when we want to join two or more lists into a single list. Without extend, if we want to join two lists, the resulting object will contain a list of lists.</source>
          <target state="translated">확장 : 두 개 이상의 목록을 단일 목록으로 결합하려는 경우 매우 유용합니다. 확장하지 않으면 두 목록을 결합하려면 결과 개체에 목록 목록이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="dc3c09a115b4ee611eb7505826a4fa0c2a8495d8" translate="yes" xml:space="preserve">
          <source>For example</source>
          <target state="translated">예를 들어</target>
        </trans-unit>
        <trans-unit id="3f66052a107eaf9bae7cad0f61fb462f47ec2c47" translate="yes" xml:space="preserve">
          <source>From</source>
          <target state="translated">From</target>
        </trans-unit>
        <trans-unit id="b1e759b98f1f0ccc898bd690e8dc14b7a27acf7d" translate="yes" xml:space="preserve">
          <source>From &lt;em&gt;&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/1430224150&quot;&gt;Dive Into Python&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/1430224150&quot;&gt;파이썬&lt;/a&gt;&lt;/em&gt; 에서 &lt;em&gt;다이빙으로&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="baf23460f399b5c16f97e8db76403f770b3dbb1f" translate="yes" xml:space="preserve">
          <source>Here is how equivalently &lt;code&gt;extend()&lt;/code&gt; can be used with an iterator argument:</source>
          <target state="translated">반복자 인수와 함께 &lt;code&gt;extend()&lt;/code&gt; 를 사용하는 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="0e9d8a643011fd67f28b979e20dda79318cc1cdf" translate="yes" xml:space="preserve">
          <source>I hope I can make a useful supplement to this question. If your list stores a specific type object, for example &lt;code&gt;Info&lt;/code&gt;, here is a situation that &lt;code&gt;extend&lt;/code&gt; method is not suitable: In a &lt;code&gt;for&lt;/code&gt; loop and and generating an &lt;code&gt;Info&lt;/code&gt; object every time and using &lt;code&gt;extend&lt;/code&gt; to store it into your list, it will fail. The exception is like below:</source>
          <target state="translated">이 질문에 유용한 보충 자료를 만들 수 있기를 바랍니다. 목록에 특정 유형의 객체 (예 : &lt;code&gt;Info&lt;/code&gt; )가 저장되어있는 경우 &lt;code&gt;extend&lt;/code&gt; 메소드가 적합하지 않은 상황이 있습니다 . &lt;code&gt;for&lt;/code&gt; 루프에서 매번 &lt;code&gt;Info&lt;/code&gt; 객체를 생성하고 &lt;code&gt;extend&lt;/code&gt; 를 사용하여 목록에 저장하면 실패합니다. 예외는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="657934d5480ac30f96a36630d4a659770fc01e45" translate="yes" xml:space="preserve">
          <source>If we try to access the element at pos 2, we get a list ([3]), instead of the element. To join two lists, we'll have to use append.</source>
          <target state="translated">pos 2에서 요소에 액세스하려고하면 요소 대신 목록 ([3])이 표시됩니다. 두 목록에 합류하려면 append를 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="e75fb7783804105a9dade83d72df5de83534afcf" translate="yes" xml:space="preserve">
          <source>If you only have a single element (not in an iterable) to add to the list, use &lt;code&gt;append&lt;/code&gt;.</source>
          <target state="translated">목록에 추가 할 단일 요소 (반복 가능하지 않은 요소) 만있는 경우 &lt;code&gt;append&lt;/code&gt; 를 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="9ce2025f5a6f0b96852bc47624b0b009478fe59b" translate="yes" xml:space="preserve">
          <source>If you pass a list of strings as argument:
&lt;code&gt;append&lt;/code&gt; will still add a single 'list' item at the end and
&lt;code&gt;extend&lt;/code&gt; will add as many 'list' items as the length of the passed list.</source>
          <target state="translated">문자열 목록을 인수로 전달하면 &lt;code&gt;append&lt;/code&gt; 는 끝에 단일 'list'항목을 추가하고 &lt;code&gt;extend&lt;/code&gt; 는 전달 된 목록의 길이만큼 많은 'list'항목을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="6c27f820634ecd34d8c93d2069f58787190aa47c" translate="yes" xml:space="preserve">
          <source>If you pass a string as argument:
&lt;code&gt;append&lt;/code&gt; will add a single string item at the end but
&lt;code&gt;extend&lt;/code&gt; will add as many &quot;single&quot; 'str' items as the length of that string.</source>
          <target state="translated">문자열을 인수로 전달하면 &lt;code&gt;append&lt;/code&gt; 는 끝에 단일 문자열 항목을 추가하지만 &lt;code&gt;extend&lt;/code&gt; 는 해당 문자열의 길이만큼 &quot;단일&quot; 'str'항목을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="b78f53d6305e0bd43669afa71c43028bbf7c4ec8" translate="yes" xml:space="preserve">
          <source>If you use append for more than one element, you have to pass a list of elements as arguments and you will obtain a NESTED list!</source>
          <target state="translated">둘 이상의 요소에 append를 사용하면 요소 목록을 인수로 전달해야하며 NESTED 목록을 얻을 수 있습니다!</target>
        </trans-unit>
        <trans-unit id="2f14134054d2da414c86e62b237399f7524fad93" translate="yes" xml:space="preserve">
          <source>If you want to extend more than one element you should use extend, because you can only append one elment or one list of element:</source>
          <target state="translated">하나 이상의 엘레멘트 또는 하나의 요소 목록 만 추가 할 수 있으므로 둘 이상의 요소를 확장하려면 extend를 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="b799bef3e6eaf61deea4678f3fd5902b41abc370" translate="yes" xml:space="preserve">
          <source>Insert: The insert method was used to overcome the limitations of append. With insert, we can explicitly define the exact position we want our new element to be inserted at.</source>
          <target state="translated">삽입 : 삽입의 한계를 극복하기 위해 삽입 방법이 사용되었습니다. insert를 사용하면 새 요소를 삽입 할 정확한 위치를 명시 적으로 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="61d800ca63db9c80878c85762026d4ba3a71f9a5" translate="yes" xml:space="preserve">
          <source>Instead with extend, you can extend a single element like this</source>
          <target state="translated">대신 extend를 사용하면 이와 같은 단일 요소를 확장 할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="5ebf0e147c0278d4d1f190960458d3838c5a3a48" translate="yes" xml:space="preserve">
          <source>It's conceivable that you might test timings on two comparable operations and get an ambiguous or inverse result. Just focus on doing the semantically correct thing.</source>
          <target state="translated">두 개의 비교 가능한 연산에서 타이밍을 테스트하고 모호하거나 역의 결과를 얻을 수 있습니다. 의미 적으로 올바른 일에만 집중하십시오.</target>
        </trans-unit>
        <trans-unit id="8d6abae937814c8446b46b317e8c03f82a94468a" translate="yes" xml:space="preserve">
          <source>It's like &lt;code&gt;l1&lt;/code&gt; reproduce a body inside her body(nested).</source>
          <target state="translated">&lt;code&gt;l1&lt;/code&gt; 은 몸 안에서 몸을 재생산하는 것과 같습니다.</target>
        </trans-unit>
        <trans-unit id="54daf365a4d2e4b3c64c92d4325e4df1431034a7" translate="yes" xml:space="preserve">
          <source>It's like that two separated individuals get married and construct an united family.</source>
          <target state="translated">두 명의 분리 된 개인이 결혼하여 연합 된 가족을 구성하는 것과 같습니다.</target>
        </trans-unit>
        <trans-unit id="146ce7efdd9cce77f63fb78418de3d3add79fb4e" translate="yes" xml:space="preserve">
          <source>Iterating through the multiple calls to &lt;code&gt;append&lt;/code&gt; adds to the complexity, making it equivalent to that of extend, and since extend's iteration is implemented in C, it will always be faster if you intend to append successive items from an iterable onto a list.</source>
          <target state="translated">&lt;code&gt;append&lt;/code&gt; 를 위해 여러 번의 호출을 반복하면 복잡성이 추가되어 확장과 동일하게되며 extend의 ​​반복은 C로 구현되므로 반복 가능한 항목에서 목록에 연속 항목을 추가하려는 경우 항상 더 빠릅니다.</target>
        </trans-unit>
        <trans-unit id="f9fabcb52c98df466f4e3fe1ec2f75d678220afb" translate="yes" xml:space="preserve">
          <source>Keep in mind that a string is an iterable, so if you extend a list with a string, you'll append each character as you iterate over the string (which may not be what you want):</source>
          <target state="translated">문자열은 반복 가능하므로 문자열로 목록을 확장하면 문자열을 반복 할 때 각 문자를 추가합니다 (원하는 것이 아닐 수도 있음).</target>
        </trans-unit>
        <trans-unit id="361a2e50aaf3f3647e8cc184af43e7eeadca1ac5" translate="yes" xml:space="preserve">
          <source>Method descriptor of insert(index, object). It takes two arguments, first being the index we want to insert our element and second the element itself.</source>
          <target state="translated">insert (index, object)의 메소드 디스크립터. 두 개의 인수가 필요합니다. 첫 번째는 요소를 삽입하려는 인덱스이고 두 번째는 요소 자체입니다.</target>
        </trans-unit>
        <trans-unit id="bac15f59ed08c4687a92f9c4fa82486f57ab95c8" translate="yes" xml:space="preserve">
          <source>Note that if you pass a list to append, it still adds one element:</source>
          <target state="translated">추가 할 목록을 전달하면 여전히 하나의 요소가 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="05ddc26970ee57dc0bf2d79f5074f9420c61a8ca" translate="yes" xml:space="preserve">
          <source>Ok, so let's create an experiment to see how this works out in time:</source>
          <target state="translated">자, 이것이 시간 내에 어떻게 작동하는지 실험을 만들어 봅시다.</target>
        </trans-unit>
        <trans-unit id="7f8281c49648e4cc09e387553861d6d2d61a3bcc" translate="yes" xml:space="preserve">
          <source>Operator Overload, &lt;code&gt;__add__&lt;/code&gt; (&lt;code&gt;+&lt;/code&gt;) and &lt;code&gt;__iadd__&lt;/code&gt; (&lt;code&gt;+=&lt;/code&gt;)</source>
          <target state="translated">연산자 과부하, &lt;code&gt;__add__&lt;/code&gt; ( &lt;code&gt;+&lt;/code&gt; ) 및 &lt;code&gt;__iadd__&lt;/code&gt; ( &lt;code&gt;+=&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="4cf01f31b71266a3cf554c4663848887f5073b79" translate="yes" xml:space="preserve">
          <source>Or, differently, from append, extend more elements in one time without nesting the list into the original one (that's the reason of the name extend)</source>
          <target state="translated">또는 추가와 달리 목록을 원래 목록에 중첩하지 않고 한 번에 더 많은 요소를 확장하십시오 (이름이 확장 된 이유)</target>
        </trans-unit>
        <trans-unit id="2614e0c117e0cda283c69f2d87897ba0998cc75c" translate="yes" xml:space="preserve">
          <source>Perfect answer, I just miss the timing of comparing adding only one element</source>
          <target state="translated">완벽한 대답, 나는 단지 하나의 요소를 추가하는 것을 비교하는 타이밍을 놓쳤다.</target>
        </trans-unit>
        <trans-unit id="63c904559993935c470f516c8b549ca7f3640dbb" translate="yes" xml:space="preserve">
          <source>Performance</source>
          <target state="translated">Performance</target>
        </trans-unit>
        <trans-unit id="4d96ccf093f41ac7689bf0a4eea6b62508ca826a" translate="yes" xml:space="preserve">
          <source>Similarly &lt;code&gt;+=&lt;/code&gt; for in place behavior, but with slight differences from &lt;code&gt;append&lt;/code&gt; &amp;amp; &lt;code&gt;extend&lt;/code&gt;. One of the biggest differences of &lt;code&gt;+=&lt;/code&gt; from &lt;code&gt;append&lt;/code&gt; and &lt;code&gt;extend&lt;/code&gt; is when it is used in function scopes, see &lt;a href=&quot;https://www.toptal.com/python/top-10-mistakes-that-python-programmers-make?utm_medium=referral&amp;amp;utm_source=zeef.com&amp;amp;utm_campaign=ZEEF&quot;&gt;this blog post&lt;/a&gt;.</source>
          <target state="translated">마찬가지로 &lt;code&gt;+=&lt;/code&gt; in place 동작이지만 &lt;code&gt;append&lt;/code&gt; &amp;amp; &lt;code&gt;extend&lt;/code&gt; 와 약간의 차이가 있습니다 . &lt;code&gt;append&lt;/code&gt; 및 &lt;code&gt;extend&lt;/code&gt; 와 &lt;code&gt;+=&lt;/code&gt; 의 가장 큰 차이점 중 하나는 기능 범위에서 사용될 때입니다. &lt;a href=&quot;https://www.toptal.com/python/top-10-mistakes-that-python-programmers-make?utm_medium=referral&amp;amp;utm_source=zeef.com&amp;amp;utm_campaign=ZEEF&quot;&gt;이 블로그 게시물을&lt;/a&gt; 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="c0013e5270ef3a7644248d57fedbc9d6718dfc82" translate="yes" xml:space="preserve">
          <source>So keep in mind that a list is an object. If you append another list onto a list, the first list will be a single object at the end of the list (which may not be what you want):</source>
          <target state="translated">따라서 목록은 객체라는 것을 명심하십시오. 목록에 다른 목록을 추가하면 첫 번째 목록은 목록 끝에 단일 객체가됩니다 (원하는 것이 아닐 수도 있음).</target>
        </trans-unit>
        <trans-unit id="151e5a9949d53ec2d2147b85b6333eacf9bddd1d" translate="yes" xml:space="preserve">
          <source>So let's time them:</source>
          <target state="translated">그럼 시간을 보자.</target>
        </trans-unit>
        <trans-unit id="81c3a31292e4d54c5e0370effd0142a0d9d6cf7b" translate="yes" xml:space="preserve">
          <source>So that you get a nested list</source>
          <target state="translated">중첩 목록을 얻을 수 있도록</target>
        </trans-unit>
        <trans-unit id="dd90b4e3c7659f6f79e165145181cc0f97396ae1" translate="yes" xml:space="preserve">
          <source>So with extend, each element of the iterable gets appended onto the list. For example:</source>
          <target state="translated">따라서 extend와 함께 iterable의 각 요소가 목록에 추가됩니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="ac7c397ffd61c8de48dc1a5da9bab2144d75dfb5" translate="yes" xml:space="preserve">
          <source>So, with more elements, you will use extend to get a list with more items.
You will use append, to append not more elements to the list, but one element that is a nested list as you can clearly see in the output of the code.</source>
          <target state="translated">따라서 더 많은 요소가 있으면 extend를 사용하여 더 많은 항목이있는 목록을 얻습니다. append를 사용하여 더 많은 요소를 목록에 추가하지 않고 코드 출력에서 ​​명확하게 볼 수있는 중첩 목록 인 요소를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="f9ea47d8e5cf1005d57559ab56bc43edc04878dd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;append()&lt;/code&gt; method adds a single item to the end of the list.</source>
          <target state="translated">&lt;code&gt;append()&lt;/code&gt; 메소드는 단일 항목을 목록의 끝에 추가합니다.</target>
        </trans-unit>
        <trans-unit id="61ee3f8a5baedf33ca4da4b7ccca3140b1a29c8b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extend()&lt;/code&gt; method takes one argument, a list, and appends each of the items of the argument to the original list. (Lists are implemented as classes. &amp;ldquo;Creating&amp;rdquo; a list is really instantiating a class. As such, a list has methods that operate on it.)</source>
          <target state="translated">&lt;code&gt;extend()&lt;/code&gt; 메소드는 하나의 인수 인 목록을 가져 와서 인수의 각 항목을 원래 목록에 추가합니다. (목록은 클래스로 구현됩니다. 목록을&amp;ldquo;만드는&amp;rdquo;것은 실제로 클래스를 인스턴스화하는 것입니다. 따라서 목록에는 작동하는 메소드가 있습니다.)</target>
        </trans-unit>
        <trans-unit id="795a02157a2713c7cfc4f4c48b0c342157bc1523" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;list.append&lt;/code&gt; method appends an object to the end of the list.</source>
          <target state="translated">&lt;code&gt;list.append&lt;/code&gt; 메소드는 객체를 목록의 끝에 추가합니다.</target>
        </trans-unit>
        <trans-unit id="01abfd60216f64e7c90c916cff67dbe0ca07bbbb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;list.extend&lt;/code&gt; method extends a list by appending elements from an iterable:</source>
          <target state="translated">&lt;code&gt;list.extend&lt;/code&gt; 메소드는 iterable에서 요소를 추가하여 목록을 확장합니다.</target>
        </trans-unit>
        <trans-unit id="3c9c8129360f881d856c87a2ad6796645d1dd2c9" translate="yes" xml:space="preserve">
          <source>The default location that the new element will be added is always in the (length+1) position.</source>
          <target state="translated">새 요소가 추가 될 기본 위치는 항상 (길이 +1) 위치입니다.</target>
        </trans-unit>
        <trans-unit id="b09c152f1ca5eaa27937cbc25ff4490936eaeb50" translate="yes" xml:space="preserve">
          <source>The following two snippets are semantically equivalent:</source>
          <target state="translated">다음 두 스 니펫은 의미 적으로 동일합니다.</target>
        </trans-unit>
        <trans-unit id="71336a7ff635447433643df7b49be7abf502a0e2" translate="yes" xml:space="preserve">
          <source>The latter may be faster as the loop is implemented in C.</source>
          <target state="translated">루프가 C로 구현되면 후자가 더 빠를 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e3920b0316f72ce847959e9c5913fced8446c0a9" translate="yes" xml:space="preserve">
          <source>The resulting list is always one-dimensional list (i.e. no nesting) and it may contain heterogeneous elements in it (e.g. characters, integers, float) as a result of applying &lt;code&gt;list(iterable)&lt;/code&gt;.</source>
          <target state="translated">결과 목록은 항상 1 차원 목록 (즉, 중첩 없음)이며 &lt;code&gt;list(iterable)&lt;/code&gt; 를 적용한 결과 이질적인 요소 (예 : 문자, 정수, 부동 소수점)를 포함 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="efd7f36e640a279458ddccd0a4eade9668135d7a" translate="yes" xml:space="preserve">
          <source>The resulting list may be nested and contain heterogeneous elements (i.e. list, string, tuple, dictionary, set, etc.)</source>
          <target state="translated">결과 목록은 중첩 될 수 있으며 이기종 요소 (예 : 목록, 문자열, 튜플, 사전, 세트 등)를 포함 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f243a510f0db75f86e86fc1f3299f701e8854962" translate="yes" xml:space="preserve">
          <source>This is the equivalent of &lt;code&gt;append&lt;/code&gt; and &lt;code&gt;extend&lt;/code&gt; using the &lt;code&gt;+&lt;/code&gt; operator:</source>
          <target state="translated">이것은 &lt;code&gt;+&lt;/code&gt; 연산자를 사용하여 &lt;code&gt;append&lt;/code&gt; 및 &lt;code&gt;extend&lt;/code&gt; 과 동일합니다.</target>
        </trans-unit>
        <trans-unit id="bc8b698d49ba0c208cdadc49130422b02766e4fd" translate="yes" xml:space="preserve">
          <source>This may be slightly confusing for &lt;code&gt;str&lt;/code&gt; objects.</source>
          <target state="translated">&lt;code&gt;str&lt;/code&gt; 객체의 경우 약간 혼동 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d8238dd1ed42b349b2431f2c95bc867c15dc49e9" translate="yes" xml:space="preserve">
          <source>Time Complexity</source>
          <target state="translated">시간 복잡성</target>
        </trans-unit>
        <trans-unit id="390a80d306c7219e0128230c4215f38ca3a07d81" translate="yes" xml:space="preserve">
          <source>To add a new element to the list, we can use append method in the following way.</source>
          <target state="translated">리스트에 새로운 요소를 추가하기 위해 다음과 같은 방법으로 append 메소드를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4620527dc6074b59e259322a7140017702d2dec5" translate="yes" xml:space="preserve">
          <source>To distinguish them intuitively</source>
          <target state="translated">직관적으로 구별하기</target>
        </trans-unit>
        <trans-unit id="bbd836d048b13eca97bf87e4464d6d8894eca8e3" translate="yes" xml:space="preserve">
          <source>To join multiple lists</source>
          <target state="translated">여러 목록에 가입하려면</target>
        </trans-unit>
        <trans-unit id="c94178f2c66a64dcce62c2462f6db0ac07ff6ad2" translate="yes" xml:space="preserve">
          <source>TypeError: 'Info' object is not iterable</source>
          <target state="translated">TypeError : 'Info'객체를 반복 할 수 없습니다</target>
        </trans-unit>
        <trans-unit id="6988ea32f7f5f7a47ec807be9eb57aa14ce492f2" translate="yes" xml:space="preserve">
          <source>We learn from this that there's nothing gained from using &lt;code&gt;extend&lt;/code&gt; when we have only &lt;em&gt;one&lt;/em&gt; element to append.</source>
          <target state="translated">추가 할 요소가 &lt;em&gt;하나&lt;/em&gt; 뿐인 경우 &lt;code&gt;extend&lt;/code&gt; 를 사용하면 얻을 수있는 것이 없다는 점에서이 점을 배웁니다.</target>
        </trans-unit>
        <trans-unit id="7fa46452569d7ac3ba94453ebba452bcdba6b76c" translate="yes" xml:space="preserve">
          <source>We see that &lt;code&gt;extend&lt;/code&gt; is semantically clearer, and that it can run much faster than &lt;code&gt;append&lt;/code&gt;, &lt;em&gt;when you intend to append each element in an iterable to a list.&lt;/em&gt;</source>
          <target state="translated">우리는 extender가 의미 적으로 더 명확 &lt;em&gt;하고 iterable의 각 요소를 목록에 추가하려고 할 때&lt;/em&gt; &lt;code&gt;append&lt;/code&gt; 보다 훨씬 빠르게 실행될 수 있음을 알 수 있습니다 &lt;em&gt;.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="901511367e729640df7f7dfd550d3e4ea28e2e3e" translate="yes" xml:space="preserve">
          <source>What is the difference between Python's list methods append and extend</source>
          <target state="translated">파이썬의 list 메소드 append와 extend의 ​​차이점은 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="c83b72408090bbcf60f573c877237a0c69315feb" translate="yes" xml:space="preserve">
          <source>What is the difference between the list methods append and extend?</source>
          <target state="translated">추가 및 확장 목록 방법의 차이점은 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="df8960f2b3f3f051ea1245b98d99c0cedf22ad03" translate="yes" xml:space="preserve">
          <source>What's the difference between the list methods &lt;code&gt;append()&lt;/code&gt; and &lt;code&gt;extend()&lt;/code&gt;?</source>
          <target state="translated">리스트 메소드 &lt;code&gt;append()&lt;/code&gt; 와 &lt;code&gt;extend()&lt;/code&gt; 의 차이점은 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="c76829de88c35d40a9dda31676c8436549405422" translate="yes" xml:space="preserve">
          <source>Whatever the object is, whether a number, a string, another list, or something else, it gets added onto the end of &lt;code&gt;my_list&lt;/code&gt; as a single entry on the list.</source>
          <target state="translated">객체가 숫자, 문자열, 다른 목록 또는 기타 무엇이든 관계없이 &lt;code&gt;my_list&lt;/code&gt; 끝에 목록의 단일 항목으로 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="e21791239d6e5e0e4bd4ffc22de27ad3b3d29e3b" translate="yes" xml:space="preserve">
          <source>While on &lt;code&gt;extend&lt;/code&gt; we get:</source>
          <target state="translated">&lt;code&gt;extend&lt;/code&gt; 하는 동안 우리는 다음을 얻습니다.</target>
        </trans-unit>
        <trans-unit id="3f439ca7e2b069c465c0e6b9fa9228b8d941b585" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;append&lt;/code&gt; we get:</source>
          <target state="translated">&lt;code&gt;append&lt;/code&gt; 하면 다음을 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5decd3c661d6c9ce86b6af8c78698a27eef3502d" translate="yes" xml:space="preserve">
          <source>With append you can append a single element that will extend the list:</source>
          <target state="translated">append를 사용하면 목록을 확장 할 단일 요소를 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7ff9cd5327948e9fe20f164919d45efa0d4af4d9" translate="yes" xml:space="preserve">
          <source>With extend, instead, you pass a list as an argument, but you will obtain a list with the new element that is not nested in the old one.</source>
          <target state="translated">대신 extend를 사용하면 목록을 인수로 전달하지만 이전 요소에 중첩되지 않은 새 요소가 포함 된 목록을 얻게됩니다.</target>
        </trans-unit>
        <trans-unit id="be3bee787fda3098c300cbf4e102f65f8d60863f" translate="yes" xml:space="preserve">
          <source>With that knowledge, now let's understand</source>
          <target state="translated">그 지식으로 이제 이해하자</target>
        </trans-unit>
        <trans-unit id="b9304b221f9bd8bfd097b883fdd38d2ac508d843" translate="yes" xml:space="preserve">
          <source>You can use &quot;+&quot; for returning extend, instead of extending in place.</source>
          <target state="translated">확장 대신 &quot;+&quot;를 사용하여 확장을 반환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6a83d7c862623b4dd7d237675fd23cdd987b84c1" translate="yes" xml:space="preserve">
          <source>You may use &lt;code&gt;itertools.chain.from_iterable()&lt;/code&gt; to do so. This method's output is an iterator. Its implementation is equivalent to</source>
          <target state="translated">&lt;code&gt;itertools.chain.from_iterable()&lt;/code&gt; 을 사용하여 그렇게 할 수 있습니다. 이 메소드의 출력은 반복자입니다. 구현은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6408441492647951f094a8c8fae777b24d3e6fca" translate="yes" xml:space="preserve">
          <source>You may wonder what is more performant, since append can be used to achieve the same outcome as extend. The following functions do the same thing:</source>
          <target state="translated">append를 사용하여 extend와 동일한 결과를 얻을 수 있으므로 성능이 더 우수한 것이 궁금 할 수 있습니다. 다음과 같은 기능이 동일합니다.</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">and</target>
        </trans-unit>
        <trans-unit id="09c139856a22440005aece734eea29cc8565ee7a" translate="yes" xml:space="preserve">
          <source>and get the wanted list.</source>
          <target state="translated">원하는 목록을 얻습니다.</target>
        </trans-unit>
        <trans-unit id="0ca4e4bfa98a7ec016bfb4b4a3318b2c249a09da" translate="yes" xml:space="preserve">
          <source>append 1 element</source>
          <target state="translated">요소 1 개 추가</target>
        </trans-unit>
        <trans-unit id="c6804bffd91f7dd325a47176d7ec90194ff30d8a" translate="yes" xml:space="preserve">
          <source>extend one element</source>
          <target state="translated">하나의 요소를 확장</target>
        </trans-unit>
        <trans-unit id="a0c72a3ebef258a716defda6ef04845b9cc4a4aa" translate="yes" xml:space="preserve">
          <source>gives you: &lt;code&gt;[1, 2, 3, 4, 5]&lt;/code&gt;</source>
          <target state="translated">다음을 제공합니다. &lt;code&gt;[1, 2, 3, 4, 5]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="68f0934d7434765e9dd78ddf1206d6d30f35bf0f" translate="yes" xml:space="preserve">
          <source>gives you: &lt;code&gt;[1, 2, 3, [4, 5]]&lt;/code&gt;</source>
          <target state="translated">다음을 제공합니다 : &lt;code&gt;[1, 2, 3, [4, 5]]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2bcec56171df3c6150684b60fb0f16c51e1923ed" translate="yes" xml:space="preserve">
          <source>produces:</source>
          <target state="translated">produces:</target>
        </trans-unit>
        <trans-unit id="7123605a27ed77f907c7b603922bfbaf91b71b3e" translate="yes" xml:space="preserve">
          <source>you want</source>
          <target state="translated">너는 원해</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
