<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/25385173">
    <body>
      <group id="25385173">
        <trans-unit id="5f69ef7078b27c4474ee99ff65f422379bf72b90" translate="yes" xml:space="preserve">
          <source>A debugger is a program that can examine the state of your program while your program is running. The &lt;a href=&quot;https://stackoverflow.com/questions/216819/how-does-a-debugger-work&quot;&gt;technical means it uses for doing this&lt;/a&gt; are not important for understanding the basics of how to use a debugger. You can use a debugger to halt the execution of your program when it reaches a particular place in your code, then examine the values of the variables in the program. You can use a debugger to run your program very slowly, one line of code at a time (called &lt;em&gt;single stepping&lt;/em&gt;), while you examine the values of its variables.</source>
          <target state="translated">デバッガーは、プログラムの実行中にプログラムの状態を調べることができるプログラムです。 &lt;a href=&quot;https://stackoverflow.com/questions/216819/how-does-a-debugger-work&quot;&gt;これを行うために使用する技術的手段&lt;/a&gt;は、デバッガーの使用方法の基本を理解する上で重要ではありません。 デバッガーを使用して、プログラムがコード内の特定の場所に到達したときにプログラムの実行を停止し、プログラム内の変数の値を調べることができます。 デバッガーを使用すると、変数の値を確認しながら、プログラムを非常にゆっくりと、1行ずつコードを実行できます（ &lt;em&gt;シングルステップ&lt;/em&gt;と呼ばれます）。</target>
        </trans-unit>
        <trans-unit id="6e018c35cc220755b7a04fa0475268287db8bf4c" translate="yes" xml:space="preserve">
          <source>A debugger is a very powerful tool for helping diagnose problems with programs.  And debuggers are available for all practical programming languages. Therefore being able to use a debugger is considered a &lt;strong&gt;basic skill&lt;/strong&gt; of any professional or enthusiast programmer. And using a debugger &lt;em&gt;yourself&lt;/em&gt;  is considered &lt;strong&gt;basic work&lt;/strong&gt; you should do &lt;em&gt;yourself&lt;/em&gt; before asking others for help. As this site is for professional and enthusiast programmers, and not a helpdesk or mentoring site, if you have a question about a problem with a specific program, but have not used a debugger, your question is very likely to be closed and downvoted. If you persist with questions like that, you will eventually be blocked from posting more.</source>
          <target state="translated">デバッガーは、プログラムの問題の診断に役立つ非常に強力なツールです。 また、デバッガはすべての実用的なプログラミング言語で利用できます。 したがって、デバッガーを使用できることは、プロまたはマニアのプログラマーの&lt;strong&gt;基本スキル&lt;/strong&gt;と見なされます。 &lt;em&gt;自分&lt;/em&gt;でデバッガを使用することは、他の人に助けを求める前に&lt;em&gt;自分&lt;/em&gt;で行うべき&lt;strong&gt;基本的な作業&lt;/strong&gt;と見なされます。 このサイトはヘルプデスクやメンタリングサイトではなくプロのプログラマー向けであり、特定のプログラムの問題について質問があるが、デバッガーを使用していない場合、質問はクローズされ、反対票が多い可能性があります。 このような質問を続けると、最終的には投稿をブロックされます。</target>
        </trans-unit>
        <trans-unit id="b35f6135c776dab42b1e067f67a94a571242079c" translate="yes" xml:space="preserve">
          <source>Assertions can be used to trap incorrect values as they occur, rather than once they have a visible effect to the end user. The quicker you catch an incorrect value, the closer you are to the line that produced it.</source>
          <target state="translated">アサーションを使用すると、エンド・ユーザに目に見える影響を与えてからではなく、不正確な値が発生したときにトラップすることができます。不正確な値を素早くキャッチすればするほど、その値を生成した行に近づくことができます。</target>
        </trans-unit>
        <trans-unit id="476f3ccc8db71ae5789e361542fbed5211ce7306" translate="yes" xml:space="preserve">
          <source>By using a debugger  you can discover whether a variable has the wrong value, and where in your program its value changed to the wrong value.</source>
          <target state="translated">デバッガを使用することで、変数が間違った値を持っているかどうか、プログラムのどこでその値が間違った値に変更されたかどうかを発見することができます。</target>
        </trans-unit>
        <trans-unit id="d9a81caeb68a068dc7c4d3981dcf5e3f68ad634a" translate="yes" xml:space="preserve">
          <source>Example markdown: &lt;code&gt;[What is a debugger and how can it help me diagnose problems?](https://stackoverflow.com/q/25385173)&lt;/code&gt;</source>
          <target state="translated">マークダウンの例： &lt;code&gt;[What is a debugger and how can it help me diagnose problems?](https://stackoverflow.com/q/25385173)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dac53d9920a5cefff69f5b44bd3dd26c07e0d837" translate="yes" xml:space="preserve">
          <source>General notes on using a debugger</source>
          <target state="translated">デバッガを使用する際の一般的な注意事項</target>
        </trans-unit>
        <trans-unit id="35d81ad9a2d1d250a49b8763e25f523915145fda" translate="yes" xml:space="preserve">
          <source>How a debugger can help you</source>
          <target state="translated">デバッガがどのように役立つか</target>
        </trans-unit>
        <trans-unit id="e65758af1bcb0f30c4a0a43a8bbb8fd2e5f5fc23" translate="yes" xml:space="preserve">
          <source>I want to add that a debugger isn't always the perfect solution, and shouldn't always be the go-to solution to debugging. Here are a few cases where a debugger might not work for you:</source>
          <target state="translated">デバッガが必ずしも完璧なソリューションではないこと、また、デバッガが常に最適なソリューションであるべきではないことを付け加えておきたいと思います。ここでは、デバッガがうまくいかないケースをいくつか紹介します。</target>
        </trans-unit>
        <trans-unit id="ee4ad88e14d5c3ab22281f68119e6b85800f009c" translate="yes" xml:space="preserve">
          <source>In all of these cases, either having your program stop abruptly could cause the end results to differ, or stepping through manually in search of the one line where the bug is caused is too much of a hassle. This can equally happen whether your bug is incorrect behavior, or a crash. For instance, if memory corruption causes a crash, by the time the crash happens, it's too far from where the memory corruption first occurred, and no useful information is left.</source>
          <target state="translated">いずれの場合も、プログラムを突然停止させて最終的な結果が異なる場合や、バグの原因となっている一行を探して手動でステップを踏むのが面倒くさい場合があります。これは、バグが不正な動作であっても、クラッシュであっても同じように起こり得ます。例えば、メモリの破損が原因でクラッシュが発生した場合、 クラッシュが発生する頃には、最初にメモリの破損が発生した場所から離れすぎていて、 有用な情報が残っていないということになります。</target>
        </trans-unit>
        <trans-unit id="a338c62ab23f15aaec89a72d247ffbe4985f1d02" translate="yes" xml:space="preserve">
          <source>In case of memory leaks or memory stomping, use appropriate tools which are able to analyze and detect these at runtime. Being able to detect where the actual corruption occurs is the first step. After this, you can use logs to work your way back to where incorrect values were introduced.</source>
          <target state="translated">メモリリークやメモリストンプが発生した場合は、実行時にこれらを分析して検出できる適切なツールを使用してください。実際に破損が発生した場所を検出できることが最初のステップです。その後、ログを使用して、不正な値が導入された場所までさかのぼって作業することができます。</target>
        </trans-unit>
        <trans-unit id="32b83cd5b35e63e0288dc2dda08e7f1561b7457b" translate="yes" xml:space="preserve">
          <source>In practice it is often easier to  run your program under the control of a debugger from the very start.</source>
          <target state="translated">実際には、最初からデバッガの制御下でプログラムを実行する方が簡単な場合が多いです。</target>
        </trans-unit>
        <trans-unit id="2fa82613d6dc16314e47d0ef35347e6c187f5e0a" translate="yes" xml:space="preserve">
          <source>Most &lt;a href=&quot;https://stackoverflow.com/a/426586/545127&quot;&gt;modern debuggers are part of an IDE&lt;/a&gt; and provide you with a convenient GUI for examining the source code and variables of your program, with a point-and-click interface for setting breakpoints, running your program and single stepping it.</source>
          <target state="translated">最近のほとんどの&lt;a href=&quot;https://stackoverflow.com/a/426586/545127&quot;&gt;デバッガーはIDEの一部で&lt;/a&gt;あり、プログラムのソースコードと変数を調べるための便利なGUIを提供し、ブレークポイントの設定、プログラムの実行およびシングルステップのためのポイントアンドクリックインターフェイスを備えています。</target>
        </trans-unit>
        <trans-unit id="c272bc7b5d1faf3b5ac046f446162bfc7579d7ca" translate="yes" xml:space="preserve">
          <source>Refactor and unit test. If your program is too big, it might be worthwhile to test it one class or one function at a time. Give it inputs, and look at the outputs, and see which are not as you're expecting. Being able to narrow down a bug from an entire program to a single function can make a huge difference in debugging time.</source>
          <target state="translated">リファクタとユニットテスト プログラムが大きすぎる場合は、一度に1つのクラスや1つの関数をテストしてみるのもいいかもしれません。入力を与え、出力を見て、どれが期待通りでないかを確認してください。プログラム全体から単一の関数にバグを絞り込むことができるようになると、デバッグ時間に大きな違いが出てきます。</target>
        </trans-unit>
        <trans-unit id="cfea533fc55110066831cc9a113752f303aa158f" translate="yes" xml:space="preserve">
          <source>Remember that debugging is a process going backwards. You have the end result - a bug - and find the cause, which preceded it. It's about working your way backwards and, unfortunately, debuggers only step forwards. This is where good logging and postmortem analysis can give you much better results.</source>
          <target state="translated">デバッグは逆行するプロセスであることを覚えておいてください。最終的な結果(バグ)を得て、その前の原因を見つけます。残念ながら、デバッガは前にしか進まないのです。ここで、優れたロギングと死後の分析によって、より良い結果を得ることができます。</target>
        </trans-unit>
        <trans-unit id="68a3d0db4761dfac59bdfef0acdc7d355621a5cd" translate="yes" xml:space="preserve">
          <source>Simplest is simply logging and assertions. Add logs to your program at various points, and compare what you get with what you're expecting. For instance, see if the function where you think there's a bug is even called in the first place. See if the variables at a start of a method are what you think they are. Unlike breakpoints, it's okay for there to be many log lines in which nothing special happens. You can simply search through the log afterwards. Once you hit a log line that's different from what you're expecting, add more in the same area. Narrow it down farther and farther, until it's small enough to be able to log every line in the bugged area.</source>
          <target state="translated">最も単純なのは、単純にログとアサーションです。様々なポイントでプログラムにログを追加し、得られるものと期待しているものを比較してみましょう。例えば、バグがあると思われる関数が最初の場所で呼び出されているかどうかを確認します。メソッドの開始時の変数が、あなたが思っている通りになっているかどうかを確認してください。ブレークポイントとは異なり、何も起こらないログ行がたくさんあっても構いません。後は単純にログを検索すればいいのです。思っていたものと違うログラインにぶつかったら、同じエリアにさらに追加します。バグったエリアのログ線を全てログにできるくらい小さくなるまで、どんどん絞り込んでいきましょう。</target>
        </trans-unit>
        <trans-unit id="11af1f5e4a737d4646ee0deef9b7797bdb5baf23" translate="yes" xml:space="preserve">
          <source>So, what are the alternatives?</source>
          <target state="translated">では、代替案は何か?</target>
        </trans-unit>
        <trans-unit id="8db71d409c1383bc4dea16cad514b565f96d3c83" translate="yes" xml:space="preserve">
          <source>The code that has the bug in it runs many times before it bugs out. This can be particularly problematic in main loops, or worse yet, in physics engines, where the problem could be numerical. Even setting a breakpoint, in this case, would simply have you hitting it many times, with the bug not appearing.</source>
          <target state="translated">バグのあるコードは、バグアウトするまでに何度も実行されます。これは特にメインループで問題になることがあり、さらに悪いことに物理エンジンでは数値的な問題になることがあります。この場合、ブレークポイントを設定しても、単にブレークポイントを何度も打つことになり、バグは現れません。</target>
        </trans-unit>
        <trans-unit id="11e64b63167eaba5daad013db47bfe5af9956dc0" translate="yes" xml:space="preserve">
          <source>The part of your program which fails is really large (poor modularization, perhaps?) and you're not exactly sure where to start stepping through the code. Stepping through all of it might be too time consuming.</source>
          <target state="translated">あなたのプログラムで失敗した部分は非常に大きく(モジュール化がうまくいっていないのでしょうか)、どこからコードをステップアップしていけばいいのかよくわかりません。すべてのコードをステップスルーするのは時間がかかりすぎるかもしれません。</target>
        </trans-unit>
        <trans-unit id="0fe06a3d38eb67781158d1b6de356c30215cb125" translate="yes" xml:space="preserve">
          <source>The specifics of using a debugger depend on the debugger and, to a lesser degree, the programming language you are using.</source>
          <target state="translated">デバッガを使用する際の仕様は、デバッガと、使用しているプログラミング言語に依存します。</target>
        </trans-unit>
        <trans-unit id="f5ad5b8430e85c61bfe851f89842b9b5e6fd30da" translate="yes" xml:space="preserve">
          <source>This is intended to be a general purpose question to assist new programmers who have a problem with a program, but do not know how to use a debugger to diagnose the cause of the problem.</source>
          <target state="translated">これは、プログラムに問題があるが、デバッガを使って問題の原因を診断する方法がわからないという新人プログラマーを支援するための汎用的な質問を意図しています。</target>
        </trans-unit>
        <trans-unit id="317a81e5612bede9ef0ebf356b49a815d401cb81" translate="yes" xml:space="preserve">
          <source>This question covers three classes of more specific question:</source>
          <target state="translated">この問題は、より具体的な問題の3つのクラスをカバーしています。</target>
        </trans-unit>
        <trans-unit id="d402cbbb81d8dd60aa13040027a9a9b28f4267dd" translate="yes" xml:space="preserve">
          <source>Using a debugger can be very difficult unless your program executable or bytecode files  include debugging &lt;em&gt;symbol information&lt;/em&gt; and cross references to your source-code. You might have to &lt;a href=&quot;https://stackoverflow.com/questions/89603/how-does-the-debugging-option-g-change-the-binary-executable&quot;&gt;compile (or recompile) your program slightly differently&lt;/a&gt; to ensure that information is present. If the compiler performs extensive optimizations, those cross references can become confusing. You might therefore have to &lt;a href=&quot;https://stackoverflow.com/a/7857696/545127&quot;&gt;recompile your program with optimizations turned off&lt;/a&gt;.</source>
          <target state="translated">プログラムの実行可能ファイルまたはバイトコードファイルにデバッグ&lt;em&gt;シンボル情報&lt;/em&gt;とソースコードへの相互参照が含まれていない限り、デバッガーの使用は非常に困難です。 情報が存在することを確認するために&lt;a href=&quot;https://stackoverflow.com/questions/89603/how-does-the-debugging-option-g-change-the-binary-executable&quot;&gt;、プログラムをわずかに異なる方法でコンパイル（または再コンパイル）する&lt;/a&gt;必要がある場合があります。 コンパイラーが広範な最適化を実行すると、それらの相互参照が混乱する可能性があります。 したがって&lt;a href=&quot;https://stackoverflow.com/a/7857696/545127&quot;&gt;、最適化をオフにしてプログラム&lt;/a&gt;を再コンパイルする必要があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="c7cf49b12a749436a9ef554222db7bab809eb274" translate="yes" xml:space="preserve">
          <source>Using a debugger is an expected basic skill</source>
          <target state="translated">デバッガを使うことは、期待される基本的なスキル</target>
        </trans-unit>
        <trans-unit id="3e279e4ed2ae68ef124cd2d91bc59889848b5935" translate="yes" xml:space="preserve">
          <source>Using single stepping you can also discover whether the control flow is as you expect. For example, whether an &lt;code&gt;if&lt;/code&gt; branch executed when you expect it ought to be.</source>
          <target state="translated">シングルステップを使用して、制御フローが期待どおりかどうかを確認することもできます。 たとえば、期待どおりに &lt;code&gt;if&lt;/code&gt; 分岐が実行されるかどうか。</target>
        </trans-unit>
        <trans-unit id="01283b82b512012e10c02769d68c8090ddc60c84" translate="yes" xml:space="preserve">
          <source>What is a debugger and how can it help me diagnose problems</source>
          <target state="translated">デバッガとは何か、どのように問題を診断するのに役立つか</target>
        </trans-unit>
        <trans-unit id="bb0345f67d917d6883f66311548fb70b5de97da9" translate="yes" xml:space="preserve">
          <source>When I run my program, it crashes and gives me a stack trace. I have &lt;a href=&quot;https://stackoverflow.com/questions/3988788/what-is-a-stack-trace-and-how-can-i-use-it-to-debug-my-application-errors&quot;&gt;examined the stack trace&lt;/a&gt;, but I still do not know the cause of the problem because the stack trace does not provide me with enough information.</source>
          <target state="translated">プログラムを実行すると、クラッシュしてスタックトレースが表示されます。 &lt;a href=&quot;https://stackoverflow.com/questions/3988788/what-is-a-stack-trace-and-how-can-i-use-it-to-debug-my-application-errors&quot;&gt;スタックトレース&lt;/a&gt;を調べましたが、スタックトレースでは十分な情報が得られないため、問題の原因はわかりません。</target>
        </trans-unit>
        <trans-unit id="21d75a40a11cab8c9bd1000513184a5edb68b004" translate="yes" xml:space="preserve">
          <source>When I run my program, it crashes because of a segmentation fault (SEGV).</source>
          <target state="translated">プログラムを実行すると、セグメンテーション障害(SEGV)が発生してクラッシュしてしまいます。</target>
        </trans-unit>
        <trans-unit id="362b817e599fe88871572e82a0a7459085492df9" translate="yes" xml:space="preserve">
          <source>When I run my program, it does not produce the output I expect for the input I gave it.</source>
          <target state="translated">私のプログラムを実行すると、私が与えた入力に対して期待した出力が得られません。</target>
        </trans-unit>
        <trans-unit id="bba0c0b6c3d8bfbe7dacab2b87da00e4bc4a5f02" translate="yes" xml:space="preserve">
          <source>You can &lt;em&gt;attach&lt;/em&gt; a debugger to a process already running your program. You  might do if your program is stuck.</source>
          <target state="translated">すでにプログラムを実行しているプロセスにデバッガを&lt;em&gt;接続&lt;/em&gt;できます。 あなたのプログラムが行き詰まっているなら、あなたはそうするかもしれません。</target>
        </trans-unit>
        <trans-unit id="3a05e0a9c5c99e4bb417913c643133e002238ba1" translate="yes" xml:space="preserve">
          <source>You can tell that your bug is caused by incorrect values arriving at function X, but you don't know where these values come from. Having to run through the program, again and again, setting breakpoints farther and farther back, can be a huge hassle. Especially if function X is called from many places throughout the program.</source>
          <target state="translated">あなたのバグの原因は、関数 X に到着する不正確な値にあることがわかりますが、その値がどこから来ているのかはわかりません。プログラムを何度も何度も何度も実行して、ブレークポイントを遠くに、遠くに設定しなければならないのは、非常に面倒なことです。特に、関数Xがプログラム中の多くの場所から呼び出されている場合には、このような問題が発生します。</target>
        </trans-unit>
        <trans-unit id="fba390354c53382829fca30a0664e9c72d72f969" translate="yes" xml:space="preserve">
          <source>You indicate &lt;em&gt;where&lt;/em&gt; your program should stop executing by indicating the source-code file and line number of the line at which execution should stop, or by indicating the name of the method/function at which the program should stop (if you want to stop as soon as execution enters the method). The technical means that the debugger uses to cause your program to stop is called a &lt;em&gt;breakpoint&lt;/em&gt; and this process is called &lt;em&gt;setting a breakpoint&lt;/em&gt;.</source>
          <target state="translated">ソースコードファイルと実行を停止する行の行番号を指定する&lt;em&gt;か&lt;/em&gt; 、プログラムを停止するメソッド/関数の名前を指定することで（プログラムを停止する場合）実行がメソッドに入るとすぐに）。 デバッガーがプログラムを停止させるために使用する技術的手段は&lt;em&gt;ブレークポイント&lt;/em&gt;と呼ばれ、このプロセスは&lt;em&gt;ブレークポイントの設定&lt;/em&gt;と呼ばれ&lt;em&gt;ます&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="36a877db5fba4c1c71b6a6dc4aee4eaf879d1f64" translate="yes" xml:space="preserve">
          <source>Your program is multi-threaded. Or even worse, your problem is caused by a race condition.</source>
          <target state="translated">あなたのプログラムはマルチスレッドです。あるいはもっと悪いことに、あなたの問題は競合状態によって引き起こされています。</target>
        </trans-unit>
        <trans-unit id="ef19f674fef2005af2ff2b50f2cab28caf87470e" translate="yes" xml:space="preserve">
          <source>Your program must run in real time. This is a big issue for programs that connect to the network. If you set up a breakpoint in your network code, the other end isn't going to wait for you to step through, it's simply going to time out. Programs which rely on the system clock, e.g. games with frame skip, aren't much better off either.</source>
          <target state="translated">プログラムはリアルタイムで実行する必要があります。これは、ネットワークに接続するプログラムにとって大きな問題です。ネットワークコードにブレークポイントを設定した場合、相手側はあなたがステップスルーするのを待つのではなく、単にタイムアウトしてしまいます。システムクロックに依存しているプログラム、例えばフレームスキップのあるゲームなども、あまり良い方法ではありません。</target>
        </trans-unit>
        <trans-unit id="00fa062298e582b7d61242405c699fc9a9bf07dd" translate="yes" xml:space="preserve">
          <source>Your program performs some form of destructive actions, like writing to files or sending e-mails, and you'd like to limit the number of times you need to run through it.</source>
          <target state="translated">あなたのプログラムは、ファイルへの書き込みや電子メールの送信など、ある種の破壊的なアクションを実行し、それを実行する必要がある回数を制限したいと思います。</target>
        </trans-unit>
        <trans-unit id="eaadc1ee03032694703d617ad9e3871bdbd49308" translate="yes" xml:space="preserve">
          <source>Your program uses a lot of callbacks and other non-linear flow control methods, which makes the debugger confused when you step through it.</source>
          <target state="translated">あなたのプログラムはコールバックやその他の非線形フロー制御メソッドを多く使用しているため、プログラムをステップスルーする際にデバッガが混乱してしまいます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
