<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/791959">
    <body>
      <group id="791959">
        <trans-unit id="af98fe8efdbba76bde441fd83a9ed2ed3ba1e0e2" translate="yes" xml:space="preserve">
          <source>&amp;gt;&amp;gt; git checkout -b 1.0.2_branch 1.0.2</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;gt;&amp;gt; git checkout -b 1.0.2_branch 1.0.2&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="caa74c8279f19027be387f0ec3e6fcc9ef73392c" translate="yes" xml:space="preserve">
          <source>&amp;gt;&amp;gt; git push --tags</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;gt;&amp;gt; git push --tags&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9b8031d101fe54240862b5c3d8679a73c65fac7f" translate="yes" xml:space="preserve">
          <source>(because you asked for the second most recent tag)</source>
          <target state="translated">(2番目に最近のタグを聞いてきたから)</target>
        </trans-unit>
        <trans-unit id="e0f6054779b9b8fe76cbf246ebb7e8a4009f576d" translate="yes" xml:space="preserve">
          <source>--branch can also take tags and detaches the HEAD at that commit in the resulting repository.</source>
          <target state="translated">--branch は、結果として得られるリポジトリ内のそのコミットでタグを取り、HEAD を切り離すこともできます。</target>
        </trans-unit>
        <trans-unit id="fd34c7ff6a38658bdb321731b15aff70ab2e7d3e" translate="yes" xml:space="preserve">
          <source>--depth</source>
          <target state="translated">--depth</target>
        </trans-unit>
        <trans-unit id="027e58f150122e08d3266104e750cbd0ca6e20a6" translate="yes" xml:space="preserve">
          <source>..or whatever tag you need.</source>
          <target state="translated">...または、必要なタグがあれば何でもいい。</target>
        </trans-unit>
        <trans-unit id="d512a03e0ffcb28b358442a61c4b8b689fbe2978" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git tag | sort -n | tail -1&lt;/code&gt; will output:</source>
          <target state="translated">&lt;code&gt;git tag | sort -n | tail -1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は出力します：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7c7a3761011b44a47d6265237c8556b58e62b801" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git tag | sort -n | tail -2 | head -1&lt;/code&gt; will output:</source>
          <target state="translated">&lt;code&gt;git tag | sort -n | tail -2 | head -1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は出力します：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4e9fd916c9027078890d2d8f030a5927cffc3679" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;later, modify some files&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;後で、いくつかのファイルを変更します&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9047c2edb80f15ae31e7ec5c055dd919d441b66f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Use the &lt;code&gt;--single-branch&lt;/code&gt; switch&lt;/strong&gt;&lt;em&gt;(available as of Git 1.7.10)&lt;/em&gt;. The syntax is:</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;--single-branch&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;スイッチを&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（Gitの1.7.10のとして利用可能）&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;構文は次のとおりです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c466663fef77118c5cc75675af80fad4b2ddb550" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;or&lt;/strong&gt; just simply type</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;または&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;単にタイプする&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d75454f15ccf43d16729b081d6adde1e4408779c" translate="yes" xml:space="preserve">
          <source>A separate note about tags ... When I start something new I usually tag the empty repository after git init, since</source>
          <target state="translated">タグについての別のメモ ...何か新しいものを始めるときは、通常は git init の後に空のリポジトリにタグを付けます。</target>
        </trans-unit>
        <trans-unit id="fd73099f4bdaed9b9e6d4f46949c3698e0123604" translate="yes" xml:space="preserve">
          <source>After the clone, you can list the tags with &lt;code&gt;$ git tag -l&lt;/code&gt; and then checkout a specific tag:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;クローンの後、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$ git tag -l&lt;/code&gt; で&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;タグをリストし&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、特定のタグをチェックアウト&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;できます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b114e3fd8f5bc5ef90994e5ca3ceee7da1e8bea4" translate="yes" xml:space="preserve">
          <source>And I did get something - a directory, a bunch of subdirectories, etc.</source>
          <target state="translated">そして、私は何かを得ました-ディレクトリ、サブディレクトリの束など。</target>
        </trans-unit>
        <trans-unit id="312ebe543f67cfab3a57a6d58436f7bb6d2b750f" translate="yes" xml:space="preserve">
          <source>But the version name is &quot;&lt;code&gt;Tagged release 1.1.5&lt;/code&gt;&quot; according the site.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ただし、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サイトによる&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と、バージョン名は「&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Tagged release 1.1.5&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;」。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9afa2d1eef7db8bc70beb14fa8037bb2ba360be1" translate="yes" xml:space="preserve">
          <source>Checking out Tags</source>
          <target state="translated">タグをチェックアウトする</target>
        </trans-unit>
        <trans-unit id="3ee8bdbb832abeac97e1f2220ef659a5bc5d6900" translate="yes" xml:space="preserve">
          <source>Create a shallow clone with a history truncated to the specified number of commits. Implies --single-branch unless --no-single-branch is given to fetch the histories near the tips of all branches. If you want to clone submodules shallowly, also pass --shallow-submodules.</source>
          <target state="translated">指定したコミット数に切り捨てられた履歴を持つ浅いクローンを作成します。すべてのブランチの先端付近の履歴を取得するために --no-single-branch が与えられていない限り、-single-branch を意味します。サブモジュールを浅くクローンしたい場合は --shallow-submodules も渡してください。</target>
        </trans-unit>
        <trans-unit id="40dbbe42bdb42805ca9f21dcbcffe893313fe382" translate="yes" xml:space="preserve">
          <source>Documentation for 1.8.0 of &lt;strong&gt;git clone&lt;/strong&gt; states.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;1.8.0の&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;gitクローンの&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;状態&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に関するドキュメント&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="63636b1a9928694216a37b62234b76d4a8c197d3" translate="yes" xml:space="preserve">
          <source>Download a specific tag with Git</source>
          <target state="translated">特定のタグをGitでダウンロードする</target>
        </trans-unit>
        <trans-unit id="82c647280ca838429c41d2e26fc650977933bea6" translate="yes" xml:space="preserve">
          <source>Even better, checkout and create a branch (otherwise you will be on a branch named after the revision number of tag):</source>
          <target state="translated">さらに良いのは、チェックアウトしてブランチを作成することです (そうしないと、タグのリビジョン番号にちなんだブランチになってしまいます)。</target>
        </trans-unit>
        <trans-unit id="bbc1770d4fdc3ba005e0c055e652e0d4e3d65e75" translate="yes" xml:space="preserve">
          <source>Every git repo contains the entire revision history, so cloning the repo gives you access to the latest commit, plus everything that came before, including the tag you're looking for.</source>
          <target state="translated">git repo にはすべてのリビジョン履歴が含まれているので、repo をクローンすると最新のコミットだけでなく、それ以前のすべてのコミットにアクセスすることができます。</target>
        </trans-unit>
        <trans-unit id="5bb367b41e15393e20c4ac4496c7d3f66471af41" translate="yes" xml:space="preserve">
          <source>Export a tag:</source>
          <target state="translated">タグをエクスポートします。</target>
        </trans-unit>
        <trans-unit id="d7fb00f280a5cb01b13fd7f074d48b29d2891179" translate="yes" xml:space="preserve">
          <source>For checking out only a given tag for deployment, I use e.g.:</source>
          <target state="translated">デプロイメントのために指定されたタグだけをチェックアウトするには、例えば以下のようにします。</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="6f3f90e55a7d2c856d15a33d81d7ac5f5b8c4493" translate="yes" xml:space="preserve">
          <source>Hope this will helps you!</source>
          <target state="translated">これはあなたの助けになることを願っています</target>
        </trans-unit>
        <trans-unit id="188904f1c7af0d59c0990063172d2289c51982f9" translate="yes" xml:space="preserve">
          <source>I also didn't want to use CHECKOUT as others have suggested. I had a branch checked out and didn't want to affect that. My intention was to fetch the software I wanted so that I could cherry-pick something and add that to my development.</source>
          <target state="translated">私も他の方が提案されているようにcheckoutは使いたくなかったです。私はブランチをチェックアウトしていたので、それに影響を与えたくなかったのです。私の意図は、何かを選択して開発に加えることができるように、私が欲しかったソフトウェアを取得することでした。</target>
        </trans-unit>
        <trans-unit id="78cad157492cbe0482fbaecdcb9c2ba8ad8f1471" translate="yes" xml:space="preserve">
          <source>I checked the &lt;a href=&quot;http://git-scm.com/docs/git-checkout&quot;&gt;git checkout documentation&lt;/a&gt;, it revealed one interesting thing:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;http://git-scm.com/docs/git-checkout&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;git checkoutのドキュメント&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を確認したところ、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;興味深いことが1つ明らかになりました。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9cb47f09a829201f9306fa992f06a1137de2be9d" translate="yes" xml:space="preserve">
          <source>I didn't want to clone the remote repository as other people have suggested doing, as the project I am working on is large and I want to develop in a nice clean environment. I feel this is closer to the original questions &quot;I'm trying to figure out how do download A PARTICULAR TAG&quot; than the solution which suggests cloning the whole repository. I don't see why anyone should have to have a copy of Windows NT and Windows 8.1 source code if they want to look at DOS 0.1 source code (for example).</source>
          <target state="translated">他の人が提案しているようにリモートリポジトリをクローンしたくなかったのですが、私が取り組んでいるプロジェクトは大規模で、きれいな環境で開発したいと思っています。これは、リポジトリ全体をクローンすることを提案している解決策よりも、元の質問「I'm trying to figure out how do a download A PARTICULAR TAG」に近いと感じています。DOS 0.1 のソースコード (例えば)を見たい場合、誰もが Windows NT と Windows 8.1 のソースコードのコピーを持っていなければならない理由がわかりません。</target>
        </trans-unit>
        <trans-unit id="b724642bcc21ca9230a1e8a4b43bd19ed03889b9" translate="yes" xml:space="preserve">
          <source>I do this is via the github API:</source>
          <target state="translated">私がやっているのはgithub API経由です。</target>
        </trans-unit>
        <trans-unit id="37589d43a55b74a42197abea1a45d067b45b114f" translate="yes" xml:space="preserve">
          <source>I just did this. First I made sure I knew the tag name spelling.</source>
          <target state="translated">今やったんだけど まず、タグ名のスペルを確認しました。</target>
        </trans-unit>
        <trans-unit id="fc7c0276805ee60ffba9ac527fb0a7efb4603ebc" translate="yes" xml:space="preserve">
          <source>I picked the tag I wanted and fetched that and nothing more as follows.</source>
          <target state="translated">欲しいタグを選んで、それをフェッチして、それ以上のものは以下のようにしました。</target>
        </trans-unit>
        <trans-unit id="6853113a939fa28a221eae1bf984409c221b19e2" translate="yes" xml:space="preserve">
          <source>I saw there was a tag for the previous version on the git web page, with object name of something long hex number.</source>
          <target state="translated">gitのWebページに前バージョン用のタグがあって、何か長い16進数のオブジェクト名がついているのを見ました。</target>
        </trans-unit>
        <trans-unit id="b238f5770025997082b1b03b36753293405d676f" translate="yes" xml:space="preserve">
          <source>I then tagged this on my local machine, giving my tag the same name.</source>
          <target state="translated">そして、私はこれをローカルマシンにタグ付けして、私のタグに同じ名前を付けました。</target>
        </trans-unit>
        <trans-unit id="4d08917c5f36a87be3efd588cad166c879458acb" translate="yes" xml:space="preserve">
          <source>I tried a command like this (with names changed):</source>
          <target state="translated">こんなコマンドを試してみました(名前を変えて)。</target>
        </trans-unit>
        <trans-unit id="d3739b35d6a9d13452f1d8ffbbb6891d0e22910b" translate="yes" xml:space="preserve">
          <source>I'm not a git expert, but I think this should work:</source>
          <target state="translated">私はgitの専門家ではありませんが、これはうまくいくはずです。</target>
        </trans-unit>
        <trans-unit id="9b6e7a3f42bab4ed188cee064c4cc8f0e8e499ba" translate="yes" xml:space="preserve">
          <source>I'm trying to figure out how I can download a particular tag of a Git repository - it's one version behind the current version.</source>
          <target state="translated">Git リポジトリの特定のタグをダウンロードする方法を考えています。</target>
        </trans-unit>
        <trans-unit id="ca3a12805e3042d3a9ef5efe098bb6f4edeb5ff5" translate="yes" xml:space="preserve">
          <source>If it's the whole repository, how do I get at the version I'm seeking? If not, how do I download that particular version?</source>
          <target state="translated">リポジトリ全体であれば、どのようにして探しているバージョンにたどり着けるのでしょうか?そうでない場合、その特定のバージョンをダウンロードするにはどうすればいいですか?</target>
        </trans-unit>
        <trans-unit id="4b11ca81c317265052887b3a516a4926ea04681e" translate="yes" xml:space="preserve">
          <source>If you do this and make a commit, your version2 branch will be slightly different than your v2.0.0 tag since it will move forward with your new changes, so do be careful.</source>
          <target state="translated">このようにしてコミットした場合、バージョン2のブランチは新しい変更を進めていくので、v2.0.0.0のタグとは少し違ったものになりますので、注意が必要です。</target>
        </trans-unit>
        <trans-unit id="8d7bb003a7c273aceb4702780e6e8f52255566ed" translate="yes" xml:space="preserve">
          <source>If you want to view the versions of files a tag is pointing to, you can do a git checkout, though this puts your repository in &amp;ldquo;detached HEAD&amp;rdquo; state, which has some ill side effects:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;タグが指しているファイルのバージョンを表示したい場合は、gitチェックアウトを実行できますが、これによりリポジトリが「切り離されたHEAD」状態になり、いくつかの悪影響があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b676a26e5171e81070cbd1cc3a12e60901e5bb1c" translate="yes" xml:space="preserve">
          <source>If you're on a mac, &lt;code&gt;brew install coreutils&lt;/code&gt; and then call gsort instead.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Macを使用している場合は、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;brew install coreutils&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;brewでインストールして&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;から、代わりにgsortを呼び出します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c617297b4d85545818956556786bf00e72648a91" translate="yes" xml:space="preserve">
          <source>If your tags are sortable using the linux &lt;code&gt;sort&lt;/code&gt; command, use this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;タグがlinux &lt;/font&gt;&lt;/font&gt; &lt;code&gt;sort&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コマンドを使用して&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ソート&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;できる場合は、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;次のように使用します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="62fd28455a70088ce879bf286ea57ead8e8ebf5c" translate="yes" xml:space="preserve">
          <source>In &amp;ldquo;detached HEAD&amp;rdquo; state, if you make changes and then create a commit, the tag will stay the same, but your new commit won&amp;rsquo;t belong to any branch and will be unreachable, except for by the exact commit hash. Thus, if you need to make changes&amp;mdash;say you&amp;rsquo;re fixing a bug on an older version, for instance&amp;mdash;you will generally want to create a branch:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;「デタッチされたHEAD」状態では、変更を行ってからコミットを作成すると、タグは同じままですが、新しいコミットはどのブランチにも属せず、正確なコミットハッシュを除いて到達できなくなります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、たとえば古いバージョンのバグを修正する場合など、変更を加える必要がある場合は、通常、ブランチを作成する必要があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="30d9d8bc2bf9777f89d54863bfe409b4f9b83678" translate="yes" xml:space="preserve">
          <source>List tags:</source>
          <target state="translated">タグを一覧表示します。</target>
        </trans-unit>
        <trans-unit id="ddfacf1c5fc4852071822e9501673351927c952b" translate="yes" xml:space="preserve">
          <source>Note: Per &lt;a href=&quot;https://git-scm.com/docs/git-clone&quot;&gt;the Git manual&lt;/a&gt;, passing the &lt;code&gt;--depth&lt;/code&gt; flag implies &lt;code&gt;--single-branch&lt;/code&gt; by default.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;注：&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://git-scm.com/docs/git-clone&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Gitマニュアル&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;よると&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt; &lt;code&gt;--single-branch&lt;/code&gt; &lt;/font&gt; &lt;code&gt;--depth&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;フラグ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を渡すと、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;デフォルトで&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;--single-branchが&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;暗黙&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;指定&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;されます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9c3befe7e22c8667bc957541f49b0ee79970b588" translate="yes" xml:space="preserve">
          <source>Notes:</source>
          <target state="translated">Notes:</target>
        </trans-unit>
        <trans-unit id="f579c523960af1aec824c6fdc57af6d4abd76a1f" translate="yes" xml:space="preserve">
          <source>OR</source>
          <target state="translated">OR</target>
        </trans-unit>
        <trans-unit id="6d6725deb9136610b5c98d0766498e39d6e1780f" translate="yes" xml:space="preserve">
          <source>P.S: In Git, you can't update a tag directly(since tag is just a label to a commit), you need to checkout the same tag as a branch and then commit to it and then create a separate tag.</source>
          <target state="translated">追伸:Gitでは、タグを直接更新することはできません(タグはコミットのラベルに過ぎないので)ので、ブランチとして同じタグをチェックアウトしてからコミットし、別のタグを作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="373b0ffc62e2ba3bdb4c6e13b1ef6df39671d8fe" translate="yes" xml:space="preserve">
          <source>So we can mention the tag name( as tag is nothing but a name of a commit) as, say:</source>
          <target state="translated">そのため、タグ名(タグはコミットの名前に過ぎないので)は、例えば、タグの名前を記載することができます。</target>
        </trans-unit>
        <trans-unit id="25620e23bf2821822c9dada81cddf1e01f07aadf" translate="yes" xml:space="preserve">
          <source>Specifying the prefix will make your code export to a directory (if you include a trailing slash).</source>
          <target state="translated">プレフィックスを指定すると、コードはディレクトリにエクスポートされます (末尾にスラッシュが含まれている場合)。</target>
        </trans-unit>
        <trans-unit id="1023744311aca218014a5497216838215d01e201" translate="yes" xml:space="preserve">
          <source>The benefit: Git will receive objects and (need to) resolve deltas for the specified branch/tag only - while checking out the exact same amount of files! Depending on the source repository, this will save you a lot of disk space. (Plus, it'll be much quicker.)</source>
          <target state="translated">利点:Git はオブジェクトを受け取り、指定された branchtag に対してのみ deltas を解決します-まったく同じ量のファイルをチェックアウトしながら! ソースリポジトリにもよりますが、これにより多くのディスクスペースを節約することができます。(それに加えて、より高速になります。)</target>
        </trans-unit>
        <trans-unit id="fd9efd42659054074a817fa3d405bc1d91054eff" translate="yes" xml:space="preserve">
          <source>The second variation establishes a new branch based on the tag, which lets you avoid a 'detached HEAD'. &lt;a href=&quot;http://git-scm.com/docs/git-checkout&quot;&gt;(git-checkout manual)&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2番目のバリエーションは、タグに基づいて新しいブランチを確立します。これにより、「デタッチされたHEAD」を回避できます。&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://git-scm.com/docs/git-checkout&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（git-checkoutマニュアル）&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="dfee5342d54ff930bf04f35db384b29e66be5c80" translate="yes" xml:space="preserve">
          <source>Then check for the available tags</source>
          <target state="translated">その後、利用可能なタグを確認してください。</target>
        </trans-unit>
        <trans-unit id="839a2e35a961af837bddd2d5092854874c031e30" translate="yes" xml:space="preserve">
          <source>There is probably a way to fetch the tag itself rather than just a copy of the commit that was tagged. I had to tag the fetched commit myself. EDIT: Ah yes, I have found it now.</source>
          <target state="translated">タグ付けされたコミットのコピーではなく、タグ自体をフェッチする方法があるのではないでしょうか。私は自分で取得したコミットにタグを付けなければなりませんでした。EDIT:あ、はい、見つけました。</target>
        </trans-unit>
        <trans-unit id="e3d7abde9d241f0ab7bae24584c012c157282a64" translate="yes" xml:space="preserve">
          <source>This gave me a list of tags on my git server to choose from. 
The original poster already knew his tag's name so this step is not necessary for everyone.
The output looked like this, though the real list was longer.</source>
          <target state="translated">これで、git サーバー上のタグの一覧が表示されるようになりました。元の投稿者はすでに自分のタグの名前を知っていたので、このステップは誰にでも必要なものではありません。実際のリストはもっと長くなりましたが、出力はこのようになりました。</target>
        </trans-unit>
        <trans-unit id="094a59a32b4bc9c999dd9ee55bad27f9f1b526f6" translate="yes" xml:space="preserve">
          <source>This relies on the GNU version of sort, which appropriately handles situations like the one lOranger pointed out:</source>
          <target state="translated">これはソートのGNU版に依存しており、lOrangerが指摘したような状況を適切に処理します。</target>
        </trans-unit>
        <trans-unit id="d35ff6af31b5d397a01a7aff0b5f0e9e34be9ca4" translate="yes" xml:space="preserve">
          <source>This seems to be the fastest way to check out code from a remote repository if one has only interest in the most recent code instead of in a complete repository. In this way, it resembles the 'svn co' command.</source>
          <target state="translated">これは、完全なリポジトリではなく最新のコードにしか興味がない場合、リモートリポジトリからコードをチェックアウトする最速の方法だと思われます。この方法では、これは 'svn co' コマンドに似ています。</target>
        </trans-unit>
        <trans-unit id="bf0edf6e0f95043b7e6d5757d8375ebd3b04a1da" translate="yes" xml:space="preserve">
          <source>Where you see the colon, that is remote-name:local-name and here they are the tag names. This runs without upsetting the working tree etc. It just seems to copy stuff from the remote to the local machine so you have your own copy.</source>
          <target state="translated">コロンを見ると、リモート名:ローカル名となり、ここにタグ名が表示されます。これは、作業ツリーなどに影響を与えることなく実行されます。リモートからローカルマシンにコピーしているようなので、自分のコピーを持っているだけです。</target>
        </trans-unit>
        <trans-unit id="1bb64cbfd9c06848226852178b9001fce7945018" translate="yes" xml:space="preserve">
          <source>Will clone the repo and leave you on the tag you are interested in.</source>
          <target state="translated">レポをクローンして、興味のあるタグを残します。</target>
        </trans-unit>
        <trans-unit id="45bfa3aefdab840167c50938ccb05eafb87fab96" translate="yes" xml:space="preserve">
          <source>Working off of Peter Johnson's answer, I created a nice little alias for myself:</source>
          <target state="translated">ピーター・ジョンソンの答えを参考に 自分用の別名を作った</target>
        </trans-unit>
        <trans-unit id="24d9d35cd8988584aaabe45027aa177aec3ffe31" translate="yes" xml:space="preserve">
          <source>You can also export a zip archive of a tag.</source>
          <target state="translated">タグのzipアーカイブをエクスポートすることもできます。</target>
        </trans-unit>
        <trans-unit id="2ea27378379e6e9e7c64da99200df6730f1d6a61" translate="yes" xml:space="preserve">
          <source>You can use git archive to download a tar ball for a given tag or commit id:</source>
          <target state="translated">git アーカイブを使って、指定したタグやコミット ID の tar ボールをダウンロードすることができます。</target>
        </trans-unit>
        <trans-unit id="34f526ea4b65d983005e361c3b0f7ed12f0de7a0" translate="yes" xml:space="preserve">
          <source>You do not need to specify the format. It will be picked up by the output file name.</source>
          <target state="translated">フォーマットを指定する必要はありません。出力ファイル名でピックアップされます。</target>
        </trans-unit>
        <trans-unit id="bee8fa5530195f1ff0ee4bcab73f35de84233edd" translate="yes" xml:space="preserve">
          <source>aka 'git checkout latest tag'.</source>
          <target state="translated">別名 'git checkout latest tag' です。</target>
        </trans-unit>
        <trans-unit id="b1ca08a3fe074a3e728093a637dc2cb26fe1fd7d" translate="yes" xml:space="preserve">
          <source>eg. if &lt;code&gt;git tag&lt;/code&gt; returns:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;例えば。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;git tag&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が返す&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;場合&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="96cd0b53aa79b6056b7c94b1f38b26b665f7d14b" translate="yes" xml:space="preserve">
          <source>first fetch all the tags in that specific remote</source>
          <target state="translated">最初に、その特定のリモートのすべてのタグを取得します。</target>
        </trans-unit>
        <trans-unit id="54a849d02b192d74b99e86427875f21ba7ca7d8c" translate="yes" xml:space="preserve">
          <source>git checkout -b &amp;lt;new_branch_name&amp;gt; &amp;lt;start_point&amp;gt;
  , where the &amp;lt;start_point&amp;gt; is the name of a commit
  at which to start the new branch;
  Defaults to HEAD</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;git checkout -b &amp;lt;new_branch_name&amp;gt; &amp;lt;start_point&amp;gt;、ここで&amp;lt;start_point&amp;gt;は、新しいブランチを開始するコミットの名前です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;デフォルトはHEADです&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4c4a43eb68d775912e1934fb52f1e3cf6c1795c0" translate="yes" xml:space="preserve">
          <source>i.e. create a commit before my first real change and then later use</source>
          <target state="translated">例えば、最初の実際の変更の前にコミットを作成して、後から</target>
        </trans-unit>
        <trans-unit id="d22b9310841b1505d0a4f0e1ab8004d0e4b2e0be" translate="yes" xml:space="preserve">
          <source>if I want to rebase all my work, &lt;strong&gt;including the first change&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最初の変更を含む&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;すべての作業をリベースしたい場合&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="245e49e1f8d9c267da92bc68142ebea91daceea3" translate="yes" xml:space="preserve">
          <source>is the real answer.</source>
          <target state="translated">が本当の答えです。</target>
        </trans-unit>
        <trans-unit id="03d4f46d2a3f56676f3b48a2f8809671941a570c" translate="yes" xml:space="preserve">
          <source>requires a commit, and the question arises &quot;how do you rebase changes that include your first software change?&quot; So when I start working I do</source>
          <target state="translated">はコミットを必要とし、「最初のソフトウェアの変更を含む変更をどのようにリベースするのか」という疑問が生じます。という疑問が出てきます。</target>
        </trans-unit>
        <trans-unit id="381df060280eb8267f38e05798548f9bf222bece" translate="yes" xml:space="preserve">
          <source>then switch to that specific tag using below command</source>
          <target state="translated">そして、以下のコマンドを使って特定のタグに切り替えます。</target>
        </trans-unit>
        <trans-unit id="026e83c54d45ef5a8260800674bcb66d106ee301" translate="yes" xml:space="preserve">
          <source>to checkout the tag, first clone the repo, then type:</source>
          <target state="translated">タグをチェックアウトするには、まずレポをクローンしてからタイプします。</target>
        </trans-unit>
        <trans-unit id="ee5bcc552a9530d8c817eb7c1414555172f903ff" translate="yes" xml:space="preserve">
          <source>try:</source>
          <target state="translated">try:</target>
        </trans-unit>
        <trans-unit id="c10dc81442168c73798d273aa5c21ebe9cbaf800" translate="yes" xml:space="preserve">
          <source>will give you the whole repository.</source>
          <target state="translated">を実行すると、リポジトリ全体が表示されます。</target>
        </trans-unit>
        <trans-unit id="5ea777222af622bba2a70e02c84e2ec86782cbfa" translate="yes" xml:space="preserve">
          <source>with the --dry-run option added will let you have a look at what the command would do, if you want to verify its what you want. So I guess a simple</source>
          <target state="translated">オプションを追加して --dry-run を実行すると、そのコマンドが何をするのかを確認することができます。ですから、単純な</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
