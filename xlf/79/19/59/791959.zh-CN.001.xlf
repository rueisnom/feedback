<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/791959">
    <body>
      <group id="791959">
        <trans-unit id="af98fe8efdbba76bde441fd83a9ed2ed3ba1e0e2" translate="yes" xml:space="preserve">
          <source>&amp;gt;&amp;gt; git checkout -b 1.0.2_branch 1.0.2</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;gt;&amp;gt; git checkout -b 1.0.2_branch 1.0.2&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="caa74c8279f19027be387f0ec3e6fcc9ef73392c" translate="yes" xml:space="preserve">
          <source>&amp;gt;&amp;gt; git push --tags</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;gt;&amp;gt; git push-标签&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9b8031d101fe54240862b5c3d8679a73c65fac7f" translate="yes" xml:space="preserve">
          <source>(because you asked for the second most recent tag)</source>
          <target state="translated">(因为你问的是第二个最近的标签)</target>
        </trans-unit>
        <trans-unit id="e0f6054779b9b8fe76cbf246ebb7e8a4009f576d" translate="yes" xml:space="preserve">
          <source>--branch can also take tags and detaches the HEAD at that commit in the resulting repository.</source>
          <target state="translated">--branch也可以在生成的版本库中提取标签,并在该提交处分离出head。</target>
        </trans-unit>
        <trans-unit id="fd34c7ff6a38658bdb321731b15aff70ab2e7d3e" translate="yes" xml:space="preserve">
          <source>--depth</source>
          <target state="translated">--depth</target>
        </trans-unit>
        <trans-unit id="027e58f150122e08d3266104e750cbd0ca6e20a6" translate="yes" xml:space="preserve">
          <source>..or whatever tag you need.</source>
          <target state="translated">...或任何你需要的标签。</target>
        </trans-unit>
        <trans-unit id="d512a03e0ffcb28b358442a61c4b8b689fbe2978" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git tag | sort -n | tail -1&lt;/code&gt; will output:</source>
          <target state="translated">&lt;code&gt;git tag | sort -n | tail -1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;将输出：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7c7a3761011b44a47d6265237c8556b58e62b801" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git tag | sort -n | tail -2 | head -1&lt;/code&gt; will output:</source>
          <target state="translated">&lt;code&gt;git tag | sort -n | tail -2 | head -1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;将输出：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4e9fd916c9027078890d2d8f030a5927cffc3679" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;later, modify some files&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;以后，修改一些文件&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9047c2edb80f15ae31e7ec5c055dd919d441b66f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Use the &lt;code&gt;--single-branch&lt;/code&gt; switch&lt;/strong&gt;&lt;em&gt;(available as of Git 1.7.10)&lt;/em&gt;. The syntax is:</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;--single-branch&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;开关&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（自Git 1.7.10起可用）&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;语法为：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c466663fef77118c5cc75675af80fad4b2ddb550" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;or&lt;/strong&gt; just simply type</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;或&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;只是简单地输入&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d75454f15ccf43d16729b081d6adde1e4408779c" translate="yes" xml:space="preserve">
          <source>A separate note about tags ... When I start something new I usually tag the empty repository after git init, since</source>
          <target state="translated">关于标签的单独说明.....当我启动新的东西时,我通常会在git init之后给空的版本库打上标签,因为</target>
        </trans-unit>
        <trans-unit id="fd73099f4bdaed9b9e6d4f46949c3698e0123604" translate="yes" xml:space="preserve">
          <source>After the clone, you can list the tags with &lt;code&gt;$ git tag -l&lt;/code&gt; and then checkout a specific tag:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;克隆之后，可以列出带有&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$ git tag -l&lt;/code&gt; 的标签&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，然后签出特定的标签：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b114e3fd8f5bc5ef90994e5ca3ceee7da1e8bea4" translate="yes" xml:space="preserve">
          <source>And I did get something - a directory, a bunch of subdirectories, etc.</source>
          <target state="translated">而我确实得到了一些东西--一个目录,一堆子目录等等。</target>
        </trans-unit>
        <trans-unit id="312ebe543f67cfab3a57a6d58436f7bb6d2b750f" translate="yes" xml:space="preserve">
          <source>But the version name is &quot;&lt;code&gt;Tagged release 1.1.5&lt;/code&gt;&quot; according the site.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;但是&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;该站点&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的版本名称是&amp;ldquo; &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Tagged release 1.1.5&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &amp;rdquo;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9afa2d1eef7db8bc70beb14fa8037bb2ba360be1" translate="yes" xml:space="preserve">
          <source>Checking out Tags</source>
          <target state="translated">结账标签</target>
        </trans-unit>
        <trans-unit id="3ee8bdbb832abeac97e1f2220ef659a5bc5d6900" translate="yes" xml:space="preserve">
          <source>Create a shallow clone with a history truncated to the specified number of commits. Implies --single-branch unless --no-single-branch is given to fetch the histories near the tips of all branches. If you want to clone submodules shallowly, also pass --shallow-submodules.</source>
          <target state="translated">创建一个浅层的克隆,将历史记录截断到指定的提交数量。暗示 --single-branch,除非 --no-single-branch 是为了获取所有分支顶端附近的历史。如果你想浅层复制子模块,也可以通过 --shallow-submodules。</target>
        </trans-unit>
        <trans-unit id="40dbbe42bdb42805ca9f21dcbcffe893313fe382" translate="yes" xml:space="preserve">
          <source>Documentation for 1.8.0 of &lt;strong&gt;git clone&lt;/strong&gt; states.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;git克隆&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;状态&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;1.8.0的文档&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="63636b1a9928694216a37b62234b76d4a8c197d3" translate="yes" xml:space="preserve">
          <source>Download a specific tag with Git</source>
          <target state="translated">用Git下载特定的标签</target>
        </trans-unit>
        <trans-unit id="82c647280ca838429c41d2e26fc650977933bea6" translate="yes" xml:space="preserve">
          <source>Even better, checkout and create a branch (otherwise you will be on a branch named after the revision number of tag):</source>
          <target state="translated">更好的是,结账并创建一个分支(否则你会在一个以标签的修订号命名的分支上)。</target>
        </trans-unit>
        <trans-unit id="bbc1770d4fdc3ba005e0c055e652e0d4e3d65e75" translate="yes" xml:space="preserve">
          <source>Every git repo contains the entire revision history, so cloning the repo gives you access to the latest commit, plus everything that came before, including the tag you're looking for.</source>
          <target state="translated">每个git repo都包含了整个修订历史,所以克隆repo可以让你访问最新的提交,以及之前的所有内容,包括你要找的标签。</target>
        </trans-unit>
        <trans-unit id="5bb367b41e15393e20c4ac4496c7d3f66471af41" translate="yes" xml:space="preserve">
          <source>Export a tag:</source>
          <target state="translated">导出一个标签。</target>
        </trans-unit>
        <trans-unit id="d7fb00f280a5cb01b13fd7f074d48b29d2891179" translate="yes" xml:space="preserve">
          <source>For checking out only a given tag for deployment, I use e.g.:</source>
          <target state="translated">对于只检查出一个给定标签的部署,我使用例如。</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例如:</target>
        </trans-unit>
        <trans-unit id="6f3f90e55a7d2c856d15a33d81d7ac5f5b8c4493" translate="yes" xml:space="preserve">
          <source>Hope this will helps you!</source>
          <target state="translated">希望对你有帮助!</target>
        </trans-unit>
        <trans-unit id="188904f1c7af0d59c0990063172d2289c51982f9" translate="yes" xml:space="preserve">
          <source>I also didn't want to use CHECKOUT as others have suggested. I had a branch checked out and didn't want to affect that. My intention was to fetch the software I wanted so that I could cherry-pick something and add that to my development.</source>
          <target state="translated">我也不想像别人建议的那样使用CHECKOUT。我有一个分支被检查出来了,不想影响到这一点。我的本意是想把我想要的软件拿过来,这样我就可以樱桃小菜一碟,然后把它加到我的开发中。</target>
        </trans-unit>
        <trans-unit id="78cad157492cbe0482fbaecdcb9c2ba8ad8f1471" translate="yes" xml:space="preserve">
          <source>I checked the &lt;a href=&quot;http://git-scm.com/docs/git-checkout&quot;&gt;git checkout documentation&lt;/a&gt;, it revealed one interesting thing:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我检查了&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://git-scm.com/docs/git-checkout&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;git checkout文档&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，发现了一件有趣的事情：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9cb47f09a829201f9306fa992f06a1137de2be9d" translate="yes" xml:space="preserve">
          <source>I didn't want to clone the remote repository as other people have suggested doing, as the project I am working on is large and I want to develop in a nice clean environment. I feel this is closer to the original questions &quot;I'm trying to figure out how do download A PARTICULAR TAG&quot; than the solution which suggests cloning the whole repository. I don't see why anyone should have to have a copy of Windows NT and Windows 8.1 source code if they want to look at DOS 0.1 source code (for example).</source>
          <target state="translated">我不想像其他人建议的那样克隆远程版本库,因为我正在做的项目比较大,希望在一个干净的环境下开发。我觉得这更接近于最初的问题 &quot;I'm trying to figure out how do download A PARTICULAR TAG&quot;,而不是建议克隆整个版本库的解决方案。我不明白为什么有人要看DOS 0.1源代码(比如说DOS 0.1源代码),就一定要有Windows NT和Windows 8.1源代码的拷贝。</target>
        </trans-unit>
        <trans-unit id="b724642bcc21ca9230a1e8a4b43bd19ed03889b9" translate="yes" xml:space="preserve">
          <source>I do this is via the github API:</source>
          <target state="translated">我这样做是通过github API。</target>
        </trans-unit>
        <trans-unit id="37589d43a55b74a42197abea1a45d067b45b114f" translate="yes" xml:space="preserve">
          <source>I just did this. First I made sure I knew the tag name spelling.</source>
          <target state="translated">我刚才是这样做的。首先,我确定我知道标签名称的拼写。</target>
        </trans-unit>
        <trans-unit id="fc7c0276805ee60ffba9ac527fb0a7efb4603ebc" translate="yes" xml:space="preserve">
          <source>I picked the tag I wanted and fetched that and nothing more as follows.</source>
          <target state="translated">我选了一个我想要的标签,然后取了这个标签,没有其他的,如下图所示。</target>
        </trans-unit>
        <trans-unit id="6853113a939fa28a221eae1bf984409c221b19e2" translate="yes" xml:space="preserve">
          <source>I saw there was a tag for the previous version on the git web page, with object name of something long hex number.</source>
          <target state="translated">我看到git网页上有一个前一个版本的标签,对象名称是长长的十六进制数的东西。</target>
        </trans-unit>
        <trans-unit id="b238f5770025997082b1b03b36753293405d676f" translate="yes" xml:space="preserve">
          <source>I then tagged this on my local machine, giving my tag the same name.</source>
          <target state="translated">然后我在我的本地机上打上了这个标签,给我的标签起了同样的名字。</target>
        </trans-unit>
        <trans-unit id="4d08917c5f36a87be3efd588cad166c879458acb" translate="yes" xml:space="preserve">
          <source>I tried a command like this (with names changed):</source>
          <target state="translated">我试了一个这样的命令(改了名字)。</target>
        </trans-unit>
        <trans-unit id="d3739b35d6a9d13452f1d8ffbbb6891d0e22910b" translate="yes" xml:space="preserve">
          <source>I'm not a git expert, but I think this should work:</source>
          <target state="translated">我不是git专家,但我觉得这个应该可以。</target>
        </trans-unit>
        <trans-unit id="9b6e7a3f42bab4ed188cee064c4cc8f0e8e499ba" translate="yes" xml:space="preserve">
          <source>I'm trying to figure out how I can download a particular tag of a Git repository - it's one version behind the current version.</source>
          <target state="translated">我想知道如何下载一个Git仓库的特定标签-它比当前版本晚了一个版本。</target>
        </trans-unit>
        <trans-unit id="ca3a12805e3042d3a9ef5efe098bb6f4edeb5ff5" translate="yes" xml:space="preserve">
          <source>If it's the whole repository, how do I get at the version I'm seeking? If not, how do I download that particular version?</source>
          <target state="translated">如果是整个版本库,我怎么才能找到我想要的版本?如果不是,我如何下载那个特定的版本?</target>
        </trans-unit>
        <trans-unit id="4b11ca81c317265052887b3a516a4926ea04681e" translate="yes" xml:space="preserve">
          <source>If you do this and make a commit, your version2 branch will be slightly different than your v2.0.0 tag since it will move forward with your new changes, so do be careful.</source>
          <target state="translated">如果你这样做并提交,你的版本2分支将与你的v2.0.0.0标签稍有不同,因为它将随着你的新修改向前移动,所以一定要小心。</target>
        </trans-unit>
        <trans-unit id="8d7bb003a7c273aceb4702780e6e8f52255566ed" translate="yes" xml:space="preserve">
          <source>If you want to view the versions of files a tag is pointing to, you can do a git checkout, though this puts your repository in &amp;ldquo;detached HEAD&amp;rdquo; state, which has some ill side effects:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果要查看标签指向的文件的版本，可以执行git checkout，尽管这会使存储库处于&amp;ldquo;分离的HEAD&amp;rdquo;状态，这会带来一些不良影响：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b676a26e5171e81070cbd1cc3a12e60901e5bb1c" translate="yes" xml:space="preserve">
          <source>If you're on a mac, &lt;code&gt;brew install coreutils&lt;/code&gt; and then call gsort instead.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果您使用的是Mac，请&lt;/font&gt;&lt;/font&gt; &lt;code&gt;brew install coreutils&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，然后致电gsort。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c617297b4d85545818956556786bf00e72648a91" translate="yes" xml:space="preserve">
          <source>If your tags are sortable using the linux &lt;code&gt;sort&lt;/code&gt; command, use this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果您的标签可以使用linux &lt;/font&gt;&lt;/font&gt; &lt;code&gt;sort&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;命令&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;进行&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;排序&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，请使用以下命令：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="62fd28455a70088ce879bf286ea57ead8e8ebf5c" translate="yes" xml:space="preserve">
          <source>In &amp;ldquo;detached HEAD&amp;rdquo; state, if you make changes and then create a commit, the tag will stay the same, but your new commit won&amp;rsquo;t belong to any branch and will be unreachable, except for by the exact commit hash. Thus, if you need to make changes&amp;mdash;say you&amp;rsquo;re fixing a bug on an older version, for instance&amp;mdash;you will generally want to create a branch:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在&amp;ldquo;分离式HEAD&amp;rdquo;状态下，如果进行更改然后创建提交，则标记将保持不变，但是您的新提交将不属于任何分支，并且将无法访问，除了确切的提交哈希。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因此，如果您需要进行更改（例如，例如，您要修复旧版本的错误），则通常需要创建一个分支：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="30d9d8bc2bf9777f89d54863bfe409b4f9b83678" translate="yes" xml:space="preserve">
          <source>List tags:</source>
          <target state="translated">列表标签:</target>
        </trans-unit>
        <trans-unit id="ddfacf1c5fc4852071822e9501673351927c952b" translate="yes" xml:space="preserve">
          <source>Note: Per &lt;a href=&quot;https://git-scm.com/docs/git-clone&quot;&gt;the Git manual&lt;/a&gt;, passing the &lt;code&gt;--depth&lt;/code&gt; flag implies &lt;code&gt;--single-branch&lt;/code&gt; by default.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;注意：根据&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://git-scm.com/docs/git-clone&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Git手册&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;默认情况下&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，传递&lt;/font&gt;&lt;/font&gt; &lt;code&gt;--depth&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;标志意味着&lt;/font&gt;&lt;/font&gt; &lt;code&gt;--single-branch&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9c3befe7e22c8667bc957541f49b0ee79970b588" translate="yes" xml:space="preserve">
          <source>Notes:</source>
          <target state="translated">Notes:</target>
        </trans-unit>
        <trans-unit id="f579c523960af1aec824c6fdc57af6d4abd76a1f" translate="yes" xml:space="preserve">
          <source>OR</source>
          <target state="translated">OR</target>
        </trans-unit>
        <trans-unit id="6d6725deb9136610b5c98d0766498e39d6e1780f" translate="yes" xml:space="preserve">
          <source>P.S: In Git, you can't update a tag directly(since tag is just a label to a commit), you need to checkout the same tag as a branch and then commit to it and then create a separate tag.</source>
          <target state="translated">P.S:在Git中,你不能直接更新一个标签(因为标签只是一个提交的标签),你需要把同一个标签作为一个分支,然后提交给它,然后创建一个单独的标签。</target>
        </trans-unit>
        <trans-unit id="373b0ffc62e2ba3bdb4c6e13b1ef6df39671d8fe" translate="yes" xml:space="preserve">
          <source>So we can mention the tag name( as tag is nothing but a name of a commit) as, say:</source>
          <target state="translated">所以我们可以把标签的名字(因为标签只是一个提交的名字)提到,比如说。</target>
        </trans-unit>
        <trans-unit id="25620e23bf2821822c9dada81cddf1e01f07aadf" translate="yes" xml:space="preserve">
          <source>Specifying the prefix will make your code export to a directory (if you include a trailing slash).</source>
          <target state="translated">指定前缀将使你的代码导出到一个目录中(如果你包含了斜线)。</target>
        </trans-unit>
        <trans-unit id="1023744311aca218014a5497216838215d01e201" translate="yes" xml:space="preserve">
          <source>The benefit: Git will receive objects and (need to) resolve deltas for the specified branch/tag only - while checking out the exact same amount of files! Depending on the source repository, this will save you a lot of disk space. (Plus, it'll be much quicker.)</source>
          <target state="translated">好处是:Git将只接收指定的分支标记的对象和(需要)解析deltas----同时检查出完全相同数量的文件!这将为你节省磁盘空间。根据源码库的不同,这将为你节省大量的磁盘空间。(另外,这将会更快。)</target>
        </trans-unit>
        <trans-unit id="fd9efd42659054074a817fa3d405bc1d91054eff" translate="yes" xml:space="preserve">
          <source>The second variation establishes a new branch based on the tag, which lets you avoid a 'detached HEAD'. &lt;a href=&quot;http://git-scm.com/docs/git-checkout&quot;&gt;(git-checkout manual)&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;第二个变种基于标签建立一个新的分支，这使您可以避免&amp;ldquo;分离的HEAD&amp;rdquo;。&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://git-scm.com/docs/git-checkout&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（git-checkout手册）&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="dfee5342d54ff930bf04f35db384b29e66be5c80" translate="yes" xml:space="preserve">
          <source>Then check for the available tags</source>
          <target state="translated">然后检查可用的标签</target>
        </trans-unit>
        <trans-unit id="839a2e35a961af837bddd2d5092854874c031e30" translate="yes" xml:space="preserve">
          <source>There is probably a way to fetch the tag itself rather than just a copy of the commit that was tagged. I had to tag the fetched commit myself. EDIT: Ah yes, I have found it now.</source>
          <target state="translated">可能有一种方法可以提取标签本身,而不是仅仅提取被标记的提交的副本。我不得不自己给提取的提交打上标签。EDIT:啊,是的,我现在找到了。</target>
        </trans-unit>
        <trans-unit id="e3d7abde9d241f0ab7bae24584c012c157282a64" translate="yes" xml:space="preserve">
          <source>This gave me a list of tags on my git server to choose from. 
The original poster already knew his tag's name so this step is not necessary for everyone.
The output looked like this, though the real list was longer.</source>
          <target state="translated">这就给了我git服务器上的标签列表供我选择。最初的发帖者已经知道他的标签名称,所以这一步对每个人来说都没有必要。输出结果是这样的,虽然真正的列表要长一些。</target>
        </trans-unit>
        <trans-unit id="094a59a32b4bc9c999dd9ee55bad27f9f1b526f6" translate="yes" xml:space="preserve">
          <source>This relies on the GNU version of sort, which appropriately handles situations like the one lOranger pointed out:</source>
          <target state="translated">这有赖于 GNU 版本的 sort,它可以适当地处理像 lOranger 指出的那种情况。</target>
        </trans-unit>
        <trans-unit id="d35ff6af31b5d397a01a7aff0b5f0e9e34be9ca4" translate="yes" xml:space="preserve">
          <source>This seems to be the fastest way to check out code from a remote repository if one has only interest in the most recent code instead of in a complete repository. In this way, it resembles the 'svn co' command.</source>
          <target state="translated">如果一个人只对最近的代码感兴趣,而不是对一个完整的代码库感兴趣,那么这似乎是最快的方法来检查远程代码库中的代码。这样,它类似于'svn co'命令。</target>
        </trans-unit>
        <trans-unit id="bf0edf6e0f95043b7e6d5757d8375ebd3b04a1da" translate="yes" xml:space="preserve">
          <source>Where you see the colon, that is remote-name:local-name and here they are the tag names. This runs without upsetting the working tree etc. It just seems to copy stuff from the remote to the local machine so you have your own copy.</source>
          <target state="translated">你看到冒号的地方,就是远程名:本地名,这里是标签名。这样运行时不会破坏工作树等。它似乎只是把东西从远程复制到本地机,所以你有自己的副本。</target>
        </trans-unit>
        <trans-unit id="1bb64cbfd9c06848226852178b9001fce7945018" translate="yes" xml:space="preserve">
          <source>Will clone the repo and leave you on the tag you are interested in.</source>
          <target state="translated">将克隆repo,并在你感兴趣的标签上留下你。</target>
        </trans-unit>
        <trans-unit id="45bfa3aefdab840167c50938ccb05eafb87fab96" translate="yes" xml:space="preserve">
          <source>Working off of Peter Johnson's answer, I created a nice little alias for myself:</source>
          <target state="translated">根据Peter Johnson的回答,我为自己创造了一个漂亮的小化名。</target>
        </trans-unit>
        <trans-unit id="24d9d35cd8988584aaabe45027aa177aec3ffe31" translate="yes" xml:space="preserve">
          <source>You can also export a zip archive of a tag.</source>
          <target state="translated">你也可以导出一个标签的压缩存档。</target>
        </trans-unit>
        <trans-unit id="2ea27378379e6e9e7c64da99200df6730f1d6a61" translate="yes" xml:space="preserve">
          <source>You can use git archive to download a tar ball for a given tag or commit id:</source>
          <target state="translated">你可以使用git存档来下载一个给定标签或提交ID的tar球。</target>
        </trans-unit>
        <trans-unit id="34f526ea4b65d983005e361c3b0f7ed12f0de7a0" translate="yes" xml:space="preserve">
          <source>You do not need to specify the format. It will be picked up by the output file name.</source>
          <target state="translated">你不需要指定格式。它将被输出的文件名所接收。</target>
        </trans-unit>
        <trans-unit id="bee8fa5530195f1ff0ee4bcab73f35de84233edd" translate="yes" xml:space="preserve">
          <source>aka 'git checkout latest tag'.</source>
          <target state="translated">又名'git checkout latest tag'。</target>
        </trans-unit>
        <trans-unit id="b1ca08a3fe074a3e728093a637dc2cb26fe1fd7d" translate="yes" xml:space="preserve">
          <source>eg. if &lt;code&gt;git tag&lt;/code&gt; returns:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;例如。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果&lt;/font&gt;&lt;/font&gt; &lt;code&gt;git tag&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;返回：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="96cd0b53aa79b6056b7c94b1f38b26b665f7d14b" translate="yes" xml:space="preserve">
          <source>first fetch all the tags in that specific remote</source>
          <target state="translated">先提取该远程的所有标签</target>
        </trans-unit>
        <trans-unit id="54a849d02b192d74b99e86427875f21ba7ca7d8c" translate="yes" xml:space="preserve">
          <source>git checkout -b &amp;lt;new_branch_name&amp;gt; &amp;lt;start_point&amp;gt;
  , where the &amp;lt;start_point&amp;gt; is the name of a commit
  at which to start the new branch;
  Defaults to HEAD</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;git checkout -b &amp;lt;new_branch_name&amp;gt; &amp;lt;start_point&amp;gt;，其中&amp;lt;start_point&amp;gt;是开始新分支的提交的名称；&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;默认为HEAD&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4c4a43eb68d775912e1934fb52f1e3cf6c1795c0" translate="yes" xml:space="preserve">
          <source>i.e. create a commit before my first real change and then later use</source>
          <target state="translated">也就是说,在我第一次真正的修改之前创建一个提交,然后稍后使用</target>
        </trans-unit>
        <trans-unit id="d22b9310841b1505d0a4f0e1ab8004d0e4b2e0be" translate="yes" xml:space="preserve">
          <source>if I want to rebase all my work, &lt;strong&gt;including the first change&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果我想重新整理我的所有工作，&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;包括第一次更改&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="245e49e1f8d9c267da92bc68142ebea91daceea3" translate="yes" xml:space="preserve">
          <source>is the real answer.</source>
          <target state="translated">才是真正的答案。</target>
        </trans-unit>
        <trans-unit id="03d4f46d2a3f56676f3b48a2f8809671941a570c" translate="yes" xml:space="preserve">
          <source>requires a commit, and the question arises &quot;how do you rebase changes that include your first software change?&quot; So when I start working I do</source>
          <target state="translated">需要提交,那么问题就来了,&quot;你如何对包括你的第一个软件变更的变更进行重启?&quot; 所以,当我开始工作时,我会做</target>
        </trans-unit>
        <trans-unit id="381df060280eb8267f38e05798548f9bf222bece" translate="yes" xml:space="preserve">
          <source>then switch to that specific tag using below command</source>
          <target state="translated">然后使用以下命令切换到特定的标签</target>
        </trans-unit>
        <trans-unit id="026e83c54d45ef5a8260800674bcb66d106ee301" translate="yes" xml:space="preserve">
          <source>to checkout the tag, first clone the repo, then type:</source>
          <target state="translated">要检查标签,首先克隆repo,然后键入。</target>
        </trans-unit>
        <trans-unit id="ee5bcc552a9530d8c817eb7c1414555172f903ff" translate="yes" xml:space="preserve">
          <source>try:</source>
          <target state="translated">try:</target>
        </trans-unit>
        <trans-unit id="c10dc81442168c73798d273aa5c21ebe9cbaf800" translate="yes" xml:space="preserve">
          <source>will give you the whole repository.</source>
          <target state="translated">会给你整个资源库。</target>
        </trans-unit>
        <trans-unit id="5ea777222af622bba2a70e02c84e2ec86782cbfa" translate="yes" xml:space="preserve">
          <source>with the --dry-run option added will let you have a look at what the command would do, if you want to verify its what you want. So I guess a simple</source>
          <target state="translated">添加了 --dry-run 选项,如果你想验证它是你想要的,你可以看看这个命令会做什么。所以,我想,如果你想确认是否是你想要的,那么简单的</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
