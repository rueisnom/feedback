<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/9554636">
    <body>
      <group id="9554636">
        <trans-unit id="855f9e933886a93d32ebf837609b340fe090e632" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/internalframe.html&quot;&gt;&lt;code&gt;JInternalFrame&lt;/code&gt;/&lt;code&gt;JDesktopPane&lt;/code&gt;&lt;/a&gt; typically used for an &lt;a href=&quot;http://en.wikipedia.org/wiki/Multiple_document_interface&quot;&gt;MDI&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/internalframe.html&quot;&gt; &lt;code&gt;JInternalFrame&lt;/code&gt; / &lt;code&gt;JDesktopPane&lt;/code&gt; &lt;/a&gt;は通常&lt;a href=&quot;http://en.wikipedia.org/wiki/Multiple_document_interface&quot;&gt;MDIに&lt;/a&gt;使用されます。</target>
        </trans-unit>
        <trans-unit id="a46d13b700a93249f6afe7fb6bfe1e263e5530b0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/layeredpane.html&quot;&gt;&lt;code&gt;JLayeredPane&lt;/code&gt;&lt;/a&gt; far many well ..layered components.</source>
          <target state="translated">&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/layeredpane.html&quot;&gt; &lt;code&gt;JLayeredPane&lt;/code&gt; は&lt;/a&gt;はるかに多くの..layeredコンポーネントです。</target>
        </trans-unit>
        <trans-unit id="fa15a30d2ea44e1bae88344bfaba468ce12217dd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/splitpane.html&quot;&gt;&lt;code&gt;JSplitPane&lt;/code&gt;&lt;/a&gt; A way to display two components of which the importance between one or the other (the size) varies according to what the user is doing.</source>
          <target state="translated">&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/splitpane.html&quot;&gt; &lt;code&gt;JSplitPane&lt;/code&gt; &lt;/a&gt;ユーザーが何をしているかによって、どちらか一方の重要度（サイズ）が異なる2つのコンポーネントを表示する方法。</target>
        </trans-unit>
        <trans-unit id="109151339ec6f5994c59939e3d44bde37775fe57" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/tabbedpane.html&quot;&gt;&lt;code&gt;JTabbedPane&lt;/code&gt;&lt;/a&gt; for groups of components.</source>
          <target state="translated">コンポーネントのグループの&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/tabbedpane.html&quot;&gt; &lt;code&gt;JTabbedPane&lt;/code&gt; &lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="4d1c280dafddc96fddfd673c95475f20a70bbd27" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/toolbar.html&quot;&gt;&lt;code&gt;JToolBar&lt;/code&gt;&lt;/a&gt; typically contains groups of actions or controls.  Can be dragged around the GUI, or off it entirely according to user need.  As mentioned above, will minimize/restore according to the parent doing so.</source>
          <target state="translated">&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/toolbar.html&quot;&gt; &lt;code&gt;JToolBar&lt;/code&gt; に&lt;/a&gt;は通常、アクションまたはコントロールのグループが含まれています。 ユーザーのニーズに応じて、GUIの周りにドラッグしたり、GUIの外にドラッグしたりできます。 上記のように、それを行う親に従って最小化/復元します。</target>
        </trans-unit>
        <trans-unit id="763086f93c3af994a0218d3c81cbcc6c22c71525" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/layout/card.html&quot;&gt;&lt;code&gt;CardLayout&lt;/code&gt;&lt;/a&gt; (short &lt;a href=&quot;https://stackoverflow.com/a/5786005/418556&quot;&gt;demo.&lt;/a&gt;). Good for:</source>
          <target state="translated">&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/layout/card.html&quot;&gt; &lt;code&gt;CardLayout&lt;/code&gt; &lt;/a&gt; （短い&lt;a href=&quot;https://stackoverflow.com/a/5786005/418556&quot;&gt;デモ。&lt;/a&gt; ）。 良い：</target>
        </trans-unit>
        <trans-unit id="550f5f00bb5b95d41520ea13e97393e21fb1dc71" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://stackoverflow.com/a/5630271/418556&quot;&gt;Nested layouts&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/a/5630271/418556&quot;&gt;ネストされたレイアウト&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="e69a34a769e8e98953e94688ba466fa5ffa332bf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;It's easy to use JInternalFrame&lt;/strong&gt; This is kind of retorical, now it's way easier and other people smarter ( or with more spare time) than us have already think through the Desktop and JInternalFrame pattern, so I would recommend to use it.</source>
          <target state="translated">&lt;strong&gt;JInternalFrame&lt;/strong&gt;は&lt;strong&gt;簡単に使用できます&lt;/strong&gt;これは一種の反省事項ですが、デスクトップとJInternalFrameパターンを使用して考えたよりもはるかに簡単で、他の人が（またはより多くの時間を使って）賢くなっているので、使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="6505550594a36da49202f35678c36a219cd1bc64" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;It's more expensive:&lt;/strong&gt; you will have to allocate way more resources to draw a JFrame that other kind of window container, such as Dialog or JInternalFrame.</source>
          <target state="translated">&lt;strong&gt;それはより高価です：&lt;/strong&gt; JFrameを描画するために、DialogやJInternalFrameなどの他の種類のウィンドウコンテナーよりも多くのリソースを割り当てる必要があります。</target>
        </trans-unit>
        <trans-unit id="64a9e72acd1aeb2087f34209c0fdded738377ff3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Makes it easy for end-users to reference outside material&lt;/strong&gt; - Once, I had this situation: My app had a &quot;data viewer,&quot; from which you could click &quot;Add New&quot; and it would open a data entry screen. Initially, both were &lt;code&gt;JFrame&lt;/code&gt;s. However, I wanted the data entry screen to be a &lt;code&gt;JDialog&lt;/code&gt; whose parent was the data viewer. I made the change, and immediately I received a call from an end-user who relied heavily on the fact that he could minimize or close the &lt;strong&gt;viewer&lt;/strong&gt; and keep the &lt;strong&gt;editor&lt;/strong&gt; open while he referenced another part of the program (or a website, I don't remember). He's &lt;strong&gt;not&lt;/strong&gt; on a multi-monitor, so he needed the entry dialog to be first and &lt;em&gt;something else&lt;/em&gt; to be second, with the data viewer completely hidden. This was impossible with a &lt;code&gt;JDialog&lt;/code&gt; and certainly would've been impossible with a &lt;code&gt;JInternalFrame&lt;/code&gt; as well. I begrudgingly changed it back to being separate &lt;code&gt;JFrames&lt;/code&gt; for his sanity, but it taught me an important lesson.</source>
          <target state="translated">&lt;strong&gt;エンドユーザーが外部の資料を簡単に参照できるようにします&lt;/strong&gt; -かつて私は次のような状況に陥りました。私のアプリには「データビューア」があり、そこから「新規追加」をクリックするとデータ入力画面が開きます。 最初は、どちらも &lt;code&gt;JFrame&lt;/code&gt; でした。 ただし、データ入力画面を、親がデータビューアである &lt;code&gt;JDialog&lt;/code&gt; にする必要がありました。 私は変更を加え、すぐに、プログラムの別の部分（またはWebサイト、私は参照しません）を参照しながら、 &lt;strong&gt;ビューア&lt;/strong&gt;を最小化または閉じ、 &lt;strong&gt;エディターを&lt;/strong&gt;開いたままにすることができるという事実に大きく依存するエンドユーザーから電話を受けました覚えていない）。 彼はマルチモニターを使用して&lt;strong&gt;いない&lt;/strong&gt;ため、データビューアを完全に非表示にして、最初に入力ダイアログを、次に別のダイアログを表示する必要がありました。 これは &lt;code&gt;JDialog&lt;/code&gt; では不可能でしたが、 &lt;code&gt;JInternalFrame&lt;/code&gt; でも不可能でした。 私は不本意ながら彼の正気のために別の &lt;code&gt;JFrames&lt;/code&gt; 戻しましたが、それは私に重要な教訓を教えてくれました。</target>
        </trans-unit>
        <trans-unit id="c350bf5b7874fb5157fa5b4d297e3baedf5daf04" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Myth/Unproven: Resource Heavy&lt;/strong&gt; - I'd like to see some facts behind this speculative statement. Although, perhaps, you could say a &lt;code&gt;JFrame&lt;/code&gt; needs more space than a &lt;code&gt;JInternalFrame&lt;/code&gt;, even if you open up 100 &lt;code&gt;JFrame&lt;/code&gt;s, how many more resources would you really be consuming? If your concern is memory leaks because of resources: calling &lt;code&gt;dispose()&lt;/code&gt; frees all resources used by the frame for garbage collection (and, again I say, a &lt;code&gt;JInternalFrame&lt;/code&gt; should invoke exactly the same concern).</source>
          <target state="translated">&lt;strong&gt;神話/証明されていない：リソースが重い&lt;/strong&gt; -この投機的なステートメントの背後にあるいくつかの事実を知りたいのですが。 おそらく、 &lt;code&gt;JFrame&lt;/code&gt; には &lt;code&gt;JInternalFrame&lt;/code&gt; よりも多くのスペースが必要であると言えるかもしれませんが、100個の &lt;code&gt;JFrame&lt;/code&gt; を開いたとしても、実際にはどれだけ多くのリソースを消費しますか？ リソースが原因でメモリリークが懸念される場合： &lt;code&gt;dispose()&lt;/code&gt; を呼び出すと、ガベージコレクションのためにフレームが使用していたすべてのリソースが解放されます（つまり、 &lt;code&gt;JInternalFrame&lt;/code&gt; でもまったく同じ問題が発生するはずです）。</target>
        </trans-unit>
        <trans-unit id="efb2fd64572b99552839bf2317681d6459eacddf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Myth: Hard to code&lt;/strong&gt; - This is not true in my experience. I don't see why it would be any easier to create a &lt;code&gt;JInternalFrame&lt;/code&gt; than a &lt;code&gt;JFrame&lt;/code&gt;. In fact, in my experience, &lt;code&gt;JInternalFrames&lt;/code&gt; offer much less flexibility. I have developed a systematic way of handling the opening &amp;amp; closing of &lt;code&gt;JFrame&lt;/code&gt;s in my apps that really works well. I control the frame almost completely from within the frame's code itself; the creation of the new frame, &lt;code&gt;SwingWorker&lt;/code&gt;s that control the retrieval of data on background threads and the GUI code on EDT, restoring/bringing to front the frame if the user tries to open it twice, etc. All you need to open my &lt;code&gt;JFrame&lt;/code&gt;s is call a public static method &lt;code&gt;open()&lt;/code&gt; and the open method, combined with a &lt;code&gt;windowClosing()&lt;/code&gt; event handles the rest (is the frame already open? is it not open, but loading? etc.) I made this approach a template so it's not difficult to implement for each frame.</source>
          <target state="translated">&lt;strong&gt;神話：コーディングが難しい&lt;/strong&gt; -これは私の経験では当てはまりません。 &lt;code&gt;JFrame&lt;/code&gt; より &lt;code&gt;JInternalFrame&lt;/code&gt; を作成する方が簡単な理由はわかりません。 実際、私の経験では、 &lt;code&gt;JInternalFrames&lt;/code&gt; は柔軟性がはるかに低くなっています。 アプリで &lt;code&gt;JFrame&lt;/code&gt; の開閉を処理する体系的な方法を開発しました。 フレームのコード自体からフレームをほぼ完全に制御します。 新しいフレームの作成、バックグラウンドスレッドでのデータの取得とEDTでのGUIコードを制御する &lt;code&gt;SwingWorker&lt;/code&gt; 、ユーザーがフレームを2回開こうとした場合に復元してフレームの前面に移動するなど、 &lt;code&gt;JFrame&lt;/code&gt; を開くために必要なすべてsはpublic staticメソッド &lt;code&gt;open()&lt;/code&gt; を呼び出し、openメソッドを &lt;code&gt;windowClosing()&lt;/code&gt; イベントと組み合わせて残りを処理します（フレームはすでに開いていますか？フレームは開いていませんか？読み込み中など）このアプローチをテンプレートにしました。フレームごとに実装することは難しくありません。</target>
        </trans-unit>
        <trans-unit id="b720d278aac00ca850d3c60052ad4c0ee45a6be7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Not user friendly:&lt;/strong&gt; It is not easy to navigate into a bunch of JFrame stuck together, it will look like your application is a set of applications inconsistent and poorly design.</source>
          <target state="translated">&lt;strong&gt;ユーザーフレンドリー&lt;/strong&gt;ではありません&lt;strong&gt;：&lt;/strong&gt;くっついたJFrameの束に移動するのは簡単ではありません。アプリケーションが一貫性のない一連のアプリケーションであり、デザインが不十分であるように見えます。</target>
        </trans-unit>
        <trans-unit id="e47badd23c6e53dbd9b63a1f01bbb996aa64fedf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Ultimate flexibility in layout&lt;/strong&gt; - By allowing separate &lt;code&gt;JFrame&lt;/code&gt;s, you give your end-user the ability to spread out and control what's on his/her screen. The concept feels &quot;open&quot; and non-constricting. You lose this when you go towards one big &lt;code&gt;JFrame&lt;/code&gt; and a bunch of &lt;code&gt;JInternalFrame&lt;/code&gt;s.</source>
          <target state="translated">&lt;strong&gt;レイアウトの究極の柔軟性&lt;/strong&gt; -個別の &lt;code&gt;JFrame&lt;/code&gt; を許可することにより、エンドユーザーは自分の画面上にあるものを広げて制御できるようになります。 コンセプトは「オープン」であり、締め付けを感じさせません。 1つの大きな &lt;code&gt;JFrame&lt;/code&gt; と &lt;code&gt;JInternalFrame&lt;/code&gt; のJInternalFrameに向かうと、これは失われます 。</target>
        </trans-unit>
        <trans-unit id="84a7ad212cb5de26f474e362ca7b87eca229fa40" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Works well for very modularized applications&lt;/strong&gt; - In my case, most of my applications have 3 - 5 big &quot;modules&quot; that really have nothing to do with each other whatsoever. For instance, one module might be a sales dashboard and one might be an accounting dashboard. They don't talk to each other or anything. However, the executive might want to open both and them being separate frames on the taskbar makes his life easier.</source>
          <target state="translated">&lt;strong&gt;非常にモジュール化されたアプリケーションに適しています&lt;/strong&gt; -私の場合、ほとんどのアプリケーションには3〜5個の大きな「モジュール」があり、実際には互いに何の関係もありません。 たとえば、1つのモジュールが販売ダッシュボードであり、1つが会計ダッシュボードである場合があります。 彼らはお互いに何も話しません。 ただし、幹部は両方を開きたい場合があり、それらはタスクバーの別々のフレームであるため、彼の生活が楽になります。</target>
        </trans-unit>
        <trans-unit id="c09531f11456b32284ff4e2a43762199b6770665" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/misc/modality.html&quot;&gt;modal dialog&lt;/a&gt; offers the easy opportunity to focus attention on the content of that dialog - choose/fix/cancel this, &lt;strong&gt;then&lt;/strong&gt; proceed.  Multiple frames do not.</source>
          <target state="translated">&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/misc/modality.html&quot;&gt;モーダルダイアログ&lt;/a&gt;は、そのダイアログの内容に注意を集中させる簡単な機会を提供します-これを選択/修正/キャンセルしてから続行します。 複数のフレームにはありません。</target>
        </trans-unit>
        <trans-unit id="77810e31cc11f1c6c67cebac737ee31a02924ebe" translate="yes" xml:space="preserve">
          <source>A dialog (or floating tool-bar) with a parent will come to front when the parent is clicked on - you'd have to implement that in frames if that was the desired behavior.</source>
          <target state="translated">親を持つダイアログ(またはフローティングツールバー)は、親がクリックされると前面に出てきます。</target>
        </trans-unit>
        <trans-unit id="52189483e5b90097f0c12c725e7468b27890f539" translate="yes" xml:space="preserve">
          <source>A few months ago we started getting requests from our customers to make these report viewer windows modeless, so that they could have multiple reports open at the same time.</source>
          <target state="translated">数ヶ月前、私たちはお客様から、複数のレポートを同時に開くことができるように、これらのレポートビューアウィンドウをモデル化してほしいという要望を受け始めました。</target>
        </trans-unit>
        <trans-unit id="668c86d396f1672863ae5b4773825a8d5d39ac9b" translate="yes" xml:space="preserve">
          <source>A great example of multiple frames/single document per frame (&lt;a href=&quot;http://en.wikipedia.org/wiki/Single_document_interface&quot;&gt;SDI&lt;/a&gt;) vs single frame/multiple documents per frame (&lt;a href=&quot;http://en.wikipedia.org/wiki/Multiple_document_interface&quot;&gt;MDI&lt;/a&gt;) is Microsoft Excel. Some of MDI benefits:</source>
          <target state="translated">複数のフレーム/フレームごとの単一のドキュメント（ &lt;a href=&quot;http://en.wikipedia.org/wiki/Single_document_interface&quot;&gt;SDI&lt;/a&gt; ）と、1つのフレームごとの単一のドキュメント/複数のドキュメント（ &lt;a href=&quot;http://en.wikipedia.org/wiki/Multiple_document_interface&quot;&gt;MDI&lt;/a&gt; ）の良い例は、Microsoft Excelです。 MDIの利点のいくつか：</target>
        </trans-unit>
        <trans-unit id="481be78e172b7c4c1ccc2711164c06866ca4de84" translate="yes" xml:space="preserve">
          <source>A nightmare to code and maintain:</source>
          <target state="translated">コード化と保守には悪夢だ</target>
        </trans-unit>
        <trans-unit id="81e29999fc6773f2d1b64774d9f19aac3a5acde1" translate="yes" xml:space="preserve">
          <source>A single &lt;code&gt;JLabel&lt;/code&gt; (centered in a scroll pane) to display whichever image the user is interested in at that moment.  As seen in &lt;a href=&quot;https://stackoverflow.com/a/13463684/418556&quot;&gt;&lt;code&gt;ImageViewer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">単一の &lt;code&gt;JLabel&lt;/code&gt; （スクロール区画の中央）は、ユーザーがその時点で興味のある画像を表示します。 &lt;a href=&quot;https://stackoverflow.com/a/13463684/418556&quot;&gt; &lt;code&gt;ImageViewer&lt;/code&gt; に&lt;/a&gt;見られるように。</target>
        </trans-unit>
        <trans-unit id="bbb2bffa61ffc5da7a6aa465611d7a0863e77051" translate="yes" xml:space="preserve">
          <source>A single row &lt;code&gt;JList&lt;/code&gt;. As seen in &lt;a href=&quot;https://stackoverflow.com/a/9544652/418556&quot;&gt;this answer&lt;/a&gt;.  The 'single row' part of that only works if they are all the same dimensions.  Alternately, if you are prepared to scale the images on the fly, and they are all the same aspect ratio (e.g. 4:3 or 16:9).</source>
          <target state="translated">単一行の &lt;code&gt;JList&lt;/code&gt; 。 &lt;a href=&quot;https://stackoverflow.com/a/9544652/418556&quot;&gt;この答えに&lt;/a&gt;見られるように。 それらの「単一行」部分は、それらがすべて同じ次元である場合にのみ機能します。 あるいは、その場で画像を拡大縮小する準備ができていて、それらがすべて同じアスペクト比（4：3または16：9など）である場合。</target>
        </trans-unit>
        <trans-unit id="dc55daa7dd0a9587b2c55b293fa2cc08de97b8cf" translate="yes" xml:space="preserve">
          <source>Also we can switch between this &lt;code&gt;JPanel&lt;/code&gt;s. So it gives us freedom to display more than on thing in the &lt;code&gt;JFrame&lt;/code&gt;.</source>
          <target state="translated">また、この &lt;code&gt;JPanel&lt;/code&gt; を切り替えることもできます。 したがって、 &lt;code&gt;JFrame&lt;/code&gt; に表示する以上のものを自由に表示できます。</target>
        </trans-unit>
        <trans-unit id="235a62d33b197f5e505ad2f49140e11726f388af" translate="yes" xml:space="preserve">
          <source>As items in a &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/list.html&quot;&gt;&lt;code&gt;JList&lt;/code&gt;&lt;/a&gt; (simple example below).</source>
          <target state="translated">&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/list.html&quot;&gt; &lt;code&gt;JList&lt;/code&gt; の&lt;/a&gt;項目として（以下の簡単な例）。</target>
        </trans-unit>
        <trans-unit id="b88696386beb9499cee8e8d14cb2dbe189e4727c" translate="yes" xml:space="preserve">
          <source>As nodes in a &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/tree.html&quot;&gt;&lt;code&gt;JTree&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/tree.html&quot;&gt; &lt;code&gt;JTree&lt;/code&gt; の&lt;/a&gt;ノードとして。</target>
        </trans-unit>
        <trans-unit id="fa88a229b782b18f180bc35ea575c9856c05f12d" translate="yes" xml:space="preserve">
          <source>Bad (bad, bad) practice.</source>
          <target state="translated">悪い(悪い、悪い)練習。</target>
        </trans-unit>
        <trans-unit id="2d4d395e63075e1d369f76a05fc7ad4309ce2242" translate="yes" xml:space="preserve">
          <source>Bad practice definitely. One reason is that it is not very 'user-friendly' for the fact that every &lt;code&gt;JFrame&lt;/code&gt; shows a new taskbar icon. Controlling multiple &lt;code&gt;JFrame&lt;/code&gt;s will have you ripping your hair out.</source>
          <target state="translated">間違いなく悪い習慣。 1つの理由は、すべての &lt;code&gt;JFrame&lt;/code&gt; に新しいタスクバーアイコンが表示されるため、「ユーザーフレンドリー」ではないためです。 複数の &lt;code&gt;JFrame&lt;/code&gt; を制御すると、髪の毛が抜けます。</target>
        </trans-unit>
        <trans-unit id="48b7e32b0d0b98dfd1849893ada1230a6994eabe" translate="yes" xml:space="preserve">
          <source>But if those strategies do not work for a particular use-case, try the following.  Establish a single main &lt;code&gt;JFrame&lt;/code&gt;, then have &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/dialog.html&quot;&gt;&lt;code&gt;JDialog&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/dialog.html#features&quot;&gt;&lt;code&gt;JOptionPane&lt;/code&gt;&lt;/a&gt; instances appear for the rest of the free-floating elements, using the frame as the parent for the dialogs.</source>
          <target state="translated">ただし、これらの戦略が特定のユースケースで機能しない場合は、以下を試してください。 単一のメイン &lt;code&gt;JFrame&lt;/code&gt; を確立し、フレームをダイアログの親として使用して、残りの浮動要素の&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/dialog.html&quot;&gt; &lt;code&gt;JDialog&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/dialog.html#features&quot;&gt; &lt;code&gt;JOptionPane&lt;/code&gt; &lt;/a&gt;インスタンスを表示します。</target>
        </trans-unit>
        <trans-unit id="372547561d143dc46d276e8a37f9d3e37875665f" translate="yes" xml:space="preserve">
          <source>But its better to change one &lt;code&gt;JFrame&lt;/code&gt; for our different needs rather than having multiple &lt;code&gt;JFrame&lt;/code&gt;s.</source>
          <target state="translated">ただし、複数の &lt;code&gt;JFrame&lt;/code&gt; を用意するよりも、ニーズに合わせて1つの &lt;code&gt;JFrame&lt;/code&gt; を変更する方が適切です。</target>
        </trans-unit>
        <trans-unit id="8b7b9110186106fbc6770f355b804553c6609a8c" translate="yes" xml:space="preserve">
          <source>Displaying list, tree etc. selections for items that have an associated component.</source>
          <target state="translated">関連するコンポーネントを持つ項目のリスト、ツリーなどの選択を表示する。</target>
        </trans-unit>
        <trans-unit id="f20aa55ef6fcf5d4c20d52e4186907ac6e4f6540" translate="yes" xml:space="preserve">
          <source>Flipping between no component and visible component.</source>
          <target state="translated">コンポーネントがない場合と、コンポーネントが見える場合の反転。</target>
        </trans-unit>
        <trans-unit id="e964c3e4f6b23a66ecbd023460578f171f5d331e" translate="yes" xml:space="preserve">
          <source>For each &lt;code&gt;JPanel&lt;/code&gt; we can design different things and all this &lt;code&gt;JPanel&lt;/code&gt; can be displayed on the single &lt;code&gt;JFrame&lt;/code&gt;one at a time.</source>
          <target state="translated">&lt;code&gt;JPanel&lt;/code&gt; ごとに異なるものを設計でき、このすべての &lt;code&gt;JPanel&lt;/code&gt; を一度に1つの &lt;code&gt;JFrame&lt;/code&gt; に表示できます。</target>
        </trans-unit>
        <trans-unit id="38348ede1c8912649e35d338068ca9b9b1ed3244" translate="yes" xml:space="preserve">
          <source>For modeless dialogs, pass a null parent to the constructor, but locate them relative to their 'parent' window.</source>
          <target state="translated">modelessダイアログの場合、コンストラクタにnullの親を渡しますが、それらは'親'ウィンドウからの相対的な位置に配置されます。</target>
        </trans-unit>
        <trans-unit id="c62455a2a5cd91e7727a1d98153de9e332b98738" translate="yes" xml:space="preserve">
          <source>For some time I resisted this request as I did not think this was a good solution. However, my mind was changed when I found out how the users were getting around this 'deficiency' of our system.</source>
          <target state="translated">しばらくの間、私はこれが良い解決策ではないと思い、この要求に抵抗していました。しかし、この「不備」を利用者がどうやって回避しているのかを知り、考えが変わりました。</target>
        </trans-unit>
        <trans-unit id="c191869b8a33edda7cdd405128b0e40442840200" translate="yes" xml:space="preserve">
          <source>I think using multiple &lt;code&gt;Jframe&lt;/code&gt;s is not a good idea.</source>
          <target state="translated">複数の &lt;code&gt;Jframe&lt;/code&gt; を使用することは良い考えではないと思います。</target>
        </trans-unit>
        <trans-unit id="47beb323263604d1b1e5e6f6e5c6d3e720f4a9d6" translate="yes" xml:space="preserve">
          <source>I'd like to counter the &quot;not user friendly&quot; argument with an example that I have just been involved with.</source>
          <target state="translated">ユーザーフレンドリーではない」という論調には、私が関わったばかりの例を挙げて反論してみたいと思います。</target>
        </trans-unit>
        <trans-unit id="1af47f037ee6de340a78c3f8c81dbe89cae14102" translate="yes" xml:space="preserve">
          <source>I'm developing an application which displays images, and plays sounds from a database. I'm trying to decide whether or not to use a separate JFrame to add images to the database from the GUI.</source>
          <target state="translated">私は画像を表示し、データベースから音を再生するアプリケーションを開発しています。GUIからデータベースに画像を追加するために、別のJFrameを使用するかどうかを決めようとしています。</target>
        </trans-unit>
        <trans-unit id="e4ec08d035a2860eaee2641f5d1b48e4d2025766" translate="yes" xml:space="preserve">
          <source>I'm just wondering whether it is good practice to use multiple JFrame windows?</source>
          <target state="translated">ただ、JFrameのウィンドウを複数使うのは良いことなのかどうか気になるところです。</target>
        </trans-unit>
        <trans-unit id="6166fff8262f4671ea4124eb1c4dce25116ab7c4" translate="yes" xml:space="preserve">
          <source>I'm just wondering whether it is good practice to use multiple JFrames?</source>
          <target state="translated">ただ、複数のJFrameを使うのが良いのかな?</target>
        </trans-unit>
        <trans-unit id="70109a724c8dab00d6202da1795974ff980336d6" translate="yes" xml:space="preserve">
          <source>I've written a lot and I feel like I could write more. Anyways, I hope I don't get down-voted simply because it's an unpopular opinion. The question is clearly a valuable one and I hope I've provided a valuable answer, even if it isn't the common opinion.</source>
          <target state="translated">いろいろ書いてしまったので、もっと書けそうな気がします。とにかく、不人気な意見だからといって、単純にダウン投票されなければいいのですが。明らかに貴重な質問なので、一般的な意見ではなくても、価値ある回答ができたのではないかと期待しています。</target>
        </trans-unit>
        <trans-unit id="c11d1eae3222d1ad420eabf6693a1a8a14bc6ddf" translate="yes" xml:space="preserve">
          <source>If the frames are going to be the same size, why not create the frame and pass the frame then as a reference to it instead.</source>
          <target state="translated">フレームが同じサイズになるのであれば、フレームを作成して、そのフレームへの参照としてフレームを渡してはどうでしょうか。</target>
        </trans-unit>
        <trans-unit id="d8eca14de00affb5abab3c716277e3216fff2b85" translate="yes" xml:space="preserve">
          <source>In our application we have a main window where the users run various 'programs' as separate tabs. As much as possible we have tried to keep our application to this single window.</source>
          <target state="translated">私たちのアプリケーションでは、ユーザーが別のタブとして様々な「プログラム」を実行するメインウィンドウを持っています。私たちは可能な限り、アプリケーションをこの単一のウィンドウに収めるようにしています。</target>
        </trans-unit>
        <trans-unit id="70c20b9a9bc2f25260461351498ba9aef81d17b2" translate="yes" xml:space="preserve">
          <source>In this case where the multiple elements are images, it would be better to use either of the following instead:</source>
          <target state="translated">複数の要素が画像である場合は、代わりに以下のどちらかを使用した方が良いでしょう。</target>
        </trans-unit>
        <trans-unit id="ede8b7972234cfca52cc35fd271479bfd7c63d76" translate="yes" xml:space="preserve">
          <source>Instead we can use &lt;code&gt;JPanel&lt;/code&gt;s more than one or more &lt;code&gt;JPanel&lt;/code&gt; in the same &lt;code&gt;JFrame&lt;/code&gt;.</source>
          <target state="translated">代わりに、同じ &lt;code&gt;JFrame&lt;/code&gt; で複数の &lt;code&gt;JPanel&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="6f41475e79339890879ae861045ad68c3e7bd735" translate="yes" xml:space="preserve">
          <source>It is not a good practice but even though you wish to use it you can use the singleton pattern as its good. I have used the singleton patterns in most of my project its good.</source>
          <target state="translated">良い練習にはなりませんが、使いたいと思ってもシングルトンパターンは良いので使えます。私はほとんどのプロジェクトでシングルトンパターンを使っています。</target>
        </trans-unit>
        <trans-unit id="80e6f7ce8bf052de169f73af25b368215b3c8388" translate="yes" xml:space="preserve">
          <source>It seems to be best practice to use JDialog's for these modeless windows</source>
          <target state="translated">これらのモデルのないウィンドウには JDialog を使用するのが最善の方法のようです。</target>
        </trans-unit>
        <trans-unit id="298c9c67ea16ba4bc93f201fc45211b386669a87" translate="yes" xml:space="preserve">
          <source>It's been a while since the last time i touch swing but in general is a bad practice to do this. Some of the main disadvantages that comes to mind:</source>
          <target state="translated">それは私が最後に触れるスイングからしばらくの間ですが、一般的には、これを行うには悪い練習です。心に浮かぶ主な欠点のいくつか。</target>
        </trans-unit>
        <trans-unit id="a7df5571c3f2bc8c6d0d8d7e5164858995ac3c72" translate="yes" xml:space="preserve">
          <source>MDI (Multiple-Document Interface, i.e., every window can have multiple documents):</source>
          <target state="translated">MDI(Multiple-Document Interface、すなわち、すべてのウィンドウが複数の文書を持つことができる)。</target>
        </trans-unit>
        <trans-unit id="c041fbc6f6d5e8180164af2e81ff649862ed2f1c" translate="yes" xml:space="preserve">
          <source>Make an jInternalFrame into main frame and make it invisible. Then you can use it for further events.</source>
          <target state="translated">jInternalFrameをメインフレームにして、見えないようにします。そうすれば、それ以降のイベントに使用することができます。</target>
        </trans-unit>
        <trans-unit id="19799c5d85ff59ea7febea012652a9f4974c293e" translate="yes" xml:space="preserve">
          <source>Many images</source>
          <target state="translated">多くの画像</target>
        </trans-unit>
        <trans-unit id="abe5bc4e611a570041b7ddf07077ea1fc14ea933" translate="yes" xml:space="preserve">
          <source>More than one &lt;code&gt;JFrame&lt;/code&gt; is not a good practice, but there is nothing wrong if we want more than one &lt;code&gt;JFrame&lt;/code&gt;.</source>
          <target state="translated">複数の &lt;code&gt;JFrame&lt;/code&gt; は良い習慣ではありませんが、複数のJFrameが必要な場合でも問題はありません。</target>
        </trans-unit>
        <trans-unit id="4c6983f6b6fab768e218346da2e077d79ea85ffb" translate="yes" xml:space="preserve">
          <source>Multiple JFrame objects = Pain, trouble, and problems.</source>
          <target state="translated">複数のJFrameオブジェクト=痛み、悩み、問題。</target>
        </trans-unit>
        <trans-unit id="aa24bb0d2031831f6d23f49b9461a627edcfa34d" translate="yes" xml:space="preserve">
          <source>One of the 'programs' they run presents a list of reports that have been generated by the system, and the user can click on an icon on each line to pop open a report viewer dialog. This viewer is showing the equivalent of the portrait/landscape A4 page(s) of the report, so the users like this window to be quite big, almost filling their screens.</source>
          <target state="translated">彼らが実行する'プログラム'の一つは、システムによって生成されたレポートのリストを提示し、ユーザーは各行のアイコンをクリックして、レポートビューアダイアログをポップアップで開くことができます。このビューアはレポートの縦長のA4ページに相当するものを表示しているので、ユーザーはこのウィンドウが画面いっぱいになるほど大きくなるのが好きです。</target>
        </trans-unit>
        <trans-unit id="455bf84971f11c9b9b4e73032d41fc1c9c19bc5c" translate="yes" xml:space="preserve">
          <source>Personally, I would use ONE &lt;code&gt;JFrame&lt;/code&gt; for your kind of application. Methods of displaying multiple things is up to you, there are many. &lt;code&gt;Canvas&lt;/code&gt;es, &lt;code&gt;JInternalFrame&lt;/code&gt;, &lt;code&gt;CardLayout&lt;/code&gt;, even &lt;code&gt;JPanel&lt;/code&gt;s possibly.</source>
          <target state="translated">個人的には、あなたの種類のアプリケーションにはONE &lt;code&gt;JFrame&lt;/code&gt; を使用します。 複数のものを表示する方法はあなた次第です、たくさんあります。 &lt;code&gt;Canvas&lt;/code&gt; es、 &lt;code&gt;JInternalFrame&lt;/code&gt; 、 &lt;code&gt;CardLayout&lt;/code&gt; 、さらには &lt;code&gt;JPanel&lt;/code&gt; も。</target>
        </trans-unit>
        <trans-unit id="a02280d6357b0974accd403fc8e774f7f619fe2c" translate="yes" xml:space="preserve">
          <source>SDI (Single-Document Interface, i.e., every window can only have a single document):</source>
          <target state="translated">SDI (Single-Document Interface、すなわち、すべてのウィンドウが単一のドキュメントしか持てない)。</target>
        </trans-unit>
        <trans-unit id="21804c77671ee36486bcf0c9bf85e5d1f9e47d65" translate="yes" xml:space="preserve">
          <source>SOME NOTES:</source>
          <target state="translated">いくつかのメモ。</target>
        </trans-unit>
        <trans-unit id="c99545794d629ad61770e4f2281ea9d1b95b7c1b" translate="yes" xml:space="preserve">
          <source>Showing wizard like dialogs.</source>
          <target state="translated">ウィザードのようなダイアログを表示する</target>
        </trans-unit>
        <trans-unit id="0bf5dabc7cb7282680a7e0e93e293d6b01de6405" translate="yes" xml:space="preserve">
          <source>So I relented and made the viewer modeless. This means that each viewer has a task-bar icon.</source>
          <target state="translated">そこで、私は我慢して、ビューアをmodelessにしました。つまり、各ビューアにはタスクバーのアイコンがついています。</target>
        </trans-unit>
        <trans-unit id="9969b7a30e587dc86c6ccd9bc10943865a3888d2" translate="yes" xml:space="preserve">
          <source>So you go ahead and tell your users that what they want is bad, but ultimately it won't do you any favours.</source>
          <target state="translated">だから、あなたは先に行って、あなたのユーザーに彼らが望むものは悪いと言いますが、最終的にはそれはあなたのために何の利益にもなりません。</target>
        </trans-unit>
        <trans-unit id="da7bec0bb8499c9086a991e52be889b85f7197bc" translate="yes" xml:space="preserve">
          <source>So, I'm going to explain the benefits of the multiple &lt;code&gt;JFrame&lt;/code&gt; approach, as well as myth-bust some of the cons that others have presented.</source>
          <target state="translated">そこで、複数の &lt;code&gt;JFrame&lt;/code&gt; アプローチの利点と、他の人が提示したいくつかの短所を神話で説明することにします。</target>
        </trans-unit>
        <trans-unit id="9555a28c03ec4e74732765af9fd7a7315e2519fd" translate="yes" xml:space="preserve">
          <source>The Use of Multiple JFrames: Good or Bad Practice</source>
          <target state="translated">複数の JFrames の使用。良いことか悪いことか</target>
        </trans-unit>
        <trans-unit id="ceb502ac410c531592f1d728b268dd2b741ea8a0" translate="yes" xml:space="preserve">
          <source>The multiple &lt;code&gt;JFrame&lt;/code&gt; approach has been something I've implemented since I began programming Swing apps. For the most part, I did it in the beginning because I didn't know any better. &lt;strong&gt;However&lt;/strong&gt;, as I matured in my experience and knowledge as a developer and as began to read and absorb the opinions of so many more experienced Java devs online, I made an attempt to &lt;strong&gt;shift away&lt;/strong&gt; from the multiple &lt;code&gt;JFrame&lt;/code&gt; approach (both in current projects and future projects) only to be met with... get this... &lt;em&gt;resistance from my clients!&lt;/em&gt; As I began implementing modal dialogs to control &quot;child&quot; windows and &lt;code&gt;JInternalFrame&lt;/code&gt;s for separate components, &lt;strong&gt;my clients began to complain!&lt;/strong&gt; I was quite surprised, as I was doing what I thought was best-practice! But, as they say, &quot;A happy wife is a happy life.&quot; Same goes for your clients. Of course, I am a contractor so my end-users have direct access to me, the developer, which is obviously not a common scenario.</source>
          <target state="translated">複数の &lt;code&gt;JFrame&lt;/code&gt; アプローチは、Swingアプリのプログラミングを始めてから実装してきました。 ほとんどの場合、私はこれ以上何も知らなかったので、最初にそれを行いました。 &lt;strong&gt;しかし&lt;/strong&gt; 、私は開発者としての経験と知識を成熟させ、より多くの経験豊富なJava開発者の意見をオンラインで読み、吸収し始めたので、複数の &lt;code&gt;JFrame&lt;/code&gt; アプローチ（現在のプロジェクトと将来の両方）から&lt;strong&gt;離れよ&lt;/strong&gt;うとしました。プロジェクト）のみに会う...これを得る... &lt;em&gt;私のクライアントからの抵抗！&lt;/em&gt; 「子」ウィ​​ンドウと個別のコンポーネントの &lt;code&gt;JInternalFrame&lt;/code&gt; を制御するモーダルダイアログの実装を始めると&lt;strong&gt;、クライアントから不満が出始めました。&lt;/strong&gt; 自分がベストプラクティスだと思っていたことをやっていたので、私はかなり驚きました！ しかし、彼らが言うように、「幸せな妻は幸せな人生です」。 クライアントにも同じことが言えます。 もちろん、私は請負業者なので、エンドユーザーは開発者である私に直接アクセスできますが、これは明らかに一般的なシナリオではありません。</target>
        </trans-unit>
        <trans-unit id="cc0f517ed38d5dc4aee1525800cb76944363c44a" translate="yes" xml:space="preserve">
          <source>There are any number of ways of displaying many elements in one GUI, e.g.:</source>
          <target state="translated">1つのGUIで多くの要素を表示する方法はいくらでもあります。</target>
        </trans-unit>
        <trans-unit id="876809a0777c1f327a13c68dfb31e3a3b557deed" translate="yes" xml:space="preserve">
          <source>They were opening a viewer, using the 'Save As' facility to save the report as a PDF to a specific directory, using Acrobat Reader to open the PDF file, and then they would do the same with the next report. They would have multiple Acrobat Readers running with the various report outputs that they wanted to look at.</source>
          <target state="translated">彼らはビューアを開き、「名前を付けて保存」機能を使ってレポートをPDFとして特定のディレクトリに保存し、Acrobat Readerを使ってPDFファイルを開き、次のレポートでも同じことをしていました。複数のAcrobat Readerを起動させて、見たい様々なレポート出力を表示させていたのです。</target>
        </trans-unit>
        <trans-unit id="07adcf3f02b71244d6c5593ea0fb0de89ed0f816" translate="yes" xml:space="preserve">
          <source>To switch between this &lt;code&gt;JPanel&lt;/code&gt;s use &lt;code&gt;JMenuBar&lt;/code&gt; with &lt;code&gt;JMenuItems&lt;/code&gt; for each &lt;code&gt;JPanel&lt;/code&gt;or 'JButton&lt;code&gt;for each&lt;/code&gt;JPanel`.</source>
          <target state="translated">この &lt;code&gt;JPanel&lt;/code&gt; を切り替えるには、 &lt;code&gt;JMenuBar&lt;/code&gt; を各 &lt;code&gt;JPanel&lt;/code&gt; の &lt;code&gt;JMenuItems&lt;/code&gt; または「 &lt;code&gt;for each&lt;/code&gt; JpanelのJButton」とともに使用します 。</target>
        </trans-unit>
        <trans-unit id="1ef67bd016d5084cd1dc89a3544f7b7deae7f76c" translate="yes" xml:space="preserve">
          <source>Use the constructors that use the new &lt;code&gt;ModalityType&lt;/code&gt; rather than the boolean &lt;code&gt;modal&lt;/code&gt; argument. This is what gives these dialogs the task-bar icon.</source>
          <target state="translated">ブールの &lt;code&gt;modal&lt;/code&gt; 引数ではなく、新しい &lt;code&gt;ModalityType&lt;/code&gt; を使用するコンストラクターを使用します。 これにより、これらのダイアログにタスクバーアイコンが表示されます。</target>
        </trans-unit>
        <trans-unit id="37df70d866bcd3bb36a8422c910e346f9cb84c7b" translate="yes" xml:space="preserve">
          <source>User unfriendly: The user sees multiple icons in their task bar when expecting to see only one.  Plus the side effects of the coding problems..</source>
          <target state="translated">ユーザーに優しくない:1つしか表示されないと思っていたのに、タスクバーに複数のアイコンが表示されてしまいます。さらに、コーディングの問題の副作用もあります。</target>
        </trans-unit>
        <trans-unit id="ba1a9fa2fb40926910838f2b5d2d0d17281ee5e1" translate="yes" xml:space="preserve">
          <source>Version 6 of Java on Windows has a &lt;a href=&quot;http://bugs.sun.com/view_bug.do?bug_id=6829546&quot;&gt;bug&lt;/a&gt; which means that your main window can become 'always on top' without you telling it. Upgrade to version 7 to fix this</source>
          <target state="translated">Windows上のJavaのバージョン6には&lt;a href=&quot;http://bugs.sun.com/view_bug.do?bug_id=6829546&quot;&gt;バグが&lt;/a&gt;あります。つまり、メインウィンドウは、ユーザーに通知せずに「常に最前面」になる可能性があります。 これを修正するには、バージョン7にアップグレードしてください</target>
        </trans-unit>
        <trans-unit id="5727d35c6ceab167cf86a91daab09b3830139fa4" translate="yes" xml:space="preserve">
          <source>When the latest version was released to them last week, the overwhelming response from them is that they LOVE it. It's been one of our most popular recent enhancements to the system.</source>
          <target state="translated">先週彼らに最新版をリリースしたところ、圧倒的な反響があったのが「LOVE」ということです。最近の機能強化の中でも最も人気のあるものの一つです。</target>
        </trans-unit>
        <trans-unit id="bfe52204fef7c1c1111b24e5c4b045c5b10d5af6" translate="yes" xml:space="preserve">
          <source>When you have passed the frame you can then decide how to populate it. It would be like having a method for calculating the average of a set of figures. Would you create the method over and over again?</source>
          <target state="translated">フレームを渡したら、それをどのように埋めていくかを決めることができます。一組の数値の平均を計算するメソッドを持つようなものです。何度も何度もメソッドを作りますか?</target>
        </trans-unit>
        <trans-unit id="9e6d5433c3d8befdb496a1390c3d98c9e607a226" translate="yes" xml:space="preserve">
          <source>it is possible to have a few windows in non rectangular shape - so they don't hide desktop or other window from another process (e.g. web browser)</source>
          <target state="translated">長方形ではない形でいくつかのウィンドウを持つことが可能です-デスクトップや他のウィンドウを他のプロセス(例えばウェブブラウザ)から隠さないようにします</target>
        </trans-unit>
        <trans-unit id="63c50400e1490c23c20ab019c4988e31ae00c26c" translate="yes" xml:space="preserve">
          <source>it is possible to have different documents on different screens, which is especially useful when screens do not have the same resolution</source>
          <target state="translated">は、異なるスクリーンで異なるドキュメントを表示することが可能で、スクリーンの解像度が同じでない場合に特に便利です。</target>
        </trans-unit>
        <trans-unit id="d0f48a7c2e4973a385323f0ad23b27b44b967cb3" translate="yes" xml:space="preserve">
          <source>it is possible to open a window from another process over one Excel window while writing in second Excel window - with MDI, trying to write in one of internal windows will give focus to the entire Excel window, hence hiding window from another process</source>
          <target state="translated">2番目のExcelウィンドウに書き込み中に1つのExcelウィンドウの上に別のプロセスからウィンドウを開くことが可能です-MDIでは、内部ウィンドウのいずれかに書き込みをしようとすると、Excelウィンドウ全体にフォーカスを与えるため、別のプロセスからウィンドウを非表示にする</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
