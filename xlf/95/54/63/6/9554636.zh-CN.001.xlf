<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/9554636">
    <body>
      <group id="9554636">
        <trans-unit id="855f9e933886a93d32ebf837609b340fe090e632" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/internalframe.html&quot;&gt;&lt;code&gt;JInternalFrame&lt;/code&gt;/&lt;code&gt;JDesktopPane&lt;/code&gt;&lt;/a&gt; typically used for an &lt;a href=&quot;http://en.wikipedia.org/wiki/Multiple_document_interface&quot;&gt;MDI&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/internalframe.html&quot;&gt; &lt;code&gt;JInternalFrame&lt;/code&gt; / &lt;code&gt;JDesktopPane&lt;/code&gt; &lt;/a&gt;通常用于&lt;a href=&quot;http://en.wikipedia.org/wiki/Multiple_document_interface&quot;&gt;MDI&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="a46d13b700a93249f6afe7fb6bfe1e263e5530b0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/layeredpane.html&quot;&gt;&lt;code&gt;JLayeredPane&lt;/code&gt;&lt;/a&gt; far many well ..layered components.</source>
          <target state="translated">&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/layeredpane.html&quot;&gt; &lt;code&gt;JLayeredPane&lt;/code&gt; &lt;/a&gt;还有很多..layered组件。</target>
        </trans-unit>
        <trans-unit id="fa15a30d2ea44e1bae88344bfaba468ce12217dd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/splitpane.html&quot;&gt;&lt;code&gt;JSplitPane&lt;/code&gt;&lt;/a&gt; A way to display two components of which the importance between one or the other (the size) varies according to what the user is doing.</source>
          <target state="translated">&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/splitpane.html&quot;&gt; &lt;code&gt;JSplitPane&lt;/code&gt; &lt;/a&gt;一种显示两个组件的方法，其中两个组件之间的重要性（大小）根据用户的操作而变化。</target>
        </trans-unit>
        <trans-unit id="109151339ec6f5994c59939e3d44bde37775fe57" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/tabbedpane.html&quot;&gt;&lt;code&gt;JTabbedPane&lt;/code&gt;&lt;/a&gt; for groups of components.</source>
          <target state="translated">&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/tabbedpane.html&quot;&gt; &lt;code&gt;JTabbedPane&lt;/code&gt; &lt;/a&gt;用于组件组。</target>
        </trans-unit>
        <trans-unit id="4d1c280dafddc96fddfd673c95475f20a70bbd27" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/toolbar.html&quot;&gt;&lt;code&gt;JToolBar&lt;/code&gt;&lt;/a&gt; typically contains groups of actions or controls.  Can be dragged around the GUI, or off it entirely according to user need.  As mentioned above, will minimize/restore according to the parent doing so.</source>
          <target state="translated">&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/toolbar.html&quot;&gt; &lt;code&gt;JToolBar&lt;/code&gt; &lt;/a&gt;通常包含一组动作或控件。 可以在GUI上拖动，或完全根据用户需要将其关闭。 如上所述，将根据父级的操作将其最小化/还原。</target>
        </trans-unit>
        <trans-unit id="763086f93c3af994a0218d3c81cbcc6c22c71525" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/layout/card.html&quot;&gt;&lt;code&gt;CardLayout&lt;/code&gt;&lt;/a&gt; (short &lt;a href=&quot;https://stackoverflow.com/a/5786005/418556&quot;&gt;demo.&lt;/a&gt;). Good for:</source>
          <target state="translated">&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/layout/card.html&quot;&gt; &lt;code&gt;CardLayout&lt;/code&gt; &lt;/a&gt; （简短&lt;a href=&quot;https://stackoverflow.com/a/5786005/418556&quot;&gt;演示。&lt;/a&gt; ）。 适用于：</target>
        </trans-unit>
        <trans-unit id="550f5f00bb5b95d41520ea13e97393e21fb1dc71" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://stackoverflow.com/a/5630271/418556&quot;&gt;Nested layouts&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/a/5630271/418556&quot;&gt;嵌套的布局&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="e69a34a769e8e98953e94688ba466fa5ffa332bf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;It's easy to use JInternalFrame&lt;/strong&gt; This is kind of retorical, now it's way easier and other people smarter ( or with more spare time) than us have already think through the Desktop and JInternalFrame pattern, so I would recommend to use it.</source>
          <target state="translated">&lt;strong&gt;易于使用JInternalFrame&lt;/strong&gt;这是一种反驳，现在，它比我们通过Desktop和JInternalFrame模式所想的要容易得多，并且其他人也比我们想象的要聪明（或有更多的业余时间），因此，我建议使用它。</target>
        </trans-unit>
        <trans-unit id="6505550594a36da49202f35678c36a219cd1bc64" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;It's more expensive:&lt;/strong&gt; you will have to allocate way more resources to draw a JFrame that other kind of window container, such as Dialog or JInternalFrame.</source>
          <target state="translated">&lt;strong&gt;它更昂贵：&lt;/strong&gt;您将不得不分配更多的资源来绘制JFrame来绘制其他类型的窗口容器，例如Dialog或JInternalFrame。</target>
        </trans-unit>
        <trans-unit id="64a9e72acd1aeb2087f34209c0fdded738377ff3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Makes it easy for end-users to reference outside material&lt;/strong&gt; - Once, I had this situation: My app had a &quot;data viewer,&quot; from which you could click &quot;Add New&quot; and it would open a data entry screen. Initially, both were &lt;code&gt;JFrame&lt;/code&gt;s. However, I wanted the data entry screen to be a &lt;code&gt;JDialog&lt;/code&gt; whose parent was the data viewer. I made the change, and immediately I received a call from an end-user who relied heavily on the fact that he could minimize or close the &lt;strong&gt;viewer&lt;/strong&gt; and keep the &lt;strong&gt;editor&lt;/strong&gt; open while he referenced another part of the program (or a website, I don't remember). He's &lt;strong&gt;not&lt;/strong&gt; on a multi-monitor, so he needed the entry dialog to be first and &lt;em&gt;something else&lt;/em&gt; to be second, with the data viewer completely hidden. This was impossible with a &lt;code&gt;JDialog&lt;/code&gt; and certainly would've been impossible with a &lt;code&gt;JInternalFrame&lt;/code&gt; as well. I begrudgingly changed it back to being separate &lt;code&gt;JFrames&lt;/code&gt; for his sanity, but it taught me an important lesson.</source>
          <target state="translated">&lt;strong&gt;使最终用户可以轻松参考外部材料&lt;/strong&gt; -遇到这种情况：我的应用程序有一个&amp;ldquo;数据查看器&amp;rdquo;，您可以从中单击&amp;ldquo;添加新内容&amp;rdquo;，这将打开一个数据输入屏幕。 最初，两者都是 &lt;code&gt;JFrame&lt;/code&gt; 。 但是，我希望数据输入屏幕是一个 &lt;code&gt;JDialog&lt;/code&gt; ，其父级是数据查看器。 我进行了更改，然后立即收到来自最终用户的电话，该用户在很大程度上依赖于这样的事实，即当他引用程序的另一部分时，他可以最小化或关闭&lt;strong&gt;查看器&lt;/strong&gt;并使&lt;strong&gt;编辑&lt;/strong&gt; &lt;strong&gt;器&lt;/strong&gt;保持打开状态（或网站，不记得了）。 他&lt;strong&gt;不在&lt;/strong&gt;多显示器上，因此他需要输入对话框为第一， &lt;em&gt;其他条件&lt;/em&gt;为第二，并完全隐藏数据查看器。 对于 &lt;code&gt;JDialog&lt;/code&gt; 来说这是不可能的，对于 &lt;code&gt;JInternalFrame&lt;/code&gt; 来说当然也不可能。 为了他的理智，我勉强将其更改回单独的 &lt;code&gt;JFrames&lt;/code&gt; ，但它教会了我一个重要的教训。</target>
        </trans-unit>
        <trans-unit id="c350bf5b7874fb5157fa5b4d297e3baedf5daf04" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Myth/Unproven: Resource Heavy&lt;/strong&gt; - I'd like to see some facts behind this speculative statement. Although, perhaps, you could say a &lt;code&gt;JFrame&lt;/code&gt; needs more space than a &lt;code&gt;JInternalFrame&lt;/code&gt;, even if you open up 100 &lt;code&gt;JFrame&lt;/code&gt;s, how many more resources would you really be consuming? If your concern is memory leaks because of resources: calling &lt;code&gt;dispose()&lt;/code&gt; frees all resources used by the frame for garbage collection (and, again I say, a &lt;code&gt;JInternalFrame&lt;/code&gt; should invoke exactly the same concern).</source>
          <target state="translated">&lt;strong&gt;神话/未经证实：资源繁重&lt;/strong&gt; -我想看看这个投机性言论背后的一些事实。 尽管也许可以说 &lt;code&gt;JFrame&lt;/code&gt; 比 &lt;code&gt;JInternalFrame&lt;/code&gt; 需要更多空间，但是即使您打开100个 &lt;code&gt;JFrame&lt;/code&gt; ，您实际上还要消耗多少资源？ 如果您担心的是由于资源导致的内存泄漏：调用 &lt;code&gt;dispose()&lt;/code&gt; 会释放该帧用于垃圾回收的所有资源（并且我再说一遍， &lt;code&gt;JInternalFrame&lt;/code&gt; 应该调用完全相同的问题）。</target>
        </trans-unit>
        <trans-unit id="efb2fd64572b99552839bf2317681d6459eacddf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Myth: Hard to code&lt;/strong&gt; - This is not true in my experience. I don't see why it would be any easier to create a &lt;code&gt;JInternalFrame&lt;/code&gt; than a &lt;code&gt;JFrame&lt;/code&gt;. In fact, in my experience, &lt;code&gt;JInternalFrames&lt;/code&gt; offer much less flexibility. I have developed a systematic way of handling the opening &amp;amp; closing of &lt;code&gt;JFrame&lt;/code&gt;s in my apps that really works well. I control the frame almost completely from within the frame's code itself; the creation of the new frame, &lt;code&gt;SwingWorker&lt;/code&gt;s that control the retrieval of data on background threads and the GUI code on EDT, restoring/bringing to front the frame if the user tries to open it twice, etc. All you need to open my &lt;code&gt;JFrame&lt;/code&gt;s is call a public static method &lt;code&gt;open()&lt;/code&gt; and the open method, combined with a &lt;code&gt;windowClosing()&lt;/code&gt; event handles the rest (is the frame already open? is it not open, but loading? etc.) I made this approach a template so it's not difficult to implement for each frame.</source>
          <target state="translated">&lt;strong&gt;误区三：难以编写代码&lt;/strong&gt; -根据我的经验，事实并非如此。 我不明白为什么创建 &lt;code&gt;JInternalFrame&lt;/code&gt; 会比 &lt;code&gt;JFrame&lt;/code&gt; 容易。 实际上，以我的经验， &lt;code&gt;JInternalFrames&lt;/code&gt; 提供的灵活性要差得多。 我已经开发出一种系统的方式来处理我的应用程序中 &lt;code&gt;JFrame&lt;/code&gt; 的打开和关闭，这确实很好。 我几乎完全从框架代码本身内控制框架。 新框架的创建， &lt;code&gt;SwingWorker&lt;/code&gt; ，它控制后台线程上的数据的检索以及EDT上的GUI代码，如果用户尝试将其打开两次，则将其恢复/带到框架的前面，等等。 s被称为公共静态方法 &lt;code&gt;open()&lt;/code&gt; 和open方法，并与 &lt;code&gt;windowClosing()&lt;/code&gt; 事件结合处理其余的事件（框架是否已打开？是否未打开，但正在加载？等），我将此方法用作模板，因此在每个框架上实现并不难。</target>
        </trans-unit>
        <trans-unit id="b720d278aac00ca850d3c60052ad4c0ee45a6be7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Not user friendly:&lt;/strong&gt; It is not easy to navigate into a bunch of JFrame stuck together, it will look like your application is a set of applications inconsistent and poorly design.</source>
          <target state="translated">&lt;strong&gt;不友好：&lt;/strong&gt;导航进入一堆JFrame并不容易，这看起来像您的应用程序是一组不一致的应用程序，并且设计不佳。</target>
        </trans-unit>
        <trans-unit id="e47badd23c6e53dbd9b63a1f01bbb996aa64fedf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Ultimate flexibility in layout&lt;/strong&gt; - By allowing separate &lt;code&gt;JFrame&lt;/code&gt;s, you give your end-user the ability to spread out and control what's on his/her screen. The concept feels &quot;open&quot; and non-constricting. You lose this when you go towards one big &lt;code&gt;JFrame&lt;/code&gt; and a bunch of &lt;code&gt;JInternalFrame&lt;/code&gt;s.</source>
          <target state="translated">&lt;strong&gt;布局的终极灵活性&lt;/strong&gt; -通过允许使用单独的 &lt;code&gt;JFrame&lt;/code&gt; ，您可以使最终用户能够分散并控制其屏幕上的内容。 该概念感到&amp;ldquo;开放&amp;rdquo;且不受限制。 当您走向一个大 &lt;code&gt;JFrame&lt;/code&gt; 和一堆 &lt;code&gt;JInternalFrame&lt;/code&gt; 时，就会丢失此错误。</target>
        </trans-unit>
        <trans-unit id="84a7ad212cb5de26f474e362ca7b87eca229fa40" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Works well for very modularized applications&lt;/strong&gt; - In my case, most of my applications have 3 - 5 big &quot;modules&quot; that really have nothing to do with each other whatsoever. For instance, one module might be a sales dashboard and one might be an accounting dashboard. They don't talk to each other or anything. However, the executive might want to open both and them being separate frames on the taskbar makes his life easier.</source>
          <target state="translated">&lt;strong&gt;对于&lt;/strong&gt;高度&lt;strong&gt;模块化的应用程序非常有效&lt;/strong&gt; -就我而言，我的大多数应用程序都具有3-5个&amp;ldquo;模块&amp;rdquo;，它们实际上彼此无关。 例如，一个模块可能是销售仪表板，而一个模块可能是会计仪表板。 他们不互相交谈或任何东西。 但是，主管可能希望同时打开它们，并且它们在任务栏上是单独的框架，这使他的生活更加轻松。</target>
        </trans-unit>
        <trans-unit id="c09531f11456b32284ff4e2a43762199b6770665" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/misc/modality.html&quot;&gt;modal dialog&lt;/a&gt; offers the easy opportunity to focus attention on the content of that dialog - choose/fix/cancel this, &lt;strong&gt;then&lt;/strong&gt; proceed.  Multiple frames do not.</source>
          <target state="translated">&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/misc/modality.html&quot;&gt;模态对话框&lt;/a&gt;为集中注意力于该对话框的内容提供了轻松的机会-选择/修复/取消该对话框， &lt;strong&gt;然后&lt;/strong&gt;继续。 多个帧则不会。</target>
        </trans-unit>
        <trans-unit id="77810e31cc11f1c6c67cebac737ee31a02924ebe" translate="yes" xml:space="preserve">
          <source>A dialog (or floating tool-bar) with a parent will come to front when the parent is clicked on - you'd have to implement that in frames if that was the desired behavior.</source>
          <target state="translated">当点击父对象时,一个带有父对象的对话框(或浮动工具条)会出现在前面----如果这是你想要的行为,你必须在框架中实现。</target>
        </trans-unit>
        <trans-unit id="52189483e5b90097f0c12c725e7468b27890f539" translate="yes" xml:space="preserve">
          <source>A few months ago we started getting requests from our customers to make these report viewer windows modeless, so that they could have multiple reports open at the same time.</source>
          <target state="translated">几个月前,我们开始收到客户的要求,要求我们制作这些报表查看器窗口模型,让他们可以同时打开多个报表。</target>
        </trans-unit>
        <trans-unit id="668c86d396f1672863ae5b4773825a8d5d39ac9b" translate="yes" xml:space="preserve">
          <source>A great example of multiple frames/single document per frame (&lt;a href=&quot;http://en.wikipedia.org/wiki/Single_document_interface&quot;&gt;SDI&lt;/a&gt;) vs single frame/multiple documents per frame (&lt;a href=&quot;http://en.wikipedia.org/wiki/Multiple_document_interface&quot;&gt;MDI&lt;/a&gt;) is Microsoft Excel. Some of MDI benefits:</source>
          <target state="translated">Microsoft Excel是一个很好的例子，每帧多帧/单个文档（ &lt;a href=&quot;http://en.wikipedia.org/wiki/Single_document_interface&quot;&gt;SDI&lt;/a&gt; ）与每帧单帧/多个文档（ &lt;a href=&quot;http://en.wikipedia.org/wiki/Multiple_document_interface&quot;&gt;MDI&lt;/a&gt; ）。 MDI的一些优点：</target>
        </trans-unit>
        <trans-unit id="481be78e172b7c4c1ccc2711164c06866ca4de84" translate="yes" xml:space="preserve">
          <source>A nightmare to code and maintain:</source>
          <target state="translated">编码和维护的噩梦。</target>
        </trans-unit>
        <trans-unit id="81e29999fc6773f2d1b64774d9f19aac3a5acde1" translate="yes" xml:space="preserve">
          <source>A single &lt;code&gt;JLabel&lt;/code&gt; (centered in a scroll pane) to display whichever image the user is interested in at that moment.  As seen in &lt;a href=&quot;https://stackoverflow.com/a/13463684/418556&quot;&gt;&lt;code&gt;ImageViewer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">单个 &lt;code&gt;JLabel&lt;/code&gt; （在滚动窗格中居中）显示当时用户感兴趣的任何图像。 如&lt;a href=&quot;https://stackoverflow.com/a/13463684/418556&quot;&gt; &lt;code&gt;ImageViewer&lt;/code&gt; 中所示&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="bbb2bffa61ffc5da7a6aa465611d7a0863e77051" translate="yes" xml:space="preserve">
          <source>A single row &lt;code&gt;JList&lt;/code&gt;. As seen in &lt;a href=&quot;https://stackoverflow.com/a/9544652/418556&quot;&gt;this answer&lt;/a&gt;.  The 'single row' part of that only works if they are all the same dimensions.  Alternately, if you are prepared to scale the images on the fly, and they are all the same aspect ratio (e.g. 4:3 or 16:9).</source>
          <target state="translated">单行 &lt;code&gt;JList&lt;/code&gt; 。 从&lt;a href=&quot;https://stackoverflow.com/a/9544652/418556&quot;&gt;这个答案中&lt;/a&gt;可以看出。 仅当它们的尺寸相同时，&amp;ldquo;单行&amp;rdquo;部分才有效。 或者，如果您准备即时缩放图像，并且它们的长宽比都相同（例如4：3或16：9）。</target>
        </trans-unit>
        <trans-unit id="dc55daa7dd0a9587b2c55b293fa2cc08de97b8cf" translate="yes" xml:space="preserve">
          <source>Also we can switch between this &lt;code&gt;JPanel&lt;/code&gt;s. So it gives us freedom to display more than on thing in the &lt;code&gt;JFrame&lt;/code&gt;.</source>
          <target state="translated">我们也可以在此 &lt;code&gt;JPanel&lt;/code&gt; 之间切换。 因此，它使我们可以自由显示而不是 &lt;code&gt;JFrame&lt;/code&gt; 中的内容 。</target>
        </trans-unit>
        <trans-unit id="235a62d33b197f5e505ad2f49140e11726f388af" translate="yes" xml:space="preserve">
          <source>As items in a &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/list.html&quot;&gt;&lt;code&gt;JList&lt;/code&gt;&lt;/a&gt; (simple example below).</source>
          <target state="translated">作为&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/list.html&quot;&gt; &lt;code&gt;JList&lt;/code&gt; 中的&lt;/a&gt;项目（以下简单示例）。</target>
        </trans-unit>
        <trans-unit id="b88696386beb9499cee8e8d14cb2dbe189e4727c" translate="yes" xml:space="preserve">
          <source>As nodes in a &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/tree.html&quot;&gt;&lt;code&gt;JTree&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">作为&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/tree.html&quot;&gt; &lt;code&gt;JTree&lt;/code&gt; 中的&lt;/a&gt;节点。</target>
        </trans-unit>
        <trans-unit id="fa88a229b782b18f180bc35ea575c9856c05f12d" translate="yes" xml:space="preserve">
          <source>Bad (bad, bad) practice.</source>
          <target state="translated">坏的(坏的、坏的)做法。</target>
        </trans-unit>
        <trans-unit id="2d4d395e63075e1d369f76a05fc7ad4309ce2242" translate="yes" xml:space="preserve">
          <source>Bad practice definitely. One reason is that it is not very 'user-friendly' for the fact that every &lt;code&gt;JFrame&lt;/code&gt; shows a new taskbar icon. Controlling multiple &lt;code&gt;JFrame&lt;/code&gt;s will have you ripping your hair out.</source>
          <target state="translated">绝对是错误的做法。 一个原因是，由于每个 &lt;code&gt;JFrame&lt;/code&gt; 都显示一个新的任务栏图标，因此它不是非常&amp;ldquo;用户友好&amp;rdquo;的。 控制多个 &lt;code&gt;JFrame&lt;/code&gt; 将使您脱颖而出。</target>
        </trans-unit>
        <trans-unit id="48b7e32b0d0b98dfd1849893ada1230a6994eabe" translate="yes" xml:space="preserve">
          <source>But if those strategies do not work for a particular use-case, try the following.  Establish a single main &lt;code&gt;JFrame&lt;/code&gt;, then have &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/dialog.html&quot;&gt;&lt;code&gt;JDialog&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/dialog.html#features&quot;&gt;&lt;code&gt;JOptionPane&lt;/code&gt;&lt;/a&gt; instances appear for the rest of the free-floating elements, using the frame as the parent for the dialogs.</source>
          <target state="translated">但是，如果这些策略不适用于特定用例，请尝试以下方法。 建立单个主 &lt;code&gt;JFrame&lt;/code&gt; ，然后使用框架作为对话框的父级，为其余的自由浮动元素显示&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/dialog.html&quot;&gt; &lt;code&gt;JDialog&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/dialog.html#features&quot;&gt; &lt;code&gt;JOptionPane&lt;/code&gt; &lt;/a&gt;实例。</target>
        </trans-unit>
        <trans-unit id="372547561d143dc46d276e8a37f9d3e37875665f" translate="yes" xml:space="preserve">
          <source>But its better to change one &lt;code&gt;JFrame&lt;/code&gt; for our different needs rather than having multiple &lt;code&gt;JFrame&lt;/code&gt;s.</source>
          <target state="translated">但是，最好是根据我们的不同需求更改一个 &lt;code&gt;JFrame&lt;/code&gt; ，而不要使用多个 &lt;code&gt;JFrame&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8b7b9110186106fbc6770f355b804553c6609a8c" translate="yes" xml:space="preserve">
          <source>Displaying list, tree etc. selections for items that have an associated component.</source>
          <target state="translated">显示列表、树型等有关联组件的项目选择。</target>
        </trans-unit>
        <trans-unit id="f20aa55ef6fcf5d4c20d52e4186907ac6e4f6540" translate="yes" xml:space="preserve">
          <source>Flipping between no component and visible component.</source>
          <target state="translated">在无组件和可见组件之间翻转。</target>
        </trans-unit>
        <trans-unit id="e964c3e4f6b23a66ecbd023460578f171f5d331e" translate="yes" xml:space="preserve">
          <source>For each &lt;code&gt;JPanel&lt;/code&gt; we can design different things and all this &lt;code&gt;JPanel&lt;/code&gt; can be displayed on the single &lt;code&gt;JFrame&lt;/code&gt;one at a time.</source>
          <target state="translated">对于每个 &lt;code&gt;JPanel&lt;/code&gt; ,我们可以设计不同的东西，并且所有这些 &lt;code&gt;JPanel&lt;/code&gt; 可以一次显示在单个 &lt;code&gt;JFrame&lt;/code&gt; 上。</target>
        </trans-unit>
        <trans-unit id="38348ede1c8912649e35d338068ca9b9b1ed3244" translate="yes" xml:space="preserve">
          <source>For modeless dialogs, pass a null parent to the constructor, but locate them relative to their 'parent' window.</source>
          <target state="translated">对于无模型对话框,传递一个空父对象到构造函数,但要相对于 &quot;父 &quot;窗口定位。</target>
        </trans-unit>
        <trans-unit id="c62455a2a5cd91e7727a1d98153de9e332b98738" translate="yes" xml:space="preserve">
          <source>For some time I resisted this request as I did not think this was a good solution. However, my mind was changed when I found out how the users were getting around this 'deficiency' of our system.</source>
          <target state="translated">有一段时间,我一直抵制这个要求,因为我认为这不是一个好的解决办法。然而,当我发现用户是如何绕开我们系统的这个 &quot;缺陷 &quot;的时候,我的想法被改变了。</target>
        </trans-unit>
        <trans-unit id="c191869b8a33edda7cdd405128b0e40442840200" translate="yes" xml:space="preserve">
          <source>I think using multiple &lt;code&gt;Jframe&lt;/code&gt;s is not a good idea.</source>
          <target state="translated">我认为使用多个 &lt;code&gt;Jframe&lt;/code&gt; 不是一个好主意。</target>
        </trans-unit>
        <trans-unit id="47beb323263604d1b1e5e6f6e5c6d3e720f4a9d6" translate="yes" xml:space="preserve">
          <source>I'd like to counter the &quot;not user friendly&quot; argument with an example that I have just been involved with.</source>
          <target state="translated">我想用刚才的一个例子来反驳 &quot;对用户不友好 &quot;的说法。</target>
        </trans-unit>
        <trans-unit id="1af47f037ee6de340a78c3f8c81dbe89cae14102" translate="yes" xml:space="preserve">
          <source>I'm developing an application which displays images, and plays sounds from a database. I'm trying to decide whether or not to use a separate JFrame to add images to the database from the GUI.</source>
          <target state="translated">我正在开发一个应用程序,它可以显示图像,并从数据库中播放声音。我正在试图决定是否使用一个单独的JFrame来从GUI向数据库中添加图像。</target>
        </trans-unit>
        <trans-unit id="e4ec08d035a2860eaee2641f5d1b48e4d2025766" translate="yes" xml:space="preserve">
          <source>I'm just wondering whether it is good practice to use multiple JFrame windows?</source>
          <target state="translated">我只是想知道,使用多个JFrame窗口是否是好的做法?</target>
        </trans-unit>
        <trans-unit id="6166fff8262f4671ea4124eb1c4dce25116ab7c4" translate="yes" xml:space="preserve">
          <source>I'm just wondering whether it is good practice to use multiple JFrames?</source>
          <target state="translated">我只是想知道,使用多个JFrames是否是好的做法?</target>
        </trans-unit>
        <trans-unit id="70109a724c8dab00d6202da1795974ff980336d6" translate="yes" xml:space="preserve">
          <source>I've written a lot and I feel like I could write more. Anyways, I hope I don't get down-voted simply because it's an unpopular opinion. The question is clearly a valuable one and I hope I've provided a valuable answer, even if it isn't the common opinion.</source>
          <target state="translated">我写了很多,感觉还可以写得更多。不管怎么说,我希望我不要因为这个观点不受欢迎而被降票。这个问题显然是一个有价值的问题,我希望我提供了一个有价值的答案,即使不是一般人的意见,我也希望我提供了一个有价值的答案。</target>
        </trans-unit>
        <trans-unit id="c11d1eae3222d1ad420eabf6693a1a8a14bc6ddf" translate="yes" xml:space="preserve">
          <source>If the frames are going to be the same size, why not create the frame and pass the frame then as a reference to it instead.</source>
          <target state="translated">如果框架的大小要相同,为什么不创建框架,然后将框架作为引用传递给它。</target>
        </trans-unit>
        <trans-unit id="d8eca14de00affb5abab3c716277e3216fff2b85" translate="yes" xml:space="preserve">
          <source>In our application we have a main window where the users run various 'programs' as separate tabs. As much as possible we have tried to keep our application to this single window.</source>
          <target state="translated">在我们的应用程序中,我们有一个主窗口,用户可以在这个窗口中运行各种 &quot;程序 &quot;作为单独的标签页。我们尽可能地将应用程序保留在这个单一的窗口中。</target>
        </trans-unit>
        <trans-unit id="70c20b9a9bc2f25260461351498ba9aef81d17b2" translate="yes" xml:space="preserve">
          <source>In this case where the multiple elements are images, it would be better to use either of the following instead:</source>
          <target state="translated">在这种情况下,如果多元素是图像,最好使用以下任何一种来代替。</target>
        </trans-unit>
        <trans-unit id="ede8b7972234cfca52cc35fd271479bfd7c63d76" translate="yes" xml:space="preserve">
          <source>Instead we can use &lt;code&gt;JPanel&lt;/code&gt;s more than one or more &lt;code&gt;JPanel&lt;/code&gt; in the same &lt;code&gt;JFrame&lt;/code&gt;.</source>
          <target state="translated">相反，我们可以在同一 &lt;code&gt;JFrame&lt;/code&gt; 中使用 &lt;code&gt;JPanel&lt;/code&gt; 的一个或多个 &lt;code&gt;JPanel&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6f41475e79339890879ae861045ad68c3e7bd735" translate="yes" xml:space="preserve">
          <source>It is not a good practice but even though you wish to use it you can use the singleton pattern as its good. I have used the singleton patterns in most of my project its good.</source>
          <target state="translated">这不是一个好的做法,但即使你想使用它,你也可以使用单子模式,因为它很好。我在我的大部分项目中都使用过单子模式,它的效果很好。</target>
        </trans-unit>
        <trans-unit id="80e6f7ce8bf052de169f73af25b368215b3c8388" translate="yes" xml:space="preserve">
          <source>It seems to be best practice to use JDialog's for these modeless windows</source>
          <target state="translated">在这些无模型窗口中使用JDialog似乎是最好的做法。</target>
        </trans-unit>
        <trans-unit id="298c9c67ea16ba4bc93f201fc45211b386669a87" translate="yes" xml:space="preserve">
          <source>It's been a while since the last time i touch swing but in general is a bad practice to do this. Some of the main disadvantages that comes to mind:</source>
          <target state="translated">它已经有一段时间了,因为最后一次触摸挥杆,但在一般情况下,这样做是一个不好的做法。一些主要的缺点,想到的是。</target>
        </trans-unit>
        <trans-unit id="a7df5571c3f2bc8c6d0d8d7e5164858995ac3c72" translate="yes" xml:space="preserve">
          <source>MDI (Multiple-Document Interface, i.e., every window can have multiple documents):</source>
          <target state="translated">MDI(多文档接口,即每个窗口可以有多个文档)。</target>
        </trans-unit>
        <trans-unit id="c041fbc6f6d5e8180164af2e81ff649862ed2f1c" translate="yes" xml:space="preserve">
          <source>Make an jInternalFrame into main frame and make it invisible. Then you can use it for further events.</source>
          <target state="translated">将jInternalFrame制作成主框架,使其不可见。然后你可以用它来做进一步的事件。</target>
        </trans-unit>
        <trans-unit id="19799c5d85ff59ea7febea012652a9f4974c293e" translate="yes" xml:space="preserve">
          <source>Many images</source>
          <target state="translated">许多图片</target>
        </trans-unit>
        <trans-unit id="abe5bc4e611a570041b7ddf07077ea1fc14ea933" translate="yes" xml:space="preserve">
          <source>More than one &lt;code&gt;JFrame&lt;/code&gt; is not a good practice, but there is nothing wrong if we want more than one &lt;code&gt;JFrame&lt;/code&gt;.</source>
          <target state="translated">多个 &lt;code&gt;JFrame&lt;/code&gt; 不是一个好习惯，但是如果我们想要多个 &lt;code&gt;JFrame&lt;/code&gt; ，则没有错。</target>
        </trans-unit>
        <trans-unit id="4c6983f6b6fab768e218346da2e077d79ea85ffb" translate="yes" xml:space="preserve">
          <source>Multiple JFrame objects = Pain, trouble, and problems.</source>
          <target state="translated">多个JFrame对象=痛苦、麻烦和问题。</target>
        </trans-unit>
        <trans-unit id="aa24bb0d2031831f6d23f49b9461a627edcfa34d" translate="yes" xml:space="preserve">
          <source>One of the 'programs' they run presents a list of reports that have been generated by the system, and the user can click on an icon on each line to pop open a report viewer dialog. This viewer is showing the equivalent of the portrait/landscape A4 page(s) of the report, so the users like this window to be quite big, almost filling their screens.</source>
          <target state="translated">在他们运行的 &quot;程序 &quot;中,有一个 &quot;程序 &quot;显示了系统生成的报表列表,用户可以点击每一行的图标,弹出一个报表查看器对话框。这个查看器显示的是相当于A4纸上的纵向landscape页的报表,所以用户喜欢这个窗口相当大,几乎填满了他们的屏幕。</target>
        </trans-unit>
        <trans-unit id="455bf84971f11c9b9b4e73032d41fc1c9c19bc5c" translate="yes" xml:space="preserve">
          <source>Personally, I would use ONE &lt;code&gt;JFrame&lt;/code&gt; for your kind of application. Methods of displaying multiple things is up to you, there are many. &lt;code&gt;Canvas&lt;/code&gt;es, &lt;code&gt;JInternalFrame&lt;/code&gt;, &lt;code&gt;CardLayout&lt;/code&gt;, even &lt;code&gt;JPanel&lt;/code&gt;s possibly.</source>
          <target state="translated">就个人而言，我将使用ONE &lt;code&gt;JFrame&lt;/code&gt; 进行此类应用。 显示多种事物的方法取决于您，有很多。 &lt;code&gt;Canvas&lt;/code&gt; ， &lt;code&gt;JInternalFrame&lt;/code&gt; ， &lt;code&gt;CardLayout&lt;/code&gt; 甚至 &lt;code&gt;JPanel&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a02280d6357b0974accd403fc8e774f7f619fe2c" translate="yes" xml:space="preserve">
          <source>SDI (Single-Document Interface, i.e., every window can only have a single document):</source>
          <target state="translated">SDI(单文档接口,即每个窗口只能有一个文档)。</target>
        </trans-unit>
        <trans-unit id="21804c77671ee36486bcf0c9bf85e5d1f9e47d65" translate="yes" xml:space="preserve">
          <source>SOME NOTES:</source>
          <target state="translated">一些说明:</target>
        </trans-unit>
        <trans-unit id="c99545794d629ad61770e4f2281ea9d1b95b7c1b" translate="yes" xml:space="preserve">
          <source>Showing wizard like dialogs.</source>
          <target state="translated">显示向导一样的对话框。</target>
        </trans-unit>
        <trans-unit id="0bf5dabc7cb7282680a7e0e93e293d6b01de6405" translate="yes" xml:space="preserve">
          <source>So I relented and made the viewer modeless. This means that each viewer has a task-bar icon.</source>
          <target state="translated">于是我忍痛割爱,将查看器做成了无模型。这意味着每个查看器都有一个任务栏图标。</target>
        </trans-unit>
        <trans-unit id="9969b7a30e587dc86c6ccd9bc10943865a3888d2" translate="yes" xml:space="preserve">
          <source>So you go ahead and tell your users that what they want is bad, but ultimately it won't do you any favours.</source>
          <target state="translated">所以你去告诉用户,他们想要的东西是不好的,但最终也不会给你带来任何好处。</target>
        </trans-unit>
        <trans-unit id="da7bec0bb8499c9086a991e52be889b85f7197bc" translate="yes" xml:space="preserve">
          <source>So, I'm going to explain the benefits of the multiple &lt;code&gt;JFrame&lt;/code&gt; approach, as well as myth-bust some of the cons that others have presented.</source>
          <target state="translated">因此，我将解释多重 &lt;code&gt;JFrame&lt;/code&gt; 方法的好处，以及神话般地消除其他人提出的一些弊端。</target>
        </trans-unit>
        <trans-unit id="9555a28c03ec4e74732765af9fd7a7315e2519fd" translate="yes" xml:space="preserve">
          <source>The Use of Multiple JFrames: Good or Bad Practice</source>
          <target state="translated">使用多个JFrames。好的还是坏的做法</target>
        </trans-unit>
        <trans-unit id="ceb502ac410c531592f1d728b268dd2b741ea8a0" translate="yes" xml:space="preserve">
          <source>The multiple &lt;code&gt;JFrame&lt;/code&gt; approach has been something I've implemented since I began programming Swing apps. For the most part, I did it in the beginning because I didn't know any better. &lt;strong&gt;However&lt;/strong&gt;, as I matured in my experience and knowledge as a developer and as began to read and absorb the opinions of so many more experienced Java devs online, I made an attempt to &lt;strong&gt;shift away&lt;/strong&gt; from the multiple &lt;code&gt;JFrame&lt;/code&gt; approach (both in current projects and future projects) only to be met with... get this... &lt;em&gt;resistance from my clients!&lt;/em&gt; As I began implementing modal dialogs to control &quot;child&quot; windows and &lt;code&gt;JInternalFrame&lt;/code&gt;s for separate components, &lt;strong&gt;my clients began to complain!&lt;/strong&gt; I was quite surprised, as I was doing what I thought was best-practice! But, as they say, &quot;A happy wife is a happy life.&quot; Same goes for your clients. Of course, I am a contractor so my end-users have direct access to me, the developer, which is obviously not a common scenario.</source>
          <target state="translated">自从我开始对Swing应用程序进行编程以来，我已经实现了多种 &lt;code&gt;JFrame&lt;/code&gt; 方法。 在大多数情况下，我在一开始就这样做了，因为我没有更好的了解。 &lt;strong&gt;但是&lt;/strong&gt; ，随着我作为开发人员的经验和知识日渐成熟，并开始在线阅读和吸收许多经验丰富的Java开发人员的意见，我尝试&lt;strong&gt;摆脱&lt;/strong&gt;多种 &lt;code&gt;JFrame&lt;/code&gt; 方法（在当前项目和将来都如此）。项目）只能得到满足...得到&lt;em&gt;我的客户的抵制！&lt;/em&gt; 当我开始实现模态对话框来控制&amp;ldquo;子&amp;rdquo;窗口和 &lt;code&gt;JInternalFrame&lt;/code&gt; 用于单独的组件时， &lt;strong&gt;我的客户开始抱怨！&lt;/strong&gt; 当我做自己认为是最佳实践的事情时，我感到非常惊讶！ 但是，正如他们所说，&amp;ldquo;幸福的妻子就是幸福的生活&amp;rdquo;。 您的客户也一样。 当然，我是承包商，因此我的最终用户可以直接与我（开发人员）联系，这显然不常见。</target>
        </trans-unit>
        <trans-unit id="cc0f517ed38d5dc4aee1525800cb76944363c44a" translate="yes" xml:space="preserve">
          <source>There are any number of ways of displaying many elements in one GUI, e.g.:</source>
          <target state="translated">在一个GUI中可以有任意多种方式显示许多元素,例如:。</target>
        </trans-unit>
        <trans-unit id="876809a0777c1f327a13c68dfb31e3a3b557deed" translate="yes" xml:space="preserve">
          <source>They were opening a viewer, using the 'Save As' facility to save the report as a PDF to a specific directory, using Acrobat Reader to open the PDF file, and then they would do the same with the next report. They would have multiple Acrobat Readers running with the various report outputs that they wanted to look at.</source>
          <target state="translated">他们打开一个查看器,使用 &quot;另存为 &quot;功能将报告保存为PDF格式,并将报告保存到特定的目录中,使用Acrobat Reader打开PDF文件,然后对下一份报告进行同样的操作。他们会在多个Acrobat阅读器中运行着他们想要查看的各种报告输出。</target>
        </trans-unit>
        <trans-unit id="07adcf3f02b71244d6c5593ea0fb0de89ed0f816" translate="yes" xml:space="preserve">
          <source>To switch between this &lt;code&gt;JPanel&lt;/code&gt;s use &lt;code&gt;JMenuBar&lt;/code&gt; with &lt;code&gt;JMenuItems&lt;/code&gt; for each &lt;code&gt;JPanel&lt;/code&gt;or 'JButton&lt;code&gt;for each&lt;/code&gt;JPanel`.</source>
          <target state="translated">要在此 &lt;code&gt;JPanel&lt;/code&gt; 之间切换，请对每个 &lt;code&gt;JPanel&lt;/code&gt; 使用带有 &lt;code&gt;JMenuItems&lt;/code&gt; 的 &lt;code&gt;JMenuBar&lt;/code&gt; 或对每个JPanel使用 'JButton'。</target>
        </trans-unit>
        <trans-unit id="1ef67bd016d5084cd1dc89a3544f7b7deae7f76c" translate="yes" xml:space="preserve">
          <source>Use the constructors that use the new &lt;code&gt;ModalityType&lt;/code&gt; rather than the boolean &lt;code&gt;modal&lt;/code&gt; argument. This is what gives these dialogs the task-bar icon.</source>
          <target state="translated">使用使用新 &lt;code&gt;ModalityType&lt;/code&gt; 而不是布尔 &lt;code&gt;modal&lt;/code&gt; 参数的构造函数。 这就是为这些对话框提供任务栏图标的原因。</target>
        </trans-unit>
        <trans-unit id="37df70d866bcd3bb36a8422c910e346f9cb84c7b" translate="yes" xml:space="preserve">
          <source>User unfriendly: The user sees multiple icons in their task bar when expecting to see only one.  Plus the side effects of the coding problems..</source>
          <target state="translated">对用户不友好:用户在任务栏中看到多个图标,而期望只看到一个图标。加上编码问题的副作用。</target>
        </trans-unit>
        <trans-unit id="ba1a9fa2fb40926910838f2b5d2d0d17281ee5e1" translate="yes" xml:space="preserve">
          <source>Version 6 of Java on Windows has a &lt;a href=&quot;http://bugs.sun.com/view_bug.do?bug_id=6829546&quot;&gt;bug&lt;/a&gt; which means that your main window can become 'always on top' without you telling it. Upgrade to version 7 to fix this</source>
          <target state="translated">Windows上的Java版本6有一个&lt;a href=&quot;http://bugs.sun.com/view_bug.do?bug_id=6829546&quot;&gt;错误&lt;/a&gt; ，这意味着您的主窗口可以在不通知您的情况下始终位于&amp;ldquo;顶部&amp;rdquo;。 升级到版本7以解决此问题</target>
        </trans-unit>
        <trans-unit id="5727d35c6ceab167cf86a91daab09b3830139fa4" translate="yes" xml:space="preserve">
          <source>When the latest version was released to them last week, the overwhelming response from them is that they LOVE it. It's been one of our most popular recent enhancements to the system.</source>
          <target state="translated">当最新的版本在上周发布给他们的时候,他们的反馈是,他们非常喜欢。这也是我们最近最受欢迎的系统增强版之一。</target>
        </trans-unit>
        <trans-unit id="bfe52204fef7c1c1111b24e5c4b045c5b10d5af6" translate="yes" xml:space="preserve">
          <source>When you have passed the frame you can then decide how to populate it. It would be like having a method for calculating the average of a set of figures. Would you create the method over and over again?</source>
          <target state="translated">当你通过了这个框架后,你就可以决定如何填充它。这就好比有一个计算一组数字的平均数的方法。你会不会把这个方法创造出来一遍又一遍?</target>
        </trans-unit>
        <trans-unit id="9e6d5433c3d8befdb496a1390c3d98c9e607a226" translate="yes" xml:space="preserve">
          <source>it is possible to have a few windows in non rectangular shape - so they don't hide desktop or other window from another process (e.g. web browser)</source>
          <target state="translated">可以有几个非长方形的窗口,这样就不会把桌面或其他窗口从另一个进程中隐藏起来(例如网页浏览器)。</target>
        </trans-unit>
        <trans-unit id="63c50400e1490c23c20ab019c4988e31ae00c26c" translate="yes" xml:space="preserve">
          <source>it is possible to have different documents on different screens, which is especially useful when screens do not have the same resolution</source>
          <target state="translated">可以在不同的屏幕上有不同的文档,这在屏幕分辨率不一样的情况下特别有用。</target>
        </trans-unit>
        <trans-unit id="d0f48a7c2e4973a385323f0ad23b27b44b967cb3" translate="yes" xml:space="preserve">
          <source>it is possible to open a window from another process over one Excel window while writing in second Excel window - with MDI, trying to write in one of internal windows will give focus to the entire Excel window, hence hiding window from another process</source>
          <target state="translated">可以从另一个Excel窗口上打开另一个进程的窗口,同时在第二个Excel窗口中写入第二个Excel窗口--使用MDI,尝试在其中一个内部窗口中写入,将使整个Excel窗口的焦点集中在整个Excel窗口上,从而将窗口从另一个进程中隐藏起来</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
