<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://stackoverflow.com/questions/953481">
    <body>
      <group id="953481">
        <trans-unit id="dabae0c3f1b6a2576f3c16316d2feface5f9b9bd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://stackoverflow.com/users/157971/robert-dailey&quot;&gt;Robert Dailey&lt;/a&gt; proposes &lt;a href=&quot;https://stackoverflow.com/questions/953481/restore-a-deleted-file-in-a-git-repo/14922749#comment33996752_14922749&quot;&gt;in the comments&lt;/a&gt; the following alias:</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/users/157971/robert-dailey&quot;&gt;Robert Dailey&lt;/a&gt; &lt;a href=&quot;https://stackoverflow.com/questions/953481/restore-a-deleted-file-in-a-git-repo/14922749#comment33996752_14922749&quot;&gt;는 의견&lt;/a&gt; 에서 다음과 같은 별칭을 제안합니다.</target>
        </trans-unit>
        <trans-unit id="b942df95d76fedcb4f37698d1edaeafea85f126b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git log --stat | grep --context=5 *word*&lt;/code&gt; # recommended if you hardly
remember anything</source>
          <target state="translated">&lt;code&gt;git log --stat | grep --context=5 *word*&lt;/code&gt; grep --context = 5 * word * # 아무 것도 기억 나지 않는 경우 권장</target>
        </trans-unit>
        <trans-unit id="80115968f8fb670b75b5527f5cc71186dcdc863f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git status&lt;/code&gt; for the reason:</source>
          <target state="translated">이유에 대한 &lt;code&gt;git status&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="11fa02359bac8a9eb8e2f9fe75505f719e82487d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(Note the trailing space on the end of each command.)&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;(각 명령의 끝에 공백이 있습니다.)&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1809986235a116b609fa47900a74af7cfaf7ca73" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;3&lt;/em&gt;. Now using the commit id bfe68bd117e1091c96d2976c99b3bcc8310bebe7 do:</source>
          <target state="translated">&lt;em&gt;3&lt;/em&gt; . 이제 커밋 ID bfe68bd117e1091c96d2976c99b3bcc8310bebe7을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="39450d5b2f12766c76604f10febccc07503c7f65" translate="yes" xml:space="preserve">
          <source>Actually, this question is directly about &lt;code&gt;Git&lt;/code&gt;, but somebody like me works with GUI tools like &lt;code&gt;WebStorm&lt;/code&gt; VCS other than knowing about git &lt;code&gt;cli&lt;/code&gt; commands.</source>
          <target state="translated">실제로이 질문은 &lt;code&gt;Git&lt;/code&gt; 에 관한 것이지만 나와 같은 사람은 git &lt;code&gt;cli&lt;/code&gt; 명령에 대한 지식 외에 &lt;code&gt;WebStorm&lt;/code&gt; VCS와 같은 GUI 도구로 작업합니다.</target>
        </trans-unit>
        <trans-unit id="f4ced7f3c540642c7ece5083ae3199ae1e73db0b" translate="yes" xml:space="preserve">
          <source>And &lt;a href=&quot;https://stackoverflow.com/users/1857677/jegan&quot;&gt;jegan&lt;/a&gt; adds &lt;a href=&quot;https://stackoverflow.com/questions/953481/find-and-restore-a-deleted-file-in-a-git-repository/14922749?noredirect=1#comment80261163_14922749&quot;&gt;in the comments&lt;/a&gt;:</source>
          <target state="translated">그리고 &lt;a href=&quot;https://stackoverflow.com/users/1857677/jegan&quot;&gt;jegan&lt;/a&gt; &lt;a href=&quot;https://stackoverflow.com/questions/953481/find-and-restore-a-deleted-file-in-a-git-repository/14922749?noredirect=1#comment80261163_14922749&quot;&gt;은 주석을&lt;/a&gt; 추가합니다 :</target>
        </trans-unit>
        <trans-unit id="2a9f1fc121f2083d8090138717af3e60269b37c9" translate="yes" xml:space="preserve">
          <source>And &lt;code&gt;readme.md&lt;/code&gt; has been restored into the repository.</source>
          <target state="translated">그리고 &lt;code&gt;readme.md&lt;/code&gt; 가 저장소에 복원되었습니다.</target>
        </trans-unit>
        <trans-unit id="528ed46ff5f66e7df5abbfc54aa968b91ac12884" translate="yes" xml:space="preserve">
          <source>And if you've continued work, and realized later that you didn't want to commit that deletion commit, you could revert it using.</source>
          <target state="translated">작업을 계속하고 나중에 해당 삭제 커밋을 커밋하지 않으려는 것을 알게되면 사용하여 되돌릴 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d278e2c014d33fea226d3f89271e390ab6141f31" translate="yes" xml:space="preserve">
          <source>And now, I can see my desire deleted file. I just double-click on the filename and it recovers.</source>
          <target state="translated">이제 파일이 삭제 된 것을 볼 수 있습니다. 파일 이름을 두 번 클릭하면 복구됩니다.</target>
        </trans-unit>
        <trans-unit id="506fea15cfdfb0525761b69499ea49f2919a78fd" translate="yes" xml:space="preserve">
          <source>And presto, your file is back.</source>
          <target state="translated">그리고 presto, 파일이 돌아 왔습니다.</target>
        </trans-unit>
        <trans-unit id="53fba75201e3acb1d7f57ca3f5dcec031f49387f" translate="yes" xml:space="preserve">
          <source>As of Git 2.23 there is actually a &lt;code&gt;restore&lt;/code&gt; command. It is &lt;strong&gt;still experimental&lt;/strong&gt; but in order to restore something you removed in a commit (4711174 in this case) you can then type:</source>
          <target state="translated">Git 2.23부터는 실제로 &lt;code&gt;restore&lt;/code&gt; 명령이 있습니다. &lt;strong&gt;여전히 실험적&lt;/strong&gt; 이지만 커밋 (이 경우 4711174)에서 제거한 것을 복원하려면 다음을 입력하십시오.</target>
        </trans-unit>
        <trans-unit id="8e1f6a7179783dd6c009c4d66e3695fd0fb40bef" translate="yes" xml:space="preserve">
          <source>As the commit id references the commit where the file was already deleted you need to reference the commit just before bfe68b which you can do by appending &lt;code&gt;^1&lt;/code&gt;. This means: give me the commit just before bfe68b.</source>
          <target state="translated">커밋 ID는 파일이 이미 삭제 된 커밋을 참조하므로 &lt;code&gt;^1&lt;/code&gt; 을 추가하여 수행 할 수있는 bfe68b 직전에 커밋을 참조해야합니다. 이것은 bfe68b 직전에 커밋을 제공한다는 것을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="45d24e1b7190811eeeb4babc40aea2c9b90eb2c8" translate="yes" xml:space="preserve">
          <source>Based on Charles Bailey's excellent answer here is my one liner:</source>
          <target state="translated">찰스 베일리의 훌륭한 대답을 바탕으로 내 하나의 라이너입니다.</target>
        </trans-unit>
        <trans-unit id="8ed235eedcfe9ae37e8840b06fde1b7e9eba9049" translate="yes" xml:space="preserve">
          <source>Best way to do that, try it</source>
          <target state="translated">가장 좋은 방법은 시도해보십시오.</target>
        </trans-unit>
        <trans-unit id="0a1c4d67e69af63ac5bdc1fca4caa381ee455a88" translate="yes" xml:space="preserve">
          <source>Crisis averted.</source>
          <target state="translated">위기를 피했다.</target>
        </trans-unit>
        <trans-unit id="1e5d96f205dd15a9aa6a51baf15589940c05aa25" translate="yes" xml:space="preserve">
          <source>Find and restore a deleted file in a Git repository</source>
          <target state="translated">Git 리포지토리에서 삭제 된 파일 찾기 및 복원</target>
        </trans-unit>
        <trans-unit id="60ed8682da6b48496d12c30b3c28f037dcb0f5a9" translate="yes" xml:space="preserve">
          <source>Find the commit that deleted your file:</source>
          <target state="translated">파일을 삭제 한 커밋을 찾으십시오.</target>
        </trans-unit>
        <trans-unit id="e1c70b3a15cabe84eff899597caa1280f380227a" translate="yes" xml:space="preserve">
          <source>Find the last commit that affected the given path. As the file isn't in the HEAD commit, this commit must have deleted it.</source>
          <target state="translated">주어진 경로에 영향을 준 마지막 커밋을 찾으십시오. 파일이 HEAD 커밋에 없으므로이 커밋이 파일을 삭제해야합니다.</target>
        </trans-unit>
        <trans-unit id="b7d5ca8f8b0c81867920d9b2c2aaf9da1d827ccd" translate="yes" xml:space="preserve">
          <source>First find the commit id of the commit that deleted your file.
It will give you a summary of commits which deleted files.</source>
          <target state="translated">먼저 파일을 삭제 한 커밋의 커밋 ID를 찾으십시오. 삭제 된 파일의 커밋 요약을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="65ee140d164a1411ca2eb787e97b195ab1493a8c" translate="yes" xml:space="preserve">
          <source>First of all, get a latest stable commit in which you have that file by -</source>
          <target state="translated">우선, 파일을 가지고있는 최신 안정적인 커밋을 얻으십시오-</target>
        </trans-unit>
        <trans-unit id="a6d1da03d26b2e516b35765d2ec62b00f6dbe6df" translate="yes" xml:space="preserve">
          <source>For setting the alias from the command line, I used this command:</source>
          <target state="translated">커맨드 라인에서 별칭을 설정하기 위해 다음 명령을 사용했습니다.</target>
        </trans-unit>
        <trans-unit id="c4310a7ec429aa473bfe875f9d1041e540e53d06" translate="yes" xml:space="preserve">
          <source>Get the id of the commit where the file was deleted using one of the ways below.</source>
          <target state="translated">아래 방법 중 하나를 사용하여 파일이 삭제 된 커밋의 ID를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="892e36379b1375f78f401ba5d972e81cd7966e71" translate="yes" xml:space="preserve">
          <source>I also have this problem using below code retrieve previous file to local directory</source>
          <target state="translated">또한 아래 코드를 사용 하여이 문제가 로컬 파일로 이전 파일을 검색합니다.</target>
        </trans-unit>
        <trans-unit id="c2e5655cc00ee85dc9c46d8f7913eebe5b6b5982" translate="yes" xml:space="preserve">
          <source>I came to this question looking to restore a file I just deleted but I hadn't yet committed the change.  Just in case you find yourself in this situation, all you need to do is the following:</source>
          <target state="translated">방금 삭제 한 파일을 복원하려고했지만이 변경 사항을 아직 커밋하지 않은이 질문에 왔습니다. 이 상황에 처한 경우를 대비하여 다음을 수행하면됩니다.</target>
        </trans-unit>
        <trans-unit id="221cd6e4822d0d798ec7e12dd41e30d6f6b84045" translate="yes" xml:space="preserve">
          <source>I had the same question. Without knowing it, I had created a &lt;strong&gt;&lt;em&gt;dangling commit&lt;/em&gt;&lt;/strong&gt;.</source>
          <target state="translated">나는 같은 질문을했다. 그것을 모른 채 &lt;strong&gt;&lt;em&gt;매달린 커밋을&lt;/em&gt;&lt;/strong&gt; 만들었습니다.</target>
        </trans-unit>
        <trans-unit id="f31a936598e717264b5a769e7b5927c8a7d9158c" translate="yes" xml:space="preserve">
          <source>I have lost a file, deleted by mistake a few commits ago?</source>
          <target state="translated">몇 커밋 전에 실수로 삭제 한 파일을 잃어 버렸습니까?</target>
        </trans-unit>
        <trans-unit id="2595bde55d452196fcb3d6a3c445cb3085999c6a" translate="yes" xml:space="preserve">
          <source>I know I can checkout a file using &lt;code&gt;git checkout HEAD^ foo.bar&lt;/code&gt;, but I don't really know when that file was deleted.</source>
          <target state="translated">&lt;code&gt;git checkout HEAD^ foo.bar&lt;/code&gt; 사용하여 파일을 체크 아웃 할 수 있다는 것을 알고 있지만 해당 파일이 언제 삭제되었는지 알 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="eba6467d7396b7b9fb721b926bdf685135952115" translate="yes" xml:space="preserve">
          <source>I know my answer is not &lt;code&gt;Git&lt;/code&gt; commands but it is fast, reliable and easy for beginner and professional developers. &lt;strong&gt;Webstorm&lt;/strong&gt; VCS tools are awesome and perfect for working with &lt;code&gt;Git&lt;/code&gt; and doesn't need any other plugin or tools.</source>
          <target state="translated">내 대답은 &lt;code&gt;Git&lt;/code&gt; 명령이 아니지만 초보자와 전문 개발자에게는 빠르고 안정적이며 쉽다는 것을 알고 있습니다. &lt;strong&gt;Webstorm&lt;/strong&gt; VCS 도구는 &lt;code&gt;Git&lt;/code&gt; 과 함께 사용하기에 &lt;strong&gt;훌륭하고&lt;/strong&gt; 완벽하며 다른 플러그인이나 도구가 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="89dfcdd9e8bbd725293e7a18ad19489f75a4a267" translate="yes" xml:space="preserve">
          <source>I know this is an old thread, but you could always &lt;code&gt;git revert&lt;/code&gt; your commit which deleted the file.  (&lt;em&gt;This assumes that the deletion was the only change in the commit.&lt;/em&gt;)</source>
          <target state="translated">나는 이것이 오래된 스레드라는 것을 알고 있지만 파일을 삭제 한 커밋을 항상 &lt;code&gt;git revert&lt;/code&gt; 수 있습니다. ( &lt;em&gt;이것은 삭제가 커밋의 유일한 변경이라고 가정합니다.&lt;/em&gt; )</target>
        </trans-unit>
        <trans-unit id="28f0c9f33dcb9f48819ddbb5b84b017800f63e4f" translate="yes" xml:space="preserve">
          <source>I right click on the path that contains the deleted file, then go to &lt;code&gt;Git&lt;/code&gt; and then click on &lt;code&gt;Show History&lt;/code&gt;.</source>
          <target state="translated">삭제 된 파일이 포함 된 경로를 마우스 오른쪽 버튼으로 클릭하고 &lt;code&gt;Git&lt;/code&gt; 으로 이동 한 다음 &lt;code&gt;Show History&lt;/code&gt; 를 클릭하십시오.</target>
        </trans-unit>
        <trans-unit id="34603449f52d2c27625f1c05d738504c8702e977" translate="yes" xml:space="preserve">
          <source>I'm hoping I don't have to manually browse my logs, checkout the entire project for a given SHA and then manually copy that file into my original project checkout.</source>
          <target state="translated">로그를 수동으로 탐색하고 지정된 SHA에 대한 전체 프로젝트를 체크 아웃 한 다음 해당 파일을 원래 프로젝트 체크 아웃에 수동으로 복사하지 않아도되기를 바랍니다.</target>
        </trans-unit>
        <trans-unit id="96f9ed9f775c3fe9b385285a04678fd884297057" translate="yes" xml:space="preserve">
          <source>I've got &lt;a href=&quot;http://blog.loxal.net/2012/03/git-checkout-get-back-deleted-file-w.html&quot;&gt;this solution&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://blog.loxal.net/2012/03/git-checkout-get-back-deleted-file-w.html&quot;&gt;이 솔루션을&lt;/a&gt; 가지고 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9b9db0b68376fa55c6fdabc40df1dba2b3aecdec" translate="yes" xml:space="preserve">
          <source>If the deletion has been committed, find the commit where it happened, then recover the file from this commit.</source>
          <target state="translated">삭제가 커밋 된 경우, 커밋이 발생한 위치를 찾은 다음이 커밋에서 파일을 복구하십시오.</target>
        </trans-unit>
        <trans-unit id="de0baa3cc9dfb8decb61e77e1abd6762204debec" translate="yes" xml:space="preserve">
          <source>If the deletion has not been committed, the command below will restore the deleted file in the working tree.</source>
          <target state="translated">삭제가 커밋되지 않은 경우 아래 명령은 작업 트리에서 삭제 된 파일을 복원합니다.</target>
        </trans-unit>
        <trans-unit id="047447bc7a2342a1cf826219e28d4d62355ac46f" translate="yes" xml:space="preserve">
          <source>If you are using zsh and have the EXTENDED_GLOB option enabled, the caret symbol won't work. You can use &lt;code&gt;~1&lt;/code&gt; instead.</source>
          <target state="translated">zsh를 사용하고 EXTENDED_GLOB 옵션을 활성화하면 캐럿 기호가 작동하지 않습니다. &lt;code&gt;~1&lt;/code&gt; 대신 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8ad0fd02f4ad4c1d4a196c2a604eb48301224827" translate="yes" xml:space="preserve">
          <source>If you know the commit that deleted the file(s), run this command where &lt;code&gt;&amp;lt;SHA1_deletion&amp;gt;&lt;/code&gt; is the commit that deleted the file:</source>
          <target state="translated">파일을 삭제 한 커밋을 알고있는 경우 &lt;code&gt;&amp;lt;SHA1_deletion&amp;gt;&lt;/code&gt; 은 파일을 삭제 한 커밋입니다.</target>
        </trans-unit>
        <trans-unit id="89f2b3156c4a0523a98bf97aad52df1cade97b35" translate="yes" xml:space="preserve">
          <source>If you know the filename, this is an easy way with basic commands:</source>
          <target state="translated">파일 이름을 알고 있다면 기본 명령을 사용하는 쉬운 방법입니다.</target>
        </trans-unit>
        <trans-unit id="e185b7df9803a6f09dc1c3b8a6c5a8d43c9e566b" translate="yes" xml:space="preserve">
          <source>If you only made changes and deleted a file, but not commit it, and now you broke up with your changes</source>
          <target state="translated">파일을 변경하고 삭제했지만 파일을 커밋하지 않은 경우 이제 변경 내용을 적용한 경우</target>
        </trans-unit>
        <trans-unit id="55de8ec5031d361ce11841eb319744a3ddadf9d1" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re insane, use &lt;a href=&quot;http://www.kernel.org/pub/software/scm/git/docs/git-bisect.html&quot;&gt;&lt;code&gt;git-bisect&lt;/code&gt;&lt;/a&gt;. Here's what to do:</source>
          <target state="translated">미쳤다면 &lt;a href=&quot;http://www.kernel.org/pub/software/scm/git/docs/git-bisect.html&quot;&gt; &lt;code&gt;git-bisect&lt;/code&gt; 사용하십시오&lt;/a&gt; . 수행 할 작업은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="074756c56c5e5901b0b6db4edac45a2b54418cd5" translate="yes" xml:space="preserve">
          <source>In case you are looking for the path of the file to recover, the following command will display a summary of all deleted files.</source>
          <target state="translated">복구 할 파일 경로를 찾는 경우 다음 명령은 삭제 된 모든 파일의 요약을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="6ec913e2e6af37b4f0d63506091201ac81ca2d3c" translate="yes" xml:space="preserve">
          <source>In many cases, it can be useful to use &lt;a href=&quot;https://en.wikipedia.org/wiki/GNU_Core_Utilities&quot;&gt;coreutils&lt;/a&gt; (grep, sed, etc.) in conjunction with Git. I already know these tools quite well, but Git less so. If I wanted to do a search for a deleted file, I would do the following:</source>
          <target state="translated">많은 경우, Git과 함께 &lt;a href=&quot;https://en.wikipedia.org/wiki/GNU_Core_Utilities&quot;&gt;coreutils&lt;/a&gt; (grep, sed 등)를 사용하는 것이 유용 할 수 있습니다. 나는 이미이 도구를 잘 알고 있지만 Git은 적습니다. 삭제 된 파일을 검색하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="f4d133a6f805d02d6b82eca58118642ecaad7718" translate="yes" xml:space="preserve">
          <source>In order to restore all deleted file with git, you can also do : &lt;code&gt;git checkout $(git ls-files --deleted)&lt;/code&gt;</source>
          <target state="translated">git으로 삭제 된 모든 파일을 복원하려면 다음을 수행하십시오 &lt;code&gt;git checkout $(git ls-files --deleted)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4ed51457543786e9c27e2fc70cbaf6d8cd9c60ee" translate="yes" xml:space="preserve">
          <source>In our case we accidentally deleted files in a commit and some commit later we realized our mistake and wanted to get back all the files that were deleted but not those that were modified.</source>
          <target state="translated">우리의 경우 실수로 커밋에서 파일을 삭제하고 일부 커밋은 나중에 실수를 인식하고 삭제되었지만 수정 된 파일은 아닌 모든 파일을 다시 가져 오기를 원했습니다.</target>
        </trans-unit>
        <trans-unit id="4672ee90169ea52e4f4e8141cd6de83da85a14de" translate="yes" xml:space="preserve">
          <source>Inspect each dangling commit</source>
          <target state="translated">매달린 커밋 검사</target>
        </trans-unit>
        <trans-unit id="7fc020ef8a6723bd5c1c9e692f926685d938d21a" translate="yes" xml:space="preserve">
          <source>It was tested on Git version 1.7.5.4.</source>
          <target state="translated">Git 버전 1.7.5.4에서 테스트되었습니다.</target>
        </trans-unit>
        <trans-unit id="15fb860c3de4ff3a3af657b535131c40c2d0fa0d" translate="yes" xml:space="preserve">
          <source>Just like others have stated before me.</source>
          <target state="translated">다른 사람들이 내 앞에서 언급 한 것처럼.</target>
        </trans-unit>
        <trans-unit id="29e8046e797ae7f62445d6fa63a5aea3286e52be" translate="yes" xml:space="preserve">
          <source>List all the commits for that file.</source>
          <target state="translated">해당 파일에 대한 모든 커밋을 나열하십시오.</target>
        </trans-unit>
        <trans-unit id="a83a975721f20998fd5fde378ab5f28a5137d46f" translate="yes" xml:space="preserve">
          <source>List dangling commits</source>
          <target state="translated">매달려있는 커밋 목록</target>
        </trans-unit>
        <trans-unit id="ade6b7703dd09f66cb6252dcb63a6cabb7b0d80a" translate="yes" xml:space="preserve">
          <source>My files reappeared when I moved to the dangling commit.</source>
          <target state="translated">매달린 커밋으로 옮길 때 파일이 다시 나타납니다.</target>
        </trans-unit>
        <trans-unit id="4acfc8175610283caaa61e30c26f3fd31c21c666" translate="yes" xml:space="preserve">
          <source>My new favorite alias, based on &lt;a href=&quot;https://stackoverflow.com/users/525305/bonyiii&quot;&gt;bonyiii&lt;/a&gt;'s &lt;a href=&quot;https://stackoverflow.com/a/11301004/6309&quot;&gt;answer&lt;/a&gt; (upvoted), and my own answer about &quot;&lt;a href=&quot;https://stackoverflow.com/a/7005698/6309&quot;&gt;Pass an argument to a Git alias command&lt;/a&gt;&quot;:</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/users/525305/bonyiii&quot;&gt;bonyiii&lt;/a&gt; 의 &lt;a href=&quot;https://stackoverflow.com/a/11301004/6309&quot;&gt;답변&lt;/a&gt; (위로 올라옴 )과 &quot; &lt;a href=&quot;https://stackoverflow.com/a/7005698/6309&quot;&gt;Git alias 명령에 인수 전달&lt;/a&gt; &quot;에 대한 나의 마음에 드는 별명 :</target>
        </trans-unit>
        <trans-unit id="b209eefbe269f1a1c3a36e2ed2a82c77eb6680bd" translate="yes" xml:space="preserve">
          <source>Note the &lt;strong&gt;^&lt;/strong&gt; after the commit id as we want to restore something from the commit &lt;strong&gt;before&lt;/strong&gt; the one that deleted the file.</source>
          <target state="translated">파일을 삭제 한 커밋 &lt;strong&gt;보다&lt;/strong&gt; 커밋에서 무언가를 복원하려는 커밋 ID 뒤에 &lt;strong&gt;^&lt;/strong&gt; 를 기록하십시오.</target>
        </trans-unit>
        <trans-unit id="fb2155da1610b0786a85a08068ac533570c67243" translate="yes" xml:space="preserve">
          <source>Note- &lt;code&gt;84sdhfddbddd&lt;/code&gt; is your &lt;code&gt;commit id&lt;/code&gt;</source>
          <target state="translated">주 &lt;code&gt;84sdhfddbddd&lt;/code&gt; 는 &lt;code&gt;commit id&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f3e476b3e742e54e39d9908d875dda449b796377" translate="yes" xml:space="preserve">
          <source>Now &lt;code&gt;git log&lt;/code&gt; shows:</source>
          <target state="translated">이제 &lt;code&gt;git log&lt;/code&gt; 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="3d854145f4184e9cf266cf0e2684ab02d15cf51e" translate="yes" xml:space="preserve">
          <source>Now it's time to run the automated test. The shell command &lt;code&gt;'[ -e foo.bar ]'&lt;/code&gt; will return 0 if &lt;code&gt;foo.bar&lt;/code&gt; exists, and 1 otherwise. The &quot;run&quot; command of &lt;code&gt;git-bisect&lt;/code&gt; will use binary search to automatically find the first commit where the test fails. It starts halfway through the range given (from good to bad) and cuts it in half based on the result of the specified test.</source>
          <target state="translated">이제 자동화 된 테스트를 실행할 차례입니다. 쉘 명령 &lt;code&gt;'[ -e foo.bar ]'&lt;/code&gt; 는 &lt;code&gt;foo.bar&lt;/code&gt; 가 존재하면 0을 리턴하고 그렇지 않으면 1을 리턴합니다. &lt;code&gt;git-bisect&lt;/code&gt; 의 &quot;run&quot;명령은 바이너리 검색을 사용하여 테스트가 실패한 첫 번째 커밋을 자동으로 찾습니다. 주어진 범위의 중간에서 시작하여 지정된 테스트 결과에 따라 반으로 줄입니다.</target>
        </trans-unit>
        <trans-unit id="68b2793e95c052d7a0fe229e5d3de66be216dd24" translate="yes" xml:space="preserve">
          <source>Now you're at the commit which deleted it. From here, you can jump back to the future and use &lt;a href=&quot;http://www.kernel.org/pub/software/scm/git/docs/git-revert.html&quot;&gt;&lt;code&gt;git-revert&lt;/code&gt;&lt;/a&gt; to undo the change,</source>
          <target state="translated">이제 당신은 그것을 커밋 한 커밋에 있습니다. 여기에서 미래로 건너 뛰고 &lt;a href=&quot;http://www.kernel.org/pub/software/scm/git/docs/git-revert.html&quot;&gt; &lt;code&gt;git-revert&lt;/code&gt; &lt;/a&gt; 를 사용하여 변경을 취소 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c40b6f9f32863fe21a40018099206d6d7df5c368" translate="yes" xml:space="preserve">
          <source>Or in one command, if &lt;code&gt;$file&lt;/code&gt; is the file in question.</source>
          <target state="translated">또는 &lt;code&gt;$file&lt;/code&gt; 이 문제의 파일 인 경우 하나의 명령으로.</target>
        </trans-unit>
        <trans-unit id="503ff517174b07a1604eb5557f16426918a33625" translate="yes" xml:space="preserve">
          <source>Put this in your &lt;code&gt;.bash_profile&lt;/code&gt; (or other relevant file that loads when you open a command shell):</source>
          <target state="translated">이것을 &lt;code&gt;.bash_profile&lt;/code&gt; (또는 명령 셸을 열 때로 드되는 다른 관련 파일)에 넣으십시오.</target>
        </trans-unit>
        <trans-unit id="d41fceebb483be92b84268b258f3ee2f0ab02d74" translate="yes" xml:space="preserve">
          <source>Quick:</source>
          <target state="translated">Quick:</target>
        </trans-unit>
        <trans-unit id="be4a93993abff83a931ba3ce4e340c9667362430" translate="yes" xml:space="preserve">
          <source>Restore the deleted file:</source>
          <target state="translated">삭제 된 파일을 복원하십시오.</target>
        </trans-unit>
        <trans-unit id="04c4511b91c525e2da2ef7db41615c6ca0a3fd2e" translate="yes" xml:space="preserve">
          <source>Sample output:</source>
          <target state="translated">샘플 출력 :</target>
        </trans-unit>
        <trans-unit id="c92357b4a2b359eb2a35cf182af19870a9ad2de8" translate="yes" xml:space="preserve">
          <source>Say I'm in a Git repository. I delete a file and commit that change. I continue working and make some more commits. Then, I find I need to restore that file.</source>
          <target state="translated">내가 Git 저장소에 있다고 가정 해보십시오. 파일을 삭제하고 해당 변경 사항을 커밋합니다. 나는 계속 일하고 더 커밋합니다. 그런 다음 해당 파일을 복원해야합니다.</target>
        </trans-unit>
        <trans-unit id="473b298f6105ef8d5b9a11a1220f338639c5fdf1" translate="yes" xml:space="preserve">
          <source>Say you find $commitid 1234567..., then</source>
          <target state="translated">$ commitid 1234567 ...을 찾은 다음</target>
        </trans-unit>
        <trans-unit id="30105957349788bb14b066f0b4c5952facc2f545" translate="yes" xml:space="preserve">
          <source>See: &lt;a href=&quot;https://git-scm.com/docs/git-restore/2.23.0&quot;&gt;git-restore doc for git 2.23.0&lt;/a&gt;</source>
          <target state="translated">참조 : &lt;a href=&quot;https://git-scm.com/docs/git-restore/2.23.0&quot;&gt;git 2.23.0에 대한 git-restore doc&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c01a7e77b0553197b6aa85b1fb239ae143f80a4a" translate="yes" xml:space="preserve">
          <source>Simple and precise-</source>
          <target state="translated">간단하고 정확한</target>
        </trans-unit>
        <trans-unit id="78e73f074d539e6ec4c314abac8352e71459e74c" translate="yes" xml:space="preserve">
          <source>So I had to restore a bunch of deleted files from a specific commit and I managed it with two commands:</source>
          <target state="translated">그래서 특정 커밋에서 삭제 된 파일을 복원해야했고 두 가지 명령으로 파일을 관리했습니다.</target>
        </trans-unit>
        <trans-unit id="633615f12d7cf86bd0352280f02e8c4469ab24a9" translate="yes" xml:space="preserve">
          <source>So rename this alias (as shown below).</source>
          <target state="translated">따라서이 별칭의 이름을 바꿉니다 (아래 참조).</target>
        </trans-unit>
        <trans-unit id="97cba4858411c435e526dd651157aac20178222c" translate="yes" xml:space="preserve">
          <source>Thanks</source>
          <target state="translated">Thanks</target>
        </trans-unit>
        <trans-unit id="b2c441ae5f81fe346cf7a62436d03b5cceadb3d4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--source&lt;/code&gt; argument tells the &lt;code&gt;restore&lt;/code&gt; command where to look for the file(s) to restore and it can be any commit and even the index.</source>
          <target state="translated">&lt;code&gt;--source&lt;/code&gt; 인수는 &lt;code&gt;restore&lt;/code&gt; 명령에 복원 할 파일을 찾을 위치를 알려주며 커밋 및 색인 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e813f65a0b3691c63386f4278749d29daadb41be" translate="yes" xml:space="preserve">
          <source>The VCS tools show all revisions train and I can see all commits and changes of each of them.</source>
          <target state="translated">VCS 도구는 모든 개정 교육을 표시하며 각 개정의 모든 커밋 및 변경 사항을 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1f53ec9799d8cfa5ff1e1866bde31890306f0b72" translate="yes" xml:space="preserve">
          <source>The file will now be restored to the state it had before removal. Remember to re-commit it to the working tree if you want to keep it around.</source>
          <target state="translated">이제 파일이 제거되기 전의 상태로 복원됩니다. 작업 트리를 유지하려면 작업 트리에 다시 커밋해야합니다.</target>
        </trans-unit>
        <trans-unit id="f7c9171dfc3db37d93962d4325b3b2cf7c45af29" translate="yes" xml:space="preserve">
          <source>The files had been added to the .gitignore file and then cleared with git rm, I needed to restore the files but then unstage them. I had hundreds of files to restore, typing things manually for each file as in the other examples was going to be far too slow.</source>
          <target state="translated">파일이 .gitignore 파일에 추가 된 다음 git rm로 지워졌습니다. 파일을 복원했지만 스테이지를 해제해야했습니다. 다른 예제에서와 같이 각 파일에 대해 수동으로 입력하는 것이 너무 느려서 복원 할 수백 개의 파일이 있습니다.</target>
        </trans-unit>
        <trans-unit id="af864e7644aee45546dff872edd0c9ced99f0ca2" translate="yes" xml:space="preserve">
          <source>The last commit (topmost) is the one that deleted the file. So you need to restore the second to last commit.</source>
          <target state="translated">마지막 커밋 (맨 위)은 파일을 삭제 한 커밋입니다. 따라서 마지막 커밋까지 두 번째를 복원해야합니다.</target>
        </trans-unit>
        <trans-unit id="179b292311ba41e37c237c1bc2e2e2097f189bf7" translate="yes" xml:space="preserve">
          <source>The part before the pipe lists all the files that were deleted in the  commit; they are all checkout from the previous commit to restore them.</source>
          <target state="translated">파이프 앞 부분에는 커밋에서 삭제 된 모든 파일이 나열됩니다. 그것들은 그것들을 복원하기 위해 이전 커밋에서 모두 체크 아웃됩니다.</target>
        </trans-unit>
        <trans-unit id="3649c48e5d559b132f00ccd2da0f4ddb4dc65318" translate="yes" xml:space="preserve">
          <source>Then I select the commits that my friend delete the &lt;code&gt;PostAd.js&lt;/code&gt; file. now see below:</source>
          <target state="translated">그런 다음 친구가 &lt;code&gt;PostAd.js&lt;/code&gt; 파일을 삭제한다는 커밋을 선택합니다. 이제 아래를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="887d93b97cbf6fce2f3eecd42144add33539ab27" translate="yes" xml:space="preserve">
          <source>Then checkout the version at the commit before, using the caret (&lt;code&gt;^&lt;/code&gt;) symbol:</source>
          <target state="translated">그런 다음 캐럿 ( &lt;code&gt;^&lt;/code&gt; ) 기호를 사용하여 커밋에서 버전을 체크 아웃하십시오.</target>
        </trans-unit>
        <trans-unit id="2624b916bf01c722be8fb21993d9edd3842b5f8d" translate="yes" xml:space="preserve">
          <source>Then use:</source>
          <target state="translated">그런 다음 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="84560310abc09a3bcce16de3e3fe92f69188d4f1" translate="yes" xml:space="preserve">
          <source>This alias first checks to find the last commit where this file existed, then does a git checkout of that file path from that last commit where this file existed. &lt;a href=&quot;https://stackoverflow.com/questions/43880999/how-to-create-a-git-alias-with-nested-commands-with-parameters&quot;&gt;source&lt;/a&gt;</source>
          <target state="translated">이 별명은 먼저이 파일이 존재하는 마지막 커밋을 확인한 다음이 파일이 존재했던 마지막 커밋에서 해당 파일 경로의 git checkout을 수행합니다. &lt;a href=&quot;https://stackoverflow.com/questions/43880999/how-to-create-a-git-alias-with-nested-commands-with-parameters&quot;&gt;출처&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1eb6b6e91740373c249d7d10e288531d77a9f2b2" translate="yes" xml:space="preserve">
          <source>This will restore the file version which was in that commit.</source>
          <target state="translated">그러면 해당 커밋에 있던 파일 버전이 복원됩니다.</target>
        </trans-unit>
        <trans-unit id="37655ac1245f8591d2f38cd455e9d49ec35a3537" translate="yes" xml:space="preserve">
          <source>To restore a deleted and commited file:</source>
          <target state="translated">삭제 및 커밋 된 파일을 복원하려면</target>
        </trans-unit>
        <trans-unit id="3afcbee303af78ce21b4a78ee04e873e1734bf42" translate="yes" xml:space="preserve">
          <source>To restore all those deleted files in a folder enter the following command.</source>
          <target state="translated">폴더에서 삭제 된 파일을 모두 복원하려면 다음 명령을 입력하십시오.</target>
        </trans-unit>
        <trans-unit id="413fc454a6c92ed3ee7fa5220400299d46be48a5" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;git checkout $commit~1 path/to/file.ext&lt;/code&gt; to restore the deleted file.</source>
          <target state="translated">&lt;code&gt;git checkout $commit~1 path/to/file.ext&lt;/code&gt; 를 사용하여 삭제 된 파일을 복원하십시오.</target>
        </trans-unit>
        <trans-unit id="3ef76ed91364f47bd82da65f6052bb800e8350f4" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;git log --diff-filter=D --summary&lt;/code&gt; to get all the commits which have deleted files and the files deleted;</source>
          <target state="translated">&lt;code&gt;git log --diff-filter=D --summary&lt;/code&gt; 를 사용하여 파일을 삭제하고 파일을 삭제 한 모든 커밋을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="80e2f97fcdf6947fcab3ecb741d4689e977d0f3a" translate="yes" xml:space="preserve">
          <source>Warning, with Git 2.23 (Q3 2019) comes the &lt;a href=&quot;https://stackoverflow.com/a/57066072/6309&quot;&gt;experimental command&lt;/a&gt; named &lt;a href=&quot;https://git-scm.com/docs/git-restore&quot;&gt;&lt;code&gt;git restore&lt;/code&gt;&lt;/a&gt;(!).</source>
          <target state="translated">경고, Git 2.23 (Q3 2019)에서는 &lt;a href=&quot;https://git-scm.com/docs/git-restore&quot;&gt; &lt;code&gt;git restore&lt;/code&gt; &lt;/a&gt; (!)라는 &lt;a href=&quot;https://stackoverflow.com/a/57066072/6309&quot;&gt;실험 명령&lt;/a&gt; 이 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="0c23a56fe3c60dc9bec56632a3f9c16a33f03413" translate="yes" xml:space="preserve">
          <source>What would be the easiest way to get that file back into my working copy?</source>
          <target state="translated">해당 파일을 작업 사본으로 되 돌리는 가장 쉬운 방법은 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="e74f8e39a2d57bbf0e4d0369a4e504528dae5181" translate="yes" xml:space="preserve">
          <source>What would be the quickest way to find the commit that deleted a given filename?</source>
          <target state="translated">주어진 파일 이름을 삭제 한 커밋을 찾는 가장 빠른 방법은 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="2dec5480d26f01e1477d6e25fe3b06d97cce47f7" translate="yes" xml:space="preserve">
          <source>When I find the revision/commit:</source>
          <target state="translated">개정 / 커밋을 찾은 경우 :</target>
        </trans-unit>
        <trans-unit id="4982bc782f13e52b0180b611fb8a8e4cf9fe39ef" translate="yes" xml:space="preserve">
          <source>Where &lt;code&gt;$commit&lt;/code&gt; is the value of the commit you've found at step 1, e.g. &lt;code&gt;e4cf499627&lt;/code&gt;</source>
          <target state="translated">여기서 &lt;code&gt;$commit&lt;/code&gt; 은 1 단계에서 찾은 커밋 값입니다 (예 : &lt;code&gt;e4cf499627&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="3b6b3c90833d493ea739459bf5c02115fecdff09" translate="yes" xml:space="preserve">
          <source>Where &lt;code&gt;git ls-files --deleted&lt;/code&gt; lists all deleted file and &lt;code&gt;git checkout $(git command)&lt;/code&gt; restore list of files in parameter.</source>
          <target state="translated">여기서 &lt;code&gt;git ls-files --deleted&lt;/code&gt; 는 삭제 된 모든 파일을 나열하고 &lt;code&gt;git checkout $(git command)&lt;/code&gt; 매개 변수의 파일 목록을 복원합니다.</target>
        </trans-unit>
        <trans-unit id="57377ad23ee8026d022c08fea5152abc3d6356ab" translate="yes" xml:space="preserve">
          <source>You can get a list of all the deleted files in the working tree using the command below.</source>
          <target state="translated">아래 명령을 사용하여 작업 트리에서 삭제 된 모든 파일 목록을 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ce873c6de82c99f9838390e9e831839dc57f7d63" translate="yes" xml:space="preserve">
          <source>You should get something like:</source>
          <target state="translated">다음과 같은 것을 얻어야합니다.</target>
        </trans-unit>
        <trans-unit id="656c8a8044c6b002d6d5b41385b290980a778699" translate="yes" xml:space="preserve">
          <source>below example working for me</source>
          <target state="translated">아래 예제는 나를 위해 일합니다.</target>
        </trans-unit>
        <trans-unit id="c3478803aaee3e5bd32659f468616eb41f12f280" translate="yes" xml:space="preserve">
          <source>but your deleted files did not return, you simply do the following command:</source>
          <target state="translated">삭제 된 파일이 반환되지 않으면 다음 명령 만 수행하면됩니다.</target>
        </trans-unit>
        <trans-unit id="ed64cf154abfb2e3ac22d570db104eae6bc49977" translate="yes" xml:space="preserve">
          <source>commit 3ea4e3af253ac6fd1691ff6bb89c964f54802302 Author: Alexander
  Orlov  Date:   Thu May 12 22:10:22 2011
  +0200</source>
          <target state="translated">커밋 3ea4e3af253ac6fd1691ff6bb89c964f54802302 저자 : Alexander Orlov 날짜 : Thu May 12 22:10:22 2011 +0200</target>
        </trans-unit>
        <trans-unit id="580277782c86ec930b551609bc4076697fffde4a" translate="yes" xml:space="preserve">
          <source>commit bfe68bd117e1091c96d2976c99b3bcc8310bebe7 Author: Alexander
  Orlov  Date:   Thu May 12 23:44:27 2011
  +0200</source>
          <target state="translated">커밋 bfe68bd117e1091c96d2976c99b3bcc8310bebe7 저자 : Alexander Orlov 날짜 : Thu May 12 23:44:27 2011 +0200</target>
        </trans-unit>
        <trans-unit id="81b265a61cd82516cc1bbab5116676f7f6a39438" translate="yes" xml:space="preserve">
          <source>git checkout 84sdhfddbdddf~1</source>
          <target state="translated">git checkout 84sdhfddbdddf ~ 1</target>
        </trans-unit>
        <trans-unit id="6550c2b5e5551e55a5cc9b87473debc45429d9ad" translate="yes" xml:space="preserve">
          <source>git log --diff-filter=D --summary</source>
          <target state="translated">자식 로그 --diff-filter = D-요약</target>
        </trans-unit>
        <trans-unit id="47e65bc2008082a1e640186985139b526efc196d" translate="yes" xml:space="preserve">
          <source>or you could go back one commit and manually inspect the damage:</source>
          <target state="translated">또는 하나의 커밋으로 돌아가서 수동으로 손상을 검사 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b3599b0a79a8bb7f67515454de84ceeb8b6c732e" translate="yes" xml:space="preserve">
          <source>through this you can easily recover all deleted files.</source>
          <target state="translated">이를 통해 삭제 된 모든 파일을 쉽게 복구 할 수 있습니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
