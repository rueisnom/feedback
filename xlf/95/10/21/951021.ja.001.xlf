<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/951021">
    <body>
      <group id="951021">
        <trans-unit id="406622c7f741253142b69af32d2fc69183da39c3" translate="yes" xml:space="preserve">
          <source>&amp;ndash; and the results are:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;ndash;そして結果は：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2700f8d4e97d3dfe5a1abe452d56182b8a5af7da" translate="yes" xml:space="preserve">
          <source>'Javascript is single threaded' is not a valid answer. For example running a sleep function within a worker would not block any of the code running in the ui thread.</source>
          <target state="translated">Javascript はシングルスレッドです」は有効な答えではありません。例えば、ワーカー内で sleep 関数を実行しても、ui スレッド内で実行されているコードはブロックされません。</target>
        </trans-unit>
        <trans-unit id="8990b3dc26e543ba76aed35e3e55df64d120bdc8" translate="yes" xml:space="preserve">
          <source>(See the &lt;a href=&quot;https://stackoverflow.com/a/39914235/11236&quot;&gt;updated answer for 2016&lt;/a&gt;)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/39914235/11236&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2016年&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最新の回答を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ご覧ください&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6590ba2888c06482a38037df1538aafe54bd08f9" translate="yes" xml:space="preserve">
          <source>...and here's another link with client-side solutions: &lt;a href=&quot;http://www.devcheater.com/&quot;&gt;http://www.devcheater.com/&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;...そしてここにクライアント側のソリューションとの別のリンクがあります：&lt;/font&gt;&lt;a href=&quot;http://www.devcheater.com/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : &lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;//www.devcheater.com/&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ece690a66efaf36ced110539212ae4615d51249f" translate="yes" xml:space="preserve">
          <source>//..............
example4:</source>
          <target state="translated">//..............
example4:</target>
        </trans-unit>
        <trans-unit id="dea789c54f2c923b12ea988cf9fcd5bc5b25c8da" translate="yes" xml:space="preserve">
          <source>//.................
example3:</source>
          <target state="translated">//.................
example3:</target>
        </trans-unit>
        <trans-unit id="2fbcc0af48ae16d408a6c7094d3f5f69ffd18acb" translate="yes" xml:space="preserve">
          <source>//....................................
//example2:</source>
          <target state="translated">//....................................
//example2:</target>
        </trans-unit>
        <trans-unit id="7e1c9ecfb5e594fd8df8c40ad65bff0a10eecc30" translate="yes" xml:space="preserve">
          <source>//.........................................
//example1:</source>
          <target state="translated">//.........................................
//example1:</target>
        </trans-unit>
        <trans-unit id="ff4e661d0ce2ba339c7427f12d9e41d828564d04" translate="yes" xml:space="preserve">
          <source>2017 &amp;mdash; 2019 update</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2017年-2019年更新&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="28b9ccd63581781697b7ac78ab9b9e05a2e34933" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://ponyfoo.com/articles/es6-promises-in-depth&quot;&gt;Promises, a native feature of ES2015&lt;/a&gt; (aka ES6). We also use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot;&gt;arrow functions&lt;/a&gt; in the definition of the sleep function.</source>
          <target state="translated">&lt;a href=&quot;https://ponyfoo.com/articles/es6-promises-in-depth&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ES2015&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（別名ES6）の&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ネイティブ機能であるPromises&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;スリープ関数の定義では、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;矢印関数&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;も使用し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9d171b351e504cff00cf2938d35f83f28dca00dc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; landed in V8 and has been &lt;a href=&quot;https://developers.google.com/web/fundamentals/getting-started/primers/async-functions&quot;&gt;enabled by default since Chrome 55&lt;/a&gt; (released in Dec 2016)</source>
          <target state="translated">&lt;code&gt;async&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; / &lt;/font&gt;&lt;/font&gt; &lt;code&gt;await&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はV8に搭載&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://developers.google.com/web/fundamentals/getting-started/primers/async-functions&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;され、Chrome 55&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（2016年12月にリリース）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;以降、デフォルトで有効になっています。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="91228676b24e988faeaa3234de04afb8b25f56d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;await&lt;/code&gt; can only be executed in functions prefixed with the &lt;code&gt;async&lt;/code&gt; keyword, or at the &lt;a href=&quot;https://developers.google.com/web/updates/2017/08/devtools-release-notes#await&quot;&gt;top level&lt;/a&gt; of your script in some environments (e.g. the Chrome DevTools console, or Runkit).</source>
          <target state="translated">&lt;code&gt;await&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;async&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;キーワードが&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;前に付いた関数で&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、または&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一部の環境（例：Chrome DevToolsコンソール、Runkit）のスクリプトの&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://developers.google.com/web/updates/2017/08/devtools-release-notes#await&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最上位&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;で&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;のみ実行でき&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1b65e8b3cd15cb2541889495ca76334a779e3f63" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;await&lt;/code&gt; only pauses the current &lt;code&gt;async&lt;/code&gt; function</source>
          <target state="translated">&lt;code&gt;await&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は現在の&lt;/font&gt;&lt;/font&gt; &lt;code&gt;async&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;機能&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;のみを一時停止し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="21d45d9144479c79e01b39994c172dfe83dbe355" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;2019 Update using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/wait&quot;&gt;Atomics.wait&lt;/a&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/wait&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Atomics.wait&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用した2019アップデート&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0a0e3f2feb92d1b5feba526fda2d2ab318506af4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Edit&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Edit&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9fc75c7dfe1a500470f6123e2a2cfd9595dd1f10" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Further Edit&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;さらに編集&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2d4a06d15915075ed2306d054b2f1a25c0b71514" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Only for debug/dev&lt;/strong&gt; , I post this if it's useful to someone</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;debug / devの&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;場合&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;のみ、&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;誰かに役立つ場合はこれを投稿します&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="871a9903645c9d0b3fd6b02bed10f4e774f9b501" translate="yes" xml:space="preserve">
          <source>A lot of the answers don't (directly) answer the question, and neither does this one...</source>
          <target state="translated">多くの回答は(直接)質問には答えていないし、これも答えていない...。</target>
        </trans-unit>
        <trans-unit id="02fbbfb92f5ca1686942271ff578950170d22049" translate="yes" xml:space="preserve">
          <source>Adding my two bits. I needed a busy-wait for testing purposes. I didn't want to split the code as that would be a lot of work, so a simple for did it for me.</source>
          <target state="translated">私の2つのビットを追加します。テスト目的のためにビジーウェイトが必要でした。コードを分割するのは面倒なので、シンプルなforが私のためにそれをしてくれました。</target>
        </trans-unit>
        <trans-unit id="9dcff79a8311a66c39757decc8b388bb60ea8cc6" translate="yes" xml:space="preserve">
          <source>Also, when you are calling &lt;code&gt;alert()&lt;/code&gt;, your code will be paused too, while alert is shown -- need to find a way to not display alert but get the same effect. :)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;また、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;alert()&lt;/code&gt; を&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;呼び出すと&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、alertが表示されている間、コードも一時停止されます。alertを表示せずに同じ効果を得る方法を見つける必要があります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;:)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5afed1ae2c6b9517f18fd5577443ba3207b5198f" translate="yes" xml:space="preserve">
          <source>As pointed out in the comments this will absolutely NOT WORK in a loop. You could do some fancy (ugly) hacking to make it work in a loop, but in general that will just make for disastrous spaghetti code.</source>
          <target state="translated">コメントで指摘されているように、これはループでは絶対に動作しません。ループで動作させるために、いくつかの派手な(醜い)ハッキングをすることができますが、一般的には、それは悲惨なスパゲッティコードを作るだけになります。</target>
        </trans-unit>
        <trans-unit id="78dc04bdeddc512eb551f2354e0f1b2d233bb353" translate="yes" xml:space="preserve">
          <source>Better solution to make things look like what most people want is to use an anonymous function:</source>
          <target state="translated">ほとんどの人が望んでいるように見えるようにするためのより良い解決策は、匿名機能を使用することです。</target>
        </trans-unit>
        <trans-unit id="e0fbc4de54aec003b0f963e25c69166ec126c9ce" translate="yes" xml:space="preserve">
          <source>But for server-side code, it may require a blocking function (for example, so you can effectively have thread synchronization).</source>
          <target state="translated">しかし、サーバーサイドのコードの場合は、ブロッキング機能が必要になることがあります(例えば、スレッド同期を効果的に行うことができます)。</target>
        </trans-unit>
        <trans-unit id="d6af12b93df4bc50714ba128e4b639a5d59aa76b" translate="yes" xml:space="preserve">
          <source>CoffeeScript versions:</source>
          <target state="translated">CoffeeScriptのバージョン。</target>
        </trans-unit>
        <trans-unit id="5d60c7dd62fdcf4abcc61a6a7d335b7117968b4d" translate="yes" xml:space="preserve">
          <source>Compatibility</source>
          <target state="translated">Compatibility</target>
        </trans-unit>
        <trans-unit id="364739c396ccc878b2a23642e03231bfa4bf99da" translate="yes" xml:space="preserve">
          <source>Define a function you want to execute like this:</source>
          <target state="translated">このように実行したい関数を定義します。</target>
        </trans-unit>
        <trans-unit id="5301648dcf6b53cefc9ed52999aaa92d4603cae0" translate="yes" xml:space="preserve">
          <source>Edit</source>
          <target state="translated">Edit</target>
        </trans-unit>
        <trans-unit id="f52876763a0f587fe6c80cf50302560ad36a2f93" translate="yes" xml:space="preserve">
          <source>Every time I've wanted a sleep in the middle of my function, I refactored to use a &lt;code&gt;setTimeout()&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;関数の途中でスリープ状態にする必要があるたびに、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;setTimeout()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用するようにリファクタリングしました&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="35e59ef9296b27b71a05dcd1854ce1d1ad148089" translate="yes" xml:space="preserve">
          <source>Every two second interval hide text for one second. This shows how to use setInterval and setTimeout to show and hide text each second.</source>
          <target state="translated">2秒間隔で1秒間テキストを非表示にする setIntervalとsetTimeoutを使って、1秒ごとにテキストを表示したり非表示にしたりする方法を示しています。</target>
        </trans-unit>
        <trans-unit id="ec471d84b36457f0d9d75c03377c9e3cd5f3de93" translate="yes" xml:space="preserve">
          <source>Example of use:</source>
          <target state="translated">使用例。</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">スニペットを展開</target>
        </trans-unit>
        <trans-unit id="0667554d48345180f0b6c72a70f8c62ccbe435d7" translate="yes" xml:space="preserve">
          <source>First you have to get Java loaded up on the page and make its methods available. To do that, I did this:</source>
          <target state="translated">まず、ページにJavaを読み込ませて、そのメソッドを利用できるようにしなければなりません。そのために、私は次のようにしました。</target>
        </trans-unit>
        <trans-unit id="9fd0da866187697a74c7a4d585f209f050b0a6ff" translate="yes" xml:space="preserve">
          <source>First:</source>
          <target state="translated">First:</target>
        </trans-unit>
        <trans-unit id="ad94030e3a79c84d3baf40f987b4a14740140416" translate="yes" xml:space="preserve">
          <source>For browsers, I agree that setTimeout and setInterval are the way to go.</source>
          <target state="translated">ブラウザの場合は、setTimeoutとsetIntervalを使うのが良いと思います。</target>
        </trans-unit>
        <trans-unit id="1d78b9f31f69fd44d434b274fb4468846341afdd" translate="yes" xml:space="preserve">
          <source>For the love of $DEITY please do not make a busy-wait sleep function.  &lt;code&gt;setTimeout&lt;/code&gt; and &lt;code&gt;setInterval&lt;/code&gt; do everything you need.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;$ DEITYが大好きなため、ビジー待機スリープ機能を作成しないでください。 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;setTimeout&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;および&lt;/font&gt;&lt;/font&gt; &lt;code&gt;setInterval&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、必要なすべてを実行します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="571cdab843f3ebdd129bb314e313e2cd1dd65f3b" translate="yes" xml:space="preserve">
          <source>For the specific case of wanting to space out a set of calls being executed by a loop, you can use something like the code below with prototype. Without prototype, you can substitute the delay function with setTimeout.</source>
          <target state="translated">ループで実行される一連の呼び出しの間を空けたい場合には、prototypeを使って以下のコードのようなものを使うことができます。prototypeがない場合は、delay関数をsetTimeoutで代用することができます。</target>
        </trans-unit>
        <trans-unit id="efcd1f399246bfc58ed9c6c688251a2c24ecf010" translate="yes" xml:space="preserve">
          <source>Here you go.  As the code says, don't be a bad dev and use this on websites.  It's a development utility function.</source>
          <target state="translated">お待たせしました。コードにも書いてあるように、下手な開発者にならずにWebサイトで使いましょう。開発ユーティリティ機能です。</target>
        </trans-unit>
        <trans-unit id="c492a5603570e145be84a5c0681b5e6e7ccb1118" translate="yes" xml:space="preserve">
          <source>Here's a simple solution using a synchronous XMLHttpRequest:</source>
          <target state="translated">同期XMLHttpRequestを使った簡単な解決策をご紹介します。</target>
        </trans-unit>
        <trans-unit id="b08af946d2b887ee9e4b258e0a4ecd19cd505273" translate="yes" xml:space="preserve">
          <source>Here's an example fresh from their own readme:</source>
          <target state="translated">これは、彼ら自身の readme からの例です。</target>
        </trans-unit>
        <trans-unit id="d3cadff62c66a60c1e0320a49970845401a41771" translate="yes" xml:space="preserve">
          <source>Here's my two cents (or functions):</source>
          <target state="translated">ここで私の2セント(または機能)を紹介します。</target>
        </trans-unit>
        <trans-unit id="0382b9458ed8f29fea57cc19ae4614f7cc404225" translate="yes" xml:space="preserve">
          <source>However, setTimeout does not hold up execution, it executes the next line of the function immediately after the timeout is SET, not after the timeout expires, so that does not accomplish the same task that a sleep would accomplish.</source>
          <target state="translated">しかし、setTimeoutは実行を保持せず、タイムアウトが切れた後ではなく、タイムアウトがSETされた直後に関数の次の行を実行するので、スリープと同じタスクを達成することはできません。</target>
        </trans-unit>
        <trans-unit id="ca583f63dc43e0e510a5ef5b0624a4eca0dd835d" translate="yes" xml:space="preserve">
          <source>I agree with the other posters, a busy sleep is just a bad idea.</source>
          <target state="translated">他の投稿者の方の意見に同意しますが、忙しい寝坊は仕方ないですね。</target>
        </trans-unit>
        <trans-unit id="762abd47fb03bf8b10ac7924bef5545dfb6fab19" translate="yes" xml:space="preserve">
          <source>I can understand the purpose of a sleep function if you have to deal with synchronous execution. The setInterval and setTimeout functions create a parallel execution thread which returns the execution sequence back to the main program, which is ineffective if you have to wait for a given result. Of course one may use events and handlers, but in some cases is not what is intended.</source>
          <target state="translated">同期実行を処理しなければならない場合、スリープ関数の目的は理解できます。setInterval と setTimeout 関数は並列実行スレッドを作成して、実行シーケンスをメインプログラムに戻しますが、与えられた結果を待たなければならない場合には効果がありません。もちろん、イベントやハンドラを使うこともできますが、場合によってはそれが意図したものではないこともあります。</target>
        </trans-unit>
        <trans-unit id="a3cef0714e27c56cfe5505fa00e8d235660d562a" translate="yes" xml:space="preserve">
          <source>I don't see any downside in doing this and it did the trick for me.</source>
          <target state="translated">私はこれを行うことには何の欠点を見ていないし、それは私のためのトリックをしました。</target>
        </trans-unit>
        <trans-unit id="a2ea779d0a3649c2ae0a107db682d6488f2b6ab9" translate="yes" xml:space="preserve">
          <source>I have searched/googled quite a few webpages on javascript sleep/wait... and there is NO answer if you want javascript to &quot;RUN, DELAY, RUN&quot;... what most people got was either, &quot;RUN, RUN(useless stuff), RUN&quot; or &quot;RUN, RUN + delayed RUN&quot;....</source>
          <target state="translated">javascriptのsleepwaitについてかなりの数のウェブページを検索してみましたが...javascriptを &quot;RUN,DELAY,RUN &quot;にしたい場合の答えはありません...ほとんどの人が得たのは、&quot;RUN,RUN(無駄なもの),RUN &quot;か &quot;RUN,RUN+delayed RUN &quot;のどちらかでした....。</target>
        </trans-unit>
        <trans-unit id="846334fe176a59e836dbcd318ba4902c8504517c" translate="yes" xml:space="preserve">
          <source>I know this is a bit of an old question, but if (like me) you're using Javascript with Rhino, you can use...</source>
          <target state="translated">少し古い質問になるかもしれませんが、(私のように)RhinoでJavascriptを使用している場合は...</target>
        </trans-unit>
        <trans-unit id="654099779870d2baee906c5427be5204727b2fd8" translate="yes" xml:space="preserve">
          <source>I needed a pretty accurate timer in Node.js and it works great for that.
However it seems like there is extremely limited support in browsers.</source>
          <target state="translated">私はNode.jsでかなり正確なタイマーを必要としていました。しかし、ブラウザでのサポートは非常に限られているようです。</target>
        </trans-unit>
        <trans-unit id="96f4f3d3f12779db1703b01c2464fd5c83de7ce6" translate="yes" xml:space="preserve">
          <source>I personally like the simple:</source>
          <target state="translated">個人的にはシンプルなのが好きです。</target>
        </trans-unit>
        <trans-unit id="fe95ddc694ec2735bd2d23af9cb11c280aa48457" translate="yes" xml:space="preserve">
          <source>I think it's perfectly reasonable to want to perform an action, wait, then perform another action. If you are used to writing in multi-threaded languages, you probably have the idea of yielding execution for a set amount of time until your thread wakes up.</source>
          <target state="translated">あるアクションを実行して、待ってから別のアクションを実行したいと思うのは完全に合理的だと思います。マルチスレッド言語での記述に慣れている人なら、スレッドが起動するまでの一定時間は実行をゆだねるという考えがあるのではないでしょうか。</target>
        </trans-unit>
        <trans-unit id="57d7896ab6043212f596391d958c7a99ca2dcb14" translate="yes" xml:space="preserve">
          <source>I would encapsulate setTimeOut in a Promise for code consistency with other asynchronous tasks : Demo in &lt;a href=&quot;http://jsfiddle.net/a4gjhpgd/&quot;&gt;Fiddle&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;他の非同期タスクとコードの一貫性を保つために、setTimeOutをPromiseにカプセル化します：Demo in &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://jsfiddle.net/a4gjhpgd/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Fiddle&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6401a6a07b06b26d74cf17ee0ceb50de6e36ff73" translate="yes" xml:space="preserve">
          <source>I'm using it all the time to create fake load time while creating scripts in P5js</source>
          <target state="translated">私はP5jsでスクリプトを作成している間、偽のロードタイムを作成するためにいつもこれを使用しています</target>
        </trans-unit>
        <trans-unit id="4ca06cff7abf55f5c9f43c01a64a8c7dcd8cb73d" translate="yes" xml:space="preserve">
          <source>I've searched for sleep solution too (not for production code, only for dev/tests) and found this article:</source>
          <target state="translated">私もスリープソリューションを検索してみたのですが(本番用のコードではなく、devtests用のみ)、こちらの記事を見つけました。</target>
        </trans-unit>
        <trans-unit id="f5fea6a22e18ccd301c4087ce8c66e970a37d2a2" translate="yes" xml:space="preserve">
          <source>If for some weird reason you're using Node older than 7 (which has reached &lt;a href=&quot;https://github.com/nodejs/Release&quot;&gt;end of life&lt;/a&gt;), or are targeting old browsers, &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; can still be used via &lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel&lt;/a&gt; (a tool that will &lt;a href=&quot;https://www.stevefenton.co.uk/2012/11/compiling-vs-transpiling/&quot;&gt;transpile&lt;/a&gt; JavaScript + new features into plain old JavaScript), with the &lt;a href=&quot;https://babeljs.io/docs/en/babel-plugin-transform-async-to-generator&quot;&gt;&lt;code&gt;transform-async-to-generator&lt;/code&gt;&lt;/a&gt; plugin.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;何らかの奇妙な理由で、7より古いノード（&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サポート&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/nodejs/Release&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;終了に&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;達した&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）を使用している場合、または古いブラウザーをターゲットにしている場合は、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;async&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; / &lt;/font&gt;&lt;/font&gt; &lt;code&gt;await&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://babeljs.io/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Babel&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;JavaScript +新機能をプレーンな古い&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://www.stevefenton.co.uk/2012/11/compiling-vs-transpiling/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;バージョンに変換&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;するツール）で&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;引き続き&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用できます。 JavaScript）、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://babeljs.io/docs/en/babel-plugin-transform-async-to-generator&quot;&gt; &lt;code&gt;transform-async-to-generator&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プラグイン。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7f1a9e8c81cc1c08f905fe5adbef82fe04d5f05a" translate="yes" xml:space="preserve">
          <source>If you want less clunky functions than &lt;code&gt;setTimeout&lt;/code&gt; and &lt;code&gt;setInterval&lt;/code&gt;, you can wrap them in functions that just reverse the order of the arguments and give them nice names:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;setTimeout&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;および&lt;/font&gt;&lt;/font&gt; &lt;code&gt;setInterval&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;よりも&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;扱い&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;にくい関数が必要な場合&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、引数の順序を逆にして&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;適切&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;な名前を付けるだけの関数でそれらをラップできます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="da602048781854e83e9662f408b420c84b0f626b" translate="yes" xml:space="preserve">
          <source>If you're on node.js, you can have a look at &lt;a href=&quot;https://www.npmjs.com/package/fibers&quot;&gt;fibers&lt;/a&gt; &amp;ndash; a native C extension to node, a kinda-multi-threading simulation.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;node.jsを使用している場合は、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://www.npmjs.com/package/fibers&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ファイバーを&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;見ることができます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ノードへのネイティブC拡張であり、一種のマルチスレッドシミュレーションです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d4e46f600acaca2a4b83a1850f0748d67f693b29" translate="yes" xml:space="preserve">
          <source>If you're using jQuery, someone actually created a &quot;delay&quot; plugin that's nothing more than a wrapper for setTimeout:</source>
          <target state="translated">jQueryを使っている場合、誰かが実際にsetTimeoutのラッパー以上のものではない「delay」プラグインを作っています。</target>
        </trans-unit>
        <trans-unit id="3d8867db255383103753e2daf16182ca1558f387" translate="yes" xml:space="preserve">
          <source>If you're using node.js and meteor, you may have run into the limitations of using setTimeout in a fiber. Here is the code for server-side sleep.</source>
          <target state="translated">node.jsとmeteorを使っている方は、ファイバーでsetTimeoutを使うと制限にぶつかったことがあるかもしれません。ここではサーバー側のスリープのコードを紹介します。</target>
        </trans-unit>
        <trans-unit id="4c04a5c45e89bf9986bea2ffc80dc17ad658f5e3" translate="yes" xml:space="preserve">
          <source>In JavaScript, I rewrite every function so that it can end as soon as possible. You want the browser back in control so it can make your DOM changes.</source>
          <target state="translated">JavaScriptでは、できるだけ早く終了できるように、すべての関数を書き換えています。あなたは、ブラウザがDOMの変更を行えるように、ブラウザを制御できるように戻したいと思っています。</target>
        </trans-unit>
        <trans-unit id="363014fc9ae5271356820b562e6b0d800b2b5e78" translate="yes" xml:space="preserve">
          <source>In newer runtimes supporting generators and yield, one could bring similar functionality to the sleep function in a single threaded environment:</source>
          <target state="translated">ジェネレータとイールドをサポートする新しいランタイムでは、シングルスレッド環境でスリープ関数に同様の機能を持たせることができます。</target>
        </trans-unit>
        <trans-unit id="f6c306f06e3f986a96abf05b5886207f8c4ecd91" translate="yes" xml:space="preserve">
          <source>Interesting stuff, in Firebug ( &amp;amp; probably other js consoles ), nothing happen after hitting enter, only after the sleep duration specified (...)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;興味深いもの、Firebug（およびおそらく他のjsコンソール）では、Enterキーを押した後は何も起こりません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bffb9a19c94543015e579e9573a74f691273a065" translate="yes" xml:space="preserve">
          <source>Is there a better way to engineer a &lt;code&gt;sleep&lt;/code&gt; in JavaScript than the following &lt;code&gt;pausecomp&lt;/code&gt; function (&lt;a href=&quot;http://www.sean.co.uk/a/webdesign/javascriptdelay.shtm&quot;&gt;taken from here&lt;/a&gt;)?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;JavaScriptで&lt;/font&gt;&lt;/font&gt; &lt;code&gt;sleep&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を設計するに&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、次の&lt;/font&gt;&lt;/font&gt; &lt;code&gt;pausecomp&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;関数（&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.sean.co.uk/a/webdesign/javascriptdelay.shtm&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここから取得&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;よりも&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;優れた方法があり&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ますか？&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ff9ae877d3ed0b7d0fde1fbd4cf68681d478372f" translate="yes" xml:space="preserve">
          <source>It allows you to do a real &lt;code&gt;sleep&lt;/code&gt; in a way which is blocking execution in a fiber, but it's non-blocking in the main thread and other fibers.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これにより&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、ファイバーでの実行をブロックする方法で&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;実際の&lt;/font&gt;&lt;/font&gt; &lt;code&gt;sleep&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を行うことができます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が、メインスレッドおよびその他のファイバーではブロックさ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;れません&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="54c8fa8534a8d88415296aac5f80fd9033d7c4e8" translate="yes" xml:space="preserve">
          <source>It can be done using Java's sleep method. I've tested it in FF and IE and it doesn't lock the computer, chew up resources, or cause endless server hits. Seems like a clean solution to me.</source>
          <target state="translated">これはJavaのスリープメソッドを使って行うことができます。私はそれをFFとIEでテストしましたが、コンピュータをロックしたり、リソースを消費したり、果てしないサーバーヒットを引き起こすことはありませんでした。私にとってはクリーンな解決策のように思えます。</target>
        </trans-unit>
        <trans-unit id="5fa7cd51de4ab9f14020a2339f6f9a18c7d20b52" translate="yes" xml:space="preserve">
          <source>It is easy to remember syntax if you used to use Promises.</source>
          <target state="translated">Promisesを使っていた方が構文を覚えやすいです。</target>
        </trans-unit>
        <trans-unit id="0150406d19d5021d34da8c499acc95b56afb4ad7" translate="yes" xml:space="preserve">
          <source>Make sure your function names still accurately describe what each piece is doing (I.E. GatherInputThenWait and CheckInput, rather than funcPart1 and funcPart2)</source>
          <target state="translated">関数名には、各ピースが何をしているかを正確に記述してください(例:funcPart1 と funcPart2 ではなく、GatherInputThenWait と CheckInput)。</target>
        </trans-unit>
        <trans-unit id="30f570b0b295d9a4b9ee3f60ebbb6dbae119af3f" translate="yes" xml:space="preserve">
          <source>Most of the answers here are misguided or at the very least outdated. There is no reason javascript has to be single threaded, and indeed it isnt't. Today all the mainstream browsers support workers, before this was the case other javascript runtimes like Rhino and Node.js supported multithreading.</source>
          <target state="translated">ここでの答えのほとんどは見当違いか、少なくとも時代遅れです。javascriptがシングルスレッドでなければならない理由はありませんし、実際にはありません。今日では主流のブラウザはすべてワーカーをサポートしていますが、それ以前はRhinoやNode.jsのような他のjavascriptランタイムがマルチスレッドをサポートしていました。</target>
        </trans-unit>
        <trans-unit id="22167c2855c48b9a9d67372385bbc12a7ce4f074" translate="yes" xml:space="preserve">
          <source>Note that,</source>
          <target state="translated">そのことに注意してください。</target>
        </trans-unit>
        <trans-unit id="f27fc794032f6a024cc25149494bb1dd3b3f5f1d" translate="yes" xml:space="preserve">
          <source>Note two things</source>
          <target state="translated">二つのことに注意してください。</target>
        </trans-unit>
        <trans-unit id="b11054d6723cc552b5c52d97639451aab9435928" translate="yes" xml:space="preserve">
          <source>Note, if you need multiple sleeps this can get ugly in a hurry and you might actually need to rethink your design.</source>
          <target state="translated">複数の睡眠が必要な場合は、これは急いで醜くなる可能性があり、実際にはあなたのデザインを再考する必要があるかもしれないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="2e134b4ec55e6e5445ce8f0be27b98fd12e45702" translate="yes" xml:space="preserve">
          <source>Now call it with:
sleep(5);</source>
          <target state="translated">これを sleep(5)で呼び出すようにしました。</target>
        </trans-unit>
        <trans-unit id="f7b199b14d50e6584d5b7447ae5a4690e6247cb0" translate="yes" xml:space="preserve">
          <source>Now it reads easily as &quot;after N milliseconds, ...&quot; (or &quot;every N milliseconds, ...&quot;)</source>
          <target state="translated">今では &quot;after N milliseconds,....&quot; と簡単に読めるようになりました。(または &quot;Nミリ秒ごとに、...&quot; と読みます)</target>
        </trans-unit>
        <trans-unit id="2a142fba7671be5d075cc4d1891fc3b3ae628a94" translate="yes" xml:space="preserve">
          <source>One scenario where you might want a sleep() function rather than using setTimeout() is if you have a function responding to a user click that will ultimately end up opening a new i.e. popup window and you have initiated some processing that requires a short period to complete before the popup is displayed. Moving the open window into a closure means that it typically gets blocked by the browser.</source>
          <target state="translated">setTimeout()を使用するよりも sleep()関数を使用した方が良い場合の一つのシナリオは、ユーザーのクリックに反応する関数があり、その関数が最終的に新しいポップアップウィンドウを開くことになり、ポップアップが表示されるまでの短い時間を必要とする処理を開始した場合です。開いているウィンドウを閉じた状態にすることは、通常ブラウザによってブロックされることを意味します。</target>
        </trans-unit>
        <trans-unit id="5f60f78ebabe5acd857f520a5c9b9030e9c16056" translate="yes" xml:space="preserve">
          <source>Or as a one-liner:</source>
          <target state="translated">ワンライナーとしても</target>
        </trans-unit>
        <trans-unit id="adcbfd8e666093f94b2541ef0419355bde4b9004" translate="yes" xml:space="preserve">
          <source>Ran a few 10 second timer benchmarks.</source>
          <target state="translated">10秒タイマーのベンチマークをいくつか実行しました。</target>
        </trans-unit>
        <trans-unit id="2e7073ab955872efe13a99629d7999239fa398ff" translate="yes" xml:space="preserve">
          <source>See: &lt;a href=&quot;https://github.com/laverdet/node-fibers#sleep&quot;&gt;https://github.com/laverdet/node-fibers#sleep&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;参照：&lt;/font&gt;&lt;a href=&quot;https://github.com/laverdet/node-fibers#sleep&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : &lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;//github.com/laverdet/node-fibers#sleep&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="043053e055d752aac5374641b9b2898a2c46fa78" translate="yes" xml:space="preserve">
          <source>Should work in Node 9.3 or higher.</source>
          <target state="translated">Node 9.3以上で動作する必要があります。</target>
        </trans-unit>
        <trans-unit id="eb22a9c23335f6d4d7534a37da73381126294653" translate="yes" xml:space="preserve">
          <source>Since 2009 when this question was asked, JavaScript has evolved significantly. All other answers are now obsolete or overly complicated. Here is the current best practice:</source>
          <target state="translated">この質問が出た2009年以降、JavaScriptは大きく進化しました。他のすべての回答は、現在では時代遅れになっているか、複雑になりすぎています。ここに現在のベストプラクティスがあります。</target>
        </trans-unit>
        <trans-unit id="43b1daa1d5a4f104c402f234bd53ad18d56d8238" translate="yes" xml:space="preserve">
          <source>So I ate some burgers and got thinking:::
here is a solution that works... but you have to chop up your running codes...:::
yes, I know, this is just an easier to read refactoring... still...</source>
          <target state="translated">それでハンバーガーを食べて考えてみました:::ここに解決策があります...しかし、実行中のコードを切り刻む必要があります...:::はい、わかっています、これはリファクタリングを読みやすくしただけです...それでも...</target>
        </trans-unit>
        <trans-unit id="c917bdc3c92e1ef6b56a69a5ab6df675724ff6b1" translate="yes" xml:space="preserve">
          <source>So the user pushes the button, the script loads the invoice page, then waits, checking every quarter second to see if the invoice page is finished loading, then pops up the print dialog for the user to send it to the printer.  QED.</source>
          <target state="translated">ユーザーがボタンを押すと、スクリプトは請求書のページをロードし、待機し、1/4秒ごとに請求書のページのロードが終了したかどうかを確認し、印刷ダイアログをポップアップして、ユーザーがプリンタに送信するようにしています。QEDです。</target>
        </trans-unit>
        <trans-unit id="f3eda502aa4bb64d4f45ae83be2b989c07a563fa" translate="yes" xml:space="preserve">
          <source>So you are pretty much stuck with what others have suggested -- you'll need to break your code up into multiple functions.</source>
          <target state="translated">そのため、他の人が提案したことにはかなり行き詰まっています-あなたのコードを複数の関数に分割する必要があります。</target>
        </trans-unit>
        <trans-unit id="80e53a119901ab9ffc8c6f30a88a8d49b358559c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://ponyfoo.com/articles/understanding-javascript-async-await&quot;&gt;&lt;code&gt;async/await&lt;/code&gt;&lt;/a&gt; feature lets the code explicitly wait for a promise to settle (resolve or reject).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;https://ponyfoo.com/articles/understanding-javascript-async-await&quot;&gt; &lt;code&gt;async/await&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;機能は、コードが明示的に解決するための約束を待つ（解決または拒否）することができます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="64e4b1c364695fafca7f7fea56048c757b8c24a3" translate="yes" xml:space="preserve">
          <source>The infamous sleep, or delay, function within any language is much debated.  Some will say that there should always be a signal or callback to fire a given functionality, others will argue that sometimes an arbitrary moment of delay is useful.  I say that to each their own and one rule can never dictate anything in this industry.</source>
          <target state="translated">どんな言語でも悪名高いスリープ(遅延)関数は、多くの議論を呼んでいます。ある人は、与えられた機能を起動するためのシグナルやコールバックが常にあるべきだと言うでしょうし、ある人は、時には任意の瞬間の遅延が有用であると主張するでしょう。私は、それは人それぞれであり、この業界では1つのルールで何かを決めることはできないと言います。</target>
        </trans-unit>
        <trans-unit id="4bbac4158f31881069ba6aa4a45e90e40e4b5a5b" translate="yes" xml:space="preserve">
          <source>The issue here is that JavaScript is a single-thread event-based model. While in a specific case, it might be nice to have the whole engine wait for a few seconds, in general it is bad practice. Suppose I wanted to make use of your functions while writing my own? When I called your method, my methods would all freeze up. If JavaScript could somehow preserve your function's execution context, store it somewhere, then bring it back and continue later, then sleep could happen, but that would basically be threading.</source>
          <target state="translated">ここでの問題は、JavaScript がシングルスレッドのイベントベースのモデルであるということです。特定のケースでは、エンジン全体が数秒待つのはいいかもしれませんが、一般的には悪い習慣です。自分の関数を書きながら、あなたの関数を利用したいとしましょう。あなたのメソッドを呼び出すと、私のメソッドはすべてフリーズしてしまいます。JavaScript が何らかの方法で関数の実行コンテキストを保存し、どこかに保存しておいて、それを戻して後で続行することができれば、スリープが起こるかもしれませんが、それは基本的にはスレッド化されてしまいます。</target>
        </trans-unit>
        <trans-unit id="5d69f448f7b241059244df04ea621abaf0720a5e" translate="yes" xml:space="preserve">
          <source>The shortest solution without any dependencies:</source>
          <target state="translated">依存関係のない最短のソリューションです。</target>
        </trans-unit>
        <trans-unit id="e88005d2ced26e10db713b29399d6853b0af93d9" translate="yes" xml:space="preserve">
          <source>The way to do it is to breakdown your function in to before and after parts.</source>
          <target state="translated">やり方としては、機能を前後のパーツに分解することです。</target>
        </trans-unit>
        <trans-unit id="b37ed72e2e9d47d39c9991b9cb391df6db030880" translate="yes" xml:space="preserve">
          <source>Then schedule its execution with the setTimeout method:</source>
          <target state="translated">その後、setTimeoutメソッドを使用して実行をスケジュールします。</target>
        </trans-unit>
        <trans-unit id="4db17d808338df4a951f50dad6aab9fd446e830d" translate="yes" xml:space="preserve">
          <source>Then, all you have to do when you want a painless pause in your JS is:</source>
          <target state="translated">ならば、JSで痛みのない一時停止が欲しい時にすればいいだけです。</target>
        </trans-unit>
        <trans-unit id="9615294c90eb69615abbf40d417c05ef74ac9e04" translate="yes" xml:space="preserve">
          <source>This imitation of sleep is different from a true sleep function as it does not block the thread. It is simply sugar on top of javascript's current setTimeout function. This functionality type has been implemented in &lt;a href=&quot;http://taskjs.org/&quot;&gt;Task.js&lt;/a&gt; and should work today in Firefox.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このスリープの模倣は、スレッドをブロックしないため、真のスリープ機能とは異なります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは、JavaScriptの現在のsetTimeout関数の上にある単なる砂糖です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この機能タイプは&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://taskjs.org/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Task.jsに&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;実装されており、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;現在Firefoxで機能するはずです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fd3ec0e7d3b9967c3a6029efd26533c141db4ff2" translate="yes" xml:space="preserve">
          <source>This is it. &lt;code&gt;await sleep(&amp;lt;duration&amp;gt;)&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これだよ。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;await sleep(&amp;lt;duration&amp;gt;)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b261a61a0063f0400318bf5314247207fdf2b998" translate="yes" xml:space="preserve">
          <source>This is not a duplicate of &lt;a href=&quot;https://stackoverflow.com/questions/758688/sleep-in-javascript-delay-between-actions&quot;&gt;Sleep in JavaScript - delay between actions&lt;/a&gt;; I want a &lt;em&gt;real sleep&lt;/em&gt; in the middle of a function, and not a delay before a piece of code executes.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/758688/sleep-in-javascript-delay-between-actions&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;JavaScript&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;スリープの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;複製ではありません&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;-アクション間の遅延&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コードの一部が実行される前の遅延ではなく、関数の真ん中で&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;実際のスリープ&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;必要です&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4bcefba4dfc3225fbbbfcbea3928479abfdfb68f" translate="yes" xml:space="preserve">
          <source>This is probably the closest you'll get to something that simply does what you want.</source>
          <target state="translated">これはおそらく、あなたが望むことを単純に行うものに最も近いものでしょう。</target>
        </trans-unit>
        <trans-unit id="b1da0f74b42887ece7aee11e85593721f18925bf" translate="yes" xml:space="preserve">
          <source>This method achieves the purpose of not executing the lines of code you decide until AFTER your timeout, while still returning control back to the client PC to execute whatever else it has queued up.</source>
          <target state="translated">このメソッドは、タイムアウトの後まであなたが決めたコードの行を実行しないという目的を達成する一方で、クライアントPCに制御を返してキューに入っている他の何かを実行するという目的を達成します。</target>
        </trans-unit>
        <trans-unit id="4773a6f61e6babbf3a8225d01421a57f43fde7f9" translate="yes" xml:space="preserve">
          <source>Two new JavaScript features helped write this &quot;sleep&quot; function:</source>
          <target state="translated">この &quot;sleep &quot;関数を書くのに役立ったのは、2つの新しいJavaScript機能です。</target>
        </trans-unit>
        <trans-unit id="8f0c5d9d2119ed6403fef0b878fe23389433b331" translate="yes" xml:space="preserve">
          <source>Use a timer, as specified in the link you referenced.</source>
          <target state="translated">参照したリンクで指定したタイマーを使用します。</target>
        </trans-unit>
        <trans-unit id="5a90f17f75c5f30a0d27e5e351fd17330adde5b4" translate="yes" xml:space="preserve">
          <source>Used like that :</source>
          <target state="translated">そのように使用されています。</target>
        </trans-unit>
        <trans-unit id="88659426ae418806f8f99c39cde8af2c04a8034f" translate="yes" xml:space="preserve">
          <source>What is the JavaScript version of sleep()</source>
          <target state="translated">sleep()の JavaScript 版とは?</target>
        </trans-unit>
        <trans-unit id="ad7cf15474dda28fc6941f8fcf1e2761c89b4904" translate="yes" xml:space="preserve">
          <source>Where xxx is time in milliseconds. In my case (by way of justification), this was part of back-end order fulfillment at a very small company and I needed to print an invoice that had to be loaded from the server. I did it by loading the invoice (as a webpage) into an iFrame and then printing the iFrame. Of course, I had to wait until the page was fully loaded before I could print, so the JS had to pause. I accomplished this by having the invoice page (in the iFrame) change a hidden form field on the parent page with the onLoad event.  And the code on the parent page to print the invoice looked like this (irrelevant parts cut for clarity):</source>
          <target state="translated">ここで、xxxはミリ秒単位の時間です。私の場合(正当化のために)、これは非常に小さな会社のバックエンドの注文処理の一部で、サーバーから読み込まなければならない請求書を印刷する必要がありました。私は、請求書を(ウェブページとして)iFrameに読み込み、iFrameを印刷することでそれを行いました。もちろん、ページが完全に読み込まれるまで待ってから印刷する必要があったので、JS は一時停止しなければなりませんでした。私は、請求書ページ(iFrame内)で、親ページの非表示のフォームフィールドをonLoadイベントで変更させることで、これを実現しました。そして、請求書を印刷するための親ページのコードは以下のようになりました (わかりやすくするために無関係な部分はカットしています)。</target>
        </trans-unit>
        <trans-unit id="27469fd06c25d5a9b1bbca93e521b7b806b686e3" translate="yes" xml:space="preserve">
          <source>With Atomics my error seems to stay under 600 microseconds. (0.6ms)</source>
          <target state="translated">Atomicsではエラーは600マイクロ秒以下に抑えられているようです。(0.6ms)</target>
        </trans-unit>
        <trans-unit id="d2cb3253ab0686adfde608cd1008567edc45b5ed" translate="yes" xml:space="preserve">
          <source>With setTimeout I get a error of up to 7000 microseconds. (7ms)</source>
          <target state="translated">setTimeoutでは最大7000マイクロ秒のエラーが出ます。(7ms)</target>
        </trans-unit>
        <trans-unit id="97d813a2848b6649cad312349ec1212e8f0331b9" translate="yes" xml:space="preserve">
          <source>Writing a sleep function is simple and made even more usable with JavaScript Promises:</source>
          <target state="translated">睡眠機能を書くことは簡単で、JavaScript Promisesを使うことでさらに使いやすくなります。</target>
        </trans-unit>
        <trans-unit id="cc5f21e90bd523a5aec38705c20e647b5e920269" translate="yes" xml:space="preserve">
          <source>You can then just use it in a row of function calls as expected:</source>
          <target state="translated">あとは予想通り関数呼び出しの列で使えばいいだけです。</target>
        </trans-unit>
        <trans-unit id="266188b4a73ab0cf221d22fbbd4b4c542f61ce2c" translate="yes" xml:space="preserve">
          <source>You can then use them nicely with anonymous functions:</source>
          <target state="translated">そうすれば、匿名関数を使ってきれいに使うことができます。</target>
        </trans-unit>
        <trans-unit id="c78dccbf8728682d3f479fe621c4768875a998fe" translate="yes" xml:space="preserve">
          <source>You can't do a sleep like that in JavaScript, or, rather, you shouldn't. Running a sleep or a while loop will cause the user's browser to hang until the loop is done.</source>
          <target state="translated">JavaScriptではそのようなスリープはできません、というかすべきではありません。スリープやwhileループを実行すると、ループが終了するまでユーザーのブラウザがハングアップしてしまいます。</target>
        </trans-unit>
        <trans-unit id="db93b4ca57679b2ac0b6a2cfd12b0b8828c5f20b" translate="yes" xml:space="preserve">
          <source>Your question is a bit of a false choice, then. There is no way to sleep in the way you want, nor should you pursue the solution you suggest.</source>
          <target state="translated">あなたの質問は、それならば少し間違った選択をしているのではないでしょうか。あなたが望む方法で眠る方法はありませんし、あなたが提案する解決策を追求すべきではありません。</target>
        </trans-unit>
        <trans-unit id="c0b9dc796583ee7ecb6a5a8434abeab65bb922c4" translate="yes" xml:space="preserve">
          <source>and also landed &lt;a href=&quot;https://blog.nightly.mozilla.org/2016/11/01/async-await-support-in-firefox/&quot;&gt;in Firefox Nightly in November 2016&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そして&lt;/font&gt;&lt;a href=&quot;https://blog.nightly.mozilla.org/2016/11/01/async-await-support-in-firefox/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2016年11月にFirefox Nightlyに&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;も上陸し&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ました&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="db76f2442e45fb5849007fe4ee4d8c73f8aec35e" translate="yes" xml:space="preserve">
          <source>as a first argument you have to pass just the name (reference) of the function, without the parenthesis</source>
          <target state="translated">を第一引数に指定する場合は、括弧を付けずに関数名(参照)だけを渡さなければなりません。</target>
        </trans-unit>
        <trans-unit id="d89a2a6e57657ec16f2c022086f3841b7255a820" translate="yes" xml:space="preserve">
          <source>contents of sleep.php:</source>
          <target state="translated">sleep.phpの内容を表示します。</target>
        </trans-unit>
        <trans-unit id="e924dc15d21c0531a13369a8806d141c8e8c9cc7" translate="yes" xml:space="preserve">
          <source>it landed &lt;a href=&quot;https://blog.risingstack.com/async-await-node-js-7-nightly/&quot;&gt;in Node 7 in October 2016&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;a href=&quot;https://blog.risingstack.com/async-await-node-js-7-nightly/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2016年10月にノード7に&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;着陸&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;した&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dc26cfaae3c682227c6fa2db5b7512399d733bed" translate="yes" xml:space="preserve">
          <source>make sure your calling function is async</source>
          <target state="translated">呼び出し関数が非同期であることを確認してください</target>
        </trans-unit>
        <trans-unit id="eac229878481a613da694a26816e8fa74de04089" translate="yes" xml:space="preserve">
          <source>promises are supported &lt;a href=&quot;http://node.green/#Promise&quot;&gt;in Node v0.12+&lt;/a&gt; and &lt;a href=&quot;http://caniuse.com/#feat=promises&quot;&gt;widely supported in browsers&lt;/a&gt;, except IE</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;約束はサポートされている&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://node.green/#Promise&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ノードv0.12 +に&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;し、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://caniuse.com/#feat=promises&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;広くブラウザでサポートされている&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; IEを除いて、&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2c37f9cd26e86a375ee1a9ac08e40437bba6adba" translate="yes" xml:space="preserve">
          <source>the second argument is time in miliseconds</source>
          <target state="translated">第二引数はミリ秒単位の時間です。</target>
        </trans-unit>
        <trans-unit id="fa2f80b190663512311c372a57b5e2ff61edf414" translate="yes" xml:space="preserve">
          <source>then:</source>
          <target state="translated">then:</target>
        </trans-unit>
        <trans-unit id="c0ea10fc386ce45f02f65a4d51de8c1c62c07494" translate="yes" xml:space="preserve">
          <source>verified and working fine</source>
          <target state="translated">検証済みで正常に動作しています</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
