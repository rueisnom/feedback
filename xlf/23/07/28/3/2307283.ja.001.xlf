<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/2307283">
    <body>
      <group id="2307283">
        <trans-unit id="62c23e7ef4be86040d6c792d74b8103bb503c43a" translate="yes" xml:space="preserve">
          <source>&quot;Tends towards&quot; has the usual mathematical meaning from 'analysis': for example, that &quot;if you pick &lt;em&gt;any&lt;/em&gt; arbitrarily small non-zero constant &lt;code&gt;k&lt;/code&gt;, then I can find a corresponding value &lt;code&gt;X&lt;/code&gt; such that &lt;code&gt;((time/(a*log(n))) - 1)&lt;/code&gt; is less than &lt;code&gt;k&lt;/code&gt; for all values of &lt;code&gt;n&lt;/code&gt; greater than &lt;code&gt;X&lt;/code&gt;.&quot;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あなたが選ぶ場合例えば、」あること：「分析」から通常の数学的意味を持っている「に向かう傾向」&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;いずれかの&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;任意の小さな非ゼロ定数の&lt;/font&gt;&lt;/font&gt; &lt;code&gt;k&lt;/code&gt; は&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、その後、私は、対応する値を見つけることができます&lt;/font&gt;&lt;/font&gt; &lt;code&gt;X&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ように&lt;/font&gt;&lt;/font&gt; &lt;code&gt;((time/(a*log(n))) - 1)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt; &lt;code&gt;X&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;より大きい&lt;/font&gt; &lt;code&gt;n&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;すべての値で&lt;/font&gt;&lt;/font&gt; &lt;code&gt;k&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;未満です&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="54e10c43522458d7384b566fb9db05322a518452" translate="yes" xml:space="preserve">
          <source>(you take the lg of each side, lg being the log base 2)</source>
          <target state="translated">(各辺の lg を取り、lg は対数ベース 2)</target>
        </trans-unit>
        <trans-unit id="44c99847d54ae4d00b74068530a05dd1fef0dc04" translate="yes" xml:space="preserve">
          <source>*Remember that big-O notation, &lt;a href=&quot;http://en.wikipedia.org/wiki/Big_O_notation#Formal_definition&quot;&gt;by definition&lt;/a&gt;, constants don't matter. Also by the &lt;a href=&quot;http://en.wikipedia.org/wiki/Change_of_base_formula_for_logs#Changing_the_base&quot;&gt;change of base rule&lt;/a&gt; for logarithms, the only difference between logarithms of different bases is a constant factor.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;* big-O表記は&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Big_O_notation#Formal_definition&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、定義により&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、定数は関係ないことに注意してください。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;また&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、対数&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Change_of_base_formula_for_logs#Changing_the_base&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の基本ルール&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;変更&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;により、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;異なる底の対数間の唯一の違いは定数因子です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="48e253e5ab06e6976e35c9bdcea7e10b034cc3d4" translate="yes" xml:space="preserve">
          <source>... then this would be O(n squared) because, no matter what the values of the constants a, b, c, and non-zero d, the &lt;code&gt;d*n*n&lt;/code&gt; term would always dominate over the others for any sufficiently large value of n.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;...そして、これはO（nの2乗）になります。これは、定数a、b、c、およびゼロ以外のdの値に関係なく、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;d*n*n&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;項が常に他の項よりも十分に優勢であるためです。 nの大きな値。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7a6b947aa846b5da9e63669d7e0ab43fa7149876" translate="yes" xml:space="preserve">
          <source>1. Physical System</source>
          <target state="translated">1.物理システム</target>
        </trans-unit>
        <trans-unit id="2da5718e4456d8946ed7cc039bbf65bc4baf31dc" translate="yes" xml:space="preserve">
          <source>2. Programming Language</source>
          <target state="translated">2.プログラミング言語</target>
        </trans-unit>
        <trans-unit id="c047d0c08b0f62ebc42d10b65de4db18f9b150e9" translate="yes" xml:space="preserve">
          <source>3 is the logarithm of 1,000, and 6 is the logarithm of 1,000,000 (base 10).</source>
          <target state="translated">3は1,000の対数、6は1,000,000の対数(基数10)です。</target>
        </trans-unit>
        <trans-unit id="864313c2df45c8ba64dccb8ec4055125eac5d1f5" translate="yes" xml:space="preserve">
          <source>3. coding Style</source>
          <target state="translated">3.コーディングスタイル</target>
        </trans-unit>
        <trans-unit id="f2e04afdb09df34f9f44473a7a1ccb50a406dc78" translate="yes" xml:space="preserve">
          <source>4. And much more ......</source>
          <target state="translated">4.その他にもたくさんのことが......。</target>
        </trans-unit>
        <trans-unit id="d563ed5a666051353255960e6c2817c3c0755862" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Linear Search&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;線形検索&lt;/font&gt;&lt;/font&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="b5fe40e00cd38153f7725ae75b9e9b6d20e78737" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;The actual execution time is not a good measure for analysis.
&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;実際の実行時間は、分析には適していません。 &lt;/font&gt;&lt;/font&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="7302ce438edbf9d107087c0d00e63e527a7611c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;O(log N)&lt;/code&gt; basically means time goes up linearly while the &lt;code&gt;n&lt;/code&gt; goes up exponentially. So if it takes &lt;code&gt;1&lt;/code&gt; second to compute &lt;code&gt;10&lt;/code&gt; elements, it will take &lt;code&gt;2&lt;/code&gt; seconds to compute &lt;code&gt;100&lt;/code&gt; elements, &lt;code&gt;3&lt;/code&gt; seconds to compute &lt;code&gt;1000&lt;/code&gt; elements, and so on.</source>
          <target state="translated">&lt;code&gt;O(log N)&lt;/code&gt; は&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;基本的に、時間は直線的に増加するのに対し、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;n&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は指数関数的に増加&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;することを意味し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、&lt;/font&gt; &lt;code&gt;10&lt;/code&gt; 個の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;要素の&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;計算に&lt;/font&gt;&lt;/font&gt; &lt;code&gt;1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;秒&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;かかる場合&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt; &lt;code&gt;100&lt;/code&gt; 個の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;要素の&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;計算に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt; &lt;code&gt;2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;秒&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt; &lt;code&gt;1000&lt;/code&gt; 個の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;要素の&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;計算に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt; &lt;code&gt;3&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;秒という&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ようになります。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="29521e79b284726f262e57f3d5e15142bdd210f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;O(log n)&lt;/code&gt; refers to a function (or algorithm, or step in an algorithm) working in an amount of time proportional to the logarithm (usually base 2 in most cases, but not always, and in any event this is insignificant by big-O notation*) of the size of the input.</source>
          <target state="translated">&lt;code&gt;O(log n)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、対数に比例した時間で機能する関数（またはアルゴリズム、またはアルゴリズムのステップ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;指し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（通常、ほとんどの場合2を底としますが、常にそうとは限りません。 -O表記*）入力のサイズ。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a33e6cf6849c1bfd0bc219a80b69e82c56092cd8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;O(log n)&lt;/code&gt; running times are very common in any sort of divide-and-conquer application, because you are (ideally) cutting the work in half every time. If in each of the division or conquer steps, you are doing constant time work (or work that is not constant-time, but with time growing more slowly than &lt;code&gt;O(log n)&lt;/code&gt;), then your entire function is &lt;code&gt;O(log n)&lt;/code&gt;. It's fairly common to have each step require linear time on the input instead; this will amount to a total time complexity of &lt;code&gt;O(n log n)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;O(log n)&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;実行時間は、あらゆる種類の分割統治アプリケーションで非常に一般的です。これは、（理想的には）作業を毎回半分にするためです。分割または征服の各ステップで、一定時間の作業（または一定時間ではないが、時間の増加が&lt;/font&gt;&lt;/font&gt; &lt;code&gt;O(log n)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;よりも遅い作業&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）を行っている場合、関数全体は&lt;/font&gt;&lt;/font&gt; &lt;code&gt;O(log n)&lt;/code&gt; になります。&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。代わりに、各ステップで入力に線形時間を必要とすることはよくあることです。これは&lt;/font&gt;&lt;/font&gt; &lt;code&gt;O(n log n)&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;合計時間の複雑さに相当し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="abb48e63c4d7db950366fd3b0dfe2e096b2f2c6c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;O(n^2)&lt;/code&gt; is obtained easily by nesting standard for loops.</source>
          <target state="translated">&lt;code&gt;O(n^2)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、標準forループをネストすることで簡単に取得できます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="664fced4730451fe1325328dbba584863529c241" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;log x to base b = y&lt;/code&gt; is the inverse of &lt;code&gt;b^y = x&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;log x to base b = y&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt; &lt;code&gt;b^y = x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;逆です&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f8966595017a7ad226eea24cdb7b873f35223518" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Disclaimer: The rope-logarithm example was grabbed from the excellent &lt;a href=&quot;https://www.amazon.co.uk/Mathematicians-Delight-Dover-Books-Mathematics/dp/0486462404&quot;&gt;Mathematician's Delight book by W.Sawyer&lt;/a&gt;.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;免責事項：ロープ対数の例は&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://www.amazon.co.uk/Mathematicians-Delight-Dover-Books-Mathematics/dp/0486462404&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、W.Sawyerによる&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;優れた&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;数学者の喜びの本から取得されました&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="93b23fdcd6527df1dfdb4c0912b0fc04e2169d8a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;n/(2^steps)=1 &amp;lt;=&amp;gt; n=2^steps &amp;lt;=&amp;gt; lg(n)=steps&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;n/(2^steps)=1 &amp;lt;=&amp;gt; n=2^steps &amp;lt;=&amp;gt; lg(n)=steps&lt;/code&gt; &lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cecb08b9e2796a2712fcae78ab1e27ab18af4c8e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Algorithm 10&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アルゴリズム10&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="99059f5bd83e63ed1fa04489413c400ab49828dc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Algorithm 11&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アルゴリズム11&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2c484f87bf2e7520bc9c13f2425548040f8ca656" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Algorithm 12&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アルゴリズム12&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f792b9e20e7bd31191ec1ce96f2411274a40a430" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Algorithm 13&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アルゴリズム13&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="87a6cf7b68bf7e84ece7cceaa6050ec935e54006" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Algorithm 1:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アルゴリズム1：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fc4f1ab0bbde20810982288d34df68bf23df808c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Algorithm 2:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アルゴリズム2：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3580ba8f5fa81d2b6842006c382e678600fdf0eb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Algorithm 3 - This acts like &quot;log_2&quot;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アルゴリズム3-これは「log_2」のように機能します&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="50c2f6a991daf9f2251bac09adf66a8ed3c4e3c2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Algorithm 4 - This acts like &quot;log_3&quot;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アルゴリズム4-これは「log_3」のように機能します&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ade3ccd18a1516ffea265742c9c4262ac85f74a8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Algorithm 5 - This acts like &quot;log_1.02&quot;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アルゴリズム5-これは「log_1.02」のように機能します&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7c2e9bc08ef7fff3d18351a20b3844a561de3e6f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Algorithm 6&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アルゴリズム6&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6042164656649616c8bd314b7001a62996f8c3e0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Algorithm 7&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アルゴリズム7&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3813a73f44ab79ffff5fc062e96df9c77be57f07" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Algorithm 8&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アルゴリズム8&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8a43edf9ec98a0da521d4159e35c1204784fc256" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Algorithm 9&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アルゴリズム9&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dc851456bbf3606cfd07da8d669ac31d4a0e4865" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;O(1) (in the average case):&lt;/strong&gt; Given the page that a person's name is on and their name, find the phone number.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;O（1）（平均的なケース）：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;人の名前が表示されているページとその名前を考慮して、電話番号を見つけます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="382f5486747667379a673e16fda00accedb3c67b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;O(1) (in the worst case):&lt;/strong&gt; Given the page that a business's name is on and the business name, find the phone number.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;O（1）（最悪の場合）：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;お店の名前が表示されているページとお店の名前を指定して、電話番号を見つけます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="db128fc404aa0da1b743b40724a8e30d03d62726" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;O(1) - Constant Time Examples:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;O（1）-一定時間の例：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dda1fa945adc6eb16b365bc6c67afd8d2bd88f75" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;O(log n):&lt;/strong&gt; Given a person's name, find the phone number by picking a random point about halfway through the part of the book you haven't searched yet, then checking to see whether the person's name is at that point. Then repeat the process about halfway through the part of the book where the person's name lies. (This is a binary search for a person's name.)</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;O（log n）：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;人の名前を指定して、まだ検索していない本の部分の半分くらいのところからランダムなポイントを選び、その人の名前がそのポイントにあるかどうかを確認して、電話番号を見つけます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;次に、本の人の名前のある部分のほぼ半分までプロセスを繰り返します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（これは人の名前のバイナリ検索です。）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="367cb7ed6ccc0a378006813f8be3af12e274a6c8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;O(log(n)) - Logarithmic Examples:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;O（log（n））-対数の例​​：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="543a66101c585e2dc5a2e8d042e2d985b1274be7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;O(n &amp;middot; n!):&lt;/strong&gt; We're ready to load the phonebooks onto the shipping dock. Unfortunately, the robot that was supposed to load the books has gone haywire: it's putting the books onto the truck in a random order! Even worse, it loads all the books onto the truck, then checks to see if they're in the right order, and if not, it unloads them and starts over. (This is the dreaded &lt;strong&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Bogosort&quot;&gt;bogo sort&lt;/a&gt;&lt;/strong&gt;.)</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;O（n・n！）：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;電話帳を出荷ドックにロードする準備ができました。残念ながら、本をロードすることになっていたロボットが問題を抱えています。本をランダムな順序でトラックに載せています！さらに悪いことに、すべての本をトラックに積み込んでから、それらが正しい順序になっているかどうかを確認し、そうでない場合は、積み下ろして最初からやり直します。 （これは恐ろしい&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Bogosort&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;bogoソート&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1de65cc18d4f21d8e3a64ac738eb16027fb3867b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;O(n log n):&lt;/strong&gt; There was a mix-up at the printer's office, and our phone book had all its pages inserted in a random order. Fix the ordering so that it's correct by looking at the first name on each page and then putting that page in the appropriate spot in a new, empty phone book.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;O（n log n）：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プリンターのオフィスで取り違えがあり、電話帳にはすべてのページがランダムな順序で挿入されていました。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;各ページの名を確認し、そのページを新しい空の電話帳の適切な場所に配置して、正しいように順序を修正します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="70127c240aa95e8b0ec96b3395f313034e9030aa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;O(n log n):&lt;/strong&gt; We want to personalize the phone book, so we're going to find each person or business's name in their designated copy, then circle their name in the book and write a short thank-you note for their patronage.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;O（n log n）：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;電話帳をパーソナライズしたいので、指定されたコピーで各人または企業の名前を検索し、次に本の中で名前を丸で囲み、後援者に短いお礼状を書きます。 。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6b5606b21c0f2c96153c29e77b41f7fd85f0a0d1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;O(n) - Linear Time Examples:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;O（n）-線形時間の例：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8f43ccb38b5bf2cd670379ba3a1965f42b4771fe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;O(n):&lt;/strong&gt; Find all people whose phone numbers contain the digit &quot;5&quot;.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;O（n）：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;電話番号に数字「5」が含まれるすべての人を検索します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="75709c253759b933376bae3df6fbc5aea1471527" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;O(n):&lt;/strong&gt; Given a phone number, find the person or business with that number.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;O（n）：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;電話番号を指定して、その番号の人または企業を検索します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="db4237adb37b8829a7cc9004385308260a533b0f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;O(n*log(n)) - nlog(n) Examples:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;O（n * log（n））-nlog（n）の例：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ee37803266e306f1154c335eaba407e63fb9c491" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;O(n&lt;sup&gt;2&lt;/sup&gt;):&lt;/strong&gt; A mistake occurred at the office, and every entry in each of the phone books has an extra &quot;0&quot; at the end of the phone number. Take some white-out and remove each zero.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;O（n &lt;/font&gt;&lt;/font&gt;&lt;sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2&lt;/font&gt;&lt;/font&gt;&lt;/sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;オフィスでミスが発生し、各電話帳のすべてのエントリに電話番号の末尾に「0」が追加されています。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ホワイトアウトをいくつか取り、各ゼロを削除します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3a7fa1df845249458feef5121758e550acff4f5d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;O(n&lt;sup&gt;n&lt;/sup&gt;):&lt;/strong&gt; You fix the robot so that it's loading things correctly. The next day, one of your co-workers plays a prank on you and wires the loading dock robot to the automated printing systems. Every time the robot goes to load an original book, the factory printer makes a duplicate run of all the phonebooks! Fortunately, the robot's bug-detection systems are sophisticated enough that the robot doesn't try printing even more copies when it encounters a duplicate book for loading, but it still has to load every original and duplicate book that's been printed.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;O（n &lt;/font&gt;&lt;/font&gt;&lt;sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;n&lt;/font&gt;&lt;/font&gt;&lt;/sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ロボットが物を正しくロードするように修正します。翌日、同僚の1人がいたずらをして、荷受ロボットを自動印刷システムに接続します。ロボットが元の本を読み込もうとするたびに、ファクトリープリンターはすべての電話帳の複製を実行します。幸いなことに、ロボットのバグ検出システムは非常に高度で、ロボットがロードする複製本に遭遇したとき、それ以上のコピーを印刷しようとはしませんが、印刷されたすべてのオリジナルおよび複製本をロードする必要があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="baa3dcc6c7cb9768bae9c8737d449d37e482c784" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;O(n^2) - n squared Examples:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;O（n ^ 2）-nの2乗の例：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c389c0632dce3cd1c5d250cbf01ee7bfb589c105" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;O(n^3) - n cubed Examples:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;O（n ^ 3）-nの3乗の例：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1d7ddb9ca9305db3b69febe087986d85bdca4704" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Overview&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Overview&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ec82ec2afdaeef73e3e33a4ff9e63ef02488d0d8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Simple Code Examples Of Various Big O Categories:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;さまざまなビッグOカテゴリの簡単なコード例：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="234aa035660484f0b043ef167e4eb0c4a6aff304" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;So what does O(log n) actually mean?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;では、O（log n）は実際にはどういう意味ですか？&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2dcd8fc71e05cf69f2f4aedf034ba98a76d6ae8c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Summary&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Summary&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9e3286c2a6df794ce774454437c04c62779b831f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The logarithm&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;対数&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="72ef5689874ae61836de6559d76a3348730b20ce" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;What about O(n log n)?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;O（n log n）はどうですか？&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8505b2060537b9b8a16641d236c3c9169433e63f" translate="yes" xml:space="preserve">
          <source>A common algorithm with O(log n) time complexity is Binary Search whose recursive relation is T(n/2) + O(1) i.e. at every subsequent level of the tree you divide problem into half and do constant amount of additional work.</source>
          <target state="translated">O(log n)の時間的複雑さを持つ一般的なアルゴリズムは、再帰的関係がT(n2)+O(1)であるバイナリ探索です。</target>
        </trans-unit>
        <trans-unit id="e64150835103105f0ea6e31dc144d0c9f306ad8a" translate="yes" xml:space="preserve">
          <source>Actually, if you have a list of n elements, and create a binary tree from that list (like in the divide and conquer algorithm), you will keep dividing by 2 until you reach lists of size 1 (the leaves).</source>
          <target state="translated">実際には、n個の要素のリストを持ち、そのリストからバイナリツリーを作成した場合(分割統治アルゴリズムのように)、サイズ1(葉)のリストに到達するまで2で分割し続けることになります。</target>
        </trans-unit>
        <trans-unit id="885a56ea0ae08ca84fb35233e67f695552695f1e" translate="yes" xml:space="preserve">
          <source>Algorithm 1 prints hello once and it doesn't depend on n, so it will always run in constant time, so it is &lt;code&gt;O(1)&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アルゴリズム1はhelloを1回出力し、nに依存しないため、常に一定の時間で実行されるため、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;O(1)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="35be35b175c76af65d2827d2cf3dee1ef34934f1" translate="yes" xml:space="preserve">
          <source>Algorithm 2 prints hello 3 times, however it does not depend on an input size. Even as n grows, this algorithm will always only print hello 3 times. That being said 3, is a constant, so this algorithm is also &lt;code&gt;O(1)&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アルゴリズム2はhelloを3回出力しますが、入力サイズには依存しません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;nが大きくなっても、このアルゴリズムは常にhelloを3回だけ出力します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;言われている3は定数なので、このアルゴリズムも&lt;/font&gt;&lt;/font&gt; &lt;code&gt;O(1)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="566ae46ca13a24c5b54b75fd8f752947062eed04" translate="yes" xml:space="preserve">
          <source>Algorithm 3 demonstrates an algorithm that runs in log_2(n). Notice the post operation of the for loop multiples the current value of i by 2, so &lt;code&gt;i&lt;/code&gt; goes from 1 to 2 to 4 to 8 to 16 to 32 ...</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アルゴリズム3は、log_2（n）で実行されるアルゴリズムを示しています。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;forループのポスト操作は、iの現在の値を2倍するので、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;i&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は1から&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2、4、8、16、32に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;進みます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="219cad7306c85bd667c5cb1b64143ac505019683" translate="yes" xml:space="preserve">
          <source>Algorithm 4 demonstrates log_3. Notice &lt;code&gt;i&lt;/code&gt; goes from 1 to 3 to 9 to 27...</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アルゴリズム4はlog_3を示しています。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;注意してください&lt;/font&gt;&lt;/font&gt; &lt;code&gt;i&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 27に1 3から9に行きます...&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7a8454e3e9eaed77a0c84e7bcde53bb78684adbf" translate="yes" xml:space="preserve">
          <source>Algorithm 5 is important, as it helps show that as long as the number is greater than 1 and the result is repeatedly multiplied against itself, that you are looking at a logarithmic algorithm.</source>
          <target state="translated">アルゴリズム 5 は重要です。数が 1 よりも大きく、結果がそれ自身に対して繰り返し乗算される限り、対数アルゴリズムを見ていることを示すのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="51aabda71f87b90773768c7a9973d25539b2adfd" translate="yes" xml:space="preserve">
          <source>Algorithm 9 is like algorithm 8, but each of the loops has allowed variations, which still result in the final result being &lt;code&gt;O(n*log(n))&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アルゴリズム9はアルゴリズム8に似ていますが、各ループでバリエーションが許可されているため、最終結果は&lt;/font&gt;&lt;/font&gt; &lt;code&gt;O(n*log(n))&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="17d79de1210f6f15a000af0169a5ef68b6ed4866" translate="yes" xml:space="preserve">
          <source>Algorithms (4th Edition)</source>
          <target state="translated">アルゴリズム(第4版</target>
        </trans-unit>
        <trans-unit id="546877fd41740873d1cfa8e4f36cf9b0df017323" translate="yes" xml:space="preserve">
          <source>Algorithms in the Divide and Conquer paradigm are of complexity O(logn). One example here, calculate your own power function,</source>
          <target state="translated">Divide and Conquer パラダイムのアルゴリズムは、O(logn)の複雑さを持っています。ここで一つの例として、あなた自身の力関数を計算してみましょう。</target>
        </trans-unit>
        <trans-unit id="bc69b8d895811f71046889c39e0d995b5f6f8de0" translate="yes" xml:space="preserve">
          <source>Although n is somewhere between 512 and 1023, only 10 iterations take place. This is because the step in the loop grows exponentially and thus takes only 10 iterations to reach the termination.</source>
          <target state="translated">n は 512 と 1023 の間のどこかにありますが、10 回しか繰り返しません。これは、ループのステップが指数関数的に成長するため、わずか10回の繰り返しで終了に到達するからです。</target>
        </trans-unit>
        <trans-unit id="13fda95a4e29f31623e6b27919c9c2654912cdb6" translate="yes" xml:space="preserve">
          <source>Analyzing the running time of a program (example).</source>
          <target state="translated">プログラムの実行時間を分析する(例)。</target>
        </trans-unit>
        <trans-unit id="b430315d40268f6d421e3d42d2f41d05716445c7" translate="yes" xml:space="preserve">
          <source>Anatomy of a program&amp;rsquo;s statement execution frequencies.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プログラムのステートメント実行頻度の分析。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f024ce63ef78ef7b64b38e26fabafc1f314daaa6" translate="yes" xml:space="preserve">
          <source>And its not just search, whatever may be the work (increment, compare or any operation) its a function of input size.</source>
          <target state="translated">そして、それは単なる検索ではなく、作業(インクリメント、比較、または任意の操作)が何であれ、入力サイズの関数です。</target>
        </trans-unit>
        <trans-unit id="3e0adb51e88db164baaa3fd268ad64b534eb5476" translate="yes" xml:space="preserve">
          <source>And so on.</source>
          <target state="translated">といった感じで。</target>
        </trans-unit>
        <trans-unit id="7a8d4b0af6eedcdbdf7182951523d1cc82a773a9" translate="yes" xml:space="preserve">
          <source>And that's how you get O(log n) which is the amount of work that needs to be done on the above tree to reach a solution.</source>
          <target state="translated">そして、それは、解決策に到達するために上記のツリーに必要な作業量であるO(log n)を取得する方法です。</target>
        </trans-unit>
        <trans-unit id="430078eae25aa1035e9c5dded6c9d2dbbd85adf7" translate="yes" xml:space="preserve">
          <source>Another example is binary search, which has a running time of O(log&lt;sub&gt;2&lt;/sub&gt; n) because at every step you divide the search space by 2.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;別の例は、バイナリ検索で、実行時間はO（log &lt;/font&gt;&lt;/font&gt;&lt;sub&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2&lt;/font&gt;&lt;/font&gt;&lt;/sub&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; n）です。これは、各ステップで検索スペースを2で除算するためです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8ea8b371babfbf6cdabc48efdcabde7886a45b20" translate="yes" xml:space="preserve">
          <source>Ant it seems that this notation was mostly have taken from mathematics.</source>
          <target state="translated">この表記法は、ほとんどが数学から取られたようです。</target>
        </trans-unit>
        <trans-unit id="db52f24fa20a9333b6b58676f942da718a9e8a80" translate="yes" xml:space="preserve">
          <source>Applying this to your binary tree question so you have a good application: if you double the number of nodes in a binary tree, the height only increases by 1 (an additive amount).  If you double it again, it still only increased by 1.  (Obviously I'm assuming it stays balanced and such).  That way, instead of doubling your work when the problem size is multiplied, you're only doing very slightly more work. That's why O(log n) algorithms are awesome.</source>
          <target state="translated">あなたは良いアプリケーションを持っているので、バイナリツリーの質問にこれを適用する:あなたはバイナリツリー内のノードの数を2倍にすると、高さは1(加算量)だけ増加します。あなたが再びそれを倍にする場合、それはまだ1だけ増加しました(明らかに私はそれがバランスとそのような滞在を想定しています)。このようにして、問題の大きさが倍になったときに作業が倍になるのではなく、ほんの少しだけ作業が増えるだけなのです。これがO(log n)アルゴリズムが素晴らしい理由です。</target>
        </trans-unit>
        <trans-unit id="32764ca168816d370c0095d83bb00526d97bc511" translate="yes" xml:space="preserve">
          <source>As I know from university the symbol was intoduced by German mathematician Landau (1877-1938)</source>
          <target state="translated">私が大学で知っているように、記号はドイツの数学者ランダウ(1877-1938)によって教えられました。</target>
        </trans-unit>
        <trans-unit id="0c50b5084a8768bf3848fba400f3d6b5a12bde9e" translate="yes" xml:space="preserve">
          <source>As the input size increases the work done(here the execution time) increases.(Hence proportionality)</source>
          <target state="translated">入力サイズが大きくなると、行われる作業(ここでは実行時間)が増えます。</target>
        </trans-unit>
        <trans-unit id="965b30064e173b5100a19b6d6ea70cf86fc6ba94" translate="yes" xml:space="preserve">
          <source>Assume we had instead a dataset with 32 elements. Continue the drawing above to find that we will now need 5 comparisons to find what we are searching for, as the tree has only grown one level deeper when we multiplied the amount of data. As a result, the complexity of the algorithm can be described as a logarithmic order.</source>
          <target state="translated">代わりに32個の要素を持つデータセットがあったとしましょう。上の図を続けてみると、検索したいものを見つけるためには5回の比較が必要になることがわかります。その結果、アルゴリズムの複雑さは対数的な順序で記述できます。</target>
        </trans-unit>
        <trans-unit id="1500b9ad9d3e53ed6762cb42f394ab0fc94c747c" translate="yes" xml:space="preserve">
          <source>Asymptotic complexity is the behavior of execution time of an algorithm while the time complexity is the actual execution time. But some people use these terms interchangeably.</source>
          <target state="translated">時間的複雑さが実際の実行時間であるのに対し、漸近的複雑さはアルゴリズムの実行時間の振る舞いです。しかし、一部の人はこれらの用語を互換的に使用しています。</target>
        </trans-unit>
        <trans-unit id="b7364a52ea4e1ac22d7414be72af2283970927a4" translate="yes" xml:space="preserve">
          <source>At the first step, you divide by 2. You then have 2 lists (2^1), you divide each by 2, so you have 4 lists (2^2), you divide again, you have 8 lists (2^3)and so on until your list size is 1</source>
          <target state="translated">最初のステップでは、2 で割って、2 つのリスト (2^1)を持ち、それぞれを 2 で割って、4 つのリスト (2^2)を持ち、再び割って、8 つのリスト (2^3)を持ち、リストのサイズが 1 になるまで繰り返します。</target>
        </trans-unit>
        <trans-unit id="c089231c2cd527f03ef02173a14ef58e49378bb4" translate="yes" xml:space="preserve">
          <source>Because time complexity depends on various parameters viz.</source>
          <target state="translated">なぜなら、時間の複雑さは様々なパラメータに依存するからです。</target>
        </trans-unit>
        <trans-unit id="79385006bae7e35860b6fe3468ec15323eadbe8e" translate="yes" xml:space="preserve">
          <source>Binary search is an example with complexity &lt;code&gt;O(log n)&lt;/code&gt;. Let's say that the nodes in the bottom level of the tree in figure 1 represents items in some sorted collection. Binary search is a divide-and-conquer algorithm, and the drawing shows how we will need (at most) 4 comparisons to find the record we are searching for in this 16 item dataset.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;二分探索は、複雑さ&lt;/font&gt;&lt;/font&gt; &lt;code&gt;O(log n)&lt;/code&gt; の例&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;図1のツリーの最下位レベルのノードが、ソートされたコレクションのアイテムを表すとしましょう。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;バイナリ検索は分割統治アルゴリズムであり、この図は、この16項目のデータセットで検索しているレコードを見つけるために（最大で）4つの比較が必要になる方法を示しています。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="be848c0e0760b865d37c7f1e1021bb006ee2006e" translate="yes" xml:space="preserve">
          <source>Binary tree is a case where a problem of size n is divided into sub-problem of size n/2 until we reach a problem of size 1:</source>
          <target state="translated">二進木は、サイズnの問題を、サイズ1の問題にたどり着くまで、サイズn2のサブ問題に分割する場合です。</target>
        </trans-unit>
        <trans-unit id="3224959bcf8bf1a4e97341e888dd1713f7031354" translate="yes" xml:space="preserve">
          <source>But even in mathematical analysis sometimes this symbol was used in meaning &quot;C*g(n) &amp;gt; f(n) &amp;gt; 0&quot;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;しかし、数学的分析でさえ、この記号は「C * g（n）&amp;gt; f（n）&amp;gt; 0」の意味で使用されることがありました。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="028ac440b61f595ee3489b7aaf85ae807e104671" translate="yes" xml:space="preserve">
          <source>But what exactly is &lt;em&gt;O(log n)&lt;/em&gt;?  For example, what does it mean to say that the height of a complete binary tree is &lt;em&gt;O(log n)&lt;/em&gt;?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;しかし、正確には&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;O（log n）とは&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;何ですか？&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;たとえば、完全な二分木の高さが&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;O（log n）&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;であるとはどういう意味&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ですか？&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8956095c5174d4083eb653119d3665061530f125" translate="yes" xml:space="preserve">
          <source>But what exactly is O(log n)</source>
          <target state="translated">しかし、O(log n)とは何か?</target>
        </trans-unit>
        <trans-unit id="0f241aead868e87d092bade7cdb4f3dc39360f7f" translate="yes" xml:space="preserve">
          <source>But what exactly is O(log n)? For example, what does it mean to say that the height of a &amp;gt;complete binary tree is O(log n)?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;しかし、正確にはO（log n）とは何ですか？&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;たとえば、完全な二分木の高さがO（log n）であるとはどういう意味ですか？&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="edc1bfb371b8739da6f6a8bfe6b528f1e14b4316" translate="yes" xml:space="preserve">
          <source>Divide and conquer algorithms usually have a &lt;code&gt;logn&lt;/code&gt; component to the running time. This comes from the repeated halving of the input.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;分割統治アルゴリズムには通常&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、実行時間に対する&lt;/font&gt;&lt;/font&gt; &lt;code&gt;logn&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コンポーネントがあります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは、入力が半分になることを繰り返すことから生じます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="042a172d4487ee962ac155493b6704fe324ce14f" translate="yes" xml:space="preserve">
          <source>Edit: As noted, the log base doesn't matter, but when deriving the Big-O performance of an algorithm, the log factor will come from halving, hence why I think of it as base 2.</source>
          <target state="translated">編集:前述のように、対数ベースは重要ではありませんが、アルゴリズムの大規模な性能を導出するとき、対数係数は半分になるので、私はそれをベース2と考えています。</target>
        </trans-unit>
        <trans-unit id="6b51ffb5caa85a59fa5b79d9a86cc93f753c1d72" translate="yes" xml:space="preserve">
          <source>Every time we write an algorithm or code we try to analyze its asymptotic complexity.
It is different from its &lt;b&gt;time complexity&lt;/b&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アルゴリズムやコードを書くたびに、その漸近的な複雑さを分析しようとします。&lt;/font&gt;&lt;/font&gt;&lt;b&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;時間の複雑さ&lt;/font&gt;&lt;/font&gt;&lt;/b&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;とは異なり&lt;/font&gt;&lt;b&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;/b&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7a32654a9db30d8a5838e3722ec97067271f1ac0" translate="yes" xml:space="preserve">
          <source>First I recommend you to read following book;</source>
          <target state="translated">まずは以下の本を読むことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="4389c042e3105fc444c640d496eb44c0535e3593" translate="yes" xml:space="preserve">
          <source>First, you'll want to have a general idea of Logarithm, which you can get from &lt;a href=&quot;https://en.wikipedia.org/wiki/Logarithm&quot;&gt;https://en.wikipedia.org/wiki/Logarithm&lt;/a&gt; . Natural science use &lt;code&gt;e&lt;/code&gt; and the natural log. Engineering disciples will use log_10 (log base 10) and computer scientists will use log_2 (log base 2) a lot, since computers are binary based. Sometimes you'll see abbreviations of natural log as &lt;code&gt;ln()&lt;/code&gt;, engineers normally leave the _10 off and just use &lt;code&gt;log()&lt;/code&gt; and log_2 is abbreviated as &lt;code&gt;lg()&lt;/code&gt;. All of the types of logarithms grow in a similar fashion, that is why they share the same category of &lt;code&gt;log(n)&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最初に、Logarithmの一般的な概念が必要になり&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Logarithm&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https：//en.wikipedia.org/wiki/Logarithm&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;から取得でき&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;自然科学は&lt;/font&gt;&lt;/font&gt; &lt;code&gt;e&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と自然対数を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コンピューターはバイナリベースであるため、工学の弟子はlog_10（ログベース10）を使用し、コンピューターの科学者はlog_2（ログベース2）を頻繁に使用します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;自然対数の省略形が&lt;/font&gt;&lt;/font&gt; &lt;code&gt;ln()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;として表示されることがありますが&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、エンジニアは通常&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;_10を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;オフにして&lt;/font&gt;&lt;/font&gt; &lt;code&gt;log()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、log_2は&lt;/font&gt;&lt;/font&gt; &lt;code&gt;lg()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と省略され&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;すべてのタイプの対数が同様の方法で増加します。そのため、これらは同じカテゴリの&lt;/font&gt;&lt;/font&gt; &lt;code&gt;log(n)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を共有し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e17e10b891c653c285dea64d8f7a3373a1c19493" translate="yes" xml:space="preserve">
          <source>Following &lt;strong&gt;Big-O Complexity Chart&lt;/strong&gt; also taken from &lt;a href=&quot;http://bigocheatsheet.com/&quot;&gt;bigocheatsheet&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;次の&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Big-O Complexityチャート&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;も&lt;/font&gt;&lt;a href=&quot;http://bigocheatsheet.com/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;bigocheatsheet&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;から&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;取得&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="16d7a7b7bac663123d8b79b95559ac46d279282b" translate="yes" xml:space="preserve">
          <source>Following is an example of Linear Time Algorithm</source>
          <target state="translated">以下は、線形時間アルゴリズムの例です。</target>
        </trans-unit>
        <trans-unit id="1fef1582a836eacedbb1ab2d7e10888873cb5181" translate="yes" xml:space="preserve">
          <source>For example, the following function is &lt;em&gt;O(n)&lt;/em&gt; because the algorithm grows in proportion to its input &lt;em&gt;n&lt;/em&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;たとえば、次の関数は&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;O（n）です。&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは、アルゴリズムが入力&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;n&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に比例して大きくなるためです&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4caaa120df8c8c3e1948ef5644142dc7327e7965" translate="yes" xml:space="preserve">
          <source>For the below examples, we're now at the printer's office. Phone books are waiting to be mailed to each resident or business, and there's a sticker on each phone book identifying where it should be mailed to. Every person or business gets one phone book.</source>
          <target state="translated">以下の例では、印刷所に到着しました。電話帳が各住民や企業に郵送されるのを待っています。各電話帳には郵送先を示すシールが貼ってあります。一人一冊の電話帳を、一人一冊の住人や企業に配布しています。</target>
        </trans-unit>
        <trans-unit id="008f849741e4c42a77d0d3e85df29402d2062285" translate="yes" xml:space="preserve">
          <source>For the tree example, you can easily see that stepping down a level of nodes cuts down an exponential number of elements as you continue traversing. The popular example of looking through a name-sorted phone book is essentially equivalent to traversing down a binary search tree (middle page is the root element, and you can deduce at each step whether to go left or right).</source>
          <target state="translated">ツリーの例では、ノードのレベルをステップダウンすると、トラバースを続けている間に指数関数的な数の要素が削減されることが容易にわかります。よく知られている、名前入りの電話帳に目を通す例は、基本的にはバイナリ検索ツリーをトラバースするのと同じです(真ん中のページがルート要素で、各ステップで左に行くか右に行くかを推論できます)。</target>
        </trans-unit>
        <trans-unit id="f8cbba489ca545bed31ce5284b0f861e16a08da2" translate="yes" xml:space="preserve">
          <source>Given n input elements, to search an element in the array you need &lt;b&gt;at most 'n' comparisons&lt;/b&gt;. In other words, no matter what programming language you use, what coding style you prefer, on what system you execute it. In the worst case scenario it requires only n comparisons.The execution time is linearly proportional to the input size.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;入力要素がn個ある場合、配列内の要素を検索するには&lt;/font&gt;&lt;/font&gt;&lt;b&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、最大でn回の比較&lt;/font&gt;&lt;/font&gt;&lt;/b&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が必要&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;つまり、使用するプログラミング言語、使用するコーディングスタイル、実行するシステムに関係なく。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最悪のシナリオでは、n回の比較のみが必要です。実行時間は入力サイズに線形に比例します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b7e083bb0f5b4f68b701df168e90a1fcd7902c02" translate="yes" xml:space="preserve">
          <source>Here are the running times of some operations we might perform on the phone book, from fastest to slowest:</source>
          <target state="translated">ここでは、電話帳上で行うかもしれないいくつかの操作の実行時間を、最速から最長までご紹介します。</target>
        </trans-unit>
        <trans-unit id="a642dd551ca2983c44ce398efcbea81aaf769af0" translate="yes" xml:space="preserve">
          <source>Here is some functions and their expected complexities. Numbers are indicating &lt;strong&gt;statement execution frequencies&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;次に、いくつかの機能とその予想される複雑さを示します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;数字は&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ステートメントの実行頻度を&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;示してい&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4544d6dc56eede04340e7b413a78c264800e6ff9" translate="yes" xml:space="preserve">
          <source>I am learning about Big O Notation running times and amortized times.  I understand the notion of &lt;em&gt;O(n)&lt;/em&gt; linear time, meaning that the size of the input affects the growth of the algorithm proportionally...and the same goes for, for example, quadratic time &lt;em&gt;O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/em&gt; etc..even algorithms, such as permutation generators, with &lt;em&gt;O(n!)&lt;/em&gt; times, that grow by factorials.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Big O Notationの実行時間と償却時間について学習しています。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私は&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;O（n）&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;線形時間&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の概念を理解して&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;います。つまり、入力のサイズがアルゴリズムの成長に比例して影響を及ぼします...たとえば、二次時間&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;O（n &lt;/font&gt;&lt;/font&gt;&lt;sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2&lt;/font&gt;&lt;/font&gt;&lt;/sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;などにも同じことが&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;言えます。 、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;階乗によって成長する&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;O（n！）&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;回の&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;順列ジェネレータなど&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1514ac946545245f0cd6c0c469469d9924c92dc8" translate="yes" xml:space="preserve">
          <source>I can add something interesting, that I read in book by Kormen and etc. a long time ago. Now, imagine a problem, where we have to find a solution in a problem space. This problem space should be finite.</source>
          <target state="translated">昔、コーメンなどの本で読んだ面白いことを付け加えておきます。さて,ある問題を想像してみよう.この問題空間は有限でなければならない。</target>
        </trans-unit>
        <trans-unit id="77898565c07238eac54505aaa70fda9acd97105d" translate="yes" xml:space="preserve">
          <source>I can give an example for a for loop and maybe once grasped the concept maybe it will be simpler to understand in different contexts.</source>
          <target state="translated">私はforループの例を挙げることができますが、一度概念を理解してしまえば、別の文脈で理解するのがより簡単になるかもしれません。</target>
        </trans-unit>
        <trans-unit id="f46c74600710cca3491ccc2d55014c941985acd4" translate="yes" xml:space="preserve">
          <source>I cannot understand how to identify a function with a log time.</source>
          <target state="translated">ログタイムで機能を特定する方法がわからない。</target>
        </trans-unit>
        <trans-unit id="b120641fbd4e22f22f1a41d9c1460d708b5abf16" translate="yes" xml:space="preserve">
          <source>I cannot understand how to identify a function with a logarithmic
  time.</source>
          <target state="translated">対数時間で関数を特定する方法がわからない。</target>
        </trans-unit>
        <trans-unit id="2fc60cfd1e6ecec87ecd174464fd863785193468" translate="yes" xml:space="preserve">
          <source>I do know (maybe not in great detail) what Logarithm is, in the sense that:  log&lt;sub&gt;10&lt;/sub&gt; 100 = 2, but I cannot understand how to identify a function with a logarithmic time.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ログ：私は対数はという意味で、あるもの（そうでないかもしれない非常に詳細で）知っている&lt;/font&gt;&lt;/font&gt;&lt;sub&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;10&lt;/font&gt;&lt;/font&gt;&lt;/sub&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 100 = 2を、私は対数時間で機能を特定する方法を理解することはできません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1c4c380d7b586ba548b763e759bdb6e8a0e7d641" translate="yes" xml:space="preserve">
          <source>I should point out, that we are talking here about a relative fraction limit, not the absolute one. The binary search is a classical example. At each step we throw away 1/2 of the problem space. But binary search is not the only such example. Suppose, you proved somehow, that at each step you throw away at least 1/128 of problem space. That means, your program is still running at O(logN) time, although significantly slower than the binary search. This is a very good hint in analyzing of recursive algorithms. It often can be proved that at each step the recursion will not use several variants, and this leads to the cutoff of some fraction in problem space.</source>
          <target state="translated">指摘しておきますが、ここでは絶対的なものではなく、相対的な分数の限界について話しています。二進法の探索は古典的な例です.各ステップで問題空間の12を捨ててしまいます。しかし、二進法だけがそのような例ではありません。各ステップで少なくとも1128個の問題空間を捨てていることが何らかの方法で証明されたとしましょう。つまり、あなたのプログラムは、バイナリ探索よりもかなり遅いながらも、O(logN)時間で実行されていることになります。これは,再帰的アルゴリズムを分析する上で非常に良いヒントになります.各ステップで再帰がいくつかのバリエーションを使用しないことが証明されることが多く、これは問題空間のいくつかの端数のカットオフにつながります。</target>
        </trans-unit>
        <trans-unit id="5881b589c8d34329db8c8aaf3583f04e0a95d59a" translate="yes" xml:space="preserve">
          <source>I would rephrase this as 'height of a complete binary tree is log n'.  Figuring the height of a complete binary tree would be O(log n), if you were traversing down step by step.</source>
          <target state="translated">私はこれを「完全な二進木の高さはlog n」と言い換えます。完全な二進法の木の高さを計算すると、一歩一歩下に進んでいくと、O(log n)になります。</target>
        </trans-unit>
        <trans-unit id="34a2c69faab5e22f0819e07416c899e0ab5ea227" translate="yes" xml:space="preserve">
          <source>If an operation makes a series of constant time decisions each of which halves (reduces by a factor of 3, 4, 5..) the size of the input to be considered, the whole will take time proportional to log base 2 (base 3, base 4, base 5...) of the size N of the input, rather than being O(N).</source>
          <target state="translated">演算が、考慮すべき入力のサイズを半分にする(3,4,5...の係数で縮小する)一連の一定時間の決定を行う場合、全体としては、O(N)ではなく、入力のサイズNの対数基数2(基数3,基数4,基数5...)に比例した時間が必要になります。</target>
        </trans-unit>
        <trans-unit id="29c301205bbde0676fa60de7fb664c0272520a41" translate="yes" xml:space="preserve">
          <source>If an operation performs constant time work on each digit or bit of an input, the whole operation will take time proportional to the number of digits or bits in the input, not the magnitude of the input; thus, O(log N) rather than O(N).</source>
          <target state="translated">演算が入力の各桁またはビットに対して一定の時間作業を行う場合、演算全体の時間は入力の大きさではなく、入力の桁数またはビット数に比例しますので、O(N)ではなくO(log N)となります。</target>
        </trans-unit>
        <trans-unit id="40f1a35a514953f64f37c0530c0551a81f2c1d8c" translate="yes" xml:space="preserve">
          <source>If you are looking for a intuition based answer I would like to put up two interpretations for you.</source>
          <target state="translated">直感に基づいた答えを探しているのであれば、2つの解釈を載せておきたいと思います。</target>
        </trans-unit>
        <trans-unit id="e727fd9b51a54744bd70b04f39c112e181c73e04" translate="yes" xml:space="preserve">
          <source>If you had a function that takes:</source>
          <target state="translated">取る関数があったとしたら</target>
        </trans-unit>
        <trans-unit id="cae2fdb17e96f6926d298666e40f5aed0ba43750" translate="yes" xml:space="preserve">
          <source>If you have an M-ary tree of depth d and size n, then:</source>
          <target state="translated">深さdでサイズnのM-ary木があるとします。</target>
        </trans-unit>
        <trans-unit id="1d95e53c64e645e837222469b9cab7b8c1b9b2cb" translate="yes" xml:space="preserve">
          <source>If you increase the problem size by a multiplicative amount (i.e. multiply its size by 10), the work is only increased by an additive amount.</source>
          <target state="translated">問題の大きさを乗算的な量だけ大きくした場合(すなわち、その大きさを10倍にした場合)、作業は加算的な量だけ大きくなります。</target>
        </trans-unit>
        <trans-unit id="8e7f99e5aec28c3c3af14e4b086ab56f08a3ece3" translate="yes" xml:space="preserve">
          <source>If you plot a logarithmic function on a graphical calculator or something similar, you'll see that it rises really slowly -- even more slowly than a linear function.</source>
          <target state="translated">グラフィカルな電卓などで対数関数をプロットすると、一次関数よりもさらにゆっくりと、本当にゆっくりと上昇していくのがわかります。</target>
        </trans-unit>
        <trans-unit id="b135e7e3c1db73615122392851be7982fb0590b8" translate="yes" xml:space="preserve">
          <source>Imagine a very high hill with a very broad base as well. To reach the top of the hill there are two ways: one is a dedicated pathway going spirally around the hill reaching at the top, the other: small terrace like carvings cut out to provide a staircase. Now if the first way is reaching in linear time O(n), the second one is O(log n).</source>
          <target state="translated">非常に高い丘を想像してみてください。丘の頂上に到達するためには、2つの方法があります:1つは丘の周りを螺旋状に回って頂上に到達する専用の通路、もう1つは階段を提供するために切り取られた彫刻のような小さなテラスのようなものです。最初の方法が直線的な時間O(n)で到達するならば、2番目の方法はO(log n)である。</target>
        </trans-unit>
        <trans-unit id="5e33e04b1dee3afdd640617efc039e44bde6caae" translate="yes" xml:space="preserve">
          <source>Imagine an algorithm, which accepts an integer, &lt;code&gt;n&lt;/code&gt; as input and completes in time proportional to &lt;code&gt;n&lt;/code&gt; then it is O(n) or theta(n) but if it runs in time proportion to the &lt;code&gt;number of digits or the number of bits in the binary representation on number&lt;/code&gt; then the algorithm runs in O(log n) or theta(log n) time.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、整数を受け入れるアルゴリズムを想像する&lt;/font&gt;&lt;/font&gt; &lt;code&gt;n&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;までの時間に比例して入力し、完了すると&lt;/font&gt;&lt;/font&gt; &lt;code&gt;n&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;がO（N）又はシータ（n）は、その後、それはに時間比例して実行する場合&lt;/font&gt;&lt;/font&gt; &lt;code&gt;number of digits or the number of bits in the binary representation on number&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、アルゴリズムはO（log n）またはtheta（log n）時間で実行されます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6d589872ee5e41297713f59c099e086e3b4052ff" translate="yes" xml:space="preserve">
          <source>Imagine we have a rope and we have tied it to a horse. If the rope is directly tied to the horse, the force the horse would need to pull away (say, from a man) is directly 1.</source>
          <target state="translated">ロープを持っていて、それを馬に結んだと想像してみてください。ロープが馬に直接結ばれている場合、馬が(例えば、人から)引き離すのに必要な力は、直接 1.</target>
        </trans-unit>
        <trans-unit id="6378d42546aa9afc7483f28bf7aebdf73c49b4cd" translate="yes" xml:space="preserve">
          <source>In information technology it means that:</source>
          <target state="translated">情報技術では、ということです。</target>
        </trans-unit>
        <trans-unit id="98c3336af693827be0b1652e42621a919c618013" translate="yes" xml:space="preserve">
          <source>In lay terms, it means that the equation for time may have some other components: e.g. it may have some constant startup time;  but these other components pale towards insignificance for large values of n, and the a*log(n) is the dominating term for large n.</source>
          <target state="translated">平たく言えば、時間の方程式が他の成分を持っているかもしれないことを意味します:例えば、それは一定の起動時間を持っているかもしれませんが、これらの他の成分は、大きなnの値では重要ではなく、a*log(n)は大きなnの場合に支配的な項になります。</target>
        </trans-unit>
        <trans-unit id="58f7c710de382403051e79844d41a906eeb779a2" translate="yes" xml:space="preserve">
          <source>In mathematical analysis it means that:</source>
          <target state="translated">数学的な分析では、それが意味しています。</target>
        </trans-unit>
        <trans-unit id="b3e3252b9357453f176dba5797bfb8ef7ee2628e" translate="yes" xml:space="preserve">
          <source>In our example above, our 'growth rate' is &lt;strong&gt;O(log n)&lt;/strong&gt;. For every additional loop, the force our rope can handle is 10 times more:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;上記の例では、「成長率」は&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;O（log n）&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;追加のループごとに、ロープが処理できる力は10倍以上になります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4f65581e910638647521ce0d5776783cc36b7118" translate="yes" xml:space="preserve">
          <source>In the case of binary search, every iteration you throw away half of the input. It should be noted that in Big-O notation, log is log base 2.</source>
          <target state="translated">バイナリ探索の場合、反復するたびに入力の半分を捨てることになります。Big-O 記法では、log は log base 2 であることに注意してください。</target>
        </trans-unit>
        <trans-unit id="fb6b918ab69d9248208647f0c2b72d19f69ad0b5" translate="yes" xml:space="preserve">
          <source>In this article there is a quote:
&lt;a href=&quot;http://www.phil.uu.nl/datastructuren/09-10/knuth_big_omicron.pdf&quot;&gt;D.E. Knuth, &quot;BIG OMICRON AND BIG OMEGA AND BIG THETA&quot;, 1976&lt;/a&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この記事には引用があります： &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.phil.uu.nl/datastructuren/09-10/knuth_big_omicron.pdf&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;DE Knuth、 &quot;BIG OMICRON AND BIG OMEGA AND BIG THETA&quot;、1976&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8670c63b3667b4287608c526872dfc9205befd56" translate="yes" xml:space="preserve">
          <source>Instead we take input size as the parameter because whatever the code is, the input is same.
&lt;b&gt;So the execution time is a function of input size.&lt;/b&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コードが何であれ、入力は同じであるため、代わりにパラメーターとして入力サイズを使用します。 &lt;/font&gt;&lt;/font&gt;&lt;b&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、実行時間は入力サイズの関数です。&lt;/font&gt;&lt;/font&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="0dc1da4c3f8d12c166ff2cd6e4311d6053faa4f2" translate="yes" xml:space="preserve">
          <source>It is like saying that logarithm is the inverse of exponential.</source>
          <target state="translated">対数は指数の逆数と言っているようなものです。</target>
        </trans-unit>
        <trans-unit id="c4cf5d0abe643a3d91104db3051e74c625aac83a" translate="yes" xml:space="preserve">
          <source>It is the number of times you can cut a log of length n repeatedly into b equal parts before reaching a section of size 1.</source>
          <target state="translated">長さnの丸太を何度もb等分に切断してから、サイズ1の断面に到達するまでの回数です。</target>
        </trans-unit>
        <trans-unit id="70b54711198b76e6fa5a133bb42b9709471571ba" translate="yes" xml:space="preserve">
          <source>It simply means that the time needed for this task grows with log(n) (example : 2s for n = 10, 4s for n = 100, ...). Read the Wikipedia articles on &lt;a href=&quot;http://en.wikipedia.org/wiki/Binary_search_algorithm&quot;&gt;Binary Search Algorithm&lt;/a&gt; and &lt;a href=&quot;http://en.wikipedia.org/wiki/Big_O_notation&quot;&gt;Big O Notation&lt;/a&gt; for more precisions.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは単に、このタスクに必要な時間がlog（n）とともに増加することを意味します（例：n = 10の場合は2秒、n = 100の場合は4秒、...）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;精度については&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Binary_search_algorithm&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;バイナリ検索アルゴリズム&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Big_O_notation&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Big O表記&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に関するWikipediaの記事&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;をご覧ください。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d446a1de595cefe01ba8d7b981f6598cef60e89a" translate="yes" xml:space="preserve">
          <source>Lastly very simple showcase there is shows how it is calculated;</source>
          <target state="translated">最後に非常にシンプルなショーケースがありますが、それがどのように計算されているかを示しています。</target>
        </trans-unit>
        <trans-unit id="5365cefd34a28e9f6f10283dbf2204e550bd9877" translate="yes" xml:space="preserve">
          <source>Like algorithm 10, but with some variations.</source>
          <target state="translated">アルゴリズム10と似ていますが、いくつかのバリエーションがあります。</target>
        </trans-unit>
        <trans-unit id="daf9ca7dff5ef97da12064b1422d4d6d308259b7" translate="yes" xml:space="preserve">
          <source>Like algorithm 12, but with some variations that still yield &lt;code&gt;O(n^3)&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アルゴリズム12と同様ですが、まだ&lt;/font&gt;&lt;/font&gt; &lt;code&gt;O(n^3)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;生成するいくつかのバリエーションがあり&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="38289bf08745c473c76541ef8dc4bf419c9505a0" translate="yes" xml:space="preserve">
          <source>Logarithm is essentially the inverse of exponentiation.  So, if each 'step' of your function is eliminating a &lt;strong&gt;factor&lt;/strong&gt; of elements from the original item set, that is a logarithmic time algorithm.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;対数は本質的に指数の逆です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、関数の各「ステップ」が&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;元のアイテムセットから&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;要素&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の要素を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;排除している&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;場合、それは対数時間アルゴリズムです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c37c28e3db4ab56ed0c7f37046862788fd45f644" translate="yes" xml:space="preserve">
          <source>Logarithmic running time (&lt;code&gt;O(log n)&lt;/code&gt;) essentially means that the running time grows in proportion to the &lt;em&gt;logarithm&lt;/em&gt; of the input size - as an example, if 10 items takes at most some amount of time &lt;code&gt;x&lt;/code&gt;, and 100 items takes at most, say, &lt;code&gt;2x&lt;/code&gt;, and 10,000 items takes at most &lt;code&gt;4x&lt;/code&gt;, then it's looking like an &lt;code&gt;O(log n)&lt;/code&gt; time complexity.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;対数実行時間（&lt;/font&gt;&lt;/font&gt; &lt;code&gt;O(log n)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）は、基本的に、実行時間が&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;入力サイズの&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;対数&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に比例して増加することを意味し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。たとえば、10アイテムが最大である程度の時間&lt;/font&gt;&lt;/font&gt; &lt;code&gt;x&lt;/code&gt; を&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;とり、100アイテムが最大でかかる場合、たとえば、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;2x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、10,000アイテムは最大で&lt;/font&gt;&lt;/font&gt; &lt;code&gt;4x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;かかり&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;O(log n)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;時間の複雑さの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ように見え&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0da223ebb05c072d02e7d7d009cc82db75960461" translate="yes" xml:space="preserve">
          <source>Many good answers have already been posted to this question, but I believe we really are missing an important one - namely, the illustrated answer.</source>
          <target state="translated">この質問にはすでに多くの良い回答が投稿されていますが、私たちは本当に重要なものを見落としていると思います。</target>
        </trans-unit>
        <trans-unit id="0b6718155769a3e78ed892aa3ac3ab7d62302796" translate="yes" xml:space="preserve">
          <source>Note that if the equation were, for example ...</source>
          <target state="translated">式が、例えば...であった場合に注意してください。</target>
        </trans-unit>
        <trans-unit id="0aa386acc93467ee2abde73845cd59703ce2baff" translate="yes" xml:space="preserve">
          <source>Notice that I have bolded 'at most'. Big-O notation always refers to the worse case. If you're lucky, you could guess the number in one attempt and so the best case is O(1), but that's another story.</source>
          <target state="translated">太字の「せいぜい」に注目してください。Big-Oの表記は常に最悪のケースを指しています。運が良ければ、1回の試行で数字を当てることができるので、最高のケースはO(1)ですが、それはまた別の話です。</target>
        </trans-unit>
        <trans-unit id="896e616be26c906871b376ff0bcf07906cf168d2" translate="yes" xml:space="preserve">
          <source>Now if the rope is looped once, the horse will need to pull 10 times harder. If the human decides to make it really difficult for the horse, he may loop the rope again round a pole, increasing it's strength by an additional 10 times. A third loop will again increase the strength by a further 10 times.</source>
          <target state="translated">ロープが一度ループした場合、馬は10倍の力で引っ張る必要があります。人間が馬のためにそれを本当に困難にすることを決定した場合、彼はロープを再びポールの周りにループさせることができます、追加の10倍の強さを増加させます。3回目のループは、さらに10倍の強度を再び増加させます。</target>
        </trans-unit>
        <trans-unit id="1d64633a7606b749454da054611ddab06ad82f5e" translate="yes" xml:space="preserve">
          <source>Now imagine the rope is looped round a pole. The horse to get away will now have to pull many times harder. The amount of times will depend on the roughness of the rope and the size of the pole, but let's assume it will multiply one's strength by 10 (when the rope makes a complete turn).</source>
          <target state="translated">今すぐロープがポールの周りにループされている想像してみてください。逃げようとする馬は、何倍も強く引っ張らなければなりません。その回数は、ロープの粗さやポールの大きさにもよりますが、自分の力の10倍の力がかかると仮定してみましょう(ロープが一回転したとき)。</target>
        </trans-unit>
        <trans-unit id="d4de53fc0c4c7ca626fe1b6e7ea8bfbf1e3b1a36" translate="yes" xml:space="preserve">
          <source>Now it took you 7 guesses to get this right. But what is the relationship here? What is the most amount of items that you can guess from each additional guess?</source>
          <target state="translated">これで7回も当てたのね しかし、ここでの関係はどうなっているのでしょうか?それぞれの追加推測から推測できるアイテムの量はどれくらいでしょうか?</target>
        </trans-unit>
        <trans-unit id="02fb936ea47e751f434197c3c1e70189f2a9e94f" translate="yes" xml:space="preserve">
          <source>Now let's imagine you are trying to guess a number between 1-100.</source>
          <target state="translated">では、1から100までの数字を当てようとしているとしましょう。</target>
        </trans-unit>
        <trans-unit id="92c7d02b06664cf176d72b22469d6e2637331bf5" translate="yes" xml:space="preserve">
          <source>Now the example above did use base 10, but fortunately the base of the log is insignificant when we talk about big o notation.</source>
          <target state="translated">さて、上の例ではベース10を使用していますが、幸いにもログのベースは重要ではありません。</target>
        </trans-unit>
        <trans-unit id="d1132f0f0d5b4551a144f923806f22c8f231b52c" translate="yes" xml:space="preserve">
          <source>Now try to see it that way, if exponential grows very fast then logarithm grows (inversely) very slow.</source>
          <target state="translated">指数が非常に速く成長するならば、対数は(逆に)非常に遅く成長します。</target>
        </trans-unit>
        <trans-unit id="cf7bf0faa69c8d99b94cd18c064970e2c8eb7a8e" translate="yes" xml:space="preserve">
          <source>Now, if you can prove, that at every iteration of your algorithm you cut off a fraction of this space, that is no less than some limit, this means that your algorithm is running in O(logN) time.</source>
          <target state="translated">さて、もしあなたのアルゴリズムの反復のたびに、この空間の一部を切り取ることを証明できれば、それはいくつかの限界を下回らないことになり、これはあなたのアルゴリズムがO(logN)時間で実行されていることを意味します。</target>
        </trans-unit>
        <trans-unit id="225912e442e23ad1ffb556abadc76e236a543d7e" translate="yes" xml:space="preserve">
          <source>O(log n) is a bit misleading, more precisely it's O(log&lt;sub&gt;2&lt;/sub&gt; n), i.e. (logarithm with base 2).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;O（log n）は少し誤解を招くようです。より正確には、O（log &lt;/font&gt;&lt;/font&gt;&lt;sub&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2&lt;/font&gt;&lt;/font&gt;&lt;/sub&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; n）、つまり（2を底とする対数）です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="741abfc15af347b4f12ce5826876662fcbfe5bae" translate="yes" xml:space="preserve">
          <source>Of course, a bigger phone book will still take you a longer time, but it won't grow as quickly as the proportional increase in the additional size.</source>
          <target state="translated">もちろん、電話帳を大きくしても時間はかかりますが、追加サイズで比例して増えていくようなことはありません。</target>
        </trans-unit>
        <trans-unit id="c91777dabbef341bced10eccfce89a68f07e4082" translate="yes" xml:space="preserve">
          <source>Ok let's try and fully understand what a logarithm actually is.</source>
          <target state="translated">では、実際に対数とは何かを完全に理解してみましょう。</target>
        </trans-unit>
        <trans-unit id="60081c10f46ab24f55cbcac1d8baa12b740223fb" translate="yes" xml:space="preserve">
          <source>On the basis of the issues discussed here, I propose that members of
  SIGACT, and editors of computer science and mathematics journals,
  adopt notations as defined above, unless &lt;strong&gt;a better alternative can be
  found reasonably soon&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここで説明した問題に基づいて&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、より良い代替案がすぐに見つかる&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;場合を除き&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; SIGACTのメンバー、およびコンピューターサイエンスと数学のジャーナルの編集者は、上記で定義した表記法を採用する&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ことをお勧めし&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f1b4ad273ca861456f8e996a15667043d1cefab0" translate="yes" xml:space="preserve">
          <source>Or actually, it doesn't quite mean that; more likely it means something like &quot;&lt;code&gt;time&lt;/code&gt; divided by &lt;code&gt;a*log(n)&lt;/code&gt; tends towards &lt;code&gt;1&lt;/code&gt;&quot;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あるいは、実際には、それがまったく意味があるわけではありません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;より可能性が高いのは、「&lt;/font&gt;&lt;/font&gt; &lt;code&gt;time&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a*log(n)&lt;/code&gt; で&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;割った&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;もの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が&lt;/font&gt;&lt;/font&gt; &lt;code&gt;1&lt;/code&gt; に&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;向かう傾向がある&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;」のようなもの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="172a790a2a8831c6bd8b4653399b564aa7c99f4b" translate="yes" xml:space="preserve">
          <source>Others have given good diagram examples, such as the tree diagrams. I did not see any simple code examples. So in addition to my explanation, I'll provide some algorithms with simple print statements to illustrate the complexity of different algorithm categories.</source>
          <target state="translated">他の人は、ツリー図のような良い図例をあげています。私は簡単なコード例を見ませんでした。そこで、私の説明に加えて、異なるアルゴリズムのカテゴリの複雑さを説明するために、簡単な印刷文を持ついくつかのアルゴリズムを提供します。</target>
        </trans-unit>
        <trans-unit id="d226550a9f05c197e28559642c0c8048d4b533b4" translate="yes" xml:space="preserve">
          <source>Plotting &lt;code&gt;log(n)&lt;/code&gt; on a plain piece of paper, will result in a graph where the rise of the curve decelerates as &lt;code&gt;n&lt;/code&gt; increases:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;普通の紙に&lt;/font&gt;&lt;/font&gt; &lt;code&gt;log(n)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プロット&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;すると、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;n&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が増加するにつれて&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;曲線の上昇が減速するグラフに&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;なります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fa164feedc89846fdd3de1a98b22842deeff5b6f" translate="yes" xml:space="preserve">
          <source>Searching for 4 yields 3 hits: 6, 3 then 4. And log2 12 = 3, which is a good apporximate to how many hits where needed.</source>
          <target state="translated">4を検索すると3件ヒットします。6、3、そして4です。そして、log2 12=3、これは、必要な場所でどのように多くのヒットの良い近似です。</target>
        </trans-unit>
        <trans-unit id="1348a8daed3b64aac9ec3379db2da56a0a9a0029" translate="yes" xml:space="preserve">
          <source>See as the input size increased the work done is increased and it is independent of any machine.
And if you try to find out the value of units of work 
It's actually dependent onto those above specified parameters.It will change according to the systems and all.</source>
          <target state="translated">入力サイズが大きくなればなるほど作業量は増え、どの機械にも依存しません。そして、あなたが仕事の単位の値を見つけようとすると、それは実際には上記の指定されたパラメータに依存しています。</target>
        </trans-unit>
        <trans-unit id="dab06999693f805ef1a862d7a609e81414475e38" translate="yes" xml:space="preserve">
          <source>Similarly, if there was a nested loop, the time would be O(n&lt;sup&gt;2&lt;/sup&gt;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;同様に、ネストされたループがある場合、時間はO（n &lt;/font&gt;&lt;/font&gt;&lt;sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2&lt;/font&gt;&lt;/font&gt;&lt;/sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）になります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1a89c7cdf5037c4260a4641bbc5992b3ebeecf1f" translate="yes" xml:space="preserve">
          <source>Simply put: At each step of your algorithm you can cut the work in half. (Asymptotically equivalent to third, fourth, ...)</source>
          <target state="translated">簡単に言えば、アルゴリズムの各ステップで作業を半分にすることができます。(漸近的には3番目、4番目、...と同等)</target>
        </trans-unit>
        <trans-unit id="401e8032f76cd53b593529b22a8cb008c7dd6f7c" translate="yes" xml:space="preserve">
          <source>So when you say any algorithm is O(log n)
it means the execution time is log times the input size n.</source>
          <target state="translated">つまり、どんなアルゴリズムでもO(log n)であると言うのは、実行時間が入力サイズnのlog倍であることを意味します。</target>
        </trans-unit>
        <trans-unit id="3fa29b366a6312d23b4d2519423f5db29d71f7d5" translate="yes" xml:space="preserve">
          <source>That gives you the equation :</source>
          <target state="translated">それはあなたに方程式を与えます。</target>
        </trans-unit>
        <trans-unit id="5291dbaca6641002cae33e549bcd7025de975858" translate="yes" xml:space="preserve">
          <source>That means that in the loop the step grows exponentially. E.g.</source>
          <target state="translated">つまり、ループの中でステップが指数関数的に成長することを意味します。例えば</target>
        </trans-unit>
        <trans-unit id="9216353681115945aaba6250fe5ae4d1014f5529" translate="yes" xml:space="preserve">
          <source>That's what bit O notation means: it means &quot;what is the order of dominant term for any sufficiently large n&quot;.</source>
          <target state="translated">それがビットO記法の意味であり、「任意の十分に大きいnに対して支配項の次数は何か」ということを意味しています。</target>
        </trans-unit>
        <trans-unit id="7c239bafbc2dce1d2ee370782accc2cae132308f" translate="yes" xml:space="preserve">
          <source>The above give several straight forward examples, and variations to help demonstrate what subtle changes can be introduced that really don't change the analysis. Hopefully it gives you enough insight.</source>
          <target state="translated">上記では、いくつかのわかりやすい例と、分析を実際に変更することなく、どのような微妙な変更を導入できるかを示すためのバリエーションを紹介しています。うまくいけば、あなたに十分な洞察を与えてくれるでしょう。</target>
        </trans-unit>
        <trans-unit id="fda0956265302daf9fe6bdf8cd1b73b62ae63530" translate="yes" xml:space="preserve">
          <source>The best way I've always had to mentally visualize an algorithm that runs in O(log n) is as follows:</source>
          <target state="translated">私がいつも精神的にO(log n)で実行されるアルゴリズムを可視化するための最良の方法は次のようなものです。</target>
        </trans-unit>
        <trans-unit id="81f4a7349b2e61a08d286f542458555f1865b59a" translate="yes" xml:space="preserve">
          <source>The complete binary example is O(ln n) because the search looks like this:</source>
          <target state="translated">完全なバイナリの例では、検索がこのようになるので、O(ln n)となります。</target>
        </trans-unit>
        <trans-unit id="d7c3202604045a8f0ca1c569409156d740cf38fe" translate="yes" xml:space="preserve">
          <source>The complexity in O-notation of this program is O(log(n)). Let's try to loop through it by hand (n being somewhere between 512 and 1023 (excluding 1024):</source>
          <target state="translated">このプログラムのO表記の複雑さはO(log(n))です。これを手でループしてみましょう(nは512から1023(1024を除く)の間のどこかにあります)。</target>
        </trans-unit>
        <trans-unit id="23fb0bc54f9a22ea3778e044e18fe0f74b651fc4" translate="yes" xml:space="preserve">
          <source>The difference between O(n) and O(log(n)) is huge, similar to the difference between O(n) and O(a^n) (a being a constant).</source>
          <target state="translated">O(n)とO(log(n))の違いは、O(n)とO(a^n)の違い(aは定数)に似ていて、大きな差があります。</target>
        </trans-unit>
        <trans-unit id="0077251502a2b3945f5070c00b578c932c22496e" translate="yes" xml:space="preserve">
          <source>The explanation below is using the case of a fully &lt;em&gt;balanced&lt;/em&gt; binary tree to help you understand how we get logarithmic time complexity.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;以下の説明では、完全に&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;バランスのとれた&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;バイナリツリーの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ケースを使用して、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;対数時間の複雑さを理解する方法を説明しています。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="979a113826a0c1e025cb59a3bc5b4dbfe4e82d94" translate="yes" xml:space="preserve">
          <source>The following drawing depicts a binary tree. Notice how each level contains double the number of nodes compared to the level above (hence &lt;em&gt;binary&lt;/em&gt;):</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;次の図は、バイナリツリーを示しています。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;各レベルには、上のレベル（したがって、&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;バイナリ&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と比較して、ノードの数が2倍あることに注意してください&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="db2a24bbecedf8e012282630dd132fbb4ee8f292" translate="yes" xml:space="preserve">
          <source>The height of a balanced binary tree is O(log&lt;sub&gt;2&lt;/sub&gt; n), since every node has two (note the &quot;two&quot; as in log&lt;sub&gt;2&lt;/sub&gt; n) child nodes. So, a tree with n nodes has a height of log&lt;sub&gt;2&lt;/sub&gt; n.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;すべてのノードには2つ（log &lt;/font&gt;&lt;sub&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2&lt;/font&gt;&lt;/sub&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; nの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;「2」に注意&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）の子ノード&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;があるため、バランスのとれたバイナリツリーの高さはO（log &lt;/font&gt;&lt;/font&gt;&lt;sub&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2&lt;/font&gt;&lt;/font&gt;&lt;/sub&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; n）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、n個のノードを持つツリーの高さはlog &lt;/font&gt;&lt;sub&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2&lt;/font&gt;&lt;/sub&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; nです。&lt;/font&gt;&lt;/font&gt;&lt;sub&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/sub&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;sub&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/sub&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4f9f0b9b225087a04ae96fd13b7c4892a8920821" translate="yes" xml:space="preserve">
          <source>The logarithm of x (to the base of a) is the reverse function of a^x.</source>
          <target state="translated">xの対数(aの基底まで)は、a^xの逆関数です。</target>
        </trans-unit>
        <trans-unit id="748b4da565ee01d0e285c7ce2ee8782d05768ee1" translate="yes" xml:space="preserve">
          <source>The logarithmic function is the inverse of the exponential function. Put another way, if your input grows exponentially (rather than linearly, as you would normally consider it), your function grows linearly.</source>
          <target state="translated">対数関数は指数関数の逆数です。別の言い方をすれば、入力が指数関数的に(通常は線形ではなく)成長する場合、関数は線形に成長します。</target>
        </trans-unit>
        <trans-unit id="217245fbd9703d38af322b5f4c84cf925e99d9dc" translate="yes" xml:space="preserve">
          <source>The most common attributes of logarithmic running-time function are that:</source>
          <target state="translated">対数走時関数に共通する属性としては</target>
        </trans-unit>
        <trans-unit id="c6ff8c3cdb742922883fe572d4bd4535cbbcdabf" translate="yes" xml:space="preserve">
          <source>The running time complexity of binary search is an example of &lt;code&gt;O(log n)&lt;/code&gt;. This is because in binary search, you are always ignoring half of your input in each later step by dividing the array in half and only focusing on one half with each step. Each step is constant-time, because in binary search you only need to compare one element with your key in order to figure out what to do next irregardless of how big the array you are considering is at any point. So you do approximately log(n)/log(2) steps.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;バイナリ検索の実行時間の複雑さは、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;O(log n)&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;例です&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。これは、バイナリ検索では、配列を半分に分割し、各ステップで半分にのみ焦点を当てることにより、後の各ステップで入力の半分を常に無視しているためです。バイナリ検索では、考慮している配列のサイズがどのくらい大きくても、次に何をすべきかを理解するために、1つの要素をキーと比較するだけでよいので、各ステップは一定時間です。したがって、およそlog（n）/ log（2）ステップを実行します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="183ce247942b6cd9feda78873387089ea80dbff0" translate="yes" xml:space="preserve">
          <source>The running time complexity of merge sort is an example of &lt;code&gt;O(n log n)&lt;/code&gt;. This is because you are dividing the array in half with each step, resulting in a total of approximately log(n)/log(2) steps. However, in each step you need to perform merge operations on all elements (whether it's one merge operation on two sublists of n/2 elements, or two merge operations on four sublists of n/4 elements, is irrelevant because it adds to having to do this for n elements in each step). Thus, the total complexity is &lt;code&gt;O(n log n)&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;マージソートの実行時の複雑さは&lt;/font&gt;&lt;/font&gt; &lt;code&gt;O(n log n)&lt;/code&gt; の例&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは、各ステップで配列を半分に分割しているため、合計でおよそlog（n）/ log（2）ステップになるためです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ただし、各ステップですべての要素に対してマージ操作を実行する必要があります（n / 2要素の2つのサブリストに対する1つのマージ操作か、n / 4要素の4つのサブリストに対する2つのマージ操作かは関係ありません。各ステップでn個の要素に対してこれを行います）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、全体の複雑さは&lt;/font&gt;&lt;/font&gt; &lt;code&gt;O(n log n)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="78d57ee8f42bffef4d8a9382ae1beeb55a66ed2c" translate="yes" xml:space="preserve">
          <source>Then it takes log&lt;sub&gt;2&lt;/sub&gt;(n) time. The &lt;a href=&quot;http://en.wikipedia.org/wiki/Big_O_notation&quot;&gt;Big O notation&lt;/a&gt;, loosely speaking, means that the relationship only needs to be true for large n, and that constant factors and smaller terms can be ignored.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;次に、log &lt;/font&gt;&lt;/font&gt;&lt;sub&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2&lt;/font&gt;&lt;/font&gt;&lt;/sub&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（n）時間&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;かかります&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Big_O_notation&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ランダウの記号&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、緩く言えば、関係だけ大きいnについて真である必要があり、一定の要因と小さい用語は無視することができることを意味します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3f3dd6c155a570957f69b762d0742cb653f9ff27" translate="yes" xml:space="preserve">
          <source>These 2 cases will  take O(log n) time</source>
          <target state="translated">これら2つのケースでは、O(log n)の時間がかかります。</target>
        </trans-unit>
        <trans-unit id="d0838d5f8965084f46ea02466a76e08056604c29" translate="yes" xml:space="preserve">
          <source>Think of this as a combination of &lt;code&gt;O(log(n))&lt;/code&gt; and &lt;code&gt;O(n)&lt;/code&gt;. The nesting of the for loops help us obtain the &lt;code&gt;O(n*log(n))&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これを&lt;/font&gt;&lt;/font&gt; &lt;code&gt;O(log(n))&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;O(n)&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;組み合わせと考えてください&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;forループのネストは、&lt;/font&gt; &lt;code&gt;O(n*log(n))&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;取得に役立ち&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c85c59919495767e1aa36e7cb8e1e1898fc42aff" translate="yes" xml:space="preserve">
          <source>This algorithm is simple, which prints hello n times.</source>
          <target state="translated">このアルゴリズムは、helloをn回印刷する単純なものです。</target>
        </trans-unit>
        <trans-unit id="275d42b938445e6155dc69cc23cb8dbbe4f2b94b" translate="yes" xml:space="preserve">
          <source>This algorithm shows a variation, where it will print hello n/2 times. n/2 = 1/2 * n. We ignore the 1/2 constant and see that this algorithm is O(n).</source>
          <target state="translated">n2=12*n.我々は12の定数を無視して、このアルゴリズムがO(n)であることを見てみましょう。</target>
        </trans-unit>
        <trans-unit id="ef3f528f492ad5a3b79a1dcbea99bd7d9e170e6c" translate="yes" xml:space="preserve">
          <source>This is like algorithm 10, but with 3 loops instead of 2.</source>
          <target state="translated">これはアルゴリズム10に似ていますが、2つのループの代わりに3つのループがあります。</target>
        </trans-unit>
        <trans-unit id="4efa808ed1bb5af8e28061bc1c951efec7f558d1" translate="yes" xml:space="preserve">
          <source>This is why algorithms with a logarithmic time complexity are highly sought after: even for really big n (let's say n = 10^8, for example), they perform more than acceptably.</source>
          <target state="translated">これが、対数時間の複雑さを持つアルゴリズムが非常に求められている理由です:本当に大きなn(例えば、n=10^8としましょう)であっても、許容できる以上の性能を発揮します。</target>
        </trans-unit>
        <trans-unit id="fb1c5cd15bd283875742af5791fe8a2b4e1a3c61" translate="yes" xml:space="preserve">
          <source>This is why, for example, looking up people in a phone book is O(log n). You don't need to check &lt;em&gt;every&lt;/em&gt; person in the phone book to find the right one; instead, you can simply divide-and-conquer by looking based on where their name is alphabetically, and in every section you only need to explore a subset of each section before you eventually find someone's phone number.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これが、たとえば、電話帳で人を検索することがO（log n）である理由です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;電話帳の&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;すべての&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;人を調べて適切な人を見つける&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;必要はありません&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;代わりに、名前がアルファベット順になっている場所に基づいて単純に分割統治することができます。すべてのセクションで、最終的に誰かの電話番号を見つける前に、各セクションのサブセットを探索するだけで済みます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="16784fa25d2d74ba6e12621a053bcbb284da4694" translate="yes" xml:space="preserve">
          <source>Today is 2016, but we use it still today.</source>
          <target state="translated">今日は2016年ですが、今日も使っています。</target>
        </trans-unit>
        <trans-unit id="20d2171208dac823f70a0fc05abd05f1bb1d23c5" translate="yes" xml:space="preserve">
          <source>Using the graph, we can see that if we use a binary search to guess a number between 1-100 it will take us &lt;strong&gt;at most&lt;/strong&gt; 7 attempts. If we had 128 numbers, we could also guess the number in 7 attemps but 129 numbers will takes us &lt;strong&gt;at most&lt;/strong&gt; 8 attempts (in relations to logarithms, here we would need 7 guesses for a 128 value range, 10 guesses for a 1024 value range. 7 is the logarithm of 128, 10 is the logarithm of 1024 (base 2)).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;グラフを使用すると、バイナリ検索を使用して1〜100の数値を推測すると、&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最大&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 7回の試行&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が必要になることがわかり&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;128の数値がある場合、7回の試行でその数を推測することもできますが、129の数値では&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最大&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 8回の試行が行われます（対数との関係で、128の値の範囲では7回の推測、1024の値の範囲では10回の推測が必要になります） 。7は128の対数、10は1024（底2）の対数です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="88eec511fbead7aa7ea065aa934d14f88f9f9b16" translate="yes" xml:space="preserve">
          <source>Walking a single path in the tree ~ O(d) = O(log n to base M)</source>
          <target state="translated">木の中の一本道を歩く〜O(d)=O(log n to base M)</target>
        </trans-unit>
        <trans-unit id="9b73a24be6f8b05f8c2985125f1eb8c601802768" translate="yes" xml:space="preserve">
          <source>We can expand the phone book example to compare other kinds of operations and &lt;em&gt;their&lt;/em&gt; running time. We will assume our phone book has &lt;em&gt;businesses&lt;/em&gt; (the &quot;Yellow Pages&quot;) which have unique names and &lt;em&gt;people&lt;/em&gt; (the &quot;White Pages&quot;) which may not have unique names. A phone number is assigned to at most one person or business. We will also assume that it takes constant time to flip to a specific page.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;電話帳の例を拡張して、他の種類の操作と&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;その&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;実行時間&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を比較でき&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;電話帳には&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、一意の名前を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;持つ&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ビジネス&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（「イエローページ」）と一意の名前を持た&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ない可能性のある&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;人物&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（「ホワイトページ」）がある&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と想定します&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;電話番号は多くても1人または1つのビジネスに割り当てられます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;また、特定のページに移動するのに一定の時間がかかると仮定します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bf5c329d95290b50a23a52c623196a7055ce3a59" translate="yes" xml:space="preserve">
          <source>We can see that for each loop, the value increases by 10. The number of turns required to get any number is called the logarithm of the number i.e. we need 3 posts to multiple your strength by 1000 times, 6 posts to multiply your strength by 1,000,000.</source>
          <target state="translated">ループを繰り返すごとに、値は10ずつ増えていくことがわかります。例えば、1000倍にするには3つの投稿が必要で、100万倍にするには6つの投稿が必要です。</target>
        </trans-unit>
        <trans-unit id="215d074be1f0a767e1033061b3e486085ff1e2f8" translate="yes" xml:space="preserve">
          <source>We can see that for every guess our data set is shrinking. A good rule of thumb to identify if an algorithm has a logarithmtic time is
  to see if the data set shrinks by a certain order after each iteration</source>
          <target state="translated">推測のたびにデータセットが縮小していることがわかります。アルゴリズムが対数時間を持つかどうかを識別するための良い経験則は、各反復の後にデータセットが特定の順序で縮小するかどうかを見ることです。</target>
        </trans-unit>
        <trans-unit id="5c106784281fed81c6b6820aae1f0a6d9cbda0c5" translate="yes" xml:space="preserve">
          <source>What does O(log n) mean exactly</source>
          <target state="translated">O(log n)は正確には何を意味するのか</target>
        </trans-unit>
        <trans-unit id="93c5eee1c00a2205d8b906b832bc3151f6cc1c21" translate="yes" xml:space="preserve">
          <source>What does it mean to say that the height of a complete binary tree is O(log n)?</source>
          <target state="translated">完全な二進木の高さがO(log n)であるとはどういうことでしょうか?</target>
        </trans-unit>
        <trans-unit id="44807ad43b2ea914e6e9301d20f34f969353dcde" translate="yes" xml:space="preserve">
          <source>What it means precisely is &quot;as &lt;code&gt;n&lt;/code&gt; tends towards &lt;code&gt;infinity&lt;/code&gt;, the &lt;code&gt;time&lt;/code&gt; tends towards &lt;code&gt;a*log(n)&lt;/code&gt; where &lt;code&gt;a&lt;/code&gt; is a constant scaling factor&quot;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それが正確に意味することは、「&lt;/font&gt;&lt;/font&gt; &lt;code&gt;n&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;/font&gt; &lt;code&gt;infinity&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;向かう傾向がある&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ため、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;time&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a*log(n)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;向かう傾向にあり&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここで&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は一定のスケーリング係数です。」&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d9d385e501f3c19dadeb1c4c3602e959a018409e" translate="yes" xml:space="preserve">
          <source>What's log&lt;sub&gt;b&lt;/sub&gt;(n)?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ログ&lt;/font&gt;&lt;/font&gt;&lt;sub&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;b&lt;/font&gt;&lt;/font&gt;&lt;/sub&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（n）とは？&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5ddb3aa95967c49aba70d9818c8d1d78fd583c6b" translate="yes" xml:space="preserve">
          <source>When you look at the code examples below, I recommend looking at O(1), then O(n), then O(n^2). After you are good with those, then look at the others. I've included clean examples as well as variations to demonstrate how subtle changes can still result in the same categorization.</source>
          <target state="translated">以下のコード例を見るときは、O(1)、O(n)、O(n^2)の順に見ることをお勧めします。それらを使いこなせたら、他のコードも見てみましょう。微妙な変更でも同じ分類になることを示すために、きれいな例とバリエーションを入れました。</target>
        </trans-unit>
        <trans-unit id="216423c2bafc59cfac2856f5284a31862176680e" translate="yes" xml:space="preserve">
          <source>You can easily identify if the algorithmic time is n log n. Look for an outer loop which iterates through a list (O(n)). Then look to see if there is an inner loop. If the inner loop is &lt;strong&gt;cutting/reducing&lt;/strong&gt; the data set on each iteration, that loop is (O(log n)), and so the overall algorithm is = &lt;strong&gt;O(n log n)&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アルゴリズム時間がn log nであるかどうかは簡単に識別できます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;リスト（O（n））を反復処理する外側のループを探します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;次に、内部ループがあるかどうかを確認します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;内側のループが&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;各反復でデータセットを&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;カット/削減して&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;いる場合、そのループは（O（log n））なので、全体的なアルゴリズムは= &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;O（n log n）&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1d5328a5b30597cfdbb5f64814aee6e0397a6702" translate="yes" xml:space="preserve">
          <source>You can think of O(1), O(n), O(logn), etc as classes or categories of growth. Some categories will take more time to do than others. These categories help give us a way of ordering the algorithm performance. Some grown faster as the input n grows. The following table demonstrates said growth numerically. In the table below think of log(n) as the ceiling of log_2.</source>
          <target state="translated">O(1)、O(n)、O(logn)などを成長のクラスやカテゴリとして考えることができます。いくつかのカテゴリは、他のカテゴリよりも時間がかかります。これらのカテゴリは、アルゴリズムの性能を順序付ける方法を提供するのに役立ちます。いくつかは、入力nが成長するにつれて速く成長します。次の表は、成長が数値的に示されています。下の表では、log(n)をlog_2の上限と考えてください。</target>
        </trans-unit>
        <trans-unit id="5c973715b1aaecc205af6056a3e8561731036021" translate="yes" xml:space="preserve">
          <source>You can think of O(log N) intuitively by saying the time is proportional to the number of digits in N.</source>
          <target state="translated">O(log N)は、時間はNの桁数に比例すると直感的に考えることができます。</target>
        </trans-unit>
        <trans-unit id="be063b2f6f59fd659351560845cdcbd0fce725b1" translate="yes" xml:space="preserve">
          <source>You will eventually come across a linearithmic time &lt;strong&gt;O(n log(n))&lt;/strong&gt; algorithm. The rule of thumb above applies again, but this time the logarithmic function has to run n times e.g. reducing the size of a list &lt;strong&gt;n times&lt;/strong&gt;, which occurs in algorithms like a mergesort.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最終的には線形時間&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;O（n log（n））&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アルゴリズムに&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;出くわし&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;経験則では、上記再び適用されますが、この時間は、対数関数が実行する必要がありますn回はリストのサイズ縮小例えば&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;n回&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;マージソートのようなアルゴリズムで発生し、。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e633fb53f72a241fd99a62bdb2e5fec14d3b99f0" translate="yes" xml:space="preserve">
          <source>from &lt;a href=&quot;http://www.geeksforgeeks.org/write-a-c-program-to-calculate-powxn/&quot;&gt;http://www.geeksforgeeks.org/write-a-c-program-to-calculate-powxn/&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;a href=&quot;http://www.geeksforgeeks.org/write-a-c-program-to-calculate-powxn/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http://www.geeksforgeeks.org/write-ac-program-to-calculate-powxn/&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;から&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f561a474d88946ed4c679c84b7d0fa00aa1daefa" translate="yes" xml:space="preserve">
          <source>only one will need to be chosen.</source>
          <target state="translated">だけを選択する必要があります。</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">or</target>
        </trans-unit>
        <trans-unit id="949b2d332a8532ba60eb0f9fdaaa648e4f5e90da" translate="yes" xml:space="preserve">
          <source>the choice of the next element on which to perform some action is one of several possibilities, and</source>
          <target state="translated">次の要素の選択は,いくつかの可能性のうちの1つであり</target>
        </trans-unit>
        <trans-unit id="810680965d466ce9e27c217b0e6ef1c0fc7ac62f" translate="yes" xml:space="preserve">
          <source>the elements on which the action is performed are digits of n</source>
          <target state="translated">アクションが実行される要素はnの桁である。</target>
        </trans-unit>
        <trans-unit id="7c3255662cb9361125a26cad0c44f18afbdc1a9e" translate="yes" xml:space="preserve">
          <source>time(n) = a + b&lt;em&gt;log(n) + c&lt;/em&gt;n + d&lt;em&gt;n&lt;/em&gt;n</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;time（n）= a + b &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;log（n）+ c&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; n + d &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;n&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; n&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3121a265ec660806dc7016bca8595689a539a80d" translate="yes" xml:space="preserve">
          <source>traversing the whole tree ~ O(M^d) = O(n)</source>
          <target state="translated">木全体を横断する〜O(M^d)=O(n)</target>
        </trans-unit>
        <trans-unit id="601d76bcf9259b0951e3bbabeb31e37d99f1830f" translate="yes" xml:space="preserve">
          <source>​It is &lt;code&gt;O(log n)&lt;/code&gt; when we do divide and conquer type of algorithms e.g binary search. Another example is quick sort where each time we divide the array into two parts and each time it takes &lt;code&gt;O(N)&lt;/code&gt; time to find a pivot element. Hence it  &lt;code&gt;N O(log N)&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;二分探索などのアルゴリズムを分割して征服する場合&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;/font&gt; &lt;code&gt;O(log n)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;もう1つの例は、配列を2つの部分に分割するたび、および&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ピボット要素を見つける&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;のに&lt;/font&gt;&lt;/font&gt; &lt;code&gt;O(N)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;時間&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;かかるたびのクイックソート&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;N O(log N)&lt;/code&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
