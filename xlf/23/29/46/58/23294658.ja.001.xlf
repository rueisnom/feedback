<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/23294658">
    <body>
      <group id="23294658">
        <trans-unit id="06ca039b52be5a1d268ca668352dabcdcac7714f" translate="yes" xml:space="preserve">
          <source>(or whatever key you use) without entering a value, will give you a default one:</source>
          <target state="translated">(または使用しているキー)に値を入力せずに、デフォルトの値を入力すると、デフォルトの値が表示されます。</target>
        </trans-unit>
        <trans-unit id="3818fa2c7168221aa2ac832f0694486420841b62" translate="yes" xml:space="preserve">
          <source>1.1. If &lt;code&gt;age&lt;/code&gt; is &lt;code&gt;float&lt;/code&gt; or &lt;code&gt;int&lt;/code&gt; data type:</source>
          <target state="translated">1.1。 &lt;code&gt;age&lt;/code&gt; が &lt;code&gt;float&lt;/code&gt; または &lt;code&gt;int&lt;/code&gt; データ型の場合：</target>
        </trans-unit>
        <trans-unit id="f4bd810f7644fbae9c8a0173f5452dd5e4378ced" translate="yes" xml:space="preserve">
          <source>1.2. If &lt;code&gt;age&lt;/code&gt; is not &lt;code&gt;float&lt;/code&gt; or &lt;code&gt;int&lt;/code&gt; data type, then ask user to input her/his age again (&lt;em&gt;i.e.&lt;/em&gt; go back to step 1.)</source>
          <target state="translated">1.2。 &lt;code&gt;age&lt;/code&gt; が &lt;code&gt;float&lt;/code&gt; または &lt;code&gt;int&lt;/code&gt; データ型でない場合は、ユーザーに年齢をもう一度入力するように依頼します（ &lt;em&gt;つまり&lt;/em&gt; 、ステップ1に戻ります）。</target>
        </trans-unit>
        <trans-unit id="1543f80f7b5695fd61c0cf06ffa1de03a72d706b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://docs.python.org/howto/functional.html&quot;&gt;Functional approach&lt;/a&gt; or &quot;&lt;em&gt;look mum no loops!&lt;/em&gt;&quot;:</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/howto/functional.html&quot;&gt;機能的アプローチ、&lt;/a&gt;または「 &lt;em&gt;ループはループしない&lt;/em&gt; 」：</target>
        </trans-unit>
        <trans-unit id="b33d59b9621b02877abf6fe0e4f424749ef7c6c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;read_single_keypress()&lt;/code&gt; courtesy &lt;a href=&quot;https://stackoverflow.com/a/6599441/4532996&quot;&gt;https://stackoverflow.com/a/6599441/4532996&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;read_single_keypress()&lt;/code&gt; 礼儀&lt;a href=&quot;https://stackoverflow.com/a/6599441/4532996&quot;&gt;https://stackoverflow.com/a/6599441/4532996&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d7ecf19d9ae6af7c153718683f6f215fcb803e9a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;replies = map(input, prompts)&lt;/code&gt; - here &lt;a href=&quot;https://docs.python.org/howto/functional.html#built-in-functions&quot;&gt;&lt;code&gt;map&lt;/code&gt;&lt;/a&gt; will apply all the &lt;code&gt;prompts&lt;/code&gt; strings from the previous step to the &lt;a href=&quot;https://docs.python.org/library/functions.html#input&quot;&gt;&lt;code&gt;input&lt;/code&gt;&lt;/a&gt; function. E.g.:</source>
          <target state="translated">&lt;code&gt;replies = map(input, prompts)&lt;/code&gt; -ここで&lt;a href=&quot;https://docs.python.org/howto/functional.html#built-in-functions&quot;&gt; &lt;code&gt;map&lt;/code&gt; &lt;/a&gt;は、前のステップのすべての &lt;code&gt;prompts&lt;/code&gt; 文字列を&lt;a href=&quot;https://docs.python.org/library/functions.html#input&quot;&gt; &lt;code&gt;input&lt;/code&gt; &lt;/a&gt;関数に適用します。 例えば：</target>
        </trans-unit>
        <trans-unit id="853e4b1f776d315f087080450fcb300fd94c71ca" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Click&lt;/em&gt; is a library for command-line interfaces and it provides functionality for asking a valid response from a user.</source>
          <target state="translated">&lt;em&gt;Click&lt;/em&gt;はコマンドラインインターフェイスのライブラリであり、ユーザーに有効な応答を求める機能を提供します。</target>
        </trans-unit>
        <trans-unit id="9690a5115331c7c51a617a95207de02bf99c7f9d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Explanation of above code:&lt;/strong&gt;
In order for a valid age,it should be positive and should not be more than normal physical age,say for example maximum age is 120.</source>
          <target state="translated">&lt;strong&gt;上記のコードの説明：&lt;/strong&gt;有効な年齢の場合、正である必要があり、通常の物理的年齢を超えてはなりません。たとえば、最大年齢は120です。</target>
        </trans-unit>
        <trans-unit id="a4f55a896addd022f6ae796b1a4820f81035d86a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Membership testing:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;メンバーシップテスト：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a96268eba187fbf6be4877438fe2076252bb1b8b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Numbers comparison:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;数値比較：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7853abb571146c43488e9f2a1fb31a1e7f9d8d07" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Path existance:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;パスの存在：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="075a5abdb5f8dedaf440d2f9d19cd1cfb769b499" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;String methods:&lt;/strong&gt; Of course you can use other string methods like &lt;a href=&quot;https://docs.python.org/library/stdtypes.html#str.isalpha&quot;&gt;&lt;code&gt;str.isalpha&lt;/code&gt;&lt;/a&gt; to get only alphabetic strings, or &lt;a href=&quot;https://docs.python.org/library/stdtypes.html#str.isupper&quot;&gt;&lt;code&gt;str.isupper&lt;/code&gt;&lt;/a&gt; to get only uppercase. See &lt;a href=&quot;https://docs.python.org/library/stdtypes.html#string-methods&quot;&gt;docs&lt;/a&gt; for the full list.</source>
          <target state="translated">&lt;strong&gt;文字列メソッド：&lt;/strong&gt;もちろん、 &lt;a href=&quot;https://docs.python.org/library/stdtypes.html#str.isalpha&quot;&gt; &lt;code&gt;str.isalpha&lt;/code&gt; &lt;/a&gt;などの他の文字列メソッドを使用してアルファベット文字列のみを取得したり、 &lt;a href=&quot;https://docs.python.org/library/stdtypes.html#str.isupper&quot;&gt; &lt;code&gt;str.isupper&lt;/code&gt; &lt;/a&gt;を使用して大文字のみを取得したりできます。 完全なリストについては、 &lt;a href=&quot;https://docs.python.org/library/stdtypes.html#string-methods&quot;&gt;ドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="7343e4cba121007208ca736981c8fab7a1466615" translate="yes" xml:space="preserve">
          <source>And to get only the first digits-only string we use &lt;a href=&quot;https://docs.python.org/library/functions.html#next&quot;&gt;&lt;code&gt;next&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">そして、最初の数字のみの文字列のみを取得するには、 &lt;a href=&quot;https://docs.python.org/library/functions.html#next&quot;&gt; &lt;code&gt;next&lt;/code&gt; &lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="f0f9aafac7facbd2cde605e88aa01219f87ab9b5" translate="yes" xml:space="preserve">
          <source>Ask user to input her/his &lt;code&gt;age&lt;/code&gt;.</source>
          <target state="translated">ユーザーに &lt;code&gt;age&lt;/code&gt; を入力してもらいます。</target>
        </trans-unit>
        <trans-unit id="c95fb909de9b09a0171cdf7fa5d483a13e565dc6" translate="yes" xml:space="preserve">
          <source>Asking the user for input until they give a valid response</source>
          <target state="translated">有効な回答が得られるまでユーザーに入力を求める</target>
        </trans-unit>
        <trans-unit id="a07e9b13f26a757687582ae149ea32bcd53a502f" translate="yes" xml:space="preserve">
          <source>Both of the above techniques can be combined into one loop.</source>
          <target state="translated">上記のテクニックはどちらも1つのループにまとめることができます。</target>
        </trans-unit>
        <trans-unit id="e5e68a830f2d3f00ce63d0cd58dc813dcb732ea3" translate="yes" xml:space="preserve">
          <source>Building upon Daniel Q's and Patrick Artner's excellent suggestions,
here is an even more generalized solution.</source>
          <target state="translated">Daniel Q氏とPatrick Artner氏の優れた提案をもとに、より一般化したソリューションをご紹介します。</target>
        </trans-unit>
        <trans-unit id="4b645b0a5d3c765b66c61e4d179e51f7b2984463" translate="yes" xml:space="preserve">
          <source>But in the case when there are many rules, it's better to implement a function performing a &lt;a href=&quot;https://en.wikipedia.org/wiki/Logical_conjunction&quot;&gt;logical conjunction&lt;/a&gt;. In the following example I will use a ready one from &lt;a href=&quot;https://lz.readthedocs.io/en/latest/lz.html#lz.logical.conjoin&quot;&gt;here&lt;/a&gt;:</source>
          <target state="translated">ただし、多くのルールがある場合は、 &lt;a href=&quot;https://en.wikipedia.org/wiki/Logical_conjunction&quot;&gt;論理結合&lt;/a&gt;を実行する関数を実装することをお勧めします。 次の例では、 &lt;a href=&quot;https://lz.readthedocs.io/en/latest/lz.html#lz.logical.conjoin&quot;&gt;ここ&lt;/a&gt;から既製のものを使用します 。</target>
        </trans-unit>
        <trans-unit id="0e2dbc00633189e3e9f18903c03bc9eb6849e823" translate="yes" xml:space="preserve">
          <source>But it fails if the user enters invalid data:</source>
          <target state="translated">しかし、ユーザーが無効なデータを入力すると失敗します。</target>
        </trans-unit>
        <trans-unit id="bd5134b61ca8a4e9ed4e058267db6f88d6705b30" translate="yes" xml:space="preserve">
          <source>Check if &lt;code&gt;0&amp;lt;age&amp;lt;18&lt;/code&gt;. If &lt;code&gt;0&amp;lt;age&amp;lt;18&lt;/code&gt;, print appropriate output and exit.</source>
          <target state="translated">&lt;code&gt;0&amp;lt;age&amp;lt;18&lt;/code&gt; かどうかを確認します。 &lt;code&gt;0&amp;lt;age&amp;lt;18&lt;/code&gt; 場合、適切な出力を出力して終了します。</target>
        </trans-unit>
        <trans-unit id="2653eac32b9fa268d55d8879cb9d85d28e8f85d6" translate="yes" xml:space="preserve">
          <source>Check if &lt;code&gt;age&amp;gt;=18&lt;/code&gt;. If &lt;code&gt;age&amp;gt;=18&lt;/code&gt;, print appropriate output and exit.</source>
          <target state="translated">&lt;code&gt;age&amp;gt;=18&lt;/code&gt; かどうかを確認します。 &lt;code&gt;age&amp;gt;=18&lt;/code&gt; の場合、適切な出力を印刷して終了します。</target>
        </trans-unit>
        <trans-unit id="bd50246f2ee9f9c945ebb8851f3397efa0d5eeb1" translate="yes" xml:space="preserve">
          <source>Checking if a value is within a range:</source>
          <target state="translated">値が範囲内にあるかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="44244e3a025af44c4c6db6689d08e950a6fe072f" translate="yes" xml:space="preserve">
          <source>Combining Exception Handling and Custom Validation</source>
          <target state="translated">例外処理とカスタムバリデーションの組み合わせ</target>
        </trans-unit>
        <trans-unit id="199e536fc2b9b1f0c7b8c6ec962b0779e8a6e9f9" translate="yes" xml:space="preserve">
          <source>Combining validation rules:</source>
          <target state="translated">検証ルールを組み合わせる。</target>
        </trans-unit>
        <trans-unit id="af7c97e8539fbd53e0cc2eb0cb561603aae77279" translate="yes" xml:space="preserve">
          <source>Common Pitfalls, and Why you Should Avoid Them</source>
          <target state="translated">一般的な落とし穴、そしてなぜあなたはそれらを避けるべきなのか</target>
        </trans-unit>
        <trans-unit id="b7183d64a08aa8ed12db72af8178cbcbead5abc2" translate="yes" xml:space="preserve">
          <source>Default values:</source>
          <target state="translated">デフォルト値。</target>
        </trans-unit>
        <trans-unit id="0aaad5b9b2fd041a8d716ca8c54d8c77998fcce5" translate="yes" xml:space="preserve">
          <source>Encapsulating it All in a Function</source>
          <target state="translated">すべてを関数にカプセル化する</target>
        </trans-unit>
        <trans-unit id="2b9eceb7a86a9f577ef80586c5c1d7fde9ff493d" translate="yes" xml:space="preserve">
          <source>Enter</source>
          <target state="translated">Enter</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="8dd1ae9de270d1c543c68013dae521bfb2480981" translate="yes" xml:space="preserve">
          <source>For a simple case, for example, when the program asks for age between 1 and 120, one can just add another &lt;code&gt;filter&lt;/code&gt;:</source>
          <target state="translated">単純なケースでは、たとえば、プログラムが1〜120の年齢を要求した場合、別の &lt;code&gt;filter&lt;/code&gt; 追加するだけで済みます 。</target>
        </trans-unit>
        <trans-unit id="8c4d09c4a2067372de134176f0e63aa8bed661a7" translate="yes" xml:space="preserve">
          <source>Good question! You can try the following code for this. =)</source>
          <target state="translated">良い質問ですね! 以下のコードを試してみてください。)</target>
        </trans-unit>
        <trans-unit id="ac8fd0e83c28123c3d940926041e4c6f07f92307" translate="yes" xml:space="preserve">
          <source>Here is the code.</source>
          <target state="translated">ここにコードがあります。</target>
        </trans-unit>
        <trans-unit id="b9486f6c451e79959ed90a91613b6899ffbb7098" translate="yes" xml:space="preserve">
          <source>Here one can use &lt;code&gt;pathlib&lt;/code&gt; library and its &lt;a href=&quot;https://docs.python.org/library/pathlib.html#pathlib.Path.exists&quot;&gt;&lt;code&gt;Path.exists&lt;/code&gt;&lt;/a&gt; method:</source>
          <target state="translated">ここでは、 &lt;code&gt;pathlib&lt;/code&gt; ライブラリとその&lt;a href=&quot;https://docs.python.org/library/pathlib.html#pathlib.Path.exists&quot;&gt; &lt;code&gt;Path.exists&lt;/code&gt; &lt;/a&gt;メソッドを使用できます。</target>
        </trans-unit>
        <trans-unit id="f2ee178c41397d5fb9affad4853f9d123e62befa" translate="yes" xml:space="preserve">
          <source>Here's a cleaner, more generalized solution that avoids repetitive if/else blocks: write a function that takes (Error, error prompt) pairs in a dictionary and do all your value-checking with assertions.</source>
          <target state="translated">繰り返しの ifelse ブロックを回避する、よりクリーンで一般化されたソリューションがここにあります。</target>
        </trans-unit>
        <trans-unit id="b513628479ffc0e00cf666f16ff3d3097a6c8ba7" translate="yes" xml:space="preserve">
          <source>How can I make the program ask for valid inputs instead of crashing when non-sensical data is entered?</source>
          <target state="translated">非センシカルなデータが入力されたときにクラッシュするのではなく、有効な入力を求めるようにするにはどうすればいいですか?</target>
        </trans-unit>
        <trans-unit id="addb0ea88759f602b432be14dcc631042eecacd5" translate="yes" xml:space="preserve">
          <source>How can I reject values like &lt;code&gt;-1&lt;/code&gt;, which is a valid &lt;code&gt;int&lt;/code&gt;, but nonsensical in this context?</source>
          <target state="translated">有効な &lt;code&gt;int&lt;/code&gt; ですが、このコンテキストでは無意味な &lt;code&gt;-1&lt;/code&gt; などの値を拒否するにはどうすればよいですか？</target>
        </trans-unit>
        <trans-unit id="e21860bf37328b97ebb0ddd904694c78e4a7b382" translate="yes" xml:space="preserve">
          <source>How does it work?</source>
          <target state="translated">どうやって使うのか?</target>
        </trans-unit>
        <trans-unit id="9bfdd3a1cbdee75c09efadf7fb60594b8441823a" translate="yes" xml:space="preserve">
          <source>I am writing a program that accepts an input from the user.</source>
          <target state="translated">ユーザーからの入力を受け付けるプログラムを書いています。</target>
        </trans-unit>
        <trans-unit id="a23f11ad5c1ce07676a25c9967d8842237840ad8" translate="yes" xml:space="preserve">
          <source>I opted for explicit &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;raise&lt;/code&gt; statements instead of an &lt;code&gt;assert&lt;/code&gt;,
because assertion checking may be turned off,
whereas validation should always be on to provide robustness.</source>
          <target state="translated">堅牢性を提供するために検証を常にオンにする必要があるのに対し、アサーションチェックはオフになっている可能性があるため、私は &lt;code&gt;assert&lt;/code&gt; ではなく明示的な &lt;code&gt;if&lt;/code&gt; および &lt;code&gt;raise&lt;/code&gt; ステートメントを選択しました。</target>
        </trans-unit>
        <trans-unit id="5b81585406ead66c0ecc9776a3232a31888c6567" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;age&amp;lt;=0&lt;/code&gt;, ask the user to input a valid number for age again, (&lt;em&gt;i.e.&lt;/em&gt; go back to step 1.)</source>
          <target state="translated">&lt;code&gt;age&amp;lt;=0&lt;/code&gt; 場合、ユーザーに年齢の有効な数値をもう一度入力するように依頼します（ &lt;em&gt;つまり&lt;/em&gt; 、ステップ1に戻ります）。</target>
        </trans-unit>
        <trans-unit id="ace9bfcc0d44803c1a09c0ab61d7e2f17af84af4" translate="yes" xml:space="preserve">
          <source>If you don't want to torture a user by asking him something an infinite number of times, you can specify a limit in a call of &lt;a href=&quot;https://docs.python.org/library/itertools.html#itertools.repeat&quot;&gt;&lt;code&gt;itertools.repeat&lt;/code&gt;&lt;/a&gt;. This can be combined with providing a default value to the &lt;a href=&quot;https://docs.python.org/library/functions.html#next&quot;&gt;&lt;code&gt;next&lt;/code&gt;&lt;/a&gt; function:</source>
          <target state="translated">ユーザーに無限に何かを尋ねることでユーザーを拷問したくない場合は、 &lt;a href=&quot;https://docs.python.org/library/itertools.html#itertools.repeat&quot;&gt; &lt;code&gt;itertools.repeat&lt;/code&gt; の&lt;/a&gt;呼び出しで制限を指定できます。 これは、 &lt;a href=&quot;https://docs.python.org/library/functions.html#next&quot;&gt; &lt;code&gt;next&lt;/code&gt; &lt;/a&gt;関数にデフォルト値を提供することと組み合わせることができます。</target>
        </trans-unit>
        <trans-unit id="aea4a7fd400297d8ce106e24ab2d8096ea950754" translate="yes" xml:space="preserve">
          <source>If you need to ask your user for a lot of different values, it might be useful to put this code in a function, so you don't have to retype it every time.</source>
          <target state="translated">ユーザーに多くの異なる値を求める必要がある場合は、このコードを関数の中に入れておくと便利です。</target>
        </trans-unit>
        <trans-unit id="c4a119e157648d5a45a867abca16ab0d4e8db745" translate="yes" xml:space="preserve">
          <source>If you want to reject values that Python can successfully parse, you can add your own validation logic.</source>
          <target state="translated">Pythonが正常にパースできる値を拒否したい場合は、独自の検証ロジックを追加することができます。</target>
        </trans-unit>
        <trans-unit id="8aa88cbb714761a2ce228ad57bb7944a6567235e" translate="yes" xml:space="preserve">
          <source>If you've just learned about recursion, you might be tempted to use it in &lt;code&gt;get_non_negative_int&lt;/code&gt; so you can dispose of the while loop.</source>
          <target state="translated">再帰について学習したばかりの場合は、 &lt;code&gt;get_non_negative_int&lt;/code&gt; で再帰を使用して、whileループを破棄できるようにしたくなるかもしれません。</target>
        </trans-unit>
        <trans-unit id="c3f8fa0d463c7455e7d3db5328813076dc355aa4" translate="yes" xml:space="preserve">
          <source>Implementing Your Own Validation Rules</source>
          <target state="translated">独自の検証ルールの実装</target>
        </trans-unit>
        <trans-unit id="f65489bc1c361348ad9cd63566b532fbd9e581f5" translate="yes" xml:space="preserve">
          <source>In the case when you have many functions to use for preprocessing, it might be easier to use a function performing a &lt;a href=&quot;https://en.wikipedia.org/wiki/Function_composition_(computer_science)&quot;&gt;function composition&lt;/a&gt;. For example, using the one from &lt;a href=&quot;https://lz.readthedocs.io/en/latest/lz.html#lz.functional.compose&quot;&gt;here&lt;/a&gt;:</source>
          <target state="translated">前処理に使用する関数が多い場合は、 &lt;a href=&quot;https://en.wikipedia.org/wiki/Function_composition_(computer_science)&quot;&gt;関数合成を&lt;/a&gt;行う関数を使用した方が簡単な場合があります。 たとえば、 &lt;a href=&quot;https://lz.readthedocs.io/en/latest/lz.html#lz.functional.compose&quot;&gt;ここ&lt;/a&gt;からのものを使用します ：</target>
        </trans-unit>
        <trans-unit id="1a807177a047eb2ee56870f0cf1fe6a4b83332f5" translate="yes" xml:space="preserve">
          <source>In this case, simply pressing</source>
          <target state="translated">この場合、単純に</target>
        </trans-unit>
        <trans-unit id="e1420b6b2f9528d9a3603b392edfc6511f3d7260" translate="yes" xml:space="preserve">
          <source>Instead of crashing, I would like the program to ask for the input again. Like this:</source>
          <target state="translated">クラッシュするのではなく、もう一度入力をお願いするプログラムにしたいと思います。こんな感じで。</target>
        </trans-unit>
        <trans-unit id="9edcffff4461c9083fbff857f8dcee0f0769cbd4" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Integer</target>
        </trans-unit>
        <trans-unit id="42095caa1372551faaa10f77df1ccb06d4a7fb67" translate="yes" xml:space="preserve">
          <source>It might look attractive initially because it's shorter than the &lt;code&gt;while True&lt;/code&gt; method, but it violates the &lt;a href=&quot;http://en.wikipedia.org/wiki/Don%27t_repeat_yourself&quot;&gt;Don't Repeat Yourself&lt;/a&gt; principle of software development. This increases the likelihood of bugs in your system. What if you want to backport to 2.7 by changing &lt;code&gt;input&lt;/code&gt; to &lt;code&gt;raw_input&lt;/code&gt;, but accidentally change only the first &lt;code&gt;input&lt;/code&gt; above? It's a &lt;code&gt;SyntaxError&lt;/code&gt; just waiting to happen.</source>
          <target state="translated">&lt;code&gt;while True&lt;/code&gt; メソッドよりも短いため、最初は魅力的に見えるかもしれませんが、ソフトウェア開発の原則を&lt;a href=&quot;http://en.wikipedia.org/wiki/Don%27t_repeat_yourself&quot;&gt;繰り返さない&lt;/a&gt;ことに違反しています。 これにより、システムにバグが発生する可能性が高くなります。 &lt;code&gt;input&lt;/code&gt; を &lt;code&gt;raw_input&lt;/code&gt; に変更して2.7にバックポートしたいが、誤って上の最初の &lt;code&gt;input&lt;/code&gt; のみを変更した場合はどうなりますか？ これは、発生するのを待っているだけの &lt;code&gt;SyntaxError&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="1b7b99d04df48522a25d875d29bee1c7426a4d09" translate="yes" xml:space="preserve">
          <source>Limiting number of tries:</source>
          <target state="translated">トライ数を制限する。</target>
        </trans-unit>
        <trans-unit id="45b3b669489dc4f008395f3b58f703ea613e9627" translate="yes" xml:space="preserve">
          <source>Membership testing:</source>
          <target state="translated">メンバーシップテスト。</target>
        </trans-unit>
        <trans-unit id="14d0eb8eab3895eda3cd7e4e43b4ff127484b588" translate="yes" xml:space="preserve">
          <source>Note how it converted the string value to a float automatically.</source>
          <target state="translated">文字列の値を自動的にfloatに変換したことに注目してください。</target>
        </trans-unit>
        <trans-unit id="7131c43c2e37baf69698fa952778088d97499866" translate="yes" xml:space="preserve">
          <source>Note that the nature of this implementation is it closes stdin as soon as something that isn't a digit is read. I didn't hit enter after &lt;code&gt;a&lt;/code&gt;, but I needed to after the numbers.</source>
          <target state="translated">この実装の性質は、数字ではない何かが読み取られるとすぐにstdinを閉じることに注意してください。 の後でEnterキーを押すことはしませんでしたが、数字の後に入力する必要がありました。</target>
        </trans-unit>
        <trans-unit id="062bd15fc2602a4730fe9add611cc67f2e699d25" translate="yes" xml:space="preserve">
          <source>Note: Read comments top of code.</source>
          <target state="translated">注:コードの先頭にあるコメントを読んでください。</target>
        </trans-unit>
        <trans-unit id="e9ee53723b1bf7557fe1696a3094ddbd80a09948" translate="yes" xml:space="preserve">
          <source>Once the valid input is entered, we perform a check (using nested if-else statement) whether the age is &amp;gt;=18 or vice versa and print a message whether the user is eligible to vote</source>
          <target state="translated">有効な入力が入力されると、年齢が18以上であるかどうか（ネストされたif-elseステートメントを使用して）チェックが実行され、ユーザーが投票する資格があるかどうかのメッセージが出力されます</target>
        </trans-unit>
        <trans-unit id="c10517ee43c66b1bd6454024216ea2d04a7ea020" translate="yes" xml:space="preserve">
          <source>One more solution for using input validation using a customized &lt;code&gt;ValidationError&lt;/code&gt; and a (optional) range validation for integer inputs:</source>
          <target state="translated">カスタマイズされた &lt;code&gt;ValidationError&lt;/code&gt; を使用した入力検証と整数入力の（オプションの）範囲検証を使用するためのもう1つのソリューション：</target>
        </trans-unit>
        <trans-unit id="58ab4d8c70604c5740aafb47ce7b995bd346f944" translate="yes" xml:space="preserve">
          <source>Or, if you don't like using dunder methods (dunder = double-underscore), you can always define your own function, or use the ones from the &lt;a href=&quot;https://docs.python.org/library/operator.html&quot;&gt;&lt;code&gt;operator&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">または、dunderメソッド（dunder = double-underscore）を使用したくない場合は、いつでも独自の関数を定義するか、 &lt;a href=&quot;https://docs.python.org/library/operator.html&quot;&gt; &lt;code&gt;operator&lt;/code&gt; &lt;/a&gt;モジュールの関数を使用できます。</target>
        </trans-unit>
        <trans-unit id="24e76a0c2b09dfe1d6b093d6c881f16e39dc5cef" translate="yes" xml:space="preserve">
          <source>Or, to answer the original question:</source>
          <target state="translated">あるいは、元の質問に答えるために</target>
        </trans-unit>
        <trans-unit id="0ac3c9882a4b70189ad1bfa57e91f5a096b4d423" translate="yes" xml:space="preserve">
          <source>Other examples:</source>
          <target state="translated">その他の例。</target>
        </trans-unit>
        <trans-unit id="2dcab4741f9bbe43708bc513d43f2458d79b138f" translate="yes" xml:space="preserve">
          <source>Other validation rules:</source>
          <target state="translated">その他の検証ルール。</target>
        </trans-unit>
        <trans-unit id="f3c8c95c5e534bcd2ea0034a0d83177efa6923f4" translate="yes" xml:space="preserve">
          <source>Output:</source>
          <target state="translated">Output:</target>
        </trans-unit>
        <trans-unit id="1c05d4f66e3072be43dc1137638140dfe5f32eae" translate="yes" xml:space="preserve">
          <source>P.S. This code is for python 3.x.</source>
          <target state="translated">追伸:このコードは python 3.x 用です。</target>
        </trans-unit>
        <trans-unit id="98ff22a542694c01a1b0798081723b4f19dc1b8f" translate="yes" xml:space="preserve">
          <source>Password confirmation:</source>
          <target state="translated">パスワードの確認。</target>
        </trans-unit>
        <trans-unit id="28f8782852230c31834d2c2f605fd51cf6e49727" translate="yes" xml:space="preserve">
          <source>Persistent user input using &lt;strong&gt;recursive function&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;再帰関数&lt;/strong&gt;を使用した永続的なユーザー入力：</target>
        </trans-unit>
        <trans-unit id="e5ce4ac2d580ca0424bec105c383eaebae30b6a9" translate="yes" xml:space="preserve">
          <source>Preprocessing input data:</source>
          <target state="translated">入力データの前処理を行います。</target>
        </trans-unit>
        <trans-unit id="77b515b9d004e2d4a3d253d42b3f58bdf2425286" translate="yes" xml:space="preserve">
          <source>Putting It All Together</source>
          <target state="translated">すべてをまとめる</target>
        </trans-unit>
        <trans-unit id="14b43e8f5c6320bf62922fbff8513a46c1938864" translate="yes" xml:space="preserve">
          <source>Reading and writing files can be done by &lt;code&gt;click.File&lt;/code&gt;:</source>
          <target state="translated">ファイルの読み取りと書き込みは、 &lt;code&gt;click.File&lt;/code&gt; で実行できます。</target>
        </trans-unit>
        <trans-unit id="afb3c5e5525b9dce37b04de7a04b7c9b5fc2d4cb" translate="yes" xml:space="preserve">
          <source>Recursion Will Blow Your Stack</source>
          <target state="translated">再帰はあなたのスタックを吹き飛ばす</target>
        </trans-unit>
        <trans-unit id="563523c7fb9aeb90cd3ca9914f9f94d5abfe8ef0" translate="yes" xml:space="preserve">
          <source>Simple example:</source>
          <target state="translated">簡単な例です。</target>
        </trans-unit>
        <trans-unit id="82622f37f30f5d1802b2232c3e3f5756b8406bbd" translate="yes" xml:space="preserve">
          <source>So, I was messing around with something similar to this recently, and I came up with the following solution, which uses a way of getting input that rejects junk, before it's even checked in any logical way.</source>
          <target state="translated">そこで、最近これと似たようなことをいじくり回していて、次のような解決策を思いつきました。</target>
        </trans-unit>
        <trans-unit id="447068e318fc0cbd472a1becb0e047b32f09b8a7" translate="yes" xml:space="preserve">
          <source>Sometimes we don't want to reject an input if the user accidentally supplied it &lt;em&gt;IN CAPS&lt;/em&gt; or with a space in the beginning or an end of the string. To take these simple mistakes into account we can preprocess the input data by applying &lt;a href=&quot;https://docs.python.org/library/stdtypes.html#str.lower&quot;&gt;&lt;code&gt;str.lower&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/library/stdtypes.html#str.strip&quot;&gt;&lt;code&gt;str.strip&lt;/code&gt;&lt;/a&gt; methods. For example, for the case of membership testing the code will look like this:</source>
          <target state="translated">ユーザーが誤って大文字で入力した場合、または文字列の先頭または末尾にスペースを入力した場合、入力を拒否したくない場合があります。 これらの単純な間違いを考慮に入れる&lt;a href=&quot;https://docs.python.org/library/stdtypes.html#str.lower&quot;&gt; &lt;code&gt;str.lower&lt;/code&gt; &lt;/a&gt; 、 &lt;a href=&quot;https://docs.python.org/library/stdtypes.html#str.strip&quot;&gt; &lt;code&gt;str.strip&lt;/code&gt; &lt;/a&gt;メソッドとstr.stripメソッドを適用して入力データを前処理できます。 たとえば、メンバーシップテストの場合、コードは次のようになります。</target>
        </trans-unit>
        <trans-unit id="3df63b7acb0522da685dad5fe84b81fdd7b25264" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="translated">String</target>
        </trans-unit>
        <trans-unit id="6cfe19b1a292f94eb1f8dbf0690abf636dd37d37" translate="yes" xml:space="preserve">
          <source>The Redundant Use of Redundant &lt;code&gt;input&lt;/code&gt; Statements</source>
          <target state="translated">冗長な &lt;code&gt;input&lt;/code&gt; ステートメントの冗長な使用</target>
        </trans-unit>
        <trans-unit id="7d7cc27e418d647c28671c429d05fc552a041b46" translate="yes" xml:space="preserve">
          <source>The program works as expected as long as the the user enters meaningful data.</source>
          <target state="translated">ユーザーが意味のあるデータを入力する限り、プログラムは期待通りに動作します。</target>
        </trans-unit>
        <trans-unit id="ee1423d042019ace0669b0816607735161e11198" translate="yes" xml:space="preserve">
          <source>The simple solution would be:</source>
          <target state="translated">単純な解決策としては</target>
        </trans-unit>
        <trans-unit id="6666e163c2f2a7676e17981407484977fa7c8959" translate="yes" xml:space="preserve">
          <source>The simplest way to accomplish this would be to put the &lt;code&gt;input&lt;/code&gt; method in a while loop. Use &lt;a href=&quot;https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops&quot;&gt;&lt;code&gt;continue&lt;/code&gt;&lt;/a&gt; when you get bad input, and &lt;code&gt;break&lt;/code&gt; out of the loop when you're satisfied.</source>
          <target state="translated">これを行う最も簡単な方法は、 &lt;code&gt;input&lt;/code&gt; メソッドをwhileループに入れることです。 入力に問題&lt;a href=&quot;https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops&quot;&gt; &lt;code&gt;continue&lt;/code&gt; &lt;/a&gt;場合はcontinueを使用し 、問題がなければループを抜けます。</target>
        </trans-unit>
        <trans-unit id="83b5a3f65009100605bf355439a34b57d45cdba3" translate="yes" xml:space="preserve">
          <source>The var variable is just so that if the user enters a string instead of a integer the program wont return &quot;You are not able to vote in the United States.&quot;</source>
          <target state="translated">var変数は、ユーザーが整数ではなく文字列を入力した場合、プログラムが &quot;You are not able to vote in the United States.&quot;を返さないようにするためのものです。</target>
        </trans-unit>
        <trans-unit id="72b0f50405e094f9ddb945c6e83be15b30ef9b7e" translate="yes" xml:space="preserve">
          <source>Then we can ask user for age and if age input is negative or more than 120,we consider it invalid input and ask the user to try again.</source>
          <target state="translated">そして、ユーザーに年齢を尋ねることができ、年齢の入力が負または120以上であれば、それを無効な入力とみなし、ユーザーに再試行を求めることができます。</target>
        </trans-unit>
        <trans-unit id="9c8501991a64d579db4ba49e291b977238dbac24" translate="yes" xml:space="preserve">
          <source>There are different &lt;a href=&quot;https://click.palletsprojects.com/en/7.x/parameters/#parameter-types&quot;&gt;custom types&lt;/a&gt; provided. To get a number in a specific range we can use &lt;code&gt;IntRange&lt;/code&gt;:</source>
          <target state="translated">提供されるさまざまな&lt;a href=&quot;https://click.palletsprojects.com/en/7.x/parameters/#parameter-types&quot;&gt;カスタムタイプ&lt;/a&gt;があります。 特定の範囲の数値を取得するには、 &lt;code&gt;IntRange&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="15ac60c2b161f8ee4c789f53513c7eded24945e8" translate="yes" xml:space="preserve">
          <source>There are several different ways to perform it. One of them is by using &lt;a href=&quot;https://docs.python.org/reference/datamodel.html#object.__contains__&quot;&gt;&lt;code&gt;__contains__&lt;/code&gt;&lt;/a&gt; method:</source>
          <target state="translated">それを実行するには、いくつかの異なる方法があります。 それらの1つは&lt;a href=&quot;https://docs.python.org/reference/datamodel.html#object.__contains__&quot;&gt; &lt;code&gt;__contains__&lt;/code&gt; &lt;/a&gt;メソッドを使用することです：</target>
        </trans-unit>
        <trans-unit id="a0841c6a7032de42781368f82500d8217ffd5677" translate="yes" xml:space="preserve">
          <source>There are useful comparison methods which we can use here. For example, for &lt;a href=&quot;https://docs.python.org/reference/datamodel.html#object.__lt__&quot;&gt;&lt;code&gt;__lt__&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;&amp;lt;&lt;/code&gt;):</source>
          <target state="translated">ここで使用できる便利な比較方法があります。 たとえば、 &lt;a href=&quot;https://docs.python.org/reference/datamodel.html#object.__lt__&quot;&gt; &lt;code&gt;__lt__&lt;/code&gt; &lt;/a&gt; （ &lt;code&gt;&amp;lt;&lt;/code&gt; ）の場合：</target>
        </trans-unit>
        <trans-unit id="347225df49657cf13b0ed68a51c1c7d5a3737681" translate="yes" xml:space="preserve">
          <source>This appears to work fine most of the time, but if the user enters invalid data enough times, the script will terminate with a &lt;code&gt;RuntimeError: maximum recursion depth exceeded&lt;/code&gt;. You may think &quot;no fool would make 1000 mistakes in a row&quot;, but you're underestimating the ingenuity of fools!</source>
          <target state="translated">これはほとんどの場合正常に機能するように見えますが、ユーザーが無効なデータを何度も入力すると、スクリプトは &lt;code&gt;RuntimeError: maximum recursion depth exceeded&lt;/code&gt; 終了します。 あなたは「愚か者が連続して1000の間違いを犯すことはない」と思うかもしれませんが、愚か者の独創性を過小評価しています！</target>
        </trans-unit>
        <trans-unit id="f5d125705cdf58dc7a885039f35c323cf8746226" translate="yes" xml:space="preserve">
          <source>This code uses &lt;a href=&quot;https://docs.python.org/3/library/ast.html&quot;&gt;ast.literal_eval()&lt;/a&gt; to &lt;strong&gt;find the data type of the input&lt;/strong&gt; (&lt;code&gt;age&lt;/code&gt;). Then it follows the following algorithm:</source>
          <target state="translated">このコードは&lt;a href=&quot;https://docs.python.org/3/library/ast.html&quot;&gt;ast.literal_eval（）&lt;/a&gt;を使用して&lt;strong&gt;、入力のデータ型&lt;/strong&gt; （ &lt;code&gt;age&lt;/code&gt; ）を&lt;strong&gt;検索します&lt;/strong&gt; 。 次に、次のアルゴリズムに従います。</target>
        </trans-unit>
        <trans-unit id="a11946bf2b62254cfc72241bf4fd047f618144ae" translate="yes" xml:space="preserve">
          <source>This combination of &lt;a href=&quot;https://docs.python.org/library/itertools.html#itertools.chain&quot;&gt;&lt;code&gt;itertools.chain&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/library/itertools.html#itertools.repeat&quot;&gt;&lt;code&gt;itertools.repeat&lt;/code&gt;&lt;/a&gt; will create an iterator 
which will yield strings &lt;code&gt;&quot;Enter a number: &quot;&lt;/code&gt; once, and &lt;code&gt;&quot;Not a number! Try again: &quot;&lt;/code&gt; an infinite number of times:</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/library/itertools.html#itertools.chain&quot;&gt; &lt;code&gt;itertools.chain&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;https://docs.python.org/library/itertools.html#itertools.repeat&quot;&gt; &lt;code&gt;itertools.repeat&lt;/code&gt; の&lt;/a&gt;この組み合わせにより、文字列 &lt;code&gt;&quot;Enter a number: &quot;&lt;/code&gt; と &lt;code&gt;&quot;Not a number! Try again: &quot;&lt;/code&gt; を無限に繰り返すイテレータが作成されます：</target>
        </trans-unit>
        <trans-unit id="420409224aa60a02c210b11bf9b505f77aca1d12" translate="yes" xml:space="preserve">
          <source>This may be used to get different kinds of input,
with different validation conditions.
For example:</source>
          <target state="translated">これは、異なる検証条件で異なる種類の入力を取得するために使用される場合があります。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="034706060061fbab900d658521b10862c22c54b7" translate="yes" xml:space="preserve">
          <source>This method works but is generally considered poor style:</source>
          <target state="translated">この方法は効果がありますが、一般的にはスタイルが悪いとされています。</target>
        </trans-unit>
        <trans-unit id="050423c285f77c6944a1c62a612b68ca61666d6b" translate="yes" xml:space="preserve">
          <source>This will be an infinite loo and you would be asked to enter the age, indefinitely.</source>
          <target state="translated">これでは無限のトイレになってしまい、無期限に、時代に入ってくださいと言われてしまいます。</target>
        </trans-unit>
        <trans-unit id="2d7ed40d1c68685fcffe5200072c4f9b1c5285eb" translate="yes" xml:space="preserve">
          <source>This would result in the following:</source>
          <target state="translated">その結果、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="12a319a58097d326f1bca95ba14ca02c91daac29" translate="yes" xml:space="preserve">
          <source>Though the accepted answer is amazing. I would also like to share a quick hack for this problem. (This takes care of the negative age problem as well.)</source>
          <target state="translated">受け入れられた答えは素晴らしいですが。この問題を解決するための簡単なハックを紹介したいと思います。(これは負の年齢の問題にも対応しています)</target>
        </trans-unit>
        <trans-unit id="a3955912a7edfae39df6ab252ef981b5a5180180" translate="yes" xml:space="preserve">
          <source>Try this one:-</source>
          <target state="translated">これを試してみてください。</target>
        </trans-unit>
        <trans-unit id="2a6af9923bd8a38732fd0ed5acbf9aa3b54bf73c" translate="yes" xml:space="preserve">
          <source>Unfortunately, if someone needs a custom message for each failed case, then, I'm afraid, there is no &lt;em&gt;pretty&lt;/em&gt; functional way. Or, at least, I couldn't find one.</source>
          <target state="translated">残念ながら、失敗したケースごとにカスタムメッセージが必要な場合、恐らく、 &lt;em&gt;かなり&lt;/em&gt;機能的な方法はありません。 または、少なくとも、私はそれを見つけることができませんでした。</target>
        </trans-unit>
        <trans-unit id="861a0e430ffac5e4ae6e11b7a947f2c32d388cf4" translate="yes" xml:space="preserve">
          <source>Usage:</source>
          <target state="translated">Usage:</target>
        </trans-unit>
        <trans-unit id="45c71be0ba20b61a6611682a1739d54b0cc60544" translate="yes" xml:space="preserve">
          <source>Use &quot;while&quot; statement till user enter a true value and if the input value is not a number or it's a null value skip it and try to ask again and so on. 
In example I tried to answer truly your question. If we suppose that our age is between 1 and 150 then input value accepted, else it's a wrong value.
For terminating program, the user can use 0 key and enter it as a value.</source>
          <target state="translated">ユーザーが真の値を入力するまで &quot;while &quot;文を使用し、入力された値が数値でない場合やNULL値であった場合はそれをスキップして再度質問するなどの方法があります。例では、本当にあなたの質問に答えようとしました。年齢が1歳から150歳と仮定して、入力値を受け付け、それ以外の場合は間違った値を入力します。プログラムを終了するときは、0キーを使って値を入力することができます。</target>
        </trans-unit>
        <trans-unit id="0809f67fd32cf418102a757d5068f2d2e56411b6" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;https://docs.python.org/3/tutorial/errors.html#handling-exceptions&quot;&gt;&lt;code&gt;try&lt;/code&gt; and &lt;code&gt;except&lt;/code&gt;&lt;/a&gt; to detect when the user enters data that can't be parsed.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3/tutorial/errors.html#handling-exceptions&quot;&gt; &lt;code&gt;try&lt;/code&gt; および &lt;code&gt;except&lt;/code&gt; &lt;/a&gt;を使用して、ユーザーが解析できないデータを入力したことを検出します。</target>
        </trans-unit>
        <trans-unit id="156f5333387af7dc462273293869b127062952d5" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;https://click.palletsprojects.com/en/7.x/&quot;&gt;&lt;em&gt;Click&lt;/em&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://click.palletsprojects.com/en/7.x/&quot;&gt;&lt;em&gt;クリック&lt;/em&gt;&lt;/a&gt;を使用：</target>
        </trans-unit>
        <trans-unit id="e0827f75369eff602aaa9fd838662b90e29a3180" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;click.Choice&lt;/code&gt; type. By default this check is case-sensitive.</source>
          <target state="translated">&lt;code&gt;click.Choice&lt;/code&gt; タイプを使用します。 デフォルトでは、このチェックでは大文字と小文字が区別されます。</target>
        </trans-unit>
        <trans-unit id="a61e00d389199ef5ead52318c429ad06a181b87f" translate="yes" xml:space="preserve">
          <source>Using a &lt;code&gt;click.Path&lt;/code&gt; type we can check for existing paths and also resolve them:</source>
          <target state="translated">&lt;code&gt;click.Path&lt;/code&gt; タイプを使用して、既存のパスを確認して解決することもできます。</target>
        </trans-unit>
        <trans-unit id="2945efa2e3f0aae3e5184845124f102bc0668b41" translate="yes" xml:space="preserve">
          <source>We can also specify just one of the limits, &lt;code&gt;min&lt;/code&gt; or &lt;code&gt;max&lt;/code&gt;:</source>
          <target state="translated">また、 &lt;code&gt;min&lt;/code&gt; または &lt;code&gt;max&lt;/code&gt; のいずれかの制限を指定することもできます。</target>
        </trans-unit>
        <trans-unit id="c0e98d4de1b58350a764bf8b8300910406fc0c51" translate="yes" xml:space="preserve">
          <source>We use &lt;a href=&quot;https://docs.python.org/library/functions.html#filter&quot;&gt;&lt;code&gt;filter&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/library/stdtypes.html#str.isdigit&quot;&gt;&lt;code&gt;str.isdigit&lt;/code&gt;&lt;/a&gt; to filter out those strings that contain only digits:</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/library/functions.html#filter&quot;&gt; &lt;code&gt;filter&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;https://docs.python.org/library/stdtypes.html#str.isdigit&quot;&gt; &lt;code&gt;str.isdigit&lt;/code&gt; &lt;/a&gt;を使用して、数字のみを含む文字列を除外します。</target>
        </trans-unit>
        <trans-unit id="fd91fdc02704dc2671450a642b90e7c2a38b5333" translate="yes" xml:space="preserve">
          <source>When Your Input Might Raise an Exception</source>
          <target state="translated">あなたの入力で例外が発生する可能性がある場合</target>
        </trans-unit>
        <trans-unit id="6c5a36afe4a8297f57de0a97af9bb6dedebe5cab" translate="yes" xml:space="preserve">
          <source>While a &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;except&lt;/code&gt; block will work, a much faster and cleaner way to accomplish this task would be to use &lt;code&gt;str.isdigit()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;try&lt;/code&gt; / &lt;code&gt;except&lt;/code&gt; ブロックは機能しますが、このタスクを実行するはるかに高速でクリーンな方法は、 &lt;code&gt;str.isdigit()&lt;/code&gt; を使用することです。</target>
        </trans-unit>
        <trans-unit id="a8d5e7a863d787342a44c9040fa72abd9311619f" translate="yes" xml:space="preserve">
          <source>Why would you do a &lt;code&gt;while True&lt;/code&gt; and then break out of this loop while you can also just put your requirements in the while statement since all you want is to stop once you have the age?</source>
          <target state="translated">なぜ &lt;code&gt;while True&lt;/code&gt; を実行してからこのループを抜けるのに、要件をwhileステートメントに入力するだけでよいのですか？</target>
        </trans-unit>
        <trans-unit id="cd744395bde6d8f68047f3f83c5975cabbfaab23" translate="yes" xml:space="preserve">
          <source>With usage such as:</source>
          <target state="translated">などの使い方で。</target>
        </trans-unit>
        <trans-unit id="1000cef2fdb4b122809f57db7fef5ddfb8878cba" translate="yes" xml:space="preserve">
          <source>Working with paths and files:</source>
          <target state="translated">パスやファイルを扱うこと。</target>
        </trans-unit>
        <trans-unit id="20f555ab2e7462146bc18902994f4b96a03ad66b" translate="yes" xml:space="preserve">
          <source>You can always apply simple if-else logic and add one more &lt;code&gt;if&lt;/code&gt; logic to your code along with a &lt;code&gt;for&lt;/code&gt; loop.</source>
          <target state="translated">常に単純なif-elseロジックを適用し、 &lt;code&gt;for&lt;/code&gt; ループと共にコードに &lt;code&gt;if&lt;/code&gt; ロジックを1つ追加できます。</target>
        </trans-unit>
        <trans-unit id="75b6d7faf5682aeb441bab14ea904b330a258ada" translate="yes" xml:space="preserve">
          <source>You can extend this idea to make a very generic input function:</source>
          <target state="translated">このアイデアを拡張して、非常に汎用的な入力関数を作ることができます。</target>
        </trans-unit>
        <trans-unit id="dd8d5663f16c4dfa676e3d04e3ff3904dd55678c" translate="yes" xml:space="preserve">
          <source>You can find the complete module &lt;a href=&quot;https://github.com/catb0t/input_constrain&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/catb0t/input_constrain&quot;&gt;ここで&lt;/a&gt;完全なモジュールを見つけることができます。</target>
        </trans-unit>
        <trans-unit id="3246cd227ca329e0cc62b73a811b25d03098a598" translate="yes" xml:space="preserve">
          <source>You can make the input statement a while True loop so it repeatedly asks for the users input and then break that loop if the user enters the response you would like. And you can use try and except blocks to handle invalid responses.</source>
          <target state="translated">input文をwhile Trueループにすることで、繰り返しユーザの入力を求め、ユーザが希望する応答を入力した場合にループを解除することができます。また、無効なレスポンスを処理するために try と except ブロックを使用することができます。</target>
        </trans-unit>
        <trans-unit id="70f8952bd80dfba10cd3ab836fd2b382e547129f" translate="yes" xml:space="preserve">
          <source>You can write more general logic to allow user to enter only specific number of times, as the same use-case arises in many real-world applications.</source>
          <target state="translated">実世界の多くのアプリケーションで同じようなユースケースが発生しているので、ユーザーが特定の回数だけ入力できるようにするために、より一般的なロジックを書くことができます。</target>
        </trans-unit>
        <trans-unit id="c7ce28cdf280aeb39be90a250f35afde1be5da5f" translate="yes" xml:space="preserve">
          <source>You could merge this with the &lt;code&gt;thismany()&lt;/code&gt; function in the same module to only allow, say, three digits.</source>
          <target state="translated">これを同じモジュールの &lt;code&gt;thismany()&lt;/code&gt; 関数とマージして、 たとえば 3桁のみを許可することができます。</target>
        </trans-unit>
        <trans-unit id="ba52188347a3e754fd275290e5d3a517dc17f1ac" translate="yes" xml:space="preserve">
          <source>and finally, the question requirement:</source>
          <target state="translated">そして最後に質問の要件です。</target>
        </trans-unit>
        <trans-unit id="4d985d07d58297153e5ebb6532053c0e9f9e471d" translate="yes" xml:space="preserve">
          <source>or if you want to have a &quot;bad input&quot; message separated from an input prompt as in other answers:</source>
          <target state="translated">または、他の回答のように入力プロンプトとは別に「入力が悪い」というメッセージを表示したい場合。</target>
        </trans-unit>
        <trans-unit id="f62608e0a56bfde6bfaa8d7d6f39ac0845e09cfd" translate="yes" xml:space="preserve">
          <source>this will work since age will never have a value that will not make sense and the code follows the logic of your &quot;business process&quot;</source>
          <target state="translated">これは、年齢が意味をなさない値を持つことはありませんし、コードは &quot;ビジネスプロセス &quot;のロジックに従うので、うまくいくでしょう。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
