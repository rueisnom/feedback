<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://stackoverflow.com/questions/23294658">
    <body>
      <group id="23294658">
        <trans-unit id="06ca039b52be5a1d268ca668352dabcdcac7714f" translate="yes" xml:space="preserve">
          <source>(or whatever key you use) without entering a value, will give you a default one:</source>
          <target state="translated">값을 입력하지 않고 (또는 사용하는 키) 기본 값을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="3818fa2c7168221aa2ac832f0694486420841b62" translate="yes" xml:space="preserve">
          <source>1.1. If &lt;code&gt;age&lt;/code&gt; is &lt;code&gt;float&lt;/code&gt; or &lt;code&gt;int&lt;/code&gt; data type:</source>
          <target state="translated">1.1. &lt;code&gt;age&lt;/code&gt; 가 &lt;code&gt;float&lt;/code&gt; 또는 &lt;code&gt;int&lt;/code&gt; 데이터 유형 인 경우 :</target>
        </trans-unit>
        <trans-unit id="f4bd810f7644fbae9c8a0173f5452dd5e4378ced" translate="yes" xml:space="preserve">
          <source>1.2. If &lt;code&gt;age&lt;/code&gt; is not &lt;code&gt;float&lt;/code&gt; or &lt;code&gt;int&lt;/code&gt; data type, then ask user to input her/his age again (&lt;em&gt;i.e.&lt;/em&gt; go back to step 1.)</source>
          <target state="translated">1.2. &lt;code&gt;age&lt;/code&gt; 이 &lt;code&gt;float&lt;/code&gt; 또는 &lt;code&gt;int&lt;/code&gt; 데이터 유형이 아닌 경우 사용자에게 연령을 다시 입력하도록 요청하십시오 ( &lt;em&gt;즉,&lt;/em&gt; 1 단계로 돌아가십시오).</target>
        </trans-unit>
        <trans-unit id="1543f80f7b5695fd61c0cf06ffa1de03a72d706b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://docs.python.org/howto/functional.html&quot;&gt;Functional approach&lt;/a&gt; or &quot;&lt;em&gt;look mum no loops!&lt;/em&gt;&quot;:</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/howto/functional.html&quot;&gt;기능적 접근 방식&lt;/a&gt; 또는 &quot; &lt;em&gt;루프가없는 것처럼 보입니다!&lt;/em&gt; &quot;:</target>
        </trans-unit>
        <trans-unit id="b33d59b9621b02877abf6fe0e4f424749ef7c6c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;read_single_keypress()&lt;/code&gt; courtesy &lt;a href=&quot;https://stackoverflow.com/a/6599441/4532996&quot;&gt;https://stackoverflow.com/a/6599441/4532996&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;read_single_keypress()&lt;/code&gt; 의례 &lt;a href=&quot;https://stackoverflow.com/a/6599441/4532996&quot;&gt;https://stackoverflow.com/a/6599441/4532996&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d7ecf19d9ae6af7c153718683f6f215fcb803e9a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;replies = map(input, prompts)&lt;/code&gt; - here &lt;a href=&quot;https://docs.python.org/howto/functional.html#built-in-functions&quot;&gt;&lt;code&gt;map&lt;/code&gt;&lt;/a&gt; will apply all the &lt;code&gt;prompts&lt;/code&gt; strings from the previous step to the &lt;a href=&quot;https://docs.python.org/library/functions.html#input&quot;&gt;&lt;code&gt;input&lt;/code&gt;&lt;/a&gt; function. E.g.:</source>
          <target state="translated">&lt;code&gt;replies = map(input, prompts)&lt;/code&gt; -여기서 &lt;a href=&quot;https://docs.python.org/howto/functional.html#built-in-functions&quot;&gt; &lt;code&gt;map&lt;/code&gt; &lt;/a&gt; 은 이전 단계의 모든 &lt;code&gt;prompts&lt;/code&gt; 문자열을 &lt;a href=&quot;https://docs.python.org/library/functions.html#input&quot;&gt; &lt;code&gt;input&lt;/code&gt; &lt;/a&gt; 함수에 적용합니다. 예 :</target>
        </trans-unit>
        <trans-unit id="853e4b1f776d315f087080450fcb300fd94c71ca" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Click&lt;/em&gt; is a library for command-line interfaces and it provides functionality for asking a valid response from a user.</source>
          <target state="translated">&lt;em&gt;Click&lt;/em&gt; 은 명령 줄 인터페이스 용 라이브러리이며 사용자에게 유효한 응답을 요청하는 기능을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="9690a5115331c7c51a617a95207de02bf99c7f9d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Explanation of above code:&lt;/strong&gt;
In order for a valid age,it should be positive and should not be more than normal physical age,say for example maximum age is 120.</source>
          <target state="translated">&lt;strong&gt;위의 코드 설명 :&lt;/strong&gt; 유효한 연령을 유지하려면 양수 여야하며 정상적인 신체 연령보다 길어서는 안됩니다 (예 : 최대 연령은 120입니다).</target>
        </trans-unit>
        <trans-unit id="a4f55a896addd022f6ae796b1a4820f81035d86a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Membership testing:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;회원 테스트 :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a96268eba187fbf6be4877438fe2076252bb1b8b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Numbers comparison:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;숫자 비교 :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7853abb571146c43488e9f2a1fb31a1e7f9d8d07" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Path existance:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;경로 존재 :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="075a5abdb5f8dedaf440d2f9d19cd1cfb769b499" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;String methods:&lt;/strong&gt; Of course you can use other string methods like &lt;a href=&quot;https://docs.python.org/library/stdtypes.html#str.isalpha&quot;&gt;&lt;code&gt;str.isalpha&lt;/code&gt;&lt;/a&gt; to get only alphabetic strings, or &lt;a href=&quot;https://docs.python.org/library/stdtypes.html#str.isupper&quot;&gt;&lt;code&gt;str.isupper&lt;/code&gt;&lt;/a&gt; to get only uppercase. See &lt;a href=&quot;https://docs.python.org/library/stdtypes.html#string-methods&quot;&gt;docs&lt;/a&gt; for the full list.</source>
          <target state="translated">&lt;strong&gt;문자열 메서드 :&lt;/strong&gt; 물론 &lt;a href=&quot;https://docs.python.org/library/stdtypes.html#str.isalpha&quot;&gt; &lt;code&gt;str.isalpha&lt;/code&gt; &lt;/a&gt; 와 같은 다른 문자열 메서드를 사용하여 알파벳 문자열 만 가져 오거나 &lt;a href=&quot;https://docs.python.org/library/stdtypes.html#str.isupper&quot;&gt; &lt;code&gt;str.isupper&lt;/code&gt; &lt;/a&gt; 는 대문자 만 사용할 수 있습니다. 전체 목록은 &lt;a href=&quot;https://docs.python.org/library/stdtypes.html#string-methods&quot;&gt;문서&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="7343e4cba121007208ca736981c8fab7a1466615" translate="yes" xml:space="preserve">
          <source>And to get only the first digits-only string we use &lt;a href=&quot;https://docs.python.org/library/functions.html#next&quot;&gt;&lt;code&gt;next&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">그리고 첫 번째 숫자 전용 문자열 만 얻으려면 &lt;a href=&quot;https://docs.python.org/library/functions.html#next&quot;&gt; &lt;code&gt;next&lt;/code&gt; &lt;/a&gt; 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="f0f9aafac7facbd2cde605e88aa01219f87ab9b5" translate="yes" xml:space="preserve">
          <source>Ask user to input her/his &lt;code&gt;age&lt;/code&gt;.</source>
          <target state="translated">사용자에게 &lt;code&gt;age&lt;/code&gt; 을 입력하도록 요청하십시오.</target>
        </trans-unit>
        <trans-unit id="c95fb909de9b09a0171cdf7fa5d483a13e565dc6" translate="yes" xml:space="preserve">
          <source>Asking the user for input until they give a valid response</source>
          <target state="translated">유효한 응답을 제공 할 때까지 사용자에게 입력 요청</target>
        </trans-unit>
        <trans-unit id="a07e9b13f26a757687582ae149ea32bcd53a502f" translate="yes" xml:space="preserve">
          <source>Both of the above techniques can be combined into one loop.</source>
          <target state="translated">위의 기술은 모두 하나의 루프로 결합 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e5e68a830f2d3f00ce63d0cd58dc813dcb732ea3" translate="yes" xml:space="preserve">
          <source>Building upon Daniel Q's and Patrick Artner's excellent suggestions,
here is an even more generalized solution.</source>
          <target state="translated">Daniel Q와 Patrick Artner의 훌륭한 제안을 바탕으로보다 일반적인 솔루션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="4b645b0a5d3c765b66c61e4d179e51f7b2984463" translate="yes" xml:space="preserve">
          <source>But in the case when there are many rules, it's better to implement a function performing a &lt;a href=&quot;https://en.wikipedia.org/wiki/Logical_conjunction&quot;&gt;logical conjunction&lt;/a&gt;. In the following example I will use a ready one from &lt;a href=&quot;https://lz.readthedocs.io/en/latest/lz.html#lz.logical.conjoin&quot;&gt;here&lt;/a&gt;:</source>
          <target state="translated">그러나 규칙이 많은 경우 &lt;a href=&quot;https://en.wikipedia.org/wiki/Logical_conjunction&quot;&gt;논리적 결합을&lt;/a&gt; 수행하는 함수를 구현하는 것이 좋습니다. 다음 예제에서는 &lt;a href=&quot;https://lz.readthedocs.io/en/latest/lz.html#lz.logical.conjoin&quot;&gt;여기&lt;/a&gt; 에서 준비된 것을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="0e2dbc00633189e3e9f18903c03bc9eb6849e823" translate="yes" xml:space="preserve">
          <source>But it fails if the user enters invalid data:</source>
          <target state="translated">그러나 사용자가 유효하지 않은 데이터를 입력하면 실패합니다.</target>
        </trans-unit>
        <trans-unit id="bd5134b61ca8a4e9ed4e058267db6f88d6705b30" translate="yes" xml:space="preserve">
          <source>Check if &lt;code&gt;0&amp;lt;age&amp;lt;18&lt;/code&gt;. If &lt;code&gt;0&amp;lt;age&amp;lt;18&lt;/code&gt;, print appropriate output and exit.</source>
          <target state="translated">&lt;code&gt;0&amp;lt;age&amp;lt;18&lt;/code&gt; 인지 확인하십시오. &lt;code&gt;0&amp;lt;age&amp;lt;18&lt;/code&gt; 인 경우 적절한 출력을 인쇄하고 종료하십시오.</target>
        </trans-unit>
        <trans-unit id="2653eac32b9fa268d55d8879cb9d85d28e8f85d6" translate="yes" xml:space="preserve">
          <source>Check if &lt;code&gt;age&amp;gt;=18&lt;/code&gt;. If &lt;code&gt;age&amp;gt;=18&lt;/code&gt;, print appropriate output and exit.</source>
          <target state="translated">&lt;code&gt;age&amp;gt;=18&lt;/code&gt; 인지 확인하십시오. &lt;code&gt;age&amp;gt;=18&lt;/code&gt; 인 경우 적절한 출력을 인쇄하고 종료하십시오.</target>
        </trans-unit>
        <trans-unit id="bd50246f2ee9f9c945ebb8851f3397efa0d5eeb1" translate="yes" xml:space="preserve">
          <source>Checking if a value is within a range:</source>
          <target state="translated">값이 범위 내에 있는지 확인 :</target>
        </trans-unit>
        <trans-unit id="44244e3a025af44c4c6db6689d08e950a6fe072f" translate="yes" xml:space="preserve">
          <source>Combining Exception Handling and Custom Validation</source>
          <target state="translated">예외 처리 및 사용자 지정 유효성 검사 결합</target>
        </trans-unit>
        <trans-unit id="199e536fc2b9b1f0c7b8c6ec962b0779e8a6e9f9" translate="yes" xml:space="preserve">
          <source>Combining validation rules:</source>
          <target state="translated">유효성 검사 규칙 결합 :</target>
        </trans-unit>
        <trans-unit id="af7c97e8539fbd53e0cc2eb0cb561603aae77279" translate="yes" xml:space="preserve">
          <source>Common Pitfalls, and Why you Should Avoid Them</source>
          <target state="translated">일반적인 함정과 왜 피해야 하는가</target>
        </trans-unit>
        <trans-unit id="b7183d64a08aa8ed12db72af8178cbcbead5abc2" translate="yes" xml:space="preserve">
          <source>Default values:</source>
          <target state="translated">기본값 :</target>
        </trans-unit>
        <trans-unit id="0aaad5b9b2fd041a8d716ca8c54d8c77998fcce5" translate="yes" xml:space="preserve">
          <source>Encapsulating it All in a Function</source>
          <target state="translated">함수에서 모두 캡슐화</target>
        </trans-unit>
        <trans-unit id="2b9eceb7a86a9f577ef80586c5c1d7fde9ff493d" translate="yes" xml:space="preserve">
          <source>Enter</source>
          <target state="translated">Enter</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="8dd1ae9de270d1c543c68013dae521bfb2480981" translate="yes" xml:space="preserve">
          <source>For a simple case, for example, when the program asks for age between 1 and 120, one can just add another &lt;code&gt;filter&lt;/code&gt;:</source>
          <target state="translated">예를 들어, 프로그램이 1에서 120 사이의 연령을 요구하면 간단한 &lt;code&gt;filter&lt;/code&gt; 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8c4d09c4a2067372de134176f0e63aa8bed661a7" translate="yes" xml:space="preserve">
          <source>Good question! You can try the following code for this. =)</source>
          <target state="translated">좋은 질문! 이를 위해 다음 코드를 시도 할 수 있습니다. =)</target>
        </trans-unit>
        <trans-unit id="ac8fd0e83c28123c3d940926041e4c6f07f92307" translate="yes" xml:space="preserve">
          <source>Here is the code.</source>
          <target state="translated">코드는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b9486f6c451e79959ed90a91613b6899ffbb7098" translate="yes" xml:space="preserve">
          <source>Here one can use &lt;code&gt;pathlib&lt;/code&gt; library and its &lt;a href=&quot;https://docs.python.org/library/pathlib.html#pathlib.Path.exists&quot;&gt;&lt;code&gt;Path.exists&lt;/code&gt;&lt;/a&gt; method:</source>
          <target state="translated">여기서는 &lt;code&gt;pathlib&lt;/code&gt; 라이브러리와 해당 &lt;a href=&quot;https://docs.python.org/library/pathlib.html#pathlib.Path.exists&quot;&gt; &lt;code&gt;Path.exists&lt;/code&gt; &lt;/a&gt; 메소드를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f2ee178c41397d5fb9affad4853f9d123e62befa" translate="yes" xml:space="preserve">
          <source>Here's a cleaner, more generalized solution that avoids repetitive if/else blocks: write a function that takes (Error, error prompt) pairs in a dictionary and do all your value-checking with assertions.</source>
          <target state="translated">다음은 반복적 인 if / else 블록을 피하는 더 깨끗하고 더 일반적인 솔루션입니다. 사전에서 (오류, 오류 프롬프트) 쌍을 취하는 함수를 작성하고 어설 션을 사용하여 모든 값 확인을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="b513628479ffc0e00cf666f16ff3d3097a6c8ba7" translate="yes" xml:space="preserve">
          <source>How can I make the program ask for valid inputs instead of crashing when non-sensical data is entered?</source>
          <target state="translated">중요하지 않은 데이터를 입력 할 때 프로그램이 충돌하지 않고 유효한 입력을 요청하도록하려면 어떻게해야합니까?</target>
        </trans-unit>
        <trans-unit id="addb0ea88759f602b432be14dcc631042eecacd5" translate="yes" xml:space="preserve">
          <source>How can I reject values like &lt;code&gt;-1&lt;/code&gt;, which is a valid &lt;code&gt;int&lt;/code&gt;, but nonsensical in this context?</source>
          <target state="translated">이 문맥에서 유효한 &lt;code&gt;int&lt;/code&gt; 이지만 무의미한 &lt;code&gt;-1&lt;/code&gt; 과 같은 값을 어떻게 거부 할 수 있습니까?</target>
        </trans-unit>
        <trans-unit id="e21860bf37328b97ebb0ddd904694c78e4a7b382" translate="yes" xml:space="preserve">
          <source>How does it work?</source>
          <target state="translated">어떻게 작동합니까?</target>
        </trans-unit>
        <trans-unit id="9bfdd3a1cbdee75c09efadf7fb60594b8441823a" translate="yes" xml:space="preserve">
          <source>I am writing a program that accepts an input from the user.</source>
          <target state="translated">사용자의 입력을 수락하는 프로그램을 작성 중입니다.</target>
        </trans-unit>
        <trans-unit id="a23f11ad5c1ce07676a25c9967d8842237840ad8" translate="yes" xml:space="preserve">
          <source>I opted for explicit &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;raise&lt;/code&gt; statements instead of an &lt;code&gt;assert&lt;/code&gt;,
because assertion checking may be turned off,
whereas validation should always be on to provide robustness.</source>
          <target state="translated">어설 션 검사는 해제 될 수 있지만 견고성을 제공하기 위해 항상 유효성 검사를 설정해야하므로 &lt;code&gt;assert&lt;/code&gt; 대신 명시적인 &lt;code&gt;if&lt;/code&gt; 및 &lt;code&gt;raise&lt;/code&gt; 문을 선택했습니다.</target>
        </trans-unit>
        <trans-unit id="5b81585406ead66c0ecc9776a3232a31888c6567" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;age&amp;lt;=0&lt;/code&gt;, ask the user to input a valid number for age again, (&lt;em&gt;i.e.&lt;/em&gt; go back to step 1.)</source>
          <target state="translated">&lt;code&gt;age&amp;lt;=0&lt;/code&gt; 인 경우 사용자에게 다시 유효한 연령 번호를 입력하도록 요청하십시오 ( &lt;em&gt;예 :&lt;/em&gt; 1 단계로 돌아가십시오).</target>
        </trans-unit>
        <trans-unit id="ace9bfcc0d44803c1a09c0ab61d7e2f17af84af4" translate="yes" xml:space="preserve">
          <source>If you don't want to torture a user by asking him something an infinite number of times, you can specify a limit in a call of &lt;a href=&quot;https://docs.python.org/library/itertools.html#itertools.repeat&quot;&gt;&lt;code&gt;itertools.repeat&lt;/code&gt;&lt;/a&gt;. This can be combined with providing a default value to the &lt;a href=&quot;https://docs.python.org/library/functions.html#next&quot;&gt;&lt;code&gt;next&lt;/code&gt;&lt;/a&gt; function:</source>
          <target state="translated">사용자에게 무언가를 요청하여 고문하고 싶지 않은 경우 &lt;a href=&quot;https://docs.python.org/library/itertools.html#itertools.repeat&quot;&gt; &lt;code&gt;itertools.repeat&lt;/code&gt; &lt;/a&gt; 호출에서 제한을 지정할 수 있습니다. &lt;a href=&quot;https://docs.python.org/library/functions.html#next&quot;&gt; &lt;code&gt;next&lt;/code&gt; &lt;/a&gt; 기능에 기본값을 제공하는 것과 결합 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="aea4a7fd400297d8ce106e24ab2d8096ea950754" translate="yes" xml:space="preserve">
          <source>If you need to ask your user for a lot of different values, it might be useful to put this code in a function, so you don't have to retype it every time.</source>
          <target state="translated">사용자에게 많은 다른 값을 요청해야하는 경우이 코드를 함수에 넣는 것이 유용 할 수 있으므로 매번 다시 입력하지 않아도됩니다.</target>
        </trans-unit>
        <trans-unit id="c4a119e157648d5a45a867abca16ab0d4e8db745" translate="yes" xml:space="preserve">
          <source>If you want to reject values that Python can successfully parse, you can add your own validation logic.</source>
          <target state="translated">파이썬이 성공적으로 구문 분석 할 수있는 값을 거부하려면 고유 한 유효성 검사 논리를 추가하면됩니다.</target>
        </trans-unit>
        <trans-unit id="8aa88cbb714761a2ce228ad57bb7944a6567235e" translate="yes" xml:space="preserve">
          <source>If you've just learned about recursion, you might be tempted to use it in &lt;code&gt;get_non_negative_int&lt;/code&gt; so you can dispose of the while loop.</source>
          <target state="translated">재귀에 대해 방금 배운 경우 &lt;code&gt;get_non_negative_int&lt;/code&gt; 에서 재귀를 사용하여 while 루프를 처리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="c3f8fa0d463c7455e7d3db5328813076dc355aa4" translate="yes" xml:space="preserve">
          <source>Implementing Your Own Validation Rules</source>
          <target state="translated">자신의 유효성 검사 규칙 구현</target>
        </trans-unit>
        <trans-unit id="f65489bc1c361348ad9cd63566b532fbd9e581f5" translate="yes" xml:space="preserve">
          <source>In the case when you have many functions to use for preprocessing, it might be easier to use a function performing a &lt;a href=&quot;https://en.wikipedia.org/wiki/Function_composition_(computer_science)&quot;&gt;function composition&lt;/a&gt;. For example, using the one from &lt;a href=&quot;https://lz.readthedocs.io/en/latest/lz.html#lz.functional.compose&quot;&gt;here&lt;/a&gt;:</source>
          <target state="translated">전처리에 사용할 함수가 많은 경우 &lt;a href=&quot;https://en.wikipedia.org/wiki/Function_composition_(computer_science)&quot;&gt;함수 구성을&lt;/a&gt; 수행하는 함수 를 사용하는 것이 더 쉬울 수 있습니다. 예를 들어 &lt;a href=&quot;https://lz.readthedocs.io/en/latest/lz.html#lz.functional.compose&quot;&gt;여기&lt;/a&gt; 에서 하나를 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="1a807177a047eb2ee56870f0cf1fe6a4b83332f5" translate="yes" xml:space="preserve">
          <source>In this case, simply pressing</source>
          <target state="translated">이 경우 간단히 누르면</target>
        </trans-unit>
        <trans-unit id="e1420b6b2f9528d9a3603b392edfc6511f3d7260" translate="yes" xml:space="preserve">
          <source>Instead of crashing, I would like the program to ask for the input again. Like this:</source>
          <target state="translated">충돌하는 대신 프로그램에서 입력을 다시 요청하고 싶습니다. 이처럼 :</target>
        </trans-unit>
        <trans-unit id="9edcffff4461c9083fbff857f8dcee0f0769cbd4" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Integer</target>
        </trans-unit>
        <trans-unit id="42095caa1372551faaa10f77df1ccb06d4a7fb67" translate="yes" xml:space="preserve">
          <source>It might look attractive initially because it's shorter than the &lt;code&gt;while True&lt;/code&gt; method, but it violates the &lt;a href=&quot;http://en.wikipedia.org/wiki/Don%27t_repeat_yourself&quot;&gt;Don't Repeat Yourself&lt;/a&gt; principle of software development. This increases the likelihood of bugs in your system. What if you want to backport to 2.7 by changing &lt;code&gt;input&lt;/code&gt; to &lt;code&gt;raw_input&lt;/code&gt;, but accidentally change only the first &lt;code&gt;input&lt;/code&gt; above? It's a &lt;code&gt;SyntaxError&lt;/code&gt; just waiting to happen.</source>
          <target state="translated">&lt;code&gt;while True&lt;/code&gt; 방법보다 짧기 때문에 처음에는 매력적으로 보일 수 있지만 소프트웨어 개발의 &lt;a href=&quot;http://en.wikipedia.org/wiki/Don%27t_repeat_yourself&quot;&gt;Do n't Repeat Yourself&lt;/a&gt; 원칙을 위반합니다. 이것은 시스템의 버그 가능성을 증가시킵니다. &lt;code&gt;input&lt;/code&gt; 을 &lt;code&gt;raw_input&lt;/code&gt; 으로 변경하여 2.7로 백 포트하고 싶지만 실수로 위의 첫 번째 &lt;code&gt;input&lt;/code&gt; 만 변경하려면 어떻게해야합니까? 그냥 일어나기를 기다리는 &lt;code&gt;SyntaxError&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="1b7b99d04df48522a25d875d29bee1c7426a4d09" translate="yes" xml:space="preserve">
          <source>Limiting number of tries:</source>
          <target state="translated">시도 횟수 제한 :</target>
        </trans-unit>
        <trans-unit id="45b3b669489dc4f008395f3b58f703ea613e9627" translate="yes" xml:space="preserve">
          <source>Membership testing:</source>
          <target state="translated">회원 테스트 :</target>
        </trans-unit>
        <trans-unit id="14d0eb8eab3895eda3cd7e4e43b4ff127484b588" translate="yes" xml:space="preserve">
          <source>Note how it converted the string value to a float automatically.</source>
          <target state="translated">문자열 값을 부동 소수점으로 자동 변환하는 방법에 유의하십시오.</target>
        </trans-unit>
        <trans-unit id="7131c43c2e37baf69698fa952778088d97499866" translate="yes" xml:space="preserve">
          <source>Note that the nature of this implementation is it closes stdin as soon as something that isn't a digit is read. I didn't hit enter after &lt;code&gt;a&lt;/code&gt;, but I needed to after the numbers.</source>
          <target state="translated">이 구현의 특성은 숫자가 아닌 것을 읽 자마자 stdin이 닫히는 것입니다. 나는 이후 &lt;code&gt;a&lt;/code&gt; enter 키를 누르지 않았지만 숫자를 따라야했습니다.</target>
        </trans-unit>
        <trans-unit id="062bd15fc2602a4730fe9add611cc67f2e699d25" translate="yes" xml:space="preserve">
          <source>Note: Read comments top of code.</source>
          <target state="translated">참고 : 코드 상단의 주석을 읽으십시오.</target>
        </trans-unit>
        <trans-unit id="e9ee53723b1bf7557fe1696a3094ddbd80a09948" translate="yes" xml:space="preserve">
          <source>Once the valid input is entered, we perform a check (using nested if-else statement) whether the age is &amp;gt;=18 or vice versa and print a message whether the user is eligible to vote</source>
          <target state="translated">유효한 입력이 입력되면 나이가 18보다 크거나 그 반대인지 여부를 확인 (중첩 된 if-else 문 사용)하고 사용자가 투표 할 수 있는지 여부를 메시지로 인쇄합니다</target>
        </trans-unit>
        <trans-unit id="c10517ee43c66b1bd6454024216ea2d04a7ea020" translate="yes" xml:space="preserve">
          <source>One more solution for using input validation using a customized &lt;code&gt;ValidationError&lt;/code&gt; and a (optional) range validation for integer inputs:</source>
          <target state="translated">사용자 정의 된 &lt;code&gt;ValidationError&lt;/code&gt; 및 정수 입력에 대한 (선택적) 범위 유효성 검사를 사용하여 입력 유효성 검사를 사용하는 또 다른 솔루션 :</target>
        </trans-unit>
        <trans-unit id="58ab4d8c70604c5740aafb47ce7b995bd346f944" translate="yes" xml:space="preserve">
          <source>Or, if you don't like using dunder methods (dunder = double-underscore), you can always define your own function, or use the ones from the &lt;a href=&quot;https://docs.python.org/library/operator.html&quot;&gt;&lt;code&gt;operator&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">또는 dunder 메소드 (dunder = double-underscore)를 사용하지 않으려는 경우 언제든지 고유 한 함수를 정의하거나 &lt;a href=&quot;https://docs.python.org/library/operator.html&quot;&gt; &lt;code&gt;operator&lt;/code&gt; &lt;/a&gt; 모듈에서 해당 함수를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="24e76a0c2b09dfe1d6b093d6c881f16e39dc5cef" translate="yes" xml:space="preserve">
          <source>Or, to answer the original question:</source>
          <target state="translated">또는 원래 질문에 대답하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="0ac3c9882a4b70189ad1bfa57e91f5a096b4d423" translate="yes" xml:space="preserve">
          <source>Other examples:</source>
          <target state="translated">다른 예 :</target>
        </trans-unit>
        <trans-unit id="2dcab4741f9bbe43708bc513d43f2458d79b138f" translate="yes" xml:space="preserve">
          <source>Other validation rules:</source>
          <target state="translated">다른 유효성 검사 규칙 :</target>
        </trans-unit>
        <trans-unit id="f3c8c95c5e534bcd2ea0034a0d83177efa6923f4" translate="yes" xml:space="preserve">
          <source>Output:</source>
          <target state="translated">Output:</target>
        </trans-unit>
        <trans-unit id="1c05d4f66e3072be43dc1137638140dfe5f32eae" translate="yes" xml:space="preserve">
          <source>P.S. This code is for python 3.x.</source>
          <target state="translated">PS이 코드는 python 3.x 용입니다.</target>
        </trans-unit>
        <trans-unit id="98ff22a542694c01a1b0798081723b4f19dc1b8f" translate="yes" xml:space="preserve">
          <source>Password confirmation:</source>
          <target state="translated">비밀번호 확인:</target>
        </trans-unit>
        <trans-unit id="28f8782852230c31834d2c2f605fd51cf6e49727" translate="yes" xml:space="preserve">
          <source>Persistent user input using &lt;strong&gt;recursive function&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;재귀 기능을&lt;/strong&gt; 사용한 지속적인 사용자 입력 :</target>
        </trans-unit>
        <trans-unit id="e5ce4ac2d580ca0424bec105c383eaebae30b6a9" translate="yes" xml:space="preserve">
          <source>Preprocessing input data:</source>
          <target state="translated">전처리 입력 데이터 :</target>
        </trans-unit>
        <trans-unit id="77b515b9d004e2d4a3d253d42b3f58bdf2425286" translate="yes" xml:space="preserve">
          <source>Putting It All Together</source>
          <target state="translated">함께 모아서</target>
        </trans-unit>
        <trans-unit id="14b43e8f5c6320bf62922fbff8513a46c1938864" translate="yes" xml:space="preserve">
          <source>Reading and writing files can be done by &lt;code&gt;click.File&lt;/code&gt;:</source>
          <target state="translated">클릭하면 파일을 읽고 쓸 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="afb3c5e5525b9dce37b04de7a04b7c9b5fc2d4cb" translate="yes" xml:space="preserve">
          <source>Recursion Will Blow Your Stack</source>
          <target state="translated">재귀가 스택을 날려 버릴 것입니다</target>
        </trans-unit>
        <trans-unit id="563523c7fb9aeb90cd3ca9914f9f94d5abfe8ef0" translate="yes" xml:space="preserve">
          <source>Simple example:</source>
          <target state="translated">간단한 예 :</target>
        </trans-unit>
        <trans-unit id="82622f37f30f5d1802b2232c3e3f5756b8406bbd" translate="yes" xml:space="preserve">
          <source>So, I was messing around with something similar to this recently, and I came up with the following solution, which uses a way of getting input that rejects junk, before it's even checked in any logical way.</source>
          <target state="translated">그래서 최근에 이와 비슷한 것을 엉망으로 만들었고 논리적으로 검사하기 전에 정크를 거부하는 입력을 얻는 방법을 사용하는 다음 솔루션을 생각해 냈습니다.</target>
        </trans-unit>
        <trans-unit id="447068e318fc0cbd472a1becb0e047b32f09b8a7" translate="yes" xml:space="preserve">
          <source>Sometimes we don't want to reject an input if the user accidentally supplied it &lt;em&gt;IN CAPS&lt;/em&gt; or with a space in the beginning or an end of the string. To take these simple mistakes into account we can preprocess the input data by applying &lt;a href=&quot;https://docs.python.org/library/stdtypes.html#str.lower&quot;&gt;&lt;code&gt;str.lower&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/library/stdtypes.html#str.strip&quot;&gt;&lt;code&gt;str.strip&lt;/code&gt;&lt;/a&gt; methods. For example, for the case of membership testing the code will look like this:</source>
          <target state="translated">때때로 사용자가 실수로 입력 한 값을 입력하거나 문자열의 시작 또는 끝에 공백이있는 경우 입력을 거부하고 싶지 않습니다. 이러한 간단한 실수를 고려하기 위해 &lt;a href=&quot;https://docs.python.org/library/stdtypes.html#str.lower&quot;&gt; &lt;code&gt;str.lower&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;https://docs.python.org/library/stdtypes.html#str.strip&quot;&gt; &lt;code&gt;str.strip&lt;/code&gt; &lt;/a&gt; 메소드를 적용하여 입력 데이터를 사전 처리 할 수 ​​있습니다. 예를 들어 멤버쉽 테스트의 경우 코드는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="3df63b7acb0522da685dad5fe84b81fdd7b25264" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="translated">String</target>
        </trans-unit>
        <trans-unit id="6cfe19b1a292f94eb1f8dbf0690abf636dd37d37" translate="yes" xml:space="preserve">
          <source>The Redundant Use of Redundant &lt;code&gt;input&lt;/code&gt; Statements</source>
          <target state="translated">중복 &lt;code&gt;input&lt;/code&gt; 명령문의 중복 사용</target>
        </trans-unit>
        <trans-unit id="7d7cc27e418d647c28671c429d05fc552a041b46" translate="yes" xml:space="preserve">
          <source>The program works as expected as long as the the user enters meaningful data.</source>
          <target state="translated">사용자가 의미있는 데이터를 입력하는 한 프로그램이 예상대로 작동합니다.</target>
        </trans-unit>
        <trans-unit id="ee1423d042019ace0669b0816607735161e11198" translate="yes" xml:space="preserve">
          <source>The simple solution would be:</source>
          <target state="translated">간단한 해결책은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6666e163c2f2a7676e17981407484977fa7c8959" translate="yes" xml:space="preserve">
          <source>The simplest way to accomplish this would be to put the &lt;code&gt;input&lt;/code&gt; method in a while loop. Use &lt;a href=&quot;https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops&quot;&gt;&lt;code&gt;continue&lt;/code&gt;&lt;/a&gt; when you get bad input, and &lt;code&gt;break&lt;/code&gt; out of the loop when you're satisfied.</source>
          <target state="translated">이를 수행하는 가장 간단한 방법은 &lt;code&gt;input&lt;/code&gt; 메소드를 while 루프에 넣는 것입니다. 입력이 잘못되면 &lt;a href=&quot;https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops&quot;&gt; &lt;code&gt;continue&lt;/code&gt; &lt;/a&gt; 사용하고 만족하면 루프에서 빠져 나옵니다.</target>
        </trans-unit>
        <trans-unit id="83b5a3f65009100605bf355439a34b57d45cdba3" translate="yes" xml:space="preserve">
          <source>The var variable is just so that if the user enters a string instead of a integer the program wont return &quot;You are not able to vote in the United States.&quot;</source>
          <target state="translated">var 변수는 사용자가 정수 대신 문자열을 입력하면 프로그램이 &quot;미국에서 투표 할 수 없음&quot;을 반환하지 않도록하기위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="72b0f50405e094f9ddb945c6e83be15b30ef9b7e" translate="yes" xml:space="preserve">
          <source>Then we can ask user for age and if age input is negative or more than 120,we consider it invalid input and ask the user to try again.</source>
          <target state="translated">그런 다음 사용자에게 연령을 물어볼 수 있고 연령 입력이 음수이거나 120보다 큰 경우 잘못된 입력으로 간주하고 사용자에게 다시 시도하도록 요청합니다.</target>
        </trans-unit>
        <trans-unit id="9c8501991a64d579db4ba49e291b977238dbac24" translate="yes" xml:space="preserve">
          <source>There are different &lt;a href=&quot;https://click.palletsprojects.com/en/7.x/parameters/#parameter-types&quot;&gt;custom types&lt;/a&gt; provided. To get a number in a specific range we can use &lt;code&gt;IntRange&lt;/code&gt;:</source>
          <target state="translated">제공되는 다른 &lt;a href=&quot;https://click.palletsprojects.com/en/7.x/parameters/#parameter-types&quot;&gt;사용자 정의 유형&lt;/a&gt; 이 있습니다. 특정 범위의 숫자를 얻으려면 &lt;code&gt;IntRange&lt;/code&gt; 를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="15ac60c2b161f8ee4c789f53513c7eded24945e8" translate="yes" xml:space="preserve">
          <source>There are several different ways to perform it. One of them is by using &lt;a href=&quot;https://docs.python.org/reference/datamodel.html#object.__contains__&quot;&gt;&lt;code&gt;__contains__&lt;/code&gt;&lt;/a&gt; method:</source>
          <target state="translated">여러 가지 방법으로 수행 할 수 있습니다. 그중 하나는 &lt;a href=&quot;https://docs.python.org/reference/datamodel.html#object.__contains__&quot;&gt; &lt;code&gt;__contains__&lt;/code&gt; &lt;/a&gt; 메소드를 사용하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="a0841c6a7032de42781368f82500d8217ffd5677" translate="yes" xml:space="preserve">
          <source>There are useful comparison methods which we can use here. For example, for &lt;a href=&quot;https://docs.python.org/reference/datamodel.html#object.__lt__&quot;&gt;&lt;code&gt;__lt__&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;&amp;lt;&lt;/code&gt;):</source>
          <target state="translated">여기서 사용할 수있는 유용한 비교 방법이 있습니다. 예를 들어 &lt;a href=&quot;https://docs.python.org/reference/datamodel.html#object.__lt__&quot;&gt; &lt;code&gt;__lt__&lt;/code&gt; &lt;/a&gt; ( &lt;code&gt;&amp;lt;&lt;/code&gt; )의 경우 :</target>
        </trans-unit>
        <trans-unit id="347225df49657cf13b0ed68a51c1c7d5a3737681" translate="yes" xml:space="preserve">
          <source>This appears to work fine most of the time, but if the user enters invalid data enough times, the script will terminate with a &lt;code&gt;RuntimeError: maximum recursion depth exceeded&lt;/code&gt;. You may think &quot;no fool would make 1000 mistakes in a row&quot;, but you're underestimating the ingenuity of fools!</source>
          <target state="translated">대부분의 경우 제대로 작동하는 것으로 보이지만 사용자가 유효하지 않은 데이터를 충분히 입력하면 스크립트는 &lt;code&gt;RuntimeError: maximum recursion depth exceeded&lt;/code&gt; 종료됩니다 . 최대 재귀 깊이가 초과되었습니다 . &quot;어리 석음으로 1000 번 실수하지 않을 것&quot;이라고 생각할 수도 있지만, 바보의 독창성을 과소 평가하는 것입니다!</target>
        </trans-unit>
        <trans-unit id="f5d125705cdf58dc7a885039f35c323cf8746226" translate="yes" xml:space="preserve">
          <source>This code uses &lt;a href=&quot;https://docs.python.org/3/library/ast.html&quot;&gt;ast.literal_eval()&lt;/a&gt; to &lt;strong&gt;find the data type of the input&lt;/strong&gt; (&lt;code&gt;age&lt;/code&gt;). Then it follows the following algorithm:</source>
          <target state="translated">이 코드는 &lt;a href=&quot;https://docs.python.org/3/library/ast.html&quot;&gt;ast.literal_eval ()&lt;/a&gt; 을 사용 &lt;strong&gt;하여 입력의 데이터 유형&lt;/strong&gt; ( &lt;code&gt;age&lt;/code&gt; )을 &lt;strong&gt;찾습니다&lt;/strong&gt; . 그런 다음 다음 알고리즘을 따릅니다.</target>
        </trans-unit>
        <trans-unit id="a11946bf2b62254cfc72241bf4fd047f618144ae" translate="yes" xml:space="preserve">
          <source>This combination of &lt;a href=&quot;https://docs.python.org/library/itertools.html#itertools.chain&quot;&gt;&lt;code&gt;itertools.chain&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/library/itertools.html#itertools.repeat&quot;&gt;&lt;code&gt;itertools.repeat&lt;/code&gt;&lt;/a&gt; will create an iterator 
which will yield strings &lt;code&gt;&quot;Enter a number: &quot;&lt;/code&gt; once, and &lt;code&gt;&quot;Not a number! Try again: &quot;&lt;/code&gt; an infinite number of times:</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/library/itertools.html#itertools.chain&quot;&gt; &lt;code&gt;itertools.chain&lt;/code&gt; &lt;/a&gt; 과 &lt;a href=&quot;https://docs.python.org/library/itertools.html#itertools.repeat&quot;&gt; &lt;code&gt;itertools.repeat&lt;/code&gt; &lt;/a&gt; 의이 조합은 &lt;code&gt;&quot;Enter a number: &quot;&lt;/code&gt; 한 번, &lt;code&gt;&quot;Not a number! Try again: &quot;&lt;/code&gt; 라는 무한한 횟수의 문자열을 생성하는 반복자를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="420409224aa60a02c210b11bf9b505f77aca1d12" translate="yes" xml:space="preserve">
          <source>This may be used to get different kinds of input,
with different validation conditions.
For example:</source>
          <target state="translated">이것은 다른 검증 조건으로 다른 종류의 입력을 얻는 데 사용될 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="034706060061fbab900d658521b10862c22c54b7" translate="yes" xml:space="preserve">
          <source>This method works but is generally considered poor style:</source>
          <target state="translated">이 방법은 효과가 있지만 일반적으로 스타일이 좋지 않습니다.</target>
        </trans-unit>
        <trans-unit id="050423c285f77c6944a1c62a612b68ca61666d6b" translate="yes" xml:space="preserve">
          <source>This will be an infinite loo and you would be asked to enter the age, indefinitely.</source>
          <target state="translated">이것은 무한의 화장실이 될 것이고 당신은 나이를 무한정 입력하라는 요청을받을 것입니다.</target>
        </trans-unit>
        <trans-unit id="2d7ed40d1c68685fcffe5200072c4f9b1c5285eb" translate="yes" xml:space="preserve">
          <source>This would result in the following:</source>
          <target state="translated">결과는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="12a319a58097d326f1bca95ba14ca02c91daac29" translate="yes" xml:space="preserve">
          <source>Though the accepted answer is amazing. I would also like to share a quick hack for this problem. (This takes care of the negative age problem as well.)</source>
          <target state="translated">받아 들여진 대답은 훌륭합니다. 또한이 문제에 대한 빠른 해킹을 공유하고 싶습니다. (이는 부정적인 연령 문제도 처리합니다.)</target>
        </trans-unit>
        <trans-unit id="a3955912a7edfae39df6ab252ef981b5a5180180" translate="yes" xml:space="preserve">
          <source>Try this one:-</source>
          <target state="translated">이거 한번 해봐:-</target>
        </trans-unit>
        <trans-unit id="2a6af9923bd8a38732fd0ed5acbf9aa3b54bf73c" translate="yes" xml:space="preserve">
          <source>Unfortunately, if someone needs a custom message for each failed case, then, I'm afraid, there is no &lt;em&gt;pretty&lt;/em&gt; functional way. Or, at least, I couldn't find one.</source>
          <target state="translated">불행히도 누군가가 실패한 각 사례마다 맞춤 메시지가 필요한 경우에는 기능적인 방법이 없습니다. 또는 적어도 하나를 찾을 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="861a0e430ffac5e4ae6e11b7a947f2c32d388cf4" translate="yes" xml:space="preserve">
          <source>Usage:</source>
          <target state="translated">Usage:</target>
        </trans-unit>
        <trans-unit id="45c71be0ba20b61a6611682a1739d54b0cc60544" translate="yes" xml:space="preserve">
          <source>Use &quot;while&quot; statement till user enter a true value and if the input value is not a number or it's a null value skip it and try to ask again and so on. 
In example I tried to answer truly your question. If we suppose that our age is between 1 and 150 then input value accepted, else it's a wrong value.
For terminating program, the user can use 0 key and enter it as a value.</source>
          <target state="translated">사용자가 실제 값을 입력 할 때까지 &quot;while&quot;문을 사용하고 입력 값이 숫자가 아니거나 널값 인 경우 건너 뛰고 다시 묻습니다. 예를 들어 나는 당신의 질문에 진정으로 답하려고 노력했습니다. 나이가 1에서 150 사이라고 가정하면 입력 값이 허용됩니다. 그렇지 않으면 잘못된 값입니다. 프로그램 종료의 경우 사용자는 0 키를 사용하여 값으로 입력 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0809f67fd32cf418102a757d5068f2d2e56411b6" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;https://docs.python.org/3/tutorial/errors.html#handling-exceptions&quot;&gt;&lt;code&gt;try&lt;/code&gt; and &lt;code&gt;except&lt;/code&gt;&lt;/a&gt; to detect when the user enters data that can't be parsed.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3/tutorial/errors.html#handling-exceptions&quot;&gt; &lt;code&gt;try&lt;/code&gt; 및 &lt;code&gt;except&lt;/code&gt; &lt;/a&gt; 를 사용하여 사용자가 구문 분석 할 수없는 데이터를 입력하는시기를 감지하십시오.</target>
        </trans-unit>
        <trans-unit id="156f5333387af7dc462273293869b127062952d5" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;https://click.palletsprojects.com/en/7.x/&quot;&gt;&lt;em&gt;Click&lt;/em&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://click.palletsprojects.com/en/7.x/&quot;&gt;&lt;em&gt;클릭&lt;/em&gt;&lt;/a&gt; 사용 :</target>
        </trans-unit>
        <trans-unit id="e0827f75369eff602aaa9fd838662b90e29a3180" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;click.Choice&lt;/code&gt; type. By default this check is case-sensitive.</source>
          <target state="translated">&lt;code&gt;click.Choice&lt;/code&gt; 유형을 사용합니다. 기본적으로이 확인은 대소 문자를 구분합니다.</target>
        </trans-unit>
        <trans-unit id="a61e00d389199ef5ead52318c429ad06a181b87f" translate="yes" xml:space="preserve">
          <source>Using a &lt;code&gt;click.Path&lt;/code&gt; type we can check for existing paths and also resolve them:</source>
          <target state="translated">&lt;code&gt;click.Path&lt;/code&gt; 유형을 사용하여 기존 경로를 확인하고 해결할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="2945efa2e3f0aae3e5184845124f102bc0668b41" translate="yes" xml:space="preserve">
          <source>We can also specify just one of the limits, &lt;code&gt;min&lt;/code&gt; or &lt;code&gt;max&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;min&lt;/code&gt; 또는 &lt;code&gt;max&lt;/code&gt; 한계 중 하나만 지정할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="c0e98d4de1b58350a764bf8b8300910406fc0c51" translate="yes" xml:space="preserve">
          <source>We use &lt;a href=&quot;https://docs.python.org/library/functions.html#filter&quot;&gt;&lt;code&gt;filter&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/library/stdtypes.html#str.isdigit&quot;&gt;&lt;code&gt;str.isdigit&lt;/code&gt;&lt;/a&gt; to filter out those strings that contain only digits:</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/library/functions.html#filter&quot;&gt; &lt;code&gt;filter&lt;/code&gt; &lt;/a&gt; 와 &lt;a href=&quot;https://docs.python.org/library/stdtypes.html#str.isdigit&quot;&gt; &lt;code&gt;str.isdigit&lt;/code&gt; &lt;/a&gt; 를 사용하여 숫자 만 포함 된 문자열을 걸러냅니다.</target>
        </trans-unit>
        <trans-unit id="fd91fdc02704dc2671450a642b90e7c2a38b5333" translate="yes" xml:space="preserve">
          <source>When Your Input Might Raise an Exception</source>
          <target state="translated">입력에서 예외가 발생할 수있는 경우</target>
        </trans-unit>
        <trans-unit id="6c5a36afe4a8297f57de0a97af9bb6dedebe5cab" translate="yes" xml:space="preserve">
          <source>While a &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;except&lt;/code&gt; block will work, a much faster and cleaner way to accomplish this task would be to use &lt;code&gt;str.isdigit()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;try&lt;/code&gt; / &lt;code&gt;except&lt;/code&gt; 블록이 작동하지만이 작업을 수행하는 훨씬 빠르고 깔끔한 방법은 &lt;code&gt;str.isdigit()&lt;/code&gt; 를 사용하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="a8d5e7a863d787342a44c9040fa72abd9311619f" translate="yes" xml:space="preserve">
          <source>Why would you do a &lt;code&gt;while True&lt;/code&gt; and then break out of this loop while you can also just put your requirements in the while statement since all you want is to stop once you have the age?</source>
          <target state="translated">&lt;code&gt;while True&lt;/code&gt; 를 수행 한 다음이 루프에서 벗어나 왜 while 문에 요구 사항을 넣을 수 있습니까?</target>
        </trans-unit>
        <trans-unit id="cd744395bde6d8f68047f3f83c5975cabbfaab23" translate="yes" xml:space="preserve">
          <source>With usage such as:</source>
          <target state="translated">다음과 같은 사용법으로 :</target>
        </trans-unit>
        <trans-unit id="1000cef2fdb4b122809f57db7fef5ddfb8878cba" translate="yes" xml:space="preserve">
          <source>Working with paths and files:</source>
          <target state="translated">경로와 파일로 작업하기 :</target>
        </trans-unit>
        <trans-unit id="20f555ab2e7462146bc18902994f4b96a03ad66b" translate="yes" xml:space="preserve">
          <source>You can always apply simple if-else logic and add one more &lt;code&gt;if&lt;/code&gt; logic to your code along with a &lt;code&gt;for&lt;/code&gt; loop.</source>
          <target state="translated">간단한 if-else 로직을 적용하고 &lt;code&gt;for&lt;/code&gt; 루프와 함께 &lt;code&gt;if&lt;/code&gt; 로직을 코드에 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="75b6d7faf5682aeb441bab14ea904b330a258ada" translate="yes" xml:space="preserve">
          <source>You can extend this idea to make a very generic input function:</source>
          <target state="translated">이 아이디어를 확장하여 매우 일반적인 입력 기능을 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dd8d5663f16c4dfa676e3d04e3ff3904dd55678c" translate="yes" xml:space="preserve">
          <source>You can find the complete module &lt;a href=&quot;https://github.com/catb0t/input_constrain&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/catb0t/input_constrain&quot;&gt;여기&lt;/a&gt; 에서 전체 모듈을 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3246cd227ca329e0cc62b73a811b25d03098a598" translate="yes" xml:space="preserve">
          <source>You can make the input statement a while True loop so it repeatedly asks for the users input and then break that loop if the user enters the response you would like. And you can use try and except blocks to handle invalid responses.</source>
          <target state="translated">input 문을 while True 루프로 만들면 반복해서 사용자 입력을 요청한 다음 사용자가 원하는 응답을 입력하면 해당 루프를 끊을 수 있습니다. try 및 except 블록을 사용하여 유효하지 않은 응답을 처리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="70f8952bd80dfba10cd3ab836fd2b382e547129f" translate="yes" xml:space="preserve">
          <source>You can write more general logic to allow user to enter only specific number of times, as the same use-case arises in many real-world applications.</source>
          <target state="translated">많은 실제 응용 프로그램에서 동일한 사용 사례가 발생하므로 사용자가 특정 횟수 만 입력 할 수 있도록보다 일반적인 논리를 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c7ce28cdf280aeb39be90a250f35afde1be5da5f" translate="yes" xml:space="preserve">
          <source>You could merge this with the &lt;code&gt;thismany()&lt;/code&gt; function in the same module to only allow, say, three digits.</source>
          <target state="translated">이것을 같은 모듈의 &lt;code&gt;thismany()&lt;/code&gt; 함수와 병합하여 3 자리 숫자 만 허용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ba52188347a3e754fd275290e5d3a517dc17f1ac" translate="yes" xml:space="preserve">
          <source>and finally, the question requirement:</source>
          <target state="translated">마지막으로 질문 요구 사항 :</target>
        </trans-unit>
        <trans-unit id="4d985d07d58297153e5ebb6532053c0e9f9e471d" translate="yes" xml:space="preserve">
          <source>or if you want to have a &quot;bad input&quot; message separated from an input prompt as in other answers:</source>
          <target state="translated">또는 다른 답변에서와 같이 &quot;잘못된 입력&quot;메시지를 입력 프롬프트와 분리하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="f62608e0a56bfde6bfaa8d7d6f39ac0845e09cfd" translate="yes" xml:space="preserve">
          <source>this will work since age will never have a value that will not make sense and the code follows the logic of your &quot;business process&quot;</source>
          <target state="translated">이것은 나이가 의미가없는 가치를 가지지 않기 때문에 작동하며 코드는 &quot;비즈니스 프로세스&quot;의 논리를 따릅니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
