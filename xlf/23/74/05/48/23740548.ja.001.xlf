<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/23740548">
    <body>
      <group id="23740548">
        <trans-unit id="46eec30438cc774dfe89ee6fc8322ef329974f81" translate="yes" xml:space="preserve">
          <source>-After trying this for a while</source>
          <target state="translated">-これをしばらく試してみて</target>
        </trans-unit>
        <trans-unit id="862341ae9494327cda571a07ef73a817052026e7" translate="yes" xml:space="preserve">
          <source>1. Use AJAX to get the data you need from the server</source>
          <target state="translated">1.サーバーから必要なデータを取得するためにAJAXを使用する</target>
        </trans-unit>
        <trans-unit id="d4c2d7c60449a4e8a50591946728b8a55af5c574" translate="yes" xml:space="preserve">
          <source>2. Echo the data into the page somewhere, and use JavaScript to get the information from the DOM</source>
          <target state="translated">2.データをどこかのページにエコーして、JavaScriptを使ってDOMから情報を取得する</target>
        </trans-unit>
        <trans-unit id="d546fa1ec8ac92e73b01fef0eec4306cdbb7922b" translate="yes" xml:space="preserve">
          <source>3. Echo the data directly to JavaScript</source>
          <target state="translated">3.データを直接JavaScriptにエコーする</target>
        </trans-unit>
        <trans-unit id="8ad8c9c0edec3fbde987709801a7a144ff369744" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.php.net/manual/en/function.setcookie.php&quot;&gt;Setting a cookie&lt;/a&gt; is really not very difficult, you just assign it a value:</source>
          <target state="translated">&lt;a href=&quot;http://www.php.net/manual/en/function.setcookie.php&quot;&gt;Cookieの設定&lt;/a&gt;はそれほど難しくありません。値を割り当てるだけです。</target>
        </trans-unit>
        <trans-unit id="ccb0fc54a2d30cd9681fbe79d88f9fb00705ace9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$PHPVar&lt;/code&gt; encoded as UTF-8, Unicode.</source>
          <target state="translated">&lt;code&gt;$PHPVar&lt;/code&gt; 、UTF-8、Unicodeとしてエンコードされています。</target>
        </trans-unit>
        <trans-unit id="e6aa5105da17aeb29cfb7228192ee1fe3f079c69" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest&quot;&gt;Using XMLHttpRequest - MDN&lt;/a&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest&quot;&gt;XMLHttpRequestの使用-MDN&lt;/a&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="12538cb28bb57e2de5e2e36e792f1d468f0b79e9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest&quot;&gt;XMLHttpRequest object reference - MDN&lt;/a&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest&quot;&gt;XMLHttpRequestオブジェクトリファレンス-MDN&lt;/a&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fef4cf36ef38d6a43241496d862b3b0e14229d31" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;a href=&quot;https://stackoverflow.com/questions/14220321/how-to-return-the-response-from-an-ajax-call&quot;&gt;How do I return the response from an asynchronous call?&lt;/a&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;https://stackoverflow.com/questions/14220321/how-to-return-the-response-from-an-ajax-call&quot;&gt;非同期呼び出しから応答を返すにはどうすればよいですか？&lt;/a&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dc8002d44629e19fb8be35797acc3d6a95bf69ef" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Allows for asynchronous data transfer&lt;/strong&gt; - Getting the information from PHP might be time/resources expensive. Sometimes you just don't want to wait for the information, load the page, and have the information reach whenever.</source>
          <target state="translated">&lt;strong&gt;非同期データ転送が可能-PHP&lt;/strong&gt;から情報を取得すると、時間/リソースが高くなる可能性があります。 場合によっては、情報を待ち、ページをロードし、いつでも情報に到達したくないことがあります。</target>
        </trans-unit>
        <trans-unit id="10c7bb50f381a1578a2d3b11326496c69af1ab61" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Better separation between layers&lt;/strong&gt; - If tomorrow you stop using PHP, and want to move to a servlet, a REST API, or some other service, you don't have to change much of the JavaScript code.</source>
          <target state="translated">&lt;strong&gt;レイヤー間の分離の改善&lt;/strong&gt; -明日、PHPの使用を中止し、サーブレット、REST API、またはその他のサービスに移行する場合、JavaScriptコードの多くを変更する必要はありません。</target>
        </trans-unit>
        <trans-unit id="af5e48ceb48ed07de598bfb063f04f1de1679311" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Data is not directly found on the markup&lt;/strong&gt; - This means that your markup is kept clean of any additional data, and only JavaScript sees it.</source>
          <target state="translated">&lt;strong&gt;マークアップでデータが直接検出されない&lt;/strong&gt; -これは、マークアップが追加データを含まないように保たれ、JavaScriptのみがそれを認識できることを意味します。</target>
        </trans-unit>
        <trans-unit id="e760b2ca0e6a5121c1ae41a18ca3fbeffb5c5f64" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Dirties up the Source&lt;/strong&gt; - Data that PHP generates is outputted directly to the HTML source, meaning that you get a bigger and less focused HTML source.</source>
          <target state="translated">&lt;strong&gt;ソースを汚す-PHPが&lt;/strong&gt;生成するデータは、直接HTMLソースに出力されます。つまり、より大きく焦点が絞られていないHTMLソースを取得します。</target>
        </trans-unit>
        <trans-unit id="d23c2645362bec7cbfffeaa8030ab34246141ca0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Does not dirty source&lt;/strong&gt; - Variables are outputted directly to JavaScript, so the DOM is not affected.</source>
          <target state="translated">&lt;strong&gt;ソースを汚染しない&lt;/strong&gt; -変数はJavaScriptに直接出力されるため、DOMは影響を受けません。</target>
        </trans-unit>
        <trans-unit id="4f1f2d1ba0a7e969d5df6fdb8a7f2b397072df69" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;EDIT&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;EDIT&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a8efcde412aa0784b1cf3438ab9e0970583f8316" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Encode the variable as JSON&lt;/strong&gt; - JSON looks very close to JavaScript objects and &lt;em&gt;most&lt;/em&gt; JSON objects are valid JavaScript variables.</source>
          <target state="translated">&lt;strong&gt;変数をJSONとしてエンコード-JSONは&lt;/strong&gt; JavaScriptオブジェクトに非常に近く、 &lt;em&gt;ほとんどの&lt;/em&gt; JSONオブジェクトは有効なJavaScript変数です。</target>
        </trans-unit>
        <trans-unit id="b00a400c5865b38d4a89f1b5a752e46beb1ee71a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fast&lt;/strong&gt; - DOM operations are often quick, and you can store and access a lot of data relatively quickly.</source>
          <target state="translated">&lt;strong&gt;高速&lt;/strong&gt; -多くの場合、DOM操作は高速であり、多くのデータを比較的迅速に格納してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="733b3e090efc1ab3767d95e0ec4f08a1357ab427" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Harder to get structured data&lt;/strong&gt; - Structured data will have to be valid HTML, otherwise you'll have to escape and convert strings yourself.</source>
          <target state="translated">&lt;strong&gt;構造化データを取得するのが難しい&lt;/strong&gt; -構造化データは有効なHTMLである必要があります。そうでなければ、文字列をエスケープして変換する必要があります。</target>
        </trans-unit>
        <trans-unit id="34128605373047345591619006457e85b5c1f1b4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JS&lt;/strong&gt;&lt;em&gt;(yourexternal.js)&lt;/em&gt;</source>
          <target state="translated">&lt;strong&gt;JS&lt;/strong&gt;&lt;em&gt;(yourexternal.js)&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c84101ad7c4a0f6775e58c6652b6c6ae94763990" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Latency&lt;/strong&gt; - AJAX creates an HTTP request, and HTTP requests are carried over network and have network latencies.</source>
          <target state="translated">&lt;strong&gt;レイテンシ&lt;/strong&gt; -AJAXはHTTPリクエストを作成し、HTTPリクエストはネットワーク経由で伝送され、ネットワークレイテンシがあります。</target>
        </trans-unit>
        <trans-unit id="d080282a7ebce3dc7e3a2709dd1cf6ce26546537" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;More readable&lt;/strong&gt; - JavaScript is JavaScript, PHP is PHP. Without mixing the two, you get more readable code on both languages.</source>
          <target state="translated">&lt;strong&gt;より読みやすい&lt;/strong&gt; -JavaScriptはJavaScript、PHPはPHPです。 2つを混合しないと、両方の言語でより読みやすいコードが得られます。</target>
        </trans-unit>
        <trans-unit id="f8e01739d5b6815e58b82ad6033855dbc821cb51" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;OR&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;OR&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5b86f02d233610bf5027dc98685331fe1c7e25ab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;OUTPUT&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;OUTPUT&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="226c6d195092d25e48f4779200988ceb25b71b01" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Output&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;Output&lt;/strong&gt;:</target>
        </trans-unit>
        <trans-unit id="c0ea0dc97baa1d4c675361104fa844e8cea6bf02" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;PHP&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;PHP&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6f95e90683350b47754a297318c573269d8508ef" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Postscript:&lt;/strong&gt; You have to be &lt;em&gt;very&lt;/em&gt; aware of XSS attack vectors when you inject anything from PHP to JavaScript. It's &lt;em&gt;very&lt;/em&gt; hard to escape values properly and it's context sensitive. If you're unsure how to deal with XSS, or unaware of it - please read &lt;a href=&quot;https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)&quot;&gt;this OWASP article&lt;/a&gt;, &lt;a href=&quot;https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet&quot;&gt;this one&lt;/a&gt; and &lt;a href=&quot;https://stackoverflow.com/questions/71328/what-are-the-best-practices-for-avoiding-xss-attacks-in-a-php-site&quot;&gt;this question&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;追記：&lt;/strong&gt; PHPからJavaScriptに何かを注入するときは、XSS攻撃ベクトルに十分注意する必要があります。 値を適切にエスケープすることは&lt;em&gt;非常に&lt;/em&gt;難しく、状況依存です。 XSSの扱い方がわからない場合、またはXSSを認識していない場合は&lt;a href=&quot;https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)&quot;&gt;、OWASPの記事&lt;/a&gt; 、 &lt;a href=&quot;https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet&quot;&gt;この&lt;/a&gt; 記事 、および&lt;a href=&quot;https://stackoverflow.com/questions/71328/what-are-the-best-practices-for-avoiding-xss-attacks-in-a-php-site&quot;&gt;この質問&lt;/a&gt;をお読みください。</target>
        </trans-unit>
        <trans-unit id="008d12f30693a6dfdddb775daaf95b3aec1f33b3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Potentially Unsemantic Markup&lt;/strong&gt; - Usually, what happens is that you use some sort of &lt;code&gt;&amp;lt;input type=hidden&amp;gt;&lt;/code&gt; to store the information, because it's easier to get the information out of &lt;code&gt;inputNode.value&lt;/code&gt;, but doing so means that you have a meaningless element in your HTML. HTML has the &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; element for data about the document, and HTML 5 introduces &lt;code&gt;data-*&lt;/code&gt; attributes for data specifically for reading with JavaScript that can be associated with particular elements.</source>
          <target state="translated">&lt;strong&gt;意味のない可能性のあるマークアップ&lt;/strong&gt; -通常、情報を格納するために何らかの &lt;code&gt;&amp;lt;input type=hidden&amp;gt;&lt;/code&gt; を使用しますが、 &lt;code&gt;inputNode.value&lt;/code&gt; から情報を取得する方が簡単ですが、そうすると意味のない要素が含まれますあなたのHTML。 HTMLには、ドキュメントに関するデータの &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; 要素があり、HTML 5では、特定の要素に関連付けることができるJavaScriptでの読み取り専用の &lt;code&gt;data-*&lt;/code&gt; 属性が導入されています。</target>
        </trans-unit>
        <trans-unit id="298deaf78fc9d84f89b8dd403d2b57c8597230b8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;STEP 1&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ステップ1&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cf565f25a6f29853f22c43df4846df3d2f59f474" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;STEP 2&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ステップ2&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fb67fb2211bcefe810184c828bb2d3f1c746b855" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Set a cookie&lt;/strong&gt; - cookies are headers sent in HTTP requests that both the server and client can read.</source>
          <target state="translated">&lt;strong&gt;Cookieを設定する-Cookie&lt;/strong&gt;は、サーバーとクライアントの両方が読み取ることができるHTTPリクエストで送信されるヘッダーです。</target>
        </trans-unit>
        <trans-unit id="b1a93cc84e675d25be823ba0798f571385163387" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Simply use one of the following methods.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;以下のいずれかの方法を使用してください。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e1c6d882c37f5a67c2e26e186fe16ff93e4ba82f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;State&lt;/strong&gt; - Data fetched via a separate HTTP request won't include any information from the HTTP request that fetched the HTML document. You may need this information (e.g., if the HTML document is generated in response to a form submission) and, if you do, will have to transfer it across somehow. If you have ruled out embedding the data in the page (which you have if you are using this technique) then that limits you to cookies/sessions which may be subject to race conditions.</source>
          <target state="translated">&lt;strong&gt;状態&lt;/strong&gt; -別のHTTPリクエストを介してフェッチされたデータには、HTMLドキュメントをフェッチしたHTTPリクエストからの情報は含まれません。 この情報が必要になる場合があります（たとえば、フォームの送信に応答してHTMLドキュメントが生成される場合）。必要な場合は、何らかの方法で転送する必要があります。 ページにデータを埋め込むことを除外した場合（この手法を使用している場合にそうなります）、それにより、競合状態の影響を受ける可能性のあるCookie /セッションに制限されます。</target>
        </trans-unit>
        <trans-unit id="fe8449584afd652ee96e5a74a972156ec3b9cf1f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Tightly couples PHP to your data logic&lt;/strong&gt; - Because PHP is used in presentation, you can't separate the two cleanly.</source>
          <target state="translated">&lt;strong&gt;PHPをデータロジックに緊密に結合-PHP&lt;/strong&gt;はプレゼンテーションで使用されるため、2つを完全に分離することはできません。</target>
        </trans-unit>
        <trans-unit id="aad7c87eb312788d6d0ca28c9179b01c72dc28de" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Very easily implemented&lt;/strong&gt; - It takes very little to implement this, and understand.</source>
          <target state="translated">&lt;strong&gt;非常に簡単に実装&lt;/strong&gt; -これを実装して理解するのに必要なことはほとんどありません。</target>
        </trans-unit>
        <trans-unit id="d0c4ef37b3faa43c6825a3a747130178439dac04" translate="yes" xml:space="preserve">
          <source>A complete tutorial can be found &lt;a href=&quot;http://qnimate.com/assign-javascript-variables-using-wordpressphp/&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">完全なチュートリアルは&lt;a href=&quot;http://qnimate.com/assign-javascript-variables-using-wordpressphp/&quot;&gt;ここにあります&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="c439e86e818ec76af3a3fd77e3e1a18e5ad28b4e" translate="yes" xml:space="preserve">
          <source>After much research, I found the easiest method is to pass all kinds of variables easily.</source>
          <target state="translated">いろいろ調べた結果、一番簡単な方法は、すべての種類の変数を簡単に渡すことだとわかりました。</target>
        </trans-unit>
        <trans-unit id="c74b4cb177cfc424544fa7f4912bde5042a2cef3" translate="yes" xml:space="preserve">
          <source>Also you should note that the PHP code output is insecure and should be filtered with &lt;code&gt;json_encode()&lt;/code&gt;.</source>
          <target state="translated">また、PHPコードの出力は安全ではなく、 &lt;code&gt;json_encode()&lt;/code&gt; でフィルタリングする必要があることにも注意してください。</target>
        </trans-unit>
        <trans-unit id="69949a2d3916283fd36fd850404fc48c56ce668b" translate="yes" xml:space="preserve">
          <source>Although it works, however it slows down the performance. As PHP is a server-side script while JavaScript is a user side.</source>
          <target state="translated">動作はしますが、パフォーマンスが遅くなります。PHPはサーバーサイドのスクリプトであるのに対し、JavaScriptはユーザーサイドのスクリプトです。</target>
        </trans-unit>
        <trans-unit id="7820f70754b5d5e61dd409d6ef8b1bba8fc3fb87" translate="yes" xml:space="preserve">
          <source>Am I writing a website or an application?</source>
          <target state="translated">ホームページを書くのか、アプリを書くのか?</target>
        </trans-unit>
        <trans-unit id="a01e33f4dcdb6ba1ae9f34a97cf8f6deeedf1a8d" translate="yes" xml:space="preserve">
          <source>And</source>
          <target state="translated">And</target>
        </trans-unit>
        <trans-unit id="29023f9af8c36cba36059ee86f933ef640033d91" translate="yes" xml:space="preserve">
          <source>And your JavaScript code looks like this:</source>
          <target state="translated">そして、あなたのJavaScriptのコードは次のようになります。</target>
        </trans-unit>
        <trans-unit id="cd368b723a066eda6d70720191b43b06f7eda3f8" translate="yes" xml:space="preserve">
          <source>And, &lt;code&gt;print_scripts()&lt;/code&gt; method of the above example will send this output:</source>
          <target state="translated">そして、上記の例の &lt;code&gt;print_scripts()&lt;/code&gt; メソッドはこの出力を送信します：</target>
        </trans-unit>
        <trans-unit id="b291beb8793f4f3308c463951165dad483715a6c" translate="yes" xml:space="preserve">
          <source>Application</source>
          <target state="translated">Application</target>
        </trans-unit>
        <trans-unit id="8fd06dd0460aa42824404dde19644aba3a0c2914" translate="yes" xml:space="preserve">
          <source>As @Second Rikudo points out, for it to work correctly &lt;code&gt;$val&lt;/code&gt; would need to contain the closing parenthesis, for example: &lt;code&gt;$val=&quot;42);&quot;&lt;/code&gt;</source>
          <target state="translated">@Second Rikudoが指摘しているように、正しく機能するためには、 &lt;code&gt;$val&lt;/code&gt; 右括弧を含める必要があります。例： &lt;code&gt;$val=&quot;42);&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="82152b3e2ef4efcab6d6236fa8d91f4468fa798e" translate="yes" xml:space="preserve">
          <source>As other commenters have stated, AJAX is one possible solution, but the cons outweigh the pros: it has a latency and it is harder to program (it needs the code to retrieve the value both server- and client-side), when a simpler escaping function should suffice.</source>
          <target state="translated">他のコメンターが述べているように、AJAXは1つの可能性のある解決策ですが、短所は長所を上回ります:それはレイテンシーを持っており、プログラムするのが難しくなります(サーバー側とクライアント側の両方で値を取得するコードが必要です)。</target>
        </trans-unit>
        <trans-unit id="164c63d22cd065bb4bc3fc7baf2dbd2ec61a2357" translate="yes" xml:space="preserve">
          <source>As per your code</source>
          <target state="translated">あなたのコード通りに</target>
        </trans-unit>
        <trans-unit id="3a44722e596bef5ceddfae3350cdd1b6136ffdd1" translate="yes" xml:space="preserve">
          <source>Assuming &lt;code&gt;$value&lt;/code&gt; is &lt;code&gt;json_encode&lt;/code&gt;able on the PHP side (it usually is). This technique is what Stack Overflow does with its chat for example (only using .NET instead of PHP).</source>
          <target state="translated">&lt;code&gt;$value&lt;/code&gt; がPHP側で &lt;code&gt;json_encode&lt;/code&gt; 可能であると想定します （通常は可能です）。 この手法は、たとえばStack Overflowがチャットで行うものです（PHPの代わりに.NETのみを使用）。</target>
        </trans-unit>
        <trans-unit id="c118b0b0e835e36366353b7b99dc3946b9eed95e" translate="yes" xml:space="preserve">
          <source>Because I didn't notice the missing parenthesis in &lt;code&gt;myPlugin.start(&amp;lt;?=$val?&amp;gt;&lt;/code&gt; :-\</source>
          <target state="translated">&lt;code&gt;myPlugin.start(&amp;lt;?=$val?&amp;gt;&lt;/code&gt; ：-\に括弧がないことに気づかなかったため</target>
        </trans-unit>
        <trans-unit id="64f754f22c7ea2f537581583a9e1795173d0aedb" translate="yes" xml:space="preserve">
          <source>But in JavaScript this is a syntax error.</source>
          <target state="translated">しかし、JavaScriptではこれは構文エラーです。</target>
        </trans-unit>
        <trans-unit id="d1a608b56b4924aac3d153ca85219dcb34e76a9e" translate="yes" xml:space="preserve">
          <source>But there's a big gotcha. If you're using it in events, you need to run &lt;code&gt;htmlspecialchars()&lt;/code&gt; on the result in order to make it correct code. And then you have to either be careful to use double quotes to enclose the event, or always add &lt;code&gt;ENT_QUOTES&lt;/code&gt; to htmlspecialchars. For example:</source>
          <target state="translated">しかし、大きな落とし穴があります。 イベントで使用している場合は、結果に対して &lt;code&gt;htmlspecialchars()&lt;/code&gt; を実行して、コードを正しくする必要があります。 そして、イベントを囲むために二重引用符を使用するように注意するか、常にhtmlspecialcharsに &lt;code&gt;ENT_QUOTES&lt;/code&gt; を追加する必要があります。 例えば：</target>
        </trans-unit>
        <trans-unit id="317f903d7b7564d2ab36ba047922882bbb8794a6" translate="yes" xml:space="preserve">
          <source>Call &lt;em&gt;AJAX&lt;/em&gt; to recieve &lt;em&gt;JSON&lt;/em&gt; file</source>
          <target state="translated">&lt;em&gt;AJAX&lt;/em&gt;を呼び出して&lt;em&gt;JSON&lt;/em&gt;ファイルを受信する</target>
        </trans-unit>
        <trans-unit id="0fce782e49b19de850642908a7ec08707b6cfa53" translate="yes" xml:space="preserve">
          <source>Cons</source>
          <target state="translated">Cons</target>
        </trans-unit>
        <trans-unit id="2dd9f4cc14ec1bf52b6278d055d1483dda369c44" translate="yes" xml:space="preserve">
          <source>Console output</source>
          <target state="translated">コンソール出力</target>
        </trans-unit>
        <trans-unit id="bd9b735341ec69897d1e20d25163dd94c6dadd2b" translate="yes" xml:space="preserve">
          <source>Convert &lt;em&gt;JSON&lt;/em&gt; into &lt;em&gt;Javascript&lt;/em&gt; object</source>
          <target state="translated">&lt;em&gt;JSON&lt;/em&gt;を&lt;em&gt;JavaScript&lt;/em&gt;オブジェクトに変換する</target>
        </trans-unit>
        <trans-unit id="72f0b5653e89c4baa4b3ab62dc42c03c457100e0" translate="yes" xml:space="preserve">
          <source>Convert the data into &lt;em&gt;JSON&lt;/em&gt;</source>
          <target state="translated">データを&lt;em&gt;JSONに&lt;/em&gt;変換する</target>
        </trans-unit>
        <trans-unit id="dc86b372fd5d410744764f31f04997c73988b44e" translate="yes" xml:space="preserve">
          <source>Cookies are good for a little data. This is what tracking services often do.</source>
          <target state="translated">クッキーはちょっとしたデータを取るのにいいですよね。これはトラッキングサービスがよくやっていることです。</target>
        </trans-unit>
        <trans-unit id="68c8137816197867081029b6f0f3cde8f1113ffe" translate="yes" xml:space="preserve">
          <source>Echo the data directly to JavaScript.</source>
          <target state="translated">データを直接JavaScriptにエコーします。</target>
        </trans-unit>
        <trans-unit id="5e354e4af87a2f3e24a346e30b270f4b3dcd6f8d" translate="yes" xml:space="preserve">
          <source>Echo the data into the page somewhere, and use JavaScript to get the information from the DOM.</source>
          <target state="translated">データをどこかのページにエコーして、JavaScriptを使ってDOMから情報を取得します。</target>
        </trans-unit>
        <trans-unit id="3a1dacae667cdf3b83bd2c5ed36666b2c0c74153" translate="yes" xml:space="preserve">
          <source>Encode what the server had to say in the initial request.</source>
          <target state="translated">サーバーが最初のリクエストで言ったことをエンコードします。</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="cdb5b3a12ec034b209bab623c4ce3a3671ca0676" translate="yes" xml:space="preserve">
          <source>Explanation of the problem</source>
          <target state="translated">問題点の説明</target>
        </trans-unit>
        <trans-unit id="64eeb1e8052d2c09ab850b1b746650979268dd7c" translate="yes" xml:space="preserve">
          <source>First PHP is run, it generates the HTML that is served to the client.</source>
          <target state="translated">最初にPHPが実行され、クライアントに提供されるHTMLを生成します。</target>
        </trans-unit>
        <trans-unit id="7c1147e46e98fc4b1d30aa11d0172cafb2edc8f3" translate="yes" xml:space="preserve">
          <source>First, let's understand the flow of events when a page is served from our server:</source>
          <target state="translated">まず、サーバーからページが提供されたときのイベントの流れを理解してみましょう。</target>
        </trans-unit>
        <trans-unit id="3b3167511d5c059c2404a798c3f217c821b0b98e" translate="yes" xml:space="preserve">
          <source>First, set a script's source directly to a PHP file.</source>
          <target state="translated">まず、スクリプトのソースを直接PHPファイルに設定します。</target>
        </trans-unit>
        <trans-unit id="0d58205f97c9d7eb168226cdf232ff6a57d8750d" translate="yes" xml:space="preserve">
          <source>For those who have some problem using below code and it keep showing &lt;code&gt;&amp;lt;?php echo $username?&amp;gt;&lt;/code&gt; or something like this, go edit the httpd.conf in the mime_module section by add this 'AddType application/x-httpd-php .html .htm' because it may be disabled by default.</source>
          <target state="translated">以下のコードの使用に問題があり、 &lt;code&gt;&amp;lt;?php echo $username?&amp;gt;&lt;/code&gt; またはこのようなものが表示され続ける場合は、この 'AddType application / x-httpd-php .htmlを追加して、mime_moduleセクションのhttpd.confを編集します.htm 'デフォルトでは無効になっている可能性があるため。</target>
        </trans-unit>
        <trans-unit id="8e30d6aac813417d581bd798bb4422107881ac34" translate="yes" xml:space="preserve">
          <source>Good luck!</source>
          <target state="translated">頑張れ!</target>
        </trans-unit>
        <trans-unit id="beac9a7099547c58790a38aa21decac1317eb57e" translate="yes" xml:space="preserve">
          <source>Here is a short hand rolled parser, but the answer I linked to right above this has better tested ones:</source>
          <target state="translated">ここに短い手巻きパーサーがありますが、右上にリンクした答えは、より良いテスト済みのものを持っています。</target>
        </trans-unit>
        <trans-unit id="61d33eda66526ac9e5b34e0b5e5036ca3a5484ee" translate="yes" xml:space="preserve">
          <source>Here is is the trick:</source>
          <target state="translated">ここにコツがあります。</target>
        </trans-unit>
        <trans-unit id="bcb62a51d573957d494f7c013f964cc6c8a67423" translate="yes" xml:space="preserve">
          <source>Here is one I do not see posted as an option. It is similar to using Ajax, but clearly different.</source>
          <target state="translated">ここにはオプションとして投稿されていないものがあります。Ajaxを使うのと似ていますが、明らかに違います。</target>
        </trans-unit>
        <trans-unit id="ddf703231aacf673416bffbd9d07075b0d7fe71a" translate="yes" xml:space="preserve">
          <source>Here is the JavaScript code</source>
          <target state="translated">ここにJavaScriptのコードがあります。</target>
        </trans-unit>
        <trans-unit id="9cf080919dfc82edac7797598bdc2917b01a82bc" translate="yes" xml:space="preserve">
          <source>Here is your &lt;strong&gt;'PHP'&lt;/strong&gt; to use that variable:</source>
          <target state="translated">以下は、その変数を使用するための&lt;strong&gt;「PHP」&lt;/strong&gt;です。</target>
        </trans-unit>
        <trans-unit id="7447988092dd326f69095975e256793b6ee5fc9b" translate="yes" xml:space="preserve">
          <source>How do I pass variables and data from PHP to JavaScript</source>
          <target state="translated">PHPからJavaScriptに変数やデータを渡す方法</target>
        </trans-unit>
        <trans-unit id="2de995d6a21f5ba6542676ca487b3feceb18aa34" translate="yes" xml:space="preserve">
          <source>However, you can't use &lt;code&gt;htmlspecialchars&lt;/code&gt; on regular JavaScript code (code enclosed in &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;...&lt;code&gt;&amp;lt;/script&amp;gt;&lt;/code&gt; tags). That makes use of this function prone to mistakes, by forgetting to &lt;code&gt;htmlspecialchars&lt;/code&gt; the result when writing event code.</source>
          <target state="translated">ただし、通常のJavaScriptコード（ &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; ... &lt;code&gt;&amp;lt;/script&amp;gt;&lt;/code&gt; タグで囲まれたコード）では &lt;code&gt;htmlspecialchars&lt;/code&gt; を使用できません。 これは、イベントコードを書き込むときに結果を &lt;code&gt;htmlspecialchars&lt;/code&gt; に忘れることによって、この関数を間違いに利用しやすくします。</target>
        </trans-unit>
        <trans-unit id="f205480dde098e0ceb6af5bbb02af0b31e4bbddd" translate="yes" xml:space="preserve">
          <source>I have JavaScript code that needs &lt;code&gt;val&lt;/code&gt; and looks along the lines of:</source>
          <target state="translated">&lt;code&gt;val&lt;/code&gt; を必要とし、次の行に沿って見えるJavaScriptコードがあります。</target>
        </trans-unit>
        <trans-unit id="6be29b03831ced1f45ac2b7208c97ecd67d127d3" translate="yes" xml:space="preserve">
          <source>I have a variable in PHP, and I need its value in my JavaScript code. How can I get my variable from PHP to JavaScript?</source>
          <target state="translated">PHPに変数を持っていますが、その値がJavaScriptのコードに必要です。どのようにしてPHPからJavaScriptに変数を取得することができますか?</target>
        </trans-unit>
        <trans-unit id="89b02d2b4b59dce9f89219584bf077cb3e047ff9" translate="yes" xml:space="preserve">
          <source>I have code that looks like this:</source>
          <target state="translated">こんな感じのコードを持っています。</target>
        </trans-unit>
        <trans-unit id="8082d8cf01987bd2024be4ab2444fbd234ba939d" translate="yes" xml:space="preserve">
          <source>I have come out with an easy method to assign JavaScript variables using PHP.</source>
          <target state="translated">PHPを使ってJavaScriptの変数を代入する簡単な方法が出てきました。</target>
        </trans-unit>
        <trans-unit id="68c264ab997254314e73ef260dbbff7c2eebca39" translate="yes" xml:space="preserve">
          <source>I quite like the way the WordPress works with its &lt;a href=&quot;http://codex.wordpress.org/Function_Reference/wp_enqueue_script&quot;&gt;enqueue&lt;/a&gt; and &lt;a href=&quot;http://codex.wordpress.org/Function_Reference/wp_localize_script&quot;&gt;localize&lt;/a&gt; functions, so following that model, I wrote a simple class for putting a scripts into page according to the script dependencies, and for making additional data available for the script.</source>
          <target state="translated">WordPressの&lt;a href=&quot;http://codex.wordpress.org/Function_Reference/wp_enqueue_script&quot;&gt;エンキュー&lt;/a&gt;機能と&lt;a href=&quot;http://codex.wordpress.org/Function_Reference/wp_localize_script&quot;&gt;ローカライズ&lt;/a&gt;機能の動作がとても気に入っているので、そのモデルに従って、スクリプトの依存関係に従ってスクリプトをページに配置し、スクリプトで追加のデータを利用できるようにする簡単なクラスを作成しました。</target>
        </trans-unit>
        <trans-unit id="8bf317e8eed1372b6549dd6f1a1e7180202cc7db" translate="yes" xml:space="preserve">
          <source>I usually use data-* attributes in HTML.</source>
          <target state="translated">私は普段、HTMLではdata-*属性を使っています。</target>
        </trans-unit>
        <trans-unit id="ce6e20fee9e1027b19ea63c6b1b2755152f93df7" translate="yes" xml:space="preserve">
          <source>I would &lt;em&gt;not&lt;/em&gt; recommend making another request &lt;em&gt;unless your site is an application&lt;/em&gt; for getting that information from the server.</source>
          <target state="translated">&lt;em&gt;サイトが&lt;/em&gt;サーバーから情報を取得するため&lt;em&gt;のアプリケーション&lt;/em&gt;で&lt;em&gt;ない限り、&lt;/em&gt;別のリクエストを行うこと&lt;em&gt;は&lt;/em&gt;お勧めし&lt;em&gt;ません&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="ea8815b5031f3bc30ddd0b55289d44e66321d03f" translate="yes" xml:space="preserve">
          <source>I'll assume that the data to transmit is a string.</source>
          <target state="translated">送信するデータは文字列だと思っておく。</target>
        </trans-unit>
        <trans-unit id="a6c4fe8cac40c48cf80aded9c2c2026061a8f4b6" translate="yes" xml:space="preserve">
          <source>I'm going to try a simpler answer:</source>
          <target state="translated">もっとシンプルな答えを出してみる。</target>
        </trans-unit>
        <trans-unit id="0a13bc97160fe132329442cd8f2d20a4245d1bcd" translate="yes" xml:space="preserve">
          <source>If you're writing an application - suddenly the initial load time isn't always as important as the ongoing performance of the application, and it starts to pay off to load data and code separately.</source>
          <target state="translated">アプリケーションを書いている場合-突然、最初のロード時間はアプリケーションの継続的なパフォーマンスほど重要ではなく、データとコードを別々にロードすることが有益であることがわかります。</target>
        </trans-unit>
        <trans-unit id="ddf54c58245dfd07b5f8af3f7f8cb68d527d86a2" translate="yes" xml:space="preserve">
          <source>Implementation Example</source>
          <target state="translated">実装例</target>
        </trans-unit>
        <trans-unit id="1bbd085e7cab3189e6219acec776d97464e0179e" translate="yes" xml:space="preserve">
          <source>Implementation is relatively straightforward:</source>
          <target state="translated">実装は比較的簡単です。</target>
        </trans-unit>
        <trans-unit id="b32f566fe85d5afe02db0c806334334aaaa0746c" translate="yes" xml:space="preserve">
          <source>In any of your JavaScript code called on the page, simply call those variables.</source>
          <target state="translated">ページ上で呼び出されるJavaScriptのコードの中で、これらの変数を呼び出すだけです。</target>
        </trans-unit>
        <trans-unit id="709dcab1528bab051ad73bb55366dd3a9b5d739f" translate="yes" xml:space="preserve">
          <source>In no particular order:</source>
          <target state="translated">順不同です。</target>
        </trans-unit>
        <trans-unit id="558aa7016f0efeff04b711ada0d3ebab7db88a0e" translate="yes" xml:space="preserve">
          <source>In the server script, you have two variables, and you are trying to send them to the client scripts:</source>
          <target state="translated">サーバースクリプトでは、2つの変数があり、それらをクライアントスクリプトに送ろうとしています。</target>
        </trans-unit>
        <trans-unit id="384112f5db9aa7bf720e4c12e53aa26ef2c3f7ee" translate="yes" xml:space="preserve">
          <source>In this post, we'll examine each of the above methods, and see the pros and cons of each, as well as how to implement them.</source>
          <target state="translated">今回の記事では、上記のそれぞれの方法について、それぞれの長所と短所、実装方法を見ていきます。</target>
        </trans-unit>
        <trans-unit id="46cc4226c5a54a93c923df482f127de134bec924" translate="yes" xml:space="preserve">
          <source>It doesn't work because &lt;code&gt;$val&lt;/code&gt; is undefined as far as JavaScript is concerned, i.e. the PHP code did not output anything for &lt;code&gt;$val&lt;/code&gt;. Try viewing the source in your browser and here is what you'll see:</source>
          <target state="translated">JavaScriptに関する限り &lt;code&gt;$val&lt;/code&gt; が定義されていないため、つまり、PHPコードが &lt;code&gt;$val&lt;/code&gt; に対して何も出力しなかったため、機能しません。 ブラウザでソースを表示してみてください。表示されるのは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="7facb037bd365aa06bac702dc7ca142f124d71f3" translate="yes" xml:space="preserve">
          <source>It uses HTML5 data attributes to store PHP variables and then it's assigned to JavaScript on page load.</source>
          <target state="translated">HTML5のデータ属性を使ってPHPの変数を格納し、ページロード時にJavaScriptに代入します。</target>
        </trans-unit>
        <trans-unit id="494a40dc2d11ce0dbef08a01b0b28c311c21c249" translate="yes" xml:space="preserve">
          <source>It's possible to write a function that does not have that problem, and can be used both in events and in regular JavaScript code, as long as you enclose your events always in single quotes, or always in double quotes. Here is my proposal, requiring them to be in double quotes (which I prefer):</source>
          <target state="translated">イベントを常に一重引用符で囲むか、常に二重引用符で囲むようにすれば、この問題がなく、イベントでも通常の JavaScript コードでも使用できる関数を書くことができます。以下は私の提案で、イベントを二重引用符で囲むことを要求しています (私の好みです)。</target>
        </trans-unit>
        <trans-unit id="3e31c5e3e9f20beab60925115644ad5bdfa13944" translate="yes" xml:space="preserve">
          <source>Let's say your variable is always integer. In that case this is easier:</source>
          <target state="translated">あなたの変数が常に整数であるとしましょう。その場合は、これの方が簡単です。</target>
        </trans-unit>
        <trans-unit id="539b1634269f84e6d1b0a5512f50505fc1088004" translate="yes" xml:space="preserve">
          <source>Let's say your variable is not an integer, but if you try above method you will get something like this:</source>
          <target state="translated">変数が整数ではないとしますが、上のメソッドを実行すると以下のような結果が得られます。</target>
        </trans-unit>
        <trans-unit id="c42905fc70a76e1fcc61c03881ec129752d0f6ea" translate="yes" xml:space="preserve">
          <source>Meaning that the PHP will now produce &lt;code&gt;myPlugin.start(42);&lt;/code&gt; and will work as expected when executed by the JavaScript code.</source>
          <target state="translated">PHPが &lt;code&gt;myPlugin.start(42);&lt;/code&gt; 生成することを意味します。 また、JavaScriptコードで実行すると、期待どおりに動作します。</target>
        </trans-unit>
        <trans-unit id="1b8c9de85e6fbb0e299b3b6751348c22b18c7b8f" translate="yes" xml:space="preserve">
          <source>My answer &lt;a href=&quot;https://stackoverflow.com/questions/14220321/how-do-i-return-the-response-from-an-asynchronous-call/16825593#16825593&quot;&gt;here&lt;/a&gt; explains how to load data using AJAX in JavaScript:</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/questions/14220321/how-do-i-return-the-response-from-an-asynchronous-call/16825593#16825593&quot;&gt;ここでの&lt;/a&gt;私の答えは、JavaScriptでAJAXを使用してデータをロードする方法を説明しています。</target>
        </trans-unit>
        <trans-unit id="8f0501484184e845f57d52608b9ec3c8aa5589be" translate="yes" xml:space="preserve">
          <source>Now you can get value using DOM, use innerHTML of span id, in this case you don't need to do any call to server, or Ajax or another thing.</source>
          <target state="translated">これで、DOMを使って値を取得できるようになり、span idのinnerHTMLを使えば、サーバへの呼び出しやAjaxなどは不要になります。</target>
        </trans-unit>
        <trans-unit id="8068f871b027293d0305822f527c9cc2ca174cdd" translate="yes" xml:space="preserve">
          <source>Now you have a JavaScript variable called &lt;code&gt;'name'&lt;/code&gt;, and here is your JavaScript code to use that variable:</source>
          <target state="translated">これで &lt;code&gt;'name'&lt;/code&gt; と呼ばれるJavaScript変数ができました。その変数を使用するJavaScriptコードは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="cd1b835ef4cc7fda335fe35740e43b557d50fa20" translate="yes" xml:space="preserve">
          <source>Now, the server just needs to contain a &lt;code&gt;/your/url&lt;/code&gt; route/file that contains code that grabs the data and does something with it, in your case:</source>
          <target state="translated">ここで、サーバーには &lt;code&gt;/your/url&lt;/code&gt; route / fileを含めるだけで済みます。このファイルには、データを取得して何かを行うコードが含まれています。</target>
        </trans-unit>
        <trans-unit id="ef563b295e2f40acee867a5bd36f9f01c3a53e2d" translate="yes" xml:space="preserve">
          <source>Once we have more data, we can encode it with JSON inside a JavaScript variable instead:</source>
          <target state="translated">データが増えたら、代わりにJavaScriptの変数の中のJSONでエンコードすることができます。</target>
        </trans-unit>
        <trans-unit id="04b6afd362e171e5451b9cda1fd5570671306875" translate="yes" xml:space="preserve">
          <source>Or with jQuery:</source>
          <target state="translated">もしくはjQueryで。</target>
        </trans-unit>
        <trans-unit id="935b8c8a12491212e450a47c864d20f91db3f9f8" translate="yes" xml:space="preserve">
          <source>PHP 5.2.0 or more</source>
          <target state="translated">PHP 5.2.0以上</target>
        </trans-unit>
        <trans-unit id="84083370162d72d8f9d3e15fe561f0204aaadf33" translate="yes" xml:space="preserve">
          <source>Pros</source>
          <target state="translated">Pros</target>
        </trans-unit>
        <trans-unit id="e943bdabd69b9682d2a49eb6728d02f4e4f4f78a" translate="yes" xml:space="preserve">
          <source>Regardless the fact that the script 'jquery' is enqueued after the 'jquery-ui', it is printed before because it is defined in 'jquery-ui' that it depends on 'jquery'.
Additional data for the 'custom-script' are inside a new script block and are placed in front of it, it contains &lt;code&gt;mydata&lt;/code&gt; object that holds additional data, now available to 'custom-script'.</source>
          <target state="translated">スクリプト「jquery」が「jquery-ui」の後にエンキューされるという事実に関係なく、それは「jquery」に依存する「jquery-ui」で定義されているため、前に出力されます。 'custom-script'の追加データは新しいスクリプトブロック内にあり、その前に配置されます。追加のデータを保持する &lt;code&gt;mydata&lt;/code&gt; オブジェクトが含まれ、 'custom-script'で使用できるようになりました。</target>
        </trans-unit>
        <trans-unit id="0d25e7a07e733a6697ed9341862313ab610df792" translate="yes" xml:space="preserve">
          <source>Send more requests from the client &lt;em&gt;after&lt;/em&gt; the initial request is done.</source>
          <target state="translated">最初の要求が完了した&lt;em&gt;後&lt;/em&gt; 、クライアントからさらに要求を送信します。</target>
        </trans-unit>
        <trans-unit id="f0daee716c96994db229612b39760267e7f30bb0" translate="yes" xml:space="preserve">
          <source>Sending more requests from the client after the initial request is done is &lt;strong&gt;slow&lt;/strong&gt; as it requires more HTTP requests which have significant overhead. Moreover, it requires &lt;em&gt;asynchronousity&lt;/em&gt; as making an AJAX request requires a handler for when it's complete.</source>
          <target state="translated">最初の要求が行われた後、クライアントからより多くの要求を送信すると、かなりのオーバーヘッドを持つHTTP要求がさらに必要になるため、 &lt;strong&gt;遅くなり&lt;/strong&gt;ます。 さらに、AJAXリクエストを行うには、完了時にハンドラーが必要になるため、 &lt;em&gt;非同期性&lt;/em&gt;が必要です。</target>
        </trans-unit>
        <trans-unit id="36b9daa2428f82a34b30f9492aa4a3ea4b6fecf3" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;abcd&lt;/code&gt; in JSON is &lt;code&gt;&quot;abcd&quot;&lt;/code&gt;, it looks like this:</source>
          <target state="translated">JSONの &lt;code&gt;abcd&lt;/code&gt; は &lt;code&gt;&quot;abcd&quot;&lt;/code&gt; なので 、次のようになります。</target>
        </trans-unit>
        <trans-unit id="6dc911661d90433fc535ccd9f64a4fd2ce0a938f" translate="yes" xml:space="preserve">
          <source>So in PHP we have a function call &lt;code&gt;json_encode&lt;/code&gt; that encode string to a JSON object.</source>
          <target state="translated">PHPには、文字列をJSONオブジェクトにエンコードする &lt;code&gt;json_encode&lt;/code&gt; 関数呼び出しがあります。</target>
        </trans-unit>
        <trans-unit id="bc95d8a79911147005cceb642ebe959da78a017f" translate="yes" xml:space="preserve">
          <source>So really, the core thing to remember here is that &lt;strong&gt;HTTP is stateless&lt;/strong&gt;. Once a request left the server, the server can not touch it. So, that leaves our options to:</source>
          <target state="translated">したがって、ここで覚えておくべき中心的なことは、 &lt;strong&gt;HTTPはステートレスであること&lt;/strong&gt;です。 リクエストがサーバーを離れると、サーバーはそれにアクセスできません。 したがって、オプションは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="0232ae782ec7496a58b1ecda2b63db17bc4df3c9" translate="yes" xml:space="preserve">
          <source>So, we're back to escaping. &lt;code&gt;json_encode($string)&lt;/code&gt; works &lt;em&gt;if&lt;/em&gt; you encode the source string as UTF-8 first in case it is not already, because &lt;code&gt;json_encode&lt;/code&gt; requires UTF-8 data. If the string is in ISO-8859-1 then you can simply use &lt;code&gt;json_encode(utf8_encode($string))&lt;/code&gt;; otherwise you can always use &lt;code&gt;iconv&lt;/code&gt; to do the conversion first.</source>
          <target state="translated">それで、エスケープに戻ります。 &lt;code&gt;json_encode($string)&lt;/code&gt; は、 &lt;code&gt;json_encode&lt;/code&gt; がUTF-8データを必要とするため、ソース文字列を最初にUTF-8としてエンコードしていない場合に備えて機能します。 文字列がISO-8859-1の場合、単純に &lt;code&gt;json_encode(utf8_encode($string))&lt;/code&gt; 使用できます。 それ以外の場合は、常に &lt;code&gt;iconv&lt;/code&gt; を使用して最初に変換を行うことができます。</target>
        </trans-unit>
        <trans-unit id="05b004a92e5eda3ec6e47516b582fc25b61b35b9" translate="yes" xml:space="preserve">
          <source>Solutions</source>
          <target state="translated">Solutions</target>
        </trans-unit>
        <trans-unit id="414f1973914ff9a699ed29ac2dc98f4a89261b97" translate="yes" xml:space="preserve">
          <source>Some more reading material</source>
          <target state="translated">その他の読み物をいくつか紹介します。</target>
        </trans-unit>
        <trans-unit id="d303d8fe99ead8753ac43620504e67e444495a4a" translate="yes" xml:space="preserve">
          <source>That's the core question you should be asking yourself is:</source>
          <target state="translated">それは、あなたが自分自身に問いかけるべき核心的な問題です。</target>
        </trans-unit>
        <trans-unit id="c17dee84fbe20cbd7cf46952b6d2e914dd81a25b" translate="yes" xml:space="preserve">
          <source>The above combination of the two files will alert &lt;code&gt;42&lt;/code&gt; when the file finishes loading.</source>
          <target state="translated">上記の2つのファイルの組み合わせは、ファイルのロードが完了すると &lt;code&gt;42&lt;/code&gt; に警告します。</target>
        </trans-unit>
        <trans-unit id="3098de74828e2d89faf8205c1e204b80788ce5ab" translate="yes" xml:space="preserve">
          <source>The apple color is yellow, the strawberry color is red and the kiwi
  color is green.</source>
          <target state="translated">リンゴの色は黄色、イチゴの色は赤、キウイの色は緑です。</target>
        </trans-unit>
        <trans-unit id="df2d6642b13d7b99a1a257d4525a9179b63d431b" translate="yes" xml:space="preserve">
          <source>The call to the &lt;code&gt;enqueue_script()&lt;/code&gt; function is for adding script, setting the source and dependencies on other scripts, and additional data needed for the script.</source>
          <target state="translated">&lt;code&gt;enqueue_script()&lt;/code&gt; 関数の呼び出しは、スクリプトの追加、ソースと他のスクリプトへの依存関係の設定、およびスクリプトに必要な追加データ用です。</target>
        </trans-unit>
        <trans-unit id="60f2098fa6a6c9e65a6e087a4688e064b5e93b7b" translate="yes" xml:space="preserve">
          <source>The function requires PHP 5.4+. Example usage:</source>
          <target state="translated">この関数を使用するには PHP 5.4+が必要です。使用例。</target>
        </trans-unit>
        <trans-unit id="27c838ffc4b408d431a304030fcd64624193ea14" translate="yes" xml:space="preserve">
          <source>Then in &quot;your_php_file.php&quot;:</source>
          <target state="translated">そして、「your_php_file.php」の中の</target>
        </trans-unit>
        <trans-unit id="6e13348cd254065765f4ea515a928d4fa2d6ab9c" translate="yes" xml:space="preserve">
          <source>Then, the HTML is delivered to the client, after PHP is done with it, I'd like to emphasize that once the code leaves the server - PHP is done with it and can no longer access it.</source>
          <target state="translated">そして、PHPがそれを処理した後、HTMLがクライアントに配信されますが、私が強調したいのは、一旦コードがサーバーを離れると-PHPはそれを処理した後、それにアクセスできなくなります。</target>
        </trans-unit>
        <trans-unit id="8d3eb2239e46d313d3ae7db1193e3ffc72676396" translate="yes" xml:space="preserve">
          <source>Then, the HTML with JavaScript reaches the client, which can execute JavaScript on that HTML.</source>
          <target state="translated">そして、JavaScriptを搭載したHTMLがクライアントに届き、そのHTML上でJavaScriptを実行することができます。</target>
        </trans-unit>
        <trans-unit id="f3d8cf715946572dd0d6d6871113da4d59dbb7a7" translate="yes" xml:space="preserve">
          <source>Then, you can &lt;a href=&quot;https://stackoverflow.com/questions/5639346/shortest-function-for-reading-a-cookie-in-javascript&quot;&gt;read it with JavaScript&lt;/a&gt; using &lt;code&gt;document.cookie&lt;/code&gt;:</source>
          <target state="translated">次に、 &lt;code&gt;document.cookie&lt;/code&gt; を使用&lt;a href=&quot;https://stackoverflow.com/questions/5639346/shortest-function-for-reading-a-cookie-in-javascript&quot;&gt;してJavaScriptで読み取ることができ&lt;/a&gt; ます 。</target>
        </trans-unit>
        <trans-unit id="c084fe03c55501aa730afdae5f7a028f58de4094" translate="yes" xml:space="preserve">
          <source>There are actually several approaches to do this. Some require more overhead than others, and some are considered better than others.</source>
          <target state="translated">これを行うには、実際にはいくつかのアプローチがあります。他のものよりも多くのオーバーヘッドを必要とするものもあれば、他のものよりも優れているとされるものもあります。</target>
        </trans-unit>
        <trans-unit id="feac1ce6e2afa0a863a60c7486a1a4568bdd2fdf" translate="yes" xml:space="preserve">
          <source>This doesn't work because PHP will try to treat &lt;code&gt;myPlugin&lt;/code&gt; as a constant and when that fails it will try to treat it as the string &lt;code&gt;'myPlugin'&lt;/code&gt; which it will try to concatenate with the output of the PHP function &lt;code&gt;start()&lt;/code&gt; and since that is undefined it will produce a fatal error.</source>
          <target state="translated">PHPは &lt;code&gt;myPlugin&lt;/code&gt; を定数として処理しようとするため、これは機能しません。それが失敗すると、PHP関数 &lt;code&gt;start()&lt;/code&gt; の出力と連結しようとする文字列 &lt;code&gt;'myPlugin'&lt;/code&gt; として処理しようとします。未定義の場合、致命的なエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="fe7e574eda61e3fa9cc5e33b749a9961dbdca531" translate="yes" xml:space="preserve">
          <source>This example uses jQuery, but it can be adapted for another library or vanilla JavaScript.</source>
          <target state="translated">この例では jQuery を使用していますが、他のライブラリやバニラ JavaScript にも対応できます。</target>
        </trans-unit>
        <trans-unit id="f4d485ec2600bea1a330df3b8934fc1e855097d6" translate="yes" xml:space="preserve">
          <source>This is probably the easiest to understand.</source>
          <target state="translated">これが一番わかりやすいかもしれません。</target>
        </trans-unit>
        <trans-unit id="bc99bf322dbbdd311a8d1cd8525a8764ec3b2525" translate="yes" xml:space="preserve">
          <source>This method is considered the best, because &lt;strong&gt;your server side and client side scripts are completely separate&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;サーバー側とクライアント側のスクリプトが完全に分かれて&lt;/strong&gt;いるため、この方法が最適と考えられてい&lt;strong&gt;ます&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="817a2a8d86a0360d021ad43e19b78eba66eb8039" translate="yes" xml:space="preserve">
          <source>This method is less preferable to AJAX, but it still has its advantages. It's still &lt;em&gt;relatively&lt;/em&gt; separated between PHP and JavaScript in a sense that there is no PHP directly in the JavaScript.</source>
          <target state="translated">この方法は、AJAXよりも望ましい方法ではありませんが、依然として利点があります。 JavaScriptには直接PHPが存在しないという意味で、PHPとJavaScriptはまだ&lt;em&gt;比較的&lt;/em&gt;分離されています。</target>
        </trans-unit>
        <trans-unit id="a764cec272addae3a75e62bf06bab87a936aec4f" translate="yes" xml:space="preserve">
          <source>This way, our JavaScript file asks for the data and shows it rather than asking for code or for layout. This is cleaner and starts to pay off as the application gets higher. It's also better separation of concerns and it allows testing the client side code without any server side technology involved which is another plus.</source>
          <target state="translated">この方法では、JavaScriptファイルはコードやレイアウトを要求するのではなく、データを要求して表示します。これはよりクリーンで、アプリケーションが高機能になるにつれて効果を発揮し始めます。また、懸念事項をより明確に分離することができ、サーバーサイドの技術を介さずにクライアントサイドのコードをテストすることができ、これもプラスになります。</target>
        </trans-unit>
        <trans-unit id="b21480ff457e048e3c7a6593bfb52719279e1f05" translate="yes" xml:space="preserve">
          <source>Try this:</source>
          <target state="translated">これを試してみてください。</target>
        </trans-unit>
        <trans-unit id="25f14026851d4d9317240563a4da69d9f7427ccc" translate="yes" xml:space="preserve">
          <source>Use AJAX to get the data you need from the server.</source>
          <target state="translated">サーバーから必要なデータを取得するためにAJAXを使用します。</target>
        </trans-unit>
        <trans-unit id="bc0e34154d952ed72b15f5d9618112640d548177" translate="yes" xml:space="preserve">
          <source>Use:</source>
          <target state="translated">Use:</target>
        </trans-unit>
        <trans-unit id="2e8a57cc5c472f4ac3b071979a38e80db7e59e87" translate="yes" xml:space="preserve">
          <source>Website</source>
          <target state="translated">Website</target>
        </trans-unit>
        <trans-unit id="9d9ec8a09d1900696979b0e6e683945b24278c99" translate="yes" xml:space="preserve">
          <source>Websites are mainly page based, and the page load times needs to be as fast as possible (for example - Wikipedia). Web applications are more AJAX heavy and perform a lot of round trips to get the client fast information (for example - a stock dashboard).</source>
          <target state="translated">ウェブサイトは主にページベースであり、ページロード時間は可能な限り高速である必要があります (例-Wikipedia)。ウェブアプリケーションはよりAJAXが重く、クライアントに高速な情報を提供するために多くのラウンドトリップを実行します(例えば-株式ダッシュボード)。</target>
        </trans-unit>
        <trans-unit id="b7c0e3aafda76649c0e02fe3119acea93028b54a" translate="yes" xml:space="preserve">
          <source>While this is most likely to work, since the PHP code is producing valid JavaScript with the expected arguments, if it fails, chances are it's because &lt;code&gt;myPlugin&lt;/code&gt; isn't ready yet. Check your order of execution.</source>
          <target state="translated">これが機能する可能性が最も高いですが、PHPコードは期待される引数を使用して有効なJavaScriptを生成しているため、失敗した場合、 &lt;code&gt;myPlugin&lt;/code&gt; がまだ準備されていないことが原因である可能性があります。 実行順序を確認してください。</target>
        </trans-unit>
        <trans-unit id="c164b4ac2cac911dd7348633f6c2d71dfd32289f" translate="yes" xml:space="preserve">
          <source>With AJAX, you need two pages, one is where PHP generates the output, and the second is where JavaScript gets that output:</source>
          <target state="translated">AJAXでは、2つのページが必要です。1つはPHPが出力を生成するところで、2つ目はJavaScriptがその出力を取得するところです。</target>
        </trans-unit>
        <trans-unit id="413e55e9d66eac66f9a12aadd1c15b3bcaf80fc4" translate="yes" xml:space="preserve">
          <source>With this, the idea is to create some sort of element which will not be displayed to the user, but is visible to JavaScript.</source>
          <target state="translated">これを使えば、ユーザーには表示されないが、JavaScriptからは見えるような何らかの要素を作ることができます。</target>
        </trans-unit>
        <trans-unit id="331aa2907869a83fe8dc9692376762ae5c7e8a68" translate="yes" xml:space="preserve">
          <source>You can read more about the dataset property here: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement.dataset&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement.dataset&lt;/a&gt;</source>
          <target state="translated">データセットプロパティの詳細については、 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement.dataset&quot;&gt;https&lt;/a&gt; ： //developer.mozilla.org/en-US/docs/Web/API/HTMLElement.datasetをご覧ください。</target>
        </trans-unit>
        <trans-unit id="c9e77e702dff57a309e0f4f15f5ad6ed2ecf16a6" translate="yes" xml:space="preserve">
          <source>You can use same method for arrays:</source>
          <target state="translated">配列でも同じメソッドを使うことができます。</target>
        </trans-unit>
        <trans-unit id="a0c8d4a13ea45c5c3ec4ac14765af97fc2677c4d" translate="yes" xml:space="preserve">
          <source>You could even pass a variable back to the PHP file such as this example:</source>
          <target state="translated">この例のように、PHPファイルに変数を渡すこともできます。</target>
        </trans-unit>
        <trans-unit id="779c6c7b3025e227f3a406338c878ce8b7b4ce08" translate="yes" xml:space="preserve">
          <source>You have two ways to tackle the issue</source>
          <target state="translated">問題に取り組むには、次の2つの方法があります。</target>
        </trans-unit>
        <trans-unit id="b3ee624442b8df315cfaa849bed4a1f6347453a2" translate="yes" xml:space="preserve">
          <source>You want fast response times which have a &lt;em&gt;huge&lt;/em&gt; impact on conversion and load times. Making Ajax requests is slow for the initial uptime in this case and unneeded.</source>
          <target state="translated">変換時間と読み込み時間に&lt;em&gt;大きな&lt;/em&gt;影響を与える高速応答時間が必要です。 この場合、Ajaxリクエストの作成は初期のアップタイムが遅く、不要です。</target>
        </trans-unit>
        <trans-unit id="6da3a4d9e4b8d67c7deb98c5c4316435aa9d5b2a" translate="yes" xml:space="preserve">
          <source>Your page will print it using PHP, and you JavaScript will get value using DOM.</source>
          <target state="translated">あなたのページはPHPを使って印刷し、JavaScriptはDOMを使って値を取得します。</target>
        </trans-unit>
        <trans-unit id="5985c385fec59acb14a3dfb3afd274b5076d788c" translate="yes" xml:space="preserve">
          <source>and that will work. It's just assigning a JavaScript variable and then passing the value of an existing PHP variable. Since PHP writes the JavaScript lines here, it has the value of of the PHP variable and can pass it directly.</source>
          <target state="translated">で動作します。JavaScriptの変数を代入して、既存のPHP変数の値を渡すだけです。PHPはここにJavaScriptの行を書くので、PHP変数の値を持っているので、直接渡すことができます。</target>
        </trans-unit>
        <trans-unit id="1cc092559279170ed7e71a59d5995be436b0137f" translate="yes" xml:space="preserve">
          <source>get-data.php</source>
          <target state="translated">get-data.php</target>
        </trans-unit>
        <trans-unit id="bb6499b8e938f92a3695fff1afe57edea4b9efb7" translate="yes" xml:space="preserve">
          <source>index.php</source>
          <target state="translated">index.php</target>
        </trans-unit>
        <trans-unit id="0331c939dd50377997ef480e27946ba6c992ad55" translate="yes" xml:space="preserve">
          <source>index.php (or whatever the actual page is named like)</source>
          <target state="translated">index.php (または実際のページの名前)</target>
        </trans-unit>
        <trans-unit id="478730f4ba2a5cea495fccabc06cbed30cf87247" translate="yes" xml:space="preserve">
          <source>json_encode() requires:</source>
          <target state="translated">json_encode()が必要です。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
