<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://stackoverflow.com/questions/232535">
    <body>
      <group id="232535">
        <trans-unit id="290dca3ab720e1a5481fc7d2b2daac691a5ecb5a" translate="yes" xml:space="preserve">
          <source>(Action) matches the signature of the method to be called i.e. (&lt;code&gt;Func&amp;lt;string,string,int&amp;gt;&lt;/code&gt; or &lt;code&gt;Action&amp;lt;bool&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(Action)은 호출 할 메소드의 서명과 일치합니다 (즉, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Func&amp;lt;string,string,int&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 또는 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Action&amp;lt;bool&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="eade1fee26c0d1bbb44af59dd13e2489047a6b1f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;((Action)GenericMethod&amp;lt;object&amp;gt;)&lt;/code&gt; refers to the delegate for a specific method.  &lt;code&gt;((Func&amp;lt;string, int&amp;gt;)GenericMethod&amp;lt;object&amp;gt;)&lt;/code&gt;
refers to a different overload of GenericMethod</source>
          <target state="translated">&lt;code&gt;((Action)GenericMethod&amp;lt;object&amp;gt;)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 특정 메소드의 델리게이트를 나타냅니다. &lt;/font&gt;&lt;/font&gt; &lt;code&gt;((Func&amp;lt;string, int&amp;gt;)GenericMethod&amp;lt;object&amp;gt;)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 GenericMethod의 다른 오버로드를 나타냅니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6a0d78764959f75f1c68a022f5bd6b24043de989" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Process&lt;/code&gt; is a generic instance method that writes the real type of the passed argument (by using the &lt;code&gt;GetType()&lt;/code&gt; method) and the type of the generic parameter (by using &lt;code&gt;typeof&lt;/code&gt; operator).</source>
          <target state="translated">&lt;code&gt;Process&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 전달 된 인수의 실제 유형 ( &lt;/font&gt;&lt;/font&gt; &lt;code&gt;GetType()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 메소드 사용)과 일반 매개 변수 유형 ( &lt;/font&gt;&lt;/font&gt; &lt;code&gt;typeof&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 연산자 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;사용) &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;을 작성하는 일반 인스턴스 메소드입니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9097a22fe8a8346d04ab4f4d592127c641a5df14" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Here is a complete example&lt;/strong&gt; how to call this method to instantiate and use a &lt;code&gt;Dictionary&amp;lt;String, int&amp;gt;&lt;/code&gt; :</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다음은 &lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;Dictionary&amp;lt;String, int&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 인스턴스화하고 사용하기 위해이 메소드를 호출하는 방법에 &lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;대한 완전한 예제입니다&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b0b37dffa6e6122d271d9e18dfbb71a232abb0a0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Nobody provided the &quot;&lt;em&gt;classic Reflection&lt;/em&gt;&quot; solution, so here is a complete code example:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;아무도 &quot; &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;클래식 리플렉션&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &quot;솔루션을 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;제공하지 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;않았으므로 다음은 완전한 코드 예제입니다.&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d4b2dbb7dd3fe023446263ea126c7b75aa47f762" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;UPDATE:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;UPDATE:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d3e03bcbed0df764147b039386dd063669f0a622" translate="yes" xml:space="preserve">
          <source>Actually, if you try to get the result value in the previous example then you'll get a runtime error in the second loop iteration. This is because you tried to save the return value of a void function.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;실제로 이전 예제에서 결과 값을 얻으려고하면 두 번째 루프 반복에서 런타임 오류가 발생합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;void 함수의 반환 값을 저장하려고했기 때문입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6948afca7dccd71e85dc3ca8c088ba64645a55fb" translate="yes" xml:space="preserve">
          <source>Adding on to &lt;a href=&quot;https://stackoverflow.com/questions/232535/how-do-i-use-reflection-to-call-a-generic-method/5134251#5134251&quot;&gt;Adrian Gallero's answer&lt;/a&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/232535/how-do-i-use-reflection-to-call-a-generic-method/5134251#5134251&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Adrian Gallero의 답변&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 에 추가 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="33e2d283d2aad7d67769d4f55add11d23ef1e453" translate="yes" xml:space="preserve">
          <source>And here's the output of this program:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 프로그램의 결과는 다음과 같습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="99919dbd92d3b1040229c15105c4f8bceb3982a4" translate="yes" xml:space="preserve">
          <source>And you're done. Works a charm!</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그리고 당신은 끝났습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;매력을 발휘합니다!&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="216a63bdbdc9d45a52c7753edbb2667c6fd32804" translate="yes" xml:space="preserve">
          <source>As @Bevan highlighted, I do not need to create an array when calling the MakeGenericMethod function as it takes in params and I do not need to create an object in order to get the types as I can just pass the types directly to this function. In my case, since I have the types predefined in another class, I simply changed my code to:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Bevan이 강조했듯이 매개 변수 에서처럼 MakeGenericMethod 함수를 호출 할 때 배열을 만들 필요가 없으며 형식을이 함수에 직접 전달할 수 있으므로 형식을 얻기 위해 객체를 만들 필요가 없습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;필자의 경우 다른 클래스에서 미리 정의 된 유형이 있으므로 코드를 다음과 같이 변경했습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="799d027859f5995cd505ea490d7a05d319fff312" translate="yes" xml:space="preserve">
          <source>As I have my types predefined, I first create the &quot;dummy&quot; objects that represent the observable collection (U) and the object stored in it (T) and that will be used below to get their type when calling the Make</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;미리 정의 된 유형이 있으므로 먼저 관찰 가능한 컬렉션 (U)과 그 안에 저장된 개체 (T)를 나타내는 &quot;더미&quot;개체를 만들고 아래에서 Make를 호출 할 때 해당 형식을 가져 오는 데 사용됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bcc3a3e9403f5f488724ebeb608a3b693141e853" translate="yes" xml:space="preserve">
          <source>As noted, a lot of this is simpler as of C# 4 using &lt;code&gt;dynamic&lt;/code&gt; - if you can use type inference, of course. It doesn't help in cases where type inference isn't available, such as the exact example in the question.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;언급했듯이, C # 4에서 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 사용하는 것이 훨씬 간단 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;합니다. 물론 형식 유추를 사용할 수 있다면 가능합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;문제의 정확한 예와 같이 형식 유추를 사용할 수없는 경우에는 도움이되지 않습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bc935acf2946f21ff5a8104d6caf3a54e8ca9c72" translate="yes" xml:space="preserve">
          <source>Assume your method is defined as follows in an Helpers class:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;메소드가 헬퍼 클래스에서 다음과 같이 정의되었다고 가정하십시오.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e496fd20136d4bb7828ebb0ab925b1bd977208e4" translate="yes" xml:space="preserve">
          <source>Bar</source>
          <target state="translated">Bar</target>
        </trans-unit>
        <trans-unit id="11bbdd21c0418fc331acb348f91073f99e050d4f" translate="yes" xml:space="preserve">
          <source>Below is a simple example that illustrates how some errors can be caught at compile time (commented code) and other at runtime. It also shows how the DLR tries to resolve which method to call.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다음은 컴파일시 (코멘트 된 코드) 및 런타임시 일부 오류가 발생하는 방법을 보여주는 간단한 예입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;또한 DLR이 호출 할 메소드를 분석하는 방법을 보여줍니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2c2798ed71d0e9561c4ff9c754ef9e2ce7109cde" translate="yes" xml:space="preserve">
          <source>By casting the object argument to &lt;code&gt;dynamic&lt;/code&gt; type we deferred providing the type parameter until runtime. When the &lt;code&gt;Process&lt;/code&gt; method is called with the &lt;code&gt;dynamic&lt;/code&gt; argument then the compiler doesn't care about the type of this argument. The compiler generates code that at runtime checks the real types of passed arguments (by using reflection) and choose the best method to call. Here there is only this one generic method, so it's invoked with a proper type parameter.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;객체 인수를 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 유형으로 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;캐스트함으로써 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;런타임까지 유형 매개 변수를 제공하는 것을 연기했습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;때 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Process&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 메소드가 불려 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 인수 후 컴파일러는이 인수의 유형에 대해 상관하지 않는다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;컴파일러는 런타임에 리플렉션을 사용하여 전달 된 인수의 실제 유형을 확인하고 호출 할 최상의 메소드를 선택하는 코드를 생성합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;여기에는 하나의 일반 메소드 만 있으므로 적절한 유형 매개 변수를 사용하여 호출됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a8ab9b59067b625e5d1277f4587a383ced70d22f" translate="yes" xml:space="preserve">
          <source>Calling a generic method from type info involves three steps.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;타입 정보에서 일반 메소드를 호출하려면 세 단계가 필요합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b2de9db1a09abb77e65ac60c781e70bcfe2b06e3" translate="yes" xml:space="preserve">
          <source>Calling a generic method with a type parameter known only at runtime can be greatly simplified by using a &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/dd264741.aspx&quot;&gt;&lt;code&gt;dynamic&lt;/code&gt;&lt;/a&gt; type instead of the reflection API.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;리플렉션 API 대신 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/dd264741.aspx&quot;&gt; &lt;code&gt;dynamic&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 유형 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;을 사용하면 런타임에만 알려진 유형 매개 변수를 사용하여 일반 메소드를 호출하는 것이 크게 단순화 될 수 있습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="700051fbfe581fb9c5bfa257409b6321d2417148" translate="yes" xml:space="preserve">
          <source>Consider the following sample code - inside the &lt;code&gt;Example()&lt;/code&gt; method, what's the most concise way to invoke &lt;code&gt;GenericMethod&amp;lt;T&amp;gt;()&lt;/code&gt; using the &lt;code&gt;Type&lt;/code&gt; stored in the &lt;code&gt;myType&lt;/code&gt; variable?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다음 샘플 코드를 고려하십시오. &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Example()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 메서드 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;내에서 &lt;/font&gt; &lt;code&gt;myType&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; 변수에 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;저장된 &lt;/font&gt; &lt;code&gt;Type&lt;/code&gt; 을&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 사용하여 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;GenericMethod&amp;lt;T&amp;gt;()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 호출하는 가장 간결한 방법은 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;무엇입니까?&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2064efa8dc3c980cf7e4c32b5acd966878f7a566" translate="yes" xml:space="preserve">
          <source>Create a lambda expression where the body is a call to your desired method.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;본문이 원하는 메소드를 호출하는 람다 식을 만듭니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a217db111f67c2f7402aa3b03890c7a22a0b43dd" translate="yes" xml:space="preserve">
          <source>Extract the body and cast to MethodCallExpression</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;본문을 추출하여 MethodCallExpression으로 캐스트&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="640cece90ac2b8fb0b824605e1912102c78e8327" translate="yes" xml:space="preserve">
          <source>For a static method, pass &lt;code&gt;null&lt;/code&gt; as the first argument to &lt;code&gt;Invoke&lt;/code&gt;. That's nothing to do with generic methods - it's just normal reflection.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;정적 메소드의 경우 &lt;/font&gt; &lt;code&gt;Invoke&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; 의 첫 번째 인수로 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;null&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 을 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;전달 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하십시오 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그것은 일반적인 방법과는 아무런 관련이 없습니다. 단지 정상적인 반영 일뿐입니다.&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="55a34421347462e3f49de09230d42ac8cc3ca24b" translate="yes" xml:space="preserve">
          <source>From inside the class that contains the methods:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;메소드가 포함 된 클래스 내부에서 :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="00a31b6c428bbb944f073d8f4b1f127ee082778f" translate="yes" xml:space="preserve">
          <source>From outside of the class that contains the methods:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;메소드가 포함 된 클래스 외부에서 :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d70b8f016157b260f321a2fb4335baa273a26ce5" translate="yes" xml:space="preserve">
          <source>Get the generic method definition from the method</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;메소드에서 일반 메소드 정의를 가져옵니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7b847379849d8d7a344d32e4c647e0ab4351d5a9" translate="yes" xml:space="preserve">
          <source>Here we again execute some method by casting the argument to the &lt;code&gt;dynamic&lt;/code&gt; type. Only verification of first argument's type is postponed to runtime. You will get a compiler error if the name of the method you're calling doesn't exist or if other arguments are invalid (wrong number of arguments or wrong types).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;여기서 우리는 인자를 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 타입 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;으로 캐스팅하여 메소드를 다시 실행 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;합니다. 첫 번째 인수 유형의 확인 만 런타임에 연기됩니다. 호출하는 메소드의 이름이 존재하지 않거나 다른 인수가 유효하지 않은 경우 (잘못된 인수 또는 유형이 잘못된 경우) 컴파일러 오류가 발생합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0315a9e740160f0ca13b2d84138fc111d8391914" translate="yes" xml:space="preserve">
          <source>How do I use reflection to call a generic method</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;리플렉션을 사용하여 일반 메소드를 호출하는 방법&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a4c3790710308f94a83a5dd5f3888b53d1435d7e" translate="yes" xml:space="preserve">
          <source>If the generic method you want to call don't have an argument of a parametrized type (so its type parameter can't be inferred) then you can wrap the invocation of the generic method in a helper method like in the following example:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;호출하려는 일반 메소드에 매개 변수화 된 유형의 인수가없는 경우 (유형 매개 변수를 유추 할 수 없음) 다음 예제와 같이 헬퍼 메소드에서 일반 메소드의 호출을 랩핑 할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="627cef4b3bc7960549ca0a42a2e855e9f22addfa" translate="yes" xml:space="preserve">
          <source>If you want to call a generic method, that in &quot;normal&quot; usage would have had its type inferred, then it simply comes to casting the object of unknown type to &lt;code&gt;dynamic&lt;/code&gt;. Here's an example:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;일반 메소드를 호출하려면 &quot;정상적인&quot;사용법에서 유형이 유추되었을 것입니다. 단순히 알려지지 않은 유형의 오브젝트를 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 으로 캐스팅하는 것입니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;예를 들면 다음과 같습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c816ba8015c5a6ba4fca39da061e639a87d64575" translate="yes" xml:space="preserve">
          <source>In C#, the name of a method, i.e. &quot;ToString&quot; or &quot;GenericMethod&quot; actually refers to a group of methods that may contain one or more methods.  Until you provide the types of the method parameters, it is not known which
method you are referring to.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C #에서 메소드 이름, 즉 &quot;ToString&quot;또는 &quot;GenericMethod&quot;는 실제로 하나 이상의 메소드를 포함 할 수있는 메소드 그룹을 나타냅니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;메소드 매개 변수의 유형을 제공 할 때까지는 어떤 메소드를 참조하는지 알 수 없습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="64a7903f2368131e45db46d0f45ddc31af324f43" translate="yes" xml:space="preserve">
          <source>In my case, U type is always an observable collection storing object of type T.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;필자의 경우 U 유형은 항상 T 유형의 관찰 가능한 컬렉션 저장 객체입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="663ed56d7bd2f9b2f4412cef83d93fb68be5fa68" translate="yes" xml:space="preserve">
          <source>In this example, the output is the same as if you wrote:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 예제에서 출력은 다음과 같이 작성합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8d9004c4286a60de60fb05088f82267bb1577163" translate="yes" xml:space="preserve">
          <source>Increased type safety</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;유형 안전성 향상&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="11ecb9e238d47d2076d7d3c7840c7fa92320873c" translate="yes" xml:space="preserve">
          <source>Inspired by &lt;a href=&quot;https://stackoverflow.com/a/3958029/1016343&quot;&gt;Enigmativity's answer&lt;/a&gt; - let's assume you have two (or more) classes, like</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/3958029/1016343&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Enigmativity의 답변에서&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 영감을 얻었습니다. 예 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;를 들어 두 개 이상의 클래스가 있다고 가정 해 봅시다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2e858ba310b42e6a40b6de119e75801635cd79b4" translate="yes" xml:space="preserve">
          <source>It is also a little dangerous in that you lose compile-time check for &lt;code&gt;GenericMethod&lt;/code&gt;. If you later do a refactoring and rename &lt;code&gt;GenericMethod&lt;/code&gt;, this code won't notice and will fail at run time. Also, if there is any post-processing of the assembly (for example obfuscating or removing unused methods/classes) this code might break too.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;GenericMethod&lt;/code&gt; 에&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 대한 컴파일 타임 검사가 손실된다는 점에서도 약간 위험 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;나중에 리팩토링을 수행하고 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;GenericMethod&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 이름을 바꾸면 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 코드는 인식되지 않으며 런타임에 실패합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;또한 어셈블리의 사후 처리 (예 : 사용하지 않는 메소드 / 클래스를 난독 처리 또는 제거)하는 경우이 코드도 손상 될 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="49a8f72f1d6e69c26774d5b7330e9f867d36e46c" translate="yes" xml:space="preserve">
          <source>Just an addition to the original answer. While this will work:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;원래 답변에 추가 된 것입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이것이 작동하는 동안 :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="164862777ffc462fddf1ecc891e3c07dadf1cb8b" translate="yes" xml:space="preserve">
          <source>Method 1: Use GetMethod() or GetMethods() with appropriate types or binding flags.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;방법 1 : 적절한 유형 또는 바인딩 플래그와 함께 GetMethod () 또는 GetMethods ()를 사용하십시오.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ac41f3ed4518f772f2950c9bfbe7e27d036c4e08" translate="yes" xml:space="preserve">
          <source>Method 2: Create a delegate, get the MethodInfo object and then call GetGenericMethodDefinition</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;방법 2 : 대리자를 만들고 MethodInfo 개체를 가져온 다음 GetGenericMethodDefinition을 호출합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="808836eb797ce4820ccc2b563d024dd00085ac83" translate="yes" xml:space="preserve">
          <source>Method 3: Create a lambda expression containing a method call expression, get the MethodInfo object and then GetGenericMethodDefinition</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;방법 3 : 메서드 호출 식을 포함하는 람다 식을 만들고 MethodInfo 개체를 가져온 다음 GetGenericMethodDefinition&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ac9a8276adb665176231fee6f408b81a6e2597bb" translate="yes" xml:space="preserve">
          <source>Once that's done, you need to call the Invoke method as mentioned above.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;완료되면 위에서 언급 한대로 Invoke 메소드를 호출해야합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1ccc6e3ed223e001f1f7a3f43c0c7bf5565c0c7f" translate="yes" xml:space="preserve">
          <source>Other way to do the same would be to create a new wrapper class, and create it through &lt;code&gt;Activator&lt;/code&gt;. I don't know if there is a better way.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다른 방법으로 새 ​​래퍼 클래스를 만들고 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Activator&lt;/code&gt; 를&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 통해 만들 수 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;더 좋은 방법이 있는지 모르겠습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="18ffe6774cd6052e6a5429ac8ddd7f451be8e518" translate="yes" xml:space="preserve">
          <source>Return type gotcha</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;리턴 타입&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="09fae740bb06d7d7836a868121bf72704812d0cf" translate="yes" xml:space="preserve">
          <source>So far, the above call is pretty much identical as to what was explained above but with a small difference when you need have to pass multiple parameters to it.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;지금까지 위의 호출은 위에서 설명한 것과 거의 동일하지만 여러 매개 변수를 전달해야 할 때 약간의 차이가 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a3945ea8d27fd43e9d99eb3c8a9fd73ce87c698d" translate="yes" xml:space="preserve">
          <source>So, if you know the method you are linking to at compile time, and this isn't called millions of times so overhead doesn't matter, I would change this code to be:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;따라서 컴파일 타임에 링크하는 방법을 알고 있는데 수백만 번 호출되지 않으므로 오버 헤드는 중요하지 않습니다.이 코드를 다음과 같이 변경합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="82810cb97184cf542141f811b63d90bc5de31d1b" translate="yes" xml:space="preserve">
          <source>Square</source>
          <target state="translated">Square</target>
        </trans-unit>
        <trans-unit id="9b41eacb7403e5d890688714639a7294557df4ab" translate="yes" xml:space="preserve">
          <source>Step 1 is getting the MethodInfo for the generic method definition</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;1 단계는 일반 메소드 정의에 대한 MethodInfo를 가져옵니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="67d9de28a183a084af65257a905a688ecdd5e6bb" translate="yes" xml:space="preserve">
          <source>Step 2 is calling MakeGenericMethod to create a generic method with the appropriate type(s).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2 단계는 MakeGenericMethod를 호출하여 적절한 유형의 일반 메소드를 작성합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8b661a119a98f836903907c7eb9f961379a66036" translate="yes" xml:space="preserve">
          <source>Step 3 is invoking the method with the appropriate arguments.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;3 단계는 적절한 인수로 메소드를 호출합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9943c087af287bfa4af41a991331b810939f0875" translate="yes" xml:space="preserve">
          <source>TLDR: Calling a known generic method with a type object can be accomplished by:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;TLDR : 타입 객체로 알려진 제네릭 메서드를 호출하는 것은&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6308d99e0166e934578bd1cf387a50a19d5eb3a2" translate="yes" xml:space="preserve">
          <source>Thanks again for highlighting this @Bevan.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Bevan을 강조해 주셔서 다시 한 번 감사드립니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a93a951faeaee285bd27afc60718dea76dbba251" translate="yes" xml:space="preserve">
          <source>The above &lt;code&gt;DynamicDictionaryFactory&lt;/code&gt; class has a method</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;위의 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;DynamicDictionaryFactory&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 클래스에는 메소드가 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a8778d3f2682fbdfb38526c3f44aad540599bb50" translate="yes" xml:space="preserve">
          <source>The version with a dynamic type is definitely shorter and easier to write. You also shouldn't worry about performance of calling this function multiple times. The next call with arguments of the same type should be faster thanks to the &lt;a href=&quot;http://blogs.msdn.com/b/samng/archive/2008/10/29/dynamic-in-c.aspx&quot;&gt;caching&lt;/a&gt; mechanism in DLR. Of course, you can write code that cache invoked delegates, but by using the &lt;code&gt;dynamic&lt;/code&gt; type you get this behaviour for free.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;동적 유형의 버전은 확실히 더 짧고 작성하기 쉽습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;또한이 함수를 여러 번 호출하는 성능에 대해 걱정하지 않아도됩니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;DLR &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;의 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://blogs.msdn.com/b/samng/archive/2008/10/29/dynamic-in-c.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;캐싱&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 메커니즘 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;덕분에 동일한 유형의 인수가있는 다음 호출이 더 빨라야 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;물론 호출 된 델리게이트를 캐시하는 코드를 작성할 수 있지만 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 유형을 사용하면이 동작을 무료로 얻을 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a1c8be7af2cd4942d425c8acbca54b27f3a0fd1c" translate="yes" xml:space="preserve">
          <source>Then call the GetMethod to find your Generic function:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그런 다음 GetMethod를 호출하여 Generic 함수를 찾으십시오.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c44ea81c31c9bb2a9faf2f4ed6872c9d33de9413" translate="yes" xml:space="preserve">
          <source>Then you can implement an &lt;strong&gt;Extension method&lt;/strong&gt; like:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그런 다음 다음 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;과 같은 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;확장 메소드를&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 구현할 수 있습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fb135918ceddb6a1d5e34c0fb0e83d4f111ed8bf" translate="yes" xml:space="preserve">
          <source>This breaks down to</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이것은 고장&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a8960ad7737b28ec4ae581cd4869cfab688d34bf" translate="yes" xml:space="preserve">
          <source>This is my 2 cents based on &lt;a href=&quot;https://stackoverflow.com/questions/232535/how-do-i-use-reflection-to-call-a-generic-method/27870198#27870198&quot;&gt;Grax's answer&lt;/a&gt;, but with two parameters required for a generic method.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이것은 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/232535/how-do-i-use-reflection-to-call-a-generic-method/27870198#27870198&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Grax의 답변을&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 기반으로하는 2 센트 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이지만 일반적인 방법에는 두 가지 매개 변수가 필요합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b3015b46b324fde3ee4d8dd94da83a586e9c2768" translate="yes" xml:space="preserve">
          <source>To use this technique the type must be known from the actual object (not just an instance of the &lt;code&gt;Type&lt;/code&gt; class). Otherwise, you have to create an object of that type or use the standard reflection API &lt;a href=&quot;https://stackoverflow.com/a/232621/350384&quot;&gt;solution&lt;/a&gt;. You can create an object by using the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/wccyzw83%28v=vs.110%29.aspx&quot;&gt;Activator.CreateInstance&lt;/a&gt; method.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 기술을 사용하려면 실제 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;클래스 ( &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Type&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 클래스 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;의 인스턴스가 아닌)에서 형식을 알아야합니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그렇지 않으면 해당 유형의 오브젝트를 작성하거나 표준 리플렉션 API &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/232621/350384&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;솔루션을&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 사용해야합니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/wccyzw83%28v=vs.110%29.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Activator.CreateInstance&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 메서드 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;를 사용하여 개체를 만들 수 있습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9022f7a3300139eca4da2ae6055f0933304d153a" translate="yes" xml:space="preserve">
          <source>What is really great about using &lt;code&gt;dynamic&lt;/code&gt; object as a replacement for using reflection API is that you only lose compile time checking of this particular type that you don't know until runtime. Other arguments and the name of the method are staticly analysed by the compiler as usual. If you remove or add more arguments, change their types or rename method name then you'll get a compile-time error. This won't happen if you provide the method name as a string in &lt;code&gt;Type.GetMethod&lt;/code&gt; and arguments as the objects array in &lt;code&gt;MethodInfo.Invoke&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;리플렉션 API를 대신 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하여 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 객체를 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;사용 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하는&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 데있어 가장 큰 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;장점은 런타임까지 알 수없는이 특정 유형의 컴파일 시간 검사 만 손실한다는 것입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다른 인수와 메소드 이름은 평소와 같이 컴파일러에 의해 정적으로 분석됩니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;인수를 제거하거나 더 추가하거나, 유형을 변경하거나 메소드 이름을 바꾸면 컴파일 타임 오류가 발생합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;메서드 이름을 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Type.GetMethod&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 의 문자열로 제공하고 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;MethodInfo.Invoke&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 의 개체 배열로 인수 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;를 제공하면 이런 일이 발생하지 않습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="79c6d1b5dee1d9cd5b14b69f29197a6a7def0b37" translate="yes" xml:space="preserve">
          <source>What's the best way to call a generic method when the type parameter isn't known at compile time, but instead is obtained dynamically at runtime?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;컴파일 할 때 type 매개 변수를 모르는 대신 런타임에 동적으로 얻을 때 제네릭 메서드를 호출하는 가장 좋은 방법은 무엇입니까?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1b7a47c991c2d8b5beb9c96b965196f41193a463" translate="yes" xml:space="preserve">
          <source>When the above console application is executed, we get the correct, expected result:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;위의 콘솔 응용 프로그램이 실행되면 올바른 예상 결과를 얻습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dce830c550f9fdfb467286f2d4635ef7a543116b" translate="yes" xml:space="preserve">
          <source>When you pass the &lt;code&gt;dynamic&lt;/code&gt; argument to a method then this call is &lt;a href=&quot;http://blogs.msdn.com/b/ericlippert/archive/2012/02/06/what-is-quot-binding-quot-and-what-makes-it-late.aspx&quot;&gt;lately bound&lt;/a&gt;. Method overload resolution happens at runtime and tries to choose the best overload. So if you invoke the &lt;code&gt;ProcessItem&lt;/code&gt; method with an object of &lt;code&gt;BarItem&lt;/code&gt; type then you'll actually call the non-generic method, because it is a better match for this type. However, you'll get a runtime error when you pass an argument of the &lt;code&gt;Alpha&lt;/code&gt; type because there's no method that can handle this object (a generic method has the constraint &lt;code&gt;where T : IItem&lt;/code&gt; and &lt;code&gt;Alpha&lt;/code&gt; class doesn't implement this interface). But that's the whole point. The compiler doesn't have information that this call is valid. You as a programmer know this, and you should make sure that this code runs without errors.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;dynamic&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 인수를 메소드에 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;전달하면 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 호출은 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://blogs.msdn.com/b/ericlippert/archive/2012/02/06/what-is-quot-binding-quot-and-what-makes-it-late.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;최근에 바인드&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 됩니다. 메소드 과부하 해결은 런타임에 발생하며 최상의 과부하를 선택하려고합니다. 따라서 &lt;/font&gt; &lt;code&gt;BarItem&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; 형식 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;의 개체를 사용 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하여 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;ProcessItem&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 메서드 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;를 호출하면 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 형식에 더 적합하기 때문에 실제로는 제네릭이 아닌 메서드를 호출하게됩니다. 그러나이 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;개체를 처리 할 수있는 메서드가 없기 때문에 &lt;/font&gt; &lt;code&gt;Alpha&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; 형식 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;의 인수를 전달하면 런타임 오류가 발생 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;합니다 (일반 메서드에는 &lt;/font&gt; &lt;code&gt;where T : IItem&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; 및 &lt;/font&gt; &lt;code&gt;Alpha&lt;/code&gt; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;클래스는이 인터페이스를 구현하지 않습니다). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그러나 그것은 요점입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;컴파일러에이 호출이 유효하다는 정보가 없습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;프로그래머는이를 알고 있으며이 코드가 오류없이 실행되도록해야합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8404bf1a6dddcdc8393275d5ed416ce9e721c54f" translate="yes" xml:space="preserve">
          <source>When you're calling a non-void method with a parameter of dynamic type, its return type will probably &lt;a href=&quot;http://blogs.msdn.com/b/ericlippert/archive/2012/11/05/dynamic-contagion-part-one.aspx&quot;&gt;be &lt;code&gt;dynamic&lt;/code&gt; too&lt;/a&gt;. So if you'd change previous example to this code:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;동적 유형의 매개 변수 void 이외의 메소드를 호출 할 때, 그것의 반환 형식은 아마 것입니다 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://blogs.msdn.com/b/ericlippert/archive/2012/11/05/dynamic-contagion-part-one.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;수 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 너무&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;따라서 이전 예제를이 코드로 변경하려는 경우 :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fedfbc7c2bbd6eca438e3ee81dc7bea49d38ab49" translate="yes" xml:space="preserve">
          <source>While not very pretty, you have a compile time reference to &lt;code&gt;GenericMethod&lt;/code&gt; here, and if you refactor, delete or do anything with &lt;code&gt;GenericMethod&lt;/code&gt;, this code will keep working, or at least break at compile time (if for example you remove &lt;code&gt;GenericMethod&lt;/code&gt;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;없는 아주 예쁜 동안, 당신은에 컴파일 시간 기준이 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;GenericMethod&lt;/code&gt; 를&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 여기, 당신이 리팩토링하는 경우, 삭제 또는 아무것도 할 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;GenericMethod&lt;/code&gt; 을&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ,이 코드는 계속 작동, 또는 컴파일 시간 이상 휴식 (경우 예를 들어 제거 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;GenericMethod&lt;/code&gt; 을&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ec22391a4f2500abe458e94af602de0364dc138c" translate="yes" xml:space="preserve">
          <source>With C# 4.0, reflection isn't necessary as the DLR can call it using runtime types. Since using the DLR library is kind of a pain dynamically (instead of the C# compiler generating code for you), the open source framework &lt;a href=&quot;https://github.com/ekonbenefits/dynamitey&quot;&gt;Dynamitey&lt;/a&gt; (.net standard 1.5) gives you easy cached run-time access to the same calls the compiler would generate for you.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C # 4.0에서는 DLR이 런타임 유형을 사용하여 호출 할 수 있으므로 리플렉션이 필요하지 않습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;DLR 라이브러리를 사용하는 것은 C # 컴파일러 생성 코드 대신 동적으로 어려움을 겪기 때문에 오픈 소스 프레임 워크 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/ekonbenefits/dynamitey&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Dynamitey&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (.net 표준 1.5)는 컴파일러가 생성하는 동일한 호출에 쉽게 캐시 된 런타임 액세스를 제공합니다 당신을 위해.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fcd000c27dc69c7663b53e7a3d73eb6fdfd2d157" translate="yes" xml:space="preserve">
          <source>With this, you can simply invoke &lt;code&gt;Foo&lt;/code&gt; like:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이를 통해 다음 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;과 같이 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Foo&lt;/code&gt; 를&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 간단히 호출 할 수 있습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="42897873d05394d080118009dfd1350d62ee67d6" translate="yes" xml:space="preserve">
          <source>You need to pass an Type[] array to the MakeGenericMethod function that contains the &quot;dummy&quot; objects' types that were create above:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;위에서 생성 한 &quot;더미&quot;객체의 유형을 포함하는 MakeGenericMethod 함수에 Type [] 배열을 전달해야합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="853cd5b66a7e2b293f546f0344c027aef902486f" translate="yes" xml:space="preserve">
          <source>You need to use reflection to get the method to start with, then &quot;construct&quot; it by supplying type arguments with &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.reflection.methodinfo.makegenericmethod.aspx&quot;&gt;MakeGenericMethod&lt;/a&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;리플렉션을 사용하여 메서드를 시작한 다음 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.reflection.methodinfo.makegenericmethod.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MakeGenericMethod&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 와 함께 형식 인수를 제공하여 메서드를 &quot;구축&quot;해야합니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="23069e59f1bd650765a9a30fef468aa3c1c13002" translate="yes" xml:space="preserve">
          <source>You'll get a runtime error if the type doesn't match.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;유형이 일치하지 않으면 런타임 오류가 발생합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cd48c0cf5ab841d4c18ac071da7961a84838cc65" translate="yes" xml:space="preserve">
          <source>and it creates and returns an IDictionary instance, the types of whose keys and values are exactly the specified on the call &lt;code&gt;keyType&lt;/code&gt; and &lt;code&gt;valueType&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;키 및 값의 유형이 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;keyType&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 및 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;valueType&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 호출에 정확하게 지정된 IDictionary 인스턴스를 작성하여 리턴합니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1a3a44f4007c44bb308dc019adec528028384da4" translate="yes" xml:space="preserve">
          <source>and you want to call the method &lt;code&gt;Foo&amp;lt;T&amp;gt;&lt;/code&gt; with &lt;code&gt;Bar&lt;/code&gt; and &lt;code&gt;Square&lt;/code&gt;, which is declared as</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;당신은 메서드를 호출 할 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Foo&amp;lt;T&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 와 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Bar&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 및 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Square&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 으로 선언,&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="373f9635c978d1478015369c2f1c35e7f368020a" translate="yes" xml:space="preserve">
          <source>myClassInfo contains 2 properties of type &lt;code&gt;Type&lt;/code&gt; which I set at run time based on an enum value passed to the constructor and will provide me with the relevant types which I then use in the MakeGenericMethod.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;myClassInfo에는 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;생성자에 전달 된 열거 형 값을 기반으로 런타임에 설정 한 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Type&lt;/code&gt; 유형&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 의 2 가지 속성이 포함 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;되어 있으며 MakeGenericMethod에서 사용하는 관련 유형을 제공합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ea239bd275bdb1c60259e5ce696669042c884ce3" translate="yes" xml:space="preserve">
          <source>then the type of the result object would be &lt;code&gt;dynamic&lt;/code&gt;. This is because the compiler don't always know which method will be called. If you know the return type of the function call then you should &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/dd264736.aspx&quot;&gt;implicitly convert&lt;/a&gt; it to the required type so the rest of the code is statically typed:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;결과 객체의 유형은 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;컴파일러는 어떤 메소드가 호출 될지 항상 알지 못하기 때문입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;함수 호출의 리턴 유형을 알고 있으면 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;나머지 코드가 정적으로 유형이되도록 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/dd264736.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;암시 적으로&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 이를 필수 유형으로 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;변환&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 해야합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a372cbfc24988c0b6b54696156394bd41662428f" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;GenericMethod&amp;lt;object&amp;gt;&lt;/code&gt; is the method name to call and any type that satisfies the generic constraints.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;여기서 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;GenericMethod&amp;lt;object&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 호출 할 메서드 이름이며 일반 제약 조건을 만족하는 모든 유형입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c46221efe69e51d85aefd32ebaa97fd5956d92c8" translate="yes" xml:space="preserve">
          <source>which works for every class. In this case, it will output:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;모든 수업에 적용됩니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 경우 다음을 출력합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
