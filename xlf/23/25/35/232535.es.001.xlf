<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/232535">
    <body>
      <group id="232535">
        <trans-unit id="290dca3ab720e1a5481fc7d2b2daac691a5ecb5a" translate="yes" xml:space="preserve">
          <source>(Action) matches the signature of the method to be called i.e. (&lt;code&gt;Func&amp;lt;string,string,int&amp;gt;&lt;/code&gt; or &lt;code&gt;Action&amp;lt;bool&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(Acci&amp;oacute;n) coincide con la firma del m&amp;eacute;todo a llamar, es decir ( &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Func&amp;lt;string,string,int&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; o &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Action&amp;lt;bool&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; )&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="eade1fee26c0d1bbb44af59dd13e2489047a6b1f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;((Action)GenericMethod&amp;lt;object&amp;gt;)&lt;/code&gt; refers to the delegate for a specific method.  &lt;code&gt;((Func&amp;lt;string, int&amp;gt;)GenericMethod&amp;lt;object&amp;gt;)&lt;/code&gt;
refers to a different overload of GenericMethod</source>
          <target state="translated">&lt;code&gt;((Action)GenericMethod&amp;lt;object&amp;gt;)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; refiere al delegado para un m&amp;eacute;todo espec&amp;iacute;fico. &lt;/font&gt;&lt;/font&gt; &lt;code&gt;((Func&amp;lt;string, int&amp;gt;)GenericMethod&amp;lt;object&amp;gt;)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; refiere a una sobrecarga diferente de GenericMethod&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6a0d78764959f75f1c68a022f5bd6b24043de989" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Process&lt;/code&gt; is a generic instance method that writes the real type of the passed argument (by using the &lt;code&gt;GetType()&lt;/code&gt; method) and the type of the generic parameter (by using &lt;code&gt;typeof&lt;/code&gt; operator).</source>
          <target state="translated">&lt;code&gt;Process&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es un m&amp;eacute;todo de instancia gen&amp;eacute;rico que escribe el tipo real del argumento pasado (usando el &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;m&amp;eacute;todo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;GetType()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ) y el tipo del par&amp;aacute;metro gen&amp;eacute;rico (usando el &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;operador &lt;/font&gt;&lt;/font&gt; &lt;code&gt;typeof&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9097a22fe8a8346d04ab4f4d592127c641a5df14" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Here is a complete example&lt;/strong&gt; how to call this method to instantiate and use a &lt;code&gt;Dictionary&amp;lt;String, int&amp;gt;&lt;/code&gt; :</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Aqu&amp;iacute; hay un ejemplo completo de&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; c&amp;oacute;mo llamar a este m&amp;eacute;todo para crear instancias y usar un &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Dictionary&amp;lt;String, int&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b0b37dffa6e6122d271d9e18dfbb71a232abb0a0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Nobody provided the &quot;&lt;em&gt;classic Reflection&lt;/em&gt;&quot; solution, so here is a complete code example:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Nadie proporcion&amp;oacute; la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;soluci&amp;oacute;n de &quot; &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;reflexi&amp;oacute;n cl&amp;aacute;sica&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &quot;, as&amp;iacute; que aqu&amp;iacute; hay un ejemplo de c&amp;oacute;digo completo:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d4b2dbb7dd3fe023446263ea126c7b75aa47f762" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;UPDATE:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;UPDATE:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d3e03bcbed0df764147b039386dd063669f0a622" translate="yes" xml:space="preserve">
          <source>Actually, if you try to get the result value in the previous example then you'll get a runtime error in the second loop iteration. This is because you tried to save the return value of a void function.</source>
          <target state="translated">En realidad,si intentas obtener el valor del resultado en el ejemplo anterior,obtendrás un error de ejecución en la segunda iteración del bucle.Esto se debe a que intentaste guardar el valor de retorno de una función de vacío.</target>
        </trans-unit>
        <trans-unit id="6948afca7dccd71e85dc3ca8c088ba64645a55fb" translate="yes" xml:space="preserve">
          <source>Adding on to &lt;a href=&quot;https://stackoverflow.com/questions/232535/how-do-i-use-reflection-to-call-a-generic-method/5134251#5134251&quot;&gt;Adrian Gallero's answer&lt;/a&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Agregando a &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/232535/how-do-i-use-reflection-to-call-a-generic-method/5134251#5134251&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;la respuesta de Adri&amp;aacute;n Gallero&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="33e2d283d2aad7d67769d4f55add11d23ef1e453" translate="yes" xml:space="preserve">
          <source>And here's the output of this program:</source>
          <target state="translated">Y aquí está el resultado de este programa:</target>
        </trans-unit>
        <trans-unit id="99919dbd92d3b1040229c15105c4f8bceb3982a4" translate="yes" xml:space="preserve">
          <source>And you're done. Works a charm!</source>
          <target state="translated">Y ya has terminado.¡Funciona de maravilla!</target>
        </trans-unit>
        <trans-unit id="216a63bdbdc9d45a52c7753edbb2667c6fd32804" translate="yes" xml:space="preserve">
          <source>As @Bevan highlighted, I do not need to create an array when calling the MakeGenericMethod function as it takes in params and I do not need to create an object in order to get the types as I can just pass the types directly to this function. In my case, since I have the types predefined in another class, I simply changed my code to:</source>
          <target state="translated">Como @Bevan resaltó,no necesito crear un arreglo cuando llamo a la función MakeGenericMethod ya que toma los parámentros y no necesito crear un objeto para obtener los tipos ya que puedo pasar los tipos directamente a esta función.En mi caso,como tengo los tipos predefinidos en otra clase,simplemente cambié mi código a:</target>
        </trans-unit>
        <trans-unit id="799d027859f5995cd505ea490d7a05d319fff312" translate="yes" xml:space="preserve">
          <source>As I have my types predefined, I first create the &quot;dummy&quot; objects that represent the observable collection (U) and the object stored in it (T) and that will be used below to get their type when calling the Make</source>
          <target state="translated">Como tengo mis tipos predefinidos,primero creo los objetos &quot;ficticios&quot; que representan la colección observable (U)y el objeto almacenado en ella (T)y que se utilizarán a continuación para obtener su tipo al llamar a la marca</target>
        </trans-unit>
        <trans-unit id="bcc3a3e9403f5f488724ebeb608a3b693141e853" translate="yes" xml:space="preserve">
          <source>As noted, a lot of this is simpler as of C# 4 using &lt;code&gt;dynamic&lt;/code&gt; - if you can use type inference, of course. It doesn't help in cases where type inference isn't available, such as the exact example in the question.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Como se se&amp;ntilde;al&amp;oacute;, mucho de esto es m&amp;aacute;s simple a partir de C # 4 usando &lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , si puede usar inferencia de tipos, por supuesto. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;No ayuda en casos donde la inferencia de tipos no est&amp;aacute; disponible, como el ejemplo exacto en la pregunta.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bc935acf2946f21ff5a8104d6caf3a54e8ca9c72" translate="yes" xml:space="preserve">
          <source>Assume your method is defined as follows in an Helpers class:</source>
          <target state="translated">Supongamos que su método está definido como sigue en una clase de Ayudantes:</target>
        </trans-unit>
        <trans-unit id="e496fd20136d4bb7828ebb0ab925b1bd977208e4" translate="yes" xml:space="preserve">
          <source>Bar</source>
          <target state="translated">Bar</target>
        </trans-unit>
        <trans-unit id="11bbdd21c0418fc331acb348f91073f99e050d4f" translate="yes" xml:space="preserve">
          <source>Below is a simple example that illustrates how some errors can be caught at compile time (commented code) and other at runtime. It also shows how the DLR tries to resolve which method to call.</source>
          <target state="translated">A continuación se presenta un ejemplo sencillo que ilustra cómo se pueden detectar algunos errores en tiempo de compilación (código comentado)y otros en tiempo de ejecución.También muestra cómo el DLR intenta resolver qué método llamar.</target>
        </trans-unit>
        <trans-unit id="2c2798ed71d0e9561c4ff9c754ef9e2ce7109cde" translate="yes" xml:space="preserve">
          <source>By casting the object argument to &lt;code&gt;dynamic&lt;/code&gt; type we deferred providing the type parameter until runtime. When the &lt;code&gt;Process&lt;/code&gt; method is called with the &lt;code&gt;dynamic&lt;/code&gt; argument then the compiler doesn't care about the type of this argument. The compiler generates code that at runtime checks the real types of passed arguments (by using reflection) and choose the best method to call. Here there is only this one generic method, so it's invoked with a proper type parameter.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Al convertir el argumento del objeto a &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;tipo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , diferimos la provisi&amp;oacute;n del par&amp;aacute;metro de tipo hasta el tiempo de ejecuci&amp;oacute;n. Cuando &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;se llama al m&amp;eacute;todo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Process&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; con el &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;argumento &lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , al compilador no le importa el tipo de este argumento. El compilador genera c&amp;oacute;digo que en tiempo de ejecuci&amp;oacute;n verifica los tipos reales de argumentos pasados ​​(mediante el uso de la reflexi&amp;oacute;n) y elige el mejor m&amp;eacute;todo para llamar. Aqu&amp;iacute; solo existe este m&amp;eacute;todo gen&amp;eacute;rico, por lo que se invoca con un par&amp;aacute;metro de tipo adecuado.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a8ab9b59067b625e5d1277f4587a383ced70d22f" translate="yes" xml:space="preserve">
          <source>Calling a generic method from type info involves three steps.</source>
          <target state="translated">Llamar a un método genérico a partir de la información del tipo implica tres pasos.</target>
        </trans-unit>
        <trans-unit id="b2de9db1a09abb77e65ac60c781e70bcfe2b06e3" translate="yes" xml:space="preserve">
          <source>Calling a generic method with a type parameter known only at runtime can be greatly simplified by using a &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/dd264741.aspx&quot;&gt;&lt;code&gt;dynamic&lt;/code&gt;&lt;/a&gt; type instead of the reflection API.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Llamar a un m&amp;eacute;todo gen&amp;eacute;rico con un par&amp;aacute;metro de tipo conocido solo en tiempo de ejecuci&amp;oacute;n puede simplificarse enormemente utilizando un &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;tipo &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/dd264741.aspx&quot;&gt; &lt;code&gt;dynamic&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; lugar de la API de reflexi&amp;oacute;n.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="700051fbfe581fb9c5bfa257409b6321d2417148" translate="yes" xml:space="preserve">
          <source>Consider the following sample code - inside the &lt;code&gt;Example()&lt;/code&gt; method, what's the most concise way to invoke &lt;code&gt;GenericMethod&amp;lt;T&amp;gt;()&lt;/code&gt; using the &lt;code&gt;Type&lt;/code&gt; stored in the &lt;code&gt;myType&lt;/code&gt; variable?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Considere el siguiente c&amp;oacute;digo de muestra: dentro del &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;m&amp;eacute;todo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Example()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &amp;iquest;cu&amp;aacute;l es la forma m&amp;aacute;s concisa de invocar &lt;/font&gt;&lt;/font&gt; &lt;code&gt;GenericMethod&amp;lt;T&amp;gt;()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; utilizando el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Type&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; almacenado en la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;variable &lt;/font&gt;&lt;/font&gt; &lt;code&gt;myType&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2064efa8dc3c980cf7e4c32b5acd966878f7a566" translate="yes" xml:space="preserve">
          <source>Create a lambda expression where the body is a call to your desired method.</source>
          <target state="translated">Crear una expresión lambda donde el cuerpo es una llamada a su método deseado.</target>
        </trans-unit>
        <trans-unit id="a217db111f67c2f7402aa3b03890c7a22a0b43dd" translate="yes" xml:space="preserve">
          <source>Extract the body and cast to MethodCallExpression</source>
          <target state="translated">Extraer el cuerpo y lanzarlo a MethodCallExpression</target>
        </trans-unit>
        <trans-unit id="640cece90ac2b8fb0b824605e1912102c78e8327" translate="yes" xml:space="preserve">
          <source>For a static method, pass &lt;code&gt;null&lt;/code&gt; as the first argument to &lt;code&gt;Invoke&lt;/code&gt;. That's nothing to do with generic methods - it's just normal reflection.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para un m&amp;eacute;todo est&amp;aacute;tico, pase &lt;/font&gt;&lt;/font&gt; &lt;code&gt;null&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; como primer argumento para &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Invoke&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Eso no tiene nada que ver con los m&amp;eacute;todos gen&amp;eacute;ricos: es solo una reflexi&amp;oacute;n normal.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="55a34421347462e3f49de09230d42ac8cc3ca24b" translate="yes" xml:space="preserve">
          <source>From inside the class that contains the methods:</source>
          <target state="translated">Desde el interior de la clase que contiene los métodos:</target>
        </trans-unit>
        <trans-unit id="00a31b6c428bbb944f073d8f4b1f127ee082778f" translate="yes" xml:space="preserve">
          <source>From outside of the class that contains the methods:</source>
          <target state="translated">Desde fuera de la clase que contiene los métodos:</target>
        </trans-unit>
        <trans-unit id="d70b8f016157b260f321a2fb4335baa273a26ce5" translate="yes" xml:space="preserve">
          <source>Get the generic method definition from the method</source>
          <target state="translated">Obtener la definición genérica del método</target>
        </trans-unit>
        <trans-unit id="7b847379849d8d7a344d32e4c647e0ab4351d5a9" translate="yes" xml:space="preserve">
          <source>Here we again execute some method by casting the argument to the &lt;code&gt;dynamic&lt;/code&gt; type. Only verification of first argument's type is postponed to runtime. You will get a compiler error if the name of the method you're calling doesn't exist or if other arguments are invalid (wrong number of arguments or wrong types).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Aqu&amp;iacute; nuevamente ejecutamos alg&amp;uacute;n m&amp;eacute;todo lanzando el argumento al &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;tipo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . Solo la verificaci&amp;oacute;n del tipo de primer argumento se pospone al tiempo de ejecuci&amp;oacute;n. Recibir&amp;aacute; un error del compilador si el nombre del m&amp;eacute;todo al que est&amp;aacute; llamando no existe o si otros argumentos no son v&amp;aacute;lidos (n&amp;uacute;mero incorrecto de argumentos o tipos incorrectos).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0315a9e740160f0ca13b2d84138fc111d8391914" translate="yes" xml:space="preserve">
          <source>How do I use reflection to call a generic method</source>
          <target state="translated">¿Cómo utilizo la reflexión para llamar a un método genérico</target>
        </trans-unit>
        <trans-unit id="a4c3790710308f94a83a5dd5f3888b53d1435d7e" translate="yes" xml:space="preserve">
          <source>If the generic method you want to call don't have an argument of a parametrized type (so its type parameter can't be inferred) then you can wrap the invocation of the generic method in a helper method like in the following example:</source>
          <target state="translated">Si el método genérico que desea invocar no tiene un argumento de tipo parametrizado (por lo que su tipo parametrizado no puede ser inferido)entonces puede envolver la invocación del método genérico en un método auxiliar como en el siguiente ejemplo:</target>
        </trans-unit>
        <trans-unit id="627cef4b3bc7960549ca0a42a2e855e9f22addfa" translate="yes" xml:space="preserve">
          <source>If you want to call a generic method, that in &quot;normal&quot; usage would have had its type inferred, then it simply comes to casting the object of unknown type to &lt;code&gt;dynamic&lt;/code&gt;. Here's an example:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si desea llamar a un m&amp;eacute;todo gen&amp;eacute;rico, que en el uso &quot;normal&quot; se habr&amp;iacute;a inferido su tipo, entonces simplemente se trata de convertir el objeto de tipo desconocido en &lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Aqu&amp;iacute; hay un ejemplo:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c816ba8015c5a6ba4fca39da061e639a87d64575" translate="yes" xml:space="preserve">
          <source>In C#, the name of a method, i.e. &quot;ToString&quot; or &quot;GenericMethod&quot; actually refers to a group of methods that may contain one or more methods.  Until you provide the types of the method parameters, it is not known which
method you are referring to.</source>
          <target state="translated">En C#,el nombre de un método,es decir,&quot;ToString&quot; o &quot;GenericMethod&quot;,se refiere en realidad a un grupo de métodos que pueden contener uno o más métodos.Hasta que no se indiquen los tipos de los parámetros del método,no se sabe a qué método se está refiriendo.</target>
        </trans-unit>
        <trans-unit id="64a7903f2368131e45db46d0f45ddc31af324f43" translate="yes" xml:space="preserve">
          <source>In my case, U type is always an observable collection storing object of type T.</source>
          <target state="translated">En mi caso,el tipo U es siempre una colección observable que almacena objetos del tipo T.</target>
        </trans-unit>
        <trans-unit id="663ed56d7bd2f9b2f4412cef83d93fb68be5fa68" translate="yes" xml:space="preserve">
          <source>In this example, the output is the same as if you wrote:</source>
          <target state="translated">En este ejemplo,la salida es la misma que si escribieras:</target>
        </trans-unit>
        <trans-unit id="8d9004c4286a60de60fb05088f82267bb1577163" translate="yes" xml:space="preserve">
          <source>Increased type safety</source>
          <target state="translated">Aumento de la seguridad del tipo</target>
        </trans-unit>
        <trans-unit id="11ecb9e238d47d2076d7d3c7840c7fa92320873c" translate="yes" xml:space="preserve">
          <source>Inspired by &lt;a href=&quot;https://stackoverflow.com/a/3958029/1016343&quot;&gt;Enigmativity's answer&lt;/a&gt; - let's assume you have two (or more) classes, like</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Inspirado por &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/3958029/1016343&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;la respuesta de Enigmativity&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : supongamos que tiene dos (o m&amp;aacute;s) clases, como&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2e858ba310b42e6a40b6de119e75801635cd79b4" translate="yes" xml:space="preserve">
          <source>It is also a little dangerous in that you lose compile-time check for &lt;code&gt;GenericMethod&lt;/code&gt;. If you later do a refactoring and rename &lt;code&gt;GenericMethod&lt;/code&gt;, this code won't notice and will fail at run time. Also, if there is any post-processing of the assembly (for example obfuscating or removing unused methods/classes) this code might break too.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tambi&amp;eacute;n es un poco peligroso ya que pierde la verificaci&amp;oacute;n en tiempo de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;GenericMethod&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; de &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;GenericMethod&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si luego realiza una refactorizaci&amp;oacute;n y cambia el nombre de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;GenericMethod&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , este c&amp;oacute;digo no se dar&amp;aacute; cuenta y fallar&amp;aacute; en el tiempo de ejecuci&amp;oacute;n. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Adem&amp;aacute;s, si hay alg&amp;uacute;n procesamiento posterior del ensamblaje (por ejemplo, ofuscar o eliminar m&amp;eacute;todos / clases no utilizados), este c&amp;oacute;digo tambi&amp;eacute;n podr&amp;iacute;a romperse.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="49a8f72f1d6e69c26774d5b7330e9f867d36e46c" translate="yes" xml:space="preserve">
          <source>Just an addition to the original answer. While this will work:</source>
          <target state="translated">Sólo una adición a la respuesta original.Aunque esto funcionará:</target>
        </trans-unit>
        <trans-unit id="164862777ffc462fddf1ecc891e3c07dadf1cb8b" translate="yes" xml:space="preserve">
          <source>Method 1: Use GetMethod() or GetMethods() with appropriate types or binding flags.</source>
          <target state="translated">Método 1:Usar GetMethod()o GetMethods()con los tipos o banderas de unión apropiados.</target>
        </trans-unit>
        <trans-unit id="ac41f3ed4518f772f2950c9bfbe7e27d036c4e08" translate="yes" xml:space="preserve">
          <source>Method 2: Create a delegate, get the MethodInfo object and then call GetGenericMethodDefinition</source>
          <target state="translated">Método 2:Crear un delegado,obtener el objeto MethodInfo y luego llamar a GetGenericMethodDefinition</target>
        </trans-unit>
        <trans-unit id="808836eb797ce4820ccc2b563d024dd00085ac83" translate="yes" xml:space="preserve">
          <source>Method 3: Create a lambda expression containing a method call expression, get the MethodInfo object and then GetGenericMethodDefinition</source>
          <target state="translated">Método 3:Crear una expresión lambda que contenga una expresión de llamada de método,obtener el objeto MethodInfo y luego GetGenericMethodDefinition</target>
        </trans-unit>
        <trans-unit id="ac9a8276adb665176231fee6f408b81a6e2597bb" translate="yes" xml:space="preserve">
          <source>Once that's done, you need to call the Invoke method as mentioned above.</source>
          <target state="translated">Una vez hecho esto,hay que llamar al método de Invocación como se mencionó anteriormente.</target>
        </trans-unit>
        <trans-unit id="1ccc6e3ed223e001f1f7a3f43c0c7bf5565c0c7f" translate="yes" xml:space="preserve">
          <source>Other way to do the same would be to create a new wrapper class, and create it through &lt;code&gt;Activator&lt;/code&gt;. I don't know if there is a better way.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Otra forma de hacer lo mismo ser&amp;iacute;a crear una nueva clase de contenedor y crearla a trav&amp;eacute;s de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Activator&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;No s&amp;eacute; si hay una mejor manera.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="18ffe6774cd6052e6a5429ac8ddd7f451be8e518" translate="yes" xml:space="preserve">
          <source>Return type gotcha</source>
          <target state="translated">El tipo de devolución te atrapó</target>
        </trans-unit>
        <trans-unit id="09fae740bb06d7d7836a868121bf72704812d0cf" translate="yes" xml:space="preserve">
          <source>So far, the above call is pretty much identical as to what was explained above but with a small difference when you need have to pass multiple parameters to it.</source>
          <target state="translated">Hasta ahora,la llamada anterior es bastante idéntica a la explicada anteriormente pero con una pequeña diferencia cuando hay que pasarle múltiples parámetros.</target>
        </trans-unit>
        <trans-unit id="a3945ea8d27fd43e9d99eb3c8a9fd73ce87c698d" translate="yes" xml:space="preserve">
          <source>So, if you know the method you are linking to at compile time, and this isn't called millions of times so overhead doesn't matter, I would change this code to be:</source>
          <target state="translated">Así que,si conoces el método al que te estás vinculando en tiempo de compilación,y esto no se llama millones de veces así que los gastos generales no importan,cambiaría este código a ser:</target>
        </trans-unit>
        <trans-unit id="82810cb97184cf542141f811b63d90bc5de31d1b" translate="yes" xml:space="preserve">
          <source>Square</source>
          <target state="translated">Square</target>
        </trans-unit>
        <trans-unit id="9b41eacb7403e5d890688714639a7294557df4ab" translate="yes" xml:space="preserve">
          <source>Step 1 is getting the MethodInfo for the generic method definition</source>
          <target state="translated">El paso 1 es obtener la MethodInfo para la definición del método genérico</target>
        </trans-unit>
        <trans-unit id="67d9de28a183a084af65257a905a688ecdd5e6bb" translate="yes" xml:space="preserve">
          <source>Step 2 is calling MakeGenericMethod to create a generic method with the appropriate type(s).</source>
          <target state="translated">El paso 2 es llamar a MakeGenericMethod para crear un método genérico con el tipo(s)apropiado(s).</target>
        </trans-unit>
        <trans-unit id="8b661a119a98f836903907c7eb9f961379a66036" translate="yes" xml:space="preserve">
          <source>Step 3 is invoking the method with the appropriate arguments.</source>
          <target state="translated">El paso 3 es invocar el método con los argumentos apropiados.</target>
        </trans-unit>
        <trans-unit id="9943c087af287bfa4af41a991331b810939f0875" translate="yes" xml:space="preserve">
          <source>TLDR: Calling a known generic method with a type object can be accomplished by:</source>
          <target state="translated">TLDR:Llamar a un método genérico conocido con un objeto tipo puede ser logrado por:</target>
        </trans-unit>
        <trans-unit id="6308d99e0166e934578bd1cf387a50a19d5eb3a2" translate="yes" xml:space="preserve">
          <source>Thanks again for highlighting this @Bevan.</source>
          <target state="translated">Gracias de nuevo por resaltar esto @Bevan.</target>
        </trans-unit>
        <trans-unit id="a93a951faeaee285bd27afc60718dea76dbba251" translate="yes" xml:space="preserve">
          <source>The above &lt;code&gt;DynamicDictionaryFactory&lt;/code&gt; class has a method</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;clase &lt;/font&gt;&lt;/font&gt; &lt;code&gt;DynamicDictionaryFactory&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; anterior &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;tiene un m&amp;eacute;todo&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a8778d3f2682fbdfb38526c3f44aad540599bb50" translate="yes" xml:space="preserve">
          <source>The version with a dynamic type is definitely shorter and easier to write. You also shouldn't worry about performance of calling this function multiple times. The next call with arguments of the same type should be faster thanks to the &lt;a href=&quot;http://blogs.msdn.com/b/samng/archive/2008/10/29/dynamic-in-c.aspx&quot;&gt;caching&lt;/a&gt; mechanism in DLR. Of course, you can write code that cache invoked delegates, but by using the &lt;code&gt;dynamic&lt;/code&gt; type you get this behaviour for free.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La versi&amp;oacute;n con un tipo din&amp;aacute;mico es definitivamente m&amp;aacute;s corta y m&amp;aacute;s f&amp;aacute;cil de escribir. Tampoco debe preocuparse por el rendimiento de llamar a esta funci&amp;oacute;n varias veces. La pr&amp;oacute;xima llamada con argumentos del mismo tipo deber&amp;iacute;a ser m&amp;aacute;s r&amp;aacute;pida gracias al &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;mecanismo de &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://blogs.msdn.com/b/samng/archive/2008/10/29/dynamic-in-c.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;almacenamiento&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;cach&amp;eacute;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en DLR. Por supuesto, puede escribir c&amp;oacute;digo que almacene delegados invocados en cach&amp;eacute;, pero al usar el &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;tipo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; obtendr&amp;aacute; este comportamiento de forma gratuita.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a1c8be7af2cd4942d425c8acbca54b27f3a0fd1c" translate="yes" xml:space="preserve">
          <source>Then call the GetMethod to find your Generic function:</source>
          <target state="translated">Entonces llama al GetMethod para encontrar tu función genérica:</target>
        </trans-unit>
        <trans-unit id="c44ea81c31c9bb2a9faf2f4ed6872c9d33de9413" translate="yes" xml:space="preserve">
          <source>Then you can implement an &lt;strong&gt;Extension method&lt;/strong&gt; like:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Luego puede implementar un &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;m&amp;eacute;todo de extensi&amp;oacute;n&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; como:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fb135918ceddb6a1d5e34c0fb0e83d4f111ed8bf" translate="yes" xml:space="preserve">
          <source>This breaks down to</source>
          <target state="translated">Esto se reduce a</target>
        </trans-unit>
        <trans-unit id="a8960ad7737b28ec4ae581cd4869cfab688d34bf" translate="yes" xml:space="preserve">
          <source>This is my 2 cents based on &lt;a href=&quot;https://stackoverflow.com/questions/232535/how-do-i-use-reflection-to-call-a-generic-method/27870198#27870198&quot;&gt;Grax's answer&lt;/a&gt;, but with two parameters required for a generic method.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Estos son mis 2 centavos basados ​​en &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/232535/how-do-i-use-reflection-to-call-a-generic-method/27870198#27870198&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;la respuesta de Grax&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , pero con dos par&amp;aacute;metros necesarios para un m&amp;eacute;todo gen&amp;eacute;rico.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b3015b46b324fde3ee4d8dd94da83a586e9c2768" translate="yes" xml:space="preserve">
          <source>To use this technique the type must be known from the actual object (not just an instance of the &lt;code&gt;Type&lt;/code&gt; class). Otherwise, you have to create an object of that type or use the standard reflection API &lt;a href=&quot;https://stackoverflow.com/a/232621/350384&quot;&gt;solution&lt;/a&gt;. You can create an object by using the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/wccyzw83%28v=vs.110%29.aspx&quot;&gt;Activator.CreateInstance&lt;/a&gt; method.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para utilizar esta t&amp;eacute;cnica, el tipo debe conocerse desde el objeto real (no solo una instancia de la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;clase &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Type&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;De lo contrario, debe crear un objeto de ese tipo o utilizar la &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/232621/350384&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;soluci&amp;oacute;n&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; API de reflexi&amp;oacute;n est&amp;aacute;ndar &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Puede crear un objeto utilizando el &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;m&amp;eacute;todo &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/wccyzw83%28v=vs.110%29.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Activator.CreateInstance&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9022f7a3300139eca4da2ae6055f0933304d153a" translate="yes" xml:space="preserve">
          <source>What is really great about using &lt;code&gt;dynamic&lt;/code&gt; object as a replacement for using reflection API is that you only lose compile time checking of this particular type that you don't know until runtime. Other arguments and the name of the method are staticly analysed by the compiler as usual. If you remove or add more arguments, change their types or rename method name then you'll get a compile-time error. This won't happen if you provide the method name as a string in &lt;code&gt;Type.GetMethod&lt;/code&gt; and arguments as the objects array in &lt;code&gt;MethodInfo.Invoke&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Lo realmente bueno de usar &lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; objeto &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;din&amp;aacute;mico&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; como reemplazo para usar la API de reflexi&amp;oacute;n es que solo pierde el tiempo de compilaci&amp;oacute;n de este tipo en particular que no conoce hasta el tiempo de ejecuci&amp;oacute;n. Otros argumentos y el nombre del m&amp;eacute;todo son analizados est&amp;aacute;ticamente por el compilador como de costumbre. Si elimina o agrega m&amp;aacute;s argumentos, cambia sus tipos o cambia el nombre del m&amp;eacute;todo, obtendr&amp;aacute; un error en tiempo de compilaci&amp;oacute;n. Esto no suceder&amp;aacute; si proporciona el nombre del m&amp;eacute;todo como una cadena en &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Type.GetMethod&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y los argumentos como la matriz de objetos en &lt;/font&gt;&lt;/font&gt; &lt;code&gt;MethodInfo.Invoke&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="79c6d1b5dee1d9cd5b14b69f29197a6a7def0b37" translate="yes" xml:space="preserve">
          <source>What's the best way to call a generic method when the type parameter isn't known at compile time, but instead is obtained dynamically at runtime?</source>
          <target state="translated">¿Cuál es la mejor manera de llamar a un método genérico cuando el parámetro de tipo no se conoce en tiempo de compilación,sino que se obtiene dinámicamente en tiempo de ejecución?</target>
        </trans-unit>
        <trans-unit id="1b7a47c991c2d8b5beb9c96b965196f41193a463" translate="yes" xml:space="preserve">
          <source>When the above console application is executed, we get the correct, expected result:</source>
          <target state="translated">Cuando la aplicación de la consola anterior se ejecuta,obtenemos el resultado correcto y esperado:</target>
        </trans-unit>
        <trans-unit id="dce830c550f9fdfb467286f2d4635ef7a543116b" translate="yes" xml:space="preserve">
          <source>When you pass the &lt;code&gt;dynamic&lt;/code&gt; argument to a method then this call is &lt;a href=&quot;http://blogs.msdn.com/b/ericlippert/archive/2012/02/06/what-is-quot-binding-quot-and-what-makes-it-late.aspx&quot;&gt;lately bound&lt;/a&gt;. Method overload resolution happens at runtime and tries to choose the best overload. So if you invoke the &lt;code&gt;ProcessItem&lt;/code&gt; method with an object of &lt;code&gt;BarItem&lt;/code&gt; type then you'll actually call the non-generic method, because it is a better match for this type. However, you'll get a runtime error when you pass an argument of the &lt;code&gt;Alpha&lt;/code&gt; type because there's no method that can handle this object (a generic method has the constraint &lt;code&gt;where T : IItem&lt;/code&gt; and &lt;code&gt;Alpha&lt;/code&gt; class doesn't implement this interface). But that's the whole point. The compiler doesn't have information that this call is valid. You as a programmer know this, and you should make sure that this code runs without errors.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cuando pasa el &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;argumento &lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; a un m&amp;eacute;todo, esta llamada est&amp;aacute; &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://blogs.msdn.com/b/ericlippert/archive/2012/02/06/what-is-quot-binding-quot-and-what-makes-it-late.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;vinculada &amp;uacute;ltimamente&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . La resoluci&amp;oacute;n de sobrecarga del m&amp;eacute;todo ocurre en tiempo de ejecuci&amp;oacute;n e intenta elegir la mejor sobrecarga. Entonces, si invoca el &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;m&amp;eacute;todo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;ProcessItem&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; con un objeto de &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;tipo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;BarItem&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , en realidad llamar&amp;aacute; al m&amp;eacute;todo no gen&amp;eacute;rico, porque es una mejor coincidencia para este tipo. Sin embargo, obtendr&amp;aacute; un error de tiempo de ejecuci&amp;oacute;n cuando pase un argumento del &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;tipo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Alpha&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; porque no hay ning&amp;uacute;n m&amp;eacute;todo que pueda manejar este objeto (un m&amp;eacute;todo gen&amp;eacute;rico tiene la restricci&amp;oacute;n &lt;/font&gt;&lt;/font&gt; &lt;code&gt;where T : IItem&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Alpha&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;la clase no implementa esta interfaz). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Pero ese es todo el punto. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El compilador no tiene informaci&amp;oacute;n de que esta llamada sea v&amp;aacute;lida. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Usted, como programador, sabe esto y debe asegurarse de que este c&amp;oacute;digo se ejecute sin errores.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8404bf1a6dddcdc8393275d5ed416ce9e721c54f" translate="yes" xml:space="preserve">
          <source>When you're calling a non-void method with a parameter of dynamic type, its return type will probably &lt;a href=&quot;http://blogs.msdn.com/b/ericlippert/archive/2012/11/05/dynamic-contagion-part-one.aspx&quot;&gt;be &lt;code&gt;dynamic&lt;/code&gt; too&lt;/a&gt;. So if you'd change previous example to this code:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cuando usted est&amp;aacute; llamando a un m&amp;eacute;todo no-vac&amp;iacute;o con un par&amp;aacute;metro de tipo din&amp;aacute;mico, su tipo de retorno es probable que &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://blogs.msdn.com/b/ericlippert/archive/2012/11/05/dynamic-contagion-part-one.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;sea &lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; demasiado&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Entonces, si cambiara el ejemplo anterior a este c&amp;oacute;digo:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fedfbc7c2bbd6eca438e3ee81dc7bea49d38ab49" translate="yes" xml:space="preserve">
          <source>While not very pretty, you have a compile time reference to &lt;code&gt;GenericMethod&lt;/code&gt; here, and if you refactor, delete or do anything with &lt;code&gt;GenericMethod&lt;/code&gt;, this code will keep working, or at least break at compile time (if for example you remove &lt;code&gt;GenericMethod&lt;/code&gt;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si bien no es muy bonito, tiene una referencia de tiempo de compilaci&amp;oacute;n a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;GenericMethod&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; aqu&amp;iacute;, y si refactoriza, elimina o hace algo con &lt;/font&gt;&lt;/font&gt; &lt;code&gt;GenericMethod&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , este c&amp;oacute;digo seguir&amp;aacute; funcionando, o al menos se romper&amp;aacute; en el momento de la compilaci&amp;oacute;n (si, por ejemplo, elimina &lt;/font&gt;&lt;/font&gt; &lt;code&gt;GenericMethod&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ec22391a4f2500abe458e94af602de0364dc138c" translate="yes" xml:space="preserve">
          <source>With C# 4.0, reflection isn't necessary as the DLR can call it using runtime types. Since using the DLR library is kind of a pain dynamically (instead of the C# compiler generating code for you), the open source framework &lt;a href=&quot;https://github.com/ekonbenefits/dynamitey&quot;&gt;Dynamitey&lt;/a&gt; (.net standard 1.5) gives you easy cached run-time access to the same calls the compiler would generate for you.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Con C # 4.0, la reflexi&amp;oacute;n no es necesaria ya que el DLR puede llamarla usando tipos de tiempo de ejecuci&amp;oacute;n. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Dado que el uso de la biblioteca DLR es una molestia din&amp;aacute;mica (en lugar del compilador de C # que genera el c&amp;oacute;digo para usted), el marco de c&amp;oacute;digo abierto &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/ekonbenefits/dynamitey&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Dynamitey&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (.net est&amp;aacute;ndar 1.5) le brinda un f&amp;aacute;cil acceso en tiempo de ejecuci&amp;oacute;n en cach&amp;eacute; a las mismas llamadas que generar&amp;iacute;a el compilador para ti.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fcd000c27dc69c7663b53e7a3d73eb6fdfd2d157" translate="yes" xml:space="preserve">
          <source>With this, you can simply invoke &lt;code&gt;Foo&lt;/code&gt; like:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Con esto, simplemente puede invocar a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Foo&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; como:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="42897873d05394d080118009dfd1350d62ee67d6" translate="yes" xml:space="preserve">
          <source>You need to pass an Type[] array to the MakeGenericMethod function that contains the &quot;dummy&quot; objects' types that were create above:</source>
          <target state="translated">Es necesario pasar una matriz Type[]a la función MakeGenericMethod que contiene los tipos de objetos &quot;dummy&quot; que fueron creados anteriormente:</target>
        </trans-unit>
        <trans-unit id="853cd5b66a7e2b293f546f0344c027aef902486f" translate="yes" xml:space="preserve">
          <source>You need to use reflection to get the method to start with, then &quot;construct&quot; it by supplying type arguments with &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.reflection.methodinfo.makegenericmethod.aspx&quot;&gt;MakeGenericMethod&lt;/a&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.reflection.methodinfo.makegenericmethod.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Debe&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; usar la reflexi&amp;oacute;n para comenzar con el m&amp;eacute;todo y luego &quot;construirlo&quot; proporcionando argumentos de tipo con &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MakeGenericMethod&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="23069e59f1bd650765a9a30fef468aa3c1c13002" translate="yes" xml:space="preserve">
          <source>You'll get a runtime error if the type doesn't match.</source>
          <target state="translated">Recibirás un error de ejecución si el tipo no coincide.</target>
        </trans-unit>
        <trans-unit id="cd48c0cf5ab841d4c18ac071da7961a84838cc65" translate="yes" xml:space="preserve">
          <source>and it creates and returns an IDictionary instance, the types of whose keys and values are exactly the specified on the call &lt;code&gt;keyType&lt;/code&gt; and &lt;code&gt;valueType&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;y crea y devuelve una instancia IDictionary, cuyos tipos de claves y valores son exactamente los especificados en call &lt;/font&gt;&lt;/font&gt; &lt;code&gt;keyType&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;valueType&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1a3a44f4007c44bb308dc019adec528028384da4" translate="yes" xml:space="preserve">
          <source>and you want to call the method &lt;code&gt;Foo&amp;lt;T&amp;gt;&lt;/code&gt; with &lt;code&gt;Bar&lt;/code&gt; and &lt;code&gt;Square&lt;/code&gt;, which is declared as</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;y desea llamar al m&amp;eacute;todo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Foo&amp;lt;T&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; con &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Bar&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; and &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Square&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , que se declara como&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="373f9635c978d1478015369c2f1c35e7f368020a" translate="yes" xml:space="preserve">
          <source>myClassInfo contains 2 properties of type &lt;code&gt;Type&lt;/code&gt; which I set at run time based on an enum value passed to the constructor and will provide me with the relevant types which I then use in the MakeGenericMethod.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;myClassInfo contiene 2 propiedades de tipo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Type&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que configur&amp;eacute; en tiempo de ejecuci&amp;oacute;n en funci&amp;oacute;n de un valor de enumeraci&amp;oacute;n pasado al constructor y me proporcionar&amp;aacute; los tipos relevantes que luego usar&amp;eacute; en MakeGenericMethod.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ea239bd275bdb1c60259e5ce696669042c884ce3" translate="yes" xml:space="preserve">
          <source>then the type of the result object would be &lt;code&gt;dynamic&lt;/code&gt;. This is because the compiler don't always know which method will be called. If you know the return type of the function call then you should &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/dd264736.aspx&quot;&gt;implicitly convert&lt;/a&gt; it to the required type so the rest of the code is statically typed:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;entonces el tipo del objeto resultante ser&amp;iacute;a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esto se debe a que el compilador no siempre sabe qu&amp;eacute; m&amp;eacute;todo se llamar&amp;aacute;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si conoce el tipo de retorno de la llamada a la funci&amp;oacute;n, debe &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/dd264736.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;convertirlo impl&amp;iacute;citamente&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; al tipo requerido para que el resto del c&amp;oacute;digo se escriba est&amp;aacute;ticamente:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a372cbfc24988c0b6b54696156394bd41662428f" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;GenericMethod&amp;lt;object&amp;gt;&lt;/code&gt; is the method name to call and any type that satisfies the generic constraints.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;donde &lt;/font&gt;&lt;/font&gt; &lt;code&gt;GenericMethod&amp;lt;object&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es el nombre del m&amp;eacute;todo a llamar y cualquier tipo que satisfaga las restricciones gen&amp;eacute;ricas.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c46221efe69e51d85aefd32ebaa97fd5956d92c8" translate="yes" xml:space="preserve">
          <source>which works for every class. In this case, it will output:</source>
          <target state="translated">que funciona para todas las clases.En este caso,saldrá:</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
