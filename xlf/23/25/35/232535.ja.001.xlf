<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/232535">
    <body>
      <group id="232535">
        <trans-unit id="290dca3ab720e1a5481fc7d2b2daac691a5ecb5a" translate="yes" xml:space="preserve">
          <source>(Action) matches the signature of the method to be called i.e. (&lt;code&gt;Func&amp;lt;string,string,int&amp;gt;&lt;/code&gt; or &lt;code&gt;Action&amp;lt;bool&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（Action）は、呼び出されるメソッドのシグネチャ（&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Func&amp;lt;string,string,int&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;または&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Action&amp;lt;bool&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一致します&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="eade1fee26c0d1bbb44af59dd13e2489047a6b1f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;((Action)GenericMethod&amp;lt;object&amp;gt;)&lt;/code&gt; refers to the delegate for a specific method.  &lt;code&gt;((Func&amp;lt;string, int&amp;gt;)GenericMethod&amp;lt;object&amp;gt;)&lt;/code&gt;
refers to a different overload of GenericMethod</source>
          <target state="translated">&lt;code&gt;((Action)GenericMethod&amp;lt;object&amp;gt;)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、特定のメソッドのデリゲートを指し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;((Func&amp;lt;string, int&amp;gt;)GenericMethod&amp;lt;object&amp;gt;)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; は、GenericMethodの別のオーバーロードを参照します&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6a0d78764959f75f1c68a022f5bd6b24043de989" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Process&lt;/code&gt; is a generic instance method that writes the real type of the passed argument (by using the &lt;code&gt;GetType()&lt;/code&gt; method) and the type of the generic parameter (by using &lt;code&gt;typeof&lt;/code&gt; operator).</source>
          <target state="translated">&lt;code&gt;Process&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、（&lt;/font&gt;&lt;/font&gt; &lt;code&gt;GetType()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;メソッド&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用して&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;渡された引数の実際の型と&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（&lt;/font&gt;&lt;/font&gt; &lt;code&gt;typeof&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;演算子&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用して&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;汎用パラメーターの型&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を書き込む汎用インスタンスメソッドです&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9097a22fe8a8346d04ab4f4d592127c641a5df14" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Here is a complete example&lt;/strong&gt; how to call this method to instantiate and use a &lt;code&gt;Dictionary&amp;lt;String, int&amp;gt;&lt;/code&gt; :</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このメソッドを呼び出して&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Dictionary&amp;lt;String, int&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;をインスタンス化して使用する方法の&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;完全な例を次に&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;示します&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b0b37dffa6e6122d271d9e18dfbb71a232abb0a0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Nobody provided the &quot;&lt;em&gt;classic Reflection&lt;/em&gt;&quot; solution, so here is a complete code example:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;誰も「&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;クラシックリフレクション&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;」ソリューションを&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;提供しなかった&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ので、ここに完全なコード例を示します。&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d4b2dbb7dd3fe023446263ea126c7b75aa47f762" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;UPDATE:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;UPDATE:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d3e03bcbed0df764147b039386dd063669f0a622" translate="yes" xml:space="preserve">
          <source>Actually, if you try to get the result value in the previous example then you'll get a runtime error in the second loop iteration. This is because you tried to save the return value of a void function.</source>
          <target state="translated">実際、先ほどの例で結果の値を取得しようとすると、2回目のループの繰り返しで実行時エラーが発生します。これは void 関数の戻り値を保存しようとしたためです。</target>
        </trans-unit>
        <trans-unit id="6948afca7dccd71e85dc3ca8c088ba64645a55fb" translate="yes" xml:space="preserve">
          <source>Adding on to &lt;a href=&quot;https://stackoverflow.com/questions/232535/how-do-i-use-reflection-to-call-a-generic-method/5134251#5134251&quot;&gt;Adrian Gallero's answer&lt;/a&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/232535/how-do-i-use-reflection-to-call-a-generic-method/5134251#5134251&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;エイドリアンガレロの答えに&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;追加&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="33e2d283d2aad7d67769d4f55add11d23ef1e453" translate="yes" xml:space="preserve">
          <source>And here's the output of this program:</source>
          <target state="translated">そして、このプログラムの出力がこちらです。</target>
        </trans-unit>
        <trans-unit id="99919dbd92d3b1040229c15105c4f8bceb3982a4" translate="yes" xml:space="preserve">
          <source>And you're done. Works a charm!</source>
          <target state="translated">そして、あなたは完了しました。おまじないが効く!</target>
        </trans-unit>
        <trans-unit id="216a63bdbdc9d45a52c7753edbb2667c6fd32804" translate="yes" xml:space="preserve">
          <source>As @Bevan highlighted, I do not need to create an array when calling the MakeGenericMethod function as it takes in params and I do not need to create an object in order to get the types as I can just pass the types directly to this function. In my case, since I have the types predefined in another class, I simply changed my code to:</source>
          <target state="translated">Bevan氏が強調しているように、MakeGenericMethod関数を呼び出す際に配列を作成する必要はありません。私の場合は、別のクラスで定義された型を持っているので、単純にコードを変更しました。</target>
        </trans-unit>
        <trans-unit id="799d027859f5995cd505ea490d7a05d319fff312" translate="yes" xml:space="preserve">
          <source>As I have my types predefined, I first create the &quot;dummy&quot; objects that represent the observable collection (U) and the object stored in it (T) and that will be used below to get their type when calling the Make</source>
          <target state="translated">型が定義されているので、まず、観測可能なコレクション(U)とその中に格納されているオブジェクト(T)を表す &quot;ダミー &quot;オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="bcc3a3e9403f5f488724ebeb608a3b693141e853" translate="yes" xml:space="preserve">
          <source>As noted, a lot of this is simpler as of C# 4 using &lt;code&gt;dynamic&lt;/code&gt; - if you can use type inference, of course. It doesn't help in cases where type inference isn't available, such as the exact example in the question.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;述べたように、これの多くはC＃4のように&lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用してより単純&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です-もちろん、型推論を使用できる場合。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;質問の正確な例のように、型推論が利用できない場合には役に立ちません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bc935acf2946f21ff5a8104d6caf3a54e8ca9c72" translate="yes" xml:space="preserve">
          <source>Assume your method is defined as follows in an Helpers class:</source>
          <target state="translated">あなたのメソッドがヘルパークラスで以下のように定義されているとします。</target>
        </trans-unit>
        <trans-unit id="e496fd20136d4bb7828ebb0ab925b1bd977208e4" translate="yes" xml:space="preserve">
          <source>Bar</source>
          <target state="translated">Bar</target>
        </trans-unit>
        <trans-unit id="11bbdd21c0418fc331acb348f91073f99e050d4f" translate="yes" xml:space="preserve">
          <source>Below is a simple example that illustrates how some errors can be caught at compile time (commented code) and other at runtime. It also shows how the DLR tries to resolve which method to call.</source>
          <target state="translated">以下に簡単な例を示します。コンパイル時のエラー(コメント付きコード)と実行時のエラーがどのようにして検出されるかを示します。また、DLR がどのメソッドを呼び出すかを解決しようとする様子も示しています。</target>
        </trans-unit>
        <trans-unit id="2c2798ed71d0e9561c4ff9c754ef9e2ce7109cde" translate="yes" xml:space="preserve">
          <source>By casting the object argument to &lt;code&gt;dynamic&lt;/code&gt; type we deferred providing the type parameter until runtime. When the &lt;code&gt;Process&lt;/code&gt; method is called with the &lt;code&gt;dynamic&lt;/code&gt; argument then the compiler doesn't care about the type of this argument. The compiler generates code that at runtime checks the real types of passed arguments (by using reflection) and choose the best method to call. Here there is only this one generic method, so it's invoked with a proper type parameter.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;オブジェクトの引数を&lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;型に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;キャスト&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;することで、型パラメーターの提供を実行時まで延期しました。&lt;/font&gt; &lt;code&gt;dynamic&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;引数を指定&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;て&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Process&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;メソッドを呼び出すと&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、コンパイラーはこの引数のタイプを気にしません。コンパイラーは、実行時に渡された引数の実際のタイプを（リフレクションを使用して）チェックし、呼び出すのに最適なメソッドを選択するコードを生成します。ここでは、このジェネリックメソッドは1つだけなので、適切な型パラメーターで呼び出されます。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a8ab9b59067b625e5d1277f4587a383ced70d22f" translate="yes" xml:space="preserve">
          <source>Calling a generic method from type info involves three steps.</source>
          <target state="translated">型情報から汎用メソッドを呼び出すには3つのステップがあります。</target>
        </trans-unit>
        <trans-unit id="b2de9db1a09abb77e65ac60c781e70bcfe2b06e3" translate="yes" xml:space="preserve">
          <source>Calling a generic method with a type parameter known only at runtime can be greatly simplified by using a &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/dd264741.aspx&quot;&gt;&lt;code&gt;dynamic&lt;/code&gt;&lt;/a&gt; type instead of the reflection API.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;リフレクションAPIの代わりに&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/dd264741.aspx&quot;&gt; &lt;code&gt;dynamic&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;型&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用することで、実行時にのみ既知の型パラメーターでジェネリックメソッドを呼び出すことが大幅に簡略化でき&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="700051fbfe581fb9c5bfa257409b6321d2417148" translate="yes" xml:space="preserve">
          <source>Consider the following sample code - inside the &lt;code&gt;Example()&lt;/code&gt; method, what's the most concise way to invoke &lt;code&gt;GenericMethod&amp;lt;T&amp;gt;()&lt;/code&gt; using the &lt;code&gt;Type&lt;/code&gt; stored in the &lt;code&gt;myType&lt;/code&gt; variable?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;次のサンプルコードを検討してください&lt;/font&gt; &lt;code&gt;GenericMethod&amp;lt;T&amp;gt;()&lt;/code&gt; &lt;/font&gt; &lt;code&gt;Example()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;メソッド&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;内&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;で、&lt;/font&gt; &lt;code&gt;myType&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;変数に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;格納され&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ている&lt;/font&gt; &lt;code&gt;Type&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用して&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;GenericMethod &amp;lt;T&amp;gt;（）&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;呼び出す最も簡潔な方法は何&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ですか。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2064efa8dc3c980cf7e4c32b5acd966878f7a566" translate="yes" xml:space="preserve">
          <source>Create a lambda expression where the body is a call to your desired method.</source>
          <target state="translated">ボディが目的のメソッドへの呼び出しであるラムダ式を作成します。</target>
        </trans-unit>
        <trans-unit id="a217db111f67c2f7402aa3b03890c7a22a0b43dd" translate="yes" xml:space="preserve">
          <source>Extract the body and cast to MethodCallExpression</source>
          <target state="translated">ボディを抽出し、MethodCallExpressionにキャストします。</target>
        </trans-unit>
        <trans-unit id="640cece90ac2b8fb0b824605e1912102c78e8327" translate="yes" xml:space="preserve">
          <source>For a static method, pass &lt;code&gt;null&lt;/code&gt; as the first argument to &lt;code&gt;Invoke&lt;/code&gt;. That's nothing to do with generic methods - it's just normal reflection.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;静的メソッドの場合、&lt;/font&gt; &lt;code&gt;Invoke&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最初の引数として&lt;/font&gt;&lt;/font&gt; &lt;code&gt;null&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;渡し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これはジェネリックメソッドとは関係ありません。通常のリフレクションです。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="55a34421347462e3f49de09230d42ac8cc3ca24b" translate="yes" xml:space="preserve">
          <source>From inside the class that contains the methods:</source>
          <target state="translated">メソッドを含むクラスの中から</target>
        </trans-unit>
        <trans-unit id="00a31b6c428bbb944f073d8f4b1f127ee082778f" translate="yes" xml:space="preserve">
          <source>From outside of the class that contains the methods:</source>
          <target state="translated">メソッドを含むクラスの外側から</target>
        </trans-unit>
        <trans-unit id="d70b8f016157b260f321a2fb4335baa273a26ce5" translate="yes" xml:space="preserve">
          <source>Get the generic method definition from the method</source>
          <target state="translated">メソッドから一般的なメソッドの定義を取得する</target>
        </trans-unit>
        <trans-unit id="7b847379849d8d7a344d32e4c647e0ab4351d5a9" translate="yes" xml:space="preserve">
          <source>Here we again execute some method by casting the argument to the &lt;code&gt;dynamic&lt;/code&gt; type. Only verification of first argument's type is postponed to runtime. You will get a compiler error if the name of the method you're calling doesn't exist or if other arguments are invalid (wrong number of arguments or wrong types).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここでは、引数を&lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;型に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;キャストすることで、いくつかのメソッドを再度実行し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。最初の引数の型の検証のみがランタイムに延期されます。呼び出すメソッドの名前が存在しない場合、または他の引数が無効な場合（引数の数が間違っているか、型が間違っている場合）、コンパイラエラーが発生します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0315a9e740160f0ca13b2d84138fc111d8391914" translate="yes" xml:space="preserve">
          <source>How do I use reflection to call a generic method</source>
          <target state="translated">リフレクションを使って汎用メソッドを呼び出すにはどうすればいいですか?</target>
        </trans-unit>
        <trans-unit id="a4c3790710308f94a83a5dd5f3888b53d1435d7e" translate="yes" xml:space="preserve">
          <source>If the generic method you want to call don't have an argument of a parametrized type (so its type parameter can't be inferred) then you can wrap the invocation of the generic method in a helper method like in the following example:</source>
          <target state="translated">呼び出したい汎用メソッドがパラメトリック型の引数を持っていない(その型のパラメータを推測できない)場合は、以下の例のように汎用メソッドの呼び出しをヘルパーメソッドでラップすることができます。</target>
        </trans-unit>
        <trans-unit id="627cef4b3bc7960549ca0a42a2e855e9f22addfa" translate="yes" xml:space="preserve">
          <source>If you want to call a generic method, that in &quot;normal&quot; usage would have had its type inferred, then it simply comes to casting the object of unknown type to &lt;code&gt;dynamic&lt;/code&gt;. Here's an example:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ジェネリックメソッドを呼び出したい場合、「通常の」使用法ではその型が推論されているはずなので、不明な型のオブジェクトを&lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;にキャストするだけ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;次に例を示します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c816ba8015c5a6ba4fca39da061e639a87d64575" translate="yes" xml:space="preserve">
          <source>In C#, the name of a method, i.e. &quot;ToString&quot; or &quot;GenericMethod&quot; actually refers to a group of methods that may contain one or more methods.  Until you provide the types of the method parameters, it is not known which
method you are referring to.</source>
          <target state="translated">C#では、メソッドの名前、つまり「ToString」や「GenericMethod」は、実際には1つ以上のメソッドを含む可能性のあるメソッドのグループを指しています。メソッドのパラメータの型を指定するまでは、どのメソッドを参照しているのかはわかりません。</target>
        </trans-unit>
        <trans-unit id="64a7903f2368131e45db46d0f45ddc31af324f43" translate="yes" xml:space="preserve">
          <source>In my case, U type is always an observable collection storing object of type T.</source>
          <target state="translated">私の場合、U型は常にT型のオブジェクトを格納する観測可能なコレクションです。</target>
        </trans-unit>
        <trans-unit id="663ed56d7bd2f9b2f4412cef83d93fb68be5fa68" translate="yes" xml:space="preserve">
          <source>In this example, the output is the same as if you wrote:</source>
          <target state="translated">この例では、書いたのと同じ出力になります。</target>
        </trans-unit>
        <trans-unit id="8d9004c4286a60de60fb05088f82267bb1577163" translate="yes" xml:space="preserve">
          <source>Increased type safety</source>
          <target state="translated">タイプの安全性を高めた</target>
        </trans-unit>
        <trans-unit id="11ecb9e238d47d2076d7d3c7840c7fa92320873c" translate="yes" xml:space="preserve">
          <source>Inspired by &lt;a href=&quot;https://stackoverflow.com/a/3958029/1016343&quot;&gt;Enigmativity's answer&lt;/a&gt; - let's assume you have two (or more) classes, like</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/3958029/1016343&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Enigmativityの答えに&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;触発された&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;-あなたが2つ（またはそれ以上）のクラスを持っているとしましょう&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2e858ba310b42e6a40b6de119e75801635cd79b4" translate="yes" xml:space="preserve">
          <source>It is also a little dangerous in that you lose compile-time check for &lt;code&gt;GenericMethod&lt;/code&gt;. If you later do a refactoring and rename &lt;code&gt;GenericMethod&lt;/code&gt;, this code won't notice and will fail at run time. Also, if there is any post-processing of the assembly (for example obfuscating or removing unused methods/classes) this code might break too.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;また、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;GenericMethod&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コンパイル時のチェックが失われるという点でも少し危険&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;後でリファクタリングを行って&lt;/font&gt;&lt;/font&gt; &lt;code&gt;GenericMethod&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;名前を変更する&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、このコードは気づかず、実行時に失敗します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;また、アセンブリの後処理（たとえば、未使用のメソッド/クラスの難読化または削除）がある場合、このコードも壊れる可能性があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="49a8f72f1d6e69c26774d5b7330e9f867d36e46c" translate="yes" xml:space="preserve">
          <source>Just an addition to the original answer. While this will work:</source>
          <target state="translated">元の答えに加えて これが効いてくるうちに</target>
        </trans-unit>
        <trans-unit id="164862777ffc462fddf1ecc891e3c07dadf1cb8b" translate="yes" xml:space="preserve">
          <source>Method 1: Use GetMethod() or GetMethods() with appropriate types or binding flags.</source>
          <target state="translated">メソッド 1:適切な型またはバインディング・フラグを使用して GetMethod()または GetMethods()を使用します。</target>
        </trans-unit>
        <trans-unit id="ac41f3ed4518f772f2950c9bfbe7e27d036c4e08" translate="yes" xml:space="preserve">
          <source>Method 2: Create a delegate, get the MethodInfo object and then call GetGenericMethodDefinition</source>
          <target state="translated">方法 2:デリゲートを作成し、MethodInfo オブジェクトを取得してから GetGenericMethodDefinition を呼び出す</target>
        </trans-unit>
        <trans-unit id="808836eb797ce4820ccc2b563d024dd00085ac83" translate="yes" xml:space="preserve">
          <source>Method 3: Create a lambda expression containing a method call expression, get the MethodInfo object and then GetGenericMethodDefinition</source>
          <target state="translated">方法3:メソッド呼び出し式を含むラムダ式を作成し、MethodInfoオブジェクトを取得してからGetGenericMethodDefinition</target>
        </trans-unit>
        <trans-unit id="ac9a8276adb665176231fee6f408b81a6e2597bb" translate="yes" xml:space="preserve">
          <source>Once that's done, you need to call the Invoke method as mentioned above.</source>
          <target state="translated">これが完了したら、上記のようにInvokeメソッドを呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="1ccc6e3ed223e001f1f7a3f43c0c7bf5565c0c7f" translate="yes" xml:space="preserve">
          <source>Other way to do the same would be to create a new wrapper class, and create it through &lt;code&gt;Activator&lt;/code&gt;. I don't know if there is a better way.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;同じことを行う他の方法は、新しいラッパークラスを作成し、それを&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Activator&lt;/code&gt; で&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;作成すること&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;もっと良い方法があるかどうかわかりません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="18ffe6774cd6052e6a5429ac8ddd7f451be8e518" translate="yes" xml:space="preserve">
          <source>Return type gotcha</source>
          <target state="translated">戻り値の型はgetchaです。</target>
        </trans-unit>
        <trans-unit id="09fae740bb06d7d7836a868121bf72704812d0cf" translate="yes" xml:space="preserve">
          <source>So far, the above call is pretty much identical as to what was explained above but with a small difference when you need have to pass multiple parameters to it.</source>
          <target state="translated">これまでのところ、上記の呼び出しは上記で説明したものとほとんど同じですが、複数のパラメータを渡す必要がある場合には少し違いがあります。</target>
        </trans-unit>
        <trans-unit id="a3945ea8d27fd43e9d99eb3c8a9fd73ce87c698d" translate="yes" xml:space="preserve">
          <source>So, if you know the method you are linking to at compile time, and this isn't called millions of times so overhead doesn't matter, I would change this code to be:</source>
          <target state="translated">なので、コンパイル時にリンク先のメソッドがわかっていて、これが何百万回も呼ばれないからオーバーヘッドは関係ないという場合は、このコードを変更してもいいと思います。</target>
        </trans-unit>
        <trans-unit id="82810cb97184cf542141f811b63d90bc5de31d1b" translate="yes" xml:space="preserve">
          <source>Square</source>
          <target state="translated">Square</target>
        </trans-unit>
        <trans-unit id="9b41eacb7403e5d890688714639a7294557df4ab" translate="yes" xml:space="preserve">
          <source>Step 1 is getting the MethodInfo for the generic method definition</source>
          <target state="translated">ステップ1は、汎用メソッド定義のMethodInfoを取得します。</target>
        </trans-unit>
        <trans-unit id="67d9de28a183a084af65257a905a688ecdd5e6bb" translate="yes" xml:space="preserve">
          <source>Step 2 is calling MakeGenericMethod to create a generic method with the appropriate type(s).</source>
          <target state="translated">ステップ2はMakeGenericMethodを呼び出して、適切な型を持つジェネリックメソッドを作成します。</target>
        </trans-unit>
        <trans-unit id="8b661a119a98f836903907c7eb9f961379a66036" translate="yes" xml:space="preserve">
          <source>Step 3 is invoking the method with the appropriate arguments.</source>
          <target state="translated">ステップ3は、適切な引数を指定してメソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="9943c087af287bfa4af41a991331b810939f0875" translate="yes" xml:space="preserve">
          <source>TLDR: Calling a known generic method with a type object can be accomplished by:</source>
          <target state="translated">TLDR:既知の汎用メソッドを型オブジェクトで呼び出すことは、次のようにして実現できます。</target>
        </trans-unit>
        <trans-unit id="6308d99e0166e934578bd1cf387a50a19d5eb3a2" translate="yes" xml:space="preserve">
          <source>Thanks again for highlighting this @Bevan.</source>
          <target state="translated">この@Bevanを強調してくれてありがとう。</target>
        </trans-unit>
        <trans-unit id="a93a951faeaee285bd27afc60718dea76dbba251" translate="yes" xml:space="preserve">
          <source>The above &lt;code&gt;DynamicDictionaryFactory&lt;/code&gt; class has a method</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;上記の&lt;/font&gt;&lt;/font&gt; &lt;code&gt;DynamicDictionaryFactory&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;クラスにはメソッドがあり&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a8778d3f2682fbdfb38526c3f44aad540599bb50" translate="yes" xml:space="preserve">
          <source>The version with a dynamic type is definitely shorter and easier to write. You also shouldn't worry about performance of calling this function multiple times. The next call with arguments of the same type should be faster thanks to the &lt;a href=&quot;http://blogs.msdn.com/b/samng/archive/2008/10/29/dynamic-in-c.aspx&quot;&gt;caching&lt;/a&gt; mechanism in DLR. Of course, you can write code that cache invoked delegates, but by using the &lt;code&gt;dynamic&lt;/code&gt; type you get this behaviour for free.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;動的タイプのバージョンは間違いなく短く、書くのが簡単です。また、この関数を複数回呼び出す場合のパフォーマンスについて心配する必要はありません。同じタイプの引数を使用した次の呼び出しは&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、DLRの&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://blogs.msdn.com/b/samng/archive/2008/10/29/dynamic-in-c.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;キャッシング&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;メカニズムの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;おかげで高速になり&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。もちろん、呼び出されたデリゲートをキャッシュするコードを記述できますが、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;型を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用する&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ことで、この動作を無料で取得できます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a1c8be7af2cd4942d425c8acbca54b27f3a0fd1c" translate="yes" xml:space="preserve">
          <source>Then call the GetMethod to find your Generic function:</source>
          <target state="translated">次にGetMethodを呼び出して、Generic関数を探します。</target>
        </trans-unit>
        <trans-unit id="c44ea81c31c9bb2a9faf2f4ed6872c9d33de9413" translate="yes" xml:space="preserve">
          <source>Then you can implement an &lt;strong&gt;Extension method&lt;/strong&gt; like:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;次に、次の&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ような&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;拡張メソッド&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を実装できます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fb135918ceddb6a1d5e34c0fb0e83d4f111ed8bf" translate="yes" xml:space="preserve">
          <source>This breaks down to</source>
          <target state="translated">これは次のように分解されます。</target>
        </trans-unit>
        <trans-unit id="a8960ad7737b28ec4ae581cd4869cfab688d34bf" translate="yes" xml:space="preserve">
          <source>This is my 2 cents based on &lt;a href=&quot;https://stackoverflow.com/questions/232535/how-do-i-use-reflection-to-call-a-generic-method/27870198#27870198&quot;&gt;Grax's answer&lt;/a&gt;, but with two parameters required for a generic method.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/232535/how-do-i-use-reflection-to-call-a-generic-method/27870198#27870198&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Graxの回答に&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;基づく私の2セント&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ですが、ジェネリックメソッドには2つのパラメータが必要です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b3015b46b324fde3ee4d8dd94da83a586e9c2768" translate="yes" xml:space="preserve">
          <source>To use this technique the type must be known from the actual object (not just an instance of the &lt;code&gt;Type&lt;/code&gt; class). Otherwise, you have to create an object of that type or use the standard reflection API &lt;a href=&quot;https://stackoverflow.com/a/232621/350384&quot;&gt;solution&lt;/a&gt;. You can create an object by using the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/wccyzw83%28v=vs.110%29.aspx&quot;&gt;Activator.CreateInstance&lt;/a&gt; method.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この手法を使用するには、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Type&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;クラスの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;インスタンスだけでなく）実際のオブジェクトから認識されている必要があります&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それ以外の場合は、そのタイプのオブジェクトを作成するか、標準のリフレクションAPI &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/232621/350384&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ソリューションを&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用する必要があります&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/wccyzw83%28v=vs.110%29.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Activator.CreateInstance&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;メソッド&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用してオブジェクトを作成できます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9022f7a3300139eca4da2ae6055f0933304d153a" translate="yes" xml:space="preserve">
          <source>What is really great about using &lt;code&gt;dynamic&lt;/code&gt; object as a replacement for using reflection API is that you only lose compile time checking of this particular type that you don't know until runtime. Other arguments and the name of the method are staticly analysed by the compiler as usual. If you remove or add more arguments, change their types or rename method name then you'll get a compile-time error. This won't happen if you provide the method name as a string in &lt;code&gt;Type.GetMethod&lt;/code&gt; and arguments as the objects array in &lt;code&gt;MethodInfo.Invoke&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;dynamic&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;オブジェクトをリフレクションAPIの代わりに使用する&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ことの本当に優れている点&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、実行時までわからない、この特定の型のコンパイル時のチェックだけが失われることです。その他の引数とメソッドの名前は、通常どおりコンパイラーによって静的に分析されます。引数を削除または追加したり、型を変更したり、メソッド名を変更したりすると、コンパイル時エラーが発生します。これは、メソッド名を&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Type.GetMethod&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;文字列として提供し、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;引数を&lt;/font&gt;&lt;/font&gt; &lt;code&gt;MethodInfo.Invoke&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;オブジェクト配列として&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;提供する場合は発生しません&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="79c6d1b5dee1d9cd5b14b69f29197a6a7def0b37" translate="yes" xml:space="preserve">
          <source>What's the best way to call a generic method when the type parameter isn't known at compile time, but instead is obtained dynamically at runtime?</source>
          <target state="translated">コンパイル時に型パラメータがわからず、代わりに実行時に動的に取得される場合、ジェネリックメソッドを呼び出す最良の方法は何ですか?</target>
        </trans-unit>
        <trans-unit id="1b7a47c991c2d8b5beb9c96b965196f41193a463" translate="yes" xml:space="preserve">
          <source>When the above console application is executed, we get the correct, expected result:</source>
          <target state="translated">上記のコンソールアプリケーションを実行すると、期待通りの正しい結果が得られます。</target>
        </trans-unit>
        <trans-unit id="dce830c550f9fdfb467286f2d4635ef7a543116b" translate="yes" xml:space="preserve">
          <source>When you pass the &lt;code&gt;dynamic&lt;/code&gt; argument to a method then this call is &lt;a href=&quot;http://blogs.msdn.com/b/ericlippert/archive/2012/02/06/what-is-quot-binding-quot-and-what-makes-it-late.aspx&quot;&gt;lately bound&lt;/a&gt;. Method overload resolution happens at runtime and tries to choose the best overload. So if you invoke the &lt;code&gt;ProcessItem&lt;/code&gt; method with an object of &lt;code&gt;BarItem&lt;/code&gt; type then you'll actually call the non-generic method, because it is a better match for this type. However, you'll get a runtime error when you pass an argument of the &lt;code&gt;Alpha&lt;/code&gt; type because there's no method that can handle this object (a generic method has the constraint &lt;code&gt;where T : IItem&lt;/code&gt; and &lt;code&gt;Alpha&lt;/code&gt; class doesn't implement this interface). But that's the whole point. The compiler doesn't have information that this call is valid. You as a programmer know this, and you should make sure that this code runs without errors.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;dynamic&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;引数をメソッドに&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;渡すと、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この呼び出しは&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://blogs.msdn.com/b/ericlippert/archive/2012/02/06/what-is-quot-binding-quot-and-what-makes-it-late.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最近バインドされ&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。メソッドのオーバーロードの解決は実行時に行われ、最適なオーバーロードを選択しようとします。そのため、&lt;/font&gt; &lt;code&gt;BarItem&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;タイプの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;オブジェクトを&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;て&lt;/font&gt;&lt;/font&gt; &lt;code&gt;ProcessItem&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;メソッドを&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;呼び出すと、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;実際には非ジェネリックメソッドが呼び出されます。これは、このタイプに適しているためです。ただし、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このオブジェクトを処理できるメソッドがないため&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt; &lt;code&gt;Alpha&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;型の&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;引数を渡すとランタイムエラーが発生します&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（ジェネリックメソッドには&lt;/font&gt; &lt;code&gt;where T : IItem&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;および&lt;/font&gt; &lt;code&gt;Alpha&lt;/code&gt; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;クラスはこのインターフェースを実装していません）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;しかし、それがすべてのポイントです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コンパイラには、この呼び出しが有効であるという情報がありません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あなたはプログラマーとしてこれを知っており、このコードがエラーなしで実行されることを確認する必要があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8404bf1a6dddcdc8393275d5ed416ce9e721c54f" translate="yes" xml:space="preserve">
          <source>When you're calling a non-void method with a parameter of dynamic type, its return type will probably &lt;a href=&quot;http://blogs.msdn.com/b/ericlippert/archive/2012/11/05/dynamic-contagion-part-one.aspx&quot;&gt;be &lt;code&gt;dynamic&lt;/code&gt; too&lt;/a&gt;. So if you'd change previous example to this code:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あなたは、ダイナミック型のパラメータを持つ非空メソッドを呼び出している場合は、その戻り値の型は、おそらくだろう&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://blogs.msdn.com/b/ericlippert/archive/2012/11/05/dynamic-contagion-part-one.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ことが&lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;すぎます&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、前の例をこのコードに変更する場合：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fedfbc7c2bbd6eca438e3ee81dc7bea49d38ab49" translate="yes" xml:space="preserve">
          <source>While not very pretty, you have a compile time reference to &lt;code&gt;GenericMethod&lt;/code&gt; here, and if you refactor, delete or do anything with &lt;code&gt;GenericMethod&lt;/code&gt;, this code will keep working, or at least break at compile time (if for example you remove &lt;code&gt;GenericMethod&lt;/code&gt;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あまりきれいではありませんが、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に&lt;/font&gt;&lt;/font&gt; &lt;code&gt;GenericMethod&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;へのコンパイル時参照があります&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。GenericMethod&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;でリファクタリング、削除、または何かを&lt;/font&gt;&lt;/font&gt; &lt;code&gt;GenericMethod&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、このコードは機能し続けるか、少なくともコンパイル時に中断します（たとえば、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;GenericMethod&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を削除した&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;場合&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ec22391a4f2500abe458e94af602de0364dc138c" translate="yes" xml:space="preserve">
          <source>With C# 4.0, reflection isn't necessary as the DLR can call it using runtime types. Since using the DLR library is kind of a pain dynamically (instead of the C# compiler generating code for you), the open source framework &lt;a href=&quot;https://github.com/ekonbenefits/dynamitey&quot;&gt;Dynamitey&lt;/a&gt; (.net standard 1.5) gives you easy cached run-time access to the same calls the compiler would generate for you.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C＃4.0では、DLRがランタイム型を使用してリフレクションを呼び出すことができるため、リフレクションは必要ありません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;DLRライブラリーを使用すると、（C＃コンパイラーがコードを生成する代わりに）動的に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;面倒な作業&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;になるため、オープンソースフレームワーク&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/ekonbenefits/dynamitey&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Dynamitey&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（.net standard 1.5）を使用すると、コンパイラーが生成するのと同じ呼び出しにキャッシュされたランタイムアクセスが簡単になりますあなたのために。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fcd000c27dc69c7663b53e7a3d73eb6fdfd2d157" translate="yes" xml:space="preserve">
          <source>With this, you can simply invoke &lt;code&gt;Foo&lt;/code&gt; like:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これにより、次の&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ように&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Foo&lt;/code&gt; を&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;呼び出すだけです&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="42897873d05394d080118009dfd1350d62ee67d6" translate="yes" xml:space="preserve">
          <source>You need to pass an Type[] array to the MakeGenericMethod function that contains the &quot;dummy&quot; objects' types that were create above:</source>
          <target state="translated">MakeGenericMethod関数には、上記で作成した &quot;ダミー &quot;オブジェクトの型を含むType[]配列を渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="853cd5b66a7e2b293f546f0344c027aef902486f" translate="yes" xml:space="preserve">
          <source>You need to use reflection to get the method to start with, then &quot;construct&quot; it by supplying type arguments with &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.reflection.methodinfo.makegenericmethod.aspx&quot;&gt;MakeGenericMethod&lt;/a&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;リフレクションを使用してメソッドを開始し、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.reflection.methodinfo.makegenericmethod.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MakeGenericMethodで&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;型引数を指定してメソッドを「構築」する必要があります&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="23069e59f1bd650765a9a30fef468aa3c1c13002" translate="yes" xml:space="preserve">
          <source>You'll get a runtime error if the type doesn't match.</source>
          <target state="translated">型が一致しないと実行時エラーになります。</target>
        </trans-unit>
        <trans-unit id="cd48c0cf5ab841d4c18ac071da7961a84838cc65" translate="yes" xml:space="preserve">
          <source>and it creates and returns an IDictionary instance, the types of whose keys and values are exactly the specified on the call &lt;code&gt;keyType&lt;/code&gt; and &lt;code&gt;valueType&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;また、IDictionaryインスタンスを作成して返します。そのキーと値のタイプは、呼び出し&lt;/font&gt;&lt;/font&gt; &lt;code&gt;keyType&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;および&lt;/font&gt;&lt;/font&gt; &lt;code&gt;valueType&lt;/code&gt; で&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;指定されたとおり&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1a3a44f4007c44bb308dc019adec528028384da4" translate="yes" xml:space="preserve">
          <source>and you want to call the method &lt;code&gt;Foo&amp;lt;T&amp;gt;&lt;/code&gt; with &lt;code&gt;Bar&lt;/code&gt; and &lt;code&gt;Square&lt;/code&gt;, which is declared as</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そして、次のように&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;宣言され&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ている&lt;/font&gt; &lt;code&gt;Bar&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;および&lt;/font&gt; &lt;code&gt;Square&lt;/code&gt; を使用&lt;font style=&quot;vertical-align: inherit;&quot;&gt;し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;てメソッド&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Foo&amp;lt;T&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を呼び出したいとします。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="373f9635c978d1478015369c2f1c35e7f368020a" translate="yes" xml:space="preserve">
          <source>myClassInfo contains 2 properties of type &lt;code&gt;Type&lt;/code&gt; which I set at run time based on an enum value passed to the constructor and will provide me with the relevant types which I then use in the MakeGenericMethod.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;myClassInfoには、タイプ&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Type&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 2つのプロパティが含まれています。これらは&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、コンストラクターに渡された列挙値に基づいて実行時に設定し、MakeGenericMethodで使用する関連タイプを提供します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ea239bd275bdb1c60259e5ce696669042c884ce3" translate="yes" xml:space="preserve">
          <source>then the type of the result object would be &lt;code&gt;dynamic&lt;/code&gt;. This is because the compiler don't always know which method will be called. If you know the return type of the function call then you should &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/dd264736.aspx&quot;&gt;implicitly convert&lt;/a&gt; it to the required type so the rest of the code is statically typed:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;その場合、結果オブジェクトのタイプは&lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは、コンパイラが呼び出されるメソッドを常に認識しているわけではないためです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;関数呼び出しの戻り値の型がわかっている場合は、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それを必要な型に&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/dd264736.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;暗黙的に変換&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;して、残りのコードが静的に型付けされるようにする必要があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a372cbfc24988c0b6b54696156394bd41662428f" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;GenericMethod&amp;lt;object&amp;gt;&lt;/code&gt; is the method name to call and any type that satisfies the generic constraints.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここで、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;GenericMethod&amp;lt;object&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、呼び出すメソッド名と、総称制約を満たす任意の型です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c46221efe69e51d85aefd32ebaa97fd5956d92c8" translate="yes" xml:space="preserve">
          <source>which works for every class. In this case, it will output:</source>
          <target state="translated">はすべてのクラスで動作します。この場合は出力されます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
