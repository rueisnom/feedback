<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://stackoverflow.com/questions/263400">
    <body>
      <group id="263400">
        <trans-unit id="0d79426d053942f788af84f9684d1aeab86b6544" translate="yes" xml:space="preserve">
          <source>&amp;Dagger;By way of comparison. If used on a string, the SpookyHash on 64 bits is considerably faster than &lt;code&gt;string.GetHashCode()&lt;/code&gt; on 32 bits which is slightly faster than &lt;code&gt;string.GetHashCode()&lt;/code&gt; on 64 bits, which is considerably faster than SpookyHash on 32 bits, though still fast enough to be a reasonable choice.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;Dagger; 비교 방법. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;문자열에서 사용되는 경우 64 비트의 SpookyHash는 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;32 비트의 &lt;/font&gt; &lt;code&gt;string.GetHashCode()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; 보다 약간 빠르지 만 32 비트의 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;string.GetHashCode()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 보다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;32 비트의 &lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;string.GetHashCode ()&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 보다 훨씬 빠릅니다. 합리적인 선택이되기에 충분합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="83c2ef75ab5d9faef3f79684063ce016c8b50e49" translate="yes" xml:space="preserve">
          <source>&amp;dagger;&lt;code&gt;decimal&lt;/code&gt; isn't native from the .NET perspective though it is from the C#. The problem with it is that its own &lt;code&gt;GetHashCode()&lt;/code&gt; treats precision as significant while its own &lt;code&gt;Equals()&lt;/code&gt; does not. Both are valid choices, but not mixed like that. In implementing your own version, you need to choose to do one, or the other, but I can't know which you'd want.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;dagger; &lt;/font&gt;&lt;/font&gt; &lt;code&gt;decimal&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 .NET 관점에서 네이티브가 아니지만 C #에서 비롯된 것입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;문제는 자체 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;GetHashCode()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 정밀도를 중요하게 취급하지만 자체 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Equals()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 그렇지 않다는 것입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;둘 다 유효한 선택이지만 그렇게 혼합되지는 않습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;자신의 버전을 구현할 때 하나 또는 다른 것을 선택해야하지만 원하는 것을 알 수 없습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3df11bf9c11a994a6141e579ee8c87c906373481" translate="yes" xml:space="preserve">
          <source>(Note: The original technique using anonymous types seems to create an object on the heap, i.e. garbage, since anonymous types are implemented as classes, though this might be optimized out by the compiler. It would be interesting to benchmark these options, but the tuple option should be superior.)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(참고 : 익명 유형을 사용하는 원래 기술은 힙에 객체를 만드는 것으로 보입니다. 익명 유형은 클래스로 구현되기 때문에 컴파일러에 의해 최적화 될 수 있지만 이러한 옵션을 벤치마킹하는 것은 흥미로울 것입니다. 튜플 옵션이 우수해야합니다.)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a3a2c16db35df35d2fe189e2fcca836853920a73" translate="yes" xml:space="preserve">
          <source>*A big surprise in this is that hand-inlining a rotation method that returned &lt;code&gt;(x &amp;lt;&amp;lt; n) | (x &amp;gt;&amp;gt; -n)&lt;/code&gt; improved things. I would have been sure that the jitter would have inlined that for me, but profiling showed otherwise.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;* 이것의 큰 놀라움은 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;(x &amp;lt;&amp;lt; n) | (x &amp;gt;&amp;gt; -n)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 을 반환하는 회전 방법을 수동으로 인라인한다는 것입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(x &amp;gt;&amp;gt; -n)&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 개선 된 사항. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;지터가 나에게 그것을 인라인했을 것이라고 확신했지만 프로파일 링은 그렇지 않았다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="95d42bc65b3b6a49d6e5b97cf8c89519a4d16ef8" translate="yes" xml:space="preserve">
          <source>.NET Standard 2.1 And Above</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.NET 표준 2.1 이상&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="237eebd45ff1ae0b4dc2e3a1f947162eb4d30120" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://eternallyconfuzzled.com/tuts/algorithms/jsw_tut_hashing.aspx&quot;&gt;This page&lt;/a&gt; gives quite a few options. I think for most cases the above is &quot;good enough&quot; and it's incredibly easy to remember and get right. The &lt;a href=&quot;http://eternallyconfuzzled.com/tuts/algorithms/jsw_tut_hashing.aspx#fnv&quot;&gt;FNV&lt;/a&gt; alternative is similarly simple, but uses different constants and &lt;code&gt;XOR&lt;/code&gt; instead of &lt;code&gt;ADD&lt;/code&gt; as a combining operation. It looks &lt;em&gt;something&lt;/em&gt; like the code below, but the normal FNV algorithm operates on individual bytes, so this would require modifying to perform one iteration per byte, instead of per 32-bit hash value. FNV is also designed for variable lengths of data, whereas the way we're using it here is always for the same number of field values. Comments on this answer suggest that the code here doesn't actually work as well (in the sample case tested) as the addition approach above.</source>
          <target state="translated">&lt;a href=&quot;http://eternallyconfuzzled.com/tuts/algorithms/jsw_tut_hashing.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 페이지&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 몇 가지 옵션을 제공합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;나는 대부분의 경우 위의 내용이 &quot;충분히 좋다&quot;고 생각하고 기억하기가 매우 쉽다고 생각합니다. &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://eternallyconfuzzled.com/tuts/algorithms/jsw_tut_hashing.aspx#fnv&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;FNV의&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 대안 마찬가지로 간단하지만, 다른 정수 및 사용 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;XOR&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 대신 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;ADD&lt;/code&gt; 를&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 합성 동작한다. &lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;뭔가&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 보인다&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;아래 코드와 같지만 일반적인 FNV 알고리즘은 개별 바이트에서 작동하므로 32 비트 해시 값 대신 바이트 당 하나의 반복을 수행하도록 수정해야합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;FNV는 가변 길이의 데이터를 위해 설계되었지만 여기서 사용하는 방식은 항상 같은 수의 필드 값을위한 것입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 답변에 대한 의견은 여기의 코드가 위의 추가 접근 방식과 같이 실제로 테스트되지는 않음을 나타냅니다 (테스트 된 샘플 경우).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dbfcc92679561cd466ca70d3ec5cb0ada4849da5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://www.jetbrains.com/resharper/&quot;&gt;ReSharper&lt;/a&gt; users can generate GetHashCode, Equals, and others with &lt;code&gt;ReSharper -&amp;gt; Edit -&amp;gt; Generate Code -&amp;gt; Equality Members&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://www.jetbrains.com/resharper/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ReSharper&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 사용자는 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;ReSharper -&amp;gt; Edit -&amp;gt; Generate Code -&amp;gt; Equality Members&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 하여 GetHashCode, Equals 등을 생성 할 수 있습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8ea1ae0f0eb1ed12ed21ed926e7ffa399926aaaf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ValueTuple&lt;/code&gt; is a struct and appears to have a solid &lt;code&gt;GetHashCode&lt;/code&gt; implementation.</source>
          <target state="translated">&lt;code&gt;ValueTuple&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 은 구조체이며 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;GetHashCode&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 구현 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 견고한 것으로 보입니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ea0202aa9a3074625a51c3256d2dc385d6895a70" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;All the GetHashCode() implementations I'd coded in the past, and indeed used as the basis of answers on this site, were much worse than I'd throught&lt;/strong&gt;. Much of the time it was &quot;good enough&quot; for much of the uses, but I wanted something better.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;내가 과거에 코딩했으며 실제로이 사이트의 답변의 기초로 사용 된 모든 GetHashCode () 구현은 생각보다 훨씬 나빴습니다&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;많은 경우에 그것은 많은 용도에 대해 &quot;충분히&quot;좋았지 만 더 나은 것을 원했습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="64737e14d176ba9cf426f44088eeac87333a7a89" translate="yes" xml:space="preserve">
          <source>A good hash function should map the expected inputs as evenly as possible over its output range. It should have uniformity.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;좋은 해시 함수는 예상 입력을 출력 범위에서 가능한 한 고르게 매핑해야합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;균일해야합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0b087b0c644a46bd6641921114f7033df6978d64" translate="yes" xml:space="preserve">
          <source>A small change to a message should change the hash value so extensively that the new hash value appears uncorrelated with the old hash value (avalanche effect).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;메시지를 조금만 변경하면 해시 값이 광범위하게 변경되어 새 해시 값이 이전 해시 값과 상관 관계가없는 것으로 나타납니다 (애벌랜치 효과).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bd1a4e418ac54c54625c46768d60dc7e55d97d21" translate="yes" xml:space="preserve">
          <source>Add the result and h1 together.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;결과와 h1을 더합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f1c118123f96f8220daec90522f3b96d0f84b028" translate="yes" xml:space="preserve">
          <source>Also it has extension method to provide a fluent interface, so you can use it like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;또한 유창한 인터페이스를 제공하는 확장 방법이 있으므로 다음과 같이 사용할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5924b5e6279dfd3f1ccd06d12d17ca745d917e31" translate="yes" xml:space="preserve">
          <source>And here is how to use it:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;사용 방법은 다음과 같습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f7e8bccebca6d7ebf1c132bf64c36d31c8b3e398" translate="yes" xml:space="preserve">
          <source>And here is the acutal builder class:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그리고 여기 acutal builder 클래스가 있습니다 :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0b0c4ee6c49ec53c99f367f324f2d13f02203ef5" translate="yes" xml:space="preserve">
          <source>And it pretty much sucked. So after a bit of experimentation and research I started re-hashing my hashes with the following:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그리고 그것은 거의 빨려 들었습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;약간의 실험과 연구 끝에 다음과 같이 해시를 다시 해시하기 시작했습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4753226d060c2ac7870ac15825cb98de476efddf" translate="yes" xml:space="preserve">
          <source>And one final tip: &lt;b&gt;Don't rely on GetHashCode() being stable over multiple aplication runs&lt;/b&gt;. Many .Net types don't guarantee their hash codes to stay the same after a restart, so you should only use the value of GetHashCode() for in memory data structures.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;마지막 팁 : &lt;/font&gt;&lt;/font&gt;&lt;b&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;여러 번의 응용 프로그램 실행에 대해 GetHashCode ()가 안정적이라는 것에 의존하지 마십시오&lt;/font&gt;&lt;/font&gt;&lt;/b&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;많은 .Net 유형은 재시작 후 해시 코드가 동일하게 유지되도록 보장하지 않으므로 메모리 데이터 구조에서 GetHashCode () 값만 사용해야합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7c910bf934a6df4c337ec4ebc5ec681c2f90542e" translate="yes" xml:space="preserve">
          <source>And same for multi-type: all converted first to &lt;code&gt;int&lt;/code&gt; using &lt;code&gt;GetHashCode()&lt;/code&gt;
then the int values will be xor'ed and the result is your hash.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다중 유형의 경우와 동일합니다. 모두 &lt;/font&gt; &lt;code&gt;GetHashCode()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;사용하여 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;먼저 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;int&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 로 변환 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하면 int 값이 xor'ed되고 결과는 해시입니다.&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d58afc915a407c9686d470da7d4718874579746d" translate="yes" xml:space="preserve">
          <source>And then my power-of-two hash table didn't suck any more.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그리고 2의 제곱 해시 테이블이 더 이상 빨라지지 않았습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e6524d5374d0dad18e089d93cca5b51530ed61a0" translate="yes" xml:space="preserve">
          <source>And this is from &lt;a href=&quot;https://github.com/dotnet/corefx/blob/master/src/Common/src/System/Numerics/Hashing/HashHelpers.cs&quot;&gt;&lt;code&gt;HashHelper&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그리고 이것은 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/dotnet/corefx/blob/master/src/Common/src/System/Numerics/Hashing/HashHelpers.cs&quot;&gt; &lt;code&gt;HashHelper&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 에서 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;온 것입니다&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6ea4b5d260d1757dfef473e91d4cdc426f950356" translate="yes" xml:space="preserve">
          <source>And well, it was disturbing how much the &lt;code&gt;string.GetHashCode()&lt;/code&gt; implementations in &lt;a href=&quot;https://referencesource.microsoft.com/#mscorlib/System/string.cs,789&quot;&gt;.NET&lt;/a&gt; (or study &lt;a href=&quot;https://stackoverflow.com/a/48775953/147511&quot;&gt;here&lt;/a&gt;) could be improved this way (on the order of tests running about 20-30 times faster due to fewer collisions) and more disturbing how much my own hash codes could be improved (much more than that).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그리고 &lt;/font&gt;&lt;a href=&quot;https://referencesource.microsoft.com/#mscorlib/System/string.cs,789&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.NET&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (또는 &lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/48775953/147511&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;here&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 연구 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;string.GetHashCode()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 의 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;string.GetHashCode ()&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 구현 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이이 방법으로 개선 될 수있는 방법을 방해하고 있었고 (충돌 횟수가 줄어들어 약 20-30 배 더 빠르게 실행되는 테스트 순서) 내 자신의 해시 코드가 훨씬 향상 될 수 있습니다.&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6539f8fb88e503a8b8c34ab6bcc63de114670a0b" translate="yes" xml:space="preserve">
          <source>Anonymous Type</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;익명 유형&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2ef0204701e5a8adb4295eb5e9aa0eda969ef4cf" translate="yes" xml:space="preserve">
          <source>As @cactuaroid mentions in the comments, a value tuple can be used. This saves a few keystrokes and more importantly executes purely on the stack (no Garbage):</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;주석에서 @cactuaroid가 언급했듯이 값 튜플을 사용할 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이렇게하면 몇 번의 키 입력이 줄어들고 더 중요하게는 스택에서 순수하게 실행됩니다 (쓰레기 없음).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4884ca4fdea316ef7d5a10917de179b44aefe544" translate="yes" xml:space="preserve">
          <source>As noted in comments, you may find it's better to pick a large prime to multiply by instead. Apparently 486187739 is good... and although most examples I've seen with small numbers tend to use primes, there are at least similar algorithms where non-prime numbers are often used. In the not-quite-&lt;a href=&quot;https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function&quot;&gt;FNV&lt;/a&gt; example later, for example, I've used numbers which apparently work well - but the initial value isn't a prime. (The multiplication constant &lt;em&gt;is&lt;/em&gt; prime though. I don't know quite how important that is.)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;의견에서 언급했듯이 대신 곱하기 위해 큰 소수를 선택하는 것이 좋습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;분명히 486187739는 좋지만 ... 소수로 본 대부분의 예제는 소수를 사용하는 경향이 있지만 비 프라임 숫자가 자주 사용되는 알고리즘은 적어도 유사합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;예를 들어, &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Fquit&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 가 아닌 FNV &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;예제에서 나는 잘 작동하는 숫자를 사용했지만 초기 값은 소수가 아닙니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(그러나 곱셈 상수 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;는&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 소수입니다. 나는 그것이 얼마나 중요한지 잘 모르겠습니다.)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0fc68588324515b00e71f04c950e60480e2bd553" translate="yes" xml:space="preserve">
          <source>As of &lt;a href=&quot;https://github.com/dotnet/coreclr/pull/14863&quot;&gt;https://github.com/dotnet/coreclr/pull/14863&lt;/a&gt;, there is a new way to generate hash codes that is super simple! Just write</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/pull/14863&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https://github.com/dotnet/coreclr/pull/14863&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 기준으로 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;, 매우 간단한 해시 코드를 생성하는 새로운 방법이 있습니다! &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그냥 써&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4ba8400d7c27eb6bbe485bddce2a770e9a59f458" translate="yes" xml:space="preserve">
          <source>As per the &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.object.gethashcode#notes-to-inheritors&quot;&gt;documentation&lt;/a&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;당으로 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.object.gethashcode#notes-to-inheritors&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;문서&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6490b278794b35f12336f32cce320e3a69acab63" translate="yes" xml:space="preserve">
          <source>Because of this feature, hash codes should never be used outside of the application domain in which they were created, they should never be used as key fields in a collection and they should never be persisted.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 기능으로 인해 해시 코드는 작성된 응용 프로그램 도메인 외부에서 사용해서는 안되며 컬렉션에서 키 필드로 사용해서는 안되며 지속해서는 안됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="11b32f5445111f35152e714852144506ca1cb530" translate="yes" xml:space="preserve">
          <source>Because the Hash output is always an int, you can just chain Hash calls.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;해시 출력은 항상 정수이므로 해시 호출을 연결하면됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2273bd2f117653a9c56bbd3e76317b35a2b4389b" translate="yes" xml:space="preserve">
          <source>But this test passes (with ints):</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그러나이 테스트는 정수와 함께 통과합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f120da2cf0f973ab74313965e44c104c28715694" translate="yes" xml:space="preserve">
          <source>By the way, the earlier algorithm is the one currently used by the C# compiler for anonymous types.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그런데 이전 알고리즘은 현재 C # 컴파일러가 익명 ​​형식에 사용하는 알고리즘입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="28ec9ea2e98208ee3c50de6dbbd90da47726d6dc" translate="yes" xml:space="preserve">
          <source>Cryptographically Secure?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;암호화 적으로 안전한가?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f6798670eccb448dbd7ae61707aed7700330e4b5" translate="yes" xml:space="preserve">
          <source>Deterministic</source>
          <target state="translated">Deterministic</target>
        </trans-unit>
        <trans-unit id="f399f567d30257913aa40c9a0b774a97589e3f6c" translate="yes" xml:space="preserve">
          <source>Edit (May 2018): &lt;code&gt;EqualityComparer&amp;lt;T&amp;gt;.Default&lt;/code&gt; getter is now a JIT intrinsic - the &lt;a href=&quot;https://github.com/dotnet/coreclr/pull/14125&quot;&gt;pull request&lt;/a&gt; is mentioned by Stephen Toub in &lt;a href=&quot;https://blogs.msdn.microsoft.com/dotnet/2018/04/18/performance-improvements-in-net-core-2-1&quot;&gt;this blog post&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;편집 (2018 년 5 월) : &lt;/font&gt;&lt;/font&gt; &lt;code&gt;EqualityComparer&amp;lt;T&amp;gt;.Default&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; getter는 이제 JIT 내장 함수 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;입니다. &lt;/font&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/dotnet/2018/04/18/performance-improvements-in-net-core-2-1&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 블로그 게시물&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 에서 Stephen Toub가 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/pull/14125&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;풀 요청&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 을 언급합니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f36d236cdfc72792355b5bd010191a1697cc8e21" translate="yes" xml:space="preserve">
          <source>Edit: I was also using open-addressing, which would also have increased the sensitivity to collision, perhaps more so than the fact it was power-of-two.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;편집 : 또한 개방 주소 지정을 사용하고 있었는데 충돌에 대한 민감도를 높였을 것입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ec3029c0ba715ec4e3b4ba579e691c099b1e661c" translate="yes" xml:space="preserve">
          <source>For each further item, perform the operation on the previous result and the next item (e.g. h2).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;각 추가 항목에 대해 이전 결과 및 다음 항목 (예 : h2)에 대한 작업을 수행하십시오.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4a750761886bb8c5c3093d7d8da1f358a99b7be3" translate="yes" xml:space="preserve">
          <source>For those who use hash as ID (I mean an unique value), hash is naturally limited to a number of digits, I think it was 5 bytes for hashing algorithm, at least MD5.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;해시를 ID로 사용하는 사람들 (독특한 값을 의미 함)의 경우 해시는 자연스럽게 여러 자릿수로 제한됩니다. 해시 알고리즘의 경우 최소 5 바이트, MD5 이상이라고 생각합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d8558f6652b3cfc7c3336ced510c7c2259ad7976" translate="yes" xml:space="preserve">
          <source>GetHashCode Made Easy</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;손쉬운 GetHashCode&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="034396c26c5e4ebc5bd1068b7529411104222377" translate="yes" xml:space="preserve">
          <source>HashCode.Add</source>
          <target state="translated">HashCode.Add</target>
        </trans-unit>
        <trans-unit id="0ba1e0a5a4926cff0e03ebbdb6d52b7a661256e8" translate="yes" xml:space="preserve">
          <source>HashCode.Combine</source>
          <target state="translated">HashCode.Combine</target>
        </trans-unit>
        <trans-unit id="d38b35ccba9919ce8b5b43ef1cf490a7f721401d" translate="yes" xml:space="preserve">
          <source>Here is another fluent implementation of &lt;a href=&quot;https://stackoverflow.com/a/263416/33791&quot;&gt;the algorithm posted above by Jon Skeet&lt;/a&gt;, but which includes no allocations or boxing operations:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/263416/33791&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Jon Skeet이 게시 한 알고리즘&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 의 또 다른 유창한 구현은 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다음&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 과 같지만 할당 또는 복싱 작업은 포함하지 않습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6b1e0b14247c35a0dd98e5ba0eb642e4dc1843c1" translate="yes" xml:space="preserve">
          <source>Here is my hashcode helper.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;여기 내 해시 코드 도우미가 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4be13d945c6ba718eeced4ba0389ce90b6ec6aa0" translate="yes" xml:space="preserve">
          <source>Here is my simplistic approach. I am using the classic builder pattern for this. It is typesafe (no boxing/unboxing) and also compatbile with .NET 2.0 (no extension methods etc.).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;여기에 간단한 접근 방식이 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이를 위해 클래식 빌더 패턴을 사용하고 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;형식이 안전하고 (박싱 / 언 박싱 없음) .NET 2.0과 호환됩니다 (확장 방법 없음).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b8b27f99a942c6d3ce3eb645ca556e3c906c83ac" translate="yes" xml:space="preserve">
          <source>Here's my helper class using &lt;a href=&quot;https://stackoverflow.com/a/263416/704144&quot;&gt;Jon Skeet's implementation&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/263416/704144&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Jon Skeet의 구현을&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 사용하는 도우미 클래스는 다음과 같습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="83ac8a659ca4db3fa8d7dcfd4473a8c41782b2c9" translate="yes" xml:space="preserve">
          <source>However, since it's now already written, one can make use of it more easily:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그러나 이제는 이미 작성되었으므로 더 쉽게 사용할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8cf06bfeb7893297f5b466ba135ef3e5a8c8a67d" translate="yes" xml:space="preserve">
          <source>I can guess that for multiple big int you can use this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;여러 큰 int의 경우 다음을 사용할 수 있다고 추측 할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6341f744676fe64ec4e97c176de06ac114def865" translate="yes" xml:space="preserve">
          <source>I changed my implementation to not use GetHashCode for the primitive types and it seems to work better</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;기본 유형에 GetHashCode를 사용하지 않도록 구현을 변경했으며 더 잘 작동하는 것 같습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d44374f08bd16dc2acc4cd4ed9fad6603e35a2dc" translate="yes" xml:space="preserve">
          <source>I didn't assess its performance, so any feedback is welcomed.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;나는 그 성능을 평가하지 않았으므로 모든 의견을 환영합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3c7682f2756768262570b11ce2273bf6db42e85c" translate="yes" xml:space="preserve">
          <source>I have a Hashing class in Helper library that I use it for this purpose.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 목적으로 사용하는 도우미 라이브러리에 해싱 클래스가 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="79484108e32c6a21344a0d900482a48b2c630c8f" translate="yes" xml:space="preserve">
          <source>I ran into an issue with floats and decimals using the implementation selected as the answer above.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;위의 답변으로 선택된 구현을 사용하여 부동 소수점과 소수 자릿수에 문제가 발생했습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7eba8db330d45d66dcb0d37cd8b2aed9484677aa" translate="yes" xml:space="preserve">
          <source>I usually go with something like the implementation given in Josh Bloch's &lt;em&gt;fabulous&lt;/em&gt;&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0321356683&quot;&gt;Effective Java&lt;/a&gt;. It's fast and creates a pretty good hash which is unlikely to cause collisions. Pick two different prime numbers, e.g. 17 and 23, and do:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;나는 보통 Josh Bloch의 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;멋진 &lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0321356683&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Effective Java에&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 제공된 구현과 같은 것을 사용합니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;빠르며 충돌을 일으키지 않는 꽤 좋은 해시를 만듭니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;두 개의 다른 소수 (예 : 17과 23)를 선택하고 다음을 수행하십시오.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ecd4a4ee6fb901f76f58984b6c90616cf19d910c" translate="yes" xml:space="preserve">
          <source>If we have no more than 8 properties (hopefully), here is another alternative.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;우리가 8 개 이하의 속성을 가지고 있다면, 다른 대안이 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="51e61bd0902dd12fd8399d10c1dfc7edf6c2bc67" translate="yes" xml:space="preserve">
          <source>If you are using .NET Standard 2.1 or above, you can use the &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.hashcode?view=netcore-2.1&quot;&gt;System.HashCode&lt;/a&gt; struct. There are two methods of using it:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.NET Standard 2.1 이상을 사용하는 경우 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.hashcode?view=netcore-2.1&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;System.HashCode&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 구조체를 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;사용할 수 있습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그것을 사용하는 두 가지 방법이 있습니다 :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7195ac0e83ef4a6feddbd250bff1ae20963d1157" translate="yes" xml:space="preserve">
          <source>If you want to avoid writing an extension method for System.Int32:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;System.Int32에 대한 확장 메서드를 작성하지 않으려는 경우 :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8781d615fd77be9578225c40ac67b9471394cced" translate="yes" xml:space="preserve">
          <source>Implementation</source>
          <target state="translated">Implementation</target>
        </trans-unit>
        <trans-unit id="6488742a860c14ecbed74fa734de70954bb71e77" translate="yes" xml:space="preserve">
          <source>In .NET Core each time you restart an application you will get different hash codes. This is a security feature to prevent Denial of Service attacks (DoS). For .NET Framework you &lt;strong&gt;should&lt;/strong&gt; enable this feature by adding the following App.config file:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.NET Core에서는 응용 프로그램을 다시 시작할 때마다 다른 해시 코드가 나타납니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이는 DoS (서비스 거부) 공격을 방지하기위한 보안 기능입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.NET Framework의 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;경우 다음 App.config 파일을 추가하여이 기능을 활성화 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;해야&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a4738d896b60dfae58b5b259b003bf59cce6e20b" translate="yes" xml:space="preserve">
          <source>In .NET, the &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.object.gethashcode&quot;&gt;&lt;code&gt;GetHashCode&lt;/code&gt; method&lt;/a&gt; is used in a lot of places throughout the .NET base class libraries. Implementing it properly is especially important to find items quickly in a collection or when determining equality.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.NET에서 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.object.gethashcode&quot;&gt; &lt;code&gt;GetHashCode&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 메서드&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 .NET 기본 클래스 라이브러리의 여러 곳에서 사용됩니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;컬렉션에서 항목을 빨리 찾거나 동등성을 결정할 때 올바르게 구현하는 것이 특히 중요합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d045e350842340848d745e65b9ccc9cf28237c03" translate="yes" xml:space="preserve">
          <source>In English:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;영어로:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="66db6221d3fcbac7088e96ff309ffb23cfb5ad58" translate="yes" xml:space="preserve">
          <source>In case you want to polyfill &lt;code&gt;HashCode&lt;/code&gt; from &lt;code&gt;netstandard2.1&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;netstandard2.1에서 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;HashCode&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 &lt;/font&gt; &lt;code&gt;netstandard2.1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; 필하려는 경우&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c40e2b1801b414478c669a008b937281f4d2dc69" translate="yes" xml:space="preserve">
          <source>In most cases where Equals() compares multiple fields it doesn't really matter if your GetHash() hashes on one field or on many. You just have to make sure that calculating the hash is really cheap (&lt;b&gt;No allocations&lt;/b&gt;, please) and fast (&lt;b&gt;No heavy computations&lt;/b&gt; and certainly no database connections) and provides a good distribution.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Equals ()가 여러 필드를 비교하는 대부분의 경우 GetHash ()가 하나의 필드 또는 여러 필드에서 해시되는지는 중요하지 않습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;해시 계산이 실제로 저렴하고 ( &lt;/font&gt;&lt;/font&gt;&lt;b&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;할당 없음&lt;/font&gt;&lt;/font&gt;&lt;/b&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ), 빠르며 ( &lt;/font&gt;&lt;/font&gt;&lt;b&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;무거운 계산이&lt;/font&gt;&lt;/font&gt;&lt;/b&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 없고 데이터베이스 연결이 없는지) 확인해야합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="70f850b780b4ffb79b7c73fda1edcded2180b380" translate="yes" xml:space="preserve">
          <source>In the end I settled on porting &lt;a href=&quot;http://burtleburtle.net/bob/hash/spooky.html&quot;&gt;SpookyHash&lt;/a&gt; to .NET. Indeed the code above is a fast-path version of using SpookyHash to produce a 32-bit output from a 32-bit input.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;결국 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://burtleburtle.net/bob/hash/spooky.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;SpookyHash&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 .NET &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;으로 포팅하기로 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;결정&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 했습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;실제로 위의 코드는 SpookyHash를 사용하여 32 비트 입력에서 32 비트 출력을 생성하는 빠른 경로 버전입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6243d71d1d7b8aea75619231aad11f8259651c82" translate="yes" xml:space="preserve">
          <source>Is there a standard algorithm or best practice on how to implement &lt;code&gt;GetHashCode&lt;/code&gt; for my custom classes so I don't degrade performance?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;성능을 저하시키지 않도록 사용자 지정 클래스에 대해 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;GetHashCode&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 구현하는 방법에 대한 표준 알고리즘 또는 모범 사례가 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;있습니까?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="79e480f23d6c2078c87bb12c8c5c3744c8de3f93" translate="yes" xml:space="preserve">
          <source>It also takes seed values, so if you need to deal with untrusted input and want to protect against Hash DoS attacks you can set a seed based on uptime or similar, and make the results unpredictable by attackers:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;또한 시드 값이 필요하므로 신뢰할 수없는 입력을 처리해야하고 Hash DoS 공격으로부터 보호하려면 가동 시간 또는 이와 유사한 기반으로 시드를 설정하고 공격자가 결과를 예측할 수 없게 만들 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1cca014cbc07e3c62667a380b70f66b34a5849ca" translate="yes" xml:space="preserve">
          <source>It is infeasible to find two different messages with the same hash value</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;동일한 해시 값을 가진 두 개의 다른 메시지를 찾는 것은 불가능합니다&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="24065692dc06162d306ce6a1810804d176e738bc" translate="yes" xml:space="preserve">
          <source>It is infeasible to generate a message that yields a given hash value</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;주어진 해시 값을 생성하는 메시지를 생성하는 것은 불가능합니다&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3e7c0769beb54d29fef29e364d96abec5127a859" translate="yes" xml:space="preserve">
          <source>It is used like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다음과 같이 사용됩니다 :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="775120da70c32a3d1145975d3b0b7ece50d6c047" translate="yes" xml:space="preserve">
          <source>It still avoids any heap allocation and is used exactly the same way:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;여전히 힙 할당을 피하고 정확히 동일한 방식으로 사용됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="af44925b98c54411762b5e115d90694d80c037bb" translate="yes" xml:space="preserve">
          <source>It would be nice to know more about the properties of this ROL-5 hash code algorithm.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 ROL-5 해시 코드 알고리즘의 특성에 대해 자세히 알고 있으면 좋을 것입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cd73c970707454efb2b115cd12e169fd1fb86e9f" translate="yes" xml:space="preserve">
          <source>It's advantage is that it uses generic type arguments and therefore will not cause boxing:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;장점은 제네릭 형식 인수를 사용하므로 권투가 발생하지 않는다는 것입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f183efea3aaad2350f821613ad659f9d94954a53" translate="yes" xml:space="preserve">
          <source>It's fast, for which Bob Jenkins deserves most of the credit because his original code I ported from is faster still, especially on 64-bit machines which the algorithm is optimised for&amp;Dagger;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Bob Jenkins가 포팅 한 원본 코드는 여전히 더 빠르기 때문에 특히 알고리즘이 최적화 된 64 비트 시스템에서 더 빠르기 때문에 빠릅니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="db3b9d4536e07c34bc7e78f6730f683ac59ee7c3" translate="yes" xml:space="preserve">
          <source>Left rotate (circular shift) h1 by 5 positions.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;왼쪽 회전 (원형 시프트) h1을 5 위치 씩 이동합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9befb5f7f42c778c9ce669275d1ce6ed000d3ae9" translate="yes" xml:space="preserve">
          <source>Let's take a look at .NET Core's current implementation for &lt;code&gt;ValueTuple&lt;/code&gt;'s &lt;code&gt;GetHashCode&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;ValueTuple&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 의 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;GetHashCode&lt;/code&gt; 에&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 대한 .NET Core의 현재 구현을 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;살펴 보겠습니다&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0cf40c5cdf4e24892afe91b39db417c88cd24a93" translate="yes" xml:space="preserve">
          <source>Microsoft already provides a good generic HashCode generator: Just copy your property/field values to an anonymous type and hash it:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Microsoft는 이미 우수한 일반 HashCode 생성기를 제공합니다. 속성 / 필드 값을 익명 유형으로 복사하고 해시하십시오.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fe5e8cabf2e9ef3c90856c23a3b071fc8ffdadc2" translate="yes" xml:space="preserve">
          <source>Microsoft lead for several way of hashing...</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Microsoft는 여러 가지 해싱 방식을 이끌고 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="778fc4e9438d8fe69ff04d1a23db7d2a638261a0" translate="yes" xml:space="preserve">
          <source>Most of my work is done with database connectivity which means that my classes all have a unique identifier from the database.  I always use the ID from the database to generate the hashcode.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;내 작업의 대부분은 데이터베이스 연결로 수행되므로 내 클래스에는 모두 데이터베이스의 고유 식별자가 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;항상 데이터베이스의 ID를 사용하여 해시 코드를 생성합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ebe8b198579b5d8d43b5b5961017777a829df670" translate="yes" xml:space="preserve">
          <source>Note that one thing to be aware of is that ideally you should prevent your equality-sensitive (and thus hashcode-sensitive) state from changing after adding it to a collection that depends on the hash code.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;알고 있어야 할 것은 해시 코드에 의존하는 컬렉션에 동등성에 민감한 (따라서 해시 코드에 민감한) 상태가 바뀌지 않도록하는 것이 이상적입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="94d46ec70da897d6695de00bf38d36857c1d2fb5" translate="yes" xml:space="preserve">
          <source>Note: If used with &lt;code&gt;struct&lt;/code&gt;, it will allocate memory due to boxing</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;참고 : &lt;/font&gt;&lt;/font&gt; &lt;code&gt;struct&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 와 함께 사용 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하면 권투로 인해 메모리가 할당됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c5ac46a74dbff2b805e8a5a7d2626d1c776b451a" translate="yes" xml:space="preserve">
          <source>Now, SpookyHash is not a nice quick to remember piece of code. My port of it is even less so because I hand-inlined a lot of it for better speed*. But that's what code reuse is for.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이제 SpookyHash는 코드 조각을 기억하는 데 빠르지 않습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;더 빠른 속도를 위해 많은 포트를 수동으로 인라인했기 때문에 포트가 훨씬 적습니다 *. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그러나 이것이 코드 재사용의 목적입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c849d5abd7981416f7339aea0af9b86419c5d93c" translate="yes" xml:space="preserve">
          <source>PS: This is one of those times where you puke a little in your mouth, knowing that this could be refactored into one method with 9 default's but it would be slower, so you just close your eyes and try to forget about it.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;추신 : 이것은 9 번의 기본값으로 하나의 방법으로 리팩토링 될 수 있지만 느려질 것임을 알고 입에서 조금 펑크하는 시간 중 하나입니다. 따라서 눈을 감고 잊어 버리십시오.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f065fd929e1c22be435487e6ea63fce4d6e76802" translate="yes" xml:space="preserve">
          <source>Pretty much similar to nightcoder's solution except it's easier to raise primes if you want to.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;원한다면 프라임을 올리는 것이 더 쉽다는 점을 제외하면 나이트 코더의 솔루션과 거의 비슷합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3595239fc3035d9f6e9e92d99a2bfdc06c060789" translate="yes" xml:space="preserve">
          <source>Prevent's DoS</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;예방의 DoS&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b64211794d8e7415e42a8db9c7d0b1a28f11fc41" translate="yes" xml:space="preserve">
          <source>Re-mixing a hash code can only improve a hash code that did at least fairly well in avoiding absolute collisions throughout its range (2&lt;sup&gt;32&lt;/sup&gt; possible values) but badly at avoiding collisions when modulo'd down for actual use in a hash table. While the simpler modulo of a power-of-two table made this more apparent, it was also having a negative effect with the more common prime-number tables, that just wasn't as obvious (the extra work in rehashing would outweigh the benefit, but the benefit would still be there).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;해시 코드를 다시 혼합 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하면 해시 테이블에서 실제로 사용하기 위해 모듈로가 다운 될 때 충돌을 피하는 데는 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그 범위 (2 &lt;/font&gt;&lt;/font&gt;&lt;sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;32&lt;/font&gt;&lt;/font&gt;&lt;/sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 가능한 값) &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;전체에서 절대 충돌을 피하는 데있어 상당히 좋은 해시 코드 만 개선 할 수 있습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2의 거듭 제곱 테이블의 더 간단한 모듈로가 이것을 더 명백하게 만들었지 만, 더 일반적이지 않은 더 일반적인 소수 테이블에 부정적인 영향을 미쳤습니다 (재해 싱에 대한 추가 작업이 이점을 능가합니다) 그러나 이점은 여전히 ​​존재합니다).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fce0fc5a7dcd2e788a03afe8194230572d482cb6" translate="yes" xml:space="preserve">
          <source>Re-mixing a hash code can't improve a terrible hash code, because the only possible effect is we change e.g. a large number of collisions on value 53 to a large number of value 18,3487,291.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;해시 코드를 리 믹싱하면 끔찍한 해시 코드를 개선 할 수 없습니다. 가능한 유일한 효과는 예를 들어 값 53에서 많은 충돌이 값 18,3487,291로 변경되기 때문입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3c9638d7db05fd5da4a874b5d52071ce2087a80e" translate="yes" xml:space="preserve">
          <source>Re-mixing a hashcode can't improve a great hashcode, because the only possible effect is that we introduce a few more collisions.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;해시 코드를 다시 혼합해도 큰 해시 코드를 향상시킬 수는 없습니다. 가능한 유일한 효과는 충돌이 몇 번 더 발생하기 때문입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="af1c5729918a7c13189ba3df1d45ae50f208a20f" translate="yes" xml:space="preserve">
          <source>Read more about this &lt;a href=&quot;https://andrewlock.net/why-is-string-gethashcode-different-each-time-i-run-my-program-in-net-core/&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이에 대한 자세한 내용은 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://andrewlock.net/why-is-string-gethashcode-different-each-time-i-run-my-program-in-net-core/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;여기를&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 참조 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하십시오&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="555fb017bb0db82e04dccc34f592057fdb765838" translate="yes" xml:space="preserve">
          <source>Reduce Collisions</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;충돌 감소&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c67f54eca7526ba65a1d69b5e9d8b38b3f5067f1" translate="yes" xml:space="preserve">
          <source>Regrettably, deferring to &lt;code&gt;ValueTuple&lt;/code&gt; for our own &lt;code&gt;GetHashCode&lt;/code&gt; may not be as fast as we would like and expect. &lt;a href=&quot;https://github.com/dotnet/corefx/issues/8034#issuecomment-260759796&quot;&gt;This comment&lt;/a&gt; in a related discussion illustrates that directly calling &lt;code&gt;HashHelpers.Combine&lt;/code&gt; is more performant. On the flip side, that one is internal, so we'd have to copy the code, sacrificing much of what we had gained here. Also, we'd be responsible for remembering to first &lt;code&gt;Combine&lt;/code&gt; with the random seed. I don't know what the consequences are if we skip that step.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;유감스럽게도 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;자체 &lt;/font&gt; &lt;code&gt;GetHashCode&lt;/code&gt; 에&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 대해 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;ValueTuple&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 을 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;연기하는 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;것은 원하는만큼 빠르지 않을 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;관련 토론 &lt;/font&gt;&lt;a href=&quot;https://github.com/dotnet/corefx/issues/8034#issuecomment-260759796&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;에서이 의견&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 은 &lt;/font&gt; &lt;code&gt;HashHelpers.Combine&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; 을 직접 호출 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하는&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 것이 더 성능이 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;우수함을&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 보여줍니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;반대로, 그 내부는 내부적이므로 코드를 복사하여 여기서 얻은 것을 많이 희생해야합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;또한 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;랜덤 시드와 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;먼저 &lt;/font&gt; &lt;code&gt;Combine&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; 하는 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;것을 기억해야 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;우리가 그 단계를 건너 뛰면 결과가 무엇인지 모르겠습니다.&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="41ef8b26263345cca597a7e0aa739b815f3e2403" translate="yes" xml:space="preserve">
          <source>So I put that project to one side (it was a pet project anyway) and started looking at how to produce a good, well-distributed hash code in .NET quickly.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그래서 나는 그 프로젝트를 한쪽에 놓았고 (어쨌든 애완 동물 프로젝트 였음) .NET에서 잘 분산 된 좋은 해시 코드를 신속하게 생성하는 방법을 찾기 시작했습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2d2cb022bc3d26bd1407c4aa787d5e46e1ad4c3b" translate="yes" xml:space="preserve">
          <source>Speed</source>
          <target state="translated">Speed</target>
        </trans-unit>
        <trans-unit id="6b05d1dc7e9a6f239a0395230da12be3bfb344e6" translate="yes" xml:space="preserve">
          <source>Start by performing the above operation on { static random seed, h1 }.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;{static random seed, h1}에서 위 작업을 수행하여 시작하십시오.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5e0f2002957c60cee86ff8251ef135dcad849b56" translate="yes" xml:space="preserve">
          <source>That means we could simply do this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그것은 우리가 단순히 이것을 할 수 있다는 것을 의미합니다 :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="826b9d7df4ba107a7469f426428004097d06f89b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Add&lt;/code&gt; method helps you to deal with collections:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;Add&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 방법은 컬렉션을 처리하는 데 도움이 :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="60a068f9545ee721c0e80f6ad49baf4bb1d421b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Combine&lt;/code&gt; method can be used to create a hash code, given up to eight objects.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;Combine&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 방법은 해시 코드를 작성하는 데 사용되는 여덟 개의 물체를 부여 할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9d787f0415844ae018bcf56dbf50989dcd7b9f11" translate="yes" xml:space="preserve">
          <source>The algorithm does not have to be a &lt;a href=&quot;https://en.wikipedia.org/wiki/Cryptographic_hash_function&quot;&gt;Cryptographic hash function&lt;/a&gt;. Meaning it does not have to satisfy the following conditions:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;알고리즘은 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Cryptographic_hash_function&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;암호화 해시 함수일&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 필요는 없습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다음 조건을 만족할 필요는 없습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4ac5541f8c7461f7bcb249fb14bcc008335a3fce" translate="yes" xml:space="preserve">
          <source>The algorithm that calculates a hash code needs to be fast. A simple algorithm is usually going to be a faster one.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;해시 코드를 계산하는 알고리즘은 빨라야합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;간단한 알고리즘은 일반적으로 더 빠를 것입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="045833a0e2d683cb1e8c1b7d651bc273a8823621" translate="yes" xml:space="preserve">
          <source>The algorithm that calculates a hash code needs to keep &lt;a href=&quot;http://crppit.epfl.ch/documentation/Hash_Function/WiKi/Hash_collision.htm&quot;&gt;hash collisions&lt;/a&gt; to a minumum. A hash collision is a situation that occurs when two calls to &lt;code&gt;GetHashCode&lt;/code&gt; on two different objects produce identical hash codes. Note that collisions are allowed (some have the misconceptions that they are not) but they should be kept to a minimum.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;해시 코드를 계산하는 알고리즘은 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://crppit.epfl.ch/documentation/Hash_Function/WiKi/Hash_collision.htm&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;해시 충돌&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 을 최소 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;로 유지해야합니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;해시 충돌은 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;서로 다른 두 개체 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;에서 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;GetHashCode&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 두 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;번 호출하면 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;동일한 해시 코드가 생성 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;될 때 발생하는 상황입니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;충돌은 허용되지만 (일부는 잘못된 개념이 있지만) 최소한으로 유지해야합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d740feb71d0fbf0408f6a65db8c993a4ea6592a0" translate="yes" xml:space="preserve">
          <source>The compiler will ensure &lt;code&gt;HashValue&lt;/code&gt; is not called with a class due to the generic type constraint. But there is no compiler support for &lt;code&gt;HashObject&lt;/code&gt; since adding a generic argument also adds a boxing operation.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;컴파일러는 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;제네릭 형식 제약 조건으로 인해 클래스에서 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;HashValue&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 가 호출되지 않도록합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그러나 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;일반 인수를 추가하면 권투 작업이 추가되므로 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;HashObject&lt;/code&gt; 에&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 대한 컴파일러 지원이 없습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="aa6cbb4a7d0cfa141362b4605fb3b5044a8ac454" translate="yes" xml:space="preserve">
          <source>The full code can be seen at &lt;a href=&quot;https://bitbucket.org/JonHanna/spookilysharp/src&quot;&gt;https://bitbucket.org/JonHanna/spookilysharp/src&lt;/a&gt; but consider that the code above is a simplified version of it.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;전체 코드는 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://bitbucket.org/JonHanna/spookilysharp/src&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https://bitbucket.org/JonHanna/spookilysharp/src&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 에서 볼 수 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;있지만 위 코드는 단순화 된 버전입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6aea3a389963dd3279922dd6f8068aa1b709c3a3" translate="yes" xml:space="preserve">
          <source>The hashing algorithm needs to be &lt;a href=&quot;https://en.wikipedia.org/wiki/Deterministic_algorithm&quot;&gt;deterministic&lt;/a&gt; i.e. given the same input it must always produce the same output.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;해싱 알고리즘은 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Deterministic_algorithm&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;결정 론적&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 이어야합니다. 즉, 동일한 입력이 주어지면 항상 동일한 출력을 생성해야합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="74843c914e569e3d934ad75c40cd9c55a7c17747" translate="yes" xml:space="preserve">
          <source>The heavy lifting should be part of the Equals() method; the hash should be a very cheap operation to enable calling Equals() on as few items as possible.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;무거운 리프팅은 Equals () 메서드의 일부 여야합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;해시는 가능한 한 적은 수의 항목에서 Equals ()를 호출 할 수 있도록 매우 저렴한 작업이어야합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6a3bc6502919f9edd3fdb6c625b410c86d7f8039" translate="yes" xml:space="preserve">
          <source>Then I came back, and produced a lot of overloads to easily feed just about all of the native types (except &lt;code&gt;decimal&lt;/code&gt;&amp;dagger;) into a hash code.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그런 다음 돌아와서 많은 기본 유형 ( &lt;/font&gt;&lt;/font&gt; &lt;code&gt;decimal&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &amp;dagger; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;제외 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;)을 해시 코드 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;에 쉽게 공급할 수있는 많은 과부하를 생성했습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f7483c49e6eb98b52f32043abddc6764971dca6b" translate="yes" xml:space="preserve">
          <source>Then I put &lt;em&gt;that&lt;/em&gt; project to one side, because just as the original project had produced the question of how to produce a better hash code, so that project produced the question of how to produce a better .NET memcpy.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그런 다음 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;원래 프로젝트가 더 나은 해시 코드를 생성하는 방법에 대한 질문을 생성 했으므로 프로젝트가 더 나은 .NET memcpy를 생성하는 방법에 대한 질문을 생성했기 때문에 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;해당&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 프로젝트를 한쪽에 배치했습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8a3dd62d6429a57deee1938c2b8d63f6dec90e7d" translate="yes" xml:space="preserve">
          <source>Then, simply you can use it as:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그런 다음 간단히 다음과 같이 사용할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="75cffc3515bdc95dc9b22f8fed1ab2f02044fac8" translate="yes" xml:space="preserve">
          <source>This disturbed me though, because the above shouldn't work. Or more precisely, it shouldn't work unless the original &lt;code&gt;GetHashCode()&lt;/code&gt; was poor in a very particular way.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;위의 내용이 작동하지 않아야하기 때문에 이것은 나를 방해했습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;더 정확하게 말하면 원래 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;GetHashCode()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 가 매우 특정한 방식으로 열악 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하지 않으면 작동하지 않아야합니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="516e8a7deb0de8522dade038b929c0204312d476" translate="yes" xml:space="preserve">
          <source>This is a good one:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이것은 좋은 것입니다 :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1c7c1850d93fc274a256ffc70245af28400631ac" translate="yes" xml:space="preserve">
          <source>This is a static helper class that implements Josh Bloch's implementation; and provides explicit overloads to &quot;prevent&quot; boxing, and also to implement the hash specifically for the long primitives.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이것은 Josh Bloch의 구현을 구현하는 정적 헬퍼 클래스입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그리고 권투를 &quot;예방&quot;하기 위해 명시적인 오버로드를 제공하고 특히 긴 프리미티브에 대한 해시를 구현합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1307b741efe8c22ab33dd11c4f9ced9d341c0aa2" translate="yes" xml:space="preserve">
          <source>This is better than the common practice of &lt;code&gt;XOR&lt;/code&gt;ing hashcodes for two main reasons. Suppose we have a type with two &lt;code&gt;int&lt;/code&gt; fields:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이것은 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;두 가지 주요 이유로 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;XOR&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ing 해시 코드 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;의 일반적인 관행보다 낫습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;두 개의 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;int&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 필드 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;가있는 유형이 있다고 가정하십시오 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e70ae20c9fb580d40ebc1c00d330f1f1135e294b" translate="yes" xml:space="preserve">
          <source>This is from &lt;a href=&quot;https://github.com/dotnet/corefx/blob/master/src/System.ValueTuple/src/System/ValueTuple/ValueTuple.cs&quot;&gt;&lt;code&gt;ValueTuple&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이것은 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/dotnet/corefx/blob/master/src/System.ValueTuple/src/System/ValueTuple/ValueTuple.cs&quot;&gt; &lt;code&gt;ValueTuple&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 에서 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;온 것입니다&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4d3c7ae92d1ff5acbdfec20e8c34d0f9543966a2" translate="yes" xml:space="preserve">
          <source>This test fails (floats; hash is the same even though I switched 2 values to be negative):</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 테스트는 실패합니다 (부동; 2 개의 값을 음수로 전환하더라도 해시는 동일합니다).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3c9c751854ebebe052bd9ac39e701ac7f3ee9751" translate="yes" xml:space="preserve">
          <source>This will generate a quality hash code without you having to worry about the implementation details.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그러면 구현 세부 정보에 대해 걱정할 필요없이 품질 해시 코드가 생성됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2273401922a7ec31a62bf4c06628a6050af299e8" translate="yes" xml:space="preserve">
          <source>This will work for any number of properties. It does not use boxing. It just uses the algorithm already implemented in the framework for anonymous types.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이것은 여러 속성에 적용됩니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;권투를 사용하지 않습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;익명 형식의 프레임 워크에서 이미 구현 된 알고리즘 만 사용합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d9d9e2f475ad3bfe496517e55d50603c286f604d" translate="yes" xml:space="preserve">
          <source>Up until recently my answer would have been very close to Jon Skeet's here. However, I recently started a project which used power-of-two hash tables, that is hash tables where the size of the internal table is 8, 16, 32, etc. There's a good reason for favouring prime-number sizes, but there are some advantages to power-of-two sizes too.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;최근까지 내 대답은 Jon Skeet의 여기에 매우 가깝습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그러나 최근에 2의 제곱 해시 테이블, 즉 내부 테이블의 크기가 8, 16, 32 등인 해시 테이블을 사용하는 프로젝트를 시작했습니다. 소수의 크기를 선호하는 좋은 이유가 있습니다. 2의 거듭 제곱에도 이점이 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="342c659777997bec12f413246e5e24d6a8317e2a" translate="yes" xml:space="preserve">
          <source>Usage Example</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;사용 예&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="861a0e430ffac5e4ae6e11b7a947f2c32d388cf4" translate="yes" xml:space="preserve">
          <source>Usage:</source>
          <target state="translated">Usage:</target>
        </trans-unit>
        <trans-unit id="b33d830517aea3e2d9bb3019a44d1af09654b9ae" translate="yes" xml:space="preserve">
          <source>ValueTuple - Update for C# 7</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ValueTuple-C # 7 업데이트&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7f47afe10930417b5ac38c0d4b812852c49176ff" translate="yes" xml:space="preserve">
          <source>What Makes a Good Algorithm?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;좋은 알고리즘은 무엇입니까?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="38242dbf222f22cf8723209c1d4c037f60de436c" translate="yes" xml:space="preserve">
          <source>What is the best algorithm for overriding GetHashCode</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;GetHashCode를 재정의하는 가장 좋은 알고리즘은 무엇입니까&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a7927a0abfa9b169083b1cb33b972375e669f367" translate="yes" xml:space="preserve">
          <source>XOR the result with h2.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;h2로 결과를 XOR하십시오.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="df90e78c7b7f1be042309f565b3a930a77da9bf6" translate="yes" xml:space="preserve">
          <source>You can compute the hash code from fields that are not mutable; or</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;변경할 수없는 필드에서 해시 코드를 계산할 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;또는&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7e0f5da3ef3eb98ebe66a0458acbe252a1335380" translate="yes" xml:space="preserve">
          <source>You can ensure that the hash code of a mutable object does not change while the object is contained in a collection that relies on its hash code.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;해시 코드에 의존하는 컬렉션에 객체가 포함되어있는 동안 가변 객체의 해시 코드가 변경되지 않도록 할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d14544f0139a010a5f0dfdedc09f3993f9ddda5c" translate="yes" xml:space="preserve">
          <source>You can override GetHashCode for immutable reference types. In general, for mutable reference types, you should override GetHashCode only if:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;변경 불가능한 참조 유형에 대해 GetHashCode를 대체 할 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;일반적으로 변경 가능한 참조 유형의 경우 다음과 같은 경우에만 GetHashCode를 대체해야합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e8eb5c0af93ca2647da55c48e832b72309675a22" translate="yes" xml:space="preserve">
          <source>You can pass a string comparison that matches your equals implementation.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;equals 구현과 일치하는 문자열 비교를 전달할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="70eae4f6b110439731d5eafcd9cbf8d01ea4d5bf" translate="yes" xml:space="preserve">
          <source>You can read the full blog post '&lt;a href=&quot;https://rehansaeed.com/gethashcode-made-easy/&quot;&gt;GetHashCode Made Easy&lt;/a&gt;' for more details and comments.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;자세한 내용과 의견 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;은 전체 블로그 게시물 ' &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://rehansaeed.com/gethashcode-made-easy/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;GetHashCode Made Easy&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; '를 참조하십시오.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2e8dfb137940607558d3f7f402aaf01bf7d406d2" translate="yes" xml:space="preserve">
          <source>You may turn multiple values to a hashed value and some of them be same, so don't use it as an identifier. (maybe some day I am going to use your component)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;여러 값을 해시 값으로 바꿀 수 있으며 그 중 일부는 동일하므로 식별자로 사용하지 마십시오. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(어쩌면 언젠가 나는 당신의 구성 요소를 사용할 것입니다)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="98658dbce77e0b4aea26c71003da55e305bd7c92" translate="yes" xml:space="preserve">
          <source>or like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;또는 이와 같이 :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
