<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/8547778">
    <body>
      <group id="8547778">
        <trans-unit id="89ec615e8896a817a1338b981c5dd02618028624" translate="yes" xml:space="preserve">
          <source>(It shows FLOP/s for different values of &lt;code&gt;n&lt;/code&gt;.)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（&lt;/font&gt;&lt;/font&gt; &lt;code&gt;n&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;異なる値に対するFLOP / sを示します&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="12da5ea81004fb4224ae834c50a9dde8a5706fc0" translate="yes" xml:space="preserve">
          <source>5 Regions - Explanations</source>
          <target state="translated">5つの地域-解説</target>
        </trans-unit>
        <trans-unit id="b14907e1ba792b57aecd8a4bf1e7f6c09685b346" translate="yes" xml:space="preserve">
          <source>&lt;strike&gt;Here, as the data sizes increases, the amount of relative overhead goes down and the performance &quot;saturates&quot;. Here two loops is slower because it has twice as much loop and branching overhead.&lt;/strike&gt;</source>
          <target state="translated">&lt;strike&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここでは、データサイズが増加すると、相対的なオーバーヘッドの量が減少し、パフォーマンスが「飽和」します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここで2つのループは、2倍のループと分岐オーバーヘッドがあるため、遅くなります。&lt;/font&gt;&lt;/font&gt;&lt;/strike&gt;</target>
        </trans-unit>
        <trans-unit id="69479992a61ec0eb9e53f2ae7d6230f7aea2402f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;1st Case:&lt;/strong&gt; - Only one summation but two independent function calls.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;1番目のケース：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; -合計は1つだけですが、2つの独立した関数呼び出し。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="63a03495083598dadf8617e71321f11f6da3036b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;2 x Intel Xeon X5482 Harpertown @ 3.2 GHz:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Intel Xeon X5482 Harpertown @ 3.2 GHz x 2：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8dd2234cdf691ae3d1c9d696aa07b739c688a8b7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;2nd Case:&lt;/strong&gt; - Two summations but each has its own function call.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2番目のケース：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; -2つの合計ですが、それぞれに独自の関数呼び出しがあります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ac5177fa49c357654e6cf65a86c3c6135e13b3b3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;6.206 seconds&lt;/strong&gt; with one loop and &lt;strong&gt;2.116 seconds&lt;/strong&gt; with two loops. This reproduces the OP's results exactly.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;6.206秒&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 1つのループとし、&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2.116秒&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 2つのループを有します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これにより、OPの結果が正確に再現されます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="152bc0110de9ef28e70c5321422c739a7c563036" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;First Case:&lt;/em&gt;&lt;/strong&gt; On first iteration the &lt;code&gt;Boss&lt;/code&gt; has to initially go 100 feet to give the order slip to &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;A&lt;/code&gt; goes off and does his thing, but then the &lt;code&gt;Boss&lt;/code&gt; has to travel 500 feet to &lt;code&gt;C&lt;/code&gt; to give him his order slip. Then on the next iteration and every other iteration after the &lt;code&gt;Boss&lt;/code&gt; has to go back and forth 500 feet between the two.</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最初のケース：&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最初のイテレーションでは、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Boss&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は最初に100フィート移動してオーダースリップを&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に与える必要が&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あり、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はオフになって彼の処理を行いますが、その後、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Boss&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は500フィート移動して&lt;/font&gt;&lt;/font&gt; &lt;code&gt;C&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;移動&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;し、オーダースリップを与える必要があります。その後、次のイテレーションと、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Boss&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が2つの間を500フィート往復しなければならない&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;後、イテレーションごとに&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3b3d8ae7e9620b4a3b3a01e77c1f42a469984bc3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Second Case:&lt;/em&gt;&lt;/strong&gt;&lt;code&gt;The Boss&lt;/code&gt; has to travel 100 feet on the first iteration to &lt;code&gt;A&lt;/code&gt;, but after that he is already there and just waits for &lt;code&gt;A&lt;/code&gt; to get back until all slips are filled. Then the &lt;code&gt;Boss&lt;/code&gt; has to travel 500 feet on the first iteration to &lt;code&gt;C&lt;/code&gt; because &lt;code&gt;C&lt;/code&gt; is 500 feet from &lt;code&gt;A&lt;/code&gt; since this &lt;code&gt;Boss( Summation, For Loop )&lt;/code&gt; is being called right after working with &lt;code&gt;A&lt;/code&gt; and then just waits like he did with &lt;code&gt;A&lt;/code&gt; until all of &lt;code&gt;C's&lt;/code&gt; order slips are done.</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2番目のケース：&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt; &lt;code&gt;The Boss&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は最初の反復で100フィートを&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;まで移動する必要があります&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が、その後、彼はすでにそこにいて、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;すべてのスリップが満たされるまで&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が戻る&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;待つだけ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そして、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Boss&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に最初の反復で500フィートを移動しなければならない&lt;/font&gt;&lt;/font&gt; &lt;code&gt;C&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ので、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;C&lt;/code&gt; は&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 500フィートからである&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このため、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Boss( Summation, For Loop )&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;右の作業の後に呼び出されている&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と彼がやったように、その後ただ待つ&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の全てまで&lt;/font&gt;&lt;/font&gt; &lt;code&gt;C's&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;注文伝票が完成しました。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8db4c14c29a7d105d2f99dd7e4cab04e750bd539" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Assessing The Problem&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;問題の評価&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bd63d84ed789fbfe62fd115ddd944db74e9a753b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Benchmark Results:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ベンチマーク結果：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a385dd46f24c302ea5ca744977eaa5b99101b83b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Case 1&lt;/strong&gt; is a classic interpolation problem that happens to be an inefficient one. I also think that this was one of the leading reasons of why many machine architectures and developers ended up building and designing multi-core systems with the ability to do multi-threaded applications as well as parallel programming.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ケース1&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、たまたま非効率的な問題である古典的な補間問題です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;また、これが、多くのマシンアーキテクチャや開発者が、マルチスレッドアプリケーションや並列プログラミングを実行できるマルチコアシステムの構築と設計を行った主な理由の1つでもあると思います。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="db76f0a25108e4cb963d0a08f23235f505a9cc91" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Conclusion:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Conclusion:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ee9af54fbd9a13fc657b8c9037b7dfde2362914f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Could you provide some solid insight into the details that lead to the different cache behaviors as illustrated by the five regions on the following graph?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;次のグラフの5つの領域に示されているように、さまざまなキャッシュ動作につながる詳細への確かな洞察を提供できますか？&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f64c2fa0ab45059d9d2b05c465150bbadd393a29" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;EDIT : It does in fact look like you are allocating all the arrays separately.&lt;/strong&gt;
Usually when such large allocations are requested, the allocator will request fresh pages from the OS. Therefore, there is a high chance that large allocations will appear at the same offset from a page-boundary.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;編集：実際には、すべての配列を個別に割り当てているように見えます。&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 通常、このような大きな割り当てが要求されると、アロケータはOSに新しいページを要求します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、ページ境界からの同じオフセットに大きな割り当てが表示される可能性が高くなります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ff82481600ca4b72142ffa0c5df31cb8e1828e64" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Here's the test code:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここにテストコードがあります：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="104d7d0e822b5338538004327c987e53d73680da" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;I cannot replicate the results discussed here.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここで説明した結果は再現できません。&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="112ae0b490d81db4a257a03413092f9a19eef61c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;In the first two tests, the arrays are allocated separately.&lt;/strong&gt; You'll notice that they all have the same alignment relative to the page.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最初の2つのテストでは、配列は個別に割り当てられます。&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これらはすべて、ページに対して同じ配置になっていることがわかります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4eb70f5351695541ea10eb07e79eea4cb293448a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;In the second two tests, the arrays are packed together to break that alignment.&lt;/strong&gt; Here you'll notice both loops are faster. Furthermore, the second (double) loop is now the slower one as you would normally expect.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2番目の2つのテストでは、その配列を壊すために配列が一緒にパックされます。&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここで、両方のループが高速であることがわかります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;さらに、2番目の（ダブル）ループは、通常予想されるよりも遅いループになりました。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8e94c672f74af08d7f271531102f1986340b6dec" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;It might also be interesting to point out the differences between CPU/cache architectures, by providing a similar graph for these CPUs.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これらのCPUについて同様のグラフを提供することにより、CPU /キャッシュアーキテクチャの違いを指摘することも興味深いかもしれません。&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="234647d3ac335a2b9c1c73ef786914ed30da0bc5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Let's Investigate&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;調べよう&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0992f369b3bd576e62bd26ec8024546b329d7025" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Our Assertions:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私たちの主張：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bce0cd5ffb2a37fba775193b4bf5ba59883c25c2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Regarding These Questions&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これらの質問について&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="883cd845c12162f162451345532a4622afe44219" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Region 1:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;地域1：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6c3a069490cad64b2abbf3ad037bad18e1f4ba80" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Region 2:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;地域2：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="49b07d776f5d212a4b7f02a4946b33b5f222234c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Region 3:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;地域3：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cadf6d1e9cc3c16346b4db73abfa9efeefa2911d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Region 4:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;地域4：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2704be14d7b23daec07410a5dd7685d9fa30cda2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Region 5:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;地域5：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7ae2cc3d2bb2ec34c48c443e7891cfc09bd5f463" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Summary with Analogy&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;類推のまとめ&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4984ec011b334dc8f00bd50924d4167bb704d1a6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The Algorithms:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アルゴリズム：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="df9ac0ca08c80980b68a2fa485d69fb68d2aaa69" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The Approach&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アプローチ&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="eec929ed1c8347dcecf86a47fbb2804dba304932" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The Comparison of Arbitrary Values&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;任意の値の比較&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ec70960c24f99d8101f34115f16fb94cf32e1c01" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The Consideration&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;考察&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d8b01854004cefcf81fbcc247efc2e4e0797a699" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The Difference In Distances Traveled&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;走行距離の違い&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9e3a70475f876caae8f6a04b7f0e07646a22f2ab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The Ending Results&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;エンディング結果&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3bdeca04c971828619464a9072d48f1805614670" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The OPs Amended Question(s)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;OPは質問を修正しました&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="415a6cc46e0f95521c4e7cb395b0523a2dc5c7de" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The Observation:&lt;/strong&gt; - &lt;em&gt;The differences between the two algorithms&lt;/em&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;観察：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; - &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2つのアルゴリズムの間の違い&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="76781d11095b245a6f8c86e1771fa82fec1ba4b3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The Original Question&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;元の質問&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c2361582818f9044502e5f10dd5db390bc078247" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The Perspective&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;パースペクティブ&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7d18f8f2bee619589b857aee842936d61a6270c3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The Test Cases:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;テストケース：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6f94195bfa3d4122553a525b3ba8b2def28614f7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;What We Do Know&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私たちが知っていること&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f99489672c41c8daa933d99ea58acb903a2b5c58" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;What We Don't Know&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私たちが知らないこと&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="521b0abab75a6ac4655f23b9618ac7ccc724efb0" translate="yes" xml:space="preserve">
          <source>@Mysticial's answer convinced a lot of people (including me), probably because it was the only one that seemed to rely on facts, but it was only one &quot;data point&quot; of the truth.</source>
          <target state="translated">@Mysticialさんの回答は、事実を頼りにしているように見えたからか、多くの人(私も含めて)を納得させましたが、それは真実の「データポイント」の1つに過ぎませんでした。</target>
        </trans-unit>
        <trans-unit id="0e15339689c74cb259c9d321c1b1b5454cd6bed7" translate="yes" xml:space="preserve">
          <source>A straight assignment with no computation would be a cleaner test of memory access time and would create a test that is uniform irrespective of the loop count. Maybe I missed something in the conversation, but it is worth thinking twice about. If the plus is left out of the assignment, the cumulative time is almost identical at 31 seconds each.</source>
          <target state="translated">計算をしないストレートな代入の方が、メモリアクセス時間のテストとしてはよりクリーンで、ループ数に関係なく一様なテストを作ることができるでしょう。会話の中で見落としていたのかもしれませんが、よく考えてみる価値はあります。プラスを代入から外した場合、累積時間はそれぞれ31秒でほぼ同じになります。</target>
        </trans-unit>
        <trans-unit id="b2921679a209c3a19ed571424cfe0ea586224ba2" translate="yes" xml:space="preserve">
          <source>After looking at the code for a while it became quite apparent what the problem is and what is generating it. Lets break this down into an algorithmic problem and look at it from the perspective of using mathematical notations then apply an analogy to the math problems as well as to the algorithms.</source>
          <target state="translated">しばらくコードを見ていると、何が問題で、何がそれを生成しているのかが明らかになりました。これをアルゴリズムの問題に分解して、数学的な表記法を使用する観点から見て、数学の問題とアルゴリズムにアナロジーを適用してみましょう。</target>
        </trans-unit>
        <trans-unit id="a01e33f4dcdb6ba1ae9f34a97cf8f6deeedf1a8d" translate="yes" xml:space="preserve">
          <source>And</source>
          <target state="translated">And</target>
        </trans-unit>
        <trans-unit id="68af471cbe64993c128953195c25db2546c9c3a6" translate="yes" xml:space="preserve">
          <source>And this approximation is the average difference between these two loops both algorithmically and machine operations involving software optimizations and machine instructions. So when the data set grows linearly, so does the difference in time between the two. Algorithm 1 has more fetches than algorithm 2 which is evident when the &lt;code&gt;Boss&lt;/code&gt; had to travel back and forth the maximum distance between &lt;code&gt;A&lt;/code&gt; &amp;amp; &lt;code&gt;C&lt;/code&gt; for every iteration after the first iteration while Algorithm 2 the &lt;code&gt;Boss&lt;/code&gt; had to travel to &lt;code&gt;A&lt;/code&gt; once and then after being done with &lt;code&gt;A&lt;/code&gt; he had to travel a maximum distance only one time when going from &lt;code&gt;A&lt;/code&gt; to &lt;code&gt;C&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そして、この近似は、ソフトウェアによる最適化と機械命令を含むアルゴリズムと機械操作の両方でのこれら2つのループ間の平均差です。したがって、データセットが線形に増加すると、2つの間の時間差も増加します。アルゴリズム1は、アルゴリズム2よりも多くのフェッチがあります。これは、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Boss&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最初の反復後のすべての反復で&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;C&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;間の最大距離を行き来し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;なければならず&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、アルゴリズム2の&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Boss&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一度&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に移動しなければならない&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;場合に明らかです。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;氏は、最大距離に行くから一度だけ移動しなければならなかった&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に&lt;/font&gt;&lt;/font&gt; &lt;code&gt;C&lt;/code&gt; を&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d9088cef1499e648db384472fce2fb57166ffcad" translate="yes" xml:space="preserve">
          <source>And this is a hard-to-explain one: Initialized data, that is allocated once and reused for every following test case of different vector size:</source>
          <target state="translated">そして、これは説明が難しいものです。初期化されたデータは、一度割り当てられ、異なるベクトルサイズの次のテストケースごとに再利用されます。</target>
        </trans-unit>
        <trans-unit id="6bc397ce8c790298abec880d37b0008e7ad386fd" translate="yes" xml:space="preserve">
          <source>Array sizes ranged from 2^16 to 2^24, using eight loops. I was careful to initialize the source arrays so the &lt;code&gt;+=&lt;/code&gt; assignment wasn't asking the &lt;a href=&quot;http://en.wikipedia.org/wiki/Floating-point_unit&quot;&gt;FPU&lt;/a&gt; to add memory garbage interpreted as a double.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列サイズは、8つのループを使用して、2 ^ 16から2 ^ 24の範囲でした。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;+=&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;割り当てが&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Floating-point_unit&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;FPU&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;にdoubleとして解釈されるメモリガベージを追加する&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ように要求しないように&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、ソース配列を初期化するように注意し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ました。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d798d18424176f8a0f98a50c4c4dec04767bbde5" translate="yes" xml:space="preserve">
          <source>As @Stephen Cannon points out in the comments, there is very likely possibility that this alignment causes &lt;strong&gt;&lt;em&gt;false aliasing&lt;/em&gt;&lt;/strong&gt; in the load/store units or the cache. I Googled around for this and found that Intel actually has a hardware counter for &lt;strong&gt;&lt;em&gt;partial address aliasing&lt;/em&gt;&lt;/strong&gt; stalls:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Stephen Cannonがコメントで指摘しているように、この配置が&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ロード/ストアユニットまたはキャッシュで&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;誤ったエイリアシング&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;引き起こす可能性は非常に高い&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私はこれをグーグル検索して、Intelが実際に&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;部分的なアドレスエイリアス&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ストールの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ためのハードウェアカウンターを持っていることを発見しました&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c35e4900a7c68daeafb264cda2682267df9d2546" translate="yes" xml:space="preserve">
          <source>As I have demonstrated without a doubt, there is an underlying issue even before the Hardware and Software becomes involved. Now as for the management of memory and caching along with page files, etc. which all works together in an integrated set of systems between: &lt;code&gt;The Architecture&lt;/code&gt; { Hardware, Firmware, some Embedded Drivers, Kernels and ASM Instruction Sets }, &lt;code&gt;The OS&lt;/code&gt;{ File and Memory Management systems, Drivers and the Registry }, &lt;code&gt;The Compiler&lt;/code&gt; { Translation Units and Optimizations of the Source Code }, and even the &lt;code&gt;Source Code&lt;/code&gt; itself with its set(s) of distinctive algorithms; we can already see that there is a bottleneck that is happening within the first algorithm before we even apply it to any machine with any arbitrary &lt;code&gt;Architecture&lt;/code&gt;, &lt;code&gt;OS&lt;/code&gt;, and &lt;code&gt;Programmable Language&lt;/code&gt; compared to the second algorithm. So there already existed a problem before involving the intrinsics of a modern computer.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私が疑いなく実証したように、ハードウェアとソフトウェアが関与する前でさえ、根本的な問題があります。次に、メモリの管理やページファイルなどのキャッシュの管理については、統合されたシステムのセットですべて一緒に機能します&lt;/font&gt;&lt;/font&gt; &lt;code&gt;The Architecture&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; {ハードウェア、ファームウェア、一部の組み込みドライバ、カーネル、ASM命令セット}、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;The OS&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; {ファイルメモリー管理システム、ドライバーとレジストリ}、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;The Compiler&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; {ソースコードの翻訳単位と最適化}、さらに&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は特徴的なアルゴリズムのセットを持つ&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Source Code&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;自体。任意のマシンに適用する前に、最初のアルゴリズム内でボトルネックが発生していることをすでに確認できます。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Architecture&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2番目のアルゴリズムと比較した&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アーキテクチャ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;OS&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、および&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Programmable Language&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ですから、現代​​のコンピューターの本質を巻き込む前に、すでに問題が存在していました。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="db05e8a585a74c2b37aa36f6b4ef683ef80e1764" translate="yes" xml:space="preserve">
          <source>As you might expect, initializing &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;d&lt;/code&gt; inside the loop using &lt;code&gt;InitToZero[j]&lt;/code&gt; gave the combined approach an advantage, as they were done back-to-back before the assignments to &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt;, but still within 10%. Go figure.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ご&lt;/font&gt; &lt;code&gt;InitToZero[j]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用してループ内で&lt;/font&gt;&lt;/font&gt; &lt;code&gt;b&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;d&lt;/code&gt; を&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;初期化&lt;/font&gt; &lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;a&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt; &lt;code&gt;c&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;への割り当ての前にバックツーバックで実行されていましたが&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、10％以内であっ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;たため、このアプローチには利点がありました&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;図を行きます。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6eeb01c453d49806a69030f78b4610c8007b3c99" translate="yes" xml:space="preserve">
          <source>Assuming a fairly dumb caching policy of &lt;em&gt;if the byte is not in the cache, put it there and get the following byte too while we are at it&lt;/em&gt; you will get a scenario something like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;バイトがキャッシュにない場合の&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;かなりおかしいキャッシングポリシーを想定すると、&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そこにそれを置いて、次のバイトも&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;取得します。このようなシナリオ&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が表示され&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2621108dbdca1d058df9e1e89bdc18d55d8d9d56" translate="yes" xml:space="preserve">
          <source>Assuming a simple LIFO caching policy, this code:</source>
          <target state="translated">単純なLIFOキャッシングポリシーを仮定すると、このコードは</target>
        </trans-unit>
        <trans-unit id="3460682488e6d7cc96dbc4d2d00519a722ffcdff" translate="yes" xml:space="preserve">
          <source>At this point, nothing fits in cache. So you're bound by memory bandwidth.</source>
          <target state="translated">この時点では、キャッシュには何も収まらない。つまり、メモリ帯域に縛られているということですね。</target>
        </trans-unit>
        <trans-unit id="847dd1a8dd5a0fcb1deef24af0fdd56bf4308a6a" translate="yes" xml:space="preserve">
          <source>At this point, the data no longer fits in L1 cache. So performance is capped by the L1 &amp;lt;-&amp;gt; L2 cache bandwidth.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この時点で、データはL1キャッシュに収まりません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、パフォーマンスはL1 &amp;lt;-&amp;gt; L2キャッシュ帯域幅によって制限されます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d744e9fe7c6bd65afd8a445005ae9f5103b27665" translate="yes" xml:space="preserve">
          <source>Compiled on MS &lt;a href=&quot;http://en.wikipedia.org/wiki/Visual_C++#32-bit_versions&quot;&gt;Visual C++ 10.0&lt;/a&gt; with full optimization and &lt;a href=&quot;http://en.wikipedia.org/wiki/SSE2&quot;&gt;SSE2&lt;/a&gt; enabled for 32-bit on a &lt;a href=&quot;http://en.wikipedia.org/wiki/Intel_Core_2&quot;&gt;Intel Core 2&lt;/a&gt; Duo (x64), the first example takes 5.5&amp;nbsp;seconds and the double-loop example takes only 1.9&amp;nbsp;seconds. My question is: (Please refer to the my rephrased question at the bottom)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Intel_Core_2&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Intel Core 2&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Duo（x64）で&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;32ビットに対して&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;完全最適化および&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/SSE2&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;SSE2を&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;有効に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;してMS &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Visual_C++#32-bit_versions&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Visual C ++ 10.0&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;で&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コンパイルする&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と、最初の例は5.5秒かかり、ダブルループの例はわずか1.9秒かかります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私の質問は：（下部にある私の言い換えられた質問を参照してください）&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ce5cd38e3fb59188d515e8d4753f99e250f4c136" translate="yes" xml:space="preserve">
          <source>Considering the OP's original question about the 2 variants of the for loops and his amended question towards the behavior of caches along with many of the other excellent answers and useful comments; I'd like to try and do something different here by taking a different approach about this situation and problem.</source>
          <target state="translated">forループの2つのバリエーションについてのOPの元の質問と、キャッシュの挙動についての彼の修正された質問、そして他の多くの素晴らしい回答や有益なコメントを考慮して、私はこの状況と問題について異なるアプローチを取ることによって、ここで何か異なることを試してみたいと思います。</target>
        </trans-unit>
        <trans-unit id="2658124dfdcfa4171d5ed289bdc8e7cce5a9eacb" translate="yes" xml:space="preserve">
          <source>Considering the two loops and all of the discussion about cache and page filing I'd like to take another approach as to looking at this from a different perspective. One that doesn't involve the cache and page files nor the executions to allocate memory, in fact this approach doesn't even concern the actual hardware or the software at all.</source>
          <target state="translated">2 つのループとキャッシュとページファイリングについての議論を考えると、別の視点からこれを見るために別のアプローチを取りたいと思います。それは、キャッシュやページファイルやメモリ割り当ての実行を伴わないもので、実際には、このアプローチは実際のハードウェアやソフトウェアには全く関係ありません。</target>
        </trans-unit>
        <trans-unit id="7cd90e2c4a5daa4b5570598684f8432ccd97991f" translate="yes" xml:space="preserve">
          <source>Could you provide some solid insight into the details that lead to the different cache behaviors as illustrated by the five regions on the following graph?</source>
          <target state="translated">次のグラフの5つの領域で示されているように、異なるキャッシュの動作につながる詳細について、しっかりとした洞察を提供していただけますか?</target>
        </trans-unit>
        <trans-unit id="45e62524f888dc26206083147534d2d045cfe01f" translate="yes" xml:space="preserve">
          <source>Disassembly for the first loop basically looks like this (this block is repeated about five times in the full program):</source>
          <target state="translated">最初のループのための分解は基本的に次のようになります(このブロックはフルプログラムの中で5回ほど繰り返されます)。</target>
        </trans-unit>
        <trans-unit id="f5aded222c02776b41379bab0f381d5cb63dc8c0" translate="yes" xml:space="preserve">
          <source>EDIT: Results on an &lt;em&gt;actual&lt;/em&gt; Core 2 architecture machine:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;編集：&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;実際の&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Core 2アーキテクチャマシンでの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;結果&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c1cdf0b350bbd524d76c4339c2d1b23bdd3868e0" translate="yes" xml:space="preserve">
          <source>EDIT: The question turned out to be of no relevance, as the behavior severely depends on the sizes of the arrays (n) and the CPU cache. So if there is further interest, I rephrase the question:</source>
          <target state="translated">EDIT:この質問は関連性がないことが判明しました。それで、さらに興味があれば、私は質問を言い換えます。</target>
        </trans-unit>
        <trans-unit id="56c9875ac0dcfe30c44dfb65704f11fe74371099" translate="yes" xml:space="preserve">
          <source>Each loop of the double loop example produces this code (the following block is repeated about three times):</source>
          <target state="translated">二重ループの例の各ループは、このようなコードを生成します(以下のブロックは約3回繰り返されます)。</target>
        </trans-unit>
        <trans-unit id="7339be587541117a0089da7851906a2b9aeddb3a" translate="yes" xml:space="preserve">
          <source>Every low-level performance related question on Stack&amp;nbsp;Overflow should be required to provide MFLOPS information for the whole range of cache relevant data sizes! It's a waste of everybody's time to think of answers and especially discuss them with others without this information.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;キャッシュ関連のデータサイズ全体のMFLOPS情報を提供するには、スタックオーバーフローに関するパフォーマンスに関する低レベルの質問がすべて必要です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;答えを考え、特にこの情報なしで他の人とそれらについて話し合うことは、みんなの時間の無駄です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0f030db38dc8179d25718d183c7994c1ad7bfec3" translate="yes" xml:space="preserve">
          <source>Hardware is &lt;a href=&quot;http://en.wikipedia.org/wiki/Dell_XPS#XPS_8500&quot;&gt;Dell XPS 8500&lt;/a&gt; with generation 3 &lt;a href=&quot;http://en.wikipedia.org/wiki/Intel_Core#Core_i7&quot;&gt;Core i7&lt;/a&gt; @ 3.4&amp;nbsp;GHz and 8&amp;nbsp;GB memory. For 2^16 to 2^24, using eight loops, the cumulative time was 44.987 and 40.965 respectively. Visual C++ 2010, fully optimized.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ハードウェアは&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、第3世代&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Intel_Core#Core_i7&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Core i7&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; @ 3.4 GHzおよび8 GBメモリを搭載した&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Dell_XPS#XPS_8500&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Dell XPS 8500&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2 ^ 16から2 ^ 24の場合、8つのループを使用すると、累積時間はそれぞれ44.987および40.965でした。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Visual C ++ 2010、完全に最適化。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c1bbe64c3e6e15af998d9942383e89f52b14b186" translate="yes" xml:space="preserve">
          <source>However, in order for false aliasing to occur, there must be a large enough stride between the datasets. This is why you don't see this in region 3.</source>
          <target state="translated">しかし、偽のエイリアシングが発生するためには、データセット間に十分に大きなストライドがなければなりません。これがリージョン3で見られない理由です。</target>
        </trans-unit>
        <trans-unit id="f3b9fd0727ad4b649df8f9eab11b90ef6e577209" translate="yes" xml:space="preserve">
          <source>However; it is not to say that these new questions are not of importance because they themselves are and they do play a role after all. They do impact the procedures and the overall performance and that is evident with the various graphs and assessments from many who have given their answer(s) and or comment(s). If you pay attention to the analogy of the &lt;code&gt;Boss&lt;/code&gt; and the two workers &lt;code&gt;A&lt;/code&gt; &amp;amp; &lt;code&gt;B&lt;/code&gt; who had to go and retrieve packages from &lt;code&gt;C&lt;/code&gt; &amp;amp; &lt;code&gt;D&lt;/code&gt; respectively and considering the mathematical notations of the two algorithms in question you can see that without even the involvement of the computer &lt;code&gt;Case 2&lt;/code&gt; is approximately 60% faster than &lt;code&gt;Case 1&lt;/code&gt; and when you look at the graphs and charts after these algorithms have been applied to source code, compiled and optimized and executed through the OS to perform operations on the given hardware you even see a little more degradation between the differences in these algorithms.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;しかしながら;これらの新しい質問は、それ自体が重要であり、結局のところ役割を果たすので、重要ではないと言っているのではありません。これらは手順と全体的なパフォーマンスに影響を与えます。これは、回答やコメントを提供した多くの人からのさまざまなグラフや評価から明らかです。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Boss&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それぞれ&lt;/font&gt; &lt;code&gt;C&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;＆&lt;/font&gt; &lt;code&gt;D&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;からパッケージを取得および取得する必要があっ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;た2人の労働者&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;＆&lt;/font&gt;&lt;/font&gt; &lt;code&gt;B&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の類比に注意を払い&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、問題の2つのアルゴリズムの数学的表記法を検討すると、コンピュータ&lt;/font&gt; &lt;code&gt;Case 2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、&lt;/font&gt; &lt;code&gt;Case 1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;より約60％高速です。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; これらのアルゴリズムがソースコードに適用され、コンパイルおよび最適化され、OSを介して所定のハードウェアで操作を実行した後、グラフとチャートを見ると、これらのアルゴリズムの違いが少し悪化していることがわかります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a7a60ea46f57285511450482a75f3927deb922e3" translate="yes" xml:space="preserve">
          <source>I don't know if poor benchmark code is to blame, or what, but the two methods are within 10% of each other on my machine using the following code, and one loop is usually just slightly faster than two - as you'd expect.</source>
          <target state="translated">ベンチマークコードの貧弱さが原因なのか何なのかはわかりませんが、私のマシンでは以下のコードを使って2つのメソッドは互いに10%以内に収まっています。</target>
        </trans-unit>
        <trans-unit id="00589175b0e2daeb748e811866d66c98117bcd29" translate="yes" xml:space="preserve">
          <source>I played around with various schemes, such as putting the assignment of &lt;code&gt;b[j]&lt;/code&gt;, &lt;code&gt;d[j]&lt;/code&gt; to &lt;code&gt;InitToZero[j]&lt;/code&gt; inside the loops, and also with using &lt;code&gt;+= b[j] = 1&lt;/code&gt; and &lt;code&gt;+= d[j] = 1&lt;/code&gt;, and I got fairly consistent results.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &lt;code&gt;InitToZero[j]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;へ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の&lt;/font&gt;&lt;/font&gt; &lt;code&gt;b[j]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;d[j]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の割り当てを&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ループ内に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配置するなどのさまざまなスキーム&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;試し&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;たり、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;+= b[j] = 1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;および&lt;/font&gt;&lt;/font&gt; &lt;code&gt;+= d[j] = 1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、かなり一貫した結果が得られました。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="817cfd78e867bee0df782d3f8d5e3e892f050739" translate="yes" xml:space="preserve">
          <source>I run Visual&amp;nbsp;Studio&amp;nbsp;2015 on an E5-1620 3.5&amp;nbsp;GHz processor with 16&amp;nbsp;GB RAM.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;16 GBのRAMを搭載したE5-1620 3.5 GHzプロセッサでVisual Studio 2015を実行しています。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="00808f1a2f2eb9b821cd5d0d2373ff5c65a160b7" translate="yes" xml:space="preserve">
          <source>I suspect you are beginning to see where I am going.</source>
          <target state="translated">私が何をしようとしているのか見え始めているのではないかと疑っています。</target>
        </trans-unit>
        <trans-unit id="3bc087c8089b4797e291481227838ac53530b7b7" translate="yes" xml:space="preserve">
          <source>I will now begin to explain how all of this works below.</source>
          <target state="translated">では、以下にこれらの全ての仕組みを説明していきたいと思います。</target>
        </trans-unit>
        <trans-unit id="99ed91ab9852dd4c4c00c7c70971a0fa0add2aea" translate="yes" xml:space="preserve">
          <source>I'm not sure exactly what's going on here... Alignment could still play an effect as Agner Fog mentions &lt;a href=&quot;http://www.agner.org/optimize/blog/read.php?i=142&quot;&gt;cache bank conflicts&lt;/a&gt;. (That link is about Sandy Bridge, but the idea should still be applicable to Core 2.)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここで何が起こっているのか正確にはわかりません... Agner Fogが&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.agner.org/optimize/blog/read.php?i=142&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;キャッシュバンクの競合&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;について言及しているため、アライメントは依然として効果を発揮する可能性があります&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（このリンクはSandy Bridgeに関するものですが、このアイデアはCore 2にも適用できるはずです。）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e87dc3e0b3d9d315844cac4303a6acbe9bf72c81" translate="yes" xml:space="preserve">
          <source>I'm not sure why it was decided that MFLOPS was a relevant metric. I though the idea was to focus on memory accesses, so I tried to minimize the amount of floating point computation time. I left in the &lt;code&gt;+=&lt;/code&gt;, but I am not sure why.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MFLOPSが適切な測定基準であると決定された理由がわかりません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;考えはメモリアクセスに集中することだったので、浮動小数点の計算時間を最小限にしようとしました。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;+=&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ままにしましたが、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;理由はわかりません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7810945b5da00839bd6f4244b4ecc9f6be09aa4c" translate="yes" xml:space="preserve">
          <source>If I've guessed correctly on how you are allocating your arrays, they &lt;strong&gt;&lt;em&gt;are likely to be aligned to the page line&lt;/em&gt;&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列をどのように割り当てるかについて私が正しく推測した場合、それら&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はページ行に揃えられる可能性があります&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6592d47a260c0445aa4f71f91675b748c2da8bb8" translate="yes" xml:space="preserve">
          <source>If you noticed &lt;code&gt;F2()&lt;/code&gt; only exists in &lt;code&gt;Sum&lt;/code&gt; where both &lt;code&gt;Sum1&lt;/code&gt; and &lt;code&gt;Sum2&lt;/code&gt; only contains &lt;code&gt;F1()&lt;/code&gt;. This will also be evident later on as well when we begin to conclude that there is sort of an optimization happening from the second algorithm.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;F2()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Sum&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;のみ存在し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Sum1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Sum2&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;両方&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に&lt;/font&gt;&lt;/font&gt; &lt;code&gt;F1()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;のみが含まれている&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ことに気付いた場合&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。これは、2番目のアルゴリズムから発生する最適化のようなものがあると結論付け始めたときにも明らかになります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="29e5b3147124613363d4d8415c0344079da0b91e" translate="yes" xml:space="preserve">
          <source>Imagine you are working on a machine where &lt;code&gt;n&lt;/code&gt; was just the right value for it only to be possible to hold two of your arrays in memory at one time, but the total memory available, via disk caching, was still sufficient to hold all four.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;マシンで作業しているときに、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;n&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が2つのアレイを一度にメモリに保持できるだけの適切な値であったとしても、ディスクキャッシュを介して利用可能なメモリの合計が4つすべてを保持するにはまだ十分であると&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;想像してください&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6c3438355ba619bc8749166614f228c594f1da22" translate="yes" xml:space="preserve">
          <source>In both cases we have 4 functions to work with and 2 function calls with 2 operations being done on each function call. So we will set these up as functions and function calls to be &lt;code&gt;F1()&lt;/code&gt;, &lt;code&gt;F2()&lt;/code&gt;, &lt;code&gt;f(a)&lt;/code&gt;, &lt;code&gt;f(b)&lt;/code&gt;, &lt;code&gt;f(c)&lt;/code&gt; and &lt;code&gt;f(d)&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;どちらの場合も、処理する4つの関数と2つの関数呼び出しがあり、各関数呼び出しで2つの操作が実行されます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、これらを関数および関数呼び出しとして&lt;/font&gt;&lt;/font&gt; &lt;code&gt;F1()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;F2()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;f(a)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;f(b)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;f(c)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;および&lt;/font&gt;&lt;/font&gt; &lt;code&gt;f(d)&lt;/code&gt; になるように設定し&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dc2ed913dd196a5e776a8b6d35e3db01e80c5fbd" translate="yes" xml:space="preserve">
          <source>In this situation it is the structure of the process of the work being done and it does go to show that &lt;strong&gt;Case 2&lt;/strong&gt; is more efficient from both that partial optimization of having a similar function declaration and definition where it is only the variables that differ by name. And we also see that the total distance traveled in &lt;strong&gt;Case 1&lt;/strong&gt; is much farther than it is in &lt;strong&gt;Case 2&lt;/strong&gt; and we can consider this distance traveled our &lt;em&gt;Time Factor&lt;/em&gt; between the two algorithms. &lt;strong&gt;Case 1&lt;/strong&gt; has considerable more work to do than &lt;strong&gt;Case 2&lt;/strong&gt; does. This was also seen in the evidence of the &lt;code&gt;ASM&lt;/code&gt; that was shown between both cases. Even with what was already said about these cases, it also doesn't account for the fact that in &lt;strong&gt;Case 1&lt;/strong&gt; the boss will have to wait for both &lt;code&gt;A&lt;/code&gt; &amp;amp; &lt;code&gt;C&lt;/code&gt; to get back before he can go back to &lt;code&gt;A&lt;/code&gt; again on the next iteration and it also doesn't account for the fact that if &lt;code&gt;A&lt;/code&gt; or &lt;code&gt;B&lt;/code&gt; is taking an extremely long time then both the &lt;code&gt;Boss&lt;/code&gt; and the other worker(s) are also waiting at an idle. In &lt;strong&gt;Case 2&lt;/strong&gt; the only one being idle is the &lt;code&gt;Boss&lt;/code&gt; until the worker gets back. So even this has an impact on the algorithm.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この状況では、それは行われている作業のプロセスの構造であり、&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ケース2&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、名前が異なる変数のみである同様の関数宣言と定義の部分的な最適化の両方からより効率的で&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あることを示して&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;います。また、&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ケース1で&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;移動した合計距離は&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ケース2&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;で&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;移動した距離&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;よりもはるかに遠く&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、2つのアルゴリズム間で&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;時間&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;距離を移動した距離と考えることができ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ケース1&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;には、&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ケース2&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;よりもかなり多くの作業が必要です&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。これは&lt;/font&gt; &lt;code&gt;ASM&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;証拠にも見られました&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それは両方のケースの間に示されました。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これらのケースについてすでに述べたことがあったとしても、&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ケース1&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;では、ボスが&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;次のイテレーションで再び&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;に戻る前に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;C&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;両方&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が戻るの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を待たなければならない&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;という事実も考慮していません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;また、&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;または&lt;/font&gt; &lt;code&gt;B&lt;/code&gt; に&lt;font style=&quot;vertical-align: inherit;&quot;&gt;非常に長い時間がかかって&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;いる場合&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt; &lt;code&gt;Boss&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;と他のワーカーもアイドル状態で待機し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ているという事実は考慮されていません&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;で&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ケース2&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;つのみであることのアイドルです&lt;/font&gt; &lt;code&gt;Boss&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;労働者が戻って取得するまで。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、これもアルゴリズムに影響を与えます。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0a80769f1c0a8b8d244565169e5bab5c0615b3ee" translate="yes" xml:space="preserve">
          <source>It is already apparent that many have already done this by looking at the heap allocations, bench mark tests, looking at RAM, Cache and Page Files. Looking at specific data points and specific iteration indexes was also included and the various conversations about this specific problem has many people starting to question other related things about it. So how do we begin to look at this problem by using mathematical algorithms and applying an analogy to it? We start off by making a couple of assertions! Then we build out our algorithm from there.</source>
          <target state="translated">ヒープの割り当てを見たり、ベンチマークテストをしたり、RAMやキャッシュ、ページファイルを見たりすることで、すでに多くの人がこれを行っていることが明らかになっています。特定のデータポイントや特定の反復インデックスを見ることも含まれており、この特定の問題に関する様々な会話の中で、多くの人がこの問題に関連する他のことに疑問を持ち始めています。では、どのようにして数学的アルゴリズムを使用し、アナロジーを適用してこの問題を見始めるのでしょうか?まず、いくつかの主張をすることから始めます。そして、そこからアルゴリズムを構築していきます。</target>
        </trans-unit>
        <trans-unit id="a8fc6816b3d2ad8d20c28b136a6c91005b108c66" translate="yes" xml:space="preserve">
          <source>It is the only point, where one-loop (namely with continuous allocation) beats the two-loop version. (This made Mysticial's answer possible, at all.)</source>
          <target state="translated">1ループ(すなわち連続割付)が2ループ版に勝るのはここだけです。(これでMysticialの回答は全く可能になりました)</target>
        </trans-unit>
        <trans-unit id="95d30c52570fa07e0e4cf2e00d425ec2c718c6fa" translate="yes" xml:space="preserve">
          <source>It may be old C++ and optimizations. On my computer I obtained almost the same speed:</source>
          <target state="translated">それは古いC++と最適化かもしれません。私のコンピュータでは、私はほぼ同じ速度を得た。</target>
        </trans-unit>
        <trans-unit id="fd3c6fcb78898a4d9ab59044ecc39ae0efeecae2" translate="yes" xml:space="preserve">
          <source>It might also be interesting to point out the differences between CPU/cache architectures, by providing a similar graph for these CPUs.</source>
          <target state="translated">また、CPUcache アーキテクチャ間の違いを指摘するために、これらの CPU について同様のグラフを提供するのも面白いかもしれません。</target>
        </trans-unit>
        <trans-unit id="5f7fc9c2d2d9a467270b23261b4cc69da5f9ed02" translate="yes" xml:space="preserve">
          <source>It possesses the greatest discrepancy between the one and two loop'ed version (almost a factor of three)</source>
          <target state="translated">1ループ版と2ループ版の最大の不一致(ほぼ3分の1)を持っている</target>
        </trans-unit>
        <trans-unit id="59d7c3084de99bdf974adebf4d8683cc639f6dc2" translate="yes" xml:space="preserve">
          <source>It's because the CPU doesn't have so many cache misses (where it has to wait for the array data to come from the RAM chips). It would be interesting for you to adjust the size of the arrays continually so that you exceed the sizes of the &lt;a href=&quot;http://en.wikipedia.org/wiki/CPU_cache#Multi-level_caches&quot;&gt;level 1 cache&lt;/a&gt; (L1), and then the &lt;a href=&quot;http://en.wikipedia.org/wiki/CPU_cache#Multi-level_caches&quot;&gt;level 2 cache&lt;/a&gt; (L2), of your CPU and plot the time taken for your code to execute against the sizes of the arrays. The graph shouldn't be a straight line like you'd expect.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは、CPUにそれほど多くのキャッシュミスがないためです（RAMチップからアレイデータが送信されるのを待つ必要があります）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列のサイズを継続的に調整して&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、CPU &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/CPU_cache#Multi-level_caches&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;レベル1キャッシュ&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（L1）、次に&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/CPU_cache#Multi-level_caches&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;レベル2キャッシュ&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（L2）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;のサイズを超えるように&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;し、コードにかかる時間をプロット&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;することは興味深いでしょう&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列のサイズに対して実行します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;グラフは予想したような直線であってはなりません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e6e48b4df68ffacb1c2b954a22ff59182a5abdcc" translate="yes" xml:space="preserve">
          <source>It's not because of a different code, but because of caching: RAM is slower than the CPU registers and a cache memory is inside the CPU to avoid to write the RAM every time a variable is changing. But the cache is not big as the RAM is, hence, it maps only a fraction of it.</source>
          <target state="translated">これはコードが違うからではなく、キャッシュのせいです:RAMはCPUのレジスタよりも遅く、変数が変わるたびにRAMに書き込むのを避けるためにCPUの内部にキャッシュメモリがあります。しかし、キャッシュはRAMほど大きくないので、それゆえに、それはそれのほんの一部をマッピングします。</target>
        </trans-unit>
        <trans-unit id="4f98a0ef7e9ea5be7322aaa75bdddab7edfda7fc" translate="yes" xml:space="preserve">
          <source>Looking at it from this kind of an approach without involving how the Hardware, OS and Compiler(s) works together to do heap allocations that involves working with RAM, Cache, Page Files, etc.; the mathematics that are at the foundation of these algorithms shows us which of these two is the better solution. We can use an analogy where a &lt;code&gt;Boss&lt;/code&gt; or &lt;code&gt;Summation&lt;/code&gt; that will represent a &lt;code&gt;For Loop&lt;/code&gt; that has to travel between workers &lt;code&gt;A&lt;/code&gt; &amp;amp; &lt;code&gt;B&lt;/code&gt; we can easily see that &lt;strong&gt;Case 2&lt;/strong&gt; is at least &lt;strong&gt;&lt;sup&gt;1&lt;/sup&gt;/&lt;sub&gt;2&lt;/sub&gt;&lt;/strong&gt; as fast if not a little more than &lt;strong&gt;Case 1&lt;/strong&gt; due to the difference in the distance that is needed to travel and the time taken between the workers. This math lines up almost virtually and perfectly with both the Bench Mark Times as well as the amount of differences in Assembly Instructions.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;RAM、キャッシュ、ページファイルなどの操作を含むヒープ割り当てを行うためにハードウェア、OS、およびコンパイラがどのように連携するかを伴わずに、この種のアプローチからそれを見てください。これらのアルゴリズムの基礎となる数学は、これらの2つのうちどちらが優れたソリューションであるかを示しています。私たちは、類推使用することができます&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Boss&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;や&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Summation&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;表現する&lt;/font&gt;&lt;/font&gt; &lt;code&gt;For Loop&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の労働者の間で移動しなければならない&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;＆&lt;/font&gt;&lt;/font&gt; &lt;code&gt;B&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、我々は簡単にすることを見ることができる&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ケース2は&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、少なくともある&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;1&lt;/font&gt;&lt;/font&gt;&lt;/sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; / &lt;/font&gt;&lt;/font&gt;&lt;sub&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2&lt;/font&gt;&lt;/font&gt;&lt;/sub&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;より少し多くない場合は、高速として&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ケース1&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;移動に必要な距離と労働者間の時間が異なるためです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この数学は、ベンチマークタイムと組み立て説明書の違いの両方の両方とほぼ事実上完全に一致しています。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="88b8ab7191d7a7de92e0270b1e10017d27a3a95d" translate="yes" xml:space="preserve">
          <source>Note that my initial question was at &lt;strong&gt;n = 100.000&lt;/strong&gt;. This point (by accident) exhibits special behavior:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最初の質問は&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;n = 100.000で&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あったことに注意してください&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このポイント（偶然）は特別な動作を示します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b299d49402d695f6cbcf85018ddd57470d6420e6" translate="yes" xml:space="preserve">
          <source>Now if the &quot;Data&quot; set is fairly small it may not seem all that bad of a difference at first but since &lt;code&gt;Case 1&lt;/code&gt; is about &lt;code&gt;60 - 70%&lt;/code&gt; slower than &lt;code&gt;Case 2&lt;/code&gt; we can look at the growth of this function as being in terms of the differences in time executions:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここで、「データ」セットがかなり小さい場合、最初はそれほど大きな違いはないように思えるかもしれませんが、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Case 1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt; &lt;code&gt;Case 2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;よりも&lt;/font&gt;&lt;/font&gt; &lt;code&gt;60 - 70%&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;遅いため&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、この関数の成長は時間実行の違い：&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="eca24602b960c6a890ccd38ee6f72f25af9a65d1" translate="yes" xml:space="preserve">
          <source>OK, the right answer definitely has to do something with the CPU cache. But to use the cache argument can be quite difficult, especially without data.</source>
          <target state="translated">OK、正解は間違いなくCPUキャッシュに関係しています。しかし、キャッシュの引数を使用することは、特にデータがない場合、非常に困難である可能性があります。</target>
        </trans-unit>
        <trans-unit id="580a776c6b642fccec58ff95f40d16a839dd873b" translate="yes" xml:space="preserve">
          <source>Observations:</source>
          <target state="translated">Observations:</target>
        </trans-unit>
        <trans-unit id="d4cd934a3267228345d82320582325609db4ac86" translate="yes" xml:space="preserve">
          <source>One loop: 1.577 ms</source>
          <target state="translated">1ループ。1.577ms</target>
        </trans-unit>
        <trans-unit id="067285dbce4f2ae23a4e8256bf22a68036bb1d40" translate="yes" xml:space="preserve">
          <source>PPS: Here is the full code. It uses &lt;a href=&quot;https://www.threadingbuildingblocks.org/&quot;&gt;TBB&lt;/a&gt;&lt;code&gt;Tick_Count&lt;/code&gt; for higher resolution timing, which can be disabled by not defining the &lt;code&gt;TBB_TIMING&lt;/code&gt; Macro:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;PPS：これが完全なコードです。&lt;/font&gt; &lt;code&gt;TBB_TIMING&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;マクロを&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;定義しないことで無効にできる、より高い解像度のタイミングのために&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://www.threadingbuildingblocks.org/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;TBB &lt;/font&gt;&lt;/font&gt;&lt;/a&gt; &lt;code&gt;Tick_Count&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用します&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="150892f3a6e1c9444336bf5fbf39ad8c8df7f488" translate="yes" xml:space="preserve">
          <source>PS: I am not sure, if this helps:</source>
          <target state="translated">PS:これが役に立つかどうかはわかりません。</target>
        </trans-unit>
        <trans-unit id="37563549c2b48fdb7b187f4ea1cf03ceecec4985" translate="yes" xml:space="preserve">
          <source>PS: I changed the loops to count down to zero, and the combined method was marginally faster. Scratching my head. Note the new array sizing and loop counts.</source>
          <target state="translated">追記:ループをゼロまでカウントダウンするように変更してみたところ、組み合わせた方法の方がわずかに速くなりました。頭を掻いています。新しい配列のサイズとループのカウントに注目してください。</target>
        </trans-unit>
        <trans-unit id="929017ada05ac8077c3ebc10b0f695a210b9db02" translate="yes" xml:space="preserve">
          <source>Proposal</source>
          <target state="translated">Proposal</target>
        </trans-unit>
        <trans-unit id="5f6bd53d4ce24c4aa4a3ee3123d8ab5b9cf113bb" translate="yes" xml:space="preserve">
          <source>Repeat for &lt;code&gt;c&lt;/code&gt; and &lt;code&gt;d&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;c&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;d&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;について繰り返し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="52a60be214c602639707f5280f5a30ec124a81d3" translate="yes" xml:space="preserve">
          <source>Say &lt;code&gt;n = 2&lt;/code&gt; and we are working with bytes. In my scenario we thus have &lt;strong&gt;just 4 bytes of RAM&lt;/strong&gt; and the rest of our memory is significantly slower (say 100 times longer access).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;セイ&lt;/font&gt;&lt;/font&gt; &lt;code&gt;n = 2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、私たちはバイトで作業しています。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、私のシナリオでは&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、RAMが4バイト&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;しか&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ない&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ため&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、残りのメモリは大幅に遅くなります（アクセスが100倍になるなど）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b768a5099eeede624e8fb1ccf0c00e1ae7bd2c7f" translate="yes" xml:space="preserve">
          <source>Since we are working with an 8 byte pointer and dealing with Heap allocation let's consider this problem here. Let us say that the &lt;code&gt;Boss&lt;/code&gt; is 100 feet from &lt;code&gt;A&lt;/code&gt; and that &lt;code&gt;A&lt;/code&gt; is 500 feet from &lt;code&gt;C&lt;/code&gt;. We don't need to worry about how far the &lt;code&gt;Boss&lt;/code&gt; is initially from &lt;code&gt;C&lt;/code&gt; because of the order of executions. In both cases the &lt;code&gt;Boss&lt;/code&gt; initially travels from &lt;code&gt;A&lt;/code&gt; first then to &lt;code&gt;B&lt;/code&gt;. This analogy isn't to say that this distance is exact; it is just a use test case scenario to show the workings of the algorithms. In many cases when doing heap allocations and working with the cache and page files, these distances between address locations may not vary that much in differences or they can very significantly depending on the nature of the data types and the array sizes.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここでは8バイトのポインターを使用してヒープ割り当てを処理しているので、ここでこの問題を考えてみましょう。私たちがいることを言ってみましょう&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Boss&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;から100フィートである&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;とすることを&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; は&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;から500フィートである&lt;/font&gt;&lt;/font&gt; &lt;code&gt;C&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;実行の順序のために、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Boss&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が最初に&lt;/font&gt;&lt;/font&gt; &lt;code&gt;C&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;から&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;どれだけ離れているかについて心配する必要はありません&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。どちらの場合も、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Boss&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は最初に&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;から&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最初に&lt;/font&gt;&lt;/font&gt; &lt;code&gt;B&lt;/code&gt; に移動します&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このアナロジーは、この距離が正確であると言っているのではありません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは、アルゴリズムの動作を示すための使用テストケースシナリオにすぎません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ヒープの割り当てを行い、キャッシュファイルとページファイルを操作する場合、多くの場合、アドレスの場所間のこれらの距離は、それほど大きな違いはないか、データ型と配列サイズの性質に応じて非常に大きく変化します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b403afffa673d5c9286b0e779fa6f2102008bfda" translate="yes" xml:space="preserve">
          <source>So by these numbers it would almost look as if Algorithm One should be 99% slower than Algorithm Two; however, this is only the &lt;code&gt;The Boss's&lt;/code&gt; part or responsibility of the algorithms and it doesn't account for the actual workers &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt;, &lt;code&gt;C&lt;/code&gt;, &amp;amp; &lt;code&gt;D&lt;/code&gt; and what they have to do on each and every iteration of the Loop. So the bosses job only accounts for about 15 - 40% of the total work being done. So the bulk of the work which is done through the workers has a slight bigger impact towards keeping the ratio of the speed rate differences to about 50-70%</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、これらの数値では、アルゴリズム1はアルゴリズム2よりも99％遅いかのように見えます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ただし、これは&lt;/font&gt;&lt;/font&gt; &lt;code&gt;The Boss's&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;役割またはアルゴリズムの責任に過ぎず、実際のワーカー&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;B&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;C&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、および&lt;/font&gt;&lt;/font&gt; &lt;code&gt;D&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と、ループのすべての反復で何をしなければならないか&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は考慮されていません&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、ボスの仕事は、行われている仕事全体の約15〜40％しか占めていません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そのため、ワーカーを介して行われる作業の大部分は、速度率の差の比率を約50〜70％に維持することに少し大きな影響を与えます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d0c27d22f565b7d4dff65f8ce28522fe98c5a597" translate="yes" xml:space="preserve">
          <source>So trying to have the &lt;code&gt;Boss&lt;/code&gt; focusing on doing two similar things at once and juggling them back and forth instead of focusing on similar consecutive tasks  is going to make him quite angry by the end of the day because he had to travel and work twice as much. Therefor do not lose the scope of the situation by letting your boss getting into an interpolated bottleneck because the boss's spouse and children wouldn't appreciate it.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ですから、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Boss&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;同じような2つのことを同時に行うことに集中してもらい、同じような連続したタスクに集中するのではなく、前後にジャグリングしようとすると、1日の終わりまでに2倍の旅行と仕事をしなければならなかったので、彼はかなり怒ります。 。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そのため、上司の配偶者や子供がそれを高く評価することはないため、上司を補間されたボトルネックに陥らせて状況の範囲を失わないでください。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c92f2896cb97a5cd76721e9be1ae06c663d9ea6d" translate="yes" xml:space="preserve">
          <source>Suppose &lt;code&gt;a1&lt;/code&gt;, &lt;code&gt;b1&lt;/code&gt;, &lt;code&gt;c1&lt;/code&gt;, and &lt;code&gt;d1&lt;/code&gt; point to heap memory and my numerical code has the following core loop.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;仮定する&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;b1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;c1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、及び&lt;/font&gt;&lt;/font&gt; &lt;code&gt;d1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ヒープメモリをポイントし、私の数値コードは、以下のコアループを有しています。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ae49864322db83eb4df4027d1cc46e331bab97d8" translate="yes" xml:space="preserve">
          <source>That's why I combined his test (using a continuous vs. separate allocation) and @James' Answer's advice.</source>
          <target state="translated">だからこそ、彼のテスト(連続対個別の割り当てを使う)と、@Jamesさんのアンサーのアドバイスを組み合わせてみました。</target>
        </trans-unit>
        <trans-unit id="d13556ea98fb233bf53b98bb4c31b76c5382d7df" translate="yes" xml:space="preserve">
          <source>The OP's code:</source>
          <target state="translated">OPのコード。</target>
        </trans-unit>
        <trans-unit id="49a4378a00b62449fce4898fcf15f09e54099521" translate="yes" xml:space="preserve">
          <source>The first code modifies distant memory addresses alternating them at each loop, thus requiring continuously to invalidate the cache.</source>
          <target state="translated">最初のコードは、遠いメモリアドレスをループごとに交互に変更するため、キャッシュを無効にするために継続的に必要となります。</target>
        </trans-unit>
        <trans-unit id="5ef3f200dc1df02296aa0d9d57d5f615abafce03" translate="yes" xml:space="preserve">
          <source>The first loop alternates writing in each variable. The second and third ones only make small jumps of element size.</source>
          <target state="translated">1つ目のループは、各変数に交互に書き込んでいます。2つ目と3つ目は要素サイズの小さなジャンプをするだけです。</target>
        </trans-unit>
        <trans-unit id="53b362c1ef639785451d5a3c807cb56df98f4cb6" translate="yes" xml:space="preserve">
          <source>The graphs below shows, that most of the answers and especially the majority of comments to the question and answers can be considered completely wrong or true depending on the exact scenario and parameters used.</source>
          <target state="translated">下のグラフは、ほとんどの回答と、特に質問と回答に対するコメントの大部分が、使用されている正確なシナリオとパラメータに応じて、完全に間違っているか、真であると考えられることを示しています。</target>
        </trans-unit>
        <trans-unit id="11061dc8aadf1e63250f11fc975aecbd7a854095" translate="yes" xml:space="preserve">
          <source>The iterations through the first case &lt;code&gt;Sum&lt;/code&gt; calls &lt;code&gt;f(a)&lt;/code&gt; that will add to its self &lt;code&gt;f(b)&lt;/code&gt; then it calls &lt;code&gt;f(c)&lt;/code&gt; that will do the same but add &lt;code&gt;f(d)&lt;/code&gt; to itself for each &lt;code&gt;100000 iterations&lt;/code&gt;. In the second case we have &lt;code&gt;Sum1&lt;/code&gt; and &lt;code&gt;Sum2&lt;/code&gt; And both act the same as if they were the same function being called twice in a row.
In this case we can treat &lt;code&gt;Sum1&lt;/code&gt; and &lt;code&gt;Sum2&lt;/code&gt; as just plain old &lt;code&gt;Sum&lt;/code&gt; where &lt;code&gt;Sum&lt;/code&gt; in this case looks like this: &lt;code&gt;Sum n=1 : [1,100000] { f(a) = f(a) + f(b); }&lt;/code&gt; and now this looks like an optimization where we can just consider it to be the same function.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最初のケースでの反復は、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Sum&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が&lt;/font&gt;&lt;/font&gt; &lt;code&gt;f(a)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;呼び出し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;てそれ自体を&lt;/font&gt;&lt;/font&gt; &lt;code&gt;f(b)&lt;/code&gt; に&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;追加し、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;次に&lt;/font&gt;&lt;/font&gt; &lt;code&gt;f(c)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;呼び出し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;て同じことを行いますが、&lt;/font&gt; &lt;code&gt;100000 iterations&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;ごとに&lt;/font&gt;&lt;/font&gt; &lt;code&gt;f(d)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;をそれ自体に追加し&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2番目のケースでは、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Sum1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Sum2&lt;/code&gt; があり&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、どちらも同じ関数が2回続けて呼び出されたかのように動作します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この場合、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Sum1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Sum2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を単純な古い&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Sum&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;として&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;扱うことができます。この場合&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Sum&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は次のようになります&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Sum n=1 : [1,100000] { f(a) = f(a) + f(b); }&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; これは、同じ関数と見なすことができる最適化のように見えます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="839acec8e710ad109f431376a6eb49f7c7173d08" translate="yes" xml:space="preserve">
          <source>The performance drop in the single-loop is what we are observing. And as mentioned, this is due to the alignment which (most likely) causes &lt;strong&gt;&lt;em&gt;false aliasing&lt;/em&gt;&lt;/strong&gt; stalls in the processor load/store units.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;シングルループでのパフォーマンスの低下は、私たちが観察しているものです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そして、前述のように、これは（おそらく）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プロセッサのロード/ストアユニットで&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;偽のエイリアシング&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ストールを&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;引き起こすアライメントによるもの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="47a017a142106a11ba95f378f7d97256b0fed87e" translate="yes" xml:space="preserve">
          <source>The question turned out to be of no relevance, as the behavior severely depends on the sizes of the arrays (n) and the CPU cache. So if there is further interest, I rephrase the question:</source>
          <target state="translated">この質問は、動作が配列(n)とCPUキャッシュのサイズに大きく依存するため、関連性がないことが判明しました。そこで、もしさらなる興味があれば、質問を言い換えます。</target>
        </trans-unit>
        <trans-unit id="55e711a480f8599f3590ea8955ae90c25f96f446" translate="yes" xml:space="preserve">
          <source>The result using initialized data:</source>
          <target state="translated">初期化されたデータを使用した結果です。</target>
        </trans-unit>
        <trans-unit id="fd12f7273e3c644dfeec1cc8b110b33e50ab5389" translate="yes" xml:space="preserve">
          <source>The result using uninitialized data (this is what Mysticial tested):</source>
          <target state="translated">初期化されていないデータを使った結果(Mysticialがテストしたのはこれです)。</target>
        </trans-unit>
        <trans-unit id="ec79e2db350f70819922aeda7c7c4a134df70af6" translate="yes" xml:space="preserve">
          <source>The second code don't alternate: it just flow on adjacent addresses twice. This makes all the job to be completed in the cache, invalidating it only after the second loop starts.</source>
          <target state="translated">2 番目のコードは交互ではなく、隣接するアドレスに 2 回だけ流れます。これにより、すべてのジョブがキャッシュで完了し、2回目のループが始まった後にのみ無効化されます。</target>
        </trans-unit>
        <trans-unit id="962b2d1921173e1b25de62eb8401f26848105752" translate="yes" xml:space="preserve">
          <source>The second loop involves a lot less cache activity, so it's easier for the processor to keep up with the memory demands.</source>
          <target state="translated">2 番目のループではキャッシュの活動が少なくなるため、プロセッサがメモリ要求に追いつくのが容易になります。</target>
        </trans-unit>
        <trans-unit id="b406d7fb1215ac51706584a1368661dc6d6bb19f" translate="yes" xml:space="preserve">
          <source>There are many answers, that led to a lot of discussion, but let's face it: Cache issues can be very complex and are not one dimensional. They depend heavily on the size of the data, so my question was unfair: It turned out to be at a very interesting point in the cache graph.</source>
          <target state="translated">多くの答えがあり、それが多くの議論を引き起こしましたが、直面してみましょう。キャッシュの問題は非常に複雑で、一次元ではありません。キャッシュ問題はデータのサイズに大きく依存するので、私の質問は不公平でした:キャッシュグラフの非常に興味深いポイントにあることがわかりました。</target>
        </trans-unit>
        <trans-unit id="1dde209c4b83d4186745de8cde5c487345b16c11" translate="yes" xml:space="preserve">
          <source>There seems to be a little confusion/misunderstanding here so I will try to elaborate a little using an example.</source>
          <target state="translated">ここでは少し誤解が生じているようなので、例を挙げて少し詳しく説明してみます。</target>
        </trans-unit>
        <trans-unit id="13059574a86e8647f17f49a9a0b752694791c080" translate="yes" xml:space="preserve">
          <source>Think of the &lt;code&gt;For Loops&lt;/code&gt; as being the &lt;code&gt;Summations&lt;/code&gt; that does the iterations as being a &lt;code&gt;Boss&lt;/code&gt; that is giving orders to two people &lt;code&gt;A&lt;/code&gt; &amp;amp; &lt;code&gt;B&lt;/code&gt; and that their jobs are to meat &lt;code&gt;C&lt;/code&gt; &amp;amp; &lt;code&gt;D&lt;/code&gt; respectively and to pick up some package from them and return it. In the analogy here the for loop or summation iterations and condition checks themselves doesn't actually represent the &lt;code&gt;Boss&lt;/code&gt;. What actually represents the &lt;code&gt;Boss&lt;/code&gt; here is not from the actual mathematical algorithms directly, but from the actual concept of &lt;code&gt;Scope&lt;/code&gt; and &lt;code&gt;Code Block&lt;/code&gt; within a routine or sub-routine, method, function, translation unit, etc. The first algorithm has 1 scope where the 2nd algorithm has 2 consecutive scopes.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;考える&lt;/font&gt;&lt;/font&gt; &lt;code&gt;For Loops&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;として&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Summations&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;であるとして反復を行い&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Boss&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 2人に命令を与えている&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;＆&lt;/font&gt;&lt;/font&gt; &lt;code&gt;B&lt;/code&gt; を&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;し、彼らの仕事は、肉にあることを&lt;/font&gt;&lt;/font&gt; &lt;code&gt;C&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;＆&lt;/font&gt;&lt;/font&gt; &lt;code&gt;D&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はそれぞれ、それらのいくつかのパッケージをピックアップし、それを返すように。ここでの類推では、forループまたは合計の反復と条件チェック自体は実際には&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Boss&lt;/code&gt; を&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;表していません&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここで&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;実際に&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Boss&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;表すのは&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、実際の数学アルゴリズムから直接ではなく、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Scope&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt; &lt;code&gt;Code Block&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;実際の概念からです&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ルーチンまたはサブルーチン、メソッド、関数、変換単位など内。最初のアルゴリズムには1つのスコープがあり、2番目のアルゴリズムには2つの連続するスコープがあります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7d22a1fbb64d76304433f24947bf410c0f8af3df" translate="yes" xml:space="preserve">
          <source>This is a classic cache thrash scenario.</source>
          <target state="translated">古典的なキャッシュスラッシュのシナリオです。</target>
        </trans-unit>
        <trans-unit id="b8ffc8c4ef1a03c73bb9e0821c047ab1262b9819" translate="yes" xml:space="preserve">
          <source>This loop is executed 10,000 times via another outer &lt;code&gt;for&lt;/code&gt; loop. To speed it up, I changed the code to:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このループは、別の外部&lt;/font&gt;&lt;/font&gt; &lt;code&gt;for&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ループを&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;介して10,000回実行さ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;れ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;スピードアップするために、コードを次のように変更しました。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fdc4cb320e8145a3a5607c0217bc3a252c1582a3" translate="yes" xml:space="preserve">
          <source>This means that all your accesses in each loop will fall on the same cache way. However, Intel processors have had 8-way L1 cache associativity for a while. But in reality, the performance isn't completely uniform. Accessing 4-ways is still slower than say 2-ways.</source>
          <target state="translated">これは、各ループ内のすべてのアクセスが同じキャッシュウェイに落ちることを意味します。しかし、Intelプロセッサはしばらくの間、8ウェイのL1キャッシュ連想性を持っていた。しかし、実際には性能は完全に一様ではありません。4ウェイへのアクセスは、2ウェイよりもまだ遅いです。</target>
        </trans-unit>
        <trans-unit id="116c64a804cda018eff54aace684b048096784b8" translate="yes" xml:space="preserve">
          <source>This one is easy. The dataset is so small that the performance is dominated by overhead like looping and branching.</source>
          <target state="translated">これは簡単です。データセットが非常に小さいので、性能はループや分岐のようなオーバーヘッドに支配されます。</target>
        </trans-unit>
        <trans-unit id="b993a65de9f293825c5e5d9683062a32d8b141b3" translate="yes" xml:space="preserve">
          <source>Total cost = &lt;code&gt;(100 + 100 + 1 + 1) * 2 = 404&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;総コスト= &lt;/font&gt;&lt;/font&gt; &lt;code&gt;(100 + 100 + 1 + 1) * 2 = 404&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="19d3bb17d59a55f8338d5c4fce0ae33dc728b87f" translate="yes" xml:space="preserve">
          <source>Total cost = &lt;code&gt;(100 + 100 + 100 + 100) * 2 = 800&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;総コスト= &lt;/font&gt;&lt;/font&gt; &lt;code&gt;(100 + 100 + 100 + 100) * 2 = 800&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="03360fc5f946227bc07190906ff6d7139444c907" translate="yes" xml:space="preserve">
          <source>Try writing two parallel lines of 20 crosses with a pen and paper separated by 20&amp;nbsp;cm. Try once finishing one and then the other line and try another time by writting a cross in each line alternately.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;20 cm離れたペンと紙で、20の十字の2本の平行線を書いてみてください。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;片方のラインを完成させてから、もう一方のラインを完成させ、各ラインに交互に十字を書いて別の時間を試します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="53bfab4d116eca32e1091f50ff7bca7f57441a62" translate="yes" xml:space="preserve">
          <source>Two loops: 1.507 ms</source>
          <target state="translated">2つのループ 1.507 ms</target>
        </trans-unit>
        <trans-unit id="466d5a25d4be7521ae09c87f6a46e0b628a3542a" translate="yes" xml:space="preserve">
          <source>Upon further analysis of this, I believe this is (at least partially) caused by data alignment of the four pointers. This will cause some level of cache bank/way conflicts.</source>
          <target state="translated">これをさらに分析すると、これは(少なくとも部分的には)4つのポインターのデータアラインメントに起因すると考えられます。これにより、ある程度のレベルのキャッシュバンクウェイの競合が発生します。</target>
        </trans-unit>
        <trans-unit id="cfeab75af6e84b33c6a6527778a734b3d9e7b1ed" translate="yes" xml:space="preserve">
          <source>We can easily see that 600 is far less than 10 million. Now this isn't exact, because we don't know the actual difference in distance between which address of RAM or from which Cache or Page File each call on each iteration is going to be due to many other unseen variables, but this is just an assessment of the situation to be aware of and trying to look at it from the worst case scenario.</source>
          <target state="translated">600 が 1,000 万よりもはるかに少ないことが容易にわかります。これは正確ではありません。RAMのどのアドレス間の距離の実際の違いや、どのキャッシュやページファイルからの呼び出しが、他の多くの目に見えない変数のために各反復で行われるかはわかりませんが、これは単に状況を認識し、最悪の場合のシナリオからそれを見ようとしている評価です。</target>
        </trans-unit>
        <trans-unit id="fc174d905f4eb44c872c08d03546c6a40948ee8c" translate="yes" xml:space="preserve">
          <source>We do not know how long it will take for each case unless if we set a counter and run a bench mark test. However the bench marks were already included from the original question and from some of the answers and comments as well and we can see a significant difference between the two and this is the whole reasoning of this question to this problem and for the answering of it to begin with.</source>
          <target state="translated">それぞれのケースでどのくらいの時間がかかるかは、カウンターを設置してベンチマークテストをしてみないとわかりません。しかし、ベンチマークは、元の質問と同様にいくつかの回答とコメントからすでに含まれており、我々は2つの間に大きな違いを見ることができ、これは、この問題に対するこの質問の全体の理由と、それを回答するための最初の問題です。</target>
        </trans-unit>
        <trans-unit id="0e08bbd8348ea9fc71c47393bb70640f1c01606b" translate="yes" xml:space="preserve">
          <source>We know is that his loop will run 100,000 times. We also know that &lt;code&gt;a1&lt;/code&gt;, &lt;code&gt;b1&lt;/code&gt;, &lt;code&gt;c1&lt;/code&gt; &amp;amp; &lt;code&gt;d1&lt;/code&gt; are pointers on a 64-bit architecture. Within C++ on a 32-bit machine all pointers are 4 bytes and on a 64-bit machine they are 8 bytes in size since pointers are of a fixed length. We know that we have 32 bytes in which to allocate for in both cases. The only difference is we are allocating 32 bytes or 2 sets of 2-8bytes on each iteration where in the 2nd case we are allocating 16 bytes for each iteration for both of the independent loops. So both loops still equals 32 bytes in total allocations. With this information let's go ahead and show the general math, algorithm and analogy of it. We do know the amount of times that the same set or group of operations will have to be performed in both cases. We do know the amount of memory that needs to be allocated in both cases. We can asses that the overall work load of the allocations between both cases will be approximately the same.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私たちは彼のループが100,000回実行されることを知っています。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;また、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;b1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;c1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;＆&lt;/font&gt;&lt;/font&gt; &lt;code&gt;d1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;64ビットアーキテクチャ上のポインタです。 32ビットマシンのC ++では、ポインターは固定長であるため、すべてのポインターは4バイトであり、64ビットマシンでは8バイトです。どちらの場合も割り当てるバイト数は32バイトです。唯一の違いは、反復ごとに32バイトまたは2〜2バイトの2セットを割り当てることです。2番目のケースでは、両方の独立したループの反復ごとに16バイトを割り当てます。したがって、両方のループは合計割り当てで32バイトに等しくなります。この情報を使って、先に進み、一般的な数学、アルゴリズム、およびその類似性を示しましょう。どちらの場合も、同じ操作または操作のグループを実行する必要がある回数はわかっています。どちらの場合でも割り当てる必要があるメモリの量はわかっています。両方のケース間の割り当ての全体的な作業負荷はほぼ同じになると評価できます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6fe2e5f01c8d98ddfcee1b601d0fceb67a183e49" translate="yes" xml:space="preserve">
          <source>We will let our loop and its iterations be a Summation that starts at 1 and ends at 100000 instead of starting with 0 as in the loops for we don't need to worry about the 0 indexing scheme of memory addressing since we are just interested in the algorithm itself.</source>
          <target state="translated">ループとその反復は、ループのように0で始まるのではなく、1で始まり100000で終わるSUMMATIONにします。</target>
        </trans-unit>
        <trans-unit id="92ea6c5b9c179b6799de261eafa3d472f7094b3e" translate="yes" xml:space="preserve">
          <source>Why are elementwise additions much faster in separate loops than in a combined loop</source>
          <target state="translated">要素ごとの足し算が複合ループよりも別々のループの方がはるかに速いのはなぜですか?</target>
        </trans-unit>
        <trans-unit id="18d746b56edfc3b8c8160872d27b4b8ee0118420" translate="yes" xml:space="preserve">
          <source>Why is one loop so much slower than two loops?</source>
          <target state="translated">なぜ1つのループが2つのループよりも遅いのか?</target>
        </trans-unit>
        <trans-unit id="564f8c6e76fbd512be2e38dabdfdd61550d0c3cc" translate="yes" xml:space="preserve">
          <source>With</source>
          <target state="translated">With</target>
        </trans-unit>
        <trans-unit id="4b65d240f83b92820bd73e3c9a1ea691dbb385f6" translate="yes" xml:space="preserve">
          <source>With what we seen in the second case it almost appears as if there is optimization since both for loops have the same exact signature, but this isn't the real issue. The issue isn't the work that is being done by &lt;code&gt;f(a)&lt;/code&gt;,&lt;code&gt;f(b)&lt;/code&gt;,&lt;code&gt;f(c)&lt;/code&gt;&amp;amp;&lt;code&gt;f(d)&lt;/code&gt; in both cases and the comparison between the two it is the difference in the distance that the Summation has to travel in both cases that gives you the difference in time execution.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2番目のケースで見たものでは、両方のforループが同じ正確なシグネチャを持っているため、最適化があるかのように見えますが、これは本当の問題ではありません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;問題は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、どちらの場合も&lt;/font&gt; &lt;code&gt;f(b)&lt;/code&gt; &lt;/font&gt; &lt;code&gt;f(a)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;f（b）&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;f(c)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;＆&lt;/font&gt;&lt;/font&gt; &lt;code&gt;f(d)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;によって行われている作業ではなく、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2つの間の比較は、合計の距離の違いですどちらの場合も移動する必要があるため、実行時間に差が出ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5b289bf7d150d141a9a06f034bc238a251f98430" translate="yes" xml:space="preserve">
          <source>Within the first case on each call slip the &lt;code&gt;Boss&lt;/code&gt; goes to &lt;code&gt;A&lt;/code&gt; and gives the order and &lt;code&gt;A&lt;/code&gt; goes off to fetch &lt;code&gt;B's&lt;/code&gt; package then the &lt;code&gt;Boss&lt;/code&gt; goes to &lt;code&gt;C&lt;/code&gt; and gives the orders to do the same and receive the package from &lt;code&gt;D&lt;/code&gt; on each iteration.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;各呼び出しの最初のケース内にスリップ&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Boss&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に行く&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と秩序を与え、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; を&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;フェッチするために消灯&lt;/font&gt;&lt;/font&gt; &lt;code&gt;B's&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;後、パッケージを&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Boss&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に行く&lt;/font&gt;&lt;/font&gt; &lt;code&gt;C&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;とからパッケージを同じことを行うと、受信する命令を与え&lt;/font&gt;&lt;/font&gt; &lt;code&gt;D&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;各繰り返しで。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="39b360ce4a3ca0bb5ddbee9c9161b830580197e7" translate="yes" xml:space="preserve">
          <source>Within the second case the &lt;code&gt;Boss&lt;/code&gt; works directly with &lt;code&gt;A&lt;/code&gt; to go and fetch &lt;code&gt;B's&lt;/code&gt; package until all packages are received. Then the &lt;code&gt;Boss&lt;/code&gt; works with &lt;code&gt;C&lt;/code&gt; to do the same for getting all of &lt;code&gt;D's&lt;/code&gt; packages.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2番目のケースでは、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Boss&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;直接連携して&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、すべてのパッケージが受信されるまで&lt;/font&gt;&lt;/font&gt; &lt;code&gt;B's&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;パッケージ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を取り出し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。その後、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Boss&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;/font&gt; &lt;code&gt;C&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;連携し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;て、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;D's&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;すべて&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;パッケージ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を取得するために同じことを行い&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3110f136849c94cb9d21af5da4f6ed9ad5781ffe" translate="yes" xml:space="preserve">
          <source>You are probably not seeing disk caching in your tests but you are probably seeing the side effects of some other form of caching.</source>
          <target state="translated">おそらくテストではディスクキャッシングを見ていないでしょうが、他の形式のキャッシングの副作用を見ているのではないでしょうか。</target>
        </trans-unit>
        <trans-unit id="d64399c3ca292db5e91589fa738bc463f2006e98" translate="yes" xml:space="preserve">
          <source>cache &lt;code&gt;a[0]&lt;/code&gt; and &lt;code&gt;a[1]&lt;/code&gt; then &lt;code&gt;b[0]&lt;/code&gt; and &lt;code&gt;b[1]&lt;/code&gt; and set &lt;code&gt;a[0] = a[0] + b[0]&lt;/code&gt; in cache - there are now four bytes in cache, &lt;code&gt;a[0], a[1]&lt;/code&gt; and &lt;code&gt;b[0], b[1]&lt;/code&gt;. Cost = 100 + 100.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;キャッシュ&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a[0]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a[1]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;次に、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;b[0]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;b[1]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;とセット&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a[0] = a[0] + b[0]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;でキャッシュ-キャッシュ内の4バイト、今ある&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a[0], a[1]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;および&lt;/font&gt;&lt;/font&gt; &lt;code&gt;b[0], b[1]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コスト= 100 + 100。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="684691450b6f67d64ea5716630cb055d1cdb5528" translate="yes" xml:space="preserve">
          <source>eject &lt;code&gt;a[0], a[1], b[0], b[1]&lt;/code&gt; from cache and cache &lt;code&gt;c[0]&lt;/code&gt; and &lt;code&gt;c[1]&lt;/code&gt; then &lt;code&gt;d[0]&lt;/code&gt; and &lt;code&gt;d[1]&lt;/code&gt; and set &lt;code&gt;c[0] = c[0] + d[0]&lt;/code&gt; in cache. Cost = 100 + 100.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;a[0], a[1], b[0], b[1]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;をキャッシュから&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;取り出し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;c[0]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;c[1]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;をキャッシュしてから&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;d[0]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;d[1]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;取り出し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;c[0] = c[0] + d[0]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を設定し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;キャッシュ内の&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;c [0] + d [0]&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コスト= 100 + 100。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a45d1263f7e0797a6fe6f7b721f3312f94b14dd6" translate="yes" xml:space="preserve">
          <source>set &lt;code&gt;a[1] = a[1] + b[1]&lt;/code&gt; in cache. Cost = 1 + 1.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;セット&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a[1] = a[1] + b[1]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;でキャッシュ。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コスト= 1 + 1。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e726e4b336529f67262f81f3ff5432cad1d3985d" translate="yes" xml:space="preserve">
          <source>the other loop</source>
          <target state="translated">たほうループ</target>
        </trans-unit>
        <trans-unit id="871fc8b4792054b058d6099d151b8f4a8322450f" translate="yes" xml:space="preserve">
          <source>will page out two arrays and page in the other two &lt;strong&gt;every time around the loop&lt;/strong&gt;. This would obviously be &lt;strong&gt;much&lt;/strong&gt; slower.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ループを回るたび&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に、2つの配列をページアウトし、他の2つをページイン&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;します&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは明らかに&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はるかに&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;遅くなります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="30905af2bb584e30c36e5d7802c5f32420f342d3" translate="yes" xml:space="preserve">
          <source>would first cause &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; to be loaded into RAM and then be worked on entirely in RAM. When the second loop starts, &lt;code&gt;c&lt;/code&gt; and &lt;code&gt;d&lt;/code&gt; would then be loaded from disk into RAM and operated on.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最初に&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;b&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;をRAMにロードしてから、完全にRAMで作業します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2番目のループが始まると、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;c&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;d&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;がディスクからRAMに読み込まれ、操作されます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
