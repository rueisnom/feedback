<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/8547778">
    <body>
      <group id="8547778">
        <trans-unit id="89ec615e8896a817a1338b981c5dd02618028624" translate="yes" xml:space="preserve">
          <source>(It shows FLOP/s for different values of &lt;code&gt;n&lt;/code&gt;.)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(Muestra FLOP / s para diferentes valores de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;n&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="12da5ea81004fb4224ae834c50a9dde8a5706fc0" translate="yes" xml:space="preserve">
          <source>5 Regions - Explanations</source>
          <target state="translated">5 Regiones-Explicaciones</target>
        </trans-unit>
        <trans-unit id="b14907e1ba792b57aecd8a4bf1e7f6c09685b346" translate="yes" xml:space="preserve">
          <source>&lt;strike&gt;Here, as the data sizes increases, the amount of relative overhead goes down and the performance &quot;saturates&quot;. Here two loops is slower because it has twice as much loop and branching overhead.&lt;/strike&gt;</source>
          <target state="translated">&lt;strike&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Aqu&amp;iacute;, a medida que aumenta el tama&amp;ntilde;o de los datos, la cantidad de sobrecarga relativa disminuye y el rendimiento &quot;se satura&quot;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Aqu&amp;iacute; dos bucles son m&amp;aacute;s lentos porque tienen el doble de bucles y ramificaciones en la parte superior.&lt;/font&gt;&lt;/font&gt;&lt;/strike&gt;</target>
        </trans-unit>
        <trans-unit id="69479992a61ec0eb9e53f2ae7d6230f7aea2402f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;1st Case:&lt;/strong&gt; - Only one summation but two independent function calls.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Primer caso:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; - Solo una suma pero dos llamadas a funciones independientes.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="63a03495083598dadf8617e71321f11f6da3036b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;2 x Intel Xeon X5482 Harpertown @ 3.2 GHz:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2 x Intel Xeon X5482 Harpertown @ 3.2 GHz:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8dd2234cdf691ae3d1c9d696aa07b739c688a8b7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;2nd Case:&lt;/strong&gt; - Two summations but each has its own function call.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Segundo caso:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; dos sumas, pero cada una tiene su propia llamada a la funci&amp;oacute;n.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ac5177fa49c357654e6cf65a86c3c6135e13b3b3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;6.206 seconds&lt;/strong&gt; with one loop and &lt;strong&gt;2.116 seconds&lt;/strong&gt; with two loops. This reproduces the OP's results exactly.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;6.206 segundos&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; con un bucle y &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2.116 segundos&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; con dos bucles. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esto reproduce los resultados del OP exactamente.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="152bc0110de9ef28e70c5321422c739a7c563036" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;First Case:&lt;/em&gt;&lt;/strong&gt; On first iteration the &lt;code&gt;Boss&lt;/code&gt; has to initially go 100 feet to give the order slip to &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;A&lt;/code&gt; goes off and does his thing, but then the &lt;code&gt;Boss&lt;/code&gt; has to travel 500 feet to &lt;code&gt;C&lt;/code&gt; to give him his order slip. Then on the next iteration and every other iteration after the &lt;code&gt;Boss&lt;/code&gt; has to go back and forth 500 feet between the two.</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Primer caso:&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en la primera iteraci&amp;oacute;n, el&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Boss&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tiene que ir inicialmente 100 pies para dar el resbal&amp;oacute;n de la orden a&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; se apaga y hace lo suyo, pero luego el&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Boss&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tiene que viajar 500 pies a&lt;/font&gt;&lt;/font&gt; &lt;code&gt;C&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para darle su resbal&amp;oacute;n de la orden. Luego, en la pr&amp;oacute;xima iteraci&amp;oacute;n y cada dos iteraciones despu&amp;eacute;s de que el&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Boss&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tenga que ir y venir 500 pies entre los dos.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3b3d8ae7e9620b4a3b3a01e77c1f42a469984bc3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Second Case:&lt;/em&gt;&lt;/strong&gt;&lt;code&gt;The Boss&lt;/code&gt; has to travel 100 feet on the first iteration to &lt;code&gt;A&lt;/code&gt;, but after that he is already there and just waits for &lt;code&gt;A&lt;/code&gt; to get back until all slips are filled. Then the &lt;code&gt;Boss&lt;/code&gt; has to travel 500 feet on the first iteration to &lt;code&gt;C&lt;/code&gt; because &lt;code&gt;C&lt;/code&gt; is 500 feet from &lt;code&gt;A&lt;/code&gt; since this &lt;code&gt;Boss( Summation, For Loop )&lt;/code&gt; is being called right after working with &lt;code&gt;A&lt;/code&gt; and then just waits like he did with &lt;code&gt;A&lt;/code&gt; until all of &lt;code&gt;C's&lt;/code&gt; order slips are done.</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Segundo caso:&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt; &lt;code&gt;The Boss&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tiene que viajar 100 pies en la primera iteraci&amp;oacute;n a&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , pero despu&amp;eacute;s de eso ya est&amp;aacute; all&amp;iacute; y solo espera a que&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; regrese hasta que se llenen todos los resbalones. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Luego, el&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Boss&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tiene que viajar 500 pies en la primera iteraci&amp;oacute;n a&lt;/font&gt;&lt;/font&gt; &lt;code&gt;C&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; porque&lt;/font&gt;&lt;/font&gt; &lt;code&gt;C&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; est&amp;aacute; a 500 pies de&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ya que&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;se llama a&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;este&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Boss( Summation, For Loop )&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; justo despu&amp;eacute;s de trabajar con&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y luego espera como lo hizo con&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; hasta que todo&lt;/font&gt;&lt;/font&gt; &lt;code&gt;C's&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; comprobantes de pedido&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; de C&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; est&amp;aacute;n listos.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8db4c14c29a7d105d2f99dd7e4cab04e750bd539" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Assessing The Problem&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Evaluar el problema&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bd63d84ed789fbfe62fd115ddd944db74e9a753b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Benchmark Results:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Resultados de referencia:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a385dd46f24c302ea5ca744977eaa5b99101b83b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Case 1&lt;/strong&gt; is a classic interpolation problem that happens to be an inefficient one. I also think that this was one of the leading reasons of why many machine architectures and developers ended up building and designing multi-core systems with the ability to do multi-threaded applications as well as parallel programming.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El caso 1&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es un problema cl&amp;aacute;sico de interpolaci&amp;oacute;n que resulta ineficiente. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tambi&amp;eacute;n creo que esta fue una de las principales razones por las cuales muchas arquitecturas y desarrolladores de m&amp;aacute;quinas terminaron construyendo y dise&amp;ntilde;ando sistemas de m&amp;uacute;ltiples n&amp;uacute;cleos con la capacidad de hacer aplicaciones de m&amp;uacute;ltiples subprocesos, as&amp;iacute; como programaci&amp;oacute;n paralela.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="db76f0a25108e4cb963d0a08f23235f505a9cc91" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Conclusion:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Conclusion:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ee9af54fbd9a13fc657b8c9037b7dfde2362914f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Could you provide some solid insight into the details that lead to the different cache behaviors as illustrated by the five regions on the following graph?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iquest;Podr&amp;iacute;a proporcionar una idea s&amp;oacute;lida de los detalles que conducen a los diferentes comportamientos de cach&amp;eacute; como se ilustra en las cinco regiones en el siguiente gr&amp;aacute;fico?&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f64c2fa0ab45059d9d2b05c465150bbadd393a29" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;EDIT : It does in fact look like you are allocating all the arrays separately.&lt;/strong&gt;
Usually when such large allocations are requested, the allocator will request fresh pages from the OS. Therefore, there is a high chance that large allocations will appear at the same offset from a page-boundary.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;EDITAR: De hecho, parece que est&amp;aacute; asignando todas las matrices por separado. &lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Por lo general, cuando se solicitan asignaciones tan grandes, el asignador solicitar&amp;aacute; p&amp;aacute;ginas nuevas del sistema operativo. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por lo tanto, existe una alta probabilidad de que aparezcan grandes asignaciones en el mismo desplazamiento desde un l&amp;iacute;mite de p&amp;aacute;gina.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ff82481600ca4b72142ffa0c5df31cb8e1828e64" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Here's the test code:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Aqu&amp;iacute; est&amp;aacute; el c&amp;oacute;digo de prueba:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="104d7d0e822b5338538004327c987e53d73680da" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;I cannot replicate the results discussed here.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;No puedo replicar los resultados discutidos aqu&amp;iacute;.&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="112ae0b490d81db4a257a03413092f9a19eef61c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;In the first two tests, the arrays are allocated separately.&lt;/strong&gt; You'll notice that they all have the same alignment relative to the page.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En las dos primeras pruebas, las matrices se asignan por separado. &lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Notar&amp;aacute;s que todos tienen la misma alineaci&amp;oacute;n en relaci&amp;oacute;n con la p&amp;aacute;gina.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4eb70f5351695541ea10eb07e79eea4cb293448a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;In the second two tests, the arrays are packed together to break that alignment.&lt;/strong&gt; Here you'll notice both loops are faster. Furthermore, the second (double) loop is now the slower one as you would normally expect.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En las segundas dos pruebas, las matrices se empaquetan juntas para romper esa alineaci&amp;oacute;n. &lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Aqu&amp;iacute; notar&amp;aacute;s que ambos bucles son m&amp;aacute;s r&amp;aacute;pidos. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Adem&amp;aacute;s, el segundo bucle (doble) ahora es el m&amp;aacute;s lento, como es de esperar.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8e94c672f74af08d7f271531102f1986340b6dec" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;It might also be interesting to point out the differences between CPU/cache architectures, by providing a similar graph for these CPUs.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tambi&amp;eacute;n podr&amp;iacute;a ser interesante se&amp;ntilde;alar las diferencias entre las arquitecturas de CPU / cach&amp;eacute;, proporcionando un gr&amp;aacute;fico similar para estas CPU.&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="234647d3ac335a2b9c1c73ef786914ed30da0bc5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Let's Investigate&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Investiguemos&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0992f369b3bd576e62bd26ec8024546b329d7025" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Our Assertions:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Nuestras afirmaciones:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bce0cd5ffb2a37fba775193b4bf5ba59883c25c2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Regarding These Questions&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Sobre estas preguntas&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="883cd845c12162f162451345532a4622afe44219" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Region 1:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Regi&amp;oacute;n 1:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6c3a069490cad64b2abbf3ad037bad18e1f4ba80" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Region 2:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Regi&amp;oacute;n 2:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="49b07d776f5d212a4b7f02a4946b33b5f222234c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Region 3:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Regi&amp;oacute;n 3:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cadf6d1e9cc3c16346b4db73abfa9efeefa2911d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Region 4:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Regi&amp;oacute;n 4:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2704be14d7b23daec07410a5dd7685d9fa30cda2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Region 5:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Regi&amp;oacute;n 5:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7ae2cc3d2bb2ec34c48c443e7891cfc09bd5f463" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Summary with Analogy&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Resumen con analog&amp;iacute;a&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4984ec011b334dc8f00bd50924d4167bb704d1a6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The Algorithms:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Los algoritmos&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="df9ac0ca08c80980b68a2fa485d69fb68d2aaa69" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The Approach&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El enfoque&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="eec929ed1c8347dcecf86a47fbb2804dba304932" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The Comparison of Arbitrary Values&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La comparaci&amp;oacute;n de valores arbitrarios&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ec70960c24f99d8101f34115f16fb94cf32e1c01" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The Consideration&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La consideraci&amp;oacute;n&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d8b01854004cefcf81fbcc247efc2e4e0797a699" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The Difference In Distances Traveled&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La diferencia en distancias recorridas&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9e3a70475f876caae8f6a04b7f0e07646a22f2ab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The Ending Results&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Los resultados finales&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3bdeca04c971828619464a9072d48f1805614670" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The OPs Amended Question(s)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Los PO preguntas enmendadas&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="415a6cc46e0f95521c4e7cb395b0523a2dc5c7de" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The Observation:&lt;/strong&gt; - &lt;em&gt;The differences between the two algorithms&lt;/em&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La observaci&amp;oacute;n:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; - &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Las diferencias entre los dos algoritmos&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="76781d11095b245a6f8c86e1771fa82fec1ba4b3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The Original Question&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La pregunta original&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c2361582818f9044502e5f10dd5db390bc078247" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The Perspective&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La perspectiva&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7d18f8f2bee619589b857aee842936d61a6270c3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The Test Cases:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Los casos de prueba:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6f94195bfa3d4122553a525b3ba8b2def28614f7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;What We Do Know&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Lo que sabemos&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f99489672c41c8daa933d99ea58acb903a2b5c58" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;What We Don't Know&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Lo que no sabemos&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="521b0abab75a6ac4655f23b9618ac7ccc724efb0" translate="yes" xml:space="preserve">
          <source>@Mysticial's answer convinced a lot of people (including me), probably because it was the only one that seemed to rely on facts, but it was only one &quot;data point&quot; of the truth.</source>
          <target state="translated">La respuesta de Myticial convenció a mucha gente (incluyéndome a mí),probablemente porque era la única que parecía basarse en hechos,pero era sólo un &quot;punto de datos&quot; de la verdad.</target>
        </trans-unit>
        <trans-unit id="0e15339689c74cb259c9d321c1b1b5454cd6bed7" translate="yes" xml:space="preserve">
          <source>A straight assignment with no computation would be a cleaner test of memory access time and would create a test that is uniform irrespective of the loop count. Maybe I missed something in the conversation, but it is worth thinking twice about. If the plus is left out of the assignment, the cumulative time is almost identical at 31 seconds each.</source>
          <target state="translated">Una asignación recta sin cálculo sería una prueba más limpia del tiempo de acceso a la memoria y crearía una prueba uniforme independientemente del número de bucles.Tal vez me perdí algo en la conversación,pero vale la pena pensarlo dos veces.Si se deja el plus fuera de la asignación,el tiempo acumulado es casi idéntico a 31 segundos cada uno.</target>
        </trans-unit>
        <trans-unit id="b2921679a209c3a19ed571424cfe0ea586224ba2" translate="yes" xml:space="preserve">
          <source>After looking at the code for a while it became quite apparent what the problem is and what is generating it. Lets break this down into an algorithmic problem and look at it from the perspective of using mathematical notations then apply an analogy to the math problems as well as to the algorithms.</source>
          <target state="translated">Después de mirar el código por un tiempo se hizo bastante evidente cuál es el problema y qué lo está generando.Desglosemos esto en un problema algorítmico y mirémoslo desde la perspectiva del uso de las notaciones matemáticas y luego apliquemos una analogía a los problemas matemáticos así como a los algoritmos.</target>
        </trans-unit>
        <trans-unit id="a01e33f4dcdb6ba1ae9f34a97cf8f6deeedf1a8d" translate="yes" xml:space="preserve">
          <source>And</source>
          <target state="translated">And</target>
        </trans-unit>
        <trans-unit id="68af471cbe64993c128953195c25db2546c9c3a6" translate="yes" xml:space="preserve">
          <source>And this approximation is the average difference between these two loops both algorithmically and machine operations involving software optimizations and machine instructions. So when the data set grows linearly, so does the difference in time between the two. Algorithm 1 has more fetches than algorithm 2 which is evident when the &lt;code&gt;Boss&lt;/code&gt; had to travel back and forth the maximum distance between &lt;code&gt;A&lt;/code&gt; &amp;amp; &lt;code&gt;C&lt;/code&gt; for every iteration after the first iteration while Algorithm 2 the &lt;code&gt;Boss&lt;/code&gt; had to travel to &lt;code&gt;A&lt;/code&gt; once and then after being done with &lt;code&gt;A&lt;/code&gt; he had to travel a maximum distance only one time when going from &lt;code&gt;A&lt;/code&gt; to &lt;code&gt;C&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Y esta aproximaci&amp;oacute;n es la diferencia promedio entre estos dos bucles tanto algor&amp;iacute;tmicamente como las operaciones de la m&amp;aacute;quina que implican optimizaciones de software e instrucciones de la m&amp;aacute;quina. Entonces, cuando el conjunto de datos crece linealmente, tambi&amp;eacute;n lo hace la diferencia de tiempo entre los dos. El algoritmo 1 tiene m&amp;aacute;s alcances que el algoritmo 2, lo cual es evidente cuando el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Boss&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tuvo que viajar de ida y vuelta la distancia m&amp;aacute;xima entre &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;C&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para cada iteraci&amp;oacute;n despu&amp;eacute;s de la primera iteraci&amp;oacute;n, mientras que el Algoritmo 2 el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Boss&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tuvo que viajar a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; una vez y luego de haber terminado con &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que ten&amp;iacute;a que recorrer una distancia m&amp;aacute;xima de una sola vez cuando se pasa de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;C&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d9088cef1499e648db384472fce2fb57166ffcad" translate="yes" xml:space="preserve">
          <source>And this is a hard-to-explain one: Initialized data, that is allocated once and reused for every following test case of different vector size:</source>
          <target state="translated">Y esta es una difícil de explicar:Datos inicializados,que se asignan una vez y se reutilizan para cada caso de prueba siguiente de diferente tamaño de vector:</target>
        </trans-unit>
        <trans-unit id="6bc397ce8c790298abec880d37b0008e7ad386fd" translate="yes" xml:space="preserve">
          <source>Array sizes ranged from 2^16 to 2^24, using eight loops. I was careful to initialize the source arrays so the &lt;code&gt;+=&lt;/code&gt; assignment wasn't asking the &lt;a href=&quot;http://en.wikipedia.org/wiki/Floating-point_unit&quot;&gt;FPU&lt;/a&gt; to add memory garbage interpreted as a double.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Los tama&amp;ntilde;os de matriz variaron de 2 ^ 16 a 2 ^ 24, utilizando ocho bucles. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tuve cuidado de inicializar las matrices de origen para que la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;asignaci&amp;oacute;n &lt;/font&gt;&lt;/font&gt; &lt;code&gt;+=&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; no le pidiera a la &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Floating-point_unit&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;FPU&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que agregara basura de memoria interpretada como un doble.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d798d18424176f8a0f98a50c4c4dec04767bbde5" translate="yes" xml:space="preserve">
          <source>As @Stephen Cannon points out in the comments, there is very likely possibility that this alignment causes &lt;strong&gt;&lt;em&gt;false aliasing&lt;/em&gt;&lt;/strong&gt; in the load/store units or the cache. I Googled around for this and found that Intel actually has a hardware counter for &lt;strong&gt;&lt;em&gt;partial address aliasing&lt;/em&gt;&lt;/strong&gt; stalls:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Como @Stephen Cannon se&amp;ntilde;ala en los comentarios, es muy probable que esta alineaci&amp;oacute;n provoque &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;falsos alias&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en las unidades de carga / almacenamiento o en el cach&amp;eacute;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Busqu&amp;eacute; en Google esto y descubr&amp;iacute; que Intel en realidad tiene un contador de hardware para &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;puestos de &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;alias de direcciones parciales&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c35e4900a7c68daeafb264cda2682267df9d2546" translate="yes" xml:space="preserve">
          <source>As I have demonstrated without a doubt, there is an underlying issue even before the Hardware and Software becomes involved. Now as for the management of memory and caching along with page files, etc. which all works together in an integrated set of systems between: &lt;code&gt;The Architecture&lt;/code&gt; { Hardware, Firmware, some Embedded Drivers, Kernels and ASM Instruction Sets }, &lt;code&gt;The OS&lt;/code&gt;{ File and Memory Management systems, Drivers and the Registry }, &lt;code&gt;The Compiler&lt;/code&gt; { Translation Units and Optimizations of the Source Code }, and even the &lt;code&gt;Source Code&lt;/code&gt; itself with its set(s) of distinctive algorithms; we can already see that there is a bottleneck that is happening within the first algorithm before we even apply it to any machine with any arbitrary &lt;code&gt;Architecture&lt;/code&gt;, &lt;code&gt;OS&lt;/code&gt;, and &lt;code&gt;Programmable Language&lt;/code&gt; compared to the second algorithm. So there already existed a problem before involving the intrinsics of a modern computer.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Como he demostrado sin lugar a dudas, hay un problema subyacente incluso antes de que el Hardware y el Software se involucren. Ahora, en cuanto a la gesti&amp;oacute;n de la memoria y el almacenamiento en cach&amp;eacute; junto con los archivos de p&amp;aacute;gina, etc., que funcionan juntos en un conjunto integrado de sistemas entre: &lt;/font&gt;&lt;/font&gt; &lt;code&gt;The Architecture&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; {Hardware, Firmware, algunos controladores integrados, Kernels y conjuntos de instrucciones ASM}, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;The OS&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; {File y sistemas de gesti&amp;oacute;n de memoria, controladores y registro}, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;The Compiler&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; {Unidades de traducci&amp;oacute;n y optimizaciones del c&amp;oacute;digo fuente}, e incluso el &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;propio &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Source Code&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; con su (s) conjunto (s) de algoritmos distintivos; ya podemos ver que hay un cuello de botella que est&amp;aacute; ocurriendo dentro del primer algoritmo incluso antes de aplicarlo a cualquier m&amp;aacute;quina con cualquier arbitrario&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Architecture&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;OS&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Programmable Language&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; comparaci&amp;oacute;n con el segundo algoritmo. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Entonces ya exist&amp;iacute;a un problema antes de involucrar a los intr&amp;iacute;nsecos de una computadora moderna.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="db05e8a585a74c2b37aa36f6b4ef683ef80e1764" translate="yes" xml:space="preserve">
          <source>As you might expect, initializing &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;d&lt;/code&gt; inside the loop using &lt;code&gt;InitToZero[j]&lt;/code&gt; gave the combined approach an advantage, as they were done back-to-back before the assignments to &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt;, but still within 10%. Go figure.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Como es de esperar, la inicializaci&amp;oacute;n de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;b&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;d&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en el interior del bucle utilizando &lt;/font&gt;&lt;/font&gt; &lt;code&gt;InitToZero[j]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; dio el enfoque combinado una ventaja, ya que se realizaron espalda con espalda antes de las asignaciones a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;c&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , pero a&amp;uacute;n dentro de 10%. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Imag&amp;iacute;nate.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6eeb01c453d49806a69030f78b4610c8007b3c99" translate="yes" xml:space="preserve">
          <source>Assuming a fairly dumb caching policy of &lt;em&gt;if the byte is not in the cache, put it there and get the following byte too while we are at it&lt;/em&gt; you will get a scenario something like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Suponiendo una pol&amp;iacute;tica de almacenamiento en cach&amp;eacute; bastante tonta de &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;si el byte no est&amp;aacute; en el cach&amp;eacute;, p&amp;oacute;ngalo all&amp;iacute; y obtenga el siguiente byte tambi&amp;eacute;n mientras estamos en &amp;eacute;l&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , obtendr&amp;aacute; un escenario como este:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2621108dbdca1d058df9e1e89bdc18d55d8d9d56" translate="yes" xml:space="preserve">
          <source>Assuming a simple LIFO caching policy, this code:</source>
          <target state="translated">Asumiendo una simple política de caché LIFO,este código:</target>
        </trans-unit>
        <trans-unit id="3460682488e6d7cc96dbc4d2d00519a722ffcdff" translate="yes" xml:space="preserve">
          <source>At this point, nothing fits in cache. So you're bound by memory bandwidth.</source>
          <target state="translated">En este punto,nada cabe en el caché.Así que estás limitado por el ancho de banda de la memoria.</target>
        </trans-unit>
        <trans-unit id="847dd1a8dd5a0fcb1deef24af0fdd56bf4308a6a" translate="yes" xml:space="preserve">
          <source>At this point, the data no longer fits in L1 cache. So performance is capped by the L1 &amp;lt;-&amp;gt; L2 cache bandwidth.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En este punto, los datos ya no caben en el cach&amp;eacute; L1. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por lo tanto, el rendimiento est&amp;aacute; limitado por el ancho de banda de cach&amp;eacute; L1 &amp;lt;-&amp;gt; L2.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d744e9fe7c6bd65afd8a445005ae9f5103b27665" translate="yes" xml:space="preserve">
          <source>Compiled on MS &lt;a href=&quot;http://en.wikipedia.org/wiki/Visual_C++#32-bit_versions&quot;&gt;Visual C++ 10.0&lt;/a&gt; with full optimization and &lt;a href=&quot;http://en.wikipedia.org/wiki/SSE2&quot;&gt;SSE2&lt;/a&gt; enabled for 32-bit on a &lt;a href=&quot;http://en.wikipedia.org/wiki/Intel_Core_2&quot;&gt;Intel Core 2&lt;/a&gt; Duo (x64), the first example takes 5.5&amp;nbsp;seconds and the double-loop example takes only 1.9&amp;nbsp;seconds. My question is: (Please refer to the my rephrased question at the bottom)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Compilado en MS &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Visual_C++#32-bit_versions&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Visual C ++ 10.0&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; con optimizaci&amp;oacute;n completa y &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/SSE2&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;SSE2&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; habilitado para 32 bits en un &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Intel_Core_2&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Intel Core 2&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Duo (x64), el primer ejemplo toma 5.5 segundos y el ejemplo de doble bucle toma solo 1.9 segundos. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Mi pregunta es: (Consulte la pregunta formulada en la parte inferior)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ce5cd38e3fb59188d515e8d4753f99e250f4c136" translate="yes" xml:space="preserve">
          <source>Considering the OP's original question about the 2 variants of the for loops and his amended question towards the behavior of caches along with many of the other excellent answers and useful comments; I'd like to try and do something different here by taking a different approach about this situation and problem.</source>
          <target state="translated">Considerando la pregunta original de la OP sobre las 2 variantes de los bucles for y su pregunta enmendada sobre el comportamiento de los caches junto con muchas de las otras excelentes respuestas y comentarios útiles;me gustaría intentar hacer algo diferente aquí adoptando un enfoque diferente sobre esta situación y problema.</target>
        </trans-unit>
        <trans-unit id="2658124dfdcfa4171d5ed289bdc8e7cce5a9eacb" translate="yes" xml:space="preserve">
          <source>Considering the two loops and all of the discussion about cache and page filing I'd like to take another approach as to looking at this from a different perspective. One that doesn't involve the cache and page files nor the executions to allocate memory, in fact this approach doesn't even concern the actual hardware or the software at all.</source>
          <target state="translated">Considerando los dos bucles y toda la discusión sobre la memoria caché y el archivado de páginas,me gustaría adoptar otro enfoque para ver esto desde una perspectiva diferente.Uno que no involucre los archivos de caché y de páginas ni las ejecuciones para asignar memoria,de hecho este enfoque ni siquiera concierne al hardware o al software en sí.</target>
        </trans-unit>
        <trans-unit id="7cd90e2c4a5daa4b5570598684f8432ccd97991f" translate="yes" xml:space="preserve">
          <source>Could you provide some solid insight into the details that lead to the different cache behaviors as illustrated by the five regions on the following graph?</source>
          <target state="translated">¿Podría darnos una idea sólida de los detalles que conducen a los diferentes comportamientos de la memoria caché como se ilustra en las cinco regiones del siguiente gráfico?</target>
        </trans-unit>
        <trans-unit id="45e62524f888dc26206083147534d2d045cfe01f" translate="yes" xml:space="preserve">
          <source>Disassembly for the first loop basically looks like this (this block is repeated about five times in the full program):</source>
          <target state="translated">El desmontaje del primer bucle se ve básicamente así (este bloque se repite unas cinco veces en el programa completo):</target>
        </trans-unit>
        <trans-unit id="f5aded222c02776b41379bab0f381d5cb63dc8c0" translate="yes" xml:space="preserve">
          <source>EDIT: Results on an &lt;em&gt;actual&lt;/em&gt; Core 2 architecture machine:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;EDITAR: Resultados en una &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;m&amp;aacute;quina de arquitectura Core 2 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;real&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c1cdf0b350bbd524d76c4339c2d1b23bdd3868e0" translate="yes" xml:space="preserve">
          <source>EDIT: The question turned out to be of no relevance, as the behavior severely depends on the sizes of the arrays (n) and the CPU cache. So if there is further interest, I rephrase the question:</source>
          <target state="translated">EDITORIAL:La pregunta resultó no tener relevancia,ya que el comportamiento depende severamente del tamaño de los arreglos (n)y del caché de la CPU.Así que si hay más interés,reformulo la pregunta:</target>
        </trans-unit>
        <trans-unit id="56c9875ac0dcfe30c44dfb65704f11fe74371099" translate="yes" xml:space="preserve">
          <source>Each loop of the double loop example produces this code (the following block is repeated about three times):</source>
          <target state="translated">Cada bucle del ejemplo de doble bucle produce este código (el siguiente bloque se repite unas tres veces):</target>
        </trans-unit>
        <trans-unit id="7339be587541117a0089da7851906a2b9aeddb3a" translate="yes" xml:space="preserve">
          <source>Every low-level performance related question on Stack&amp;nbsp;Overflow should be required to provide MFLOPS information for the whole range of cache relevant data sizes! It's a waste of everybody's time to think of answers and especially discuss them with others without this information.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iexcl;Todas las preguntas relacionadas con el rendimiento de bajo nivel sobre el desbordamiento de pila deben ser requeridas para proporcionar informaci&amp;oacute;n MFLOPS para toda la gama de tama&amp;ntilde;os de datos relevantes de cach&amp;eacute;! &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Es una p&amp;eacute;rdida de tiempo para todos pensar en respuestas y especialmente discutirlas con otros sin esta informaci&amp;oacute;n.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0f030db38dc8179d25718d183c7994c1ad7bfec3" translate="yes" xml:space="preserve">
          <source>Hardware is &lt;a href=&quot;http://en.wikipedia.org/wiki/Dell_XPS#XPS_8500&quot;&gt;Dell XPS 8500&lt;/a&gt; with generation 3 &lt;a href=&quot;http://en.wikipedia.org/wiki/Intel_Core#Core_i7&quot;&gt;Core i7&lt;/a&gt; @ 3.4&amp;nbsp;GHz and 8&amp;nbsp;GB memory. For 2^16 to 2^24, using eight loops, the cumulative time was 44.987 and 40.965 respectively. Visual C++ 2010, fully optimized.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El hardware es &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Dell_XPS#XPS_8500&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Dell XPS 8500&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; con generaci&amp;oacute;n 3 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Intel_Core#Core_i7&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Core i7&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; @ 3.4 GHz y 8 GB de memoria. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para 2 ^ 16 a 2 ^ 24, usando ocho bucles, el tiempo acumulado fue 44.987 y 40.965 respectivamente. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Visual C ++ 2010, totalmente optimizado.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c1bbe64c3e6e15af998d9942383e89f52b14b186" translate="yes" xml:space="preserve">
          <source>However, in order for false aliasing to occur, there must be a large enough stride between the datasets. This is why you don't see this in region 3.</source>
          <target state="translated">Sin embargo,para que se produzcan falsos alias,debe haber un paso lo suficientemente grande entre los conjuntos de datos.Por eso no se ve esto en la región 3.</target>
        </trans-unit>
        <trans-unit id="f3b9fd0727ad4b649df8f9eab11b90ef6e577209" translate="yes" xml:space="preserve">
          <source>However; it is not to say that these new questions are not of importance because they themselves are and they do play a role after all. They do impact the procedures and the overall performance and that is evident with the various graphs and assessments from many who have given their answer(s) and or comment(s). If you pay attention to the analogy of the &lt;code&gt;Boss&lt;/code&gt; and the two workers &lt;code&gt;A&lt;/code&gt; &amp;amp; &lt;code&gt;B&lt;/code&gt; who had to go and retrieve packages from &lt;code&gt;C&lt;/code&gt; &amp;amp; &lt;code&gt;D&lt;/code&gt; respectively and considering the mathematical notations of the two algorithms in question you can see that without even the involvement of the computer &lt;code&gt;Case 2&lt;/code&gt; is approximately 60% faster than &lt;code&gt;Case 1&lt;/code&gt; and when you look at the graphs and charts after these algorithms have been applied to source code, compiled and optimized and executed through the OS to perform operations on the given hardware you even see a little more degradation between the differences in these algorithms.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Sin embargo; no quiere decir que estas nuevas preguntas no sean importantes porque ellas mismas lo son y juegan un papel despu&amp;eacute;s de todo. Impactan los procedimientos y el rendimiento general y eso es evidente con los diversos gr&amp;aacute;ficos y evaluaciones de muchos que han dado sus respuestas y / o comentarios. Si prestas atenci&amp;oacute;n a la analog&amp;iacute;a del &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Boss&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y los dos trabajadores &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;B&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que tuvieron que ir y recuperar paquetes de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;C&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;D&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; respectivamente y considerando las anotaciones matem&amp;aacute;ticas de los dos algoritmos en cuesti&amp;oacute;n, puedes ver eso sin siquiera la participaci&amp;oacute;n del la computadora &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Case 2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es aproximadamente un 60% m&amp;aacute;s r&amp;aacute;pida que la &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Case 1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y cuando mira los gr&amp;aacute;ficos y cuadros despu&amp;eacute;s de que estos algoritmos se hayan aplicado al c&amp;oacute;digo fuente, compilado y optimizado y ejecutado a trav&amp;eacute;s del sistema operativo para realizar operaciones en el hardware dado, incluso ver&amp;aacute; un poco m&amp;aacute;s de degradaci&amp;oacute;n entre las diferencias en estos algoritmos.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a7a60ea46f57285511450482a75f3927deb922e3" translate="yes" xml:space="preserve">
          <source>I don't know if poor benchmark code is to blame, or what, but the two methods are within 10% of each other on my machine using the following code, and one loop is usually just slightly faster than two - as you'd expect.</source>
          <target state="translated">No sé si la culpa es del mal código de referencia,o qué,pero los dos métodos están dentro del 10% de cada uno en mi máquina usando el siguiente código,y un bucle suele ser un poco más rápido que dos-como es de esperar.</target>
        </trans-unit>
        <trans-unit id="00589175b0e2daeb748e811866d66c98117bcd29" translate="yes" xml:space="preserve">
          <source>I played around with various schemes, such as putting the assignment of &lt;code&gt;b[j]&lt;/code&gt;, &lt;code&gt;d[j]&lt;/code&gt; to &lt;code&gt;InitToZero[j]&lt;/code&gt; inside the loops, and also with using &lt;code&gt;+= b[j] = 1&lt;/code&gt; and &lt;code&gt;+= d[j] = 1&lt;/code&gt;, and I got fairly consistent results.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &lt;code&gt;InitToZero[j]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; con varios esquemas, como poner la asignaci&amp;oacute;n de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;b[j]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;d[j]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; a &lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;InitToZero [j]&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; dentro de los bucles, y tambi&amp;eacute;n usando &lt;/font&gt;&lt;/font&gt; &lt;code&gt;+= b[j] = 1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;+= d[j] = 1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , y obtuve resultados bastante consistentes.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="817cfd78e867bee0df782d3f8d5e3e892f050739" translate="yes" xml:space="preserve">
          <source>I run Visual&amp;nbsp;Studio&amp;nbsp;2015 on an E5-1620 3.5&amp;nbsp;GHz processor with 16&amp;nbsp;GB RAM.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ejecuto Visual Studio 2015 en un procesador E5-1620 3.5 GHz con 16 GB de RAM.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="00808f1a2f2eb9b821cd5d0d2373ff5c65a160b7" translate="yes" xml:space="preserve">
          <source>I suspect you are beginning to see where I am going.</source>
          <target state="translated">Sospecho que estás empezando a ver a dónde voy.</target>
        </trans-unit>
        <trans-unit id="3bc087c8089b4797e291481227838ac53530b7b7" translate="yes" xml:space="preserve">
          <source>I will now begin to explain how all of this works below.</source>
          <target state="translated">Ahora empezaré a explicar cómo funciona todo esto a continuación.</target>
        </trans-unit>
        <trans-unit id="99ed91ab9852dd4c4c00c7c70971a0fa0add2aea" translate="yes" xml:space="preserve">
          <source>I'm not sure exactly what's going on here... Alignment could still play an effect as Agner Fog mentions &lt;a href=&quot;http://www.agner.org/optimize/blog/read.php?i=142&quot;&gt;cache bank conflicts&lt;/a&gt;. (That link is about Sandy Bridge, but the idea should still be applicable to Core 2.)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;No estoy seguro exactamente de lo que est&amp;aacute; sucediendo aqu&amp;iacute; ... La alineaci&amp;oacute;n a&amp;uacute;n podr&amp;iacute;a tener un efecto ya que Agner Fog menciona &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.agner.org/optimize/blog/read.php?i=142&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;conflictos de bancos de cach&amp;eacute;&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(Ese enlace es sobre Sandy Bridge, pero la idea a&amp;uacute;n deber&amp;iacute;a ser aplicable a Core 2).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e87dc3e0b3d9d315844cac4303a6acbe9bf72c81" translate="yes" xml:space="preserve">
          <source>I'm not sure why it was decided that MFLOPS was a relevant metric. I though the idea was to focus on memory accesses, so I tried to minimize the amount of floating point computation time. I left in the &lt;code&gt;+=&lt;/code&gt;, but I am not sure why.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;No estoy seguro de por qu&amp;eacute; se decidi&amp;oacute; que MFLOPS era una m&amp;eacute;trica relevante. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Pens&amp;eacute; que la idea era centrarme en los accesos a la memoria, as&amp;iacute; que intent&amp;eacute; minimizar la cantidad de tiempo de c&amp;aacute;lculo de coma flotante. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Me fui en el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;+=&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , pero no estoy seguro de por qu&amp;eacute;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7810945b5da00839bd6f4244b4ecc9f6be09aa4c" translate="yes" xml:space="preserve">
          <source>If I've guessed correctly on how you are allocating your arrays, they &lt;strong&gt;&lt;em&gt;are likely to be aligned to the page line&lt;/em&gt;&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si he adivinado correctamente c&amp;oacute;mo est&amp;aacute; asignando sus matrices, &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;es probable que est&amp;eacute;n alineadas con la l&amp;iacute;nea de la p&amp;aacute;gina&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6592d47a260c0445aa4f71f91675b748c2da8bb8" translate="yes" xml:space="preserve">
          <source>If you noticed &lt;code&gt;F2()&lt;/code&gt; only exists in &lt;code&gt;Sum&lt;/code&gt; where both &lt;code&gt;Sum1&lt;/code&gt; and &lt;code&gt;Sum2&lt;/code&gt; only contains &lt;code&gt;F1()&lt;/code&gt;. This will also be evident later on as well when we begin to conclude that there is sort of an optimization happening from the second algorithm.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si not&amp;oacute; que &lt;/font&gt;&lt;/font&gt; &lt;code&gt;F2()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; solo existe en &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Sum&lt;/code&gt; ,&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; donde &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Sum1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Sum2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; solo contienen &lt;/font&gt;&lt;/font&gt; &lt;code&gt;F1()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . Esto tambi&amp;eacute;n ser&amp;aacute; evidente m&amp;aacute;s adelante, cuando comencemos a concluir que se est&amp;aacute; produciendo una especie de optimizaci&amp;oacute;n desde el segundo algoritmo.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="29e5b3147124613363d4d8415c0344079da0b91e" translate="yes" xml:space="preserve">
          <source>Imagine you are working on a machine where &lt;code&gt;n&lt;/code&gt; was just the right value for it only to be possible to hold two of your arrays in memory at one time, but the total memory available, via disk caching, was still sufficient to hold all four.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Imagine que est&amp;aacute; trabajando en una m&amp;aacute;quina donde &lt;/font&gt;&lt;/font&gt; &lt;code&gt;n&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; era el valor correcto para que solo fuera posible mantener dos de sus matrices en la memoria al mismo tiempo, pero la memoria total disponible, a trav&amp;eacute;s del almacenamiento en cach&amp;eacute; de disco, todav&amp;iacute;a era suficiente para contener las cuatro.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6c3438355ba619bc8749166614f228c594f1da22" translate="yes" xml:space="preserve">
          <source>In both cases we have 4 functions to work with and 2 function calls with 2 operations being done on each function call. So we will set these up as functions and function calls to be &lt;code&gt;F1()&lt;/code&gt;, &lt;code&gt;F2()&lt;/code&gt;, &lt;code&gt;f(a)&lt;/code&gt;, &lt;code&gt;f(b)&lt;/code&gt;, &lt;code&gt;f(c)&lt;/code&gt; and &lt;code&gt;f(d)&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En ambos casos tenemos 4 funciones para trabajar y 2 llamadas de funci&amp;oacute;n con 2 operaciones que se realizan en cada llamada de funci&amp;oacute;n. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;As&amp;iacute; que los configuraremos como funciones y llamadas de funci&amp;oacute;n para que sean &lt;/font&gt;&lt;/font&gt; &lt;code&gt;F1()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;F2()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;f(a)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;f(b)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;f(c)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;f(d)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dc2ed913dd196a5e776a8b6d35e3db01e80c5fbd" translate="yes" xml:space="preserve">
          <source>In this situation it is the structure of the process of the work being done and it does go to show that &lt;strong&gt;Case 2&lt;/strong&gt; is more efficient from both that partial optimization of having a similar function declaration and definition where it is only the variables that differ by name. And we also see that the total distance traveled in &lt;strong&gt;Case 1&lt;/strong&gt; is much farther than it is in &lt;strong&gt;Case 2&lt;/strong&gt; and we can consider this distance traveled our &lt;em&gt;Time Factor&lt;/em&gt; between the two algorithms. &lt;strong&gt;Case 1&lt;/strong&gt; has considerable more work to do than &lt;strong&gt;Case 2&lt;/strong&gt; does. This was also seen in the evidence of the &lt;code&gt;ASM&lt;/code&gt; that was shown between both cases. Even with what was already said about these cases, it also doesn't account for the fact that in &lt;strong&gt;Case 1&lt;/strong&gt; the boss will have to wait for both &lt;code&gt;A&lt;/code&gt; &amp;amp; &lt;code&gt;C&lt;/code&gt; to get back before he can go back to &lt;code&gt;A&lt;/code&gt; again on the next iteration and it also doesn't account for the fact that if &lt;code&gt;A&lt;/code&gt; or &lt;code&gt;B&lt;/code&gt; is taking an extremely long time then both the &lt;code&gt;Boss&lt;/code&gt; and the other worker(s) are also waiting at an idle. In &lt;strong&gt;Case 2&lt;/strong&gt; the only one being idle is the &lt;code&gt;Boss&lt;/code&gt; until the worker gets back. So even this has an impact on the algorithm.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En esta situaci&amp;oacute;n, es la estructura del proceso del trabajo que se est&amp;aacute; realizando y demuestra que el &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Caso 2&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es m&amp;aacute;s eficiente tanto por la optimizaci&amp;oacute;n parcial de tener una declaraci&amp;oacute;n de funci&amp;oacute;n similar como por una definici&amp;oacute;n en la que solo las variables difieren por nombre . Y tambi&amp;eacute;n vemos que la distancia total recorrida en el &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;caso 1&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es mucho m&amp;aacute;s lejos que en el &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;caso 2&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y podemos considerar esta distancia recorrida como nuestro &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;factor de tiempo&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; entre los dos algoritmos. &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El caso 1&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tiene mucho m&amp;aacute;s trabajo que hacer que el &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;caso 2&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . Esto tambi&amp;eacute;n se vio en la evidencia de la &lt;/font&gt;&lt;/font&gt; &lt;code&gt;ASM&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;eso se demostr&amp;oacute; entre ambos casos. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Incluso con lo que ya se dijo sobre estos casos, tampoco tiene en cuenta el hecho de que en el &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Caso 1&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; el jefe tendr&amp;aacute; que esperar a que &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;C&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; vuelvan antes de poder volver a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en la pr&amp;oacute;xima iteraci&amp;oacute;n y Tampoco tiene en cuenta el hecho de que si &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; o &lt;/font&gt;&lt;/font&gt; &lt;code&gt;B&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; est&amp;aacute;n tardando mucho tiempo, tanto el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Boss&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; como los otros trabajadores tambi&amp;eacute;n est&amp;aacute;n esperando en reposo. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En el &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;caso 2,&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; el &amp;uacute;nico que est&amp;aacute; inactivo es el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Boss&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; hasta que el trabajador regrese. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Entonces, incluso esto tiene un impacto en el algoritmo.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0a80769f1c0a8b8d244565169e5bab5c0615b3ee" translate="yes" xml:space="preserve">
          <source>It is already apparent that many have already done this by looking at the heap allocations, bench mark tests, looking at RAM, Cache and Page Files. Looking at specific data points and specific iteration indexes was also included and the various conversations about this specific problem has many people starting to question other related things about it. So how do we begin to look at this problem by using mathematical algorithms and applying an analogy to it? We start off by making a couple of assertions! Then we build out our algorithm from there.</source>
          <target state="translated">Ya es evidente que muchos ya lo han hecho al observar las asignaciones de la pila,las pruebas de referencia,mirando la RAM,la caché y los archivos de página.También se incluyeron puntos de datos específicos e índices de iteración específicos,y las diversas conversaciones sobre este problema específico han hecho que mucha gente empiece a cuestionarse otras cosas relacionadas con él.Entonces,¿cómo empezamos a mirar este problema usando algoritmos matemáticos y aplicándole una analogía? Comenzamos haciendo un par de afirmaciones! Luego construimos nuestro algoritmo a partir de ahí.</target>
        </trans-unit>
        <trans-unit id="a8fc6816b3d2ad8d20c28b136a6c91005b108c66" translate="yes" xml:space="preserve">
          <source>It is the only point, where one-loop (namely with continuous allocation) beats the two-loop version. (This made Mysticial's answer possible, at all.)</source>
          <target state="translated">Es el único punto en el que un bucle (es decir,con asignación continua)supera a la versión de dos bucles.(Esto hizo posible la respuesta de Mysticial,en absoluto.)</target>
        </trans-unit>
        <trans-unit id="95d30c52570fa07e0e4cf2e00d425ec2c718c6fa" translate="yes" xml:space="preserve">
          <source>It may be old C++ and optimizations. On my computer I obtained almost the same speed:</source>
          <target state="translated">Puede ser el viejo C++y las optimizaciones.En mi computadora obtuve casi la misma velocidad:</target>
        </trans-unit>
        <trans-unit id="fd3c6fcb78898a4d9ab59044ecc39ae0efeecae2" translate="yes" xml:space="preserve">
          <source>It might also be interesting to point out the differences between CPU/cache architectures, by providing a similar graph for these CPUs.</source>
          <target state="translated">También podría ser interesante señalar las diferencias entre las arquitecturas de CPUcache,proporcionando un gráfico similar para estas CPU.</target>
        </trans-unit>
        <trans-unit id="5f7fc9c2d2d9a467270b23261b4cc69da5f9ed02" translate="yes" xml:space="preserve">
          <source>It possesses the greatest discrepancy between the one and two loop'ed version (almost a factor of three)</source>
          <target state="translated">Posee la mayor discrepancia entre la versión de uno y dos bucles (casi un factor de tres)</target>
        </trans-unit>
        <trans-unit id="59d7c3084de99bdf974adebf4d8683cc639f6dc2" translate="yes" xml:space="preserve">
          <source>It's because the CPU doesn't have so many cache misses (where it has to wait for the array data to come from the RAM chips). It would be interesting for you to adjust the size of the arrays continually so that you exceed the sizes of the &lt;a href=&quot;http://en.wikipedia.org/wiki/CPU_cache#Multi-level_caches&quot;&gt;level 1 cache&lt;/a&gt; (L1), and then the &lt;a href=&quot;http://en.wikipedia.org/wiki/CPU_cache#Multi-level_caches&quot;&gt;level 2 cache&lt;/a&gt; (L2), of your CPU and plot the time taken for your code to execute against the sizes of the arrays. The graph shouldn't be a straight line like you'd expect.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Es porque la CPU no tiene tantos errores de cach&amp;eacute; (donde tiene que esperar a que los datos de la matriz provengan de los chips RAM). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ser&amp;iacute;a interesante para usted ajustar el tama&amp;ntilde;o de las matrices continuamente para que exceda los tama&amp;ntilde;os de la &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/CPU_cache#Multi-level_caches&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;cach&amp;eacute; de nivel 1&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (L1), y luego la &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/CPU_cache#Multi-level_caches&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;cach&amp;eacute; de nivel 2&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (L2), de su CPU y graficar el tiempo necesario para su c&amp;oacute;digo ejecutar contra los tama&amp;ntilde;os de las matrices. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El gr&amp;aacute;fico no deber&amp;iacute;a ser una l&amp;iacute;nea recta como cabr&amp;iacute;a esperar.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e6e48b4df68ffacb1c2b954a22ff59182a5abdcc" translate="yes" xml:space="preserve">
          <source>It's not because of a different code, but because of caching: RAM is slower than the CPU registers and a cache memory is inside the CPU to avoid to write the RAM every time a variable is changing. But the cache is not big as the RAM is, hence, it maps only a fraction of it.</source>
          <target state="translated">No es por un código diferente,sino por el caching:la RAM es más lenta de lo que registra la CPU y hay una memoria cache dentro de la CPU para evitar escribir la RAM cada vez que una variable cambia.Pero el caché no es tan grande como la RAM,por lo tanto,sólo mapea una fracción de ella.</target>
        </trans-unit>
        <trans-unit id="4f98a0ef7e9ea5be7322aaa75bdddab7edfda7fc" translate="yes" xml:space="preserve">
          <source>Looking at it from this kind of an approach without involving how the Hardware, OS and Compiler(s) works together to do heap allocations that involves working with RAM, Cache, Page Files, etc.; the mathematics that are at the foundation of these algorithms shows us which of these two is the better solution. We can use an analogy where a &lt;code&gt;Boss&lt;/code&gt; or &lt;code&gt;Summation&lt;/code&gt; that will represent a &lt;code&gt;For Loop&lt;/code&gt; that has to travel between workers &lt;code&gt;A&lt;/code&gt; &amp;amp; &lt;code&gt;B&lt;/code&gt; we can easily see that &lt;strong&gt;Case 2&lt;/strong&gt; is at least &lt;strong&gt;&lt;sup&gt;1&lt;/sup&gt;/&lt;sub&gt;2&lt;/sub&gt;&lt;/strong&gt; as fast if not a little more than &lt;strong&gt;Case 1&lt;/strong&gt; due to the difference in the distance that is needed to travel and the time taken between the workers. This math lines up almost virtually and perfectly with both the Bench Mark Times as well as the amount of differences in Assembly Instructions.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Mir&amp;aacute;ndolo desde este tipo de enfoque sin involucrar c&amp;oacute;mo el hardware, el sistema operativo y el compilador (es) trabajan juntos para hacer asignaciones de almacenamiento din&amp;aacute;mico que implica trabajar con RAM, cach&amp;eacute;, archivos de p&amp;aacute;gina, etc. Las matem&amp;aacute;ticas que est&amp;aacute;n en la base de estos algoritmos nos muestran cu&amp;aacute;l de estos dos es la mejor soluci&amp;oacute;n. Podemos utilizar una analog&amp;iacute;a donde un &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Boss&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; o &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Summation&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que representar&amp;aacute;n un &lt;/font&gt;&lt;/font&gt; &lt;code&gt;For Loop&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que tiene que viajar entre los trabajadores &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;B&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , podemos ver f&amp;aacute;cilmente que &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;el caso 2&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es al menos &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;1&lt;/font&gt;&lt;/font&gt;&lt;/sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; / &lt;/font&gt;&lt;/font&gt;&lt;sub&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2&lt;/font&gt;&lt;/font&gt;&lt;/sub&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tan r&amp;aacute;pido si no un poco m&amp;aacute;s de &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;caso 1&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;debido a la diferencia en la distancia que se necesita para viajar y el tiempo necesario entre los trabajadores. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esta matem&amp;aacute;tica se alinea casi virtualmente y perfectamente tanto con el Bench Mark Times como con la cantidad de diferencias en las Instrucciones de ensamblaje.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="88b8ab7191d7a7de92e0270b1e10017d27a3a95d" translate="yes" xml:space="preserve">
          <source>Note that my initial question was at &lt;strong&gt;n = 100.000&lt;/strong&gt;. This point (by accident) exhibits special behavior:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tenga en cuenta que mi pregunta inicial fue en &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;n = 100.000&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Este punto (por accidente) exhibe un comportamiento especial:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b299d49402d695f6cbcf85018ddd57470d6420e6" translate="yes" xml:space="preserve">
          <source>Now if the &quot;Data&quot; set is fairly small it may not seem all that bad of a difference at first but since &lt;code&gt;Case 1&lt;/code&gt; is about &lt;code&gt;60 - 70%&lt;/code&gt; slower than &lt;code&gt;Case 2&lt;/code&gt; we can look at the growth of this function as being in terms of the differences in time executions:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ahora, si el conjunto de &quot;Datos&quot; es bastante peque&amp;ntilde;o, puede no parecer una gran diferencia al principio, pero dado que el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Case 1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es aproximadamente un &lt;/font&gt;&lt;/font&gt; &lt;code&gt;60 - 70%&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; m&amp;aacute;s lento que el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Case 2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , podemos ver el crecimiento de esta funci&amp;oacute;n en t&amp;eacute;rminos de Las diferencias en las ejecuciones de tiempo:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="eca24602b960c6a890ccd38ee6f72f25af9a65d1" translate="yes" xml:space="preserve">
          <source>OK, the right answer definitely has to do something with the CPU cache. But to use the cache argument can be quite difficult, especially without data.</source>
          <target state="translated">Bien,la respuesta correcta definitivamente tiene que ver con el caché de la CPU.Pero usar el argumento de la caché puede ser bastante difícil,especialmente sin datos.</target>
        </trans-unit>
        <trans-unit id="580a776c6b642fccec58ff95f40d16a839dd873b" translate="yes" xml:space="preserve">
          <source>Observations:</source>
          <target state="translated">Observations:</target>
        </trans-unit>
        <trans-unit id="d4cd934a3267228345d82320582325609db4ac86" translate="yes" xml:space="preserve">
          <source>One loop: 1.577 ms</source>
          <target state="translated">Un bucle:1.577 ms</target>
        </trans-unit>
        <trans-unit id="067285dbce4f2ae23a4e8256bf22a68036bb1d40" translate="yes" xml:space="preserve">
          <source>PPS: Here is the full code. It uses &lt;a href=&quot;https://www.threadingbuildingblocks.org/&quot;&gt;TBB&lt;/a&gt;&lt;code&gt;Tick_Count&lt;/code&gt; for higher resolution timing, which can be disabled by not defining the &lt;code&gt;TBB_TIMING&lt;/code&gt; Macro:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;PPS: Aqu&amp;iacute; est&amp;aacute; el c&amp;oacute;digo completo. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Utiliza &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://www.threadingbuildingblocks.org/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;TBB &lt;/font&gt;&lt;/font&gt;&lt;/a&gt; &lt;code&gt;Tick_Count&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para tiempos de resoluci&amp;oacute;n m&amp;aacute;s altos, que se pueden deshabilitar al no definir la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;macro &lt;/font&gt;&lt;/font&gt; &lt;code&gt;TBB_TIMING&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="150892f3a6e1c9444336bf5fbf39ad8c8df7f488" translate="yes" xml:space="preserve">
          <source>PS: I am not sure, if this helps:</source>
          <target state="translated">PD:No estoy seguro,si esto ayuda:</target>
        </trans-unit>
        <trans-unit id="37563549c2b48fdb7b187f4ea1cf03ceecec4985" translate="yes" xml:space="preserve">
          <source>PS: I changed the loops to count down to zero, and the combined method was marginally faster. Scratching my head. Note the new array sizing and loop counts.</source>
          <target state="translated">PD:Cambié los bucles para la cuenta atrás hasta cero,y el método combinado fue ligeramente más rápido.Rascándome la cabeza.Observen el nuevo tamaño de la matriz y el número de bucles.</target>
        </trans-unit>
        <trans-unit id="929017ada05ac8077c3ebc10b0f695a210b9db02" translate="yes" xml:space="preserve">
          <source>Proposal</source>
          <target state="translated">Proposal</target>
        </trans-unit>
        <trans-unit id="5f6bd53d4ce24c4aa4a3ee3123d8ab5b9cf113bb" translate="yes" xml:space="preserve">
          <source>Repeat for &lt;code&gt;c&lt;/code&gt; and &lt;code&gt;d&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Repita para &lt;/font&gt;&lt;/font&gt; &lt;code&gt;c&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;d&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="52a60be214c602639707f5280f5a30ec124a81d3" translate="yes" xml:space="preserve">
          <source>Say &lt;code&gt;n = 2&lt;/code&gt; and we are working with bytes. In my scenario we thus have &lt;strong&gt;just 4 bytes of RAM&lt;/strong&gt; and the rest of our memory is significantly slower (say 100 times longer access).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Digamos &lt;/font&gt;&lt;/font&gt; &lt;code&gt;n = 2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y estamos trabajando con bytes. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En mi caso, tenemos &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;solo 4 bytes de RAM&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y el resto de nuestra memoria es significativamente m&amp;aacute;s lenta (digamos un acceso 100 veces m&amp;aacute;s largo).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b768a5099eeede624e8fb1ccf0c00e1ae7bd2c7f" translate="yes" xml:space="preserve">
          <source>Since we are working with an 8 byte pointer and dealing with Heap allocation let's consider this problem here. Let us say that the &lt;code&gt;Boss&lt;/code&gt; is 100 feet from &lt;code&gt;A&lt;/code&gt; and that &lt;code&gt;A&lt;/code&gt; is 500 feet from &lt;code&gt;C&lt;/code&gt;. We don't need to worry about how far the &lt;code&gt;Boss&lt;/code&gt; is initially from &lt;code&gt;C&lt;/code&gt; because of the order of executions. In both cases the &lt;code&gt;Boss&lt;/code&gt; initially travels from &lt;code&gt;A&lt;/code&gt; first then to &lt;code&gt;B&lt;/code&gt;. This analogy isn't to say that this distance is exact; it is just a use test case scenario to show the workings of the algorithms. In many cases when doing heap allocations and working with the cache and page files, these distances between address locations may not vary that much in differences or they can very significantly depending on the nature of the data types and the array sizes.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Dado que estamos trabajando con un puntero de 8 bytes y tratando con la asignaci&amp;oacute;n de Heap, consideremos este problema aqu&amp;iacute;. Digamos que el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Boss&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; est&amp;aacute; a 100 pies de distancia de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y que &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es de 500 pies de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;C&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . No tenemos que preocuparnos de cu&amp;aacute;n lejos &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;est&amp;aacute; inicialmente &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Boss&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;C&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; debido al orden de las ejecuciones. En ambos casos, el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Boss&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; inicialmente viaja de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; primero a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;B&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esta analog&amp;iacute;a no quiere decir que esta distancia sea exacta; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Es solo un caso de prueba de uso para mostrar el funcionamiento de los algoritmos. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En muchos casos, cuando se realizan asignaciones de almacenamiento din&amp;aacute;mico y se trabaja con el cach&amp;eacute; y los archivos de p&amp;aacute;gina, estas distancias entre las ubicaciones de las direcciones pueden no variar mucho en las diferencias o pueden variar significativamente dependiendo de la naturaleza de los tipos de datos y los tama&amp;ntilde;os de los arreglos.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b403afffa673d5c9286b0e779fa6f2102008bfda" translate="yes" xml:space="preserve">
          <source>So by these numbers it would almost look as if Algorithm One should be 99% slower than Algorithm Two; however, this is only the &lt;code&gt;The Boss's&lt;/code&gt; part or responsibility of the algorithms and it doesn't account for the actual workers &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt;, &lt;code&gt;C&lt;/code&gt;, &amp;amp; &lt;code&gt;D&lt;/code&gt; and what they have to do on each and every iteration of the Loop. So the bosses job only accounts for about 15 - 40% of the total work being done. So the bulk of the work which is done through the workers has a slight bigger impact towards keeping the ratio of the speed rate differences to about 50-70%</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Entonces, seg&amp;uacute;n estos n&amp;uacute;meros, casi parecer&amp;iacute;a que el Algoritmo Uno deber&amp;iacute;a ser 99% m&amp;aacute;s lento que el Algoritmo Dos; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;sin embargo, esto es solo la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;parte o la responsabilidad de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;The Boss's&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; de los algoritmos y no tiene en cuenta los trabajadores reales &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;B&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;C&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;D&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y lo que tienen que hacer en cada iteraci&amp;oacute;n del Loop. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por lo tanto, el trabajo de los jefes solo representa entre el 15 y el 40% del trabajo total realizado. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por lo tanto, la mayor parte del trabajo que se realiza a trav&amp;eacute;s de los trabajadores tiene un impacto ligeramente mayor para mantener la proporci&amp;oacute;n de las diferencias de velocidad en aproximadamente 50-70%&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d0c27d22f565b7d4dff65f8ce28522fe98c5a597" translate="yes" xml:space="preserve">
          <source>So trying to have the &lt;code&gt;Boss&lt;/code&gt; focusing on doing two similar things at once and juggling them back and forth instead of focusing on similar consecutive tasks  is going to make him quite angry by the end of the day because he had to travel and work twice as much. Therefor do not lose the scope of the situation by letting your boss getting into an interpolated bottleneck because the boss's spouse and children wouldn't appreciate it.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por lo tanto, tratar de hacer que el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Boss&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; concentre en hacer dos cosas similares a la vez y hacer malabares entre ellas en lugar de centrarse en tareas consecutivas similares lo har&amp;aacute; enojar bastante al final del d&amp;iacute;a porque tuvo que viajar y trabajar el doble. . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por lo tanto, no pierda el alcance de la situaci&amp;oacute;n permitiendo que su jefe se meta en un cuello de botella interpolado porque el c&amp;oacute;nyuge y los hijos del jefe no lo apreciar&amp;iacute;an.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c92f2896cb97a5cd76721e9be1ae06c663d9ea6d" translate="yes" xml:space="preserve">
          <source>Suppose &lt;code&gt;a1&lt;/code&gt;, &lt;code&gt;b1&lt;/code&gt;, &lt;code&gt;c1&lt;/code&gt;, and &lt;code&gt;d1&lt;/code&gt; point to heap memory and my numerical code has the following core loop.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Supongamos que &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;b1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;c1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;d1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; apuntan a la memoria de almacenamiento din&amp;aacute;mico y mi c&amp;oacute;digo num&amp;eacute;rico tiene el siguiente bucle central.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ae49864322db83eb4df4027d1cc46e331bab97d8" translate="yes" xml:space="preserve">
          <source>That's why I combined his test (using a continuous vs. separate allocation) and @James' Answer's advice.</source>
          <target state="translated">Por eso combiné su test (usando una asignación continua vs.separada)y el consejo de @James' Answer.</target>
        </trans-unit>
        <trans-unit id="d13556ea98fb233bf53b98bb4c31b76c5382d7df" translate="yes" xml:space="preserve">
          <source>The OP's code:</source>
          <target state="translated">El código de la OP:</target>
        </trans-unit>
        <trans-unit id="49a4378a00b62449fce4898fcf15f09e54099521" translate="yes" xml:space="preserve">
          <source>The first code modifies distant memory addresses alternating them at each loop, thus requiring continuously to invalidate the cache.</source>
          <target state="translated">El primer código modifica las direcciones de memoria distante alternándolas en cada bucle,por lo que se requiere continuamente para invalidar la caché.</target>
        </trans-unit>
        <trans-unit id="5ef3f200dc1df02296aa0d9d57d5f615abafce03" translate="yes" xml:space="preserve">
          <source>The first loop alternates writing in each variable. The second and third ones only make small jumps of element size.</source>
          <target state="translated">El primer bucle alterna la escritura en cada variable.El segundo y el tercero sólo hacen pequeños saltos del tamaño del elemento.</target>
        </trans-unit>
        <trans-unit id="53b362c1ef639785451d5a3c807cb56df98f4cb6" translate="yes" xml:space="preserve">
          <source>The graphs below shows, that most of the answers and especially the majority of comments to the question and answers can be considered completely wrong or true depending on the exact scenario and parameters used.</source>
          <target state="translated">En los gráficos que figuran a continuación se muestra que la mayoría de las respuestas y especialmente la mayoría de los comentarios a la pregunta y las respuestas pueden considerarse completamente erróneas o verdaderas dependiendo del escenario exacto y los parámetros utilizados.</target>
        </trans-unit>
        <trans-unit id="11061dc8aadf1e63250f11fc975aecbd7a854095" translate="yes" xml:space="preserve">
          <source>The iterations through the first case &lt;code&gt;Sum&lt;/code&gt; calls &lt;code&gt;f(a)&lt;/code&gt; that will add to its self &lt;code&gt;f(b)&lt;/code&gt; then it calls &lt;code&gt;f(c)&lt;/code&gt; that will do the same but add &lt;code&gt;f(d)&lt;/code&gt; to itself for each &lt;code&gt;100000 iterations&lt;/code&gt;. In the second case we have &lt;code&gt;Sum1&lt;/code&gt; and &lt;code&gt;Sum2&lt;/code&gt; And both act the same as if they were the same function being called twice in a row.
In this case we can treat &lt;code&gt;Sum1&lt;/code&gt; and &lt;code&gt;Sum2&lt;/code&gt; as just plain old &lt;code&gt;Sum&lt;/code&gt; where &lt;code&gt;Sum&lt;/code&gt; in this case looks like this: &lt;code&gt;Sum n=1 : [1,100000] { f(a) = f(a) + f(b); }&lt;/code&gt; and now this looks like an optimization where we can just consider it to be the same function.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Las iteraciones a trav&amp;eacute;s del primer caso &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Sum&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; llama &lt;/font&gt;&lt;/font&gt; &lt;code&gt;f(a)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que se agregar&amp;aacute; a s&amp;iacute; mismo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;f(b)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; luego llama &lt;/font&gt;&lt;/font&gt; &lt;code&gt;f(c)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que har&amp;aacute; lo mismo pero se agregar&amp;aacute; &lt;/font&gt;&lt;/font&gt; &lt;code&gt;f(d)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; a s&amp;iacute; mismo por cada &lt;/font&gt;&lt;/font&gt; &lt;code&gt;100000 iterations&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En el segundo caso tenemos &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Sum1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Sum2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Y ambos act&amp;uacute;an igual que si fueran la misma funci&amp;oacute;n que se llama dos veces seguidas. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En este caso, podemos tratar a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Sum1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Sum2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; como la simple y antigua &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Sum&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; donde &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Sum&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en este caso se ve as&amp;iacute;: &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Sum n=1 : [1,100000] { f(a) = f(a) + f(b); }&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y ahora esto parece una optimizaci&amp;oacute;n en la que podemos considerar que es la misma funci&amp;oacute;n.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="839acec8e710ad109f431376a6eb49f7c7173d08" translate="yes" xml:space="preserve">
          <source>The performance drop in the single-loop is what we are observing. And as mentioned, this is due to the alignment which (most likely) causes &lt;strong&gt;&lt;em&gt;false aliasing&lt;/em&gt;&lt;/strong&gt; stalls in the processor load/store units.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La ca&amp;iacute;da del rendimiento en el bucle &amp;uacute;nico es lo que estamos observando. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Y como se mencion&amp;oacute;, esto se debe a la alineaci&amp;oacute;n que (lo m&amp;aacute;s probable) causa &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;paradas de &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;alias falso&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en las unidades de carga / almacenamiento del procesador.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="47a017a142106a11ba95f378f7d97256b0fed87e" translate="yes" xml:space="preserve">
          <source>The question turned out to be of no relevance, as the behavior severely depends on the sizes of the arrays (n) and the CPU cache. So if there is further interest, I rephrase the question:</source>
          <target state="translated">La pregunta resultó no tener relevancia,ya que el comportamiento depende en gran medida del tamaño de las matrices (n)y de la caché de la CPU.Así que si hay más interés,reformulo la pregunta:</target>
        </trans-unit>
        <trans-unit id="55e711a480f8599f3590ea8955ae90c25f96f446" translate="yes" xml:space="preserve">
          <source>The result using initialized data:</source>
          <target state="translated">El resultado utilizando datos inicializados:</target>
        </trans-unit>
        <trans-unit id="fd12f7273e3c644dfeec1cc8b110b33e50ab5389" translate="yes" xml:space="preserve">
          <source>The result using uninitialized data (this is what Mysticial tested):</source>
          <target state="translated">El resultado usando datos no inicializados (esto es lo que Mysticial probó):</target>
        </trans-unit>
        <trans-unit id="ec79e2db350f70819922aeda7c7c4a134df70af6" translate="yes" xml:space="preserve">
          <source>The second code don't alternate: it just flow on adjacent addresses twice. This makes all the job to be completed in the cache, invalidating it only after the second loop starts.</source>
          <target state="translated">El segundo código no se alterna:sólo fluye dos veces en direcciones adyacentes.Esto hace que todo el trabajo se complete en el cache,invalidándolo sólo después de que comience el segundo bucle.</target>
        </trans-unit>
        <trans-unit id="962b2d1921173e1b25de62eb8401f26848105752" translate="yes" xml:space="preserve">
          <source>The second loop involves a lot less cache activity, so it's easier for the processor to keep up with the memory demands.</source>
          <target state="translated">El segundo bucle implica mucha menos actividad de caché,por lo que es más fácil para el procesador mantenerse al día con las demandas de memoria.</target>
        </trans-unit>
        <trans-unit id="b406d7fb1215ac51706584a1368661dc6d6bb19f" translate="yes" xml:space="preserve">
          <source>There are many answers, that led to a lot of discussion, but let's face it: Cache issues can be very complex and are not one dimensional. They depend heavily on the size of the data, so my question was unfair: It turned out to be at a very interesting point in the cache graph.</source>
          <target state="translated">Hay muchas respuestas,que llevaron a mucha discusión,pero afrontémoslo:Los temas de la memoria caché pueden ser muy complejos y no son unidimensionales.Dependen mucho del tamaño de los datos,así que mi pregunta fue injusta:Resultó ser en un punto muy interesante en el gráfico de la caché.</target>
        </trans-unit>
        <trans-unit id="1dde209c4b83d4186745de8cde5c487345b16c11" translate="yes" xml:space="preserve">
          <source>There seems to be a little confusion/misunderstanding here so I will try to elaborate a little using an example.</source>
          <target state="translated">Parece que hay un poco de confusión y malentendido aquí,así que trataré de elaborar un poco usando un ejemplo.</target>
        </trans-unit>
        <trans-unit id="13059574a86e8647f17f49a9a0b752694791c080" translate="yes" xml:space="preserve">
          <source>Think of the &lt;code&gt;For Loops&lt;/code&gt; as being the &lt;code&gt;Summations&lt;/code&gt; that does the iterations as being a &lt;code&gt;Boss&lt;/code&gt; that is giving orders to two people &lt;code&gt;A&lt;/code&gt; &amp;amp; &lt;code&gt;B&lt;/code&gt; and that their jobs are to meat &lt;code&gt;C&lt;/code&gt; &amp;amp; &lt;code&gt;D&lt;/code&gt; respectively and to pick up some package from them and return it. In the analogy here the for loop or summation iterations and condition checks themselves doesn't actually represent the &lt;code&gt;Boss&lt;/code&gt;. What actually represents the &lt;code&gt;Boss&lt;/code&gt; here is not from the actual mathematical algorithms directly, but from the actual concept of &lt;code&gt;Scope&lt;/code&gt; and &lt;code&gt;Code Block&lt;/code&gt; within a routine or sub-routine, method, function, translation unit, etc. The first algorithm has 1 scope where the 2nd algorithm has 2 consecutive scopes.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Piense en &lt;/font&gt;&lt;/font&gt; &lt;code&gt;For Loops&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; como las &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Summations&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que hacen las iteraciones como un &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Boss&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que est&amp;aacute; dando &amp;oacute;rdenes a dos personas &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;B&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y que sus trabajos son para carne &lt;/font&gt;&lt;/font&gt; &lt;code&gt;C&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;D&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; respectivamente y para recoger un paquete de ellos y devolverlo. En la analog&amp;iacute;a aqu&amp;iacute;, el bucle for o las iteraciones de suma y las comprobaciones de condici&amp;oacute;n en s&amp;iacute; mismas no representan al &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Boss&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . Lo que realmente representa al &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Boss&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; aqu&amp;iacute; no proviene directamente de los algoritmos matem&amp;aacute;ticos reales, sino del concepto real de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Scope&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Code Block&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; dentro de una rutina o subrutina, m&amp;eacute;todo, funci&amp;oacute;n, unidad de traducci&amp;oacute;n, etc. El primer algoritmo tiene 1 alcance donde el segundo algoritmo tiene 2 &amp;aacute;mbitos consecutivos.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7d22a1fbb64d76304433f24947bf410c0f8af3df" translate="yes" xml:space="preserve">
          <source>This is a classic cache thrash scenario.</source>
          <target state="translated">Este es un clásico escenario de cacheo.</target>
        </trans-unit>
        <trans-unit id="b8ffc8c4ef1a03c73bb9e0821c047ab1262b9819" translate="yes" xml:space="preserve">
          <source>This loop is executed 10,000 times via another outer &lt;code&gt;for&lt;/code&gt; loop. To speed it up, I changed the code to:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Este bucle se ejecuta 10,000 veces a trav&amp;eacute;s de otro &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;bucle &lt;/font&gt;&lt;/font&gt; &lt;code&gt;for&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; externo &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para acelerarlo, cambi&amp;eacute; el c&amp;oacute;digo a:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fdc4cb320e8145a3a5607c0217bc3a252c1582a3" translate="yes" xml:space="preserve">
          <source>This means that all your accesses in each loop will fall on the same cache way. However, Intel processors have had 8-way L1 cache associativity for a while. But in reality, the performance isn't completely uniform. Accessing 4-ways is still slower than say 2-ways.</source>
          <target state="translated">Esto significa que todos tus accesos en cada bucle caerán en la misma forma de caché.Sin embargo,los procesadores de Intel han tenido una asociatividad de caché L1 de 8 vías durante un tiempo.Pero en realidad,el rendimiento no es completamente uniforme.Acceder a 4 vías sigue siendo más lento que,por ejemplo,a 2 vías.</target>
        </trans-unit>
        <trans-unit id="116c64a804cda018eff54aace684b048096784b8" translate="yes" xml:space="preserve">
          <source>This one is easy. The dataset is so small that the performance is dominated by overhead like looping and branching.</source>
          <target state="translated">Esta es fácil.El conjunto de datos es tan pequeño que el rendimiento está dominado por la sobrecarga como el bucle y las ramificaciones.</target>
        </trans-unit>
        <trans-unit id="b993a65de9f293825c5e5d9683062a32d8b141b3" translate="yes" xml:space="preserve">
          <source>Total cost = &lt;code&gt;(100 + 100 + 1 + 1) * 2 = 404&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Costo total = &lt;/font&gt;&lt;/font&gt; &lt;code&gt;(100 + 100 + 1 + 1) * 2 = 404&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="19d3bb17d59a55f8338d5c4fce0ae33dc728b87f" translate="yes" xml:space="preserve">
          <source>Total cost = &lt;code&gt;(100 + 100 + 100 + 100) * 2 = 800&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Costo total = &lt;/font&gt;&lt;/font&gt; &lt;code&gt;(100 + 100 + 100 + 100) * 2 = 800&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="03360fc5f946227bc07190906ff6d7139444c907" translate="yes" xml:space="preserve">
          <source>Try writing two parallel lines of 20 crosses with a pen and paper separated by 20&amp;nbsp;cm. Try once finishing one and then the other line and try another time by writting a cross in each line alternately.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Intente escribir dos l&amp;iacute;neas paralelas de 20 cruces con un bol&amp;iacute;grafo y papel separados por 20 cm. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Intente terminar una y luego la otra l&amp;iacute;nea e intente otra vez escribiendo una cruz en cada l&amp;iacute;nea alternativamente.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="53bfab4d116eca32e1091f50ff7bca7f57441a62" translate="yes" xml:space="preserve">
          <source>Two loops: 1.507 ms</source>
          <target state="translated">Dos bucles:1.507 ms</target>
        </trans-unit>
        <trans-unit id="466d5a25d4be7521ae09c87f6a46e0b628a3542a" translate="yes" xml:space="preserve">
          <source>Upon further analysis of this, I believe this is (at least partially) caused by data alignment of the four pointers. This will cause some level of cache bank/way conflicts.</source>
          <target state="translated">Tras un análisis más detallado de esto,creo que esto es (al menos parcialmente)causado por la alineación de los datos de los cuatro punteros.Esto causará algún nivel de conflictos en la memoria caché.</target>
        </trans-unit>
        <trans-unit id="cfeab75af6e84b33c6a6527778a734b3d9e7b1ed" translate="yes" xml:space="preserve">
          <source>We can easily see that 600 is far less than 10 million. Now this isn't exact, because we don't know the actual difference in distance between which address of RAM or from which Cache or Page File each call on each iteration is going to be due to many other unseen variables, but this is just an assessment of the situation to be aware of and trying to look at it from the worst case scenario.</source>
          <target state="translated">Podemos ver fácilmente que 600 es mucho menos que 10 millones.Ahora bien,esto no es exacto,porque no sabemos la diferencia real de distancia entre qué dirección de la RAM o desde qué caché o archivo de página cada llamada en cada iteración va a ser debido a muchas otras variables no vistas,pero esto es sólo una evaluación de la situación para ser consciente y tratar de verla desde el peor de los casos.</target>
        </trans-unit>
        <trans-unit id="fc174d905f4eb44c872c08d03546c6a40948ee8c" translate="yes" xml:space="preserve">
          <source>We do not know how long it will take for each case unless if we set a counter and run a bench mark test. However the bench marks were already included from the original question and from some of the answers and comments as well and we can see a significant difference between the two and this is the whole reasoning of this question to this problem and for the answering of it to begin with.</source>
          <target state="translated">No sabemos cuánto tiempo tomará cada caso a menos que pongamos un contador y hagamos una prueba de referencia.Sin embargo,los puntos de referencia ya se incluyeron en la pregunta original y en algunas de las respuestas y comentarios también y podemos ver una diferencia significativa entre los dos y este es todo el razonamiento de esta pregunta a este problema y para la respuesta de la misma para empezar.</target>
        </trans-unit>
        <trans-unit id="0e08bbd8348ea9fc71c47393bb70640f1c01606b" translate="yes" xml:space="preserve">
          <source>We know is that his loop will run 100,000 times. We also know that &lt;code&gt;a1&lt;/code&gt;, &lt;code&gt;b1&lt;/code&gt;, &lt;code&gt;c1&lt;/code&gt; &amp;amp; &lt;code&gt;d1&lt;/code&gt; are pointers on a 64-bit architecture. Within C++ on a 32-bit machine all pointers are 4 bytes and on a 64-bit machine they are 8 bytes in size since pointers are of a fixed length. We know that we have 32 bytes in which to allocate for in both cases. The only difference is we are allocating 32 bytes or 2 sets of 2-8bytes on each iteration where in the 2nd case we are allocating 16 bytes for each iteration for both of the independent loops. So both loops still equals 32 bytes in total allocations. With this information let's go ahead and show the general math, algorithm and analogy of it. We do know the amount of times that the same set or group of operations will have to be performed in both cases. We do know the amount of memory that needs to be allocated in both cases. We can asses that the overall work load of the allocations between both cases will be approximately the same.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Sabemos que su ciclo se ejecutar&amp;aacute; 100,000 veces. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tambi&amp;eacute;n sabemos que &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;b1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;c1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;d1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;son punteros en una arquitectura de 64 bits. Dentro de C ++ en una m&amp;aacute;quina de 32 bits, todos los punteros tienen 4 bytes y en una m&amp;aacute;quina de 64 bits tienen un tama&amp;ntilde;o de 8 bytes, ya que los punteros tienen una longitud fija. Sabemos que tenemos 32 bytes para asignar en ambos casos. La &amp;uacute;nica diferencia es que estamos asignando 32 bytes o 2 conjuntos de 2-8 bytes en cada iteraci&amp;oacute;n, en el segundo caso estamos asignando 16 bytes para cada iteraci&amp;oacute;n para los dos bucles independientes. Entonces, ambos bucles a&amp;uacute;n equivalen a 32 bytes en asignaciones totales. Con esta informaci&amp;oacute;n sigamos adelante y muestremos las matem&amp;aacute;ticas generales, el algoritmo y la analog&amp;iacute;a de los mismos. Sabemos la cantidad de veces que el mismo conjunto o grupo de operaciones tendr&amp;aacute; que realizarse en ambos casos. Sabemos la cantidad de memoria que debe asignarse en ambos casos.Podemos evaluar que la carga de trabajo general de las asignaciones entre ambos casos ser&amp;aacute; aproximadamente la misma.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6fe2e5f01c8d98ddfcee1b601d0fceb67a183e49" translate="yes" xml:space="preserve">
          <source>We will let our loop and its iterations be a Summation that starts at 1 and ends at 100000 instead of starting with 0 as in the loops for we don't need to worry about the 0 indexing scheme of memory addressing since we are just interested in the algorithm itself.</source>
          <target state="translated">Dejaremos que nuestro bucle y sus iteraciones sean una suma que comience en 1 y termine en 100000 en lugar de comenzar con 0 como en los bucles,ya que no tenemos que preocuparnos por el esquema de indexación 0 del direccionamiento de la memoria,ya que sólo nos interesa el algoritmo en sí.</target>
        </trans-unit>
        <trans-unit id="92ea6c5b9c179b6799de261eafa3d472f7094b3e" translate="yes" xml:space="preserve">
          <source>Why are elementwise additions much faster in separate loops than in a combined loop</source>
          <target state="translated">¿Por qué las adiciones de elementos son mucho más rápidas en bucles separados que en un bucle combinado</target>
        </trans-unit>
        <trans-unit id="18d746b56edfc3b8c8160872d27b4b8ee0118420" translate="yes" xml:space="preserve">
          <source>Why is one loop so much slower than two loops?</source>
          <target state="translated">¿Por qué un bucle es mucho más lento que dos bucles?</target>
        </trans-unit>
        <trans-unit id="564f8c6e76fbd512be2e38dabdfdd61550d0c3cc" translate="yes" xml:space="preserve">
          <source>With</source>
          <target state="translated">With</target>
        </trans-unit>
        <trans-unit id="4b65d240f83b92820bd73e3c9a1ea691dbb385f6" translate="yes" xml:space="preserve">
          <source>With what we seen in the second case it almost appears as if there is optimization since both for loops have the same exact signature, but this isn't the real issue. The issue isn't the work that is being done by &lt;code&gt;f(a)&lt;/code&gt;,&lt;code&gt;f(b)&lt;/code&gt;,&lt;code&gt;f(c)&lt;/code&gt;&amp;amp;&lt;code&gt;f(d)&lt;/code&gt; in both cases and the comparison between the two it is the difference in the distance that the Summation has to travel in both cases that gives you the difference in time execution.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Con lo que vimos en el segundo caso, casi parece que hay una optimizaci&amp;oacute;n, ya que ambos bucles tienen la misma firma exacta, pero este no es el problema real. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La cuesti&amp;oacute;n no es el trabajo que se est&amp;aacute; haciendo por &lt;/font&gt;&lt;/font&gt; &lt;code&gt;f(a)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;f(b)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;f(c)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;f(d)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en ambos casos y la comparaci&amp;oacute;n entre los dos es la diferencia en la distancia que la suma tiene que viajar en ambos casos que le da la diferencia en la ejecuci&amp;oacute;n del tiempo.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5b289bf7d150d141a9a06f034bc238a251f98430" translate="yes" xml:space="preserve">
          <source>Within the first case on each call slip the &lt;code&gt;Boss&lt;/code&gt; goes to &lt;code&gt;A&lt;/code&gt; and gives the order and &lt;code&gt;A&lt;/code&gt; goes off to fetch &lt;code&gt;B's&lt;/code&gt; package then the &lt;code&gt;Boss&lt;/code&gt; goes to &lt;code&gt;C&lt;/code&gt; and gives the orders to do the same and receive the package from &lt;code&gt;D&lt;/code&gt; on each iteration.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Dentro del primer caso en cada recibo de llamada, el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Boss&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; va a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y da la orden y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; se&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; va a buscar &lt;/font&gt;&lt;/font&gt; &lt;code&gt;B's&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; paquete &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;de B,&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; luego el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Boss&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; va a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;C&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y le da las &amp;oacute;rdenes de hacer lo mismo y recibir el paquete de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;D&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en cada iteraci&amp;oacute;n.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="39b360ce4a3ca0bb5ddbee9c9161b830580197e7" translate="yes" xml:space="preserve">
          <source>Within the second case the &lt;code&gt;Boss&lt;/code&gt; works directly with &lt;code&gt;A&lt;/code&gt; to go and fetch &lt;code&gt;B's&lt;/code&gt; package until all packages are received. Then the &lt;code&gt;Boss&lt;/code&gt; works with &lt;code&gt;C&lt;/code&gt; to do the same for getting all of &lt;code&gt;D's&lt;/code&gt; packages.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Dentro del segundo caso, el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Boss&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; trabaja directamente con &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para ir a buscar &lt;/font&gt;&lt;/font&gt; &lt;code&gt;B's&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; paquete &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;de B&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; hasta que se reciban todos los paquetes. Luego, el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Boss&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; trabaja con &lt;/font&gt;&lt;/font&gt; &lt;code&gt;C&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para hacer lo mismo para obtener todos &lt;/font&gt;&lt;/font&gt; &lt;code&gt;D's&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; paquetes &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;de &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;D.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3110f136849c94cb9d21af5da4f6ed9ad5781ffe" translate="yes" xml:space="preserve">
          <source>You are probably not seeing disk caching in your tests but you are probably seeing the side effects of some other form of caching.</source>
          <target state="translated">Es probable que no esté viendo el almacenamiento en disco en sus pruebas,pero es probable que esté viendo los efectos secundarios de alguna otra forma de almacenamiento en disco.</target>
        </trans-unit>
        <trans-unit id="d64399c3ca292db5e91589fa738bc463f2006e98" translate="yes" xml:space="preserve">
          <source>cache &lt;code&gt;a[0]&lt;/code&gt; and &lt;code&gt;a[1]&lt;/code&gt; then &lt;code&gt;b[0]&lt;/code&gt; and &lt;code&gt;b[1]&lt;/code&gt; and set &lt;code&gt;a[0] = a[0] + b[0]&lt;/code&gt; in cache - there are now four bytes in cache, &lt;code&gt;a[0], a[1]&lt;/code&gt; and &lt;code&gt;b[0], b[1]&lt;/code&gt;. Cost = 100 + 100.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;cach&amp;eacute; &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a[0]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a[1]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; a continuaci&amp;oacute;n, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;b[0]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;b[1]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y ajuste &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a[0] = a[0] + b[0]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en cache - ahora hay cuatro bytes en la memoria cach&amp;eacute;, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a[0], a[1]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;b[0], b[1]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Costo = 100 + 100.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="684691450b6f67d64ea5716630cb055d1cdb5528" translate="yes" xml:space="preserve">
          <source>eject &lt;code&gt;a[0], a[1], b[0], b[1]&lt;/code&gt; from cache and cache &lt;code&gt;c[0]&lt;/code&gt; and &lt;code&gt;c[1]&lt;/code&gt; then &lt;code&gt;d[0]&lt;/code&gt; and &lt;code&gt;d[1]&lt;/code&gt; and set &lt;code&gt;c[0] = c[0] + d[0]&lt;/code&gt; in cache. Cost = 100 + 100.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;expulsar &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a[0], a[1], b[0], b[1]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; de la memoria cach&amp;eacute; y la memoria cach&amp;eacute; &lt;/font&gt;&lt;/font&gt; &lt;code&gt;c[0]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;c[1]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; a continuaci&amp;oacute;n, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;d[0]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;d[1]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y el conjunto de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;c[0] = c[0] + d[0]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en cach&amp;eacute;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Costo = 100 + 100.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a45d1263f7e0797a6fe6f7b721f3312f94b14dd6" translate="yes" xml:space="preserve">
          <source>set &lt;code&gt;a[1] = a[1] + b[1]&lt;/code&gt; in cache. Cost = 1 + 1.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;establecer &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a[1] = a[1] + b[1]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en cach&amp;eacute;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Costo = 1 + 1.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e726e4b336529f67262f81f3ff5432cad1d3985d" translate="yes" xml:space="preserve">
          <source>the other loop</source>
          <target state="translated">el otro bucle</target>
        </trans-unit>
        <trans-unit id="871fc8b4792054b058d6099d151b8f4a8322450f" translate="yes" xml:space="preserve">
          <source>will page out two arrays and page in the other two &lt;strong&gt;every time around the loop&lt;/strong&gt;. This would obviously be &lt;strong&gt;much&lt;/strong&gt; slower.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;buscar&amp;aacute; dos matrices y buscar&amp;aacute; en las otras dos &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;cada vez alrededor del bucle&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Obviamente, esto ser&amp;iacute;a &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;mucho&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; m&amp;aacute;s lento.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="30905af2bb584e30c36e5d7802c5f32420f342d3" translate="yes" xml:space="preserve">
          <source>would first cause &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; to be loaded into RAM and then be worked on entirely in RAM. When the second loop starts, &lt;code&gt;c&lt;/code&gt; and &lt;code&gt;d&lt;/code&gt; would then be loaded from disk into RAM and operated on.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;primero har&amp;iacute;a que &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;b&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; se carguen en la RAM y luego se trabaje completamente en la RAM. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cuando el segundo bucle se inicia, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;c&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;d&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ser&amp;iacute;an entonces cargados desde el disco en la memoria RAM y operado.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
