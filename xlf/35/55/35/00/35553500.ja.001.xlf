<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/35553500">
    <body>
      <group id="35553500">
        <trans-unit id="c5fdbed70e669b038bcfb2cab90deeaf62877bee" translate="yes" xml:space="preserve">
          <source>&quot;Get&quot; request with appending headers transform to &quot;Options&quot; request. So Cors policy problems occur. You have to implement &quot;Options&quot; request to your server.</source>
          <target state="translated">&quot;Get &quot;リクエストにヘッダを追加して &quot;Options &quot;リクエストに変換します。そのため、Corsのポリシーに問題が発生します。オプション &quot;リクエストをサーバに実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="f69aaadff17bc308b050f9fadf2f5785686ce694" translate="yes" xml:space="preserve">
          <source>&amp;hellip; but the browser has no way of knowing if either of the above are true, so trust is not automatic and the SOP is applied. Permission has to be granted explicitly before the browser will give the data it was given to a different website.</source>
          <target state="translated">&amp;hellip;しかし、ブラウザは上記のいずれかが真であるかどうかを知る方法がないため、信頼は自動的ではなく、SOPが適用されます。 ブラウザーが別のWebサイトに与えられたデータを提供する前に、明示的に許可を与える必要があります。</target>
        </trans-unit>
        <trans-unit id="aa3428b119285e7b20310e804868ca099ac810ab" translate="yes" xml:space="preserve">
          <source>&amp;hellip; in the response headers to permit any website to read the data.</source>
          <target state="translated">&amp;hellip;応答ヘッダーで、任意のWebサイトがデータを読み取ることを許可します。</target>
        </trans-unit>
        <trans-unit id="0666e400461e2ce9ecc28ecb83674c30b2511723" translate="yes" xml:space="preserve">
          <source>&amp;hellip; would allow only a specific site to access it, and Bob can dynamically generate that based on the &lt;code&gt;Origin&lt;/code&gt;&lt;em&gt;request&lt;/em&gt; header to permit multiple, but not all, sites to access it.</source>
          <target state="translated">&amp;hellip;特定のサイトのみにアクセスを許可し、Bobは &lt;code&gt;Origin&lt;/code&gt; &lt;em&gt;リクエスト&lt;/em&gt;ヘッダーに基づいて動的に生成して、すべてではなく複数のサイトにアクセスを許可できます。</target>
        </trans-unit>
        <trans-unit id="3083c68c35322c957b6383c55bcd22231a4d4652" translate="yes" xml:space="preserve">
          <source>(Weirdly, it also applies to CSS fonts, but that is because found foundries insisted on DRM and not for the security issues that the Same Origin Policy usually covers).</source>
          <target state="translated">(不思議なことに、これは CSS フォントにも適用されますが、これはファウンドリが DRM を主張したためであり、同一起源規則が通常カバーしているセキュリティの問題ではないからです)。</target>
        </trans-unit>
        <trans-unit id="c721f376efe00285946ac6d7bf010b66ff393846" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;*&lt;/code&gt; Browser extensions do need to be written carefully to avoid cross-origin issues. &lt;a href=&quot;https://www.chromium.org/Home/chromium-security/extension-content-script-fetches&quot;&gt;See the Chrome documentation for example&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;*&lt;/code&gt; クロスオリジンの問題を回避するために、ブラウザ拡張機能は慎重に記述する必要があります。 &lt;a href=&quot;https://www.chromium.org/Home/chromium-security/extension-content-script-fetches&quot;&gt;例については、Chromeのドキュメントを参照してください&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="ccf579f23dfb488978fdf26171abc0e7c4458b84" translate="yes" xml:space="preserve">
          <source>A Proxy</source>
          <target state="translated">代理人</target>
        </trans-unit>
        <trans-unit id="12bdfbed461b262c6a3ff537a120d9b8a0e256c7" translate="yes" xml:space="preserve">
          <source>A basic implementation would just include:</source>
          <target state="translated">基本的な実装であれば、単に含まれているだけでしょう。</target>
        </trans-unit>
        <trans-unit id="79adb0593bc6b4bf0a194d641b36d1310630c1a5" translate="yes" xml:space="preserve">
          <source>About the Same Origin Policy</source>
          <target state="translated">同一起源規定について</target>
        </trans-unit>
        <trans-unit id="cedda5083aa15826802650527c14fd360bd167bc" translate="yes" xml:space="preserve">
          <source>Access to fetch at '&lt;code&gt;https://example.com/&lt;/code&gt;' from origin '&lt;code&gt;https://example.net&lt;/code&gt;' has been blocked by CORS policy: No '&lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt;' header is present on the requested resource. If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled.</source>
          <target state="translated">「 &lt;code&gt;https://example.com/&lt;/code&gt; 」での起点「 https://example.net 」からのフェッチへのアクセスがCORSポリシーによってブロックされました：要求されたリソースに「 &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; 」ヘッダーが存在しません。 不透明な応答でニーズが満たされる場合は、リクエストのモードを「no-cors」に設定して、CORSを無効にしてリソースをフェッチします。</target>
        </trans-unit>
        <trans-unit id="7b7974bfa3fba0e3975c4d056b6b9ca1197d455e" translate="yes" xml:space="preserve">
          <source>Alice is a person with a web browser</source>
          <target state="translated">アリスはWebブラウザを使っている人</target>
        </trans-unit>
        <trans-unit id="080d446b3afc60112cc22d7278d349fef3fd6d9e" translate="yes" xml:space="preserve">
          <source>Alice is logged into Bob's site and has some confidential data there. Perhaps it is a company intranet (accessible only to browsers on the LAN), or her online banking (accessible only with a cookie you get after entering a username and password).</source>
          <target state="translated">アリスはボブのサイトにログインしていて、そこに機密データを持っています。おそらくそれは社内のイントラネット(LAN上のブラウザからのみアクセス可能)か、彼女のオンラインバンキング(ユーザー名とパスワードを入力した後に得られるクッキーでのみアクセス可能)だと思われます。</target>
        </trans-unit>
        <trans-unit id="2f9059ae8633c85b7699e923ebb41ea7becd668e" translate="yes" xml:space="preserve">
          <source>Alice visits Mallory's website which has some JavaScript that causes Alice's browser to make an HTTP request to Bob's website (from her IP address with her cookies, etc). This could be as simple as using &lt;code&gt;XMLHttpRequest&lt;/code&gt; and reading the &lt;code&gt;responseText&lt;/code&gt;.</source>
          <target state="translated">アリスは、アリスのブラウザにボブのウェブサイトへのHTTPリクエスト（彼女のIPアドレスからのCookieなど）を実行させるJavaScriptが含まれているマロリーのウェブサイトにアクセスします。 これは、 &lt;code&gt;XMLHttpRequest&lt;/code&gt; を使用して &lt;code&gt;responseText&lt;/code&gt; を読み取るのと同じくらい簡単です。</target>
        </trans-unit>
        <trans-unit id="5bdc163ef94b8775f3c2206de222d5cdbb730053" translate="yes" xml:space="preserve">
          <source>Alice, Bob and Mallory are the same person.</source>
          <target state="translated">アリスとボブとマロリーは同一人物。</target>
        </trans-unit>
        <trans-unit id="e356eab4f83b3e77df9f9a8c73c681fa3b5ef7cc" translate="yes" xml:space="preserve">
          <source>Alternatives to CORS</source>
          <target state="translated">CORSの代替品</target>
        </trans-unit>
        <trans-unit id="3f9bf680f2d7e601b6b53dc367493c6e9226daf2" translate="yes" xml:space="preserve">
          <source>As noted in the section &quot;Why the Same Origin Policy only applies to JavaScript in a web page&quot;, you can avoid the SOP by not writing JavaScript in a webpage.</source>
          <target state="translated">同一オリジンポリシーがWebページのJavaScriptにのみ適用される理由」で述べたように、WebページにJavaScriptを記述しないことでSOPを回避することができます。</target>
        </trans-unit>
        <trans-unit id="d506fbbc5a8bc383106b8326dc9ab129456f337c" translate="yes" xml:space="preserve">
          <source>As this isn't mentioned in the accepted answer.</source>
          <target state="translated">受理された回答には記載されていないので</target>
        </trans-unit>
        <trans-unit id="3b05e4adacdafe56d47f3926c61aa1bd3e81b8aa" translate="yes" xml:space="preserve">
          <source>Bob could also provide the data using a hack like &lt;a href=&quot;https://stackoverflow.com/questions/2067472/what-is-jsonp-all-about&quot;&gt;JSONP&lt;/a&gt; which is how people did cross-origin Ajax before CORS came along.</source>
          <target state="translated">ボブは、 &lt;a href=&quot;https://stackoverflow.com/questions/2067472/what-is-jsonp-all-about&quot;&gt;JSONPの&lt;/a&gt;ようなハックを使用してデータを提供することもできます。これは、CORSが登場する前に人々がAjaxをクロスオリジンで作成した方法です。</target>
        </trans-unit>
        <trans-unit id="1ea8ca767428c6dc82740ebab1a317eb537dfc17" translate="yes" xml:space="preserve">
          <source>Bob is providing entirely public information</source>
          <target state="translated">ボブは完全に公開情報を提供している</target>
        </trans-unit>
        <trans-unit id="4ad9e5a181ccf4d48e00fa324c6d3fa0e330762e" translate="yes" xml:space="preserve">
          <source>Bob runs a website (&lt;code&gt;https://www.[website].com/&lt;/code&gt; in your example)</source>
          <target state="translated">BobはWebサイト（例では &lt;code&gt;https://www.[website].com/&lt;/code&gt; しています</target>
        </trans-unit>
        <trans-unit id="ddc4f8c91108ac2bf18e262a30c2fd7398d649f7" translate="yes" xml:space="preserve">
          <source>Bob wouldn't need to grant any permissions for that to happen.</source>
          <target state="translated">ボブはそのために許可を与える必要はないでしょう。</target>
        </trans-unit>
        <trans-unit id="0a7792b7795b50e8301b591ad82091d0598c147a" translate="yes" xml:space="preserve">
          <source>Browser extensions</source>
          <target state="translated">ブラウザの拡張機能</target>
        </trans-unit>
        <trans-unit id="52a3e647edc456ec783b6d63aa3dd4cf5795f836" translate="yes" xml:space="preserve">
          <source>Browser extensions&lt;code&gt;*&lt;/code&gt;, the Network tab in browser developer tools and applications like Postman are installed software. They aren't passing data from one website to the JavaScript belonging to a different website &lt;em&gt;just because you visited that different website&lt;/em&gt;. Installing software usually takes a more conscious choice.</source>
          <target state="translated">ブラウザー拡張機能 &lt;code&gt;*&lt;/code&gt; 、ブラウザー開発者ツールの[ネットワーク]タブ、およびPostmanなどのアプリケーションは、インストールされたソフトウェアです。 あるWebサイトから別のWebサイトにアクセス&lt;em&gt;したからといっ&lt;/em&gt;て、別のWebサイトに属しているJavaScriptにデータを渡していないの&lt;em&gt;です&lt;/em&gt; 。 ソフトウェアのインストールは通常、より意識的な選択を行います。</target>
        </trans-unit>
        <trans-unit id="02de3c6a5d36416398534d79472aff7a9ccfbc69" translate="yes" xml:space="preserve">
          <source>But I'm not Bob!</source>
          <target state="translated">でも私はボブじゃない!</target>
        </trans-unit>
        <trans-unit id="2139aadec237bbecb581e62932f94bc3bce7a704" translate="yes" xml:space="preserve">
          <source>CORS</source>
          <target state="translated">CORS</target>
        </trans-unit>
        <trans-unit id="72a7bba2b6e46912da58c628abb44b1d77e213c9" translate="yes" xml:space="preserve">
          <source>Common mistakes that trigger this include:</source>
          <target state="translated">そのきっかけとなるよくある間違いには、以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="7b6794110b358bc83a6cd7c420d7cd48e8a0d272" translate="yes" xml:space="preserve">
          <source>Consequently, Mallory can only use this technique to read &lt;em&gt;public&lt;/em&gt; data.</source>
          <target state="translated">したがって、マロリーはこの手法を使用して&lt;em&gt;公開&lt;/em&gt;データを読み取ることしかできません。</target>
        </trans-unit>
        <trans-unit id="22709a8723fb233b31baf16067c518f10a970801" translate="yes" xml:space="preserve">
          <source>Couldn't be generated with a regular HTML form (e.g. has custom headers or a Content-Type that you couldn't use in a form's &lt;code&gt;enctype&lt;/code&gt;).</source>
          <target state="translated">通常のHTMLフォームでは生成できませんでした（例：フォームの &lt;code&gt;enctype&lt;/code&gt; で使用できないカスタムヘッダーまたはContent-Typeがあります）。</target>
        </trans-unit>
        <trans-unit id="9f7023ae6c0c7bb388366399240a29d8f70d9716" translate="yes" xml:space="preserve">
          <source>Error messages which mention &quot;Response for preflight&quot;</source>
          <target state="translated">プリフライトの応答」について言及したエラーメッセージ</target>
        </trans-unit>
        <trans-unit id="de11082858543756881cde0b6cf3f0aabed14671" translate="yes" xml:space="preserve">
          <source>For any given URL it is possible that the SOP is not needed. A couple of common scenarios where this is the case are:</source>
          <target state="translated">任意の URL については、SOP が必要ない可能性があります。このような場合には、いくつかの一般的なシナリオがあります。</target>
        </trans-unit>
        <trans-unit id="360422379e164038fc5a13abf8702a9a03c5924c" translate="yes" xml:space="preserve">
          <source>Having a proper development environment with a local development &lt;em&gt;server&lt;/em&gt; 
is usually a better approach.</source>
          <target state="translated">通常、ローカル開発&lt;em&gt;サーバー&lt;/em&gt;で適切な開発環境を用意することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="8c77c3320c21e1da3d952fdceed8b3d5a9040f1b" translate="yes" xml:space="preserve">
          <source>How to do it is explained by the Chrome error message given when you make a request using &lt;code&gt;fetch&lt;/code&gt; and don't get permission to view the response with CORS:</source>
          <target state="translated">これを行う方法は、 &lt;code&gt;fetch&lt;/code&gt; を使用してリクエストを作成し、CORSでレスポンスを表示する権限を取得していないときに表示されるChromeエラーメッセージで説明されています。</target>
        </trans-unit>
        <trans-unit id="b5a2e8f7365ba0b05a0e386702f943744a084420" translate="yes" xml:space="preserve">
          <source>How to get a cross-origin resource sharing (CORS) post request working</source>
          <target state="translated">クロスオリジンリソース共有(CORS)のポストリクエストを機能させる方法</target>
        </trans-unit>
        <trans-unit id="4544234b52783d9ce6c7523afb3788d72f490ed8" translate="yes" xml:space="preserve">
          <source>I got the same error in Chrome console.</source>
          <target state="translated">Chromeコンソールでも同じエラーが出ました。</target>
        </trans-unit>
        <trans-unit id="191fa4c21ffb0259f46e3158d042758a40108e3b" translate="yes" xml:space="preserve">
          <source>I have a Grunt process which initiates an instance of express.js server. This was working absolutely fine up until just now when it started serving a blank page with the following appearing in the error log in the developer's console in Chrome (latest version):</source>
          <target state="translated">私は、express.jsサーバーのインスタンスを起動するGruntプロセスを持っています。これは今まで全く問題なく動作していましたが、先ほどまでは空白のページが表示され、Chrome(最新版)の開発者コンソールのエラーログに以下のように表示されていました。</target>
        </trans-unit>
        <trans-unit id="696b9bf9d526b3f1a17737731ae9d27d92d1474e" translate="yes" xml:space="preserve">
          <source>I'm having this issue currently under different reason.
My front end is returning 'Access-Control-Allow-Origin' header error as well.</source>
          <target state="translated">私は現在、別の理由でこの問題を抱えています。私のフロントエンドも同様に 'Access-Control-Allow-Origin' ヘッダーエラーを返しています。</target>
        </trans-unit>
        <trans-unit id="abe02bb96c36c6f655503931ed03c194f5f3b1cd" translate="yes" xml:space="preserve">
          <source>If Bob is running a public API then there might be a mechanism to turn on CORS (perhaps by formatting the request in a certain way, or a config option after logging into a Developer Portal site for Bob's site). This will have to be a mechanism implemented by Bob though. Mallory could read the documentation on Bob's site to see if something is available, or she could talk to Bob and ask him to implement CORS.</source>
          <target state="translated">Bob が public API を実行している場合、CORS を有効にする仕組みがあるかもしれません (おそらくリクエストを特定の方法でフォーマットするか、Bob のサイトの開発者ポータルサイトにログインした後に設定オプションを設定する)。しかし、これはBobが実装したメカニズムでなければなりません。Mallory は Bob のサイトのドキュメントを読んで何か利用可能なものがあるかどうかを確認するか、あるいは Bob に相談して CORS の実装を依頼することができます。</target>
        </trans-unit>
        <trans-unit id="92ad6fa7497aadeaf8ff53a9f87b47f0a06f7043" translate="yes" xml:space="preserve">
          <source>If it is a public service:</source>
          <target state="translated">公共サービスであれば</target>
        </trans-unit>
        <trans-unit id="b43202b21aa22f1dcb0dbdd04e2b92e038006f59" translate="yes" xml:space="preserve">
          <source>If none of the above apply: Get the browser to talk to &lt;em&gt;your&lt;/em&gt; server instead, and then have your server fetch the data from the other server and pass it on. (There are also third-party hosted services which attach CORS headers to publically accessible resources that you could use).</source>
          <target state="translated">上記のいずれにも当てはまらない場合：代わりにブラウザーにサーバーと通信さ&lt;em&gt;せ、&lt;/em&gt;サーバーに他のサーバーからデータをフェッチして渡します。 （CORSヘッダーを公的にアクセス可能なリソースに添付して使用できるサードパーティのホスティングサービスもあります）。</target>
        </trans-unit>
        <trans-unit id="e48fd7463af9f02e701f5f698b5fff66bca17c7f" translate="yes" xml:space="preserve">
          <source>If the HTML document the JS runs in and the URL being requested are on the same origin (sharing the same scheme, hostname, and port) then they Same Origin Policy grants permission by default. CORS is not needed.</source>
          <target state="translated">JS が実行する HTML ドキュメントと要求される URL が同じオリジンにある場合 (同じスキーム、ホスト名、ポートを共有している場合)、同じオリジンポリシーがデフォルトで許可を与えます。CORSは必要ありません。</target>
        </trans-unit>
        <trans-unit id="08cc9d28f22949cc5fa0a94d72751f3fa207f841" translate="yes" xml:space="preserve">
          <source>If you are correctly doing something that needs a preflight</source>
          <target state="translated">プリフライトが必要なことを正しく行っている場合</target>
        </trans-unit>
        <trans-unit id="ba22853626484508756ed5c98d033ee48a650bbd" translate="yes" xml:space="preserve">
          <source>If you are friendly with the person who controls it: Get them to add CORS permissions to it.</source>
          <target state="translated">あなたがそれを制御する人と友好的である場合。それにCORSの権限を追加するためにそれらを取得します。</target>
        </trans-unit>
        <trans-unit id="853008022034caee905ec37fc3d3b78af426efd3" translate="yes" xml:space="preserve">
          <source>If you are triggering a preflight by mistake</source>
          <target state="translated">間違ってプリフライトを発動してしまった場合</target>
        </trans-unit>
        <trans-unit id="e26a716bf9b75b23f6454ffbb214b653934425a4" translate="yes" xml:space="preserve">
          <source>If you are using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch&quot;&gt;the &lt;code&gt;fetch&lt;/code&gt; API&lt;/a&gt; (rather than &lt;code&gt;XMLHttpRequest&lt;/code&gt;), then you can configure it to not try to use CORS.</source>
          <target state="translated">（ &lt;code&gt;XMLHttpRequest&lt;/code&gt; ではなく） &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch&quot;&gt; &lt;code&gt;fetch&lt;/code&gt; API&lt;/a&gt;を使用している場合は、 CORSを使用しないように構成できます。</target>
        </trans-unit>
        <trans-unit id="70d17978875ee658715b4db351d2df97b4823527" translate="yes" xml:space="preserve">
          <source>If you control the server the request is being made to: Add CORS permissions to it.</source>
          <target state="translated">リクエストが行われるサーバーを制御している場合。CORS パーミッションを追加します。</target>
        </trans-unit>
        <trans-unit id="c3d6c76ecd5f6ccde50eec6284baa0a0a9f6e8f0" translate="yes" xml:space="preserve">
          <source>If your client code does not explicit set affected Headers (e.g. &quot;Accept&quot;) with a fix value in the request it &lt;em&gt;might&lt;/em&gt; occur that some clients do set these Headers automatically with some &quot;non-standard&quot; values causing the server to not accept it as Simple Request - which will give you a CORS error.</source>
          <target state="translated">クライアントコードが影響を受けるヘッダー（例： &quot;Accept&quot;）をリクエストの修正値で明示的に設定し&lt;em&gt;ない&lt;/em&gt;場合、一部のクライアントがこれらのヘッダーをいくつかの &quot;非標準&quot;値で自動的に設定し、サーバーがそれを受け入れないようにする&lt;em&gt;可能&lt;/em&gt;性があります。単純なリクエスト-CORSエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="a7eaa077646e8880c93a7bd47f607df23835f175" translate="yes" xml:space="preserve">
          <source>In either of these cases, removing the extra request header will often be enough to avoid the need for a preflight (which will solve the problem when communicating with APIs that support simple requests but not preflighted requests).</source>
          <target state="translated">これらのいずれの場合も、余分なリクエストヘッダを削除するだけでプリフライトの必要性を回避できることが多いです (これは単純なリクエストをサポートしているがプリフライトされていないリクエストをサポートしている API と通信する際の問題を解決してくれます)。</target>
        </trans-unit>
        <trans-unit id="5729a2bfc145c982ccb21e1853b5da3159d0e027" translate="yes" xml:space="preserve">
          <source>In order to perform a 'Simple Requests' the request needs to meet several conditions. E.g. only allowing &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;HEAD&lt;/code&gt; method, as well as only allowing some given Headers (you can find all conditions &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Simple_requests&quot;&gt;here&lt;/a&gt;).</source>
          <target state="translated">「単純なリクエスト」を実行するには、リクエストがいくつかの条件を満たす必要があります。 たとえば、 &lt;code&gt;POST&lt;/code&gt; 、 &lt;code&gt;GET&lt;/code&gt; および &lt;code&gt;HEAD&lt;/code&gt; メソッドのみを許可し、特定のヘッダーのみを許可します（ &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Simple_requests&quot;&gt;ここで&lt;/a&gt;すべての条件を見つけることができます）。</target>
        </trans-unit>
        <trans-unit id="7cc076a9ba30ebdfbaf2900c4da047938ac0695e" translate="yes" xml:space="preserve">
          <source>In these cases then &lt;strong&gt;the rest of this answer still applies&lt;/strong&gt; but you also need to make sure that the server can listen for the preflight request (which will be &lt;code&gt;OPTIONS&lt;/code&gt; (and not &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt; or whatever you were trying to send) and respond to it with the right &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; header but also &lt;code&gt;Access-Control-Allow-Methods&lt;/code&gt; and &lt;code&gt;Access-Control-Allow-Headers&lt;/code&gt; to allow your specific HTTP methods or headers.</source>
          <target state="translated">これらの場合&lt;strong&gt;でも、この回答の残りの部分は引き続き適用されます&lt;/strong&gt;が、サーバーがプリフライトリクエスト（ &lt;code&gt;OPTIONS&lt;/code&gt; （および &lt;code&gt;GET&lt;/code&gt; 、 &lt;code&gt;POST&lt;/code&gt; または送信しようとしていたものではない））をリッスンし&lt;strong&gt;、それに応答&lt;/strong&gt;できることを確認する必要もあります。適切な &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; ヘッダーだけでなく、 &lt;code&gt;Access-Control-Allow-Methods&lt;/code&gt; および &lt;code&gt;Access-Control-Allow-Headers&lt;/code&gt; を使用して、特定のHTTPメソッドまたはヘッダーを許可します。</target>
        </trans-unit>
        <trans-unit id="d26715ff3c8058144a5e6781d18e2ccc51089bd3" translate="yes" xml:space="preserve">
          <source>Includes credentials like cookies</source>
          <target state="translated">クッキーのような資格情報を含む</target>
        </trans-unit>
        <trans-unit id="62f77bfbffd7a258cc0b8ce904a719ce6a3ee3ed" translate="yes" xml:space="preserve">
          <source>It is possible for a browser extension to inject the CORS headers in the response before the Same Origin Policy is applied.</source>
          <target state="translated">ブラウザの拡張機能が、同一オリジンポリシーが適用される前に、レスポンスにCORSヘッダーを注入することが可能です。</target>
        </trans-unit>
        <trans-unit id="524d541343869ab2cfcaedba8cffa363f4e4da8d" translate="yes" xml:space="preserve">
          <source>It requires that Mallory trust Bob not to provide malicious code.</source>
          <target state="translated">マロリーが悪意のあるコードを提供しないようにボブを信頼する必要があります。</target>
        </trans-unit>
        <trans-unit id="a0d49ced5af1ce4f42b72853fa8477beb628ad66" translate="yes" xml:space="preserve">
          <source>It will either:</source>
          <target state="translated">それはどちらかになります。</target>
        </trans-unit>
        <trans-unit id="45aea3ca1172a010ceadbf9eb618c7f4dd492ee6" translate="yes" xml:space="preserve">
          <source>It will let you make a simple request, not see the response, and not fill the Developer Console with error messages.</source>
          <target state="translated">簡単なリクエストをして、レスポンスを見ず、Developer Consoleにエラーメッセージを記入しないようにしてくれます。</target>
        </trans-unit>
        <trans-unit id="97e9368be80f4c0b36d760f04834a058af9cb0eb" translate="yes" xml:space="preserve">
          <source>It works by presenting the data in the form of a JavaScript program which injects the data into Mallory's page.</source>
          <target state="translated">マロリーのページにデータを注入するJavaScriptプログラムの形でデータを提示することで動作します。</target>
        </trans-unit>
        <trans-unit id="42c6036ddd5d662bc456c530699d3704be7c5087" translate="yes" xml:space="preserve">
          <source>JSONP</source>
          <target state="translated">JSONP</target>
        </trans-unit>
        <trans-unit id="d91c94a14abe9d71f04f1aaf68eb2c1b48685144" translate="yes" xml:space="preserve">
          <source>Just that I've pointed the wrong URL so this header wasn't reflected properly (in which i kept presume it did). localhost (front end) -&amp;gt; call to non secured http (supposed to be https), make sure the API end point from front end is pointing to the correct protocol.</source>
          <target state="translated">間違ったURLをポイントしただけで、このヘッダーは正しく反映されませんでした（私はそれがそうだったと思い込んでいました）。 localhost（フロントエンド）-&amp;gt;セキュアでないhttp（httpsと想定される）の呼び出し。フロントエンドからのAPIエンドポイントが正しいプロトコルを指していることを確認します。</target>
        </trans-unit>
        <trans-unit id="5948c6b1360bb812feb00f5faadc9ae4a212ff35" translate="yes" xml:space="preserve">
          <source>Make sure you aren't triggering a preflight request you don't need. The API might grant permission for simple requests but not preflighted requests.</source>
          <target state="translated">必要のないプリフライトリクエストをトリガーしていないことを確認してください。API は単純なリクエストに対しては許可を与えるかもしれませんが、プリフライトされたリクエストに対しては許可を与えないかもしれません。</target>
        </trans-unit>
        <trans-unit id="1c47e0f7a3e4ddaa6dbc100fabee7e2aec1ca459" translate="yes" xml:space="preserve">
          <source>Mallory &lt;em&gt;could&lt;/em&gt; use server-side code to fetch the data (which she could then pass from her server to Alice's browser through HTTP as usual).</source>
          <target state="translated">マロリー&lt;em&gt;は&lt;/em&gt; 、サーバー側のコードを使用してデータをフェッチすることができます（データは、通常どおり、サーバーからHTTP経由でアリスのブラウザに渡すことができます）。</target>
        </trans-unit>
        <trans-unit id="564e68efef90eb6ff94dbc5e63c04d09f8c8e32a" translate="yes" xml:space="preserve">
          <source>Mallory runs a website (&lt;code&gt;http://localhost:4300&lt;/code&gt; in your example)</source>
          <target state="translated">マロリーはウェブサイトを実行します（例では &lt;code&gt;http://localhost:4300&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="f2e3a0d4f23dada9bbe46ba7d15363f3d33d0fc0" translate="yes" xml:space="preserve">
          <source>Mallory was trusted</source>
          <target state="translated">マロリーは信頼されていた</target>
        </trans-unit>
        <trans-unit id="5741aafa13c097ce47a2ce4d5a8a24a6ed295abc" translate="yes" xml:space="preserve">
          <source>Move the two resources to a single Origin</source>
          <target state="translated">2つのリソースを1つのOriginに移動</target>
        </trans-unit>
        <trans-unit id="179f34374a10f83759fcee462cc56f0119a97fff" translate="yes" xml:space="preserve">
          <source>My problem was, I was trying to go to the site using &lt;code&gt;http://&lt;/code&gt; instead of &lt;code&gt;https://&lt;/code&gt;. So there was nothing to fix, just had to go to the same site using &lt;code&gt;https&lt;/code&gt;.</source>
          <target state="translated">私の問題は、 &lt;code&gt;https://&lt;/code&gt; ではなく &lt;code&gt;http://&lt;/code&gt; を使用してサイトにアクセスしようとしたことでした。 したがって、修正する必要はなく、 &lt;code&gt;https&lt;/code&gt; を使用して同じサイトにアクセスする必要がありました。</target>
        </trans-unit>
        <trans-unit id="da7899ad8069372c74d86a8d03eec992d656f441" translate="yes" xml:space="preserve">
          <source>NB: Some requests are complex and send a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS#Preflighted_requests&quot;&gt;preflight&lt;/a&gt; OPTIONS request that the server will have to respond to before the browser will send the GET/POST/PUT/Whatever request that the JS wants to make. Implementations of CORS that only add &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; to specific URLs often get tripped up by this.</source>
          <target state="translated">注意：一部のリクエストは複雑で、ブラウザがJSの要求するGET / POST / PUT / Whateverリクエストを送信する&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS#Preflighted_requests&quot;&gt;前&lt;/a&gt;にサーバーが応答する必要があるプリフライト OPTIONSリクエストを送信します。 特定のURLに &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; を追加するだけのCORSの実装は、多くの場合、これによって作動します。</target>
        </trans-unit>
        <trans-unit id="6627ccdfafd9a906f6fccd9cc62f31a063fd4bcc" translate="yes" xml:space="preserve">
          <source>Note that SOP / CORS do not mitigate &lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-site_scripting&quot;&gt;XSS&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-site_request_forgery&quot;&gt;CSRF&lt;/a&gt;, or &lt;a href=&quot;https://en.wikipedia.org/wiki/SQL_injection&quot;&gt;SQL Injection&lt;/a&gt; attacks which need to be handled independently.</source>
          <target state="translated">SOP / CORSは、個別に処理する必要がある&lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-site_scripting&quot;&gt;XSS&lt;/a&gt; 、 &lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-site_request_forgery&quot;&gt;CSRF&lt;/a&gt; 、または&lt;a href=&quot;https://en.wikipedia.org/wiki/SQL_injection&quot;&gt;SQLインジェクション&lt;/a&gt;攻撃を軽減しないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="9bc579f199a3101a7f44833570e63a56fb1cb5e4" translate="yes" xml:space="preserve">
          <source>Note that this won't let you do anything that you require CORS to do. You will not be able to read the response. You will not be able to make a request that requires a preflight.</source>
          <target state="translated">これではCORSに要求するようなことはできないので注意してください。応答を読むことができなくなります。プリフライトを必要とするリクエストはできません。</target>
        </trans-unit>
        <trans-unit id="f4d6128232048cd6c6d7f3d7b647ed7fff7f8026" translate="yes" xml:space="preserve">
          <source>Note the common theme: The site providing the data has to tell the browser that it is OK for a third party site to access the data it is sending to the browser.</source>
          <target state="translated">共通のテーマに注意してください。データを提供するサイトは、ブラウザに送信しているデータに第三者のサイトがアクセスしても問題ないことをブラウザに伝えなければなりません。</target>
        </trans-unit>
        <trans-unit id="2aebca51e57e08fa958991342bd12a4146e354ff" translate="yes" xml:space="preserve">
          <source>Obviously granting permission via CORS is something Bob would only do only if either:</source>
          <target state="translated">明らかにCORSを介して許可を与えることは、ボブがどちらか一方の場合にのみ行うものです。</target>
        </trans-unit>
        <trans-unit id="52c0ea51241c014c452b8334a0a0cdf2931af1be" translate="yes" xml:space="preserve">
          <source>Opaque responses</source>
          <target state="translated">不透明な反応</target>
        </trans-unit>
        <trans-unit id="f4c0bf26e722637eaa84e1385d4bed8c7c900340" translate="yes" xml:space="preserve">
          <source>Other security risks</source>
          <target state="translated">その他のセキュリティリスク</target>
        </trans-unit>
        <trans-unit id="3a9e8860a792c71b56b7e9a1d5af8455957c17a7" translate="yes" xml:space="preserve">
          <source>Read More about it here: &lt;a href=&quot;https://stackoverflow.com/questions/25923796/cors-error-with-jquery&quot;&gt;CORS error with jquery&lt;/a&gt;</source>
          <target state="translated">詳細はこちら： &lt;a href=&quot;https://stackoverflow.com/questions/25923796/cors-error-with-jquery&quot;&gt;jqueryでのCORSエラー&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="36d37ad0ea64198287e8b037dac57678ca1b9809" translate="yes" xml:space="preserve">
          <source>Read their API documentation to see what they say about accessing it with client-side JavaScript:</source>
          <target state="translated">API のドキュメントを読んで、クライアントサイド JavaScript でのアクセスについての説明を確認してください。</target>
        </trans-unit>
        <trans-unit id="3cfa06457874ce9969c8b51f9984b1636c423b3c" translate="yes" xml:space="preserve">
          <source>Since JSONP works by appending a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; element to load the data in the form of a JavaScript program which calls a function already in the page, attempting to use the JSONP technique on a URL which returns JSON will fail &amp;mdash; typically with a CORB error &amp;mdash; because JSON is not JavaScript.</source>
          <target state="translated">JSONPは、 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 要素を追加して、ページ内の既存の関数を呼び出すJavaScriptプログラムの形式でデータをロードすることで機能するため、JSONを返すURLでJSONP手法を使用しようとすると、通常はCORBエラーで失敗します&amp;mdash; JSONはJavaScriptではないためです。</target>
        </trans-unit>
        <trans-unit id="1861df057de67ba04d2b5992466bb39553c4cf29" translate="yes" xml:space="preserve">
          <source>Some cross origin requests are &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS#Preflighted_requests&quot;&gt;preflighted&lt;/a&gt;.</source>
          <target state="translated">一部のクロスオリジン要求は&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS#Preflighted_requests&quot;&gt;プリフライトされてい&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="fdf3b7775d3b635980a416d0d4279a7d7d042752" translate="yes" xml:space="preserve">
          <source>Sometimes people make mistakes when trying to construct Ajax requests, and sometimes these trigger the need for a preflight. If the API is designed to allow cross-origin requests, but doesn't require anything that would need a preflight, then this can break access.</source>
          <target state="translated">Ajax リクエストを構築しようとするときに間違いを犯すことがありますが、それがプリフライトの必要性を誘発することもあります。API がクロスオリジンリクエストを許可するように設計されていても、プリフライトを必要とするようなものは何も必要としない場合は、アクセスが途切れる可能性があります。</target>
        </trans-unit>
        <trans-unit id="f0b549858f2443774149a23a83091eb427dedd6b" translate="yes" xml:space="preserve">
          <source>Sometimes you need to make an HTTP request, but you don't need to read the response. e.g. if you are posting a log message to the server for recording.</source>
          <target state="translated">HTTP リクエストが必要な場合もありますが、レスポンスを読む必要はありません。</target>
        </trans-unit>
        <trans-unit id="12b71c3e0fe5f7c0b8d17cc03186e281412da4a8" translate="yes" xml:space="preserve">
          <source>Summary</source>
          <target state="translated">Summary</target>
        </trans-unit>
        <trans-unit id="3bfcdfe6eb4d2132f9b02f748b3b12d32af0e673" translate="yes" xml:space="preserve">
          <source>Target server must allowed cross-origin request. In order to allow it through express, simply handle http options request :</source>
          <target state="translated">ターゲットサーバがクロスオリジンリクエストを許可する必要があります。express で許可するためには、単に http オプションのリクエストを処理するだけです。</target>
        </trans-unit>
        <trans-unit id="03272e3fa289c41f7c3f5d68e234a4e328f368c9" translate="yes" xml:space="preserve">
          <source>That doesn't mean you can't continue to use JavaScript and HTML, but you could distribute it using some other mechanism, such as Node-WebKit or PhoneGap.</source>
          <target state="translated">だからと言って、JavaScriptやHTMLを使い続けられないわけではなく、Node-WebKitやPhoneGapのような別の仕組みを使って配布してもいいのではないでしょうか。</target>
        </trans-unit>
        <trans-unit id="a037477ee252bfd6e5d800d4a6268d25aa2f8c53" translate="yes" xml:space="preserve">
          <source>That server-side code could be written &amp;amp; hosted by a third party (such as CORS Anywhere). Note the privacy implications of this: The third party can monitor who proxies what across their servers.</source>
          <target state="translated">そのサーバー側コードは、サードパーティ（CORS Anywhereなど）によって記述およびホストされる可能性があります。 これのプライバシーへの影響に注意してください。サードパーティは、サーバー全体で誰が何をプロキシするかを監視できます。</target>
        </trans-unit>
        <trans-unit id="a0de50f88e2b3d052aad5c90272075ba1a3d3802" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; HTTP &lt;strong&gt;response&lt;/strong&gt; header referred to in the error message is part of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS&quot;&gt;CORS&lt;/a&gt; standard which allows Bob to explicitly grant permission to Mallory's site to access the data via Alice's browser.</source>
          <target state="translated">エラーメッセージで参照されている &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; HTTP &lt;strong&gt;応答&lt;/strong&gt;ヘッダーは&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS&quot;&gt;CORS&lt;/a&gt;標準の一部であり、ボブがアリスのブラウザを介してデータにアクセスするための許可をマロリーのサイトに明示的に許可することができます。</target>
        </trans-unit>
        <trans-unit id="f1dbef57f9bfebd76c45b9a48c018f05b8a8a202" translate="yes" xml:space="preserve">
          <source>The browser's Same Origin Policy prevents that JavaScript from reading the data returned by Bob's website (which Bob and Alice don't want Mallory to access). (Note that you can, for example, display an image using an &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; element across origins because the content of the image is not exposed to JavaScript (or Mallory) &amp;hellip; unless you throw canvas into the mix in which case you &lt;em&gt;will&lt;/em&gt; generate a same-origin violation error).</source>
          <target state="translated">ブラウザーの同一生成元ポリシーにより、JavaScriptはボブのWebサイトから返されたデータを読み取ることができません（ボブとアリスはマロリーにアクセスを望まない）。 （たとえば、画像のコンテンツはJavaScript（またはマロリー）に公開されていないため、 &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; 要素を使用して画像を表示できることに注意してください。この場合、キャンバスをミックスにスローしない限り、同一起源違反エラー）。</target>
        </trans-unit>
        <trans-unit id="79ef50211c8179fcab85dd49da5f3fbabd650658" translate="yes" xml:space="preserve">
          <source>The data was not private &lt;em&gt;or&lt;/em&gt;</source>
          <target state="translated">データは非公開ではありませんでした</target>
        </trans-unit>
        <trans-unit id="8d9762ae08f6f7dad91721e27217991f8a11ff9f" translate="yes" xml:space="preserve">
          <source>The specifics of how Bob sets that response header depend on Bob's HTTP server and/or server-side programming language. There is &lt;a href=&quot;https://enable-cors.org/server.html&quot;&gt;a collection of guides for various common configurations&lt;/a&gt; that might help.</source>
          <target state="translated">Bobがその応答ヘッダーを設定する方法の詳細は、BobのHTTPサーバーまたはサーバー側プログラミング言語、あるいはその両方によって異なります。 役立つ可能性のある&lt;a href=&quot;https://enable-cors.org/server.html&quot;&gt;さまざまな一般的な構成のガイドのコレクションが&lt;/a&gt;あります。</target>
        </trans-unit>
        <trans-unit id="6604893b096b6ba328e55fd565fa6955767da643" translate="yes" xml:space="preserve">
          <source>The standard scenario that demonstrates the need for the SOP can be demonstrated with &lt;a href=&quot;https://en.wikipedia.org/wiki/Alice_and_Bob&quot;&gt;three characters&lt;/a&gt;:</source>
          <target state="translated">SOPの必要性を示す標準的なシナリオは、 &lt;a href=&quot;https://en.wikipedia.org/wiki/Alice_and_Bob&quot;&gt;3つのキャラクター&lt;/a&gt;で示すことができます。</target>
        </trans-unit>
        <trans-unit id="7d044b9d63caf8c196634124ce4c9ba4ca176213" translate="yes" xml:space="preserve">
          <source>There are a number of circumstances where Mallory's site can cause a browser to fetch data from a third party and display it (e.g. by adding an &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; element to display an image). It isn't possible for Mallory's JavaScript to read the data in that resource though, only Alice's browser and Bob's server can do that, so it is still secure.</source>
          <target state="translated">マロリーのサイトがブラウザにサードパーティからデータをフェッチして表示させる状況は数多くあります（たとえば、 &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; 要素を追加して画像を表示することにより）。 ただし、MalloryのJavaScriptがそのリソースのデータを読み取ることはできません。これを行うことができるのは、AliceのブラウザーとBobのサーバーだけなので、依然として安全です。</target>
        </trans-unit>
        <trans-unit id="6127874d9aef1420ff154b79562f50afaf6347c1" translate="yes" xml:space="preserve">
          <source>There is no standard mechanism for &lt;em&gt;Mallory&lt;/em&gt; to add this header because it has to come from Bob's website, which she does not control.</source>
          <target state="translated">&lt;em&gt;マロリー&lt;/em&gt;がこのヘッダーを追加するための標準的なメカニズムはありません。これは、ボブが管理していないボブのWebサイトからのものであるためです。</target>
        </trans-unit>
        <trans-unit id="b79496a457c196bc566172f51692296fa4b04a80" translate="yes" xml:space="preserve">
          <source>There is nothing you can do in &lt;em&gt;your&lt;/em&gt; client-side code that will enable CORS access to someone &lt;em&gt;else's&lt;/em&gt; server.</source>
          <target state="translated">&lt;em&gt;他の&lt;/em&gt;誰か&lt;em&gt;の&lt;/em&gt;サーバーへのCORSアクセスを可能に&lt;em&gt;する&lt;/em&gt;クライアント側のコードでできることは何もありません。</target>
        </trans-unit>
        <trans-unit id="beaef9fcd0c6d1171c964ef462dc2b90796057d4" translate="yes" xml:space="preserve">
          <source>There isn't a third party (Mallory) who is considered a risk.</source>
          <target state="translated">リスクとされる第三者(マロリー)がいない。</target>
        </trans-unit>
        <trans-unit id="dd9bc05dc8287dee0908fc2de2446be79f55333c" translate="yes" xml:space="preserve">
          <source>These can be useful for development, but are not practical for a production site (asking every user of your site to install a browser extension that disables a security feature of their browser is unreasonable).</source>
          <target state="translated">これらは開発には便利ですが、本番サイトでは実用的ではありません(サイトのすべてのユーザーにブラウザのセキュリティ機能を無効にするブラウザ拡張機能のインストールを求めるのは不合理です)。</target>
        </trans-unit>
        <trans-unit id="2f870286e388f3bb6b87e9c1b23cb67398f0476e" translate="yes" xml:space="preserve">
          <source>These links may help</source>
          <target state="translated">これらのリンクが役に立つかもしれません。</target>
        </trans-unit>
        <trans-unit id="3c5b93c7e9e12c292b3d57a2e8033fcb4066808f" translate="yes" xml:space="preserve">
          <source>They also tend to work only with simple requests (failing when handling preflight OPTIONS requests).</source>
          <target state="translated">また、単純なリクエストのみで動作する傾向があります(プリフライトのOPTIONSリクエストを扱う際に失敗します)。</target>
        </trans-unit>
        <trans-unit id="966f60079bca7fe60d16c9b028cbe378ce505cbe" translate="yes" xml:space="preserve">
          <source>They might not support cross-origin access from client-side code at all (this might be a deliberate decision on security grounds, especially if you have to pass a personalised API Key in each request).</source>
          <target state="translated">クライアント側のコードからのクロスオリジンアクセスを全くサポートしていないかもしれません (これはセキュリティ上の理由で意図的に決定されたものかもしれません。特に各リクエストでパーソナライズされた API キーを渡さなければならない場合はそうです)。</target>
        </trans-unit>
        <trans-unit id="4035c1092fef5f4b1d5300a30ca72bc19b830f2c" translate="yes" xml:space="preserve">
          <source>They might support JSONP</source>
          <target state="translated">JSONPをサポートしているかもしれません。</target>
        </trans-unit>
        <trans-unit id="4070327462efd6341c1d8af061f6ae9a155f4f00" translate="yes" xml:space="preserve">
          <source>They might tell you to use specific URLs</source>
          <target state="translated">特定のURLを使用するように言われるかもしれません</target>
        </trans-unit>
        <trans-unit id="86e6affe855b69f1d8bd485bd50cbf74902446c9" translate="yes" xml:space="preserve">
          <source>This CORS issue wasn't further elaborated (for other causes).</source>
          <target state="translated">このCORSの問題は、(他の原因で)さらに詳しく説明されていませんでした。</target>
        </trans-unit>
        <trans-unit id="da5b27da2c10e147b1be9056b8f6e0b70cc76a30" translate="yes" xml:space="preserve">
          <source>This happens when (roughly speaking) you try to make a cross-origin request that:</source>
          <target state="translated">これは、(大雑把に言えば)クロスオリジンのリクエストをしようとしたときに起こります。</target>
        </trans-unit>
        <trans-unit id="aa7d3a1a783441f8156a995c4e747515c5eed7e1" translate="yes" xml:space="preserve">
          <source>This is happening because of the CORS error. CORS stands for Cross Origin Resource Sharing. In simple words, this error occurs when we try to access a domain/resource from another domain.</source>
          <target state="translated">これはCORSのエラーが原因で発生しています。CORSとはCross Origin Resource Sharingの略です。簡単に言うと、他のドメインからドメインリソースにアクセスしようとすると、このエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="9445c44ac33eafce8dbcfa7beb12d85c9a2a027a" translate="yes" xml:space="preserve">
          <source>This is not the case for this exact question, but might help others that search for that problem</source>
          <target state="translated">これは、この正確な質問の場合ではありませんが、その問題を検索する他の人の助けになるかもしれません。</target>
        </trans-unit>
        <trans-unit id="20a4478d9435b61f5fc0f10a853aef5dc4b7c054" translate="yes" xml:space="preserve">
          <source>This is something you can do in your client-code to prevent CORS errors in &lt;em&gt;some cases&lt;/em&gt;.</source>
          <target state="translated">これは、場合によってはCORSエラーを防ぐためにクライアントコードで実行できることです。</target>
        </trans-unit>
        <trans-unit id="dd387cc7c0ddfa81e8a73fd3ad8eec157d2b5a85" translate="yes" xml:space="preserve">
          <source>This is the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy&quot;&gt;Same Origin Policy&lt;/a&gt;. It is a security feature implemented by browsers.</source>
          <target state="translated">これは&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy&quot;&gt;同一生成元ポリシー&lt;/a&gt;です。 これは、ブラウザによって実装されるセキュリティ機能です。</target>
        </trans-unit>
        <trans-unit id="f228285fd4ea1c4455057da91df16018363da6ef" translate="yes" xml:space="preserve">
          <source>This would be fine since that is just between Mallory and Bob. There is no way for Bob to think that Mallory is Alice and to provide Mallory with data that should be kept confidential between Alice and Bob.</source>
          <target state="translated">これはマロリーとボブの間だけの話なので問題ないでしょう。ボブがマロリーがアリスだと思って、アリスとボブの間で秘密にしておくべきデータをマロリーに提供することはあり得ない。</target>
        </trans-unit>
        <trans-unit id="bbe716d48d812e780f5d0c025cd7d8e8d137e139" translate="yes" xml:space="preserve">
          <source>Thus:</source>
          <target state="translated">Thus:</target>
        </trans-unit>
        <trans-unit id="2e622d7f6639260890f80f2a6685c393b5403a2f" translate="yes" xml:space="preserve">
          <source>To fix this, if you have access to the other domain, you will have to allow Access-Control-Allow-Origin in the server. This can be added in the headers. You can enable this for all the requests/domains or a specific domain.</source>
          <target state="translated">これを修正するには、他のドメインにアクセスしている場合は、サーバーでAccess-Control-Allow-Originを許可する必要があります。これはヘッダに追加することができます。これをすべての requestsdomains または特定のドメインに対して有効にすることができます。</target>
        </trans-unit>
        <trans-unit id="6f655decc8eac3fe6c8bc774d35ee8140515efbb" translate="yes" xml:space="preserve">
          <source>What is stopping me from accessing the page?</source>
          <target state="translated">ページへのアクセスを止めているのは何ですか?</target>
        </trans-unit>
        <trans-unit id="c222285e4f0dfcb26c7d734bf432abc2efc0b6a4" translate="yes" xml:space="preserve">
          <source>Why the Same Origin Policy applies when you don't think it should</source>
          <target state="translated">同一起源政策が適用されるべきではないと思うときに、なぜ同一起源政策が適用されるのか</target>
        </trans-unit>
        <trans-unit id="68b8e4a4bfccfe90f892af4970ab015d6f70ef95" translate="yes" xml:space="preserve">
          <source>Why the Same Origin Policy only applies to JavaScript in a web page</source>
          <target state="translated">同一オリジンポリシーがウェブページのJavaScriptにのみ適用される理由</target>
        </trans-unit>
        <trans-unit id="abbe2bbe571390ca47e7527f04f9f823e204410f" translate="yes" xml:space="preserve">
          <source>Why you can display data in the page without reading it with JS</source>
          <target state="translated">JSでデータを読まずにページ内に表示できる理由</target>
        </trans-unit>
        <trans-unit id="383dc6735c76bbfea9b61fc8d3bbc5bbdaf87eee" translate="yes" xml:space="preserve">
          <source>Writing something other than a web app</source>
          <target state="translated">ウェブアプリ以外のものを書く</target>
        </trans-unit>
        <trans-unit id="71bad54d58acd5cde3dc0f122a888a11d325d05a" translate="yes" xml:space="preserve">
          <source>XMLHttpRequest cannot load &lt;a href=&quot;https://www.example.com/&quot;&gt;https://www.example.com/&lt;/a&gt;
      No 'Access-Control-Allow-Origin' header is present on the requested 
      resource. Origin '&lt;a href=&quot;http://localhost:4300&quot;&gt;http://localhost:4300&lt;/a&gt;' is therefore not allowed access.</source>
          <target state="translated">XMLHttpRequestが&lt;a href=&quot;https://www.example.com/&quot;&gt;https://www.example.com/を&lt;/a&gt;読み込めません。リクエストされたリソースに「Access-Control-Allow-Origin」ヘッダーがありません。 したがって、オリジン ' &lt;a href=&quot;http://localhost:4300&quot;&gt;http：// localhost：4300&lt;/a&gt; 'はアクセスを許可されません。</target>
        </trans-unit>
        <trans-unit id="7d4c0874dabc4851005a3af251a7dd41b17c2b76" translate="yes" xml:space="preserve">
          <source>XMLHttpRequest cannot load XXX No 'Access-Control-Allow-Origin' header</source>
          <target state="translated">XMLHttpRequest cannot load XXX No 'Access-Control-Allow-Origin' header</target>
        </trans-unit>
        <trans-unit id="84032e9155256a63c2c317d1a432e1392ae2ffde" translate="yes" xml:space="preserve">
          <source>You can make use of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Simple_requests&quot;&gt;Simple Requests&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Simple_requests&quot;&gt;Simple Requests&lt;/a&gt;を利用できます。</target>
        </trans-unit>
        <trans-unit id="565919979d1b220118880d7347d1698f1fb11c07" translate="yes" xml:space="preserve">
          <source>You should enable CORS to get it working.</source>
          <target state="translated">CORSを有効にして動作させる必要があります。</target>
        </trans-unit>
        <trans-unit id="39ab42da37e2b09b25f5e11e8fbf631b5baa0ed2" translate="yes" xml:space="preserve">
          <source>Your particular case is showing how it is implemented for XMLHttpRequest (and you'll get identical results if you were to use fetch), but it also applies to other things (such as images loaded onto a &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; or documents loaded into an &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;), just with slightly different implementations.</source>
          <target state="translated">あなたの特定のケースは、それがXMLHttpRequestにどのように実装されているかを示しています（フェッチを使用すると同じ結果が得られます）が、他の事柄（ &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; にロードされた画像や &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; ロードされたドキュメントなど）にも適用されますiframe&amp;gt; ）、わずかに異なる実装。</target>
        </trans-unit>
        <trans-unit id="9b958ab959f694798d92a468527ac46f2f64cf4b" translate="yes" xml:space="preserve">
          <source>add CORS headers</source>
          <target state="translated">CORS ヘッダを追加</target>
        </trans-unit>
        <trans-unit id="fbbf1bdb4343897dcae9384602598bf7e27d95fa" translate="yes" xml:space="preserve">
          <source>convert the response to JSONP</source>
          <target state="translated">レスポンスを JSONP に変換します。</target>
        </trans-unit>
        <trans-unit id="4d45714443791a616cc27fecf90f9f0854b14322" translate="yes" xml:space="preserve">
          <source>exist on the same origin as the HTML document</source>
          <target state="translated">は HTML ドキュメントと同じオリジンに存在します。</target>
        </trans-unit>
        <trans-unit id="64979ef625f468550475be52a9f9eba4cb697b50" translate="yes" xml:space="preserve">
          <source>tl;dr &amp;mdash;&amp;nbsp;There's a summary at the end and headings in the answer to make it easier to find the relevant parts. Reading everything is recommended though as it provides useful background for understanding the &lt;strong&gt;why&lt;/strong&gt; that makes seeing how the &lt;strong&gt;how&lt;/strong&gt; applies in different circumstances easier.</source>
          <target state="translated">tl; dr &amp;mdash;関連する部分を見つけやすくするために、回答の最後に見出しと見出しがあります。 すべてを読むことをお勧めし&lt;strong&gt;ます&lt;/strong&gt;が、さまざまな状況で&lt;strong&gt;どのように&lt;/strong&gt;適用される&lt;strong&gt;かを&lt;/strong&gt;簡単に理解できるようにする&lt;strong&gt;理由&lt;/strong&gt;を理解するのに役立つ背景を提供します。</target>
        </trans-unit>
        <trans-unit id="798d6f2be2e1e1f95e0abe2c366b9282b7d0b9fc" translate="yes" xml:space="preserve">
          <source>tl;dr; About the Same Origin Policy</source>
          <target state="translated">tl;dr;同一原産主義について</target>
        </trans-unit>
        <trans-unit id="e4288b0b274bc0ac97897c68b14dc2b0d1554ea7" translate="yes" xml:space="preserve">
          <source>trying to put &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; and other CORS response headers on the request. These don't belong on the request, don't do anything helpful (what would be the point of a permissions system where you could grant yourself permission?), and must appear only on the response.</source>
          <target state="translated">リクエストに &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; およびその他のCORS応答ヘッダーを配置しようとしています。 これらはリクエストに属しておらず、役立つことは何もせず（自分に権限を付与できる権限システムのポイントは何ですか？）、応答にのみ表示される必要があります。</target>
        </trans-unit>
        <trans-unit id="1fa6839e05c6436308f1e8f17d2a6574bb48bf8d" translate="yes" xml:space="preserve">
          <source>trying to put a &lt;code&gt;Content-Type: application/json&lt;/code&gt; header on a GET request that has no request body to describe the content of (typically when the author confuses &lt;code&gt;Content-Type&lt;/code&gt; and &lt;code&gt;Accept&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;Content-Type: application/json&lt;/code&gt; を記述するリクエストボディのないGETリクエストにContent-Type：application / jsonヘッダーを配置しようとしている（通常、作成者が &lt;code&gt;Content-Type&lt;/code&gt; と &lt;code&gt;Accept&lt;/code&gt; を混同している場合）。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
