<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/195951">
    <body>
      <group id="195951">
        <trans-unit id="a768be6d54ef6b70b8eb7eb41a34fe951c12c7d5" translate="yes" xml:space="preserve">
          <source>(Note that &lt;code&gt;$&lt;/code&gt; here is the jQuery object.)</source>
          <target state="translated">（ &lt;code&gt;$&lt;/code&gt; はjQueryオブジェクトです。）</target>
        </trans-unit>
        <trans-unit id="d123c3198499240df126cca6365e40a09e0871c9" translate="yes" xml:space="preserve">
          <source>(Note that the window.onload part is required so that the contents of that function are executed &lt;em&gt;after&lt;/em&gt; the HTML has finished loading - without this, the MyElement might not exist when the JavaScript code is called, so that line would fail.)</source>
          <target state="translated">（HTMLの読み込みが完了した&lt;em&gt;後&lt;/em&gt;にその関数のコンテンツが実行されるように、window.onloadパーツが必要です。これがないと、JavaScriptコードが呼び出されたときにMyElementが存在しない可能性があるため、行が失敗します。）</target>
        </trans-unit>
        <trans-unit id="36928cac6793ea8d612194e79d98f04c583c786a" translate="yes" xml:space="preserve">
          <source>(You can use a space-delimited list to apply multiple classes.)</source>
          <target state="translated">(スペースで区切ったリストを使って、複数のクラスを適用することができます)。</target>
        </trans-unit>
        <trans-unit id="f3cc2818b3bab70c11222a1b4f8abfca8398fcbb" translate="yes" xml:space="preserve">
          <source>100 is the timeout delay during which the class is changed.</source>
          <target state="translated">100はクラスが変更されるまでのタイムアウト時間です。</target>
        </trans-unit>
        <trans-unit id="6d71e42eee17ebac46990c6ec99f72c1dd004e2d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style&quot;&gt;&lt;code&gt;style&lt;/code&gt;&lt;/a&gt; vs. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Element/classList&quot;&gt;&lt;code&gt;classList&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style&quot;&gt; &lt;code&gt;style&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Element/classList&quot;&gt; &lt;code&gt;classList&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ac22d11bf59761da3e60890d35e15d0d9759e4ed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;classList&lt;/code&gt; DOM API:</source>
          <target state="translated">&lt;code&gt;classList&lt;/code&gt; DOM API：</target>
        </trans-unit>
        <trans-unit id="35d5c193432c9ac6d34504aee935b45f1cc01387" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(Very roughly, a library is a set of tools designed for a specific task, whilst a framework generally contains multiple libraries and performs a complete set of duties.)&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;（大まかに言って、ライブラリは特定のタスク用に設計されたツールのセットですが、フレームワークは通常複数のライブラリを含み、一連の任務を実行します。）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8f5a8c84807804c1921f9174da4957c65cc014f6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;OR&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;OR&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5a24ffdcf9b11f1ea933600cf7404e7c7ae64feb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;That's it.&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;それでおしまい。&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="65dcf051b0f8d4d6b70a92dd10d98dbbb05e7cdd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Note:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="846706ae5b3085b8e60517b9648cefa810a047c3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;TL;DR :&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;TL; DR：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="60fd6f81fd03c694bc80a47ab2a3e466af102521" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;&lt;em&gt;(It is not required to have this code in script tags, this is simply for brevity of example, and including the JavaScript in a distinct file may be more appropriate.)&lt;/em&gt;&lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;&lt;em&gt;（このコードをスクリプトタグに含める必要はありません。これは単に例を簡潔にするためであり、別個のファイルにJavaScriptを含める方が適切な場合があります。）&lt;/em&gt;&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="810348209a0b4e13051f087361ee127f63bc4329" translate="yes" xml:space="preserve">
          <source>A couple of minor notes and tweaks on the previous regexes:</source>
          <target state="translated">以前の正規表現にいくつかの小さな注意点と微調整を加えました。</target>
        </trans-unit>
        <trans-unit id="d6b1af0ad5192ae9298436ae976275ddc41ddadf" translate="yes" xml:space="preserve">
          <source>A very convenient manner of adding and removing classes is the &lt;code&gt;classList&lt;/code&gt; DOM API. This API allows us to select all classes of a specific DOM element in order to modify the list using javascript. For example:</source>
          <target state="translated">クラスを追加および削除する非常に便利な方法は、 &lt;code&gt;classList&lt;/code&gt; DOM APIです。 このAPIを使用すると、JavaScriptを使用してリストを変更するために、特定のDOM要素のすべてのクラスを選択できます。 例えば：</target>
        </trans-unit>
        <trans-unit id="cb7131c5592f111393c51e123879700b86ec932a" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;class-c&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;class-c&lt;/code&gt; 追加</target>
        </trans-unit>
        <trans-unit id="a03308e049943bb29a3be1a514a07bad3ce3ccbc" translate="yes" xml:space="preserve">
          <source>An explanation of this regex is as follows:</source>
          <target state="translated">この正規表現の説明は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="a58a4783015366888789805b6147216ea09fb6f6" translate="yes" xml:space="preserve">
          <source>And then just use like this (on click will add or remove class):</source>
          <target state="translated">そして、このように使用するだけです(クリックするとクラスが追加されたり削除されたりします)。</target>
        </trans-unit>
        <trans-unit id="e2c4d1291801df4b64d46bea22d9f2ef3fc8971b" translate="yes" xml:space="preserve">
          <source>And to toggle a class (remove if exists else add it):</source>
          <target state="translated">また、クラスをトグルする(存在する場合は削除し、存在しない場合は追加する)。</target>
        </trans-unit>
        <trans-unit id="5483156a29c5a8e4c97d3f23db1a476796c14e0d" translate="yes" xml:space="preserve">
          <source>And, if you really want to know the why and educate yourself then I suggest reading &lt;a href=&quot;https://stackoverflow.com/a/196038/1804013&quot;&gt;Peter Boughton's answer&lt;/a&gt;, it's perfect.</source>
          <target state="translated">そして、もしあなたが本当にその理由を知り、あなた自身を教育したいなら、私は&lt;a href=&quot;https://stackoverflow.com/a/196038/1804013&quot;&gt;ピーター・ボートンの答えを&lt;/a&gt;読むことを勧めます 、それは完璧です。</target>
        </trans-unit>
        <trans-unit id="cd4baaffd7536020926a70beb3e2efb64cb86fd9" translate="yes" xml:space="preserve">
          <source>As well you could extend HTMLElement object, in order to add methods to add, remove, toggle and check classes (&lt;a href=&quot;https://gist.github.com/Maksims/5356227&quot;&gt;gist&lt;/a&gt;):</source>
          <target state="translated">同様に、HTMLElementオブジェクトを拡張して、クラスを追加、削除、切り替え、チェックするメソッドを追加することもできます（ &lt;a href=&quot;https://gist.github.com/Maksims/5356227&quot;&gt;gist&lt;/a&gt; ）。</target>
        </trans-unit>
        <trans-unit id="25ca1d082ae349e38f065bdbc50243133e174924" translate="yes" xml:space="preserve">
          <source>Assigning a function to a click event with jQuery:</source>
          <target state="translated">jQueryでクリックイベントに関数を割り当てる</target>
        </trans-unit>
        <trans-unit id="81cd875fdefe7d87a7e655d0e8dbf87cbc24858d" translate="yes" xml:space="preserve">
          <source>Assigning these actions to onclick events:</source>
          <target state="translated">これらのアクションをオンクリックイベントに割り当てます。</target>
        </trans-unit>
        <trans-unit id="f47ff05370efe7ed97f1acf5d6c11d0c6d917e1c" translate="yes" xml:space="preserve">
          <source>By now for sure it would just be better to use jQuery.</source>
          <target state="translated">今の時点では確かにjQueryを使った方が良いだけでしょう。</target>
        </trans-unit>
        <trans-unit id="04ebcbcd410dca3c8893aa799b291cf05659c42e" translate="yes" xml:space="preserve">
          <source>Change an element's CSS class with JavaScript in &lt;a href=&quot;http://en.wikipedia.org/wiki/ASP.NET&quot;&gt;ASP.NET&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/ASP.NET&quot;&gt;ASP.NET&lt;/a&gt;でJavaScriptを使用して要素のCSSクラスを変更します 。</target>
        </trans-unit>
        <trans-unit id="28de79fc7eab9290622fc6284f484baaec85cc51" translate="yes" xml:space="preserve">
          <source>Change an element's class in vanilla JavaScript with IE6 support</source>
          <target state="translated">バニラ JavaScript で IE6 をサポートした要素のクラスを変更する</target>
        </trans-unit>
        <trans-unit id="c2c8e05d349c3d878a6aac29e41f9479d5692cbb" translate="yes" xml:space="preserve">
          <source>Changing Classes with jQuery:</source>
          <target state="translated">jQueryでクラスを変更します。</target>
        </trans-unit>
        <trans-unit id="50791437da96975496871fe477000ce3054031f7" translate="yes" xml:space="preserve">
          <source>Class to add is the new class that you want to add.</source>
          <target state="translated">追加するクラスは、追加したい新しいクラスです。</target>
        </trans-unit>
        <trans-unit id="95d4a75327fb38b62efc8349327eca2efa53bc92" translate="yes" xml:space="preserve">
          <source>Class1 is a listener for an event.</source>
          <target state="translated">Class1はイベントのリスナーです。</target>
        </trans-unit>
        <trans-unit id="cd425ecec02ec2a70c426364c0a9d91a8bec4844" translate="yes" xml:space="preserve">
          <source>Classtoremove is the old class you have.</source>
          <target state="translated">クラスストームーブは、あなたが持っている古いクラスです。</target>
        </trans-unit>
        <trans-unit id="10c4fefdc3c690986b64bf3a9b02f4ea909e714f" translate="yes" xml:space="preserve">
          <source>Credit - &lt;a href=&quot;https://jaischool.com/javascript-lang/how-to-change-class-name-of-an-html-element-in-javascript.html&quot;&gt;https://jaischool.com/javascript-lang/how-to-change-class-name-of-an-html-element-in-javascript.html&lt;/a&gt;</source>
          <target state="translated">クレジット&lt;a href=&quot;https://jaischool.com/javascript-lang/how-to-change-class-name-of-an-html-element-in-javascript.html&quot;&gt;-https://jaischool.com/javascript-lang/how-to-change-class-name-of-an-html-element-in-javascript.html&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">スニペットを展開</target>
        </trans-unit>
        <trans-unit id="ee8a847853d723642646551f6895a7e50b2f059f" translate="yes" xml:space="preserve">
          <source>Good Luck.</source>
          <target state="translated">幸運を祈る</target>
        </trans-unit>
        <trans-unit id="0c41f1b8245e9cf6c1f960925bde5e81ea9ce040" translate="yes" xml:space="preserve">
          <source>Here is &lt;a href=&quot;http://jsfiddle.net/5QMgR/&quot;&gt;demo&lt;/a&gt;.</source>
          <target state="translated">こちらが&lt;a href=&quot;http://jsfiddle.net/5QMgR/&quot;&gt;デモ&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="c5c09b52afff0b0af82cb064ab1ed16b1be3cd36" translate="yes" xml:space="preserve">
          <source>Here is a little style vs. classList examples to get you to see what are the options you have available and how to use &lt;code&gt;classList&lt;/code&gt; to do what you want.</source>
          <target state="translated">使用可能なオプションと、 &lt;code&gt;classList&lt;/code&gt; を使用して必要なことを行う方法を確認するための、スタイルとclassListの例の例を次に示します。</target>
        </trans-unit>
        <trans-unit id="5ef00fc58916319da7dbc65f7d5cc5a0b9fbfbaa" translate="yes" xml:space="preserve">
          <source>Here is simple jQuery code to do that.</source>
          <target state="translated">そのための簡単なjQueryコードを紹介します。</target>
        </trans-unit>
        <trans-unit id="df180310b6bd56954465ab73a5bf66ab501fa669" translate="yes" xml:space="preserve">
          <source>Here's a toggleClass to toggle/add/remove a class on an element:</source>
          <target state="translated">ここでは、要素上のクラスをトグルしてaddremoveするtoggleClassがあります。</target>
        </trans-unit>
        <trans-unit id="d3a5a55861d63e399b0920c3fec51d2bc02e0f36" translate="yes" xml:space="preserve">
          <source>Here's my version, fully working:</source>
          <target state="translated">これが私のバージョンで、完全に機能しています。</target>
        </trans-unit>
        <trans-unit id="3d080817ae211b70ffb8548327b1435f255163a6" translate="yes" xml:space="preserve">
          <source>Here,</source>
          <target state="translated">Here,</target>
        </trans-unit>
        <trans-unit id="c4c7170745ea8afb708618b6359b9d5cd438ac34" translate="yes" xml:space="preserve">
          <source>How can I change a class of an HTML element in response to an &lt;code&gt;onclick&lt;/code&gt; event using JavaScript?</source>
          <target state="translated">JavaScriptを使用して &lt;code&gt;onclick&lt;/code&gt; イベントに応答してHTML要素のクラスを変更するにはどうすればよいですか？</target>
        </trans-unit>
        <trans-unit id="9bd005ab00fefa0cb963f924ab7344480c4649d9" translate="yes" xml:space="preserve">
          <source>How can I change an element's class with JavaScript</source>
          <target state="translated">JavaScriptで要素のクラスを変更するには?</target>
        </trans-unit>
        <trans-unit id="5144dc7f15c6b38fa4a868f7c62a32aa8860fb50" translate="yes" xml:space="preserve">
          <source>I use the following vanilla JavaScript functions in my code. They use regular expressions and &lt;code&gt;indexOf&lt;/code&gt; but do not require quoting special characters in regular expressions.</source>
          <target state="translated">次のバニラJavaScript関数をコードで使用しています。 正規表現と &lt;code&gt;indexOf&lt;/code&gt; を使用しますが、正規表現で特殊文字を引用符で囲む必要はありません。</target>
        </trans-unit>
        <trans-unit id="444d425d90f140f1bc68fea87162358f6b6b2aee" translate="yes" xml:space="preserve">
          <source>I would use jQuery and write something like this:</source>
          <target state="translated">jQueryを使ってこんな感じで書いてみようと思います。</target>
        </trans-unit>
        <trans-unit id="0f8d83066a49e3f5f08eddd11c5dbb438196d99a" translate="yes" xml:space="preserve">
          <source>I'd like to do something like below as methods to my javascript framework to add few functionalities which handle adding classes, deleting classes, etc similar to jQuery, this is fully supported in IE9+, also my code is written in ES6, so you need to make sure your browser support it or you using something like babel, otherwise need to use ES5 syntax in your code, also in this way, we finding element via ID, which means the element needs to have an ID to be selected:</source>
          <target state="translated">私のjavascriptフレームワークにクラスの追加、クラスの削除などを処理する機能を追加するためのメソッドとして以下のようなことをしたいと思っています。</target>
        </trans-unit>
        <trans-unit id="6f8c167593b08d2edd8b2935fa90038fcc0b4d44" translate="yes" xml:space="preserve">
          <source>If you want to add &lt;code&gt;margin-top&lt;/code&gt; property into an element, you would do in such:</source>
          <target state="translated">要素に &lt;code&gt;margin-top&lt;/code&gt; プロパティを追加する場合は、次のようにします。</target>
        </trans-unit>
        <trans-unit id="55228e1e70409a67210cc788673caf2ac79f08bd" translate="yes" xml:space="preserve">
          <source>In addition, jQuery provides a shortcut for adding a class if it doesn't apply, or removing a class that does:</source>
          <target state="translated">また、jQueryには、適用されないクラスがあれば追加したり、適用されるクラスを削除したりするためのショートカットが用意されています。</target>
        </trans-unit>
        <trans-unit id="61047c026ab7dab583128874055d31d4cb393da8" translate="yes" xml:space="preserve">
          <source>In one of my old projects that did not use jQuery, I built the following functions for adding, removing and checking if element has class:</source>
          <target state="translated">jQueryを使っていない昔のプロジェクトでは、以下のような追加、削除、要素がクラスを持っているかどうかのチェックのための関数を作っていました。</target>
        </trans-unit>
        <trans-unit id="61623482f521e375c25248bf66ba277cbaa4a4e2" translate="yes" xml:space="preserve">
          <source>JavaScript Frameworks and Libraries</source>
          <target state="translated">JavaScript フレームワークとライブラリ</target>
        </trans-unit>
        <trans-unit id="86a7411a1f3468909af35695eccc8479028d6f7c" translate="yes" xml:space="preserve">
          <source>Just thought I'd throw this in:</source>
          <target state="translated">これを入れようと思って</target>
        </trans-unit>
        <trans-unit id="87b355bfe37c01d1c8a3096edac72baff56af530" translate="yes" xml:space="preserve">
          <source>Just to add on information from another popular framework, Google Closures, see their &lt;a href=&quot;http://closure-library.googlecode.com/svn/docs/closure_goog_dom_classes.js.html&quot;&gt;dom/classes&lt;/a&gt; class:</source>
          <target state="translated">別の一般的なフレームワーク、Google Closuresからの情報を追加するために、それらの&lt;a href=&quot;http://closure-library.googlecode.com/svn/docs/closure_goog_dom_classes.js.html&quot;&gt;dom / classes&lt;/a&gt;クラスを参照してください：</target>
        </trans-unit>
        <trans-unit id="6a235429c43f03c2a3e0d684e6357aa9eb0d584e" translate="yes" xml:space="preserve">
          <source>Let say we have a &lt;code&gt;&amp;lt;div class=&quot;class-a class-b&quot;&amp;gt;&lt;/code&gt;, in this case, we have 2 classes added to our div element already, &lt;code&gt;class-a&lt;/code&gt; and &lt;code&gt;class-b&lt;/code&gt;, and we want to control what classes &lt;strong&gt;&lt;code&gt;remove&lt;/code&gt;&lt;/strong&gt; and what class to &lt;strong&gt;&lt;code&gt;add&lt;/code&gt;&lt;/strong&gt;. This is where &lt;code&gt;classList&lt;/code&gt; becomes handy.</source>
          <target state="translated">&lt;code&gt;&amp;lt;div class=&quot;class-a class-b&quot;&amp;gt;&lt;/code&gt; があるとします。この場合、div要素に2つのクラス &lt;code&gt;class-a&lt;/code&gt; と &lt;code&gt;class-b&lt;/code&gt; がすでに追加されており、 &lt;strong&gt; &lt;code&gt;remove&lt;/code&gt; &lt;/strong&gt;クラスを制御したいとします。 &lt;strong&gt; &lt;code&gt;add&lt;/code&gt; &lt;/strong&gt;クラス。 ここで &lt;code&gt;classList&lt;/code&gt; が便利になります。</target>
        </trans-unit>
        <trans-unit id="9aadc6ee7db9b4612898502d2c388d6ab5216cbc" translate="yes" xml:space="preserve">
          <source>Lots of answers, lots of good answers.</source>
          <target state="translated">たくさんの答え、たくさんの良い答え。</target>
        </trans-unit>
        <trans-unit id="d9a7e31e31b8f3bd9a139a31f77774a0e65ce73c" translate="yes" xml:space="preserve">
          <source>Modern HTML5 Techniques for changing classes</source>
          <target state="translated">クラスを変える最新のHTML5テクニック</target>
        </trans-unit>
        <trans-unit id="53b6498141fe9e946f9d83338c1323888885539c" translate="yes" xml:space="preserve">
          <source>Modern browsers have added &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/DOM/element.classList&quot;&gt;&lt;strong&gt;classList&lt;/strong&gt;&lt;/a&gt; which provides methods to make it easier to manipulate classes without needing a library:</source>
          <target state="translated">最近のブラウザには、ライブラリを必要とせずにクラスを簡単に操作できるようにするメソッドを提供する&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/DOM/element.classList&quot;&gt;&lt;strong&gt;classList&lt;/strong&gt;&lt;/a&gt;が追加されています。</target>
        </trans-unit>
        <trans-unit id="2f2684301d059bae8e20d1ae1d416f855beb6ef4" translate="yes" xml:space="preserve">
          <source>OK, I think in this case you should use jQuery or write your own Methods in pure javascript, my preference is adding my own methods rather than injecting all jQuery to my application if I don't need that for other reasons.</source>
          <target state="translated">この場合はjQueryを使うか、純粋なjavascriptで独自のメソッドを書くべきだと思います。私の好みとしては、他の理由で必要ない場合は、アプリケーションに全てのjQueryを注入するよりも、独自のメソッドを追加したいと思います。</target>
        </trans-unit>
        <trans-unit id="1ef9dca9eda5714499e41e3ca4a0e48e33dbbe28" translate="yes" xml:space="preserve">
          <source>One option for selecting the element is using &lt;a href=&quot;http://closure-library.googlecode.com/svn/docs/closure_third_party_closure_goog_dojo_dom_query.js.html&quot;&gt;goog.dom.query&lt;/a&gt; with a CSS3 selector:</source>
          <target state="translated">要素を選択するための1つのオプションは、CSS3セレクターで&lt;a href=&quot;http://closure-library.googlecode.com/svn/docs/closure_third_party_closure_goog_dojo_dom_query.js.html&quot;&gt;goog.dom.query&lt;/a&gt;を使用することです。</target>
        </trans-unit>
        <trans-unit id="d1444b408953dffefa3796fb5a3ae7ad577a264b" translate="yes" xml:space="preserve">
          <source>Remove &lt;code&gt;class-b&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;class-b&lt;/code&gt; 削除</target>
        </trans-unit>
        <trans-unit id="a84d3a8d544500165b73389e73283e9b948dd48f" translate="yes" xml:space="preserve">
          <source>Simple cross-browser solution</source>
          <target state="translated">シンプルなクロスブラウザソリューション</target>
        </trans-unit>
        <trans-unit id="08ce43c5a07356aa85adc99bb2b20090aa6f7085" translate="yes" xml:space="preserve">
          <source>So, for example, if I want &lt;code&gt;onclick&lt;/code&gt; to add some class to the button I can use this:</source>
          <target state="translated">したがって、たとえば、 &lt;code&gt;onclick&lt;/code&gt; でクラスをボタンに追加したい場合は、次のように使用できます。</target>
        </trans-unit>
        <trans-unit id="82e37b239faacaa8959a8d69b660b614bf4c2fa7" translate="yes" xml:space="preserve">
          <source>Style Example</source>
          <target state="translated">スタイルの例</target>
        </trans-unit>
        <trans-unit id="91c9cbe8cc1c3f27afb20c2b59f50563feab5826" translate="yes" xml:space="preserve">
          <source>THE OPTIONS.</source>
          <target state="translated">THE OPTIONS.</target>
        </trans-unit>
        <trans-unit id="97cba4858411c435e526dd651157aac20178222c" translate="yes" xml:space="preserve">
          <source>Thanks</source>
          <target state="translated">Thanks</target>
        </trans-unit>
        <trans-unit id="809e675605bb64b7a742959f5e5f320bbad3ef59" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;g&lt;/code&gt; flag tells the replace to repeat as required, in case the class name has been added multiple times.</source>
          <target state="translated">&lt;code&gt;g&lt;/code&gt; フラグは、クラス名が複数回追加された場合に備えて、置換を必要に応じて繰り返すように指示します。</target>
        </trans-unit>
        <trans-unit id="f109cbca15dfc6fad07e4a2495c3da8663565914" translate="yes" xml:space="preserve">
          <source>The above code is all in standard JavaScript, however it is common practise to use either a framework or a library to simplify common tasks, as well as benefit from fixed bugs and edge cases that you might not think of when writing your code.</source>
          <target state="translated">上記のコードはすべて標準的なJavaScriptで書かれていますが、一般的なタスクを単純化するためにフレームワークやライブラリを使用するのが一般的です。</target>
        </trans-unit>
        <trans-unit id="5198c4d1f7e534bfad2402d9b1aaaffe7950a33a" translate="yes" xml:space="preserve">
          <source>The difference between &lt;code&gt;style&lt;/code&gt; and &lt;code&gt;classList&lt;/code&gt; is that with &lt;code&gt;style&lt;/code&gt; you're adding to the style properties of the element, but &lt;code&gt;classList&lt;/code&gt; is kinda controlling the class(es) of the element (&lt;code&gt;add&lt;/code&gt;, &lt;code&gt;remove&lt;/code&gt;, &lt;code&gt;toggle&lt;/code&gt;, &lt;code&gt;contain&lt;/code&gt;), I will show you how to use the &lt;code&gt;add&lt;/code&gt; and &lt;code&gt;remove&lt;/code&gt; method since those are the popular ones.</source>
          <target state="translated">&lt;code&gt;style&lt;/code&gt; と &lt;code&gt;classList&lt;/code&gt; の違いは、 スタイルで要素のスタイルプロパティに追加することですが、 &lt;code&gt;classList&lt;/code&gt; は要素のクラスを制御する（ &lt;code&gt;add&lt;/code&gt; 、 &lt;code&gt;remove&lt;/code&gt; 、 &lt;code&gt;toggle&lt;/code&gt; 、 contains ）ので、その方法を説明しますこれらは人気があるので、 &lt;code&gt;add&lt;/code&gt; と &lt;code&gt;remove&lt;/code&gt; 方法を使用します。</target>
        </trans-unit>
        <trans-unit id="802cc9ac94ea0229ccc58b8933817563982dcd5b" translate="yes" xml:space="preserve">
          <source>The examples above have been reproduced below using &lt;a href=&quot;http://jquery.com&quot;&gt;jQuery&lt;/a&gt;, probably the most commonly used JavaScript library (though there are others worth investigating too).</source>
          <target state="translated">上記の例は、 &lt;a href=&quot;http://jquery.com&quot;&gt;jQuery&lt;/a&gt;を使用して以下に再現されています。おそらく最も一般的に使用されているJavaScriptライブラリです（調査する価値のある他のものもあります）。</target>
        </trans-unit>
        <trans-unit id="8c2e62157cbf5e76464f1a58b2c8fbf328eb8eae" translate="yes" xml:space="preserve">
          <source>The first step to achieving this is by creating a function, and calling the function in the onclick attribute, for example:</source>
          <target state="translated">これを実現するための最初のステップは、関数を作成して、例えばonclick属性で関数を呼び出すことです。</target>
        </trans-unit>
        <trans-unit id="aadca0f8a80a4a50095ad4e6b56ce361c1429e29" translate="yes" xml:space="preserve">
          <source>The line</source>
          <target state="translated">ライン</target>
        </trans-unit>
        <trans-unit id="f27f110864aa7b0ab899e89c904ecec388deab91" translate="yes" xml:space="preserve">
          <source>The parent class is the class which hosts the class you want to change</source>
          <target state="translated">親クラスは変更したいクラスをホストしているクラスです。</target>
        </trans-unit>
        <trans-unit id="d66979c7c47838b441389e2b4f1298a23668dc2c" translate="yes" xml:space="preserve">
          <source>The same regex used above for removing a class can also be used as a check as to whether a particular class exists:</source>
          <target state="translated">クラスを削除するために上記で使用したのと同じ正規表現を、特定のクラスが存在するかどうかのチェックとして使用することもできます。</target>
        </trans-unit>
        <trans-unit id="6d367e8fd27562239e6dd8d9724b0944a0278ec9" translate="yes" xml:space="preserve">
          <source>The second step is to move the onclick event out of the HTML and into JavaScript, for example using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/DOM/element.addEventListener&quot;&gt;addEventListener&lt;/a&gt;</source>
          <target state="translated">2番目のステップは、たとえば&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/DOM/element.addEventListener&quot;&gt;addEventListener&lt;/a&gt;を使用して、onclickイベントをHTMLからJavaScriptに移動することです。</target>
        </trans-unit>
        <trans-unit id="59ab9f7231f32dd0779c50c42535f57fe064563c" translate="yes" xml:space="preserve">
          <source>The standard JavaScript way to select an element is using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/DOM/document.getElementById&quot;&gt;&lt;code&gt;document.getElementById(&quot;Id&quot;)&lt;/code&gt;&lt;/a&gt;, which is what the following examples use - you can of course obtain elements in other ways, and in the right situation may simply use &lt;code&gt;this&lt;/code&gt; instead - however, going into detail on this is beyond the scope of the answer.</source>
          <target state="translated">要素を選択する標準のJavaScriptの方法は、 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/DOM/document.getElementById&quot;&gt; &lt;code&gt;document.getElementById(&quot;Id&quot;)&lt;/code&gt; を&lt;/a&gt;使用することです。これは、次の例で使用されている方法です。もちろん、他の方法で要素を取得できます。適切な状況では、 &lt;code&gt;this&lt;/code&gt; 代わりに使用することもできます-ただし、これについて詳しく説明することは、答えの範囲を超えています。</target>
        </trans-unit>
        <trans-unit id="489687111187a344e9a7a781aa504a5ea41a719a" translate="yes" xml:space="preserve">
          <source>There is a property &lt;strong&gt;className&lt;/strong&gt; in javascript to change the name of the class of an HTML element. The existing class value will be replaced with the new one, that you have assigned in className.</source>
          <target state="translated">JavaScriptには、HTML要素のクラスの名前を変更するためのプロパティ&lt;strong&gt;className&lt;/strong&gt;があります。 既存のクラス値は、classNameで割り当てた新しい値に置き換えられます。</target>
        </trans-unit>
        <trans-unit id="5b09087a6589bae3223dadbbf1e77d1894938cfe" translate="yes" xml:space="preserve">
          <source>This code adds a function to be called when an element of the id &lt;strong&gt;some-element&lt;/strong&gt; is clicked. The function appends &lt;strong&gt;clicked&lt;/strong&gt; to the element's class attribute if it's not already part of it, and removes it if it's there.</source>
          <target state="translated">このコードは、id &lt;strong&gt;some-elementの要素&lt;/strong&gt;がクリックされたときに呼び出される関数を追加します。 この関数は、要素のclass属性に&lt;strong&gt;クリックさ&lt;/strong&gt;れていない場合は&lt;strong&gt;クリック&lt;/strong&gt;して追加し、存在する場合は削除します。</target>
        </trans-unit>
        <trans-unit id="0e707381938a6a661f919aabba934bfb4b3ccf4e" translate="yes" xml:space="preserve">
          <source>This is easiest with a library like jQuery:</source>
          <target state="translated">これはjQueryのようなライブラリを使うのが一番簡単です。</target>
        </trans-unit>
        <trans-unit id="dc573b44a05ace5f21d2372a8a801e2bd6199be2" translate="yes" xml:space="preserve">
          <source>This is possible with (&lt;em&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document&quot;&gt;document&lt;/a&gt;&lt;/em&gt; or &lt;em&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Event/target&quot;&gt;event&lt;/a&gt;&lt;/em&gt;):</source>
          <target state="translated">これは（ &lt;em&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document&quot;&gt;ドキュメント&lt;/a&gt;&lt;/em&gt;または&lt;em&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Event/target&quot;&gt;イベント&lt;/a&gt;&lt;/em&gt; ）で可能です：</target>
        </trans-unit>
        <trans-unit id="38c168024e08a8054d26329d0c0f976b30921624" translate="yes" xml:space="preserve">
          <source>This is working for me:</source>
          <target state="translated">これは私のために働いています。</target>
        </trans-unit>
        <trans-unit id="eb8f2abc21aa254f1460919841cddd6f01f02b3e" translate="yes" xml:space="preserve">
          <source>This regex is case insensitive so that bugs in class names may show up before the code is used on a browser that doesn't care about case in class names.</source>
          <target state="translated">この正規表現は大文字小文字を区別しないので、クラス名の大文字小文字を気にしないブラウザではコードが使われる前に、クラス名のバグが現れる可能性があります。</target>
        </trans-unit>
        <trans-unit id="62aada228665b7ac74330150a0132927affdc977" translate="yes" xml:space="preserve">
          <source>This should work in IE5.5 and up according to &lt;a href=&quot;http://quirksmode.org/dom/w3c_html.html&quot;&gt;PPK&lt;/a&gt;.</source>
          <target state="translated">これは、 &lt;a href=&quot;http://quirksmode.org/dom/w3c_html.html&quot;&gt;PPK&lt;/a&gt;に従ってIE5.5以降で動作するはずです。</target>
        </trans-unit>
        <trans-unit id="9b749cd770922aa3a623093381390cf0d5db53d9" translate="yes" xml:space="preserve">
          <source>To add a class to an element, without removing/affecting existing values, append a space and the new classname, like so:</source>
          <target state="translated">既存の値に影響を与えずに要素にクラスを追加するには、次のようにスペースと新しいクラス名を追加します。</target>
        </trans-unit>
        <trans-unit id="8e7efe5740ff9fd6d48b4f00cbe50c9051686c0e" translate="yes" xml:space="preserve">
          <source>To add an additional class to an element:</source>
          <target state="translated">要素にクラスを追加するには</target>
        </trans-unit>
        <trans-unit id="73abf1481eb676e9293b69e7f019f109c8657117" translate="yes" xml:space="preserve">
          <source>To change all classes for an element:</source>
          <target state="translated">要素のすべてのクラスを変更します。</target>
        </trans-unit>
        <trans-unit id="50e0b49cd6b8b58a346e7c33c3e9bd8f1cec7660" translate="yes" xml:space="preserve">
          <source>To check if a class is already applied to an element:</source>
          <target state="translated">要素に既にクラスが適用されているかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="cb9baef3d60b0f3f7acad12fd534cc28250d6a4f" translate="yes" xml:space="preserve">
          <source>To remove a class from an element:</source>
          <target state="translated">要素からクラスを削除するには</target>
        </trans-unit>
        <trans-unit id="69d384e61e5fbd7d856b08dad5b11917d9ba21c8" translate="yes" xml:space="preserve">
          <source>To remove a single class to an element, without affecting other potential classes, a simple regex replace is required:</source>
          <target state="translated">他の潜在的なクラスに影響を与えずに、単一のクラスを要素から削除するには、単純な正規表現の置換が必要です。</target>
        </trans-unit>
        <trans-unit id="dc137be8b1c7b909d2562a3c2ea33cfe92ef60e5" translate="yes" xml:space="preserve">
          <source>To replace all existing classes with one or more new classes, set the className attribute:</source>
          <target state="translated">既存のすべてのクラスを1つ以上の新しいクラスに置き換えるには、className属性を設定します。</target>
        </trans-unit>
        <trans-unit id="501a20a1a736caecdc3e2f0e7eb0ef5f0c089e5f" translate="yes" xml:space="preserve">
          <source>Unfortunately, these do not work in Internet Explorer prior to v10, though there is a &lt;a href=&quot;http://en.wikipedia.org/wiki/Shim_(computing)&quot;&gt;shim&lt;/a&gt; to add support for it to IE8 and IE9, available from &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/DOM/element.classList&quot;&gt;this page&lt;/a&gt;. It is, though, getting more and more &lt;a href=&quot;http://caniuse.com/#feat=classlist&quot;&gt;supported&lt;/a&gt;.</source>
          <target state="translated">残念ながら、これらはv10より前のInternet Explorerでは機能しませんが、IE8とIE9にサポートを追加する&lt;a href=&quot;http://en.wikipedia.org/wiki/Shim_(computing)&quot;&gt;シム&lt;/a&gt;があり、 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/DOM/element.classList&quot;&gt;このページ&lt;/a&gt;から入手できます 。 しかし、それはますます&lt;a href=&quot;http://caniuse.com/#feat=classlist&quot;&gt;サポートされてい&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="861a0e430ffac5e4ae6e11b7a947f2c32d388cf4" translate="yes" xml:space="preserve">
          <source>Usage:</source>
          <target state="translated">Usage:</target>
        </trans-unit>
        <trans-unit id="3763ecb76eb6808c48b43d7256f8f7eff55850af" translate="yes" xml:space="preserve">
          <source>Using pure JavaScript code:</source>
          <target state="translated">純粋なJavaScriptのコードを使用しています。</target>
        </trans-unit>
        <trans-unit id="61a759c3d499ce06a238dcee087f0fa8236894c7" translate="yes" xml:space="preserve">
          <source>We can observe in the log that we are getting back an object with not only the classes of the element, but also many auxiliary methods and properties. This object inherits from the interface &lt;strong&gt;DOMTokenList&lt;/strong&gt;, an interface which is used in the DOM to represent a set of space separated tokens (like classes).</source>
          <target state="translated">要素のクラスだけでなく、多くの補助的なメソッドやプロパティを含むオブジェクトを取得していることをログで確認できます。 このオブジェクトは、 &lt;strong&gt;DOMTokenList&lt;/strong&gt;インターフェースを継承します。これは、DOMで使用され、スペースで区切られたトークンのセット（クラスなど）を表すために使用されます。</target>
        </trans-unit>
        <trans-unit id="57d18cd19c6cab5150b2ceeea6112eaadef727bf" translate="yes" xml:space="preserve">
          <source>Whilst it is possible to write JavaScript directly inside the HTML event attributes (such as &lt;code&gt;onclick=&quot;this.className+=' MyClass'&quot;&lt;/code&gt;) this is not recommended behaviour. Especially on larger applications, more maintainable code is achieved by separating HTML markup from JavaScript interaction logic.</source>
          <target state="translated">JavaScriptをHTMLイベント属性（ &lt;code&gt;onclick=&quot;this.className+=' MyClass'&quot;&lt;/code&gt; ）内に直接書き込むことは可能ですが、これは推奨される動作ではありません。 特に大規模なアプリケーションでは、JavaScriptの相互作用ロジックからHTMLマークアップを分離することで、より保守しやすいコードが実現されます。</target>
        </trans-unit>
        <trans-unit id="b806fdcc0f9506960490ba9941432148ed8978c6" translate="yes" xml:space="preserve">
          <source>Whilst some people consider it overkill to add a ~50&amp;nbsp;KB framework for simply changing a class, if you are doing any substantial amount of JavaScript work, or anything that might have unusual cross-browser behaviour, it is well worth considering.</source>
          <target state="translated">一部の人々は単にクラスを変更するために最大50 KBのフレームワークを追加するのはやり過ぎだと考えていますが、JavaScriptの作業、または通常とは異なるブラウザー間動作を行う可能性があるものを実行している場合は、検討する価値があります。</target>
        </trans-unit>
        <trans-unit id="2bef323620981b3d4d07ac66ccfeb416b3353236" translate="yes" xml:space="preserve">
          <source>Working JavaScript code:</source>
          <target state="translated">動作するJavaScriptのコード。</target>
        </trans-unit>
        <trans-unit id="89a43e4cb3f23d141e19de5b3fcd541c78fdd5c6" translate="yes" xml:space="preserve">
          <source>Wow, surprised there are so many overkill answers here...</source>
          <target state="translated">うわー、ここにはやり過ぎた回答が多いのに驚いた...。</target>
        </trans-unit>
        <trans-unit id="c451d1ad6a4d5cbe7bbfaf91349e059ac69e4679" translate="yes" xml:space="preserve">
          <source>Yes there is many ways to do this. In ES6 syntax we can achieve easily. 
Use this code toggle add and remove class.</source>
          <target state="translated">はい、これを行うには多くの方法があります。ES6の構文では、我々は簡単に達成することができます。このコードを使用して、クラスの追加と削除をトグルします。</target>
        </trans-unit>
        <trans-unit id="5c078f38414ba1760eef21af5bb1b97b869cff55" translate="yes" xml:space="preserve">
          <source>Yes you do need to add a reference to the jQuery library in your page to use this code, but at least you can feel confident the most functions in the library would work on pretty much all the modern browsers, and it will save you time implementing your own code to do the same.</source>
          <target state="translated">このコードを使用するには、ページ内にjQueryライブラリへの参照を追加する必要がありますが、少なくとも、ライブラリ内のほとんどの関数は、ほとんどすべての最新ブラウザで動作すると確信できます。</target>
        </trans-unit>
        <trans-unit id="779a1eca62ea7675679ac97dc2b3cf99a2dc248d" translate="yes" xml:space="preserve">
          <source>You can also use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Element.classList&quot;&gt;element.classList&lt;/a&gt; in modern browsers.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Element.classList&quot;&gt;element.classList&lt;/a&gt;を最新のブラウザで使用することもできます。</target>
        </trans-unit>
        <trans-unit id="2073ffabd4a76c98c79aca958b1b4250b6b901b1" translate="yes" xml:space="preserve">
          <source>You can download a working code from &lt;a href=&quot;http://ownanswers.com/question/add-remove-and-replace-class-in-javascript/&quot;&gt;this link&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://ownanswers.com/question/add-remove-and-replace-class-in-javascript/&quot;&gt;このリンク&lt;/a&gt;から作業コードをダウンロードできます。</target>
        </trans-unit>
        <trans-unit id="db77731b31769883c1ff93aac72570acd0e3be88" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;node.className&lt;/code&gt; like so:</source>
          <target state="translated">&lt;code&gt;node.className&lt;/code&gt; ようにnode.classNameを使用できます。</target>
        </trans-unit>
        <trans-unit id="58645f5bd88f1d1ea50e196cb3b6f7ff58127e45" translate="yes" xml:space="preserve">
          <source>You could also just do:</source>
          <target state="translated">することもできます。</target>
        </trans-unit>
        <trans-unit id="39ffd4a52c91c462b35cb89b3f90e5f22b397db2" translate="yes" xml:space="preserve">
          <source>You may try to use node &lt;code&gt;attributes&lt;/code&gt; property to keep compatibility with old browsers even IE6:</source>
          <target state="translated">IE6でも古いブラウザとの互換性を維持するためにノード &lt;code&gt;attributes&lt;/code&gt; プロパティを使用しようとする場合があります。</target>
        </trans-unit>
        <trans-unit id="f29a69aa96b6fc7e9c8021743be2d5fc272e597d" translate="yes" xml:space="preserve">
          <source>You'll want to do it globally in case the class list has the class name more than once. And, you'll probably want to strip spaces from the ends of the class list and convert multiple spaces to one space to keep from getting runs of spaces. None of these things should be a problem if the only code dinking with the class names uses the regex below and removes a name before adding it. But. Well, who knows who might be dinking with the class name list.</source>
          <target state="translated">クラスリストに複数回クラス名が含まれている場合には、グローバルにこれを行いたいと思うでしょう。また、クラスリストの末尾からスペースを削除し、複数のスペースを一つのスペースに変換して、スペースの重複を防ぐことも必要でしょう。クラス名を扱う唯一のコードが以下の正規表現を使用して、名前を追加する前に名前を削除するのであれば、これらのことはどれも問題ではありません。しかし。まあ、誰がクラス名のリストを弄っているかもしれないことを知っている人はいません。</target>
        </trans-unit>
        <trans-unit id="5bff639cd0e1ed09143f3251f2d3269e6c679ba0" translate="yes" xml:space="preserve">
          <source>add class:</source>
          <target state="translated">クラスを追加します。</target>
        </trans-unit>
        <trans-unit id="b2d0a9425da9c1a7688f388c159ae2f51402a35b" translate="yes" xml:space="preserve">
          <source>also see my answer &lt;a href=&quot;https://stackoverflow.com/a/42941303/460084&quot;&gt;here&lt;/a&gt; for creating a new class dynamically</source>
          <target state="translated">新しいクラスを動的に作成するための&lt;a href=&quot;https://stackoverflow.com/a/42941303/460084&quot;&gt;ここ&lt;/a&gt;での私の答えも参照してください</target>
        </trans-unit>
        <trans-unit id="2cec0d24d4756c3eb835e2279403508b7473c9d1" translate="yes" xml:space="preserve">
          <source>and you can simply call use them as below, imagine your element has id of 'id' and class of 'class', make sure you pass them as a string, you can use the util as below:</source>
          <target state="translated">要素の id が 'id' で class が 'class' であることを想像してみてください。</target>
        </trans-unit>
        <trans-unit id="beda66c7dd170a20cbcc826daa70a673348bf8e6" translate="yes" xml:space="preserve">
          <source>classList Example</source>
          <target state="translated">classList の例</target>
        </trans-unit>
        <trans-unit id="4344283e6773e5616b960a3d1c7abce23528db8d" translate="yes" xml:space="preserve">
          <source>just say &lt;code&gt;myElement.classList=&quot;new-class&quot;&lt;/code&gt; unless you need to maintain other existing classes in which case you can use the &lt;code&gt;classList.add, .remove&lt;/code&gt; methods.</source>
          <target state="translated">他の既存のクラスを維持する必要がない限り、 &lt;code&gt;myElement.classList=&quot;new-class&quot;&lt;/code&gt; とだけ言ってください。その場合、 &lt;code&gt;classList.add, .remove&lt;/code&gt; メソッドを使用できます。</target>
        </trans-unit>
        <trans-unit id="be1191975874be54dcd827ea2526360978f7007e" translate="yes" xml:space="preserve">
          <source>or, without needing an id:</source>
          <target state="translated">または、IDを必要としない</target>
        </trans-unit>
        <trans-unit id="449f07da0c3f27ae36a0fa1a28e3ba5583d3afd9" translate="yes" xml:space="preserve">
          <source>remove class:</source>
          <target state="translated">クラスを削除します。</target>
        </trans-unit>
        <trans-unit id="be1bfaca7c9611304df5a957a9c220beefab134c" translate="yes" xml:space="preserve">
          <source>see &lt;a href=&quot;https://jsfiddle.net/dLuhp9se/&quot;&gt;jsfiddle&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://jsfiddle.net/dLuhp9se/&quot;&gt;jsfiddleを&lt;/a&gt;参照</target>
        </trans-unit>
        <trans-unit id="75fc35662c682299e21a69af3f3a1a20f1a84f82" translate="yes" xml:space="preserve">
          <source>should be:</source>
          <target state="translated">であるべきです。</target>
        </trans-unit>
        <trans-unit id="3240aa0fe3ca15051680641a59e8d7b61c286b23" translate="yes" xml:space="preserve">
          <source>try</source>
          <target state="translated">try</target>
        </trans-unit>
        <trans-unit id="f34524b2be7c870d723513286d415d594020cd80" translate="yes" xml:space="preserve">
          <source>using the accepted answer above here is a simple cross-browser function to add and remove class</source>
          <target state="translated">上で受け入れられた答えを使用して、ここでは、クラスを追加したり削除したりするためのシンプルなクロスブラウザ関数です</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
