<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://stackoverflow.com/questions/37628">
    <body>
      <group id="37628">
        <trans-unit id="76e6755cb5cf7ea2a882d92a0160c1d456f7a307" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AccessibleObject&lt;/code&gt; allows suppression of access checks if the necessary &lt;code&gt;ReflectPermission&lt;/code&gt; is available.</source>
          <target state="translated">&lt;code&gt;AccessibleObject&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; позволяет подавить проверки доступа, если необходим необходимый &lt;/font&gt;&lt;/font&gt; &lt;code&gt;ReflectPermission&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="39efd8e310f8ce4c0f2d605df069aa7f3af1100c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Hibernate&lt;/code&gt; chose &lt;code&gt;reflection&lt;/code&gt; because it has minimal impact on the build process for an application.</source>
          <target state="translated">&lt;code&gt;Hibernate&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; выбрал &lt;/font&gt;&lt;/font&gt; &lt;code&gt;reflection&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; поскольку оно оказывает минимальное влияние на процесс сборки приложения.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1abe26519d6d02eee7c63f5db0048f72effe89e1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Reflection&lt;/code&gt; has many &lt;strong&gt;uses&lt;/strong&gt;. The one I am more familiar with, is to be able to create code on the fly.</source>
          <target state="translated">&lt;code&gt;Reflection&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; имеет много &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;применений&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Тот, с которым я больше знаком, - это возможность создавать код на лету.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2cce7d499ca058a2437bf7339a31236939770c77" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;java.lang.reflect&lt;/code&gt; package provides classes and interfaces for obtaining reflective information about classes and objects. Reflection allows programmatic access to information about the fields, methods and constructors of loaded classes, and the use of reflected fields, methods, and constructors to operate on their underlying counterparts, within security restrictions.</source>
          <target state="translated">&lt;code&gt;java.lang.reflect&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Пакет &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;java.lang.reflect&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; предоставляет классы и интерфейсы для получения отражающей информации о классах и объектах. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Reflection обеспечивает программный доступ к информации о полях, методах и конструкторах загруженных классов, а также использование отраженных полей, методов и конструкторов для работы с их соответствующими аналогами в рамках ограничений безопасности.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3263b2c8e5e8dad3181f60ed7d5ff3ad1e0d372f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Debugging and testing tools:&lt;/em&gt; Debuggers use the property of reflection to examine private members on classes.</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Инструменты отладки и тестирования.&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Отладчики используют свойство отражения для проверки закрытых членов на классах.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="267dc8219745212321ac176413d4c94adca30a05" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Exposure of Internals:&lt;/em&gt; Reflective code breaks abstractions and therefore may change behaviour with upgrades of the platform.</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Воздействие внутренних элементов:&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; рефлексивный код нарушает абстракции и, следовательно, может изменить поведение при обновлении платформы.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9cbfa1487aca6a5660de89dd102bde0c1c17545e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Extensibility Features:&lt;/em&gt; An application may make use of external, user-defined classes by creating instances of extensibility objects using their fully-qualified names.</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Функции расширяемости.&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Приложение может использовать внешние пользовательские классы, создавая экземпляры объектов расширяемости, используя их полностью определенные имена.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e7e35d05e9225bc40318edb029e92b9221cf09f8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Insecure use of its functions conducted from within a system code can also easily lead to the compromise of a Java security mode&lt;/em&gt;l. &lt;strong&gt;&lt;em&gt;So use this feature sparingly&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Небезопасное использование его функций из системного кода также может легко привести к компрометации режима безопасности Java&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; l. &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Так что используйте эту функцию экономно&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d41e8a8fba94b4d81b8d5bd6e7cf8bdf1eefc8d9" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Performance Overhead:&lt;/em&gt; Reflective operations have slower performance than their non-reflective counterparts, and should be avoided in sections of code which are called frequently in performance-sensitive applications.</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Повышение производительности:&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; отражающие операции имеют более низкую производительность, чем их неотражающие аналоги, и их следует избегать в разделах кода, которые часто вызываются в приложениях, чувствительных к производительности.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c915f0bd00f8e6b012946d1f700aaa3ed64dbd3d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Drawbacks of Reflection:&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Недостатки отражения:&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="87c6e54c26e0d51710b1bde8afda98446607c4ca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;General abuses:&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Общие нарушения:&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f3e691ba1d34f66cf36e41a992eab2a9d5d408b0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;User of Reflection:&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Пользователь Reflection:&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="aa9a74fe5b677cca7bf44297e356b2ac51b61601" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;A quick Java Reflection example to show you what using reflection looks like:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Быстрый пример Java Reflection, чтобы показать вам, как выглядит отражение:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6c1a08dcc59d69c190a602baff7d91a19e330e4f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Advantages of Using Reflection:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Преимущества использования отражения:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2f397612a47bec94ad695255d033038d2522a78f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Class&lt;/strong&gt; The &lt;code&gt;getClass()&lt;/code&gt; method is used to get the name of the class to which an object belongs.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Класс&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Метод &lt;/font&gt;&lt;/font&gt; &lt;code&gt;getClass()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; используется для получения имени класса, к которому принадлежит объект.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c7588922df25af8ae3e7d84556122b47c9788b7e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Constructors&lt;/strong&gt; The &lt;code&gt;getConstructors()&lt;/code&gt; method is used to get the public constructors of the class to which an object belongs.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Конструкторы&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Метод &lt;/font&gt;&lt;/font&gt; &lt;code&gt;getConstructors()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; используется для получения открытых конструкторов класса, к которому принадлежит объект.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5b6eed8acc664104c3f5ddf8eb8ffc72c0b4ea7b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Drawbacks of Reflection&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Недостатки отражения&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9c418adcde6dca33f2113e643b3cf7aa3e0d8fbb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Drawbacks:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Drawbacks:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d38ebd5c771c17c46c4d33de4e05fd33d6ac45f2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Edit&lt;/strong&gt;: After almost 1 year I am editing this answer as while reading about reflection I got few more uses of Reflection.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Изменить&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : После почти 1 года я редактирую этот ответ, так как во время чтения об отражении я получил еще несколько вариантов использования Отражения.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4168878b06eaa6917a0f012585506612f5054ea6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Example:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8d9e8fd103683e9aa854d2eeed4c37db80eb4ede" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Exposure of Internals&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Воздействие внутренних органов&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="61df392d4c2c65b0d121e33ddf25034ec22b3e90" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Extensibility Features&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Особенности расширяемости&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="67f058ae58b2f7815f80d243b58b2301bdcc1f70" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Methods&lt;/strong&gt; The &lt;code&gt;getMethods()&lt;/code&gt; method is used to get the public methods of the class to which an objects belongs.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Методы&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Метод &lt;/font&gt;&lt;/font&gt; &lt;code&gt;getMethods()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; используется для получения открытых методов класса, к которому принадлежит объект.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bee72a5bdb9095800c3ce5443e8515bcb89c5a64" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Performance Overhead&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Накладные расходы&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b38d24c2f6248a08d1e522f5d9bfb4c0ff3b9e2b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reflection&lt;/strong&gt; can be used to get information about &amp;ndash;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Отражение&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; может быть использовано для получения информации о -&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="800b9231b7f82f8ae67b04bb2964d334fdd281c2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reflection&lt;/strong&gt; is a language's ability to inspect and dynamically call classes, methods, attributes, etc. at runtime.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Отражение&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; - это способность языка проверять и динамически вызывать классы, методы, атрибуты и т. Д. Во время выполнения.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1552193a224a7dc7dc501a889de6a813238c8a6e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reflection&lt;/strong&gt; is an API which is used to examine or modify the behaviour of &lt;em&gt;methods, classes, interfaces&lt;/em&gt; at runtime.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Reflection&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; - это API, который используется для проверки или изменения поведения &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;методов, классов, интерфейсов&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; во время выполнения.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5bd8a53de58e1ef9ec971b35d223f86ba6d6212a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Security Restrictions&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ограничения безопасности&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a2fb070431451825a43dbcb68523c4e1049f4a93" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Summary:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Summary:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="778b38d2a4a2b95315242cc54697e20caf993e63" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Update from a comment:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Обновление из комментария:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f35f58f37b1538bdfd364dbe78010cac8348c35a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Uses of Reflection&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Использование Отражения&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9c9ce074852cbddff495458254730c1017607102" translate="yes" xml:space="preserve">
          <source>A different example would be a unit-test of a private method. One way to do so is to create a reflection and change the method's scope to public in the test's set-up phase. Of course one can argue private methods shouldn't be tested directly but that's not the point.</source>
          <target state="translated">Другим примером будет юнит-тестирование частного метода.Один из способов сделать это-создать рефлексию и изменить область применения метода на публичную на этапе настройки теста.Конечно,можно утверждать,что частные методы не должны тестироваться напрямую,но дело не в этом.</target>
        </trans-unit>
        <trans-unit id="bca38910ed77d521afc94527effc9909183faece" translate="yes" xml:space="preserve">
          <source>A practical example of using reflections would be a Java Language Server written in Java or a PHP Language Server written in PHP, etc. Language Server gives your IDE abilities like autocomplete, jump to definition, context help, hinting types and more. In order to have all tag names (words that can be autocompleted) to show all the possible matches as you type the Language Server has to inspect everything about the class including doc blocks and private members. For that it needs a reflection of said class.</source>
          <target state="translated">Практическим примером использования отражений может служить Java Language Server,написанный на Java или PHP Language Server,написанный на PHP,и т.д.Языковой сервер предоставляет ваши IDE возможности,такие как автозаполнение,переход к определению,контекстная справка,подсказки и многое другое.Для того,чтобы все имена тегов (слова,которые могут быть автозавершены)показывали все возможные совпадения по мере ввода,языковой сервер должен проверять все о классе,включая блоки doc и приватные члены.Для этого ему нужно отобразить указанный класс.</target>
        </trans-unit>
        <trans-unit id="f712e1ab9f7444585d3113d90a826187db60eb20" translate="yes" xml:space="preserve">
          <source>Alternatively works &lt;code&gt;Lombok Project&lt;/code&gt;. It just injects code at compile time, result in code being inserted into your domain classes. (I think it is OK for getters and setters)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;В качестве альтернативы работает &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Lombok Project&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Он просто внедряет код во время компиляции, в результате код вставляется в классы вашего домена. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(Я думаю, что это нормально для добытчиков и сеттеров)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5d85b2f6bdd2e23adc756e771b97a67cb296aa3b" translate="yes" xml:space="preserve">
          <source>An application may make use of external, user-defined classes by creating instances of extensibility objects using their fully-qualified names.
Class Browsers and Visual Development Environments
A class browser needs to be able to enumerate the members of classes. Visual development environments can benefit from making use of type information available in reflection to aid the developer in writing correct code.
Debuggers and Test Tools
Debuggers need to be able to examine private members in classes. Test harnesses can make use of reflection to systematically call a discoverable set APIs defined on a class, to ensure a high level of code coverage in a test suite.</source>
          <target state="translated">Приложение может использовать внешние,пользовательские классы,создавая экземпляры объектов расширяемости,используя их полные имена.Браузеры классов и визуальные среды разработки Браузер классов должен иметь возможность перечислять членов классов.Визуальные среды разработки могут выиграть от использования информации о типах,доступной в отражении,чтобы помочь разработчику в написании корректного кода.Отладчики и тестовые инструменты должны иметь возможность изучать частных членов в классах.Тестовые жгуты могут использовать рефлексию для систематического вызова обнаруживаемого набора API,определенных в классе,чтобы обеспечить высокий уровень покрытия кода в тестовом наборе.</target>
        </trans-unit>
        <trans-unit id="cc45f1793412faaa4a56959b5f8838af9b2c8ec5" translate="yes" xml:space="preserve">
          <source>And finally, the most comprehensive example is &lt;a href=&quot;http://www.springframework.org/&quot;&gt;Spring&lt;/a&gt; which uses reflection to create its beans, and for its heavy use of proxies</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;И, наконец, наиболее полный пример - это &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.springframework.org/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Spring,&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; который использует отражение для создания своих компонентов и для интенсивного использования прокси.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8c9a5c4733b5d39d0014e51ebae4c5efb4c65d7c" translate="yes" xml:space="preserve">
          <source>And finally, yes, the concepts are pretty much similar in other statically typed languages which support reflection (like C#). In dynamically typed languages, the use case described above is less necessary (since the compiler will allow any method to be called on any object, failing at runtime if it does not exist), but the second case of looking for methods which are marked or work in a certain way is still common.</source>
          <target state="translated">И,наконец,да,понятия довольно похожи в других статически типизированных языках,которые поддерживают рефлексию (например,C#).В языках с динамическим набором символов сценарий использования,описанный выше,менее необходим (так как компилятор позволит вызвать любой метод на любом объекте,если он не существует,в случае его отсутствия во время выполнения),но второй случай поиска методов,которые помечены или работают определенным образом,все еще распространен.</target>
        </trans-unit>
        <trans-unit id="0b518e10771b9253bdd4fc733405e465373ffaf4" translate="yes" xml:space="preserve">
          <source>And from Java 7 we have &lt;code&gt;MethodHandles&lt;/code&gt;, which works as &lt;code&gt;Reflection API&lt;/code&gt;. In projects, to work with loggers we just copy-paste the next code:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;А из Java 7 у нас есть &lt;/font&gt;&lt;/font&gt; &lt;code&gt;MethodHandles&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , который работает как &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Reflection API&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;В проектах для работы с регистраторами мы просто копируем и вставляем следующий код:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="98106d65797a34619f72a02cb51b7d2dc74338bf" translate="yes" xml:space="preserve">
          <source>Another example would be the Java API for XML Parsing &lt;a href=&quot;http://en.wikipedia.org/wiki/Java_API_for_XML_Processing&quot;&gt;(JAXP)&lt;/a&gt;. Where an XML parser provider is 'plugged-in' via well-known system properties, which are used to construct new instances through reflection.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Другим примером может быть Java API для синтаксического анализа XML &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Java_API_for_XML_Processing&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(JAXP)&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Где поставщик синтаксического анализатора XML подключается через хорошо известные системные свойства, которые используются для создания новых экземпляров посредством отражения.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f2677ff031c51b9e6180e8fe1a179c64f0a10160" translate="yes" xml:space="preserve">
          <source>As I find it best to explain by example and none of the answers seem to do that...</source>
          <target state="translated">Так как я считаю,что лучше всего объяснять на примере,и ни один из ответов,кажется,этого не делает...</target>
        </trans-unit>
        <trans-unit id="f002a793bb200d428bfb3a57f359de8a68a61d85" translate="yes" xml:space="preserve">
          <source>As name itself suggest it reflects what it holds for example class method,etc apart from providing feature to invoke method creating instance dynamically at runtime.</source>
          <target state="translated">Как подсказывает само название,оно отражает то,что у него есть,например,метод класса и т.д.,кроме предоставления возможности динамического вызова метода,создающего экземпляр во время выполнения.</target>
        </trans-unit>
        <trans-unit id="ca04a01c15dacb15e63a42b4719d12252a2f8fc8" translate="yes" xml:space="preserve">
          <source>As per my understanding:</source>
          <target state="translated">Как я понимаю:</target>
        </trans-unit>
        <trans-unit id="4a30e97f958985a613983df7e9a9f4147937428e" translate="yes" xml:space="preserve">
          <source>Because it is hard to make typo-error in this case.</source>
          <target state="translated">Потому что в этом случае трудно сделать опечатку.</target>
        </trans-unit>
        <trans-unit id="d2fd967478b11175693c52637e16182d67678925" translate="yes" xml:space="preserve">
          <source>Because reflection involves types that are dynamically resolved, certain Java virtual machine optimizations cannot be performed. Consequently, reflective operations have slower performance than their non-reflective counterparts and should be avoided in sections of code which are called frequently in performance-sensitive applications.</source>
          <target state="translated">Поскольку рефлексия включает в себя типы,которые динамически разрешаются,определенные оптимизации виртуальной машины Java не могут быть выполнены.Следовательно,отражающие операции имеют более низкую производительность,чем их неотражающие аналоги,и их следует избегать в разделах кода,которые часто вызываются в приложениях,чувствительных к производительности.</target>
        </trans-unit>
        <trans-unit id="75cec77203d8a3c3bbb133724432d2b16ed9c414" translate="yes" xml:space="preserve">
          <source>Classes in this package, along with &lt;code&gt;java.lang.Class&lt;/code&gt; accommodate applications such as debuggers, interpreters, object inspectors, class browsers, and services such as &lt;code&gt;Object Serialization&lt;/code&gt; and &lt;code&gt;JavaBeans&lt;/code&gt; that need access to either the public members of a target object (based on its runtime class) or the members declared by a given class</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Классы в этом пакете, наряду с &lt;/font&gt;&lt;/font&gt; &lt;code&gt;java.lang.Class&lt;/code&gt; ,поддерживают&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; такие приложения, как отладчики, интерпретаторы, инспекторы объектов, браузеры классов и службы, такие как &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Object Serialization&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; и &lt;/font&gt;&lt;/font&gt; &lt;code&gt;JavaBeans&lt;/code&gt; ,&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; которым необходим доступ к открытым членам целевого объекта (на основе его класс выполнения) или члены, объявленные данным классом&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cabd73d2b2f6bec7dcefa96fbed5523c29e5e5fa" translate="yes" xml:space="preserve">
          <source>Creating new instances of objects.</source>
          <target state="translated">Создание новых экземпляров объектов.</target>
        </trans-unit>
        <trans-unit id="f5b464b3897b8c535381e2d8a17e39881cec6f04" translate="yes" xml:space="preserve">
          <source>Creation of new object instances, methods invocation, getting or setting field values of a restricted class.</source>
          <target state="translated">Создание новых экземпляров объектов,вызов методов,получение или установка значений полей ограниченного класса.</target>
        </trans-unit>
        <trans-unit id="984fe3ba3e70d02a7d3335b8bfb0d79f0b528af1" translate="yes" xml:space="preserve">
          <source>Debugger and Test Tools etc.</source>
          <target state="translated">Инструменты отладчика и тестирования и т.д.</target>
        </trans-unit>
        <trans-unit id="310d3e06116a3c41ab7d32a30a08a2f122bcb2f3" translate="yes" xml:space="preserve">
          <source>Exactly how all this works is explained here</source>
          <target state="translated">Точно так же,как все это объясняется здесь.</target>
        </trans-unit>
        <trans-unit id="c175f05d7eb96cebecf6a41d3073e0e90c3ed97d" translate="yes" xml:space="preserve">
          <source>Examining properties of a class (fields, methods, constructors),</source>
          <target state="translated">Изучение свойств класса (поля,методы,конструкторы),</target>
        </trans-unit>
        <trans-unit id="5594aeaa90d29ada020371584fb08ffe991ec816" translate="yes" xml:space="preserve">
          <source>For Private methods,</source>
          <target state="translated">Для частных методов,</target>
        </trans-unit>
        <trans-unit id="693196b805e9eefa4595e0678693d6606e5c3833" translate="yes" xml:space="preserve">
          <source>For example, all objects in Java have the method &lt;code&gt;getClass()&lt;/code&gt;, which lets you determine the object's class even if you don't know it at compile time (e.g. if you declared it as an &lt;code&gt;Object&lt;/code&gt;) - this might seem trivial, but such reflection is not possible in less dynamic languages such as &lt;code&gt;C++&lt;/code&gt;. More advanced uses lets you list and call methods, constructors, etc.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Например, все объекты в Java имеют метод &lt;/font&gt;&lt;/font&gt; &lt;code&gt;getClass()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , который позволяет вам определять класс объекта, даже если вы не знаете его во время компиляции (например, если вы объявили его как &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Object&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ) - это может показаться тривиальным, но такое отражение невозможно в менее динамичных языках, таких как &lt;/font&gt;&lt;/font&gt; &lt;code&gt;C++&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Более расширенное использование позволяет перечислять и вызывать методы, конструкторы и т. Д.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6fb9254fbf60efc7b954b5ba670c968e6ee3a01e" translate="yes" xml:space="preserve">
          <source>For example, say you have an object of an unknown type in Java, and you would like to call a 'doSomething' method on it if one exists. Java's static typing system isn't really designed to support this unless the object conforms to a known interface, but using reflection, your code can look at the object and find out if it has a method called 'doSomething' and then call it if you want to.</source>
          <target state="translated">Например,скажем,у вас есть объект неизвестного типа в Java,и вы хотели бы вызвать на нем метод 'doSomething',если он существует.На самом деле система статического набора текста на Java не предназначена для поддержки этого,если только объект не соответствует известному интерфейсу,но с помощью рефлексии ваш код может посмотреть на объект и узнать,есть ли у него метод под названием 'doSomething',а затем вызвать его,если хотите.</target>
        </trans-unit>
        <trans-unit id="7fdc810374fe9dfa3045213c9b7a12737ef416f6" translate="yes" xml:space="preserve">
          <source>For inspection of classes (also know as introspection) you don't need to import the reflection package (&lt;code&gt;java.lang.reflect&lt;/code&gt;). Class metadata can be accessed through &lt;code&gt;java.lang.Class&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Для проверки классов (также называемых самоанализом) вам не нужно импортировать пакет отражения ( &lt;/font&gt;&lt;/font&gt; &lt;code&gt;java.lang.reflect&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Метаданные класса могут быть доступны через &lt;/font&gt;&lt;/font&gt; &lt;code&gt;java.lang.Class&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e00d01d41832cb3c81dfdf9609e05666593eb6a8" translate="yes" xml:space="preserve">
          <source>For private fields,</source>
          <target state="translated">Для частных полей,</target>
        </trans-unit>
        <trans-unit id="850912486e2e27fec1a678a7817806ccd05f4f34" translate="yes" xml:space="preserve">
          <source>From java documentation &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/package-summary.html&quot;&gt;page&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Со &lt;/font&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/package-summary.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;страницы&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; документации Java&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9b57123908782edab0f9d5315a27bbbc06bd9567" translate="yes" xml:space="preserve">
          <source>From this &lt;a href=&quot;http://www.ibm.com/developerworks/library/j-dyn0603/&quot;&gt;article&lt;/a&gt; (by Dennis Sosnoski, President, Sosnoski Software Solutions, Inc)  and this &lt;a href=&quot;http://www.security-explorations.com/materials/se-2012-01-report.pdf&quot;&gt;article&lt;/a&gt; (security-explorations pdf):</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Из этой &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.ibm.com/developerworks/library/j-dyn0603/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;статьи&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (Деннис Сосноски, президент Sosnoski Software Solutions, Inc) и этой &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.security-explorations.com/materials/se-2012-01-report.pdf&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;статьи&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (pdf-исследования безопасности):&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="973d454cb269a335664d77c5a64d777b1349ce93" translate="yes" xml:space="preserve">
          <source>Have a look at this &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html&quot;&gt;documentation&lt;/a&gt; link for the methods exposed by &lt;strong&gt;&lt;em&gt;&lt;code&gt;Class&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt; class.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Посмотрите на эту &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ссылку &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;документации&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; для методов, представленных &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt; &lt;code&gt;Class&lt;/code&gt; &lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="34deaa41eea028ce9992343bd939a2b019e0bfbf" translate="yes" xml:space="preserve">
          <source>Have a look at this SE question regarding abuse of reflection feature:</source>
          <target state="translated">Взгляните на этот SE вопрос относительно злоупотребления функцией отражения:</target>
        </trans-unit>
        <trans-unit id="c60cc8d0b33ec9707ca888b5d0cc96c2d441df1b" translate="yes" xml:space="preserve">
          <source>Here is some example:</source>
          <target state="translated">Вот пример:</target>
        </trans-unit>
        <trans-unit id="eea4d3e68f79645621537952d7885a21a986a764" translate="yes" xml:space="preserve">
          <source>How do I read a private field in Java?</source>
          <target state="translated">Как прочитать частную область на Java?</target>
        </trans-unit>
        <trans-unit id="f5dcee71779b03aaff859733ff309c6577746074" translate="yes" xml:space="preserve">
          <source>I can see considerable drawbacks than uses of using Reflection</source>
          <target state="translated">Я вижу значительные недостатки по сравнению с использованием Reflection</target>
        </trans-unit>
        <trans-unit id="254f8a9369907f42f3509935f7f7c87622baa519" translate="yes" xml:space="preserve">
          <source>I just want to add some point to all that was listed.</source>
          <target state="translated">Я просто хочу добавить немного очков ко всему,что было перечислено.</target>
        </trans-unit>
        <trans-unit id="0f9631de6c8595f344b280ad2df45d2bdc6cb1b9" translate="yes" xml:space="preserve">
          <source>I want to answer this question by example. First of all &lt;code&gt;Hibernate&lt;/code&gt; project uses &lt;code&gt;Reflection API&lt;/code&gt; to generate &lt;code&gt;CRUD&lt;/code&gt; statements to bridge the chasm between the running application and the persistence store. When things change in the domain, the &lt;code&gt;Hibernate&lt;/code&gt; has to know about them to persist them to the data store and vice versa.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Я хочу ответить на этот вопрос примером. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Прежде всего, &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;проект &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Hibernate&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; использует &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Reflection API&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; для генерации &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;операторов &lt;/font&gt;&lt;/font&gt; &lt;code&gt;CRUD&lt;/code&gt; ,&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; чтобы преодолеть пропасть между работающим приложением и хранилищем сохраняемости. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Когда вещи изменяются в домене, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Hibernate&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; должен знать о них, чтобы сохранить их в хранилище данных и наоборот.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="59ea7d8a60e63123865790fbb39afca4b577dbbe" translate="yes" xml:space="preserve">
          <source>I'm particularly interested in Java, but I assume the principles are the same in any language.</source>
          <target state="translated">Меня особенно интересует Java,но я предполагаю,что принципы одинаковы в любом языке.</target>
        </trans-unit>
        <trans-unit id="4e63bac98f2a6938d9fab00930c2876281232d32" translate="yes" xml:space="preserve">
          <source>IDE (Integrated Development Environment) e.g. Eclipse, MyEclipse, NetBeans etc.</source>
          <target state="translated">IDE (Интегрированная среда разработки),например,Eclipse,MyEclipse,NetBeans и др.</target>
        </trans-unit>
        <trans-unit id="0adeb6df453a9aaf352a57864918b02b12305438" translate="yes" xml:space="preserve">
          <source>IE: dynamic classes, functions, constructors - based on any data
  (xml/array/sql results/hardcoded/etc..)</source>
          <target state="translated">IE:динамические классы,функции,конструкторы-на основе любых данных (xmlarraysql resultshardcodedetc...).</target>
        </trans-unit>
        <trans-unit id="589a59e1de357ac295cf54fd7d57ea897e25f5a4" translate="yes" xml:space="preserve">
          <source>In C# for example you can load an assembly (a .dll) in runtime an examine it, navigating through the classes and taking actions according to what you found. It also let you create an instance of a class on runtime, invoke its method, etc.</source>
          <target state="translated">В C#,например,можно загрузить сборку (.dll)во время выполнения проверки,перемещаясь по классам и выполняя действия в соответствии с тем,что вы нашли.Это также позволит вам создать экземпляр класса во время выполнения,вызвать его метод и т.д.</target>
        </trans-unit>
        <trans-unit id="e2c488cd992bbd3e18da0edfcfb16bdc9c8d6e3e" translate="yes" xml:space="preserve">
          <source>In above example the null parameter is the object you want to invoke the method on. If the method is static you supply null. If the method is not static, then while invoking you need to supply a valid MyObject instance instead of null.</source>
          <target state="translated">В приведенном выше примере нулевым параметром является объект,на который вы хотите вызвать метод.Если метод статический,то нулевой параметр.Если метод не статический,то при вызове нужно указать правильный MyObject экземпляр вместо нуля.</target>
        </trans-unit>
        <trans-unit id="823d0c56e8aa92cf5babf3278a56092f4ee027c9" translate="yes" xml:space="preserve">
          <source>Instead, by using reflection, there is need to worry about a possibly changing class name.</source>
          <target state="translated">Вместо этого,используя отражение,нужно беспокоиться о возможном изменении имени класса.</target>
        </trans-unit>
        <trans-unit id="f66396f7168221b2bf84c5dcc35135d1e55d77e3" translate="yes" xml:space="preserve">
          <source>Invoking methods,</source>
          <target state="translated">Ссылаясь на методы,</target>
        </trans-unit>
        <trans-unit id="ffda05e922f9a6bcf056ba767a3e49ccdf042dbd" translate="yes" xml:space="preserve">
          <source>It  allows violation of key Java security constraints such
as data access protection and type safety</source>
          <target state="translated">Позволяет нарушать ключевые ограничения Java-безопасности,такие как защита доступа к данным и безопасность типов.</target>
        </trans-unit>
        <trans-unit id="542d0b30181db440cde9bf0e2ad31c763156bc7b" translate="yes" xml:space="preserve">
          <source>It bypasses the source code can create maintenance problems</source>
          <target state="translated">Это в обход исходного кода может создать проблемы обслуживания</target>
        </trans-unit>
        <trans-unit id="a23ed20b481cccd78ea2932605cc56e463dd42e8" translate="yes" xml:space="preserve">
          <source>It can obscure what's actually going on inside your code</source>
          <target state="translated">Это может затушевать то,что на самом деле происходит внутри твоего кода.</target>
        </trans-unit>
        <trans-unit id="bf0127f8da675ab2d8ff724e917268c8d041e581" translate="yes" xml:space="preserve">
          <source>It includes following functionality.</source>
          <target state="translated">Он включает в себя следующую функциональность.</target>
        </trans-unit>
        <trans-unit id="6aa0dcbeeb964726e2fdcf8fed08463e02aa3b69" translate="yes" xml:space="preserve">
          <source>It is frequently used in scenarios where a class name changes frequently. If such a situation arises, then it is complicated for the programmer to rewrite the application and change the name of the class again and again.</source>
          <target state="translated">Часто используется в сценариях,где имя класса часто меняется.Если такая ситуация возникает,то программисту сложно переписать приложение и снова и снова менять название класса.</target>
        </trans-unit>
        <trans-unit id="bd269443759350e48ed7bdc11388a81f11912bc4" translate="yes" xml:space="preserve">
          <source>It is used by many frameworks and application under the wood to invoke services without actually knowing the code.</source>
          <target state="translated">Он используется многими фреймворками и приложениями под деревом для вызова услуг,не зная на самом деле код.</target>
        </trans-unit>
        <trans-unit id="8bc170fa614d477d4ecf0a540e8a358361ec7d71" translate="yes" xml:space="preserve">
          <source>It is useful at debugging.</source>
          <target state="translated">Это полезно при отладке.</target>
        </trans-unit>
        <trans-unit id="cdcb9f4cc5e879ab063042e5b93d78cf2a07fdc9" translate="yes" xml:space="preserve">
          <source>It is useful for creating libraries that work with objects in very general ways</source>
          <target state="translated">Полезно для создания библиотек,которые работают с объектами очень общими способами</target>
        </trans-unit>
        <trans-unit id="7f230118147515166a5ef34dfbd9f3ebe67b3e4c" translate="yes" xml:space="preserve">
          <source>It provides very versatile way of dynamically linking program components</source>
          <target state="translated">Она обеспечивает очень универсальный способ динамического связывания программных компонентов</target>
        </trans-unit>
        <trans-unit id="1f33d88e3b05279f20e9d11df744b730f18886fd" translate="yes" xml:space="preserve">
          <source>It will then again use reflection to get the appropriate setter for the &amp;lt; property &amp;gt; element and set its value to the specified value.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Затем он снова будет использовать отражение, чтобы получить соответствующий установщик для элемента &amp;lt;property&amp;gt; и установить его значение в указанное значение.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f1faa80fe2d86f9a33996d2c1b07db9ecff718f1" translate="yes" xml:space="preserve">
          <source>It's useful because it allows you to change the runtime behavior depending on the meta information of your program, that is, you can check the return type of a function and change the way you handle the situation.</source>
          <target state="translated">Это полезно,так как позволяет изменять поведение во время выполнения в зависимости от мета-информации вашей программы,т.е.вы можете проверить тип возврата функции и изменить способ обработки ситуации.</target>
        </trans-unit>
        <trans-unit id="9529d68eae9b702b42f4214bdc3e902aa6e05c92" translate="yes" xml:space="preserve">
          <source>It's usefull in a lot of situations. Everywhere you want to be able to dynamically plug in classes into your code. Lot's of object relational mappers use reflection to be able to instantiate objects from databases without knowing in advance what objects they're going to use. Plug-in architectures is another place where reflection is usefull. Being able to dynamically load code and determine if there are types there that implement the right interface to use as a plugin is important in those situations.</source>
          <target state="translated">Это полезно во многих ситуациях.Везде,где вы хотите иметь возможность динамически подключать классы к своему коду.Многие реляционные картографы используют отражение,чтобы иметь возможность инстанцировать объекты из баз данных,не зная заранее,какие объекты они собираются использовать.Подключаемые архитектуры-это еще одно место,где отражение полезноl.Способность динамически загружать код и определять,есть ли там типы,реализующие нужный интерфейс для использования в качестве плагина,очень важна в таких ситуациях.</target>
        </trans-unit>
        <trans-unit id="e3c24576ba302c22f5da6c285a19a92312766907" translate="yes" xml:space="preserve">
          <source>Java Reflection is quite powerful and can be very useful.
Java Reflection makes it possible &lt;strong&gt;to inspect classes, interfaces, fields and methods at runtime,&lt;/strong&gt; without knowing the names of the classes, methods etc. at compile time.
It is also possible to &lt;strong&gt;instantiate new objects, invoke methods and get/set field values using reflection.&lt;/strong&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Java Reflection довольно мощный и может быть очень полезным. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Отражение Java позволяет &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;проверять классы, интерфейсы, поля и методы во время выполнения,&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; не зная имен классов, методов и т. Д. Во время компиляции. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Также возможно &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;создавать новые объекты, вызывать методы и получать / устанавливать значения полей, используя отражение.&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ec6f30c063fcb9ef481489312513588e235d3aa2" translate="yes" xml:space="preserve">
          <source>Junit uses Reflection especially for testing Private/Protected methods.</source>
          <target state="translated">Junit использует Reflection специально для тестирования методов PrivateProtected.</target>
        </trans-unit>
        <trans-unit id="477383916e2dc5b2c68531150a4c99e526ed2157" translate="yes" xml:space="preserve">
          <source>Loading of restricted classes,</source>
          <target state="translated">Загрузка ограниченных классов,</target>
        </trans-unit>
        <trans-unit id="9ed06bc60874c9e75502a47786ce6dd86d5cfb34" translate="yes" xml:space="preserve">
          <source>Lots of modern frameworks use reflection extensively for this very reason. Most other modern languages use reflection as well, and in scripting languages (such as Python) they are even more tightly integrated, since it feels more natural within the general programming model of those languages.</source>
          <target state="translated">Именно по этой причине во многих современных рамках широко используется рефлексия.Большинство других современных языков также используют рефлексию,а в языках сценариев (таких как Python)они еще более тесно интегрированы,так как чувствуют себя более естественно в рамках общей модели программирования этих языков.</target>
        </trans-unit>
        <trans-unit id="ea201fad47b1868a8fe0ee11adbb17073d6da9de" translate="yes" xml:space="preserve">
          <source>Not every language supports reflection but the principles are usually the same in languages that support it.</source>
          <target state="translated">Не каждый язык поддерживает рефлексию,но принципы,как правило,одни и те же в языках,которые ее поддерживают.</target>
        </trans-unit>
        <trans-unit id="8645ecdcb4e899cc6ecd81759dd0741f6c8d8473" translate="yes" xml:space="preserve">
          <source>Obtaining Class objects,</source>
          <target state="translated">Получение объектов Класса,</target>
        </trans-unit>
        <trans-unit id="e59ff890fe3bc21bd9694e61ab7c233ef689ffdc" translate="yes" xml:space="preserve">
          <source>Obtaining references to constructors, methods or fields of a restricted class,</source>
          <target state="translated">Получение ссылок на конструкторы,методы или поля ограниченного класса,</target>
        </trans-unit>
        <trans-unit id="697ea410e74a0eb90c777be04cc0855e87705cdb" translate="yes" xml:space="preserve">
          <source>One of my favorite uses of reflection is the below Java dump method. It takes any object as a parameter and uses the Java reflection API to print out every field name and value.</source>
          <target state="translated">Одним из моих любимых способов отражения является метод дампов Java.Он берет любой объект в качестве параметра и использует Java reflection API для распечатки имени и значения каждого поля.</target>
        </trans-unit>
        <trans-unit id="3b834c56b8aa4817757e501cdca629ca4aad60ce" translate="yes" xml:space="preserve">
          <source>One very common use case in Java is the usage with annotations. JUnit 4, for example, will use reflection to look through your classes for methods tagged with the @Test annotation, and will then call them when running the unit test.</source>
          <target state="translated">Одним из очень распространенных случаев использования в Java является использование с аннотациями.JUnit 4,например,будет использовать отражение для просмотра ваших классов на предмет методов,помеченных аннотацией @Test,а затем будет вызывать их при запуске юнит-теста.</target>
        </trans-unit>
        <trans-unit id="7b7691de77ab4ac4bbc3b9109372d29db5e3ecba" translate="yes" xml:space="preserve">
          <source>Ref: &lt;a href=&quot;http://www.geeksforgeeks.org/reflection-in-java/&quot;&gt;Java Reflection&lt;/a&gt;&lt;a href=&quot;http://javarevisited.blogspot.in/2012/05/how-to-access-private-field-and-method.html&quot;&gt;javarevisited.blogspot.in&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ссылка: &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.geeksforgeeks.org/reflection-in-java/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Java Отражение &lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;a href=&quot;http://javarevisited.blogspot.in/2012/05/how-to-access-private-field-and-method.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;javarevisited.blogspot.in&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="cc2346f09e6a5ef2803272b9e4b34b2ec156b429" translate="yes" xml:space="preserve">
          <source>Reflection allows instantiation of new objects, invocation of methods, and get/set operations on class variables dynamically at run time without having prior knowledge of its implementation.</source>
          <target state="translated">Отражение позволяет динамически во время работы динамически инстанцировать новые объекты,вызывать методы и получать операции над переменными класса,не имея предварительных знаний о его реализации.</target>
        </trans-unit>
        <trans-unit id="d8acc7c746ded76a918047280fbbb3333490d6ee" translate="yes" xml:space="preserve">
          <source>Reflection allows programmer to access entities in program dynamically. i.e. while coding an application if programmer is unaware about a class or its methods, he can make use of such class dynamically (at run time) by using reflection.</source>
          <target state="translated">Отражение позволяет программисту получать доступ к сущностям в программе динамически,т.е.при кодировании приложения,если программист не знает о классе или его методах,он может воспользоваться таким классом динамически (во время выполнения),используя отражение.</target>
        </trans-unit>
        <trans-unit id="f37357014c003a54ec493246687a7444440fcd2a" translate="yes" xml:space="preserve">
          <source>Reflection also allows you to access private member/methods of a class:</source>
          <target state="translated">Отражение также позволяет получить доступ к частным мемберметодам класса:</target>
        </trans-unit>
        <trans-unit id="a217aec8f01d9275c05ea95b02480164f9f45d6b" translate="yes" xml:space="preserve">
          <source>Reflection code is also more complex than the corresponding direct code</source>
          <target state="translated">Код отражения также более сложен,чем соответствующий прямой код.</target>
        </trans-unit>
        <trans-unit id="68f6c9c71d88215dda226271549652ed9dbb6af3" translate="yes" xml:space="preserve">
          <source>Reflection gives us information about the class to which an object belongs and also the methods of that class which can be executed by using the object.</source>
          <target state="translated">Отражение дает нам информацию о классе,к которому принадлежит объект,а также о методах этого класса,которые могут быть выполнены с помощью объекта.</target>
        </trans-unit>
        <trans-unit id="db38284702d4de4debeccce6b221673af3d2314a" translate="yes" xml:space="preserve">
          <source>Reflection gives you the ability to write more generic code. It allows you to create an object at runtime and call its method at runtime. Hence the program can be made highly parameterized. It also allows introspecting the object and class to detect its variables and method exposed to the outer world.</source>
          <target state="translated">Отражение дает возможность писать более общий код.Она позволяет создавать объект во время выполнения и вызывать его метод во время выполнения.Следовательно,программу можно сделать высокопараметризованной.Она также позволяет проводить интроспекцию объекта и класса для обнаружения его переменных и метода,подверженных воздействию внешнего мира.</target>
        </trans-unit>
        <trans-unit id="5efe0f8d4b975ae78ef2cfa6918c6502f062b7e5" translate="yes" xml:space="preserve">
          <source>Reflection is a key mechanism to allow an application or framework to work with code that might not have even been written yet!</source>
          <target state="translated">Отражение-ключевой механизм,позволяющий приложению или фреймворку работать с кодом,который,возможно,еще даже не был написан!</target>
        </trans-unit>
        <trans-unit id="5219115cc863bf20388caf98ef604a4d4c4b9a31" translate="yes" xml:space="preserve">
          <source>Reflection is a set of functions which allows you to access the runtime information of your program and modify it behavior (with some limitations).</source>
          <target state="translated">Reflection (Отражение)-это набор функций,позволяющих получить доступ к информации о выполнении программы и изменить ее поведение (с некоторыми ограничениями).</target>
        </trans-unit>
        <trans-unit id="8f4224bf21b4ff6caa7248cbb7fdfd34031ed536" translate="yes" xml:space="preserve">
          <source>Reflection is a very powerful API but it may slow down the application if used in excess, as it resolves all the types at runtime.</source>
          <target state="translated">Reflection-очень мощный API,но при избыточном использовании он может замедлить работу приложения,так как разрешает все типы во время выполнения.</target>
        </trans-unit>
        <trans-unit id="47750829f34b52f1a4d7eb0bfa90de280fa1357f" translate="yes" xml:space="preserve">
          <source>Reflection is commonly used by programs which require the ability to examine or modify the runtime behavior of applications running in the Java virtual machine. This is a relatively advanced feature and should be used only by developers who have a strong grasp of the fundamentals of the language. With that caveat in mind, reflection is a powerful technique and can enable applications to perform operations which would otherwise be impossible.</source>
          <target state="translated">Отражение обычно используется программами,которые требуют возможности проверки или изменения поведения во время выполнения приложений,запущенных на виртуальной машине Java.Это относительно продвинутая функция,и ее должны использовать только разработчики,хорошо разбирающиеся в основах языка.Учитывая это предостережение,рефлексия является мощной техникой и может позволить приложениям выполнять операции,которые в противном случае были бы невозможны.</target>
        </trans-unit>
        <trans-unit id="a996a95ce6377941641fdade6f5ccdc15836006a" translate="yes" xml:space="preserve">
          <source>Reflection is important since it lets you write programs that do not have to &quot;know&quot; everything at compile time, making them more dynamic, since they can be tied together at runtime. The code can be written against known interfaces, but the actual classes to be used can be instantiated using reflection from configuration files.</source>
          <target state="translated">Отражение важно,поскольку оно позволяет писать программы,которые не обязаны &quot;знать&quot; все во время компиляции,что делает их более динамичными,так как они могут быть связаны друг с другом во время выполнения.Код может быть написан на основе известных интерфейсов,но реальные используемые классы могут быть инстанциированы с помощью рефлексии из конфигурационных файлов.</target>
        </trans-unit>
        <trans-unit id="377c299d76a416cc7636903bb8fb907815a92340" translate="yes" xml:space="preserve">
          <source>Reflection is much slower than direct code when used for field and method access.</source>
          <target state="translated">Отражение намного медленнее,чем прямой код при использовании для доступа к полям и методам.</target>
        </trans-unit>
        <trans-unit id="39ed6d7dc105535550cdc170f9710f2089167435" translate="yes" xml:space="preserve">
          <source>Reflection is powerful, but should not be used indiscriminately. If it is possible to perform an operation without using reflection, then it is preferable to avoid using it. The following concerns should be kept in mind when accessing code via reflection.</source>
          <target state="translated">Отражение является мощным,но не должно использоваться без разбора.Если возможно выполнить операцию без использования отражения,то предпочтительнее избегать его использования.При обращении к коду через отражение следует помнить о следующих опасениях.</target>
        </trans-unit>
        <trans-unit id="ac26492de916ca7697ea01aee13539fdda84f0a4" translate="yes" xml:space="preserve">
          <source>Reflection is the ability to &quot;reflect&quot; on the structure of your program. Or more concrete. To look at the objects and classes you have and programmatically get back information on the methods, fields, and interfaces they implement. You can also look at things like annotations.</source>
          <target state="translated">Отражение-это способность &quot;размышлять&quot; о структуре вашей программы.Или более конкретно.Посмотреть на объекты и классы,которые у вас есть,и программно получить информацию о методах,полях и интерфейсах,которые они реализуют.Вы также можете посмотреть на такие вещи,как аннотации.</target>
        </trans-unit>
        <trans-unit id="c3069b249454a7521079ef23974c9cab83670986" translate="yes" xml:space="preserve">
          <source>Reflection is to let object to see their appearance. This argument seems nothing to do with reflection. In fact, this is the &quot;self-identify&quot; ability.</source>
          <target state="translated">Отражение-позволить объекту увидеть их внешний вид.Этот аргумент,кажется,не имеет никакого отношения к отражению.На самом деле,это способность &quot;самоидентификации&quot;.</target>
        </trans-unit>
        <trans-unit id="4a5e2b549ed93f324cf7bab644f028cfa8ce1528" translate="yes" xml:space="preserve">
          <source>Reflection itself is a word for such languages that lack the capability of self-knowledge and self-sensing as Java and C#. Because they do not have the capability of self-knowledge, when we want to observe how it looks like, we must have another thing to reflect on how it looks like. Excellent dynamic languages such as Ruby and Python can perceive the reflection of their own without the help of other individuals. We can say that the object of Java cannot perceive how it looks like without a mirror, which is an object of the reflection class, but an object in Python can perceive it without a mirror. So that's why we need reflection in Java.</source>
          <target state="translated">Сама рефлексия-это слово для таких языков,которые не обладают способностью к самопознанию и самоощущению,как Java и C#.Поскольку они не обладают способностью к самопознанию,когда мы хотим наблюдать,как это выглядит,мы должны иметь еще одну вещь,чтобы поразмышлять о том,как это выглядит.Прекрасные динамические языки,такие как Руби и Питон,могут воспринимать отражение своего собственного без помощи других людей.Можно сказать,что объект Java не может воспринимать,как он выглядит без зеркала,которое является объектом класса отражения,но объект на Python может воспринимать его без зеркала.Вот почему нам нужно отражение на Java.</target>
        </trans-unit>
        <trans-unit id="fc3e348e092fed72b69acabc88a3e9231891d8df" translate="yes" xml:space="preserve">
          <source>Reflection requires a runtime permission which may not be present when running under a security manager. This is in an important consideration for code which has to run in a restricted security context, such as in an Applet.</source>
          <target state="translated">Обдумывание требует разрешения на выполнение,которое может отсутствовать при запуске под управлением менеджера безопасности.Это важный момент для кода,который должен выполняться в ограниченном контексте безопасности,например,в Applet.</target>
        </trans-unit>
        <trans-unit id="f04529f40ec32d7f346acf314474d6101993e2d0" translate="yes" xml:space="preserve">
          <source>Setting and getting field values,</source>
          <target state="translated">Установка и получение значений полей,</target>
        </trans-unit>
        <trans-unit id="c9fbf65523bc453e10a3d5104969528d78e85a62" translate="yes" xml:space="preserve">
          <source>Simple example for reflection.
In a chess game, you do not know what will be moved by the user at run time. reflection can be used to call methods which are already implemented at run time:</source>
          <target state="translated">Простой пример для размышлений.В шахматной игре вы не знаете,что будет перемещаться пользователем во время выполнения.рефлексия может быть использована для вызова методов,которые уже реализованы во время выполнения:</target>
        </trans-unit>
        <trans-unit id="e8bfe093287c98e51f95e42feee3bae8ebc51cc2" translate="yes" xml:space="preserve">
          <source>Since reflection allows code to perform operations that would be illegal in non-reflective code, such as accessing private fields and methods, the use of reflection can result in unexpected side-effects, which may render code dysfunctional and may destroy portability. Reflective code breaks abstractions and therefore may change behavior with upgrades of the platform.</source>
          <target state="translated">Поскольку отражение позволяет коду выполнять в неотражающем коде операции,которые были бы незаконны,такие как доступ к приватным полям и методам,использование отражения может привести к неожиданным побочным эффектам,которые могут привести к дисфункционированию кода и нарушить его переносимость.Отражающий код разрушает абстракции и,следовательно,может изменить поведение при обновлении платформы.</target>
        </trans-unit>
        <trans-unit id="8724c4153e380659fdd217d8eba7f1cb0a1dcaf4" translate="yes" xml:space="preserve">
          <source>So we might implement in 3 classes each containing a different logic .Obviously the object  information is available in runtime so you cannot statically code to perform computation hence reflection is used to instantiate the object of the class that you require to perform the computation based on the object received from the provider .</source>
          <target state="translated">Таким образом,мы можем реализовать в 3 классах,каждый из которых содержит свою логику.Очевидно,что информация об объекте доступна во время выполнения,поэтому вы не можете статически кодировать для выполнения вычислений,поэтому отражение используется для инстанцирования объекта класса,который требуется для выполнения вычислений на основе объекта,полученного от провайдера .</target>
        </trans-unit>
        <trans-unit id="635afd63b9273f7fdaee3a02919e369f61f1a6e3" translate="yes" xml:space="preserve">
          <source>So, to give you a code example of this in Java (imagine the object in question is foo) :</source>
          <target state="translated">Итак,приведем пример кода на Java (представьте,что объект,о котором идет речь,это foo):</target>
        </trans-unit>
        <trans-unit id="2d6febcf15152d8de02fe3348451d82daeec0ac2" translate="yes" xml:space="preserve">
          <source>Spring uses bean configuration such as:</source>
          <target state="translated">Пружина использует конфигурацию бобов,например:</target>
        </trans-unit>
        <trans-unit id="f61183eaff1df22c443b6f8bde3959781f43b8fe" translate="yes" xml:space="preserve">
          <source>Take for example a remote application which gives your application an object which you obtain using their API Methods . Now based on the object you might need to perform some sort of computation .</source>
          <target state="translated">Возьмем,к примеру,удаленное приложение,которое дает вашему приложению объект,который вы получаете с помощью их методов API.Теперь,основываясь на объекте,вам может понадобиться выполнить какие-то вычисления .</target>
        </trans-unit>
        <trans-unit id="5d4297d76e89658b1926871e00e1ecb1c986af2b" translate="yes" xml:space="preserve">
          <source>Take for example your typical web.xml file. This will contain a list of servlet elements, which contain nested servlet-class elements. The servlet container will process the web.xml file, and create new a new instance of each servlet class through reflection.</source>
          <target state="translated">Возьмем,к примеру,ваш типичный файл web.xml.Он будет содержать список элементов сервлета,которые содержат вложенные элементы класса сервлетов.Контейнер сервлетов обработает файл web.xml и создаст новый экземпляр каждого класса сервлета через отражение.</target>
        </trans-unit>
        <trans-unit id="a5441cc3e68def23311ae3069c5213a79fb6d793" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;java.lang&lt;/code&gt; and &lt;code&gt;java.lang.reflect&lt;/code&gt; packages provide classes for java reflection.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;В &lt;/font&gt;&lt;/font&gt; &lt;code&gt;java.lang&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; и &lt;/font&gt;&lt;/font&gt; &lt;code&gt;java.lang.reflect&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; пакеты обеспечивают классы для Java Reflection.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9b95bfd9602344297040acb8417c536c25721f0a" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Reflection API&lt;/strong&gt; is mainly used in:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Reflection API&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; используется в основном:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="04d7c78236ee89824542d56ba549b24aeeb3ce91" translate="yes" xml:space="preserve">
          <source>The ability to inspect the code in the system and see object types is
  not reflection, but rather Type Introspection. Reflection is then the
  ability to make modifications at runtime by making use of
  introspection. The distinction is necessary here as some languages
  support introspection, but do not support reflection. One such example
  is C++</source>
          <target state="translated">Возможность осматривать код в системе и видеть типы объектов-это не отражение,а введение типов.Отражение-это возможность вносить изменения во время выполнения кода с помощью интроспекции.Различие здесь необходимо,так как некоторые языки поддерживают интроспекцию,но не поддерживают рефлексию.Одним из таких примеров является C++</target>
        </trans-unit>
        <trans-unit id="64826090e45abc29b52ec33aee4fd3a8935d1153" translate="yes" xml:space="preserve">
          <source>The name reflection is used to describe code which is able to inspect other code in the same system (or itself).</source>
          <target state="translated">Отражение названия используется для описания кода,который способен проверить другой код в той же системе (или сам по себе).</target>
        </trans-unit>
        <trans-unit id="d8bd80d3aa3030e4b8f6a6f74cf091bd7474e02c" translate="yes" xml:space="preserve">
          <source>The provider guarantees that object can be of 3 types and we need to perform computation based on what type of object .</source>
          <target state="translated">Провайдер гарантирует,что объект может быть 3-х типов,и нам необходимо произвести вычисления,исходя из того,какой тип объекта .</target>
        </trans-unit>
        <trans-unit id="24832444ab515d4459764d90fef06d4a35a14894" translate="yes" xml:space="preserve">
          <source>The required classes for reflection are provided under &lt;code&gt;java.lang.reflect package&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Необходимые классы для отражения предоставляются в &lt;/font&gt;&lt;/font&gt; &lt;code&gt;java.lang.reflect package&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cee64e47e968ebdb3bf6f36dfb55711ed80943bc" translate="yes" xml:space="preserve">
          <source>There are some good reflection examples to get you started at &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/reflect/index.html&quot;&gt;http://docs.oracle.com/javase/tutorial/reflect/index.html&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Есть несколько хороших примеров для размышления, с которых вы можете начать, по адресу &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/reflect/index.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http://docs.oracle.com/javase/tutorial/reflect/index.html.&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="15848ed19daf91dc599a9ff7594b0b3d522f11cf" translate="yes" xml:space="preserve">
          <source>This example obtains the Class object from the class called MyObject. Using the class object the example gets a list of the methods in that class, iterates the methods and print out their names.</source>
          <target state="translated">Этот пример получает объект Class из класса под названием MyObject.Используя объект Class,пример получает список методов этого класса,выполняет итерацию методов и распечатывает их имена.</target>
        </trans-unit>
        <trans-unit id="b81690f4b4757a81fe7b4c08dda32ca5cad7198e" translate="yes" xml:space="preserve">
          <source>Through reflection we can invoke methods at runtime irrespective of the access specifier used with them.</source>
          <target state="translated">Посредством рефлексии мы можем вызывать методы во время выполнения независимо от используемого со спецификатором доступа.</target>
        </trans-unit>
        <trans-unit id="a561e326da9ebe21a8e13536d31808cf84879d80" translate="yes" xml:space="preserve">
          <source>What is reflection and why is it useful</source>
          <target state="translated">Что такое размышления и почему это полезно</target>
        </trans-unit>
        <trans-unit id="d5e2c197bd1e64c01b4c7886ec8b0ee3ecc2474b" translate="yes" xml:space="preserve">
          <source>What is reflection, and why is it useful?</source>
          <target state="translated">Что такое отражение,и почему оно полезно?</target>
        </trans-unit>
        <trans-unit id="3ed9422a2ea0d1d0fefd2a8439979ee5b364d653" translate="yes" xml:space="preserve">
          <source>When the Spring context processes this &amp;lt; bean &amp;gt; element, it will use Class.forName(String) with the argument &quot;com.example.Foo&quot; to instantiate that Class.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Когда контекст Spring обрабатывает этот элемент &amp;lt;bean&amp;gt;, он будет использовать Class.forName (String) с аргументом &quot;com.example.Foo&quot; для создания экземпляра этого класса.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="af1158d1d64999cdcf645b618eba9c9d3b13e77a" translate="yes" xml:space="preserve">
          <source>Where can it be useful? Is not useful every time but for concrete situations. For example you can use it to get the name of the class for logging purposes, to dynamically create handlers for events according to what's specified on a configuration file and so on...</source>
          <target state="translated">Где это может быть полезно? Полезен не каждый раз,а для конкретных ситуаций.Например,вы можете использовать его,чтобы получить имя класса для протоколирования,динамически создавать обработчики событий в соответствии с тем,что указано в конфигурационном файле и так далее....</target>
        </trans-unit>
        <trans-unit id="37f86593e132b343b87b879e0fa055158365feb1" translate="yes" xml:space="preserve">
          <source>With &lt;strong&gt;Reflection API&lt;/strong&gt; you can write universal &lt;code&gt;toString()&lt;/code&gt; method for any object.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;С помощью &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Reflection API&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; вы можете написать универсальный &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;метод &lt;/font&gt;&lt;/font&gt; &lt;code&gt;toString()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; для любого объекта.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="90a0cd0782edde2787574165e7afdae56b562e70" translate="yes" xml:space="preserve">
          <source>source: &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/reflect/&quot;&gt;The Reflection API&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;источник: &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/reflect/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Reflection API&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
