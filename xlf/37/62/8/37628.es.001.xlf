<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/37628">
    <body>
      <group id="37628">
        <trans-unit id="76e6755cb5cf7ea2a882d92a0160c1d456f7a307" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AccessibleObject&lt;/code&gt; allows suppression of access checks if the necessary &lt;code&gt;ReflectPermission&lt;/code&gt; is available.</source>
          <target state="translated">&lt;code&gt;AccessibleObject&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; permite la supresi&amp;oacute;n de las comprobaciones de acceso si &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;est&amp;aacute; disponible el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;ReflectPermission&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; necesario &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="39efd8e310f8ce4c0f2d605df069aa7f3af1100c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Hibernate&lt;/code&gt; chose &lt;code&gt;reflection&lt;/code&gt; because it has minimal impact on the build process for an application.</source>
          <target state="translated">&lt;code&gt;Hibernate&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; eligi&amp;oacute; la &lt;/font&gt;&lt;/font&gt; &lt;code&gt;reflection&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; porque tiene un impacto m&amp;iacute;nimo en el proceso de compilaci&amp;oacute;n de una aplicaci&amp;oacute;n.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1abe26519d6d02eee7c63f5db0048f72effe89e1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Reflection&lt;/code&gt; has many &lt;strong&gt;uses&lt;/strong&gt;. The one I am more familiar with, is to be able to create code on the fly.</source>
          <target state="translated">&lt;code&gt;Reflection&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tiene muchos &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;usos&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El que estoy m&amp;aacute;s familiarizado es poder crear c&amp;oacute;digo sobre la marcha.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2cce7d499ca058a2437bf7339a31236939770c77" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;java.lang.reflect&lt;/code&gt; package provides classes and interfaces for obtaining reflective information about classes and objects. Reflection allows programmatic access to information about the fields, methods and constructors of loaded classes, and the use of reflected fields, methods, and constructors to operate on their underlying counterparts, within security restrictions.</source>
          <target state="translated">&lt;code&gt;java.lang.reflect&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; paquete &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;java.lang.reflect&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; proporciona clases e interfaces para obtener informaci&amp;oacute;n reflexiva sobre clases y objetos. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Reflection permite el acceso program&amp;aacute;tico a informaci&amp;oacute;n sobre los campos, m&amp;eacute;todos y constructores de clases cargadas, y el uso de campos, m&amp;eacute;todos y constructores reflejados para operar en sus contrapartes subyacentes, dentro de las restricciones de seguridad.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3263b2c8e5e8dad3181f60ed7d5ff3ad1e0d372f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Debugging and testing tools:&lt;/em&gt; Debuggers use the property of reflection to examine private members on classes.</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Herramientas de depuraci&amp;oacute;n y prueba: los&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; depuradores usan la propiedad de reflexi&amp;oacute;n para examinar a los miembros privados en las clases.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="267dc8219745212321ac176413d4c94adca30a05" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Exposure of Internals:&lt;/em&gt; Reflective code breaks abstractions and therefore may change behaviour with upgrades of the platform.</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Exposici&amp;oacute;n de elementos internos: el&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; c&amp;oacute;digo reflexivo rompe las abstracciones y, por lo tanto, puede cambiar el comportamiento con las actualizaciones de la plataforma.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9cbfa1487aca6a5660de89dd102bde0c1c17545e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Extensibility Features:&lt;/em&gt; An application may make use of external, user-defined classes by creating instances of extensibility objects using their fully-qualified names.</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Caracter&amp;iacute;sticas de extensibilidad:&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; una aplicaci&amp;oacute;n puede hacer uso de clases externas definidas por el usuario mediante la creaci&amp;oacute;n de instancias de objetos de extensibilidad utilizando sus nombres totalmente calificados.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e7e35d05e9225bc40318edb029e92b9221cf09f8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Insecure use of its functions conducted from within a system code can also easily lead to the compromise of a Java security mode&lt;/em&gt;l. &lt;strong&gt;&lt;em&gt;So use this feature sparingly&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El uso inseguro de sus funciones realizadas desde un c&amp;oacute;digo del sistema tambi&amp;eacute;n puede llevar f&amp;aacute;cilmente al compromiso de un modo de seguridad Java&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; l. &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;As&amp;iacute; que usa esta funci&amp;oacute;n con moderaci&amp;oacute;n&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d41e8a8fba94b4d81b8d5bd6e7cf8bdf1eefc8d9" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Performance Overhead:&lt;/em&gt; Reflective operations have slower performance than their non-reflective counterparts, and should be avoided in sections of code which are called frequently in performance-sensitive applications.</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Sobrecarga de rendimiento: las&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; operaciones reflectantes tienen un rendimiento m&amp;aacute;s lento que sus contrapartes no reflectantes, y deben evitarse en secciones de c&amp;oacute;digo que se llaman con frecuencia en aplicaciones sensibles al rendimiento.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c915f0bd00f8e6b012946d1f700aaa3ed64dbd3d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Drawbacks of Reflection:&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Inconvenientes de la reflexi&amp;oacute;n:&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="87c6e54c26e0d51710b1bde8afda98446607c4ca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;General abuses:&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Abusos generales:&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f3e691ba1d34f66cf36e41a992eab2a9d5d408b0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;User of Reflection:&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Usuario de Reflexi&amp;oacute;n:&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="aa9a74fe5b677cca7bf44297e356b2ac51b61601" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;A quick Java Reflection example to show you what using reflection looks like:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Un ejemplo r&amp;aacute;pido de Java Reflection para mostrarle c&amp;oacute;mo se ve el uso de la reflexi&amp;oacute;n:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6c1a08dcc59d69c190a602baff7d91a19e330e4f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Advantages of Using Reflection:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ventajas de usar la reflexi&amp;oacute;n:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2f397612a47bec94ad695255d033038d2522a78f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Class&lt;/strong&gt; The &lt;code&gt;getClass()&lt;/code&gt; method is used to get the name of the class to which an object belongs.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Clase&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; El &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;m&amp;eacute;todo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;getClass()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; se usa para obtener el nombre de la clase a la que pertenece un objeto.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c7588922df25af8ae3e7d84556122b47c9788b7e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Constructors&lt;/strong&gt; The &lt;code&gt;getConstructors()&lt;/code&gt; method is used to get the public constructors of the class to which an object belongs.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Constructores&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; El &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;m&amp;eacute;todo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;getConstructors()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; se utiliza para obtener los constructores p&amp;uacute;blicos de la clase a la que pertenece un objeto.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5b6eed8acc664104c3f5ddf8eb8ffc72c0b4ea7b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Drawbacks of Reflection&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Inconvenientes de la reflexi&amp;oacute;n&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9c418adcde6dca33f2113e643b3cf7aa3e0d8fbb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Drawbacks:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Drawbacks:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d38ebd5c771c17c46c4d33de4e05fd33d6ac45f2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Edit&lt;/strong&gt;: After almost 1 year I am editing this answer as while reading about reflection I got few more uses of Reflection.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Editar&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : Despu&amp;eacute;s de casi 1 a&amp;ntilde;o, estoy editando esta respuesta ya que mientras le&amp;iacute;a sobre la reflexi&amp;oacute;n, obtuve algunos usos m&amp;aacute;s de Reflection.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4168878b06eaa6917a0f012585506612f5054ea6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Example:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8d9e8fd103683e9aa854d2eeed4c37db80eb4ede" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Exposure of Internals&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Exposici&amp;oacute;n de internos&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="61df392d4c2c65b0d121e33ddf25034ec22b3e90" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Extensibility Features&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Caracter&amp;iacute;sticas de extensibilidad&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="67f058ae58b2f7815f80d243b58b2301bdcc1f70" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Methods&lt;/strong&gt; The &lt;code&gt;getMethods()&lt;/code&gt; method is used to get the public methods of the class to which an objects belongs.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;M&amp;eacute;todos&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; El &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;m&amp;eacute;todo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;getMethods()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; se utiliza para obtener los m&amp;eacute;todos p&amp;uacute;blicos de la clase a la que pertenece un objeto.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bee72a5bdb9095800c3ce5443e8515bcb89c5a64" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Performance Overhead&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Rendimiento de arriba&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b38d24c2f6248a08d1e522f5d9bfb4c0ff3b9e2b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reflection&lt;/strong&gt; can be used to get information about &amp;ndash;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La reflexi&amp;oacute;n&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; se puede utilizar para obtener informaci&amp;oacute;n sobre:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="800b9231b7f82f8ae67b04bb2964d334fdd281c2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reflection&lt;/strong&gt; is a language's ability to inspect and dynamically call classes, methods, attributes, etc. at runtime.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La reflexi&amp;oacute;n&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es la capacidad de un lenguaje para inspeccionar y llamar din&amp;aacute;micamente clases, m&amp;eacute;todos, atributos, etc. en tiempo de ejecuci&amp;oacute;n.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1552193a224a7dc7dc501a889de6a813238c8a6e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reflection&lt;/strong&gt; is an API which is used to examine or modify the behaviour of &lt;em&gt;methods, classes, interfaces&lt;/em&gt; at runtime.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Reflection&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es una API que se utiliza para examinar o modificar el comportamiento de &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;m&amp;eacute;todos, clases e interfaces&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en tiempo de ejecuci&amp;oacute;n.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5bd8a53de58e1ef9ec971b35d223f86ba6d6212a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Security Restrictions&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Restricciones de seguridad&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a2fb070431451825a43dbcb68523c4e1049f4a93" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Summary:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Summary:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="778b38d2a4a2b95315242cc54697e20caf993e63" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Update from a comment:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Actualizaci&amp;oacute;n de un comentario:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f35f58f37b1538bdfd364dbe78010cac8348c35a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Uses of Reflection&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Usos de la reflexi&amp;oacute;n&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9c9ce074852cbddff495458254730c1017607102" translate="yes" xml:space="preserve">
          <source>A different example would be a unit-test of a private method. One way to do so is to create a reflection and change the method's scope to public in the test's set-up phase. Of course one can argue private methods shouldn't be tested directly but that's not the point.</source>
          <target state="translated">Un ejemplo diferente sería una prueba de unidad de un método privado.Una forma de hacerlo es crear una reflexión y cambiar el alcance del método a público en la fase de preparación del ensayo.Por supuesto,se puede argumentar que los métodos privados no deben probarse directamente,pero ese no es el punto.</target>
        </trans-unit>
        <trans-unit id="bca38910ed77d521afc94527effc9909183faece" translate="yes" xml:space="preserve">
          <source>A practical example of using reflections would be a Java Language Server written in Java or a PHP Language Server written in PHP, etc. Language Server gives your IDE abilities like autocomplete, jump to definition, context help, hinting types and more. In order to have all tag names (words that can be autocompleted) to show all the possible matches as you type the Language Server has to inspect everything about the class including doc blocks and private members. For that it needs a reflection of said class.</source>
          <target state="translated">Un ejemplo práctico del uso de las reflexiones sería un servidor de lenguaje Java escrito en Java o un servidor de lenguaje PHP escrito en PHP,etc.El Servidor de Lenguaje le da a su IDE habilidades como autocompletar,saltar a la definición,ayuda de contexto,tipos de pistas y más.Para poder tener todos los nombres de las etiquetas (palabras que pueden ser autocompletadas)para mostrar todas las posibles coincidencias mientras escribes,el Servidor de Lenguaje tiene que inspeccionar todo lo relacionado con la clase,incluyendo los bloques de documentos y los miembros privados.Para ello necesita un reflejo de dicha clase.</target>
        </trans-unit>
        <trans-unit id="f712e1ab9f7444585d3113d90a826187db60eb20" translate="yes" xml:space="preserve">
          <source>Alternatively works &lt;code&gt;Lombok Project&lt;/code&gt;. It just injects code at compile time, result in code being inserted into your domain classes. (I think it is OK for getters and setters)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Alternativamente funciona el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Lombok Project&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Simplemente inyecta c&amp;oacute;digo en tiempo de compilaci&amp;oacute;n, lo que hace que el c&amp;oacute;digo se inserte en sus clases de dominio. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(Creo que est&amp;aacute; bien para getters y setters)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5d85b2f6bdd2e23adc756e771b97a67cb296aa3b" translate="yes" xml:space="preserve">
          <source>An application may make use of external, user-defined classes by creating instances of extensibility objects using their fully-qualified names.
Class Browsers and Visual Development Environments
A class browser needs to be able to enumerate the members of classes. Visual development environments can benefit from making use of type information available in reflection to aid the developer in writing correct code.
Debuggers and Test Tools
Debuggers need to be able to examine private members in classes. Test harnesses can make use of reflection to systematically call a discoverable set APIs defined on a class, to ensure a high level of code coverage in a test suite.</source>
          <target state="translated">Una aplicación puede hacer uso de clases externas definidas por el usuario creando instancias de objetos de extensibilidad utilizando sus nombres completos.Navegadores de clase y entornos de desarrollo visual Un navegador de clase debe ser capaz de enumerar los miembros de las clases.Los entornos de desarrollo visual se pueden beneficiar de hacer uso de la información de clases disponible en la reflexión para ayudar al desarrollador a escribir un código correcto.Depuradores y herramientas de prueba Los depuradores deben ser capaces de examinar a los miembros privados de las clases.Los arneses de prueba pueden hacer uso de la reflexión para llamar sistemáticamente a un conjunto descubrible de APIs definidas en una clase,para asegurar un alto nivel de cobertura de código en un conjunto de pruebas.</target>
        </trans-unit>
        <trans-unit id="cc45f1793412faaa4a56959b5f8838af9b2c8ec5" translate="yes" xml:space="preserve">
          <source>And finally, the most comprehensive example is &lt;a href=&quot;http://www.springframework.org/&quot;&gt;Spring&lt;/a&gt; which uses reflection to create its beans, and for its heavy use of proxies</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Y, por &amp;uacute;ltimo, el ejemplo m&amp;aacute;s completo es &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.springframework.org/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Spring,&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que utiliza la reflexi&amp;oacute;n para crear sus granos y para su uso intensivo de proxies.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8c9a5c4733b5d39d0014e51ebae4c5efb4c65d7c" translate="yes" xml:space="preserve">
          <source>And finally, yes, the concepts are pretty much similar in other statically typed languages which support reflection (like C#). In dynamically typed languages, the use case described above is less necessary (since the compiler will allow any method to be called on any object, failing at runtime if it does not exist), but the second case of looking for methods which are marked or work in a certain way is still common.</source>
          <target state="translated">Y finalmente,sí,los conceptos son bastante similares en otros lenguajes estáticos que apoyan la reflexión (como el C#).En los lenguajes de tipo dinámico,el caso de uso descrito anteriormente es menos necesario (ya que el compilador permitirá llamar a cualquier método sobre cualquier objeto,fallando en tiempo de ejecución si no existe),pero el segundo caso de búsqueda de métodos marcados o que funcionan de cierta manera sigue siendo común.</target>
        </trans-unit>
        <trans-unit id="0b518e10771b9253bdd4fc733405e465373ffaf4" translate="yes" xml:space="preserve">
          <source>And from Java 7 we have &lt;code&gt;MethodHandles&lt;/code&gt;, which works as &lt;code&gt;Reflection API&lt;/code&gt;. In projects, to work with loggers we just copy-paste the next code:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Y de Java 7 tenemos &lt;/font&gt;&lt;/font&gt; &lt;code&gt;MethodHandles&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , que funciona como &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Reflection API&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En proyectos, para trabajar con registradores, simplemente copiamos y pegamos el siguiente c&amp;oacute;digo:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="98106d65797a34619f72a02cb51b7d2dc74338bf" translate="yes" xml:space="preserve">
          <source>Another example would be the Java API for XML Parsing &lt;a href=&quot;http://en.wikipedia.org/wiki/Java_API_for_XML_Processing&quot;&gt;(JAXP)&lt;/a&gt;. Where an XML parser provider is 'plugged-in' via well-known system properties, which are used to construct new instances through reflection.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Otro ejemplo ser&amp;iacute;a la API de Java para el an&amp;aacute;lisis XML &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Java_API_for_XML_Processing&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(JAXP)&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cuando un proveedor de analizador XML se 'conecta' a trav&amp;eacute;s de propiedades de sistema conocidas, que se utilizan para construir nuevas instancias a trav&amp;eacute;s de la reflexi&amp;oacute;n.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f2677ff031c51b9e6180e8fe1a179c64f0a10160" translate="yes" xml:space="preserve">
          <source>As I find it best to explain by example and none of the answers seem to do that...</source>
          <target state="translated">Como encuentro que es mejor explicar con el ejemplo y ninguna de las respuestas parece hacerlo...</target>
        </trans-unit>
        <trans-unit id="f002a793bb200d428bfb3a57f359de8a68a61d85" translate="yes" xml:space="preserve">
          <source>As name itself suggest it reflects what it holds for example class method,etc apart from providing feature to invoke method creating instance dynamically at runtime.</source>
          <target state="translated">Como su propio nombre indica,refleja lo que contiene,por ejemplo,el método de la clase,etc.,además de proporcionar una función para invocar el método que crea la instancia de forma dinámica en tiempo de ejecución.</target>
        </trans-unit>
        <trans-unit id="ca04a01c15dacb15e63a42b4719d12252a2f8fc8" translate="yes" xml:space="preserve">
          <source>As per my understanding:</source>
          <target state="translated">Según tengo entendido:</target>
        </trans-unit>
        <trans-unit id="4a30e97f958985a613983df7e9a9f4147937428e" translate="yes" xml:space="preserve">
          <source>Because it is hard to make typo-error in this case.</source>
          <target state="translated">Porque es difícil cometer un error tipográfico en este caso.</target>
        </trans-unit>
        <trans-unit id="d2fd967478b11175693c52637e16182d67678925" translate="yes" xml:space="preserve">
          <source>Because reflection involves types that are dynamically resolved, certain Java virtual machine optimizations cannot be performed. Consequently, reflective operations have slower performance than their non-reflective counterparts and should be avoided in sections of code which are called frequently in performance-sensitive applications.</source>
          <target state="translated">Debido a que la reflexión implica tipos que se resuelven dinámicamente,no se pueden realizar ciertas optimizaciones de la máquina virtual de Java.Por consiguiente,las operaciones de reflexión tienen un rendimiento más lento que sus homólogos no reflectantes y deben evitarse en las secciones de código que se llaman con frecuencia en las aplicaciones sensibles al rendimiento.</target>
        </trans-unit>
        <trans-unit id="75cec77203d8a3c3bbb133724432d2b16ed9c414" translate="yes" xml:space="preserve">
          <source>Classes in this package, along with &lt;code&gt;java.lang.Class&lt;/code&gt; accommodate applications such as debuggers, interpreters, object inspectors, class browsers, and services such as &lt;code&gt;Object Serialization&lt;/code&gt; and &lt;code&gt;JavaBeans&lt;/code&gt; that need access to either the public members of a target object (based on its runtime class) or the members declared by a given class</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Las clases en este paquete, junto con &lt;/font&gt;&lt;/font&gt; &lt;code&gt;java.lang.Class&lt;/code&gt; se&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; adaptan a aplicaciones como depuradores, int&amp;eacute;rpretes, inspectores de objetos, navegadores de clases y servicios como &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Object Serialization&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;JavaBeans&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que necesitan acceso a los miembros p&amp;uacute;blicos de un objeto de destino (en funci&amp;oacute;n de su clase de tiempo de ejecuci&amp;oacute;n) o los miembros declarados por una clase determinada&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cabd73d2b2f6bec7dcefa96fbed5523c29e5e5fa" translate="yes" xml:space="preserve">
          <source>Creating new instances of objects.</source>
          <target state="translated">Creando nuevas instancias de objetos.</target>
        </trans-unit>
        <trans-unit id="f5b464b3897b8c535381e2d8a17e39881cec6f04" translate="yes" xml:space="preserve">
          <source>Creation of new object instances, methods invocation, getting or setting field values of a restricted class.</source>
          <target state="translated">Creación de nuevas instancias de objetos,invocación de métodos,obtención o establecimiento de valores de campo de una clase restringida.</target>
        </trans-unit>
        <trans-unit id="984fe3ba3e70d02a7d3335b8bfb0d79f0b528af1" translate="yes" xml:space="preserve">
          <source>Debugger and Test Tools etc.</source>
          <target state="translated">Depurador y herramientas de prueba,etc.</target>
        </trans-unit>
        <trans-unit id="310d3e06116a3c41ab7d32a30a08a2f122bcb2f3" translate="yes" xml:space="preserve">
          <source>Exactly how all this works is explained here</source>
          <target state="translated">Exactamente cómo funciona todo esto se explica aquí</target>
        </trans-unit>
        <trans-unit id="c175f05d7eb96cebecf6a41d3073e0e90c3ed97d" translate="yes" xml:space="preserve">
          <source>Examining properties of a class (fields, methods, constructors),</source>
          <target state="translated">Examinar las propiedades de una clase (campos,métodos,constructores),</target>
        </trans-unit>
        <trans-unit id="5594aeaa90d29ada020371584fb08ffe991ec816" translate="yes" xml:space="preserve">
          <source>For Private methods,</source>
          <target state="translated">Para los métodos privados,</target>
        </trans-unit>
        <trans-unit id="693196b805e9eefa4595e0678693d6606e5c3833" translate="yes" xml:space="preserve">
          <source>For example, all objects in Java have the method &lt;code&gt;getClass()&lt;/code&gt;, which lets you determine the object's class even if you don't know it at compile time (e.g. if you declared it as an &lt;code&gt;Object&lt;/code&gt;) - this might seem trivial, but such reflection is not possible in less dynamic languages such as &lt;code&gt;C++&lt;/code&gt;. More advanced uses lets you list and call methods, constructors, etc.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por ejemplo, todos los objetos en Java tienen el m&amp;eacute;todo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;getClass()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , que le permite determinar la clase del objeto incluso si no lo conoce en tiempo de compilaci&amp;oacute;n (por ejemplo, si lo declar&amp;oacute; como un &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Object&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ); esto puede parecer trivial, pero tal La reflexi&amp;oacute;n no es posible en lenguajes menos din&amp;aacute;micos como &lt;/font&gt;&lt;/font&gt; &lt;code&gt;C++&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Los usos m&amp;aacute;s avanzados le permiten enumerar y llamar a m&amp;eacute;todos, constructores, etc.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6fb9254fbf60efc7b954b5ba670c968e6ee3a01e" translate="yes" xml:space="preserve">
          <source>For example, say you have an object of an unknown type in Java, and you would like to call a 'doSomething' method on it if one exists. Java's static typing system isn't really designed to support this unless the object conforms to a known interface, but using reflection, your code can look at the object and find out if it has a method called 'doSomething' and then call it if you want to.</source>
          <target state="translated">Por ejemplo,digamos que tienes un objeto de tipo desconocido en Java,y te gustaría llamar a un método &quot;doSomething&quot; en él si existe.El sistema de escritura estática de Java no está realmente diseñado para soportar esto a menos que el objeto se ajuste a una interfaz conocida,pero usando la reflexión,tu código puede mirar el objeto y averiguar si tiene un método llamado &quot;doSomething&quot; y luego llamarlo si quieres.</target>
        </trans-unit>
        <trans-unit id="7fdc810374fe9dfa3045213c9b7a12737ef416f6" translate="yes" xml:space="preserve">
          <source>For inspection of classes (also know as introspection) you don't need to import the reflection package (&lt;code&gt;java.lang.reflect&lt;/code&gt;). Class metadata can be accessed through &lt;code&gt;java.lang.Class&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para la inspecci&amp;oacute;n de clases (tambi&amp;eacute;n conocida como introspecci&amp;oacute;n) no necesita importar el paquete de reflexi&amp;oacute;n ( &lt;/font&gt;&lt;/font&gt; &lt;code&gt;java.lang.reflect&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Se puede acceder a los metadatos de la clase a trav&amp;eacute;s de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;java.lang.Class&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e00d01d41832cb3c81dfdf9609e05666593eb6a8" translate="yes" xml:space="preserve">
          <source>For private fields,</source>
          <target state="translated">Para los campos privados,</target>
        </trans-unit>
        <trans-unit id="850912486e2e27fec1a678a7817806ccd05f4f34" translate="yes" xml:space="preserve">
          <source>From java documentation &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/package-summary.html&quot;&gt;page&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Desde la &lt;/font&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/package-summary.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;p&amp;aacute;gina de&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; documentaci&amp;oacute;n de Java&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9b57123908782edab0f9d5315a27bbbc06bd9567" translate="yes" xml:space="preserve">
          <source>From this &lt;a href=&quot;http://www.ibm.com/developerworks/library/j-dyn0603/&quot;&gt;article&lt;/a&gt; (by Dennis Sosnoski, President, Sosnoski Software Solutions, Inc)  and this &lt;a href=&quot;http://www.security-explorations.com/materials/se-2012-01-report.pdf&quot;&gt;article&lt;/a&gt; (security-explorations pdf):</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;De este &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.ibm.com/developerworks/library/j-dyn0603/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;art&amp;iacute;culo&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (por Dennis Sosnoski, Presidente, Sosnoski Software Solutions, Inc) y este &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.security-explorations.com/materials/se-2012-01-report.pdf&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;art&amp;iacute;culo&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (pdf de exploraciones de seguridad):&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="973d454cb269a335664d77c5a64d777b1349ce93" translate="yes" xml:space="preserve">
          <source>Have a look at this &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html&quot;&gt;documentation&lt;/a&gt; link for the methods exposed by &lt;strong&gt;&lt;em&gt;&lt;code&gt;Class&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt; class.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Eche un vistazo a este &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;enlace de &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;documentaci&amp;oacute;n&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para ver los m&amp;eacute;todos expuestos por la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;clase &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt; &lt;code&gt;Class&lt;/code&gt; &lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="34deaa41eea028ce9992343bd939a2b019e0bfbf" translate="yes" xml:space="preserve">
          <source>Have a look at this SE question regarding abuse of reflection feature:</source>
          <target state="translated">Echa un vistazo a esta pregunta del SE sobre el abuso de la característica de reflexión:</target>
        </trans-unit>
        <trans-unit id="c60cc8d0b33ec9707ca888b5d0cc96c2d441df1b" translate="yes" xml:space="preserve">
          <source>Here is some example:</source>
          <target state="translated">Aquí hay un ejemplo:</target>
        </trans-unit>
        <trans-unit id="eea4d3e68f79645621537952d7885a21a986a764" translate="yes" xml:space="preserve">
          <source>How do I read a private field in Java?</source>
          <target state="translated">¿Cómo puedo leer un campo privado en Java?</target>
        </trans-unit>
        <trans-unit id="f5dcee71779b03aaff859733ff309c6577746074" translate="yes" xml:space="preserve">
          <source>I can see considerable drawbacks than uses of using Reflection</source>
          <target state="translated">Puedo ver considerables inconvenientes que los usos del uso de la Reflexión</target>
        </trans-unit>
        <trans-unit id="254f8a9369907f42f3509935f7f7c87622baa519" translate="yes" xml:space="preserve">
          <source>I just want to add some point to all that was listed.</source>
          <target state="translated">Sólo quiero añadir un punto a todo lo que estaba en la lista.</target>
        </trans-unit>
        <trans-unit id="0f9631de6c8595f344b280ad2df45d2bdc6cb1b9" translate="yes" xml:space="preserve">
          <source>I want to answer this question by example. First of all &lt;code&gt;Hibernate&lt;/code&gt; project uses &lt;code&gt;Reflection API&lt;/code&gt; to generate &lt;code&gt;CRUD&lt;/code&gt; statements to bridge the chasm between the running application and the persistence store. When things change in the domain, the &lt;code&gt;Hibernate&lt;/code&gt; has to know about them to persist them to the data store and vice versa.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Quiero responder a esta pregunta con un ejemplo. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En primer lugar, el &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;proyecto &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Hibernate&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; utiliza &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Reflection API&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para generar &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;declaraciones &lt;/font&gt;&lt;/font&gt; &lt;code&gt;CRUD&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para cerrar el abismo entre la aplicaci&amp;oacute;n en ejecuci&amp;oacute;n y el almac&amp;eacute;n de persistencia. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cuando las cosas cambian en el dominio, el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Hibernate&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tiene que saber sobre ellas para persistirlas en el almac&amp;eacute;n de datos y viceversa.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="59ea7d8a60e63123865790fbb39afca4b577dbbe" translate="yes" xml:space="preserve">
          <source>I'm particularly interested in Java, but I assume the principles are the same in any language.</source>
          <target state="translated">Estoy particularmente interesado en Java,pero asumo que los principios son los mismos en cualquier lenguaje.</target>
        </trans-unit>
        <trans-unit id="4e63bac98f2a6938d9fab00930c2876281232d32" translate="yes" xml:space="preserve">
          <source>IDE (Integrated Development Environment) e.g. Eclipse, MyEclipse, NetBeans etc.</source>
          <target state="translated">IDE (Integrated Development Environment),por ejemplo,Eclipse,MyEclipse,NetBeans,etc.</target>
        </trans-unit>
        <trans-unit id="0adeb6df453a9aaf352a57864918b02b12305438" translate="yes" xml:space="preserve">
          <source>IE: dynamic classes, functions, constructors - based on any data
  (xml/array/sql results/hardcoded/etc..)</source>
          <target state="translated">IE:clases dinámicas,funciones,constructores-basados en cualquier dato (xmlarraysql resultshardcodedetc..)</target>
        </trans-unit>
        <trans-unit id="589a59e1de357ac295cf54fd7d57ea897e25f5a4" translate="yes" xml:space="preserve">
          <source>In C# for example you can load an assembly (a .dll) in runtime an examine it, navigating through the classes and taking actions according to what you found. It also let you create an instance of a class on runtime, invoke its method, etc.</source>
          <target state="translated">En C#por ejemplo,puedes cargar un ensamblaje (un .dll)en tiempo de ejecución y examinarlo,navegando a través de las clases y tomando acciones de acuerdo a lo que hayas encontrado.También te permite crear una instancia de una clase en tiempo de ejecución,invocar su método,etc.</target>
        </trans-unit>
        <trans-unit id="e2c488cd992bbd3e18da0edfcfb16bdc9c8d6e3e" translate="yes" xml:space="preserve">
          <source>In above example the null parameter is the object you want to invoke the method on. If the method is static you supply null. If the method is not static, then while invoking you need to supply a valid MyObject instance instead of null.</source>
          <target state="translated">En el ejemplo anterior,el parámetro nulo es el objeto sobre el que se quiere invocar el método.Si el método es estático,se proporciona null.Si el método no es estático,entonces al invocar necesitas suministrar una instancia válida de MyObject en lugar de null.</target>
        </trans-unit>
        <trans-unit id="823d0c56e8aa92cf5babf3278a56092f4ee027c9" translate="yes" xml:space="preserve">
          <source>Instead, by using reflection, there is need to worry about a possibly changing class name.</source>
          <target state="translated">En cambio,al usar la reflexión,hay que preocuparse por un posible cambio de nombre de la clase.</target>
        </trans-unit>
        <trans-unit id="f66396f7168221b2bf84c5dcc35135d1e55d77e3" translate="yes" xml:space="preserve">
          <source>Invoking methods,</source>
          <target state="translated">Invocando métodos,</target>
        </trans-unit>
        <trans-unit id="ffda05e922f9a6bcf056ba767a3e49ccdf042dbd" translate="yes" xml:space="preserve">
          <source>It  allows violation of key Java security constraints such
as data access protection and type safety</source>
          <target state="translated">Permite la violación de las principales restricciones de seguridad de Java,como la protección de acceso a los datos y la seguridad de los tipos.</target>
        </trans-unit>
        <trans-unit id="542d0b30181db440cde9bf0e2ad31c763156bc7b" translate="yes" xml:space="preserve">
          <source>It bypasses the source code can create maintenance problems</source>
          <target state="translated">Eludir el código fuente puede crear problemas de mantenimiento...</target>
        </trans-unit>
        <trans-unit id="a23ed20b481cccd78ea2932605cc56e463dd42e8" translate="yes" xml:space="preserve">
          <source>It can obscure what's actually going on inside your code</source>
          <target state="translated">Puede oscurecer lo que realmente está pasando dentro de tu código</target>
        </trans-unit>
        <trans-unit id="bf0127f8da675ab2d8ff724e917268c8d041e581" translate="yes" xml:space="preserve">
          <source>It includes following functionality.</source>
          <target state="translated">Incluye la siguiente funcionalidad.</target>
        </trans-unit>
        <trans-unit id="6aa0dcbeeb964726e2fdcf8fed08463e02aa3b69" translate="yes" xml:space="preserve">
          <source>It is frequently used in scenarios where a class name changes frequently. If such a situation arises, then it is complicated for the programmer to rewrite the application and change the name of the class again and again.</source>
          <target state="translated">Se utiliza con frecuencia en escenarios en los que el nombre de una clase cambia con frecuencia.Si se presenta tal situación,entonces es complicado para el programador reescribir la aplicación y cambiar el nombre de la clase una y otra vez.</target>
        </trans-unit>
        <trans-unit id="bd269443759350e48ed7bdc11388a81f11912bc4" translate="yes" xml:space="preserve">
          <source>It is used by many frameworks and application under the wood to invoke services without actually knowing the code.</source>
          <target state="translated">Es usado por muchos marcos y aplicaciones bajo la madera para invocar servicios sin conocer realmente el código.</target>
        </trans-unit>
        <trans-unit id="8bc170fa614d477d4ecf0a540e8a358361ec7d71" translate="yes" xml:space="preserve">
          <source>It is useful at debugging.</source>
          <target state="translated">Es útil para la depuración.</target>
        </trans-unit>
        <trans-unit id="cdcb9f4cc5e879ab063042e5b93d78cf2a07fdc9" translate="yes" xml:space="preserve">
          <source>It is useful for creating libraries that work with objects in very general ways</source>
          <target state="translated">Es útil para crear bibliotecas que trabajen con objetos de manera muy general</target>
        </trans-unit>
        <trans-unit id="7f230118147515166a5ef34dfbd9f3ebe67b3e4c" translate="yes" xml:space="preserve">
          <source>It provides very versatile way of dynamically linking program components</source>
          <target state="translated">Proporciona una forma muy versátil de vincular dinámicamente los componentes del programa</target>
        </trans-unit>
        <trans-unit id="1f33d88e3b05279f20e9d11df744b730f18886fd" translate="yes" xml:space="preserve">
          <source>It will then again use reflection to get the appropriate setter for the &amp;lt; property &amp;gt; element and set its value to the specified value.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Luego volver&amp;aacute; a utilizar la reflexi&amp;oacute;n para obtener el setter apropiado para el elemento &amp;lt;property&amp;gt; y establecer su valor en el valor especificado.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f1faa80fe2d86f9a33996d2c1b07db9ecff718f1" translate="yes" xml:space="preserve">
          <source>It's useful because it allows you to change the runtime behavior depending on the meta information of your program, that is, you can check the return type of a function and change the way you handle the situation.</source>
          <target state="translated">Es útil porque permite cambiar el comportamiento en tiempo de ejecución en función de la meta información de su programa,es decir,puede comprobar el tipo de retorno de una función y cambiar la forma de manejar la situación.</target>
        </trans-unit>
        <trans-unit id="9529d68eae9b702b42f4214bdc3e902aa6e05c92" translate="yes" xml:space="preserve">
          <source>It's usefull in a lot of situations. Everywhere you want to be able to dynamically plug in classes into your code. Lot's of object relational mappers use reflection to be able to instantiate objects from databases without knowing in advance what objects they're going to use. Plug-in architectures is another place where reflection is usefull. Being able to dynamically load code and determine if there are types there that implement the right interface to use as a plugin is important in those situations.</source>
          <target state="translated">Es útil en muchas situaciones.En cualquier lugar donde quieras ser capaz de conectar dinámicamente clases en tu código.Muchos mapeadores relacionales de objetos usan la reflexión para poder instanciar objetos de las bases de datos sin saber de antemano qué objetos van a usar.Las arquitecturas plug-in es otro lugar donde la reflexión es útil.Ser capaz de cargar dinámicamente el código y determinar si hay tipos que implementan la interfaz correcta para usar como un plugin es importante en esas situaciones.</target>
        </trans-unit>
        <trans-unit id="e3c24576ba302c22f5da6c285a19a92312766907" translate="yes" xml:space="preserve">
          <source>Java Reflection is quite powerful and can be very useful.
Java Reflection makes it possible &lt;strong&gt;to inspect classes, interfaces, fields and methods at runtime,&lt;/strong&gt; without knowing the names of the classes, methods etc. at compile time.
It is also possible to &lt;strong&gt;instantiate new objects, invoke methods and get/set field values using reflection.&lt;/strong&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Java Reflection es bastante potente y puede ser muy &amp;uacute;til. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Java Reflection permite &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;inspeccionar clases, interfaces, campos y m&amp;eacute;todos en tiempo de ejecuci&amp;oacute;n,&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; sin conocer los nombres de las clases, m&amp;eacute;todos, etc. en tiempo de compilaci&amp;oacute;n. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tambi&amp;eacute;n es posible &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;crear instancias de nuevos objetos, invocar m&amp;eacute;todos y obtener / establecer valores de campo utilizando la reflexi&amp;oacute;n.&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ec6f30c063fcb9ef481489312513588e235d3aa2" translate="yes" xml:space="preserve">
          <source>Junit uses Reflection especially for testing Private/Protected methods.</source>
          <target state="translated">Junit utiliza el Reflection especialmente para probar los métodos de PrivateProtected.</target>
        </trans-unit>
        <trans-unit id="477383916e2dc5b2c68531150a4c99e526ed2157" translate="yes" xml:space="preserve">
          <source>Loading of restricted classes,</source>
          <target state="translated">Carga de clases restringidas,</target>
        </trans-unit>
        <trans-unit id="9ed06bc60874c9e75502a47786ce6dd86d5cfb34" translate="yes" xml:space="preserve">
          <source>Lots of modern frameworks use reflection extensively for this very reason. Most other modern languages use reflection as well, and in scripting languages (such as Python) they are even more tightly integrated, since it feels more natural within the general programming model of those languages.</source>
          <target state="translated">Muchos marcos modernos usan la reflexión extensamente por esta misma razón.La mayoría de los demás lenguajes modernos también utilizan la reflexión,y en los lenguajes de scripting (como Python)están incluso más estrechamente integrados,ya que se siente más natural dentro del modelo general de programación de esos lenguajes.</target>
        </trans-unit>
        <trans-unit id="ea201fad47b1868a8fe0ee11adbb17073d6da9de" translate="yes" xml:space="preserve">
          <source>Not every language supports reflection but the principles are usually the same in languages that support it.</source>
          <target state="translated">No todos los idiomas apoyan la reflexión,pero los principios suelen ser los mismos en los idiomas que la apoyan.</target>
        </trans-unit>
        <trans-unit id="8645ecdcb4e899cc6ecd81759dd0741f6c8d8473" translate="yes" xml:space="preserve">
          <source>Obtaining Class objects,</source>
          <target state="translated">Obtención de objetos de la clase,</target>
        </trans-unit>
        <trans-unit id="e59ff890fe3bc21bd9694e61ab7c233ef689ffdc" translate="yes" xml:space="preserve">
          <source>Obtaining references to constructors, methods or fields of a restricted class,</source>
          <target state="translated">Obtención de referencias de constructores,métodos o campos de una clase restringida,</target>
        </trans-unit>
        <trans-unit id="697ea410e74a0eb90c777be04cc0855e87705cdb" translate="yes" xml:space="preserve">
          <source>One of my favorite uses of reflection is the below Java dump method. It takes any object as a parameter and uses the Java reflection API to print out every field name and value.</source>
          <target state="translated">Uno de mis usos favoritos de la reflexión es el siguiente método de volcado de Java.Toma cualquier objeto como parámetro y usa el API de reflexión de Java para imprimir cada nombre de campo y valor.</target>
        </trans-unit>
        <trans-unit id="3b834c56b8aa4817757e501cdca629ca4aad60ce" translate="yes" xml:space="preserve">
          <source>One very common use case in Java is the usage with annotations. JUnit 4, for example, will use reflection to look through your classes for methods tagged with the @Test annotation, and will then call them when running the unit test.</source>
          <target state="translated">Un caso de uso muy común en Java es el uso con anotaciones.La unidad 4,por ejemplo,usará la reflexión para buscar en sus clases métodos etiquetados con la anotación @Test,y luego los llamará cuando ejecute la prueba de la unidad.</target>
        </trans-unit>
        <trans-unit id="7b7691de77ab4ac4bbc3b9109372d29db5e3ecba" translate="yes" xml:space="preserve">
          <source>Ref: &lt;a href=&quot;http://www.geeksforgeeks.org/reflection-in-java/&quot;&gt;Java Reflection&lt;/a&gt;&lt;a href=&quot;http://javarevisited.blogspot.in/2012/05/how-to-access-private-field-and-method.html&quot;&gt;javarevisited.blogspot.in&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ref: &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.geeksforgeeks.org/reflection-in-java/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Reflexi&amp;oacute;n de Java &lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;a href=&quot;http://javarevisited.blogspot.in/2012/05/how-to-access-private-field-and-method.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;javarevisited.blogspot.in&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="cc2346f09e6a5ef2803272b9e4b34b2ec156b429" translate="yes" xml:space="preserve">
          <source>Reflection allows instantiation of new objects, invocation of methods, and get/set operations on class variables dynamically at run time without having prior knowledge of its implementation.</source>
          <target state="translated">La reflexión permite la instanciación de nuevos objetos,la invocación de métodos y las operaciones de getset en variables de clase de forma dinámica en tiempo de ejecución sin tener conocimiento previo de su implementación.</target>
        </trans-unit>
        <trans-unit id="d8acc7c746ded76a918047280fbbb3333490d6ee" translate="yes" xml:space="preserve">
          <source>Reflection allows programmer to access entities in program dynamically. i.e. while coding an application if programmer is unaware about a class or its methods, he can make use of such class dynamically (at run time) by using reflection.</source>
          <target state="translated">La reflexión permite al programador acceder a las entidades del programa de forma dinámica.Es decir,mientras codifica una aplicación,si el programador desconoce una clase o sus métodos,puede hacer uso de dicha clase de forma dinámica (en tiempo de ejecución)mediante el uso de la reflexión.</target>
        </trans-unit>
        <trans-unit id="f37357014c003a54ec493246687a7444440fcd2a" translate="yes" xml:space="preserve">
          <source>Reflection also allows you to access private member/methods of a class:</source>
          <target state="translated">La reflexión también le permite acceder a los métodos privados de una clase:</target>
        </trans-unit>
        <trans-unit id="a217aec8f01d9275c05ea95b02480164f9f45d6b" translate="yes" xml:space="preserve">
          <source>Reflection code is also more complex than the corresponding direct code</source>
          <target state="translated">El código de reflexión es también más complejo que el código directo correspondiente</target>
        </trans-unit>
        <trans-unit id="68f6c9c71d88215dda226271549652ed9dbb6af3" translate="yes" xml:space="preserve">
          <source>Reflection gives us information about the class to which an object belongs and also the methods of that class which can be executed by using the object.</source>
          <target state="translated">La reflexión nos da información sobre la clase a la que pertenece un objeto y también sobre los métodos de esa clase que pueden ser ejecutados usando el objeto.</target>
        </trans-unit>
        <trans-unit id="db38284702d4de4debeccce6b221673af3d2314a" translate="yes" xml:space="preserve">
          <source>Reflection gives you the ability to write more generic code. It allows you to create an object at runtime and call its method at runtime. Hence the program can be made highly parameterized. It also allows introspecting the object and class to detect its variables and method exposed to the outer world.</source>
          <target state="translated">La reflexión le da la capacidad de escribir un código más genérico.Permite crear un objeto en tiempo de ejecución y llamar a su método en tiempo de ejecución.Por lo tanto,el programa se puede hacer altamente parametrizado.También permite introspectar el objeto y la clase para detectar sus variables y el método expuesto al mundo exterior.</target>
        </trans-unit>
        <trans-unit id="5efe0f8d4b975ae78ef2cfa6918c6502f062b7e5" translate="yes" xml:space="preserve">
          <source>Reflection is a key mechanism to allow an application or framework to work with code that might not have even been written yet!</source>
          <target state="translated">La reflexión es un mecanismo clave para permitir que una aplicación o marco de trabajo trabaje con código que podría no haber sido escrito todavía!</target>
        </trans-unit>
        <trans-unit id="5219115cc863bf20388caf98ef604a4d4c4b9a31" translate="yes" xml:space="preserve">
          <source>Reflection is a set of functions which allows you to access the runtime information of your program and modify it behavior (with some limitations).</source>
          <target state="translated">Reflection es un conjunto de funciones que le permite acceder a la información de tiempo de ejecución de su programa y modificar su comportamiento (con algunas limitaciones).</target>
        </trans-unit>
        <trans-unit id="8f4224bf21b4ff6caa7248cbb7fdfd34031ed536" translate="yes" xml:space="preserve">
          <source>Reflection is a very powerful API but it may slow down the application if used in excess, as it resolves all the types at runtime.</source>
          <target state="translated">Reflection es una API muy potente,pero puede ralentizar la aplicación si se utiliza en exceso,ya que resuelve todos los tipos en tiempo de ejecución.</target>
        </trans-unit>
        <trans-unit id="47750829f34b52f1a4d7eb0bfa90de280fa1357f" translate="yes" xml:space="preserve">
          <source>Reflection is commonly used by programs which require the ability to examine or modify the runtime behavior of applications running in the Java virtual machine. This is a relatively advanced feature and should be used only by developers who have a strong grasp of the fundamentals of the language. With that caveat in mind, reflection is a powerful technique and can enable applications to perform operations which would otherwise be impossible.</source>
          <target state="translated">El reflejo es comúnmente usado por programas que requieren la habilidad de examinar o modificar el comportamiento en tiempo de ejecución de las aplicaciones que se ejecutan en la máquina virtual de Java.Esta es una característica relativamente avanzada y debería ser usada sólo por desarrolladores que tengan un fuerte conocimiento de los fundamentos del lenguaje.Con esta advertencia en mente,la reflexión es una técnica poderosa y puede permitir a las aplicaciones realizar operaciones que de otra manera serían imposibles.</target>
        </trans-unit>
        <trans-unit id="a996a95ce6377941641fdade6f5ccdc15836006a" translate="yes" xml:space="preserve">
          <source>Reflection is important since it lets you write programs that do not have to &quot;know&quot; everything at compile time, making them more dynamic, since they can be tied together at runtime. The code can be written against known interfaces, but the actual classes to be used can be instantiated using reflection from configuration files.</source>
          <target state="translated">La reflexión es importante ya que permite escribir programas que no tienen que &quot;saber&quot; todo en tiempo de compilación,lo que los hace más dinámicos,ya que se pueden unir en tiempo de ejecución.El código puede ser escrito contra interfaces conocidas,pero las clases reales a utilizar pueden ser instanciadas usando la reflexión de los archivos de configuración.</target>
        </trans-unit>
        <trans-unit id="377c299d76a416cc7636903bb8fb907815a92340" translate="yes" xml:space="preserve">
          <source>Reflection is much slower than direct code when used for field and method access.</source>
          <target state="translated">La reflexión es mucho más lenta que el código directo cuando se utiliza para el acceso al campo y al método.</target>
        </trans-unit>
        <trans-unit id="39ed6d7dc105535550cdc170f9710f2089167435" translate="yes" xml:space="preserve">
          <source>Reflection is powerful, but should not be used indiscriminately. If it is possible to perform an operation without using reflection, then it is preferable to avoid using it. The following concerns should be kept in mind when accessing code via reflection.</source>
          <target state="translated">La reflexión es poderosa,pero no debe ser usada indiscriminadamente.Si es posible realizar una operación sin usar la reflexión,entonces es preferible evitar usarla.Las siguientes preocupaciones deben tenerse en cuenta cuando se accede al código por medio de la reflexión.</target>
        </trans-unit>
        <trans-unit id="ac26492de916ca7697ea01aee13539fdda84f0a4" translate="yes" xml:space="preserve">
          <source>Reflection is the ability to &quot;reflect&quot; on the structure of your program. Or more concrete. To look at the objects and classes you have and programmatically get back information on the methods, fields, and interfaces they implement. You can also look at things like annotations.</source>
          <target state="translated">La reflexión es la capacidad de &quot;reflejar&quot; la estructura de su programa.O más concretamente.Mirar los objetos y clases que tienes y recuperar programáticamente información sobre los métodos,campos e interfaces que implementan.También puedes mirar cosas como las anotaciones.</target>
        </trans-unit>
        <trans-unit id="c3069b249454a7521079ef23974c9cab83670986" translate="yes" xml:space="preserve">
          <source>Reflection is to let object to see their appearance. This argument seems nothing to do with reflection. In fact, this is the &quot;self-identify&quot; ability.</source>
          <target state="translated">La reflexión es dejar que el objeto vea su apariencia.Este argumento no parece tener nada que ver con la reflexión.De hecho,es la capacidad de &quot;autoidentificarse&quot;.</target>
        </trans-unit>
        <trans-unit id="4a5e2b549ed93f324cf7bab644f028cfa8ce1528" translate="yes" xml:space="preserve">
          <source>Reflection itself is a word for such languages that lack the capability of self-knowledge and self-sensing as Java and C#. Because they do not have the capability of self-knowledge, when we want to observe how it looks like, we must have another thing to reflect on how it looks like. Excellent dynamic languages such as Ruby and Python can perceive the reflection of their own without the help of other individuals. We can say that the object of Java cannot perceive how it looks like without a mirror, which is an object of the reflection class, but an object in Python can perceive it without a mirror. So that's why we need reflection in Java.</source>
          <target state="translated">La reflexión en sí es una palabra para los lenguajes que carecen de la capacidad de auto-conocimiento y auto-sensibilidad como Java y C#.Debido a que no tienen la capacidad de autoconocimiento,cuando queremos observar cómo se ve,debemos tener otra cosa para reflexionar sobre cómo se ve.Excelentes lenguajes dinámicos como Ruby y Python pueden percibir el reflejo de los suyos propios sin la ayuda de otros individuos.Podemos decir que el objeto de Java no puede percibir cómo se ve sin un espejo,que es un objeto de la clase de reflexión,pero un objeto en Python puede percibirlo sin un espejo.Así que por eso necesitamos el reflejo en Java.</target>
        </trans-unit>
        <trans-unit id="fc3e348e092fed72b69acabc88a3e9231891d8df" translate="yes" xml:space="preserve">
          <source>Reflection requires a runtime permission which may not be present when running under a security manager. This is in an important consideration for code which has to run in a restricted security context, such as in an Applet.</source>
          <target state="translated">Reflection requiere un permiso de ejecución que puede no estar presente cuando se ejecuta bajo un administrador de seguridad.Esto es de gran importancia para el código que debe ejecutarse en un contexto de seguridad restringida,como en un Applet.</target>
        </trans-unit>
        <trans-unit id="f04529f40ec32d7f346acf314474d6101993e2d0" translate="yes" xml:space="preserve">
          <source>Setting and getting field values,</source>
          <target state="translated">Configurando y obteniendo los valores de campo,</target>
        </trans-unit>
        <trans-unit id="c9fbf65523bc453e10a3d5104969528d78e85a62" translate="yes" xml:space="preserve">
          <source>Simple example for reflection.
In a chess game, you do not know what will be moved by the user at run time. reflection can be used to call methods which are already implemented at run time:</source>
          <target state="translated">Un ejemplo simple para la reflexión.En un juego de ajedrez,no se sabe qué será movido por el usuario en tiempo de ejecución.La reflexión puede ser usada para llamar a métodos que ya están implementados en tiempo de ejecución:</target>
        </trans-unit>
        <trans-unit id="e8bfe093287c98e51f95e42feee3bae8ebc51cc2" translate="yes" xml:space="preserve">
          <source>Since reflection allows code to perform operations that would be illegal in non-reflective code, such as accessing private fields and methods, the use of reflection can result in unexpected side-effects, which may render code dysfunctional and may destroy portability. Reflective code breaks abstractions and therefore may change behavior with upgrades of the platform.</source>
          <target state="translated">Dado que la reflexión permite que el código realice operaciones que serían ilegales en un código no reflexivo,como el acceso a campos y métodos privados,el uso de la reflexión puede tener efectos secundarios inesperados,que pueden hacer que el código sea disfuncional y destruir la portabilidad.El código reflexivo rompe las abstracciones y por lo tanto puede cambiar el comportamiento con las actualizaciones de la plataforma.</target>
        </trans-unit>
        <trans-unit id="8724c4153e380659fdd217d8eba7f1cb0a1dcaf4" translate="yes" xml:space="preserve">
          <source>So we might implement in 3 classes each containing a different logic .Obviously the object  information is available in runtime so you cannot statically code to perform computation hence reflection is used to instantiate the object of the class that you require to perform the computation based on the object received from the provider .</source>
          <target state="translated">Así que podríamos implementar en 3 clases,cada una de ellas con una lógica diferente.Obviamente la información del objeto está disponible en tiempo de ejecución,por lo que no se puede codificar estáticamente para realizar el cálculo,por lo que la reflexión se utiliza para instanciar el objeto de la clase que se requiere para realizar el cálculo basado en el objeto recibido del proveedor.</target>
        </trans-unit>
        <trans-unit id="635afd63b9273f7fdaee3a02919e369f61f1a6e3" translate="yes" xml:space="preserve">
          <source>So, to give you a code example of this in Java (imagine the object in question is foo) :</source>
          <target state="translated">Así que,para darte un ejemplo de código de esto en Java (imagina que el objeto en cuestión es foo):</target>
        </trans-unit>
        <trans-unit id="2d6febcf15152d8de02fe3348451d82daeec0ac2" translate="yes" xml:space="preserve">
          <source>Spring uses bean configuration such as:</source>
          <target state="translated">La primavera usa una configuración de frijoles como:</target>
        </trans-unit>
        <trans-unit id="f61183eaff1df22c443b6f8bde3959781f43b8fe" translate="yes" xml:space="preserve">
          <source>Take for example a remote application which gives your application an object which you obtain using their API Methods . Now based on the object you might need to perform some sort of computation .</source>
          <target state="translated">Tomemos por ejemplo una aplicación remota que le da a su aplicación un objeto que obtiene mediante sus métodos API.Ahora,basado en el objeto que usted podría necesitar para realizar algún tipo de cálculo .</target>
        </trans-unit>
        <trans-unit id="5d4297d76e89658b1926871e00e1ecb1c986af2b" translate="yes" xml:space="preserve">
          <source>Take for example your typical web.xml file. This will contain a list of servlet elements, which contain nested servlet-class elements. The servlet container will process the web.xml file, and create new a new instance of each servlet class through reflection.</source>
          <target state="translated">Toma por ejemplo tu típico archivo web.xml.Este contendrá una lista de elementos de servlet,que contienen elementos anidados de clase servlet.El contenedor de servlets procesará el archivo web.xml,y creará una nueva instancia de cada clase de servlet a través de la reflexión.</target>
        </trans-unit>
        <trans-unit id="a5441cc3e68def23311ae3069c5213a79fb6d793" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;java.lang&lt;/code&gt; and &lt;code&gt;java.lang.reflect&lt;/code&gt; packages provide classes for java reflection.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Los &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;paquetes &lt;/font&gt;&lt;/font&gt; &lt;code&gt;java.lang&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;java.lang.reflect&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; proporcionan clases para la reflexi&amp;oacute;n java.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9b95bfd9602344297040acb8417c536c25721f0a" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Reflection API&lt;/strong&gt; is mainly used in:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;API de Reflection&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; se usa principalmente en:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="04d7c78236ee89824542d56ba549b24aeeb3ce91" translate="yes" xml:space="preserve">
          <source>The ability to inspect the code in the system and see object types is
  not reflection, but rather Type Introspection. Reflection is then the
  ability to make modifications at runtime by making use of
  introspection. The distinction is necessary here as some languages
  support introspection, but do not support reflection. One such example
  is C++</source>
          <target state="translated">La capacidad de inspeccionar el código en el sistema y ver los tipos de objetos no es la reflexión,sino la introspección del tipo.La reflexión es entonces la capacidad de hacer modificaciones en tiempo de ejecución haciendo uso de la introspección.La distinción es necesaria aquí ya que algunos lenguajes soportan la introspección,pero no soportan la reflexión.Un ejemplo de ello es C++</target>
        </trans-unit>
        <trans-unit id="64826090e45abc29b52ec33aee4fd3a8935d1153" translate="yes" xml:space="preserve">
          <source>The name reflection is used to describe code which is able to inspect other code in the same system (or itself).</source>
          <target state="translated">El nombre &quot;reflejo&quot; se utiliza para describir un código que es capaz de inspeccionar otro código en el mismo sistema (o a sí mismo).</target>
        </trans-unit>
        <trans-unit id="d8bd80d3aa3030e4b8f6a6f74cf091bd7474e02c" translate="yes" xml:space="preserve">
          <source>The provider guarantees that object can be of 3 types and we need to perform computation based on what type of object .</source>
          <target state="translated">El proveedor garantiza que el objeto puede ser de 3 tipos y tenemos que realizar el cálculo en base a qué tipo de objeto.</target>
        </trans-unit>
        <trans-unit id="24832444ab515d4459764d90fef06d4a35a14894" translate="yes" xml:space="preserve">
          <source>The required classes for reflection are provided under &lt;code&gt;java.lang.reflect package&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Las clases requeridas para la reflexi&amp;oacute;n se proporcionan en el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;java.lang.reflect package&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cee64e47e968ebdb3bf6f36dfb55711ed80943bc" translate="yes" xml:space="preserve">
          <source>There are some good reflection examples to get you started at &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/reflect/index.html&quot;&gt;http://docs.oracle.com/javase/tutorial/reflect/index.html&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Hay algunos buenos ejemplos de reflexi&amp;oacute;n para comenzar en &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/reflect/index.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http://docs.oracle.com/javase/tutorial/reflect/index.html&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="15848ed19daf91dc599a9ff7594b0b3d522f11cf" translate="yes" xml:space="preserve">
          <source>This example obtains the Class object from the class called MyObject. Using the class object the example gets a list of the methods in that class, iterates the methods and print out their names.</source>
          <target state="translated">Este ejemplo obtiene el objeto Class de la clase llamada MyObject.Usando el objeto class el ejemplo obtiene una lista de los métodos de esa clase,itera los métodos e imprime sus nombres.</target>
        </trans-unit>
        <trans-unit id="b81690f4b4757a81fe7b4c08dda32ca5cad7198e" translate="yes" xml:space="preserve">
          <source>Through reflection we can invoke methods at runtime irrespective of the access specifier used with them.</source>
          <target state="translated">A través de la reflexión podemos invocar métodos en tiempo de ejecución independientemente del especificador de acceso utilizado con ellos.</target>
        </trans-unit>
        <trans-unit id="a561e326da9ebe21a8e13536d31808cf84879d80" translate="yes" xml:space="preserve">
          <source>What is reflection and why is it useful</source>
          <target state="translated">¿Qué es la reflexión y por qué es útil</target>
        </trans-unit>
        <trans-unit id="d5e2c197bd1e64c01b4c7886ec8b0ee3ecc2474b" translate="yes" xml:space="preserve">
          <source>What is reflection, and why is it useful?</source>
          <target state="translated">¿Qué es la reflexión y por qué es útil?</target>
        </trans-unit>
        <trans-unit id="3ed9422a2ea0d1d0fefd2a8439979ee5b364d653" translate="yes" xml:space="preserve">
          <source>When the Spring context processes this &amp;lt; bean &amp;gt; element, it will use Class.forName(String) with the argument &quot;com.example.Foo&quot; to instantiate that Class.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cuando el contexto Spring procesa este elemento &amp;lt;bean&amp;gt;, usar&amp;aacute; Class.forName (String) con el argumento &quot;com.example.Foo&quot; para crear una instancia de esa clase.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="af1158d1d64999cdcf645b618eba9c9d3b13e77a" translate="yes" xml:space="preserve">
          <source>Where can it be useful? Is not useful every time but for concrete situations. For example you can use it to get the name of the class for logging purposes, to dynamically create handlers for events according to what's specified on a configuration file and so on...</source>
          <target state="translated">¿Dónde puede ser útil? No es útil siempre,pero sí para situaciones concretas.Por ejemplo,puedes usarlo para obtener el nombre de la clase para propósitos de registro,para crear dinámicamente manejadores de eventos de acuerdo a lo especificado en un archivo de configuración y así sucesivamente...</target>
        </trans-unit>
        <trans-unit id="37f86593e132b343b87b879e0fa055158365feb1" translate="yes" xml:space="preserve">
          <source>With &lt;strong&gt;Reflection API&lt;/strong&gt; you can write universal &lt;code&gt;toString()&lt;/code&gt; method for any object.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Con &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Reflection API&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; puedes escribir el &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;m&amp;eacute;todo &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;universal &lt;/font&gt;&lt;/font&gt; &lt;code&gt;toString()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para cualquier objeto.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="90a0cd0782edde2787574165e7afdae56b562e70" translate="yes" xml:space="preserve">
          <source>source: &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/reflect/&quot;&gt;The Reflection API&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;fuente: &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/reflect/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;API de Reflection&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
