<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://stackoverflow.com/questions/3737139">
    <body>
      <group id="3737139">
        <trans-unit id="7993d4e4339a9951f823a1ec4011472c5a6291cd" translate="yes" xml:space="preserve">
          <source>$function() and $$variable</source>
          <target state="translated">$ function () 및 $$ variable</target>
        </trans-unit>
        <trans-unit id="3e3a0ca736574d1f91ae688e33999dfe63386188" translate="yes" xml:space="preserve">
          <source>'AND' vs '&amp;amp;&amp;amp;' as operator</source>
          <target state="translated">'AND'대 '&amp;amp;&amp;amp;'연산자</target>
        </trans-unit>
        <trans-unit id="5a6295090c31e4b3925c06be0971be6d677fd43d" translate="yes" xml:space="preserve">
          <source>'At' symbol before variable name in PHP: @$_POST</source>
          <target state="translated">PHP에서 변수 이름 앞에 'At'기호 : @ $ _ POST</target>
        </trans-unit>
        <trans-unit id="e9c5d448b3d5e5e010db7a8adb804ac6db228733" translate="yes" xml:space="preserve">
          <source>+ operator for array in PHP?</source>
          <target state="translated">+ PHP에서 배열 연산자?</target>
        </trans-unit>
        <trans-unit id="c227ebdd5f3beeea9d5c5a6a076da10e0140472a" translate="yes" xml:space="preserve">
          <source>1 + 2 + 4 + 8 + 16 + 32 + 64 + 128 = 255 (1 Byte)</source>
          <target state="translated">1 + 2 + 4 + 8 + 16 + 32 + 64 + 128 = 255 (1 바이트)</target>
        </trans-unit>
        <trans-unit id="5488c7696397ce77e2af4fe180553a7b24993b01" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://stackoverflow.com/questions/21058439&quot;&gt;Is there ever a need to use ampersand in front of an object?&lt;/a&gt; (&amp;amp;$)</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/questions/21058439&quot;&gt;물체 앞에서 앰퍼샌드를 사용해야 할 필요가 있습니까?&lt;/a&gt; (&amp;amp; $)</target>
        </trans-unit>
        <trans-unit id="eada7f96817bd7a2b90e809861fa24564c0019d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;!!&lt;/code&gt;&lt;a href=&quot;http://secure.php.net/manual/en/language.operators.logical.php&quot;&gt;Logical Operators&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;!!&lt;/code&gt; &lt;a href=&quot;http://secure.php.net/manual/en/language.operators.logical.php&quot;&gt;논리 연산자&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c7bb3d29ee2b002240c6a4f93e8232104e746e66" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;!=&lt;/code&gt;&lt;a href=&quot;http://secure.php.net/manual/en/language.operators.comparison.php&quot;&gt;Comparison Operators&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;!=&lt;/code&gt; &lt;a href=&quot;http://secure.php.net/manual/en/language.operators.comparison.php&quot;&gt;비교 연산자&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c3d23dad164484d8066d6cc641c9c1c4e85dd2ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;!==&lt;/code&gt;&lt;a href=&quot;http://secure.php.net/manual/en/language.operators.comparison.php&quot;&gt;Comparison Operators&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;!==&lt;/code&gt; &lt;a href=&quot;http://secure.php.net/manual/en/language.operators.comparison.php&quot;&gt;비교 연산자&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="917ce6a8a2352493cd4acee6ac8367890a56aafb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;#&lt;/code&gt;&lt;a href=&quot;http://php.net/manual/en/language.basic-syntax.comments.php&quot;&gt;One-line shell-style comment&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;#&lt;/code&gt; &lt;a href=&quot;http://php.net/manual/en/language.basic-syntax.comments.php&quot;&gt;한 줄 쉘 스타일 주석&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="68a813b34ff27e8317e1c39bbf29e4dddefe96e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$$&lt;/code&gt;&lt;a href=&quot;http://php.net/manual/en/language.variables.variable.php&quot;&gt;Variable Variables&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;$$&lt;/code&gt; &lt;a href=&quot;http://php.net/manual/en/language.variables.variable.php&quot;&gt;변수 변수&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8d64d551301b11598a8f0405b95a833ee1fdf9e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%&lt;/code&gt;&lt;a href=&quot;http://secure.php.net/manual/en/language.operators.arithmetic.php&quot;&gt;Arithmetic Operators&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://secure.php.net/manual/en/language.operators.arithmetic.php&quot;&gt;산술 연산자&lt;/a&gt; &lt;code&gt;%&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="aa4aa4dfee38529dfa27157680ed5c877b637f7d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;&lt;a href=&quot;http://secure.php.net/manual/en/language.operators.logical.php&quot;&gt;Logical Operators&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; &lt;a href=&quot;http://secure.php.net/manual/en/language.operators.logical.php&quot;&gt;논리 연산자&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d635bfa55921f43e10e29d3ba117376bfc607ada" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;amp;&lt;/code&gt;&lt;a href=&quot;http://secure.php.net/manual/en/language.operators.bitwise.php&quot;&gt;Bitwise Operators&lt;/a&gt; or &lt;a href=&quot;http://secure.php.net/manual/en/language.references.php&quot;&gt;References&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;&amp;amp;&lt;/code&gt; &lt;a href=&quot;http://secure.php.net/manual/en/language.operators.bitwise.php&quot;&gt;비트 연산자&lt;/a&gt; 또는 &lt;a href=&quot;http://secure.php.net/manual/en/language.references.php&quot;&gt;참조&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="eff0b7ebf8743deed2341c52fc674b9cd100b545" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;amp;=&lt;/code&gt;&lt;a href=&quot;http://secure.php.net/manual/en/language.operators.bitwise.php&quot;&gt;Bitwise Operators&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;&amp;amp;=&lt;/code&gt; &lt;a href=&quot;http://secure.php.net/manual/en/language.operators.bitwise.php&quot;&gt;비트 연산자&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a434fceb9e7181bcb231c63132c81eb9e31033a0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;&lt;a href=&quot;http://secure.php.net/manual/en/language.operators.bitwise.php&quot;&gt;Bitwise Operators&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; &lt;a href=&quot;http://secure.php.net/manual/en/language.operators.bitwise.php&quot;&gt;비트 연산자&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3c2ecb06d07264c40892f44ec85aa6b65da5b56b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;&lt;a href=&quot;http://secure.php.net/manual/en/language.operators.comparison.php&quot;&gt;Comparison Operators&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; &lt;a href=&quot;http://secure.php.net/manual/en/language.operators.comparison.php&quot;&gt;비교 연산자&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="27f428322cf01954968843c3862d4576ec530017" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/code&gt;&lt;a href=&quot;http://php.net/manual/en/language.types.string.php#language.types.string.syntax.heredoc&quot;&gt;Heredoc or Nowdoc&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/code&gt; &lt;a href=&quot;http://php.net/manual/en/language.types.string.php#language.types.string.syntax.heredoc&quot;&gt;Heredoc 또는 Nowdoc&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2bf28e1034a39b5a6477608224ffa52592c46733" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;&lt;a href=&quot;http://secure.php.net/manual/en/language.operators.bitwise.php&quot;&gt;Bitwise Operators&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://secure.php.net/manual/en/language.operators.bitwise.php&quot;&gt;비트 연산자&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="92824043c3e52dc871603f5d8be5333ec2e19ad1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; Spaceship Operator</source>
          <target state="translated">&lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; 우주선 연산자</target>
        </trans-unit>
        <trans-unit id="ac662ede3feb24d931799dae45e1ada118a606af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt;&lt;a href=&quot;http://secure.php.net/manual/en/language.operators.comparison.php&quot;&gt;Comparison Operators&lt;/a&gt; (since PHP 7.0)</source>
          <target state="translated">&lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; &lt;a href=&quot;http://secure.php.net/manual/en/language.operators.comparison.php&quot;&gt;비교 연산자&lt;/a&gt; (PHP 7.0부터)</target>
        </trans-unit>
        <trans-unit id="f75497470f169c8682ee4625ba62049463241b63" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;?&lt;/code&gt;&lt;a href=&quot;http://secure.php.net/manual/en/language.basic-syntax.php&quot;&gt;Opening and Closing tags&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;&amp;lt;?&lt;/code&gt; &lt;a href=&quot;http://secure.php.net/manual/en/language.basic-syntax.php&quot;&gt;태그 열기 및 닫기&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b7590546cdf1f9568b9b5e9fe0850a79de2b752f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;?=&lt;/code&gt;&lt;a href=&quot;http://php.net/manual/en/ini.core.php#ini.short-open-tag&quot;&gt;Short Open Tags&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;&amp;lt;?=&lt;/code&gt; 바로 가기 &lt;a href=&quot;http://php.net/manual/en/ini.core.php#ini.short-open-tag&quot;&gt;태그&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9754655ba4ba8aa2a61c0fddf5a06a56f4ba9d93" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;**&lt;/code&gt;&lt;a href=&quot;http://secure.php.net/manual/en/migration56.new-features.php#migration56.new-features.exponentiation&quot;&gt;Exponentiation&lt;/a&gt; (since PHP 5.6)</source>
          <target state="translated">&lt;code&gt;**&lt;/code&gt; &lt;a href=&quot;http://secure.php.net/manual/en/migration56.new-features.php#migration56.new-features.exponentiation&quot;&gt;지수&lt;/a&gt; (PHP 5.6부터)</target>
        </trans-unit>
        <trans-unit id="70055dd0e4b6aff1607e546970a4a332359f3189" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;++&lt;/code&gt; and &lt;code&gt;--&lt;/code&gt;&lt;a href=&quot;http://secure.php.net/manual/en/language.operators.increment.php&quot;&gt;Incrementing/Decrementing Operators&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;++&lt;/code&gt; 및 &lt;code&gt;--&lt;/code&gt; &lt;a href=&quot;http://secure.php.net/manual/en/language.operators.increment.php&quot;&gt;증가 / 감소 연산자&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e86bc0ed39959214b9130ce141d8b7d2706eca58" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;++&lt;/code&gt; increment operator</source>
          <target state="translated">&lt;code&gt;++&lt;/code&gt; 증분 연산자</target>
        </trans-unit>
        <trans-unit id="1d8c63df4e63075ce8d3c35c7715b0c6fb9ff132" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;+&lt;/code&gt;&lt;a href=&quot;http://secure.php.net/manual/en/language.operators.arithmetic.php&quot;&gt;Arithmetic Operators&lt;/a&gt;, &lt;a href=&quot;http://secure.php.net/manual/en/language.operators.array.php&quot;&gt;Array Operators&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;+&lt;/code&gt; &lt;a href=&quot;http://secure.php.net/manual/en/language.operators.arithmetic.php&quot;&gt;산술 연산자&lt;/a&gt; , &lt;a href=&quot;http://secure.php.net/manual/en/language.operators.array.php&quot;&gt;배열 연산자&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="52cbfd3189a5439ab3d3dc7349f825dedc8998bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;+=&lt;/code&gt; and &lt;code&gt;-=&lt;/code&gt;&lt;a href=&quot;http://secure.php.net/manual/en/language.operators.assignment.php&quot;&gt;Assignment Operators&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;+=&lt;/code&gt; 및 &lt;code&gt;-=&lt;/code&gt; &lt;a href=&quot;http://secure.php.net/manual/en/language.operators.assignment.php&quot;&gt;할당 연산자&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c7fd693810716a88a96c4cd6de6ee454e214ca64" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;,&lt;/code&gt;&lt;a href=&quot;http://php.net/manual/en/functions.arguments.php&quot;&gt;Function Arguments&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://php.net/manual/en/functions.arguments.php&quot;&gt;함수 인수&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="93080e1c3c92ed3829562482b98a5e1b2d0496a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;,&lt;/code&gt;&lt;a href=&quot;http://php.net/manual/en/language.variables.scope.php&quot;&gt;Variable Declarations&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://php.net/manual/en/language.variables.scope.php&quot;&gt;변수 선언&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="16c9dda8e5b0ab94ff7799f44611b67358aa67f1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-&amp;gt;&lt;/code&gt;&lt;a href=&quot;http://secure.php.net/manual/en/language.oop5.php&quot;&gt;Classes And Objects&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;-&amp;gt;&lt;/code&gt; &lt;a href=&quot;http://secure.php.net/manual/en/language.oop5.php&quot;&gt;클래스와 객체&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c524f4d24725ad79746c77610af7544281625da9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;--&lt;/code&gt; decrement operator</source>
          <target state="translated">&lt;code&gt;--&lt;/code&gt; 감소 연산자</target>
        </trans-unit>
        <trans-unit id="fad5d149059e2409af5f3e10b101929fb19120ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;...&lt;/code&gt;&lt;a href=&quot;http://php.net/manual/en/functions.arguments.php#functions.variable-arg-list&quot;&gt;Argument unpacking&lt;/a&gt; (since PHP 5.6)</source>
          <target state="translated">&lt;code&gt;...&lt;/code&gt; &lt;a href=&quot;http://php.net/manual/en/functions.arguments.php#functions.variable-arg-list&quot;&gt;인수 풀기&lt;/a&gt; (PHP 5.6부터)</target>
        </trans-unit>
        <trans-unit id="0985404380f922be1c64d731eb598874a1721a91" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.&lt;/code&gt;&lt;a href=&quot;http://secure.php.net/manual/en/language.operators.string.php&quot;&gt;String Operators&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;.&lt;/code&gt; &lt;a href=&quot;http://secure.php.net/manual/en/language.operators.string.php&quot;&gt;문자열 연산자&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2ee9ada49962b880c4cb8e409eb1dcb49a751404" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.=&lt;/code&gt;&lt;a href=&quot;http://secure.php.net/manual/en/language.operators.assignment.php&quot;&gt;Assignment Operators&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;.=&lt;/code&gt; &lt;a href=&quot;http://secure.php.net/manual/en/language.operators.assignment.php&quot;&gt;할당 연산자&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7334ce807e9c998eeac998ea99567f77e8055538" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;0&lt;/code&gt; when both operands are equal</source>
          <target state="translated">두 피연산자가 같은 경우 &lt;code&gt;0&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ee20c800ee537a4b6d02f9770d41e98ce3515ece" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;::&lt;/code&gt;&lt;a href=&quot;http://secure.php.net/manual/en/language.oop5.paamayim-nekudotayim.php&quot;&gt;Scope Resolution Operator&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;::&lt;/code&gt; &lt;a href=&quot;http://secure.php.net/manual/en/language.oop5.paamayim-nekudotayim.php&quot;&gt;범위 확인 연산자&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4a65809703b264942bb177502ab3bd6aa36678d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;:&lt;/code&gt;&lt;a href=&quot;http://secure.php.net/manual/en/control-structures.alternative-syntax.php&quot;&gt;Alternative syntax for control structures&lt;/a&gt;, &lt;a href=&quot;http://php.net/manual/en/language.operators.comparison.php#language.operators.comparison.ternary&quot;&gt;Ternary Operator&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;:&lt;/code&gt; &lt;a href=&quot;http://secure.php.net/manual/en/control-structures.alternative-syntax.php&quot;&gt;제어 구조의 대체 구문&lt;/a&gt; , &lt;a href=&quot;http://php.net/manual/en/language.operators.comparison.php#language.operators.comparison.ternary&quot;&gt;Ternary Operator&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="319e6c22129765e58d861b70e64cd5b6f16b7359" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;:?&lt;/code&gt;&lt;a href=&quot;http://php.net/manual/en/migration71.new-features.php#migration71.new-features.nullable-types&quot;&gt;Nullable return types&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;:?&lt;/code&gt; &lt;a href=&quot;http://php.net/manual/en/migration71.new-features.php#migration71.new-features.nullable-types&quot;&gt;널 입력 가능 리턴 유형&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="92b692ae82c8a43deaa238ef37646804b90429b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;=&amp;amp;&lt;/code&gt;&lt;a href=&quot;http://secure.php.net/manual/en/language.references.php&quot;&gt;References&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;=&amp;amp;&lt;/code&gt;&lt;a href=&quot;http://secure.php.net/manual/en/language.references.php&quot;&gt;References&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d4b8548995f3b1da2cb7b2b1254c16429dcf712a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;=&amp;gt;&lt;/code&gt; Is the symbol we humans decided to use to separate &lt;code&gt;&quot;Key&quot; =&amp;gt; &quot;Value&quot;&lt;/code&gt; pairs in Associative Arrays.</source>
          <target state="translated">&lt;code&gt;=&amp;gt;&lt;/code&gt; 인간이 연관 배열에서 &lt;code&gt;&quot;Key&quot; =&amp;gt; &quot;Value&quot;&lt;/code&gt; 쌍을 분리하기 위해 사용하기로 결정한 상징입니까?</target>
        </trans-unit>
        <trans-unit id="8f72c969285c97f5d37bc3b9220891f376d2deb4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;=&amp;gt;&lt;/code&gt;&lt;a href=&quot;http://secure.php.net/manual/en/language.types.array.php&quot;&gt;Arrays&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;=&amp;gt;&lt;/code&gt;&lt;a href=&quot;http://secure.php.net/manual/en/language.types.array.php&quot;&gt;Arrays&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e9eb18258f08f750cf72f44ba62785b077f44dd4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;=&lt;/code&gt;&lt;a href=&quot;http://secure.php.net/manual/en/language.operators.assignment.php&quot;&gt;Assignment Operators&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;=&lt;/code&gt; &lt;a href=&quot;http://secure.php.net/manual/en/language.operators.assignment.php&quot;&gt;할당 연산자&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="17932882fdcfdefc35f9f76bd35b48454dd46bbe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;==&lt;/code&gt;  is used for check equality &lt;strong&gt;without&lt;/strong&gt; considering variable &lt;strong&gt;data-type&lt;/strong&gt;</source>
          <target state="translated">&lt;code&gt;==&lt;/code&gt; 변수 &lt;strong&gt;데이터 유형을&lt;/strong&gt; 고려 &lt;strong&gt;하지 않고&lt;/strong&gt; 검사 평등에 사용</target>
        </trans-unit>
        <trans-unit id="44e5f36606b216ccfe0b681bb506ffbfd857a2c0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;==&lt;/code&gt;&lt;a href=&quot;http://secure.php.net/manual/en/language.operators.comparison.php&quot;&gt;Comparison Operators&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;==&lt;/code&gt; &lt;a href=&quot;http://secure.php.net/manual/en/language.operators.comparison.php&quot;&gt;비교 연산자&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ade911a427b66c73a45cf6e1e8011b56e355b23f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;===&lt;/code&gt; is used for check equality for &lt;strong&gt;both&lt;/strong&gt; the variable &lt;strong&gt;value&lt;/strong&gt; and &lt;strong&gt;data-type&lt;/strong&gt;</source>
          <target state="translated">&lt;code&gt;===&lt;/code&gt; 변수 &lt;strong&gt;값&lt;/strong&gt; 과 &lt;strong&gt;데이터 유형&lt;/strong&gt; &lt;strong&gt;모두에&lt;/strong&gt; 대해 동등성을 검사하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="41999a8dcc530f9cf20dc80df13e2f5e4eace09c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;===&lt;/code&gt;&lt;a href=&quot;http://secure.php.net/manual/en/language.operators.comparison.php&quot;&gt;Comparison Operators&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;===&lt;/code&gt; &lt;a href=&quot;http://secure.php.net/manual/en/language.operators.comparison.php&quot;&gt;비교 연산자&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1db2f80220cd4f768948d9d05bb0438a2dc3d725" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;?:&lt;/code&gt;&lt;a href=&quot;http://php.net/manual/en/language.operators.comparison.php#language.operators.comparison.ternary&quot;&gt;Ternary Operator&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;?:&lt;/code&gt; &lt;a href=&quot;http://php.net/manual/en/language.operators.comparison.php#language.operators.comparison.ternary&quot;&gt;삼항 연산자&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="13d4ef41a26bd43ec016dd4b1daf167aecf22b33" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;??&lt;/code&gt;&lt;a href=&quot;http://php.net/manual/en/migration71.new-features.php#migration71.new-features.nullable-types&quot;&gt;Null Coalesce Operator&lt;/a&gt; (since PHP 7)</source>
          <target state="translated">&lt;code&gt;??&lt;/code&gt; &lt;a href=&quot;http://php.net/manual/en/migration71.new-features.php#migration71.new-features.nullable-types&quot;&gt;Null Coalesce 연산자&lt;/a&gt; (PHP 7부터)</target>
        </trans-unit>
        <trans-unit id="3069a7e1bbf9eb79a5289a078a9d1d3c6d239992" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;?string&lt;/code&gt;&lt;code&gt;?int&lt;/code&gt;&lt;code&gt;?array&lt;/code&gt;&lt;code&gt;?bool&lt;/code&gt;&lt;code&gt;?float&lt;/code&gt;&lt;a href=&quot;http://php.net/manual/en/migration71.new-features.php#migration71.new-features.nullable-types&quot;&gt;Nullable return type declaration&lt;/a&gt; (since PHP 7.1)</source>
          <target state="translated">&lt;code&gt;?string&lt;/code&gt; &lt;code&gt;?int&lt;/code&gt; &lt;code&gt;?array&lt;/code&gt; &lt;code&gt;?bool&lt;/code&gt; &lt;code&gt;?float&lt;/code&gt; &lt;a href=&quot;http://php.net/manual/en/migration71.new-features.php#migration71.new-features.nullable-types&quot;&gt;nullable 리턴 형 선언&lt;/a&gt; (PHP 7.1 이후)</target>
        </trans-unit>
        <trans-unit id="fe520b3af71ef64348218bde9e00a9a1a16e1756" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@&lt;/code&gt;&lt;a href=&quot;http://secure.php.net/manual/en/language.operators.errorcontrol.php&quot;&gt;Error Control Operators&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;@&lt;/code&gt; &lt;a href=&quot;http://secure.php.net/manual/en/language.operators.errorcontrol.php&quot;&gt;오류 제어 연산자&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="00562ea1c4bc043abda35fcfdfbb06bf2b30bfe0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[]&lt;/code&gt;&lt;a href=&quot;http://secure.php.net/manual/en/language.types.array.php&quot;&gt;Arrays&lt;/a&gt; (short syntax since PHP 5.4)</source>
          <target state="translated">&lt;code&gt;[]&lt;/code&gt; &lt;a href=&quot;http://secure.php.net/manual/en/language.types.array.php&quot;&gt;배열&lt;/a&gt; (PHP 5.4 이후 짧은 구문)</target>
        </trans-unit>
        <trans-unit id="6620e7ea4c55157d97634a765822e553018aa109" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\&lt;/code&gt;&lt;a href=&quot;http://php.net/namespaces&quot;&gt;Namespaces&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;\&lt;/code&gt;&lt;a href=&quot;http://php.net/namespaces&quot;&gt;Namespaces&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="551f8384dc36ab07ecb51b4a9bd557bcc936ce52" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;^&lt;/code&gt;&lt;a href=&quot;http://secure.php.net/manual/en/language.operators.bitwise.php&quot;&gt;Bitwise Operators&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;^&lt;/code&gt; &lt;a href=&quot;http://secure.php.net/manual/en/language.operators.bitwise.php&quot;&gt;비트 연산자&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0326fc3502d304e03367a2a93da29c6b129c3261" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;_&lt;/code&gt;&lt;strong&gt;&lt;a href=&quot;http://php.net/function.gettext#refsect1-function.gettext-notes&quot;&gt;Alias for gettext()&lt;/a&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;code&gt;_&lt;/code&gt; &lt;strong&gt;&lt;a href=&quot;http://php.net/function.gettext#refsect1-function.gettext-notes&quot;&gt;gettext ()의 별칭&lt;/a&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="76f9a89a486642f57768f1d1b0f187e9c4da9434" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__CLASS__&lt;/code&gt;: The class name. (Added in PHP 4.3.0) As of PHP 5 this constant returns the class name as it was declared (case-sensitive). In PHP 4 its value is always lowercased. The class name includes the namespace it was declared in (e.g. &lt;code&gt;Foo\Bar&lt;/code&gt;). Note that as of PHP 5.4 &lt;code&gt;__CLASS__&lt;/code&gt; works also in traits. When used in a trait method, &lt;code&gt;__CLASS__&lt;/code&gt; is the name of the class the trait is used in.</source>
          <target state="translated">&lt;code&gt;__CLASS__&lt;/code&gt; : 클래스 이름 (PHP 4.3.0에서 추가됨) PHP 5부터이 상수는 선언 된 클래스 이름 (대소 문자 구분)을 반환합니다. PHP 4에서는 값이 항상 소문자입니다. 클래스 이름에는 선언 된 네임 스페이스가 포함됩니다 (예 : &lt;code&gt;Foo\Bar&lt;/code&gt; ). PHP 5.4부터 &lt;code&gt;__CLASS__&lt;/code&gt; 는 특성에서도 작동합니다. 특성 메소드에서 사용되는 경우 &lt;code&gt;__CLASS__&lt;/code&gt; 는 특성이 사용되는 클래스의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="5235affaba088b9ac0a0b938768f1a7f5a212353" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__DIR__&lt;/code&gt;: The directory of the file. If used inside an include, the directory of the included file is returned. This is equivalent to &lt;code&gt;dirname(__FILE__)&lt;/code&gt;. This directory name does not have a trailing slash unless it is the root directory. (Added in PHP 5.3.0.)</source>
          <target state="translated">&lt;code&gt;__DIR__&lt;/code&gt; : 파일의 디렉토리 포함 내부에서 사용되면 포함 된 파일의 디렉토리가 리턴됩니다. 이것은 &lt;code&gt;dirname(__FILE__)&lt;/code&gt; 과 같습니다. 이 디렉토리 이름은 루트 디렉토리가 아닌 한 슬래시가 없습니다. (PHP 5.3.0에서 추가됨)</target>
        </trans-unit>
        <trans-unit id="cbfdd0cb63dffd2e39acb44d11bea29d8b9d698b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__FILE__&lt;/code&gt;: The full path and filename of the file. If used inside an include, the name of the included file is returned. Since PHP 4.0.2, &lt;code&gt;__FILE__&lt;/code&gt; always contains an absolute path with symlinks resolved whereas in older versions it contained relative path under some circumstances.</source>
          <target state="translated">&lt;code&gt;__FILE__&lt;/code&gt; : 파일의 전체 경로와 파일 이름. 포함 내부에서 사용되면 포함 된 파일의 이름이 반환됩니다. PHP 4.0.2부터 &lt;code&gt;__FILE__&lt;/code&gt; 에는 항상 심볼릭 링크가 해결 된 절대 경로가 포함되어 있지만 이전 버전에서는 일부 환경에서 상대 경로가 포함되었습니다.</target>
        </trans-unit>
        <trans-unit id="db1be3e8bdf28ac16e34525ad387e001af30023c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__FUNCTION__&lt;/code&gt;: The function name. (Added in PHP 4.3.0) As of PHP 5 this constant returns the function name as it was declared (case-sensitive). In PHP 4 its value is always lowercased.</source>
          <target state="translated">&lt;code&gt;__FUNCTION__&lt;/code&gt; : 함수 이름입니다. (PHP 4.3.0에서 추가됨) PHP 5부터이 상수는 선언 된 함수 이름 (대소 문자 구분)을 반환합니다. PHP 4에서는 값이 항상 소문자입니다.</target>
        </trans-unit>
        <trans-unit id="ac27ed863d0e1a0ac07c85bc88cf3be9b6159ad5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__LINE__&lt;/code&gt;: The current line number of the file.</source>
          <target state="translated">&lt;code&gt;__LINE__&lt;/code&gt; : 파일의 현재 줄 번호.</target>
        </trans-unit>
        <trans-unit id="9f9505b76aa8d628d76e21c991c2566078707bc4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__METHOD__&lt;/code&gt;: The class method name. (Added in PHP 5.0.0) The method name is returned as it was declared (case-sensitive).</source>
          <target state="translated">&lt;code&gt;__METHOD__&lt;/code&gt; : 클래스 메서드 이름 (PHP 5.0.0에서 추가됨) 메소드 이름은 선언 된대로 (대소 문자 구분) 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="cb4f361b9ae9dfa747f67bf70b7fac4205bf6c5d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__NAMESPACE__&lt;/code&gt;: The name of the current namespace (case-sensitive). This constant is defined in compile-time (Added in PHP 5.3.0).</source>
          <target state="translated">&lt;code&gt;__NAMESPACE__&lt;/code&gt; : 현재 네임 스페이스의 이름 (대소 문자 구분). 이 상수는 컴파일 타임에 정의됩니다 (PHP 5.3.0에서 추가됨).</target>
        </trans-unit>
        <trans-unit id="5bd3e46393183fd7697700ccb2dd6f819474fde5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__TRAIT__&lt;/code&gt;: The trait name. (Added in PHP 5.4.0) As of PHP 5.4 this constant returns the trait as it was declared (case-sensitive). The trait name includes the namespace it was declared in (e.g. &lt;code&gt;Foo\Bar&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;__TRAIT__&lt;/code&gt; : 특성 이름. (PHP 5.4.0에서 추가됨) PHP 5.4부터이 상수는 특성을 선언 한대로 (대소 문자 구분) 반환합니다. 특성 이름에는 선언 된 네임 스페이스 (예 : &lt;code&gt;Foo\Bar&lt;/code&gt; )가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="3e2471a0826d0d3e3c9dd0aedc4fc84c8e26ae95" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;`&lt;/code&gt;&lt;a href=&quot;http://php.net/manual/en/language.operators.execution.php&quot;&gt;Execution Operator&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;`&lt;/code&gt; &lt;a href=&quot;http://php.net/manual/en/language.operators.execution.php&quot;&gt;실행 연산자&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f815d4c4bdc093509e2ee6e9cbf571a279b56e36" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;and&lt;/code&gt; operator and &lt;code&gt;or&lt;/code&gt; operator have lower precedence than assignment operator &lt;code&gt;=&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;and&lt;/code&gt; operator 및 &lt;code&gt;or&lt;/code&gt; operator는 assignment operator &lt;code&gt;=&lt;/code&gt; 보다 우선 순위가 낮습니다.</target>
        </trans-unit>
        <trans-unit id="95334f1bef7a29b6fb70626da90260a3f9eac917" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;if ($a == '5')&lt;/code&gt; - will evaluate to true, because while comparing this both value PHP internally convert that string value into integer and then compare both values</source>
          <target state="translated">&lt;code&gt;if ($a == '5')&lt;/code&gt; -이 두 값을 비교하는 동안 PHP는 내부적으로 문자열 값을 정수로 변환 한 다음 두 값을 비교하기 때문에 true로 평가됩니다</target>
        </trans-unit>
        <trans-unit id="2b119dcf3dd4551b6eb196b4427c968415b683a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;if ($a == 5)&lt;/code&gt;  - will evaluate to true</source>
          <target state="translated">&lt;code&gt;if ($a == 5)&lt;/code&gt; 평가됩니다</target>
        </trans-unit>
        <trans-unit id="b3ee2108853b7a22564b868a842ea33e463cc821" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;if ($a === '5')&lt;/code&gt; - will evaluate to false, because value is 5, but this value 5 is not an integer.</source>
          <target state="translated">&lt;code&gt;if ($a === '5')&lt;/code&gt; -값이 5이지만이 값 5는 정수가 아니기 때문에 false로 평가됩니다.</target>
        </trans-unit>
        <trans-unit id="46b683978d8ab2b721c073093668e2c93220e823" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;if ($a === 5)&lt;/code&gt; - will evaluate to true</source>
          <target state="translated">&lt;code&gt;if ($a === 5)&lt;/code&gt; 평가됩니다</target>
        </trans-unit>
        <trans-unit id="92123cccd9603eee85fb8c0b6e7d9a9c9f9b32d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;instanceof&lt;/code&gt; is used to determine whether a PHP variable is an instantiated object of a certain class.</source>
          <target state="translated">&lt;code&gt;instanceof&lt;/code&gt; 는 PHP 변수가 특정 클래스의 인스턴스화 된 객체인지 확인하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="42ecbd825fb8b79c9c411f10de1dba42154c177d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{}&lt;/code&gt; Curly braces</source>
          <target state="translated">&lt;code&gt;{}&lt;/code&gt; 중괄호</target>
        </trans-unit>
        <trans-unit id="31b521c0ef652c463ae010a0ab138d218ca9f945" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;|&lt;/code&gt;&lt;a href=&quot;http://secure.php.net/manual/en/language.operators.bitwise.php&quot;&gt;Bitwise Operators&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;|&lt;/code&gt; &lt;a href=&quot;http://secure.php.net/manual/en/language.operators.bitwise.php&quot;&gt;비트 연산자&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8f97a08980429242aa82cfa2147f734518c56d6d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;||&lt;/code&gt;&lt;a href=&quot;http://secure.php.net/manual/en/language.operators.logical.php&quot;&gt;Logical Operators&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;||&lt;/code&gt; &lt;a href=&quot;http://secure.php.net/manual/en/language.operators.logical.php&quot;&gt;논리 연산자&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fe581da8138184215f8801769f237cabec2ca755" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;~&lt;/code&gt;&lt;a href=&quot;http://secure.php.net/manual/en/language.operators.bitwise.php&quot;&gt;Bitwise Operators&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;~&lt;/code&gt; &lt;a href=&quot;http://secure.php.net/manual/en/language.operators.bitwise.php&quot;&gt;비트 연산자&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="599a9c36a10a02df9bded37de71dce467e55ed67" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;! $a :&lt;/strong&gt; TRUE if $a is not TRUE.</source>
          <target state="translated">&lt;strong&gt;!&lt;/strong&gt; &lt;strong&gt;$ a :&lt;/strong&gt; $ a가 TRUE가 아니면 TRUE.</target>
        </trans-unit>
        <trans-unit id="955edb8191e903a98238119ae88f4c8bd2892e0f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$a != $b :&lt;/strong&gt; TRUE if $a is not equal to $b after type juggling.</source>
          <target state="translated">&lt;strong&gt;$ a! = $ b :&lt;/strong&gt; 유형 저글링 후 $ a가 $ b와 같지 않으면 참입니다.</target>
        </trans-unit>
        <trans-unit id="583ea82ff382ffcbff639da82eb6f95055ba0016" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$a != $b&lt;/strong&gt; : TRUE if $a is not equal to $b.</source>
          <target state="translated">&lt;strong&gt;$ a! = $ b&lt;/strong&gt; : $ a가 $ b와 같지 않으면 참입니다.</target>
        </trans-unit>
        <trans-unit id="00e2ef064bcc62ced58c4dd02d605895a860b276" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$a !== $b   :&lt;/strong&gt; TRUE if $a is not equal to $b, or they are not of the same type.</source>
          <target state="translated">&lt;strong&gt;$ a! == $ b :&lt;/strong&gt; $ a가 $ b와 같지 않거나 같은 유형이 아닌 경우 참입니다.</target>
        </trans-unit>
        <trans-unit id="a1fc7882b775ecaa949d6cfa1d05fc1f29a93c5b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$a !== $b&lt;/strong&gt; : TRUE if $a is not identical to $b.</source>
          <target state="translated">&lt;strong&gt;$ a! == $ b&lt;/strong&gt; : $ a가 $ b와 동일하지 않으면 참입니다.</target>
        </trans-unit>
        <trans-unit id="60b72826865eac38ba84de8475f99d22f5a5cce0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$a % $b&lt;/strong&gt; : Remainder of $a divided by $b.</source>
          <target state="translated">&lt;strong&gt;$ a % $ b&lt;/strong&gt; : $ a를 $ b로 나눈 나머지.</target>
        </trans-unit>
        <trans-unit id="720c31b44e79f276bf20b658d8c91bf64df00f72" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$a %= $b&lt;/strong&gt; : Same as $a = $a % $b</source>
          <target state="translated">&lt;strong&gt;$ a % = $ b&lt;/strong&gt; : $ a = $ a % $ b와 동일</target>
        </trans-unit>
        <trans-unit id="4ea41c2a80f0ce99d4307bf6065a31ed94b45b87" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$a &amp;amp; $b&lt;/strong&gt; : Bits that are set in both $a and $b are set.</source>
          <target state="translated">&lt;strong&gt;$ a &amp;amp; $ b&lt;/strong&gt; : &lt;strong&gt;$ a 및 $ b&lt;/strong&gt; 모두에 설정된 비트가 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="a31b4b879ff64082ee5c09aa5ce08a9bd9fc3b3c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$a &amp;amp;&amp;amp; $b :&lt;/strong&gt; TRUE if both $a and $b are TRUE.</source>
          <target state="translated">&lt;strong&gt;$ a &amp;amp;&amp;amp; $ b :&lt;/strong&gt; $ a와 $ b가 모두 참이면 참입니다.</target>
        </trans-unit>
        <trans-unit id="f70947a5436125e25614db51b46d7b3df94bcbfa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$a &amp;amp;= $b&lt;/strong&gt; : Same as $a = $a &amp;amp; $b</source>
          <target state="translated">&lt;strong&gt;$ a &amp;amp; = $ b&lt;/strong&gt; : $ a = $ a &amp;amp; $ b와 동일</target>
        </trans-unit>
        <trans-unit id="cb1bbee58a0027b7bde3478a4a38ea18584e9e31" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$a &amp;gt; $b&lt;/strong&gt; : TRUE if $a is strictly greater than $b.</source>
          <target state="translated">&lt;strong&gt;$ a&amp;gt; $ b&lt;/strong&gt; : $ a가 $ b보다 크면 TRUE입니다.</target>
        </trans-unit>
        <trans-unit id="29f69a9317d2e322bda7e7eb5ff211d9b02a1957" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$a &amp;gt;&amp;gt; $b&lt;/strong&gt; : Shift the bits of $a $b steps to the right (each step means &quot;divide by two&quot;)</source>
          <target state="translated">&lt;strong&gt;$ a &amp;gt;&amp;gt; $ b&lt;/strong&gt; : $ a $ b 단계의 비트를 오른쪽으로 이동합니다 (각 단계는 &quot;2로 나누기&quot;를 의미합니다)</target>
        </trans-unit>
        <trans-unit id="f55ce30f980963036fa97d2ba83abfa12a0b93c8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$a &amp;gt;&amp;gt;= $b&lt;/strong&gt; : Same as $a = $a &amp;gt;&amp;gt; $b</source>
          <target state="translated">&lt;strong&gt;$ a &amp;gt;&amp;gt; = $ b&lt;/strong&gt; : $ a = $ a &amp;gt;&amp;gt; $ b와 동일</target>
        </trans-unit>
        <trans-unit id="4d00637fe2be2fd360274eeb9eb5398d92ffee81" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$a &amp;gt;= $b&lt;/strong&gt; : TRUE if $a is greater than or equal to $b.</source>
          <target state="translated">&lt;strong&gt;$ a&amp;gt; = $ b&lt;/strong&gt; : &lt;strong&gt;$ a가 $ b&lt;/strong&gt; 보다 크거나 같으면 참입니다.</target>
        </trans-unit>
        <trans-unit id="cf231033d1c7917efedf546ed20a8744c8bbb253" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$a &amp;lt; $b&lt;/strong&gt; : TRUE if $a is strictly less than $b.</source>
          <target state="translated">&lt;strong&gt;$ a &amp;lt;$ b&lt;/strong&gt; : $ a가 $ b보다 작 으면 참입니다.</target>
        </trans-unit>
        <trans-unit id="cf2f5379cb4caa075c608a3c4486ce5fc28c86cd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$a &amp;lt;&amp;gt; $b :&lt;/strong&gt; TRUE if $a is not equal to $b after type juggling.</source>
          <target state="translated">&lt;strong&gt;$ a &amp;lt;&amp;gt; $ b :&lt;/strong&gt; 저글링 유형 후 $ a가 $ b와 같지 않으면 참입니다.</target>
        </trans-unit>
        <trans-unit id="d0e24f6d525b09750163a634e74a9d0c1b040d5c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$a &amp;lt;&amp;gt; $b&lt;/strong&gt; : TRUE if $a is not equal to $b.</source>
          <target state="translated">&lt;strong&gt;$ a &amp;lt;&amp;gt; $ b&lt;/strong&gt; : $ a가 $ b와 같지 않으면 참입니다.</target>
        </trans-unit>
        <trans-unit id="65506418d88c3e2d37fb6b91606f5ea5facd276d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$a &amp;lt;&amp;lt; $b&lt;/strong&gt; : Shift the bits of $a $b steps to the left (each step means &quot;multiply by two&quot;)</source>
          <target state="translated">&lt;strong&gt;$ a &amp;lt;&amp;lt; $ b&lt;/strong&gt; : $ a $ b 단계의 비트를 왼쪽으로 옮깁니다 (각 단계는 &quot;2 곱하기&quot;를 의미합니다)</target>
        </trans-unit>
        <trans-unit id="3f43a1cd275c9fa2d99f8039a8f4d8f6bf449357" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$a &amp;lt;&amp;lt;= $b&lt;/strong&gt; : Same as $a = $a &amp;lt;&amp;lt; $b</source>
          <target state="translated">&lt;strong&gt;$ a &amp;lt;&amp;lt; = $ b&lt;/strong&gt; : $ a = $ a &amp;lt;&amp;lt; $ b와 동일</target>
        </trans-unit>
        <trans-unit id="9561be35b589e9713f2754fa8c2d422b19ede11a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$a &amp;lt;= $b&lt;/strong&gt; : TRUE if $a is less than or equal to $b.</source>
          <target state="translated">&lt;strong&gt;$ a &amp;lt;= $ b&lt;/strong&gt; : $ a가 $ b보다 작거나 같으면 참입니다.</target>
        </trans-unit>
        <trans-unit id="9aa73731ccf9c7a81cdb22010aec69767417e285" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$a &amp;lt;=&amp;gt; $b&lt;/strong&gt; : An integer less than, equal to, or greater than zero when $a is respectively less than, equal to, or greater than $b. Available as of PHP 7.</source>
          <target state="translated">&lt;strong&gt;$ a &amp;lt;=&amp;gt; $ b&lt;/strong&gt; : $ a가 각각 $ b보다 작거나 같거나 같을 때 0보다 작거나 같거나 0보다 큰 정수. PHP 7부터 사용 가능합니다.</target>
        </trans-unit>
        <trans-unit id="c3f1e4182ffb1d0d9b2d2129deea575da63c068f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$a * $b&lt;/strong&gt; : Product of $a and $b.</source>
          <target state="translated">&lt;strong&gt;$ a * $ b&lt;/strong&gt; : $ a와 $ b의 곱.</target>
        </trans-unit>
        <trans-unit id="d33e4598b8bef6c3b45717e4b99c4e30d48bc495" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$a ** $b&lt;/strong&gt; : Result of raising $a to the $b'th power (introduced in PHP 5.6)</source>
          <target state="translated">&lt;strong&gt;$ a ** $ b&lt;/strong&gt; : &lt;strong&gt;$ a를 $ b의&lt;/strong&gt; 제곱으로 올린 결과 (PHP 5.6에서 도입)</target>
        </trans-unit>
        <trans-unit id="3ec8302278fed692595a4b4f194311f6c00ea9ed" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$a **= $b&lt;/strong&gt; : Same as $a = $a ** $b</source>
          <target state="translated">&lt;strong&gt;$ a ** = $ b&lt;/strong&gt; : $ a = $ a ** $ b와 동일</target>
        </trans-unit>
        <trans-unit id="2e589312eb3646f517ada1606a31418e7e19b40d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$a *= $b&lt;/strong&gt; : Same as $a = $a * $b</source>
          <target state="translated">&lt;strong&gt;$ a * = $ b&lt;/strong&gt; : $ a = $ a * $ b와 동일</target>
        </trans-unit>
        <trans-unit id="3fa5dd25b0a6853d1f8ce2a305648a3b73ca667a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$a + $b&lt;/strong&gt; : Sum of $a and $b.</source>
          <target state="translated">&lt;strong&gt;$ a + $ b&lt;/strong&gt; : $ a와 $ b의 합.</target>
        </trans-unit>
        <trans-unit id="179d0831f29c67b208972815098c0e33feb59041" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$a + $b&lt;/strong&gt; : Union of $a and $b.</source>
          <target state="translated">&lt;strong&gt;$ a + $ b&lt;/strong&gt; : $ a와 $ b의 조합</target>
        </trans-unit>
        <trans-unit id="73e820866297c468d7c1403a31a7e19e6a571114" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$a += $b&lt;/strong&gt; : Same as $a = $a + $b</source>
          <target state="translated">&lt;strong&gt;$ a + = $ b&lt;/strong&gt; : $ a = $ a + $ b와 동일</target>
        </trans-unit>
        <trans-unit id="4675f045290fa7a0478fe10d4085fbd9249eb1ec" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$a - $b&lt;/strong&gt; : Difference of $a and $b.</source>
          <target state="translated">&lt;strong&gt;$&lt;/strong&gt; a- &lt;strong&gt;$ b&lt;/strong&gt; : $ a와 $ b의 차이.</target>
        </trans-unit>
        <trans-unit id="a8bbc74dfb95cca038219e62e75c6b03f73b8861" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$a -= $b&lt;/strong&gt; : Same as $a = $a - $b</source>
          <target state="translated">&lt;strong&gt;$&lt;/strong&gt; a- &lt;strong&gt;= $ b&lt;/strong&gt; : &lt;strong&gt;$ a = $ a-$ b&lt;/strong&gt; 와 동일</target>
        </trans-unit>
        <trans-unit id="9f2442658f0e5c56372460e6bf8509d09b3e9a2c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$a . $b&lt;/strong&gt; : Concatenation of $a and $b.</source>
          <target state="translated">&lt;strong&gt;$ a.&lt;/strong&gt; &lt;strong&gt;$ b&lt;/strong&gt; : $ a와 $ b의 연결.</target>
        </trans-unit>
        <trans-unit id="7946b0c477eb5e95b34d0725218786c3c5533101" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$a .= $b&lt;/strong&gt; : Same as $a = $a . $b</source>
          <target state="translated">&lt;strong&gt;$ a. = $ b&lt;/strong&gt; : &lt;strong&gt;$ a = $ a&lt;/strong&gt; 와 동일합니다. $ b</target>
        </trans-unit>
        <trans-unit id="ce56deb8a68ef52d875888b48e23047e7b7849f2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$a / $b&lt;/strong&gt; : Quotient of $a and $b.</source>
          <target state="translated">&lt;strong&gt;$ a / $ b&lt;/strong&gt; : $ a와 $ b의 몫.</target>
        </trans-unit>
        <trans-unit id="24305b39d6e7107b6387c6616d396714a686c78f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$a /= $b&lt;/strong&gt; : Same as $a = $a / $b</source>
          <target state="translated">&lt;strong&gt;$ a / = $ b&lt;/strong&gt; : $ a = $ a / $ b와 동일</target>
        </trans-unit>
        <trans-unit id="0d5e35c27d1ffc2ea1cb416120d21cae3272590f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$a = $b&lt;/strong&gt; : The value of $b is assigned to $a</source>
          <target state="translated">&lt;strong&gt;$ a = $ b&lt;/strong&gt; : &lt;strong&gt;$ b&lt;/strong&gt; 의 값은 $ a에 할당됩니다</target>
        </trans-unit>
        <trans-unit id="cf32777ea5dfd28ff12cc6f8f9e63a8a92bddf1f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$a == $b :&lt;/strong&gt; TRUE if $a is equal to $b after type juggling.</source>
          <target state="translated">&lt;strong&gt;$ a == $ b :&lt;/strong&gt; 저글링 유형 후 $ a가 $ b와 같으면 참입니다.</target>
        </trans-unit>
        <trans-unit id="1d159487b8b14de4d2cfe28e785be1e955ac5c5d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$a == $b&lt;/strong&gt; : TRUE if $a and $b have the same key/value pairs.</source>
          <target state="translated">&lt;strong&gt;$ a == $ b&lt;/strong&gt; : $ a와 $ b에 동일한 키 / 값 쌍이 있으면 참입니다.</target>
        </trans-unit>
        <trans-unit id="b4651c65250010a35b1d7dd86db7938701de7212" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$a === $b   :&lt;/strong&gt; TRUE if $a is equal to $b, and they are of the same type.</source>
          <target state="translated">&lt;strong&gt;$ a === $ b :&lt;/strong&gt; $ a가 $ b와 같고 유형이 같은 경우 TRUE입니다.</target>
        </trans-unit>
        <trans-unit id="dae00ef0f9b997c18ab208c8470bb36c781e4ece" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$a === $b&lt;/strong&gt; : TRUE if $a and $b have the same key/value pairs in the same order and of the same types.</source>
          <target state="translated">&lt;strong&gt;$ a === $ b&lt;/strong&gt; : $ a와 $ b가 동일한 순서와 유형으로 동일한 키 / 값 쌍을 갖는 경우 TRUE입니다.</target>
        </trans-unit>
        <trans-unit id="159517afe9bf0c8f686d7ac9957ec81f5acb1104" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$a ? $b : $c&lt;/strong&gt; : if $a return $b else return $c (&lt;a href=&quot;http://php.net/manual/en/language.operators.comparison.php#language.operators.comparison.ternary&quot;&gt;&lt;strong&gt;ternary operator&lt;/strong&gt;&lt;/a&gt;)</source>
          <target state="translated">&lt;strong&gt;$ a?&lt;/strong&gt; &lt;strong&gt;$ b : $ c&lt;/strong&gt; : $ a가 $ b를 반환하면 $ c를 반환 ( &lt;a href=&quot;http://php.net/manual/en/language.operators.comparison.php#language.operators.comparison.ternary&quot;&gt;&lt;strong&gt;삼항 연산자&lt;/strong&gt;&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="4192da2fc36e47c3207bbe2c00b7e23a154ba124" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$a ?? $c&lt;/strong&gt; : Same as $a ? $a : $c (&lt;a href=&quot;http://php.net/manual/en/language.operators.comparison.php#language.operators.comparison.coalesce&quot;&gt;&lt;strong&gt;null coalescing operator&lt;/strong&gt;&lt;/a&gt; - requires PHP&amp;gt;=7)</source>
          <target state="translated">&lt;strong&gt;$ a ??&lt;/strong&gt; &lt;strong&gt;$ c&lt;/strong&gt; : &lt;strong&gt;$ a&lt;/strong&gt; 와 동일? $ a : $ c ( &lt;a href=&quot;http://php.net/manual/en/language.operators.comparison.php#language.operators.comparison.coalesce&quot;&gt;&lt;strong&gt;null 병합 연산자&lt;/strong&gt;&lt;/a&gt; -PHP&amp;gt; = 7 필요)</target>
        </trans-unit>
        <trans-unit id="338264d1b648ea92d10106e40aba11c441dc4f46" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$a ^ $b&lt;/strong&gt; : Bits that are set in $a or $b but not both are set.</source>
          <target state="translated">&lt;strong&gt;$ a ^ $ b&lt;/strong&gt; : $ a 또는 $ b에 설정되었지만 둘 다 설정되지 않은 비트.</target>
        </trans-unit>
        <trans-unit id="8db0561cc74aac14b0b5476212fbf890cc94c52b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$a ^= $b&lt;/strong&gt; : Same as $a = $a ^ $b</source>
          <target state="translated">&lt;strong&gt;$ a ^ = $ b&lt;/strong&gt; : $ a = $ a ^ $ b와 동일</target>
        </trans-unit>
        <trans-unit id="d37c6785c394972b1b338d085fadb5295b81ca65" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$a and $b :&lt;/strong&gt; TRUE if both $a and $b are TRUE.</source>
          <target state="translated">&lt;strong&gt;$ a 및 $ b :&lt;/strong&gt; $ a 및 $ b가 모두 TRUE이면 TRUE입니다.</target>
        </trans-unit>
        <trans-unit id="1e9c1463803066607f39c7713f3e6ba3f8d11cdf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$a or $b :&lt;/strong&gt; TRUE if either $a or $b is TRUE.</source>
          <target state="translated">&lt;strong&gt;$ a 또는 $ b :&lt;/strong&gt; $ a 또는 $ b가 TRUE이면 TRUE입니다.</target>
        </trans-unit>
        <trans-unit id="ebbebca5ce3039692ff7928d76684516b8be2f11" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$a xor $b :&lt;/strong&gt; TRUE if either $a or $b is TRUE, but not both.</source>
          <target state="translated">&lt;strong&gt;$ a xor $ b :&lt;/strong&gt; $ a 또는 $ b가 TRUE이지만 둘 다가 아닌 경우 TRUE입니다.</target>
        </trans-unit>
        <trans-unit id="9fe78deb98faa59797de25c73a75b0d286f3abcd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$a | $b&lt;/strong&gt; : Bits that are set in either $a or $b are set.</source>
          <target state="translated">&lt;strong&gt;$ a |&lt;/strong&gt; &lt;strong&gt;$ b&lt;/strong&gt; : $ a 또는 $ b에 설정된 비트가 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="49b07e8c9cdf279ad33a768c5a0c6d7b7a7cb4e8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$a |= $b&lt;/strong&gt; : Same as $a = $a | $b</source>
          <target state="translated">&lt;strong&gt;$ a | = $ b&lt;/strong&gt; : &lt;strong&gt;$ a = $ a&lt;/strong&gt; 와 동일 | $ b</target>
        </trans-unit>
        <trans-unit id="fb8d5a04d7b9410cea85a9414323e938ae54653f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$a || $b :&lt;/strong&gt; TRUE if either $a or $b is TRUE.</source>
          <target state="translated">&lt;strong&gt;$ a ||&lt;/strong&gt; &lt;strong&gt;$ b :&lt;/strong&gt; $ a 또는 $ b가 TRUE이면 TRUE입니다.</target>
        </trans-unit>
        <trans-unit id="f931e64629b2cac7fbe8e408c3f78f41767b482a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$a++&lt;/strong&gt; : Returns $a, then increments $a by one.</source>
          <target state="translated">&lt;strong&gt;$ a ++&lt;/strong&gt; : $ a를 반환 한 다음 $ a를 1 씩 증가시킵니다.</target>
        </trans-unit>
        <trans-unit id="f6712687ffaa07c5c9abba51f24292c5e02f7a15" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;$a--&lt;/strong&gt; : Returns $a, then decrements $a by one.</source>
          <target state="translated">&lt;strong&gt;$ a--&lt;/strong&gt; : $ a를 반환 한 다음 $ a를 1 씩 줄입니다.</target>
        </trans-unit>
        <trans-unit id="84aed8e0269f024183775b6af8b6e50e79f24ce1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&amp;amp;&lt;/strong&gt; usually checks bits that are set in both $a and $b are set.</source>
          <target state="translated">&lt;strong&gt;&amp;amp;는&lt;/strong&gt; 보통 $ a와 $ b 모두에 설정된 비트가 설정되어 있는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="7be472541313fec9a3ec24e057f2eeb719679e25" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;++$a&lt;/strong&gt; : Increments $a by one, then returns $a.</source>
          <target state="translated">&lt;strong&gt;++ $ a&lt;/strong&gt; : $ a 씩 하나씩 증가시킨 다음 $ a를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="b02c4c5a1c00bb0982d2ab84f1f59d5d7f29bcd1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;-$a&lt;/strong&gt; : Opposite of $a.</source>
          <target state="translated">&lt;strong&gt;-$ a&lt;/strong&gt; : &lt;strong&gt;$ a의&lt;/strong&gt; 반대.</target>
        </trans-unit>
        <trans-unit id="435041dc79ada8540924cdd20361a54f6499045c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--$a&lt;/strong&gt; : Decrements $a by one, then returns $a.</source>
          <target state="translated">&lt;strong&gt;-$ a&lt;/strong&gt; : $ a를 1 씩 줄인 다음 $ a를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="03e2999d7d1fe8e36e0849f73ec52f41b8bb90f8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;1) Single Quote Strings:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;1) 작은 따옴표 문자열 :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5419894189be920cdcf99b23b8eb8b792f568faa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;2) Double Quote Strings:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;2) 큰 따옴표 문자열 :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="71ca065dec1e26480e93fe1d5bc2bdce48488230" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;3) Heredoc:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;3) Heredoc :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="792f6e4a27ed68cd5e728786f234e13ebb2b41b4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;4) Nowdoc (since PHP 5.3.0):&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;4) Nowdoc (PHP 5.3.0부터) :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2de5f90f70cd0b2b62b100939dda7470fc2b5d2e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;a href=&quot;http://codepad.org/5ZD3j0xb&quot;&gt;Live example&lt;/a&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;http://codepad.org/5ZD3j0xb&quot;&gt;라이브 예&lt;/a&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b96395a1dce0bb268fefc5bde3ec05d07a898a26" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;a href=&quot;http://php.net/manual/en/language.operators.increment.php&quot;&gt;Incrementing / Decrementing Operators&lt;/a&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;http://php.net/manual/en/language.operators.increment.php&quot;&gt;연산자 증가 / 감소&lt;/a&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d59bfcc13dd67afa7fc8f9028079b6a5222ad6ca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;a href=&quot;https://stackoverflow.com/questions/1968371/understanding-incrementing&quot;&gt;Understanding Incrementing&lt;/a&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;https://stackoverflow.com/questions/1968371/understanding-incrementing&quot;&gt;증분 이해&lt;/a&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="78a203742b521feffadaf22089b55c7234ec551a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ANSWER:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ANSWER:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c1c82130acb6e7b96ccfaa38ae68645889c3944b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;As of PHP 7.1.0, return values can be marked as nullable by prefixing the type name with a question mark (?). This signifies that the function returns either the specified type or NULL.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;PHP 7.1.0부터 타입 이름 앞에 물음표 (?)를 붙여서 반환 값을 nullable로 표시 할 수 있습니다.&lt;/strong&gt; &lt;strong&gt;이는 함수가 지정된 유형 또는 NULL을 리턴 함을 나타냅니다.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8979f473a595992fccb54902b65d519a8190f8bd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ELABORATING:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ELABORATING:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4905e064b51c87a9e64466f301de9f5691beee56" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;FINAL POINT:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;최종 포인트 :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="16047fbce0838b416ac5edaa052dd7b67668db78" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Magic constants&lt;/strong&gt;: Although these are not just symbols but important part of this token family. There are eight magical constants that change depending on where they are used.</source>
          <target state="translated">&lt;strong&gt;마술 상수&lt;/strong&gt; : 이것들은 단순한 상징이 아니라이 토큰 패밀리의 중요한 부분입니다. 사용되는 위치에 따라 8 개의 마법 상수가 변경됩니다.</target>
        </trans-unit>
        <trans-unit id="407f91bf1c7f571966ceb1bb634986062bb24d30" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Null coalescing operator (??)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Null 통합 연산자 (??)&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="90ff99b5075f777f003a89611a809f44be84c3d9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;PHP &quot;&amp;amp;&quot; operator&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;PHP &quot;&amp;amp;&quot;연산자&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="30c2e4208aeb48cbb1652f224512112856dcc41b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;PHP Strings:&lt;/strong&gt;
PHP Strings can be specified in four ways not just two ways:</source>
          <target state="translated">&lt;strong&gt;PHP 문자열 :&lt;/strong&gt; PHP 문자열은 두 가지 방법이 아닌 네 가지 방법으로 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c8f50df1ddb5574b8312113464b6da8041aea481" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;QUESTION:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;QUESTION:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c587a1bb9ca563541cf77bb86482fc8e3fa10e85" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Question&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;Question&lt;/strong&gt;:</target>
        </trans-unit>
        <trans-unit id="dc1f96ff4b5c4c345c12336126290b5d20bc0b16" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reason:&lt;/strong&gt; Above Example &lt;code&gt;$a&lt;/code&gt; is a object of the &lt;code&gt;mclass&lt;/code&gt; so use only a &lt;code&gt;mclass&lt;/code&gt; data not instance of with the &lt;code&gt;sclass&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;이유 :&lt;/strong&gt; 위의 예 &lt;code&gt;$a&lt;/code&gt; 는 &lt;code&gt;mclass&lt;/code&gt; 의 객체이므로 &lt;code&gt;mclass&lt;/code&gt; 와 함께 인스턴스가 아닌 mclass 데이터 만 사용하십시오 &lt;code&gt;sclass&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cf8308e79a74758f6a22cb274de402dde7ef640b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Second example&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;두 번째 예&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7a222243be16d5da1c7aac6a732d8f0b59c3212d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Spaceship Operator &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt;&lt;/strong&gt; (Added in PHP 7)</source>
          <target state="translated">&lt;strong&gt;우주선 연산자 &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; &lt;/strong&gt; (PHP 7에 추가됨)</target>
        </trans-unit>
        <trans-unit id="0d551dd14491b761d0ec603676b95fe32e0764a4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Stack Overflow Posts:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;스택 오버플로 게시물 :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2c3828e3ba8c1fc6ffa0dfae59fef398b94b9a73" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Three DOTS as Splat Operator (...)&lt;/strong&gt; (since PHP 5.6)</source>
          <target state="translated">&lt;strong&gt;Splat 연산자로서의 세 가지 DOTS (...)&lt;/strong&gt; (PHP 5.6부터)</target>
        </trans-unit>
        <trans-unit id="65900c0d319a909ecf9dc53c1ce2c380ccdf8373" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;What should I do here?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;여기서 무엇을해야합니까?&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="beb731526b45cd7e2d146706f2dd952e1005b579" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;~ $a&lt;/strong&gt; : Bits that are set in $a are not set, and vice versa.</source>
          <target state="translated">&lt;strong&gt;~ $ a&lt;/strong&gt; : &lt;strong&gt;$ a&lt;/strong&gt; 에 설정된 비트는 설정되지 않으며 그 반대도 마찬가지입니다.</target>
        </trans-unit>
        <trans-unit id="0a7f9b30a0c3f33f4709641fdb7d576e4ddd6e36" translate="yes" xml:space="preserve">
          <source>?: operator (the 'Elvis operator') in PHP</source>
          <target state="translated">? : PHP의 연산자 ( 'Elvis 연산자')</target>
        </trans-unit>
        <trans-unit id="9229bf6d29f973f8ef73ec942f1e00db3c67c756" translate="yes" xml:space="preserve">
          <source>A few examples for better understanding</source>
          <target state="translated">더 나은 이해를위한 몇 가지 예</target>
        </trans-unit>
        <trans-unit id="cefd585636eb92717a12ee7f2a084a6941fc498b" translate="yes" xml:space="preserve">
          <source>A good practical application of using this operator would be in comparison type callbacks that are expected to return a zero, negative, or positive integer based on a three-way comparison between two values. The comparison function passed to &lt;a href=&quot;http://php.net/manual/en/function.usort.php&quot;&gt;&lt;code&gt;usort&lt;/code&gt;&lt;/a&gt; is one such example.</source>
          <target state="translated">이 연산자를 사용하는 실제 적용은 두 값 간의 3 방향 비교를 기반으로 0, 음수 또는 양의 정수를 반환 할 것으로 예상되는 비교 유형 콜백입니다. &lt;a href=&quot;http://php.net/manual/en/function.usort.php&quot;&gt; &lt;code&gt;usort&lt;/code&gt; 에&lt;/a&gt; 전달 된 비교 함수는 그러한 예 중 하나입니다.</target>
        </trans-unit>
        <trans-unit id="fecdf9247b9c389a0182c00bf306fc6bea99ab96" translate="yes" xml:space="preserve">
          <source>Added in PHP 7</source>
          <target state="translated">PHP 7에서 추가됨</target>
        </trans-unit>
        <trans-unit id="749ba84ffe7c934d20c7a7d822755ef40b735566" translate="yes" xml:space="preserve">
          <source>An overview of &lt;a href=&quot;http://php.net/manual/en/language.operators.php&quot;&gt;&lt;strong&gt;operators in PHP&lt;/strong&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;http://php.net/manual/en/language.operators.php&quot;&gt;&lt;strong&gt;PHP 연산자&lt;/strong&gt;&lt;/a&gt; 의 개요 :</target>
        </trans-unit>
        <trans-unit id="230a38b5de85cd8ebba22867e657f4addbf870f0" translate="yes" xml:space="preserve">
          <source>And now, to receive the same output as before, the &lt;code&gt;key&lt;/code&gt; value would be used in the arrays index:</source>
          <target state="translated">이제 이전과 동일한 출력을 받기 위해 &lt;code&gt;key&lt;/code&gt; 값이 배열 색인에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="78f725d64e9b255480b6afc099046bc3ee05c66b" translate="yes" xml:space="preserve">
          <source>And some words about last post</source>
          <target state="translated">그리고 마지막 게시물에 대한 몇 마디</target>
        </trans-unit>
        <trans-unit id="c87ffc4d0d7d1d1555436641c20d35c9dc0a0a42" translate="yes" xml:space="preserve">
          <source>Answer below</source>
          <target state="translated">아래 답변</target>
        </trans-unit>
        <trans-unit id="5c0e2e21cef0d3e07a258f7e57c7abc7926b0392" translate="yes" xml:space="preserve">
          <source>Are PHP short tags acceptable to use?</source>
          <target state="translated">PHP 짧은 태그를 사용할 수 있습니까?</target>
        </trans-unit>
        <trans-unit id="dc948bf7702ca0dd5d989b2d93cf1ba3a496cfa8" translate="yes" xml:space="preserve">
          <source>Arithmetic Operators:</source>
          <target state="translated">산술 연산자 :</target>
        </trans-unit>
        <trans-unit id="68eeb3cf38d1a23ed2dd8de89e52367df4c2503c" translate="yes" xml:space="preserve">
          <source>Array Operators:</source>
          <target state="translated">배열 연산자 :</target>
        </trans-unit>
        <trans-unit id="403d27b0b277b9dad913cf4b22fe84c1c21de2a2" translate="yes" xml:space="preserve">
          <source>Assignment Operators:</source>
          <target state="translated">할당 연산자 :</target>
        </trans-unit>
        <trans-unit id="fe63e68c651be08601ddca318c553d7f4c118c48" translate="yes" xml:space="preserve">
          <source>Backslash in PHP -- what does it mean?</source>
          <target state="translated">PHP의 백 슬래시-무슨 의미입니까?</target>
        </trans-unit>
        <trans-unit id="26965663ce24bc204bbadf51b89da9ba50516555" translate="yes" xml:space="preserve">
          <source>Before PHP 7 you would write...</source>
          <target state="translated">PHP 7 이전에는 다음과 같이 작성합니다.</target>
        </trans-unit>
        <trans-unit id="16ef355e7f915391810467951c40173360ffd897" translate="yes" xml:space="preserve">
          <source>Bitwise Operator</source>
          <target state="translated">비트 연산자</target>
        </trans-unit>
        <trans-unit id="946e2771b4c4f1d0f3de41419222166c3e1aea44" translate="yes" xml:space="preserve">
          <source>Bitwise Operators:</source>
          <target state="translated">비트 연산자 :</target>
        </trans-unit>
        <trans-unit id="cf41b6c97f086b566a13adc5d1cb1bf945ab6778" translate="yes" xml:space="preserve">
          <source>Blocks - curly braces/no curly braces?</source>
          <target state="translated">블록-중괄호 / 중괄호가 없습니까?</target>
        </trans-unit>
        <trans-unit id="0bed019990a84d5cdc2263ee30ffdc0e5a02aecc" translate="yes" xml:space="preserve">
          <source>C#'s null coalescing operator (??) in PHP</source>
          <target state="translated">PHP에서 C #의 null 통합 연산자 (??)</target>
        </trans-unit>
        <trans-unit id="4708ed4fa9ee4d8753848045c418e31d8d4a22ac" translate="yes" xml:space="preserve">
          <source>Can I use hashes for comments in PHP?</source>
          <target state="translated">PHP에서 주석에 해시를 사용할 수 있습니까?</target>
        </trans-unit>
        <trans-unit id="a7de33d110c915ab8e665813e77fafb72e84afb2" translate="yes" xml:space="preserve">
          <source>Comparison operators:</source>
          <target state="translated">비교 연산자 :</target>
        </trans-unit>
        <trans-unit id="1cae8019ca197b28ea8e711159eae84be53cfddc" translate="yes" xml:space="preserve">
          <source>Curly braces in string in PHP</source>
          <target state="translated">PHP에서 문자열의 중괄호</target>
        </trans-unit>
        <trans-unit id="e51f5fb2fbb16d09f2610657434b0c3e4c80f81a" translate="yes" xml:space="preserve">
          <source>Difference between &amp;amp; and &amp;amp;&amp;amp; in PHP</source>
          <target state="translated">PHP에서 &amp;amp;와 &amp;amp;&amp;amp;의 차이점</target>
        </trans-unit>
        <trans-unit id="7be324d3d97c57ff0cb7bc27d328781edb7045b7" translate="yes" xml:space="preserve">
          <source>Difference between period and comma when concatenating with echo versus return?</source>
          <target state="translated">에코 대 리턴으로 연결할 때 마침표와 쉼표의 차이점은 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="a91be50c9169601a129ef164efa658b66c66d915" translate="yes" xml:space="preserve">
          <source>Differences (&lt;em&gt;between a sequential and associative array&lt;/em&gt;):</source>
          <target state="translated">차이점 ( &lt;em&gt;순차 배열과 연관 배열&lt;/em&gt; ) :</target>
        </trans-unit>
        <trans-unit id="ce78c66dd47caeb4ee4327bd55357860f9bee17a" translate="yes" xml:space="preserve">
          <source>Double not (!!) operator in PHP</source>
          <target state="translated">PHP에서 이중 (!!) 연산자</target>
        </trans-unit>
        <trans-unit id="18386429ed75254ed5b9684ad4d250388b8473b8" translate="yes" xml:space="preserve">
          <source>Durring the declaration of an Associative Array, you don't only include the &lt;code&gt;value&lt;/code&gt; of what you want to put in the array, but you also put the index value (called the &lt;code&gt;key&lt;/code&gt;) which you want to use when calling the array in later parts of the code. The following syntax is used during it's declaration: &lt;code&gt;&quot;key&quot; =&amp;gt; &quot;value&quot;&lt;/code&gt;.</source>
          <target state="translated">연관 배열을 선언하는 동안 배열에 넣을 &lt;code&gt;value&lt;/code&gt; 을 포함 할뿐만 아니라 나중에 배열을 호출 할 때 사용할 인덱스 값 ( &lt;code&gt;key&lt;/code&gt; )도 넣습니다. 코드의. 선언하는 동안 &lt;code&gt;&quot;key&quot; =&amp;gt; &quot;value&quot;&lt;/code&gt; 구문이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="eed24c3eea4e43e07ca6cf93bab2d47d077cfa27" translate="yes" xml:space="preserve">
          <source>Each arguments of calculateNumbers() function pass through $params as an array when use &quot;&amp;hellip; &quot;.</source>
          <target state="translated">calculateNumbers () 함수의 각 인수는 &quot;&amp;hellip;&quot;를 사용할 때 $ params를 배열로 전달합니다.</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="8ef2e1210c47909b18d1b60b9c30a0116c39a246" translate="yes" xml:space="preserve">
          <source>Example 1:</source>
          <target state="translated">예 1 :</target>
        </trans-unit>
        <trans-unit id="e11895e8b0e4fd9700bfd1eef21691b78b345f1b" translate="yes" xml:space="preserve">
          <source>Example 2:</source>
          <target state="translated">예 2 :</target>
        </trans-unit>
        <trans-unit id="1d4166bf97179d81c42dccef3ab9d1594a5dec5d" translate="yes" xml:space="preserve">
          <source>Example 3:</source>
          <target state="translated">예 3 :</target>
        </trans-unit>
        <trans-unit id="03ec6da7759c5970d9f2e19e70d29ff9d6d694d2" translate="yes" xml:space="preserve">
          <source>Example 4:</source>
          <target state="translated">예 4 :</target>
        </trans-unit>
        <trans-unit id="0822a849422ef51702e4e4fb13c1092061af60a4" translate="yes" xml:space="preserve">
          <source>Example That you 'll love</source>
          <target state="translated">당신이 사랑할 것입니다 예</target>
        </trans-unit>
        <trans-unit id="77fe6b598a036b9845bfadbbc943b71dfc519cb1" translate="yes" xml:space="preserve">
          <source>Example with Clone</source>
          <target state="translated">클론을 사용한 예</target>
        </trans-unit>
        <trans-unit id="d5dabf0c74597cbd7f8286974b1016373bba62b9" translate="yes" xml:space="preserve">
          <source>Example with inheritance</source>
          <target state="translated">상속 예제</target>
        </trans-unit>
        <trans-unit id="52174e0cfa4e2cbbd0f28172026d13e09e286c8c" translate="yes" xml:space="preserve">
          <source>Examples for &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; Spaceship operator (PHP 7, Source: PHP Manual):</source>
          <target state="translated">&lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; 우주선 연산자의 예 (PHP 7, 출처 : PHP Manual) :</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="abc897209b2f98b7966665fa36a5eddbbc44f66d" translate="yes" xml:space="preserve">
          <source>For instance:</source>
          <target state="translated">예를 들어 :</target>
        </trans-unit>
        <trans-unit id="65859c28f90d01686d1011cfb9e708225e958f2b" translate="yes" xml:space="preserve">
          <source>Greater than &lt;code&gt;0&lt;/code&gt; when the left-hand operand is greater than the right-hand operand</source>
          <target state="translated">왼쪽 피연산자가 오른쪽 피연산자보다 큰 경우 &lt;code&gt;0&lt;/code&gt; 보다 큼</target>
        </trans-unit>
        <trans-unit id="a20d22ea233c95cab0a2cca61b39598d845badbe" translate="yes" xml:space="preserve">
          <source>How do the PHP equality (== double equals) and identity (=== triple equals) comparison operators differ?</source>
          <target state="translated">PHP 평등 (== double equals)과 항등 (=== triple equals) 비교 연산자는 어떻게 다릅니 까?</target>
        </trans-unit>
        <trans-unit id="e38233aefd871fc7a03a4438bc7cf67e19c274af" translate="yes" xml:space="preserve">
          <source>How does the &quot;&amp;amp;&quot; operator work in a PHP function?</source>
          <target state="translated">&quot;&amp;amp;&quot;연산자는 PHP 함수에서 어떻게 작동합니까?</target>
        </trans-unit>
        <trans-unit id="0e2a359c62d2893ac20cdd4e6a3632760ec240fb" translate="yes" xml:space="preserve">
          <source>How does the bitwise operator XOR ('^') work?</source>
          <target state="translated">비트 연산자 XOR ( '^')은 어떻게 작동합니까?</target>
        </trans-unit>
        <trans-unit id="2394528dc0bea39221d0030eb1b7cff1e2e00619" translate="yes" xml:space="preserve">
          <source>However, you must use &lt;code&gt;$apples--&lt;/code&gt;, since first, you want to display the current number of apples, and &lt;strong&gt;then&lt;/strong&gt; you want to subtract one from it.</source>
          <target state="translated">그러나 &lt;code&gt;$apples--&lt;/code&gt; 를 사용해야합니다. 먼저 현재 사과 수를 표시 &lt;strong&gt;한 다음&lt;/strong&gt; 사과를 빼려고합니다.</target>
        </trans-unit>
        <trans-unit id="9b53c820697201bb9f919a486c502c674d64561c" translate="yes" xml:space="preserve">
          <source>If put before the variable, the increment/decrement operation is done to the variable &lt;strong&gt;first&lt;/strong&gt; then the result is returned. If put after the variable, the variable is &lt;strong&gt;first&lt;/strong&gt; returned, then the increment/decrement operation is done.</source>
          <target state="translated">변수 앞에 놓으면 증가 / 감소 연산이 변수에 &lt;strong&gt;먼저 수행 된&lt;/strong&gt; 다음 결과가 리턴됩니다. 변수 뒤에 놓으면 변수가 &lt;strong&gt;먼저&lt;/strong&gt; 리턴되고 증가 / 감소 조작이 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="dae00f2b7f34dbcc7d4b25e7ea65b7b55bdf1d6e" translate="yes" xml:space="preserve">
          <source>If you have been pointed here by someone because you have asked such a question, please find the particular syntax below. The linked pages to the &lt;a href=&quot;http://php.net/manual/en/index.php&quot;&gt;PHP manual&lt;/a&gt; along with the linked questions will likely answer your question then. If so, you are encouraged to upvote the answer. This list is not meant as a substitute to the help others provided.</source>
          <target state="translated">그러한 질문을했기 때문에 누군가가 여기에서 지적한 경우 아래에서 특정 구문을 찾으십시오. &lt;a href=&quot;http://php.net/manual/en/index.php&quot;&gt;PHP 매뉴얼에&lt;/a&gt; 링크 된 페이지와 링크 된 질문이 있으면 귀하의 질문에 대한 답변이 될 것입니다. 그렇다면 대답을 찬성하는 것이 좋습니다. 이 목록은 다른 사람들이 제공 한 도움을 대신 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="451eaaf2eecc228a89e97505d6e6d5275451db51" translate="yes" xml:space="preserve">
          <source>If your particular token is not listed below, you might find it in the &lt;a href=&quot;http://secure.php.net/manual/en/tokens.php&quot;&gt;List of Parser Tokens&lt;/a&gt;.</source>
          <target state="translated">특정 토큰이 아래에 없으면 &lt;a href=&quot;http://secure.php.net/manual/en/tokens.php&quot;&gt;파서 토큰 목록&lt;/a&gt; 에서 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="937ef98cf4c77016adb983ad436b4c378fc8df0b" translate="yes" xml:space="preserve">
          <source>In PHP 5, we already have a ternary operator, which tests a value, and then returns the second element if that returns true and the third if it doesn't:</source>
          <target state="translated">PHP 5에는 이미 삼항 연산자가 있습니다.이 연산자는 값을 테스트 한 다음 true를 반환하면 두 번째 요소를 반환하고 그렇지 않으면 세 번째 요소를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="3c30755892650b2704a3e9257be901820f3bb4b2" translate="yes" xml:space="preserve">
          <source>In PHP 7 we additionally get the ?? operator which rather than indicating extreme confusion which is how I would usually use two question marks together instead allows us to chain together a string of values. Reading from left to right, the first value which exists and is not null is the value that will be returned.</source>
          <target state="translated">PHP 7에서는 추가로 ?? 연산자는 극단적 인 혼란을 나타내는 것이 아니라 보통 두 개의 물음표를 함께 사용하는 방법입니다. 대신에 우리는 일련의 값을 함께 묶을 수 있습니다. 왼쪽에서 오른쪽으로 읽을 때 존재하고 null이 아닌 첫 번째 값은 반환 될 값입니다.</target>
        </trans-unit>
        <trans-unit id="aaebbe1e86697d58c964216ae8655612c659f88d" translate="yes" xml:space="preserve">
          <source>In PHP, what does &quot;&amp;lt;&amp;lt;&amp;lt;&quot; represent?</source>
          <target state="translated">PHP에서 &quot;&amp;lt;&amp;lt;&amp;lt;&quot;는 무엇을 나타 냅니까?</target>
        </trans-unit>
        <trans-unit id="e55e103b7b30ea66386bf20d5b53787376304144" translate="yes" xml:space="preserve">
          <source>In most cases you will probably want to use &lt;strong&gt;&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;||&lt;/code&gt;&lt;/strong&gt;, which behave in a way known from languages like C, Java or JavaScript.</source>
          <target state="translated">대부분의 경우 &lt;strong&gt; &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; &lt;/strong&gt; 및 &lt;strong&gt; &lt;code&gt;||&lt;/code&gt; &lt;/strong&gt; C, Java 또는 JavaScript와 같은 언어에서 알려진 방식으로 작동합니다.</target>
        </trans-unit>
        <trans-unit id="af67ffc1b32387677e81f4b105c257760a1cf779" translate="yes" xml:space="preserve">
          <source>In the case above &lt;code&gt;++$i&lt;/code&gt; is used, since it is faster. &lt;code&gt;$i++&lt;/code&gt; would have the same results.</source>
          <target state="translated">위의 경우 더 빠르기 때문에 &lt;code&gt;++$i&lt;/code&gt; 가 사용됩니다. &lt;code&gt;$i++&lt;/code&gt; 결과는 같습니다.</target>
        </trans-unit>
        <trans-unit id="bcf155e82f03790704c842dd338991bb07d58894" translate="yes" xml:space="preserve">
          <source>Incrementing/Decrementing Operators:</source>
          <target state="translated">증가 / 감소 연산자 :</target>
        </trans-unit>
        <trans-unit id="edc1eac10f65cdff88e6ab117f0998ac23964856" translate="yes" xml:space="preserve">
          <source>Integers, Floats, Strings, Arrays &amp;amp; objects for Three-way comparison of variables.</source>
          <target state="translated">변수의 3 방향 비교를위한 정수, 부동 소수점, 문자열, 배열 및 객체.</target>
        </trans-unit>
        <trans-unit id="df65827376278eb9127b9d2661d7460718bc0e9d" translate="yes" xml:space="preserve">
          <source>Is there a difference between !== and != in PHP?</source>
          <target state="translated">PHP에서! ==와! =의 차이점이 있습니까?</target>
        </trans-unit>
        <trans-unit id="2ec0f11f5d0769ec34787bec9f2ddf23b726e6f7" translate="yes" xml:space="preserve">
          <source>Is there any difference between &quot;and&quot; and &quot;&amp;amp;&amp;amp;&quot; operators in PHP?</source>
          <target state="translated">PHP에서 &quot;and&quot;와 &quot;&amp;amp;&amp;amp;&quot;연산자 사이에 차이점이 있습니까?</target>
        </trans-unit>
        <trans-unit id="b9205a6b4262f7d151ac16cd1d527857972ad5ea" translate="yes" xml:space="preserve">
          <source>It used to be hard to find questions about operators and other syntax tokens.&amp;sup1;</source>
          <target state="translated">연산자와 다른 구문 토큰에 대한 질문을 찾기가 어려웠습니다 .&amp;sup1;</target>
        </trans-unit>
        <trans-unit id="e6bb96c8a33facc1487ccdb5f0b146f81554180d" translate="yes" xml:space="preserve">
          <source>Less than &lt;code&gt;0&lt;/code&gt; when the left-hand operand is less than the right-hand operand</source>
          <target state="translated">왼쪽 피연산자가 오른쪽 피연산자보다 작은 경우 &lt;code&gt;0&lt;/code&gt; 미만</target>
        </trans-unit>
        <trans-unit id="7516945e79aa523eccb878372b39a21c6a846398" translate="yes" xml:space="preserve">
          <source>Logical Operators:</source>
          <target state="translated">논리 연산자 :</target>
        </trans-unit>
        <trans-unit id="c200734be54f0d8d24609d679341d30abb998d89" translate="yes" xml:space="preserve">
          <source>Makes life more easier once we get used to it..(check example below carefully)</source>
          <target state="translated">우리가 익숙해지면 인생을 더 쉽게 만듭니다.</target>
        </trans-unit>
        <trans-unit id="99996ae3fe87eb2b9707f341877f1d7df4716763" translate="yes" xml:space="preserve">
          <source>Most people have already read the docs but didn't reliase the real world use case of these bitwise operators.</source>
          <target state="translated">대부분의 사람들은 이미 문서를 읽었지만 이러한 비트 연산자의 실제 사용 사례를 언급하지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="f4043d5ec852812f47115ba6796712c0228fcfe8" translate="yes" xml:space="preserve">
          <source>Not the catchiest name for an operator, but PHP 7 brings in the rather handy null coalesce so I thought I'd share an example.</source>
          <target state="translated">연산자의 가장 눈에 띄는 이름은 아니지만 PHP 7은 다소 편리한 null 병합을 제공하므로 예제를 공유한다고 생각했습니다.</target>
        </trans-unit>
        <trans-unit id="2c924e3088204ee77ba681f72be3444357932fca" translate="yes" xml:space="preserve">
          <source>Note</source>
          <target state="translated">Note</target>
        </trans-unit>
        <trans-unit id="f28b8bd9a051c1b22d384ae410c22c82df6bc704" translate="yes" xml:space="preserve">
          <source>Note that character variables can be incremented but not decremented and even so only plain ASCII characters (a-z and A-Z) are supported.</source>
          <target state="translated">문자 변수는 증가 할 수 있지만 감소 할 수 없으며 일반 ASCII 문자 (az 및 AZ) 만 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="443ba4fcbac94fc6cfac1e6a4f4b13672ae602a6" translate="yes" xml:space="preserve">
          <source>Note: Since January 2013, Stack Overflow &lt;a href=&quot;https://meta.stackexchange.com/questions/160100/a-new-search-engine-for-stack-exchange&quot;&gt;does support special characters&lt;/a&gt;. Just surround the search terms by quotes, e.g. &lt;a href=&quot;https://stackoverflow.com/search?q=%5Bphp%5D%20%22===%22%20vs%20%22==%22&quot;&gt;&lt;code&gt;[php] &quot;==&quot; vs &quot;===&quot;&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">참고 : 2013 년 1 월부터 Stack Overflow &lt;a href=&quot;https://meta.stackexchange.com/questions/160100/a-new-search-engine-for-stack-exchange&quot;&gt;는 특수 문자를 지원합니다&lt;/a&gt; . 검색어를 따옴표로 묶습니다 (예 : &lt;a href=&quot;https://stackoverflow.com/search?q=%5Bphp%5D%20%22===%22%20vs%20%22==%22&quot;&gt; &lt;code&gt;[php] &quot;==&quot; vs &quot;===&quot;&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d06dc73b02f6ce803c3875d9aacee4b8e021a8e8" translate="yes" xml:space="preserve">
          <source>Null Coalesce operator &quot;??&quot; (Added in PHP 7)</source>
          <target state="translated">Null Coalesce 연산자 &quot;??&quot; (PHP 7에 추가됨)</target>
        </trans-unit>
        <trans-unit id="afe173f15f5772c4119ccf257996c90e710bd6ae" translate="yes" xml:space="preserve">
          <source>Nullable return type declaration</source>
          <target state="translated">널 입력 가능 리턴 유형 선언</target>
        </trans-unit>
        <trans-unit id="2fd953dbf48f21b4675ed43e6fb4e7539de446e9" translate="yes" xml:space="preserve">
          <source>Once &lt;code&gt;z&lt;/code&gt; is reached &lt;code&gt;aa&lt;/code&gt; is next, and so on.</source>
          <target state="translated">&lt;code&gt;z&lt;/code&gt; 에 도달하면 &lt;code&gt;aa&lt;/code&gt; 가 다음에 계속됩니다.</target>
        </trans-unit>
        <trans-unit id="99b8bbb1c7d5441c29c6d0ffb205bb87d0514576" translate="yes" xml:space="preserve">
          <source>One usefull case of these is easy configurations like give below, so a single integer field can store thousands of combos for you.</source>
          <target state="translated">이들 중 하나의 유용한 사례는 아래에 주어진 것과 같은 쉬운 구성이므로 단일 정수 필드는 수천 개의 콤보를 저장할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="78b65f50039c4541d3a0c51a12258dbb1b353c62" translate="yes" xml:space="preserve">
          <source>PHP != and == operators</source>
          <target state="translated">PHP! = 및 == 연산자</target>
        </trans-unit>
        <trans-unit id="db4a97f407945295300bb592129ec35ff93d048f" translate="yes" xml:space="preserve">
          <source>PHP &quot;&amp;amp;&quot; operator</source>
          <target state="translated">PHP &quot;&amp;amp;&quot;연산자</target>
        </trans-unit>
        <trans-unit id="d5056ccc4c828b8a1829d025570838c2e67c0249" translate="yes" xml:space="preserve">
          <source>PHP - and / or keywords</source>
          <target state="translated">PHP 및 / 또는 키워드</target>
        </trans-unit>
        <trans-unit id="c70b1fab4fbb591bd3ab50e08d270dc150be6d1f" translate="yes" xml:space="preserve">
          <source>PHP 7 adds support for return type declarations. Similarly to argument type declarations, return type declarations specify the type of value that will be returned from a function. The same types are available for return type declarations as are available for argument type declarations.</source>
          <target state="translated">PHP 7은 리턴 타입 선언에 대한 지원을 추가합니다. 인수 유형 선언과 마찬가지로 반환 유형 선언은 함수에서 반환 될 값 유형을 지정합니다. 인수 유형 선언에 사용 가능한 것과 동일한 유형이 리턴 유형 선언에 사용 가능합니다.</target>
        </trans-unit>
        <trans-unit id="c2fe2e6e48b4d5e03e9e8058805f6f53bf1ac681" translate="yes" xml:space="preserve">
          <source>PHP arrays... What is/are the meaning(s) of an empty bracket?</source>
          <target state="translated">PHP 배열 ... 빈 괄호의 의미는 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="8ace6ed77a4488977ddf85093c0307074848d98c" translate="yes" xml:space="preserve">
          <source>PHP curly braces in array notation</source>
          <target state="translated">배열 표기법의 PHP 중괄호</target>
        </trans-unit>
        <trans-unit id="1c4115cd9193d37edb1d2119060b9a4ce586c923" translate="yes" xml:space="preserve">
          <source>PHP expression &amp;lt;&amp;lt;&amp;lt;EOB</source>
          <target state="translated">PHP 식 &amp;lt;&amp;lt;&amp;lt; EOB</target>
        </trans-unit>
        <trans-unit id="ee1eb788005713e51dc285dc4ff0ac06953cfa2f" translate="yes" xml:space="preserve">
          <source>PHP functions and @functions</source>
          <target state="translated">PHP 함수와 @functions</target>
        </trans-unit>
        <trans-unit id="0d7f48d98c3579ff0942801c080fa4ddd6efcac1" translate="yes" xml:space="preserve">
          <source>PHP has an operator &quot;...&quot; (Three dots) which is referred as Splat Operator. It is used to pass arbitrary number of parameters in a function and this type of function is called Variadic Functions. Let&amp;rsquo;s take examples to use of &quot;...&quot; (Three dots).</source>
          <target state="translated">PHP에는 &quot;...&quot;(세 개의 점) 연산자가 있으며이 연산자는 Splat 연산자입니다. 함수에서 임의의 수의 매개 변수를 전달하는 데 사용되며이 유형의 함수를 Variadic Functions라고합니다. &quot;...&quot;(세 개의 점)을 사용하는 예를 들어 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="c14776cf9af4894479aefe34a4e66e1b29e04a24" translate="yes" xml:space="preserve">
          <source>PHP operator &amp;lt;&amp;gt;</source>
          <target state="translated">PHP 연산자 &amp;lt;&amp;gt;</target>
        </trans-unit>
        <trans-unit id="8ca5bc31f5ee5ded5b9fe2bd570c13954cf43be4" translate="yes" xml:space="preserve">
          <source>PHP's &amp;lt;&amp;gt; operator</source>
          <target state="translated">PHP의 &amp;lt;&amp;gt; 연산자</target>
        </trans-unit>
        <trans-unit id="00f80d3b85e8bf8b64393fdeee25dad1a4566c5c" translate="yes" xml:space="preserve">
          <source>Php array_push() vs myArray[]</source>
          <target state="translated">PHP array_push () 대 myArray []</target>
        </trans-unit>
        <trans-unit id="1a4c7e2f68916c7a0d1e9b4a720a4bdce8861129" translate="yes" xml:space="preserve">
          <source>Pre-increment is a little bit faster because it really increments the variable and after that 'returns' the result. Post-increment creates a special variable, copies there the value of the first variable and only after the first variable is used, replaces its value with second's.</source>
          <target state="translated">사전 증가는 변수를 실제로 증가시키고 그 후에 결과를 '반환'하기 때문에 조금 더 빠릅니다. 후행 증가는 특수 변수를 작성하고 첫 번째 변수의 값을 복사하고 첫 번째 변수가 사용 된 후에 만 ​​해당 값을 두 번째 변수로 바꿉니다.</target>
        </trans-unit>
        <trans-unit id="d506691543844e227dd07a003a1906030b537b90" translate="yes" xml:space="preserve">
          <source>Reference assignment operator in PHP, =&amp;amp;</source>
          <target state="translated">PHP의 참조 할당 연산자, = &amp;amp;</target>
        </trans-unit>
        <trans-unit id="c0091bdc65a3bf05a513d61184df9c6814aa1000" translate="yes" xml:space="preserve">
          <source>Reference — What does this symbol mean in PHP</source>
          <target state="translated">참조 &amp;mdash; PHP에서이 기호의 의미는 무엇입니까</target>
        </trans-unit>
        <trans-unit id="b7f3271352bc9999571d7b53daec3de5367a4f25" translate="yes" xml:space="preserve">
          <source>Shorthand for arrays: literal &lt;code&gt;$var = []&lt;/code&gt; empty array</source>
          <target state="translated">배열의 약자 : 리터럴 &lt;code&gt;$var = []&lt;/code&gt; 빈 배열</target>
        </trans-unit>
        <trans-unit id="c8670119466ef25e9bb16b2a4613f28d2a6c47b8" translate="yes" xml:space="preserve">
          <source>Should I use @ in my PHP code?</source>
          <target state="translated">PHP 코드에서 @를 사용해야합니까?</target>
        </trans-unit>
        <trans-unit id="90ced0572717334e6aa98203bcbd54c5e047aab3" translate="yes" xml:space="preserve">
          <source>Since PHP 7 you can write...</source>
          <target state="translated">PHP 7부터 쓸 수 있습니다 ...</target>
        </trans-unit>
        <trans-unit id="417ab1132decf23985a3e7ac8ff150401460c832" translate="yes" xml:space="preserve">
          <source>So behind all above is game of bitwise operator and bits.</source>
          <target state="translated">비트 연산자와 비트 게임은 위의 모든 것 뒤에 있습니다.</target>
        </trans-unit>
        <trans-unit id="ec861622cd65f610b5638218634906a58754ac13" translate="yes" xml:space="preserve">
          <source>So far so good. However, as humans, we might find it hard to remember that index &lt;code&gt;[0]&lt;/code&gt; of the array is the value of the &lt;strong&gt;year&lt;/strong&gt; 2016, index &lt;code&gt;[1]&lt;/code&gt; of the array is a &lt;strong&gt;greetings&lt;/strong&gt;, and index &lt;code&gt;[2]&lt;/code&gt; of the array is a simple &lt;strong&gt;integer value&lt;/strong&gt;. The alternative we would then have is to use what is called an &lt;strong&gt;Associative Array&lt;/strong&gt;. An Associative array has a few differences from a &lt;strong&gt;Sequential Array&lt;/strong&gt;
(&lt;em&gt;which is what the previous cases were since they increment the index used in a predetermined sequence, by incrementing by 1 for each following value&lt;/em&gt;).</source>
          <target state="translated">여태까지는 그런대로 잘됐다. 그러나 사람으로서 배열의 인덱스 &lt;code&gt;[0]&lt;/code&gt; 은 2016 년의 값이고 배열의 인덱스 &lt;code&gt;[1]&lt;/code&gt; 은 &lt;strong&gt;인사말&lt;/strong&gt; 이며 배열의 인덱스 &lt;code&gt;[2]&lt;/code&gt; 는 단순하다는 것을 기억하기 어려울 수 있습니다 . &lt;strong&gt;정수 값&lt;/strong&gt; . 우리가 가질 수있는 대안은 &lt;strong&gt;연관 배열 (Associative Array&lt;/strong&gt; )을 사용하는 것입니다. 연관 배열은 &lt;strong&gt;순차 배열&lt;/strong&gt; 과 약간의 차이가 있습니다 ( &lt;em&gt;이전의 경우는 각 후속 값에 대해 1 씩 증가하여 미리 결정된 순서로 사용 된 인덱스를 증가시키기 때문입니다&lt;/em&gt; ).</target>
        </trans-unit>
        <trans-unit id="15d74399e3b848e2289fa525d66a3e8d7b018938" translate="yes" xml:space="preserve">
          <source>So from the above example, it is pretty easy to see that the &lt;code&gt;=&amp;gt;&lt;/code&gt; symbol is used to express the relationship of an Associative Array between each of the &lt;code&gt;key&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; pairs in an array &lt;strong&gt;DURING&lt;/strong&gt; the initiation of the values within the array.</source>
          <target state="translated">위의 예에서 &lt;code&gt;=&amp;gt;&lt;/code&gt; 기호는 배열 내에서 값을 시작하는 동안 배열의 각 &lt;code&gt;key&lt;/code&gt; 와 &lt;code&gt;value&lt;/code&gt; 쌍 사이의 연관 배열 관계를 표현하는 데 사용되는 것을 쉽게 알 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1d664510a00b37cf9471c21bcd07179b395ed4c9" translate="yes" xml:space="preserve">
          <source>So you can see from the table the only bit they share together is the 8 bit.</source>
          <target state="translated">따라서 테이블에서 그들이 공유하는 유일한 비트는 8 비트입니다.</target>
        </trans-unit>
        <trans-unit id="6da13addb000b67d42a6d66391713819e634149f" translate="yes" xml:space="preserve">
          <source>Source</source>
          <target state="translated">Source</target>
        </trans-unit>
        <trans-unit id="82014a2d56ce2da7cf61bead569c6c65d974d4e5" translate="yes" xml:space="preserve">
          <source>Spaceship (three way comparison) operator</source>
          <target state="translated">우주선 (3 방향 비교) 연산자</target>
        </trans-unit>
        <trans-unit id="b585244fe9c1f5f349660280e57b19a123323ee7" translate="yes" xml:space="preserve">
          <source>Strange print behaviour in PHP?</source>
          <target state="translated">PHP에서 이상한 인쇄 동작?</target>
        </trans-unit>
        <trans-unit id="a8f1c2bbe054a873ed19a72e9a6b090e97cadf88" translate="yes" xml:space="preserve">
          <source>Strict typing also has an effect on return type declarations. In the default weak mode, returned values will be coerced to the correct type if they are not already of that type. In strong mode, the returned value must be of the correct type, otherwise, a TypeError will be thrown.</source>
          <target state="translated">엄격한 타이핑은 리턴 타입 선언에도 영향을줍니다. 기본 약한 모드에서는 반환 된 값이 해당 유형이 아닌 경우 올바른 유형으로 강제 변환됩니다. 강력한 모드에서 반환 된 값은 올바른 유형이어야합니다. 그렇지 않으면 TypeError가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="c07d68578d6f3eabbcb0fbb5f49f77ce31b78f1e" translate="yes" xml:space="preserve">
          <source>String Operators:</source>
          <target state="translated">문자열 연산자 :</target>
        </trans-unit>
        <trans-unit id="8bcb8a067482da7537a0c553d5112a31f6393122" translate="yes" xml:space="preserve">
          <source>The &quot;AND&quot; operator: &lt;code&gt;&amp;amp;&lt;/code&gt;</source>
          <target state="translated">&quot;AND&quot;연산자 : &lt;code&gt;&amp;amp;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5d91c7bd454258ff1f962cdb94f8cca2a513b835" translate="yes" xml:space="preserve">
          <source>The &quot;Or&quot; operator: &lt;code&gt;|&lt;/code&gt;</source>
          <target state="translated">&quot;또는&quot;연산자 : &lt;code&gt;|&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="380ec1237cab6d1ade13b72b28e24379847c10ed" translate="yes" xml:space="preserve">
          <source>The 3 different equals</source>
          <target state="translated">3 개의 다른 평등</target>
        </trans-unit>
        <trans-unit id="b9e1926264be6a4d4e1e124c420af995e530194b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://php.net/language.operators.comparison&quot;&gt;spaceship operator&lt;/a&gt;&lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; is the latest comparison operator added in PHP 7. It is a &lt;em&gt;non-associative&lt;/em&gt; binary operator with the same precedence as equality operators (&lt;code&gt;==&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;, &lt;code&gt;===&lt;/code&gt;, &lt;code&gt;!==&lt;/code&gt;). This operator allows for simpler three-way comparison between left-hand and right-hand operands.</source>
          <target state="translated">&lt;a href=&quot;http://php.net/language.operators.comparison&quot;&gt;우주선 연산자&lt;/a&gt; &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; 는 PHP 7에 추가 된 최신 비교 연산자입니다.이 연산자는 항등 연산자 ( &lt;code&gt;==&lt;/code&gt; &lt;code&gt;===&lt;/code&gt; &lt;code&gt;!=&lt;/code&gt; , ===,! &lt;code&gt;!==&lt;/code&gt; )와 동일한 우선 순위를 가진 &lt;em&gt;비 연관&lt;/em&gt; 이진 연산자입니다. 이 연산자를 사용하면 왼쪽 피연산자와 오른쪽 피연산자를보다 간단하게 3 방향 비교할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="af098634b8f9d4af928dcdcc0efe77baa4ab419d" translate="yes" xml:space="preserve">
          <source>The List</source>
          <target state="translated">리스트</target>
        </trans-unit>
        <trans-unit id="f8de94159b1436873c4b4e839ba7c48668266a81" translate="yes" xml:space="preserve">
          <source>The above example will output:</source>
          <target state="translated">위의 예는 다음과 같이 출력됩니다.</target>
        </trans-unit>
        <trans-unit id="c83554429778b3dfa5de1c673c42d4f75cde521b" translate="yes" xml:space="preserve">
          <source>The behaviour of the or operator in PHP</source>
          <target state="translated">PHP에서 or 연산자의 동작</target>
        </trans-unit>
        <trans-unit id="b307715f7121eb42b0ba5c92057dd5e6f3450ef2" translate="yes" xml:space="preserve">
          <source>The main idea is to have links to existing questions on Stack Overflow, so it's easier for us to reference them, not to copy over content from the PHP Manual.</source>
          <target state="translated">주요 아이디어는 스택 오버플로에 대한 기존 질문에 대한 링크를 갖는 것이므로 PHP 매뉴얼의 내용을 복사하지 않고 질문을 쉽게 참조 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b103a039fff6a3f3f62801d4623182353cd864b7" translate="yes" xml:space="preserve">
          <source>The operator results in an integer expression of:</source>
          <target state="translated">연산자는 다음과 같은 정수식이됩니다.</target>
        </trans-unit>
        <trans-unit id="71a433feae8c96536313021fba856194a233b381" translate="yes" xml:space="preserve">
          <source>The two shared bits are 32 and 4, which when added together return 36.</source>
          <target state="translated">두 개의 공유 비트는 32와 4이며, 합산하면 36을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="c1dc73629ac0bce26454b31f13ecb425dc0155cf" translate="yes" xml:space="preserve">
          <source>The underscore character '_' as in &lt;code&gt;_()&lt;/code&gt; is an alias to the &lt;a href=&quot;http://php.net/function.gettext&quot;&gt;&lt;code&gt;gettext()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">&lt;code&gt;_()&lt;/code&gt; 에서와 같이 밑줄 문자 '_'는 &lt;a href=&quot;http://php.net/function.gettext&quot;&gt; &lt;code&gt;gettext()&lt;/code&gt; &lt;/a&gt; 함수의 별명입니다.</target>
        </trans-unit>
        <trans-unit id="6c71dbcd4ca50d2494076bb55b1ad62982a03722" translate="yes" xml:space="preserve">
          <source>There are many different ways to use &quot;&amp;hellip; &quot;  operator. Below some examples:</source>
          <target state="translated">&quot;&amp;hellip;&quot;연산자를 사용하는 방법에는 여러 가지가 있습니다. 몇 가지 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="de1bd1b628926937a41adc5617acc0a9958ca0eb" translate="yes" xml:space="preserve">
          <source>There is also a shorthand for that which allows you to skip the second element if it's the same as the first one: echo $count ?: 10; // also outputs 10</source>
          <target state="translated">두 번째 요소가 첫 번째 요소와 동일한 경우 두 번째 요소를 건너 뛸 수있는 축약 형도 있습니다. echo $ count? : 10; // 또한 10을 출력합니다</target>
        </trans-unit>
        <trans-unit id="a8866485f3cdec4b3c5f23eb85a882371875c982" translate="yes" xml:space="preserve">
          <source>These can go before or after the variable.</source>
          <target state="translated">변수 앞뒤로 갈 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0e8932b925419f4da15914241b903761904e6a3a" translate="yes" xml:space="preserve">
          <source>This construct is useful for giving priority to one or more values coming perhaps from user input or existing configuration, and safely falling back on a given default if that configuration is missing. It's kind of a small feature but it's one that I know I'll be using as soon as my applications upgrade to PHP 7.</source>
          <target state="translated">이 구성은 사용자 입력 또는 기존 구성에서 오는 하나 이상의 값에 우선 순위를 부여하고 해당 구성이 누락 된 경우 지정된 기본값으로 안전하게 폴백하는 데 유용합니다. 작은 기능이지만 응용 프로그램이 PHP 7로 업그레이드 되 자마자 사용할 것입니다.</target>
        </trans-unit>
        <trans-unit id="1076188e123d2d706fac7e86497c67f9ca552b3c" translate="yes" xml:space="preserve">
          <source>This is a collection of questions that come up every now and then about syntax in PHP. This is also a Community Wiki, so everyone is invited to participate in maintaining this list.</source>
          <target state="translated">이것은 PHP의 구문에 대해 자주 제기되는 질문 모음입니다. 이것은 커뮤니티 위키이기도하므로 모든 사람이이 목록 유지에 참여하도록 초대됩니다.</target>
        </trans-unit>
        <trans-unit id="69cddca8fbe4383fb63c6f713236ca8294afdee0" translate="yes" xml:space="preserve">
          <source>This means that &lt;code&gt;$a = true and false;&lt;/code&gt; is equivalent to &lt;code&gt;($a = true) and false&lt;/code&gt;.</source>
          <target state="translated">이는 &lt;code&gt;$a = true and false;&lt;/code&gt; 의미합니다 . &lt;code&gt;($a = true) and false&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="48100611c8db877fd50a037c179e93fa3784bc32" translate="yes" xml:space="preserve">
          <source>This operator has been added in PHP 7.0 for the common case of needing to use a ternary operator in conjunction with &lt;code&gt;isset()&lt;/code&gt;. It returns its first operand if it exists and is not &lt;code&gt;NULL&lt;/code&gt;; otherwise it returns its second operand.</source>
          <target state="translated">이 연산자는 &lt;code&gt;isset()&lt;/code&gt; 과 함께 삼항 연산자를 사용해야하는 일반적인 경우를 위해 PHP 7.0에 추가되었습니다. 존재하고 &lt;code&gt;NULL&lt;/code&gt; 이 아닌 경우 첫 번째 피연산자를 리턴 합니다 . 그렇지 않으면 두 번째 피연산자를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="146a2cfe0939a134c6ca1a7979b3dcf543aa2b35" translate="yes" xml:space="preserve">
          <source>This representation of 1 Byte</source>
          <target state="translated">이 1 바이트 표현</target>
        </trans-unit>
        <trans-unit id="de37e970fbdf0aa86ed78c1b770aaebe803e18be" translate="yes" xml:space="preserve">
          <source>This would output the number 11. Why?</source>
          <target state="translated">이것은 숫자 11을 출력 할 것입니다. 왜?</target>
        </trans-unit>
        <trans-unit id="aff8b277ec8fc893be84ba8353de1cdc890dc0f7" translate="yes" xml:space="preserve">
          <source>This would output the number 8. Why? Well let's see using our table example.</source>
          <target state="translated">이것은 숫자 8을 출력 할 것입니다. 왜? 테이블 예제를 사용하여 봅시다.</target>
        </trans-unit>
        <trans-unit id="6a0baf7cce063108636c88bbbfdb3730504a2d50" translate="yes" xml:space="preserve">
          <source>To understand a line of PHP</source>
          <target state="translated">PHP 라인을 이해하려면</target>
        </trans-unit>
        <trans-unit id="44ba738d34260d3833b259b9b7f241404408dcd6" translate="yes" xml:space="preserve">
          <source>To understand this, we have to know what Associative Arrays are. The first thing that comes up when a conventional programmer thinks of an array (&lt;strong&gt;in PHP&lt;/strong&gt;) would be something similar to:</source>
          <target state="translated">이를 이해하려면 연관 배열이 무엇인지 알아야합니다. 일반적인 프로그래머가 배열 ( &lt;strong&gt;PHP&lt;/strong&gt; )을 생각할 때 가장 먼저 나타나는 것은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="a13ae1279809745a712d847542e2456d682b93e1" translate="yes" xml:space="preserve">
          <source>Type Operators</source>
          <target state="translated">타입 연산자</target>
        </trans-unit>
        <trans-unit id="3625a86089316a4f69729518e7595e3ce5cd7cd4" translate="yes" xml:space="preserve">
          <source>Type-juggling and (strict) greater/lesser-than comparisons in PHP</source>
          <target state="translated">PHP에서 유형 저글링 및 (엄격한) 비교</target>
        </trans-unit>
        <trans-unit id="fdac5312900fb75ed3785729c8918337b2b9d77f" translate="yes" xml:space="preserve">
          <source>Understanding Incrementing</source>
          <target state="translated">증분 이해</target>
        </trans-unit>
        <trans-unit id="d5e5b4c886882efe8e2bea8d1eddd1c3741c01db" translate="yes" xml:space="preserve">
          <source>Understanding PHP &amp;amp; (ampersand, bitwise and) operator</source>
          <target state="translated">PHP 및 (앰퍼샌드, 비트 및) 연산자 이해</target>
        </trans-unit>
        <trans-unit id="0f58f5a00fd8e93c65de1c9d14b6954ed145519c" translate="yes" xml:space="preserve">
          <source>Unexpected T_PAAMAYIM_NEKUDOTAYIM, expecting T_NS_Separator</source>
          <target state="translated">예상치 못한 T_PAAMAYIM_NEKUDOTAYIM, T_NS_Separator 예상</target>
        </trans-unit>
        <trans-unit id="45f97f8044f8b8d7ed21973b5e4ec900001ea2c5" translate="yes" xml:space="preserve">
          <source>Use of =&amp;gt; in PHP</source>
          <target state="translated">PHP에서 =&amp;gt; 사용</target>
        </trans-unit>
        <trans-unit id="d8887427c5d422260f4d988c5f549142246428fd" translate="yes" xml:space="preserve">
          <source>Using &amp;lt;&amp;lt;&amp;lt;CON in PHP</source>
          <target state="translated">PHP에서 &amp;lt;&amp;lt;&amp;lt; CON 사용</target>
        </trans-unit>
        <trans-unit id="d2dd9e2c3a0c5bd8b44512ae995b70400c715627" translate="yes" xml:space="preserve">
          <source>Using PHP 5.3 ?: operator</source>
          <target state="translated">PHP 5.3? : 연산자 사용</target>
        </trans-unit>
        <trans-unit id="eea194a7ccea38af53e6e98838c11e73bd9bce7b" translate="yes" xml:space="preserve">
          <source>What Does Using A Single Pipe '|' In A Function Argument Do?</source>
          <target state="translated">단일 파이프를 사용하는 것 '|' 함수 인수에서?</target>
        </trans-unit>
        <trans-unit id="49b00c012ec06c30de374d799af0fd4136a6dbb0" translate="yes" xml:space="preserve">
          <source>What are the PHP operators &quot;?&quot; and &quot;:&quot; called and what do they do?</source>
          <target state="translated">PHP 연산자는 무엇입니까? &quot;:&quot;라고 불렀고 그들은 무엇을합니까?</target>
        </trans-unit>
        <trans-unit id="a30a8227618cf79b4d2eb8a4a100b1984e430f7d" translate="yes" xml:space="preserve">
          <source>What are the backticks `` called?</source>
          <target state="translated">백틱은 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="17d85750b181e352e3e10255feed1998657df068" translate="yes" xml:space="preserve">
          <source>What do commas mean in a variable declaration?</source>
          <target state="translated">변수 선언에서 쉼표는 무엇을 의미합니까?</target>
        </trans-unit>
        <trans-unit id="7b2463eb67f1bdd3ceecfd83176ad75be36da74c" translate="yes" xml:space="preserve">
          <source>What do the &quot;=&amp;amp;&quot; and &quot;&amp;amp;=&quot; operators in PHP mean?</source>
          <target state="translated">PHP에서 &quot;= &amp;amp;&quot;와 &quot;&amp;amp; =&quot;연산자는 무엇을 의미합니까?</target>
        </trans-unit>
        <trans-unit id="f688ad456aee149fe2f8229a29c0a111fd0f1229" translate="yes" xml:space="preserve">
          <source>What do the '&amp;amp;=' and '=&amp;amp;' operators do?</source>
          <target state="translated">'&amp;amp; ='및 '= &amp;amp;'연산자는 무엇을합니까?</target>
        </trans-unit>
        <trans-unit id="f9538e15ebc2b3e060ebcbdd9c8567705fe0eee3" translate="yes" xml:space="preserve">
          <source>What do two colons mean in PHP?</source>
          <target state="translated">PHP에서 두 개의 콜론은 무엇을 의미합니까?</target>
        </trans-unit>
        <trans-unit id="309bac072093a4237bd60bfcdfb879a1d96d34f9" translate="yes" xml:space="preserve">
          <source>What does !== comparison operator in PHP mean?</source>
          <target state="translated">PHP에서! == 비교 연산자 란 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="d832e34cefc6646a7f9ffd51c4b49ccd576f20c5" translate="yes" xml:space="preserve">
          <source>What does &quot;&amp;amp;&quot; mean here in PHP?</source>
          <target state="translated">PHP에서 &quot;&amp;amp;&quot;는 무엇을 의미합니까?</target>
        </trans-unit>
        <trans-unit id="e6bd19b39268ea0b0607729b237c2dbfef294346" translate="yes" xml:space="preserve">
          <source>What does &quot;&amp;amp;&quot; mean in this case?</source>
          <target state="translated">이 경우 &quot;&amp;amp;&quot;는 무엇을 의미합니까?</target>
        </trans-unit>
        <trans-unit id="0834c24eb11615f12f3ad6f5551765371f7190a7" translate="yes" xml:space="preserve">
          <source>What does &quot;-&amp;gt;&quot; mean/refer to in PHP?</source>
          <target state="translated">PHP에서 &quot;-&amp;gt;&quot;는 무엇을 의미합니까?</target>
        </trans-unit>
        <trans-unit id="3a95f8fcb217a96d55f4f087089cf1bc9aaaa896" translate="yes" xml:space="preserve">
          <source>What does &quot;:&quot; mean in PHP?</source>
          <target state="translated">PHP에서 &quot;:&quot;은 무엇을 의미합니까?</target>
        </trans-unit>
        <trans-unit id="a8f9f5c9c59544c403e5b2b80da23647f40cb6c3" translate="yes" xml:space="preserve">
          <source>What does &quot;=&amp;gt;&quot; mean in PHP?</source>
          <target state="translated">PHP에서 &quot;=&amp;gt;&quot;는 무엇을 의미합니까?</target>
        </trans-unit>
        <trans-unit id="cf6b8f693e48fd9df782b22d88df15b8ee7c069e" translate="yes" xml:space="preserve">
          <source>What does &quot;===&quot; mean?</source>
          <target state="translated">&quot;===&quot;은 무슨 뜻입니까?</target>
        </trans-unit>
        <trans-unit id="208e6fe6daf41669d071b5c602d9c150ec6859b7" translate="yes" xml:space="preserve">
          <source>What does $$ (dollar dollar or double dollar) mean in PHP?</source>
          <target state="translated">PHP에서 $$ (달러 또는 이중 달러)는 무엇을 의미합니까?</target>
        </trans-unit>
        <trans-unit id="49cf48c1c9df1240571e1e8981bd0e564b92db38" translate="yes" xml:space="preserve">
          <source>What does $k =&amp;gt; $v in foreach($ex as $k=&amp;gt;$v) mean?</source>
          <target state="translated">foreach ($ ex as $ k =&amp;gt; $ v)에서 $ k =&amp;gt; $ v는 무엇을 의미합니까?</target>
        </trans-unit>
        <trans-unit id="6d57f438db9ace82107b248eed8b29ae701fa108" translate="yes" xml:space="preserve">
          <source>What does &amp;amp; in &amp;amp;2 mean in PHP?</source>
          <target state="translated">PHP에서 &amp;amp; 2 (&amp;amp; 2)는 무엇을 의미합니까?</target>
        </trans-unit>
        <trans-unit id="2fca3b5767eb29a8700f9e70aa4618375d6ba386" translate="yes" xml:space="preserve">
          <source>What does &amp;gt;&amp;gt; mean in PHP?</source>
          <target state="translated">PHP에서 &amp;gt;&amp;gt;는 무엇을 의미합니까?</target>
        </trans-unit>
        <trans-unit id="d4cbff3188ad396cf01184872a5ea335bdc3cf82" translate="yes" xml:space="preserve">
          <source>What does &amp;lt;&amp;lt;&amp;lt;END mean in PHP?</source>
          <target state="translated">PHP에서 &amp;lt;&amp;lt;&amp;lt; END는 무엇을 의미합니까?</target>
        </trans-unit>
        <trans-unit id="7f28896b623ea179cad168e58cdd182cd4246588" translate="yes" xml:space="preserve">
          <source>What does &amp;lt;?= mean?</source>
          <target state="translated">&amp;lt;? = 무엇을 의미합니까?</target>
        </trans-unit>
        <trans-unit id="6e16d82dd7f6eff2949d0c07d7094b04617bab86" translate="yes" xml:space="preserve">
          <source>What does '&amp;lt;?=' mean in PHP?</source>
          <target state="translated">PHP에서 '&amp;lt;? ='은 무슨 뜻입니까?</target>
        </trans-unit>
        <trans-unit id="d2e33899340ff19770b25e781e5bd020b00a63d5" translate="yes" xml:space="preserve">
          <source>What does &lt;code&gt;=&amp;gt;&lt;/code&gt; mean?</source>
          <target state="translated">&lt;code&gt;=&amp;gt;&lt;/code&gt; 무엇을 의미합니까?</target>
        </trans-unit>
        <trans-unit id="fbbd533f1b24521be9ce8ac134840da61ae25a2e" translate="yes" xml:space="preserve">
          <source>What does =&amp;amp; mean in PHP?</source>
          <target state="translated">PHP에서 = &amp;amp;는 무엇을 의미합니까?</target>
        </trans-unit>
        <trans-unit id="0848ac8dd2ad970d9bca5277b1d5959b62743362" translate="yes" xml:space="preserve">
          <source>What does @ mean in PHP?</source>
          <target state="translated">PHP에서 @는 무엇을 의미합니까?</target>
        </trans-unit>
        <trans-unit id="5fdf3ec79f30a4604c7bbcac3dd5494048adf76a" translate="yes" xml:space="preserve">
          <source>What does [] mean when reading from a PHP array?</source>
          <target state="translated">PHP 배열에서 읽을 때 []의 의미는 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="b7b9c42562c414d3327ba78c62b565320a6ff07d" translate="yes" xml:space="preserve">
          <source>What does ^ mean in PHP?</source>
          <target state="translated">^는 PHP에서 무엇을 의미합니까?</target>
        </trans-unit>
        <trans-unit id="35458f745449c1c66905be73d63eaeee023340a7" translate="yes" xml:space="preserve">
          <source>What does `$page -= 1` in my PHP document mean?</source>
          <target state="translated">PHP 문서에서`$ page-= 1`은 무엇을 의미합니까?</target>
        </trans-unit>
        <trans-unit id="c29c541283687cd3fcc85eab541aed4c8bcb3e6d" translate="yes" xml:space="preserve">
          <source>What does a . (dot) do in PHP?</source>
          <target state="translated">무엇을합니까. (도트) PHP로합니까?</target>
        </trans-unit>
        <trans-unit id="27f42aed1b704277acce72143fea346b85f55c7a" translate="yes" xml:space="preserve">
          <source>What does a \ (backslash) do in PHP (5.3+)?</source>
          <target state="translated">PHP (5.3+)에서 \ (백 슬래시)는 무엇을합니까?</target>
        </trans-unit>
        <trans-unit id="b8e2e8986f8b4de65768b3c335b34bf171fc0628" translate="yes" xml:space="preserve">
          <source>What does it mean to start a PHP function with an ampersand?</source>
          <target state="translated">앰퍼샌드로 PHP 기능을 시작한다는 것은 무엇을 의미합니까?</target>
        </trans-unit>
        <trans-unit id="44c4680d63b5d21a8401b59a9ad3143fd690ded6" translate="yes" xml:space="preserve">
          <source>What does the &quot;&amp;amp;&quot; sign mean in PHP?</source>
          <target state="translated">PHP에서 &quot;&amp;amp;&quot;부호는 무엇을 의미합니까?</target>
        </trans-unit>
        <trans-unit id="66c44e4f821f75f222f37db41112a0f3d04664ed" translate="yes" xml:space="preserve">
          <source>What does the PHP syntax $var1-&amp;gt;$var2 mean?</source>
          <target state="translated">PHP 구문 $ var1-&amp;gt; $ var2의 의미는 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="382b8e5b7c686d3ca9c24584f41b074f8143652b" translate="yes" xml:space="preserve">
          <source>What does the percent sign mean in PHP?</source>
          <target state="translated">PHP에서 퍼센트 기호는 무엇을 의미합니까?</target>
        </trans-unit>
        <trans-unit id="77ed27ec4f32ba25f5c36229184c70cf5c24c969" translate="yes" xml:space="preserve">
          <source>What does this signature mean (&amp;amp;) in PHP?</source>
          <target state="translated">PHP에서이 서명은 무엇을 의미합니까 (&amp;amp;)?</target>
        </trans-unit>
        <trans-unit id="ee59d86be146a2e2c11df09932c60c1b39f520bf" translate="yes" xml:space="preserve">
          <source>What does this symbol mean in PHP &amp;lt;?=</source>
          <target state="translated">PHP에서이 기호는 무엇을 의미합니까?</target>
        </trans-unit>
        <trans-unit id="57c42f05710da4d21c628c2132f3f7c02a845f4e" translate="yes" xml:space="preserve">
          <source>What does this ~ operator mean here?</source>
          <target state="translated">이 연산자는 무엇을 의미합니까?</target>
        </trans-unit>
        <trans-unit id="c2c0b3f338bfa3252accf1ee6e59a3356eb73bfb" translate="yes" xml:space="preserve">
          <source>What exactly are late static bindings in PHP?</source>
          <target state="translated">PHP에서 늦은 정적 바인딩은 정확히 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="411019d813ba3c0ffa0ffcfbd0223cc1414991ba" translate="yes" xml:space="preserve">
          <source>What exactly does || mean?</source>
          <target state="translated">정확히 || 평균?</target>
        </trans-unit>
        <trans-unit id="ab89f89137d9856a1b366932c41d11693423abb1" translate="yes" xml:space="preserve">
          <source>What is &quot;:&quot; in PHP?</source>
          <target state="translated">PHP에서 &quot;:&quot;는 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="c6d9f86bfb4468d1192b49e65f1741d0170d2de6" translate="yes" xml:space="preserve">
          <source>What is += used for?</source>
          <target state="translated">+ =는 무엇을 위해 사용됩니까?</target>
        </trans-unit>
        <trans-unit id="d4eadeb59ec12e9c69d4a80a1d1d6e62d198765b" translate="yes" xml:space="preserve">
          <source>What is a bit? A bit is a representation of 1 or 0. Basically OFF(0) and ON(1)</source>
          <target state="translated">조금 무엇입니까? 비트는 1 또는 0을 나타냅니다. 기본적으로 OFF (0) 및 ON (1)</target>
        </trans-unit>
        <trans-unit id="d7f9c9571f750026dd019284659f08f51e0bb8de" translate="yes" xml:space="preserve">
          <source>What is a byte? A byte is made up of 8 bits and the highest value of a byte is 255, which would mean every bit is set. We will look at why a byte's maximum value is 255.</source>
          <target state="translated">바이트 란 무엇입니까? 바이트는 8 비트로 구성되며 바이트의 최고 값은 255이며 이는 모든 비트가 설정되었음을 의미합니다. 바이트의 최대 값이 255 인 이유를 살펴 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="3630a66989b0cc3109490b691ba21c18ac5f6595" translate="yes" xml:space="preserve">
          <source>What is the &quot;-&amp;gt;&quot; PHP operator called and how do you say it when reading code out loud?</source>
          <target state="translated">&quot;-&amp;gt;&quot;PHP 연산자는 무엇이며 코드를 크게 읽을 때 어떻게 말합니까?</target>
        </trans-unit>
        <trans-unit id="b0213d48601f4bc633b5ea41dc326e87183b3af8" translate="yes" xml:space="preserve">
          <source>What is the PHP operator % and how do I use it in real-world examples?</source>
          <target state="translated">PHP 연산자 %는 무엇이며 실제 예제에서 어떻게 사용합니까?</target>
        </trans-unit>
        <trans-unit id="f07a90c8e1a10fe48d228c48f866af7caf06357d" translate="yes" xml:space="preserve">
          <source>What is the difference between &amp;lt;&amp;gt; and !=</source>
          <target state="translated">&amp;lt;&amp;gt;와! =의 차이점은 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="2d10bab6fadd2632db3f77f78ab2df1256ff7c14" translate="yes" xml:space="preserve">
          <source>What is the difference between .= and += in PHP?</source>
          <target state="translated">PHP에서. =와 + =의 차이점은 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="fc8226b1c997844f1eabb6c3def69e4da76074c3" translate="yes" xml:space="preserve">
          <source>What is the difference between the | and || operators?</source>
          <target state="translated">의 차이점은 무엇입니까 | 그리고 || 운영자?</target>
        </trans-unit>
        <trans-unit id="b7f2116a82c0eb02d2a3246a4ab3210c95e64b67" translate="yes" xml:space="preserve">
          <source>What is the meaning of []</source>
          <target state="translated">[]의 의미는 무엇입니까</target>
        </trans-unit>
        <trans-unit id="8f71a3d1b1df6c7482b30e69b7840d780c3c3903" translate="yes" xml:space="preserve">
          <source>What is the use of the @ symbol in PHP?</source>
          <target state="translated">PHP에서 @ 기호를 사용하는 것은 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="dd8082be77e9211f033a55131c1a6360f12b0e1d" translate="yes" xml:space="preserve">
          <source>What is this?</source>
          <target state="translated">이게 뭐야?</target>
        </trans-unit>
        <trans-unit id="e65d11641f74fc614e80347710cc195a1873cc9d" translate="yes" xml:space="preserve">
          <source>What's the difference between :: (double colon) and -&amp;gt; (arrow) in PHP?</source>
          <target state="translated">PHP에서 :: (이중 콜론)과-&amp;gt; (화살표)의 차이점은 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="c5e4ee8209fbcae2b59e508eb841e346c4e6a447" translate="yes" xml:space="preserve">
          <source>What's the meaning of the PHP token name T_PAAMAYIM_NEKUDOTAYIM?</source>
          <target state="translated">PHP 토큰 이름 T_PAAMAYIM_NEKUDOTAYIM의 의미는 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="ed2f2360e32ddadd95e375cb7d32cba7f4eded49" translate="yes" xml:space="preserve">
          <source>What's this kind of syntax in PHP?</source>
          <target state="translated">PHP에서 이런 종류의 문법은 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="b7b020a7924be57fc3cebba9bb44410d75fdb644" translate="yes" xml:space="preserve">
          <source>When should I use a bitwise operator?</source>
          <target state="translated">비트 연산자는 언제 사용해야합니까?</target>
        </trans-unit>
        <trans-unit id="977e69a4c6c9753fa29b01440336be40e7f67f37" translate="yes" xml:space="preserve">
          <source>When using the Associative Array, the &lt;code&gt;key&lt;/code&gt; value would then be placed inside the index of the array to retrieve the desired &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">연관 배열을 사용할 때 &lt;code&gt;key&lt;/code&gt; 값은 배열의 인덱스 안에 배치되어 원하는 &lt;code&gt;value&lt;/code&gt; 을 검색합니다.</target>
        </trans-unit>
        <trans-unit id="c0a861f490d43b812932814cfde2436f94144afb" translate="yes" xml:space="preserve">
          <source>Where as, if we wanted to call the array in some later part of the code, we could do:</source>
          <target state="translated">코드의 뒷부분에서 배열을 호출하려면 다음과 같이하십시오.</target>
        </trans-unit>
        <trans-unit id="8a992ca5cbe22cf34c30a0fd933659f7f1a4f18a" translate="yes" xml:space="preserve">
          <source>Where can I read about conditionals done with &quot;?&quot; and &quot;:&quot; (colon)?</source>
          <target state="translated">&quot;&quot;로 수행 된 조건에 대한 정보는 어디에서 읽을 수 있습니까? &quot;:&quot;(콜론)?</target>
        </trans-unit>
        <trans-unit id="df1c7422e392b51b24028da3551b7a58611cdc83" translate="yes" xml:space="preserve">
          <source>Where do we use the object operator &quot;-&amp;gt;&quot; in PHP?</source>
          <target state="translated">PHP에서 객체 연산자 &quot;-&amp;gt;&quot;를 어디에 사용합니까?</target>
        </trans-unit>
        <trans-unit id="9d863fbd4a4b35d1abc87eb5fac9e58af686e66b" translate="yes" xml:space="preserve">
          <source>Why is this?</source>
          <target state="translated">왜 이런거야?</target>
        </trans-unit>
        <trans-unit id="091eab9223f7cc9777c4aea9679c481780dce533" translate="yes" xml:space="preserve">
          <source>You can also increment letters in PHP:</source>
          <target state="translated">PHP에서 글자를 증가시킬 수도 있습니다 :</target>
        </trans-unit>
        <trans-unit id="40052fed22d269470d8be0b9c9b766ec16085a27" translate="yes" xml:space="preserve">
          <source>You will notice that we have 3 bits set, in the 8, 2, and 1 columns. Add those up: 8+2+1=11.</source>
          <target state="translated">우리는 8, 2, 1 열에 3 비트 세트가 있음을 알 수 있습니다. 8 + 2 + 1 = 11을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="d0bfc452d079979e657de7f447231b82561194e7" translate="yes" xml:space="preserve">
          <source>comparing, !== versus !=</source>
          <target state="translated">! == 대! = 비교</target>
        </trans-unit>
        <trans-unit id="7f53a68d324346fc8457a1665141697dcc97ee86" translate="yes" xml:space="preserve">
          <source>e.g.</source>
          <target state="translated">e.g.</target>
        </trans-unit>
        <trans-unit id="beda1183a248c33e9d286c84bb826143eb339d4a" translate="yes" xml:space="preserve">
          <source>have you even noticed how these calls works?</source>
          <target state="translated">이 전화가 어떻게 작동하는지 눈치 채 셨나요?</target>
        </trans-unit>
        <trans-unit id="c14aa39d5e24bb8bf753b622cd1c88aba5f20a07" translate="yes" xml:space="preserve">
          <source>php method argument type hinting with question mark (?type)</source>
          <target state="translated">물음표 (? 유형)로 힌트를주는 PHP 메소드 인수 유형</target>
        </trans-unit>
        <trans-unit id="471e8804517679ed9cd68d8beb1af40c3cbdea47" translate="yes" xml:space="preserve">
          <source>static::staticFunctionName()</source>
          <target state="translated">static::staticFunctionName()</target>
        </trans-unit>
        <trans-unit id="1a2c7b99d18d3c66f48ac2eb89adcbbe8e873533" translate="yes" xml:space="preserve">
          <source>what is &quot;$$&quot; in PHP</source>
          <target state="translated">PHP에서 &quot;$$&quot;는 무엇입니까</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
