<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/373419">
    <body>
      <group id="373419">
        <trans-unit id="e9f6896f6f619208772a572ca98f25701e9473c9" translate="yes" xml:space="preserve">
          <source>(As an aside: depending on hardware and operating system, there are various &lt;em&gt;calling conventions&lt;/em&gt; about how you call one function from another. The calling convention is like us deciding whether I write the value on a piece of my paper and then hand it to you, or if you have a piece of paper that I write it on, or if I write it on the wall in front of both of us. This is an interesting subject as well, but far beyond the scope of this already long answer.)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(Como &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;comentario &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;aparte: seg&amp;uacute;n el hardware y el sistema operativo, existen varias &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;convenciones de llamadas&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; sobre c&amp;oacute;mo llamar a una funci&amp;oacute;n desde otra. La convenci&amp;oacute;n de llamadas es como si decidi&amp;eacute;ramos si escribo el valor en una hoja de papel y luego se lo entrego , o si tiene un pedazo de papel en el que lo escribo, o si lo escribo en la pared frente a los dos. Este es un tema interesante tambi&amp;eacute;n, pero mucho m&amp;aacute;s all&amp;aacute; del alcance de esta respuesta ya larga).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cbac2cd038acc214288f0e583f52ec70e47f7d7b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;arg&lt;/code&gt; is a &lt;em&gt;variable&lt;/em&gt;, specifically a &lt;em&gt;local variable&lt;/em&gt; of the function &lt;code&gt;bar&lt;/code&gt;, declared and initialized on line 2</source>
          <target state="translated">&lt;code&gt;arg&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es una &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;variable&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , espec&amp;iacute;ficamente una &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;variable local&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; de la &lt;/font&gt;&lt;/font&gt; &lt;code&gt;bar&lt;/code&gt; ra de&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; funciones &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;, declarada e inicializada en la l&amp;iacute;nea 2&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5bc453d53640191a42b118363d3132a50b5539d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;arg&lt;/code&gt; is also an &lt;em&gt;argument&lt;/em&gt; to a specific &lt;em&gt;invocation&lt;/em&gt; of &lt;code&gt;foo&lt;/code&gt; on line 3</source>
          <target state="translated">&lt;code&gt;arg&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tambi&amp;eacute;n es un &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;argumento&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para una &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;invocaci&amp;oacute;n&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; espec&amp;iacute;fica &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;foo&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en la l&amp;iacute;nea 3&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0608e72f6e5e0abbef70953fddd75322bde2de2b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;const &amp;amp;&lt;/code&gt; is generally best. You don't incur the construction and destruction penalty. If the reference isn't const your interface is suggesting that it will change the passed in data.</source>
          <target state="translated">&lt;code&gt;const &amp;amp;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es generalmente el mejor. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;No incurres en la pena de construcci&amp;oacute;n y destrucci&amp;oacute;n. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si la referencia no es constante, su interfaz sugiere que cambiar&amp;aacute; los datos pasados.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5778d91fd84f65084092af7733f7deb1cc95e2b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;foo&lt;/code&gt; is a &lt;em&gt;function&lt;/em&gt; declared on line 1 (Java insists on making all functions methods, but the concept is the same without loss of generality; C and C++ make a distinction between declaration and definition which I won't go into here)</source>
          <target state="translated">&lt;code&gt;foo&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es una &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;funci&amp;oacute;n&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; declarada en la l&amp;iacute;nea 1 (Java insiste en hacer todos los m&amp;eacute;todos de funciones, pero el concepto es el mismo sin p&amp;eacute;rdida de generalidad; C y C ++ hacen una distinci&amp;oacute;n entre declaraci&amp;oacute;n y definici&amp;oacute;n en la que no entrar&amp;eacute; aqu&amp;iacute;)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4342767f686e6c884e61cc037c3c3fc5cc659e9c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;param&lt;/code&gt; is a &lt;em&gt;formal parameter&lt;/em&gt; to &lt;code&gt;foo&lt;/code&gt;, also declared on line 1</source>
          <target state="translated">&lt;code&gt;param&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es un &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;par&amp;aacute;metro formal&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para &lt;/font&gt;&lt;/font&gt; &lt;code&gt;foo&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , tambi&amp;eacute;n declarado en la l&amp;iacute;nea 1&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a8d4c381565096e1150f6f23cbfd17f895abdfb3" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;PS: You can also check Dylan Beattie answer in the current thread that explains it in plain words.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;PD: Tambi&amp;eacute;n puede verificar la respuesta de Dylan Beattie en el hilo actual que lo explica en palabras simples.&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b531648ef026c5f39d3a5d0415561b077a9607f8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;call by reference&lt;/em&gt; means that you pass &lt;strong&gt;variables&lt;/strong&gt; as function arguments</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;llamar por referencia&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; significa que pasa &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;variables&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; como argumentos de funci&amp;oacute;n&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cb11d3cb91b2bf61e1481c659f0757366f9bdd10" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;call by value&lt;/em&gt; means that you pass &lt;strong&gt;values&lt;/strong&gt; as function arguments</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;llamar por valor&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; significa que pasa &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;valores&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; como argumentos de funci&amp;oacute;n&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c462e7be0d47cb45eb80b5d83418b9eb9be4c338" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&quot;Variable&quot; here means the caller's (local or global) variable itself&lt;/strong&gt; -- i.e. if I pass a local variable by reference and assign to it, I'll change the caller's variable itself, not e.g. whatever it is pointing to if it's a pointer.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&quot;Variable&quot; aqu&amp;iacute; significa la variable de la persona que llama (local o global)&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , es decir, si paso una variable local por referencia y la asigno, cambiar&amp;eacute; la variable de la persona que llama, no, por ejemplo, a lo que est&amp;eacute; apuntando si es un puntero .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9943118257c67073146bfe93bd45fef73950fe6a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Call by reference&lt;/em&gt;&lt;/strong&gt; is when &lt;strong&gt;I give you my notebook which has something written down in it&lt;/strong&gt;. You may scribble in my notebook (maybe I want you to, maybe I don't), and afterwards I keep my notebook, with whatever scribbles you've put there. Also, if what either you or I wrote there is information about how to find something somewhere else, either you or I can go there and fiddle with that information.</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Llamada por referencia&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es cuando&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; le doy mi cuaderno que tiene algo escrito&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Puedes garabatear en mi cuaderno (tal vez quiero que lo hagas, tal vez no), y luego guardo mi cuaderno, con los garabatos que hayas puesto all&amp;iacute;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Adem&amp;aacute;s, si lo que usted o yo escribimos hay informaci&amp;oacute;n sobre c&amp;oacute;mo encontrar algo en otro lugar, usted o yo podemos ir all&amp;iacute; y manipular esa informaci&amp;oacute;n.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cbec7d9a2bfc4bfd91921e65076e74c44616fe34" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Call by value&lt;/em&gt;&lt;/strong&gt; is where &lt;strong&gt;I write down something on a piece of paper and hand it to you&lt;/strong&gt;. Maybe it's a URL, maybe it's a complete copy of War and Peace. No matter what it is, it's on a piece of paper which I've given to you, and so now it is effectively &lt;strong&gt;your piece of paper&lt;/strong&gt;. You are now free to scribble on that piece of paper, or use that piece of paper to find something somewhere else and fiddle with it, whatever.</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La llamada por valor&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es donde&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; escribo algo en una hoja de papel y se lo entrego&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . Tal vez sea una URL, tal vez sea una copia completa de Guerra y paz. No importa lo que sea, est&amp;aacute; en una hoja de papel que le he dado, y ahora es efectivamente&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; su hoja de papel&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . Ahora es libre de garabatear en ese pedazo de papel, o usar ese pedazo de papel para encontrar algo en otro lugar y jugar con &amp;eacute;l, lo que sea.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8f764f71ad507d4f6ffa334772288b3c44caf6d7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt;: For a long time, this answer used to say:</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;NOTA&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : Durante mucho tiempo, esta respuesta sol&amp;iacute;a decir:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="23bb1a4a60181353a368cf6d31df5de9e55c1682" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Newer languages&lt;sup&gt;2&lt;/sup&gt; tend to use a different (but similar) pair of techniques to achieve the same effects&lt;/strong&gt; (see below) which is the primary source of confusion.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Los lenguajes m&amp;aacute;s nuevos &lt;/font&gt;&lt;/font&gt;&lt;sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2&lt;/font&gt;&lt;/font&gt;&lt;/sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tienden a usar un par de t&amp;eacute;cnicas diferentes (pero similares) para lograr los mismos efectos&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (ver m&amp;aacute;s abajo), que es la principal fuente de confusi&amp;oacute;n.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4f33c78571c4b9ebb3b2d119820fcb7e5ff0e742" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Now, in modern languages, variables tend to be of &quot;reference types&quot;&lt;/strong&gt; (another concept invented later than &quot;pass by reference&quot; and inspired by it), i.e. the actual object data is stored separately somewhere (usually, on the heap), and only &quot;references&quot; to it are ever held in variables and passed as parameters.&lt;sup&gt;3&lt;/sup&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ahora, en los lenguajes modernos, las variables tienden a ser de &quot;tipos de referencia&quot;&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (otro concepto inventado m&amp;aacute;s tarde que &quot;pasar por referencia&quot; e inspirado en &amp;eacute;l), es decir, los datos del objeto real se almacenan por separado en alg&amp;uacute;n lugar (generalmente, en el mont&amp;oacute;n), y solo las &quot;referencias&quot; a ella se mantienen en variables y se pasan como par&amp;aacute;metros. &lt;/font&gt;&lt;/font&gt;&lt;sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;3&lt;/font&gt;&lt;/font&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="25e135788be8d1778bcd707f508c191d13da2085" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Passing such a reference falls under pass-by-value&lt;/strong&gt; because a variable's value is technically the reference itself, not the referred object. However, &lt;strong&gt;the net effect on the program can be the same as either pass-by-value or pass-by-reference:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Pasar una referencia de este tipo cae bajo el valor de paso por valor&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; porque el &lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;valor de&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; una variable es t&amp;eacute;cnicamente la referencia en s&amp;iacute; misma, no el objeto referido. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Sin embargo, &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;el efecto neto en el programa puede ser el mismo que el de pasar por valor o pasar por referencia:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="476ab2dd4463b39040262c013f7136f0edd5d0ec" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The meaning of &quot;reference&quot; in &quot;pass by reference&quot;&lt;/strong&gt;. The difference with the general &quot;reference&quot; term is is that &lt;strong&gt;this &quot;reference&quot; is temporary and implicit.&lt;/strong&gt; What the callee basically gets is &lt;strong&gt;a &quot;variable&quot; that is somehow &quot;the same&quot; as the original one.&lt;/strong&gt; How specifically this effect is achieved is irrelevant (e.g. the language may also expose some implementation details -- addresses, pointers, dereferencing -- this is all irrelevant; if the net effect is this, it's pass-by-reference).</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El significado de &quot;referencia&quot; en &quot;pasar por referencia&quot;&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . La diferencia con el t&amp;eacute;rmino general de &quot;referencia&quot; es que &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;esta &quot;referencia&quot; es temporal e impl&amp;iacute;cita.&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Lo que el destinatario b&amp;aacute;sicamente obtiene es &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;una &quot;variable&quot; que de alguna manera es &quot;la misma&quot; que la original.&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; La forma espec&amp;iacute;fica en que se logra este efecto es irrelevante (por ejemplo, el lenguaje tambi&amp;eacute;n puede exponer algunos detalles de implementaci&amp;oacute;n: direcciones, punteros, desreferenciaci&amp;oacute;n; todo esto es irrelevante; si el efecto neto es este, es una referencia).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a360b48a9b0e443655fd1f50a1f59496f3e6cfa6" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;1&lt;/sup&gt;&lt;sub&gt;Unless you are programming in Fortran or Visual Basic, it's not the default behavior, and in most languages in modern use, true call-by-reference is not even possible.&lt;/sub&gt;</source>
          <target state="translated">&lt;sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;1 &lt;/font&gt;&lt;/font&gt;&lt;/sup&gt;&lt;sub&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;A menos que est&amp;eacute; programando en Fortran o Visual Basic, no es el comportamiento predeterminado, y en la mayor&amp;iacute;a de los idiomas en el uso moderno, la verdadera llamada por referencia ni siquiera es posible.&lt;/font&gt;&lt;/font&gt;&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="89af967c9f1678cfe1fa5b095fa773ba45b7ab71" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;2&lt;/sup&gt;&lt;sub&gt;A fair amount of older ones support it, too&lt;/sub&gt;</source>
          <target state="translated">&lt;sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2 &lt;/font&gt;&lt;/font&gt;&lt;/sup&gt;&lt;sub&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Una buena cantidad de personas mayores tambi&amp;eacute;n lo respaldan&lt;/font&gt;&lt;/font&gt;&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="4e328db02277d9e0bf80968dad513e6575d2655f" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;3&lt;/sup&gt;&lt;sub&gt;In several modern languages, all types are reference types. This approach was pioneered by the language CLU in 1975 and has since been adopted by many other languages, including Python and Ruby. And many more languages use a hybrid approach, where some types are &quot;value types&quot; and others are &quot;reference types&quot; -- among them are C#, Java, and JavaScript.&lt;/sub&gt;</source>
          <target state="translated">&lt;sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;3 &lt;/font&gt;&lt;/font&gt;&lt;/sup&gt;&lt;sub&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En varios idiomas modernos, todos los tipos son tipos de referencia. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Este enfoque fue iniciado por el lenguaje CLU en 1975 y desde entonces ha sido adoptado por muchos otros idiomas, incluidos Python y Ruby. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Y muchos m&amp;aacute;s lenguajes utilizan un enfoque h&amp;iacute;brido, donde algunos tipos son &quot;tipos de valor&quot; y otros son &quot;tipos de referencia&quot;, entre ellos C #, Java y JavaScript.&lt;/font&gt;&lt;/font&gt;&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="36bedde2f57763554ef2a1b03c1603401bab77e8" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;4&lt;/sup&gt;&lt;sub&gt;There's nothing bad with recycling a fitting old term &lt;em&gt;per se,&lt;/em&gt; but one has to somehow make it clear which meaning is used each time. Not doing that is exactly what keeps causing confusion.&lt;/sub&gt;</source>
          <target state="translated">&lt;sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;4 &lt;/font&gt;&lt;/font&gt;&lt;/sup&gt;&lt;sub&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;No hay nada malo en reciclar un t&amp;eacute;rmino antiguo apropiado &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;per se,&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; pero uno tiene que aclarar de alguna manera qu&amp;eacute; significado se usa cada vez. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;No hacer eso es exactamente lo que sigue causando confusi&amp;oacute;n.&lt;/font&gt;&lt;/font&gt;&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="0c4436e45f8957f1cd334823decd0388dde14837" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;&lt;em&gt;parameter&lt;/em&gt;&lt;/strong&gt; (also called a &lt;em&gt;formal parameter&lt;/em&gt;) is a &lt;em&gt;variable&lt;/em&gt; which must be supplied by the caller when calling a function.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Un &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;par&amp;aacute;metro&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (tambi&amp;eacute;n llamado &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;par&amp;aacute;metro formal&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ) es una &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;variable&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que el llamador debe proporcionar al llamar a una funci&amp;oacute;n.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e6be845d8543d385fe06b210b124c8a494e883d8" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;&lt;em&gt;value&lt;/em&gt;&lt;/strong&gt; is the &lt;strong&gt;result of evaluating an expression&lt;/strong&gt; in the language. For example, in the &lt;code&gt;bar&lt;/code&gt; function above, after the line &lt;code&gt;int arg = 1;&lt;/code&gt;, the expression &lt;code&gt;arg&lt;/code&gt; has the &lt;em&gt;value&lt;/em&gt;&lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Un &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;valor&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es el &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;resultado de evaluar una expresi&amp;oacute;n&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en el lenguaje. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por ejemplo, en la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;funci&amp;oacute;n de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;bar&lt;/code&gt; ra&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; anterior, despu&amp;eacute;s de la l&amp;iacute;nea &lt;/font&gt;&lt;/font&gt; &lt;code&gt;int arg = 1;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;, la expresi&amp;oacute;n &lt;/font&gt;&lt;/font&gt; &lt;code&gt;arg&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tiene el &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;valor &lt;/font&gt;&lt;/font&gt;&lt;/em&gt; &lt;code&gt;1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e079dc36e6c16cfe3c84390e6df02765e02f9536" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;&lt;em&gt;variable&lt;/em&gt;&lt;/strong&gt; is a &lt;strong&gt;container for values&lt;/strong&gt;. A variable can be mutable (this is the default in most C-like languages), read-only (e.g. declared using Java's &lt;code&gt;final&lt;/code&gt; or C#'s &lt;code&gt;readonly&lt;/code&gt;) or deeply immutable (e.g. using C++'s &lt;code&gt;const&lt;/code&gt;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Una &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;variable&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es un &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;contenedor de valores&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Una variable puede ser mutable (este es el valor predeterminado en la mayor&amp;iacute;a de los lenguajes tipo C), de solo lectura (p. Ej., Declarada utilizando Java's &lt;/font&gt;&lt;/font&gt; &lt;code&gt;final&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; o C # 's de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;readonly&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ) o profundamente inmutable (p. Ej. Usando C ++' &lt;/font&gt;&lt;/font&gt; &lt;code&gt;const&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a677b0c64bdfeda25591da2903e6635e04d8bb09" translate="yes" xml:space="preserve">
          <source>A major difference between them is that value-type variables store values, so specifying a value-type variable in a method call passes a copy of that variable's value to the method. Reference-type variables store references to objects, so specifying a reference-type variable as an argument passes the method a copy of the actual reference that refers to the object. Even though the reference itself is passed by value, the method can still use the reference it receives to interact with&amp;mdash;and possibly modify&amp;mdash;the original object. Similarly, when returning information from a method via a return statement, the method returns a copy of the value stored in a value-type variable or a copy of the reference stored in a reference-type variable. When a reference is returned, the calling method can use that reference to interact with the referenced object. So, in effect, objects are always passed by reference.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Una diferencia importante entre ellas es que las variables de tipo de valor almacenan valores, por lo que al especificar una variable de tipo de valor en una llamada al m&amp;eacute;todo se pasa una copia del valor de esa variable al m&amp;eacute;todo. Las variables de tipo de referencia almacenan referencias a objetos, por lo que al especificar una variable de tipo de referencia como argumento se pasa al m&amp;eacute;todo una copia de la referencia real que se refiere al objeto. Aunque la referencia en s&amp;iacute; misma se pasa por valor, el m&amp;eacute;todo a&amp;uacute;n puede usar la referencia que recibe para interactuar con, y posiblemente modificar, el objeto original. De manera similar, cuando se devuelve informaci&amp;oacute;n de un m&amp;eacute;todo a trav&amp;eacute;s de una declaraci&amp;oacute;n de devoluci&amp;oacute;n, el m&amp;eacute;todo devuelve una copia del valor almacenado en una variable de tipo de valor o una copia de la referencia almacenada en una variable de tipo de referencia. Cuando se devuelve una referencia, el m&amp;eacute;todo de llamada puede usar esa referencia para interactuar con el objeto referenciado. Entonces,en efecto, los objetos siempre se pasan por referencia.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="abd7a4c1cc58474c81f17ebaa3380517415b77ff" translate="yes" xml:space="preserve">
          <source>A secondary source of confusion is the fact that &lt;strong&gt;in &quot;pass by reference&quot;, &quot;reference&quot; has a narrower meaning than the general term &quot;reference&quot;&lt;/strong&gt; (because the phrase predates it).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Una fuente secundaria de confusi&amp;oacute;n es el hecho de que &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;en &quot;pasar por referencia&quot;, &quot;referencia&quot; tiene un significado m&amp;aacute;s limitado que el t&amp;eacute;rmino general &quot;referencia&quot;&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (porque la frase lo precede).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8395df276068a15c1788c1244f7f1967b1ffd62b" translate="yes" xml:space="preserve">
          <source>Addendum: call by object sharing</source>
          <target state="translated">Adición:llamada por compartición de objetos</target>
        </trans-unit>
        <trans-unit id="e1b35360cd12c3fd13d94fe6f21d7c2fcc5d8691" translate="yes" xml:space="preserve">
          <source>An &lt;strong&gt;&lt;em&gt;argument&lt;/em&gt;&lt;/strong&gt; is a &lt;em&gt;value&lt;/em&gt; that is supplied by the caller of a function to satisfy a specific formal parameter of that function</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Un &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;argumento&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es un &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;valor&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que proporciona el llamador de una funci&amp;oacute;n para satisfacer un par&amp;aacute;metro formal espec&amp;iacute;fico de esa funci&amp;oacute;n&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3669673a915b7806f383325212faf75fa8a11a20" translate="yes" xml:space="preserve">
          <source>An actual parameter referring to &amp;ldquo;passed by value&amp;rdquo; formal parameter may be &lt;strong&gt;an expression&lt;/strong&gt; in general, so it is allowed to use not only a variable but also a literal or even a function invocation's result.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Un par&amp;aacute;metro real que se refiere al par&amp;aacute;metro formal &quot;pasado por valor&quot; puede ser &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;una expresi&amp;oacute;n&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en general, por lo que est&amp;aacute; permitido usar no solo una variable sino tambi&amp;eacute;n un resultado de invocaci&amp;oacute;n literal o incluso de funci&amp;oacute;n.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="df6b153b01adb26322ecd5d9e904e438de306d18" translate="yes" xml:space="preserve">
          <source>And an example in Java won't hurt:</source>
          <target state="translated">Y un ejemplo en Java no hará daño:</target>
        </trans-unit>
        <trans-unit id="41bfbeff0e712201c1f6a812c3156a5716a824be" translate="yes" xml:space="preserve">
          <source>And here's an example of calling this function:</source>
          <target state="translated">Y aquí hay un ejemplo de cómo llamar a esta función:</target>
        </trans-unit>
        <trans-unit id="d429697a4106347176728eb0835dcffc66d7932a" translate="yes" xml:space="preserve">
          <source>As you may see, &lt;strong&gt;this pair of techniques is almost the same as those in the definition, only with a level of indirection: just replace &quot;variable&quot; with &quot;referenced object&quot;.&lt;/strong&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Como puede ver, &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;este par de t&amp;eacute;cnicas es casi igual a las de la definici&amp;oacute;n, solo que con un nivel de indirecci&amp;oacute;n: simplemente reemplace &quot;variable&quot; con &quot;objeto referenciado&quot;.&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fca7e365e04633808c1e9f9aa4c42c53cb72f7e2" translate="yes" xml:space="preserve">
          <source>Barbara Liskov, when she invented the CLU programming language (which had these semantics), realized that the existing terms &quot;call by value&quot; and &quot;call by reference&quot; weren't particularly useful for describing the semantics of this new language. So she invented a new term: &lt;a href=&quot;https://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_sharing&quot;&gt;&lt;strong&gt;call by object sharing&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Barbara Liskov, cuando invent&amp;oacute; el lenguaje de programaci&amp;oacute;n CLU (que ten&amp;iacute;a estas sem&amp;aacute;nticas), se dio cuenta de que los t&amp;eacute;rminos existentes &quot;llamar por valor&quot; y &quot;llamar por referencia&quot; no eran particularmente &amp;uacute;tiles para describir la sem&amp;aacute;ntica de este nuevo lenguaje. Entonces ella invent&amp;oacute; un nuevo t&amp;eacute;rmino: &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_sharing&quot;&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;llamar por compartir objetos&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8923be1f7bad7119c6557d2337dcb813f8938152" translate="yes" xml:space="preserve">
          <source>Before understanding the 2 terms, you &lt;strong&gt;MUST&lt;/strong&gt; understand the following. Every object, has 2 things that can make it be distinguished.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Antes de comprender los 2 t&amp;eacute;rminos, &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;DEBE&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; comprender lo siguiente. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cada objeto tiene 2 cosas que pueden distinguirlo.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e34bfb419c41f2d2b66b3b6899800cefb3c2d265" translate="yes" xml:space="preserve">
          <source>But if you want to give the function the &lt;em&gt;ability to change the value of the variable&lt;/em&gt; as seen from the outside, you need to use &lt;strong&gt;pass by reference&lt;/strong&gt;.  As both the value and the address (reference) are passed in and available inside the function.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Pero si desea dar a la funci&amp;oacute;n la &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;capacidad de cambiar el valor de la variable&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; como se ve desde el exterior, debe usar &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;pasar por referencia&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Como tanto el valor como la direcci&amp;oacute;n (referencia) se pasan y est&amp;aacute;n disponibles dentro de la funci&amp;oacute;n.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6e61eaf9f7eacd12ce53adbf1a701c715785f2f3" translate="yes" xml:space="preserve">
          <source>C# supports pass by value and pass by reference (keyword &lt;code&gt;ref&lt;/code&gt; used at caller and called function). Jon Skeet also has a nice explanation of this &lt;a href=&quot;https://jonskeet.uk/csharp/parameters.html&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C # admite pasar por valor y pasar por referencia (palabra clave &lt;/font&gt;&lt;/font&gt; &lt;code&gt;ref&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; utilizada en la persona que llama y llamada funci&amp;oacute;n). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Jon Skeet tambi&amp;eacute;n tiene una buena explicaci&amp;oacute;n de esto &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://jonskeet.uk/csharp/parameters.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;aqu&amp;iacute;&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dcb298d2090971d85ae8a79abeefe2fbfe4a1132" translate="yes" xml:space="preserve">
          <source>C++ supports pass by value and pass by reference (reference parameter type used at called function). You will find an explanation of this below.</source>
          <target state="translated">C++soporta el valor pass by y pass by reference (tipo de parámetro de referencia utilizado en la función llamada).A continuación encontrará una explicación de esto.</target>
        </trans-unit>
        <trans-unit id="6a32afde8ee467a4cfa26db111fcf46cc30a2d73" translate="yes" xml:space="preserve">
          <source>Call by reference</source>
          <target state="translated">Llamada por referencia</target>
        </trans-unit>
        <trans-unit id="c590467a0f3956ff0e042df50b68f779090db976" translate="yes" xml:space="preserve">
          <source>Call by value</source>
          <target state="translated">Llamada por valor</target>
        </trans-unit>
        <trans-unit id="199993be9fef4c509cd7f630e2bb318e8ab6c85a" translate="yes" xml:space="preserve">
          <source>Codes</source>
          <target state="translated">Codes</target>
        </trans-unit>
        <trans-unit id="9cbd72fd910e48c58a4f702f7132ff44457c59a9" translate="yes" xml:space="preserve">
          <source>Could you give me some examples, please?</source>
          <target state="translated">¿Podría darme algunos ejemplos,por favor?</target>
        </trans-unit>
        <trans-unit id="81542fafe9576235202df625d15049ec1be0114e" translate="yes" xml:space="preserve">
          <source>Depending on the language's architecture or the &lt;em&gt;type&lt;/em&gt; (class, struct, etc.) of your object, you would be either transferring &lt;code&gt;&quot;John&quot;&lt;/code&gt; or &lt;code&gt;0x7fd5d258dd00&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Dependiendo de la arquitectura del lenguaje o del &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;tipo&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (clase, estructura, etc.) de su objeto, estar&amp;iacute;a transfiriendo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;&quot;John&quot;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; o &lt;/font&gt;&lt;/font&gt; &lt;code&gt;0x7fd5d258dd00&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0b5c518f721f8b3c6af740f2739256af35b61c4d" translate="yes" xml:space="preserve">
          <source>Either by &lt;strong&gt;passing their values to cell A2&lt;/strong&gt; by typing &lt;em&gt;= 5 + 2&lt;/em&gt; into this cell. In this case, if the values of the cells A1 or B1 change, the sum in A2 remains the same.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ya sea &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;pasando sus valores a la celda A2&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; escribiendo &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;= 5 + 2&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en esta celda. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En este caso, si los valores de las celdas A1 o B1 cambian, la suma en A2 sigue siendo la misma.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="10e9dcf2f01de94fcc4afa9703bc0c33a2cff1c7" translate="yes" xml:space="preserve">
          <source>Example(copy and use/try this yourself and see) :</source>
          <target state="translated">Ejemplo (copie y use esto usted mismo y vea):</target>
        </trans-unit>
        <trans-unit id="fb3447b632f6a431215776dcf254a01001a40c4f" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="translated">Examples:</target>
        </trans-unit>
        <trans-unit id="f584f0c48a1b0d4e3338f2ed2a5fdd472b7b090c" translate="yes" xml:space="preserve">
          <source>First and foremost, &lt;strong&gt;the &quot;pass by value vs. pass by reference&quot; distinction as defined in the CS theory is now obsolete&lt;/strong&gt; because &lt;strong&gt;the technique originally defined as &quot;pass by reference&quot; has since fallen out of favor&lt;/strong&gt; and is seldom used now.&lt;sup&gt;1&lt;/sup&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En primer lugar, &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;la distinci&amp;oacute;n &quot;pasar por valor frente a pasar por referencia&quot; tal como se define en la teor&amp;iacute;a CS ahora es obsoleta&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; porque &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;la t&amp;eacute;cnica originalmente definida como &quot;pasar por referencia&quot; ha ca&amp;iacute;do en desgracia desde entonces&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y rara vez se usa ahora. &lt;/font&gt;&lt;/font&gt;&lt;sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;1&lt;/font&gt;&lt;/font&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="eb89ac1e7f9dc9f4e4b7cf6d7e6096cb7149a6cd" translate="yes" xml:space="preserve">
          <source>For more on this, I recommend you to read about &lt;a href=&quot;https://stackoverflow.com/a/4955259/5175709&quot;&gt;dereferencing a pointer&lt;/a&gt; and also &lt;a href=&quot;https://stackoverflow.com/a/38024319/5175709&quot;&gt;why choose struct (value type) over class (reference type)&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para m&amp;aacute;s informaci&amp;oacute;n sobre esto, le recomiendo que lea sobre la &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/4955259/5175709&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;desreferenciaci&amp;oacute;n de un puntero&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y tambi&amp;eacute;n &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/38024319/5175709&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;por qu&amp;eacute; elegir struct (tipo de valor) sobre clase (tipo de referencia)&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="78f758b88546141cf025fbcc3e6f5c64139c6ee9" translate="yes" xml:space="preserve">
          <source>Going back to my metaphor above, if I'm &lt;code&gt;bar&lt;/code&gt; and you're &lt;code&gt;foo&lt;/code&gt;, when I call you, I hand you a piece of paper with a &lt;em&gt;value&lt;/em&gt; written on it. You call that piece of paper &lt;code&gt;param&lt;/code&gt;. That value is a &lt;strong&gt;copy&lt;/strong&gt; of the value I have written in my notebook (my local variables), in a variable I call &lt;code&gt;arg&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Volviendo a mi met&amp;aacute;fora anterior, si soy &lt;/font&gt;&lt;/font&gt; &lt;code&gt;bar&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y eres &lt;/font&gt;&lt;/font&gt; &lt;code&gt;foo&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , cuando te llamo, te entrego un pedazo de papel con un &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;valor&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; escrito en &amp;eacute;l. Llamas a ese pedazo de papel &lt;/font&gt;&lt;/font&gt; &lt;code&gt;param&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . Ese valor es una &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;copia&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; del valor que he escrito en mi cuaderno (mis variables locales), en una variable que llamo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;arg&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a22af7a4730db40ef83a84bd3138eb1203ab1e4d" translate="yes" xml:space="preserve">
          <source>Going back to our example above, it's equivalent to:</source>
          <target state="translated">Volviendo a nuestro ejemplo anterior,es equivalente a:</target>
        </trans-unit>
        <trans-unit id="d7eb63da0145f25b5d55241918a08d5b230c4b12" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;arg&lt;/code&gt; and &lt;code&gt;another_variable&lt;/code&gt; are completely independent variables -- their values can change independently of each other. However, at the point where &lt;code&gt;another_variable&lt;/code&gt; is declared, it is initialized to hold the same value that &lt;code&gt;arg&lt;/code&gt; holds -- which is &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Aqu&amp;iacute; &lt;/font&gt;&lt;/font&gt; &lt;code&gt;arg&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;another_variable&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; son variables completamente independientes: sus valores pueden cambiar independientemente uno del otro. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Sin embargo, en el punto en el que &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;se declara otra &lt;/font&gt;&lt;/font&gt; &lt;code&gt;another_variable&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , se inicializa para mantener el mismo valor que &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;sostiene &lt;/font&gt;&lt;/font&gt; &lt;code&gt;arg&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , que es &lt;/font&gt;&lt;/font&gt; &lt;code&gt;1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d5a3fe120383d61d87e4540a6a6708c041f6360c" translate="yes" xml:space="preserve">
          <source>Here is an example that demonstrates the differences between &lt;strong&gt;pass by value - pointer value - reference&lt;/strong&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Aqu&amp;iacute; hay un ejemplo que demuestra las diferencias entre &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;pasar por valor - valor del puntero - referencia&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="540ee2aaf7182c6dfc449b18e5accb694e3b0894" translate="yes" xml:space="preserve">
          <source>Here is an example:</source>
          <target state="translated">Aquí hay un ejemplo:</target>
        </trans-unit>
        <trans-unit id="0ea64acdc8005d5b15eb4032e4c83cca10d2689f" translate="yes" xml:space="preserve">
          <source>However, if a variable holding this reference is &lt;em&gt;reassiged,&lt;/em&gt; it will stop pointing to that object, so any further operations on this variable will instead affect whatever it is pointing to now.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Sin embargo, si una variable que contiene esta referencia se &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;vuelve a asignar,&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; dejar&amp;aacute; de apuntar a ese objeto, por lo que cualquier otra operaci&amp;oacute;n en esta variable afectar&amp;aacute; a lo que est&amp;eacute; apuntando ahora.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="630391e5a5f8a770ac2b2e52c79504fdb2316219" translate="yes" xml:space="preserve">
          <source>If I print out the page and give you the printout, I'm passing by
  value. Your page is a disconnected copy of the original. You won't see
  any subsequent changes, and any changes that you make (e.g. scribbling
  on your printout) will not show up on the original page. If you
  destroy the printout, you have actually destroyed your copy of the
  object - but the original web page remains intact.</source>
          <target state="translated">Si imprimo la página y te doy la impresión,estoy pasando de valor.Su página es una copia desconectada del original.No verás ningún cambio posterior,y cualquier cambio que hagas (por ejemplo,garabatear en tu impresión)no aparecerá en la página original.Si destruyes la impresión,en realidad has destruido tu copia del objeto-pero la página web original permanece intacta.</target>
        </trans-unit>
        <trans-unit id="fa1eae8f868f8ccec251540cf83a6d999d96bd33" translate="yes" xml:space="preserve">
          <source>If a reference is just taken from a caller's variable and passed as an argument, this has the same effect as pass-by-reference: if the referred object is &lt;em&gt;mutated&lt;/em&gt; in the callee, the caller will see the change.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si se toma una referencia de la variable de la persona que llama y se pasa como argumento, esto tiene el mismo efecto que la referencia de paso: si el objeto referido est&amp;aacute; &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;mutado&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en la persona que llama, la persona que llama ver&amp;aacute; el cambio.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b6671658fcd898e40c481710de5eb11d030070e4" translate="yes" xml:space="preserve">
          <source>If what that reference type (that is, pointer) points to is &lt;strong&gt;mutable&lt;/strong&gt; then an interesting effect is possible: you can modify the pointed-to value, and the caller can observe changes to the pointed-to value, even though the caller cannot observe changes to the pointer itself.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si lo que se&amp;ntilde;ala ese tipo de referencia (es decir, el puntero) es &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;mutable,&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; entonces es posible un efecto interesante: puede modificar el valor se&amp;ntilde;alado y la persona que llama puede observar los cambios en el valor se&amp;ntilde;alado, aunque la persona que llama no puede observar cambia al puntero mismo.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c7d58c687c27bf3e8c08e37865c6064bb8181f24" translate="yes" xml:space="preserve">
          <source>If what you have is &lt;em&gt;call by value&lt;/em&gt;, but the actual value is a &lt;em&gt;reference type&lt;/em&gt; or &lt;em&gt;pointer type&lt;/em&gt;, then the &quot;value&quot; itself isn't very interesting (e.g. in C it's just an integer of a platform-specific size) -- what's interesting is what that value &lt;strong&gt;points to&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si lo que tiene es &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;llamar por valor&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , pero el valor real es un &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;tipo de referencia&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; o &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;un &lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;tipo de &lt;/font&gt;&lt;/em&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;puntero&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , entonces el &quot;valor&quot; en s&amp;iacute; mismo no es muy interesante (por ejemplo, en C es solo un n&amp;uacute;mero entero de un tama&amp;ntilde;o espec&amp;iacute;fico de plataforma) interesante es a lo que &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;apunta&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ese valor &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="19bdf40bf0d0910a0274641de9caa509c06e2fd2" translate="yes" xml:space="preserve">
          <source>If you don't want to change the value of the original variable after passing it into a function, the function should be constructed with a &quot;&lt;strong&gt;pass by value&lt;/strong&gt;&quot; parameter.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si no desea cambiar el valor de la variable original despu&amp;eacute;s de pasarla a una funci&amp;oacute;n, la funci&amp;oacute;n debe construirse con un &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;par&amp;aacute;metro &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&quot; &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;pasar por valor&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &quot;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ec3a32a259d75495fafcc2de084612d021f12bfe" translate="yes" xml:space="preserve">
          <source>If your value is VAR1 = &quot;Happy Guy!&quot;, you will only see &quot;Happy Guy!&quot;. If VAR1 changes to &quot;Happy Gal!&quot;, you won't know that. If it's passed by reference, and VAR1 changes, you will.</source>
          <target state="translated">Si tu valor es VAR1=&quot;Happy Guy!&quot;,sólo verás &quot;Happy Guy!&quot;.Si el VAR1 cambia a &quot;Happy Gal!&quot;,no lo sabrás.Si se pasa por referencia,y el VAR1 cambia,lo sabrás.</target>
        </trans-unit>
        <trans-unit id="9df5b20fed798fcf664fc2cac5f32abdc432a314" translate="yes" xml:space="preserve">
          <source>In &lt;em&gt;call by reference&lt;/em&gt;, the function's formal parameters are simply &lt;em&gt;new names&lt;/em&gt; for the same variables that the caller supplies as arguments.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En la &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;llamada por referencia&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , los par&amp;aacute;metros formales de la funci&amp;oacute;n son simplemente &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;nuevos nombres&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para las mismas variables que el llamador proporciona como argumentos.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9fcb8fa70e178c7bf61dd1f973de055411e8bcb0" translate="yes" xml:space="preserve">
          <source>In &lt;em&gt;call by value&lt;/em&gt;, the function's formal parameters are variables that are newly created for the function invocation, and which are initialized with the &lt;em&gt;values&lt;/em&gt; of their arguments.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En la &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;llamada por valor&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , los par&amp;aacute;metros formales de la funci&amp;oacute;n son variables que se crean recientemente para la invocaci&amp;oacute;n de la funci&amp;oacute;n y que se inicializan con los &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;valores&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; de sus argumentos.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f9765a7cb94195661a7f370a640e70f9e99a5beb" translate="yes" xml:space="preserve">
          <source>In c#, to pass a variable by reference so the called method can modify the variable's, C# provides keywords ref and out. Applying the ref keyword to a parameter declaration allows you to pass a variable to a method by reference&amp;mdash;the called method will be able to modify the original variable in the caller. The ref keyword is used for variables that already have been initialized in the calling method. Normally, when a method call contains an uninitialized variable as an argument, the compiler generates an error. Preceding a parameter with keyword out creates an output parameter. This indicates to the compiler that the argument will be passed into the called method by reference and that the called method will assign a value to the original variable in the caller. If the method does not assign a value to the output parameter in every possible path of execution, the compiler generates an error. This also prevents the compiler from generating an error message for an uninitialized variable that is passed as an argument to a method. A method can return only one value to its caller via a return statement, but can return many values by specifying multiple output (ref and/or out) parameters.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En c #, para pasar una variable por referencia para que el m&amp;eacute;todo llamado pueda modificar la variable, C # proporciona palabras clave ref y out. La aplicaci&amp;oacute;n de la palabra clave ref a una declaraci&amp;oacute;n de par&amp;aacute;metro le permite pasar una variable a un m&amp;eacute;todo por referencia: el m&amp;eacute;todo llamado podr&amp;aacute; modificar la variable original en la persona que llama. La palabra clave ref se usa para variables que ya se han inicializado en el m&amp;eacute;todo de llamada. Normalmente, cuando una llamada al m&amp;eacute;todo contiene una variable no inicializada como argumento, el compilador genera un error. Preceder un par&amp;aacute;metro con una palabra clave fuera crea un par&amp;aacute;metro de salida. Esto indica al compilador que el argumento se pasar&amp;aacute; al m&amp;eacute;todo llamado por referencia y que el m&amp;eacute;todo llamado asignar&amp;aacute; un valor a la variable original en la persona que llama.Si el m&amp;eacute;todo no asigna un valor al par&amp;aacute;metro de salida en cada ruta de ejecuci&amp;oacute;n posible, el compilador genera un error. Esto tambi&amp;eacute;n evita que el compilador genere un mensaje de error para una variable no inicializada que se pasa como argumento a un m&amp;eacute;todo. Un m&amp;eacute;todo puede devolver solo un valor a su llamador a trav&amp;eacute;s de una declaraci&amp;oacute;n de retorno, pero puede devolver muchos valores especificando m&amp;uacute;ltiples par&amp;aacute;metros de salida (ref y / o out).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d5d1084df8b586952d88c19794aba535a677bb9e" translate="yes" xml:space="preserve">
          <source>In functional languages, &lt;em&gt;all&lt;/em&gt; objects are immutable.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En lenguajes funcionales, &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;todos los&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; objetos son inmutables.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f09a33520d9524be4917a785dc2f550ba4444582" translate="yes" xml:space="preserve">
          <source>In metaphoric terms:</source>
          <target state="translated">En términos metafóricos:</target>
        </trans-unit>
        <trans-unit id="75b8b82f07e813f25f8aa777b9ad069324f2f151" translate="yes" xml:space="preserve">
          <source>In short, Passed by value is WHAT it is and passed by reference is WHERE it is.</source>
          <target state="translated">En resumen,Pasado por valor es QUÉ es y pasado por referencia es DÓNDE es.</target>
        </trans-unit>
        <trans-unit id="cfc7e8a70761c2025ad727e8d569d9aa259077f5" translate="yes" xml:space="preserve">
          <source>In simplest terms:</source>
          <target state="translated">En términos más sencillos:</target>
        </trans-unit>
        <trans-unit id="7b2b2cee7ff2dff249b369b6c32127d56013526f" translate="yes" xml:space="preserve">
          <source>In some languages, some object types are &quot;immutable&quot;: any operation on them that seems to alter the value actually creates a completely new object without affecting the original one. So, passing an object of such a type as an argument always has the effect of pass-by-value: a copy for the callee will be made automatically if and when it needs a change, and the caller's object will never be affected.</source>
          <target state="translated">En algunos idiomas,algunos tipos de objetos son &quot;inmutables&quot;:cualquier operación sobre ellos que parezca alterar el valor crea en realidad un objeto completamente nuevo sin afectar al original.Por lo tanto,pasar un objeto de tal tipo como un argumento siempre tiene el efecto de pasar por valor:una copia para el callejero se hará automáticamente si y cuando necesite un cambio,y el objeto del que llama nunca se verá afectado.</target>
        </trans-unit>
        <trans-unit id="f5a4682c4e96457401f2d267cf5d3759e71ca397" translate="yes" xml:space="preserve">
          <source>In this case, &lt;code&gt;param&lt;/code&gt; doesn't just have the same &lt;em&gt;value&lt;/em&gt; as &lt;code&gt;arg&lt;/code&gt;, it actually &lt;strong&gt;is&lt;/strong&gt;&lt;code&gt;arg&lt;/code&gt; (just by a different name) and so &lt;code&gt;bar&lt;/code&gt; can observe that &lt;code&gt;arg&lt;/code&gt; has been incremented.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En este caso, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;param&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; no solo tiene el mismo &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;valor&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que &lt;/font&gt;&lt;/font&gt; &lt;code&gt;arg&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , en realidad &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;es &lt;/font&gt;&lt;/font&gt;&lt;/strong&gt; &lt;code&gt;arg&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (solo por un nombre diferente) y la &lt;/font&gt;&lt;/font&gt; &lt;code&gt;bar&lt;/code&gt; ra&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; puede observar que &lt;/font&gt;&lt;/font&gt; &lt;code&gt;arg&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; se ha incrementado.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1e8b5f3c56ea99edf6fe3538b9c9f5dbd50e45e9" translate="yes" xml:space="preserve">
          <source>It is exactly as if we had written the code this way:</source>
          <target state="translated">Es exactamente como si hubiéramos escrito el código de esta manera:</target>
        </trans-unit>
        <trans-unit id="ba2017f01d4b5e3837a6cc39aa2641361c7e5fc4" translate="yes" xml:space="preserve">
          <source>It's a way how to pass arguments to functions. Passing by reference means the called functions' parameter will be the same as the callers' passed argument (not the value, but the identity - the variable itself). Pass by value means the called functions' parameter will be a copy of the callers' passed argument. The value will be the same, but the identity - the variable - is different. Thus changes to a parameter done by the called function in one case changes the argument passed and in the other case just changes the value of the parameter in the called function (which is only a copy). In a quick hurry:</source>
          <target state="translated">Es una forma de pasar argumentos a las funciones.Pasar por referencia significa que el parámetro de las funciones llamadas será el mismo que el argumento pasado por los llamantes (no el valor,sino la identidad-la propia variable).Pasar por valor significa que el parámetro de las funciones llamadas será una copia del argumento pasado por los llamantes.El valor será el mismo,pero la identidad-la variable-es diferente.Así,los cambios en un parámetro realizados por la función llamada en un caso cambian el argumento pasado y en el otro caso sólo cambia el valor del parámetro en la función llamada (que es sólo una copia).En un rápido apuro:</target>
        </trans-unit>
        <trans-unit id="94f1506dff6edaaf3a991ae077be7ac2ad3c295c" translate="yes" xml:space="preserve">
          <source>Its address.</source>
          <target state="translated">Su dirección.</target>
        </trans-unit>
        <trans-unit id="cb05b65db2ada43f4ca193e8ea8a1ed4e1835444" translate="yes" xml:space="preserve">
          <source>Its value.</source>
          <target state="translated">Su valor.</target>
        </trans-unit>
        <trans-unit id="e5664650fb653cb60de46dc4ef48efc29582cb58" translate="yes" xml:space="preserve">
          <source>Java only supports pass by value. Always copies arguments, even though when copying a reference to an object, the parameter in the called function will point to the same object and changes to that object will be see in the caller. Since this can be confusing, &lt;a href=&quot;https://jonskeet.uk/java/passing.html&quot;&gt;here&lt;/a&gt; is what Jon Skeet has to say about this.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Java solo admite pasar por valor. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Siempre copia argumentos, aunque al copiar una referencia a un objeto, el par&amp;aacute;metro en la funci&amp;oacute;n llamada apuntar&amp;aacute; al mismo objeto y los cambios a ese objeto se ver&amp;aacute;n en la persona que llama. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Como esto puede ser confuso, &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://jonskeet.uk/java/passing.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;esto&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es lo que Jon Skeet tiene que decir al respecto.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6c1d8c26323a44450c9027c438c65ae1f40230b0" translate="yes" xml:space="preserve">
          <source>Keep it simple, peeps. Walls of text can be a bad habit.</source>
          <target state="translated">Manténgalo simple,pío.Las paredes de texto pueden ser un mal hábito.</target>
        </trans-unit>
        <trans-unit id="5b3839d4cab4b2e3b7cbd1e829e6fe9b7ce91854" translate="yes" xml:space="preserve">
          <source>Many answers here (and in particular the most highly upvoted answer) are factually incorrect, since they misunderstand what &quot;call by reference&quot; really means. Here's my attempt to set matters straight.</source>
          <target state="translated">Muchas de las respuestas aquí (y en particular la más votada)son objetivamente incorrectas,ya que malinterpretan lo que realmente significa &quot;llamar por referencia&quot;.Aquí está mi intento de aclarar las cosas.</target>
        </trans-unit>
        <trans-unit id="9710ae38811b064e0b66a99f285a0b262bd760b6" translate="yes" xml:space="preserve">
          <source>Note that C++ has a notion of &quot;references&quot; (e.g. &lt;code&gt;int&amp;amp;&lt;/code&gt;) that is &lt;strong&gt;not&lt;/strong&gt; like Java and C#'s &quot;reference types&quot;, but &lt;strong&gt;is&lt;/strong&gt; like &quot;call by reference&quot;. Java and C#'s &quot;reference types&quot;, and &lt;em&gt;all&lt;/em&gt; types in Python, are like what C and C++ call &quot;pointer types&quot; (e.g. &lt;code&gt;int*&lt;/code&gt;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tenga en cuenta que C ++ tiene una noci&amp;oacute;n de &quot;referencias&quot; (por ejemplo, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;int&amp;amp;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ) que &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;no&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;como los &quot;tipos de referencia&quot; de Java y C #, pero &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;es&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; como &quot;llamada por referencia&quot;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Los &quot;tipos de referencia&quot; de Java y C #, y &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;todos los&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tipos en Python, son como lo que C y C ++ llaman &quot;tipos de puntero&quot; (por ejemplo, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;int*&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e21567e8b73fa84c73ad77ce9ab401836a697b6a" translate="yes" xml:space="preserve">
          <source>Note that both of these concepts are completely independent and orthogonal from the concept of &lt;strong&gt;&lt;em&gt;reference types&lt;/em&gt;&lt;/strong&gt; (which in Java is all types that are subtypes of &lt;code&gt;Object&lt;/code&gt;, and in C# all &lt;code&gt;class&lt;/code&gt; types), or the concept of &lt;strong&gt;&lt;em&gt;pointer types&lt;/em&gt;&lt;/strong&gt; like in C (which are semantically equivalent to Java's &quot;reference types&quot;, simply with different syntax).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tenga en cuenta que ambos conceptos son completamente independientes y ortogonales del concepto de &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;tipos&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; de &lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;referencia&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (que en Java todos los tipos son subtipos de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Object&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , y en C # todos &lt;/font&gt;&lt;/font&gt; &lt;code&gt;class&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tipos de &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;clase&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ), o el concepto de &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;tipos&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; de &lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;puntero&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; como en C (que son sem&amp;aacute;nticamente equivalente a los &quot;tipos de referencia&quot; de Java, simplemente con una sintaxis diferente).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="25a6d90028e0300096155b3ce6dd2dc1ade7a134" translate="yes" xml:space="preserve">
          <source>Note that this is &lt;strong&gt;not&lt;/strong&gt; how any of Java, JavaScript, C, Objective-C, Python, or nearly any other popular language today works. This means that those languages are &lt;strong&gt;not&lt;/strong&gt; call by reference, they are call by value.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tenga en cuenta que &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;no&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es &lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;as&amp;iacute;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; como funciona Java, JavaScript, C, Objective-C, Python o casi cualquier otro lenguaje popular en la actualidad. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esto significa que esos idiomas &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;no se&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; llaman por referencia, se llaman por valor.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="11faf91e92f213fd28d8e40291fa909c4638b55f" translate="yes" xml:space="preserve">
          <source>Now, the authentic definition is:</source>
          <target state="translated">Ahora,la definición auténtica es:</target>
        </trans-unit>
        <trans-unit id="1a7b7352a1f0297c61dfa9212c688746676823a8" translate="yes" xml:space="preserve">
          <source>OK, here's the longer and more formal explanation.</source>
          <target state="translated">Bien,aquí está la explicación más larga y formal.</target>
        </trans-unit>
        <trans-unit id="0c5eb5d154c5c29f403e372daae7202076e989a5" translate="yes" xml:space="preserve">
          <source>Or by &lt;strong&gt;passing the &amp;ldquo;references&amp;rdquo; of the cells A1 and B1 to cell A2&lt;/strong&gt; by typing &lt;em&gt;= A1 + B1&lt;/em&gt;. In this case, if the values of the cells A1 or B1 change, the sum in A2 changes too.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;O &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;pasando las &quot;referencias&quot; de las celdas A1 y B1 a la celda A2&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; escribiendo &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;= A1 + B1&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . En este caso, si los valores de las celdas A1 o B1 cambian, la suma en A2 tambi&amp;eacute;n cambia.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3c8941d187c94e6a53e6ff3cad0dfdb27bb7fe5b" translate="yes" xml:space="preserve">
          <source>Pass by reference - The function uses the original variable, if you change the variable in the other function, it changes in the original variable too.</source>
          <target state="translated">Pasar por referencia-La función utiliza la variable original,si cambias la variable en la otra función,también cambia en la variable original.</target>
        </trans-unit>
        <trans-unit id="8f16241a59b751eb6cbff39b6de4f8cbc02de729" translate="yes" xml:space="preserve">
          <source>Pass by value - The function copies the variable and works with a copy(so it doesn't change anything in the original variable)</source>
          <target state="translated">Pass by value-La función copia la variable y trabaja con una copia (por lo que no cambia nada en la variable original)</target>
        </trans-unit>
        <trans-unit id="2cef6b37dfa17bb4e917392a148503b1c3db7641" translate="yes" xml:space="preserve">
          <source>Pass by value sends a COPY of the data stored in the variable you specify, pass by reference sends a direct link to the variable itself. So if you pass a variable by reference and then change the variable inside the block you passed it into, the original variable will be changed. If you simply pass by value, the original variable will not be able to be changed by the block you passed it into but you will get a copy of whatever it contained at the time of the call.</source>
          <target state="translated">Pass by value envía una COPIA de los datos almacenados en la variable que especificas,pass by reference envía un enlace directo a la propia variable.Así que si pasas una variable por referencia y luego cambias la variable dentro del bloque en el que la pasaste,la variable original será cambiada.Si simplemente pasas por valor,la variable original no podrá ser cambiada por el bloque en el que la pasaste pero obtendrás una copia de lo que contenía en el momento de la llamada.</target>
        </trans-unit>
        <trans-unit id="7365595bf985eac947edb497d85b84b024d6e69c" translate="yes" xml:space="preserve">
          <source>Passing &lt;code&gt;&quot;John&quot;&lt;/code&gt; is known as passing by value.
Passing &lt;code&gt;0x7fd5d258dd00&lt;/code&gt; is known as passing by reference. Anyone who is pointing to this memory location will have access to the value of &lt;code&gt;&quot;John&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Pasar &lt;/font&gt;&lt;/font&gt; &lt;code&gt;&quot;John&quot;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; se conoce como pasar por valor. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Pasar &lt;/font&gt;&lt;/font&gt; &lt;code&gt;0x7fd5d258dd00&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; se conoce como pasar por referencia. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cualquiera que se&amp;ntilde;ale esta ubicaci&amp;oacute;n de memoria tendr&amp;aacute; acceso al valor de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;&quot;John&quot;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d38f5cddd05d2c12e8c98ba1859c152cdc3283d4" translate="yes" xml:space="preserve">
          <source>Say I want to share a web page with you. If I tell you the URL, I'm
  passing by reference. You can use that URL to see the same web page I
  can see. If that page is changed, we both see the changes. If you
  delete the URL, all you're doing is destroying your reference to that
  page - you're not deleting the actual page itself.</source>
          <target state="translated">Digamos que quiero compartir una página web con usted.Si te digo la URL,paso por referencia.Puedes usar esa URL para ver la misma página web que yo puedo ver.Si esa página se cambia,ambos vemos los cambios.Si borras el URL,lo único que haces es destruir la referencia a esa página,no estás borrando la página en sí.</target>
        </trans-unit>
        <trans-unit id="769fab7e33db0e3c0fa3cee12bf821f3bc133b91" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;param&lt;/code&gt; is just another name for &lt;code&gt;arg&lt;/code&gt; -- that is, they are &lt;strong&gt;the same variable&lt;/strong&gt;, changes to &lt;code&gt;param&lt;/code&gt; are reflected in &lt;code&gt;arg&lt;/code&gt;. This is the fundamental way in which call by reference differs from call by value.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Como &lt;/font&gt;&lt;/font&gt; &lt;code&gt;param&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es solo otro nombre para &lt;/font&gt;&lt;/font&gt; &lt;code&gt;arg&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , es decir, son &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;la misma variable&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , los cambios en &lt;/font&gt;&lt;/font&gt; &lt;code&gt;param&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; se reflejan en &lt;/font&gt;&lt;/font&gt; &lt;code&gt;arg&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esta es la forma fundamental en que la llamada por referencia difiere de la llamada por valor.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="aa853ceca90648f762403773e3de5553e252a245" translate="yes" xml:space="preserve">
          <source>Since my language is C++, i will use that here</source>
          <target state="translated">Como mi lenguaje es C++,lo usaré aquí</target>
        </trans-unit>
        <trans-unit id="4d14885da8ef3abbd0aac02bbdd40f4cb5cb0c92" translate="yes" xml:space="preserve">
          <source>Since they are independent variables, changes to &lt;code&gt;another_variable&lt;/code&gt; do not affect &lt;code&gt;arg&lt;/code&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Como son variables independientes, los cambios en otra &lt;/font&gt;&lt;/font&gt; &lt;code&gt;another_variable&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; no afectan a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;arg&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f74a09526b6f4507d6e6e460766a660e64c1c9a2" translate="yes" xml:space="preserve">
          <source>So if you say &lt;code&gt;employee.name = &quot;John&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Entonces, si dices &lt;/font&gt;&lt;/font&gt; &lt;code&gt;employee.name = &quot;John&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5ff57f4185e884322f43c9c59da60f12f41285ea" translate="yes" xml:space="preserve">
          <source>TL;DR</source>
          <target state="translated">TL;DR</target>
        </trans-unit>
        <trans-unit id="21d278837034557e7a9b46210d42d6e7b8075142" translate="yes" xml:space="preserve">
          <source>Terminology</source>
          <target state="translated">Terminology</target>
        </trans-unit>
        <trans-unit id="d31fc6d67ad1df7e3be5c88469148d24d3fb8731" translate="yes" xml:space="preserve">
          <source>That is, the defining characteristic of what &lt;em&gt;call by value&lt;/em&gt; means is that the callee (&lt;code&gt;foo&lt;/code&gt; in this case) receives &lt;em&gt;values&lt;/em&gt; as arguments, but has its own separate &lt;em&gt;variables&lt;/em&gt; for those values from the variables of the caller (&lt;code&gt;bar&lt;/code&gt; in this case).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Es decir, la caracter&amp;iacute;stica definitoria de lo que &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;significa &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;llamar por valor&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es que la persona que llama ( &lt;/font&gt;&lt;/font&gt; &lt;code&gt;foo&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en este caso) recibe &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;valores&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; como argumentos, pero tiene sus propias &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;variables&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; separadas &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;para esos valores de las variables de la persona que llama ( &lt;/font&gt;&lt;/font&gt; &lt;code&gt;bar&lt;/code&gt; ra&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en este caso).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f94b8d74275151f850f2fd1a3b7a581bfe0b7b47" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;passing by reference&amp;rdquo; method has &lt;strong&gt;an important limitation&lt;/strong&gt;. If a parameter is declared as &lt;strong&gt;passed by reference&lt;/strong&gt; (so it is preceded by the &amp;amp; sign) its corresponding &lt;strong&gt;actual parameter must be a variable&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El m&amp;eacute;todo de &quot;pasar por referencia&quot; tiene &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;una limitaci&amp;oacute;n importante&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si un par&amp;aacute;metro se declara como &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;aprobado por referencia&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (por lo que est&amp;aacute; precedido por el signo &amp;amp;), su &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;par&amp;aacute;metro real&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; correspondiente &lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;debe ser una variable&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1c3de59e30bc1afb18206d5c04209b97a3a36b22" translate="yes" xml:space="preserve">
          <source>The caller can just make a private copy before the call and give the callee a reference to that instead.</source>
          <target state="translated">El que llama puede hacer una copia privada antes de la llamada y dar a la persona que llama una referencia a eso.</target>
        </trans-unit>
        <trans-unit id="45b626a8f90c2c072269296274cf38f84db12637" translate="yes" xml:space="preserve">
          <source>The function is not able to place a value in something other than a variable. It cannot assign a new value to a literal or force an expression to change its result.</source>
          <target state="translated">La función no es capaz de colocar un valor en algo que no sea una variable.No puede asignar un nuevo valor a un literal o forzar una expresión para cambiar su resultado.</target>
        </trans-unit>
        <trans-unit id="190ddc465ed862913bd6475d00cd62643198af5b" translate="yes" xml:space="preserve">
          <source>The notion of &lt;em&gt;reference type&lt;/em&gt; corresponds to a URL: it is both itself a piece of information, and it is a &lt;em&gt;reference&lt;/em&gt; (a &lt;em&gt;pointer&lt;/em&gt;, if you will) to other information. You can have many copies of a URL in different places, and they don't change what website they all link to; if the website is updated then every URL copy will still lead to the updated information. Conversely, changing the URL in any one place won't affect any other written copy of the URL.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La noci&amp;oacute;n de &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;tipo&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; de &lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;referencia&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; corresponde a una URL: es a la vez una pieza de informaci&amp;oacute;n, y es una &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;referencia&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (un &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;puntero&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , si lo desea) a otra informaci&amp;oacute;n. Puede tener muchas copias de una URL en diferentes lugares, y no cambian a qu&amp;eacute; sitio web enlazan; si el sitio web se actualiza, cada copia de la URL seguir&amp;aacute; conduciendo a la informaci&amp;oacute;n actualizada. Por el contrario, cambiar la URL en cualquier lugar no afectar&amp;aacute; a ninguna otra copia escrita de la URL.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c93eff5a81a6148f1801b93e4301a07244413b0a" translate="yes" xml:space="preserve">
          <source>The other important pair of concepts to distinguish is &lt;em&gt;parameter&lt;/em&gt; versus &lt;em&gt;argument&lt;/em&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El otro par importante de conceptos para distinguir es &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;par&amp;aacute;metro&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; versus &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;argumento&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="94c281cf3a774b1a26c406b830c7abb77ff1de96" translate="yes" xml:space="preserve">
          <source>The simplest way to get this is on an Excel file. Let&amp;rsquo;s say for example that you have two numbers, 5 and 2 in cells A1 and B1 accordingly, and you want to find their sum in a third cell, let's say A2. 
You can do this in two ways.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La forma m&amp;aacute;s sencilla de obtener esto es en un archivo de Excel. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Digamos, por ejemplo, que tiene dos n&amp;uacute;meros, 5 y 2 en las celdas A1 y B1 en consecuencia, y desea encontrar su suma en una tercera celda, digamos A2. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Puede hacer esto de dos maneras.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="77b08d764936332f1c4a209a262d287059da0b8c" translate="yes" xml:space="preserve">
          <source>Then the function will have ONLY the value but not the address of the passed in variable.  Without the variable's address, the code inside the function cannot change the variable value as seen from the outside of the function.</source>
          <target state="translated">Entonces la función tendrá SOLAMENTE el valor pero no la dirección de la variable pasada.Sin la dirección de la variable,el código dentro de la función no puede cambiar el valor de la variable visto desde el exterior de la función.</target>
        </trans-unit>
        <trans-unit id="5c1ac7683dd2ba07c2d671bc98b47e867ed3e464" translate="yes" xml:space="preserve">
          <source>There are two very important sets of concepts to distinguish here. The first is &lt;em&gt;value&lt;/em&gt; versus &lt;em&gt;variable&lt;/em&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Hay dos conjuntos de conceptos muy importantes para distinguir aqu&amp;iacute;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El primero es el &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;valor&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; versus la &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;variable&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="67c8b2743fe3552af6854154bf070d6a35748339" translate="yes" xml:space="preserve">
          <source>There's no agreed-upon name for them, which leads to contorted explanations like &quot;call by value where the value is a reference&quot;. In 1975, Barbara Liskov suggested the term &quot;&lt;a href=&quot;https://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_sharing&quot;&gt;call-by-object-sharing&lt;/a&gt;&quot; (or sometimes just &quot;call-by-sharing&quot;) though it never quite caught on. Moreover, neither of these phrases draws a parallel with the original pair. No wonder the old terms ended up being reused in the absense of anything better, leading to confusion.&lt;sup&gt;4&lt;/sup&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;No hay un nombre acordado para ellos, lo que lleva a explicaciones contorsionadas como &quot;llamar por valor donde el valor es una referencia&quot;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En 1975, Barbara Liskov sugiri&amp;oacute; el t&amp;eacute;rmino &quot; &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_sharing&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;llamada por compartir objetos&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &quot; (o, a veces, simplemente &quot;llamada por compartir&quot;), aunque nunca lo entendi&amp;oacute; del todo. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Adem&amp;aacute;s, ninguna de estas frases dibuja un paralelo con el par original. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;No es de extra&amp;ntilde;ar que los viejos t&amp;eacute;rminos terminaron siendo reutilizados en ausencia de algo mejor, lo que lleva a la confusi&amp;oacute;n. &lt;/font&gt;&lt;/font&gt;&lt;sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;4 4&lt;/font&gt;&lt;/font&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="1a3c5494a5a75f6fb10faba056b9c5de60d735aa" translate="yes" xml:space="preserve">
          <source>Things to note in this definition are:</source>
          <target state="translated">Lo que hay que tener en cuenta en esta definición es:</target>
        </trans-unit>
        <trans-unit id="2a017f7a7d98147440fdc82f0593882be018c5ee" translate="yes" xml:space="preserve">
          <source>This guy pretty much nails it:</source>
          <target state="translated">Este tipo lo ha clavado:</target>
        </trans-unit>
        <trans-unit id="67d81ca73043d11fe3f8c75a12d2f9ca29721b63" translate="yes" xml:space="preserve">
          <source>This is &lt;em&gt;mostly&lt;/em&gt; correct &lt;em&gt;except&lt;/em&gt; the narrower meaning of &quot;reference&quot; -- it being both temporary and implicit (it doesn't have to, but being explicit and/or persistent are additional features, not a part of the pass-by-reference semantic, as explained above). A closer analogy would be giving you a copy of a document vs inviting you to work on the original.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esto es en &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;su mayor&amp;iacute;a&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; correcto, &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;excepto&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; el significado m&amp;aacute;s restringido de &quot;referencia&quot;, ya que es temporal e impl&amp;iacute;cito (no es necesario, pero ser expl&amp;iacute;cito y / o persistente son caracter&amp;iacute;sticas adicionales, no una parte de la sem&amp;aacute;ntica de paso por referencia , como se explic&amp;oacute; anteriormente). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Una analog&amp;iacute;a m&amp;aacute;s cercana ser&amp;iacute;a darle una copia de un documento en lugar de invitarlo a trabajar en el original.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="42e154984413d3a0e1f3424a4c64ba4b1d7f0c9a" translate="yes" xml:space="preserve">
          <source>This is exactly the same as the relationship between &lt;code&gt;arg&lt;/code&gt; and &lt;code&gt;param&lt;/code&gt; in our example above, which I'll repeat here for symmetry:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esto es exactamente lo mismo que la relaci&amp;oacute;n entre &lt;/font&gt;&lt;/font&gt; &lt;code&gt;arg&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;param&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en nuestro ejemplo anterior, que repetir&amp;eacute; aqu&amp;iacute; por simetr&amp;iacute;a:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="44c8affdf0e689b408ca95ed21c4a0efd6e07546" translate="yes" xml:space="preserve">
          <source>This is now considered bad practice (as an implicit dependency). As such, &lt;strong&gt;virtually all newer languages are exclusively, or almost exclusively pass-by-value.&lt;/strong&gt; Pass-by-reference is now chiefly used in the form of &quot;output/inout arguments&quot; in languages where a function cannot return more than one value.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esto ahora se considera una mala pr&amp;aacute;ctica (como una dependencia impl&amp;iacute;cita). Como tal, &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;pr&amp;aacute;cticamente todos los idiomas m&amp;aacute;s nuevos son exclusivos, o casi exclusivamente, de paso por valor.&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Pass-by-reference ahora se usa principalmente en forma de &quot;argumentos de salida / entrada&quot; en lenguajes donde una funci&amp;oacute;n no puede devolver m&amp;aacute;s de un valor.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c858b2ee157703a151db735a41b42594c23c01dd" translate="yes" xml:space="preserve">
          <source>This works exactly the same way that any other kinds of variables are initialized with values. For example:</source>
          <target state="translated">Esto funciona exactamente de la misma manera que cualquier otro tipo de variables se inicializan con valores.Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="930d70a4cc644b0157557de3bcd43f5beca8c742" translate="yes" xml:space="preserve">
          <source>To borrow the analogy of the URL again, the fact that I gave you a &lt;strong&gt;copy&lt;/strong&gt; of the URL to a website is not particularly interesting if the thing we both care about is the website, not the URL. The fact that you scribbling over your copy of the URL doesn't affect my copy of the URL isn't a thing we care about (and in fact, in languages like Java and Python the &quot;URL&quot;, or reference type value, can't be modified at all, only the thing pointed to by it can).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para tomar prestada la analog&amp;iacute;a de la URL nuevamente, el hecho de que le haya dado una &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;copia&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; de la URL a un sitio web no es particularmente interesante si lo que nos importa es el sitio web, no la URL. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El hecho de que garabatee sobre su copia de la URL no afecta mi copia de la URL no es algo que nos importe (y de hecho, en lenguajes como Java y Python, la &quot;URL&quot;, o valor de tipo de referencia, puede No se puede modificar en absoluto, solo lo que se&amp;ntilde;ala puede hacerlo).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a4a7f5fbf58a7664de63656b8f081d1bd98c4ef3" translate="yes" xml:space="preserve">
          <source>To have the same effect as pass-by-value, a copy of the object is made at some point. Options include:</source>
          <target state="translated">Para que tenga el mismo efecto que el valor de paso,se hace una copia del objeto en algún momento.Las opciones incluyen:</target>
        </trans-unit>
        <trans-unit id="fecc83247ac04fdaaf06ee439eda04776c92bdfc" translate="yes" xml:space="preserve">
          <source>To start with, I want to highlight some important bits of terminology, to help clarify my answer and to ensure we're all referring to the same ideas when we are using words. (In practice, I believe the vast majority of confusion about topics such as these stems from using words in ways that to not fully communicate the meaning that was intended.)</source>
          <target state="translated">Para empezar,quiero resaltar algunas partes importantes de la terminología,para ayudar a aclarar mi respuesta y asegurarme de que todos nos referimos a las mismas ideas cuando usamos palabras.(En la práctica,creo que la gran mayoría de la confusión sobre temas como estos proviene de usar las palabras de manera que no se comunique completamente el significado que se pretendía).</target>
        </trans-unit>
        <trans-unit id="e346a97905f1958718e4986c56283c42b87749e1" translate="yes" xml:space="preserve">
          <source>To start, here's an example in some C-like language of a function declaration:</source>
          <target state="translated">Para empezar,aquí hay un ejemplo en algún lenguaje tipo C de una declaración de función:</target>
        </trans-unit>
        <trans-unit id="e1bcbcecd757c896953f6667ed593f450f425768" translate="yes" xml:space="preserve">
          <source>Using this example, I want to define some important bits of terminology:</source>
          <target state="translated">Usando este ejemplo,quiero definir algunas partes importantes de la terminología:</target>
        </trans-unit>
        <trans-unit id="173ba9fdd42d28dfe6578af600f9727c2b05acf1" translate="yes" xml:space="preserve">
          <source>Very few languages support call by reference, but C++ can do it like this:</source>
          <target state="translated">Muy pocos lenguajes soportan la llamada por referencia,pero C++puede hacerlo así:</target>
        </trans-unit>
        <trans-unit id="bca2025696923c2b4a1ac5b779ea5df55f719431" translate="yes" xml:space="preserve">
          <source>What &quot;call by value&quot; and &quot;call by reference&quot; &lt;em&gt;don't&lt;/em&gt; mean</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iquest;Qu&amp;eacute; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;significa &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&quot;llamar por valor&quot; y &quot;llamar por referencia&quot; &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;?&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cea908217bcefc8f05da33bdad1d2e2df1b58721" translate="yes" xml:space="preserve">
          <source>What is the difference between</source>
          <target state="translated">¿Cuál es la diferencia entre</target>
        </trans-unit>
        <trans-unit id="9027be4085fe45396497e506864b7a472bf4d036" translate="yes" xml:space="preserve">
          <source>What's the difference between passing by reference vs. passing by value</source>
          <target state="translated">¿Cuál es la diferencia entre pasar por referencia y pasar por valor</target>
        </trans-unit>
        <trans-unit id="b2a815ccdb4f1793ac71c8eae2cd6344e45939b5" translate="yes" xml:space="preserve">
          <source>When a parameter is &lt;strong&gt;passed by reference&lt;/strong&gt;, the caller and the callee &lt;strong&gt;use the same variable&lt;/strong&gt; for the parameter. If the callee modifies the parameter variable, the effect is visible to the caller's variable.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cuando se &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;pasa&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; un par&amp;aacute;metro &lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;por referencia&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , la persona que llama y la persona que llama &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;utilizan la misma variable&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para el par&amp;aacute;metro. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si la persona que llama modifica la variable del par&amp;aacute;metro, el efecto es visible para la variable de la persona que llama.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b1f6ae5ad14bfc23213aae72cadf5a028c75380d" translate="yes" xml:space="preserve">
          <source>When a parameter is &lt;strong&gt;passed by value&lt;/strong&gt;, the caller and callee have &lt;strong&gt;two independent variables&lt;/strong&gt; with the same value. If the callee modifies the parameter variable, the effect is not visible to the caller.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cuando se &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;pasa&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; un par&amp;aacute;metro &lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;por valor&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , la persona que llama y la persona que llama tienen &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;dos variables independientes&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; con el mismo valor. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si la persona que llama modifica la variable del par&amp;aacute;metro, el efecto no es visible para la persona que llama.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3d76ca737f825ebe7eeaad751b4f4da27e65af7a" translate="yes" xml:space="preserve">
          <source>When discussing languages that are technically call by value, but where common types in use are reference or pointer types (that is: nearly every modern imperative, object-oriented, or multi-paradigm programming language), I find it's a lot less confusing to simply avoid talking about &lt;em&gt;call by value&lt;/em&gt; or &lt;em&gt;call by reference&lt;/em&gt;. Stick to &lt;strong&gt;call by object sharing&lt;/strong&gt; (or simply &lt;strong&gt;call by object&lt;/strong&gt;) and nobody will be confused. :-)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cuando se discuten lenguajes que t&amp;eacute;cnicamente son llamados por valor, pero donde los tipos comunes en uso son tipos de referencia o puntero (es decir, casi todos los lenguajes modernos de programaci&amp;oacute;n imperativa, orientada a objetos o multi-paradigma), encuentro que es mucho menos confuso simplemente evite hablar de &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;llamada por valor&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; o &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;llamada por referencia&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Siga &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;llamando por compartir objetos&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (o simplemente &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;llame por objeto&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ) y nadie se confundir&amp;aacute;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;:-)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2ecd292a63e3d5222c9a25893600961a65a608b1" translate="yes" xml:space="preserve">
          <source>When passing by ref you are basically passing a pointer to the variable. Pass by value you are passing a copy of the variable.  In basic usage this normally means pass by ref changes to the variable will seen be the calling method and pass by value they wont.</source>
          <target state="translated">Cuando pasas por el árbitro,básicamente estás pasando un puntero a la variable.Al pasar por valor estás pasando una copia de la variable.En el uso básico esto significa normalmente pasar por ref cambios a la variable se verá el método de llamada y pasar por valor que no.</target>
        </trans-unit>
        <trans-unit id="664add438097fbd4307f814de8e62a10f8905588" translate="yes" xml:space="preserve">
          <source>Wikipedia</source>
          <target state="translated">Wikipedia</target>
        </trans-unit>
        <trans-unit id="3dcb9e4a709cd9732c54c1458c1e7ecb4869b88a" translate="yes" xml:space="preserve">
          <source>a parameter passed by reference</source>
          <target state="translated">un parámetro pasado por referencia</target>
        </trans-unit>
        <trans-unit id="d942c9b2660856d3052135b0ecb1bde891a4e02f" translate="yes" xml:space="preserve">
          <source>a parameter passed by value?</source>
          <target state="translated">un parámetro pasado por valor?</target>
        </trans-unit>
        <trans-unit id="c8d883099ccb83527ab26efc085bbc497c87c206" translate="yes" xml:space="preserve">
          <source>know that there are 2 things about &lt;code&gt;name&lt;/code&gt;. Its value which is &lt;code&gt;&quot;John&quot;&lt;/code&gt; and also its location in the memory which is some hexadecimal number maybe like  this: &lt;code&gt;0x7fd5d258dd00&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;S&amp;eacute; que hay 2 cosas sobre el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;name&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Su valor, que es &lt;/font&gt;&lt;/font&gt; &lt;code&gt;&quot;John&quot;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y tambi&amp;eacute;n su ubicaci&amp;oacute;n en la memoria, que es un n&amp;uacute;mero hexadecimal, puede ser as&amp;iacute;: &lt;/font&gt;&lt;/font&gt; &lt;code&gt;0x7fd5d258dd00&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="92d18d86d3482790e7c13a933b9573aa4d43bece" translate="yes" xml:space="preserve">
          <source>pass by value means how to pass value to a function by making use of arguments. in pass by value we copy the data stored in the variable we specify and it is slower than pass by reference bcse t
he data is copied . of we make changes in the copied data the original data is not affected. nd in pass by refernce or pass by address we send direct link to the variable itself . or passing pointer to a variable. it is faster bcse less time is consumed</source>
          <target state="translated">pass by value significa cómo pasar valor a una función haciendo uso de argumentos.en pass by value copiamos los datos almacenados en la variable que especificamos y es más lento que pass by reference bcse los datos se copian.de hacer cambios en los datos copiados los datos originales no se ven afectados.nd in pass by refernce o pass by address enviamos enlace directo a la propia variable.o pasando puntero a una variable.es más rápido bcse se consume menos tiempo</target>
        </trans-unit>
        <trans-unit id="e1fe0646916dec7e41ba04370658cec4d2b909cf" translate="yes" xml:space="preserve">
          <source>see c# discussion and examples here &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/0f66670z(VS.71).aspx&quot;&gt;link text&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;vea la discusi&amp;oacute;n de c # y ejemplos aqu&amp;iacute; &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/0f66670z(VS.71).aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;enlace de texto&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
