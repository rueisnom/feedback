<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/373419">
    <body>
      <group id="373419">
        <trans-unit id="e9f6896f6f619208772a572ca98f25701e9473c9" translate="yes" xml:space="preserve">
          <source>(As an aside: depending on hardware and operating system, there are various &lt;em&gt;calling conventions&lt;/em&gt; about how you call one function from another. The calling convention is like us deciding whether I write the value on a piece of my paper and then hand it to you, or if you have a piece of paper that I write it on, or if I write it on the wall in front of both of us. This is an interesting subject as well, but far beyond the scope of this already long answer.)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（余談ですが、ハードウェアとオペレーティングシステムに応じて、ある&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;関数を別の関数から呼び出す方法について&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;さまざまな&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;呼び出し規約&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;があり&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。呼び出し規約は、値を紙に書き込んでから渡すかどうかを決定するようなものです、または私が書いた紙がある場合、または私たち2人の前の壁に書いた場合。これも興味深いテーマですが、この長い回答の範囲をはるかに超えています。）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cbac2cd038acc214288f0e583f52ec70e47f7d7b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;arg&lt;/code&gt; is a &lt;em&gt;variable&lt;/em&gt;, specifically a &lt;em&gt;local variable&lt;/em&gt; of the function &lt;code&gt;bar&lt;/code&gt;, declared and initialized on line 2</source>
          <target state="translated">&lt;code&gt;arg&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;変数&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、具体的&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;には関数&lt;/font&gt; &lt;code&gt;bar&lt;/code&gt; の&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ローカル変数&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;で、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2行目で宣言および初期化されます&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5bc453d53640191a42b118363d3132a50b5539d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;arg&lt;/code&gt; is also an &lt;em&gt;argument&lt;/em&gt; to a specific &lt;em&gt;invocation&lt;/em&gt; of &lt;code&gt;foo&lt;/code&gt; on line 3</source>
          <target state="translated">&lt;code&gt;arg&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;3行目&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の&lt;/font&gt; &lt;code&gt;foo&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;特定の&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;呼び出し&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に対する&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;引数&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;でもあり&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/em&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0608e72f6e5e0abbef70953fddd75322bde2de2b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;const &amp;amp;&lt;/code&gt; is generally best. You don't incur the construction and destruction penalty. If the reference isn't const your interface is suggesting that it will change the passed in data.</source>
          <target state="translated">&lt;code&gt;const &amp;amp;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が一般的に最適です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;建設や破壊のペナルティは発生しません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;参照がconstでない場合、インターフェースは渡されたデータを変更することを示唆しています。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5778d91fd84f65084092af7733f7deb1cc95e2b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;foo&lt;/code&gt; is a &lt;em&gt;function&lt;/em&gt; declared on line 1 (Java insists on making all functions methods, but the concept is the same without loss of generality; C and C++ make a distinction between declaration and definition which I won't go into here)</source>
          <target state="translated">&lt;code&gt;foo&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;1行目で宣言され&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;た&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;関数です&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（Javaはすべての関数をメソッドにすることを主張していますが、概念は一般性を失うことなく同じです; CとC ++は宣言と定義を区別しますが、ここでは触れません）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4342767f686e6c884e61cc037c3c3fc5cc659e9c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;param&lt;/code&gt; is a &lt;em&gt;formal parameter&lt;/em&gt; to &lt;code&gt;foo&lt;/code&gt;, also declared on line 1</source>
          <target state="translated">&lt;code&gt;param&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt; &lt;code&gt;foo&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;への&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;仮パラメータで&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、これも1行目で宣言されています&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a8d4c381565096e1150f6f23cbfd17f895abdfb3" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;PS: You can also check Dylan Beattie answer in the current thread that explains it in plain words.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;PS：わかりやすい言葉で説明している現在のスレッドでDylan Beattieの回答を確認することもできます。&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b531648ef026c5f39d3a5d0415561b077a9607f8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;call by reference&lt;/em&gt; means that you pass &lt;strong&gt;variables&lt;/strong&gt; as function arguments</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;参照&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;渡しは&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、関数の引数として&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;変数&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を渡すことを意味します&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cb11d3cb91b2bf61e1481c659f0757366f9bdd10" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;call by value&lt;/em&gt; means that you pass &lt;strong&gt;values&lt;/strong&gt; as function arguments</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;値による呼び出しは、&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;関数の引数として&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;値&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を渡すことを意味します&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c462e7be0d47cb45eb80b5d83418b9eb9be4c338" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&quot;Variable&quot; here means the caller's (local or global) variable itself&lt;/strong&gt; -- i.e. if I pass a local variable by reference and assign to it, I'll change the caller's variable itself, not e.g. whatever it is pointing to if it's a pointer.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここでの「変数」とは、呼び出し元の（ローカルまたはグローバル）変数自体を意味します。&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;つまり、ローカル変数を参照で渡し、それに割り当てた場合、呼び出し元の変数自体を変更します。たとえば、ポインターの場合、それが指しているものは変更しません。 。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9943118257c67073146bfe93bd45fef73950fe6a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Call by reference&lt;/em&gt;&lt;/strong&gt; is when &lt;strong&gt;I give you my notebook which has something written down in it&lt;/strong&gt;. You may scribble in my notebook (maybe I want you to, maybe I don't), and afterwards I keep my notebook, with whatever scribbles you've put there. Also, if what either you or I wrote there is information about how to find something somewhere else, either you or I can go there and fiddle with that information.</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;参照による呼び出し&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;とは、何かが書き留められているノートブックをお渡しする&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;とき&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あなたは私のノートに落書きをするかもしれません（多分私はあなたにそうしたいかもしれませんが、私はそうしないかもしれません）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;また、あなたまたは私が書いたものが他の場所で何かを見つける方法についての情報がある場合、あなたまたは私はそこに行ってその情報をいじることができます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cbec7d9a2bfc4bfd91921e65076e74c44616fe34" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Call by value&lt;/em&gt;&lt;/strong&gt; is where &lt;strong&gt;I write down something on a piece of paper and hand it to you&lt;/strong&gt;. Maybe it's a URL, maybe it's a complete copy of War and Peace. No matter what it is, it's on a piece of paper which I've given to you, and so now it is effectively &lt;strong&gt;your piece of paper&lt;/strong&gt;. You are now free to scribble on that piece of paper, or use that piece of paper to find something somewhere else and fiddle with it, whatever.</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;価値による呼び出し&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私が紙に何かを書き留めてあなたに渡す場所です&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。たぶんそれはURLかもしれませんし、戦争と平和の完全なコピーかもしれません。それが何であれ、私があなたに与えた紙の上にあるので、今では事実上&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あなたの紙&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。これで、その紙を自由に落書きしたり、その紙を使用して他の場所で何かを見つけたり、それをいじったりすることができます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8f764f71ad507d4f6ffa334772288b3c44caf6d7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt;: For a long time, this answer used to say:</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;注&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：長い間、この答えは次のように言っていました。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="23bb1a4a60181353a368cf6d31df5de9e55c1682" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Newer languages&lt;sup&gt;2&lt;/sup&gt; tend to use a different (but similar) pair of techniques to achieve the same effects&lt;/strong&gt; (see below) which is the primary source of confusion.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;新しい言語&lt;/font&gt;&lt;/font&gt;&lt;sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2&lt;/font&gt;&lt;/font&gt;&lt;/sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、異なる（ただし類似した）技術を使用して同じ効果&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（以下を参照）を&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;達成する傾向があり、&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これが混乱の主な原因です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4f33c78571c4b9ebb3b2d119820fcb7e5ff0e742" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Now, in modern languages, variables tend to be of &quot;reference types&quot;&lt;/strong&gt; (another concept invented later than &quot;pass by reference&quot; and inspired by it), i.e. the actual object data is stored separately somewhere (usually, on the heap), and only &quot;references&quot; to it are ever held in variables and passed as parameters.&lt;sup&gt;3&lt;/sup&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;現在、現代の言語では、変数は「参照型」&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;「参照&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;渡し」より後に発明され、それから着想を得たもの）&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;になる傾向があります&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。つまり、実際のオブジェクトデータはどこかに（通常はヒープ上に）個別に格納されます。それへの「参照」だけが変数に保持され、パラメータとして渡されます。&lt;/font&gt;&lt;/font&gt;&lt;sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;３&lt;/font&gt;&lt;/font&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="25e135788be8d1778bcd707f508c191d13da2085" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Passing such a reference falls under pass-by-value&lt;/strong&gt; because a variable's value is technically the reference itself, not the referred object. However, &lt;strong&gt;the net effect on the program can be the same as either pass-by-value or pass-by-reference:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;変数の値は技術的には参照自体であり、参照されるオブジェクトではないため、&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このような参照を渡す&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ことは&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;値渡しに該当し&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ただし、&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プログラムへの最終的な影響は、値渡しまたは参照渡しと同じです。&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="476ab2dd4463b39040262c013f7136f0edd5d0ec" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The meaning of &quot;reference&quot; in &quot;pass by reference&quot;&lt;/strong&gt;. The difference with the general &quot;reference&quot; term is is that &lt;strong&gt;this &quot;reference&quot; is temporary and implicit.&lt;/strong&gt; What the callee basically gets is &lt;strong&gt;a &quot;variable&quot; that is somehow &quot;the same&quot; as the original one.&lt;/strong&gt; How specifically this effect is achieved is irrelevant (e.g. the language may also expose some implementation details -- addresses, pointers, dereferencing -- this is all irrelevant; if the net effect is this, it's pass-by-reference).</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;「参照渡し」における「参照」の意味&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。一般的な「参照」という用語との違いは、&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この「参照」は一時的で暗黙的なものであることです。&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;呼び出し先が基本的に取得するのは&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、元の変数と何とか「同じ」「変数」です。&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この効果が具体的にどのように達成されるかは関係ありません（たとえば、言語は実装の詳細（アドレス、ポインター、逆参照）を公開することもあります。これはすべて関係ありません。これが実質的な影響である場合、参照渡しです）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a360b48a9b0e443655fd1f50a1f59496f3e6cfa6" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;1&lt;/sup&gt;&lt;sub&gt;Unless you are programming in Fortran or Visual Basic, it's not the default behavior, and in most languages in modern use, true call-by-reference is not even possible.&lt;/sub&gt;</source>
          <target state="translated">&lt;sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;1 &lt;/font&gt;&lt;/font&gt;&lt;/sup&gt;&lt;sub&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;FortranまたはVisual Basicでプログラミングしている場合を除き、これはデフォルトの動作ではありません。また、最近のほとんどの言語では、真の参照渡しは不可能です。&lt;/font&gt;&lt;/font&gt;&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="89af967c9f1678cfe1fa5b095fa773ba45b7ab71" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;2&lt;/sup&gt;&lt;sub&gt;A fair amount of older ones support it, too&lt;/sub&gt;</source>
          <target state="translated">&lt;sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2 &lt;/font&gt;&lt;/font&gt;&lt;/sup&gt;&lt;sub&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;古いものもかなりサポートしています&lt;/font&gt;&lt;/font&gt;&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="4e328db02277d9e0bf80968dad513e6575d2655f" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;3&lt;/sup&gt;&lt;sub&gt;In several modern languages, all types are reference types. This approach was pioneered by the language CLU in 1975 and has since been adopted by many other languages, including Python and Ruby. And many more languages use a hybrid approach, where some types are &quot;value types&quot; and others are &quot;reference types&quot; -- among them are C#, Java, and JavaScript.&lt;/sub&gt;</source>
          <target state="translated">&lt;sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;3 &lt;/font&gt;&lt;/font&gt;&lt;/sup&gt;&lt;sub&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;いくつかの現代の言語では、すべての型が参照型です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このアプローチは、1975年にCLU言語によって開拓され、それ以降、PythonやRubyなどの他の多くの言語で採用されています。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;さらに、より多くの言語がハイブリッドアプローチを使用しており、一部のタイプは「値タイプ」であり、その他は「参照タイプ」であり、その中にはC＃、Java、JavaScriptがあります。&lt;/font&gt;&lt;/font&gt;&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="36bedde2f57763554ef2a1b03c1603401bab77e8" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;4&lt;/sup&gt;&lt;sub&gt;There's nothing bad with recycling a fitting old term &lt;em&gt;per se,&lt;/em&gt; but one has to somehow make it clear which meaning is used each time. Not doing that is exactly what keeps causing confusion.&lt;/sub&gt;</source>
          <target state="translated">&lt;sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;4 &lt;/font&gt;&lt;/font&gt;&lt;/sup&gt;&lt;sub&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;適切な古い用語&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;自体&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;をリサイクルしても何も悪いことはありませんが、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;毎回どの意味が使用されているかを何らかの方法で明確にする必要があります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そうしないと、混乱を引き起こし続けます。&lt;/font&gt;&lt;/font&gt;&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="0c4436e45f8957f1cd334823decd0388dde14837" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;&lt;em&gt;parameter&lt;/em&gt;&lt;/strong&gt; (also called a &lt;em&gt;formal parameter&lt;/em&gt;) is a &lt;em&gt;variable&lt;/em&gt; which must be supplied by the caller when calling a function.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;パラメータ&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（とも呼ばれる&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;仮パラメータは&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）ある&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;変数&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;関数を呼び出すときに、呼び出し元によって供給されなければなりません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e6be845d8543d385fe06b210b124c8a494e883d8" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;&lt;em&gt;value&lt;/em&gt;&lt;/strong&gt; is the &lt;strong&gt;result of evaluating an expression&lt;/strong&gt; in the language. For example, in the &lt;code&gt;bar&lt;/code&gt; function above, after the line &lt;code&gt;int arg = 1;&lt;/code&gt;, the expression &lt;code&gt;arg&lt;/code&gt; has the &lt;em&gt;value&lt;/em&gt;&lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;値が&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ある&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;式の評価結果&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の言語で。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;たとえば、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;上&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の&lt;/font&gt;&lt;/font&gt; &lt;code&gt;bar&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;関数&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;では&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、行の後に&lt;/font&gt;&lt;/font&gt; &lt;code&gt;int arg = 1;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、式&lt;/font&gt;&lt;/font&gt; &lt;code&gt;arg&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;値は&lt;/font&gt;&lt;/font&gt;&lt;/em&gt; &lt;code&gt;1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e079dc36e6c16cfe3c84390e6df02765e02f9536" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;&lt;em&gt;variable&lt;/em&gt;&lt;/strong&gt; is a &lt;strong&gt;container for values&lt;/strong&gt;. A variable can be mutable (this is the default in most C-like languages), read-only (e.g. declared using Java's &lt;code&gt;final&lt;/code&gt; or C#'s &lt;code&gt;readonly&lt;/code&gt;) or deeply immutable (e.g. using C++'s &lt;code&gt;const&lt;/code&gt;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;変数が&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ある&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;値のコンテナ&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;変数は、可変（ほとんどのCライクな言語ではデフォルトです）、読み取り専用（例：Javaの&lt;/font&gt;&lt;/font&gt; &lt;code&gt;final&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;またはC＃の&lt;/font&gt;&lt;/font&gt; &lt;code&gt;readonly&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用して宣言&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）、または非常に不変（例：C ++の&lt;/font&gt;&lt;/font&gt; &lt;code&gt;const&lt;/code&gt; を使用&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）にすることができます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a677b0c64bdfeda25591da2903e6635e04d8bb09" translate="yes" xml:space="preserve">
          <source>A major difference between them is that value-type variables store values, so specifying a value-type variable in a method call passes a copy of that variable's value to the method. Reference-type variables store references to objects, so specifying a reference-type variable as an argument passes the method a copy of the actual reference that refers to the object. Even though the reference itself is passed by value, the method can still use the reference it receives to interact with&amp;mdash;and possibly modify&amp;mdash;the original object. Similarly, when returning information from a method via a return statement, the method returns a copy of the value stored in a value-type variable or a copy of the reference stored in a reference-type variable. When a reference is returned, the calling method can use that reference to interact with the referenced object. So, in effect, objects are always passed by reference.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それらの主な違いは、値型変数は値を格納するため、メソッド呼び出しで値型変数を指定すると、その変数の値のコピーがメソッドに渡されます。参照型変数はオブジェクトへの参照を格納するため、参照型変数を引数として指定すると、オブジェクトを参照する実際の参照のコピーがメソッドに渡されます。参照自体は値で渡されますが、メソッドは受け取った参照を使用して、元のオブジェクトと対話し、場合によっては変更します。同様に、returnステートメントを介してメソッドから情報を返す場合、メソッドは、値型変数に格納されている値のコピー、または参照型変数に格納されている参照のコピーを返します。参照が返されると、呼び出し側のメソッドはその参照を使用して、参照されるオブジェクトと対話できます。そう、実際、オブジェクトは常に参照渡しされます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="abd7a4c1cc58474c81f17ebaa3380517415b77ff" translate="yes" xml:space="preserve">
          <source>A secondary source of confusion is the fact that &lt;strong&gt;in &quot;pass by reference&quot;, &quot;reference&quot; has a narrower meaning than the general term &quot;reference&quot;&lt;/strong&gt; (because the phrase predates it).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;「参照渡し」では、「参照」が一般的な用語「参照」よりも狭い意味を持っている&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;という事実が、混乱の2番目の原因です&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（フレーズがそれより前にあるため）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8395df276068a15c1788c1244f7f1967b1ffd62b" translate="yes" xml:space="preserve">
          <source>Addendum: call by object sharing</source>
          <target state="translated">補遺:オブジェクト共有による呼び出し</target>
        </trans-unit>
        <trans-unit id="e1b35360cd12c3fd13d94fe6f21d7c2fcc5d8691" translate="yes" xml:space="preserve">
          <source>An &lt;strong&gt;&lt;em&gt;argument&lt;/em&gt;&lt;/strong&gt; is a &lt;em&gt;value&lt;/em&gt; that is supplied by the caller of a function to satisfy a specific formal parameter of that function</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;引数が&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ある&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;値&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;関数の呼び出し元によって供給され、その関数の特定の仮パラメータを満たすために&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3669673a915b7806f383325212faf75fa8a11a20" translate="yes" xml:space="preserve">
          <source>An actual parameter referring to &amp;ldquo;passed by value&amp;rdquo; formal parameter may be &lt;strong&gt;an expression&lt;/strong&gt; in general, so it is allowed to use not only a variable but also a literal or even a function invocation's result.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;「値で渡される」仮パラメーターを参照する実際のパラメーター&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、一般に&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;式&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;である&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;可能性が&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ある&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ため、変数だけでなくリテラルまたは関数呼び出しの結果を使用することもできます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="df6b153b01adb26322ecd5d9e904e438de306d18" translate="yes" xml:space="preserve">
          <source>And an example in Java won't hurt:</source>
          <target state="translated">Javaでの例を挙げても問題ないでしょう。</target>
        </trans-unit>
        <trans-unit id="41bfbeff0e712201c1f6a812c3156a5716a824be" translate="yes" xml:space="preserve">
          <source>And here's an example of calling this function:</source>
          <target state="translated">そして、この関数を呼び出す例です。</target>
        </trans-unit>
        <trans-unit id="d429697a4106347176728eb0835dcffc66d7932a" translate="yes" xml:space="preserve">
          <source>As you may see, &lt;strong&gt;this pair of techniques is almost the same as those in the definition, only with a level of indirection: just replace &quot;variable&quot; with &quot;referenced object&quot;.&lt;/strong&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ご覧のとおり、&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この2つの手法は定義の手法とほとんど同じですが、間接参照のレベルのみが異なります。「変数」を「参照されるオブジェクト」に置き換えるだけです。&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fca7e365e04633808c1e9f9aa4c42c53cb72f7e2" translate="yes" xml:space="preserve">
          <source>Barbara Liskov, when she invented the CLU programming language (which had these semantics), realized that the existing terms &quot;call by value&quot; and &quot;call by reference&quot; weren't particularly useful for describing the semantics of this new language. So she invented a new term: &lt;a href=&quot;https://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_sharing&quot;&gt;&lt;strong&gt;call by object sharing&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Barbara Liskovは、CLUプログラミング言語（これらのセマンティクスを持つ）を発明したとき、既存の用語「値渡し」および「参照渡し」は、この新しい言語のセマンティクスを説明するのに特に有用ではないことに気付きました。そこで、彼女は新しい用語を考案しました&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_sharing&quot;&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;オブジェクト共有による呼び出し&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8923be1f7bad7119c6557d2337dcb813f8938152" translate="yes" xml:space="preserve">
          <source>Before understanding the 2 terms, you &lt;strong&gt;MUST&lt;/strong&gt; understand the following. Every object, has 2 things that can make it be distinguished.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2つの用語を理解する前に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、次のことを理解&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;する&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;必要&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;があります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;すべてのオブジェクトには、それを区別できる2つのものが含まれています。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e34bfb419c41f2d2b66b3b6899800cefb3c2d265" translate="yes" xml:space="preserve">
          <source>But if you want to give the function the &lt;em&gt;ability to change the value of the variable&lt;/em&gt; as seen from the outside, you need to use &lt;strong&gt;pass by reference&lt;/strong&gt;.  As both the value and the address (reference) are passed in and available inside the function.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ただし&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、外部から見&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;た変数の値を変更&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;する機能を関数に与えたい&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;場合は、&lt;/font&gt;&lt;/em&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;参照渡し&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用する必要があり&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;値とアドレス（参照）の両方が渡され、関数内で使用できるためです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6e61eaf9f7eacd12ce53adbf1a701c715785f2f3" translate="yes" xml:space="preserve">
          <source>C# supports pass by value and pass by reference (keyword &lt;code&gt;ref&lt;/code&gt; used at caller and called function). Jon Skeet also has a nice explanation of this &lt;a href=&quot;https://jonskeet.uk/csharp/parameters.html&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C＃は、値渡しと参照渡し（&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;呼び出し元と呼び出し先の関数で使用される&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;キーワード&lt;/font&gt;&lt;/font&gt; &lt;code&gt;ref&lt;/code&gt; )を&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サポートしています&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ジョン・スキート氏も、これについて素晴らしい説明をしてい&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://jonskeet.uk/csharp/parameters.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dcb298d2090971d85ae8a79abeefe2fbfe4a1132" translate="yes" xml:space="preserve">
          <source>C++ supports pass by value and pass by reference (reference parameter type used at called function). You will find an explanation of this below.</source>
          <target state="translated">C++ではpass by valueとpass by reference(呼び出された関数で使用する参照パラメータの型)をサポートしています。これについては以下に説明があります。</target>
        </trans-unit>
        <trans-unit id="6a32afde8ee467a4cfa26db111fcf46cc30a2d73" translate="yes" xml:space="preserve">
          <source>Call by reference</source>
          <target state="translated">参照による呼び出し</target>
        </trans-unit>
        <trans-unit id="c590467a0f3956ff0e042df50b68f779090db976" translate="yes" xml:space="preserve">
          <source>Call by value</source>
          <target state="translated">値による呼び出し</target>
        </trans-unit>
        <trans-unit id="199993be9fef4c509cd7f630e2bb318e8ab6c85a" translate="yes" xml:space="preserve">
          <source>Codes</source>
          <target state="translated">Codes</target>
        </trans-unit>
        <trans-unit id="9cbd72fd910e48c58a4f702f7132ff44457c59a9" translate="yes" xml:space="preserve">
          <source>Could you give me some examples, please?</source>
          <target state="translated">いくつか例を挙げてもらえますか?</target>
        </trans-unit>
        <trans-unit id="81542fafe9576235202df625d15049ec1be0114e" translate="yes" xml:space="preserve">
          <source>Depending on the language's architecture or the &lt;em&gt;type&lt;/em&gt; (class, struct, etc.) of your object, you would be either transferring &lt;code&gt;&quot;John&quot;&lt;/code&gt; or &lt;code&gt;0x7fd5d258dd00&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;言語のアーキテクチャまたは&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;オブジェクト&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;タイプ&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（クラス、構造体など）に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;応じて、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;&quot;John&quot;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;または&lt;/font&gt; &lt;code&gt;0x7fd5d258dd00&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;いずれかを転送します。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0b5c518f721f8b3c6af740f2739256af35b61c4d" translate="yes" xml:space="preserve">
          <source>Either by &lt;strong&gt;passing their values to cell A2&lt;/strong&gt; by typing &lt;em&gt;= 5 + 2&lt;/em&gt; into this cell. In this case, if the values of the cells A1 or B1 change, the sum in A2 remains the same.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このセルに&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;= 5 + 2と&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;入力&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;してセルA2に値を渡す&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;か、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この場合、セルA1またはB1の値が変化しても、A2の合計は同じままです。&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="10e9dcf2f01de94fcc4afa9703bc0c33a2cff1c7" translate="yes" xml:space="preserve">
          <source>Example(copy and use/try this yourself and see) :</source>
          <target state="translated">例(これを自分でコピーして使って見てください).</target>
        </trans-unit>
        <trans-unit id="fb3447b632f6a431215776dcf254a01001a40c4f" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="translated">Examples:</target>
        </trans-unit>
        <trans-unit id="f584f0c48a1b0d4e3338f2ed2a5fdd472b7b090c" translate="yes" xml:space="preserve">
          <source>First and foremost, &lt;strong&gt;the &quot;pass by value vs. pass by reference&quot; distinction as defined in the CS theory is now obsolete&lt;/strong&gt; because &lt;strong&gt;the technique originally defined as &quot;pass by reference&quot; has since fallen out of favor&lt;/strong&gt; and is seldom used now.&lt;sup&gt;1&lt;/sup&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;まず第一に、&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;「参照渡し対値渡し」の区別CS理論で定義されているが、廃止されました&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ので、&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;本来は「参照渡し」と定義技術がいるので好意から下落している&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;とあまり今使用されていません。&lt;/font&gt;&lt;/font&gt;&lt;sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;1&lt;/font&gt;&lt;/font&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="eb89ac1e7f9dc9f4e4b7cf6d7e6096cb7149a6cd" translate="yes" xml:space="preserve">
          <source>For more on this, I recommend you to read about &lt;a href=&quot;https://stackoverflow.com/a/4955259/5175709&quot;&gt;dereferencing a pointer&lt;/a&gt; and also &lt;a href=&quot;https://stackoverflow.com/a/38024319/5175709&quot;&gt;why choose struct (value type) over class (reference type)&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;詳細については&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/4955259/5175709&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、ポインタの逆参照&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;について&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;および&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/38024319/5175709&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;クラス（参照タイプ）ではなく構造体（値タイプ）を選択する理由&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;をお読みになることをお勧めします。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="78f758b88546141cf025fbcc3e6f5c64139c6ee9" translate="yes" xml:space="preserve">
          <source>Going back to my metaphor above, if I'm &lt;code&gt;bar&lt;/code&gt; and you're &lt;code&gt;foo&lt;/code&gt;, when I call you, I hand you a piece of paper with a &lt;em&gt;value&lt;/em&gt; written on it. You call that piece of paper &lt;code&gt;param&lt;/code&gt;. That value is a &lt;strong&gt;copy&lt;/strong&gt; of the value I have written in my notebook (my local variables), in a variable I call &lt;code&gt;arg&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;上記の比喩に戻ると、私が&lt;/font&gt;&lt;/font&gt; &lt;code&gt;bar&lt;/code&gt; で&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、あなたが&lt;/font&gt;&lt;/font&gt; &lt;code&gt;foo&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;である場合、私があなたを呼ぶとき、私はあなたに&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;値が&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;書かれた&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;紙を手渡します&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。あなたはその紙片を&lt;/font&gt;&lt;/font&gt; &lt;code&gt;param&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と呼びます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。その値は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、ノートブック（ローカル変数）に記述した値の&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コピー&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;で、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;arg&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と呼ぶ変数にあります&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a22af7a4730db40ef83a84bd3138eb1203ab1e4d" translate="yes" xml:space="preserve">
          <source>Going back to our example above, it's equivalent to:</source>
          <target state="translated">上の例に戻りますが、これに相当します。</target>
        </trans-unit>
        <trans-unit id="d7eb63da0145f25b5d55241918a08d5b230c4b12" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;arg&lt;/code&gt; and &lt;code&gt;another_variable&lt;/code&gt; are completely independent variables -- their values can change independently of each other. However, at the point where &lt;code&gt;another_variable&lt;/code&gt; is declared, it is initialized to hold the same value that &lt;code&gt;arg&lt;/code&gt; holds -- which is &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここで、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;arg&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;another_variable&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は完全に独立した変数です。これらの値は互いに独立して変更できます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ただし、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;another_variable&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が宣言さ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;れた時点で&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;arg&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が保持&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;するのと同じ値&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（&lt;/font&gt;&lt;/font&gt; &lt;code&gt;1&lt;/code&gt; )&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を保持するように初期化され&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d5a3fe120383d61d87e4540a6a6708c041f6360c" translate="yes" xml:space="preserve">
          <source>Here is an example that demonstrates the differences between &lt;strong&gt;pass by value - pointer value - reference&lt;/strong&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;次に&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、値渡し-ポインタ値-参照&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の違いを示す例を示し&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="540ee2aaf7182c6dfc449b18e5accb694e3b0894" translate="yes" xml:space="preserve">
          <source>Here is an example:</source>
          <target state="translated">ここでは一例を紹介します。</target>
        </trans-unit>
        <trans-unit id="0ea64acdc8005d5b15eb4032e4c83cca10d2689f" translate="yes" xml:space="preserve">
          <source>However, if a variable holding this reference is &lt;em&gt;reassiged,&lt;/em&gt; it will stop pointing to that object, so any further operations on this variable will instead affect whatever it is pointing to now.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ただし、この参照を保持している変数が&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;再割り当てされると、&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そのオブジェクトを指すのが停止するため、この変数に対する以降の操作は、現在指しているものに影響を与えます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="630391e5a5f8a770ac2b2e52c79504fdb2316219" translate="yes" xml:space="preserve">
          <source>If I print out the page and give you the printout, I'm passing by
  value. Your page is a disconnected copy of the original. You won't see
  any subsequent changes, and any changes that you make (e.g. scribbling
  on your printout) will not show up on the original page. If you
  destroy the printout, you have actually destroyed your copy of the
  object - but the original web page remains intact.</source>
          <target state="translated">ページをプリントアウトして渡したら、値で渡しています。あなたのページはオリジナルの切り離されたコピーです。あなたはその後の変更を見ることはありませんし、あなたが行った変更(プリントアウトへの走り書きなど)は元のページには表示されません。プリントアウトを破棄すると、実際にはオブジェクトのコピーを破棄したことになりますが、元のウェブページはそのまま残っています。</target>
        </trans-unit>
        <trans-unit id="fa1eae8f868f8ccec251540cf83a6d999d96bd33" translate="yes" xml:space="preserve">
          <source>If a reference is just taken from a caller's variable and passed as an argument, this has the same effect as pass-by-reference: if the referred object is &lt;em&gt;mutated&lt;/em&gt; in the callee, the caller will see the change.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;参照が呼び出し元の変数から取得され、引数として渡される場合、これは参照渡しと同じ効果&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;があります。参照先の&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;オブジェクトが&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;呼び出し先で変更&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;さ&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;れた場合、呼び出し元は変更を確認します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b6671658fcd898e40c481710de5eb11d030070e4" translate="yes" xml:space="preserve">
          <source>If what that reference type (that is, pointer) points to is &lt;strong&gt;mutable&lt;/strong&gt; then an interesting effect is possible: you can modify the pointed-to value, and the caller can observe changes to the pointed-to value, even though the caller cannot observe changes to the pointer itself.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;その参照型（つまり、ポインター）が指すものが&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;変更可能である&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;場合、興味深い効果が得られます。ポイント先の値を変更でき、呼び出し元は監視できなくても、ポイント先の値への変更を監視できます。ポインタ自体に変わります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c7d58c687c27bf3e8c08e37865c6064bb8181f24" translate="yes" xml:space="preserve">
          <source>If what you have is &lt;em&gt;call by value&lt;/em&gt;, but the actual value is a &lt;em&gt;reference type&lt;/em&gt; or &lt;em&gt;pointer type&lt;/em&gt;, then the &quot;value&quot; itself isn't very interesting (e.g. in C it's just an integer of a platform-specific size) -- what's interesting is what that value &lt;strong&gt;points to&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あなたが持っているものが&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;値による呼び出し&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;であるが、実際の値が&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;参照型&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;または&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ポインタ型&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;である場合、「値」自体はそれほど興味深いものではありません（たとえば、Cではプラットフォーム固有のサイズの単なる整数です）-何ですか興味深いのは、その値が&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;指すもの&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="19bdf40bf0d0910a0274641de9caa509c06e2fd2" translate="yes" xml:space="preserve">
          <source>If you don't want to change the value of the original variable after passing it into a function, the function should be constructed with a &quot;&lt;strong&gt;pass by value&lt;/strong&gt;&quot; parameter.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;関数に渡した後で元の変数の値を変更したくない場合は、「&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;値渡し&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;」パラメーターを使用し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;て関数を作成する必要があり&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ec3a32a259d75495fafcc2de084612d021f12bfe" translate="yes" xml:space="preserve">
          <source>If your value is VAR1 = &quot;Happy Guy!&quot;, you will only see &quot;Happy Guy!&quot;. If VAR1 changes to &quot;Happy Gal!&quot;, you won't know that. If it's passed by reference, and VAR1 changes, you will.</source>
          <target state="translated">あなたの値がVAR1=&quot;Happy Guy!&quot;の場合、&quot;Happy Guy!&quot;としか表示されません。VAR1が &quot;Happy Gal!&quot;に変化しても、それはわかりません。参照で渡されていて、VAR1が変化した場合はわかります。</target>
        </trans-unit>
        <trans-unit id="9df5b20fed798fcf664fc2cac5f32abdc432a314" translate="yes" xml:space="preserve">
          <source>In &lt;em&gt;call by reference&lt;/em&gt;, the function's formal parameters are simply &lt;em&gt;new names&lt;/em&gt; for the same variables that the caller supplies as arguments.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;で&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;参照することにより呼び出し&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、関数の仮パラメータは、単純にある&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;新しい名前&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を引数として呼び出し側用品、同じ変数について。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9fcb8fa70e178c7bf61dd1f973de055411e8bcb0" translate="yes" xml:space="preserve">
          <source>In &lt;em&gt;call by value&lt;/em&gt;, the function's formal parameters are variables that are newly created for the function invocation, and which are initialized with the &lt;em&gt;values&lt;/em&gt; of their arguments.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;で&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;値によって呼び出し&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、関数の仮パラメータは、新たに関数呼び出しのために作成されており、どれがで初期化されている変数です&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;値&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、引数のは。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f9765a7cb94195661a7f370a640e70f9e99a5beb" translate="yes" xml:space="preserve">
          <source>In c#, to pass a variable by reference so the called method can modify the variable's, C# provides keywords ref and out. Applying the ref keyword to a parameter declaration allows you to pass a variable to a method by reference&amp;mdash;the called method will be able to modify the original variable in the caller. The ref keyword is used for variables that already have been initialized in the calling method. Normally, when a method call contains an uninitialized variable as an argument, the compiler generates an error. Preceding a parameter with keyword out creates an output parameter. This indicates to the compiler that the argument will be passed into the called method by reference and that the called method will assign a value to the original variable in the caller. If the method does not assign a value to the output parameter in every possible path of execution, the compiler generates an error. This also prevents the compiler from generating an error message for an uninitialized variable that is passed as an argument to a method. A method can return only one value to its caller via a return statement, but can return many values by specifying multiple output (ref and/or out) parameters.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C＃では、呼び出されたメソッドが変数を変更できるように参照によって変数を渡すために、C＃はキーワードrefおよびoutを提供します。パラメータ宣言にrefキーワードを適用すると、参照によって変数をメソッドに渡すことができます。呼び出されたメソッドは、呼び出し元の元の変数を変更できます。 refキーワードは、呼び出しメソッドですでに初期化されている変数に使用されます。通常、メソッド呼び出しに初期化されていない変数が引数として含まれている場合、コンパイラーはエラーを生成します。パラメータの前にキーワードoutを指定すると、出力パラメータが作成されます。これは、引数が参照によって呼び出されたメソッドに渡され、呼び出されたメソッドが呼び出し元の元の変数に値を割り当てることをコンパイラーに示します。メソッドが実行のすべての可能なパスで出力パラメーターに値を割り当てない場合、コンパイラーはエラーを生成します。これにより、メソッドに引数として渡される初期化されていない変数について、コンパイラがエラーメッセージを生成することも防止されます。メソッドは、returnステートメントを介して呼び出し元に値を1つだけ返すことができますが、複数の出力（refおよび/またはout）パラメータを指定することにより、多くの値を返すことができます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d5d1084df8b586952d88c19794aba535a677bb9e" translate="yes" xml:space="preserve">
          <source>In functional languages, &lt;em&gt;all&lt;/em&gt; objects are immutable.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;関数型言語では、&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;すべての&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;オブジェクトは不変です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f09a33520d9524be4917a785dc2f550ba4444582" translate="yes" xml:space="preserve">
          <source>In metaphoric terms:</source>
          <target state="translated">比喩的に言うと</target>
        </trans-unit>
        <trans-unit id="75b8b82f07e813f25f8aa777b9ad069324f2f151" translate="yes" xml:space="preserve">
          <source>In short, Passed by value is WHAT it is and passed by reference is WHERE it is.</source>
          <target state="translated">要するに、Passed by valueはWHAT it isで、Passed by referenceはWHERE it isです。</target>
        </trans-unit>
        <trans-unit id="cfc7e8a70761c2025ad727e8d569d9aa259077f5" translate="yes" xml:space="preserve">
          <source>In simplest terms:</source>
          <target state="translated">簡単に言うと</target>
        </trans-unit>
        <trans-unit id="7b2b2cee7ff2dff249b369b6c32127d56013526f" translate="yes" xml:space="preserve">
          <source>In some languages, some object types are &quot;immutable&quot;: any operation on them that seems to alter the value actually creates a completely new object without affecting the original one. So, passing an object of such a type as an argument always has the effect of pass-by-value: a copy for the callee will be made automatically if and when it needs a change, and the caller's object will never be affected.</source>
          <target state="translated">いくつかの言語では、いくつかのオブジェクト型は「不変」です:値を変更するような操作をしても、元のオブジェクトに影響を与えることなく、実際には全く新しいオブジェクトが作成されます。そのため、そのような型のオブジェクトを引数として渡すと、常に値を渡したときのような効果があります。</target>
        </trans-unit>
        <trans-unit id="f5a4682c4e96457401f2d267cf5d3759e71ca397" translate="yes" xml:space="preserve">
          <source>In this case, &lt;code&gt;param&lt;/code&gt; doesn't just have the same &lt;em&gt;value&lt;/em&gt; as &lt;code&gt;arg&lt;/code&gt;, it actually &lt;strong&gt;is&lt;/strong&gt;&lt;code&gt;arg&lt;/code&gt; (just by a different name) and so &lt;code&gt;bar&lt;/code&gt; can observe that &lt;code&gt;arg&lt;/code&gt; has been incremented.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この場合、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;param&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt; &lt;code&gt;arg&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;と同じ&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;値&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;持つだけでなく、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;実際に&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;/strong&gt; &lt;code&gt;arg&lt;/code&gt; であり&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（単に別の名前による）、&lt;/font&gt; &lt;code&gt;bar&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt; &lt;code&gt;arg&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;がインクリメントされている&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ことを確認でき&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1e8b5f3c56ea99edf6fe3538b9c9f5dbd50e45e9" translate="yes" xml:space="preserve">
          <source>It is exactly as if we had written the code this way:</source>
          <target state="translated">このようにコードを書いたのと全く同じです。</target>
        </trans-unit>
        <trans-unit id="ba2017f01d4b5e3837a6cc39aa2641361c7e5fc4" translate="yes" xml:space="preserve">
          <source>It's a way how to pass arguments to functions. Passing by reference means the called functions' parameter will be the same as the callers' passed argument (not the value, but the identity - the variable itself). Pass by value means the called functions' parameter will be a copy of the callers' passed argument. The value will be the same, but the identity - the variable - is different. Thus changes to a parameter done by the called function in one case changes the argument passed and in the other case just changes the value of the parameter in the called function (which is only a copy). In a quick hurry:</source>
          <target state="translated">関数に引数を渡す方法です。参照で渡すということは、呼び出された関数のパラメータが呼び出し元の渡された引数と同じになることを意味します(値ではなく、同一性、つまり変数そのもの)。値で渡すとは、呼び出された関数のパラメータが呼び出し元の渡された引数のコピーになることを意味します。値は同じになりますが、同一性(変数)は異なります。したがって、呼び出された関数によって行われたパラメータへの変更は、ある場合には渡された引数を変更し、他の場合には呼び出された関数のパラメータの値を変更するだけです(これはコピーでしかありません)。急いでいるときに。</target>
        </trans-unit>
        <trans-unit id="94f1506dff6edaaf3a991ae077be7ac2ad3c295c" translate="yes" xml:space="preserve">
          <source>Its address.</source>
          <target state="translated">その住所。</target>
        </trans-unit>
        <trans-unit id="cb05b65db2ada43f4ca193e8ea8a1ed4e1835444" translate="yes" xml:space="preserve">
          <source>Its value.</source>
          <target state="translated">その価値。</target>
        </trans-unit>
        <trans-unit id="e5664650fb653cb60de46dc4ef48efc29582cb58" translate="yes" xml:space="preserve">
          <source>Java only supports pass by value. Always copies arguments, even though when copying a reference to an object, the parameter in the called function will point to the same object and changes to that object will be see in the caller. Since this can be confusing, &lt;a href=&quot;https://jonskeet.uk/java/passing.html&quot;&gt;here&lt;/a&gt; is what Jon Skeet has to say about this.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Javaは値渡しのみをサポートします。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;オブジェクトへの参照をコピーする場合、呼び出された関数のパラメーターは同じオブジェクトを指し、そのオブジェクトへの変更は呼び出し元に表示されますが、常に引数をコピーします。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは混乱を招く可能性があるため、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://jonskeet.uk/java/passing.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここ&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;でJon Skeetがこれについて述べなければならないことがあります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6c1d8c26323a44450c9027c438c65ae1f40230b0" translate="yes" xml:space="preserve">
          <source>Keep it simple, peeps. Walls of text can be a bad habit.</source>
          <target state="translated">シンプルな文章にしましょう。テキストの壁は悪い癖になります。</target>
        </trans-unit>
        <trans-unit id="5b3839d4cab4b2e3b7cbd1e829e6fe9b7ce91854" translate="yes" xml:space="preserve">
          <source>Many answers here (and in particular the most highly upvoted answer) are factually incorrect, since they misunderstand what &quot;call by reference&quot; really means. Here's my attempt to set matters straight.</source>
          <target state="translated">ここでの多くの回答(特に最も高評価を得ている回答)は、「参照による呼び出し」が何を意味するのかを誤解しているため、事実に基づいて間違っています。ここでは、問題を整理するために私の試みを紹介します。</target>
        </trans-unit>
        <trans-unit id="9710ae38811b064e0b66a99f285a0b262bd760b6" translate="yes" xml:space="preserve">
          <source>Note that C++ has a notion of &quot;references&quot; (e.g. &lt;code&gt;int&amp;amp;&lt;/code&gt;) that is &lt;strong&gt;not&lt;/strong&gt; like Java and C#'s &quot;reference types&quot;, but &lt;strong&gt;is&lt;/strong&gt; like &quot;call by reference&quot;. Java and C#'s &quot;reference types&quot;, and &lt;em&gt;all&lt;/em&gt; types in Python, are like what C and C++ call &quot;pointer types&quot; (e.g. &lt;code&gt;int*&lt;/code&gt;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;注C ++は「参考文献」の概念を持っていること（例えば&lt;/font&gt;&lt;/font&gt; &lt;code&gt;int&amp;amp;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;であること&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ではない&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; JavaとC＃の&quot;参照型&quot;のような、しかし&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;である&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;『参照による呼び出し』のように。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;JavaとC＃の「参照型」、および&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Pythonの&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;すべての&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;型は、CおよびC ++が「ポインター型」と呼ぶもの（たとえば&lt;/font&gt;&lt;/font&gt; &lt;code&gt;int*&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;似てい&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e21567e8b73fa84c73ad77ce9ab401836a697b6a" translate="yes" xml:space="preserve">
          <source>Note that both of these concepts are completely independent and orthogonal from the concept of &lt;strong&gt;&lt;em&gt;reference types&lt;/em&gt;&lt;/strong&gt; (which in Java is all types that are subtypes of &lt;code&gt;Object&lt;/code&gt;, and in C# all &lt;code&gt;class&lt;/code&gt; types), or the concept of &lt;strong&gt;&lt;em&gt;pointer types&lt;/em&gt;&lt;/strong&gt; like in C (which are semantically equivalent to Java's &quot;reference types&quot;, simply with different syntax).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これらの概念は両方とも完全に独立しており、&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;参照型&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の概念&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（Javaではすべて&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Object&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サブタイプで&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あり、C＃ではすべての&lt;/font&gt;&lt;/font&gt; &lt;code&gt;class&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;型です）、または&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cのような&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ポインタ型&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の概念&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（これらは意味的には、Javaの「参照タイプ」と同等ですが、構文が異なります）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="25a6d90028e0300096155b3ce6dd2dc1ade7a134" translate="yes" xml:space="preserve">
          <source>Note that this is &lt;strong&gt;not&lt;/strong&gt; how any of Java, JavaScript, C, Objective-C, Python, or nearly any other popular language today works. This means that those languages are &lt;strong&gt;not&lt;/strong&gt; call by reference, they are call by value.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、現在のJava、JavaScript、C、Objective-C、Python、またはその他の一般的な言語で&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は機能し&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ない&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ことに注意してください&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;つまり、これらの言語は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;参照渡しで&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;なく&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、値渡しです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="11faf91e92f213fd28d8e40291fa909c4638b55f" translate="yes" xml:space="preserve">
          <source>Now, the authentic definition is:</source>
          <target state="translated">さて、正真正銘の定義は</target>
        </trans-unit>
        <trans-unit id="1a7b7352a1f0297c61dfa9212c688746676823a8" translate="yes" xml:space="preserve">
          <source>OK, here's the longer and more formal explanation.</source>
          <target state="translated">さて、ここで長くなってしまいましたが、より正式な説明をします。</target>
        </trans-unit>
        <trans-unit id="0c5eb5d154c5c29f403e372daae7202076e989a5" translate="yes" xml:space="preserve">
          <source>Or by &lt;strong&gt;passing the &amp;ldquo;references&amp;rdquo; of the cells A1 and B1 to cell A2&lt;/strong&gt; by typing &lt;em&gt;= A1 + B1&lt;/em&gt;. In this case, if the values of the cells A1 or B1 change, the sum in A2 changes too.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;または、&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;= A1 + B1と&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;入力&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;して、セルA1およびB1の「参照」をセルA2に渡し&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。この場合、セルA1またはB1の値が変化すると、A2の合計も変化します。&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3c8941d187c94e6a53e6ff3cad0dfdb27bb7fe5b" translate="yes" xml:space="preserve">
          <source>Pass by reference - The function uses the original variable, if you change the variable in the other function, it changes in the original variable too.</source>
          <target state="translated">参照渡し-関数は元の変数を使用します。他の関数で変数を変更すると、元の変数も変更されます。</target>
        </trans-unit>
        <trans-unit id="8f16241a59b751eb6cbff39b6de4f8cbc02de729" translate="yes" xml:space="preserve">
          <source>Pass by value - The function copies the variable and works with a copy(so it doesn't change anything in the original variable)</source>
          <target state="translated">値で渡す-この関数は,変数をコピーし,コピーを使って動作します(元の変数に何も変更を加えません).</target>
        </trans-unit>
        <trans-unit id="2cef6b37dfa17bb4e917392a148503b1c3db7641" translate="yes" xml:space="preserve">
          <source>Pass by value sends a COPY of the data stored in the variable you specify, pass by reference sends a direct link to the variable itself. So if you pass a variable by reference and then change the variable inside the block you passed it into, the original variable will be changed. If you simply pass by value, the original variable will not be able to be changed by the block you passed it into but you will get a copy of whatever it contained at the time of the call.</source>
          <target state="translated">値渡しは指定した変数に格納されているデータのCOPYを送信し、参照渡しは変数自体への直接リンクを送信します。そのため、参照で変数を渡した後、渡したブロック内で変数を変更した場合、元の変数は変更されます。単に値で渡すだけの場合は、元の変数は渡されたブロックによって変更することはできませんが、呼び出し時に含まれていたもののコピーを得ることができます。</target>
        </trans-unit>
        <trans-unit id="7365595bf985eac947edb497d85b84b024d6e69c" translate="yes" xml:space="preserve">
          <source>Passing &lt;code&gt;&quot;John&quot;&lt;/code&gt; is known as passing by value.
Passing &lt;code&gt;0x7fd5d258dd00&lt;/code&gt; is known as passing by reference. Anyone who is pointing to this memory location will have access to the value of &lt;code&gt;&quot;John&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;パッシング&lt;/font&gt;&lt;/font&gt; &lt;code&gt;&quot;John&quot;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;値渡しとして知られています。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;0x7fd5d258dd00&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を渡すことは、参照&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;渡し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と呼ばれます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このメモリ位置を指している人は誰でも&lt;/font&gt;&lt;/font&gt; &lt;code&gt;&quot;John&quot;&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;値にアクセスできます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d38f5cddd05d2c12e8c98ba1859c152cdc3283d4" translate="yes" xml:space="preserve">
          <source>Say I want to share a web page with you. If I tell you the URL, I'm
  passing by reference. You can use that URL to see the same web page I
  can see. If that page is changed, we both see the changes. If you
  delete the URL, all you're doing is destroying your reference to that
  page - you're not deleting the actual page itself.</source>
          <target state="translated">ウェブページを共有したいと言ってください。私がURLを教えたら、私は参照して渡していることになります。あなたはそのURLを使って、私が見ることができる同じウェブページを見ることができます。そのページが変更された場合、私もあなたも変更点を見ることになります。URLを削除した場合、あなたがしていることはそのページへの参照を破棄することだけで、実際のページそのものを削除しているわけではありません。</target>
        </trans-unit>
        <trans-unit id="769fab7e33db0e3c0fa3cee12bf821f3bc133b91" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;param&lt;/code&gt; is just another name for &lt;code&gt;arg&lt;/code&gt; -- that is, they are &lt;strong&gt;the same variable&lt;/strong&gt;, changes to &lt;code&gt;param&lt;/code&gt; are reflected in &lt;code&gt;arg&lt;/code&gt;. This is the fundamental way in which call by reference differs from call by value.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;以来&lt;/font&gt;&lt;/font&gt; &lt;code&gt;param&lt;/code&gt; は&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;のためのちょうど別の名前である&lt;/font&gt;&lt;/font&gt; &lt;code&gt;arg&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; -である、彼らは&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;同じ変数&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;への変更、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;param&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に反映されている&lt;/font&gt;&lt;/font&gt; &lt;code&gt;arg&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは、参照渡しが値渡しと異なる基本的な方法です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="aa853ceca90648f762403773e3de5553e252a245" translate="yes" xml:space="preserve">
          <source>Since my language is C++, i will use that here</source>
          <target state="translated">私の言語はC++なので、ここではそれを使用します。</target>
        </trans-unit>
        <trans-unit id="4d14885da8ef3abbd0aac02bbdd40f4cb5cb0c92" translate="yes" xml:space="preserve">
          <source>Since they are independent variables, changes to &lt;code&gt;another_variable&lt;/code&gt; do not affect &lt;code&gt;arg&lt;/code&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これらは独立した変数であるため、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;another_variable&lt;/code&gt; を&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;変更し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ても&lt;/font&gt;&lt;/font&gt; &lt;code&gt;arg&lt;/code&gt; に&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は影響しません&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f74a09526b6f4507d6e6e460766a660e64c1c9a2" translate="yes" xml:space="preserve">
          <source>So if you say &lt;code&gt;employee.name = &quot;John&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、&lt;/font&gt; &lt;code&gt;employee.name = &quot;John&quot;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;と言った場合&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5ff57f4185e884322f43c9c59da60f12f41285ea" translate="yes" xml:space="preserve">
          <source>TL;DR</source>
          <target state="translated">TL;DR</target>
        </trans-unit>
        <trans-unit id="21d278837034557e7a9b46210d42d6e7b8075142" translate="yes" xml:space="preserve">
          <source>Terminology</source>
          <target state="translated">Terminology</target>
        </trans-unit>
        <trans-unit id="d31fc6d67ad1df7e3be5c88469148d24d3fb8731" translate="yes" xml:space="preserve">
          <source>That is, the defining characteristic of what &lt;em&gt;call by value&lt;/em&gt; means is that the callee (&lt;code&gt;foo&lt;/code&gt; in this case) receives &lt;em&gt;values&lt;/em&gt; as arguments, but has its own separate &lt;em&gt;variables&lt;/em&gt; for those values from the variables of the caller (&lt;code&gt;bar&lt;/code&gt; in this case).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;つまり、&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;値による呼び出し&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が何を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;意味する&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;かを定義する特徴は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、呼び出し先（&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この場合は&lt;/font&gt;&lt;/font&gt; &lt;code&gt;foo&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が引数として&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;値&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;受け取る&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が、呼び出し元の変数（&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この場合は&lt;/font&gt; &lt;code&gt;bar&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;からそれらの値に対して&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;独自の個別の&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;変数&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を持っていることです&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f94b8d74275151f850f2fd1a3b7a581bfe0b7b47" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;passing by reference&amp;rdquo; method has &lt;strong&gt;an important limitation&lt;/strong&gt;. If a parameter is declared as &lt;strong&gt;passed by reference&lt;/strong&gt; (so it is preceded by the &amp;amp; sign) its corresponding &lt;strong&gt;actual parameter must be a variable&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;「参照渡し」方式に&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は重要な制限があり&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;パラメータが&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;参照渡し&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;として宣言されている場合&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（そのため、前に＆記号が付いてい&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）、対応する&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;実際のパラメータは変数である必要があります&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1c3de59e30bc1afb18206d5c04209b97a3a36b22" translate="yes" xml:space="preserve">
          <source>The caller can just make a private copy before the call and give the callee a reference to that instead.</source>
          <target state="translated">発信者は電話の前にプライベートコピーを作っておいて、代わりにそれを参照させればいいんだよ。</target>
        </trans-unit>
        <trans-unit id="45b626a8f90c2c072269296274cf38f84db12637" translate="yes" xml:space="preserve">
          <source>The function is not able to place a value in something other than a variable. It cannot assign a new value to a literal or force an expression to change its result.</source>
          <target state="translated">この関数は、変数以外のものに値を置くことができません。リテラルに新しい値を代入したり、式の結果を強制的に変更したりすることはできません。</target>
        </trans-unit>
        <trans-unit id="190ddc465ed862913bd6475d00cd62643198af5b" translate="yes" xml:space="preserve">
          <source>The notion of &lt;em&gt;reference type&lt;/em&gt; corresponds to a URL: it is both itself a piece of information, and it is a &lt;em&gt;reference&lt;/em&gt; (a &lt;em&gt;pointer&lt;/em&gt;, if you will) to other information. You can have many copies of a URL in different places, and they don't change what website they all link to; if the website is updated then every URL copy will still lead to the updated information. Conversely, changing the URL in any one place won't affect any other written copy of the URL.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;参照型&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の概念は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;URLに対応します。それ自体が情報の一部であり、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;他の情報への&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;参照&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ポインタ&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）でもあります。 URLの多くのコピーをさまざまな場所に置くことができ、リンク先のWebサイトは変更されません。 Webサイトが更新されても、すべてのURLコピーは更新された情報につながります。逆に、いずれか1つの場所でURLを変更しても、URLの他の書かれたコピーには影響しません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c93eff5a81a6148f1801b93e4301a07244413b0a" translate="yes" xml:space="preserve">
          <source>The other important pair of concepts to distinguish is &lt;em&gt;parameter&lt;/em&gt; versus &lt;em&gt;argument&lt;/em&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;区別するための他の重要な概念のペアは、&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;パラメーター&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;引数&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="94c281cf3a774b1a26c406b830c7abb77ff1de96" translate="yes" xml:space="preserve">
          <source>The simplest way to get this is on an Excel file. Let&amp;rsquo;s say for example that you have two numbers, 5 and 2 in cells A1 and B1 accordingly, and you want to find their sum in a third cell, let's say A2. 
You can do this in two ways.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これを取得する最も簡単な方法は、Excelファイルです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;たとえば、セルA1とB1に5と2の2つの数値があり、それらの合計を3番目のセル、たとえばA2にあるとします。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これには2つの方法があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="77b08d764936332f1c4a209a262d287059da0b8c" translate="yes" xml:space="preserve">
          <source>Then the function will have ONLY the value but not the address of the passed in variable.  Without the variable's address, the code inside the function cannot change the variable value as seen from the outside of the function.</source>
          <target state="translated">その場合、関数は値のみを持ち、渡された変数のアドレスは持ちません。変数のアドレスがなければ、関数の外部から見た場合、関数内部のコードは変数の値を変更することができません。</target>
        </trans-unit>
        <trans-unit id="5c1ac7683dd2ba07c2d671bc98b47e867ed3e464" translate="yes" xml:space="preserve">
          <source>There are two very important sets of concepts to distinguish here. The first is &lt;em&gt;value&lt;/em&gt; versus &lt;em&gt;variable&lt;/em&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここで区別する2つの非常に重要な概念のセットがあります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;1つ目は、&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;値&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;変数の&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;比較&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="67c8b2743fe3552af6854154bf070d6a35748339" translate="yes" xml:space="preserve">
          <source>There's no agreed-upon name for them, which leads to contorted explanations like &quot;call by value where the value is a reference&quot;. In 1975, Barbara Liskov suggested the term &quot;&lt;a href=&quot;https://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_sharing&quot;&gt;call-by-object-sharing&lt;/a&gt;&quot; (or sometimes just &quot;call-by-sharing&quot;) though it never quite caught on. Moreover, neither of these phrases draws a parallel with the original pair. No wonder the old terms ended up being reused in the absense of anything better, leading to confusion.&lt;sup&gt;4&lt;/sup&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それらの合意された名前はないため、「値が参照である場合の値による呼び出し」などの説明がゆがんでしまいます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;1975年、Barbara Liskovは「&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_sharing&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;オブジェクト共有による呼び出し&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;」（または単に「&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;共有による呼び出し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;」という用語）を提案しましたが、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あまり普及していませんでした。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;さらに、これらのフレーズはどちらも元のペアとの類似点を示していません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;古い用語が何もない状態で再利用されて混乱に終わったのも不思議ではありません。&lt;/font&gt;&lt;/font&gt;&lt;sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;4&lt;/font&gt;&lt;/font&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="1a3c5494a5a75f6fb10faba056b9c5de60d735aa" translate="yes" xml:space="preserve">
          <source>Things to note in this definition are:</source>
          <target state="translated">この定義で注意すべきことは</target>
        </trans-unit>
        <trans-unit id="2a017f7a7d98147440fdc82f0593882be018c5ee" translate="yes" xml:space="preserve">
          <source>This guy pretty much nails it:</source>
          <target state="translated">この男はかなり釘を刺しています。</target>
        </trans-unit>
        <trans-unit id="67d81ca73043d11fe3f8c75a12d2f9ca29721b63" translate="yes" xml:space="preserve">
          <source>This is &lt;em&gt;mostly&lt;/em&gt; correct &lt;em&gt;except&lt;/em&gt; the narrower meaning of &quot;reference&quot; -- it being both temporary and implicit (it doesn't have to, but being explicit and/or persistent are additional features, not a part of the pass-by-reference semantic, as explained above). A closer analogy would be giving you a copy of a document vs inviting you to work on the original.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、「参照」のより狭い意味を&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;除い&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;て&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ほとんど&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;正しい&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;-一時的および暗黙的の両方です（必須ではありませんが、明示的または永続的であることが追加機能であり、参照渡しセマンティックの一部ではありません） 、上記で説明したように）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;よく似た例は、ドキュメントのコピーを提供するのではなく、オリジナルに取り組むように招待することです。&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="42e154984413d3a0e1f3424a4c64ba4b1d7f0c9a" translate="yes" xml:space="preserve">
          <source>This is exactly the same as the relationship between &lt;code&gt;arg&lt;/code&gt; and &lt;code&gt;param&lt;/code&gt; in our example above, which I'll repeat here for symmetry:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;上記の例の&lt;/font&gt;&lt;/font&gt; &lt;code&gt;arg&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;param&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;関係とまったく同じ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。対称性についてここで繰り返します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="44c8affdf0e689b408ca95ed21c4a0efd6e07546" translate="yes" xml:space="preserve">
          <source>This is now considered bad practice (as an implicit dependency). As such, &lt;strong&gt;virtually all newer languages are exclusively, or almost exclusively pass-by-value.&lt;/strong&gt; Pass-by-reference is now chiefly used in the form of &quot;output/inout arguments&quot; in languages where a function cannot return more than one value.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは現在、（暗黙的な依存関係として）悪い習慣と見なされています。そのため、&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;実質的にすべての新しい言語は、排他的に、またはほとんど排他的に値渡しです。&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;関数が複数の値を返すことができない言語では、参照渡しは主に「出力/入出力引数」の形式で使用されます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c858b2ee157703a151db735a41b42594c23c01dd" translate="yes" xml:space="preserve">
          <source>This works exactly the same way that any other kinds of variables are initialized with values. For example:</source>
          <target state="translated">これは、他の種類の変数が値で初期化されるのと全く同じように動作します。例えば</target>
        </trans-unit>
        <trans-unit id="930d70a4cc644b0157557de3bcd43f5beca8c742" translate="yes" xml:space="preserve">
          <source>To borrow the analogy of the URL again, the fact that I gave you a &lt;strong&gt;copy&lt;/strong&gt; of the URL to a website is not particularly interesting if the thing we both care about is the website, not the URL. The fact that you scribbling over your copy of the URL doesn't affect my copy of the URL isn't a thing we care about (and in fact, in languages like Java and Python the &quot;URL&quot;, or reference type value, can't be modified at all, only the thing pointed to by it can).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;URLの類推を再度借りると、私があなたに&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;WebサイトへのURLの&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コピー&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を提供したという事実は、私&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;たち2人がURLでなくWebサイトである場合、特に興味深いものではありません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;URLのコピーを上書きしても、私のURLのコピーには影響しないという事実は、私たちが気にすることではありません（実際、JavaやPythonなどの言語では、「URL」または参照型の値によって、まったく変更しないでください。それによって指定されたものだけが変更できます）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a4a7f5fbf58a7664de63656b8f081d1bd98c4ef3" translate="yes" xml:space="preserve">
          <source>To have the same effect as pass-by-value, a copy of the object is made at some point. Options include:</source>
          <target state="translated">値渡しと同じ効果を得るために、ある時点でオブジェクトのコピーが作成されます。オプションには次のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="fecc83247ac04fdaaf06ee439eda04776c92bdfc" translate="yes" xml:space="preserve">
          <source>To start with, I want to highlight some important bits of terminology, to help clarify my answer and to ensure we're all referring to the same ideas when we are using words. (In practice, I believe the vast majority of confusion about topics such as these stems from using words in ways that to not fully communicate the meaning that was intended.)</source>
          <target state="translated">まず最初に、私の答えを明確にし、言葉を使っているときに同じ考えに言及していることを確認するために、いくつかの重要な用語を強調しておきたいと思います。(実際には、このようなトピックに関する混乱の大部分は、意図した意味を十分に伝えられないような方法で言葉を使うことに起因していると私は考えています)。</target>
        </trans-unit>
        <trans-unit id="e346a97905f1958718e4986c56283c42b87749e1" translate="yes" xml:space="preserve">
          <source>To start, here's an example in some C-like language of a function declaration:</source>
          <target state="translated">まず、C言語に似た言語での関数宣言の例を示します。</target>
        </trans-unit>
        <trans-unit id="e1bcbcecd757c896953f6667ed593f450f425768" translate="yes" xml:space="preserve">
          <source>Using this example, I want to define some important bits of terminology:</source>
          <target state="translated">この例を使って、いくつかの重要な用語を定義したいと思います。</target>
        </trans-unit>
        <trans-unit id="173ba9fdd42d28dfe6578af600f9727c2b05acf1" translate="yes" xml:space="preserve">
          <source>Very few languages support call by reference, but C++ can do it like this:</source>
          <target state="translated">参照による呼び出しをサポートしている言語はほとんどありませんが、C++ではこのように呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="bca2025696923c2b4a1ac5b779ea5df55f719431" translate="yes" xml:space="preserve">
          <source>What &quot;call by value&quot; and &quot;call by reference&quot; &lt;em&gt;don't&lt;/em&gt; mean</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;「値渡し」および「参照渡し」&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;意味&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;しない&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;こと&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cea908217bcefc8f05da33bdad1d2e2df1b58721" translate="yes" xml:space="preserve">
          <source>What is the difference between</source>
          <target state="translated">の違いは何ですか?</target>
        </trans-unit>
        <trans-unit id="9027be4085fe45396497e506864b7a472bf4d036" translate="yes" xml:space="preserve">
          <source>What's the difference between passing by reference vs. passing by value</source>
          <target state="translated">参照で渡すことと値で渡すことの違いは?</target>
        </trans-unit>
        <trans-unit id="b2a815ccdb4f1793ac71c8eae2cd6344e45939b5" translate="yes" xml:space="preserve">
          <source>When a parameter is &lt;strong&gt;passed by reference&lt;/strong&gt;, the caller and the callee &lt;strong&gt;use the same variable&lt;/strong&gt; for the parameter. If the callee modifies the parameter variable, the effect is visible to the caller's variable.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;パラメーターが&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;参照渡しされる&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;場合、呼び出し元と呼び出し先&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はパラメーターに&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;同じ変数&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;呼び出し先がパラメーター変数を変更した場合、その効果は呼び出し元の変数に表示されます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b1f6ae5ad14bfc23213aae72cadf5a028c75380d" translate="yes" xml:space="preserve">
          <source>When a parameter is &lt;strong&gt;passed by value&lt;/strong&gt;, the caller and callee have &lt;strong&gt;two independent variables&lt;/strong&gt; with the same value. If the callee modifies the parameter variable, the effect is not visible to the caller.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;パラメータが&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;値&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;で&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;渡される場合&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、呼び出し元と呼び出し先には&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、同じ値を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;持つ&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2つの独立した変数&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;があります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;呼び出し先がパラメータ変数を変更した場合、その効果は呼び出し元には見えません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3d76ca737f825ebe7eeaad751b4f4da27e65af7a" translate="yes" xml:space="preserve">
          <source>When discussing languages that are technically call by value, but where common types in use are reference or pointer types (that is: nearly every modern imperative, object-oriented, or multi-paradigm programming language), I find it's a lot less confusing to simply avoid talking about &lt;em&gt;call by value&lt;/em&gt; or &lt;em&gt;call by reference&lt;/em&gt;. Stick to &lt;strong&gt;call by object sharing&lt;/strong&gt; (or simply &lt;strong&gt;call by object&lt;/strong&gt;) and nobody will be confused. :-)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;技術的に値で呼び出されているが、一般的に使用されている型が参照型またはポインタ型（つまり、ほとんどすべての現代の命令型、オブジェクト指向型、またはマルチパラダイムプログラミング言語）である言語について説明するときは、混乱が少ないことがわかります。&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;値&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;による呼び出し&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;や&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;参照による呼び出し&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;について話すのは避けて&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ください&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;スティックする&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;オブジェクト共有によって呼び出す&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（あるいは単に&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;オブジェクトで呼び出す&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）と誰もが混同されません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;:-)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2ecd292a63e3d5222c9a25893600961a65a608b1" translate="yes" xml:space="preserve">
          <source>When passing by ref you are basically passing a pointer to the variable. Pass by value you are passing a copy of the variable.  In basic usage this normally means pass by ref changes to the variable will seen be the calling method and pass by value they wont.</source>
          <target state="translated">ref で渡す場合、基本的には変数へのポインタを渡すことになります。value で渡す場合は、変数のコピーを渡すことになります。基本的な使用法としては、通常 ref で変数に変更を加えた場合は呼び出し側のメソッドに表示され、値を渡した場合は表示されないということになります。</target>
        </trans-unit>
        <trans-unit id="664add438097fbd4307f814de8e62a10f8905588" translate="yes" xml:space="preserve">
          <source>Wikipedia</source>
          <target state="translated">Wikipedia</target>
        </trans-unit>
        <trans-unit id="3dcb9e4a709cd9732c54c1458c1e7ecb4869b88a" translate="yes" xml:space="preserve">
          <source>a parameter passed by reference</source>
          <target state="translated">参照渡しパラメータ</target>
        </trans-unit>
        <trans-unit id="d942c9b2660856d3052135b0ecb1bde891a4e02f" translate="yes" xml:space="preserve">
          <source>a parameter passed by value?</source>
          <target state="translated">値で渡されたパラメータ?</target>
        </trans-unit>
        <trans-unit id="c8d883099ccb83527ab26efc085bbc497c87c206" translate="yes" xml:space="preserve">
          <source>know that there are 2 things about &lt;code&gt;name&lt;/code&gt;. Its value which is &lt;code&gt;&quot;John&quot;&lt;/code&gt; and also its location in the memory which is some hexadecimal number maybe like  this: &lt;code&gt;0x7fd5d258dd00&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;name&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;については2つのことを知っています&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;&quot;John&quot;&lt;/code&gt; で&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あるその値と&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、16進数であるメモリ内の位置は、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;0x7fd5d258dd00&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ように&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;なり&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="92d18d86d3482790e7c13a933b9573aa4d43bece" translate="yes" xml:space="preserve">
          <source>pass by value means how to pass value to a function by making use of arguments. in pass by value we copy the data stored in the variable we specify and it is slower than pass by reference bcse t
he data is copied . of we make changes in the copied data the original data is not affected. nd in pass by refernce or pass by address we send direct link to the variable itself . or passing pointer to a variable. it is faster bcse less time is consumed</source>
          <target state="translated">値によるパスは、引数を使用して関数に値を渡す方法を意味します。値によるパスでは、我々は指定した変数に格納されているデータをコピーし、データがコピーされるので、参照によるパスよりも遅くなりますが、我々はコピーされたデータに変更を加えても、元のデータは影響を受けません。</target>
        </trans-unit>
        <trans-unit id="e1fe0646916dec7e41ba04370658cec4d2b909cf" translate="yes" xml:space="preserve">
          <source>see c# discussion and examples here &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/0f66670z(VS.71).aspx&quot;&gt;link text&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C＃のディスカッションと例の&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/0f66670z(VS.71).aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;リンクテキストを参照&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
