<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/3730019">
    <body>
      <group id="3730019">
        <trans-unit id="09f0a3718fc85408fc3968cd3e73ec142bfdf8e6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Finally Java has a standard way to work with Currency And Money!&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最後に、JavaにはCurrency And Moneyを操作する標準的な方法があります。&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="067ffcb87cbcca8f5deb07e1edf7236614c5c3f3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;From Bloch, J., Effective Java, 2nd ed, Item 48:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Bloch、J.、Effective Java、第2版、アイテム48から：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b5f6e9fc67eabeb616ef60d5d06c36cdfa7f7379" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSR 354: Money and Currency API&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;JSR 354：Money and Currency API&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7f766b6007bcacd14501e3d6f2ddefc6012c887b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Sample Examples of JSR 354: Money and Currency API:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;JSR 354のサンプル例：Money and Currency API：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4e2aae1a87e35a4fa14d5b8e07a14c874d3e8731" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The specification consists of the following things:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;仕様は次のもので構成されています。&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="279d8b6ec4347409e3a31f9d1293b292eba50459" translate="yes" xml:space="preserve">
          <source>A solution that works in just about any language is to use integers instead, and count cents. For instance, 1025 would be $10.25. Several languages also have built-in types to deal with money. Among others, Java  has the &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html&quot;&gt;&lt;code&gt;BigDecimal&lt;/code&gt;&lt;/a&gt; class, and C# has the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/364x0z75.aspx&quot;&gt;&lt;code&gt;decimal&lt;/code&gt;&lt;/a&gt; type.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ほぼすべての言語で機能する解決策は、代わりに整数を使用してセントを数えることです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;たとえば、1025は$ 10.25になります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;いくつかの言語には、お金を処理するための組み込み型もあります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;特に、Javaには&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html&quot;&gt; &lt;code&gt;BigDecimal&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;クラスがあり、C＃には&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/364x0z75.aspx&quot;&gt; &lt;code&gt;decimal&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;タイプがあります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="717c89d37aca9bbeaf61dacfbd6ecf66a6ac4cf6" translate="yes" xml:space="preserve">
          <source>APIs to support interchangeable implementations</source>
          <target state="translated">交換可能な実装をサポートするAPI</target>
        </trans-unit>
        <trans-unit id="764e3868719a642a94e9c1db3b2399ade06cc23d" translate="yes" xml:space="preserve">
          <source>All specification classes and interfaces are located in the javax.money.* package.</source>
          <target state="translated">すべての仕様クラスとインタフェースは javax.money.*パッケージにあります。</target>
        </trans-unit>
        <trans-unit id="bf91636fa17ae4579edcdf37d35ebfd293f2b61f" translate="yes" xml:space="preserve">
          <source>Also, there might be situations when you're tempted to use Double wrappers as a map key with hash map being the implementation. It is very risky because Double.equals and hash code for example values &quot;0.5&quot; &amp;amp; &quot;0.6 - 0.1&quot; will cause a big mess.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;また、実装であるハッシュマップを使用して、マップキーとしてDoubleラッパーを使用したい場合があります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Double.equalsとハッシュコードの例の値「0.5」と「0.6-0.1」は大きな混乱を引き起こすため、非常に危険です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cf754cbdda51fd0330c49df312d2b9c5513b384b" translate="yes" xml:space="preserve">
          <source>An API for handling e. g. monetary amounts and currencies</source>
          <target state="translated">金額や通貨などを扱うためのAPIです。</target>
        </trans-unit>
        <trans-unit id="47f68da097e3b1b2f17304cdd296e6c8b747eb0d" translate="yes" xml:space="preserve">
          <source>An example of creating a MonetaryAmount and printing it to the console looks like this::</source>
          <target state="translated">MonetaryAmountを作成してコンソールに印刷する例は次のようになります。</target>
        </trans-unit>
        <trans-unit id="c7ad5819035e16732c5be390d7fe2b3aaf867a68" translate="yes" xml:space="preserve">
          <source>Arbitrary precision won't help because there always can be numbers that has so many decimal places, or some results such as &lt;code&gt;0.6666666&lt;/code&gt;... No arbitrary representation will cover the last example. So you will have small errors in each step.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;小数点以下の桁数が非常に多い数値や、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;0.6666666&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;などの結果が常に存在する可能性があるため、任意の精度では効果が&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ありません...最後の例をカバーする任意の表現はありません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、各ステップで小さなエラーが発生します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f2e27a448c1442df8dbf814d07126dae13f3ba4b" translate="yes" xml:space="preserve">
          <source>As said earlier &quot;Representing money as a double or float will probably look good at first as the software rounds off the tiny errors, but as you perform more additions, subtractions, multiplications and divisions on inexact numbers, you&amp;rsquo;ll lose more and more precision as the errors add up. This makes floats and doubles inadequate for dealing with money, where perfect accuracy for multiples of base 10 powers is required.&quot;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;先に述べたように、「ソフトウェアが小さなエラーを四捨五入するので、最初にダブルまたはフロートとしてお金を表すことはおそらく見栄えがよくなりますが、不正確な数値に対してより多くの加算、減算、乗算、および除算を実行すると、ますます精度が失われます。エラーが増えると、浮動小数点数と倍精度浮動小数点数は、基本10の累乗の倍数の完全な精度が必要とされる金銭を処理するには不適切になります。」&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b08a01dc6c5fc3334a18152f819d33b8eda77206" translate="yes" xml:space="preserve">
          <source>Assume you want to round something to the nearest penny.  So you take your final result, multiply by 100, add 0.5, truncate, then divide the result by 100 to get back to pennies.  If the internal number you stored was 3.46499999.... instead of 3.465, you are going to get 3.46 instead 3.47 when you round the number to the nearest penny.  But your base 10 calculations may have indicated that the answer should be 3.465 exactly, which clearly should round up to 3.47, not down to 3.46.  These kinds of things happen occasionally in real life when you use doubles for financial calculations.  It is rare, so it often goes unnoticed as an issue, but it happens.</source>
          <target state="translated">何かを一番近いペニーに丸めたいとします。そこで、最終的な結果を100倍し、0.5を加えて切り捨て、その結果を100で割ってペニーに戻します。もしあなたが記憶していた内数が3.465ではなく3.46499999........だったとしたら、1ペニーに最も近いペニーに四捨五入すると3.47ではなく3.46になります。しかし、あなたのベース10の計算では、答えは正確に3.465であるべきであることが示されていたかもしれません。このようなことは、金銭的な計算にダブルスを使うと、現実の生活の中で時々起こります。まれなことなので、問題として気づかないことが多いのですが、よくあることなのです。</target>
        </trans-unit>
        <trans-unit id="686314d64dfd1b19bdb75704e3275be9ef46537d" translate="yes" xml:space="preserve">
          <source>Because floats and doubles cannot accurately represent the base 10 multiples that we use for money. This issue isn't just for Java, it's for any programming language that uses base 2 floating-point types.</source>
          <target state="translated">なぜなら、浮動小数点や倍数は、お金に使う10の倍数を正確に表すことができないからです。この問題はJavaだけの問題ではなく、ベース2の浮動小数点型を使用するすべてのプログラミング言語に当てはまります。</target>
        </trans-unit>
        <trans-unit id="d774a91c3005dbfc9d51d54db8523611c0c80ee8" translate="yes" xml:space="preserve">
          <source>BigDecimal in Java is native to the Java language.
Apfloat is another arbitrary-precision library for Java.</source>
          <target state="translated">JavaのBigDecimalはJava言語のネイティブです。ApfloatもJava用の任意精度ライブラリです。</target>
        </trans-unit>
        <trans-unit id="b94819d8ebaaf6c31dbcb3e0507caf9b63c974e0" translate="yes" xml:space="preserve">
          <source>Coming from a non-computer science background (physics and engineering), I tend to look at problems from a different perspective. For me, the reason why I wouldn't use a double or float in a mathematical calculation is that I would lose too much information.</source>
          <target state="translated">私はコンピュータサイエンスではないバックグラウンド(物理学や工学)を持っているので、別の視点から問題を見る傾向があります。私の場合、数学的な計算でダブルやフロートを使わないのは、情報量が多くなりすぎるからです。</target>
        </trans-unit>
        <trans-unit id="677ba35d3f4b7ef97f05e8f12a39a698e653703d" translate="yes" xml:space="preserve">
          <source>Concluding, in my opinion the double is unsuitable mostly for its 16 digit precision, which can be insufficient, not because it is approximate.</source>
          <target state="translated">結論として、私の意見では、ダブルは、それが近似的であるためではなく、不十分なことができ、その16桁の精度のために主に適していません。</target>
        </trans-unit>
        <trans-unit id="0545f3890164845c72010b8e0ed6d58da24b6375" translate="yes" xml:space="preserve">
          <source>Consider the following output of the subsequent program. It shows that after rounding double give the same result as BigDecimal up to precision 16.</source>
          <target state="translated">次のプログラムの出力を考えてみましょう。これは、二重丸めの後、精度16までのBigDecimalと同じ結果を与えることを示しています。</target>
        </trans-unit>
        <trans-unit id="e5741882b583d222d3509526f6535f0aca560bcc" translate="yes" xml:space="preserve">
          <source>CurrencyUnit and MonetaryAmount</source>
          <target state="translated">通貨単位と通貨額</target>
        </trans-unit>
        <trans-unit id="a39fe455337c4b0e4fe8c05f871b35046753359b" translate="yes" xml:space="preserve">
          <source>Custom MonetaryAmount operations</source>
          <target state="translated">カスタム金額演算</target>
        </trans-unit>
        <trans-unit id="3332fa176aea702f236b003b8db2099175e7e9fe" translate="yes" xml:space="preserve">
          <source>Documentation:
  &lt;a href=&quot;http://joda-money.sourceforge.net/apidocs/org/joda/money/Money.html&quot;&gt;http://joda-money.sourceforge.net/apidocs/org/joda/money/Money.html&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ドキュメント：&lt;/font&gt;&lt;a href=&quot;http://joda-money.sourceforge.net/apidocs/org/joda/money/Money.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : &lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;//joda-money.sourceforge.net/apidocs/org/joda/money/Money.html&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="381e479c3588e94e6153168dcc0099a4c7380509" translate="yes" xml:space="preserve">
          <source>Even if you round off your results at the last minute before output, you can still occasionally get a result using doubles that does not match expectations.</source>
          <target state="translated">アウトプット前のギリギリのタイミングで丸め込んでも、たまに期待に沿わないダブルスを使って結果が出ることがあります。</target>
        </trans-unit>
        <trans-unit id="739138cb0e4f13fdb2a14bb54aa2436816c625fd" translate="yes" xml:space="preserve">
          <source>Even in base 10, this notation cannot accurately represent most simple fractions. For instance, you can't represent 1/3: the decimal representation is repeating (0.3333...), so there is no finite integer that you can multiply by a power of 10 to get 1/3. You could settle on a long sequence of 3's and a small exponent, like 333333333 * 10&lt;sup&gt;-10&lt;/sup&gt;, but it is not accurate: if you multiply that by 3, you won't get&amp;nbsp;1.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;基数10でも、この表記はほとんどの単純な分数を正確に表すことができません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;たとえば、1/3を表すことはできません。10進数表現は繰り返し（0.3333 ...）であるため、10の累乗を乗算して1/3を得ることができる有限の整数はありません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;3の長いシーケンスと333333333 * 10 &lt;/font&gt;&lt;/font&gt;&lt;sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;-10の&lt;/font&gt;&lt;/font&gt;&lt;/sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ような小さな指数で解決することもできますが&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、正確ではありません。3を掛けても1にはなりません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ee1869b094937e9a8826f16f45c31d79373b5f4c" translate="yes" xml:space="preserve">
          <source>Examples of using Joda Money:</source>
          <target state="translated">城田マネーの利用例</target>
        </trans-unit>
        <trans-unit id="b5072184cf44d5fe99ebc445de8723c52dba90a9" translate="yes" xml:space="preserve">
          <source>Factories for creating instances of the implementation classes</source>
          <target state="translated">実装クラスのインスタンスを作成するためのファクトリー</target>
        </trans-unit>
        <trans-unit id="40dd3f8de5b5b29b2f97def0749ce28de01e7855" translate="yes" xml:space="preserve">
          <source>Floats and doubles are approximate. If you create a BigDecimal and pass a float into the constructor you see what the float actually equals:</source>
          <target state="translated">フロートとダブルスは近似値です。BigDecimal を作成し、コンストラクタに float を渡すと、その float が実際に何と等しくなるかがわかります。</target>
        </trans-unit>
        <trans-unit id="f91c4b87711bc72d9c507486005d248573dcd071" translate="yes" xml:space="preserve">
          <source>For example COBOL, historically used for financial calculations, has a maximum precision of 18 figures. So there is often an implicit rounding.</source>
          <target state="translated">例えば、歴史的に金融計算に使われてきたCOBOLでは、最大18桁の数字の精度があります。そのため、暗黙の丸めがあることが多い。</target>
        </trans-unit>
        <trans-unit id="75c807d28a864927acb8b31d7d3c8ac580f2b9cc" translate="yes" xml:space="preserve">
          <source>For example, suppose you have $1.03
  and you spend 42c. How much money do
  you have left?</source>
          <target state="translated">例えば、1.03ドルを持っていて、42cを使ったとします。あなたの手元にはどれくらいのお金が残っていますか?</target>
        </trans-unit>
        <trans-unit id="9de791eaf216bc3b590abee4d7754d4d8c9d03e5" translate="yes" xml:space="preserve">
          <source>For me, I like BigDecimal because of the methods it supports. C#'s decimal is very nice, but I haven't had the chance to work with it as much as I'd like. I do scientific calculations of interest to me in my spare time, and BigDecimal seems to work very well because I can set the precision of my floating point numbers. The disadvantage to BigDecimal? It can be slow at times, especially if you're using the divide method.</source>
          <target state="translated">私にとってBigDecimalが好きなのは、サポートしているメソッドがあるからです。C#の 10 進法はとてもいいのですが、これまであまり使う機会がありませんでした。私は暇な時に興味のある科学的な計算をしているのですが、BigDecimalは浮動小数点数の精度を設定できるので、とてもよく動いているように思います。BigDecimal の欠点は?特に除算法を使っている場合は、時間がかかることがあります。</target>
        </trans-unit>
        <trans-unit id="c1596c5466820636637e428d747fe6a6fbee306e" translate="yes" xml:space="preserve">
          <source>Functionality for calculations, conversion and formatting of monetary            amounts</source>
          <target state="translated">金額の計算・変換・フォーマット機能</target>
        </trans-unit>
        <trans-unit id="b834495da73d80490ba3f5f0af039bcb1529bbb2" translate="yes" xml:space="preserve">
          <source>Handling money and currencies in Java with JSR 354</source>
          <target state="translated">JSR 354を用いたJavaでの貨幣・通貨の取り扱い</target>
        </trans-unit>
        <trans-unit id="1a6c98689987bf69175f5b0dbd14419ab2e195b3" translate="yes" xml:space="preserve">
          <source>However, for the purpose of counting money, at least for countries whose money is valued within an order of magnitude of the US dollar, usually all you need is to be able to store multiples of 10&lt;sup&gt;-2&lt;/sup&gt;, so it doesn't really matter that 1/3 can't be represented.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ただし、お金を数えるために、少なくとも米ドルが1ドルの桁で評価される国では、通常、必要なのは10 &lt;/font&gt;&lt;/font&gt;&lt;sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;-2の&lt;/font&gt;&lt;/font&gt;&lt;/sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;倍数を格納できることだけな&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ので、実際には問題になりません。その1/3は表現できません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9545c9929da7e9a99ecf7b11d62ec5571358a4ac" translate="yes" xml:space="preserve">
          <source>I have worked on a number of projects with very low gc requirements, and having BigDecimal objects was a big contributor to that overhead.</source>
          <target state="translated">私は、非常に低い gc 要件のプロジェクトをいくつか手がけてきましたが、BigDecimal オブジェクトを持つことは、そのオーバーヘッドに大きく貢献していました。</target>
        </trans-unit>
        <trans-unit id="20bcc3b9e6b736283080cd8b942be6364f880be5" translate="yes" xml:space="preserve">
          <source>I'll risk being downvoted, but I think the unsuitability of floating point numbers for currency calculations is overrated. As long as you make sure you do the cent-rounding correctly and have enough significant digits to work with in order to counter the binary-decimal representation mismatch explained by zneak, there will be no problem.</source>
          <target state="translated">私はダウンレビューされるリスクを冒しますが、浮動小数点数が通貨計算に適さないというのは過大評価されていると思います。zneakさんが説明されている2進数と10進数の表現の不一致に対抗するために、セント丸めを正しく行い、十分な有効数字を持っていることを確認している限り、問題はないでしょう。</target>
        </trans-unit>
        <trans-unit id="f3e4618f2467db822b69c46c1fea719a017d4735" translate="yes" xml:space="preserve">
          <source>I'm not a computer scientist by training. However, I tend to lean towards either BigDecimal in Java or decimal in C#. I haven't tried the other solutions I've listed, but they are probably very good as well.</source>
          <target state="translated">私は訓練を受けたコンピュータ科学者ではありません。しかし、私はJavaのBigDecimalかC#の10進法のどちらかに傾く傾向があります。私はリストアップした他のソリューションを試していませんが、おそらくこれらも非常に良いものでしょう。</target>
        </trans-unit>
        <trans-unit id="990e7012ab72470facd01fe2c1a1f5d51c224ba0" translate="yes" xml:space="preserve">
          <source>I'm sure there is a very good reason, I simply do not know what it is.</source>
          <target state="translated">それなりの理由があると思いますが、単純にそれが何なのかわかりません。</target>
        </trans-unit>
        <trans-unit id="0b640dfe453f9fe28f4de0716c715e5b4b78fa5a" translate="yes" xml:space="preserve">
          <source>I'm troubled by some of these responses.  I think doubles and floats have a place in financial calculations.  Certainly, when adding and subtracting non-fractional monetary amounts there will be no loss of precision when using integer classes or BigDecimal classes.  But when performing more complex operations, you often end up with results that go out several or many decimal places, no matter how you store the numbers.  The issue is how you present the result.</source>
          <target state="translated">いくつかの回答で悩んでいます。私は、倍数や浮動小数点数は金融計算には必要なものだと思っています。確かに、端数ではない金額を足したり引いたりするときに、整数クラスやBigDecimalクラスを使っても精度が落ちることはありません。しかし、より複雑な演算を行う場合には、どのように数値を格納しても小数点以下数桁または数桁の誤差が生じることがよくあります。問題は結果をどのように表示するかです。</target>
        </trans-unit>
        <trans-unit id="98375c7c8b2a2005748c2b911a76c4dfe8d20dc1" translate="yes" xml:space="preserve">
          <source>I've always been told &lt;em&gt;never&lt;/em&gt; to represent money with &lt;code&gt;double&lt;/code&gt; or &lt;code&gt;float&lt;/code&gt; types, and this time I pose the question to you: why?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私は常に&lt;/font&gt; &lt;code&gt;double&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;型&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;または&lt;/font&gt; &lt;code&gt;float&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;型で&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;お金を表す&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;こと&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ない&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;言われてきましたが&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、今度はあなたに質問します。なぜですか？&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fcd023b4c00bf2e3b4db4e2b3bfa19a5930150d9" translate="yes" xml:space="preserve">
          <source>If you use base 10 for your internal calculations instead of doubles, the answers are always exactly what is expected by humans, assuming no other bugs in your code.</source>
          <target state="translated">内部計算にダブルスの代わりにベース10を使用すると、コードに他のバグがないと仮定して、常に人間が期待している通りの答えが得られます。</target>
        </trans-unit>
        <trans-unit id="0d316acf25caa86b6df1ed932c3fdc12985946bb" translate="yes" xml:space="preserve">
          <source>If your computation involves various steps, arbitrary precision arithmetic won't cover you 100%.</source>
          <target state="translated">計算に様々なステップが含まれている場合は、任意の精度の演算では100%カバーできません。</target>
        </trans-unit>
        <trans-unit id="7358b1f7336f90ad39312beb48de9d969908dbe0" translate="yes" xml:space="preserve">
          <source>If your result is on the borderline between being rounded up and rounded down, and that last penny really matters, you should be probably be telling the viewer that the answer is nearly in the middle - by displaying more decimal places.</source>
          <target state="translated">もしあなたの結果が切り上げられているか切り捨てられているかの境界線上にあり、最後の1円が本当に重要であるならば、あなたはおそらく、小数点以下の桁数を多く表示することで、答えがほぼ中央にあることを視聴者に伝えるべきでしょう。</target>
        </trans-unit>
        <trans-unit id="89ee989c518fd96a85c276fbbcc76f3a0d201bc3" translate="yes" xml:space="preserve">
          <source>Implementation examples:
  &lt;a href=&quot;https://www.programcreek.com/java-api-examples/?api=org.joda.money.Money&quot;&gt;https://www.programcreek.com/java-api-examples/?api=org.joda.money.Money&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;実装例：&lt;/font&gt;&lt;a href=&quot;https://www.programcreek.com/java-api-examples/?api=org.joda.money.Money&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : &lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;//www.programcreek.com/java-api-examples/?api=org.joda.money.Money&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="80417b3d4f9b43eb6ff3dba9201d4b848e5acc31" translate="yes" xml:space="preserve">
          <source>In base 10, you can write 10.25 as 1025 * 10&lt;sup&gt;-2&lt;/sup&gt; (an integer times a power of 10). &lt;a href=&quot;http://en.wikipedia.org/wiki/IEEE_floating_point&quot;&gt;IEEE-754 floating-point numbers&lt;/a&gt; are different, but a very simple way to think about them is to multiply by a power of two instead. For instance, you could be looking at 164 * 2&lt;sup&gt;-4&lt;/sup&gt; (an integer times a power of two), which is also equal to 10.25. That's not how the numbers are represented in memory, but the math implications are the same.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;基数10では、10.25を1025 * 10 &lt;/font&gt;&lt;/font&gt;&lt;sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;-2&lt;/font&gt;&lt;/font&gt;&lt;/sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（10の累乗の整数倍）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;として記述できます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/IEEE_floating_point&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;IEEE-754浮動小数点数&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は異なり&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が、それらを考える非常に簡単な方法は、代わりに2の累乗を掛けることです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;たとえば、164 * 2 &lt;/font&gt;&lt;/font&gt;&lt;sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;-4&lt;/font&gt;&lt;/font&gt;&lt;/sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の累乗の整数倍）を見ると、これも10.25と等しくなります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これはメモリ内での数値の表現方法ではありませんが、数学の意味は同じです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8f85da357aa1787e92299ea8764dc8f1081d232a" translate="yes" xml:space="preserve">
          <source>It doesn't mean though that doubles can never be used for that purpose.</source>
          <target state="translated">だからといって、ダブルスが絶対に使えないというわけではありません。</target>
        </trans-unit>
        <trans-unit id="189a0c254a5f6366cf960591b4dcd1af6677fec2" translate="yes" xml:space="preserve">
          <source>It must be said that even if you use fixed point arithmetic you still have to round numbers, were it not for the fact that BigInteger and BigDecimal give errors if you obtain periodic decimal numbers. So there is an approximation also here.</source>
          <target state="translated">定点演算をしていても、BigIntegerやBigDecimalでは、周期的な10進数を得ると誤差が出てしまうという事実がなければ、丸めなければならないと言わざるを得ません。ですから、ここにも近似があります。</target>
        </trans-unit>
        <trans-unit id="04b2d7d7bcbb29484271eba8aaf54f4b4bc5cc56" translate="yes" xml:space="preserve">
          <source>It requires Java SE 8 or later and has no dependencies.</source>
          <target state="translated">Java SE 8以降が必要で、依存関係はありません。</target>
        </trans-unit>
        <trans-unit id="24d35c472f26d6b1a31b545ab3b7165c01d595eb" translate="yes" xml:space="preserve">
          <source>It's not that the error isn't controllable if you round: &lt;a href=&quot;http://vanillajava.blogspot.com/2011/08/double-your-money-again.html&quot;&gt;see this article by Peter Lawrey&lt;/a&gt;. It's just easier not to have to round in the first place. Most applications that handle money don't call for a lot of math, the operations consist of adding things or allocating amounts to different buckets. Introducing floating point and rounding just complicates things.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;丸めてもエラーを制御できないわけではありません&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://vanillajava.blogspot.com/2011/08/double-your-money-again.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。PeterLawreyによるこの記事を参照してください&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。そもそも丸める必要がない方が簡単です。お金を扱うほとんどのアプリケーションは、多くの計算を必要としません。操作は、物を追加したり、異なるバケットに金額を割り当てたりすることで構成されます。浮動小数点の導入と丸めは、物事を複雑にするだけです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6bd1736b140bbc0f9b6f105c77291011f013e232" translate="yes" xml:space="preserve">
          <source>It's the lack of understanding about double representation and lack of experience in handling the accuracy and precision that brings about this wise suggestion.</source>
          <target state="translated">二重表現についての理解不足と、正確さと精度を扱う経験の不足が、この賢明な提案をもたらしているのです。</target>
        </trans-unit>
        <trans-unit id="2da89442de0564adb263d4b217cde992b04f1ff9" translate="yes" xml:space="preserve">
          <source>JSR 354 provides an API for representing, transporting, and performing comprehensive calculations with Money and Currency. You can download it from this link:</source>
          <target state="translated">JSR 354は、貨幣・通貨を用いた包括的な計算を行うためのAPIを提供します。こちらのリンクからダウンロードできます。</target>
        </trans-unit>
        <trans-unit id="8f51b176f17789e90549d24d66d084d0377ef75a" translate="yes" xml:space="preserve">
          <source>JSR 354: Money and Currency API Download</source>
          <target state="translated">JSR 354:お金と通貨のAPIダウンロード</target>
        </trans-unit>
        <trans-unit id="e355bd15d23282effb75249c47fc6278e186ca1e" translate="yes" xml:space="preserve">
          <source>Java API for working with Money and Currencies, which is planned to be included in Java 9.</source>
          <target state="translated">Java 9に含まれる予定の、お金や通貨を扱うためのJava API。</target>
        </trans-unit>
        <trans-unit id="70d2f01c0479a64ac9a018a01053853a4ccc0a04" translate="yes" xml:space="preserve">
          <source>Looking into the Java 9 Money and Currency API (JSR 354)</source>
          <target state="translated">Java 9のお金と通貨のAPIを見る (JSR 354)</target>
        </trans-unit>
        <trans-unit id="cbc716194c3421d45328f11b1ed734e714f9a899" translate="yes" xml:space="preserve">
          <source>Many of the answers posted to this question discuss IEEE and the standards surrounding floating-point arithmetic.</source>
          <target state="translated">この質問に投稿された回答の多くは、IEEEや浮動小数点演算を取り巻く規格について議論しています。</target>
        </trans-unit>
        <trans-unit id="cafddb4a8f868576fbd86b950274e809cab58f05" translate="yes" xml:space="preserve">
          <source>MonetaryAmount has various methods that allow accessing the assigned currency, the numeric amount, its precision and more:</source>
          <target state="translated">MonetaryAmountには、割り当てられた通貨や数値、その精度などにアクセスするための様々なメソッドがあります。</target>
        </trans-unit>
        <trans-unit id="1c047041987b7e92d7fd573c5e62c0f30a2b8bd4" translate="yes" xml:space="preserve">
          <source>MonetaryAmounts can be rounded using a rounding operator:</source>
          <target state="translated">MonetaryAmountsは、丸め演算子を使用して丸めることができます。</target>
        </trans-unit>
        <trans-unit id="0cd10f02a4e801b3f271ae2d36c791ac844e9895" translate="yes" xml:space="preserve">
          <source>Most answers have highlighted the reasons why one should not use doubles for money and currency calculations. And I totally agree with them.</source>
          <target state="translated">ほとんどの回答は、お金や通貨の計算にダブルスを使ってはいけない理由を強調しています。そして、私はそれらに完全に同意します。</target>
        </trans-unit>
        <trans-unit id="8c0a7d98a17c7e3d1315cdf1e4024b71e84be895" translate="yes" xml:space="preserve">
          <source>OUTPUT:</source>
          <target state="translated">OUTPUT:</target>
        </trans-unit>
        <trans-unit id="ab03dc913e6f18c3df668c4f3c27fc3d1b767a73" translate="yes" xml:space="preserve">
          <source>Of course, you have to stay within reason; e.g. a simple webshop would probably never experience any problem with double precision floats, but if you do e.g. accounting or anything else that requires adding a large (unrestricted) amount of numbers, you wouldn't want to touch floating point numbers with a ten foot pole.</source>
          <target state="translated">もちろん、理性の範囲内に留まらなければなりません。例えば、単純なウェブショップであれば、倍精度の浮動小数点数で問題が発生することはないでしょうが、会計などで大量の(制限のない)数値を加算する必要がある場合は、10フィートの棒で浮動小数点数には触れたくないでしょう。</target>
        </trans-unit>
        <trans-unit id="f3c8c95c5e534bcd2ea0034a0d83177efa6923f4" translate="yes" xml:space="preserve">
          <source>Output:</source>
          <target state="translated">Output:</target>
        </trans-unit>
        <trans-unit id="893e9390628cf8793e980bd5c0bc3d738246634a" translate="yes" xml:space="preserve">
          <source>People calculating with currency in Excel have always used double precision floats (there is no currency type in Excel) and I have yet to see anyone complaining about rounding errors.</source>
          <target state="translated">エクセルで通貨を使って計算している人は、いつも倍精度のフロートを使っています(エクセルには通貨の型はありません)し、丸め誤差について文句を言っている人をまだ見たことがありません。</target>
        </trans-unit>
        <trans-unit id="ce0f4ca9377352ec33a36acf2c838b95f364a475" translate="yes" xml:space="preserve">
          <source>Representing money as a &lt;code&gt;double&lt;/code&gt; or &lt;code&gt;float&lt;/code&gt; will probably look good at first as the software rounds off the tiny errors, but as you perform more additions, subtractions, multiplications and divisions on inexact numbers, errors will compound and you'll end up with values that are visibly not accurate. This makes floats and doubles inadequate for dealing with money, where perfect accuracy for multiples of base 10 powers is required.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ソフトウェアが小さなエラーを四捨五入するので、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;お金を&lt;/font&gt;&lt;/font&gt; &lt;code&gt;double&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;または&lt;/font&gt;&lt;/font&gt; &lt;code&gt;float&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;として表す&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ことはおそらく最初は見栄えが良いですが、不正確な数値に対してさらに加算、減算、乗算、および除算を実行すると、エラーが複雑になり、次のような値になります明らかに正確ではありません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは、浮動小数点数と倍精度浮動小数点数を、基本10の累乗の倍数の完全な精度が必要とされるお金を扱うには不十分です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="90bdbcb63d1c58de798fcf3d27eefa22f192272c" translate="yes" xml:space="preserve">
          <source>Resources:</source>
          <target state="translated">Resources:</target>
        </trans-unit>
        <trans-unit id="7466c0c80238bbd71329492766d1f91a178140c9" translate="yes" xml:space="preserve">
          <source>SciPy (Scientific Python) can probably also handle financial calculations (I haven't tried, but I suspect so).</source>
          <target state="translated">SciPy (Scientific Python)はおそらく金融計算も扱えると思います (試していませんが、そのように推測しています)。</target>
        </trans-unit>
        <trans-unit id="72dd135113af4bb32b27d846ec53778eaebee82f" translate="yes" xml:space="preserve">
          <source>See Also: &lt;a href=&quot;http://javamoney.github.io/&quot;&gt;JSR 354 - Currency and Money&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;参照：&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://javamoney.github.io/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;JSR 354-通貨とお金&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1f7a401d25dd853ca7105588312147327477a4a5" translate="yes" xml:space="preserve">
          <source>Some example... this works (actually don't work as expected), on almost any programming language... I've tried with Delphi, VBScript, Visual Basic, JavaScript and now with Java/Android:</source>
          <target state="translated">いくつかの例...これは、ほとんどすべてのプログラミング言語で動作します(実際には期待通りに動作しません)...Delphi、VBScript、Visual Basic、JavaScript、そして今回はJavaAndroidで試してみました。</target>
        </trans-unit>
        <trans-unit id="aa9645f2ab1c2cb679f21b70df5c102fb0e3e6be" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;float&lt;/code&gt; and &lt;code&gt;double&lt;/code&gt; types are
  particularly ill-suited for monetary
  calculations because it is impossible
  to represent 0.1 (or any other
  negative power of ten) as a &lt;code&gt;float&lt;/code&gt; or
  &lt;code&gt;double&lt;/code&gt; exactly.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;float&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;及び&lt;/font&gt;&lt;/font&gt; &lt;code&gt;double&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 0.1（又は10の任意の他の負のパワー）を表すことは不可能であるため、種類は特に金融計算のために不適当である&lt;/font&gt;&lt;/font&gt; &lt;code&gt;float&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;又は &lt;/font&gt;&lt;/font&gt; &lt;code&gt;double&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;正確。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="37a22ebd44711311bb4fb92a4282d607da8596f5" translate="yes" xml:space="preserve">
          <source>The API also supports calculations with MonetaryAmounts:</source>
          <target state="translated">APIはMonetaryAmountsでの計算もサポートしています。</target>
        </trans-unit>
        <trans-unit id="84a8cc07b8a6e7ce2ce3275b890a5f8a8f30b899" translate="yes" xml:space="preserve">
          <source>The GNU Multiple Precision Library (GMP) and the GNU MFPR Library are two free and open-source resources for C and C++.</source>
          <target state="translated">GNU Multiple Precision Library (GMP)とGNU MFPR Libraryは、CとC++のための二つの自由でオープンソースのリソースです。</target>
        </trans-unit>
        <trans-unit id="cdef8dba5555ec0beb2b9902e32847ed7611acbb" translate="yes" xml:space="preserve">
          <source>The decimal data type in C# is Microsoft's .NET alternative for 28 significant figures.</source>
          <target state="translated">C#の10進数データ型は、Microsoftの.NETの28の有効数字の代替です。</target>
        </trans-unit>
        <trans-unit id="5383c20d2d17e96881c2fda340145ff07c98074b" translate="yes" xml:space="preserve">
          <source>The only reliable way to use a perfect representation of results(Use a custom Fraction data type that will batch division operations to the last step) and only convert to decimal notation in the last step.</source>
          <target state="translated">結果の完全な表現を使用する唯一の信頼できる方法(最後のステップまでバッチ除算操作を行うカスタムFractionデータ型を使用します)と、最後のステップでのみ10進法に変換します。</target>
        </trans-unit>
        <trans-unit id="197911d6c1e58965b7e6611a80d150d7ba686aac" translate="yes" xml:space="preserve">
          <source>The problem is that the IEEE spec doesn't have a way to exactly represent all fractions, some of them end up as repeating fractions so you end up with approximation errors. Since accountants like things to come out exactly to the penny, and customers will be annoyed if they pay their bill and after the payment is processed they owe .01 and they get charged a fee or can't close their account, it's better to use exact types like decimal (in C#) or java.math.BigDecimal in Java.</source>
          <target state="translated">問題は、IEEE仕様ではすべての分数を正確に表現する方法がないということです。会計士はペニー単位で正確に出てくるものが好きで、顧客は請求書を支払い、支払いが処理された後に0.01の負債があり、手数料を請求されたり、口座を解約できなかったりするとイライラするので、10進数(C#)やJavaのjava.math.BigDecimalのような正確な型を使用する方が良いでしょう。</target>
        </trans-unit>
        <trans-unit id="b28f5a973c1343f529f0e63c534d0921c6ab0947" translate="yes" xml:space="preserve">
          <source>The problem with doubles, and more so with floats, is when they are used to combine large numbers and small numbers.  In java,</source>
          <target state="translated">ダブルス、特に浮動小数点数の問題は、大きな数と小さな数を結合するために使用される場合です。javaでは。</target>
        </trans-unit>
        <trans-unit id="5b6a4d54cc02b1c3f15e40c24f65fff30e4810f1" translate="yes" xml:space="preserve">
          <source>The problem with floats and doubles is that the &lt;em&gt;vast majority&lt;/em&gt; of money-like numbers don't have an exact representation as an integer times a power of 2. In fact, the only multiples of 0.01 between 0 and 1 (which are significant when dealing with money because they're integer cents) that can be represented exactly as an IEEE-754 binary floating-point number are 0, 0.25, 0.5, 0.75 and 1. All the others are off by a small amount. As an analogy to the 0.333333 example, if you take the floating-point value for 0.1 and you multiply it by&amp;nbsp;10, you won't get&amp;nbsp;1.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;floatとdoubleの問題は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、お金のような数値の&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;大部分&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が整数の2のべき乗の正確な表現を持たないことです。実際、0と1の間の0.01の倍数のみ（これは、 IEEE 754の2進浮動小数点数として正確に表すことができる整数セントであるため、お金は0、0.25、0.5、0.75、1です。その他はすべて少しずれています。 0.333333の例の類推として、0.1の浮動小数点値を取り、10を掛けた場合、1は得られません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3e74e7a3acd980ae3a6baa90e220277c25718108" translate="yes" xml:space="preserve">
          <source>The result of floating point number is not exact, which makes them unsuitable for any financial calculation which requires exact result and not approximation. float and double are designed for engineering and scientific calculation and many times doesn&amp;rsquo;t produce exact result also result of floating point calculation may vary from JVM to JVM. Look at below example of BigDecimal and double primitive which is used to represent money value, its quite clear that floating point calculation may not be exact and one should use BigDecimal for financial calculations.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;浮動小数点数の結果は正確ではないため、近似ではなく正確な結果を必要とする財務計算には適していません。 floatとdoubleは工学および科学計算用に設計されており、正確な結果を生成しない場合が多く、浮動小数点計算の結果はJVMによって異なる場合があります。金額の値を表すために使用されるBigDecimalとdoubleプリミティブの以下の例を見てください。浮動小数点の計算は正確ではない可能性があり、財務計算にはBigDecimalを使用する必要があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="24ddbedc3035313f2130f7d0cddfdf7f8cd294c6" translate="yes" xml:space="preserve">
          <source>The right way to solve this problem is
  to use &lt;code&gt;BigDecimal&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt; or &lt;code&gt;long&lt;/code&gt;
  for monetary calculations.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この問題を解決する正しい方法は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 、金額計算に&lt;/font&gt;&lt;/font&gt; &lt;code&gt;BigDecimal&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;int&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;または&lt;/font&gt;&lt;/font&gt; &lt;code&gt;long&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用する&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ことです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5e52742575fd81008db5aa9d17b762ab92432faf" translate="yes" xml:space="preserve">
          <source>There are also numerical precision libraries for JavaScript(!) and I think PHP which can handle financial calculations.</source>
          <target state="translated">JavaScript用の数値精度ライブラリもありますし(!)、金融計算ができるPHPもあると思います。</target>
        </trans-unit>
        <trans-unit id="371fa31f57b417924581fe94e899a89df47b64eb" translate="yes" xml:space="preserve">
          <source>There are also proprietary (particularly, I think, for Fortran) and open-source solutions as well for many computer languages.</source>
          <target state="translated">また、多くのコンピュータ言語には、プロプライエタリなソリューション(特にFortran向けだと思います)やオープンソースのソリューションもあります。</target>
        </trans-unit>
        <trans-unit id="21e4ce282247987b597c58e3c95cc0139b3c1a34" translate="yes" xml:space="preserve">
          <source>These errors will add-up, may eventually become not easy to ignore anymore. This is called &lt;a href=&quot;http://en.wikipedia.org/wiki/Propagation_of_uncertainty&quot;&gt;Error Propagation&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これらのエラーは追加され、最終的には無視できなくなる可能性があります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Propagation_of_uncertainty&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;エラー伝播&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と呼ばれ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="606eb3e99c5273df8a7722244204e4492f80dd02" translate="yes" xml:space="preserve">
          <source>This is not a matter of accuracy, nor is it a matter of precision.  It is a matter of meeting the expectations of humans who use base 10 for calculations instead of base 2.  For example, using doubles for financial calculations does not produce answers that are &quot;wrong&quot; in a mathematical sense, but it can produce answers that are not what is expected in a financial sense.</source>
          <target state="translated">これは、精度の問題でもなければ、精度の問題でもありません。ベース2ではなく、ベース10を計算に使う人間の期待に応えることが問題なのです。例えば、金銭的な計算にダブルスを使っても、数学的な意味では「間違っている」答えは出ないが、金銭的な意味では期待されていない答えが出てしまうことがある。</target>
        </trans-unit>
        <trans-unit id="8f56a8ad3c064083a6830f9e2e5c107de9737d8b" translate="yes" xml:space="preserve">
          <source>Though &lt;code&gt;BigDecimal&lt;/code&gt; has some caveats (please see currently accepted answer).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;けれども&lt;/font&gt;&lt;/font&gt; &lt;code&gt;BigDecimal&lt;/code&gt; のは&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、いくつかの注意点があります（現在は受け入れ答えを参照してください）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f1c094b2ad137115816f31659c9cfbf3826a1f48" translate="yes" xml:space="preserve">
          <source>To add on previous answers, there is also option of implementing &lt;strong&gt;Joda-Money&lt;/strong&gt; in Java, besides BigDecimal, when dealing with the problem addressed in the question. Java modul name is org.joda.money.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;以前の回答を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;補足するために、BigDecimalのほかに、質問で扱われている問題を処理するときに、Javaに&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Joda-Money&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を実装するオプションもあります&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Javaモジュール名はorg.joda.moneyです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a5b722d8c9d8a1489a2549458ee0e114ae99d0ae" translate="yes" xml:space="preserve">
          <source>To be more precise, there is compile-time dependency but it is not
  required.</source>
          <target state="translated">より正確には、コンパイル時の依存関係がありますが、必須ではありません。</target>
        </trans-unit>
        <trans-unit id="6ac20efd7111b356fc3ce5a15fb213b8f1231c05" translate="yes" xml:space="preserve">
          <source>Using a calculator, or calculating results by hand, 1.40 * 165 = 231 exactly.  However, internally using doubles, on my compiler / operating system environment, it is stored as a binary number close to 230.99999... so if you truncate the number, you get 230 instead of 231.  You may reason that rounding instead of truncating would have given the desired result of 231.  That is true, but rounding always involves truncation.  Whatever rounding technique you use, there are still boundary conditions like this one that will round down when you expect it to round up.  They are rare enough that they often will not be found through casual testing or observation.  You may have to write some code to search for examples that illustrate outcomes that do not behave as expected.</source>
          <target state="translated">電卓を使って、あるいは手計算で計算すると、1.40*165=231 となります。しかし、内部的にダブルスを使用している私のコンパイラのオペレーティングシステム環境では、230.99999に近い2進数として格納されています...なので、数字を切り捨てると231ではなく230が得られます。切り捨てるのではなく丸めれば231という望ましい結果が得られるのではないかと考えるかもしれません。確かにその通りですが、四捨五入には常に切り捨てが含まれます。どのような丸め方をするにしても、このような境界条件のように、丸めようと思ったときに丸められてしまうことがあります。このような境界条件は、カジュアルなテストや観察では発見できないことが多いほど稀なものです。期待通りに動作しない結果を示す例を検索するために、いくつかのコードを書かなければならないかもしれません。</target>
        </trans-unit>
        <trans-unit id="89bf22cfb2377a37cc9d78f04b4c187a794fcdf9" translate="yes" xml:space="preserve">
          <source>Usually because the double type has a precision less than 16 figures. If you require better precision it's not a suitable type. Also approximations can accumulate.</source>
          <target state="translated">通常、ダブルタイプは16桁以下の精度を持っているため、それ以上の精度を必要とする場合には適していません。それ以上の精度が必要な場合には適していません。また、近似値が溜まってしまうこともあります。</target>
        </trans-unit>
        <trans-unit id="e817fc6c76f182bd2298f7ba72146b08ba8ec723" translate="yes" xml:space="preserve">
          <source>What are the alternatives? There are many (and many more of which I am not aware!).</source>
          <target state="translated">代替品は何があるのか?たくさんあります(他にもたくさんあります!)。</target>
        </trans-unit>
        <trans-unit id="e8f3327bd17bd0a003c3cc24469c1b88d03bfce8" translate="yes" xml:space="preserve">
          <source>When using the reference implementation API, the necessary code is much simpler:</source>
          <target state="translated">参照実装APIを使用する場合、必要なコードははるかに単純化されています。</target>
        </trans-unit>
        <trans-unit id="9698e43da0a699e4fa5451fdd3c99a90f6671e68" translate="yes" xml:space="preserve">
          <source>When working with collections of MonetaryAmounts, some nice utility methods for filtering, sorting and grouping are available.</source>
          <target state="translated">MonetaryAmountsのコレクションを扱う際には、フィルタリング、ソート、グループ化のためのいくつかの便利なメソッドが利用できます。</target>
        </trans-unit>
        <trans-unit id="27d553d0dc9a1bc2d96bb69efca899ee61467545" translate="yes" xml:space="preserve">
          <source>While it's true that floating point type can represent only approximatively decimal data, it's also true that if one rounds numbers to the necessary precision before presenting them, one obtains the correct result. Usually.</source>
          <target state="translated">浮動小数点型が近似的な10進数のデータしか表現できないのは事実ですが、数値を提示する前に必要な精度に丸めれば正しい結果が得られるのも事実です。通常は</target>
        </trans-unit>
        <trans-unit id="259be95f8f96400b8780b6bd0febf8a17c39d59b" translate="yes" xml:space="preserve">
          <source>Why not use Double or Float to represent currency</source>
          <target state="translated">通貨を表すのにダブルやフロートを使わないのはなぜでしょうか?</target>
        </trans-unit>
        <trans-unit id="5d3e3ea709979f27b18302294b7096b2f742d51c" translate="yes" xml:space="preserve">
          <source>You can make it work if you are able to handle the precision and accuracy requirements of your project, which has to be done based on what range of double values is one dealing with.</source>
          <target state="translated">二重の値がどの範囲のものを扱っているかを基準にして行わなければならない案件の精度や精度の要求に対応していれば、それを実現することができます。</target>
        </trans-unit>
        <trans-unit id="022bc50d2cd71f6c2d95b26e226d38a8c5773922" translate="yes" xml:space="preserve">
          <source>You can refer to guava's FuzzyCompare method to get more idea. The parameter tolerance is the key. 
We dealt with this problem for a securities trading application and we did an exhaustive research on what tolerances to use for different numerical values in different ranges.</source>
          <target state="translated">guavaのFuzzyCompareメソッドを参考にすると良いでしょう。パラメータの許容範囲が鍵を握る 証券取引アプリでこの問題を扱ったのですが、範囲の異なる数値に対してどのような許容値を使うべきかを徹底的に研究しました。</target>
        </trans-unit>
        <trans-unit id="796c2136ddb0d07455d54486d96ceb9de93d5885" translate="yes" xml:space="preserve">
          <source>You might, for speed, look into the free and proprietary libraries in C, C++, and Fortran.</source>
          <target state="translated">スピードアップのために、C、C++、Fortranのフリーでプロプライエタリなライブラリを調べてみてはいかがでしょうか。</target>
        </trans-unit>
        <trans-unit id="c618e14e3f2a441848e8fc5e3abfc132b9f9dca1" translate="yes" xml:space="preserve">
          <source>prints out &lt;code&gt;0.6100000000000001&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;0.6100000000000001&lt;/code&gt; を&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;出力し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ea0d137fa0077ce0c7953f0dceb93af4ba0cb4fa" translate="yes" xml:space="preserve">
          <source>results in</source>
          <target state="translated">成り行き</target>
        </trans-unit>
        <trans-unit id="4a107da068492bff7b05f2935fa1bd052403861e" translate="yes" xml:space="preserve">
          <source>this probably isn't how you want to represent $1.01.</source>
          <target state="translated">これはおそらく、あなたが1.01ドルを表現したい方法ではありません。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
