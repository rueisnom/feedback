<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/5605125">
    <body>
      <group id="5605125">
        <trans-unit id="661ce7de198e19441a19b098dbeac4e977f1bc20" translate="yes" xml:space="preserve">
          <source>(&lt;em&gt;Thanks Tony D for the suggestion to highlight the answer. See his comment below for an example to why this is more robust.&lt;/em&gt;)</source>
          <target state="translated">( &lt;em&gt;Gracias Tony D por la sugerencia de resaltar la respuesta. Vea su comentario a continuaci&amp;oacute;n para ver un ejemplo de por qu&amp;eacute; esto es m&amp;aacute;s robusto&lt;/em&gt; ) &lt;em&gt;.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="bdeb93d3b21a2f1ee66d1a9cc57336514109d702" translate="yes" xml:space="preserve">
          <source>(If your standard library conforms to C++11, things are a bit different now: A failed &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; now sets numeric variables to &lt;code&gt;0&lt;/code&gt; instead of leaving them uninitialized (except for &lt;code&gt;char&lt;/code&gt;s).)</source>
          <target state="translated">(Si su biblioteca est&amp;aacute;ndar se ajusta a C ++ 11, las cosas son un poco diferentes ahora: un error &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; ahora establece las variables num&amp;eacute;ricas en &lt;code&gt;0&lt;/code&gt; en lugar de dejarlas sin inicializar (a excepci&amp;oacute;n de los caracteres).</target>
        </trans-unit>
        <trans-unit id="bfed0edb8bb8a64f36a16149180d9b008cb1856f" translate="yes" xml:space="preserve">
          <source>(This should manifest a bit differently since C++11 (see above): Now you get a &quot;phantom record&quot; of zeroes instead of a repeated last line.)</source>
          <target state="translated">(Esto debería manifestarse de manera un poco diferente desde C++11 (ver arriba):Ahora se obtiene un &quot;registro fantasma&quot; de ceros en lugar de una última línea repetida).</target>
        </trans-unit>
        <trans-unit id="aea9f8f8cc2b79c630130289b0b320297ff84039" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::ws&lt;/code&gt; skips any potential (zero or more) trailing space in the stream while setting the &lt;code&gt;eofbit&lt;/code&gt;, and &lt;strong&gt;not the &lt;code&gt;failbit&lt;/code&gt;&lt;/strong&gt;.  So, &lt;code&gt;in.fail()&lt;/code&gt; works as expected, as long as there is at least one data to read. If all-blank streams are also acceptable, then the correct form is:</source>
          <target state="translated">&lt;code&gt;std::ws&lt;/code&gt; omite cualquier espacio final potencial (cero o m&amp;aacute;s) en la secuencia al configurar el &lt;code&gt;eofbit&lt;/code&gt; , y &lt;strong&gt;no el &lt;code&gt;failbit&lt;/code&gt; &lt;/strong&gt; . Entonces, &lt;code&gt;in.fail()&lt;/code&gt; funciona como se esperaba, siempre que haya al menos un dato para leer. Si las secuencias en blanco tambi&amp;eacute;n son aceptables, entonces la forma correcta es:</target>
        </trans-unit>
        <trans-unit id="1110bde66c337dedaa84d48c940085fb7ceb4c66" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;while(in&amp;gt;&amp;gt;data)&lt;/code&gt; terminates with a set &lt;code&gt;failbit&lt;/code&gt; for &lt;em&gt;all&lt;/em&gt; three input. In the first and third, &lt;code&gt;eofbit&lt;/code&gt; is also set. So past the loop one needs very ugly extra logic to distinguish a proper input (1st) from improper ones (2nd and 3rd).</source>
          <target state="translated">&lt;code&gt;while(in&amp;gt;&amp;gt;data)&lt;/code&gt; termina con un &lt;code&gt;failbit&lt;/code&gt; de fallo establecido para &lt;em&gt;las&lt;/em&gt; tres entradas. En el primero y el tercero, tambi&amp;eacute;n se establece &lt;code&gt;eofbit&lt;/code&gt; . Entonces, m&amp;aacute;s all&amp;aacute; del bucle, uno necesita una l&amp;oacute;gica extra muy fea para distinguir una entrada adecuada (primera) de las incorrectas (segunda y tercera).</target>
        </trans-unit>
        <trans-unit id="cda43a337ae2b88b70fccea1970b67cae8752489" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Bottom-line top:&lt;/strong&gt;  With proper handling of white-space, the following is how &lt;code&gt;eof&lt;/code&gt; can be used (and even, be more reliable than &lt;code&gt;fail()&lt;/code&gt; for error checking):</source>
          <target state="translated">&lt;strong&gt;Parte superior de la l&amp;iacute;nea inferior:&lt;/strong&gt; con el manejo adecuado del espacio en blanco, la siguiente es la forma en que se puede usar &lt;code&gt;eof&lt;/code&gt; (e incluso, ser m&amp;aacute;s confiable que &lt;code&gt;fail()&lt;/code&gt; para la verificaci&amp;oacute;n de errores):</target>
        </trans-unit>
        <trans-unit id="6224ae8773663a9e9b39ea4cbccdebcbc585b4fb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Summary:&lt;/strong&gt; A properly constructed &lt;code&gt;while(!eof)&lt;/code&gt; is not only possible and not wrong, but allows data to be localized within scope, and provides a cleaner separation of error checking from business as usual.  That being said, &lt;code&gt;while(!fail)&lt;/code&gt; is inarguably a more common and terse idiom, and may be preferred in simple (single data per read type of) scenarios.</source>
          <target state="translated">&lt;strong&gt;Resumen:&lt;/strong&gt; Un &lt;code&gt;while(!eof)&lt;/code&gt; construcci&amp;oacute;n correcto (! Eof) no solo es posible y no est&amp;aacute; mal, sino que permite que los datos se localicen dentro del alcance, y proporciona una separaci&amp;oacute;n m&amp;aacute;s clara de la verificaci&amp;oacute;n de errores de los negocios como de costumbre. Dicho esto, &lt;code&gt;while(!fail)&lt;/code&gt; es indiscutiblemente un lenguaje m&amp;aacute;s com&amp;uacute;n y conciso, y puede preferirse en escenarios simples (datos &amp;uacute;nicos por tipo de lectura).</target>
        </trans-unit>
        <trans-unit id="302941c5face0f4ff83c4b75c867c630511d9839" translate="yes" xml:space="preserve">
          <source>Against this:</source>
          <target state="translated">Contra esto:</target>
        </trans-unit>
        <trans-unit id="deaeba5ed1d27aaeac8cbcfa1b876c87be3613a9" translate="yes" xml:space="preserve">
          <source>And on your second question: Because</source>
          <target state="translated">Y en tu segunda pregunta:Porque</target>
        </trans-unit>
        <trans-unit id="3cc54ced6af94de91efda0240caaeacbb7adb4fd" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;iostream::eof&lt;/code&gt; will only return &lt;code&gt;true&lt;/code&gt;&lt;em&gt;after&lt;/em&gt; reading the end of the stream. It does &lt;em&gt;not&lt;/em&gt; indicate, that the next read will be the end of the stream.</source>
          <target state="translated">Porque &lt;code&gt;iostream::eof&lt;/code&gt; solo devolver&amp;aacute; &lt;code&gt;true&lt;/code&gt; &lt;em&gt;despu&amp;eacute;s de&lt;/em&gt; leer el final de la secuencia. No indica que la pr&amp;oacute;xima lectura ser&amp;aacute; el final de la transmisi&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="029a9b58857b6cb4dccf290c680b582cc8b10e1d" translate="yes" xml:space="preserve">
          <source>Because if programmers don't write &lt;code&gt;while(stream &amp;gt;&amp;gt; n)&lt;/code&gt;, they possibly write this:</source>
          <target state="translated">Porque si los programadores no escriben &lt;code&gt;while(stream &amp;gt;&amp;gt; n)&lt;/code&gt; , posiblemente escriban esto:</target>
        </trans-unit>
        <trans-unit id="db1a45ba8ad69aed79f15f7cdd8a34abf03fdf66" translate="yes" xml:space="preserve">
          <source>Consider this (and assume then next read will be at the end of the stream):</source>
          <target state="translated">Considere esto (y suponga que la próxima lectura será al final de la corriente):</target>
        </trans-unit>
        <trans-unit id="a0e2c9f5f889a9844d021059c48bcc4f2ba4f4bb" translate="yes" xml:space="preserve">
          <source>Here the problem is, you cannot do &lt;code&gt;some work on n&lt;/code&gt; without first checking if the stream read was successful, because if it was unsuccessful, your &lt;code&gt;some work on n&lt;/code&gt; would produce undesired result.</source>
          <target state="translated">Aqu&amp;iacute; el problema es que no puede hacer &lt;code&gt;some work on n&lt;/code&gt; sin verificar primero si la lectura de la secuencia fue exitosa, porque si no tuvo &amp;eacute;xito, su &lt;code&gt;some work on n&lt;/code&gt; producir&amp;iacute;a un resultado no deseado.</target>
        </trans-unit>
        <trans-unit id="ef6e2fba7528594341d24a51147b987e7bf8953c" translate="yes" xml:space="preserve">
          <source>Here, &lt;code&gt;in.fail()&lt;/code&gt; verifies that as long as there is something to read, it is the correct one. It's purpose is not a mere while-loop terminator.</source>
          <target state="translated">Aqu&amp;iacute;, &lt;code&gt;in.fail()&lt;/code&gt; verifica que mientras haya algo para leer, es el correcto. Su prop&amp;oacute;sito no es un simple terminador while-loop.</target>
        </trans-unit>
        <trans-unit id="517b5da4da10a404eacedc6ab8641d5d46a6eaaf" translate="yes" xml:space="preserve">
          <source>How is it different from using &lt;code&gt;scanf(&quot;...&quot;,...)!=EOF&lt;/code&gt; in C (which I often use with no problems)?</source>
          <target state="translated">&amp;iquest;En qu&amp;eacute; se diferencia de usar &lt;code&gt;scanf(&quot;...&quot;,...)!=EOF&lt;/code&gt; en C (que a menudo uso sin problemas)?</target>
        </trans-unit>
        <trans-unit id="81edff2ea8409d76e3dac457474cc9d6ff5b73df" translate="yes" xml:space="preserve">
          <source>I just found a comment in &lt;a href=&quot;https://stackoverflow.com/questions/5578631/c-how-do-you-stop-reading-integer-from-text-file-when-encounter-negative-intege/5578649#5578649&quot;&gt;this&lt;/a&gt; answer saying that using &lt;code&gt;iostream::eof&lt;/code&gt; in a loop condition is &quot;almost certainly wrong&quot;. I generally use something like &lt;code&gt;while(cin&amp;gt;&amp;gt;n)&lt;/code&gt; - which I guess implicitly checks for EOF.</source>
          <target state="translated">Acabo de encontrar un comentario en &lt;a href=&quot;https://stackoverflow.com/questions/5578631/c-how-do-you-stop-reading-integer-from-text-file-when-encounter-negative-intege/5578649#5578649&quot;&gt;esta&lt;/a&gt; respuesta que dice que usar &lt;code&gt;iostream::eof&lt;/code&gt; en una condici&amp;oacute;n de bucle es &quot;casi seguro que est&amp;aacute; mal&quot;. Generalmente uso algo como &lt;code&gt;while(cin&amp;gt;&amp;gt;n)&lt;/code&gt; , que supongo que comprueba impl&amp;iacute;citamente EOF.</target>
        </trans-unit>
        <trans-unit id="f2d38ded8a136d73a71ea12c4ddac0f42576c411" translate="yes" xml:space="preserve">
          <source>If the stream contains malformed data but you only check for &lt;code&gt;.eof&lt;/code&gt;, you end up with an infinite loop. &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; will fail to extract any data from the stream, so the loop spins in place without ever reaching the end.</source>
          <target state="translated">Si la secuencia contiene datos con formato incorrecto pero solo comprueba &lt;code&gt;.eof&lt;/code&gt; , termina con un bucle infinito. &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; no podr&amp;aacute; extraer ning&amp;uacute;n dato de la transmisi&amp;oacute;n, por lo que el bucle gira en su lugar sin llegar al final.</target>
        </trans-unit>
        <trans-unit id="8e0381511e6677cd720a12eb832a1867f5700871" translate="yes" xml:space="preserve">
          <source>If the stream is empty, the loop will run once. &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; will fail (there is no input to be read) and all variables that were supposed to be set (by &lt;code&gt;stream &amp;gt;&amp;gt; x&lt;/code&gt;) are actually uninitialized. This leads to garbage data being processed, which can manifest as nonsensical results (often huge numbers).</source>
          <target state="translated">Si la secuencia est&amp;aacute; vac&amp;iacute;a, el ciclo se ejecutar&amp;aacute; una vez. &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; fallar&amp;aacute; (no hay entrada para leer) y todas las variables que se supon&amp;iacute;a que deb&amp;iacute;an establecerse (por &lt;code&gt;stream &amp;gt;&amp;gt; x&lt;/code&gt; ) en realidad no est&amp;aacute;n inicializadas. Esto lleva a que se procesen los datos basura, que pueden manifestarse como resultados sin sentido (a menudo, grandes cantidades).</target>
        </trans-unit>
        <trans-unit id="12591e2b26e7f20426a17ba90718891826abf5c3" translate="yes" xml:space="preserve">
          <source>If the stream is not empty, the loop will run again after the last valid input. Since in the last iteration all &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; operations fail, variables are likely to keep their value from the previous iteration. This can manifest as &quot;the last line is printed twice&quot; or &quot;the last input record is processed twice&quot;.</source>
          <target state="translated">Si la secuencia no est&amp;aacute; vac&amp;iacute;a, el ciclo se ejecutar&amp;aacute; nuevamente despu&amp;eacute;s de la &amp;uacute;ltima entrada v&amp;aacute;lida. Dado que en la &amp;uacute;ltima iteraci&amp;oacute;n todas las operaciones &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; fallan, es probable que las variables conserven su valor de la iteraci&amp;oacute;n anterior. Esto puede manifestarse como &quot;la &amp;uacute;ltima l&amp;iacute;nea se imprime dos veces&quot; o &quot;el &amp;uacute;ltimo registro de entrada se procesa dos veces&quot;.</target>
        </trans-unit>
        <trans-unit id="dcf488991d737575ffc6d155244c2b5f7c4bff6e" translate="yes" xml:space="preserve">
          <source>In general terms, checking for &lt;code&gt;eof&lt;/code&gt;&lt;em&gt;only&lt;/em&gt; is wrong because stream extraction (&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;) can fail without hitting the end of the file. If you have e.g. &lt;code&gt;int n; cin &amp;gt;&amp;gt; n;&lt;/code&gt; and the stream contains &lt;code&gt;hello&lt;/code&gt;, then &lt;code&gt;h&lt;/code&gt; is not a valid digit, so extraction will fail without reaching the end of the input.</source>
          <target state="translated">En t&amp;eacute;rminos generales, la comprobaci&amp;oacute;n de &lt;code&gt;eof&lt;/code&gt; &lt;em&gt;solo&lt;/em&gt; es incorrecta porque la extracci&amp;oacute;n de flujo ( &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; ) puede fallar sin tocar el final del archivo. Si tiene, por ejemplo, &lt;code&gt;int n; cin &amp;gt;&amp;gt; n;&lt;/code&gt; cin &amp;gt;&amp;gt; n; y la secuencia contiene &lt;code&gt;hello&lt;/code&gt; , entonces &lt;code&gt;h&lt;/code&gt; no es un d&amp;iacute;gito v&amp;aacute;lido, por lo que la extracci&amp;oacute;n fallar&amp;aacute; sin llegar al final de la entrada.</target>
        </trans-unit>
        <trans-unit id="e5cb725cb30b80fd47d08c987da533cdb5bfd4d8" translate="yes" xml:space="preserve">
          <source>So far so good, but what happens if there is trailing space in the stream -- what sounds like the major concern against &lt;code&gt;eof()&lt;/code&gt; as terminator?</source>
          <target state="translated">Hasta ahora todo bien, pero &amp;iquest;qu&amp;eacute; sucede si hay espacio final en la transmisi&amp;oacute;n? &amp;iquest; &lt;code&gt;eof()&lt;/code&gt; la principal preocupaci&amp;oacute;n contra eof () como terminador?</target>
        </trans-unit>
        <trans-unit id="2bc7cd9ab0a7c989dc4a625e4cb86cc64e908ed2" translate="yes" xml:space="preserve">
          <source>The failure due to read attempt beyond eof is taken as the termination condition.  This means is that there is no easy way to distinguish between a successful stream and one that really fails for reasons other than eof. Take the following streams:</source>
          <target state="translated">El fracaso debido a un intento de lectura más allá de eof se toma como la condición de terminación.Esto significa que no hay una manera fácil de distinguir entre una corriente exitosa y una que realmente falla por razones distintas a eof.Tomemos las siguientes corrientes:</target>
        </trans-unit>
        <trans-unit id="da040a0d800cccfdae77e8ce179c432eea02d925" translate="yes" xml:space="preserve">
          <source>The main argument against using &lt;code&gt;eof()&lt;/code&gt; seems to be missing an important subtlety about the role of white space. My proposition is that, checking &lt;code&gt;eof()&lt;/code&gt; explicitly is not only not &quot;&lt;em&gt;always wrong&lt;/em&gt;&quot; -- which seems to be an overriding opinion in this and similar SO threads --, but with proper handling of white-space, it provides for a cleaner and more reliable error handling, and is the &lt;em&gt;always correct&lt;/em&gt; solution (although, not necessarily the tersest).</source>
          <target state="translated">Al argumento principal en contra del uso de &lt;code&gt;eof()&lt;/code&gt; parece faltarle una sutileza importante sobre el papel del espacio en blanco. Mi propuesta es que, verificar &lt;code&gt;eof()&lt;/code&gt; expl&amp;iacute;citamente no solo no es &quot; &lt;em&gt;siempre incorrecto&lt;/em&gt; &quot;, lo que parece ser una opini&amp;oacute;n primordial en este y otros hilos SO similares, sino que con un manejo adecuado del espacio en blanco, proporciona un limpiador y un manejo de errores m&amp;aacute;s confiable, y es la soluci&amp;oacute;n &lt;em&gt;siempre correcta&lt;/em&gt; (aunque no necesariamente la m&amp;aacute;s estricta).</target>
        </trans-unit>
        <trans-unit id="ca5e6735dd0f12cd493f7a626298dc902793f9f2" translate="yes" xml:space="preserve">
          <source>The other answers have explained why the logic is wrong in &lt;code&gt;while (!stream.eof())&lt;/code&gt; and how to fix it. I want to focus on something different:</source>
          <target state="translated">Las otras respuestas han explicado por qu&amp;eacute; la l&amp;oacute;gica es incorrecta en &lt;code&gt;while (!stream.eof())&lt;/code&gt; y c&amp;oacute;mo solucionarlo. Quiero centrarme en algo diferente:</target>
        </trans-unit>
        <trans-unit id="ab684f64f3ea61af87e7c27a9dd94156d187cfa5" translate="yes" xml:space="preserve">
          <source>The whole point is that, &lt;code&gt;eofbit&lt;/code&gt;, &lt;code&gt;badbit&lt;/code&gt;, or &lt;code&gt;failbit&lt;/code&gt; are set &lt;strong&gt;after an attempt is made to read from the stream.&lt;/strong&gt; So if &lt;code&gt;stream &amp;gt;&amp;gt; n&lt;/code&gt; fails, then &lt;code&gt;eofbit&lt;/code&gt;, &lt;code&gt;badbit&lt;/code&gt;, or &lt;code&gt;failbit&lt;/code&gt; is set immediately, so its more idiomatic if you write &lt;code&gt;while (stream &amp;gt;&amp;gt; n)&lt;/code&gt;, because the returned object &lt;code&gt;stream&lt;/code&gt; converts to &lt;code&gt;false&lt;/code&gt; if there was some failure in reading from the stream and consequently the loop stops. And it converts to &lt;code&gt;true&lt;/code&gt; if the read was successful and the loop continues.</source>
          <target state="translated">El punto es que, &lt;code&gt;eofbit&lt;/code&gt; , &lt;code&gt;badbit&lt;/code&gt; o &lt;code&gt;failbit&lt;/code&gt; se configuran &lt;strong&gt;despu&amp;eacute;s de que se intenta leer desde la transmisi&amp;oacute;n.&lt;/strong&gt; Entonces, si la &lt;code&gt;stream &amp;gt;&amp;gt; n&lt;/code&gt; falla, entonces &lt;code&gt;eofbit&lt;/code&gt; , &lt;code&gt;badbit&lt;/code&gt; o &lt;code&gt;failbit&lt;/code&gt; se configuran inmediatamente, por lo que es m&amp;aacute;s idiom&amp;aacute;tico si escribe &lt;code&gt;while (stream &amp;gt;&amp;gt; n)&lt;/code&gt; , porque la &lt;code&gt;stream&lt;/code&gt; objeto devuelto se convierte en &lt;code&gt;false&lt;/code&gt; si hubo alg&amp;uacute;n error en la lectura de la corriente y, en consecuencia, el ciclo se detiene. Y se convierte en &lt;code&gt;true&lt;/code&gt; si la lectura fue exitosa y el ciclo contin&amp;uacute;a.</target>
        </trans-unit>
        <trans-unit id="0fb4eee4ccb5789e369fe19eb73ae1d7d1775fc0" translate="yes" xml:space="preserve">
          <source>This issue, combined with the general logic error of checking the stream state &lt;em&gt;before&lt;/em&gt; attempting to read from it, which means for N input items the loop will run N+1 times, leads to the following symptoms:</source>
          <target state="translated">Este problema, combinado con el error l&amp;oacute;gico general de verificar el estado del flujo &lt;em&gt;antes de&lt;/em&gt; intentar leerlo, lo que significa que para N elementos de entrada el ciclo se ejecutar&amp;aacute; N + 1 veces, conduce a los siguientes s&amp;iacute;ntomas:</target>
        </trans-unit>
        <trans-unit id="102e51fea7eb97a272da36cb2c7e2a57a5c244fe" translate="yes" xml:space="preserve">
          <source>To recap: The solution is to test the success of the &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; operation itself, not to use a separate &lt;code&gt;.eof()&lt;/code&gt; method: &lt;code&gt;while (stream &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m) { ... }&lt;/code&gt;, just as in C you test the success of the &lt;code&gt;scanf&lt;/code&gt; call itself: &lt;code&gt;while (scanf(&quot;%d%d&quot;, &amp;amp;n, &amp;amp;m) == 2) { ... }&lt;/code&gt;.</source>
          <target state="translated">Para recapitular: la soluci&amp;oacute;n es probar el &amp;eacute;xito de la operaci&amp;oacute;n &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; en s&amp;iacute; misma, no usar un m&amp;eacute;todo &lt;code&gt;.eof()&lt;/code&gt; separado: &lt;code&gt;while (stream &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m) { ... }&lt;/code&gt; , tal como en C prueba el &amp;eacute;xito de la llamada &lt;code&gt;scanf&lt;/code&gt; en s&amp;iacute;: &lt;code&gt;while (scanf(&quot;%d%d&quot;, &amp;amp;n, &amp;amp;m) == 2) { ... }&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a0a66347155573856fc34cd9f2b691d806d1bd86" translate="yes" xml:space="preserve">
          <source>To summarize what is being suggested as the &quot;proper&quot; termination and read order is the following:</source>
          <target state="translated">Para resumir lo que se sugiere como la terminación &quot;adecuada&quot; y el orden de lectura es el siguiente:</target>
        </trans-unit>
        <trans-unit id="7cf3e4722ba563bbda6ba8cfb53eb3b231719e72" translate="yes" xml:space="preserve">
          <source>We don't need to surrender our error handling; just eat up the white-space:</source>
          <target state="translated">No tenemos que renunciar a nuestro manejo de errores,sólo comerse los espacios en blanco:</target>
        </trans-unit>
        <trans-unit id="57b964f16fd66b0cc1636e997cff4f85d4db8e43" translate="yes" xml:space="preserve">
          <source>Whereas, take the following:</source>
          <target state="translated">Considerando que,toma lo siguiente:</target>
        </trans-unit>
        <trans-unit id="ef382a38a7856bd8bf85dfd3439fccee1001bcb5" translate="yes" xml:space="preserve">
          <source>Why is checking for eof explicitly using &lt;code&gt;while (!cin.eof())&lt;/code&gt; wrong?</source>
          <target state="translated">&amp;iquest;Por qu&amp;eacute; la comprobaci&amp;oacute;n de eof usa expl&amp;iacute;citamente &lt;code&gt;while (!cin.eof())&lt;/code&gt; incorrecto?</target>
        </trans-unit>
        <trans-unit id="65e37296903ebefe24b34f25aed499c27dcd18c1" translate="yes" xml:space="preserve">
          <source>Why is iostream::eof inside a loop condition (i.e. `while (!stream.eof())`) considered wrong</source>
          <target state="translated">¿Por qué iostream::eof dentro de una condición de bucle (es decir,`mientras que (!stream.eof())`)se considera erróneo</target>
        </trans-unit>
        <trans-unit id="326edd5c80ebc0f3eed90198b18fad934d7e092a" translate="yes" xml:space="preserve">
          <source>and &lt;strong&gt;not&lt;/strong&gt; the same as</source>
          <target state="translated">y &lt;strong&gt;no es&lt;/strong&gt; lo mismo que</target>
        </trans-unit>
        <trans-unit id="841108c86e9fbb4edafbf1fc269ca06fbd9c2aa7" translate="yes" xml:space="preserve">
          <source>is the same as</source>
          <target state="translated">es la misma que</target>
        </trans-unit>
        <trans-unit id="43f5cc089c9cf89e7f51720154dc51a4bce278f4" translate="yes" xml:space="preserve">
          <source>why is checking for eof explicitly using &lt;code&gt;iostream::eof&lt;/code&gt; wrong?</source>
          <target state="translated">&amp;iquest;por qu&amp;eacute; est&amp;aacute; mal verificar eof expl&amp;iacute;citamente usando &lt;code&gt;iostream::eof&lt;/code&gt; ?</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
