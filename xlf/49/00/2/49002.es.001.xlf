<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/49002">
    <body>
      <group id="49002">
        <trans-unit id="19e4a51166cdfb3ff9a0baa3e1422bffe26ed5b1" translate="yes" xml:space="preserve">
          <source>(a fragment from: &lt;a href=&quot;http://www.copypasteisforword.com/notes/use-inheritance-properly&quot;&gt;use inheritance properly&lt;/a&gt;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(un fragmento de: &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.copypasteisforword.com/notes/use-inheritance-properly&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;use la herencia correctamente&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3cf3c58c0ff1ab151c796159d9fba6934da34ccd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://en.wikipedia.org/wiki/Composition_over_inheritance&quot;&gt;Wikipedia&lt;/a&gt; offers a nice overview of the topic being discussed in this question.</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/Composition_over_inheritance&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Wikipedia&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ofrece una buena descripci&amp;oacute;n del tema que se discute en esta pregunta.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="84d22270db5c3c635539d2d8ae442c8752d70e66" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Car is a Vehicle&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El auto es un veh&amp;iacute;culo&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="bc60060a7f66a3c1423f56735ed1401baf4fbfea" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Classes get heavier&lt;/em&gt; - you don't necessarily know what work your superclass is doing in its constructor, or how much memory it's going
  to use. So constructing some innocent would-be lightweight object can
  be far more expensive than you think, and this may change over time if
  the superclass evolves</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Las clases se vuelven m&amp;aacute;s pesadas&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : no necesariamente sabe qu&amp;eacute; trabajo est&amp;aacute; haciendo su superclase en su constructor, o cu&amp;aacute;nta memoria va a usar. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por lo tanto, construir un objeto inocente y ligero puede ser mucho m&amp;aacute;s costoso de lo que piensas, y esto puede cambiar con el tiempo si la superclase evoluciona&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bd3b79af469cff75a228b80ca85b2a0c9d81150b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Innocent acts can have unexpected results&lt;/em&gt; - The classic example of this is calls to overridable methods from the superclass
  constructor, before the subclasses instance fields have been
  initialized. In a perfect world, nobody would ever do that. This is
  not a perfect world.</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Los actos inocentes pueden tener resultados inesperados&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : el ejemplo cl&amp;aacute;sico de esto son las llamadas a m&amp;eacute;todos reemplazables desde el constructor de la superclase, antes de que se inicialicen los campos de instancia de subclases. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En un mundo perfecto, nadie har&amp;iacute;a eso. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Este no es un mundo perfecto.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2d09d2c9a3f2c14f6cb59dcf58a0f00d467588cc" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;It encourages an explosion of subclasses&lt;/em&gt;. Classloading costs time, more classes costs memory. This may be a non-issue until you're
  dealing with an app on the scale of NetBeans, but there, we had real
  issues with, for example, menus being slow because the first display
  of a menu triggered massive class loading. We fixed this by moving to
  more declarative syntax and other techniques, but that cost time to
  fix as well.</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Fomenta una explosi&amp;oacute;n de subclases&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La carga de clases cuesta tiempo, m&amp;aacute;s clases cuestan memoria. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esto puede no ser un problema hasta que est&amp;eacute; lidiando con una aplicaci&amp;oacute;n en la escala de NetBeans, pero all&amp;iacute; tuvimos problemas reales con, por ejemplo, que los men&amp;uacute;s son lentos porque la primera visualizaci&amp;oacute;n de un men&amp;uacute; provoc&amp;oacute; una carga masiva de clases. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Lo arreglamos movi&amp;eacute;ndonos a una sintaxis m&amp;aacute;s declarativa y otras t&amp;eacute;cnicas, pero eso tambi&amp;eacute;n cost&amp;oacute; tiempo en solucionarlo.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="99b00c9cf8e683fccb25eac102b209f855086a6e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;It makes it harder to change things later&lt;/em&gt; - if you've made a class public, swapping the superclass is going to break subclasses -
  it's a choice which, once you've made the code public, you're married
  to. So if you're not altering the real functionality to your
  superclass, you get much more freedom to change things later if you
  use, rather than extend the thing you need. Take, for example,
  subclassing JPanel - this is usually wrong; and if the subclass is
  public somewhere, you never get a chance to revisit that decision. If
  it's accessed as JComponent getThePanel() , you can still do it (hint:
  expose models for the components within as your API).</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Hace que sea m&amp;aacute;s dif&amp;iacute;cil cambiar las cosas m&amp;aacute;s adelante&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : si ha hecho p&amp;uacute;blica una clase, cambiar la superclase va a romper las subclases, es una elecci&amp;oacute;n con la que, una vez que hace p&amp;uacute;blico el c&amp;oacute;digo, est&amp;aacute; casado. Entonces, si no est&amp;aacute; alterando la funcionalidad real de su superclase, obtendr&amp;aacute; mucha m&amp;aacute;s libertad para cambiar las cosas m&amp;aacute;s adelante si las usa, en lugar de extender lo que necesita. Tomemos, por ejemplo, la subclasificaci&amp;oacute;n de JPanel, esto generalmente es incorrecto; y si la subclase es p&amp;uacute;blica en alg&amp;uacute;n lugar, nunca tendr&amp;aacute; la oportunidad de revisar esa decisi&amp;oacute;n. Si se accede como JComponent getThePanel (), a&amp;uacute;n puede hacerlo (pista: exponga los modelos para los componentes como su API).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a9fea8abbd67148f9aaad86c2cc91e5b50984e84" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;It offers perverse temptations for subclassers to make assumptions about order of method calls and such&lt;/em&gt; - such assumptions tend not to
  be stable if the superclass may evolve over time. See also &lt;a href=&quot;http://www.javalobby.org/forums/thread.jspa?threadID=16036&amp;amp;messageID=91819530#91819530&quot;&gt;my toaster
  and coffee pot analogy&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ofrece tentaciones perversas para que los subclases hagan suposiciones sobre el orden de las llamadas a m&amp;eacute;todos y tal&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , tales suposiciones tienden a no ser estables si la superclase puede evolucionar con el tiempo. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vea tambi&amp;eacute;n &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.javalobby.org/forums/thread.jspa?threadID=16036&amp;amp;messageID=91819530#91819530&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;mi analog&amp;iacute;a de tostadora y cafetera&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1f2d1a02f1330761039247ff2ac486fa4bcd2963" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Object hierarchies don't scale (or making them scale later is much harder than planning ahead)&lt;/em&gt; - this is the classic &quot;too many layers&quot;
  problem. I'll go into this below, and how the AskTheOracle pattern can
  solve it (though it may offend OOP purists).</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Las jerarqu&amp;iacute;as de objetos no escalan (o hacer que escalen m&amp;aacute;s tarde es mucho m&amp;aacute;s dif&amp;iacute;cil que planificar con anticipaci&amp;oacute;n)&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : este es el cl&amp;aacute;sico problema de &quot;demasiadas capas&quot;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ver&amp;eacute; esto a continuaci&amp;oacute;n y c&amp;oacute;mo el patr&amp;oacute;n AskTheOracle puede resolverlo (aunque puede ofender a los puristas de la POO).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="de6ccea047149366a9dda9ed695b699d688314a5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Prefer composition over inheritance as it is more malleable / easy to modify later, but do not use a compose-always approach.&lt;/em&gt; With composition, it's easy to change behavior on the fly with Dependency Injection / Setters. Inheritance is more rigid as most languages do not allow you to derive from more than one type. So the goose is more or less cooked once you derive from TypeA.</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Prefiera la composici&amp;oacute;n sobre la herencia, ya que es m&amp;aacute;s maleable / f&amp;aacute;cil de modificar m&amp;aacute;s adelante, pero no utilice un enfoque de componer siempre. &lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Con la composici&amp;oacute;n, es f&amp;aacute;cil cambiar el comportamiento sobre la marcha con Dependency Injection / Setters. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La herencia es m&amp;aacute;s r&amp;iacute;gida ya que la mayor&amp;iacute;a de los idiomas no le permiten derivar de m&amp;aacute;s de un tipo. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Entonces, el ganso se cocina m&amp;aacute;s o menos una vez que deriva del Tipo A.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4308a41a321f00f54f99cdd2884e9094023fd662" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Truck is a Vehicle&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El cami&amp;oacute;n es un veh&amp;iacute;culo&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f587fb9140a968f772a8162968129fa88e330b59" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Cons of Composition:&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Contras de composici&amp;oacute;n:&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="790ced1c5a0bbe20b15223aa6a4e22337bfcd462" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Pros of Inheritance:&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ventajas de la herencia:&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a69a0cc249ebb716c5b801c19b32afb8a98697dd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Because inheritance is a poor way of moving information&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Porque la herencia es una mala forma de mover informaci&amp;oacute;n&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="642f86d54fa53fe530b7fceb3af4325e550ae72b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Disadvantages of Inheritance:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Desventajas de la herencia:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="30e3ffdd81cf85d5a9b7fbf8f2b5ed8777d2cb4e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 1: Dog --&amp;gt; Animal&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ejemplo 1: Perro -&amp;gt; Animal&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="08d6fcd73932e2db1e487ea9c038b47cd04b4f4e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 2: Circle -/-&amp;gt; Ellipse&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ejemplo 2: C&amp;iacute;rculo - / -&amp;gt; Elipse&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="22d74f86d3cbdef89198b5678344bd3b330b51a8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;REFERENCE&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;REFERENCE&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f01e62217f11659bf6313a453455a96ddfecb964" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Subclassing&lt;/strong&gt; means implicit reuse of method implementations.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Subclasificar&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; significa reutilizaci&amp;oacute;n impl&amp;iacute;cita de implementaciones de m&amp;eacute;todos.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="46f346af11e821ee7e1ce39993d2a8fb3fd69a7b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Subtyping&lt;/strong&gt; means conforming to a type (interface) signature, i.e. a set of APIs, and one can override part of the signature to achieve subtyping polymorphism.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Subtipar&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; significa ajustarse a una firma de tipo (interfaz), es decir, un conjunto de API, y uno puede anular parte de la firma para lograr el polimorfismo de subtipificaci&amp;oacute;n.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="133fbefb42fa53f06d9d810164f60ab910ebfa77" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Update:&lt;/strong&gt; Just came back to my answer and it seems now that it is incomplete without a specific mention of Barbara Liskov's &lt;a href=&quot;http://en.wikipedia.org/wiki/Liskov_substitution_principle&quot;&gt;Liskov Substitution Principle&lt;/a&gt; as a test for 'Should I be inheriting from this type?'</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Actualizaci&amp;oacute;n:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Acabo de regresar a mi respuesta y parece que ahora est&amp;aacute; incompleta sin una menci&amp;oacute;n espec&amp;iacute;fica del Principio de &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Liskov_substitution_principle&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;sustituci&amp;oacute;n de Liskov&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; de Barbara Liskov &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;como prueba para '&amp;iquest;Deber&amp;iacute;a heredar de este tipo?'&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5fe3b54cb63f0b09fd4abeb10b7c42f52993fc0c" translate="yes" xml:space="preserve">
          <source>@MatthieuM. says in &lt;a href=&quot;https://softwareengineering.stackexchange.com/questions/12439/code-smell-inheritance-abuse/12448#comment303759_12448&quot;&gt;https://softwareengineering.stackexchange.com/questions/12439/code-smell-inheritance-abuse/12448#comment303759_12448&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@MatthieuM. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;dice en &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://softwareengineering.stackexchange.com/questions/12439/code-smell-inheritance-abuse/12448#comment303759_12448&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https://softwareengineering.stackexchange.com/questions/12439/code-smell-inheritance-abuse/12448#comment303759_12448&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a1d66bf495a38f7905720f390dbf27d3cd5934bd" translate="yes" xml:space="preserve">
          <source>A circle is an ellipse BUT circles can't do everything that ellipses can do. For example, circles can't stretch, while ellipses can. Therefore, the class &lt;code&gt;Circle&lt;/code&gt;&lt;strong&gt;cannot&lt;/strong&gt; inherit the class &lt;code&gt;Ellipse&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Un c&amp;iacute;rculo es una elipse PERO los c&amp;iacute;rculos no pueden hacer todo lo que pueden hacer las elipses. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por ejemplo, los c&amp;iacute;rculos no pueden estirarse, mientras que las elipses s&amp;iacute;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por lo tanto, la clase &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Circle&lt;/code&gt; &lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;no puede&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; heredar la clase &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Ellipse&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ed02723917385f91dd310ca5a8a52e74215144aa" translate="yes" xml:space="preserve">
          <source>A dog is an animal AND dogs can do everything that animals can do (such as breathing, dying, etc.). Therefore, the class &lt;code&gt;Dog&lt;/code&gt;&lt;strong&gt;can&lt;/strong&gt; inherit the class &lt;code&gt;Animal&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Un perro es un animal Y los perros pueden hacer todo lo que los animales pueden hacer (como respirar, morir, etc.). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por lo tanto, la clase &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Dog&lt;/code&gt; &lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;puede&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; heredar la clase &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Animal&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="01287059a41e22e70d573f7784b74fea385c7a85" translate="yes" xml:space="preserve">
          <source>A much more complete and concrete &lt;a href=&quot;http://www.javalobby.org/forums/thread.jspa?forumID=61&amp;amp;threadID=16487#91822172&quot;&gt;answer from Tim Boudreau&lt;/a&gt; of Sun:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Una respuesta mucho m&amp;aacute;s completa y concreta &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.javalobby.org/forums/thread.jspa?forumID=61&amp;amp;threadID=16487#91822172&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;de Tim Boudreau&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; de Sun:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0ecfbd413e3b64a89620f4a0c3113ea12be77cd9" translate="yes" xml:space="preserve">
          <source>A rule of thumb I have heard is inheritance should be used when its a &quot;is-a&quot; relationship and composition when its a &quot;has-a&quot;. Even with that I feel that you should always lean towards composition because it eliminates a lot of complexity.</source>
          <target state="translated">Una regla empírica que he oído es que la herencia debe utilizarse cuando es una relación &quot;es-un&quot; y la composición cuando es un &quot;tiene-un&quot;.Aún así,creo que siempre debes inclinarte por la composición porque elimina mucha complejidad.</target>
        </trans-unit>
        <trans-unit id="7ba0c4f8f2f7998fd84e1b2e18671bab5f8dbd05" translate="yes" xml:space="preserve">
          <source>A simple way to make sense of this would be that inheritance should be used when you need an object of your class to have the same &lt;em&gt;interface&lt;/em&gt; as its parent class, so that it can thereby be treated as an object of the parent class (upcasting). Moreover, function calls on a derived class object would remain the same everywhere in code, but the specific method to call would be determined at runtime (i.e. the low-level &lt;em&gt;implementation&lt;/em&gt; differs, the high-level &lt;em&gt;interface&lt;/em&gt; remains the same).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Una manera simple de dar sentido a esto ser&amp;iacute;a que la herencia se debe usar cuando necesita que un objeto de su clase tenga la misma &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;interfaz&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que su clase primaria, de modo que pueda tratarse como un objeto de la clase primaria (transmisi&amp;oacute;n ascendente) . Adem&amp;aacute;s, las llamadas a funciones en un objeto de clase derivado permanecer&amp;iacute;an iguales en todas partes en el c&amp;oacute;digo, pero el m&amp;eacute;todo espec&amp;iacute;fico para llamar se determinar&amp;iacute;a en tiempo de ejecuci&amp;oacute;n (es decir, la &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;implementaci&amp;oacute;n de&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; bajo nivel &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;difiere, la &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;interfaz de&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; alto nivel &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;sigue siendo la misma).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="eaf4a40229fa15c4916233897eb3cd85732b5ca8" translate="yes" xml:space="preserve">
          <source>Also, I support @anon answer in &lt;a href=&quot;https://stackoverflow.com/questions/3351666/why-use-inheritance-at-all?lq=1&quot;&gt;Why use inheritance at all?&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Adem&amp;aacute;s, apoyo @anon answer en &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3351666/why-use-inheritance-at-all?lq=1&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iquest;Por qu&amp;eacute; usar herencia en absoluto?&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8fcf41a9237c1dac7d08f4bbf45ff16fef75d4e1" translate="yes" xml:space="preserve">
          <source>An example of this is PHP without the use of classes (particularly before PHP5). All logic is encoded in a set of functions. You may include other files containing helper functions and so on and conduct your business logic by passing data around in functions. This can be very hard to manage as the application grows. PHP5 tries to remedy this by offering more object oriented design.</source>
          <target state="translated">Un ejemplo de esto es PHP sin el uso de clases (particularmente antes de PHP5).Toda la lógica está codificada en un conjunto de funciones.Puede incluir otros archivos que contengan funciones de ayuda y así sucesivamente,y llevar a cabo su lógica de negocio pasando datos en las funciones.Esto puede ser muy difícil de manejar a medida que la aplicación crece.PHP5 trata de remediar esto ofreciendo un diseño más orientado a los objetos.</target>
        </trans-unit>
        <trans-unit id="003b46e7955af669ca0d0b1ccab8ff624590d7d7" translate="yes" xml:space="preserve">
          <source>Another, very pragmatic reason, to prefer composition over inheritance has to do with your domain model, and mapping it to a relational database. It's really hard to map inheritance to the SQL model (you end up with all sorts of hacky workarounds, like creating columns that aren't always used, using views, etc). Some ORMLs try to deal with this, but it always gets complicated quickly. Composition can be easily modeled through a foreign-key relationship between two tables, but inheritance is much harder.</source>
          <target state="translated">Otra razón,muy pragmática,para preferir la composición a la herencia tiene que ver con su modelo de dominio,y su mapeo a una base de datos relacional.Es realmente difícil mapear la herencia al modelo SQL (terminas con todo tipo de soluciones improvisadas,como crear columnas que no siempre se usan,usar vistas,etc.).Algunos ORML tratan de lidiar con esto,pero siempre se complica rápidamente.La composición se puede modelar fácilmente a través de una relación de clave externa entre dos tablas,pero la herencia es mucho más difícil.</target>
        </trans-unit>
        <trans-unit id="b3ead00c7eaee34c442057dee94f69e62fca38dd" translate="yes" xml:space="preserve">
          <source>As a rule of thumb, I tend to choose inheritance over composition when polymorphic use is expected to be very common, in which case the power of dynamic dispatch can lead to a much more readable and elegant API. For example, having a polymorphic class &lt;code&gt;Widget&lt;/code&gt; in GUI frameworks, or a polymorphic class &lt;code&gt;Node&lt;/code&gt; in XML libraries allows to have an API which is much more readable and intuitive to use than what you would have with a solution purely based on composition.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Como regla general, tiendo a elegir la herencia sobre la composici&amp;oacute;n cuando se espera que el uso polim&amp;oacute;rfico sea muy com&amp;uacute;n, en cuyo caso el poder del despacho din&amp;aacute;mico puede conducir a una API mucho m&amp;aacute;s legible y elegante. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por ejemplo, tener un &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Widget&lt;/code&gt; de&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; clase polim&amp;oacute;rfica &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;en marcos de GUI, o un &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Node&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; clase polim&amp;oacute;rfica &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;en bibliotecas XML permite tener una API que es mucho m&amp;aacute;s legible e intuitiva de usar que lo que tendr&amp;iacute;a con una soluci&amp;oacute;n basada exclusivamente en la composici&amp;oacute;n.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="19790e17c44a9b95a38b06493bf40dd98fb49535" translate="yes" xml:space="preserve">
          <source>As many people told, I will first start with the check - whether there exists an &quot;is-a&quot; relationship. If it exists I usually check the following:</source>
          <target state="translated">Como mucha gente dijo,empezaré con la comprobación de si existe una relación &quot;es-una-relación&quot;.Si existe,normalmente compruebo lo siguiente:</target>
        </trans-unit>
        <trans-unit id="fda1192189400839b8b95f4e3718dccf23de4a71" translate="yes" xml:space="preserve">
          <source>As soon as someone explained &quot;favor composition over inheritance&quot; to me, I thought back over every time I tried to share functionality between classes using inheritance and realized that most of the time it didn't really work well.</source>
          <target state="translated">Tan pronto como alguien me explicó &quot;favorecer la composición sobre la herencia&quot;,me acordé cada vez que intenté compartir la funcionalidad entre clases usando la herencia y me di cuenta de que la mayoría de las veces no funcionaba realmente bien.</target>
        </trans-unit>
        <trans-unit id="dd869ae1d27b49cf539b23ec39ba981088b4ec6a" translate="yes" xml:space="preserve">
          <source>Aside from is a/has a considerations, one must also consider the &quot;depth&quot; of inheritance your object has to go through. Anything beyond five or six levels of inheritance deep might cause unexpected casting and boxing/unboxing problems, and in those cases it might be wise to compose your object instead.</source>
          <target state="translated">Aparte de las consideraciones de este ha,también hay que considerar la &quot;profundidad&quot; de la herencia que tiene que atravesar su objeto.Cualquier cosa que supere los cinco o seis niveles de profundidad de herencia puede causar problemas inesperados de casting y boxeo,y en esos casos sería prudente componer su objeto en su lugar.</target>
        </trans-unit>
        <trans-unit id="382e62ec5112339ce9d05227c6fa3d942c472f7a" translate="yes" xml:space="preserve">
          <source>At the risk of oversimplifying, that's composition - composing multiple classes to work together. And once we form that habit we find that it's much more flexible, maintainable, and testable than using inheritance.</source>
          <target state="translated">A riesgo de simplificar demasiado,eso es composición-componer múltiples clases para trabajar juntas.Y una vez que formamos ese hábito encontramos que es mucho más flexible,mantenible y comprobable que usar la herencia.</target>
        </trans-unit>
        <trans-unit id="400d0992f15edf3eca262b5209a73094f8d6e110" translate="yes" xml:space="preserve">
          <source>Base class defines structure of the algorithm  and sub-class will override a part of algorithm =&amp;gt; &lt;strong&gt;&lt;em&gt;You can implement &lt;a href=&quot;https://en.wikipedia.org/wiki/Template_method_pattern&quot;&gt;Template_method&lt;/a&gt; without change in base class skeleton&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La clase base define la estructura del algoritmo y la subclase anular&amp;aacute; una parte del algoritmo =&amp;gt; &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Puede implementar &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Template_method_pattern&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Template_method&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; sin cambios en el esqueleto de la clase base&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0c024738e730ecac1df27b0bab86fd28a7f5eab0" translate="yes" xml:space="preserve">
          <source>Base class provides default implementation and sub-class can change the behaviour =&amp;gt; &lt;strong&gt;&lt;em&gt;You can re-define contract&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La clase base proporciona una implementaci&amp;oacute;n predeterminada y la subclase puede cambiar el comportamiento =&amp;gt; &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Puede redefinir el contrato&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ec79a6576dd1a829ef1be9035eab29495e4a39ac" translate="yes" xml:space="preserve">
          <source>Base class provides no implementation and sub-class has to override complete method (abstract) =&amp;gt; &lt;strong&gt;&lt;em&gt;You can implement a contract&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La clase base no proporciona implementaci&amp;oacute;n y la subclase tiene que anular el m&amp;eacute;todo completo (resumen) =&amp;gt; &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Puede implementar un contrato&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f5071aef9005443060d06d71c91df8e638ed8f5f" translate="yes" xml:space="preserve">
          <source>Call no methods from the superclass constructor</source>
          <target state="translated">No llames a los métodos del constructor de la superclase</target>
        </trans-unit>
        <trans-unit id="4b96cc03f1983251e435c5372fac4d177913e2d5" translate="yes" xml:space="preserve">
          <source>Common problems to the use of inheritance as I see it are:</source>
          <target state="translated">Los problemas comunes al uso de la herencia como yo lo veo son:</target>
        </trans-unit>
        <trans-unit id="ca5e00120498b815c12de59fd45e93f8086a8bfc" translate="yes" xml:space="preserve">
          <source>Composition</source>
          <target state="translated">Composition</target>
        </trans-unit>
        <trans-unit id="81f2d2c7a8be16bc594e920e17d27d214e445279" translate="yes" xml:space="preserve">
          <source>Composition has the befit of inversion of control, and its dependency can be injected dynamically, as is shown in &lt;a href=&quot;https://en.wikipedia.org/wiki/Decorator_pattern#Java&quot;&gt;decorator pattern&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Proxy_pattern#Java&quot;&gt;proxy pattern&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La composici&amp;oacute;n tiene el beneficio de la inversi&amp;oacute;n de control, y su dependencia se puede inyectar din&amp;aacute;micamente, como se muestra en el &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Decorator_pattern#Java&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;patr&amp;oacute;n decorador&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y el &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Proxy_pattern#Java&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;patr&amp;oacute;n proxy&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d58f3246a619006b9498ebf3dce3fe08d69bb09f" translate="yes" xml:space="preserve">
          <source>Composition has the benefit of &lt;a href=&quot;http://www.codecommit.com/blog/scala/the-magic-behind-parser-combinators&quot;&gt;combinator-oriented&lt;/a&gt; programming, i.e. working in a way like the &lt;a href=&quot;https://en.wikipedia.org/wiki/Composite_pattern#Java&quot;&gt;composite pattern&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La composici&amp;oacute;n tiene el beneficio de &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.codecommit.com/blog/scala/the-magic-behind-parser-combinators&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;la&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; programaci&amp;oacute;n &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;orientada al combinador&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , es decir, funciona de manera similar al &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Composite_pattern#Java&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;patr&amp;oacute;n compuesto&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b61664eea08164f2bdbcf4e14aaae6423d48a24e" translate="yes" xml:space="preserve">
          <source>Composition has the benefit of easy &lt;a href=&quot;https://stackoverflow.com/questions/3556652/how-do-java-interfaces-simulate-multiple-inheritance&quot;&gt;multiple inheritance&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La composici&amp;oacute;n tiene el beneficio de una &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3556652/how-do-java-interfaces-simulate-multiple-inheritance&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;herencia m&amp;uacute;ltiple&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; f&amp;aacute;cil &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0686522d6dc64a26474dd45526ab7c5d6f2976fd" translate="yes" xml:space="preserve">
          <source>Composition immediately follows &lt;a href=&quot;https://stackoverflow.com/questions/383947/what-does-it-mean-to-program-to-an-interface&quot;&gt;programming to an interface&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La composici&amp;oacute;n sigue inmediatamente a la &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/383947/what-does-it-mean-to-program-to-an-interface&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;programaci&amp;oacute;n a una interfaz&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="46ef1a92cd606125c6540b7b2b01afd6a3c39af1" translate="yes" xml:space="preserve">
          <source>Composition is favoured over inheritance. To put it very simply you would have:</source>
          <target state="translated">La composición se favorece sobre la herencia.Para decirlo de forma muy simple,lo habrías hecho:</target>
        </trans-unit>
        <trans-unit id="5a48c284575bc59295e94ae273beff875be00b0e" translate="yes" xml:space="preserve">
          <source>Composition is just playing it modular: you create interface similar to the parent class, create new object and delegate calls to it. If these objects need not to know of each other, it's quite safe and easy to use composition. There are so many possibilites here.</source>
          <target state="translated">La composición es simplemente modular:se crea una interfaz similar a la de la clase padre,se crea un nuevo objeto y se delegan las llamadas a él.Si estos objetos no necesitan conocerse entre sí,es bastante seguro y fácil de usar la composición.Hay tantas posibilidades aquí.</target>
        </trans-unit>
        <trans-unit id="ae3589f9e16ef3d74aae74f9cc0e37a51e1e1c2f" translate="yes" xml:space="preserve">
          <source>Composition is often more logical, it provides better abstraction, better encapsulation, better code reuse (especially in very large projects) and is less likely to break anything at a distance just because you made an isolated change anywhere in your code. It also makes it easier to uphold the &quot;&lt;em&gt;Single Responsibility Principle&lt;/em&gt;&quot;, which is often summarized as &quot;&lt;em&gt;There should never be more than one reason for a class to change.&lt;/em&gt;&quot;, and it means that every class exists for a specific purpose and it should only have methods that are directly related to its purpose. Also having a very shallow inheritance tree makes it much easier to keep the overview even when your project starts to get really large. Many people think that inheritance represents our &lt;em&gt;real world&lt;/em&gt; pretty well, but that isn't the truth. The real world uses much more composition than inheritance. Pretty much every real world object you can hold in your hand has been composed out of other, smaller real world objects.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La composici&amp;oacute;n a menudo es m&amp;aacute;s l&amp;oacute;gica, proporciona una mejor abstracci&amp;oacute;n, una mejor encapsulaci&amp;oacute;n, una mejor reutilizaci&amp;oacute;n del c&amp;oacute;digo (especialmente en proyectos muy grandes) y es menos probable que rompa algo a distancia solo porque realiz&amp;oacute; un cambio aislado en cualquier parte de su c&amp;oacute;digo. Tambi&amp;eacute;n facilita la defensa del &quot; &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Principio de responsabilidad &amp;uacute;nica&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &quot;, que a menudo se resume como &quot; &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Nunca debe haber m&amp;aacute;s de una raz&amp;oacute;n para que una clase cambie&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &quot;, y significa que cada clase existe para un prop&amp;oacute;sito espec&amp;iacute;fico y debe solo tiene m&amp;eacute;todos que est&amp;aacute;n directamente relacionados con su prop&amp;oacute;sito. Adem&amp;aacute;s, tener un &amp;aacute;rbol de herencia muy superficial hace que sea mucho m&amp;aacute;s f&amp;aacute;cil mantener la visi&amp;oacute;n general incluso cuando su proyecto comienza a ser realmente grande. Mucha gente piensa que la herencia representa nuestro &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;mundo real&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;bastante bien, pero esa no es la verdad. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El mundo real usa mucha m&amp;aacute;s composici&amp;oacute;n que herencia. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Casi todos los objetos del mundo real que puedes sostener en tu mano se han compuesto de otros objetos m&amp;aacute;s peque&amp;ntilde;os del mundo real.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="10f3a58f627a1c06a673bba20f0d87bcfa973635" translate="yes" xml:space="preserve">
          <source>Composition is typically &quot;has a&quot; or &quot;uses a&quot; relationship. Here the Employee class has a Person. It does not inherit from Person but instead gets the Person object passed to it, which is why it &quot;has a&quot; Person.</source>
          <target state="translated">La composición es típicamente &quot;tiene una&quot; o &quot;usa una&quot; relación.Aquí la clase de empleados tiene una persona.No hereda de la Persona,sino que le pasa el objeto Persona,por lo que &quot;tiene una&quot; Persona.</target>
        </trans-unit>
        <trans-unit id="3fd117ba0aac29cf18bbb9d63f44b9e57ef72792" translate="yes" xml:space="preserve">
          <source>Composition over Inheritance</source>
          <target state="translated">Composición sobre la herencia</target>
        </trans-unit>
        <trans-unit id="f95b761f5013500506669ddde5d332b7d2698e3f" translate="yes" xml:space="preserve">
          <source>Composition should be used when you do not need the new class to have the same interface, i.e. you wish to conceal certain aspects of the class' implementation which the user of that class need not know about. So composition is more in the way of supporting &lt;em&gt;encapsulation&lt;/em&gt; (i.e. concealing the implementation) while inheritance is meant to support &lt;em&gt;abstraction&lt;/em&gt; (i.e. providing a simplified representation of something, in this case the &lt;strong&gt;same&lt;/strong&gt; interface for a range of types with different internals).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La composici&amp;oacute;n debe usarse cuando no necesita que la nueva clase tenga la misma interfaz, es decir, desea ocultar ciertos aspectos de la implementaci&amp;oacute;n de la clase que el usuario de esa clase no necesita conocer. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por lo tanto, la composici&amp;oacute;n es m&amp;aacute;s compatible con la &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;encapsulaci&amp;oacute;n&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (es decir, ocultando la implementaci&amp;oacute;n), mientras que la herencia est&amp;aacute; destinada a admitir la &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;abstracci&amp;oacute;n&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (es decir, proporcionar una representaci&amp;oacute;n simplificada de algo, en este caso la &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;misma&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; interfaz para una gama de tipos con diferentes componentes internos).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a2a8235eed4685d8113375b89cd8a8e3d9bd3e3a" translate="yes" xml:space="preserve">
          <source>Composition v/s Inheritance is a wide subject. There is no real answer for what is better as I think it all depends on the design of the system.</source>
          <target state="translated">Composición vs.Herencia es un tema muy amplio.No hay una respuesta real para lo que es mejor,ya que creo que todo depende del diseño del sistema.</target>
        </trans-unit>
        <trans-unit id="92716f2ee6cb1310c9dda41d91fd87785b6876c1" translate="yes" xml:space="preserve">
          <source>Creating a subclass should mean more than just a convenient way to call superclass methods. You should use inheritance when subclass &quot;is-a&quot; super class both structurally and functionally, when it can be used as superclass and you are going to use that. If it is not the case - it is not inheritance, but something else. Composition is when your objects consists of another, or has some relationship to them.</source>
          <target state="translated">Crear una subclase debería significar más que una forma conveniente de llamar a los métodos de la superclase.Deberías usar la herencia cuando la subclase &quot;es una&quot; superclase tanto estructural como funcionalmente,cuando puede ser usada como superclase y vas a usar eso.Si no es el caso-no es herencia,sino otra cosa.La composición es cuando tus objetos consisten en otro,o tiene alguna relación con ellos.</target>
        </trans-unit>
        <trans-unit id="3fe61a6e3e340af7a148250fe18c7fe220180a40" translate="yes" xml:space="preserve">
          <source>Didn't find a satisfactory answer here, so I wrote a new one.</source>
          <target state="translated">No encontré una respuesta satisfactoria aquí,así que escribí una nueva.</target>
        </trans-unit>
        <trans-unit id="2134be01d96196149dd1553096fb7d21f63f453f" translate="yes" xml:space="preserve">
          <source>Does TypeB want only some/part of the behavior exposed by TypeA? Indicates need for &lt;strong&gt;Composition.&lt;/strong&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iquest;TypeB desea solo parte / parte del comportamiento expuesto por TypeA? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Indica necesidad de &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;composici&amp;oacute;n.&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="12ab02cfb9dcddf234cbcb5daadc6acbbc33faab" translate="yes" xml:space="preserve">
          <source>Does TypeB want to expose the complete interface (all public methods no less) of TypeA such that TypeB can be used where TypeA is expected? Indicates &lt;strong&gt;Inheritance&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iquest;TipoB desea exponer la interfaz completa (todos los m&amp;eacute;todos p&amp;uacute;blicos no menos) de TipoA de modo que TipoB pueda usarse donde se espera TipoA? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Indica &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;herencia&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="777d4fc8b7f76029a5967bc0b0912719f3a1a9b1" translate="yes" xml:space="preserve">
          <source>Does your class need to re-use any high level interactions defined in another class ? The &lt;a href=&quot;http://en.wikipedia.org/wiki/Template_method_pattern&quot;&gt;template method&lt;/a&gt; design pattern would be impossible to implement without inheritance. I believe all extensible frameworks use this pattern.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iquest;Necesita su clase reutilizar las interacciones de alto nivel definidas en otra clase? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Template_method_pattern&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;patr&amp;oacute;n de&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; dise&amp;ntilde;o del &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;m&amp;eacute;todo de plantilla&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ser&amp;iacute;a imposible de implementar sin herencia. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Creo que todos los marcos extensibles usan este patr&amp;oacute;n.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0ce219366653ef3fc59ddc3a55f02fcdb049f3e4" translate="yes" xml:space="preserve">
          <source>E.g 1. Accountant &lt;strong&gt;is an&lt;/strong&gt; Employee. But I will &lt;strong&gt;not&lt;/strong&gt; use inheritance because a Employee object can be instantiated.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por ejemplo: 1. El contador &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;es un&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; empleado. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Pero &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;no&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; usar&amp;eacute; la herencia porque se puede crear una instancia de un objeto Employee.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fd394dfc4783e4030e370145dbe0cbed4e04b2f6" translate="yes" xml:space="preserve">
          <source>E.g 2. Book &lt;strong&gt;is a&lt;/strong&gt; SellingItem. A SellingItem cannot be instantiated - it is abstract concept. Hence I will use inheritacne. The SellingItem is an &lt;strong&gt;abstract base class (or interface&lt;/strong&gt; in C#)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ej. 2. El libro &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;es un art&amp;iacute;culo de&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; venta. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Un art&amp;iacute;culo de venta no puede ser instanciado, es un concepto abstracto. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por lo tanto, usar&amp;eacute; la herencia. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;SellingItem es una &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;clase base abstracta (o interfaz&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en C #)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e63cd64448d1fa4bd7208eeb5d3146984a4c565d" translate="yes" xml:space="preserve">
          <source>Either the base class &lt;code&gt;Engine&lt;/code&gt; exposes a mutator to change its</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;O bien el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Engine&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; clase base &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;expone a un mutador para cambiar su&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b189d69566897b8878d77a4a677fe65f855dc737" translate="yes" xml:space="preserve">
          <source>Essentially, this means that inheritance is possible if the base class can be used polymorphically, which I believe is equivalent to our test &quot;a bar is a foo and bars can do everything that foos can do&quot;.</source>
          <target state="translated">Esencialmente,esto significa que la herencia es posible si la clase base puede ser usada polimórficamente,lo que creo que es equivalente a nuestra prueba &quot;una barra es un foo y las barras pueden hacer todo lo que los foos pueden hacer&quot;.</target>
        </trans-unit>
        <trans-unit id="f2051d9830558331ddb82ea3d448072dd2bb9c36" translate="yes" xml:space="preserve">
          <source>Even if you &lt;em&gt;can&lt;/em&gt; use inheritance doesn't mean you &lt;em&gt;should&lt;/em&gt;: using composition is always an option. Inheritance is a powerful tool allowing implicit code reuse and dynamic dispatch, but it does come with a few disadvantages, which is why composition is often preferred. The trade-offs between inheritance and composition aren't obvious, and in my opinion are best explained in &lt;a href=&quot;https://stackoverflow.com/a/32557773/1951907&quot;&gt;lcn's answer&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Incluso si se &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;puede&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; utilizar la herencia no significa que usted &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;debe&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : el uso de la composici&amp;oacute;n es siempre una opci&amp;oacute;n. La herencia es una herramienta poderosa que permite la reutilizaci&amp;oacute;n impl&amp;iacute;cita de c&amp;oacute;digo y el despacho din&amp;aacute;mico, pero viene con algunas desventajas, por lo que a menudo se prefiere la composici&amp;oacute;n. Las compensaciones entre herencia y composici&amp;oacute;n no son obvias y, en mi opini&amp;oacute;n, se explican mejor en &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/32557773/1951907&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;la respuesta de lcn&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1f8acd85ea01ba780aab8bff6a6da0a022821ecd" translate="yes" xml:space="preserve">
          <source>Even though Composition is preferred, I would like to highlight pros of &lt;em&gt;Inheritance&lt;/em&gt; and cons of &lt;em&gt;Composition&lt;/em&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Aunque se prefiere la Composici&amp;oacute;n, me gustar&amp;iacute;a destacar los pros de la &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Herencia&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y los contras de la &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Composici&amp;oacute;n&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="31031c9aad8cde85b2091023e88715df8ab33039" translate="yes" xml:space="preserve">
          <source>Excessive reusing by sub-classing can make the inheritance stack very deep and very confusing too.</source>
          <target state="translated">La reutilización excesiva por subclasificación puede hacer que la pila de herencia sea muy profunda y muy confusa también.</target>
        </trans-unit>
        <trans-unit id="89a3623ed6c1f4cf17b888e7b9aea97aa69741d0" translate="yes" xml:space="preserve">
          <source>Expose no fields, ever, except constants</source>
          <target state="translated">No exponga ningún campo,nunca,excepto las constantes</target>
        </trans-unit>
        <trans-unit id="043fff222c570925fe52a25442b655b888e4778a" translate="yes" xml:space="preserve">
          <source>Functions that use pointers or references to base classes must be able to use objects of derived classes without knowing it</source>
          <target state="translated">Las funciones que utilizan punteros o referencias a clases base deben ser capaces de utilizar objetos de clases derivadas sin saberlo</target>
        </trans-unit>
        <trans-unit id="3bb1334620acce14a757514719a368811078eacb" translate="yes" xml:space="preserve">
          <source>Generally type of relationship between object provide better information to choose one of them.</source>
          <target state="translated">Por lo general,el tipo de relación entre los objetos proporciona mejor información para elegir uno de ellos.</target>
        </trans-unit>
        <trans-unit id="4f12a4d9f8c6da07d46b0a2b46004b726e7c45ee" translate="yes" xml:space="preserve">
          <source>However, if the parent class for some reason needs to access functions provided by the &quot;child class&quot; for inexperienced programmer it may look like it's a great place to use  inheritance. The parent class can just call it's own abstract &quot;foo()&quot; which is overwritten by the subclass and then it can give the value to the abstract base.</source>
          <target state="translated">Sin embargo,si la clase de padres por alguna razón necesita acceder a las funciones proporcionadas por la &quot;clase de niños&quot; para los programadores sin experiencia,puede parecer que es un gran lugar para usar la herencia.La clase padre puede simplemente llamar a su propio abstracto &quot;foo()&quot;,que es sobrescrito por la subclase y entonces puede dar el valor a la base abstracta.</target>
        </trans-unit>
        <trans-unit id="97f925aaef0269b5644be480512ea4709622251e" translate="yes" xml:space="preserve">
          <source>However, if you want to use the private variables, the case 3, then you may be in trouble. &lt;strong&gt;If you consider global variables unsafe, then you should consider using inheritance to get access to private variables also unsafe&lt;/strong&gt;. Mind you, global variables are not all THAT bad - databases are essentially big set of global variables. But if you can handle it, then it's quite fine.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Sin embargo, si desea utilizar las variables privadas, el caso 3, entonces puede estar en problemas. &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si considera que las variables globales no son seguras, entonces deber&amp;iacute;a considerar usar la herencia para obtener acceso a variables privadas que tambi&amp;eacute;n son inseguras&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . Eso s&amp;iacute;, las variables globales no son TAN malas: las bases de datos son esencialmente un gran conjunto de variables globales. Pero si puedes manejarlo, entonces est&amp;aacute; bastante bien.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b4d685219579566f4df07511cc885fbfa342cbce" translate="yes" xml:space="preserve">
          <source>However, if your intention is purely that of code re-use, then composition most likely is a better design choice.</source>
          <target state="translated">Sin embargo,si su intención es puramente la de reutilizar el código,entonces lo más probable es que la composición sea una mejor opción de diseño.</target>
        </trans-unit>
        <trans-unit id="79722dd4bf505b50db03d2d8689bea00b8a0de1d" translate="yes" xml:space="preserve">
          <source>I agree with @Pavel, when he says, there are places for composition and there are places for inheritance.</source>
          <target state="translated">Estoy de acuerdo con @Pavel,cuando dice que hay lugares para la composición y hay lugares para la herencia.</target>
        </trans-unit>
        <trans-unit id="9da4978d60ea2b750a44d4c39e654ed0899f255e" translate="yes" xml:space="preserve">
          <source>I can think of three real reasons for using inheritance:</source>
          <target state="translated">Se me ocurren tres razones reales para usar la herencia:</target>
        </trans-unit>
        <trans-unit id="92415e061dde1a77f1cbf96f5a396e5e3f625e79" translate="yes" xml:space="preserve">
          <source>I have three classes that all need some common functionality. So if I
  write a base class and have them all inherit from it, then they will
  all have that functionality and I'll only need to maintain it in once
  place.</source>
          <target state="translated">Tengo tres clases que necesitan una funcionalidad común.Así que si escribo una clase base y las tengo todas heredadas de ella,entonces todas tendrán esa funcionalidad y sólo necesitaré mantenerla en un lugar.</target>
        </trans-unit>
        <trans-unit id="94322ac0b828540a1a09d955fde0930579fb6eef" translate="yes" xml:space="preserve">
          <source>I see no one mentioned the &lt;a href=&quot;http://en.wikipedia.org/wiki/Multiple_inheritance#The_diamond_problem&quot;&gt;&lt;strong&gt;diamond problem&lt;/strong&gt;&lt;/a&gt;, which might arise with inheritance.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Veo que nadie mencion&amp;oacute; el &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Multiple_inheritance#The_diamond_problem&quot;&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;problema&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; del &lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;diamante&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , que podr&amp;iacute;a surgir con la herencia.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="66bbabb97fcd47e383202e2d023a33046ffde71d" translate="yes" xml:space="preserve">
          <source>I take no credit for this approach. I took it straight from the &lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0735619670&quot;&gt;Second Edition of Code Complete&lt;/a&gt; by &lt;a href=&quot;http://blogs.construx.com/blogs/stevemcc/default.aspx&quot;&gt;Steve McConnell&lt;/a&gt;, &lt;em&gt;Section 6.3&lt;/em&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;No me atribuyo cr&amp;eacute;dito por este enfoque. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Lo tom&amp;eacute; directamente de la &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0735619670&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Segunda Edici&amp;oacute;n de Code Complete&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; de &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://blogs.construx.com/blogs/stevemcc/default.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Steve McConnell&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Secci&amp;oacute;n 6.3&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="aa2bbecf277f1f24d2f1347150c527e7e0547d68" translate="yes" xml:space="preserve">
          <source>I think inheritance should be used if your answer is an affirmative to any of these questions.</source>
          <target state="translated">Creo que la herencia debe usarse si su respuesta es afirmativa a cualquiera de estas preguntas.</target>
        </trans-unit>
        <trans-unit id="9a218d45daf46b325069807128916cf22840ea70" translate="yes" xml:space="preserve">
          <source>I would suggest using composing as the default. It is more modular, and gives the benefit of late binding (you can change the component dynamically). Also it's easier to test the things separately. And if you need to use a method from a class, you are not forced to be of certain form (Liskov Substitution Principle).</source>
          <target state="translated">Sugeriría que se utilice la composición como el valor predeterminado.Es más modular,y da el beneficio de la encuadernación tardía (se puede cambiar el componente dinámicamente).También es más fácil probar las cosas por separado.Y si necesitas usar un método de una clase,no estás obligado a ser de cierta forma (Principio de Sustitución de Liskov).</target>
        </trans-unit>
        <trans-unit id="b4b8830d61628daddd8e304299af6cded09fa350" translate="yes" xml:space="preserve">
          <source>If code reuse is the &lt;em&gt;sole&lt;/em&gt; purpose, subclassing may give one more than what he needs, i.e. some public methods of the parent class don't make much sense for the child class. In this case, instead of favoring composition over inheritance, composition is &lt;em&gt;demanded&lt;/em&gt;. This is also where the &quot;is-a&quot; vs. &quot;has-a&quot; notion comes from.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si la reutilizaci&amp;oacute;n del c&amp;oacute;digo es el &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;uacute;nico&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; prop&amp;oacute;sito, la subclase puede dar uno m&amp;aacute;s de lo que necesita, es decir, algunos m&amp;eacute;todos p&amp;uacute;blicos de la clase principal no tienen mucho sentido para la clase secundaria. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En este caso, en lugar de favorecer la composici&amp;oacute;n sobre la herencia, se &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;exige la&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; composici&amp;oacute;n &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Aqu&amp;iacute; tambi&amp;eacute;n es de donde viene la noci&amp;oacute;n &quot;es-a&quot; vs. &quot;tiene-a&quot;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f377d45b989acafd55d82af80725c12e6b22ad84" translate="yes" xml:space="preserve">
          <source>If relation type is  &quot;IS-A&quot; relation then Inheritance is better approach.
otherwise relation type is  &quot;HAS-A&quot; relation then composition will better approach.</source>
          <target state="translated">Si el tipo de relación es la relación &quot;IS-A&quot; entonces la herencia es un mejor enfoque.Si el tipo de relación es la relación &quot;HAS-A&quot; entonces la composición es un mejor enfoque.</target>
        </trans-unit>
        <trans-unit id="31255e40d0434216cba8c8688fd5f4dadb2d4bce" translate="yes" xml:space="preserve">
          <source>If the object need to be of the same type, then use &lt;strong&gt;Inheritance&lt;/strong&gt; or implement interfaces.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si el objeto necesita ser del mismo tipo, use &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Herencia&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; o implemente interfaces.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="03ea0bf4e382df082ffa1f260eb4aff741e92ef5" translate="yes" xml:space="preserve">
          <source>If the reason is number 2 it gets a bit tricky. Do you really only need to use the same base class? In general, just using the same base class is not good enough, but it may be a requirement of your framework, a design consideration which can not be avoided.</source>
          <target state="translated">Si la razón es la número 2 se pone un poco difícil.¿Realmente sólo necesitas usar la misma clase de base? En general,usar la misma clase base no es suficiente,pero puede ser un requisito de su marco,una consideración de diseño que no puede ser evitada.</target>
        </trans-unit>
        <trans-unit id="50913e0cbdc9a4f53879607cd8217f727ee11c8d" translate="yes" xml:space="preserve">
          <source>If these are true, then it is probably necessary to use inheritance.</source>
          <target state="translated">Si esto es cierto,entonces probablemente sea necesario usar la herencia.</target>
        </trans-unit>
        <trans-unit id="8b1c2b77c49e48b7fd23f6be825d3e74aa05cdb1" translate="yes" xml:space="preserve">
          <source>If you understand the difference, it's easier to explain.</source>
          <target state="translated">Si entiendes la diferencia,es más fácil de explicar.</target>
        </trans-unit>
        <trans-unit id="0744b5b95abf4fe22c4bb86def64e0a6bd18cab0" translate="yes" xml:space="preserve">
          <source>In Java or C#, an object cannot change its type once it has been instantiated.</source>
          <target state="translated">En Java o C#,un objeto no puede cambiar de tipo una vez que ha sido instanciado.</target>
        </trans-unit>
        <trans-unit id="048c5d31bb5c132e0c74cc2184a24b79baadf241" translate="yes" xml:space="preserve">
          <source>In a glance, if classes B and C inherit A and both override method X, and a fourth class D, inherits from both B and C, and does not override X, which implementation of X D is supposed to use?</source>
          <target state="translated">De un vistazo,si las clases B y C heredan A y ambas anulan el método X,y una cuarta clase D,hereda tanto de B como de C,y no anula X,¿qué implementación de X D se supone que utilice?</target>
        </trans-unit>
        <trans-unit id="328ab1e48844e9cef1794c68df9d6ef8b3d470f0" translate="yes" xml:space="preserve">
          <source>In inheritance, subclass can directly invoke base class method even though it's not implementing base class method because of &lt;strong&gt;&lt;em&gt;IS A&lt;/em&gt;&lt;/strong&gt; relation. If you use composition, you have to add methods in container class to expose contained class API</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En herencia, la subclase puede invocar directamente el m&amp;eacute;todo de la clase base aunque no est&amp;eacute; implementando el m&amp;eacute;todo de la clase base debido a la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;relaci&amp;oacute;n &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;IS A. &lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si usa composici&amp;oacute;n, debe agregar m&amp;eacute;todos en la clase contenedor para exponer la clase contenida API&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0237d418d5cba034a69d0e770a4c52723e47e4d3" translate="yes" xml:space="preserve">
          <source>In the end, we tie our code in some difficult knots and get no benefit whatsoever from it except that we get to say, &quot;Cool, I learned about inheritance and now I used it.&quot; That's not meant to be condescending because we've all done it. But we all did it because no one told us not to.</source>
          <target state="translated">Al final,atamos nuestro código en algunos nudos difíciles y no obtenemos ningún beneficio en absoluto de él,excepto que podemos decir,&quot;Genial,aprendí sobre la herencia y ahora la uso&quot;.Eso no significa ser condescendiente porque todos lo hemos hecho.Pero todos lo hicimos porque nadie nos dijo que no lo hiciéramos.</target>
        </trans-unit>
        <trans-unit id="fdaddb9ce367c2ca746a97cc24d2e8817a51f27d" translate="yes" xml:space="preserve">
          <source>Inheritance</source>
          <target state="translated">Inheritance</target>
        </trans-unit>
        <trans-unit id="8acfc927b768458de4cace8265888459e774da8a" translate="yes" xml:space="preserve">
          <source>Inheritance creates a strong relationship between a subclass and super class; subclass must be aware of super class'es implementation details. Creating the super class is much harder, when you have to think about how it can be extended. You have to document class invariants carefully, and state what other methods overridable methods use internally.</source>
          <target state="translated">La herencia crea una fuerte relación entre una subclase y una superclase;la subclase debe estar al tanto de los detalles de implementación de la superclase.La creación de la superclase es mucho más difícil,cuando tienes que pensar en cómo se puede extender.Tienes que documentar las invariantes de clase cuidadosamente,y declarar qué otros métodos de superclase usan internamente.</target>
        </trans-unit>
        <trans-unit id="b7060930ac5a536fbe2aad05ec9ec8d02db42c83" translate="yes" xml:space="preserve">
          <source>Inheritance exposes &lt;em&gt;protected&lt;/em&gt; members. This breaks encapsulation of the parent class, and if used by subclass, another dependency between the child and its parent is introduced.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La herencia expone a &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;los&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; miembros &lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;protegidos&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esto interrumpe la encapsulaci&amp;oacute;n de la clase padre y, si se usa en una subclase, se introduce otra dependencia entre el ni&amp;ntilde;o y su padre.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d1ded82669ac9037f30aed69f3e1289af7838c6f" translate="yes" xml:space="preserve">
          <source>Inheritance exposes a subclass to details of its parent class implementation, that's why it's often said that inheritance breaks encapsulation (in a sense that you really need to focus on interfaces only not implementation, so reusing by sub classing is not always preferred).</source>
          <target state="translated">La herencia expone a una subclase a los detalles de su implementación de la clase madre,por eso se suele decir que la herencia rompe el encapsulamiento (en el sentido de que hay que centrarse sólo en las interfaces y no en la implementación,por lo que no siempre se prefiere la reutilización mediante la subclasificación).</target>
        </trans-unit>
        <trans-unit id="6b2f20d3e798733bc6014d967772e1dd274bc317" translate="yes" xml:space="preserve">
          <source>Inheritance is a very powerfull machanism for code reuse. But needs to be used properly. I would say that inheritance is used correctly if the subclass is also a subtype of the parent class. As mentioned above, the Liskov Substitution Principle is the key point here.</source>
          <target state="translated">La herencia es un maquinismo muy poderoso para la reutilización del código.Pero debe ser usado apropiadamente.Diría que la herencia se usa correctamente si la subclase es también un subtipo de la clase padre.Como se mencionó anteriormente,el Principio de Sustitución de Liskov es el punto clave aquí.</target>
        </trans-unit>
        <trans-unit id="4d4a2058f753bb6fa776187437c532819ce7c9eb" translate="yes" xml:space="preserve">
          <source>Inheritance is easily overused, though, and creates additional complexity, with hard dependencies between classes. Also understanding what happens during execution of a program gets pretty hard due to layers and dynamic selection of method calls.</source>
          <target state="translated">Sin embargo,la herencia es fácilmente sobreutilizada y crea una complejidad adicional,con duras dependencias entre las clases.También entender lo que sucede durante la ejecución de un programa se hace bastante difícil debido a las capas y a la selección dinámica de las llamadas a los métodos.</target>
        </trans-unit>
        <trans-unit id="246a008dc7a1185d80da575bb9971db7f90056e2" translate="yes" xml:space="preserve">
          <source>Inheritance is often taught early when we learn object-oriented programming, so it's seen as an easy solution to a common problem.</source>
          <target state="translated">La herencia se enseña a menudo temprano cuando aprendemos la programación orientada a objetos,por lo que se ve como una solución fácil a un problema común.</target>
        </trans-unit>
        <trans-unit id="644a9a7de65c713edc98cce558794f4f5d61fd4c" translate="yes" xml:space="preserve">
          <source>Inheritance is pretty enticing especially coming from procedural-land and it often looks deceptively elegant. I mean all I need to do is add this one bit of functionality to some other class, right? Well, one of the problems is that</source>
          <target state="translated">La herencia es bastante tentadora,especialmente si viene de la tierra de los procedimientos y a menudo parece engañosamente elegante.Quiero decir que todo lo que necesito hacer es añadir esta funcionalidad a alguna otra clase,¿verdad? Bueno,uno de los problemas es que</target>
        </trans-unit>
        <trans-unit id="62e87b6a71b6557527e58c600d3ce6921f9bf0e3" translate="yes" xml:space="preserve">
          <source>Inheritance is really a cool feature, but I'm afraid it has been overused the last couple of years. People treated inheritance as the one hammer that can nail it all, regardless if it was actually a nail, a screw, or maybe a something completely different.</source>
          <target state="translated">La herencia es realmente una característica genial,pero me temo que ha sido sobreutilizada en el último par de años.La gente trataba la herencia como el único martillo que puede clavarlo todo,sin importar si era realmente un clavo,un tornillo,o tal vez algo completamente diferente.</target>
        </trans-unit>
        <trans-unit id="6876956ee9e8f2967733c679847a166bd622f332" translate="yes" xml:space="preserve">
          <source>Inheritance is sometimes useful, if the hierarchy really represents a is-a-relationship. It relates to Open-Closed Principle, which states that classes should be closed for modification but open to extension. That way you can have polymorphism; to have a generic method that deals with super type and its methods, but via dynamic dispatch the method of subclass is invoked. This is flexible, and helps to create indirection, which is essential in software (to know less about implementation details).</source>
          <target state="translated">La herencia es a veces útil,si la jerarquía representa realmente una relación es-a-relación.Se relaciona con el Principio Abierto-Cerrado,que establece que las clases deben ser cerradas para su modificación pero abiertas a la extensión.Así se puede tener polimorfismo;tener un método genérico que se ocupe del supertipo y sus métodos,pero mediante el envío dinámico se invoca el método de la subclase.Esto es flexible,y ayuda a crear la indirección,que es esencial en el software (para saber menos sobre los detalles de implementación).</target>
        </trans-unit>
        <trans-unit id="bced79113df2d8dc04636edbfd4c770f3793b989" translate="yes" xml:space="preserve">
          <source>Inheritance is very powerful, but you can't force it (see: the &lt;a href=&quot;http://en.wikipedia.org/wiki/Circle-ellipse_problem&quot;&gt;circle-ellipse problem&lt;/a&gt;). If you really can't be completely sure of a true &quot;is-a&quot; subtype relationship, then it's best to go with composition.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La herencia es muy poderosa, pero no puedes forzarla (ver: el &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Circle-ellipse_problem&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;problema c&amp;iacute;rculo-elipse&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si realmente no puede estar completamente seguro de una verdadera relaci&amp;oacute;n de subtipo &quot;es-a&quot;, entonces es mejor ir con la composici&amp;oacute;n.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8c9e4c9ebc2c06779a4efa98017c411df12f9203" translate="yes" xml:space="preserve">
          <source>Inheritance provides straightforward &lt;a href=&quot;https://en.wikipedia.org/wiki/This_%28computer_programming%29#Open_recursion&quot;&gt;open recursion&lt;/a&gt; via the internal polymorphic site &lt;code&gt;this&lt;/code&gt;, i.e. invoking overriding method (or even &lt;a href=&quot;http://www.scala-lang.org/old/node/1637.html#comment-5489&quot;&gt;type&lt;/a&gt;) in another member function, either public or private (though &lt;a href=&quot;https://softwareengineering.stackexchange.com/questions/35946/is-it-bad-code-smell-if-private-method-calls-public-one&quot;&gt;discouraged&lt;/a&gt;). Open recursion can be &lt;a href=&quot;https://github.com/akottr/edu-pattern/blob/master/org.akottr.patterns.composition/src/org/akottr/patterns/composition/inheritance/Compositon.java&quot;&gt;simulated via composition&lt;/a&gt;, but it requires extra effort and may not always viable(?). This &lt;a href=&quot;https://stackoverflow.com/a/2238735/2073130&quot;&gt;answer&lt;/a&gt; to a duplicated question talks something similar.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La herencia proporciona &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/This_%28computer_programming%29#Open_recursion&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;una recursi&amp;oacute;n abierta&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; directa a &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;trav&amp;eacute;s del sitio polim&amp;oacute;rfico interno, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;this&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es, invocando el m&amp;eacute;todo de anulaci&amp;oacute;n (o incluso el &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.scala-lang.org/old/node/1637.html#comment-5489&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;tipo&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ) en otra funci&amp;oacute;n miembro, ya sea p&amp;uacute;blica o privada (aunque &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://softwareengineering.stackexchange.com/questions/35946/is-it-bad-code-smell-if-private-method-calls-public-one&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;desaconsejada&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La recursi&amp;oacute;n abierta se puede &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/akottr/edu-pattern/blob/master/org.akottr.patterns.composition/src/org/akottr/patterns/composition/inheritance/Compositon.java&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;simular a trav&amp;eacute;s de la composici&amp;oacute;n&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , pero requiere un esfuerzo adicional y no siempre es viable (?). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esta &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/2238735/2073130&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;respuesta&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; a una pregunta duplicada habla algo similar.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="476dda4bfbf5d4cce097cb5b1043e190f23872ad" translate="yes" xml:space="preserve">
          <source>Inheritance provides straightforward code reuse if not overridden, while composition has to re-code every API, even if it's just a simple job of delegation.</source>
          <target state="translated">La herencia proporciona una sencilla reutilización del código si no se anula,mientras que la composición tiene que recodificar cada API,aunque sea un simple trabajo de delegación.</target>
        </trans-unit>
        <trans-unit id="58f31260c50c06295c28ea7e8151785985ab907c" translate="yes" xml:space="preserve">
          <source>Inheritance vs. Aggregation</source>
          <target state="translated">Herencia vs.Agregación</target>
        </trans-unit>
        <trans-unit id="e4add19dff6bf1f83b08edd6c883185779e798ed" translate="yes" xml:space="preserve">
          <source>Is your class part of a structure that benefits from polymorphism ? For example, if you had a Shape class, which declares a method called draw(), then we clearly need Circle and Square classes to be subclasses of Shape, so that their client classes would depend on Shape and not on specific subclasses.</source>
          <target state="translated">¿Su clase es parte de una estructura que se beneficia del polimorfismo? Por ejemplo,si tuvieras una clase Shape,que declara un método llamado draw(),entonces claramente necesitamos que las clases Círculo y Cuadrado sean subclases de Shape,para que sus clases clientes dependan de Shape y no de subclases específicas.</target>
        </trans-unit>
        <trans-unit id="bfe3497c44aa76555ec280d12b36758df5b4f30f" translate="yes" xml:space="preserve">
          <source>It establishes a logical &quot;&lt;strong&gt;IS A&quot;&lt;/strong&gt; relation. If &lt;em&gt;Car&lt;/em&gt; and &lt;em&gt;Truck&lt;/em&gt; are two types of &lt;em&gt;Vehicle&lt;/em&gt; ( base class), child class &lt;strong&gt;IS A&lt;/strong&gt; base class.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Establece una relaci&amp;oacute;n l&amp;oacute;gica &quot; &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ES A&quot;&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si el &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;autom&amp;oacute;vil&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y el &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;cami&amp;oacute;n&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; son dos tipos de &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;veh&amp;iacute;culos&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (clase base), la clase secundaria &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ES una&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; clase base.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="896d22608075a950c42470104324b7925c60561d" translate="yes" xml:space="preserve">
          <source>It is often said that a class &lt;code&gt;Bar&lt;/code&gt; can inherit a class &lt;code&gt;Foo&lt;/code&gt; when the following sentence is true:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;A menudo se dice que una &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Bar&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; clase &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;puede heredar una clase &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Foo&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; cuando la siguiente oraci&amp;oacute;n es verdadera:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="34e84b66db1164cc20f4c06d7a6b4d4b98054d53" translate="yes" xml:space="preserve">
          <source>It looks like a nice idea, but in many cases it's better just give the class an object which implements the foo() (or even set the value provided the foo() manually) than to inherit the new class from some base class which requires the function foo() to be specified.</source>
          <target state="translated">Parece una buena idea,pero en muchos casos es mejor dar a la clase un objeto que implemente el foo()(o incluso establecer el valor proporcionado por el foo()manualmente)que heredar la nueva clase de alguna clase base que requiera que se especifique la función foo().</target>
        </trans-unit>
        <trans-unit id="0325327f4aa9142c3fd02e3a934a008c92e7171d" translate="yes" xml:space="preserve">
          <source>It sounds great, but in practice it almost never, ever works, for one of several reasons:</source>
          <target state="translated">Suena genial,pero en la práctica casi nunca,nunca funciona,por una de varias razones:</target>
        </trans-unit>
        <trans-unit id="f8a7ea6e944d4c6b1135e3b5b710351923f2b191" translate="yes" xml:space="preserve">
          <source>Its totally depend on entity relationship.</source>
          <target state="translated">Depende totalmente de la relación con la entidad.</target>
        </trans-unit>
        <trans-unit id="9aa3aeed06309616a463e707f18bc9934bea552e" translate="yes" xml:space="preserve">
          <source>Just so you know, another method used to determine whether inheritance is possible  is called the &lt;a href=&quot;http://web.archive.org/web/20110722014513/http://www.objectmentor.com/resources/articles/lsp.pdf&quot;&gt;Liskov Substitution Principle&lt;/a&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para que lo sepas, otro m&amp;eacute;todo utilizado para determinar si la herencia es posible se llama &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://web.archive.org/web/20110722014513/http://www.objectmentor.com/resources/articles/lsp.pdf&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Principio de sustituci&amp;oacute;n de Liskov&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5197c78c69bc09836bc35c15c3eef5138da931c2" translate="yes" xml:space="preserve">
          <source>Liskov Substitution Principle</source>
          <target state="translated">Principio de sustitución de Liskov</target>
        </trans-unit>
        <trans-unit id="d422e9f26503f80de1cff472c1db2f215fa1702a" translate="yes" xml:space="preserve">
          <source>Methods shall be either abstract or final</source>
          <target state="translated">Los métodos serán abstractos o finales</target>
        </trans-unit>
        <trans-unit id="ac55c0bd23a1f1346ee8d2c06328fa87ad445ad8" translate="yes" xml:space="preserve">
          <source>My acid test for the above is:</source>
          <target state="translated">Mi prueba de fuego para lo anterior es:</target>
        </trans-unit>
        <trans-unit id="9981ec34a9c592b0920bf23bf8fac06054f08043" translate="yes" xml:space="preserve">
          <source>My general rule of thumb: &lt;em&gt;Before using inheritance, consider if composition makes more sense.&lt;/em&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Mi regla general: &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;antes de usar la herencia, considere si la composici&amp;oacute;n tiene m&amp;aacute;s sentido.&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="db3f86242cf06a42d0939d0152ef62fe2f01bab2" translate="yes" xml:space="preserve">
          <source>My take on what to do, if you do allow for inheritance, which you may
  take with a grain of salt is:</source>
          <target state="translated">Mi opinión sobre lo que hay que hacer,si se permite la herencia,que se puede tomar con un grano de sal es:</target>
        </trans-unit>
        <trans-unit id="fdcdd0dea9447d0f926949cde5bf20294722ed01" translate="yes" xml:space="preserve">
          <source>Now say you want to create a Manager type so you end up with:</source>
          <target state="translated">Ahora di que quieres crear un tipo de Manager para que termines con:</target>
        </trans-unit>
        <trans-unit id="f67f8e82998175522142525ba912b4ae6be97e09" translate="yes" xml:space="preserve">
          <source>Now your aircraft can start with having fixed wings</source>
          <target state="translated">Ahora su avión puede comenzar con tener alas fijas</target>
        </trans-unit>
        <trans-unit id="3fdddf6d088be0ec0a4568052a16a437fcc42087" translate="yes" xml:space="preserve">
          <source>Now, I can replace my engine on the fly as well.</source>
          <target state="translated">Ahora,puedo reemplazar mi motor sobre la marcha también.</target>
        </trans-unit>
        <trans-unit id="832d28133a55725f1ed6e5888b63068210a2853f" translate="yes" xml:space="preserve">
          <source>On the other hand &lt;b&gt;Object composition&lt;/b&gt; is defined at runtime through objects acquiring references to other objects. In such a case these objects will never be able to reach each-other's protected data (no encapsulation break) and will be forced to respect each other's interface. And in this case also, implementation dependencies will be a lot less than in case of inheritance.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por otro lado, la &lt;/font&gt;&lt;/font&gt;&lt;b&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;composici&amp;oacute;n de objetos&lt;/font&gt;&lt;/font&gt;&lt;/b&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; se define en tiempo de ejecuci&amp;oacute;n a trav&amp;eacute;s de objetos que adquieren referencias a otros objetos. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En tal caso, estos objetos nunca podr&amp;aacute;n alcanzar los datos protegidos de los dem&amp;aacute;s (sin interrupci&amp;oacute;n de encapsulaci&amp;oacute;n) y se ver&amp;aacute;n obligados a respetar la interfaz de los dem&amp;aacute;s. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Y en este caso tambi&amp;eacute;n, las dependencias de implementaci&amp;oacute;n ser&amp;aacute;n mucho menores que en caso de herencia.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7c7b128050c901c022cde5fd0d94700144c01c7a" translate="yes" xml:space="preserve">
          <source>On the other hand when you have &lt;strong&gt;has-a&lt;/strong&gt; or some adjective relationship between two classes (student has courses) or (teacher studies courses), you chose composition.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por otro lado, cuando &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;tiene una&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; relaci&amp;oacute;n ad &lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;-&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; adjetiva o alguna adjetiva entre dos clases (el estudiante tiene cursos) o (cursos de estudios del profesor), elige la composici&amp;oacute;n.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5aa7d08c0a1cf9428cca33805b546bb71b9e85d3" translate="yes" xml:space="preserve">
          <source>One example of this: You want to create a Stack out of a List. Stack only has pop, push and peek. You shouldn't use inheritance given that you don't want push_back, push_front, removeAt, et al.-kind of functionality in a Stack.</source>
          <target state="translated">Un ejemplo de esto:Quieres crear una pila de una lista.La pila sólo tiene pop,push y peek.No deberías usar la herencia ya que no quieres push_back,push_front,removeAt,et al.tipo de funcionalidad en un Stack.</target>
        </trans-unit>
        <trans-unit id="c15fc0f907136cf0672eb8daba99647310e8c8f3" translate="yes" xml:space="preserve">
          <source>Our Set of integers class is a subclass of List of Integers, but is not a subtype, due to it is not satisfying all the features of the List class. The values, and the signature of the methods are satisfied but the properties are not. The behaviour of the add(Integer) method has been clearly changed, not preserving the properties of the parent type. Think from the point of view of the client of your classes. They might receive a Set of integers where a List of integers is expected. The client might want to add a value and get that value added to the List even if that value already exist in the List. But her wont get that behaviour if the value exists. A big suprise for her!</source>
          <target state="translated">Nuestra clase Set of integers es una subclase de la lista de números enteros,pero no es un subtipo,debido a que no satisface todas las características de la clase List.Los valores y la firma de los métodos se satisfacen pero las propiedades no.El comportamiento del método add(Integer)se ha modificado claramente,no conservando las propiedades del tipo padre.Piensa desde el punto de vista del cliente de tus clases.Podrían recibir un conjunto de enteros donde se espera una lista de enteros.El cliente podría querer añadir un valor y obtener ese valor añadido a la Lista,incluso si ese valor ya existe en la Lista.Pero no obtendrá ese comportamiento si el valor existe.¡Una gran sorpresa para ella!</target>
        </trans-unit>
        <trans-unit id="c1ba9f43aacc5af4e732994e2cf99330626de110" translate="yes" xml:space="preserve">
          <source>Personally I learned to always prefer composition over inheritance. There is no programmatic problem you can solve with inheritance which you cannot solve with composition; though you may have to use Interfaces(Java) or Protocols(Obj-C) in some cases. Since C++ doesn't know any such thing, you'll have to use abstract base classes, which means you cannot get entirely rid of inheritance in C++.</source>
          <target state="translated">Personalmente aprendí a preferir siempre la composición a la herencia.No hay ningún problema programático que puedas resolver con la herencia que no puedas resolver con la composición;aunque puede que tengas que usar Interfaces(Java)o Protocolos(Obj-C)en algunos casos.Como C++no sabe nada de eso,tendrás que usar clases base abstractas,lo que significa que no puedes deshacerte completamente de la herencia en C++.</target>
        </trans-unit>
        <trans-unit id="09ac00419cae691f7272de0fcf67b357fbda9a77" translate="yes" xml:space="preserve">
          <source>Prefer composition over inheritance</source>
          <target state="translated">Preferir la composición a la herencia</target>
        </trans-unit>
        <trans-unit id="ee0347cbc9ba866cc7d164011ffab0691b350235" translate="yes" xml:space="preserve">
          <source>Procedural Code</source>
          <target state="translated">Código de procedimiento</target>
        </trans-unit>
        <trans-unit id="e723b4eaeeb9a79c6611a9a222aeb92911a3f411" translate="yes" xml:space="preserve">
          <source>Reason: &lt;em&gt;Subclassing usually means more complexity and connectedness, i.e. harder to change, maintain, and scale without making mistakes.&lt;/em&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Motivo: La &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;subclasificaci&amp;oacute;n generalmente significa m&amp;aacute;s complejidad y conectividad, es decir, m&amp;aacute;s dif&amp;iacute;cil de cambiar, mantener y escalar sin cometer errores.&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1b27176c7cd1d943a977fdce1ee934c4c1feeb14" translate="yes" xml:space="preserve">
          <source>See other answers.</source>
          <target state="translated">Ver otras respuestas.</target>
        </trans-unit>
        <trans-unit id="8719dca4ec3565d3812b57bd3de8cc2af492bfeb" translate="yes" xml:space="preserve">
          <source>So for me it looks like if someone does not know if he needs inheritance or composition, the real problem is that he does not know if he want to drink or to eat. Think about your problem domain more, understand it better.</source>
          <target state="translated">Así que para mí parece que si alguien no sabe si necesita una herencia o una composición,el verdadero problema es que no sabe si quiere beber o comer.Piensa más en el dominio de tu problema,entiéndelo mejor.</target>
        </trans-unit>
        <trans-unit id="5e46fa089d47708f97cac794ca257e6960b4ed16" translate="yes" xml:space="preserve">
          <source>So only when subtyping is purposed, i.e. to use the new class later in a polymorphic manner, do we face the problem of choosing inheritance or composition. This is the assumption that gets omitted in the shortened idiom under discussion.</source>
          <target state="translated">Por lo tanto,sólo cuando la subtipificación tiene un propósito,es decir,utilizar la nueva clase más tarde de manera polimórfica,nos enfrentamos al problema de elegir la herencia o la composición.Esta es la suposición que se omite en el modismo abreviado que se está discutiendo.</target>
        </trans-unit>
        <trans-unit id="38f67df16186ea732f8e64c3dc6f62ebcca5e137" translate="yes" xml:space="preserve">
          <source>So, if your object need to appear as a different object or behave differently depending on an object state or conditions, then use &lt;strong&gt;Composition&lt;/strong&gt;: Refer to &lt;a href=&quot;http://www.dofactory.com/Patterns/PatternState.aspx&quot;&gt;State&lt;/a&gt; and &lt;a href=&quot;http://www.dofactory.com/Patterns/PatternStrategy.aspx&quot;&gt;Strategy&lt;/a&gt; Design Patterns.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por lo tanto, si su objeto necesita aparecer como un objeto diferente o comportarse de manera diferente seg&amp;uacute;n el estado o las condiciones de un objeto, utilice &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Composici&amp;oacute;n&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : consulte &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Patrones de dise&amp;ntilde;o de &lt;/font&gt;&lt;a href=&quot;http://www.dofactory.com/Patterns/PatternStrategy.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;estrategia&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.dofactory.com/Patterns/PatternState.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;estado&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="549f8d9bac9806f318f15d88f433b6bc397447c1" translate="yes" xml:space="preserve">
          <source>Sub-class adds extension to base class implementation by calling super.methodName() as first statement =&amp;gt; &lt;strong&gt;&lt;em&gt;You can extend a contract&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La subclase agrega extensi&amp;oacute;n a la implementaci&amp;oacute;n de la clase base llamando a super.methodName () como primera instrucci&amp;oacute;n =&amp;gt; &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Puede extender un contrato&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2edf57dc395184ef34315b418a2b088ba9c59312" translate="yes" xml:space="preserve">
          <source>Subclass is not the same as subtype. You might create subclasses that are not subtypes (and this is when you should use composition). To understand what a subtype is, lets start giving an explanation of what a type is.</source>
          <target state="translated">La subclase no es lo mismo que el subtipo.Puede crear subclases que no son subtipos (y aquí es cuando debe usar la composición).Para entender lo que es un subtipo,empecemos a dar una explicación de lo que es un tipo.</target>
        </trans-unit>
        <trans-unit id="6280068eb73b4991a7ab571fc93fcf217f265813" translate="yes" xml:space="preserve">
          <source>Subtype is also a type, which has a relation to another type, called parent type (or supertype). The subtype must satisfy the features (values, methods and properties) of the parent type. The relation means that in any context where the supertype is expected, it can be substitutable by a subtype, without affecting the behaviour of the execution. Let&amp;rsquo;s go to see some code to exemplify what I&amp;rsquo;m saying. Suppose I write a List of integers (in some sort of pseudo language):</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El subtipo tambi&amp;eacute;n es un tipo, que tiene una relaci&amp;oacute;n con otro tipo, llamado tipo padre (o supertipo). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El subtipo debe satisfacer las caracter&amp;iacute;sticas (valores, m&amp;eacute;todos y propiedades) del tipo primario. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La relaci&amp;oacute;n significa que en cualquier contexto donde se espera el supertipo, puede ser sustituible por un subtipo, sin afectar el comportamiento de la ejecuci&amp;oacute;n. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vamos a ver un c&amp;oacute;digo para ejemplificar lo que estoy diciendo. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Supongamos que escribo una lista de enteros (en alg&amp;uacute;n tipo de pseudo lenguaje):&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6887946e4c5b4415b62320ae3947b236c9c5c713" translate="yes" xml:space="preserve">
          <source>Subtyping is appropriate and more powerful where the &lt;a href=&quot;https://stackoverflow.com/a/8352969&quot;&gt;invariants can be enumerated&lt;/a&gt;, else use function composition for extensibility.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El subtipo es apropiado y m&amp;aacute;s poderoso cuando &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/8352969&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;se pueden enumerar&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; los &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;invariantes&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , de lo contrario, use la composici&amp;oacute;n de funciones para la extensibilidad.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e98d1b95929689559f3d4c93532fcfbd040d69e9" translate="yes" xml:space="preserve">
          <source>Suppose an aircraft has only two parts: an engine and wings.</source>
          <target state="translated">Supongamos que una aeronave sólo tiene dos partes:un motor y unas alas.</target>
        </trans-unit>
        <trans-unit id="748d9e332cb80d932e28118f49b5638ba8eaee06" translate="yes" xml:space="preserve">
          <source>The Manager object is composed as an Employee and a Person. The Title behaviour is taken from employee. This explicit composition removes ambiguity among other things and you'll encounter fewer bugs.</source>
          <target state="translated">El objeto Manager está compuesto por un Empleado y una Persona.El comportamiento del Título se toma de empleado.Esta composición explícita elimina la ambigüedad entre otras cosas y encontrarás menos errores.</target>
        </trans-unit>
        <trans-unit id="81ed2eb88eaa37fdff388424251ce97e077ced4c" translate="yes" xml:space="preserve">
          <source>The antidote is the &lt;a href=&quot;https://en.wikipedia.org/wiki/Single_responsibility_principle&quot;&gt;Single Responsibility Principle&lt;/a&gt;. Think of it as a constraint. My class &lt;em&gt;must&lt;/em&gt; do one thing. I &lt;em&gt;must&lt;/em&gt; be able to give my class a name that somehow describes that one thing it does. (There are exceptions to everything, but absolute rules are sometimes better when we're learning.) It follows that I cannot write a base class called &lt;code&gt;ObjectBaseThatContainsVariousFunctionsNeededByDifferentClasses&lt;/code&gt;. Whatever distinct functionality I need must be in its own class, and then other classes that need that functionality can depend on that class, &lt;em&gt;not&lt;/em&gt; inherit from it.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El ant&amp;iacute;doto es el &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Single_responsibility_principle&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;principio de responsabilidad &amp;uacute;nica&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . Piense en ello como una restricci&amp;oacute;n. Mi clase &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;debe&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; hacer una cosa. Yo &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;debo&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ser capaz de dar mi clase un nombre que de alguna manera describe que una cosa que hace. (Hay excepciones para todo, pero las reglas absolutas a veces son mejores cuando estamos aprendiendo). De esto se deduce que no puedo escribir una clase base llamada &lt;/font&gt;&lt;/font&gt; &lt;code&gt;ObjectBaseThatContainsVariousFunctionsNeededByDifferentClasses&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . Cualquier funcionalidad distinta que necesite debe estar en su propia clase, y luego otras clases que necesiten esa funcionalidad pueden depender de esa clase, &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;no&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; heredar de ella.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="756c9ed98907d3961cd495c08dfc9ecbac6456d9" translate="yes" xml:space="preserve">
          <source>The article, &lt;a href=&quot;http://www.agileatwork.com/inheritance-is-evil-the-story-of-the-epic-fail-of-dataannotationsmodelbinder/&quot;&gt;Inheritance is Evil: The Epic Fail of the DataAnnotationsModelBinder&lt;/a&gt;, walks through an example of this in C#. It shows the use of inheritance when composition should have been used and how it could be refactored.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El art&amp;iacute;culo, La &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.agileatwork.com/inheritance-is-evil-the-story-of-the-epic-fail-of-dataannotationsmodelbinder/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;herencia es malvada: el error &amp;eacute;pico de DataAnnotationsModelBinder&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , muestra un ejemplo de esto en C #. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Muestra el uso de la herencia cuando la composici&amp;oacute;n deber&amp;iacute;a haber sido utilizada y c&amp;oacute;mo podr&amp;iacute;a ser refactorizada.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0f0cb63e7db6c559e277c0e6f5e0b14d3af0a76f" translate="yes" xml:space="preserve">
          <source>The composition has a real edge here: the relationship can be reversed: the &quot;parent class&quot; or &quot;abstract worker&quot; can aggregate any specific &quot;child&quot; objects implementing certain interface + &lt;strong&gt;any child can be set inside any other type of parent, which accepts it's type&lt;/strong&gt;. And there can be any number of objects, for example MergeSort or QuickSort could sort any list of objects implementing an abstract Compare -interface. Or to put it another way: any group of objects which implement &quot;foo()&quot; and other group of objects which can make use of objects having &quot;foo()&quot; can play together.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La composici&amp;oacute;n tiene una ventaja real aqu&amp;iacute;: la relaci&amp;oacute;n se puede revertir: la &quot;clase principal&quot; o el &quot;trabajador abstracto&quot; pueden agregar cualquier objeto &quot;secundario&quot; espec&amp;iacute;fico que implemente cierta interfaz + &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;cualquier elemento secundario se puede establecer dentro de cualquier otro tipo de elemento primario, que acepta Es tipo&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Y puede haber cualquier cantidad de objetos, por ejemplo, MergeSort o QuickSort podr&amp;iacute;an ordenar cualquier lista de objetos que implementen una interfaz de comparaci&amp;oacute;n abstracta. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;O para decirlo de otra manera: cualquier grupo de objetos que implementan &quot;foo ()&quot; y otro grupo de objetos que pueden hacer uso de objetos que tienen &quot;foo ()&quot; pueden jugar juntos.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="33595de1c584d88b32800d1fcaf74682bd919860" translate="yes" xml:space="preserve">
          <source>The first test ensures that all &lt;em&gt;getters&lt;/em&gt; of &lt;code&gt;Foo&lt;/code&gt; make sense in &lt;code&gt;Bar&lt;/code&gt; (= shared properties), while the second test makes sure that all &lt;em&gt;setters&lt;/em&gt; of &lt;code&gt;Foo&lt;/code&gt; make sense in &lt;code&gt;Bar&lt;/code&gt; (= shared functionality).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Las primeras pruebas asegura que todos los &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;captadores&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Foo&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tiene sentido en &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Bar&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (propiedades = compartidos), mientras que la segunda prueba se asegura de que todos &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;los emisores&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Foo&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tiene sentido en el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Bar&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (= funcionalidad compartida).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2c3af0b301854a243ae48ec4eb1b17706b1a405f" translate="yes" xml:space="preserve">
          <source>The issue with inheritance is that it can be used for two orthogonal purposes:</source>
          <target state="translated">El problema con la herencia es que puede ser utilizada para dos propósitos ortogonales:</target>
        </trans-unit>
        <trans-unit id="fef004bb30a4e0c238ab2b8425780e54d9f658d4" translate="yes" xml:space="preserve">
          <source>The main reason for using inheritance is not as a form of composition - it is so you can get polymorphic behaviour. If you don't need polymorphism, you probably should not be using inheritance.</source>
          <target state="translated">La razón principal para usar la herencia no es como una forma de composición-es para que puedas obtener un comportamiento polimórfico.Si no necesitas polimorfismo,probablemente no deberías usar la herencia.</target>
        </trans-unit>
        <trans-unit id="eb4e58f56ade41db120e0e321541a267008d9df9" translate="yes" xml:space="preserve">
          <source>The tight coupling provided by inheritance makes the implementation of a subclass very bound up with the implementation of a super class that any change in the parent implementation will force the sub class to change.</source>
          <target state="translated">El estrecho acoplamiento proporcionado por la herencia hace que la implementación de una subclase esté muy ligada a la implementación de una superclase que cualquier cambio en la implementación de los padres obligará a la subclase a cambiar.</target>
        </trans-unit>
        <trans-unit id="c6e1071aed30be94da0e2cdf87f2e045c58cf0cd" translate="yes" xml:space="preserve">
          <source>Then there are two ways to design an aircraft class.</source>
          <target state="translated">Entonces hay dos maneras de diseñar una clase de avión.</target>
        </trans-unit>
        <trans-unit id="1377e93559cb9cad4550161694e59ceef28236fd" translate="yes" xml:space="preserve">
          <source>Then, I write the Set of integers as a subclass of the List of integers:</source>
          <target state="translated">Entonces,escribo el Conjunto de números enteros como una subclase de la Lista de números enteros:</target>
        </trans-unit>
        <trans-unit id="ba41722cdbc379b118c4e701663ebf832365813b" translate="yes" xml:space="preserve">
          <source>There are downsides of composition, though. If you skip inheritance altogether and only focus on composition, you will notice that you often have to write a couple of extra code lines that weren't necessary if you had used inheritance. You are also sometimes forced to repeat yourself and this violates the &lt;em&gt;DRY Principle&lt;/em&gt; (DRY = Don't Repeat Yourself). Also composition often requires delegation, and a method is just calling another method of another object with no other code surrounding this call. Such &quot;double method calls&quot; (which may easily extend to triple or quadruple method calls and even farther than that) have much worse performance than inheritance, where you simply inherit a method of your parent. Calling an inherited method may be equally fast as calling a non-inherited one, or it may be slightly slower, but is usually still faster than two consecutive method calls.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Sin embargo, hay desventajas en la composici&amp;oacute;n. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si omite la herencia por completo y solo se enfoca en la composici&amp;oacute;n, notar&amp;aacute; que a menudo tiene que escribir un par de l&amp;iacute;neas de c&amp;oacute;digo adicionales que no ser&amp;iacute;an necesarias si hubiera utilizado la herencia. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;A veces tambi&amp;eacute;n se ve obligado a repetir y esto viola el &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Principio DRY&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(SECO = No te repitas). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Adem&amp;aacute;s, la composici&amp;oacute;n a menudo requiere delegaci&amp;oacute;n, y un m&amp;eacute;todo simplemente llama a otro m&amp;eacute;todo de otro objeto sin ning&amp;uacute;n otro c&amp;oacute;digo que rodea esta llamada. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Estas &quot;llamadas de m&amp;eacute;todo doble&quot; (que pueden extenderse f&amp;aacute;cilmente a llamadas de m&amp;eacute;todo triple o cu&amp;aacute;druple e incluso m&amp;aacute;s all&amp;aacute; de eso) tienen un rendimiento mucho peor que la herencia, donde simplemente hereda un m&amp;eacute;todo de sus padres. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Llamar a un m&amp;eacute;todo heredado puede ser tan r&amp;aacute;pido como llamar a uno no heredado, o puede ser un poco m&amp;aacute;s lento, pero generalmente es a&amp;uacute;n m&amp;aacute;s r&amp;aacute;pido que dos llamadas a m&amp;eacute;todos consecutivos.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="88dbe40d0ed3ede68edda71ef3030a4c38686ece" translate="yes" xml:space="preserve">
          <source>There are two benefits of inheritance: &lt;a href=&quot;https://www.cs.princeton.edu/courses/archive/fall98/cs441/mainus/node12.html&quot;&gt;subtyping and subclassing&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Hay dos beneficios de la herencia: &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://www.cs.princeton.edu/courses/archive/fall98/cs441/mainus/node12.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;subtipificaci&amp;oacute;n y subclasificaci&amp;oacute;n.&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b9613a336cd64521f866d933e120f5f900e231b8" translate="yes" xml:space="preserve">
          <source>There is nothing bad in using reason 1, it is very good thing to have a solid interface on your objects. This can be done using composition or with inheritance, no problem - if this interface is simple and does not change. Usually inheritance is quite effective here.</source>
          <target state="translated">No hay nada malo en usar la razón 1,es muy bueno tener una interfaz sólida en tus objetos.Esto se puede hacer usando la composición o con la herencia,no hay problema-si esta interfaz es simple y no cambia.Normalmente la herencia es bastante efectiva aquí.</target>
        </trans-unit>
        <trans-unit id="2ff1e38501fc05dc5ab2089683a417fc9d8ae800" translate="yes" xml:space="preserve">
          <source>These two ways can live together just fine and actually support each other.</source>
          <target state="translated">Estas dos formas pueden vivir juntas muy bien y apoyarse mutuamente.</target>
        </trans-unit>
        <trans-unit id="96a0b8fbc97ccd7232afaf128e1f72ba9c64d8fe" translate="yes" xml:space="preserve">
          <source>Think of containment as a &lt;strong&gt;has a&lt;/strong&gt; relationship. A car &quot;has an&quot; engine, a person &quot;has a&quot; name, etc.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Piense en la contenci&amp;oacute;n como en &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;una&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; relaci&amp;oacute;n. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Un autom&amp;oacute;vil &quot;tiene un&quot; motor, una persona &quot;tiene un&quot; nombre, etc.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8b6ec4f6260ad4a41e813b5819357d4fdd59cd6e" translate="yes" xml:space="preserve">
          <source>Think of inheritance as an &lt;strong&gt;is a&lt;/strong&gt; relationship. A car &quot;is a&quot; vehicle, a person &quot;is a&quot; mammal, etc.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Piense en la herencia como una &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;es una&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; relaci&amp;oacute;n. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Un autom&amp;oacute;vil &quot;es un&quot; veh&amp;iacute;culo, una persona &quot;es un&quot; mam&amp;iacute;fero, etc.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="66d70c1014e5da803fb71e6a40877d96f60ee637" translate="yes" xml:space="preserve">
          <source>This encourages the use of classes. Inheritance is one of the three tenets of OO design (inheritance, polymorphism, encapsulation).</source>
          <target state="translated">Esto fomenta el uso de las clases.La herencia es uno de los tres principios del diseño de OO (herencia,polimorfismo,encapsulación).</target>
        </trans-unit>
        <trans-unit id="02d27b966f445c927c12a951352c5a2ee16cc24d" translate="yes" xml:space="preserve">
          <source>This example will work fine, however, what if Person and Employee both declared &lt;code&gt;Title&lt;/code&gt;? Should Manager.Title return &quot;Manager of Operations&quot; or &quot;Mr.&quot;? Under composition this ambiguity is better handled:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Este ejemplo funcionar&amp;aacute; bien, sin embargo, &amp;iquest;qu&amp;eacute; pasa si la Persona y el Empleado declararon el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Title&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iquest;Deber&amp;iacute;a Manager.Title devolver &quot;Manager of Operations&quot; o &quot;Mr.&quot;? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Bajo composici&amp;oacute;n, esta ambig&amp;uuml;edad se maneja mejor:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bdb26a327b7e7a1f89230942d7086df40a2044bb" translate="yes" xml:space="preserve">
          <source>This is a classic example of an improper use of inheritance. Use composition in this case.</source>
          <target state="translated">Este es un ejemplo clásico de un uso inadecuado de la herencia.Utilice la composición en este caso.</target>
        </trans-unit>
        <trans-unit id="892eb23b0e64d101eac60b59156102e0dc8377de" translate="yes" xml:space="preserve">
          <source>This is called the &lt;a href=&quot;https://en.wikipedia.org/wiki/Circle-ellipse_problem&quot;&gt;Circle-Ellipse problem&lt;/a&gt;, which really isn't a problem, just a clear proof that the first test alone isn't enough to conclude that inheritance is possible. In particular, this example highlights that derived classes should &lt;em&gt;extend&lt;/em&gt; the functionality of base classes, never &lt;em&gt;restrict&lt;/em&gt; it. Otherwise, the base class couldn't be used polymorphically.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esto se llama el &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Circle-ellipse_problem&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;problema Circle-Ellipse&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , que realmente no es un problema, solo una prueba clara de que la primera prueba por s&amp;iacute; sola no es suficiente para concluir que la herencia es posible. En particular, este ejemplo resalta que las clases derivadas deber&amp;iacute;an &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;extender&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; la funcionalidad de las clases base, nunca &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;restringirla&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . De lo contrario, la clase base no podr&amp;iacute;a usarse polim&amp;oacute;rficamente.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="29c1a3f007444e788c520debfe97ad582556ee1e" translate="yes" xml:space="preserve">
          <source>This is inheritance at work. The Employee &quot;is a&quot; Person or inherits from Person. All inheritance relationships are &quot;is-a&quot; relationships. Employee also shadows the Title property from Person, meaning Employee.Title will return the Title for the Employee not the Person.</source>
          <target state="translated">Esto es una herencia en el trabajo.El empleado &quot;es&quot; una persona o hereda de la persona.Todas las relaciones de herencia son relaciones &quot;es-a&quot;.El Empleado también ensombrece la propiedad del Título de la Persona,lo que significa que el Título del Empleado devolverá el Título para el Empleado no para la Persona.</target>
        </trans-unit>
        <trans-unit id="4bfff73a25d5d08232eb54847cfc587269729bfb" translate="yes" xml:space="preserve">
          <source>To address this question from a different perspective for newer programmers:</source>
          <target state="translated">Para abordar esta cuestión desde una perspectiva diferente para los nuevos programadores:</target>
        </trans-unit>
        <trans-unit id="948c2e5682be0db8695bdb1c215662f9b744cd72" translate="yes" xml:space="preserve">
          <source>To give another example, think about the abstract data types, Set of integers and List of integers, the values they can hold are restricted to integers. They both support a set of methods, like add(newValue) and size(). And they both have different properties (class invariant), Sets does not allow duplicates while List does allow duplicates (of course there are other properties that they both satisfy).</source>
          <target state="translated">Para dar otro ejemplo,piense en los tipos de datos abstractos,Conjunto de números enteros y Lista de números enteros,los valores que pueden contener están restringidos a números enteros.Ambos soportan un conjunto de métodos,como add(newValue)y size().Y ambos tienen diferentes propiedades (invariante de clase),Sets no permite duplicados mientras que List sí los permite (por supuesto hay otras propiedades que ambos satisfacen).</target>
        </trans-unit>
        <trans-unit id="8dfe69d77cbdafc2b0a714261fbe7a897520f08c" translate="yes" xml:space="preserve">
          <source>To subtype is to conform to a type signature, this means composition has always to expose no less amount of APIs of the type. Now the trade offs kick in:</source>
          <target state="translated">Subtipo es conformarse a una firma de tipo,esto significa que la composición siempre tiene que exponer no menos cantidad de API del tipo.Ahora los intercambios se ponen en marcha:</target>
        </trans-unit>
        <trans-unit id="d54b82edafd720a780f59eaceb3e260ef8e20abd" translate="yes" xml:space="preserve">
          <source>To understand why &quot;&lt;em&gt;prefer&lt;/em&gt; composition over inheritance&quot;, we need first get back the assumption omitted in this shortened idiom.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para entender por qu&amp;eacute; &quot; &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;preferir la&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; composici&amp;oacute;n a la herencia&quot;, primero necesitamos recuperar la suposici&amp;oacute;n omitida en este lenguaje abreviado.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="30b841e646c940730a92f3a6fde8ddbb4fa7b8a7" translate="yes" xml:space="preserve">
          <source>Unfortunately, the above test alone is not reliable. Use the following instead:</source>
          <target state="translated">Desafortunadamente,la prueba anterior no es fiable por sí sola.Utilice lo siguiente en su lugar:</target>
        </trans-unit>
        <trans-unit id="902e9220c7e8e78a1688a9c75dc574c63e2d44d9" translate="yes" xml:space="preserve">
          <source>We discover that for just one of the classes that inherits from our base class we want the base class to behave a little differently. So now we go back and tinker with our base class, maybe adding some virtual methods, or even worse, some code that says, &quot;If I'm inherited type A, do this, but if I'm inherited type B, do that.&quot; That's bad for lots of reasons. One is that every time we change the base class, we're effectively changing every inherited class. So we're really changing class A, B, C, and D because we need a slightly different behavior in class A. As careful as we think we are, we might break one of those classes for reasons that have nothing to do with those classes.</source>
          <target state="translated">Descubrimos que por una sola de las clases que heredamos de nuestra clase base queremos que la clase base se comporte de manera un poco diferente.Así que ahora volvemos y jugueteamos con nuestra clase base,tal vez añadiendo algunos métodos virtuales,o incluso peor,algún código que diga,&quot;Si he heredado el tipo A,haz esto,pero si he heredado el tipo B,haz aquello&quot;.Eso es malo por muchas razones.Una es que cada vez que cambiamos la clase base,estamos efectivamente cambiando cada clase heredada.Así que realmente estamos cambiando la clase A,B,C y D porque necesitamos un comportamiento ligeramente diferente en la clase A.Por muy cuidadosos que creamos que somos,podríamos romper una de esas clases por razones que no tienen nada que ver con esas clases.</target>
        </trans-unit>
        <trans-unit id="6227a652268bd11d1b6cbf24ac145873c6174ca7" translate="yes" xml:space="preserve">
          <source>We discover that there are some other functions that we want our classes to have. If the way that we add functionality to classes is through inheritance, we have to decide - do we add it to the existing base class, even though not every class that inherits from it needs that functionality? Do we create another base class? But what about classes that already inherit from the other base class?</source>
          <target state="translated">Descubrimos que hay otras funciones que queremos que tengan nuestras clases.Si la forma en que añadimos funcionalidad a las clases es a través de la herencia,tenemos que decidir:¿la añadimos a la clase base existente,aunque no todas las clases que heredan de ella necesitan esa funcionalidad? ¿Creamos otra clase base? ¿Pero qué pasa con las clases que ya heredan de la otra clase base?</target>
        </trans-unit>
        <trans-unit id="e2615b408bdb1e0ba98c485bf5cdf2441399a639" translate="yes" xml:space="preserve">
          <source>We might know why we decided to make all of these classes inherit from each other, but it might not (probably won't) make sense to someone else who has to maintain our code. We might force them into a difficult choice - do I do something really ugly and messy to make the change I need (see the previous bullet point) or do I just rewrite a bunch of this.</source>
          <target state="translated">Podríamos saber por qué decidimos hacer que todas estas clases se heredaran entre sí,pero podría no tener (probablemente no lo tendrá)sentido para alguien más que tiene que mantener nuestro código.Podríamos forzarlos a tomar una decisión difícil:¿hago algo realmente feo y desordenado para hacer el cambio que necesito (ver el punto anterior)o simplemente reescribo un montón de esto.</target>
        </trans-unit>
        <trans-unit id="0e5823e905840f2d1a0b16c41e23924b6b4651bd" translate="yes" xml:space="preserve">
          <source>What do you think about this approach?</source>
          <target state="translated">¿Qué piensas de este enfoque?</target>
        </trans-unit>
        <trans-unit id="c1756bd1b9efd32a1d214b99f06d2f7a4f7d669c" translate="yes" xml:space="preserve">
          <source>When can you use inheritance?</source>
          <target state="translated">¿Cuándo puedes usar la herencia?</target>
        </trans-unit>
        <trans-unit id="d970be0b61d6aad200582d59cc11f107fad3f0af" translate="yes" xml:space="preserve">
          <source>When should you use inheritance?</source>
          <target state="translated">¿Cuándo se debe usar la herencia?</target>
        </trans-unit>
        <trans-unit id="428208f05c644812526e760213d893a9e0d85b4f" translate="yes" xml:space="preserve">
          <source>When we say that the number 5 is of type integer, we are stating that 5 belongs to a set of possible values (as an example, see the possible values for the Java primitive types). We are also stating that there is a valid set of methods I can perform on the value like addition and subtraction. And finally we are stating that there are a set of properties that are always satisfied, for example, if I add the values 3 and 5, I will get 8 as a result.</source>
          <target state="translated">Cuando decimos que el número 5 es de tipo entero,estamos afirmando que el 5 pertenece a un conjunto de valores posibles (como ejemplo,ver los valores posibles para los tipos primitivos de Java).También estamos afirmando que hay un conjunto válido de métodos que puedo realizar sobre el valor como la suma y la resta.Y finalmente estamos afirmando que hay un conjunto de propiedades que siempre se satisfacen,por ejemplo,si sumo los valores 3 y 5,obtendré 8 como resultado.</target>
        </trans-unit>
        <trans-unit id="09af7bb65f1be8d511ca24f115a8de295966a370" translate="yes" xml:space="preserve">
          <source>When you have an &lt;strong&gt;is-a&lt;/strong&gt; relation between two classes (example dog is a canine), you go for inheritance.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cuando tienes &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;una&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; relaci&amp;oacute;n &lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;is-a&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; entre dos clases (por ejemplo, el perro es un canino), optas por la herencia.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ed0055b1a10a69cdf90f2c9f52386c2e6f796966" translate="yes" xml:space="preserve">
          <source>When you want to &quot;copy&quot;/Expose the base class' API, you use inheritance. When you only want to &quot;copy&quot; functionality, use delegation.</source>
          <target state="translated">Cuando quieres &quot;copiar &quot;Exponer la clase base' API,usas la herencia.Cuando sólo quieres &quot;copiar&quot; la funcionalidad,usa la delegación.</target>
        </trans-unit>
        <trans-unit id="68d2706b23183a0d7d52371d8dfbf231a40a8ff7" translate="yes" xml:space="preserve">
          <source>Whether the base class can be instantiated. That is, whether the base class can be non-abstract.  If it can be non-abstract I usually prefer composition</source>
          <target state="translated">Si la clase base puede ser instanciada.Es decir,si la clase base puede ser no abstracta.Si puede ser no abstracta,normalmente prefiero la composición</target>
        </trans-unit>
        <trans-unit id="a606c7a3b25e33c0493da4afddb01b3c57747671" translate="yes" xml:space="preserve">
          <source>Which class design is better?</source>
          <target state="translated">¿Qué diseño de clase es mejor?</target>
        </trans-unit>
        <trans-unit id="b1791d8464070d229c878a59d0498e929cd34625" translate="yes" xml:space="preserve">
          <source>While in short words I would agree with &quot;Prefer composition over inheritance&quot;, very often for me it sounds like &quot;prefer potatoes over coca-cola&quot;. There are places for inheritance and places for composition. You need to understand difference, then this question will disappear. What it really means for me is &quot;if you are going to use inheritance - think again, chances are you need composition&quot;.</source>
          <target state="translated">Mientras que en palabras cortas estaría de acuerdo con &quot;Preferir la composición a la herencia&quot;,muy a menudo para mí suena como &quot;preferir las patatas a la coca-cola&quot;.Hay lugares para la herencia y lugares para la composición.Necesitas entender la diferencia,entonces esta pregunta desaparecerá.Lo que realmente significa para mí es &quot;si vas a usar la herencia,piénsalo de nuevo,es probable que necesites la composición&quot;.</target>
        </trans-unit>
        <trans-unit id="027a582c02cb725a52172159b5c1aa8f207673db" translate="yes" xml:space="preserve">
          <source>Why prefer composition over inheritance?</source>
          <target state="translated">¿Por qué preferir la composición a la herencia?</target>
        </trans-unit>
        <trans-unit id="28ebe126ef18993fcdc302fb140fe416bf4b44bd" translate="yes" xml:space="preserve">
          <source>Why prefer composition over inheritance?  What trade-offs are there for each approach?  When should you choose inheritance over composition?</source>
          <target state="translated">¿Por qué preferir la composición a la herencia? ¿Qué compensaciones hay para cada enfoque? ¿Cuándo debería elegir la herencia en lugar de la composición?</target>
        </trans-unit>
        <trans-unit id="d77989c1e3c0e0ace735631597dc367ffdfa6f32" translate="yes" xml:space="preserve">
          <source>Why?</source>
          <target state="translated">Why?</target>
        </trans-unit>
        <trans-unit id="8a5494e3346ea1f03b16a7e69409337675dba6a2" translate="yes" xml:space="preserve">
          <source>With all the undeniable benefits provided by inheritance, here's some of its disadvantages.</source>
          <target state="translated">Con todos los innegables beneficios que proporciona la herencia,he aquí algunas de sus desventajas.</target>
        </trans-unit>
        <trans-unit id="187b043aa54e89394b8d77a7ea3e521335e23aa7" translate="yes" xml:space="preserve">
          <source>With inheritance, you can define/modify/extend a capability</source>
          <target state="translated">Con la herencia,se puede definir la ampliación de una capacidad</target>
        </trans-unit>
        <trans-unit id="c909e0bb35edebdb81f6b7167ac08348fb47388c" translate="yes" xml:space="preserve">
          <source>With the above trade offs in mind, we hence &lt;em&gt;prefer&lt;/em&gt; composition over inheritance. Yet for tightly related classes, i.e. when implicit code reuse really make benefits, or the magic power of open recursion is desired, inheritance shall be the choice.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Con las compensaciones anteriores en mente, por lo tanto, &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;preferimos la&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; composici&amp;oacute;n sobre la herencia. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Sin embargo, para clases estrechamente relacionadas, es decir, cuando la reutilizaci&amp;oacute;n impl&amp;iacute;cita del c&amp;oacute;digo realmente genera beneficios, o si se desea el poder m&amp;aacute;gico de la recursi&amp;oacute;n abierta, la herencia ser&amp;aacute; la elecci&amp;oacute;n.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ca54eb74c9e8cc45b664e45d5cd2d030838c910b" translate="yes" xml:space="preserve">
          <source>With the two benefits comes two different purposes for doing inheritance: subtyping oriented and code reuse oriented.</source>
          <target state="translated">Con los dos beneficios vienen dos propósitos diferentes para hacer la herencia:orientado a la subtipificación y orientado a la reutilización del código.</target>
        </trans-unit>
        <trans-unit id="c6f46fcaef29ad747c9c053a5250628a59ec8937" translate="yes" xml:space="preserve">
          <source>You can't change the implementation inherited from super classes at runtime (obviously because inheritance is defined at compile time).</source>
          <target state="translated">No se puede cambiar la implementación heredada de las superclases en tiempo de ejecución (obviamente porque la herencia se define en tiempo de compilación).</target>
        </trans-unit>
        <trans-unit id="c841ca97d91f3a90e4a981be8a8e3eaf9eca4bee" translate="yes" xml:space="preserve">
          <source>You have many classes with &lt;strong&gt;same interface&lt;/strong&gt; and you want to save time writing them</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tienes muchas clases con la &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;misma interfaz&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y quieres ahorrar tiempo escribi&amp;eacute;ndolas&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4f7027c12ff7351a14aec7ceaf153b91f1cd5a76" translate="yes" xml:space="preserve">
          <source>You have to use same Base Class for each object</source>
          <target state="translated">Tienes que usar la misma clase base para cada objeto</target>
        </trans-unit>
        <trans-unit id="db9d5b717fd3a0428e874979b657d64399fb0932" translate="yes" xml:space="preserve">
          <source>You may have noticed that most OO languages don't allow multiple inheritance. While there are a couple of cases where multiple inheritance can really buy you something, but those are rather exceptions than the rule. Whenever you run into a situation where you think &quot;multiple inheritance would be a really cool feature to solve this problem&quot;, you are usually at a point where you should re-think inheritance altogether, since even it may require a couple of extra code lines, a solution based on composition will usually turn out to be much more elegant, flexible and future proof.</source>
          <target state="translated">Habrás notado que la mayoría de los idiomas OO no permiten la herencia múltiple.Aunque hay un par de casos en los que la herencia múltiple puede realmente comprar algo,pero esas son más bien excepciones que la regla.Siempre que te encuentras con una situación en la que piensas que &quot;la herencia múltiple sería una característica realmente genial para resolver este problema&quot;,normalmente estás en un punto en el que deberías replantearte la herencia por completo,ya que incluso puede requerir un par de líneas de código extra,una solución basada en la composición normalmente resultará mucho más elegante,flexible y a prueba de futuro.</target>
        </trans-unit>
        <trans-unit id="6461c7d3d8ea98d44e07224509d8188c5fd65616" translate="yes" xml:space="preserve">
          <source>You need to have a look at &lt;strong&gt;&lt;a href=&quot;http://web.archive.org/web/20110722014513/http://www.objectmentor.com/resources/articles/lsp.pdf&quot;&gt;The Liskov Substitution Principle&lt;/a&gt;&lt;/strong&gt; in Uncle Bob's &lt;a href=&quot;http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod&quot;&gt;SOLID&lt;/a&gt; principles of class design. :)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Debes echar un vistazo al &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;a href=&quot;http://web.archive.org/web/20110722014513/http://www.objectmentor.com/resources/articles/lsp.pdf&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Principio de sustituci&amp;oacute;n de Liskov&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en los &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;principios &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;S&amp;Oacute;LIDOS&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; de dise&amp;ntilde;o de clase del &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;t&amp;iacute;o Bob &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;:)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="365fd5a8c9d353531398ff13dddbb1a9cd04bd1f" translate="yes" xml:space="preserve">
          <source>You need to modify the private variables, which can not be public in any case</source>
          <target state="translated">Hay que modificar las variables privadas,que no pueden ser públicas en ningún caso</target>
        </trans-unit>
        <trans-unit id="debc0fa37d0f792340965981a5a035cc009e22ae" translate="yes" xml:space="preserve">
          <source>You should prefer potatoes over coca cola when you want to eat, and coca cola over potatoes when you want to drink.</source>
          <target state="translated">Deberías preferir las patatas a la coca cola cuando quieras comer,y la coca cola a las patatas cuando quieras beber.</target>
        </trans-unit>
        <trans-unit id="70a3f516785b8d2c0cef4b9bfa90e997156cdb0e" translate="yes" xml:space="preserve">
          <source>Your base class breaks encapsulation by exposing implementation details to subclasses in the form of protected members. This makes your system rigid and fragile. The more tragic flaw however is the new subclass brings with it all the baggage and opinion of the inheritance chain.</source>
          <target state="translated">Su clase base rompe la encapsulación exponiendo los detalles de implementación a subclases en forma de miembros protegidos.Esto hace que tu sistema sea rígido y frágil.Sin embargo,la falla más trágica es que la nueva subclase trae consigo todo el bagaje y la opinión de la cadena de herencia.</target>
        </trans-unit>
        <trans-unit id="a7b6ec9ba3ba6cb389d0be77dde1a3a2b1b3c784" translate="yes" xml:space="preserve">
          <source>a bar is a foo</source>
          <target state="translated">un bar es un foo</target>
        </trans-unit>
        <trans-unit id="321619efe153470d82ced208ab3b5924f96e157d" translate="yes" xml:space="preserve">
          <source>a bar is a foo, &lt;strong&gt;AND&lt;/strong&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;un bar es un foo, &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Y&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6e151551bf5c2dbfb47e6ba04d1cb6d6f9881994" translate="yes" xml:space="preserve">
          <source>all of this applies less to small projects than large ones, and less
  to private classes than public ones</source>
          <target state="translated">todo esto se aplica menos a los pequeños proyectos que a los grandes,y menos a las clases privadas que a las públicas</target>
        </trans-unit>
        <trans-unit id="7704fccffa58783a84da4eb8c0166fdf191a3fdd" translate="yes" xml:space="preserve">
          <source>an engine with wings. But what if I wanted to change</source>
          <target state="translated">un motor con alas.Pero,¿y si quisiera cambiar</target>
        </trans-unit>
        <trans-unit id="8dde7711f9ea3766728a62f96c6515f11ba48445" translate="yes" xml:space="preserve">
          <source>and change them to rotary wings on the fly. It's essentially</source>
          <target state="translated">y cambiarlos por alas rotativas sobre la marcha.Es esencialmente</target>
        </trans-unit>
        <trans-unit id="729852eb34a3e850ade763665925935482786102" translate="yes" xml:space="preserve">
          <source>bars can do everything that foos can do.</source>
          <target state="translated">los bares pueden hacer todo lo que los foos pueden hacer.</target>
        </trans-unit>
        <trans-unit id="6b17efef870e73ac5a6927dfab46f89a43147e20" translate="yes" xml:space="preserve">
          <source>e.g. A Bird may need only the fly behavior of an Airplane. In this case, it makes sense to extract it out as an interface / class / both and make it a member of both classes.</source>
          <target state="translated">Por ejemplo,un pájaro puede necesitar sólo el comportamiento de vuelo de un avión.En este caso,tiene sentido extraerlo como una clase de interfaz ambos y hacerlo miembro de ambas clases.</target>
        </trans-unit>
        <trans-unit id="886bf306e5453e891f922ec6a0c0d688fc89e7b2" translate="yes" xml:space="preserve">
          <source>e.g. A Cessna biplane will expose the complete interface of an airplane, if not more. So that makes it fit to derive from Airplane.</source>
          <target state="translated">Por ejemplo,un biplano Cessna expondrá la interfaz completa de un avión,si no más.Así que eso lo hace apto para derivar de Avión.</target>
        </trans-unit>
        <trans-unit id="696ad70d6976b57faf133b6ee5ef5b78578b56f1" translate="yes" xml:space="preserve">
          <source>e.g. If  &lt;em&gt;Car&lt;/em&gt; contains &lt;em&gt;Vehicle&lt;/em&gt; and if you have to get price of the &lt;em&gt;Car&lt;/em&gt;, which has been defined in &lt;em&gt;Vehicle&lt;/em&gt;, your code will be like this</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por ejemplo, si el &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;autom&amp;oacute;vil&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; contiene el &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;veh&amp;iacute;culo&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y si tiene que obtener el precio del &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;autom&amp;oacute;vil&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , que se ha definido en el &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;veh&amp;iacute;culo&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , su c&amp;oacute;digo ser&amp;aacute; as&amp;iacute;&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2c3a0ef6ef4316e6e5d1c614dce6be8faad1cb40" translate="yes" xml:space="preserve">
          <source>i.e.</source>
          <target state="translated">i.e.</target>
        </trans-unit>
        <trans-unit id="1fc4018d629a16d759e998a6c95e3a4757b18a87" translate="yes" xml:space="preserve">
          <source>implementation (for code reuse)</source>
          <target state="translated">implementación (para la reutilización del código)</target>
        </trans-unit>
        <trans-unit id="8242e2b420f05d62490ce28c67966e458a29c56a" translate="yes" xml:space="preserve">
          <source>inheritance is probably the worst form of coupling you can have</source>
          <target state="translated">la herencia es probablemente la peor forma de acoplamiento que puedes tener</target>
        </trans-unit>
        <trans-unit id="f2804e2e271f82c68b66f986da5df262ee4cb967" translate="yes" xml:space="preserve">
          <source>interface (for polymorphism)</source>
          <target state="translated">interfaz (para el polimorfismo)</target>
        </trans-unit>
        <trans-unit id="13ac262839d95d773d2a3d28f3999d812e21769b" translate="yes" xml:space="preserve">
          <source>properties, or I redesign &lt;code&gt;Aircraft&lt;/code&gt; as:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;propiedades, o redise&amp;ntilde;o &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Aircraft&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; como:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8823f52bf571c1ac1f5e036a349bdba206f867f6" translate="yes" xml:space="preserve">
          <source>the engine on the fly as well?</source>
          <target state="translated">el motor sobre la marcha también?</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
