<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/49002">
    <body>
      <group id="49002">
        <trans-unit id="19e4a51166cdfb3ff9a0baa3e1422bffe26ed5b1" translate="yes" xml:space="preserve">
          <source>(a fragment from: &lt;a href=&quot;http://www.copypasteisforword.com/notes/use-inheritance-properly&quot;&gt;use inheritance properly&lt;/a&gt;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（からのフラグメント：&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.copypasteisforword.com/notes/use-inheritance-properly&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;継承を適切に使用してください&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3cf3c58c0ff1ab151c796159d9fba6934da34ccd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://en.wikipedia.org/wiki/Composition_over_inheritance&quot;&gt;Wikipedia&lt;/a&gt; offers a nice overview of the topic being discussed in this question.</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/Composition_over_inheritance&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ウィキペディア&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、この質問で議論されているトピックの素晴らしい概要を提供します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="84d22270db5c3c635539d2d8ae442c8752d70e66" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Car is a Vehicle&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;車は乗り物&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="bc60060a7f66a3c1423f56735ed1401baf4fbfea" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Classes get heavier&lt;/em&gt; - you don't necessarily know what work your superclass is doing in its constructor, or how much memory it's going
  to use. So constructing some innocent would-be lightweight object can
  be far more expensive than you think, and this may change over time if
  the superclass evolves</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;クラスは重くなり&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。スーパークラスがコンストラクターで実行している作業や、使用するメモリの量が必ずしもわかっているとは限りません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、無害な軽量オブジェクトを構築することは、あなたが考えるよりもはるかに高価になる可能性があり、スーパークラスが進化する場合、これは時間とともに変化する可能性があります&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bd3b79af469cff75a228b80ca85b2a0c9d81150b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Innocent acts can have unexpected results&lt;/em&gt; - The classic example of this is calls to overridable methods from the superclass
  constructor, before the subclasses instance fields have been
  initialized. In a perfect world, nobody would ever do that. This is
  not a perfect world.</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;無邪気な行為は予期しない結果をもたらす可能性があります&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; -この典型的な例は、サブクラスのインスタンスフィールドが初期化される前の、スーパークラスコンストラクターからのオーバーライド可能なメソッドの呼び出しです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;完璧な世界では、誰もそれをしません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは完璧な世界ではありません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2d09d2c9a3f2c14f6cb59dcf58a0f00d467588cc" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;It encourages an explosion of subclasses&lt;/em&gt;. Classloading costs time, more classes costs memory. This may be a non-issue until you're
  dealing with an app on the scale of NetBeans, but there, we had real
  issues with, for example, menus being slow because the first display
  of a menu triggered massive class loading. We fixed this by moving to
  more declarative syntax and other techniques, but that cost time to
  fix as well.</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サブクラスの爆発的な増加を助長し&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;クラスローディングには時間がかかり、クラスが増えるとメモリが消費されます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;NetBeansの規模でアプリを扱うまでは問題にならないかもしれませんが、メニューの最初の表示が大量のクラスの読み込みをトリガーしたためにメニューが遅くなるなど、実際の問題がありました。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;より宣言的な構文やその他の手法に移行することでこれを修正しましたが、修正にも時間がかかりました。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="99b00c9cf8e683fccb25eac102b209f855086a6e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;It makes it harder to change things later&lt;/em&gt; - if you've made a class public, swapping the superclass is going to break subclasses -
  it's a choice which, once you've made the code public, you're married
  to. So if you're not altering the real functionality to your
  superclass, you get much more freedom to change things later if you
  use, rather than extend the thing you need. Take, for example,
  subclassing JPanel - this is usually wrong; and if the subclass is
  public somewhere, you never get a chance to revisit that decision. If
  it's accessed as JComponent getThePanel() , you can still do it (hint:
  expose models for the components within as your API).</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;後で変更するのが難しくなり&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。クラスをパブリックにした場合、スーパークラスをスワップするとサブクラスが壊れます。コードをパブリックにすると、結婚することになります。したがって、実際の機能をスーパークラスに変更しない場合は、必要なものを拡張するよりも、後で使用するほうがはるかに自由に変更できます。たとえば、JPanelをサブクラス化するとします-これは通常間違っています。そして、サブクラスがどこかで公開されている場合、その決定を再訪する機会はありません。 JComponent getThePanel（）としてアクセスした場合でも、それを行うことができます（ヒント：内のコンポーネントのモデルをAPIとして公開します）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a9fea8abbd67148f9aaad86c2cc91e5b50984e84" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;It offers perverse temptations for subclassers to make assumptions about order of method calls and such&lt;/em&gt; - such assumptions tend not to
  be stable if the superclass may evolve over time. See also &lt;a href=&quot;http://www.javalobby.org/forums/thread.jspa?threadID=16036&amp;amp;messageID=91819530#91819530&quot;&gt;my toaster
  and coffee pot analogy&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは、サブクラス作成者がメソッド呼び出しの順序などについて仮定を立てるというひねくれた誘惑を提供します&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。スーパークラスが時間とともに進化する可能性がある場合、そのような仮定は安定しない傾向があります。&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.javalobby.org/forums/thread.jspa?threadID=16036&amp;amp;messageID=91819530#91819530&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;トースターとコーヒーポットの例え&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;もご覧ください&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1f2d1a02f1330761039247ff2ac486fa4bcd2963" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Object hierarchies don't scale (or making them scale later is much harder than planning ahead)&lt;/em&gt; - this is the classic &quot;too many layers&quot;
  problem. I'll go into this below, and how the AskTheOracle pattern can
  solve it (though it may offend OOP purists).</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;オブジェクト階層はスケーリングされません（または後でスケーリングすること&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;事前に計画するよりもはるかに困難です）。&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは、古典的な「層が多すぎる」問題です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;以下でこれについて説明し、AskTheOracleパターンがそれをどのように解決できるかを示します（ただし、OOPの純粋主義者を怒らせる可能性があります）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="de6ccea047149366a9dda9ed695b699d688314a5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Prefer composition over inheritance as it is more malleable / easy to modify later, but do not use a compose-always approach.&lt;/em&gt; With composition, it's easy to change behavior on the fly with Dependency Injection / Setters. Inheritance is more rigid as most languages do not allow you to derive from more than one type. So the goose is more or less cooked once you derive from TypeA.</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;継承よりも構成が優先されます。これは、より柔軟で、後で簡単に変更できるためです。ただし、常に作成する方法は使用しないでください。&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;構成では、依存性注入/セッターを使用して、動作をその場で簡単に変更できます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ほとんどの言語では複数の型からの派生が許可されていないため、継承はより厳格です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;TypeAから派生したガチョウは多かれ少なかれ調理されます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4308a41a321f00f54f99cdd2884e9094023fd662" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Truck is a Vehicle&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;トラックは乗り物&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f587fb9140a968f772a8162968129fa88e330b59" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Cons of Composition:&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;構成の短所：&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="790ced1c5a0bbe20b15223aa6a4e22337bfcd462" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Pros of Inheritance:&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;継承の長所：&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a69a0cc249ebb716c5b801c19b32afb8a98697dd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Because inheritance is a poor way of moving information&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;継承は情報を移動するための貧弱な方法だから&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="642f86d54fa53fe530b7fceb3af4325e550ae72b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Disadvantages of Inheritance:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;継承の短所：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="30e3ffdd81cf85d5a9b7fbf8f2b5ed8777d2cb4e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 1: Dog --&amp;gt; Animal&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;例1：犬-&amp;gt;動物&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="08d6fcd73932e2db1e487ea9c038b47cd04b4f4e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 2: Circle -/-&amp;gt; Ellipse&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;例2：円-/-&amp;gt;楕円&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="22d74f86d3cbdef89198b5678344bd3b330b51a8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;REFERENCE&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;REFERENCE&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f01e62217f11659bf6313a453455a96ddfecb964" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Subclassing&lt;/strong&gt; means implicit reuse of method implementations.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サブクラス化と&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、メソッド実装を暗黙的に再利用することです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="46f346af11e821ee7e1ce39993d2a8fb3fd69a7b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Subtyping&lt;/strong&gt; means conforming to a type (interface) signature, i.e. a set of APIs, and one can override part of the signature to achieve subtyping polymorphism.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サブタイピングと&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、タイプ（インターフェース）シグニチャー（つまり、APIのセット）に準拠することを意味し、シグニチャーの一部をオーバーライドして、サブタイピングのポリモーフィズムを実現できます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="133fbefb42fa53f06d9d810164f60ab910ebfa77" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Update:&lt;/strong&gt; Just came back to my answer and it seems now that it is incomplete without a specific mention of Barbara Liskov's &lt;a href=&quot;http://en.wikipedia.org/wiki/Liskov_substitution_principle&quot;&gt;Liskov Substitution Principle&lt;/a&gt; as a test for 'Should I be inheriting from this type?'</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;更新：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ちょうど私の答えに戻ってきましたが、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;「このタイプから継承する必要がありますか？」のテストとして、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Barbara Liskovの&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Liskov_substitution_principle&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Liskov Substitution Principle&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の具体的な言及がないと、それは不完全なよう&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5fe3b54cb63f0b09fd4abeb10b7c42f52993fc0c" translate="yes" xml:space="preserve">
          <source>@MatthieuM. says in &lt;a href=&quot;https://softwareengineering.stackexchange.com/questions/12439/code-smell-inheritance-abuse/12448#comment303759_12448&quot;&gt;https://softwareengineering.stackexchange.com/questions/12439/code-smell-inheritance-abuse/12448#comment303759_12448&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@MatthieuM。&lt;/font&gt;&lt;a href=&quot;https://softwareengineering.stackexchange.com/questions/12439/code-smell-inheritance-abuse/12448#comment303759_12448&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https://softwareengineering.stackexchange.com/questions/12439/code-smell-inheritance-abuse/12448#comment303759_12448で&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;言う&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a1d66bf495a38f7905720f390dbf27d3cd5934bd" translate="yes" xml:space="preserve">
          <source>A circle is an ellipse BUT circles can't do everything that ellipses can do. For example, circles can't stretch, while ellipses can. Therefore, the class &lt;code&gt;Circle&lt;/code&gt;&lt;strong&gt;cannot&lt;/strong&gt; inherit the class &lt;code&gt;Ellipse&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;円は楕円ですが、円は楕円ができることすべてを行うことはできません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;たとえば、円は伸縮できませんが、楕円は伸縮できます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、クラス&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Circle&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はクラス&lt;/font&gt; &lt;code&gt;Ellipse&lt;/code&gt; を&lt;font style=&quot;vertical-align: inherit;&quot;&gt;継承&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;できません&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ed02723917385f91dd310ca5a8a52e74215144aa" translate="yes" xml:space="preserve">
          <source>A dog is an animal AND dogs can do everything that animals can do (such as breathing, dying, etc.). Therefore, the class &lt;code&gt;Dog&lt;/code&gt;&lt;strong&gt;can&lt;/strong&gt; inherit the class &lt;code&gt;Animal&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;犬は動物であり、犬は動物ができるすべてのことを行うことができます（呼吸、死亡など）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、クラス&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Dog&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はクラス&lt;/font&gt; &lt;code&gt;Animal&lt;/code&gt; を&lt;font style=&quot;vertical-align: inherit;&quot;&gt;継承&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;でき&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="01287059a41e22e70d573f7784b74fea385c7a85" translate="yes" xml:space="preserve">
          <source>A much more complete and concrete &lt;a href=&quot;http://www.javalobby.org/forums/thread.jspa?forumID=61&amp;amp;threadID=16487#91822172&quot;&gt;answer from Tim Boudreau&lt;/a&gt; of Sun:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;http://www.javalobby.org/forums/thread.jspa?forumID=61&amp;amp;threadID=16487#91822172&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tim Boudreau&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; of Sun &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;からの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;より完全で具体的な&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;答え&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0ecfbd413e3b64a89620f4a0c3113ea12be77cd9" translate="yes" xml:space="preserve">
          <source>A rule of thumb I have heard is inheritance should be used when its a &quot;is-a&quot; relationship and composition when its a &quot;has-a&quot;. Even with that I feel that you should always lean towards composition because it eliminates a lot of complexity.</source>
          <target state="translated">私が聞いた経験則では、継承は &quot;is-a &quot;の関係のときに使用し、&quot;has-a &quot;のときには構成を使用するべきであるということです。それでさえも、複雑さの多くを排除できるので、常に構成に傾くべきだと感じています。</target>
        </trans-unit>
        <trans-unit id="7ba0c4f8f2f7998fd84e1b2e18671bab5f8dbd05" translate="yes" xml:space="preserve">
          <source>A simple way to make sense of this would be that inheritance should be used when you need an object of your class to have the same &lt;em&gt;interface&lt;/em&gt; as its parent class, so that it can thereby be treated as an object of the parent class (upcasting). Moreover, function calls on a derived class object would remain the same everywhere in code, but the specific method to call would be determined at runtime (i.e. the low-level &lt;em&gt;implementation&lt;/em&gt; differs, the high-level &lt;em&gt;interface&lt;/em&gt; remains the same).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これを理解する簡単な方法は、クラスのオブジェクトが&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;その親クラス&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と同じ&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;インターフェイス&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を持つ必要がある場合に継承を使用する必要があることです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これにより、それを親クラスのオブジェクトとして扱うことができます（アップキャスト） 。さらに、派生クラスオブジェクトの関数呼び出しはコードのどの部分でも同じですが、呼び出す特定のメソッドは実行時に決定されます（つまり、低レベルの&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;実装&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は異なり、高レベルの&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;インターフェイス&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は同じです）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="eaf4a40229fa15c4916233897eb3cd85732b5ca8" translate="yes" xml:space="preserve">
          <source>Also, I support @anon answer in &lt;a href=&quot;https://stackoverflow.com/questions/3351666/why-use-inheritance-at-all?lq=1&quot;&gt;Why use inheritance at all?&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;また、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3351666/why-use-inheritance-at-all?lq=1&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;なぜ継承を使用するのですか？&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8fcf41a9237c1dac7d08f4bbf45ff16fef75d4e1" translate="yes" xml:space="preserve">
          <source>An example of this is PHP without the use of classes (particularly before PHP5). All logic is encoded in a set of functions. You may include other files containing helper functions and so on and conduct your business logic by passing data around in functions. This can be very hard to manage as the application grows. PHP5 tries to remedy this by offering more object oriented design.</source>
          <target state="translated">その例として、クラスを使わないPHPがあります(特にPHP5以前)。すべてのロジックは、関数のセットでエンコードされています。ヘルパー関数などを含む他のファイルをインクルードして、関数でデータを渡してビジネスロジックを実行することもできます。これは、アプリケーションが大きくなってくると管理が大変になります。PHP5では、よりオブジェクト指向のデザインを提供することで、この問題を解決しようとしています。</target>
        </trans-unit>
        <trans-unit id="003b46e7955af669ca0d0b1ccab8ff624590d7d7" translate="yes" xml:space="preserve">
          <source>Another, very pragmatic reason, to prefer composition over inheritance has to do with your domain model, and mapping it to a relational database. It's really hard to map inheritance to the SQL model (you end up with all sorts of hacky workarounds, like creating columns that aren't always used, using views, etc). Some ORMLs try to deal with this, but it always gets complicated quickly. Composition can be easily modeled through a foreign-key relationship between two tables, but inheritance is much harder.</source>
          <target state="translated">継承よりもコンポジションを好むもう一つの非常に現実的な理由は、ドメインモデルとそれをリレーショナルデータベースにマッピングすることに関係しています。継承をSQLモデルにマッピングするのは本当に難しいです(常に使用されていないカラムを作成したり、ビューを使用したりと、様々な回避策が必要になります)。ORMLの中にはこれに対応しようとするものもありますが、すぐに複雑になってしまいます。組成は、2つのテーブル間の外部キーの関係で簡単にモデル化できますが、継承ははるかに難しいです。</target>
        </trans-unit>
        <trans-unit id="b3ead00c7eaee34c442057dee94f69e62fca38dd" translate="yes" xml:space="preserve">
          <source>As a rule of thumb, I tend to choose inheritance over composition when polymorphic use is expected to be very common, in which case the power of dynamic dispatch can lead to a much more readable and elegant API. For example, having a polymorphic class &lt;code&gt;Widget&lt;/code&gt; in GUI frameworks, or a polymorphic class &lt;code&gt;Node&lt;/code&gt; in XML libraries allows to have an API which is much more readable and intuitive to use than what you would have with a solution purely based on composition.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;経験則として、私は、多態的な使用が非常に一般的であると予想される場合、構成より継承を選択する傾向があります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;たとえば&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、GUIフレームワークに&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ポリモーフィッククラスの&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Widget&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、または&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;XMLライブラリに&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ポリモーフィッククラスの&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Node&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用すると、純粋に構成に基づくソリューションよりもはるかに読みやすく、直感的に使用できるAPIを使用できます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="19790e17c44a9b95a38b06493bf40dd98fb49535" translate="yes" xml:space="preserve">
          <source>As many people told, I will first start with the check - whether there exists an &quot;is-a&quot; relationship. If it exists I usually check the following:</source>
          <target state="translated">多くの方がおっしゃっているように、私はまず、「ある関係」が存在するかどうかをチェックすることから始めます。それが存在する場合、私は通常、次のようにチェックします。</target>
        </trans-unit>
        <trans-unit id="fda1192189400839b8b95f4e3718dccf23de4a71" translate="yes" xml:space="preserve">
          <source>As soon as someone explained &quot;favor composition over inheritance&quot; to me, I thought back over every time I tried to share functionality between classes using inheritance and realized that most of the time it didn't really work well.</source>
          <target state="translated">誰かが「継承よりも構成を優先する」と説明してくれたので、継承を使ってクラス間で機能を共有しようとするたびに思い返してみたのですが、ほとんどの場合はうまくいかないことに気がつきました。</target>
        </trans-unit>
        <trans-unit id="dd869ae1d27b49cf539b23ec39ba981088b4ec6a" translate="yes" xml:space="preserve">
          <source>Aside from is a/has a considerations, one must also consider the &quot;depth&quot; of inheritance your object has to go through. Anything beyond five or six levels of inheritance deep might cause unexpected casting and boxing/unboxing problems, and in those cases it might be wise to compose your object instead.</source>
          <target state="translated">is ahas a の考慮事項とは別に、オブジェクトが通過しなければならない継承の &quot;深さ &quot;も考慮しなければなりません。継承の深さが 5、6 レベルを超えると、予期せぬキャスティングや箱詰めの問題が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="382e62ec5112339ce9d05227c6fa3d942c472f7a" translate="yes" xml:space="preserve">
          <source>At the risk of oversimplifying, that's composition - composing multiple classes to work together. And once we form that habit we find that it's much more flexible, maintainable, and testable than using inheritance.</source>
          <target state="translated">単純化しすぎているかもしれませんが、これがコンポジション(複数のクラスを組み合わせて動作させること)です。一度この習慣を身につけてしまえば、継承を使うよりもはるかに柔軟性があり、保守性があり、テストが可能であることに気づくでしょう。</target>
        </trans-unit>
        <trans-unit id="400d0992f15edf3eca262b5209a73094f8d6e110" translate="yes" xml:space="preserve">
          <source>Base class defines structure of the algorithm  and sub-class will override a part of algorithm =&amp;gt; &lt;strong&gt;&lt;em&gt;You can implement &lt;a href=&quot;https://en.wikipedia.org/wiki/Template_method_pattern&quot;&gt;Template_method&lt;/a&gt; without change in base class skeleton&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;基本クラスはアルゴリズムの構造を定義し、サブクラスはアルゴリズムの一部をオーバーライドします=&amp;gt; &lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;基本クラスのスケルトンを変更せずに&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Template_method_pattern&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Template_method&lt;/font&gt;&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;実装できます&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0c024738e730ecac1df27b0bab86fd28a7f5eab0" translate="yes" xml:space="preserve">
          <source>Base class provides default implementation and sub-class can change the behaviour =&amp;gt; &lt;strong&gt;&lt;em&gt;You can re-define contract&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;基本クラスはデフォルトの実装を提供し、サブクラスは動作を変更できます=&amp;gt; &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;契約を再定義できます&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ec79a6576dd1a829ef1be9035eab29495e4a39ac" translate="yes" xml:space="preserve">
          <source>Base class provides no implementation and sub-class has to override complete method (abstract) =&amp;gt; &lt;strong&gt;&lt;em&gt;You can implement a contract&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;基本クラスは実装を提供せず、サブクラスは完全なメソッド（抽象）をオーバーライドする必要があります=&amp;gt; &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コントラクトを実装できます&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f5071aef9005443060d06d71c91df8e638ed8f5f" translate="yes" xml:space="preserve">
          <source>Call no methods from the superclass constructor</source>
          <target state="translated">スーパークラスのコンストラクタからメソッドを呼び出さない</target>
        </trans-unit>
        <trans-unit id="4b96cc03f1983251e435c5372fac4d177913e2d5" translate="yes" xml:space="preserve">
          <source>Common problems to the use of inheritance as I see it are:</source>
          <target state="translated">私が見ているような継承の使用に対する共通の問題点は、以下の通りです。</target>
        </trans-unit>
        <trans-unit id="ca5e00120498b815c12de59fd45e93f8086a8bfc" translate="yes" xml:space="preserve">
          <source>Composition</source>
          <target state="translated">Composition</target>
        </trans-unit>
        <trans-unit id="81f2d2c7a8be16bc594e920e17d27d214e445279" translate="yes" xml:space="preserve">
          <source>Composition has the befit of inversion of control, and its dependency can be injected dynamically, as is shown in &lt;a href=&quot;https://en.wikipedia.org/wiki/Decorator_pattern#Java&quot;&gt;decorator pattern&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Proxy_pattern#Java&quot;&gt;proxy pattern&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コンポジションには、制御の反転の利点があり、その依存関係は、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Decorator_pattern#Java&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;デコレーターパターン&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Proxy_pattern#Java&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プロキシパターンに&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;示されているように、動的に注入できます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d58f3246a619006b9498ebf3dce3fe08d69bb09f" translate="yes" xml:space="preserve">
          <source>Composition has the benefit of &lt;a href=&quot;http://www.codecommit.com/blog/scala/the-magic-behind-parser-combinators&quot;&gt;combinator-oriented&lt;/a&gt; programming, i.e. working in a way like the &lt;a href=&quot;https://en.wikipedia.org/wiki/Composite_pattern#Java&quot;&gt;composite pattern&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;合成には、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.codecommit.com/blog/scala/the-magic-behind-parser-combinators&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コンビネータ指向の&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プログラミングの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;利点があり&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。つまり、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Composite_pattern#Java&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コンポジットパターンの&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ように機能し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b61664eea08164f2bdbcf4e14aaae6423d48a24e" translate="yes" xml:space="preserve">
          <source>Composition has the benefit of easy &lt;a href=&quot;https://stackoverflow.com/questions/3556652/how-do-java-interfaces-simulate-multiple-inheritance&quot;&gt;multiple inheritance&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;構成には、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3556652/how-do-java-interfaces-simulate-multiple-inheritance&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;多重継承&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が容易であるという利点があり&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0686522d6dc64a26474dd45526ab7c5d6f2976fd" translate="yes" xml:space="preserve">
          <source>Composition immediately follows &lt;a href=&quot;https://stackoverflow.com/questions/383947/what-does-it-mean-to-program-to-an-interface&quot;&gt;programming to an interface&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;構成は&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/383947/what-does-it-mean-to-program-to-an-interface&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、インターフェイスへのプログラミングの&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;直後に続き&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="46ef1a92cd606125c6540b7b2b01afd6a3c39af1" translate="yes" xml:space="preserve">
          <source>Composition is favoured over inheritance. To put it very simply you would have:</source>
          <target state="translated">相続よりも構成が有利です。非常に簡単に言えば あなたは持っているでしょう</target>
        </trans-unit>
        <trans-unit id="5a48c284575bc59295e94ae273beff875be00b0e" translate="yes" xml:space="preserve">
          <source>Composition is just playing it modular: you create interface similar to the parent class, create new object and delegate calls to it. If these objects need not to know of each other, it's quite safe and easy to use composition. There are so many possibilites here.</source>
          <target state="translated">コンポジションとは、単にそれをモジュール化して遊ぶことです:あなたは親クラスに似たインターフェイスを作成し、新しいオブジェクトを作成し、それに呼び出しを委任します。これらのオブジェクトがお互いを知る必要がない場合、それは非常に安全で簡単に作曲を使用することができます。ここには非常に多くの可能性があります。</target>
        </trans-unit>
        <trans-unit id="ae3589f9e16ef3d74aae74f9cc0e37a51e1e1c2f" translate="yes" xml:space="preserve">
          <source>Composition is often more logical, it provides better abstraction, better encapsulation, better code reuse (especially in very large projects) and is less likely to break anything at a distance just because you made an isolated change anywhere in your code. It also makes it easier to uphold the &quot;&lt;em&gt;Single Responsibility Principle&lt;/em&gt;&quot;, which is often summarized as &quot;&lt;em&gt;There should never be more than one reason for a class to change.&lt;/em&gt;&quot;, and it means that every class exists for a specific purpose and it should only have methods that are directly related to its purpose. Also having a very shallow inheritance tree makes it much easier to keep the overview even when your project starts to get really large. Many people think that inheritance represents our &lt;em&gt;real world&lt;/em&gt; pretty well, but that isn't the truth. The real world uses much more composition than inheritance. Pretty much every real world object you can hold in your hand has been composed out of other, smaller real world objects.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;多くの場合、コンポジションはより論理的であり、抽象化、カプセル化、コードの再利用が向上し（特に非常に大規模なプロジェクトで）、コードのどこかに孤立した変更を加えたという理由だけで、離れたところにあるものを壊す可能性が低くなります。また、「&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;単一の責任の原則&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;」&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を支持することが容易になり&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは、「&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;クラスが変更される理由は1つ以上あるべきではありません。&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;」と&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;まとめられる&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ことが多く&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、すべてのクラスが特定の目的のために存在し、その目的に直接関連するメソッドのみを持っています。また、継承ツリーが非常に浅いため、プロジェクトが非常に大きくなり始めたときでも、概要を簡単に維持できます。多くの人々は、継承は私たちの&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;現実の世界を&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;表すと考えてい&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;結構ですが、それは真実ではありません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;現実の世界では、継承よりもはるかに多くの構成を使用しています。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;手に持つことができるほとんどすべての実世界のオブジェクトは、他のより小さな実世界のオブジェクトから構成されています。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="10f3a58f627a1c06a673bba20f0d87bcfa973635" translate="yes" xml:space="preserve">
          <source>Composition is typically &quot;has a&quot; or &quot;uses a&quot; relationship. Here the Employee class has a Person. It does not inherit from Person but instead gets the Person object passed to it, which is why it &quot;has a&quot; Person.</source>
          <target state="translated">組成は通常、&quot;have a&quot; または &quot;uses a&quot; の関係です。ここでは、Employee クラスは Person を持っています。これは Person を継承するのではなく、Person オブジェクトが渡されているので、Person を &quot;持っている&quot; のです。</target>
        </trans-unit>
        <trans-unit id="3fd117ba0aac29cf18bbb9d63f44b9e57ef72792" translate="yes" xml:space="preserve">
          <source>Composition over Inheritance</source>
          <target state="translated">継承を超えた構図</target>
        </trans-unit>
        <trans-unit id="f95b761f5013500506669ddde5d332b7d2698e3f" translate="yes" xml:space="preserve">
          <source>Composition should be used when you do not need the new class to have the same interface, i.e. you wish to conceal certain aspects of the class' implementation which the user of that class need not know about. So composition is more in the way of supporting &lt;em&gt;encapsulation&lt;/em&gt; (i.e. concealing the implementation) while inheritance is meant to support &lt;em&gt;abstraction&lt;/em&gt; (i.e. providing a simplified representation of something, in this case the &lt;strong&gt;same&lt;/strong&gt; interface for a range of types with different internals).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;新しいクラスが同じインターフェースを持つ必要がない場合、つまり、そのクラスのユーザーが知る必要のないクラスの実装の特定の側面を隠したい場合は、コンポジションを使用する必要があります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;組成物は、より多くの支援の方法であるので、&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;カプセル化&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、継承をサポートすることを意味している間（すなわち、隠蔽実装）&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;抽象化&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（すなわち、この場合には、何かの簡略化された表現を提供&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;同じ&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;異なる内部構造を有するタイプの範囲に対するインターフェイス）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a2a8235eed4685d8113375b89cd8a8e3d9bd3e3a" translate="yes" xml:space="preserve">
          <source>Composition v/s Inheritance is a wide subject. There is no real answer for what is better as I think it all depends on the design of the system.</source>
          <target state="translated">組成 vs 継承は幅広いテーマです。何が良いかはシステムの設計次第だと思うので、本当の答えはありません。</target>
        </trans-unit>
        <trans-unit id="92716f2ee6cb1310c9dda41d91fd87785b6876c1" translate="yes" xml:space="preserve">
          <source>Creating a subclass should mean more than just a convenient way to call superclass methods. You should use inheritance when subclass &quot;is-a&quot; super class both structurally and functionally, when it can be used as superclass and you are going to use that. If it is not the case - it is not inheritance, but something else. Composition is when your objects consists of another, or has some relationship to them.</source>
          <target state="translated">サブクラスを作るということは、スーパークラスのメソッドを呼び出すための便利な方法だけではないはずです。サブクラスが構造的にも機能的にも &quot;is-a &quot;のスーパークラスで、それがスーパークラスとして使えるようになって、それを使おうとしているときに継承を使うべきです。そうでない場合は-それは継承ではなく、何か別のものです。組成とは、あなたのオブジェクトが別のもので構成されているとき、またはそれらに何らかの関係があるときです。</target>
        </trans-unit>
        <trans-unit id="3fe61a6e3e340af7a148250fe18c7fe220180a40" translate="yes" xml:space="preserve">
          <source>Didn't find a satisfactory answer here, so I wrote a new one.</source>
          <target state="translated">ここでは満足のいく答えが見つからなかったので、新しいものを書きました。</target>
        </trans-unit>
        <trans-unit id="2134be01d96196149dd1553096fb7d21f63f453f" translate="yes" xml:space="preserve">
          <source>Does TypeB want only some/part of the behavior exposed by TypeA? Indicates need for &lt;strong&gt;Composition.&lt;/strong&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;TypeBはTypeAによって公開される動作の一部または一部のみを必要としますか？&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;構成の&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;必要性を示します&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="12ab02cfb9dcddf234cbcb5daadc6acbbc33faab" translate="yes" xml:space="preserve">
          <source>Does TypeB want to expose the complete interface (all public methods no less) of TypeA such that TypeB can be used where TypeA is expected? Indicates &lt;strong&gt;Inheritance&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;TypeBは、TypeAが期待される場所でTypeBを使用できるように、TypeAの完全なインターフェイス（すべてのパブリックメソッド以上）を公開したいですか？&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;継承&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を示します&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="777d4fc8b7f76029a5967bc0b0912719f3a1a9b1" translate="yes" xml:space="preserve">
          <source>Does your class need to re-use any high level interactions defined in another class ? The &lt;a href=&quot;http://en.wikipedia.org/wiki/Template_method_pattern&quot;&gt;template method&lt;/a&gt; design pattern would be impossible to implement without inheritance. I believe all extensible frameworks use this pattern.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あなたのクラスは別のクラスで定義された高レベルの相互作用を再利用する必要がありますか？&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Template_method_pattern&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;テンプレートメソッド&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;デザインパターンは、継承せずに実装するのは不可能であろう。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;すべての拡張可能なフレームワークがこのパターンを使用していると思います。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0ce219366653ef3fc59ddc3a55f02fcdb049f3e4" translate="yes" xml:space="preserve">
          <source>E.g 1. Accountant &lt;strong&gt;is an&lt;/strong&gt; Employee. But I will &lt;strong&gt;not&lt;/strong&gt; use inheritance because a Employee object can be instantiated.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;例1.会計士&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;従業員です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ただし&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、Employeeオブジェクトはインスタンス化できるため、継承&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用し&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ません&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fd394dfc4783e4030e370145dbe0cbed4e04b2f6" translate="yes" xml:space="preserve">
          <source>E.g 2. Book &lt;strong&gt;is a&lt;/strong&gt; SellingItem. A SellingItem cannot be instantiated - it is abstract concept. Hence I will use inheritacne. The SellingItem is an &lt;strong&gt;abstract base class (or interface&lt;/strong&gt; in C#)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;例2. Book &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; SellingItemです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;SellingItemはインスタンス化できません-それは抽象的な概念です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、私はinheritacneを使用します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;SellingItemは&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;抽象基本クラス（または&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; C＃の&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;インターフェース&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e63cd64448d1fa4bd7208eeb5d3146984a4c565d" translate="yes" xml:space="preserve">
          <source>Either the base class &lt;code&gt;Engine&lt;/code&gt; exposes a mutator to change its</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;基本クラス&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Engine&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、ミューテーターを公開して、&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b189d69566897b8878d77a4a677fe65f855dc737" translate="yes" xml:space="preserve">
          <source>Essentially, this means that inheritance is possible if the base class can be used polymorphically, which I believe is equivalent to our test &quot;a bar is a foo and bars can do everything that foos can do&quot;.</source>
          <target state="translated">本質的には、基底クラスが多相的に使用できる場合には継承が可能であることを意味しています。</target>
        </trans-unit>
        <trans-unit id="f2051d9830558331ddb82ea3d448072dd2bb9c36" translate="yes" xml:space="preserve">
          <source>Even if you &lt;em&gt;can&lt;/em&gt; use inheritance doesn't mean you &lt;em&gt;should&lt;/em&gt;: using composition is always an option. Inheritance is a powerful tool allowing implicit code reuse and dynamic dispatch, but it does come with a few disadvantages, which is why composition is often preferred. The trade-offs between inheritance and composition aren't obvious, and in my opinion are best explained in &lt;a href=&quot;https://stackoverflow.com/a/32557773/1951907&quot;&gt;lcn's answer&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あなたがいても&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;することができます&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;継承を使用し、あなたが意味するものではありません&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;べき&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：組成物を用いて、常にオプションです。継承は、暗黙的なコードの再利用と動的なディスパッチを可能にする強力なツールですが、いくつかの欠点があるため、多くの場合、構成が優先されます。継承と構成の間のトレードオフは明らかではありません。私の意見では、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/32557773/1951907&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;lcnの回答&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;で最もよく説明されてい&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1f8acd85ea01ba780aab8bff6a6da0a022821ecd" translate="yes" xml:space="preserve">
          <source>Even though Composition is preferred, I would like to highlight pros of &lt;em&gt;Inheritance&lt;/em&gt; and cons of &lt;em&gt;Composition&lt;/em&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;組成物が好まれていますが、私はプロの強調表示したい&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の継承&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;との短所&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;構成を&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="31031c9aad8cde85b2091023e88715df8ab33039" translate="yes" xml:space="preserve">
          <source>Excessive reusing by sub-classing can make the inheritance stack very deep and very confusing too.</source>
          <target state="translated">サブクラスによる過剰な再利用は、継承スタックを非常に深くし、非常に混乱させます。</target>
        </trans-unit>
        <trans-unit id="89a3623ed6c1f4cf17b888e7b9aea97aa69741d0" translate="yes" xml:space="preserve">
          <source>Expose no fields, ever, except constants</source>
          <target state="translated">定数以外のフィールドは一切公開しない</target>
        </trans-unit>
        <trans-unit id="043fff222c570925fe52a25442b655b888e4778a" translate="yes" xml:space="preserve">
          <source>Functions that use pointers or references to base classes must be able to use objects of derived classes without knowing it</source>
          <target state="translated">基底クラスへのポインタや参照を使用する関数は、それを知らずに派生クラスのオブジェクトを使用することができなければなりません。</target>
        </trans-unit>
        <trans-unit id="3bb1334620acce14a757514719a368811078eacb" translate="yes" xml:space="preserve">
          <source>Generally type of relationship between object provide better information to choose one of them.</source>
          <target state="translated">一般的にオブジェクト間の関係のタイプは、それらのいずれかを選択するためのより良い情報を提供します。</target>
        </trans-unit>
        <trans-unit id="4f12a4d9f8c6da07d46b0a2b46004b726e7c45ee" translate="yes" xml:space="preserve">
          <source>However, if the parent class for some reason needs to access functions provided by the &quot;child class&quot; for inexperienced programmer it may look like it's a great place to use  inheritance. The parent class can just call it's own abstract &quot;foo()&quot; which is overwritten by the subclass and then it can give the value to the abstract base.</source>
          <target state="translated">しかし、何らかの理由で親クラスが「子クラス」が提供する関数にアクセスする必要がある場合、経験の浅いプログラマーにとっては、継承を使うには最適な場所のように見えるかもしれません。親クラスはそれ自身の抽象的な「foo()」を呼び出すだけで、それをサブクラスが上書きして、抽象的なベースに値を与えることができます。</target>
        </trans-unit>
        <trans-unit id="97f925aaef0269b5644be480512ea4709622251e" translate="yes" xml:space="preserve">
          <source>However, if you want to use the private variables, the case 3, then you may be in trouble. &lt;strong&gt;If you consider global variables unsafe, then you should consider using inheritance to get access to private variables also unsafe&lt;/strong&gt;. Mind you, global variables are not all THAT bad - databases are essentially big set of global variables. But if you can handle it, then it's quite fine.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ただし、プライベート変数（ケース3）を使用する場合は、問題が発生する可能性があります。&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;グローバル変数を安全でないと考える場合は、継承を使用してプライベート変数へのアクセスも安全でないことを考慮する必要があります&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。大事なことは、グローバル変数はそれほど悪いことではありません-データベースは本質的に大きなグローバル変数のセットです。しかし、それを処理できる場合は、それで問題ありません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b4d685219579566f4df07511cc885fbfa342cbce" translate="yes" xml:space="preserve">
          <source>However, if your intention is purely that of code re-use, then composition most likely is a better design choice.</source>
          <target state="translated">しかし、あなたの意図が純粋にコードの再利用だけであるならば、構成は最も可能性が高く、より良いデザインの選択です。</target>
        </trans-unit>
        <trans-unit id="79722dd4bf505b50db03d2d8689bea00b8a0de1d" translate="yes" xml:space="preserve">
          <source>I agree with @Pavel, when he says, there are places for composition and there are places for inheritance.</source>
          <target state="translated">私は、@Pavel氏が言うところの「構成する場所と継承する場所がある」に同意します。</target>
        </trans-unit>
        <trans-unit id="9da4978d60ea2b750a44d4c39e654ed0899f255e" translate="yes" xml:space="preserve">
          <source>I can think of three real reasons for using inheritance:</source>
          <target state="translated">相続を利用する本当の理由は3つ思いつきます。</target>
        </trans-unit>
        <trans-unit id="92415e061dde1a77f1cbf96f5a396e5e3f625e79" translate="yes" xml:space="preserve">
          <source>I have three classes that all need some common functionality. So if I
  write a base class and have them all inherit from it, then they will
  all have that functionality and I'll only need to maintain it in once
  place.</source>
          <target state="translated">私は3つのクラスを持っていますが、それらはすべて共通の機能を必要としています。ですから、もし基底クラスを書いてそれを継承させれば、それらのクラスはすべてその機能を持っていることになり、私はそれを一度にメンテナンスする必要があるだけです。</target>
        </trans-unit>
        <trans-unit id="94322ac0b828540a1a09d955fde0930579fb6eef" translate="yes" xml:space="preserve">
          <source>I see no one mentioned the &lt;a href=&quot;http://en.wikipedia.org/wiki/Multiple_inheritance#The_diamond_problem&quot;&gt;&lt;strong&gt;diamond problem&lt;/strong&gt;&lt;/a&gt;, which might arise with inheritance.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;継承で発生する可能性の&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ある&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Multiple_inheritance#The_diamond_problem&quot;&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ダイヤモンドの問題&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;について誰も言及して&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;いません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="66bbabb97fcd47e383202e2d023a33046ffde71d" translate="yes" xml:space="preserve">
          <source>I take no credit for this approach. I took it straight from the &lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0735619670&quot;&gt;Second Edition of Code Complete&lt;/a&gt; by &lt;a href=&quot;http://blogs.construx.com/blogs/stevemcc/default.aspx&quot;&gt;Steve McConnell&lt;/a&gt;, &lt;em&gt;Section 6.3&lt;/em&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私はこのアプローチを信用していません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;a href=&quot;http://blogs.construx.com/blogs/stevemcc/default.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Steve McConnell&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;による&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0735619670&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コードコンプリートの第2版&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;セクション6.3&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;からそれを直接取り入れました&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="aa2bbecf277f1f24d2f1347150c527e7e0547d68" translate="yes" xml:space="preserve">
          <source>I think inheritance should be used if your answer is an affirmative to any of these questions.</source>
          <target state="translated">相続は、どれか一つでも肯定的な回答であれば使うべきだと思います。</target>
        </trans-unit>
        <trans-unit id="9a218d45daf46b325069807128916cf22840ea70" translate="yes" xml:space="preserve">
          <source>I would suggest using composing as the default. It is more modular, and gives the benefit of late binding (you can change the component dynamically). Also it's easier to test the things separately. And if you need to use a method from a class, you are not forced to be of certain form (Liskov Substitution Principle).</source>
          <target state="translated">私はデフォルトで composing を使うことをお勧めします。これはよりモジュール化されており、レイトバインディングの利点があります (コンポーネントを動的に変更することができます)。また、個別にテストするのも簡単です。また、クラスからメソッドを使う必要がある場合、特定の形式を強制されることもありません(Liskov Substitution Principle)。</target>
        </trans-unit>
        <trans-unit id="b4b8830d61628daddd8e304299af6cded09fa350" translate="yes" xml:space="preserve">
          <source>If code reuse is the &lt;em&gt;sole&lt;/em&gt; purpose, subclassing may give one more than what he needs, i.e. some public methods of the parent class don't make much sense for the child class. In this case, instead of favoring composition over inheritance, composition is &lt;em&gt;demanded&lt;/em&gt;. This is also where the &quot;is-a&quot; vs. &quot;has-a&quot; notion comes from.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コードの再利用が&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;唯一の&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;目的である場合、サブクラス化によって必要なものよりも1つ多くなる可能性があります。つまり、親クラスのいくつかのパブリックメソッドは、子クラスにはあまり意味がありません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この場合、継承よりも構成を優先する代わりに、構成が&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;要求され&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは「is-a」対「has-a」の概念の由来でもあります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f377d45b989acafd55d82af80725c12e6b22ad84" translate="yes" xml:space="preserve">
          <source>If relation type is  &quot;IS-A&quot; relation then Inheritance is better approach.
otherwise relation type is  &quot;HAS-A&quot; relation then composition will better approach.</source>
          <target state="translated">関係の種類が &quot;IS-A &quot;の関係であれば継承、そうでなければ &quot;HAS-A &quot;の関係であれば構成の方が良いでしょう。</target>
        </trans-unit>
        <trans-unit id="31255e40d0434216cba8c8688fd5f4dadb2d4bce" translate="yes" xml:space="preserve">
          <source>If the object need to be of the same type, then use &lt;strong&gt;Inheritance&lt;/strong&gt; or implement interfaces.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;オブジェクトを同じ型にする必要がある場合は、&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;継承&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用する&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;か、インターフェイスを実装します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="03ea0bf4e382df082ffa1f260eb4aff741e92ef5" translate="yes" xml:space="preserve">
          <source>If the reason is number 2 it gets a bit tricky. Do you really only need to use the same base class? In general, just using the same base class is not good enough, but it may be a requirement of your framework, a design consideration which can not be avoided.</source>
          <target state="translated">理由が2番の場合は少し厄介なことになります。本当に同じ基底クラスだけを使う必要があるのでしょうか?一般的に、同じ基底クラスを使うだけでは十分ではありませんが、それはフレームワークの要件であり、設計上の考慮事項であり、避けることはできません。</target>
        </trans-unit>
        <trans-unit id="50913e0cbdc9a4f53879607cd8217f727ee11c8d" translate="yes" xml:space="preserve">
          <source>If these are true, then it is probably necessary to use inheritance.</source>
          <target state="translated">これらが真であれば、継承を利用する必要があるのではないでしょうか。</target>
        </trans-unit>
        <trans-unit id="8b1c2b77c49e48b7fd23f6be825d3e74aa05cdb1" translate="yes" xml:space="preserve">
          <source>If you understand the difference, it's easier to explain.</source>
          <target state="translated">違いを理解していれば、説明しやすいと思います。</target>
        </trans-unit>
        <trans-unit id="0744b5b95abf4fe22c4bb86def64e0a6bd18cab0" translate="yes" xml:space="preserve">
          <source>In Java or C#, an object cannot change its type once it has been instantiated.</source>
          <target state="translated">JavaやC#では、一度インスタンス化されたオブジェクトは型を変更することができません。</target>
        </trans-unit>
        <trans-unit id="048c5d31bb5c132e0c74cc2184a24b79baadf241" translate="yes" xml:space="preserve">
          <source>In a glance, if classes B and C inherit A and both override method X, and a fourth class D, inherits from both B and C, and does not override X, which implementation of X D is supposed to use?</source>
          <target state="translated">一見すると、クラスBとCがAを継承し、両方ともメソッドXをオーバーライドし、第4のクラスDがBとCの両方を継承し、Xをオーバーライドしない場合、X Dはどちらの実装を使用することになっているのでしょうか?</target>
        </trans-unit>
        <trans-unit id="328ab1e48844e9cef1794c68df9d6ef8b3d470f0" translate="yes" xml:space="preserve">
          <source>In inheritance, subclass can directly invoke base class method even though it's not implementing base class method because of &lt;strong&gt;&lt;em&gt;IS A&lt;/em&gt;&lt;/strong&gt; relation. If you use composition, you have to add methods in container class to expose contained class API</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;継承では、&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;IS A&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;関係の&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ために基本クラスメソッドを実装していない場合でも、サブクラスは基本クラスメソッドを直接呼び出すことができ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コンポジションを使用する場合、コンテナクラスにメソッドを追加して、含まれているクラスAPIを公開する必要があります&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0237d418d5cba034a69d0e770a4c52723e47e4d3" translate="yes" xml:space="preserve">
          <source>In the end, we tie our code in some difficult knots and get no benefit whatsoever from it except that we get to say, &quot;Cool, I learned about inheritance and now I used it.&quot; That's not meant to be condescending because we've all done it. But we all did it because no one told us not to.</source>
          <target state="translated">結局、私たちはコードを難しい結び目に縛り付けてしまい、そこから何の利益も得られないままになってしまいます。これは見下しているわけではありません。しかし、誰もがやるなと言わなかったからこそ、みんなやったのです。</target>
        </trans-unit>
        <trans-unit id="fdaddb9ce367c2ca746a97cc24d2e8817a51f27d" translate="yes" xml:space="preserve">
          <source>Inheritance</source>
          <target state="translated">Inheritance</target>
        </trans-unit>
        <trans-unit id="8acfc927b768458de4cace8265888459e774da8a" translate="yes" xml:space="preserve">
          <source>Inheritance creates a strong relationship between a subclass and super class; subclass must be aware of super class'es implementation details. Creating the super class is much harder, when you have to think about how it can be extended. You have to document class invariants carefully, and state what other methods overridable methods use internally.</source>
          <target state="translated">継承はサブクラスとスーパークラスの間に強い関係を作り、サブクラスはスーパークラスの実装の詳細を知らなければなりません。サブクラスはスーパークラスの実装の詳細を認識していなければなりません。クラスの不変性を慎重に文書化し、他のオーバーライド可能なメソッドが内部的にどのようなものを使用しているかを明記しなければなりません。</target>
        </trans-unit>
        <trans-unit id="b7060930ac5a536fbe2aad05ec9ec8d02db42c83" translate="yes" xml:space="preserve">
          <source>Inheritance exposes &lt;em&gt;protected&lt;/em&gt; members. This breaks encapsulation of the parent class, and if used by subclass, another dependency between the child and its parent is introduced.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;継承は&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;保護された&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;メンバーを&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;公開し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これにより、親クラスのカプセル化が解除され、サブクラスで使用された場合、子とその親の間に別の依存関係が導入されます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d1ded82669ac9037f30aed69f3e1289af7838c6f" translate="yes" xml:space="preserve">
          <source>Inheritance exposes a subclass to details of its parent class implementation, that's why it's often said that inheritance breaks encapsulation (in a sense that you really need to focus on interfaces only not implementation, so reusing by sub classing is not always preferred).</source>
          <target state="translated">継承はサブクラスが親クラスの実装の詳細を知ることができるので、よくカプセル化を破ると言われています(実装ではなくインターフェースだけに注目するという意味では、サブクラスによる再利用が必ずしも好ましいとは言えません)。</target>
        </trans-unit>
        <trans-unit id="6b2f20d3e798733bc6014d967772e1dd274bc317" translate="yes" xml:space="preserve">
          <source>Inheritance is a very powerfull machanism for code reuse. But needs to be used properly. I would say that inheritance is used correctly if the subclass is also a subtype of the parent class. As mentioned above, the Liskov Substitution Principle is the key point here.</source>
          <target state="translated">継承はコードを再利用するための非常に強力な手段である。しかし、正しく使う必要があります。私は、継承は、サブクラスが親クラスのサブタイプでもある場合に正しく使われると言っています。上述したように、ここではLiskov Substitution Principleがポイントになります。</target>
        </trans-unit>
        <trans-unit id="4d4a2058f753bb6fa776187437c532819ce7c9eb" translate="yes" xml:space="preserve">
          <source>Inheritance is easily overused, though, and creates additional complexity, with hard dependencies between classes. Also understanding what happens during execution of a program gets pretty hard due to layers and dynamic selection of method calls.</source>
          <target state="translated">しかし、継承は簡単に乱用されてしまい、クラス間の依存関係が厳しくなり、さらに複雑さを増してしまいます。また、プログラムの実行中に何が起こるかを理解するのは、レイヤーやメソッド呼び出しの動的な選択のためにかなり難しくなります。</target>
        </trans-unit>
        <trans-unit id="246a008dc7a1185d80da575bb9971db7f90056e2" translate="yes" xml:space="preserve">
          <source>Inheritance is often taught early when we learn object-oriented programming, so it's seen as an easy solution to a common problem.</source>
          <target state="translated">相続は、オブジェクト指向プログラミングを学ぶ際に早い段階で教えられることが多いので、よくある問題の簡単な解決策として見られています。</target>
        </trans-unit>
        <trans-unit id="644a9a7de65c713edc98cce558794f4f5d61fd4c" translate="yes" xml:space="preserve">
          <source>Inheritance is pretty enticing especially coming from procedural-land and it often looks deceptively elegant. I mean all I need to do is add this one bit of functionality to some other class, right? Well, one of the problems is that</source>
          <target state="translated">継承は非常に魅力的で、特に手続き型の世界から来ると、見かけによらずエレガントに見えることがよくあります。つまり、必要なのは他のクラスにちょっとした機能を追加するだけですよね?さて、問題の一つは</target>
        </trans-unit>
        <trans-unit id="62e87b6a71b6557527e58c600d3ce6921f9bf0e3" translate="yes" xml:space="preserve">
          <source>Inheritance is really a cool feature, but I'm afraid it has been overused the last couple of years. People treated inheritance as the one hammer that can nail it all, regardless if it was actually a nail, a screw, or maybe a something completely different.</source>
          <target state="translated">相続は本当にクールな機能なのですが、ここ数年は酷使されすぎていると思います。人々は継承を、それが実際には釘であっても、ネジであっても、あるいは全く別のものであっても、すべてを釘付けにできる唯一のハンマーのように扱っていました。</target>
        </trans-unit>
        <trans-unit id="6876956ee9e8f2967733c679847a166bd622f332" translate="yes" xml:space="preserve">
          <source>Inheritance is sometimes useful, if the hierarchy really represents a is-a-relationship. It relates to Open-Closed Principle, which states that classes should be closed for modification but open to extension. That way you can have polymorphism; to have a generic method that deals with super type and its methods, but via dynamic dispatch the method of subclass is invoked. This is flexible, and helps to create indirection, which is essential in software (to know less about implementation details).</source>
          <target state="translated">階層が本当に関係性を表している場合には、継承が有用な場合があります。これは、クラスは変更に対しては閉じていても、拡張に対しては開かれているべきだというオープンクローズド原則に関連しています。このようにして、スーパー型とそのメソッドを扱う一般的なメソッドを持ち、動的なディスパッチによってサブクラスのメソッドを呼び出すというポリモーフィズムを持つことができます。これは柔軟性があり、(実装の詳細についてはあまり知られていませんが)ソフトウェアに不可欠な間接性を作るのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="bced79113df2d8dc04636edbfd4c770f3793b989" translate="yes" xml:space="preserve">
          <source>Inheritance is very powerful, but you can't force it (see: the &lt;a href=&quot;http://en.wikipedia.org/wiki/Circle-ellipse_problem&quot;&gt;circle-ellipse problem&lt;/a&gt;). If you really can't be completely sure of a true &quot;is-a&quot; subtype relationship, then it's best to go with composition.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;継承は非常に強力ですが、強制することはできません（参照：&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Circle-ellipse_problem&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;円と楕円の問題&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;真の「is-a」サブタイプの関係が完全に確信できない場合は、構成を使用するのが最善です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8c9e4c9ebc2c06779a4efa98017c411df12f9203" translate="yes" xml:space="preserve">
          <source>Inheritance provides straightforward &lt;a href=&quot;https://en.wikipedia.org/wiki/This_%28computer_programming%29#Open_recursion&quot;&gt;open recursion&lt;/a&gt; via the internal polymorphic site &lt;code&gt;this&lt;/code&gt;, i.e. invoking overriding method (or even &lt;a href=&quot;http://www.scala-lang.org/old/node/1637.html#comment-5489&quot;&gt;type&lt;/a&gt;) in another member function, either public or private (though &lt;a href=&quot;https://softwareengineering.stackexchange.com/questions/35946/is-it-bad-code-smell-if-private-method-calls-public-one&quot;&gt;discouraged&lt;/a&gt;). Open recursion can be &lt;a href=&quot;https://github.com/akottr/edu-pattern/blob/master/org.akottr.patterns.composition/src/org/akottr/patterns/composition/inheritance/Compositon.java&quot;&gt;simulated via composition&lt;/a&gt;, but it requires extra effort and may not always viable(?). This &lt;a href=&quot;https://stackoverflow.com/a/2238735/2073130&quot;&gt;answer&lt;/a&gt; to a duplicated question talks something similar.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;継承は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、内部のポリモーフィックサイト&lt;/font&gt; &lt;code&gt;this&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;を介して&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;単純な&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/This_%28computer_programming%29#Open_recursion&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;オープン再帰&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;提供します&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。つまり&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、パブリックまたはプライベート（&lt;/font&gt;&lt;a href=&quot;https://softwareengineering.stackexchange.com/questions/35946/is-it-bad-code-smell-if-private-method-calls-public-one&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;推奨されませんが&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）の&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;別のメンバー関数で&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;オーバーライドメソッド（または&lt;/font&gt;&lt;a href=&quot;http://www.scala-lang.org/old/node/1637.html#comment-5489&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;type&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を呼び出します&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;オープンな再帰は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;a href=&quot;https://github.com/akottr/edu-pattern/blob/master/org.akottr.patterns.composition/src/org/akottr/patterns/composition/inheritance/Compositon.java&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;compositionを介してシミュレート&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;できます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が、追加の作業が必要であり、常に実行できるとは限りません（？）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;重複した質問&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/2238735/2073130&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に対する&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;回答&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、同様のことを話します。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="476dda4bfbf5d4cce097cb5b1043e190f23872ad" translate="yes" xml:space="preserve">
          <source>Inheritance provides straightforward code reuse if not overridden, while composition has to re-code every API, even if it's just a simple job of delegation.</source>
          <target state="translated">継承は、オーバーライドされなければストレートなコードの再利用を提供し、一方、コンポジションは、委任の単純な仕事であっても、すべてのAPIを再コード化しなければなりません。</target>
        </trans-unit>
        <trans-unit id="58f31260c50c06295c28ea7e8151785985ab907c" translate="yes" xml:space="preserve">
          <source>Inheritance vs. Aggregation</source>
          <target state="translated">継承と集約</target>
        </trans-unit>
        <trans-unit id="e4add19dff6bf1f83b08edd6c883185779e798ed" translate="yes" xml:space="preserve">
          <source>Is your class part of a structure that benefits from polymorphism ? For example, if you had a Shape class, which declares a method called draw(), then we clearly need Circle and Square classes to be subclasses of Shape, so that their client classes would depend on Shape and not on specific subclasses.</source>
          <target state="translated">あなたのクラスはポリモーフィズムの恩恵を受ける構造の一部ですか?例えば、draw()というメソッドを宣言しているShapeクラスがあったとします。</target>
        </trans-unit>
        <trans-unit id="bfe3497c44aa76555ec280d12b36758df5b4f30f" translate="yes" xml:space="preserve">
          <source>It establishes a logical &quot;&lt;strong&gt;IS A&quot;&lt;/strong&gt; relation. If &lt;em&gt;Car&lt;/em&gt; and &lt;em&gt;Truck&lt;/em&gt; are two types of &lt;em&gt;Vehicle&lt;/em&gt; ( base class), child class &lt;strong&gt;IS A&lt;/strong&gt; base class.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;論理的な「&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;IS A」&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;関係を確立します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;場合は&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;車&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;や&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;トラックが&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の2種類があり&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;車両&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（基底クラス）、子クラスは、&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;IS&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の基本クラス。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="896d22608075a950c42470104324b7925c60561d" translate="yes" xml:space="preserve">
          <source>It is often said that a class &lt;code&gt;Bar&lt;/code&gt; can inherit a class &lt;code&gt;Foo&lt;/code&gt; when the following sentence is true:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;次の文が真の場合、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;クラス&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Bar&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はクラス&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Foo&lt;/code&gt; を&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;継承できる&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;とよく言われ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="34e84b66db1164cc20f4c06d7a6b4d4b98054d53" translate="yes" xml:space="preserve">
          <source>It looks like a nice idea, but in many cases it's better just give the class an object which implements the foo() (or even set the value provided the foo() manually) than to inherit the new class from some base class which requires the function foo() to be specified.</source>
          <target state="translated">いいアイデアのように見えますが、多くの場合、関数 foo()を指定しなければならない基底クラスから新しいクラスを継承するよりも、 foo()を実装したオブジェクトをクラスに与えたほうがいいでしょう (あるいは、手動で foo()の値を設定したほうがいいかもしれません)。</target>
        </trans-unit>
        <trans-unit id="0325327f4aa9142c3fd02e3a934a008c92e7171d" translate="yes" xml:space="preserve">
          <source>It sounds great, but in practice it almost never, ever works, for one of several reasons:</source>
          <target state="translated">それは素晴らしいことのように聞こえますが、実際には、いくつかの理由の1つで、ほとんど、これまでに動作することはありません。</target>
        </trans-unit>
        <trans-unit id="f8a7ea6e944d4c6b1135e3b5b710351923f2b191" translate="yes" xml:space="preserve">
          <source>Its totally depend on entity relationship.</source>
          <target state="translated">それは完全に実体の関係に依存します。</target>
        </trans-unit>
        <trans-unit id="9aa3aeed06309616a463e707f18bc9934bea552e" translate="yes" xml:space="preserve">
          <source>Just so you know, another method used to determine whether inheritance is possible  is called the &lt;a href=&quot;http://web.archive.org/web/20110722014513/http://www.objectmentor.com/resources/articles/lsp.pdf&quot;&gt;Liskov Substitution Principle&lt;/a&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ご存知のように、継承が可能かどうかを判断するために使用される別の方法は、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://web.archive.org/web/20110722014513/http://www.objectmentor.com/resources/articles/lsp.pdf&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;リスコフ代入原則&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と呼ばれ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5197c78c69bc09836bc35c15c3eef5138da931c2" translate="yes" xml:space="preserve">
          <source>Liskov Substitution Principle</source>
          <target state="translated">リスコフ置換原理</target>
        </trans-unit>
        <trans-unit id="d422e9f26503f80de1cff472c1db2f215fa1702a" translate="yes" xml:space="preserve">
          <source>Methods shall be either abstract or final</source>
          <target state="translated">方法は、抽象的または最終的なものとする。</target>
        </trans-unit>
        <trans-unit id="ac55c0bd23a1f1346ee8d2c06328fa87ad445ad8" translate="yes" xml:space="preserve">
          <source>My acid test for the above is:</source>
          <target state="translated">私の酸のテストでは上記のようになっています。</target>
        </trans-unit>
        <trans-unit id="9981ec34a9c592b0920bf23bf8fac06054f08043" translate="yes" xml:space="preserve">
          <source>My general rule of thumb: &lt;em&gt;Before using inheritance, consider if composition makes more sense.&lt;/em&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私の一般的な経験則：&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;継承を使用する前に、構成がより意味があるかどうかを検討してください。&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="db3f86242cf06a42d0939d0152ef62fe2f01bab2" translate="yes" xml:space="preserve">
          <source>My take on what to do, if you do allow for inheritance, which you may
  take with a grain of salt is:</source>
          <target state="translated">私の考えでは、相続を認めるならば、塩の粒でも良いと思いますが、どうしたら良いのでしょうか?</target>
        </trans-unit>
        <trans-unit id="fdcdd0dea9447d0f926949cde5bf20294722ed01" translate="yes" xml:space="preserve">
          <source>Now say you want to create a Manager type so you end up with:</source>
          <target state="translated">ここで、マネージャータイプを作成したいとします。</target>
        </trans-unit>
        <trans-unit id="f67f8e82998175522142525ba912b4ae6be97e09" translate="yes" xml:space="preserve">
          <source>Now your aircraft can start with having fixed wings</source>
          <target state="translated">これで、あなたの飛行機は固定翼を持つことから始めることができます。</target>
        </trans-unit>
        <trans-unit id="3fdddf6d088be0ec0a4568052a16a437fcc42087" translate="yes" xml:space="preserve">
          <source>Now, I can replace my engine on the fly as well.</source>
          <target state="translated">今では、その場でエンジンの交換もできるようになりました。</target>
        </trans-unit>
        <trans-unit id="832d28133a55725f1ed6e5888b63068210a2853f" translate="yes" xml:space="preserve">
          <source>On the other hand &lt;b&gt;Object composition&lt;/b&gt; is defined at runtime through objects acquiring references to other objects. In such a case these objects will never be able to reach each-other's protected data (no encapsulation break) and will be forced to respect each other's interface. And in this case also, implementation dependencies will be a lot less than in case of inheritance.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一方、&lt;/font&gt;&lt;/font&gt;&lt;b&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;オブジェクト構成&lt;/font&gt;&lt;/font&gt;&lt;/b&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、他のオブジェクトへの参照を取得するオブジェクトを通じて実行時に定義されます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このような場合、これらのオブジェクトはお互いの保護されたデータに到達することができず（カプセル化の中断なし）、お互いのインターフェースを尊重することを強制されます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この場合も、継承の場合よりも実装の依存関係が大幅に少なくなります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7c7b128050c901c022cde5fd0d94700144c01c7a" translate="yes" xml:space="preserve">
          <source>On the other hand when you have &lt;strong&gt;has-a&lt;/strong&gt; or some adjective relationship between two classes (student has courses) or (teacher studies courses), you chose composition.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一方、あなたが持っている場合&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;がある、&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;またはいくつかの2クラス間の形容詞の関係（学生がコースを持っている）、または（教員研究コース）、あなたは、組成物を選びました。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5aa7d08c0a1cf9428cca33805b546bb71b9e85d3" translate="yes" xml:space="preserve">
          <source>One example of this: You want to create a Stack out of a List. Stack only has pop, push and peek. You shouldn't use inheritance given that you don't want push_back, push_front, removeAt, et al.-kind of functionality in a Stack.</source>
          <target state="translated">その一例です。リストからスタックを作成したいとします。Stackにはpop、push、peekしかありません。push_back,push_front,removeAtなどの機能は必要ないので、継承は使わない方がいいでしょう。</target>
        </trans-unit>
        <trans-unit id="c15fc0f907136cf0672eb8daba99647310e8c8f3" translate="yes" xml:space="preserve">
          <source>Our Set of integers class is a subclass of List of Integers, but is not a subtype, due to it is not satisfying all the features of the List class. The values, and the signature of the methods are satisfied but the properties are not. The behaviour of the add(Integer) method has been clearly changed, not preserving the properties of the parent type. Think from the point of view of the client of your classes. They might receive a Set of integers where a List of integers is expected. The client might want to add a value and get that value added to the List even if that value already exist in the List. But her wont get that behaviour if the value exists. A big suprise for her!</source>
          <target state="translated">私たちのSet of integersクラスはList of Integersのサブクラスですが、Listクラスのすべての機能を満たしていないため、サブタイプではありません。メソッドの値とシグネチャは満たされていますが、プロパティは満たされていません。add(Integer)メソッドの振る舞いが明らかに変更されており、親型のプロパティを保持していません。あなたのクラスのクライアントの視点から考えてみてください。クライアントは整数のセットを受け取るかもしれませんが、そこには整数のリストが期待されています。クライアントは値を追加して、その値が既にリストに存在していてもリストに追加された値を取得したいと思うかもしれません。しかし、値が存在する場合には、その動作は得られません。これは彼女にとって大きな驚きです。</target>
        </trans-unit>
        <trans-unit id="c1ba9f43aacc5af4e732994e2cf99330626de110" translate="yes" xml:space="preserve">
          <source>Personally I learned to always prefer composition over inheritance. There is no programmatic problem you can solve with inheritance which you cannot solve with composition; though you may have to use Interfaces(Java) or Protocols(Obj-C) in some cases. Since C++ doesn't know any such thing, you'll have to use abstract base classes, which means you cannot get entirely rid of inheritance in C++.</source>
          <target state="translated">個人的には、継承よりも常にコンポジションを好むことを学んだ。継承で解決できるプログラム上の問題で、コンポジションで解決できないものはない。C++はそのようなことを知らないので、抽象的な基底クラスを使う必要があり、C++では継承を完全に排除することはできません。</target>
        </trans-unit>
        <trans-unit id="09ac00419cae691f7272de0fcf67b357fbda9a77" translate="yes" xml:space="preserve">
          <source>Prefer composition over inheritance</source>
          <target state="translated">継承よりも構成を好む</target>
        </trans-unit>
        <trans-unit id="ee0347cbc9ba866cc7d164011ffab0691b350235" translate="yes" xml:space="preserve">
          <source>Procedural Code</source>
          <target state="translated">手続きコード</target>
        </trans-unit>
        <trans-unit id="e723b4eaeeb9a79c6611a9a222aeb92911a3f411" translate="yes" xml:space="preserve">
          <source>Reason: &lt;em&gt;Subclassing usually means more complexity and connectedness, i.e. harder to change, maintain, and scale without making mistakes.&lt;/em&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;理由：&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サブクラス化は、通常、より複雑で関連性があることを意味します。&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1b27176c7cd1d943a977fdce1ee934c4c1feeb14" translate="yes" xml:space="preserve">
          <source>See other answers.</source>
          <target state="translated">他の回答を見る</target>
        </trans-unit>
        <trans-unit id="8719dca4ec3565d3812b57bd3de8cc2af492bfeb" translate="yes" xml:space="preserve">
          <source>So for me it looks like if someone does not know if he needs inheritance or composition, the real problem is that he does not know if he want to drink or to eat. Think about your problem domain more, understand it better.</source>
          <target state="translated">だから、私にとっては、継承が必要なのか合成が必要なのかわからない人がいる場合、本当の問題は、飲みたいのか食べたいのかわからないということのように見えます。自分の問題領域をもっと考えて、もっと理解してください。</target>
        </trans-unit>
        <trans-unit id="5e46fa089d47708f97cac794ca257e6960b4ed16" translate="yes" xml:space="preserve">
          <source>So only when subtyping is purposed, i.e. to use the new class later in a polymorphic manner, do we face the problem of choosing inheritance or composition. This is the assumption that gets omitted in the shortened idiom under discussion.</source>
          <target state="translated">ですから、サブタイプ化が目的の場合、つまり、新しいクラスを後から多相的に使用する場合に限って、継承と合成のどちらを選択するかという問題に直面することになります。これが、今議論中の短縮イディオムでは省略されている前提です。</target>
        </trans-unit>
        <trans-unit id="38f67df16186ea732f8e64c3dc6f62ebcca5e137" translate="yes" xml:space="preserve">
          <source>So, if your object need to appear as a different object or behave differently depending on an object state or conditions, then use &lt;strong&gt;Composition&lt;/strong&gt;: Refer to &lt;a href=&quot;http://www.dofactory.com/Patterns/PatternState.aspx&quot;&gt;State&lt;/a&gt; and &lt;a href=&quot;http://www.dofactory.com/Patterns/PatternStrategy.aspx&quot;&gt;Strategy&lt;/a&gt; Design Patterns.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、オブジェクトが別のオブジェクトとして表示される必要がある場合、またはオブジェクトの状態や条件に応じて異なる動作をする必要がある場合は、&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コンポジション&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用します&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.dofactory.com/Patterns/PatternState.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;状態&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.dofactory.com/Patterns/PatternStrategy.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;戦略の&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;設計パターンを&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;参照してください&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="549f8d9bac9806f318f15d88f433b6bc397447c1" translate="yes" xml:space="preserve">
          <source>Sub-class adds extension to base class implementation by calling super.methodName() as first statement =&amp;gt; &lt;strong&gt;&lt;em&gt;You can extend a contract&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サブクラスは、最初のステートメントとしてsuper.methodName（）を呼び出すことにより、基本クラスの実装に拡張機能を追加します=&amp;gt; &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コントラクトを拡張できます&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2edf57dc395184ef34315b418a2b088ba9c59312" translate="yes" xml:space="preserve">
          <source>Subclass is not the same as subtype. You might create subclasses that are not subtypes (and this is when you should use composition). To understand what a subtype is, lets start giving an explanation of what a type is.</source>
          <target state="translated">サブクラスはサブタイプと同じではありません。サブタイプではないサブクラスを作ることがあるかもしれません(これはコンポジションを使うべき時です)。サブタイプとは何かを理解するために、まず型とは何かを説明します。</target>
        </trans-unit>
        <trans-unit id="6280068eb73b4991a7ab571fc93fcf217f265813" translate="yes" xml:space="preserve">
          <source>Subtype is also a type, which has a relation to another type, called parent type (or supertype). The subtype must satisfy the features (values, methods and properties) of the parent type. The relation means that in any context where the supertype is expected, it can be substitutable by a subtype, without affecting the behaviour of the execution. Let&amp;rsquo;s go to see some code to exemplify what I&amp;rsquo;m saying. Suppose I write a List of integers (in some sort of pseudo language):</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サブタイプもタイプであり、親タイプ（またはスーパータイプ）と呼ばれる別のタイプと関係があります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サブタイプは、親タイプの機能（値、メソッド、およびプロパティ）を満たしている必要があります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この関係は、スーパータイプが期待されるあらゆるコンテキストで、実行の動作に影響を与えることなく、サブタイプで置き換えることができることを意味します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私が言っていることを例示するためにいくつかのコードを見に行きましょう。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;整数のリストを（ある種の疑似言語で）書いたとします。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6887946e4c5b4415b62320ae3947b236c9c5c713" translate="yes" xml:space="preserve">
          <source>Subtyping is appropriate and more powerful where the &lt;a href=&quot;https://stackoverflow.com/a/8352969&quot;&gt;invariants can be enumerated&lt;/a&gt;, else use function composition for extensibility.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サブタイピングは、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/8352969&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;不変条件を列挙できる場合に&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;適切でより強力&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。それ以外の場合は、拡張のために関数構成を使用します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e98d1b95929689559f3d4c93532fcfbd040d69e9" translate="yes" xml:space="preserve">
          <source>Suppose an aircraft has only two parts: an engine and wings.</source>
          <target state="translated">飛行機には、エンジンと翼の2つの部品しかないとします。</target>
        </trans-unit>
        <trans-unit id="748d9e332cb80d932e28118f49b5638ba8eaee06" translate="yes" xml:space="preserve">
          <source>The Manager object is composed as an Employee and a Person. The Title behaviour is taken from employee. This explicit composition removes ambiguity among other things and you'll encounter fewer bugs.</source>
          <target state="translated">Managerオブジェクトは、EmployeeとPersonで構成されています。タイトルの振る舞いは employee から取得します。このように明示的に構成することで、特に曖昧さがなくなり、バグの発生が少なくなります。</target>
        </trans-unit>
        <trans-unit id="81ed2eb88eaa37fdff388424251ce97e077ced4c" translate="yes" xml:space="preserve">
          <source>The antidote is the &lt;a href=&quot;https://en.wikipedia.org/wiki/Single_responsibility_principle&quot;&gt;Single Responsibility Principle&lt;/a&gt;. Think of it as a constraint. My class &lt;em&gt;must&lt;/em&gt; do one thing. I &lt;em&gt;must&lt;/em&gt; be able to give my class a name that somehow describes that one thing it does. (There are exceptions to everything, but absolute rules are sometimes better when we're learning.) It follows that I cannot write a base class called &lt;code&gt;ObjectBaseThatContainsVariousFunctionsNeededByDifferentClasses&lt;/code&gt;. Whatever distinct functionality I need must be in its own class, and then other classes that need that functionality can depend on that class, &lt;em&gt;not&lt;/em&gt; inherit from it.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;解毒剤は&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Single_responsibility_principle&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;単一の責任原則&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。それを制約と考えてください。私のクラス&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は一つのことをし&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;なければなり&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ません。私&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;クラスに、その1つのことをどういうわけか説明する名前を付けることができ&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;なければなりません&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。 （すべてに例外はありますが、学習しているときは絶対ルールの方が良い場合があります。）&lt;/font&gt;&lt;/font&gt; &lt;code&gt;ObjectBaseThatContainsVariousFunctionsNeededByDifferentClasses&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;という基本クラスを作成できないということになり&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。私が必要とする明確な機能は、それ自体のクラスになければならず、その機能を必要とする他のクラスは、そのクラス&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;から継承するの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;で&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はなく&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、そのクラスに依存することができます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="756c9ed98907d3961cd495c08dfc9ecbac6456d9" translate="yes" xml:space="preserve">
          <source>The article, &lt;a href=&quot;http://www.agileatwork.com/inheritance-is-evil-the-story-of-the-epic-fail-of-dataannotationsmodelbinder/&quot;&gt;Inheritance is Evil: The Epic Fail of the DataAnnotationsModelBinder&lt;/a&gt;, walks through an example of this in C#. It shows the use of inheritance when composition should have been used and how it could be refactored.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;記事「&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.agileatwork.com/inheritance-is-evil-the-story-of-the-epic-fail-of-dataannotationsmodelbinder/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;継承は悪である：DataAnnotationsModelBinderの重大な失敗」では&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、C＃でこの例を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;紹介してい&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは、コンポジションが使用されるべきであった場合の継承の使用と、それをリファクタリングする方法を示しています。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0f0cb63e7db6c559e277c0e6f5e0b14d3af0a76f" translate="yes" xml:space="preserve">
          <source>The composition has a real edge here: the relationship can be reversed: the &quot;parent class&quot; or &quot;abstract worker&quot; can aggregate any specific &quot;child&quot; objects implementing certain interface + &lt;strong&gt;any child can be set inside any other type of parent, which accepts it's type&lt;/strong&gt;. And there can be any number of objects, for example MergeSort or QuickSort could sort any list of objects implementing an abstract Compare -interface. Or to put it another way: any group of objects which implement &quot;foo()&quot; and other group of objects which can make use of objects having &quot;foo()&quot; can play together.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここで構成には本当の意味があります。関係は逆にすることができます。「親クラス」または「抽象ワーカー」は、特定のインターフェースを実装する特定の「子」オブジェクトを集約&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;できます。子は、他のタイプの親の内部に設定できます。タイプ&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;また、オブジェクトはいくつでも存在できます。たとえば、MergeSortまたはQuickSortは、抽象的なCompareインターフェースを実装するオブジェクトのリストを並べ替えることができます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;または別の言い方をすると、「foo（）」を実装するオブジェクトのグループと、「foo（）」を持つオブジェクトを利用できる他のオブジェクトのグループは、一緒に遊ぶことができます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="33595de1c584d88b32800d1fcaf74682bd919860" translate="yes" xml:space="preserve">
          <source>The first test ensures that all &lt;em&gt;getters&lt;/em&gt; of &lt;code&gt;Foo&lt;/code&gt; make sense in &lt;code&gt;Bar&lt;/code&gt; (= shared properties), while the second test makes sure that all &lt;em&gt;setters&lt;/em&gt; of &lt;code&gt;Foo&lt;/code&gt; make sense in &lt;code&gt;Bar&lt;/code&gt; (= shared functionality).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最初のテスト性を保証すべてが&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ゲッター&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Foo&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;でメイクセンス&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Bar&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（=共有プロパティ）、第二の試験は、必ずすべてのことになりつつ、&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;セッター&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Foo&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;でメイクセンス&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Bar&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（=共有機能）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2c3af0b301854a243ae48ec4eb1b17706b1a405f" translate="yes" xml:space="preserve">
          <source>The issue with inheritance is that it can be used for two orthogonal purposes:</source>
          <target state="translated">相続の問題点は、直交する2つの目的に使えるかどうかです。</target>
        </trans-unit>
        <trans-unit id="fef004bb30a4e0c238ab2b8425780e54d9f658d4" translate="yes" xml:space="preserve">
          <source>The main reason for using inheritance is not as a form of composition - it is so you can get polymorphic behaviour. If you don't need polymorphism, you probably should not be using inheritance.</source>
          <target state="translated">継承を使う主な理由は、構成の形式としてではなく、多相性のある振る舞いを得るためです。多相性を必要としないのであれば、継承を使うべきではないでしょう。</target>
        </trans-unit>
        <trans-unit id="eb4e58f56ade41db120e0e321541a267008d9df9" translate="yes" xml:space="preserve">
          <source>The tight coupling provided by inheritance makes the implementation of a subclass very bound up with the implementation of a super class that any change in the parent implementation will force the sub class to change.</source>
          <target state="translated">継承によって提供されるタイトな結合は、親の実装の任意の変更がサブクラスの変更を強制するスーパークラスの実装と非常にバインドされています。</target>
        </trans-unit>
        <trans-unit id="c6e1071aed30be94da0e2cdf87f2e045c58cf0cd" translate="yes" xml:space="preserve">
          <source>Then there are two ways to design an aircraft class.</source>
          <target state="translated">そうなると、航空機のクラスを設計するには2つの方法があります。</target>
        </trans-unit>
        <trans-unit id="1377e93559cb9cad4550161694e59ceef28236fd" translate="yes" xml:space="preserve">
          <source>Then, I write the Set of integers as a subclass of the List of integers:</source>
          <target state="translated">そして、整数の集合を整数のリストのサブクラスとして書きます。</target>
        </trans-unit>
        <trans-unit id="ba41722cdbc379b118c4e701663ebf832365813b" translate="yes" xml:space="preserve">
          <source>There are downsides of composition, though. If you skip inheritance altogether and only focus on composition, you will notice that you often have to write a couple of extra code lines that weren't necessary if you had used inheritance. You are also sometimes forced to repeat yourself and this violates the &lt;em&gt;DRY Principle&lt;/em&gt; (DRY = Don't Repeat Yourself). Also composition often requires delegation, and a method is just calling another method of another object with no other code surrounding this call. Such &quot;double method calls&quot; (which may easily extend to triple or quadruple method calls and even farther than that) have much worse performance than inheritance, where you simply inherit a method of your parent. Calling an inherited method may be equally fast as calling a non-inherited one, or it may be slightly slower, but is usually still faster than two consecutive method calls.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ただし、構成には欠点があります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;継承を完全にスキップして構成のみに焦点を合わせると、継承を使用した場合には不要だった追加のコード行を2、3記述しなければならないことがよくあります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あなたは時々自分自身を繰り返すことを余儀なくされ、これは&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;DRY原則に&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;違反します&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（DRY =自分を繰り返さないでください）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;また、合成には委任が必要な場合が多く、メソッドは別のオブジェクトの別のメソッドを呼び出すだけで、この呼び出しを囲む他のコードはありません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このような「二重メソッド呼び出し」（これは、3倍または4倍のメソッド呼び出しに簡単に拡張でき、さらにそれよりも遠い可能性があります）は、単純に親のメソッドを継承する継承よりもパフォーマンスがはるかに劣ります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;継承されたメソッドの呼び出しは、継承されていないメソッドの呼び出しと同じくらい高速かもしれませんし、少し遅いかもしれませんが、通常、2つの連続したメソッド呼び出しよりも高速です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="88dbe40d0ed3ede68edda71ef3030a4c38686ece" translate="yes" xml:space="preserve">
          <source>There are two benefits of inheritance: &lt;a href=&quot;https://www.cs.princeton.edu/courses/archive/fall98/cs441/mainus/node12.html&quot;&gt;subtyping and subclassing&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;継承には2つの利点があります。&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://www.cs.princeton.edu/courses/archive/fall98/cs441/mainus/node12.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サブタイピングとサブクラス化です。&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b9613a336cd64521f866d933e120f5f900e231b8" translate="yes" xml:space="preserve">
          <source>There is nothing bad in using reason 1, it is very good thing to have a solid interface on your objects. This can be done using composition or with inheritance, no problem - if this interface is simple and does not change. Usually inheritance is quite effective here.</source>
          <target state="translated">理由1を使用して悪いことは何もありません、それはあなたのオブジェクトに固体のインターフェイスを持っていることは非常に良いことです。これは、コンポジションを使用して行うことができますし、継承を使用しても問題はありません-このインターフェイスがシンプルで変更されない場合。通常、継承はここでは非常に効果的です。</target>
        </trans-unit>
        <trans-unit id="2ff1e38501fc05dc5ab2089683a417fc9d8ae800" translate="yes" xml:space="preserve">
          <source>These two ways can live together just fine and actually support each other.</source>
          <target state="translated">この2つの方法でちょうどいい感じに同居できて、実際に支え合うことができます。</target>
        </trans-unit>
        <trans-unit id="96a0b8fbc97ccd7232afaf128e1f72ba9c64d8fe" translate="yes" xml:space="preserve">
          <source>Think of containment as a &lt;strong&gt;has a&lt;/strong&gt; relationship. A car &quot;has an&quot; engine, a person &quot;has a&quot; name, etc.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;封じ込めに&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;関係があると&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;考えてください&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;車にはエンジンがあり、人には名前があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8b6ec4f6260ad4a41e813b5819357d4fdd59cd6e" translate="yes" xml:space="preserve">
          <source>Think of inheritance as an &lt;strong&gt;is a&lt;/strong&gt; relationship. A car &quot;is a&quot; vehicle, a person &quot;is a&quot; mammal, etc.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;継承&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;関係で&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ある&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;考えてください&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;車は乗り物であり、人は哺乳類である、など。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="66d70c1014e5da803fb71e6a40877d96f60ee637" translate="yes" xml:space="preserve">
          <source>This encourages the use of classes. Inheritance is one of the three tenets of OO design (inheritance, polymorphism, encapsulation).</source>
          <target state="translated">これはクラスの使用を奨励している。継承は、OOデザインの3つの信条(継承、ポリモーフィズム、カプセル化)の1つです。</target>
        </trans-unit>
        <trans-unit id="02d27b966f445c927c12a951352c5a2ee16cc24d" translate="yes" xml:space="preserve">
          <source>This example will work fine, however, what if Person and Employee both declared &lt;code&gt;Title&lt;/code&gt;? Should Manager.Title return &quot;Manager of Operations&quot; or &quot;Mr.&quot;? Under composition this ambiguity is better handled:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この例は正常に機能しますが、PersonとEmployeeの両方が&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Title&lt;/code&gt; を&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;宣言した場合はどうなり&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ますか？&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Manager.Titleは「Manager of Operations」または「Mr.」を返す必要がありますか？&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;構成の下では、このあいまいさはより適切に処理されます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bdb26a327b7e7a1f89230942d7086df40a2044bb" translate="yes" xml:space="preserve">
          <source>This is a classic example of an improper use of inheritance. Use composition in this case.</source>
          <target state="translated">これは、継承の不適切な使用の典型的な例です。この場合はコンポジションを使用します。</target>
        </trans-unit>
        <trans-unit id="892eb23b0e64d101eac60b59156102e0dc8377de" translate="yes" xml:space="preserve">
          <source>This is called the &lt;a href=&quot;https://en.wikipedia.org/wiki/Circle-ellipse_problem&quot;&gt;Circle-Ellipse problem&lt;/a&gt;, which really isn't a problem, just a clear proof that the first test alone isn't enough to conclude that inheritance is possible. In particular, this example highlights that derived classes should &lt;em&gt;extend&lt;/em&gt; the functionality of base classes, never &lt;em&gt;restrict&lt;/em&gt; it. Otherwise, the base class couldn't be used polymorphically.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Circle-ellipse_problem&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Circle-Ellipse問題&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と呼ばれ、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;実際には問題ではありません。最初のテストだけでは継承が可能であると結論付けるのに十分ではないという明確な証拠です。特に、この例は、派生クラス&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が基本クラスの機能を&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;拡張し&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;制限&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ないことを&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;強調して&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;います。そうしないと、基本クラスを多態的に使用できません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="29c1a3f007444e788c520debfe97ad582556ee1e" translate="yes" xml:space="preserve">
          <source>This is inheritance at work. The Employee &quot;is a&quot; Person or inherits from Person. All inheritance relationships are &quot;is-a&quot; relationships. Employee also shadows the Title property from Person, meaning Employee.Title will return the Title for the Employee not the Person.</source>
          <target state="translated">職場での相続です。従業員が「ある」Person、またはPersonから継承します。継承関係はすべて「is-a」関係です。Employeeはまた、PersonからTitleプロパティをシャドーイングします、つまり、Employee.TitleはPersonではなく、EmployeeのTitleを返します。</target>
        </trans-unit>
        <trans-unit id="4bfff73a25d5d08232eb54847cfc587269729bfb" translate="yes" xml:space="preserve">
          <source>To address this question from a different perspective for newer programmers:</source>
          <target state="translated">新人プログラマーのための別の視点からこの問題に取り組むために。</target>
        </trans-unit>
        <trans-unit id="948c2e5682be0db8695bdb1c215662f9b744cd72" translate="yes" xml:space="preserve">
          <source>To give another example, think about the abstract data types, Set of integers and List of integers, the values they can hold are restricted to integers. They both support a set of methods, like add(newValue) and size(). And they both have different properties (class invariant), Sets does not allow duplicates while List does allow duplicates (of course there are other properties that they both satisfy).</source>
          <target state="translated">別の例として、抽象データ型である Set of integers と List of integers を考えてみましょう。どちらも add(newValue)や size()のようなメソッドのセットをサポートしています。また、Setは重複を許さないのに対し、Listは重複を許します(もちろん、両者が満たすプロパティは他にもあります)。</target>
        </trans-unit>
        <trans-unit id="8dfe69d77cbdafc2b0a714261fbe7a897520f08c" translate="yes" xml:space="preserve">
          <source>To subtype is to conform to a type signature, this means composition has always to expose no less amount of APIs of the type. Now the trade offs kick in:</source>
          <target state="translated">サブタイプにすることは型のシグネチャに従うことであり、これはコンポジションが常に型のAPIの量を減らさずに公開しなければならないことを意味します。ここでトレードオフの問題が出てきました。</target>
        </trans-unit>
        <trans-unit id="d54b82edafd720a780f59eaceb3e260ef8e20abd" translate="yes" xml:space="preserve">
          <source>To understand why &quot;&lt;em&gt;prefer&lt;/em&gt; composition over inheritance&quot;, we need first get back the assumption omitted in this shortened idiom.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;「&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;継承&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;よりも&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;構成を&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;優先する&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;」理由を理解するには、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;まず、この短縮されたイディオムで省略された仮定を取り戻す必要があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="30b841e646c940730a92f3a6fde8ddbb4fa7b8a7" translate="yes" xml:space="preserve">
          <source>Unfortunately, the above test alone is not reliable. Use the following instead:</source>
          <target state="translated">残念ながら、上記のテストだけでは信頼性がありません。代わりに以下を使用してください。</target>
        </trans-unit>
        <trans-unit id="902e9220c7e8e78a1688a9c75dc574c63e2d44d9" translate="yes" xml:space="preserve">
          <source>We discover that for just one of the classes that inherits from our base class we want the base class to behave a little differently. So now we go back and tinker with our base class, maybe adding some virtual methods, or even worse, some code that says, &quot;If I'm inherited type A, do this, but if I'm inherited type B, do that.&quot; That's bad for lots of reasons. One is that every time we change the base class, we're effectively changing every inherited class. So we're really changing class A, B, C, and D because we need a slightly different behavior in class A. As careful as we think we are, we might break one of those classes for reasons that have nothing to do with those classes.</source>
          <target state="translated">基底クラスを継承しているクラスのうちの一つだけでも、基底クラスの動作を少し変えたいことに気がつきました。そこで、ベースクラスをいじり直して仮想メソッドを追加したり、さらに悪いことに、「私がA型を継承している場合はこれを実行し、B型を継承している場合はこれを実行する」というようなコードを追加したりします。これは多くの理由で良くありません。一つは、基底クラスを変更するたびに、継承されているすべてのクラスを事実上変更していることです。つまり、Aクラスで少し違った動作が必要だからといって、A,B,C,Dクラスを変更しているのです。</target>
        </trans-unit>
        <trans-unit id="6227a652268bd11d1b6cbf24ac145873c6174ca7" translate="yes" xml:space="preserve">
          <source>We discover that there are some other functions that we want our classes to have. If the way that we add functionality to classes is through inheritance, we have to decide - do we add it to the existing base class, even though not every class that inherits from it needs that functionality? Do we create another base class? But what about classes that already inherit from the other base class?</source>
          <target state="translated">私たちは、クラスに持たせたい機能が他にもあることを発見しました。クラスに機能を追加する方法が継承によるものだとしたら、既存のベース・クラスに機能を追加するかどうかを決めなければなりません。別のベース・クラスを作成するのか?しかし、すでに他の基底クラスを継承しているクラスはどうでしょうか?</target>
        </trans-unit>
        <trans-unit id="e2615b408bdb1e0ba98c485bf5cdf2441399a639" translate="yes" xml:space="preserve">
          <source>We might know why we decided to make all of these classes inherit from each other, but it might not (probably won't) make sense to someone else who has to maintain our code. We might force them into a difficult choice - do I do something really ugly and messy to make the change I need (see the previous bullet point) or do I just rewrite a bunch of this.</source>
          <target state="translated">これらのクラスをすべて互いに継承させることにした理由はわかるかもしれませんが、私たちのコードを保守しなければならない他の誰かにとっては意味がないかもしれません(おそらくそうならないでしょう)。私たちは彼らに難しい選択を迫るかもしれません-私が必要とする変更を行うために、本当に醜くて厄介なことをするか (前の箇条書きを参照してください)それともこれの束を書き換えるか。</target>
        </trans-unit>
        <trans-unit id="0e5823e905840f2d1a0b16c41e23924b6b4651bd" translate="yes" xml:space="preserve">
          <source>What do you think about this approach?</source>
          <target state="translated">このアプローチについてどう思いますか?</target>
        </trans-unit>
        <trans-unit id="c1756bd1b9efd32a1d214b99f06d2f7a4f7d669c" translate="yes" xml:space="preserve">
          <source>When can you use inheritance?</source>
          <target state="translated">相続はどんな時に使えるの?</target>
        </trans-unit>
        <trans-unit id="d970be0b61d6aad200582d59cc11f107fad3f0af" translate="yes" xml:space="preserve">
          <source>When should you use inheritance?</source>
          <target state="translated">相続はいつ使うべきか?</target>
        </trans-unit>
        <trans-unit id="428208f05c644812526e760213d893a9e0d85b4f" translate="yes" xml:space="preserve">
          <source>When we say that the number 5 is of type integer, we are stating that 5 belongs to a set of possible values (as an example, see the possible values for the Java primitive types). We are also stating that there is a valid set of methods I can perform on the value like addition and subtraction. And finally we are stating that there are a set of properties that are always satisfied, for example, if I add the values 3 and 5, I will get 8 as a result.</source>
          <target state="translated">数5が整数型であると言うとき、5は可能な値のセットに属していることを述べています(例として、Javaのプリミティブ型の可能な値を参照してください)。また、足し算や引き算のように、値に対して実行できるメソッドの有効なセットがあることを示しています。そして最後に、常に満たされるプロパティのセットがあることを述べています。</target>
        </trans-unit>
        <trans-unit id="09af7bb65f1be8d511ca24f115a8de295966a370" translate="yes" xml:space="preserve">
          <source>When you have an &lt;strong&gt;is-a&lt;/strong&gt; relation between two classes (example dog is a canine), you go for inheritance.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2つのクラスの間に&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;is-a&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;関係がある&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;場合&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（例：dogは犬）、継承を行います。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ed0055b1a10a69cdf90f2c9f52386c2e6f796966" translate="yes" xml:space="preserve">
          <source>When you want to &quot;copy&quot;/Expose the base class' API, you use inheritance. When you only want to &quot;copy&quot; functionality, use delegation.</source>
          <target state="translated">基底クラスのAPIを &quot;コピー &quot;して公開する場合は継承を使います。機能だけを「コピー」したい場合は、デリゲーションを使います。</target>
        </trans-unit>
        <trans-unit id="68d2706b23183a0d7d52371d8dfbf231a40a8ff7" translate="yes" xml:space="preserve">
          <source>Whether the base class can be instantiated. That is, whether the base class can be non-abstract.  If it can be non-abstract I usually prefer composition</source>
          <target state="translated">基底クラスがインスタンス化できるかどうか。つまり、基底クラスが抽象的でないことができるかどうかです。抽象的ではない場合、私は通常 composition を使用します。</target>
        </trans-unit>
        <trans-unit id="a606c7a3b25e33c0493da4afddb01b3c57747671" translate="yes" xml:space="preserve">
          <source>Which class design is better?</source>
          <target state="translated">どのクラスのデザインが良いのでしょうか?</target>
        </trans-unit>
        <trans-unit id="b1791d8464070d229c878a59d0498e929cd34625" translate="yes" xml:space="preserve">
          <source>While in short words I would agree with &quot;Prefer composition over inheritance&quot;, very often for me it sounds like &quot;prefer potatoes over coca-cola&quot;. There are places for inheritance and places for composition. You need to understand difference, then this question will disappear. What it really means for me is &quot;if you are going to use inheritance - think again, chances are you need composition&quot;.</source>
          <target state="translated">簡潔に言えば、「相続よりも構図を好む」というのは賛成ですが、私にとっては「コカコーラよりもジャガイモを好む」というように聞こえることが多いです。相続する場所と組成する場所があります。その違いを理解していれば、この疑問は消えていくでしょう。私にとって本当に意味があるのは、「もしあなたが継承を使おうとしているのなら、もう一度考えてみてください。</target>
        </trans-unit>
        <trans-unit id="027a582c02cb725a52172159b5c1aa8f207673db" translate="yes" xml:space="preserve">
          <source>Why prefer composition over inheritance?</source>
          <target state="translated">なぜ継承よりも構成を好むのか?</target>
        </trans-unit>
        <trans-unit id="28ebe126ef18993fcdc302fb140fe416bf4b44bd" translate="yes" xml:space="preserve">
          <source>Why prefer composition over inheritance?  What trade-offs are there for each approach?  When should you choose inheritance over composition?</source>
          <target state="translated">なぜ継承よりも構成を好むのか?それぞれのアプローチにはどのようなトレードオフがあるのか?どのような場合にコンポジションよりも継承を選ぶべきか?</target>
        </trans-unit>
        <trans-unit id="d77989c1e3c0e0ace735631597dc367ffdfa6f32" translate="yes" xml:space="preserve">
          <source>Why?</source>
          <target state="translated">Why?</target>
        </trans-unit>
        <trans-unit id="8a5494e3346ea1f03b16a7e69409337675dba6a2" translate="yes" xml:space="preserve">
          <source>With all the undeniable benefits provided by inheritance, here's some of its disadvantages.</source>
          <target state="translated">相続によって得られる否定できないメリットがある中で、ここではそのデメリットをいくつかご紹介します。</target>
        </trans-unit>
        <trans-unit id="187b043aa54e89394b8d77a7ea3e521335e23aa7" translate="yes" xml:space="preserve">
          <source>With inheritance, you can define/modify/extend a capability</source>
          <target state="translated">継承により、ケイパビリティの変更拡張を定義することができます。</target>
        </trans-unit>
        <trans-unit id="c909e0bb35edebdb81f6b7167ac08348fb47388c" translate="yes" xml:space="preserve">
          <source>With the above trade offs in mind, we hence &lt;em&gt;prefer&lt;/em&gt; composition over inheritance. Yet for tightly related classes, i.e. when implicit code reuse really make benefits, or the magic power of open recursion is desired, inheritance shall be the choice.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;上記のトレードオフを考慮して、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;継承&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;よりも&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;構成を&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;優先&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;しかし、密接に関連するクラスの場合、つまり暗黙的なコードの再利用が実際にメリットをもたらす場合、またはオープンな再帰の魔法の力が望まれる場合、継承を選択する必要があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ca54eb74c9e8cc45b664e45d5cd2d030838c910b" translate="yes" xml:space="preserve">
          <source>With the two benefits comes two different purposes for doing inheritance: subtyping oriented and code reuse oriented.</source>
          <target state="translated">2つの利点は、継承を行うための2つの異なる目的、つまりサブタイプ指向とコードの再利用指向です。</target>
        </trans-unit>
        <trans-unit id="c6f46fcaef29ad747c9c053a5250628a59ec8937" translate="yes" xml:space="preserve">
          <source>You can't change the implementation inherited from super classes at runtime (obviously because inheritance is defined at compile time).</source>
          <target state="translated">スーパークラスから継承した実装を実行時に変更することはできません(コンパイル時に継承が定義されているので当然です)。</target>
        </trans-unit>
        <trans-unit id="c841ca97d91f3a90e4a981be8a8e3eaf9eca4bee" translate="yes" xml:space="preserve">
          <source>You have many classes with &lt;strong&gt;same interface&lt;/strong&gt; and you want to save time writing them</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;同じインターフェース&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;持つ多くのクラスがあり、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それらを書く時間を節約したい&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4f7027c12ff7351a14aec7ceaf153b91f1cd5a76" translate="yes" xml:space="preserve">
          <source>You have to use same Base Class for each object</source>
          <target state="translated">各オブジェクトには同じベースクラスを使用しなければなりません。</target>
        </trans-unit>
        <trans-unit id="db9d5b717fd3a0428e874979b657d64399fb0932" translate="yes" xml:space="preserve">
          <source>You may have noticed that most OO languages don't allow multiple inheritance. While there are a couple of cases where multiple inheritance can really buy you something, but those are rather exceptions than the rule. Whenever you run into a situation where you think &quot;multiple inheritance would be a really cool feature to solve this problem&quot;, you are usually at a point where you should re-think inheritance altogether, since even it may require a couple of extra code lines, a solution based on composition will usually turn out to be much more elegant, flexible and future proof.</source>
          <target state="translated">ほとんどの OO 言語は多重継承を許可していないことにお気づきかもしれません。多重継承によって何かを得ることができるケースはいくつかありますが、それらはルールというよりはむしろ例外です。多重継承はこの問題を解決するのにとてもクールな機能だ」と思うような状況に遭遇した場合、通常は継承を完全に再考すべき時期に来ているのです。</target>
        </trans-unit>
        <trans-unit id="6461c7d3d8ea98d44e07224509d8188c5fd65616" translate="yes" xml:space="preserve">
          <source>You need to have a look at &lt;strong&gt;&lt;a href=&quot;http://web.archive.org/web/20110722014513/http://www.objectmentor.com/resources/articles/lsp.pdf&quot;&gt;The Liskov Substitution Principle&lt;/a&gt;&lt;/strong&gt; in Uncle Bob's &lt;a href=&quot;http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod&quot;&gt;SOLID&lt;/a&gt; principles of class design. :)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;クラス設計の&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ボブおじさんの&lt;/font&gt;&lt;a href=&quot;http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;SOLID&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;原則&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;a href=&quot;http://web.archive.org/web/20110722014513/http://www.objectmentor.com/resources/articles/lsp.pdf&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;のリスコフ代替原則を&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;確認する必要があります&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;:)&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="365fd5a8c9d353531398ff13dddbb1a9cd04bd1f" translate="yes" xml:space="preserve">
          <source>You need to modify the private variables, which can not be public in any case</source>
          <target state="translated">プライベート変数を変更する必要がありますが、これはどのような場合でもパブリックにすることはできません。</target>
        </trans-unit>
        <trans-unit id="debc0fa37d0f792340965981a5a035cc009e22ae" translate="yes" xml:space="preserve">
          <source>You should prefer potatoes over coca cola when you want to eat, and coca cola over potatoes when you want to drink.</source>
          <target state="translated">食べたいときはコカコーラよりもポテトを、飲みたいときはポテトよりもコカコーラを優先したほうがいい。</target>
        </trans-unit>
        <trans-unit id="70a3f516785b8d2c0cef4b9bfa90e997156cdb0e" translate="yes" xml:space="preserve">
          <source>Your base class breaks encapsulation by exposing implementation details to subclasses in the form of protected members. This makes your system rigid and fragile. The more tragic flaw however is the new subclass brings with it all the baggage and opinion of the inheritance chain.</source>
          <target state="translated">あなたの基底クラスは、実装の詳細を protected メンバの形でサブクラスに公開することでカプセル化を破ります。これはシステムを硬直化させ、壊れやすくしてしまいます。しかし、より悲劇的な欠陥は、新しいサブクラスが継承チェーンのすべての荷物と意見を持ってくることです。</target>
        </trans-unit>
        <trans-unit id="a7b6ec9ba3ba6cb389d0be77dde1a3a2b1b3c784" translate="yes" xml:space="preserve">
          <source>a bar is a foo</source>
          <target state="translated">酒場はフーフー</target>
        </trans-unit>
        <trans-unit id="321619efe153470d82ced208ab3b5924f96e157d" translate="yes" xml:space="preserve">
          <source>a bar is a foo, &lt;strong&gt;AND&lt;/strong&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;バーはfooであり、&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;かつ&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6e151551bf5c2dbfb47e6ba04d1cb6d6f9881994" translate="yes" xml:space="preserve">
          <source>all of this applies less to small projects than large ones, and less
  to private classes than public ones</source>
          <target state="translated">小規模プロジェクトは大規模プロジェクトよりも少ないし、私立クラスは公立クラスよりも少ない</target>
        </trans-unit>
        <trans-unit id="7704fccffa58783a84da4eb8c0166fdf191a3fdd" translate="yes" xml:space="preserve">
          <source>an engine with wings. But what if I wanted to change</source>
          <target state="translated">翼のあるエンジン。しかし、私が変更したいと思ったら?</target>
        </trans-unit>
        <trans-unit id="8dde7711f9ea3766728a62f96c6515f11ba48445" translate="yes" xml:space="preserve">
          <source>and change them to rotary wings on the fly. It's essentially</source>
          <target state="translated">で、その場で回転翼に変更します。本質的には</target>
        </trans-unit>
        <trans-unit id="729852eb34a3e850ade763665925935482786102" translate="yes" xml:space="preserve">
          <source>bars can do everything that foos can do.</source>
          <target state="translated">バーはフォーズができることは何でもできる。</target>
        </trans-unit>
        <trans-unit id="6b17efef870e73ac5a6927dfab46f89a43147e20" translate="yes" xml:space="preserve">
          <source>e.g. A Bird may need only the fly behavior of an Airplane. In this case, it makes sense to extract it out as an interface / class / both and make it a member of both classes.</source>
          <target state="translated">例えば、Birdは飛行機の飛行動作だけが必要な場合があります。この場合、両方のインタフェースクラスとして取り出して、両方のクラスのメンバにするのが理にかなっています。</target>
        </trans-unit>
        <trans-unit id="886bf306e5453e891f922ec6a0c0d688fc89e7b2" translate="yes" xml:space="preserve">
          <source>e.g. A Cessna biplane will expose the complete interface of an airplane, if not more. So that makes it fit to derive from Airplane.</source>
          <target state="translated">例えば、セスナの複葉機は飛行機の完全なインターフェースを露出させますが、それ以上ではないにしても。ということは飛行機から派生するのに適しているということになります。</target>
        </trans-unit>
        <trans-unit id="696ad70d6976b57faf133b6ee5ef5b78578b56f1" translate="yes" xml:space="preserve">
          <source>e.g. If  &lt;em&gt;Car&lt;/em&gt; contains &lt;em&gt;Vehicle&lt;/em&gt; and if you have to get price of the &lt;em&gt;Car&lt;/em&gt;, which has been defined in &lt;em&gt;Vehicle&lt;/em&gt;, your code will be like this</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;たとえば、 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Car&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vehicle&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が含まれ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ていて、&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vehicle&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;で&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;定義されている&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Carの&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;価格を取得する必要がある場合&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、コードは次のようになります。&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2c3a0ef6ef4316e6e5d1c614dce6be8faad1cb40" translate="yes" xml:space="preserve">
          <source>i.e.</source>
          <target state="translated">i.e.</target>
        </trans-unit>
        <trans-unit id="1fc4018d629a16d759e998a6c95e3a4757b18a87" translate="yes" xml:space="preserve">
          <source>implementation (for code reuse)</source>
          <target state="translated">じつよう</target>
        </trans-unit>
        <trans-unit id="8242e2b420f05d62490ce28c67966e458a29c56a" translate="yes" xml:space="preserve">
          <source>inheritance is probably the worst form of coupling you can have</source>
          <target state="translated">継承はおそらく最悪の結合形態です。</target>
        </trans-unit>
        <trans-unit id="f2804e2e271f82c68b66f986da5df262ee4cb967" translate="yes" xml:space="preserve">
          <source>interface (for polymorphism)</source>
          <target state="translated">インタフェース</target>
        </trans-unit>
        <trans-unit id="13ac262839d95d773d2a3d28f3999d812e21769b" translate="yes" xml:space="preserve">
          <source>properties, or I redesign &lt;code&gt;Aircraft&lt;/code&gt; as:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プロパティ、または私は&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Aircraft&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を次のよう&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に再設計&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;します：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8823f52bf571c1ac1f5e036a349bdba206f867f6" translate="yes" xml:space="preserve">
          <source>the engine on the fly as well?</source>
          <target state="translated">エンジンも同様にオンザフライで?</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
