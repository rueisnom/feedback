<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/4968406">
    <body>
      <group id="4968406">
        <trans-unit id="68c822705550a0fe3eba2f4b6cfc0ee6243f9cab" translate="yes" xml:space="preserve">
          <source>(Sourced from &lt;a href=&quot;http://www.dev-archive.net/articles/js-dot-notation/&quot;&gt;here&lt;/a&gt;.)</source>
          <target state="translated">（从&lt;a href=&quot;http://www.dev-archive.net/articles/js-dot-notation/&quot;&gt;此处获取&lt;/a&gt; 。）</target>
        </trans-unit>
        <trans-unit id="9ce5191381a8198893fdecfac7d98f7531ebc4d2" translate="yes" xml:space="preserve">
          <source>1) When the property names are dynamically determined (when the exact names are not known until runtime).</source>
          <target state="translated">1)当属性名称是动态确定的(运行时才知道具体名称)。</target>
        </trans-unit>
        <trans-unit id="9a62f2473c548b2946734289be132a1b2c4af6db" translate="yes" xml:space="preserve">
          <source>2) When using a for..in loop to go through all the properties of an object.</source>
          <target state="translated">2)当使用for...in循环遍历一个对象的所有属性时。</target>
        </trans-unit>
        <trans-unit id="4298c03650ff5961fb699fb4f2f5411bf6bcfa57" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;obj.x&lt;/code&gt; would not work in this case.</source>
          <target state="translated">&lt;code&gt;obj.x&lt;/code&gt; 在这种情况下不起作用。</target>
        </trans-unit>
        <trans-unit id="576a6319c26d2317f097f1506336f636c5537b0a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;In case of Arrays&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;如果是数组&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7642826e1b724ce145f183b960f9bb0c97d22df6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Roundup:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Roundup:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c982f6b78d4bb7e6e57f366c80865102763bea5d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Secondly, square bracket notation is useful when dealing with
 property names which vary in a predictable way:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;其次，方括号表示法在处理以可预测的方式变化的属性名称时非常有用：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b81f4e37c52163f07a459864ccf172d22bb1eacd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Square bracket notation allows the use of characters that can't be used with dot notation:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;方括号符号允许使用点符号不能使用的字符：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="60b74803c404c167295ffa0db73d3552a104679a" translate="yes" xml:space="preserve">
          <source>An example where the dot notation fails</source>
          <target state="translated">点符号失效的一个例子</target>
        </trans-unit>
        <trans-unit id="3f674b6ada34031bf6feea8efd249c8998c1829a" translate="yes" xml:space="preserve">
          <source>And this triggers the dreaded &quot;expected indentifier&quot; (at least on IE8 on windows xp, I havn't tried other environments). The simple fix for that is to switch to bracket notation:</source>
          <target state="translated">而这就触发了可怕的 &quot;预期的标示符&quot;(至少在IE8上的windows xp上,我没有尝试过其他环境)。简单的解决方法是改用括号符号。</target>
        </trans-unit>
        <trans-unit id="5dc5d18f133a30daf0ccdd6189a324ec2391bd3c" translate="yes" xml:space="preserve">
          <source>Another example of characters that can't be used with dot notation is &lt;em&gt;property names that themselves contain a dot&lt;/em&gt;.</source>
          <target state="translated">不能与点符号一起使用的字符的另一个示例是&lt;em&gt;本身包含点的属性名称&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="8e073952115ceef863efbd2eace19e459436c161" translate="yes" xml:space="preserve">
          <source>Be careful while using these notations:
For eg. if we want to access a function present in the parent of a window.
In IE :</source>
          <target state="translated">在使用这些标记时要小心。例如,如果我们想访问一个窗口的父节点中的函数,那么在IE中,我们可以使用以下的符号:在IE中.NET中</target>
        </trans-unit>
        <trans-unit id="d171d992a686a126b04cdc83c74acd6624e57fbe" translate="yes" xml:space="preserve">
          <source>Bracket notation can use variables, so it is useful in two instances where dot notation will not work:</source>
          <target state="translated">括号记法可以使用变量,所以在两种情况下,它在点记法不能用的情况下很有用。</target>
        </trans-unit>
        <trans-unit id="2a920be382886a91227215e2cbe3929f1922ce88" translate="yes" xml:space="preserve">
          <source>Case where &lt;code&gt;[]&lt;/code&gt; notation is helpful :</source>
          <target state="translated">其中 &lt;code&gt;[]&lt;/code&gt; 符号有用的情况：</target>
        </trans-unit>
        <trans-unit id="52268d1dbc202579e36bf5059baa879b522e7994" translate="yes" xml:space="preserve">
          <source>Context: I've written a code generator which produces these expressions and I'm wondering which is preferable.</source>
          <target state="translated">语境。我写了一个代码生成器,生成这些表达式,我想知道哪个好?</target>
        </trans-unit>
        <trans-unit id="441362377355832c552abe72650e6087cdb95875" translate="yes" xml:space="preserve">
          <source>Dot notation does not work with some keywords (like &lt;code&gt;new&lt;/code&gt; and &lt;code&gt;class&lt;/code&gt;) in internet explorer 8.</source>
          <target state="translated">点表示法不适用于Internet Explorer 8中的某些关键字（例如 &lt;code&gt;new&lt;/code&gt; 和 &lt;code&gt;class&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="553fbdba630d44fe728a198543023944e7be36b2" translate="yes" xml:space="preserve">
          <source>Dot notation is always preferable. If you are using some &quot;smarter&quot; IDE or text editor, it will show undefined names from that object. 
Use brackets notation only when you have the name with like dashes or something similar invalid. And also if the name is stored in a variable.</source>
          <target state="translated">点符号总是比较好用。如果你使用一些 &quot;更聪明 &quot;的IDE或文本编辑器,它将显示来自该对象的未定义名称。只有当你的名字有像破折号或类似的东西无效时,才使用括号符号。还有,如果这个名字是存储在一个变量中。</target>
        </trans-unit>
        <trans-unit id="1e697b0d1ef4b88b0d38f2d0852f24918bc7f934" translate="yes" xml:space="preserve">
          <source>Dot notation is faster to write and clearer to read.</source>
          <target state="translated">圆点符号的书写速度更快,读起来更清晰。</target>
        </trans-unit>
        <trans-unit id="f895079bdd18c5762ee3e0ff0c543a0738d1a65b" translate="yes" xml:space="preserve">
          <source>For example a json response could contain a property called &lt;code&gt;bar.Baz&lt;/code&gt;.</source>
          <target state="translated">例如，一个json响应可能包含一个名为 &lt;code&gt;bar.Baz&lt;/code&gt; 的属性。</target>
        </trans-unit>
        <trans-unit id="cd9d6579a7429ed6c0277fe551439e624a237930" translate="yes" xml:space="preserve">
          <source>Generally speaking, they do the same job.</source>
          <target state="translated">一般来说,他们做的工作是一样的。</target>
        </trans-unit>
        <trans-unit id="717b2226b7373507849d3c1a378cd42efa31de45" translate="yes" xml:space="preserve">
          <source>I had this code:</source>
          <target state="translated">我有这个代码。</target>
        </trans-unit>
        <trans-unit id="7ad05d8e74b6d958d7ae67dd66bbbccdf4205e3a" translate="yes" xml:space="preserve">
          <source>If your object is dynamic and there could be some random values in keys like &lt;code&gt;number&lt;/code&gt; and &lt;code&gt;[]&lt;/code&gt;or any other special character, for example -</source>
          <target state="translated">如果您的对象是动态对象，并且键中可能有一些随机值，例如 &lt;code&gt;number&lt;/code&gt; 和 &lt;code&gt;[]&lt;/code&gt; 或任何其他特殊字符，例如-</target>
        </trans-unit>
        <trans-unit id="da6adb2e9c618356084933ae4271293e912a777e" translate="yes" xml:space="preserve">
          <source>In code:</source>
          <target state="translated">在代码中。</target>
        </trans-unit>
        <trans-unit id="c472cca6e6bf36e74839b54bba2499756d60d09f" translate="yes" xml:space="preserve">
          <source>JavaScript property access: dot notation vs. brackets</source>
          <target state="translated">JavaScript属性访问:点符号与方括号的比较</target>
        </trans-unit>
        <trans-unit id="29fe38adf472b0f4375786c3da37ab2d093f5a1f" translate="yes" xml:space="preserve">
          <source>Let me add some more use case of the square-bracket notation. If you want to access a property say &lt;code&gt;x-proxy&lt;/code&gt; in a object, then &lt;code&gt;-&lt;/code&gt; will be interpreted wrongly. Their are some other cases too like space, dot, etc., where dot operation will not help you. Also if u have the key in a variable then only way to access the value of the key in a object is by bracket notation. Hope you get some more context.</source>
          <target state="translated">让我添加方括号符号的更多用例。 如果要访问对象中的属性（例如 &lt;code&gt;x-proxy&lt;/code&gt; ) ，则 &lt;code&gt;-&lt;/code&gt; 将被错误地解释。 它们还有其他一些情况，例如空格，点等，在这种情况下点操作将无济于事。 同样，如果u在变量中具有键，则访问对象中键值的唯一方法是使用方括号表示法。 希望您能获得更多背景信息。</target>
        </trans-unit>
        <trans-unit id="6cfbe36c7cc4a548384f006f6913749eab42d335" translate="yes" xml:space="preserve">
          <source>Nevertheless, the bracket notation gives you the opportunity to do stuff that you can't do with dot notation, like</source>
          <target state="translated">然而,括号符号让你有机会做一些用点符号无法做到的事情,例如</target>
        </trans-unit>
        <trans-unit id="ba34fdeefe54feab2e2d0eb871271fe427028c31" translate="yes" xml:space="preserve">
          <source>Now if you try to access in like &lt;code&gt;a.1&lt;/code&gt; it will through an error, because it is expecting an string over there.</source>
          <target state="translated">现在，如果您尝试像 &lt;code&gt;a.1&lt;/code&gt; 这样访问，它将遇到一个错误，因为它在那儿期望一个字符串。</target>
        </trans-unit>
        <trans-unit id="5cdd08676026a1b36ac9eeff2563f1c0eef895e9" translate="yes" xml:space="preserve">
          <source>Other than that, I suppose it's just a matter of taste. IMHO, the dot notation is shorter and it makes it more obvious that it's a property rather than an array element (although of course JavaScript does not have associative arrays anyway).</source>
          <target state="translated">除此之外,我想这只是一个品味的问题。IMHO,点符号更短,而且它使它更明显地表明它是一个属性而不是数组元素(当然,反正JavaScript没有关联数组)。</target>
        </trans-unit>
        <trans-unit id="0716ff8bc348eed265bcaff7ddd6eb20c259b73e" translate="yes" xml:space="preserve">
          <source>Other than the obvious fact that the first form could use a variable and not just a string literal, is there any reason to use one over the other, and if so under which cases?</source>
          <target state="translated">除了第一种形式可以使用变量而不仅仅是字符串的字段外,是否有理由使用其中一种而不是另一种?</target>
        </trans-unit>
        <trans-unit id="1957c0bcf72e8ddda94e7d7e622e19813539630e" translate="yes" xml:space="preserve">
          <source>So if you know that the property you are interested in is called &amp;ldquo;length&amp;rdquo;, you say &lt;code&gt;value.length&lt;/code&gt;. If you want to extract the property named by the value held in the variable &lt;code&gt;i&lt;/code&gt;, you say &lt;code&gt;value[i]&lt;/code&gt;. And because property names can be any string, if you want to access a property named &lt;code&gt;&amp;ldquo;2&amp;rdquo;&lt;/code&gt; or &lt;code&gt;&amp;ldquo;John Doe&amp;rdquo;&lt;/code&gt;, you must use square brackets: &lt;code&gt;value[2] or value[&quot;John Doe&quot;]&lt;/code&gt;. This is the case even though you know the precise name of the property in advance, because neither &lt;code&gt;&amp;ldquo;2&amp;rdquo; nor &amp;ldquo;John Doe&amp;rdquo;&lt;/code&gt; is a valid variable name and so cannot be accessed through dot notation.</source>
          <target state="translated">因此，如果您知道您感兴趣的属性称为&amp;ldquo;长度&amp;rdquo;，请说 &lt;code&gt;value.length&lt;/code&gt; 。 如果要提取由变量 &lt;code&gt;i&lt;/code&gt; 中保存的值命名的属性，请说 &lt;code&gt;value[i]&lt;/code&gt; 。 并且由于属性名称可以是任何字符串，因此，如果要访问名为 &lt;code&gt;&amp;ldquo;2&amp;rdquo;&lt;/code&gt; 或 &lt;code&gt;&amp;ldquo;John Doe&amp;rdquo;&lt;/code&gt; 的属性，则必须使用方括号： &lt;code&gt;value[2] or value[&quot;John Doe&quot;]&lt;/code&gt; 。 即使事先知道属性的确切名称，情况仍然如此，因为 &lt;code&gt;&amp;ldquo;2&amp;rdquo; nor &amp;ldquo;John Doe&amp;rdquo;&lt;/code&gt; 都不是有效的变量名称，因此无法通过点表示法进行访问。</target>
        </trans-unit>
        <trans-unit id="5e21d8c1b6386b5f1efafef90dd5637c815cf2dd" translate="yes" xml:space="preserve">
          <source>Square bracket notation allows access to properties containing
  special characters and selection of
  properties using variables</source>
          <target state="translated">方括号符号允许访问包含特殊字符的属性,并使用变量选择属性。</target>
        </trans-unit>
        <trans-unit id="ad1afec469e0c0cc1572ad17a698b4a1ddc1ef74" translate="yes" xml:space="preserve">
          <source>The bracket notation allows you to access properties by name stored in a variable:</source>
          <target state="translated">括号符号允许你通过存储在变量中的名称访问属性。</target>
        </trans-unit>
        <trans-unit id="833eeeeb8cf9f9fb7e2cbc64b35b085d470c2ad3" translate="yes" xml:space="preserve">
          <source>The elements in an array are stored in properties. Because the names of these properties are numbers and we often need to get their name from a variable, we have to use the bracket syntax to access them. &lt;strong&gt;The length property of an array tells us how many elements it contains. This property name is a valid variable name, and we know its name in advance, so to find the length of an array, you typically write &lt;code&gt;array.length&lt;/code&gt; because that is easier to write than &lt;code&gt;array[&quot;length&quot;]&lt;/code&gt;.&lt;/strong&gt;</source>
          <target state="translated">数组中的元素存储在属性中。 因为这些属性的名称是数字，并且我们经常需要从变量中获取它们的名称，所以我们必须使用方括号语法来访问它们。 &lt;strong&gt;数组的length属性告诉我们它包含多少个元素。&lt;/strong&gt; &lt;strong&gt;该属性名称是一个有效的变量名称，我们事先知道它的名称，因此通常使用 &lt;code&gt;array.length&lt;/code&gt; 来查找数组的长度，因为它比 &lt;code&gt;array[&quot;length&quot;]&lt;/code&gt; 容易编写。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="96e702e80019dc89f76e72ce8abeb11feb23b761" translate="yes" xml:space="preserve">
          <source>The property name has special character.</source>
          <target state="translated">属性名称具有特殊性。</target>
        </trans-unit>
        <trans-unit id="d0429d01e094779d75926b775a3e82736d16c0cc" translate="yes" xml:space="preserve">
          <source>The property name is assigned to a variable and you want to access the 
property value by this variable.</source>
          <target state="translated">属性名称被分配给一个变量,你想通过这个变量访问属性值。</target>
        </trans-unit>
        <trans-unit id="ec939e09f11e2966b48c72dff871ba9d164e8fd1" translate="yes" xml:space="preserve">
          <source>The property name is number.</source>
          <target state="translated">物业名称为号。</target>
        </trans-unit>
        <trans-unit id="4d5d53e36b3cdbf6797d824518c41e58846af6c9" translate="yes" xml:space="preserve">
          <source>The property names shouldn't interfere with the syntax rules of javascript for you to be able to access them as &lt;code&gt;json.property_name&lt;/code&gt;</source>
          <target state="translated">属性名称不应干扰javascript的语法规则，以便您能够以 &lt;code&gt;json.property_name&lt;/code&gt; 的身份访问它们</target>
        </trans-unit>
        <trans-unit id="0174754bd065de20c90fe39ddb21f9021f02702c" translate="yes" xml:space="preserve">
          <source>The two most common ways to access properties in JavaScript are with a dot and with square brackets. Both &lt;code&gt;value.x and value[x]&lt;/code&gt; access a property on value&amp;mdash;but not necessarily the same property. &lt;strong&gt;The difference is in how x is interpreted. When using a dot, the part after the dot must be a valid variable name, and it directly names the property. When using square brackets, the expression between the brackets is evaluated to get the property name. Whereas value.x fetches the property of value named &amp;ldquo;x&amp;rdquo;, value[x] tries to evaluate the expression x and uses the result as the property name.&lt;/strong&gt;</source>
          <target state="translated">在JavaScript中访问属性的两种最常见方法是使用点和方括号。 &lt;code&gt;value.x and value[x]&lt;/code&gt; 访问value的属性，但不一定是同一属性。 &lt;strong&gt;区别在于x的解释方式。&lt;/strong&gt; &lt;strong&gt;使用点时，点后的部分必须是有效的变量名，并且直接命名属性。&lt;/strong&gt; &lt;strong&gt;使用方括号时，将对方括号之间的表达式求值以获取属性名称。&lt;/strong&gt; &lt;strong&gt;value.x获取名为&amp;ldquo; x&amp;rdquo;的值的属性，而value [x]尝试计算表达式x并将结果用作属性名称。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cc8e61c69da1eb568c4c2ae5ec53e80e9ef89168" translate="yes" xml:space="preserve">
          <source>This can be extended to any property containing special characters.</source>
          <target state="translated">这可以扩展到任何包含特殊字符的属性。</target>
        </trans-unit>
        <trans-unit id="188955539a5ea31bd9d0392cd55ac3af147a90df" translate="yes" xml:space="preserve">
          <source>We may either use:</source>
          <target state="translated">我们既可以用。</target>
        </trans-unit>
        <trans-unit id="d116589e64a7b5343fab4435bfef941d355c1a0f" translate="yes" xml:space="preserve">
          <source>You have to use square bracket notation when -</source>
          <target state="translated">你必须使用方括号符号,当 -</target>
        </trans-unit>
        <trans-unit id="07e289f45e4d3b0c50c47d696dcc865687745d6b" translate="yes" xml:space="preserve">
          <source>You need to use brackets if the property names has special characters:</source>
          <target state="translated">如果属性名称有特殊字符,需要使用括号。</target>
        </trans-unit>
        <trans-unit id="a95791318de7e005ccd3c1777299c0ebcdebc783" translate="yes" xml:space="preserve">
          <source>including non-ASCII (UTF-8) characters, as in &lt;code&gt;myForm[&quot;ダ&quot;]&lt;/code&gt; (&lt;a href=&quot;https://stackoverflow.com/q/30929233/287948&quot;&gt;more examples&lt;/a&gt;).</source>
          <target state="translated">包括非ASCII（UTF-8）字符，如 &lt;code&gt;myForm[&quot;ダ&quot;]&lt;/code&gt; （ &lt;a href=&quot;https://stackoverflow.com/q/30929233/287948&quot;&gt;更多示例&lt;/a&gt; ）。</target>
        </trans-unit>
        <trans-unit id="e225a3570f34b8e8c1d42219eee0eff711b61a1d" translate="yes" xml:space="preserve">
          <source>is not equivalent to</source>
          <target state="translated">不等同于</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">or</target>
        </trans-unit>
        <trans-unit id="7491bbbbc6dee872715550f1d7ad8e4845a55563" translate="yes" xml:space="preserve">
          <source>source: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects&lt;/a&gt;</source>
          <target state="translated">来源： &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects&quot;&gt;https&lt;/a&gt; : //developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects</target>
        </trans-unit>
        <trans-unit id="1df81d62610a87a7f253064deec3ef3fa1de58d8" translate="yes" xml:space="preserve">
          <source>to access it</source>
          <target state="translated">访问它</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
