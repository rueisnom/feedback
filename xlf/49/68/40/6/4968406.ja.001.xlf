<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/4968406">
    <body>
      <group id="4968406">
        <trans-unit id="68c822705550a0fe3eba2f4b6cfc0ee6243f9cab" translate="yes" xml:space="preserve">
          <source>(Sourced from &lt;a href=&quot;http://www.dev-archive.net/articles/js-dot-notation/&quot;&gt;here&lt;/a&gt;.)</source>
          <target state="translated">（ &lt;a href=&quot;http://www.dev-archive.net/articles/js-dot-notation/&quot;&gt;ここ&lt;/a&gt;から入手。）</target>
        </trans-unit>
        <trans-unit id="9ce5191381a8198893fdecfac7d98f7531ebc4d2" translate="yes" xml:space="preserve">
          <source>1) When the property names are dynamically determined (when the exact names are not known until runtime).</source>
          <target state="translated">1)プロパティ名が動的に決定される場合(実行時まで正確な名前がわからない場合</target>
        </trans-unit>
        <trans-unit id="9a62f2473c548b2946734289be132a1b2c4af6db" translate="yes" xml:space="preserve">
          <source>2) When using a for..in loop to go through all the properties of an object.</source>
          <target state="translated">2)for...inループを使って、オブジェクトのすべてのプロパティを処理する場合。</target>
        </trans-unit>
        <trans-unit id="4298c03650ff5961fb699fb4f2f5411bf6bcfa57" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;obj.x&lt;/code&gt; would not work in this case.</source>
          <target state="translated">この場合、 &lt;code&gt;obj.x&lt;/code&gt; は機能しません。</target>
        </trans-unit>
        <trans-unit id="576a6319c26d2317f097f1506336f636c5537b0a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;In case of Arrays&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;配列の場合&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7642826e1b724ce145f183b960f9bb0c97d22df6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Roundup:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Roundup:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c982f6b78d4bb7e6e57f366c80865102763bea5d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Secondly, square bracket notation is useful when dealing with
 property names which vary in a predictable way:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;次に、予測可能な方法で変化するプロパティ名を処理する場合、角括弧表記が役立ちます。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b81f4e37c52163f07a459864ccf172d22bb1eacd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Square bracket notation allows the use of characters that can't be used with dot notation:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;角括弧表記では、ドット表記では使用できない文字を使用できます。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="60b74803c404c167295ffa0db73d3552a104679a" translate="yes" xml:space="preserve">
          <source>An example where the dot notation fails</source>
          <target state="translated">ドット表記が失敗する例</target>
        </trans-unit>
        <trans-unit id="3f674b6ada34031bf6feea8efd249c8998c1829a" translate="yes" xml:space="preserve">
          <source>And this triggers the dreaded &quot;expected indentifier&quot; (at least on IE8 on windows xp, I havn't tried other environments). The simple fix for that is to switch to bracket notation:</source>
          <target state="translated">そして、これが「期待されていたインデント」という恐ろしい現象を引き起こします (少なくとも Windows xp の IE8 では、他の環境は試していません)。そのための簡単な修正方法は、大括弧表記に切り替えることです。</target>
        </trans-unit>
        <trans-unit id="5dc5d18f133a30daf0ccdd6189a324ec2391bd3c" translate="yes" xml:space="preserve">
          <source>Another example of characters that can't be used with dot notation is &lt;em&gt;property names that themselves contain a dot&lt;/em&gt;.</source>
          <target state="translated">ドット表記で使用できない文字のもう1つの例は&lt;em&gt;、それ自体がドットを含むプロパティ名です&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="8e073952115ceef863efbd2eace19e459436c161" translate="yes" xml:space="preserve">
          <source>Be careful while using these notations:
For eg. if we want to access a function present in the parent of a window.
In IE :</source>
          <target state="translated">これらの表記法を使用する際には注意が必要です。例えば、ウィンドウの親にある関数にアクセスしたい場合などです。IEでは .</target>
        </trans-unit>
        <trans-unit id="d171d992a686a126b04cdc83c74acd6624e57fbe" translate="yes" xml:space="preserve">
          <source>Bracket notation can use variables, so it is useful in two instances where dot notation will not work:</source>
          <target state="translated">ブラケット記法は変数を使用することができるので、ドット記法が機能しない2つの場合に便利です。</target>
        </trans-unit>
        <trans-unit id="2a920be382886a91227215e2cbe3929f1922ce88" translate="yes" xml:space="preserve">
          <source>Case where &lt;code&gt;[]&lt;/code&gt; notation is helpful :</source>
          <target state="translated">&lt;code&gt;[]&lt;/code&gt; 表記が役立つケース：</target>
        </trans-unit>
        <trans-unit id="52268d1dbc202579e36bf5059baa879b522e7994" translate="yes" xml:space="preserve">
          <source>Context: I've written a code generator which produces these expressions and I'm wondering which is preferable.</source>
          <target state="translated">コンテキストです。これらの式を生成するコードジェネレータを書いたのですが、どちらがいいのか迷っています。</target>
        </trans-unit>
        <trans-unit id="441362377355832c552abe72650e6087cdb95875" translate="yes" xml:space="preserve">
          <source>Dot notation does not work with some keywords (like &lt;code&gt;new&lt;/code&gt; and &lt;code&gt;class&lt;/code&gt;) in internet explorer 8.</source>
          <target state="translated">Internet Explorer 8の一部のキーワード（ &lt;code&gt;new&lt;/code&gt; や &lt;code&gt;class&lt;/code&gt; など ）ではドット表記が機能しません。</target>
        </trans-unit>
        <trans-unit id="553fbdba630d44fe728a198543023944e7be36b2" translate="yes" xml:space="preserve">
          <source>Dot notation is always preferable. If you are using some &quot;smarter&quot; IDE or text editor, it will show undefined names from that object. 
Use brackets notation only when you have the name with like dashes or something similar invalid. And also if the name is stored in a variable.</source>
          <target state="translated">ドット表記が常に望ましいです。もしあなたが &quot;スマートな &quot;IDEやテキストエディタを使用している場合、そのオブジェクトから未定義の名前が表示されます。括弧表記は、ダッシュのようなものを使った名前が無効な場合にのみ使用してください。また、名前が変数に格納されている場合も同様です。</target>
        </trans-unit>
        <trans-unit id="1e697b0d1ef4b88b0d38f2d0852f24918bc7f934" translate="yes" xml:space="preserve">
          <source>Dot notation is faster to write and clearer to read.</source>
          <target state="translated">ドット表記の方が早く書けて、読みやすい。</target>
        </trans-unit>
        <trans-unit id="f895079bdd18c5762ee3e0ff0c543a0738d1a65b" translate="yes" xml:space="preserve">
          <source>For example a json response could contain a property called &lt;code&gt;bar.Baz&lt;/code&gt;.</source>
          <target state="translated">たとえば、json応答には &lt;code&gt;bar.Baz&lt;/code&gt; というプロパティを含めることができます。</target>
        </trans-unit>
        <trans-unit id="cd9d6579a7429ed6c0277fe551439e624a237930" translate="yes" xml:space="preserve">
          <source>Generally speaking, they do the same job.</source>
          <target state="translated">一般的には同じ仕事をしています。</target>
        </trans-unit>
        <trans-unit id="717b2226b7373507849d3c1a378cd42efa31de45" translate="yes" xml:space="preserve">
          <source>I had this code:</source>
          <target state="translated">私はこのコードを持っていました。</target>
        </trans-unit>
        <trans-unit id="7ad05d8e74b6d958d7ae67dd66bbbccdf4205e3a" translate="yes" xml:space="preserve">
          <source>If your object is dynamic and there could be some random values in keys like &lt;code&gt;number&lt;/code&gt; and &lt;code&gt;[]&lt;/code&gt;or any other special character, for example -</source>
          <target state="translated">オブジェクトが動的で、 &lt;code&gt;number&lt;/code&gt; や &lt;code&gt;[]&lt;/code&gt; やその他の特殊文字などのキーにランダムな値が含まれている可能性がある場合-</target>
        </trans-unit>
        <trans-unit id="da6adb2e9c618356084933ae4271293e912a777e" translate="yes" xml:space="preserve">
          <source>In code:</source>
          <target state="translated">コードでは</target>
        </trans-unit>
        <trans-unit id="c472cca6e6bf36e74839b54bba2499756d60d09f" translate="yes" xml:space="preserve">
          <source>JavaScript property access: dot notation vs. brackets</source>
          <target state="translated">JavaScript のプロパティアクセス:ドット表記と括弧の比較</target>
        </trans-unit>
        <trans-unit id="29fe38adf472b0f4375786c3da37ab2d093f5a1f" translate="yes" xml:space="preserve">
          <source>Let me add some more use case of the square-bracket notation. If you want to access a property say &lt;code&gt;x-proxy&lt;/code&gt; in a object, then &lt;code&gt;-&lt;/code&gt; will be interpreted wrongly. Their are some other cases too like space, dot, etc., where dot operation will not help you. Also if u have the key in a variable then only way to access the value of the key in a object is by bracket notation. Hope you get some more context.</source>
          <target state="translated">角括弧表記の使用例をもう少し追加しましょう。 プロパティにアクセスする場合、オブジェクトで &lt;code&gt;x-proxy&lt;/code&gt; とすると、 &lt;code&gt;-&lt;/code&gt; が誤って解釈されます。 それらは、スペース、ドットなど、ドット操作が役に立たない他のいくつかのケースです。 また、uが変数にキーを持っている場合、オブジェクトのキーの値にアクセスする唯一の方法は、ブラケット表記です。 あなたがいくつかのより多くのコンテキストを得ることを願っています。</target>
        </trans-unit>
        <trans-unit id="6cfbe36c7cc4a548384f006f6913749eab42d335" translate="yes" xml:space="preserve">
          <source>Nevertheless, the bracket notation gives you the opportunity to do stuff that you can't do with dot notation, like</source>
          <target state="translated">それにもかかわらず、大括弧表記を使用すると、ドット表記ではできないことを行うことができます。</target>
        </trans-unit>
        <trans-unit id="ba34fdeefe54feab2e2d0eb871271fe427028c31" translate="yes" xml:space="preserve">
          <source>Now if you try to access in like &lt;code&gt;a.1&lt;/code&gt; it will through an error, because it is expecting an string over there.</source>
          <target state="translated">ここで、 &lt;code&gt;a.1&lt;/code&gt; のようにアクセスしようとすると、エラーが発生します。これは、そこに文字列が必要であるためです。</target>
        </trans-unit>
        <trans-unit id="5cdd08676026a1b36ac9eeff2563f1c0eef895e9" translate="yes" xml:space="preserve">
          <source>Other than that, I suppose it's just a matter of taste. IMHO, the dot notation is shorter and it makes it more obvious that it's a property rather than an array element (although of course JavaScript does not have associative arrays anyway).</source>
          <target state="translated">それ以外は好みの問題だと思います。IMHO的には、ドット表記の方が短くて済みますし、配列要素ではなくプロパティであることがより明確になります (もちろん JavaScript には連想配列はありませんが)。</target>
        </trans-unit>
        <trans-unit id="0716ff8bc348eed265bcaff7ddd6eb20c259b73e" translate="yes" xml:space="preserve">
          <source>Other than the obvious fact that the first form could use a variable and not just a string literal, is there any reason to use one over the other, and if so under which cases?</source>
          <target state="translated">最初の形式では文字列リテラルではなく変数を使うことができるという明白な事実以外に、他の形式でどちらかを使う理由があるのでしょうか?</target>
        </trans-unit>
        <trans-unit id="1957c0bcf72e8ddda94e7d7e622e19813539630e" translate="yes" xml:space="preserve">
          <source>So if you know that the property you are interested in is called &amp;ldquo;length&amp;rdquo;, you say &lt;code&gt;value.length&lt;/code&gt;. If you want to extract the property named by the value held in the variable &lt;code&gt;i&lt;/code&gt;, you say &lt;code&gt;value[i]&lt;/code&gt;. And because property names can be any string, if you want to access a property named &lt;code&gt;&amp;ldquo;2&amp;rdquo;&lt;/code&gt; or &lt;code&gt;&amp;ldquo;John Doe&amp;rdquo;&lt;/code&gt;, you must use square brackets: &lt;code&gt;value[2] or value[&quot;John Doe&quot;]&lt;/code&gt;. This is the case even though you know the precise name of the property in advance, because neither &lt;code&gt;&amp;ldquo;2&amp;rdquo; nor &amp;ldquo;John Doe&amp;rdquo;&lt;/code&gt; is a valid variable name and so cannot be accessed through dot notation.</source>
          <target state="translated">したがって、関心のあるプロパティが「長さ」と呼ばれていることがわかっている場合は、 &lt;code&gt;value.length&lt;/code&gt; と言います 。 変数 &lt;code&gt;i&lt;/code&gt; に保持されている値によって名前が付けられたプロパティを抽出する場合は、 &lt;code&gt;value[i]&lt;/code&gt; と言います 。 また、プロパティ名には任意の文字列を使用できるため、 &lt;code&gt;&amp;ldquo;2&amp;rdquo;&lt;/code&gt; または &lt;code&gt;&amp;ldquo;John Doe&amp;rdquo;&lt;/code&gt; という名前のプロパティにアクセスする場合は、角かっこを使用する必要があります： &lt;code&gt;value[2] or value[&quot;John Doe&quot;]&lt;/code&gt; 。 &lt;code&gt;&amp;ldquo;2&amp;rdquo; nor &amp;ldquo;John Doe&amp;rdquo;&lt;/code&gt; も有効な変数名ではないため、ドット表記ではアクセスできないため、事前にプロパティの正確な名前を知っていても、これが当てはまります。</target>
        </trans-unit>
        <trans-unit id="5e21d8c1b6386b5f1efafef90dd5637c815cf2dd" translate="yes" xml:space="preserve">
          <source>Square bracket notation allows access to properties containing
  special characters and selection of
  properties using variables</source>
          <target state="translated">角括弧記法では、特殊文字を含むプロパティへのアクセスや、変数を使用したプロパティの選択が可能です。</target>
        </trans-unit>
        <trans-unit id="ad1afec469e0c0cc1572ad17a698b4a1ddc1ef74" translate="yes" xml:space="preserve">
          <source>The bracket notation allows you to access properties by name stored in a variable:</source>
          <target state="translated">大括弧表記を使用すると、変数に格納されている名前でプロパティにアクセスすることができます。</target>
        </trans-unit>
        <trans-unit id="833eeeeb8cf9f9fb7e2cbc64b35b085d470c2ad3" translate="yes" xml:space="preserve">
          <source>The elements in an array are stored in properties. Because the names of these properties are numbers and we often need to get their name from a variable, we have to use the bracket syntax to access them. &lt;strong&gt;The length property of an array tells us how many elements it contains. This property name is a valid variable name, and we know its name in advance, so to find the length of an array, you typically write &lt;code&gt;array.length&lt;/code&gt; because that is easier to write than &lt;code&gt;array[&quot;length&quot;]&lt;/code&gt;.&lt;/strong&gt;</source>
          <target state="translated">配列の要素はプロパティに格納されます。 これらのプロパティの名前は数値であり、変数から名前を取得する必要があることが多いため、ブラケットの構文を使用してアクセスする必要があります。 &lt;strong&gt;配列の長さプロパティは、配列に含まれる要素の数を示します。&lt;/strong&gt; &lt;strong&gt;このプロパティ名は有効な変数名であり、その名前は事前にわかっているため、配列の長さを調べるには、通常 &lt;code&gt;array.length&lt;/code&gt; と記述します。これは &lt;code&gt;array[&quot;length&quot;]&lt;/code&gt; よりも簡単に記述できるためです。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="96e702e80019dc89f76e72ce8abeb11feb23b761" translate="yes" xml:space="preserve">
          <source>The property name has special character.</source>
          <target state="translated">プロパティ名には特殊文字が入っています。</target>
        </trans-unit>
        <trans-unit id="d0429d01e094779d75926b775a3e82736d16c0cc" translate="yes" xml:space="preserve">
          <source>The property name is assigned to a variable and you want to access the 
property value by this variable.</source>
          <target state="translated">プロパティ名が変数に代入されていて、この変数でプロパティ値にアクセスしたい。</target>
        </trans-unit>
        <trans-unit id="ec939e09f11e2966b48c72dff871ba9d164e8fd1" translate="yes" xml:space="preserve">
          <source>The property name is number.</source>
          <target state="translated">物件名は番号です。</target>
        </trans-unit>
        <trans-unit id="4d5d53e36b3cdbf6797d824518c41e58846af6c9" translate="yes" xml:space="preserve">
          <source>The property names shouldn't interfere with the syntax rules of javascript for you to be able to access them as &lt;code&gt;json.property_name&lt;/code&gt;</source>
          <target state="translated">プロパティ名は、 &lt;code&gt;json.property_name&lt;/code&gt; としてアクセスできるように、JavaScriptの構文規則に干渉しないようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="0174754bd065de20c90fe39ddb21f9021f02702c" translate="yes" xml:space="preserve">
          <source>The two most common ways to access properties in JavaScript are with a dot and with square brackets. Both &lt;code&gt;value.x and value[x]&lt;/code&gt; access a property on value&amp;mdash;but not necessarily the same property. &lt;strong&gt;The difference is in how x is interpreted. When using a dot, the part after the dot must be a valid variable name, and it directly names the property. When using square brackets, the expression between the brackets is evaluated to get the property name. Whereas value.x fetches the property of value named &amp;ldquo;x&amp;rdquo;, value[x] tries to evaluate the expression x and uses the result as the property name.&lt;/strong&gt;</source>
          <target state="translated">JavaScriptでプロパティにアクセスする最も一般的な2つの方法は、ドットと角括弧です。 &lt;code&gt;value.x and value[x]&lt;/code&gt; どちらもvalueのプロパティにアクセスしますが、必ずしも同じプロパティである必要はありません。 &lt;strong&gt;違いは、xの解釈方法です。&lt;/strong&gt; &lt;strong&gt;ドットを使用する場合、ドットの後の部分は有効な変数名である必要があり、プロパティを直接指定します。&lt;/strong&gt; &lt;strong&gt;角かっこを使用すると、角かっこ間の式が評価され、プロパティ名が取得されます。&lt;/strong&gt; &lt;strong&gt;value.xは「x」という名前の値のプロパティをフェッチしますが、value [x]は式xを評価し、その結果をプロパティ名として使用します。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cc8e61c69da1eb568c4c2ae5ec53e80e9ef89168" translate="yes" xml:space="preserve">
          <source>This can be extended to any property containing special characters.</source>
          <target state="translated">これは、特殊文字を含む任意のプロパティに拡張することができます。</target>
        </trans-unit>
        <trans-unit id="188955539a5ea31bd9d0392cd55ac3af147a90df" translate="yes" xml:space="preserve">
          <source>We may either use:</source>
          <target state="translated">どちらかを使用することがあります。</target>
        </trans-unit>
        <trans-unit id="d116589e64a7b5343fab4435bfef941d355c1a0f" translate="yes" xml:space="preserve">
          <source>You have to use square bracket notation when -</source>
          <target state="translated">を使用する場合は、角括弧表記を使用しなければなりません。</target>
        </trans-unit>
        <trans-unit id="07e289f45e4d3b0c50c47d696dcc865687745d6b" translate="yes" xml:space="preserve">
          <source>You need to use brackets if the property names has special characters:</source>
          <target state="translated">プロパティ名に特殊文字が含まれる場合は、括弧を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="a95791318de7e005ccd3c1777299c0ebcdebc783" translate="yes" xml:space="preserve">
          <source>including non-ASCII (UTF-8) characters, as in &lt;code&gt;myForm[&quot;ダ&quot;]&lt;/code&gt; (&lt;a href=&quot;https://stackoverflow.com/q/30929233/287948&quot;&gt;more examples&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;myForm[&quot;ダ&quot;]&lt;/code&gt; ように、ASCII以外の文字（UTF-8）を含めます （ &lt;a href=&quot;https://stackoverflow.com/q/30929233/287948&quot;&gt;他の例&lt;/a&gt; ）。</target>
        </trans-unit>
        <trans-unit id="e225a3570f34b8e8c1d42219eee0eff711b61a1d" translate="yes" xml:space="preserve">
          <source>is not equivalent to</source>
          <target state="translated">に相当するものではありません。</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">or</target>
        </trans-unit>
        <trans-unit id="7491bbbbc6dee872715550f1d7ad8e4845a55563" translate="yes" xml:space="preserve">
          <source>source: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects&lt;/a&gt;</source>
          <target state="translated">ソース： &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects&quot;&gt;https&lt;/a&gt; : //developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects</target>
        </trans-unit>
        <trans-unit id="1df81d62610a87a7f253064deec3ef3fa1de58d8" translate="yes" xml:space="preserve">
          <source>to access it</source>
          <target state="translated">アクセスするには</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
