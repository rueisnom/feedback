<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/492384">
    <body>
      <group id="492384">
        <trans-unit id="10ce61d5fc7ebd47aabd8eb8b72014f7f2340586" translate="yes" xml:space="preserve">
          <source>Another trick is the one mentioned by &lt;a href=&quot;https://stackoverflow.com/users/13422/zan-lynx&quot;&gt;Zan&lt;/a&gt;, which is to stash the size somewhere.  For example, if you're dynamically allocating the array, allocate a block one int bigger than the one you need, stash the size in the first int, and return ptr+1 as the pointer to the array.  When you need the size, decrement the pointer and peek at the stashed value.  Just remember to free the whole block starting from the beginning, and not just the array.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;もう1つのトリックは、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/users/13422/zan-lynx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Zanが&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;言及したもので&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、サイズをどこかに隠しておくことです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;たとえば、配列を動的に割り当てる場合は、必要なブロックより1 int大きいブロックを割り当て、最初のintにサイズを隠し、配列へのポインタとしてptr + 1を返します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サイズが必要な場合は、ポインタをデクリメントして、隠された値をのぞきます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列だけでなく、ブロック全体を最初から解放することを忘れないでください。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d11b1c1385532dc8067a903d480e65fd81e46980" translate="yes" xml:space="preserve">
          <source>As all the correct answers have stated, you cannot get this information from the decayed pointer value of the array alone. If the decayed pointer is the argument received by the function, then the size of the originating array has to be provided in some other way for the function to come to know that size.</source>
          <target state="translated">すべての正解が述べているように、配列の減衰ポインタの値だけでは、この情報を得ることはできません。減衰したポインタが関数が受け取った引数である場合、関数がそのサイズを知るためには、元の配列のサイズが他の方法で提供されなければなりません。</target>
        </trans-unit>
        <trans-unit id="dd32328a6e77149b4b9b14f965cf8ff8566078c3" translate="yes" xml:space="preserve">
          <source>But you have many choices:</source>
          <target state="translated">しかし、あなたには多くの選択肢があります。</target>
        </trans-unit>
        <trans-unit id="602fedc5c9b2886487ee5b0fcc672af11be840a3" translate="yes" xml:space="preserve">
          <source>But you have to care about set the right length of the array you want to store, because the is no way to check this length, like our friends massively explained.</source>
          <target state="translated">しかし、あなたは、私たちの友人が大規模に説明したように、この長さをチェックする方法はありませんので、あなたが格納したい配列の正しい長さを設定することを気にする必要があります。</target>
        </trans-unit>
        <trans-unit id="0acd6640891f3785aa71d20d3ffa1780f5e658db" translate="yes" xml:space="preserve">
          <source>But, this suggestion is kind of silly for your problem, since the function is defined to know exactly the size of the array that is passed in (hence, there is little need to use sizeof at all on the array). What it does do, though, is offer some type safety. It will prohibit you from passing in an array of an unwanted size.</source>
          <target state="translated">なぜなら,関数は,渡された配列のサイズを正確に知るように定義されているからです(したがって,配列に対してsizeofを使用する必要性はほとんどありません).しかし、この関数ができることは、いくつかの型の安全性を提供することです。これは、望まないサイズの配列を渡すことを禁止します。</target>
        </trans-unit>
        <trans-unit id="6c8c0c8ecdad45c167a9ff434b56aa2d590f0229" translate="yes" xml:space="preserve">
          <source>First off, here is some code:</source>
          <target state="translated">まず、コードを紹介します。</target>
        </trans-unit>
        <trans-unit id="fe6d9ac415a8ad19cfbf47f30ac3e96aa0762e2e" translate="yes" xml:space="preserve">
          <source>For dynamic arrays (&lt;em&gt;malloc&lt;/em&gt; or C++ &lt;em&gt;new&lt;/em&gt;) you need to store the size of the array as mentioned by others or perhaps build an array manager structure which handles add, remove, count, etc. Unfortunately C doesn't do this nearly as well as C++ since you basically have to build it for each different array type you are storing which is cumbersome if you have multiple types of arrays that you need to manage.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;動的配列（&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;malloc&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;またはC ++ &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;new&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）の場合、他の人が述べたように配列のサイズを保存するか、追加、削除、カウントなどを処理する配列マネージャー構造を構築する必要があります。残念ながら、Cはこれをほぼ同様に実行しませんC ++は、基本的に、格納するさまざまな配列タイプごとにビルドする必要があるため、管理する必要のある配列のタイプが複数ある場合は面倒です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2f23b59c4687d469d303210de520e977023550b7" translate="yes" xml:space="preserve">
          <source>For static arrays, such as the one in your example, there is a common macro used to get the size, but it is &lt;strong&gt;not recommended&lt;/strong&gt; as it does not check if the parameter is really a static array. The macro is used in real code though, e.g. in the Linux kernel headers although it may be slightly different than the one below:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;例のような静的配列の場合、サイズを取得するために使用される一般的なマクロが&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ありますが、パラメーターが実際に静的配列であるかどうかをチェックしない&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ため、お勧め&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;できません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ただし、マクロは実際のコードで使用されます。たとえば、Linuxカーネルヘッダーでは、次のマクロとは少し異なる場合があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="14ed25bd9732c3c36bf129f1b5cc33c92a8346cd" translate="yes" xml:space="preserve">
          <source>For this specific example, yes, there is, IF you use typedefs (see below). Of course, if you do it this way, you're just as well off to use SIZEOF_DAYS, since you know what the pointer is pointing to.</source>
          <target state="translated">この具体的な例では、型定義を使えば、そうですね。もちろん、もしこのようにするのであれば、ポインタが何を指しているのかを知っているので、 SIZEOF_DAYS を使うのと同じようにしても良いでしょう。</target>
        </trans-unit>
        <trans-unit id="141956d01f14a420a3dc5c201376daa2dee674fc" translate="yes" xml:space="preserve">
          <source>Here is an example with a &lt;strong&gt;foo_t&lt;/strong&gt; structure:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;foo_t&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;構造の&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;例を次に示し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="86f2f936b59fab1ab3ec6f71cdd72cccfb575caa" translate="yes" xml:space="preserve">
          <source>Here's a suggestion different from what has been provided thus far,that will work: Pass a pointer to the array instead. This suggestion is similar to the C++ style suggestions, except that C does not support templates or references:</source>
          <target state="translated">これまでに提供されてきたものとは異なる提案があります。代わりに配列へのポインタを渡すことです。この提案はC++スタイルの提案に似ていますが、Cはテンプレートや参照をサポートしていません。</target>
        </trans-unit>
        <trans-unit id="46693e03cf22d90d0f93108a25e489f5d3a92d46" translate="yes" xml:space="preserve">
          <source>How to find the 'sizeof' (a pointer pointing to an array)</source>
          <target state="translated">sizeof' (配列を指すポインタ)の見つけ方</target>
        </trans-unit>
        <trans-unit id="9ab07dd61fdfd8627c1a331bdae0022bd7ae1119" translate="yes" xml:space="preserve">
          <source>If possible, the C++ stdlib such as vector which is much safer and easier to use.</source>
          <target state="translated">できれば、ベクターのようなC++の標準libの方がはるかに安全で使いやすいです。</target>
        </trans-unit>
        <trans-unit id="d0b46d6ef49ee3d75a4dbba073222fed24d0661e" translate="yes" xml:space="preserve">
          <source>If the function is supposed to be able to operate on any size of array, then you will have to provide the size to the function as additional information.</source>
          <target state="translated">関数が任意のサイズの配列に対して操作できるようになっている場合は、追加情報としてサイズを関数に提供しなければなりません。</target>
        </trans-unit>
        <trans-unit id="c6062a3e19049053872338bed9d33476e2751f18" translate="yes" xml:space="preserve">
          <source>If you have a (void *) pointer, as is returned by malloc()  or the like, then, no, there is no way to determine what data structure the pointer is pointing to and thus, no way to determine its size.</source>
          <target state="translated">malloc()などで返されるような (void *)ポインタを持っている場合は、そのポインタがどのデータ構造体を指しているのかを判断する方法がありませんので、そのサイズを判断する方法がありません。</target>
        </trans-unit>
        <trans-unit id="e6958f12750bb26b0bccaf4848ffff1b524b5436" translate="yes" xml:space="preserve">
          <source>In strings there is a &lt;code&gt;'\0'&lt;/code&gt; character at the end so the length of the string can be gotten using functions like &lt;code&gt;strlen&lt;/code&gt;. The problem with an integer array, for example, is that you can't use any value as an end value so one possible solution is to address the array and use as an end value the &lt;code&gt;NULL&lt;/code&gt; pointer.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;文字列では&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、末尾に&lt;/font&gt;&lt;/font&gt; &lt;code&gt;'\0'&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;文字があるため、文字列の長さは&lt;/font&gt;&lt;/font&gt; &lt;code&gt;strlen&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;などの関数を使用して取得できます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;たとえば、整数配列の問題は、値を終了値として使用できないため、1つの可能な解決策は、配列をアドレス指定し、終了値として&lt;/font&gt;&lt;/font&gt; &lt;code&gt;NULL&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ポインターを使用することです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="39198bb1f7eaf58b699e3f8e53d3bcc1dcd2c877" translate="yes" xml:space="preserve">
          <source>Is there a way to find out the size of the array that &lt;code&gt;ptr&lt;/code&gt; is pointing to (instead of just giving its size, which is four bytes on a 32-bit system)?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;ptr&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が指して&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;いる配列のサイズを見つける方法はありますか&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（32ビットシステムでは4バイトであるサイズを指定するのではなく）？&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="07880985c52909f262ace43c24cfd089828a2e49" translate="yes" xml:space="preserve">
          <source>My solution to this problem is to save the length of the array into a struct Array as a meta-information about the array.</source>
          <target state="translated">この問題に対する私の解決策は、配列の長さを配列に関するメタ情報として struct Array に保存することです。</target>
        </trans-unit>
        <trans-unit id="601fc31e19a62dcede16df70c47db1339186e28f" translate="yes" xml:space="preserve">
          <source>No, you can't use &lt;code&gt;sizeof(ptr)&lt;/code&gt; to find the size of array &lt;code&gt;ptr&lt;/code&gt; is pointing to.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;いいえ、&lt;/font&gt; &lt;code&gt;ptr&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;が指している&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列のサイズを見つける&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ために&lt;/font&gt;&lt;/font&gt; &lt;code&gt;sizeof(ptr)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用することはできません&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2fc50448bc90a910ae322337b63940c931383c72" translate="yes" xml:space="preserve">
          <source>No, you can't.  The compiler doesn't know what the pointer is pointing to.  There are tricks, like ending the array with a known out-of-band value and then counting the size up until that value, but that's not using sizeof.</source>
          <target state="translated">いいえ、できません。コンパイラはポインタが何を指しているかを知りません。帯域外の既知の値で配列を終わらせて、その値までのサイズをカウントするというトリックがありますが、それはizeofを使っていないことになります。</target>
        </trans-unit>
        <trans-unit id="9bec2e0a2ab5d7914b00e66063347a28366e65e1" translate="yes" xml:space="preserve">
          <source>Obviously, add a parameter</source>
          <target state="translated">明らかに、パラメータ</target>
        </trans-unit>
        <trans-unit id="f3c8c95c5e534bcd2ea0034a0d83177efa6923f4" translate="yes" xml:space="preserve">
          <source>Output:</source>
          <target state="translated">Output:</target>
        </trans-unit>
        <trans-unit id="cd5ec5f9a89b02a08d6ef27b687b10468a768634" translate="yes" xml:space="preserve">
          <source>Size of days[] is 20 which is no of elements * size of it's data type.
While the size of pointer is 4 no matter what it is pointing to.
Because a pointer points to other element by storing it's address.</source>
          <target state="translated">days[]のサイズは、要素数*データ型のサイズである20です。一方、ポインタのサイズは何を指していても4です。ポインタはアドレスを格納することで他の要素を指しているからです。</target>
        </trans-unit>
        <trans-unit id="67c386b96a00f5de86c613e320fc011c37e08ea4" translate="yes" xml:space="preserve">
          <source>The answer is, &quot;No.&quot;</source>
          <target state="translated">答えは &quot;ノー &quot;だ</target>
        </trans-unit>
        <trans-unit id="fa9c39995dd1ff8dce2e476e17f4e93ea18afd56" translate="yes" xml:space="preserve">
          <source>There is a clean solution with C++ templates, without using &lt;strong&gt;sizeof()&lt;/strong&gt;. The following &lt;strong&gt;getSize()&lt;/strong&gt; function returns the size of any static array:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;sizeof（）&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用せずに、C ++テンプレートを使用したクリーンなソリューションがあり&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;次の&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;getSize（）&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;関数は、静的配列のサイズを返します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e44dd688381f034ce96a93c3bd130b3b8764b361" translate="yes" xml:space="preserve">
          <source>There is no magic solution. C is not a reflective language. Objects don't automatically know what they are.</source>
          <target state="translated">魔法のような解決策はありません。C言語は反射型言語ではありません。オブジェクトは自動的にそれが何であるかを知っているわけではありません。</target>
        </trans-unit>
        <trans-unit id="7c3b2b478f2ad5676d40019bf7757cd287e9c0ab" translate="yes" xml:space="preserve">
          <source>Though allocating extra memory(more than the size of array) will be helpful if you want  to store the length in extra space.</source>
          <target state="translated">余分なメモリ(配列のサイズ以上)を確保しておくと、余計なスペースに長さを保存したい場合に便利です。</target>
        </trans-unit>
        <trans-unit id="1d0f061328b0e92a7b111b41701869da1907b7af" translate="yes" xml:space="preserve">
          <source>Usage is:</source>
          <target state="translated">使用法は</target>
        </trans-unit>
        <trans-unit id="3d875ab8efb66ba19251aecc0b3be5ad3c5ae8d0" translate="yes" xml:space="preserve">
          <source>Use a more complex object. Define a structure which contains the dynamic array and also the size of the array. Then, pass the address of the structure.</source>
          <target state="translated">より複雑なオブジェクトを使用します。動的配列と配列のサイズを含む構造体を定義します。そして、構造体のアドレスを渡します。</target>
        </trans-unit>
        <trans-unit id="5df51d8bd29ca933544649e006ec229ebaebb906" translate="yes" xml:space="preserve">
          <source>What C programmers do is store the size of the array somewhere.  It can be part of a structure, or the programmer can cheat a bit and malloc() more memory than requested in order to store a length value before the start of the array.</source>
          <target state="translated">C言語のプログラマが行うことは、配列のサイズをどこかに格納することです。これは構造体の一部であったり、プログラマーが少しごまかしてmalloc()で要求された以上のメモリを確保し、配列の開始前に長さの値を格納したりすることができます。</target>
        </trans-unit>
        <trans-unit id="9545e86ebbefbb4457f0124949eefa1a6c018333" translate="yes" xml:space="preserve">
          <source>Wrap the call in a macro and automatically add a parameter</source>
          <target state="translated">呼び出しをマクロでラップし、パラメータを自動的に追加する</target>
        </trans-unit>
        <trans-unit id="1e68b7703215e610fbb0873d6069896a37f3eb0f" translate="yes" xml:space="preserve">
          <source>You can do something like this:</source>
          <target state="translated">こんな感じのことができます。</target>
        </trans-unit>
        <trans-unit id="b257f0e600c75b1962e5a51ef1795eb149a8574c" translate="yes" xml:space="preserve">
          <source>You can google for reasons to be wary of macros like this. Be careful.</source>
          <target state="translated">このようなマクロに注意する理由はググってみてください。気をつけてくださいね。</target>
        </trans-unit>
        <trans-unit id="6665a8e783ec08ddbaf4aed1389a74ddfe999e6d" translate="yes" xml:space="preserve">
          <source>array_size is passing to the &lt;strong&gt;&lt;em&gt;size&lt;/em&gt;&lt;/strong&gt; variable:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;array_sizeが&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サイズ&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;変数に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;渡されてい&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
