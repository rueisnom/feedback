<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://stackoverflow.com/questions/492384">
    <body>
      <group id="492384">
        <trans-unit id="10ce61d5fc7ebd47aabd8eb8b72014f7f2340586" translate="yes" xml:space="preserve">
          <source>Another trick is the one mentioned by &lt;a href=&quot;https://stackoverflow.com/users/13422/zan-lynx&quot;&gt;Zan&lt;/a&gt;, which is to stash the size somewhere.  For example, if you're dynamically allocating the array, allocate a block one int bigger than the one you need, stash the size in the first int, and return ptr+1 as the pointer to the array.  When you need the size, decrement the pointer and peek at the stashed value.  Just remember to free the whole block starting from the beginning, and not just the array.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Другой трюк, упомянутый &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/users/13422/zan-lynx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Заном&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , это где-то спрятать размер. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Например, если вы динамически распределяете массив, выделите блок на один int больше того, который вам нужен, сохраните размер в первом int и верните ptr + 1 в качестве указателя на массив. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Когда вам нужен размер, уменьшите указатель и посмотрите на спрятанное значение. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Просто не забудьте освободить весь блок, начиная с самого начала, а не только массив.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d11b1c1385532dc8067a903d480e65fd81e46980" translate="yes" xml:space="preserve">
          <source>As all the correct answers have stated, you cannot get this information from the decayed pointer value of the array alone. If the decayed pointer is the argument received by the function, then the size of the originating array has to be provided in some other way for the function to come to know that size.</source>
          <target state="translated">Как было сказано во всех правильных ответах,получить эту информацию из распавшегося значения указателя массива в одиночку невозможно.Если распавшийся указатель является аргументом,полученным функцией,то для того,чтобы функция узнала этот размер,необходимо каким-то другим образом указать размер исходного массива.</target>
        </trans-unit>
        <trans-unit id="dd32328a6e77149b4b9b14f965cf8ff8566078c3" translate="yes" xml:space="preserve">
          <source>But you have many choices:</source>
          <target state="translated">Но у тебя много вариантов:</target>
        </trans-unit>
        <trans-unit id="602fedc5c9b2886487ee5b0fcc672af11be840a3" translate="yes" xml:space="preserve">
          <source>But you have to care about set the right length of the array you want to store, because the is no way to check this length, like our friends massively explained.</source>
          <target state="translated">Но вы должны позаботиться о том,чтобы установить нужную длину массива,который вы хотите сохранить,потому что проверить эту длину невозможно,как это в массовом порядке объяснили наши друзья.</target>
        </trans-unit>
        <trans-unit id="0acd6640891f3785aa71d20d3ffa1780f5e658db" translate="yes" xml:space="preserve">
          <source>But, this suggestion is kind of silly for your problem, since the function is defined to know exactly the size of the array that is passed in (hence, there is little need to use sizeof at all on the array). What it does do, though, is offer some type safety. It will prohibit you from passing in an array of an unwanted size.</source>
          <target state="translated">Но это предложение несколько глупо для вашей проблемы,так как функция определяется для того,чтобы точно знать размер передаваемого массива (следовательно,нет никакой необходимости использовать sizeof на массиве).Однако,что она делает,так это предлагает некоторую безопасность типа.Она запретит передавать в массив нежелательного размера.</target>
        </trans-unit>
        <trans-unit id="6c8c0c8ecdad45c167a9ff434b56aa2d590f0229" translate="yes" xml:space="preserve">
          <source>First off, here is some code:</source>
          <target state="translated">Во-первых,вот какой-то код:</target>
        </trans-unit>
        <trans-unit id="fe6d9ac415a8ad19cfbf47f30ac3e96aa0762e2e" translate="yes" xml:space="preserve">
          <source>For dynamic arrays (&lt;em&gt;malloc&lt;/em&gt; or C++ &lt;em&gt;new&lt;/em&gt;) you need to store the size of the array as mentioned by others or perhaps build an array manager structure which handles add, remove, count, etc. Unfortunately C doesn't do this nearly as well as C++ since you basically have to build it for each different array type you are storing which is cumbersome if you have multiple types of arrays that you need to manage.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Для динамических массивов ( &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;malloc&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; или C ++ &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;new&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ) вам необходимо сохранить размер массива, как уже упоминалось другими, или, возможно, создать структуру менеджера массива, которая обрабатывает операции добавления, удаления, подсчета и т. Д. К сожалению, C не делает это так же хорошо, как C ++, поскольку вам, в основном, приходится создавать его для каждого сохраняемого вами типа массива, что является обременительным, если у вас есть несколько типов массивов, которыми нужно управлять.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2f23b59c4687d469d303210de520e977023550b7" translate="yes" xml:space="preserve">
          <source>For static arrays, such as the one in your example, there is a common macro used to get the size, but it is &lt;strong&gt;not recommended&lt;/strong&gt; as it does not check if the parameter is really a static array. The macro is used in real code though, e.g. in the Linux kernel headers although it may be slightly different than the one below:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Для статических массивов, таких как в вашем примере, есть общий макрос, используемый для получения размера, но он &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;не рекомендуется,&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; поскольку он не проверяет, является ли параметр действительно статическим массивом. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Макрос используется в реальном коде, например, в заголовках ядра Linux, хотя он может немного отличаться от приведенного ниже:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="14ed25bd9732c3c36bf129f1b5cc33c92a8346cd" translate="yes" xml:space="preserve">
          <source>For this specific example, yes, there is, IF you use typedefs (see below). Of course, if you do it this way, you're just as well off to use SIZEOF_DAYS, since you know what the pointer is pointing to.</source>
          <target state="translated">Для этого конкретного примера,да,есть,IF вы используете typedefs (см.ниже).Конечно,если вы делаете это таким образом,то вы также можете использовать SIZEOF_DAYS,так как знаете,на что указывает указатель.</target>
        </trans-unit>
        <trans-unit id="141956d01f14a420a3dc5c201376daa2dee674fc" translate="yes" xml:space="preserve">
          <source>Here is an example with a &lt;strong&gt;foo_t&lt;/strong&gt; structure:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вот пример со &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;структурой &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;foo_t&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="86f2f936b59fab1ab3ec6f71cdd72cccfb575caa" translate="yes" xml:space="preserve">
          <source>Here's a suggestion different from what has been provided thus far,that will work: Pass a pointer to the array instead. This suggestion is similar to the C++ style suggestions, except that C does not support templates or references:</source>
          <target state="translated">Вот предложение,отличное от того,что было предоставлено до сих пор,это сработает:Передайте указатель на массив вместо него.Это предложение похоже на предложения в стиле Си++,за исключением того,что Си не поддерживает шаблоны или ссылки:</target>
        </trans-unit>
        <trans-unit id="46693e03cf22d90d0f93108a25e489f5d3a92d46" translate="yes" xml:space="preserve">
          <source>How to find the 'sizeof' (a pointer pointing to an array)</source>
          <target state="translated">Как найти 'sizeof' (указатель,указывающий на массив)</target>
        </trans-unit>
        <trans-unit id="9ab07dd61fdfd8627c1a331bdae0022bd7ae1119" translate="yes" xml:space="preserve">
          <source>If possible, the C++ stdlib such as vector which is much safer and easier to use.</source>
          <target state="translated">По возможности,C++stdlib,например,вектор,который гораздо безопаснее и проще в использовании.</target>
        </trans-unit>
        <trans-unit id="d0b46d6ef49ee3d75a4dbba073222fed24d0661e" translate="yes" xml:space="preserve">
          <source>If the function is supposed to be able to operate on any size of array, then you will have to provide the size to the function as additional information.</source>
          <target state="translated">Если предполагается,что функция может работать с любым размером массива,то в качестве дополнительной информации необходимо указать размер массива.</target>
        </trans-unit>
        <trans-unit id="c6062a3e19049053872338bed9d33476e2751f18" translate="yes" xml:space="preserve">
          <source>If you have a (void *) pointer, as is returned by malloc()  or the like, then, no, there is no way to determine what data structure the pointer is pointing to and thus, no way to determine its size.</source>
          <target state="translated">Если у вас есть указатель (void *),который возвращается функцией malloc()или подобной,то нет способа определить,на какую структуру данных указывает указатель и,следовательно,нет способа определить его размер.</target>
        </trans-unit>
        <trans-unit id="e6958f12750bb26b0bccaf4848ffff1b524b5436" translate="yes" xml:space="preserve">
          <source>In strings there is a &lt;code&gt;'\0'&lt;/code&gt; character at the end so the length of the string can be gotten using functions like &lt;code&gt;strlen&lt;/code&gt;. The problem with an integer array, for example, is that you can't use any value as an end value so one possible solution is to address the array and use as an end value the &lt;code&gt;NULL&lt;/code&gt; pointer.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;В строках &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;в конце есть символ &lt;/font&gt;&lt;/font&gt; &lt;code&gt;'\0'&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; поэтому длину строки можно получить с помощью таких функций, как &lt;/font&gt;&lt;/font&gt; &lt;code&gt;strlen&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Например, проблема с целочисленным массивом состоит в том, что вы не можете использовать любое значение в качестве конечного значения, поэтому одним из возможных решений является обращение к массиву и использование в качестве конечного значения &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;указателя &lt;/font&gt;&lt;/font&gt; &lt;code&gt;NULL&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="39198bb1f7eaf58b699e3f8e53d3bcc1dcd2c877" translate="yes" xml:space="preserve">
          <source>Is there a way to find out the size of the array that &lt;code&gt;ptr&lt;/code&gt; is pointing to (instead of just giving its size, which is four bytes on a 32-bit system)?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Есть ли способ узнать размер массива, на который &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;указывает &lt;/font&gt;&lt;/font&gt; &lt;code&gt;ptr&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (вместо того, чтобы просто указать его размер, который составляет четыре байта в 32-битной системе)?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="07880985c52909f262ace43c24cfd089828a2e49" translate="yes" xml:space="preserve">
          <source>My solution to this problem is to save the length of the array into a struct Array as a meta-information about the array.</source>
          <target state="translated">Моим решением этой проблемы является сохранение длины массива в структурный массив в виде мета-информации о массиве.</target>
        </trans-unit>
        <trans-unit id="601fc31e19a62dcede16df70c47db1339186e28f" translate="yes" xml:space="preserve">
          <source>No, you can't use &lt;code&gt;sizeof(ptr)&lt;/code&gt; to find the size of array &lt;code&gt;ptr&lt;/code&gt; is pointing to.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Нет, вы не можете использовать &lt;/font&gt;&lt;/font&gt; &lt;code&gt;sizeof(ptr)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; чтобы найти размер массива, на &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;который указывает &lt;/font&gt;&lt;/font&gt; &lt;code&gt;ptr&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2fc50448bc90a910ae322337b63940c931383c72" translate="yes" xml:space="preserve">
          <source>No, you can't.  The compiler doesn't know what the pointer is pointing to.  There are tricks, like ending the array with a known out-of-band value and then counting the size up until that value, but that's not using sizeof.</source>
          <target state="translated">Нет,ты не можешь.Компилятор не знает,на что указывает указатель.Есть такие хитрости,как завершение массива известным внеполосным значением,а затем подсчет размера до этого значения,но это не использование sizeof.</target>
        </trans-unit>
        <trans-unit id="9bec2e0a2ab5d7914b00e66063347a28366e65e1" translate="yes" xml:space="preserve">
          <source>Obviously, add a parameter</source>
          <target state="translated">Очевидно,добавить параметр</target>
        </trans-unit>
        <trans-unit id="f3c8c95c5e534bcd2ea0034a0d83177efa6923f4" translate="yes" xml:space="preserve">
          <source>Output:</source>
          <target state="translated">Output:</target>
        </trans-unit>
        <trans-unit id="cd5ec5f9a89b02a08d6ef27b687b10468a768634" translate="yes" xml:space="preserve">
          <source>Size of days[] is 20 which is no of elements * size of it's data type.
While the size of pointer is 4 no matter what it is pointing to.
Because a pointer points to other element by storing it's address.</source>
          <target state="translated">Размер days[]составляет 20,что не является размером элементов*размера его типа данных.В то время как размер указателя 4,на что бы он ни указывал.Потому что указатель указывает на другой элемент,сохраняя его адрес.</target>
        </trans-unit>
        <trans-unit id="67c386b96a00f5de86c613e320fc011c37e08ea4" translate="yes" xml:space="preserve">
          <source>The answer is, &quot;No.&quot;</source>
          <target state="translated">Ответ:&quot;Нет&quot;.</target>
        </trans-unit>
        <trans-unit id="fa9c39995dd1ff8dce2e476e17f4e93ea18afd56" translate="yes" xml:space="preserve">
          <source>There is a clean solution with C++ templates, without using &lt;strong&gt;sizeof()&lt;/strong&gt;. The following &lt;strong&gt;getSize()&lt;/strong&gt; function returns the size of any static array:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Существует чистое решение с шаблонами C ++, без использования &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;sizeof ()&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Следующая &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;функция getSize ()&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; возвращает размер любого статического массива:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e44dd688381f034ce96a93c3bd130b3b8764b361" translate="yes" xml:space="preserve">
          <source>There is no magic solution. C is not a reflective language. Objects don't automatically know what they are.</source>
          <target state="translated">Нет никакого волшебного решения.C-это не язык отражения.Объекты автоматически не знают,что они собой представляют.</target>
        </trans-unit>
        <trans-unit id="7c3b2b478f2ad5676d40019bf7757cd287e9c0ab" translate="yes" xml:space="preserve">
          <source>Though allocating extra memory(more than the size of array) will be helpful if you want  to store the length in extra space.</source>
          <target state="translated">Хотя выделение дополнительной памяти (больше,чем размер массива)будет полезно,если вы хотите хранить длину в дополнительном пространстве.</target>
        </trans-unit>
        <trans-unit id="1d0f061328b0e92a7b111b41701869da1907b7af" translate="yes" xml:space="preserve">
          <source>Usage is:</source>
          <target state="translated">Используется:</target>
        </trans-unit>
        <trans-unit id="3d875ab8efb66ba19251aecc0b3be5ad3c5ae8d0" translate="yes" xml:space="preserve">
          <source>Use a more complex object. Define a structure which contains the dynamic array and also the size of the array. Then, pass the address of the structure.</source>
          <target state="translated">Используйте более сложный объект.Определите структуру,которая содержит динамический массив,а также размер массива.Затем передайте адрес структуры.</target>
        </trans-unit>
        <trans-unit id="5df51d8bd29ca933544649e006ec229ebaebb906" translate="yes" xml:space="preserve">
          <source>What C programmers do is store the size of the array somewhere.  It can be part of a structure, or the programmer can cheat a bit and malloc() more memory than requested in order to store a length value before the start of the array.</source>
          <target state="translated">Программисты на Си где-то хранят размер массива.Он может быть частью структуры,или же программист может обмануть немного и malloc()больше памяти,чем запрошено,чтобы хранить значение длины до начала массива.</target>
        </trans-unit>
        <trans-unit id="9545e86ebbefbb4457f0124949eefa1a6c018333" translate="yes" xml:space="preserve">
          <source>Wrap the call in a macro and automatically add a parameter</source>
          <target state="translated">Заверните вызов в макрос и автоматически добавьте параметр</target>
        </trans-unit>
        <trans-unit id="1e68b7703215e610fbb0873d6069896a37f3eb0f" translate="yes" xml:space="preserve">
          <source>You can do something like this:</source>
          <target state="translated">Ты можешь сделать что-то вроде этого:</target>
        </trans-unit>
        <trans-unit id="b257f0e600c75b1962e5a51ef1795eb149a8574c" translate="yes" xml:space="preserve">
          <source>You can google for reasons to be wary of macros like this. Be careful.</source>
          <target state="translated">Ты можешь гуглить по таким причинам,чтобы опасаться таких макросов.Будьте осторожны.</target>
        </trans-unit>
        <trans-unit id="6665a8e783ec08ddbaf4aed1389a74ddfe999e6d" translate="yes" xml:space="preserve">
          <source>array_size is passing to the &lt;strong&gt;&lt;em&gt;size&lt;/em&gt;&lt;/strong&gt; variable:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;array_size передает &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;переменную &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;размера&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
