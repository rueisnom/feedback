<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/5554734">
    <body>
      <group id="5554734">
        <trans-unit id="16594450c3726674bd011602716db80f8cdbd94e" translate="yes" xml:space="preserve">
          <source>(That's assuming you &lt;em&gt;need&lt;/em&gt; the index, of course. If you can use the enhanced for loop instead, do so.)</source>
          <target state="translated">（もちろん、これはインデックスが&lt;em&gt;必要で&lt;/em&gt;あることを前提としています。代わりに拡張forループを使用できる場合は、そうしてください。）</target>
        </trans-unit>
        <trans-unit id="6516a73bbe4ca55dd14d53fab720365de10f1a6f" translate="yes" xml:space="preserve">
          <source>...is equivalent to this:</source>
          <target state="translated">...はこれに相当します。</target>
        </trans-unit>
        <trans-unit id="545450d9339ddec2c304ff6d24c4a04a3daea1d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; happens when you are trying to access 
the name.length indexed element which does not exist (array index ends at  length -1). just replacing &amp;lt;= with &amp;lt; would solve this problem.</source>
          <target state="translated">&lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; は、存在しないname.lengthインデックス付き要素にアクセスしようとすると発生します（配列インデックスは長さ-1で終了します）。 &amp;lt;=を&amp;lt;に置き換えるだけでこの問題は解決します。</target>
        </trans-unit>
        <trans-unit id="b0b8123e1eed02a96f007d0528bf878a0f5d9402" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; means that you are trying to access an index of the array that does not exist or out of the bound of this array. Array indexes start from &lt;strong&gt;0&lt;/strong&gt; and end at &lt;strong&gt;length - 1&lt;/strong&gt;.</source>
          <target state="translated">&lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; は、存在しない、またはこの配列の境界外にある配列のインデックスにアクセスしようとしていることを意味します。 配列のインデックスは&lt;strong&gt;0&lt;/strong&gt;から始まり、 &lt;strong&gt;長さ&lt;/strong&gt; &lt;strong&gt;-1&lt;/strong&gt;で終わります。</target>
        </trans-unit>
        <trans-unit id="731150e732491db3c4df70729a7a5f18a9b55573" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; name itself explains that If you trying to access the value at the index which is out of the scope of Array size then such kind of exception occur.</source>
          <target state="translated">&lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; の名前自体は、配列サイズの範囲外のインデックスの値にアクセスしようとすると、そのような種類の例外が発生することを説明しています。</target>
        </trans-unit>
        <trans-unit id="b6ee2e15e862034ced88745bf49e41e848a54a25" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;i&lt;/code&gt; will equal &lt;code&gt;name.length&lt;/code&gt; which is an illegal index, since array indices are zero-based.</source>
          <target state="translated">配列のインデックスはゼロベースであるため、不正なインデックスである &lt;code&gt;name.length&lt;/code&gt; と等しくなります。</target>
        </trans-unit>
        <trans-unit id="432f3d4ef18867a1ee3c381d881c8576c7b849c0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Answer&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Answer&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a29842915cfca437631b773d017d5683be87733a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;For any array of length n, elements of the array will have an index from 0 to n-1.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;長さnの配列の場合、配列の要素には0からn-1までのインデックスがあります。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fdc05330aee07b7f41f89160b83214641748bf1d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;How to avoid &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; を回避する方法&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ddc274fb7573a41af358385d0d087e2a09464225" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Looping&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Looping&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2bfb54ba65a32d2ea2bc218a0ccd1567275e71d8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Retrieval/update&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Retrieval/update&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4ca86611198d114a82f693be084e2b546c17702a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Update&lt;/strong&gt;: as per your code snippet,</source>
          <target state="translated">&lt;strong&gt;更新&lt;/strong&gt; ：コードスニペットに従って、</target>
        </trans-unit>
        <trans-unit id="93e19cd6bb228ea2c695b8788bc26ff502add395" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;What causes &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt;?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; の原因は何ですか？&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="713db13db93a08bc0b1605a9050b08a2d578335f" translate="yes" xml:space="preserve">
          <source>A better way go with a for each loop, in this method a programmer has no need to bother about the number of elements in the array.</source>
          <target state="translated">この方法では、プログラマは配列の要素数を気にする必要はありません。</target>
        </trans-unit>
        <trans-unit id="30635023570369a783cb507b93fbabdf13edf47c" translate="yes" xml:space="preserve">
          <source>According to your Code :</source>
          <target state="translated">あなたのコードによると</target>
        </trans-unit>
        <trans-unit id="71d87418d789a2d412998c248263f18a4fa4759f" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; is caused by trying to retrive a &quot;box&quot; that does not exist, by passing an index that is higher than the index of last &quot;box&quot;, or negative.</source>
          <target state="translated">&lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; は、存在しない「ボックス」を取得しようとしたか、最後の「ボックス」のインデックスよりも大きいか、負のインデックスを渡したことが原因で発生します。</target>
        </trans-unit>
        <trans-unit id="3efe569caa47b66aeea4bf938aaada4115336370" translate="yes" xml:space="preserve">
          <source>Any array X, can be accessed from [0 to (X.length - 1)]</source>
          <target state="translated">任意の配列 X は、[0 から (X.length-1)]までアクセスできます。</target>
        </trans-unit>
        <trans-unit id="3a6c16364c90e124900fbd48f8e756be74cf25e7" translate="yes" xml:space="preserve">
          <source>Any integer equal to the length of the array, or bigger than it: is out of bounds.</source>
          <target state="translated">配列の長さと同じか、それよりも大きい整数:は、境界外となります。</target>
        </trans-unit>
        <trans-unit id="bc43cad5e204b3730814fadd07365e1fcfa0cf9c" translate="yes" xml:space="preserve">
          <source>Any integer less than 0: is out of bounds;</source>
          <target state="translated">0より小さい整数:は範囲外です。</target>
        </trans-unit>
        <trans-unit id="198d363ac64c8105d609efc6c1f685748c30e957" translate="yes" xml:space="preserve">
          <source>ArrayIndexOutOfBounds means you are trying to index a position within an array that is not allocated.</source>
          <target state="translated">ArrayIndexOutOfBounds は、割り当てられていない配列内の位置をインデックス化しようとしていることを意味します。</target>
        </trans-unit>
        <trans-unit id="a20631717304183b79ddf7a99f3341be04973146" translate="yes" xml:space="preserve">
          <source>ArrayIndexOutOfBoundsException whenever this exception is coming it mean you are trying to use an index of array which is out of its bounds or in lay man terms you are requesting more than than you have initialised.</source>
          <target state="translated">ArrayIndexOutOfBoundsException この例外が発生する場合は、範囲外の配列のインデックスを使用しようとしていることを意味します。</target>
        </trans-unit>
        <trans-unit id="8d5c7efe24f948ceed100b000d15f78be9d0df28" translate="yes" xml:space="preserve">
          <source>As for how to avoid it... um, don't do that. Be careful with your array indexes.</source>
          <target state="translated">それを避ける方法としては...うーん、それはやめましょう。配列のインデックスには気をつけましょう。</target>
        </trans-unit>
        <trans-unit id="4ecb0d232c31560b99f33cc2f9b21da2193025be" translate="yes" xml:space="preserve">
          <source>At first, I have initialized an array as 'numberArray'. then , some array elements are printed using for loop. When loop is running 'i' time , print the (numberArray[i+1] element..(when i value is 1, numberArray[i+1] element is printed.)..Suppose that, when i=(numberArray.length-2), last element of array is printed..When 'i' value goes to (numberArray.length-1) , no value for printing..In that point , 'ArrayIndexOutOfBoundsException' is occur.I hope to you could get idea.thank you !</source>
          <target state="translated">まず、配列を'numberArray'として初期化し、forループを使って配列の要素を印刷しています。i=(numberArray.length-2)の時に配列の最後の要素を印刷するとすると、iの値が(numberArray.length-1)になった時に印刷する値が無くなる。</target>
        </trans-unit>
        <trans-unit id="7a23c130dca814008f0011623011b3397b672e20" translate="yes" xml:space="preserve">
          <source>Convert array to stream - this is a good option if you want to perform additional 'operations' to your array e.g. filter, transform the text, convert to a map etc (requires Java8)</source>
          <target state="translated">配列をストリームに変換-フィルタリング、テキスト変換、マップへの変換など、配列に対して追加の「操作」を行いたい場合に良いオプションです (Java8 が必要です)</target>
        </trans-unit>
        <trans-unit id="03197ab619246c2a04f5d7d20eb40c98306c3fcb" translate="yes" xml:space="preserve">
          <source>Creating an array like this:</source>
          <target state="translated">こんな感じで配列を作成します。</target>
        </trans-unit>
        <trans-unit id="e6d03af92f73ffc028d75940c7ceeec3b8645755" translate="yes" xml:space="preserve">
          <source>Each dimension has a different length, so the subtle bug is that the middle and inner loops use the &lt;code&gt;length&lt;/code&gt; property of the same dimension (because &lt;code&gt;a[i].length&lt;/code&gt; is the same as &lt;code&gt;a[j].length&lt;/code&gt;).</source>
          <target state="translated">各次元の長さが異なるため、中間ループと内部ループが同じ次元の &lt;code&gt;length&lt;/code&gt; プロパティを使用するという微妙なバグがあります（ &lt;code&gt;a[i].length&lt;/code&gt; は &lt;code&gt;a[j].length&lt;/code&gt; と同じであるため）。</target>
        </trans-unit>
        <trans-unit id="a3ff3ebaff133add77dd19074c17420bafbe4af4" translate="yes" xml:space="preserve">
          <source>Each item in an array is called an element, and each element is accessed by its numerical index. As shown in the preceding illustration, &lt;strong&gt;numbering begins with 0&lt;/strong&gt;. The 9th element, for example, would therefore be accessed at index 8.</source>
          <target state="translated">配列内の各項目は要素と呼ばれ、各要素は数値インデックスによってアクセスされます。 前の図に示すように、 &lt;strong&gt;番号付けは0から始まります&lt;/strong&gt; 。 したがって、たとえば、9番目の要素はインデックス8でアクセスされます。</target>
        </trans-unit>
        <trans-unit id="0b322e1d0d89c964163237c8679058109771d3df" translate="yes" xml:space="preserve">
          <source>Even while using a &lt;code&gt;for&lt;/code&gt; loop you have started with index zero and you should end with &lt;code&gt;name.length - 1&lt;/code&gt;. In an array a[n] you can access form a[0] to a[n-1].</source>
          <target state="translated">&lt;code&gt;for&lt;/code&gt; ループを使用している場合でも、インデックス0で開始し、 &lt;code&gt;name.length - 1&lt;/code&gt; 終了する必要があります。 配列a [n]では、フォームa [0]からa [n-1]にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="e9f3c55b138e02127e460df4476fef81199a9fa0" translate="yes" xml:space="preserve">
          <source>For example this would initialize a primitive integer array with the upper bound 4.</source>
          <target state="translated">例えば、これはプリミティブ整数配列を上界4で初期化します。</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="cff8bdc9658d474e26987de3b23379c579ccf94c" translate="yes" xml:space="preserve">
          <source>For multidimensional arrays, it can be tricky to make sure you access the &lt;code&gt;length&lt;/code&gt; property of the right dimension. Take the following code for example:</source>
          <target state="translated">多次元配列の場合、正しい次元の &lt;code&gt;length&lt;/code&gt; プロパティにアクセスすることを確認するのは難しい場合があります。 たとえば、次のコードを見てください。</target>
        </trans-unit>
        <trans-unit id="5f685b62af5c06c94e1d8f3ee7cb8850a4a519bf" translate="yes" xml:space="preserve">
          <source>For your given array the length of the array is 3(i.e. name.length = 3). But as it stores element starting from index 0, it has max index 2.</source>
          <target state="translated">与えられた配列の長さは3(つまりname.length=3)です。しかし、インデックス0から始まる要素を格納しているので、最大インデックスは2です。</target>
        </trans-unit>
        <trans-unit id="06b67ed96c3a79e858c3523303813ec26cece44d" translate="yes" xml:space="preserve">
          <source>From this excellent article: &lt;a href=&quot;https://programming.guide/java/arrayindexoutofboundsexception-in-for-loop.html&quot;&gt;ArrayIndexOutOfBoundsException in for loop&lt;/a&gt;</source>
          <target state="translated">この優れた記事から： &lt;a href=&quot;https://programming.guide/java/arrayindexoutofboundsexception-in-for-loop.html&quot;&gt;forループでのArrayIndexOutOfBoundsException&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1dc311ad922efe2a4999e58497522f8934a6ed17" translate="yes" xml:space="preserve">
          <source>Here is a code sample that triggers the exception:</source>
          <target state="translated">例外を発生させるコードサンプルは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="5e8a4ea1a2e15d1a576f7ba4e06e76c18d333a38" translate="yes" xml:space="preserve">
          <source>I see all the answers here explaining how to work with arrays and how to avoid the index out of bounds exceptions.  I personally avoid arrays at all costs.  I use the Collections classes, which avoids all the silliness of having to deal with array indices entirely.  The looping constructs work beautifully with collections supporting code that is both easier to write, understand and maintain.</source>
          <target state="translated">私は、ここにあるすべての答えを見て、どのように配列を使用して動作する方法と、境界外の例外のインデックスを回避する方法を説明しています。私は個人的には、何としてでも配列を使わないようにしています。私はコレクションクラスを使用していますが、これは配列のインデックスを完全に処理しなければならないという愚かなことをすべて回避します。ループ構造はコレクションで美しく動作し、コードを書きやすく、理解しやすく、保守しやすいコードをサポートしています。</target>
        </trans-unit>
        <trans-unit id="5b9a600098aa25c886463a10080dca1a70ae37df" translate="yes" xml:space="preserve">
          <source>If You check
System.out.print(name.length);</source>
          <target state="translated">System.out.print(name.length)をチェックしている場合。</target>
        </trans-unit>
        <trans-unit id="ec76e7dd22a0744a8ea2b5cb0e1991648d732a53" translate="yes" xml:space="preserve">
          <source>If an array has a length of 1,</source>
          <target state="translated">配列の長さが1の場合</target>
        </trans-unit>
        <trans-unit id="1355ab2ef7ede216e9860be7a1e76c2d2634e5ed" translate="yes" xml:space="preserve">
          <source>If two threads enter the SimplateDateFormat.parse() method together you will likely see an ArrayIndexOutOfBoundsException. Note the synchronization section of the &lt;a href=&quot;http://download.oracle.com/javase/6/docs/api/java/text/SimpleDateFormat.html&quot;&gt;class javadoc for SimpleDateFormat&lt;/a&gt;.</source>
          <target state="translated">2つのスレッドが一緒にSimplateDateFormat.parse（）メソッドに入ると、ArrayIndexOutOfBoundsExceptionが発生する可能性があります。 &lt;a href=&quot;http://download.oracle.com/javase/6/docs/api/java/text/SimpleDateFormat.html&quot;&gt;SimpleDateFormatのjavadocクラスの&lt;/a&gt;同期セクションに注意してください。</target>
        </trans-unit>
        <trans-unit id="a65e545062bdbc57b6ee2dd22cd4d60ac011e9d3" translate="yes" xml:space="preserve">
          <source>If you think of a variable as a &quot;box&quot; where you can place a value, then an array is a series of boxes placed next to eachother, where the number of boxes is a finite and explicit integer.</source>
          <target state="translated">変数を値を置くことができる「箱」と考えるならば、配列は、箱の数が有限で明示的な整数である、隣り合って配置された箱の連続です。</target>
        </trans-unit>
        <trans-unit id="9ca75b5c8022318262352987b6a6876f13f10a8d" translate="yes" xml:space="preserve">
          <source>If you use an array's length to control iteration of a &lt;strong&gt;for&lt;/strong&gt; loop, always remember that the index of the first item in an array is &lt;strong&gt;0&lt;/strong&gt;. So the index of the last element in an array is one less than the array's length.</source>
          <target state="translated">配列の長さを使用して&lt;strong&gt;for&lt;/strong&gt;ループの反復を制御する場合は、配列の最初の項目のインデックスが&lt;strong&gt;0&lt;/strong&gt;であることを常に覚えておいてください。 したがって、配列の最後の要素のインデックスは、配列の長さよりも1つ少なくなります。</target>
        </trans-unit>
        <trans-unit id="62cecc743239393a0f6a2284e02b3a2531bae2bb" translate="yes" xml:space="preserve">
          <source>If your program is trying to access any element (or memory) having array index greater than n-1, then Java will throw &lt;strong&gt;ArrayIndexOutOfBoundsException&lt;/strong&gt;</source>
          <target state="translated">プログラムがn-1より大きい配列インデックスを持つ要素（またはメモリ）にアクセスしようとすると、Javaは&lt;strong&gt;ArrayIndexOutOfBoundsException&lt;/strong&gt;をスローし&lt;strong&gt;ます&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="47936e5bdf1c92242d0ac95c6abc8cf87d2b159c" translate="yes" xml:space="preserve">
          <source>In order to prevent &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt;, there are some key points to consider:</source>
          <target state="translated">&lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; を防ぐために、考慮すべきいくつかの重要なポイントがあります。</target>
        </trans-unit>
        <trans-unit id="2c027a1a6feeaa2dceb81573369730200a57c8cd" translate="yes" xml:space="preserve">
          <source>In the last iteration of</source>
          <target state="translated">の最後の反復では</target>
        </trans-unit>
        <trans-unit id="76df916b62840bf387c4d5f679f0bb56b6c112cd" translate="yes" xml:space="preserve">
          <source>In this case:</source>
          <target state="translated">この場合は</target>
        </trans-unit>
        <trans-unit id="e8166ca7be8d189caed257b3d67713c1e52b9fb6" translate="yes" xml:space="preserve">
          <source>In your case</source>
          <target state="translated">あなたの場合</target>
        </trans-unit>
        <trans-unit id="bace5a1fd6d0cb37fe4432690edce7d3270c59d1" translate="yes" xml:space="preserve">
          <source>In your case, You can just remove equal sign from your for loop.</source>
          <target state="translated">あなたの場合は、forループから等号を削除すればいいのです。</target>
        </trans-unit>
        <trans-unit id="1d47196eb5bef5acc41ee14bd59c0bcf6ce1ec2f" translate="yes" xml:space="preserve">
          <source>In your case:</source>
          <target state="translated">あなたの場合は</target>
        </trans-unit>
        <trans-unit id="a5a5252322ab332863617744dbdfb6dbda144e6e" translate="yes" xml:space="preserve">
          <source>In your code you have accessed the elements from index 0 to the length of the string array. &lt;code&gt;name.length&lt;/code&gt; gives the number of string objects in your array of string objects i.e. 3, but you can access only up to index 2 &lt;code&gt;name[2]&lt;/code&gt;,
because the array can be accessed from index 0 to &lt;code&gt;name.length - 1&lt;/code&gt; where you get &lt;code&gt;name.length&lt;/code&gt; number of objects.</source>
          <target state="translated">コードでは、インデックス0から文字列配列の長さまでの要素にアクセスしました。 &lt;code&gt;name.length&lt;/code&gt; は、文字列オブジェクトの配列内の文字列オブジェクトの数、つまり3を示しますが、配列はインデックス2から &lt;code&gt;name.length - 1&lt;/code&gt; までアクセスできるため、インデックス2 &lt;code&gt;name[2]&lt;/code&gt; までしかアクセスできません。 &lt;code&gt;name.length&lt;/code&gt; オブジェクトの数。</target>
        </trans-unit>
        <trans-unit id="8e098b941bd75b2af22ea4a65712789bfbcbd392" translate="yes" xml:space="preserve">
          <source>In your for loop, you can do i &amp;lt; name.length. This would prevent looping to name[3] and would instead stop at name[2]</source>
          <target state="translated">forループでは、i &amp;lt;name.lengthを実行できます。 これにより、name [3]へのループが防止され、代わりにname [2]で停止します。</target>
        </trans-unit>
        <trans-unit id="93565e594ec50b9f54dbd3a5a28c81a9b9b30af0" translate="yes" xml:space="preserve">
          <source>IndexOutOfBoundsException is thrown to indicate that an index of some sort (such as to an array, to a string, or to a vector) is out of range.</source>
          <target state="translated">IndexOutOfOfBoundsException は、ある種のインデックス (配列、文字列、ベクトルなど)が範囲外であることを示すためにスローされます。</target>
        </trans-unit>
        <trans-unit id="3d4b9d4a233899624d9b4d080cbe4ff35b2db759" translate="yes" xml:space="preserve">
          <source>Instead, the inner loop should use &lt;code&gt;a[i][j].length&lt;/code&gt; (or &lt;code&gt;a[0][0].length&lt;/code&gt;, for simplicity).</source>
          <target state="translated">代わりに、内部ループは &lt;code&gt;a[i][j].length&lt;/code&gt; （または単純化のために &lt;code&gt;a[0][0].length&lt;/code&gt; ）を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="aa866da724c0b805352d5bc22bdcbf23001a1f3a" translate="yes" xml:space="preserve">
          <source>It means that you are trying to access an index of an array which is not valid as it is not in between the bounds.</source>
          <target state="translated">配列のインデックスにアクセスしようとしていることを意味しますが、そのインデックスは境界線の間にないため、有効ではありません。</target>
        </trans-unit>
        <trans-unit id="4e5939db25e078784604ea0adf0a01396afb0868" translate="yes" xml:space="preserve">
          <source>It's defined in the &lt;a href=&quot;http://docs.oracle.com/javase/specs/jls/se7/html/jls-10.html#jls-10.7&quot;&gt;Java language specification&lt;/a&gt;:</source>
          <target state="translated">これは、 &lt;a href=&quot;http://docs.oracle.com/javase/specs/jls/se7/html/jls-10.html#jls-10.7&quot;&gt;Java言語仕様で&lt;/a&gt;定義されています 。</target>
        </trans-unit>
        <trans-unit id="341c828fdb39a0fd7b4589aeec511cd085b1f4e8" translate="yes" xml:space="preserve">
          <source>Just don't. Stick to the one above (if you need to use the index) and it will save you a lot of pain.</source>
          <target state="translated">ただ、しないでください。上のものにこだわる(インデックスを使う必要がある場合)と、それはあなたの多くの痛みを軽減することができます。</target>
        </trans-unit>
        <trans-unit id="29fe7a64d9dd63464322b1d11eac639ff11cf5c3" translate="yes" xml:space="preserve">
          <source>Maintaining count:</source>
          <target state="translated">カウントの維持</target>
        </trans-unit>
        <trans-unit id="8bd3565c2f0f54ba38218096ad4fb12f600e3c50" translate="yes" xml:space="preserve">
          <source>Make sure there is no place in your code that are accessing thread unsafe classes like SimpleDateFormat in a concurrent manner like in a servlet or controller. Check all instance variables of your servlets and controllers for likely suspects.</source>
          <target state="translated">サーブレットやコントローラのように、SimpleDateFormatのようなスレッドセーフでないクラスに同時アクセスしている場所がコード内にないことを確認してください。サーブレットやコントローラのすべてのインスタンス変数をチェックして、疑われる可能性があるかどうかを確認してください。</target>
        </trans-unit>
        <trans-unit id="9cf0d412274e9e46811d2f84ac45eb6b1855e1cd" translate="yes" xml:space="preserve">
          <source>Notice the &lt;code&gt;&amp;lt;&lt;/code&gt;, never mix a &lt;code&gt;=&lt;/code&gt; in there..</source>
          <target state="translated">&lt;code&gt;&amp;lt;&lt;/code&gt; に注意してください。そこに &lt;code&gt;=&lt;/code&gt; を混在させないでください。</target>
        </trans-unit>
        <trans-unit id="b082cab151ecf134fb9b471ea328fc251f75866b" translate="yes" xml:space="preserve">
          <source>One problem people sometimes run into is thinking that arrays are 1-indexed, e.g.</source>
          <target state="translated">人々が時々遭遇する問題の一つは、配列が1インデックスであると考えていることです。</target>
        </trans-unit>
        <trans-unit id="1170a5f96f19ba178c90251f3fff85abf9d27869" translate="yes" xml:space="preserve">
          <source>Or some other looping statement like</source>
          <target state="translated">または、以下のような他のループ文もあります。</target>
        </trans-unit>
        <trans-unit id="2a55f1def49ba2cf28edd04aebe0ae914d6adc01" translate="yes" xml:space="preserve">
          <source>Or this:</source>
          <target state="translated">それともこれかな</target>
        </trans-unit>
        <trans-unit id="f3c8c95c5e534bcd2ea0034a0d83177efa6923f4" translate="yes" xml:space="preserve">
          <source>Output:</source>
          <target state="translated">Output:</target>
        </trans-unit>
        <trans-unit id="74d424b8016ed205af0865c29c968d17098b8f8d" translate="yes" xml:space="preserve">
          <source>P.S.: If you look to have a better understanding of arrays and do some practical exercises, there's a video here: &lt;a href=&quot;https://www.youtube.com/watch?v=k1i42DMrcMk&quot;&gt;tutorial on arrays in Java&lt;/a&gt;</source>
          <target state="translated">PS：配列の理解を深め、実際的な演習を行う場合は、こちらのビデオをご覧&lt;a href=&quot;https://www.youtube.com/watch?v=k1i42DMrcMk&quot;&gt;ください。Javaでの配列に関するチュートリアル&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="da0083fa6318625deda9a300827d509bb4c74ab3" translate="yes" xml:space="preserve">
          <source>Programmers count from zero. So this for example would throw an &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; as the upper bound is 4 and not 5.</source>
          <target state="translated">プログラマーはゼロから数えます。 したがって、たとえば上限が5ではなく4であるため、これは &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; をスローします 。</target>
        </trans-unit>
        <trans-unit id="e601093530ccbc180c35f809030a5f181c80fca6" translate="yes" xml:space="preserve">
          <source>Resolved code:</source>
          <target state="translated">解決されたコード。</target>
        </trans-unit>
        <trans-unit id="371a87eafb4de078ff674d69a5a89c186532eb49" translate="yes" xml:space="preserve">
          <source>See also:</source>
          <target state="translated">も参照してください。</target>
        </trans-unit>
        <trans-unit id="514e733a57a3a645ff247b1f4ca5b2518a55570b" translate="yes" xml:space="preserve">
          <source>So for example:</source>
          <target state="translated">だから例えば</target>
        </trans-unit>
        <trans-unit id="2671ad4099c67f3fb6bf6039351783be03a56a38" translate="yes" xml:space="preserve">
          <source>So here are two solutions that we can use in a program</source>
          <target state="translated">そこで、プログラムで使用できる2つのソリューションをご紹介します。</target>
        </trans-unit>
        <trans-unit id="eb77b8cfb17010be505ad83effe7f5f234b9802c" translate="yes" xml:space="preserve">
          <source>So much for this simple question, but I just wanted to highlight a new feature in Java which will avoid all confusions around indexing in arrays even for beginners. Java-8 has abstracted the task of iterating for you.</source>
          <target state="translated">この単純な質問はここまでにしておきますが、私はJavaの新機能を強調したいと思いました。Java-8は、反復処理のタスクを抽象化しました。</target>
        </trans-unit>
        <trans-unit id="de534f475445cbb66be5bf98ef2979a8450af9ba" translate="yes" xml:space="preserve">
          <source>So, instead of  'i**&amp;lt;=&lt;strong&gt;name.length' you should write 'i&lt;/strong&gt;&amp;lt;**name.length' to avoid 'ArrayIndexOutOfBoundsException'.</source>
          <target state="translated">したがって、 'i ** &amp;lt;= &lt;strong&gt;name.length'の&lt;/strong&gt;代わりに 'ArrayIndexOutOfBoundsException'を回避するために ' &lt;strong&gt;i&lt;/strong&gt; &amp;lt;** name.length'と&lt;strong&gt;記述する必要があります&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="dba3cae94d302fc1902f69f418e5e3ead09b4a2a" translate="yes" xml:space="preserve">
          <source>That will miss out the first element (index 0) and throw an exception when index is 5. The valid indexes here are 0-4 inclusive. The correct, idiomatic &lt;code&gt;for&lt;/code&gt; statement here would be:</source>
          <target state="translated">最初の要素（インデックス0）が欠落し、インデックスが5の場合に例外がスローされます。ここでの有効なインデックスは0〜4です。 ここでの正しい、慣用的な &lt;code&gt;for&lt;/code&gt; ステートメントは次のようになります。</target>
        </trans-unit>
        <trans-unit id="61161f7c102891bab75d2ee987cf4edd7e8ca602" translate="yes" xml:space="preserve">
          <source>That's how this type of exception looks when thrown in Eclipse. The number in red signifies the index you tried to access. So the code would look like this:</source>
          <target state="translated">Eclipseでこのタイプの例外がスローされると、このようになります。赤色の数字は、アクセスしようとしたインデックスを示しています。そのため、コードは次のようになります。</target>
        </trans-unit>
        <trans-unit id="90fee4238e0b2767081496845488c8830d9ac8ba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;public final&lt;/code&gt; field &lt;code&gt;length&lt;/code&gt;, which contains the number of components
  of the array. &lt;code&gt;length&lt;/code&gt; may be positive or zero.</source>
          <target state="translated">配列のコンポーネントの数を含む &lt;code&gt;public final&lt;/code&gt; フィールド &lt;code&gt;length&lt;/code&gt; 。 &lt;code&gt;length&lt;/code&gt; は正またはゼロです。</target>
        </trans-unit>
        <trans-unit id="a0dcc5f252034590b4d611d5fd41235e75f48cc4" translate="yes" xml:space="preserve">
          <source>The Java Tutorials - Language Basics - Arrays</source>
          <target state="translated">Javaチュートリアル-言語の基礎-配列</target>
        </trans-unit>
        <trans-unit id="0a1f91989d1958ef347778d95981df2ded2686c6" translate="yes" xml:space="preserve">
          <source>The better option is to iterate an array:</source>
          <target state="translated">より良い選択肢は配列の反復処理です。</target>
        </trans-unit>
        <trans-unit id="5923c9124eeb896929580854886ecfff7220679f" translate="yes" xml:space="preserve">
          <source>The code below:</source>
          <target state="translated">下のコード。</target>
        </trans-unit>
        <trans-unit id="8e291ebe6122fbb69695ab0aecb4fa8b043402e3" translate="yes" xml:space="preserve">
          <source>The error is thrown when you try to access an index which doesn't exist in that array. If an array has a length of 3,</source>
          <target state="translated">その配列に存在しないインデックスにアクセスしようとすると、エラーが発生します。配列の長さが3の場合。</target>
        </trans-unit>
        <trans-unit id="79bd00a63f3fe886beabfa3ec2d290a31a4a24f5" translate="yes" xml:space="preserve">
          <source>The index is inclusive the array's length. This is out of bounds. You need to replace &lt;code&gt;&amp;lt;=&lt;/code&gt; by &lt;code&gt;&amp;lt;&lt;/code&gt;.</source>
          <target state="translated">インデックスには配列の長さが含まれます。 これは範囲外です。 &lt;code&gt;&amp;lt;=&lt;/code&gt; を &lt;code&gt;&amp;lt;&lt;/code&gt; に置き換える必要があります。</target>
        </trans-unit>
        <trans-unit id="3b86c42f7b65cda21c39234fdc50273fe8a72add" translate="yes" xml:space="preserve">
          <source>The most common case I've seen for seemingly mysterious ArrayIndexOutOfBoundsExceptions, i.e. apparently not caused by your own array handling code, is the concurrent use of SimpleDateFormat. Particularly in a servlet or controller:</source>
          <target state="translated">私がこれまでに見てきた中で最も一般的なケースは、一見不思議な ArrayIndexOutOfOfBoundsExceptions、つまりあなた自身の配列処理コードが原因ではないようですが、 SimpleDateFormat を同時に使用している場合です。特にサーブレットやコントローラの中で。</target>
        </trans-unit>
        <trans-unit id="216d5ae8ef7812ad765cb3f778364e7dcc029df5" translate="yes" xml:space="preserve">
          <source>The primary motivation (and use case) is when you are iterating and you do not require any complicated iteration steps.  You would &lt;em&gt;not&lt;/em&gt; be able to use an enhanced-&lt;code&gt;for&lt;/code&gt; to move backwards in an array or only iterate on every other element.</source>
          <target state="translated">主な動機（および使用例）は、反復処理を行うときに複雑な反復ステップを必要としない場合です。 拡張された &lt;code&gt;for&lt;/code&gt; を使用して配列内を逆方向に移動したり、他のすべての要素でのみ反復処理したりすることはでき&lt;em&gt;ません&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="be7b6b1d85813b94f871b784d296d789b425a07e" translate="yes" xml:space="preserve">
          <source>This error is occurs at runs loop  overlimit times.Let's consider simple example like this,</source>
          <target state="translated">このエラーは実行ループのオーバーリミット時に発生します。</target>
        </trans-unit>
        <trans-unit id="f414d0a29d407c114a4769c9a0f853da2159916b" translate="yes" xml:space="preserve">
          <source>This way you won't have to think about indexes at all.</source>
          <target state="translated">そうすれば、インデックスのことを全く考えなくてもよくなります。</target>
        </trans-unit>
        <trans-unit id="e638105227ffc56d46887520a9df3fe725ecf6bf" translate="yes" xml:space="preserve">
          <source>Thrown to indicate that an array has been accessed with an illegal index. The index is either negative or greater than or equal to the size of the array.</source>
          <target state="translated">配列が不正なインデックスでアクセスされたことを示すためにスローされます。インデックスは、負の値か配列のサイズ以上の値となります。</target>
        </trans-unit>
        <trans-unit id="e635d1635c6747a227108901a5ea556793a43148" translate="yes" xml:space="preserve">
          <source>To avoid an array index out-of-bounds exception, one should use the &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/nutsandbolts/for.html&quot;&gt;enhanced-&lt;code&gt;for&lt;/code&gt;&lt;/a&gt; statement where and when they can.</source>
          <target state="translated">配列インデックスの範囲外の例外を回避するには、可能な場合はいつでも&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/nutsandbolts/for.html&quot;&gt;Enhanced- &lt;code&gt;for&lt;/code&gt; &lt;/a&gt;ステートメントを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="ad3c4d3298913b13dc48c102cd0d8b0a7ee432bc" translate="yes" xml:space="preserve">
          <source>To get around this...</source>
          <target state="translated">これを回避するには</target>
        </trans-unit>
        <trans-unit id="2d6ae9265ded2c1d6054388f7945e80bacf12cf5" translate="yes" xml:space="preserve">
          <source>To prevent this always make sure that you are not requesting a index which is not present in array i.e. if array length is 10 then your index must range between 0 to 9</source>
          <target state="translated">これを防ぐために、配列に存在しないインデックスを要求していないことを常に確認してください。</target>
        </trans-unit>
        <trans-unit id="d87f37c259dd5602c611f75e734724a2d8d4bd26" translate="yes" xml:space="preserve">
          <source>To put it briefly:</source>
          <target state="translated">簡潔に言うと</target>
        </trans-unit>
        <trans-unit id="d4d05040f846c50d59f3b2820e1d902f4418578c" translate="yes" xml:space="preserve">
          <source>To retrieve one of the values from this series of boxes, you can refer to it through its index, like this:</source>
          <target state="translated">この一連のボックスから値の一つを取得するには、次のようにそのインデックスを参照することができます。</target>
        </trans-unit>
        <trans-unit id="78c3255bc2eca1ef5dc6352c53e0ee3cc21b60ae" translate="yes" xml:space="preserve">
          <source>Use a for each loop</source>
          <target state="translated">ループごとに使用する</target>
        </trans-unit>
        <trans-unit id="53a260d5c2745e2a79547da92aedd6602716fb22" translate="yes" xml:space="preserve">
          <source>Use list.forEach(Consumer action) (requires Java8)</source>
          <target state="translated">list.forEach(Consumer action)を使用する(Java8が必要)</target>
        </trans-unit>
        <trans-unit id="be52c28d5a1fe6ced3d0520d690c7470bd96c23e" translate="yes" xml:space="preserve">
          <source>What causes a java.lang.ArrayIndexOutOfBoundsException and how do I prevent it</source>
          <target state="translated">java.lang.ArrayIndexOutOfBoundsExceptionの原因とそれを防ぐ方法</target>
        </trans-unit>
        <trans-unit id="bb55d44dd992e42419d8c15fd1bd7aac35396dd6" translate="yes" xml:space="preserve">
          <source>What does &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; mean and how do I get rid of it?</source>
          <target state="translated">&lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; の意味とそれを取り除く方法を教えてください。</target>
        </trans-unit>
        <trans-unit id="e9c87e529845ba4eb148e1691d9c403b1ca860f1" translate="yes" xml:space="preserve">
          <source>What's the benefit? Well, one thing is the readability like English. Second, you need not worry about the &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt;</source>
          <target state="translated">メリットは何ですか？ まあ、一つは英語のような読みやすさです。 次に、 &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; について心配する必要はありません。</target>
        </trans-unit>
        <trans-unit id="b83ffae61c077a74faa175eb0d7a19c51085be91" translate="yes" xml:space="preserve">
          <source>When accessing the contents of an array, position starts from 0. Since there are 3 items, it would mean name[0]=&quot;tom&quot;, name[1]=&quot;dick&quot; and name[2]=&quot;harry</source>
          <target state="translated">配列の内容にアクセスするときは、0から始まります。 3つの項目があるので、name[0]=&quot;tom&quot;、name[1]=&quot;dick&quot;、name[2]=&quot;harry &quot;ということになります。</target>
        </trans-unit>
        <trans-unit id="21c4f9e34818b940b94aad4347681ebd729452b7" translate="yes" xml:space="preserve">
          <source>When looping through an array, always make sure that the index you are retrieving is strictly smaller than the length of the array (the number of boxes). For instance:</source>
          <target state="translated">配列をループするときは、取得するインデックスが配列の長さ(ボックスの数)よりも厳密に小さいことを常に確認してください。例えば、次のようになります。</target>
        </trans-unit>
        <trans-unit id="a8e7bc32a808394e272ae6689457e5545c96742c" translate="yes" xml:space="preserve">
          <source>When looping, whatever you do, NEVER change the value of the loop iterator (here: &lt;code&gt;i&lt;/code&gt;). The only place this should change value is to keep the loop going. Changing it otherwise is just risking an exception, and is in most cases not neccessary.</source>
          <target state="translated">ループするときは、何をしても、ループイテレータの値を変更しないでください（ここでは &lt;code&gt;i&lt;/code&gt; ）。 これが値を変更する唯一の場所は、ループを続行することです。 それ以外の方法で変更すると、例外が発生するリスクがあり、ほとんどの場合、必要はありません。</target>
        </trans-unit>
        <trans-unit id="ebb326ae6390e70dc1b177e2b0208b0bb64caf54" translate="yes" xml:space="preserve">
          <source>When retrieving an arbitrary element of the array, always check that it is a valid index against the length of the array:</source>
          <target state="translated">配列の任意の要素を取得する際には、配列の長さに対して有効なインデックスであるかどうかを常にチェックします。</target>
        </trans-unit>
        <trans-unit id="56760542648cd08962b4e3756e8e84dae8f4b009" translate="yes" xml:space="preserve">
          <source>When you loop, since &lt;em&gt;i&lt;/em&gt; can be less than or equal to name.length, you are trying to access name[3] which is not available.</source>
          <target state="translated">ループすると、 &lt;em&gt;i&lt;/em&gt;がname.length以下になる可能性があるため、使用できないname [3]にアクセスしようとしています。</target>
        </trans-unit>
        <trans-unit id="6ed9583a8e6c12f193e1c58e4447e41bb36bb53c" translate="yes" xml:space="preserve">
          <source>Where possible, use foreach:</source>
          <target state="translated">可能な場合は、foreachを使用します。</target>
        </trans-unit>
        <trans-unit id="b8fe845ef566e997b383f88a04110374463a4503" translate="yes" xml:space="preserve">
          <source>Which will give you the value of the 4th box in the series (since the first box has index 0).</source>
          <target state="translated">これは、シリーズの4番目のボックスの値を与えます(最初のボックスはインデックスが0なので)。</target>
        </trans-unit>
        <trans-unit id="624ef4a3740953cc9a213eb14b93b0b2e5f9c429" translate="yes" xml:space="preserve">
          <source>With my running example, these code snippets would produce such an exception:</source>
          <target state="translated">私の実行例では、これらのコードスニペットはこのような例外を生成します。</target>
        </trans-unit>
        <trans-unit id="7c3ab5099b68e1210458a8824f2f69cff0875f01" translate="yes" xml:space="preserve">
          <source>You are getting &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; due to &lt;code&gt;i&amp;lt;=name.length&lt;/code&gt; part. &lt;code&gt;name.length&lt;/code&gt; return the length of the string &lt;code&gt;name&lt;/code&gt;, which is 3. Hence when you try to access &lt;code&gt;name[3]&lt;/code&gt;, it's illegal and throws an exception.</source>
          <target state="translated">&lt;code&gt;i&amp;lt;=name.length&lt;/code&gt; 部分が原因で、 &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; が発生しています。 &lt;code&gt;name.length&lt;/code&gt; は、文字列 &lt;code&gt;name&lt;/code&gt; の長さ（ 3）を返します。したがって、 &lt;code&gt;name[3]&lt;/code&gt; にアクセスしようとすると、不正であり、例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="88fda9819061df73cf0cd57a4ed585da9d6594bf" translate="yes" xml:space="preserve">
          <source>You can use Optional in functional style to avoid &lt;code&gt;NullPointerException&lt;/code&gt; and &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; :</source>
          <target state="translated">オプションを関数スタイルで使用して、 &lt;code&gt;NullPointerException&lt;/code&gt; および &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; を回避できます。</target>
        </trans-unit>
        <trans-unit id="5775515a4442e7383537b839e5de1edf467e55a1" translate="yes" xml:space="preserve">
          <source>You could not iterate or store more data than the length of your array. In this case you could do like this:</source>
          <target state="translated">配列の長さ以上のデータを反復したり、保存したりすることはできません。この場合は次のようにします。</target>
        </trans-unit>
        <trans-unit id="fd6473485a88cd5ea08337b10331276b1a95159d" translate="yes" xml:space="preserve">
          <source>You might want to be tempted to do something like this:</source>
          <target state="translated">こんなことをしたくなるかもしれません。</target>
        </trans-unit>
        <trans-unit id="7263f70eb4c26fbc94d614d07ca24d5be5b6c988" translate="yes" xml:space="preserve">
          <source>You're guaranteed not to run out of elements to iterate over when doing this, and your [corrected] example is easily converted over.</source>
          <target state="translated">これを行う際に反復処理する要素が尽きることがないことが保証されており、[修正済み]の例は簡単に変換されます。</target>
        </trans-unit>
        <trans-unit id="7f463109edd18da522e4affdfaeeb2a70a4e9339" translate="yes" xml:space="preserve">
          <source>Your code should read</source>
          <target state="translated">あなたのコードは</target>
        </trans-unit>
        <trans-unit id="c45c4b9e41379120d4b8c23bbeb51afcc23ddbe6" translate="yes" xml:space="preserve">
          <source>Your first port of call should be the &lt;a href=&quot;http://download.oracle.com/javase/6/docs/api/java/lang/ArrayIndexOutOfBoundsException.html&quot;&gt;documentation&lt;/a&gt; which explains it reasonably clearly:</source>
          <target state="translated">呼び出しの最初のポートは、それを合理的に明確に説明する&lt;a href=&quot;http://download.oracle.com/javase/6/docs/api/java/lang/ArrayIndexOutOfBoundsException.html&quot;&gt;ドキュメント&lt;/a&gt;でなければなりません。</target>
        </trans-unit>
        <trans-unit id="e25dd41118ce4a277b2cdba556c408f5270f5dae" translate="yes" xml:space="preserve">
          <source>creates a row of 5 boxes, each holding an &lt;code&gt;int&lt;/code&gt;. Each of the boxes have an index, a position in the series of boxes. This index starts at 0, and ends at N-1, where N is the size of the array (the number of boxes).</source>
          <target state="translated">それぞれが &lt;code&gt;int&lt;/code&gt; を保持する5つのボックスの行を作成します。 各ボックスには、インデックス、一連のボックス内の位置があります。 このインデックスは0から始まり、N-1で終わります。Nは配列のサイズ（ボックスの数）です。</target>
        </trans-unit>
        <trans-unit id="4cb668af4930d81353a3310609b33c2493fd2759" translate="yes" xml:space="preserve">
          <source>name.length is 3 since the array has been defined with 3 String objects.</source>
          <target state="translated">配列は3つのStringオブジェクトで定義されているので、name.lengthは3です。</target>
        </trans-unit>
        <trans-unit id="8c31283a87d0e1add19eff44eaba6568c7142dd6" translate="yes" xml:space="preserve">
          <source>that mean your name length is 3</source>
          <target state="translated">ということは、あなたの名前の長さは3であることを意味します</target>
        </trans-unit>
        <trans-unit id="aa7cbb05848ca116876681b0b98f3b383f512694" translate="yes" xml:space="preserve">
          <source>then the only valid index is:</source>
          <target state="translated">とすると、有効なインデックスは</target>
        </trans-unit>
        <trans-unit id="63d3347f5f0195a97465deba3cbc8d3861caa65e" translate="yes" xml:space="preserve">
          <source>then the only valid indexes are:</source>
          <target state="translated">とすると、有効なインデックスは</target>
        </trans-unit>
        <trans-unit id="a9c10e0dab48e0a132627230e9d964bb7f24844d" translate="yes" xml:space="preserve">
          <source>you will get 3;</source>
          <target state="translated">あなたは3を得るでしょう。</target>
        </trans-unit>
        <trans-unit id="cc56332e0ea3ac0013c9d3c6772740bb91c14068" translate="yes" xml:space="preserve">
          <source>your loop is running from 0 to 3 
which should be running either &quot;0 to 2&quot; or &quot;1 to 3&quot;</source>
          <target state="translated">あなたのループは0から3まで実行されていますが、これは &quot;0から2 &quot;か &quot;1から3 &quot;のどちらかを実行する必要があります。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
