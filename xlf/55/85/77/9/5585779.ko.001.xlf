<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://stackoverflow.com/questions/5585779">
    <body>
      <group id="5585779">
        <trans-unit id="694b254cc2670de81a83d11dba66284af07c8b60" translate="yes" xml:space="preserve">
          <source>(This treatment defaults a malformed number to &lt;code&gt;0&lt;/code&gt;, but you can do something else if you like.)</source>
          <target state="translated">(이 처리는 기형 숫자의 기본값이 &lt;code&gt;0&lt;/code&gt; 이지만 원하는 경우 다른 작업을 수행 할 수 있습니다.)</target>
        </trans-unit>
        <trans-unit id="f4dcc46f392a0547174db69f7692c8ea9a8ece2a" translate="yes" xml:space="preserve">
          <source>1) Using &lt;code&gt;Ints.tryParse&lt;/code&gt;:</source>
          <target state="translated">1) &lt;code&gt;Ints.tryParse&lt;/code&gt; 사용 :</target>
        </trans-unit>
        <trans-unit id="15a8727352e2363479cbcf5c3d0826672a8bfb1b" translate="yes" xml:space="preserve">
          <source>2) Using &lt;code&gt;NumberUtils.createInteger&lt;/code&gt;:</source>
          <target state="translated">2) &lt;code&gt;NumberUtils.createInteger&lt;/code&gt; 사용 :</target>
        </trans-unit>
        <trans-unit id="b243349e1441d07314afa9e3139ba9242173ab77" translate="yes" xml:space="preserve">
          <source>3) Using &lt;code&gt;NumberUtils.toInt&lt;/code&gt;:</source>
          <target state="translated">3) &lt;code&gt;NumberUtils.toInt&lt;/code&gt; 사용 :</target>
        </trans-unit>
        <trans-unit id="4d76271f57248a1a6fc50a48bf4a151eed3c6324" translate="yes" xml:space="preserve">
          <source>4) Using &lt;code&gt;Integer.valueOf&lt;/code&gt;:</source>
          <target state="translated">4) &lt;code&gt;Integer.valueOf&lt;/code&gt; 사용 :</target>
        </trans-unit>
        <trans-unit id="b0076974250ab9009332024c8f4a29763f23940c" translate="yes" xml:space="preserve">
          <source>5) Using &lt;code&gt;Integer.parseInt&lt;/code&gt;:</source>
          <target state="translated">5) &lt;code&gt;Integer.parseInt&lt;/code&gt; 사용 :</target>
        </trans-unit>
        <trans-unit id="37685e523934e61b99966a6bf06bb23589f01d13" translate="yes" xml:space="preserve">
          <source>6) Using &lt;code&gt;Integer.decode&lt;/code&gt;:</source>
          <target state="translated">6) &lt;code&gt;Integer.decode&lt;/code&gt; 사용 :</target>
        </trans-unit>
        <trans-unit id="f07a1e01d0b1aa55b02337fd5e2a299febf361f9" translate="yes" xml:space="preserve">
          <source>7) Using &lt;code&gt;Integer.parseUnsignedInt&lt;/code&gt;:</source>
          <target state="translated">7) &lt;code&gt;Integer.parseUnsignedInt&lt;/code&gt; 사용 :</target>
        </trans-unit>
        <trans-unit id="55ef9f24ebaee86d17d1750ab13b06a6ef3d99aa" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html#Integer-java.lang.String-&quot;&gt;Java 8 - Integer(String)&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html#Integer-java.lang.String-&quot;&gt;Java 8-정수 (문자열)&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="6ffdcc06978bdef845d54b2ec6a7520ea70e43a7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://en.wikipedia.org/wiki/Google_Guava&quot;&gt;Google Guava&lt;/a&gt; has &lt;a href=&quot;https://google.github.io/guava/releases/19.0/api/docs/com/google/common/primitives/Ints.html#tryParse(java.lang.String)&quot;&gt;tryParse(String)&lt;/a&gt;, which returns &lt;code&gt;null&lt;/code&gt; if the string couldn't be parsed, for example:</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/Google_Guava&quot;&gt;Google Guava&lt;/a&gt; 에는 &lt;a href=&quot;https://google.github.io/guava/releases/19.0/api/docs/com/google/common/primitives/Ints.html#tryParse(java.lang.String)&quot;&gt;tryParse (String)&lt;/a&gt; 이 있으며, 문자열을 구문 분석 할 수없는 경우 &lt;code&gt;null&lt;/code&gt; 을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="0e4b4aff1481000a3f84c2859398512f2c541764" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Integer.parseInt(&quot; 1&quot;);&lt;/code&gt;     // Exception (blank space)</source>
          <target state="translated">&lt;code&gt;Integer.parseInt(&quot; 1&quot;);&lt;/code&gt; // 예외 (공백)</target>
        </trans-unit>
        <trans-unit id="45e38b97154b715adff682b78006e16a98b69ec5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Integer.parseInt(&quot;&quot;);&lt;/code&gt; // Exception (not 0 or something)</source>
          <target state="translated">&lt;code&gt;Integer.parseInt(&quot;&quot;);&lt;/code&gt; // 예외 (0 또는 다른 것이 아님)</target>
        </trans-unit>
        <trans-unit id="bddf5f4288985d98dd94b34c411d15012771a414" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Integer.parseInt(&quot;+1&quot;);&lt;/code&gt;     // ok</source>
          <target state="translated">&lt;code&gt;Integer.parseInt(&quot;+1&quot;);&lt;/code&gt; // 확인</target>
        </trans-unit>
        <trans-unit id="7caa24af1d508b9cf77c3b0ff5f72b584e0a8a97" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Integer.parseInt(&quot;-1&quot;);&lt;/code&gt;     // ok</source>
          <target state="translated">&lt;code&gt;Integer.parseInt(&quot;-1&quot;);&lt;/code&gt; // 확인</target>
        </trans-unit>
        <trans-unit id="922c9dc9ffb1ff8aee04ce581f493ebe401e09f2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Integer.parseInt(&quot;1&quot;);&lt;/code&gt;      // ok</source>
          <target state="translated">&lt;code&gt;Integer.parseInt(&quot;1&quot;);&lt;/code&gt; // 확인</target>
        </trans-unit>
        <trans-unit id="866c3d16917a17b356abbd2537d6fd8e0c031bc1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Integer.parseInt(&quot;1.1&quot;);&lt;/code&gt; // Exception (&lt;strong&gt;.&lt;/strong&gt; or &lt;strong&gt;,&lt;/strong&gt; or whatever is not allowed)</source>
          <target state="translated">&lt;code&gt;Integer.parseInt(&quot;1.1&quot;);&lt;/code&gt; // 예외 ( &lt;strong&gt;.&lt;/strong&gt; 또는 &lt;strong&gt;,&lt;/strong&gt; 또는 허용되지 않는 항목)</target>
        </trans-unit>
        <trans-unit id="248c9880289cb834c754d0c05d58ffcfcd44b0bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Integer.parseInt(&quot;2147483648&quot;);&lt;/code&gt; // Exception (Integer is limited to a &lt;a href=&quot;http://docs.oracle.com/javase/9/docs/api/java/lang/Integer.html#MAX_VALUE&quot;&gt;maximum value&lt;/a&gt; of 2,147,483,647)</source>
          <target state="translated">&lt;code&gt;Integer.parseInt(&quot;2147483648&quot;);&lt;/code&gt; // 예외 (정수는 &lt;a href=&quot;http://docs.oracle.com/javase/9/docs/api/java/lang/Integer.html#MAX_VALUE&quot;&gt;최대 값&lt;/a&gt; 2,147,483,647로 제한됨)</target>
        </trans-unit>
        <trans-unit id="82475f518c9488e29b566798d58604809015e00f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;intValue()&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;intValue()&lt;/code&gt;:</target>
        </trans-unit>
        <trans-unit id="111fa57e97e2849edea519e72dd04019e411dfa3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseInt&lt;/code&gt; returns primitive &lt;code&gt;int&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;parseInt&lt;/code&gt; 는 프리미티브 &lt;code&gt;int&lt;/code&gt; 를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="e6de906e401f512aea7d25714a2dae790e9822ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;valueOf&lt;/code&gt; returns a new or cached instance of &lt;code&gt;java.lang.Integer&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;valueOf&lt;/code&gt; 는 &lt;code&gt;java.lang.Integer&lt;/code&gt; 의 새 인스턴스 또는 캐시 된 인스턴스를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="ec01835bc166733682b313546358f688167b75da" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;It's important to mention&lt;/em&gt;: This constructor calls the &lt;code&gt;parseInt&lt;/code&gt; method.</source>
          <target state="translated">이 생성자는 &lt;code&gt;parseInt&lt;/code&gt; 메소드를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="5cdf18845c98dfc5251baf22da74049d706afe53" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;It can be done in seven ways:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;7 가지 방법으로 수행 할 수 있습니다.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ad08d8e6ac7ffb610e63e3b6ce38b301e7d7c53e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Remember the following things:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;다음 사항을 기억하십시오.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a57ff05a2e8465fb320b74acf6a65c99cdc76182" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This is a &lt;em&gt;complete&lt;/em&gt; program with all conditions positive and negative without using a library&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;이것은 라이브러리를 사용하지 않고 모든 조건이 긍정적이고 부정적인 &lt;em&gt;완전한&lt;/em&gt; 프로그램입니다&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="24d903023ddfce0c31a99e5bdc5e9da15a07c48e" translate="yes" xml:space="preserve">
          <source>Alternatively, you can use an &lt;code&gt;Ints&lt;/code&gt; method from the Guava library, which in combination with Java 8's &lt;code&gt;Optional&lt;/code&gt;, makes for a powerful and concise way to convert a string into an int:</source>
          <target state="translated">또는 Java 8의 &lt;code&gt;Optional&lt;/code&gt; 과 결합하여 Guava 라이브러리의 &lt;code&gt;Ints&lt;/code&gt; 메소드를 사용하여 문자열을 int로 변환하는 강력하고 간결한 방법을 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="66c32b4f4b7f823cb887a1fdafc857568523091f" translate="yes" xml:space="preserve">
          <source>An alternate solution is to use &lt;a href=&quot;https://en.wikipedia.org/wiki/Apache_Commons&quot;&gt;Apache Commons'&lt;/a&gt; NumberUtils:</source>
          <target state="translated">다른 해결책은 &lt;a href=&quot;https://en.wikipedia.org/wiki/Apache_Commons&quot;&gt;Apache Commons의&lt;/a&gt; NumberUtils를 사용하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="211dbb2ad833097b09c7f319ddccb84d4294d8f0" translate="yes" xml:space="preserve">
          <source>And there you go. You turned a String of digits (in this case, two digits), into an integer composed of those two digits, considering the following limitations:</source>
          <target state="translated">그리고 당신은 간다. 다음 제한 사항을 고려하여 숫자 문자열 (이 경우 2 자리)을 두 숫자로 구성된 정수로 바꿨습니다.</target>
        </trans-unit>
        <trans-unit id="7dc3aef9e7bd53227f6b60c749c43a54b082376a" translate="yes" xml:space="preserve">
          <source>Another limitation was the fact that I couldn't use repetitive cycles, therefore, a &lt;code&gt;for&lt;/code&gt; cycle (which would have been perfect) can't be used either. This limits us a bit, but then again, that's the goal. Since I only needed two digits (taking the last two digits), a simple &lt;code&gt;charAt&lt;/code&gt;solved it:</source>
          <target state="translated">또 다른 제한 사항은 반복 사이클을 사용할 수 없으므로 &lt;code&gt;for&lt;/code&gt; 사이클 (완벽했을 것입니다)을 사용할 수 없다는 사실입니다. 이것은 우리를 조금 제한하지만 다시 한 번 목표입니다. 두 자릿수 (마지막 두 자릿수 만 필요)가 필요했기 때문에 간단한 &lt;code&gt;charAt&lt;/code&gt; 가 해결했습니다.</target>
        </trans-unit>
        <trans-unit id="6d0daa23f5f598541261f444292a35123d481413" translate="yes" xml:space="preserve">
          <source>Apache NumberUtils API Version 3.4</source>
          <target state="translated">Apache NumberUtils API 버전 3.4</target>
        </trans-unit>
        <trans-unit id="74fae38a6fe6f774a0665852492c953d64dd58a4" translate="yes" xml:space="preserve">
          <source>Apart from the previous answers, I would like to add several functions. These are results while you use them:</source>
          <target state="translated">이전 답변 외에도 여러 기능을 추가하고 싶습니다. 사용하는 동안 결과는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="06e0fb67999f5f6e47ae5de31900bb1ca07924d5" translate="yes" xml:space="preserve">
          <source>As mentioned, Apache Commons' &lt;code&gt;NumberUtils&lt;/code&gt; can do it. It returns &lt;code&gt;0&lt;/code&gt; if it cannot convert a string to an int.</source>
          <target state="translated">언급 한 바와 같이 Apache Commons의 &lt;code&gt;NumberUtils&lt;/code&gt; 가이 를 수행 할 수 있습니다. 문자열을 int로 변환 할 수 없으면 &lt;code&gt;0&lt;/code&gt; 을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="8c3770a278e48985b1c3c77fcfe079f091d506d5" translate="yes" xml:space="preserve">
          <source>But be warned that this only works for non-negative numbers.</source>
          <target state="translated">그러나 이것은 음수가 아닌 숫자에만 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="6d1fb0f81b9e362000cf758a9fcfb1ce5f7d5783" translate="yes" xml:space="preserve">
          <source>Converting a string to an int is more complicated than just convertig a number. You have think about the following issues:</source>
          <target state="translated">문자열을 정수로 변환하는 것은 숫자를 변환하는 것보다 더 복잡합니다. 다음과 같은 문제에 대해 생각했습니다.</target>
        </trans-unit>
        <trans-unit id="fc6380f45b572191eb4ad926fcef3b979e90576c" translate="yes" xml:space="preserve">
          <source>Currently I'm doing an assignment for college, where I can't use certain expressions, such as the ones above, and by looking at the ASCII table, I managed to do it. It's a far more complex code, but it could help others that are restricted like I was.</source>
          <target state="translated">현재 나는 대학에 배정을하고 있는데, 위의 식과 같은 특정 표현을 사용할 수 없으며 ASCII 테이블을 보면 그것을 할 수있었습니다. 훨씬 복잡한 코드이지만, 나처럼 제한된 다른 사람들을 도울 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="436981f25319382aba75ee975838092ed6e662e8" translate="yes" xml:space="preserve">
          <source>Do it manually:</source>
          <target state="translated">수동으로 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="cff3fde786974d18474429ea3d146f44b692b8fe" translate="yes" xml:space="preserve">
          <source>Does the string only contains numbers &lt;strong&gt;0-9&lt;/strong&gt;?</source>
          <target state="translated">문자열에 숫자 &lt;strong&gt;0-9&lt;/strong&gt; 만 포함되어 있습니까?</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="5ab7721397827b925456d2a147cb5704105a62a7" translate="yes" xml:space="preserve">
          <source>Example usage:</source>
          <target state="translated">사용법 예 :</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="9c8cb23912175c44e121a6e1c33d68ac2ec60ad8" translate="yes" xml:space="preserve">
          <source>For a String builder and String buffer you can use:</source>
          <target state="translated">문자열 빌더 및 문자열 버퍼의 경우 다음을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3d9bb4ed2bdcb9bcf232c1d8a867abf94e7e3d0f" translate="yes" xml:space="preserve">
          <source>For a normal string you can use:</source>
          <target state="translated">일반 문자열의 경우 다음을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="44cae1decd1ad6db34cfbf6ba2eab833c314c708" translate="yes" xml:space="preserve">
          <source>For both positive and negative integers:</source>
          <target state="translated">양의 정수와 음의 정수 모두 :</target>
        </trans-unit>
        <trans-unit id="e1e672cac8f3e00dd351c53757b6e9c18b5db0a2" translate="yes" xml:space="preserve">
          <source>For example, given the string &lt;code&gt;&quot;1234&quot;&lt;/code&gt; the result should be the number &lt;code&gt;1234&lt;/code&gt;.</source>
          <target state="translated">예를 들어, 문자열 &lt;code&gt;&quot;1234&quot;&lt;/code&gt; 인 경우 결과는 숫자 &lt;code&gt;1234&lt;/code&gt; 여야합니다.</target>
        </trans-unit>
        <trans-unit id="8e9071ec5b0156c3d4979fe091851e374c419251" translate="yes" xml:space="preserve">
          <source>For example, here are two ways:</source>
          <target state="translated">예를 들어, 다음 두 가지 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="39b6570eb1da6a73fc53953612cd27caa5bc81bb" translate="yes" xml:space="preserve">
          <source>For valid positive integer:</source>
          <target state="translated">유효한 양의 정수의 경우 :</target>
        </trans-unit>
        <trans-unit id="20cbd708728ef70dc1bfe731ce4f13949a9a5aba" translate="yes" xml:space="preserve">
          <source>Having the codes, we just need to look up at the table, and make the necessary adjustments:</source>
          <target state="translated">코드가 있으면 테이블을 살펴보고 필요한 조정을 수행하면됩니다.</target>
        </trans-unit>
        <trans-unit id="4d94a699c8215c257ab0c1e897cd0a012c2739c8" translate="yes" xml:space="preserve">
          <source>Here we go</source>
          <target state="translated">우리는 간다</target>
        </trans-unit>
        <trans-unit id="349766e1aafc8e7fce906a9fd7f6b2b7e31df296" translate="yes" xml:space="preserve">
          <source>How can I convert a &lt;code&gt;String&lt;/code&gt; to an &lt;code&gt;int&lt;/code&gt; in Java?</source>
          <target state="translated">Java에서 &lt;code&gt;String&lt;/code&gt; 을 &lt;code&gt;int&lt;/code&gt; 로 변환하려면 어떻게해야합니까?</target>
        </trans-unit>
        <trans-unit id="26570a7087444e60e86455e56957d467ea0ebe86" translate="yes" xml:space="preserve">
          <source>How do I convert a String to an int in Java</source>
          <target state="translated">Java에서 문자열을 int로 변환하는 방법</target>
        </trans-unit>
        <trans-unit id="e2f326c105240ec1438530bd2b6e84164b4cf41d" translate="yes" xml:space="preserve">
          <source>I am a little bit surprised that nobody mentioned the Integer constructor that takes String as a parameter.</source>
          <target state="translated">String을 매개 변수로 사용하는 Integer 생성자를 언급 한 사람이 아무도 없다는 것에 약간 놀랐습니다.</target>
        </trans-unit>
        <trans-unit id="cd4d5696d28cc5812a2a971692890ea32a3617c0" translate="yes" xml:space="preserve">
          <source>I'm have a solution, but I do not know how effective it is. But it works well, and I think you could improve it. On the other hand, I did a couple of tests with &lt;a href=&quot;http://en.wikipedia.org/wiki/JUnit&quot;&gt;JUnit&lt;/a&gt; which step correctly. I attached the function and testing:</source>
          <target state="translated">나는 해결책이 있지만 그것이 얼마나 효과적인지 모른다. 그러나 잘 작동하며 개선 할 수 있다고 생각합니다. 반면에 &lt;a href=&quot;http://en.wikipedia.org/wiki/JUnit&quot;&gt;JUnit&lt;/a&gt; 을 사용하여 올바르게 테스트 한 몇 가지 테스트를 수행했습니다. 기능과 테스트를 첨부했습니다.</target>
        </trans-unit>
        <trans-unit id="ec8cce15890abb7d8513c3c2f66d488a01c89286" translate="yes" xml:space="preserve">
          <source>If you are expecting a whitespace before or after these numbers,
then make sure to do a &lt;code&gt;str = str.trim()&lt;/code&gt; before processing further.</source>
          <target state="translated">이 숫자 전후에 공백이 필요한 경우 추가 처리 전에 &lt;code&gt;str = str.trim()&lt;/code&gt; 을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="890c06d7455db902ea35764c7f0164a23f1d6794" translate="yes" xml:space="preserve">
          <source>If you look at the &lt;a href=&quot;https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/lang/Integer.html#parseInt(java.lang.String)&quot;&gt;Java Documentation&lt;/a&gt; you'll notice the &quot;catch&quot; is that this function can throw a &lt;code&gt;NumberFormatException&lt;/code&gt;, which of course you have to handle:</source>
          <target state="translated">&lt;a href=&quot;https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/lang/Integer.html#parseInt(java.lang.String)&quot;&gt;Java 문서&lt;/a&gt; 를 보면 &quot;캐치&quot;는이 함수가 &lt;code&gt;NumberFormatException&lt;/code&gt; 을 던질 수 있다는 것을 알 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="570a7ff0a7d7e24572c42f947341bf0b6f774178" translate="yes" xml:space="preserve">
          <source>If you want to get &lt;code&gt;int&lt;/code&gt; instead of &lt;code&gt;Integer&lt;/code&gt; you can use:</source>
          <target state="translated">&lt;code&gt;Integer&lt;/code&gt; 대신 &lt;code&gt;int&lt;/code&gt; 를 얻으려면 다음을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0d71bedbf598c6cb2ef567aed0bcbc08631a830d" translate="yes" xml:space="preserve">
          <source>Implementation:</source>
          <target state="translated">Implementation:</target>
        </trans-unit>
        <trans-unit id="76b04182fbcb3b0c34dd16d68546a5e9cd0fae36" translate="yes" xml:space="preserve">
          <source>In my opinion, this special case should be handled by returning an empty &lt;code&gt;Optional&amp;lt;Integer&amp;gt;&lt;/code&gt;. Since Java does not offer such a method, I use the following wrapper:</source>
          <target state="translated">내 의견으로는,이 특별한 경우는 빈 &lt;code&gt;Optional&amp;lt;Integer&amp;gt;&lt;/code&gt; 을 반환하여 처리해야합니다. Java는 이러한 방법을 제공하지 않기 때문에 다음 래퍼를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="f6cb3e6b8e880e8d008eb2087a981d80d6125730" translate="yes" xml:space="preserve">
          <source>In programming competitions, where you're assured that number will always be a valid integer, then you can write your own method to parse input. This will skip all validation related code (since you don't need any of that) and will be a bit more efficient.</source>
          <target state="translated">프로그래밍 경쟁에서는 숫자가 항상 유효한 정수라고 확신하는 경우 입력을 구문 분석하는 고유 한 방법을 작성할 수 있습니다. 이것은 모든 유효성 검사 관련 코드를 건너 뛰고 (필요하지 않기 때문에) 조금 더 효율적입니다.</target>
        </trans-unit>
        <trans-unit id="20d455383bf8e67d926623d7776b5cfd7976eab0" translate="yes" xml:space="preserve">
          <source>Integer.valueOf produces Integer object, all other methods - primitive int.</source>
          <target state="translated">Integer.valueOf는 Integer 객체, 다른 모든 메소드-primitive int를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="3810d1782bd7216cc251aa8d3b48c1bc789193df" translate="yes" xml:space="preserve">
          <source>It also works for base 8 and 16:</source>
          <target state="translated">기본 8과 16에도 작동합니다.</target>
        </trans-unit>
        <trans-unit id="edc27e8b9a825e4fc87a9328904df2134631a97f" translate="yes" xml:space="preserve">
          <source>It is important to handle this exception when trying to get integer values from split arguments or dynamically parsing something.</source>
          <target state="translated">분할 인수에서 정수 값을 가져 오거나 동적으로 구문 분석 할 때이 예외를 처리하는 것이 중요합니다.</target>
        </trans-unit>
        <trans-unit id="3d262153f65eb99d80b1e81fb7fc01b36f893069" translate="yes" xml:space="preserve">
          <source>Last 2 methods from &lt;a href=&quot;http://mvnrepository.com/artifact/org.apache.commons/commons-lang3&quot;&gt;commons-lang3&lt;/a&gt; and big article about converting &lt;a href=&quot;https://explainjava.com/convert-string-int-java/&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://mvnrepository.com/artifact/org.apache.commons/commons-lang3&quot;&gt;commons-lang3의&lt;/a&gt; 마지막 두 가지 방법과 &lt;a href=&quot;https://explainjava.com/convert-string-int-java/&quot;&gt;here&lt;/a&gt; 변환에 대한 큰 기사.</target>
        </trans-unit>
        <trans-unit id="d4324d8535d2d4c59ac559a1787b1923321648cc" translate="yes" xml:space="preserve">
          <source>Make sure there is no non-numeric data in the string.</source>
          <target state="translated">문자열에 숫자가 아닌 데이터가 없는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="20dc2bdac5fbd084321dbfa7b481c8db2e9d2e6a" translate="yes" xml:space="preserve">
          <source>Methods to do that:</source>
          <target state="translated">그렇게하는 방법 :</target>
        </trans-unit>
        <trans-unit id="c20cc1918f80ade55af0f6895bcb6815c394f86e" translate="yes" xml:space="preserve">
          <source>My String contains only numbers, and I want to return the number it represents.</source>
          <target state="translated">내 문자열에는 숫자 만 포함되어 있으며 숫자를 나타내는 숫자를 반환하고 싶습니다.</target>
        </trans-unit>
        <trans-unit id="cc4b75129ce1abc52574ebffdf2e757566867be3" translate="yes" xml:space="preserve">
          <source>No &quot;Magic&quot; Expressions such as parseInt</source>
          <target state="translated">parseInt와 같은 &quot;Magic&quot;표현식이 없습니다.</target>
        </trans-unit>
        <trans-unit id="ff6a39ae9ad3c28af539bff5a614af549e3882e6" translate="yes" xml:space="preserve">
          <source>No repetitive cycles</source>
          <target state="translated">반복적 인 사이클 없음</target>
        </trans-unit>
        <trans-unit id="b5a49ae1b6e55cef67e35fe68daf5774b56022e8" translate="yes" xml:space="preserve">
          <source>Now, why double? Well, because of a really &quot;weird&quot; step. Currently we have two doubles, 1 and 2, but we need to turn it into 12, there isn't any mathematic operation that we can do.</source>
          <target state="translated">자, 왜 두 배입니까? 글쎄, 정말 &quot;이상한&quot;단계 때문입니다. 현재 우리는 1과 2의 두 가지 복식을 가지고 있지만 12로 바꿔야합니다. 수학적 연산이 없습니다.</target>
        </trans-unit>
        <trans-unit id="4dc70ee6a8da6b9ef42dfdabd1e6b2b15971175c" translate="yes" xml:space="preserve">
          <source>Of course, the constructor will return type &lt;code&gt;Integer&lt;/code&gt;, and an unboxing operation converts the value to &lt;code&gt;int&lt;/code&gt;.</source>
          <target state="translated">물론 생성자는 &lt;code&gt;Integer&lt;/code&gt; 유형을 반환하고 unboxing 작업은 값을 &lt;code&gt;int&lt;/code&gt; 로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="695245bba6d41e192f29235224acb9047fd74f52" translate="yes" xml:space="preserve">
          <source>One method is parseInt(String). It returns a primitive int:</source>
          <target state="translated">한 가지 방법은 parseInt (String)입니다. 프리미티브 int를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="effc39e3946fa740463f3f6686452fc715540402" translate="yes" xml:space="preserve">
          <source>Option #1: Handle the exception explicitly, for example, showing a message dialog and then stop the execution of the current workflow. For example:</source>
          <target state="translated">옵션 # 1 : 메시지 대화 상자 표시와 같이 예외를 명시 적으로 처리 한 후 현재 워크 플로우 실행을 중지하십시오. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="01c30a824ce611ba027904df9c62cc553710a063" translate="yes" xml:space="preserve">
          <source>Option #2: Reset the affected variable if the execution flow can continue in case of an exception. For example, with some modifications in the catch block</source>
          <target state="translated">옵션 # 2 : 예외 발생시 실행 흐름이 계속 될 수있는 경우 영향을받는 변수를 재설정하십시오. 예를 들어 catch 블록에서 일부 수정</target>
        </trans-unit>
        <trans-unit id="a0857d46a7204959c02a48ce3236e283c9e0f638" translate="yes" xml:space="preserve">
          <source>Simply you can try this:</source>
          <target state="translated">간단히 시도해 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="14b5df8f6d17074319eb276b4ff032dec26d795a" translate="yes" xml:space="preserve">
          <source>So, here it is:</source>
          <target state="translated">그래서 여기 있습니다 :</target>
        </trans-unit>
        <trans-unit id="1f89a6429b3ef7da8747a7b574427a5e3edf1ac2" translate="yes" xml:space="preserve">
          <source>Testing with JUnit:</source>
          <target state="translated">JUnit으로 테스트 :</target>
        </trans-unit>
        <trans-unit id="6b9683eece0e7a49fdb3b872602307f8b2de2bc3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Integer&lt;/code&gt; class also provides the &lt;code&gt;valueOf(String str)&lt;/code&gt; method:</source>
          <target state="translated">&lt;code&gt;Integer&lt;/code&gt; 클래스는 &lt;code&gt;valueOf(String str)&lt;/code&gt; 메소드도 제공합니다.</target>
        </trans-unit>
        <trans-unit id="0ca9b6fd2c9439288990961c7987c8f587cca5bc" translate="yes" xml:space="preserve">
          <source>The Apache utility is nice because if the string is an invalid number format then 0 is always returned. Hence saving you the try catch block.</source>
          <target state="translated">문자열이 유효하지 않은 숫자 형식이면 항상 0이 반환되므로 Apache 유틸리티가 유용합니다. 따라서 try catch 블록을 절약하십시오.</target>
        </trans-unit>
        <trans-unit id="042bda071c8341285b6a098f4967231a90bbed8b" translate="yes" xml:space="preserve">
          <source>The first thing to do is to receive the input, in this case, a string of digits; I'll call it &lt;code&gt;String number&lt;/code&gt;, and in this case, I'll exemplify it using the number 12, therefore &lt;code&gt;String number = &quot;12&quot;;&lt;/code&gt;</source>
          <target state="translated">가장 먼저 할 일은 입력을받는 것입니다.이 경우에는 숫자 문자열입니다. 이것을 &lt;code&gt;String number&lt;/code&gt; 라고 부르겠습니다.이 경우에는 숫자 12를 사용하여 예시하겠습니다. 따라서 &lt;code&gt;String number = &quot;12&quot;;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="80ca2af479eafc6c73719d402b77b1e45739e589" translate="yes" xml:space="preserve">
          <source>The same is for all cases: &lt;code&gt;Short.valueOf&lt;/code&gt;/&lt;code&gt;parseShort&lt;/code&gt;, &lt;code&gt;Long.valueOf&lt;/code&gt;/&lt;code&gt;parseLong&lt;/code&gt;, etc.</source>
          <target state="translated">&lt;code&gt;Short.valueOf&lt;/code&gt; / &lt;code&gt;parseShort&lt;/code&gt; , Long.valueOf / &lt;code&gt;parseLong&lt;/code&gt; 등 모든 경우에 동일합니다.</target>
        </trans-unit>
        <trans-unit id="06fb4c0f2b797ed037acc8f4c87af17dfed0d5b1" translate="yes" xml:space="preserve">
          <source>The second method is valueOf(String), and it returns a new Integer() object:</source>
          <target state="translated">두 번째 방법은 valueOf (String)이며 새 Integer () 객체를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="099861c9fff4261008757b25e16b7760aa8f85b5" translate="yes" xml:space="preserve">
          <source>There is a slight difference between these methods:</source>
          <target state="translated">이 방법들에는 약간의 차이가 있습니다.</target>
        </trans-unit>
        <trans-unit id="00118cec3586f9aa7a8d598a7b5ae89c2c4db18d" translate="yes" xml:space="preserve">
          <source>There is only one type of exception: &lt;a href=&quot;http://docs.oracle.com/javase/9/docs/api/java/lang/NumberFormatException.html&quot;&gt;&lt;code&gt;NumberFormatException&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">하나의 예외 유형 만 있습니다 : &lt;a href=&quot;http://docs.oracle.com/javase/9/docs/api/java/lang/NumberFormatException.html&quot;&gt; &lt;code&gt;NumberFormatException&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c9caa0e9e967e38ebd287ea5100f889e129be2b3" translate="yes" xml:space="preserve">
          <source>This is merely playing with numbers. We were turning the last digit into a decimal. But now, look at what happens:</source>
          <target state="translated">이것은 단지 숫자를 가지고 노는 것입니다. 우리는 마지막 숫자를 10 진수로 바 꾸었습니다. 그러나 이제 어떤 일이 발생하는지 살펴보십시오.</target>
        </trans-unit>
        <trans-unit id="57a3d9b4435dc73eb33627b7106a9a712f641e16" translate="yes" xml:space="preserve">
          <source>Unboxing:</source>
          <target state="translated">Unboxing:</target>
        </trans-unit>
        <trans-unit id="7e68bca14271c3001075b3d7e6297f986cb578c2" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;http://docs.oracle.com/javase/9/docs/api/java/lang/Integer.html#parseInt-java.lang.String-&quot;&gt;&lt;code&gt;Integer.parseInt(yourString)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://docs.oracle.com/javase/9/docs/api/java/lang/Integer.html#parseInt-java.lang.String-&quot;&gt; &lt;code&gt;Integer.parseInt(yourString)&lt;/code&gt; &lt;/a&gt; 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="2d0ca695c712705763742beeea2ef7168fb92706" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;Double.parseDouble(your_string);&lt;/code&gt; to convert a &lt;code&gt;String&lt;/code&gt; to &lt;code&gt;double&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Double.parseDouble(your_string);&lt;/code&gt; 사용하십시오 . &lt;code&gt;String&lt;/code&gt; 을 &lt;code&gt;double&lt;/code&gt; 변환</target>
        </trans-unit>
        <trans-unit id="41f262942662e22d27991e1f010c8dd48fe509b2" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;Integer.parseInt(your_string);&lt;/code&gt; to convert a &lt;code&gt;String&lt;/code&gt; to &lt;code&gt;int&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Integer.parseInt(your_string);&lt;/code&gt; 사용하십시오 . &lt;code&gt;String&lt;/code&gt; 을 &lt;code&gt;int&lt;/code&gt; 로 변환</target>
        </trans-unit>
        <trans-unit id="ef9a3400c73acf218c46eb7f02f1961c368bee2b" translate="yes" xml:space="preserve">
          <source>Use Integer.parseInt() and put it inside a &lt;code&gt;try...catch&lt;/code&gt; block to handle any errors just in case a non-numeric character is entered, for example,</source>
          <target state="translated">Integer.parseInt ()를 사용하고 &lt;code&gt;try...catch&lt;/code&gt; 블록 안에 넣어 숫자가 아닌 문자가 입력되는 경우를 대비하여 오류를 처리하십시오.</target>
        </trans-unit>
        <trans-unit id="71616daf187f3ec90b1b4b07589319dfc4cbb114" translate="yes" xml:space="preserve">
          <source>Using a string constant for comparison or any sort of computing is always a good idea, because a constant never returns a null value.</source>
          <target state="translated">상수는 결코 null 값을 반환하지 않기 때문에 비교 또는 모든 종류의 컴퓨팅에 문자열 상수를 사용하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="b46c4fd228d9ffed287a4e7cc73ede057b24048f" translate="yes" xml:space="preserve">
          <source>We can also use &lt;code&gt;toInt(String strValue)&lt;/code&gt; of &lt;a href=&quot;https://commons.apache.org/proper/commons-lang/javadocs/api-3.4/org/apache/commons/lang3/math/NumberUtils.html&quot;&gt;NumberUtils Utility Class&lt;/a&gt; for the conversion:</source>
          <target state="translated">&lt;a href=&quot;https://commons.apache.org/proper/commons-lang/javadocs/api-3.4/org/apache/commons/lang3/math/NumberUtils.html&quot;&gt;NumberUtils 유틸리티 클래스&lt;/a&gt; 의 &lt;code&gt;toInt(String strValue)&lt;/code&gt; 를 사용하여 변환 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="f568106ffc354ff1f5b4c72822cb12e775e7095f" translate="yes" xml:space="preserve">
          <source>We can use the &lt;code&gt;parseInt(String str)&lt;/code&gt; method of the &lt;code&gt;Integer&lt;/code&gt; wrapper class for converting a String value to an integer value.</source>
          <target state="translated">&lt;code&gt;Integer&lt;/code&gt; 랩퍼 클래스의 &lt;code&gt;parseInt(String str)&lt;/code&gt; 메소드를 사용하여 문자열 값을 정수 값으로 변환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f584eac139ae9d8364e7c45a0d43e590ad63958f" translate="yes" xml:space="preserve">
          <source>We're dividing the latter (lastdigit) by 10 in the fashion &lt;code&gt;2/10 = 0.2&lt;/code&gt; (hence why double) like this:</source>
          <target state="translated">우리는 후자 (마지막 숫자)를 다음과 같이 &lt;code&gt;2/10 = 0.2&lt;/code&gt; (따라서 두 배)의 방식으로 10으로 나눕니다.</target>
        </trans-unit>
        <trans-unit id="c55ac334ca9f818120a829fa92a28a551f6a02d8" translate="yes" xml:space="preserve">
          <source>Well, a very important point to consider is that the Integer parser throws NumberFormatException as stated in &lt;a href=&quot;http://docs.oracle.com/javase/6/docs/api/java/lang/Integer.html#parseInt%28java.lang.String%29&quot;&gt;Javadoc&lt;/a&gt;.</source>
          <target state="translated">고려해야 할 매우 중요한 점은 Integer 파서가 &lt;a href=&quot;http://docs.oracle.com/javase/6/docs/api/java/lang/Integer.html#parseInt%28java.lang.String%29&quot;&gt;Javadoc에&lt;/a&gt; 명시된대로 NumberFormatException을 던진다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="e0f5cdf0e1c3613cc771dd5b3a0e2ad4c2d9ae84" translate="yes" xml:space="preserve">
          <source>What's up with &lt;strong&gt;-/+&lt;/strong&gt; before or after the string? Is that possible (referring to accounting numbers)?</source>
          <target state="translated">문자열 전후에 &lt;strong&gt;-/ +는&lt;/strong&gt; 무엇입니까? 가능합니까 (회계 번호 참조)?</target>
        </trans-unit>
        <trans-unit id="6d04c47a7453ed3ea0b6605aa0e6be6541e6933a" translate="yes" xml:space="preserve">
          <source>What's up with &lt;strong&gt;MAX_-/MIN_INFINITY?&lt;/strong&gt; What will happen if the string is 99999999999999999999? Can the machine treat this string as an int?</source>
          <target state="translated">&lt;strong&gt;MAX _- / MIN_INFINITY는 무엇입니까?&lt;/strong&gt; 문자열이 99999999999999999999이면 어떻게됩니까? 기계가이 문자열을 정수로 취급 할 수 있습니까?</target>
        </trans-unit>
        <trans-unit id="9bf911cb083d8f351bfd75d8407c382d02cb9fad" translate="yes" xml:space="preserve">
          <source>Whenever there is the slightest possibility that the given String does not contain an Integer, you have to handle this special case. Sadly, the standard Java methods &lt;code&gt;Integer::parseInt&lt;/code&gt; and &lt;code&gt;Integer::valueOf&lt;/code&gt; throw a &lt;code&gt;NumberFormatException&lt;/code&gt; to signal this special case. Thus, you have to use exceptions for flow control, which is generally considered bad coding style.</source>
          <target state="translated">주어진 문자열에 정수가 포함되어 있지 않을 가능성이있을 때마다이 특수한 경우를 처리해야합니다. 안타깝게도 표준 Java 메소드 &lt;code&gt;Integer::parseInt&lt;/code&gt; 및 &lt;code&gt;Integer::valueOf&lt;/code&gt; 는이 특별한 경우를 &lt;code&gt;NumberFormatException&lt;/code&gt; 위해 NumberFormatException 을 발생시킵니다. 따라서 흐름 제어에는 일반적으로 잘못된 코딩 스타일로 간주되는 예외를 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="1f5d0b365b948302949075e1d753c131c4e42219" translate="yes" xml:space="preserve">
          <source>While this is still using exceptions for flow control internally, the usage code becomes very clean. Also, you can clearly distinguish the case where &lt;code&gt;-1&lt;/code&gt; is parsed as a valid value and the case where an invalid String could not be parsed.</source>
          <target state="translated">이것은 여전히 ​​내부적으로 흐름 제어에 대한 예외를 사용하고 있지만 사용 코드는 매우 깨끗합니다. 또한 &lt;code&gt;-1&lt;/code&gt; 을 유효한 값으로 구문 분석하는 경우와 유효하지 않은 문자열을 구문 분석 할 수없는 경우를 명확하게 구별 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="761a7e2ce4712cac0a9675c6f9889fa3ae0438a4" translate="yes" xml:space="preserve">
          <source>Without getting too into the math, we're simply isolating units the digits of a number. You see, since we only consider 0-9, dividing by a multiple of 10 is like creating a &quot;box&quot; where you store it (think back at when your first grade teacher explained you what a unit and a hundred were). So:</source>
          <target state="translated">수학에 들어 가지 않고 단순히 숫자의 숫자를 단위로 분리합니다. 우리는 0-9 만 고려하기 때문에 10의 배수로 나누는 것은 저장하는 &quot;상자&quot;를 만드는 것과 같습니다 (1 학년 교사가 당신에게 한 단위와 백이 무엇인지 설명했을 때를 다시 생각해보십시오). 그래서:</target>
        </trans-unit>
        <trans-unit id="26e84edc7cfd68ebd400d6799bf1147eb783c8f7" translate="yes" xml:space="preserve">
          <source>You can also begin by removing all non-numerical characters and then parsing the integer:</source>
          <target state="translated">숫자가 아닌 문자를 모두 제거한 다음 정수를 구문 분석하여 시작할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="ed09060e6f34d1199addd2fb9de3f5b90c88be9e" translate="yes" xml:space="preserve">
          <source>You can also define your own default value:</source>
          <target state="translated">자신의 기본값을 정의 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="8e91c708c6755107644e044b1b05f8b0880b7d93" translate="yes" xml:space="preserve">
          <source>You can also use &lt;code&gt;public static Integer decode(String nm) throws NumberFormatException&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;public static Integer decode(String nm) throws NumberFormatException&lt;/code&gt; 사용할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="aaeaf51d75d46c895b3050148104f155f9cf0f46" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;new Scanner(&quot;1244&quot;).nextInt()&lt;/code&gt;. Or ask if even an int exists: &lt;code&gt;new Scanner(&quot;1244&quot;).hasNextInt()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;new Scanner(&quot;1244&quot;).nextInt()&lt;/code&gt; 사용할 수 있습니다. 또는 int도 있는지 물어보십시오 : &lt;code&gt;new Scanner(&quot;1244&quot;).hasNextInt()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1ad41ff2a3f9567895be76cb3a2fd58cd040afc8" translate="yes" xml:space="preserve">
          <source>You can use this code also, with some precautions.</source>
          <target state="translated">이 코드는 몇 가지주의 사항과 함께 사용할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="e174285ea0091c00e55e66fcf7f085051cdfb4fa" translate="yes" xml:space="preserve">
          <source>You could use any of following:</source>
          <target state="translated">다음 중 하나를 사용할 수 있습니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
