<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://stackoverflow.com/questions/9329446">
    <body>
      <group id="9329446">
        <trans-unit id="407418523e4b6661ebd3d7c0977b4358422a77b7" translate="yes" xml:space="preserve">
          <source>&quot;Just do this to every item in the list, I don't care about the order!&quot;</source>
          <target state="translated">&quot;Просто сделай так со всеми пунктами в списке,мне плевать на порядок!&quot;</target>
        </trans-unit>
        <trans-unit id="828290fcafc33530b24d3d5dd4a9ad6ca15d4e08" translate="yes" xml:space="preserve">
          <source>(I couldn't find the equivalent verbiage in the ES2015 spec, but it's bound to still be the case.) Again, as of this writing the common host-provided array-like objects in modern browsers [&lt;code&gt;NodeList&lt;/code&gt; instances, for instance] &lt;strong&gt;do&lt;/strong&gt; handle &lt;code&gt;[[HasProperty]]&lt;/code&gt; correctly, but it's important to test.)</source>
          <target state="translated">(Я не смог найти эквивалентного словоблудия в спецификации ES2015, но он все равно будет иметь место.) Опять же, на момент написания этой статьи общие современные объекты, подобные массиву, в современных браузерах [например, экземпляры &lt;code&gt;NodeList&lt;/code&gt; ] &lt;strong&gt;делают&lt;/strong&gt; обрабатывать &lt;code&gt;[[HasProperty]]&lt;/code&gt; правильно, но важно проверить.)</target>
        </trans-unit>
        <trans-unit id="6b45776c77fb3cd134163e2ba508745f2d7fa17d" translate="yes" xml:space="preserve">
          <source>(If the discussion of intent makes no sense to you, then you and your code may benefit from watching Crockford's lecture on &lt;a href=&quot;https://www.youtube.com/watch?v=taaEzHI9xyY&amp;amp;t=480&quot;&gt;Programming Style &amp;amp; Your Brain&lt;/a&gt;.)</source>
          <target state="translated">(Если обсуждение намерений не имеет смысла для вас, тогда вам и вашему коду может быть полезно посмотреть лекцию Крокфорда о &lt;a href=&quot;https://www.youtube.com/watch?v=taaEzHI9xyY&amp;amp;t=480&quot;&gt;стиле программирования и вашем мозге&lt;/a&gt; .)</target>
        </trans-unit>
        <trans-unit id="4123820b5846a3f7526a13d056cd330d08a55f64" translate="yes" xml:space="preserve">
          <source>1. Use &lt;code&gt;forEach&lt;/code&gt; and related</source>
          <target state="translated">1. Используйте &lt;code&gt;forEach&lt;/code&gt; и связанные</target>
        </trans-unit>
        <trans-unit id="5a308f239da9f276808356c1264e14c4f42dba7f" translate="yes" xml:space="preserve">
          <source>2. Use a simple &lt;code&gt;for&lt;/code&gt; loop</source>
          <target state="translated">2. Используйте простой цикл &lt;code&gt;for&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5547e5e05c2ee31034d6e9a26818f942561707ff" translate="yes" xml:space="preserve">
          <source>3. Use &lt;code&gt;for-in&lt;/code&gt;&lt;em&gt;correctly&lt;/em&gt;</source>
          <target state="translated">3. Используйте &lt;code&gt;for-in&lt;/code&gt; &lt;em&gt;корректно&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="799ce3e6b5064abe821148b3f183753446d2f3dc" translate="yes" xml:space="preserve">
          <source>4. Use &lt;code&gt;for-of&lt;/code&gt; (use an iterator implicitly) (ES2015+)</source>
          <target state="translated">4. Используйте &lt;code&gt;for-of&lt;/code&gt; (неявно используйте итератор) (ES2015 +)</target>
        </trans-unit>
        <trans-unit id="219586416c25d4118e0031c2b8c71aae94dda23d" translate="yes" xml:space="preserve">
          <source>5. Use an iterator explicitly (ES2015+)</source>
          <target state="translated">5.Использовать итератор явно (ES2015+).</target>
        </trans-unit>
        <trans-unit id="f808743c064b9869ab9f6547f7f8581b28fea109" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://codepen.io/Micka33/pen/nbyxf&quot;&gt;A CodePen example&lt;/a&gt; of how it works is:</source>
          <target state="translated">&lt;a href=&quot;http://codepen.io/Micka33/pen/nbyxf&quot;&gt;Пример CodePen&lt;/a&gt; о том, как это работает:</target>
        </trans-unit>
        <trans-unit id="fedd9eb5c4d04a7948778748c41299d24255d66b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach&quot;&gt;Documentation for native &lt;code&gt;Array.prototype.forEach()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach&quot;&gt;Документация для нативного &lt;code&gt;Array.prototype.forEach()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="33c4d33aaa1f39715e196efdb5603883d817169a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of&quot;&gt;for...of&lt;/a&gt; (MDN) describes the next way of iterating using &lt;code&gt;for (variable of object)&lt;/code&gt; as the part of the Harmony (ECMAScript&amp;nbsp;6) proposal.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of&quot;&gt;for ... of&lt;/a&gt; (MDN) описывает следующий способ итерации с использованием &lt;code&gt;for (variable of object)&lt;/code&gt; как части предложения Harmony (ECMAScript 6).</target>
        </trans-unit>
        <trans-unit id="dd98744e853daba8a03a51ff44a45ab285ef96ac" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-array.prototype.every&quot;&gt;&lt;code&gt;every&lt;/code&gt;&lt;/a&gt; (stops looping the first time the callback returns &lt;code&gt;false&lt;/code&gt; or something falsey)</source>
          <target state="translated">&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-array.prototype.every&quot;&gt; &lt;code&gt;every&lt;/code&gt; &lt;/a&gt; (прекращает цикл в первый раз, когда обратный вызов возвращает &lt;code&gt;false&lt;/code&gt; или что-то фальшивое)</target>
        </trans-unit>
        <trans-unit id="1fe98b98ac1a303b3e5d9fe919c4bf1d837d054e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-array.prototype.filter&quot;&gt;&lt;code&gt;filter&lt;/code&gt;&lt;/a&gt; (creates a new array including elements where the filter function returns &lt;code&gt;true&lt;/code&gt; and omitting the ones where it returns &lt;code&gt;false&lt;/code&gt;)</source>
          <target state="translated">&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-array.prototype.filter&quot;&gt; &lt;code&gt;filter&lt;/code&gt; &lt;/a&gt; (создает новый массив, включающий элементы, в которых функция фильтра возвращает &lt;code&gt;true&lt;/code&gt; и пропускает те, в которых она возвращает &lt;code&gt;false&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="dd4ceb819717bc057bb5f5be12b2dcaa00cc6d46" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-array.prototype.map&quot;&gt;&lt;code&gt;map&lt;/code&gt;&lt;/a&gt; (creates a new array from the values returned by the callback)</source>
          <target state="translated">&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-array.prototype.map&quot;&gt; &lt;code&gt;map&lt;/code&gt; &lt;/a&gt; (создает новый массив из значений, возвращаемых обратным вызовом)</target>
        </trans-unit>
        <trans-unit id="967df601fa043b4383889e2892717dd399d122d6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-array.prototype.reduce&quot;&gt;&lt;code&gt;reduce&lt;/code&gt;&lt;/a&gt; (builds up a value by repeatedly calling the callback, passing in previous values; see the spec for the details; useful for summing the contents of an array and many other things)</source>
          <target state="translated">&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-array.prototype.reduce&quot;&gt; &lt;code&gt;reduce&lt;/code&gt; &lt;/a&gt; (создает значение путем многократного вызова обратного вызова, передачи предыдущих значений; подробности см. в спецификации; полезно для суммирования содержимого массива и многих других)</target>
        </trans-unit>
        <trans-unit id="cc8c405cc76a381935725e183d15ed035da147b4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-array.prototype.reduceright&quot;&gt;&lt;code&gt;reduceRight&lt;/code&gt;&lt;/a&gt; (like &lt;code&gt;reduce&lt;/code&gt;, but works in descending rather than ascending order)</source>
          <target state="translated">&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-array.prototype.reduceright&quot;&gt; &lt;code&gt;reduceRight&lt;/code&gt; &lt;/a&gt; (например, Reduce , но работает по убыванию, а не по возрастанию)</target>
        </trans-unit>
        <trans-unit id="adfd7ff17249a9d39816111c7afab18302df88c6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-array.prototype.some&quot;&gt;&lt;code&gt;some&lt;/code&gt;&lt;/a&gt; (stops looping the first time the callback returns &lt;code&gt;true&lt;/code&gt; or something truthy)</source>
          <target state="translated">&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-array.prototype.some&quot;&gt; &lt;code&gt;some&lt;/code&gt; &lt;/a&gt; (прекращает цикл в первый раз, когда обратный вызов возвращает &lt;code&gt;true&lt;/code&gt; или что-то правдивое)</target>
        </trans-unit>
        <trans-unit id="377286bac8d6282390dfb096683ce2f568297474" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array#forEach&lt;/code&gt; (&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-array.prototype.foreach&quot;&gt;&lt;code&gt;spec&lt;/code&gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach&quot;&gt;&lt;code&gt;MDN&lt;/code&gt;&lt;/a&gt;) (or its relatives &lt;code&gt;some&lt;/code&gt; and such) (ES5+ only),</source>
          <target state="translated">&lt;code&gt;Array#forEach&lt;/code&gt; ( &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-array.prototype.foreach&quot;&gt; &lt;code&gt;spec&lt;/code&gt; &lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach&quot;&gt; &lt;code&gt;MDN&lt;/code&gt; &lt;/a&gt; ) (или &lt;code&gt;some&lt;/code&gt; его родственники) (только ES5 +),</target>
        </trans-unit>
        <trans-unit id="d7e42662fabd1b4650592db96d131acd3a1e156b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array.from&lt;/code&gt; (ES2015+, but easily polyfilled) creates an array from an array-like object, optionally passing the entries through a mapping function first. So:</source>
          <target state="translated">&lt;code&gt;Array.from&lt;/code&gt; (ES2015 +, но легко заполняемый) создает массив из объекта, похожего на массив, при необходимости сначала пропуская записи через функцию отображения. Так:</target>
        </trans-unit>
        <trans-unit id="b0e8f140b1faf7f02335c4444e052df5049591e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;angular.forEach&lt;/code&gt; takes 2 arguments and an optional third argument. The first argument is the object (array) to iterate over, the second argument is the iterator function, and the optional third argument is the object context (basically referred to inside the loop as 'this'.</source>
          <target state="translated">&lt;code&gt;angular.forEach&lt;/code&gt; принимает 2 аргумента и необязательный третий аргумент. Первый аргумент - это объект (массив) для итерации, второй аргумент - это функция итератора, а необязательный третий аргумент - это контекст объекта (в основном называемый внутри цикла как &amp;laquo;this&amp;raquo;).</target>
        </trans-unit>
        <trans-unit id="9a8d763ba59a05f954f7c48ce76ecba0f7d62607" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;entries()&lt;/code&gt;: Returns an iterator where each &lt;code&gt;value&lt;/code&gt; is an array in the form &lt;code&gt;[key, value]&lt;/code&gt; for that iteration.</source>
          <target state="translated">&lt;code&gt;entries()&lt;/code&gt; : возвращает итератор, где каждое &lt;code&gt;value&lt;/code&gt; является массивом в форме &lt;code&gt;[key, value]&lt;/code&gt; для этой итерации.</target>
        </trans-unit>
        <trans-unit id="b4cbd4974267f738d1be9503fdb7ebf5943cbd34" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;for-in&lt;/code&gt; with the same safeguards as with an array should work with array-like objects as well; the caveat for host-provided objects on #1 above may apply.</source>
          <target state="translated">&lt;code&gt;for-in&lt;/code&gt; с теми же средствами защиты, что и с массивом, должен работать и с объектами, подобными массиву; может применяться предостережение для предоставленных хостом объектов на # 1 выше.</target>
        </trans-unit>
        <trans-unit id="9b9fa350aa7ed228cd4b3e93d0298f289edbbed8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;for-of&lt;/code&gt; will use the iterator provided by the object (if any); we'll have to see how this plays with the various array-like objects, particularly host-provided ones. For instance, the specification for the &lt;code&gt;NodeList&lt;/code&gt; from &lt;code&gt;querySelectorAll&lt;/code&gt; was updated to support iteration. The spec for the &lt;code&gt;HTMLCollection&lt;/code&gt; from &lt;code&gt;getElementsByTagName&lt;/code&gt; was not.</source>
          <target state="translated">&lt;code&gt;for-of&lt;/code&gt; будет использовать итератор, предоставленный объектом (если есть); мы должны увидеть, как это работает с различными объектами, похожими на массивы, особенно с предоставленными хостом. Например, спецификация для &lt;code&gt;NodeList&lt;/code&gt; из querySelectorAll была обновлена ​​для поддержки итерации. Спецификации для &lt;code&gt;HTMLCollection&lt;/code&gt; от &lt;code&gt;getElementsByTagName&lt;/code&gt; не было.</target>
        </trans-unit>
        <trans-unit id="04cdb28da8f19e68125e4596f8a56b848aec15ff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forEach&lt;/code&gt; accepts a callback function and, optionally, a value to use as &lt;code&gt;this&lt;/code&gt; when calling that callback (not used above). The callback is called for each entry in the array, in order, skipping non-existent entries in sparse arrays. Although I only used one argument above, the callback is called with three: The value of each entry, the index of that entry, and a reference to the array you're iterating over (in case your function doesn't already have it handy).</source>
          <target state="translated">&lt;code&gt;forEach&lt;/code&gt; принимает функцию обратного вызова и, необязательно, значение, которое будет использоваться при вызове этого обратного вызова (не использовалось выше). Обратный вызов вызывается для каждой записи в массиве, чтобы пропустить несуществующие записи в разреженных массивах. Хотя выше я использовал только один аргумент, обратный вызов вызывается с тремя: значением каждой записи, индексом этой записи и ссылкой на массив, по которому вы перебираете (в случае, если ваша функция еще не пригодилась ).</target>
        </trans-unit>
        <trans-unit id="10cc3315d863ec1f2a75337ba363aaa39af9ff7b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forEach&lt;/code&gt; has the benefit that you don't have to declare indexing and value variables in the containing scope, as they're supplied as arguments to the iteration function, and so nicely scoped to just that iteration.</source>
          <target state="translated">Преимущество &lt;code&gt;forEach&lt;/code&gt; заключается в том, что вам не нужно объявлять переменные индексации и значения в содержащей области, так как они предоставляются в качестве аргументов функции итерации и так хорошо подходят только для этой итерации.</target>
        </trans-unit>
        <trans-unit id="d31603bd232d66e37b18d7476c0486024b09c2d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forEach&lt;/code&gt; will iterate over the array you provide and for each iteration it will have &lt;code&gt;element&lt;/code&gt; which holds the value of that iteration. If you need index you can get the current index by passing the &lt;code&gt;i&lt;/code&gt; as the second parameter in the callback function for forEach.</source>
          <target state="translated">&lt;code&gt;forEach&lt;/code&gt; будет выполнять итерацию по предоставленному вами массиву и для каждой итерации будет иметь &lt;code&gt;element&lt;/code&gt; содержащий значение этой итерации. Если вам нужен индекс, вы можете получить текущий индекс, передавая &lt;code&gt;i&lt;/code&gt; в качестве второго параметра в функцию обратного вызова для forEach.</target>
        </trans-unit>
        <trans-unit id="a637b50b32f61aa2eb966f27cbab468a25797cfb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;keys()&lt;/code&gt;: Returns an iterator where each &lt;code&gt;value&lt;/code&gt; is the key for that iteration (so for our &lt;code&gt;a&lt;/code&gt; above, that would be &lt;code&gt;&quot;0&quot;&lt;/code&gt;, then &lt;code&gt;&quot;1&quot;&lt;/code&gt;, then &lt;code&gt;&quot;2&quot;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;keys()&lt;/code&gt; : возвращает итератор, где каждое &lt;code&gt;value&lt;/code&gt; является ключом для этой итерации (поэтому для нашего &lt;code&gt;a&lt;/code&gt; выше, это будет &lt;code&gt;&quot;0&quot;&lt;/code&gt; , затем &lt;code&gt;&quot;1&quot;&lt;/code&gt; , затем &lt;code&gt;&quot;2&quot;&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="e09aa066919616abd8401c1b7f350a3988032555" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;values()&lt;/code&gt;: This is the one I used above. It returns an iterator where each &lt;code&gt;value&lt;/code&gt; is the array entry for that iteration (&lt;code&gt;&quot;a&quot;&lt;/code&gt;, &lt;code&gt;&quot;b&quot;&lt;/code&gt;, and &lt;code&gt;&quot;c&quot;&lt;/code&gt; in the example earlier).</source>
          <target state="translated">&lt;code&gt;values()&lt;/code&gt; : это тот, который я использовал выше. Он возвращает итератор, где каждое &lt;code&gt;value&lt;/code&gt; является записью массива для этой итерации ( &lt;code&gt;&quot;a&quot;&lt;/code&gt; , &lt;code&gt;&quot;b&quot;&lt;/code&gt; и &lt;code&gt;&quot;c&quot;&lt;/code&gt; в предыдущем примере).</target>
        </trans-unit>
        <trans-unit id="b95a3bad9c3b12555c2a9ef69ef39152f687a5c6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; will contain the last value of &lt;code&gt;y&lt;/code&gt; and it will be removed from the array. You can also use &lt;code&gt;shift()&lt;/code&gt; which will give and remove the first item from &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; будет содержать последнее значение &lt;code&gt;y&lt;/code&gt; и будет удалено из массива. Вы также можете использовать &lt;code&gt;shift()&lt;/code&gt; который даст и удалит первый элемент из &lt;code&gt;y&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="94d62988ff95e5983c9bb7336fe74b54beb70d31" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Credits go to WYL for showing me the benefits and horrors of the reverse for loop.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Кредиты идут в WYL для того, чтобы показать мне преимущества и ужасы обратного цикла.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5ebe32016513b7b36eecf84f088911eaffc1e16a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;A&lt;/strong&gt; - &lt;code&gt;for&lt;/code&gt; tests</source>
          <target state="translated">&lt;strong&gt;А&lt;/strong&gt; - &lt;code&gt;for&lt;/code&gt; испытаний</target>
        </trans-unit>
        <trans-unit id="9e681feccaa2f651d3f5e876dbe2e319c1d67118" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Array with 1,000,000 elements&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Массив с 1 000 000 элементов&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3255bc6f4f9492d8559a38233f24c1a81f7a3679" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Array with 10 elements&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Массив с 10 элементами&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1730cb94cc2840238efe2ab02609e1acbb5d7877" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Array.forEach()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Array.forEach()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9f9864972c7c592b5676161c6e60aa0f51041edc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;As of ECMAScript&amp;nbsp;6:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Начиная с ECMAScript 6:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="366729cb2dd9643a7a37c411a6350e8f3239e9fe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;B&lt;/strong&gt; - &lt;code&gt;while&lt;/code&gt; tests</source>
          <target state="translated">&lt;strong&gt;Б&lt;/strong&gt; - &lt;code&gt;while&lt;/code&gt; тесты</target>
        </trans-unit>
        <trans-unit id="330f92001b0c02491afac466730ba9e45d684ab4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;C&lt;/strong&gt; - other/alternative methods</source>
          <target state="translated">&lt;strong&gt;C&lt;/strong&gt; - другие / альтернативные методы</target>
        </trans-unit>
        <trans-unit id="1a68ce6032c3740fd013d6c9b66b882246d9cf06" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Cons:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Cons:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="caf1f7a722c982dbd57c57da6fb19a30c4de09b0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Cons&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Cons&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="66201f31a06924bccc5252ec818cb13549b146b6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Cross browser results&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Кросс-браузерные результаты&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="750c1a011ed83068ce4b750427dca4f8195eb051" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;EDIT :&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;РЕДАКТИРОВАТЬ :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="40f5fee30dbaa97b495918cfcda19fd49d758e20" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example #1&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример № 1&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="184138f36fc9d5f1b134435fd6400d89d5dd3ef7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example #2&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример № 2&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fbf2341d370757e8b1e3d68104c67efff5070bbd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example #3&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример № 3&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cc261b2aaea005d1254afb5ea26e11f1deea56b1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example #4&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример № 4&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="076cc797a53b7cb38c7bf05c97b94635f200c2e3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 1:&lt;/strong&gt; Normal &lt;code&gt;for...of&lt;/code&gt; loop - no tricks here.</source>
          <target state="translated">&lt;strong&gt;Пример 1:&lt;/strong&gt; Нормально &lt;code&gt;for...of&lt;/code&gt; цикла - здесь никаких хитростей.</target>
        </trans-unit>
        <trans-unit id="49d9fa2400580995d7bae707d928b0d3821aa741" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 2:&lt;/strong&gt; Split words to characters</source>
          <target state="translated">&lt;strong&gt;Пример 2:&lt;/strong&gt; разделение слов на символы</target>
        </trans-unit>
        <trans-unit id="bdc1592f5ce50edf5193207a1607a8801ea11f33" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 3:&lt;/strong&gt; Looping with a &lt;code&gt;key&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 3:&lt;/strong&gt; Цикл с &lt;code&gt;key&lt;/code&gt; и &lt;code&gt;value&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="78871da32ac6a0f7f115cb0b01a332656d6a8904" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 4:&lt;/strong&gt; Get object properties inline</source>
          <target state="translated">&lt;strong&gt;Пример 4:&lt;/strong&gt; Получить свойства объекта встроенными</target>
        </trans-unit>
        <trans-unit id="e558c5c128ffa4a0403278ee644502849ef174b8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 5:&lt;/strong&gt; Get deep object properties of what you need</source>
          <target state="translated">&lt;strong&gt;Пример 5:&lt;/strong&gt; Получить глубокие свойства объекта того, что вам нужно</target>
        </trans-unit>
        <trans-unit id="0a55d796f49ed376bbdc8b840ed3ffef75a362c5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 6:&lt;/strong&gt; Is &lt;strong&gt;Example 3&lt;/strong&gt; used with &lt;code&gt;.forEach&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 6:&lt;/strong&gt; Используется ли &lt;strong&gt;пример 3&lt;/strong&gt; с &lt;code&gt;.forEach&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1c576ad032b24d44f329a8bbbc699e346dfa84e2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 7:&lt;/strong&gt; Is &lt;strong&gt;Example 4&lt;/strong&gt; used with &lt;code&gt;.forEach&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 7.&lt;/strong&gt; Используется ли &lt;strong&gt;пример 4&lt;/strong&gt; с &lt;code&gt;.forEach&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="28f415a0afa402f72563bd9599b6360f208f4e2d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 8:&lt;/strong&gt; Is &lt;strong&gt;Example 5&lt;/strong&gt; used with &lt;code&gt;.forEach&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 8.&lt;/strong&gt; Используется ли &lt;strong&gt;пример 5&lt;/strong&gt; с &lt;code&gt;.forEach&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4ce5e7fbb73dac5a612d22d4d58fd1306ab12eaa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Examples 6, 7, and 8&lt;/strong&gt; can be used with any functional loops like &lt;code&gt;.map&lt;/code&gt;, &lt;code&gt;.filter&lt;/code&gt;, &lt;code&gt;.reduce&lt;/code&gt;, &lt;code&gt;.sort&lt;/code&gt;, &lt;code&gt;.every&lt;/code&gt;, &lt;code&gt;.some&lt;/code&gt;. For more information about these methods, check out the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array&quot;&gt;Array Object&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;Примеры 6, 7 и 8&lt;/strong&gt; могут использоваться с любыми функциональными циклами, такими как &lt;code&gt;.map&lt;/code&gt; , &lt;code&gt;.filter&lt;/code&gt; , &lt;code&gt;.reduce&lt;/code&gt; , &lt;code&gt;.sort&lt;/code&gt; , &lt;code&gt;.every&lt;/code&gt; , &lt;code&gt;.some&lt;/code&gt; . Для получения дополнительной информации об этих методах, проверьте &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array&quot;&gt;Array Object&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ea72b87b0bf2ace83cf5109381e93aeb066f2f76" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Examples of usage:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Примеры использования:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1b7b6fbb391b39121d3090835b1a7d329182a66c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Functional loops&lt;/strong&gt; - &lt;code&gt;forEach&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, also &lt;code&gt;reduce&lt;/code&gt; (they loop through the function, but they are used if you need to do something with your array, etc.</source>
          <target state="translated">&lt;strong&gt;Функциональные циклы&lt;/strong&gt; - &lt;code&gt;forEach&lt;/code&gt; , &lt;code&gt;map&lt;/code&gt; , &lt;code&gt;filter&lt;/code&gt; также &lt;code&gt;reduce&lt;/code&gt; (они проходят через функцию, но используются, если вам нужно что-то сделать с вашим массивом и т. Д.</target>
        </trans-unit>
        <trans-unit id="32fac35272abae62a061520fb1a2f945a7607806" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;How can it start at &lt;code&gt;array.length&lt;/code&gt; without exploding?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Как это может начаться в &lt;code&gt;array.length&lt;/code&gt; без взрыва?&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b91663c8ee6622d139ccbcbdd48f45d5a5186122" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;NOTE&lt;/strong&gt;:</target>
        </trans-unit>
        <trans-unit id="9df17e3bf34872a611d0e519ed5573d79bc888bc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This answer is hopelessly out-of-date. For a more modern approach, look at &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array&quot;&gt;the methods available on an array&lt;/a&gt;. Methods of interest might be:</source>
          <target state="translated">&lt;strong&gt;Примечание&lt;/strong&gt; . Этот ответ безнадежно устарел. Для более современного подхода посмотрите на &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array&quot;&gt;методы, доступные в массиве&lt;/a&gt; . Интересующие методы могут быть:</target>
        </trans-unit>
        <trans-unit id="7e3161fd669d07159e3a7475c999f77628c85246" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Pros:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Pros:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="364d4fdee3e0bca52971cff9ce11bfd5c1cd8d29" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Pros&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Pros&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0012595d3c17367fbb2f7b33de7378b0b6ab7340" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Removing siblings&lt;/strong&gt; from the DOM in reverse order is usually &lt;strong&gt;more efficient&lt;/strong&gt;.  (The browser needs to do less shifting of elements in its internal arrays.)</source>
          <target state="translated">&lt;strong&gt;Удаление братьев и сестер&lt;/strong&gt; из DOM в обратном порядке обычно &lt;strong&gt;более эффективно&lt;/strong&gt; . (Браузер должен меньше перемещать элементы в своих внутренних массивах.)</target>
        </trans-unit>
        <trans-unit id="284c0cc1c16634ee278d62d9da4d70563394d278" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;TL;DR&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;TL;DR&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="07ae7a0c45d54d2ebb1dc0cd4ec4001979bca9ef" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax&quot;&gt;spread syntax (&lt;code&gt;...&lt;/code&gt;)&lt;/a&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Использовать &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax&quot;&gt;распространенный синтаксис ( &lt;code&gt;...&lt;/code&gt; )&lt;/a&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4022df37529f9de6389e8b44f78656816e01d469" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Use &lt;code&gt;Array.from&lt;/code&gt;&lt;/strong&gt;&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-array.from&quot;&gt;(spec)&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from&quot;&gt;(MDN)&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;Используйте &lt;code&gt;Array.from&lt;/code&gt; &lt;/strong&gt; &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-array.from&quot;&gt;(spec)&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from&quot;&gt;(MDN)&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="46eac7e8f751f6f37b8572993152b573d2db8084" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Use &lt;code&gt;for-in&lt;/code&gt; &lt;em&gt;correctly&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Используйте &lt;code&gt;for-in&lt;/code&gt; &lt;em&gt;правильно&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d283294cac8da6d79925867e0ba6a307ede498df" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Use &lt;code&gt;for-of&lt;/code&gt; (use an iterator implicitly) (ES2015+)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Использовать &lt;code&gt;for-of&lt;/code&gt; (использовать итератор неявно) (ES2015 +)&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0bd126a72acb2ecb3b1451e2659a42fd39e32809" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Use &lt;code&gt;forEach&lt;/code&gt; and related (ES5+)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Используйте для &lt;code&gt;forEach&lt;/code&gt; и связанных (ES5 +)&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fb2d92cc11b7a9d0aca33182e1bebdf4c726208b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Use a simple &lt;code&gt;for&lt;/code&gt; loop&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Используйте простой цикл &lt;code&gt;for&lt;/code&gt; &lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6f71bc706ab4a26bf9a13464f7b39c3aeaed0e52" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Use an iterator explicitly (ES2015+)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Используйте итератор явно (ES2015 +)&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1c4b03a035270e1b8f7dd2084f9df26df262debc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Use the &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-array.prototype.slice&quot;&gt;&lt;code&gt;slice&lt;/code&gt;&lt;/a&gt; method of arrays&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Используйте метод &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-array.prototype.slice&quot;&gt; &lt;code&gt;slice&lt;/code&gt; &lt;/a&gt; массивов&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8aa2a7263e5c604aa1227ef93fc167e49c67b84c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Using loops with ECMAScript&amp;nbsp;6  &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment&quot;&gt;destructuring&lt;/a&gt; and the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax&quot;&gt;spread operator&lt;/a&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Использование циклов с &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment&quot;&gt;деструктуризацией&lt;/a&gt; ECMAScript 6 и &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax&quot;&gt;оператором распространения&lt;/a&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="43d6f90660b9cfa169cfb55c0d5f5781ab586f65" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why doesn't it stop iterating before index 0?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Почему он не прекращает итерации до индекса 0?&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5c7882bff3bd32e131ca75ee9b3310dc89ce137d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;do...while loops&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;делать ... пока петли&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="292b6043564aae6314fc4949f7b4dc07ffca89f2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;do/while&lt;/strong&gt; - also loop through a block of code while the condition is true, will run at least one time</source>
          <target state="translated">&lt;strong&gt;do / while&lt;/strong&gt; - также цикл по блоку кода, пока условие выполнено, будет выполняться как минимум один раз</target>
        </trans-unit>
        <trans-unit id="59c2e1f4757834d90e32b8228c2ca6efbcc623e0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;every&lt;/strong&gt; - Returns true or false if all the elements in the array pass the test in the callback function.</source>
          <target state="translated">&lt;strong&gt;Every&lt;/strong&gt; - Возвращает true или false, если все элементы в массиве проходят тест в функции обратного вызова.</target>
        </trans-unit>
        <trans-unit id="733d7f1b168a00ba327543b1d4fe7a84e1c306f1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;filter&lt;/strong&gt; - Very similar to every except that filter returns an array with the elements that return true to the given function.</source>
          <target state="translated">&lt;strong&gt;filter&lt;/strong&gt; - Очень похоже на все, за исключением того, что filter возвращает массив с элементами, которые возвращают true данной функции.</target>
        </trans-unit>
        <trans-unit id="271fc1eae66abadd19acb62d4033231ca149cfff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;for loops&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;для петель&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6730b771cabf57b04de93a3724c66df24b945a65" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;for...in loops&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;для ... в петлях&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="41a75d50cd0e008efc00bd22fdc7462386f2f0fc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;for...of loops&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;для ... петель&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2573e11cf7374a0bd5806f17739331b98d97a3d5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;for&lt;/strong&gt; - it's &lt;strong&gt;the most common one&lt;/strong&gt;. Full block of code for looping</source>
          <target state="translated">&lt;strong&gt;ибо&lt;/strong&gt; - это &lt;strong&gt;самый распространенный&lt;/strong&gt; . Полный блок кода для зацикливания</target>
        </trans-unit>
        <trans-unit id="bf96d036e4a3af64d225f756d7cdb14e19eaa0d9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;forEach&lt;/strong&gt; - Iterates through every item in the array and do whatever you need with each item.</source>
          <target state="translated">&lt;strong&gt;forEach&lt;/strong&gt; - выполняет итерацию по каждому элементу в массиве и делает с каждым элементом все, что вам нужно.</target>
        </trans-unit>
        <trans-unit id="ea31da07d585b6c78298f66e4e1cab0b4bf164cb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;map&lt;/strong&gt; - It creates a new array with the result of the callback function. This method is good to be used when you need to format the elements of your array.</source>
          <target state="translated">&lt;strong&gt;map&lt;/strong&gt; - создает новый массив с результатом функции обратного вызова. Этот метод хорошо использовать, когда вам нужно отформатировать элементы вашего массива.</target>
        </trans-unit>
        <trans-unit id="1d2abe3d817566b9ac069c513ac4125616984176" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;reduce&lt;/strong&gt; - As the name says, it reduces the array to a single value by calling the given function passing in the current element and the result of the previous execution.</source>
          <target state="translated">&lt;strong&gt;уменьшить&lt;/strong&gt; - как следует из названия, он сводит массив к одному значению, вызывая данную функцию, передавая текущий элемент и результат предыдущего выполнения.</target>
        </trans-unit>
        <trans-unit id="bc7cb0747f251ea37bf8ac12f021c5f51bc464ee" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;while loops&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;в то время как петли&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d59bd2da691ba295b8e0f0e005203a04e318b82d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;while&lt;/strong&gt; - loop while a condition is through. It seems to be the fastest loop</source>
          <target state="translated">&lt;strong&gt;while&lt;/strong&gt; - цикл пока условие выполнено. Вроде бы самая быстрая петля</target>
        </trans-unit>
        <trans-unit id="98ac7d9be42d78332ce549839259a6fa839e83f9" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;forEach&lt;/strong&gt; implementation (&lt;a href=&quot;http://jsfiddle.net/nmoliveira/zNsyB/&quot;&gt;see in jsFiddle&lt;/a&gt;):</source>
          <target state="translated">Реализация &lt;strong&gt;forEach&lt;/strong&gt; ( &lt;a href=&quot;http://jsfiddle.net/nmoliveira/zNsyB/&quot;&gt;см. В jsFiddle&lt;/a&gt; ):</target>
        </trans-unit>
        <trans-unit id="1593b174e119f27794747b6ca100ac5339012c07" translate="yes" xml:space="preserve">
          <source>A way closest to your idea would be to use &lt;code&gt;Array.forEach()&lt;/code&gt; which accepts a closure function which will be executed for each element of the array.</source>
          <target state="translated">&lt;code&gt;Array.forEach()&lt;/code&gt; близким к вашей идее было бы использование Array.forEach (), который принимает функцию замыкания, которая будет выполняться для каждого элемента массива.</target>
        </trans-unit>
        <trans-unit id="461621dddb84f5684403289120de177b2681c313" translate="yes" xml:space="preserve">
          <source>Additionally, &lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript#ECMAScript.2C_5th_Edition&quot;&gt;ECMAScript 5&lt;/a&gt; has added a &lt;a href=&quot;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/forEach&quot;&gt;&lt;code&gt;forEach&lt;/code&gt;&lt;/a&gt; method to &lt;code&gt;Array.prototype&lt;/code&gt; which can be used to enumerate over an array using a calback (the polyfill is in the docs so you can still use it for older browsers):</source>
          <target state="translated">Кроме того, &lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript#ECMAScript.2C_5th_Edition&quot;&gt;ECMAScript 5&lt;/a&gt; добавил в метод &lt;code&gt;Array.prototype&lt;/code&gt; метод &lt;a href=&quot;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/forEach&quot;&gt; &lt;code&gt;forEach&lt;/code&gt; ,&lt;/a&gt; который можно использовать для перечисления по массиву с помощью функции обратного вызова (polyfill находится в документации, поэтому вы все еще можете использовать его для старых браузеров):</target>
        </trans-unit>
        <trans-unit id="636fc2fec13e68630984c3473aa5d7f358f03d69" translate="yes" xml:space="preserve">
          <source>Additionally, &lt;code&gt;forEach&lt;/code&gt; is the &quot;loop through them all&quot; function, but ES5 defined several other useful &quot;work your way through the array and do things&quot; functions, including:</source>
          <target state="translated">Кроме того, &lt;code&gt;forEach&lt;/code&gt; - это функция &amp;laquo;цикл по всем&amp;raquo;, но ES5 определила несколько других полезных функций &amp;laquo;прорабатывать массив и делать вещи&amp;raquo;, в том числе:</target>
        </trans-unit>
        <trans-unit id="c9f143cb14712f08a4e4970f0a574a82e563a424" translate="yes" xml:space="preserve">
          <source>Advantages:</source>
          <target state="translated">Advantages:</target>
        </trans-unit>
        <trans-unit id="de209c6ef85b78db6e703d44fe0a792cf0cf2d79" translate="yes" xml:space="preserve">
          <source>Although the performance gains are usually insignificant, it sort of screams:</source>
          <target state="translated">Несмотря на то,что прирост производительности обычно незначителен,это как бы кричит:</target>
        </trans-unit>
        <trans-unit id="41e3fc9478f9b0602ab804e2073a64ab781383e9" translate="yes" xml:space="preserve">
          <source>An easy solution now would be to use the &lt;a href=&quot;https://en.wikipedia.org/wiki/Underscore.js&quot;&gt;underscore.js library&lt;/a&gt;. It's providing many useful tools, such as &lt;code&gt;each&lt;/code&gt; and will automatically delegate the job to the native &lt;code&gt;forEach&lt;/code&gt; if available.</source>
          <target state="translated">Простым решением сейчас будет использование &lt;a href=&quot;https://en.wikipedia.org/wiki/Underscore.js&quot;&gt;библиотеки underscore.js&lt;/a&gt; . Он предоставляет много полезных инструментов, таких как &lt;code&gt;each&lt;/code&gt; и автоматически делегирует работу нативному &lt;code&gt;forEach&lt;/code&gt; , если он доступен.</target>
        </trans-unit>
        <trans-unit id="76134101719fc71647c5e2d29cf268ee6974b9a0" translate="yes" xml:space="preserve">
          <source>And finally the first 20 blue p tags are changed to green</source>
          <target state="translated">И,наконец,первые 20 синих тегов p поменяли на зеленые.</target>
        </trans-unit>
        <trans-unit id="286bb782ad24f006d5ef3df1b25f01bf4ccf96dd" translate="yes" xml:space="preserve">
          <source>And furthermore &lt;code&gt;await&lt;/code&gt;&lt;a href=&quot;https://gist.github.com/joeytwiddle/37d2085425c049629b80956d3c618971&quot;&gt;does not work&lt;/a&gt; inside &lt;code&gt;forEach()&lt;/code&gt;.  Using &lt;code&gt;for..of&lt;/code&gt; is &lt;a href=&quot;https://github.com/airbnb/javascript/issues/1122#issuecomment-259876436&quot;&gt;the clearest pattern&lt;/a&gt; in this case.</source>
          <target state="translated">И более того, &lt;code&gt;await&lt;/code&gt; &lt;a href=&quot;https://gist.github.com/joeytwiddle/37d2085425c049629b80956d3c618971&quot;&gt;не работает&lt;/a&gt; внутри &lt;code&gt;forEach()&lt;/code&gt; . Использование &lt;code&gt;for..of&lt;/code&gt; - &lt;a href=&quot;https://github.com/airbnb/javascript/issues/1122#issuecomment-259876436&quot;&gt;самый ясный шаблон&lt;/a&gt; в этом случае.</target>
        </trans-unit>
        <trans-unit id="e2635b275be0c2dfc38d57182a9f17df25ac0fd4" translate="yes" xml:space="preserve">
          <source>And if you want it to be a function, you can do this:</source>
          <target state="translated">И если ты хочешь,чтобы это была функция,ты можешь это сделать:</target>
        </trans-unit>
        <trans-unit id="aa47cb48e650e1ab26dbe126a4f7ec3d29c4aae4" translate="yes" xml:space="preserve">
          <source>And there are many others for iteration.</source>
          <target state="translated">И есть много других для итерации.</target>
        </trans-unit>
        <trans-unit id="cd8096180abe912c76cb829baeb8776e4097989f" translate="yes" xml:space="preserve">
          <source>And when you do that, not just &lt;code&gt;value&lt;/code&gt; but also &lt;code&gt;index&lt;/code&gt; is recreated for each loop iteration, meaning closures created in the loop body keep a reference to the &lt;code&gt;index&lt;/code&gt; (and &lt;code&gt;value&lt;/code&gt;) created for that specific iteration:</source>
          <target state="translated">И когда вы делаете это, для каждой итерации цикла создается не только &lt;code&gt;value&lt;/code&gt; но и &lt;code&gt;index&lt;/code&gt; , то есть замыкания, созданные в теле цикла, сохраняют ссылку на &lt;code&gt;index&lt;/code&gt; (и &lt;code&gt;value&lt;/code&gt; ), созданный для этой конкретной итерации:</target>
        </trans-unit>
        <trans-unit id="c5d23f01f61bcd35bfab142a15fd44885c61c3be" translate="yes" xml:space="preserve">
          <source>And/or counting backward:</source>
          <target state="translated">Андорра считает в обратном направлении:</target>
        </trans-unit>
        <trans-unit id="c4dfb973c48c6519cc7b7dc31550d6b63562a6b8" translate="yes" xml:space="preserve">
          <source>Another viable way would be to use &lt;code&gt;Array.map()&lt;/code&gt; which works in the same way, but it also takes all values that you return and returns them in a new array (essentially mapping each element to a new one), like this:</source>
          <target state="translated">Другим жизнеспособным способом было бы использовать &lt;code&gt;Array.map()&lt;/code&gt; который работает таким же образом, но он также принимает все возвращаемые значения и возвращает их в новом массиве (по сути, отображая каждый элемент в новый), например так:</target>
        </trans-unit>
        <trans-unit id="e3e988d8ceb27456dc97896d4220b5940816a6af" translate="yes" xml:space="preserve">
          <source>Another way that is useful for copying items from one array to another is</source>
          <target state="translated">Другой способ,который полезен при копировании элементов из одного массива в другой,-это</target>
        </trans-unit>
        <trans-unit id="8d554cc4170a849cf2e0aa16b801259f0efd7018" translate="yes" xml:space="preserve">
          <source>As per question, user want code in javascript instead of jquery so the edit is</source>
          <target state="translated">В соответствии с вопросом,пользователь хочет код на javascript,а не на jquery,так что редактирование будет</target>
        </trans-unit>
        <trans-unit id="bdc7e9a236af726f7038fbcebf901bc5de8a0e8f" translate="yes" xml:space="preserve">
          <source>As per the new updated feature ECMAScript 6 (ES6) and ECMAScript 2015, you can use the following options with loops:</source>
          <target state="translated">В соответствии с новой обновленной функцией ECMAScript 6 (ES6)и ECMAScript 2015,вы можете использовать следующие опции с циклами:</target>
        </trans-unit>
        <trans-unit id="47e50940d71eac09fa64f7e1d6bcb6c40b08529b" translate="yes" xml:space="preserve">
          <source>Aside from true arrays, there are also &lt;em&gt;array-like&lt;/em&gt; objects that have a &lt;code&gt;length&lt;/code&gt; property and properties with numeric names: &lt;code&gt;NodeList&lt;/code&gt; instances, the &lt;code&gt;arguments&lt;/code&gt; object, etc. How do we loop through their contents?</source>
          <target state="translated">Помимо истинных массивов, существуют также объекты, &lt;em&gt;похожие на&lt;/em&gt; массивы, которые имеют свойство &lt;code&gt;length&lt;/code&gt; и свойства с числовыми именами: экземпляры &lt;code&gt;NodeList&lt;/code&gt; , объект &lt;code&gt;arguments&lt;/code&gt; и т. Д. Как мы можем просмотреть их содержимое?</target>
        </trans-unit>
        <trans-unit id="eab486bae96770e7bd766cc0cc4ada63033b8966" translate="yes" xml:space="preserve">
          <source>At least some, and possibly most or even all, of the array approaches above frequently apply equally well to array-like objects:</source>
          <target state="translated">По крайней мере,некоторые и,возможно,большинство или даже все вышеперечисленные подходы к массивам часто одинаково хорошо применяются к массивоподобным объектам:</target>
        </trans-unit>
        <trans-unit id="70a2b96e30c86a111cdae7a47c5956d3a9d28e3e" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;i--&lt;/code&gt; runs &lt;em&gt;before&lt;/em&gt; each iteration, on the first iteration we will actually be accessing the item at &lt;code&gt;array.length - 1&lt;/code&gt; which avoids any issues with &lt;strike&gt;Array-out-of-bounds&lt;/strike&gt;&lt;code&gt;undefined&lt;/code&gt; items.</source>
          <target state="translated">Поскольку &lt;code&gt;i--&lt;/code&gt; выполняется &lt;em&gt;перед&lt;/em&gt; каждой итерацией, на первой итерации мы на самом деле будем обращаться к элементу в &lt;code&gt;array.length - 1&lt;/code&gt; что позволяет избежать любых проблем с &lt;code&gt;undefined&lt;/code&gt; элементами &lt;strike&gt;из массива вне пределов&lt;/strike&gt; .</target>
        </trans-unit>
        <trans-unit id="7e75fbda4fe70f4af05ef437f23c8019a6e0a056" translate="yes" xml:space="preserve">
          <source>But the above concerns is not applicable to Node.js applications, where &lt;code&gt;for..of&lt;/code&gt; is now well supported.</source>
          <target state="translated">Но вышеупомянутые проблемы не применимы к приложениям Node.js, где &lt;code&gt;for..of&lt;/code&gt; теперь хорошо поддерживается.</target>
        </trans-unit>
        <trans-unit id="877397eda4030d185b7ccf9f7ce92ef4e0c61e68" translate="yes" xml:space="preserve">
          <source>But there's &lt;strong&gt;lots&lt;/strong&gt; more to explore, read on...</source>
          <target state="translated">Но есть еще &lt;strong&gt;много&lt;/strong&gt; интересного, читайте дальше ...</target>
        </trans-unit>
        <trans-unit id="ee106f8a0a3a9dae96b0d69d742bcd97b39bd261" translate="yes" xml:space="preserve">
          <source>But with modern JavaScript engines, it's rare you need to eke out that last bit of juice.</source>
          <target state="translated">Но с современными JavaScript-движками редко удается извлечь последний кусочек сока.</target>
        </trans-unit>
        <trans-unit id="3e709fabb3cf8ffb27a522d70327597b3b8cc4d2" translate="yes" xml:space="preserve">
          <source>Caution when using string as function: the function is created out-of-context and ought to be used only where you are certain of variable scoping.  Otherwise, better to pass functions where scoping is more intuitive.</source>
          <target state="translated">Внимание при использовании строки как функции:функция создается вне контекста и должна использоваться только в тех случаях,когда вы уверены в области видимости переменных.В противном случае,лучше передавать функции,в которых область видимости более интуитивна.</target>
        </trans-unit>
        <trans-unit id="ebdda461e7af469834840795faba24136d9d0951" translate="yes" xml:space="preserve">
          <source>Caveat for host-provided objects</source>
          <target state="translated">Кейват для объектов,предоставляемых хостом</target>
        </trans-unit>
        <trans-unit id="5c0fa40086336662397974cdbd5ffa0407908978" translate="yes" xml:space="preserve">
          <source>Consider the following 2 nested loops, which do exactly the same thing. Let's say that we have 2 arrays of objects and each object contains an array of results, each of which has a Value property that's a string (or whatever). And let's say we need to iterate over each of the results and if they're equal then perform some action:</source>
          <target state="translated">Рассмотрим следующие 2 вложенных петли,которые делают точно то же самое.Допустим,мы имеем 2 массива объектов,и каждый объект содержит массив результатов,каждый из которых имеет свойство Value,которое представляет собой строку (или что-то в этом роде).Допустим,нам нужно выполнить итерацию над каждым из результатов,и если они равны,то выполнить какое-то действие:</target>
        </trans-unit>
        <trans-unit id="dc657383123e3b34e3dc9324b5bc94793d6b0ec9" translate="yes" xml:space="preserve">
          <source>Create a true array</source>
          <target state="translated">Создать истинный массив</target>
        </trans-unit>
        <trans-unit id="6ebbbdefb07c190cb50e696dfd8fd8b8232a9dd9" translate="yes" xml:space="preserve">
          <source>Destructuring and using of the spread operator have proven quite useful for newcomers to ECMAScript&amp;nbsp;6 as being more human-readable/aesthetic, although some JavaScript veterans might consider it messy. Juniors or some other people might find it useful.</source>
          <target state="translated">Разрушение и использование оператора распространения оказалось весьма полезным для новичков в ECMAScript 6 как более удобочитаемый / эстетичный, хотя некоторые ветераны JavaScript могут посчитать это грязным. Юниоры или другие люди могут найти это полезным.</target>
        </trans-unit>
        <trans-unit id="dc3decbb93847518f1a049dcf49d0d7c6560bcc6" translate="yes" xml:space="preserve">
          <source>Details</source>
          <target state="translated">Details</target>
        </trans-unit>
        <trans-unit id="1daaad0084c2604185e45c5a29dc6efeff0b7fce" translate="yes" xml:space="preserve">
          <source>Details:</source>
          <target state="translated">Details:</target>
        </trans-unit>
        <trans-unit id="c472a51872469dd7221cdb8ed81b476216096187" translate="yes" xml:space="preserve">
          <source>Disadvantages:</source>
          <target state="translated">Disadvantages:</target>
        </trans-unit>
        <trans-unit id="6c93fe8028eb2c06aa7aad788adaf00386420ed1" translate="yes" xml:space="preserve">
          <source>Don't use &lt;code&gt;for-in&lt;/code&gt; unless you use it with safeguards or are at least aware of why it might bite you.</source>
          <target state="translated">Не используйте &lt;code&gt;for-in&lt;/code&gt; , если вы не используете его с гарантиями или, по крайней мере, не знаете, почему это может вас укусить.</target>
        </trans-unit>
        <trans-unit id="d08ac59c6f776a259666b38bd6f6b67c6ac20550" translate="yes" xml:space="preserve">
          <source>ECMAScript&amp;nbsp;5 (the version on JavaScript) to work with Arrays:</source>
          <target state="translated">ECMAScript 5 (версия на JavaScript) для работы с массивами:</target>
        </trans-unit>
        <trans-unit id="d365e59cfe702f0dc8ea35a70c741654a39fed8f" translate="yes" xml:space="preserve">
          <source>ES2015 adds &lt;em&gt;iterators&lt;/em&gt; to JavaScript. The easiest way to use iterators is the new &lt;code&gt;for-of&lt;/code&gt; statement. It looks like this:</source>
          <target state="translated">ES2015 добавляет &lt;em&gt;итераторы&lt;/em&gt; в JavaScript. Самый простой способ использовать итераторы - это новый оператор &lt;code&gt;for-of&lt;/code&gt; . Это выглядит так:</target>
        </trans-unit>
        <trans-unit id="89cce593f5131e64c65adfb3e7a2a8a99ecd6047" translate="yes" xml:space="preserve">
          <source>Each p tag gets &lt;code&gt;class=&quot;blue&quot;&lt;/code&gt;</source>
          <target state="translated">Каждый тег p получает &lt;code&gt;class=&quot;blue&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a03f898632fc9e1da60588b88699c530174fddff" translate="yes" xml:space="preserve">
          <source>Easy readability</source>
          <target state="translated">Легкость чтения</target>
        </trans-unit>
        <trans-unit id="a1360cfea2542d434b165c5be72693e776eefce5" translate="yes" xml:space="preserve">
          <source>Easy writability</source>
          <target state="translated">лёгкость записи</target>
        </trans-unit>
        <trans-unit id="5c260a8d97db3363bbeeb8cd4f1afd6ee2424cdf" translate="yes" xml:space="preserve">
          <source>Efficiency. &lt;code&gt;angular.forEach&lt;/code&gt;, and the native &lt;code&gt;forEach&lt;/code&gt;, for that matter, are both &lt;em&gt;so much&lt;/em&gt; slower than the normal &lt;code&gt;for&lt;/code&gt; loop....about &lt;a href=&quot;http://jsperf.com/angular-foreach-vs-native-for-loop/3&quot;&gt;90% slower&lt;/a&gt;. So for large data sets, best to stick to the native &lt;code&gt;for&lt;/code&gt; loop.</source>
          <target state="translated">Эффективность. &lt;code&gt;angular.forEach&lt;/code&gt; и нативный &lt;code&gt;forEach&lt;/code&gt; &lt;em&gt;намного&lt;/em&gt; медленнее, чем обычный цикл &lt;code&gt;for&lt;/code&gt; ... примерно на &lt;a href=&quot;http://jsperf.com/angular-foreach-vs-native-for-loop/3&quot;&gt;90% медленнее&lt;/a&gt; . Поэтому для больших наборов данных лучше всего придерживаться нативного цикла &lt;code&gt;for&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9bbc4aeb0980cee945b58ff2f771d473c92abbcf" translate="yes" xml:space="preserve">
          <source>Every other p tag gets &lt;code&gt;class=&quot;red&quot;&lt;/code&gt;&amp;gt;</source>
          <target state="translated">Каждый другой тег p получает &lt;code&gt;class=&quot;red&quot;&lt;/code&gt; &amp;gt;</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">Расширить фрагмент</target>
        </trans-unit>
        <trans-unit id="31d46401beeeb139181157a391e38208292ff52c" translate="yes" xml:space="preserve">
          <source>For Actual Arrays</source>
          <target state="translated">Для фактических массивов</target>
        </trans-unit>
        <trans-unit id="574d2bfcf687ca1c9e5ae449855c6a7b3be2b282" translate="yes" xml:space="preserve">
          <source>For Array-Like Objects</source>
          <target state="translated">Для объектов типа &quot;Массив</target>
        </trans-unit>
        <trans-unit id="4c9f1e7b36c7b85949136c05d06c3d1376f6fb79" translate="yes" xml:space="preserve">
          <source>For maximum browser support, &lt;code&gt;for..of&lt;/code&gt;&lt;a href=&quot;https://github.com/airbnb/javascript/issues/1122#issuecomment-471169142&quot;&gt;requires a polyfill&lt;/a&gt; for iterators, making your app slightly slower to execute and slightly larger to download.</source>
          <target state="translated">Для максимальной поддержки браузеров &lt;code&gt;for..of&lt;/code&gt; &lt;a href=&quot;https://github.com/airbnb/javascript/issues/1122#issuecomment-471169142&quot;&gt;требуется polyfill&lt;/a&gt; для итераторов, что делает ваше приложение немного медленнее при исполнении и немного больше при загрузке.</target>
        </trans-unit>
        <trans-unit id="07dab6b0cba0aafb7fb630f2e41c7bbe0d2fa27e" translate="yes" xml:space="preserve">
          <source>For more information and examples about functional programming on arrays, look at the blog post &lt;em&gt;&lt;a href=&quot;http://cryto.net/~joepie91/blog/2015/05/04/functional-programming-in-javascript-map-filter-reduce/&quot;&gt;Functional programming in JavaScript: map, filter and reduce&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">Для получения дополнительной информации и примеров о функциональном программировании для массивов, смотрите пост в блоге. &lt;em&gt;&lt;a href=&quot;http://cryto.net/~joepie91/blog/2015/05/04/functional-programming-in-javascript-map-filter-reduce/&quot;&gt;Функциональное программирование на JavaScript: отображение, фильтрация и уменьшение&lt;/a&gt;&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="e5b5226b5b2f9ba8ea80f8e646bec60d9ae27902" translate="yes" xml:space="preserve">
          <source>For that reason (and to encourage use of &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;filter&lt;/code&gt;), &lt;a href=&quot;https://github.com/airbnb/javascript#iterators-and-generators&quot;&gt;some front-end style guides&lt;/a&gt; ban &lt;code&gt;for..of&lt;/code&gt; completely!</source>
          <target state="translated">По этой причине (и для поощрения использования &lt;code&gt;map&lt;/code&gt; и &lt;code&gt;filter&lt;/code&gt; ) &lt;a href=&quot;https://github.com/airbnb/javascript#iterators-and-generators&quot;&gt;некоторые руководства по стилю&lt;/a&gt; &lt;code&gt;for..of&lt;/code&gt; запрещены для ... полностью!</target>
        </trans-unit>
        <trans-unit id="740b5208eb855ba5fe663f7061e6d63db399e3ab" translate="yes" xml:space="preserve">
          <source>For-each over an array in JavaScript</source>
          <target state="translated">For-each поверх массива в JavaScript</target>
        </trans-unit>
        <trans-unit id="4b1bffa7198cab670a61e9e726dc8034ad855ba9" translate="yes" xml:space="preserve">
          <source>ForEach</source>
          <target state="translated">ForEach</target>
        </trans-unit>
        <trans-unit id="0b863337ad80c0e087cc5bb5e2ee2b6648e7963d" translate="yes" xml:space="preserve">
          <source>Foreach is basically a High Order Function, Which takes another function as its parameter.</source>
          <target state="translated">Форач,по сути,является функцией высокого порядка,которая принимает другую функцию в качестве своего параметра.</target>
        </trans-unit>
        <trans-unit id="8a78ff713dd92b2ecbc101771445889515332055" translate="yes" xml:space="preserve">
          <source>Granted this is a very simple hypothetical example, but I've written triple embedded for loops using the second approach and it was &lt;em&gt;very&lt;/em&gt; hard to read, and write for that matter.</source>
          <target state="translated">Конечно, это очень простой гипотетический пример, но я написал тройной встроенный цикл, используя второй подход, и его было &lt;em&gt;очень&lt;/em&gt; трудно читать и писать по этому вопросу.</target>
        </trans-unit>
        <trans-unit id="4007b162af20ada18ae8a52aec1f5ada3364061d" translate="yes" xml:space="preserve">
          <source>Host objects may implement these internal methods in any manner unless specified otherwise; for example, one possibility is that &lt;code&gt;[[Get]]&lt;/code&gt; and &lt;code&gt;[[Put]]&lt;/code&gt; for a particular host object indeed fetch and store property values but &lt;code&gt;[[HasProperty]]&lt;/code&gt; always generates &lt;strong&gt;false&lt;/strong&gt;.</source>
          <target state="translated">Хост-объекты могут реализовывать эти внутренние методы любым способом, если не указано иное; например, одна возможность состоит в том, что &lt;code&gt;[[Get]]&lt;/code&gt; и &lt;code&gt;[[Put]]&lt;/code&gt; для определенного хост-объекта действительно выбирают и сохраняют значения свойств, но &lt;code&gt;[[HasProperty]]&lt;/code&gt; всегда генерирует &lt;strong&gt;false&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="19813696848672a3c1fd16a6dcede994e8b0ea3c" translate="yes" xml:space="preserve">
          <source>How can I loop through all the entries in an array using JavaScript?</source>
          <target state="translated">Как я могу проциклировать все записи в массиве с помощью JavaScript?</target>
        </trans-unit>
        <trans-unit id="e21860bf37328b97ebb0ddd904694c78e4a7b382" translate="yes" xml:space="preserve">
          <source>How does it work?</source>
          <target state="translated">Как это работает?</target>
        </trans-unit>
        <trans-unit id="ca7b3040f56acb6407fc724b0d2fd827a45691bf" translate="yes" xml:space="preserve">
          <source>However in practice that is &lt;strong&gt;not&lt;/strong&gt; actually a reliable indication of intent, since it is indistinguishable from those occasions when you &lt;strong&gt;&lt;em&gt;do&lt;/em&gt;&lt;/strong&gt; care about the order, and really do &lt;strong&gt;&lt;em&gt;need&lt;/em&gt;&lt;/strong&gt; to loop in reverse.  So in fact another construct would be needed to accurately express the &quot;don't care&quot; intent, something currently unavailable in most languages, including ECMAScript, but which could be called, for example, &lt;code&gt;forEachUnordered()&lt;/code&gt;.</source>
          <target state="translated">Однако на практике это &lt;strong&gt;не&lt;/strong&gt; является надежным показателем намерения, так как он неотличим от тех случаев, когда вы заботитесь о порядке, и действительно &lt;strong&gt;&lt;em&gt;нужно&lt;/em&gt;&lt;/strong&gt; выполнить цикл в обратном порядке. Так что на самом деле для точного выражения намерения &amp;laquo;все равно&amp;raquo; потребуется другая конструкция, которая в настоящее время недоступна для большинства языков, включая ECMAScript, но которую можно вызвать, например, для &lt;code&gt;forEachUnordered()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="61f75f3469a29e1942e3c3329af27ea060513a5e" translate="yes" xml:space="preserve">
          <source>However, note that there may be reasons to use an even simpler &lt;code&gt;for&lt;/code&gt; loop (see Stack Overflow question &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/500504&quot;&gt;Why is using &amp;ldquo;for&amp;hellip;in&amp;rdquo; with array iteration such a bad idea?&lt;/a&gt;&lt;/em&gt;)</source>
          <target state="translated">Однако обратите внимание, что могут быть причины использовать еще более простой цикл &lt;code&gt;for&lt;/code&gt; (см. Вопрос переполнения стека. &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/500504&quot;&gt;Почему использование &amp;laquo;for&amp;hellip; in&amp;raquo; с итерацией массива является плохой идеей?&lt;/a&gt;&lt;/em&gt; )</target>
        </trans-unit>
        <trans-unit id="a6aed835f2d563c4c3320a911d587d82dbda800c" translate="yes" xml:space="preserve">
          <source>I also would like to add this as a composition of a reverse loop and an answer above for someone that would like this syntax too.</source>
          <target state="translated">Я также хотел бы добавить это в качестве композиции обратного цикла и ответа выше для кого-то,кому тоже понравился бы этот синтаксис.</target>
        </trans-unit>
        <trans-unit id="8477c992b5ade4df47cd7654aa1828b412e4a489" translate="yes" xml:space="preserve">
          <source>I know this is an old post, and there are so many great answers already. For a little more completeness I figured I'd throw in another one using &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt;. Of course, this only applies if you're using Angular, obviously, nonetheless I'd like to put it anyway.</source>
          <target state="translated">Я знаю, что это старый пост, и там уже так много хороших ответов. Для большей полноты я решил добавить еще один, используя &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt; . Конечно, это применимо только в том случае, если вы используете Angular, но, тем не менее, я бы все равно хотел его поставить.</target>
        </trans-unit>
        <trans-unit id="1c59ff4d9355404cf9a4b93a2e4792e99f5c4e05" translate="yes" xml:space="preserve">
          <source>I think the &lt;em&gt;reverse&lt;/em&gt; for loop deserves a mention here:</source>
          <target state="translated">Я думаю, что &lt;em&gt;обратное&lt;/em&gt; для цикла заслуживает упоминания здесь:</target>
        </trans-unit>
        <trans-unit id="f6502d93534ccbe12812234fb241d45f4ba61f26" translate="yes" xml:space="preserve">
          <source>I thought it was something like this:</source>
          <target state="translated">Я думал,что это что-то вроде этого:</target>
        </trans-unit>
        <trans-unit id="3603f48e92361f2a2fc432d1e620a715ff3fe622" translate="yes" xml:space="preserve">
          <source>I usually use the</source>
          <target state="translated">Обычно я использую</target>
        </trans-unit>
        <trans-unit id="12bc6fc52aa07da9df836fd7799f22941f498dc1" translate="yes" xml:space="preserve">
          <source>I'll quickly note that you can use the ES2015 options &lt;em&gt;now&lt;/em&gt;, even on ES5 engines, by &lt;em&gt;transpiling&lt;/em&gt; ES2015 to ES5. Search for &quot;ES2015 transpiling&quot; / &quot;ES6 transpiling&quot; for more...</source>
          <target state="translated">Я быстро отмечу, что теперь вы можете использовать опции ES2015, даже на двигателях ES5, &lt;em&gt;перенеся&lt;/em&gt; ES2015 на ES5. Искать &quot;ES2015 transpiling&quot; / &quot;ES6 transpiling&quot; для получения дополнительной информации ...</target>
        </trans-unit>
        <trans-unit id="18c6f30a69467c4462f7d6abc615a72db576f06d" translate="yes" xml:space="preserve">
          <source>I'm sure there's various other pros and cons as well, and please feel free to add any that you see fit. I feel that, bottom line, if you need efficiency, stick with just the native &lt;code&gt;for&lt;/code&gt; loop for your looping needs. But, if your datasets are smaller and a some efficiency is okay to give up in exchange for readability and writability, then by all means throw an &lt;code&gt;angular.forEach&lt;/code&gt; in that bad boy.</source>
          <target state="translated">Я уверен, что есть и другие плюсы и минусы, и, пожалуйста, не стесняйтесь добавлять любые, которые вы считаете нужными. Я чувствую, что в итоге, если вам нужна эффективность, придерживайтесь только нативного цикла for для ваших циклов. Но если ваши наборы данных меньше и с некоторой эффективностью можно отказаться в обмен на удобочитаемость и возможность записи, то непременно &lt;code&gt;angular.forEach&lt;/code&gt; в этого плохого парня.</target>
        </trans-unit>
        <trans-unit id="06ac5670940bbfb285c1ba0308b4821c84d5e171" translate="yes" xml:space="preserve">
          <source>If available, &lt;code&gt;angular.forEach&lt;/code&gt; will use the ES5 forEach loop. Now, I will get to efficientcy in the cons section, as the forEach loops are &lt;em&gt;much&lt;/em&gt; slower than the for loops. I mention this as a pro because it's nice to be consistent and standardized.</source>
          <target state="translated">Если доступно, &lt;code&gt;angular.forEach&lt;/code&gt; будет использовать цикл ES5 forEach. Теперь я доберусь до эффективности в разделе &amp;laquo;против&amp;raquo;, поскольку циклы forEach &lt;em&gt;намного&lt;/em&gt; медленнее, чем циклы for. Я упоминаю это как профессионал, потому что приятно быть последовательным и стандартизированным.</target>
        </trans-unit>
        <trans-unit id="e8907402896b09c17431fc05797665a93d1d2ebc" translate="yes" xml:space="preserve">
          <source>If order doesn't matter, and &lt;strong&gt;efficiency&lt;/strong&gt; is a concern (in the innermost loop of a game or animation engine), then it may be acceptable to use the reverse for loop as your go-to pattern.  Just remember that seeing a reverse for loop in existing code &lt;strong&gt;does not necessarily mean&lt;/strong&gt; that the order irrelevant!</source>
          <target state="translated">Если порядок не имеет значения, и &lt;strong&gt;эффективность&lt;/strong&gt; является проблемой (в самом внутреннем цикле игрового или анимационного движка), тогда может быть приемлемо использовать цикл for в качестве обратного шаблона. Просто помните, что просмотр обратного цикла for в существующем коде &lt;strong&gt;не обязательно означает,&lt;/strong&gt; что порядок не имеет значения!</target>
        </trans-unit>
        <trans-unit id="b80d2d2ba2c3b20f6e937c93c538d0e0be32e646" translate="yes" xml:space="preserve">
          <source>If the length of the array won't change during the loop, and it's in performance-sensitive code (unlikely), a slightly more complicated version grabbing the length up front might be a &lt;strong&gt;&lt;em&gt;tiny&lt;/em&gt;&lt;/strong&gt; bit faster:</source>
          <target state="translated">Если длина массива не изменится во время цикла, и он находится в чувствительном к производительности коде (маловероятно), немного более сложная версия, получающая длину вперед, может быть чуть быстрее:</target>
        </trans-unit>
        <trans-unit id="b92dceb455d82f7bd9cef350ebca0d33e590aa5b" translate="yes" xml:space="preserve">
          <source>If you &lt;strong&gt;modify the array&lt;/strong&gt; while looping, at or after index &lt;em&gt;i&lt;/em&gt; (for example you remove or insert an item at &lt;code&gt;array[i]&lt;/code&gt;), then a forward loop would skip the item that shifted left into position &lt;em&gt;i&lt;/em&gt;, or re-process the &lt;em&gt;i&lt;/em&gt;th item that was shifted right.  In a traditional for loop, you &lt;em&gt;could&lt;/em&gt; update &lt;em&gt;i&lt;/em&gt; to point to the next item that needs processing - 1, but simply reversing the direction of iteration is often a &lt;strong&gt;simpler&lt;/strong&gt; and &lt;a href=&quot;https://stackoverflow.com/questions/23186254/javascript-splice-changing-earlier-values-in-an-array/23186450#23186450&quot;&gt;more elegant solution&lt;/a&gt;.</source>
          <target state="translated">Если вы &lt;strong&gt;изменяете массив&lt;/strong&gt; во время цикла, по индексу &lt;em&gt;i&lt;/em&gt; или после него (например, удаляете или вставляете элемент в &lt;code&gt;array[i]&lt;/code&gt; ), то цикл вперед пропускает элемент, сдвинутый влево в положение &lt;em&gt;i&lt;/em&gt; , или повторно обрабатывает &lt;em&gt;i&lt;/em&gt; этот пункт был сдвинут вправо. В традиционном цикле for вы &lt;em&gt;можете&lt;/em&gt; обновить &lt;em&gt;i,&lt;/em&gt; чтобы он указывал на следующий элемент, который требует обработки - 1, но простое изменение направления итерации часто является &lt;strong&gt;более простым&lt;/strong&gt; и &lt;a href=&quot;https://stackoverflow.com/questions/23186254/javascript-splice-changing-earlier-values-in-an-array/23186450#23186450&quot;&gt;элегантным решением&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="2e64946b63608dcfc94ea160317714137b7354db" translate="yes" xml:space="preserve">
          <source>If you are a jQuery &lt;em&gt;fan&lt;/em&gt; and already have a jQuery file running, you should reverse the positions of the index and value parameters</source>
          <target state="translated">Если вы являетесь &lt;em&gt;поклонником&lt;/em&gt; jQuery и у вас уже запущен файл jQuery, вам следует поменять местами позиции индекса и значения параметров</target>
        </trans-unit>
        <trans-unit id="13ddd4cb90755914bc68cb46a5dcb9579aa341e2" translate="yes" xml:space="preserve">
          <source>If you don't mind emptying the array:</source>
          <target state="translated">Если вы не возражаете против опустошения массива:</target>
        </trans-unit>
        <trans-unit id="ae87d418a37aaf3cda30fae440c63ffde95ff67b" translate="yes" xml:space="preserve">
          <source>If you had five divs, you'd get &quot;Index is: 0&quot; if you clicked the first and &quot;Index is: 4&quot; if you clicked the last. This does &lt;strong&gt;not&lt;/strong&gt; work if you use &lt;code&gt;var&lt;/code&gt; instead of &lt;code&gt;let&lt;/code&gt;.</source>
          <target state="translated">Если бы у вас было пять делений, вы бы получили &amp;laquo;Индекс: 0&amp;raquo;, если вы щелкнули по первому, и &amp;laquo;Индекс: 4&amp;raquo;, если вы щелкнули по последнему. Это &lt;strong&gt;не&lt;/strong&gt; работает, если вы используете &lt;code&gt;var&lt;/code&gt; вместо &lt;code&gt;let&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5d8e10b19a52f515f5ce1b1b685c8f30f79143a6" translate="yes" xml:space="preserve">
          <source>If you have a massive array you should use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators&quot;&gt;&lt;strong&gt;&lt;code&gt;iterators&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; to gain some efficiency. Iterators are a property of certain JavaScript collections (like &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;). Even, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of&quot;&gt;&lt;strong&gt;&lt;code&gt;for..of&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; uses &lt;strong&gt;&lt;code&gt;iterator&lt;/code&gt;&lt;/strong&gt; under-the-hood.</source>
          <target state="translated">Если у вас есть массивный массив, вы должны использовать &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators&quot;&gt;&lt;strong&gt; &lt;code&gt;iterators&lt;/code&gt; &lt;/strong&gt;&lt;/a&gt; чтобы получить некоторую эффективность. Итераторы являются свойством определенных коллекций JavaScript (таких как &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Set&quot;&gt; &lt;code&gt;Set&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt; ). Даже, для &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of&quot;&gt;&lt;strong&gt; &lt;code&gt;for..of&lt;/code&gt; &lt;/strong&gt;&lt;/a&gt; использует &lt;strong&gt; &lt;code&gt;iterator&lt;/code&gt; &lt;/strong&gt; под капотом.</target>
        </trans-unit>
        <trans-unit id="937ed980f598e6ed46ab0a45f6808c763154dc2c" translate="yes" xml:space="preserve">
          <source>If you use &lt;code&gt;Array.prototype&lt;/code&gt; functions with &lt;em&gt;host-provided&lt;/em&gt; array-like objects (DOM lists and other things provided by the browser rather than the JavaScript engine), you need to be sure to test in your target environments to make sure the host-provided object behaves properly. &lt;strong&gt;Most do behave properly&lt;/strong&gt; (now), but it's important to test. The reason is that most of the &lt;code&gt;Array.prototype&lt;/code&gt; methods you're likely to want to use rely on the host-provided object giving an honest answer to the abstract &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots-hasproperty-p&quot;&gt;&lt;code&gt;[[HasProperty]]&lt;/code&gt;&lt;/a&gt; operation. As of this writing, browsers do a very good job of this, but the 5.1 spec did allow for the possibility a host-provided object may not be honest. It's in &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-8.6.2&quot;&gt;&amp;sect;8.6.2&lt;/a&gt;, several paragraphs below the big table near the beginning of that section), where it says:</source>
          <target state="translated">Если вы используете функции &lt;code&gt;Array.prototype&lt;/code&gt; с объектно -подобными объектами, подобными массиву (списки DOM и другие вещи, предоставляемые браузером, а не механизмом JavaScript), вы должны обязательно протестировать в своих целевых средах, чтобы убедиться, что хост предоставлен Объект ведет себя правильно. &lt;strong&gt;Большинство ведут себя правильно&lt;/strong&gt; (сейчас), но важно проверить. Причина в том, что большинство методов &lt;code&gt;Array.prototype&lt;/code&gt; , которые вы, вероятно, захотите использовать, полагаются на предоставленный хостом объект, дающий честный ответ на абстрактную &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots-hasproperty-p&quot;&gt; &lt;code&gt;[[HasProperty]]&lt;/code&gt; &lt;/a&gt; . На момент написания статьи браузеры отлично справлялись с этой задачей, но спецификация 5.1 действительно допускала вероятность того, что предоставленный хостом объект может быть не честным. Это в &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-8.6.2&quot;&gt;&amp;sect;8.6.2&lt;/a&gt; , несколько параграфов под большой таблицей в начале этого раздела), где написано:</target>
        </trans-unit>
        <trans-unit id="1cf65717377f5a0ffbf4016aa7b65a5777d9b6bb" translate="yes" xml:space="preserve">
          <source>If you want to break, a little more logic:</source>
          <target state="translated">Если ты хочешь сломаться,немного больше логики:</target>
        </trans-unit>
        <trans-unit id="1aae02233e247aceba4786eb942d19b76a8c3c1d" translate="yes" xml:space="preserve">
          <source>If you want to loop over an array, use the standard three-part &lt;code&gt;for&lt;/code&gt; loop.</source>
          <target state="translated">Если вы хотите зациклить массив, используйте стандартную трехкомпонентную &lt;code&gt;for&lt;/code&gt; цикла.</target>
        </trans-unit>
        <trans-unit id="11105b5c63e872bf555853378e76dfee57d8fded" translate="yes" xml:space="preserve">
          <source>If you want to loop through an array of objects with the arrow function:</source>
          <target state="translated">Если вы хотите зациклиться на массиве объектов с помощью функции стрелки:</target>
        </trans-unit>
        <trans-unit id="986435ae4b5acc19dfcae749d8f1c3e4994226d8" translate="yes" xml:space="preserve">
          <source>If you want to use &lt;code&gt;for()&lt;/code&gt;, it will look like -</source>
          <target state="translated">Если вы хотите использовать &lt;code&gt;for()&lt;/code&gt; , он будет выглядеть как -</target>
        </trans-unit>
        <trans-unit id="4acb3d06d2c92261570911bf5c1b6824ec6805ec" translate="yes" xml:space="preserve">
          <source>If you want to use &lt;code&gt;forEach()&lt;/code&gt;, it will look like -</source>
          <target state="translated">Если вы хотите использовать &lt;code&gt;forEach()&lt;/code&gt; , это будет выглядеть так -</target>
        </trans-unit>
        <trans-unit id="5fc44f65228be3d46253870a654fc920e523f6cf" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using the &lt;a href=&quot;http://jquery.com/&quot;&gt;&lt;strong&gt;jQuery&lt;/strong&gt;&lt;/a&gt; library, you can use &lt;a href=&quot;http://api.jquery.com/jQuery.each/&quot;&gt;&lt;strong&gt;jQuery.each&lt;/strong&gt;&lt;/a&gt;:</source>
          <target state="translated">Если вы используете библиотеку &lt;a href=&quot;http://jquery.com/&quot;&gt;&lt;strong&gt;jQuery&lt;/strong&gt;&lt;/a&gt; , вы можете использовать &lt;a href=&quot;http://api.jquery.com/jQuery.each/&quot;&gt;&lt;strong&gt;jQuery.each&lt;/strong&gt;&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="6a9d6ebddd744df1593bd5988193105784652f8b" translate="yes" xml:space="preserve">
          <source>If you're going to do that a lot, you might want to grab a copy of the function reference into a variable for reuse, e.g.:</source>
          <target state="translated">Если вы собираетесь делать это часто,вы можете захотеть взять копию ссылки на функцию в переменную для повторного использования,например:</target>
        </trans-unit>
        <trans-unit id="dd131ceaa21a63af287b484051a159dfdece2176" translate="yes" xml:space="preserve">
          <source>If you're worried about the runtime cost of making a function call for each array entry, don't be; &lt;a href=&quot;http://blog.niftysnippets.org/2012/02/foreach-and-runtime-cost.html&quot;&gt;details&lt;/a&gt;.</source>
          <target state="translated">Если вас беспокоит стоимость выполнения вызова функции для каждой записи массива, не беспокойтесь; &lt;a href=&quot;http://blog.niftysnippets.org/2012/02/foreach-and-runtime-cost.html&quot;&gt;детали&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="40638a60a037cede5301ef987dee8d1ace1a9b0f" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript#ECMAScript.2C_5th_Edition&quot;&gt;ECMAScript 5&lt;/a&gt; there will be a forEach method on the array prototype, but it is not supported in legacy browsers. So to be able to use it consistently you must either have an environment that supports it (for example, &lt;a href=&quot;http://en.wikipedia.org/wiki/Node.js&quot;&gt;Node.js&lt;/a&gt; for server side JavaScript), or use a &quot;Polyfill&quot;. The Polyfill for this functionality is, however, trivial and since it makes the code easier to read, it is a good polyfill to include.</source>
          <target state="translated">В &lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript#ECMAScript.2C_5th_Edition&quot;&gt;ECMAScript 5 для&lt;/a&gt; прототипа массива будет использоваться метод forEach, но он не поддерживается в устаревших браузерах. Таким образом, чтобы иметь возможность использовать его последовательно, вы должны либо иметь среду, которая его поддерживает (например, &lt;a href=&quot;http://en.wikipedia.org/wiki/Node.js&quot;&gt;Node.js&lt;/a&gt; для серверного JavaScript), либо использовать &amp;laquo;Polyfill&amp;raquo;. Polyfill для этой функциональности, однако, тривиален, и, поскольку он делает код более легким для чтения, его стоит включить в Polyfill.</target>
        </trans-unit>
        <trans-unit id="1280ba4c719753e18ee74f317b64294340b96082" translate="yes" xml:space="preserve">
          <source>In &lt;em&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for_each...in&quot;&gt;for_each...in&lt;/a&gt;&lt;/em&gt; (MDN) it is explained that &lt;code&gt;for each (variable in object)&lt;/code&gt; is deprecated as the part of ECMA-357 (&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/E4X&quot;&gt;EAX&lt;/a&gt;) standard.</source>
          <target state="translated">В &lt;em&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for_each...in&quot;&gt;for_each ... in&lt;/a&gt;&lt;/em&gt; (MDN) объясняется, что &lt;code&gt;for each (variable in object)&lt;/code&gt; не рекомендуется как часть стандарта ECMA-357 ( &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/E4X&quot;&gt;EAX&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="9beb0c3410927f822bce0dcb01f44ccc46812376" translate="yes" xml:space="preserve">
          <source>In ES2015 and higher, you can make your index and value variables local to the &lt;code&gt;for&lt;/code&gt; loop:</source>
          <target state="translated">В ES2015 и выше вы можете сделать ваши переменные индекса и значения локальными &lt;code&gt;for&lt;/code&gt; цикла for :</target>
        </trans-unit>
        <trans-unit id="2cd3e11ca52c117696a761c0998ed90bfcd20a96" translate="yes" xml:space="preserve">
          <source>In any vaguely-modern environment (so, not IE8) where you have access to the &lt;code&gt;Array&lt;/code&gt; features added by ES5 (directly or using polyfills), you can use &lt;code&gt;forEach&lt;/code&gt; (&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-array.prototype.foreach&quot;&gt;&lt;code&gt;spec&lt;/code&gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach&quot;&gt;&lt;code&gt;MDN&lt;/code&gt;&lt;/a&gt;):</source>
          <target state="translated">В любой неопределенно современной среде (например, не в IE8), где у вас есть доступ к функциям &lt;code&gt;Array&lt;/code&gt; , добавленным ES5 (напрямую или с использованием полифилов), вы можете использовать &lt;code&gt;forEach&lt;/code&gt; ( &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-array.prototype.foreach&quot;&gt; &lt;code&gt;spec&lt;/code&gt; &lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach&quot;&gt; &lt;code&gt;MDN&lt;/code&gt; &lt;/a&gt; ):</target>
        </trans-unit>
        <trans-unit id="b3516d7a0d41bd0df93ef14853544e18b99e2cde" translate="yes" xml:space="preserve">
          <source>In case, more interested on operation on array using some inbuilt feature.</source>
          <target state="translated">В случае,если вас больше интересует работа с массивами,использующими какую-либо встроенную функцию.</target>
        </trans-unit>
        <trans-unit id="99006d079057d1e0af6e98a54c83d22f0c6ba073" translate="yes" xml:space="preserve">
          <source>In general for higher level code where &lt;strong&gt;clarity and safety&lt;/strong&gt; are greater concerns, I previously recommended using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach&quot;&gt;&lt;code&gt;Array::forEach&lt;/code&gt;&lt;/a&gt; as your default pattern for looping (although these days I prefer to use &lt;code&gt;for..of&lt;/code&gt;).  Reasons to prefer &lt;code&gt;forEach&lt;/code&gt; over a reverse loop are:</source>
          <target state="translated">В целом, для кода более высокого уровня, где &lt;strong&gt;ясность и безопасность&lt;/strong&gt; важнее, я ранее рекомендовал использовать &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach&quot;&gt; &lt;code&gt;Array::forEach&lt;/code&gt; &lt;/a&gt; качестве шаблона по умолчанию для циклов (хотя в настоящее время я предпочитаю использовать &lt;code&gt;for..of&lt;/code&gt; ). Причины для предпочтения &lt;code&gt;forEach&lt;/code&gt; по обратному циклу:</target>
        </trans-unit>
        <trans-unit id="268bee6cf2ad84db04fb8978e3c41ceecff7fc38" translate="yes" xml:space="preserve">
          <source>In tests we calculate the sum of array elements. I perform a test for small arrays (10 elements) and big arrays (1M elements) and divide them into three groups:</source>
          <target state="translated">В тестах мы вычисляем сумму элементов массива.Я выполняю тест для маленьких (10 элементов)и больших (1M элементов)массивов и делю их на три группы:</target>
        </trans-unit>
        <trans-unit id="3fb2676f32b14c1a1bbfd3126c8971f3d39c2fe6" translate="yes" xml:space="preserve">
          <source>In the traditional forwards for loop, &lt;code&gt;i++&lt;/code&gt; and &lt;code&gt;++i&lt;/code&gt; are interchangeable (as Douglas Crockford points out).  However in the reverse for loop, because our decrement is also our condition expression, we must stick with &lt;code&gt;i--&lt;/code&gt; if we want to process the item at index 0.</source>
          <target state="translated">В традиционных форвардах цикла &lt;code&gt;i++&lt;/code&gt; и &lt;code&gt;++i&lt;/code&gt; взаимозаменяемы (как указывает Дуглас Крокфорд). Однако в обратном цикле for, поскольку наш декремент также является условным выражением, мы должны придерживаться &lt;code&gt;i--&lt;/code&gt; , если мы хотим обработать элемент с индексом 0.</target>
        </trans-unit>
        <trans-unit id="9f2a940ef1876e18b0a2d2adbbb0054401c1e001" translate="yes" xml:space="preserve">
          <source>It gives you a free scope for closures.</source>
          <target state="translated">Это дает вам свободный простор для закрытия.</target>
        </trans-unit>
        <trans-unit id="a26206100bd26a40a1a52fbba4254be28b14f1b7" translate="yes" xml:space="preserve">
          <source>It indicates that &lt;em&gt;i&lt;/em&gt; is not going to be shifted within the block (which is always a possible surprise hiding in long &lt;code&gt;for&lt;/code&gt; and &lt;code&gt;while&lt;/code&gt; loops).</source>
          <target state="translated">Это указывает на то, что &lt;em&gt;я&lt;/em&gt; не буду сдвигаться в блоке (что всегда является возможным сюрпризом, скрывающимся в циклах long и &lt;code&gt;while&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="9c1e136ecc6d6ff5b0bb24c065a47cca352d2f77" translate="yes" xml:space="preserve">
          <source>It is &lt;strong&gt;shorter&lt;/strong&gt; to type, and &lt;strong&gt;read&lt;/strong&gt;, than some of the other options available.  Although it loses to &lt;code&gt;forEach()&lt;/code&gt; and to ES6's &lt;code&gt;for ... of&lt;/code&gt;.</source>
          <target state="translated">Он &lt;strong&gt;короче&lt;/strong&gt; печатать и &lt;strong&gt;читать&lt;/strong&gt; , чем некоторые другие доступные опции. Хотя он проигрывает &lt;code&gt;forEach()&lt;/code&gt; и ES6 &lt;code&gt;for ... of&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e1592309e0411fe23d697624a6b081cb0ad5da05" translate="yes" xml:space="preserve">
          <source>It is clearer to read.</source>
          <target state="translated">Читать понятнее.</target>
        </trans-unit>
        <trans-unit id="6fa8793a5b9a126bead6bc588548bf65c1d59eff" translate="yes" xml:space="preserve">
          <source>It is now even better to use for..of!</source>
          <target state="translated">Теперь его еще лучше использовать для...из!</target>
        </trans-unit>
        <trans-unit id="4c654c5e846023844a47e14f6c000b121f5ea18b" translate="yes" xml:space="preserve">
          <source>It looks like the traditional &lt;code&gt;for i&lt;/code&gt; (&lt;strong&gt;Aa&lt;/strong&gt;) is a good choice to write fast code on all browsers.</source>
          <target state="translated">Похоже, традиционный &lt;code&gt;for i&lt;/code&gt; ( &lt;strong&gt;Aa&lt;/strong&gt; ) хороший выбор для написания быстрого кода во всех браузерах.</target>
        </trans-unit>
        <trans-unit id="b05ec9bd35f4ee8f34e03d2c14bb2cf3574009f2" translate="yes" xml:space="preserve">
          <source>It processes the items in reverse order.  If you were building a new array from the results, or printing things on screen, naturally &lt;strong&gt;the output will be reversed&lt;/strong&gt; with respect to the original order.</source>
          <target state="translated">Обрабатывает элементы в обратном порядке. Если вы строили новый массив из результатов или печатали объекты на экране, естественно, &lt;strong&gt;результат будет обратным&lt;/strong&gt; относительно исходного порядка.</target>
        </trans-unit>
        <trans-unit id="92650d012635dc87fe3676b746f2df0b221ba0a1" translate="yes" xml:space="preserve">
          <source>It reduces leakage of local variables and accidental collision with (and mutation of) outer variables.</source>
          <target state="translated">Это уменьшает утечку локальных переменных и случайное столкновение с (и мутацию)внешними переменными.</target>
        </trans-unit>
        <trans-unit id="c027793c4fcbf7f7be6aed911c23cf2d476fffe0" translate="yes" xml:space="preserve">
          <source>It returns:</source>
          <target state="translated">Он возвращается:</target>
        </trans-unit>
        <trans-unit id="5a66b905f75247eeead429833c89c54b6d523c59" translate="yes" xml:space="preserve">
          <source>It was better to use forEach()</source>
          <target state="translated">Лучше использовать forEach()</target>
        </trans-unit>
        <trans-unit id="970da87efbe446de6ff12d27fb12ff80a89bc4c8" translate="yes" xml:space="preserve">
          <source>It's a &lt;a href=&quot;http://en.wikipedia.org/wiki/Sparse_array&quot;&gt;&lt;em&gt;sparse&lt;/em&gt; arrays&lt;/a&gt; with &lt;strong&gt;massive&lt;/strong&gt; gaps in it, or</source>
          <target state="translated">Это &lt;a href=&quot;http://en.wikipedia.org/wiki/Sparse_array&quot;&gt;&lt;em&gt;редкие&lt;/em&gt; массивы&lt;/a&gt; с &lt;strong&gt;большими&lt;/strong&gt; пробелами в них, или</target>
        </trans-unit>
        <trans-unit id="76bb57f065042a04a16fd907fcb40021f5d1d715" translate="yes" xml:space="preserve">
          <source>It's also possible to use ES2015's &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax&quot;&gt;spread syntax&lt;/a&gt; with JavaScript engines that support this feature:</source>
          <target state="translated">Также возможно использовать &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax&quot;&gt;синтаксис распространения&lt;/a&gt; ES2015 с механизмами JavaScript, которые поддерживают эту функцию:</target>
        </trans-unit>
        <trans-unit id="cf3b30579b92065eb7bc495af1fbdb1ca47efb2e" translate="yes" xml:space="preserve">
          <source>It's important to note that &lt;code&gt;Array.prototype.forEach&lt;/code&gt; doesn't break when the callback returns &lt;code&gt;false&lt;/code&gt;. &lt;a href=&quot;http://en.wikipedia.org/wiki/JQuery&quot;&gt;jQuery&lt;/a&gt; and &lt;a href=&quot;http://en.wikipedia.org/wiki/Underscore.js&quot;&gt;Underscore.js&lt;/a&gt; provide their own variations on &lt;code&gt;each&lt;/code&gt; to provide loops that can be short-circuited.</source>
          <target state="translated">Важно отметить, что &lt;code&gt;Array.prototype.forEach&lt;/code&gt; не прерывается , когда обратный вызов возвращает &lt;code&gt;false&lt;/code&gt; . &lt;a href=&quot;http://en.wikipedia.org/wiki/JQuery&quot;&gt;jQuery&lt;/a&gt; и &lt;a href=&quot;http://en.wikipedia.org/wiki/Underscore.js&quot;&gt;Underscore.js&lt;/a&gt; предоставляют свои собственные варианты для &lt;code&gt;each&lt;/code&gt; обеспечивая циклы, которые могут быть закорочены.</target>
        </trans-unit>
        <trans-unit id="8422ffb83ff856b5915a4e7e4e65862872e7a17c" translate="yes" xml:space="preserve">
          <source>Iterators are exhaustible in nature.</source>
          <target state="translated">Итераторы исчерпаны по своей природе.</target>
        </trans-unit>
        <trans-unit id="dd908ea29f0174193357642014bde7f4f593cc70" translate="yes" xml:space="preserve">
          <source>Iterators improve efficiency by letting you consume the items in a list one at a time as if they were a stream. What makes an iterator special is how it traverses a collection. Other loops need to load the entire collection up front in order to iterate over it, whereas an iterator only needs to know the current position in the collection.</source>
          <target state="translated">Итераторы повышают эффективность,позволяя вам потреблять элементы списка по одному,как если бы они были потоком.Что делает итератор особенным,так это то,как он пересекает коллекцию.Другие циклы должны загружать всю коллекцию вперед,чтобы выполнить итерацию над ней,в то время как итератор должен знать только текущее положение в коллекции.</target>
        </trans-unit>
        <trans-unit id="b4cec08cd006bef91b92cd98b872c068dfc6d47a" translate="yes" xml:space="preserve">
          <source>JavaScript has powerful semantics for looping through arrays and array-like objects. I've split the answer into two parts: Options for genuine arrays, and options for things that are just array-&lt;em&gt;like&lt;/em&gt;, such as the &lt;code&gt;arguments&lt;/code&gt; object, other iterable objects (ES2015+), DOM collections, and so on.</source>
          <target state="translated">JavaScript имеет мощную семантику для циклического перемещения по массивам и объектам, похожим на массивы. Я разделил ответ на две части: параметры для подлинных массивов и параметры для объектов, &lt;em&gt;похожих на&lt;/em&gt; массивы, таких как объект &lt;code&gt;arguments&lt;/code&gt; , другие итерируемые объекты (ES2015 +), коллекции DOM и т. Д.</target>
        </trans-unit>
        <trans-unit id="45b89ea7174719fe9456dfc7830bcd1c7b08f842" translate="yes" xml:space="preserve">
          <source>Looking only at that first example: You can use &lt;code&gt;for-in&lt;/code&gt; to visit those sparse array elements if you use appropriate safeguards:</source>
          <target state="translated">Рассматривая только первый пример: вы можете использовать &lt;code&gt;for-in&lt;/code&gt; для посещения этих элементов разреженного массива, если используете соответствующие меры безопасности:</target>
        </trans-unit>
        <trans-unit id="4839c1708da783319e9fbcbf7bb1edf7ed55c460" translate="yes" xml:space="preserve">
          <source>Loop backwards</source>
          <target state="translated">Петля задом наперёд</target>
        </trans-unit>
        <trans-unit id="116eba95b7902da0b19b136ed240ca0e56d035ae" translate="yes" xml:space="preserve">
          <source>No break, continue, or return support. &lt;code&gt;continue&lt;/code&gt; is actually supported by &quot;&lt;a href=&quot;https://github.com/angular/angular.js/issues/263&quot;&gt;accident&lt;/a&gt;&quot;, to continue in an &lt;code&gt;angular.forEach&lt;/code&gt; you simple put a &lt;code&gt;return;&lt;/code&gt; statement in the function like &lt;code&gt;angular.forEach(array, function(item) { if (someConditionIsTrue) return; });&lt;/code&gt; which will cause it to continue out of the function for that iteration. This is also due to the fact that the native &lt;code&gt;forEach&lt;/code&gt; does not support break or continue either.</source>
          <target state="translated">Без перерыва, продолжения или возврата поддержки. &lt;code&gt;continue&lt;/code&gt; на самом деле поддерживается &amp;laquo; &lt;a href=&quot;https://github.com/angular/angular.js/issues/263&quot;&gt;случайность&lt;/a&gt; &amp;raquo;, чтобы продолжить в &lt;code&gt;angular.forEach&lt;/code&gt; для каждого вы просто положить &lt;code&gt;return;&lt;/code&gt; оператор в функции наподобие &lt;code&gt;angular.forEach(array, function(item) { if (someConditionIsTrue) return; });&lt;/code&gt; что заставит его продолжать выходить из функции для этой итерации. Это также связано с тем, что нативный &lt;code&gt;forEach&lt;/code&gt; не поддерживает перерыв или продолжение.</target>
        </trans-unit>
        <trans-unit id="b8c4d2fd6737ec63b08a652d9add0b5b76e57401" translate="yes" xml:space="preserve">
          <source>Note the three checks:</source>
          <target state="translated">Обратите внимание на три проверки:</target>
        </trans-unit>
        <trans-unit id="98d5f549991350bbddfb1b3e02a8c7d43a397e2d" translate="yes" xml:space="preserve">
          <source>Note, however, that this approach is only good if you have a dense array, and each index is occupied by an element. If the array is sparse, then you can run into performance problems with this approach, since you will iterate over a lot of indices that do not &lt;em&gt;really&lt;/em&gt; exist in the array. In this case, a &lt;code&gt;for .. in&lt;/code&gt;-loop might be a better idea. &lt;strong&gt;However&lt;/strong&gt;, you must use the appropriate safeguards to ensure that only the desired properties of the array (that is, the array elements) are acted upon, since the &lt;code&gt;for..in&lt;/code&gt;-loop will also be enumerated in legacy browsers, or if the additional properties are defined as &lt;code&gt;enumerable&lt;/code&gt;.</source>
          <target state="translated">Обратите внимание, однако, что этот подход хорош, только если у вас плотный массив, и каждый индекс занят элементом. Если массив разреженный, то при таком подходе вы можете столкнуться с проблемами производительности, так как вы будете перебирать множество индексов, которые на &lt;em&gt;самом деле&lt;/em&gt; не существуют в массиве. В этом случае лучше использовать &lt;code&gt;for .. in&lt;/code&gt; -loop. &lt;strong&gt;Однако&lt;/strong&gt; вы должны использовать соответствующие меры предосторожности, чтобы гарантировать, что только требуемые свойства массива (то есть элементы массива) будут применены, так как &lt;code&gt;for..in&lt;/code&gt; -loop будет также перечисляться в устаревших браузерах, или если дополнительные свойства определены как &lt;code&gt;enumerable&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cdb386055d71d4e57655448305f3f266ba898acc" translate="yes" xml:space="preserve">
          <source>Now there are pros and cons of using the &lt;code&gt;angular.forEach&lt;/code&gt; function as opposed to the built in vanilla-flavored &lt;code&gt;for&lt;/code&gt; loop.</source>
          <target state="translated">Теперь есть плюсы и минусы использования функции &lt;code&gt;angular.forEach&lt;/code&gt; , а не встроенного цикла &lt;code&gt;for&lt;/code&gt; с ароматом ванили.</target>
        </trans-unit>
        <trans-unit id="ca0defbc542adca7eb89b7d006ccdd58542fae1e" translate="yes" xml:space="preserve">
          <source>Objects are not &lt;code&gt;iterable&lt;/code&gt; by default. Use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in&quot;&gt;&lt;code&gt;for..in&lt;/code&gt;&lt;/a&gt; in that case because instead of values it works with keys.</source>
          <target state="translated">Объекты не &lt;code&gt;iterable&lt;/code&gt; по умолчанию. В этом случае используйте &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in&quot;&gt; &lt;code&gt;for..in&lt;/code&gt; &lt;/a&gt; , потому что вместо значений он работает с ключами.</target>
        </trans-unit>
        <trans-unit id="dac14b18ddbcf811caa6f41435770bfcac91def3" translate="yes" xml:space="preserve">
          <source>Obviously, a simple &lt;code&gt;for&lt;/code&gt; loop applies to array-like objects.</source>
          <target state="translated">Очевидно, что простой цикл &lt;code&gt;for&lt;/code&gt; применяется к объектам, подобным массиву.</target>
        </trans-unit>
        <trans-unit id="0b2eddf2aee3155f4ce4917a2380a892eac5b90f" translate="yes" xml:space="preserve">
          <source>Okay, let's look at our options:</source>
          <target state="translated">Хорошо,давайте посмотрим на наши варианты:</target>
        </trans-unit>
        <trans-unit id="a72c2c53fbdfb2727533feb058f51addfd63ad98" translate="yes" xml:space="preserve">
          <source>Or if you wanted to get an array of the tag names of the elements with a given class, you'd use the mapping function:</source>
          <target state="translated">Или,если вы хотите получить массив имён тегов элементов с заданным классом,вы используете функцию отображения:</target>
        </trans-unit>
        <trans-unit id="073b8d82f68c2fdbe0506bde968834e71b06dd49" translate="yes" xml:space="preserve">
          <source>Other times, you may want to convert an array-like object into a true array. Doing that is surprisingly easy:</source>
          <target state="translated">В других случаях,вы можете захотеть преобразовать массивный объект в истинный массив.Сделать это на удивление просто:</target>
        </trans-unit>
        <trans-unit id="f3c8c95c5e534bcd2ea0034a0d83177efa6923f4" translate="yes" xml:space="preserve">
          <source>Output:</source>
          <target state="translated">Output:</target>
        </trans-unit>
        <trans-unit id="63c904559993935c470f516c8b549ca7f3640dbb" translate="yes" xml:space="preserve">
          <source>Performance</source>
          <target state="translated">Performance</target>
        </trans-unit>
        <trans-unit id="aab5f282758bebdcb0646ab510ae5cc532d051d9" translate="yes" xml:space="preserve">
          <source>Personally, I tend to use whatever looks easiest to read, unless performance or minification has become a major concern.  So these days I prefer to use &lt;code&gt;for..of&lt;/code&gt; instead of &lt;code&gt;forEach()&lt;/code&gt;, but I will always use &lt;code&gt;map&lt;/code&gt; or &lt;code&gt;filter&lt;/code&gt; or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find&quot;&gt;&lt;code&gt;find&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some&quot;&gt;&lt;code&gt;some&lt;/code&gt;&lt;/a&gt; when applicable. 
 (For the sake of my colleagues, I rarely use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce&quot;&gt;&lt;code&gt;reduce&lt;/code&gt;&lt;/a&gt;.)</source>
          <target state="translated">Лично я склонен использовать все, что выглядит легче для чтения, если только производительность или минимизация не стали серьезной проблемой. Поэтому в наши дни я предпочитаю использовать &lt;code&gt;for..of&lt;/code&gt; вместо &lt;code&gt;forEach()&lt;/code&gt; , но я всегда буду использовать &lt;code&gt;map&lt;/code&gt; или &lt;code&gt;filter&lt;/code&gt; или &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find&quot;&gt; &lt;code&gt;find&lt;/code&gt; &lt;/a&gt; или &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some&quot;&gt; &lt;code&gt;some&lt;/code&gt; &lt;/a&gt; когда это применимо. (Ради моих коллег я редко использую &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce&quot;&gt; &lt;code&gt;reduce&lt;/code&gt; &lt;/a&gt; .)</target>
        </trans-unit>
        <trans-unit id="d3e73cee41706cbf172168c939a770206031ae4a" translate="yes" xml:space="preserve">
          <source>Probably the &lt;code&gt;for(i = 0; i &amp;lt; array.length; i++)&lt;/code&gt; loop is not the best choice. Why? If you have this:</source>
          <target state="translated">Вероятно, цикл &lt;code&gt;for(i = 0; i &amp;lt; array.length; i++)&lt;/code&gt; - не лучший выбор. Почему? Если у вас есть это:</target>
        </trans-unit>
        <trans-unit id="5ca16fb6579631abba9ef29095127fc1724ade2e" translate="yes" xml:space="preserve">
          <source>Repeatedly inserting siblings into the DOM as a first child in order to retain their order is &lt;strong&gt;less efficient&lt;/strong&gt;.  (The browser would keep having to shift things right.)  To create DOM nodes efficiently and in order, just loop forwards and append as normal (and also use a &quot;document fragment&quot;).</source>
          <target state="translated">Повторная вставка братьев и сестер в DOM как первого ребенка для сохранения их порядка &lt;strong&gt;менее эффективна&lt;/strong&gt; . (Браузер будет вынужден постоянно сдвигать вещи.) Чтобы эффективно и упорядоченно создавать узлы DOM, просто выполните цикл вперед и добавьте как обычно (а также используйте &amp;laquo;фрагмент документа&amp;raquo;).</target>
        </trans-unit>
        <trans-unit id="c3c204bcc11d0ba16e5b10935b855c9231c60df7" translate="yes" xml:space="preserve">
          <source>Results for Chrome. You can perform the test on your machine &lt;a href=&quot;https://jsbench.me/9uk4bj4svg&quot;&gt;here&lt;/a&gt;</source>
          <target state="translated">Результаты для Chrome. Вы можете выполнить тест на вашей машине &lt;a href=&quot;https://jsbench.me/9uk4bj4svg&quot;&gt;здесь&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2632a58b332b7d1089e6d3db9b89fa34f55982ee" translate="yes" xml:space="preserve">
          <source>Results for Chrome. You can perform the test on your machine &lt;a href=&quot;https://jsbench.me/pxk4bicjru&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">Результаты для Chrome. Вы можете выполнить тест на вашей машине &lt;a href=&quot;https://jsbench.me/pxk4bicjru&quot;&gt;здесь&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="2941ce8fc00301085c9d7ce71d82ff621ce0e501" translate="yes" xml:space="preserve">
          <source>Results for all tested browsers</source>
          <target state="translated">Результаты для всех протестированных браузеров</target>
        </trans-unit>
        <trans-unit id="3ab8b51db1affd18d3dd969199d9006feae51589" translate="yes" xml:space="preserve">
          <source>See #4, we'll have to see how iterators play out.</source>
          <target state="translated">Видишь №4,надо посмотреть,как играют итераторы.</target>
        </trans-unit>
        <trans-unit id="2d8243a2c0e464492c9d563c4f92c56ae3421bcc" translate="yes" xml:space="preserve">
          <source>See also</source>
          <target state="translated">См.также</target>
        </trans-unit>
        <trans-unit id="b492c5ea4eeb39652fee30d40510ca39a54045aa" translate="yes" xml:space="preserve">
          <source>See the &lt;em&gt;Caveat for host-provided objects&lt;/em&gt; below. In particular, note that this will fail in IE8 and earlier, which don't let you use host-provided objects as &lt;code&gt;this&lt;/code&gt; like that.</source>
          <target state="translated">Смотрите &lt;em&gt;Caveat для предоставленных хостом объектов&lt;/em&gt; ниже. В частности, обратите внимание, что это не удастся в IE8 и более ранних версиях, которые не позволяют вам использовать предоставленные хостом объекты, как &lt;code&gt;this&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="919b9d8e3baf041ad3035d3f106002059a32c5a7" translate="yes" xml:space="preserve">
          <source>Should I always use it?</source>
          <target state="translated">Мне всегда им пользоваться?</target>
        </trans-unit>
        <trans-unit id="4bcb4e163bf193fe874c35e7a1a754e4ed2bd51c" translate="yes" xml:space="preserve">
          <source>Show code snippet</source>
          <target state="translated">Показать фрагмент кода</target>
        </trans-unit>
        <trans-unit id="90d4fe421bc14a9a7cd0cfb17b98bb87c323df29" translate="yes" xml:space="preserve">
          <source>Similarly, when modifying or removing &lt;strong&gt;nested&lt;/strong&gt; DOM elements, processing in reverse can &lt;strong&gt;circumvent errors&lt;/strong&gt;. For example, consider modifying the innerHTML of a parent node before handling its children.  By the time the child node is reached it will be detached from the DOM, having been replaced by a newly created child when the parent's innerHTML was written.</source>
          <target state="translated">Аналогично, при изменении или удалении &lt;strong&gt;вложенных&lt;/strong&gt; элементов DOM обратная обработка может &lt;strong&gt;обойти ошибки&lt;/strong&gt; . Например, рассмотрите возможность изменения innerHTML родительского узла перед обработкой его потомков. К тому времени, когда будет достигнут дочерний узел, он будет отсоединен от DOM, будучи замененным вновь созданным дочерним, когда был написан innerHTML родителя.</target>
        </trans-unit>
        <trans-unit id="9042b86e2d8972b544eebed08f73160765222f7f" translate="yes" xml:space="preserve">
          <source>So for instance, if we want to convert a &lt;code&gt;NodeList&lt;/code&gt; into a true array, we could do this:</source>
          <target state="translated">Так, например, если мы хотим преобразовать &lt;code&gt;NodeList&lt;/code&gt; в истинный массив, мы можем сделать это:</target>
        </trans-unit>
        <trans-unit id="1271c2d1e2ea0178abb1749d433619d8ba114b52" translate="yes" xml:space="preserve">
          <source>So for instance, if we want to convert a &lt;code&gt;NodeList&lt;/code&gt; into a true array, with spread syntax this becomes quite succinct:</source>
          <target state="translated">Так, например, если мы хотим преобразовать &lt;code&gt;NodeList&lt;/code&gt; в истинный массив, с распространенным синтаксисом это становится довольно лаконичным:</target>
        </trans-unit>
        <trans-unit id="d778f77d45108db7a7e4ef37756d652130403fa5" translate="yes" xml:space="preserve">
          <source>So on the final iteration, &lt;em&gt;i&lt;/em&gt; was previously &lt;strong&gt;1&lt;/strong&gt; and the &lt;code&gt;i--&lt;/code&gt; expression changes it to &lt;strong&gt;0&lt;/strong&gt; but actually yields &lt;strong&gt;1&lt;/strong&gt; (truthy), and so the condition passes.  On the next iteration &lt;code&gt;i--&lt;/code&gt; changes &lt;em&gt;i&lt;/em&gt; to &lt;strong&gt;-1&lt;/strong&gt; but yields &lt;strong&gt;0&lt;/strong&gt; (falsey), causing execution to immediately drop out of the bottom of the loop.</source>
          <target state="translated">Таким образом, на последней итерации ранее &lt;em&gt;я&lt;/em&gt; был &lt;code&gt;i--&lt;/code&gt; &lt;strong&gt;1,&lt;/strong&gt; а выражение i-- изменяет его на &lt;strong&gt;0,&lt;/strong&gt; но на самом деле возвращает &lt;strong&gt;1&lt;/strong&gt; (правда), и поэтому условие выполняется. На следующей итерации &lt;code&gt;i--&lt;/code&gt; меняет &lt;em&gt;i&lt;/em&gt; на &lt;strong&gt;-1,&lt;/strong&gt; но возвращает &lt;strong&gt;0&lt;/strong&gt; (фальси), в результате чего выполнение немедленно выпадает из нижней части цикла.</target>
        </trans-unit>
        <trans-unit id="ec2c077f94e3ef98852872b7d08256a523f61745" translate="yes" xml:space="preserve">
          <source>Some &lt;a href=&quot;http://en.wikipedia.org/wiki/C_%28programming_language%29&quot;&gt;C&lt;/a&gt;-style languages use &lt;code&gt;foreach&lt;/code&gt; to loop through enumerations. In JavaScript this is done with the &lt;a href=&quot;https://developer.mozilla.org/en/JavaScript/Reference/Statements/for...in&quot;&gt;&lt;code&gt;for..in&lt;/code&gt; loop structure&lt;/a&gt;:</source>
          <target state="translated">Некоторые языки &lt;a href=&quot;http://en.wikipedia.org/wiki/C_%28programming_language%29&quot;&gt;C-&lt;/a&gt; стиля используют &lt;code&gt;foreach&lt;/code&gt; для обхода перечислений. В JavaScript это делается с помощью &lt;a href=&quot;https://developer.mozilla.org/en/JavaScript/Reference/Statements/for...in&quot;&gt; &lt;code&gt;for..in&lt;/code&gt; цикла for..in&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="941bae0ecab27ddc205e29dd3a6d3b3bc8f9e89d" translate="yes" xml:space="preserve">
          <source>Some developers use the reverse for loop &lt;em&gt;by default&lt;/em&gt;, unless there is a good reason to loop forwards.</source>
          <target state="translated">Некоторые разработчики &lt;em&gt;по умолчанию&lt;/em&gt; используют обратный цикл for, если нет веских причин для циклического продвижения вперед.</target>
        </trans-unit>
        <trans-unit id="3163e5ac5c4f789da55694f27cb9f6c55a337dd5" translate="yes" xml:space="preserve">
          <source>Some people like to draw a little arrow in the reverse &lt;code&gt;for&lt;/code&gt; loop, and end with a wink:</source>
          <target state="translated">Некоторые люди любят рисовать маленькую стрелку в обратном направлении &lt;code&gt;for&lt;/code&gt; цикла и заканчивают миганием:</target>
        </trans-unit>
        <trans-unit id="b119d6cd5c4dc707a6167c6c075b24e4d7be734d" translate="yes" xml:space="preserve">
          <source>Sometimes the old ways are the best:</source>
          <target state="translated">Иногда старые способы-лучшие:</target>
        </trans-unit>
        <trans-unit id="59f86f5e3b9995bc329f5d4bc79c9d16c81b5fba" translate="yes" xml:space="preserve">
          <source>Sometimes, you might want to use an iterator &lt;em&gt;explicitly&lt;/em&gt;. You can do that, too, although it's a lot clunkier than &lt;code&gt;for-of&lt;/code&gt;. It looks like this:</source>
          <target state="translated">Иногда вам может понадобиться &lt;em&gt;явно&lt;/em&gt; использовать итератор. Вы можете сделать это тоже, хотя это намного более грубое, чем &lt;code&gt;for-of&lt;/code&gt; . Это выглядит так:</target>
        </trans-unit>
        <trans-unit id="c7657c048f2c02f83c5e4cef8d5cbd16b976ff8a" translate="yes" xml:space="preserve">
          <source>Suppose you wanted to use &lt;code&gt;forEach&lt;/code&gt; on a &lt;code&gt;Node&lt;/code&gt;'s &lt;code&gt;childNodes&lt;/code&gt; property. You'd do this:</source>
          <target state="translated">Предположим, вы хотите использовать &lt;code&gt;forEach&lt;/code&gt; для свойства &lt;code&gt;childNodes&lt;/code&gt; узла . Вы бы сделали это:</target>
        </trans-unit>
        <trans-unit id="2870c360b6a5c3b4d815964ddecea3817c257c4c" translate="yes" xml:space="preserve">
          <source>That the key is all decimal digits (e.g., normal string form, not scientific notation), and</source>
          <target state="translated">Что ключом являются все десятичные цифры (например,нормальная форма строки,а не научная нотация),а также</target>
        </trans-unit>
        <trans-unit id="dce363e4d7896cca416fa7202976d0faa93b7cb7" translate="yes" xml:space="preserve">
          <source>That the key's value when coerced to a number is &amp;lt;= 2^32 - 2 (which is 4,294,967,294). Where does that number come from? It's part of the definition of an array index &lt;a href=&quot;https://tc39.github.io/ecma262/#array-index&quot;&gt;in the specification&lt;/a&gt;. Other numbers (non-integers, negative numbers, numbers greater than 2^32 - 2) are not array indexes. The reason it's 2^32 - &lt;strong&gt;2&lt;/strong&gt; is that that makes the greatest index value one lower than 2^32 - &lt;strong&gt;1&lt;/strong&gt;, which is the maximum value an array's &lt;code&gt;length&lt;/code&gt; can have. (E.g., an array's length fits in a 32-bit unsigned integer.) &lt;em&gt;(Props to RobG for pointing out in a comment &lt;a href=&quot;http://blog.niftysnippets.org/2010/11/myths-and-realities-of-forin.html&quot;&gt;on my blog post&lt;/a&gt; that my previous test wasn't quite right.)&lt;/em&gt;</source>
          <target state="translated">Что значение ключа при наведении на число составляет &amp;lt;= 2 ^ 32 - 2 (что составляет 4 294 967 294). Откуда этот номер? Это часть определения индекса массива &lt;a href=&quot;https://tc39.github.io/ecma262/#array-index&quot;&gt;в спецификации&lt;/a&gt; . Другие числа (нецелые числа, отрицательные числа, числа больше 2 ^ 32 - 2) не являются индексами массива. Причина, по которой это 2 ^ 32 - &lt;strong&gt;2,&lt;/strong&gt; заключается в том, что это делает наибольшее значение индекса на единицу меньше, чем 2 ^ 32 - &lt;strong&gt;1&lt;/strong&gt; , то есть максимальное значение, которое может иметь &lt;code&gt;length&lt;/code&gt; массива. (Например, длина массива соответствует 32-разрядному целому числу без знака.) &lt;em&gt;(Пропишет в RobG, указав в комментарии &lt;a href=&quot;http://blog.niftysnippets.org/2010/11/myths-and-realities-of-forin.html&quot;&gt;к моему сообщению в блоге,&lt;/a&gt; что мой предыдущий тест был не совсем правильным.)&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a83ef01e292828af9f95ea6fd3cb1ad1a7e9b181" translate="yes" xml:space="preserve">
          <source>That the object has its &lt;em&gt;own&lt;/em&gt; property by that name (not one it inherits from its prototype), and</source>
          <target state="translated">Что у объекта есть &lt;em&gt;собственное&lt;/em&gt; свойство с таким именем (не то, которое он наследует от своего прототипа), и</target>
        </trans-unit>
        <trans-unit id="410be7b6d8de783ae1460eb1fb1c418447a833c5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;i--&lt;/code&gt; like solutions where the loop starts from the last array element (&lt;strong&gt;Ac, Bc&lt;/strong&gt;) are usually ~30% slower than forward solutions - probably the reason is the way of &lt;a href=&quot;https://stackoverflow.com/questions/1950878/c-for-loop-indexing-is-forward-indexing-faster-in-new-cpus&quot;&gt;CPU memory cache working&lt;/a&gt; - forward memory reading is more optimal for CPU caching). &lt;strong&gt;Is recommended to NOT USE such solutions.&lt;/strong&gt;</source>
          <target state="translated">&lt;code&gt;i--&lt;/code&gt; типа i--, в которых цикл начинается с последнего элемента массива ( &lt;strong&gt;Ac, Bc&lt;/strong&gt; ), как правило, примерно на 30% медленнее, чем прямые решения - возможно, причина в том, как &lt;a href=&quot;https://stackoverflow.com/questions/1950878/c-for-loop-indexing-is-forward-indexing-faster-in-new-cpus&quot;&gt;работает кэш памяти ЦП&lt;/a&gt; - прямое чтение памяти более оптимально для ЦП. кэширование). &lt;strong&gt;Рекомендуется НЕ ИСПОЛЬЗОВАТЬ такие решения.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="50fab3bc0666321dff613699d5e26402e68c7f7f" translate="yes" xml:space="preserve">
          <source>The benefit for this: You have the reference already in the first like that won't need to be declared later with another line. It is handy when looping trough the object array.</source>
          <target state="translated">Это выгодно:У вас уже есть ссылка в первом подобном случае не нужно будет объявлять позже с другой строкой.Это удобно при прохождении петли через массив объектов.</target>
        </trans-unit>
        <trans-unit id="8e2dba3330af35406fa3d1420af1173d75e136d6" translate="yes" xml:space="preserve">
          <source>The braces (&lt;code&gt;{}&lt;/code&gt;) can be omitted when there is only one command (e.g. in the example above).</source>
          <target state="translated">Скобки ( &lt;code&gt;{}&lt;/code&gt; ) могут быть опущены, когда есть только одна команда (например, в примере выше).</target>
        </trans-unit>
        <trans-unit id="c098c9f1a959378486a97457d4178958264ad2ec" translate="yes" xml:space="preserve">
          <source>The following examples will use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of&quot;&gt;&lt;code&gt;for...of&lt;/code&gt;&lt;/a&gt; statement and the &lt;a href=&quot;https://developer.mozilla.org/ro/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach&quot;&gt;&lt;code&gt;.forEach&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">В следующих примерах будут использоваться оператор &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of&quot;&gt; &lt;code&gt;for...of&lt;/code&gt; &lt;/a&gt; и метод &lt;a href=&quot;https://developer.mozilla.org/ro/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach&quot;&gt; &lt;code&gt;.forEach&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="3a00e7fa39a3bdf93692adc3a257b29ca0ee5020" translate="yes" xml:space="preserve">
          <source>The iterator is an object matching the Iterator definition in the specification. Its &lt;code&gt;next&lt;/code&gt; method returns a new &lt;em&gt;result object&lt;/em&gt; each time you call it. The result object has a property, &lt;code&gt;done&lt;/code&gt;, telling us whether it's done, and a property &lt;code&gt;value&lt;/code&gt; with the value for that iteration. (&lt;code&gt;done&lt;/code&gt; is optional if it would be &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;value&lt;/code&gt; is optional if it would be &lt;code&gt;undefined&lt;/code&gt;.)</source>
          <target state="translated">Итератор - это объект, соответствующий определению Итератора в спецификации. Его &lt;code&gt;next&lt;/code&gt; метод возвращает новый &lt;em&gt;объект результата&lt;/em&gt; каждый раз, когда вы вызываете его. У объекта результата есть свойство &lt;code&gt;done&lt;/code&gt; , сообщающее нам, выполнено ли это, и &lt;code&gt;value&lt;/code&gt; свойства со значением для этой итерации. ( &lt;code&gt;done&lt;/code&gt; является необязательным, если оно равно &lt;code&gt;false&lt;/code&gt; , &lt;code&gt;value&lt;/code&gt; необязательно, если оно не &lt;code&gt;undefined&lt;/code&gt; .)</target>
        </trans-unit>
        <trans-unit id="fb536e6fcbd5fa797f6c5702a97e23e4c75f5773" translate="yes" xml:space="preserve">
          <source>The lambda syntax doesn't usually work in Internet&amp;nbsp;Explorer&amp;nbsp;10  or below.</source>
          <target state="translated">Лямбда-синтаксис обычно не работает в Internet Explorer 10 или ниже.</target>
        </trans-unit>
        <trans-unit id="866f22286c83f5903a913086e3b75aeeb2603c3c" translate="yes" xml:space="preserve">
          <source>The loop will stop iterating when the condition &lt;code&gt;i--&lt;/code&gt; evaluates to a falsey value (when it yields 0).</source>
          <target state="translated">Цикл прекратит итерацию, когда условие &lt;code&gt;i--&lt;/code&gt; оценивается как значение Фолси (когда оно возвращает 0).</target>
        </trans-unit>
        <trans-unit id="80992ad230888519239affffa93744a318eb6afc" translate="yes" xml:space="preserve">
          <source>The loops with array length cached in &lt;code&gt;n&lt;/code&gt; (&lt;strong&gt;Ab, Bb, Be&lt;/strong&gt;) are sometimes faster, sometimes not. Probably compilers automatically detect this situation and introduce caching. The speed differences between the cached and no-cached versions (&lt;strong&gt;Aa, Ba, Bd&lt;/strong&gt;) are about ~1%, so it looks like introduce &lt;code&gt;n&lt;/code&gt; is a &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3470990/is-micro-optimization-worth-the-time/3471000#3471000&quot;&gt;micro-optimisation&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">Циклы с длиной массива, кэшированные в &lt;code&gt;n&lt;/code&gt; ( &lt;strong&gt;Ab, Bb, Be&lt;/strong&gt; ), иногда быстрее, иногда нет. Вероятно, компиляторы автоматически обнаруживают эту ситуацию и вводят кеширование. Разница в скорости между кешированной и не кешированной версиями ( &lt;strong&gt;Aa, Ba, Bd&lt;/strong&gt; ) составляет около ~ 1%, поэтому похоже, что введение представляет собой &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3470990/is-micro-optimization-worth-the-time/3471000#3471000&quot;&gt;микрооптимизацию&lt;/a&gt;&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="8e52b46122ec0efd9e5bc3d7eec0fac027826ce2" translate="yes" xml:space="preserve">
          <source>The meaning of &lt;code&gt;value&lt;/code&gt; varies depending on the iterator; arrays support (at least) three functions that return iterators:</source>
          <target state="translated">Значение &lt;code&gt;value&lt;/code&gt; варьируется в зависимости от итератора; Массивы поддерживают (как минимум) три функции, которые возвращают итераторы:</target>
        </trans-unit>
        <trans-unit id="6f4344e9b0061937311866ba4501ba441df9956f" translate="yes" xml:space="preserve">
          <source>The method will call from &lt;code&gt;array[0]&lt;/code&gt; to &lt;code&gt;array[2]&lt;/code&gt;. First, this will first reference variables you don't even have, second you would not have the variables in the array, and third this will make the code bolder. Look here, it's what I use:</source>
          <target state="translated">Метод будет вызываться из &lt;code&gt;array[0]&lt;/code&gt; в &lt;code&gt;array[2]&lt;/code&gt; . Во-первых, это будет сначала ссылаться на переменные, которых у вас даже нет, во-вторых, у вас не будет переменных в массиве, и в-третьих, это сделает код более смелым. Посмотрите здесь, это то, что я использую:</target>
        </trans-unit>
        <trans-unit id="74aa97507801ce4d05b427601775a33b918e48b3" translate="yes" xml:space="preserve">
          <source>The only real use cases for &lt;code&gt;for-in&lt;/code&gt; on an array are:</source>
          <target state="translated">Единственные реальные варианты использования &lt;code&gt;for-in&lt;/code&gt; в массиве:</target>
        </trans-unit>
        <trans-unit id="752c45d9e3f0bb5c04149934ef14e0e9e95a2014" translate="yes" xml:space="preserve">
          <source>The other solutions, like &lt;code&gt;for-of&lt;/code&gt; (&lt;strong&gt;Ad&lt;/strong&gt;), all in group &lt;strong&gt;C.&lt;/strong&gt;... are usually 2 - 10 (and more) times slower than &lt;strong&gt;Aa&lt;/strong&gt;, but for small arrays it is ok to use it - for the sake of increase code clarity.</source>
          <target state="translated">Другие решения, такие как &lt;code&gt;for-of&lt;/code&gt; ( &lt;strong&gt;Ad&lt;/strong&gt; ), все в группе &lt;strong&gt;C.&lt;/strong&gt; ... обычно в 2 - 10 (и более) раз медленнее, чем &lt;strong&gt;Aa&lt;/strong&gt; , но для небольших массивов его можно использовать - для увеличения ясность кода</target>
        </trans-unit>
        <trans-unit id="e6e6a03f8cd96d0cc668913bda563a8e9ba99a69" translate="yes" xml:space="preserve">
          <source>The reverse loop is &lt;strong&gt;confusing&lt;/strong&gt; to junior developers.  (You may consider that an advantage, depending on your outlook.)</source>
          <target state="translated">Обратный цикл &lt;strong&gt;сбивает&lt;/strong&gt; с &lt;strong&gt;толку&lt;/strong&gt; молодых разработчиков. (Вы можете считать это преимуществом, в зависимости от вашего мировоззрения.)</target>
        </trans-unit>
        <trans-unit id="f1e91d86c7df92b8dd9b5472ca55e71a9d8cd69a" translate="yes" xml:space="preserve">
          <source>The standard way to iterate an array in &lt;a href=&quot;http://en.wikipedia.org/wiki/JavaScript&quot;&gt;JavaScript&lt;/a&gt; is a vanilla &lt;code&gt;for&lt;/code&gt;-loop:</source>
          <target state="translated">Стандартный способ итерации массива в &lt;a href=&quot;http://en.wikipedia.org/wiki/JavaScript&quot;&gt;JavaScript&lt;/a&gt; - это ваниль &lt;code&gt;for&lt;/code&gt; -loop:</target>
        </trans-unit>
        <trans-unit id="f83ea1369d58b6fdc00c70cea4bb0aa9a818aa64" translate="yes" xml:space="preserve">
          <source>The trick is that unlike &lt;code&gt;--i&lt;/code&gt;, the trailing &lt;code&gt;i--&lt;/code&gt; operator decrements &lt;code&gt;i&lt;/code&gt; but yields the value &lt;strong&gt;&lt;em&gt;before&lt;/em&gt;&lt;/strong&gt; the decrement.  Your console can demonstrate this:</source>
          <target state="translated">Хитрость в том, что в отличие от &lt;code&gt;--i&lt;/code&gt; , завершающий оператор &lt;code&gt;i--&lt;/code&gt; уменьшает значение &lt;code&gt;i&lt;/code&gt; , но возвращает значение &lt;strong&gt;&lt;em&gt;до&lt;/em&gt;&lt;/strong&gt; уменьшения. Ваша консоль может продемонстрировать это:</target>
        </trans-unit>
        <trans-unit id="608bdf441fc2978c8b5bcb888401c074fd430bc1" translate="yes" xml:space="preserve">
          <source>The various functions on &lt;code&gt;Array.prototype&lt;/code&gt; are &quot;intentionally generic&quot; and can usually be used on array-like objects via &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-function.prototype.call&quot;&gt;&lt;code&gt;Function#call&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-function.prototype.apply&quot;&gt;&lt;code&gt;Function#apply&lt;/code&gt;&lt;/a&gt;. (See the &lt;em&gt;Caveat for host-provided objects&lt;/em&gt; at the end of this answer, but it's a rare issue.)</source>
          <target state="translated">Различные функции в &lt;code&gt;Array.prototype&lt;/code&gt; являются &amp;laquo;преднамеренно общими&amp;raquo; и обычно могут использоваться в объектах, подобных массивам, через &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-function.prototype.call&quot;&gt; &lt;code&gt;Function#call&lt;/code&gt; &lt;/a&gt; &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-function.prototype.apply&quot;&gt; &lt;code&gt;Function#apply&lt;/code&gt; &lt;/a&gt; или Function # apply . (См. &lt;em&gt;Caveat для предоставленных хостом объектов&lt;/em&gt; в конце этого ответа, но это редкая проблема.)</target>
        </trans-unit>
        <trans-unit id="5b74a123ca6113288c61c01f944435ca7d90b342" translate="yes" xml:space="preserve">
          <source>Then when you do see the reverse for loop in your code, that is a hint that it is reversed for a good reason (perhaps one of the reasons described above).  And seeing a traditional forward for loop may indicate that shifting can take place.</source>
          <target state="translated">Затем,когда вы видите в своем коде обратный цикл,это намекает на то,что он реверсируется по уважительной причине (возможно,по одной из причин,описанных выше).А если увидеть традиционный форвард для цикла,то это может указывать на то,что может произойти смещение.</target>
        </trans-unit>
        <trans-unit id="d150400a4ca68f73e954c6ea93f05e7de141942b" translate="yes" xml:space="preserve">
          <source>There are &lt;strong&gt;a few ways&lt;/strong&gt; to loop through an array in JavaScript, as below:</source>
          <target state="translated">Есть &lt;strong&gt;несколько способов&lt;/strong&gt; перебрать массив в JavaScript, как показано ниже:</target>
        </trans-unit>
        <trans-unit id="0b51f25dbb23a6ed31b4ccfd1a12b3fdb1871919" translate="yes" xml:space="preserve">
          <source>There are different ways to use the forEach loop of angular. The simplest and probably most used is</source>
          <target state="translated">Существуют различные способы использования угловой петли forEach.Самый простой и,вероятно,наиболее используемый -</target>
        </trans-unit>
        <trans-unit id="43e3466064c6ca5060bfe7c0d8fe1a2296506e5e" translate="yes" xml:space="preserve">
          <source>There are three implementations of &lt;code&gt;foreach&lt;/code&gt; in &lt;a href=&quot;http://en.wikipedia.org/wiki/JQuery&quot;&gt;jQuery&lt;/a&gt; as follows.</source>
          <target state="translated">В &lt;a href=&quot;http://en.wikipedia.org/wiki/JQuery&quot;&gt;jQuery&lt;/a&gt; есть три реализации &lt;code&gt;foreach&lt;/code&gt; следующим образом.</target>
        </trans-unit>
        <trans-unit id="d54c80c3143769b1187df474f58937273f32b476" translate="yes" xml:space="preserve">
          <source>There is a catch. &lt;code&gt;for..in&lt;/code&gt; will loop through each of the object's enumerable members, and the members on its prototype. To avoid reading values that are inherited through the object's prototype, simply check if the property belongs to the object:</source>
          <target state="translated">Есть подвох. &lt;code&gt;for..in&lt;/code&gt; будет проходить через каждый из перечисляемых членов объекта и членов его прототипа. Чтобы избежать чтения значений, которые наследуются через прототип объекта, просто проверьте, принадлежит ли свойство объекту:</target>
        </trans-unit>
        <trans-unit id="93b99dbbcfcfef18eac3c5a89b5362f4491b1f4f" translate="yes" xml:space="preserve">
          <source>There is a debate about whether &lt;code&gt;for..of&lt;/code&gt; or &lt;code&gt;forEach()&lt;/code&gt; are preferable:</source>
          <target state="translated">Существует дискуссия о том, &lt;code&gt;for..of&lt;/code&gt; ли for..of или &lt;code&gt;forEach()&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="5162299771e3535e699131f35c2cf628ce13a63a" translate="yes" xml:space="preserve">
          <source>There isn't any &lt;code&gt;for each&lt;/code&gt; loop in native &lt;a href=&quot;http://en.wikipedia.org/wiki/JavaScript&quot;&gt;JavaScript&lt;/a&gt;. You can either use libraries to get this functionality (I recommend &lt;a href=&quot;http://en.wikipedia.org/wiki/Underscore.js&quot;&gt;Underscore.js&lt;/a&gt;), use a simple &lt;code&gt;for&lt;/code&gt; in loop.</source>
          <target state="translated">Не существует &lt;code&gt;for each&lt;/code&gt; цикла в нативном &lt;a href=&quot;http://en.wikipedia.org/wiki/JavaScript&quot;&gt;JavaScript&lt;/a&gt; . Вы можете использовать библиотеки, чтобы получить эту функциональность (я рекомендую &lt;a href=&quot;http://en.wikipedia.org/wiki/Underscore.js&quot;&gt;Underscore.js&lt;/a&gt; ), используйте простой цикл for.</target>
        </trans-unit>
        <trans-unit id="55d52a0b513a03e6f341ec331ed111d51c87156a" translate="yes" xml:space="preserve">
          <source>There's no inbuilt ability to break in &lt;code&gt;forEach&lt;/code&gt;. To interrupt execution use the &lt;code&gt;Array#some&lt;/code&gt; like below:</source>
          <target state="translated">Там нет встроенной способности взломать &lt;code&gt;forEach&lt;/code&gt; . Чтобы прервать выполнение, используйте &lt;code&gt;Array#some&lt;/code&gt; как показано ниже:</target>
        </trans-unit>
        <trans-unit id="24112cc482e8cc4c078f7faf03d3a6612e321185" translate="yes" xml:space="preserve">
          <source>This is an iterator for NON-sparse list where the index starts at 0, which is the typical scenario when dealing with document.getElementsByTagName or document.querySelectorAll)</source>
          <target state="translated">Это итератор для NON-разрезного списка,где индекс начинается с 0,что является типичным сценарием при работе с Document.getElementsByTagName или document.requestSelectorAll).</target>
        </trans-unit>
        <trans-unit id="b109618ad05adb05d3d283e04dadad94a3074a14" translate="yes" xml:space="preserve">
          <source>This will break whenever the reference is false - falsey (undefined, etc.). It can be used as an advantage though. However, it would make it a little bit harder to read. And also depending on the browser it can be &quot;not&quot; optimized to work faster than the original one.</source>
          <target state="translated">Это будет прерываться всякий раз,когда ссылка будет ложной-falsey (неопределенной и т.д.).Однако это может быть использовано как преимущество.Однако,это сделает ее немного сложнее для чтения.А также,в зависимости от браузера,он может быть &quot;не&quot; оптимизирован для работы быстрее,чем оригинальный.</target>
        </trans-unit>
        <trans-unit id="cb8a12948118a05c21c4646e9b69844b0d2ce858" translate="yes" xml:space="preserve">
          <source>This works because &lt;code&gt;some&lt;/code&gt; returns true as soon as any of the callbacks, executed in array order, returns true, short-circuiting the execution of the rest. 
&lt;a href=&quot;https://stackoverflow.com/questions/2641347/how-to-short-circuit-array-foreach-like-calling-break&quot;&gt;Original Answer&lt;/a&gt;
see Array prototype for &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.17&quot;&gt;some&lt;/a&gt;</source>
          <target state="translated">Это работает, потому что &lt;code&gt;some&lt;/code&gt; возвращают true, как только любой из обратных вызовов, выполненных в порядке массива, возвращает true, замыкая выполнение остальных. &lt;a href=&quot;https://stackoverflow.com/questions/2641347/how-to-short-circuit-array-foreach-like-calling-break&quot;&gt;Оригинальный ответ&lt;/a&gt; см. Прототип Array для &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.17&quot;&gt;некоторых&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4c334db464368d273947e54cf77b80331da64b0f" translate="yes" xml:space="preserve">
          <source>Though, you don't have to do that, you can simply do the following and it's equivalent to the previous example:</source>
          <target state="translated">Хотя вам и не обязательно это делать,вы можете просто сделать следующее,и это эквивалентно предыдущему примеру:</target>
        </trans-unit>
        <trans-unit id="257fcf65e941aa6ba5c5e06169df94cf19c12a87" translate="yes" xml:space="preserve">
          <source>Today (2019-12-18) I perform test on my &lt;a href=&quot;https://en.wikipedia.org/wiki/MacOS_High_Sierra&quot;&gt;macOS v10.13.6&lt;/a&gt; (High Sierra), on Chrome v 79.0, Safari v13.0.4 and Firefox v71.0 (64 bit) - conclusions about optimisation (and &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3470990/is-micro-optimization-worth-the-time/3471000#3471000&quot;&gt;micro-optimisation&lt;/a&gt;&lt;/em&gt; which usually is not worth to introduce it to code because the benefit is small, but code complexity grows).</source>
          <target state="translated">Сегодня (2019-12-18) я провожу тестирование на моем &lt;a href=&quot;https://en.wikipedia.org/wiki/MacOS_High_Sierra&quot;&gt;macOS v10.13.6&lt;/a&gt; (High Sierra), на Chrome v 79.0, Safari v13.0.4 и Firefox v71.0 (64 бит) - выводы об оптимизации (и &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3470990/is-micro-optimization-worth-the-time/3471000#3471000&quot;&gt;микро-оптимизации,&lt;/a&gt;&lt;/em&gt; которые обычно не стоит вводить его в код, потому что выгода невелика, но сложность кода растет).</target>
        </trans-unit>
        <trans-unit id="54b58f77bdc50c962ebcb489df02102329ea9473" translate="yes" xml:space="preserve">
          <source>Transform your regular array to iterator using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values&quot;&gt;&lt;code&gt;values()&lt;/code&gt;&lt;/a&gt; method like this:</source>
          <target state="translated">Преобразуйте ваш обычный массив в итератор, используя метод &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values&quot;&gt; &lt;code&gt;values()&lt;/code&gt; &lt;/a&gt; следующим образом:</target>
        </trans-unit>
        <trans-unit id="286e721a1890a58c29a5c4014f7f586f56cc077f" translate="yes" xml:space="preserve">
          <source>Trivia</source>
          <target state="translated">Trivia</target>
        </trans-unit>
        <trans-unit id="f2407f77f30d5cce56de1bb34c4429f7541eb397" translate="yes" xml:space="preserve">
          <source>Under the covers, that gets an &lt;em&gt;iterator&lt;/em&gt; from the array and loops through it, getting the values from it. This doesn't have the issue that using &lt;code&gt;for-in&lt;/code&gt; has, because it uses an iterator defined by the object (the array), and arrays define that their iterators iterate through their &lt;em&gt;entries&lt;/em&gt; (not their properties). Unlike &lt;code&gt;for-in&lt;/code&gt; in ES5, the order in which the entries are visited is the numeric order of their indexes.</source>
          <target state="translated">Под прикрытием, который получает &lt;em&gt;итератор&lt;/em&gt; из массива и проходит по нему, получая значения из него. В этом нет проблемы, связанной с использованием &lt;code&gt;for-in&lt;/code&gt; , поскольку он использует итератор, определенный объектом (массивом), а массивы определяют, что их итераторы выполняют итерацию по своим &lt;em&gt;записям&lt;/em&gt; (а не по их свойствам). В отличие от &lt;code&gt;for-in&lt;/code&gt; в ES5, порядок посещения записей - это порядковый номер их индексов.</target>
        </trans-unit>
        <trans-unit id="51d0fcbbedb44b967fe1846371188cf04d2c2452" translate="yes" xml:space="preserve">
          <source>Unless you're supporting obsolete browsers like IE8 (which NetApps shows at just over 4% market share as of this writing in September&amp;nbsp;2016), you can happily use &lt;code&gt;forEach&lt;/code&gt; in a general-purpose web page without a shim. If you do need to support obsolete browsers, shimming/polyfilling &lt;code&gt;forEach&lt;/code&gt; is easily done (search for &quot;es5 shim&quot; for several options).</source>
          <target state="translated">Если вы не поддерживаете устаревшие браузеры, такие как IE8 (на долю которого NetApps приходится чуть более 4% рынка на момент написания этой статьи в сентябре 2016 года), вы можете с радостью использовать &lt;code&gt;forEach&lt;/code&gt; на веб-странице общего назначения без прокладки. Если вам требуется поддержка устаревших браузеров, легко выполнить shimming / polyfilling &lt;code&gt;forEach&lt;/code&gt; (найдите &amp;laquo;es5 shim&amp;raquo; для нескольких вариантов).</target>
        </trans-unit>
        <trans-unit id="431a3b9a552efc88858519dfb72bdcfb495d5966" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;for-in&lt;/code&gt;&lt;em&gt;correctly&lt;/em&gt;</source>
          <target state="translated">Используйте &lt;code&gt;for-in&lt;/code&gt; &lt;em&gt;правильно&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9e0c11cbf7ef3c72db6fc4b3fe5d45b56bc12d21" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;for-of&lt;/code&gt; (use an iterator implicitly) (ES2015+)</source>
          <target state="translated">Использовать &lt;code&gt;for-of&lt;/code&gt; (использовать итератор неявно) (ES2015 +)</target>
        </trans-unit>
        <trans-unit id="734ae2379fe23a7a3bc38483ac1b653b9d9051b3" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;forEach&lt;/code&gt; and related (ES5+)</source>
          <target state="translated">Используйте для &lt;code&gt;forEach&lt;/code&gt; и связанных (ES5 +)</target>
        </trans-unit>
        <trans-unit id="2c08b442b76b66cca66b71d3f1ff947bdd36a587" translate="yes" xml:space="preserve">
          <source>Use a simple &lt;code&gt;for&lt;/code&gt; loop</source>
          <target state="translated">Используйте простой цикл &lt;code&gt;for&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1ea53b376965f0df377f080711210f0ab1972b82" translate="yes" xml:space="preserve">
          <source>Use an iterator explicitly (ES2015+)</source>
          <target state="translated">Используйте итератор явно (ES2015+).</target>
        </trans-unit>
        <trans-unit id="34c4927f746ab01e6fc5a9bc93966e26f8b7d962" translate="yes" xml:space="preserve">
          <source>Use any of the options above for arrays</source>
          <target state="translated">Используйте любой из вышеперечисленных вариантов для массивов</target>
        </trans-unit>
        <trans-unit id="e906c3cdb43d16bd2a2f35eccf263373e93c2a7f" translate="yes" xml:space="preserve">
          <source>We can use the &lt;code&gt;slice&lt;/code&gt; method of arrays, which like the other methods mentioned above is &quot;intentionally generic&quot; and so can be used with array-like objects, like this:</source>
          <target state="translated">Мы можем использовать метод слайсов массивов, который, как и другие методы, упомянутые выше, является &amp;laquo;преднамеренно родовым&amp;raquo; и поэтому может использоваться с объектами, похожими на массивы, например:</target>
        </trans-unit>
        <trans-unit id="ef4d47774a48af8c2dc4198f272524f303720ef0" translate="yes" xml:space="preserve">
          <source>Where &lt;code&gt;of&lt;/code&gt; avoids the oddities associated with &lt;code&gt;in&lt;/code&gt; and makes it work like the &lt;code&gt;for&lt;/code&gt; loop of any other language, and &lt;code&gt;let&lt;/code&gt; binds &lt;code&gt;i&lt;/code&gt; within the loop as opposed to within the function.</source>
          <target state="translated">Where &lt;code&gt;of&lt;/code&gt; избегает странностей, связанных с &lt;code&gt;in&lt;/code&gt; , и заставляет его работать как цикл &lt;code&gt;for&lt;/code&gt; любого другого языка, а &lt;code&gt;let&lt;/code&gt; связывает &lt;code&gt;i&lt;/code&gt; внутри цикла, а не внутри функции.</target>
        </trans-unit>
        <trans-unit id="941d4e5eb1ee2fa812450abac2b4faed7e49a69d" translate="yes" xml:space="preserve">
          <source>Where &lt;code&gt;theArray&lt;/code&gt; is my array, but this seems to be incorrect.</source>
          <target state="translated">Где &lt;code&gt;theArray&lt;/code&gt; - мой массив, но, похоже, это неверно.</target>
        </trans-unit>
        <trans-unit id="08b975222d1b83cf89b60a81d765397d2dc1159f" translate="yes" xml:space="preserve">
          <source>You access the current item by calling the iterator&amp;rsquo;s &lt;code&gt;next&lt;/code&gt; method. The next method will return the &lt;strong&gt;&lt;code&gt;value&lt;/code&gt;&lt;/strong&gt; of the current item and a &lt;strong&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/strong&gt; to indicate when you have reached the end of the collection. The following is an example of creating an iterator from an array.</source>
          <target state="translated">Вы получаете доступ к текущему элементу, вызывая &lt;code&gt;next&lt;/code&gt; метод итератора. Следующий метод вернет &lt;strong&gt; &lt;code&gt;value&lt;/code&gt; &lt;/strong&gt; текущего элемента и &lt;strong&gt; &lt;code&gt;boolean&lt;/code&gt; &lt;/strong&gt; чтобы указать, когда вы достигли конца коллекции. Ниже приведен пример создания итератора из массива.</target>
        </trans-unit>
        <trans-unit id="faf0a839383e9ca040f86c77bb8d78628ddab12a" translate="yes" xml:space="preserve">
          <source>You can also iterate over an array like this:</source>
          <target state="translated">Вы также можете выполнить итерацию по такому массиву:</target>
        </trans-unit>
        <trans-unit id="a99d0a423bd91c6ab11d1bbc2ecccf23c5be4af8" translate="yes" xml:space="preserve">
          <source>You can also transform your regular &lt;code&gt;array&lt;/code&gt; to an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators&quot;&gt;&lt;code&gt;iterator&lt;/code&gt;&lt;/a&gt; like this:</source>
          <target state="translated">Вы также можете преобразовать свой обычный &lt;code&gt;array&lt;/code&gt; в &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators&quot;&gt; &lt;code&gt;iterator&lt;/code&gt; &lt;/a&gt; например так:</target>
        </trans-unit>
        <trans-unit id="08ceb3749d20fa27c455e7e1a7300f32a149c3c7" translate="yes" xml:space="preserve">
          <source>You can also transform your regular array to iterator using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator&quot;&gt;&lt;code&gt;Symbol.iterator&lt;/code&gt;&lt;/a&gt; like this:</source>
          <target state="translated">Вы также можете преобразовать свой обычный массив в итератор, используя &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator&quot;&gt; &lt;code&gt;Symbol.iterator&lt;/code&gt; &lt;/a&gt; следующим образом:</target>
        </trans-unit>
        <trans-unit id="7f6f076641450693589f578d046aeeeb04ad8c10" translate="yes" xml:space="preserve">
          <source>You can call forEach like this:</source>
          <target state="translated">Ты можешь позвонить всем,как сейчас:</target>
        </trans-unit>
        <trans-unit id="8704a38dea0e6f3deb1af2a2e5fcf2aa68370fc9" translate="yes" xml:space="preserve">
          <source>You can get some performance optimisations by caching &lt;code&gt;myArray.length&lt;/code&gt; or iterating over it backwards.</source>
          <target state="translated">Вы можете оптимизировать производительность, кэшируя &lt;code&gt;myArray.length&lt;/code&gt; или перебирая его в обратном порядке.</target>
        </trans-unit>
        <trans-unit id="7623d5152acc3867d2222ce3eedc5c77ffbac5a8" translate="yes" xml:space="preserve">
          <source>You can read more about &lt;code&gt;iteration protocol&lt;/code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">Вы можете прочитать больше о &lt;code&gt;iteration protocol&lt;/code&gt; &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols&quot;&gt;здесь&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="28ce5baaf2a7e364a9e6393430ef2a639312b251" translate="yes" xml:space="preserve">
          <source>You can use:</source>
          <target state="translated">Ты можешь использовать:</target>
        </trans-unit>
        <trans-unit id="7d5badb0562b87f2a9430ec38445cdf3e13d52c2" translate="yes" xml:space="preserve">
          <source>You do not need to declare a temporary &lt;code&gt;len&lt;/code&gt; variable, or compare against &lt;code&gt;array.length&lt;/code&gt; on each iteration, either of which might be a minute optimisation.</source>
          <target state="translated">Вам не нужно объявлять временную переменную &lt;code&gt;len&lt;/code&gt; или сравнивать с &lt;code&gt;array.length&lt;/code&gt; на каждой итерации, что может быть минутной оптимизацией.</target>
        </trans-unit>
        <trans-unit id="021884629c616bb0e00f4dedc9401d5eeaae6b37" translate="yes" xml:space="preserve">
          <source>You have three options in &lt;a href=&quot;http://ecma-international.org/ecma-262/5.1/&quot;&gt;ECMAScript&amp;nbsp;5&lt;/a&gt; (&quot;ES5&quot;), the version most broadly supported at the moment, and two more added in &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/index.html&quot;&gt;ECMAScript&amp;nbsp;2015&lt;/a&gt; (&quot;ES2015&quot;, &quot;ES6&quot;):</source>
          <target state="translated">У вас есть три варианта в &lt;a href=&quot;http://ecma-international.org/ecma-262/5.1/&quot;&gt;ECMAScript 5&lt;/a&gt; (&amp;laquo;ES5&amp;raquo;), наиболее широко поддерживаемая на данный момент версия, и еще две, добавленные в &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/index.html&quot;&gt;ECMAScript 2015&lt;/a&gt; (&amp;laquo;ES2015&amp;raquo;, &amp;laquo;ES6&amp;raquo;):</target>
        </trans-unit>
        <trans-unit id="5baba5e2792c7b4a97eeca7d33b55e99ec8dd7bb" translate="yes" xml:space="preserve">
          <source>You will notice that &lt;code&gt;i--&lt;/code&gt; is the middle clause (where we usually see a comparison) and the last clause is empty (where we usually see &lt;code&gt;i++&lt;/code&gt;).  That means that &lt;code&gt;i--&lt;/code&gt; is also used as the &lt;em&gt;condition&lt;/em&gt; for continuation.  Crucially, it is executed and checked &lt;em&gt;before&lt;/em&gt; each iteration.</source>
          <target state="translated">Вы заметите, что &lt;code&gt;i--&lt;/code&gt; это среднее предложение (где мы обычно видим сравнение), а последнее предложение пустое (где мы обычно видим &lt;code&gt;i++&lt;/code&gt; ). Это означает, что &lt;code&gt;i--&lt;/code&gt; - также используется в качестве &lt;em&gt;условия&lt;/em&gt; для продолжения. Важно, что он выполняется и проверяется &lt;em&gt;перед&lt;/em&gt; каждой итерацией.</target>
        </trans-unit>
        <trans-unit id="1b92ca772f4a547ebbe1cecec130f971e1c7c39f" translate="yes" xml:space="preserve">
          <source>You wouldn't do that in inline code, of course. You'd write a utility function. Perhaps:</source>
          <target state="translated">Ты,конечно же,не сделаешь этого в строчном коде.Ты бы написал утилитную функцию.Возможно:</target>
        </trans-unit>
        <trans-unit id="5b72435b1a6e0292938c5e939f2b0c7c3502eb4e" translate="yes" xml:space="preserve">
          <source>You'll get people telling you to use &lt;code&gt;for-in&lt;/code&gt;, but &lt;a href=&quot;http://blog.niftysnippets.org/2010/11/myths-and-realities-of-forin.html&quot;&gt;that's not what &lt;code&gt;for-in&lt;/code&gt; is for&lt;/a&gt;. &lt;code&gt;for-in&lt;/code&gt; loops through the &lt;em&gt;enumerable properties of an object&lt;/em&gt;, not the indexes of an array. &lt;strong&gt;The order is not guaranteed&lt;/strong&gt;, not even in ES2015 (ES6). ES2015+ does define an order to object properties (via &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots-ownpropertykeys&quot;&gt;&lt;code&gt;[[OwnPropertyKeys]]&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots-enumerate&quot;&gt;&lt;code&gt;[[Enumerate]]&lt;/code&gt;&lt;/a&gt;, and things that use them like &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-object.getownpropertynames&quot;&gt;&lt;code&gt;Object.getOwnPropertyKeys&lt;/code&gt;&lt;/a&gt;), but it &lt;strong&gt;does not&lt;/strong&gt; define that &lt;code&gt;for-in&lt;/code&gt; will follow that order. (Details in &lt;a href=&quot;https://stackoverflow.com/a/30919039/157247&quot;&gt;this other answer&lt;/a&gt;.)</source>
          <target state="translated">Вы получите людей, говорящих вам использовать &lt;code&gt;for-in&lt;/code&gt; , но &lt;a href=&quot;http://blog.niftysnippets.org/2010/11/myths-and-realities-of-forin.html&quot;&gt;это не то, что &lt;code&gt;for-in&lt;/code&gt; для&lt;/a&gt; . &lt;code&gt;for-in&lt;/code&gt; перебирает &lt;em&gt;перечисляемые свойства объекта&lt;/em&gt; , а не индексы массива. &lt;strong&gt;Заказ не гарантирован&lt;/strong&gt; , даже в ES2015 (ES6). ES2015 + определяет порядок свойств объекта (через &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots-ownpropertykeys&quot;&gt; &lt;code&gt;[[OwnPropertyKeys]]&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots-enumerate&quot;&gt; &lt;code&gt;[[Enumerate]]&lt;/code&gt; &lt;/a&gt; и вещи, которые используют их, например, &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-object.getownpropertynames&quot;&gt; &lt;code&gt;Object.getOwnPropertyKeys&lt;/code&gt; &lt;/a&gt; ), но &lt;strong&gt;не&lt;/strong&gt; определяет, что &lt;code&gt;for-in&lt;/code&gt; будет следовать этому порядку. (Подробности в &lt;a href=&quot;https://stackoverflow.com/a/30919039/157247&quot;&gt;этом другом ответе&lt;/a&gt; .)</target>
        </trans-unit>
        <trans-unit id="589b6a96f50575d676fcf038d8105e7b1699be4a" translate="yes" xml:space="preserve">
          <source>You're using non-element properties and you want to include them in the loop</source>
          <target state="translated">Вы используете неэлементные свойства и хотите включить их в цикл.</target>
        </trans-unit>
        <trans-unit id="10d7cc4a29eba4f6a5a3ca2db2a762f5a236cc71" translate="yes" xml:space="preserve">
          <source>Your best bets are usually</source>
          <target state="translated">Ваши лучшие ставки обычно</target>
        </trans-unit>
        <trans-unit id="617846806ec9245ca6b1c7aac0723989e8f9ebee" translate="yes" xml:space="preserve">
          <source>a &lt;code&gt;for-of&lt;/code&gt; loop (ES2015+ only),</source>
          <target state="translated">петля &lt;code&gt;for-of&lt;/code&gt; - loop (только ES2015 +),</target>
        </trans-unit>
        <trans-unit id="6b50530706e59258d411002d89ae4b283301aabf" translate="yes" xml:space="preserve">
          <source>a simple old-fashioned &lt;code&gt;for&lt;/code&gt; loop,</source>
          <target state="translated">простой старомодный цикл,</target>
        </trans-unit>
        <trans-unit id="6f15cde32ab6efb43a1b5c9033caf63a6feb7401" translate="yes" xml:space="preserve">
          <source>browsers**</source>
          <target state="translated">browsers**</target>
        </trans-unit>
        <trans-unit id="5873f666d03fb3fb39d0db9c71b5e1f769334088" translate="yes" xml:space="preserve">
          <source>every</source>
          <target state="translated">every</target>
        </trans-unit>
        <trans-unit id="4bb4ca75941b7bbc5bc6a12be44b22fc9c8d234e" translate="yes" xml:space="preserve">
          <source>filter</source>
          <target state="translated">filter</target>
        </trans-unit>
        <trans-unit id="43eef9a62abb8b1e1654f8a890aae054abffa82b" translate="yes" xml:space="preserve">
          <source>for</source>
          <target state="translated">for</target>
        </trans-unit>
        <trans-unit id="edc5ee22beb2b82f4da41914d8d41cca9c53020f" translate="yes" xml:space="preserve">
          <source>forEach</source>
          <target state="translated">forEach</target>
        </trans-unit>
        <trans-unit id="dc06788092621528ed3f0618bc0b6f3c356aa9e7" translate="yes" xml:space="preserve">
          <source>jQuery way using &lt;code&gt;$.map&lt;/code&gt;:</source>
          <target state="translated">Способ jQuery с использованием &lt;code&gt;$.map&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="37745ed7a0f005fb14522c5cc7c1ba3d9e0df579" translate="yes" xml:space="preserve">
          <source>map</source>
          <target state="translated">map</target>
        </trans-unit>
        <trans-unit id="263cce6e93f37573f1e7fe24662cad3400cc887c" translate="yes" xml:space="preserve">
          <source>or &lt;code&gt;for-in&lt;/code&gt; with safeguards.</source>
          <target state="translated">или &lt;code&gt;for-in&lt;/code&gt; защиты.</target>
        </trans-unit>
        <trans-unit id="48c3689f6dd5e9e952f925b7ebebf64d7c43fc56" translate="yes" xml:space="preserve">
          <source>reduce</source>
          <target state="translated">reduce</target>
        </trans-unit>
        <trans-unit id="eb875812858d27b22cb2b75f992dffadc1b05c66" translate="yes" xml:space="preserve">
          <source>some</source>
          <target state="translated">some</target>
        </trans-unit>
        <trans-unit id="f13e27693c85aed522df8c3fcb0bb0110ca54e14" translate="yes" xml:space="preserve">
          <source>zip</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
