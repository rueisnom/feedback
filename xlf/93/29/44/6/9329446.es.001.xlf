<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/9329446">
    <body>
      <group id="9329446">
        <trans-unit id="407418523e4b6661ebd3d7c0977b4358422a77b7" translate="yes" xml:space="preserve">
          <source>&quot;Just do this to every item in the list, I don't care about the order!&quot;</source>
          <target state="translated">&quot;Sólo haz esto con cada artículo de la lista,¡no me importa el orden!&quot;</target>
        </trans-unit>
        <trans-unit id="828290fcafc33530b24d3d5dd4a9ad6ca15d4e08" translate="yes" xml:space="preserve">
          <source>(I couldn't find the equivalent verbiage in the ES2015 spec, but it's bound to still be the case.) Again, as of this writing the common host-provided array-like objects in modern browsers [&lt;code&gt;NodeList&lt;/code&gt; instances, for instance] &lt;strong&gt;do&lt;/strong&gt; handle &lt;code&gt;[[HasProperty]]&lt;/code&gt; correctly, but it's important to test.)</source>
          <target state="translated">(No pude encontrar el verborrea equivalente en la especificaci&amp;oacute;n ES2015, pero seguramente seguir&amp;aacute; siendo el caso). Una vez m&amp;aacute;s, al escribir esto, los objetos comunes tipo matriz proporcionados por el host en los navegadores modernos [instancias de &lt;code&gt;NodeList&lt;/code&gt; , por ejemplo] &lt;strong&gt;hacen&lt;/strong&gt; manejar &lt;code&gt;[[HasProperty]]&lt;/code&gt; correctamente, pero es importante probarlo)</target>
        </trans-unit>
        <trans-unit id="6b45776c77fb3cd134163e2ba508745f2d7fa17d" translate="yes" xml:space="preserve">
          <source>(If the discussion of intent makes no sense to you, then you and your code may benefit from watching Crockford's lecture on &lt;a href=&quot;https://www.youtube.com/watch?v=taaEzHI9xyY&amp;amp;t=480&quot;&gt;Programming Style &amp;amp; Your Brain&lt;/a&gt;.)</source>
          <target state="translated">(Si la discusi&amp;oacute;n sobre la intenci&amp;oacute;n no tiene sentido para usted, entonces usted y su c&amp;oacute;digo pueden beneficiarse al ver la conferencia de Crockford sobre &lt;a href=&quot;https://www.youtube.com/watch?v=taaEzHI9xyY&amp;amp;t=480&quot;&gt;Estilo de programaci&amp;oacute;n y su cerebro&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="4123820b5846a3f7526a13d056cd330d08a55f64" translate="yes" xml:space="preserve">
          <source>1. Use &lt;code&gt;forEach&lt;/code&gt; and related</source>
          <target state="translated">1. Uso para cada &lt;code&gt;forEach&lt;/code&gt; y relacionados</target>
        </trans-unit>
        <trans-unit id="5a308f239da9f276808356c1264e14c4f42dba7f" translate="yes" xml:space="preserve">
          <source>2. Use a simple &lt;code&gt;for&lt;/code&gt; loop</source>
          <target state="translated">2. Use un bucle &lt;code&gt;for&lt;/code&gt; simple</target>
        </trans-unit>
        <trans-unit id="5547e5e05c2ee31034d6e9a26818f942561707ff" translate="yes" xml:space="preserve">
          <source>3. Use &lt;code&gt;for-in&lt;/code&gt;&lt;em&gt;correctly&lt;/em&gt;</source>
          <target state="translated">3. Use &lt;code&gt;for-in&lt;/code&gt; &lt;em&gt;correctamente&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="799ce3e6b5064abe821148b3f183753446d2f3dc" translate="yes" xml:space="preserve">
          <source>4. Use &lt;code&gt;for-of&lt;/code&gt; (use an iterator implicitly) (ES2015+)</source>
          <target state="translated">4. Use &lt;code&gt;for-of&lt;/code&gt; (use un iterador impl&amp;iacute;citamente) (ES2015 +)</target>
        </trans-unit>
        <trans-unit id="219586416c25d4118e0031c2b8c71aae94dda23d" translate="yes" xml:space="preserve">
          <source>5. Use an iterator explicitly (ES2015+)</source>
          <target state="translated">5.Usar un iterador explícitamente (ES2015+)</target>
        </trans-unit>
        <trans-unit id="f808743c064b9869ab9f6547f7f8581b28fea109" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://codepen.io/Micka33/pen/nbyxf&quot;&gt;A CodePen example&lt;/a&gt; of how it works is:</source>
          <target state="translated">&lt;a href=&quot;http://codepen.io/Micka33/pen/nbyxf&quot;&gt;Un ejemplo&lt;/a&gt; de CodePen de c&amp;oacute;mo funciona es:</target>
        </trans-unit>
        <trans-unit id="fedd9eb5c4d04a7948778748c41299d24255d66b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach&quot;&gt;Documentation for native &lt;code&gt;Array.prototype.forEach()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach&quot;&gt;Documentaci&amp;oacute;n para &lt;code&gt;Array.prototype.forEach()&lt;/code&gt; nativo&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="33c4d33aaa1f39715e196efdb5603883d817169a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of&quot;&gt;for...of&lt;/a&gt; (MDN) describes the next way of iterating using &lt;code&gt;for (variable of object)&lt;/code&gt; as the part of the Harmony (ECMAScript&amp;nbsp;6) proposal.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of&quot;&gt;for ... of&lt;/a&gt; (MDN) describe la siguiente forma de iterar utilizando &lt;code&gt;for (variable of object)&lt;/code&gt; como parte de la propuesta de Harmony (ECMAScript 6).</target>
        </trans-unit>
        <trans-unit id="dd98744e853daba8a03a51ff44a45ab285ef96ac" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-array.prototype.every&quot;&gt;&lt;code&gt;every&lt;/code&gt;&lt;/a&gt; (stops looping the first time the callback returns &lt;code&gt;false&lt;/code&gt; or something falsey)</source>
          <target state="translated">&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-array.prototype.every&quot;&gt; &lt;code&gt;every&lt;/code&gt; &lt;/a&gt; (deja de repetirse la primera vez que la devoluci&amp;oacute;n de llamada devuelve &lt;code&gt;false&lt;/code&gt; o algo falso)</target>
        </trans-unit>
        <trans-unit id="1fe98b98ac1a303b3e5d9fe919c4bf1d837d054e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-array.prototype.filter&quot;&gt;&lt;code&gt;filter&lt;/code&gt;&lt;/a&gt; (creates a new array including elements where the filter function returns &lt;code&gt;true&lt;/code&gt; and omitting the ones where it returns &lt;code&gt;false&lt;/code&gt;)</source>
          <target state="translated">&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-array.prototype.filter&quot;&gt; &lt;code&gt;filter&lt;/code&gt; &lt;/a&gt; (crea una nueva matriz que incluye elementos donde la funci&amp;oacute;n de filtro devuelve &lt;code&gt;true&lt;/code&gt; y omite los que devuelve &lt;code&gt;false&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="dd4ceb819717bc057bb5f5be12b2dcaa00cc6d46" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-array.prototype.map&quot;&gt;&lt;code&gt;map&lt;/code&gt;&lt;/a&gt; (creates a new array from the values returned by the callback)</source>
          <target state="translated">&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-array.prototype.map&quot;&gt; &lt;code&gt;map&lt;/code&gt; &lt;/a&gt; (crea una nueva matriz a partir de los valores devueltos por la devoluci&amp;oacute;n de llamada)</target>
        </trans-unit>
        <trans-unit id="967df601fa043b4383889e2892717dd399d122d6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-array.prototype.reduce&quot;&gt;&lt;code&gt;reduce&lt;/code&gt;&lt;/a&gt; (builds up a value by repeatedly calling the callback, passing in previous values; see the spec for the details; useful for summing the contents of an array and many other things)</source>
          <target state="translated">&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-array.prototype.reduce&quot;&gt; &lt;code&gt;reduce&lt;/code&gt; &lt;/a&gt; (acumula un valor llamando repetidamente a la devoluci&amp;oacute;n de llamada, pasando valores anteriores; consulte las especificaciones para obtener detalles; &amp;uacute;til para sumar el contenido de una matriz y muchas otras cosas)</target>
        </trans-unit>
        <trans-unit id="cc8c405cc76a381935725e183d15ed035da147b4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-array.prototype.reduceright&quot;&gt;&lt;code&gt;reduceRight&lt;/code&gt;&lt;/a&gt; (like &lt;code&gt;reduce&lt;/code&gt;, but works in descending rather than ascending order)</source>
          <target state="translated">&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-array.prototype.reduceright&quot;&gt; &lt;code&gt;reduceRight&lt;/code&gt; &lt;/a&gt; (como &lt;code&gt;reduce&lt;/code&gt; , pero funciona en orden descendente en lugar de ascendente)</target>
        </trans-unit>
        <trans-unit id="adfd7ff17249a9d39816111c7afab18302df88c6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-array.prototype.some&quot;&gt;&lt;code&gt;some&lt;/code&gt;&lt;/a&gt; (stops looping the first time the callback returns &lt;code&gt;true&lt;/code&gt; or something truthy)</source>
          <target state="translated">&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-array.prototype.some&quot;&gt; &lt;code&gt;some&lt;/code&gt; &lt;/a&gt; (deja de repetirse la primera vez que la devoluci&amp;oacute;n de llamada devuelve &lt;code&gt;true&lt;/code&gt; o algo verdadero)</target>
        </trans-unit>
        <trans-unit id="377286bac8d6282390dfb096683ce2f568297474" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array#forEach&lt;/code&gt; (&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-array.prototype.foreach&quot;&gt;&lt;code&gt;spec&lt;/code&gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach&quot;&gt;&lt;code&gt;MDN&lt;/code&gt;&lt;/a&gt;) (or its relatives &lt;code&gt;some&lt;/code&gt; and such) (ES5+ only),</source>
          <target state="translated">&lt;code&gt;Array#forEach&lt;/code&gt; ( &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-array.prototype.foreach&quot;&gt; &lt;code&gt;spec&lt;/code&gt; &lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach&quot;&gt; &lt;code&gt;MDN&lt;/code&gt; &lt;/a&gt; ) (o sus familiares &lt;code&gt;some&lt;/code&gt; y similares) (solo ES5 +),</target>
        </trans-unit>
        <trans-unit id="d7e42662fabd1b4650592db96d131acd3a1e156b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array.from&lt;/code&gt; (ES2015+, but easily polyfilled) creates an array from an array-like object, optionally passing the entries through a mapping function first. So:</source>
          <target state="translated">&lt;code&gt;Array.from&lt;/code&gt; (ES2015 +, pero f&amp;aacute;cilmente rellenado) crea una matriz a partir de un objeto similar a una matriz, opcionalmente pasando primero las entradas a trav&amp;eacute;s de una funci&amp;oacute;n de mapeo. Entonces:</target>
        </trans-unit>
        <trans-unit id="b0e8f140b1faf7f02335c4444e052df5049591e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;angular.forEach&lt;/code&gt; takes 2 arguments and an optional third argument. The first argument is the object (array) to iterate over, the second argument is the iterator function, and the optional third argument is the object context (basically referred to inside the loop as 'this'.</source>
          <target state="translated">&lt;code&gt;angular.forEach&lt;/code&gt; toma 2 argumentos y un tercer argumento opcional. El primer argumento es el objeto (matriz) para iterar, el segundo argumento es la funci&amp;oacute;n iteradora, y el tercer argumento opcional es el contexto del objeto (b&amp;aacute;sicamente denominado dentro del bucle como 'esto'.</target>
        </trans-unit>
        <trans-unit id="9a8d763ba59a05f954f7c48ce76ecba0f7d62607" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;entries()&lt;/code&gt;: Returns an iterator where each &lt;code&gt;value&lt;/code&gt; is an array in the form &lt;code&gt;[key, value]&lt;/code&gt; for that iteration.</source>
          <target state="translated">&lt;code&gt;entries()&lt;/code&gt; : Devuelve un iterador donde cada &lt;code&gt;value&lt;/code&gt; es una matriz en la forma &lt;code&gt;[key, value]&lt;/code&gt; para esa iteraci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="b4cbd4974267f738d1be9503fdb7ebf5943cbd34" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;for-in&lt;/code&gt; with the same safeguards as with an array should work with array-like objects as well; the caveat for host-provided objects on #1 above may apply.</source>
          <target state="translated">&lt;code&gt;for-in&lt;/code&gt; con las mismas garant&amp;iacute;as que con una matriz tambi&amp;eacute;n deber&amp;iacute;a funcionar con objetos similares a una matriz; se puede aplicar la advertencia para los objetos proporcionados por el host en el n. &amp;deg; 1 anterior.</target>
        </trans-unit>
        <trans-unit id="9b9fa350aa7ed228cd4b3e93d0298f289edbbed8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;for-of&lt;/code&gt; will use the iterator provided by the object (if any); we'll have to see how this plays with the various array-like objects, particularly host-provided ones. For instance, the specification for the &lt;code&gt;NodeList&lt;/code&gt; from &lt;code&gt;querySelectorAll&lt;/code&gt; was updated to support iteration. The spec for the &lt;code&gt;HTMLCollection&lt;/code&gt; from &lt;code&gt;getElementsByTagName&lt;/code&gt; was not.</source>
          <target state="translated">&lt;code&gt;for-of&lt;/code&gt; usar&amp;aacute; el iterador proporcionado por el objeto (si lo hay); Tendremos que ver c&amp;oacute;mo esto juega con los diversos objetos de tipo matriz, particularmente los proporcionados por el host. Por ejemplo, la especificaci&amp;oacute;n para &lt;code&gt;NodeList&lt;/code&gt; de &lt;code&gt;querySelectorAll&lt;/code&gt; se actualiz&amp;oacute; para admitir la iteraci&amp;oacute;n. La especificaci&amp;oacute;n para la &lt;code&gt;HTMLCollection&lt;/code&gt; de &lt;code&gt;getElementsByTagName&lt;/code&gt; no era.</target>
        </trans-unit>
        <trans-unit id="04cdb28da8f19e68125e4596f8a56b848aec15ff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forEach&lt;/code&gt; accepts a callback function and, optionally, a value to use as &lt;code&gt;this&lt;/code&gt; when calling that callback (not used above). The callback is called for each entry in the array, in order, skipping non-existent entries in sparse arrays. Although I only used one argument above, the callback is called with three: The value of each entry, the index of that entry, and a reference to the array you're iterating over (in case your function doesn't already have it handy).</source>
          <target state="translated">&lt;code&gt;forEach&lt;/code&gt; acepta una funci&amp;oacute;n de devoluci&amp;oacute;n de llamada y, opcionalmente, un valor para usar como &lt;code&gt;this&lt;/code&gt; al llamar a esa devoluci&amp;oacute;n de llamada (no se utiliza anteriormente). Se llama a la devoluci&amp;oacute;n de llamada para cada entrada en la matriz, en orden, omitiendo las entradas inexistentes en matrices dispersas. Aunque solo utilic&amp;eacute; un argumento anterior, la devoluci&amp;oacute;n de llamada se llama con tres: el valor de cada entrada, el &amp;iacute;ndice de esa entrada y una referencia a la matriz sobre la que est&amp;aacute; iterando (en caso de que su funci&amp;oacute;n no lo tenga a mano) )</target>
        </trans-unit>
        <trans-unit id="10cc3315d863ec1f2a75337ba363aaa39af9ff7b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forEach&lt;/code&gt; has the benefit that you don't have to declare indexing and value variables in the containing scope, as they're supplied as arguments to the iteration function, and so nicely scoped to just that iteration.</source>
          <target state="translated">&lt;code&gt;forEach&lt;/code&gt; tiene el beneficio de que no tiene que declarar las variables de indexaci&amp;oacute;n y valor en el &amp;aacute;mbito que lo contiene, ya que se proporcionan como argumentos para la funci&amp;oacute;n de iteraci&amp;oacute;n, y se enfocan tan bien en esa iteraci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="d31603bd232d66e37b18d7476c0486024b09c2d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forEach&lt;/code&gt; will iterate over the array you provide and for each iteration it will have &lt;code&gt;element&lt;/code&gt; which holds the value of that iteration. If you need index you can get the current index by passing the &lt;code&gt;i&lt;/code&gt; as the second parameter in the callback function for forEach.</source>
          <target state="translated">&lt;code&gt;forEach&lt;/code&gt; iterar&amp;aacute; sobre la matriz que proporcione y para cada iteraci&amp;oacute;n tendr&amp;aacute; un &lt;code&gt;element&lt;/code&gt; o que contenga el valor de esa iteraci&amp;oacute;n. Si necesita un &amp;iacute;ndice, puede obtener el &amp;iacute;ndice actual pasando el &lt;code&gt;i&lt;/code&gt; como el segundo par&amp;aacute;metro en la funci&amp;oacute;n de devoluci&amp;oacute;n de llamada para forEach.</target>
        </trans-unit>
        <trans-unit id="a637b50b32f61aa2eb966f27cbab468a25797cfb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;keys()&lt;/code&gt;: Returns an iterator where each &lt;code&gt;value&lt;/code&gt; is the key for that iteration (so for our &lt;code&gt;a&lt;/code&gt; above, that would be &lt;code&gt;&quot;0&quot;&lt;/code&gt;, then &lt;code&gt;&quot;1&quot;&lt;/code&gt;, then &lt;code&gt;&quot;2&quot;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;keys()&lt;/code&gt; : Devuelve un iterador donde cada &lt;code&gt;value&lt;/code&gt; es la clave para esa iteraci&amp;oacute;n (por lo tanto, para nuestro &lt;code&gt;a&lt;/code&gt; anterior, ser&amp;iacute;a &lt;code&gt;&quot;0&quot;&lt;/code&gt; , luego &lt;code&gt;&quot;1&quot;&lt;/code&gt; , luego &lt;code&gt;&quot;2&quot;&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="e09aa066919616abd8401c1b7f350a3988032555" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;values()&lt;/code&gt;: This is the one I used above. It returns an iterator where each &lt;code&gt;value&lt;/code&gt; is the array entry for that iteration (&lt;code&gt;&quot;a&quot;&lt;/code&gt;, &lt;code&gt;&quot;b&quot;&lt;/code&gt;, and &lt;code&gt;&quot;c&quot;&lt;/code&gt; in the example earlier).</source>
          <target state="translated">&lt;code&gt;values()&lt;/code&gt; : este es el que utilic&amp;eacute; anteriormente. Devuelve un iterador donde cada &lt;code&gt;value&lt;/code&gt; es la entrada de matriz para esa iteraci&amp;oacute;n ( &lt;code&gt;&quot;a&quot;&lt;/code&gt; , &lt;code&gt;&quot;b&quot;&lt;/code&gt; y &lt;code&gt;&quot;c&quot;&lt;/code&gt; en el ejemplo anterior).</target>
        </trans-unit>
        <trans-unit id="b95a3bad9c3b12555c2a9ef69ef39152f687a5c6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; will contain the last value of &lt;code&gt;y&lt;/code&gt; and it will be removed from the array. You can also use &lt;code&gt;shift()&lt;/code&gt; which will give and remove the first item from &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; contendr&amp;aacute; el &amp;uacute;ltimo valor de &lt;code&gt;y&lt;/code&gt; y se eliminar&amp;aacute; de la matriz. Tambi&amp;eacute;n puede usar &lt;code&gt;shift()&lt;/code&gt; que dar&amp;aacute; y eliminar&amp;aacute; el primer elemento de &lt;code&gt;y&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="94d62988ff95e5983c9bb7336fe74b54beb70d31" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Credits go to WYL for showing me the benefits and horrors of the reverse for loop.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Los cr&amp;eacute;ditos van a WYL por mostrarme los beneficios y los horrores del bucle inverso.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5ebe32016513b7b36eecf84f088911eaffc1e16a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;A&lt;/strong&gt; - &lt;code&gt;for&lt;/code&gt; tests</source>
          <target state="translated">&lt;strong&gt;A&lt;/strong&gt; - &lt;code&gt;for&lt;/code&gt; pruebas</target>
        </trans-unit>
        <trans-unit id="9e681feccaa2f651d3f5e876dbe2e319c1d67118" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Array with 1,000,000 elements&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Matriz con 1,000,000 de elementos&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3255bc6f4f9492d8559a38233f24c1a81f7a3679" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Array with 10 elements&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Matriz con 10 elementos.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1730cb94cc2840238efe2ab02609e1acbb5d7877" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Array.forEach()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Array.forEach()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9f9864972c7c592b5676161c6e60aa0f51041edc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;As of ECMAScript&amp;nbsp;6:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;A partir de ECMAScript 6:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="366729cb2dd9643a7a37c411a6350e8f3239e9fe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;B&lt;/strong&gt; - &lt;code&gt;while&lt;/code&gt; tests</source>
          <target state="translated">&lt;strong&gt;B&lt;/strong&gt; - &lt;code&gt;while&lt;/code&gt; pruebas</target>
        </trans-unit>
        <trans-unit id="330f92001b0c02491afac466730ba9e45d684ab4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;C&lt;/strong&gt; - other/alternative methods</source>
          <target state="translated">&lt;strong&gt;C&lt;/strong&gt; - otros / m&amp;eacute;todos alternativos</target>
        </trans-unit>
        <trans-unit id="1a68ce6032c3740fd013d6c9b66b882246d9cf06" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Cons:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Cons:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="caf1f7a722c982dbd57c57da6fb19a30c4de09b0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Cons&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Cons&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="66201f31a06924bccc5252ec818cb13549b146b6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Cross browser results&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Resultados cruzados del navegador&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="750c1a011ed83068ce4b750427dca4f8195eb051" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;EDIT :&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;EDITAR:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="40f5fee30dbaa97b495918cfcda19fd49d758e20" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example #1&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Ejemplo 1&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="184138f36fc9d5f1b134435fd6400d89d5dd3ef7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example #2&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Ejemplo # 2&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fbf2341d370757e8b1e3d68104c67efff5070bbd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example #3&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Ejemplo # 3&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cc261b2aaea005d1254afb5ea26e11f1deea56b1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example #4&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Ejemplo # 4&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="076cc797a53b7cb38c7bf05c97b94635f200c2e3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 1:&lt;/strong&gt; Normal &lt;code&gt;for...of&lt;/code&gt; loop - no tricks here.</source>
          <target state="translated">&lt;strong&gt;Ejemplo 1:&lt;/strong&gt; Normal &lt;code&gt;for...of&lt;/code&gt; bucle: no hay trucos aqu&amp;iacute;.</target>
        </trans-unit>
        <trans-unit id="49d9fa2400580995d7bae707d928b0d3821aa741" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 2:&lt;/strong&gt; Split words to characters</source>
          <target state="translated">&lt;strong&gt;Ejemplo 2:&lt;/strong&gt; dividir palabras en caracteres</target>
        </trans-unit>
        <trans-unit id="bdc1592f5ce50edf5193207a1607a8801ea11f33" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 3:&lt;/strong&gt; Looping with a &lt;code&gt;key&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;Ejemplo 3:&lt;/strong&gt; bucle con una &lt;code&gt;key&lt;/code&gt; y &lt;code&gt;value&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="78871da32ac6a0f7f115cb0b01a332656d6a8904" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 4:&lt;/strong&gt; Get object properties inline</source>
          <target state="translated">&lt;strong&gt;Ejemplo 4:&lt;/strong&gt; obtener las propiedades del objeto en l&amp;iacute;nea</target>
        </trans-unit>
        <trans-unit id="e558c5c128ffa4a0403278ee644502849ef174b8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 5:&lt;/strong&gt; Get deep object properties of what you need</source>
          <target state="translated">&lt;strong&gt;Ejemplo 5:&lt;/strong&gt; Obtenga propiedades de objetos profundos de lo que necesita</target>
        </trans-unit>
        <trans-unit id="0a55d796f49ed376bbdc8b840ed3ffef75a362c5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 6:&lt;/strong&gt; Is &lt;strong&gt;Example 3&lt;/strong&gt; used with &lt;code&gt;.forEach&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;Ejemplo 6:&lt;/strong&gt; &amp;iquest;Se utiliza el &lt;strong&gt;ejemplo 3&lt;/strong&gt; con &lt;code&gt;.forEach&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1c576ad032b24d44f329a8bbbc699e346dfa84e2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 7:&lt;/strong&gt; Is &lt;strong&gt;Example 4&lt;/strong&gt; used with &lt;code&gt;.forEach&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;Ejemplo 7:&lt;/strong&gt; se utiliza el &lt;strong&gt;ejemplo 4&lt;/strong&gt; con &lt;code&gt;.forEach&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="28f415a0afa402f72563bd9599b6360f208f4e2d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 8:&lt;/strong&gt; Is &lt;strong&gt;Example 5&lt;/strong&gt; used with &lt;code&gt;.forEach&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;Ejemplo 8:&lt;/strong&gt; se utiliza el &lt;strong&gt;ejemplo 5&lt;/strong&gt; con &lt;code&gt;.forEach&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4ce5e7fbb73dac5a612d22d4d58fd1306ab12eaa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Examples 6, 7, and 8&lt;/strong&gt; can be used with any functional loops like &lt;code&gt;.map&lt;/code&gt;, &lt;code&gt;.filter&lt;/code&gt;, &lt;code&gt;.reduce&lt;/code&gt;, &lt;code&gt;.sort&lt;/code&gt;, &lt;code&gt;.every&lt;/code&gt;, &lt;code&gt;.some&lt;/code&gt;. For more information about these methods, check out the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array&quot;&gt;Array Object&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;Los ejemplos 6, 7 y 8&lt;/strong&gt; se pueden usar con cualquier bucle funcional como &lt;code&gt;.map&lt;/code&gt; , &lt;code&gt;.filter&lt;/code&gt; , &lt;code&gt;.reduce&lt;/code&gt; , &lt;code&gt;.sort&lt;/code&gt; , .every , .some . Para obtener m&amp;aacute;s informaci&amp;oacute;n sobre estos m&amp;eacute;todos, consulte el &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array&quot;&gt;objeto Array&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ea72b87b0bf2ace83cf5109381e93aeb066f2f76" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Examples of usage:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Ejemplos de uso:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1b7b6fbb391b39121d3090835b1a7d329182a66c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Functional loops&lt;/strong&gt; - &lt;code&gt;forEach&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, also &lt;code&gt;reduce&lt;/code&gt; (they loop through the function, but they are used if you need to do something with your array, etc.</source>
          <target state="translated">&lt;strong&gt;Bucles funcionales&lt;/strong&gt; : para &lt;code&gt;forEach&lt;/code&gt; , &lt;code&gt;map&lt;/code&gt; a , &lt;code&gt;filter&lt;/code&gt; , tambi&amp;eacute;n &lt;code&gt;reduce&lt;/code&gt; n (recorren la funci&amp;oacute;n, pero se utilizan si necesita hacer algo con su matriz, etc.</target>
        </trans-unit>
        <trans-unit id="32fac35272abae62a061520fb1a2f945a7607806" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;How can it start at &lt;code&gt;array.length&lt;/code&gt; without exploding?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&amp;iquest;C&amp;oacute;mo puede comenzar en &lt;code&gt;array.length&lt;/code&gt; sin explotar?&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b91663c8ee6622d139ccbcbdd48f45d5a5186122" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;NOTE&lt;/strong&gt;:</target>
        </trans-unit>
        <trans-unit id="9df17e3bf34872a611d0e519ed5573d79bc888bc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This answer is hopelessly out-of-date. For a more modern approach, look at &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array&quot;&gt;the methods available on an array&lt;/a&gt;. Methods of interest might be:</source>
          <target state="translated">&lt;strong&gt;Nota&lt;/strong&gt; : esta respuesta est&amp;aacute; irremediablemente desactualizada. Para un enfoque m&amp;aacute;s moderno, mire &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array&quot;&gt;los m&amp;eacute;todos disponibles en una matriz&lt;/a&gt; . Los m&amp;eacute;todos de inter&amp;eacute;s pueden ser:</target>
        </trans-unit>
        <trans-unit id="7e3161fd669d07159e3a7475c999f77628c85246" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Pros:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Pros:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="364d4fdee3e0bca52971cff9ce11bfd5c1cd8d29" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Pros&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Pros&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0012595d3c17367fbb2f7b33de7378b0b6ab7340" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Removing siblings&lt;/strong&gt; from the DOM in reverse order is usually &lt;strong&gt;more efficient&lt;/strong&gt;.  (The browser needs to do less shifting of elements in its internal arrays.)</source>
          <target state="translated">&lt;strong&gt;Eliminar hermanos&lt;/strong&gt; del DOM en orden inverso suele ser &lt;strong&gt;m&amp;aacute;s eficiente&lt;/strong&gt; . (El navegador necesita hacer menos desplazamiento de elementos en sus matrices internas).</target>
        </trans-unit>
        <trans-unit id="284c0cc1c16634ee278d62d9da4d70563394d278" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;TL;DR&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;TL;DR&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="07ae7a0c45d54d2ebb1dc0cd4ec4001979bca9ef" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax&quot;&gt;spread syntax (&lt;code&gt;...&lt;/code&gt;)&lt;/a&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Utilice la &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax&quot;&gt;sintaxis de propagaci&amp;oacute;n ( &lt;code&gt;...&lt;/code&gt; )&lt;/a&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4022df37529f9de6389e8b44f78656816e01d469" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Use &lt;code&gt;Array.from&lt;/code&gt;&lt;/strong&gt;&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-array.from&quot;&gt;(spec)&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from&quot;&gt;(MDN)&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;Utilice &lt;code&gt;Array.from&lt;/code&gt; &lt;/strong&gt; &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-array.from&quot;&gt;(spec)&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from&quot;&gt;(MDN)&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="46eac7e8f751f6f37b8572993152b573d2db8084" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Use &lt;code&gt;for-in&lt;/code&gt; &lt;em&gt;correctly&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Usar &lt;code&gt;for-in&lt;/code&gt; &lt;em&gt;correctamente&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d283294cac8da6d79925867e0ba6a307ede498df" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Use &lt;code&gt;for-of&lt;/code&gt; (use an iterator implicitly) (ES2015+)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Use &lt;code&gt;for-of&lt;/code&gt; (use un iterador impl&amp;iacute;citamente) (ES2015 +)&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0bd126a72acb2ecb3b1451e2659a42fd39e32809" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Use &lt;code&gt;forEach&lt;/code&gt; and related (ES5+)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Uso para cada &lt;code&gt;forEach&lt;/code&gt; y relacionados (ES5 +)&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fb2d92cc11b7a9d0aca33182e1bebdf4c726208b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Use a simple &lt;code&gt;for&lt;/code&gt; loop&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Use un bucle simple &lt;code&gt;for&lt;/code&gt; &lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6f71bc706ab4a26bf9a13464f7b39c3aeaed0e52" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Use an iterator explicitly (ES2015+)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Use un iterador expl&amp;iacute;citamente (ES2015 +)&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1c4b03a035270e1b8f7dd2084f9df26df262debc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Use the &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-array.prototype.slice&quot;&gt;&lt;code&gt;slice&lt;/code&gt;&lt;/a&gt; method of arrays&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Use el m&amp;eacute;todo de &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-array.prototype.slice&quot;&gt; &lt;code&gt;slice&lt;/code&gt; &lt;/a&gt; de matrices&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8aa2a7263e5c604aa1227ef93fc167e49c67b84c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Using loops with ECMAScript&amp;nbsp;6  &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment&quot;&gt;destructuring&lt;/a&gt; and the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax&quot;&gt;spread operator&lt;/a&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Uso de bucles con la &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment&quot;&gt;desestructuraci&amp;oacute;n&lt;/a&gt; de ECMAScript 6 y el &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax&quot;&gt;operador de propagaci&amp;oacute;n&lt;/a&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="43d6f90660b9cfa169cfb55c0d5f5781ab586f65" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why doesn't it stop iterating before index 0?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&amp;iquest;Por qu&amp;eacute; no deja de iterar antes del &amp;iacute;ndice 0?&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5c7882bff3bd32e131ca75ee9b3310dc89ce137d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;do...while loops&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;hacer ... mientras bucles&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="292b6043564aae6314fc4949f7b4dc07ffca89f2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;do/while&lt;/strong&gt; - also loop through a block of code while the condition is true, will run at least one time</source>
          <target state="translated">&lt;strong&gt;do / while&lt;/strong&gt; : tambi&amp;eacute;n recorre un bloque de c&amp;oacute;digo mientras la condici&amp;oacute;n es verdadera, se ejecutar&amp;aacute; al menos una vez</target>
        </trans-unit>
        <trans-unit id="59c2e1f4757834d90e32b8228c2ca6efbcc623e0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;every&lt;/strong&gt; - Returns true or false if all the elements in the array pass the test in the callback function.</source>
          <target state="translated">&lt;strong&gt;cada&lt;/strong&gt; - Devuelve verdadero o falso si todos los elementos de la matriz pasan la prueba en la funci&amp;oacute;n de devoluci&amp;oacute;n de llamada.</target>
        </trans-unit>
        <trans-unit id="733d7f1b168a00ba327543b1d4fe7a84e1c306f1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;filter&lt;/strong&gt; - Very similar to every except that filter returns an array with the elements that return true to the given function.</source>
          <target state="translated">&lt;strong&gt;filtro&lt;/strong&gt; : muy similar a todos excepto que el filtro devuelve una matriz con los elementos que devuelven verdadero a la funci&amp;oacute;n dada.</target>
        </trans-unit>
        <trans-unit id="271fc1eae66abadd19acb62d4033231ca149cfff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;for loops&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;para bucles&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6730b771cabf57b04de93a3724c66df24b945a65" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;for...in loops&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;para ... en bucles&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="41a75d50cd0e008efc00bd22fdc7462386f2f0fc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;for...of loops&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;para ... de bucles&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2573e11cf7374a0bd5806f17739331b98d97a3d5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;for&lt;/strong&gt; - it's &lt;strong&gt;the most common one&lt;/strong&gt;. Full block of code for looping</source>
          <target state="translated">&lt;strong&gt;para&lt;/strong&gt; - es &lt;strong&gt;el m&amp;aacute;s com&amp;uacute;n&lt;/strong&gt; . Bloque completo de c&amp;oacute;digo para bucle</target>
        </trans-unit>
        <trans-unit id="bf96d036e4a3af64d225f756d7cdb14e19eaa0d9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;forEach&lt;/strong&gt; - Iterates through every item in the array and do whatever you need with each item.</source>
          <target state="translated">&lt;strong&gt;forEach&lt;/strong&gt; : repite cada elemento de la matriz y hace lo que sea necesario con cada elemento.</target>
        </trans-unit>
        <trans-unit id="ea31da07d585b6c78298f66e4e1cab0b4bf164cb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;map&lt;/strong&gt; - It creates a new array with the result of the callback function. This method is good to be used when you need to format the elements of your array.</source>
          <target state="translated">&lt;strong&gt;map&lt;/strong&gt; : crea una nueva matriz con el resultado de la funci&amp;oacute;n de devoluci&amp;oacute;n de llamada. Este m&amp;eacute;todo es bueno para usar cuando necesita formatear los elementos de su matriz.</target>
        </trans-unit>
        <trans-unit id="1d2abe3d817566b9ac069c513ac4125616984176" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;reduce&lt;/strong&gt; - As the name says, it reduces the array to a single value by calling the given function passing in the current element and the result of the previous execution.</source>
          <target state="translated">&lt;strong&gt;reducir&lt;/strong&gt; : como su nombre lo indica, reduce la matriz a un solo valor llamando a la funci&amp;oacute;n dada que pasa en el elemento actual y el resultado de la ejecuci&amp;oacute;n anterior.</target>
        </trans-unit>
        <trans-unit id="bc7cb0747f251ea37bf8ac12f021c5f51bc464ee" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;while loops&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;mientras bucles&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d59bd2da691ba295b8e0f0e005203a04e318b82d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;while&lt;/strong&gt; - loop while a condition is through. It seems to be the fastest loop</source>
          <target state="translated">&lt;strong&gt;while&lt;/strong&gt; : bucle mientras se cumple una condici&amp;oacute;n. Parece ser el ciclo m&amp;aacute;s r&amp;aacute;pido</target>
        </trans-unit>
        <trans-unit id="98ac7d9be42d78332ce549839259a6fa839e83f9" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;forEach&lt;/strong&gt; implementation (&lt;a href=&quot;http://jsfiddle.net/nmoliveira/zNsyB/&quot;&gt;see in jsFiddle&lt;/a&gt;):</source>
          <target state="translated">Una implementaci&amp;oacute;n &lt;strong&gt;forEach&lt;/strong&gt; ( &lt;a href=&quot;http://jsfiddle.net/nmoliveira/zNsyB/&quot;&gt;ver en jsFiddle&lt;/a&gt; ):</target>
        </trans-unit>
        <trans-unit id="1593b174e119f27794747b6ca100ac5339012c07" translate="yes" xml:space="preserve">
          <source>A way closest to your idea would be to use &lt;code&gt;Array.forEach()&lt;/code&gt; which accepts a closure function which will be executed for each element of the array.</source>
          <target state="translated">Una forma m&amp;aacute;s cercana a su idea ser&amp;iacute;a utilizar &lt;code&gt;Array.forEach()&lt;/code&gt; que acepta una funci&amp;oacute;n de cierre que se ejecutar&amp;aacute; para cada elemento de la matriz.</target>
        </trans-unit>
        <trans-unit id="461621dddb84f5684403289120de177b2681c313" translate="yes" xml:space="preserve">
          <source>Additionally, &lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript#ECMAScript.2C_5th_Edition&quot;&gt;ECMAScript 5&lt;/a&gt; has added a &lt;a href=&quot;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/forEach&quot;&gt;&lt;code&gt;forEach&lt;/code&gt;&lt;/a&gt; method to &lt;code&gt;Array.prototype&lt;/code&gt; which can be used to enumerate over an array using a calback (the polyfill is in the docs so you can still use it for older browsers):</source>
          <target state="translated">Adem&amp;aacute;s, &lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript#ECMAScript.2C_5th_Edition&quot;&gt;ECMAScript 5&lt;/a&gt; ha agregado un m&amp;eacute;todo &lt;a href=&quot;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/forEach&quot;&gt; &lt;code&gt;forEach&lt;/code&gt; &lt;/a&gt; a &lt;code&gt;Array.prototype&lt;/code&gt; que se puede usar para enumerar sobre una matriz usando un calback (el polyfill est&amp;aacute; en los documentos, por lo que a&amp;uacute;n puede usarlo para navegadores m&amp;aacute;s antiguos):</target>
        </trans-unit>
        <trans-unit id="636fc2fec13e68630984c3473aa5d7f358f03d69" translate="yes" xml:space="preserve">
          <source>Additionally, &lt;code&gt;forEach&lt;/code&gt; is the &quot;loop through them all&quot; function, but ES5 defined several other useful &quot;work your way through the array and do things&quot; functions, including:</source>
          <target state="translated">Adem&amp;aacute;s, &lt;code&gt;forEach&lt;/code&gt; es la funci&amp;oacute;n de &quot;recorrer a trav&amp;eacute;s de todos&quot;, pero ES5 defini&amp;oacute; varias otras funciones &amp;uacute;tiles de &quot;trabajar a trav&amp;eacute;s de la matriz y hacer cosas&quot;, que incluyen:</target>
        </trans-unit>
        <trans-unit id="c9f143cb14712f08a4e4970f0a574a82e563a424" translate="yes" xml:space="preserve">
          <source>Advantages:</source>
          <target state="translated">Advantages:</target>
        </trans-unit>
        <trans-unit id="de209c6ef85b78db6e703d44fe0a792cf0cf2d79" translate="yes" xml:space="preserve">
          <source>Although the performance gains are usually insignificant, it sort of screams:</source>
          <target state="translated">Aunque las ganancias de rendimiento suelen ser insignificantes,es una especie de grito:</target>
        </trans-unit>
        <trans-unit id="41e3fc9478f9b0602ab804e2073a64ab781383e9" translate="yes" xml:space="preserve">
          <source>An easy solution now would be to use the &lt;a href=&quot;https://en.wikipedia.org/wiki/Underscore.js&quot;&gt;underscore.js library&lt;/a&gt;. It's providing many useful tools, such as &lt;code&gt;each&lt;/code&gt; and will automatically delegate the job to the native &lt;code&gt;forEach&lt;/code&gt; if available.</source>
          <target state="translated">Una soluci&amp;oacute;n f&amp;aacute;cil ahora ser&amp;iacute;a usar la &lt;a href=&quot;https://en.wikipedia.org/wiki/Underscore.js&quot;&gt;biblioteca underscore.js&lt;/a&gt; . Proporciona muchas herramientas &amp;uacute;tiles, como &lt;code&gt;each&lt;/code&gt; y delegar&amp;aacute; autom&amp;aacute;ticamente el trabajo al nativo para cada &lt;code&gt;forEach&lt;/code&gt; si est&amp;aacute; disponible.</target>
        </trans-unit>
        <trans-unit id="76134101719fc71647c5e2d29cf268ee6974b9a0" translate="yes" xml:space="preserve">
          <source>And finally the first 20 blue p tags are changed to green</source>
          <target state="translated">Y finalmente las primeras 20 etiquetas p azules se cambian a verdes</target>
        </trans-unit>
        <trans-unit id="286bb782ad24f006d5ef3df1b25f01bf4ccf96dd" translate="yes" xml:space="preserve">
          <source>And furthermore &lt;code&gt;await&lt;/code&gt;&lt;a href=&quot;https://gist.github.com/joeytwiddle/37d2085425c049629b80956d3c618971&quot;&gt;does not work&lt;/a&gt; inside &lt;code&gt;forEach()&lt;/code&gt;.  Using &lt;code&gt;for..of&lt;/code&gt; is &lt;a href=&quot;https://github.com/airbnb/javascript/issues/1122#issuecomment-259876436&quot;&gt;the clearest pattern&lt;/a&gt; in this case.</source>
          <target state="translated">Y adem&amp;aacute;s &lt;code&gt;await&lt;/code&gt; &lt;a href=&quot;https://gist.github.com/joeytwiddle/37d2085425c049629b80956d3c618971&quot;&gt;no funciona&lt;/a&gt; dentro de &lt;code&gt;forEach()&lt;/code&gt; . Usar &lt;code&gt;for..of&lt;/code&gt; es &lt;a href=&quot;https://github.com/airbnb/javascript/issues/1122#issuecomment-259876436&quot;&gt;el patr&amp;oacute;n m&amp;aacute;s claro&lt;/a&gt; en este caso.</target>
        </trans-unit>
        <trans-unit id="e2635b275be0c2dfc38d57182a9f17df25ac0fd4" translate="yes" xml:space="preserve">
          <source>And if you want it to be a function, you can do this:</source>
          <target state="translated">Y si quieres que sea una función,puedes hacer esto:</target>
        </trans-unit>
        <trans-unit id="aa47cb48e650e1ab26dbe126a4f7ec3d29c4aae4" translate="yes" xml:space="preserve">
          <source>And there are many others for iteration.</source>
          <target state="translated">Y hay muchos otros para la iteración.</target>
        </trans-unit>
        <trans-unit id="cd8096180abe912c76cb829baeb8776e4097989f" translate="yes" xml:space="preserve">
          <source>And when you do that, not just &lt;code&gt;value&lt;/code&gt; but also &lt;code&gt;index&lt;/code&gt; is recreated for each loop iteration, meaning closures created in the loop body keep a reference to the &lt;code&gt;index&lt;/code&gt; (and &lt;code&gt;value&lt;/code&gt;) created for that specific iteration:</source>
          <target state="translated">Y cuando hace eso, no solo se recrea el &lt;code&gt;value&lt;/code&gt; sino tambi&amp;eacute;n el &lt;code&gt;index&lt;/code&gt; para cada iteraci&amp;oacute;n del bucle, lo que significa que los cierres creados en el cuerpo del bucle mantienen una referencia al &lt;code&gt;index&lt;/code&gt; (y &lt;code&gt;value&lt;/code&gt; ) creado para esa iteraci&amp;oacute;n espec&amp;iacute;fica:</target>
        </trans-unit>
        <trans-unit id="c5d23f01f61bcd35bfab142a15fd44885c61c3be" translate="yes" xml:space="preserve">
          <source>And/or counting backward:</source>
          <target state="translated">Andor contando hacia atrás:</target>
        </trans-unit>
        <trans-unit id="c4dfb973c48c6519cc7b7dc31550d6b63562a6b8" translate="yes" xml:space="preserve">
          <source>Another viable way would be to use &lt;code&gt;Array.map()&lt;/code&gt; which works in the same way, but it also takes all values that you return and returns them in a new array (essentially mapping each element to a new one), like this:</source>
          <target state="translated">Otra forma viable ser&amp;iacute;a usar &lt;code&gt;Array.map()&lt;/code&gt; que funciona de la misma manera, pero tambi&amp;eacute;n toma todos los valores que devuelve y los devuelve en una nueva matriz (esencialmente asignando cada elemento a uno nuevo), as&amp;iacute;:</target>
        </trans-unit>
        <trans-unit id="e3e988d8ceb27456dc97896d4220b5940816a6af" translate="yes" xml:space="preserve">
          <source>Another way that is useful for copying items from one array to another is</source>
          <target state="translated">Otra forma que es útil para copiar elementos de una matriz a otra es</target>
        </trans-unit>
        <trans-unit id="8d554cc4170a849cf2e0aa16b801259f0efd7018" translate="yes" xml:space="preserve">
          <source>As per question, user want code in javascript instead of jquery so the edit is</source>
          <target state="translated">En cuanto a la pregunta,el usuario quiere el código en javascript en lugar de jquery por lo que la edición es</target>
        </trans-unit>
        <trans-unit id="bdc7e9a236af726f7038fbcebf901bc5de8a0e8f" translate="yes" xml:space="preserve">
          <source>As per the new updated feature ECMAScript 6 (ES6) and ECMAScript 2015, you can use the following options with loops:</source>
          <target state="translated">Según la nueva característica actualizada ECMAScript 6 (ES6)y ECMAScript 2015,se pueden utilizar las siguientes opciones con bucles:</target>
        </trans-unit>
        <trans-unit id="47e50940d71eac09fa64f7e1d6bcb6c40b08529b" translate="yes" xml:space="preserve">
          <source>Aside from true arrays, there are also &lt;em&gt;array-like&lt;/em&gt; objects that have a &lt;code&gt;length&lt;/code&gt; property and properties with numeric names: &lt;code&gt;NodeList&lt;/code&gt; instances, the &lt;code&gt;arguments&lt;/code&gt; object, etc. How do we loop through their contents?</source>
          <target state="translated">Adem&amp;aacute;s de las matrices verdaderas, tambi&amp;eacute;n hay objetos &lt;em&gt;similares a una matriz&lt;/em&gt; que tienen una propiedad de &lt;code&gt;length&lt;/code&gt; y propiedades con nombres num&amp;eacute;ricos: instancias de &lt;code&gt;NodeList&lt;/code&gt; , el objeto de &lt;code&gt;arguments&lt;/code&gt; , etc. &amp;iquest;C&amp;oacute;mo recorremos sus contenidos?</target>
        </trans-unit>
        <trans-unit id="eab486bae96770e7bd766cc0cc4ada63033b8966" translate="yes" xml:space="preserve">
          <source>At least some, and possibly most or even all, of the array approaches above frequently apply equally well to array-like objects:</source>
          <target state="translated">Al menos algunos,y posiblemente la mayoría o incluso todos,los enfoques de la matriz arriba mencionados se aplican con frecuencia igualmente bien a los objetos similares a la matriz:</target>
        </trans-unit>
        <trans-unit id="70a2b96e30c86a111cdae7a47c5956d3a9d28e3e" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;i--&lt;/code&gt; runs &lt;em&gt;before&lt;/em&gt; each iteration, on the first iteration we will actually be accessing the item at &lt;code&gt;array.length - 1&lt;/code&gt; which avoids any issues with &lt;strike&gt;Array-out-of-bounds&lt;/strike&gt;&lt;code&gt;undefined&lt;/code&gt; items.</source>
          <target state="translated">Debido a que &lt;code&gt;i--&lt;/code&gt; se ejecuta &lt;em&gt;antes de&lt;/em&gt; cada iteraci&amp;oacute;n, en la primera iteraci&amp;oacute;n realmente tendremos acceso al elemento en &lt;code&gt;array.length - 1&lt;/code&gt; que evita cualquier problema con los elementos &lt;code&gt;undefined&lt;/code&gt; &lt;strike&gt;Array fuera de los l&amp;iacute;mites&lt;/strike&gt; .</target>
        </trans-unit>
        <trans-unit id="7e75fbda4fe70f4af05ef437f23c8019a6e0a056" translate="yes" xml:space="preserve">
          <source>But the above concerns is not applicable to Node.js applications, where &lt;code&gt;for..of&lt;/code&gt; is now well supported.</source>
          <target state="translated">Pero las preocupaciones anteriores no son aplicables a las aplicaciones Node.js, donde &lt;code&gt;for..of&lt;/code&gt; ahora est&amp;aacute; bien soportado.</target>
        </trans-unit>
        <trans-unit id="877397eda4030d185b7ccf9f7ce92ef4e0c61e68" translate="yes" xml:space="preserve">
          <source>But there's &lt;strong&gt;lots&lt;/strong&gt; more to explore, read on...</source>
          <target state="translated">Pero hay &lt;strong&gt;mucho&lt;/strong&gt; m&amp;aacute;s por explorar, sigue leyendo ...</target>
        </trans-unit>
        <trans-unit id="ee106f8a0a3a9dae96b0d69d742bcd97b39bd261" translate="yes" xml:space="preserve">
          <source>But with modern JavaScript engines, it's rare you need to eke out that last bit of juice.</source>
          <target state="translated">Pero con los modernos motores de JavaScript,es raro que necesites sacarle el último jugo.</target>
        </trans-unit>
        <trans-unit id="3e709fabb3cf8ffb27a522d70327597b3b8cc4d2" translate="yes" xml:space="preserve">
          <source>Caution when using string as function: the function is created out-of-context and ought to be used only where you are certain of variable scoping.  Otherwise, better to pass functions where scoping is more intuitive.</source>
          <target state="translated">Precaución al utilizar la cadena como función:la función se crea fuera de contexto y sólo debe utilizarse cuando se tiene la certeza del alcance de la variable.De lo contrario,es mejor pasar las funciones donde el alcance es más intuitivo.</target>
        </trans-unit>
        <trans-unit id="ebdda461e7af469834840795faba24136d9d0951" translate="yes" xml:space="preserve">
          <source>Caveat for host-provided objects</source>
          <target state="translated">Advertencia para los objetos proporcionados por el huésped</target>
        </trans-unit>
        <trans-unit id="5c0fa40086336662397974cdbd5ffa0407908978" translate="yes" xml:space="preserve">
          <source>Consider the following 2 nested loops, which do exactly the same thing. Let's say that we have 2 arrays of objects and each object contains an array of results, each of which has a Value property that's a string (or whatever). And let's say we need to iterate over each of the results and if they're equal then perform some action:</source>
          <target state="translated">Considere los siguientes 2 bucles anidados,que hacen exactamente lo mismo.Digamos que tenemos 2 matrices de objetos y cada objeto contiene una matriz de resultados,cada uno de los cuales tiene una propiedad de valor que es una cadena (o lo que sea).Y digamos que necesitamos iterar sobre cada uno de los resultados y si son iguales entonces realizar alguna acción:</target>
        </trans-unit>
        <trans-unit id="dc657383123e3b34e3dc9324b5bc94793d6b0ec9" translate="yes" xml:space="preserve">
          <source>Create a true array</source>
          <target state="translated">Crear una verdadera matriz</target>
        </trans-unit>
        <trans-unit id="6ebbbdefb07c190cb50e696dfd8fd8b8232a9dd9" translate="yes" xml:space="preserve">
          <source>Destructuring and using of the spread operator have proven quite useful for newcomers to ECMAScript&amp;nbsp;6 as being more human-readable/aesthetic, although some JavaScript veterans might consider it messy. Juniors or some other people might find it useful.</source>
          <target state="translated">La desestructuraci&amp;oacute;n y el uso del operador de propagaci&amp;oacute;n han demostrado ser bastante &amp;uacute;tiles para los reci&amp;eacute;n llegados a ECMAScript 6 por ser m&amp;aacute;s legibles / est&amp;eacute;ticos, aunque algunos veteranos de JavaScript podr&amp;iacute;an considerarlo desordenado. Los j&amp;oacute;venes o algunas otras personas pueden encontrarlo &amp;uacute;til.</target>
        </trans-unit>
        <trans-unit id="dc3decbb93847518f1a049dcf49d0d7c6560bcc6" translate="yes" xml:space="preserve">
          <source>Details</source>
          <target state="translated">Details</target>
        </trans-unit>
        <trans-unit id="1daaad0084c2604185e45c5a29dc6efeff0b7fce" translate="yes" xml:space="preserve">
          <source>Details:</source>
          <target state="translated">Details:</target>
        </trans-unit>
        <trans-unit id="c472a51872469dd7221cdb8ed81b476216096187" translate="yes" xml:space="preserve">
          <source>Disadvantages:</source>
          <target state="translated">Disadvantages:</target>
        </trans-unit>
        <trans-unit id="6c93fe8028eb2c06aa7aad788adaf00386420ed1" translate="yes" xml:space="preserve">
          <source>Don't use &lt;code&gt;for-in&lt;/code&gt; unless you use it with safeguards or are at least aware of why it might bite you.</source>
          <target state="translated">No use &lt;code&gt;for-in&lt;/code&gt; a menos que lo use con medidas de seguridad o al menos sepa por qu&amp;eacute; podr&amp;iacute;a morderlo.</target>
        </trans-unit>
        <trans-unit id="d08ac59c6f776a259666b38bd6f6b67c6ac20550" translate="yes" xml:space="preserve">
          <source>ECMAScript&amp;nbsp;5 (the version on JavaScript) to work with Arrays:</source>
          <target state="translated">ECMAScript 5 (la versi&amp;oacute;n en JavaScript) para trabajar con matrices:</target>
        </trans-unit>
        <trans-unit id="d365e59cfe702f0dc8ea35a70c741654a39fed8f" translate="yes" xml:space="preserve">
          <source>ES2015 adds &lt;em&gt;iterators&lt;/em&gt; to JavaScript. The easiest way to use iterators is the new &lt;code&gt;for-of&lt;/code&gt; statement. It looks like this:</source>
          <target state="translated">ES2015 agrega &lt;em&gt;iteradores&lt;/em&gt; a JavaScript. La forma m&amp;aacute;s f&amp;aacute;cil de usar iteradores es la nueva declaraci&amp;oacute;n &lt;code&gt;for-of&lt;/code&gt; . Se parece a esto:</target>
        </trans-unit>
        <trans-unit id="89cce593f5131e64c65adfb3e7a2a8a99ecd6047" translate="yes" xml:space="preserve">
          <source>Each p tag gets &lt;code&gt;class=&quot;blue&quot;&lt;/code&gt;</source>
          <target state="translated">Cada etiqueta p obtiene &lt;code&gt;class=&quot;blue&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a03f898632fc9e1da60588b88699c530174fddff" translate="yes" xml:space="preserve">
          <source>Easy readability</source>
          <target state="translated">Facilidad de lectura</target>
        </trans-unit>
        <trans-unit id="a1360cfea2542d434b165c5be72693e776eefce5" translate="yes" xml:space="preserve">
          <source>Easy writability</source>
          <target state="translated">Facilidad de escritura</target>
        </trans-unit>
        <trans-unit id="5c260a8d97db3363bbeeb8cd4f1afd6ee2424cdf" translate="yes" xml:space="preserve">
          <source>Efficiency. &lt;code&gt;angular.forEach&lt;/code&gt;, and the native &lt;code&gt;forEach&lt;/code&gt;, for that matter, are both &lt;em&gt;so much&lt;/em&gt; slower than the normal &lt;code&gt;for&lt;/code&gt; loop....about &lt;a href=&quot;http://jsperf.com/angular-foreach-vs-native-for-loop/3&quot;&gt;90% slower&lt;/a&gt;. So for large data sets, best to stick to the native &lt;code&gt;for&lt;/code&gt; loop.</source>
          <target state="translated">Eficiencia. &lt;code&gt;angular.forEach&lt;/code&gt; , y el nativo &lt;code&gt;forEach&lt;/code&gt; , para el caso, son &lt;em&gt;mucho&lt;/em&gt; m&amp;aacute;s lentos de lo normal &lt;code&gt;for&lt;/code&gt; bucle ... aproximadamente un &lt;a href=&quot;http://jsperf.com/angular-foreach-vs-native-for-loop/3&quot;&gt;90% m&amp;aacute;s lento&lt;/a&gt; . Por lo tanto, para conjuntos de datos grandes, es mejor atenerse al ciclo &lt;code&gt;for&lt;/code&gt; nativo.</target>
        </trans-unit>
        <trans-unit id="9bbc4aeb0980cee945b58ff2f771d473c92abbcf" translate="yes" xml:space="preserve">
          <source>Every other p tag gets &lt;code&gt;class=&quot;red&quot;&lt;/code&gt;&amp;gt;</source>
          <target state="translated">Cualquier otra etiqueta p obtiene &lt;code&gt;class=&quot;red&quot;&lt;/code&gt; &amp;gt;</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">Ampliar fragmento</target>
        </trans-unit>
        <trans-unit id="31d46401beeeb139181157a391e38208292ff52c" translate="yes" xml:space="preserve">
          <source>For Actual Arrays</source>
          <target state="translated">Para los arreglos reales</target>
        </trans-unit>
        <trans-unit id="574d2bfcf687ca1c9e5ae449855c6a7b3be2b282" translate="yes" xml:space="preserve">
          <source>For Array-Like Objects</source>
          <target state="translated">Para los objetos parecidos a las matrices</target>
        </trans-unit>
        <trans-unit id="4c9f1e7b36c7b85949136c05d06c3d1376f6fb79" translate="yes" xml:space="preserve">
          <source>For maximum browser support, &lt;code&gt;for..of&lt;/code&gt;&lt;a href=&quot;https://github.com/airbnb/javascript/issues/1122#issuecomment-471169142&quot;&gt;requires a polyfill&lt;/a&gt; for iterators, making your app slightly slower to execute and slightly larger to download.</source>
          <target state="translated">Para obtener la m&amp;aacute;xima compatibilidad con el navegador, &lt;code&gt;for..of&lt;/code&gt; &lt;a href=&quot;https://github.com/airbnb/javascript/issues/1122#issuecomment-471169142&quot;&gt;requiere un polyfill&lt;/a&gt; para los iteradores, lo que hace que su aplicaci&amp;oacute;n sea un poco m&amp;aacute;s lenta de ejecutar y un poco m&amp;aacute;s grande de descarga.</target>
        </trans-unit>
        <trans-unit id="07dab6b0cba0aafb7fb630f2e41c7bbe0d2fa27e" translate="yes" xml:space="preserve">
          <source>For more information and examples about functional programming on arrays, look at the blog post &lt;em&gt;&lt;a href=&quot;http://cryto.net/~joepie91/blog/2015/05/04/functional-programming-in-javascript-map-filter-reduce/&quot;&gt;Functional programming in JavaScript: map, filter and reduce&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">Para obtener m&amp;aacute;s informaci&amp;oacute;n y ejemplos sobre programaci&amp;oacute;n funcional en matrices, consulte la publicaci&amp;oacute;n de blog &lt;em&gt;&lt;a href=&quot;http://cryto.net/~joepie91/blog/2015/05/04/functional-programming-in-javascript-map-filter-reduce/&quot;&gt;Programaci&amp;oacute;n funcional en JavaScript: mapear, filtrar y reducir&lt;/a&gt;&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="e5b5226b5b2f9ba8ea80f8e646bec60d9ae27902" translate="yes" xml:space="preserve">
          <source>For that reason (and to encourage use of &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;filter&lt;/code&gt;), &lt;a href=&quot;https://github.com/airbnb/javascript#iterators-and-generators&quot;&gt;some front-end style guides&lt;/a&gt; ban &lt;code&gt;for..of&lt;/code&gt; completely!</source>
          <target state="translated">Por esa raz&amp;oacute;n (y para alentar el uso del &lt;code&gt;map&lt;/code&gt; a y el &lt;code&gt;filter&lt;/code&gt; ), &lt;a href=&quot;https://github.com/airbnb/javascript#iterators-and-generators&quot;&gt;algunas gu&amp;iacute;as de estilo front-end&lt;/a&gt; proh&amp;iacute;ben &lt;code&gt;for..of&lt;/code&gt; &amp;iexcl;por completo!</target>
        </trans-unit>
        <trans-unit id="740b5208eb855ba5fe663f7061e6d63db399e3ab" translate="yes" xml:space="preserve">
          <source>For-each over an array in JavaScript</source>
          <target state="translated">Cada uno sobre una matriz en JavaScript</target>
        </trans-unit>
        <trans-unit id="4b1bffa7198cab670a61e9e726dc8034ad855ba9" translate="yes" xml:space="preserve">
          <source>ForEach</source>
          <target state="translated">ForEach</target>
        </trans-unit>
        <trans-unit id="0b863337ad80c0e087cc5bb5e2ee2b6648e7963d" translate="yes" xml:space="preserve">
          <source>Foreach is basically a High Order Function, Which takes another function as its parameter.</source>
          <target state="translated">Foreach es básicamente una función de alto orden,que toma otra función como parámetro.</target>
        </trans-unit>
        <trans-unit id="8a78ff713dd92b2ecbc101771445889515332055" translate="yes" xml:space="preserve">
          <source>Granted this is a very simple hypothetical example, but I've written triple embedded for loops using the second approach and it was &lt;em&gt;very&lt;/em&gt; hard to read, and write for that matter.</source>
          <target state="translated">De acuerdo, este es un ejemplo hipot&amp;eacute;tico muy simple, pero escrib&amp;iacute; triple incrustado para bucles usando el segundo enfoque y fue &lt;em&gt;muy&lt;/em&gt; dif&amp;iacute;cil de leer y escribir.</target>
        </trans-unit>
        <trans-unit id="4007b162af20ada18ae8a52aec1f5ada3364061d" translate="yes" xml:space="preserve">
          <source>Host objects may implement these internal methods in any manner unless specified otherwise; for example, one possibility is that &lt;code&gt;[[Get]]&lt;/code&gt; and &lt;code&gt;[[Put]]&lt;/code&gt; for a particular host object indeed fetch and store property values but &lt;code&gt;[[HasProperty]]&lt;/code&gt; always generates &lt;strong&gt;false&lt;/strong&gt;.</source>
          <target state="translated">Los objetos host pueden implementar estos m&amp;eacute;todos internos de cualquier manera a menos que se especifique lo contrario; por ejemplo, una posibilidad es que &lt;code&gt;[[Get]]&lt;/code&gt; y &lt;code&gt;[[Put]]&lt;/code&gt; para un objeto host en particular &lt;code&gt;[[HasProperty]]&lt;/code&gt; y almacenen valores de propiedad pero [[HasProperty]] siempre genera &lt;strong&gt;false&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="19813696848672a3c1fd16a6dcede994e8b0ea3c" translate="yes" xml:space="preserve">
          <source>How can I loop through all the entries in an array using JavaScript?</source>
          <target state="translated">¿Cómo puedo hacer un bucle a través de todas las entradas de una matriz usando JavaScript?</target>
        </trans-unit>
        <trans-unit id="e21860bf37328b97ebb0ddd904694c78e4a7b382" translate="yes" xml:space="preserve">
          <source>How does it work?</source>
          <target state="translated">¿Cómo funciona?</target>
        </trans-unit>
        <trans-unit id="ca7b3040f56acb6407fc724b0d2fd827a45691bf" translate="yes" xml:space="preserve">
          <source>However in practice that is &lt;strong&gt;not&lt;/strong&gt; actually a reliable indication of intent, since it is indistinguishable from those occasions when you &lt;strong&gt;&lt;em&gt;do&lt;/em&gt;&lt;/strong&gt; care about the order, and really do &lt;strong&gt;&lt;em&gt;need&lt;/em&gt;&lt;/strong&gt; to loop in reverse.  So in fact another construct would be needed to accurately express the &quot;don't care&quot; intent, something currently unavailable in most languages, including ECMAScript, but which could be called, for example, &lt;code&gt;forEachUnordered()&lt;/code&gt;.</source>
          <target state="translated">Sin embargo, en la pr&amp;aacute;ctica eso &lt;strong&gt;no&lt;/strong&gt; es en realidad una indicaci&amp;oacute;n confiable de intenci&amp;oacute;n, ya que es indistinguible de aquellas ocasiones en las que &lt;strong&gt;&lt;em&gt;te&lt;/em&gt;&lt;/strong&gt; importa el orden y realmente &lt;strong&gt;&lt;em&gt;necesitas&lt;/em&gt;&lt;/strong&gt; hacer un ciclo en reversa. Entonces, de hecho, se necesitar&amp;iacute;a otra construcci&amp;oacute;n para expresar con precisi&amp;oacute;n la intenci&amp;oacute;n de &quot;no me importa&quot;, algo que actualmente no est&amp;aacute; disponible en la mayor&amp;iacute;a de los idiomas, incluido ECMAScript, pero que podr&amp;iacute;a llamarse, por ejemplo, &lt;code&gt;forEachUnordered()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="61f75f3469a29e1942e3c3329af27ea060513a5e" translate="yes" xml:space="preserve">
          <source>However, note that there may be reasons to use an even simpler &lt;code&gt;for&lt;/code&gt; loop (see Stack Overflow question &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/500504&quot;&gt;Why is using &amp;ldquo;for&amp;hellip;in&amp;rdquo; with array iteration such a bad idea?&lt;/a&gt;&lt;/em&gt;)</source>
          <target state="translated">Sin embargo, tenga en cuenta que puede haber razones para usar un bucle &lt;code&gt;for&lt;/code&gt; a&amp;uacute;n m&amp;aacute;s simple (consulte la pregunta de desbordamiento de pila &amp;iquest; &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/500504&quot;&gt;Por qu&amp;eacute; usar &quot;for ... in&quot; con iteraci&amp;oacute;n de matriz es una mala idea?&lt;/a&gt;&lt;/em&gt; )</target>
        </trans-unit>
        <trans-unit id="a6aed835f2d563c4c3320a911d587d82dbda800c" translate="yes" xml:space="preserve">
          <source>I also would like to add this as a composition of a reverse loop and an answer above for someone that would like this syntax too.</source>
          <target state="translated">También me gustaría añadir esto como una composición de un bucle inverso y una respuesta arriba para alguien que también quiera esta sintaxis.</target>
        </trans-unit>
        <trans-unit id="8477c992b5ade4df47cd7654aa1828b412e4a489" translate="yes" xml:space="preserve">
          <source>I know this is an old post, and there are so many great answers already. For a little more completeness I figured I'd throw in another one using &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt;. Of course, this only applies if you're using Angular, obviously, nonetheless I'd like to put it anyway.</source>
          <target state="translated">S&amp;eacute; que esta es una publicaci&amp;oacute;n antigua, y ya hay muchas respuestas geniales. Para un poco m&amp;aacute;s de integridad, pens&amp;eacute; que lanzar&amp;iacute;a otro usando &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt; . Por supuesto, esto solo se aplica si est&amp;aacute; usando Angular, obviamente, sin embargo, me gustar&amp;iacute;a ponerlo de todos modos.</target>
        </trans-unit>
        <trans-unit id="1c59ff4d9355404cf9a4b93a2e4792e99f5c4e05" translate="yes" xml:space="preserve">
          <source>I think the &lt;em&gt;reverse&lt;/em&gt; for loop deserves a mention here:</source>
          <target state="translated">Creo que el &lt;em&gt;reverso&lt;/em&gt; de loop merece una menci&amp;oacute;n aqu&amp;iacute;:</target>
        </trans-unit>
        <trans-unit id="f6502d93534ccbe12812234fb241d45f4ba61f26" translate="yes" xml:space="preserve">
          <source>I thought it was something like this:</source>
          <target state="translated">Pensé que era algo así:</target>
        </trans-unit>
        <trans-unit id="3603f48e92361f2a2fc432d1e620a715ff3fe622" translate="yes" xml:space="preserve">
          <source>I usually use the</source>
          <target state="translated">Normalmente uso el</target>
        </trans-unit>
        <trans-unit id="12bc6fc52aa07da9df836fd7799f22941f498dc1" translate="yes" xml:space="preserve">
          <source>I'll quickly note that you can use the ES2015 options &lt;em&gt;now&lt;/em&gt;, even on ES5 engines, by &lt;em&gt;transpiling&lt;/em&gt; ES2015 to ES5. Search for &quot;ES2015 transpiling&quot; / &quot;ES6 transpiling&quot; for more...</source>
          <target state="translated">Notar&amp;eacute; r&amp;aacute;pidamente que puede usar las opciones de ES2015 &lt;em&gt;ahora&lt;/em&gt; , incluso en motores ES5, al &lt;em&gt;trasladar&lt;/em&gt; ES2015 a ES5. Busque &quot;Transpiling ES2015&quot; / &quot;Transpiling ES6&quot; para m&amp;aacute;s ...</target>
        </trans-unit>
        <trans-unit id="18c6f30a69467c4462f7d6abc615a72db576f06d" translate="yes" xml:space="preserve">
          <source>I'm sure there's various other pros and cons as well, and please feel free to add any that you see fit. I feel that, bottom line, if you need efficiency, stick with just the native &lt;code&gt;for&lt;/code&gt; loop for your looping needs. But, if your datasets are smaller and a some efficiency is okay to give up in exchange for readability and writability, then by all means throw an &lt;code&gt;angular.forEach&lt;/code&gt; in that bad boy.</source>
          <target state="translated">Estoy seguro de que tambi&amp;eacute;n hay otros pros y contras, y si&amp;eacute;ntase libre de agregar cualquiera que considere conveniente. Creo que, en resumen, si necesita eficiencia, qu&amp;eacute;dese solo con el bucle nativo para sus necesidades de bucle. Pero, si sus conjuntos de datos son m&amp;aacute;s peque&amp;ntilde;os y se puede renunciar a una cierta eficiencia a cambio de legibilidad y capacidad de escritura, entonces, de todos modos, arroje un &lt;code&gt;angular.forEach&lt;/code&gt; en ese chico malo.</target>
        </trans-unit>
        <trans-unit id="06ac5670940bbfb285c1ba0308b4821c84d5e171" translate="yes" xml:space="preserve">
          <source>If available, &lt;code&gt;angular.forEach&lt;/code&gt; will use the ES5 forEach loop. Now, I will get to efficientcy in the cons section, as the forEach loops are &lt;em&gt;much&lt;/em&gt; slower than the for loops. I mention this as a pro because it's nice to be consistent and standardized.</source>
          <target state="translated">Si est&amp;aacute; disponible, &lt;code&gt;angular.forEach&lt;/code&gt; usar&amp;aacute; el ES5 forEach loop. Ahora, llegar&amp;eacute; a la eficiencia en la secci&amp;oacute;n contras, ya que los bucles forEach son &lt;em&gt;mucho&lt;/em&gt; m&amp;aacute;s lentos que los bucles for. Menciono esto como un profesional porque es bueno ser consistente y estandarizado.</target>
        </trans-unit>
        <trans-unit id="e8907402896b09c17431fc05797665a93d1d2ebc" translate="yes" xml:space="preserve">
          <source>If order doesn't matter, and &lt;strong&gt;efficiency&lt;/strong&gt; is a concern (in the innermost loop of a game or animation engine), then it may be acceptable to use the reverse for loop as your go-to pattern.  Just remember that seeing a reverse for loop in existing code &lt;strong&gt;does not necessarily mean&lt;/strong&gt; that the order irrelevant!</source>
          <target state="translated">Si el orden no importa y la &lt;strong&gt;eficiencia&lt;/strong&gt; es una preocupaci&amp;oacute;n (en el bucle m&amp;aacute;s interno de un juego o motor de animaci&amp;oacute;n), entonces puede ser aceptable usar el bucle inverso para su patr&amp;oacute;n de inicio. &amp;iexcl;Solo recuerde que ver un bucle inverso para en el c&amp;oacute;digo existente &lt;strong&gt;no significa necesariamente&lt;/strong&gt; que el orden sea irrelevante!</target>
        </trans-unit>
        <trans-unit id="b80d2d2ba2c3b20f6e937c93c538d0e0be32e646" translate="yes" xml:space="preserve">
          <source>If the length of the array won't change during the loop, and it's in performance-sensitive code (unlikely), a slightly more complicated version grabbing the length up front might be a &lt;strong&gt;&lt;em&gt;tiny&lt;/em&gt;&lt;/strong&gt; bit faster:</source>
          <target state="translated">Si la longitud de la matriz no cambia durante el ciclo, y est&amp;aacute; en un c&amp;oacute;digo sensible al rendimiento (poco probable), una versi&amp;oacute;n un poco m&amp;aacute;s complicada que tome la longitud por adelantado podr&amp;iacute;a ser un poco m&amp;aacute;s r&amp;aacute;pida:</target>
        </trans-unit>
        <trans-unit id="b92dceb455d82f7bd9cef350ebca0d33e590aa5b" translate="yes" xml:space="preserve">
          <source>If you &lt;strong&gt;modify the array&lt;/strong&gt; while looping, at or after index &lt;em&gt;i&lt;/em&gt; (for example you remove or insert an item at &lt;code&gt;array[i]&lt;/code&gt;), then a forward loop would skip the item that shifted left into position &lt;em&gt;i&lt;/em&gt;, or re-process the &lt;em&gt;i&lt;/em&gt;th item that was shifted right.  In a traditional for loop, you &lt;em&gt;could&lt;/em&gt; update &lt;em&gt;i&lt;/em&gt; to point to the next item that needs processing - 1, but simply reversing the direction of iteration is often a &lt;strong&gt;simpler&lt;/strong&gt; and &lt;a href=&quot;https://stackoverflow.com/questions/23186254/javascript-splice-changing-earlier-values-in-an-array/23186450#23186450&quot;&gt;more elegant solution&lt;/a&gt;.</source>
          <target state="translated">Si &lt;strong&gt;modifica la matriz&lt;/strong&gt; durante el bucle, en o despu&amp;eacute;s del &amp;iacute;ndice &lt;em&gt;i&lt;/em&gt; (por ejemplo, elimina o inserta un elemento en la &lt;code&gt;array[i]&lt;/code&gt; ), entonces un bucle de avance omitir&amp;aacute; el elemento que se desplaz&amp;oacute; a la izquierda a la posici&amp;oacute;n &lt;em&gt;i&lt;/em&gt; , o volver&amp;aacute; a procesar el &lt;em&gt;i&lt;/em&gt; El elemento que se desplaz&amp;oacute; a la derecha. En un bucle for tradicional, &lt;em&gt;puede&lt;/em&gt; actualizar &lt;em&gt;i&lt;/em&gt; para se&amp;ntilde;alar el siguiente elemento que necesita procesamiento - 1, pero simplemente invertir la direcci&amp;oacute;n de la iteraci&amp;oacute;n suele ser una &lt;a href=&quot;https://stackoverflow.com/questions/23186254/javascript-splice-changing-earlier-values-in-an-array/23186450#23186450&quot;&gt;soluci&amp;oacute;n m&amp;aacute;s&lt;/a&gt; &lt;strong&gt;simple&lt;/strong&gt; y elegante .</target>
        </trans-unit>
        <trans-unit id="2e64946b63608dcfc94ea160317714137b7354db" translate="yes" xml:space="preserve">
          <source>If you are a jQuery &lt;em&gt;fan&lt;/em&gt; and already have a jQuery file running, you should reverse the positions of the index and value parameters</source>
          <target state="translated">Si eres un &lt;em&gt;fan&amp;aacute;tico de&lt;/em&gt; jQuery y ya tienes un archivo jQuery en ejecuci&amp;oacute;n, debes invertir las posiciones de los par&amp;aacute;metros de &amp;iacute;ndice y valor</target>
        </trans-unit>
        <trans-unit id="13ddd4cb90755914bc68cb46a5dcb9579aa341e2" translate="yes" xml:space="preserve">
          <source>If you don't mind emptying the array:</source>
          <target state="translated">Si no te importa vaciar la matriz:</target>
        </trans-unit>
        <trans-unit id="ae87d418a37aaf3cda30fae440c63ffde95ff67b" translate="yes" xml:space="preserve">
          <source>If you had five divs, you'd get &quot;Index is: 0&quot; if you clicked the first and &quot;Index is: 4&quot; if you clicked the last. This does &lt;strong&gt;not&lt;/strong&gt; work if you use &lt;code&gt;var&lt;/code&gt; instead of &lt;code&gt;let&lt;/code&gt;.</source>
          <target state="translated">Si tuviera cinco divs, obtendr&amp;iacute;a &quot;&amp;Iacute;ndice es: 0&quot; si hizo clic en el primero y &quot;&amp;Iacute;ndice es: 4&quot; si hizo clic en el &amp;uacute;ltimo. Esto &lt;strong&gt;no&lt;/strong&gt; funciona si usa &lt;code&gt;var&lt;/code&gt; en lugar de &lt;code&gt;let&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5d8e10b19a52f515f5ce1b1b685c8f30f79143a6" translate="yes" xml:space="preserve">
          <source>If you have a massive array you should use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators&quot;&gt;&lt;strong&gt;&lt;code&gt;iterators&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; to gain some efficiency. Iterators are a property of certain JavaScript collections (like &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;). Even, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of&quot;&gt;&lt;strong&gt;&lt;code&gt;for..of&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; uses &lt;strong&gt;&lt;code&gt;iterator&lt;/code&gt;&lt;/strong&gt; under-the-hood.</source>
          <target state="translated">Si tiene una matriz masiva, debe usar &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators&quot;&gt;&lt;strong&gt; &lt;code&gt;iterators&lt;/code&gt; &lt;/strong&gt;&lt;/a&gt; para ganar algo de eficiencia. Los iteradores son propiedad de ciertas colecciones de JavaScript (como &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Set&quot;&gt; &lt;code&gt;Set&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt; ). Incluso, para &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of&quot;&gt;&lt;strong&gt; &lt;code&gt;for..of&lt;/code&gt; &lt;/strong&gt;&lt;/a&gt; utiliza &lt;strong&gt; &lt;code&gt;iterator&lt;/code&gt; &lt;/strong&gt; bajo el cap&amp;oacute;.</target>
        </trans-unit>
        <trans-unit id="937ed980f598e6ed46ab0a45f6808c763154dc2c" translate="yes" xml:space="preserve">
          <source>If you use &lt;code&gt;Array.prototype&lt;/code&gt; functions with &lt;em&gt;host-provided&lt;/em&gt; array-like objects (DOM lists and other things provided by the browser rather than the JavaScript engine), you need to be sure to test in your target environments to make sure the host-provided object behaves properly. &lt;strong&gt;Most do behave properly&lt;/strong&gt; (now), but it's important to test. The reason is that most of the &lt;code&gt;Array.prototype&lt;/code&gt; methods you're likely to want to use rely on the host-provided object giving an honest answer to the abstract &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots-hasproperty-p&quot;&gt;&lt;code&gt;[[HasProperty]]&lt;/code&gt;&lt;/a&gt; operation. As of this writing, browsers do a very good job of this, but the 5.1 spec did allow for the possibility a host-provided object may not be honest. It's in &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-8.6.2&quot;&gt;&amp;sect;8.6.2&lt;/a&gt;, several paragraphs below the big table near the beginning of that section), where it says:</source>
          <target state="translated">Si utiliza las funciones de &lt;code&gt;Array.prototype&lt;/code&gt; con objetos de tipo matriz &lt;em&gt;proporcionados por el host&lt;/em&gt; (listas DOM y otras cosas proporcionadas por el navegador en lugar del motor de JavaScript), debe asegurarse de probar en sus entornos de destino para asegurarse de que el host proporcione El objeto se comporta correctamente. &lt;strong&gt;La mayor&amp;iacute;a se comporta correctamente&lt;/strong&gt; (ahora), pero es importante realizar una prueba. La raz&amp;oacute;n es que la mayor&amp;iacute;a de los m&amp;eacute;todos de &lt;code&gt;Array.prototype&lt;/code&gt; que es probable que desee utilizar se basan en el objeto proporcionado por el host que da una respuesta honesta a la operaci&amp;oacute;n abstracta &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots-hasproperty-p&quot;&gt; &lt;code&gt;[[HasProperty]]&lt;/code&gt; &lt;/a&gt; . Al escribir estas l&amp;iacute;neas, los navegadores hacen un muy buen trabajo de esto, pero la especificaci&amp;oacute;n 5.1 permiti&amp;oacute; la posibilidad de que un objeto proporcionado por el host no sea honesto. Est&amp;aacute; en &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-8.6.2&quot;&gt;&amp;sect;8.6.2&lt;/a&gt; , varios p&amp;aacute;rrafos debajo de la gran mesa cerca del comienzo de esa secci&amp;oacute;n), donde dice:</target>
        </trans-unit>
        <trans-unit id="1cf65717377f5a0ffbf4016aa7b65a5777d9b6bb" translate="yes" xml:space="preserve">
          <source>If you want to break, a little more logic:</source>
          <target state="translated">Si quieres romper,un poco más de lógica:</target>
        </trans-unit>
        <trans-unit id="1aae02233e247aceba4786eb942d19b76a8c3c1d" translate="yes" xml:space="preserve">
          <source>If you want to loop over an array, use the standard three-part &lt;code&gt;for&lt;/code&gt; loop.</source>
          <target state="translated">Si desea realizar un bucle sobre una matriz, use el bucle est&amp;aacute;ndar de tres partes &lt;code&gt;for&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="11105b5c63e872bf555853378e76dfee57d8fded" translate="yes" xml:space="preserve">
          <source>If you want to loop through an array of objects with the arrow function:</source>
          <target state="translated">Si quieres hacer un bucle a través de una serie de objetos con la función de flecha:</target>
        </trans-unit>
        <trans-unit id="986435ae4b5acc19dfcae749d8f1c3e4994226d8" translate="yes" xml:space="preserve">
          <source>If you want to use &lt;code&gt;for()&lt;/code&gt;, it will look like -</source>
          <target state="translated">Si desea usar &lt;code&gt;for()&lt;/code&gt; , se ver&amp;aacute; as&amp;iacute;:</target>
        </trans-unit>
        <trans-unit id="4acb3d06d2c92261570911bf5c1b6824ec6805ec" translate="yes" xml:space="preserve">
          <source>If you want to use &lt;code&gt;forEach()&lt;/code&gt;, it will look like -</source>
          <target state="translated">Si desea usar &lt;code&gt;forEach()&lt;/code&gt; , se ver&amp;aacute; as&amp;iacute;:</target>
        </trans-unit>
        <trans-unit id="5fc44f65228be3d46253870a654fc920e523f6cf" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using the &lt;a href=&quot;http://jquery.com/&quot;&gt;&lt;strong&gt;jQuery&lt;/strong&gt;&lt;/a&gt; library, you can use &lt;a href=&quot;http://api.jquery.com/jQuery.each/&quot;&gt;&lt;strong&gt;jQuery.each&lt;/strong&gt;&lt;/a&gt;:</source>
          <target state="translated">Si est&amp;aacute; utilizando la biblioteca &lt;a href=&quot;http://jquery.com/&quot;&gt;&lt;strong&gt;jQuery&lt;/strong&gt;&lt;/a&gt; , puede usar &lt;a href=&quot;http://api.jquery.com/jQuery.each/&quot;&gt;&lt;strong&gt;jQuery.each&lt;/strong&gt;&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="6a9d6ebddd744df1593bd5988193105784652f8b" translate="yes" xml:space="preserve">
          <source>If you're going to do that a lot, you might want to grab a copy of the function reference into a variable for reuse, e.g.:</source>
          <target state="translated">Si vas a hacer eso a menudo,tal vez quieras tomar una copia de la referencia de la función en una variable para reutilizarla,por ejemplo:</target>
        </trans-unit>
        <trans-unit id="dd131ceaa21a63af287b484051a159dfdece2176" translate="yes" xml:space="preserve">
          <source>If you're worried about the runtime cost of making a function call for each array entry, don't be; &lt;a href=&quot;http://blog.niftysnippets.org/2012/02/foreach-and-runtime-cost.html&quot;&gt;details&lt;/a&gt;.</source>
          <target state="translated">Si le preocupa el costo de tiempo de ejecuci&amp;oacute;n de realizar una llamada de funci&amp;oacute;n para cada entrada de matriz, no se preocupe; &lt;a href=&quot;http://blog.niftysnippets.org/2012/02/foreach-and-runtime-cost.html&quot;&gt;detalles&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="40638a60a037cede5301ef987dee8d1ace1a9b0f" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript#ECMAScript.2C_5th_Edition&quot;&gt;ECMAScript 5&lt;/a&gt; there will be a forEach method on the array prototype, but it is not supported in legacy browsers. So to be able to use it consistently you must either have an environment that supports it (for example, &lt;a href=&quot;http://en.wikipedia.org/wiki/Node.js&quot;&gt;Node.js&lt;/a&gt; for server side JavaScript), or use a &quot;Polyfill&quot;. The Polyfill for this functionality is, however, trivial and since it makes the code easier to read, it is a good polyfill to include.</source>
          <target state="translated">En &lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript#ECMAScript.2C_5th_Edition&quot;&gt;ECMAScript 5&lt;/a&gt; habr&amp;aacute; un m&amp;eacute;todo forEach en el prototipo de matriz, pero no es compatible con los navegadores heredados. Por lo tanto, para poder usarlo de manera consistente, debe tener un entorno que lo admita (por ejemplo, &lt;a href=&quot;http://en.wikipedia.org/wiki/Node.js&quot;&gt;Node.js&lt;/a&gt; para JavaScript del lado del servidor) o usar un &quot;Polyfill&quot;. Sin embargo, el Polyfill para esta funcionalidad es trivial y, dado que hace que el c&amp;oacute;digo sea m&amp;aacute;s f&amp;aacute;cil de leer, es un buen polyfill para incluir.</target>
        </trans-unit>
        <trans-unit id="1280ba4c719753e18ee74f317b64294340b96082" translate="yes" xml:space="preserve">
          <source>In &lt;em&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for_each...in&quot;&gt;for_each...in&lt;/a&gt;&lt;/em&gt; (MDN) it is explained that &lt;code&gt;for each (variable in object)&lt;/code&gt; is deprecated as the part of ECMA-357 (&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/E4X&quot;&gt;EAX&lt;/a&gt;) standard.</source>
          <target state="translated">En &lt;em&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for_each...in&quot;&gt;for_each ... in&lt;/a&gt;&lt;/em&gt; (MDN) se explica que &lt;code&gt;for each (variable in object)&lt;/code&gt; est&amp;aacute; en desuso como parte del est&amp;aacute;ndar ECMA-357 ( &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/E4X&quot;&gt;EAX&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="9beb0c3410927f822bce0dcb01f44ccc46812376" translate="yes" xml:space="preserve">
          <source>In ES2015 and higher, you can make your index and value variables local to the &lt;code&gt;for&lt;/code&gt; loop:</source>
          <target state="translated">En ES2015 y superior, puede hacer que sus variables de &amp;iacute;ndice y valor sean locales para el bucle &lt;code&gt;for&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="2cd3e11ca52c117696a761c0998ed90bfcd20a96" translate="yes" xml:space="preserve">
          <source>In any vaguely-modern environment (so, not IE8) where you have access to the &lt;code&gt;Array&lt;/code&gt; features added by ES5 (directly or using polyfills), you can use &lt;code&gt;forEach&lt;/code&gt; (&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-array.prototype.foreach&quot;&gt;&lt;code&gt;spec&lt;/code&gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach&quot;&gt;&lt;code&gt;MDN&lt;/code&gt;&lt;/a&gt;):</source>
          <target state="translated">En cualquier entorno vagamente moderno (por lo tanto, no IE8) donde tiene acceso a las funciones de &lt;code&gt;Array&lt;/code&gt; agregadas por ES5 (directamente o usando polyfills), puede usar &lt;code&gt;forEach&lt;/code&gt; ( &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-array.prototype.foreach&quot;&gt; &lt;code&gt;spec&lt;/code&gt; &lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach&quot;&gt; &lt;code&gt;MDN&lt;/code&gt; &lt;/a&gt; ):</target>
        </trans-unit>
        <trans-unit id="b3516d7a0d41bd0df93ef14853544e18b99e2cde" translate="yes" xml:space="preserve">
          <source>In case, more interested on operation on array using some inbuilt feature.</source>
          <target state="translated">Por si acaso,más interesado en la operación en la matriz usando alguna característica incorporada.</target>
        </trans-unit>
        <trans-unit id="99006d079057d1e0af6e98a54c83d22f0c6ba073" translate="yes" xml:space="preserve">
          <source>In general for higher level code where &lt;strong&gt;clarity and safety&lt;/strong&gt; are greater concerns, I previously recommended using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach&quot;&gt;&lt;code&gt;Array::forEach&lt;/code&gt;&lt;/a&gt; as your default pattern for looping (although these days I prefer to use &lt;code&gt;for..of&lt;/code&gt;).  Reasons to prefer &lt;code&gt;forEach&lt;/code&gt; over a reverse loop are:</source>
          <target state="translated">En general, para el c&amp;oacute;digo de nivel superior donde la &lt;strong&gt;claridad y la seguridad&lt;/strong&gt; son mayores preocupaciones, anteriormente recomend&amp;eacute; usar &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach&quot;&gt; &lt;code&gt;Array::forEach&lt;/code&gt; &lt;/a&gt; como patr&amp;oacute;n predeterminado para el bucle (aunque en estos d&amp;iacute;as prefiero usarlo para &lt;code&gt;for..of&lt;/code&gt; ). Las razones para preferir cada &lt;code&gt;forEach&lt;/code&gt; sobre un bucle inverso son:</target>
        </trans-unit>
        <trans-unit id="268bee6cf2ad84db04fb8978e3c41ceecff7fc38" translate="yes" xml:space="preserve">
          <source>In tests we calculate the sum of array elements. I perform a test for small arrays (10 elements) and big arrays (1M elements) and divide them into three groups:</source>
          <target state="translated">En las pruebas calculamos la suma de los elementos de la matriz.Hago una prueba para matrices pequeñas (10 elementos)y grandes (1M elementos)y las divido en tres grupos:</target>
        </trans-unit>
        <trans-unit id="3fb2676f32b14c1a1bbfd3126c8971f3d39c2fe6" translate="yes" xml:space="preserve">
          <source>In the traditional forwards for loop, &lt;code&gt;i++&lt;/code&gt; and &lt;code&gt;++i&lt;/code&gt; are interchangeable (as Douglas Crockford points out).  However in the reverse for loop, because our decrement is also our condition expression, we must stick with &lt;code&gt;i--&lt;/code&gt; if we want to process the item at index 0.</source>
          <target state="translated">En los bucles for for tradicionales, &lt;code&gt;i++&lt;/code&gt; y &lt;code&gt;++i&lt;/code&gt; son intercambiables (como se&amp;ntilde;ala Douglas Crockford). Sin embargo, en el reverso del bucle for, dado que nuestro decremento es tambi&amp;eacute;n nuestra expresi&amp;oacute;n de condici&amp;oacute;n, debemos mantenernos con &lt;code&gt;i--&lt;/code&gt; si queremos procesar el &amp;iacute;tem en el &amp;iacute;ndice 0.</target>
        </trans-unit>
        <trans-unit id="9f2a940ef1876e18b0a2d2adbbb0054401c1e001" translate="yes" xml:space="preserve">
          <source>It gives you a free scope for closures.</source>
          <target state="translated">Te da un margen libre para los cierres.</target>
        </trans-unit>
        <trans-unit id="a26206100bd26a40a1a52fbba4254be28b14f1b7" translate="yes" xml:space="preserve">
          <source>It indicates that &lt;em&gt;i&lt;/em&gt; is not going to be shifted within the block (which is always a possible surprise hiding in long &lt;code&gt;for&lt;/code&gt; and &lt;code&gt;while&lt;/code&gt; loops).</source>
          <target state="translated">Indica que no voy a desplazarme dentro del bloque (lo cual siempre es una sorpresa posible escondi&amp;eacute;ndose en bucles largos y largos).</target>
        </trans-unit>
        <trans-unit id="9c1e136ecc6d6ff5b0bb24c065a47cca352d2f77" translate="yes" xml:space="preserve">
          <source>It is &lt;strong&gt;shorter&lt;/strong&gt; to type, and &lt;strong&gt;read&lt;/strong&gt;, than some of the other options available.  Although it loses to &lt;code&gt;forEach()&lt;/code&gt; and to ES6's &lt;code&gt;for ... of&lt;/code&gt;.</source>
          <target state="translated">Es &lt;strong&gt;m&amp;aacute;s corto&lt;/strong&gt; de escribir y &lt;strong&gt;leer&lt;/strong&gt; que algunas de las otras opciones disponibles. Aunque pierde para &lt;code&gt;forEach()&lt;/code&gt; y para ES6 &lt;code&gt;for ... of&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e1592309e0411fe23d697624a6b081cb0ad5da05" translate="yes" xml:space="preserve">
          <source>It is clearer to read.</source>
          <target state="translated">Es más claro para leer.</target>
        </trans-unit>
        <trans-unit id="6fa8793a5b9a126bead6bc588548bf65c1d59eff" translate="yes" xml:space="preserve">
          <source>It is now even better to use for..of!</source>
          <target state="translated">Ahora es aún mejor usar para...¡de!</target>
        </trans-unit>
        <trans-unit id="4c654c5e846023844a47e14f6c000b121f5ea18b" translate="yes" xml:space="preserve">
          <source>It looks like the traditional &lt;code&gt;for i&lt;/code&gt; (&lt;strong&gt;Aa&lt;/strong&gt;) is a good choice to write fast code on all browsers.</source>
          <target state="translated">Parece que el tradicional &lt;code&gt;for i&lt;/code&gt; ( &lt;strong&gt;Aa&lt;/strong&gt; ) es una buena opci&amp;oacute;n para escribir c&amp;oacute;digo r&amp;aacute;pido en todos los navegadores.</target>
        </trans-unit>
        <trans-unit id="b05ec9bd35f4ee8f34e03d2c14bb2cf3574009f2" translate="yes" xml:space="preserve">
          <source>It processes the items in reverse order.  If you were building a new array from the results, or printing things on screen, naturally &lt;strong&gt;the output will be reversed&lt;/strong&gt; with respect to the original order.</source>
          <target state="translated">Procesa los art&amp;iacute;culos en orden inverso. Si estaba creando una nueva matriz a partir de los resultados, o imprimiendo cosas en la pantalla, naturalmente, &lt;strong&gt;la salida se invertir&amp;aacute;&lt;/strong&gt; con respecto al orden original.</target>
        </trans-unit>
        <trans-unit id="92650d012635dc87fe3676b746f2df0b221ba0a1" translate="yes" xml:space="preserve">
          <source>It reduces leakage of local variables and accidental collision with (and mutation of) outer variables.</source>
          <target state="translated">Reduce la fuga de variables locales y la colisión accidental con (y la mutación de)las variables externas.</target>
        </trans-unit>
        <trans-unit id="c027793c4fcbf7f7be6aed911c23cf2d476fffe0" translate="yes" xml:space="preserve">
          <source>It returns:</source>
          <target state="translated">Vuelve:</target>
        </trans-unit>
        <trans-unit id="5a66b905f75247eeead429833c89c54b6d523c59" translate="yes" xml:space="preserve">
          <source>It was better to use forEach()</source>
          <target state="translated">Era mejor usar para cada uno...</target>
        </trans-unit>
        <trans-unit id="970da87efbe446de6ff12d27fb12ff80a89bc4c8" translate="yes" xml:space="preserve">
          <source>It's a &lt;a href=&quot;http://en.wikipedia.org/wiki/Sparse_array&quot;&gt;&lt;em&gt;sparse&lt;/em&gt; arrays&lt;/a&gt; with &lt;strong&gt;massive&lt;/strong&gt; gaps in it, or</source>
          <target state="translated">Es una &lt;a href=&quot;http://en.wikipedia.org/wiki/Sparse_array&quot;&gt;matriz &lt;em&gt;escasa&lt;/em&gt;&lt;/a&gt; con huecos &lt;strong&gt;masivos&lt;/strong&gt; , o</target>
        </trans-unit>
        <trans-unit id="76bb57f065042a04a16fd907fcb40021f5d1d715" translate="yes" xml:space="preserve">
          <source>It's also possible to use ES2015's &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax&quot;&gt;spread syntax&lt;/a&gt; with JavaScript engines that support this feature:</source>
          <target state="translated">Tambi&amp;eacute;n es posible usar la &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax&quot;&gt;sintaxis extendida&lt;/a&gt; de ES2015 con motores JavaScript que admiten esta funci&amp;oacute;n:</target>
        </trans-unit>
        <trans-unit id="cf3b30579b92065eb7bc495af1fbdb1ca47efb2e" translate="yes" xml:space="preserve">
          <source>It's important to note that &lt;code&gt;Array.prototype.forEach&lt;/code&gt; doesn't break when the callback returns &lt;code&gt;false&lt;/code&gt;. &lt;a href=&quot;http://en.wikipedia.org/wiki/JQuery&quot;&gt;jQuery&lt;/a&gt; and &lt;a href=&quot;http://en.wikipedia.org/wiki/Underscore.js&quot;&gt;Underscore.js&lt;/a&gt; provide their own variations on &lt;code&gt;each&lt;/code&gt; to provide loops that can be short-circuited.</source>
          <target state="translated">Es importante tener en cuenta que &lt;code&gt;Array.prototype.forEach&lt;/code&gt; no se rompe cuando la devoluci&amp;oacute;n de llamada devuelve &lt;code&gt;false&lt;/code&gt; . &lt;a href=&quot;http://en.wikipedia.org/wiki/JQuery&quot;&gt;jQuery&lt;/a&gt; y &lt;a href=&quot;http://en.wikipedia.org/wiki/Underscore.js&quot;&gt;Underscore.js&lt;/a&gt; proporcionan sus propias variaciones en &lt;code&gt;each&lt;/code&gt; para proporcionar bucles que se pueden cortocircuitar.</target>
        </trans-unit>
        <trans-unit id="8422ffb83ff856b5915a4e7e4e65862872e7a17c" translate="yes" xml:space="preserve">
          <source>Iterators are exhaustible in nature.</source>
          <target state="translated">Los iteradores son de naturaleza exhausta.</target>
        </trans-unit>
        <trans-unit id="dd908ea29f0174193357642014bde7f4f593cc70" translate="yes" xml:space="preserve">
          <source>Iterators improve efficiency by letting you consume the items in a list one at a time as if they were a stream. What makes an iterator special is how it traverses a collection. Other loops need to load the entire collection up front in order to iterate over it, whereas an iterator only needs to know the current position in the collection.</source>
          <target state="translated">Los iteradores mejoran la eficiencia al permitirle consumir los artículos de una lista uno a uno como si fueran una corriente.Lo que hace especial a un iterador es cómo atraviesa una colección.Otros bucles necesitan cargar toda la colección por adelantado para iterar sobre ella,mientras que un iterador sólo necesita saber la posición actual en la colección.</target>
        </trans-unit>
        <trans-unit id="b4cec08cd006bef91b92cd98b872c068dfc6d47a" translate="yes" xml:space="preserve">
          <source>JavaScript has powerful semantics for looping through arrays and array-like objects. I've split the answer into two parts: Options for genuine arrays, and options for things that are just array-&lt;em&gt;like&lt;/em&gt;, such as the &lt;code&gt;arguments&lt;/code&gt; object, other iterable objects (ES2015+), DOM collections, and so on.</source>
          <target state="translated">JavaScript tiene una sem&amp;aacute;ntica poderosa para recorrer las matrices y los objetos similares a las matrices. He dividido la respuesta en dos partes: opciones para matrices genuinas y opciones para cosas que son simplemente &lt;em&gt;como&lt;/em&gt; matrices, como el objeto de &lt;code&gt;arguments&lt;/code&gt; , otros objetos iterables (ES2015 +), colecciones DOM, etc.</target>
        </trans-unit>
        <trans-unit id="45b89ea7174719fe9456dfc7830bcd1c7b08f842" translate="yes" xml:space="preserve">
          <source>Looking only at that first example: You can use &lt;code&gt;for-in&lt;/code&gt; to visit those sparse array elements if you use appropriate safeguards:</source>
          <target state="translated">Mirando solo ese primer ejemplo: puede usar &lt;code&gt;for-in&lt;/code&gt; para visitar esos elementos de matriz dispersos si usa las salvaguardas apropiadas:</target>
        </trans-unit>
        <trans-unit id="4839c1708da783319e9fbcbf7bb1edf7ed55c460" translate="yes" xml:space="preserve">
          <source>Loop backwards</source>
          <target state="translated">El bucle al revés</target>
        </trans-unit>
        <trans-unit id="116eba95b7902da0b19b136ed240ca0e56d035ae" translate="yes" xml:space="preserve">
          <source>No break, continue, or return support. &lt;code&gt;continue&lt;/code&gt; is actually supported by &quot;&lt;a href=&quot;https://github.com/angular/angular.js/issues/263&quot;&gt;accident&lt;/a&gt;&quot;, to continue in an &lt;code&gt;angular.forEach&lt;/code&gt; you simple put a &lt;code&gt;return;&lt;/code&gt; statement in the function like &lt;code&gt;angular.forEach(array, function(item) { if (someConditionIsTrue) return; });&lt;/code&gt; which will cause it to continue out of the function for that iteration. This is also due to the fact that the native &lt;code&gt;forEach&lt;/code&gt; does not support break or continue either.</source>
          <target state="translated">Sin descanso, continuar o devolver el apoyo. &lt;code&gt;continue&lt;/code&gt; realidad es compatible con &quot; &lt;a href=&quot;https://github.com/angular/angular.js/issues/263&quot;&gt;accidente&lt;/a&gt; &quot;, para continuar en un &lt;code&gt;angular.forEach&lt;/code&gt; para cada uno simple poner un &lt;code&gt;return;&lt;/code&gt; declaraci&amp;oacute;n en la funci&amp;oacute;n como &lt;code&gt;angular.forEach(array, function(item) { if (someConditionIsTrue) return; });&lt;/code&gt; lo que har&amp;aacute; que contin&amp;uacute;e fuera de la funci&amp;oacute;n para esa iteraci&amp;oacute;n. Esto tambi&amp;eacute;n se debe al hecho de que el &lt;code&gt;forEach&lt;/code&gt; nativo tampoco admite interrupci&amp;oacute;n o continuaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="b8c4d2fd6737ec63b08a652d9add0b5b76e57401" translate="yes" xml:space="preserve">
          <source>Note the three checks:</source>
          <target state="translated">Fíjese en las tres comprobaciones:</target>
        </trans-unit>
        <trans-unit id="98d5f549991350bbddfb1b3e02a8c7d43a397e2d" translate="yes" xml:space="preserve">
          <source>Note, however, that this approach is only good if you have a dense array, and each index is occupied by an element. If the array is sparse, then you can run into performance problems with this approach, since you will iterate over a lot of indices that do not &lt;em&gt;really&lt;/em&gt; exist in the array. In this case, a &lt;code&gt;for .. in&lt;/code&gt;-loop might be a better idea. &lt;strong&gt;However&lt;/strong&gt;, you must use the appropriate safeguards to ensure that only the desired properties of the array (that is, the array elements) are acted upon, since the &lt;code&gt;for..in&lt;/code&gt;-loop will also be enumerated in legacy browsers, or if the additional properties are defined as &lt;code&gt;enumerable&lt;/code&gt;.</source>
          <target state="translated">Sin embargo, tenga en cuenta que este enfoque solo es bueno si tiene una matriz densa y cada &amp;iacute;ndice est&amp;aacute; ocupado por un elemento. Si la matriz es escasa, entonces puede encontrar problemas de rendimiento con este enfoque, ya que repetir&amp;aacute; muchos &amp;iacute;ndices que &lt;em&gt;realmente&lt;/em&gt; no existen en la matriz. En este caso, un &lt;code&gt;for .. in&lt;/code&gt; loop podr&amp;iacute;a ser una mejor idea. &lt;strong&gt;Sin embargo&lt;/strong&gt; , debe usar las medidas de seguridad adecuadas para garantizar que solo se act&amp;uacute;en las propiedades deseadas de la matriz (es decir, los elementos de la matriz), ya que &lt;code&gt;for..in&lt;/code&gt; -loop tambi&amp;eacute;n se enumerar&amp;aacute; en los navegadores heredados, o si Las propiedades se definen como &lt;code&gt;enumerable&lt;/code&gt; s .</target>
        </trans-unit>
        <trans-unit id="cdb386055d71d4e57655448305f3f266ba898acc" translate="yes" xml:space="preserve">
          <source>Now there are pros and cons of using the &lt;code&gt;angular.forEach&lt;/code&gt; function as opposed to the built in vanilla-flavored &lt;code&gt;for&lt;/code&gt; loop.</source>
          <target state="translated">Ahora hay ventajas y desventajas de usar la funci&amp;oacute;n &lt;code&gt;angular.forEach&lt;/code&gt; en oposici&amp;oacute;n al bucle &lt;code&gt;for&lt;/code&gt; con sabor a vainilla incorporado.</target>
        </trans-unit>
        <trans-unit id="ca0defbc542adca7eb89b7d006ccdd58542fae1e" translate="yes" xml:space="preserve">
          <source>Objects are not &lt;code&gt;iterable&lt;/code&gt; by default. Use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in&quot;&gt;&lt;code&gt;for..in&lt;/code&gt;&lt;/a&gt; in that case because instead of values it works with keys.</source>
          <target state="translated">Los objetos no son &lt;code&gt;iterable&lt;/code&gt; s por defecto. Use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in&quot;&gt; &lt;code&gt;for..in&lt;/code&gt; &lt;/a&gt; en ese caso porque en lugar de valores funciona con claves.</target>
        </trans-unit>
        <trans-unit id="dac14b18ddbcf811caa6f41435770bfcac91def3" translate="yes" xml:space="preserve">
          <source>Obviously, a simple &lt;code&gt;for&lt;/code&gt; loop applies to array-like objects.</source>
          <target state="translated">Obviamente, un bucle &lt;code&gt;for&lt;/code&gt; simple se aplica a objetos tipo matriz.</target>
        </trans-unit>
        <trans-unit id="0b2eddf2aee3155f4ce4917a2380a892eac5b90f" translate="yes" xml:space="preserve">
          <source>Okay, let's look at our options:</source>
          <target state="translated">Bien,veamos nuestras opciones:</target>
        </trans-unit>
        <trans-unit id="a72c2c53fbdfb2727533feb058f51addfd63ad98" translate="yes" xml:space="preserve">
          <source>Or if you wanted to get an array of the tag names of the elements with a given class, you'd use the mapping function:</source>
          <target state="translated">O si quisieras obtener un conjunto de los nombres de las etiquetas de los elementos con una clase determinada,usarías la función de mapeo:</target>
        </trans-unit>
        <trans-unit id="073b8d82f68c2fdbe0506bde968834e71b06dd49" translate="yes" xml:space="preserve">
          <source>Other times, you may want to convert an array-like object into a true array. Doing that is surprisingly easy:</source>
          <target state="translated">Otras veces,puede que quieras convertir un objeto parecido a una matriz en una verdadera matriz.Hacer eso es sorprendentemente fácil:</target>
        </trans-unit>
        <trans-unit id="f3c8c95c5e534bcd2ea0034a0d83177efa6923f4" translate="yes" xml:space="preserve">
          <source>Output:</source>
          <target state="translated">Output:</target>
        </trans-unit>
        <trans-unit id="63c904559993935c470f516c8b549ca7f3640dbb" translate="yes" xml:space="preserve">
          <source>Performance</source>
          <target state="translated">Performance</target>
        </trans-unit>
        <trans-unit id="aab5f282758bebdcb0646ab510ae5cc532d051d9" translate="yes" xml:space="preserve">
          <source>Personally, I tend to use whatever looks easiest to read, unless performance or minification has become a major concern.  So these days I prefer to use &lt;code&gt;for..of&lt;/code&gt; instead of &lt;code&gt;forEach()&lt;/code&gt;, but I will always use &lt;code&gt;map&lt;/code&gt; or &lt;code&gt;filter&lt;/code&gt; or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find&quot;&gt;&lt;code&gt;find&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some&quot;&gt;&lt;code&gt;some&lt;/code&gt;&lt;/a&gt; when applicable. 
 (For the sake of my colleagues, I rarely use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce&quot;&gt;&lt;code&gt;reduce&lt;/code&gt;&lt;/a&gt;.)</source>
          <target state="translated">Personalmente, tiendo a usar lo que parece m&amp;aacute;s f&amp;aacute;cil de leer, a menos que el rendimiento o la minificaci&amp;oacute;n se hayan convertido en una preocupaci&amp;oacute;n importante. As&amp;iacute; que en estos d&amp;iacute;as prefiero usar &lt;code&gt;for..of&lt;/code&gt; en lugar de &lt;code&gt;forEach()&lt;/code&gt; , pero siempre usar&amp;eacute; &lt;code&gt;map&lt;/code&gt; o &lt;code&gt;filter&lt;/code&gt; o &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find&quot;&gt; &lt;code&gt;find&lt;/code&gt; &lt;/a&gt; o &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some&quot;&gt; &lt;code&gt;some&lt;/code&gt; &lt;/a&gt; cuando corresponda. (Por el bien de mis colegas, rara vez uso &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce&quot;&gt; &lt;code&gt;reduce&lt;/code&gt; &lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="d3e73cee41706cbf172168c939a770206031ae4a" translate="yes" xml:space="preserve">
          <source>Probably the &lt;code&gt;for(i = 0; i &amp;lt; array.length; i++)&lt;/code&gt; loop is not the best choice. Why? If you have this:</source>
          <target state="translated">Probablemente el bucle &lt;code&gt;for(i = 0; i &amp;lt; array.length; i++)&lt;/code&gt; no sea la mejor opci&amp;oacute;n. &amp;iquest;Por qu&amp;eacute;? Si tienes esto:</target>
        </trans-unit>
        <trans-unit id="5ca16fb6579631abba9ef29095127fc1724ade2e" translate="yes" xml:space="preserve">
          <source>Repeatedly inserting siblings into the DOM as a first child in order to retain their order is &lt;strong&gt;less efficient&lt;/strong&gt;.  (The browser would keep having to shift things right.)  To create DOM nodes efficiently and in order, just loop forwards and append as normal (and also use a &quot;document fragment&quot;).</source>
          <target state="translated">Insertar repetidamente hermanos en el DOM como primer hijo para retener su orden es &lt;strong&gt;menos eficiente&lt;/strong&gt; . (El navegador seguir&amp;iacute;a teniendo que cambiar las cosas correctamente). Para crear nodos DOM de manera eficiente y en orden, simplemente realice un bucle hacia adelante y agregue de forma normal (y tambi&amp;eacute;n use un &quot;fragmento de documento&quot;).</target>
        </trans-unit>
        <trans-unit id="c3c204bcc11d0ba16e5b10935b855c9231c60df7" translate="yes" xml:space="preserve">
          <source>Results for Chrome. You can perform the test on your machine &lt;a href=&quot;https://jsbench.me/9uk4bj4svg&quot;&gt;here&lt;/a&gt;</source>
          <target state="translated">Resultados para Chrome. Puede realizar la prueba en su m&amp;aacute;quina &lt;a href=&quot;https://jsbench.me/9uk4bj4svg&quot;&gt;aqu&amp;iacute;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2632a58b332b7d1089e6d3db9b89fa34f55982ee" translate="yes" xml:space="preserve">
          <source>Results for Chrome. You can perform the test on your machine &lt;a href=&quot;https://jsbench.me/pxk4bicjru&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">Resultados para Chrome. Puede realizar la prueba en su m&amp;aacute;quina &lt;a href=&quot;https://jsbench.me/pxk4bicjru&quot;&gt;aqu&amp;iacute;&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="2941ce8fc00301085c9d7ce71d82ff621ce0e501" translate="yes" xml:space="preserve">
          <source>Results for all tested browsers</source>
          <target state="translated">Resultados de todos los navegadores probados</target>
        </trans-unit>
        <trans-unit id="3ab8b51db1affd18d3dd969199d9006feae51589" translate="yes" xml:space="preserve">
          <source>See #4, we'll have to see how iterators play out.</source>
          <target state="translated">Vea el número 4,tendremos que ver cómo funcionan los iteradores.</target>
        </trans-unit>
        <trans-unit id="2d8243a2c0e464492c9d563c4f92c56ae3421bcc" translate="yes" xml:space="preserve">
          <source>See also</source>
          <target state="translated">Ver también</target>
        </trans-unit>
        <trans-unit id="b492c5ea4eeb39652fee30d40510ca39a54045aa" translate="yes" xml:space="preserve">
          <source>See the &lt;em&gt;Caveat for host-provided objects&lt;/em&gt; below. In particular, note that this will fail in IE8 and earlier, which don't let you use host-provided objects as &lt;code&gt;this&lt;/code&gt; like that.</source>
          <target state="translated">Vea la &lt;em&gt;Advertencia para los objetos proporcionados por el host a&lt;/em&gt; continuaci&amp;oacute;n. En particular, tenga en cuenta que esto fallar&amp;aacute; en IE8 y versiones anteriores, lo que no le permite usar objetos proporcionados por el host de &lt;code&gt;this&lt;/code&gt; manera.</target>
        </trans-unit>
        <trans-unit id="919b9d8e3baf041ad3035d3f106002059a32c5a7" translate="yes" xml:space="preserve">
          <source>Should I always use it?</source>
          <target state="translated">¿Debo usarla siempre?</target>
        </trans-unit>
        <trans-unit id="4bcb4e163bf193fe874c35e7a1a754e4ed2bd51c" translate="yes" xml:space="preserve">
          <source>Show code snippet</source>
          <target state="translated">Mostrar fragmento de código</target>
        </trans-unit>
        <trans-unit id="90d4fe421bc14a9a7cd0cfb17b98bb87c323df29" translate="yes" xml:space="preserve">
          <source>Similarly, when modifying or removing &lt;strong&gt;nested&lt;/strong&gt; DOM elements, processing in reverse can &lt;strong&gt;circumvent errors&lt;/strong&gt;. For example, consider modifying the innerHTML of a parent node before handling its children.  By the time the child node is reached it will be detached from the DOM, having been replaced by a newly created child when the parent's innerHTML was written.</source>
          <target state="translated">Del mismo modo, al modificar o eliminar elementos DOM &lt;strong&gt;anidados&lt;/strong&gt; , el procesamiento en reversa puede &lt;strong&gt;evitar los errores&lt;/strong&gt; . Por ejemplo, considere modificar el innerHTML de un nodo padre antes de manejar sus hijos. Cuando se alcanza el nodo secundario, se separar&amp;aacute; del DOM y se reemplazar&amp;aacute; por un elemento secundario reci&amp;eacute;n creado cuando se escribi&amp;oacute; innerHTML del elemento primario.</target>
        </trans-unit>
        <trans-unit id="9042b86e2d8972b544eebed08f73160765222f7f" translate="yes" xml:space="preserve">
          <source>So for instance, if we want to convert a &lt;code&gt;NodeList&lt;/code&gt; into a true array, we could do this:</source>
          <target state="translated">Entonces, por ejemplo, si queremos convertir una &lt;code&gt;NodeList&lt;/code&gt; en una verdadera matriz, podr&amp;iacute;amos hacer esto:</target>
        </trans-unit>
        <trans-unit id="1271c2d1e2ea0178abb1749d433619d8ba114b52" translate="yes" xml:space="preserve">
          <source>So for instance, if we want to convert a &lt;code&gt;NodeList&lt;/code&gt; into a true array, with spread syntax this becomes quite succinct:</source>
          <target state="translated">Entonces, por ejemplo, si queremos convertir una &lt;code&gt;NodeList&lt;/code&gt; en una verdadera matriz, con sintaxis extendida esto se vuelve bastante sucinto:</target>
        </trans-unit>
        <trans-unit id="d778f77d45108db7a7e4ef37756d652130403fa5" translate="yes" xml:space="preserve">
          <source>So on the final iteration, &lt;em&gt;i&lt;/em&gt; was previously &lt;strong&gt;1&lt;/strong&gt; and the &lt;code&gt;i--&lt;/code&gt; expression changes it to &lt;strong&gt;0&lt;/strong&gt; but actually yields &lt;strong&gt;1&lt;/strong&gt; (truthy), and so the condition passes.  On the next iteration &lt;code&gt;i--&lt;/code&gt; changes &lt;em&gt;i&lt;/em&gt; to &lt;strong&gt;-1&lt;/strong&gt; but yields &lt;strong&gt;0&lt;/strong&gt; (falsey), causing execution to immediately drop out of the bottom of the loop.</source>
          <target state="translated">Entonces, en la iteraci&amp;oacute;n final, anteriormente era &lt;strong&gt;1&lt;/strong&gt; y la expresi&amp;oacute;n &lt;code&gt;i--&lt;/code&gt; lo cambia a &lt;strong&gt;0&lt;/strong&gt; pero en realidad produce &lt;strong&gt;1&lt;/strong&gt; (verdad), y entonces la condici&amp;oacute;n pasa. En la siguiente iteraci&amp;oacute;n, &lt;code&gt;i--&lt;/code&gt; cambia &lt;em&gt;i&lt;/em&gt; a &lt;strong&gt;-1&lt;/strong&gt; pero produce &lt;strong&gt;0&lt;/strong&gt; (falsey), lo que hace que la ejecuci&amp;oacute;n se salga inmediatamente del fondo del bucle.</target>
        </trans-unit>
        <trans-unit id="ec2c077f94e3ef98852872b7d08256a523f61745" translate="yes" xml:space="preserve">
          <source>Some &lt;a href=&quot;http://en.wikipedia.org/wiki/C_%28programming_language%29&quot;&gt;C&lt;/a&gt;-style languages use &lt;code&gt;foreach&lt;/code&gt; to loop through enumerations. In JavaScript this is done with the &lt;a href=&quot;https://developer.mozilla.org/en/JavaScript/Reference/Statements/for...in&quot;&gt;&lt;code&gt;for..in&lt;/code&gt; loop structure&lt;/a&gt;:</source>
          <target state="translated">Algunos &lt;a href=&quot;http://en.wikipedia.org/wiki/C_%28programming_language%29&quot;&gt;lenguajes de&lt;/a&gt; estilo C usan &lt;code&gt;foreach&lt;/code&gt; para recorrer las enumeraciones. En JavaScript, esto se hace con la &lt;a href=&quot;https://developer.mozilla.org/en/JavaScript/Reference/Statements/for...in&quot;&gt;estructura &lt;code&gt;for..in&lt;/code&gt; loop&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="941bae0ecab27ddc205e29dd3a6d3b3bc8f9e89d" translate="yes" xml:space="preserve">
          <source>Some developers use the reverse for loop &lt;em&gt;by default&lt;/em&gt;, unless there is a good reason to loop forwards.</source>
          <target state="translated">Algunos desarrolladores usan el bucle inverso para &lt;em&gt;de forma predeterminada&lt;/em&gt; , a menos que haya una buena raz&amp;oacute;n para avanzar.</target>
        </trans-unit>
        <trans-unit id="3163e5ac5c4f789da55694f27cb9f6c55a337dd5" translate="yes" xml:space="preserve">
          <source>Some people like to draw a little arrow in the reverse &lt;code&gt;for&lt;/code&gt; loop, and end with a wink:</source>
          <target state="translated">A algunas personas les gusta dibujar una peque&amp;ntilde;a flecha en el reverso &lt;code&gt;for&lt;/code&gt; bucle, y terminar con un gui&amp;ntilde;o:</target>
        </trans-unit>
        <trans-unit id="b119d6cd5c4dc707a6167c6c075b24e4d7be734d" translate="yes" xml:space="preserve">
          <source>Sometimes the old ways are the best:</source>
          <target state="translated">A veces las viejas costumbres son las mejores:</target>
        </trans-unit>
        <trans-unit id="59f86f5e3b9995bc329f5d4bc79c9d16c81b5fba" translate="yes" xml:space="preserve">
          <source>Sometimes, you might want to use an iterator &lt;em&gt;explicitly&lt;/em&gt;. You can do that, too, although it's a lot clunkier than &lt;code&gt;for-of&lt;/code&gt;. It looks like this:</source>
          <target state="translated">A veces, es posible que desee utilizar un iterador &lt;em&gt;expl&amp;iacute;citamente&lt;/em&gt; . Tambi&amp;eacute;n puedes hacer eso, aunque es mucho m&amp;aacute;s complicado que &lt;code&gt;for-of&lt;/code&gt; . Se parece a esto:</target>
        </trans-unit>
        <trans-unit id="c7657c048f2c02f83c5e4cef8d5cbd16b976ff8a" translate="yes" xml:space="preserve">
          <source>Suppose you wanted to use &lt;code&gt;forEach&lt;/code&gt; on a &lt;code&gt;Node&lt;/code&gt;'s &lt;code&gt;childNodes&lt;/code&gt; property. You'd do this:</source>
          <target state="translated">Suponga que desea usar &lt;code&gt;forEach&lt;/code&gt; en la propiedad childNodes de un &lt;code&gt;Node&lt;/code&gt; . Har&amp;iacute;as esto:</target>
        </trans-unit>
        <trans-unit id="2870c360b6a5c3b4d815964ddecea3817c257c4c" translate="yes" xml:space="preserve">
          <source>That the key is all decimal digits (e.g., normal string form, not scientific notation), and</source>
          <target state="translated">Que la clave son todos los dígitos decimales (por ejemplo,la forma normal de la cadena,no la notación científica),y</target>
        </trans-unit>
        <trans-unit id="dce363e4d7896cca416fa7202976d0faa93b7cb7" translate="yes" xml:space="preserve">
          <source>That the key's value when coerced to a number is &amp;lt;= 2^32 - 2 (which is 4,294,967,294). Where does that number come from? It's part of the definition of an array index &lt;a href=&quot;https://tc39.github.io/ecma262/#array-index&quot;&gt;in the specification&lt;/a&gt;. Other numbers (non-integers, negative numbers, numbers greater than 2^32 - 2) are not array indexes. The reason it's 2^32 - &lt;strong&gt;2&lt;/strong&gt; is that that makes the greatest index value one lower than 2^32 - &lt;strong&gt;1&lt;/strong&gt;, which is the maximum value an array's &lt;code&gt;length&lt;/code&gt; can have. (E.g., an array's length fits in a 32-bit unsigned integer.) &lt;em&gt;(Props to RobG for pointing out in a comment &lt;a href=&quot;http://blog.niftysnippets.org/2010/11/myths-and-realities-of-forin.html&quot;&gt;on my blog post&lt;/a&gt; that my previous test wasn't quite right.)&lt;/em&gt;</source>
          <target state="translated">Que el valor de la clave cuando se coacciona a un n&amp;uacute;mero es &amp;lt;= 2 ^ 32 - 2 (que es 4,294,967,294). &amp;iquest;De d&amp;oacute;nde viene ese n&amp;uacute;mero? Es parte de la definici&amp;oacute;n de un &amp;iacute;ndice de matriz &lt;a href=&quot;https://tc39.github.io/ecma262/#array-index&quot;&gt;en la especificaci&amp;oacute;n&lt;/a&gt; . Otros n&amp;uacute;meros (no enteros, n&amp;uacute;meros negativos, n&amp;uacute;meros mayores que 2 ^ 32 - 2) no son &amp;iacute;ndices de matriz. La raz&amp;oacute;n por la que es 2 ^ 32 - &lt;strong&gt;2&lt;/strong&gt; es que eso hace que el mayor valor del &amp;iacute;ndice sea menor que 2 ^ 32 - &lt;strong&gt;1&lt;/strong&gt; , que es el valor m&amp;aacute;ximo que puede tener la &lt;code&gt;length&lt;/code&gt; una matriz. (Por ejemplo, la longitud de una matriz cabe en un entero sin signo de 32 bits). &lt;em&gt;(Apoya a RobG por se&amp;ntilde;alar en un comentario &lt;a href=&quot;http://blog.niftysnippets.org/2010/11/myths-and-realities-of-forin.html&quot;&gt;en mi blog&lt;/a&gt; que mi prueba anterior no era del todo correcta).&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a83ef01e292828af9f95ea6fd3cb1ad1a7e9b181" translate="yes" xml:space="preserve">
          <source>That the object has its &lt;em&gt;own&lt;/em&gt; property by that name (not one it inherits from its prototype), and</source>
          <target state="translated">Que el objeto tiene su &lt;em&gt;propia&lt;/em&gt; propiedad con ese nombre (no uno que herede de su prototipo), y</target>
        </trans-unit>
        <trans-unit id="410be7b6d8de783ae1460eb1fb1c418447a833c5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;i--&lt;/code&gt; like solutions where the loop starts from the last array element (&lt;strong&gt;Ac, Bc&lt;/strong&gt;) are usually ~30% slower than forward solutions - probably the reason is the way of &lt;a href=&quot;https://stackoverflow.com/questions/1950878/c-for-loop-indexing-is-forward-indexing-faster-in-new-cpus&quot;&gt;CPU memory cache working&lt;/a&gt; - forward memory reading is more optimal for CPU caching). &lt;strong&gt;Is recommended to NOT USE such solutions.&lt;/strong&gt;</source>
          <target state="translated">Las soluciones &lt;code&gt;i--&lt;/code&gt; like en las que el bucle comienza desde el &amp;uacute;ltimo elemento de matriz ( &lt;strong&gt;Ac, Bc&lt;/strong&gt; ) suelen ser ~ 30% m&amp;aacute;s lentas que las soluciones directas; probablemente la raz&amp;oacute;n sea la forma en que funciona &lt;a href=&quot;https://stackoverflow.com/questions/1950878/c-for-loop-indexing-is-forward-indexing-faster-in-new-cpus&quot;&gt;la memoria cach&amp;eacute;&lt;/a&gt; de la CPU : la lectura de memoria directa es m&amp;aacute;s &amp;oacute;ptima para la CPU almacenamiento en cach&amp;eacute;). &lt;strong&gt;Se recomienda NO UTILIZAR tales soluciones.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="50fab3bc0666321dff613699d5e26402e68c7f7f" translate="yes" xml:space="preserve">
          <source>The benefit for this: You have the reference already in the first like that won't need to be declared later with another line. It is handy when looping trough the object array.</source>
          <target state="translated">El beneficio para esto:Ya tienes la referencia en el primero como eso no necesitará ser declarado más tarde con otra línea.Es útil cuando se hace un bucle a través de la matriz de objetos.</target>
        </trans-unit>
        <trans-unit id="8e2dba3330af35406fa3d1420af1173d75e136d6" translate="yes" xml:space="preserve">
          <source>The braces (&lt;code&gt;{}&lt;/code&gt;) can be omitted when there is only one command (e.g. in the example above).</source>
          <target state="translated">Las llaves ( &lt;code&gt;{}&lt;/code&gt; ) se pueden omitir cuando solo hay un comando (por ejemplo, en el ejemplo anterior).</target>
        </trans-unit>
        <trans-unit id="c098c9f1a959378486a97457d4178958264ad2ec" translate="yes" xml:space="preserve">
          <source>The following examples will use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of&quot;&gt;&lt;code&gt;for...of&lt;/code&gt;&lt;/a&gt; statement and the &lt;a href=&quot;https://developer.mozilla.org/ro/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach&quot;&gt;&lt;code&gt;.forEach&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">Los siguientes ejemplos utilizar&amp;aacute;n la declaraci&amp;oacute;n &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of&quot;&gt; &lt;code&gt;for...of&lt;/code&gt; &lt;/a&gt; y el m&amp;eacute;todo &lt;a href=&quot;https://developer.mozilla.org/ro/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach&quot;&gt; &lt;code&gt;.forEach&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="3a00e7fa39a3bdf93692adc3a257b29ca0ee5020" translate="yes" xml:space="preserve">
          <source>The iterator is an object matching the Iterator definition in the specification. Its &lt;code&gt;next&lt;/code&gt; method returns a new &lt;em&gt;result object&lt;/em&gt; each time you call it. The result object has a property, &lt;code&gt;done&lt;/code&gt;, telling us whether it's done, and a property &lt;code&gt;value&lt;/code&gt; with the value for that iteration. (&lt;code&gt;done&lt;/code&gt; is optional if it would be &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;value&lt;/code&gt; is optional if it would be &lt;code&gt;undefined&lt;/code&gt;.)</source>
          <target state="translated">El iterador es un objeto que coincide con la definici&amp;oacute;n de iterador en la especificaci&amp;oacute;n. Su &lt;code&gt;next&lt;/code&gt; m&amp;eacute;todo devuelve un nuevo &lt;em&gt;objeto de resultado&lt;/em&gt; cada vez que lo llama. El objeto resultante tiene una propiedad, &lt;code&gt;done&lt;/code&gt; , que nos dice si est&amp;aacute; hecho, y un &lt;code&gt;value&lt;/code&gt; propiedad con el valor para esa iteraci&amp;oacute;n. ( &lt;code&gt;done&lt;/code&gt; es opcional si ser&amp;iacute;a &lt;code&gt;false&lt;/code&gt; , el &lt;code&gt;value&lt;/code&gt; es opcional si no estuviera &lt;code&gt;undefined&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="fb536e6fcbd5fa797f6c5702a97e23e4c75f5773" translate="yes" xml:space="preserve">
          <source>The lambda syntax doesn't usually work in Internet&amp;nbsp;Explorer&amp;nbsp;10  or below.</source>
          <target state="translated">La sintaxis lambda no suele funcionar en Internet Explorer 10 o inferior.</target>
        </trans-unit>
        <trans-unit id="866f22286c83f5903a913086e3b75aeeb2603c3c" translate="yes" xml:space="preserve">
          <source>The loop will stop iterating when the condition &lt;code&gt;i--&lt;/code&gt; evaluates to a falsey value (when it yields 0).</source>
          <target state="translated">El ciclo dejar&amp;aacute; de iterar cuando la condici&amp;oacute;n &lt;code&gt;i--&lt;/code&gt; se eval&amp;uacute;e a un valor falsey (cuando produce 0).</target>
        </trans-unit>
        <trans-unit id="80992ad230888519239affffa93744a318eb6afc" translate="yes" xml:space="preserve">
          <source>The loops with array length cached in &lt;code&gt;n&lt;/code&gt; (&lt;strong&gt;Ab, Bb, Be&lt;/strong&gt;) are sometimes faster, sometimes not. Probably compilers automatically detect this situation and introduce caching. The speed differences between the cached and no-cached versions (&lt;strong&gt;Aa, Ba, Bd&lt;/strong&gt;) are about ~1%, so it looks like introduce &lt;code&gt;n&lt;/code&gt; is a &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3470990/is-micro-optimization-worth-the-time/3471000#3471000&quot;&gt;micro-optimisation&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">Los bucles con longitud de matriz en cach&amp;eacute; en &lt;code&gt;n&lt;/code&gt; ( &lt;strong&gt;Ab, Bb, Be&lt;/strong&gt; ) son a veces m&amp;aacute;s r&amp;aacute;pidos, a veces no. Probablemente los compiladores detectan autom&amp;aacute;ticamente esta situaci&amp;oacute;n e introducen el almacenamiento en cach&amp;eacute;. Las diferencias de velocidad entre las versiones en cach&amp;eacute; y no en cach&amp;eacute; ( &lt;strong&gt;Aa, Ba, Bd&lt;/strong&gt; ) son de aproximadamente ~ 1%, por lo que parece que introducir &lt;code&gt;n&lt;/code&gt; es una &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3470990/is-micro-optimization-worth-the-time/3471000#3471000&quot;&gt;microoptimizaci&amp;oacute;n&lt;/a&gt;&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="8e52b46122ec0efd9e5bc3d7eec0fac027826ce2" translate="yes" xml:space="preserve">
          <source>The meaning of &lt;code&gt;value&lt;/code&gt; varies depending on the iterator; arrays support (at least) three functions that return iterators:</source>
          <target state="translated">El significado del &lt;code&gt;value&lt;/code&gt; var&amp;iacute;a seg&amp;uacute;n el iterador; Las matrices admiten (al menos) tres funciones que devuelven iteradores:</target>
        </trans-unit>
        <trans-unit id="6f4344e9b0061937311866ba4501ba441df9956f" translate="yes" xml:space="preserve">
          <source>The method will call from &lt;code&gt;array[0]&lt;/code&gt; to &lt;code&gt;array[2]&lt;/code&gt;. First, this will first reference variables you don't even have, second you would not have the variables in the array, and third this will make the code bolder. Look here, it's what I use:</source>
          <target state="translated">El m&amp;eacute;todo llamar&amp;aacute; desde la &lt;code&gt;array[0]&lt;/code&gt; a la &lt;code&gt;array[2]&lt;/code&gt; . Primero, esto primero har&amp;aacute; referencia a variables que ni siquiera tiene, segundo no tendr&amp;iacute;a las variables en la matriz, y tercero esto har&amp;aacute; que el c&amp;oacute;digo sea m&amp;aacute;s audaz. Mira aqu&amp;iacute;, es lo que uso:</target>
        </trans-unit>
        <trans-unit id="74aa97507801ce4d05b427601775a33b918e48b3" translate="yes" xml:space="preserve">
          <source>The only real use cases for &lt;code&gt;for-in&lt;/code&gt; on an array are:</source>
          <target state="translated">Los &amp;uacute;nicos casos de uso reales para &lt;code&gt;for-in&lt;/code&gt; en una matriz son:</target>
        </trans-unit>
        <trans-unit id="752c45d9e3f0bb5c04149934ef14e0e9e95a2014" translate="yes" xml:space="preserve">
          <source>The other solutions, like &lt;code&gt;for-of&lt;/code&gt; (&lt;strong&gt;Ad&lt;/strong&gt;), all in group &lt;strong&gt;C.&lt;/strong&gt;... are usually 2 - 10 (and more) times slower than &lt;strong&gt;Aa&lt;/strong&gt;, but for small arrays it is ok to use it - for the sake of increase code clarity.</source>
          <target state="translated">Las otras soluciones, como &lt;code&gt;for-of&lt;/code&gt; ( &lt;strong&gt;Ad&lt;/strong&gt; ), todas en el grupo &lt;strong&gt;C.&lt;/strong&gt; ... suelen ser de 2 a 10 (y m&amp;aacute;s) veces m&amp;aacute;s lentas que &lt;strong&gt;Aa&lt;/strong&gt; , pero para arreglos peque&amp;ntilde;os est&amp;aacute; bien usarlo, en aras del aumento C&amp;oacute;digo de claridad.</target>
        </trans-unit>
        <trans-unit id="e6e6a03f8cd96d0cc668913bda563a8e9ba99a69" translate="yes" xml:space="preserve">
          <source>The reverse loop is &lt;strong&gt;confusing&lt;/strong&gt; to junior developers.  (You may consider that an advantage, depending on your outlook.)</source>
          <target state="translated">El bucle inverso es &lt;strong&gt;confuso&lt;/strong&gt; para los desarrolladores junior. (Puede considerar eso una ventaja, dependiendo de su perspectiva).</target>
        </trans-unit>
        <trans-unit id="f1e91d86c7df92b8dd9b5472ca55e71a9d8cd69a" translate="yes" xml:space="preserve">
          <source>The standard way to iterate an array in &lt;a href=&quot;http://en.wikipedia.org/wiki/JavaScript&quot;&gt;JavaScript&lt;/a&gt; is a vanilla &lt;code&gt;for&lt;/code&gt;-loop:</source>
          <target state="translated">La forma est&amp;aacute;ndar de iterar una matriz en &lt;a href=&quot;http://en.wikipedia.org/wiki/JavaScript&quot;&gt;JavaScript&lt;/a&gt; es una vainilla &lt;code&gt;for&lt;/code&gt; -loop:</target>
        </trans-unit>
        <trans-unit id="f83ea1369d58b6fdc00c70cea4bb0aa9a818aa64" translate="yes" xml:space="preserve">
          <source>The trick is that unlike &lt;code&gt;--i&lt;/code&gt;, the trailing &lt;code&gt;i--&lt;/code&gt; operator decrements &lt;code&gt;i&lt;/code&gt; but yields the value &lt;strong&gt;&lt;em&gt;before&lt;/em&gt;&lt;/strong&gt; the decrement.  Your console can demonstrate this:</source>
          <target state="translated">El truco es que, a diferencia de &lt;code&gt;--i&lt;/code&gt; , el operador final &lt;code&gt;i--&lt;/code&gt; disminuye &lt;code&gt;i&lt;/code&gt; pero produce el valor &lt;strong&gt;&lt;em&gt;antes de&lt;/em&gt;&lt;/strong&gt; la disminuci&amp;oacute;n. Su consola puede demostrar esto:</target>
        </trans-unit>
        <trans-unit id="608bdf441fc2978c8b5bcb888401c074fd430bc1" translate="yes" xml:space="preserve">
          <source>The various functions on &lt;code&gt;Array.prototype&lt;/code&gt; are &quot;intentionally generic&quot; and can usually be used on array-like objects via &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-function.prototype.call&quot;&gt;&lt;code&gt;Function#call&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-function.prototype.apply&quot;&gt;&lt;code&gt;Function#apply&lt;/code&gt;&lt;/a&gt;. (See the &lt;em&gt;Caveat for host-provided objects&lt;/em&gt; at the end of this answer, but it's a rare issue.)</source>
          <target state="translated">Las diversas funciones en &lt;code&gt;Array.prototype&lt;/code&gt; son &quot;intencionalmente gen&amp;eacute;ricas&quot; y, por lo general, se pueden usar en objetos similares a una matriz mediante &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-function.prototype.call&quot;&gt; &lt;code&gt;Function#call&lt;/code&gt; &lt;/a&gt; o &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-function.prototype.apply&quot;&gt; &lt;code&gt;Function#apply&lt;/code&gt; &lt;/a&gt; . (Consulte la &lt;em&gt;Advertencia para los objetos proporcionados por el host&lt;/em&gt; al final de esta respuesta, pero es un problema poco frecuente).</target>
        </trans-unit>
        <trans-unit id="5b74a123ca6113288c61c01f944435ca7d90b342" translate="yes" xml:space="preserve">
          <source>Then when you do see the reverse for loop in your code, that is a hint that it is reversed for a good reason (perhaps one of the reasons described above).  And seeing a traditional forward for loop may indicate that shifting can take place.</source>
          <target state="translated">Entonces,cuando veas el bucle inverso en tu código,eso es un indicio de que está invertido por una buena razón (tal vez una de las razones descritas anteriormente).Y ver un avance tradicional para el bucle puede indicar que el cambio puede tener lugar.</target>
        </trans-unit>
        <trans-unit id="d150400a4ca68f73e954c6ea93f05e7de141942b" translate="yes" xml:space="preserve">
          <source>There are &lt;strong&gt;a few ways&lt;/strong&gt; to loop through an array in JavaScript, as below:</source>
          <target state="translated">Hay &lt;strong&gt;algunas formas&lt;/strong&gt; de recorrer una matriz en JavaScript, como se muestra a continuaci&amp;oacute;n:</target>
        </trans-unit>
        <trans-unit id="0b51f25dbb23a6ed31b4ccfd1a12b3fdb1871919" translate="yes" xml:space="preserve">
          <source>There are different ways to use the forEach loop of angular. The simplest and probably most used is</source>
          <target state="translated">Hay diferentes maneras de usar el bucle de cada ángulo.La más simple y probablemente la más usada es</target>
        </trans-unit>
        <trans-unit id="43e3466064c6ca5060bfe7c0d8fe1a2296506e5e" translate="yes" xml:space="preserve">
          <source>There are three implementations of &lt;code&gt;foreach&lt;/code&gt; in &lt;a href=&quot;http://en.wikipedia.org/wiki/JQuery&quot;&gt;jQuery&lt;/a&gt; as follows.</source>
          <target state="translated">Hay tres implementaciones de &lt;code&gt;foreach&lt;/code&gt; en &lt;a href=&quot;http://en.wikipedia.org/wiki/JQuery&quot;&gt;jQuery de la&lt;/a&gt; siguiente manera.</target>
        </trans-unit>
        <trans-unit id="d54c80c3143769b1187df474f58937273f32b476" translate="yes" xml:space="preserve">
          <source>There is a catch. &lt;code&gt;for..in&lt;/code&gt; will loop through each of the object's enumerable members, and the members on its prototype. To avoid reading values that are inherited through the object's prototype, simply check if the property belongs to the object:</source>
          <target state="translated">Hay una trampa. &lt;code&gt;for..in&lt;/code&gt; recorrer&amp;aacute; cada uno de los miembros enumerables del objeto y los miembros de su prototipo. Para evitar leer valores que se heredan a trav&amp;eacute;s del prototipo del objeto, simplemente verifique si la propiedad pertenece al objeto:</target>
        </trans-unit>
        <trans-unit id="93b99dbbcfcfef18eac3c5a89b5362f4491b1f4f" translate="yes" xml:space="preserve">
          <source>There is a debate about whether &lt;code&gt;for..of&lt;/code&gt; or &lt;code&gt;forEach()&lt;/code&gt; are preferable:</source>
          <target state="translated">Existe un debate sobre si es preferible &lt;code&gt;for..of&lt;/code&gt; o &lt;code&gt;forEach()&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="5162299771e3535e699131f35c2cf628ce13a63a" translate="yes" xml:space="preserve">
          <source>There isn't any &lt;code&gt;for each&lt;/code&gt; loop in native &lt;a href=&quot;http://en.wikipedia.org/wiki/JavaScript&quot;&gt;JavaScript&lt;/a&gt;. You can either use libraries to get this functionality (I recommend &lt;a href=&quot;http://en.wikipedia.org/wiki/Underscore.js&quot;&gt;Underscore.js&lt;/a&gt;), use a simple &lt;code&gt;for&lt;/code&gt; in loop.</source>
          <target state="translated">No hay ninguno &lt;code&gt;for each&lt;/code&gt; ciclo en &lt;a href=&quot;http://en.wikipedia.org/wiki/JavaScript&quot;&gt;JavaScript&lt;/a&gt; nativo. Puede usar bibliotecas para obtener esta funcionalidad (recomiendo &lt;a href=&quot;http://en.wikipedia.org/wiki/Underscore.js&quot;&gt;Underscore.js&lt;/a&gt; ), use un bucle simple &lt;code&gt;for&lt;/code&gt; in.</target>
        </trans-unit>
        <trans-unit id="55d52a0b513a03e6f341ec331ed111d51c87156a" translate="yes" xml:space="preserve">
          <source>There's no inbuilt ability to break in &lt;code&gt;forEach&lt;/code&gt;. To interrupt execution use the &lt;code&gt;Array#some&lt;/code&gt; like below:</source>
          <target state="translated">No hay capacidad incorporada para entrar por cada &lt;code&gt;forEach&lt;/code&gt; . Para interrumpir la ejecuci&amp;oacute;n, use el &lt;code&gt;Array#some&lt;/code&gt; como a continuaci&amp;oacute;n:</target>
        </trans-unit>
        <trans-unit id="24112cc482e8cc4c078f7faf03d3a6612e321185" translate="yes" xml:space="preserve">
          <source>This is an iterator for NON-sparse list where the index starts at 0, which is the typical scenario when dealing with document.getElementsByTagName or document.querySelectorAll)</source>
          <target state="translated">Este es un iterador para la lista NO dispersa donde el índice comienza en 0,que es el escenario típico cuando se trata de document.getElementsByTagName o document.querySelectorAll)</target>
        </trans-unit>
        <trans-unit id="b109618ad05adb05d3d283e04dadad94a3074a14" translate="yes" xml:space="preserve">
          <source>This will break whenever the reference is false - falsey (undefined, etc.). It can be used as an advantage though. However, it would make it a little bit harder to read. And also depending on the browser it can be &quot;not&quot; optimized to work faster than the original one.</source>
          <target state="translated">Esto se romperá siempre que la referencia sea falsa-falsa (indefinida,etc.).Sin embargo,se puede utilizar como una ventaja.Sin embargo,lo haría un poco más difícil de leer.Y también,dependiendo del navegador,puede ser &quot;no&quot; optimizado para trabajar más rápido que el original.</target>
        </trans-unit>
        <trans-unit id="cb8a12948118a05c21c4646e9b69844b0d2ce858" translate="yes" xml:space="preserve">
          <source>This works because &lt;code&gt;some&lt;/code&gt; returns true as soon as any of the callbacks, executed in array order, returns true, short-circuiting the execution of the rest. 
&lt;a href=&quot;https://stackoverflow.com/questions/2641347/how-to-short-circuit-array-foreach-like-calling-break&quot;&gt;Original Answer&lt;/a&gt;
see Array prototype for &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.17&quot;&gt;some&lt;/a&gt;</source>
          <target state="translated">Esto funciona porque &lt;code&gt;some&lt;/code&gt; devuelve verdadero tan pronto como cualquiera de las devoluciones de llamada, ejecutadas en orden de matriz, devuelve verdadero, cortando la ejecuci&amp;oacute;n del resto. &lt;a href=&quot;https://stackoverflow.com/questions/2641347/how-to-short-circuit-array-foreach-like-calling-break&quot;&gt;Respuesta original&lt;/a&gt; ver prototipo de matriz para &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.17&quot;&gt;algunos&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4c334db464368d273947e54cf77b80331da64b0f" translate="yes" xml:space="preserve">
          <source>Though, you don't have to do that, you can simply do the following and it's equivalent to the previous example:</source>
          <target state="translated">Aunque,no tienes que hacer eso,puedes simplemente hacer lo siguiente y es equivalente al ejemplo anterior:</target>
        </trans-unit>
        <trans-unit id="257fcf65e941aa6ba5c5e06169df94cf19c12a87" translate="yes" xml:space="preserve">
          <source>Today (2019-12-18) I perform test on my &lt;a href=&quot;https://en.wikipedia.org/wiki/MacOS_High_Sierra&quot;&gt;macOS v10.13.6&lt;/a&gt; (High Sierra), on Chrome v 79.0, Safari v13.0.4 and Firefox v71.0 (64 bit) - conclusions about optimisation (and &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3470990/is-micro-optimization-worth-the-time/3471000#3471000&quot;&gt;micro-optimisation&lt;/a&gt;&lt;/em&gt; which usually is not worth to introduce it to code because the benefit is small, but code complexity grows).</source>
          <target state="translated">Hoy (2019-12-18) realizo una prueba en mi &lt;a href=&quot;https://en.wikipedia.org/wiki/MacOS_High_Sierra&quot;&gt;macOS v10.13.6&lt;/a&gt; (High Sierra), en Chrome v 79.0, Safari v13.0.4 y Firefox v71.0 (64 bits): conclusiones sobre la optimizaci&amp;oacute;n (y &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3470990/is-micro-optimization-worth-the-time/3471000#3471000&quot;&gt;micro-optimizaci&amp;oacute;n&lt;/a&gt;&lt;/em&gt; que por lo general, no vale la pena introducirlo en el c&amp;oacute;digo porque el beneficio es peque&amp;ntilde;o, pero la complejidad del c&amp;oacute;digo crece).</target>
        </trans-unit>
        <trans-unit id="54b58f77bdc50c962ebcb489df02102329ea9473" translate="yes" xml:space="preserve">
          <source>Transform your regular array to iterator using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values&quot;&gt;&lt;code&gt;values()&lt;/code&gt;&lt;/a&gt; method like this:</source>
          <target state="translated">Transforme su matriz regular en iterador utilizando el m&amp;eacute;todo de &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values&quot;&gt; &lt;code&gt;values()&lt;/code&gt; &lt;/a&gt; como este:</target>
        </trans-unit>
        <trans-unit id="286e721a1890a58c29a5c4014f7f586f56cc077f" translate="yes" xml:space="preserve">
          <source>Trivia</source>
          <target state="translated">Trivia</target>
        </trans-unit>
        <trans-unit id="f2407f77f30d5cce56de1bb34c4429f7541eb397" translate="yes" xml:space="preserve">
          <source>Under the covers, that gets an &lt;em&gt;iterator&lt;/em&gt; from the array and loops through it, getting the values from it. This doesn't have the issue that using &lt;code&gt;for-in&lt;/code&gt; has, because it uses an iterator defined by the object (the array), and arrays define that their iterators iterate through their &lt;em&gt;entries&lt;/em&gt; (not their properties). Unlike &lt;code&gt;for-in&lt;/code&gt; in ES5, the order in which the entries are visited is the numeric order of their indexes.</source>
          <target state="translated">Debajo de las cubiertas, eso obtiene un &lt;em&gt;iterador&lt;/em&gt; del conjunto y lo recorre, obteniendo los valores de &amp;eacute;l. Esto no tiene el problema que tiene usar &lt;code&gt;for-in&lt;/code&gt; , porque usa un iterador definido por el objeto (la matriz), y las matrices definen que sus iteradores iteran a trav&amp;eacute;s de sus &lt;em&gt;entradas&lt;/em&gt; (no sus propiedades). A diferencia de &lt;code&gt;for-in&lt;/code&gt; en ES5, el orden en que se visitan las entradas es el orden num&amp;eacute;rico de sus &amp;iacute;ndices.</target>
        </trans-unit>
        <trans-unit id="51d0fcbbedb44b967fe1846371188cf04d2c2452" translate="yes" xml:space="preserve">
          <source>Unless you're supporting obsolete browsers like IE8 (which NetApps shows at just over 4% market share as of this writing in September&amp;nbsp;2016), you can happily use &lt;code&gt;forEach&lt;/code&gt; in a general-purpose web page without a shim. If you do need to support obsolete browsers, shimming/polyfilling &lt;code&gt;forEach&lt;/code&gt; is easily done (search for &quot;es5 shim&quot; for several options).</source>
          <target state="translated">A menos que sea compatible con navegadores obsoletos como IE8 (que NetApps muestra con una participaci&amp;oacute;n de mercado de poco m&amp;aacute;s del 4% a partir de este escrito en septiembre de 2016), puede usar &lt;code&gt;forEach&lt;/code&gt; en una p&amp;aacute;gina web de uso general sin ning&amp;uacute;n problema. Si necesita admitir navegadores obsoletos, el shimming / polyfilling para cada &lt;code&gt;forEach&lt;/code&gt; se hace f&amp;aacute;cilmente (busque &quot;es5 shim&quot; para varias opciones).</target>
        </trans-unit>
        <trans-unit id="431a3b9a552efc88858519dfb72bdcfb495d5966" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;for-in&lt;/code&gt;&lt;em&gt;correctly&lt;/em&gt;</source>
          <target state="translated">Usar &lt;code&gt;for-in&lt;/code&gt; &lt;em&gt;correctamente&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9e0c11cbf7ef3c72db6fc4b3fe5d45b56bc12d21" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;for-of&lt;/code&gt; (use an iterator implicitly) (ES2015+)</source>
          <target state="translated">Use &lt;code&gt;for-of&lt;/code&gt; (use un iterador impl&amp;iacute;citamente) (ES2015 +)</target>
        </trans-unit>
        <trans-unit id="734ae2379fe23a7a3bc38483ac1b653b9d9051b3" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;forEach&lt;/code&gt; and related (ES5+)</source>
          <target state="translated">Uso para cada &lt;code&gt;forEach&lt;/code&gt; y relacionados (ES5 +)</target>
        </trans-unit>
        <trans-unit id="2c08b442b76b66cca66b71d3f1ff947bdd36a587" translate="yes" xml:space="preserve">
          <source>Use a simple &lt;code&gt;for&lt;/code&gt; loop</source>
          <target state="translated">Use un bucle simple &lt;code&gt;for&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1ea53b376965f0df377f080711210f0ab1972b82" translate="yes" xml:space="preserve">
          <source>Use an iterator explicitly (ES2015+)</source>
          <target state="translated">Usar un iterador explícitamente (ES2015+)</target>
        </trans-unit>
        <trans-unit id="34c4927f746ab01e6fc5a9bc93966e26f8b7d962" translate="yes" xml:space="preserve">
          <source>Use any of the options above for arrays</source>
          <target state="translated">Utilice cualquiera de las opciones anteriores para las matrices</target>
        </trans-unit>
        <trans-unit id="e906c3cdb43d16bd2a2f35eccf263373e93c2a7f" translate="yes" xml:space="preserve">
          <source>We can use the &lt;code&gt;slice&lt;/code&gt; method of arrays, which like the other methods mentioned above is &quot;intentionally generic&quot; and so can be used with array-like objects, like this:</source>
          <target state="translated">Podemos usar el m&amp;eacute;todo de &lt;code&gt;slice&lt;/code&gt; de matrices, que al igual que los otros m&amp;eacute;todos mencionados anteriormente es &quot;intencionalmente gen&amp;eacute;rico&quot; y, por lo tanto, puede usarse con objetos similares a una matriz, como este:</target>
        </trans-unit>
        <trans-unit id="ef4d47774a48af8c2dc4198f272524f303720ef0" translate="yes" xml:space="preserve">
          <source>Where &lt;code&gt;of&lt;/code&gt; avoids the oddities associated with &lt;code&gt;in&lt;/code&gt; and makes it work like the &lt;code&gt;for&lt;/code&gt; loop of any other language, and &lt;code&gt;let&lt;/code&gt; binds &lt;code&gt;i&lt;/code&gt; within the loop as opposed to within the function.</source>
          <target state="translated">Where &lt;code&gt;of&lt;/code&gt; evita las rarezas asociadas con &lt;code&gt;in&lt;/code&gt; y hace que funcione como el bucle &lt;code&gt;for&lt;/code&gt; de cualquier otro lenguaje, y &lt;code&gt;let&lt;/code&gt; &lt;code&gt;i&lt;/code&gt; se una dentro del bucle en lugar de dentro de la funci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="941d4e5eb1ee2fa812450abac2b4faed7e49a69d" translate="yes" xml:space="preserve">
          <source>Where &lt;code&gt;theArray&lt;/code&gt; is my array, but this seems to be incorrect.</source>
          <target state="translated">Donde &lt;code&gt;theArray&lt;/code&gt; es mi matriz, pero esto parece ser incorrecto.</target>
        </trans-unit>
        <trans-unit id="08b975222d1b83cf89b60a81d765397d2dc1159f" translate="yes" xml:space="preserve">
          <source>You access the current item by calling the iterator&amp;rsquo;s &lt;code&gt;next&lt;/code&gt; method. The next method will return the &lt;strong&gt;&lt;code&gt;value&lt;/code&gt;&lt;/strong&gt; of the current item and a &lt;strong&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/strong&gt; to indicate when you have reached the end of the collection. The following is an example of creating an iterator from an array.</source>
          <target state="translated">Accede al elemento actual llamando al &lt;code&gt;next&lt;/code&gt; m&amp;eacute;todo del iterador. El siguiente m&amp;eacute;todo devolver&amp;aacute; el &lt;strong&gt; &lt;code&gt;value&lt;/code&gt; &lt;/strong&gt; del elemento actual y un valor &lt;strong&gt; &lt;code&gt;boolean&lt;/code&gt; o&lt;/strong&gt; para indicar cu&amp;aacute;ndo ha llegado al final de la colecci&amp;oacute;n. El siguiente es un ejemplo de creaci&amp;oacute;n de un iterador a partir de una matriz.</target>
        </trans-unit>
        <trans-unit id="faf0a839383e9ca040f86c77bb8d78628ddab12a" translate="yes" xml:space="preserve">
          <source>You can also iterate over an array like this:</source>
          <target state="translated">También puedes iterar sobre una matriz como esta:</target>
        </trans-unit>
        <trans-unit id="a99d0a423bd91c6ab11d1bbc2ecccf23c5be4af8" translate="yes" xml:space="preserve">
          <source>You can also transform your regular &lt;code&gt;array&lt;/code&gt; to an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators&quot;&gt;&lt;code&gt;iterator&lt;/code&gt;&lt;/a&gt; like this:</source>
          <target state="translated">Tambi&amp;eacute;n puede transformar su &lt;code&gt;array&lt;/code&gt; regular en un &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators&quot;&gt; &lt;code&gt;iterator&lt;/code&gt; &lt;/a&gt; como este:</target>
        </trans-unit>
        <trans-unit id="08ceb3749d20fa27c455e7e1a7300f32a149c3c7" translate="yes" xml:space="preserve">
          <source>You can also transform your regular array to iterator using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator&quot;&gt;&lt;code&gt;Symbol.iterator&lt;/code&gt;&lt;/a&gt; like this:</source>
          <target state="translated">Tambi&amp;eacute;n puede transformar su matriz regular en iterador usando &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator&quot;&gt; &lt;code&gt;Symbol.iterator&lt;/code&gt; de&lt;/a&gt; esta manera:</target>
        </trans-unit>
        <trans-unit id="7f6f076641450693589f578d046aeeeb04ad8c10" translate="yes" xml:space="preserve">
          <source>You can call forEach like this:</source>
          <target state="translated">Puedes llamar a cada uno así:</target>
        </trans-unit>
        <trans-unit id="8704a38dea0e6f3deb1af2a2e5fcf2aa68370fc9" translate="yes" xml:space="preserve">
          <source>You can get some performance optimisations by caching &lt;code&gt;myArray.length&lt;/code&gt; or iterating over it backwards.</source>
          <target state="translated">Puede obtener algunas optimizaciones de rendimiento almacenando en cach&amp;eacute; &lt;code&gt;myArray.length&lt;/code&gt; o iterando sobre &amp;eacute;l al rev&amp;eacute;s.</target>
        </trans-unit>
        <trans-unit id="7623d5152acc3867d2222ce3eedc5c77ffbac5a8" translate="yes" xml:space="preserve">
          <source>You can read more about &lt;code&gt;iteration protocol&lt;/code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">Puede leer m&amp;aacute;s sobre el &lt;code&gt;iteration protocol&lt;/code&gt; &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols&quot;&gt;aqu&amp;iacute;&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="28ce5baaf2a7e364a9e6393430ef2a639312b251" translate="yes" xml:space="preserve">
          <source>You can use:</source>
          <target state="translated">Puedes usar:</target>
        </trans-unit>
        <trans-unit id="7d5badb0562b87f2a9430ec38445cdf3e13d52c2" translate="yes" xml:space="preserve">
          <source>You do not need to declare a temporary &lt;code&gt;len&lt;/code&gt; variable, or compare against &lt;code&gt;array.length&lt;/code&gt; on each iteration, either of which might be a minute optimisation.</source>
          <target state="translated">No necesita declarar una variable de &lt;code&gt;len&lt;/code&gt; temporal, ni compararla con &lt;code&gt;array.length&lt;/code&gt; en cada iteraci&amp;oacute;n, cualquiera de las cuales podr&amp;iacute;a ser una optimizaci&amp;oacute;n por minuto.</target>
        </trans-unit>
        <trans-unit id="021884629c616bb0e00f4dedc9401d5eeaae6b37" translate="yes" xml:space="preserve">
          <source>You have three options in &lt;a href=&quot;http://ecma-international.org/ecma-262/5.1/&quot;&gt;ECMAScript&amp;nbsp;5&lt;/a&gt; (&quot;ES5&quot;), the version most broadly supported at the moment, and two more added in &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/index.html&quot;&gt;ECMAScript&amp;nbsp;2015&lt;/a&gt; (&quot;ES2015&quot;, &quot;ES6&quot;):</source>
          <target state="translated">Tiene tres opciones en &lt;a href=&quot;http://ecma-international.org/ecma-262/5.1/&quot;&gt;ECMAScript 5&lt;/a&gt; (&quot;ES5&quot;), la versi&amp;oacute;n m&amp;aacute;s ampliamente admitida en este momento y dos m&amp;aacute;s agregadas en &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/index.html&quot;&gt;ECMAScript 2015&lt;/a&gt; (&quot;ES2015&quot;, &quot;ES6&quot;):</target>
        </trans-unit>
        <trans-unit id="5baba5e2792c7b4a97eeca7d33b55e99ec8dd7bb" translate="yes" xml:space="preserve">
          <source>You will notice that &lt;code&gt;i--&lt;/code&gt; is the middle clause (where we usually see a comparison) and the last clause is empty (where we usually see &lt;code&gt;i++&lt;/code&gt;).  That means that &lt;code&gt;i--&lt;/code&gt; is also used as the &lt;em&gt;condition&lt;/em&gt; for continuation.  Crucially, it is executed and checked &lt;em&gt;before&lt;/em&gt; each iteration.</source>
          <target state="translated">Notar&amp;aacute; que &lt;code&gt;i--&lt;/code&gt; es la cl&amp;aacute;usula intermedia (donde generalmente vemos una comparaci&amp;oacute;n) y la &amp;uacute;ltima cl&amp;aacute;usula est&amp;aacute; vac&amp;iacute;a (donde generalmente vemos &lt;code&gt;i++&lt;/code&gt; ). Eso significa que &lt;code&gt;i--&lt;/code&gt; tambi&amp;eacute;n se usa como &lt;em&gt;condici&amp;oacute;n&lt;/em&gt; para la continuaci&amp;oacute;n. Fundamentalmente, se ejecuta y se verifica &lt;em&gt;antes de&lt;/em&gt; cada iteraci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="1b92ca772f4a547ebbe1cecec130f971e1c7c39f" translate="yes" xml:space="preserve">
          <source>You wouldn't do that in inline code, of course. You'd write a utility function. Perhaps:</source>
          <target state="translated">No lo harías en código en línea,por supuesto.Escribirías una función de utilidad.Tal vez:</target>
        </trans-unit>
        <trans-unit id="5b72435b1a6e0292938c5e939f2b0c7c3502eb4e" translate="yes" xml:space="preserve">
          <source>You'll get people telling you to use &lt;code&gt;for-in&lt;/code&gt;, but &lt;a href=&quot;http://blog.niftysnippets.org/2010/11/myths-and-realities-of-forin.html&quot;&gt;that's not what &lt;code&gt;for-in&lt;/code&gt; is for&lt;/a&gt;. &lt;code&gt;for-in&lt;/code&gt; loops through the &lt;em&gt;enumerable properties of an object&lt;/em&gt;, not the indexes of an array. &lt;strong&gt;The order is not guaranteed&lt;/strong&gt;, not even in ES2015 (ES6). ES2015+ does define an order to object properties (via &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots-ownpropertykeys&quot;&gt;&lt;code&gt;[[OwnPropertyKeys]]&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots-enumerate&quot;&gt;&lt;code&gt;[[Enumerate]]&lt;/code&gt;&lt;/a&gt;, and things that use them like &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-object.getownpropertynames&quot;&gt;&lt;code&gt;Object.getOwnPropertyKeys&lt;/code&gt;&lt;/a&gt;), but it &lt;strong&gt;does not&lt;/strong&gt; define that &lt;code&gt;for-in&lt;/code&gt; will follow that order. (Details in &lt;a href=&quot;https://stackoverflow.com/a/30919039/157247&quot;&gt;this other answer&lt;/a&gt;.)</source>
          <target state="translated">Obtendr&amp;aacute; gente que le dir&amp;aacute; que use &lt;code&gt;for-in&lt;/code&gt; , pero &lt;a href=&quot;http://blog.niftysnippets.org/2010/11/myths-and-realities-of-forin.html&quot;&gt;eso no es para lo que es for &lt;code&gt;for-in&lt;/code&gt; &lt;/a&gt; . &lt;code&gt;for-in&lt;/code&gt; recorre las &lt;em&gt;propiedades enumerables de un objeto&lt;/em&gt; , no los &amp;iacute;ndices de una matriz. &lt;strong&gt;El pedido no est&amp;aacute; garantizado&lt;/strong&gt; , ni siquiera en ES2015 (ES6). ES2015 + define un orden para objetar propiedades (a trav&amp;eacute;s de &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots-ownpropertykeys&quot;&gt; &lt;code&gt;[[OwnPropertyKeys]]&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots-enumerate&quot;&gt; &lt;code&gt;[[Enumerate]]&lt;/code&gt; &lt;/a&gt; y cosas que los usan como &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-object.getownpropertynames&quot;&gt; &lt;code&gt;Object.getOwnPropertyKeys&lt;/code&gt; &lt;/a&gt; ), pero &lt;strong&gt;no&lt;/strong&gt; define que &lt;code&gt;for-in&lt;/code&gt; seguir&amp;aacute; ese orden. (Detalles en &lt;a href=&quot;https://stackoverflow.com/a/30919039/157247&quot;&gt;esta otra respuesta&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="589b6a96f50575d676fcf038d8105e7b1699be4a" translate="yes" xml:space="preserve">
          <source>You're using non-element properties and you want to include them in the loop</source>
          <target state="translated">Estás usando propiedades no elementales y quieres incluirlas en el bucle</target>
        </trans-unit>
        <trans-unit id="10d7cc4a29eba4f6a5a3ca2db2a762f5a236cc71" translate="yes" xml:space="preserve">
          <source>Your best bets are usually</source>
          <target state="translated">Tus mejores apuestas suelen ser</target>
        </trans-unit>
        <trans-unit id="617846806ec9245ca6b1c7aac0723989e8f9ebee" translate="yes" xml:space="preserve">
          <source>a &lt;code&gt;for-of&lt;/code&gt; loop (ES2015+ only),</source>
          <target state="translated">un bucle &lt;code&gt;for-of&lt;/code&gt; (solo ES2015 +),</target>
        </trans-unit>
        <trans-unit id="6b50530706e59258d411002d89ae4b283301aabf" translate="yes" xml:space="preserve">
          <source>a simple old-fashioned &lt;code&gt;for&lt;/code&gt; loop,</source>
          <target state="translated">un simple bucle pasado &lt;code&gt;for&lt;/code&gt; moda,</target>
        </trans-unit>
        <trans-unit id="6f15cde32ab6efb43a1b5c9033caf63a6feb7401" translate="yes" xml:space="preserve">
          <source>browsers**</source>
          <target state="translated">browsers**</target>
        </trans-unit>
        <trans-unit id="5873f666d03fb3fb39d0db9c71b5e1f769334088" translate="yes" xml:space="preserve">
          <source>every</source>
          <target state="translated">every</target>
        </trans-unit>
        <trans-unit id="4bb4ca75941b7bbc5bc6a12be44b22fc9c8d234e" translate="yes" xml:space="preserve">
          <source>filter</source>
          <target state="translated">filter</target>
        </trans-unit>
        <trans-unit id="43eef9a62abb8b1e1654f8a890aae054abffa82b" translate="yes" xml:space="preserve">
          <source>for</source>
          <target state="translated">for</target>
        </trans-unit>
        <trans-unit id="edc5ee22beb2b82f4da41914d8d41cca9c53020f" translate="yes" xml:space="preserve">
          <source>forEach</source>
          <target state="translated">forEach</target>
        </trans-unit>
        <trans-unit id="dc06788092621528ed3f0618bc0b6f3c356aa9e7" translate="yes" xml:space="preserve">
          <source>jQuery way using &lt;code&gt;$.map&lt;/code&gt;:</source>
          <target state="translated">Forma jQuery usando &lt;code&gt;$.map&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="37745ed7a0f005fb14522c5cc7c1ba3d9e0df579" translate="yes" xml:space="preserve">
          <source>map</source>
          <target state="translated">map</target>
        </trans-unit>
        <trans-unit id="263cce6e93f37573f1e7fe24662cad3400cc887c" translate="yes" xml:space="preserve">
          <source>or &lt;code&gt;for-in&lt;/code&gt; with safeguards.</source>
          <target state="translated">o &lt;code&gt;for-in&lt;/code&gt; con salvaguardas.</target>
        </trans-unit>
        <trans-unit id="48c3689f6dd5e9e952f925b7ebebf64d7c43fc56" translate="yes" xml:space="preserve">
          <source>reduce</source>
          <target state="translated">reduce</target>
        </trans-unit>
        <trans-unit id="eb875812858d27b22cb2b75f992dffadc1b05c66" translate="yes" xml:space="preserve">
          <source>some</source>
          <target state="translated">some</target>
        </trans-unit>
        <trans-unit id="f13e27693c85aed522df8c3fcb0bb0110ca54e14" translate="yes" xml:space="preserve">
          <source>zip</source>
          <target state="translated">zip</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
