<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/3177733">
    <body>
      <group id="3177733">
        <trans-unit id="7c55e13b3a5960f2e06f74f020b8ae99bd6171bc" translate="yes" xml:space="preserve">
          <source>(Even if you end up using the java in your JSP code, which I hope not, you can encapsulate that code in a tag)</source>
          <target state="translated">(Incluso si terminas usando el java en tu código JSP,que espero que no,puedes encapsular ese código en una etiqueta)</target>
        </trans-unit>
        <trans-unit id="abecfaae04b845d07cad8db2dacb71965f0897c5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://jstl.java.net/&quot;&gt;JSTL&lt;/a&gt; offers tags for conditionals, loops, sets, gets, etc. For example:</source>
          <target state="translated">&lt;a href=&quot;https://jstl.java.net/&quot;&gt;JSTL&lt;/a&gt; ofrece etiquetas para condicionales, bucles, conjuntos, gets, etc. Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="ff137f765374ad5666aafc75629eb2025b1372d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;t:base&amp;gt;&lt;/code&gt; is used to specify the master page you want to use (which is base.tag at this moment). All the content inside the tag &lt;code&gt;&amp;lt;jsp:body&amp;gt;&lt;/code&gt; here will replace the &lt;code&gt;&amp;lt;jsp:doBody/&amp;gt;&lt;/code&gt; on your master page. Your child page can also include any tag lib and you can use it normally like the other mentioned. However, if you use any scriptlet code here (&lt;code&gt;&amp;lt;%= request.getParameter(&quot;name&quot;) %&amp;gt;&lt;/code&gt; ...) and try to run this page, you will get a &lt;code&gt;JasperException because  Scripting elements ( &amp;amp;lt;%!, &amp;amp;lt;jsp:declaration, &amp;amp;lt;%=, &amp;amp;lt;jsp:expression, &amp;amp;lt;%, &amp;amp;lt;jsp:scriptlet ) are disallowed here&lt;/code&gt;. Therefore, there is no way other people can include the evil code into the jsp file</source>
          <target state="translated">&lt;code&gt;&amp;lt;t:base&amp;gt;&lt;/code&gt; se usa para especificar la p&amp;aacute;gina maestra que desea usar (que es base.tag en este momento). Todo el contenido dentro de la etiqueta &lt;code&gt;&amp;lt;jsp:body&amp;gt;&lt;/code&gt; aqu&amp;iacute; reemplazar&amp;aacute; a &lt;code&gt;&amp;lt;jsp:doBody/&amp;gt;&lt;/code&gt; en su p&amp;aacute;gina maestra. Su p&amp;aacute;gina secundaria tambi&amp;eacute;n puede incluir cualquier etiqueta lib y puede usarla normalmente como la otra mencionada. Sin embargo, si usa alg&amp;uacute;n c&amp;oacute;digo de scriptlet aqu&amp;iacute; ( &lt;code&gt;&amp;lt;%= request.getParameter(&quot;name&quot;) %&amp;gt;&lt;/code&gt; ...) e intenta ejecutar esta p&amp;aacute;gina, obtendr&amp;aacute; una &lt;code&gt;JasperException because Scripting elements ( &amp;amp;lt;%!, &amp;amp;lt;jsp:declaration, &amp;amp;lt;%=, &amp;amp;lt;jsp:expression, &amp;amp;lt;%, &amp;amp;lt;jsp:scriptlet ) are disallowed here&lt;/code&gt; . Por lo tanto, no hay forma de que otras personas puedan incluir el c&amp;oacute;digo maligno en el archivo jsp</target>
        </trans-unit>
        <trans-unit id="242c95b3bd4d1500098c2c644b1eabdcae7d762c" translate="yes" xml:space="preserve">
          <source>&lt;strike&gt;Sun&lt;/strike&gt; Oracle itself also recommends in the &lt;a href=&quot;http://www.oracle.com/technetwork/articles/javase/code-convention-138726.html&quot;&gt;JSP coding conventions&lt;/a&gt; to avoid use of &lt;em&gt;scriptlets&lt;/em&gt; whenever the same functionality is possible by (tag) classes. Here are several cites of relevance:</source>
          <target state="translated">&lt;strike&gt;Sun&lt;/strike&gt; Oracle tambi&amp;eacute;n recomienda en las &lt;a href=&quot;http://www.oracle.com/technetwork/articles/javase/code-convention-138726.html&quot;&gt;convenciones de codificaci&amp;oacute;n JSP&lt;/a&gt; para evitar el uso de &lt;em&gt;scriptlets&lt;/em&gt; siempre que las clases (tag) puedan hacer la misma funcionalidad. Aqu&amp;iacute; hay varias citas de relevancia:</target>
        </trans-unit>
        <trans-unit id="47f6077a2de453659dd80148f677647a78ff3cd4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;How to avoid Java code in JSP files?&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;&amp;iquest;C&amp;oacute;mo evitar el c&amp;oacute;digo Java en archivos JSP?&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6d2ca64168746e18166ffea7b50fc32ade312a97" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;As a Safeguard: Disable Scriptlets For Good&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Como salvaguarda: deshabilite los scriptlets para siempre&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="53ccd4bb22efbe7051e3c1b669e4135918583cc1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Calling this page from your controller:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Llamando a esta p&amp;aacute;gina desde su controlador:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="52ce212588f872e8f16ad1c8207593f87ae8c869" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Create a master page called base.tag under your WEB-INF/tags with the following content&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Cree una p&amp;aacute;gina maestra llamada base.tag debajo de sus WEB-INF / tags con el siguiente contenido&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="133419c9245e3989fa760d65ab99f57c23aa9d14" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Create child page (child.jsp) in your WebContent folder:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Cree una p&amp;aacute;gina secundaria (child.jsp) en su carpeta WebContent:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4579c5bafd0c96bf4fe66f646911268bde67d154" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Debuggability:&lt;/strong&gt; if scriptlet throws an exception halfway, all you get is a blank page.</source>
          <target state="translated">&lt;strong&gt;Depuraci&amp;oacute;n:&lt;/strong&gt; si scriptlet arroja una excepci&amp;oacute;n a mitad de camino, todo lo que obtienes es una p&amp;aacute;gina en blanco.</target>
        </trans-unit>
        <trans-unit id="3a6e7652b38b97d5a8c32f449fb30606c438c17f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Facelets&lt;/strong&gt; is the first non JSP page declaration language designed for &lt;strong&gt;JSF (Java Server Faces)&lt;/strong&gt; which provided a simpler and more powerful programming model to JSF developers as compare to JSP. It resolves different issues occurs in JSP for web applications development.</source>
          <target state="translated">&lt;strong&gt;Facelets&lt;/strong&gt; es el primer lenguaje de declaraci&amp;oacute;n de p&amp;aacute;gina que no es JSP dise&amp;ntilde;ado para &lt;strong&gt;JSF (Java Server Faces)&lt;/strong&gt; que proporcion&amp;oacute; un modelo de programaci&amp;oacute;n m&amp;aacute;s simple y potente para los desarrolladores de JSF en comparaci&amp;oacute;n con JSP. Resuelve diferentes problemas que ocurren en JSP para el desarrollo de aplicaciones web.</target>
        </trans-unit>
        <trans-unit id="1e5ef583aedb2fa877df3b22256a022618dc6f86" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;How to replace &lt;em&gt;scriptlets&lt;/em&gt; entirely depends on the sole purpose of the code/logic. More than often this code is to be placed in a fullworthy Java class:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;C&amp;oacute;mo reemplazar los &lt;em&gt;scriptlets&lt;/em&gt; depende completamente del &amp;uacute;nico prop&amp;oacute;sito del c&amp;oacute;digo / l&amp;oacute;gica.&lt;/strong&gt; &lt;strong&gt;M&amp;aacute;s que a menudo, este c&amp;oacute;digo se debe colocar en una clase de Java completa:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5d05d31648416deb82a36f230d878a6d38196b83" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;If somebody is really against programming in more languages than one&lt;/strong&gt;, I suggest GWT, theoretically you can avoid all the JS and HTML elements, because Google Toolkit transforms all the client and shared code to JS, you won't have problem with them, so you have a webservice without coding in any other languages. Even you can use some default CSS from somewhere as it is given by extensions (smartGWT or Vaadin). You don't need to learn dozens of annotations.</source>
          <target state="translated">&lt;strong&gt;Si alguien est&amp;aacute; realmente en contra de la programaci&amp;oacute;n en m&amp;aacute;s de un lenguaje&lt;/strong&gt; , sugiero GWT, te&amp;oacute;ricamente puede evitar todos los elementos JS y HTML, porque Google Toolkit transforma todo el cliente y el c&amp;oacute;digo compartido a JS, por lo que no tendr&amp;aacute; problemas con ellos. tiene un servicio web sin codificaci&amp;oacute;n en ning&amp;uacute;n otro idioma. Incluso puede usar algunos CSS predeterminados desde alg&amp;uacute;n lugar, ya que lo proporcionan las extensiones (smartGWT o Vaadin). No necesitas aprender docenas de anotaciones.</target>
        </trans-unit>
        <trans-unit id="3d3ad886a6c5ab3968b4242b8a06f60d6e3bd987" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Learn to customize and write your own tags using JSTL&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Aprenda a personalizar y escribir sus propias etiquetas con JSTL&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6356f55f28c4b437234bb509c95bcd79233fc2fd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Maintainability:&lt;/strong&gt; per saldo more time is needed to maintain mingled/cluttered/duplicated code logic.</source>
          <target state="translated">&lt;strong&gt;Mantenibilidad:&lt;/strong&gt; por saldo se necesita m&amp;aacute;s tiempo para mantener la l&amp;oacute;gica del c&amp;oacute;digo mezclado / desordenado / duplicado.</target>
        </trans-unit>
        <trans-unit id="12d108e7baf9032b2bc0679febce2431845aacf3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;OO-ability:&lt;/strong&gt; you can't make use of inheritance/composition.</source>
          <target state="translated">&lt;strong&gt;OO-capacidad:&lt;/strong&gt; no puede hacer uso de la herencia / composici&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="a23f822b1d4a14c1f8d45091a579788beb963af1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Replaceability:&lt;/strong&gt; you can't make scriptlets abstract.</source>
          <target state="translated">&lt;strong&gt;Reemplazabilidad:&lt;/strong&gt; no puede hacer scriptlets abstractos.</target>
        </trans-unit>
        <trans-unit id="dd6c632d066ccf0fc385be85c35d9172a5b13eb2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reusability:&lt;/strong&gt; you can't reuse scriptlets.</source>
          <target state="translated">&lt;strong&gt;Reusabilidad:&lt;/strong&gt; no puedes reutilizar scriptlets.</target>
        </trans-unit>
        <trans-unit id="dab8261ed76aa890287247357fd6bbed2684e5b4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Tag File&lt;/strong&gt;  are so easy developed as you did not need to restart the server when changing them, like JSP files. This makes them easy for development.</source>
          <target state="translated">&lt;strong&gt;Tag File&lt;/strong&gt; es tan f&amp;aacute;cil de desarrollar que no necesita reiniciar el servidor al cambiarlos, como los archivos JSP. Esto los hace f&amp;aacute;ciles de desarrollar.</target>
        </trans-unit>
        <trans-unit id="3814b9b9f2dbea323401f0b749d1cea78b81d65c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Technically, JSP are all converted to Servlets during runtime&lt;/strong&gt;. JSP was initially created for the purpose of the decoupling the business logic and the design logic, following the MVC pattern. So JSP are technically all java codes during runtime. But to answer the question, Tag Libraries are usually used for applying logic (removing Java codes) to JSP pages.</source>
          <target state="translated">&lt;strong&gt;T&amp;eacute;cnicamente, los JSP se convierten a Servlets durante el tiempo de ejecuci&amp;oacute;n&lt;/strong&gt; . JSP se cre&amp;oacute; inicialmente con el prop&amp;oacute;sito de desacoplar la l&amp;oacute;gica empresarial y la l&amp;oacute;gica de dise&amp;ntilde;o, siguiendo el patr&amp;oacute;n MVC. Entonces, JSP son t&amp;eacute;cnicamente todos los c&amp;oacute;digos de Java durante el tiempo de ejecuci&amp;oacute;n. Pero para responder a la pregunta, las bibliotecas de etiquetas generalmente se usan para aplicar l&amp;oacute;gica (eliminar c&amp;oacute;digos Java) a p&amp;aacute;ginas JSP.</target>
        </trans-unit>
        <trans-unit id="dca32e18a3b2d52aac3677e7d928e29f14de3e4c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Testability:&lt;/strong&gt; scriptlets are not unit-testable.</source>
          <target state="translated">&lt;strong&gt;Capacidad de prueba: los&lt;/strong&gt; scriptlets no se pueden probar en unidades.</target>
        </trans-unit>
        <trans-unit id="9137dff06cb373f59845928934fa1e992525c9e8" translate="yes" xml:space="preserve">
          <source>A neat idea from the Python world are &lt;em&gt;Template attribute languages&lt;/em&gt;; TAL was introduced by Zope (therefore a.k.a. &quot;Zope Page Templates&quot;, ZPT) and is a standard, with implementations in PHP, XSLT and Java as well (I have used the Python/Zope and PHP incarnations). In this class of templating languages, one above example could look like this:</source>
          <target state="translated">Una buena idea del mundo de Python son los &lt;em&gt;lenguajes de atributos de plantilla&lt;/em&gt; ; TAL fue introducido por Zope (por lo tanto, tambi&amp;eacute;n conocido como &quot;Zope Page Templates&quot;, ZPT) y es un est&amp;aacute;ndar, con implementaciones en PHP, XSLT y Java tambi&amp;eacute;n (he usado las encarnaciones Python / Zope y PHP). En esta clase de lenguajes de plantillas, un ejemplo anterior podr&amp;iacute;a verse as&amp;iacute;:</target>
        </trans-unit>
        <trans-unit id="cfc5709ae32ab041336687f1e6512f200a0844a5" translate="yes" xml:space="preserve">
          <source>Also, take note that it is not a best practice to do business logic in the view layer, you should perform your business logics in the Service layer, 
and pass the output result to your views through a Controller.</source>
          <target state="translated">Además,tenga en cuenta que no es una buena práctica realizar la lógica de negocio en la capa de vista,debe realizar su lógica de negocio en la capa de servicio,y pasar el resultado de salida a sus vistas a través de un Controlador.</target>
        </trans-unit>
        <trans-unit id="f68d36db9b907801a9eb6798b78a997685810586" translate="yes" xml:space="preserve">
          <source>Also, you can read the tag body easily</source>
          <target state="translated">Además,puedes leer el cuerpo de la etiqueta fácilmente</target>
        </trans-unit>
        <trans-unit id="3287880bd50b1fa49f174a085295b57ed1de703b" translate="yes" xml:space="preserve">
          <source>And certainly stay away of filters and pre and post processing, otherwise you may deal with support/debugging difficulties since you always do not know where the variable gets the value.</source>
          <target state="translated">Y ciertamente mantente alejado de los filtros y del pre y posprocesamiento,de lo contrario puedes enfrentarte a dificultades de depuración de apoyo ya que siempre no sabes de dónde saca el valor la variable.</target>
        </trans-unit>
        <trans-unit id="460633aa80eeb1c8f4d8d4d2a283b2cd7c2ea331" translate="yes" xml:space="preserve">
          <source>And of course many fellow programmers hereby described or recommended several other solutions. GWT is for people who really don't want to deal with the web part or to minimalize it.</source>
          <target state="translated">Y por supuesto,muchos compañeros programadores describieron o recomendaron otras soluciones.GWT es para la gente que realmente no quiere lidiar con la parte de la web o minimizarla.</target>
        </trans-unit>
        <trans-unit id="293d82cb47fc75524d2ec23540d9f51807688ce8" translate="yes" xml:space="preserve">
          <source>As &lt;a href=&quot;https://stackoverflow.com/questions/2188706/how-to-avoid-using-scriptlets-in-my-jsp-page&quot;&gt;another question&lt;/a&gt; is discussing, you can and always should disable scriptlets in your &lt;code&gt;web.xml&lt;/code&gt; web application descriptor.</source>
          <target state="translated">Como &lt;a href=&quot;https://stackoverflow.com/questions/2188706/how-to-avoid-using-scriptlets-in-my-jsp-page&quot;&gt;otra cuesti&amp;oacute;n&lt;/a&gt; est&amp;aacute; discutiendo, puede y siempre debe deshabilitar los scriptlets en su descriptor de aplicaci&amp;oacute;n web &lt;code&gt;web.xml&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="17bc0d434c97d066ec7b78aa4ac9d4cbc140117e" translate="yes" xml:space="preserve">
          <source>As many answers says, use JSTL or create your own custom tags. &lt;a href=&quot;http://www.journaldev.com/2099/jsp-custom-tags-example-tutorial&quot;&gt;Here&lt;/a&gt; is good explanation about creating custom tags</source>
          <target state="translated">Como dicen muchas respuestas, use JSTL o cree sus propias etiquetas personalizadas. &lt;a href=&quot;http://www.journaldev.com/2099/jsp-custom-tags-example-tutorial&quot;&gt;Aqu&amp;iacute;&lt;/a&gt; hay una buena explicaci&amp;oacute;n sobre la creaci&amp;oacute;n de etiquetas personalizadas.</target>
        </trans-unit>
        <trans-unit id="dabf707c8c01e32501275ce0d2adb33afa1729af" translate="yes" xml:space="preserve">
          <source>Basic MVC example with JSP, Servlet and JDBC</source>
          <target state="translated">Ejemplo básico de MVC con JSP,Servlet y JDBC</target>
        </trans-unit>
        <trans-unit id="d202594c5797a73fde182a112e408d80d5a47ff2" translate="yes" xml:space="preserve">
          <source>Believe me, this will change the way you design</source>
          <target state="translated">Créeme,esto cambiará la forma en que diseñas</target>
        </trans-unit>
        <trans-unit id="d841cf905ba57a2e5b758d8b5de5a5d1feb0d038" translate="yes" xml:space="preserve">
          <source>By using JSTL tags together with EL expression you can avoid this. Put the following things in your jsp page:</source>
          <target state="translated">Usando las etiquetas JSTL junto con la expresión EL puedes evitar esto.Ponga las siguientes cosas en su página JSP:</target>
        </trans-unit>
        <trans-unit id="e2b0a0be2c4be101f37fd815c88cbaf5f6d93468" translate="yes" xml:space="preserve">
          <source>Custom Tags- you can define your own tags to use.</source>
          <target state="translated">Etiquetas personalizadas:puedes definir tus propias etiquetas para usarlas.</target>
        </trans-unit>
        <trans-unit id="2700221f2d233bc435b4aecae915d8f6c4b5eb5e" translate="yes" xml:space="preserve">
          <source>Design patterns in Java web applications</source>
          <target state="translated">Patrones de diseño en aplicaciones web Java</target>
        </trans-unit>
        <trans-unit id="4c492217496c5720801e5ab32fb88c56ac52c16a" translate="yes" xml:space="preserve">
          <source>EL</source>
          <target state="translated">EL</target>
        </trans-unit>
        <trans-unit id="9028f357a088f9e3949a25480f3a1fcc603f5d51" translate="yes" xml:space="preserve">
          <source>EL expressions</source>
          <target state="translated">Expresiones EL</target>
        </trans-unit>
        <trans-unit id="ff837528477860274cafad4c44c9ba8002de71b3" translate="yes" xml:space="preserve">
          <source>Even if you use a framework like Struts 2, which have lots of good tags, you may find that having your own tags can reduce your code a lot. You can pass your tag parameters to struts and this way customize your framework tag.</source>
          <target state="translated">Incluso si usas un marco como Struts 2,que tiene muchas etiquetas buenas,puedes descubrir que tener tus propias etiquetas puede reducir mucho tu código.Puedes pasar los parámetros de tus etiquetas a Struts y de esta manera personalizar tu etiqueta del marco.</target>
        </trans-unit>
        <trans-unit id="e5f2929765178283974ec5b0f56d6dbb2d488cb2" translate="yes" xml:space="preserve">
          <source>Example from &lt;em&gt;java2s&lt;/em&gt;,</source>
          <target state="translated">Ejemplo de &lt;em&gt;java2s&lt;/em&gt; ,</target>
        </trans-unit>
        <trans-unit id="ab4ad92cb1a1e4761a3bf91a6bffc62b4148df71" translate="yes" xml:space="preserve">
          <source>Experience has shown that JSP's have some shortcomings, one of them being hard to avoid mixing markup with actual code.</source>
          <target state="translated">La experiencia ha demostrado que los JSP tienen algunos defectos,uno de ellos es que es difícil evitar mezclar el marcado con el código real.</target>
        </trans-unit>
        <trans-unit id="1c7a52dfd00e05d100e7009189a810dae152a373" translate="yes" xml:space="preserve">
          <source>Expression Language</source>
          <target state="translated">Lenguaje de expresión</target>
        </trans-unit>
        <trans-unit id="335819d77fcc9ef286b4eee5c8cbe73bf3f8577e" translate="yes" xml:space="preserve">
          <source>Fetch those values and parameters within your JSP using JSTL/Taglib</source>
          <target state="translated">Busca esos valores y parámetros dentro de tu JSP usando JSTLTaglib</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="4145625051f942611b763d861ab36407bba4c90f" translate="yes" xml:space="preserve">
          <source>From JSP 1.2 Specification, it is highly recommended that the JSP Standard Tag Library  (JSTL) be used in your web application to help &lt;strong&gt;reduce the need for JSP scriptlets&lt;/strong&gt; in your pages. Pages that use JSTL are, in general, easier to read and maintain.</source>
          <target state="translated">A partir de la especificaci&amp;oacute;n JSP 1.2, se recomienda encarecidamente que se utilice la biblioteca de etiquetas est&amp;aacute;ndar JSP (JSTL) en su aplicaci&amp;oacute;n web para ayudar a &lt;strong&gt;reducir la necesidad de scriptlets JSP&lt;/strong&gt; en sus p&amp;aacute;ginas. Las p&amp;aacute;ginas que usan JSTL son, en general, m&amp;aacute;s f&amp;aacute;ciles de leer y mantener.</target>
        </trans-unit>
        <trans-unit id="55fc2f63b02dc3aa67ac5d8c473a54ee6c3335d5" translate="yes" xml:space="preserve">
          <source>Hidden features of JSP/Servlet</source>
          <target state="translated">Características ocultas de JSPServlet</target>
        </trans-unit>
        <trans-unit id="abbb3de6a2693017a80aac6e69fc528bd68e92f8" translate="yes" xml:space="preserve">
          <source>How does Servlet, ServletContext, HttpSession and HttpServletRequest/Response work?</source>
          <target state="translated">¿Cómo funciona Servlet,ServletContext,HttpSession y HttpServletRequestResponse?</target>
        </trans-unit>
        <trans-unit id="fc6304fc1da24f7332456c2ed85a43e9be667bb1" translate="yes" xml:space="preserve">
          <source>How to avoid Java code in JSP files</source>
          <target state="translated">Cómo evitar el código Java en los archivos JSP</target>
        </trans-unit>
        <trans-unit id="541f1c70d2cfacfa1fae673b114a9c7b5e3c9ca3" translate="yes" xml:space="preserve">
          <source>I don't know very much about the &lt;a href=&quot;http://sourceforge.net/projects/javazpt/&quot;&gt;Java implementation&lt;/a&gt;, though.</source>
          <target state="translated">Sin embargo, no s&amp;eacute; mucho sobre la &lt;a href=&quot;http://sourceforge.net/projects/javazpt/&quot;&gt;implementaci&amp;oacute;n de Java&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="209fa42a6db8dfeb3eb4eb056dd10ed5ad682f31" translate="yes" xml:space="preserve">
          <source>I have more than 20 years in programming, most of the projects fail before the sextet: Reusability Replaceability OO-ability Debuggability Testability Maintainability is even needed. Other projects, run by people who only cared about functionality, were extremely successful.  Also, stiff object structure, implemented too early in the project, makes the code unable to be adapted to the drastic changes in the specifications (aka agile).</source>
          <target state="translated">Tengo más de 20 años en programación,la mayoría de los proyectos fracasan antes del sexteto:Reusabilidad Reemplazabilidad OO-abilidad Debuggabilidad Testabilidad La mantenibilidad es incluso necesaria.Otros proyectos,dirigidos por gente que sólo se preocupaba por la funcionalidad,fueron extremadamente exitosos.Además,la rígida estructura de objetos,implementada demasiado pronto en el proyecto,hace que el código sea incapaz de adaptarse a los drásticos cambios en las especificaciones (aka agile).</target>
        </trans-unit>
        <trans-unit id="1910500d8ffa90d4b15a55788777f83ecb6b6468" translate="yes" xml:space="preserve">
          <source>I would always do that in order to prevent any developer adding scriptlets, especially in bigger companies where you will lose overview sooner or later. The &lt;code&gt;web.xml&lt;/code&gt; settings look like this:</source>
          <target state="translated">Siempre har&amp;iacute;a eso para evitar que cualquier desarrollador agregue scriptlets, especialmente en compa&amp;ntilde;&amp;iacute;as m&amp;aacute;s grandes donde perder&amp;aacute; la visi&amp;oacute;n general tarde o temprano. La configuraci&amp;oacute;n de &lt;code&gt;web.xml&lt;/code&gt; se ve as&amp;iacute;:</target>
        </trans-unit>
        <trans-unit id="c8ea5c5d6cf46dab0bf146f77bb73a4cf420ef49" translate="yes" xml:space="preserve">
          <source>I'm new to Java EE and I know that something like the following three lines</source>
          <target state="translated">Soy nuevo en Java EE y sé que algo como las siguientes tres líneas</target>
        </trans-unit>
        <trans-unit id="7897d079e730103d5c275ad30437b72216d2b88f" translate="yes" xml:space="preserve">
          <source>I'm not sure if i get this correct.</source>
          <target state="translated">No estoy seguro de que lo haya entendido bien.</target>
        </trans-unit>
        <trans-unit id="fd9279c3f407a91c673b3d198d2d7165013ce083" translate="yes" xml:space="preserve">
          <source>If translations of the content are available, they are used.</source>
          <target state="translated">Si se dispone de traducciones del contenido,se utilizan.</target>
        </trans-unit>
        <trans-unit id="85c83d910c283a8bdf255689a433590534187269" translate="yes" xml:space="preserve">
          <source>If we use the following things in a java web application, java code can be eliminated from foreground of the JSP.</source>
          <target state="translated">Si usamos las siguientes cosas en una aplicación web java,el código java puede ser eliminado del primer plano del JSP.</target>
        </trans-unit>
        <trans-unit id="bbec7d7b3dc4d02602a57d628c2e974a87621c53" translate="yes" xml:space="preserve">
          <source>If you can, then consider using a specialized technology for what you need to do.  In Java EE 6 there is JSF 2.0, which provides a lot of nice features including gluing Java beans together with JSF pages through the &lt;code&gt;#{bean.method(argument)}&lt;/code&gt; approach.</source>
          <target state="translated">Si puede, considere usar una tecnolog&amp;iacute;a especializada para lo que necesita hacer. En Java EE 6 hay JSF 2.0, que proporciona muchas caracter&amp;iacute;sticas interesantes, como pegar beans Java junto con p&amp;aacute;ginas JSF a trav&amp;eacute;s del &lt;code&gt;#{bean.method(argument)}&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1928eb1d50f68f5d11732dc80e018320691e2fae" translate="yes" xml:space="preserve">
          <source>If you want to invoke some &lt;strong&gt;utility&lt;/strong&gt; Java code directly in the JSP page (typically &lt;code&gt;public static&lt;/code&gt; methods), then you need to define them as EL functions. There's a standard &lt;a href=&quot;http://docs.oracle.com/javaee/5/jstl/1.1/docs/tlddocs/fn/tld-summary.html&quot;&gt;functions taglib&lt;/a&gt; in JSTL, but &lt;a href=&quot;http://docs.oracle.com/javaee/5/tutorial/doc/bnahq.html#bnaiq&quot;&gt;you can also easily create functions yourself&lt;/a&gt;. Here's an example how JSTL &lt;code&gt;fn:escapeXml&lt;/code&gt; is useful to prevent &lt;a href=&quot;http://en.wikipedia.org/wiki/Cross-site_scripting&quot;&gt;XSS&lt;/a&gt;&lt;a href=&quot;http://ha.ckers.org/xss.html&quot;&gt;attacks&lt;/a&gt;.</source>
          <target state="translated">Si desea invocar alg&amp;uacute;n c&amp;oacute;digo Java de &lt;strong&gt;utilidad&lt;/strong&gt; directamente en la p&amp;aacute;gina JSP (generalmente m&amp;eacute;todos &lt;code&gt;public static&lt;/code&gt; ), debe definirlos como funciones EL. Hay un &lt;a href=&quot;http://docs.oracle.com/javaee/5/jstl/1.1/docs/tlddocs/fn/tld-summary.html&quot;&gt;taglib de funciones&lt;/a&gt; est&amp;aacute;ndar en JSTL, pero &lt;a href=&quot;http://docs.oracle.com/javaee/5/tutorial/doc/bnahq.html#bnaiq&quot;&gt;tambi&amp;eacute;n puede crear funciones f&amp;aacute;cilmente usted mismo&lt;/a&gt; . Aqu&amp;iacute; hay un ejemplo de c&amp;oacute;mo JSTL &lt;code&gt;fn:escapeXml&lt;/code&gt; es &amp;uacute;til para prevenir &lt;a href=&quot;http://ha.ckers.org/xss.html&quot;&gt;ataques&lt;/a&gt; &lt;a href=&quot;http://en.wikipedia.org/wiki/Cross-site_scripting&quot;&gt;XSS&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="38577992a40047e6c37c2fb7c2cab6712a83ae8d" translate="yes" xml:space="preserve">
          <source>If you want to invoke some Java code to &lt;strong&gt;access and display&lt;/strong&gt; &quot;backend&quot; data inside a JSP page, then you need to use EL (Expression Language), those &lt;code&gt;${}&lt;/code&gt; things. E.g. redisplaying submitted input values:</source>
          <target state="translated">Si desea invocar alg&amp;uacute;n c&amp;oacute;digo Java para &lt;strong&gt;acceder y mostrar&lt;/strong&gt; datos de &quot;back-end&quot; dentro de una p&amp;aacute;gina JSP, entonces necesita usar EL (lenguaje de expresi&amp;oacute;n), esas &lt;code&gt;${}&lt;/code&gt; cosas. Por ejemplo, volver a mostrar los valores de entrada enviados:</target>
        </trans-unit>
        <trans-unit id="6e4f8370b3272119e2841c20a679e8e38d1b031c" translate="yes" xml:space="preserve">
          <source>If you want to invoke some Java code to &lt;strong&gt;control the flow&lt;/strong&gt; inside a JSP page, then you need to grab an (existing) flow control taglib like &lt;a href=&quot;http://docs.oracle.com/javaee/5/jstl/1.1/docs/tlddocs/c/tld-summary.html&quot;&gt;JSTL core&lt;/a&gt;. E.g. displaying &lt;code&gt;List&amp;lt;Product&amp;gt;&lt;/code&gt; in a table:</source>
          <target state="translated">Si desea invocar alg&amp;uacute;n c&amp;oacute;digo Java para &lt;strong&gt;controlar el flujo&lt;/strong&gt; dentro de una p&amp;aacute;gina JSP, debe tomar un taglib de control de flujo (existente) como el &lt;a href=&quot;http://docs.oracle.com/javaee/5/jstl/1.1/docs/tlddocs/c/tld-summary.html&quot;&gt;n&amp;uacute;cleo JSTL&lt;/a&gt; . Por ejemplo, mostrar &lt;code&gt;List&amp;lt;Product&amp;gt;&lt;/code&gt; en una tabla:</target>
        </trans-unit>
        <trans-unit id="8062301bb015d8a2e33cde53a0ed7e77846a2169" translate="yes" xml:space="preserve">
          <source>If you want to invoke some Java code to &lt;strong&gt;control&lt;/strong&gt; the execution plan and/or the destination of the request and the response, then implement a &lt;a href=&quot;https://stackoverflow.com/tags/servlets/info&quot;&gt;servlet&lt;/a&gt; according to the &lt;a href=&quot;https://stackoverflow.com/questions/3541077/design-patterns-web-based-applications/3542297#3542297&quot;&gt;MVC's Front Controller Pattern&lt;/a&gt;. E.g.:</source>
          <target state="translated">Si desea invocar alg&amp;uacute;n c&amp;oacute;digo Java para &lt;strong&gt;controlar&lt;/strong&gt; el plan de ejecuci&amp;oacute;n y / o el destino de la solicitud y la respuesta, implemente un &lt;a href=&quot;https://stackoverflow.com/tags/servlets/info&quot;&gt;servlet de&lt;/a&gt; acuerdo con el &lt;a href=&quot;https://stackoverflow.com/questions/3541077/design-patterns-web-based-applications/3542297#3542297&quot;&gt;Patr&amp;oacute;n del controlador frontal del MVC&lt;/a&gt; . P.ej:</target>
        </trans-unit>
        <trans-unit id="08ca864cd2ae393a77889ac801c82ca2a1e4cefd" translate="yes" xml:space="preserve">
          <source>If you want to invoke some Java code to &lt;strong&gt;postprocess&lt;/strong&gt; a request, e.g. processing a form submit, then implement a &lt;a href=&quot;https://stackoverflow.com/tags/servlets/info&quot;&gt;servlet&lt;/a&gt; and write code accordingly in &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html#doPost%28javax.servlet.http.HttpServletRequest,%20javax.servlet.http.HttpServletResponse%29&quot;&gt;&lt;code&gt;doPost()&lt;/code&gt;&lt;/a&gt; method. E.g.:</source>
          <target state="translated">Si desea invocar alg&amp;uacute;n c&amp;oacute;digo Java para procesar &lt;strong&gt;posteriormente&lt;/strong&gt; una solicitud, por ejemplo, procesar un env&amp;iacute;o de formulario, implemente un &lt;a href=&quot;https://stackoverflow.com/tags/servlets/info&quot;&gt;servlet&lt;/a&gt; y escriba el c&amp;oacute;digo en consecuencia en el m&amp;eacute;todo &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html#doPost%28javax.servlet.http.HttpServletRequest,%20javax.servlet.http.HttpServletResponse%29&quot;&gt; &lt;code&gt;doPost()&lt;/code&gt; &lt;/a&gt; . P.ej:</target>
        </trans-unit>
        <trans-unit id="85a5ccb98f8d25732291548a6b4d3d4950886db9" translate="yes" xml:space="preserve">
          <source>If you want to invoke some Java code to &lt;strong&gt;preprocess&lt;/strong&gt; a request, e.g. preloading some list from a database to display in some table, if necessary based on some query parameters, then implement a &lt;a href=&quot;https://stackoverflow.com/tags/servlets/info&quot;&gt;servlet&lt;/a&gt; and write code accordingly in &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html#doGet%28javax.servlet.http.HttpServletRequest,%20javax.servlet.http.HttpServletResponse%29&quot;&gt;&lt;code&gt;doGet()&lt;/code&gt;&lt;/a&gt; method. E.g.:</source>
          <target state="translated">Si desea invocar alg&amp;uacute;n c&amp;oacute;digo Java para &lt;strong&gt;preprocesar&lt;/strong&gt; una solicitud, por ejemplo, cargar previamente una lista de una base de datos para mostrar en alguna tabla, si es necesario en funci&amp;oacute;n de algunos par&amp;aacute;metros de consulta, luego implemente un &lt;a href=&quot;https://stackoverflow.com/tags/servlets/info&quot;&gt;servlet&lt;/a&gt; y escriba el c&amp;oacute;digo correspondiente en el m&amp;eacute;todo &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html#doGet%28javax.servlet.http.HttpServletRequest,%20javax.servlet.http.HttpServletResponse%29&quot;&gt; &lt;code&gt;doGet()&lt;/code&gt; &lt;/a&gt; . P.ej:</target>
        </trans-unit>
        <trans-unit id="7d5c2d5e3acf61c6e46e0c5bb9dbe3b694f7d5cc" translate="yes" xml:space="preserve">
          <source>If you want to invoke the &lt;strong&gt;same&lt;/strong&gt; Java code on &lt;em&gt;every&lt;/em&gt; request, less-or-more regardless of the requested page, e.g. checking if a user is logged in, then implement a &lt;a href=&quot;https://stackoverflow.com/tags/servlet-filters/info&quot;&gt;filter&lt;/a&gt; and write code accordingly in &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/servlet/Filter.html#doFilter%28javax.servlet.ServletRequest,%20javax.servlet.ServletResponse,%20javax.servlet.FilterChain%29&quot;&gt;&lt;code&gt;doFilter()&lt;/code&gt;&lt;/a&gt; method. E.g.:</source>
          <target state="translated">Si desea invocar el &lt;strong&gt;mismo&lt;/strong&gt; c&amp;oacute;digo Java en &lt;em&gt;cada&lt;/em&gt; solicitud, menos o m&amp;aacute;s independientemente de la p&amp;aacute;gina solicitada, por ejemplo, verificar si un usuario ha iniciado sesi&amp;oacute;n, luego implemente un &lt;a href=&quot;https://stackoverflow.com/tags/servlet-filters/info&quot;&gt;filtro&lt;/a&gt; y escriba el c&amp;oacute;digo en consecuencia en el m&amp;eacute;todo &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/servlet/Filter.html#doFilter%28javax.servlet.ServletRequest,%20javax.servlet.ServletResponse,%20javax.servlet.FilterChain%29&quot;&gt; &lt;code&gt;doFilter()&lt;/code&gt; &lt;/a&gt; . P.ej:</target>
        </trans-unit>
        <trans-unit id="ee11dba0fd5ce2964e4951a57cf7350d6fac840f" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;https://stackoverflow.com/tags/facelets/info&quot;&gt;Facelets&lt;/a&gt;, the successor of JSP, which is part of the Java EE provided MVC framework &lt;a href=&quot;https://stackoverflow.com/tags/jsf/info&quot;&gt;JSF&lt;/a&gt;, it is already &lt;strong&gt;not&lt;/strong&gt; possible to use &lt;em&gt;scriptlets&lt;/em&gt;. This way you're automatically forced to do things &quot;the right way&quot;.</source>
          <target state="translated">En &lt;a href=&quot;https://stackoverflow.com/tags/facelets/info&quot;&gt;Facelets&lt;/a&gt; , el sucesor de JSP, que forma parte del marco MVC proporcionado por Java EE &lt;a href=&quot;https://stackoverflow.com/tags/jsf/info&quot;&gt;JSF&lt;/a&gt; , ya &lt;strong&gt;no es&lt;/strong&gt; posible utilizar &lt;em&gt;scriptlets&lt;/em&gt; . De esta manera, se te obliga autom&amp;aacute;ticamente a hacer las cosas &quot;de la manera correcta&quot;.</target>
        </trans-unit>
        <trans-unit id="864be0601ecfce0a46e54862f1e8a20535f2a995" translate="yes" xml:space="preserve">
          <source>In my case I do my systems handling the view with Angular and any data needed is brought from the server using rest services.</source>
          <target state="translated">En mi caso hago mis sistemas manejando la vista con Angular y los datos necesarios se traen del servidor usando servicios de descanso.</target>
        </trans-unit>
        <trans-unit id="c8be22759def612993661b4f9fd9ea685f8f326b" translate="yes" xml:space="preserve">
          <source>In the MVC Architectural pattern, JSPs represent the View layer. Embedding java code in JSPs is considered a bad practice.
You can use &lt;a href=&quot;http://www.oracle.com/technetwork/java/index-jsp-135995.html&quot;&gt;JSTL&lt;/a&gt;, &lt;a href=&quot;http://freemarker.sourceforge.net/&quot;&gt;freeMarker&lt;/a&gt;, &lt;a href=&quot;http://velocity.apache.org/&quot;&gt;velocity&lt;/a&gt; with JSP as &quot;template engine&quot;.
The data provider to those tags &lt;strong&gt;depends on frameworks&lt;/strong&gt; that you are dealing with. &lt;code&gt;Struts 2&lt;/code&gt; and &lt;code&gt;webwork&lt;/code&gt; as an implementation for MVC Pattern uses &lt;a href=&quot;http://struts.apache.org/2.0.11.1/docs/ognl.html&quot;&gt;OGNL&lt;/a&gt; &quot;very interesting technique to expose Beans Properties to JSP &quot;.</source>
          <target state="translated">En el patr&amp;oacute;n arquitect&amp;oacute;nico MVC, los JSP representan la capa Vista. Incrustar c&amp;oacute;digo Java en JSP se considera una mala pr&amp;aacute;ctica. Puede usar &lt;a href=&quot;http://www.oracle.com/technetwork/java/index-jsp-135995.html&quot;&gt;JSTL&lt;/a&gt; , &lt;a href=&quot;http://freemarker.sourceforge.net/&quot;&gt;freeMarker&lt;/a&gt; , &lt;a href=&quot;http://velocity.apache.org/&quot;&gt;velocidad&lt;/a&gt; con JSP como &quot;motor de plantillas&quot;. El proveedor de datos para esas etiquetas &lt;strong&gt;depende de los marcos con los&lt;/strong&gt; que est&amp;aacute; tratando. &lt;code&gt;Struts 2&lt;/code&gt; y el trabajo &lt;code&gt;webwork&lt;/code&gt; como una implementaci&amp;oacute;n para MVC Pattern utiliza &lt;a href=&quot;http://struts.apache.org/2.0.11.1/docs/ognl.html&quot;&gt;OGNL&lt;/a&gt; &quot;una t&amp;eacute;cnica muy interesante para exponer Beans Properties a JSP&quot;.</target>
        </trans-unit>
        <trans-unit id="3379f7440ecf03bd6f4294973b1344867b834b45" translate="yes" xml:space="preserve">
          <source>In the spirit of adopting the model-view-controller (MVC) design pattern to reduce coupling between the presentation tier from the business logic, &lt;strong&gt;JSP scriptlets should not be used&lt;/strong&gt; for writing business logic. Rather, JSP scriptlets are used if necessary to transform data (also called &quot;value objects&quot;) returned from processing the client's requests into a proper client-ready format. Even then, this would be better done with a front controller servlet or a custom tag.</source>
          <target state="translated">En el esp&amp;iacute;ritu de adoptar el patr&amp;oacute;n de dise&amp;ntilde;o modelo-vista-controlador (MVC) para reducir el acoplamiento entre el nivel de presentaci&amp;oacute;n de la l&amp;oacute;gica de negocios, los &lt;strong&gt;scriptlets JSP no deben usarse&lt;/strong&gt; para escribir l&amp;oacute;gica de negocios. Por el contrario, los scriptlets JSP se usan si es necesario para transformar los datos (tambi&amp;eacute;n llamados &quot;objetos de valor&quot;) devueltos por el procesamiento de las solicitudes del cliente en un formato adecuado listo para el cliente. Incluso entonces, esto se har&amp;iacute;a mejor con un servlet controlador frontal o una etiqueta personalizada.</target>
        </trans-unit>
        <trans-unit id="5844156b0df20492d28065d5072469ba59148486" translate="yes" xml:space="preserve">
          <source>Instead, you can use:</source>
          <target state="translated">En cambio,puedes usar:</target>
        </trans-unit>
        <trans-unit id="9c48d9289fc64581e90dcccfc40ce37a3369ae26" translate="yes" xml:space="preserve">
          <source>JSP 2.0 has a feature called &lt;strong&gt;&quot;Tag Files&quot;&lt;/strong&gt;, you can write tags without external &lt;code&gt;java&lt;/code&gt; code and &lt;code&gt;tld&lt;/code&gt;. You need to create a &lt;code&gt;.tag&lt;/code&gt; file and put it in &lt;code&gt;WEB-INF\tags&lt;/code&gt; you can even create a directory structure to package your tags.</source>
          <target state="translated">JSP 2.0 tiene una caracter&amp;iacute;stica llamada &lt;strong&gt;&quot;Archivos de etiquetas&quot;&lt;/strong&gt; , puede escribir etiquetas sin c&amp;oacute;digo &lt;code&gt;java&lt;/code&gt; externo y &lt;code&gt;tld&lt;/code&gt; . &lt;code&gt;.tag&lt;/code&gt; crear un archivo .tag y ponerlo en &lt;code&gt;WEB-INF\tags&lt;/code&gt; , incluso puede crear una estructura de directorio para empaquetar sus etiquetas.</target>
        </trans-unit>
        <trans-unit id="9b22fe878901f07cf06aca41d7e95d932c6cc98d" translate="yes" xml:space="preserve">
          <source>JSTL tags</source>
          <target state="translated">Las etiquetas de la JSTL</target>
        </trans-unit>
        <trans-unit id="a2be0f0a69d1324f0a28e325f93637011a05b9ab" translate="yes" xml:space="preserve">
          <source>JSTL works with request attributes - they are most often set in the request by a Servlet, which &lt;em&gt;forwards&lt;/em&gt; to the JSP.</source>
          <target state="translated">JSTL funciona con atributos de solicitud: la mayor&amp;iacute;a de las veces se configura en la solicitud mediante un Servlet, que se &lt;em&gt;reenv&amp;iacute;a&lt;/em&gt; al JSP.</target>
        </trans-unit>
        <trans-unit id="a696556e75e9ef96d0226d1c056f84b37d8f28c0" translate="yes" xml:space="preserve">
          <source>Just use the JSTL tag and EL expression.</source>
          <target state="translated">Sólo usa la etiqueta JSTL y la expresión EL.</target>
        </trans-unit>
        <trans-unit id="b61ea7debe4e081d0507e4a1d7a1698d231f004b" translate="yes" xml:space="preserve">
          <source>Look at Wicket.</source>
          <target state="translated">Mira a Wicket.</target>
        </trans-unit>
        <trans-unit id="9c9a06a4a3b3f8ba0b6e04a8601d038b496c2c91" translate="yes" xml:space="preserve">
          <source>Make your values and parameters inside your servlet classes</source>
          <target state="translated">Haz que tus valores y parámetros dentro de tus clases de servlets</target>
        </trans-unit>
        <trans-unit id="6b1ec125525f6f889b55a94c4be3db9e02183779" translate="yes" xml:space="preserve">
          <source>No matter how much you try to avoid, when you work with other developers, some of them will still prefer scriptlet and then insert the evil code into the project. Therefore, setting up the project at the first sign is very important if you really want to reduce the scriptlet code. There are several techniques to get over this (including several frameworks that other mentioned). However, if you prefer the pure JSP way, then use the JSTL tag file. The nice thing about this is you can also set up master pages for your project, so the other pages can inherit the master pages</source>
          <target state="translated">No importa cuánto intentes evitar,cuando trabajes con otros desarrolladores,algunos de ellos seguirán prefiriendo el scriptlet y luego insertarán el código maligno en el proyecto.Por lo tanto,configurar el proyecto a la primera señal es muy importante si realmente quieres reducir el código del scriptlet.Hay varias técnicas para superar esto (incluyendo varios frameworks que otros mencionaron).Sin embargo,si prefieres la forma pura de JSP,entonces usa el archivo de etiquetas JSTL.Lo bueno de esto es que también puedes configurar páginas maestras para tu proyecto,así las otras páginas pueden heredar las páginas maestras</target>
        </trans-unit>
        <trans-unit id="7496f24aecc09eb1dcd7346285873e798f1449a9" translate="yes" xml:space="preserve">
          <source>Note that EL is &lt;strong&gt;EviL&lt;/strong&gt; (runtime exceptions, refactoring)</source>
          <target state="translated">Tenga en cuenta que EL es &lt;strong&gt;EviL&lt;/strong&gt; (excepciones de tiempo de ejecuci&amp;oacute;n, refactorizaci&amp;oacute;n)</target>
        </trans-unit>
        <trans-unit id="6f49536a3746430c8f949ea7a5a7a57bcc58bbc4" translate="yes" xml:space="preserve">
          <source>Note that the XSS sensitivity is in no way specifically related to Java/JSP/JSTL/EL/whatever, this problem needs to be taken into account in &lt;strong&gt;every&lt;/strong&gt; web application you develop. The problem of &lt;em&gt;scriptlets&lt;/em&gt; is that it provides no way of builtin preventions, at least not using the standard Java API. JSP's successor Facelets has already implicit HTML escaping, so you don't need to worry about XSS holes in Facelets.</source>
          <target state="translated">Tenga en cuenta que la sensibilidad XSS no est&amp;aacute; relacionada de ninguna manera espec&amp;iacute;ficamente con Java / JSP / JSTL / EL / lo que sea, este problema debe tenerse en cuenta en &lt;strong&gt;cada&lt;/strong&gt; aplicaci&amp;oacute;n web que desarrolle. El problema de los &lt;em&gt;scriptlets&lt;/em&gt; es que no proporciona ninguna forma de prevenci&amp;oacute;n integrada, al menos no utilizando la API Java est&amp;aacute;ndar. El sucesor de JSP, Facelets, ya tiene un escape de HTML impl&amp;iacute;cito, por lo que no debe preocuparse por los agujeros XSS en Facelets.</target>
        </trans-unit>
        <trans-unit id="b753a681b0a58549d95c372d985f246cfe1be0e5" translate="yes" xml:space="preserve">
          <source>Nothing of that is used anymore my friend, my advice is to decouple the view(css, html, javascript, etc) from the server.</source>
          <target state="translated">Nada de eso se usa ya mi amigo,mi consejo es desacoplar la vista (css,html,javascript,etc)del servidor.</target>
        </trans-unit>
        <trans-unit id="a9423ba2ba1eee5498d3d54ff884a89cb29e92d1" translate="yes" xml:space="preserve">
          <source>Of course if you want, you can hack yourself into the depths of the code and inject JS and enrich your HTML page, but really you can avoid it if you want, and the result will be good as it was written in any other frameworks. I say worths a try, and the basic GWT is well-documented.</source>
          <target state="translated">Por supuesto que si quieres,puedes hackearte a ti mismo en las profundidades del código e inyectar JS y enriquecer tu página HTML,pero realmente puedes evitarlo si quieres,y el resultado será bueno como fue escrito en cualquier otro marco.Yo digo que vale la pena intentarlo,y el GWT básico está bien documentado.</target>
        </trans-unit>
        <trans-unit id="0d7095f0f8c2e78814464e734575ef8202541d71" translate="yes" xml:space="preserve">
          <source>On this mater page, I created a fragment called &quot;title&quot;, so that in the child page, I could insert more codes into this place of the master page. Also, the tag &lt;code&gt;&amp;lt;jsp:doBody/&amp;gt;&lt;/code&gt; will be replaced by the content of the child page</source>
          <target state="translated">En esta p&amp;aacute;gina mater, cre&amp;eacute; un fragmento llamado &quot;t&amp;iacute;tulo&quot;, para que en la p&amp;aacute;gina secundaria, pudiera insertar m&amp;aacute;s c&amp;oacute;digos en este lugar de la p&amp;aacute;gina maestra. Adem&amp;aacute;s, la etiqueta &lt;code&gt;&amp;lt;jsp:doBody/&amp;gt;&lt;/code&gt; ser&amp;aacute; reemplazada por el contenido de la p&amp;aacute;gina secundaria</target>
        </trans-unit>
        <trans-unit id="4c857f865a5b7dda907f07a7e5d9a5393957617c" translate="yes" xml:space="preserve">
          <source>Or just adopt an MVC framework like &lt;a href=&quot;https://stackoverflow.com/tags/jsf/info&quot;&gt;JSF&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/tags/spring-mvc/info&quot;&gt;Spring MVC&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/tags/wicket/info&quot;&gt;Wicket&lt;/a&gt;, etc so that you end up with just a JSP/Facelets page and a JavaBean class without the need for a custom servlet.</source>
          <target state="translated">O simplemente adopte un marco MVC como &lt;a href=&quot;https://stackoverflow.com/tags/jsf/info&quot;&gt;JSF&lt;/a&gt; , &lt;a href=&quot;https://stackoverflow.com/tags/spring-mvc/info&quot;&gt;Spring MVC&lt;/a&gt; , &lt;a href=&quot;https://stackoverflow.com/tags/wicket/info&quot;&gt;Wicket&lt;/a&gt; , etc. para que termine con solo una p&amp;aacute;gina JSP / Facelets y una clase JavaBean sin la necesidad de un servlet personalizado.</target>
        </trans-unit>
        <trans-unit id="99c7ca3264a1d4cbc0d2abe683d40da7282d8bf4" translate="yes" xml:space="preserve">
          <source>Please refer to:</source>
          <target state="translated">Por favor,refiérase a:</target>
        </trans-unit>
        <trans-unit id="371a87eafb4de078ff674d69a5a89c186532eb49" translate="yes" xml:space="preserve">
          <source>See also:</source>
          <target state="translated">Ver también:</target>
        </trans-unit>
        <trans-unit id="cdb70868019074559ad053d547795310d3f219bf" translate="yes" xml:space="preserve">
          <source>So I consider as procrastination the activity of defining &quot;layers&quot; or redundant data structures either early in the project or when not specifically required. &amp;nbsp;</source>
          <target state="translated">Por lo tanto, considero como dilaci&amp;oacute;n la actividad de definir &quot;capas&quot; o estructuras de datos redundantes, ya sea al principio del proyecto o cuando no se requiera espec&amp;iacute;ficamente.</target>
        </trans-unit>
        <trans-unit id="6da13addb000b67d42a6d66391713819e634149f" translate="yes" xml:space="preserve">
          <source>Source</source>
          <target state="translated">Source</target>
        </trans-unit>
        <trans-unit id="fc9f10111119b6c9e526812b2a1905fd175f558d" translate="yes" xml:space="preserve">
          <source>Start server and load the bodyContent.jsp in browser</source>
          <target state="translated">Inicie el servidor y cargue el bodyContent.jsp en el navegador</target>
        </trans-unit>
        <trans-unit id="2b8e6dd7bd02bbe0f0a2cd944adb7c18a7b97db2" translate="yes" xml:space="preserve">
          <source>Sure, replace &lt;code&gt;&amp;lt;%! counter++; %&amp;gt;&lt;/code&gt; by an event producer-consumer architecture, where the business layer is notified about the need to increment the counter, it reacts accordingly, and notifies the presenters so that they update the views. A number of database transactions are involved, since in future we will need to know the new and old value of the counter, who has incremented it and with what purpose in mind. Obviously serialization is involved, since the layers are entirely decoupled. You will be able to increment your counter over RMI, IIOP, SOAP. But only HTML is required, which you don't implement, since it is such a mundane case. Your new goal is to reach 250 increments a second on your new shiny E7, 64GB RAM server.</source>
          <target state="translated">Claro, reemplace &lt;code&gt;&amp;lt;%! counter++; %&amp;gt;&lt;/code&gt; contador ++; %&amp;gt; por una arquitectura de productor-consumidor de eventos, donde se notifica a la capa empresarial sobre la necesidad de incrementar el contador, reacciona en consecuencia y notifica a los presentadores para que actualicen las vistas. Hay varias transacciones de bases de datos involucradas, ya que en el futuro necesitaremos conocer el valor nuevo y antiguo del contador, qui&amp;eacute;n lo ha incrementado y con qu&amp;eacute; prop&amp;oacute;sito en mente. Obviamente, la serializaci&amp;oacute;n est&amp;aacute; involucrada, ya que las capas est&amp;aacute;n completamente desacopladas. Podr&amp;aacute; incrementar su contador sobre RMI, IIOP, SOAP. Pero solo se requiere HTML, que no se implementa, ya que es un caso tan mundano. Su nuevo objetivo es alcanzar 250 incrementos por segundo en su nuevo y brillante servidor E7 de 64 GB de RAM.</target>
        </trans-unit>
        <trans-unit id="01f6458927b598fd06f1c9b9b3871a4a81966830" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;${param.foo}&lt;/code&gt; displays the outcome of &lt;code&gt;request.getParameter(&quot;foo&quot;)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;${param.foo}&lt;/code&gt; muestra el resultado de &lt;code&gt;request.getParameter(&quot;foo&quot;)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a9b0f7ac06bef52c90743fd20479795225d799b5" translate="yes" xml:space="preserve">
          <source>The code looks like ordinary HTML (or XHTML) plus some special attributes in an XML namespace; it can be viewed with a browser and safely be tweaked by a designer.
There is support for macros and for i18n as well:</source>
          <target state="translated">El código se ve como HTML ordinario (o XHTML)más algunos atributos especiales en un espacio de nombres XML;puede ser visto con un navegador y ser ajustado con seguridad por un diseñador.Hay soporte para macros y para i18n también:</target>
        </trans-unit>
        <trans-unit id="8beffd5c99ba40a7c520fac4a0fe7cf1204fe64a" translate="yes" xml:space="preserve">
          <source>The good thing about this approach is that your code is also HTML like
  code!</source>
          <target state="translated">Lo bueno de este enfoque es que tu código es también HTML como código!</target>
        </trans-unit>
        <trans-unit id="5b8afa3aa8081cc0ec560cc7ed29305aed1be3f6" translate="yes" xml:space="preserve">
          <source>The major disadvantages of &lt;em&gt;scriptlets&lt;/em&gt; are:</source>
          <target state="translated">Las principales desventajas de los &lt;em&gt;scriptlets&lt;/em&gt; son:</target>
        </trans-unit>
        <trans-unit id="6e8eeb645a8a0b3cea3e70c5c9d1a8b1815529b1" translate="yes" xml:space="preserve">
          <source>The samples are very simple but you can do lots of complicated tasks here. Please consider you can use other tags (eg: &lt;code&gt;JSTL&lt;/code&gt; which has controlling tags like &lt;code&gt;if/forEcah/chosen&lt;/code&gt; text manipulation like &lt;code&gt;format/contains/uppercase&lt;/code&gt; or even SQL tags &lt;code&gt;select/update&lt;/code&gt;), pass all kind parameters, for example &lt;code&gt;Hashmap&lt;/code&gt;, access &lt;code&gt;session&lt;/code&gt;, &lt;code&gt;request&lt;/code&gt;, ... in your tag file too.</source>
          <target state="translated">Las muestras son muy simples, pero puedes hacer muchas tareas complicadas aqu&amp;iacute;. Tenga en cuenta que puede usar otras etiquetas (por ejemplo: &lt;code&gt;JSTL&lt;/code&gt; que tiene etiquetas de control como &lt;code&gt;if/forEcah/chosen&lt;/code&gt; manipulaci&amp;oacute;n de texto elegida como &lt;code&gt;format/contains/uppercase&lt;/code&gt; o incluso etiquetas SQL &lt;code&gt;select/update&lt;/code&gt; ), pasar todos los par&amp;aacute;metros amables, por ejemplo &lt;code&gt;Hashmap&lt;/code&gt; , &lt;code&gt;session&lt;/code&gt; acceso, &lt;code&gt;request&lt;/code&gt; , ... en su archivo de etiqueta tambi&amp;eacute;n.</target>
        </trans-unit>
        <trans-unit id="cadf4f01d22ba51a03cf9a23cd0debeb245888e3" translate="yes" xml:space="preserve">
          <source>The use of &lt;em&gt;scriptlets&lt;/em&gt; (those &lt;code&gt;&amp;lt;% %&amp;gt;&lt;/code&gt; things) in &lt;a href=&quot;https://stackoverflow.com/tags/jsp/info&quot;&gt;JSP&lt;/a&gt; is indeed highly discouraged since the birth of &lt;em&gt;taglibs&lt;/em&gt; (like &lt;a href=&quot;https://stackoverflow.com/tags/jstl/info&quot;&gt;JSTL&lt;/a&gt;) and &lt;a href=&quot;https://stackoverflow.com/tags/el/info&quot;&gt;EL&lt;/a&gt; (&lt;a href=&quot;https://stackoverflow.com/tags/el/info&quot;&gt;Expression Language&lt;/a&gt;, those &lt;code&gt;${}&lt;/code&gt; things) way back in 2001.</source>
          <target state="translated">El uso de &lt;em&gt;scriptlets&lt;/em&gt; (esas &lt;code&gt;&amp;lt;% %&amp;gt;&lt;/code&gt; &lt;em&gt;%%&lt;/em&gt; &amp;gt; cosas) en &lt;a href=&quot;https://stackoverflow.com/tags/jsp/info&quot;&gt;JSP&lt;/a&gt; est&amp;aacute; muy desaconsejado desde el nacimiento de &lt;em&gt;taglibs&lt;/em&gt; (como &lt;a href=&quot;https://stackoverflow.com/tags/jstl/info&quot;&gt;JSTL&lt;/a&gt; ) y &lt;a href=&quot;https://stackoverflow.com/tags/el/info&quot;&gt;EL&lt;/a&gt; ( &lt;a href=&quot;https://stackoverflow.com/tags/el/info&quot;&gt;Expression Language&lt;/a&gt; , esas &lt;code&gt;${}&lt;/code&gt; cosas) en 2001.</target>
        </trans-unit>
        <trans-unit id="218a7074a3a3abead1ad3409aeb72a9cfe4b36d1" translate="yes" xml:space="preserve">
          <source>There are also component-based frameworks such as &lt;strong&gt;Wicket&lt;/strong&gt; that generate a lot of the HTML for you.  The tags that end up in the HTML are extremely basic and there is virtually no logic that gets mixed in.  The result is almost empty-like HTML pages with typical HTML elements.  The downside is that there are a lot of components in the &lt;strong&gt;Wicket&lt;/strong&gt; API to learn and some things can be difficult to achieve under those constraints.</source>
          <target state="translated">Tambi&amp;eacute;n hay marcos basados ​​en componentes como &lt;strong&gt;Wicket&lt;/strong&gt; que generan mucho HTML para usted. Las etiquetas que terminan en el HTML son extremadamente b&amp;aacute;sicas y pr&amp;aacute;cticamente no hay l&amp;oacute;gica que se mezcle. El resultado son p&amp;aacute;ginas HTML casi vac&amp;iacute;as con elementos HTML t&amp;iacute;picos. La desventaja es que hay muchos componentes en la API de &lt;strong&gt;Wicket&lt;/strong&gt; para aprender y algunas cosas pueden ser dif&amp;iacute;ciles de lograr con esas limitaciones.</target>
        </trans-unit>
        <trans-unit id="abcbc7b89ae11ccfa31d98b70ef4451cfb919707" translate="yes" xml:space="preserve">
          <source>There are also other options such as using a templating engine such as Velocity, Freemarker, Thymeleaf etc. But using plain JSP with EL and JSTL serves my purpose most of the time and it also seems the simplest for a beginner.</source>
          <target state="translated">También hay otras opciones como el uso de un motor de plantillas como Velocity,Freemarker,Thymeleaf,etc.Pero el uso de JSP simple con EL y JSTL sirve a mi propósito la mayoría de las veces y también parece el más simple para un principiante.</target>
        </trans-unit>
        <trans-unit id="c1ff3b8432d55d1428f36863b4e57b392badd9db" translate="yes" xml:space="preserve">
          <source>This must be added to the web application's web.xml</source>
          <target state="translated">Esto debe ser añadido a la aplicación web.xml de la web.</target>
        </trans-unit>
        <trans-unit id="6024548a077642e1968e58baff37a727cc4dd31b" translate="yes" xml:space="preserve">
          <source>This way dealing with different result page destinations is easier: redisplaying the form with validation errors in case of an error (in this particular example you can redisplay it using &lt;code&gt;${message}&lt;/code&gt; in &lt;a href=&quot;https://stackoverflow.com/tags/el/info&quot;&gt;EL&lt;/a&gt;), or just taking to the desired target page in case of success.</source>
          <target state="translated">De esta manera, tratar con diferentes destinos de p&amp;aacute;ginas de resultados es m&amp;aacute;s f&amp;aacute;cil: volver a mostrar el formulario con errores de validaci&amp;oacute;n en caso de error (en este ejemplo particular, puede volver a mostrarlo usando &lt;code&gt;${message}&lt;/code&gt; en &lt;a href=&quot;https://stackoverflow.com/tags/el/info&quot;&gt;EL&lt;/a&gt; ), o simplemente ir a la p&amp;aacute;gina de destino deseada en caso del &amp;eacute;xito.</target>
        </trans-unit>
        <trans-unit id="5c2f2b58b23cb864bd138ae1ceef470b24b2359f" translate="yes" xml:space="preserve">
          <source>This way dealing with exceptions is easier. The DB is not accessed in the midst of JSP rendering, but far before the JSP is been displayed. You still have the possibility to change the response whenever the DB access throws an exception. In the above example, the default error 500 page will be displayed which you can anyway customize by an &lt;code&gt;&amp;lt;error-page&amp;gt;&lt;/code&gt; in &lt;code&gt;web.xml&lt;/code&gt;.</source>
          <target state="translated">De esta manera, lidiar con las excepciones es m&amp;aacute;s f&amp;aacute;cil. No se accede a la base de datos en medio de la representaci&amp;oacute;n JSP, pero mucho antes de que se muestre la JSP. Todav&amp;iacute;a tiene la posibilidad de cambiar la respuesta cada vez que el acceso a la base de datos arroja una excepci&amp;oacute;n. En el ejemplo anterior, se mostrar&amp;aacute; la p&amp;aacute;gina de error 500 predeterminada que de todos modos puede personalizar mediante una &lt;code&gt;&amp;lt;error-page&amp;gt;&lt;/code&gt; en &lt;code&gt;web.xml&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3d73eb9cadb674305772ade110550c254cf89564" translate="yes" xml:space="preserve">
          <source>Use &lt;strong&gt;&lt;code&gt;JSTL Tag libraries&lt;/code&gt;&lt;/strong&gt; in JSP, that will work perfect.</source>
          <target state="translated">Utilice las &lt;strong&gt; &lt;code&gt;JSTL Tag libraries&lt;/code&gt; &lt;/strong&gt; en JSP, que funcionar&amp;aacute;n perfectamente.</target>
        </trans-unit>
        <trans-unit id="972fb805d526ef28466dd6b7247afcf3429e9d40" translate="yes" xml:space="preserve">
          <source>Use JSP Tags</source>
          <target state="translated">Usar las etiquetas JSP</target>
        </trans-unit>
        <trans-unit id="efe4cc8e2edf71091f863266b5fca3301038b019" translate="yes" xml:space="preserve">
          <source>Use MVC architecture for web application</source>
          <target state="translated">Usar la arquitectura MVC para la aplicación web</target>
        </trans-unit>
        <trans-unit id="c0c4ea117b4cdb87ebd6313e300e1a15bc1a004d" translate="yes" xml:space="preserve">
          <source>Use backbone , angular like javascript framework for UI design
and fetch the data using rest api. This will remove the java dependency from UI completely.</source>
          <target state="translated">Usa la columna vertebral,el marco angular como javascript para el diseño de la interfaz de usuario y busca los datos usando la API de reposo.Esto eliminará completamente la dependencia de la java de la UI.</target>
        </trans-unit>
        <trans-unit id="377f415dafbf7162b7e2c41493428f47026cb16c" translate="yes" xml:space="preserve">
          <source>Use it</source>
          <target state="translated">Úsalo.</target>
        </trans-unit>
        <trans-unit id="b3812e1a927a9030d7df61a9f7b76633477e4d2c" translate="yes" xml:space="preserve">
          <source>Use it like</source>
          <target state="translated">Úsalo como</target>
        </trans-unit>
        <trans-unit id="6d7ad08fbab98413abb910036a07cbbf3706c8d5" translate="yes" xml:space="preserve">
          <source>Using Scriptlets is a very old way and Not recommended. If you want directly output something in your JSP pages just use &lt;strong&gt;Expression Language(EL)&lt;/strong&gt;  along with &lt;strong&gt;JSTL&lt;/strong&gt; .</source>
          <target state="translated">Usar Scriptlets es una forma muy antigua y no se recomienda. Si desea generar directamente algo en sus p&amp;aacute;ginas JSP, simplemente use &lt;strong&gt;Expression Language (EL)&lt;/strong&gt; junto con &lt;strong&gt;JSTL&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="d2677389ab068b68879414df724ecfabd8859f86" translate="yes" xml:space="preserve">
          <source>Using scriptlets in JSPs is not a good practice.</source>
          <target state="translated">El uso de scripts en los JSP no es una buena práctica.</target>
        </trans-unit>
        <trans-unit id="baf3fd0379691440bf2b3e4cbf92cad964713892" translate="yes" xml:space="preserve">
          <source>What's the difference between JSP, Servlet and JSF?</source>
          <target state="translated">¿Cuál es la diferencia entre JSP,Servlet y JSF?</target>
        </trans-unit>
        <trans-unit id="17b74992560cf4122ca5285c428807fb001749e8" translate="yes" xml:space="preserve">
          <source>When mapped on an appropriate &lt;code&gt;&amp;lt;url-pattern&amp;gt;&lt;/code&gt; covering the JSP pages of interest, then you don't need to copypaste the same piece of code overall JSP pages.</source>
          <target state="translated">Cuando se asigna en un &lt;code&gt;&amp;lt;url-pattern&amp;gt;&lt;/code&gt; apropiado que cubre las p&amp;aacute;ginas JSP de inter&amp;eacute;s, entonces no necesita copiar y pegar la misma pieza de c&amp;oacute;digo en general en las p&amp;aacute;ginas JSP.</target>
        </trans-unit>
        <trans-unit id="01de0b031979bcf7bb834c121a66d1089532c613" translate="yes" xml:space="preserve">
          <source>Where possible, &lt;strong&gt;avoid JSP scriptlets&lt;/strong&gt; whenever tag libraries provide equivalent functionality. This makes pages easier to read and maintain, helps to separate business logic from presentation logic, and will make your pages easier to evolve into JSP 2.0-style pages (JSP 2.0 Specification supports but de-emphasizes the use of scriptlets).</source>
          <target state="translated">Siempre que sea posible, &lt;strong&gt;evite los scriptlets JSP&lt;/strong&gt; siempre que las bibliotecas de etiquetas proporcionen una funcionalidad equivalente. Esto hace que las p&amp;aacute;ginas sean m&amp;aacute;s f&amp;aacute;ciles de leer y mantener, ayuda a separar la l&amp;oacute;gica de negocios de la l&amp;oacute;gica de presentaci&amp;oacute;n y har&amp;aacute; que sus p&amp;aacute;ginas sean m&amp;aacute;s f&amp;aacute;ciles de evolucionar a p&amp;aacute;ginas de estilo JSP 2.0 (la especificaci&amp;oacute;n JSP 2.0 admite pero desestima el uso de scriptlets).</target>
        </trans-unit>
        <trans-unit id="01f59bf1a510897a780d5b0160084a576e832196" translate="yes" xml:space="preserve">
          <source>Wicket is also an alternative which completely separates java from html, so a designer and programmer can work together and on different sets of code with little understanding of each other.</source>
          <target state="translated">Wicket es también una alternativa que separa completamente el java del html,por lo que un diseñador y un programador pueden trabajar juntos y en diferentes conjuntos de código con poca comprensión del otro.</target>
        </trans-unit>
        <trans-unit id="b75de34560a918f4ac6c5fab856eab492b0b22c7" translate="yes" xml:space="preserve">
          <source>Wicket may be evil too (performance, toilsome for small apps or simple view tier)</source>
          <target state="translated">Wicket también puede ser malvado (rendimiento,trabajo duro para pequeñas aplicaciones o simple nivel de visión)</target>
        </trans-unit>
        <trans-unit id="aab83ba5ea14f383f9f61cd2b8c7c97740eddee3" translate="yes" xml:space="preserve">
          <source>With XML-style tags which fit nicely among all that HTML, the code is better readable (and thus better maintainable) than a bunch of scriptlets with various opening and closing braces (&lt;em&gt;&quot;Where the heck does this closing brace belong to?&quot;&lt;/em&gt;). An easy aid is to configure your web application to throw an exception whenever &lt;em&gt;scriptlets&lt;/em&gt; are still been used by adding the following piece to &lt;code&gt;web.xml&lt;/code&gt;:</source>
          <target state="translated">Con etiquetas de estilo XML que se adaptan perfectamente a todo ese HTML, el c&amp;oacute;digo es mejor legible (y por lo tanto mejor mantenible) que un mont&amp;oacute;n de scriptlets con varias llaves de apertura y cierre ( &lt;em&gt;&quot;&amp;iquest;A d&amp;oacute;nde diablos pertenece esta llave de cierre?&quot;&lt;/em&gt; ). Una ayuda f&amp;aacute;cil es configurar su aplicaci&amp;oacute;n web para que arroje una excepci&amp;oacute;n siempre que se sigan utilizando &lt;em&gt;scriptlets&lt;/em&gt; agregando la siguiente pieza a &lt;code&gt;web.xml&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="4c2bf52d41e06e8a6a1ac6943b1e400cec513ec0" translate="yes" xml:space="preserve">
          <source>You can easily call the child.jsp file from your controller. This also works nice with the struts framework</source>
          <target state="translated">Puedes llamar fácilmente al archivo child.jsp desde tu controlador.Esto también funciona bien con el marco de puntales</target>
        </trans-unit>
        <trans-unit id="ec25fe25e9b159c96d4f928b8e4b3bb1e43e1359" translate="yes" xml:space="preserve">
          <source>You can use JSTL tags together with EL expressions to avoid intermixing Java and HTML code:</source>
          <target state="translated">Puedes usar etiquetas JSTL junto con expresiones EL para evitar la mezcla de código Java y HTML:</target>
        </trans-unit>
        <trans-unit id="eb8afc4289a7ce63d3c4d9c0cdfed01af3cd38db" translate="yes" xml:space="preserve">
          <source>You can use tab library tags like &lt;strong&gt;JSTL&lt;/strong&gt; in addition to Expression Language (&lt;strong&gt;EL&lt;/strong&gt;). But EL does not work well with JSP. So it's is probably better to drop JSP completely and use &lt;strong&gt;Facelets&lt;/strong&gt;.</source>
          <target state="translated">Puede usar etiquetas de biblioteca de pesta&amp;ntilde;as como &lt;strong&gt;JSTL&lt;/strong&gt; adem&amp;aacute;s de Expression Language ( &lt;strong&gt;EL&lt;/strong&gt; ). Pero EL no funciona bien con JSP. Por lo tanto, probablemente sea mejor soltar JSP por completo y usar &lt;strong&gt;Facelets&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="48dd74417b4ebc09a65eea14b7b8611e65edcdff" translate="yes" xml:space="preserve">
          <source>You can use tag not only to avoid java but also minimize your HTML codes. I myself try to review HTML codes and build tags a lot as soon as see code duplicates start in my pages.</source>
          <target state="translated">Puedes usar la etiqueta no sólo para evitar el java sino también para minimizar tus códigos HTML.Yo mismo trato de revisar los códigos HTML y construir etiquetas mucho en cuanto veo que los códigos duplicados comienzan en mis páginas.</target>
        </trans-unit>
        <trans-unit id="6885c7a4e9ed902334d26715dd6b36e91c4fb7ea" translate="yes" xml:space="preserve">
          <source>You raised a good question and although you got good answers, I would suggest that you get rid of JSP. It is outdated technology which eventually will die. Use a modern approach, like template engines. You will have very clear separation of business and presentation layers, and certainly no Java code in templates, so you can generate templates directly from web presentation editing software, in most cases leveraging WYSIWYG.</source>
          <target state="translated">Hiciste una buena pregunta y aunque tienes buenas respuestas,te sugiero que te deshagas de JSP.Es una tecnología obsoleta que eventualmente morirá.Utiliza un enfoque moderno,como los motores de plantilla.Tendrás una separación muy clara de las capas de negocios y de presentación,y ciertamente no hay código Java en las plantillas,por lo que puedes generar plantillas directamente desde el software de edición de presentaciones web,en la mayoría de los casos aprovechando WYSIWYG.</target>
        </trans-unit>
        <trans-unit id="438273965ed8aa8796321fe5db1f2057f772a67b" translate="yes" xml:space="preserve">
          <source>You should read something about MVC. &lt;a href=&quot;http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/mvc.html&quot;&gt;Spring MVC&lt;/a&gt; &amp;amp; &lt;a href=&quot;http://struts.apache.org/2.1.8.1/index.html&quot;&gt;Struts 2&lt;/a&gt; are the two most common solutions.</source>
          <target state="translated">Deber&amp;iacute;as leer algo sobre MVC. &lt;a href=&quot;http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/mvc.html&quot;&gt;Spring MVC&lt;/a&gt; &amp;amp; &lt;a href=&quot;http://struts.apache.org/2.1.8.1/index.html&quot;&gt;Struts 2&lt;/a&gt; son las dos soluciones m&amp;aacute;s comunes.</target>
        </trans-unit>
        <trans-unit id="b8ab5363e1e6302f03570a1b8e0ae9b88cbfdce5" translate="yes" xml:space="preserve">
          <source>a. Standard Tags</source>
          <target state="translated">a.Etiquetas estándar</target>
        </trans-unit>
        <trans-unit id="04f6e1d2c89d5b0154e152d11433b9186a0b3846" translate="yes" xml:space="preserve">
          <source>b. Custom Tags</source>
          <target state="translated">b.Etiquetas personalizadas</target>
        </trans-unit>
        <trans-unit id="91fe1449aaf03867f86a0b155fcee28ddfd0f9e8" translate="yes" xml:space="preserve">
          <source>compile the following code into WEB-INF\classes\com\java2s</source>
          <target state="translated">compilar el siguiente código en WEB-INF\clases\com\java2s</target>
        </trans-unit>
        <trans-unit id="a3aca3110daeea1fa393016d5451337f69813249" translate="yes" xml:space="preserve">
          <source>create File:java2s.tld in the /WEB-INF/</source>
          <target state="translated">crear File:java2s.tld en el WEB-INF</target>
        </trans-unit>
        <trans-unit id="347e7a992309f255fbabef719461f73688c0b617" translate="yes" xml:space="preserve">
          <source>if you simply want to avoid the drawbacks of Java coding in JSP you can do so even with scriplets. Just follow some discipline to have minimal Java in JSP and almost no calculation and logic in the JSP page.</source>
          <target state="translated">si simplemente quieres evitar los inconvenientes de la codificación de Java en JSP puedes hacerlo incluso con scriplets.Sólo tienes que seguir alguna disciplina para tener un mínimo de Java en JSP y casi ningún cálculo y lógica en la página de JSP.</target>
        </trans-unit>
        <trans-unit id="5cc12c11e0ce089f9fb529b087b6387795003c7c" translate="yes" xml:space="preserve">
          <source>in order to avoid java code in JSP files java now provides tag libraries like JSTL also java has come up with JSF into which u can write all programming structures in the form of tags</source>
          <target state="translated">para evitar el código java en los archivos JSP java ahora proporciona bibliotecas de etiquetas como JSTL también java ha llegado con JSF en el que puede escribir todas las estructuras de programación en forma de etiquetas</target>
        </trans-unit>
        <trans-unit id="95d9818e59ca8aa7c7ec1cf5d55885788554dd7a" translate="yes" xml:space="preserve">
          <source>is an old school way of coding and in JSP version 2 there exists a method to avoid Java code in JSP files. Can someone please tell me the alternative JSP 2 lines, and what this technique is called?</source>
          <target state="translated">es una forma de codificación de la vieja escuela y en la versión 2 de JSP existe un método para evitar el código Java en los archivos JSP.¿Alguien puede decirme las líneas alternativas de JSP 2,y cómo se llama esta técnica?</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
