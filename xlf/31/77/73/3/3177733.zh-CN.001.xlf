<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/3177733">
    <body>
      <group id="3177733">
        <trans-unit id="7c55e13b3a5960f2e06f74f020b8ae99bd6171bc" translate="yes" xml:space="preserve">
          <source>(Even if you end up using the java in your JSP code, which I hope not, you can encapsulate that code in a tag)</source>
          <target state="translated">(即使你最终在JSP代码中使用了java,我希望不会,你可以将代码封装在一个标签中)</target>
        </trans-unit>
        <trans-unit id="abecfaae04b845d07cad8db2dacb71965f0897c5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://jstl.java.net/&quot;&gt;JSTL&lt;/a&gt; offers tags for conditionals, loops, sets, gets, etc. For example:</source>
          <target state="translated">&lt;a href=&quot;https://jstl.java.net/&quot;&gt;JSTL&lt;/a&gt;为条件，循环，集合，获取等提供标签。例如：</target>
        </trans-unit>
        <trans-unit id="ff137f765374ad5666aafc75629eb2025b1372d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;t:base&amp;gt;&lt;/code&gt; is used to specify the master page you want to use (which is base.tag at this moment). All the content inside the tag &lt;code&gt;&amp;lt;jsp:body&amp;gt;&lt;/code&gt; here will replace the &lt;code&gt;&amp;lt;jsp:doBody/&amp;gt;&lt;/code&gt; on your master page. Your child page can also include any tag lib and you can use it normally like the other mentioned. However, if you use any scriptlet code here (&lt;code&gt;&amp;lt;%= request.getParameter(&quot;name&quot;) %&amp;gt;&lt;/code&gt; ...) and try to run this page, you will get a &lt;code&gt;JasperException because  Scripting elements ( &amp;amp;lt;%!, &amp;amp;lt;jsp:declaration, &amp;amp;lt;%=, &amp;amp;lt;jsp:expression, &amp;amp;lt;%, &amp;amp;lt;jsp:scriptlet ) are disallowed here&lt;/code&gt;. Therefore, there is no way other people can include the evil code into the jsp file</source>
          <target state="translated">&lt;code&gt;&amp;lt;t:base&amp;gt;&lt;/code&gt; 用于指定要使用的母版页（此刻为base.tag）。 标签 &lt;code&gt;&amp;lt;jsp:body&amp;gt;&lt;/code&gt; 内的所有内容将替换母版页上的 &lt;code&gt;&amp;lt;jsp:doBody/&amp;gt;&lt;/code&gt; 。 您的子页面也可以包含任何标签库，您可以像上面提到的其他标签库一样正常使用它。 但是，如果您在此处使用任何scriptlet代码（ &lt;code&gt;&amp;lt;%= request.getParameter(&quot;name&quot;) %&amp;gt;&lt;/code&gt; ...）并尝试运行此页面，则会出现 &lt;code&gt;JasperException because Scripting elements ( &amp;amp;lt;%!, &amp;amp;lt;jsp:declaration, &amp;amp;lt;%=, &amp;amp;lt;jsp:expression, &amp;amp;lt;%, &amp;amp;lt;jsp:scriptlet ) are disallowed here&lt;/code&gt; 。 因此，其他人无法将邪恶代码包含在jsp文件中</target>
        </trans-unit>
        <trans-unit id="242c95b3bd4d1500098c2c644b1eabdcae7d762c" translate="yes" xml:space="preserve">
          <source>&lt;strike&gt;Sun&lt;/strike&gt; Oracle itself also recommends in the &lt;a href=&quot;http://www.oracle.com/technetwork/articles/javase/code-convention-138726.html&quot;&gt;JSP coding conventions&lt;/a&gt; to avoid use of &lt;em&gt;scriptlets&lt;/em&gt; whenever the same functionality is possible by (tag) classes. Here are several cites of relevance:</source>
          <target state="translated">&lt;strike&gt;Sun&lt;/strike&gt; Oracle本身也建议在&lt;a href=&quot;http://www.oracle.com/technetwork/articles/javase/code-convention-138726.html&quot;&gt;JSP编码约定&lt;/a&gt;中避免使用（标记）类可能具有相同功能的&lt;em&gt;scriptlet&lt;/em&gt; 。 以下是一些相关的引用：</target>
        </trans-unit>
        <trans-unit id="47f6077a2de453659dd80148f677647a78ff3cd4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;How to avoid Java code in JSP files?&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;如何避免JSP文件中的Java代码？&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6d2ca64168746e18166ffea7b50fc32ade312a97" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;As a Safeguard: Disable Scriptlets For Good&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;保障措施：永久禁用脚本&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="53ccd4bb22efbe7051e3c1b669e4135918583cc1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Calling this page from your controller:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;从您的控制器调用此页面：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="52ce212588f872e8f16ad1c8207593f87ae8c869" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Create a master page called base.tag under your WEB-INF/tags with the following content&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;在WEB-INF / tags下创建一个名为base.tag的母版页，其内容如下&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="133419c9245e3989fa760d65ab99f57c23aa9d14" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Create child page (child.jsp) in your WebContent folder:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;在您的WebContent文件夹中创建子页面（child.jsp）：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4579c5bafd0c96bf4fe66f646911268bde67d154" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Debuggability:&lt;/strong&gt; if scriptlet throws an exception halfway, all you get is a blank page.</source>
          <target state="translated">&lt;strong&gt;可调试性：&lt;/strong&gt;如果scriptlet在中途抛出异常，您得到的只是空白页。</target>
        </trans-unit>
        <trans-unit id="3a6e7652b38b97d5a8c32f449fb30606c438c17f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Facelets&lt;/strong&gt; is the first non JSP page declaration language designed for &lt;strong&gt;JSF (Java Server Faces)&lt;/strong&gt; which provided a simpler and more powerful programming model to JSF developers as compare to JSP. It resolves different issues occurs in JSP for web applications development.</source>
          <target state="translated">&lt;strong&gt;Facelets&lt;/strong&gt;是为&lt;strong&gt;JSF（Java Server Faces）&lt;/strong&gt;设计的第一种非JSP页面声明语言，与JSP相比，它为JSF开发人员提供了更简单，更强大的编程模型。 它解决了JSP中用于Web应用程序开发的各种问题。</target>
        </trans-unit>
        <trans-unit id="1e5ef583aedb2fa877df3b22256a022618dc6f86" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;How to replace &lt;em&gt;scriptlets&lt;/em&gt; entirely depends on the sole purpose of the code/logic. More than often this code is to be placed in a fullworthy Java class:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;如何完全替换&lt;em&gt;scriptlet&lt;/em&gt;取决于代码/逻辑的唯一目的。&lt;/strong&gt; &lt;strong&gt;这段代码比以往更多地被放置在完全值得的Java类中：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5d05d31648416deb82a36f230d878a6d38196b83" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;If somebody is really against programming in more languages than one&lt;/strong&gt;, I suggest GWT, theoretically you can avoid all the JS and HTML elements, because Google Toolkit transforms all the client and shared code to JS, you won't have problem with them, so you have a webservice without coding in any other languages. Even you can use some default CSS from somewhere as it is given by extensions (smartGWT or Vaadin). You don't need to learn dozens of annotations.</source>
          <target state="translated">&lt;strong&gt;如果有人真的反对使用一种以上的语言进行编程&lt;/strong&gt; ，我建议您使用GWT，从理论上讲，您可以避免使用所有JS和HTML元素，因为Google工具包将所有客户端代码和共享代码转换为JS，因此您不会遇到任何问题，因此您有一个没有使用任何其他语言编码的Web服务。 甚至您也可以从扩展名（smartGWT或Vaadin）指定的位置使用某些默认CSS。 您无需学习许多注释。</target>
        </trans-unit>
        <trans-unit id="3d3ad886a6c5ab3968b4242b8a06f60d6e3bd987" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Learn to customize and write your own tags using JSTL&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;学习使用JSTL自定义和编写自己的标签&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6356f55f28c4b437234bb509c95bcd79233fc2fd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Maintainability:&lt;/strong&gt; per saldo more time is needed to maintain mingled/cluttered/duplicated code logic.</source>
          <target state="translated">&lt;strong&gt;可维护性：&lt;/strong&gt;每一次维护，需要花费更多时间来维护混杂/混乱/重复的代码逻辑。</target>
        </trans-unit>
        <trans-unit id="12d108e7baf9032b2bc0679febce2431845aacf3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;OO-ability:&lt;/strong&gt; you can't make use of inheritance/composition.</source>
          <target state="translated">&lt;strong&gt;面向对象的能力：&lt;/strong&gt;您不能利用继承/组合。</target>
        </trans-unit>
        <trans-unit id="a23f822b1d4a14c1f8d45091a579788beb963af1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Replaceability:&lt;/strong&gt; you can't make scriptlets abstract.</source>
          <target state="translated">&lt;strong&gt;可替换性：&lt;/strong&gt;您不能使scriptlet抽象。</target>
        </trans-unit>
        <trans-unit id="dd6c632d066ccf0fc385be85c35d9172a5b13eb2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reusability:&lt;/strong&gt; you can't reuse scriptlets.</source>
          <target state="translated">&lt;strong&gt;可重用性：&lt;/strong&gt;您无法重用scriptlet。</target>
        </trans-unit>
        <trans-unit id="dab8261ed76aa890287247357fd6bbed2684e5b4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Tag File&lt;/strong&gt;  are so easy developed as you did not need to restart the server when changing them, like JSP files. This makes them easy for development.</source>
          <target state="translated">&lt;strong&gt;标记文件&lt;/strong&gt;非常容易开发，因为更改它们时无需像JSP文件那样重新启动服务器。 这使它们易于开发。</target>
        </trans-unit>
        <trans-unit id="3814b9b9f2dbea323401f0b749d1cea78b81d65c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Technically, JSP are all converted to Servlets during runtime&lt;/strong&gt;. JSP was initially created for the purpose of the decoupling the business logic and the design logic, following the MVC pattern. So JSP are technically all java codes during runtime. But to answer the question, Tag Libraries are usually used for applying logic (removing Java codes) to JSP pages.</source>
          <target state="translated">&lt;strong&gt;从技术上讲，JSP会在运行时全部转换为Servlet&lt;/strong&gt; 。 最初创建JSP是为了遵循MVC模式将业务逻辑和设计逻辑分离。 因此，从技术上讲，JSP在运行时是所有Java代码。 但是要回答这个问题，标签库通常用于将逻辑（删除Java代码）应用于JSP页面。</target>
        </trans-unit>
        <trans-unit id="dca32e18a3b2d52aac3677e7d928e29f14de3e4c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Testability:&lt;/strong&gt; scriptlets are not unit-testable.</source>
          <target state="translated">&lt;strong&gt;可测试性：&lt;/strong&gt;脚本无法进行单元测试。</target>
        </trans-unit>
        <trans-unit id="9137dff06cb373f59845928934fa1e992525c9e8" translate="yes" xml:space="preserve">
          <source>A neat idea from the Python world are &lt;em&gt;Template attribute languages&lt;/em&gt;; TAL was introduced by Zope (therefore a.k.a. &quot;Zope Page Templates&quot;, ZPT) and is a standard, with implementations in PHP, XSLT and Java as well (I have used the Python/Zope and PHP incarnations). In this class of templating languages, one above example could look like this:</source>
          <target state="translated">Python世界的一个巧妙想法是&lt;em&gt;模板属性语言&lt;/em&gt; ; TAL是由Zope引入的（因此也称为&amp;ldquo; Zope页面模板&amp;rdquo;，ZPT），并且是一个标准，同时在PHP，XSLT和Java中也有实现（我已经使用了Python / Zope和PHP的形式）。 在此类模板语言中，上面的一个示例可能如下所示：</target>
        </trans-unit>
        <trans-unit id="cfc5709ae32ab041336687f1e6512f200a0844a5" translate="yes" xml:space="preserve">
          <source>Also, take note that it is not a best practice to do business logic in the view layer, you should perform your business logics in the Service layer, 
and pass the output result to your views through a Controller.</source>
          <target state="translated">另外要注意的是,在视图层做业务逻辑并不是最好的做法,你应该在服务层执行你的业务逻辑,并通过Controller将输出结果传递给你的视图。</target>
        </trans-unit>
        <trans-unit id="f68d36db9b907801a9eb6798b78a997685810586" translate="yes" xml:space="preserve">
          <source>Also, you can read the tag body easily</source>
          <target state="translated">同时,您可以轻松读取标签正文</target>
        </trans-unit>
        <trans-unit id="3287880bd50b1fa49f174a085295b57ed1de703b" translate="yes" xml:space="preserve">
          <source>And certainly stay away of filters and pre and post processing, otherwise you may deal with support/debugging difficulties since you always do not know where the variable gets the value.</source>
          <target state="translated">当然也要远离过滤器和前后处理,否则你可能会遇到支持调试的困难,因为你总是不知道变量从哪里得到的值。</target>
        </trans-unit>
        <trans-unit id="460633aa80eeb1c8f4d8d4d2a283b2cd7c2ea331" translate="yes" xml:space="preserve">
          <source>And of course many fellow programmers hereby described or recommended several other solutions. GWT is for people who really don't want to deal with the web part or to minimalize it.</source>
          <target state="translated">当然也有很多程序员同行在此介绍或推荐了其他几个解决方案。GWT是给那些真的不想处理网页部分的人,或者说是想把它最小化的人用的。</target>
        </trans-unit>
        <trans-unit id="293d82cb47fc75524d2ec23540d9f51807688ce8" translate="yes" xml:space="preserve">
          <source>As &lt;a href=&quot;https://stackoverflow.com/questions/2188706/how-to-avoid-using-scriptlets-in-my-jsp-page&quot;&gt;another question&lt;/a&gt; is discussing, you can and always should disable scriptlets in your &lt;code&gt;web.xml&lt;/code&gt; web application descriptor.</source>
          <target state="translated">在讨论&lt;a href=&quot;https://stackoverflow.com/questions/2188706/how-to-avoid-using-scriptlets-in-my-jsp-page&quot;&gt;另一个问题时&lt;/a&gt; ，您可以并且始终应该在 &lt;code&gt;web.xml&lt;/code&gt; Web应用程序描述符中禁用scriptlet。</target>
        </trans-unit>
        <trans-unit id="17bc0d434c97d066ec7b78aa4ac9d4cbc140117e" translate="yes" xml:space="preserve">
          <source>As many answers says, use JSTL or create your own custom tags. &lt;a href=&quot;http://www.journaldev.com/2099/jsp-custom-tags-example-tutorial&quot;&gt;Here&lt;/a&gt; is good explanation about creating custom tags</source>
          <target state="translated">正如许多答案所述，请使用JSTL或创建自己的自定义标签。 &lt;a href=&quot;http://www.journaldev.com/2099/jsp-custom-tags-example-tutorial&quot;&gt;这&lt;/a&gt;是有关创建自定义标签的很好的解释</target>
        </trans-unit>
        <trans-unit id="dabf707c8c01e32501275ce0d2adb33afa1729af" translate="yes" xml:space="preserve">
          <source>Basic MVC example with JSP, Servlet and JDBC</source>
          <target state="translated">带有JSP、Servlet和JDBC的基本MVC示例</target>
        </trans-unit>
        <trans-unit id="d202594c5797a73fde182a112e408d80d5a47ff2" translate="yes" xml:space="preserve">
          <source>Believe me, this will change the way you design</source>
          <target state="translated">相信我,这将改变你的设计方式</target>
        </trans-unit>
        <trans-unit id="d841cf905ba57a2e5b758d8b5de5a5d1feb0d038" translate="yes" xml:space="preserve">
          <source>By using JSTL tags together with EL expression you can avoid this. Put the following things in your jsp page:</source>
          <target state="translated">通过使用JSTL标签和EL表达式,你可以避免这种情况。在你的jsp页面中放入以下内容。</target>
        </trans-unit>
        <trans-unit id="e2b0a0be2c4be101f37fd815c88cbaf5f6d93468" translate="yes" xml:space="preserve">
          <source>Custom Tags- you can define your own tags to use.</source>
          <target state="translated">自定义标签-你可以定义自己的标签来使用。</target>
        </trans-unit>
        <trans-unit id="2700221f2d233bc435b4aecae915d8f6c4b5eb5e" translate="yes" xml:space="preserve">
          <source>Design patterns in Java web applications</source>
          <target state="translated">Java Web应用程序中的设计模式</target>
        </trans-unit>
        <trans-unit id="4c492217496c5720801e5ab32fb88c56ac52c16a" translate="yes" xml:space="preserve">
          <source>EL</source>
          <target state="translated">EL</target>
        </trans-unit>
        <trans-unit id="9028f357a088f9e3949a25480f3a1fcc603f5d51" translate="yes" xml:space="preserve">
          <source>EL expressions</source>
          <target state="translated">EL表达式</target>
        </trans-unit>
        <trans-unit id="ff837528477860274cafad4c44c9ba8002de71b3" translate="yes" xml:space="preserve">
          <source>Even if you use a framework like Struts 2, which have lots of good tags, you may find that having your own tags can reduce your code a lot. You can pass your tag parameters to struts and this way customize your framework tag.</source>
          <target state="translated">即使你使用Struts 2这样的框架,有很多好的标签,你可能会发现,拥有自己的标签会让你的代码减少很多。你可以把你的标签参数传递给struts,这样就可以自定义你的框架标签。</target>
        </trans-unit>
        <trans-unit id="e5f2929765178283974ec5b0f56d6dbb2d488cb2" translate="yes" xml:space="preserve">
          <source>Example from &lt;em&gt;java2s&lt;/em&gt;,</source>
          <target state="translated">来自&lt;em&gt;java2s的&lt;/em&gt;示例，</target>
        </trans-unit>
        <trans-unit id="ab4ad92cb1a1e4761a3bf91a6bffc62b4148df71" translate="yes" xml:space="preserve">
          <source>Experience has shown that JSP's have some shortcomings, one of them being hard to avoid mixing markup with actual code.</source>
          <target state="translated">经验表明,JSP有一些缺点,其中之一就是难以避免将标记与实际代码混合在一起。</target>
        </trans-unit>
        <trans-unit id="1c7a52dfd00e05d100e7009189a810dae152a373" translate="yes" xml:space="preserve">
          <source>Expression Language</source>
          <target state="translated">表达式语言</target>
        </trans-unit>
        <trans-unit id="335819d77fcc9ef286b4eee5c8cbe73bf3f8577e" translate="yes" xml:space="preserve">
          <source>Fetch those values and parameters within your JSP using JSTL/Taglib</source>
          <target state="translated">使用JSTLTaglib在JSP中获取这些值和参数。</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例如:</target>
        </trans-unit>
        <trans-unit id="4145625051f942611b763d861ab36407bba4c90f" translate="yes" xml:space="preserve">
          <source>From JSP 1.2 Specification, it is highly recommended that the JSP Standard Tag Library  (JSTL) be used in your web application to help &lt;strong&gt;reduce the need for JSP scriptlets&lt;/strong&gt; in your pages. Pages that use JSTL are, in general, easier to read and maintain.</source>
          <target state="translated">从JSP 1.2规范开始，强烈建议您在Web应用程序中使用JSP标准标记库（JSTL），以帮助&lt;strong&gt;减少&lt;/strong&gt;页面中&lt;strong&gt;对JSP scriptlet的需求&lt;/strong&gt; 。 通常，使用JSTL的页面更易于阅读和维护。</target>
        </trans-unit>
        <trans-unit id="55fc2f63b02dc3aa67ac5d8c473a54ee6c3335d5" translate="yes" xml:space="preserve">
          <source>Hidden features of JSP/Servlet</source>
          <target state="translated">JSPServlet的隐藏特性</target>
        </trans-unit>
        <trans-unit id="abbb3de6a2693017a80aac6e69fc528bd68e92f8" translate="yes" xml:space="preserve">
          <source>How does Servlet, ServletContext, HttpSession and HttpServletRequest/Response work?</source>
          <target state="translated">Servlet、ServletContext、HttpSession和HttpServletRequestResponse是如何工作的?</target>
        </trans-unit>
        <trans-unit id="fc6304fc1da24f7332456c2ed85a43e9be667bb1" translate="yes" xml:space="preserve">
          <source>How to avoid Java code in JSP files</source>
          <target state="translated">如何避免JSP文件中的Java代码</target>
        </trans-unit>
        <trans-unit id="541f1c70d2cfacfa1fae673b114a9c7b5e3c9ca3" translate="yes" xml:space="preserve">
          <source>I don't know very much about the &lt;a href=&quot;http://sourceforge.net/projects/javazpt/&quot;&gt;Java implementation&lt;/a&gt;, though.</source>
          <target state="translated">不过，我对&lt;a href=&quot;http://sourceforge.net/projects/javazpt/&quot;&gt;Java实现&lt;/a&gt;并不了解很多。</target>
        </trans-unit>
        <trans-unit id="209fa42a6db8dfeb3eb4eb056dd10ed5ad682f31" translate="yes" xml:space="preserve">
          <source>I have more than 20 years in programming, most of the projects fail before the sextet: Reusability Replaceability OO-ability Debuggability Testability Maintainability is even needed. Other projects, run by people who only cared about functionality, were extremely successful.  Also, stiff object structure, implemented too early in the project, makes the code unable to be adapted to the drastic changes in the specifications (aka agile).</source>
          <target state="translated">笔者从事编程20多年,大部分项目都是先于六合宝典失败。可重用性 可替代性 可替换性 OO-可调试性 可测试性 可维护性 甚至是需要的。其他的项目,由那些只关心功能的人运行的项目,都是极其成功的。另外,僵硬的对象结构,在项目的早期实现,使得代码无法适应规范的剧烈变化(又名敏捷)。</target>
        </trans-unit>
        <trans-unit id="1910500d8ffa90d4b15a55788777f83ecb6b6468" translate="yes" xml:space="preserve">
          <source>I would always do that in order to prevent any developer adding scriptlets, especially in bigger companies where you will lose overview sooner or later. The &lt;code&gt;web.xml&lt;/code&gt; settings look like this:</source>
          <target state="translated">我将始终这样做，以防止任何开发人员添加scriptlet，尤其是在大型公司中，您迟早会失去概述。 &lt;code&gt;web.xml&lt;/code&gt; 设置如下所示：</target>
        </trans-unit>
        <trans-unit id="c8ea5c5d6cf46dab0bf146f77bb73a4cf420ef49" translate="yes" xml:space="preserve">
          <source>I'm new to Java EE and I know that something like the following three lines</source>
          <target state="translated">我是Java EE的新手,我知道类似以下三行的东西。</target>
        </trans-unit>
        <trans-unit id="7897d079e730103d5c275ad30437b72216d2b88f" translate="yes" xml:space="preserve">
          <source>I'm not sure if i get this correct.</source>
          <target state="translated">我不知道我的理解是否正确。</target>
        </trans-unit>
        <trans-unit id="fd9279c3f407a91c673b3d198d2d7165013ce083" translate="yes" xml:space="preserve">
          <source>If translations of the content are available, they are used.</source>
          <target state="translated">如果有内容的译文,就会使用这些译文。</target>
        </trans-unit>
        <trans-unit id="85c83d910c283a8bdf255689a433590534187269" translate="yes" xml:space="preserve">
          <source>If we use the following things in a java web application, java code can be eliminated from foreground of the JSP.</source>
          <target state="translated">如果我们在一个java web应用中使用以下的东西,就可以把java代码从JSP的前台去掉。</target>
        </trans-unit>
        <trans-unit id="bbec7d7b3dc4d02602a57d628c2e974a87621c53" translate="yes" xml:space="preserve">
          <source>If you can, then consider using a specialized technology for what you need to do.  In Java EE 6 there is JSF 2.0, which provides a lot of nice features including gluing Java beans together with JSF pages through the &lt;code&gt;#{bean.method(argument)}&lt;/code&gt; approach.</source>
          <target state="translated">如果可以的话，请考虑使用专业技术来完成您的工作。 Java EE 6中有JSF 2.0，它提供了许多不错的功能，包括通过 &lt;code&gt;#{bean.method(argument)}&lt;/code&gt; 方法将Java Bean与JSF页面粘合在一起。</target>
        </trans-unit>
        <trans-unit id="1928eb1d50f68f5d11732dc80e018320691e2fae" translate="yes" xml:space="preserve">
          <source>If you want to invoke some &lt;strong&gt;utility&lt;/strong&gt; Java code directly in the JSP page (typically &lt;code&gt;public static&lt;/code&gt; methods), then you need to define them as EL functions. There's a standard &lt;a href=&quot;http://docs.oracle.com/javaee/5/jstl/1.1/docs/tlddocs/fn/tld-summary.html&quot;&gt;functions taglib&lt;/a&gt; in JSTL, but &lt;a href=&quot;http://docs.oracle.com/javaee/5/tutorial/doc/bnahq.html#bnaiq&quot;&gt;you can also easily create functions yourself&lt;/a&gt;. Here's an example how JSTL &lt;code&gt;fn:escapeXml&lt;/code&gt; is useful to prevent &lt;a href=&quot;http://en.wikipedia.org/wiki/Cross-site_scripting&quot;&gt;XSS&lt;/a&gt;&lt;a href=&quot;http://ha.ckers.org/xss.html&quot;&gt;attacks&lt;/a&gt;.</source>
          <target state="translated">如果要直接在JSP页面中调用一些&lt;strong&gt;实用&lt;/strong&gt; Java代码（通常是 &lt;code&gt;public static&lt;/code&gt; 方法），则需要将它们定义为EL函数。 JSTL中有一个标准&lt;a href=&quot;http://docs.oracle.com/javaee/5/jstl/1.1/docs/tlddocs/fn/tld-summary.html&quot;&gt;函数taglib&lt;/a&gt; ，但是&lt;a href=&quot;http://docs.oracle.com/javaee/5/tutorial/doc/bnahq.html#bnaiq&quot;&gt;您也可以轻松地自己创建函数&lt;/a&gt; 。 这是一个示例JSTL &lt;code&gt;fn:escapeXml&lt;/code&gt; 如何用于防止&lt;a href=&quot;http://en.wikipedia.org/wiki/Cross-site_scripting&quot;&gt;XSS&lt;/a&gt; &lt;a href=&quot;http://ha.ckers.org/xss.html&quot;&gt;攻击&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="38577992a40047e6c37c2fb7c2cab6712a83ae8d" translate="yes" xml:space="preserve">
          <source>If you want to invoke some Java code to &lt;strong&gt;access and display&lt;/strong&gt; &quot;backend&quot; data inside a JSP page, then you need to use EL (Expression Language), those &lt;code&gt;${}&lt;/code&gt; things. E.g. redisplaying submitted input values:</source>
          <target state="translated">如果要调用一些Java代码来&lt;strong&gt;访问和显示&lt;/strong&gt; JSP页面内的&amp;ldquo;后端&amp;rdquo;数据，则需要使用EL（表达式语言），即 &lt;code&gt;${}&lt;/code&gt; 。 例如，重新显示提交的输入值：</target>
        </trans-unit>
        <trans-unit id="6e4f8370b3272119e2841c20a679e8e38d1b031c" translate="yes" xml:space="preserve">
          <source>If you want to invoke some Java code to &lt;strong&gt;control the flow&lt;/strong&gt; inside a JSP page, then you need to grab an (existing) flow control taglib like &lt;a href=&quot;http://docs.oracle.com/javaee/5/jstl/1.1/docs/tlddocs/c/tld-summary.html&quot;&gt;JSTL core&lt;/a&gt;. E.g. displaying &lt;code&gt;List&amp;lt;Product&amp;gt;&lt;/code&gt; in a table:</source>
          <target state="translated">如果要调用一些Java代码来&lt;strong&gt;控制&lt;/strong&gt; JSP页面内&lt;strong&gt;的流&lt;/strong&gt; ，则需要获取一个（现有的）流控制标记库，例如&lt;a href=&quot;http://docs.oracle.com/javaee/5/jstl/1.1/docs/tlddocs/c/tld-summary.html&quot;&gt;JSTL core&lt;/a&gt; 。 例如在表格中显示 &lt;code&gt;List&amp;lt;Product&amp;gt;&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="8062301bb015d8a2e33cde53a0ed7e77846a2169" translate="yes" xml:space="preserve">
          <source>If you want to invoke some Java code to &lt;strong&gt;control&lt;/strong&gt; the execution plan and/or the destination of the request and the response, then implement a &lt;a href=&quot;https://stackoverflow.com/tags/servlets/info&quot;&gt;servlet&lt;/a&gt; according to the &lt;a href=&quot;https://stackoverflow.com/questions/3541077/design-patterns-web-based-applications/3542297#3542297&quot;&gt;MVC's Front Controller Pattern&lt;/a&gt;. E.g.:</source>
          <target state="translated">如果要调用一些Java代码来&lt;strong&gt;控制&lt;/strong&gt;执行计划和/或请求和响应的目的地，则根据&lt;a href=&quot;https://stackoverflow.com/questions/3541077/design-patterns-web-based-applications/3542297#3542297&quot;&gt;MVC的Front Controller Pattern&lt;/a&gt;实现&lt;a href=&quot;https://stackoverflow.com/tags/servlets/info&quot;&gt;servlet&lt;/a&gt; 。 例如：</target>
        </trans-unit>
        <trans-unit id="08ca864cd2ae393a77889ac801c82ca2a1e4cefd" translate="yes" xml:space="preserve">
          <source>If you want to invoke some Java code to &lt;strong&gt;postprocess&lt;/strong&gt; a request, e.g. processing a form submit, then implement a &lt;a href=&quot;https://stackoverflow.com/tags/servlets/info&quot;&gt;servlet&lt;/a&gt; and write code accordingly in &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html#doPost%28javax.servlet.http.HttpServletRequest,%20javax.servlet.http.HttpServletResponse%29&quot;&gt;&lt;code&gt;doPost()&lt;/code&gt;&lt;/a&gt; method. E.g.:</source>
          <target state="translated">如果要调用一些Java代码来对请求进行&lt;strong&gt;后处理&lt;/strong&gt; （例如，处理表单提交），请实现&lt;a href=&quot;https://stackoverflow.com/tags/servlets/info&quot;&gt;servlet&lt;/a&gt;并在&lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html#doPost%28javax.servlet.http.HttpServletRequest,%20javax.servlet.http.HttpServletResponse%29&quot;&gt; &lt;code&gt;doPost()&lt;/code&gt; &lt;/a&gt;方法中相应地编写代码。 例如：</target>
        </trans-unit>
        <trans-unit id="85a5ccb98f8d25732291548a6b4d3d4950886db9" translate="yes" xml:space="preserve">
          <source>If you want to invoke some Java code to &lt;strong&gt;preprocess&lt;/strong&gt; a request, e.g. preloading some list from a database to display in some table, if necessary based on some query parameters, then implement a &lt;a href=&quot;https://stackoverflow.com/tags/servlets/info&quot;&gt;servlet&lt;/a&gt; and write code accordingly in &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html#doGet%28javax.servlet.http.HttpServletRequest,%20javax.servlet.http.HttpServletResponse%29&quot;&gt;&lt;code&gt;doGet()&lt;/code&gt;&lt;/a&gt; method. E.g.:</source>
          <target state="translated">如果要调用一些Java代码来&lt;strong&gt;预处理&lt;/strong&gt;请求，例如，如果需要，则基于某些查询参数，从数据库中预加载一些列表以显示在某个表中，则可以实现&lt;a href=&quot;https://stackoverflow.com/tags/servlets/info&quot;&gt;servlet，&lt;/a&gt;并在&lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html#doGet%28javax.servlet.http.HttpServletRequest,%20javax.servlet.http.HttpServletResponse%29&quot;&gt; &lt;code&gt;doGet()&lt;/code&gt; &lt;/a&gt;方法中相应地编写代码。 例如：</target>
        </trans-unit>
        <trans-unit id="7d5c2d5e3acf61c6e46e0c5bb9dbe3b694f7d5cc" translate="yes" xml:space="preserve">
          <source>If you want to invoke the &lt;strong&gt;same&lt;/strong&gt; Java code on &lt;em&gt;every&lt;/em&gt; request, less-or-more regardless of the requested page, e.g. checking if a user is logged in, then implement a &lt;a href=&quot;https://stackoverflow.com/tags/servlet-filters/info&quot;&gt;filter&lt;/a&gt; and write code accordingly in &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/servlet/Filter.html#doFilter%28javax.servlet.ServletRequest,%20javax.servlet.ServletResponse,%20javax.servlet.FilterChain%29&quot;&gt;&lt;code&gt;doFilter()&lt;/code&gt;&lt;/a&gt; method. E.g.:</source>
          <target state="translated">如果要在&lt;em&gt;每个&lt;/em&gt;请求上调用&lt;strong&gt;相同的&lt;/strong&gt; Java代码，无论请求的页面如何（或多或少）（例如，检查用户是否已登录），都应或多或少地调用&lt;strong&gt;相同的&lt;/strong&gt; Java代码，然后实现&lt;a href=&quot;https://stackoverflow.com/tags/servlet-filters/info&quot;&gt;过滤器&lt;/a&gt;并在&lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/servlet/Filter.html#doFilter%28javax.servlet.ServletRequest,%20javax.servlet.ServletResponse,%20javax.servlet.FilterChain%29&quot;&gt; &lt;code&gt;doFilter()&lt;/code&gt; &lt;/a&gt;方法中相应地编写代码。 例如：</target>
        </trans-unit>
        <trans-unit id="ee11dba0fd5ce2964e4951a57cf7350d6fac840f" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;https://stackoverflow.com/tags/facelets/info&quot;&gt;Facelets&lt;/a&gt;, the successor of JSP, which is part of the Java EE provided MVC framework &lt;a href=&quot;https://stackoverflow.com/tags/jsf/info&quot;&gt;JSF&lt;/a&gt;, it is already &lt;strong&gt;not&lt;/strong&gt; possible to use &lt;em&gt;scriptlets&lt;/em&gt;. This way you're automatically forced to do things &quot;the right way&quot;.</source>
          <target state="translated">在&lt;a href=&quot;https://stackoverflow.com/tags/facelets/info&quot;&gt;Facelets&lt;/a&gt; （JSP的后继者）（它是Java EE提供的MVC框架&lt;a href=&quot;https://stackoverflow.com/tags/jsf/info&quot;&gt;JSF的一部分）中&lt;/a&gt; ，已经不可能使用&lt;em&gt;scriptlet&lt;/em&gt; 。 这样，您将自动被迫以&amp;ldquo;正确的方式&amp;rdquo;做事。</target>
        </trans-unit>
        <trans-unit id="864be0601ecfce0a46e54862f1e8a20535f2a995" translate="yes" xml:space="preserve">
          <source>In my case I do my systems handling the view with Angular and any data needed is brought from the server using rest services.</source>
          <target state="translated">在我的案例中,我用Angular来做我的系统处理视图,任何需要的数据都是使用休息服务从服务器上带来的。</target>
        </trans-unit>
        <trans-unit id="c8be22759def612993661b4f9fd9ea685f8f326b" translate="yes" xml:space="preserve">
          <source>In the MVC Architectural pattern, JSPs represent the View layer. Embedding java code in JSPs is considered a bad practice.
You can use &lt;a href=&quot;http://www.oracle.com/technetwork/java/index-jsp-135995.html&quot;&gt;JSTL&lt;/a&gt;, &lt;a href=&quot;http://freemarker.sourceforge.net/&quot;&gt;freeMarker&lt;/a&gt;, &lt;a href=&quot;http://velocity.apache.org/&quot;&gt;velocity&lt;/a&gt; with JSP as &quot;template engine&quot;.
The data provider to those tags &lt;strong&gt;depends on frameworks&lt;/strong&gt; that you are dealing with. &lt;code&gt;Struts 2&lt;/code&gt; and &lt;code&gt;webwork&lt;/code&gt; as an implementation for MVC Pattern uses &lt;a href=&quot;http://struts.apache.org/2.0.11.1/docs/ognl.html&quot;&gt;OGNL&lt;/a&gt; &quot;very interesting technique to expose Beans Properties to JSP &quot;.</source>
          <target state="translated">在MVC体系结构模式中，JSP代表视图层。 在JSP中嵌入Java代码被认为是不好的做法。 您可以将&lt;a href=&quot;http://www.oracle.com/technetwork/java/index-jsp-135995.html&quot;&gt;JSTL&lt;/a&gt; ， &lt;a href=&quot;http://freemarker.sourceforge.net/&quot;&gt;freeMarker&lt;/a&gt; ， speed与JSP一起用作&amp;ldquo;模板引擎&amp;rdquo;。 这些标签的数据提供者&lt;strong&gt;取决于&lt;/strong&gt;您正在处理的&lt;strong&gt;框架&lt;/strong&gt; 。 作为MVC模式的实现， &lt;code&gt;Struts 2&lt;/code&gt; 和 &lt;code&gt;webwork&lt;/code&gt; 使用&lt;a href=&quot;http://struts.apache.org/2.0.11.1/docs/ognl.html&quot;&gt;OGNL&lt;/a&gt; &amp;ldquo;将Beans属性公开给JSP的非常有趣的技术&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="3379f7440ecf03bd6f4294973b1344867b834b45" translate="yes" xml:space="preserve">
          <source>In the spirit of adopting the model-view-controller (MVC) design pattern to reduce coupling between the presentation tier from the business logic, &lt;strong&gt;JSP scriptlets should not be used&lt;/strong&gt; for writing business logic. Rather, JSP scriptlets are used if necessary to transform data (also called &quot;value objects&quot;) returned from processing the client's requests into a proper client-ready format. Even then, this would be better done with a front controller servlet or a custom tag.</source>
          <target state="translated">本着采用模型视图控制器（MVC）设计模式来减少表示层与业务逻辑之间的耦合的精神， &lt;strong&gt;不应使用JSP脚本&lt;/strong&gt;编写业务逻辑。 而是，如果有必要，可以使用JSP scriptlet将处理客户端请求所返回的数据（也称为&amp;ldquo;值对象&amp;rdquo;）转换为适当的客户端就绪格式。 即使这样，最好还是使用前端控制器servlet或自定义标签来完成。</target>
        </trans-unit>
        <trans-unit id="5844156b0df20492d28065d5072469ba59148486" translate="yes" xml:space="preserve">
          <source>Instead, you can use:</source>
          <target state="translated">相反,你可以用。</target>
        </trans-unit>
        <trans-unit id="9c48d9289fc64581e90dcccfc40ce37a3369ae26" translate="yes" xml:space="preserve">
          <source>JSP 2.0 has a feature called &lt;strong&gt;&quot;Tag Files&quot;&lt;/strong&gt;, you can write tags without external &lt;code&gt;java&lt;/code&gt; code and &lt;code&gt;tld&lt;/code&gt;. You need to create a &lt;code&gt;.tag&lt;/code&gt; file and put it in &lt;code&gt;WEB-INF\tags&lt;/code&gt; you can even create a directory structure to package your tags.</source>
          <target state="translated">JSP 2.0具有一个称为&lt;strong&gt;&amp;ldquo;标记文件&amp;rdquo;的功能&lt;/strong&gt; ，您可以编写标记而无需外部 &lt;code&gt;java&lt;/code&gt; 代码和 &lt;code&gt;tld&lt;/code&gt; 。 您需要创建一个 &lt;code&gt;.tag&lt;/code&gt; 文件并将其放入 &lt;code&gt;WEB-INF\tags&lt;/code&gt; 中，甚至可以创建目录结构来打包您的标签。</target>
        </trans-unit>
        <trans-unit id="9b22fe878901f07cf06aca41d7e95d932c6cc98d" translate="yes" xml:space="preserve">
          <source>JSTL tags</source>
          <target state="translated">JSTL标签</target>
        </trans-unit>
        <trans-unit id="a2be0f0a69d1324f0a28e325f93637011a05b9ab" translate="yes" xml:space="preserve">
          <source>JSTL works with request attributes - they are most often set in the request by a Servlet, which &lt;em&gt;forwards&lt;/em&gt; to the JSP.</source>
          <target state="translated">JSTL使用请求属性-它们通常是由Servlet在请求中设置的，该Servlet会&lt;em&gt;转发&lt;/em&gt;到JSP。</target>
        </trans-unit>
        <trans-unit id="a696556e75e9ef96d0226d1c056f84b37d8f28c0" translate="yes" xml:space="preserve">
          <source>Just use the JSTL tag and EL expression.</source>
          <target state="translated">只要使用JSTL标签和EL表达式就可以了。</target>
        </trans-unit>
        <trans-unit id="b61ea7debe4e081d0507e4a1d7a1698d231f004b" translate="yes" xml:space="preserve">
          <source>Look at Wicket.</source>
          <target state="translated">看看Wicket。</target>
        </trans-unit>
        <trans-unit id="9c9a06a4a3b3f8ba0b6e04a8601d038b496c2c91" translate="yes" xml:space="preserve">
          <source>Make your values and parameters inside your servlet classes</source>
          <target state="translated">在你的servlet类中制作你的值和参数</target>
        </trans-unit>
        <trans-unit id="6b1ec125525f6f889b55a94c4be3db9e02183779" translate="yes" xml:space="preserve">
          <source>No matter how much you try to avoid, when you work with other developers, some of them will still prefer scriptlet and then insert the evil code into the project. Therefore, setting up the project at the first sign is very important if you really want to reduce the scriptlet code. There are several techniques to get over this (including several frameworks that other mentioned). However, if you prefer the pure JSP way, then use the JSTL tag file. The nice thing about this is you can also set up master pages for your project, so the other pages can inherit the master pages</source>
          <target state="translated">不管你怎么避免,当你和其他开发者合作时,有的开发者还是会喜欢用scriptlet,然后把邪恶的代码插入到项目中。因此,如果你真的想减少scriptlet代码,在项目的第一时间设置好项目是非常重要的。有几个技巧可以克服这个问题(包括其他提到的几个框架)。不过,如果你喜欢纯JSP的方式,那就用JSTL标签文件。这样做的好处是,你还可以为你的项目设置主页面,这样其他页面可以继承主页面</target>
        </trans-unit>
        <trans-unit id="7496f24aecc09eb1dcd7346285873e798f1449a9" translate="yes" xml:space="preserve">
          <source>Note that EL is &lt;strong&gt;EviL&lt;/strong&gt; (runtime exceptions, refactoring)</source>
          <target state="translated">请注意，EL为&lt;strong&gt;EviL&lt;/strong&gt; （运行时异常，重构）</target>
        </trans-unit>
        <trans-unit id="6f49536a3746430c8f949ea7a5a7a57bcc58bbc4" translate="yes" xml:space="preserve">
          <source>Note that the XSS sensitivity is in no way specifically related to Java/JSP/JSTL/EL/whatever, this problem needs to be taken into account in &lt;strong&gt;every&lt;/strong&gt; web application you develop. The problem of &lt;em&gt;scriptlets&lt;/em&gt; is that it provides no way of builtin preventions, at least not using the standard Java API. JSP's successor Facelets has already implicit HTML escaping, so you don't need to worry about XSS holes in Facelets.</source>
          <target state="translated">请注意，XSS敏感性与Java / JSP / JSTL / EL /无关，无论如何，在您开发的&lt;strong&gt;每个&lt;/strong&gt; Web应用程序中&lt;strong&gt;都&lt;/strong&gt;必须考虑到此问题。 &lt;em&gt;scriptlet&lt;/em&gt;的问题在于，它没有提供内置的预防措施，至少没有使用标准的Java API。 JSP的继任者Facelets已经具有隐式HTML转义，因此您不必担心Facelets中的XSS漏洞。</target>
        </trans-unit>
        <trans-unit id="b753a681b0a58549d95c372d985f246cfe1be0e5" translate="yes" xml:space="preserve">
          <source>Nothing of that is used anymore my friend, my advice is to decouple the view(css, html, javascript, etc) from the server.</source>
          <target state="translated">这些都没有用了,我的朋友,我的建议是把视图(css、html、javascript等)与服务器解耦。</target>
        </trans-unit>
        <trans-unit id="a9423ba2ba1eee5498d3d54ff884a89cb29e92d1" translate="yes" xml:space="preserve">
          <source>Of course if you want, you can hack yourself into the depths of the code and inject JS and enrich your HTML page, but really you can avoid it if you want, and the result will be good as it was written in any other frameworks. I say worths a try, and the basic GWT is well-documented.</source>
          <target state="translated">当然如果你愿意,你可以自己黑进代码的深处,注入JS,丰富你的HTML页面,但真的如果你愿意的话,你可以避免,效果会和其他任何框架写的一样好。我说值得一试,基本的GWT都有很好的文档。</target>
        </trans-unit>
        <trans-unit id="0d7095f0f8c2e78814464e734575ef8202541d71" translate="yes" xml:space="preserve">
          <source>On this mater page, I created a fragment called &quot;title&quot;, so that in the child page, I could insert more codes into this place of the master page. Also, the tag &lt;code&gt;&amp;lt;jsp:doBody/&amp;gt;&lt;/code&gt; will be replaced by the content of the child page</source>
          <target state="translated">在此母版页上，我创建了一个名为&amp;ldquo;标题&amp;rdquo;的片段，以便在子页上可以将更多代码插入母版页的此位置。 另外，标记 &lt;code&gt;&amp;lt;jsp:doBody/&amp;gt;&lt;/code&gt; 将被子页面的内容替换</target>
        </trans-unit>
        <trans-unit id="4c857f865a5b7dda907f07a7e5d9a5393957617c" translate="yes" xml:space="preserve">
          <source>Or just adopt an MVC framework like &lt;a href=&quot;https://stackoverflow.com/tags/jsf/info&quot;&gt;JSF&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/tags/spring-mvc/info&quot;&gt;Spring MVC&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/tags/wicket/info&quot;&gt;Wicket&lt;/a&gt;, etc so that you end up with just a JSP/Facelets page and a JavaBean class without the need for a custom servlet.</source>
          <target state="translated">或者只是采用MVC框架（如&lt;a href=&quot;https://stackoverflow.com/tags/jsf/info&quot;&gt;JSF&lt;/a&gt; ， &lt;a href=&quot;https://stackoverflow.com/tags/spring-mvc/info&quot;&gt;Spring MVC&lt;/a&gt; ， &lt;a href=&quot;https://stackoverflow.com/tags/wicket/info&quot;&gt;Wicket&lt;/a&gt;等），以便最终只需要JSP / Facelets页面和JavaBean类，而无需自定义servlet。</target>
        </trans-unit>
        <trans-unit id="99c7ca3264a1d4cbc0d2abe683d40da7282d8bf4" translate="yes" xml:space="preserve">
          <source>Please refer to:</source>
          <target state="translated">请参考:</target>
        </trans-unit>
        <trans-unit id="371a87eafb4de078ff674d69a5a89c186532eb49" translate="yes" xml:space="preserve">
          <source>See also:</source>
          <target state="translated">也见。</target>
        </trans-unit>
        <trans-unit id="cdb70868019074559ad053d547795310d3f219bf" translate="yes" xml:space="preserve">
          <source>So I consider as procrastination the activity of defining &quot;layers&quot; or redundant data structures either early in the project or when not specifically required. &amp;nbsp;</source>
          <target state="translated">因此，我将在项目初期或在没有特别要求时定义&amp;ldquo;层&amp;rdquo;或冗余数据结构的活动视为拖延。</target>
        </trans-unit>
        <trans-unit id="6da13addb000b67d42a6d66391713819e634149f" translate="yes" xml:space="preserve">
          <source>Source</source>
          <target state="translated">Source</target>
        </trans-unit>
        <trans-unit id="fc9f10111119b6c9e526812b2a1905fd175f558d" translate="yes" xml:space="preserve">
          <source>Start server and load the bodyContent.jsp in browser</source>
          <target state="translated">启动服务器,在浏览器中加载bodyContent.jsp。</target>
        </trans-unit>
        <trans-unit id="2b8e6dd7bd02bbe0f0a2cd944adb7c18a7b97db2" translate="yes" xml:space="preserve">
          <source>Sure, replace &lt;code&gt;&amp;lt;%! counter++; %&amp;gt;&lt;/code&gt; by an event producer-consumer architecture, where the business layer is notified about the need to increment the counter, it reacts accordingly, and notifies the presenters so that they update the views. A number of database transactions are involved, since in future we will need to know the new and old value of the counter, who has incremented it and with what purpose in mind. Obviously serialization is involved, since the layers are entirely decoupled. You will be able to increment your counter over RMI, IIOP, SOAP. But only HTML is required, which you don't implement, since it is such a mundane case. Your new goal is to reach 250 increments a second on your new shiny E7, 64GB RAM server.</source>
          <target state="translated">当然，请更换 &lt;code&gt;&amp;lt;%! counter++; %&amp;gt;&lt;/code&gt; 计数器++; 事件生产者-消费者体系结构％&amp;gt; ，其中通知业务层需要增加计数器，它相应地做出反应，并通知演示者，以便他们更新视图。 涉及许多数据库事务，因为将来我们将需要知道计数器的新值和旧值，谁增加了计数器以及其目的是什么。 显然，涉及到序列化，因为这些层是完全解耦的。 您将能够通过RMI，IIOP，SOAP来增加计数器。 但是只有HTML是必需的，您不必实现，因为这是一种平凡的情况。 您的新目标是在新的闪亮E7 64GB RAM服务器上达到每秒250个增量。</target>
        </trans-unit>
        <trans-unit id="01f6458927b598fd06f1c9b9b3871a4a81966830" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;${param.foo}&lt;/code&gt; displays the outcome of &lt;code&gt;request.getParameter(&quot;foo&quot;)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;${param.foo}&lt;/code&gt; 显示 &lt;code&gt;request.getParameter(&quot;foo&quot;)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a9b0f7ac06bef52c90743fd20479795225d799b5" translate="yes" xml:space="preserve">
          <source>The code looks like ordinary HTML (or XHTML) plus some special attributes in an XML namespace; it can be viewed with a browser and safely be tweaked by a designer.
There is support for macros and for i18n as well:</source>
          <target state="translated">该代码看起来就像普通的HTML(或XHTML)加上XML命名空间中的一些特殊属性;可以通过浏览器查看,并由设计者安全地进行调整。它还支持宏和i18n。</target>
        </trans-unit>
        <trans-unit id="8beffd5c99ba40a7c520fac4a0fe7cf1204fe64a" translate="yes" xml:space="preserve">
          <source>The good thing about this approach is that your code is also HTML like
  code!</source>
          <target state="translated">这种方法的好处是,你的代码也是HTML一样的代码!</target>
        </trans-unit>
        <trans-unit id="5b8afa3aa8081cc0ec560cc7ed29305aed1be3f6" translate="yes" xml:space="preserve">
          <source>The major disadvantages of &lt;em&gt;scriptlets&lt;/em&gt; are:</source>
          <target state="translated">&lt;em&gt;scriptlet&lt;/em&gt;的主要缺点是：</target>
        </trans-unit>
        <trans-unit id="6e8eeb645a8a0b3cea3e70c5c9d1a8b1815529b1" translate="yes" xml:space="preserve">
          <source>The samples are very simple but you can do lots of complicated tasks here. Please consider you can use other tags (eg: &lt;code&gt;JSTL&lt;/code&gt; which has controlling tags like &lt;code&gt;if/forEcah/chosen&lt;/code&gt; text manipulation like &lt;code&gt;format/contains/uppercase&lt;/code&gt; or even SQL tags &lt;code&gt;select/update&lt;/code&gt;), pass all kind parameters, for example &lt;code&gt;Hashmap&lt;/code&gt;, access &lt;code&gt;session&lt;/code&gt;, &lt;code&gt;request&lt;/code&gt;, ... in your tag file too.</source>
          <target state="translated">这些示例非常简单，但是您可以在此处完成许多复杂的任务。 请考虑您可以使用其他标签（例如： &lt;code&gt;JSTL&lt;/code&gt; ，它具有控制标签，例如 &lt;code&gt;if/forEcah/chosen&lt;/code&gt; 文本操作，例如 &lt;code&gt;format/contains/uppercase&lt;/code&gt; 甚至是SQL标签 &lt;code&gt;select/update&lt;/code&gt; ），并传递所有种类的参数，例如 &lt;code&gt;Hashmap&lt;/code&gt; ，access &lt;code&gt;session&lt;/code&gt; ，在您的标记文件中也 &lt;code&gt;request&lt;/code&gt; ...。</target>
        </trans-unit>
        <trans-unit id="cadf4f01d22ba51a03cf9a23cd0debeb245888e3" translate="yes" xml:space="preserve">
          <source>The use of &lt;em&gt;scriptlets&lt;/em&gt; (those &lt;code&gt;&amp;lt;% %&amp;gt;&lt;/code&gt; things) in &lt;a href=&quot;https://stackoverflow.com/tags/jsp/info&quot;&gt;JSP&lt;/a&gt; is indeed highly discouraged since the birth of &lt;em&gt;taglibs&lt;/em&gt; (like &lt;a href=&quot;https://stackoverflow.com/tags/jstl/info&quot;&gt;JSTL&lt;/a&gt;) and &lt;a href=&quot;https://stackoverflow.com/tags/el/info&quot;&gt;EL&lt;/a&gt; (&lt;a href=&quot;https://stackoverflow.com/tags/el/info&quot;&gt;Expression Language&lt;/a&gt;, those &lt;code&gt;${}&lt;/code&gt; things) way back in 2001.</source>
          <target state="translated">自从2001年&lt;em&gt;标签库&lt;/em&gt; （如&lt;a href=&quot;https://stackoverflow.com/tags/jstl/info&quot;&gt;JSTL&lt;/a&gt; ）和&lt;a href=&quot;https://stackoverflow.com/tags/el/info&quot;&gt;EL&lt;/a&gt; （ &lt;a href=&quot;https://stackoverflow.com/tags/el/info&quot;&gt;表达式语言&lt;/a&gt; ，即 &lt;code&gt;${}&lt;/code&gt; 东西）诞生以来，在&lt;a href=&quot;https://stackoverflow.com/tags/jsp/info&quot;&gt;JSP&lt;/a&gt;中确实不鼓励使用&lt;em&gt;scriptlet&lt;/em&gt; （那些 &lt;code&gt;&amp;lt;% %&amp;gt;&lt;/code&gt; 东西）。</target>
        </trans-unit>
        <trans-unit id="218a7074a3a3abead1ad3409aeb72a9cfe4b36d1" translate="yes" xml:space="preserve">
          <source>There are also component-based frameworks such as &lt;strong&gt;Wicket&lt;/strong&gt; that generate a lot of the HTML for you.  The tags that end up in the HTML are extremely basic and there is virtually no logic that gets mixed in.  The result is almost empty-like HTML pages with typical HTML elements.  The downside is that there are a lot of components in the &lt;strong&gt;Wicket&lt;/strong&gt; API to learn and some things can be difficult to achieve under those constraints.</source>
          <target state="translated">还有一些基于组件的框架，例如&lt;strong&gt;Wicket&lt;/strong&gt; ，可以为您生成很多HTML。 最终出现在HTML中的标签是非常基本的，几乎没有逻辑混在一起。结果是带有典型HTML元素的几乎像空的HTML页面。 不利的一面是， &lt;strong&gt;Wicket&lt;/strong&gt; API中有很多组件需要学习，在这些限制下，有些事情可能很难实现。</target>
        </trans-unit>
        <trans-unit id="abcbc7b89ae11ccfa31d98b70ef4451cfb919707" translate="yes" xml:space="preserve">
          <source>There are also other options such as using a templating engine such as Velocity, Freemarker, Thymeleaf etc. But using plain JSP with EL and JSTL serves my purpose most of the time and it also seems the simplest for a beginner.</source>
          <target state="translated">还有其他的选择,比如使用Velocity,Freemarker,Thymeleaf等模板化引擎。但使用普通的JSP与EL和JSTL在大部分时间里都能达到我的目的,而且对于初学者来说,这似乎也是最简单的。</target>
        </trans-unit>
        <trans-unit id="c1ff3b8432d55d1428f36863b4e57b392badd9db" translate="yes" xml:space="preserve">
          <source>This must be added to the web application's web.xml</source>
          <target state="translated">这必须添加到web应用程序的web.xml中。</target>
        </trans-unit>
        <trans-unit id="6024548a077642e1968e58baff37a727cc4dd31b" translate="yes" xml:space="preserve">
          <source>This way dealing with different result page destinations is easier: redisplaying the form with validation errors in case of an error (in this particular example you can redisplay it using &lt;code&gt;${message}&lt;/code&gt; in &lt;a href=&quot;https://stackoverflow.com/tags/el/info&quot;&gt;EL&lt;/a&gt;), or just taking to the desired target page in case of success.</source>
          <target state="translated">这种处理不同结果页面目标的方法更加容易：在出现错误的情况下重新显示带有验证错误的表单（在此特定示例中，您可以使用&lt;a href=&quot;https://stackoverflow.com/tags/el/info&quot;&gt;EL中的&lt;/a&gt; &lt;code&gt;${message}&lt;/code&gt; 重新显示它），或者只是转到所需的目标页面成功。</target>
        </trans-unit>
        <trans-unit id="5c2f2b58b23cb864bd138ae1ceef470b24b2359f" translate="yes" xml:space="preserve">
          <source>This way dealing with exceptions is easier. The DB is not accessed in the midst of JSP rendering, but far before the JSP is been displayed. You still have the possibility to change the response whenever the DB access throws an exception. In the above example, the default error 500 page will be displayed which you can anyway customize by an &lt;code&gt;&amp;lt;error-page&amp;gt;&lt;/code&gt; in &lt;code&gt;web.xml&lt;/code&gt;.</source>
          <target state="translated">这种处理异常的方法比较容易。 在JSP呈现过程中，不能访问DB，但是要在显示JSP之前就可以访问DB。 每当数据库访问抛出异常时，您仍然可以更改响应。 在上面的示例中，将显示默认错误500页面，无论如何您都可以通过 &lt;code&gt;web.xml&lt;/code&gt; 中的 &lt;code&gt;&amp;lt;error-page&amp;gt;&lt;/code&gt; 进行自定义。</target>
        </trans-unit>
        <trans-unit id="3d73eb9cadb674305772ade110550c254cf89564" translate="yes" xml:space="preserve">
          <source>Use &lt;strong&gt;&lt;code&gt;JSTL Tag libraries&lt;/code&gt;&lt;/strong&gt; in JSP, that will work perfect.</source>
          <target state="translated">在JSP中使用&lt;strong&gt; &lt;code&gt;JSTL Tag libraries&lt;/code&gt; &lt;/strong&gt; ，可以很好地工作。</target>
        </trans-unit>
        <trans-unit id="972fb805d526ef28466dd6b7247afcf3429e9d40" translate="yes" xml:space="preserve">
          <source>Use JSP Tags</source>
          <target state="translated">使用JSP标签</target>
        </trans-unit>
        <trans-unit id="efe4cc8e2edf71091f863266b5fca3301038b019" translate="yes" xml:space="preserve">
          <source>Use MVC architecture for web application</source>
          <target state="translated">使用MVC架构的Web应用程序</target>
        </trans-unit>
        <trans-unit id="c0c4ea117b4cdb87ebd6313e300e1a15bc1a004d" translate="yes" xml:space="preserve">
          <source>Use backbone , angular like javascript framework for UI design
and fetch the data using rest api. This will remove the java dependency from UI completely.</source>
          <target state="translated">使用backbone,angular类似javascript框架的UI设计,并使用rest api获取数据。这样可以完全消除UI中对java的依赖。</target>
        </trans-unit>
        <trans-unit id="377f415dafbf7162b7e2c41493428f47026cb16c" translate="yes" xml:space="preserve">
          <source>Use it</source>
          <target state="translated">使用它</target>
        </trans-unit>
        <trans-unit id="b3812e1a927a9030d7df61a9f7b76633477e4d2c" translate="yes" xml:space="preserve">
          <source>Use it like</source>
          <target state="translated">用它像</target>
        </trans-unit>
        <trans-unit id="6d7ad08fbab98413abb910036a07cbbf3706c8d5" translate="yes" xml:space="preserve">
          <source>Using Scriptlets is a very old way and Not recommended. If you want directly output something in your JSP pages just use &lt;strong&gt;Expression Language(EL)&lt;/strong&gt;  along with &lt;strong&gt;JSTL&lt;/strong&gt; .</source>
          <target state="translated">使用Scriptlets是一种非常古老的方法，不建议使用。 如果要直接在JSP页面中输出某些内容，只需将&lt;strong&gt;Expression Language（EL）&lt;/strong&gt;与&lt;strong&gt;JSTL&lt;/strong&gt;一起使用。</target>
        </trans-unit>
        <trans-unit id="d2677389ab068b68879414df724ecfabd8859f86" translate="yes" xml:space="preserve">
          <source>Using scriptlets in JSPs is not a good practice.</source>
          <target state="translated">在JSP中使用scriptlets并不是一个好的做法。</target>
        </trans-unit>
        <trans-unit id="baf3fd0379691440bf2b3e4cbf92cad964713892" translate="yes" xml:space="preserve">
          <source>What's the difference between JSP, Servlet and JSF?</source>
          <target state="translated">JSP、Servlet和JSF有什么区别?</target>
        </trans-unit>
        <trans-unit id="17b74992560cf4122ca5285c428807fb001749e8" translate="yes" xml:space="preserve">
          <source>When mapped on an appropriate &lt;code&gt;&amp;lt;url-pattern&amp;gt;&lt;/code&gt; covering the JSP pages of interest, then you don't need to copypaste the same piece of code overall JSP pages.</source>
          <target state="translated">当映射到覆盖感兴趣的JSP页面的适当的 &lt;code&gt;&amp;lt;url-pattern&amp;gt;&lt;/code&gt; 上时 ，则无需在整个JSP页面上粘贴相同的代码。</target>
        </trans-unit>
        <trans-unit id="01de0b031979bcf7bb834c121a66d1089532c613" translate="yes" xml:space="preserve">
          <source>Where possible, &lt;strong&gt;avoid JSP scriptlets&lt;/strong&gt; whenever tag libraries provide equivalent functionality. This makes pages easier to read and maintain, helps to separate business logic from presentation logic, and will make your pages easier to evolve into JSP 2.0-style pages (JSP 2.0 Specification supports but de-emphasizes the use of scriptlets).</source>
          <target state="translated">只要有可能，就在标签库提供等效功能时&lt;strong&gt;避免使用JSP scriptlet&lt;/strong&gt; 。 这使页面更易于阅读和维护，有助于将业务逻辑与表示逻辑分离，并使您的页面更易于演变为JSP 2.0样式的页面（JSP 2.0规范支持但不强调脚本的使用）。</target>
        </trans-unit>
        <trans-unit id="01f59bf1a510897a780d5b0160084a576e832196" translate="yes" xml:space="preserve">
          <source>Wicket is also an alternative which completely separates java from html, so a designer and programmer can work together and on different sets of code with little understanding of each other.</source>
          <target state="translated">Wicket也是一种替代方案,它将java和html完全分开,所以设计师和程序员可以一起工作,在不同的代码集上工作,彼此之间几乎不需要什么理解。</target>
        </trans-unit>
        <trans-unit id="b75de34560a918f4ac6c5fab856eab492b0b22c7" translate="yes" xml:space="preserve">
          <source>Wicket may be evil too (performance, toilsome for small apps or simple view tier)</source>
          <target state="translated">Wicket可能也很邪恶(性能,对于小程序或简单的视图层来说很麻烦)。</target>
        </trans-unit>
        <trans-unit id="aab83ba5ea14f383f9f61cd2b8c7c97740eddee3" translate="yes" xml:space="preserve">
          <source>With XML-style tags which fit nicely among all that HTML, the code is better readable (and thus better maintainable) than a bunch of scriptlets with various opening and closing braces (&lt;em&gt;&quot;Where the heck does this closing brace belong to?&quot;&lt;/em&gt;). An easy aid is to configure your web application to throw an exception whenever &lt;em&gt;scriptlets&lt;/em&gt; are still been used by adding the following piece to &lt;code&gt;web.xml&lt;/code&gt;:</source>
          <target state="translated">使用XML样式的标签非常适合所有HTML，与一堆带有各种开合和结束大括号的scriptlet（ &lt;em&gt;&amp;ldquo;此结束大括号到底在哪里？&amp;rdquo;&lt;/em&gt; ）相比，该代码具有更好的可读性（因而更易于维护）。 一个简单的帮助是通过将以下内容添加到 &lt;code&gt;web.xml&lt;/code&gt; 中 ，将Web应用程序配置为在仍然使用&lt;em&gt;scriptlet&lt;/em&gt;时抛出异常：</target>
        </trans-unit>
        <trans-unit id="4c2bf52d41e06e8a6a1ac6943b1e400cec513ec0" translate="yes" xml:space="preserve">
          <source>You can easily call the child.jsp file from your controller. This also works nice with the struts framework</source>
          <target state="translated">你可以轻松地从你的控制器中调用child.jsp文件。这在struts框架中也很好用。</target>
        </trans-unit>
        <trans-unit id="ec25fe25e9b159c96d4f928b8e4b3bb1e43e1359" translate="yes" xml:space="preserve">
          <source>You can use JSTL tags together with EL expressions to avoid intermixing Java and HTML code:</source>
          <target state="translated">你可以将JSTL标签和EL表达式一起使用,以避免Java和HTML代码的混合。</target>
        </trans-unit>
        <trans-unit id="eb8afc4289a7ce63d3c4d9c0cdfed01af3cd38db" translate="yes" xml:space="preserve">
          <source>You can use tab library tags like &lt;strong&gt;JSTL&lt;/strong&gt; in addition to Expression Language (&lt;strong&gt;EL&lt;/strong&gt;). But EL does not work well with JSP. So it's is probably better to drop JSP completely and use &lt;strong&gt;Facelets&lt;/strong&gt;.</source>
          <target state="translated">除了表达式语言（ &lt;strong&gt;EL&lt;/strong&gt; ）之外，还可以使用&lt;strong&gt;JSTL之&lt;/strong&gt;类的标签库标签。 但是EL在JSP中不能很好地工作。 因此，最好完全删除JSP并使用&lt;strong&gt;Facelets&lt;/strong&gt;更好。</target>
        </trans-unit>
        <trans-unit id="48dd74417b4ebc09a65eea14b7b8611e65edcdff" translate="yes" xml:space="preserve">
          <source>You can use tag not only to avoid java but also minimize your HTML codes. I myself try to review HTML codes and build tags a lot as soon as see code duplicates start in my pages.</source>
          <target state="translated">你可以使用tag不仅可以避免java,还可以减少你的HTML代码。我自己也尝试着查看HTML代码,一旦看到页面中出现重复的代码,就会立即建立标签。</target>
        </trans-unit>
        <trans-unit id="6885c7a4e9ed902334d26715dd6b36e91c4fb7ea" translate="yes" xml:space="preserve">
          <source>You raised a good question and although you got good answers, I would suggest that you get rid of JSP. It is outdated technology which eventually will die. Use a modern approach, like template engines. You will have very clear separation of business and presentation layers, and certainly no Java code in templates, so you can generate templates directly from web presentation editing software, in most cases leveraging WYSIWYG.</source>
          <target state="translated">你提出了一个很好的问题,虽然你得到了很好的答案,但我建议你摆脱JSP。它是过时的技术,最终会消亡。使用现代的方法,比如模板引擎。你会有非常明确的业务层和演示层的分离,当然模板中也不会有Java代码,所以你可以直接从Web演示文稿编辑软件中生成模板,大多数情况下都是利用所见即所得的方式。</target>
        </trans-unit>
        <trans-unit id="438273965ed8aa8796321fe5db1f2057f772a67b" translate="yes" xml:space="preserve">
          <source>You should read something about MVC. &lt;a href=&quot;http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/mvc.html&quot;&gt;Spring MVC&lt;/a&gt; &amp;amp; &lt;a href=&quot;http://struts.apache.org/2.1.8.1/index.html&quot;&gt;Struts 2&lt;/a&gt; are the two most common solutions.</source>
          <target state="translated">您应该阅读有关MVC的内容。 &lt;a href=&quot;http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/mvc.html&quot;&gt;Spring MVC&lt;/a&gt;和&lt;a href=&quot;http://struts.apache.org/2.1.8.1/index.html&quot;&gt;Struts 2&lt;/a&gt;是两个最常见的解决方案。</target>
        </trans-unit>
        <trans-unit id="b8ab5363e1e6302f03570a1b8e0ae9b88cbfdce5" translate="yes" xml:space="preserve">
          <source>a. Standard Tags</source>
          <target state="translated">a.标准标签</target>
        </trans-unit>
        <trans-unit id="04f6e1d2c89d5b0154e152d11433b9186a0b3846" translate="yes" xml:space="preserve">
          <source>b. Custom Tags</source>
          <target state="translated">b.自定义标签</target>
        </trans-unit>
        <trans-unit id="91fe1449aaf03867f86a0b155fcee28ddfd0f9e8" translate="yes" xml:space="preserve">
          <source>compile the following code into WEB-INF\classes\com\java2s</source>
          <target state="translated">编译以下代码到WEB-INF类中</target>
        </trans-unit>
        <trans-unit id="a3aca3110daeea1fa393016d5451337f69813249" translate="yes" xml:space="preserve">
          <source>create File:java2s.tld in the /WEB-INF/</source>
          <target state="translated">在WEB-INF中创建文件:java2s.tld</target>
        </trans-unit>
        <trans-unit id="347e7a992309f255fbabef719461f73688c0b617" translate="yes" xml:space="preserve">
          <source>if you simply want to avoid the drawbacks of Java coding in JSP you can do so even with scriplets. Just follow some discipline to have minimal Java in JSP and almost no calculation and logic in the JSP page.</source>
          <target state="translated">如果你只是想避免JSP中的Java编码的缺点,即使是用scriplets,你也可以这样做。只需遵循一些纪律,在JSP中拥有最小的Java,在JSP页面中几乎没有计算和逻辑。</target>
        </trans-unit>
        <trans-unit id="5cc12c11e0ce089f9fb529b087b6387795003c7c" translate="yes" xml:space="preserve">
          <source>in order to avoid java code in JSP files java now provides tag libraries like JSTL also java has come up with JSF into which u can write all programming structures in the form of tags</source>
          <target state="translated">为了避免JSP文件中的java代码,java现在提供了像JSTL这样的标签库,而且java还提出了JSF,可以将所有的编程结构以标签的形式写进JSF中。</target>
        </trans-unit>
        <trans-unit id="95d9818e59ca8aa7c7ec1cf5d55885788554dd7a" translate="yes" xml:space="preserve">
          <source>is an old school way of coding and in JSP version 2 there exists a method to avoid Java code in JSP files. Can someone please tell me the alternative JSP 2 lines, and what this technique is called?</source>
          <target state="translated">是一种老派的编码方式,在JSP 2版本中,有一种方法可以避免JSP文件中的Java代码。谁能告诉我JSP 2的替代行,这个技术叫什么?</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
