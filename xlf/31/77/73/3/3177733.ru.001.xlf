<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://stackoverflow.com/questions/3177733">
    <body>
      <group id="3177733">
        <trans-unit id="7c55e13b3a5960f2e06f74f020b8ae99bd6171bc" translate="yes" xml:space="preserve">
          <source>(Even if you end up using the java in your JSP code, which I hope not, you can encapsulate that code in a tag)</source>
          <target state="translated">(Даже если в конечном итоге вы используете java в вашем коде JSP,который,я надеюсь,нет,вы можете инкапсулировать этот код в тэг).</target>
        </trans-unit>
        <trans-unit id="abecfaae04b845d07cad8db2dacb71965f0897c5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://jstl.java.net/&quot;&gt;JSTL&lt;/a&gt; offers tags for conditionals, loops, sets, gets, etc. For example:</source>
          <target state="translated">&lt;a href=&quot;https://jstl.java.net/&quot;&gt;JSTL&lt;/a&gt; предлагает теги для условных выражений, циклов, множеств, наборов и т. Д. Например:</target>
        </trans-unit>
        <trans-unit id="ff137f765374ad5666aafc75629eb2025b1372d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;t:base&amp;gt;&lt;/code&gt; is used to specify the master page you want to use (which is base.tag at this moment). All the content inside the tag &lt;code&gt;&amp;lt;jsp:body&amp;gt;&lt;/code&gt; here will replace the &lt;code&gt;&amp;lt;jsp:doBody/&amp;gt;&lt;/code&gt; on your master page. Your child page can also include any tag lib and you can use it normally like the other mentioned. However, if you use any scriptlet code here (&lt;code&gt;&amp;lt;%= request.getParameter(&quot;name&quot;) %&amp;gt;&lt;/code&gt; ...) and try to run this page, you will get a &lt;code&gt;JasperException because  Scripting elements ( &amp;amp;lt;%!, &amp;amp;lt;jsp:declaration, &amp;amp;lt;%=, &amp;amp;lt;jsp:expression, &amp;amp;lt;%, &amp;amp;lt;jsp:scriptlet ) are disallowed here&lt;/code&gt;. Therefore, there is no way other people can include the evil code into the jsp file</source>
          <target state="translated">&lt;code&gt;&amp;lt;t:base&amp;gt;&lt;/code&gt; используется для указания главной страницы, которую вы хотите использовать (на данный момент это base.tag). Весь контент внутри тега &lt;code&gt;&amp;lt;jsp:body&amp;gt;&lt;/code&gt; здесь заменит &lt;code&gt;&amp;lt;jsp:doBody/&amp;gt;&lt;/code&gt; на вашей главной странице. Ваша дочерняя страница также может содержать любой тег lib, и вы можете использовать его, как и другие упомянутые выше. Однако если вы используете здесь какой-либо код скриптлета ( &lt;code&gt;&amp;lt;%= request.getParameter(&quot;name&quot;) %&amp;gt;&lt;/code&gt; ...) и попытаетесь запустить эту страницу, вы получите &lt;code&gt;JasperException because Scripting elements ( &amp;amp;lt;%!, &amp;amp;lt;jsp:declaration, &amp;amp;lt;%=, &amp;amp;lt;jsp:expression, &amp;amp;lt;%, &amp;amp;lt;jsp:scriptlet ) are disallowed here&lt;/code&gt; . Поэтому другие люди не могут включить злой код в файл jsp.</target>
        </trans-unit>
        <trans-unit id="242c95b3bd4d1500098c2c644b1eabdcae7d762c" translate="yes" xml:space="preserve">
          <source>&lt;strike&gt;Sun&lt;/strike&gt; Oracle itself also recommends in the &lt;a href=&quot;http://www.oracle.com/technetwork/articles/javase/code-convention-138726.html&quot;&gt;JSP coding conventions&lt;/a&gt; to avoid use of &lt;em&gt;scriptlets&lt;/em&gt; whenever the same functionality is possible by (tag) classes. Here are several cites of relevance:</source>
          <target state="translated">Сам &lt;strike&gt;Sun&lt;/strike&gt; Oracle также рекомендует в &lt;a href=&quot;http://www.oracle.com/technetwork/articles/javase/code-convention-138726.html&quot;&gt;соглашениях&lt;/a&gt; о кодировании JSP избегать использования &lt;em&gt;скриптлетов,&lt;/em&gt; когда те же функции возможны с помощью (тега) классов. Вот несколько ссылок:</target>
        </trans-unit>
        <trans-unit id="47f6077a2de453659dd80148f677647a78ff3cd4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;How to avoid Java code in JSP files?&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;Как избежать Java-кода в файлах JSP?&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6d2ca64168746e18166ffea7b50fc32ade312a97" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;As a Safeguard: Disable Scriptlets For Good&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;В качестве меры предосторожности: отключите скрипты насовсем&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="53ccd4bb22efbe7051e3c1b669e4135918583cc1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Calling this page from your controller:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Вызов этой страницы с вашего контроллера:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="52ce212588f872e8f16ad1c8207593f87ae8c869" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Create a master page called base.tag under your WEB-INF/tags with the following content&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Создайте главную страницу под названием base.tag под вашими тегами WEB-INF / со следующим содержанием&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="133419c9245e3989fa760d65ab99f57c23aa9d14" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Create child page (child.jsp) in your WebContent folder:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Создайте дочернюю страницу (child.jsp) в папке WebContent:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4579c5bafd0c96bf4fe66f646911268bde67d154" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Debuggability:&lt;/strong&gt; if scriptlet throws an exception halfway, all you get is a blank page.</source>
          <target state="translated">&lt;strong&gt;Отладка:&lt;/strong&gt; если &lt;strong&gt;скриптлет&lt;/strong&gt; выбрасывает исключение на полпути, вы получаете только пустую страницу.</target>
        </trans-unit>
        <trans-unit id="3a6e7652b38b97d5a8c32f449fb30606c438c17f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Facelets&lt;/strong&gt; is the first non JSP page declaration language designed for &lt;strong&gt;JSF (Java Server Faces)&lt;/strong&gt; which provided a simpler and more powerful programming model to JSF developers as compare to JSP. It resolves different issues occurs in JSP for web applications development.</source>
          <target state="translated">&lt;strong&gt;Facelets&lt;/strong&gt; - это первый не-JSP язык объявления страниц, разработанный для &lt;strong&gt;JSF (Java Server Faces),&lt;/strong&gt; который предоставил разработчикам &lt;strong&gt;JSF&lt;/strong&gt; более простую и мощную модель программирования по сравнению с JSP. Это решает различные проблемы, возникающие в JSP для разработки веб-приложений.</target>
        </trans-unit>
        <trans-unit id="1e5ef583aedb2fa877df3b22256a022618dc6f86" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;How to replace &lt;em&gt;scriptlets&lt;/em&gt; entirely depends on the sole purpose of the code/logic. More than often this code is to be placed in a fullworthy Java class:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Как заменить &lt;em&gt;скриптлеты&lt;/em&gt; полностью зависит от единственной цели кода / логики.&lt;/strong&gt; &lt;strong&gt;Чаще всего этот код помещается в полноценный класс Java:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5d05d31648416deb82a36f230d878a6d38196b83" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;If somebody is really against programming in more languages than one&lt;/strong&gt;, I suggest GWT, theoretically you can avoid all the JS and HTML elements, because Google Toolkit transforms all the client and shared code to JS, you won't have problem with them, so you have a webservice without coding in any other languages. Even you can use some default CSS from somewhere as it is given by extensions (smartGWT or Vaadin). You don't need to learn dozens of annotations.</source>
          <target state="translated">&lt;strong&gt;Если кто-то действительно против программирования на большем количестве языков, чем один&lt;/strong&gt; , я предлагаю GWT, теоретически вы можете избежать всех элементов JS и HTML, поскольку Google Toolkit преобразует весь клиентский и общий код в JS, у вас не будет проблем с ними, поэтому у вас есть веб-сервис без кодирования на других языках. Даже вы можете использовать какой-то CSS по умолчанию откуда-то, как это задано расширениями (smartGWT или Vaadin). Вам не нужно изучать десятки аннотаций.</target>
        </trans-unit>
        <trans-unit id="3d3ad886a6c5ab3968b4242b8a06f60d6e3bd987" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Learn to customize and write your own tags using JSTL&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Научитесь настраивать и писать свои собственные теги, используя JSTL&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6356f55f28c4b437234bb509c95bcd79233fc2fd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Maintainability:&lt;/strong&gt; per saldo more time is needed to maintain mingled/cluttered/duplicated code logic.</source>
          <target state="translated">&lt;strong&gt;Ремонтопригодность:&lt;/strong&gt; для сохранения логики смешанного / загроможденного / дублированного кода требуется больше времени.</target>
        </trans-unit>
        <trans-unit id="12d108e7baf9032b2bc0679febce2431845aacf3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;OO-ability:&lt;/strong&gt; you can't make use of inheritance/composition.</source>
          <target state="translated">&lt;strong&gt;OO-способность:&lt;/strong&gt; вы не можете использовать наследование / композицию.</target>
        </trans-unit>
        <trans-unit id="a23f822b1d4a14c1f8d45091a579788beb963af1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Replaceability:&lt;/strong&gt; you can't make scriptlets abstract.</source>
          <target state="translated">&lt;strong&gt;Заменимость:&lt;/strong&gt; вы не можете сделать скриптлеты абстрактными.</target>
        </trans-unit>
        <trans-unit id="dd6c632d066ccf0fc385be85c35d9172a5b13eb2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reusability:&lt;/strong&gt; you can't reuse scriptlets.</source>
          <target state="translated">&lt;strong&gt;Возможность&lt;/strong&gt; повторного использования &lt;strong&gt;:&lt;/strong&gt; вы не можете повторно использовать скриптлеты.</target>
        </trans-unit>
        <trans-unit id="dab8261ed76aa890287247357fd6bbed2684e5b4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Tag File&lt;/strong&gt;  are so easy developed as you did not need to restart the server when changing them, like JSP files. This makes them easy for development.</source>
          <target state="translated">&lt;strong&gt;Файл тегов&lt;/strong&gt; разработан так просто, что вам не нужно было перезагружать сервер при их изменении, как файлы JSP. Это облегчает их разработку.</target>
        </trans-unit>
        <trans-unit id="3814b9b9f2dbea323401f0b749d1cea78b81d65c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Technically, JSP are all converted to Servlets during runtime&lt;/strong&gt;. JSP was initially created for the purpose of the decoupling the business logic and the design logic, following the MVC pattern. So JSP are technically all java codes during runtime. But to answer the question, Tag Libraries are usually used for applying logic (removing Java codes) to JSP pages.</source>
          <target state="translated">&lt;strong&gt;Технически все JSP преобразуются в сервлеты во время выполнения&lt;/strong&gt; . Изначально JSP был создан с целью разделения бизнес-логики и логики проектирования в соответствии с шаблоном MVC. Таким образом, JSP технически - это все java-коды во время выполнения. Но чтобы ответить на этот вопрос, библиотеки тегов обычно используются для применения логики (удаления кодов Java) к страницам JSP.</target>
        </trans-unit>
        <trans-unit id="dca32e18a3b2d52aac3677e7d928e29f14de3e4c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Testability:&lt;/strong&gt; scriptlets are not unit-testable.</source>
          <target state="translated">&lt;strong&gt;Тестируемость:&lt;/strong&gt; скриптлеты не тестируются юнитами.</target>
        </trans-unit>
        <trans-unit id="9137dff06cb373f59845928934fa1e992525c9e8" translate="yes" xml:space="preserve">
          <source>A neat idea from the Python world are &lt;em&gt;Template attribute languages&lt;/em&gt;; TAL was introduced by Zope (therefore a.k.a. &quot;Zope Page Templates&quot;, ZPT) and is a standard, with implementations in PHP, XSLT and Java as well (I have used the Python/Zope and PHP incarnations). In this class of templating languages, one above example could look like this:</source>
          <target state="translated">Прекрасная идея из мира Python - это &lt;em&gt;языки атрибутов Template&lt;/em&gt; ; TAL был введен Zope (следовательно, &amp;laquo;Шаблоны страниц Zope&amp;raquo;, ZPT) и является стандартом, также с реализациями на PHP, XSLT и Java (я использовал воплощения Python / Zope и PHP). В этом классе языков шаблонов один приведенный выше пример может выглядеть так:</target>
        </trans-unit>
        <trans-unit id="cfc5709ae32ab041336687f1e6512f200a0844a5" translate="yes" xml:space="preserve">
          <source>Also, take note that it is not a best practice to do business logic in the view layer, you should perform your business logics in the Service layer, 
and pass the output result to your views through a Controller.</source>
          <target state="translated">Также следует учитывать,что это не лучшая методика для выполнения бизнес-логики на уровне представления,необходимо выполнять логику бизнеса на уровне служб,и передавать результат на представление через контроллер.</target>
        </trans-unit>
        <trans-unit id="f68d36db9b907801a9eb6798b78a997685810586" translate="yes" xml:space="preserve">
          <source>Also, you can read the tag body easily</source>
          <target state="translated">Кроме того,вы можете легко прочитать тело метки</target>
        </trans-unit>
        <trans-unit id="3287880bd50b1fa49f174a085295b57ed1de703b" translate="yes" xml:space="preserve">
          <source>And certainly stay away of filters and pre and post processing, otherwise you may deal with support/debugging difficulties since you always do not know where the variable gets the value.</source>
          <target state="translated">И,конечно же,держитесь подальше от фильтров и пре-и постобработки,иначе вы можете столкнуться с трудностями при отладке,так как всегда не знаете,откуда переменная получает значение.</target>
        </trans-unit>
        <trans-unit id="460633aa80eeb1c8f4d8d4d2a283b2cd7c2ea331" translate="yes" xml:space="preserve">
          <source>And of course many fellow programmers hereby described or recommended several other solutions. GWT is for people who really don't want to deal with the web part or to minimalize it.</source>
          <target state="translated">И,конечно же,многие коллеги-программисты описали или порекомендовали несколько других решений.GWT для тех,кто действительно не хочет иметь дело с веб-частью или минимизировать ее.</target>
        </trans-unit>
        <trans-unit id="293d82cb47fc75524d2ec23540d9f51807688ce8" translate="yes" xml:space="preserve">
          <source>As &lt;a href=&quot;https://stackoverflow.com/questions/2188706/how-to-avoid-using-scriptlets-in-my-jsp-page&quot;&gt;another question&lt;/a&gt; is discussing, you can and always should disable scriptlets in your &lt;code&gt;web.xml&lt;/code&gt; web application descriptor.</source>
          <target state="translated">Поскольку обсуждается &lt;a href=&quot;https://stackoverflow.com/questions/2188706/how-to-avoid-using-scriptlets-in-my-jsp-page&quot;&gt;другой вопрос&lt;/a&gt; , вы можете и всегда должны отключать скриптлеты в &lt;code&gt;web.xml&lt;/code&gt; веб-приложения web.xml .</target>
        </trans-unit>
        <trans-unit id="17bc0d434c97d066ec7b78aa4ac9d4cbc140117e" translate="yes" xml:space="preserve">
          <source>As many answers says, use JSTL or create your own custom tags. &lt;a href=&quot;http://www.journaldev.com/2099/jsp-custom-tags-example-tutorial&quot;&gt;Here&lt;/a&gt; is good explanation about creating custom tags</source>
          <target state="translated">Как говорится во многих ответах, используйте JSTL или создайте свои собственные теги. &lt;a href=&quot;http://www.journaldev.com/2099/jsp-custom-tags-example-tutorial&quot;&gt;Вот&lt;/a&gt; хорошее объяснение о создании пользовательских тегов</target>
        </trans-unit>
        <trans-unit id="dabf707c8c01e32501275ce0d2adb33afa1729af" translate="yes" xml:space="preserve">
          <source>Basic MVC example with JSP, Servlet and JDBC</source>
          <target state="translated">Основной пример MVC с JSP,сервлетами и JDBC</target>
        </trans-unit>
        <trans-unit id="d202594c5797a73fde182a112e408d80d5a47ff2" translate="yes" xml:space="preserve">
          <source>Believe me, this will change the way you design</source>
          <target state="translated">Поверь мне,это изменит то,как ты проектируешь...</target>
        </trans-unit>
        <trans-unit id="d841cf905ba57a2e5b758d8b5de5a5d1feb0d038" translate="yes" xml:space="preserve">
          <source>By using JSTL tags together with EL expression you can avoid this. Put the following things in your jsp page:</source>
          <target state="translated">Используя теги JSTL вместе с выражением EL,вы можете избежать этого.Поместите следующие вещи на вашу jsp страницу:</target>
        </trans-unit>
        <trans-unit id="e2b0a0be2c4be101f37fd815c88cbaf5f6d93468" translate="yes" xml:space="preserve">
          <source>Custom Tags- you can define your own tags to use.</source>
          <target state="translated">Пользовательские теги-вы можете определить свои собственные теги для использования.</target>
        </trans-unit>
        <trans-unit id="2700221f2d233bc435b4aecae915d8f6c4b5eb5e" translate="yes" xml:space="preserve">
          <source>Design patterns in Java web applications</source>
          <target state="translated">Шаблоны дизайна в Java веб-приложениях</target>
        </trans-unit>
        <trans-unit id="4c492217496c5720801e5ab32fb88c56ac52c16a" translate="yes" xml:space="preserve">
          <source>EL</source>
          <target state="translated">EL</target>
        </trans-unit>
        <trans-unit id="9028f357a088f9e3949a25480f3a1fcc603f5d51" translate="yes" xml:space="preserve">
          <source>EL expressions</source>
          <target state="translated">EL-выражения</target>
        </trans-unit>
        <trans-unit id="ff837528477860274cafad4c44c9ba8002de71b3" translate="yes" xml:space="preserve">
          <source>Even if you use a framework like Struts 2, which have lots of good tags, you may find that having your own tags can reduce your code a lot. You can pass your tag parameters to struts and this way customize your framework tag.</source>
          <target state="translated">Даже если вы используете фреймворк,подобный Struts 2,который имеет много хороших тегов,вы можете обнаружить,что наличие собственных тегов может сильно сократить ваш код.Вы можете передавать свои параметры тегов в строки и таким образом настраивать свой фреймворк.</target>
        </trans-unit>
        <trans-unit id="e5f2929765178283974ec5b0f56d6dbb2d488cb2" translate="yes" xml:space="preserve">
          <source>Example from &lt;em&gt;java2s&lt;/em&gt;,</source>
          <target state="translated">Пример из &lt;em&gt;java2s&lt;/em&gt; ,</target>
        </trans-unit>
        <trans-unit id="ab4ad92cb1a1e4761a3bf91a6bffc62b4148df71" translate="yes" xml:space="preserve">
          <source>Experience has shown that JSP's have some shortcomings, one of them being hard to avoid mixing markup with actual code.</source>
          <target state="translated">Опыт показывает,что у JSP есть некоторые недостатки,одним из которых является то,что трудно избежать смешивания разметки с реальным кодом.</target>
        </trans-unit>
        <trans-unit id="1c7a52dfd00e05d100e7009189a810dae152a373" translate="yes" xml:space="preserve">
          <source>Expression Language</source>
          <target state="translated">Язык выражения</target>
        </trans-unit>
        <trans-unit id="335819d77fcc9ef286b4eee5c8cbe73bf3f8577e" translate="yes" xml:space="preserve">
          <source>Fetch those values and parameters within your JSP using JSTL/Taglib</source>
          <target state="translated">Получите эти значения и параметры в вашем JSP с помощью JSTLTaglib.</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">Например:</target>
        </trans-unit>
        <trans-unit id="4145625051f942611b763d861ab36407bba4c90f" translate="yes" xml:space="preserve">
          <source>From JSP 1.2 Specification, it is highly recommended that the JSP Standard Tag Library  (JSTL) be used in your web application to help &lt;strong&gt;reduce the need for JSP scriptlets&lt;/strong&gt; in your pages. Pages that use JSTL are, in general, easier to read and maintain.</source>
          <target state="translated">Из спецификации JSP 1.2 настоятельно рекомендуется использовать в вашем веб-приложении стандартную библиотеку тегов JSP (JSTL), чтобы &lt;strong&gt;снизить потребность в JSP-скриптлетах&lt;/strong&gt; на ваших страницах. Страницы, использующие JSTL, в общем, легче читать и поддерживать.</target>
        </trans-unit>
        <trans-unit id="55fc2f63b02dc3aa67ac5d8c473a54ee6c3335d5" translate="yes" xml:space="preserve">
          <source>Hidden features of JSP/Servlet</source>
          <target state="translated">Скрытые функции JSPServlet</target>
        </trans-unit>
        <trans-unit id="abbb3de6a2693017a80aac6e69fc528bd68e92f8" translate="yes" xml:space="preserve">
          <source>How does Servlet, ServletContext, HttpSession and HttpServletRequest/Response work?</source>
          <target state="translated">Как работают Сервлет,СервлетКонтекст,HttpSession и HttpServletRequestResponse?</target>
        </trans-unit>
        <trans-unit id="fc6304fc1da24f7332456c2ed85a43e9be667bb1" translate="yes" xml:space="preserve">
          <source>How to avoid Java code in JSP files</source>
          <target state="translated">Как избежать Java-кода в JSP-файлах</target>
        </trans-unit>
        <trans-unit id="541f1c70d2cfacfa1fae673b114a9c7b5e3c9ca3" translate="yes" xml:space="preserve">
          <source>I don't know very much about the &lt;a href=&quot;http://sourceforge.net/projects/javazpt/&quot;&gt;Java implementation&lt;/a&gt;, though.</source>
          <target state="translated">Хотя я не очень разбираюсь в &lt;a href=&quot;http://sourceforge.net/projects/javazpt/&quot;&gt;реализации Java&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="209fa42a6db8dfeb3eb4eb056dd10ed5ad682f31" translate="yes" xml:space="preserve">
          <source>I have more than 20 years in programming, most of the projects fail before the sextet: Reusability Replaceability OO-ability Debuggability Testability Maintainability is even needed. Other projects, run by people who only cared about functionality, were extremely successful.  Also, stiff object structure, implemented too early in the project, makes the code unable to be adapted to the drastic changes in the specifications (aka agile).</source>
          <target state="translated">У меня более 20 лет в программировании,большинство проектов терпят неудачу до секстета:Возможность многократного использования Замена ОП-возможность отладки Устойчивость Поддерживаемость даже необходима.Другие проекты,управляемые людьми,которые заботились только о функциональности,были чрезвычайно успешными.Кроме того,жесткая структура объектов,реализованная слишком рано в проекте,делает код неспособным адаптироваться к резким изменениям спецификаций (так же известным как agile).</target>
        </trans-unit>
        <trans-unit id="1910500d8ffa90d4b15a55788777f83ecb6b6468" translate="yes" xml:space="preserve">
          <source>I would always do that in order to prevent any developer adding scriptlets, especially in bigger companies where you will lose overview sooner or later. The &lt;code&gt;web.xml&lt;/code&gt; settings look like this:</source>
          <target state="translated">Я всегда делал бы это, чтобы не допустить добавления разработчиками скриплетов, особенно в крупных компаниях, где вы рано или поздно потеряете обзор. Настройки &lt;code&gt;web.xml&lt;/code&gt; выглядят так:</target>
        </trans-unit>
        <trans-unit id="c8ea5c5d6cf46dab0bf146f77bb73a4cf420ef49" translate="yes" xml:space="preserve">
          <source>I'm new to Java EE and I know that something like the following three lines</source>
          <target state="translated">Я новичок в Java EE и я знаю,что что-то вроде следующих трех строк</target>
        </trans-unit>
        <trans-unit id="7897d079e730103d5c275ad30437b72216d2b88f" translate="yes" xml:space="preserve">
          <source>I'm not sure if i get this correct.</source>
          <target state="translated">Я не уверен,правильно ли я понял.</target>
        </trans-unit>
        <trans-unit id="fd9279c3f407a91c673b3d198d2d7165013ce083" translate="yes" xml:space="preserve">
          <source>If translations of the content are available, they are used.</source>
          <target state="translated">Если переводы содержания доступны,то они используются.</target>
        </trans-unit>
        <trans-unit id="85c83d910c283a8bdf255689a433590534187269" translate="yes" xml:space="preserve">
          <source>If we use the following things in a java web application, java code can be eliminated from foreground of the JSP.</source>
          <target state="translated">Если мы используем следующие вещи в java веб-приложении,java код может быть удален с переднего плана JSP.</target>
        </trans-unit>
        <trans-unit id="bbec7d7b3dc4d02602a57d628c2e974a87621c53" translate="yes" xml:space="preserve">
          <source>If you can, then consider using a specialized technology for what you need to do.  In Java EE 6 there is JSF 2.0, which provides a lot of nice features including gluing Java beans together with JSF pages through the &lt;code&gt;#{bean.method(argument)}&lt;/code&gt; approach.</source>
          <target state="translated">Если вы можете, то подумайте об использовании специализированной технологии для того, что вам нужно сделать. В Java EE 6 есть JSF 2.0, который предоставляет множество полезных функций, включая склейку Java- &lt;code&gt;#{bean.method(argument)}&lt;/code&gt; вместе со страницами JSF с помощью подхода # {bean.method (arguments)} .</target>
        </trans-unit>
        <trans-unit id="1928eb1d50f68f5d11732dc80e018320691e2fae" translate="yes" xml:space="preserve">
          <source>If you want to invoke some &lt;strong&gt;utility&lt;/strong&gt; Java code directly in the JSP page (typically &lt;code&gt;public static&lt;/code&gt; methods), then you need to define them as EL functions. There's a standard &lt;a href=&quot;http://docs.oracle.com/javaee/5/jstl/1.1/docs/tlddocs/fn/tld-summary.html&quot;&gt;functions taglib&lt;/a&gt; in JSTL, but &lt;a href=&quot;http://docs.oracle.com/javaee/5/tutorial/doc/bnahq.html#bnaiq&quot;&gt;you can also easily create functions yourself&lt;/a&gt;. Here's an example how JSTL &lt;code&gt;fn:escapeXml&lt;/code&gt; is useful to prevent &lt;a href=&quot;http://en.wikipedia.org/wiki/Cross-site_scripting&quot;&gt;XSS&lt;/a&gt;&lt;a href=&quot;http://ha.ckers.org/xss.html&quot;&gt;attacks&lt;/a&gt;.</source>
          <target state="translated">Если вы хотите вызывать некоторый &lt;strong&gt;служебный&lt;/strong&gt; Java-код непосредственно на странице JSP (обычно это &lt;code&gt;public static&lt;/code&gt; методы), вам необходимо определить их как функции EL. В JSTL есть стандартные &lt;a href=&quot;http://docs.oracle.com/javaee/5/jstl/1.1/docs/tlddocs/fn/tld-summary.html&quot;&gt;функции taglib&lt;/a&gt; , но &lt;a href=&quot;http://docs.oracle.com/javaee/5/tutorial/doc/bnahq.html#bnaiq&quot;&gt;вы также можете легко создавать функции самостоятельно&lt;/a&gt; . Вот пример того, как JSTL &lt;code&gt;fn:escapeXml&lt;/code&gt; полезен для предотвращения &lt;a href=&quot;http://en.wikipedia.org/wiki/Cross-site_scripting&quot;&gt;XSS-&lt;/a&gt; &lt;a href=&quot;http://ha.ckers.org/xss.html&quot;&gt;атак&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="38577992a40047e6c37c2fb7c2cab6712a83ae8d" translate="yes" xml:space="preserve">
          <source>If you want to invoke some Java code to &lt;strong&gt;access and display&lt;/strong&gt; &quot;backend&quot; data inside a JSP page, then you need to use EL (Expression Language), those &lt;code&gt;${}&lt;/code&gt; things. E.g. redisplaying submitted input values:</source>
          <target state="translated">Если вы хотите вызвать некоторый Java-код для &lt;strong&gt;доступа и отображения&lt;/strong&gt; &amp;laquo;внутренних&amp;raquo; данных на странице JSP, то вам нужно использовать EL (Expression Language), эти &lt;code&gt;${}&lt;/code&gt; вещи. Например, повторное отображение введенных значений ввода:</target>
        </trans-unit>
        <trans-unit id="6e4f8370b3272119e2841c20a679e8e38d1b031c" translate="yes" xml:space="preserve">
          <source>If you want to invoke some Java code to &lt;strong&gt;control the flow&lt;/strong&gt; inside a JSP page, then you need to grab an (existing) flow control taglib like &lt;a href=&quot;http://docs.oracle.com/javaee/5/jstl/1.1/docs/tlddocs/c/tld-summary.html&quot;&gt;JSTL core&lt;/a&gt;. E.g. displaying &lt;code&gt;List&amp;lt;Product&amp;gt;&lt;/code&gt; in a table:</source>
          <target state="translated">Если вы хотите вызвать некоторый Java-код для &lt;strong&gt;управления потоком&lt;/strong&gt; внутри JSP-страницы, вам нужно получить (существующий) taglib управления потоком, такой как &lt;a href=&quot;http://docs.oracle.com/javaee/5/jstl/1.1/docs/tlddocs/c/tld-summary.html&quot;&gt;ядро JSTL&lt;/a&gt; . Например, отображение &lt;code&gt;List&amp;lt;Product&amp;gt;&lt;/code&gt; в таблице:</target>
        </trans-unit>
        <trans-unit id="8062301bb015d8a2e33cde53a0ed7e77846a2169" translate="yes" xml:space="preserve">
          <source>If you want to invoke some Java code to &lt;strong&gt;control&lt;/strong&gt; the execution plan and/or the destination of the request and the response, then implement a &lt;a href=&quot;https://stackoverflow.com/tags/servlets/info&quot;&gt;servlet&lt;/a&gt; according to the &lt;a href=&quot;https://stackoverflow.com/questions/3541077/design-patterns-web-based-applications/3542297#3542297&quot;&gt;MVC's Front Controller Pattern&lt;/a&gt;. E.g.:</source>
          <target state="translated">Если вы хотите вызвать некоторый Java-код для &lt;strong&gt;управления&lt;/strong&gt; планом выполнения и / или местом назначения запроса и ответа, то реализуйте &lt;a href=&quot;https://stackoverflow.com/tags/servlets/info&quot;&gt;сервлет в&lt;/a&gt; соответствии с &lt;a href=&quot;https://stackoverflow.com/questions/3541077/design-patterns-web-based-applications/3542297#3542297&quot;&gt;шаблоном фронт-контроллера MVC&lt;/a&gt; . Например:</target>
        </trans-unit>
        <trans-unit id="08ca864cd2ae393a77889ac801c82ca2a1e4cefd" translate="yes" xml:space="preserve">
          <source>If you want to invoke some Java code to &lt;strong&gt;postprocess&lt;/strong&gt; a request, e.g. processing a form submit, then implement a &lt;a href=&quot;https://stackoverflow.com/tags/servlets/info&quot;&gt;servlet&lt;/a&gt; and write code accordingly in &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html#doPost%28javax.servlet.http.HttpServletRequest,%20javax.servlet.http.HttpServletResponse%29&quot;&gt;&lt;code&gt;doPost()&lt;/code&gt;&lt;/a&gt; method. E.g.:</source>
          <target state="translated">Если вы хотите вызвать некоторый Java-код для &lt;strong&gt;постобработки&lt;/strong&gt; запроса, например, обработки отправки формы, то реализуйте &lt;a href=&quot;https://stackoverflow.com/tags/servlets/info&quot;&gt;сервлет&lt;/a&gt; и напишите код соответствующим образом в методе &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html#doPost%28javax.servlet.http.HttpServletRequest,%20javax.servlet.http.HttpServletResponse%29&quot;&gt; &lt;code&gt;doPost()&lt;/code&gt; &lt;/a&gt; . Например:</target>
        </trans-unit>
        <trans-unit id="85a5ccb98f8d25732291548a6b4d3d4950886db9" translate="yes" xml:space="preserve">
          <source>If you want to invoke some Java code to &lt;strong&gt;preprocess&lt;/strong&gt; a request, e.g. preloading some list from a database to display in some table, if necessary based on some query parameters, then implement a &lt;a href=&quot;https://stackoverflow.com/tags/servlets/info&quot;&gt;servlet&lt;/a&gt; and write code accordingly in &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html#doGet%28javax.servlet.http.HttpServletRequest,%20javax.servlet.http.HttpServletResponse%29&quot;&gt;&lt;code&gt;doGet()&lt;/code&gt;&lt;/a&gt; method. E.g.:</source>
          <target state="translated">Если вы хотите вызвать некоторый Java-код для &lt;strong&gt;предварительной обработки&lt;/strong&gt; запроса, например, предварительно загрузить некоторый список из базы данных для отображения в некоторой таблице, при необходимости, основываясь на некоторых параметрах запроса, то реализуйте &lt;a href=&quot;https://stackoverflow.com/tags/servlets/info&quot;&gt;сервлет&lt;/a&gt; и напишите код соответствующим образом в методе &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html#doGet%28javax.servlet.http.HttpServletRequest,%20javax.servlet.http.HttpServletResponse%29&quot;&gt; &lt;code&gt;doGet()&lt;/code&gt; &lt;/a&gt; . Например:</target>
        </trans-unit>
        <trans-unit id="7d5c2d5e3acf61c6e46e0c5bb9dbe3b694f7d5cc" translate="yes" xml:space="preserve">
          <source>If you want to invoke the &lt;strong&gt;same&lt;/strong&gt; Java code on &lt;em&gt;every&lt;/em&gt; request, less-or-more regardless of the requested page, e.g. checking if a user is logged in, then implement a &lt;a href=&quot;https://stackoverflow.com/tags/servlet-filters/info&quot;&gt;filter&lt;/a&gt; and write code accordingly in &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/servlet/Filter.html#doFilter%28javax.servlet.ServletRequest,%20javax.servlet.ServletResponse,%20javax.servlet.FilterChain%29&quot;&gt;&lt;code&gt;doFilter()&lt;/code&gt;&lt;/a&gt; method. E.g.:</source>
          <target state="translated">Если вы хотите вызывать один и тот &lt;strong&gt;же&lt;/strong&gt; код Java при &lt;em&gt;каждом&lt;/em&gt; запросе, в меньшей или большей степени независимо от запрашиваемой страницы, например, проверяя, вошел ли пользователь в систему, тогда реализуйте &lt;a href=&quot;https://stackoverflow.com/tags/servlet-filters/info&quot;&gt;фильтр&lt;/a&gt; и, соответственно, пишите код в &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/servlet/Filter.html#doFilter%28javax.servlet.ServletRequest,%20javax.servlet.ServletResponse,%20javax.servlet.FilterChain%29&quot;&gt; &lt;code&gt;doFilter()&lt;/code&gt; &lt;/a&gt; . Например:</target>
        </trans-unit>
        <trans-unit id="ee11dba0fd5ce2964e4951a57cf7350d6fac840f" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;https://stackoverflow.com/tags/facelets/info&quot;&gt;Facelets&lt;/a&gt;, the successor of JSP, which is part of the Java EE provided MVC framework &lt;a href=&quot;https://stackoverflow.com/tags/jsf/info&quot;&gt;JSF&lt;/a&gt;, it is already &lt;strong&gt;not&lt;/strong&gt; possible to use &lt;em&gt;scriptlets&lt;/em&gt;. This way you're automatically forced to do things &quot;the right way&quot;.</source>
          <target state="translated">В &lt;a href=&quot;https://stackoverflow.com/tags/facelets/info&quot;&gt;Facelets&lt;/a&gt; , преемнике JSP, который является частью Java EE, предоставленной инфраструктурой MVC &lt;a href=&quot;https://stackoverflow.com/tags/jsf/info&quot;&gt;JSF&lt;/a&gt; , уже невозможно использовать &lt;em&gt;скриптлеты&lt;/em&gt; . Таким образом, вы автоматически будете вынуждены делать все &amp;laquo;правильно&amp;raquo;.</target>
        </trans-unit>
        <trans-unit id="864be0601ecfce0a46e54862f1e8a20535f2a995" translate="yes" xml:space="preserve">
          <source>In my case I do my systems handling the view with Angular and any data needed is brought from the server using rest services.</source>
          <target state="translated">В моем случае я делаю мои системы,обрабатывающие представление с помощью Angular,и все необходимые данные заносятся с сервера с помощью сервисов rest.</target>
        </trans-unit>
        <trans-unit id="c8be22759def612993661b4f9fd9ea685f8f326b" translate="yes" xml:space="preserve">
          <source>In the MVC Architectural pattern, JSPs represent the View layer. Embedding java code in JSPs is considered a bad practice.
You can use &lt;a href=&quot;http://www.oracle.com/technetwork/java/index-jsp-135995.html&quot;&gt;JSTL&lt;/a&gt;, &lt;a href=&quot;http://freemarker.sourceforge.net/&quot;&gt;freeMarker&lt;/a&gt;, &lt;a href=&quot;http://velocity.apache.org/&quot;&gt;velocity&lt;/a&gt; with JSP as &quot;template engine&quot;.
The data provider to those tags &lt;strong&gt;depends on frameworks&lt;/strong&gt; that you are dealing with. &lt;code&gt;Struts 2&lt;/code&gt; and &lt;code&gt;webwork&lt;/code&gt; as an implementation for MVC Pattern uses &lt;a href=&quot;http://struts.apache.org/2.0.11.1/docs/ognl.html&quot;&gt;OGNL&lt;/a&gt; &quot;very interesting technique to expose Beans Properties to JSP &quot;.</source>
          <target state="translated">В архитектурном шаблоне MVC JSP представляют слой View. Встраивание кода Java в JSP считается плохой практикой. Вы можете использовать &lt;a href=&quot;http://www.oracle.com/technetwork/java/index-jsp-135995.html&quot;&gt;JSTL&lt;/a&gt; , &lt;a href=&quot;http://freemarker.sourceforge.net/&quot;&gt;freeMarker&lt;/a&gt; , &lt;a href=&quot;http://velocity.apache.org/&quot;&gt;скорость&lt;/a&gt; с JSP в качестве &amp;laquo;движка шаблонов&amp;raquo;. Поставщик данных для этих тегов &lt;strong&gt;зависит от структур, с&lt;/strong&gt; которыми вы имеете дело. &lt;code&gt;Struts 2&lt;/code&gt; и &lt;code&gt;webwork&lt;/code&gt; в качестве реализации для MVC Pattern используют &lt;a href=&quot;http://struts.apache.org/2.0.11.1/docs/ognl.html&quot;&gt;OGNL&lt;/a&gt; &amp;laquo;очень интересную технику для представления свойств Beans в JSP&amp;raquo;.</target>
        </trans-unit>
        <trans-unit id="3379f7440ecf03bd6f4294973b1344867b834b45" translate="yes" xml:space="preserve">
          <source>In the spirit of adopting the model-view-controller (MVC) design pattern to reduce coupling between the presentation tier from the business logic, &lt;strong&gt;JSP scriptlets should not be used&lt;/strong&gt; for writing business logic. Rather, JSP scriptlets are used if necessary to transform data (also called &quot;value objects&quot;) returned from processing the client's requests into a proper client-ready format. Even then, this would be better done with a front controller servlet or a custom tag.</source>
          <target state="translated">В духе принятия шаблона проектирования модель-представление-контроллер (MVC) для уменьшения связи между уровнем представления и бизнес-логикой &lt;strong&gt;сценарии JSP не следует использовать&lt;/strong&gt; для написания бизнес-логики. Скорее, JSP-скриптлеты используются при необходимости для преобразования данных (также называемых &amp;laquo;объектами значений&amp;raquo;), возвращаемых после обработки клиентских запросов, в надлежащий формат, готовый для клиента. Даже тогда это лучше сделать с помощью сервлета фронт-контроллера или пользовательского тега.</target>
        </trans-unit>
        <trans-unit id="5844156b0df20492d28065d5072469ba59148486" translate="yes" xml:space="preserve">
          <source>Instead, you can use:</source>
          <target state="translated">Вместо этого ты можешь использовать:</target>
        </trans-unit>
        <trans-unit id="9c48d9289fc64581e90dcccfc40ce37a3369ae26" translate="yes" xml:space="preserve">
          <source>JSP 2.0 has a feature called &lt;strong&gt;&quot;Tag Files&quot;&lt;/strong&gt;, you can write tags without external &lt;code&gt;java&lt;/code&gt; code and &lt;code&gt;tld&lt;/code&gt;. You need to create a &lt;code&gt;.tag&lt;/code&gt; file and put it in &lt;code&gt;WEB-INF\tags&lt;/code&gt; you can even create a directory structure to package your tags.</source>
          <target state="translated">JSP 2.0 имеет функцию под названием &lt;strong&gt;&amp;laquo;Файлы тегов&amp;raquo;&lt;/strong&gt; , вы можете писать теги без внешнего кода &lt;code&gt;java&lt;/code&gt; и &lt;code&gt;tld&lt;/code&gt; . Вам нужно создать файл &lt;code&gt;.tag&lt;/code&gt; и поместить его в &lt;code&gt;WEB-INF\tags&lt;/code&gt; чтобы даже создать структуру каталогов для упаковки тегов.</target>
        </trans-unit>
        <trans-unit id="9b22fe878901f07cf06aca41d7e95d932c6cc98d" translate="yes" xml:space="preserve">
          <source>JSTL tags</source>
          <target state="translated">JSTL-теги</target>
        </trans-unit>
        <trans-unit id="a2be0f0a69d1324f0a28e325f93637011a05b9ab" translate="yes" xml:space="preserve">
          <source>JSTL works with request attributes - they are most often set in the request by a Servlet, which &lt;em&gt;forwards&lt;/em&gt; to the JSP.</source>
          <target state="translated">JSTL работает с атрибутами запроса - они чаще всего устанавливаются в запросе сервлетом, который &lt;em&gt;перенаправляет&lt;/em&gt; в JSP.</target>
        </trans-unit>
        <trans-unit id="a696556e75e9ef96d0226d1c056f84b37d8f28c0" translate="yes" xml:space="preserve">
          <source>Just use the JSTL tag and EL expression.</source>
          <target state="translated">Просто используйте тег JSTL и выражение EL.</target>
        </trans-unit>
        <trans-unit id="b61ea7debe4e081d0507e4a1d7a1698d231f004b" translate="yes" xml:space="preserve">
          <source>Look at Wicket.</source>
          <target state="translated">Посмотри на Уикета.</target>
        </trans-unit>
        <trans-unit id="9c9a06a4a3b3f8ba0b6e04a8601d038b496c2c91" translate="yes" xml:space="preserve">
          <source>Make your values and parameters inside your servlet classes</source>
          <target state="translated">Сделайте свои значения и параметры внутри классов сервлетов.</target>
        </trans-unit>
        <trans-unit id="6b1ec125525f6f889b55a94c4be3db9e02183779" translate="yes" xml:space="preserve">
          <source>No matter how much you try to avoid, when you work with other developers, some of them will still prefer scriptlet and then insert the evil code into the project. Therefore, setting up the project at the first sign is very important if you really want to reduce the scriptlet code. There are several techniques to get over this (including several frameworks that other mentioned). However, if you prefer the pure JSP way, then use the JSTL tag file. The nice thing about this is you can also set up master pages for your project, so the other pages can inherit the master pages</source>
          <target state="translated">Как бы вы ни старались избежать этого,работая с другими разработчиками,некоторые из них все равно предпочтут скриплет,а затем вставляют злой код в проект.Поэтому настройка проекта на первый признак очень важна,если вы действительно хотите сократить код скриплета.Есть несколько методик,чтобы справиться с этим (в том числе несколько фреймворков,о которых упоминали другие).Однако,если вы предпочитаете чистый способ JSP,то используйте JSTL-файл тегов.Приятно то,что вы также можете настроить главные страницы для вашего проекта,так что другие страницы могут наследовать главные страницы.</target>
        </trans-unit>
        <trans-unit id="7496f24aecc09eb1dcd7346285873e798f1449a9" translate="yes" xml:space="preserve">
          <source>Note that EL is &lt;strong&gt;EviL&lt;/strong&gt; (runtime exceptions, refactoring)</source>
          <target state="translated">Обратите внимание, что EL - это &lt;strong&gt;EviL&lt;/strong&gt; (исключения времени выполнения, рефакторинг)</target>
        </trans-unit>
        <trans-unit id="6f49536a3746430c8f949ea7a5a7a57bcc58bbc4" translate="yes" xml:space="preserve">
          <source>Note that the XSS sensitivity is in no way specifically related to Java/JSP/JSTL/EL/whatever, this problem needs to be taken into account in &lt;strong&gt;every&lt;/strong&gt; web application you develop. The problem of &lt;em&gt;scriptlets&lt;/em&gt; is that it provides no way of builtin preventions, at least not using the standard Java API. JSP's successor Facelets has already implicit HTML escaping, so you don't need to worry about XSS holes in Facelets.</source>
          <target state="translated">Обратите внимание, что чувствительность XSS никоим образом не связана конкретно с Java / JSP / JSTL / EL / чем бы то ни было, эту проблему необходимо учитывать в &lt;strong&gt;каждом&lt;/strong&gt; разрабатываемом веб-приложении. Проблема &lt;em&gt;скриплетов в&lt;/em&gt; том, что они не предоставляют встроенных предупреждений, по крайней мере, не используя стандартный Java API. Преемник JSP Facelets уже неявно экранировал HTML, поэтому вам не нужно беспокоиться о дырах XSS в Facelets.</target>
        </trans-unit>
        <trans-unit id="b753a681b0a58549d95c372d985f246cfe1be0e5" translate="yes" xml:space="preserve">
          <source>Nothing of that is used anymore my friend, my advice is to decouple the view(css, html, javascript, etc) from the server.</source>
          <target state="translated">Ничего из этого больше не используется моим другом,мой совет-отделить вид(css,html,javascript и т.д.)от сервера.</target>
        </trans-unit>
        <trans-unit id="a9423ba2ba1eee5498d3d54ff884a89cb29e92d1" translate="yes" xml:space="preserve">
          <source>Of course if you want, you can hack yourself into the depths of the code and inject JS and enrich your HTML page, but really you can avoid it if you want, and the result will be good as it was written in any other frameworks. I say worths a try, and the basic GWT is well-documented.</source>
          <target state="translated">Конечно,если вы хотите,вы можете взломать себя в глубину кода и вставить JS и обогатить вашу HTML страницу,но на самом деле вы можете избежать этого,если хотите,и результат будет хорошим,как это было написано в любом другом фреймворке.Я говорю,стоит попробовать,и базовый GWT хорошо документирован.</target>
        </trans-unit>
        <trans-unit id="0d7095f0f8c2e78814464e734575ef8202541d71" translate="yes" xml:space="preserve">
          <source>On this mater page, I created a fragment called &quot;title&quot;, so that in the child page, I could insert more codes into this place of the master page. Also, the tag &lt;code&gt;&amp;lt;jsp:doBody/&amp;gt;&lt;/code&gt; will be replaced by the content of the child page</source>
          <target state="translated">На этой основной странице я создал фрагмент с названием &amp;laquo;title&amp;raquo;, чтобы на дочерней странице я мог вставить больше кодов в это место главной страницы. Также тег &lt;code&gt;&amp;lt;jsp:doBody/&amp;gt;&lt;/code&gt; будет заменен содержимым дочерней страницы.</target>
        </trans-unit>
        <trans-unit id="4c857f865a5b7dda907f07a7e5d9a5393957617c" translate="yes" xml:space="preserve">
          <source>Or just adopt an MVC framework like &lt;a href=&quot;https://stackoverflow.com/tags/jsf/info&quot;&gt;JSF&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/tags/spring-mvc/info&quot;&gt;Spring MVC&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/tags/wicket/info&quot;&gt;Wicket&lt;/a&gt;, etc so that you end up with just a JSP/Facelets page and a JavaBean class without the need for a custom servlet.</source>
          <target state="translated">Или просто используйте MVC-фреймворк, такой как &lt;a href=&quot;https://stackoverflow.com/tags/jsf/info&quot;&gt;JSF&lt;/a&gt; , &lt;a href=&quot;https://stackoverflow.com/tags/spring-mvc/info&quot;&gt;Spring MVC&lt;/a&gt; , &lt;a href=&quot;https://stackoverflow.com/tags/wicket/info&quot;&gt;Wicket&lt;/a&gt; и т. Д., Чтобы в итоге вы получили только страницу JSP / Facelets и класс JavaBean без необходимости использования собственного сервлета.</target>
        </trans-unit>
        <trans-unit id="99c7ca3264a1d4cbc0d2abe683d40da7282d8bf4" translate="yes" xml:space="preserve">
          <source>Please refer to:</source>
          <target state="translated">Пожалуйста,обратитесь к:</target>
        </trans-unit>
        <trans-unit id="371a87eafb4de078ff674d69a5a89c186532eb49" translate="yes" xml:space="preserve">
          <source>See also:</source>
          <target state="translated">См.также:</target>
        </trans-unit>
        <trans-unit id="cdb70868019074559ad053d547795310d3f219bf" translate="yes" xml:space="preserve">
          <source>So I consider as procrastination the activity of defining &quot;layers&quot; or redundant data structures either early in the project or when not specifically required. &amp;nbsp;</source>
          <target state="translated">Таким образом, я рассматриваю в качестве промедления деятельность по определению &amp;laquo;слоев&amp;raquo; или избыточных структур данных либо в начале проекта, либо когда это не требуется специально.</target>
        </trans-unit>
        <trans-unit id="6da13addb000b67d42a6d66391713819e634149f" translate="yes" xml:space="preserve">
          <source>Source</source>
          <target state="translated">Source</target>
        </trans-unit>
        <trans-unit id="fc9f10111119b6c9e526812b2a1905fd175f558d" translate="yes" xml:space="preserve">
          <source>Start server and load the bodyContent.jsp in browser</source>
          <target state="translated">Запустите сервер и загрузите bodyContent.jsp в браузере.</target>
        </trans-unit>
        <trans-unit id="2b8e6dd7bd02bbe0f0a2cd944adb7c18a7b97db2" translate="yes" xml:space="preserve">
          <source>Sure, replace &lt;code&gt;&amp;lt;%! counter++; %&amp;gt;&lt;/code&gt; by an event producer-consumer architecture, where the business layer is notified about the need to increment the counter, it reacts accordingly, and notifies the presenters so that they update the views. A number of database transactions are involved, since in future we will need to know the new and old value of the counter, who has incremented it and with what purpose in mind. Obviously serialization is involved, since the layers are entirely decoupled. You will be able to increment your counter over RMI, IIOP, SOAP. But only HTML is required, which you don't implement, since it is such a mundane case. Your new goal is to reach 250 increments a second on your new shiny E7, 64GB RAM server.</source>
          <target state="translated">Конечно, замените &lt;code&gt;&amp;lt;%! counter++; %&amp;gt;&lt;/code&gt; Счетчик ++; %&amp;gt; с помощью архитектуры производителя-потребителя событий, где бизнес-уровень уведомляется о необходимости увеличения счетчика, он соответствующим образом реагирует и уведомляет докладчиков, чтобы они обновили представления. В этом участвует ряд транзакций базы данных, поскольку в будущем нам нужно будет знать новое и старое значение счетчика, кто его увеличил и с какой целью. Очевидно, что это связано с сериализацией, поскольку слои полностью отделены друг от друга. Вы сможете увеличить свой счетчик по RMI, IIOP, SOAP. Но требуется только HTML, который вы не реализуете, поскольку это такой обыденный случай. Ваша новая цель - достичь 250 приращений в секунду на вашем новом блестящем сервере E7, 64 ГБ ОЗУ.</target>
        </trans-unit>
        <trans-unit id="01f6458927b598fd06f1c9b9b3871a4a81966830" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;${param.foo}&lt;/code&gt; displays the outcome of &lt;code&gt;request.getParameter(&quot;foo&quot;)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;${param.foo}&lt;/code&gt; отображает результат &lt;code&gt;request.getParameter(&quot;foo&quot;)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a9b0f7ac06bef52c90743fd20479795225d799b5" translate="yes" xml:space="preserve">
          <source>The code looks like ordinary HTML (or XHTML) plus some special attributes in an XML namespace; it can be viewed with a browser and safely be tweaked by a designer.
There is support for macros and for i18n as well:</source>
          <target state="translated">Код выглядит как обычный HTML (или XHTML)плюс некоторые специальные атрибуты в пространстве имен XML;его можно просматривать в браузере и безопасно подправлять дизайнером.Поддерживаются макросы и i18n:</target>
        </trans-unit>
        <trans-unit id="8beffd5c99ba40a7c520fac4a0fe7cf1204fe64a" translate="yes" xml:space="preserve">
          <source>The good thing about this approach is that your code is also HTML like
  code!</source>
          <target state="translated">Хорошая вещь в этом подходе в том,что ваш код также HTML как код!</target>
        </trans-unit>
        <trans-unit id="5b8afa3aa8081cc0ec560cc7ed29305aed1be3f6" translate="yes" xml:space="preserve">
          <source>The major disadvantages of &lt;em&gt;scriptlets&lt;/em&gt; are:</source>
          <target state="translated">Основными недостатками &lt;em&gt;скриплетов&lt;/em&gt; являются:</target>
        </trans-unit>
        <trans-unit id="6e8eeb645a8a0b3cea3e70c5c9d1a8b1815529b1" translate="yes" xml:space="preserve">
          <source>The samples are very simple but you can do lots of complicated tasks here. Please consider you can use other tags (eg: &lt;code&gt;JSTL&lt;/code&gt; which has controlling tags like &lt;code&gt;if/forEcah/chosen&lt;/code&gt; text manipulation like &lt;code&gt;format/contains/uppercase&lt;/code&gt; or even SQL tags &lt;code&gt;select/update&lt;/code&gt;), pass all kind parameters, for example &lt;code&gt;Hashmap&lt;/code&gt;, access &lt;code&gt;session&lt;/code&gt;, &lt;code&gt;request&lt;/code&gt;, ... in your tag file too.</source>
          <target state="translated">Примеры очень просты, но вы можете выполнить здесь много сложных задач. Учтите, что вы можете использовать другие теги (например: &lt;code&gt;JSTL&lt;/code&gt; , который имеет управляющие теги, такие как &lt;code&gt;if/forEcah/chosen&lt;/code&gt; текст, например, &lt;code&gt;format/contains/uppercase&lt;/code&gt; или даже &lt;code&gt;select/update&lt;/code&gt; тегов SQL), передавать все виды параметров, например, &lt;code&gt;Hashmap&lt;/code&gt; , &lt;code&gt;session&lt;/code&gt; доступа, &lt;code&gt;request&lt;/code&gt; , ... в вашем файле тега тоже.</target>
        </trans-unit>
        <trans-unit id="cadf4f01d22ba51a03cf9a23cd0debeb245888e3" translate="yes" xml:space="preserve">
          <source>The use of &lt;em&gt;scriptlets&lt;/em&gt; (those &lt;code&gt;&amp;lt;% %&amp;gt;&lt;/code&gt; things) in &lt;a href=&quot;https://stackoverflow.com/tags/jsp/info&quot;&gt;JSP&lt;/a&gt; is indeed highly discouraged since the birth of &lt;em&gt;taglibs&lt;/em&gt; (like &lt;a href=&quot;https://stackoverflow.com/tags/jstl/info&quot;&gt;JSTL&lt;/a&gt;) and &lt;a href=&quot;https://stackoverflow.com/tags/el/info&quot;&gt;EL&lt;/a&gt; (&lt;a href=&quot;https://stackoverflow.com/tags/el/info&quot;&gt;Expression Language&lt;/a&gt;, those &lt;code&gt;${}&lt;/code&gt; things) way back in 2001.</source>
          <target state="translated">Использование &lt;em&gt;скриптлетов&lt;/em&gt; (эти &lt;code&gt;&amp;lt;% %&amp;gt;&lt;/code&gt; &lt;em&gt;%%&lt;/em&gt; &amp;gt; вещи) в &lt;a href=&quot;https://stackoverflow.com/tags/jsp/info&quot;&gt;JSP&lt;/a&gt; действительно крайне не рекомендуется с момента рождения &lt;em&gt;taglibs&lt;/em&gt; (например, &lt;a href=&quot;https://stackoverflow.com/tags/jstl/info&quot;&gt;JSTL&lt;/a&gt; ) и &lt;a href=&quot;https://stackoverflow.com/tags/el/info&quot;&gt;EL&lt;/a&gt; ( &lt;a href=&quot;https://stackoverflow.com/tags/el/info&quot;&gt;Expression Language&lt;/a&gt; , эти &lt;code&gt;${}&lt;/code&gt; вещи) еще в 2001 году.</target>
        </trans-unit>
        <trans-unit id="218a7074a3a3abead1ad3409aeb72a9cfe4b36d1" translate="yes" xml:space="preserve">
          <source>There are also component-based frameworks such as &lt;strong&gt;Wicket&lt;/strong&gt; that generate a lot of the HTML for you.  The tags that end up in the HTML are extremely basic and there is virtually no logic that gets mixed in.  The result is almost empty-like HTML pages with typical HTML elements.  The downside is that there are a lot of components in the &lt;strong&gt;Wicket&lt;/strong&gt; API to learn and some things can be difficult to achieve under those constraints.</source>
          <target state="translated">Существуют также основанные на компонентах фреймворки, такие как &lt;strong&gt;Wicket,&lt;/strong&gt; которые генерируют много HTML для вас. Тэги, которые заканчиваются в HTML, являются чрезвычайно простыми, и в них практически отсутствует смешанная логика. В результате получаются почти пустые HTML-страницы с типичными HTML-элементами. Недостатком является то, что в &lt;strong&gt;Wicket&lt;/strong&gt; API есть много компонентов для изучения, и некоторые вещи могут быть труднодостижимы при этих ограничениях.</target>
        </trans-unit>
        <trans-unit id="abcbc7b89ae11ccfa31d98b70ef4451cfb919707" translate="yes" xml:space="preserve">
          <source>There are also other options such as using a templating engine such as Velocity, Freemarker, Thymeleaf etc. But using plain JSP with EL and JSTL serves my purpose most of the time and it also seems the simplest for a beginner.</source>
          <target state="translated">Существуют и другие опции,такие как использование шаблонизатора,например,Velocity,Freemarker,Thymeleaf и т.п.Но использование простого JSP с EL и JSTL большую часть времени служит моей цели,и это также кажется самым простым для новичка.</target>
        </trans-unit>
        <trans-unit id="c1ff3b8432d55d1428f36863b4e57b392badd9db" translate="yes" xml:space="preserve">
          <source>This must be added to the web application's web.xml</source>
          <target state="translated">Это должно быть добавлено в web-приложение web.xml.</target>
        </trans-unit>
        <trans-unit id="6024548a077642e1968e58baff37a727cc4dd31b" translate="yes" xml:space="preserve">
          <source>This way dealing with different result page destinations is easier: redisplaying the form with validation errors in case of an error (in this particular example you can redisplay it using &lt;code&gt;${message}&lt;/code&gt; in &lt;a href=&quot;https://stackoverflow.com/tags/el/info&quot;&gt;EL&lt;/a&gt;), or just taking to the desired target page in case of success.</source>
          <target state="translated">Это облегчает работу с различными адресами на странице результатов: повторное отображение формы с ошибками проверки в случае ошибки (в этом конкретном примере вы можете повторно отобразить ее, используя &lt;code&gt;${message}&lt;/code&gt; в &lt;a href=&quot;https://stackoverflow.com/tags/el/info&quot;&gt;EL&lt;/a&gt; ), или просто переход на нужную целевую страницу в случае успеха.</target>
        </trans-unit>
        <trans-unit id="5c2f2b58b23cb864bd138ae1ceef470b24b2359f" translate="yes" xml:space="preserve">
          <source>This way dealing with exceptions is easier. The DB is not accessed in the midst of JSP rendering, but far before the JSP is been displayed. You still have the possibility to change the response whenever the DB access throws an exception. In the above example, the default error 500 page will be displayed which you can anyway customize by an &lt;code&gt;&amp;lt;error-page&amp;gt;&lt;/code&gt; in &lt;code&gt;web.xml&lt;/code&gt;.</source>
          <target state="translated">Таким образом, иметь дело с исключениями проще. К БД не обращаются во время рендеринга JSP, но задолго до того, как JSP был отображен. У вас все еще есть возможность изменить ответ всякий раз, когда доступ к БД вызывает исключение. В приведенном выше примере будет отображена страница ошибки 500 по умолчанию, которую вы в любом случае можете настроить с помощью &lt;code&gt;&amp;lt;error-page&amp;gt;&lt;/code&gt; в &lt;code&gt;web.xml&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3d73eb9cadb674305772ade110550c254cf89564" translate="yes" xml:space="preserve">
          <source>Use &lt;strong&gt;&lt;code&gt;JSTL Tag libraries&lt;/code&gt;&lt;/strong&gt; in JSP, that will work perfect.</source>
          <target state="translated">Используйте &lt;strong&gt; &lt;code&gt;JSTL Tag libraries&lt;/code&gt; &lt;/strong&gt; в JSP, которые будут отлично работать.</target>
        </trans-unit>
        <trans-unit id="972fb805d526ef28466dd6b7247afcf3429e9d40" translate="yes" xml:space="preserve">
          <source>Use JSP Tags</source>
          <target state="translated">Использовать метки JSP</target>
        </trans-unit>
        <trans-unit id="efe4cc8e2edf71091f863266b5fca3301038b019" translate="yes" xml:space="preserve">
          <source>Use MVC architecture for web application</source>
          <target state="translated">Использовать архитектуру MVC для веб-приложений</target>
        </trans-unit>
        <trans-unit id="c0c4ea117b4cdb87ebd6313e300e1a15bc1a004d" translate="yes" xml:space="preserve">
          <source>Use backbone , angular like javascript framework for UI design
and fetch the data using rest api. This will remove the java dependency from UI completely.</source>
          <target state="translated">Используйте базовые,угловые,как javascript фреймворк для дизайна пользовательского интерфейса и получайте данные,используя остальные api.Это полностью удалит java-зависимость от пользовательского интерфейса.</target>
        </trans-unit>
        <trans-unit id="377f415dafbf7162b7e2c41493428f47026cb16c" translate="yes" xml:space="preserve">
          <source>Use it</source>
          <target state="translated">Использовать его</target>
        </trans-unit>
        <trans-unit id="b3812e1a927a9030d7df61a9f7b76633477e4d2c" translate="yes" xml:space="preserve">
          <source>Use it like</source>
          <target state="translated">Использовать как</target>
        </trans-unit>
        <trans-unit id="6d7ad08fbab98413abb910036a07cbbf3706c8d5" translate="yes" xml:space="preserve">
          <source>Using Scriptlets is a very old way and Not recommended. If you want directly output something in your JSP pages just use &lt;strong&gt;Expression Language(EL)&lt;/strong&gt;  along with &lt;strong&gt;JSTL&lt;/strong&gt; .</source>
          <target state="translated">Использование Scriptlets является очень старым способом и не рекомендуется. Если вы хотите напрямую что-то выводить на своих страницах JSP, просто используйте &lt;strong&gt;язык выражений (EL)&lt;/strong&gt; вместе с &lt;strong&gt;JSTL&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="d2677389ab068b68879414df724ecfabd8859f86" translate="yes" xml:space="preserve">
          <source>Using scriptlets in JSPs is not a good practice.</source>
          <target state="translated">Использование скриплетов в JSP не является хорошей практикой.</target>
        </trans-unit>
        <trans-unit id="baf3fd0379691440bf2b3e4cbf92cad964713892" translate="yes" xml:space="preserve">
          <source>What's the difference between JSP, Servlet and JSF?</source>
          <target state="translated">Какая разница между JSP,Сервлет и JSF?</target>
        </trans-unit>
        <trans-unit id="17b74992560cf4122ca5285c428807fb001749e8" translate="yes" xml:space="preserve">
          <source>When mapped on an appropriate &lt;code&gt;&amp;lt;url-pattern&amp;gt;&lt;/code&gt; covering the JSP pages of interest, then you don't need to copypaste the same piece of code overall JSP pages.</source>
          <target state="translated">При отображении на соответствующий &lt;code&gt;&amp;lt;url-pattern&amp;gt;&lt;/code&gt; охватывающий интересующие JSP-страницы, вам не нужно копировать и вставлять один и тот же фрагмент кода в общие JSP-страницы.</target>
        </trans-unit>
        <trans-unit id="01de0b031979bcf7bb834c121a66d1089532c613" translate="yes" xml:space="preserve">
          <source>Where possible, &lt;strong&gt;avoid JSP scriptlets&lt;/strong&gt; whenever tag libraries provide equivalent functionality. This makes pages easier to read and maintain, helps to separate business logic from presentation logic, and will make your pages easier to evolve into JSP 2.0-style pages (JSP 2.0 Specification supports but de-emphasizes the use of scriptlets).</source>
          <target state="translated">По возможности &lt;strong&gt;избегайте JSP-скриптлетов,&lt;/strong&gt; когда библиотеки тегов предоставляют эквивалентную функциональность. Это облегчает чтение и обслуживание страниц, помогает отделить бизнес-логику от логики представления и облегчает превращение ваших страниц в страницы в стиле JSP 2.0 (спецификация JSP 2.0 поддерживает, но не подчеркивает использование скриптлетов).</target>
        </trans-unit>
        <trans-unit id="01f59bf1a510897a780d5b0160084a576e832196" translate="yes" xml:space="preserve">
          <source>Wicket is also an alternative which completely separates java from html, so a designer and programmer can work together and on different sets of code with little understanding of each other.</source>
          <target state="translated">Wicket также является альтернативой,которая полностью отделяет java от html,так что дизайнер и программист могут работать вместе и над различными наборами кода,мало понимая друг друга.</target>
        </trans-unit>
        <trans-unit id="b75de34560a918f4ac6c5fab856eab492b0b22c7" translate="yes" xml:space="preserve">
          <source>Wicket may be evil too (performance, toilsome for small apps or simple view tier)</source>
          <target state="translated">Калитка тоже может быть злой (производительность,кропотливая для маленьких приложений или простой уровень просмотра).</target>
        </trans-unit>
        <trans-unit id="aab83ba5ea14f383f9f61cd2b8c7c97740eddee3" translate="yes" xml:space="preserve">
          <source>With XML-style tags which fit nicely among all that HTML, the code is better readable (and thus better maintainable) than a bunch of scriptlets with various opening and closing braces (&lt;em&gt;&quot;Where the heck does this closing brace belong to?&quot;&lt;/em&gt;). An easy aid is to configure your web application to throw an exception whenever &lt;em&gt;scriptlets&lt;/em&gt; are still been used by adding the following piece to &lt;code&gt;web.xml&lt;/code&gt;:</source>
          <target state="translated">С тегами в стиле XML, которые хорошо вписываются в этот HTML, код лучше читается (и, следовательно, лучше поддерживается), чем набор скриплетов с различными открывающими и закрывающими скобками ( &lt;em&gt;&amp;laquo;Куда, черт возьми, относится эта закрывающая скобка?&amp;raquo;&lt;/em&gt; ) Легкая помощь состоит в том, чтобы настроить ваше веб-приложение на выдачу исключения, когда &lt;em&gt;скриптлеты&lt;/em&gt; все еще используются, добавив следующий фрагмент в &lt;code&gt;web.xml&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="4c2bf52d41e06e8a6a1ac6943b1e400cec513ec0" translate="yes" xml:space="preserve">
          <source>You can easily call the child.jsp file from your controller. This also works nice with the struts framework</source>
          <target state="translated">Вы можете легко вызвать файл child.jsp с контроллера.Это также хорошо работает с фреймворком Struts</target>
        </trans-unit>
        <trans-unit id="ec25fe25e9b159c96d4f928b8e4b3bb1e43e1359" translate="yes" xml:space="preserve">
          <source>You can use JSTL tags together with EL expressions to avoid intermixing Java and HTML code:</source>
          <target state="translated">Вы можете использовать теги JSTL вместе с выражениями EL,чтобы избежать смешивания Java и HTML кода:</target>
        </trans-unit>
        <trans-unit id="eb8afc4289a7ce63d3c4d9c0cdfed01af3cd38db" translate="yes" xml:space="preserve">
          <source>You can use tab library tags like &lt;strong&gt;JSTL&lt;/strong&gt; in addition to Expression Language (&lt;strong&gt;EL&lt;/strong&gt;). But EL does not work well with JSP. So it's is probably better to drop JSP completely and use &lt;strong&gt;Facelets&lt;/strong&gt;.</source>
          <target state="translated">Вы можете использовать теги библиотеки вкладок, такие как &lt;strong&gt;JSTL,&lt;/strong&gt; в дополнение к языку выражений ( &lt;strong&gt;EL&lt;/strong&gt; ). Но EL плохо работает с JSP. Так что, вероятно, лучше полностью отказаться от JSP и использовать &lt;strong&gt;Facelets&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="48dd74417b4ebc09a65eea14b7b8611e65edcdff" translate="yes" xml:space="preserve">
          <source>You can use tag not only to avoid java but also minimize your HTML codes. I myself try to review HTML codes and build tags a lot as soon as see code duplicates start in my pages.</source>
          <target state="translated">Вы можете использовать теги не только для избежания java,но и для минимизации HTML-кодов.Я сам стараюсь просматривать HTML-коды и много строю теги,как только вижу дубликаты кода,которые начинаются на моих страницах.</target>
        </trans-unit>
        <trans-unit id="6885c7a4e9ed902334d26715dd6b36e91c4fb7ea" translate="yes" xml:space="preserve">
          <source>You raised a good question and although you got good answers, I would suggest that you get rid of JSP. It is outdated technology which eventually will die. Use a modern approach, like template engines. You will have very clear separation of business and presentation layers, and certainly no Java code in templates, so you can generate templates directly from web presentation editing software, in most cases leveraging WYSIWYG.</source>
          <target state="translated">Вы подняли хороший вопрос,и хотя у вас есть хорошие ответы,я бы посоветовал вам избавиться от JSP.Это устаревшая технология,которая в конце концов умрет.Используйте современный подход,как шаблонные двигатели.У вас будет очень четкое разделение бизнес и презентационного слоя,и конечно же никакого Java кода в шаблонах,так что вы можете генерировать шаблоны непосредственно из программного обеспечения для редактирования веб-презентаций,в большинстве случаев используя WYSIWYG.</target>
        </trans-unit>
        <trans-unit id="438273965ed8aa8796321fe5db1f2057f772a67b" translate="yes" xml:space="preserve">
          <source>You should read something about MVC. &lt;a href=&quot;http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/mvc.html&quot;&gt;Spring MVC&lt;/a&gt; &amp;amp; &lt;a href=&quot;http://struts.apache.org/2.1.8.1/index.html&quot;&gt;Struts 2&lt;/a&gt; are the two most common solutions.</source>
          <target state="translated">Вы должны прочитать кое-что о MVC. &lt;a href=&quot;http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/mvc.html&quot;&gt;Spring MVC&lt;/a&gt; &amp;amp; &lt;a href=&quot;http://struts.apache.org/2.1.8.1/index.html&quot;&gt;Struts 2&lt;/a&gt; являются двумя наиболее распространенными решениями.</target>
        </trans-unit>
        <trans-unit id="b8ab5363e1e6302f03570a1b8e0ae9b88cbfdce5" translate="yes" xml:space="preserve">
          <source>a. Standard Tags</source>
          <target state="translated">a.Стандартные метки</target>
        </trans-unit>
        <trans-unit id="04f6e1d2c89d5b0154e152d11433b9186a0b3846" translate="yes" xml:space="preserve">
          <source>b. Custom Tags</source>
          <target state="translated">b.Пользовательские теги</target>
        </trans-unit>
        <trans-unit id="91fe1449aaf03867f86a0b155fcee28ddfd0f9e8" translate="yes" xml:space="preserve">
          <source>compile the following code into WEB-INF\classes\com\java2s</source>
          <target state="translated">скомпилируйте следующий код в WEB-INF\classes\com\java2s.</target>
        </trans-unit>
        <trans-unit id="a3aca3110daeea1fa393016d5451337f69813249" translate="yes" xml:space="preserve">
          <source>create File:java2s.tld in the /WEB-INF/</source>
          <target state="translated">создать File:java2s.tld в WEB-INF.</target>
        </trans-unit>
        <trans-unit id="347e7a992309f255fbabef719461f73688c0b617" translate="yes" xml:space="preserve">
          <source>if you simply want to avoid the drawbacks of Java coding in JSP you can do so even with scriplets. Just follow some discipline to have minimal Java in JSP and almost no calculation and logic in the JSP page.</source>
          <target state="translated">если вы просто хотите избежать недостатков Java-кодирования в JSP,вы можете сделать это даже с помощью скриптов.Просто следуйте некоторой дисциплине,чтобы иметь минимальное количество Java в JSP и почти без вычислений и логики на странице JSP.</target>
        </trans-unit>
        <trans-unit id="5cc12c11e0ce089f9fb529b087b6387795003c7c" translate="yes" xml:space="preserve">
          <source>in order to avoid java code in JSP files java now provides tag libraries like JSTL also java has come up with JSF into which u can write all programming structures in the form of tags</source>
          <target state="translated">чтобы избежать java кода в JSP файлах java теперь предоставляет библиотеки тегов,такие как JSTL.Также java придумал JSF,в который можно записать все программирующие структуры в виде тегов</target>
        </trans-unit>
        <trans-unit id="95d9818e59ca8aa7c7ec1cf5d55885788554dd7a" translate="yes" xml:space="preserve">
          <source>is an old school way of coding and in JSP version 2 there exists a method to avoid Java code in JSP files. Can someone please tell me the alternative JSP 2 lines, and what this technique is called?</source>
          <target state="translated">является старым школьным способом кодирования,и в JSP версии 2 существует метод,позволяющий избежать использования Java-кода в файлах JSP.Может ли кто-нибудь сказать мне,пожалуйста,альтернативу JSP 2 строки,и как этот метод называется?</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
