<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/3177733">
    <body>
      <group id="3177733">
        <trans-unit id="7c55e13b3a5960f2e06f74f020b8ae99bd6171bc" translate="yes" xml:space="preserve">
          <source>(Even if you end up using the java in your JSP code, which I hope not, you can encapsulate that code in a tag)</source>
          <target state="translated">(JSPコードでjavaを使用してしまう場合でも、そうならないことを願っていますが、タグでそのコードをカプセル化することができます)</target>
        </trans-unit>
        <trans-unit id="abecfaae04b845d07cad8db2dacb71965f0897c5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://jstl.java.net/&quot;&gt;JSTL&lt;/a&gt; offers tags for conditionals, loops, sets, gets, etc. For example:</source>
          <target state="translated">&lt;a href=&quot;https://jstl.java.net/&quot;&gt;JSTL&lt;/a&gt;は、条件、ループ、セット、取得などのタグを提供します。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="ff137f765374ad5666aafc75629eb2025b1372d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;t:base&amp;gt;&lt;/code&gt; is used to specify the master page you want to use (which is base.tag at this moment). All the content inside the tag &lt;code&gt;&amp;lt;jsp:body&amp;gt;&lt;/code&gt; here will replace the &lt;code&gt;&amp;lt;jsp:doBody/&amp;gt;&lt;/code&gt; on your master page. Your child page can also include any tag lib and you can use it normally like the other mentioned. However, if you use any scriptlet code here (&lt;code&gt;&amp;lt;%= request.getParameter(&quot;name&quot;) %&amp;gt;&lt;/code&gt; ...) and try to run this page, you will get a &lt;code&gt;JasperException because  Scripting elements ( &amp;amp;lt;%!, &amp;amp;lt;jsp:declaration, &amp;amp;lt;%=, &amp;amp;lt;jsp:expression, &amp;amp;lt;%, &amp;amp;lt;jsp:scriptlet ) are disallowed here&lt;/code&gt;. Therefore, there is no way other people can include the evil code into the jsp file</source>
          <target state="translated">&lt;code&gt;&amp;lt;t:base&amp;gt;&lt;/code&gt; は、使用するマスターページ（現時点ではbase.tag）を指定するために使用されます。 タグ &lt;code&gt;&amp;lt;jsp:body&amp;gt;&lt;/code&gt; 内のすべてのコンテンツは、マスターページの &lt;code&gt;&amp;lt;jsp:doBody/&amp;gt;&lt;/code&gt; を置き換えます。 子ページには任意のタグlibを含めることもでき、通常は他のタグと同じように使用できます。 ただし、ここでスクリプトレットコード（ &lt;code&gt;&amp;lt;%= request.getParameter(&quot;name&quot;) %&amp;gt;&lt;/code&gt; ...）を使用してこのページを実行しようとすると &lt;code&gt;JasperException because Scripting elements ( &amp;amp;lt;%!, &amp;amp;lt;jsp:declaration, &amp;amp;lt;%=, &amp;amp;lt;jsp:expression, &amp;amp;lt;%, &amp;amp;lt;jsp:scriptlet ) are disallowed here&lt;/code&gt; 。 したがって、他の人が悪質なコードをjspファイルに含める方法はありません</target>
        </trans-unit>
        <trans-unit id="242c95b3bd4d1500098c2c644b1eabdcae7d762c" translate="yes" xml:space="preserve">
          <source>&lt;strike&gt;Sun&lt;/strike&gt; Oracle itself also recommends in the &lt;a href=&quot;http://www.oracle.com/technetwork/articles/javase/code-convention-138726.html&quot;&gt;JSP coding conventions&lt;/a&gt; to avoid use of &lt;em&gt;scriptlets&lt;/em&gt; whenever the same functionality is possible by (tag) classes. Here are several cites of relevance:</source>
          <target state="translated">&lt;strike&gt;Sun&lt;/strike&gt; Oracle自体も、 &lt;a href=&quot;http://www.oracle.com/technetwork/articles/javase/code-convention-138726.html&quot;&gt;JSPコーディング規約で&lt;/a&gt; 、（タグ）クラスによって同じ機能が可能である場合は常に&lt;em&gt;スクリプトレットの&lt;/em&gt;使用を避けることを推奨しています。 いくつかの関連する引用がここにあります：</target>
        </trans-unit>
        <trans-unit id="47f6077a2de453659dd80148f677647a78ff3cd4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;How to avoid Java code in JSP files?&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;JSPファイルでJavaコードを回避する方法&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6d2ca64168746e18166ffea7b50fc32ade312a97" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;As a Safeguard: Disable Scriptlets For Good&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;安全対策として：スクリプトレットを永久に無効にする&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="53ccd4bb22efbe7051e3c1b669e4135918583cc1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Calling this page from your controller:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;コントローラからこのページを呼び出す：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="52ce212588f872e8f16ad1c8207593f87ae8c869" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Create a master page called base.tag under your WEB-INF/tags with the following content&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;次のコンテンツを含むWEB-INF / tagsの下にbase.tagというマスターページを作成します。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="133419c9245e3989fa760d65ab99f57c23aa9d14" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Create child page (child.jsp) in your WebContent folder:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;WebContentフォルダーに子ページ（child.jsp）を作成します。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4579c5bafd0c96bf4fe66f646911268bde67d154" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Debuggability:&lt;/strong&gt; if scriptlet throws an exception halfway, all you get is a blank page.</source>
          <target state="translated">&lt;strong&gt;デバッグ可能性：&lt;/strong&gt;スクリプトレットが途中で例外をスローした場合、得られるのは空白ページだけです。</target>
        </trans-unit>
        <trans-unit id="3a6e7652b38b97d5a8c32f449fb30606c438c17f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Facelets&lt;/strong&gt; is the first non JSP page declaration language designed for &lt;strong&gt;JSF (Java Server Faces)&lt;/strong&gt; which provided a simpler and more powerful programming model to JSF developers as compare to JSP. It resolves different issues occurs in JSP for web applications development.</source>
          <target state="translated">&lt;strong&gt;Facelets&lt;/strong&gt;は、 &lt;strong&gt;JSF（Java Server Faces）&lt;/strong&gt;用に設計された最初の非JSPページ宣言言語で、JSP開発者に対して、JSPと比較してよりシンプルで強力なプログラミングモデルを提供します。 Webアプリケーション開発用のJSPで発生するさまざまな問題を解決します。</target>
        </trans-unit>
        <trans-unit id="1e5ef583aedb2fa877df3b22256a022618dc6f86" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;How to replace &lt;em&gt;scriptlets&lt;/em&gt; entirely depends on the sole purpose of the code/logic. More than often this code is to be placed in a fullworthy Java class:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;スクリプトレット&lt;/em&gt;を置き換える方法は、コード/ロジックの唯一の目的によって異なります。&lt;/strong&gt; &lt;strong&gt;多くの場合、このコードは十分に価値のあるJavaクラスに配置されます。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5d05d31648416deb82a36f230d878a6d38196b83" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;If somebody is really against programming in more languages than one&lt;/strong&gt;, I suggest GWT, theoretically you can avoid all the JS and HTML elements, because Google Toolkit transforms all the client and shared code to JS, you won't have problem with them, so you have a webservice without coding in any other languages. Even you can use some default CSS from somewhere as it is given by extensions (smartGWT or Vaadin). You don't need to learn dozens of annotations.</source>
          <target state="translated">&lt;strong&gt;誰かが実際に複数の言語でのプログラミングに反対している場合は&lt;/strong&gt; 、GWTをお勧めします。理論的には、すべてのJS要素とHTML要素を回避できます。GoogleToolkitはすべてのクライアントと共有コードをJSに変換するので、問題はありません。あなたは他の言語でコーディングせずにウェブサービスを持っています。 拡張機能（smartGWTまたはVaadin）によって提供されるため、どこからでもデフォルトのCSSを使用できます。 何十ものアノテーションを学ぶ必要はありません。</target>
        </trans-unit>
        <trans-unit id="3d3ad886a6c5ab3968b4242b8a06f60d6e3bd987" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Learn to customize and write your own tags using JSTL&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;JSTLを使用して独自のタグをカスタマイズおよび作成する方法を学ぶ&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6356f55f28c4b437234bb509c95bcd79233fc2fd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Maintainability:&lt;/strong&gt; per saldo more time is needed to maintain mingled/cluttered/duplicated code logic.</source>
          <target state="translated">&lt;strong&gt;保守性：&lt;/strong&gt;サルドごとに、混合/雑然とした/重複したコードロジックを維持するためにより多くの時間が必要です。</target>
        </trans-unit>
        <trans-unit id="12d108e7baf9032b2bc0679febce2431845aacf3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;OO-ability:&lt;/strong&gt; you can't make use of inheritance/composition.</source>
          <target state="translated">&lt;strong&gt;オブジェクト指向の機能：&lt;/strong&gt;継承/構成を利用することはできません。</target>
        </trans-unit>
        <trans-unit id="a23f822b1d4a14c1f8d45091a579788beb963af1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Replaceability:&lt;/strong&gt; you can't make scriptlets abstract.</source>
          <target state="translated">&lt;strong&gt;置き換え可能性：&lt;/strong&gt;スクリプトレットを抽象化することはできません。</target>
        </trans-unit>
        <trans-unit id="dd6c632d066ccf0fc385be85c35d9172a5b13eb2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reusability:&lt;/strong&gt; you can't reuse scriptlets.</source>
          <target state="translated">&lt;strong&gt;再利用性：&lt;/strong&gt;スクリプトレットを再利用することはできません。</target>
        </trans-unit>
        <trans-unit id="dab8261ed76aa890287247357fd6bbed2684e5b4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Tag File&lt;/strong&gt;  are so easy developed as you did not need to restart the server when changing them, like JSP files. This makes them easy for development.</source>
          <target state="translated">&lt;strong&gt;タグファイル&lt;/strong&gt;は、JSPファイルのように&lt;strong&gt;タグを&lt;/strong&gt;変更するときにサーバーを再起動する必要がなかったため、簡単に開発できます。 これにより、開発が容易になります。</target>
        </trans-unit>
        <trans-unit id="3814b9b9f2dbea323401f0b749d1cea78b81d65c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Technically, JSP are all converted to Servlets during runtime&lt;/strong&gt;. JSP was initially created for the purpose of the decoupling the business logic and the design logic, following the MVC pattern. So JSP are technically all java codes during runtime. But to answer the question, Tag Libraries are usually used for applying logic (removing Java codes) to JSP pages.</source>
          <target state="translated">&lt;strong&gt;技術的には、JSPはすべて実行時にサーブレットに変換されます&lt;/strong&gt; 。 JSPは、MVCパターンに従って、ビジネスロジックと設計ロジックを分離する目的で最初に作成されました。 したがって、JSPは技術的には実行時のすべてのJavaコードです。 しかし、質問に答えるために、タグライブラリは通常、JSPページへのロジックの適用（Javaコードの削除）に使用されます。</target>
        </trans-unit>
        <trans-unit id="dca32e18a3b2d52aac3677e7d928e29f14de3e4c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Testability:&lt;/strong&gt; scriptlets are not unit-testable.</source>
          <target state="translated">&lt;strong&gt;テスト容易性：&lt;/strong&gt;スクリプトレットは単体テストできません。</target>
        </trans-unit>
        <trans-unit id="9137dff06cb373f59845928934fa1e992525c9e8" translate="yes" xml:space="preserve">
          <source>A neat idea from the Python world are &lt;em&gt;Template attribute languages&lt;/em&gt;; TAL was introduced by Zope (therefore a.k.a. &quot;Zope Page Templates&quot;, ZPT) and is a standard, with implementations in PHP, XSLT and Java as well (I have used the Python/Zope and PHP incarnations). In this class of templating languages, one above example could look like this:</source>
          <target state="translated">Pythonの世界からのすばらしいアイデアは、 &lt;em&gt;テンプレート属性言語&lt;/em&gt;です。 TALはZope（したがって「Zopeページテンプレート」、ZPTとも呼ばれます）によって導入された標準であり、PHP、XSLT、Javaでも実装されています（Python / ZopeおよびPHPインカネーションを使用しました）。 このテンプレート言語クラスでは、上記の例は次のようになります。</target>
        </trans-unit>
        <trans-unit id="cfc5709ae32ab041336687f1e6512f200a0844a5" translate="yes" xml:space="preserve">
          <source>Also, take note that it is not a best practice to do business logic in the view layer, you should perform your business logics in the Service layer, 
and pass the output result to your views through a Controller.</source>
          <target state="translated">また、ビュー層でビジネスロジックを実行するのはベストプラクティスではないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="f68d36db9b907801a9eb6798b78a997685810586" translate="yes" xml:space="preserve">
          <source>Also, you can read the tag body easily</source>
          <target state="translated">また、タグ本文を簡単に読み取ることができます。</target>
        </trans-unit>
        <trans-unit id="3287880bd50b1fa49f174a085295b57ed1de703b" translate="yes" xml:space="preserve">
          <source>And certainly stay away of filters and pre and post processing, otherwise you may deal with support/debugging difficulties since you always do not know where the variable gets the value.</source>
          <target state="translated">また、フィルタや前後の処理には近づかないようにしてください。そうしないと、変数がどこで値を取得しているかわからないので、サポートデバッグが困難になるかもしれません。</target>
        </trans-unit>
        <trans-unit id="460633aa80eeb1c8f4d8d4d2a283b2cd7c2ea331" translate="yes" xml:space="preserve">
          <source>And of course many fellow programmers hereby described or recommended several other solutions. GWT is for people who really don't want to deal with the web part or to minimalize it.</source>
          <target state="translated">そしてもちろん、多くの仲間のプログラマーたちは、ここに他のいくつかの解決策を説明したり、推奨したりしています。GWT は、本当にウェブの部分を扱いたくない人や、最小限にしたい人のためのものです。</target>
        </trans-unit>
        <trans-unit id="293d82cb47fc75524d2ec23540d9f51807688ce8" translate="yes" xml:space="preserve">
          <source>As &lt;a href=&quot;https://stackoverflow.com/questions/2188706/how-to-avoid-using-scriptlets-in-my-jsp-page&quot;&gt;another question&lt;/a&gt; is discussing, you can and always should disable scriptlets in your &lt;code&gt;web.xml&lt;/code&gt; web application descriptor.</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/questions/2188706/how-to-avoid-using-scriptlets-in-my-jsp-page&quot;&gt;別の質問&lt;/a&gt;が議論しているように、 &lt;code&gt;web.xml&lt;/code&gt; Webアプリケーション記述子でスクリプトレットを無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="17bc0d434c97d066ec7b78aa4ac9d4cbc140117e" translate="yes" xml:space="preserve">
          <source>As many answers says, use JSTL or create your own custom tags. &lt;a href=&quot;http://www.journaldev.com/2099/jsp-custom-tags-example-tutorial&quot;&gt;Here&lt;/a&gt; is good explanation about creating custom tags</source>
          <target state="translated">多くの回答が言うように、JSTLを使用するか、独自のカスタムタグを作成します。 カスタムタグの作成についての良い説明は&lt;a href=&quot;http://www.journaldev.com/2099/jsp-custom-tags-example-tutorial&quot;&gt;ここに&lt;/a&gt;あります</target>
        </trans-unit>
        <trans-unit id="dabf707c8c01e32501275ce0d2adb33afa1729af" translate="yes" xml:space="preserve">
          <source>Basic MVC example with JSP, Servlet and JDBC</source>
          <target state="translated">JSP、サーブレット、JDBCを使った基本的なMVCの例</target>
        </trans-unit>
        <trans-unit id="d202594c5797a73fde182a112e408d80d5a47ff2" translate="yes" xml:space="preserve">
          <source>Believe me, this will change the way you design</source>
          <target state="translated">私を信じて、これはあなたのデザインの方法を変更します。</target>
        </trans-unit>
        <trans-unit id="d841cf905ba57a2e5b758d8b5de5a5d1feb0d038" translate="yes" xml:space="preserve">
          <source>By using JSTL tags together with EL expression you can avoid this. Put the following things in your jsp page:</source>
          <target state="translated">JSTLタグとEL表現を併用することで、これを回避することができます。jspページに以下のようなものを入れてください。</target>
        </trans-unit>
        <trans-unit id="e2b0a0be2c4be101f37fd815c88cbaf5f6d93468" translate="yes" xml:space="preserve">
          <source>Custom Tags- you can define your own tags to use.</source>
          <target state="translated">カスタムタグ-使用するタグを定義することができます。</target>
        </trans-unit>
        <trans-unit id="2700221f2d233bc435b4aecae915d8f6c4b5eb5e" translate="yes" xml:space="preserve">
          <source>Design patterns in Java web applications</source>
          <target state="translated">Javaウェブアプリケーションのデザインパターン</target>
        </trans-unit>
        <trans-unit id="4c492217496c5720801e5ab32fb88c56ac52c16a" translate="yes" xml:space="preserve">
          <source>EL</source>
          <target state="translated">EL</target>
        </trans-unit>
        <trans-unit id="9028f357a088f9e3949a25480f3a1fcc603f5d51" translate="yes" xml:space="preserve">
          <source>EL expressions</source>
          <target state="translated">EL表現</target>
        </trans-unit>
        <trans-unit id="ff837528477860274cafad4c44c9ba8002de71b3" translate="yes" xml:space="preserve">
          <source>Even if you use a framework like Struts 2, which have lots of good tags, you may find that having your own tags can reduce your code a lot. You can pass your tag parameters to struts and this way customize your framework tag.</source>
          <target state="translated">Struts2のようなフレームワークを使っていても、独自のタグを使うことでコードを減らすことができるかもしれません。strutsにタグのパラメータを渡すことで、フレームワークのタグをカスタマイズすることができます。</target>
        </trans-unit>
        <trans-unit id="e5f2929765178283974ec5b0f56d6dbb2d488cb2" translate="yes" xml:space="preserve">
          <source>Example from &lt;em&gt;java2s&lt;/em&gt;,</source>
          <target state="translated">&lt;em&gt;java2sの&lt;/em&gt;例</target>
        </trans-unit>
        <trans-unit id="ab4ad92cb1a1e4761a3bf91a6bffc62b4148df71" translate="yes" xml:space="preserve">
          <source>Experience has shown that JSP's have some shortcomings, one of them being hard to avoid mixing markup with actual code.</source>
          <target state="translated">経験上、JSPにはいくつかの欠点があり、その一つはマークアップと実際のコードが混ざってしまうことを避けるのが難しいことです。</target>
        </trans-unit>
        <trans-unit id="1c7a52dfd00e05d100e7009189a810dae152a373" translate="yes" xml:space="preserve">
          <source>Expression Language</source>
          <target state="translated">表現言語</target>
        </trans-unit>
        <trans-unit id="335819d77fcc9ef286b4eee5c8cbe73bf3f8577e" translate="yes" xml:space="preserve">
          <source>Fetch those values and parameters within your JSP using JSTL/Taglib</source>
          <target state="translated">これらの値やパラメータをJSTLTaglibを使ってJSP内で取得します。</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="4145625051f942611b763d861ab36407bba4c90f" translate="yes" xml:space="preserve">
          <source>From JSP 1.2 Specification, it is highly recommended that the JSP Standard Tag Library  (JSTL) be used in your web application to help &lt;strong&gt;reduce the need for JSP scriptlets&lt;/strong&gt; in your pages. Pages that use JSTL are, in general, easier to read and maintain.</source>
          <target state="translated">JSP 1.2仕様から、JSP標準タグライブラリ（JSTL）をWebアプリケーションで使用して、ページ内の&lt;strong&gt;JSPスクリプトレットの必要性を減らす&lt;/strong&gt;ことを強くお勧めします。 JSTLを使用するページは、一般に、読みやすく、保守も簡単です。</target>
        </trans-unit>
        <trans-unit id="55fc2f63b02dc3aa67ac5d8c473a54ee6c3335d5" translate="yes" xml:space="preserve">
          <source>Hidden features of JSP/Servlet</source>
          <target state="translated">JSPServletの隠れた機能</target>
        </trans-unit>
        <trans-unit id="abbb3de6a2693017a80aac6e69fc528bd68e92f8" translate="yes" xml:space="preserve">
          <source>How does Servlet, ServletContext, HttpSession and HttpServletRequest/Response work?</source>
          <target state="translated">Servlet、ServletContext、HttpSession、HttpServletRequestResponseはどのように動作しますか?</target>
        </trans-unit>
        <trans-unit id="fc6304fc1da24f7332456c2ed85a43e9be667bb1" translate="yes" xml:space="preserve">
          <source>How to avoid Java code in JSP files</source>
          <target state="translated">JSPファイルのJavaコードを回避する方法</target>
        </trans-unit>
        <trans-unit id="541f1c70d2cfacfa1fae673b114a9c7b5e3c9ca3" translate="yes" xml:space="preserve">
          <source>I don't know very much about the &lt;a href=&quot;http://sourceforge.net/projects/javazpt/&quot;&gt;Java implementation&lt;/a&gt;, though.</source>
          <target state="translated">ただし、 &lt;a href=&quot;http://sourceforge.net/projects/javazpt/&quot;&gt;Javaの実装&lt;/a&gt;についてはあまり知りません。</target>
        </trans-unit>
        <trans-unit id="209fa42a6db8dfeb3eb4eb056dd10ed5ad682f31" translate="yes" xml:space="preserve">
          <source>I have more than 20 years in programming, most of the projects fail before the sextet: Reusability Replaceability OO-ability Debuggability Testability Maintainability is even needed. Other projects, run by people who only cared about functionality, were extremely successful.  Also, stiff object structure, implemented too early in the project, makes the code unable to be adapted to the drastic changes in the specifications (aka agile).</source>
          <target state="translated">私は20年以上のプログラミング経験がありますが、ほとんどのプロジェクトは六重奏の前に失敗します。再利用性 置換性 OO性 デバッガ性 テスト性 保守性が必要とされる前に、ほとんどのプロジェクトは失敗します。他のプロジェクトでは、機能性だけを重視した人たちが運営していたものが、大成功を収めています。また、プロジェクトの初期に実装された硬いオブジェクト構造は、コードを仕様の大幅な変更に適応させることができないようにします(別名アジャイル)。</target>
        </trans-unit>
        <trans-unit id="1910500d8ffa90d4b15a55788777f83ecb6b6468" translate="yes" xml:space="preserve">
          <source>I would always do that in order to prevent any developer adding scriptlets, especially in bigger companies where you will lose overview sooner or later. The &lt;code&gt;web.xml&lt;/code&gt; settings look like this:</source>
          <target state="translated">開発者がスクリプトレットを追加するのを防ぐために、特に遅かれ早かれ概要を見失ってしまうような大企業では、私は常にそうするつもりです。 &lt;code&gt;web.xml&lt;/code&gt; 設定は次のようになります。</target>
        </trans-unit>
        <trans-unit id="c8ea5c5d6cf46dab0bf146f77bb73a4cf420ef49" translate="yes" xml:space="preserve">
          <source>I'm new to Java EE and I know that something like the following three lines</source>
          <target state="translated">私はJava EEの初心者で、以下の3行のようなものは知っています。</target>
        </trans-unit>
        <trans-unit id="7897d079e730103d5c275ad30437b72216d2b88f" translate="yes" xml:space="preserve">
          <source>I'm not sure if i get this correct.</source>
          <target state="translated">これが正しいかどうかわからない。</target>
        </trans-unit>
        <trans-unit id="fd9279c3f407a91c673b3d198d2d7165013ce083" translate="yes" xml:space="preserve">
          <source>If translations of the content are available, they are used.</source>
          <target state="translated">内容の翻訳がある場合は、それを使用します。</target>
        </trans-unit>
        <trans-unit id="85c83d910c283a8bdf255689a433590534187269" translate="yes" xml:space="preserve">
          <source>If we use the following things in a java web application, java code can be eliminated from foreground of the JSP.</source>
          <target state="translated">javaウェブアプリケーションで以下のようなものを使えば、JSPのフォアグラウンドからjavaコードを排除することができます。</target>
        </trans-unit>
        <trans-unit id="bbec7d7b3dc4d02602a57d628c2e974a87621c53" translate="yes" xml:space="preserve">
          <source>If you can, then consider using a specialized technology for what you need to do.  In Java EE 6 there is JSF 2.0, which provides a lot of nice features including gluing Java beans together with JSF pages through the &lt;code&gt;#{bean.method(argument)}&lt;/code&gt; approach.</source>
          <target state="translated">可能であれば、必要な作業に特化したテクノロジーの使用を検討してください。 Java EE 6にはJSF 2.0があり、これは &lt;code&gt;#{bean.method(argument)}&lt;/code&gt; アプローチを介してJSFページと一緒にJava Beanを接着するなど、多くの優れた機能を提供します。</target>
        </trans-unit>
        <trans-unit id="1928eb1d50f68f5d11732dc80e018320691e2fae" translate="yes" xml:space="preserve">
          <source>If you want to invoke some &lt;strong&gt;utility&lt;/strong&gt; Java code directly in the JSP page (typically &lt;code&gt;public static&lt;/code&gt; methods), then you need to define them as EL functions. There's a standard &lt;a href=&quot;http://docs.oracle.com/javaee/5/jstl/1.1/docs/tlddocs/fn/tld-summary.html&quot;&gt;functions taglib&lt;/a&gt; in JSTL, but &lt;a href=&quot;http://docs.oracle.com/javaee/5/tutorial/doc/bnahq.html#bnaiq&quot;&gt;you can also easily create functions yourself&lt;/a&gt;. Here's an example how JSTL &lt;code&gt;fn:escapeXml&lt;/code&gt; is useful to prevent &lt;a href=&quot;http://en.wikipedia.org/wiki/Cross-site_scripting&quot;&gt;XSS&lt;/a&gt;&lt;a href=&quot;http://ha.ckers.org/xss.html&quot;&gt;attacks&lt;/a&gt;.</source>
          <target state="translated">いくつかの&lt;strong&gt;ユーティリティ&lt;/strong&gt; JavaコードをJSPページで直接呼び出したい場合（通常は &lt;code&gt;public static&lt;/code&gt; メソッド）、それらをEL関数として定義する必要があります。 JSTLには標準の&lt;a href=&quot;http://docs.oracle.com/javaee/5/jstl/1.1/docs/tlddocs/fn/tld-summary.html&quot;&gt;関数taglib&lt;/a&gt;があり&lt;a href=&quot;http://docs.oracle.com/javaee/5/tutorial/doc/bnahq.html#bnaiq&quot;&gt;ますが&lt;/a&gt; 、 関数を自分で簡単に作成することもできます 。 JSTL &lt;code&gt;fn:escapeXml&lt;/code&gt; が&lt;a href=&quot;http://en.wikipedia.org/wiki/Cross-site_scripting&quot;&gt;XSS&lt;/a&gt; &lt;a href=&quot;http://ha.ckers.org/xss.html&quot;&gt;攻撃の&lt;/a&gt;防止にどのように役立つかを示す例を次に示します。</target>
        </trans-unit>
        <trans-unit id="38577992a40047e6c37c2fb7c2cab6712a83ae8d" translate="yes" xml:space="preserve">
          <source>If you want to invoke some Java code to &lt;strong&gt;access and display&lt;/strong&gt; &quot;backend&quot; data inside a JSP page, then you need to use EL (Expression Language), those &lt;code&gt;${}&lt;/code&gt; things. E.g. redisplaying submitted input values:</source>
          <target state="translated">JSPページ内の「バックエンド」データに&lt;strong&gt;アクセスして表示&lt;/strong&gt;するJavaコードを呼び出す場合は、EL（式言語）、つまり &lt;code&gt;${}&lt;/code&gt; を使用する必要があります。 たとえば、送信された入力値の再表示：</target>
        </trans-unit>
        <trans-unit id="6e4f8370b3272119e2841c20a679e8e38d1b031c" translate="yes" xml:space="preserve">
          <source>If you want to invoke some Java code to &lt;strong&gt;control the flow&lt;/strong&gt; inside a JSP page, then you need to grab an (existing) flow control taglib like &lt;a href=&quot;http://docs.oracle.com/javaee/5/jstl/1.1/docs/tlddocs/c/tld-summary.html&quot;&gt;JSTL core&lt;/a&gt;. E.g. displaying &lt;code&gt;List&amp;lt;Product&amp;gt;&lt;/code&gt; in a table:</source>
          <target state="translated">JSPページ内&lt;strong&gt;のフロー&lt;/strong&gt;を&lt;strong&gt;制御する&lt;/strong&gt; Javaコードを呼び出す場合は、 &lt;a href=&quot;http://docs.oracle.com/javaee/5/jstl/1.1/docs/tlddocs/c/tld-summary.html&quot;&gt;JSTL coreの&lt;/a&gt;ような（既存の）フロー制御taglibを取得する必要があります。 たとえば、テーブルに &lt;code&gt;List&amp;lt;Product&amp;gt;&lt;/code&gt; 表示します。</target>
        </trans-unit>
        <trans-unit id="8062301bb015d8a2e33cde53a0ed7e77846a2169" translate="yes" xml:space="preserve">
          <source>If you want to invoke some Java code to &lt;strong&gt;control&lt;/strong&gt; the execution plan and/or the destination of the request and the response, then implement a &lt;a href=&quot;https://stackoverflow.com/tags/servlets/info&quot;&gt;servlet&lt;/a&gt; according to the &lt;a href=&quot;https://stackoverflow.com/questions/3541077/design-patterns-web-based-applications/3542297#3542297&quot;&gt;MVC's Front Controller Pattern&lt;/a&gt;. E.g.:</source>
          <target state="translated">実行プランやリクエストとレスポンスの宛先を&lt;strong&gt;制御&lt;/strong&gt;するJavaコードを呼び出す場合は、 &lt;a href=&quot;https://stackoverflow.com/questions/3541077/design-patterns-web-based-applications/3542297#3542297&quot;&gt;MVCのフロントコントローラーパターン&lt;/a&gt;に従って&lt;a href=&quot;https://stackoverflow.com/tags/servlets/info&quot;&gt;サーブレットを&lt;/a&gt;実装します 。 例えば：</target>
        </trans-unit>
        <trans-unit id="08ca864cd2ae393a77889ac801c82ca2a1e4cefd" translate="yes" xml:space="preserve">
          <source>If you want to invoke some Java code to &lt;strong&gt;postprocess&lt;/strong&gt; a request, e.g. processing a form submit, then implement a &lt;a href=&quot;https://stackoverflow.com/tags/servlets/info&quot;&gt;servlet&lt;/a&gt; and write code accordingly in &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html#doPost%28javax.servlet.http.HttpServletRequest,%20javax.servlet.http.HttpServletResponse%29&quot;&gt;&lt;code&gt;doPost()&lt;/code&gt;&lt;/a&gt; method. E.g.:</source>
          <target state="translated">フォーム送信の処理など、リクエストを&lt;strong&gt;後処理&lt;/strong&gt;するJavaコードを呼び出す場合は、 &lt;a href=&quot;https://stackoverflow.com/tags/servlets/info&quot;&gt;サーブレット&lt;/a&gt;を実装し、それに応じて&lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html#doPost%28javax.servlet.http.HttpServletRequest,%20javax.servlet.http.HttpServletResponse%29&quot;&gt; &lt;code&gt;doPost()&lt;/code&gt; &lt;/a&gt;メソッドでコードを記述します。 例えば：</target>
        </trans-unit>
        <trans-unit id="85a5ccb98f8d25732291548a6b4d3d4950886db9" translate="yes" xml:space="preserve">
          <source>If you want to invoke some Java code to &lt;strong&gt;preprocess&lt;/strong&gt; a request, e.g. preloading some list from a database to display in some table, if necessary based on some query parameters, then implement a &lt;a href=&quot;https://stackoverflow.com/tags/servlets/info&quot;&gt;servlet&lt;/a&gt; and write code accordingly in &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html#doGet%28javax.servlet.http.HttpServletRequest,%20javax.servlet.http.HttpServletResponse%29&quot;&gt;&lt;code&gt;doGet()&lt;/code&gt;&lt;/a&gt; method. E.g.:</source>
          <target state="translated">いくつかのJavaコードを呼び出してリクエストを&lt;strong&gt;前処理&lt;/strong&gt;する場合、たとえば、必要に応じてクエリパラメータに基づいてデータベースからリストをプリロードしてテーブルに表示する場合は、 &lt;a href=&quot;https://stackoverflow.com/tags/servlets/info&quot;&gt;サーブレット&lt;/a&gt;を実装し、それに応じて&lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html#doGet%28javax.servlet.http.HttpServletRequest,%20javax.servlet.http.HttpServletResponse%29&quot;&gt; &lt;code&gt;doGet()&lt;/code&gt; &lt;/a&gt;メソッドでコードを記述します。 例えば：</target>
        </trans-unit>
        <trans-unit id="7d5c2d5e3acf61c6e46e0c5bb9dbe3b694f7d5cc" translate="yes" xml:space="preserve">
          <source>If you want to invoke the &lt;strong&gt;same&lt;/strong&gt; Java code on &lt;em&gt;every&lt;/em&gt; request, less-or-more regardless of the requested page, e.g. checking if a user is logged in, then implement a &lt;a href=&quot;https://stackoverflow.com/tags/servlet-filters/info&quot;&gt;filter&lt;/a&gt; and write code accordingly in &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/servlet/Filter.html#doFilter%28javax.servlet.ServletRequest,%20javax.servlet.ServletResponse,%20javax.servlet.FilterChain%29&quot;&gt;&lt;code&gt;doFilter()&lt;/code&gt;&lt;/a&gt; method. E.g.:</source>
          <target state="translated">&lt;em&gt;すべての&lt;/em&gt;リクエストで&lt;strong&gt;同じ&lt;/strong&gt; Javaコードを呼び出したい場合は、リクエストされたページに関係なく、たとえばユーザーがログインしているかどうかを確認した後、 &lt;a href=&quot;https://stackoverflow.com/tags/servlet-filters/info&quot;&gt;フィルター&lt;/a&gt;を実装し、それに応じて&lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/servlet/Filter.html#doFilter%28javax.servlet.ServletRequest,%20javax.servlet.ServletResponse,%20javax.servlet.FilterChain%29&quot;&gt; &lt;code&gt;doFilter()&lt;/code&gt; &lt;/a&gt;メソッドでコードを記述します。 例えば：</target>
        </trans-unit>
        <trans-unit id="ee11dba0fd5ce2964e4951a57cf7350d6fac840f" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;https://stackoverflow.com/tags/facelets/info&quot;&gt;Facelets&lt;/a&gt;, the successor of JSP, which is part of the Java EE provided MVC framework &lt;a href=&quot;https://stackoverflow.com/tags/jsf/info&quot;&gt;JSF&lt;/a&gt;, it is already &lt;strong&gt;not&lt;/strong&gt; possible to use &lt;em&gt;scriptlets&lt;/em&gt;. This way you're automatically forced to do things &quot;the right way&quot;.</source>
          <target state="translated">Java EE提供のMVCフレームワーク&lt;a href=&quot;https://stackoverflow.com/tags/jsf/info&quot;&gt;JSFの&lt;/a&gt;一部であるJSPの後継である&lt;a href=&quot;https://stackoverflow.com/tags/facelets/info&quot;&gt;Facelets&lt;/a&gt;では、すでに&lt;em&gt;スクリプトレット&lt;/em&gt;を使用することはでき&lt;strong&gt;ません&lt;/strong&gt; 。 このようにすると、自動的に「正しい方法」で処理を実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="864be0601ecfce0a46e54862f1e8a20535f2a995" translate="yes" xml:space="preserve">
          <source>In my case I do my systems handling the view with Angular and any data needed is brought from the server using rest services.</source>
          <target state="translated">私の場合はAngularでビューを処理するシステムで、必要なデータはレストサービスを使ってサーバーから持ってきています。</target>
        </trans-unit>
        <trans-unit id="c8be22759def612993661b4f9fd9ea685f8f326b" translate="yes" xml:space="preserve">
          <source>In the MVC Architectural pattern, JSPs represent the View layer. Embedding java code in JSPs is considered a bad practice.
You can use &lt;a href=&quot;http://www.oracle.com/technetwork/java/index-jsp-135995.html&quot;&gt;JSTL&lt;/a&gt;, &lt;a href=&quot;http://freemarker.sourceforge.net/&quot;&gt;freeMarker&lt;/a&gt;, &lt;a href=&quot;http://velocity.apache.org/&quot;&gt;velocity&lt;/a&gt; with JSP as &quot;template engine&quot;.
The data provider to those tags &lt;strong&gt;depends on frameworks&lt;/strong&gt; that you are dealing with. &lt;code&gt;Struts 2&lt;/code&gt; and &lt;code&gt;webwork&lt;/code&gt; as an implementation for MVC Pattern uses &lt;a href=&quot;http://struts.apache.org/2.0.11.1/docs/ognl.html&quot;&gt;OGNL&lt;/a&gt; &quot;very interesting technique to expose Beans Properties to JSP &quot;.</source>
          <target state="translated">MVCアーキテクチャパターンでは、JSPはビューレイヤーを表します。 JSPにJavaコードを埋め込むことは悪い習慣と考えられています。 &lt;a href=&quot;http://www.oracle.com/technetwork/java/index-jsp-135995.html&quot;&gt;JSTL&lt;/a&gt; 、 &lt;a href=&quot;http://freemarker.sourceforge.net/&quot;&gt;freeMarker&lt;/a&gt; 、 &lt;a href=&quot;http://velocity.apache.org/&quot;&gt;ベロシティ&lt;/a&gt;をJSPで「テンプレートエンジン」として使用できます。 これらのタグのデータプロバイダー&lt;strong&gt;は、処理するフレームワークによって異なり&lt;/strong&gt;ます。 MVCパターンの実装としての &lt;code&gt;Struts 2&lt;/code&gt; と &lt;code&gt;webwork&lt;/code&gt; は、 &lt;a href=&quot;http://struts.apache.org/2.0.11.1/docs/ognl.html&quot;&gt;OGNL&lt;/a&gt; &quot;BeanプロパティをJSPに公開する非常に興味深い手法&quot;を使用しています。</target>
        </trans-unit>
        <trans-unit id="3379f7440ecf03bd6f4294973b1344867b834b45" translate="yes" xml:space="preserve">
          <source>In the spirit of adopting the model-view-controller (MVC) design pattern to reduce coupling between the presentation tier from the business logic, &lt;strong&gt;JSP scriptlets should not be used&lt;/strong&gt; for writing business logic. Rather, JSP scriptlets are used if necessary to transform data (also called &quot;value objects&quot;) returned from processing the client's requests into a proper client-ready format. Even then, this would be better done with a front controller servlet or a custom tag.</source>
          <target state="translated">ビジネスロジックからのプレゼンテーション層の間の結合を減らすためにモデルビューコントローラー（MVC）設計パターンを採用するという精神で、 &lt;strong&gt;JSPスクリプトレットを&lt;/strong&gt;ビジネスロジックの記述&lt;strong&gt;に使用&lt;/strong&gt;し&lt;strong&gt;ないでください&lt;/strong&gt; 。 むしろ、JSPスクリプトレットは、クライアントの要求の処理から返されたデータ（「値オブジェクト」とも呼ばれます）を適切なクライアント対応フォーマットに変換する必要がある場合に使用されます。 それでも、これはフロントコントローラーサーブレットまたはカスタムタグを使用する方が適切です。</target>
        </trans-unit>
        <trans-unit id="5844156b0df20492d28065d5072469ba59148486" translate="yes" xml:space="preserve">
          <source>Instead, you can use:</source>
          <target state="translated">その代わりに</target>
        </trans-unit>
        <trans-unit id="9c48d9289fc64581e90dcccfc40ce37a3369ae26" translate="yes" xml:space="preserve">
          <source>JSP 2.0 has a feature called &lt;strong&gt;&quot;Tag Files&quot;&lt;/strong&gt;, you can write tags without external &lt;code&gt;java&lt;/code&gt; code and &lt;code&gt;tld&lt;/code&gt;. You need to create a &lt;code&gt;.tag&lt;/code&gt; file and put it in &lt;code&gt;WEB-INF\tags&lt;/code&gt; you can even create a directory structure to package your tags.</source>
          <target state="translated">JSP 2.0には&lt;strong&gt;「タグファイル」&lt;/strong&gt;と呼ばれる機能があり、外部 &lt;code&gt;java&lt;/code&gt; コードや &lt;code&gt;tld&lt;/code&gt; なしでタグを記述できます。 &lt;code&gt;.tag&lt;/code&gt; ファイルを作成して &lt;code&gt;WEB-INF\tags&lt;/code&gt; する必要があります。タグをパッケージ化するためのディレクトリ構造を作成することもできます。</target>
        </trans-unit>
        <trans-unit id="9b22fe878901f07cf06aca41d7e95d932c6cc98d" translate="yes" xml:space="preserve">
          <source>JSTL tags</source>
          <target state="translated">科学技術振興機構(JSTL)タグ</target>
        </trans-unit>
        <trans-unit id="a2be0f0a69d1324f0a28e325f93637011a05b9ab" translate="yes" xml:space="preserve">
          <source>JSTL works with request attributes - they are most often set in the request by a Servlet, which &lt;em&gt;forwards&lt;/em&gt; to the JSP.</source>
          <target state="translated">JSTLはリクエスト属性で動作します-それらはほとんどの場合、JSPに&lt;em&gt;転送&lt;/em&gt;するサーブレットによってリクエストで設定されます。</target>
        </trans-unit>
        <trans-unit id="a696556e75e9ef96d0226d1c056f84b37d8f28c0" translate="yes" xml:space="preserve">
          <source>Just use the JSTL tag and EL expression.</source>
          <target state="translated">JSTLタグとEL式を使えばいいだけです。</target>
        </trans-unit>
        <trans-unit id="b61ea7debe4e081d0507e4a1d7a1698d231f004b" translate="yes" xml:space="preserve">
          <source>Look at Wicket.</source>
          <target state="translated">ウィケットを見て</target>
        </trans-unit>
        <trans-unit id="9c9a06a4a3b3f8ba0b6e04a8601d038b496c2c91" translate="yes" xml:space="preserve">
          <source>Make your values and parameters inside your servlet classes</source>
          <target state="translated">サーブレットクラスの中に値とパラメータを作成する</target>
        </trans-unit>
        <trans-unit id="6b1ec125525f6f889b55a94c4be3db9e02183779" translate="yes" xml:space="preserve">
          <source>No matter how much you try to avoid, when you work with other developers, some of them will still prefer scriptlet and then insert the evil code into the project. Therefore, setting up the project at the first sign is very important if you really want to reduce the scriptlet code. There are several techniques to get over this (including several frameworks that other mentioned). However, if you prefer the pure JSP way, then use the JSTL tag file. The nice thing about this is you can also set up master pages for your project, so the other pages can inherit the master pages</source>
          <target state="translated">いくら避けようと思っても、他の開発者と一緒に仕事をしていると、中にはスクリプトレットを好んでプロジェクトに邪悪なコードを挿入してくる人がいます。そのため、本当にスクリプトレットのコードを減らしたいのであれば、最初の兆候でプロジェクトを設定することは非常に重要です。これを乗り越えるためのテクニックはいくつかあります(他の方が言及されているいくつかのフレームワークを含む)。しかし、純粋なJSPの方法を好むのであれば、JSTLタグファイルを使用してください。この方法の良いところは、プロジェクトにマスターページを設定することができることです。</target>
        </trans-unit>
        <trans-unit id="7496f24aecc09eb1dcd7346285873e798f1449a9" translate="yes" xml:space="preserve">
          <source>Note that EL is &lt;strong&gt;EviL&lt;/strong&gt; (runtime exceptions, refactoring)</source>
          <target state="translated">ELは&lt;strong&gt;EviL&lt;/strong&gt; （ランタイム例外、リファクタリング）であることに注意してください</target>
        </trans-unit>
        <trans-unit id="6f49536a3746430c8f949ea7a5a7a57bcc58bbc4" translate="yes" xml:space="preserve">
          <source>Note that the XSS sensitivity is in no way specifically related to Java/JSP/JSTL/EL/whatever, this problem needs to be taken into account in &lt;strong&gt;every&lt;/strong&gt; web application you develop. The problem of &lt;em&gt;scriptlets&lt;/em&gt; is that it provides no way of builtin preventions, at least not using the standard Java API. JSP's successor Facelets has already implicit HTML escaping, so you don't need to worry about XSS holes in Facelets.</source>
          <target state="translated">XSSの感度は、Java / JSP / JSTL / EL /に特に関係するものではないことに注意してください。この問題は、開発する&lt;strong&gt;すべての&lt;/strong&gt; Webアプリケーションで考慮する必要があります。 &lt;em&gt;スクリプトレット&lt;/em&gt;の問題は、少なくとも標準のJava APIを使用せずに、組み込みの防止手段を提供しないことです。 JSPの後継であるFaceletsにはすでに暗黙のHTMLエスケープがあるため、FaceletsのXSSホールについて心配する必要はありません。</target>
        </trans-unit>
        <trans-unit id="b753a681b0a58549d95c372d985f246cfe1be0e5" translate="yes" xml:space="preserve">
          <source>Nothing of that is used anymore my friend, my advice is to decouple the view(css, html, javascript, etc) from the server.</source>
          <target state="translated">私の友人はもう何も使用されていません、私のアドバイスは、サーバーからビュー(CSS、HTML、javascriptなど)を切り離すことです。</target>
        </trans-unit>
        <trans-unit id="a9423ba2ba1eee5498d3d54ff884a89cb29e92d1" translate="yes" xml:space="preserve">
          <source>Of course if you want, you can hack yourself into the depths of the code and inject JS and enrich your HTML page, but really you can avoid it if you want, and the result will be good as it was written in any other frameworks. I say worths a try, and the basic GWT is well-documented.</source>
          <target state="translated">もちろん、その気になればコードの奥深くまでハックしてJSを注入してHTMLページを充実させることもできますが、本当は避けたければ避けてもいいし、他のフレームワークで書いたような良い結果が得られるはずです。試してみる価値はあると思いますし、基本的なGWTについては十分に説明されています。</target>
        </trans-unit>
        <trans-unit id="0d7095f0f8c2e78814464e734575ef8202541d71" translate="yes" xml:space="preserve">
          <source>On this mater page, I created a fragment called &quot;title&quot;, so that in the child page, I could insert more codes into this place of the master page. Also, the tag &lt;code&gt;&amp;lt;jsp:doBody/&amp;gt;&lt;/code&gt; will be replaced by the content of the child page</source>
          <target state="translated">このページでは、「タイトル」というフラグメントを作成しました。これにより、子ページで、マスターページのこの場所にさらにコードを挿入できます。 また、タグ &lt;code&gt;&amp;lt;jsp:doBody/&amp;gt;&lt;/code&gt; は子ページのコンテンツに置き換えられます</target>
        </trans-unit>
        <trans-unit id="4c857f865a5b7dda907f07a7e5d9a5393957617c" translate="yes" xml:space="preserve">
          <source>Or just adopt an MVC framework like &lt;a href=&quot;https://stackoverflow.com/tags/jsf/info&quot;&gt;JSF&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/tags/spring-mvc/info&quot;&gt;Spring MVC&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/tags/wicket/info&quot;&gt;Wicket&lt;/a&gt;, etc so that you end up with just a JSP/Facelets page and a JavaBean class without the need for a custom servlet.</source>
          <target state="translated">または、 &lt;a href=&quot;https://stackoverflow.com/tags/jsf/info&quot;&gt;JSF&lt;/a&gt; 、 &lt;a href=&quot;https://stackoverflow.com/tags/spring-mvc/info&quot;&gt;Spring MVC&lt;/a&gt; 、 &lt;a href=&quot;https://stackoverflow.com/tags/wicket/info&quot;&gt;Wicket&lt;/a&gt;などのMVCフレームワークを採用するだけで、カスタムサーブレットを必要とせずに、JSP / FaceletsページとJavaBeanクラスだけを使用できます。</target>
        </trans-unit>
        <trans-unit id="99c7ca3264a1d4cbc0d2abe683d40da7282d8bf4" translate="yes" xml:space="preserve">
          <source>Please refer to:</source>
          <target state="translated">参考にしてみてください。</target>
        </trans-unit>
        <trans-unit id="371a87eafb4de078ff674d69a5a89c186532eb49" translate="yes" xml:space="preserve">
          <source>See also:</source>
          <target state="translated">も参照してください。</target>
        </trans-unit>
        <trans-unit id="cdb70868019074559ad053d547795310d3f219bf" translate="yes" xml:space="preserve">
          <source>So I consider as procrastination the activity of defining &quot;layers&quot; or redundant data structures either early in the project or when not specifically required. &amp;nbsp;</source>
          <target state="translated">そのため、プロジェクトの初期または特に必要がない場合に、「レイヤー」または冗長データ構造を定義するアクティビティを先延ばしと見なします。</target>
        </trans-unit>
        <trans-unit id="6da13addb000b67d42a6d66391713819e634149f" translate="yes" xml:space="preserve">
          <source>Source</source>
          <target state="translated">Source</target>
        </trans-unit>
        <trans-unit id="fc9f10111119b6c9e526812b2a1905fd175f558d" translate="yes" xml:space="preserve">
          <source>Start server and load the bodyContent.jsp in browser</source>
          <target state="translated">サーバを起動し、ブラウザでbodyContent.jspを読み込む</target>
        </trans-unit>
        <trans-unit id="2b8e6dd7bd02bbe0f0a2cd944adb7c18a7b97db2" translate="yes" xml:space="preserve">
          <source>Sure, replace &lt;code&gt;&amp;lt;%! counter++; %&amp;gt;&lt;/code&gt; by an event producer-consumer architecture, where the business layer is notified about the need to increment the counter, it reacts accordingly, and notifies the presenters so that they update the views. A number of database transactions are involved, since in future we will need to know the new and old value of the counter, who has incremented it and with what purpose in mind. Obviously serialization is involved, since the layers are entirely decoupled. You will be able to increment your counter over RMI, IIOP, SOAP. But only HTML is required, which you don't implement, since it is such a mundane case. Your new goal is to reach 250 increments a second on your new shiny E7, 64GB RAM server.</source>
          <target state="translated">確かに、 &lt;code&gt;&amp;lt;%! counter++; %&amp;gt;&lt;/code&gt; カウンター++; ％&amp;gt;イベントプロデューサー/コンシューマーアーキテクチャ。ビジネスレイヤーはカウンターをインクリメントする必要があることを通知され、それに応じて対応し、プレゼンターに通知してビューを更新します。 多くのデータベーストランザクションが関係しています。将来的には、カウンターの新しい値と古い値を知っておく必要があります。カウンターの値は誰がどのような目的でインクリメントしたかを知る必要があるためです。 層が完全に分離されているため、明らかにシリアライゼーションが含まれます。 RMI、IIOP、SOAPを介してカウンターをインクリメントできます。 ただし、HTMLだけが必要であり、実装する必要はありません。これは、ありふれたケースであるためです。 新しい目標は、新しい光沢のあるE7、64GB RAMサーバーで1秒あたり250の増分に到達することです。</target>
        </trans-unit>
        <trans-unit id="01f6458927b598fd06f1c9b9b3871a4a81966830" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;${param.foo}&lt;/code&gt; displays the outcome of &lt;code&gt;request.getParameter(&quot;foo&quot;)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;${param.foo}&lt;/code&gt; は &lt;code&gt;request.getParameter(&quot;foo&quot;)&lt;/code&gt; の結果を表示します。</target>
        </trans-unit>
        <trans-unit id="a9b0f7ac06bef52c90743fd20479795225d799b5" translate="yes" xml:space="preserve">
          <source>The code looks like ordinary HTML (or XHTML) plus some special attributes in an XML namespace; it can be viewed with a browser and safely be tweaked by a designer.
There is support for macros and for i18n as well:</source>
          <target state="translated">このコードは、通常の HTML (または XHTML)のように見えますが、XML 名前空間の中にいくつかの特別な属性があり、ブラウザで見ることができ、デザイナーが安全に調整することができます。マクロやi18nにも対応しています。</target>
        </trans-unit>
        <trans-unit id="8beffd5c99ba40a7c520fac4a0fe7cf1204fe64a" translate="yes" xml:space="preserve">
          <source>The good thing about this approach is that your code is also HTML like
  code!</source>
          <target state="translated">このアプローチの良いところは、あなたのコードもHTMLのようなコードになっていることです</target>
        </trans-unit>
        <trans-unit id="5b8afa3aa8081cc0ec560cc7ed29305aed1be3f6" translate="yes" xml:space="preserve">
          <source>The major disadvantages of &lt;em&gt;scriptlets&lt;/em&gt; are:</source>
          <target state="translated">&lt;em&gt;スクリプトレット&lt;/em&gt;の主な欠点は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="6e8eeb645a8a0b3cea3e70c5c9d1a8b1815529b1" translate="yes" xml:space="preserve">
          <source>The samples are very simple but you can do lots of complicated tasks here. Please consider you can use other tags (eg: &lt;code&gt;JSTL&lt;/code&gt; which has controlling tags like &lt;code&gt;if/forEcah/chosen&lt;/code&gt; text manipulation like &lt;code&gt;format/contains/uppercase&lt;/code&gt; or even SQL tags &lt;code&gt;select/update&lt;/code&gt;), pass all kind parameters, for example &lt;code&gt;Hashmap&lt;/code&gt;, access &lt;code&gt;session&lt;/code&gt;, &lt;code&gt;request&lt;/code&gt;, ... in your tag file too.</source>
          <target state="translated">サンプルは非常に単純ですが、ここでは多くの複雑なタスクを実行できます。 他のタグ（例： &lt;code&gt;if/forEcah/chosen&lt;/code&gt; テキスト操作（ &lt;code&gt;format/contains/uppercase&lt;/code&gt; やSQLタグ &lt;code&gt;select/update&lt;/code&gt; など ）のような制御タグを持つ &lt;code&gt;JSTL&lt;/code&gt; ）を使用して、すべての種類のパラメーター（例： &lt;code&gt;Hashmap&lt;/code&gt; 、access &lt;code&gt;session&lt;/code&gt; ）を渡すことを検討してください。 &lt;code&gt;request&lt;/code&gt; 、...タグファイルでも。</target>
        </trans-unit>
        <trans-unit id="cadf4f01d22ba51a03cf9a23cd0debeb245888e3" translate="yes" xml:space="preserve">
          <source>The use of &lt;em&gt;scriptlets&lt;/em&gt; (those &lt;code&gt;&amp;lt;% %&amp;gt;&lt;/code&gt; things) in &lt;a href=&quot;https://stackoverflow.com/tags/jsp/info&quot;&gt;JSP&lt;/a&gt; is indeed highly discouraged since the birth of &lt;em&gt;taglibs&lt;/em&gt; (like &lt;a href=&quot;https://stackoverflow.com/tags/jstl/info&quot;&gt;JSTL&lt;/a&gt;) and &lt;a href=&quot;https://stackoverflow.com/tags/el/info&quot;&gt;EL&lt;/a&gt; (&lt;a href=&quot;https://stackoverflow.com/tags/el/info&quot;&gt;Expression Language&lt;/a&gt;, those &lt;code&gt;${}&lt;/code&gt; things) way back in 2001.</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/tags/jsp/info&quot;&gt;JSP&lt;/a&gt;での&lt;em&gt;スクリプトレット&lt;/em&gt; （ &lt;code&gt;&amp;lt;% %&amp;gt;&lt;/code&gt; &lt;em&gt;％％&lt;/em&gt; &amp;gt;のもの）の使用は、2001年に&lt;em&gt;taglibs&lt;/em&gt; （ &lt;a href=&quot;https://stackoverflow.com/tags/jstl/info&quot;&gt;JSTLの&lt;/a&gt;ような）と&lt;a href=&quot;https://stackoverflow.com/tags/el/info&quot;&gt;EL&lt;/a&gt; （ &lt;a href=&quot;https://stackoverflow.com/tags/el/info&quot;&gt;式言語&lt;/a&gt; 、これらの &lt;code&gt;${}&lt;/code&gt; もの）が誕生して以来非常に推奨されていません。</target>
        </trans-unit>
        <trans-unit id="218a7074a3a3abead1ad3409aeb72a9cfe4b36d1" translate="yes" xml:space="preserve">
          <source>There are also component-based frameworks such as &lt;strong&gt;Wicket&lt;/strong&gt; that generate a lot of the HTML for you.  The tags that end up in the HTML are extremely basic and there is virtually no logic that gets mixed in.  The result is almost empty-like HTML pages with typical HTML elements.  The downside is that there are a lot of components in the &lt;strong&gt;Wicket&lt;/strong&gt; API to learn and some things can be difficult to achieve under those constraints.</source>
          <target state="translated">また、多くのHTMLを生成する&lt;strong&gt;Wicket&lt;/strong&gt;などのコンポーネントベースのフレームワークもあります。 HTMLで終わるタグは非常に基本的であり、混合されるロジックは事実上ありません。結果は、典型的なHTML要素を持つほとんど空のようなHTMLページです。 欠点は、 &lt;strong&gt;Wicket&lt;/strong&gt; APIには学ぶべき多くのコンポーネントがあり、これらの制約の下ではいくつかのことを達成することが難しい場合があることです。</target>
        </trans-unit>
        <trans-unit id="abcbc7b89ae11ccfa31d98b70ef4451cfb919707" translate="yes" xml:space="preserve">
          <source>There are also other options such as using a templating engine such as Velocity, Freemarker, Thymeleaf etc. But using plain JSP with EL and JSTL serves my purpose most of the time and it also seems the simplest for a beginner.</source>
          <target state="translated">他にも、Velocity,Freemarker,Thymeleafなどのテンプレートエンジンを使う方法もあります。しかし、ELやJSTLを使ったプレーンなJSPを使うのが、ほとんどの場合、私の目的に合っていますし、初心者にとっては最もシンプルな方法だと思います。</target>
        </trans-unit>
        <trans-unit id="c1ff3b8432d55d1428f36863b4e57b392badd9db" translate="yes" xml:space="preserve">
          <source>This must be added to the web application's web.xml</source>
          <target state="translated">これは、ウェブアプリケーションのweb.xmlに追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="6024548a077642e1968e58baff37a727cc4dd31b" translate="yes" xml:space="preserve">
          <source>This way dealing with different result page destinations is easier: redisplaying the form with validation errors in case of an error (in this particular example you can redisplay it using &lt;code&gt;${message}&lt;/code&gt; in &lt;a href=&quot;https://stackoverflow.com/tags/el/info&quot;&gt;EL&lt;/a&gt;), or just taking to the desired target page in case of success.</source>
          <target state="translated">このようにすると、さまざまな結果ページの宛先を簡単に処理できます。エラーが発生した場合は検証エラーを含むフォームを再表示します（この特定の例では、 &lt;a href=&quot;https://stackoverflow.com/tags/el/info&quot;&gt;ELで&lt;/a&gt; &lt;code&gt;${message}&lt;/code&gt; を使用してフォームを再表示できます）。成功の。</target>
        </trans-unit>
        <trans-unit id="5c2f2b58b23cb864bd138ae1ceef470b24b2359f" translate="yes" xml:space="preserve">
          <source>This way dealing with exceptions is easier. The DB is not accessed in the midst of JSP rendering, but far before the JSP is been displayed. You still have the possibility to change the response whenever the DB access throws an exception. In the above example, the default error 500 page will be displayed which you can anyway customize by an &lt;code&gt;&amp;lt;error-page&amp;gt;&lt;/code&gt; in &lt;code&gt;web.xml&lt;/code&gt;.</source>
          <target state="translated">この方法で例外を処理する方が簡単です。 DBは、JSPレンダリングの最中ではなく、JSPが表示されるずっと前にアクセスされます。 DBアクセスが例外をスローするたびに、応答を変更する可能性があります。 上記の例では、デフォルトのエラー500ページが表示されますが、いずれにしても &lt;code&gt;web.xml&lt;/code&gt; の &lt;code&gt;&amp;lt;error-page&amp;gt;&lt;/code&gt; でカスタマイズできます。</target>
        </trans-unit>
        <trans-unit id="3d73eb9cadb674305772ade110550c254cf89564" translate="yes" xml:space="preserve">
          <source>Use &lt;strong&gt;&lt;code&gt;JSTL Tag libraries&lt;/code&gt;&lt;/strong&gt; in JSP, that will work perfect.</source>
          <target state="translated">JSPで&lt;strong&gt; &lt;code&gt;JSTL Tag libraries&lt;/code&gt; &lt;/strong&gt;を使用すると、完璧に動作します。</target>
        </trans-unit>
        <trans-unit id="972fb805d526ef28466dd6b7247afcf3429e9d40" translate="yes" xml:space="preserve">
          <source>Use JSP Tags</source>
          <target state="translated">JSPタグを使う</target>
        </trans-unit>
        <trans-unit id="efe4cc8e2edf71091f863266b5fca3301038b019" translate="yes" xml:space="preserve">
          <source>Use MVC architecture for web application</source>
          <target state="translated">ウェブアプリケーションにMVCアーキテクチャを使用する</target>
        </trans-unit>
        <trans-unit id="c0c4ea117b4cdb87ebd6313e300e1a15bc1a004d" translate="yes" xml:space="preserve">
          <source>Use backbone , angular like javascript framework for UI design
and fetch the data using rest api. This will remove the java dependency from UI completely.</source>
          <target state="translated">UIデザインにはjavascriptフレームワークのようなbackbone、angularを使用し、残りのAPIを使用してデータを取得します。これにより、UIからjavaの依存性を完全に取り除くことができます。</target>
        </trans-unit>
        <trans-unit id="377f415dafbf7162b7e2c41493428f47026cb16c" translate="yes" xml:space="preserve">
          <source>Use it</source>
          <target state="translated">使う</target>
        </trans-unit>
        <trans-unit id="b3812e1a927a9030d7df61a9f7b76633477e4d2c" translate="yes" xml:space="preserve">
          <source>Use it like</source>
          <target state="translated">のように使用してください。</target>
        </trans-unit>
        <trans-unit id="6d7ad08fbab98413abb910036a07cbbf3706c8d5" translate="yes" xml:space="preserve">
          <source>Using Scriptlets is a very old way and Not recommended. If you want directly output something in your JSP pages just use &lt;strong&gt;Expression Language(EL)&lt;/strong&gt;  along with &lt;strong&gt;JSTL&lt;/strong&gt; .</source>
          <target state="translated">スクリプトレットの使用は非常に古い方法であり、推奨されません。 JSPページに何かを直接出力する場合は、 &lt;strong&gt;JSTL&lt;/strong&gt;とともに&lt;strong&gt;式言語（EL）を&lt;/strong&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="d2677389ab068b68879414df724ecfabd8859f86" translate="yes" xml:space="preserve">
          <source>Using scriptlets in JSPs is not a good practice.</source>
          <target state="translated">JSPでスクリプトレットを使うのは良い習慣ではありません。</target>
        </trans-unit>
        <trans-unit id="baf3fd0379691440bf2b3e4cbf92cad964713892" translate="yes" xml:space="preserve">
          <source>What's the difference between JSP, Servlet and JSF?</source>
          <target state="translated">JSP、Servlet、JSFの違いは?</target>
        </trans-unit>
        <trans-unit id="17b74992560cf4122ca5285c428807fb001749e8" translate="yes" xml:space="preserve">
          <source>When mapped on an appropriate &lt;code&gt;&amp;lt;url-pattern&amp;gt;&lt;/code&gt; covering the JSP pages of interest, then you don't need to copypaste the same piece of code overall JSP pages.</source>
          <target state="translated">対象のJSPページをカバーする適切な &lt;code&gt;&amp;lt;url-pattern&amp;gt;&lt;/code&gt; にマップする場合は、JSPページ全体に同じコードをコピーして貼り付ける必要はありません。</target>
        </trans-unit>
        <trans-unit id="01de0b031979bcf7bb834c121a66d1089532c613" translate="yes" xml:space="preserve">
          <source>Where possible, &lt;strong&gt;avoid JSP scriptlets&lt;/strong&gt; whenever tag libraries provide equivalent functionality. This makes pages easier to read and maintain, helps to separate business logic from presentation logic, and will make your pages easier to evolve into JSP 2.0-style pages (JSP 2.0 Specification supports but de-emphasizes the use of scriptlets).</source>
          <target state="translated">タグライブラリが同等の機能を提供する場合は、 &lt;strong&gt;JSPスクリプトレットを&lt;/strong&gt;可能な限り&lt;strong&gt;避けてください&lt;/strong&gt; 。 これにより、ページが読みやすくなり、保守が容易になり、ビジネスロジックとプレゼンテーションロジックを分離しやすくなり、ページがJSP 2.0スタイルのページに進化しやすくなります（JSP 2.0仕様では、スクリプトレットの使用はサポートされていますが、それほど重視されていません）。</target>
        </trans-unit>
        <trans-unit id="01f59bf1a510897a780d5b0160084a576e832196" translate="yes" xml:space="preserve">
          <source>Wicket is also an alternative which completely separates java from html, so a designer and programmer can work together and on different sets of code with little understanding of each other.</source>
          <target state="translated">Wicketはまた、javaとhtmlを完全に分離する代替手段でもあるので、デザイナーとプログラマーは、お互いのことをほとんど理解していなくても、一緒に、異なるコードのセットで作業することができます。</target>
        </trans-unit>
        <trans-unit id="b75de34560a918f4ac6c5fab856eab492b0b22c7" translate="yes" xml:space="preserve">
          <source>Wicket may be evil too (performance, toilsome for small apps or simple view tier)</source>
          <target state="translated">ウィケットも悪かもしれない(性能、小さいアプリやシンプルな表示層には面倒くさい</target>
        </trans-unit>
        <trans-unit id="aab83ba5ea14f383f9f61cd2b8c7c97740eddee3" translate="yes" xml:space="preserve">
          <source>With XML-style tags which fit nicely among all that HTML, the code is better readable (and thus better maintainable) than a bunch of scriptlets with various opening and closing braces (&lt;em&gt;&quot;Where the heck does this closing brace belong to?&quot;&lt;/em&gt;). An easy aid is to configure your web application to throw an exception whenever &lt;em&gt;scriptlets&lt;/em&gt; are still been used by adding the following piece to &lt;code&gt;web.xml&lt;/code&gt;:</source>
          <target state="translated">すべてのHTMLの中にうまく収まるXMLスタイルのタグを使用すると、コードは、さまざまな開き括弧と閉じ括弧を備えた一連のスクリプトレットよりも読みやすく（したがって、保守性が向上します）（ &lt;em&gt;「この括弧はどこに属しているのですか？」&lt;/em&gt; ）。 次のピースを &lt;code&gt;web.xml&lt;/code&gt; に追加することにより、 &lt;em&gt;スクリプトレット&lt;/em&gt;がまだ使用されている場合は常に例外をスローするようにWebアプリケーションを構成するのが簡単です。</target>
        </trans-unit>
        <trans-unit id="4c2bf52d41e06e8a6a1ac6943b1e400cec513ec0" translate="yes" xml:space="preserve">
          <source>You can easily call the child.jsp file from your controller. This also works nice with the struts framework</source>
          <target state="translated">コントローラからchild.jspファイルを簡単に呼び出すことができます。これはstrutsフレームワークの</target>
        </trans-unit>
        <trans-unit id="ec25fe25e9b159c96d4f928b8e4b3bb1e43e1359" translate="yes" xml:space="preserve">
          <source>You can use JSTL tags together with EL expressions to avoid intermixing Java and HTML code:</source>
          <target state="translated">JSTLタグとEL表現を併用することで、JavaコードとHTMLコードが混在しないようにすることができます。</target>
        </trans-unit>
        <trans-unit id="eb8afc4289a7ce63d3c4d9c0cdfed01af3cd38db" translate="yes" xml:space="preserve">
          <source>You can use tab library tags like &lt;strong&gt;JSTL&lt;/strong&gt; in addition to Expression Language (&lt;strong&gt;EL&lt;/strong&gt;). But EL does not work well with JSP. So it's is probably better to drop JSP completely and use &lt;strong&gt;Facelets&lt;/strong&gt;.</source>
          <target state="translated">式言語（ &lt;strong&gt;EL&lt;/strong&gt; ）に加えて、 &lt;strong&gt;JSTLの&lt;/strong&gt;ようなタブライブラリタグを使用できます。 しかし、ELはJSPではうまく機能しません。 そのため、JSPを完全に削除し、 &lt;strong&gt;Facelets&lt;/strong&gt;を使用することをお&lt;strong&gt;勧めし&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="48dd74417b4ebc09a65eea14b7b8611e65edcdff" translate="yes" xml:space="preserve">
          <source>You can use tag not only to avoid java but also minimize your HTML codes. I myself try to review HTML codes and build tags a lot as soon as see code duplicates start in my pages.</source>
          <target state="translated">タグを使えばjavaを避けるだけでなく、HTMLコードを最小限に抑えることができます。私自身は、自分のページでコードの重複が始まるとすぐにHTMLコードを見直してタグをたくさん作るようにしています。</target>
        </trans-unit>
        <trans-unit id="6885c7a4e9ed902334d26715dd6b36e91c4fb7ea" translate="yes" xml:space="preserve">
          <source>You raised a good question and although you got good answers, I would suggest that you get rid of JSP. It is outdated technology which eventually will die. Use a modern approach, like template engines. You will have very clear separation of business and presentation layers, and certainly no Java code in templates, so you can generate templates directly from web presentation editing software, in most cases leveraging WYSIWYG.</source>
          <target state="translated">あなたは良い質問をして、良い答えを得ましたが、私はJSPを取り除くことを提案します。それは時代遅れの技術であり、最終的には死ぬでしょう。テンプレートエンジンのような現代的なアプローチを使用してください。あなたは、ビジネスとプレゼンテーション層の非常に明確な分離を持っているでしょうし、確かにテンプレート内のJavaコードはありませんので、あなたは、ほとんどの場合、WYSIWYGを活用して、Webプレゼンテーション編集ソフトウェアから直接テンプレートを生成することができます。</target>
        </trans-unit>
        <trans-unit id="438273965ed8aa8796321fe5db1f2057f772a67b" translate="yes" xml:space="preserve">
          <source>You should read something about MVC. &lt;a href=&quot;http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/mvc.html&quot;&gt;Spring MVC&lt;/a&gt; &amp;amp; &lt;a href=&quot;http://struts.apache.org/2.1.8.1/index.html&quot;&gt;Struts 2&lt;/a&gt; are the two most common solutions.</source>
          <target state="translated">あなたはMVCについて何かを読むべきです。 &lt;a href=&quot;http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/mvc.html&quot;&gt;Spring MVC&lt;/a&gt;と&lt;a href=&quot;http://struts.apache.org/2.1.8.1/index.html&quot;&gt;Struts 2&lt;/a&gt;は、最も一般的な2つのソリューションです。</target>
        </trans-unit>
        <trans-unit id="b8ab5363e1e6302f03570a1b8e0ae9b88cbfdce5" translate="yes" xml:space="preserve">
          <source>a. Standard Tags</source>
          <target state="translated">a.標準タグ</target>
        </trans-unit>
        <trans-unit id="04f6e1d2c89d5b0154e152d11433b9186a0b3846" translate="yes" xml:space="preserve">
          <source>b. Custom Tags</source>
          <target state="translated">b.カスタムタグ</target>
        </trans-unit>
        <trans-unit id="91fe1449aaf03867f86a0b155fcee28ddfd0f9e8" translate="yes" xml:space="preserve">
          <source>compile the following code into WEB-INF\classes\com\java2s</source>
          <target state="translated">以下のコードをWEB-INFにコンパイルします。</target>
        </trans-unit>
        <trans-unit id="a3aca3110daeea1fa393016d5451337f69813249" translate="yes" xml:space="preserve">
          <source>create File:java2s.tld in the /WEB-INF/</source>
          <target state="translated">WEB-INFにFile:java2s.tldを作成します。</target>
        </trans-unit>
        <trans-unit id="347e7a992309f255fbabef719461f73688c0b617" translate="yes" xml:space="preserve">
          <source>if you simply want to avoid the drawbacks of Java coding in JSP you can do so even with scriplets. Just follow some discipline to have minimal Java in JSP and almost no calculation and logic in the JSP page.</source>
          <target state="translated">もしあなたが単にJSPでJavaコーディングの欠点を避けたいのであれば、スクリプレットでもそうすることができます。JSPでJavaを最小限にして、JSPページの計算やロジックをほとんど使わないようにするために、いくつかの規律に従ってください。</target>
        </trans-unit>
        <trans-unit id="5cc12c11e0ce089f9fb529b087b6387795003c7c" translate="yes" xml:space="preserve">
          <source>in order to avoid java code in JSP files java now provides tag libraries like JSTL also java has come up with JSF into which u can write all programming structures in the form of tags</source>
          <target state="translated">JSPファイル内のJavaコードを回避するために、Javaは今JSTLのようなタグライブラリを提供していますまた、Javaは、タグの形ですべてのプログラミング構造を記述することができますにJSFを考え出している</target>
        </trans-unit>
        <trans-unit id="95d9818e59ca8aa7c7ec1cf5d55885788554dd7a" translate="yes" xml:space="preserve">
          <source>is an old school way of coding and in JSP version 2 there exists a method to avoid Java code in JSP files. Can someone please tell me the alternative JSP 2 lines, and what this technique is called?</source>
          <target state="translated">はコーディングの古い学校の方法であり、JSPバージョン2では、JSPファイル内のJavaコードを回避する方法が存在します。誰かが私に代替のJSP 2行を教えてくださいすることができますか、そして、このテクニックは何と呼ばれていますか?</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
