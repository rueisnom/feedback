<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/31816095">
    <body>
      <group id="31816095">
        <trans-unit id="ed51437f4e3d2eef017e692b9bfd62b6feec3005" translate="yes" xml:space="preserve">
          <source>#include &amp;lt;bits/stdc++.h&amp;gt; with visual studio does not compile</source>
          <target state="translated">#include &amp;lt;bits / stdc ++。h&amp;gt; with Visual Studioがコンパイルされない</target>
        </trans-unit>
        <trans-unit id="6ecbd70d981a33fd6e16bc244252d711604a53c5" translate="yes" xml:space="preserve">
          <source>&amp;lt;bits/stdc++.h&amp;gt; also carries a warning:</source>
          <target state="translated">&amp;lt;bits / stdc ++。h&amp;gt;にも警告が表示されます。</target>
        </trans-unit>
        <trans-unit id="ac0a980e9727549af0b1b4493ff29a3628c9259a" translate="yes" xml:space="preserve">
          <source>17.6.1.2 Headers [headers]</source>
          <target state="translated">17.6.1.2 ヘッダー [ヘッダー]</target>
        </trans-unit>
        <trans-unit id="e06b1808529277b7c27259e1c0d5ea1302f93451" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://en.wikipedia.org/wiki/Code_golf&quot;&gt;Code Golf&lt;/a&gt; is &quot;a type of recreational computer programming competition in which participants strive to achieve the shortest possible source code that implements a certain algorithm.&quot; In the answers on the PP&amp;amp;CG site, you'll see people specify the number of bytes in their answers. When they find a way to shave off a few bytes, they'll strike out the original number and record the new one.</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/Code_golf&quot;&gt;コードゴルフ&lt;/a&gt;は「参加者が特定のアルゴリズムを実装する最短のソースコードを達成するために努力するレクリエーションのコンピュータプログラミングコンテストの一種です。」 PP＆CGサイトの回答では、回答のバイト数を指定しているのがわかります。 彼らが数バイトを削り取る方法を見つけたとき、彼らは元の数を取り除き、新しいものを記録します。</target>
        </trans-unit>
        <trans-unit id="3211abdfc1183d3b4d79d96ffbae6dc7b2ce2519" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;To anyone writing such &quot;tutorials&quot;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;そんな「チュートリアル」を書いている方へ&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="103d03c4c1cf54adf8cc719dbddd0279dce1b20c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Don't do it!&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;やめろ！&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7f444cf0ef37c345704f21b46365415326764cd5" translate="yes" xml:space="preserve">
          <source>As you might expect, code golfing rewards extreme programming language abuse. One-letter variable names. No whitespace. Creative use of library functions. Undocumented features. Nonstandard programming practices. Appalling hacks.</source>
          <target state="translated">お察しの通り、コードゴルフは極端なプログラミング言語の乱用に報います。1文字の変数名 空白なし。ライブラリ関数の独創的な使用。文書化されていない機能 標準外のプログラミング方法。驚愕のハック</target>
        </trans-unit>
        <trans-unit id="3e07d03fd8d5df3e7056370a22fdb378d3907093" translate="yes" xml:space="preserve">
          <source>Each element of the C++ standard library is declared or defined (as appropriate) in a header.</source>
          <target state="translated">C++標準ライブラリの各要素は、ヘッダーで宣言または定義されています(必要に応じて)。</target>
        </trans-unit>
        <trans-unit id="4c2c5decb38ee215c6329ae20f0aec7161fc2d91" translate="yes" xml:space="preserve">
          <source>Even just upgrading your compiler to its own next version may break your program</source>
          <target state="translated">コンパイラを独自の次のバージョンにアップグレードするだけでも、プログラムが壊れてしまう可能性があります。</target>
        </trans-unit>
        <trans-unit id="c9a48c02521331a393d7f0fa745303b95698e194" translate="yes" xml:space="preserve">
          <source>Every single standard header must be parsed and compiled along with your source code, which is slow and results in a bulky executable under certain compilation settings</source>
          <target state="translated">すべての標準ヘッダはソースコードと一緒に解析してコンパイルしなければなりませんが、特定のコンパイル設定の下では遅く、結果的に実行ファイルがかさばることになります。</target>
        </trans-unit>
        <trans-unit id="a553598db8ffe9c4b23b1f5050dc29054fc5a380" translate="yes" xml:space="preserve">
          <source>Example of why Quora is bad:</source>
          <target state="translated">Quoraが悪い理由の例。</target>
        </trans-unit>
        <trans-unit id="8ebcae3327c1699056869c34171c65eee91d0f63" translate="yes" xml:space="preserve">
          <source>From N4606, Working Draft, Standard for Programming Language C++ :</source>
          <target state="translated">プログラミング言語C++の標準作業ドラフトN4606より。</target>
        </trans-unit>
        <trans-unit id="0184ce24529753c881fd7b500e60a2ba54cbbf8c" translate="yes" xml:space="preserve">
          <source>How does #include &amp;lt;bits/stdc++.h&amp;gt; work in C++?</source>
          <target state="translated">#include &amp;lt;bits / stdc ++。h&amp;gt;はC ++でどのように機能しますか？</target>
        </trans-unit>
        <trans-unit id="43c2302ab3b0c2be1034d114bbfcc212096623d3" translate="yes" xml:space="preserve">
          <source>I have discovered - to my horror and disbelief - that there is a well-known tutorial site where &lt;strong&gt;every C++ example seems to include this header&lt;/strong&gt;. The world is mad. That's the proof.</source>
          <target state="translated">私は、私の恐怖と信じられないことに、 &lt;strong&gt;すべてのC ++の例にこのヘッダーが含まれているように見える&lt;/strong&gt;有名なチュートリアルサイトがあることを発見しました。 世界は狂っています。 それが証明です。</target>
        </trans-unit>
        <trans-unit id="fbad24faa4e61b994b21dc2f0d9cc187d72e80a3" translate="yes" xml:space="preserve">
          <source>I imagine the advantages are vaguely given thus:</source>
          <target state="translated">メリットはこうして漠然と与えられているのではないかと想像しています。</target>
        </trans-unit>
        <trans-unit id="d2b694e37fa77d5c6edd569c688ffd8b7d23e91c" translate="yes" xml:space="preserve">
          <source>I posted a question with my code whose only &lt;code&gt;#include&lt;/code&gt; directive was the following:</source>
          <target state="translated">&lt;code&gt;#include&lt;/code&gt; ディレクティブが次のコードのみであるコードを使用して質問を投稿しました。</target>
        </trans-unit>
        <trans-unit id="39aa15acd0fb4495d7dd505f9c2dadbb295911f9" translate="yes" xml:space="preserve">
          <source>If a programmer submitted a pull request at work containing golf-style code, it would be rejected. Their co-workers would laugh at them. Their manager would drop by their desk for a chat. Even so, programmers amuse themselves by submitting answers to PP&amp;amp;CG.</source>
          <target state="translated">プログラマーがゴルフ形式のコードを含む職場でプルリクエストを送信した場合、そのリクエストは拒否されます。 彼らの同僚は彼らを笑いました。 彼らのマネージャーはチャットのために机に立ち寄ります。 それでも、プログラマーはPP＆CGに回答を送信することで自分自身を楽しませます。</target>
        </trans-unit>
        <trans-unit id="092e89e5ff285bc6c183da6d4b6bb3ce152138cf" translate="yes" xml:space="preserve">
          <source>Including &lt;code&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/code&gt; appears to be an increasingly common thing to see on Stack Overflow, perhaps something newly added to a national curriculum in the current academic year.</source>
          <target state="translated">&lt;code&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/code&gt; を含めることは、おそらく現在の学年度の国家カリキュラムに新しく追加されたものであると思われる、Stack Overflowでますます一般的になるようです。</target>
        </trans-unit>
        <trans-unit id="57ddd425c34e4cd9a35bbeb5d9f553933c0e92ec" translate="yes" xml:space="preserve">
          <source>Is it good practice to use #include &amp;lt;bits/stdc++.h&amp;gt; in programming contests instead of listing a lot of includes?</source>
          <target state="translated">多くのインクルードをリストする代わりに、プログラミングコンテストで#include &amp;lt;bits / stdc ++。h&amp;gt;を使用することは良い習慣ですか？</target>
        </trans-unit>
        <trans-unit id="9b9c10639efdd8d26d8cec07869f9fdddcd449b9" translate="yes" xml:space="preserve">
          <source>Is this is a good idea? Let's check the list of disadvantages. Portability? It doesn't matter since these coding events use a specific compiler version that contestants know in advance. Standards compliance? Not relevant for a block of code whose useful life is less than one hour. Compile time and executable size? These aren't part of the contest's scoring rubric.</source>
          <target state="translated">これは良いことなのか?デメリットを一覧で確認してみましょう。移植性?これらのコーディングイベントでは、出場者が事前に知っている特定のコンパイラのバージョンを使用しているので、問題ではありません。標準に準拠しているか? 有用期間が1時間未満のコードブロックには関係ありません。コンパイル時間と実行可能サイズ? これらはコンテストの採点基準には含まれていません。</target>
        </trans-unit>
        <trans-unit id="1bb033406448459223d5a7d15243f4e41b9f1e8b" translate="yes" xml:space="preserve">
          <source>It turns out that some people like &lt;em&gt;programming puzzles&lt;/em&gt; without the &lt;em&gt;code golf&lt;/em&gt;. They get together and compete at events like ACM-ICPC, Google Code Jam, and Facebook Hacker Cup, or on sites like Topcoder and Codeforces. Their rank is based on program correctness, execution speed, and how fast they submit a solution. To maximize execution speed, many participants use C++. To maximize coding speed, some of them use &lt;code&gt;stdc++.h&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;コードゴルフ&lt;/em&gt;なしで&lt;em&gt;パズル&lt;/em&gt;を&lt;em&gt;プログラミング&lt;/em&gt;するのが好きな人もいることが&lt;em&gt;わかり&lt;/em&gt;ます。 彼らは集まり、ACM-ICPC、Google Code Jam、Facebook Hacker Cupなどのイベント、またはTopcoderやCodeforcesなどのサイトで競争します。 それらのランクは、プログラムの正確さ、実行速度、およびソリューションの提出速度に基づいています。 実行速度を最大にするために、多くの参加者がC ++を使用しています。 コーディング速度を最大にするために、 &lt;code&gt;stdc++.h&lt;/code&gt; 使用するものもあります。</target>
        </trans-unit>
        <trans-unit id="276e91294003c9b29f02eac0dfe3d7a6af1beb09" translate="yes" xml:space="preserve">
          <source>It will probably only work on that compiler</source>
          <target state="translated">おそらくそのコンパイラでしか動作しないでしょう</target>
        </trans-unit>
        <trans-unit id="02febe21fcd28cd0e0816a5ad762195185c7e4e5" translate="yes" xml:space="preserve">
          <source>More information:</source>
          <target state="translated">詳細はこちら</target>
        </trans-unit>
        <trans-unit id="bcfbf234d0ab16edf4f16becb196eeedff573a93" translate="yes" xml:space="preserve">
          <source>My teacher told me to do this, but in the comments section I was informed that I shouldn't.</source>
          <target state="translated">先生にも言われましたが、コメント欄では「やめた方がいい」と言われました。</target>
        </trans-unit>
        <trans-unit id="ac97e8b3520949916bee5c469c50f3d4daf6457c" translate="yes" xml:space="preserve">
          <source>P.P.S. No, there was no practical need for it. There aren't that many C++ standard headers, and they are well documented. If you teach, you're doing your students a disservice by adding such &quot;magic&quot;. Producing programmers with a magical mindset is the last thing we want. If you need to offer students a subset of C++ to make their life easier, just produce a handout with the short list of headers applicable to the course you teach, and with concise documentation for the library constructs you expect the students to use.</source>
          <target state="translated">P.P.S.いいえ、実用的な必要性はありませんでした。C++の標準ヘッダはそれほど多くはありませんし、よく文書化されています。もしあなたが教えているのであれば、このような「魔法」を追加することで、あなたは生徒に不利益を与えていることになります。魔法のような考え方を持ったプログラマを輩出することは、私たちが望んでいないことです。学生の生活を楽にするために C++のサブセットを提供する必要がある場合は、あなたが教えるコースに適用可能なヘッダの短いリストと、学生が使用することを期待しているライブラリ構成の簡潔なドキュメントを含むハンドアウトを作成すればよいのです。</target>
        </trans-unit>
        <trans-unit id="4a09a488bdc9357434491d46f0d8824b89fa0bd2" translate="yes" xml:space="preserve">
          <source>P.S. I can well imagine the abominable &quot;teaching standard&quot; where this wicked idea might have taken place, and the circumstances that led to it. Just because there seemed to be a practical need for it doesn't make it acceptable - not even in retrospect.</source>
          <target state="translated">追伸:この邪悪な考えが行われたかもしれない忌まわしい「教育基準」と、それに至るまでの状況はよく想像できます。実用的な必要性があったと思われるからといって、それが受け入れられるわけではありません-振り返ってみても、そうではありません。</target>
        </trans-unit>
        <trans-unit id="4b2999cdf881fb72dc6b19fbf71bddb6426b99a3" translate="yes" xml:space="preserve">
          <source>Please stop using this header. Forget about it. Don't propagate this insanity. If you're unwilling to understand why doing this is &lt;strong&gt;Wrong&lt;/strong&gt;, take my word for it. I'm not OK being treated as a figure of authority on anything at all, and I'm probably full of it half the time, but I'll make an exception in this one case only. I claim that I know what I'm talking about here. Take me on my word. I implore you.</source>
          <target state="translated">このヘッダーの使用を中止してください。 気にしないで。 この狂気を広めないでください。 なぜこれが&lt;strong&gt;間違っ&lt;/strong&gt;ているのかを理解したくない場合は、私の言葉を&lt;strong&gt;信じ&lt;/strong&gt;てください。 私は何に対しても権威のある人物として扱われることはまったく問題であり、おそらく半分の時間でそれで満たされていますが、この1つの場合にのみ例外を設けます。 私はここで私が話していることを知っていると主張します。 私の言葉を聞いてください。 お願いします。</target>
        </trans-unit>
        <trans-unit id="44bd43ed0ebc5577cb5d3e9e1657a65ee44651ab" translate="yes" xml:space="preserve">
          <source>So the question of whether to use &lt;code&gt;stdc++.h&lt;/code&gt; comes down to whether the coding speed benefits in a programming contest outweigh the bad habits that one might develop by using it.</source>
          <target state="translated">したがって、 &lt;code&gt;stdc++.h&lt;/code&gt; を使用するかどうかの問題は、プログラミングコンテストでのコーディング速度の利点が、それを使用することで開発される可能性のある悪い習慣を上回っているかどうかに帰着します 。</target>
        </trans-unit>
        <trans-unit id="239a2260863a483f3ec3cdd90b3634e5b45b8495" translate="yes" xml:space="preserve">
          <source>So we're left with bad habits. This is a valid objection. By using this header file, contestants are avoiding the chance to learn which standard header file defines the functionality they're using in their program. When they're writing real-world code (and not using &lt;code&gt;stdc++.h&lt;/code&gt;) they'll have to spend time looking up this information, which means they'll be less productive. That's the downside of practicing with &lt;code&gt;stdc++.h&lt;/code&gt;.</source>
          <target state="translated">だから私たちは悪い習慣に取り残されています。 これは有効な異論です。 このヘッダーファイルを使用することにより、参加者は、プログラムで使用している機能を定義している標準ヘッダーファイルを知る機会を避けています。 &lt;code&gt;stdc++.h&lt;/code&gt; を使用せずに実際のコードを記述しているときは、この情報の検索に時間を費やす必要があるため、生産性が低下します。 これが &lt;code&gt;stdc++.h&lt;/code&gt; で練習することの欠点です。</target>
        </trans-unit>
        <trans-unit id="39ec4f2a5d5a066178d0d4fb1ad88c01109b0604" translate="yes" xml:space="preserve">
          <source>Table 14 &amp;mdash; C++ library headers</source>
          <target state="translated">表14 &amp;mdash; C ++ライブラリヘッダー</target>
        </trans-unit>
        <trans-unit id="217e579d4314a3e6967ebc9146377a5722bc851e" translate="yes" xml:space="preserve">
          <source>The C++ standard library provides 61 C++ library headers, as shown in Table 14.</source>
          <target state="translated">C++標準ライブラリには、表14に示すように61個のC++ライブラリヘッダが用意されています。</target>
        </trans-unit>
        <trans-unit id="a9bcd4e2c8add93cbb911e47b0c2044336636190" translate="yes" xml:space="preserve">
          <source>The disadvantages include:</source>
          <target state="translated">デメリットとしては、以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="4413e8a45b5f2173516c7d64e16d2bcef3437c9a" translate="yes" xml:space="preserve">
          <source>There's a Stack Exchange site called &lt;a href=&quot;https://codegolf.stackexchange.com/&quot;&gt;Programming Puzzles &amp;amp; Code Golf&lt;/a&gt;. The &lt;em&gt;programming puzzles&lt;/em&gt; on that site fit this definition of &lt;a href=&quot;https://www.dictionary.com/browse/puzzle&quot;&gt;puzzle&lt;/a&gt;:</source>
          <target state="translated">「 &lt;a href=&quot;https://codegolf.stackexchange.com/&quot;&gt;Programming Puzzles＆Code Golf」&lt;/a&gt;というStack Exchangeサイトがあります。 そのサイトの&lt;em&gt;プログラミングパズル&lt;/em&gt;は、次の&lt;a href=&quot;https://www.dictionary.com/browse/puzzle&quot;&gt;パズルの&lt;/a&gt;定義に適合しています。</target>
        </trans-unit>
        <trans-unit id="5ff0be9e34d030520485c268606b44e79d1ef4eb" translate="yes" xml:space="preserve">
          <source>There's no &amp;lt;bits/stdc++.h&amp;gt; there. This is not surprising, since &amp;lt;bits/...&amp;gt; headers are  implementation detail, and usually carry a warning:</source>
          <target state="translated">&amp;lt;bits / stdc ++。h&amp;gt;はありません。 &amp;lt;bits / ...&amp;gt;ヘッダーは実装の詳細であり、通常は警告が表示されるため、これは当然のことです。</target>
        </trans-unit>
        <trans-unit id="e68d42367e8df8d019d55f5601b98691429390ca" translate="yes" xml:space="preserve">
          <source>These are all valid and correct objections. So why would anyone use this monstrosity?</source>
          <target state="translated">これらはすべて有効で正しい反論です。ではなぜ誰もがこの怪物を使うのか?</target>
        </trans-unit>
        <trans-unit id="ae5dc0af222ddcc786d29fc134d10a103d3487a0" translate="yes" xml:space="preserve">
          <source>They are designed to amuse, and not in the way that a working programmer might be amused by a real-world problem encountered in their daily work.</source>
          <target state="translated">彼らは楽しませるために設計されており、プログラマーが日々の仕事の中で遭遇する現実世界の問題を楽しませるような方法ではありません。</target>
        </trans-unit>
        <trans-unit id="d760db932e13a0248bfa450b6787a1b76a2a588b" translate="yes" xml:space="preserve">
          <source>This question asks: &quot;Why should I not #include &lt;code&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/code&gt;?&quot; I realize that it was asked and answered to make a point, and the accepted answer is intended to be the One True Answer to this question. But the question isn't &quot;Why should I not #include &lt;code&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/code&gt; in production code?&quot; Therefore, I think it's reasonable to consider other scenarios where the answer may be different.</source>
          <target state="translated">この質問は、「なぜ &lt;code&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/code&gt; すべきではないのですか？」と尋ねます。 私はそれがポイントを作るために尋ねられて答えられたことを理解し、受け入れられた答えはこの質問に対する唯一の真の答えとなることを意図しています。 しかし、問題は「なぜプロダクションコードに#includes &lt;code&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/code&gt; ないのか」ではありません。 したがって、答えが異なる可能性のある他のシナリオを検討することは合理的だと思います。</target>
        </trans-unit>
        <trans-unit id="41b7148ed2c1a282d26cd8b52ba1e74a804e3f78" translate="yes" xml:space="preserve">
          <source>This raises the question of why it's worth taking part in competitive programming at all if it encourages bad habits like using &lt;code&gt;stdc++.h&lt;/code&gt; and violating other coding standards. One answer is that people do it for the same reason they post programs on PP&amp;amp;CG: some programmers find it enjoyable to use their coding skills in a game-like context.</source>
          <target state="translated">これは、 &lt;code&gt;stdc++.h&lt;/code&gt; を使用したり 、他のコーディング標準に違反したりするような悪い習慣を助長するのであれば、なぜ競争プログラミングに参加する価値があるのか​​という疑問を提起します。 その答えの1つは、PP＆CGにプログラムを投稿するのと同じ理由で人々がそうすることです。一部のプログラマーは、ゲームのようなコンテキストでコーディングスキルを使用するのが楽しいと感じています。</target>
        </trans-unit>
        <trans-unit id="425b4e7136346e6ed916db66ddbe629bd2fbc1cf" translate="yes" xml:space="preserve">
          <source>Unfortunately, this is a lazy hack, naming a GCC internal header directly instead of individual standard headers like &lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;iostream&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;vector&amp;gt;&lt;/code&gt;. It ruins portability and fosters terrible habits.</source>
          <target state="translated">残念ながら、これは遅延ハックであり、 &lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;iostream&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;vector&amp;gt;&lt;/code&gt; のような個々の標準ヘッダーではなく、GCC内部ヘッダーに直接名前を付けます。 移植性を台無しにし、ひどい習慣を助長します。</target>
        </trans-unit>
        <trans-unit id="5a129d811454321d42b960a8844a971ce2ad3179" translate="yes" xml:space="preserve">
          <source>What does this have to do with &lt;code&gt;stdc++.h&lt;/code&gt;? As others have pointed out, using it is lazy. It's non-portable, so you don't know if it will work on your compiler or the next version of your compiler. It fosters bad habits. It's non-standard, so your program's behavior may differ from what you expect. It may increase compile time and executable size.</source>
          <target state="translated">これは &lt;code&gt;stdc++.h&lt;/code&gt; とどのように関係していますか？ 他の人が指摘したように、それを使用するのは面倒です。 移植性がないため、コンパイラで動作するか、コンパイラの次のバージョンで動作するかはわかりません。 悪い習慣を助長します。 これは非標準であるため、プログラムの動作は予想と異なる場合があります。 コンパイル時間と実行可能ファイルのサイズが増える可能性があります。</target>
        </trans-unit>
        <trans-unit id="b1e1b88691fe90d726866ebcfc2e83f6bde1d68c" translate="yes" xml:space="preserve">
          <source>Why should I not #include &lt;bits/stdc++.h&gt;</source>
          <target state="translated">#includeしてはならない理由 &lt;bits stdc++.h=&quot;&quot;&gt;&lt;/bits&gt;</target>
        </trans-unit>
        <trans-unit id="d77989c1e3c0e0ace735631597dc367ffdfa6f32" translate="yes" xml:space="preserve">
          <source>Why?</source>
          <target state="translated">Why?</target>
        </trans-unit>
        <trans-unit id="cf5f824e155c7cb15ad3bacefc6661ba7e021d0c" translate="yes" xml:space="preserve">
          <source>Why? Because it is used as if it was supposed to be a C++ standard header, but no standard mentions it. So your code is non-portable by construction. You won't find any documentation for it on &lt;a href=&quot;https://en.cppreference.com&quot;&gt;cppreference&lt;/a&gt;. So it might as well not exist. It's a figment of someone's imagination :)</source>
          <target state="translated">どうして？ C ++の標準ヘッダーであるかのように使用されているが、標準で言及されていないため。 そのため、コードは構造上、移植不可能です。 &lt;a href=&quot;https://en.cppreference.com&quot;&gt;cppreferenceに&lt;/a&gt;ドキュメントはありません。 したがって、存在しない可能性もあります。 それは誰かの想像力の象徴です:)</target>
        </trans-unit>
        <trans-unit id="2fbd6990a9110b4fd96777704dbf54e19d3a4b34" translate="yes" xml:space="preserve">
          <source>You do not need to look up which standard header everything is in</source>
          <target state="translated">すべてのものがどの標準ヘッダにあるかを調べる必要はありません。</target>
        </trans-unit>
        <trans-unit id="1b1ac8fc863c0a29c5c317291e3b4fa874ab4030" translate="yes" xml:space="preserve">
          <source>You have no idea what it'll do when you use it, because its contents are not set by a standard</source>
          <target state="translated">使ってみても何をするかわからない、というのは、その内容が標準的な</target>
        </trans-unit>
        <trans-unit id="cbc564b39675bbed0ed122414e264322c63d09f9" translate="yes" xml:space="preserve">
          <source>You only need write one &lt;code&gt;#include&lt;/code&gt; line</source>
          <target state="translated">&lt;code&gt;#include&lt;/code&gt; 行を1つ書くだけです</target>
        </trans-unit>
        <trans-unit id="a537225c59d3274a443f8f17c0de8efb398362a9" translate="yes" xml:space="preserve">
          <source>a toy, problem, or other contrivance designed to amuse by presenting difficulties to be solved by ingenuity or patient effort.</source>
          <target state="translated">工夫や忍耐力で解決できる困難を提示して楽しませようとしています。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
