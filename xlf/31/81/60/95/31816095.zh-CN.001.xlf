<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/31816095">
    <body>
      <group id="31816095">
        <trans-unit id="ed51437f4e3d2eef017e692b9bfd62b6feec3005" translate="yes" xml:space="preserve">
          <source>#include &amp;lt;bits/stdc++.h&amp;gt; with visual studio does not compile</source>
          <target state="translated">Visual Studio #include &amp;lt;bits / stdc ++。h&amp;gt;无法编译</target>
        </trans-unit>
        <trans-unit id="6ecbd70d981a33fd6e16bc244252d711604a53c5" translate="yes" xml:space="preserve">
          <source>&amp;lt;bits/stdc++.h&amp;gt; also carries a warning:</source>
          <target state="translated">&amp;lt;bits / stdc ++。h&amp;gt;也带有警告：</target>
        </trans-unit>
        <trans-unit id="ac0a980e9727549af0b1b4493ff29a3628c9259a" translate="yes" xml:space="preserve">
          <source>17.6.1.2 Headers [headers]</source>
          <target state="translated">17.6.1.2 标头[标头]</target>
        </trans-unit>
        <trans-unit id="e06b1808529277b7c27259e1c0d5ea1302f93451" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://en.wikipedia.org/wiki/Code_golf&quot;&gt;Code Golf&lt;/a&gt; is &quot;a type of recreational computer programming competition in which participants strive to achieve the shortest possible source code that implements a certain algorithm.&quot; In the answers on the PP&amp;amp;CG site, you'll see people specify the number of bytes in their answers. When they find a way to shave off a few bytes, they'll strike out the original number and record the new one.</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/Code_golf&quot;&gt;Code Golf&lt;/a&gt;是&amp;ldquo;一种休闲型计算机编程竞赛，参赛者努力实现实现某种算法的最短源代码。&amp;rdquo; 在PP＆CG网站上的答案中，您会看到人们在他们的答案中指定了字节数。 当他们找到一种方法来减少一些字节时，他们会删除原始数字并记录新的数字。</target>
        </trans-unit>
        <trans-unit id="3211abdfc1183d3b4d79d96ffbae6dc7b2ce2519" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;To anyone writing such &quot;tutorials&quot;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;对于任何编写此类&amp;ldquo;教程&amp;rdquo;的人&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="103d03c4c1cf54adf8cc719dbddd0279dce1b20c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Don't do it!&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;不要做！&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7f444cf0ef37c345704f21b46365415326764cd5" translate="yes" xml:space="preserve">
          <source>As you might expect, code golfing rewards extreme programming language abuse. One-letter variable names. No whitespace. Creative use of library functions. Undocumented features. Nonstandard programming practices. Appalling hacks.</source>
          <target state="translated">正如你所期望的那样,代码打高尔夫球会奖励极端的编程语言滥用。一个字母的变量名。没有留白空间。库函数的创造性使用。未被记录的功能。非标准的编程实践。骇人听闻的黑客。</target>
        </trans-unit>
        <trans-unit id="3e07d03fd8d5df3e7056370a22fdb378d3907093" translate="yes" xml:space="preserve">
          <source>Each element of the C++ standard library is declared or defined (as appropriate) in a header.</source>
          <target state="translated">C++标准库中的每一个元素都在一个标题中声明或定义(根据需要)。</target>
        </trans-unit>
        <trans-unit id="4c2c5decb38ee215c6329ae20f0aec7161fc2d91" translate="yes" xml:space="preserve">
          <source>Even just upgrading your compiler to its own next version may break your program</source>
          <target state="translated">即使只是将你的编译器升级到自己的下一个版本,也可能会破坏你的程序。</target>
        </trans-unit>
        <trans-unit id="c9a48c02521331a393d7f0fa745303b95698e194" translate="yes" xml:space="preserve">
          <source>Every single standard header must be parsed and compiled along with your source code, which is slow and results in a bulky executable under certain compilation settings</source>
          <target state="translated">每一个标准的标题都必须与你的源代码一起解析和编译,这样做的速度很慢,而且在特定的编译设置下,会导致可执行文件很笨重。</target>
        </trans-unit>
        <trans-unit id="a553598db8ffe9c4b23b1f5050dc29054fc5a380" translate="yes" xml:space="preserve">
          <source>Example of why Quora is bad:</source>
          <target state="translated">举例说明为什么Quora是坏的。</target>
        </trans-unit>
        <trans-unit id="8ebcae3327c1699056869c34171c65eee91d0f63" translate="yes" xml:space="preserve">
          <source>From N4606, Working Draft, Standard for Programming Language C++ :</source>
          <target state="translated">摘自N4606,工作草案,程序设计语言C++标准。</target>
        </trans-unit>
        <trans-unit id="0184ce24529753c881fd7b500e60a2ba54cbbf8c" translate="yes" xml:space="preserve">
          <source>How does #include &amp;lt;bits/stdc++.h&amp;gt; work in C++?</source>
          <target state="translated">#include &amp;lt;bits / stdc ++。h&amp;gt;在C ++中如何工作？</target>
        </trans-unit>
        <trans-unit id="43c2302ab3b0c2be1034d114bbfcc212096623d3" translate="yes" xml:space="preserve">
          <source>I have discovered - to my horror and disbelief - that there is a well-known tutorial site where &lt;strong&gt;every C++ example seems to include this header&lt;/strong&gt;. The world is mad. That's the proof.</source>
          <target state="translated">令我震惊和怀疑的是，我发现有一个著名的教程站点， &lt;strong&gt;每个C ++示例似乎都包含此标头&lt;/strong&gt; 。 世界疯了。 那就是证明。</target>
        </trans-unit>
        <trans-unit id="fbad24faa4e61b994b21dc2f0d9cc187d72e80a3" translate="yes" xml:space="preserve">
          <source>I imagine the advantages are vaguely given thus:</source>
          <target state="translated">我想,这样做的好处是隐隐约约约的。</target>
        </trans-unit>
        <trans-unit id="d2b694e37fa77d5c6edd569c688ffd8b7d23e91c" translate="yes" xml:space="preserve">
          <source>I posted a question with my code whose only &lt;code&gt;#include&lt;/code&gt; directive was the following:</source>
          <target state="translated">我用我的代码发布了一个问题，该代码的唯一 &lt;code&gt;#include&lt;/code&gt; 指令如下：</target>
        </trans-unit>
        <trans-unit id="39aa15acd0fb4495d7dd505f9c2dadbb295911f9" translate="yes" xml:space="preserve">
          <source>If a programmer submitted a pull request at work containing golf-style code, it would be rejected. Their co-workers would laugh at them. Their manager would drop by their desk for a chat. Even so, programmers amuse themselves by submitting answers to PP&amp;amp;CG.</source>
          <target state="translated">如果程序员在工作中提交包含高尔夫风格代码的拉取请求，则该请求将被拒绝。 他们的同事会嘲笑他们。 他们的经理会坐在他们的办公桌旁聊天。 即使这样，程序员也可以通过向PP＆CG提交答案来娱乐自己。</target>
        </trans-unit>
        <trans-unit id="092e89e5ff285bc6c183da6d4b6bb3ce152138cf" translate="yes" xml:space="preserve">
          <source>Including &lt;code&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/code&gt; appears to be an increasingly common thing to see on Stack Overflow, perhaps something newly added to a national curriculum in the current academic year.</source>
          <target state="translated">在Stack Overflow上看到包含 &lt;code&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/code&gt; 似乎越来越普遍，这也许是本学年在国家课程中新增的内容。</target>
        </trans-unit>
        <trans-unit id="57ddd425c34e4cd9a35bbeb5d9f553933c0e92ec" translate="yes" xml:space="preserve">
          <source>Is it good practice to use #include &amp;lt;bits/stdc++.h&amp;gt; in programming contests instead of listing a lot of includes?</source>
          <target state="translated">在编程竞赛中使用#include &amp;lt;bits / stdc ++。h&amp;gt;而不是列出很多包含项是一种好习惯吗？</target>
        </trans-unit>
        <trans-unit id="9b9c10639efdd8d26d8cec07869f9fdddcd449b9" translate="yes" xml:space="preserve">
          <source>Is this is a good idea? Let's check the list of disadvantages. Portability? It doesn't matter since these coding events use a specific compiler version that contestants know in advance. Standards compliance? Not relevant for a block of code whose useful life is less than one hour. Compile time and executable size? These aren't part of the contest's scoring rubric.</source>
          <target state="translated">这样做是不是很好呢?下面我们来看看缺点有哪些?可移植性?没有关系,因为这些编码活动使用的是参赛者事先知道的特定编译器版本。是否符合标准?对于使用寿命不到一小时的代码块来说,没有关系。编译时间和可执行大小?这些并不在比赛的评分标准中。</target>
        </trans-unit>
        <trans-unit id="1bb033406448459223d5a7d15243f4e41b9f1e8b" translate="yes" xml:space="preserve">
          <source>It turns out that some people like &lt;em&gt;programming puzzles&lt;/em&gt; without the &lt;em&gt;code golf&lt;/em&gt;. They get together and compete at events like ACM-ICPC, Google Code Jam, and Facebook Hacker Cup, or on sites like Topcoder and Codeforces. Their rank is based on program correctness, execution speed, and how fast they submit a solution. To maximize execution speed, many participants use C++. To maximize coding speed, some of them use &lt;code&gt;stdc++.h&lt;/code&gt;.</source>
          <target state="translated">事实证明，有些人喜欢没有&lt;em&gt;代码的&lt;/em&gt; &lt;em&gt;编程难题&lt;/em&gt; 。 他们聚在一起参加ACM-ICPC，Google Code Jam和Facebook Hacker Cup之类的活动，或在Topcoder和Codeforces之类的网站上竞争。 他们的排名取决于程序的正确性，执行速度以及提交解决方案的速度。 为了最大化执行速度，许多参与者都使用C ++。 为了最大化编码速度，其中一些使用 &lt;code&gt;stdc++.h&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="276e91294003c9b29f02eac0dfe3d7a6af1beb09" translate="yes" xml:space="preserve">
          <source>It will probably only work on that compiler</source>
          <target state="translated">它可能只适用于该编译器</target>
        </trans-unit>
        <trans-unit id="02febe21fcd28cd0e0816a5ad762195185c7e4e5" translate="yes" xml:space="preserve">
          <source>More information:</source>
          <target state="translated">更多信息:</target>
        </trans-unit>
        <trans-unit id="bcfbf234d0ab16edf4f16becb196eeedff573a93" translate="yes" xml:space="preserve">
          <source>My teacher told me to do this, but in the comments section I was informed that I shouldn't.</source>
          <target state="translated">老师让我这样做,但在评论区,我被告知不应该。</target>
        </trans-unit>
        <trans-unit id="ac97e8b3520949916bee5c469c50f3d4daf6457c" translate="yes" xml:space="preserve">
          <source>P.P.S. No, there was no practical need for it. There aren't that many C++ standard headers, and they are well documented. If you teach, you're doing your students a disservice by adding such &quot;magic&quot;. Producing programmers with a magical mindset is the last thing we want. If you need to offer students a subset of C++ to make their life easier, just produce a handout with the short list of headers applicable to the course you teach, and with concise documentation for the library constructs you expect the students to use.</source>
          <target state="translated">P.P.P.S.不,没有实际需要。没有那么多的C++标准头文件,而且有很好的文档。如果你在教学中加入这样的 &quot;魔力&quot;,是对学生的一种伤害。用神奇的心态来培养程序员,是我们最不希望看到的。如果你需要给学生提供一个C++的子集,让他们的生活更轻松,只需制作一份讲义,上面有适用于你所教课程的简短的标题列表,并附上你期望学生使用的库结构的简明文档。</target>
        </trans-unit>
        <trans-unit id="4a09a488bdc9357434491d46f0d8824b89fa0bd2" translate="yes" xml:space="preserve">
          <source>P.S. I can well imagine the abominable &quot;teaching standard&quot; where this wicked idea might have taken place, and the circumstances that led to it. Just because there seemed to be a practical need for it doesn't make it acceptable - not even in retrospect.</source>
          <target state="translated">P.S.S.我完全可以想象到这种可恶的 &quot;教学标准 &quot;可能发生在什么地方,以及导致这种邪恶的想法的情况。只是因为似乎有实际的需要,并不意味着它可以接受----即使现在回想起来也不行。</target>
        </trans-unit>
        <trans-unit id="4b2999cdf881fb72dc6b19fbf71bddb6426b99a3" translate="yes" xml:space="preserve">
          <source>Please stop using this header. Forget about it. Don't propagate this insanity. If you're unwilling to understand why doing this is &lt;strong&gt;Wrong&lt;/strong&gt;, take my word for it. I'm not OK being treated as a figure of authority on anything at all, and I'm probably full of it half the time, but I'll make an exception in this one case only. I claim that I know what I'm talking about here. Take me on my word. I implore you.</source>
          <target state="translated">请停止使用此标题。 忘掉它。 不要传播这种疯狂。 如果您不愿意理解为什么这样做是&lt;strong&gt;错误的&lt;/strong&gt; ，请相信我。 我根本不被视为任何事物上的权威人物，而且我可能有一半时间都饱受权威的束缚，但仅在这种情况下，我会做一个例外。 我声称我知道我在说什么。 相信我。 我恳求你。</target>
        </trans-unit>
        <trans-unit id="44bd43ed0ebc5577cb5d3e9e1657a65ee44651ab" translate="yes" xml:space="preserve">
          <source>So the question of whether to use &lt;code&gt;stdc++.h&lt;/code&gt; comes down to whether the coding speed benefits in a programming contest outweigh the bad habits that one might develop by using it.</source>
          <target state="translated">因此，是否使用 &lt;code&gt;stdc++.h&lt;/code&gt; 归结为编程竞赛中的编码速度收益是否超过了使用它可能产生的不良习惯。</target>
        </trans-unit>
        <trans-unit id="239a2260863a483f3ec3cdd90b3634e5b45b8495" translate="yes" xml:space="preserve">
          <source>So we're left with bad habits. This is a valid objection. By using this header file, contestants are avoiding the chance to learn which standard header file defines the functionality they're using in their program. When they're writing real-world code (and not using &lt;code&gt;stdc++.h&lt;/code&gt;) they'll have to spend time looking up this information, which means they'll be less productive. That's the downside of practicing with &lt;code&gt;stdc++.h&lt;/code&gt;.</source>
          <target state="translated">所以我们留下了不良习惯。 这是一个有效的反对意见。 通过使用此头文件，参赛者避免了学习哪个标准头文件定义其在程序中使用的功能的机会。 当他们编写实际代码（而不使用 &lt;code&gt;stdc++.h&lt;/code&gt; ）时，他们将不得不花时间查找这些信息，这意味着他们的工作效率将降低。 这是使用 &lt;code&gt;stdc++.h&lt;/code&gt; 进行练习的缺点。</target>
        </trans-unit>
        <trans-unit id="39ec4f2a5d5a066178d0d4fb1ad88c01109b0604" translate="yes" xml:space="preserve">
          <source>Table 14 &amp;mdash; C++ library headers</source>
          <target state="translated">表14 &amp;mdash; C ++库头</target>
        </trans-unit>
        <trans-unit id="217e579d4314a3e6967ebc9146377a5722bc851e" translate="yes" xml:space="preserve">
          <source>The C++ standard library provides 61 C++ library headers, as shown in Table 14.</source>
          <target state="translated">C++标准库提供了61个C++库头,如表14所示。</target>
        </trans-unit>
        <trans-unit id="a9bcd4e2c8add93cbb911e47b0c2044336636190" translate="yes" xml:space="preserve">
          <source>The disadvantages include:</source>
          <target state="translated">其弊端包括:</target>
        </trans-unit>
        <trans-unit id="4413e8a45b5f2173516c7d64e16d2bcef3437c9a" translate="yes" xml:space="preserve">
          <source>There's a Stack Exchange site called &lt;a href=&quot;https://codegolf.stackexchange.com/&quot;&gt;Programming Puzzles &amp;amp; Code Golf&lt;/a&gt;. The &lt;em&gt;programming puzzles&lt;/em&gt; on that site fit this definition of &lt;a href=&quot;https://www.dictionary.com/browse/puzzle&quot;&gt;puzzle&lt;/a&gt;:</source>
          <target state="translated">有一个称为&lt;a href=&quot;https://codegolf.stackexchange.com/&quot;&gt;Programming Puzzles＆Code Golf&lt;/a&gt;的Stack Exchange网站。 该站点上的&lt;em&gt;编程难题&lt;/em&gt;符合以下这个&lt;a href=&quot;https://www.dictionary.com/browse/puzzle&quot;&gt;难题的&lt;/a&gt;定义：</target>
        </trans-unit>
        <trans-unit id="5ff0be9e34d030520485c268606b44e79d1ef4eb" translate="yes" xml:space="preserve">
          <source>There's no &amp;lt;bits/stdc++.h&amp;gt; there. This is not surprising, since &amp;lt;bits/...&amp;gt; headers are  implementation detail, and usually carry a warning:</source>
          <target state="translated">那里没有&amp;lt;bits / stdc ++。h&amp;gt;。 这并不奇怪，因为&amp;lt;bits / ...&amp;gt;标头是实现细节，通常带有警告：</target>
        </trans-unit>
        <trans-unit id="e68d42367e8df8d019d55f5601b98691429390ca" translate="yes" xml:space="preserve">
          <source>These are all valid and correct objections. So why would anyone use this monstrosity?</source>
          <target state="translated">这些反对意见都是有道理的,也是正确的。那么,为什么有人要用这种怪胎呢?</target>
        </trans-unit>
        <trans-unit id="ae5dc0af222ddcc786d29fc134d10a103d3487a0" translate="yes" xml:space="preserve">
          <source>They are designed to amuse, and not in the way that a working programmer might be amused by a real-world problem encountered in their daily work.</source>
          <target state="translated">它们是为了娱乐而设计的,而不是以工作中的程序员在日常工作中遇到的现实问题为乐趣的方式。</target>
        </trans-unit>
        <trans-unit id="d760db932e13a0248bfa450b6787a1b76a2a588b" translate="yes" xml:space="preserve">
          <source>This question asks: &quot;Why should I not #include &lt;code&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/code&gt;?&quot; I realize that it was asked and answered to make a point, and the accepted answer is intended to be the One True Answer to this question. But the question isn't &quot;Why should I not #include &lt;code&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/code&gt; in production code?&quot; Therefore, I think it's reasonable to consider other scenarios where the answer may be different.</source>
          <target state="translated">这个问题问：&amp;ldquo;为什么不#include &lt;code&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/code&gt; ？&amp;rdquo; 我意识到有人提出并回答了这个问题，所接受的答案旨在成为该问题的唯一真实答案。 但是问题不是&amp;ldquo;为什么不应该在生产代码中#include &lt;code&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/code&gt; ？&amp;rdquo; 因此，我认为考虑答案可能不同的其他情况是合理的。</target>
        </trans-unit>
        <trans-unit id="41b7148ed2c1a282d26cd8b52ba1e74a804e3f78" translate="yes" xml:space="preserve">
          <source>This raises the question of why it's worth taking part in competitive programming at all if it encourages bad habits like using &lt;code&gt;stdc++.h&lt;/code&gt; and violating other coding standards. One answer is that people do it for the same reason they post programs on PP&amp;amp;CG: some programmers find it enjoyable to use their coding skills in a game-like context.</source>
          <target state="translated">这就提出了一个问题，即如果它鼓励使用 &lt;code&gt;stdc++.h&lt;/code&gt; 等不良习惯并违反其他编码标准，那么为什么值得参加竞争性编程。 一个答案是人们之所以这么做是因为他们在PP＆CG上发布程序的原因相同：一些程序员发现在类似游戏的环境中使用他们的编码技能很有趣。</target>
        </trans-unit>
        <trans-unit id="425b4e7136346e6ed916db66ddbe629bd2fbc1cf" translate="yes" xml:space="preserve">
          <source>Unfortunately, this is a lazy hack, naming a GCC internal header directly instead of individual standard headers like &lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;iostream&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;vector&amp;gt;&lt;/code&gt;. It ruins portability and fosters terrible habits.</source>
          <target state="translated">不幸的是，这是一个懒惰的黑客，直接命名GCC内部标头，而不是单独的标准标头，如 &lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt; ， &lt;code&gt;&amp;lt;iostream&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;vector&amp;gt;&lt;/code&gt; 。 它破坏了便携性并养成了可怕的习惯。</target>
        </trans-unit>
        <trans-unit id="5a129d811454321d42b960a8844a971ce2ad3179" translate="yes" xml:space="preserve">
          <source>What does this have to do with &lt;code&gt;stdc++.h&lt;/code&gt;? As others have pointed out, using it is lazy. It's non-portable, so you don't know if it will work on your compiler or the next version of your compiler. It fosters bad habits. It's non-standard, so your program's behavior may differ from what you expect. It may increase compile time and executable size.</source>
          <target state="translated">这与 &lt;code&gt;stdc++.h&lt;/code&gt; 什么关系？ 正如其他人指出的那样，使用它是懒惰的。 它是不可移植的，因此您不知道它是否可在您的编译器或下一版本的编译器上运行。 它养成不良习惯。 这是非标准的，因此您的程序的行为可能与您期望的不同。 它可能会增加编译时间和可执行文件的大小。</target>
        </trans-unit>
        <trans-unit id="b1e1b88691fe90d726866ebcfc2e83f6bde1d68c" translate="yes" xml:space="preserve">
          <source>Why should I not #include &lt;bits/stdc++.h&gt;</source>
          <target state="translated">为什么我不应该#include &lt;bits stdc++.h=&quot;&quot;&gt;&lt;/bits&gt;</target>
        </trans-unit>
        <trans-unit id="d77989c1e3c0e0ace735631597dc367ffdfa6f32" translate="yes" xml:space="preserve">
          <source>Why?</source>
          <target state="translated">Why?</target>
        </trans-unit>
        <trans-unit id="cf5f824e155c7cb15ad3bacefc6661ba7e021d0c" translate="yes" xml:space="preserve">
          <source>Why? Because it is used as if it was supposed to be a C++ standard header, but no standard mentions it. So your code is non-portable by construction. You won't find any documentation for it on &lt;a href=&quot;https://en.cppreference.com&quot;&gt;cppreference&lt;/a&gt;. So it might as well not exist. It's a figment of someone's imagination :)</source>
          <target state="translated">为什么？ 因为使用它的方式就像它应该是C ++标准头文件一样，但是没有标准提到它。 因此，您的代码在构造上不可移植。 在&lt;a href=&quot;https://en.cppreference.com&quot;&gt;cppreference&lt;/a&gt;上找不到任何文档。 因此它可能不存在。 这是某人的想象力的虚构:)</target>
        </trans-unit>
        <trans-unit id="2fbd6990a9110b4fd96777704dbf54e19d3a4b34" translate="yes" xml:space="preserve">
          <source>You do not need to look up which standard header everything is in</source>
          <target state="translated">你不需要查找所有的东西都在哪个标准的标题中</target>
        </trans-unit>
        <trans-unit id="1b1ac8fc863c0a29c5c317291e3b4fa874ab4030" translate="yes" xml:space="preserve">
          <source>You have no idea what it'll do when you use it, because its contents are not set by a standard</source>
          <target state="translated">当你使用它的时候,你不知道它会做什么,因为它的内容不是由一个标准设置的</target>
        </trans-unit>
        <trans-unit id="cbc564b39675bbed0ed122414e264322c63d09f9" translate="yes" xml:space="preserve">
          <source>You only need write one &lt;code&gt;#include&lt;/code&gt; line</source>
          <target state="translated">您只需要写一条 &lt;code&gt;#include&lt;/code&gt; 行</target>
        </trans-unit>
        <trans-unit id="a537225c59d3274a443f8f17c0de8efb398362a9" translate="yes" xml:space="preserve">
          <source>a toy, problem, or other contrivance designed to amuse by presenting difficulties to be solved by ingenuity or patient effort.</source>
          <target state="translated">玩具、问题或其他旨在通过提出困难,通过巧思或耐心的努力来解决的玩具、问题或其他的小玩意,以达到娱乐的目的。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
