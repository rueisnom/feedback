<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/310870">
    <body>
      <group id="310870">
        <trans-unit id="1a6f157f19caa72c8ba37c93c91f741050915946" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;A.prototype&lt;/code&gt; is TOTALLY DIFFERENT from the &lt;code&gt;__proto__&lt;/code&gt; property. In our example, 'A' now has TWO properties called 'prototype' and &lt;code&gt;__proto__&lt;/code&gt; . This is a big confusion for people. &lt;code&gt;prototype&lt;/code&gt; and &lt;code&gt;__proto__&lt;/code&gt; properties are in no way related, they're separate things pointing to separate values.</source>
          <target state="translated">&lt;code&gt;A.prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;与&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;属性&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;完全不同&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。在我们的示例中，&amp;ldquo; A&amp;rdquo;现在具有两个称为&amp;ldquo; prototype&amp;rdquo;和&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; 的&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;属性&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。这对人们来说是一个很大的困惑。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;属性&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;和&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;属性毫无关系，它们是指向不同值的独立事物。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="aa496268d52a7b13b5dc519098a8aadd5a8f698f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a1.__proto__&lt;/code&gt; property is assigned to point at the same thing as &lt;code&gt;A.prototype&lt;/code&gt; points to (another empty object {} )</source>
          <target state="translated">&lt;code&gt;a1.__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;分配了&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;a1 .__ proto__&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;属性以指向与&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A.prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;指向的对象&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;相同的东西&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（另一个空对象{}）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="94cb063e7ce9fdcbe8793aaf001187e4752b19ba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;amy.constructor&lt;/code&gt;'s lookup fails and thus is delegated to &lt;code&gt;Car.prototype&lt;/code&gt;, which does have the constructor property. And so &lt;code&gt;amy.constructor&lt;/code&gt; is &lt;code&gt;Car&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;amy.constructor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的查找失败，因此被委托给&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Car.prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，后者确实具有Constructor属性。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因此，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;amy.constructor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Car&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f61c95ca5cb48c5bbfd7f2a435edff389b40e3bc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3127429/javascript-this-keyword&quot;&gt;How does the &quot;this&quot; keyword work?&lt;/a&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3127429/javascript-this-keyword&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;ldquo; this&amp;rdquo;关键字如何工作？&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e41f61d04c99037105b9ee78d76751a5668f66b5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;EDIT&lt;/strong&gt; Didn't mean to imply that the scope of the variable was private, I was just trying to illustrate how I define my classes in javascript.  Variable name has been changed to reflect this.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;编辑&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;并不是要暗示变量的范围是私有的，我只是想说明如何在javascript中定义类。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;变量名称已更改以反映这一点。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="585116bdd8ba3dd4a4edf774cb8e07bd06db012c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Related questions&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;相关问题&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0619f7ed60e8eeb1a1f718f0cf87792b5daa4614" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Sidenote:&lt;/strong&gt; There may not be any significant memory savings between the two approaches, however using the prototype to share methods and properties will likely use less memory than each instance having its own copy.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;旁注：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;两种方法之间可能不会节省大量内存，但是使用原型共享方法和属性可能会比每个拥有自己副本的实例使用更少的内存。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e6f31dd204bcdda17b1324677e21673dda9549e9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;What does it mean that JavaScript is a prototypal language?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;JavaScript是一种原型语言，这意味着什么？&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="27fc74636f13d6850973b4244d9df16a5d144b64" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;What is the scope of a function in JavaScript?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;JavaScript中的函数范围是什么？&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2bfc3701f71054631db27ff1201c8c11f85cf3cc" translate="yes" xml:space="preserve">
          <source>A constructor's &lt;em&gt;prototype&lt;/em&gt; provides a way to share methods and values among instances via the instance's private &lt;code&gt;[[Prototype]]&lt;/code&gt; property.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;构造函数的&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;原型&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;提供了一种通过实例的私有&lt;/font&gt;&lt;/font&gt; &lt;code&gt;[[Prototype]]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;属性&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在实例之间共享方法和值的方法&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d2ee4379b4acdd82edaa8bdb55ca80e7c1f8097d" translate="yes" xml:space="preserve">
          <source>A function in JavaScript is a specialised object. In addition to being invoked, a function can store properties like any other object.</source>
          <target state="translated">JavaScript中的函数是一个专门的对象。除了被调用之外,一个函数还可以像其他对象一样存储属性。</target>
        </trans-unit>
        <trans-unit id="396460920abf6c3bb0621afc58e2bc44893b98bd" translate="yes" xml:space="preserve">
          <source>A function's &lt;em&gt;this&lt;/em&gt; is set by how the function is called or by the use of &lt;em&gt;bind&lt;/em&gt; (not discussed here). Where a function is called on an object (e.g. &lt;code&gt;myObj.method()&lt;/code&gt;) then &lt;em&gt;this&lt;/em&gt; within the method references the object. Where &lt;em&gt;this&lt;/em&gt; is not set by the call or by the use of &lt;em&gt;bind&lt;/em&gt;, it defaults to the global object (window in a browser) or in strict mode, remains undefined.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;函数的&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;此&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;函数是通过调用函数的方式或通过使用&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;bind设置的&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（此处未讨论）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;其中一个函数被调用的对象上（例如&lt;/font&gt;&lt;/font&gt; &lt;code&gt;myObj.method()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;），&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;则&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;此&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;方法的引用中的对象。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;当&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这种&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;不被电话或通过使用设置&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;绑定&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，则默认为全局对象（窗口浏览器），或者在严格模式下，仍然不确定。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="45966dac101bec7852f1deda8e51fef286fb4aae" translate="yes" xml:space="preserve">
          <source>A reason to use the first form is to access &quot;private members&quot;. For example:</source>
          <target state="translated">使用第一种形式的原因是为了访问 &quot;私人会员&quot;。例如:</target>
        </trans-unit>
        <trans-unit id="499a9f218e00438d3a0cf14f0cf7260e52cc4b90" translate="yes" xml:space="preserve">
          <source>A totally new empty object is created and assigned to &lt;code&gt;a1&lt;/code&gt;. &lt;code&gt;a1 = {}&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;将创建一个全新的空对象并将其分配给&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a1 = {}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="581fdb8f0bcea7bf634c3f54dd065571aef05131" translate="yes" xml:space="preserve">
          <source>All that stuff inside &lt;code&gt;function() { }&lt;/code&gt; is going to execute. When you reach the &lt;code&gt;this.hey..&lt;/code&gt; line, &lt;code&gt;this&lt;/code&gt; is changed to &lt;code&gt;a1&lt;/code&gt; and you get this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;function() { }&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;所有东西&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;都将执行。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;当您到达&lt;/font&gt;&lt;/font&gt; &lt;code&gt;this.hey..&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;行时，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;this&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;其更改为&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;并得到以下信息：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f5ed6446475acfae79b53b98de3a4c05e013b251" translate="yes" xml:space="preserve">
          <source>And another section where you put the definitions that distinguish the objects from each other (&lt;code&gt;loc&lt;/code&gt; variable in the examples).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在另一部分中，您放置了将对象彼此区分开的定义（&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;示例中的&lt;/font&gt;&lt;/font&gt; &lt;code&gt;loc&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;变量）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9f623214ec66460787835246331d7a8431d0d95d" translate="yes" xml:space="preserve">
          <source>Another example is below.  It's similar to the first one (and maybe what you meant to ask about):</source>
          <target state="translated">下面是另一个例子。它和第一个类似(也许你想问的也是这样)。</target>
        </trans-unit>
        <trans-unit id="0213ecf516b2d4882d739982f9db700f291e6d62" translate="yes" xml:space="preserve">
          <source>Another way of achieving a similar result is to use an immediately invoked function expression:</source>
          <target state="translated">另一种实现类似结果的方法是使用立即调用的函数表达式。</target>
        </trans-unit>
        <trans-unit id="981aec6b82d4aef2ab9869eeaaddcde70f35e9f6" translate="yes" xml:space="preserve">
          <source>As discussed in other answers, it's really a performance consideration because the function in the prototype is shared with all of the instantiations - rather than the function being created for each instantiation.</source>
          <target state="translated">正如其他答案中讨论的那样,这确实是一个性能上的考虑,因为原型中的函数是与所有实例化共享的--而不是为每个实例化创建的函数。</target>
        </trans-unit>
        <trans-unit id="ebabf85ca06b23cb95f024f10b759ca642217e40" translate="yes" xml:space="preserve">
          <source>As others have mentioned, there are various reasons to choose one method or the other.  My sample is just meant to clearly demonstrate the difference.</source>
          <target state="translated">正如其他人所提到的,选择一种方法或另一种方法有各种原因。我的例子只是想清楚地说明其中的区别。</target>
        </trans-unit>
        <trans-unit id="9ca2d8b0f061f98b7e60e7a9c1fa9639212c0666" translate="yes" xml:space="preserve">
          <source>As others have said the first version, using &quot;this&quot; results in every instance of the class A having its own independent copy of function method &quot;x&quot;.  Whereas using &quot;prototype&quot; will mean that each instance of class A will use the same copy of method &quot;x&quot;.</source>
          <target state="translated">正如其他人所说的第一个版本,使用 &quot;this &quot;会导致类A的每个实例都有自己独立的函数方法 &quot;x &quot;的副本。而使用 &quot;prototype &quot;意味着类A的每个实例都会使用相同的方法 &quot;x &quot;的副本。</target>
        </trans-unit>
        <trans-unit id="562429007d4478f062f7b1115e1ecc040b939321" translate="yes" xml:space="preserve">
          <source>Because of javascript's scoping rules, private_var is available to the function assigned to this.x, but not outside the object.</source>
          <target state="translated">由于javascript的scoping规则,private_var可以被分配给this.x的函数,但不能在对象外使用。</target>
        </trans-unit>
        <trans-unit id="514ae34b3f92bfa48cc0a06bcba267d346bbe101" translate="yes" xml:space="preserve">
          <source>Before looking at the differences, the following should be noted:</source>
          <target state="translated">在研究这些差异之前,应该注意以下几点。</target>
        </trans-unit>
        <trans-unit id="ae90c980e638dd03a0023fb896a1307a3f40e7ba" translate="yes" xml:space="preserve">
          <source>Concerning the last three lines:</source>
          <target state="translated">关于最后三行:</target>
        </trans-unit>
        <trans-unit id="2b8a7b9e2cf97fc63ca3ff461c377262490a1646" translate="yes" xml:space="preserve">
          <source>Cool! Now, when you create &lt;code&gt;a1&lt;/code&gt;, it again goes through all of the 3 steps above, and in step 3, it doesn't do anything, since &lt;code&gt;function A()&lt;/code&gt; has nothing to execute. And if we do:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;凉！&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;现在，当您创建&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a1&lt;/code&gt; 时&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，它将再次经历上述所有3个步骤，而在步骤3中，它不会执行任何操作，因为&lt;/font&gt;&lt;/font&gt; &lt;code&gt;function A()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;无需执行任何操作。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果我们这样做：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a6dd015187d0ada3686c3bc302de7d0b64e2af15" translate="yes" xml:space="preserve">
          <source>Different adults have different ages, but all of the adults get the same rights.</source>
          <target state="translated">不同的成年人有不同的年龄,但所有的成年人得到的权利是一样的。</target>
        </trans-unit>
        <trans-unit id="7a45229532c15d2fa73aad667937ce56403a1a42" translate="yes" xml:space="preserve">
          <source>Every object is linked to a prototype object. When trying to access a property that does not exist, JavaScript will look in the object's prototype object for that property and return it if it exists.</source>
          <target state="translated">每个对象都与一个原型对象相连。当试图访问一个不存在的属性时,JavaScript会在对象的原型对象中查找该属性,如果存在,则返回该属性。</target>
        </trans-unit>
        <trans-unit id="1f67de5a9c375290139f103847bab77b1f3187b5" translate="yes" xml:space="preserve">
          <source>Feel free to add or edit. Once more complete I could make this a community wiki maybe.</source>
          <target state="translated">随意添加或编辑。一旦更完整,我可以把它变成社区维基。</target>
        </trans-unit>
        <trans-unit id="30c1034505f0dae85e722fbe58cd4a0976ebb7b2" translate="yes" xml:space="preserve">
          <source>Finally, it should not be too difficult to realize how object oriented programming can be done. There are two sections.</source>
          <target state="translated">最后,要实现面向对象编程应该不难。分为两部分。</target>
        </trans-unit>
        <trans-unit id="616fd4e7af8e063af8b704651be5d8e96ff90c42" translate="yes" xml:space="preserve">
          <source>Functional Classes</source>
          <target state="translated">功能类</target>
        </trans-unit>
        <trans-unit id="1378319ea2e44565319a2798a7f9ab0ed1f666ee" translate="yes" xml:space="preserve">
          <source>Furthermore, &lt;code&gt;amy&lt;/code&gt; is an &lt;code&gt;instanceof&lt;/code&gt;&lt;code&gt;Car&lt;/code&gt;. The &lt;code&gt;instanceof&lt;/code&gt; operator works by seeing if the right operand's prototype object (&lt;code&gt;Car&lt;/code&gt;) can be found anywhere in the left operand's prototype (&lt;code&gt;amy&lt;/code&gt;) chain.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;此外，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;amy&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是&lt;/font&gt; &lt;code&gt;Car&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;的&lt;/font&gt;&lt;/font&gt; &lt;code&gt;instanceof&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;该&lt;/font&gt; &lt;code&gt;instanceof&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;运算符的工作方式是看是否正确操作的原型对象（&lt;/font&gt; &lt;code&gt;Car&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;）可以在左边的操作数的原型（任何地方发现&lt;/font&gt; &lt;code&gt;amy&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;）链。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a7c6fc25c03c684ec456561dda6f16904d9fb9b2" translate="yes" xml:space="preserve">
          <source>Here is some code to show this subtle difference:</source>
          <target state="translated">下面是一些代码来说明这个微妙的区别。</target>
        </trans-unit>
        <trans-unit id="a512ea9bd1a2595e6564a628ec13cd5d0173a27f" translate="yes" xml:space="preserve">
          <source>Here we're creating 2,000,000 new objects with a &lt;code&gt;print&lt;/code&gt; method in Chrome. We're storing every object in an array. Putting &lt;code&gt;print&lt;/code&gt; on the prototype takes about 1/2 as long.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在这里，我们正在使用&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Chrome中&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的&lt;/font&gt;&lt;/font&gt; &lt;code&gt;print&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;方法&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;创建2,000,000个新对象&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我们将每个对象存储在一个数组中。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在原型上&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;放置&lt;/font&gt;&lt;/font&gt; &lt;code&gt;print&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;大约需要1/2倍的时间。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="21a690c2811cf3a8e2fcb03ca0c412aeb6c8978e" translate="yes" xml:space="preserve">
          <source>Here's where most people get confused:</source>
          <target state="translated">这里是大多数人的困惑所在。</target>
        </trans-unit>
        <trans-unit id="a6a0ce9031e0776d5fc6120b3023d51bccf114f1" translate="yes" xml:space="preserve">
          <source>Hope this helps.</source>
          <target state="translated">希望这对你有帮助。</target>
        </trans-unit>
        <trans-unit id="f9bebf368c86101e6a1de11b79f2745a5a9cce68" translate="yes" xml:space="preserve">
          <source>However there is one point interesting to know:
Every &lt;code&gt;prototype&lt;/code&gt; object has has a convenience property &lt;code&gt;constructor&lt;/code&gt;, which points back to the function (think object) it came attached to.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;但是，有一点有趣的知识是：每个&lt;/font&gt;&lt;/font&gt; &lt;code&gt;prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对象都有一个便捷属性&lt;/font&gt;&lt;/font&gt; &lt;code&gt;constructor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，该&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;构造&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;函数指向它所附加的函数（认为对象）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a50c839129a8568a2bdb8b1eb71615c8ca03bab5" translate="yes" xml:space="preserve">
          <source>However, the primary difference is that there are optimizations implemented in JavaScript engines that only apply when using the pseudoclassical pattern. Think of the pseudoclassical pattern a probably faster version of the prototypal pattern; the object relations in both examples are the same.</source>
          <target state="translated">然而,主要的区别在于JavaScript引擎中实现了一些优化,这些优化只在使用伪古典模式时适用。把伪古典模式看成是原型模式的一个可能更快的版本;这两个例子中的对象关系是一样的。</target>
        </trans-unit>
        <trans-unit id="8d4860ab556155819ce1e0d3bbe7982e93f66780" translate="yes" xml:space="preserve">
          <source>I believe that @Matthew Crumley is right.  They are &lt;em&gt;functionally&lt;/em&gt;, if not structurally, equivalent.  If you use Firebug to look at the objects that are created using &lt;code&gt;new&lt;/code&gt;, you can see that they are the same.  However, my preference would be the following.  I'm guessing that it just seems more like what I'm used to in C#/Java.  That is, define the class, define the fields, constructor, and methods.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我相信@Matthew Crumley是正确的。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;它们在&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;功能上&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（如果不是在结构上）是等效的。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果使用Firebug查看使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;new&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;创建的对象，则&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;可以看到它们是相同的。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;但是，我的偏好如下。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我猜想这似乎更像是我在C＃/ Java中所习惯的。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;即，定义类，定义字段，构造函数和方法。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="15622b8173641c92e63c1ee36c4e0b230517bf70" translate="yes" xml:space="preserve">
          <source>I know this has been answered to death but I'd like to show an actual example of speed differences.</source>
          <target state="translated">我知道这个问题已经回答得很死了,但我想举一个实际的例子来说明速度的差异。</target>
        </trans-unit>
        <trans-unit id="56482a797b855ebf28ae5afc4251b5db57e29525" translate="yes" xml:space="preserve">
          <source>I put together a jsperf to show this. There is a dramatic difference in the time it takes to instantiate the class, although it is really only relevant if you are making many instances.</source>
          <target state="translated">我把一个jsperf放在一起展示了这一点。在实例化类的时间上有很大的差别,虽然这真的只有在你做很多实例的时候才会有关系。</target>
        </trans-unit>
        <trans-unit id="f431a5529a17c6802ccb464328c61e22ee961e03" translate="yes" xml:space="preserve">
          <source>I think, the &lt;code&gt;this&lt;/code&gt; version is used to enable encapsulation, i.e. data hiding.
It helps to manipulate private variables.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我认为，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;this&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;版本用于启用封装，即数据隐藏。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;它有助于操纵私有变量。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d870f91c01fd9fe42353544305311db08719426e" translate="yes" xml:space="preserve">
          <source>I won't cover why &lt;code&gt;this&lt;/code&gt; changes to &lt;code&gt;a1&lt;/code&gt; but &lt;a href=&quot;https://stackoverflow.com/a/80478/1085998&quot;&gt;this is a great answer&lt;/a&gt; to learn more.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我不会介绍为什么将&lt;/font&gt;&lt;/font&gt; &lt;code&gt;this&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;更改为&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a1&lt;/code&gt; ,&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;但这&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/80478/1085998&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;了解更多信息&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的好答案&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="89078c5b79458591085ee64d7f970de4d93797ee" translate="yes" xml:space="preserve">
          <source>If you think this is not a problem, then it depends on whether you can live without private variables, and whether you are experienced enough to know a leak when you see one. Also, having to put the constructor logic after the method definitions is inconvenient.</source>
          <target state="translated">如果你认为这不是问题,那就要看你是否能在没有私有变量的情况下生存,以及你是否有足够的经验,当你看到漏洞的时候就能知道漏洞。另外,必须把构造函数逻辑放在方法定义之后,也是很不方便的。</target>
        </trans-unit>
        <trans-unit id="5217801ffee692a0d0416de94ce40dcc69d5d848" translate="yes" xml:space="preserve">
          <source>In conclusion, in the first example &lt;strong&gt;a copy of the function is assigned to each instance&lt;/strong&gt;. In the second example &lt;strong&gt;a single copy of the function is shared by all instances&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;总之，在第一个示例中&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，该函数的副本已分配给每个实例&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在第二个示例中&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，所有实例共享该函数的单个副本&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="64a03b3c9405b8097a143dbb32c646d5cd09f22e" translate="yes" xml:space="preserve">
          <source>In general there is no right or wrong, it's more a matter of taste or a design decision depending on your requirements. The prototype however is the technique that is used to develop in an object oriented manner, as I hope you'll see at the end of this answer.</source>
          <target state="translated">一般来说没有对错之分,更多的是根据你的需求来决定你的品味或者是设计决定。然而原型是以面向对象的方式进行开发的技术,希望你在本回答的最后能看到。</target>
        </trans-unit>
        <trans-unit id="666df82d0c8fe3053b47e6a0219f55650ccc2aff" translate="yes" xml:space="preserve">
          <source>In most cases they are essentially the same, but the second version saves memory because there is only one instance of the function instead of a separate function for each object.</source>
          <target state="translated">在大多数情况下,它们在本质上是一样的,但第二个版本可以节省内存,因为每个对象只有一个函数的实例,而不是单独的函数。</target>
        </trans-unit>
        <trans-unit id="91aee306e0db067a91d992a548f5fa66a86b83c9" translate="yes" xml:space="preserve">
          <source>In the case of:</source>
          <target state="translated">在以下情况下:</target>
        </trans-unit>
        <trans-unit id="3a06ec36da521fee44241221c9d5800a01c8444c" translate="yes" xml:space="preserve">
          <source>In the second example you are adding a property to the prototype object that all the instances created with &lt;code&gt;A&lt;/code&gt; point to.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在第二个示例中，您正在向原型对象添加一个属性，所有使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;创建的实例都&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;指向&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;该属性&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="68d939a819d95a1b232c797326d7169b5ded8eeb" translate="yes" xml:space="preserve">
          <source>In the second line, &lt;em&gt;A.prototype.x&lt;/em&gt; is assigned a reference to a function. This will create an &lt;em&gt;x&lt;/em&gt; property if it doesn't exist, or assign a new value if it does. So the difference with the first example in which object's &lt;em&gt;x&lt;/em&gt; property is involved in the expression.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在第二行中，为&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;A.prototype.x&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;分配了对函数的引用。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;x&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;属性不存在，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;则将创建一个&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;x&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;属性；如果不存在，则将分配一个新值。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因此，与第一个示例（其中对象的&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;x&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;属性涉及表达式）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的区别&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8f1f444d3fad61ca80f657809854392a20d97c79" translate="yes" xml:space="preserve">
          <source>In this case &lt;code&gt;Car&lt;/code&gt; is a &lt;strong&gt;function&lt;/strong&gt; (&lt;strong&gt;also&lt;/strong&gt; think &lt;strong&gt;object&lt;/strong&gt;) that can be invoked as you are used to do. It has a property &lt;code&gt;methods&lt;/code&gt; (which is an object with a &lt;code&gt;move&lt;/code&gt; function). When &lt;code&gt;Car&lt;/code&gt; is invoked the &lt;code&gt;extend&lt;/code&gt; function is called, which does some magic, and extends the &lt;code&gt;Car&lt;/code&gt; function (think object) with the methods defined within &lt;code&gt;methods&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在这种情况下，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Car&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是一个&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;函数&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;也&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;认为&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对象&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;），可以为你用来做被调用。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;它具有属性&lt;/font&gt;&lt;/font&gt; &lt;code&gt;methods&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（具有&lt;/font&gt;&lt;/font&gt; &lt;code&gt;move&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;功能&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的对象&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;当&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Car&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;被调用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;extend&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;函数被调用，其中做了一些魔法，并延长了&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Car&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;功能（认为对象）与内定义的方法&lt;/font&gt;&lt;/font&gt; &lt;code&gt;methods&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="412ce250c444246830eebe423a5e0e2d9149c14c" translate="yes" xml:space="preserve">
          <source>In this case, &lt;code&gt;A&lt;/code&gt; assigned the return value of calling the function on the right-hand side. Here again, since &lt;em&gt;this&lt;/em&gt; is not set in the call, it will reference the global object and &lt;code&gt;this.x&lt;/code&gt; is effective &lt;code&gt;window.x&lt;/code&gt;. Since the function doesn't return anything, &lt;code&gt;A&lt;/code&gt; will have a value of &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在这种情况下，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在右侧分配了调用函数的返回值。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在这里，因为&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;不是在呼叫建立时，将引用全局对象和&lt;/font&gt;&lt;/font&gt; &lt;code&gt;this.x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是有效&lt;/font&gt;&lt;/font&gt; &lt;code&gt;window.x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;由于该函数不返回任何内容，因此&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的值将为&lt;/font&gt;&lt;/font&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9dcc855b3c241eea76935dfb826e530678f84354" translate="yes" xml:space="preserve">
          <source>In this case, variable &lt;code&gt;A&lt;/code&gt; is assigned a value that is a reference to a function.  When that function is called using &lt;code&gt;A()&lt;/code&gt;, the function's &lt;em&gt;this&lt;/em&gt; isn't set by the call so it defaults to the global object and the expression &lt;code&gt;this.x&lt;/code&gt; is effective &lt;code&gt;window.x&lt;/code&gt;. The result is that a reference to the function expression on the right-hand side is assigned to &lt;code&gt;window.x&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在这种情况下，为变量&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;分配一个值，该值是对函数的引用。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;当该功能是使用称为&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;函数的&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;不是由呼叫设定成默认为全局对象和表达&lt;/font&gt;&lt;/font&gt; &lt;code&gt;this.x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是有效&lt;/font&gt;&lt;/font&gt; &lt;code&gt;window.x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;结果是将对右侧函数表达式的引用分配给&lt;/font&gt;&lt;/font&gt; &lt;code&gt;window.x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c9c1162f8649ee6c800e3c7ee24847b2ec12ab6c" translate="yes" xml:space="preserve">
          <source>In this example &lt;code&gt;Car&lt;/code&gt; links to the &lt;code&gt;prototype&lt;/code&gt; object, which links via &lt;code&gt;constructor&lt;/code&gt; to &lt;code&gt;Car&lt;/code&gt; itself, i.e. &lt;code&gt;Car.prototype.constructor&lt;/code&gt; is &lt;code&gt;Car&lt;/code&gt; itself. This allows you to figure out which constructor function built a certain object.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在此示例中，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Car&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;链接到&lt;/font&gt;&lt;/font&gt; &lt;code&gt;prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对象，该&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;原型&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对象通过&lt;/font&gt;&lt;/font&gt; &lt;code&gt;constructor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;链接&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;到&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Car&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;本身，即&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Car.prototype.constructor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Car&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;本身。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这使您可以找出哪个构造函数构造了某个对象。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bdba5bd5e74f1b3ee8430302ca046662463d4fe0" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;new&lt;/code&gt; operator has been added before the function expression so that the function is called as a constructor. When called with &lt;code&gt;new&lt;/code&gt;, the function's &lt;em&gt;this&lt;/em&gt; is set to reference a new Object whose private &lt;code&gt;[[Prototype]]&lt;/code&gt; property is set to reference the constructor's public &lt;em&gt;prototype&lt;/em&gt;. So in the assignment statement, the &lt;code&gt;x&lt;/code&gt; property will be created on this new object. When called as a constructor, a function returns its &lt;em&gt;this&lt;/em&gt; object by default, so there is no need for a separate &lt;code&gt;return this;&lt;/code&gt; statement.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在此示例中，在&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;函数表达式之前添加&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;了&lt;/font&gt;&lt;/font&gt; &lt;code&gt;new&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;运算符，以便将该函数称为构造函数。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;当使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;new&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;调用时&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，函数的&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;this&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;设置为引用一个新的Object，该对象的private &lt;/font&gt;&lt;/font&gt; &lt;code&gt;[[Prototype]]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;属性设置为引用构造函数的public &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;原型&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因此，在赋值语句中，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;将在此新对象上创建&lt;/font&gt;&lt;/font&gt; &lt;code&gt;x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;属性。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;当作为构造函数调用时，函数&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;默认情况下&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;返回其&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;this&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对象，因此无需单独&lt;/font&gt;&lt;/font&gt; &lt;code&gt;return this;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;声明。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="89bfdc078a207ee283d2d0a52398f24343989b97" translate="yes" xml:space="preserve">
          <source>In your first example, you are adding a property &lt;code&gt;x&lt;/code&gt; to each instance created with the &lt;code&gt;A&lt;/code&gt; function.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在第一个示例中，您正在向&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;函数&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;创建的每个实例&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;添加属性&lt;/font&gt;&lt;/font&gt; &lt;code&gt;x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bb4c3a5d3272e73f58dce20dcda9040a1a637e9e" translate="yes" xml:space="preserve">
          <source>It does the same as in the prototypal pattern really, it is just syntactic sugar overtop of the prototypal pattern.</source>
          <target state="translated">它的作用真的和原型模式一样,它只是在原型模式之上的句法糖。</target>
        </trans-unit>
        <trans-unit id="723750099350c4865d1a35080b4c625513b94ce7" translate="yes" xml:space="preserve">
          <source>It will see that &lt;code&gt;a1&lt;/code&gt; does not contain &lt;code&gt;hey&lt;/code&gt; and it will check its &lt;code&gt;__proto__&lt;/code&gt; property object to see if it has it, which is the case.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;它将看到&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;不包含&lt;/font&gt;&lt;/font&gt; &lt;code&gt;hey&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，它将检查其&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;属性对象，以查看是否具有该对象。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ed913fb6557c9ddd4efa7738e62a2126ab7b507a" translate="yes" xml:space="preserve">
          <source>JavaScript is an object-oriented language, i.e. most values are objects, including functions. (Strings, numbers, and booleans are &lt;em&gt;not&lt;/em&gt; objects.)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;JavaScript是一种面向对象的语言，即大多数值都是对象，包括函数。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（字符串，数字和布尔值&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;不是&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对象。）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a2fdf9d982a02784e0975ab4455583df7ff00a3c" translate="yes" xml:space="preserve">
          <source>JavaScript isn't a low-level language.  It may not be very valuable to think of prototyping or other inheritance patterns as a way to explicitly change the way memory is allocated.</source>
          <target state="translated">JavaScript不是一种低级语言。如果把原型验证或其他继承模式想成是显式改变内存分配方式,可能就没有什么价值了。</target>
        </trans-unit>
        <trans-unit id="8fdca31371e433fd45f5ce78b0ac9a2214f60370" translate="yes" xml:space="preserve">
          <source>Let me give you a more comprehensive answer that I learned during a JavaScript training course.</source>
          <target state="translated">让我给你一个比较全面的回答,我在JavaScript培训课程中学到的东西。</target>
        </trans-unit>
        <trans-unit id="b03b280b17407f067546235b537992021180eadf" translate="yes" xml:space="preserve">
          <source>Let us look at the following example:</source>
          <target state="translated">让我们看一下下面的例子。</target>
        </trans-unit>
        <trans-unit id="1f5f057f5d33bae053072b69aa5b677d4464cea0" translate="yes" xml:space="preserve">
          <source>Let's go on with our example and create an &quot;object&quot; out of &lt;code&gt;A&lt;/code&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;让我们继续我们的示例，并根据&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;创建一个&amp;ldquo;对象&amp;rdquo; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7bebb77119825ff6eb9b617e8afcfe33f39e3a01" translate="yes" xml:space="preserve">
          <source>Lets look at the implementation now.</source>
          <target state="translated">我们现在就来看看执行情况。</target>
        </trans-unit>
        <trans-unit id="c0f8fd08fd1ae3fed7665265a11fa998dbd5952c" translate="yes" xml:space="preserve">
          <source>Most answers mentioned the difference already, i.e. when prototyping the function is shared with all (future) instances. Whereas declaring the function in the class will create a copy for each instance.</source>
          <target state="translated">大多数的答案都已经提到了区别,即当原型化时,函数是与所有(未来)实例共享的。而在类中声明函数时,会给每个实例创建一个副本。</target>
        </trans-unit>
        <trans-unit id="6371c6ad3fae9de8ee8f263431e6d38bbd8ba8d0" translate="yes" xml:space="preserve">
          <source>Most people here (especially the top-rated answers) tried to explain how they are different without explaining WHY. I think this is wrong and if you understand the fundamentals first, the difference will become obvious. Let's try to explain the fundamentals first...</source>
          <target state="translated">这里的大多数人(尤其是排名靠前的答案)都试图解释它们有什么不同,却没有解释WHY。我认为这是不对的,如果先了解基本面,差别就会很明显。我们先试着解释一下基本原理......</target>
        </trans-unit>
        <trans-unit id="af8ddf39a6e280886e3a21db4258fe6c6694944a" translate="yes" xml:space="preserve">
          <source>NOTE: Some people tend to not call the internal Prototype property as &lt;code&gt;__proto__&lt;/code&gt;, I've used this name through the post to distinguish it clearly to the &lt;code&gt;Functional.prototype&lt;/code&gt; property as two different things.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;注意：某些人倾向于不将内部Prototype属性称为&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，我在帖子中使用了此名称，以将其与&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Functional.prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;属性&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;清楚地区&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;分为两个不同的东西。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9e08b3dab8de59f8684d10acd61311d09f996379" translate="yes" xml:space="preserve">
          <source>Not sure if this pattern is still relevant nowadays, but it exists. And it is good to know about it.
You simply pass an object and a property to the decorator function. The decorator returns the object with property and method.</source>
          <target state="translated">不知道这种模式在现在是否还适用,但它是存在的。而且知道它是很好的。你只需要传递一个对象和一个属性给装饰器函数。装饰器就会返回带有属性和方法的对象。</target>
        </trans-unit>
        <trans-unit id="19bda0638ba7632222a0cb55603f398896425e39" translate="yes" xml:space="preserve">
          <source>Now, let's try to create another object:</source>
          <target state="translated">现在,让我们尝试着创造另一个对象。</target>
        </trans-unit>
        <trans-unit id="419574ffc2da398be8c2c847ff168ef513bfe459" translate="yes" xml:space="preserve">
          <source>Now, the &lt;code&gt;prototype&lt;/code&gt; structure can be applied as following:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;现在，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;结构可以应用如下：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7165ad3fec60f094c503a8486cf19a6a37782c89" translate="yes" xml:space="preserve">
          <source>Now, there's another thing happening when &lt;code&gt;var a1 = new A()&lt;/code&gt; statement is processed. Basically &lt;code&gt;A()&lt;/code&gt; is executed and if A is something like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;现在，当处理&lt;/font&gt;&lt;/font&gt; &lt;code&gt;var a1 = new A()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;语句&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;时，发生了另一件事&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;基本上&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;执行&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，如果A是这样的：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="83d1f08532a2d718637904b4c370e11fc354f1dc" translate="yes" xml:space="preserve">
          <source>Object Decorator pattern</source>
          <target state="translated">物件装饰器模式</target>
        </trans-unit>
        <trans-unit id="1afec21842c90d30de589ac2651b4ea942c64d94" translate="yes" xml:space="preserve">
          <source>One section that defines common properties/methods in the prototype (chain).</source>
          <target state="translated">一节,定义了原型(链)中的常用属性方法。</target>
        </trans-unit>
        <trans-unit id="f8555b3f33258c80236579e089299ab9f568e09a" translate="yes" xml:space="preserve">
          <source>Prototypal Classes</source>
          <target state="translated">原型类</target>
        </trans-unit>
        <trans-unit id="ebaab3675de408919997f055a33be6353eee8b66" translate="yes" xml:space="preserve">
          <source>Prototype is the template of the class; which applies to all future instances of it. Whereas this is the particular instance of the object.</source>
          <target state="translated">Prototype是类的模板;它适用于它未来的所有实例。而这是该对象的特定实例。</target>
        </trans-unit>
        <trans-unit id="7c10620b77891a5a8f24861d5ce595bd9ce31cc1" translate="yes" xml:space="preserve">
          <source>Pseudoclassical patterns</source>
          <target state="translated">伪古典模式</target>
        </trans-unit>
        <trans-unit id="99e10fb4f059613db70e3de60d817eff342bc563" translate="yes" xml:space="preserve">
          <source>Remember why the &lt;code&gt;__proto__&lt;/code&gt; property exists on every object? So that if you retrieve the &lt;code&gt;yoMan&lt;/code&gt; property on &lt;code&gt;a1&lt;/code&gt; (which doesn't exist), its &lt;code&gt;__proto__&lt;/code&gt; property will be consulted, which if it's an object (and is most cases it is), it will check if it contains &lt;code&gt;yoMan&lt;/code&gt;, and if it doesn't, it will consult that object's &lt;code&gt;__proto__&lt;/code&gt; etc. If it does, it will take that property value and display it to you.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;还记得为什么&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;每个对象都存在&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;属性吗？&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因此，如果您检索&lt;/font&gt; &lt;code&gt;a1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;上&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的&lt;/font&gt;&lt;/font&gt; &lt;code&gt;yoMan&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;属性&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（不存在），将查询其&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;属性，如果它是一个对象（在大多数情况下是），它将检查它是否包含&lt;/font&gt; &lt;code&gt;yoMan&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;，以及是否&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;包含&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;yoMan&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。否，它将参考该对象的&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;等。如果是，它将获取该属性值并将其显示给您。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b0a6e2e15bdc9df61cac47d196cd4068c8ed4bfe" translate="yes" xml:space="preserve">
          <source>So here are the snippets in question:</source>
          <target state="translated">所以,这里有问题的片段。</target>
        </trans-unit>
        <trans-unit id="48bcbce51ee2114152267f2210d7eb26c82bc1a0" translate="yes" xml:space="preserve">
          <source>So someone decided to use this fact + the fact that when you create &lt;code&gt;a1&lt;/code&gt;, its &lt;code&gt;__proto__&lt;/code&gt; property points to the same (empty) object &lt;code&gt;A.prototype&lt;/code&gt; points to and do this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因此有人决定使用以下事实+当您创建&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a1&lt;/code&gt; 时&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，其&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;属性指向同一（空）对象&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A.prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;指向并执行以下操作：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3e8e06d432de29a74b35aa0883013e73afe1ae28" translate="yes" xml:space="preserve">
          <source>So to summarize, when you do &lt;code&gt;var a1 = new A()&lt;/code&gt; there are 3 things happening in the background:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;综上所述，当您执行&lt;/font&gt;&lt;/font&gt; &lt;code&gt;var a1 = new A()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;时，后台发生3件事：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="22ed9816149fa3050650e31e821017731cbc0d1f" translate="yes" xml:space="preserve">
          <source>So we're now at the point where we have a freshly baked empty &lt;code&gt;a1&lt;/code&gt; object. We said that all objects in JavaScript have an internal &lt;code&gt;__proto__&lt;/code&gt; property which points to something (&lt;code&gt;a1&lt;/code&gt; also has it), whether it's null or another object. What the &lt;code&gt;new&lt;/code&gt; operator does is that it sets that &lt;code&gt;__proto__&lt;/code&gt; property to point to the function's &lt;code&gt;prototype&lt;/code&gt; property. Read that again. It's basically this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因此，现在我们有了一个刚烘焙的空&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对象。我们说过，JavaScript中的所有对象都具有内部&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;属性，该属性指向某个内容（&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;也具有此&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;属性&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;），无论该内容为null还是另一个对象。什么是&lt;/font&gt;&lt;/font&gt; &lt;code&gt;new&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;运营商做的是，它设置一个&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;属性指向函数的&lt;/font&gt;&lt;/font&gt; &lt;code&gt;prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;属性。再读一遍。基本上是这样的：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="91cc8422370d40ae76ed33226042018137312f86" translate="yes" xml:space="preserve">
          <source>So what does this &lt;code&gt;__proto__&lt;/code&gt; property points to? Well, usually another object (we'll explain why later). The only way to force JavaScript for the &lt;code&gt;__proto__&lt;/code&gt; property to NOT point to another object is to use &lt;code&gt;var newObj = Object.create(null)&lt;/code&gt;. Even if you do this, the &lt;code&gt;__proto__&lt;/code&gt; property STILL exists as a property of the object,  just it doesn't point to another object, it points to &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;那么这个&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;属性指向什么呢？&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;好吧，通常是另一个对象（我们稍后将解释原因）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;强制&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;属性的&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;JavaScript &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;不能指向另一个对象&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的唯一方法&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;var newObj = Object.create(null)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;即使执行此操作，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;属性STILL仍作为对象的属性存在，只是它没有指向另一个对象，而是指向&lt;/font&gt;&lt;/font&gt; &lt;code&gt;null&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="68f8dbb71bc22f1b333dff6ea439d77f35689fff" translate="yes" xml:space="preserve">
          <source>So, we add it using prototype, rather than this.</source>
          <target state="translated">所以,我们用原型来添加,而不是这样。</target>
        </trans-unit>
        <trans-unit id="14733402dd610d5b95df826ad8095da2e9ad0b60" translate="yes" xml:space="preserve">
          <source>Some developers can be confused in the beginning. See below example:</source>
          <target state="translated">有的开发者一开始就会迷茫。请看下面的例子。</target>
        </trans-unit>
        <trans-unit id="5dce25ee28014dce88c211954e9a1c27a9b6793f" translate="yes" xml:space="preserve">
          <source>Steps 1,2,3 will repeat. Do you notice something? The key word is &lt;strong&gt;repeat.&lt;/strong&gt; Step 1: &lt;code&gt;a2&lt;/code&gt; will be a new empty object, step 2: its &lt;code&gt;__proto__&lt;/code&gt; property will point to the same thing &lt;code&gt;A.prototype&lt;/code&gt; points to and most importantly, step 3: function &lt;code&gt;A()&lt;/code&gt; is AGAIN executed, which means that &lt;code&gt;a2&lt;/code&gt; will get &lt;code&gt;hey&lt;/code&gt; property containing a function. &lt;code&gt;a1&lt;/code&gt; and &lt;code&gt;a2&lt;/code&gt; have two SEPARATE properties named &lt;code&gt;hey&lt;/code&gt; which point to 2 SEPARATE functions! We now have duplicate functions in same two different objects doing the same thing, oops...You can imagine the memory implications of this if we have 1000 objects created with &lt;code&gt;new A&lt;/code&gt;, after all functions declarations take more memory than something like the number 2. So how do we prevent this?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;重复步骤1,2,3。你有注意到吗？关键字是&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;重复。&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;步骤1：&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;将是一个新的空对象，步骤2：其&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;属性将指向&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A.prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;指向&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的同一&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对象，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最重要的是，步骤3：函数&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;再次执行，这意味着&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;将变得&lt;/font&gt;&lt;/font&gt; &lt;code&gt;hey&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;包含函数的属性。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;和&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;具有两个名为&lt;/font&gt;&lt;/font&gt; &lt;code&gt;hey&lt;/code&gt; 的&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; SEPARATE属性&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，它们指向2个SEPARATE函数！现在我们在相同的两个不同对象中执行相同的功能，哎呀&amp;hellip;&amp;hellip;如果我们创建了1000个对象，可以想象这对内存的影响&lt;/font&gt;&lt;/font&gt; &lt;code&gt;new A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，毕竟所有函数声明占用的内存都比数字2多。那么，如何防止这种情况发生？&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ba42003109816715679c7cec7df83598908ebb1c" translate="yes" xml:space="preserve">
          <source>Take these 2 examples:</source>
          <target state="translated">就拿这2个例子来说。</target>
        </trans-unit>
        <trans-unit id="1a1285513924c3fcc88d19dd90ef1b7247c97be6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;instanceof&lt;/code&gt; operator returns &lt;code&gt;false&lt;/code&gt;, because &lt;code&gt;Dog&lt;/code&gt;'s prototype cannot be found anywhere in &lt;code&gt;fido&lt;/code&gt;'s prototype chain. &lt;code&gt;fido&lt;/code&gt; is a simple object that is created with an object literal, i.e. it just delegates to &lt;code&gt;Object.prototype&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;该&lt;/font&gt;&lt;/font&gt; &lt;code&gt;instanceof&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;运算符返回&lt;/font&gt;&lt;/font&gt; &lt;code&gt;false&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，因为&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Dog&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的原型不能在任何地方找到&lt;/font&gt;&lt;/font&gt; &lt;code&gt;fido&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的原型链。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;fido&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是使用对象文字创建的简单对象，即它仅委托给&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Object.prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="59cba9bc0a9bd21c18ba6a3cd21c7e6251c3604c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;prototype&lt;/code&gt; property of a function constructor refers to the prototype object of all instances created with that function when using &lt;code&gt;new&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;函数构造函数&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的&lt;/font&gt;&lt;/font&gt; &lt;code&gt;prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;属性指的是使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;new&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;时通过该函数创建的所有实例的原型对象&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5fe4abd47db3ca32634516e9378bb727fff7e1ff" translate="yes" xml:space="preserve">
          <source>The examples have very different outcomes.</source>
          <target state="translated">这些例子的结果截然不同。</target>
        </trans-unit>
        <trans-unit id="597df3874dbfac5cd4c24cbbd34b592696279cd5" translate="yes" xml:space="preserve">
          <source>The fact that you used the operator &lt;code&gt;new&lt;/code&gt; before a function invocation &lt;code&gt;A()&lt;/code&gt; did something ADDITIONAL in the background. The &lt;code&gt;new&lt;/code&gt; keyword created a new object which now references &lt;code&gt;a1&lt;/code&gt; and that object is empty. Here's what happening additionally:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在函数调用&lt;/font&gt; &lt;code&gt;A()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;之前&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;new&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;运算符的事实&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在后台做了一些附加操作。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在&lt;/font&gt; &lt;code&gt;new&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;关键字创建一个新的对象现在引用&lt;/font&gt; &lt;code&gt;a1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;和对象为空。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这是另外发生的事情：&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7e55db4e23b6f32c08ffe74b551e861a639ca0e4" translate="yes" xml:space="preserve">
          <source>The first example changes the interface for that object only. The second example changes the interface for all object of that class.</source>
          <target state="translated">第一个例子只改变了该对象的接口。第二个例子改变了该类的所有对象的接口。</target>
        </trans-unit>
        <trans-unit id="3d067c8d8a017b9c83dc914075cce47ebc57d678" translate="yes" xml:space="preserve">
          <source>The first two patterns allow a discussion of using techniques to define  shared methods or using methods that are defined inline in the body of the constructor. In both cases every instance has its own &lt;code&gt;move&lt;/code&gt; function.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;前两种模式允许讨论使用技术定义共享方法或使用在构造函数主体中内联定义的方法。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在这两种情况下，每个实例都有其自己的&lt;/font&gt;&lt;/font&gt; &lt;code&gt;move&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;功能。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="82ae2b7331064f17552e8317206e9a42246c5f28" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;A()&lt;/code&gt; is being executed with &lt;code&gt;this&lt;/code&gt; set to the new, empty object created in step 1 (read the answer I referenced above as to why &lt;code&gt;this&lt;/code&gt; changes to &lt;code&gt;a1&lt;/code&gt;)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;函数&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的执行与&lt;/font&gt;&lt;/font&gt; &lt;code&gt;this&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;设置为在步骤1中创建的新的空对象（请阅读我上面引用的答案，以了解为什么将&lt;/font&gt;&lt;/font&gt; &lt;code&gt;this&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;更改为&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2b2318654afa23c4d76517a2dd3e321c2338ca9a" translate="yes" xml:space="preserve">
          <source>The prototypal pattern does not lend itself well to the same examination, because function sharing via a prototype delegation is the very goal for the prototypal pattern. As others pointed out, it is expected to have a better memory footprint.</source>
          <target state="translated">原型模式并不适合做同样的检查,因为通过原型授权的功能共享是原型模式的目标。正如其他人所指出的,它被期望有更好的内存占用。</target>
        </trans-unit>
        <trans-unit id="81a9d5f167760be8b398327c28ef552413c90ceb" translate="yes" xml:space="preserve">
          <source>The ultimate problem with using &lt;code&gt;this&lt;/code&gt; instead of &lt;code&gt;prototype&lt;/code&gt; is that when overriding a method, the constructor of the base class will still refer to the overridden method. Consider this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;this&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;而不是&lt;/font&gt;&lt;/font&gt; &lt;code&gt;prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的最终问题&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是，当重写方法时，基类的构造方法仍将引用重写的方法。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;考虑一下：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cb8a7a4b9ba94c3c72b9b96dae39a5767b6c3728" translate="yes" xml:space="preserve">
          <source>There's something happening in the background when this thing happened. &lt;code&gt;a1&lt;/code&gt; is an ordinary variable which was assigned a new, empty object.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;当事情发生时，背景中发生了一些事情。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是一个普通变量，被分配了一个新的空对象。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dad014627fd09fcb90b0d1758b0b7befb734da14" translate="yes" xml:space="preserve">
          <source>These differences between the two approaches also manifest if you're serializing and de-serializing your Javascript objects to/from JSON. Methods defined on an object's prototype are not serialized when you serialize the object, which can be convenient when for example you want to serialize just the data portions of an object, but not it's methods:</source>
          <target state="translated">如果你要将Javascript对象从JSON中序列化和去序列化,这两种方法之间的差异也会体现出来。当你对对象的原型进行序列化时,在对象的原型上定义的方法是不会被序列化的,这可能是很方便的,例如,当你只想对对象的数据部分进行序列化,但不希望对对象的方法进行序列化。</target>
        </trans-unit>
        <trans-unit id="9067e4c49b46c1e9bbb2aec0015f46bb87b79ddd" translate="yes" xml:space="preserve">
          <source>Think about statically typed language, things on &lt;code&gt;prototype&lt;/code&gt; are static and things on &lt;code&gt;this&lt;/code&gt; are instance related.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;考虑一下静态类型的语言，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;上的东西是静态的，而&lt;/font&gt;&lt;/font&gt; &lt;code&gt;this&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;上的&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;东西&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是实例相关的。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2355c245479715e65d721ee60eaa07117437d333" translate="yes" xml:space="preserve">
          <source>This example, though different, comes closest to the first example in the question.</source>
          <target state="translated">这个例子虽然不同,但最接近问题中的第一个例子。</target>
        </trans-unit>
        <trans-unit id="ca0afa04c7a867ec6cfc7913f8acd8d206551180" translate="yes" xml:space="preserve">
          <source>This is an uncommon use of &lt;em&gt;new&lt;/em&gt; since the only way to reference the constructor is via &lt;em&gt;A.constructor&lt;/em&gt;. It would be much more common to do:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这是&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;new&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的不常见用法，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因为引用构造函数的唯一方法是通过&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;A.constructor&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这样做会更常见：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="036187c48acf9dbe69bc45355dde270b1aec2e23" translate="yes" xml:space="preserve">
          <source>This is really just another form of the prototypal pattern in simplified form and more familiar to do those who program in Java for example, since it uses the &lt;code&gt;new&lt;/code&gt; constructor.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这实际上只是原型模式的另一种简化形式，对于使用Java进行编程的人来说更熟悉，因为它使用了&lt;/font&gt;&lt;/font&gt; &lt;code&gt;new&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;构造函数。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5029be1875db619a586bd4a66a39dc6782bd2ffa" translate="yes" xml:space="preserve">
          <source>This is what allows us to apply concepts like superclass or subclass in JavaScript.</source>
          <target state="translated">这就是我们可以在JavaScript中应用超类或子类等概念的原因。</target>
        </trans-unit>
        <trans-unit id="8e91f2df575afa57c8758a2f705311ee0e328b72" translate="yes" xml:space="preserve">
          <source>To check that &lt;em&gt;A&lt;/em&gt; has an &lt;em&gt;x&lt;/em&gt; property:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;要检查&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;A&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是否具有&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;x&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;属性：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="040a03f3b5302125518bef7090315aeab9a7bb1b" translate="yes" xml:space="preserve">
          <source>Use of 'prototype' vs. 'this' in JavaScript</source>
          <target state="translated">JavaScript中的 &quot;prototype &quot;与 &quot;this &quot;的使用方法</target>
        </trans-unit>
        <trans-unit id="9d00fbb739bf112dec2029fddeb77b8657217f24" translate="yes" xml:space="preserve">
          <source>We said that &lt;code&gt;A.prototype&lt;/code&gt; is nothing more than an empty object (unless we change it to something else before defining &lt;code&gt;a1&lt;/code&gt;). So now basically &lt;code&gt;a1.__proto__&lt;/code&gt; points to the same thing &lt;code&gt;A.prototype&lt;/code&gt; points to, which is that empty object. They both point to the same object which was created when this line happened:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我们说过&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A.prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;只是一个空对象（除非我们在定义&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;之前将其更改为其他对象&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;所以现在基本上&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a1.__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;指向同一件事&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A.prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;点，这是一个空的对象。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;它们都指向发生此行时创建的同一对象：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="eb13a5422040b1640e4e7a0c5454ebb645c4d9c1" translate="yes" xml:space="preserve">
          <source>We said that on each function definition there's a new property created called &lt;code&gt;prototype&lt;/code&gt; (which you can access it, unlike with the &lt;code&gt;__proto__&lt;/code&gt; property) created? Well, that property is being used now.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我们说过，在每个函数定义上创建了一个称为&lt;/font&gt;&lt;/font&gt; &lt;code&gt;prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的新属性&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（与&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;属性&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;不同，您可以访问它&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）吗？&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;好吧，该属性现在正在使用中。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c6dc267ab3b9d3d635dbd0662b24434319206abe" translate="yes" xml:space="preserve">
          <source>What's the difference between</source>
          <target state="translated">有什么区别呢?</target>
        </trans-unit>
        <trans-unit id="47d12f46bd7d79018cce2ea06e4664512459a236" translate="yes" xml:space="preserve">
          <source>What's the difference? =&amp;gt; A lot.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;有什么不同？&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;=&amp;gt;很多。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d2f85f01731ca1bab5a86d8e3aba08a7efa46e93" translate="yes" xml:space="preserve">
          <source>When you create a new function in JavaScript (which is an object as well, remember?), the moment it is defined, JavaScript automatically creates a new property on that function called &lt;code&gt;prototype&lt;/code&gt;. Try it:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;当您在JavaScript中创建新函数时（还记得它也是一个对象吗？），在定义该函数后，JavaScript会自动在该函数上创建一个称为&lt;/font&gt;&lt;/font&gt; &lt;code&gt;prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的新属性&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;试试看：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b6473c77919835536c99c5a79f1980fb08ea7f56" translate="yes" xml:space="preserve">
          <source>With this approach we eliminate the part from step 3 where functions are duplicated on each new object creation. Instead of &lt;code&gt;a1&lt;/code&gt; and &lt;code&gt;a2&lt;/code&gt; having a separate &lt;code&gt;hey&lt;/code&gt; property, now NONE of them has it. Which, I guess, you figured out yourself by now. That's the nice thing...if you understand &lt;code&gt;__proto__&lt;/code&gt; and &lt;code&gt;Function.prototype&lt;/code&gt;, questions like these will be pretty obvious.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用这种方法，我们从第3步中删除了在每次创建新对象时都复制了功能的部分。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;而不是&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;和&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;具有单独的&lt;/font&gt;&lt;/font&gt; &lt;code&gt;hey&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;属性，现在它们中没有一个拥有它。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我想您到现在就知道了。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;很好。如果您了解&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;和&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Function.prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，类似这样的问题将非常明显。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ed7ea4136777240f51ec615c9b731cd154f02835" translate="yes" xml:space="preserve">
          <source>You may also wonder, why does JavaScript creates a property called &lt;code&gt;prototype&lt;/code&gt; for a function when you define the function? Because it tries to fool you, yes &lt;strong&gt;fool you&lt;/strong&gt; that it works like class-based languages.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;您可能还想知道，为什么&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在定义函数时&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;JavaScript为什么&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;为函数&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;创建一个称为&lt;/font&gt;&lt;/font&gt; &lt;code&gt;prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的属性&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;？&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因为它试图欺骗您，所以可以&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;欺骗您&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，它就像基于类的语言一样工作。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cdcbed7468dabda887ee2ad3bed61463436ef43a" translate="yes" xml:space="preserve">
          <source>You may wonder: Why does JavaScript has &lt;code&gt;__proto__&lt;/code&gt; property created on every single object? Well, one word: &lt;strong&gt;delegation&lt;/strong&gt;. When you call a property on an object and the object doesn't have it, then JavaScript looks for the object referenced by &lt;code&gt;__proto__&lt;/code&gt; to see if it maybe has it. If it doesn't have it, then it looks at that object's &lt;code&gt;__proto__&lt;/code&gt; property and so on...until the chain ends. Thus the name &lt;strong&gt;prototype chain&lt;/strong&gt;. Of course, if &lt;code&gt;__proto__&lt;/code&gt; doesn't point to an object and instead points to &lt;code&gt;null&lt;/code&gt;, well tough luck, JavaScript realizes that and will return you &lt;code&gt;undefined&lt;/code&gt; for the property.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;您可能会想：为什么JavaScript &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在每个对象上都创建了&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;属性？好吧，一个字：&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;委派&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。当您在对象上调用属性而该对象没有属性时，JavaScript会查找&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;引用的对象，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;以查看它是否具有&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;该属性&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。如果没有它，它将查看该对象的&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;属性，依此类推...直到链结束。因此命名&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;原型链&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。当然，如果&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;没有指向对象，而是指向&lt;/font&gt;&lt;/font&gt; &lt;code&gt;null&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，这&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;真是&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;不&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;走运，JavaScript会意识到这一点，并将&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;为该属性&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;返回&lt;/font&gt;&lt;/font&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的内容。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="228a84adb74c5fcc8902823a8da25305d1e558d9" translate="yes" xml:space="preserve">
          <source>You showed two patterns in your question. I will try to explain two more and try to explain the differences if relevant. Feel free to edit/extend.
In all examples it is about a car object that has a location and can move.</source>
          <target state="translated">你的问题中显示了两个规律。我再试着解释一下两个,如果相关的话,我会尝试着解释一下区别。随意编辑延伸一下。在所有的例子中,它是关于一个汽车物体有位置,可以移动的。</target>
        </trans-unit>
        <trans-unit id="abed52bbf756ca559bba9e9c61017226edbec61c" translate="yes" xml:space="preserve">
          <source>a) A function is an object in JavaScript. EVERY object in JavaScript gets an internal property (meaning, you can't access it like other properties, except maybe in browsers like Chrome), often referred to as &lt;code&gt;__proto__&lt;/code&gt; (you can actually type &lt;code&gt;anyObject.__proto__&lt;/code&gt; in Chrome to see what it references. This is just that, a property, nothing more. A property in JavaScript = a variable inside an object, nothing more. What do variables do? They point to things.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;a）函数是JavaScript中的对象。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在JavaScript中的每个对象都得到一个内部属性（意味着，你不能访问它像其他属性，像Chrome浏览器，除了可能），通常被称为&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（实际上你可以键入&lt;/font&gt;&lt;/font&gt; &lt;code&gt;anyObject.__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在Chrome中，看看它的引用。这就是一个属性，仅此而已； JavaScript中的一个属性=对象中的一个变量，仅此而已，变量的作用是什么？它们指向事物。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">and</target>
        </trans-unit>
        <trans-unit id="f7023942206621acc838b9f351c2bfc78689b792" translate="yes" xml:space="preserve">
          <source>something very different occurs.  In the first line, variable &lt;code&gt;A&lt;/code&gt; is assigned a reference to a function.  In JavaScript, all functions objects have a &lt;em&gt;prototype&lt;/em&gt; property by default so there is no separate code to create an &lt;em&gt;A.prototype&lt;/em&gt; object.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;发生了非常不同的事情。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在第一行中，变量&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;被分配了对函数的引用。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在JavaScript中，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;默认情况下&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，所有函数对象都具有&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;prototype&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;属性，因此没有单独的代码来创建&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;A.prototype&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对象。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d1add0059bf8e9b747aba843af8d9a92c234489d" translate="yes" xml:space="preserve">
          <source>versus:</source>
          <target state="translated">versus:</target>
        </trans-unit>
        <trans-unit id="b4993da023bb6cf4528cc249a4a1168cbc4c7731" translate="yes" xml:space="preserve">
          <source>vs.</source>
          <target state="translated">vs.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
