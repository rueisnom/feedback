<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/310870">
    <body>
      <group id="310870">
        <trans-unit id="1a6f157f19caa72c8ba37c93c91f741050915946" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;A.prototype&lt;/code&gt; is TOTALLY DIFFERENT from the &lt;code&gt;__proto__&lt;/code&gt; property. In our example, 'A' now has TWO properties called 'prototype' and &lt;code&gt;__proto__&lt;/code&gt; . This is a big confusion for people. &lt;code&gt;prototype&lt;/code&gt; and &lt;code&gt;__proto__&lt;/code&gt; properties are in no way related, they're separate things pointing to separate values.</source>
          <target state="translated">&lt;code&gt;A.prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es TOTALMENTE DIFERENTE de la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;propiedad &lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . En nuestro ejemplo, 'A' ahora tiene DOS propiedades llamadas 'prototipo' y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . Esta es una gran confusi&amp;oacute;n para las personas. &lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; propiedades &lt;/font&gt;&lt;/font&gt; &lt;code&gt;prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;__proto__ no&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; est&amp;aacute;n relacionadas de ninguna manera, son cosas separadas que apuntan a valores separados.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="aa496268d52a7b13b5dc519098a8aadd5a8f698f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a1.__proto__&lt;/code&gt; property is assigned to point at the same thing as &lt;code&gt;A.prototype&lt;/code&gt; points to (another empty object {} )</source>
          <target state="translated">&lt;code&gt;a1.__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; propiedad &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;a1 .__ proto__&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; se asigna para apuntar a lo mismo que &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A.prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; apunta a (otro objeto vac&amp;iacute;o {})&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="94cb063e7ce9fdcbe8793aaf001187e4752b19ba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;amy.constructor&lt;/code&gt;'s lookup fails and thus is delegated to &lt;code&gt;Car.prototype&lt;/code&gt;, which does have the constructor property. And so &lt;code&gt;amy.constructor&lt;/code&gt; is &lt;code&gt;Car&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;amy.constructor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La b&amp;uacute;squeda de &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;amy.constructor&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; falla y, por lo tanto, se delega en &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Car.prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , que tiene la propiedad de constructor. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Y tan &lt;/font&gt;&lt;/font&gt; &lt;code&gt;amy.constructor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Car&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f61c95ca5cb48c5bbfd7f2a435edff389b40e3bc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3127429/javascript-this-keyword&quot;&gt;How does the &quot;this&quot; keyword work?&lt;/a&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3127429/javascript-this-keyword&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iquest;C&amp;oacute;mo funciona la palabra clave &quot;this&quot;?&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e41f61d04c99037105b9ee78d76751a5668f66b5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;EDIT&lt;/strong&gt; Didn't mean to imply that the scope of the variable was private, I was just trying to illustrate how I define my classes in javascript.  Variable name has been changed to reflect this.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;EDITAR&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; No quer&amp;iacute;a decir que el alcance de la variable fuera privado, solo estaba tratando de ilustrar c&amp;oacute;mo defino mis clases en javascript. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El nombre de la variable se ha cambiado para reflejar esto.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="585116bdd8ba3dd4a4edf774cb8e07bd06db012c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Related questions&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Preguntas relacionadas&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0619f7ed60e8eeb1a1f718f0cf87792b5daa4614" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Sidenote:&lt;/strong&gt; There may not be any significant memory savings between the two approaches, however using the prototype to share methods and properties will likely use less memory than each instance having its own copy.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Nota al margen:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; puede que no haya un ahorro significativo de memoria entre los dos enfoques, sin embargo, usar el prototipo para compartir m&amp;eacute;todos y propiedades probablemente usar&amp;aacute; menos memoria que cada instancia que tenga su propia copia.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e6f31dd204bcdda17b1324677e21673dda9549e9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;What does it mean that JavaScript is a prototypal language?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iquest;Qu&amp;eacute; significa que JavaScript es un lenguaje protot&amp;iacute;pico?&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="27fc74636f13d6850973b4244d9df16a5d144b64" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;What is the scope of a function in JavaScript?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iquest;Cu&amp;aacute;l es el alcance de una funci&amp;oacute;n en JavaScript?&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2bfc3701f71054631db27ff1201c8c11f85cf3cc" translate="yes" xml:space="preserve">
          <source>A constructor's &lt;em&gt;prototype&lt;/em&gt; provides a way to share methods and values among instances via the instance's private &lt;code&gt;[[Prototype]]&lt;/code&gt; property.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;prototipo de&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; un constructor &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;proporciona una manera de compartir m&amp;eacute;todos y valores entre instancias a trav&amp;eacute;s de la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;propiedad &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;privada &lt;/font&gt;&lt;/font&gt; &lt;code&gt;[[Prototype]]&lt;/code&gt; de&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; la instancia &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d2ee4379b4acdd82edaa8bdb55ca80e7c1f8097d" translate="yes" xml:space="preserve">
          <source>A function in JavaScript is a specialised object. In addition to being invoked, a function can store properties like any other object.</source>
          <target state="translated">Una función en JavaScript es un objeto especializado.Además de ser invocada,una función puede almacenar propiedades como cualquier otro objeto.</target>
        </trans-unit>
        <trans-unit id="396460920abf6c3bb0621afc58e2bc44893b98bd" translate="yes" xml:space="preserve">
          <source>A function's &lt;em&gt;this&lt;/em&gt; is set by how the function is called or by the use of &lt;em&gt;bind&lt;/em&gt; (not discussed here). Where a function is called on an object (e.g. &lt;code&gt;myObj.method()&lt;/code&gt;) then &lt;em&gt;this&lt;/em&gt; within the method references the object. Where &lt;em&gt;this&lt;/em&gt; is not set by the call or by the use of &lt;em&gt;bind&lt;/em&gt;, it defaults to the global object (window in a browser) or in strict mode, remains undefined.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Una funci&amp;oacute;n es &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;este&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es fijado por qu&amp;eacute; se llama a la funci&amp;oacute;n o por el uso de &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;bind&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (no se discute aqu&amp;iacute;). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cuando se llama a una funci&amp;oacute;n en un objeto (por ejemplo, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;myObj.method()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ), &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;esto&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; dentro del m&amp;eacute;todo hace referencia al objeto. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cuando &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;esto&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; no se establece mediante la llamada o mediante el uso de &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;bind&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , el valor predeterminado es el objeto global (ventana en un navegador) o en modo estricto, permanece indefinido.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="45966dac101bec7852f1deda8e51fef286fb4aae" translate="yes" xml:space="preserve">
          <source>A reason to use the first form is to access &quot;private members&quot;. For example:</source>
          <target state="translated">Una razón para usar el primer formulario es para acceder a los &quot;miembros privados&quot;.Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="499a9f218e00438d3a0cf14f0cf7260e52cc4b90" translate="yes" xml:space="preserve">
          <source>A totally new empty object is created and assigned to &lt;code&gt;a1&lt;/code&gt;. &lt;code&gt;a1 = {}&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Se crea un objeto vac&amp;iacute;o totalmente nuevo y se asigna a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a1 = {}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="581fdb8f0bcea7bf634c3f54dd065571aef05131" translate="yes" xml:space="preserve">
          <source>All that stuff inside &lt;code&gt;function() { }&lt;/code&gt; is going to execute. When you reach the &lt;code&gt;this.hey..&lt;/code&gt; line, &lt;code&gt;this&lt;/code&gt; is changed to &lt;code&gt;a1&lt;/code&gt; and you get this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Todo lo que est&amp;aacute; dentro de la &lt;/font&gt;&lt;/font&gt; &lt;code&gt;function() { }&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; se ejecutar&amp;aacute;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cuando llegue a la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;l&amp;iacute;nea &lt;/font&gt;&lt;/font&gt; &lt;code&gt;this.hey..&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;this&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; cambia a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y obtiene esto:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f5ed6446475acfae79b53b98de3a4c05e013b251" translate="yes" xml:space="preserve">
          <source>And another section where you put the definitions that distinguish the objects from each other (&lt;code&gt;loc&lt;/code&gt; variable in the examples).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Y otra secci&amp;oacute;n donde coloca las definiciones que distinguen los objetos entre s&amp;iacute; ( &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;variable &lt;/font&gt;&lt;/font&gt; &lt;code&gt;loc&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en los ejemplos).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9f623214ec66460787835246331d7a8431d0d95d" translate="yes" xml:space="preserve">
          <source>Another example is below.  It's similar to the first one (and maybe what you meant to ask about):</source>
          <target state="translated">A continuación se presenta otro ejemplo.Es similar al primero (y tal vez lo que querías preguntar):</target>
        </trans-unit>
        <trans-unit id="0213ecf516b2d4882d739982f9db700f291e6d62" translate="yes" xml:space="preserve">
          <source>Another way of achieving a similar result is to use an immediately invoked function expression:</source>
          <target state="translated">Otra forma de lograr un resultado similar es utilizar una expresión de función inmediatamente invocada:</target>
        </trans-unit>
        <trans-unit id="981aec6b82d4aef2ab9869eeaaddcde70f35e9f6" translate="yes" xml:space="preserve">
          <source>As discussed in other answers, it's really a performance consideration because the function in the prototype is shared with all of the instantiations - rather than the function being created for each instantiation.</source>
          <target state="translated">Como se discutió en otras respuestas,es realmente una consideración de rendimiento porque la función en el prototipo es compartida con todas las instancias,en lugar de que la función sea creada para cada instanciación.</target>
        </trans-unit>
        <trans-unit id="ebabf85ca06b23cb95f024f10b759ca642217e40" translate="yes" xml:space="preserve">
          <source>As others have mentioned, there are various reasons to choose one method or the other.  My sample is just meant to clearly demonstrate the difference.</source>
          <target state="translated">Como otros han mencionado,hay varias razones para elegir un método u otro.Mi muestra sólo pretende demostrar claramente la diferencia.</target>
        </trans-unit>
        <trans-unit id="9ca2d8b0f061f98b7e60e7a9c1fa9639212c0666" translate="yes" xml:space="preserve">
          <source>As others have said the first version, using &quot;this&quot; results in every instance of the class A having its own independent copy of function method &quot;x&quot;.  Whereas using &quot;prototype&quot; will mean that each instance of class A will use the same copy of method &quot;x&quot;.</source>
          <target state="translated">Como otros han dicho la primera versión,el uso de &quot;esto&quot; resulta en que cada instancia de la clase A tiene su propia copia independiente del método de función &quot;x&quot;.Mientras que usar &quot;prototipo&quot; significará que cada instancia de la clase A usará la misma copia del método &quot;x&quot;.</target>
        </trans-unit>
        <trans-unit id="562429007d4478f062f7b1115e1ecc040b939321" translate="yes" xml:space="preserve">
          <source>Because of javascript's scoping rules, private_var is available to the function assigned to this.x, but not outside the object.</source>
          <target state="translated">Debido a las reglas de alcance de javascript,private_var está disponible para la función asignada a this.x,pero no fuera del objeto.</target>
        </trans-unit>
        <trans-unit id="514ae34b3f92bfa48cc0a06bcba267d346bbe101" translate="yes" xml:space="preserve">
          <source>Before looking at the differences, the following should be noted:</source>
          <target state="translated">Antes de examinar las diferencias,cabe señalar lo siguiente:</target>
        </trans-unit>
        <trans-unit id="ae90c980e638dd03a0023fb896a1307a3f40e7ba" translate="yes" xml:space="preserve">
          <source>Concerning the last three lines:</source>
          <target state="translated">En cuanto a las últimas tres líneas:</target>
        </trans-unit>
        <trans-unit id="2b8a7b9e2cf97fc63ca3ff461c377262490a1646" translate="yes" xml:space="preserve">
          <source>Cool! Now, when you create &lt;code&gt;a1&lt;/code&gt;, it again goes through all of the 3 steps above, and in step 3, it doesn't do anything, since &lt;code&gt;function A()&lt;/code&gt; has nothing to execute. And if we do:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iexcl;Frio! &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ahora, cuando crea &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , vuelve a pasar por los 3 pasos anteriores, y en el paso 3, no hace nada, ya que la &lt;/font&gt;&lt;/font&gt; &lt;code&gt;function A()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; no tiene nada que ejecutar. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Y si lo hacemos:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a6dd015187d0ada3686c3bc302de7d0b64e2af15" translate="yes" xml:space="preserve">
          <source>Different adults have different ages, but all of the adults get the same rights.</source>
          <target state="translated">Diferentes adultos tienen diferentes edades,pero todos los adultos tienen los mismos derechos.</target>
        </trans-unit>
        <trans-unit id="7a45229532c15d2fa73aad667937ce56403a1a42" translate="yes" xml:space="preserve">
          <source>Every object is linked to a prototype object. When trying to access a property that does not exist, JavaScript will look in the object's prototype object for that property and return it if it exists.</source>
          <target state="translated">Cada objeto está vinculado a un objeto prototipo.Cuando se intenta acceder a una propiedad que no existe,JavaScript buscará en el objeto prototipo esa propiedad y la devolverá si existe.</target>
        </trans-unit>
        <trans-unit id="1f67de5a9c375290139f103847bab77b1f3187b5" translate="yes" xml:space="preserve">
          <source>Feel free to add or edit. Once more complete I could make this a community wiki maybe.</source>
          <target state="translated">Siéntase libre de agregar o editar.Una vez más completo podría hacer de esto una wiki comunitaria tal vez.</target>
        </trans-unit>
        <trans-unit id="30c1034505f0dae85e722fbe58cd4a0976ebb7b2" translate="yes" xml:space="preserve">
          <source>Finally, it should not be too difficult to realize how object oriented programming can be done. There are two sections.</source>
          <target state="translated">Finalmente,no debería ser muy difícil darse cuenta de cómo se puede hacer la programación orientada a objetos.Hay dos secciones.</target>
        </trans-unit>
        <trans-unit id="616fd4e7af8e063af8b704651be5d8e96ff90c42" translate="yes" xml:space="preserve">
          <source>Functional Classes</source>
          <target state="translated">Clases funcionales</target>
        </trans-unit>
        <trans-unit id="1378319ea2e44565319a2798a7f9ab0ed1f666ee" translate="yes" xml:space="preserve">
          <source>Furthermore, &lt;code&gt;amy&lt;/code&gt; is an &lt;code&gt;instanceof&lt;/code&gt;&lt;code&gt;Car&lt;/code&gt;. The &lt;code&gt;instanceof&lt;/code&gt; operator works by seeing if the right operand's prototype object (&lt;code&gt;Car&lt;/code&gt;) can be found anywhere in the left operand's prototype (&lt;code&gt;amy&lt;/code&gt;) chain.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Adem&amp;aacute;s, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;amy&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es una &lt;/font&gt;&lt;/font&gt; &lt;code&gt;instanceof&lt;/code&gt; &lt;code&gt;Car&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La &lt;/font&gt;&lt;/font&gt; &lt;code&gt;instanceof&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; operador funciona al ver si el objeto prototipo del operando derecho ( &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Car&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ) se puede encontrar en cualquier lugar de la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;cadena &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;prototipo del operando izquierdo ( &lt;/font&gt;&lt;/font&gt; &lt;code&gt;amy&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a7c6fc25c03c684ec456561dda6f16904d9fb9b2" translate="yes" xml:space="preserve">
          <source>Here is some code to show this subtle difference:</source>
          <target state="translated">Aquí hay un código para mostrar esta sutil diferencia:</target>
        </trans-unit>
        <trans-unit id="a512ea9bd1a2595e6564a628ec13cd5d0173a27f" translate="yes" xml:space="preserve">
          <source>Here we're creating 2,000,000 new objects with a &lt;code&gt;print&lt;/code&gt; method in Chrome. We're storing every object in an array. Putting &lt;code&gt;print&lt;/code&gt; on the prototype takes about 1/2 as long.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Aqu&amp;iacute; estamos creando 2,000,000 de objetos nuevos con un &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;m&amp;eacute;todo de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;print&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en Chrome. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Estamos almacenando cada objeto en una matriz. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Poner la &lt;/font&gt;&lt;/font&gt; &lt;code&gt;print&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en el prototipo toma aproximadamente la mitad del tiempo.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="21a690c2811cf3a8e2fcb03ca0c412aeb6c8978e" translate="yes" xml:space="preserve">
          <source>Here's where most people get confused:</source>
          <target state="translated">Aquí es donde la mayoría de la gente se confunde:</target>
        </trans-unit>
        <trans-unit id="a6a0ce9031e0776d5fc6120b3023d51bccf114f1" translate="yes" xml:space="preserve">
          <source>Hope this helps.</source>
          <target state="translated">Espero que esto ayude.</target>
        </trans-unit>
        <trans-unit id="f9bebf368c86101e6a1de11b79f2745a5a9cce68" translate="yes" xml:space="preserve">
          <source>However there is one point interesting to know:
Every &lt;code&gt;prototype&lt;/code&gt; object has has a convenience property &lt;code&gt;constructor&lt;/code&gt;, which points back to the function (think object) it came attached to.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Sin embargo, hay un punto interesante que debe saber: cada &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;objeto &lt;/font&gt;&lt;/font&gt; &lt;code&gt;prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tiene un &lt;/font&gt;&lt;/font&gt; &lt;code&gt;constructor&lt;/code&gt; de&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; propiedades de conveniencia &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;, que apunta de nuevo a la funci&amp;oacute;n (objeto de pensamiento) al que vino adjunto.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a50c839129a8568a2bdb8b1eb71615c8ca03bab5" translate="yes" xml:space="preserve">
          <source>However, the primary difference is that there are optimizations implemented in JavaScript engines that only apply when using the pseudoclassical pattern. Think of the pseudoclassical pattern a probably faster version of the prototypal pattern; the object relations in both examples are the same.</source>
          <target state="translated">Sin embargo,la principal diferencia es que hay optimizaciones implementadas en los motores de JavaScript que sólo se aplican cuando se utiliza el patrón pseudoclásico.Piense en el patrón pseudoclásico como una versión probablemente más rápida del patrón prototípico;las relaciones de objetos en ambos ejemplos son las mismas.</target>
        </trans-unit>
        <trans-unit id="8d4860ab556155819ce1e0d3bbe7982e93f66780" translate="yes" xml:space="preserve">
          <source>I believe that @Matthew Crumley is right.  They are &lt;em&gt;functionally&lt;/em&gt;, if not structurally, equivalent.  If you use Firebug to look at the objects that are created using &lt;code&gt;new&lt;/code&gt;, you can see that they are the same.  However, my preference would be the following.  I'm guessing that it just seems more like what I'm used to in C#/Java.  That is, define the class, define the fields, constructor, and methods.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Creo que @Matthew Crumley tiene raz&amp;oacute;n. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Son &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;funcionalmente&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , si no estructuralmente, equivalentes. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si usa Firebug para mirar los objetos que se crean usando &lt;/font&gt;&lt;/font&gt; &lt;code&gt;new&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , puede ver que son los mismos. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Sin embargo, mi preferencia ser&amp;iacute;a la siguiente. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Supongo que se parece m&amp;aacute;s a lo que estoy acostumbrado en C # / Java. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Es decir, definir la clase, definir los campos, el constructor y los m&amp;eacute;todos.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="15622b8173641c92e63c1ee36c4e0b230517bf70" translate="yes" xml:space="preserve">
          <source>I know this has been answered to death but I'd like to show an actual example of speed differences.</source>
          <target state="translated">Sé que esto ha sido contestado hasta la muerte pero me gustaría mostrar un ejemplo real de las diferencias de velocidad.</target>
        </trans-unit>
        <trans-unit id="56482a797b855ebf28ae5afc4251b5db57e29525" translate="yes" xml:space="preserve">
          <source>I put together a jsperf to show this. There is a dramatic difference in the time it takes to instantiate the class, although it is really only relevant if you are making many instances.</source>
          <target state="translated">He preparado un jsperf para mostrar esto.Hay una diferencia dramática en el tiempo que se tarda en instanciar la clase,aunque en realidad sólo es relevante si se hacen muchas instancias.</target>
        </trans-unit>
        <trans-unit id="f431a5529a17c6802ccb464328c61e22ee961e03" translate="yes" xml:space="preserve">
          <source>I think, the &lt;code&gt;this&lt;/code&gt; version is used to enable encapsulation, i.e. data hiding.
It helps to manipulate private variables.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Creo que &lt;/font&gt;&lt;/font&gt; &lt;code&gt;this&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; versi&amp;oacute;n se utiliza para habilitar la encapsulaci&amp;oacute;n, es decir, la ocultaci&amp;oacute;n de datos. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ayuda a manipular variables privadas.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d870f91c01fd9fe42353544305311db08719426e" translate="yes" xml:space="preserve">
          <source>I won't cover why &lt;code&gt;this&lt;/code&gt; changes to &lt;code&gt;a1&lt;/code&gt; but &lt;a href=&quot;https://stackoverflow.com/a/80478/1085998&quot;&gt;this is a great answer&lt;/a&gt; to learn more.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;No cubrir&amp;eacute; por qu&amp;eacute; &lt;/font&gt;&lt;/font&gt; &lt;code&gt;this&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; cambia a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a1&lt;/code&gt; ,&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; pero &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/80478/1085998&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;esta es una gran respuesta&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para obtener m&amp;aacute;s informaci&amp;oacute;n.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="89078c5b79458591085ee64d7f970de4d93797ee" translate="yes" xml:space="preserve">
          <source>If you think this is not a problem, then it depends on whether you can live without private variables, and whether you are experienced enough to know a leak when you see one. Also, having to put the constructor logic after the method definitions is inconvenient.</source>
          <target state="translated">Si crees que esto no es un problema,entonces depende de si puedes vivir sin variables privadas,y si tienes la suficiente experiencia para reconocer una fuga cuando la ves.Además,tener que poner la lógica constructiva después de las definiciones de los métodos es inconveniente.</target>
        </trans-unit>
        <trans-unit id="5217801ffee692a0d0416de94ce40dcc69d5d848" translate="yes" xml:space="preserve">
          <source>In conclusion, in the first example &lt;strong&gt;a copy of the function is assigned to each instance&lt;/strong&gt;. In the second example &lt;strong&gt;a single copy of the function is shared by all instances&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En conclusi&amp;oacute;n, en el primer ejemplo &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;se asigna una copia de la funci&amp;oacute;n a cada instancia&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En el segundo ejemplo, &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;todas las instancias comparten una &amp;uacute;nica copia de la funci&amp;oacute;n&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="64a03b3c9405b8097a143dbb32c646d5cd09f22e" translate="yes" xml:space="preserve">
          <source>In general there is no right or wrong, it's more a matter of taste or a design decision depending on your requirements. The prototype however is the technique that is used to develop in an object oriented manner, as I hope you'll see at the end of this answer.</source>
          <target state="translated">En general no hay nada bueno o malo,es más una cuestión de gusto o una decisión de diseño dependiendo de sus necesidades.El prototipo,sin embargo,es la técnica que se utiliza para desarrollar de manera orientada a los objetos,como espero que vea al final de esta respuesta.</target>
        </trans-unit>
        <trans-unit id="666df82d0c8fe3053b47e6a0219f55650ccc2aff" translate="yes" xml:space="preserve">
          <source>In most cases they are essentially the same, but the second version saves memory because there is only one instance of the function instead of a separate function for each object.</source>
          <target state="translated">En la mayoría de los casos son esencialmente los mismos,pero la segunda versión ahorra memoria porque sólo hay una instancia de la función en lugar de una función separada para cada objeto.</target>
        </trans-unit>
        <trans-unit id="91aee306e0db067a91d992a548f5fa66a86b83c9" translate="yes" xml:space="preserve">
          <source>In the case of:</source>
          <target state="translated">En el caso de:</target>
        </trans-unit>
        <trans-unit id="3a06ec36da521fee44241221c9d5800a01c8444c" translate="yes" xml:space="preserve">
          <source>In the second example you are adding a property to the prototype object that all the instances created with &lt;code&gt;A&lt;/code&gt; point to.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En el segundo ejemplo, est&amp;aacute; agregando una propiedad al objeto prototipo al que &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;apuntan &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;todas las instancias creadas con &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; .&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="68d939a819d95a1b232c797326d7169b5ded8eeb" translate="yes" xml:space="preserve">
          <source>In the second line, &lt;em&gt;A.prototype.x&lt;/em&gt; is assigned a reference to a function. This will create an &lt;em&gt;x&lt;/em&gt; property if it doesn't exist, or assign a new value if it does. So the difference with the first example in which object's &lt;em&gt;x&lt;/em&gt; property is involved in the expression.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En la segunda l&amp;iacute;nea, a &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;A.prototype.x&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; se le asigna una referencia a una funci&amp;oacute;n. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esto crear&amp;aacute; una &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;propiedad &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;x&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; si no existe, o asignar&amp;aacute; un nuevo valor si lo hace. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Entonces, la diferencia con el primer ejemplo en el que la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;propiedad &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;x&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; del objeto &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;est&amp;aacute; involucrada en la expresi&amp;oacute;n.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8f1f444d3fad61ca80f657809854392a20d97c79" translate="yes" xml:space="preserve">
          <source>In this case &lt;code&gt;Car&lt;/code&gt; is a &lt;strong&gt;function&lt;/strong&gt; (&lt;strong&gt;also&lt;/strong&gt; think &lt;strong&gt;object&lt;/strong&gt;) that can be invoked as you are used to do. It has a property &lt;code&gt;methods&lt;/code&gt; (which is an object with a &lt;code&gt;move&lt;/code&gt; function). When &lt;code&gt;Car&lt;/code&gt; is invoked the &lt;code&gt;extend&lt;/code&gt; function is called, which does some magic, and extends the &lt;code&gt;Car&lt;/code&gt; function (think object) with the methods defined within &lt;code&gt;methods&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En este caso, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Car&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es una &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;funci&amp;oacute;n&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ( &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;tambi&amp;eacute;n &lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;objeto de&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; pensamiento &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;) que se puede invocar como sol&amp;iacute;a hacerlo. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tiene &lt;/font&gt;&lt;/font&gt; &lt;code&gt;methods&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; propiedad &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(que es un objeto con una &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;funci&amp;oacute;n de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;move&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cuando &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;se invoca &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Car&lt;/code&gt; ,se&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; llama a la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;funci&amp;oacute;n &lt;/font&gt;&lt;/font&gt; &lt;code&gt;extend&lt;/code&gt; er&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , que hace algo de magia, y extiende la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;funci&amp;oacute;n &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Car&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (objeto de pensamiento) con los m&amp;eacute;todos definidos dentro de los &lt;/font&gt;&lt;/font&gt; &lt;code&gt;methods&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="412ce250c444246830eebe423a5e0e2d9149c14c" translate="yes" xml:space="preserve">
          <source>In this case, &lt;code&gt;A&lt;/code&gt; assigned the return value of calling the function on the right-hand side. Here again, since &lt;em&gt;this&lt;/em&gt; is not set in the call, it will reference the global object and &lt;code&gt;this.x&lt;/code&gt; is effective &lt;code&gt;window.x&lt;/code&gt;. Since the function doesn't return anything, &lt;code&gt;A&lt;/code&gt; will have a value of &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En este caso, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; asign&amp;oacute; el valor de retorno de llamar a la funci&amp;oacute;n en el lado derecho. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Aqu&amp;iacute; nuevamente, dado que &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;esto&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; no se establece en la llamada, har&amp;aacute; referencia al objeto global y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;this.x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es efectivo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;window.x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Como la funci&amp;oacute;n no devuelve nada, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tendr&amp;aacute; un valor de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9dcc855b3c241eea76935dfb826e530678f84354" translate="yes" xml:space="preserve">
          <source>In this case, variable &lt;code&gt;A&lt;/code&gt; is assigned a value that is a reference to a function.  When that function is called using &lt;code&gt;A()&lt;/code&gt;, the function's &lt;em&gt;this&lt;/em&gt; isn't set by the call so it defaults to the global object and the expression &lt;code&gt;this.x&lt;/code&gt; is effective &lt;code&gt;window.x&lt;/code&gt;. The result is that a reference to the function expression on the right-hand side is assigned to &lt;code&gt;window.x&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En este caso, a la variable &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; se le asigna un valor que es una referencia a una funci&amp;oacute;n. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cuando esta funci&amp;oacute;n se llama usando &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , la funci&amp;oacute;n es &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;esto&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; no est&amp;aacute; establecido por la llamada por lo que por defecto es el objeto global y la expresi&amp;oacute;n &lt;/font&gt;&lt;/font&gt; &lt;code&gt;this.x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es eficaz &lt;/font&gt;&lt;/font&gt; &lt;code&gt;window.x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El resultado es que se asigna a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;window.x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; una referencia a la expresi&amp;oacute;n de la funci&amp;oacute;n en el lado &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;derecho&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c9c1162f8649ee6c800e3c7ee24847b2ec12ab6c" translate="yes" xml:space="preserve">
          <source>In this example &lt;code&gt;Car&lt;/code&gt; links to the &lt;code&gt;prototype&lt;/code&gt; object, which links via &lt;code&gt;constructor&lt;/code&gt; to &lt;code&gt;Car&lt;/code&gt; itself, i.e. &lt;code&gt;Car.prototype.constructor&lt;/code&gt; is &lt;code&gt;Car&lt;/code&gt; itself. This allows you to figure out which constructor function built a certain object.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En este ejemplo, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Car&lt;/code&gt; se&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; vincula al &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;objeto &lt;/font&gt;&lt;/font&gt; &lt;code&gt;prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , que se vincula a trav&amp;eacute;s del &lt;/font&gt;&lt;/font&gt; &lt;code&gt;constructor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; con el &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;propio &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Car&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , es decir, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Car.prototype.constructor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es el &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;propio &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Car&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esto le permite descubrir qu&amp;eacute; funci&amp;oacute;n constructora construy&amp;oacute; un determinado objeto.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bdba5bd5e74f1b3ee8430302ca046662463d4fe0" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;new&lt;/code&gt; operator has been added before the function expression so that the function is called as a constructor. When called with &lt;code&gt;new&lt;/code&gt;, the function's &lt;em&gt;this&lt;/em&gt; is set to reference a new Object whose private &lt;code&gt;[[Prototype]]&lt;/code&gt; property is set to reference the constructor's public &lt;em&gt;prototype&lt;/em&gt;. So in the assignment statement, the &lt;code&gt;x&lt;/code&gt; property will be created on this new object. When called as a constructor, a function returns its &lt;em&gt;this&lt;/em&gt; object by default, so there is no need for a separate &lt;code&gt;return this;&lt;/code&gt; statement.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En este ejemplo, el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;new&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; operador se ha agregado antes de la expresi&amp;oacute;n de la funci&amp;oacute;n para que la funci&amp;oacute;n se llame como un constructor. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cuando se llama con &lt;/font&gt;&lt;/font&gt; &lt;code&gt;new&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , la funci&amp;oacute;n &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;this&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; est&amp;aacute; configurada para hacer referencia a un nuevo Object cuya &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;propiedad &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;privada &lt;/font&gt;&lt;/font&gt; &lt;code&gt;[[Prototype]]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; est&amp;aacute; configurada para hacer referencia al &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;prototipo&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; p&amp;uacute;blico del constructor &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Entonces, en la declaraci&amp;oacute;n de asignaci&amp;oacute;n, la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;propiedad &lt;/font&gt;&lt;/font&gt; &lt;code&gt;x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; se crear&amp;aacute; en este nuevo objeto. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cuando se llama como constructor, una funci&amp;oacute;n devuelve su &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;objeto &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;este&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; por defecto, por lo que no es necesario que &lt;/font&gt;&lt;/font&gt; &lt;code&gt;return this;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; por separado &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;declaraci&amp;oacute;n.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="89bfdc078a207ee283d2d0a52398f24343989b97" translate="yes" xml:space="preserve">
          <source>In your first example, you are adding a property &lt;code&gt;x&lt;/code&gt; to each instance created with the &lt;code&gt;A&lt;/code&gt; function.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En su primer ejemplo, est&amp;aacute; agregando una propiedad &lt;/font&gt;&lt;/font&gt; &lt;code&gt;x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; a cada instancia creada con la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;funci&amp;oacute;n &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; .&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bb4c3a5d3272e73f58dce20dcda9040a1a637e9e" translate="yes" xml:space="preserve">
          <source>It does the same as in the prototypal pattern really, it is just syntactic sugar overtop of the prototypal pattern.</source>
          <target state="translated">Hace lo mismo que en el patrón prototípico,en realidad,es sólo azúcar sintáctica por encima del patrón prototípico.</target>
        </trans-unit>
        <trans-unit id="723750099350c4865d1a35080b4c625513b94ce7" translate="yes" xml:space="preserve">
          <source>It will see that &lt;code&gt;a1&lt;/code&gt; does not contain &lt;code&gt;hey&lt;/code&gt; and it will check its &lt;code&gt;__proto__&lt;/code&gt; property object to see if it has it, which is the case.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ver&amp;aacute; que &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; no contiene &lt;/font&gt;&lt;/font&gt; &lt;code&gt;hey&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y verificar&amp;aacute; su &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;objeto de propiedad &lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para ver si lo tiene, que es el caso.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ed913fb6557c9ddd4efa7738e62a2126ab7b507a" translate="yes" xml:space="preserve">
          <source>JavaScript is an object-oriented language, i.e. most values are objects, including functions. (Strings, numbers, and booleans are &lt;em&gt;not&lt;/em&gt; objects.)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;JavaScript es un lenguaje orientado a objetos, es decir, la mayor&amp;iacute;a de los valores son objetos, incluidas las funciones. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(Las cadenas, los n&amp;uacute;meros y los booleanos &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;no&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; son &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;objetos).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a2fdf9d982a02784e0975ab4455583df7ff00a3c" translate="yes" xml:space="preserve">
          <source>JavaScript isn't a low-level language.  It may not be very valuable to think of prototyping or other inheritance patterns as a way to explicitly change the way memory is allocated.</source>
          <target state="translated">JavaScript no es un lenguaje de bajo nivel.Puede que no sea muy valioso pensar en la creación de prototipos u otros patrones de herencia como una forma de cambiar explícitamente la forma en que se asigna la memoria.</target>
        </trans-unit>
        <trans-unit id="8fdca31371e433fd45f5ce78b0ac9a2214f60370" translate="yes" xml:space="preserve">
          <source>Let me give you a more comprehensive answer that I learned during a JavaScript training course.</source>
          <target state="translated">Déjeme darle una respuesta más completa que aprendí durante un curso de entrenamiento de JavaScript.</target>
        </trans-unit>
        <trans-unit id="b03b280b17407f067546235b537992021180eadf" translate="yes" xml:space="preserve">
          <source>Let us look at the following example:</source>
          <target state="translated">Veamos el siguiente ejemplo:</target>
        </trans-unit>
        <trans-unit id="1f5f057f5d33bae053072b69aa5b677d4464cea0" translate="yes" xml:space="preserve">
          <source>Let's go on with our example and create an &quot;object&quot; out of &lt;code&gt;A&lt;/code&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Continuemos con nuestro ejemplo y creemos un &quot;objeto&quot; de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7bebb77119825ff6eb9b617e8afcfe33f39e3a01" translate="yes" xml:space="preserve">
          <source>Lets look at the implementation now.</source>
          <target state="translated">Veamos la implementación ahora.</target>
        </trans-unit>
        <trans-unit id="c0f8fd08fd1ae3fed7665265a11fa998dbd5952c" translate="yes" xml:space="preserve">
          <source>Most answers mentioned the difference already, i.e. when prototyping the function is shared with all (future) instances. Whereas declaring the function in the class will create a copy for each instance.</source>
          <target state="translated">La mayoría de las respuestas ya mencionaron la diferencia,es decir,que cuando se hace un prototipo,la función se comparte con todas las instancias (futuras).Mientras que al declarar la función en la clase se creará una copia para cada instancia.</target>
        </trans-unit>
        <trans-unit id="6371c6ad3fae9de8ee8f263431e6d38bbd8ba8d0" translate="yes" xml:space="preserve">
          <source>Most people here (especially the top-rated answers) tried to explain how they are different without explaining WHY. I think this is wrong and if you understand the fundamentals first, the difference will become obvious. Let's try to explain the fundamentals first...</source>
          <target state="translated">La mayoría de la gente aquí (especialmente las respuestas de más alto nivel)trató de explicar cómo son diferentes sin explicar el PORQUÉ.Creo que esto está mal y si entiendes los fundamentos primero,la diferencia se hará evidente.Intentemos explicar los fundamentos primero...</target>
        </trans-unit>
        <trans-unit id="af8ddf39a6e280886e3a21db4258fe6c6694944a" translate="yes" xml:space="preserve">
          <source>NOTE: Some people tend to not call the internal Prototype property as &lt;code&gt;__proto__&lt;/code&gt;, I've used this name through the post to distinguish it clearly to the &lt;code&gt;Functional.prototype&lt;/code&gt; property as two different things.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;NOTA: Algunas personas tienden a no llamar a la propiedad Prototype interna como &lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , he usado este nombre a trav&amp;eacute;s de la publicaci&amp;oacute;n para distinguirlo claramente de la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;propiedad &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Functional.prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; como dos cosas diferentes.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9e08b3dab8de59f8684d10acd61311d09f996379" translate="yes" xml:space="preserve">
          <source>Not sure if this pattern is still relevant nowadays, but it exists. And it is good to know about it.
You simply pass an object and a property to the decorator function. The decorator returns the object with property and method.</source>
          <target state="translated">No estoy seguro de si este patrón es todavía relevante hoy en día,pero existe.Y es bueno saberlo.Simplemente se pasa un objeto y una propiedad a la función de decorador.El decorador devuelve el objeto con la propiedad y el método.</target>
        </trans-unit>
        <trans-unit id="19bda0638ba7632222a0cb55603f398896425e39" translate="yes" xml:space="preserve">
          <source>Now, let's try to create another object:</source>
          <target state="translated">Ahora,intentemos crear otro objeto:</target>
        </trans-unit>
        <trans-unit id="419574ffc2da398be8c2c847ff168ef513bfe459" translate="yes" xml:space="preserve">
          <source>Now, the &lt;code&gt;prototype&lt;/code&gt; structure can be applied as following:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ahora, la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;estructura &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;del &lt;/font&gt;&lt;/font&gt; &lt;code&gt;prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; se puede aplicar de la siguiente manera:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7165ad3fec60f094c503a8486cf19a6a37782c89" translate="yes" xml:space="preserve">
          <source>Now, there's another thing happening when &lt;code&gt;var a1 = new A()&lt;/code&gt; statement is processed. Basically &lt;code&gt;A()&lt;/code&gt; is executed and if A is something like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ahora, sucede otra cosa cuando &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;se procesa la declaraci&amp;oacute;n &lt;/font&gt;&lt;/font&gt; &lt;code&gt;var a1 = new A()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;B&amp;aacute;sicamente &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;se ejecuta &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y si A es algo como esto:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="83d1f08532a2d718637904b4c370e11fc354f1dc" translate="yes" xml:space="preserve">
          <source>Object Decorator pattern</source>
          <target state="translated">Patrón del Decorador de Objetos</target>
        </trans-unit>
        <trans-unit id="1afec21842c90d30de589ac2651b4ea942c64d94" translate="yes" xml:space="preserve">
          <source>One section that defines common properties/methods in the prototype (chain).</source>
          <target state="translated">Una sección que define las propiedades comunes-métodos en el prototipo (cadena).</target>
        </trans-unit>
        <trans-unit id="f8555b3f33258c80236579e089299ab9f568e09a" translate="yes" xml:space="preserve">
          <source>Prototypal Classes</source>
          <target state="translated">Clases prototípicas</target>
        </trans-unit>
        <trans-unit id="ebaab3675de408919997f055a33be6353eee8b66" translate="yes" xml:space="preserve">
          <source>Prototype is the template of the class; which applies to all future instances of it. Whereas this is the particular instance of the object.</source>
          <target state="translated">El prototipo es la plantilla de la clase;que se aplica a todas las instancias futuras de la misma.Mientras que esta es la instancia particular del objeto.</target>
        </trans-unit>
        <trans-unit id="7c10620b77891a5a8f24861d5ce595bd9ce31cc1" translate="yes" xml:space="preserve">
          <source>Pseudoclassical patterns</source>
          <target state="translated">Patrones pseudoclásicos</target>
        </trans-unit>
        <trans-unit id="99e10fb4f059613db70e3de60d817eff342bc563" translate="yes" xml:space="preserve">
          <source>Remember why the &lt;code&gt;__proto__&lt;/code&gt; property exists on every object? So that if you retrieve the &lt;code&gt;yoMan&lt;/code&gt; property on &lt;code&gt;a1&lt;/code&gt; (which doesn't exist), its &lt;code&gt;__proto__&lt;/code&gt; property will be consulted, which if it's an object (and is most cases it is), it will check if it contains &lt;code&gt;yoMan&lt;/code&gt;, and if it doesn't, it will consult that object's &lt;code&gt;__proto__&lt;/code&gt; etc. If it does, it will take that property value and display it to you.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iquest;Recuerdas por qu&amp;eacute; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;existe la propiedad &lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en cada objeto? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;De modo que si recupera la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;propiedad &lt;/font&gt;&lt;/font&gt; &lt;code&gt;yoMan&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (que no existe), se consultar&amp;aacute; su &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;propiedad &lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , que si es un objeto (y en la mayor&amp;iacute;a de los casos lo es), comprobar&amp;aacute; si contiene &lt;/font&gt;&lt;/font&gt; &lt;code&gt;yoMan&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , y si no lo hace, consultar&amp;aacute; el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; de&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ese objeto, &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;etc. Si lo hace, tomar&amp;aacute; el valor de esa propiedad y se lo mostrar&amp;aacute;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b0a6e2e15bdc9df61cac47d196cd4068c8ed4bfe" translate="yes" xml:space="preserve">
          <source>So here are the snippets in question:</source>
          <target state="translated">Así que aquí están los recortes en cuestión:</target>
        </trans-unit>
        <trans-unit id="48bcbce51ee2114152267f2210d7eb26c82bc1a0" translate="yes" xml:space="preserve">
          <source>So someone decided to use this fact + the fact that when you create &lt;code&gt;a1&lt;/code&gt;, its &lt;code&gt;__proto__&lt;/code&gt; property points to the same (empty) object &lt;code&gt;A.prototype&lt;/code&gt; points to and do this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Entonces, alguien decidi&amp;oacute; usar este hecho + el hecho de que cuando crea &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , su &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;propiedad &lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; apunta al mismo objeto (vac&amp;iacute;o) &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A.prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; apunta y hace esto:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3e8e06d432de29a74b35aa0883013e73afe1ae28" translate="yes" xml:space="preserve">
          <source>So to summarize, when you do &lt;code&gt;var a1 = new A()&lt;/code&gt; there are 3 things happening in the background:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para resumir, cuando haces &lt;/font&gt;&lt;/font&gt; &lt;code&gt;var a1 = new A()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; hay 3 cosas que suceden en segundo plano:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="22ed9816149fa3050650e31e821017731cbc0d1f" translate="yes" xml:space="preserve">
          <source>So we're now at the point where we have a freshly baked empty &lt;code&gt;a1&lt;/code&gt; object. We said that all objects in JavaScript have an internal &lt;code&gt;__proto__&lt;/code&gt; property which points to something (&lt;code&gt;a1&lt;/code&gt; also has it), whether it's null or another object. What the &lt;code&gt;new&lt;/code&gt; operator does is that it sets that &lt;code&gt;__proto__&lt;/code&gt; property to point to the function's &lt;code&gt;prototype&lt;/code&gt; property. Read that again. It's basically this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;As&amp;iacute; que ahora estamos en el punto donde tenemos un &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;objeto &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; vac&amp;iacute;o reci&amp;eacute;n horneado &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. Dijimos que todos los objetos en JavaScript tienen una &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;propiedad &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;interna &lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que apunta a algo ( &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tambi&amp;eacute;n lo tiene), ya sea nulo u otro objeto. Lo que hace el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;new&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; operador es que establece esa &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;propiedad &lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para que apunte a la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;propiedad &lt;/font&gt;&lt;/font&gt; &lt;code&gt;prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; la funci&amp;oacute;n &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. Lee eso de nuevo. B&amp;aacute;sicamente es esto:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="91cc8422370d40ae76ed33226042018137312f86" translate="yes" xml:space="preserve">
          <source>So what does this &lt;code&gt;__proto__&lt;/code&gt; property points to? Well, usually another object (we'll explain why later). The only way to force JavaScript for the &lt;code&gt;__proto__&lt;/code&gt; property to NOT point to another object is to use &lt;code&gt;var newObj = Object.create(null)&lt;/code&gt;. Even if you do this, the &lt;code&gt;__proto__&lt;/code&gt; property STILL exists as a property of the object,  just it doesn't point to another object, it points to &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Entonces, &amp;iquest;a qu&amp;eacute; &lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; esta &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;propiedad &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;__proto__&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Bueno, generalmente otro objeto (explicaremos por qu&amp;eacute; m&amp;aacute;s adelante). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La &amp;uacute;nica forma de forzar JavaScript para que la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;propiedad &lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; NO apunte a otro objeto es usar &lt;/font&gt;&lt;/font&gt; &lt;code&gt;var newObj = Object.create(null)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Incluso si hace esto, la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;propiedad &lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; TODAV&amp;Iacute;A existe como una propiedad del objeto, simplemente no apunta a otro objeto, apunta a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;null&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="68f8dbb71bc22f1b333dff6ea439d77f35689fff" translate="yes" xml:space="preserve">
          <source>So, we add it using prototype, rather than this.</source>
          <target state="translated">Así que lo añadimos usando un prototipo,en lugar de esto.</target>
        </trans-unit>
        <trans-unit id="14733402dd610d5b95df826ad8095da2e9ad0b60" translate="yes" xml:space="preserve">
          <source>Some developers can be confused in the beginning. See below example:</source>
          <target state="translated">Algunos desarrolladores pueden confundirse al principio.Véase el ejemplo que figura a continuación:</target>
        </trans-unit>
        <trans-unit id="5dce25ee28014dce88c211954e9a1c27a9b6793f" translate="yes" xml:space="preserve">
          <source>Steps 1,2,3 will repeat. Do you notice something? The key word is &lt;strong&gt;repeat.&lt;/strong&gt; Step 1: &lt;code&gt;a2&lt;/code&gt; will be a new empty object, step 2: its &lt;code&gt;__proto__&lt;/code&gt; property will point to the same thing &lt;code&gt;A.prototype&lt;/code&gt; points to and most importantly, step 3: function &lt;code&gt;A()&lt;/code&gt; is AGAIN executed, which means that &lt;code&gt;a2&lt;/code&gt; will get &lt;code&gt;hey&lt;/code&gt; property containing a function. &lt;code&gt;a1&lt;/code&gt; and &lt;code&gt;a2&lt;/code&gt; have two SEPARATE properties named &lt;code&gt;hey&lt;/code&gt; which point to 2 SEPARATE functions! We now have duplicate functions in same two different objects doing the same thing, oops...You can imagine the memory implications of this if we have 1000 objects created with &lt;code&gt;new A&lt;/code&gt;, after all functions declarations take more memory than something like the number 2. So how do we prevent this?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Los pasos 1,2,3 se repetir&amp;aacute;n. &amp;iquest;Notas algo? La palabra clave es &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;repetir.&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Paso 1: &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ser&amp;aacute; un nuevo objeto vac&amp;iacute;o, paso 2: su &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;propiedad &lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; apuntar&amp;aacute; a lo mismo que &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;apunta &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A.prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y lo m&amp;aacute;s importante, paso 3: la funci&amp;oacute;n &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; se ejecuta OTRA VEZ, lo que significa que &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; obtendr&amp;aacute; &lt;/font&gt;&lt;/font&gt; &lt;code&gt;hey&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; propiedad que contiene una funci&amp;oacute;n. &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tienen dos propiedades SEPARADAS llamadas &lt;/font&gt;&lt;/font&gt; &lt;code&gt;hey&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que apuntan a 2 funciones SEPARADAS! Ahora tenemos funciones duplicadas en los mismos dos objetos diferentes que hacen lo mismo, oops ... Puedes imaginar las implicaciones de memoria de esto si tenemos 1000 objetos creados con&lt;/font&gt;&lt;/font&gt; &lt;code&gt;new A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , despu&amp;eacute;s de todas las declaraciones de funciones toman m&amp;aacute;s memoria que algo como el n&amp;uacute;mero 2. Entonces, &amp;iquest;c&amp;oacute;mo podemos evitar esto?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ba42003109816715679c7cec7df83598908ebb1c" translate="yes" xml:space="preserve">
          <source>Take these 2 examples:</source>
          <target state="translated">Tome estos dos ejemplos:</target>
        </trans-unit>
        <trans-unit id="1a1285513924c3fcc88d19dd90ef1b7247c97be6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;instanceof&lt;/code&gt; operator returns &lt;code&gt;false&lt;/code&gt;, because &lt;code&gt;Dog&lt;/code&gt;'s prototype cannot be found anywhere in &lt;code&gt;fido&lt;/code&gt;'s prototype chain. &lt;code&gt;fido&lt;/code&gt; is a simple object that is created with an object literal, i.e. it just delegates to &lt;code&gt;Object.prototype&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;operador &lt;/font&gt;&lt;/font&gt; &lt;code&gt;instanceof&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; devuelve &lt;/font&gt;&lt;/font&gt; &lt;code&gt;false&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , porque &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;el prototipo de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Dog&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; no se puede encontrar en ninguna parte de &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;la cadena de prototipos de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;fido&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;/font&gt; &lt;code&gt;fido&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es un objeto simple que se crea con un objeto literal, es decir, simplemente delega a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Object.prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="59cba9bc0a9bd21c18ba6a3cd21c7e6251c3604c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;prototype&lt;/code&gt; property of a function constructor refers to the prototype object of all instances created with that function when using &lt;code&gt;new&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;propiedad &lt;/font&gt;&lt;/font&gt; &lt;code&gt;prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; de un constructor de funciones se refiere al objeto prototipo de todas las instancias creadas con esa funci&amp;oacute;n cuando se usa &lt;/font&gt;&lt;/font&gt; &lt;code&gt;new&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5fe4abd47db3ca32634516e9378bb727fff7e1ff" translate="yes" xml:space="preserve">
          <source>The examples have very different outcomes.</source>
          <target state="translated">Los ejemplos tienen resultados muy diferentes.</target>
        </trans-unit>
        <trans-unit id="597df3874dbfac5cd4c24cbbd34b592696279cd5" translate="yes" xml:space="preserve">
          <source>The fact that you used the operator &lt;code&gt;new&lt;/code&gt; before a function invocation &lt;code&gt;A()&lt;/code&gt; did something ADDITIONAL in the background. The &lt;code&gt;new&lt;/code&gt; keyword created a new object which now references &lt;code&gt;a1&lt;/code&gt; and that object is empty. Here's what happening additionally:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El hecho de que haya utilizado el operador &lt;/font&gt;&lt;/font&gt; &lt;code&gt;new&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; antes de una invocaci&amp;oacute;n de funci&amp;oacute;n &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; hizo algo ADICIONAL en segundo plano. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La &lt;/font&gt;&lt;/font&gt; &lt;code&gt;new&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; palabra clave cre&amp;oacute; un nuevo objeto que ahora hace referencia a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y ese objeto est&amp;aacute; vac&amp;iacute;o. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esto es lo que sucede adem&amp;aacute;s:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7e55db4e23b6f32c08ffe74b551e861a639ca0e4" translate="yes" xml:space="preserve">
          <source>The first example changes the interface for that object only. The second example changes the interface for all object of that class.</source>
          <target state="translated">El primer ejemplo cambia la interfaz sólo para ese objeto.El segundo ejemplo cambia la interfaz para todos los objetos de esa clase.</target>
        </trans-unit>
        <trans-unit id="3d067c8d8a017b9c83dc914075cce47ebc57d678" translate="yes" xml:space="preserve">
          <source>The first two patterns allow a discussion of using techniques to define  shared methods or using methods that are defined inline in the body of the constructor. In both cases every instance has its own &lt;code&gt;move&lt;/code&gt; function.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Los primeros dos patrones permiten una discusi&amp;oacute;n sobre el uso de t&amp;eacute;cnicas para definir m&amp;eacute;todos compartidos o el uso de m&amp;eacute;todos que se definen en l&amp;iacute;nea en el cuerpo del constructor. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En ambos casos, cada instancia tiene su propia &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;funci&amp;oacute;n de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;move&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="82ae2b7331064f17552e8317206e9a42246c5f28" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;A()&lt;/code&gt; is being executed with &lt;code&gt;this&lt;/code&gt; set to the new, empty object created in step 1 (read the answer I referenced above as to why &lt;code&gt;this&lt;/code&gt; changes to &lt;code&gt;a1&lt;/code&gt;)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La funci&amp;oacute;n &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; se ejecuta con &lt;/font&gt;&lt;/font&gt; &lt;code&gt;this&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; conjunto en el nuevo objeto vac&amp;iacute;o creado en el paso 1 (lea la respuesta a la que hice referencia anteriormente sobre por qu&amp;eacute; &lt;/font&gt;&lt;/font&gt; &lt;code&gt;this&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; cambia a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; )&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2b2318654afa23c4d76517a2dd3e321c2338ca9a" translate="yes" xml:space="preserve">
          <source>The prototypal pattern does not lend itself well to the same examination, because function sharing via a prototype delegation is the very goal for the prototypal pattern. As others pointed out, it is expected to have a better memory footprint.</source>
          <target state="translated">La pauta prototípica no se presta bien al mismo examen,porque el objetivo de la pauta prototípica es compartir las funciones a través de una delegación de prototipos.Como otros señalaron,se espera que tenga una mejor huella de memoria.</target>
        </trans-unit>
        <trans-unit id="81a9d5f167760be8b398327c28ef552413c90ceb" translate="yes" xml:space="preserve">
          <source>The ultimate problem with using &lt;code&gt;this&lt;/code&gt; instead of &lt;code&gt;prototype&lt;/code&gt; is that when overriding a method, the constructor of the base class will still refer to the overridden method. Consider this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El &amp;uacute;ltimo problema con el uso de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;this&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; lugar del &lt;/font&gt;&lt;/font&gt; &lt;code&gt;prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es que al anular un m&amp;eacute;todo, el constructor de la clase base todav&amp;iacute;a se referir&amp;aacute; al m&amp;eacute;todo anulado. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Considera esto:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cb8a7a4b9ba94c3c72b9b96dae39a5767b6c3728" translate="yes" xml:space="preserve">
          <source>There's something happening in the background when this thing happened. &lt;code&gt;a1&lt;/code&gt; is an ordinary variable which was assigned a new, empty object.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Hay algo sucediendo en el fondo cuando sucedi&amp;oacute; esto. &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es una variable ordinaria a la que se le asign&amp;oacute; un nuevo objeto vac&amp;iacute;o.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dad014627fd09fcb90b0d1758b0b7befb734da14" translate="yes" xml:space="preserve">
          <source>These differences between the two approaches also manifest if you're serializing and de-serializing your Javascript objects to/from JSON. Methods defined on an object's prototype are not serialized when you serialize the object, which can be convenient when for example you want to serialize just the data portions of an object, but not it's methods:</source>
          <target state="translated">Estas diferencias entre los dos enfoques también se manifiestan si estás serializando y des-serializando tus objetos Javascript de JSON.Los métodos definidos en el prototipo de un objeto no se serializan cuando se serializa el objeto,lo que puede ser conveniente cuando por ejemplo se quiere serializar sólo las porciones de datos de un objeto,pero no sus métodos:</target>
        </trans-unit>
        <trans-unit id="9067e4c49b46c1e9bbb2aec0015f46bb87b79ddd" translate="yes" xml:space="preserve">
          <source>Think about statically typed language, things on &lt;code&gt;prototype&lt;/code&gt; are static and things on &lt;code&gt;this&lt;/code&gt; are instance related.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Piense en el lenguaje est&amp;aacute;ticamente escrito, las cosas en el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; son est&amp;aacute;ticas y las cosas en &lt;/font&gt;&lt;/font&gt; &lt;code&gt;this&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; est&amp;aacute;n relacionadas con la instancia.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2355c245479715e65d721ee60eaa07117437d333" translate="yes" xml:space="preserve">
          <source>This example, though different, comes closest to the first example in the question.</source>
          <target state="translated">Este ejemplo,aunque diferente,se acerca más al primer ejemplo de la pregunta.</target>
        </trans-unit>
        <trans-unit id="ca0afa04c7a867ec6cfc7913f8acd8d206551180" translate="yes" xml:space="preserve">
          <source>This is an uncommon use of &lt;em&gt;new&lt;/em&gt; since the only way to reference the constructor is via &lt;em&gt;A.constructor&lt;/em&gt;. It would be much more common to do:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Este es un uso poco com&amp;uacute;n de &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;new&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ya que la &amp;uacute;nica forma de hacer referencia al constructor es a trav&amp;eacute;s de &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;A.constructor&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ser&amp;iacute;a mucho m&amp;aacute;s com&amp;uacute;n hacer:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="036187c48acf9dbe69bc45355dde270b1aec2e23" translate="yes" xml:space="preserve">
          <source>This is really just another form of the prototypal pattern in simplified form and more familiar to do those who program in Java for example, since it uses the &lt;code&gt;new&lt;/code&gt; constructor.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esta es realmente solo otra forma del patr&amp;oacute;n protot&amp;iacute;pico en forma simplificada y m&amp;aacute;s familiar para aquellos que programan en Java, por ejemplo, ya que usa el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;new&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; constructor.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5029be1875db619a586bd4a66a39dc6782bd2ffa" translate="yes" xml:space="preserve">
          <source>This is what allows us to apply concepts like superclass or subclass in JavaScript.</source>
          <target state="translated">Esto es lo que nos permite aplicar conceptos como superclase o subclase en JavaScript.</target>
        </trans-unit>
        <trans-unit id="8e91f2df575afa57c8758a2f705311ee0e328b72" translate="yes" xml:space="preserve">
          <source>To check that &lt;em&gt;A&lt;/em&gt; has an &lt;em&gt;x&lt;/em&gt; property:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para verificar que &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;A&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tiene una &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;propiedad &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;x&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="040a03f3b5302125518bef7090315aeab9a7bb1b" translate="yes" xml:space="preserve">
          <source>Use of 'prototype' vs. 'this' in JavaScript</source>
          <target state="translated">Uso de &quot;prototipo&quot; vs.&quot;esto&quot; en JavaScript</target>
        </trans-unit>
        <trans-unit id="9d00fbb739bf112dec2029fddeb77b8657217f24" translate="yes" xml:space="preserve">
          <source>We said that &lt;code&gt;A.prototype&lt;/code&gt; is nothing more than an empty object (unless we change it to something else before defining &lt;code&gt;a1&lt;/code&gt;). So now basically &lt;code&gt;a1.__proto__&lt;/code&gt; points to the same thing &lt;code&gt;A.prototype&lt;/code&gt; points to, which is that empty object. They both point to the same object which was created when this line happened:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Dijimos que &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A.prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; no es m&amp;aacute;s que un objeto vac&amp;iacute;o (a menos que lo cambiemos por otra cosa antes de definir &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Entonces, ahora b&amp;aacute;sicamente &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a1.__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; apunta a lo mismo que &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A.prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; se&amp;ntilde;ala, que es ese objeto vac&amp;iacute;o. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ambos apuntan al mismo objeto que se cre&amp;oacute; cuando sucedi&amp;oacute; esta l&amp;iacute;nea:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="eb13a5422040b1640e4e7a0c5454ebb645c4d9c1" translate="yes" xml:space="preserve">
          <source>We said that on each function definition there's a new property created called &lt;code&gt;prototype&lt;/code&gt; (which you can access it, unlike with the &lt;code&gt;__proto__&lt;/code&gt; property) created? Well, that property is being used now.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Dijimos que en cada definici&amp;oacute;n de funci&amp;oacute;n hay una nueva propiedad creada llamada &lt;/font&gt;&lt;/font&gt; &lt;code&gt;prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (a la que puede acceder, a diferencia de la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;propiedad &lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ) creada. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Bueno, esa propiedad se est&amp;aacute; utilizando ahora.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c6dc267ab3b9d3d635dbd0662b24434319206abe" translate="yes" xml:space="preserve">
          <source>What's the difference between</source>
          <target state="translated">¿Cuál es la diferencia entre</target>
        </trans-unit>
        <trans-unit id="47d12f46bd7d79018cce2ea06e4664512459a236" translate="yes" xml:space="preserve">
          <source>What's the difference? =&amp;gt; A lot.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iquest;Cual es la diferencia? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;=&amp;gt; Mucho.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d2f85f01731ca1bab5a86d8e3aba08a7efa46e93" translate="yes" xml:space="preserve">
          <source>When you create a new function in JavaScript (which is an object as well, remember?), the moment it is defined, JavaScript automatically creates a new property on that function called &lt;code&gt;prototype&lt;/code&gt;. Try it:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cuando crea una nueva funci&amp;oacute;n en JavaScript (que tambi&amp;eacute;n es un objeto, &amp;iquest;recuerda?), En el momento en que se define, JavaScript crea autom&amp;aacute;ticamente una nueva propiedad en esa funci&amp;oacute;n llamada &lt;/font&gt;&lt;/font&gt; &lt;code&gt;prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Intentalo:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b6473c77919835536c99c5a79f1980fb08ea7f56" translate="yes" xml:space="preserve">
          <source>With this approach we eliminate the part from step 3 where functions are duplicated on each new object creation. Instead of &lt;code&gt;a1&lt;/code&gt; and &lt;code&gt;a2&lt;/code&gt; having a separate &lt;code&gt;hey&lt;/code&gt; property, now NONE of them has it. Which, I guess, you figured out yourself by now. That's the nice thing...if you understand &lt;code&gt;__proto__&lt;/code&gt; and &lt;code&gt;Function.prototype&lt;/code&gt;, questions like these will be pretty obvious.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Con este enfoque, eliminamos la parte del paso 3 donde las funciones se duplican en la creaci&amp;oacute;n de cada nuevo objeto. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En lugar de que &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tengan una &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;propiedad &lt;/font&gt;&lt;/font&gt; &lt;code&gt;hey&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; separada &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;, ahora NINGUNO de ellos la tiene. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Lo cual, supongo, ya te has dado cuenta. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Eso es lo bueno ... si entiendes &lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Function.prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , preguntas como estas ser&amp;aacute;n bastante obvias.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ed7ea4136777240f51ec615c9b731cd154f02835" translate="yes" xml:space="preserve">
          <source>You may also wonder, why does JavaScript creates a property called &lt;code&gt;prototype&lt;/code&gt; for a function when you define the function? Because it tries to fool you, yes &lt;strong&gt;fool you&lt;/strong&gt; that it works like class-based languages.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tambi&amp;eacute;n puede preguntarse, &amp;iquest;por qu&amp;eacute; JavaScript crea una propiedad llamada &lt;/font&gt;&lt;/font&gt; &lt;code&gt;prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para una funci&amp;oacute;n cuando define la funci&amp;oacute;n? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Porque trata de enga&amp;ntilde;arte, s&amp;iacute;, te &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;enga&amp;ntilde;a&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que funciona como lenguajes basados ​​en clases.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cdcbed7468dabda887ee2ad3bed61463436ef43a" translate="yes" xml:space="preserve">
          <source>You may wonder: Why does JavaScript has &lt;code&gt;__proto__&lt;/code&gt; property created on every single object? Well, one word: &lt;strong&gt;delegation&lt;/strong&gt;. When you call a property on an object and the object doesn't have it, then JavaScript looks for the object referenced by &lt;code&gt;__proto__&lt;/code&gt; to see if it maybe has it. If it doesn't have it, then it looks at that object's &lt;code&gt;__proto__&lt;/code&gt; property and so on...until the chain ends. Thus the name &lt;strong&gt;prototype chain&lt;/strong&gt;. Of course, if &lt;code&gt;__proto__&lt;/code&gt; doesn't point to an object and instead points to &lt;code&gt;null&lt;/code&gt;, well tough luck, JavaScript realizes that and will return you &lt;code&gt;undefined&lt;/code&gt; for the property.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Quiz&amp;aacute;s se pregunte: &amp;iquest;Por qu&amp;eacute; JavaScript tiene la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;propiedad &lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; creada en cada objeto? Bueno, una palabra: &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;delegaci&amp;oacute;n&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . Cuando llama a una propiedad en un objeto y el objeto no la tiene, entonces JavaScript busca el objeto al que hace referencia &lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para ver si tal vez lo tiene. Si no lo tiene, entonces mira la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;propiedad &lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; de&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ese objeto &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;y as&amp;iacute; sucesivamente ... hasta que la cadena termina. De ah&amp;iacute; el nombre de &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;cadena prototipo&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . Por supuesto, si &lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; no apunta a un objeto y, en cambio, apunta a &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;una suerte &lt;/font&gt;&lt;/font&gt; &lt;code&gt;null&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y dura, JavaScript se da cuenta de eso y lo devolver&amp;aacute; &lt;/font&gt;&lt;/font&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para la propiedad.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="228a84adb74c5fcc8902823a8da25305d1e558d9" translate="yes" xml:space="preserve">
          <source>You showed two patterns in your question. I will try to explain two more and try to explain the differences if relevant. Feel free to edit/extend.
In all examples it is about a car object that has a location and can move.</source>
          <target state="translated">Mostraste dos patrones en tu pregunta.Intentaré explicar dos más e intentaré explicar las diferencias si es relevante.Siéntase libre de editar la extensión.En todos los ejemplos se trata de un objeto de coche que tiene una ubicación y puede moverse.</target>
        </trans-unit>
        <trans-unit id="abed52bbf756ca559bba9e9c61017226edbec61c" translate="yes" xml:space="preserve">
          <source>a) A function is an object in JavaScript. EVERY object in JavaScript gets an internal property (meaning, you can't access it like other properties, except maybe in browsers like Chrome), often referred to as &lt;code&gt;__proto__&lt;/code&gt; (you can actually type &lt;code&gt;anyObject.__proto__&lt;/code&gt; in Chrome to see what it references. This is just that, a property, nothing more. A property in JavaScript = a variable inside an object, nothing more. What do variables do? They point to things.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;a) Una funci&amp;oacute;n es un objeto en JavaScript. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;CADA objeto en JavaScript obtiene una propiedad interna (es decir, no puede acceder a ella como otras propiedades, excepto tal vez en navegadores como Chrome), a menudo denominado &lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (en realidad puede escribir &lt;/font&gt;&lt;/font&gt; &lt;code&gt;anyObject.__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en Chrome para ver a qu&amp;eacute; se refiere. Esto es solo eso, una propiedad, nada m&amp;aacute;s. Una propiedad en JavaScript = una variable dentro de un objeto, nada m&amp;aacute;s. &amp;iquest;Qu&amp;eacute; hacen las variables? Se&amp;ntilde;alan cosas.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">and</target>
        </trans-unit>
        <trans-unit id="f7023942206621acc838b9f351c2bfc78689b792" translate="yes" xml:space="preserve">
          <source>something very different occurs.  In the first line, variable &lt;code&gt;A&lt;/code&gt; is assigned a reference to a function.  In JavaScript, all functions objects have a &lt;em&gt;prototype&lt;/em&gt; property by default so there is no separate code to create an &lt;em&gt;A.prototype&lt;/em&gt; object.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ocurre algo muy diferente. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En la primera l&amp;iacute;nea, a la variable &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; se le asigna una referencia a una funci&amp;oacute;n. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En JavaScript, todos los objetos de funciones tienen una &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;propiedad &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;prototipo&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; por defecto, por lo que no hay un c&amp;oacute;digo separado para crear un &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;objeto &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;A.prototype&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d1add0059bf8e9b747aba843af8d9a92c234489d" translate="yes" xml:space="preserve">
          <source>versus:</source>
          <target state="translated">versus:</target>
        </trans-unit>
        <trans-unit id="b4993da023bb6cf4528cc249a4a1168cbc4c7731" translate="yes" xml:space="preserve">
          <source>vs.</source>
          <target state="translated">vs.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
