<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/310870">
    <body>
      <group id="310870">
        <trans-unit id="1a6f157f19caa72c8ba37c93c91f741050915946" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;A.prototype&lt;/code&gt; is TOTALLY DIFFERENT from the &lt;code&gt;__proto__&lt;/code&gt; property. In our example, 'A' now has TWO properties called 'prototype' and &lt;code&gt;__proto__&lt;/code&gt; . This is a big confusion for people. &lt;code&gt;prototype&lt;/code&gt; and &lt;code&gt;__proto__&lt;/code&gt; properties are in no way related, they're separate things pointing to separate values.</source>
          <target state="translated">&lt;code&gt;A.prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は__proto__ &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プロパティと&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。この例では、「A」に「prototype」と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;という2つのプロパティがあります&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。これは人々にとって大きな混乱です。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プロパティはまったく関係ありません。これらは、別々の値を指す別々のものです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="aa496268d52a7b13b5dc519098a8aadd5a8f698f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a1.__proto__&lt;/code&gt; property is assigned to point at the same thing as &lt;code&gt;A.prototype&lt;/code&gt; points to (another empty object {} )</source>
          <target state="translated">&lt;code&gt;a1.__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プロパティは、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A.prototype&lt;/code&gt; が&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;指す&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ものと同じものを指すように割り当てられ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます（別の空のオブジェクト{}）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="94cb063e7ce9fdcbe8793aaf001187e4752b19ba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;amy.constructor&lt;/code&gt;'s lookup fails and thus is delegated to &lt;code&gt;Car.prototype&lt;/code&gt;, which does have the constructor property. And so &lt;code&gt;amy.constructor&lt;/code&gt; is &lt;code&gt;Car&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;amy.constructor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の検索は失敗するため&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、コンストラクタプロパティを持つ&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Car.prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;委任さ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;れます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そして&lt;/font&gt;&lt;/font&gt; &lt;code&gt;amy.constructor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Car&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f61c95ca5cb48c5bbfd7f2a435edff389b40e3bc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3127429/javascript-this-keyword&quot;&gt;How does the &quot;this&quot; keyword work?&lt;/a&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3127429/javascript-this-keyword&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;「this」キーワードはどのように機能しますか？&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e41f61d04c99037105b9ee78d76751a5668f66b5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;EDIT&lt;/strong&gt; Didn't mean to imply that the scope of the variable was private, I was just trying to illustrate how I define my classes in javascript.  Variable name has been changed to reflect this.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;編集&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;変数のスコープがプライベートであることを意味するのではなく、JavaScriptでクラスを定義する方法を説明しようとしていました。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これを反映して変数名が変更されました。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="585116bdd8ba3dd4a4edf774cb8e07bd06db012c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Related questions&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;関連する質問&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0619f7ed60e8eeb1a1f718f0cf87792b5daa4614" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Sidenote:&lt;/strong&gt; There may not be any significant memory savings between the two approaches, however using the prototype to share methods and properties will likely use less memory than each instance having its own copy.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;補足：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 2つの方法の間に大幅なメモリの節約はないかもしれませんが、プロトタイプを使用してメソッドとプロパティを共有すると、独自のコピーを持つ各インスタンスよりも少ないメモリを使用する可能性があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e6f31dd204bcdda17b1324677e21673dda9549e9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;What does it mean that JavaScript is a prototypal language?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;JavaScriptがプロトタイプ言語であることはどういう意味ですか？&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="27fc74636f13d6850973b4244d9df16a5d144b64" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;What is the scope of a function in JavaScript?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;JavaScriptの関数のスコープは何ですか？&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2bfc3701f71054631db27ff1201c8c11f85cf3cc" translate="yes" xml:space="preserve">
          <source>A constructor's &lt;em&gt;prototype&lt;/em&gt; provides a way to share methods and values among instances via the instance's private &lt;code&gt;[[Prototype]]&lt;/code&gt; property.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コンストラクタの&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プロトタイプ&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、インスタンスのプライベート&lt;/font&gt;&lt;/font&gt; &lt;code&gt;[[Prototype]]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プロパティを&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;介してインスタンス間でメソッドと値を共有する方法を提供し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d2ee4379b4acdd82edaa8bdb55ca80e7c1f8097d" translate="yes" xml:space="preserve">
          <source>A function in JavaScript is a specialised object. In addition to being invoked, a function can store properties like any other object.</source>
          <target state="translated">JavaScriptにおける関数は、特殊なオブジェクトです。関数は呼び出されるだけでなく、他のオブジェクトと同様にプロパティを保存することができます。</target>
        </trans-unit>
        <trans-unit id="396460920abf6c3bb0621afc58e2bc44893b98bd" translate="yes" xml:space="preserve">
          <source>A function's &lt;em&gt;this&lt;/em&gt; is set by how the function is called or by the use of &lt;em&gt;bind&lt;/em&gt; (not discussed here). Where a function is called on an object (e.g. &lt;code&gt;myObj.method()&lt;/code&gt;) then &lt;em&gt;this&lt;/em&gt; within the method references the object. Where &lt;em&gt;this&lt;/em&gt; is not set by the call or by the use of &lt;em&gt;bind&lt;/em&gt;, it defaults to the global object (window in a browser) or in strict mode, remains undefined.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;関数の&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;this&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、関数の呼び出し方法または&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;バインド&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の使用&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（ここでは説明しません）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;によって設定されます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;オブジェクトで関数が呼び出される場合（例：&lt;/font&gt;&lt;/font&gt; &lt;code&gt;myObj.method()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、メソッド内の&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これ&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はオブジェクトを参照します。&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これ&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が呼び出しまたは&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;bind&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の使用によって設定されていない&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;場合&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、デフォルトではグローバルオブジェクト（ブラウザのウィンドウ）または厳密モードでは未定義のままになります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="45966dac101bec7852f1deda8e51fef286fb4aae" translate="yes" xml:space="preserve">
          <source>A reason to use the first form is to access &quot;private members&quot;. For example:</source>
          <target state="translated">最初のフォームを使う理由は、「プライベートメンバー」にアクセスするためです。例えば</target>
        </trans-unit>
        <trans-unit id="499a9f218e00438d3a0cf14f0cf7260e52cc4b90" translate="yes" xml:space="preserve">
          <source>A totally new empty object is created and assigned to &lt;code&gt;a1&lt;/code&gt;. &lt;code&gt;a1 = {}&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;まったく新しい空のオブジェクトが作成され、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a1&lt;/code&gt; に&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;割り当てられ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a1 = {}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="581fdb8f0bcea7bf634c3f54dd065571aef05131" translate="yes" xml:space="preserve">
          <source>All that stuff inside &lt;code&gt;function() { }&lt;/code&gt; is going to execute. When you reach the &lt;code&gt;this.hey..&lt;/code&gt; line, &lt;code&gt;this&lt;/code&gt; is changed to &lt;code&gt;a1&lt;/code&gt; and you get this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;function() { }&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;内のすべてのもの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が実行されます。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;this.hey..&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;行に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;到達すると&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;this&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a1&lt;/code&gt; に&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;変更され&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、次のようになります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f5ed6446475acfae79b53b98de3a4c05e013b251" translate="yes" xml:space="preserve">
          <source>And another section where you put the definitions that distinguish the objects from each other (&lt;code&gt;loc&lt;/code&gt; variable in the examples).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そして、オブジェクトを互いに区別する定義を置く別のセクション（&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;例では&lt;/font&gt;&lt;/font&gt; &lt;code&gt;loc&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;変数）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9f623214ec66460787835246331d7a8431d0d95d" translate="yes" xml:space="preserve">
          <source>Another example is below.  It's similar to the first one (and maybe what you meant to ask about):</source>
          <target state="translated">もう一つの例は以下の通りです。最初のものと似ています(そして、おそらくあなたが聞きたかったことも)。</target>
        </trans-unit>
        <trans-unit id="0213ecf516b2d4882d739982f9db700f291e6d62" translate="yes" xml:space="preserve">
          <source>Another way of achieving a similar result is to use an immediately invoked function expression:</source>
          <target state="translated">同様の結果を得るもう一つの方法は、すぐに呼び出された関数式を使用することです。</target>
        </trans-unit>
        <trans-unit id="981aec6b82d4aef2ab9869eeaaddcde70f35e9f6" translate="yes" xml:space="preserve">
          <source>As discussed in other answers, it's really a performance consideration because the function in the prototype is shared with all of the instantiations - rather than the function being created for each instantiation.</source>
          <target state="translated">他の回答で説明したように、プロトタイプの関数はすべてのインスタンスで共有されているので、パフォーマンスを考慮する必要があります-各インスタンスのために関数が作成されるのではありません。</target>
        </trans-unit>
        <trans-unit id="ebabf85ca06b23cb95f024f10b759ca642217e40" translate="yes" xml:space="preserve">
          <source>As others have mentioned, there are various reasons to choose one method or the other.  My sample is just meant to clearly demonstrate the difference.</source>
          <target state="translated">他の方もおっしゃっているように、どちらかの方法を選ぶ理由は様々です。私のサンプルは、その違いを明確に示すためのものに過ぎません。</target>
        </trans-unit>
        <trans-unit id="9ca2d8b0f061f98b7e60e7a9c1fa9639212c0666" translate="yes" xml:space="preserve">
          <source>As others have said the first version, using &quot;this&quot; results in every instance of the class A having its own independent copy of function method &quot;x&quot;.  Whereas using &quot;prototype&quot; will mean that each instance of class A will use the same copy of method &quot;x&quot;.</source>
          <target state="translated">他の人が言っているように、最初のバージョンでは、&quot;this &quot;を使うと、クラスAのすべてのインスタンスが関数メソッド &quot;x &quot;の独立したコピーを持つことになります。一方、&quot;prototype&quot; を使うと、クラス A の各インスタンスはメソッド &quot;x&quot; の同じコピーを使うことになります。</target>
        </trans-unit>
        <trans-unit id="562429007d4478f062f7b1115e1ecc040b939321" translate="yes" xml:space="preserve">
          <source>Because of javascript's scoping rules, private_var is available to the function assigned to this.x, but not outside the object.</source>
          <target state="translated">javascriptのスコープルールのため、private_varはthis.xに割り当てられた関数では利用できますが、オブジェクトの外部では利用できません。</target>
        </trans-unit>
        <trans-unit id="514ae34b3f92bfa48cc0a06bcba267d346bbe101" translate="yes" xml:space="preserve">
          <source>Before looking at the differences, the following should be noted:</source>
          <target state="translated">違いを見る前に、以下の点に注意が必要です。</target>
        </trans-unit>
        <trans-unit id="ae90c980e638dd03a0023fb896a1307a3f40e7ba" translate="yes" xml:space="preserve">
          <source>Concerning the last three lines:</source>
          <target state="translated">最後の3行について</target>
        </trans-unit>
        <trans-unit id="2b8a7b9e2cf97fc63ca3ff461c377262490a1646" translate="yes" xml:space="preserve">
          <source>Cool! Now, when you create &lt;code&gt;a1&lt;/code&gt;, it again goes through all of the 3 steps above, and in step 3, it doesn't do anything, since &lt;code&gt;function A()&lt;/code&gt; has nothing to execute. And if we do:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;涼しい！&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これで、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を作成すると&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、再び上記の3つのステップすべてが実行され、ステップ3では&lt;/font&gt;&lt;/font&gt; &lt;code&gt;function A()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は何も実行されないため、何も実行されません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そして、私たちが行う場合：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a6dd015187d0ada3686c3bc302de7d0b64e2af15" translate="yes" xml:space="preserve">
          <source>Different adults have different ages, but all of the adults get the same rights.</source>
          <target state="translated">大人の年齢は違えど、大人はみんな同じ権利を得ています。</target>
        </trans-unit>
        <trans-unit id="7a45229532c15d2fa73aad667937ce56403a1a42" translate="yes" xml:space="preserve">
          <source>Every object is linked to a prototype object. When trying to access a property that does not exist, JavaScript will look in the object's prototype object for that property and return it if it exists.</source>
          <target state="translated">すべてのオブジェクトはプロトタイプオブジェクトにリンクされています。存在しないプロパティにアクセスしようとすると、JavaScriptはオブジェクトのプロトタイプオブジェクトでそのプロパティを探し、存在する場合はそれを返します。</target>
        </trans-unit>
        <trans-unit id="1f67de5a9c375290139f103847bab77b1f3187b5" translate="yes" xml:space="preserve">
          <source>Feel free to add or edit. Once more complete I could make this a community wiki maybe.</source>
          <target state="translated">自由に追加・編集してください。もっと完成したら、これをコミュニティwikiにすることができるかもしれません。</target>
        </trans-unit>
        <trans-unit id="30c1034505f0dae85e722fbe58cd4a0976ebb7b2" translate="yes" xml:space="preserve">
          <source>Finally, it should not be too difficult to realize how object oriented programming can be done. There are two sections.</source>
          <target state="translated">最後に、オブジェクト指向プログラミングがどのようにして実現できるかについては、あまり難しいことではないはずです。2つのセクションに分かれています。</target>
        </trans-unit>
        <trans-unit id="616fd4e7af8e063af8b704651be5d8e96ff90c42" translate="yes" xml:space="preserve">
          <source>Functional Classes</source>
          <target state="translated">機能クラス</target>
        </trans-unit>
        <trans-unit id="1378319ea2e44565319a2798a7f9ab0ed1f666ee" translate="yes" xml:space="preserve">
          <source>Furthermore, &lt;code&gt;amy&lt;/code&gt; is an &lt;code&gt;instanceof&lt;/code&gt;&lt;code&gt;Car&lt;/code&gt;. The &lt;code&gt;instanceof&lt;/code&gt; operator works by seeing if the right operand's prototype object (&lt;code&gt;Car&lt;/code&gt;) can be found anywhere in the left operand's prototype (&lt;code&gt;amy&lt;/code&gt;) chain.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;さらに、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;amy&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt; &lt;code&gt;Car&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;の&lt;/font&gt;&lt;/font&gt; &lt;code&gt;instanceof&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt; &lt;code&gt;instanceof&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;演算子は、右オペランドのプロトタイプオブジェクト（あれば見て、作品&lt;/font&gt; &lt;code&gt;Car&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;）左のオペランドのプロトタイプ（のどこにでも見つけることができ&lt;/font&gt; &lt;code&gt;amy&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;）チェーン。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a7c6fc25c03c684ec456561dda6f16904d9fb9b2" translate="yes" xml:space="preserve">
          <source>Here is some code to show this subtle difference:</source>
          <target state="translated">この微妙な違いを示すコードをいくつか紹介します。</target>
        </trans-unit>
        <trans-unit id="a512ea9bd1a2595e6564a628ec13cd5d0173a27f" translate="yes" xml:space="preserve">
          <source>Here we're creating 2,000,000 new objects with a &lt;code&gt;print&lt;/code&gt; method in Chrome. We're storing every object in an array. Putting &lt;code&gt;print&lt;/code&gt; on the prototype takes about 1/2 as long.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここでは&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、Chromeの&lt;/font&gt;&lt;/font&gt; &lt;code&gt;print&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;メソッドを使用し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;て2,000,000個の新しいオブジェクトを作成しています&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;すべてのオブジェクトを配列に格納しています。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;置く&lt;/font&gt;&lt;/font&gt; &lt;code&gt;print&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;原型にして長いと1/2程度かかります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="21a690c2811cf3a8e2fcb03ca0c412aeb6c8978e" translate="yes" xml:space="preserve">
          <source>Here's where most people get confused:</source>
          <target state="translated">ほとんどの人が混乱しているのはここです。</target>
        </trans-unit>
        <trans-unit id="a6a0ce9031e0776d5fc6120b3023d51bccf114f1" translate="yes" xml:space="preserve">
          <source>Hope this helps.</source>
          <target state="translated">これが助けになることを願っています。</target>
        </trans-unit>
        <trans-unit id="f9bebf368c86101e6a1de11b79f2745a5a9cce68" translate="yes" xml:space="preserve">
          <source>However there is one point interesting to know:
Every &lt;code&gt;prototype&lt;/code&gt; object has has a convenience property &lt;code&gt;constructor&lt;/code&gt;, which points back to the function (think object) it came attached to.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ただし、興味深い点が1つあり&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。すべての&lt;/font&gt;&lt;/font&gt; &lt;code&gt;prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;オブジェクトには、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アタッチされた関数（オブジェクトと考える）を指す&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;便利なプロパティ&lt;/font&gt;&lt;/font&gt; &lt;code&gt;constructor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a50c839129a8568a2bdb8b1eb71615c8ca03bab5" translate="yes" xml:space="preserve">
          <source>However, the primary difference is that there are optimizations implemented in JavaScript engines that only apply when using the pseudoclassical pattern. Think of the pseudoclassical pattern a probably faster version of the prototypal pattern; the object relations in both examples are the same.</source>
          <target state="translated">しかし、主な違いはJavaScriptエンジンに実装されている最適化があり、それは疑似古典的なパターンを使用したときにのみ適用されます。疑似古典パターンは、おそらくプロトタイプパターンのより高速なバージョンだと考えてください;両方の例のオブジェクト関係は同じです。</target>
        </trans-unit>
        <trans-unit id="8d4860ab556155819ce1e0d3bbe7982e93f66780" translate="yes" xml:space="preserve">
          <source>I believe that @Matthew Crumley is right.  They are &lt;em&gt;functionally&lt;/em&gt;, if not structurally, equivalent.  If you use Firebug to look at the objects that are created using &lt;code&gt;new&lt;/code&gt;, you can see that they are the same.  However, my preference would be the following.  I'm guessing that it just seems more like what I'm used to in C#/Java.  That is, define the class, define the fields, constructor, and methods.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Matthew Crumleyは正しいと思います。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それらは&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、構造的ではないにして&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;も、&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;機能&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的には同等です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Firebugを使用して、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;new&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用して作成されたオブジェクトを&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;見ると、それらが同じであることがわかります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ただし、私の好みは次のようになります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C＃/ Javaで慣れているように見えるだけだと思います。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;つまり、クラスを定義し、フィールド、コンストラクター、およびメソッドを定義します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="15622b8173641c92e63c1ee36c4e0b230517bf70" translate="yes" xml:space="preserve">
          <source>I know this has been answered to death but I'd like to show an actual example of speed differences.</source>
          <target state="translated">これは死ぬほど回答されていると思いますが、速度差の実例を示してみたいと思います。</target>
        </trans-unit>
        <trans-unit id="56482a797b855ebf28ae5afc4251b5db57e29525" translate="yes" xml:space="preserve">
          <source>I put together a jsperf to show this. There is a dramatic difference in the time it takes to instantiate the class, although it is really only relevant if you are making many instances.</source>
          <target state="translated">これを示すために jsperf をまとめてみました。クラスのインスタンス化にかかる時間に劇的な違いがありますが、これは本当に多くのインスタンスを作る場合にのみ関係します。</target>
        </trans-unit>
        <trans-unit id="f431a5529a17c6802ccb464328c61e22ee961e03" translate="yes" xml:space="preserve">
          <source>I think, the &lt;code&gt;this&lt;/code&gt; version is used to enable encapsulation, i.e. data hiding.
It helps to manipulate private variables.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;this&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;バージョンは、カプセル化、つまりデータの非表示を有効にするために使用されている&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と思います&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プライベート変数の操作に役立ちます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d870f91c01fd9fe42353544305311db08719426e" translate="yes" xml:space="preserve">
          <source>I won't cover why &lt;code&gt;this&lt;/code&gt; changes to &lt;code&gt;a1&lt;/code&gt; but &lt;a href=&quot;https://stackoverflow.com/a/80478/1085998&quot;&gt;this is a great answer&lt;/a&gt; to learn more.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;this&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a1&lt;/code&gt; に&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;変更される&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;理由については説明しません&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/80478/1085998&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;詳細を知るための&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;素晴らしい回答&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="89078c5b79458591085ee64d7f970de4d93797ee" translate="yes" xml:space="preserve">
          <source>If you think this is not a problem, then it depends on whether you can live without private variables, and whether you are experienced enough to know a leak when you see one. Also, having to put the constructor logic after the method definitions is inconvenient.</source>
          <target state="translated">これが問題ではないと思うのであれば、プライベート変数なしで生活できるかどうかと、リークを見たときにリークがあることがわかるほどの経験があるかどうかにかかっています。また、メソッド定義の後にコンストラクタのロジックを置かなければならないのは不便です。</target>
        </trans-unit>
        <trans-unit id="5217801ffee692a0d0416de94ce40dcc69d5d848" translate="yes" xml:space="preserve">
          <source>In conclusion, in the first example &lt;strong&gt;a copy of the function is assigned to each instance&lt;/strong&gt;. In the second example &lt;strong&gt;a single copy of the function is shared by all instances&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;結論として、最初の例&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;では、関数のコピーが各インスタンスに割り当てられます&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2番目の例&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;では、関数の単一のコピーがすべてのインスタンスで共有されます&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="64a03b3c9405b8097a143dbb32c646d5cd09f22e" translate="yes" xml:space="preserve">
          <source>In general there is no right or wrong, it's more a matter of taste or a design decision depending on your requirements. The prototype however is the technique that is used to develop in an object oriented manner, as I hope you'll see at the end of this answer.</source>
          <target state="translated">一般的に正しいとか間違っているということはありません。しかし、プロトタイプはオブジェクト指向で開発するために使われるテクニックです。</target>
        </trans-unit>
        <trans-unit id="666df82d0c8fe3053b47e6a0219f55650ccc2aff" translate="yes" xml:space="preserve">
          <source>In most cases they are essentially the same, but the second version saves memory because there is only one instance of the function instead of a separate function for each object.</source>
          <target state="translated">ほとんどの場合、これらは本質的には同じですが、2 番目のバージョンでは、オブジェクトごとに別々の関数を使用するのではなく、関数のインスタンスが 1 つしかないため、メモリを節約できます。</target>
        </trans-unit>
        <trans-unit id="91aee306e0db067a91d992a548f5fa66a86b83c9" translate="yes" xml:space="preserve">
          <source>In the case of:</source>
          <target state="translated">の場合。</target>
        </trans-unit>
        <trans-unit id="3a06ec36da521fee44241221c9d5800a01c8444c" translate="yes" xml:space="preserve">
          <source>In the second example you are adding a property to the prototype object that all the instances created with &lt;code&gt;A&lt;/code&gt; point to.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2番目の例では、すべてのインスタンスが&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; で&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;作成したプロトタイプオブジェクトにプロパティを追加しています&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="68d939a819d95a1b232c797326d7169b5ded8eeb" translate="yes" xml:space="preserve">
          <source>In the second line, &lt;em&gt;A.prototype.x&lt;/em&gt; is assigned a reference to a function. This will create an &lt;em&gt;x&lt;/em&gt; property if it doesn't exist, or assign a new value if it does. So the difference with the first example in which object's &lt;em&gt;x&lt;/em&gt; property is involved in the expression.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2行目で&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;A.prototype.xに&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;関数への参照が割り当てられています。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これにより、&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;x&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プロパティが存在しない場合&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は作成され、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;存在する場合は新しい値が割り当てられます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;つまり、オブジェクトの&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;x&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プロパティが式に含まれる&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最初の例との違い&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8f1f444d3fad61ca80f657809854392a20d97c79" translate="yes" xml:space="preserve">
          <source>In this case &lt;code&gt;Car&lt;/code&gt; is a &lt;strong&gt;function&lt;/strong&gt; (&lt;strong&gt;also&lt;/strong&gt; think &lt;strong&gt;object&lt;/strong&gt;) that can be invoked as you are used to do. It has a property &lt;code&gt;methods&lt;/code&gt; (which is an object with a &lt;code&gt;move&lt;/code&gt; function). When &lt;code&gt;Car&lt;/code&gt; is invoked the &lt;code&gt;extend&lt;/code&gt; function is called, which does some magic, and extends the &lt;code&gt;Car&lt;/code&gt; function (think object) with the methods defined within &lt;code&gt;methods&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この場合、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Car&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;慣れているとおりに呼び出すことができる&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;関数&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;オブジェクト&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;も&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;考える&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プロパティ&lt;/font&gt; &lt;code&gt;methods&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;（&lt;/font&gt; &lt;code&gt;move&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;機能を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;持つオブジェクト&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）があります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ときに&lt;/font&gt; &lt;code&gt;Car&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;呼び出された&lt;/font&gt; &lt;code&gt;extend&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;機能は、いくつかの魔法をしている、と呼ばれ、拡張された&lt;/font&gt; &lt;code&gt;Car&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;中に定義されたメソッドで（オブジェクトを考える）機能を&lt;/font&gt; &lt;code&gt;methods&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="412ce250c444246830eebe423a5e0e2d9149c14c" translate="yes" xml:space="preserve">
          <source>In this case, &lt;code&gt;A&lt;/code&gt; assigned the return value of calling the function on the right-hand side. Here again, since &lt;em&gt;this&lt;/em&gt; is not set in the call, it will reference the global object and &lt;code&gt;this.x&lt;/code&gt; is effective &lt;code&gt;window.x&lt;/code&gt;. Since the function doesn't return anything, &lt;code&gt;A&lt;/code&gt; will have a value of &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この場合、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は右側の関数呼び出しの戻り値を割り当てました。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここでも、&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これ&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は呼び出しで設定されていない&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ため&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、グローバルオブジェクトを参照し、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;this.x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は有効な&lt;/font&gt;&lt;/font&gt; &lt;code&gt;window.x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;関数は何も返さないため、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の値は&lt;/font&gt;&lt;/font&gt; &lt;code&gt;undefined&lt;/code&gt; になり&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9dcc855b3c241eea76935dfb826e530678f84354" translate="yes" xml:space="preserve">
          <source>In this case, variable &lt;code&gt;A&lt;/code&gt; is assigned a value that is a reference to a function.  When that function is called using &lt;code&gt;A()&lt;/code&gt;, the function's &lt;em&gt;this&lt;/em&gt; isn't set by the call so it defaults to the global object and the expression &lt;code&gt;this.x&lt;/code&gt; is effective &lt;code&gt;window.x&lt;/code&gt;. The result is that a reference to the function expression on the right-hand side is assigned to &lt;code&gt;window.x&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この場合、変数&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; に&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、関数への参照である値が割り当てられます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;その関数が&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用して呼び出されると&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、関数の&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;this&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は呼び出しによって設定されないため、デフォルトでグローバルオブジェクトになり、式&lt;/font&gt;&lt;/font&gt; &lt;code&gt;this.x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は有効な&lt;/font&gt;&lt;/font&gt; &lt;code&gt;window.x&lt;/code&gt; になり&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;その結果、右側の関数式への参照が&lt;/font&gt;&lt;/font&gt; &lt;code&gt;window.x&lt;/code&gt; に&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;割り当てられ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c9c1162f8649ee6c800e3c7ee24847b2ec12ab6c" translate="yes" xml:space="preserve">
          <source>In this example &lt;code&gt;Car&lt;/code&gt; links to the &lt;code&gt;prototype&lt;/code&gt; object, which links via &lt;code&gt;constructor&lt;/code&gt; to &lt;code&gt;Car&lt;/code&gt; itself, i.e. &lt;code&gt;Car.prototype.constructor&lt;/code&gt; is &lt;code&gt;Car&lt;/code&gt; itself. This allows you to figure out which constructor function built a certain object.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この例では、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Car&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;/font&gt; &lt;code&gt;prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;オブジェクトにリンクしています。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プロトタイプ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;オブジェクトは、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;constructor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;介し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;て&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Car&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;自体に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;リンクしています&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;つまり、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Car.prototype.constructor&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Car&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;自体です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これにより、特定のオブジェクトを構築したコンストラクター関数を特定できます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bdba5bd5e74f1b3ee8430302ca046662463d4fe0" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;new&lt;/code&gt; operator has been added before the function expression so that the function is called as a constructor. When called with &lt;code&gt;new&lt;/code&gt;, the function's &lt;em&gt;this&lt;/em&gt; is set to reference a new Object whose private &lt;code&gt;[[Prototype]]&lt;/code&gt; property is set to reference the constructor's public &lt;em&gt;prototype&lt;/em&gt;. So in the assignment statement, the &lt;code&gt;x&lt;/code&gt; property will be created on this new object. When called as a constructor, a function returns its &lt;em&gt;this&lt;/em&gt; object by default, so there is no need for a separate &lt;code&gt;return this;&lt;/code&gt; statement.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この例では&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、関数がコンストラクターとして呼び出されるように、関数式の前に&lt;/font&gt;&lt;/font&gt; &lt;code&gt;new&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;演算子が追加されています。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;new&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;で&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;呼び出されると&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、関数の&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;this&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、プライベート&lt;/font&gt;&lt;/font&gt; &lt;code&gt;[[Prototype]]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プロパティがコンストラクターのパブリック&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プロトタイプ&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を参照するように設定された新しいオブジェクト&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を参照するように設定されます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、代入ステートメントでは、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プロパティがこの新しいオブジェクトに作成されます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コンストラクターとして呼び出されると、関数は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;デフォルトで&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;this&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;オブジェクトを&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;返す&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ため、個別に&lt;/font&gt;&lt;/font&gt; &lt;code&gt;return this;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用する必要はありません&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ステートメント。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="89bfdc078a207ee283d2d0a52398f24343989b97" translate="yes" xml:space="preserve">
          <source>In your first example, you are adding a property &lt;code&gt;x&lt;/code&gt; to each instance created with the &lt;code&gt;A&lt;/code&gt; function.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最初の例では&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;関数で&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;作成された各インスタンスに&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プロパティ&lt;/font&gt;&lt;/font&gt; &lt;code&gt;x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;追加しています&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bb4c3a5d3272e73f58dce20dcda9040a1a637e9e" translate="yes" xml:space="preserve">
          <source>It does the same as in the prototypal pattern really, it is just syntactic sugar overtop of the prototypal pattern.</source>
          <target state="translated">プロトタイプパターンと同じで、プロトタイプパターンの上に構文的に糖質を重ねているだけです。</target>
        </trans-unit>
        <trans-unit id="723750099350c4865d1a35080b4c625513b94ce7" translate="yes" xml:space="preserve">
          <source>It will see that &lt;code&gt;a1&lt;/code&gt; does not contain &lt;code&gt;hey&lt;/code&gt; and it will check its &lt;code&gt;__proto__&lt;/code&gt; property object to see if it has it, which is the case.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;a1&lt;/code&gt; に&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;hey&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が含まれていない&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ことがわかり、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;その&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プロパティオブジェクトを&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;チェックして、それがあるかどうかを確認し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます（これが当てはまる場合）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ed913fb6557c9ddd4efa7738e62a2126ab7b507a" translate="yes" xml:space="preserve">
          <source>JavaScript is an object-oriented language, i.e. most values are objects, including functions. (Strings, numbers, and booleans are &lt;em&gt;not&lt;/em&gt; objects.)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;JavaScriptはオブジェクト指向言語です。つまり、ほとんどの値は関数を含むオブジェクトです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（文字列、数値、ブール値は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;オブジェクトで&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はあり&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ません&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a2fdf9d982a02784e0975ab4455583df7ff00a3c" translate="yes" xml:space="preserve">
          <source>JavaScript isn't a low-level language.  It may not be very valuable to think of prototyping or other inheritance patterns as a way to explicitly change the way memory is allocated.</source>
          <target state="translated">JavaScriptは低レベルな言語ではありません。プロトタイピングなどの継承パターンを考えて、メモリの割り当て方を明示的に変えるというのは、あまり価値がないかもしれません。</target>
        </trans-unit>
        <trans-unit id="8fdca31371e433fd45f5ce78b0ac9a2214f60370" translate="yes" xml:space="preserve">
          <source>Let me give you a more comprehensive answer that I learned during a JavaScript training course.</source>
          <target state="translated">私がJavaScriptの講習で学んだことを、もう少しわかりやすく答えてみましょう。</target>
        </trans-unit>
        <trans-unit id="b03b280b17407f067546235b537992021180eadf" translate="yes" xml:space="preserve">
          <source>Let us look at the following example:</source>
          <target state="translated">次の例を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="1f5f057f5d33bae053072b69aa5b677d4464cea0" translate="yes" xml:space="preserve">
          <source>Let's go on with our example and create an &quot;object&quot; out of &lt;code&gt;A&lt;/code&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;例を先に進めて、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;から「オブジェクト」を作成してみましょう&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7bebb77119825ff6eb9b617e8afcfe33f39e3a01" translate="yes" xml:space="preserve">
          <source>Lets look at the implementation now.</source>
          <target state="translated">それでは実装を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="c0f8fd08fd1ae3fed7665265a11fa998dbd5952c" translate="yes" xml:space="preserve">
          <source>Most answers mentioned the difference already, i.e. when prototyping the function is shared with all (future) instances. Whereas declaring the function in the class will create a copy for each instance.</source>
          <target state="translated">ほとんどの回答はすでにその違いに言及しています。一方、クラス内で関数を宣言すると、各インスタンスのコピーが作成されます。</target>
        </trans-unit>
        <trans-unit id="6371c6ad3fae9de8ee8f263431e6d38bbd8ba8d0" translate="yes" xml:space="preserve">
          <source>Most people here (especially the top-rated answers) tried to explain how they are different without explaining WHY. I think this is wrong and if you understand the fundamentals first, the difference will become obvious. Let's try to explain the fundamentals first...</source>
          <target state="translated">ここのほとんどの人(特に上位の回答者)は、WHYを説明せずにどう違うのかを説明しようとしていました。これは間違っていると思いますし、まず基本的なことを理解すれば違いは明らかになると思います。まずは基本的なことを説明してみましょう...。</target>
        </trans-unit>
        <trans-unit id="af8ddf39a6e280886e3a21db4258fe6c6694944a" translate="yes" xml:space="preserve">
          <source>NOTE: Some people tend to not call the internal Prototype property as &lt;code&gt;__proto__&lt;/code&gt;, I've used this name through the post to distinguish it clearly to the &lt;code&gt;Functional.prototype&lt;/code&gt; property as two different things.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;注：一部の人々は内部のプロトタイププロパティを&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と呼ばない傾向があります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この名前を投稿で使用して、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Functional.prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プロパティと2つの異なるものとして&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;明確に区別しました&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9e08b3dab8de59f8684d10acd61311d09f996379" translate="yes" xml:space="preserve">
          <source>Not sure if this pattern is still relevant nowadays, but it exists. And it is good to know about it.
You simply pass an object and a property to the decorator function. The decorator returns the object with property and method.</source>
          <target state="translated">このパターンが今でも関係あるかどうかはわかりませんが、存在しています。そして、それを知っておくと良いでしょう。デコレータ関数にオブジェクトとプロパティを渡すだけです。デコレータはプロパティとメソッドを持ったオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="19bda0638ba7632222a0cb55603f398896425e39" translate="yes" xml:space="preserve">
          <source>Now, let's try to create another object:</source>
          <target state="translated">では、もう一つのオブジェクトを作ってみましょう。</target>
        </trans-unit>
        <trans-unit id="419574ffc2da398be8c2c847ff168ef513bfe459" translate="yes" xml:space="preserve">
          <source>Now, the &lt;code&gt;prototype&lt;/code&gt; structure can be applied as following:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これで、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;構造を次のように適用できます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7165ad3fec60f094c503a8486cf19a6a37782c89" translate="yes" xml:space="preserve">
          <source>Now, there's another thing happening when &lt;code&gt;var a1 = new A()&lt;/code&gt; statement is processed. Basically &lt;code&gt;A()&lt;/code&gt; is executed and if A is something like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;var a1 = new A()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ステートメントが処理されると&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、別のことが起こり&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;基本的に&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が実行され、Aが次のような場合：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="83d1f08532a2d718637904b4c370e11fc354f1dc" translate="yes" xml:space="preserve">
          <source>Object Decorator pattern</source>
          <target state="translated">オブジェクトデコレーターパターン</target>
        </trans-unit>
        <trans-unit id="1afec21842c90d30de589ac2651b4ea942c64d94" translate="yes" xml:space="preserve">
          <source>One section that defines common properties/methods in the prototype (chain).</source>
          <target state="translated">プロトタイプ(チェーン)に共通のpropertiesmethodsを定義するセクションの一つ。</target>
        </trans-unit>
        <trans-unit id="f8555b3f33258c80236579e089299ab9f568e09a" translate="yes" xml:space="preserve">
          <source>Prototypal Classes</source>
          <target state="translated">プロトタイプクラス</target>
        </trans-unit>
        <trans-unit id="ebaab3675de408919997f055a33be6353eee8b66" translate="yes" xml:space="preserve">
          <source>Prototype is the template of the class; which applies to all future instances of it. Whereas this is the particular instance of the object.</source>
          <target state="translated">プロトタイプはクラスのテンプレートで、将来のすべてのインスタンスに適用されます。一方、これはオブジェクトの特定のインスタンスです。</target>
        </trans-unit>
        <trans-unit id="7c10620b77891a5a8f24861d5ce595bd9ce31cc1" translate="yes" xml:space="preserve">
          <source>Pseudoclassical patterns</source>
          <target state="translated">擬似古典的なパターン</target>
        </trans-unit>
        <trans-unit id="99e10fb4f059613db70e3de60d817eff342bc563" translate="yes" xml:space="preserve">
          <source>Remember why the &lt;code&gt;__proto__&lt;/code&gt; property exists on every object? So that if you retrieve the &lt;code&gt;yoMan&lt;/code&gt; property on &lt;code&gt;a1&lt;/code&gt; (which doesn't exist), its &lt;code&gt;__proto__&lt;/code&gt; property will be consulted, which if it's an object (and is most cases it is), it will check if it contains &lt;code&gt;yoMan&lt;/code&gt;, and if it doesn't, it will consult that object's &lt;code&gt;__proto__&lt;/code&gt; etc. If it does, it will take that property value and display it to you.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プロパティがすべてのオブジェクトに存在する&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;理由を覚え&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ていますか？&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;だから、あなたが取得する場合、その&lt;/font&gt;&lt;/font&gt; &lt;code&gt;yoMan&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;のプロパティを&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（存在しない）、その&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それはオブジェクトの（そしてそれはほとんどの場合である）場合にはこれ、プロパティは相談され、それが含まれているかどうかをチェックします&lt;/font&gt;&lt;/font&gt; &lt;code&gt;yoMan&lt;/code&gt; を&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、それならばそうでない&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;場合は、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そのオブジェクトの&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;など&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を参照します&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。そうする場合は、そのプロパティ値を取得して表示します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b0a6e2e15bdc9df61cac47d196cd4068c8ed4bfe" translate="yes" xml:space="preserve">
          <source>So here are the snippets in question:</source>
          <target state="translated">そこで、問題のスニペットを紹介します。</target>
        </trans-unit>
        <trans-unit id="48bcbce51ee2114152267f2210d7eb26c82bc1a0" translate="yes" xml:space="preserve">
          <source>So someone decided to use this fact + the fact that when you create &lt;code&gt;a1&lt;/code&gt;, its &lt;code&gt;__proto__&lt;/code&gt; property points to the same (empty) object &lt;code&gt;A.prototype&lt;/code&gt; points to and do this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、誰かがこの事実+ &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を作成するときに&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、その&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プロパティが同じ（空の）オブジェクトを&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;指す&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;という事実を使用することを決定しました&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A.prototype&lt;/code&gt; が&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;指し、これを行います：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3e8e06d432de29a74b35aa0883013e73afe1ae28" translate="yes" xml:space="preserve">
          <source>So to summarize, when you do &lt;code&gt;var a1 = new A()&lt;/code&gt; there are 3 things happening in the background:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;要約すると、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;var a1 = new A()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;すると、バックグラウンドで3つのことが起こります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="22ed9816149fa3050650e31e821017731cbc0d1f" translate="yes" xml:space="preserve">
          <source>So we're now at the point where we have a freshly baked empty &lt;code&gt;a1&lt;/code&gt; object. We said that all objects in JavaScript have an internal &lt;code&gt;__proto__&lt;/code&gt; property which points to something (&lt;code&gt;a1&lt;/code&gt; also has it), whether it's null or another object. What the &lt;code&gt;new&lt;/code&gt; operator does is that it sets that &lt;code&gt;__proto__&lt;/code&gt; property to point to the function's &lt;code&gt;prototype&lt;/code&gt; property. Read that again. It's basically this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これで、焼きたての空の&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;オブジェクトが作成されました。 JavaScriptのすべてのオブジェクトには、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;nullか別のオブジェクトかに関係なく、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;何か（&lt;/font&gt; &lt;code&gt;a1&lt;/code&gt; に&lt;font style=&quot;vertical-align: inherit;&quot;&gt;もある）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を指す&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;内部&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プロパティ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;があると述べました&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。どのような&lt;/font&gt; &lt;code&gt;new&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;オペレータが行うことは、それがその設定されることである&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;機能のを指すようにプロパティを&lt;/font&gt; &lt;code&gt;prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;プロパティ。もう一度お読みください。それは基本的にこれです：&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="91cc8422370d40ae76ed33226042018137312f86" translate="yes" xml:space="preserve">
          <source>So what does this &lt;code&gt;__proto__&lt;/code&gt; property points to? Well, usually another object (we'll explain why later). The only way to force JavaScript for the &lt;code&gt;__proto__&lt;/code&gt; property to NOT point to another object is to use &lt;code&gt;var newObj = Object.create(null)&lt;/code&gt;. Even if you do this, the &lt;code&gt;__proto__&lt;/code&gt; property STILL exists as a property of the object,  just it doesn't point to another object, it points to &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;では、この&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プロパティ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は何を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;指しているのでしょうか？&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;まあ、通常は別のオブジェクトです（理由は後で説明します）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;JavaScriptを強制する唯一の方法&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;別のオブジェクトにしないポイントにプロパティを使用することです&lt;/font&gt;&lt;/font&gt; &lt;code&gt;var newObj = Object.create(null)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これを行っても、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プロパティはオブジェクトのプロパティとして存在し、別のオブジェクトを指すのではなく、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;null&lt;/code&gt; を&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;指すだけ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="68f8dbb71bc22f1b333dff6ea439d77f35689fff" translate="yes" xml:space="preserve">
          <source>So, we add it using prototype, rather than this.</source>
          <target state="translated">なので、これではなく、prototypeを使って追加します。</target>
        </trans-unit>
        <trans-unit id="14733402dd610d5b95df826ad8095da2e9ad0b60" translate="yes" xml:space="preserve">
          <source>Some developers can be confused in the beginning. See below example:</source>
          <target state="translated">開発者によっては、最初のうちは戸惑うこともあります。以下の例を参照してください。</target>
        </trans-unit>
        <trans-unit id="5dce25ee28014dce88c211954e9a1c27a9b6793f" translate="yes" xml:space="preserve">
          <source>Steps 1,2,3 will repeat. Do you notice something? The key word is &lt;strong&gt;repeat.&lt;/strong&gt; Step 1: &lt;code&gt;a2&lt;/code&gt; will be a new empty object, step 2: its &lt;code&gt;__proto__&lt;/code&gt; property will point to the same thing &lt;code&gt;A.prototype&lt;/code&gt; points to and most importantly, step 3: function &lt;code&gt;A()&lt;/code&gt; is AGAIN executed, which means that &lt;code&gt;a2&lt;/code&gt; will get &lt;code&gt;hey&lt;/code&gt; property containing a function. &lt;code&gt;a1&lt;/code&gt; and &lt;code&gt;a2&lt;/code&gt; have two SEPARATE properties named &lt;code&gt;hey&lt;/code&gt; which point to 2 SEPARATE functions! We now have duplicate functions in same two different objects doing the same thing, oops...You can imagine the memory implications of this if we have 1000 objects created with &lt;code&gt;new A&lt;/code&gt;, after all functions declarations take more memory than something like the number 2. So how do we prevent this?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ステップ1、2、3が繰り返されます。何か気づきましたか？キーワードは&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;繰り返しです。&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ステップ1：&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、新しい空のオブジェクトになり、ステップ2：その&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プロパティは、同じ事を指します&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A.prototype&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;にポイントと最も重要なのは、ステップ3：関数&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A()&lt;/code&gt; が&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;再度実行され、そのことを意味&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;取得する&lt;/font&gt;&lt;/font&gt; &lt;code&gt;hey&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;関数を含むプロパティ。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a2&lt;/code&gt; に&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;hey&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;という名前の2つのSEPARATEプロパティがあり、2つの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;SEPARATE関数をポイントします。これで、同じことを実行する同じ2つの異なるオブジェクトに重複する関数があります。おっと... 1000個のオブジェクトを&lt;/font&gt;&lt;/font&gt; &lt;code&gt;new A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、すべての関数の宣言は、数値2のようなものよりも多くのメモリを必要とします。では、どうすればこれを防ぐことができますか？&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ba42003109816715679c7cec7df83598908ebb1c" translate="yes" xml:space="preserve">
          <source>Take these 2 examples:</source>
          <target state="translated">この2つの例を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="1a1285513924c3fcc88d19dd90ef1b7247c97be6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;instanceof&lt;/code&gt; operator returns &lt;code&gt;false&lt;/code&gt;, because &lt;code&gt;Dog&lt;/code&gt;'s prototype cannot be found anywhere in &lt;code&gt;fido&lt;/code&gt;'s prototype chain. &lt;code&gt;fido&lt;/code&gt; is a simple object that is created with an object literal, i.e. it just delegates to &lt;code&gt;Object.prototype&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;instanceof&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;演算子を返すの&lt;/font&gt;&lt;/font&gt; &lt;code&gt;false&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、ので、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Dog&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;のプロトタイプがどこかで見つけることができない&lt;/font&gt;&lt;/font&gt; &lt;code&gt;fido&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;のプロトタイプチェーン」を。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;fido&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、オブジェクトリテラルで作成される単純なオブジェクトです&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;つまり、単に&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Object.prototype&lt;/code&gt; に&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;委任し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="59cba9bc0a9bd21c18ba6a3cd21c7e6251c3604c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;prototype&lt;/code&gt; property of a function constructor refers to the prototype object of all instances created with that function when using &lt;code&gt;new&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;関数コンストラクタ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の&lt;/font&gt;&lt;/font&gt; &lt;code&gt;prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プロパティは、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;new&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用するときにその関数で作成されたすべてのインスタンスのプロトタイプオブジェクトを参照します&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5fe4abd47db3ca32634516e9378bb727fff7e1ff" translate="yes" xml:space="preserve">
          <source>The examples have very different outcomes.</source>
          <target state="translated">例を見ても、結果は大きく異なる。</target>
        </trans-unit>
        <trans-unit id="597df3874dbfac5cd4c24cbbd34b592696279cd5" translate="yes" xml:space="preserve">
          <source>The fact that you used the operator &lt;code&gt;new&lt;/code&gt; before a function invocation &lt;code&gt;A()&lt;/code&gt; did something ADDITIONAL in the background. The &lt;code&gt;new&lt;/code&gt; keyword created a new object which now references &lt;code&gt;a1&lt;/code&gt; and that object is empty. Here's what happening additionally:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;関数呼び出し&lt;/font&gt; &lt;code&gt;A()&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;前に&lt;/font&gt;&lt;/font&gt; &lt;code&gt;new&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;演算子を使用したという事実により&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、バックグラウンドで追加の処理が行われました。&lt;/font&gt; &lt;code&gt;new&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;キーワードは、今の参照は、新しいオブジェクトを作成&lt;/font&gt; &lt;code&gt;a1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;、そのオブジェクトは空です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;さらに、次のことが起こります。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7e55db4e23b6f32c08ffe74b551e861a639ca0e4" translate="yes" xml:space="preserve">
          <source>The first example changes the interface for that object only. The second example changes the interface for all object of that class.</source>
          <target state="translated">最初の例では、そのオブジェクトのインターフェイスのみを変更します。2 番目の例は、そのクラスのすべてのオブジェクトのインターフェイスを変更します。</target>
        </trans-unit>
        <trans-unit id="3d067c8d8a017b9c83dc914075cce47ebc57d678" translate="yes" xml:space="preserve">
          <source>The first two patterns allow a discussion of using techniques to define  shared methods or using methods that are defined inline in the body of the constructor. In both cases every instance has its own &lt;code&gt;move&lt;/code&gt; function.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最初の2つのパターンでは、テクニックを使用して共有メソッドを定義する方法や、コンストラクターの本体でインラインで定義されるメソッドを使用する方法について説明します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;どちらの場合も、すべてのインスタンスに独自の&lt;/font&gt;&lt;/font&gt; &lt;code&gt;move&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;機能があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="82ae2b7331064f17552e8317206e9a42246c5f28" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;A()&lt;/code&gt; is being executed with &lt;code&gt;this&lt;/code&gt; set to the new, empty object created in step 1 (read the answer I referenced above as to why &lt;code&gt;this&lt;/code&gt; changes to &lt;code&gt;a1&lt;/code&gt;)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;関数&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;this&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;をステップ1で作成された新しい空のオブジェクトに設定し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;て実行されてい&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます（&lt;/font&gt;&lt;/font&gt; &lt;code&gt;this&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a1&lt;/code&gt; に&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;変更&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;される理由について上記で参照した回答を読んでください&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2b2318654afa23c4d76517a2dd3e321c2338ca9a" translate="yes" xml:space="preserve">
          <source>The prototypal pattern does not lend itself well to the same examination, because function sharing via a prototype delegation is the very goal for the prototypal pattern. As others pointed out, it is expected to have a better memory footprint.</source>
          <target state="translated">プロトタイプパターンは、プロトタイプの委任を介した機能共有がまさにプロトタイプパターンの目的であるため、同じ検討には適していません。他の人が指摘しているように、より良いメモリフットプリントが期待されています。</target>
        </trans-unit>
        <trans-unit id="81a9d5f167760be8b398327c28ef552413c90ceb" translate="yes" xml:space="preserve">
          <source>The ultimate problem with using &lt;code&gt;this&lt;/code&gt; instead of &lt;code&gt;prototype&lt;/code&gt; is that when overriding a method, the constructor of the base class will still refer to the overridden method. Consider this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &lt;code&gt;prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;代わりに&lt;/font&gt;&lt;/font&gt; &lt;code&gt;this&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用する&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;こと&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の最終的な問題&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、メソッドをオーバーライドするときに、基本クラスのコンストラクターがオーバーライドされたメソッドを引き続き参照することです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このことを考慮：&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cb8a7a4b9ba94c3c72b9b96dae39a5767b6c3728" translate="yes" xml:space="preserve">
          <source>There's something happening in the background when this thing happened. &lt;code&gt;a1&lt;/code&gt; is an ordinary variable which was assigned a new, empty object.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このことが起こったとき、バックグラウンドで何かが起こっています。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、新しい空のオブジェクトが割り当てられた通常の変数です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dad014627fd09fcb90b0d1758b0b7befb734da14" translate="yes" xml:space="preserve">
          <source>These differences between the two approaches also manifest if you're serializing and de-serializing your Javascript objects to/from JSON. Methods defined on an object's prototype are not serialized when you serialize the object, which can be convenient when for example you want to serialize just the data portions of an object, but not it's methods:</source>
          <target state="translated">この 2 つのアプローチの違いは、JSON から Javascript オブジェクトをシリアライズしたり、デシリアライズしたりする場合にも現れます。オブジェクトのプロトタイプで定義されたメソッドは、オブジェクトをシリアライズするときにはシリアライズされません。</target>
        </trans-unit>
        <trans-unit id="9067e4c49b46c1e9bbb2aec0015f46bb87b79ddd" translate="yes" xml:space="preserve">
          <source>Think about statically typed language, things on &lt;code&gt;prototype&lt;/code&gt; are static and things on &lt;code&gt;this&lt;/code&gt; are instance related.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;静的に型付けされた言語について考えてください。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に関する&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ものは静的で、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;this&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に関する&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;もの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はインスタンスに関連しています。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2355c245479715e65d721ee60eaa07117437d333" translate="yes" xml:space="preserve">
          <source>This example, though different, comes closest to the first example in the question.</source>
          <target state="translated">この例は、異なるとはいえ、質問の最初の例に最も近いものです。</target>
        </trans-unit>
        <trans-unit id="ca0afa04c7a867ec6cfc7913f8acd8d206551180" translate="yes" xml:space="preserve">
          <source>This is an uncommon use of &lt;em&gt;new&lt;/em&gt; since the only way to reference the constructor is via &lt;em&gt;A.constructor&lt;/em&gt;. It would be much more common to do:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コンストラクタを参照する唯一の方法は&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;A.constructor&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を経由するため、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは珍しい&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;newの&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;法&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それを行うことははるかに一般的です：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="036187c48acf9dbe69bc45355dde270b1aec2e23" translate="yes" xml:space="preserve">
          <source>This is really just another form of the prototypal pattern in simplified form and more familiar to do those who program in Java for example, since it uses the &lt;code&gt;new&lt;/code&gt; constructor.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは、実際には単純化された形式のプロトタイプパターンのもう1つの形式であり、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;new&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コンストラクタを&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用するため、たとえばJavaでプログラミングを行う人にとってはより身近なものです&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5029be1875db619a586bd4a66a39dc6782bd2ffa" translate="yes" xml:space="preserve">
          <source>This is what allows us to apply concepts like superclass or subclass in JavaScript.</source>
          <target state="translated">これは、JavaScriptでスーパークラスやサブクラスのような概念を適用できるようにするためのものです。</target>
        </trans-unit>
        <trans-unit id="8e91f2df575afa57c8758a2f705311ee0e328b72" translate="yes" xml:space="preserve">
          <source>To check that &lt;em&gt;A&lt;/em&gt; has an &lt;em&gt;x&lt;/em&gt; property:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;A&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;x&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プロパティ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;がある&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ことを確認&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;するに&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="040a03f3b5302125518bef7090315aeab9a7bb1b" translate="yes" xml:space="preserve">
          <source>Use of 'prototype' vs. 'this' in JavaScript</source>
          <target state="translated">JavaScript での 'prototype' と 'this' の使い分け</target>
        </trans-unit>
        <trans-unit id="9d00fbb739bf112dec2029fddeb77b8657217f24" translate="yes" xml:space="preserve">
          <source>We said that &lt;code&gt;A.prototype&lt;/code&gt; is nothing more than an empty object (unless we change it to something else before defining &lt;code&gt;a1&lt;/code&gt;). So now basically &lt;code&gt;a1.__proto__&lt;/code&gt; points to the same thing &lt;code&gt;A.prototype&lt;/code&gt; points to, which is that empty object. They both point to the same object which was created when this line happened:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;A.prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は空のオブジェクトに過ぎない&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a1&lt;/code&gt; を&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;定義する前に別のオブジェクトに変更しない限り）と述べました&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、基本的に&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a1.__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A.prototype&lt;/code&gt; が&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;指す&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ものと同じもの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、つまりその空のオブジェクトを指します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これらは両方とも、この行が発生したときに作成された同じオブジェクトを指しています。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="eb13a5422040b1640e4e7a0c5454ebb645c4d9c1" translate="yes" xml:space="preserve">
          <source>We said that on each function definition there's a new property created called &lt;code&gt;prototype&lt;/code&gt; (which you can access it, unlike with the &lt;code&gt;__proto__&lt;/code&gt; property) created? Well, that property is being used now.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;各関数の定義で、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と呼ばれる新しいプロパティが作成されると述べました&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プロパティ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;とは異なり、これにアクセスできます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;さて、そのプロパティは現在使用されています。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c6dc267ab3b9d3d635dbd0662b24434319206abe" translate="yes" xml:space="preserve">
          <source>What's the difference between</source>
          <target state="translated">の違いは何ですか?</target>
        </trans-unit>
        <trans-unit id="47d12f46bd7d79018cce2ea06e4664512459a236" translate="yes" xml:space="preserve">
          <source>What's the difference? =&amp;gt; A lot.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;違いは何ですか？&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;=&amp;gt;たくさん。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d2f85f01731ca1bab5a86d8e3aba08a7efa46e93" translate="yes" xml:space="preserve">
          <source>When you create a new function in JavaScript (which is an object as well, remember?), the moment it is defined, JavaScript automatically creates a new property on that function called &lt;code&gt;prototype&lt;/code&gt;. Try it:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;JavaScriptで新しい関数を作成すると（これもオブジェクトです。覚えていますか？）、関数が定義されるとすぐに、JavaScriptはその関数に&lt;/font&gt;&lt;/font&gt; &lt;code&gt;prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;という名前の新しいプロパティを自動的に作成します&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それを試してみてください：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b6473c77919835536c99c5a79f1980fb08ea7f56" translate="yes" xml:space="preserve">
          <source>With this approach we eliminate the part from step 3 where functions are duplicated on each new object creation. Instead of &lt;code&gt;a1&lt;/code&gt; and &lt;code&gt;a2&lt;/code&gt; having a separate &lt;code&gt;hey&lt;/code&gt; property, now NONE of them has it. Which, I guess, you figured out yourself by now. That's the nice thing...if you understand &lt;code&gt;__proto__&lt;/code&gt; and &lt;code&gt;Function.prototype&lt;/code&gt;, questions like these will be pretty obvious.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このアプローチでは、新しいオブジェクトが作成されるたびに機能が複製されるステップ3の部分を排除します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;代わりに&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;独立した&lt;/font&gt;&lt;/font&gt; &lt;code&gt;hey&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プロパティを、今それらのどれもがそれを持っていません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;おそらく、あなたは今までにあなた自身を理解していました。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それはいいことです... &lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Function.prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を理解すれば&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、これらのような質問はかなり明白になります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ed7ea4136777240f51ec615c9b731cd154f02835" translate="yes" xml:space="preserve">
          <source>You may also wonder, why does JavaScript creates a property called &lt;code&gt;prototype&lt;/code&gt; for a function when you define the function? Because it tries to fool you, yes &lt;strong&gt;fool you&lt;/strong&gt; that it works like class-based languages.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;関数を定義するときに、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;JavaScriptが&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;関数の&lt;/font&gt;&lt;/font&gt; &lt;code&gt;prototype&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と呼ばれるプロパティを作成するのはなぜ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;でしょうか。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それはあなたをだまそうとするので、はい&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、それはクラスベースの言語のように機能&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;すること&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あなた&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;だます&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cdcbed7468dabda887ee2ad3bed61463436ef43a" translate="yes" xml:space="preserve">
          <source>You may wonder: Why does JavaScript has &lt;code&gt;__proto__&lt;/code&gt; property created on every single object? Well, one word: &lt;strong&gt;delegation&lt;/strong&gt;. When you call a property on an object and the object doesn't have it, then JavaScript looks for the object referenced by &lt;code&gt;__proto__&lt;/code&gt; to see if it maybe has it. If it doesn't have it, then it looks at that object's &lt;code&gt;__proto__&lt;/code&gt; property and so on...until the chain ends. Thus the name &lt;strong&gt;prototype chain&lt;/strong&gt;. Of course, if &lt;code&gt;__proto__&lt;/code&gt; doesn't point to an object and instead points to &lt;code&gt;null&lt;/code&gt;, well tough luck, JavaScript realizes that and will return you &lt;code&gt;undefined&lt;/code&gt; for the property.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;疑問に思われるかもしれません：なぜJavaScriptは&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;すべてのオブジェクトに&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プロパティを作成するのですか？さて、一言：&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;委任&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。オブジェクトのプロパティを呼び出し、そのオブジェクトにプロパティがない場合、JavaScriptは&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;によって参照されているオブジェクトを探し、それが含まれている&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;かどうかを確認します。ない場合は、そのオブジェクトの&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プロパティなどを&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;調べ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、チェーンが終了するまで続けます。したがって、名前の&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プロトタイプチェーン&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。もちろん、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;がオブジェクトを指さず、代わりに&lt;/font&gt;&lt;/font&gt; &lt;code&gt;null&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を指している場合、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;幸運なことに、JavaScriptはそれを認識し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、プロパティに対して&lt;/font&gt;&lt;/font&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;返します&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="228a84adb74c5fcc8902823a8da25305d1e558d9" translate="yes" xml:space="preserve">
          <source>You showed two patterns in your question. I will try to explain two more and try to explain the differences if relevant. Feel free to edit/extend.
In all examples it is about a car object that has a location and can move.</source>
          <target state="translated">ご質問の中で2つのパターンが示されていますね。あと2つ説明してみて、関連性があれば違いを説明してみようと思います。自由にeditextendしてください。すべての例では、それは場所を持っており、移動することができます車のオブジェクトについてです。</target>
        </trans-unit>
        <trans-unit id="abed52bbf756ca559bba9e9c61017226edbec61c" translate="yes" xml:space="preserve">
          <source>a) A function is an object in JavaScript. EVERY object in JavaScript gets an internal property (meaning, you can't access it like other properties, except maybe in browsers like Chrome), often referred to as &lt;code&gt;__proto__&lt;/code&gt; (you can actually type &lt;code&gt;anyObject.__proto__&lt;/code&gt; in Chrome to see what it references. This is just that, a property, nothing more. A property in JavaScript = a variable inside an object, nothing more. What do variables do? They point to things.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;a）関数はJavaScriptのオブジェクトです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;JavaScriptのすべてのオブジェクトは内部プロパティを取得します（つまり、他のプロパティのようにアクセスすることはできません。ただし、Chromeなどのブラウザを除く）。これは、しばしば&lt;/font&gt; &lt;code&gt;anyObject.__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;と呼ばれ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます（実際&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;にChromeで&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;anyObject .__ &lt;/font&gt;&lt;/font&gt; &lt;code&gt;__proto__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と入力すると&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、参照先を確認できます。これは単なるプロパティであり、それ以上のものではありません。JavaScriptのプロパティ=オブジェクト内の変数であり、それ以上のものではありません。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">and</target>
        </trans-unit>
        <trans-unit id="f7023942206621acc838b9f351c2bfc78689b792" translate="yes" xml:space="preserve">
          <source>something very different occurs.  In the first line, variable &lt;code&gt;A&lt;/code&gt; is assigned a reference to a function.  In JavaScript, all functions objects have a &lt;em&gt;prototype&lt;/em&gt; property by default so there is no separate code to create an &lt;em&gt;A.prototype&lt;/em&gt; object.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;非常に異なる何かが発生します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最初の行では、変数&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; に&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;関数への参照が割り当てられています。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;JavaScriptでは、すべての関数オブジェクトに&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;デフォルトで&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プロトタイプ&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プロパティ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;がある&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ため、&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;A.prototype&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;オブジェクト&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を作成するための個別のコードはありません&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d1add0059bf8e9b747aba843af8d9a92c234489d" translate="yes" xml:space="preserve">
          <source>versus:</source>
          <target state="translated">versus:</target>
        </trans-unit>
        <trans-unit id="b4993da023bb6cf4528cc249a4a1168cbc4c7731" translate="yes" xml:space="preserve">
          <source>vs.</source>
          <target state="translated">vs.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
