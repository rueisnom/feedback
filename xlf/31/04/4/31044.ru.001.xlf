<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://stackoverflow.com/questions/31044">
    <body>
      <group id="31044">
        <trans-unit id="be141f8a42560351d06c57f2013ba04b3aa4acb7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://api.jquery.com/jQuery.contains/&quot;&gt;jQuery.contains&lt;/a&gt; takes two DOM elements and checks whether the first one contains the second one.</source>
          <target state="translated">&lt;a href=&quot;http://api.jquery.com/jQuery.contains/&quot;&gt;jQuery.contains&lt;/a&gt; принимает два элемента DOM и проверяет, содержит ли первый элемент второй.</target>
        </trans-unit>
        <trans-unit id="253208cdb2739f610e1475e2e8bb36c50ee17f81" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://learn.jquery.com/using-jquery-core/faq/how-do-i-test-whether-an-element-exists/&quot;&gt;Checking for existence of an element&lt;/a&gt; is documented neatly in the official jQuery website itself!</source>
          <target state="translated">&lt;a href=&quot;https://learn.jquery.com/using-jquery-core/faq/how-do-i-test-whether-an-element-exists/&quot;&gt;Проверка существования элемента&lt;/a&gt; четко документирована на самом официальном сайте jQuery!</target>
        </trans-unit>
        <trans-unit id="15460a52022f912174fbd67441e18c7f42ea770c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$(&quot;selector&quot;&lt;/code&gt;) returns an object which has the &lt;code&gt;length&lt;/code&gt; property. If the selector finds any elements, they will be included in the object. So if you check its length you can see if any elements exist. In JavaScript &lt;code&gt;0 == false&lt;/code&gt;, so if you don't get &lt;code&gt;0&lt;/code&gt; your code will run.</source>
          <target state="translated">&lt;code&gt;$(&quot;selector&quot;&lt;/code&gt; ) возвращает объект, который имеет свойство &lt;code&gt;length&lt;/code&gt; . Если селектор найдет какие-либо элементы, они будут включены в объект. Поэтому, если вы проверите его длину, вы увидите, существуют ли какие-либо элементы. В JavaScript &lt;code&gt;0 == false&lt;/code&gt; , поэтому, если вы не получите &lt;code&gt;0&lt;/code&gt; , ваш код будет работать.</target>
        </trans-unit>
        <trans-unit id="363f3fa2ec89e17be56878352706aeebeb10e9ca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Note&lt;/em&gt;&lt;/strong&gt;: The first argument must be a DOM element, not a jQuery object or plain JavaScript object.</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;Примечание&lt;/em&gt;&lt;/strong&gt; . Первый аргумент должен быть элементом DOM, а не объектом jQuery или простым объектом JavaScript.</target>
        </trans-unit>
        <trans-unit id="90f2c4bad014276e5d3dc2a1e554c18a38786ea4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;FINAL SOLUTION&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ОКОНЧАТЕЛЬНОЕ РЕШЕНИЕ&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cd064ce7707f60287475ad847261b94e14b223ab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NB:&lt;/strong&gt; Notice the lack of an '#' before the &lt;code&gt;element_id&lt;/code&gt; (since this is plain JS, not &lt;code&gt;jQuery&lt;/code&gt;).</source>
          <target state="translated">&lt;strong&gt;NB:&lt;/strong&gt; обратите внимание на отсутствие &lt;code&gt;element_id&lt;/code&gt; # перед element_id (поскольку это обычный JS, а не &lt;code&gt;jQuery&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="adb39f4a8cec0df89e2b475cd992eaa7d63aab84" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;little&lt;/strong&gt; more elegant, perhaps.</source>
          <target state="translated">Возможно, &lt;strong&gt;немного&lt;/strong&gt; более элегантно.</target>
        </trans-unit>
        <trans-unit id="c8b8b0ff7a35e9caa15a5ba208384ed1248887b7" translate="yes" xml:space="preserve">
          <source>Alternatively, &lt;a href=&quot;http://learn.jquery.com/using-jquery-core/faq/how-do-i-test-whether-an-element-exists/&quot;&gt;from the FAQ&lt;/a&gt;:</source>
          <target state="translated">В качестве альтернативы &lt;a href=&quot;http://learn.jquery.com/using-jquery-core/faq/how-do-i-test-whether-an-element-exists/&quot;&gt;из FAQ&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="680b4bec362e0e97999ad585a8a21f4a4aa21a3c" translate="yes" xml:space="preserve">
          <source>And it is better than the alternative of writing your own &lt;code&gt;jQuery&lt;/code&gt; function. That alternative is slower, for the reasons @snover stated. But it would also give other programmers the impression that the &lt;code&gt;exists()&lt;/code&gt; function is something inherent to jQuery. &lt;code&gt;JavaScript&lt;/code&gt; would/should be understood by others editing your code, without increased knowledge debt.</source>
          <target state="translated">И это лучше, чем альтернатива написания собственной функции &lt;code&gt;jQuery&lt;/code&gt; . Эта альтернатива медленнее, по причинам, указанным @snover. Но это также создало бы у других программистов впечатление, что функция &lt;code&gt;exists()&lt;/code&gt; является чем-то присущим jQuery. &lt;code&gt;JavaScript&lt;/code&gt; будут / должны быть поняты другими, редактирующими ваш код, без увеличения долга знаний.</target>
        </trans-unit>
        <trans-unit id="7ff35c2f7ca7c5422602c66d12ad5e6d5c0957ce" translate="yes" xml:space="preserve">
          <source>And now i can write code like this -</source>
          <target state="translated">И теперь я могу писать код вот так -</target>
        </trans-unit>
        <trans-unit id="1888c5589c987ce35f03566f176d96494dd3421f" translate="yes" xml:space="preserve">
          <source>Below, I've put together a snippet that compares &lt;code&gt;jQuery.exists()&lt;/code&gt; against the &lt;code&gt;$(sel)[0]&lt;/code&gt; and &lt;code&gt;$(sel).length&lt;/code&gt; approaches which both return &lt;code&gt;truthy&lt;/code&gt; values for &lt;code&gt;$(4)&lt;/code&gt; while &lt;code&gt;$(4).exists()&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;. In the context of &lt;strong&gt;checking for existence&lt;/strong&gt; of an element in the DOM this seems to be the &lt;strong&gt;desired result&lt;/strong&gt;.</source>
          <target state="translated">Ниже я собрал фрагмент, который сравнивает &lt;code&gt;jQuery.exists()&lt;/code&gt; с подходами &lt;code&gt;$(sel)[0]&lt;/code&gt; и &lt;code&gt;$(sel).length&lt;/code&gt; которые оба возвращают &lt;code&gt;truthy&lt;/code&gt; значения для &lt;code&gt;$(4)&lt;/code&gt; а &lt;code&gt;$(4).exists()&lt;/code&gt; возвращает &lt;code&gt;false&lt;/code&gt; . В контексте &lt;strong&gt;проверки существования&lt;/strong&gt; элемента в DOM это, кажется, &lt;strong&gt;желаемый результат&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="614f7d8f91ec8a997545c3ffb6b56b85e36b1e31" translate="yes" xml:space="preserve">
          <source>Edit: &lt;strong&gt;WARNING!&lt;/strong&gt; This doesn't work in IE when &lt;code&gt;selector&lt;/code&gt; is a string.</source>
          <target state="translated">Редактировать: &lt;strong&gt;ВНИМАНИЕ!&lt;/strong&gt; Это не работает в IE, когда &lt;code&gt;selector&lt;/code&gt; является строкой.</target>
        </trans-unit>
        <trans-unit id="cbfdfa363d5febf67bec9401327c62825e8c4aeb" translate="yes" xml:space="preserve">
          <source>Example Uses</source>
          <target state="translated">Примеры использования</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="c08d85561b30a4293f197bb268373c96c96f5561" translate="yes" xml:space="preserve">
          <source>Execute the chain only if a jQuery element exist  - &lt;a href=&quot;http://jsfiddle.net/andres_314/vbNM3/2/&quot;&gt;http://jsfiddle.net/andres_314/vbNM3/2/&lt;/a&gt;</source>
          <target state="translated">Выполнять цепочку, только если существует элемент jQuery - &lt;a href=&quot;http://jsfiddle.net/andres_314/vbNM3/2/&quot;&gt;http://jsfiddle.net/andres_314/vbNM3/2/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">Расширить фрагмент</target>
        </trans-unit>
        <trans-unit id="344f84627f5be0108f168722814ac89e634b1fc2" translate="yes" xml:space="preserve">
          <source>Here is my favorite &lt;code&gt;exist&lt;/code&gt; method in jQuery</source>
          <target state="translated">Вот мой любимый &lt;code&gt;exist&lt;/code&gt; метод в jQuery</target>
        </trans-unit>
        <trans-unit id="84ef2cc74f3e435f0bb06454c76f10422f6dd041" translate="yes" xml:space="preserve">
          <source>Here is the complete example of different situations and way to check if element exists using direct if on jQuery selector may or may not work because it returns array or elements.</source>
          <target state="translated">Вот полный пример различных ситуаций и способ проверить,существует ли элемент,используя прямой,если на jQuery селектор может работать или не работать,так как он возвращает массив или элементы.</target>
        </trans-unit>
        <trans-unit id="e75030adb468b3a20795417b746e352d74186766" translate="yes" xml:space="preserve">
          <source>How about:</source>
          <target state="translated">Как насчет:</target>
        </trans-unit>
        <trans-unit id="ee7880a0fc768ef10b1fd552a69a813d09fe35a3" translate="yes" xml:space="preserve">
          <source>How can I check the existence of an element in jQuery?</source>
          <target state="translated">Как проверить существование элемента в jQuery?</target>
        </trans-unit>
        <trans-unit id="c834c92215659d3c1ed8aa78f0c33a029dc48552" translate="yes" xml:space="preserve">
          <source>However this method leaves us with the actual object being returned; which is fine if it isn't going to be saved as variable and used repeatedly (thus keeping the reference around if we forget).</source>
          <target state="translated">Однако этот метод оставляет нам возвращаемый фактический объект,что нормально,если он не будет сохранен как переменная и использован многократно (таким образом,сохраняя ссылку,если мы забыли).</target>
        </trans-unit>
        <trans-unit id="772eaee22a5f028e404f604d0d8204a4380daaac" translate="yes" xml:space="preserve">
          <source>I had a case where I wanted to see if an object exists inside of another so I added something to the first answer to check for a selector inside the selector..</source>
          <target state="translated">У меня был случай,когда я хотел посмотреть,существует ли объект внутри другого,поэтому я добавил кое-что в первый ответ,чтобы проверить,есть ли селектор внутри селектора.</target>
        </trans-unit>
        <trans-unit id="23e7679d619274a1c050a6555167b90aa2259957" translate="yes" xml:space="preserve">
          <source>I have found &lt;code&gt;if ($(selector).length) {}&lt;/code&gt; to be insufficient. It will silently break your app when &lt;code&gt;selector&lt;/code&gt; is an empty object &lt;code&gt;{}&lt;/code&gt;.</source>
          <target state="translated">Я обнаружил, &lt;code&gt;if ($(selector).length) {}&lt;/code&gt; будет недостаточно. Он молча сломает ваше приложение, когда &lt;code&gt;selector&lt;/code&gt; будет пустым объектом &lt;code&gt;{}&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b8cfad0044d460ee15f65d57d74661386d54ee9c" translate="yes" xml:space="preserve">
          <source>I just like to use plain vanilla javascript to do this.</source>
          <target state="translated">Мне просто нравится использовать обычный ванильный яваскрипт.</target>
        </trans-unit>
        <trans-unit id="743ced2e69b7301f1883136d7ed6feeae12adcd4" translate="yes" xml:space="preserve">
          <source>I see most of the answers here are &lt;strong&gt;not accurate&lt;/strong&gt; as they should be, they check element length, it can be &lt;strong&gt;OK&lt;/strong&gt; in many cases, but &lt;strong&gt;not 100%&lt;/strong&gt;, imagine if number pass to the function instead, so I prototype a function which check all conditions and return the answer as it should be:</source>
          <target state="translated">Я вижу, что большинство ответов здесь &lt;strong&gt;не&lt;/strong&gt; являются &lt;strong&gt;точными,&lt;/strong&gt; как они должны быть, они проверяют длину элемента, во многих случаях это может быть &lt;strong&gt;нормально&lt;/strong&gt; , но &lt;strong&gt;не на 100%&lt;/strong&gt; , представьте, что вместо функции передается число, поэтому я создаю прототип функции, которая проверяет все условия и вернуть ответ так, как должно быть:</target>
        </trans-unit>
        <trans-unit id="2aec2eec2e008faa93776b4e53f65ead7f768c65" translate="yes" xml:space="preserve">
          <source>I stumbled upon this question and i'd like to share a snippet of code i currently use:</source>
          <target state="translated">Я наткнулся на этот вопрос и хотел бы поделиться фрагментом кода,который я использую в настоящее время:</target>
        </trans-unit>
        <trans-unit id="7aafedd09b64bc92c115a85a5dc8d8daf8911943" translate="yes" xml:space="preserve">
          <source>I'm still looking for a better solution though as this one is a bit heavy.</source>
          <target state="translated">Я все еще ищу лучшее решение,хотя это немного тяжеловато.</target>
        </trans-unit>
        <trans-unit id="4aff9b68fdb743fcc4af055791e7099cada839c9" translate="yes" xml:space="preserve">
          <source>I'm using this:</source>
          <target state="translated">Я использую это:</target>
        </trans-unit>
        <trans-unit id="cfdbd71bd1bdf3874f47be3d2f9bba7f7da1d542" translate="yes" xml:space="preserve">
          <source>If for any reason you don't want to put an id to the element, you can still use any other JavaScript method designed to access the DOM.</source>
          <target state="translated">Если по какой-то причине вы не хотите ставить идентификатор элемента,вы все равно можете использовать любой другой метод JavaScript,предназначенный для доступа к флэш-памяти.</target>
        </trans-unit>
        <trans-unit id="7f21c59ea1e1f4e2747c773afe86e76c95a6cd69" translate="yes" xml:space="preserve">
          <source>If you don't actually need the element and want to get/store just a true/false, just double not it !!  It works for shoes that come untied, so why knot here?</source>
          <target state="translated">Если вам на самом деле не нужен элемент,и вы хотите получить только правду,просто удвойте его !!! Это работает для обуви,которая приходит развязанной,так зачем здесь завязывать узел?</target>
        </trans-unit>
        <trans-unit id="bdf305996aea41c30698f859a49459079c15daf9" translate="yes" xml:space="preserve">
          <source>If you used</source>
          <target state="translated">Если вы использовали</target>
        </trans-unit>
        <trans-unit id="154feac1548385fac7cc0e787b9a77e02e537a24" translate="yes" xml:space="preserve">
          <source>In JavaScript, everything is 'truthy' or 'falsy', and for numbers &lt;code&gt;0&lt;/code&gt; (and NaN) means &lt;code&gt;false&lt;/code&gt;, everything else &lt;code&gt;true&lt;/code&gt;. So you could write:</source>
          <target state="translated">В JavaScript все &amp;laquo;правдиво&amp;raquo; или &amp;laquo;ложно&amp;raquo;, а для чисел &lt;code&gt;0&lt;/code&gt; (и NaN) означает &amp;laquo; &lt;code&gt;false&lt;/code&gt; , все остальное - &amp;laquo; &lt;code&gt;true&lt;/code&gt; . Чтобы вы могли написать:</target>
        </trans-unit>
        <trans-unit id="6ff17e14f64cb7cd29b7e49a91dbe03caa66d00d" translate="yes" xml:space="preserve">
          <source>In some cases this may be desired.  It can be used in a for loop like this:</source>
          <target state="translated">В некоторых случаях это может быть желательным.Его можно использовать в таком цикле:</target>
        </trans-unit>
        <trans-unit id="ef3cc795e01ffe8544bb322757ff3892b10b7cf0" translate="yes" xml:space="preserve">
          <source>Inspired by &lt;a href=&quot;https://stackoverflow.com/a/19533724/177710&quot;&gt;hiway's answer&lt;/a&gt; I came up with the following:</source>
          <target state="translated">Вдохновленный &lt;a href=&quot;https://stackoverflow.com/a/19533724/177710&quot;&gt;ответом хайвея,&lt;/a&gt; я придумал следующее:</target>
        </trans-unit>
        <trans-unit id="8ad867bd6e09d6144016154307fc89aff81e21ac" translate="yes" xml:space="preserve">
          <source>Is &lt;a href=&quot;http://api.jquery.com/jQuery.contains/&quot;&gt;&lt;code&gt;$.contains()&lt;/code&gt;&lt;/a&gt; what you want?</source>
          <target state="translated">Является ли &lt;a href=&quot;http://api.jquery.com/jQuery.contains/&quot;&gt; &lt;code&gt;$.contains()&lt;/code&gt; &lt;/a&gt; тем, что вы хотите?</target>
        </trans-unit>
        <trans-unit id="7670762e5368024d94ec800cbc48b6ff05f379d5" translate="yes" xml:space="preserve">
          <source>Is there a more elegant way to approach this? Perhaps a plugin or a function?</source>
          <target state="translated">Есть ли более элегантный способ подойти к этому? Может быть,плагин или функция?</target>
        </trans-unit>
        <trans-unit id="dbb40afe618fc71e22f0fa14353a861d9f0d56f7" translate="yes" xml:space="preserve">
          <source>Is there an “exists” function for jQuery</source>
          <target state="translated">Есть ли функция &quot;существует&quot; для jQuery</target>
        </trans-unit>
        <trans-unit id="cde248b0a1335dec914e6fc113d65b505d291f71" translate="yes" xml:space="preserve">
          <source>It is a bit longer to write than the jQuery length alternative, but executes faster since it is a native JS method.</source>
          <target state="translated">Он немного длиннее,чем альтернатива длины jQuery,но выполняется быстрее,так как является родным JS-методом.</target>
        </trans-unit>
        <trans-unit id="4d0514a9277b4466c81ce0b5704dde4ca1afff02" translate="yes" xml:space="preserve">
          <source>It might seem a lot of code, but when written in CoffeeScript it is quite small:</source>
          <target state="translated">Может показаться,что кода много,но при написании на CoffeeScript он довольно мал:</target>
        </trans-unit>
        <trans-unit id="d8f03b7b0e94e631429e819e9c4f257e02c76fb6" translate="yes" xml:space="preserve">
          <source>It's very minimal and saves you having to enclose the selector with &lt;code&gt;$()&lt;/code&gt; every time.</source>
          <target state="translated">Это очень минимально и избавляет вас от необходимости каждый раз заключать селектор в &lt;code&gt;$()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7686a45a941b2348674f2a56597fa3056e1c75bb" translate="yes" xml:space="preserve">
          <source>Keep in mind that using the &lt;strong&gt;callback variant helps maintain chainability&lt;/strong&gt; &amp;ndash; the element is returned and you can continue chaining commands as with any other jQuery method!</source>
          <target state="translated">Имейте в виду, что использование &lt;strong&gt;варианта обратного вызова помогает поддерживать цепочечность&lt;/strong&gt; - элемент возвращается, и вы можете продолжить цепочку команд, как и с любым другим методом jQuery!</target>
        </trans-unit>
        <trans-unit id="f6cb336ffa2bb157f146e2dadef9cde9d4507919" translate="yes" xml:space="preserve">
          <source>Much more performant option below(notice lack of a dot before a-class).</source>
          <target state="translated">Намного более производительный вариант ниже (заметьте отсутствие точки перед классом).</target>
        </trans-unit>
        <trans-unit id="d0f6ccf98cff584a5c8b827b8e8878b2ccc925c1" translate="yes" xml:space="preserve">
          <source>My only suggestion is to perform an additional check for &lt;code&gt;{}&lt;/code&gt;.</source>
          <target state="translated">Мое единственное предложение - выполнить дополнительную проверку &lt;code&gt;{}&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="57cbe7fe2124e87fd2bd9494aa89983ffc8f89b1" translate="yes" xml:space="preserve">
          <source>No need for jQuery (basic solution)</source>
          <target state="translated">Нет необходимости в jQuery (базовое решение)</target>
        </trans-unit>
        <trans-unit id="c74dea4541d4eab744f05a03c0973705052f601c" translate="yes" xml:space="preserve">
          <source>Note that it isn't always necessary to test whether an element exists.
  The following code will show the element if it exists, and do nothing
  (with no errors) if it does not:</source>
          <target state="translated">Обратите внимание,что не всегда необходимо проверять,существует ли элемент.Следующий код покажет элемент,если он существует,и ничего не сделает (без ошибок),если его нет:</target>
        </trans-unit>
        <trans-unit id="8dc208f8ebe86aa9ee6a37d49d48058be5364bff" translate="yes" xml:space="preserve">
          <source>Plugin</source>
          <target state="translated">Plugin</target>
        </trans-unit>
        <trans-unit id="4bcb4e163bf193fe874c35e7a1a754e4ed2bd51c" translate="yes" xml:space="preserve">
          <source>Show code snippet</source>
          <target state="translated">Показать фрагмент кода</target>
        </trans-unit>
        <trans-unit id="25a09eb6d4c1d491451c5f908a0fa3643fb4cd17" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.contains()&lt;/code&gt; method returns true if the DOM element provided by the second argument is a descendant of the DOM element provided by the first argument, whether it is a direct child or nested more deeply. Otherwise, it returns false. Only element nodes are supported; if the second argument is a text or comment node, &lt;code&gt;$.contains()&lt;/code&gt; will return false.</source>
          <target state="translated">Метод &lt;code&gt;$.contains()&lt;/code&gt; возвращает true, если элемент DOM, предоставленный вторым аргументом, является потомком элемента DOM, предоставленного первым аргументом, является ли он прямым потомком или вложен более глубоко. В противном случае возвращается false. Поддерживаются только узлы элементов; если второй аргумент является узлом текста или комментария, &lt;code&gt;$.contains()&lt;/code&gt; вернет false.</target>
        </trans-unit>
        <trans-unit id="d468d7904b06ac13ec3b9d3d59250bd1eaadcb2d" translate="yes" xml:space="preserve">
          <source>The ['length'] parameter is not needed or useful and the code will be a lot faster if you directly use &lt;code&gt;document.querySelector(selector)&lt;/code&gt; instead, because it returns the first element it matches or null if not found.</source>
          <target state="translated">Параметр ['length'] не нужен и не полезен, и код будет намного быстрее, если вместо этого вы будете напрямую использовать &lt;code&gt;document.querySelector(selector)&lt;/code&gt; , поскольку он возвращает первый соответствующий элемент или ноль, если не найден.</target>
        </trans-unit>
        <trans-unit id="a1616540a15ecaca15bb65b97b613da676efadc0" translate="yes" xml:space="preserve">
          <source>The current code that I have is this:</source>
          <target state="translated">Текущий код,который у меня есть:</target>
        </trans-unit>
        <trans-unit id="35ae8a285c093d5a6b7e9df2d6a3c25037e953a4" translate="yes" xml:space="preserve">
          <source>The fastest and most semantically self explaining way to check for existence is actually by using plain &lt;code&gt;JavaScript&lt;/code&gt;:</source>
          <target state="translated">Самый быстрый и наиболее семантически понятный способ проверки существования - это использование простого &lt;code&gt;JavaScript&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="da9bb3c7186056f293e557fd9098059f8e30999c" translate="yes" xml:space="preserve">
          <source>The reason all of the previous answers require the &lt;code&gt;.length&lt;/code&gt; parameter is that they are mostly using jquery's &lt;code&gt;$()&lt;/code&gt; selector which has querySelectorAll behind the curtains (or they are using it directly).  This method is rather slow because it needs to parse the entire DOM tree looking for &lt;strong&gt;all&lt;/strong&gt; matches to that selector and populating an array with them.</source>
          <target state="translated">Причина, по которой все предыдущие ответы требуют параметра &lt;code&gt;.length&lt;/code&gt; , заключается в том, что они в основном используют селектор jquery &lt;code&gt;$()&lt;/code&gt; , у которого querySelectorAll находится за занавесом (или они используют его напрямую). Этот метод довольно медленный, потому что ему нужно проанализировать все дерево DOM, найти &lt;strong&gt;все&lt;/strong&gt; совпадения с этим селектором и заполнить их массивом.</target>
        </trans-unit>
        <trans-unit id="bd6b5063f86bfb5c2634c6f6052bb3ea97b76571" translate="yes" xml:space="preserve">
          <source>There's no need for jQuery really. With plain JavaScript it's easier and semantically correct to check for:</source>
          <target state="translated">Нет необходимости в Джей Кьюри,правда.С простым JavaScript это проще и семантически правильнее проверить:</target>
        </trans-unit>
        <trans-unit id="77c257982afcfdc7c1258664833940b28411a704" translate="yes" xml:space="preserve">
          <source>This is in response to: &lt;a href=&quot;http://herdingcode.com/?p=36&quot;&gt;Herding Code podcast with Jeff Atwood&lt;/a&gt;</source>
          <target state="translated">Это в ответ на: &lt;a href=&quot;http://herdingcode.com/?p=36&quot;&gt;подкаст Herding Code с Джеффом Этвудом&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f1c6c94d5a1be2cdbd431df9d749af37fcaad99b" translate="yes" xml:space="preserve">
          <source>This plugin can be used in an &lt;code&gt;if&lt;/code&gt; statement like &lt;code&gt;if ($(ele).exist()) { /* DO WORK */ }&lt;/code&gt; or using a callback.</source>
          <target state="translated">Этот плагин можно использовать в операторе &lt;code&gt;if&lt;/code&gt; , например &lt;code&gt;if ($(ele).exist()) { /* DO WORK */ }&lt;/code&gt; или с помощью обратного вызова.</target>
        </trans-unit>
        <trans-unit id="52f26379092f2e1ba7457b89654a67fe2a86cbe1" translate="yes" xml:space="preserve">
          <source>This will check both length and type, Now you can check it this way:</source>
          <target state="translated">При этом будет проверяться как длина,так и тип,теперь вы можете проверить его таким образом:</target>
        </trans-unit>
        <trans-unit id="cf2317b8d8707bcffb90533f9d5734210f67456e" translate="yes" xml:space="preserve">
          <source>This works because each jQuery object also masquerades as an array, so we can use the array dereferencing operator to get the first item from the &lt;em&gt;array&lt;/em&gt;. It returns &lt;code&gt;undefined&lt;/code&gt; if there is no item at the specified index.</source>
          <target state="translated">Это работает, потому что каждый объект jQuery также маскируется как массив, поэтому мы можем использовать оператор разыменования массива, чтобы получить первый элемент из &lt;em&gt;массива&lt;/em&gt; . Возвращает &lt;code&gt;undefined&lt;/code&gt; если по указанному индексу нет элемента.</target>
        </trans-unit>
        <trans-unit id="201f177460224ad73737ff35d885f30138910484" translate="yes" xml:space="preserve">
          <source>This would be better:</source>
          <target state="translated">Так будет лучше:</target>
        </trans-unit>
        <trans-unit id="e6a567763ce7d6d4dc5bcc760439c508de62c0d9" translate="yes" xml:space="preserve">
          <source>Try testing for &lt;code&gt;DOM&lt;/code&gt; element</source>
          <target state="translated">Попробуйте протестировать элемент &lt;code&gt;DOM&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a87ca91762ace67fb8a20322ab0b28758e410071" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;https://api.jquery.com/length/&quot;&gt;.length&lt;/a&gt; property of the jQuery collection returned by your
  selector:</source>
          <target state="translated">Используйте свойство &lt;a href=&quot;https://api.jquery.com/length/&quot;&gt;.length&lt;/a&gt; коллекции jQuery, возвращаемой вашим селектором:</target>
        </trans-unit>
        <trans-unit id="2918cc8bc0c0a725b62a688a00c8342fe252dc11" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;document.documentElement&lt;/code&gt; as the first argument fulfills the semantics of the &lt;code&gt;exists&lt;/code&gt; method when we want to apply it solely to check the existence of an element in the current document.</source>
          <target state="translated">Использование &lt;code&gt;document.documentElement&lt;/code&gt; в качестве первого аргумента удовлетворяет семантике метода exist, когда мы хотим применить его исключительно для проверки существования элемента в текущем документе.</target>
        </trans-unit>
        <trans-unit id="ee33f374675522a91be7d6eacf2f658b43a6f135" translate="yes" xml:space="preserve">
          <source>Yes!</source>
          <target state="translated">Yes!</target>
        </trans-unit>
        <trans-unit id="b3cbb04a93ea0a79bad6f1960439dd18334069fe" translate="yes" xml:space="preserve">
          <source>You can check element is present or not using length in java script.
   If length is greater than zero then element is present if length is zero then
   element is not present</source>
          <target state="translated">Вы можете проверить наличие или отсутствие элемента,используя длину в java скрипте.Если длина больше нуля,то элемент присутствует,если длина равна нулю,то элемента нет.</target>
        </trans-unit>
        <trans-unit id="e3ff5ee11330ec14aba012f2e60059dd21eff504" translate="yes" xml:space="preserve">
          <source>You can save a few bytes by writing:</source>
          <target state="translated">Вы можете сохранить несколько байтов,написав:</target>
        </trans-unit>
        <trans-unit id="c5b799049d31606a4bf737328c6f8e5743e4e30d" translate="yes" xml:space="preserve">
          <source>You can use this:</source>
          <target state="translated">Ты можешь использовать это:</target>
        </trans-unit>
        <trans-unit id="28ce5baaf2a7e364a9e6393430ef2a639312b251" translate="yes" xml:space="preserve">
          <source>You can use:</source>
          <target state="translated">Ты можешь использовать:</target>
        </trans-unit>
        <trans-unit id="c480476ffd3bde220dc7e1a84098b57fbc6d9c09" translate="yes" xml:space="preserve">
          <source>You could also use the following. If there are no values in the jQuery object array then getting the first item in the array would return undefined.</source>
          <target state="translated">Вам также может пригодиться следующее.Если в массиве объектов jQuery нет значений,то получение первого элемента в массиве вернет неопределенное значение.</target>
        </trans-unit>
        <trans-unit id="7441cbe277117316f893d76b94521e13057322a1" translate="yes" xml:space="preserve">
          <source>You could use this:</source>
          <target state="translated">Тебе бы это пригодилось:</target>
        </trans-unit>
        <trans-unit id="18545f96300c6e7c4a1ac307b16f236fb93af59f" translate="yes" xml:space="preserve">
          <source>You don't have to check if it's greater than &lt;code&gt;0&lt;/code&gt; like &lt;code&gt;$(selector).length &amp;gt; 0&lt;/code&gt;, &lt;code&gt;$(selector).length&lt;/code&gt; it's enough and a elegant way to check the existence of elements. I don't think that is worth to write a function only for this, if you want to do more extra things, yes.</source>
          <target state="translated">Вам не нужно проверять, является ли оно больше &lt;code&gt;0&lt;/code&gt; , как &lt;code&gt;$(selector).length &amp;gt; 0&lt;/code&gt; , &lt;code&gt;$(selector).length&lt;/code&gt; это достаточно и элегантный способ проверить наличие элементов. Я не думаю, что стоит написать функцию только для этого, если вы хотите сделать больше лишних вещей, да.</target>
        </trans-unit>
        <trans-unit id="e5ef08c968e3729ff30fb266c436d8f12902aa4e" translate="yes" xml:space="preserve">
          <source>You don't need that &lt;code&gt;&amp;gt;0&lt;/code&gt; part.</source>
          <target state="translated">Вам не нужна эта &lt;code&gt;&amp;gt;0&lt;/code&gt; часть.</target>
        </trans-unit>
        <trans-unit id="30e11c4fd83394b248b6bdc162b4ba26f33da89a" translate="yes" xml:space="preserve">
          <source>You may specify one or two callbacks. The first one will fire if the element exists, the second one will fire if the element does &lt;em&gt;not&lt;/em&gt; exist. However, if you choose to pass only one function, it will only fire when the element exists. Thus, the chain will die if the selected element does &lt;em&gt;not&lt;/em&gt; exist. Of course, if it does exist, the first function will fire and the chain will continue.</source>
          <target state="translated">Вы можете указать один или два обратных вызова. Первый будет срабатывать, если элемент существует, второй будет срабатывать, если элемент &lt;em&gt;не&lt;/em&gt; существует. Однако, если вы решите передать только одну функцию, она будет срабатывать только тогда, когда элемент существует. Таким образом, цепь умрет, если выбранный элемент &lt;em&gt;не&lt;/em&gt; существует. Конечно, если она существует, первая функция сработает и цепочка продолжится.</target>
        </trans-unit>
        <trans-unit id="bff71c613c510c23eaca83f56580a486026d81db" translate="yes" xml:space="preserve">
          <source>and other version which supports callback when selector does not exist</source>
          <target state="translated">и другая версия,которая поддерживает обратный вызов,когда селектор не существует.</target>
        </trans-unit>
        <trans-unit id="5f64c6dac7f90118a331bbbc6df086986b8b9a68" translate="yes" xml:space="preserve">
          <source>jQuery is really cool, but don't let pure JavaScript fall into oblivion...</source>
          <target state="translated">jQuery-это действительно круто,но не дайте чистому JavaScript впасть в забвение...</target>
        </trans-unit>
        <trans-unit id="de873d4bf1ac12c3470094c9888a2e0eda22977a" translate="yes" xml:space="preserve">
          <source>jsFiddle</source>
          <target state="translated">jsFiddle</target>
        </trans-unit>
        <trans-unit id="75a59f9fa327efb10e2c0dde455e9ab6b4ca803c" translate="yes" xml:space="preserve">
          <source>querySelector uses a proper matching engine like $() (sizzle) in jQuery and uses more computing power but in 99% cases will do just fine. The second option is more explicit and tells the code exactly what to do. It's much faster according to jsperf &lt;a href=&quot;https://jsperf.com/getelementsbyclassname-vs-queryselectorall/25&quot;&gt;https://jsperf.com/getelementsbyclassname-vs-queryselectorall/25&lt;/a&gt;</source>
          <target state="translated">querySelector использует правильный механизм сопоставления, такой как $ () (sizzle) в jQuery, и использует больше вычислительной мощности, но в 99% случаев все будет в порядке. Второй вариант более явный и сообщает коду, что именно делать. Это намного быстрее, согласно jsperf &lt;a href=&quot;https://jsperf.com/getelementsbyclassname-vs-queryselectorall/25&quot;&gt;https://jsperf.com/getelementsbyclassname-vs-queryselectorall/25&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f108514ad53b76a0829c9ca8c111877203a2995a" translate="yes" xml:space="preserve">
          <source>this is very similar to all of the answers, but why not use the &lt;code&gt;!&lt;/code&gt; operator twice so you can get a boolean:</source>
          <target state="translated">это очень похоже на все ответы, но почему бы не использовать &lt;code&gt;!&lt;/code&gt; оператор дважды, чтобы вы могли получить логическое значение:</target>
        </trans-unit>
        <trans-unit id="b2ba144213117538614a736fbcbc46be39ec0a74" translate="yes" xml:space="preserve">
          <source>you would imply that chaining was possible when it is not.</source>
          <target state="translated">вы подразумеваете,что приковывание возможно,когда это не так.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
