<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/31044">
    <body>
      <group id="31044">
        <trans-unit id="be141f8a42560351d06c57f2013ba04b3aa4acb7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://api.jquery.com/jQuery.contains/&quot;&gt;jQuery.contains&lt;/a&gt; takes two DOM elements and checks whether the first one contains the second one.</source>
          <target state="translated">&lt;a href=&quot;http://api.jquery.com/jQuery.contains/&quot;&gt;jQuery.contains&lt;/a&gt; toma dos elementos DOM y comprueba si el primero contiene el segundo.</target>
        </trans-unit>
        <trans-unit id="253208cdb2739f610e1475e2e8bb36c50ee17f81" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://learn.jquery.com/using-jquery-core/faq/how-do-i-test-whether-an-element-exists/&quot;&gt;Checking for existence of an element&lt;/a&gt; is documented neatly in the official jQuery website itself!</source>
          <target state="translated">&lt;a href=&quot;https://learn.jquery.com/using-jquery-core/faq/how-do-i-test-whether-an-element-exists/&quot;&gt;&amp;iexcl;La comprobaci&amp;oacute;n de la existencia de un elemento&lt;/a&gt; se documenta perfectamente en el sitio web oficial de jQuery!</target>
        </trans-unit>
        <trans-unit id="15460a52022f912174fbd67441e18c7f42ea770c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$(&quot;selector&quot;&lt;/code&gt;) returns an object which has the &lt;code&gt;length&lt;/code&gt; property. If the selector finds any elements, they will be included in the object. So if you check its length you can see if any elements exist. In JavaScript &lt;code&gt;0 == false&lt;/code&gt;, so if you don't get &lt;code&gt;0&lt;/code&gt; your code will run.</source>
          <target state="translated">&lt;code&gt;$(&quot;selector&quot;&lt;/code&gt; ) devuelve un objeto que tiene la propiedad de &lt;code&gt;length&lt;/code&gt; . Si el selector encuentra alg&amp;uacute;n elemento, se incluir&amp;aacute; en el objeto. Entonces, si verifica su longitud, puede ver si existen elementos. En JavaScript &lt;code&gt;0 == false&lt;/code&gt; , por lo que si no obtiene &lt;code&gt;0&lt;/code&gt; se ejecutar&amp;aacute; su c&amp;oacute;digo.</target>
        </trans-unit>
        <trans-unit id="363f3fa2ec89e17be56878352706aeebeb10e9ca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Note&lt;/em&gt;&lt;/strong&gt;: The first argument must be a DOM element, not a jQuery object or plain JavaScript object.</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;Nota&lt;/em&gt;&lt;/strong&gt; : El primer argumento debe ser un elemento DOM, no un objeto jQuery o un objeto JavaScript simple.</target>
        </trans-unit>
        <trans-unit id="90f2c4bad014276e5d3dc2a1e554c18a38786ea4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;FINAL SOLUTION&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;SOLUCI&amp;Oacute;N FINAL&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cd064ce7707f60287475ad847261b94e14b223ab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NB:&lt;/strong&gt; Notice the lack of an '#' before the &lt;code&gt;element_id&lt;/code&gt; (since this is plain JS, not &lt;code&gt;jQuery&lt;/code&gt;).</source>
          <target state="translated">&lt;strong&gt;NB:&lt;/strong&gt; observe la falta de un '#' antes del &lt;code&gt;element_id&lt;/code&gt; (ya que esto es JS simple, no &lt;code&gt;jQuery&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="adb39f4a8cec0df89e2b475cd992eaa7d63aab84" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;little&lt;/strong&gt; more elegant, perhaps.</source>
          <target state="translated">Un &lt;strong&gt;poco&lt;/strong&gt; m&amp;aacute;s elegante, tal vez.</target>
        </trans-unit>
        <trans-unit id="c8b8b0ff7a35e9caa15a5ba208384ed1248887b7" translate="yes" xml:space="preserve">
          <source>Alternatively, &lt;a href=&quot;http://learn.jquery.com/using-jquery-core/faq/how-do-i-test-whether-an-element-exists/&quot;&gt;from the FAQ&lt;/a&gt;:</source>
          <target state="translated">Alternativamente, &lt;a href=&quot;http://learn.jquery.com/using-jquery-core/faq/how-do-i-test-whether-an-element-exists/&quot;&gt;de las preguntas frecuentes&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="680b4bec362e0e97999ad585a8a21f4a4aa21a3c" translate="yes" xml:space="preserve">
          <source>And it is better than the alternative of writing your own &lt;code&gt;jQuery&lt;/code&gt; function. That alternative is slower, for the reasons @snover stated. But it would also give other programmers the impression that the &lt;code&gt;exists()&lt;/code&gt; function is something inherent to jQuery. &lt;code&gt;JavaScript&lt;/code&gt; would/should be understood by others editing your code, without increased knowledge debt.</source>
          <target state="translated">Y es mejor que la alternativa de escribir su propia funci&amp;oacute;n &lt;code&gt;jQuery&lt;/code&gt; . Esa alternativa es m&amp;aacute;s lenta, por las razones que declar&amp;oacute; @snover. Pero tambi&amp;eacute;n les dar&amp;iacute;a a otros programadores la impresi&amp;oacute;n de que la funci&amp;oacute;n &lt;code&gt;exists()&lt;/code&gt; es algo inherente a jQuery. &lt;code&gt;JavaScript&lt;/code&gt; deber&amp;iacute;a / deber&amp;iacute;a ser entendido por otros editando su c&amp;oacute;digo, sin una mayor deuda de conocimiento.</target>
        </trans-unit>
        <trans-unit id="7ff35c2f7ca7c5422602c66d12ad5e6d5c0957ce" translate="yes" xml:space="preserve">
          <source>And now i can write code like this -</source>
          <target state="translated">Y ahora puedo escribir un código como este...</target>
        </trans-unit>
        <trans-unit id="1888c5589c987ce35f03566f176d96494dd3421f" translate="yes" xml:space="preserve">
          <source>Below, I've put together a snippet that compares &lt;code&gt;jQuery.exists()&lt;/code&gt; against the &lt;code&gt;$(sel)[0]&lt;/code&gt; and &lt;code&gt;$(sel).length&lt;/code&gt; approaches which both return &lt;code&gt;truthy&lt;/code&gt; values for &lt;code&gt;$(4)&lt;/code&gt; while &lt;code&gt;$(4).exists()&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;. In the context of &lt;strong&gt;checking for existence&lt;/strong&gt; of an element in the DOM this seems to be the &lt;strong&gt;desired result&lt;/strong&gt;.</source>
          <target state="translated">A continuaci&amp;oacute;n, he reunido un fragmento que compara &lt;code&gt;jQuery.exists()&lt;/code&gt; con los enfoques &lt;code&gt;$(sel)[0]&lt;/code&gt; y &lt;code&gt;$(sel).length&lt;/code&gt; que ambos devuelven valores &lt;code&gt;truthy&lt;/code&gt; para &lt;code&gt;$(4)&lt;/code&gt; mientras &lt;code&gt;$(4).exists()&lt;/code&gt; devuelve &lt;code&gt;false&lt;/code&gt; . En el contexto de &lt;strong&gt;verificar la existencia&lt;/strong&gt; de un elemento en el DOM, este parece ser el &lt;strong&gt;resultado deseado&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="614f7d8f91ec8a997545c3ffb6b56b85e36b1e31" translate="yes" xml:space="preserve">
          <source>Edit: &lt;strong&gt;WARNING!&lt;/strong&gt; This doesn't work in IE when &lt;code&gt;selector&lt;/code&gt; is a string.</source>
          <target state="translated">Editar: &lt;strong&gt;&amp;iexcl;ADVERTENCIA!&lt;/strong&gt; Esto no funciona en IE cuando el &lt;code&gt;selector&lt;/code&gt; es una cadena.</target>
        </trans-unit>
        <trans-unit id="cbfdfa363d5febf67bec9401327c62825e8c4aeb" translate="yes" xml:space="preserve">
          <source>Example Uses</source>
          <target state="translated">Ejemplos de uso</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="c08d85561b30a4293f197bb268373c96c96f5561" translate="yes" xml:space="preserve">
          <source>Execute the chain only if a jQuery element exist  - &lt;a href=&quot;http://jsfiddle.net/andres_314/vbNM3/2/&quot;&gt;http://jsfiddle.net/andres_314/vbNM3/2/&lt;/a&gt;</source>
          <target state="translated">Ejecute la cadena solo si existe un elemento jQuery: &lt;a href=&quot;http://jsfiddle.net/andres_314/vbNM3/2/&quot;&gt;http://jsfiddle.net/andres_314/vbNM3/2/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">Ampliar fragmento</target>
        </trans-unit>
        <trans-unit id="344f84627f5be0108f168722814ac89e634b1fc2" translate="yes" xml:space="preserve">
          <source>Here is my favorite &lt;code&gt;exist&lt;/code&gt; method in jQuery</source>
          <target state="translated">Aqu&amp;iacute; est&amp;aacute; mi m&amp;eacute;todo de &lt;code&gt;exist&lt;/code&gt; encia favorito en jQuery</target>
        </trans-unit>
        <trans-unit id="84ef2cc74f3e435f0bb06454c76f10422f6dd041" translate="yes" xml:space="preserve">
          <source>Here is the complete example of different situations and way to check if element exists using direct if on jQuery selector may or may not work because it returns array or elements.</source>
          <target state="translated">A continuación se presenta el ejemplo completo de diferentes situaciones y la forma de comprobar si un elemento existe utilizando el selector directo si en jQuery puede o no funcionar porque devuelve la matriz o los elementos.</target>
        </trans-unit>
        <trans-unit id="e75030adb468b3a20795417b746e352d74186766" translate="yes" xml:space="preserve">
          <source>How about:</source>
          <target state="translated">¿Qué tal si..:</target>
        </trans-unit>
        <trans-unit id="ee7880a0fc768ef10b1fd552a69a813d09fe35a3" translate="yes" xml:space="preserve">
          <source>How can I check the existence of an element in jQuery?</source>
          <target state="translated">¿Cómo puedo comprobar la existencia de un elemento en jQuery?</target>
        </trans-unit>
        <trans-unit id="c834c92215659d3c1ed8aa78f0c33a029dc48552" translate="yes" xml:space="preserve">
          <source>However this method leaves us with the actual object being returned; which is fine if it isn't going to be saved as variable and used repeatedly (thus keeping the reference around if we forget).</source>
          <target state="translated">Sin embargo,este método nos deja con el objeto real que se devuelve;lo cual está bien si no va a ser guardado como variable y usado repetidamente (manteniendo así la referencia si lo olvidamos).</target>
        </trans-unit>
        <trans-unit id="772eaee22a5f028e404f604d0d8204a4380daaac" translate="yes" xml:space="preserve">
          <source>I had a case where I wanted to see if an object exists inside of another so I added something to the first answer to check for a selector inside the selector..</source>
          <target state="translated">Tenía un caso en el que quería ver si un objeto existe dentro de otro,así que añadí algo a la primera respuesta para comprobar si hay un selector dentro del selector...</target>
        </trans-unit>
        <trans-unit id="23e7679d619274a1c050a6555167b90aa2259957" translate="yes" xml:space="preserve">
          <source>I have found &lt;code&gt;if ($(selector).length) {}&lt;/code&gt; to be insufficient. It will silently break your app when &lt;code&gt;selector&lt;/code&gt; is an empty object &lt;code&gt;{}&lt;/code&gt;.</source>
          <target state="translated">He encontrado &lt;code&gt;if ($(selector).length) {}&lt;/code&gt; es insuficiente. Silenciosamente interrumpir&amp;aacute; su aplicaci&amp;oacute;n cuando el &lt;code&gt;selector&lt;/code&gt; sea ​​un objeto vac&amp;iacute;o &lt;code&gt;{}&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b8cfad0044d460ee15f65d57d74661386d54ee9c" translate="yes" xml:space="preserve">
          <source>I just like to use plain vanilla javascript to do this.</source>
          <target state="translated">Me gusta usar javascript de vainilla para hacer esto.</target>
        </trans-unit>
        <trans-unit id="743ced2e69b7301f1883136d7ed6feeae12adcd4" translate="yes" xml:space="preserve">
          <source>I see most of the answers here are &lt;strong&gt;not accurate&lt;/strong&gt; as they should be, they check element length, it can be &lt;strong&gt;OK&lt;/strong&gt; in many cases, but &lt;strong&gt;not 100%&lt;/strong&gt;, imagine if number pass to the function instead, so I prototype a function which check all conditions and return the answer as it should be:</source>
          <target state="translated">Veo que la mayor&amp;iacute;a de las respuestas aqu&amp;iacute; &lt;strong&gt;no&lt;/strong&gt; son &lt;strong&gt;precisas&lt;/strong&gt; como deber&amp;iacute;an ser, comprueban la longitud del elemento, puede estar &lt;strong&gt;bien&lt;/strong&gt; en muchos casos, pero &lt;strong&gt;no al 100%&lt;/strong&gt; , imag&amp;iacute;nese si el n&amp;uacute;mero pasa a la funci&amp;oacute;n, as&amp;iacute; que prototipo de una funci&amp;oacute;n que verifica todo condiciones y devolver la respuesta como deber&amp;iacute;a ser:</target>
        </trans-unit>
        <trans-unit id="2aec2eec2e008faa93776b4e53f65ead7f768c65" translate="yes" xml:space="preserve">
          <source>I stumbled upon this question and i'd like to share a snippet of code i currently use:</source>
          <target state="translated">Me tropecé con esta pregunta y me gustaría compartir un fragmento del código que uso actualmente:</target>
        </trans-unit>
        <trans-unit id="7aafedd09b64bc92c115a85a5dc8d8daf8911943" translate="yes" xml:space="preserve">
          <source>I'm still looking for a better solution though as this one is a bit heavy.</source>
          <target state="translated">Sin embargo,sigo buscando una solución mejor,ya que ésta es un poco pesada.</target>
        </trans-unit>
        <trans-unit id="4aff9b68fdb743fcc4af055791e7099cada839c9" translate="yes" xml:space="preserve">
          <source>I'm using this:</source>
          <target state="translated">Estoy usando esto:</target>
        </trans-unit>
        <trans-unit id="cfdbd71bd1bdf3874f47be3d2f9bba7f7da1d542" translate="yes" xml:space="preserve">
          <source>If for any reason you don't want to put an id to the element, you can still use any other JavaScript method designed to access the DOM.</source>
          <target state="translated">Si por alguna razón no quieres ponerle una identificación al elemento,puedes usar cualquier otro método de JavaScript diseñado para acceder al DOM.</target>
        </trans-unit>
        <trans-unit id="7f21c59ea1e1f4e2747c773afe86e76c95a6cd69" translate="yes" xml:space="preserve">
          <source>If you don't actually need the element and want to get/store just a true/false, just double not it !!  It works for shoes that come untied, so why knot here?</source>
          <target state="translated">Si no necesitas el elemento y quieres comprar un falso,¡no lo hagas! Funciona para los zapatos que se desatan,así que ¿por qué hacer un nudo aquí?</target>
        </trans-unit>
        <trans-unit id="bdf305996aea41c30698f859a49459079c15daf9" translate="yes" xml:space="preserve">
          <source>If you used</source>
          <target state="translated">Si usted usó</target>
        </trans-unit>
        <trans-unit id="154feac1548385fac7cc0e787b9a77e02e537a24" translate="yes" xml:space="preserve">
          <source>In JavaScript, everything is 'truthy' or 'falsy', and for numbers &lt;code&gt;0&lt;/code&gt; (and NaN) means &lt;code&gt;false&lt;/code&gt;, everything else &lt;code&gt;true&lt;/code&gt;. So you could write:</source>
          <target state="translated">En JavaScript, todo es 'verdadero' o 'falso', y para los n&amp;uacute;meros &lt;code&gt;0&lt;/code&gt; (y NaN) significa &lt;code&gt;false&lt;/code&gt; , todo lo dem&amp;aacute;s es &lt;code&gt;true&lt;/code&gt; . Entonces podr&amp;iacute;as escribir:</target>
        </trans-unit>
        <trans-unit id="6ff17e14f64cb7cd29b7e49a91dbe03caa66d00d" translate="yes" xml:space="preserve">
          <source>In some cases this may be desired.  It can be used in a for loop like this:</source>
          <target state="translated">En algunos casos esto puede ser deseado.Se puede usar en un bucle como este:</target>
        </trans-unit>
        <trans-unit id="ef3cc795e01ffe8544bb322757ff3892b10b7cf0" translate="yes" xml:space="preserve">
          <source>Inspired by &lt;a href=&quot;https://stackoverflow.com/a/19533724/177710&quot;&gt;hiway's answer&lt;/a&gt; I came up with the following:</source>
          <target state="translated">Inspirado por &lt;a href=&quot;https://stackoverflow.com/a/19533724/177710&quot;&gt;la respuesta de Hiway, se&lt;/a&gt; me ocurri&amp;oacute; lo siguiente:</target>
        </trans-unit>
        <trans-unit id="8ad867bd6e09d6144016154307fc89aff81e21ac" translate="yes" xml:space="preserve">
          <source>Is &lt;a href=&quot;http://api.jquery.com/jQuery.contains/&quot;&gt;&lt;code&gt;$.contains()&lt;/code&gt;&lt;/a&gt; what you want?</source>
          <target state="translated">&amp;iquest;Es &lt;a href=&quot;http://api.jquery.com/jQuery.contains/&quot;&gt; &lt;code&gt;$.contains()&lt;/code&gt; &lt;/a&gt; lo que quieres?</target>
        </trans-unit>
        <trans-unit id="7670762e5368024d94ec800cbc48b6ff05f379d5" translate="yes" xml:space="preserve">
          <source>Is there a more elegant way to approach this? Perhaps a plugin or a function?</source>
          <target state="translated">¿Hay una forma más elegante de abordar esto? ¿Tal vez un plugin o una función?</target>
        </trans-unit>
        <trans-unit id="dbb40afe618fc71e22f0fa14353a861d9f0d56f7" translate="yes" xml:space="preserve">
          <source>Is there an “exists” function for jQuery</source>
          <target state="translated">¿Hay una función &quot;existe&quot; para jQuery</target>
        </trans-unit>
        <trans-unit id="cde248b0a1335dec914e6fc113d65b505d291f71" translate="yes" xml:space="preserve">
          <source>It is a bit longer to write than the jQuery length alternative, but executes faster since it is a native JS method.</source>
          <target state="translated">Es un poco más largo para escribir que la alternativa de longitud de jQuery,pero se ejecuta más rápido ya que es un método nativo de JS.</target>
        </trans-unit>
        <trans-unit id="4d0514a9277b4466c81ce0b5704dde4ca1afff02" translate="yes" xml:space="preserve">
          <source>It might seem a lot of code, but when written in CoffeeScript it is quite small:</source>
          <target state="translated">Puede parecer un montón de código,pero cuando se escribe en el CoffeeScript es bastante pequeño:</target>
        </trans-unit>
        <trans-unit id="d8f03b7b0e94e631429e819e9c4f257e02c76fb6" translate="yes" xml:space="preserve">
          <source>It's very minimal and saves you having to enclose the selector with &lt;code&gt;$()&lt;/code&gt; every time.</source>
          <target state="translated">Es muy m&amp;iacute;nimo y le ahorra tener que incluir el selector con &lt;code&gt;$()&lt;/code&gt; cada vez.</target>
        </trans-unit>
        <trans-unit id="7686a45a941b2348674f2a56597fa3056e1c75bb" translate="yes" xml:space="preserve">
          <source>Keep in mind that using the &lt;strong&gt;callback variant helps maintain chainability&lt;/strong&gt; &amp;ndash; the element is returned and you can continue chaining commands as with any other jQuery method!</source>
          <target state="translated">Tenga en cuenta que el uso de la &lt;strong&gt;variante de devoluci&amp;oacute;n de llamada ayuda a mantener la capacidad de encadenamiento&lt;/strong&gt; : el elemento se devuelve y puede continuar encadenando comandos como con cualquier otro m&amp;eacute;todo jQuery.</target>
        </trans-unit>
        <trans-unit id="f6cb336ffa2bb157f146e2dadef9cde9d4507919" translate="yes" xml:space="preserve">
          <source>Much more performant option below(notice lack of a dot before a-class).</source>
          <target state="translated">Opción mucho más performante abajo (note la falta de un punto antes de la clase a).</target>
        </trans-unit>
        <trans-unit id="d0f6ccf98cff584a5c8b827b8e8878b2ccc925c1" translate="yes" xml:space="preserve">
          <source>My only suggestion is to perform an additional check for &lt;code&gt;{}&lt;/code&gt;.</source>
          <target state="translated">Mi &amp;uacute;nica sugerencia es realizar una verificaci&amp;oacute;n adicional para &lt;code&gt;{}&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="57cbe7fe2124e87fd2bd9494aa89983ffc8f89b1" translate="yes" xml:space="preserve">
          <source>No need for jQuery (basic solution)</source>
          <target state="translated">No hay necesidad de jQuery (solución básica)</target>
        </trans-unit>
        <trans-unit id="c74dea4541d4eab744f05a03c0973705052f601c" translate="yes" xml:space="preserve">
          <source>Note that it isn't always necessary to test whether an element exists.
  The following code will show the element if it exists, and do nothing
  (with no errors) if it does not:</source>
          <target state="translated">Tenga en cuenta que no siempre es necesario probar si un elemento existe.El siguiente código mostrará el elemento si existe,y no hará nada (sin errores)si no existe:</target>
        </trans-unit>
        <trans-unit id="8dc208f8ebe86aa9ee6a37d49d48058be5364bff" translate="yes" xml:space="preserve">
          <source>Plugin</source>
          <target state="translated">Plugin</target>
        </trans-unit>
        <trans-unit id="4bcb4e163bf193fe874c35e7a1a754e4ed2bd51c" translate="yes" xml:space="preserve">
          <source>Show code snippet</source>
          <target state="translated">Mostrar fragmento de código</target>
        </trans-unit>
        <trans-unit id="25a09eb6d4c1d491451c5f908a0fa3643fb4cd17" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.contains()&lt;/code&gt; method returns true if the DOM element provided by the second argument is a descendant of the DOM element provided by the first argument, whether it is a direct child or nested more deeply. Otherwise, it returns false. Only element nodes are supported; if the second argument is a text or comment node, &lt;code&gt;$.contains()&lt;/code&gt; will return false.</source>
          <target state="translated">El &lt;code&gt;$.contains()&lt;/code&gt; devuelve verdadero si el elemento DOM proporcionado por el segundo argumento es un descendiente del elemento DOM proporcionado por el primer argumento, ya sea un hijo directo o anidado m&amp;aacute;s profundamente. De lo contrario, devuelve falso. Solo se admiten nodos de elementos; si el segundo argumento es un nodo de texto o comentario, &lt;code&gt;$.contains()&lt;/code&gt; devolver&amp;aacute; falso.</target>
        </trans-unit>
        <trans-unit id="d468d7904b06ac13ec3b9d3d59250bd1eaadcb2d" translate="yes" xml:space="preserve">
          <source>The ['length'] parameter is not needed or useful and the code will be a lot faster if you directly use &lt;code&gt;document.querySelector(selector)&lt;/code&gt; instead, because it returns the first element it matches or null if not found.</source>
          <target state="translated">El par&amp;aacute;metro ['length'] no es necesario o &amp;uacute;til y el c&amp;oacute;digo ser&amp;aacute; mucho m&amp;aacute;s r&amp;aacute;pido si usa directamente &lt;code&gt;document.querySelector(selector)&lt;/code&gt; , porque devuelve el primer elemento que coincide o es nulo si no se encuentra.</target>
        </trans-unit>
        <trans-unit id="a1616540a15ecaca15bb65b97b613da676efadc0" translate="yes" xml:space="preserve">
          <source>The current code that I have is this:</source>
          <target state="translated">El código actual que tengo es este:</target>
        </trans-unit>
        <trans-unit id="35ae8a285c093d5a6b7e9df2d6a3c25037e953a4" translate="yes" xml:space="preserve">
          <source>The fastest and most semantically self explaining way to check for existence is actually by using plain &lt;code&gt;JavaScript&lt;/code&gt;:</source>
          <target state="translated">La forma m&amp;aacute;s r&amp;aacute;pida y sem&amp;aacute;nticamente autoexplicativa de verificar la existencia es utilizando &lt;code&gt;JavaScript&lt;/code&gt; simple:</target>
        </trans-unit>
        <trans-unit id="da9bb3c7186056f293e557fd9098059f8e30999c" translate="yes" xml:space="preserve">
          <source>The reason all of the previous answers require the &lt;code&gt;.length&lt;/code&gt; parameter is that they are mostly using jquery's &lt;code&gt;$()&lt;/code&gt; selector which has querySelectorAll behind the curtains (or they are using it directly).  This method is rather slow because it needs to parse the entire DOM tree looking for &lt;strong&gt;all&lt;/strong&gt; matches to that selector and populating an array with them.</source>
          <target state="translated">La raz&amp;oacute;n por la cual todas las respuestas anteriores requieren el par&amp;aacute;metro &lt;code&gt;.length&lt;/code&gt; es que principalmente usan el selector &lt;code&gt;$()&lt;/code&gt; jquery que tiene querySelectorAll detr&amp;aacute;s de las cortinas (o lo est&amp;aacute;n usando directamente). Este m&amp;eacute;todo es bastante lento porque necesita analizar todo el &amp;aacute;rbol DOM buscando &lt;strong&gt;todas las&lt;/strong&gt; coincidencias con ese selector y rellenando una matriz con ellos.</target>
        </trans-unit>
        <trans-unit id="bd6b5063f86bfb5c2634c6f6052bb3ea97b76571" translate="yes" xml:space="preserve">
          <source>There's no need for jQuery really. With plain JavaScript it's easier and semantically correct to check for:</source>
          <target state="translated">No hay necesidad de jQuery en realidad.Con un simple JavaScript es más fácil y semánticamente correcto comprobarlo:</target>
        </trans-unit>
        <trans-unit id="77c257982afcfdc7c1258664833940b28411a704" translate="yes" xml:space="preserve">
          <source>This is in response to: &lt;a href=&quot;http://herdingcode.com/?p=36&quot;&gt;Herding Code podcast with Jeff Atwood&lt;/a&gt;</source>
          <target state="translated">Esto es en respuesta a: &lt;a href=&quot;http://herdingcode.com/?p=36&quot;&gt;Podcast de Herding Code con Jeff Atwood&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f1c6c94d5a1be2cdbd431df9d749af37fcaad99b" translate="yes" xml:space="preserve">
          <source>This plugin can be used in an &lt;code&gt;if&lt;/code&gt; statement like &lt;code&gt;if ($(ele).exist()) { /* DO WORK */ }&lt;/code&gt; or using a callback.</source>
          <target state="translated">Este complemento se puede usar en una declaraci&amp;oacute;n &lt;code&gt;if&lt;/code&gt; como &lt;code&gt;if ($(ele).exist()) { /* DO WORK */ }&lt;/code&gt; o usando una devoluci&amp;oacute;n de llamada.</target>
        </trans-unit>
        <trans-unit id="52f26379092f2e1ba7457b89654a67fe2a86cbe1" translate="yes" xml:space="preserve">
          <source>This will check both length and type, Now you can check it this way:</source>
          <target state="translated">Esto comprobará tanto la longitud como el tipo,Ahora puedes comprobarlo de esta manera:</target>
        </trans-unit>
        <trans-unit id="cf2317b8d8707bcffb90533f9d5734210f67456e" translate="yes" xml:space="preserve">
          <source>This works because each jQuery object also masquerades as an array, so we can use the array dereferencing operator to get the first item from the &lt;em&gt;array&lt;/em&gt;. It returns &lt;code&gt;undefined&lt;/code&gt; if there is no item at the specified index.</source>
          <target state="translated">Esto funciona porque cada objeto jQuery tambi&amp;eacute;n se disfraza como una matriz, por lo que podemos usar el operador de referencia de matriz para obtener el primer elemento de la &lt;em&gt;matriz&lt;/em&gt; . Devuelve &lt;code&gt;undefined&lt;/code&gt; si no hay ning&amp;uacute;n elemento en el &amp;iacute;ndice especificado.</target>
        </trans-unit>
        <trans-unit id="201f177460224ad73737ff35d885f30138910484" translate="yes" xml:space="preserve">
          <source>This would be better:</source>
          <target state="translated">Esto sería mejor:</target>
        </trans-unit>
        <trans-unit id="e6a567763ce7d6d4dc5bcc760439c508de62c0d9" translate="yes" xml:space="preserve">
          <source>Try testing for &lt;code&gt;DOM&lt;/code&gt; element</source>
          <target state="translated">Intenta probar el elemento &lt;code&gt;DOM&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a87ca91762ace67fb8a20322ab0b28758e410071" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;https://api.jquery.com/length/&quot;&gt;.length&lt;/a&gt; property of the jQuery collection returned by your
  selector:</source>
          <target state="translated">Utilice la propiedad &lt;a href=&quot;https://api.jquery.com/length/&quot;&gt;.length&lt;/a&gt; de la colecci&amp;oacute;n jQuery devuelta por su selector:</target>
        </trans-unit>
        <trans-unit id="2918cc8bc0c0a725b62a688a00c8342fe252dc11" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;document.documentElement&lt;/code&gt; as the first argument fulfills the semantics of the &lt;code&gt;exists&lt;/code&gt; method when we want to apply it solely to check the existence of an element in the current document.</source>
          <target state="translated">El uso de &lt;code&gt;document.documentElement&lt;/code&gt; como primer argumento cumple con la sem&amp;aacute;ntica del m&amp;eacute;todo &lt;code&gt;exists&lt;/code&gt; cuando queremos aplicarlo &amp;uacute;nicamente para verificar la existencia de un elemento en el documento actual.</target>
        </trans-unit>
        <trans-unit id="ee33f374675522a91be7d6eacf2f658b43a6f135" translate="yes" xml:space="preserve">
          <source>Yes!</source>
          <target state="translated">Yes!</target>
        </trans-unit>
        <trans-unit id="b3cbb04a93ea0a79bad6f1960439dd18334069fe" translate="yes" xml:space="preserve">
          <source>You can check element is present or not using length in java script.
   If length is greater than zero then element is present if length is zero then
   element is not present</source>
          <target state="translated">Puedes comprobar si el elemento está presente o no usando la longitud en el java script.Si la longitud es mayor que cero entonces el elemento está presente si la longitud es cero entonces el elemento no está presente</target>
        </trans-unit>
        <trans-unit id="e3ff5ee11330ec14aba012f2e60059dd21eff504" translate="yes" xml:space="preserve">
          <source>You can save a few bytes by writing:</source>
          <target state="translated">Puedes ahorrar unos pocos bytes escribiendo:</target>
        </trans-unit>
        <trans-unit id="c5b799049d31606a4bf737328c6f8e5743e4e30d" translate="yes" xml:space="preserve">
          <source>You can use this:</source>
          <target state="translated">Puedes usar esto:</target>
        </trans-unit>
        <trans-unit id="28ce5baaf2a7e364a9e6393430ef2a639312b251" translate="yes" xml:space="preserve">
          <source>You can use:</source>
          <target state="translated">Puedes usar:</target>
        </trans-unit>
        <trans-unit id="c480476ffd3bde220dc7e1a84098b57fbc6d9c09" translate="yes" xml:space="preserve">
          <source>You could also use the following. If there are no values in the jQuery object array then getting the first item in the array would return undefined.</source>
          <target state="translated">También podrías usar lo siguiente.Si no hay valores en la matriz de objetos jQuery,entonces obtener el primer elemento de la matriz devolvería indefinido.</target>
        </trans-unit>
        <trans-unit id="7441cbe277117316f893d76b94521e13057322a1" translate="yes" xml:space="preserve">
          <source>You could use this:</source>
          <target state="translated">Podrías usar esto:</target>
        </trans-unit>
        <trans-unit id="18545f96300c6e7c4a1ac307b16f236fb93af59f" translate="yes" xml:space="preserve">
          <source>You don't have to check if it's greater than &lt;code&gt;0&lt;/code&gt; like &lt;code&gt;$(selector).length &amp;gt; 0&lt;/code&gt;, &lt;code&gt;$(selector).length&lt;/code&gt; it's enough and a elegant way to check the existence of elements. I don't think that is worth to write a function only for this, if you want to do more extra things, yes.</source>
          <target state="translated">No tiene que verificar si es mayor que &lt;code&gt;0&lt;/code&gt; como &lt;code&gt;$(selector).length &amp;gt; 0&lt;/code&gt; , &lt;code&gt;$(selector).length&lt;/code&gt; es suficiente y una forma elegante de verificar la existencia de elementos. No creo que valga la pena escribir una funci&amp;oacute;n solo para esto, si quieres hacer m&amp;aacute;s cosas adicionales, s&amp;iacute;.</target>
        </trans-unit>
        <trans-unit id="e5ef08c968e3729ff30fb266c436d8f12902aa4e" translate="yes" xml:space="preserve">
          <source>You don't need that &lt;code&gt;&amp;gt;0&lt;/code&gt; part.</source>
          <target state="translated">No necesitas esa parte &lt;code&gt;&amp;gt;0&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="30e11c4fd83394b248b6bdc162b4ba26f33da89a" translate="yes" xml:space="preserve">
          <source>You may specify one or two callbacks. The first one will fire if the element exists, the second one will fire if the element does &lt;em&gt;not&lt;/em&gt; exist. However, if you choose to pass only one function, it will only fire when the element exists. Thus, the chain will die if the selected element does &lt;em&gt;not&lt;/em&gt; exist. Of course, if it does exist, the first function will fire and the chain will continue.</source>
          <target state="translated">Puede especificar una o dos devoluciones de llamada. El primero se disparar&amp;aacute; si el elemento existe, el segundo se disparar&amp;aacute; si el elemento &lt;em&gt;no&lt;/em&gt; existe. Sin embargo, si elige pasar solo una funci&amp;oacute;n, solo se activar&amp;aacute; cuando exista el elemento. Por lo tanto, la cadena morir&amp;aacute; si el elemento seleccionado &lt;em&gt;no&lt;/em&gt; existe. Por supuesto, si existe, la primera funci&amp;oacute;n se activar&amp;aacute; y la cadena continuar&amp;aacute;.</target>
        </trans-unit>
        <trans-unit id="bff71c613c510c23eaca83f56580a486026d81db" translate="yes" xml:space="preserve">
          <source>and other version which supports callback when selector does not exist</source>
          <target state="translated">y otra versión que soporta la devolución de llamada cuando el selector no existe</target>
        </trans-unit>
        <trans-unit id="5f64c6dac7f90118a331bbbc6df086986b8b9a68" translate="yes" xml:space="preserve">
          <source>jQuery is really cool, but don't let pure JavaScript fall into oblivion...</source>
          <target state="translated">jQuery es muy guay,pero no dejes que el puro Javascript caiga en el olvido...</target>
        </trans-unit>
        <trans-unit id="de873d4bf1ac12c3470094c9888a2e0eda22977a" translate="yes" xml:space="preserve">
          <source>jsFiddle</source>
          <target state="translated">jsFiddle</target>
        </trans-unit>
        <trans-unit id="75a59f9fa327efb10e2c0dde455e9ab6b4ca803c" translate="yes" xml:space="preserve">
          <source>querySelector uses a proper matching engine like $() (sizzle) in jQuery and uses more computing power but in 99% cases will do just fine. The second option is more explicit and tells the code exactly what to do. It's much faster according to jsperf &lt;a href=&quot;https://jsperf.com/getelementsbyclassname-vs-queryselectorall/25&quot;&gt;https://jsperf.com/getelementsbyclassname-vs-queryselectorall/25&lt;/a&gt;</source>
          <target state="translated">querySelector usa un motor de coincidencia adecuado como $ () (sizzle) en jQuery y usa m&amp;aacute;s potencia inform&amp;aacute;tica, pero en el 99% de los casos funcionar&amp;aacute; bien. La segunda opci&amp;oacute;n es m&amp;aacute;s expl&amp;iacute;cita y le dice al c&amp;oacute;digo exactamente qu&amp;eacute; hacer. Es mucho m&amp;aacute;s r&amp;aacute;pido de acuerdo con jsperf &lt;a href=&quot;https://jsperf.com/getelementsbyclassname-vs-queryselectorall/25&quot;&gt;https://jsperf.com/getelementsbyclassname-vs-queryselectorall/25&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f108514ad53b76a0829c9ca8c111877203a2995a" translate="yes" xml:space="preserve">
          <source>this is very similar to all of the answers, but why not use the &lt;code&gt;!&lt;/code&gt; operator twice so you can get a boolean:</source>
          <target state="translated">Esto es muy similar a todas las respuestas, pero &amp;iquest;por qu&amp;eacute; no usar el &lt;code&gt;!&lt;/code&gt; operador dos veces para que pueda obtener un booleano:</target>
        </trans-unit>
        <trans-unit id="b2ba144213117538614a736fbcbc46be39ec0a74" translate="yes" xml:space="preserve">
          <source>you would imply that chaining was possible when it is not.</source>
          <target state="translated">...implicaría que el encadenamiento es posible cuando no lo es.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
