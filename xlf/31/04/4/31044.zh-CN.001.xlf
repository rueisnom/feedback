<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/31044">
    <body>
      <group id="31044">
        <trans-unit id="be141f8a42560351d06c57f2013ba04b3aa4acb7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://api.jquery.com/jQuery.contains/&quot;&gt;jQuery.contains&lt;/a&gt; takes two DOM elements and checks whether the first one contains the second one.</source>
          <target state="translated">&lt;a href=&quot;http://api.jquery.com/jQuery.contains/&quot;&gt;jQuery.contains&lt;/a&gt;接受两个DOM元素，并检查第一个元素是否包含第二个DOM元素。</target>
        </trans-unit>
        <trans-unit id="253208cdb2739f610e1475e2e8bb36c50ee17f81" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://learn.jquery.com/using-jquery-core/faq/how-do-i-test-whether-an-element-exists/&quot;&gt;Checking for existence of an element&lt;/a&gt; is documented neatly in the official jQuery website itself!</source>
          <target state="translated">在jQuery官方网站本身中整齐地记录了&lt;a href=&quot;https://learn.jquery.com/using-jquery-core/faq/how-do-i-test-whether-an-element-exists/&quot;&gt;检查元素&lt;/a&gt;是否存在的信息！</target>
        </trans-unit>
        <trans-unit id="15460a52022f912174fbd67441e18c7f42ea770c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$(&quot;selector&quot;&lt;/code&gt;) returns an object which has the &lt;code&gt;length&lt;/code&gt; property. If the selector finds any elements, they will be included in the object. So if you check its length you can see if any elements exist. In JavaScript &lt;code&gt;0 == false&lt;/code&gt;, so if you don't get &lt;code&gt;0&lt;/code&gt; your code will run.</source>
          <target state="translated">&lt;code&gt;$(&quot;selector&quot;&lt;/code&gt; ）返回一个具有 &lt;code&gt;length&lt;/code&gt; 属性的对象。 如果选择器找到任何元素，则它们将包含在对象中。 因此，如果检查其长度，可以看到是否存在任何元素。 在JavaScript中 &lt;code&gt;0 == false&lt;/code&gt; ，因此如果您没有得到 &lt;code&gt;0&lt;/code&gt; ,则代码将运行。</target>
        </trans-unit>
        <trans-unit id="363f3fa2ec89e17be56878352706aeebeb10e9ca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Note&lt;/em&gt;&lt;/strong&gt;: The first argument must be a DOM element, not a jQuery object or plain JavaScript object.</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;注意&lt;/em&gt;&lt;/strong&gt; ：第一个参数必须是DOM元素，而不是jQuery对象或普通JavaScript对象。</target>
        </trans-unit>
        <trans-unit id="90f2c4bad014276e5d3dc2a1e554c18a38786ea4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;FINAL SOLUTION&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;最终解决方案&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cd064ce7707f60287475ad847261b94e14b223ab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NB:&lt;/strong&gt; Notice the lack of an '#' before the &lt;code&gt;element_id&lt;/code&gt; (since this is plain JS, not &lt;code&gt;jQuery&lt;/code&gt;).</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;请注意在 &lt;code&gt;element_id&lt;/code&gt; 之前没有'＃'（因为这是普通JS，而不是 &lt;code&gt;jQuery&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="adb39f4a8cec0df89e2b475cd992eaa7d63aab84" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;little&lt;/strong&gt; more elegant, perhaps.</source>
          <target state="translated">也许&lt;strong&gt;稍微&lt;/strong&gt;优雅&lt;strong&gt;一点&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="c8b8b0ff7a35e9caa15a5ba208384ed1248887b7" translate="yes" xml:space="preserve">
          <source>Alternatively, &lt;a href=&quot;http://learn.jquery.com/using-jquery-core/faq/how-do-i-test-whether-an-element-exists/&quot;&gt;from the FAQ&lt;/a&gt;:</source>
          <target state="translated">或者， &lt;a href=&quot;http://learn.jquery.com/using-jquery-core/faq/how-do-i-test-whether-an-element-exists/&quot;&gt;从FAQ中&lt;/a&gt; ：</target>
        </trans-unit>
        <trans-unit id="680b4bec362e0e97999ad585a8a21f4a4aa21a3c" translate="yes" xml:space="preserve">
          <source>And it is better than the alternative of writing your own &lt;code&gt;jQuery&lt;/code&gt; function. That alternative is slower, for the reasons @snover stated. But it would also give other programmers the impression that the &lt;code&gt;exists()&lt;/code&gt; function is something inherent to jQuery. &lt;code&gt;JavaScript&lt;/code&gt; would/should be understood by others editing your code, without increased knowledge debt.</source>
          <target state="translated">它比编写您自己的 &lt;code&gt;jQuery&lt;/code&gt; 函数的替代方法更好。 由于@snover指出的原因，该替代方法较慢。 但这也会给其他程序员一个印象，即 &lt;code&gt;exists()&lt;/code&gt; 函数是jQuery固有的东西。 其他人可以/应该理解 &lt;code&gt;JavaScript&lt;/code&gt; ，而不会增加您的知识负担。</target>
        </trans-unit>
        <trans-unit id="7ff35c2f7ca7c5422602c66d12ad5e6d5c0957ce" translate="yes" xml:space="preserve">
          <source>And now i can write code like this -</source>
          <target state="translated">现在我可以写这样的代码了</target>
        </trans-unit>
        <trans-unit id="1888c5589c987ce35f03566f176d96494dd3421f" translate="yes" xml:space="preserve">
          <source>Below, I've put together a snippet that compares &lt;code&gt;jQuery.exists()&lt;/code&gt; against the &lt;code&gt;$(sel)[0]&lt;/code&gt; and &lt;code&gt;$(sel).length&lt;/code&gt; approaches which both return &lt;code&gt;truthy&lt;/code&gt; values for &lt;code&gt;$(4)&lt;/code&gt; while &lt;code&gt;$(4).exists()&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;. In the context of &lt;strong&gt;checking for existence&lt;/strong&gt; of an element in the DOM this seems to be the &lt;strong&gt;desired result&lt;/strong&gt;.</source>
          <target state="translated">下面，我整理了一个片段，将 &lt;code&gt;jQuery.exists()&lt;/code&gt; 与 &lt;code&gt;$(sel)[0]&lt;/code&gt; 和 &lt;code&gt;$(sel).length&lt;/code&gt; 方法进行比较，它们都返回 &lt;code&gt;$(4)&lt;/code&gt; 的 &lt;code&gt;truthy&lt;/code&gt; 值，而 &lt;code&gt;$(4).exists()&lt;/code&gt; 返回 &lt;code&gt;false&lt;/code&gt; 。 在&lt;strong&gt;检查&lt;/strong&gt; DOM中元素&lt;strong&gt;是否存在&lt;/strong&gt;的情况下，这似乎是&lt;strong&gt;期望的结果&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="614f7d8f91ec8a997545c3ffb6b56b85e36b1e31" translate="yes" xml:space="preserve">
          <source>Edit: &lt;strong&gt;WARNING!&lt;/strong&gt; This doesn't work in IE when &lt;code&gt;selector&lt;/code&gt; is a string.</source>
          <target state="translated">编辑： &lt;strong&gt;警告！&lt;/strong&gt; 当 &lt;code&gt;selector&lt;/code&gt; 为字符串时，这在IE中不起作用。</target>
        </trans-unit>
        <trans-unit id="cbfdfa363d5febf67bec9401327c62825e8c4aeb" translate="yes" xml:space="preserve">
          <source>Example Uses</source>
          <target state="translated">使用示例</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="c08d85561b30a4293f197bb268373c96c96f5561" translate="yes" xml:space="preserve">
          <source>Execute the chain only if a jQuery element exist  - &lt;a href=&quot;http://jsfiddle.net/andres_314/vbNM3/2/&quot;&gt;http://jsfiddle.net/andres_314/vbNM3/2/&lt;/a&gt;</source>
          <target state="translated">仅当存在jQuery元素时才执行链-http: &lt;a href=&quot;http://jsfiddle.net/andres_314/vbNM3/2/&quot;&gt;//jsfiddle.net/andres_314/vbNM3/2/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">扩展片段</target>
        </trans-unit>
        <trans-unit id="344f84627f5be0108f168722814ac89e634b1fc2" translate="yes" xml:space="preserve">
          <source>Here is my favorite &lt;code&gt;exist&lt;/code&gt; method in jQuery</source>
          <target state="translated">这是我最喜欢的jQuery &lt;code&gt;exist&lt;/code&gt; 方法</target>
        </trans-unit>
        <trans-unit id="84ef2cc74f3e435f0bb06454c76f10422f6dd041" translate="yes" xml:space="preserve">
          <source>Here is the complete example of different situations and way to check if element exists using direct if on jQuery selector may or may not work because it returns array or elements.</source>
          <target state="translated">下面是一个完整的例子,在jQuery selector上使用直接的if检查元素是否存在的不同情况和方法,可能会因为返回数组或元素,也可能会因为返回数组或元素而无法工作。</target>
        </trans-unit>
        <trans-unit id="e75030adb468b3a20795417b746e352d74186766" translate="yes" xml:space="preserve">
          <source>How about:</source>
          <target state="translated">怎么样?</target>
        </trans-unit>
        <trans-unit id="ee7880a0fc768ef10b1fd552a69a813d09fe35a3" translate="yes" xml:space="preserve">
          <source>How can I check the existence of an element in jQuery?</source>
          <target state="translated">如何在jQuery中检查一个元素是否存在?</target>
        </trans-unit>
        <trans-unit id="c834c92215659d3c1ed8aa78f0c33a029dc48552" translate="yes" xml:space="preserve">
          <source>However this method leaves us with the actual object being returned; which is fine if it isn't going to be saved as variable and used repeatedly (thus keeping the reference around if we forget).</source>
          <target state="translated">然而,这种方法只留给我们实际返回的对象;如果不将其保存为变量并重复使用的话,这种方法是没有问题的(这样,如果我们忘记了,就会把引用保留在周围)。</target>
        </trans-unit>
        <trans-unit id="772eaee22a5f028e404f604d0d8204a4380daaac" translate="yes" xml:space="preserve">
          <source>I had a case where I wanted to see if an object exists inside of another so I added something to the first answer to check for a selector inside the selector..</source>
          <target state="translated">我有一个案例,我想看看一个对象是否存在于另一个对象的内部,所以我在第一个答案中添加了一些东西来检查选择器内部的选择器。</target>
        </trans-unit>
        <trans-unit id="23e7679d619274a1c050a6555167b90aa2259957" translate="yes" xml:space="preserve">
          <source>I have found &lt;code&gt;if ($(selector).length) {}&lt;/code&gt; to be insufficient. It will silently break your app when &lt;code&gt;selector&lt;/code&gt; is an empty object &lt;code&gt;{}&lt;/code&gt;.</source>
          <target state="translated">我发现 &lt;code&gt;if ($(selector).length) {}&lt;/code&gt; 是否不足。 当 &lt;code&gt;selector&lt;/code&gt; 为空对象 &lt;code&gt;{}&lt;/code&gt; 时，它将以无提示方式破坏您的应用程序。</target>
        </trans-unit>
        <trans-unit id="b8cfad0044d460ee15f65d57d74661386d54ee9c" translate="yes" xml:space="preserve">
          <source>I just like to use plain vanilla javascript to do this.</source>
          <target state="translated">我只是喜欢用普通的javascript来做这个事情。</target>
        </trans-unit>
        <trans-unit id="743ced2e69b7301f1883136d7ed6feeae12adcd4" translate="yes" xml:space="preserve">
          <source>I see most of the answers here are &lt;strong&gt;not accurate&lt;/strong&gt; as they should be, they check element length, it can be &lt;strong&gt;OK&lt;/strong&gt; in many cases, but &lt;strong&gt;not 100%&lt;/strong&gt;, imagine if number pass to the function instead, so I prototype a function which check all conditions and return the answer as it should be:</source>
          <target state="translated">我看到这里的大多数答案&lt;strong&gt;都不&lt;/strong&gt;应该是正确的，它们检查元素的长度，在很多情况下都可以，但是&lt;strong&gt;不是100％&lt;/strong&gt; ，请设想是否将数字传递给该函数，所以我将原型设计为检查所有条件并返回答案应为：</target>
        </trans-unit>
        <trans-unit id="2aec2eec2e008faa93776b4e53f65ead7f768c65" translate="yes" xml:space="preserve">
          <source>I stumbled upon this question and i'd like to share a snippet of code i currently use:</source>
          <target state="translated">我偶然发现了这个问题,我想分享一段我目前使用的代码。</target>
        </trans-unit>
        <trans-unit id="7aafedd09b64bc92c115a85a5dc8d8daf8911943" translate="yes" xml:space="preserve">
          <source>I'm still looking for a better solution though as this one is a bit heavy.</source>
          <target state="translated">不过我还是想找一个更好的解决方案,因为这个有点重。</target>
        </trans-unit>
        <trans-unit id="4aff9b68fdb743fcc4af055791e7099cada839c9" translate="yes" xml:space="preserve">
          <source>I'm using this:</source>
          <target state="translated">我在用这个。</target>
        </trans-unit>
        <trans-unit id="cfdbd71bd1bdf3874f47be3d2f9bba7f7da1d542" translate="yes" xml:space="preserve">
          <source>If for any reason you don't want to put an id to the element, you can still use any other JavaScript method designed to access the DOM.</source>
          <target state="translated">如果由于任何原因,你不想给元素加上一个id,你仍然可以使用任何其他JavaScript方法来访问DOM。</target>
        </trans-unit>
        <trans-unit id="7f21c59ea1e1f4e2747c773afe86e76c95a6cd69" translate="yes" xml:space="preserve">
          <source>If you don't actually need the element and want to get/store just a true/false, just double not it !!  It works for shoes that come untied, so why knot here?</source>
          <target state="translated">如果你实际上不需要的元素,并希望得到store只是一个truefalse,只是双倍不要它! 它的工作原理是解绑的鞋,所以为什么在这里打结?</target>
        </trans-unit>
        <trans-unit id="bdf305996aea41c30698f859a49459079c15daf9" translate="yes" xml:space="preserve">
          <source>If you used</source>
          <target state="translated">如果你用的是</target>
        </trans-unit>
        <trans-unit id="154feac1548385fac7cc0e787b9a77e02e537a24" translate="yes" xml:space="preserve">
          <source>In JavaScript, everything is 'truthy' or 'falsy', and for numbers &lt;code&gt;0&lt;/code&gt; (and NaN) means &lt;code&gt;false&lt;/code&gt;, everything else &lt;code&gt;true&lt;/code&gt;. So you could write:</source>
          <target state="translated">在JavaScript中，一切都是&amp;ldquo;真实的&amp;rdquo;或&amp;ldquo;虚假的&amp;rdquo;，对于数字 &lt;code&gt;0&lt;/code&gt; （和NaN）表示 &lt;code&gt;false&lt;/code&gt; ，其他均为 &lt;code&gt;true&lt;/code&gt; 。 所以你可以这样写：</target>
        </trans-unit>
        <trans-unit id="6ff17e14f64cb7cd29b7e49a91dbe03caa66d00d" translate="yes" xml:space="preserve">
          <source>In some cases this may be desired.  It can be used in a for loop like this:</source>
          <target state="translated">在某些情况下,这可能是需要的。它可以用在像这样的for循环中。</target>
        </trans-unit>
        <trans-unit id="ef3cc795e01ffe8544bb322757ff3892b10b7cf0" translate="yes" xml:space="preserve">
          <source>Inspired by &lt;a href=&quot;https://stackoverflow.com/a/19533724/177710&quot;&gt;hiway's answer&lt;/a&gt; I came up with the following:</source>
          <target state="translated">受&lt;a href=&quot;https://stackoverflow.com/a/19533724/177710&quot;&gt;hiway的答案&lt;/a&gt;启发，我想到了以下内容：</target>
        </trans-unit>
        <trans-unit id="8ad867bd6e09d6144016154307fc89aff81e21ac" translate="yes" xml:space="preserve">
          <source>Is &lt;a href=&quot;http://api.jquery.com/jQuery.contains/&quot;&gt;&lt;code&gt;$.contains()&lt;/code&gt;&lt;/a&gt; what you want?</source>
          <target state="translated">您想要&lt;a href=&quot;http://api.jquery.com/jQuery.contains/&quot;&gt; &lt;code&gt;$.contains()&lt;/code&gt; &lt;/a&gt;吗？</target>
        </trans-unit>
        <trans-unit id="7670762e5368024d94ec800cbc48b6ff05f379d5" translate="yes" xml:space="preserve">
          <source>Is there a more elegant way to approach this? Perhaps a plugin or a function?</source>
          <target state="translated">是否有更优雅的方法来解决这个问题?也许是一个插件或一个函数?</target>
        </trans-unit>
        <trans-unit id="dbb40afe618fc71e22f0fa14353a861d9f0d56f7" translate="yes" xml:space="preserve">
          <source>Is there an “exists” function for jQuery</source>
          <target state="translated">是否有一个jQuery的 &quot;存在 &quot;函数</target>
        </trans-unit>
        <trans-unit id="cde248b0a1335dec914e6fc113d65b505d291f71" translate="yes" xml:space="preserve">
          <source>It is a bit longer to write than the jQuery length alternative, but executes faster since it is a native JS method.</source>
          <target state="translated">它比jQuery长度的替代方法要长一点,但执行起来更快,因为它是一个原生的JS方法。</target>
        </trans-unit>
        <trans-unit id="4d0514a9277b4466c81ce0b5704dde4ca1afff02" translate="yes" xml:space="preserve">
          <source>It might seem a lot of code, but when written in CoffeeScript it is quite small:</source>
          <target state="translated">这看起来可能会有很多代码,但当用CoffeeScript编写时,它是相当小的。</target>
        </trans-unit>
        <trans-unit id="d8f03b7b0e94e631429e819e9c4f257e02c76fb6" translate="yes" xml:space="preserve">
          <source>It's very minimal and saves you having to enclose the selector with &lt;code&gt;$()&lt;/code&gt; every time.</source>
          <target state="translated">它非常小，省去了每次都要用 &lt;code&gt;$()&lt;/code&gt; 括住选择器的麻烦。</target>
        </trans-unit>
        <trans-unit id="7686a45a941b2348674f2a56597fa3056e1c75bb" translate="yes" xml:space="preserve">
          <source>Keep in mind that using the &lt;strong&gt;callback variant helps maintain chainability&lt;/strong&gt; &amp;ndash; the element is returned and you can continue chaining commands as with any other jQuery method!</source>
          <target state="translated">请记住，使用&lt;strong&gt;回调变体有助于保持可链接性&lt;/strong&gt; -返回该元素，您可以像其他任何jQuery方法一样继续链接命令！</target>
        </trans-unit>
        <trans-unit id="f6cb336ffa2bb157f146e2dadef9cde9d4507919" translate="yes" xml:space="preserve">
          <source>Much more performant option below(notice lack of a dot before a-class).</source>
          <target state="translated">下面的选项更有表现力(注意a类前没有点)。</target>
        </trans-unit>
        <trans-unit id="d0f6ccf98cff584a5c8b827b8e8878b2ccc925c1" translate="yes" xml:space="preserve">
          <source>My only suggestion is to perform an additional check for &lt;code&gt;{}&lt;/code&gt;.</source>
          <target state="translated">我唯一的建议是对 &lt;code&gt;{}&lt;/code&gt; 进行附加检查。</target>
        </trans-unit>
        <trans-unit id="57cbe7fe2124e87fd2bd9494aa89983ffc8f89b1" translate="yes" xml:space="preserve">
          <source>No need for jQuery (basic solution)</source>
          <target state="translated">不需要jQuery(基本解决方案</target>
        </trans-unit>
        <trans-unit id="c74dea4541d4eab744f05a03c0973705052f601c" translate="yes" xml:space="preserve">
          <source>Note that it isn't always necessary to test whether an element exists.
  The following code will show the element if it exists, and do nothing
  (with no errors) if it does not:</source>
          <target state="translated">注意,不一定要测试一个元素是否存在。下面的代码将在元素存在的情况下显示该元素,如果不存在,则不做任何操作(没有错误)。</target>
        </trans-unit>
        <trans-unit id="8dc208f8ebe86aa9ee6a37d49d48058be5364bff" translate="yes" xml:space="preserve">
          <source>Plugin</source>
          <target state="translated">Plugin</target>
        </trans-unit>
        <trans-unit id="4bcb4e163bf193fe874c35e7a1a754e4ed2bd51c" translate="yes" xml:space="preserve">
          <source>Show code snippet</source>
          <target state="translated">显示代码片段</target>
        </trans-unit>
        <trans-unit id="25a09eb6d4c1d491451c5f908a0fa3643fb4cd17" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.contains()&lt;/code&gt; method returns true if the DOM element provided by the second argument is a descendant of the DOM element provided by the first argument, whether it is a direct child or nested more deeply. Otherwise, it returns false. Only element nodes are supported; if the second argument is a text or comment node, &lt;code&gt;$.contains()&lt;/code&gt; will return false.</source>
          <target state="translated">如果第二个参数提供的DOM元素是第一个参数提供的DOM元素的后代（无论是直接子元素还是嵌套得更深 &lt;code&gt;$.contains()&lt;/code&gt; ，则$ .contains（）方法将返回true。 否则，它返回false。 仅支持元素节点。 如果第二个参数是文本或注释节点，则 &lt;code&gt;$.contains()&lt;/code&gt; 将返回false。</target>
        </trans-unit>
        <trans-unit id="d468d7904b06ac13ec3b9d3d59250bd1eaadcb2d" translate="yes" xml:space="preserve">
          <source>The ['length'] parameter is not needed or useful and the code will be a lot faster if you directly use &lt;code&gt;document.querySelector(selector)&lt;/code&gt; instead, because it returns the first element it matches or null if not found.</source>
          <target state="translated">['length']参数不是必需的，也不有用，如果直接使用 &lt;code&gt;document.querySelector(selector)&lt;/code&gt; ，则代码会快很多，因为它返回匹配的第一个元素；如果找不到，则返回null。</target>
        </trans-unit>
        <trans-unit id="a1616540a15ecaca15bb65b97b613da676efadc0" translate="yes" xml:space="preserve">
          <source>The current code that I have is this:</source>
          <target state="translated">我现在的代码是这样的。</target>
        </trans-unit>
        <trans-unit id="35ae8a285c093d5a6b7e9df2d6a3c25037e953a4" translate="yes" xml:space="preserve">
          <source>The fastest and most semantically self explaining way to check for existence is actually by using plain &lt;code&gt;JavaScript&lt;/code&gt;:</source>
          <target state="translated">检查存在性的最快，最语义上的自我解释方法实际上是使用纯 &lt;code&gt;JavaScript&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="da9bb3c7186056f293e557fd9098059f8e30999c" translate="yes" xml:space="preserve">
          <source>The reason all of the previous answers require the &lt;code&gt;.length&lt;/code&gt; parameter is that they are mostly using jquery's &lt;code&gt;$()&lt;/code&gt; selector which has querySelectorAll behind the curtains (or they are using it directly).  This method is rather slow because it needs to parse the entire DOM tree looking for &lt;strong&gt;all&lt;/strong&gt; matches to that selector and populating an array with them.</source>
          <target state="translated">前面所有答案都需要 &lt;code&gt;.length&lt;/code&gt; 参数的原因是，它们大多使用jquery的 &lt;code&gt;$()&lt;/code&gt; 选择器，该选择器在幕后有querySelectorAll（或者直接使用它）。 此方法相当慢，因为它需要解析整个DOM树，以查找与该选择器的&lt;strong&gt;所有&lt;/strong&gt;匹配项，并使用它们填充数组。</target>
        </trans-unit>
        <trans-unit id="bd6b5063f86bfb5c2634c6f6052bb3ea97b76571" translate="yes" xml:space="preserve">
          <source>There's no need for jQuery really. With plain JavaScript it's easier and semantically correct to check for:</source>
          <target state="translated">真的没有必要用jQuery。使用普通的JavaScript,检查起来更容易,语义上也更正确。</target>
        </trans-unit>
        <trans-unit id="77c257982afcfdc7c1258664833940b28411a704" translate="yes" xml:space="preserve">
          <source>This is in response to: &lt;a href=&quot;http://herdingcode.com/?p=36&quot;&gt;Herding Code podcast with Jeff Atwood&lt;/a&gt;</source>
          <target state="translated">这是为了响应： &lt;a href=&quot;http://herdingcode.com/?p=36&quot;&gt;与Jeff Atwood一起&lt;/a&gt;进行的&amp;ldquo; 牧群代码&amp;rdquo;播客</target>
        </trans-unit>
        <trans-unit id="f1c6c94d5a1be2cdbd431df9d749af37fcaad99b" translate="yes" xml:space="preserve">
          <source>This plugin can be used in an &lt;code&gt;if&lt;/code&gt; statement like &lt;code&gt;if ($(ele).exist()) { /* DO WORK */ }&lt;/code&gt; or using a callback.</source>
          <target state="translated">此插件可以在 &lt;code&gt;if&lt;/code&gt; 语句中使用，例如 &lt;code&gt;if ($(ele).exist()) { /* DO WORK */ }&lt;/code&gt; 或使用回调。</target>
        </trans-unit>
        <trans-unit id="52f26379092f2e1ba7457b89654a67fe2a86cbe1" translate="yes" xml:space="preserve">
          <source>This will check both length and type, Now you can check it this way:</source>
          <target state="translated">这将同时检查长度和类型,现在你可以这样检查。</target>
        </trans-unit>
        <trans-unit id="cf2317b8d8707bcffb90533f9d5734210f67456e" translate="yes" xml:space="preserve">
          <source>This works because each jQuery object also masquerades as an array, so we can use the array dereferencing operator to get the first item from the &lt;em&gt;array&lt;/em&gt;. It returns &lt;code&gt;undefined&lt;/code&gt; if there is no item at the specified index.</source>
          <target state="translated">之所以可行，是因为每个jQuery对象也都伪装成一个数组，因此我们可以使用数组解引用运算符从&lt;em&gt;array中&lt;/em&gt;获取第一项。 如果指定索引处没有任何项目，则返回 &lt;code&gt;undefined&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="201f177460224ad73737ff35d885f30138910484" translate="yes" xml:space="preserve">
          <source>This would be better:</source>
          <target state="translated">这样会更好。</target>
        </trans-unit>
        <trans-unit id="e6a567763ce7d6d4dc5bcc760439c508de62c0d9" translate="yes" xml:space="preserve">
          <source>Try testing for &lt;code&gt;DOM&lt;/code&gt; element</source>
          <target state="translated">尝试测试 &lt;code&gt;DOM&lt;/code&gt; 元素</target>
        </trans-unit>
        <trans-unit id="a87ca91762ace67fb8a20322ab0b28758e410071" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;https://api.jquery.com/length/&quot;&gt;.length&lt;/a&gt; property of the jQuery collection returned by your
  selector:</source>
          <target state="translated">使用选择器返回的jQuery集合的&lt;a href=&quot;https://api.jquery.com/length/&quot;&gt;.length&lt;/a&gt;属性：</target>
        </trans-unit>
        <trans-unit id="2918cc8bc0c0a725b62a688a00c8342fe252dc11" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;document.documentElement&lt;/code&gt; as the first argument fulfills the semantics of the &lt;code&gt;exists&lt;/code&gt; method when we want to apply it solely to check the existence of an element in the current document.</source>
          <target state="translated">当我们只想将其应用于检查当前文档中某个元素的存在时，使用 &lt;code&gt;document.documentElement&lt;/code&gt; 作为第一个参数即可满足exist方法的语义。</target>
        </trans-unit>
        <trans-unit id="ee33f374675522a91be7d6eacf2f658b43a6f135" translate="yes" xml:space="preserve">
          <source>Yes!</source>
          <target state="translated">Yes!</target>
        </trans-unit>
        <trans-unit id="b3cbb04a93ea0a79bad6f1960439dd18334069fe" translate="yes" xml:space="preserve">
          <source>You can check element is present or not using length in java script.
   If length is greater than zero then element is present if length is zero then
   element is not present</source>
          <target state="translated">你可以在java脚本中使用length检查元素是否存在。如果长度大于零,则表示元素存在,如果长度为零,则表示元素不存在。</target>
        </trans-unit>
        <trans-unit id="e3ff5ee11330ec14aba012f2e60059dd21eff504" translate="yes" xml:space="preserve">
          <source>You can save a few bytes by writing:</source>
          <target state="translated">你可以通过写作来节省几个字节。</target>
        </trans-unit>
        <trans-unit id="c5b799049d31606a4bf737328c6f8e5743e4e30d" translate="yes" xml:space="preserve">
          <source>You can use this:</source>
          <target state="translated">你可以使用这个。</target>
        </trans-unit>
        <trans-unit id="28ce5baaf2a7e364a9e6393430ef2a639312b251" translate="yes" xml:space="preserve">
          <source>You can use:</source>
          <target state="translated">你可以使用。</target>
        </trans-unit>
        <trans-unit id="c480476ffd3bde220dc7e1a84098b57fbc6d9c09" translate="yes" xml:space="preserve">
          <source>You could also use the following. If there are no values in the jQuery object array then getting the first item in the array would return undefined.</source>
          <target state="translated">你也可以使用下面的方法。如果jQuery对象数组中没有值,那么获取数组中的第一个项目将返回未定义的值。</target>
        </trans-unit>
        <trans-unit id="7441cbe277117316f893d76b94521e13057322a1" translate="yes" xml:space="preserve">
          <source>You could use this:</source>
          <target state="translated">你可以用这个。</target>
        </trans-unit>
        <trans-unit id="18545f96300c6e7c4a1ac307b16f236fb93af59f" translate="yes" xml:space="preserve">
          <source>You don't have to check if it's greater than &lt;code&gt;0&lt;/code&gt; like &lt;code&gt;$(selector).length &amp;gt; 0&lt;/code&gt;, &lt;code&gt;$(selector).length&lt;/code&gt; it's enough and a elegant way to check the existence of elements. I don't think that is worth to write a function only for this, if you want to do more extra things, yes.</source>
          <target state="translated">您不必像 &lt;code&gt;$(selector).length &amp;gt; 0&lt;/code&gt; ， &lt;code&gt;$(selector).length&lt;/code&gt; 一样检查它是否大于0 ，这已经足够了，并且是一种检查元素是否存在的优雅方法。 我不认为仅为此编写函数是不值得的，如果您想做更多的事情，是的。</target>
        </trans-unit>
        <trans-unit id="e5ef08c968e3729ff30fb266c436d8f12902aa4e" translate="yes" xml:space="preserve">
          <source>You don't need that &lt;code&gt;&amp;gt;0&lt;/code&gt; part.</source>
          <target state="translated">您不需要 &lt;code&gt;&amp;gt;0&lt;/code&gt; 部分。</target>
        </trans-unit>
        <trans-unit id="30e11c4fd83394b248b6bdc162b4ba26f33da89a" translate="yes" xml:space="preserve">
          <source>You may specify one or two callbacks. The first one will fire if the element exists, the second one will fire if the element does &lt;em&gt;not&lt;/em&gt; exist. However, if you choose to pass only one function, it will only fire when the element exists. Thus, the chain will die if the selected element does &lt;em&gt;not&lt;/em&gt; exist. Of course, if it does exist, the first function will fire and the chain will continue.</source>
          <target state="translated">您可以指定一个或两个回调。 如果元素存在，则第一个触发，如果元素不存在，则第二个触发。 但是，如果您选择仅传递一个函数，则仅在元素存在时才会触发。 因此，如果所选元素不存在，链将消失。 当然，如果确实存在，则将触发第一个功能，并且链将继续。</target>
        </trans-unit>
        <trans-unit id="bff71c613c510c23eaca83f56580a486026d81db" translate="yes" xml:space="preserve">
          <source>and other version which supports callback when selector does not exist</source>
          <target state="translated">和其他支持选择器不存在时回调的版本。</target>
        </trans-unit>
        <trans-unit id="5f64c6dac7f90118a331bbbc6df086986b8b9a68" translate="yes" xml:space="preserve">
          <source>jQuery is really cool, but don't let pure JavaScript fall into oblivion...</source>
          <target state="translated">jQuery真的很酷,但不要让纯JavaScript被遗忘......</target>
        </trans-unit>
        <trans-unit id="de873d4bf1ac12c3470094c9888a2e0eda22977a" translate="yes" xml:space="preserve">
          <source>jsFiddle</source>
          <target state="translated">jsFiddle</target>
        </trans-unit>
        <trans-unit id="75a59f9fa327efb10e2c0dde455e9ab6b4ca803c" translate="yes" xml:space="preserve">
          <source>querySelector uses a proper matching engine like $() (sizzle) in jQuery and uses more computing power but in 99% cases will do just fine. The second option is more explicit and tells the code exactly what to do. It's much faster according to jsperf &lt;a href=&quot;https://jsperf.com/getelementsbyclassname-vs-queryselectorall/25&quot;&gt;https://jsperf.com/getelementsbyclassname-vs-queryselectorall/25&lt;/a&gt;</source>
          <target state="translated">querySelector在jQuery中使用适当的匹配引擎，例如$（）（嘶嘶声），并使用更多的计算能力，但在99％的情况下就可以了。 第二个选项更加明确，并告诉代码确切的操作。 根据jsperf &lt;a href=&quot;https://jsperf.com/getelementsbyclassname-vs-queryselectorall/25&quot;&gt;https://jsperf.com/getelementsbyclassname-vs-queryselectorall/25的描述，&lt;/a&gt;它要快得多</target>
        </trans-unit>
        <trans-unit id="f108514ad53b76a0829c9ca8c111877203a2995a" translate="yes" xml:space="preserve">
          <source>this is very similar to all of the answers, but why not use the &lt;code&gt;!&lt;/code&gt; operator twice so you can get a boolean:</source>
          <target state="translated">这与所有答案都非常相似，但是为什么不使用 &lt;code&gt;!&lt;/code&gt; 运算符两次，因此您可以获取布尔值：</target>
        </trans-unit>
        <trans-unit id="b2ba144213117538614a736fbcbc46be39ec0a74" translate="yes" xml:space="preserve">
          <source>you would imply that chaining was possible when it is not.</source>
          <target state="translated">你会暗示,链子是可能的,当它不是。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
