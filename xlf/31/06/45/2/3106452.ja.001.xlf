<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/3106452">
    <body>
      <group id="3106452">
        <trans-unit id="ba1101c8ab0d885bc53afe10070029b088b582d5" translate="yes" xml:space="preserve">
          <source>1) Serializing requests (queuing) to a single instance - this is similar to a servlet NOT implementing SingleThreadModel BUT synchronizing the service/ doXXX methods; OR</source>
          <target state="translated">1)リクエスト (キューイング)を単一のインスタンスにシリアライズする-これはサーブレットが SingleThreadModel を実装していないが、サービスの doXXX メソッドを同期させているのと似ています。</target>
        </trans-unit>
        <trans-unit id="5614fd50cde75417ad30de39e97dc444129ebb07" translate="yes" xml:space="preserve">
          <source>1)when control leaves from servlet code to client don't forget that session object is being held by servlet container ie, the servlet engine</source>
          <target state="translated">1)サーブレットコードからクライアントに制御が移るとき、セッションオブジェクトがサーブレットコンテナ、つまりサーブレットエンジンによって保持されていることを忘れないでください。</target>
        </trans-unit>
        <trans-unit id="a20fdd483546f0c5ce18b9f38e38c6db4fb633c6" translate="yes" xml:space="preserve">
          <source>1: context information</source>
          <target state="translated">1:コンテキスト情報</target>
        </trans-unit>
        <trans-unit id="a55bac31770151c11b64a20f6e6835991ef07b2b" translate="yes" xml:space="preserve">
          <source>2) Creating a pool of instances - which's a better option and a trade-off between the boot-up/initialization effort/time of the servlet as against the restrictive parameters (memory/ CPU time) of the environment hosting the servlet.</source>
          <target state="translated">2)インスタンスのプールを作成する-サーブレットをホストしている環境の制限的なパラメータ(メモリCPU時間)に対して、サーブレットの起動初期化の効率との間で、どちらが良いオプションであり、トレードオフになります。</target>
        </trans-unit>
        <trans-unit id="8008ae6cff9ec65a0e3d57321dafe58e449f1c94" translate="yes" xml:space="preserve">
          <source>2)multithreading is left to servlet developers people for implementing ie., handle the multiple requests of client nothing to bother about multithread code</source>
          <target state="translated">2)マルチスレッドはサーブレットの開発者に実装を任せる。</target>
        </trans-unit>
        <trans-unit id="69ce12ce4ff3251bf69d6681a147ecf02c9d0530" translate="yes" xml:space="preserve">
          <source>2: initial configuration information</source>
          <target state="translated">2:初期設定情報</target>
        </trans-unit>
        <trans-unit id="7c8ce079d1747d58cddf550625484cdb316a408b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Implement SingleThreadInterface(i)&lt;/code&gt; 
which is a blank Interface there is no</source>
          <target state="translated">&lt;code&gt;Implement SingleThreadInterface(i)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 空白のインターフェースである&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;SingleThreadInterface（i）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;実装する&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="59a728b80d0826f20125748e535aae2220443b23" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Edit&lt;/strong&gt; There is an excellent tutorial &lt;a href=&quot;http://www.apl.jhu.edu/~hall/java/Servlet-Tutorial/Servlet-Tutorial-Session-Tracking.html&quot;&gt;here&lt;/a&gt; on how to work with session inside of servlets. And &lt;a href=&quot;http://docs.oracle.com/javaee/5/tutorial/doc/bnafd.html&quot;&gt;here&lt;/a&gt; is a chapter from Sun about Java Servlets, what they are and how to use them.  Between those two articles, you should be able to answer all of your questions.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;編集&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;優れたチュートリアルがあり&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.apl.jhu.edu/~hall/java/Servlet-Tutorial/Servlet-Tutorial-Session-Tracking.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、ここで&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サーブレットのセッション内部で作業する方法については。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そして、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://docs.oracle.com/javaee/5/tutorial/doc/bnafd.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここでの&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Javaの彼らが何であるか、サーブレット、およびその使用方法に関する日から章があります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これらの2つの記事の間に、すべての質問に答えられるはずです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="495b3e33baeca9bfc43448046fff832a0c39550a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example::&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Example::&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="31d05cba08a9f02be6fa8c2ccfae722ea0ae924f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Instantiation&lt;/strong&gt; - a servlet is instantiated when the container receives the first request mapped to the servlet (unless the servlet is configured to load on startup with the &lt;code&gt;&amp;lt;load-on-startup&amp;gt;&lt;/code&gt; element in &lt;code&gt;web.xml&lt;/code&gt;). The same instance is used to serve subsequent requests.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;インスタンス化&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; -サーブレットは、サーブレットが（サーブレットが&lt;/font&gt; &lt;code&gt;web.xml&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;の&lt;/font&gt;&lt;/font&gt; &lt;code&gt;&amp;lt;load-on-startup&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;要素で&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;起動時&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;にロードするように構成されていない限り）サーブレットにマップされた最初のリクエストを受信するとインスタンス化されます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;同じインスタンスを使用して、後続のリクエストを処理します。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="140adedf00aa6524e936b4f37cb938fed444395d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;No.&lt;/strong&gt; Servlets are &lt;strong&gt;not Thread safe&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;いいえ。&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サーブレットは&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;スレッドセーフで&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はあり&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ません&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7f84a3ed795e47b7293f053ee98d38fafa98c4c9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Sessions&lt;/strong&gt; - what Chris Thompson said.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;セッション&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; -クリス・トンプソンが言ったこと。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="129f80e177fbbfa121ddb68b66aff455d82d5674" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 1&lt;/strong&gt;: request object is evaluated for incoming session ID.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ステップ1&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：リクエストオブジェクトが着信セッションIDに対して評価されます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="250ad378e0e8f2a205369e68f39e0a69821ff396" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 2&lt;/strong&gt;: if ID not available a brand new HttpSession object is created and its corresponding session ID is generated (ie of HashTable) session ID is stored into httpservlet response object and the reference of HttpSession object is returned to the servlet (doGet/doPost).</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ステップ2&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：IDが使用できない場合、新しいHttpSessionオブジェクトが作成され、それに対応するセッションID（つまりHashTableの）が生成されます。セッションIDはhttpservlet応答オブジェクトに格納され、HttpSessionオブジェクトの参照がサーブレットに返されます（doGet / doPost） 。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="21746fbb5b2cd0e8dd6549bc0ad9f343aed1379b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 3&lt;/strong&gt;: if ID available brand new session object is not created session ID is picked up from the request object search is made in the collection of sessions by using session ID as the key.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ステップ3&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：IDが使用可能な新しいセッションオブジェクトが作成されていない場合、リクエストからセッションIDが取得されます。オブジェクトの検索は、セッションIDをキーとして使用して、セッションのコレクションで行われます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6b7805639872d5d299df4ab9f6224f0215682c3f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;if u want to make it Servlet as Thread safe ., U can go for&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サーブレットをスレッドセーフにしたい場合、Uは&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d02afe5b4227e603cc94a824dd0e800553acc816" translate="yes" xml:space="preserve">
          <source>A servlet container may send concurrent requests through the service
  method of the servlet. To handle the requests, the Servlet Developer
  must make adequate provisions for concurrent processing with multiple
  threads in the service method.</source>
          <target state="translated">サーブレットコンテナは、サーブレットのサービスメソッドを通じて同時リクエストを送信することができます。リクエストを処理するために、サーブレット開発者は、サービスメソッドで複数のスレッドを使用した同時処理のための適切な規定を作らなければなりません。</target>
        </trans-unit>
        <trans-unit id="d9d59511176e0968cbfd8008b4b1ee2d73f9831c" translate="yes" xml:space="preserve">
          <source>A servlet is created when the application starts (it is deployed on the servlet container) or when it is first accessed (depending on the load-on-startup setting)
when the servlet is instantiated, the init() method of the servlet is called
then the servlet (its one and only instance) handles all requests (its service() method being called by multiple threads). That's why it is not advisable to have any synchronization in it, and you should avoid instance variables of the servlet
when the application is undeployed (the servlet container stops), the destroy() method is called.</source>
          <target state="translated">サーブレットはアプリケーションの起動時(サーブレットコンテナ上にデプロイされます)または最初にアクセスされた時(ロードオンスタートアップの設定に依存します)に作成され、サーブレットがインスタンス化されると、サーブレットのinit()メソッドが呼び出され、サーブレット(その唯一のインスタンス)がすべてのリクエストを処理します(そのservice()メソッドは複数のスレッドから呼び出されます)。アプリケーションがアンデプロイされたとき(サーブレットコンテナが停止したとき)、destroy()メソッドが呼ばれたとき、サーブレットのインスタンス変数は避けるべきです。</target>
        </trans-unit>
        <trans-unit id="489a01a9e61b04486464aaddfe186dbe55155600" translate="yes" xml:space="preserve">
          <source>A)only once (for every client request a new thread is created)
only one instance of the servlet serves any number of the client request ie, after serving one client request server does not die. It waits for other client requests ie what CGI (for every client request a new process is created) limitation is overcome with the servlet (internally servlet engine creates the thread).</source>
          <target state="translated">A)一度だけ (クライアントのリクエストごとに新しいスレッドが作成されます)サーブレットの一つのインスタンスだけがクライアントのリクエストに何度でも対応することができます、つまり、一つのクライアントのリクエストに対応した後、サーバーが死ぬことはありません。それは他のクライアントのリクエストを待ちます。つまり、CGI (クライアントのリクエストごとに新しいプロセスが生成されます)の制限はサーブレットで克服されます (内部的にサーブレットエンジンがスレッドを生成します)。</target>
        </trans-unit>
        <trans-unit id="0e7e4a3f75bd46b69450d4a294001b70092512d4" translate="yes" xml:space="preserve">
          <source>A)whenever getSession() is called on HttpServletRequest object</source>
          <target state="translated">A)HttpServletRequest オブジェクトで getSession()が呼び出されるたびに</target>
        </trans-unit>
        <trans-unit id="c5a010287e089f0cd9f1ddd206bdcc45b53e8653" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;Servlet&lt;/code&gt;, &lt;code&gt;Filter&lt;/code&gt; and &lt;code&gt;Listener&lt;/code&gt; instances live as long as the web app lives. They are shared among &lt;em&gt;all&lt;/em&gt; requests in &lt;em&gt;all&lt;/em&gt; sessions.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;すべての&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Servlet&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Filter&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Listener&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;インスタンスは、Webアプリが存続している限り存続します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それらは&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;すべての&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;セッションの&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;すべての&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;リクエストで&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;共有され&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e2827eacbe609c170dd90d31c0c77c0b063983d5" translate="yes" xml:space="preserve">
          <source>Although it is not recommended, an alternative for the Developer is to
  implement the SingleThreadModel interface which requires the container
  to guarantee that there is only one request thread at a time in the
  service method. A servlet container may satisfy this requirement by
  serializing requests on a servlet, or by maintaining a pool of servlet
  instances. If the servlet is part of a Web application that has been
  marked as distributable, the container may maintain a pool of servlet
  instances in each JVM that the application is distributed across.</source>
          <target state="translated">推奨されていませんが、開発者にとっての代替手段は SingleThreadModel インターフェイスを実装することです。サーブレットコンテナは、サーブレット上でリクエストをシリアライズするか、サーブレットインスタンスのプールを維持することで、この要件を満たすことができます。サーブレットが配布可能とマークされている Web アプリケーションの一部である場合、コンテナはアプリケーションが分散されている各 JVM 内でサーブレットインスタンスのプールを維持することができます。</target>
        </trans-unit>
        <trans-unit id="566d8a9623231782bd4c71ed922e58a54fc837de" translate="yes" xml:space="preserve">
          <source>Any &lt;code&gt;attribute&lt;/code&gt; that is defined in &lt;code&gt;ServletContext&lt;/code&gt;, &lt;code&gt;HttpServletRequest&lt;/code&gt; and &lt;code&gt;HttpSession&lt;/code&gt; will live as long as the object in question lives. The object itself represents the &quot;scope&quot; in bean management frameworks such as JSF, CDI, Spring, etc. Those frameworks store their scoped beans as an &lt;code&gt;attribute&lt;/code&gt; of its closest matching scope.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;任意の&lt;/font&gt;&lt;/font&gt; &lt;code&gt;attribute&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に定義されている&lt;/font&gt;&lt;/font&gt; &lt;code&gt;ServletContext&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;HttpServletRequest&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;HttpSession&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;質問の生活の中で対象限り生き続けます。オブジェクト自体は、JSF、CDI、SpringなどのBean管理フレームワークの「スコープ」を表します。これらのフレームワークは、スコープが&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一致する&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Beanを、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最も近いスコープの&lt;/font&gt;&lt;/font&gt; &lt;code&gt;attribute&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;として格納し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6ff0f1f4f96e23320df4c0f6bdbe98d10f813b18" translate="yes" xml:space="preserve">
          <source>As is clear from above explanations, by implementing the &lt;b&gt;SingleThreadModel&lt;/b&gt;, a servlet can be assured thread-safety by the servlet container. The container implementation can do this in 2 ways:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;上記の説明から明らかなように、&lt;/font&gt;&lt;/font&gt;&lt;b&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;SingleThreadModelを&lt;/font&gt;&lt;/font&gt;&lt;/b&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;実装する&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ことにより、サーブレットはサーブレットコンテナによってスレッドの安全性を確保できます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コンテナー実装は、次の2つの方法でこれを実行できます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e6c0932fe90514f985aa06ab25b9e5c252c1965d" translate="yes" xml:space="preserve">
          <source>As per the &lt;a href=&quot;http://www.faqs.org/rfcs/rfc2965.html&quot;&gt;HTTP cookie specification&lt;/a&gt; (a contract any decent web browser and web server must adhere to), the client (the web browser) is required to send this cookie back in subsequent requests in the &lt;code&gt;Cookie&lt;/code&gt; header for as long as the cookie is valid (i.e. the unique ID must refer to an unexpired session and the domain and path are correct). Using your browser's built-in HTTP traffic monitor, you can verify that the cookie is valid (press F12 in Chrome / Firefox 23+ / IE9+, and check the &lt;em&gt;Net/Network&lt;/em&gt; tab). The servlet container will check the &lt;code&gt;Cookie&lt;/code&gt; header of every incoming HTTP request for the presence of the cookie with the name &lt;code&gt;JSESSIONID&lt;/code&gt; and use its value (the session ID) to get the associated &lt;code&gt;HttpSession&lt;/code&gt; from server's memory.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あたりとして&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.faqs.org/rfcs/rfc2965.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;HTTPクッキーの仕様&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（契約に準拠する必要がありますまともなWebブラウザとWebサーバ）、クライアント（Webブラウザ）がそれに続くのリクエストで、このクッキー送り返すために必要な&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Cookie&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;クッキーが有効である限りとしてのヘッダーを（つまり、一意のIDは、有効期限が切れていないセッションを参照している必要があり、ドメインとパスは正しいです）。ブラウザーの組み込みHTTPトラフィックモニターを使用して、Cookieが有効であることを確認できます（Chrome / Firefox 23以降/ IE9以降ではF12を押し、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;[ &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ネット/ネットワーク&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ]タブ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を確認し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます）。サーブレットコンテナは&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、すべての着信HTTPリクエスト&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Cookie&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ヘッダーで&lt;/font&gt;&lt;/font&gt; &lt;code&gt;JSESSIONID&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;という名前のCookieが存在&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;するかどうかを確認し、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;その値（セッションID）を使用して関連する&lt;/font&gt;&lt;/font&gt; &lt;code&gt;HttpSession&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サーバーのメモリからの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;HttpSession&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="986f60bb84101ffe61792add1e31f00ed705b1d1" translate="yes" xml:space="preserve">
          <source>Best option for Session management in Java</source>
          <target state="translated">Javaでのセッション管理に最適なオプション</target>
        </trans-unit>
        <trans-unit id="69cfd0e34cd0468b9efd3410978aafd23969f6d3" translate="yes" xml:space="preserve">
          <source>Difference between / and /* in servlet mapping url pattern</source>
          <target state="translated">サーブレットマッピングのURLパターンでの*との違い</target>
        </trans-unit>
        <trans-unit id="ca316e6598b03852b8642eb459d6b143fa63fedd" translate="yes" xml:space="preserve">
          <source>During instantiation phase of the servlet, servlet instance is ready but it cannot serve the client request because it is missing with two pieces of information:</source>
          <target state="translated">サーブレットのインスタンス化フェーズでは、サーブレットのインスタンスは準備ができていますが、2つの情報が不足しているため、クライアントのリクエストに対応することができません。</target>
        </trans-unit>
        <trans-unit id="1d623266db941a8e2731c8b0f4bf7944c27ec351" translate="yes" xml:space="preserve">
          <source>For servlets not implementing the SingleThreadModel interface, if the
  service method (or methods such as doGet or doPost which are
  dispatched to the service method of the HttpServlet abstract class)
  has been defined with the synchronized keyword, the servlet container
  cannot use the instance pool approach, but must serialize requests
  through it. It is strongly recommended that Developers not synchronize
  the service method (or methods dispatched to it) in these
  circumstances because of detrimental effects on performance</source>
          <target state="translated">SingleThreadModel インタフェースを実装していないサーブレットの場合、サービス・メソッド (または、HttpServlet 抽象クラスのサービス・メソッドにディスパッチされる doGet や doPost などのメソッド)が synchronized キーワードで定義されていると、サーブレット・コンテナはインスタンス・プール・アプローチを使用できませんが、それを介してリクエストをシリアライズする必要があります。このような状況では、パフォーマンスに悪影響を及ぼすため、サービス・メソッド (またはそれにディスパッチされたメソッド)を同期化しないことを強くお勧めします。</target>
        </trans-unit>
        <trans-unit id="f1c1bd42ea7c7148d7b35f564134ddc034b75c21" translate="yes" xml:space="preserve">
          <source>How do servlets work? Instantiation, sessions, shared variables and multithreading</source>
          <target state="translated">サーブレットはどのように動作するのか?インスタンス、セッション、共有変数、マルチスレッド</target>
        </trans-unit>
        <trans-unit id="49660b6f0dd470e2821cf24018e1ceb00fb0d695" translate="yes" xml:space="preserve">
          <source>HttpServletRequest and HttpServletResponse</source>
          <target state="translated">HttpServletRequest および HttpServletResponse。</target>
        </trans-unit>
        <trans-unit id="ed11342ec40f4d2d37a220c113516b670adc52bb" translate="yes" xml:space="preserve">
          <source>HttpSession</source>
          <target state="translated">HttpSession</target>
        </trans-unit>
        <trans-unit id="c23894758b7df14abd8b4f723a36d83a8fee66bd" translate="yes" xml:space="preserve">
          <source>I feel that Synchronized block is better than making the whole method</source>
          <target state="translated">全体の方式を作るよりも、シンクロナイズドブロックの方が良いような気がします。</target>
        </trans-unit>
        <trans-unit id="30a942487747396fb1240e188b44c416f86c3812" translate="yes" xml:space="preserve">
          <source>If &lt;strong&gt;load-on-startup&lt;/strong&gt; is &lt;strong&gt;false&lt;/strong&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;もし&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;のload-on-startupが&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ある&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;偽&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c12a13537e71c85b97056247cc8961ba0c68fa41" translate="yes" xml:space="preserve">
          <source>If &lt;strong&gt;load-on-startup&lt;/strong&gt; is &lt;strong&gt;true&lt;/strong&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;もし&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;のload-on-startupが&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ある&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;真&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="217ea5cca9699504b57fcecb48b0029845d1abba" translate="yes" xml:space="preserve">
          <source>In a nutshell</source>
          <target state="translated">一言で言えば</target>
        </trans-unit>
        <trans-unit id="36fc80f14fa7c5420d415452f328b748294b2f21" translate="yes" xml:space="preserve">
          <source>In short: the web server issues a unique identifier to &lt;em&gt;each visitor&lt;/em&gt; on his &lt;em&gt;first&lt;/em&gt; visit. The visitor must bring back that ID for him to be recognised next time around. This identifier also allows the server to properly segregate objects owned by one session against that of another.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;つまり、Webサーバー&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最初の&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;訪問時&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;各訪問者&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一意の識別子を発行します&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;訪問者は、次回に認識されるためにそのIDを返却する必要があります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この識別子により、サーバーは、あるセッションが所有するオブジェクトを別のセッションのオブジェクトに対して適切に分離することもできます。&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="59ff4077a58bdbe02b1ebec7305f4e7056ab4bbb" translate="yes" xml:space="preserve">
          <source>In the case of &lt;a href=&quot;https://stackoverflow.com/tags/servlet-filters/info&quot;&gt;filters&lt;/a&gt;, the &lt;code&gt;doFilter()&lt;/code&gt; method is invoked. When the servlet container's code calls &lt;code&gt;chain.doFilter(request, response)&lt;/code&gt;, the request and response continue on to the next filter, or hit the servlet if there are no remaining filters.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/tags/servlet-filters/info&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;filters&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の場合&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;doFilter()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;メソッドが呼び出されます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サーブレットコンテナーのコードが&lt;/font&gt;&lt;/font&gt; &lt;code&gt;chain.doFilter(request, response)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;呼び出す&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と、要求と応答は次のフィルターに進みます。フィルターが残っていない場合は、サーブレットにヒットします。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a4a0cf437739d0294cf41b2bbea4cd4e1fc12757" translate="yes" xml:space="preserve">
          <source>In the case of &lt;a href=&quot;https://stackoverflow.com/tags/servlets/info&quot;&gt;servlets&lt;/a&gt;, the &lt;code&gt;service()&lt;/code&gt; method is invoked. By default, this method determines which one of the &lt;code&gt;doXxx()&lt;/code&gt; methods to invoke based off of  &lt;code&gt;request.getMethod()&lt;/code&gt;. If the determined method is absent from the servlet, then an HTTP 405 error is returned in the response.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/tags/servlets/info&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サーブレット&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の場合&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;service()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;メソッドが呼び出されます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;デフォルトでは、このメソッド&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt; &lt;code&gt;request.getMethod()&lt;/code&gt; に&lt;font style=&quot;vertical-align: inherit;&quot;&gt;基づいて&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;doXxx()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;メソッドを呼び出す &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;かを決定します&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;決定されたメソッドがサーブレットにない場合、HTTP 405エラーが応答で返されます。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9703fb09fa8d1f2220de1ecaa2ef3c5110aa295b" translate="yes" xml:space="preserve">
          <source>Inshort form:</source>
          <target state="translated">インショートフォーム。</target>
        </trans-unit>
        <trans-unit id="b4a3c736d6c8baf7c51c19ad582571dfdd3f2aa0" translate="yes" xml:space="preserve">
          <source>It comes with a small risk though. Remember: this single guy holds all the order information in his pocket: so if you're not cautious about &lt;a href=&quot;http://tutorials.jenkov.com/java-servlets/servlet-concurrency.html&quot;&gt;thread safety on servlets&lt;/a&gt;, he may end up giving the wrong order to a certain client.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ただし、小さなリスクが伴います。覚えておいてください。この1人の男はすべての注文情報をポケットに入れています。そのため、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://tutorials.jenkov.com/java-servlets/servlet-concurrency.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サーブレットのスレッドセーフティに&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;注意しない&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と、特定のクライアントに間違った注文をしてしまう可能性があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="83423c198b6099edba08f185f940042d5dba3b79" translate="yes" xml:space="preserve">
          <source>Note:</source>
          <target state="translated">Note:</target>
        </trans-unit>
        <trans-unit id="6389b1c1e8688e37da90a236912f4b66399c9d7a" translate="yes" xml:space="preserve">
          <source>Now, if 2 or more users send request to this server then what happens to the session variables? Will they all be common for all the users or they will be different for each user. If they are different, then how was the server able to differentiate between different users?</source>
          <target state="translated">さて、2人以上のユーザがこのサーバにリクエストを送った場合、セッション変数はどうなるでしょうか?それらはすべてのユーザに共通のものでしょうか、それともユーザごとに異なるものでしょうか。異なる場合、サーバはどのようにして異なるユーザを区別することができたのでしょうか?</target>
        </trans-unit>
        <trans-unit id="bdaf7009ca8cf1117a5f574b819499f71badba07" translate="yes" xml:space="preserve">
          <source>On the client side, the session cookie stays alive for as long as the browser instance is running. So, if the client closes the browser instance (all tabs/windows), then the session is trashed on the client's side. In a new browser instance, the cookie associated with the session wouldn't exist, so it would no longer be sent. This causes an entirely new &lt;code&gt;HttpSession&lt;/code&gt; to be created, with an entirely new session cookie being used.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;クライアント側では、ブラウザインスタンスが実行されている限り、セッションCookieは存続します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そのため、クライアントがブラウザインスタンス（すべてのタブ/ウィンドウ）を閉じると、クライアント側でセッションが破棄されます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;新しいブラウザインスタンスでは、セッションに関連付けられたCookieは存在しないため、送信されなくなります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これにより、まったく新しい&lt;/font&gt;&lt;/font&gt; &lt;code&gt;HttpSession&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が作成され、まったく新しいセッションCookieが使用されます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fd62ccec79f68daf950e4b9578045433edb8102e" translate="yes" xml:space="preserve">
          <source>Once he's on the service mode and on the groove, the &lt;em&gt;same&lt;/em&gt; servlet will work on the requests from all other clients.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;彼がサービスモードとグルーブに入る&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;同じ&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サーブレットが他のすべてのクライアントからのリクエストで機能します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="db6e07a52452c21614dfd7e885c72b10d8b345b4" translate="yes" xml:space="preserve">
          <source>Once the search is successful session ID is stored into HttpServletResponse and the existing session object references are returned to the doGet() or doPost() of UserDefineservlet.</source>
          <target state="translated">検索が成功すると、セッションIDがHttpServletResponseに格納され、既存のセッションオブジェクトの参照がUserDefineservletのdoGet()またはdoPost()に返されます。</target>
        </trans-unit>
        <trans-unit id="c476d2316f1dace46f2e8e7329173f96071fb6ec" translate="yes" xml:space="preserve">
          <source>One more similar question, if there are &lt;code&gt;n&lt;/code&gt; users accessing a particular servlet, then this servlet gets instantiated only the first time the first user accessed it or does it get instantiated for all the users separately? In other words, what happens to the instance variables?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ある場合は、1つの以上同様の質問は、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;n&lt;/code&gt; は&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、特定のサーブレットにアクセスするユーザは、このサーブレットは、最初のユーザーがそれにアクセスしたか、それは別に、すべてのユーザーに対してインスタンスを取得ん初回のみをインスタンス化しますか？つまり、インスタンス変数はどうなりますか？&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="724c20efc1967b9636f822455cb3f495483ba931" translate="yes" xml:space="preserve">
          <source>Q) In the lifetime of servlet how many times instantiation and initialization happens ??</source>
          <target state="translated">Q)サーブレットの寿命の間に、インスタンス化と初期化は何回行われますか?</target>
        </trans-unit>
        <trans-unit id="c9f9f5aea0ed83675a99943348e4412fc43dc336" translate="yes" xml:space="preserve">
          <source>Q)How session concept works?</source>
          <target state="translated">Q)セッションのコンセプトは?</target>
        </trans-unit>
        <trans-unit id="371a87eafb4de078ff674d69a5a89c186532eb49" translate="yes" xml:space="preserve">
          <source>See also:</source>
          <target state="translated">も参照してください。</target>
        </trans-unit>
        <trans-unit id="228745ca65291e57f982d3f64ba7625efd08c1ac" translate="yes" xml:space="preserve">
          <source>Servlet Instantiation</source>
          <target state="translated">サーブレットのインスタンス化</target>
        </trans-unit>
        <trans-unit id="c15ea98bfe8b84f54453a39359f5904050da2aee" translate="yes" xml:space="preserve">
          <source>Servlet engine creates servletConfig interface object encapsulating the above missing information into it
servlet engine calls init() of the servlet by supplying servletConfig object references as an argument. Once init() is completely executed servlet is ready to serve the client request.</source>
          <target state="translated">サーブレットエンジンは上記の足りない情報をカプセル化した servletConfig インターフェースオブジェクトを作成します。 サーブレットエンジンは引数として servletConfig オブジェクトの参照を与えてサーブレットの init()を呼び出します。init()が完全に実行されると、サーブレットはクライアントのリクエストに対応する準備が整います。</target>
        </trans-unit>
        <trans-unit id="cbffd42c126e938577b2e7f7005d85bfa192d015" translate="yes" xml:space="preserve">
          <source>Servlet seems to handle multiple concurrent browser requests synchronously</source>
          <target state="translated">サーブレットは複数の同時進行ブラウザリクエストを同期的に処理するようです。</target>
        </trans-unit>
        <trans-unit id="2ee7ac0925504d16a00343ba1fd8c5a44cb9385c" translate="yes" xml:space="preserve">
          <source>ServletContext</source>
          <target state="translated">ServletContext</target>
        </trans-unit>
        <trans-unit id="9e6d3553a005afa1a6658369414c1ecdfaa516b3" translate="yes" xml:space="preserve">
          <source>Session in Java servlets is the same as session in other languages such as PHP.  It is unique to the user.  The server can keep track of it in different ways such as cookies, url rewriting etc.  This &lt;a href=&quot;http://java.sun.com/products/servlet/2.2/javadoc/javax/servlet/http/HttpSession.html&quot;&gt;Java doc&lt;/a&gt; article explains it in the context of Java servlets and indicates that exactly how session is maintained is an implementation detail left to the designers of the server.  The specification only stipulates that it must be maintained as unique to a user across multiple connections to the server.  Check out &lt;a href=&quot;http://download.oracle.com/docs/cd/A97336_01/buslog.102/a83726/tecbkgn2.htm&quot;&gt;this article from Oracle&lt;/a&gt; for more information about both of your questions.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Javaサーブレットのセッションは、PHPなどの他の言語のセッションと同じです。これはユーザーに固有です。サーバーは、Cookie、URL書き換えなどのさまざまな方法でそれを追跡できます。この&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://java.sun.com/products/servlet/2.2/javadoc/javax/servlet/http/HttpSession.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Javaドキュメントの&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;記事では、Javaサーブレットのコンテキストでそれを説明し、セッションの維持方法は、サーバーの設計者が実装の詳細に委ねていることを示しています。この仕様では、サーバーへの複数の接続にわたってユーザーに対して一意である必要があることだけが規定されています。チェックアウト&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://download.oracle.com/docs/cd/A97336_01/buslog.102/a83726/tecbkgn2.htm&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;のOracleからこの記事を&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あなたの質問の両方の詳細については。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e11e37a9253b34ff1c7224447e143fabca1be9fd" translate="yes" xml:space="preserve">
          <source>Sessions</source>
          <target state="translated">Sessions</target>
        </trans-unit>
        <trans-unit id="62f7732829f81134162d0f74d5aa608b568f6523" translate="yes" xml:space="preserve">
          <source>Suppose, I have a webserver which holds numerous servlets. For information passing among those servlets I am setting session and instance variables.</source>
          <target state="translated">例えば、多数のサーブレットを保持しているウェブサーバがあるとします。それらのサーブレットの間で情報を渡すために、私はセッション変数とインスタンス変数を設定しています。</target>
        </trans-unit>
        <trans-unit id="c195e4374c85d74cc43f4f08a33d51e3c51b4cfd" translate="yes" xml:space="preserve">
          <source>Synchronized</source>
          <target state="translated">Synchronized</target>
        </trans-unit>
        <trans-unit id="73d25761130091f5753c528e18539b4d1bc14933" translate="yes" xml:space="preserve">
          <source>That said, your major concern is possibly &lt;em&gt;thread safety&lt;/em&gt;. You should now know that servlets and filters are shared among all requests. That's the nice thing about Java, it's multithreaded and different threads (read: HTTP requests) can make use of the same instance. It would otherwise be too expensive to recreate, &lt;code&gt;init()&lt;/code&gt; and &lt;code&gt;destroy()&lt;/code&gt; them for every single request.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そうは言っても、あなたの主要な懸念はおそらく&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;スレッドの安全性&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これで、サーブレットとフィルターがすべてのリクエスト間で共有されることがわかります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これはJavaのいいところです。マルチスレッドであり、異なるスレッド（読み取り：HTTPリクエスト）が同じインスタンスを使用できます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そうしないと、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;リクエストを1回実行するたび&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に再作成、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;init()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、および&lt;/font&gt;&lt;/font&gt; &lt;code&gt;destroy()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;するのに&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コストがかかりすぎ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="aa33e56928d3333daa556c21f16efbe5bde31ea8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HttpServletRequest&lt;/code&gt; and &lt;code&gt;HttpServletResponse&lt;/code&gt; live from the time the servlet receives an HTTP request from the client, until the complete response (the web page) has arrived. It is &lt;em&gt;not&lt;/em&gt; shared elsewhere.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;HttpServletRequest&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;HttpServletResponse&lt;/code&gt; のは、&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;完全な応答（Webページ）が到着するまで、サーブレットはクライアントからのHTTPリクエストを受信した時から住んでいます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それはされ&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ていない&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;他の場所で共有しました。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2276c8c634ce7bce6c35c99b7dfc38f19adacaff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HttpSession&lt;/code&gt; lives for as long as the client is interacting with the web app with the same browser instance, and the session hasn't timed out at the server side. It is shared among &lt;em&gt;all&lt;/em&gt; requests in the &lt;em&gt;same&lt;/em&gt; session.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;HttpSession&lt;/code&gt; のは、&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;長い間、クライアントが同じブラウザインスタンスを使用したWebアプリケーションと対話している、とのセッションはサーバー側でタイムアウトしていないようするために住んでいます。&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;同じ&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;セッションの&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;すべての&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;リクエストで&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;共有され&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="efc305c6f0e447dd307bb85fa40046fd85936562" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HttpSession&lt;/code&gt; stays alive until it has been idle (i.e. not used in a request) for more than the timeout value specified in &lt;code&gt;&amp;lt;session-timeout&amp;gt;&lt;/code&gt;, a setting in &lt;code&gt;web.xml&lt;/code&gt;. The timeout value defaults to 30 minutes. So, when the client doesn't visit the web app for longer than the time specified, the servlet container trashes the session. Every subsequent request, even with the cookie specified, will not have access to the same session anymore; the servlet container will create a new session.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;HttpSession&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に指定されたタイムアウト値以上のための生きているとどまることがアイドル状態になっているまで（すなわち要求で使用されていない）&lt;/font&gt;&lt;/font&gt; &lt;code&gt;&amp;lt;session-timeout&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;で、設定&lt;/font&gt;&lt;/font&gt; &lt;code&gt;web.xml&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;タイムアウト値のデフォルトは30分です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そのため、クライアントが指定された時間よりも長い間Webアプリケーションにアクセスしない場合、サーブレットコンテナはセッションを破棄します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cookieが指定されていても、以降のすべてのリクエストは同じセッションにアクセスできなくなります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サーブレットコンテナが新しいセッションを作成します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b9bd226407e0a43f9128e98f8a3781f17a554ffd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ServletContext&lt;/code&gt; lives for as long as the web app lives. It is shared among &lt;em&gt;all&lt;/em&gt; requests in &lt;em&gt;all&lt;/em&gt; sessions.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;ServletContext&lt;/code&gt; は&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;長いWebアプリケーションの命と同じくらいのために住んでいます。&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;すべての&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;セッションの&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;すべての&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;リクエストで&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;共有され&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a87668a97eb0d5404ee1cfd8d5b4e4c464ed63f0" translate="yes" xml:space="preserve">
          <source>The Servlet Specification &lt;strong&gt;JSR-315&lt;/strong&gt; clearly defines the web container behavior in the service (and doGet, doPost, doPut etc.) methods (2.3.3.1 Multithreading Issues, Page 9):</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サーブレット仕様&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;JSR-315&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、サービス（およびdoGet、doPost、doPutなど）メソッドでのWebコンテナの動作を明確に定義しています（2.3.3.1マルチスレッドの問題、9ページ）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8bba4eb5bf7c898a439883a844395be85297fd24" translate="yes" xml:space="preserve">
          <source>The request object provides access to all of the information about the HTTP request, such as its URL, headers, query string and body. The response object provides the ability to control and send the HTTP response the way you want by, for instance, allowing you to set the headers and the body (usually with generated HTML content from a JSP file). When the HTTP response is committed and finished, both the request and response objects are recycled and made available for reuse.</source>
          <target state="translated">request オブジェクトは、URL、ヘッダ、クエリ文字列、ボディなどの HTTP リクエストに関するすべての情報へのアクセスを提供します。レスポンスオブジェクトは、例えばヘッダや本文を設定したり (通常は JSP ファイルから生成された HTML コンテンツを使用して)HTTP レスポンスを制御したり送信したりする機能を提供します。HTTP レスポンスがコミットされて終了すると、リクエストオブジェクトとレスポンスオブジェクトの両方がリサイクルされて再利用できるようになります。</target>
        </trans-unit>
        <trans-unit id="02113366bc46c507f2083b374a78e8a9578378b3" translate="yes" xml:space="preserve">
          <source>The servlet container is attached to a web server that listens for HTTP requests on a certain port number (port 8080 is usually used during development and port 80 in production). When a client (e.g. user with a web browser, or &lt;a href=&quot;https://stackoverflow.com/questions/2793150/how-to-use-java-net-urlconnection-to-fire-and-handle-http-requests&quot;&gt;programmatically using &lt;code&gt;URLConnection&lt;/code&gt;&lt;/a&gt;) sends an HTTP request, the servlet container creates new &lt;a href=&quot;https://javaee.github.io/javaee-spec/javadocs/javax/servlet/http/HttpServletRequest.html&quot;&gt;&lt;code&gt;HttpServletRequest&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://javaee.github.io/javaee-spec/javadocs/javax/servlet/http/HttpServletResponse.html&quot;&gt;&lt;code&gt;HttpServletResponse&lt;/code&gt;&lt;/a&gt; objects and passes them through any defined &lt;code&gt;Filter&lt;/code&gt; in the chain and, eventually, the &lt;code&gt;Servlet&lt;/code&gt; instance.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サーブレットコンテナは、特定のポート番号でHTTPリクエストをリッスンするWebサーバーに接続されます（通常、ポート8080は開発時に使用され、ポート80は本番環境で使用されます）。クライアント（例えば、ウェブブラウザを持つユーザー、または場合は&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/2793150/how-to-use-java-net-urlconnection-to-fire-and-handle-http-requests&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、プログラムで使用して&lt;/font&gt;&lt;/font&gt; &lt;code&gt;URLConnection&lt;/code&gt; のは&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）HTTPリクエストを送信し、サーブレットコンテナは、新規作成&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://javaee.github.io/javaee-spec/javadocs/javax/servlet/http/HttpServletRequest.html&quot;&gt; &lt;code&gt;HttpServletRequest&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;や&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://javaee.github.io/javaee-spec/javadocs/javax/servlet/http/HttpServletResponse.html&quot;&gt; &lt;code&gt;HttpServletResponse&lt;/code&gt; の&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;オブジェクトを、任意の定義されて渡し&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Filter&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、最終的には、鎖および&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Servlet&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;インスタンスを。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b41d5f82f68e790d6eef2166e786219cb9e7a0ef" translate="yes" xml:space="preserve">
          <source>This is allows accessing more than one threads at a time</source>
          <target state="translated">これにより、一度に複数のスレッドにアクセスすることができます。</target>
        </trans-unit>
        <trans-unit id="b66b6cbe04365929e922b75680e179e46127f3a3" translate="yes" xml:space="preserve">
          <source>Thread Safety</source>
          <target state="translated">スレッドの安全性</target>
        </trans-unit>
        <trans-unit id="3d6c6af5cdbac0a71f7d2038ab2a2940a6bbcebd" translate="yes" xml:space="preserve">
          <source>What is the difference between JSF, Servlet and JSP?</source>
          <target state="translated">JSF、Servlet、JSPの違いは何ですか?</target>
        </trans-unit>
        <trans-unit id="cd18896b344bb508af6f2197b91881e60d485b1c" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;Servlet&lt;/code&gt; has a &lt;code&gt;&amp;lt;servlet&amp;gt;&amp;lt;load-on-startup&amp;gt;&lt;/code&gt; or &lt;code&gt;@WebServlet(loadOnStartup)&lt;/code&gt; value greater than &lt;code&gt;0&lt;/code&gt;, then its &lt;code&gt;init()&lt;/code&gt; method is also invoked during startup with a new &lt;a href=&quot;https://javaee.github.io/javaee-spec/javadocs/javax/servlet/ServletConfig.html&quot;&gt;&lt;code&gt;ServletConfig&lt;/code&gt;&lt;/a&gt;. Those servlets are initialized in the same order specified by that value (&lt;code&gt;1&lt;/code&gt; is 1st, &lt;code&gt;2&lt;/code&gt; is 2nd, etc). If the same value is specified for more than one servlet, then each of those servlets is loaded in the same order as they appear in the &lt;code&gt;web.xml&lt;/code&gt;, &lt;code&gt;web-fragment.xml&lt;/code&gt;, or &lt;code&gt;@WebServlet&lt;/code&gt; classloading. In the event the &quot;load-on-startup&quot; value is absent, the &lt;code&gt;init()&lt;/code&gt; method will be invoked whenever the HTTP request hits that servlet for the very first time.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;場合&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Servlet&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;有する&lt;/font&gt;&lt;/font&gt; &lt;code&gt;&amp;lt;servlet&amp;gt;&amp;lt;load-on-startup&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;または&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@WebServlet(loadOnStartup)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;よりも大きい値&lt;/font&gt;&lt;/font&gt; &lt;code&gt;0&lt;/code&gt; を&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、その&lt;/font&gt;&lt;/font&gt; &lt;code&gt;init()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;メソッドは、新しいとの起動時に呼び出される&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://javaee.github.io/javaee-spec/javadocs/javax/servlet/ServletConfig.html&quot;&gt; &lt;code&gt;ServletConfig&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。それらのサーブレットは、その値で指定されたのと同じ順序で初期化されます（&lt;/font&gt;&lt;/font&gt; &lt;code&gt;1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が1番目、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が2番目など）。複数のサーブレットに同じ値が指定されている場合、それらのサーブレットはそれぞれ、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;web.xml&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;web-fragment.xml&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、または&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@WebServlet&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;クラス&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ローディング&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に表示されるのと同じ順序でロードされます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。 「load-on-startup」値が存在しない場合、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;init()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; メソッドは、HTTPリクエストがそのサーブレットに初めて当たるたびに呼び出されます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="afdd47fbdf1b79e44e8286593bcd1c9ec0634865" translate="yes" xml:space="preserve">
          <source>When a client visits the webapp for the first time and/or the &lt;a href=&quot;https://javaee.github.io/javaee-spec/javadocs/javax/servlet/http/HttpSession.html&quot;&gt;&lt;code&gt;HttpSession&lt;/code&gt;&lt;/a&gt; is obtained for the first time via &lt;code&gt;request.getSession()&lt;/code&gt;, the servlet container creates a new &lt;code&gt;HttpSession&lt;/code&gt; object, generates a long and unique ID (which you can get by &lt;code&gt;session.getId()&lt;/code&gt;), and stores it in the server's memory. The servlet container also sets a &lt;a href=&quot;https://javaee.github.io/javaee-spec/javadocs/javax/servlet/http/Cookie.html&quot;&gt;&lt;code&gt;Cookie&lt;/code&gt;&lt;/a&gt; in the &lt;code&gt;Set-Cookie&lt;/code&gt; header of the HTTP response with &lt;code&gt;JSESSIONID&lt;/code&gt; as its name and the unique session ID as its value.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;クライアントが初めてwebappに&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アクセスする&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;とき、および/または&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://javaee.github.io/javaee-spec/javadocs/javax/servlet/http/HttpSession.html&quot;&gt; &lt;code&gt;HttpSession&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が&lt;/font&gt;&lt;/font&gt; &lt;code&gt;request.getSession()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を介して初めて取得されるとき&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、サーブレットコンテナは新しい&lt;/font&gt;&lt;/font&gt; &lt;code&gt;HttpSession&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;オブジェクトを作成し、長く一意のID（&lt;/font&gt;&lt;/font&gt; &lt;code&gt;session.getId()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;取得できます）を生成します&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.getId（）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）、サーバーのメモリに保存します。また、サーブレットコンテナ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、HTTP応答&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の&lt;/font&gt; &lt;code&gt;Set-Cookie&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;ヘッダーに&lt;/font&gt; &lt;code&gt;JSESSIONID&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;を名前として、一意のセッションIDを値として&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://javaee.github.io/javaee-spec/javadocs/javax/servlet/http/Cookie.html&quot;&gt; &lt;code&gt;Cookie&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;設定&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;します。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7754c29f9531cf59284aab7b205687e3e4bdc8a8" translate="yes" xml:space="preserve">
          <source>When the servlet container (like &lt;a href=&quot;http://tomcat.apache.org&quot;&gt;Apache Tomcat&lt;/a&gt;) starts up, it will deploy and load all its web applications. When a web application is loaded, the servlet container creates the &lt;a href=&quot;https://javaee.github.io/javaee-spec/javadocs/javax/servlet/ServletContext.html&quot;&gt;&lt;code&gt;ServletContext&lt;/code&gt;&lt;/a&gt; once and keeps it in the server's memory. The web app's &lt;code&gt;web.xml&lt;/code&gt; and all of included &lt;code&gt;web-fragment.xml&lt;/code&gt; files is parsed, and each &lt;code&gt;&amp;lt;servlet&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;filter&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;listener&amp;gt;&lt;/code&gt; found (or each class annotated with &lt;code&gt;@WebServlet&lt;/code&gt;, &lt;code&gt;@WebFilter&lt;/code&gt; and &lt;code&gt;@WebListener&lt;/code&gt; respectively) is instantiated once and kept in the server's memory as well. For each instantiated filter, its &lt;code&gt;init()&lt;/code&gt; method is invoked with a new &lt;a href=&quot;https://javaee.github.io/javaee-spec/javadocs/javax/servlet/FilterConfig.html&quot;&gt;&lt;code&gt;FilterConfig&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サーブレットコンテナ（&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://tomcat.apache.org&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Apache Tomcatなど&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）が起動すると、すべてのWebアプリケーションがデプロイおよびロードされます。 Webアプリケーションがロードされると、サーブレットコンテナは&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://javaee.github.io/javaee-spec/javadocs/javax/servlet/ServletContext.html&quot;&gt; &lt;code&gt;ServletContext&lt;/code&gt; を&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 1回&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;作成し、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それをサーバーのメモリに保持します。ウェブアプリケーションの&lt;/font&gt;&lt;/font&gt; &lt;code&gt;web.xml&lt;/code&gt; ファイル&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;および付属のすべて&lt;/font&gt;&lt;/font&gt; &lt;code&gt;web-fragment.xml&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ファイルが解析され、各&lt;/font&gt;&lt;/font&gt; &lt;code&gt;&amp;lt;servlet&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;&amp;lt;filter&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;&amp;lt;listener&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;見つかった（または各クラスがで注釈さ&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@WebServlet&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@WebFilter&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@WebListener&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それぞれ）があります一度インスタンス化され、サーバーのメモリにも保持されます。インスタンス化された各フィルターについて、その&lt;/font&gt;&lt;/font&gt; &lt;code&gt;init()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;メソッドは、新しい&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://javaee.github.io/javaee-spec/javadocs/javax/servlet/FilterConfig.html&quot;&gt; &lt;code&gt;FilterConfig&lt;/code&gt; で&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;呼び出されます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="aa7481bd9b40d44c74f00f6544404f1fdb70aaee" translate="yes" xml:space="preserve">
          <source>When the servlet container (like Apache Tomcat) starts up, it will read from the web.xml file (only one per application) if anything goes wrong or shows up an error at container side console, otherwise, it will deploy and load all web applications by using web.xml (so named it as deployment descriptor).</source>
          <target state="translated">サーブレットコンテナ(Apache Tomcatなど)が起動すると、何か問題が発生したり、コンテナ側のコンソールでエラーが表示された場合は、web.xmlファイル(アプリケーションごとに1つだけ)から読み込み、それ以外の場合はweb.xml(デプロイメント記述子と名付けられています)を使ってすべてのWebアプリケーションをデプロイしてロードします。</target>
        </trans-unit>
        <trans-unit id="71053ee3582b645a370a1b774ee49cd141cce9ea" translate="yes" xml:space="preserve">
          <source>When the servlet container is finished with all of the above described initialization steps, then the &lt;a href=&quot;https://javaee.github.io/javaee-spec/javadocs/javax/servlet/ServletContextListener.html#contextInitialized-javax.servlet.ServletContextEvent-&quot;&gt;&lt;code&gt;ServletContextListener#contextInitialized()&lt;/code&gt;&lt;/a&gt; will be invoked.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サーブレットコンテナが上記の初期化手順をすべて完了すると、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://javaee.github.io/javaee-spec/javadocs/javax/servlet/ServletContextListener.html#contextInitialized-javax.servlet.ServletContextEvent-&quot;&gt; &lt;code&gt;ServletContextListener#contextInitialized()&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が呼び出されます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9e0d859f91edc9c7a964c5f4387000db4486f424" translate="yes" xml:space="preserve">
          <source>When the servlet container shuts down, it unloads all web applications, invokes the &lt;code&gt;destroy()&lt;/code&gt; method of all its initialized servlets and filters, and all &lt;code&gt;ServletContext&lt;/code&gt;, &lt;code&gt;Servlet&lt;/code&gt;, &lt;code&gt;Filter&lt;/code&gt; and &lt;code&gt;Listener&lt;/code&gt; instances are trashed. Finally the &lt;a href=&quot;https://javaee.github.io/javaee-spec/javadocs/javax/servlet/ServletContextListener.html#contextDestroyed-javax.servlet.ServletContextEvent-&quot;&gt;&lt;code&gt;ServletContextListener#contextDestroyed()&lt;/code&gt;&lt;/a&gt; will be invoked.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サーブレットコンテナがシャットダウンすると、すべてのWebアプリケーションがアンロードされ、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;初期化されたすべてのサーブレットとフィルタ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の&lt;/font&gt;&lt;/font&gt; &lt;code&gt;destroy()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;メソッドが&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;呼び出され、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;すべての&lt;/font&gt;&lt;/font&gt; &lt;code&gt;ServletContext&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Servlet&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Filter&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、および&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Listener&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;インスタンスが破棄されます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最後に&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://javaee.github.io/javaee-spec/javadocs/javax/servlet/ServletContextListener.html#contextDestroyed-javax.servlet.ServletContextEvent-&quot;&gt; &lt;code&gt;ServletContextListener#contextDestroyed()&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が呼び出されます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d698fa04731c4b1bd22bc11a1942ea62c9c78c44" translate="yes" xml:space="preserve">
          <source>Why Servlets are not thread Safe?</source>
          <target state="translated">なぜサーブレットはスレッドセーフではないのか?</target>
        </trans-unit>
        <trans-unit id="8ae157ebc853261faf3acd064f769265b724e76a" translate="yes" xml:space="preserve">
          <source>Why isn't it a good idea to have one instance per client? Think about this: Will you hire one pizza guy for every order that came? Do that and you'd be out of business in no time.</source>
          <target state="translated">なぜ、クライアントごとに1つのインスタンスを持つことは良いアイデアではないのでしょうか?これについて考えてみてください。来た注文ごとにピザ屋を一人雇うか?そうすれば、すぐに廃業してしまうでしょう。</target>
        </trans-unit>
        <trans-unit id="473a4264af288265c7bcf8749a7f052c8215827d" translate="yes" xml:space="preserve">
          <source>You should also realize that you should &lt;strong&gt;never&lt;/strong&gt; assign any request or session scoped data as an &lt;em&gt;instance&lt;/em&gt; variable of a servlet or filter. It will be shared among all other requests in other sessions. That's &lt;strong&gt;not&lt;/strong&gt; thread-safe! The below example illustrates this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;また、あなたがすべきことを認識すべきである&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;決して&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;として任意の要求またはセッションスコープのデータを割り当てていない&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;インスタンスの&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サーブレットまたはフィルタの変数。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;他のセッションの他のすべてのリクエスト間で共有されます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それ&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;スレッドセーフで&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はありません&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;！&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;以下の例はこれを示しています：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="27b38379d7aa8c77c508d949568e595f1a9f5575" translate="yes" xml:space="preserve">
          <source>doGet and doPost in Servlets</source>
          <target state="translated">サーブレットのdoGetとdoPost</target>
        </trans-unit>
        <trans-unit id="0e5be5ed1699acb3eee7ef2a4509663247672e58" translate="yes" xml:space="preserve">
          <source>keyword in front of method</source>
          <target state="translated">キーワード</target>
        </trans-unit>
        <trans-unit id="b85dac7f646475d4018a5c35390352f94773c821" translate="yes" xml:space="preserve">
          <source>methods</source>
          <target state="translated">methods</target>
        </trans-unit>
        <trans-unit id="13b5cb05d544123f64be7d38e0f42e7eb9992e5e" translate="yes" xml:space="preserve">
          <source>or we can go for synchronize methods</source>
          <target state="translated">あるいは、同期化メソッドを使用することもできます。</target>
        </trans-unit>
        <trans-unit id="9f9d5ac5a2970fb6e40c13c031087887dfaab124" translate="yes" xml:space="preserve">
          <source>or we can the put block of the code in the Synchronized block</source>
          <target state="translated">または、同期ブロックにコードのブロックを置くことができます。</target>
        </trans-unit>
        <trans-unit id="8e1c77b21ffda1d01aa3fb93e67ba27df22d543c" translate="yes" xml:space="preserve">
          <source>we can make whole service method as synchronized by using synchronized</source>
          <target state="translated">を使用することで、サービスメソッド全体を同期化することができます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
