<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/3127429">
    <body>
      <group id="3127429">
        <trans-unit id="1f8742c489830fbb68ca2ba261bc508b53df7499" translate="yes" xml:space="preserve">
          <source>&quot;this&quot; is all about scope. Every function has its own scope, and since everything in JS is an object, even a function can store some values into itself using &quot;this&quot;. OOP 101 teaches that &quot;this&quot; is only applicable to &lt;em&gt;instances&lt;/em&gt; of an object. Therefore, every-time a function executes, a new &quot;instance&quot; of that function has a new meaning of &quot;this&quot;.</source>
          <target state="translated">&quot;esto&quot; tiene que ver con el alcance. Cada funci&amp;oacute;n tiene su propio alcance, y dado que todo en JS es un objeto, incluso una funci&amp;oacute;n puede almacenar algunos valores en s&amp;iacute; misma usando &quot;esto&quot;. OOP 101 ense&amp;ntilde;a que &quot;esto&quot; solo es aplicable a &lt;em&gt;instancias&lt;/em&gt; de un objeto. Por lo tanto, cada vez que se ejecuta una funci&amp;oacute;n, una nueva &quot;instancia&quot; de esa funci&amp;oacute;n tiene un nuevo significado de &quot;esto&quot;.</target>
        </trans-unit>
        <trans-unit id="b087ac216caabb7017868b37aca9a9d6e2dc3acd" translate="yes" xml:space="preserve">
          <source>&quot;this&quot; keyword is always dependant on the context of invocation. They are mentioned below.</source>
          <target state="translated">&quot;esta&quot; palabra clave siempre depende del contexto de la invocación.Se mencionan a continuación.</target>
        </trans-unit>
        <trans-unit id="f3a3f86fe5a29d3e243308285b4b562e5ee68cee" translate="yes" xml:space="preserve">
          <source>&amp;hellip;by a direct call to &lt;code&gt;eval()&lt;/code&gt;
ThisBinding is left unchanged; it is the same value as the ThisBinding of the calling execution context (&lt;a href=&quot;https://ecma-international.org/ecma-262/5.1/#sec-10.4.2&quot;&gt;&amp;sect;10.4.2&lt;/a&gt; (2)(a)).</source>
          <target state="translated">... por una llamada directa a &lt;code&gt;eval()&lt;/code&gt; ThisBinding no se modifica; es el mismo valor que el ThisBinding del contexto de ejecuci&amp;oacute;n de la llamada ( &lt;a href=&quot;https://ecma-international.org/ecma-262/5.1/#sec-10.4.2&quot;&gt;&amp;sect;10.4.2&lt;/a&gt; (2) (a)).</target>
        </trans-unit>
        <trans-unit id="9cc3cef106ffb16fe471cb3389ab7a4426b808f0" translate="yes" xml:space="preserve">
          <source>&amp;hellip;if not by a direct call to &lt;code&gt;eval()&lt;/code&gt;</source>
          <target state="translated">... si no es por una llamada directa a &lt;code&gt;eval()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="51102ac175310aed1bea1f10200498ad1af008e5" translate="yes" xml:space="preserve">
          <source>&amp;sect;15.1.2.1.1 defines what a direct call to &lt;code&gt;eval()&lt;/code&gt; is. Basically, &lt;code&gt;eval(...)&lt;/code&gt; is a direct call whereas something like &lt;code&gt;(0, eval)(...)&lt;/code&gt; or &lt;code&gt;var indirectEval = eval; indirectEval(...);&lt;/code&gt; is an indirect call to &lt;code&gt;eval()&lt;/code&gt;. See &lt;a href=&quot;https://stackoverflow.com/a/9107491/196844&quot;&gt;chuckj's answer&lt;/a&gt; to &lt;a href=&quot;https://stackoverflow.com/q/9107240/196844&quot;&gt;(1, eval)('this') vs eval('this') in JavaScript?&lt;/a&gt; and &lt;a href=&quot;http://dmitrysoshnikov.com/ecmascript/es5-chapter-2-strict-mode/#indirect-eval-call&quot;&gt;Dmitry Soshnikov&amp;rsquo;s ECMA-262-5 in detail. Chapter 2. Strict Mode.&lt;/a&gt; for when you might use an indirect &lt;code&gt;eval()&lt;/code&gt; call.</source>
          <target state="translated">&amp;sect;15.1.2.1.1 define qu&amp;eacute; es una llamada directa a &lt;code&gt;eval()&lt;/code&gt; . B&amp;aacute;sicamente, &lt;code&gt;eval(...)&lt;/code&gt; es una llamada directa, mientras que algo como &lt;code&gt;(0, eval)(...)&lt;/code&gt; o &lt;code&gt;var indirectEval = eval; indirectEval(...);&lt;/code&gt; indirectaEval (...); es una llamada indirecta a &lt;code&gt;eval()&lt;/code&gt; . &amp;iquest;Ve &lt;a href=&quot;https://stackoverflow.com/a/9107491/196844&quot;&gt;la respuesta de chuckj&lt;/a&gt; a &lt;a href=&quot;https://stackoverflow.com/q/9107240/196844&quot;&gt;(1, eval) ('this') vs eval ('this') en JavaScript?&lt;/a&gt; y &lt;a href=&quot;http://dmitrysoshnikov.com/ecmascript/es5-chapter-2-strict-mode/#indirect-eval-call&quot;&gt;ECMA-262-5 de Dmitry Soshnikov en detalle.&lt;/a&gt; Cap&amp;iacute;tulo 2. Modo estricto. para cu&amp;aacute;ndo podr&amp;iacute;a usar una llamada indirecta &lt;code&gt;eval()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d811f7b2b609ced44226e1cc0f2cc624eac9c4ae" translate="yes" xml:space="preserve">
          <source>1. Initial global execution context</source>
          <target state="translated">1.Contexto inicial de ejecución global</target>
        </trans-unit>
        <trans-unit id="a1fa3b35a9272755e31354f7d5e59caf11fa3cf1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://bjorn.tipling.com/all-this&quot;&gt;Here&lt;/a&gt; is one good source of &lt;code&gt;this&lt;/code&gt; in &lt;code&gt;JavaScript&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://bjorn.tipling.com/all-this&quot;&gt;Aqu&amp;iacute;&lt;/a&gt; hay una buena fuente de &lt;code&gt;this&lt;/code&gt; en &lt;code&gt;JavaScript&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b49c71fe77018d6aeff02cd966c9eb2f2def9fd9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot;&gt;Arrow functions&lt;/a&gt; (introduced in ECMA6) alter the scope of &lt;code&gt;this&lt;/code&gt;. See the existing canonical question, &lt;a href=&quot;https://stackoverflow.com/questions/34361379/arrow-function-vs-function-declaration-expressions-are-they-equivalent-exch&quot;&gt;Arrow function vs function declaration / expressions: Are they equivalent / exchangeable?&lt;/a&gt; for more information. But in short:</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot;&gt;Las funciones de flecha&lt;/a&gt; (introducidas en ECMA6) alteran el alcance de &lt;code&gt;this&lt;/code&gt; . Vea la pregunta can&amp;oacute;nica existente, &lt;a href=&quot;https://stackoverflow.com/questions/34361379/arrow-function-vs-function-declaration-expressions-are-they-equivalent-exch&quot;&gt;Funci&amp;oacute;n de flecha vs declaraci&amp;oacute;n / expresiones de funci&amp;oacute;n: &amp;iquest;Son equivalentes / intercambiables?&lt;/a&gt; para m&amp;aacute;s informaci&amp;oacute;n. Pero en resumen:</target>
        </trans-unit>
        <trans-unit id="7f751a15d113e0f9a8416dec1351c576d0282769" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://ecma-international.org/ecma-262/5.1/#sec-11.1.1&quot;&gt;&amp;sect;11.1.1&lt;/a&gt; The &lt;code&gt;this&lt;/code&gt; keyword</source>
          <target state="translated">&lt;a href=&quot;https://ecma-international.org/ecma-262/5.1/#sec-11.1.1&quot;&gt;&amp;sect;11.1.1&lt;/a&gt; La palabra clave &lt;code&gt;this&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="424e6d7255bde2010b643c058d5b8f1d62241294" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;apply&lt;/code&gt; is almost the same as &lt;code&gt;call&lt;/code&gt; accept that it takes only two parameters: &lt;code&gt;thisArg&lt;/code&gt; and an array which contains the arguments to be passed to the function. So the above &lt;code&gt;call&lt;/code&gt; call can be translated to &lt;code&gt;apply&lt;/code&gt; like this:</source>
          <target state="translated">&lt;code&gt;apply&lt;/code&gt; es casi lo mismo que &lt;code&gt;call&lt;/code&gt; accept que solo toma dos par&amp;aacute;metros: &lt;code&gt;thisArg&lt;/code&gt; y una matriz que contiene los argumentos que se pasar&amp;aacute;n a la funci&amp;oacute;n. Por lo tanto, la &lt;code&gt;call&lt;/code&gt; anterior se puede traducir para que se &lt;code&gt;apply&lt;/code&gt; esta manera:</target>
        </trans-unit>
        <trans-unit id="382d7e3908485b3ab834fd0e20e7a2a1529aef8b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bind&lt;/code&gt; is a brother of &lt;code&gt;call&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt;.  It is also a method inherited by all functions from the global &lt;code&gt;Function&lt;/code&gt; constructor in Javascript. The difference between &lt;code&gt;bind&lt;/code&gt; and &lt;code&gt;call&lt;/code&gt;/&lt;code&gt;apply&lt;/code&gt; is that both &lt;code&gt;call&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt; will actually invoke the function. &lt;code&gt;bind&lt;/code&gt;, on the other hand, returns a new function with the &lt;code&gt;thisArg&lt;/code&gt; and &lt;code&gt;arguments&lt;/code&gt; pre-set. Let's take an example to better understand this:</source>
          <target state="translated">&lt;code&gt;bind&lt;/code&gt; es un hermano de &lt;code&gt;call&lt;/code&gt; y &lt;code&gt;apply&lt;/code&gt; . Tambi&amp;eacute;n es un m&amp;eacute;todo heredado por todas las funciones del constructor de &lt;code&gt;Function&lt;/code&gt; global en Javascript. La diferencia entre &lt;code&gt;bind&lt;/code&gt; y &lt;code&gt;call&lt;/code&gt; / &lt;code&gt;apply&lt;/code&gt; es que tanto &lt;code&gt;call&lt;/code&gt; como &lt;code&gt;apply&lt;/code&gt; invocar&amp;aacute;n la funci&amp;oacute;n. &lt;code&gt;bind&lt;/code&gt; , por otro lado, devuelve una nueva funci&amp;oacute;n con &lt;code&gt;thisArg&lt;/code&gt; y &lt;code&gt;arguments&lt;/code&gt; preestablecidos. Tomemos un ejemplo para comprender mejor esto:</target>
        </trans-unit>
        <trans-unit id="d372c94fc4d01f36f32e9424821af8fae90a6d1e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;obj.foo()&lt;/code&gt; translates to &lt;code&gt;const temp = obj.foo; temp.call(obj);&lt;/code&gt; which means the arrow operator inside &lt;code&gt;foo&lt;/code&gt; will bind &lt;code&gt;obj&lt;/code&gt; to a new invisible function and return that new invisible function which is assigned to &lt;code&gt;b&lt;/code&gt;. &lt;code&gt;b()&lt;/code&gt; will work as it always has as &lt;code&gt;b.call(window)&lt;/code&gt; or &lt;code&gt;b.call(undefined)&lt;/code&gt; calling the new invisible function that &lt;code&gt;foo&lt;/code&gt; created. That invisible function ignores the &lt;code&gt;this&lt;/code&gt; passed into it and  passes &lt;code&gt;obj&lt;/code&gt; as objectForThis` to the arrow function.</source>
          <target state="translated">&lt;code&gt;obj.foo()&lt;/code&gt; traduce en &lt;code&gt;const temp = obj.foo; temp.call(obj);&lt;/code&gt; llamada temporal (obj); lo que significa que el operador de flecha dentro de &lt;code&gt;foo&lt;/code&gt; vincular&amp;aacute; &lt;code&gt;obj&lt;/code&gt; a una nueva funci&amp;oacute;n invisible y devolver&amp;aacute; esa nueva funci&amp;oacute;n invisible asignada a &lt;code&gt;b&lt;/code&gt; . &lt;code&gt;b()&lt;/code&gt; funcionar&amp;aacute; como siempre tiene como &lt;code&gt;b.call(window)&lt;/code&gt; o &lt;code&gt;b.call(undefined)&lt;/code&gt; llamando a la nueva funci&amp;oacute;n invisible que &lt;code&gt;foo&lt;/code&gt; cre&amp;oacute;. Esa funci&amp;oacute;n invisible ignora &lt;code&gt;this&lt;/code&gt; pasado y pasa &lt;code&gt;obj&lt;/code&gt; como objectForThis` a la funci&amp;oacute;n de flecha.</target>
        </trans-unit>
        <trans-unit id="cc4f263a38b1f6aedd93045cde762a01d7dc5a49" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;obj&lt;/code&gt; &amp;mdash; When calling a function on an object, ThisBinding is set to the object.</source>
          <target state="translated">&lt;code&gt;obj&lt;/code&gt; : cuando se llama a una funci&amp;oacute;n en un objeto, ThisBinding se establece en el objeto.</target>
        </trans-unit>
        <trans-unit id="107d6e7f7fb924b5dc3445b4c08dd5f9aaa0aaa7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;this&lt;/code&gt; can be used to refer to the object being created</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; se puede usar para referirse al objeto que se est&amp;aacute; creando</target>
        </trans-unit>
        <trans-unit id="c811f8b7269bca9f651630faab87a3c3f3e35ac4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;this&lt;/code&gt; helps to get the current object (a.k.a. execution context) we work with. If you understand in which object the current function is getting executed, you can understand easily what current &lt;code&gt;this&lt;/code&gt; is</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; ayuda a obtener el objeto actual (tambi&amp;eacute;n conocido como contexto de ejecuci&amp;oacute;n) con el que trabajamos. Si comprende en qu&amp;eacute; objeto se ejecuta la funci&amp;oacute;n actual, puede comprender f&amp;aacute;cilmente qu&amp;eacute; actual es</target>
        </trans-unit>
        <trans-unit id="b4aeb36a0b116d9deb56aa0b8774cb04edd881be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;this&lt;/code&gt; in JavaScript always refers to the 'owner' of the function that is &lt;strong&gt;being executed&lt;/strong&gt;.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; en JavaScript siempre se refiere al 'propietario' de la funci&amp;oacute;n que se &lt;strong&gt;est&amp;aacute; ejecutando&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="7c3f84f931c948a2cb7f1e59f0d6dfa830ab07b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;this&lt;/code&gt; is one of the misunderstood concept in JavaScript because it behaves little differently from place to place. Simply, &lt;code&gt;this&lt;/code&gt; refers to the &lt;strong&gt;&quot;owner&quot; of the function we are currently executing&lt;/strong&gt;.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; es uno de los conceptos mal entendidos en JavaScript porque se comporta de manera poco diferente de un lugar a otro. Simplemente, &lt;code&gt;this&lt;/code&gt; refiere al &lt;strong&gt;&quot;propietario&quot; de la funci&amp;oacute;n que estamos ejecutando actualmente&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="13e02a751d5916a050a8b3dc4252bc2caca654cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;this&lt;/code&gt; would refer to the element object. But be careful, a lot of people make this mistake.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; se referir&amp;iacute;a al elemento objeto. Pero tenga cuidado, mucha gente comete este error.</target>
        </trans-unit>
        <trans-unit id="f5240944b8f27af27e4b000a78873eeedbe95583" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;this&lt;/code&gt;&lt;strong&gt;is not assigned a value&lt;/strong&gt; until an object invokes the function where it is defined. In the global scope, all global variables and functions are defined on the &lt;code&gt;window&lt;/code&gt; object. Therefore, &lt;code&gt;this&lt;/code&gt; in a global function refers to (and has the value of) the global &lt;code&gt;window&lt;/code&gt; object.</source>
          <target state="translated">&lt;strong&gt;No se le asigna un valor&lt;/strong&gt; hasta que un objeto invoca la funci&amp;oacute;n donde est&amp;aacute; definido. En el &amp;aacute;mbito global, todas las variables y funciones globales se definen en el objeto de la &lt;code&gt;window&lt;/code&gt; . Por lo tanto, &lt;code&gt;this&lt;/code&gt; en una funci&amp;oacute;n global se refiere (y tiene el valor de) el objeto de &lt;code&gt;window&lt;/code&gt; global.</target>
        </trans-unit>
        <trans-unit id="2017743fc4e80e00beebfb42e3038d8fb7f5b026" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;window&lt;/code&gt; &amp;mdash; The marked line is evaluated in the initial global execution context.</source>
          <target state="translated">&lt;code&gt;window&lt;/code&gt; : la l&amp;iacute;nea marcada se eval&amp;uacute;a en el contexto de ejecuci&amp;oacute;n global inicial.</target>
        </trans-unit>
        <trans-unit id="f4be438a760254b14a91ab09c03d45c80ef71f1b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Few places where &lt;code&gt;this&lt;/code&gt; can be differentiated&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Pocos lugares donde &lt;code&gt;this&lt;/code&gt; se pueda diferenciar&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="09380dc0b6ee6bdf73de503a58ea18d71700e94d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;I recommend to better try this in &lt;a href=&quot;http://jsfiddle.net/Mahesha999/xKtzC/8/embedded/html,js,result&quot;&gt;JSFiddle&lt;/a&gt;.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Recomiendo probar esto mejor en &lt;a href=&quot;http://jsfiddle.net/Mahesha999/xKtzC/8/embedded/html,js,result&quot;&gt;JSFiddle&lt;/a&gt; .&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="89af8ce5b9c6ddaddba039f802cac788a61fd49a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Since this thread has bumped up, I have compiled few points for readers new to &lt;code&gt;this&lt;/code&gt; topic.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Dado que este hilo ha aumentado, he compilado algunos puntos para los lectores nuevos en &lt;code&gt;this&lt;/code&gt; tema.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="cf09c380c346a11478b95850016d50cc8b3825f2" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;To reveal the answers, mouse over the light yellow boxes.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Para revelar las respuestas, pase el mouse sobre los cuadros amarillos claros.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5ff1f9889e4b9c65093673c35d707361ce7a29d6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;1. When used in global context&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;1. Cuando se usa en contexto global&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1cb747759f0fbb0bff69036f9d6d60f4aa3fa28d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;2. When used inside object method&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;2. Cuando se usa dentro del m&amp;eacute;todo de objeto&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3a912f1682aefdda6a1d36527df19cad6af2400d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;3. When invoking context-less function&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;3. Al invocar la funci&amp;oacute;n sin contexto&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bc4963b484aa9c5ab6a24d462de6d79d10013299" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;4. When used inside constructor function&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;4. Cuando se usa dentro de la funci&amp;oacute;n constructora&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="1151d51ab92181c7cb05dad8e085d7369e1d980f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;5. When used inside function defined on prototype chain&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;5. Cuando se utiliza dentro de la funci&amp;oacute;n definida en la cadena del prototipo&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b1836a9a4449c1ab65274d2b92c93146cbd04cfc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;6. Inside call(), apply() and bind() functions&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;6. Dentro de las funciones call (), apply () y bind ()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a5eb140bea3b13dba943d1a806bc843988b98056" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;7. &lt;code&gt;this&lt;/code&gt; inside event handlers&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;7. &lt;code&gt;this&lt;/code&gt; dentro de los controladores de eventos&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e9d21ab1911b874d328796c84c4b427f924e6226" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;8. &lt;code&gt;this&lt;/code&gt; in ES6 arrow function&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;8. &lt;code&gt;this&lt;/code&gt; en la funci&amp;oacute;n de flecha ES6&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="718494e8c6739afd0ac4b8944ca72f98a1b42d96" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;fun.apply(obj1 [, argsArray])&lt;/code&gt;&lt;/strong&gt; Sets &lt;code&gt;obj1&lt;/code&gt; as the value of &lt;code&gt;this&lt;/code&gt; inside &lt;code&gt;fun()&lt;/code&gt; and calls &lt;code&gt;fun()&lt;/code&gt; passing elements of &lt;code&gt;argsArray&lt;/code&gt; as its arguments.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;fun.apply(obj1 [, argsArray])&lt;/code&gt; &lt;/strong&gt; Establece &lt;code&gt;obj1&lt;/code&gt; como el valor de &lt;code&gt;this&lt;/code&gt; dentro de &lt;code&gt;fun()&lt;/code&gt; y llama a &lt;code&gt;fun()&lt;/code&gt; pasando elementos de &lt;code&gt;argsArray&lt;/code&gt; como sus argumentos.</target>
        </trans-unit>
        <trans-unit id="9efe54b50d151a789da3c3d7e3f5f9c6142683ab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;fun.bind(obj1 [, arg1 [, arg2 [,arg3 [, ...]]]])&lt;/code&gt;&lt;/strong&gt; - Returns the reference to the function &lt;code&gt;fun&lt;/code&gt; with &lt;code&gt;this&lt;/code&gt; inside fun bound to &lt;code&gt;obj1&lt;/code&gt; and parameters of &lt;code&gt;fun&lt;/code&gt; bound to the   parameters specified &lt;code&gt;arg1, arg2, arg3,...&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;fun.bind(obj1 [, arg1 [, arg2 [,arg3 [, ...]]]])&lt;/code&gt; &lt;/strong&gt; - Devuelve la referencia a la funci&amp;oacute;n &lt;code&gt;fun&lt;/code&gt; con &lt;code&gt;this&lt;/code&gt; diversi&amp;oacute;n interna vinculada a &lt;code&gt;obj1&lt;/code&gt; y par&amp;aacute;metros de &lt;code&gt;fun&lt;/code&gt; vinculados a los par&amp;aacute;metros especificados &lt;code&gt;arg1, arg2, arg3,...&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2fa93f1be283db9398b00d14dcb4562d31a96a58" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;fun.call(obj1 [, arg1 [, arg2 [,arg3 [, ...]]]])&lt;/code&gt;&lt;/strong&gt; - Sets &lt;code&gt;obj1&lt;/code&gt; as the value of &lt;code&gt;this&lt;/code&gt; inside &lt;code&gt;fun()&lt;/code&gt; and calls &lt;code&gt;fun()&lt;/code&gt; passing &lt;code&gt;arg1, arg2, arg3, ...&lt;/code&gt; as its arguments.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;fun.call(obj1 [, arg1 [, arg2 [,arg3 [, ...]]]])&lt;/code&gt; &lt;/strong&gt; - Establece &lt;code&gt;obj1&lt;/code&gt; como el valor de &lt;code&gt;this&lt;/code&gt; dentro de &lt;code&gt;fun()&lt;/code&gt; y llama a &lt;code&gt;fun()&lt;/code&gt; pasando &lt;code&gt;arg1, arg2, arg3, ...&lt;/code&gt; como sus argumentos.</target>
        </trans-unit>
        <trans-unit id="418f0b4779a9d1418d184d2b02d0207c370e9e79" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;References:&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;References:&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="78d38ee0591e57aa045e4c0f056e77a623a22b30" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;DOM event this&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;DOM evento esto&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0611618ab4bef86d4217dc74878abb5876ef1d1f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Everything else is syntactic sugar for &lt;code&gt;functionObject.call&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Todo lo dem&amp;aacute;s es az&amp;uacute;car sint&amp;aacute;ctica para &lt;code&gt;functionObject.call&lt;/code&gt; &lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="085e18e665d8e1d81d0ca5c6a9023f7d3da54da0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;FUNCTION IS CALLED EXPLICITLY USING CALL AND APPLY METHODS.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;LA FUNCI&amp;Oacute;N SE LLAMA EXPL&amp;Iacute;CITAMENTE UTILIZANDO M&amp;Eacute;TODOS DE LLAMADA Y APLICACI&amp;Oacute;N.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d75456f909e4fd7563b46975c382623f3dc3c8e9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;FUNCTION IS CALLED WITH NEW KEYWORD&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;LA FUNCI&amp;Oacute;N SE LLAMA CON NUEVA PALABRA CLAVE&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1325e530872f52dae1b1e7bc729151d7fd17b95d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;For event handlers:&lt;/strong&gt; inline event handlers, such as &lt;code&gt;&amp;lt;element onclick=&quot;foo&quot;&amp;gt;&lt;/code&gt;, override any other handlers attached earlier and before, so be careful and it's better to stay off of inline event delegation at all.
And thanks to Zara Alaverdyan who inspired me to this list of examples through a dissenting debate :)</source>
          <target state="translated">&lt;strong&gt;Para los controladores de eventos: los controladores&lt;/strong&gt; de eventos en l&amp;iacute;nea, como &lt;code&gt;&amp;lt;element onclick=&quot;foo&quot;&amp;gt;&lt;/code&gt; , anulan cualquier otro controlador adjunto antes y antes, as&amp;iacute; que tenga cuidado y es mejor mantenerse alejado de la delegaci&amp;oacute;n de eventos en l&amp;iacute;nea. Y gracias a Zara Alaverdyan que me inspir&amp;oacute; a esta lista de ejemplos a trav&amp;eacute;s de un debate disidente :)</target>
        </trans-unit>
        <trans-unit id="894baeb26ee211c848adbf141fef8ea332f2d512" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Global Context&lt;/strong&gt; (i.e. Outside all functions):</source>
          <target state="translated">&lt;strong&gt;Contexto global&lt;/strong&gt; (es decir, fuera de todas las funciones):</target>
        </trans-unit>
        <trans-unit id="168e0b60ab24edf5659b7603a5e6761ba4b78bc1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Global&lt;/strong&gt; (i.e. Outside all functions)</source>
          <target state="translated">&lt;strong&gt;Global&lt;/strong&gt; (es decir, fuera de todas las funciones)</target>
        </trans-unit>
        <trans-unit id="a9b296c5fddc1bb4ff71359ff1b16bcabd27c0ee" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;HTML this&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;HTML esto&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="917118becd0e6d67a05db3eed2df871405cda7a7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;IF FUNCTION IS CALLED WITH OBJECT IMPLICITLY THEN THIS WILL BE BOUND TO THAT OBJECT&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;SI LA FUNCI&amp;Oacute;N SE LLAMA AL OBJETO IMPL&amp;Iacute;CITAMENTE, ESTAR&amp;Aacute; LIGADO A ESE OBJETO&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2ba8db8e3f1fc0f64367058719c6e34521b6988c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;IN STRICT MODE THIS WILL BE UNDEFINED&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;EN MODO ESTRICTO ESTO NO SER&amp;Aacute; DEFINIDO&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6d0ea3429b59410b8f4d00a4cc84074280bda9ab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Inside &quot;Bound Function&quot; Call&lt;/strong&gt; (i.e. a function that &lt;strong&gt;has been bound&lt;/strong&gt; by calling &lt;strong&gt;&lt;em&gt;functionName.bind&lt;/em&gt;&lt;/strong&gt;)</source>
          <target state="translated">&lt;strong&gt;Llamada interna &quot;Funci&amp;oacute;n&lt;/strong&gt; &lt;strong&gt;vinculada&lt;/strong&gt; &lt;strong&gt;&quot;&lt;/strong&gt; (es decir, una funci&amp;oacute;n que &lt;strong&gt;se ha vinculado&lt;/strong&gt; al llamar a &lt;strong&gt;&lt;em&gt;functionName.bind&lt;/em&gt;&lt;/strong&gt; )</target>
        </trans-unit>
        <trans-unit id="173ec8ce03dcc96425b564f955f3e8db1cca03ff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Inside &quot;Bound Function&quot; Call&lt;/strong&gt; (i.e. a function that has been bound by calling &lt;strong&gt;&lt;em&gt;functionName.bind&lt;/em&gt;&lt;/strong&gt;):</source>
          <target state="translated">&lt;strong&gt;Llamada interior de &quot;Funci&amp;oacute;n&lt;/strong&gt; vinculada &lt;strong&gt;&quot;&lt;/strong&gt; (es decir, una funci&amp;oacute;n que se ha vinculado llamando a &lt;strong&gt;&lt;em&gt;functionName.bind&lt;/em&gt;&lt;/strong&gt; ):</target>
        </trans-unit>
        <trans-unit id="3e875249daa0473a8fdf23ad502cdf3367b1cde8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Inside Direct &quot;Non Bound Function&quot; Call&lt;/strong&gt; (i.e. a function that has &lt;strong&gt;not been&lt;/strong&gt; bound by calling &lt;strong&gt;&lt;em&gt;functionName.bind&lt;/em&gt;&lt;/strong&gt;)</source>
          <target state="translated">&lt;strong&gt;Llamada directa interna de &quot;&lt;/strong&gt; funci&amp;oacute;n &lt;strong&gt;no&lt;/strong&gt; vinculada &lt;strong&gt;&quot;&lt;/strong&gt; (es decir, una funci&amp;oacute;n que &lt;strong&gt;no se ha&lt;/strong&gt; vinculado llamando a &lt;strong&gt;&lt;em&gt;functionName.bind&lt;/em&gt;&lt;/strong&gt; )</target>
        </trans-unit>
        <trans-unit id="8c57485accd3f8de730dc301d4b4402bc9d5ff6a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Inside Direct &quot;Non Bound Function&quot; Call&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;Llamada directa interna &quot;Funci&amp;oacute;n no vinculada&quot;&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="20b6606bfe8a1a339672457b5987c0bbe9801b32" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Inside Indirect &quot;Non Bound Function&quot; Call&lt;/strong&gt; through &lt;strong&gt;&lt;em&gt;functionName.call&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;functionName.apply&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Llamada indirecta interna de &quot;Funci&amp;oacute;n no vinculada&quot; a&lt;/strong&gt; trav&amp;eacute;s de &lt;strong&gt;&lt;em&gt;functionName.call&lt;/em&gt;&lt;/strong&gt; y &lt;strong&gt;&lt;em&gt;functionName.apply&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6f6bbd439250c2f70bd753a9c1867ff4ae0334cd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Inside Indirect &quot;Non Bound Function&quot; Call&lt;/strong&gt; through &lt;strong&gt;&lt;em&gt;functionName.call&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;functionName.apply&lt;/em&gt;&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;Llamada indirecta interior de &quot;Funci&amp;oacute;n no vinculada&quot; a&lt;/strong&gt; trav&amp;eacute;s de &lt;strong&gt;&lt;em&gt;functionName.call&lt;/em&gt;&lt;/strong&gt; y &lt;strong&gt;&lt;em&gt;functionName.apply&lt;/em&gt;&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="b687e55bef18e96403dcec84a064997fff961ba4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Inside Inline DOM event handler&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Controlador interno de eventos DOM en l&amp;iacute;nea&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7b733413aa17352a3e9b6ca5623c81d22f47452b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Inside Inline DOM event handler&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;Controlador interno de eventos DOM en l&amp;iacute;nea&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="266e0d16f0275a7b45db6e40b0e84253044c47e0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Trying it all with functions&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Prob&amp;aacute;ndolo todo con funciones&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b798c488f44ac56ef97819e55be72d13bc6ae204" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;WHEN FUNCTION IS CALLED WITHOUT ANY CONTEXT THEN THIS WILL BE BOUND TO GLOBAL OBJECT&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;CUANDO LA FUNCI&amp;Oacute;N SE LLAMA SIN NING&amp;Uacute;N CONTEXTO, ESTO ESTAR&amp;Aacute; L&amp;Iacute;MITE AL OBJETO GLOBAL&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1ff4d1e2e595c31a6b0764e1ad94e2fa48fffb37" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;While Object Creation through &quot;new&quot;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Mientras que la creaci&amp;oacute;n de objetos a trav&amp;eacute;s de &quot;nuevo&quot;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b8198d31ce2fb4af76a276cd2353f3b893b2b3c6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;While Object Creation through &quot;new&quot;&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;Mientras que la creaci&amp;oacute;n de objetos a trav&amp;eacute;s de &quot;nuevo&quot;&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="bd0054da704663fa349cd05f6dec86874b0a5b98" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eval this&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;eval&amp;uacute;a esto&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5b6e7cb5e761aba02987ecc24374a500c50b2f3b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;function this&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;funciona esto&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d575ef4572a4d0f70d88145f3266940c01dbe092" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;global this&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;global esto&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cf73e6df87566417c40b38e407048179eb72abf0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;jQuery this&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;jQuery this&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="267215baf52fd6931b04140eff3d560dfdf04823" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;object this&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;objetar esto&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f6993e186af398b71572f7532218e7b60a53b53e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;prototype this&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;prototipo de esto&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f609ef0b01e29c7688ac86f84c3b2fd9542bc770" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;this &amp;amp; Object Prototypes&lt;/strong&gt;, by Kyle Simpson. &amp;copy; 2014 Getify Solutions.</source>
          <target state="translated">&lt;strong&gt;this &amp;amp; Object Prototypes&lt;/strong&gt; , de Kyle Simpson. &amp;copy; 2014 Getify Solutions.</target>
        </trans-unit>
        <trans-unit id="d68567ba0092c29c333f4067dcc1219804e03507" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;with this&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;con este&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9bb486259298102ba39377e4ed03a0fb81bf8790" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;1&lt;/sup&gt;&lt;code&gt;apply&lt;/code&gt; is another function similar to &lt;code&gt;call&lt;/code&gt;</source>
          <target state="translated">&lt;sup&gt;1&lt;/sup&gt; &lt;code&gt;apply&lt;/code&gt; es otra funci&amp;oacute;n similar a &lt;code&gt;call&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="521d8887a5ef2e61310029a52ca75b452424b493" translate="yes" xml:space="preserve">
          <source>A bound function is a function whose &lt;strong&gt;&quot;this&quot;&lt;/strong&gt; value has been
fixed. The following code demonstrated how &lt;strong&gt;&quot;this&quot;&lt;/strong&gt; works in case
of bound function</source>
          <target state="translated">Una funci&amp;oacute;n enlazada es una funci&amp;oacute;n cuyo &lt;strong&gt;&quot;este&quot;&lt;/strong&gt; valor se ha corregido. El siguiente c&amp;oacute;digo demostr&amp;oacute; c&amp;oacute;mo funciona &lt;strong&gt;&quot;esto&quot;&lt;/strong&gt; en caso de funci&amp;oacute;n vinculada</target>
        </trans-unit>
        <trans-unit id="ef2db31f656b33473e747f5be7b06a3421bd96e7" translate="yes" xml:space="preserve">
          <source>A little bit info about &lt;strong&gt;this&lt;/strong&gt; keyword</source>
          <target state="translated">Un poco de informaci&amp;oacute;n sobre &lt;strong&gt;esta&lt;/strong&gt; palabra clave</target>
        </trans-unit>
        <trans-unit id="bba748cf8bf63af49cb69595a0f4e85a54d40178" translate="yes" xml:space="preserve">
          <source>Above &lt;code&gt;f1&lt;/code&gt; is made a method of global object. Thus we can also call it on &lt;code&gt;window&lt;/code&gt; object as follows:</source>
          <target state="translated">Por encima de &lt;code&gt;f1&lt;/code&gt; se hace un m&amp;eacute;todo de objeto global. Por lo tanto, tambi&amp;eacute;n podemos llamarlo en el objeto de &lt;code&gt;window&lt;/code&gt; siguiente manera:</target>
        </trans-unit>
        <trans-unit id="b753f43e6cc93cab6d731a784a044886d520b74f" translate="yes" xml:space="preserve">
          <source>Above I have put the word immediate in double quotes. It is to make the point that if you nest the object inside another object, then &lt;code&gt;this&lt;/code&gt; is bound to the immediate parent.</source>
          <target state="translated">Arriba he puesto la palabra inmediata entre comillas dobles. Es para se&amp;ntilde;alar que si anida el objeto dentro de otro objeto, &lt;code&gt;this&lt;/code&gt; est&amp;aacute; vinculado al elemento primario inmediato.</target>
        </trans-unit>
        <trans-unit id="d0e03fe81743bbdb1803208b752058307d77c7c9" translate="yes" xml:space="preserve">
          <source>Above we added members to objects using object literal notation. We can add members to functions by using &lt;code&gt;this&lt;/code&gt;. to specify them.</source>
          <target state="translated">Arriba agregamos miembros a los objetos usando notaci&amp;oacute;n literal de objetos. Podemos agregar miembros a las funciones usando &lt;code&gt;this&lt;/code&gt; . para especificarlos.</target>
        </trans-unit>
        <trans-unit id="378cd99eed8979a93e73069d633b7546f12e1467" translate="yes" xml:space="preserve">
          <source>Above we create 3 variables with same name 'val'. One in global context, one inside obj and the other inside innerMethod of obj. JavaScript resolves identifiers within a particular context by going up the scope chain from local go global.</source>
          <target state="translated">Arriba creamos 3 variables con el mismo nombre 'val'.Una en el contexto global,una dentro del objeto y la otra dentro del método interno del objeto.JavaScript resuelve los identificadores dentro de un contexto particular subiendo por la cadena de alcance desde lo local hasta lo global.</target>
        </trans-unit>
        <trans-unit id="4fbc9235f1c80f74cce8e944e82472b1cf3e26c7" translate="yes" xml:space="preserve">
          <source>Again these all are just syntactic sugar for</source>
          <target state="translated">De nuevo,todo esto es sólo azúcar sintáctico para</target>
        </trans-unit>
        <trans-unit id="44f5606c7c264327eaf36478d243b0e4ee2e66c7" translate="yes" xml:space="preserve">
          <source>All functions inherit from the global &lt;code&gt;Function&lt;/code&gt;, and two of its many methods are &lt;code&gt;call&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt;, and both can be used to manipulate the value of &lt;code&gt;this&lt;/code&gt; in the function on which they are called.</source>
          <target state="translated">Todas las funciones heredan de la &lt;code&gt;Function&lt;/code&gt; global, y dos de sus muchos m&amp;eacute;todos son &lt;code&gt;call&lt;/code&gt; y &lt;code&gt;apply&lt;/code&gt; , y ambos pueden usarse para manipular el valor de &lt;code&gt;this&lt;/code&gt; en la funci&amp;oacute;n en la que se llaman.</target>
        </trans-unit>
        <trans-unit id="65bb256adbc34f0e662f2e6886cf45e5da2fe2e0" translate="yes" xml:space="preserve">
          <source>All these methods are defined on &lt;code&gt;Function.prototype&lt;/code&gt;.</source>
          <target state="translated">Todos estos m&amp;eacute;todos est&amp;aacute;n definidos en &lt;code&gt;Function.prototype&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2f3251d2eefcb2ea293e403dfdf0b701c95967f7" translate="yes" xml:space="preserve">
          <source>Also in an object literal approach, we can explicitly add members to already defined object using dot operator. This gets added to the specific instance only. However I have added variable to the function prototype so that it gets reflected in all instances of the function.</source>
          <target state="translated">También en un enfoque de objeto literal,podemos agregar explícitamente miembros a un objeto ya definido usando el operador de punto.Esto se agrega sólo a la instancia específica.Sin embargo,he añadido variable al prototipo de la función para que se refleje en todas las instancias de la función.</target>
        </trans-unit>
        <trans-unit id="42a17cccb4a20658564c0ef8e45cbac226648a85" translate="yes" xml:space="preserve">
          <source>Also note that neither of these three functions do any change to the original function. &lt;code&gt;call&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt; would return the value from freshly constructed functions while &lt;code&gt;bind&lt;/code&gt; will return the freshly constructed function itself, ready to be called.</source>
          <target state="translated">Tambi&amp;eacute;n tenga en cuenta que ninguna de estas tres funciones cambia la funci&amp;oacute;n original. &lt;code&gt;call&lt;/code&gt; y &lt;code&gt;apply&lt;/code&gt; devolver&amp;iacute;a el valor de las funciones reci&amp;eacute;n construidas, mientras que &lt;code&gt;bind&lt;/code&gt; devolver&amp;aacute; la funci&amp;oacute;n reci&amp;eacute;n construida, lista para ser llamada.</target>
        </trans-unit>
        <trans-unit id="96bacdecd2f20c6e4133c59029163b3a5024cc7a" translate="yes" xml:space="preserve">
          <source>Angus Croll - &lt;a href=&quot;http://goo.gl/Z2RacU&quot;&gt;http://goo.gl/Z2RacU&lt;/a&gt;</source>
          <target state="translated">Angus Croll - &lt;a href=&quot;http://goo.gl/Z2RacU&quot;&gt;http://goo.gl/Z2RacU&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fc6d0b4a3431a2895e9d69a29dd7c9026e676f98" translate="yes" xml:space="preserve">
          <source>Arrow functions</source>
          <target state="translated">Funciones de las flechas</target>
        </trans-unit>
        <trans-unit id="0c6f0eb1c1ab36699d24af9b8c41dcdfa8f179e2" translate="yes" xml:space="preserve">
          <source>Arrow functions don't have their own &lt;code&gt;this&lt;/code&gt;.... binding.
  Instead, those identifiers are resolved in the lexical scope like any
  other variable. That means that inside an arrow function, &lt;code&gt;this&lt;/code&gt;...refer(s) to the values of &lt;code&gt;this&lt;/code&gt; in the environment
  the arrow function is defined in.</source>
          <target state="translated">Las funciones de flecha no tienen su propio ... enlace. En cambio, esos identificadores se resuelven en el &amp;aacute;mbito l&amp;eacute;xico como cualquier otra variable. Eso significa que dentro de una funci&amp;oacute;n de flecha, &lt;code&gt;this&lt;/code&gt; ... hace referencia a los valores de &lt;code&gt;this&lt;/code&gt; en el entorno en el que se define la funci&amp;oacute;n de flecha.</target>
        </trans-unit>
        <trans-unit id="b50c4e79c0e3f7852862c14187e6ddd0825a3bd5" translate="yes" xml:space="preserve">
          <source>Arrow functions, the &lt;code&gt;=&amp;gt;&lt;/code&gt; operator are syntactic sugar for bind</source>
          <target state="translated">Las funciones de flecha, el operador &lt;code&gt;=&amp;gt;&lt;/code&gt; son az&amp;uacute;car sint&amp;aacute;ctica para enlace</target>
        </trans-unit>
        <trans-unit id="203d51646bb4fd08eace6d614d8c939e2e57a916" translate="yes" xml:space="preserve">
          <source>As given in the code above, &lt;strong&gt;&quot;this&quot; value for any &quot;Bound Function&quot;
CANNOT be altered through call/apply&lt;/strong&gt;. Also, if the &lt;strong&gt;&quot;this&quot;&lt;/strong&gt;
parameter is  not explicitly passed to bind, &lt;strong&gt;&quot;current object&quot;&lt;/strong&gt;
(and hence the value of &lt;strong&gt;&quot;this&quot;&lt;/strong&gt; ) is set to &lt;strong&gt;&quot;window&quot;&lt;/strong&gt; in Non
strict mode and &lt;strong&gt;&quot;undefined&quot;&lt;/strong&gt; in strict mode.  One more thing.
Binding an already bound function does not change the value of &lt;strong&gt;&quot;this&quot;&lt;/strong&gt;.
It remains set as the value set by first bind function.</source>
          <target state="translated">Como se indica en el c&amp;oacute;digo anterior, el &lt;strong&gt;valor &quot;este&quot; para cualquier &quot;Funci&amp;oacute;n vinculada&quot; NO PUEDE ser alterado a trav&amp;eacute;s de llamar / aplicar&lt;/strong&gt; . Adem&amp;aacute;s, si el par&amp;aacute;metro &lt;strong&gt;&quot;this&quot;&lt;/strong&gt; no se pasa expl&amp;iacute;citamente a bind, &lt;strong&gt;&quot;objeto actual&quot;&lt;/strong&gt; (y, por lo tanto, el valor de &lt;strong&gt;&quot;this&quot;&lt;/strong&gt; ) se establece en &lt;strong&gt;&quot;window&quot;&lt;/strong&gt; en modo no estricto y &lt;strong&gt;&quot;undefined&quot;&lt;/strong&gt; en modo estricto. Una cosa m&amp;aacute;s. La vinculaci&amp;oacute;n de una funci&amp;oacute;n ya vinculada no cambia el valor de &lt;strong&gt;&quot;esto&quot;&lt;/strong&gt; . Permanece establecido como el valor establecido por la primera funci&amp;oacute;n de enlace.</target>
        </trans-unit>
        <trans-unit id="d5edefb33540455ad04404ac360e751fa53a32fc" translate="yes" xml:space="preserve">
          <source>Below I tried out all the things that we did with Object and &lt;code&gt;this&lt;/code&gt; above, but by first creating function instead of directly writing an object.</source>
          <target state="translated">A continuaci&amp;oacute;n, prob&amp;eacute; todas las cosas que hicimos con Object y &lt;code&gt;this&lt;/code&gt; arriba, pero creando primero la funci&amp;oacute;n en lugar de escribir directamente un objeto.</target>
        </trans-unit>
        <trans-unit id="1304a85574c9a47bfc387cb1181284252d8be183" translate="yes" xml:space="preserve">
          <source>Binding and already bound function does not change the value of &quot;this&quot;. It remains set as the value set by first bind function.</source>
          <target state="translated">La función de vinculación y ya vinculada no cambia el valor de &quot;esto&quot;.Permanece como el valor fijado por la función de primera unión.</target>
        </trans-unit>
        <trans-unit id="21140ee58286bc8b79afc046971cefc9d15813d9" translate="yes" xml:space="preserve">
          <source>But as of ES6 conceptually you can even translate that into</source>
          <target state="translated">Pero a partir del ES6 conceptualmente puedes incluso traducirlo a</target>
        </trans-unit>
        <trans-unit id="65a473e0027f5ed69ce186b407bc8fdb48bdca1e" translate="yes" xml:space="preserve">
          <source>By default, and what confuses most beginners, when a listener is called after an event is raised on a DOM element, the &lt;em&gt;this&lt;/em&gt; value of the function is the DOM element.</source>
          <target state="translated">Por defecto, y lo que confunde a la mayor&amp;iacute;a de los principiantes, cuando se llama a un oyente despu&amp;eacute;s de que se genera un evento en un elemento DOM, &lt;em&gt;este&lt;/em&gt; valor de la funci&amp;oacute;n es el elemento DOM.</target>
        </trans-unit>
        <trans-unit id="d6d441b4209195e14353f9a1f6054d514dd9abbd" translate="yes" xml:space="preserve">
          <source>By now the difference between &lt;code&gt;apply&lt;/code&gt;, &lt;code&gt;call&lt;/code&gt; and &lt;code&gt;bind&lt;/code&gt; must have become apparent. &lt;code&gt;apply&lt;/code&gt; allows to specify the arguments to function as array-like object i.e. an object with a numeric &lt;code&gt;length&lt;/code&gt; property and corresponding non-negative integer properties. Whereas &lt;code&gt;call&lt;/code&gt; allows to specify the arguments to the function directly. Both &lt;code&gt;apply&lt;/code&gt; and &lt;code&gt;call&lt;/code&gt; immediately invokes the function in the specified context and with the specified arguments. On the other hand, &lt;code&gt;bind&lt;/code&gt; simply returns the function bound to the specified &lt;code&gt;this&lt;/code&gt; value and the arguments. We can capture the reference to this returned function by assigning it to a variable and later we can call it any time.</source>
          <target state="translated">Por ahora, la diferencia entre &lt;code&gt;apply&lt;/code&gt; , &lt;code&gt;call&lt;/code&gt; y &lt;code&gt;bind&lt;/code&gt; debe haberse hecho evidente. &lt;code&gt;apply&lt;/code&gt; permite especificar los argumentos para funcionar como un objeto tipo matriz, es decir, un objeto con una propiedad de &lt;code&gt;length&lt;/code&gt; num&amp;eacute;rica y propiedades de enteros no negativos correspondientes. Mientras que &lt;code&gt;call&lt;/code&gt; permite especificar los argumentos de la funci&amp;oacute;n directamente. Tanto &lt;code&gt;apply&lt;/code&gt; como &lt;code&gt;call&lt;/code&gt; invoca inmediatamente la funci&amp;oacute;n en el contexto especificado y con los argumentos especificados. Por otro lado, &lt;code&gt;bind&lt;/code&gt; simplemente devuelve la funci&amp;oacute;n vinculada al valor especificado y los argumentos. Podemos capturar la referencia a esta funci&amp;oacute;n devuelta asign&amp;aacute;ndola a una variable y luego podemos llamarla en cualquier momento.</target>
        </trans-unit>
        <trans-unit id="f4ff7db3d2943e81347a74ac6f68ad3f64995792" translate="yes" xml:space="preserve">
          <source>Calling a function on an object</source>
          <target state="translated">Llamar una función en un objeto</target>
        </trans-unit>
        <trans-unit id="8967949e0052bf4fec471f1e862bcdb2f857d888" translate="yes" xml:space="preserve">
          <source>Calling a method of a object</source>
          <target state="translated">Llamar a un método de un objeto</target>
        </trans-unit>
        <trans-unit id="2a0f01b7dbab312f469277a939897da668bb1530" translate="yes" xml:space="preserve">
          <source>Calling functions on Functions: &lt;code&gt;call&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt;</source>
          <target state="translated">Funciones de &lt;code&gt;call&lt;/code&gt; en funciones: llamar y &lt;code&gt;apply&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3a2d9c2f761f313e12a3f59af3ad126c32d5b68b" translate="yes" xml:space="preserve">
          <source>Calling the function with the &lt;code&gt;new&lt;/code&gt; keyword would immediately initialize an &lt;code&gt;Object&lt;/code&gt; of type &lt;code&gt;Person&lt;/code&gt;.</source>
          <target state="translated">Llamar a la funci&amp;oacute;n con la &lt;code&gt;new&lt;/code&gt; palabra clave inicializar&amp;iacute;a inmediatamente un &lt;code&gt;Object&lt;/code&gt; de tipo &lt;code&gt;Person&lt;/code&gt; a .</target>
        </trans-unit>
        <trans-unit id="8c59fcda4559bb7741c9e317275c16e64acbc60a" translate="yes" xml:space="preserve">
          <source>Consider a constructor function in Javascript:</source>
          <target state="translated">Considere una función de constructor en Javascript:</target>
        </trans-unit>
        <trans-unit id="908dded501f1eb025abaae1e462f1b9398ed9b15" translate="yes" xml:space="preserve">
          <source>Consider the following function:</source>
          <target state="translated">Considere la siguiente función:</target>
        </trans-unit>
        <trans-unit id="88d43b78335fb71e23d3a8324b00ba1dcbae38f4" translate="yes" xml:space="preserve">
          <source>Considering a more commonly practical scenario:</source>
          <target state="translated">Considerando un escenario más comúnmente práctico:</target>
        </trans-unit>
        <trans-unit id="e15054647d5d4825673bec78e395e8f11fd5d1bd" translate="yes" xml:space="preserve">
          <source>Copying &lt;code&gt;this&lt;/code&gt; to solve nested-scope issues.</source>
          <target state="translated">Copiando &lt;code&gt;this&lt;/code&gt; para resolver problemas de alcance anidado.</target>
        </trans-unit>
        <trans-unit id="04b00eef3c0f84d63c5bf373bc4fbfa1f1f1f418" translate="yes" xml:space="preserve">
          <source>Daniel, awesome explanation! A couple of words on this and good list of &lt;code&gt;this&lt;/code&gt; execution context pointer in case of event handlers.</source>
          <target state="translated">Daniel, &amp;iexcl;una explicaci&amp;oacute;n asombrosa! Un par de palabras en esta y buena lista de &lt;code&gt;this&lt;/code&gt; puntero de contexto de ejecuci&amp;oacute;n en caso de controladores de eventos.</target>
        </trans-unit>
        <trans-unit id="df12cce3f2c22b0cfea79b58f42e474a2d9806ee" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;https://leanpub.com/understandinges6/read&quot;&gt;ECMA Script 6&lt;/a&gt;, arrow-functions adopt the &lt;code&gt;this&lt;/code&gt; binding from the
enclosing (function or global) scope.</source>
          <target state="translated">Definido en el &lt;a href=&quot;https://leanpub.com/understandinges6/read&quot;&gt;Script 6 de ECMA&lt;/a&gt; , las funciones de flecha adoptan el enlace &lt;code&gt;this&lt;/code&gt; desde el &amp;aacute;mbito de cierre (funci&amp;oacute;n o global).</target>
        </trans-unit>
        <trans-unit id="128f370e01dcc41eacea0f41d2c828ef2ac1d087" translate="yes" xml:space="preserve">
          <source>Entering eval code</source>
          <target state="translated">Introduciendo el código de evaluación</target>
        </trans-unit>
        <trans-unit id="2ee3bc84b3cdd8c94c92611d8db5e0176f368f84" translate="yes" xml:space="preserve">
          <source>Entering function code</source>
          <target state="translated">Introducir el código de función</target>
        </trans-unit>
        <trans-unit id="6d5f131f63e2b46f200e419e32d757a476bff5fb" translate="yes" xml:space="preserve">
          <source>Even if you add function explicitly to the object as a method, it still follows above rules, that is &lt;code&gt;this&lt;/code&gt; still points to the immediate parent object.</source>
          <target state="translated">Incluso si agrega la funci&amp;oacute;n expl&amp;iacute;citamente al objeto como m&amp;eacute;todo, sigue las reglas anteriores, es decir, &lt;code&gt;this&lt;/code&gt; todav&amp;iacute;a apunta al objeto primario inmediato.</target>
        </trans-unit>
        <trans-unit id="5bd2dbf0b8d00773801e52b8a0a2d5c918eeff2f" translate="yes" xml:space="preserve">
          <source>Every &lt;em&gt;execution context&lt;/em&gt; in javascript has a &lt;em&gt;this&lt;/em&gt; parameter that is set by:</source>
          <target state="translated">Cada &lt;em&gt;contexto de ejecuci&amp;oacute;n&lt;/em&gt; en javascript tiene un par&amp;aacute;metro establecido por:</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="05376964e6969860e3233532567e5c90c576ce63" translate="yes" xml:space="preserve">
          <source>Example constructor:</source>
          <target state="translated">Ejemplo de constructor:</target>
        </trans-unit>
        <trans-unit id="4e8e909da4d8e05122cc933de6fde902781e02f1" translate="yes" xml:space="preserve">
          <source>Example event listeners:</source>
          <target state="translated">Ejemplo de oyentes de eventos:</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="27a003083ab2583d3a2ad4eed814443aff4033fd" translate="yes" xml:space="preserve">
          <source>Except in the case of DOM event handlers or when a &lt;code&gt;thisArg&lt;/code&gt; is provided (see further down), both in node and in a browser using &lt;code&gt;this&lt;/code&gt; in a function that is not called with &lt;code&gt;new&lt;/code&gt; references the global scope&amp;hellip;</source>
          <target state="translated">Excepto en el caso de controladores de eventos DOM o cuando se proporciona &lt;code&gt;thisArg&lt;/code&gt; (ver m&amp;aacute;s abajo), tanto en el nodo como en un navegador que usa &lt;code&gt;this&lt;/code&gt; en una funci&amp;oacute;n que no se llama con &lt;code&gt;new&lt;/code&gt; referencias al alcance global ...</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">Ampliar fragmento</target>
        </trans-unit>
        <trans-unit id="ee189376deeee0556de246c1ff07244efeae84a9" translate="yes" xml:space="preserve">
          <source>Extra stuff, copy this</source>
          <target state="translated">Material extra,copia esto</target>
        </trans-unit>
        <trans-unit id="a79ebf936a8f65b125ea48abc5225b5dc6cabb06" translate="yes" xml:space="preserve">
          <source>Following the translation to use &lt;code&gt;call&lt;/code&gt;, &lt;code&gt;obj.bar()&lt;/code&gt; becomes &lt;code&gt;const temp = obj.bar; temp.call(obj);&lt;/code&gt;. When we enter the &lt;code&gt;bar&lt;/code&gt; function we call &lt;code&gt;foo&lt;/code&gt; but we explicitly passed in another object for objectForThis so when we arrive at foo &lt;code&gt;this&lt;/code&gt; is that inner object.</source>
          <target state="translated">Despu&amp;eacute;s de la traducci&amp;oacute;n para usar &lt;code&gt;call&lt;/code&gt; , &lt;code&gt;obj.bar()&lt;/code&gt; convierte en &lt;code&gt;const temp = obj.bar; temp.call(obj);&lt;/code&gt; llamada temporal (obj); . Cuando ingresamos a la funci&amp;oacute;n de &lt;code&gt;bar&lt;/code&gt; ra , llamamos &lt;code&gt;foo&lt;/code&gt; pero expl&amp;iacute;citamente pasamos otro objeto por objectForThis, de modo que cuando llegamos a foo &lt;code&gt;this&lt;/code&gt; es ese objeto interno.</target>
        </trans-unit>
        <trans-unit id="987a7929690e08340ed411e619558b9514d1934d" translate="yes" xml:space="preserve">
          <source>For an arrow function (special case of context transparency) ask yourself:</source>
          <target state="translated">Para una función de flecha (caso especial de transparencia de contexto)pregúntese:</target>
        </trans-unit>
        <trans-unit id="f14045db7fd843c69383648cf94f75fb3d176a15" translate="yes" xml:space="preserve">
          <source>Function call</source>
          <target state="translated">Llamada de función</target>
        </trans-unit>
        <trans-unit id="845fc2d1f33b0159fa8601b6b79fdc1e053598bf" translate="yes" xml:space="preserve">
          <source>Functions you create become function objects. They automatically get a special &lt;code&gt;prototype&lt;/code&gt; property, which is something you can assign values to. When you create an instance by calling your function with &lt;code&gt;new&lt;/code&gt; you get access to the values you assigned to the &lt;code&gt;prototype&lt;/code&gt; property. You access those values using &lt;code&gt;this&lt;/code&gt;.</source>
          <target state="translated">Las funciones que crea se convierten en objetos de funci&amp;oacute;n. Obtienen autom&amp;aacute;ticamente una propiedad &lt;code&gt;prototype&lt;/code&gt; especial, que es algo a lo que puede asignar valores. Cuando crea una instancia llamando a su funci&amp;oacute;n con &lt;code&gt;new&lt;/code&gt; , obtiene acceso a los valores que asign&amp;oacute; a la propiedad del &lt;code&gt;prototype&lt;/code&gt; . Accede a esos valores usando &lt;code&gt;this&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="469e0788e79d852a9a805ea846c580f27362cc2a" translate="yes" xml:space="preserve">
          <source>Gentle explanation of 'this' keyword in JavaScript</source>
          <target state="translated">Suave explicación de &quot;esta&quot; palabra clave en JavaScript</target>
        </trans-unit>
        <trans-unit id="14a9ca90c670d793e8de8f4b937b4808ca9a99f8" translate="yes" xml:space="preserve">
          <source>He gives code examples, explanations, and solutions, which I thought was very helpful.</source>
          <target state="translated">Él da ejemplos de códigos,explicaciones y soluciones,lo que me pareció muy útil.</target>
        </trans-unit>
        <trans-unit id="542541ad020f39c0dd65066d67e5d1be86126656" translate="yes" xml:space="preserve">
          <source>Here is the summary:</source>
          <target state="translated">Aquí está el resumen:</target>
        </trans-unit>
        <trans-unit id="1d75950e5613f2d50e01a7e225b9725bf0505513" translate="yes" xml:space="preserve">
          <source>How do we manipulate &lt;code&gt;this&lt;/code&gt; with &lt;code&gt;call&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt;?</source>
          <target state="translated">&amp;iquest;C&amp;oacute;mo manipulamos &lt;code&gt;this&lt;/code&gt; con &lt;code&gt;call&lt;/code&gt; y &lt;code&gt;apply&lt;/code&gt; ?</target>
        </trans-unit>
        <trans-unit id="509b1a748402f9fa1f52f877d915151ea7eacf7c" translate="yes" xml:space="preserve">
          <source>How does &lt;code&gt;this&lt;/code&gt; work and when should it be used?</source>
          <target state="translated">&amp;iquest;C&amp;oacute;mo funciona &lt;code&gt;this&lt;/code&gt; y cu&amp;aacute;ndo debe usarse?</target>
        </trans-unit>
        <trans-unit id="c59a24b0ebdaf81d21086f1154af537b99a98f5d" translate="yes" xml:space="preserve">
          <source>How does the “this” keyword work</source>
          <target state="translated">¿Cómo funciona la palabra clave &quot;esto&quot;?</target>
        </trans-unit>
        <trans-unit id="8f5642913527f63ddc8d0489b7f04d5dca4b4e15" translate="yes" xml:space="preserve">
          <source>How does this work? Well, let's see what happens when we use the &lt;code&gt;new&lt;/code&gt; keyword.</source>
          <target state="translated">&amp;iquest;Como funciona esto? Bueno, veamos qu&amp;eacute; sucede cuando usamos la &lt;code&gt;new&lt;/code&gt; palabra clave.</target>
        </trans-unit>
        <trans-unit id="25cd4eb543ab592a2c8fdba2a85b8eac25657436" translate="yes" xml:space="preserve">
          <source>How is the function &lt;em&gt;invoked&lt;/em&gt;?</source>
          <target state="translated">&amp;iquest;C&amp;oacute;mo se &lt;em&gt;invoca&lt;/em&gt; la funci&amp;oacute;n?</target>
        </trans-unit>
        <trans-unit id="6f351646cb35f88a1be59388fbb15c6a9a0a2c91" translate="yes" xml:space="preserve">
          <source>How is the value of &lt;code&gt;this&lt;/code&gt; determined?</source>
          <target state="translated">&amp;iquest;C&amp;oacute;mo se determina el valor de &lt;code&gt;this&lt;/code&gt; ?</target>
        </trans-unit>
        <trans-unit id="2e8b8683e60bc5d1aab340b438427ac67cec8ead" translate="yes" xml:space="preserve">
          <source>How the function is called (including as an object method, use of &lt;em&gt;call&lt;/em&gt; and &lt;em&gt;apply&lt;/em&gt;, use of &lt;em&gt;new&lt;/em&gt;)</source>
          <target state="translated">C&amp;oacute;mo se llama a la funci&amp;oacute;n (incluso como m&amp;eacute;todo de objeto, uso de &lt;em&gt;call&lt;/em&gt; y &lt;em&gt;apply&lt;/em&gt; , uso de &lt;em&gt;new&lt;/em&gt; )</target>
        </trans-unit>
        <trans-unit id="41df7a9ac498fb8701396ea8333d73de768c8a4f" translate="yes" xml:space="preserve">
          <source>However use of &lt;code&gt;this&lt;/code&gt; indirectly through the other function called inside the event handling function or event property resolves to the global object &lt;code&gt;window&lt;/code&gt;.</source>
          <target state="translated">Sin embargo, el uso indirecto de &lt;code&gt;this&lt;/code&gt; trav&amp;eacute;s de la otra funci&amp;oacute;n llamada dentro de la funci&amp;oacute;n de manejo de eventos o la propiedad de evento se resuelve en la &lt;code&gt;window&lt;/code&gt; objeto global.</target>
        </trans-unit>
        <trans-unit id="b57106c514445ec802e1cd473722a5a17ec00810" translate="yes" xml:space="preserve">
          <source>However, invoking it explicitly using window object shall result in
the following</source>
          <target state="translated">Sin embargo,si se lo invoca explícitamente mediante un objeto ventana,el resultado será el siguiente</target>
        </trans-unit>
        <trans-unit id="f29f3dcc991cc0d0219d93627781059b44927c91" translate="yes" xml:space="preserve">
          <source>I have a different take on &lt;code&gt;this&lt;/code&gt; from the other answers that I hope is helpful.</source>
          <target state="translated">Tengo una opini&amp;oacute;n diferente sobre &lt;code&gt;this&lt;/code&gt; de las otras respuestas que espero sean &amp;uacute;tiles.</target>
        </trans-unit>
        <trans-unit id="12126d6f03dcab3e8bc1580e1ffa7e034bb107bc" translate="yes" xml:space="preserve">
          <source>I have noticed that there doesn't appear to be a clear explanation of what the &lt;code&gt;this&lt;/code&gt; keyword is and how it is correctly (and incorrectly) used in JavaScript on the Stack Overflow site.</source>
          <target state="translated">Me he dado cuenta de que no parece haber una explicaci&amp;oacute;n clara de qu&amp;eacute; es &lt;code&gt;this&lt;/code&gt; palabra clave y c&amp;oacute;mo se usa correcta (e incorrectamente) en JavaScript en el sitio Stack Overflow.</target>
        </trans-unit>
        <trans-unit id="1460f7d950fc7da3126879c166cd50e7e5efc4dc" translate="yes" xml:space="preserve">
          <source>I have witnessed some very strange behaviour with it and have failed to understand why it has occurred.</source>
          <target state="translated">He sido testigo de un comportamiento muy extraño con él y no he podido entender por qué ha ocurrido.</target>
        </trans-unit>
        <trans-unit id="5a8ffb9e545c5cf5851a2f18d53651ef1e65e1af" translate="yes" xml:space="preserve">
          <source>I recommend reading &lt;a href=&quot;https://mikewest.org&quot;&gt;Mike West&lt;/a&gt;'s article &lt;a href=&quot;http://www.digital-web.com/articles/scope_in_javascript/&quot;&gt;Scope in JavaScript&lt;/a&gt; (&lt;a href=&quot;http://web.archive.org/web/20110725013125/http://www.digital-web.com/articles/scope_in_javascript/&quot;&gt;mirror&lt;/a&gt;) first. It is an excellent, friendly introduction to the concepts of &lt;code&gt;this&lt;/code&gt; and scope chains in JavaScript.</source>
          <target state="translated">Recomiendo leer primero el art&amp;iacute;culo &lt;a href=&quot;http://www.digital-web.com/articles/scope_in_javascript/&quot;&gt;Alcance en JavaScript&lt;/a&gt; ( &lt;a href=&quot;http://web.archive.org/web/20110725013125/http://www.digital-web.com/articles/scope_in_javascript/&quot;&gt;espejo&lt;/a&gt; ) de &lt;a href=&quot;https://mikewest.org&quot;&gt;Mike West&lt;/a&gt; . Es una excelente y amigable introducci&amp;oacute;n a los conceptos de &lt;code&gt;this&lt;/code&gt; y las cadenas de alcance en JavaScript.</target>
        </trans-unit>
        <trans-unit id="2f8031248cc83596d7bde88186a31b74ce913e61" translate="yes" xml:space="preserve">
          <source>If an &lt;code&gt;Object&lt;/code&gt; contains a property which holds a &lt;code&gt;Function&lt;/code&gt;, the property is called a method. This method, when called, will always have it's &lt;code&gt;this&lt;/code&gt; variable set to the &lt;code&gt;Object&lt;/code&gt; it is associated with. This is true for both strict and non-strict modes.</source>
          <target state="translated">Si un &lt;code&gt;Object&lt;/code&gt; contiene una propiedad que contiene una &lt;code&gt;Function&lt;/code&gt; , la propiedad se llama m&amp;eacute;todo. Este m&amp;eacute;todo, cuando se llama, siempre tendr&amp;aacute; &lt;code&gt;this&lt;/code&gt; variable establecida en el &lt;code&gt;Object&lt;/code&gt; que est&amp;aacute; asociado. Esto es cierto tanto para los modos estrictos como para los no estrictos.</target>
        </trans-unit>
        <trans-unit id="f9f88fafad52186ab62424ffeb6795041b66ab36" translate="yes" xml:space="preserve">
          <source>If no explicit owner is defined, then the top most owner, the window object, is referenced.</source>
          <target state="translated">Si no se define un propietario explícito,se hace referencia al propietario más importante,el objeto de la ventana.</target>
        </trans-unit>
        <trans-unit id="abea008c9ccdd3ff813706bd9d78b13581e069ae" translate="yes" xml:space="preserve">
          <source>If the event handler is inline, &lt;code&gt;this&lt;/code&gt; refers to global object</source>
          <target state="translated">Si el controlador de eventos est&amp;aacute; en l&amp;iacute;nea, &lt;code&gt;this&lt;/code&gt; refiere al objeto global</target>
        </trans-unit>
        <trans-unit id="f545568898aa3f9f5ee670cd77b9d433d0a46089" translate="yes" xml:space="preserve">
          <source>If the function is called with NEW keyword then THIS will be bound to the newly created object.</source>
          <target state="translated">Si la función se llama con una NUEVA palabra clave entonces ESTO estará ligado al objeto recién creado.</target>
        </trans-unit>
        <trans-unit id="6ee87374d289abdd7ecf8ddb47adfb37ca1d1d0e" translate="yes" xml:space="preserve">
          <source>If the method is on an object's prototype chain, &lt;code&gt;this&lt;/code&gt; inside such method refers to the object the method was called on, as if the method is defined on the object.</source>
          <target state="translated">Si el m&amp;eacute;todo est&amp;aacute; en la cadena de prototipo de un objeto, &lt;code&gt;this&lt;/code&gt; dentro de dicho m&amp;eacute;todo se refiere al objeto en el que se llam&amp;oacute; al m&amp;eacute;todo, como si el m&amp;eacute;todo estuviera definido en el objeto.</target>
        </trans-unit>
        <trans-unit id="0f184b072ae7cca9bec0b9152d5ee281a0952b2c" translate="yes" xml:space="preserve">
          <source>If we miss &lt;code&gt;new&lt;/code&gt; keyword, &lt;code&gt;whatIsThis&lt;/code&gt; referes to the most global context it can find(&lt;code&gt;window&lt;/code&gt;)</source>
          <target state="translated">Si perdemos una &lt;code&gt;new&lt;/code&gt; palabra clave, &lt;code&gt;whatIsThis&lt;/code&gt; se refiere al contexto m&amp;aacute;s global que puede encontrar ( &lt;code&gt;window&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="08b356112172b63c41e869c9033bb2d83cf69377" translate="yes" xml:space="preserve">
          <source>If you are wondering how a JavaScript library manipulates the value of &lt;code&gt;this&lt;/code&gt;, the library is simply using one of the built-in JavaScript functions accepting a &lt;code&gt;thisArg&lt;/code&gt;. You, too, can write your own function taking a callback function and &lt;code&gt;thisArg&lt;/code&gt;:</source>
          <target state="translated">Si se pregunta c&amp;oacute;mo una biblioteca de JavaScript manipula el valor de &lt;code&gt;this&lt;/code&gt; , la biblioteca simplemente est&amp;aacute; utilizando una de las funciones de JavaScript incorporadas que aceptan un &lt;code&gt;thisArg&lt;/code&gt; . Usted tambi&amp;eacute;n puede escribir su propia funci&amp;oacute;n tomando una funci&amp;oacute;n de devoluci&amp;oacute;n de llamada y &lt;code&gt;thisArg&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="a05e4a50ca55b0ab68c8d4be4da417b51bf22da0" translate="yes" xml:space="preserve">
          <source>If you call a function with &lt;code&gt;new&lt;/code&gt; the &lt;code&gt;this&lt;/code&gt; will be a new context, it will not reference the global &lt;code&gt;this&lt;/code&gt;.</source>
          <target state="translated">Si llama a una funci&amp;oacute;n con &lt;code&gt;new&lt;/code&gt; &lt;code&gt;this&lt;/code&gt; ser&amp;aacute; un contexto nuevo, no har&amp;aacute; referencia al global.</target>
        </trans-unit>
        <trans-unit id="02cbcf4e964a2153e423ad418b22f8c3fd0762a2" translate="yes" xml:space="preserve">
          <source>If you just call a function then &lt;code&gt;this&lt;/code&gt; is the &quot;global object&quot; which in the browser is the window</source>
          <target state="translated">Si solo llama a una funci&amp;oacute;n, &lt;code&gt;this&lt;/code&gt; es el &quot;objeto global&quot; que en el navegador es la ventana</target>
        </trans-unit>
        <trans-unit id="d0e810fa1822dca8618162a82abee010cf8edbef" translate="yes" xml:space="preserve">
          <source>If you run this same piece of code in an environment like node.js, &lt;code&gt;this&lt;/code&gt; would refer to the global variable in your app.</source>
          <target state="translated">Si ejecuta este mismo c&amp;oacute;digo en un entorno como node.js, &lt;code&gt;this&lt;/code&gt; se referir&amp;iacute;a a la variable global en su aplicaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="d3d6688717298c61d86ba4872a3543c0973adcae" translate="yes" xml:space="preserve">
          <source>If you use &lt;code&gt;use strict;&lt;/code&gt;, in which case &lt;code&gt;this&lt;/code&gt; will be &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">Si usa &lt;code&gt;use strict;&lt;/code&gt; , en cuyo caso &lt;code&gt;this&lt;/code&gt; ser&amp;aacute; &lt;code&gt;undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4534c020e272fd844f4a0447a32701b45e3c9a14" translate="yes" xml:space="preserve">
          <source>In &quot;Non Strict Mode&quot;, Calling/Invoking this function directly through   &lt;strong&gt;&quot;UserDefinedFunction()&quot;&lt;/strong&gt; will automatically call/invoke
it as &lt;strong&gt;&quot;window.UserDefinedFunction()&quot;&lt;/strong&gt; making &lt;strong&gt;&quot;window&quot;&lt;/strong&gt; as the
&lt;strong&gt;&quot;current object&quot;&lt;/strong&gt; (and hence the value of &lt;strong&gt;&quot;this&quot;&lt;/strong&gt;) within &lt;strong&gt;&quot;UserDefinedFunction&quot;&lt;/strong&gt;.Invoking this function in &quot;Non Strict Mode&quot; will result in the following</source>
          <target state="translated">En &quot;Modo no estricto&quot;, Llamar / Invocar esta funci&amp;oacute;n directamente a trav&amp;eacute;s de &lt;strong&gt;&quot;UserDefinedFunction ()&quot;&lt;/strong&gt; autom&amp;aacute;ticamente la llamar&amp;aacute; / invocar&amp;aacute; como &lt;strong&gt;&quot;window.UserDefinedFunction ()&quot;&lt;/strong&gt; haciendo &lt;strong&gt;&quot;window&quot;&lt;/strong&gt; como el &lt;strong&gt;&quot;objeto actual&quot;&lt;/strong&gt; (y por lo tanto el valor de &lt;strong&gt;&quot; esto &quot;&lt;/strong&gt; ) dentro de &lt;strong&gt;&quot; UserDefinedFunction &quot;.&lt;/strong&gt; Invocar esta funci&amp;oacute;n en&quot; Modo no estricto &quot;dar&amp;aacute; como resultado lo siguiente</target>
        </trans-unit>
        <trans-unit id="a86f46ab5fd04ce187322c9dacbc63583d2300ac" translate="yes" xml:space="preserve">
          <source>In &quot;Strict Mode&quot;, Calling/Invoking the function directly through
&lt;strong&gt;&quot;UserDefinedFunction()&quot;&lt;/strong&gt; will &lt;strong&gt;&quot;NOT&quot;&lt;/strong&gt; automatically call/invoke it as &lt;strong&gt;&quot;window.UserDefinedFunction()&quot;&lt;/strong&gt;.Hence the &lt;strong&gt;&quot;current
object&quot;&lt;/strong&gt; (and the value of &lt;strong&gt;&quot;this&quot;&lt;/strong&gt;) within
&lt;strong&gt;&quot;UserDefinedFunction&quot;&lt;/strong&gt; shall be &lt;strong&gt;undefined&lt;/strong&gt;. Invoking this function in &quot;Strict Mode&quot; will result in the following</source>
          <target state="translated">En &quot;Modo estricto&quot;, Llamar / invocar la funci&amp;oacute;n directamente a trav&amp;eacute;s de &lt;strong&gt;&quot;UserDefinedFunction ()&quot;&lt;/strong&gt; &lt;strong&gt;&quot;NO&quot;&lt;/strong&gt; autom&amp;aacute;ticamente lo invocar&amp;aacute; / invocar&amp;aacute; como &lt;strong&gt;&quot;window.UserDefinedFunction ()&quot;&lt;/strong&gt; .De ah&amp;iacute; el &lt;strong&gt;&quot;objeto actual&quot;&lt;/strong&gt; (y el valor de &lt;strong&gt;&quot;this&quot;&lt;/strong&gt; ) dentro de &lt;strong&gt;&quot;UserDefinedFunction&quot;&lt;/strong&gt; ser&amp;aacute; &lt;strong&gt;indefinido&lt;/strong&gt; . Invocar esta funci&amp;oacute;n en &quot;Modo estricto&quot; dar&amp;aacute; como resultado lo siguiente</target>
        </trans-unit>
        <trans-unit id="324ac6a318b326d5cd6ec138a5535c67787f43fe" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;node&lt;/code&gt; executing from a script, &lt;code&gt;this&lt;/code&gt; at the global scope starts as an empty object. It is not the same as &lt;code&gt;global&lt;/code&gt;</source>
          <target state="translated">En el &lt;code&gt;node&lt;/code&gt; ejecuta desde un script, &lt;code&gt;this&lt;/code&gt; en el &amp;aacute;mbito global comienza como un objeto vac&amp;iacute;o. No es lo mismo que &lt;code&gt;global&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e86f9b9c713dc09a44f881bdef02363ebb098cc7" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;node&lt;/code&gt; using the repl, &lt;code&gt;this&lt;/code&gt; is the top namespace. You can refer to it as &lt;code&gt;global&lt;/code&gt;.</source>
          <target state="translated">En el &lt;code&gt;node&lt;/code&gt; usa la respuesta, &lt;code&gt;this&lt;/code&gt; es el espacio de nombres superior. Puede referirse a &amp;eacute;l como &lt;code&gt;global&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ffab00b98bc67260544caac0fccb102e726b7819" translate="yes" xml:space="preserve">
          <source>In &lt;strong&gt;Client/Browser&lt;/strong&gt;&lt;code&gt;this&lt;/code&gt; keyword is a global object which is &lt;code&gt;window&lt;/code&gt;</source>
          <target state="translated">En el &lt;strong&gt;Cliente / Navegador,&lt;/strong&gt; &lt;code&gt;this&lt;/code&gt; palabra clave es un objeto global que es una &lt;code&gt;window&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1f8bea0a49922aa0e3476e6f13ff485166460709" translate="yes" xml:space="preserve">
          <source>In &lt;strong&gt;Server/Node/Javascript runtime&lt;/strong&gt;&lt;code&gt;this&lt;/code&gt; keyword is also a global object which is &lt;code&gt;module.exports&lt;/code&gt;</source>
          <target state="translated">En &lt;strong&gt;Server / Node / Javascript runtime,&lt;/strong&gt; &lt;code&gt;this&lt;/code&gt; palabra clave tambi&amp;eacute;n es un objeto global que es &lt;code&gt;module.exports&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4079e8901c7bbc5e93844e5cba0c225cbd71f87b" translate="yes" xml:space="preserve">
          <source>In Global Context &lt;strong&gt;&quot;this&quot;&lt;/strong&gt; always refers to the &lt;strong&gt;&quot;window&quot;&lt;/strong&gt; object</source>
          <target state="translated">En el contexto global &lt;strong&gt;&quot;esto&quot;&lt;/strong&gt; siempre se refiere al objeto &lt;strong&gt;&quot;ventana&quot;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2878a1d2151511dedfc3b49078b6bb8743b5e514" translate="yes" xml:space="preserve">
          <source>In JavaScript there are operators like &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;-&lt;/code&gt; and &lt;code&gt;*&lt;/code&gt;. There is also the dot operator which is &lt;code&gt;.&lt;/code&gt;</source>
          <target state="translated">En JavaScript hay operadores como &lt;code&gt;+&lt;/code&gt; y &lt;code&gt;-&lt;/code&gt; y &lt;code&gt;*&lt;/code&gt; . Tambi&amp;eacute;n existe el operador de punto que es &lt;code&gt;.&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6efa6728b16de4e8625617c966cac872299fcc61" translate="yes" xml:space="preserve">
          <source>In a browser, at the global scope, &lt;code&gt;this&lt;/code&gt; is the &lt;code&gt;window&lt;/code&gt;object</source>
          <target state="translated">En un navegador, en el &amp;aacute;mbito global, &lt;code&gt;this&lt;/code&gt; es el objeto de &lt;code&gt;window&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="471827f41377d6ddd619a309af3ab2d6e951cd2c" translate="yes" xml:space="preserve">
          <source>In an HTML DOM event handler, &lt;code&gt;this&lt;/code&gt; is always a reference to the DOM element the event was attached to</source>
          <target state="translated">En un controlador de eventos DOM HTML, &lt;code&gt;this&lt;/code&gt; siempre es una referencia al elemento DOM al que se adjunt&amp;oacute; el evento</target>
        </trans-unit>
        <trans-unit id="f43a8566d5e8782dd6106131e8e134eb235d04cf" translate="yes" xml:space="preserve">
          <source>In an arrow function, &lt;code&gt;this&lt;/code&gt; will behave like common variables: it will be inherited from its lexical scope. The function's &lt;code&gt;this&lt;/code&gt;, where the arrow function is defined, will be the arrow function's &lt;code&gt;this&lt;/code&gt;.</source>
          <target state="translated">En una funci&amp;oacute;n de flecha, &lt;code&gt;this&lt;/code&gt; se comportar&amp;aacute; como variables comunes: se heredar&amp;aacute; de su &amp;aacute;mbito l&amp;eacute;xico. La funci&amp;oacute;n es &lt;code&gt;this&lt;/code&gt; , donde se define la funci&amp;oacute;n de flecha, ser&amp;aacute; la funci&amp;oacute;n de flecha &lt;code&gt;this&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e0ed578783f6c0844fb69401e88c46b1d4c812d5" translate="yes" xml:space="preserve">
          <source>In both cases, this is set to window.</source>
          <target state="translated">En ambos casos,esto se ajusta a la ventana.</target>
        </trans-unit>
        <trans-unit id="3c2d641383f797d7802108f589e4b9aefd246bdb" translate="yes" xml:space="preserve">
          <source>In event listeners the value of &lt;code&gt;this&lt;/code&gt;  refers to the DOM element on which the event was called.</source>
          <target state="translated">En los oyentes de eventos, el valor de &lt;code&gt;this&lt;/code&gt; refiere al elemento DOM en el que se llam&amp;oacute; el evento.</target>
        </trans-unit>
        <trans-unit id="21221c02e3ea6b186925dee47bb0aff97b3c7622" translate="yes" xml:space="preserve">
          <source>In other words &lt;code&gt;bar.foo()&lt;/code&gt; translates into &lt;code&gt;const temp = bar.foo; temp.call(bar);&lt;/code&gt;</source>
          <target state="translated">En otras palabras, &lt;code&gt;bar.foo()&lt;/code&gt; traduce en &lt;code&gt;const temp = bar.foo; temp.call(bar);&lt;/code&gt; llamada temporal (barra);</target>
        </trans-unit>
        <trans-unit id="e583468a15187c915f71a5317544c6b871de6462" translate="yes" xml:space="preserve">
          <source>In other words,</source>
          <target state="translated">En otras palabras,</target>
        </trans-unit>
        <trans-unit id="27d6a458ca3d5e041f95d454ee2e6dbc62b5e228" translate="yes" xml:space="preserve">
          <source>In pseudoclassical terms, the way many lectures teach the 'this' keyword is as an object instantiated by a class or object constructor. Each time a new object is constructed from a class, imagine that under the hood a local instance of a 'this' object is created and returned. I remember it taught like this:</source>
          <target state="translated">En términos pseudoclásicos,la forma en que muchas conferencias enseñan la palabra clave &quot;esto&quot; es como un objeto instanciado por una clase o un constructor de objetos.Cada vez que se construye un nuevo objeto de una clase,imagina que bajo el capó se crea y devuelve una instancia local de un objeto &quot;este&quot;.Recuerdo que se enseñaba así:</target>
        </trans-unit>
        <trans-unit id="cd2387ea5c279e482429632a93ee4100a845238a" translate="yes" xml:space="preserve">
          <source>In the above code, we see that the value of &lt;code&gt;this&lt;/code&gt; changed with the nested scope, but we wanted the value of &lt;code&gt;this&lt;/code&gt; from the original scope. So we 'copied' &lt;code&gt;this&lt;/code&gt; to &lt;code&gt;that&lt;/code&gt; and used the copy instead of &lt;code&gt;this&lt;/code&gt;. Clever, eh?</source>
          <target state="translated">En el c&amp;oacute;digo anterior, vemos que el valor de &lt;code&gt;this&lt;/code&gt; cambi&amp;oacute; con el alcance anidado, pero quer&amp;iacute;amos el valor de &lt;code&gt;this&lt;/code&gt; desde el alcance original. As&amp;iacute; que 'copiamos' &lt;code&gt;this&lt;/code&gt; a &lt;code&gt;that&lt;/code&gt; y usamos la copia en lugar de &lt;code&gt;this&lt;/code&gt; . Inteligente, &amp;iquest;eh?</target>
        </trans-unit>
        <trans-unit id="43224f60c133b11951481d44412c4fce99a0226f" translate="yes" xml:space="preserve">
          <source>In the above example we see that when &lt;strong&gt;&quot;UserDefinedFunction&quot;&lt;/strong&gt; was
invoked through &lt;strong&gt;o1&lt;/strong&gt;, &lt;strong&gt;&quot;this&quot;&lt;/strong&gt; takes value of &lt;strong&gt;o1&lt;/strong&gt; and the
value of its properties &lt;strong&gt;&quot;a&quot;&lt;/strong&gt; and &lt;strong&gt;&quot;b&quot;&lt;/strong&gt; get displayed. The value
of &lt;strong&gt;&quot;c&quot;&lt;/strong&gt; and &lt;strong&gt;&quot;d&quot;&lt;/strong&gt; were shown as &lt;strong&gt;undefined&lt;/strong&gt; as &lt;strong&gt;o1&lt;/strong&gt; does
not define these properties</source>
          <target state="translated">En el ejemplo anterior, vemos que cuando se invoc&amp;oacute; &lt;strong&gt;&quot;UserDefinedFunction&quot; a&lt;/strong&gt; trav&amp;eacute;s de &lt;strong&gt;o1&lt;/strong&gt; , &lt;strong&gt;&quot;this&quot;&lt;/strong&gt; toma el valor de &lt;strong&gt;o1&lt;/strong&gt; y se &lt;strong&gt;muestra&lt;/strong&gt; el valor de sus propiedades &lt;strong&gt;&quot;a&quot;&lt;/strong&gt; y &lt;strong&gt;&quot;b&quot;&lt;/strong&gt; . El valor de &lt;strong&gt;&quot;c&quot;&lt;/strong&gt; y &lt;strong&gt;&quot;d&quot;&lt;/strong&gt; se mostr&amp;oacute; como &lt;strong&gt;indefinido&lt;/strong&gt; ya que &lt;strong&gt;o1&lt;/strong&gt; no define estas propiedades</target>
        </trans-unit>
        <trans-unit id="96cc1a99aaa4e2084ab88b3ca40dccb578c47d7d" translate="yes" xml:space="preserve">
          <source>In the above this will be bound to 'myCar' object</source>
          <target state="translated">En lo anterior,esto estará ligado al objeto &quot;myCar&quot;...</target>
        </trans-unit>
        <trans-unit id="c83013fb1cd27e083ad60085d21979e56ba40fe5" translate="yes" xml:space="preserve">
          <source>In the case of the &lt;code&gt;Array.prototype&lt;/code&gt; functions, the given &lt;code&gt;callbackfn&lt;/code&gt; is called in an execution context where ThisBinding is set to &lt;code&gt;thisArg&lt;/code&gt; if supplied; otherwise, to the global object.</source>
          <target state="translated">En el caso de las funciones &lt;code&gt;Array.prototype&lt;/code&gt; , el &lt;code&gt;callbackfn&lt;/code&gt; dado se llama en un contexto de ejecuci&amp;oacute;n donde ThisBinding se establece en &lt;code&gt;thisArg&lt;/code&gt; si se proporciona; de lo contrario, al objeto global.</target>
        </trans-unit>
        <trans-unit id="c033f7496c40486ad987d93a68b83caa6838c09d" translate="yes" xml:space="preserve">
          <source>In the case of the &lt;code&gt;Function.prototype&lt;/code&gt; functions, they are called on a function object, but rather than setting ThisBinding to the function object, ThisBinding is set to the &lt;code&gt;thisArg&lt;/code&gt;.</source>
          <target state="translated">En el caso de las funciones &lt;code&gt;Function.prototype&lt;/code&gt; , se invocan en un objeto de funci&amp;oacute;n, pero en lugar de establecer ThisBinding en el objeto de funci&amp;oacute;n, ThisBinding se establece en &lt;code&gt;thisArg&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="aaeae9315cfc2930a15076b4cb90e923ca76ddd7" translate="yes" xml:space="preserve">
          <source>In the first example, the font color of the button shall be set to
white when it is clicked.</source>
          <target state="translated">En el primer ejemplo,el color de la fuente del botón se pondrá en blanco cuando se haga clic en él.</target>
        </trans-unit>
        <trans-unit id="2e598c3cda0bdc325d8abb172c4e83c3b44ff6a8" translate="yes" xml:space="preserve">
          <source>In the following cases, we would see how to manipulate the value of &lt;code&gt;this&lt;/code&gt;.</source>
          <target state="translated">En los siguientes casos, ver&amp;iacute;amos c&amp;oacute;mo manipular el valor de &lt;code&gt;this&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="430cd67bcc3100745a24d8b9fbad17bfca3af311" translate="yes" xml:space="preserve">
          <source>In the latter case, you merely reference the function, not hand it over to the element. Therefore, &lt;code&gt;this&lt;/code&gt; will refer to the window object.</source>
          <target state="translated">En el &amp;uacute;ltimo caso, simplemente hace referencia a la funci&amp;oacute;n, no la entrega al elemento. Por lo tanto, &lt;code&gt;this&lt;/code&gt; se referir&amp;aacute; al objeto de la ventana.</target>
        </trans-unit>
        <trans-unit id="1dd405f2048b51f3afad5fd52c3f9bfc8120d1ae" translate="yes" xml:space="preserve">
          <source>In the second example when the &lt;strong&gt;&quot;div&quot;&lt;/strong&gt; element is clicked it shall
call the &lt;strong&gt;OnDivClick&lt;/strong&gt; function with its second parameter
referencing the clicked div element. However the value of &lt;strong&gt;&quot;this&quot;&lt;/strong&gt;
within OnDivClick &lt;strong&gt;SHALL NOT&lt;/strong&gt; reference the clicked &lt;strong&gt;div&lt;/strong&gt;
element. It shall be set as the &lt;strong&gt;&quot;window object&quot;&lt;/strong&gt; or
&lt;strong&gt;&quot;undefined&quot;&lt;/strong&gt; in &lt;strong&gt;Non strict&lt;/strong&gt; and &lt;strong&gt;Strict Modes&lt;/strong&gt; respectively (if &lt;strong&gt;OnDivClick&lt;/strong&gt; is an &lt;strong&gt;unbound function&lt;/strong&gt;) or set to a predefined
Bound value (if &lt;strong&gt;OnDivClick&lt;/strong&gt; is a &lt;strong&gt;bound function&lt;/strong&gt;)</source>
          <target state="translated">En el segundo ejemplo, cuando se hace clic en el elemento &lt;strong&gt;&quot;div&quot;&lt;/strong&gt; , llamar&amp;aacute; a la funci&amp;oacute;n &lt;strong&gt;OnDivClick&lt;/strong&gt; con su segundo par&amp;aacute;metro que hace referencia al elemento div en el que se hizo clic. Sin embargo, el valor de &lt;strong&gt;&quot;esto&quot;&lt;/strong&gt; dentro de OnDivClick &lt;strong&gt;NO DEBE hacer&lt;/strong&gt; referencia al elemento &lt;strong&gt;div en&lt;/strong&gt; el que se hizo clic. Se establecer&amp;aacute; como el &lt;strong&gt;&quot;objeto de ventana&quot;&lt;/strong&gt; o &lt;strong&gt;&quot;indefinido&quot;&lt;/strong&gt; en los &lt;strong&gt;modos&lt;/strong&gt; &lt;strong&gt;No estricto&lt;/strong&gt; y &lt;strong&gt;Estricto&lt;/strong&gt; respectivamente (si &lt;strong&gt;OnDivClick&lt;/strong&gt; es una &lt;strong&gt;funci&amp;oacute;n&lt;/strong&gt; &lt;strong&gt;independiente&lt;/strong&gt; ) o se establecer&amp;aacute; en un valor L&amp;iacute;mite predefinido (si &lt;strong&gt;OnDivClick&lt;/strong&gt; es una &lt;strong&gt;funci&amp;oacute;n vinculada&lt;/strong&gt; )</target>
        </trans-unit>
        <trans-unit id="81ed2e6a494f7f2dc46f5d18d6632785957e98bc" translate="yes" xml:space="preserve">
          <source>In this case, THIS will be bound to the object which is explicitly passed to the function.</source>
          <target state="translated">En este caso,ESTO estará ligado al objeto que se pasa explícitamente a la función.</target>
        </trans-unit>
        <trans-unit id="0df985536051bb82097890e1a0953285b688bcea" translate="yes" xml:space="preserve">
          <source>In this example, the JavaScript interpreter enters function code, but because &lt;code&gt;myFun&lt;/code&gt;/&lt;code&gt;obj.myMethod&lt;/code&gt; is not called on an object, ThisBinding is set to &lt;code&gt;window&lt;/code&gt;.</source>
          <target state="translated">En este ejemplo, el int&amp;eacute;rprete de JavaScript ingresa el c&amp;oacute;digo de funci&amp;oacute;n, pero debido a que &lt;code&gt;myFun&lt;/code&gt; / &lt;code&gt;obj.myMethod&lt;/code&gt; no se llama en un objeto, ThisBinding se establece en &lt;code&gt;window&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2bb2e91de5338b6aa278265043941f191287a902" translate="yes" xml:space="preserve">
          <source>In two words, &lt;code&gt;this&lt;/code&gt; in JavaScript points the object from whom (or from whose execution context) the current function was run and it's always read-only, you can't set it anyway (such an attempt will end up with 'Invalid left-hand side in assignment' message.</source>
          <target state="translated">En dos palabras, &lt;code&gt;this&lt;/code&gt; en JavaScript se&amp;ntilde;ala el objeto desde el cual (o desde cuyo contexto de ejecuci&amp;oacute;n) se ejecut&amp;oacute; la funci&amp;oacute;n actual y siempre es de solo lectura, no se puede configurar de todos modos (tal intento terminar&amp;aacute; con 'Invalid left- lado de la mano en el mensaje de asignaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="934e0a8e43701b41d397444e208dc6649f33774f" translate="yes" xml:space="preserve">
          <source>Index:</source>
          <target state="translated">Index:</target>
        </trans-unit>
        <trans-unit id="8659b0f0077283eb99e2d1bd963b7db35f13f69b" translate="yes" xml:space="preserve">
          <source>Inside HTML attributes in which you can put JavaScript, &lt;code&gt;this&lt;/code&gt; is a reference to the element.</source>
          <target state="translated">Dentro de los atributos HTML en los que puede poner JavaScript, &lt;code&gt;this&lt;/code&gt; es una referencia al elemento.</target>
        </trans-unit>
        <trans-unit id="9e308c1af402a51e3c742eaeb80b4ffd7fa67c95" translate="yes" xml:space="preserve">
          <source>Inside a Direct  &quot;Non Bound Function&quot; Call, &lt;strong&gt;the object that
invoked the function call becomes the &quot;current object&quot;&lt;/strong&gt; (and hence
the value of &lt;strong&gt;&quot;this&quot;&lt;/strong&gt;). If a function is called without a explicit &lt;strong&gt;current object&lt;/strong&gt;, the &lt;strong&gt;current object&lt;/strong&gt; is either the &lt;strong&gt;&quot;window&quot;&lt;/strong&gt; object (For Non Strict Mode) or &lt;strong&gt;undefined&lt;/strong&gt; (For Strict Mode)  . Any function (or variable) defined in
&lt;strong&gt;Global Context&lt;/strong&gt; automatically becomes a property of the &lt;strong&gt;&quot;window&quot;&lt;/strong&gt; object.For e.g Suppose function is defined in Global Context as</source>
          <target state="translated">Dentro de una llamada directa de &quot;Funci&amp;oacute;n no vinculada&quot;, &lt;strong&gt;el objeto que invoc&amp;oacute; la llamada de funci&amp;oacute;n se convierte en el &quot;objeto actual&quot;&lt;/strong&gt; (y, por lo tanto, el valor de &lt;strong&gt;&quot;esto&quot;&lt;/strong&gt; ). Si se llama a una funci&amp;oacute;n sin un &lt;strong&gt;objeto actual&lt;/strong&gt; expl&amp;iacute;cito, el &lt;strong&gt;objeto actual&lt;/strong&gt; es el &lt;strong&gt;objeto&lt;/strong&gt; &lt;strong&gt;&quot;ventana&quot;&lt;/strong&gt; (para el modo no estricto) o &lt;strong&gt;indefinido&lt;/strong&gt; (para el modo estricto). Cualquier funci&amp;oacute;n (o variable) definida en &lt;strong&gt;el Contexto global&lt;/strong&gt; se convierte autom&amp;aacute;ticamente en una propiedad del objeto &lt;strong&gt;&quot;ventana&quot;.&lt;/strong&gt; Por ejemplo, supongamos que la funci&amp;oacute;n se define en el Contexto global como</target>
        </trans-unit>
        <trans-unit id="e90ac117b0316d7973d69a03502107870607096b" translate="yes" xml:space="preserve">
          <source>Inside a constructor function, the &lt;strong&gt;&quot;current object&quot;&lt;/strong&gt; (and hence the value of 
&lt;strong&gt;&quot;this&quot;&lt;/strong&gt;) references the object that is currently being created
through &lt;strong&gt;&quot;new&quot;&lt;/strong&gt; irrespective of the bind status of the function. However
if the constructor is a bound function it shall get called with 
predefined set of arguments as set for the bound function.</source>
          <target state="translated">Dentro de una funci&amp;oacute;n constructora, el &lt;strong&gt;&quot;objeto actual&quot;&lt;/strong&gt; (y, por lo tanto, el valor de &lt;strong&gt;&quot;esto&quot;&lt;/strong&gt; ) hace referencia al objeto que se est&amp;aacute; creando actualmente a trav&amp;eacute;s de &lt;strong&gt;&quot;nuevo&quot;,&lt;/strong&gt; independientemente del estado de enlace de la funci&amp;oacute;n. Sin embargo, si el constructor es una funci&amp;oacute;n enlazada, se llamar&amp;aacute; con un conjunto predefinido de argumentos como el conjunto para la funci&amp;oacute;n enlazada.</target>
        </trans-unit>
        <trans-unit id="07896e58b529f3fb8b5b73a6120efa70bb3ab536" translate="yes" xml:space="preserve">
          <source>Irrespective of the context in which it is used, &lt;strong&gt;&quot;this&quot;&lt;/strong&gt; always references the &lt;strong&gt;&quot;current object&quot;&lt;/strong&gt; in Javascript. However, what the &lt;strong&gt;&quot;current object&quot;&lt;/strong&gt; is  differs according to &lt;strong&gt;context&lt;/strong&gt;. The &lt;strong&gt;context&lt;/strong&gt; may be exactly &lt;strong&gt;1 of the 6&lt;/strong&gt; following:</source>
          <target state="translated">Independientemente del contexto en el que se utiliza, &lt;strong&gt;&quot;this&quot;&lt;/strong&gt; siempre hace referencia al &lt;strong&gt;&quot;objeto actual&quot;&lt;/strong&gt; en Javascript. Sin embargo, cu&amp;aacute;l es el &lt;strong&gt;&quot;objeto actual&quot;&lt;/strong&gt; difiere seg&amp;uacute;n el &lt;strong&gt;contexto&lt;/strong&gt; . El &lt;strong&gt;contexto&lt;/strong&gt; puede ser exactamente &lt;strong&gt;1 de los 6&lt;/strong&gt; siguientes:</target>
        </trans-unit>
        <trans-unit id="0ddbde6677e66a2eef6ce94f5856c81e48273985" translate="yes" xml:space="preserve">
          <source>It is difficult to get a good grasp of JS, or write more than anything trivial in it, if you don't understand it thoroughly. You cannot just afford to take a quick dip :) I think the best way to get started with JS is to first watch these video lectures by Douglas Crockford - &lt;a href=&quot;http://yuiblog.com/crockford/&quot;&gt;http://yuiblog.com/crockford/&lt;/a&gt;, which covers this and that, and everything else about JS.</source>
          <target state="translated">Es dif&amp;iacute;cil obtener una buena comprensi&amp;oacute;n de JS, o escribir m&amp;aacute;s que nada trivial, si no lo comprende a fondo. No puede darse el lujo de darse un chapuz&amp;oacute;n r&amp;aacute;pido :) Creo que la mejor manera de comenzar con JS es ver primero estas conferencias en video de Douglas Crockford: &lt;a href=&quot;http://yuiblog.com/crockford/&quot;&gt;http://yuiblog.com/crockford/&lt;/a&gt; , que cubre esto y aquello, y todo lo dem&amp;aacute;s sobre JS.</target>
        </trans-unit>
        <trans-unit id="7126c04f305ed904207b61e181769dea029be5b6" translate="yes" xml:space="preserve">
          <source>It is usually a mistake to assign &lt;em&gt;arrays&lt;/em&gt; or &lt;em&gt;objects&lt;/em&gt; on the &lt;code&gt;prototype&lt;/code&gt;. If you want instances to each have their own arrays, create them in the function, not the prototype.</source>
          <target state="translated">Por lo general, es un error asignar &lt;em&gt;matrices&lt;/em&gt; u &lt;em&gt;objetos&lt;/em&gt; en el &lt;code&gt;prototype&lt;/code&gt; . Si desea que las instancias tengan sus propios arreglos, cr&amp;eacute;elos en la funci&amp;oacute;n, no en el prototipo.</target>
        </trans-unit>
        <trans-unit id="992dc5d399c1eb9c5819d08e8cdc27405e9a0bff" translate="yes" xml:space="preserve">
          <source>JQuery proxy is another way you can use to make sure this in a function will be the value you desire. (Check &lt;a href=&quot;https://stackoverflow.com/q/4986329/340046&quot;&gt;Understanding $.proxy()&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/q/3349380/340046&quot;&gt;jQuery.proxy() usage&lt;/a&gt;)</source>
          <target state="translated">El proxy JQuery es otra forma que puede usar para asegurarse de que esto en una funci&amp;oacute;n sea el valor que desee. (Verifique el uso de &lt;a href=&quot;https://stackoverflow.com/q/4986329/340046&quot;&gt;$ .proxy ()&lt;/a&gt; , &lt;a href=&quot;https://stackoverflow.com/q/3349380/340046&quot;&gt;jQuery.proxy ()&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="be6b0ab456696ba8d67592a42d2412b774842021" translate="yes" xml:space="preserve">
          <source>Javascript's &lt;code&gt;this&lt;/code&gt;</source>
          <target state="translated">Javascript es &lt;code&gt;this&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2453951365a295c5909c9ed643507672357709f3" translate="yes" xml:space="preserve">
          <source>Just for fun, test your understanding with some examples</source>
          <target state="translated">Sólo por diversión,comprueba tu comprensión con algunos ejemplos</target>
        </trans-unit>
        <trans-unit id="894c85eb8e48c996ee7525b62829676432dc120f" translate="yes" xml:space="preserve">
          <source>Just like &lt;code&gt;bind&lt;/code&gt;, a new invisible function is created that calls the given function with a bound value for &lt;code&gt;objectForThis&lt;/code&gt; but unlike &lt;code&gt;bind&lt;/code&gt; the object to be bound is implicit. It's whatever &lt;code&gt;this&lt;/code&gt; happens to be when the &lt;code&gt;=&amp;gt;&lt;/code&gt; operator is used.</source>
          <target state="translated">Al igual que &lt;code&gt;bind&lt;/code&gt; , se crea una nueva funci&amp;oacute;n invisible que llama a la funci&amp;oacute;n dada con un valor enlazado para &lt;code&gt;objectForThis&lt;/code&gt; pero, a diferencia de &lt;code&gt;bind&lt;/code&gt; , el objeto a enlazar est&amp;aacute; impl&amp;iacute;cito. Es lo que sea que sea &lt;code&gt;this&lt;/code&gt; cuando se usa el operador &lt;code&gt;=&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fcbd5d2a27f1bec48bd69a467c70b7017b49d1da" translate="yes" xml:space="preserve">
          <source>Keep in mind &lt;code&gt;exports&lt;/code&gt; is just a reference to &lt;code&gt;module.exports&lt;/code&gt;</source>
          <target state="translated">Tenga en cuenta que las &lt;code&gt;exports&lt;/code&gt; son solo una referencia al &lt;code&gt;module.exports&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5fa70764a0750c44aea026597b2b0bb54778bd69" translate="yes" xml:space="preserve">
          <source>Let us look at another example. Please look at the following code</source>
          <target state="translated">Veamos otro ejemplo.Por favor,mire el siguiente código</target>
        </trans-unit>
        <trans-unit id="674fee26bf2169d5b7390a8d6cb04650d870ce43" translate="yes" xml:space="preserve">
          <source>Let's log &lt;code&gt;this&lt;/code&gt; keyword to the console in global scope without any more code but</source>
          <target state="translated">Registremos &lt;code&gt;this&lt;/code&gt; palabra clave en la consola en el &amp;aacute;mbito global sin m&amp;aacute;s c&amp;oacute;digo pero</target>
        </trans-unit>
        <trans-unit id="347a6545cb2fdbde1b257137e4557d5c3e7376d9" translate="yes" xml:space="preserve">
          <source>Lexically for arrow functions (they adopt the &lt;em&gt;this&lt;/em&gt; of their outer execution context)</source>
          <target state="translated">L&amp;eacute;xico para las funciones de flecha (adoptan &lt;em&gt;esto&lt;/em&gt; de su contexto de ejecuci&amp;oacute;n externo)</target>
        </trans-unit>
        <trans-unit id="4b794c51b008429d9440459755a0aea70b021d1b" translate="yes" xml:space="preserve">
          <source>Most people get confused when they try to use &quot;this&quot; inside of anonymous closure functions like:</source>
          <target state="translated">La mayoría de la gente se confunde cuando trata de usar &quot;esto&quot; dentro de funciones de cierre anónimas como:</target>
        </trans-unit>
        <trans-unit id="24a1c5ba7f20054e6cc97447ca4ff99819209a36" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;call&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt; can override the value of &lt;code&gt;this&lt;/code&gt; set by dot method invocation we discussed in the second bullet.
Simple enough :)</source>
          <target state="translated">Tenga en cuenta que &lt;code&gt;call&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt; puede anular el valor de &lt;code&gt;this&lt;/code&gt; conjunto mediante la invocaci&amp;oacute;n del m&amp;eacute;todo de puntos que discutimos en la segunda vi&amp;ntilde;eta. Suficientemente simple :)</target>
        </trans-unit>
        <trans-unit id="d5fda3afa616c2908147257d1b4538bffe1f96f3" translate="yes" xml:space="preserve">
          <source>Note that if &lt;code&gt;functionObject.bind&lt;/code&gt; did not exist we could make our own like this</source>
          <target state="translated">Tenga en cuenta que si &lt;code&gt;functionObject.bind&lt;/code&gt; no existiera, podr&amp;iacute;amos crear el nuestro como este</target>
        </trans-unit>
        <trans-unit id="fd156fe39e6cb3e81a3dc10a1d0665f3a2485dfd" translate="yes" xml:space="preserve">
          <source>Note that if a method is stored (or rather, copied) in another variable, the reference to &lt;code&gt;this&lt;/code&gt; is no longer preserved in the new variable. For example:</source>
          <target state="translated">Tenga en cuenta que si un m&amp;eacute;todo se almacena (o mejor dicho, se copia) en otra variable, la referencia a &lt;code&gt;this&lt;/code&gt; ya no se conserva en la nueva variable. Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="767a361d58ea1665f1185636ce54e8f7e4d5a7b8" translate="yes" xml:space="preserve">
          <source>Note that if you use strict mode then &lt;code&gt;this&lt;/code&gt; will be &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">Tenga en cuenta que si usa el modo estricto, &lt;code&gt;this&lt;/code&gt; ser&amp;aacute; &lt;code&gt;undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="235f4aca4b6e147c89ad215706ae8a6e2deabb75" translate="yes" xml:space="preserve">
          <source>Note that it doesn't matter how the function was created (mostly...). All of these will produce the same results</source>
          <target state="translated">Tengan en cuenta que no importa cómo se creó la función (en su mayoría...).Todos ellos producirán los mismos resultados</target>
        </trans-unit>
        <trans-unit id="2b700c221638ceb27ecd2fe681cd4c26833c39cf" translate="yes" xml:space="preserve">
          <source>Note that the official ECMAScript spec nowhere states that such types of functions are actual &lt;code&gt;constructor&lt;/code&gt; functions. They are just normal functions, and &lt;code&gt;new&lt;/code&gt; can be used on any function. It's just that we use them as such, and so we call them as such only.</source>
          <target state="translated">Tenga en cuenta que la especificaci&amp;oacute;n oficial de ECMAScript en ninguna parte establece que tales tipos de funciones son funciones de &lt;code&gt;constructor&lt;/code&gt; reales. Son solo funciones normales, y las &lt;code&gt;new&lt;/code&gt; se pueden usar en cualquier funci&amp;oacute;n. Es solo que los usamos como tales, por lo que los llamamos solo como tales.</target>
        </trans-unit>
        <trans-unit id="bd960096fd51dca1613866611c29d9d73d149c0d" translate="yes" xml:space="preserve">
          <source>Note that we are running this in the normal mode, i.e. strict mode is not used.</source>
          <target state="translated">Tenga en cuenta que estamos ejecutando esto en el modo normal,es decir,no se utiliza el modo estricto.</target>
        </trans-unit>
        <trans-unit id="81c5b121bb3b104b797c415c59fc9f82cf7e31ea" translate="yes" xml:space="preserve">
          <source>Now if we run this in strict mode by adding the statement &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; to the beginning of the function declaration, &lt;code&gt;this&lt;/code&gt; would no longer refer to the global variable in either of the environments. This is done to avoid confusions in strict mode. &lt;code&gt;this&lt;/code&gt; would, in this case just log &lt;code&gt;undefined&lt;/code&gt;, because that is what it is, it is not defined.</source>
          <target state="translated">Ahora, si ejecutamos esto en modo estricto agregando la declaraci&amp;oacute;n &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; al comienzo de la declaraci&amp;oacute;n de funci&amp;oacute;n, &lt;code&gt;this&lt;/code&gt; ya no se referir&amp;iacute;a a la variable global en ninguno de los entornos. Esto se hace para evitar confusiones en modo estricto. &lt;code&gt;this&lt;/code&gt; , en este caso, solo registrar&amp;iacute;a &lt;code&gt;undefined&lt;/code&gt; , porque eso es lo que es, no est&amp;aacute; definido.</target>
        </trans-unit>
        <trans-unit id="bdb993d7f3927fbada79fbc0cdf43dcb01f54dc1" translate="yes" xml:space="preserve">
          <source>Now. Let's imagine we make a function that explicitly sets &lt;code&gt;this&lt;/code&gt; before calling another function and then call it with the &lt;code&gt;.&lt;/code&gt; (dot) operator</source>
          <target state="translated">Ahora. Imaginemos que hacemos una funci&amp;oacute;n que establece &lt;code&gt;this&lt;/code&gt; expl&amp;iacute;citamente antes de llamar a otra funci&amp;oacute;n y luego llamarla con el &lt;code&gt;.&lt;/code&gt; operador (punto)</target>
        </trans-unit>
        <trans-unit id="f7c9c2091cfaff21dd7fae4ea95609c87cb2899e" translate="yes" xml:space="preserve">
          <source>Object literal notation creates an instance of object which we can use immediately. With function we may need to first create its instance using &lt;code&gt;new&lt;/code&gt; operator.</source>
          <target state="translated">La notaci&amp;oacute;n literal de objeto crea una instancia de objeto que podemos usar de inmediato. Con la funci&amp;oacute;n, es posible que primero necesitemos crear su instancia con un &lt;code&gt;new&lt;/code&gt; operador.</target>
        </trans-unit>
        <trans-unit id="25ff51b9b77d4e3cd4a459c2231b84b262b58dee" translate="yes" xml:space="preserve">
          <source>Once you start getting used to &lt;code&gt;this&lt;/code&gt;, the rules are actually pretty simple. The &lt;a href=&quot;https://ecma-international.org/ecma-262/5.1&quot;&gt;ECMAScript 5.1 Standard&lt;/a&gt; defines &lt;code&gt;this&lt;/code&gt;:</source>
          <target state="translated">Una vez que comienzas a acostumbrarte a &lt;code&gt;this&lt;/code&gt; , las reglas son bastante simples. El &lt;a href=&quot;https://ecma-international.org/ecma-262/5.1&quot;&gt;est&amp;aacute;ndar ECMAScript 5.1&lt;/a&gt; define &lt;code&gt;this&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="ba28d64a842cc863e8fd947ef8b2d2761787ca76" translate="yes" xml:space="preserve">
          <source>One other wrinkle is the prototype chain. When you use &lt;code&gt;a.b&lt;/code&gt; JavaScript first looks on the object referenced directly by &lt;code&gt;a&lt;/code&gt; for the property &lt;code&gt;b&lt;/code&gt;. If &lt;code&gt;b&lt;/code&gt; is not found on the object then JavaScript will look in the object's prototype to find &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="translated">Otra arruga es la cadena prototipo. Cuando usa &lt;code&gt;a.b&lt;/code&gt; JavaScript primero busca en el objeto referenciado directamente por &lt;code&gt;a&lt;/code&gt; para la propiedad &lt;code&gt;b&lt;/code&gt; . Si no se encuentra &lt;code&gt;b&lt;/code&gt; en el objeto, entonces JavaScript buscar&amp;aacute; en el prototipo del objeto para encontrar &lt;code&gt;b&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="519ab8586252702931098aa46525bc513da1698f" translate="yes" xml:space="preserve">
          <source>One way to look at JavaScript is to see that there are only 1 way to call a function&lt;sup&gt;1&lt;/sup&gt;. It is</source>
          <target state="translated">Una forma de ver JavaScript es ver que solo hay 1 forma de llamar a una funci&amp;oacute;n &lt;sup&gt;1&lt;/sup&gt; . Es</target>
        </trans-unit>
        <trans-unit id="e6cc1f21389aeed3c994d1fb9ea99f0e63bb1e99" translate="yes" xml:space="preserve">
          <source>Outside all functions (i.e. in global context) the &lt;strong&gt;&quot;current
object&quot;&lt;/strong&gt; (and hence the value of &lt;strong&gt;&quot;this&quot;&lt;/strong&gt;) is always the
&lt;strong&gt;&quot;window&quot;&lt;/strong&gt; object for browsers.</source>
          <target state="translated">Fuera de todas las funciones (es decir, en contexto global), el &lt;strong&gt;&quot;objeto actual&quot;&lt;/strong&gt; (y, por lo tanto, el valor de &lt;strong&gt;&quot;esto&quot;&lt;/strong&gt; ) es siempre el objeto &lt;strong&gt;&quot;ventana&quot;&lt;/strong&gt; para los navegadores.</target>
        </trans-unit>
        <trans-unit id="458f4f8a250f5217e985cebc8035a133a4cc6496" translate="yes" xml:space="preserve">
          <source>Please look at the following HTML Snippet</source>
          <target state="translated">Por favor,mira el siguiente fragmento de HTML</target>
        </trans-unit>
        <trans-unit id="c23e76e8d97b29eedd68eb763eb4329893b8b3a7" translate="yes" xml:space="preserve">
          <source>Presenting.... &lt;code&gt;bind&lt;/code&gt;!</source>
          <target state="translated">Presentando ... &amp;iexcl; &lt;code&gt;bind&lt;/code&gt; !</target>
        </trans-unit>
        <trans-unit id="5dff48a80d21897b1a7b4ec4d3e064bd791cf0a7" translate="yes" xml:space="preserve">
          <source>Pretty straightforward, eh?</source>
          <target state="translated">Bastante sencillo,¿eh?</target>
        </trans-unit>
        <trans-unit id="d68dbd2ff1e0f0c272d49f9c85bec5340d93f7ba" translate="yes" xml:space="preserve">
          <source>Probably the most detailed and comprehensive article on &lt;code&gt;this&lt;/code&gt; is the following:</source>
          <target state="translated">Probablemente el art&amp;iacute;culo m&amp;aacute;s detallado y completo sobre &lt;code&gt;this&lt;/code&gt; es el siguiente:</target>
        </trans-unit>
        <trans-unit id="aec57670cb741243fb4b52dc59dfa257130956b6" translate="yes" xml:space="preserve">
          <source>See the difference between the three? It is subtle, but they are used differently. Like &lt;code&gt;call&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt;, &lt;code&gt;bind&lt;/code&gt; will also over-ride the value of &lt;code&gt;this&lt;/code&gt; set by dot-method invocation.</source>
          <target state="translated">&amp;iquest;Ves la diferencia entre los tres? Es sutil, pero se usan de manera diferente. Al igual que &lt;code&gt;call&lt;/code&gt; y &lt;code&gt;apply&lt;/code&gt; , &lt;code&gt;bind&lt;/code&gt; tambi&amp;eacute;n anular&amp;aacute; el valor de &lt;code&gt;this&lt;/code&gt; conjunto mediante la invocaci&amp;oacute;n de m&amp;eacute;todo de puntos.</target>
        </trans-unit>
        <trans-unit id="d6a6db24764ce1a8198a5fb69df54904ebb96362" translate="yes" xml:space="preserve">
          <source>See the following code:</source>
          <target state="translated">Vea el siguiente código:</target>
        </trans-unit>
        <trans-unit id="044b35bd261da09f7c8b736e9469b64b95b16433" translate="yes" xml:space="preserve">
          <source>Similarly when &lt;strong&gt;&quot;UserDefinedFunction&quot;&lt;/strong&gt; was invoked through &lt;strong&gt;o2&lt;/strong&gt;,
&lt;strong&gt;&quot;this&quot;&lt;/strong&gt; takes value of &lt;strong&gt;o2&lt;/strong&gt; and the value of its properties &lt;strong&gt;&quot;c&quot;&lt;/strong&gt; and &lt;strong&gt;&quot;d&quot;&lt;/strong&gt; get displayed.The value of &lt;strong&gt;&quot;a&quot;&lt;/strong&gt; and &lt;strong&gt;&quot;b&quot;&lt;/strong&gt; were shown as &lt;strong&gt;undefined&lt;/strong&gt; as &lt;strong&gt;o2&lt;/strong&gt; does not define these properties.</source>
          <target state="translated">De manera similar, cuando se invoc&amp;oacute; &lt;strong&gt;&quot;UserDefinedFunction&quot; a&lt;/strong&gt; trav&amp;eacute;s de &lt;strong&gt;o2&lt;/strong&gt; , &lt;strong&gt;&quot;this&quot;&lt;/strong&gt; toma el valor de &lt;strong&gt;o2&lt;/strong&gt; y el valor de sus propiedades &lt;strong&gt;&quot;c&quot;&lt;/strong&gt; y &lt;strong&gt;&quot;d&quot;&lt;/strong&gt; se muestran. El valor de &lt;strong&gt;&quot;a&quot;&lt;/strong&gt; y &lt;strong&gt;&quot;b&quot;&lt;/strong&gt; se muestran como &lt;strong&gt;indefinidos&lt;/strong&gt; como lo hace &lt;strong&gt;o2&lt;/strong&gt; No define estas propiedades.</target>
        </trans-unit>
        <trans-unit id="4681c4e7dfd2de2b681bc6a9a880fb39de0fc724" translate="yes" xml:space="preserve">
          <source>Similarly, when you use &lt;code&gt;this&lt;/code&gt; directly inside the event property (like &lt;code&gt;&amp;lt;button onclick=&quot;...this...&quot; &amp;gt;&lt;/code&gt;) of the element, it refers to the element.</source>
          <target state="translated">De manera similar, cuando usa &lt;code&gt;this&lt;/code&gt; directamente dentro de la propiedad del evento (como &lt;code&gt;&amp;lt;button onclick=&quot;...this...&quot; &amp;gt;&lt;/code&gt; ) del elemento, se refiere al elemento.</target>
        </trans-unit>
        <trans-unit id="fc5642eed954e43be8c2b08ea6204f5beae34cb6" translate="yes" xml:space="preserve">
          <source>Simple answer:</source>
          <target state="translated">Respuesta simple:</target>
        </trans-unit>
        <trans-unit id="cd0c21407e549024fd8ebade4d9db293fa35da67" translate="yes" xml:space="preserve">
          <source>Simple function invocation</source>
          <target state="translated">Invocación de la función simple</target>
        </trans-unit>
        <trans-unit id="d7af4d79d12ac932a60b3bcbb4551442c40a1a19" translate="yes" xml:space="preserve">
          <source>So here, inside each(), &quot;this&quot; doesn't hold the &quot;value&quot; that you expect it to (from</source>
          <target state="translated">Así que aquí,dentro de cada uno,&quot;esto&quot; no tiene el &quot;valor&quot; que esperas que tenga (de</target>
        </trans-unit>
        <trans-unit id="2dedd77da3beb2baf299eed38237e8b9cb499c92" translate="yes" xml:space="preserve">
          <source>So if I did</source>
          <target state="translated">Así que si lo hiciera</target>
        </trans-unit>
        <trans-unit id="f9ad9f9ed5dfd5b4e3d833b6c8840ad972fab14b" translate="yes" xml:space="preserve">
          <source>So the Semantic of &quot;this&quot; is different from the traditional OOP languages. And it causes problems:
1. when a function is passed to another variable (most likely, a callback); and 2. when a closure is invoked from a member method of a class.</source>
          <target state="translated">Así que la semántica de &quot;esto&quot; es diferente de las lenguas tradicionales de la OOP.Y causa problemas:1.cuando una función se pasa a otra variable (lo más probable,una llamada de retorno);y 2.cuando se invoca un cierre desde un método miembro de una clase.</target>
        </trans-unit>
        <trans-unit id="40cd6970e0b84898911ea5a78a1e7dfb515b5bcf" translate="yes" xml:space="preserve">
          <source>So the above code will log &lt;code&gt;{myObj: &quot;is cool&quot;}, [1, 2, 3]&lt;/code&gt; in the console. Pretty nice way to change the value of &lt;code&gt;this&lt;/code&gt; in any function.</source>
          <target state="translated">Por lo tanto, el c&amp;oacute;digo anterior registrar&amp;aacute; &lt;code&gt;{myObj: &quot;is cool&quot;}, [1, 2, 3]&lt;/code&gt; en la consola. Muy buena manera de cambiar el valor de &lt;code&gt;this&lt;/code&gt; en cualquier funci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="522ff2123214afbd475283a209499ed36291eb73" translate="yes" xml:space="preserve">
          <source>So yeah, since &lt;code&gt;function&lt;/code&gt;s are also &lt;code&gt;Objects&lt;/code&gt; (and in-fact first class variables in Javascript), even functions have methods which are... well, functions themselves.</source>
          <target state="translated">Entonces s&amp;iacute;, dado que las &lt;code&gt;function&lt;/code&gt; tambi&amp;eacute;n son &lt;code&gt;Objects&lt;/code&gt; (y de hecho variables de primera clase en Javascript), incluso las funciones tienen m&amp;eacute;todos que son ... bueno, funciones en s&amp;iacute; mismas.</target>
        </trans-unit>
        <trans-unit id="0f3b2a9afffa56a30d094f3e24ed8cf50303768c" translate="yes" xml:space="preserve">
          <source>So, everything else can be described by how it translates into &lt;code&gt;functionObject.call&lt;/code&gt;.</source>
          <target state="translated">Entonces, todo lo dem&amp;aacute;s puede describirse por c&amp;oacute;mo se traduce en &lt;code&gt;functionObject.call&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="790a624bffefadda17b70c21c4b01c0c58df0ee7" translate="yes" xml:space="preserve">
          <source>So, just like the rules above</source>
          <target state="translated">Así que,al igual que las reglas anteriores</target>
        </trans-unit>
        <trans-unit id="914ff3d89be46de1e5d463f23bd9e8ec17bc3b6b" translate="yes" xml:space="preserve">
          <source>So, that's the same behavior as:</source>
          <target state="translated">Así que,ese es el mismo comportamiento que:</target>
        </trans-unit>
        <trans-unit id="3752107636af96b291a982ec3e8aba9fd5bc3976" translate="yes" xml:space="preserve">
          <source>Sometimes, you don't like the fact that &lt;code&gt;this&lt;/code&gt; changes with scope, especially nested scope. Take a look at the following example.</source>
          <target state="translated">A veces, no le gusta el hecho de que &lt;code&gt;this&lt;/code&gt; cambie con el alcance, especialmente el alcance anidado. Eche un vistazo al siguiente ejemplo.</target>
        </trans-unit>
        <trans-unit id="3dcb878280db0a0ee997fedf6a06a9e25d983362" translate="yes" xml:space="preserve">
          <source>Summary &lt;code&gt;this&lt;/code&gt; Javascript:</source>
          <target state="translated">Resumen de &lt;code&gt;this&lt;/code&gt; Javascript:</target>
        </trans-unit>
        <trans-unit id="870ae78c66193024be4337db8b9c61bdcf897d92" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.&lt;/code&gt; operator when used with a function on the right and an object on the left effectively means &quot;pass object as &lt;code&gt;this&lt;/code&gt; to function.</source>
          <target state="translated">El &lt;code&gt;.&lt;/code&gt; operador cuando se usa con una funci&amp;oacute;n a la derecha y un objeto a la izquierda significa efectivamente &quot;pasar objeto como &lt;code&gt;this&lt;/code&gt; para funcionar&quot;.</target>
        </trans-unit>
        <trans-unit id="5dc19a793d0ce3f7b84a548e2b6a4dbb98f0fbaf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;new&lt;/code&gt; keyword</source>
          <target state="translated">La &lt;code&gt;new&lt;/code&gt; palabra clave</target>
        </trans-unit>
        <trans-unit id="5c7d3a19cb8b6bc930a3cf143fd794ae8cdebd95" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;this&lt;/code&gt; keyword behaves differently in JavaScript compared to other languages. In Object Oriented languages, the &lt;code&gt;this&lt;/code&gt; keyword refers to the current instance of the class. In JavaScript the value of &lt;code&gt;this&lt;/code&gt; is determined by the invocation context of function (&lt;em&gt;&lt;code&gt;context.function()&lt;/code&gt;&lt;/em&gt;) and where it is called.</source>
          <target state="translated">La palabra clave &lt;code&gt;this&lt;/code&gt; se comporta de manera diferente en JavaScript en comparaci&amp;oacute;n con otros idiomas. En lenguajes orientados a objetos, la palabra clave &lt;code&gt;this&lt;/code&gt; se refiere a la instancia actual de la clase. En JavaScript, el valor de &lt;code&gt;this&lt;/code&gt; est&amp;aacute; determinado por el contexto de invocaci&amp;oacute;n de la funci&amp;oacute;n ( &lt;em&gt; &lt;code&gt;context.function()&lt;/code&gt; &lt;/em&gt; ) y d&amp;oacute;nde se llama.</target>
        </trans-unit>
        <trans-unit id="8118d827d29ceed5b5f484813a32a7dbdecf8a1e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;this&lt;/code&gt; keyword evaluates to the value of the ThisBinding of the current execution context</source>
          <target state="translated">La palabra clave &lt;code&gt;this&lt;/code&gt; eval&amp;uacute;a el valor de ThisBinding del contexto de ejecuci&amp;oacute;n actual</target>
        </trans-unit>
        <trans-unit id="21236dd5251fb6c854cd82db5d7b667a4cfa5baa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;this&lt;/code&gt; keyword is &lt;a href=&quot;http://javascriptissexy.com/understand-javascripts-this-with-clarity-and-master-it/#When_this_is_most_misunderstood_and_becomes_tricky&quot;&gt;most misunderstood&lt;/a&gt; when: 1) we borrow a method that uses &lt;code&gt;this&lt;/code&gt;, 2) we assign a method that uses &lt;code&gt;this&lt;/code&gt; to a variable, 3) a function that uses &lt;code&gt;this&lt;/code&gt; is passed as a callback function, and 4) &lt;code&gt;this&lt;/code&gt; is used inside a closure &amp;mdash; an inner function. &lt;sup&gt;(2)&lt;/sup&gt;</source>
          <target state="translated">La palabra clave &lt;code&gt;this&lt;/code&gt; es &lt;a href=&quot;http://javascriptissexy.com/understand-javascripts-this-with-clarity-and-master-it/#When_this_is_most_misunderstood_and_becomes_tricky&quot;&gt;m&amp;aacute;s incomprendida&lt;/a&gt; cuando: 1) tomamos prestado un m&amp;eacute;todo que usa &lt;code&gt;this&lt;/code&gt; , 2) asignamos un m&amp;eacute;todo que usa &lt;code&gt;this&lt;/code&gt; a una variable, 3) una funci&amp;oacute;n que usa &lt;code&gt;this&lt;/code&gt; se pasa como una funci&amp;oacute;n de devoluci&amp;oacute;n de llamada, y 4) &lt;code&gt;this&lt;/code&gt; es usado dentro de un cierre, una funci&amp;oacute;n interna. &lt;sup&gt;(2)&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="0273a69ad15752e42d17d46c263b491390395350" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;this&lt;/em&gt; reference ALWAYS refers to (and holds the value of) an
  object&amp;mdash;a singular object&amp;mdash;and it is usually used inside a function or a
  method, although it can be used outside a function in the global
  scope. Note that when we use strict mode, this holds the value of
  undefined in global functions and in anonymous functions that are not
  bound to any object.</source>
          <target state="translated">La referencia &lt;em&gt;this&lt;/em&gt; SIEMPRE se refiere (y mantiene el valor de) un objeto, un objeto singular, y generalmente se usa dentro de una funci&amp;oacute;n o un m&amp;eacute;todo, aunque se puede usar fuera de una funci&amp;oacute;n en el &amp;aacute;mbito global. Tenga en cuenta que cuando usamos el modo estricto, esto tiene el valor de indefinido en funciones globales y en funciones an&amp;oacute;nimas que no est&amp;aacute;n vinculadas a ning&amp;uacute;n objeto.</target>
        </trans-unit>
        <trans-unit id="0bfa8fcb62a7f1e00d91e50841a62afe63da5f55" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;&quot;this&quot;&lt;/strong&gt; in above examples refer to &quot;button&quot; element and the
&quot;div&quot; element respectively.</source>
          <target state="translated">El &lt;strong&gt;&quot;esto&quot;&lt;/strong&gt; en los ejemplos anteriores se refiere al elemento &quot;bot&amp;oacute;n&quot; y al elemento &quot;div&quot; respectivamente.</target>
        </trans-unit>
        <trans-unit id="f95de8ec5b813d1517bdbcb77f6c0c1a7fb9c6c1" translate="yes" xml:space="preserve">
          <source>The above code clearly shows that the &quot;this&quot; value for any &quot;NON
Bound Function&quot; can be altered through &lt;strong&gt;call/apply&lt;/strong&gt;. Also,if the
&lt;strong&gt;&quot;this&quot;&lt;/strong&gt; parameter is  not explicitly passed to &lt;strong&gt;call/apply&lt;/strong&gt;, &lt;strong&gt;&quot;current object&quot;&lt;/strong&gt; (and hence the value of &quot;this&quot;) is set to &lt;strong&gt;&quot;window&quot;&lt;/strong&gt; in Non strict mode and &lt;strong&gt;&quot;undefined&quot;&lt;/strong&gt; in strict mode.</source>
          <target state="translated">El c&amp;oacute;digo anterior muestra claramente que el valor &quot;this&quot; para cualquier &quot;Funci&amp;oacute;n NO LIGADA&quot; puede modificarse mediante &lt;strong&gt;call / apply&lt;/strong&gt; . Adem&amp;aacute;s, si el par&amp;aacute;metro &lt;strong&gt;&quot;this&quot;&lt;/strong&gt; no se pasa expl&amp;iacute;citamente a &lt;strong&gt;call / apply&lt;/strong&gt; , &lt;strong&gt;&quot;objeto actual&quot;&lt;/strong&gt; (y, por lo tanto, el valor de &quot;this&quot;) se establece en &lt;strong&gt;&quot;window&quot;&lt;/strong&gt; en modo No estricto y &lt;strong&gt;&quot;undefined&quot;&lt;/strong&gt; en modo estricto.</target>
        </trans-unit>
        <trans-unit id="c6c331ad3ba8cbd437f9af0ab0775ebb81b757f7" translate="yes" xml:space="preserve">
          <source>The code above translates to</source>
          <target state="translated">El código anterior se traduce a</target>
        </trans-unit>
        <trans-unit id="48a4deba793f1321a1d058e028490a18d81f4854" translate="yes" xml:space="preserve">
          <source>The constructor of this &lt;code&gt;Object&lt;/code&gt; has its constructor set to &lt;code&gt;Person&lt;/code&gt;. Also, note that &lt;code&gt;typeof awal&lt;/code&gt; would return &lt;code&gt;Object&lt;/code&gt; only.</source>
          <target state="translated">El constructor de este &lt;code&gt;Object&lt;/code&gt; tiene su constructor establecido en &lt;code&gt;Person&lt;/code&gt; a . Adem&amp;aacute;s, tenga en cuenta que &lt;code&gt;typeof awal&lt;/code&gt; devolver&amp;iacute;a solo &lt;code&gt;Object&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="598e31c8f2d3b5ebb3d9a975927bac31dd78c17d" translate="yes" xml:space="preserve">
          <source>The following describes each of this contexts one by one:</source>
          <target state="translated">A continuación se describe cada uno de estos contextos uno por uno:</target>
        </trans-unit>
        <trans-unit id="5ffc86b9fbcb86bd5ce90c80ade9aac7f6674126" translate="yes" xml:space="preserve">
          <source>The following summarizes the entire article</source>
          <target state="translated">A continuación se resume todo el artículo</target>
        </trans-unit>
        <trans-unit id="b9c4aa48554b8690755f430230adc7aead0e4875" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;Person&lt;/code&gt; itself is now invoked; &lt;code&gt;this&lt;/code&gt; being a reference to the newly constructed object &lt;code&gt;awal&lt;/code&gt;.</source>
          <target state="translated">Ahora se invoca la funci&amp;oacute;n &lt;code&gt;Person&lt;/code&gt; a misma; &lt;code&gt;this&lt;/code&gt; es una referencia al objeto reci&amp;eacute;n construido &lt;code&gt;awal&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d26b585e0f11b2474001731ad046d99b221862ac" translate="yes" xml:space="preserve">
          <source>The idea behind &lt;code&gt;this&lt;/code&gt; is to understand that the function invocation types have the significant importance on setting &lt;code&gt;this&lt;/code&gt; value.</source>
          <target state="translated">La idea detr&amp;aacute;s de &lt;code&gt;this&lt;/code&gt; es comprender que los tipos de invocaci&amp;oacute;n de funciones tienen una importancia significativa para establecer &lt;code&gt;this&lt;/code&gt; valor.</target>
        </trans-unit>
        <trans-unit id="cd9df2dd9475c12d7d70a035ffbc3060e8d9dccf" translate="yes" xml:space="preserve">
          <source>The line &lt;code&gt;myFun.call(obj);&lt;/code&gt; is invoking the special built-in function &lt;code&gt;Function.prototype.call()&lt;/code&gt;, which accepts &lt;code&gt;thisArg&lt;/code&gt; as the first argument.</source>
          <target state="translated">La l&amp;iacute;nea &lt;code&gt;myFun.call(obj);&lt;/code&gt; invoca la funci&amp;oacute;n incorporada especial &lt;code&gt;Function.prototype.call()&lt;/code&gt; , que acepta &lt;code&gt;thisArg&lt;/code&gt; como primer argumento.</target>
        </trans-unit>
        <trans-unit id="205b8665ab9d83e5add811cf8bd2f784d1caf68a" translate="yes" xml:space="preserve">
          <source>The reason for writing &quot;in most other cases&quot; is because there are eight ECMAScript 5 built-in functions that allow ThisBinding to be specified in the arguments list. These special functions take a so-called &lt;code&gt;thisArg&lt;/code&gt; which becomes the ThisBinding when calling the function (&lt;a href=&quot;https://ecma-international.org/ecma-262/5.1/#sec-10.4.3&quot;&gt;&amp;sect;10.4.3&lt;/a&gt;).</source>
          <target state="translated">La raz&amp;oacute;n para escribir &quot;en la mayor&amp;iacute;a de los otros casos&quot; es porque hay ocho funciones integradas de ECMAScript 5 que permiten especificar ThisBinding en la lista de argumentos. Estas funciones especiales toman el llamado &lt;code&gt;thisArg&lt;/code&gt; que se convierte en ThisBinding cuando se llama a la funci&amp;oacute;n ( &lt;a href=&quot;https://ecma-international.org/ecma-262/5.1/#sec-10.4.3&quot;&gt;&amp;sect;10.4.3&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="a1d54f980faedf5c96fee5c403683ca230e1320f" translate="yes" xml:space="preserve">
          <source>The same above behavior is achieved when we attach the function to the event handler using Microsoft's Event Registration model method &lt;code&gt;attachEvent&lt;/code&gt;. Instead of assigning the function to the event handler (and the thus making the function method of the element), it calls the function on the event (effectively calling it in global context).</source>
          <target state="translated">El mismo comportamiento anterior se logra cuando adjuntamos la funci&amp;oacute;n al controlador de eventos utilizando el m&amp;eacute;todo del modelo de Registro de eventos de Microsoft &lt;code&gt;attachEvent&lt;/code&gt; . En lugar de asignar la funci&amp;oacute;n al controlador de eventos (y al hacer as&amp;iacute; el m&amp;eacute;todo de funci&amp;oacute;n del elemento), llama a la funci&amp;oacute;n en el evento (efectivamente lo llama en contexto global).</target>
        </trans-unit>
        <trans-unit id="f835f6ede39f09721b6b3a08a6766f6a816b4a55" translate="yes" xml:space="preserve">
          <source>The value of &quot;this&quot; depends on the &quot;context&quot; in which the function is executed. The context can be any object or the global object, i.e., window.</source>
          <target state="translated">El valor de &quot;esto&quot; depende del &quot;contexto&quot; en el que se ejecuta la función.El contexto puede ser cualquier objeto o el objeto global,es decir,la ventana.</target>
        </trans-unit>
        <trans-unit id="8f71afcd2f8c39c35d17ede8ea64967e5b3dabc9" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;this&lt;/code&gt; is determined by &lt;strong&gt;how the function is invoked not, where it was created!&lt;/strong&gt;</source>
          <target state="translated">El valor de &lt;code&gt;this&lt;/code&gt; est&amp;aacute; determinado por &lt;strong&gt;c&amp;oacute;mo se invoca la funci&amp;oacute;n, no d&amp;oacute;nde se cre&amp;oacute;.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="85a035ea25fb197d75ddcfad6ad7ecc47bbf83df" translate="yes" xml:space="preserve">
          <source>The value of &lt;strong&gt;&quot;this&quot;&lt;/strong&gt; is fixed for a Bound function and cannot be
overriden by &lt;strong&gt;call&lt;/strong&gt; and &lt;strong&gt;apply&lt;/strong&gt; methods of the function.</source>
          <target state="translated">El valor de &lt;strong&gt;&quot;this&quot;&lt;/strong&gt; se fija para una funci&amp;oacute;n Bound y no se puede anular mediante una &lt;strong&gt;llamada&lt;/strong&gt; y &lt;strong&gt;aplicar&lt;/strong&gt; m&amp;eacute;todos de la funci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="732a7262b87dd35272a2fefa011c384eaf4c1806" translate="yes" xml:space="preserve">
          <source>The value of &lt;strong&gt;&quot;this&quot;&lt;/strong&gt; within a Non Bound function can be overriden by
&lt;strong&gt;call&lt;/strong&gt; and &lt;strong&gt;apply&lt;/strong&gt; methods of the function.</source>
          <target state="translated">El valor de &lt;strong&gt;&quot;esto&quot;&lt;/strong&gt; dentro de una funci&amp;oacute;n no vinculada se puede anular mediante una &lt;strong&gt;llamada&lt;/strong&gt; y &lt;strong&gt;aplicar&lt;/strong&gt; m&amp;eacute;todos de la funci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="986983b3bc829dee13e4af0f6cd58cc64ea6a541" translate="yes" xml:space="preserve">
          <source>The value of &lt;strong&gt;&quot;this&quot;&lt;/strong&gt; within a Non Bound function is the reference to object in context of which the function is invoked (&lt;strong&gt;&quot;current object&quot;&lt;/strong&gt;)</source>
          <target state="translated">El valor de &lt;strong&gt;&quot;esto&quot;&lt;/strong&gt; dentro de una funci&amp;oacute;n no vinculada es la referencia al objeto en el contexto del cual se invoca la funci&amp;oacute;n ( &lt;strong&gt;&quot;objeto actual&quot;&lt;/strong&gt; )</target>
        </trans-unit>
        <trans-unit id="94e5e1e54d6e891723770f7f55f8c8aa368f150f" translate="yes" xml:space="preserve">
          <source>The value of &lt;strong&gt;&quot;this&quot;&lt;/strong&gt; within a constructor is the object that is being
created and initialized</source>
          <target state="translated">El valor de &lt;strong&gt;&quot;esto&quot;&lt;/strong&gt; dentro de un constructor es el objeto que se est&amp;aacute; creando e inicializando</target>
        </trans-unit>
        <trans-unit id="5ff56d075173f67c99015d872ca5e48d81c42ed8" translate="yes" xml:space="preserve">
          <source>The value of &lt;strong&gt;&quot;this&quot;&lt;/strong&gt; within an inline DOM event handler is reference
to the element for which the event handler is given.</source>
          <target state="translated">El valor de &lt;strong&gt;&quot;esto&quot;&lt;/strong&gt; dentro de un controlador de eventos DOM en l&amp;iacute;nea es una referencia al elemento para el que se proporciona el controlador de eventos.</target>
        </trans-unit>
        <trans-unit id="23a806a2918ae62d9efe5b8e4d50db0d562119c4" translate="yes" xml:space="preserve">
          <source>There are Four Scenarios where &lt;em&gt;this&lt;/em&gt; can be confusing:</source>
          <target state="translated">Hay cuatro escenarios en los que &lt;em&gt;esto&lt;/em&gt; puede ser confuso:</target>
        </trans-unit>
        <trans-unit id="e38bf69ca4f13895c35d97268be9b7f0be29ccd7" translate="yes" xml:space="preserve">
          <source>There are different ways to do this. If you have called native methods in Javascript like &lt;code&gt;forEach&lt;/code&gt; and &lt;code&gt;slice&lt;/code&gt;, you should already know that the &lt;code&gt;this&lt;/code&gt; variable in that case refers to the &lt;code&gt;Object&lt;/code&gt; on which you called that function (Note that in javascript, just about everything is an &lt;code&gt;Object&lt;/code&gt;, including &lt;code&gt;Array&lt;/code&gt;s and &lt;code&gt;Function&lt;/code&gt;s). Take the following code for example.</source>
          <target state="translated">Hay maneras diferentes de hacer esto. Si ha llamado a m&amp;eacute;todos nativos en Javascript como &lt;code&gt;forEach&lt;/code&gt; y &lt;code&gt;slice&lt;/code&gt; , ya debe saber que &lt;code&gt;this&lt;/code&gt; variable en ese caso se refiere al &lt;code&gt;Object&lt;/code&gt; en el que llam&amp;oacute; a esa funci&amp;oacute;n (Tenga en cuenta que en javascript, casi todo es un &lt;code&gt;Object&lt;/code&gt; , incluyendo &lt;code&gt;Array&lt;/code&gt; s y &lt;code&gt;Function&lt;/code&gt; s). Tome el siguiente c&amp;oacute;digo por ejemplo.</target>
        </trans-unit>
        <trans-unit id="279973f865726145d86bc2b948936a3c5ea84f1b" translate="yes" xml:space="preserve">
          <source>There are various ways to define an object's prototype, the most common in 2019 is the &lt;code&gt;class&lt;/code&gt; keyword. For the purposes of &lt;code&gt;this&lt;/code&gt; though it doesn't matter. What matters is that as it looks in object &lt;code&gt;a&lt;/code&gt; for property &lt;code&gt;b&lt;/code&gt; if it finds property &lt;code&gt;b&lt;/code&gt; on the object or in it's prototype chain if &lt;code&gt;b&lt;/code&gt; ends up being a function then the same rules as above apply. The function &lt;code&gt;b&lt;/code&gt; references will be called using the &lt;code&gt;call&lt;/code&gt; method and passing &lt;code&gt;a&lt;/code&gt; as objectForThis as shown a the top of this answer.</source>
          <target state="translated">Hay varias formas de definir el prototipo de un objeto, la m&amp;aacute;s com&amp;uacute;n en 2019 es la palabra clave de &lt;code&gt;class&lt;/code&gt; . A los efectos de &lt;code&gt;this&lt;/code&gt; aunque no importa. Lo que importa es que, dado que busca en el objeto a la propiedad &lt;code&gt;b&lt;/code&gt; si encuentra la propiedad &lt;code&gt;b&lt;/code&gt; en el objeto o en su cadena de prototipo si &lt;code&gt;b&lt;/code&gt; termina siendo una funci&amp;oacute;n, se aplican las mismas reglas que las anteriores. Las referencias a la funci&amp;oacute;n &lt;code&gt;b&lt;/code&gt; se &lt;code&gt;call&lt;/code&gt; utilizando el m&amp;eacute;todo de llamada y pasando &lt;code&gt;a&lt;/code&gt; como objectForThis como se muestra al principio de esta respuesta.</target>
        </trans-unit>
        <trans-unit id="4b176e3b91607484833f86d66ef5e37c3e87f616" translate="yes" xml:space="preserve">
          <source>There is a lot of confusion regarding how &lt;strong&gt;&quot;this&quot;&lt;/strong&gt; keyword is interpreted in JavaScript. Hopefully this article will lay all those to rest once and for all. And a lot more. Please read the entire article carefully. Be forewarned that this article is long.</source>
          <target state="translated">Existe mucha confusi&amp;oacute;n sobre c&amp;oacute;mo se interpreta &lt;strong&gt;&quot;esta&quot;&lt;/strong&gt; palabra clave en JavaScript. Esperemos que este art&amp;iacute;culo descanse de una vez por todas. Y mucho m&amp;aacute;s. Por favor lea el art&amp;iacute;culo completo cuidadosamente. Tenga en cuenta que este art&amp;iacute;culo es largo.</target>
        </trans-unit>
        <trans-unit id="9bf2606f55ac02610bfeca5231ecaa8045e7e025" translate="yes" xml:space="preserve">
          <source>There is always some value supplied for &lt;code&gt;objectForThis&lt;/code&gt;.</source>
          <target state="translated">Siempre se proporciona alg&amp;uacute;n valor para &lt;code&gt;objectForThis&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6f5b72ee2e27b15caab5b155ad2ccf879983f917" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s a special case I didn&amp;rsquo;t yet mention. When constructing a new object via the &lt;code&gt;new&lt;/code&gt; operator, the JavaScript interpreter creates a new, empty object, sets some internal properties, and then calls the constructor function on the new object. Thus, when a function is called in a constructor context, the value of &lt;code&gt;this&lt;/code&gt; is the new object that the interpreter created:</source>
          <target state="translated">Hay un caso especial que a&amp;uacute;n no mencion&amp;eacute;. Al construir un nuevo objeto a trav&amp;eacute;s del &lt;code&gt;new&lt;/code&gt; operador, el int&amp;eacute;rprete de JavaScript crea un nuevo objeto vac&amp;iacute;o, establece algunas propiedades internas y luego llama a la funci&amp;oacute;n de constructor en el nuevo objeto. Por lo tanto, cuando se llama a una funci&amp;oacute;n en un contexto de constructor, el valor de &lt;code&gt;this&lt;/code&gt; es el nuevo objeto que cre&amp;oacute; el int&amp;eacute;rprete:</target>
        </trans-unit>
        <trans-unit id="2d3a18e72bf0f045f8f3de4d4504d75c62e5dcda" translate="yes" xml:space="preserve">
          <source>These methods allows to write a function once and invoke it in different context. In other words, they allows to specify the value of &lt;code&gt;this&lt;/code&gt; which will be used while the function is being executed. They also take any parameters to be passed to the original function when it is invoked.</source>
          <target state="translated">Estos m&amp;eacute;todos permiten escribir una funci&amp;oacute;n una vez e invocarla en un contexto diferente. En otras palabras, permiten especificar el valor de &lt;code&gt;this&lt;/code&gt; que se utilizar&amp;aacute; mientras se ejecuta la funci&amp;oacute;n. Tambi&amp;eacute;n toman cualquier par&amp;aacute;metro para pasar a la funci&amp;oacute;n original cuando se invoca.</target>
        </trans-unit>
        <trans-unit id="4ade0a7126aef80885995d3c6e7d2a3b5b9a749a" translate="yes" xml:space="preserve">
          <source>These special built-in functions are:</source>
          <target state="translated">Estas funciones especiales incorporadas son:</target>
        </trans-unit>
        <trans-unit id="85527d5006265cfde99894b7c55c9fb14d1c3dc8" translate="yes" xml:space="preserve">
          <source>This is a typical example of using &lt;code&gt;call&lt;/code&gt;. It basically takes the first parameter and sets &lt;code&gt;this&lt;/code&gt; in the function &lt;code&gt;foo&lt;/code&gt; as a reference to &lt;code&gt;thisArg&lt;/code&gt;.  All other parameters passed to &lt;code&gt;call&lt;/code&gt; is passed to the function &lt;code&gt;foo&lt;/code&gt; as arguments.</source>
          <target state="translated">Este es un ejemplo t&amp;iacute;pico de uso de &lt;code&gt;call&lt;/code&gt; . B&amp;aacute;sicamente toma el primer par&amp;aacute;metro y lo establece en la funci&amp;oacute;n &lt;code&gt;foo&lt;/code&gt; como referencia a &lt;code&gt;thisArg&lt;/code&gt; . Todos los dem&amp;aacute;s par&amp;aacute;metros pasados ​​a la &lt;code&gt;call&lt;/code&gt; se pasan a la funci&amp;oacute;n &lt;code&gt;foo&lt;/code&gt; como argumentos.</target>
        </trans-unit>
        <trans-unit id="29ed5f10284269291bb711c4ff11d342e2767871" translate="yes" xml:space="preserve">
          <source>This is different from Python, in which accessing a method (&lt;code&gt;obj.myMethod&lt;/code&gt;) creates a &lt;a href=&quot;http://docs.python.org/3/library/stdtypes.html#methods&quot;&gt;bound method object&lt;/a&gt;.</source>
          <target state="translated">Esto es diferente de Python, en el que acceder a un m&amp;eacute;todo ( &lt;code&gt;obj.myMethod&lt;/code&gt; ) crea un &lt;a href=&quot;http://docs.python.org/3/library/stdtypes.html#methods&quot;&gt;objeto de m&amp;eacute;todo vinculado&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a132674b519e683c1c771b823eb5a1e2de6af493" translate="yes" xml:space="preserve">
          <source>This is the best explanation I've seen: &lt;a href=&quot;http://javascriptissexy.com/understand-javascripts-this-with-clarity-and-master-it/&quot;&gt;Understand JavaScripts &lt;em&gt;this&lt;/em&gt; with Clarity&lt;/a&gt;</source>
          <target state="translated">Esta es la mejor explicaci&amp;oacute;n que he visto: &lt;a href=&quot;http://javascriptissexy.com/understand-javascripts-this-with-clarity-and-master-it/&quot;&gt;Comprenda JavaScripts &lt;em&gt;esto&lt;/em&gt; con Clarity&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b0808c58b0591e7278bd423057d577254441336b" translate="yes" xml:space="preserve">
          <source>This is the case for JavaScript code that is evaluated at the top-level, e.g. when directly inside a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">Este es el caso del c&amp;oacute;digo JavaScript que se eval&amp;uacute;a en el nivel superior, por ejemplo, cuando est&amp;aacute; directamente dentro de un &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="802391aac07cdb035195e6978ec32a12d3125ef9" translate="yes" xml:space="preserve">
          <source>This is what both &lt;code&gt;bind&lt;/code&gt; and &lt;code&gt;=&amp;gt;&lt;/code&gt; functions effectively do. They are more syntactic sugar. They effectively build a new invisible function exactly like &lt;code&gt;bar&lt;/code&gt; above that explicitly sets &lt;code&gt;this&lt;/code&gt; before it calls whatever function is specified. In the case of bind &lt;code&gt;this&lt;/code&gt; is set to whatever you pass to &lt;code&gt;bind&lt;/code&gt;.</source>
          <target state="translated">Esto es lo que efectivamente hacen las funciones &lt;code&gt;bind&lt;/code&gt; y &lt;code&gt;=&amp;gt;&lt;/code&gt; . Son m&amp;aacute;s az&amp;uacute;car sint&amp;aacute;ctica. Construyen efectivamente una nueva funci&amp;oacute;n invisible exactamente como la &lt;code&gt;bar&lt;/code&gt; ra anterior que establece &lt;code&gt;this&lt;/code&gt; expl&amp;iacute;citamente antes de que llame a cualquier funci&amp;oacute;n que se especifique. En el caso de la vinculaci&amp;oacute;n, &lt;code&gt;this&lt;/code&gt; se establece en todo lo que pase para &lt;code&gt;bind&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3f377690fefdec48899ec0d15066da36044d96e2" translate="yes" xml:space="preserve">
          <source>This mindset is correct when dealing with &lt;code&gt;this&lt;/code&gt; and will save you from headache.</source>
          <target state="translated">Esta mentalidad es correcta cuando se trata de &lt;code&gt;this&lt;/code&gt; y le ahorrar&amp;aacute; dolor de cabeza.</target>
        </trans-unit>
        <trans-unit id="fe922a11381e67c113153def83bf53886fc17c59" translate="yes" xml:space="preserve">
          <source>This new &lt;code&gt;Object&lt;/code&gt; would be assigned the prototype of &lt;code&gt;Person.prototype&lt;/code&gt;. This means that any method or property in the &lt;code&gt;Person&lt;/code&gt; prototype would be available to all instances of &lt;code&gt;Person&lt;/code&gt;, including &lt;code&gt;awal&lt;/code&gt;.</source>
          <target state="translated">A este nuevo &lt;code&gt;Object&lt;/code&gt; se le asignar&amp;iacute;a el prototipo de &lt;code&gt;Person.prototype&lt;/code&gt; . Esto significa que cualquier m&amp;eacute;todo o propiedad en el prototipo de &lt;code&gt;Person&lt;/code&gt; a estar&amp;iacute;a disponible para todas las instancias de &lt;code&gt;Person&lt;/code&gt; a , incluido &lt;code&gt;awal&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8390b31573bde1e5e11596eda14bd9837b0066dd" translate="yes" xml:space="preserve">
          <source>This occurs when calling a function. If a function is called on an object, such as in &lt;code&gt;obj.myMethod()&lt;/code&gt; or the equivalent &lt;code&gt;obj[&quot;myMethod&quot;]()&lt;/code&gt;, then ThisBinding is set to the object (&lt;code&gt;obj&lt;/code&gt; in the example; &lt;a href=&quot;https://ecma-international.org/ecma-262/5.1/#sec-13.2.1&quot;&gt;&amp;sect;13.2.1&lt;/a&gt;). In most other cases, ThisBinding is set to the global object (&lt;a href=&quot;https://ecma-international.org/ecma-262/5.1/#sec-10.4.3&quot;&gt;&amp;sect;10.4.3&lt;/a&gt;).</source>
          <target state="translated">Esto ocurre cuando se llama a una funci&amp;oacute;n. Si se llama a una funci&amp;oacute;n en un objeto, como en &lt;code&gt;obj.myMethod()&lt;/code&gt; o el equivalente &lt;code&gt;obj[&quot;myMethod&quot;]()&lt;/code&gt; , ThisBinding se establece en el objeto ( &lt;code&gt;obj&lt;/code&gt; en el ejemplo; &lt;a href=&quot;https://ecma-international.org/ecma-262/5.1/#sec-13.2.1&quot;&gt;&amp;sect;13.2.1&lt;/a&gt; ). En la mayor&amp;iacute;a de los otros casos, ThisBinding se establece en el objeto global ( &lt;a href=&quot;https://ecma-international.org/ecma-262/5.1/#sec-10.4.3&quot;&gt;&amp;sect;10.4.3&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="31e21fd5682329c65723d9fdb2afb15437924824" translate="yes" xml:space="preserve">
          <source>This one was tricky. When evaluating the eval code, &lt;code&gt;this&lt;/code&gt; is &lt;code&gt;obj&lt;/code&gt;. However, in the eval code, &lt;code&gt;myFun&lt;/code&gt; is not called on an object, so ThisBinding is set to &lt;code&gt;window&lt;/code&gt; for the call.</source>
          <target state="translated">Este fue complicado. Al evaluar el c&amp;oacute;digo eval, &lt;code&gt;this&lt;/code&gt; es &lt;code&gt;obj&lt;/code&gt; . Sin embargo, en el c&amp;oacute;digo de evaluaci&amp;oacute;n, &lt;code&gt;myFun&lt;/code&gt; no se llama en un objeto, por lo que ThisBinding se configura como &lt;code&gt;window&lt;/code&gt; para la llamada.</target>
        </trans-unit>
        <trans-unit id="906f21f1345827c9f5f29e264d69b70a0a4c77a2" translate="yes" xml:space="preserve">
          <source>ThisBinding is set to the global object &lt;em&gt;as if&lt;/em&gt; executing in the initial global execution context (&lt;a href=&quot;https://ecma-international.org/ecma-262/5.1/#sec-10.4.2&quot;&gt;&amp;sect;10.4.2&lt;/a&gt; (1)).</source>
          <target state="translated">ThisBinding se establece en el objeto global &lt;em&gt;como si se&lt;/em&gt; ejecutara en el contexto de ejecuci&amp;oacute;n global inicial ( &lt;a href=&quot;https://ecma-international.org/ecma-262/5.1/#sec-10.4.2&quot;&gt;&amp;sect;10.4.2&lt;/a&gt; (1)).</target>
        </trans-unit>
        <trans-unit id="05a9ff5b30e366baba755d7af02bdee90564da08" translate="yes" xml:space="preserve">
          <source>ThisBinding is something that the JavaScript interpreter maintains as it evaluates JavaScript code, like a special CPU register which holds a reference to an object. The interpreter updates the ThisBinding whenever establishing an execution context in one of only three different cases:</source>
          <target state="translated">EsteBinding es algo que el intérprete de JavaScript mantiene al evaluar el código de JavaScript,como un registro especial de la CPU que contiene una referencia a un objeto.El intérprete actualiza el ThisBinding siempre que establece un contexto de ejecución en uno de sólo tres casos diferentes:</target>
        </trans-unit>
        <trans-unit id="99dd9cee0f0141c71707204de7a8eb68227dcb58" translate="yes" xml:space="preserve">
          <source>Those are the rules for plain JavaScript. When you begin using JavaScript libraries (e.g. jQuery), you may find that certain library functions manipulate the value of &lt;code&gt;this&lt;/code&gt;. The developers of those JavaScript libraries do this because it tends to support the most common use cases, and users of the library typically find this behavior to be more convenient. When passing callback functions referencing &lt;code&gt;this&lt;/code&gt; to library functions, you should refer to the documentation for any guarantees about what the value of &lt;code&gt;this&lt;/code&gt; is when the function is called.</source>
          <target state="translated">Esas son las reglas para JavaScript simple. Cuando comience a usar las bibliotecas de JavaScript (por ejemplo, jQuery), puede encontrar que ciertas funciones de la biblioteca manipulan el valor de &lt;code&gt;this&lt;/code&gt; . Los desarrolladores de esas bibliotecas de JavaScript hacen esto porque tiende a admitir los casos de uso m&amp;aacute;s comunes, y los usuarios de la biblioteca generalmente consideran que este comportamiento es m&amp;aacute;s conveniente. Al pasar las funciones de devoluci&amp;oacute;n de llamada que hacen referencia a &lt;code&gt;this&lt;/code&gt; a las funciones de la biblioteca, debe consultar la documentaci&amp;oacute;n para cualquier garant&amp;iacute;a sobre cu&amp;aacute;l es el valor de &lt;code&gt;this&lt;/code&gt; cuando se llama a la funci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="e2e075f690095f8a07098f5032ffef152a676d5a" translate="yes" xml:space="preserve">
          <source>Try it out; you'll begin to like this pattern of programming</source>
          <target state="translated">Pruébalo;te empezará a gustar este patrón de programación</target>
        </trans-unit>
        <trans-unit id="b31340518b4d3450382a16fe42d7b550a535da55" translate="yes" xml:space="preserve">
          <source>Unless you &lt;code&gt;bind&lt;/code&gt; the context</source>
          <target state="translated">A menos que unas el contexto</target>
        </trans-unit>
        <trans-unit id="44c1de29d488c2efbb55dbbf89180707d408e09f" translate="yes" xml:space="preserve">
          <source>Use of &lt;em&gt;bind&lt;/em&gt;</source>
          <target state="translated">Uso de &lt;em&gt;bind&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="130803684886f32a73870ec3182481aa18a857a0" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;bind&lt;/code&gt;.</source>
          <target state="translated">Usando &lt;code&gt;bind&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c9f1a654f7867f9709c86fb54556d6b1085312f6" translate="yes" xml:space="preserve">
          <source>Usually the value of &lt;code&gt;this&lt;/code&gt; is determined by the Object which is left of the dot. (&lt;code&gt;window&lt;/code&gt; in global space)</source>
          <target state="translated">Por lo general, el valor de &lt;code&gt;this&lt;/code&gt; est&amp;aacute; determinado por el objeto que queda del punto. ( &lt;code&gt;window&lt;/code&gt; en el espacio global)</target>
        </trans-unit>
        <trans-unit id="3fe0e54dcbb7644fba3d3f361c514bd846e8caf6" translate="yes" xml:space="preserve">
          <source>We can try above points with functions too. However there are some differences.</source>
          <target state="translated">Podemos probar los puntos anteriores con funciones también.Sin embargo,hay algunas diferencias.</target>
        </trans-unit>
        <trans-unit id="02ee79a3f4e52fa8dc6015c8800e56de11fbd2ff" translate="yes" xml:space="preserve">
          <source>We use this similar to the way we use pronouns in natural languages like English:  &amp;ldquo;John is running fast because &lt;strong&gt;&lt;em&gt;he&lt;/em&gt;&lt;/strong&gt; is trying to catch the train.&amp;rdquo; Instead we could have written &amp;ldquo;&amp;hellip; &lt;strong&gt;&lt;em&gt;John&lt;/em&gt;&lt;/strong&gt; is trying to catch the train&amp;rdquo;.</source>
          <target state="translated">Usamos esto de manera similar a la forma en que usamos pronombres en idiomas naturales como el ingl&amp;eacute;s: &quot;John est&amp;aacute; corriendo r&amp;aacute;pido porque est&amp;aacute; tratando de tomar el tren&quot;. En cambio, podr&amp;iacute;amos haber escrito &quot;... &lt;strong&gt;&lt;em&gt;John&lt;/em&gt;&lt;/strong&gt; est&amp;aacute; tratando de tomar el tren&quot;.</target>
        </trans-unit>
        <trans-unit id="59c84c3a56d40f1298569aad07647b4063c6d313" translate="yes" xml:space="preserve">
          <source>What does &lt;code&gt;var that = this&lt;/code&gt; means in JavaScript</source>
          <target state="translated">&amp;iquest;Qu&amp;eacute; significa &lt;code&gt;var that = this&lt;/code&gt; significa en JavaScript?</target>
        </trans-unit>
        <trans-unit id="d6960afa81986e4b8866c2cd069e74c4a085e98a" translate="yes" xml:space="preserve">
          <source>What holds the future</source>
          <target state="translated">Lo que nos depara el futuro...</target>
        </trans-unit>
        <trans-unit id="8522002fd86f4ae1d009f9373919bcfac6e5aa3c" translate="yes" xml:space="preserve">
          <source>What if we call the function as a method with Object-dot notation?</source>
          <target state="translated">¿Y si llamamos a la función como un método con notación de punto-objeto?</target>
        </trans-unit>
        <trans-unit id="e90a818f0c0f181348f3ffa33436750e9c56414d" translate="yes" xml:space="preserve">
          <source>What if we use the &lt;code&gt;new&lt;/code&gt; keyword?</source>
          <target state="translated">&amp;iquest;Qu&amp;eacute; pasa si usamos la &lt;code&gt;new&lt;/code&gt; palabra clave?</target>
        </trans-unit>
        <trans-unit id="0b741f1c36a30a2f39adb4807b11baf832686d62" translate="yes" xml:space="preserve">
          <source>What is held in &lt;code&gt;this&lt;/code&gt; by default?</source>
          <target state="translated">&amp;iquest;Qu&amp;eacute; se guarda en &lt;code&gt;this&lt;/code&gt; por defecto?</target>
        </trans-unit>
        <trans-unit id="f31de30789ea80d6b68979bdfc23922eb652ecfe" translate="yes" xml:space="preserve">
          <source>What is the value of &lt;code&gt;this&lt;/code&gt; at the marked line when &lt;code&gt;obj.staticFunction()&lt;/code&gt; is executed? Why?</source>
          <target state="translated">&amp;iquest;Cu&amp;aacute;l es el valor de &lt;code&gt;this&lt;/code&gt; en la l&amp;iacute;nea marcada cuando se &lt;code&gt;obj.staticFunction()&lt;/code&gt; ? &amp;iquest;Por qu&amp;eacute;?</target>
        </trans-unit>
        <trans-unit id="19602fe263ba02a9e70190487cdbb1f5d8295602" translate="yes" xml:space="preserve">
          <source>What is the value of &lt;code&gt;this&lt;/code&gt; at the marked line? Why?</source>
          <target state="translated">&amp;iquest;Cu&amp;aacute;l es el valor de &lt;code&gt;this&lt;/code&gt; en la l&amp;iacute;nea marcada? &amp;iquest;Por qu&amp;eacute;?</target>
        </trans-unit>
        <trans-unit id="10b02218e944261b661613e959beb9dc45a0a0c1" translate="yes" xml:space="preserve">
          <source>What value has &lt;code&gt;this&lt;/code&gt; where the arrow function is &lt;em&gt;defined&lt;/em&gt;?</source>
          <target state="translated">&amp;iquest;Qu&amp;eacute; valor tiene &lt;code&gt;this&lt;/code&gt; donde se &lt;em&gt;define la&lt;/em&gt; funci&amp;oacute;n de flecha?</target>
        </trans-unit>
        <trans-unit id="e78621a0c74b5518e2c62eeba51b08b351f0dc5e" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;use strict&lt;/code&gt;, &lt;code&gt;this&lt;/code&gt; in global and in anonymous functions that are not bound to any object holds a value of &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">Cuando se &lt;code&gt;use strict&lt;/code&gt; , &lt;code&gt;this&lt;/code&gt; en funciones globales y an&amp;oacute;nimas que no est&amp;aacute;n vinculadas a ning&amp;uacute;n objeto tiene un valor &lt;code&gt;undefined&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7834bcbc1ad278f4ac5802fab1061efa51a8ede7" translate="yes" xml:space="preserve">
          <source>When a &lt;strong&gt;&quot;Non Bound Function&quot;&lt;/strong&gt; is called through
&lt;strong&gt;&lt;em&gt;functionName.call&lt;/em&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;em&gt;functionName.apply&lt;/em&gt;&lt;/strong&gt;, the &lt;strong&gt;&quot;current object&quot;&lt;/strong&gt; (and hence the value of &lt;strong&gt;&quot;this&quot;&lt;/strong&gt;) is set to the value of
&lt;strong&gt;&quot;this&quot;&lt;/strong&gt; parameter (first parameter) passed to &lt;strong&gt;call/apply&lt;/strong&gt;. The following code demonstrates the same.</source>
          <target state="translated">Cuando se llama a una &lt;strong&gt;&quot;Funci&amp;oacute;n no vinculada&quot; a&lt;/strong&gt; trav&amp;eacute;s de &lt;strong&gt;&lt;em&gt;functionName.call&lt;/em&gt;&lt;/strong&gt; o &lt;strong&gt;&lt;em&gt;functionName.apply&lt;/em&gt;&lt;/strong&gt; , el &lt;strong&gt;&quot;objeto actual&quot;&lt;/strong&gt; (y, por lo tanto, el valor de &lt;strong&gt;&quot;this&quot;&lt;/strong&gt; ) se establece en el valor del par&amp;aacute;metro &lt;strong&gt;&quot;this&quot;&lt;/strong&gt; (primer par&amp;aacute;metro) pasado a la &lt;strong&gt;llamada / aplicar&lt;/strong&gt; . El siguiente c&amp;oacute;digo demuestra lo mismo.</target>
        </trans-unit>
        <trans-unit id="51ee7e3f1872cc53a0ea74134a7dcd791782c6b5" translate="yes" xml:space="preserve">
          <source>When a method which relies on &lt;em&gt;this&lt;/em&gt; is assigned to a variable across contexts, in which case &lt;em&gt;this&lt;/em&gt; references another object than originally intended.</source>
          <target state="translated">Cuando un m&amp;eacute;todo que se basa en &lt;em&gt;esto&lt;/em&gt; se asigna a una variable a trav&amp;eacute;s de contextos, en cuyo caso &lt;em&gt;esto hace&lt;/em&gt; referencia a otro objeto que no era el originalmente previsto.</target>
        </trans-unit>
        <trans-unit id="c21e1c0cd6eaa7a56b15d8a8d9f7696b5ea3ba0b" translate="yes" xml:space="preserve">
          <source>When adding event handler through JavaScript, &lt;code&gt;this&lt;/code&gt; refers to DOM element that generated the event.</source>
          <target state="translated">Al agregar un controlador de eventos a trav&amp;eacute;s de JavaScript, &lt;code&gt;this&lt;/code&gt; refiere al elemento DOM que gener&amp;oacute; el evento.</target>
        </trans-unit>
        <trans-unit id="f9cdfe0773a82ce634e71531211148636519905c" translate="yes" xml:space="preserve">
          <source>When evaluating code in the initial global execution context, ThisBinding is set to the global object, &lt;code&gt;window&lt;/code&gt; (&lt;a href=&quot;https://ecma-international.org/ecma-262/5.1/#sec-10.4.1.1&quot;&gt;&amp;sect;10.4.1.1&lt;/a&gt;).</source>
          <target state="translated">Al evaluar el c&amp;oacute;digo en el contexto de ejecuci&amp;oacute;n global inicial, ThisBinding se establece en el objeto global, &lt;code&gt;window&lt;/code&gt; ( &lt;a href=&quot;https://ecma-international.org/ecma-262/5.1/#sec-10.4.1.1&quot;&gt;&amp;sect;10.4.1.1&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="a6a1241496a32c546213391c9684a37c3f770157" translate="yes" xml:space="preserve">
          <source>When having troubles identifying &lt;code&gt;this&lt;/code&gt;, &lt;strong&gt;do not&lt;/strong&gt; ask yourself:</source>
          <target state="translated">Cuando tenga problemas para identificar &lt;code&gt;this&lt;/code&gt; , &lt;strong&gt;no se&lt;/strong&gt; pregunte:</target>
        </trans-unit>
        <trans-unit id="21c5f0557070fcbb938fbc68a83481429de1ab57" translate="yes" xml:space="preserve">
          <source>When in function is called with the &lt;code&gt;new&lt;/code&gt; keyword the value of &lt;code&gt;this&lt;/code&gt; refers to the newly created object</source>
          <target state="translated">Cuando se llama en funci&amp;oacute;n con la &lt;code&gt;new&lt;/code&gt; palabra clave, el valor de &lt;code&gt;this&lt;/code&gt; refiere al objeto reci&amp;eacute;n creado</target>
        </trans-unit>
        <trans-unit id="72b6f37ac72430df1d8593cb30420726f4ef738c" translate="yes" xml:space="preserve">
          <source>When line1 is executed, JavaScript establishes an execution context (EC) for the function call, setting &lt;code&gt;this&lt;/code&gt; to the &lt;strong&gt;object referenced by whatever came before the last &quot;.&quot;&lt;/strong&gt;. so in the last line you can understand that &lt;code&gt;a()&lt;/code&gt; was executed in the global context which is the &lt;code&gt;window&lt;/code&gt;.</source>
          <target state="translated">Cuando se ejecuta line1, JavaScript establece un contexto de ejecuci&amp;oacute;n (EC) para la llamada a la funci&amp;oacute;n, estableci&amp;eacute;ndolo en el &lt;strong&gt;objeto al que hace referencia lo que vino antes del &amp;uacute;ltimo &quot;.&quot;&lt;/strong&gt; . as&amp;iacute; que en la &amp;uacute;ltima l&amp;iacute;nea puedes entender que &lt;code&gt;a()&lt;/code&gt; se ejecut&amp;oacute; en el contexto global que es la &lt;code&gt;window&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d92af4bea245247c6b438883984c33bed622ea0a" translate="yes" xml:space="preserve">
          <source>When new &lt;code&gt;Person()&lt;/code&gt; is executed, a completely new object is created. &lt;code&gt;Person&lt;/code&gt; is called and its &lt;code&gt;this&lt;/code&gt; is set to reference that new object.</source>
          <target state="translated">Cuando se ejecuta new &lt;code&gt;Person()&lt;/code&gt; , se crea un objeto completamente nuevo. Se llama a &lt;code&gt;Person&lt;/code&gt; y se configura para hacer referencia a ese nuevo objeto.</target>
        </trans-unit>
        <trans-unit id="306c3e489768ae032ad521b39781632f59757922" translate="yes" xml:space="preserve">
          <source>When running in a browser, the value of &lt;code&gt;this&lt;/code&gt; would be logged as &lt;code&gt;window&lt;/code&gt;. This is because &lt;code&gt;window&lt;/code&gt; is the global variable in a web browser's scope.</source>
          <target state="translated">Cuando se ejecuta en un navegador, el valor de &lt;code&gt;this&lt;/code&gt; se registrar&amp;iacute;a como &lt;code&gt;window&lt;/code&gt; . Esto se debe a que la &lt;code&gt;window&lt;/code&gt; es la variable global en el alcance de un navegador web.</target>
        </trans-unit>
        <trans-unit id="c446d142725f86e5cae11afca3f3dc6b1b2b729d" translate="yes" xml:space="preserve">
          <source>When the function is used as a constructor (that is when it is called with &lt;code&gt;new&lt;/code&gt; keyword), &lt;code&gt;this&lt;/code&gt; inside function body points to the new object being constructed.</source>
          <target state="translated">Cuando la funci&amp;oacute;n se usa como un constructor (es decir, cuando se llama con una &lt;code&gt;new&lt;/code&gt; palabra clave), &lt;code&gt;this&lt;/code&gt; cuerpo interno de la funci&amp;oacute;n apunta al nuevo objeto que se est&amp;aacute; construyendo.</target>
        </trans-unit>
        <trans-unit id="9363e1921613ca1efc56fe00d3f9bed0e7ff0634" translate="yes" xml:space="preserve">
          <source>When using &lt;em&gt;this&lt;/em&gt; along with the bind, apply, and call methods.</source>
          <target state="translated">Al usar &lt;em&gt;esto&lt;/em&gt; junto con los m&amp;eacute;todos de vinculaci&amp;oacute;n, aplicaci&amp;oacute;n y llamada.</target>
        </trans-unit>
        <trans-unit id="3f06c3fcab4e5f6d63f2ca2b14de2f0e5c884eca" translate="yes" xml:space="preserve">
          <source>When we pass a method (that uses &lt;em&gt;this&lt;/em&gt;) as an argument to be used as a callback function.</source>
          <target state="translated">Cuando pasamos un m&amp;eacute;todo (que usa &lt;em&gt;esto&lt;/em&gt; ) como argumento para ser usado como una funci&amp;oacute;n de devoluci&amp;oacute;n de llamada.</target>
        </trans-unit>
        <trans-unit id="90f8c4932f81072077b5e29262c1cb9a5e197bac" translate="yes" xml:space="preserve">
          <source>When we use an inner function (a closure). It is important to take note that closures cannot access the outer function&amp;rsquo;s &lt;em&gt;this&lt;/em&gt; variable by using the this keyword because the this variable is accessible only by the function itself, not by inner functions.</source>
          <target state="translated">Cuando usamos una funci&amp;oacute;n interna (un cierre). Es importante tener en cuenta que los cierres no pueden acceder a &lt;em&gt;esta&lt;/em&gt; variable de la funci&amp;oacute;n externa mediante el uso de la palabra clave this porque esta variable solo es accesible por la funci&amp;oacute;n en s&amp;iacute;, no por las funciones internas.</target>
        </trans-unit>
        <trans-unit id="53aef58f636acbf9068698d4996ade0921bbfa2d" translate="yes" xml:space="preserve">
          <source>When you assign function directly to event handlers of an element, use of &lt;code&gt;this&lt;/code&gt; directly inside event handling function refers to the corresponding element. Such direct function assignment can be done using &lt;code&gt;addeventListener&lt;/code&gt; method or through the traditional event registration methods like &lt;code&gt;onclick&lt;/code&gt;.</source>
          <target state="translated">Cuando asigna una funci&amp;oacute;n directamente a los manejadores de eventos de un elemento, el uso de &lt;code&gt;this&lt;/code&gt; funci&amp;oacute;n de manejo de eventos directamente dentro se refiere al elemento correspondiente. Dicha asignaci&amp;oacute;n directa de funciones se puede hacer usando el m&amp;eacute;todo &lt;code&gt;addeventListener&lt;/code&gt; o mediante los m&amp;eacute;todos tradicionales de registro de eventos como &lt;code&gt;onclick&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="baae7a28429ffc8ffa19c066579bec164fbe4c42" translate="yes" xml:space="preserve">
          <source>When you use &lt;code&gt;this&lt;/code&gt; in global context, it is bound to global object (&lt;code&gt;window&lt;/code&gt; in browser)</source>
          <target state="translated">Cuando usa &lt;code&gt;this&lt;/code&gt; en un contexto global, est&amp;aacute; vinculado al objeto global ( &lt;code&gt;window&lt;/code&gt; en el navegador)</target>
        </trans-unit>
        <trans-unit id="2cd00de08c1b80d16d90bbb50289443efdf1c856" translate="yes" xml:space="preserve">
          <source>When you use &lt;code&gt;this&lt;/code&gt; inside a function defined in the global context, &lt;code&gt;this&lt;/code&gt; is still bound to global object since the function is actually made a method of global context.</source>
          <target state="translated">Cuando usa &lt;code&gt;this&lt;/code&gt; dentro de una funci&amp;oacute;n definida en el contexto global, todav&amp;iacute;a est&amp;aacute; vinculada al objeto global, ya que la funci&amp;oacute;n se convierte en un m&amp;eacute;todo de contexto global.</target>
        </trans-unit>
        <trans-unit id="8d179ffca69128a51c69505a9563d82ba3e8c1a4" translate="yes" xml:space="preserve">
          <source>When you use &lt;code&gt;this&lt;/code&gt; inside function that is invoked without any context (i.e. not on any object), it is bound to the global object (&lt;code&gt;window&lt;/code&gt; in browser)(even if the function is defined inside the object) .</source>
          <target state="translated">Cuando utiliza &lt;code&gt;this&lt;/code&gt; funci&amp;oacute;n interna que se invoca sin ning&amp;uacute;n contexto (es decir, no en ning&amp;uacute;n objeto), est&amp;aacute; vinculada al objeto global ( &lt;code&gt;window&lt;/code&gt; en el navegador) (incluso si la funci&amp;oacute;n est&amp;aacute; definida dentro del objeto).</target>
        </trans-unit>
        <trans-unit id="7909d383b2cdb2682dbc516d4d07f2a0250ff82b" translate="yes" xml:space="preserve">
          <source>When you use &lt;code&gt;this&lt;/code&gt; keyword inside an object method, &lt;code&gt;this&lt;/code&gt; is bound to the &quot;immediate&quot; enclosing object.</source>
          <target state="translated">Cuando utiliza &lt;code&gt;this&lt;/code&gt; palabra clave dentro de un m&amp;eacute;todo de objeto, est&amp;aacute; vinculada al objeto de encierro &quot;inmediato&quot;.</target>
        </trans-unit>
        <trans-unit id="83b1b8689f73a2750a7952c4091b19bcec3490d7" translate="yes" xml:space="preserve">
          <source>Whenever a function is invoked, it is invoked in context of an
object (&lt;strong&gt;&quot;current object&quot;&lt;/strong&gt;). If the &lt;strong&gt;current object&lt;/strong&gt; is not explicitly provided,
the &lt;strong&gt;current object&lt;/strong&gt;  is the &lt;strong&gt;&quot;window object&quot;&lt;/strong&gt; in &lt;strong&gt;NON Strict
Mode&lt;/strong&gt; and &lt;strong&gt;&quot;undefined&quot;&lt;/strong&gt; in Strict Mode by default.</source>
          <target state="translated">Cada vez que se invoca una funci&amp;oacute;n, se invoca en el contexto de un objeto ( &lt;strong&gt;&quot;objeto actual&quot;&lt;/strong&gt; ). Si el &lt;strong&gt;objeto actual&lt;/strong&gt; no se proporciona expl&amp;iacute;citamente, el &lt;strong&gt;objeto actual&lt;/strong&gt; es el &lt;strong&gt;&quot;objeto de ventana&quot;&lt;/strong&gt; en modo &lt;strong&gt;NO estricto&lt;/strong&gt; y &lt;strong&gt;&quot;indefinido&quot;&lt;/strong&gt; en modo estricto de forma predeterminada.</target>
        </trans-unit>
        <trans-unit id="c1e2d9b7e33f4aae1fb2ee3c05579c089c455131" translate="yes" xml:space="preserve">
          <source>Where is &lt;em&gt;&lt;code&gt;this&lt;/code&gt; taken from&lt;/em&gt;?</source>
          <target state="translated">&amp;iquest;De d&amp;oacute;nde se &lt;em&gt;toma &lt;code&gt;this&lt;/code&gt; &lt;/em&gt; ?</target>
        </trans-unit>
        <trans-unit id="9b9fe2edee77fa966a9bca11a2314adc27b17dde" translate="yes" xml:space="preserve">
          <source>Whether the code is in strict or non-strict mode</source>
          <target state="translated">Si el código está en modo estricto o no estricto</target>
        </trans-unit>
        <trans-unit id="c67697bc299f31a4867d9e3ec63fd31a1acb34d6" translate="yes" xml:space="preserve">
          <source>Whether the code was invoked using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval&quot;&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Si el c&amp;oacute;digo fue invocado usando &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval&quot;&gt; &lt;code&gt;eval&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="95b195c331d5df50ce3d94202285a5aa9dff77e9" translate="yes" xml:space="preserve">
          <source>While arrow-functions provide an alternative to using &lt;code&gt;bind()&lt;/code&gt;, it&amp;rsquo;s important to note that they essentially are disabling the traditional &lt;code&gt;this&lt;/code&gt; mechanism in favor of more widely understood lexical scoping. &lt;sup&gt;(1)&lt;/sup&gt;</source>
          <target state="translated">Si bien las funciones de flecha proporcionan una alternativa al uso de &lt;code&gt;bind()&lt;/code&gt; , es importante tener en cuenta que esencialmente est&amp;aacute;n desactivando el mecanismo tradicional en favor de un alcance l&amp;eacute;xico m&amp;aacute;s ampliamente entendido. &lt;sup&gt;(1)&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="1ed94bc080271febddcf89764199947c7c3fdafb" translate="yes" xml:space="preserve">
          <source>Whould &lt;a href=&quot;http://www.quirksmode.org/js/this.html&quot;&gt;this&lt;/a&gt; help? (Most confusion of 'this' in javascript is coming from the fact that it generally is not linked to your object, but to the current executing scope -- that might not be exactly how it works but is always feels like that to me -- see the article for a complete explanation)</source>
          <target state="translated">&amp;iquest;Con qu&amp;eacute; ayuda &lt;a href=&quot;http://www.quirksmode.org/js/this.html&quot;&gt;esto&lt;/a&gt; ? (La mayor confusi&amp;oacute;n de 'esto' en javascript proviene del hecho de que generalmente no est&amp;aacute; vinculado a su objeto, sino al alcance de ejecuci&amp;oacute;n actual, que podr&amp;iacute;a no ser exactamente c&amp;oacute;mo funciona, pero siempre me parece as&amp;iacute;) ver el art&amp;iacute;culo para una explicaci&amp;oacute;n completa)</target>
        </trans-unit>
        <trans-unit id="b4fb795b23dbff94bf4305a128bec5ae7d7ea74e" translate="yes" xml:space="preserve">
          <source>With Constructor</source>
          <target state="translated">Con Constructor</target>
        </trans-unit>
        <trans-unit id="3b1aa9ad3adbb8fddf6c31fef8a04fbd8c6ce154" translate="yes" xml:space="preserve">
          <source>With event handlers</source>
          <target state="translated">Con los manejadores de eventos</target>
        </trans-unit>
        <trans-unit id="15ce445da4009f96d02170197211759e9e416399" translate="yes" xml:space="preserve">
          <source>You can also manipulate the context using &lt;code&gt;.apply()&lt;/code&gt;&lt;code&gt;.call()&lt;/code&gt; and &lt;code&gt;.bind()&lt;/code&gt;</source>
          <target state="translated">Tambi&amp;eacute;n puede manipular el contexto usando &lt;code&gt;.apply()&lt;/code&gt; &lt;code&gt;.call()&lt;/code&gt; y &lt;code&gt;.bind()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d4c81bc669883bad79d12946f0cdcef3cb41ac57" translate="yes" xml:space="preserve">
          <source>You can manipulate the value of &lt;code&gt;this&lt;/code&gt; with the functions: &lt;code&gt;call&lt;/code&gt;, &lt;code&gt;apply&lt;/code&gt;, &lt;code&gt;bind&lt;/code&gt;</source>
          <target state="translated">Puede manipular el valor de &lt;code&gt;this&lt;/code&gt; con las funciones: &lt;code&gt;call&lt;/code&gt; , &lt;code&gt;apply&lt;/code&gt; , &lt;code&gt;bind&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9aafe015410fc61c26eb7b85e5f45fd78ded6a07" translate="yes" xml:space="preserve">
          <source>You can set the value of &lt;em&gt;this&lt;/em&gt; using &lt;code&gt;func.call&lt;/code&gt;, &lt;code&gt;func.apply&lt;/code&gt; or &lt;code&gt;func.bind&lt;/code&gt;.</source>
          <target state="translated">Puede establecer el valor de &lt;em&gt;esto&lt;/em&gt; usando &lt;code&gt;func.call&lt;/code&gt; , &lt;code&gt;func.apply&lt;/code&gt; o &lt;code&gt;func.bind&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3bc00565d4384be2eef6cc38bfd42c85cf8d0315" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;eval&lt;/code&gt; to access &lt;code&gt;this&lt;/code&gt;.</source>
          <target state="translated">Puede usar &lt;code&gt;eval&lt;/code&gt; para acceder a &lt;code&gt;this&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cca5c93685569cae1cf0ccae89b950fa2dccdaf8" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;this&lt;/code&gt; in any function on an object to refer to other properties on that object. This is not the same as an instance created with &lt;code&gt;new&lt;/code&gt;.</source>
          <target state="translated">Puede usar &lt;code&gt;this&lt;/code&gt; en cualquier funci&amp;oacute;n en un objeto para referirse a otras propiedades en ese objeto. Esto no es lo mismo que una instancia creada con &lt;code&gt;new&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b4d5df9ef1b310c884c8d57fbfb242857d89270e" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;with&lt;/code&gt; to add &lt;code&gt;this&lt;/code&gt; to the current scope to read and write to values on &lt;code&gt;this&lt;/code&gt; without referring to &lt;code&gt;this&lt;/code&gt; explicitly.</source>
          <target state="translated">Puede usar &lt;code&gt;with&lt;/code&gt; para agregar &lt;code&gt;this&lt;/code&gt; al &amp;aacute;mbito actual para leer y escribir valores en &lt;code&gt;this&lt;/code&gt; sin hacer referencia expl&amp;iacute;cita a &lt;code&gt;this&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="54e27d188f0d38ee9602bf7437198a4746e2a173" translate="yes" xml:space="preserve">
          <source>above it). So, to get over this (no pun intended) problem, a developer could:</source>
          <target state="translated">sobre ella).Así que,para superar este problema (sin ánimo de hacer un juego de palabras),un desarrollador podría:</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">and</target>
        </trans-unit>
        <trans-unit id="9515c8375c0b70748ad0886b201ac47811d74397" translate="yes" xml:space="preserve">
          <source>and then we could call it like this</source>
          <target state="translated">y entonces podríamos llamarlo así</target>
        </trans-unit>
        <trans-unit id="226abeaecd5ff1c4ed49f5e280892fe18bd8990d" translate="yes" xml:space="preserve">
          <source>but &lt;strong&gt;do&lt;/strong&gt; ask yourself:</source>
          <target state="translated">pero preg&amp;uacute;ntate a ti mismo:</target>
        </trans-unit>
        <trans-unit id="841108c86e9fbb4edafbf1fc269ca06fbd9c2aa7" translate="yes" xml:space="preserve">
          <source>is the same as</source>
          <target state="translated">es la misma que</target>
        </trans-unit>
        <trans-unit id="52bf064bbb0874e1615c452b86946146a06f7150" translate="yes" xml:space="preserve">
          <source>it becomes the property of the window object, as if you have defined
it as</source>
          <target state="translated">se convierte en la propiedad del objeto ventana,como si lo hubieras definido como</target>
        </trans-unit>
        <trans-unit id="030861400725df2cccdbd01f8186798d77f7e41a" translate="yes" xml:space="preserve">
          <source>jQuery makes this trivial to change with jQuery.proxy.</source>
          <target state="translated">jQuery hace que esto sea trivial al cambiar con jQuery.proxy.</target>
        </trans-unit>
        <trans-unit id="f36f025d3a5f8c92288a34e977b81bdd71e6227d" translate="yes" xml:space="preserve">
          <source>javascriptissexy.com - &lt;a href=&quot;http://goo.gl/pvl0GX&quot;&gt;http://goo.gl/pvl0GX&lt;/a&gt;</source>
          <target state="translated">javascriptissexy.com - &lt;a href=&quot;http://goo.gl/pvl0GX&quot;&gt;http://goo.gl/pvl0GX&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4049836cfbefc8188779c17bb3962e791ecad445" translate="yes" xml:space="preserve">
          <source>the jQuery will in many places have &lt;code&gt;this&lt;/code&gt; refer to a DOM element.</source>
          <target state="translated">jQuery en muchos lugares har&amp;aacute; que &lt;code&gt;this&lt;/code&gt; refiera a un elemento DOM.</target>
        </trans-unit>
        <trans-unit id="3be4a57468f0408033e4ea27c9512e741f1fbc8b" translate="yes" xml:space="preserve">
          <source>this use for Scope just like this</source>
          <target state="translated">este uso para el Scope justo como este</target>
        </trans-unit>
        <trans-unit id="0be011b10726d85ae6873c3f4ffc235cfde3ceb9" translate="yes" xml:space="preserve">
          <source>value of txt1 and txt is same
in Above example 
$(this)=$('#tbleName tbody tr') is Same</source>
          <target state="translated">El valor de txt1 y txt es el mismo en el ejemplo anterior $(this)=$('#tbleName tbody tr')es el mismo</target>
        </trans-unit>
        <trans-unit id="a40cac89bb894a88e8ef678122403134449a72d5" translate="yes" xml:space="preserve">
          <source>was effectively translated into</source>
          <target state="translated">se tradujo efectivamente en</target>
        </trans-unit>
        <trans-unit id="eee2fd622722c8b192547f36dd5b9891b7a1ad1e" translate="yes" xml:space="preserve">
          <source>which means</source>
          <target state="translated">lo que significa</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
