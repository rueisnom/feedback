<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://stackoverflow.com/questions/221294">
    <body>
      <group id="221294">
        <trans-unit id="6aa007bdb22bb5e94b74694fdc58f0fb9fa1749b" translate="yes" xml:space="preserve">
          <source>&quot;2019-05-18T20:02:36.694Z&quot;</source>
          <target state="translated">&quot;2019-05-18T20:02:36.694Z&quot;</target>
        </trans-unit>
        <trans-unit id="f19b8fab11034d589c111c457e5d8aba9530a789" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://momentjs.com&quot;&gt;Moment.js&lt;/a&gt; can abstract away a lot of the pain in dealing with Javascript Dates.</source>
          <target state="translated">&lt;a href=&quot;http://momentjs.com&quot;&gt;Moment.js&lt;/a&gt; 는 Javascript Dates를 다루는 데 많은 어려움을 겪을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e88e64bd9bcd82799dc353f090975b50a7bd0430" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;jQuery&lt;/em&gt; provides &lt;a href=&quot;http://api.jquery.com/jQuery.now/&quot;&gt;its own method&lt;/a&gt; to get the timestamp:</source>
          <target state="translated">&lt;em&gt;jQuery&lt;/em&gt; 는 타임 스탬프를 얻는 &lt;a href=&quot;http://api.jquery.com/jQuery.now/&quot;&gt;고유 한 방법&lt;/a&gt; 을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="e5333d5497d8615fd842512f502b1eeeddbbd3b6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;Math.floor()&lt;/code&gt; solution:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;Math.floor()&lt;/code&gt; 솔루션 :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c2d6e7f90c7e91a4a695f7ab018789683a70a073" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;I provide multiple solutions with descriptions in this answer. Feel free to ask questions if anything is unclear&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;이 답변에 설명이 포함 된 여러 솔루션을 제공합니다.&lt;/em&gt;&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;불분명 한 점이 있으면 언제든지 질문하십시오&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dc89b5a4f7a12071264966c205bfe1c2ecc8539c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Warning&lt;/em&gt;&lt;/strong&gt;&lt;em&gt;: it &lt;strong&gt;might&lt;/strong&gt; break in 2038 and return negative numbers if you do the &lt;code&gt;|0&lt;/code&gt; magic. Use &lt;code&gt;Math.floor()&lt;/code&gt; instead by that time&lt;/em&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;경고&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;: 마술을 &lt;code&gt;|0&lt;/code&gt; 설정하면 2038 년에 끊어지고 음수를 리턴 할 &lt;strong&gt;수 있습니다&lt;/strong&gt; .&lt;/em&gt; &lt;em&gt;그 시간에 대신 &lt;code&gt;Math.floor()&lt;/code&gt; 를 사용하십시오.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6a0b0abb8b437a790d952d4eef8395b25abe3063" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Be warned though:&lt;/strong&gt; it will convert a 64 bit double to a 32 bit integer. This will result in information loss when dealing with huge numbers. Timestamps will break after 2038 due to 32 bit integer overflow.</source>
          <target state="translated">&lt;strong&gt;경고 :&lt;/strong&gt; 64 비트 double을 32 비트 정수로 변환합니다. 이로 인해 많은 수를 처리 할 때 정보가 손실 될 수 있습니다. 32 비트 정수 오버플로로 인해 2038 이후 타임 스탬프가 중단됩니다.</target>
        </trans-unit>
        <trans-unit id="9b873de36e161a325a8be286c3a11de5503b1396" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Date&lt;/strong&gt;, a &lt;strong&gt;native object&lt;/strong&gt; in JavaScript is the way we get all data about time.</source>
          <target state="translated">JavaScript의 &lt;strong&gt;기본 객체 인&lt;/strong&gt; &lt;strong&gt;Date&lt;/strong&gt; 는 시간에 대한 모든 데이터를 얻는 방법입니다.</target>
        </trans-unit>
        <trans-unit id="670a30ba85c2b7ec88690585d92bd52152734367" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Details:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Details:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5afb61808e2bddea3731e397261d486078f491d0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;For further information about &lt;code&gt;Date.now&lt;/code&gt; follow this link: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now&quot;&gt;&lt;code&gt;Date.now()&lt;/code&gt; @ MDN&lt;/a&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;Date.now&lt;/code&gt; 에 대한 자세한 내용은 다음 링크를 참조하십시오. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now&quot;&gt; &lt;code&gt;Date.now()&lt;/code&gt; @ MDN&lt;/a&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="518ceca8fa344f82fe0334000dfc4bc2756ae38a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;If you do not care about the year / day of week / daylight saving time you could strip it away and use this after 2038:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;연도 / 요일 / 일광 절약 시간에 신경 쓰지 않으면 2038 년 후에 그것을 제거하고 사용할 수 있습니다.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="605c26338eb6f4690f080c66829a8bf552cb69a0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;In case you are using jQuery you could use &lt;code&gt;$.now()&lt;/code&gt; as described in &lt;a href=&quot;http://api.jquery.com/jquery.now/&quot;&gt;jQuery's Docs&lt;/a&gt; which makes the polyfill obsolete since &lt;code&gt;$.now()&lt;/code&gt; internally does the same thing: &lt;code&gt;(new Date).getTime()&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;jQuery를 사용하는 경우 &lt;code&gt;$.now()&lt;/code&gt; .now &lt;code&gt;$.now()&lt;/code&gt; 내부적으로 같은 일을하므로 polyfill을 쓸모 없게 만드는 &lt;a href=&quot;http://api.jquery.com/jquery.now/&quot;&gt;jQuery의 Docs에&lt;/a&gt; 설명 된대로 $ .now () 를 사용할 수 있습니다 &lt;code&gt;(new Date).getTime()&lt;/code&gt; &lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9c9f0944a9dbda3e14e77125f2988da523bbe503" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Now a tiny explaination of what &lt;code&gt;|0&lt;/code&gt; does:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;이제 &lt;code&gt;|0&lt;/code&gt; 의 기능에 대한 간단한 설명 :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="66c23993fd78a3cd5ae09f4b1945feea05a55bec" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Polyfill to get &lt;code&gt;Date.now()&lt;/code&gt; working:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Date.now &lt;code&gt;Date.now()&lt;/code&gt; 작동하도록 Polyfill :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="26b7d52b8e3617b1a07c07e900127ae868aae1ab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Quick and dirty solution:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;빠르고 더러운 솔루션 :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="20984d466225b7b2ae664ef83b5639e336233209" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;REF:&lt;/strong&gt;&lt;a href=&quot;http://api.jquery.com/jQuery.now/&quot;&gt;http://api.jquery.com/jQuery.now/&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;REF:&lt;/strong&gt;&lt;a href=&quot;http://api.jquery.com/jQuery.now/&quot;&gt;http://api.jquery.com/jQuery.now/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e62616db3d56c78c89d6919e48af3e10f9477c02" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;So the winner JS code is &lt;code&gt;Date.now()&lt;/code&gt; and fastest browser is Safari (2x faster that chrome! ).&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;따라서 우승자 JS 코드는 &lt;code&gt;Date.now()&lt;/code&gt; 이며 가장 빠른 브라우저는 Safari입니다 (크롬보다 2 배 빠름!).&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a57dbd7991038ae80d2baeac454e9eca2841769c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Some nerdy alternative by &lt;a href=&quot;//stackoverflow.com/users/283863&quot;&gt;Derek 朕會功夫&lt;/a&gt; taken from the comments below this answer:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;//stackoverflow.com/users/283863&quot;&gt;Derek의&lt;/a&gt; 일부 nerdy 대안은이 답변 아래의 의견에서 발췌했습니다.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ba78f23c539600982dddbf73f7a97823f9436d3c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Timestamp in Milliseconds&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;밀리 초 단위의 타임 스탬프&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="609156fd1e70dee661537cb63b4e8fdbf6801da7" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;(besides it just implements &lt;code&gt;(new Date).getTime()&lt;/code&gt; expression)&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;(단지 &lt;code&gt;(new Date).getTime()&lt;/code&gt; 표현식을 구현하는 것 외에도)&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="1fc09bdaf91373d1bdc888e305ab082ab419b58c" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;The &lt;code&gt;Date.valueOf()&lt;/code&gt; method is functionally equivalent to &lt;code&gt;Date.getTime()&lt;/code&gt;, which makes it possible to use arithmetic operators on date object to achieve identical results. In my opinion, this approach affects readability.&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt; &lt;code&gt;Date.valueOf()&lt;/code&gt; 메소드는 기능적으로 &lt;code&gt;Date.getTime()&lt;/code&gt; 과 동일하므로 날짜 오브젝트에서 산술 연산자를 사용하여 동일한 결과를 얻을 수 있습니다.&lt;/sup&gt; &lt;sup&gt;제 생각에는이 접근 방식은 가독성에 영향을 미칩니다.&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="0ea028e92dde4444c4d8546da28876e730a304e4" translate="yes" xml:space="preserve">
          <source>A unary operator like &lt;code&gt;plus&lt;/code&gt; triggers the &lt;code&gt;valueOf&lt;/code&gt; method in the &lt;code&gt;Date&lt;/code&gt; object and it returns the timestamp (without any alteration).</source>
          <target state="translated">&lt;code&gt;plus&lt;/code&gt; 와 같은 단항 연산자는 &lt;code&gt;Date&lt;/code&gt; 객체에서 &lt;code&gt;valueOf&lt;/code&gt; 메서드를 트리거하고 타임 스탬프를 변경없이 반환합니다.</target>
        </trans-unit>
        <trans-unit id="a4d8a2c9c91a916abdb5d9cea7ce46a446ceee48" translate="yes" xml:space="preserve">
          <source>And you can also use the &lt;code&gt;valueOf&lt;/code&gt; method which we showed above:</source>
          <target state="translated">그리고 위에서 보여준 &lt;code&gt;valueOf&lt;/code&gt; 메소드를 사용할 수도 있습니다 :</target>
        </trans-unit>
        <trans-unit id="921984842fc62995a05af4e38d54c76636ad22f9" translate="yes" xml:space="preserve">
          <source>Another one I haven't seen yet is</source>
          <target state="translated">내가 아직 보지 못한 또 하나는</target>
        </trans-unit>
        <trans-unit id="a581be9026e27373327bd91afd56c7fd2a5ff0d8" translate="yes" xml:space="preserve">
          <source>Any browsers not supported Date.now, you can use this for get current date time:</source>
          <target state="translated">Date.now를 지원하지 않는 모든 브라우저는 현재 날짜 시간을 얻기 위해 이것을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6b8c9774eafd190d448d8043fc3568881649a835" translate="yes" xml:space="preserve">
          <source>Anyway, my preferred way is using vanilla. This is a common way of doing it in JavaScript:</source>
          <target state="translated">어쨌든, 내가 선호하는 방법은 바닐라를 사용하는 것입니다. 이것은 JavaScript에서 일반적인 방법입니다.</target>
        </trans-unit>
        <trans-unit id="984d386ae7e91a20c7794d72b755edba7bcf2c0d" translate="yes" xml:space="preserve">
          <source>As I observe the &lt;code&gt;Date.now()&lt;/code&gt; was fastest method to get timestamp for all three browsers. Safari has 19.2M operations per second, Firefox 16.1M, Chrome 7.8M.</source>
          <target state="translated">내가 &lt;code&gt;Date.now()&lt;/code&gt; 는 세 브라우저 모두에 대해 타임 스탬프를 얻는 가장 빠른 방법이었습니다. Safari는 초당 19.2M, Firefox 16.1M, Chrome 7.8M을 가지고 있습니다.</target>
        </trans-unit>
        <trans-unit id="89c87d438fe34fca30b7d42f23c2620c3e25df0c" translate="yes" xml:space="preserve">
          <source>As a result you get the following:</source>
          <target state="translated">결과적으로 다음과 같은 결과가 나타납니다.</target>
        </trans-unit>
        <trans-unit id="4a55814bc17c0d6d454d16dc83d2e99926e4e2b1" translate="yes" xml:space="preserve">
          <source>As of writing this, the top answer is 9 years old, and a lot has changed since then - not least, we have near universal support for a non-hacky solution:</source>
          <target state="translated">이 글을 쓰는 시점에서 최고 답변은 9 세이며 그 이후로 많은 것이 바뀌 었습니다. 특히 해킹되지 않은 솔루션에 대해 거의 보편적으로 지원합니다.</target>
        </trans-unit>
        <trans-unit id="9b2307355c3edb09bd59543377aa60b6ccf846ae" translate="yes" xml:space="preserve">
          <source>Because now() is a static method of Date, you always use it as Date.now().</source>
          <target state="translated">now ()는 Date의 정적 메서드이므로 항상 Date.now ()로 사용합니다.</target>
        </trans-unit>
        <trans-unit id="249546037f989d6495ad460fa50bbd527a9daede" translate="yes" xml:space="preserve">
          <source>By providing &lt;code&gt;|&lt;/code&gt;, you tell the interpreter to do a binary OR operation. Bit operations require absolute numbers which turns the decimal result from &lt;code&gt;Date.now() / 1000&lt;/code&gt; into an integer.</source>
          <target state="translated">제공함으로써 &lt;code&gt;|&lt;/code&gt; , 인터프리터에게 이진 OR 연산을 수행하도록 지시합니다. 비트 연산에는 &lt;code&gt;Date.now() / 1000&lt;/code&gt; 의 10 진수 결과를 정수로 변환하는 절대 숫자가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="fcec4664c311ae63b4c9f237aa6920372c1fef76" translate="yes" xml:space="preserve">
          <source>Consider to skip direct &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime&quot;&gt;&lt;code&gt;getTime()&lt;/code&gt;&lt;/a&gt; invocation and use &lt;code&gt;| 0&lt;/code&gt; as a replacement for &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/floor&quot;&gt;&lt;code&gt;Math.floor()&lt;/code&gt;&lt;/a&gt; function.
It's also good to remember &lt;code&gt;1E3&lt;/code&gt; is a shorter equivalent for &lt;code&gt;1000&lt;/code&gt; (uppercase E is preferred than lowercase to indicate &lt;code&gt;1E3&lt;/code&gt; as a constant).</source>
          <target state="translated">직접적인 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime&quot;&gt; &lt;code&gt;getTime()&lt;/code&gt; &lt;/a&gt; 호출을 건너 뛰고 &lt;code&gt;| 0&lt;/code&gt; &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/floor&quot;&gt; &lt;code&gt;Math.floor()&lt;/code&gt; &lt;/a&gt; 함수를 대체하는 0 입니다. &lt;code&gt;1E3&lt;/code&gt; 은 &lt;code&gt;1000&lt;/code&gt; 보다 짧다는 것을 기억하는 것도 좋습니다 ( &lt;code&gt;1E3&lt;/code&gt; 을 상수로 표시 하려면 대문자 E가 소문자보다 선호 됨).</target>
        </trans-unit>
        <trans-unit id="fc6930de72f508a8cd338a19cdb518ffe42f16f8" translate="yes" xml:space="preserve">
          <source>Divide the result by 1000 to get the Unix timestamp, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor&quot;&gt;&lt;code&gt;floor&lt;/code&gt;&lt;/a&gt; if necessary:</source>
          <target state="translated">필요한 경우 결과를 1000으로 나누어 유닉스 타임 스탬프를 얻습니다.</target>
        </trans-unit>
        <trans-unit id="e7762d534ea33c31194e74f8a5bd3cb36d0bb6c9" translate="yes" xml:space="preserve">
          <source>During that conversion, decimals are removed, resulting in the same result as using &lt;code&gt;Math.floor()&lt;/code&gt; but using less code.</source>
          <target state="translated">해당 변환 중에 10 진수가 제거되어 &lt;code&gt;Math.floor()&lt;/code&gt; 를 사용하는 것과 동일한 결과를 얻지 만 더 적은 코드를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">스 니펫 확장</target>
        </trans-unit>
        <trans-unit id="5c69c78de28b184029e7e46f69edfbff933ed279" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;https://lodash.com/docs#now&quot;&gt;lodash&lt;/a&gt; and &lt;a href=&quot;http://underscorejs.org/#now&quot;&gt;underscore&lt;/a&gt; users, use &lt;code&gt;_.now&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://lodash.com/docs#now&quot;&gt;lodash&lt;/a&gt; 및 &lt;a href=&quot;http://underscorejs.org/#now&quot;&gt;밑줄&lt;/a&gt; 사용자의 경우 &lt;code&gt;_.now&lt;/code&gt; 를 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="65b5009c345d873088e63fe3ecd396ef5de54311" translate="yes" xml:space="preserve">
          <source>For a timestamp with microsecond resolution, there's &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Performance/now&quot;&gt;&lt;code&gt;performance.now&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">마이크로 초 해상도의 타임 스탬프에는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Performance/now&quot;&gt; &lt;code&gt;performance.now&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="7f321ad7dc39abb5bc518d18680a3fb881273764" translate="yes" xml:space="preserve">
          <source>For more details, including other ways of installing and using MomentJS, see their &lt;a href=&quot;http://momentjs.com/docs/&quot;&gt;docs&lt;/a&gt;</source>
          <target state="translated">MomentJS를 설치하고 사용하는 다른 방법을 포함하여 자세한 내용은 해당 &lt;a href=&quot;http://momentjs.com/docs/&quot;&gt;문서를&lt;/a&gt; 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="021e4809e5a502a1d0548ee4e41d41b5bf69b99d" translate="yes" xml:space="preserve">
          <source>Here is a simple function to generate timestamp in the format: mm/dd/yy hh:mi:ss</source>
          <target state="translated">다음은 형식으로 타임 스탬프를 생성하는 간단한 함수입니다. mm / dd / yy hh : mi : ss</target>
        </trans-unit>
        <trans-unit id="51e85e4e8113fb3e1f07e1727e78d73f5f0043e6" translate="yes" xml:space="preserve">
          <source>Here's an example:</source>
          <target state="translated">예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="1645f444bdb311fd006c69c55304cdab9f73b237" translate="yes" xml:space="preserve">
          <source>Hopefully this helps, the methods above can work as well but I found this to be the simplest approach for our needs in Node.js.</source>
          <target state="translated">바라건대 이것이 도움이되기를 바랍니다. 위의 방법도 효과적 일 수 있지만 Node.js의 요구에 가장 간단한 방법이라는 것을 알았습니다.</target>
        </trans-unit>
        <trans-unit id="b02aca60f68ca3245c5c0519e5e94a16d12750fc" translate="yes" xml:space="preserve">
          <source>How can I get a timestamp in JavaScript?</source>
          <target state="translated">JavaScript에서 타임 스탬프를 얻으려면 어떻게해야합니까?</target>
        </trans-unit>
        <trans-unit id="c2498d47f7406f2edbdf35b2fefebbc6274430a4" translate="yes" xml:space="preserve">
          <source>How do you get a timestamp in JavaScript</source>
          <target state="translated">JavaScript에서 타임 스탬프를 얻는 방법</target>
        </trans-unit>
        <trans-unit id="30c103bd61079a2b3173e15bb4af80e03fa60fd1" translate="yes" xml:space="preserve">
          <source>I also like this, because it is just as short and is compatible with modern browsers, and over 500 people voted that it is better:</source>
          <target state="translated">나는 또한 짧고 현대적인 브라우저와 호환되며 500 명이 넘는 사람들이 더 낫다고 투표했기 때문에 이것을 좋아합니다.</target>
        </trans-unit>
        <trans-unit id="8d196dd78b067d89657ffd9e9790b26d402ba387" translate="yes" xml:space="preserve">
          <source>I do that all the time. No pun intended.</source>
          <target state="translated">나는 항상 그렇게합니다. 말장난이 없습니다.</target>
        </trans-unit>
        <trans-unit id="6746e7ced889423d25692f2c64ef392c430a35ff" translate="yes" xml:space="preserve">
          <source>I highly recommend using &lt;code&gt;moment.js&lt;/code&gt;. To get the number of milliseconds since UNIX epoch, do</source>
          <target state="translated">&lt;code&gt;moment.js&lt;/code&gt; 사용하는 것이 좋습니다. 유닉스 시대 이후 밀리 초를 얻으려면</target>
        </trans-unit>
        <trans-unit id="264d1b249b3604326e98068f8b559f1fec8a5a2d" translate="yes" xml:space="preserve">
          <source>I learned a really cool way of converting a given Date object to a Unix timestamp from the source code of &lt;a href=&quot;https://github.com/carhartl/jquery-cookie/blob/master/src/jquery.cookie.js&quot;&gt;JQuery Cookie&lt;/a&gt; the other day.</source>
          <target state="translated">다른 날짜에 &lt;a href=&quot;https://github.com/carhartl/jquery-cookie/blob/master/src/jquery.cookie.js&quot;&gt;JQuery Cookie&lt;/a&gt; 의 소스 코드에서 주어진 Date 객체를 Unix 타임 스탬프로 변환하는 멋진 방법을 배웠습니다.</target>
        </trans-unit>
        <trans-unit id="2bf58ea0d3ddcbfdd4ef5d413c7e69359fbe1367" translate="yes" xml:space="preserve">
          <source>I like this, because it is small:</source>
          <target state="translated">작기 때문에 이것을 좋아합니다.</target>
        </trans-unit>
        <trans-unit id="8fde8794cd8f9ed43c9fea4417233aa0d878ed8a" translate="yes" xml:space="preserve">
          <source>I would recommend using &lt;code&gt;Date.now()&lt;/code&gt; (with compatibility shim). It's slightly better because it's shorter &amp;amp; doesn't create a new &lt;code&gt;Date&lt;/code&gt; object. However, if you don't want a shim &amp;amp; maximum compatibility, you could use the &quot;old&quot; method to get the timestamp in &lt;strong&gt;milliseconds&lt;/strong&gt;:</source>
          <target state="translated">호환성 shim과 함께 &lt;code&gt;Date.now()&lt;/code&gt; 사용하는 것이 좋습니다. 더 짧고 새로운 &lt;code&gt;Date&lt;/code&gt; 객체를 만들지 않기 때문에 약간 좋습니다. 그러나 shim 및 최대 호환성을 원하지 않는 경우 &quot;old&quot;방법을 사용하여 &lt;strong&gt;밀리 초 단위&lt;/strong&gt; 의 타임 스탬프를 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d78be82aef225dae7c62367e39d651f2211c5f7f" translate="yes" xml:space="preserve">
          <source>If it is for logging purposes, you can use &lt;strong&gt;ISOString&lt;/strong&gt;</source>
          <target state="translated">로깅을 목적으로하는 경우 &lt;strong&gt;ISOString을&lt;/strong&gt; 사용할 수 있습니다 &lt;strong&gt;.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e4c5b87bb3419a5c33343d12882bdbd27545a770" translate="yes" xml:space="preserve">
          <source>If want a basic way to generate a timestamp in Node.js this works well.</source>
          <target state="translated">Node.js에서 타임 스탬프를 생성하는 기본 방법을 원한다면 잘 작동합니다.</target>
        </trans-unit>
        <trans-unit id="5f7ca843221a9458bc8d52cf145357994b256de2" translate="yes" xml:space="preserve">
          <source>If you are just happy about jQuery's version consider upvoting &lt;a href=&quot;//stackoverflow.com/a/15434736/1519836&quot;&gt;&lt;strong&gt;this&lt;/strong&gt;&lt;/a&gt; answer since I did not find it myself.</source>
          <target state="translated">jQuery 버전에 만족한다면 &lt;a href=&quot;//stackoverflow.com/a/15434736/1519836&quot;&gt;&lt;strong&gt;이&lt;/strong&gt;&lt;/a&gt; 답변을 직접 찾지 못했습니다.</target>
        </trans-unit>
        <trans-unit id="0894f8f80fdcaea5520717945470385758abbb3f" translate="yes" xml:space="preserve">
          <source>If you just want to know the relative time from the point of when the code was run through first you could use something like this:</source>
          <target state="translated">코드가 처음 실행될 때부터 상대 시간을 알고 싶다면 다음과 같이 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="69f224b476af05f25e71d89c1ed7a647f9ce8869" translate="yes" xml:space="preserve">
          <source>If you using a version below ES5, &lt;code&gt;Date.now();&lt;/code&gt; not works and you need to use:</source>
          <target state="translated">ES5 이하 버전을 사용하는 경우 &lt;code&gt;Date.now();&lt;/code&gt; 작동하지 않으며 다음을 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="efea3eb2b8f1d14f5f37738341cece6be2180d9c" translate="yes" xml:space="preserve">
          <source>If you want to be absolutely certain that this won't break in some ancient (pre ie9) browser, you can put it behind a check, like so:</source>
          <target state="translated">고대 (pre 9 이전) 브라우저에서 이것이 깨지지 않을 것이라고 확신하려면 다음과 같이 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="974164208fc49177a2f9916c9bfbca5139904fa0" translate="yes" xml:space="preserve">
          <source>In MDN it's mentioned as below:</source>
          <target state="translated">MDN에서는 다음과 같이 언급됩니다.</target>
        </trans-unit>
        <trans-unit id="1ed31258d64a6edc078268ce5eb32bc1fe2283f7" translate="yes" xml:space="preserve">
          <source>In addition to the other options, if you want a dateformat ISO, you get can get it directly</source>
          <target state="translated">다른 옵션 외에도 dateformat ISO를 원한다면 직접 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ecd991ceed49f68724cb1174e0172aa552fe9197" translate="yes" xml:space="preserve">
          <source>JavaScript works with the number of milliseconds since the epoch whereas most other languages work with the seconds. You could work with milliseconds but as soon as you pass a value to say PHP, the PHP native functions will probably fail. So to be sure I always use the seconds, not milliseconds.</source>
          <target state="translated">신기원 이후 자바 스크립트는 밀리 초 단위로 작동하지만 다른 대부분의 언어는 초 단위로 작동합니다. 밀리 초로 작업 할 수 있지만 PHP라고하는 값을 전달하면 PHP 기본 기능이 실패 할 수 있습니다. 따라서 항상 밀리 초가 아닌 초를 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="dc8cc8beca51a7dcf7a7b503229ddcf5c28b183d" translate="yes" xml:space="preserve">
          <source>Just be careful in JavaScript the timestamp depends on the client computer set, so it's not 100% accurate timestamp. To get the best result, you need to get the timestamp from the &lt;strong&gt;server-side&lt;/strong&gt;.</source>
          <target state="translated">JavaScript에서 타임 스탬프는 클라이언트 컴퓨터 세트에 따라 다르므로 100 % 정확한 타임 스탬프는 아닙니다. 최상의 결과를 얻으려면 &lt;strong&gt;서버 측&lt;/strong&gt; 에서 타임 스탬프를 가져와야 &lt;strong&gt;합니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="efa7f7d9b5981c73ed08c52f393880cfcb590729" translate="yes" xml:space="preserve">
          <source>Just to add up, here's a function to return a timestamp string in Javascript. 
Example: 15:06:38 PM</source>
          <target state="translated">간단히 말해서 Javascript로 타임 스탬프 문자열을 반환하는 함수가 있습니다. 예 : 15:06:38 오후</target>
        </trans-unit>
        <trans-unit id="2656f81ba2352e03515b80f1058ceef84e636b55" translate="yes" xml:space="preserve">
          <source>MDN Documentation on Date.now</source>
          <target state="translated">Date.now의 MDN 설명서</target>
        </trans-unit>
        <trans-unit id="640e311ff42b2b135badd837df6dab8de06cce37" translate="yes" xml:space="preserve">
          <source>Of course it will break daylight saving time but depending on what you
  are building this might be useful to you if you need to do binary
  operations on timestamps after int32 will break in 2038.</source>
          <target state="translated">물론 일광 절약 시간이 중단되지만 int32가 2038 년에 중단 된 후 타임 스탬프에서 이진 연산을 수행 해야하는 경우 빌드하는 내용에 따라 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3226f84f9f40cd59bd4b779f189926465165fc3c" translate="yes" xml:space="preserve">
          <source>On almost all current browsers you can use &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.4.4&quot;&gt;&lt;code&gt;Date.now()&lt;/code&gt;&lt;/a&gt; to get the UTC timestamp in &lt;strong&gt;milliseconds&lt;/strong&gt;; a notable exception to this is IE8 and earlier (see &lt;a href=&quot;http://kangax.github.io/compat-table/es5/#Date.now&quot;&gt;compatibility table&lt;/a&gt;).</source>
          <target state="translated">거의 모든 현재 브라우저에서 &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.4.4&quot;&gt; &lt;code&gt;Date.now()&lt;/code&gt; &lt;/a&gt; 를 사용하여 UTC 타임 스탬프 ( &lt;strong&gt;밀리 초&lt;/strong&gt; ) 를 얻을 수 있습니다. 이에 대한 예외는 IE8 및 이전 버전입니다 ( &lt;a href=&quot;http://kangax.github.io/compat-table/es5/#Date.now&quot;&gt;호환성 표&lt;/a&gt; 참조).</target>
        </trans-unit>
        <trans-unit id="4352fe6e742e13b0363d4f1e3748f910d7b1055c" translate="yes" xml:space="preserve">
          <source>One I haven't seen yet</source>
          <target state="translated">아직 보지 못한 것</target>
        </trans-unit>
        <trans-unit id="21e7544f557d2c428d6cc83568e4c05b25387a54" translate="yes" xml:space="preserve">
          <source>Or alternatively you could use:</source>
          <target state="translated">또는 다음을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="71490c02bf59648516c73ed56ee900749dd26c54" translate="yes" xml:space="preserve">
          <source>Our team is using this to bust cache in a localhost environment. The output is &lt;code&gt;/dist/css/global.css?v=245521377&lt;/code&gt; where &lt;code&gt;245521377&lt;/code&gt; is the timestamp generated by &lt;code&gt;hrtime()&lt;/code&gt;.</source>
          <target state="translated">우리 팀은 이것을 사용하여 로컬 호스트 환경에서 캐시를 버스트합니다. 출력은 &lt;code&gt;/dist/css/global.css?v=245521377&lt;/code&gt; 입니다. 여기서 &lt;code&gt;245521377&lt;/code&gt; 은 &lt;code&gt;hrtime()&lt;/code&gt; 의해 생성 된 타임 스탬프입니다.</target>
        </trans-unit>
        <trans-unit id="bad5af0132c9ad67f072fc624fea80472707902a" translate="yes" xml:space="preserve">
          <source>PS: sadly someone merged this to the top answer without giving credit.</source>
          <target state="translated">추신 : 슬프게도 누군가가 신용을주지 않고 이것을 최고 답변에 병합했습니다.</target>
        </trans-unit>
        <trans-unit id="09c3e90392b609ee59dca9e0981db05d25ac6937" translate="yes" xml:space="preserve">
          <source>See: &lt;a href=&quot;http://momentjs.com/docs/#/displaying/unix-timestamp/&quot;&gt;http://momentjs.com/docs/#/displaying/unix-timestamp/&lt;/a&gt;</source>
          <target state="translated">참조 : &lt;a href=&quot;http://momentjs.com/docs/#/displaying/unix-timestamp/&quot;&gt;http://momentjs.com/docs/#/displaying/unix-timestamp/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f2661594d1248ebc08511125837d5dea5620dcbe" translate="yes" xml:space="preserve">
          <source>Short &amp;amp; Snazzy:</source>
          <target state="translated">짧고 멋진 :</target>
        </trans-unit>
        <trans-unit id="8f0cf74ec2160ab1ff63599867401f2f5aa48b5d" translate="yes" xml:space="preserve">
          <source>Some output of how it will look:</source>
          <target state="translated">어떻게 보일지에 대한 결과 :</target>
        </trans-unit>
        <trans-unit id="f9d911f3aad33d3094992357bc52a2a7fac62528" translate="yes" xml:space="preserve">
          <source>Something similar to &lt;a href=&quot;https://en.wikipedia.org/wiki/Unix_time&quot;&gt;Unix timestamp&lt;/a&gt;, that is, a single number that represents the current time and date. Either as a number or a string.</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/Unix_time&quot;&gt;유닉스 타임 스탬프&lt;/a&gt; 와 비슷한 것, 즉 현재 시간과 날짜를 나타내는 단일 숫자. 숫자 또는 문자열 중 하나입니다.</target>
        </trans-unit>
        <trans-unit id="d0dba514baaffe5a4a25e8c8c797ea9abb7cda1f" translate="yes" xml:space="preserve">
          <source>Tested on MacOs High Sierra 10.13.3 on Chrome 67.0.3396.99 (64-bit), Safari 11.0.3 (13604.5.6), Firefox 59.0.2 (64-bit). On below screenshot I show you results for fastest browser (Safari):</source>
          <target state="translated">Chrome 67.0.3396.99 (64 비트), Safari 11.0.3 (13604.5.6), Firefox 59.0.2 (64 비트)의 MacOs High Sierra 10.13.3에서 테스트되었습니다. 아래 스크린 샷에서 가장 빠른 브라우저 (사파리)에 대한 결과를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="2e86c58c605bfe8cffb228a91f786f60a8395466" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime&quot;&gt;&lt;code&gt;Date.getTime()&lt;/code&gt;&lt;/a&gt; method can be used with a little tweak:</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime&quot;&gt; &lt;code&gt;Date.getTime()&lt;/code&gt; &lt;/a&gt; 메소드는 약간 조정하여 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="13812a5808b8fe1a80bde08016cbe4507cea25a9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;new Date()*1&lt;/code&gt; was slowest for Chrome (2.8M) and Firefox (2.6M). The &lt;code&gt;Number(new Date())&lt;/code&gt; was slowest for Safari (2.9M).</source>
          <target state="translated">&lt;code&gt;new Date()*1&lt;/code&gt; 은 Chrome (2.8M) 및 Firefox (2.6M)에서 가장 느 렸습니다. Safari (2.9M)의 경우 &lt;code&gt;Number(new Date())&lt;/code&gt; 가 가장 느 렸습니다.</target>
        </trans-unit>
        <trans-unit id="f4499f732a0e45b7fa7e1fba72949adb6f3884c5" translate="yes" xml:space="preserve">
          <source>The Date.now() method returns the number of milliseconds elapsed since
  1 January 1970 00:00:00 UTC.</source>
          <target state="translated">Date.now () 메서드는 1970 년 1 월 1 일 00:00:00 UTC 이후 경과 된 밀리 초 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="09f0706d3cb42dc1b7b5d47c52924089cdf79ffc" translate="yes" xml:space="preserve">
          <source>The code &lt;code&gt;Math.floor(new Date().getTime() / 1000)&lt;/code&gt; can be shortened to &lt;code&gt;new Date / 1E3 | 0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Math.floor(new Date().getTime() / 1000)&lt;/code&gt; 코드를 &lt;code&gt;new Date / 1E3 | 0&lt;/code&gt; 0</target>
        </trans-unit>
        <trans-unit id="690febb76917a148462279b049b2804833ed00bf" translate="yes" xml:space="preserve">
          <source>The value returned by the getTime method is the number of milliseconds
  since 1 January 1970 00:00:00 UTC.</source>
          <target state="translated">getTime 메소드가 리턴 한 값은 1970 년 1 월 1 일 00:00:00 UTC 이후의 밀리 초 수입니다.</target>
        </trans-unit>
        <trans-unit id="1a1487b72d28b45e5d04e4bece3d9af55e2e36ef" translate="yes" xml:space="preserve">
          <source>This could for example yield &lt;code&gt;1436140826653.139&lt;/code&gt;, while &lt;code&gt;Date.now&lt;/code&gt; only gives &lt;code&gt;1436140826653&lt;/code&gt;.</source>
          <target state="translated">예를 들어 &lt;code&gt;1436140826653.139&lt;/code&gt; 를 생성 할 수 있지만 &lt;code&gt;Date.now&lt;/code&gt; 는 &lt;code&gt;1436140826653&lt;/code&gt; 만 제공 합니다 .</target>
        </trans-unit>
        <trans-unit id="b5ad837bb7898551bab26b49b028cc7199bc2055" translate="yes" xml:space="preserve">
          <source>This one has a solution : which converts unixtime stamp to tim in js try this</source>
          <target state="translated">이것은 해결책이 있습니다 : js에서 unixtime stamp를 tim로 변환하십시오.</target>
        </trans-unit>
        <trans-unit id="34a32badd396c81c617c2188c546e9398277d984" translate="yes" xml:space="preserve">
          <source>This seems to work.</source>
          <target state="translated">이것은 작동하는 것 같습니다.</target>
        </trans-unit>
        <trans-unit id="00b93c39d06afcdb72fc8a261f0fa6ce62b1c5c0" translate="yes" xml:space="preserve">
          <source>This will also return negative values but only if the user of that PC
  you are running your code on is changing their PC's clock at least to
  31th of december of the previous year.</source>
          <target state="translated">또한 음수 값을 반환하지만 코드를 실행하는 PC 사용자가 PC 시계를 전년도 12 월 31 일로 변경 한 경우에만 음수 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="39934b9c1eaee234b1fcedc0a873b736a6c33248" translate="yes" xml:space="preserve">
          <source>This will give you a Unix timestamp (in seconds):</source>
          <target state="translated">그러면 Unix 타임 스탬프 (초)가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="0b5226a3360f22af6db509055809735aeff384c8" translate="yes" xml:space="preserve">
          <source>This will give you the milliseconds since the epoch (not Unix timestamp):</source>
          <target state="translated">이것은 신기원 이후의 밀리 초 (유닉스 타임 스탬프 아님)를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="63b5c47774fe2e70f965c640f5a0a0785777acdc" translate="yes" xml:space="preserve">
          <source>This will return the milliseconds since epoch time, of course, not seconds.</source>
          <target state="translated">이것은 물론 초가 아닌 에포크 시간 이후 밀리 초를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="23682a9f2a373b395978bad94d86b598c969d1f3" translate="yes" xml:space="preserve">
          <source>To get it working in IE you could do this (Polyfill from &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now&quot;&gt;MDN&lt;/a&gt;):</source>
          <target state="translated">IE에서 작동하게하려면 다음을 수행하십시오 ( &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now&quot;&gt;MDN의&lt;/a&gt; 폴리 필).</target>
        </trans-unit>
        <trans-unit id="b1b26851df5bfed8f3aa18c63580c74bc71eedb0" translate="yes" xml:space="preserve">
          <source>To get the number of seconds since UNIX epoch, do</source>
          <target state="translated">유닉스 시대 이후의 초 수를 얻으려면</target>
        </trans-unit>
        <trans-unit id="51d4de6065426390bb75cddcc630866c137aa247" translate="yes" xml:space="preserve">
          <source>To get the timestamp in &lt;strong&gt;seconds&lt;/strong&gt;, you can use:</source>
          <target state="translated">타임 스탬프를 &lt;strong&gt;초 단위로&lt;/strong&gt; 얻으려면 다음을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c6f702c7ef6da5afd82688edda6f3e833daf6a22" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;moment.js&lt;/code&gt; in the browser:</source>
          <target state="translated">브라우저에서 &lt;code&gt;moment.js&lt;/code&gt; 를 사용하려면 :</target>
        </trans-unit>
        <trans-unit id="4ca0b297522996598e577e2c11e2193966464d78" translate="yes" xml:space="preserve">
          <source>Today - 2018.06.27 I provide some time comparison for pure js solutions. This can be useful for people who wanna get/measure time in JS in light/efficient way (eg. for real-time applications like simulations, games etc.)</source>
          <target state="translated">오늘-2018.06.27 순수한 js 솔루션에 대한 시간 비교를 제공합니다. 이 기능은 JS에서 조명 / 효율적인 방식으로 시간을 측정 / 측정하려는 사람들에게 유용 할 수 있습니다 (예 : 시뮬레이션, 게임 등과 같은 실시간 응용 프로그램).</target>
        </trans-unit>
        <trans-unit id="e12c4ed327c1caad16d71ccb39a340755fd55af8" translate="yes" xml:space="preserve">
          <source>Which should be slightly faster, but also less readable (also &lt;a href=&quot;https://stackoverflow.com/questions/7487977/using-bitwise-or-0-to-floor-a-number&quot;&gt;see this answer&lt;/a&gt;).</source>
          <target state="translated">어느 것이 더 빠르지 만 읽기 쉽지 않습니다 ( &lt;a href=&quot;https://stackoverflow.com/questions/7487977/using-bitwise-or-0-to-floor-a-number&quot;&gt;이 답변&lt;/a&gt; 도 참조하십시오 ).</target>
        </trans-unit>
        <trans-unit id="e2f1ba88be31eceb539de69b57688538ee8273fc" translate="yes" xml:space="preserve">
          <source>Which you can then convert to seconds like this:</source>
          <target state="translated">다음과 같이 초로 변환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="90b842a06a5568c975aa6e7b3c4e2ac58b5dd623" translate="yes" xml:space="preserve">
          <source>You can also convert times like so:</source>
          <target state="translated">다음과 같이 시간을 변환 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="d228a1821059280a5683da3268287479e5e54808" translate="yes" xml:space="preserve">
          <source>You can easily make a shim for this, though:</source>
          <target state="translated">그래도 쉽게 shim을 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="efbd017a3cb3b7a1e798516adb79f00a15049ff9" translate="yes" xml:space="preserve">
          <source>You can only use</source>
          <target state="translated">당신은 사용할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="3eee8f5fd95593438c9d36415e34d68b4c2b1637" translate="yes" xml:space="preserve">
          <source>You can perform test on your machine here: &lt;a href=&quot;https://jsperf.com/timestamp-test-x&quot;&gt;https://jsperf.com/timestamp-test-x&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://jsperf.com/timestamp-test-x&quot;&gt;https://jsperf.com/timestamp-test-x에서&lt;/a&gt; 컴퓨터에서 테스트를 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="63ed58255a35880df934cb3750209a0ebc53ca20" translate="yes" xml:space="preserve">
          <source>more simpler way:</source>
          <target state="translated">더 간단한 방법 :</target>
        </trans-unit>
        <trans-unit id="cb36c7b188494c1c7efa1d594b3f10cfdb5a64c2" translate="yes" xml:space="preserve">
          <source>to get the current timestamp. No need to do anything extra.</source>
          <target state="translated">현재 타임 스탬프를 가져옵니다. 별도의 조치를 취할 필요가 없습니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
