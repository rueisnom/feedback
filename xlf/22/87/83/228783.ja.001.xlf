<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/228783">
    <body>
      <group id="228783">
        <trans-unit id="41d61cdb9c9d1e49d9f1bf4dc317e040c0c1bc35" translate="yes" xml:space="preserve">
          <source>&amp;mdash; Each name that begins with an underscore is reserved to the implementation for use as a name in the global namespace.</source>
          <target state="translated">&amp;mdash;アンダースコアで始まる各名前は、グローバル名前空間での名前として使用するために実装で予約されています。</target>
        </trans-unit>
        <trans-unit id="eec70b10182a3ee0325a4055d4443aa4c7d68d9a" translate="yes" xml:space="preserve">
          <source>&amp;mdash; Each name that contains a double underscore _ _ or begins with an underscore followed by an uppercase letter (2.12) is reserved to the implementation for any use.</source>
          <target state="translated">&amp;mdash;二重下線_ _を含む、またはアンダースコアで始まり、その後に大文字（2.12）が続く名前は、実装用に予約されています。</target>
        </trans-unit>
        <trans-unit id="72761832b57d839918312f2cc43d27dcf8f4ca2f" translate="yes" xml:space="preserve">
          <source>(I use macros because they are the more code-polluting of C/C++ symbols, but it could be anything from variable name to class name)</source>
          <target state="translated">(CC++のシンボルの方がコードを汚すのでマクロを使っていますが、変数名からクラス名まで何でもいいです)</target>
        </trans-unit>
        <trans-unit id="1a1b118aa980272ec9387d9dc726a9ba2f02831f" translate="yes" xml:space="preserve">
          <source>17.4.3.1.2 Global names [lib.global.names]</source>
          <target state="translated">17.4.3.3.1.2 グローバル名 [lib.global.names]</target>
        </trans-unit>
        <trans-unit id="430567a063d1ce32e693fce199132ea7e7cff053" translate="yes" xml:space="preserve">
          <source>7.1.3 Reserved identifiers</source>
          <target state="translated">7.1.3 予約識別子</target>
        </trans-unit>
        <trans-unit id="8de052ab20b9419c96afdf62ff914a376e0c210e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;
&lt;li&gt;never start a symbol with an underscore&lt;/li&gt;
&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8113dfc669d55a1b53dcb2560964b7b05fe9ccbf" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;
When naming a symbol, you will avoid collision with compiler/OS/standard libraries if you:&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;シンボルに名前を付ける場合、以下の場合、コンパイラ/ OS /標準ライブラリとの衝突を回避できます。&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="1dbf37d738c961e41925d96f6105682a1b33ecb4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;17.6.3.3.2 Global names [global.names]&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;17.6.3.3.2グローバル名[global.names]&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="7ed5b0f26da84e7ddaaf8a99ac425cd2fc9e37b6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;17.6.3.3.5 User-defined literal suffixes [usrlit.suffix]&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;17.6.3.3.5ユーザー定義のリテラルサフィックス[usrlit.suffix]&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="dd1640bfec1fda2c51f13b0cac38b87763e8a088" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;never name a symbol with two consecutive underscores inside.
&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;2つの連続したアンダースコアを内部に持つシンボルを決して指定しないでください。&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="ac256d28ba3a8a5ec5ad2b9aa3b3d25a3343705c" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;154)&lt;/sup&gt; The list of reserved identifiers with external linkage includes &lt;code&gt;errno&lt;/code&gt;, &lt;code&gt;math_errhandling&lt;/code&gt;, &lt;code&gt;setjmp&lt;/code&gt;, and &lt;code&gt;va_end&lt;/code&gt;.</source>
          <target state="translated">&lt;sup&gt;154）&lt;/sup&gt;外部リンケージがある予約済み識別子のリストには、 &lt;code&gt;errno&lt;/code&gt; 、 &lt;code&gt;math_errhandling&lt;/code&gt; 、 &lt;code&gt;setjmp&lt;/code&gt; 、および &lt;code&gt;va_end&lt;/code&gt; が含まれます 。</target>
        </trans-unit>
        <trans-unit id="44b321dd20eb7be3e29503f13596198d7607e3c7" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;165)&lt;/sup&gt; Such names are also reserved in namespace &lt;code&gt;::std&lt;/code&gt; (17.4.3.1).</source>
          <target state="translated">&lt;sup&gt;165）&lt;/sup&gt;そのような名前は、名前空間 &lt;code&gt;::std&lt;/code&gt; （17.4.3.1）でも予約されています。</target>
        </trans-unit>
        <trans-unit id="a2c6e4e7bc5af94b177c67a843dc7885d2ab713e" translate="yes" xml:space="preserve">
          <source>After doing research on this article I no longer end my identifiers with &lt;code&gt;_t&lt;/code&gt;
as this is reserved by the POSIX standard.</source>
          <target state="translated">この記事を調査した後、POSIX標準で予約されているため、識別子の末尾に &lt;code&gt;_t&lt;/code&gt; を付けなくなりました。</target>
        </trans-unit>
        <trans-unit id="0cfffc2d2cbce99350fe15ff038d744c0063911d" translate="yes" xml:space="preserve">
          <source>All identifiers that begin with an underscore and either an uppercase letter or another
  underscore are always reserved for any use.</source>
          <target state="translated">アンダースコアで始まり、大文字または別のアンダースコアで始まるすべての識別子は、すべての使用のために常に予約されています。</target>
        </trans-unit>
        <trans-unit id="d4eb3ca899ad98e32df1c992d9a34dee9a45c090" translate="yes" xml:space="preserve">
          <source>All identifiers that begin with an underscore are always reserved for use as identifiers
  with file scope in both the ordinary and tag name spaces.</source>
          <target state="translated">アンダースコアで始まるすべての識別子は、通常の名前スペースとタグ名スペースの両方でファイルスコープを持つ識別子として使用するために常に予約されています。</target>
        </trans-unit>
        <trans-unit id="f760fa262fccd567fd8b370c801ad3a62acc6e2a" translate="yes" xml:space="preserve">
          <source>All identifiers with external linkage in any of the following subclauses (including the
  future library directions) are always reserved for use as identifiers with external
  linkage.&lt;sup&gt;154&lt;/sup&gt;</source>
          <target state="translated">以下の副節（将来のライブラリーの指示を含む）のいずれかに外部リンケージがあるすべての識別子は、外部リンケージがある識別子として使用するために常に予約されています。 &lt;sup&gt;154&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="0777b058fbe578c3a9f273e95ddb7d0f8edf1887" translate="yes" xml:space="preserve">
          <source>Also, everything in the &lt;code&gt;std&lt;/code&gt; namespace is reserved. (You are allowed to add template specializations, though.)</source>
          <target state="translated">また、 &lt;code&gt;std&lt;/code&gt; 名前空間のすべてが予約されています。 （ただし、テンプレートの特殊化を追加できます。）</target>
        </trans-unit>
        <trans-unit id="a90f3fd49183247ac5bd19ef7c65157b5cd737a7" translate="yes" xml:space="preserve">
          <source>As for the other part of the question, it's common to put the underscore at the &lt;em&gt;end&lt;/em&gt; of the variable name to not clash with anything internal.</source>
          <target state="translated">質問の他の部分については、内部で何かと衝突しないように、変数名の&lt;em&gt;最後&lt;/em&gt;にアンダースコアを置くのが一般的です。</target>
        </trans-unit>
        <trans-unit id="ce3df41f37249eda7ba798a33efe462dce8a8d25" translate="yes" xml:space="preserve">
          <source>Because C++ is based on the C standard (1.1/2, C++03) and C99 is a normative reference (1.2/1, C++03) these also apply, from the 1999 C Standard:</source>
          <target state="translated">C++は C 標準(1.12、C++03)に基づいており、C99 は規範的参照(1.21、C++03)であるため、1999 年の C 標準からはこれらも適用されます。</target>
        </trans-unit>
        <trans-unit id="1bd6e4b10225da14c712ab0db802339c5a5681b1" translate="yes" xml:space="preserve">
          <source>Because I did not want to deal with cases, and wanted a simple rule, I have designed a &lt;strong&gt;personal&lt;/strong&gt; one that is both simple and correct:</source>
          <target state="translated">私はケースを扱いたくなかったし、単純なルールが欲しかったので、私はシンプルで正しい両方の&lt;strong&gt;個人的な&lt;/strong&gt;ものを設計しました：</target>
        </trans-unit>
        <trans-unit id="b7db5228b5551fc3bcc509295600e8473f9bedcd" translate="yes" xml:space="preserve">
          <source>But also:</source>
          <target state="translated">でも、それに加えて。</target>
        </trans-unit>
        <trans-unit id="44b8b90a73a264dd17818bbd20e868d857e5e0ff" translate="yes" xml:space="preserve">
          <source>C# (or possibly just .NET) seems to recommend using just an underscore, as in &lt;code&gt;_foo&lt;/code&gt;. Is this allowed by the C++ standard?</source>
          <target state="translated">C＃（またはおそらく.NETのみ）では、 &lt;code&gt;_foo&lt;/code&gt; のように、アンダースコアのみを使用することをお勧めします。 これはC ++標準で許可されていますか？</target>
        </trans-unit>
        <trans-unit id="ae6b14e6f3fa5c5a0e89a9707a22461ae803d41b" translate="yes" xml:space="preserve">
          <source>Certain sets of names and function signatures are always reserved to the implementation:</source>
          <target state="translated">名前と関数のシグネチャの特定のセットは、常に実装に予約されています。</target>
        </trans-unit>
        <trans-unit id="ee2ffa09e4a16b4f725ffa799c8f0da25eb0b391" translate="yes" xml:space="preserve">
          <source>CesarB provided the following link to the &lt;a href=&quot;http://www.opengroup.org/onlinepubs/009695399/functions/xsh_chap02_02.html&quot;&gt;POSIX 2004&lt;/a&gt; reserved symbols and notes 'that many other reserved prefixes and suffixes ... can be found there'.  The
&lt;a href=&quot;http://www.opengroup.org/onlinepubs/9699919799/functions/V2_chap02.html&quot;&gt;POSIX 2008&lt;/a&gt; reserved symbols are defined here.  The restrictions are somewhat more nuanced than those above.</source>
          <target state="translated">CesarBは、 &lt;a href=&quot;http://www.opengroup.org/onlinepubs/009695399/functions/xsh_chap02_02.html&quot;&gt;POSIX 2004の&lt;/a&gt;予約済みシンボルと次のリンクを提供し、「他の多くの予約済みのプレフィックスとサフィックスがそこにあることを注記しています」。 ここでは、 &lt;a href=&quot;http://www.opengroup.org/onlinepubs/9699919799/functions/V2_chap02.html&quot;&gt;POSIX 2008の&lt;/a&gt;予約済みシンボルが定義されています。 制限は、上記のものより多少微妙です。</target>
        </trans-unit>
        <trans-unit id="3923bccb875191f26bb58e24ca4ac2c69b2a104d" translate="yes" xml:space="preserve">
          <source>Each header declares or defines all identifiers listed in its associated subclause, and
  optionally declares or defines identifiers listed in its associated future library directions subclause and identifiers which are always reserved either for any use or for use as file scope identifiers.</source>
          <target state="translated">各ヘッダは、関連するサブ句にリストされているすべての識別子を宣言または定義し、オプションとして、関連する将来のライブラリの方向性サブ句にリストされている識別子と、任意の使用のために、またはファイルスコープ識別子として使用するために常に予約されている識別子を宣言または定義します。</target>
        </trans-unit>
        <trans-unit id="32cc50dd8168882a2f32f9dae904b27630be414d" translate="yes" xml:space="preserve">
          <source>Each identifier with file scope listed in any of the following subclauses (including the
  future library directions) is reserved for use as a macro name and as an identifier with
  file scope in the same name space if any of its associated headers is included.</source>
          <target state="translated">以下のいずれかのサブスクリプション(将来のライブラリの方向性を含む)に記載されているファイルスコープを持つ各識別子は、マクロ名として使用するために予約されており、関連するヘッダのいずれかが含まれている場合には、同じ名前空間内のファイルスコープを持つ識別子として使用されます。</target>
        </trans-unit>
        <trans-unit id="901f8b7c9dba5bacb86bcba61fc4d4438ae005a6" translate="yes" xml:space="preserve">
          <source>Each macro name in any of the following subclauses (including the future library
  directions) is reserved for use as specified if any of its associated headers is included;
  unless explicitly stated otherwise (see 7.1.4).</source>
          <target state="translated">以下のいずれかのサブ ク ラ ウ ズ (将来の ラ イ ブ ラ リ の方向性を含む)内の各マ ク ロ 名は、 その関連す る ヘ ッ ダのいずれかが含まれている場合に指定 さ れた使用のために予約されています。</target>
        </trans-unit>
        <trans-unit id="5e28b1cf21e0f4ab90d7899db4bfb417554d78e6" translate="yes" xml:space="preserve">
          <source>Each name that begins with an underscore is reserved to the implementation for use as a name in the global namespace.&lt;sup&gt;165&lt;/sup&gt;</source>
          <target state="translated">アンダースコアで始まる各名前は、グローバル名前空間の名前として使用するために実装に予約されています。 &lt;sup&gt;165&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="c54165923968aa1d4d000f735a45d1548f013998" translate="yes" xml:space="preserve">
          <source>Each name that contains a double underscore (&lt;code&gt;__&lt;/code&gt;) or begins with an underscore followed by an uppercase letter (2.11) is reserved to the implementation for any use.</source>
          <target state="translated">二重下線（ &lt;code&gt;__&lt;/code&gt; ）を含む名前、または下線で始まり、その後に大文字（2.11）が続く名前は、実装用に予約されています。</target>
        </trans-unit>
        <trans-unit id="15db9f28c2ba4e968bc63a40692535fbeac68334" translate="yes" xml:space="preserve">
          <source>Extracts from C++0x draft</source>
          <target state="translated">C++0xのドラフトからの抜粋</target>
        </trans-unit>
        <trans-unit id="8c87f81e583e2fe6e538544663334a72a903d362" translate="yes" xml:space="preserve">
          <source>From &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/565w213d.aspx&quot;&gt;MSDN&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/565w213d.aspx&quot;&gt;MSDN&lt;/a&gt;から：</target>
        </trans-unit>
        <trans-unit id="937b036ce701434e6914f371a780b8f5a84dbf84" translate="yes" xml:space="preserve">
          <source>From the 2003 C++ Standard:</source>
          <target state="translated">2003年のC++標準より。</target>
        </trans-unit>
        <trans-unit id="ff44ac2555b7f2fffd8b5d2b8e42bdd5c8d5522d" translate="yes" xml:space="preserve">
          <source>From the &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3242.pdf&quot;&gt;n3242.pdf&lt;/a&gt; file (I expect the final standard text to be similar):</source>
          <target state="translated">&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3242.pdf&quot;&gt;n3242.pdf&lt;/a&gt;ファイルから（最終的な標準テキストは同様であることを期待しています）：</target>
        </trans-unit>
        <trans-unit id="de9a905703d4049bf0a7102ef6e1dddb7daa8395" translate="yes" xml:space="preserve">
          <source>I do this even inside classes and namespaces because I then only have to remember one rule (compared to &quot;at the end of the name in global scope, and the beginning of the name everywhere else&quot;).</source>
          <target state="translated">クラスや名前空間内でもこのようにしていますが、これはルールを一つだけ覚えておけばいいからです(「グローバルスコープ内では名前の最後に、それ以外の場所では名前の先頭に」というのに比べて)。</target>
        </trans-unit>
        <trans-unit id="8f446e24cf801f1b1ed4e8f8947ff09b7d06e4ea" translate="yes" xml:space="preserve">
          <source>If the program removes (with &lt;code&gt;#undef&lt;/code&gt;) any macro definition of an identifier in the first
  group listed above, the behavior is undefined.</source>
          <target state="translated">プログラムが（ &lt;code&gt;#undef&lt;/code&gt; を使用して ）上記の最初のグループの識別子のマクロ定義を削除した場合、動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="564b4470885aa0c8412a9f0bebef1e57667cf48d" translate="yes" xml:space="preserve">
          <source>It's common in C++ to name member variables with some kind of prefix to denote the fact that they're member variables, rather than local variables or parameters. If you've come from an MFC background, you'll probably use &lt;code&gt;m_foo&lt;/code&gt;. I've also seen &lt;code&gt;myFoo&lt;/code&gt; occasionally.</source>
          <target state="translated">C ++では、ローカル変数やパラメーターではなく、メンバー変数であることを示すために、ある種の接頭辞を付けてメンバー変数に名前を付けるのが一般的です。 MFCのバックグラウンドを持っている場合は、おそらく &lt;code&gt;m_foo&lt;/code&gt; を使用します 。 &lt;code&gt;myFoo&lt;/code&gt; も時々見ました。</target>
        </trans-unit>
        <trans-unit id="9c495821ff0a7896702e146a03177c71926761e4" translate="yes" xml:space="preserve">
          <source>Literal suffix identifiers that do not start with an underscore are reserved for future standardization.</source>
          <target state="translated">アンダースコアで始まらないリテラル接尾辞識別子は、将来の標準化のために予約されています。</target>
        </trans-unit>
        <trans-unit id="c5f79f225dc531a2cb68d0a6f8442fdea0acb9e0" translate="yes" xml:space="preserve">
          <source>Names beginning with &lt;code&gt;PRI&lt;/code&gt; or &lt;code&gt;SCN&lt;/code&gt; followed by any lowercase letter or &lt;code&gt;X&lt;/code&gt; are reserved</source>
          <target state="translated">&lt;code&gt;PRI&lt;/code&gt; または &lt;code&gt;SCN&lt;/code&gt; で始まり、その後に小文字または &lt;code&gt;X&lt;/code&gt; が続く名前は予約されています</target>
        </trans-unit>
        <trans-unit id="f1f9b2d843cc79f0b346fb9fa79aa08e6d854a9c" translate="yes" xml:space="preserve">
          <source>Names beginning with &lt;code&gt;str&lt;/code&gt;, &lt;code&gt;mem&lt;/code&gt;, or &lt;code&gt;wcs&lt;/code&gt; followed by a lowercase letter are reserved</source>
          <target state="translated">&lt;code&gt;str&lt;/code&gt; 、 &lt;code&gt;mem&lt;/code&gt; 、または &lt;code&gt;wcs&lt;/code&gt; で始まり、その後に小文字が続く名前は予約されています</target>
        </trans-unit>
        <trans-unit id="8a9ca1c20f63ab6f7459560b2507aa9a213008b9" translate="yes" xml:space="preserve">
          <source>Names beginning with a capital &lt;code&gt;E&lt;/code&gt; followed a digit or uppercase letter:</source>
          <target state="translated">大文字の &lt;code&gt;E&lt;/code&gt; で始まる名前は、数字または大文字の後に続きます。</target>
        </trans-unit>
        <trans-unit id="67cc9b8e180311279b63d11aa4ba78ec5d8059ea" translate="yes" xml:space="preserve">
          <source>Names of all existing mathematics functions suffixed with &lt;code&gt;f&lt;/code&gt; or &lt;code&gt;l&lt;/code&gt; are reserved</source>
          <target state="translated">接尾辞が &lt;code&gt;f&lt;/code&gt; または &lt;code&gt;l&lt;/code&gt; の既存のすべての数学関数の名前は予約されています</target>
        </trans-unit>
        <trans-unit id="53be8d3b3fb3bd83bcb0e235d46282a241c04386" translate="yes" xml:space="preserve">
          <source>Names that begin with &lt;code&gt;LC_&lt;/code&gt; followed by an uppercase letter</source>
          <target state="translated">&lt;code&gt;LC_&lt;/code&gt; で始まり、その後に大文字が続く名前</target>
        </trans-unit>
        <trans-unit id="876647522430b0cdcc0bfc139c24beb2d59373a9" translate="yes" xml:space="preserve">
          <source>Names that begin with &lt;code&gt;SIG&lt;/code&gt; followed by an uppercase letter are reserved</source>
          <target state="translated">&lt;code&gt;SIG&lt;/code&gt; で始まり、その後に大文字が続く名前は予約されています</target>
        </trans-unit>
        <trans-unit id="756e441a441946f9be0c785f7b3eddb2a7f4ad75" translate="yes" xml:space="preserve">
          <source>Names that begin with &lt;code&gt;SIG_&lt;/code&gt; followed by an uppercase letter are reserved</source>
          <target state="translated">&lt;code&gt;SIG_&lt;/code&gt; で始まり、その後に大文字が続く名前は予約されています</target>
        </trans-unit>
        <trans-unit id="398c3910df0fb7d1b60318851d964bd268e9f94b" translate="yes" xml:space="preserve">
          <source>Names that begin with either &lt;code&gt;is&lt;/code&gt; or &lt;code&gt;to&lt;/code&gt; followed by a lowercase letter</source>
          <target state="translated">で始まる名前、または小文字の後に続く名前</target>
        </trans-unit>
        <trans-unit id="d3cc124567eedbd8c51c895f973b1647f118248d" translate="yes" xml:space="preserve">
          <source>Names that end with &lt;code&gt;_t&lt;/code&gt; are reserved</source>
          <target state="translated">&lt;code&gt;_t&lt;/code&gt; で終わる名前は予約されています</target>
        </trans-unit>
        <trans-unit id="c5fafa8c4713eb477e70f2efb716810cdf54bd87" translate="yes" xml:space="preserve">
          <source>No other identifiers are reserved. If the program declares or defines an identifier in a
  context in which it is reserved (other than as allowed by 7.1.4), or defines a reserved
  identifier as a macro name, the behavior is undefined.</source>
          <target state="translated">他の識別子は予約されていない。プログラムが識別子を予約されているコンテキストで(7.1.4で許可されている以外の)識別子を宣言または定義する場合、または予約された識別子をマクロ名として定義する場合、その動作は未定義となります。</target>
        </trans-unit>
        <trans-unit id="9f78bca7225e2187fb323aa2cf9d575380d8502a" translate="yes" xml:space="preserve">
          <source>Of course, putting your code in an unique namespace helps to avoid collision, too (but won't protect against evil macros)</source>
          <target state="translated">もちろん、コードをユニークな名前空間に置くことで衝突を避けることができます(ただし、悪意のあるマクロからは保護されません)。</target>
        </trans-unit>
        <trans-unit id="1ad068bc9971ca20864c2eb0fc465ad0c7584644" translate="yes" xml:space="preserve">
          <source>Other restrictions might apply. For example, the POSIX standard reserves a lot of identifiers that are likely to show up in normal code:</source>
          <target state="translated">その他の制限が適用される場合があります。例えば、POSIX標準では、通常のコードで表示される可能性の高い多くの識別子を予約しています。</target>
        </trans-unit>
        <trans-unit id="01d0fd33cdbcb609d8be36e9a56d08842dcf18ad" translate="yes" xml:space="preserve">
          <source>Personal rule</source>
          <target state="translated">個人のルール</target>
        </trans-unit>
        <trans-unit id="7cf698f8e2cedd53c4a11faeac4083eb8f5a3559" translate="yes" xml:space="preserve">
          <source>Personally I just don't start identifiers with underscores. New addition to my rule: Don't use double underscores anywhere, which is easy as I rarely use underscore.</source>
          <target state="translated">個人的には識別子をアンダースコアで始めないようにしています。私のルールに新たに追加しました。ダブルアンダースコアはどこでも使わないようにしてください。</target>
        </trans-unit>
        <trans-unit id="74b6a50ceb23949ea544fe1f1a0cbca5ff569377" translate="yes" xml:space="preserve">
          <source>Reserved in any scope, including for use as &lt;a href=&quot;https://stackoverflow.com/questions/4297933/c-implementation#4297974&quot;&gt;implementation&lt;/a&gt; macros:</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/questions/4297933/c-implementation#4297974&quot;&gt;実装&lt;/a&gt;マクロとしての使用を含む、すべてのスコープで予約済み：</target>
        </trans-unit>
        <trans-unit id="3839d25c0b5de1eabb18cbbd529d20611c5b2ab4" translate="yes" xml:space="preserve">
          <source>Reserved in the global namespace:</source>
          <target state="translated">グローバル名前空間で予約されています。</target>
        </trans-unit>
        <trans-unit id="aefa38a747cacc68f54b53c33078d9a6ae8997ad" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;https://stackoverflow.com/questions/224397/why-do-people-use-double-underscore-so-much-in-c&quot;&gt;this question&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/questions/224397/why-do-people-use-double-underscore-so-much-in-c&quot;&gt;この質問&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="76b15ddd9bbae2a42a5c96bc2b644d8162ba90e8" translate="yes" xml:space="preserve">
          <source>Some examples</source>
          <target state="translated">いくつかの例</target>
        </trans-unit>
        <trans-unit id="6ccc40c82e00e0fbca158a964f9e0dd261465fc5" translate="yes" xml:space="preserve">
          <source>The rule about any identifier ending with &lt;code&gt;_t&lt;/code&gt; surprised me a lot. I think that is a POSIX standard (not sure yet) looking for clarification and official chapter and verse. This is from the &lt;a href=&quot;http://www.gnu.org/software/libtool/manual/libc/Reserved-Names.html&quot;&gt;GNU libtool manual&lt;/a&gt;, listing reserved names.</source>
          <target state="translated">&lt;code&gt;_t&lt;/code&gt; で終わる識別子に関する規則は、私を非常に驚かせました。 私はそれがPOSIX標準（まだ定かではありません）だと思います。 これは、 &lt;a href=&quot;http://www.gnu.org/software/libtool/manual/libc/Reserved-Names.html&quot;&gt;GNU libtoolマニュアル&lt;/a&gt;からのもので、予約済みの名前がリストされています。</target>
        </trans-unit>
        <trans-unit id="1f03c8a67f91ce23f733acc2ed3436d64f92d530" translate="yes" xml:space="preserve">
          <source>The rules (which did not change in C++11):</source>
          <target state="translated">C++11では変わらなかった)ルール。</target>
        </trans-unit>
        <trans-unit id="5d74020c7943c3abc5d91256210f30804c1b1061" translate="yes" xml:space="preserve">
          <source>The rules to avoid collision of names are both in the C++ standard (see Stroustrup book) and mentioned by C++ gurus (Sutter, etc.).</source>
          <target state="translated">名前の衝突を避けるためのルールは、C++の標準規格(Stroustrupの本を参照)にも、C++の達人(Sutterなど)が言及しています。</target>
        </trans-unit>
        <trans-unit id="abb2a1596df891975f9bd6cc72ee242045f322cc" translate="yes" xml:space="preserve">
          <source>This is apparently taken from section 17.4.3.1.2 of the C++ standard, but I can't find an original source for the full standard online.</source>
          <target state="translated">これはどうやらC++標準の17.4.3.1.2項から取ったものらしいのですが、オンラインでフル標準のオリジナルソースが見つかりません。</target>
        </trans-unit>
        <trans-unit id="bff46e1b5aff90bcf6586238acea50ba47e9003a" translate="yes" xml:space="preserve">
          <source>This last clause is confusing, unless you consider that a name starting with one underscore and followed by a lowercase letter would be Ok if</source>
          <target state="translated">この最後の句は紛らわしいですね。</target>
        </trans-unit>
        <trans-unit id="f67d15f83ed68e83b650f17c3e46b6e2eaa2342b" translate="yes" xml:space="preserve">
          <source>This means that you can use a single underscore as a member variable prefix, as long as it's followed by a lower-case letter.</source>
          <target state="translated">これは、小文字の後にアンダースコアが続く限り、単一のアンダースコアをメンバ変数のプレフィックスとして使用することができることを意味します。</target>
        </trans-unit>
        <trans-unit id="8c3ec51488fd4e3881b52fa5198d5df5b460f288" translate="yes" xml:space="preserve">
          <source>Underscore prefixes are common in C code -- a single underscore means &quot;private&quot;, and double underscores are usually reserved for use by the compiler.</source>
          <target state="translated">アンダースコアの接頭辞はC言語のコードでは一般的です --シングルアンダースコアは「プライベート」を意味し、ダブルアンダースコアは通常コンパイラが使用するために予約されています。</target>
        </trans-unit>
        <trans-unit id="00ba615e433b04a49b715f686f3c7ecb756868b4" translate="yes" xml:space="preserve">
          <source>Use of two sequential underscore characters ( __ ) at the beginning of an identifier, or a single leading underscore followed by a capital letter, is reserved for C++ implementations in all scopes. You should avoid using one leading underscore followed by a lowercase letter for names with file scope because of possible conflicts with current or future reserved identifiers.</source>
          <target state="translated">識別子の先頭に 2 つの連続したアンダースコア文字(__)を使用するか、または先頭に 1 つのアンダースコアと大文字を続けて使用することは、すべてのスコープで C++実装用に予約されています。現在または将来の予約済み識別子と競合する可能性があるため、ファイル スコープを持つ名前には、先頭のアンダースコア 1 文字の後に小文字を使用することは避ける必要があります。</target>
        </trans-unit>
        <trans-unit id="cafb52d2427ef3e764d75cc4a0d02a6f2ce6c5f8" translate="yes" xml:space="preserve">
          <source>What are the rules about using an underscore in a C++ identifier</source>
          <target state="translated">C++識別子でアンダースコアを使用する際のルールは?</target>
        </trans-unit>
        <trans-unit id="bc82e7705ecacd940f0284f78094a1f488e9240c" translate="yes" xml:space="preserve">
          <source>While using these names for your own purposes right now might not cause a problem, they do raise the possibility of conflict with future versions of that standard.</source>
          <target state="translated">これらの名前を今すぐに自分の目的のために使うことは問題にならないかもしれませんが、将来のバージョンの規格と衝突する可能性があります。</target>
        </trans-unit>
        <trans-unit id="c5e2b579738459b3a534e9eee49e63e71398d927" translate="yes" xml:space="preserve">
          <source>Yes, underscores may be used anywhere in an identifier. I believe the rules are: any of a-z, A-Z, _ in the first character and those + 0-9 for following characters.</source>
          <target state="translated">はい、アンダースコアは識別子のどこでも使用できます。ルールは次の通りだと思います:最初の文字に a-z,A-Z,_のいずれかを使用し、それに続く文字には+0-9 を使用してください。</target>
        </trans-unit>
        <trans-unit id="3524fe68bd665b18037ec2b91f39ea233bcddeff" translate="yes" xml:space="preserve">
          <source>defined in the global namespace...</source>
          <target state="translated">グローバル名前空間で定義されている</target>
        </trans-unit>
        <trans-unit id="cbe4f1bf930270da1013a574639c378f46ea7eb6" translate="yes" xml:space="preserve">
          <source>for additional format specifier macros</source>
          <target state="translated">追加のフォーマット指定マクロを参照してください。</target>
        </trans-unit>
        <trans-unit id="d1ffd005913b272aecef7eca405ba38d204c1423" translate="yes" xml:space="preserve">
          <source>for additional signal actions.</source>
          <target state="translated">信号の動作を追加します。</target>
        </trans-unit>
        <trans-unit id="e7eb8088643a246afd5e5877b28f76f2d9fae71a" translate="yes" xml:space="preserve">
          <source>for additional signal names.</source>
          <target state="translated">を参照してください。</target>
        </trans-unit>
        <trans-unit id="1f35767e6fd5f2f484bf3bc52bea5f6394638397" translate="yes" xml:space="preserve">
          <source>for additional string and array functions.</source>
          <target state="translated">文字列と配列の関数を追加するには</target>
        </trans-unit>
        <trans-unit id="a970c94fa50c842c066c4cf6a3e2e8cd49bea2b2" translate="yes" xml:space="preserve">
          <source>for additional type names.</source>
          <target state="translated">を使用して、追加の型名を指定します。</target>
        </trans-unit>
        <trans-unit id="7c6b6625ea4ed3c1296a08e5dcdb42d06c15bbd4" translate="yes" xml:space="preserve">
          <source>for corresponding functions that operate on float and long double arguments, respectively.</source>
          <target state="translated">は、それぞれ float 引数と long double 引数で動作する対応する関数に対応しています。</target>
        </trans-unit>
        <trans-unit id="418f44dd61b84b583bf21de5375c9e60e260acfa" translate="yes" xml:space="preserve">
          <source>identifiers beginning with an underscore</source>
          <target state="translated">アンダースコアで始まる識別子</target>
        </trans-unit>
        <trans-unit id="d4ab2ef9be0eef371126d2a11d047dbb6f5b2681" translate="yes" xml:space="preserve">
          <source>identifiers beginning with an underscore followed immediately by an uppercase letter</source>
          <target state="translated">アンダースコアの後に大文字で始まる識別子</target>
        </trans-unit>
        <trans-unit id="ba7418871c901ba8e6a177f348bf0f753c0e4364" translate="yes" xml:space="preserve">
          <source>identifiers containing adjacent underscores (or &quot;double underscore&quot;)</source>
          <target state="translated">隣接アンダースコアを含む識別子</target>
        </trans-unit>
        <trans-unit id="f7beaeda3ce73aef06674e6d116cd9c5641d680e" translate="yes" xml:space="preserve">
          <source>may be used for additional character testing and conversion functions.</source>
          <target state="translated">は、追加の文字テストや変換機能に使用することができます。</target>
        </trans-unit>
        <trans-unit id="d2722be763842585a40ed07b059ad9701cea8ea4" translate="yes" xml:space="preserve">
          <source>may be used for additional error code names.</source>
          <target state="translated">は、追加のエラーコード名に使用することができます。</target>
        </trans-unit>
        <trans-unit id="1a2bae39937a1970dc9cd1bccd55355c8998319b" translate="yes" xml:space="preserve">
          <source>may be used for additional macros specifying locale attributes.</source>
          <target state="translated">は、ロケール属性を指定する追加のマクロに使用することができます。</target>
        </trans-unit>
        <trans-unit id="557f255516719ea16f8f4a0aae1166054e2c9b43" translate="yes" xml:space="preserve">
          <source>not</source>
          <target state="translated">not</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
