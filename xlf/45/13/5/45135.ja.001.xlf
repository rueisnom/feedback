<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/45135">
    <body>
      <group id="45135">
        <trans-unit id="f428ce5ef92d9931592953c0123bb545bb12afa6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;libmysqlclient&lt;/code&gt; - static, for the sake of the example (you'd prefer the shared library, of course, as the &lt;code&gt;libmysqlclient&lt;/code&gt; is huge); in &lt;code&gt;/usr/local/lib&lt;/code&gt;; and dependent on stuff from &lt;code&gt;libz&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;libmysqlclient&lt;/code&gt; -&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;例のために静的（&lt;/font&gt;&lt;/font&gt; &lt;code&gt;libmysqlclient&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は巨大&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;であるため、もちろん、共有ライブラリをお勧めします&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;中に&lt;/font&gt;&lt;/font&gt; &lt;code&gt;/usr/local/lib&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そして&lt;/font&gt; &lt;code&gt;libz&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;からのものに依存&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="eb8f620a3b063d96d51536802c9af48d547aa455" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;libz&lt;/code&gt; (dynamic)</source>
          <target state="translated">&lt;code&gt;libz&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（動的）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="63835de2c0f0239a277b3334395de0b0fc436b61" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;myprog.o&lt;/code&gt; - containing &lt;code&gt;main()&lt;/code&gt; function, dependent on &lt;code&gt;libmysqlclient&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;myprog.o&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; -含有&lt;/font&gt;&lt;/font&gt; &lt;code&gt;main()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に依存して、関数&lt;/font&gt;&lt;/font&gt; &lt;code&gt;libmysqlclient&lt;/code&gt; の</target>
        </trans-unit>
        <trans-unit id="10cf45a451826202971b4978982a610c011eecb5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;strong&gt;Careful !&lt;/strong&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;注意！&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="63b47ce03e37bab833afec545847cce9f3d3e60a" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;(See the history on this answer to get the more elaborate text, but I now think it's easier for the reader to see real command lines).&lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（この回答の履歴を見て、より複雑なテキストを入手してください。しかし、読者が実際のコマンドラインを見る方が簡単だと思います）。&lt;/font&gt;&lt;/font&gt;&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="09ed32d869293c498c0ce455422423db3a3e918a" translate="yes" xml:space="preserve">
          <source>A quick tip that tripped me up: if you're invoking the linker as &quot;gcc&quot; or &quot;g++&quot;, then using &quot;--start-group&quot; and &quot;--end-group&quot; won't pass those options through to the linker -- nor will it flag an error. It will just fail the link with undefined symbols if you had the library order wrong.</source>
          <target state="translated">ちょっとしたヒントで困ったことがあります。リンカを &quot;gcc &quot;または &quot;g++&quot;として起動している場合、&quot;--start-group &quot;および&quot;--end-group &quot;を使用しても、リンカにこれらのオプションを渡すことはできません --エラーフラグも立てません。ライブラリの順番が間違っていた場合は、未定義のシンボルでリンクを失敗させるだけです。</target>
        </trans-unit>
        <trans-unit id="25aeb5287915d9c79ceb0ec8872c89f023aa56c1" translate="yes" xml:space="preserve">
          <source>Another alternative would be to specify the list of libraries twice:</source>
          <target state="translated">別の方法としては、ライブラリのリストを2回指定するという方法もあります。</target>
        </trans-unit>
        <trans-unit id="c548045874266bc12e394c77b665b6a4e8cab176" translate="yes" xml:space="preserve">
          <source>Common files shared by all below commands</source>
          <target state="translated">以下のコマンドで共有されている共通ファイル</target>
        </trans-unit>
        <trans-unit id="dea318ed487ef1d845e833afa39827b8bb59f283" translate="yes" xml:space="preserve">
          <source>Dependencies of static libraries against each other work the same - the library that needs symbols must be first, then the library that resolves the symbol.</source>
          <target state="translated">静的ライブラリ同士の依存関係は同じで、シンボルを必要とするライブラリが先になり、次にシンボルを解決するライブラリが先になります。</target>
        </trans-unit>
        <trans-unit id="4f34ac5f81e160c30f66af2daaf201ac7fcd37f0" translate="yes" xml:space="preserve">
          <source>Depending on different linkers HP/Intel/GCC/SUN/SGI/IBM/etc you can get unresolved functions/variables etc, on some platforms you have to list libraries twice.</source>
          <target state="translated">HPIntelGCCSUNSGIIBMetcのリンカの違いによっては、未解決の関数変数などを取得することができますが、プラットフォームによってはライブラリを2回リストアップしなければなりません。</target>
        </trans-unit>
        <trans-unit id="171a4e2465d5bcd48803208b3f1e01d85533b7fc" translate="yes" xml:space="preserve">
          <source>Doing this, you don't have to bother with the right sequence since the reference will be resolved in the second block.</source>
          <target state="translated">これを行うことで、参照は2つ目のブロックで解決されるので、正しいシーケンスに悩む必要はありません。</target>
        </trans-unit>
        <trans-unit id="333210bab0928a7b982dcd4cd2ad7fef17c0b72f" translate="yes" xml:space="preserve">
          <source>For the most part we use structured hierarchy of libraries, core, platform, different layers of abstraction, but for some systems you still have to play with the order in the link command.</source>
          <target state="translated">ほとんどの場合、ライブラリ、コア、プラットフォーム、さまざまな抽象度の階層構造を使用していますが、システムによっては、linkコマンドの順序を変更しなければならない場合があります。</target>
        </trans-unit>
        <trans-unit id="f0e07f98a7cfbc84ffcc151ea5fe1058d61be1f6" translate="yes" xml:space="preserve">
          <source>Here is an example of the implications if you miss specifying the dependencies for &lt;code&gt;libb.so&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &lt;code&gt;libb.so&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;の依存関係の指定を忘れた場合の影響の例を次に示します&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="23de810391953f2de13f49aab8930e22f2ea8562" translate="yes" xml:space="preserve">
          <source>Here's an example to make it clear how things work with GCC when &lt;strong&gt;static&lt;/strong&gt; libraries are involved. So let's assume we have the following scenario:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;静的&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ライブラリが関係する&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;場合にGCCでどのように機能するかを明確にする例を次に示し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それでは、次のシナリオがあるとします。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="743ccddd9960d7fb15777a6f8678b4d3f9d2ba26" translate="yes" xml:space="preserve">
          <source>How do we link this? (Note: examples from compiling on Cygwin using gcc 4.3.4)</source>
          <target state="translated">これをどうやってリンクするのか?(注:gcc 4.3.4を使ってCygwinでコンパイルした例)</target>
        </trans-unit>
        <trans-unit id="653389e15f70825bc7d2da28dc20db54f5c2ddd3" translate="yes" xml:space="preserve">
          <source>I have seen this a lot, some of our modules link in excess of a 100 libraries of our code plus system &amp;amp; 3rd party libs.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私はこれをたくさん見ました、私たちのモジュールのいくつかは私たちのコードの100のライブラリに加えてシステムとサードパーティのライブラリをリンクしています。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="66451297aa30173969730b142d889fb5da89f07d" translate="yes" xml:space="preserve">
          <source>If a static library depends on another library, but the other library again depends on the former library, there is a cycle. You can resolve this by enclosing the cyclically dependent libraries by &lt;code&gt;-(&lt;/code&gt; and &lt;code&gt;-)&lt;/code&gt;, such as &lt;code&gt;-( -la -lb -)&lt;/code&gt; (you may need to escape the parens, such as &lt;code&gt;-\(&lt;/code&gt; and &lt;code&gt;-\)&lt;/code&gt;). The linker then searches those enclosed lib multiple times to ensure cycling dependencies are resolved. Alternatively, you can specify the libraries multiple times, so each is before one another: &lt;code&gt;-la -lb -la&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;静的ライブラリが別のライブラリに依存しているが、他のライブラリも以前のライブラリに依存している場合、サイクルがあります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これを解決するには、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;-(&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;-)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;-( -la -lb -)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;などの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;-（&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;および&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;-）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;で&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;循環依存ライブラリを囲み&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;/font&gt; &lt;code&gt;-\(&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;および&lt;/font&gt;&lt;/font&gt; &lt;code&gt;-\)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;などの括弧をエスケープする必要がある場合があります&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;次に、リンカはこれらの囲まれたlibを複数回検索して、循環依存関係が解決されるようにします。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;または、ライブラリを複数回指定して、ライブラリを互いに&lt;/font&gt;&lt;/font&gt; &lt;code&gt;-la -lb -la&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;せることもできます：&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;-la -lb -la&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5bd339a46b997a32ff6e4baec079e5a5a4aa950e" translate="yes" xml:space="preserve">
          <source>If you add &lt;code&gt;-Wl,--start-group&lt;/code&gt; to the linker flags it does not care which order they're in or if there are circular dependencies.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;リンカーフラグに&lt;/font&gt;&lt;/font&gt; &lt;code&gt;-Wl,--start-group&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;追加した場合&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それらがどの順序にある​​か、または循環依存関係があるかどうかは関係ありません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c5b03f21e7f423fa914cf16a2c6046eb385028c9" translate="yes" xml:space="preserve">
          <source>If you now look into what dependencies the binary has, you note the binary itself depends also on &lt;code&gt;libd&lt;/code&gt;, not just &lt;code&gt;libb&lt;/code&gt; as it should. The binary will need to be relinked if &lt;code&gt;libb&lt;/code&gt; later depends on another library, if you do it this way. And if someone else loads &lt;code&gt;libb&lt;/code&gt; using &lt;code&gt;dlopen&lt;/code&gt; at runtime (think of loading plugins dynamically), the call will fail as well. So the &lt;code&gt;&quot;right&quot;&lt;/code&gt; really should be a &lt;code&gt;wrong&lt;/code&gt; as well.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あなたは今のバイナリが持つ依存には何があるかを調べる場合は、バイナリ自体が上にも依存することに注意してください&lt;/font&gt;&lt;/font&gt; &lt;code&gt;libd&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;だけではなく、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;libb&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それが必要として。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この方法で行う場合、後で&lt;/font&gt;&lt;/font&gt; &lt;code&gt;libb&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が別のライブラリに依存する&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;場合、バイナリを再リンクする必要があり&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そして、誰かが&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;実行時に&lt;/font&gt; &lt;code&gt;dlopen&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用して&lt;/font&gt;&lt;/font&gt; &lt;code&gt;libb&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ロードする場合&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（プラグインを動的にロードすることを考えると）、呼び出しも失敗します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、&lt;/font&gt; &lt;code&gt;&quot;right&quot;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;本当に&lt;/font&gt; &lt;code&gt;wrong&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;ている&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はず&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="94d55743d05ff930ed58f15c5d73240788859963" translate="yes" xml:space="preserve">
          <source>It is not correct to omit the dependency of &lt;code&gt;b.so&lt;/code&gt; against &lt;code&gt;d.so&lt;/code&gt; when creating the former. You will be required to specify the library when linking &lt;code&gt;a&lt;/code&gt; then, but &lt;code&gt;a&lt;/code&gt; doesn't really need the integer &lt;code&gt;b&lt;/code&gt; itself, so it should not be made to care about &lt;code&gt;b&lt;/code&gt;'s own dependencies.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;前者を作成するときに&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;b.so&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に対する&lt;/font&gt;&lt;/font&gt; &lt;code&gt;d.so&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;依存関係を省略することは正しくありません&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あなたは、リンク時にライブラリを指定する必要があります&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、その後、しかし、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;実際には整数を必要としない&lt;/font&gt; &lt;code&gt;b&lt;/code&gt; は&lt;font style=&quot;vertical-align: inherit;&quot;&gt;気になされるべきではないので、自分自身&lt;/font&gt; &lt;code&gt;b&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;自身の依存関係s「を。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ad3a6018335abaad797709de3c3bd7c1ed7086db" translate="yes" xml:space="preserve">
          <source>It's the same here - the libraries must follow the object files of the program. The difference here compared with static libraries is that you need not care about the dependencies of the libraries against each other, because &lt;em&gt;dynamic libraries sort out their dependencies themselves&lt;/em&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここでも同じです。ライブラリはプログラムのオブジェクトファイルに従う必要があります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;静的ライブラリとの違いは、&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;動的ライブラリは依存関係を自分で整理する&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ため、ライブラリの相互依存関係を気にする必要がないことです&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fb587ada83d8e1a8ee9481f30ef456fbc3d056e4" translate="yes" xml:space="preserve">
          <source>Link order certainly does matter, at least on some platforms. I have seen crashes for applications linked with libraries in wrong order (where wrong means A linked before B but B depends on A).</source>
          <target state="translated">少なくともいくつかのプラットフォームでは、リンクの順番は確かに重要です。私は、間違った順番でライブラリをリンクしたアプリケーションがクラッシュするのを見たことがあります(間違った順番とは、AはBよりも前にリンクしているが、BはAに依存しているという意味です)。</target>
        </trans-unit>
        <trans-unit id="552a5faa80544adaaae47fe267abe592896ecf9a" translate="yes" xml:space="preserve">
          <source>Linking to dynamic libraries</source>
          <target state="translated">ダイナミックライブラリへのリンク</target>
        </trans-unit>
        <trans-unit id="39f7c9b810cd4f0b4f979ec37f8bac261b04af83" translate="yes" xml:space="preserve">
          <source>Linking to static libraries</source>
          <target state="translated">静的ライブラリへのリンク</target>
        </trans-unit>
        <trans-unit id="7ffdfc7bf8f19a1d2378f568466869dee697675c" translate="yes" xml:space="preserve">
          <source>My old lecturer used to say, &quot;&lt;em&gt;high cohesion &amp;amp; low coupling&lt;/em&gt;&quot;, it&amp;rsquo;s still true today.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私の昔の講師は、「&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;凝集度が高くカップリングが低い&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;」と言っていましたが、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;今日でもそうです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="675e8c1c21c1c57ebddfb73dbfe969aabf3d6f4c" translate="yes" xml:space="preserve">
          <source>On Qt this means adding:</source>
          <target state="translated">Qtでは、これは追加することを意味します。</target>
        </trans-unit>
        <trans-unit id="8ebbbd7ff214e3a23f0c282805225887043056f4" translate="yes" xml:space="preserve">
          <source>Once you hit upon a solution document it so the next developer does not have to work it out again.</source>
          <target state="translated">一度解決策を見つけたら、次の開発者が再びそれを解決する必要がないように文書化します。</target>
        </trans-unit>
        <trans-unit id="0f9dc4dd6ead5ab8bb73a42fddcc77ba01505898" translate="yes" xml:space="preserve">
          <source>Saves loads of time messing about and it doesn't seem to slow down linking much (which takes far less time than compilation anyway).</source>
          <target state="translated">これを使えば、いじくりまわす時間を節約できますし、リンクの速度が遅くなることもありません(コンパイルよりもはるかに短い時間で済みます)。</target>
        </trans-unit>
        <trans-unit id="40dedb1487d80068341756be595421015f98b8e8" translate="yes" xml:space="preserve">
          <source>Some recent distributions apparently default to using the &lt;code&gt;--as-needed&lt;/code&gt; linker flag, which enforces that the program's object files come before the dynamic libraries. If that flag is passed, the linker will not link to libraries that are not actually needed by the executable (and it detects this from left to right). My recent archlinux distribution doesn't use this flag by default, so it didn't give an error for not following the correct order.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最近の一部のディストリビューションでは、デフォルトで&lt;/font&gt;&lt;/font&gt; &lt;code&gt;--as-needed&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;リンカーフラグ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用するように設定されています&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。これにより、プログラムのオブジェクトファイルが動的ライブラリの前に配置されます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そのフラグが渡された場合、リンカは実行可能ファイルで実際には必要とされないライブラリにリンクしません（これは左から右に検出されます）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私の最近のarchlinuxディストリビューションはデフォルトでこのフラグを使用しないため、正しい順序に従わないことによるエラーは発生しませんでした。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8ed67a44705ea0a77cee20b5704065a990d8e5c6" translate="yes" xml:space="preserve">
          <source>The GNU ld linker is a so-called smart linker.  It will keep track of the functions used by preceding static libraries, permanently tossing out those functions that are not used from its lookup tables.  The result is that if you link a static library too early, then the functions in that library are no longer available to static libraries later on the link line.</source>
          <target state="translated">GNU ldリンカはいわゆるスマートリンカです。これは、先行するスタティック・ライブラリで使われている関数を追跡し、使われていない関数をルックアップ・テーブルから永久に捨てます。その結果、スタティック・ライブラリをリンクするのが早すぎると、そのライブラリの関数はリンク先のスタティック・ライブラリでは利用できなくなります。</target>
        </trans-unit>
        <trans-unit id="1bf3a7a5feb37770570198278fa890ec8a7df94a" translate="yes" xml:space="preserve">
          <source>The linker searches from left to right, and notes unresolved symbols as it go. If a library resolves the symbol, it takes the object files of that library to resolve the symbol (b.o out of libb.a in this case).</source>
          <target state="translated">リンカは左から右へと検索し、未解決のシンボルをメモしていきます。ライブラリがシンボルを解決した場合、そのライブラリのオブジェクトファイルを使ってシンボルを解決します (この場合は libb.a から b.o を取り出します)。</target>
        </trans-unit>
        <trans-unit id="f0791ce3c2f32b1be4cc132d1ddc378cad14eeb1" translate="yes" xml:space="preserve">
          <source>The order within a group is important !
Here's an example: a debug library has a debug routine, but the non-debug
library has a weak version of the same. You must put the debug library
FIRST in the group or you will resolve to the non-debug version.</source>
          <target state="translated">グループ内での順番は重要です 例えば、デバッグライブラリにはデバッグルーチンがありますが、非デバッグライブラリには同じものの弱いバージョンがあります。デバッグライブラリをグループの中で最初に置かなければなりません。</target>
        </trans-unit>
        <trans-unit id="a7870b7aaacd3dd70151c322bee18b80dfe8b6f8" translate="yes" xml:space="preserve">
          <source>The typical UNIX linker works from left to right, so put all your dependent libraries on the left, and the ones that satisfy those dependencies on the right of the link line.  You may find that some libraries depend on others while at the same time other libraries depend on them.  This is where it gets complicated.  When it comes to circular references, fix your code!</source>
          <target state="translated">典型的な UNIX リンカは左から右へと動作しますので、依存するライブラリをすべて左に置き、それらの依存関係を満たすライブラリをリンクラインの右に置きます。いくつかのライブラリが他のライブラリに依存していると同時に、他のライブラリが他のライブラリに依存していることに気づくかもしれません。ここがややこしくなるところです。循環参照に関しては、あなたのコードを修正してください!</target>
        </trans-unit>
        <trans-unit id="d8034293152f97e3102c4dc47a7ee7fd5f63973c" translate="yes" xml:space="preserve">
          <source>Why does the order in which libraries are linked sometimes cause errors in GCC</source>
          <target state="translated">GCCでライブラリをリンクする順番がエラーになることがあるのはなぜですか?</target>
        </trans-unit>
        <trans-unit id="9d6847221bf9641ed18510dd9c8dbb866bd31f6c" translate="yes" xml:space="preserve">
          <source>Why does the order in which libraries are linked sometimes cause errors in GCC?</source>
          <target state="translated">GCCでは、ライブラリをリンクした順番でエラーが発生することがあるのはなぜですか?</target>
        </trans-unit>
        <trans-unit id="06d6f8381b934aa5122f07fa38d257d4a60c1f31" translate="yes" xml:space="preserve">
          <source>You may can use -Xlinker option.</source>
          <target state="translated">Xlinkerオプションを使用することができます。</target>
        </trans-unit>
        <trans-unit id="9778abb1e9adcf293232303583978f6128849bdb" translate="yes" xml:space="preserve">
          <source>You need to precede each library in the group list with -Xlinker</source>
          <target state="translated">グループリストの各ライブラリの前に -Xlinker を付ける必要があります。</target>
        </trans-unit>
        <trans-unit id="3c0ee91ef5fb4b45ab9e5ffca63e302f4ef40dff" translate="yes" xml:space="preserve">
          <source>You need to write them as &quot;-Wl,--start-group&quot; etc. to tell GCC to pass the argument through to the linker.</source>
          <target state="translated">引数をリンカに渡すためには、&quot;-Wl,--start-group &quot;などと書く必要があります。</target>
        </trans-unit>
        <trans-unit id="75008c094d5bb1cdd848888ece2bc12cbe477679" translate="yes" xml:space="preserve">
          <source>is ALMOST equal to</source>
          <target state="translated">にほぼ等しい</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
