<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/45135">
    <body>
      <group id="45135">
        <trans-unit id="f428ce5ef92d9931592953c0123bb545bb12afa6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;libmysqlclient&lt;/code&gt; - static, for the sake of the example (you'd prefer the shared library, of course, as the &lt;code&gt;libmysqlclient&lt;/code&gt; is huge); in &lt;code&gt;/usr/local/lib&lt;/code&gt;; and dependent on stuff from &lt;code&gt;libz&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;libmysqlclient&lt;/code&gt; -&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;静态的，为了举例（您更喜欢共享库，因为&lt;/font&gt;&lt;/font&gt; &lt;code&gt;libmysqlclient&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;很大）；&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在&lt;/font&gt;&lt;/font&gt; &lt;code&gt;/usr/local/lib&lt;/code&gt; 中&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;；&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;并依赖于&lt;/font&gt; &lt;code&gt;libz&lt;/code&gt; 的&lt;font style=&quot;vertical-align: inherit;&quot;&gt;东西&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="eb8f620a3b063d96d51536802c9af48d547aa455" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;libz&lt;/code&gt; (dynamic)</source>
          <target state="translated">&lt;code&gt;libz&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（动态）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="63835de2c0f0239a277b3334395de0b0fc436b61" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;myprog.o&lt;/code&gt; - containing &lt;code&gt;main()&lt;/code&gt; function, dependent on &lt;code&gt;libmysqlclient&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;myprog.o&lt;/code&gt; -&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;包含&lt;/font&gt;&lt;/font&gt; &lt;code&gt;main()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;函数，取决于&lt;/font&gt;&lt;/font&gt; &lt;code&gt;libmysqlclient&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="10cf45a451826202971b4978982a610c011eecb5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;strong&gt;Careful !&lt;/strong&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;小心点！&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="63b47ce03e37bab833afec545847cce9f3d3e60a" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;(See the history on this answer to get the more elaborate text, but I now think it's easier for the reader to see real command lines).&lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（请参阅此答案的历史以获取更详尽的文本，但我现在认为读者更容易看到真实的命令行）。&lt;/font&gt;&lt;/font&gt;&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="09ed32d869293c498c0ce455422423db3a3e918a" translate="yes" xml:space="preserve">
          <source>A quick tip that tripped me up: if you're invoking the linker as &quot;gcc&quot; or &quot;g++&quot;, then using &quot;--start-group&quot; and &quot;--end-group&quot; won't pass those options through to the linker -- nor will it flag an error. It will just fail the link with undefined symbols if you had the library order wrong.</source>
          <target state="translated">一个快速的小提示让我很困扰:如果你以 &quot;gcc &quot;或 &quot;g++&quot;的身份调用链接器,那么使用&quot;--start-group &quot;和&quot;--end-group &quot;不会将这些选项传递给链接器,也不会标记一个错误。如果你把库的顺序弄错了,它只会以未定义的符号导致链接失败。</target>
        </trans-unit>
        <trans-unit id="25aeb5287915d9c79ceb0ec8872c89f023aa56c1" translate="yes" xml:space="preserve">
          <source>Another alternative would be to specify the list of libraries twice:</source>
          <target state="translated">另一种选择是指定两次图书馆的清单。</target>
        </trans-unit>
        <trans-unit id="c548045874266bc12e394c77b665b6a4e8cab176" translate="yes" xml:space="preserve">
          <source>Common files shared by all below commands</source>
          <target state="translated">以下所有命令共享的常用文件</target>
        </trans-unit>
        <trans-unit id="dea318ed487ef1d845e833afa39827b8bb59f283" translate="yes" xml:space="preserve">
          <source>Dependencies of static libraries against each other work the same - the library that needs symbols must be first, then the library that resolves the symbol.</source>
          <target state="translated">静态库之间的相互依赖关系的工作原理是一样的--需要符号的库必须先是需要符号的库,然后是解析符号的库。</target>
        </trans-unit>
        <trans-unit id="4f34ac5f81e160c30f66af2daaf201ac7fcd37f0" translate="yes" xml:space="preserve">
          <source>Depending on different linkers HP/Intel/GCC/SUN/SGI/IBM/etc you can get unresolved functions/variables etc, on some platforms you have to list libraries twice.</source>
          <target state="translated">根据不同的链接器HPIntelGCCSUNSGIIBMetc,你可能会得到未解决的函数变量等,在某些平台上,你必须两次列出库。</target>
        </trans-unit>
        <trans-unit id="171a4e2465d5bcd48803208b3f1e01d85533b7fc" translate="yes" xml:space="preserve">
          <source>Doing this, you don't have to bother with the right sequence since the reference will be resolved in the second block.</source>
          <target state="translated">这样做,你就不用再纠结于正确的序列了,因为引用将在第二块中解决。</target>
        </trans-unit>
        <trans-unit id="333210bab0928a7b982dcd4cd2ad7fef17c0b72f" translate="yes" xml:space="preserve">
          <source>For the most part we use structured hierarchy of libraries, core, platform, different layers of abstraction, but for some systems you still have to play with the order in the link command.</source>
          <target state="translated">大多数情况下,我们使用的是结构化的分层库、核心、平台、不同的抽象层,但对于一些系统来说,你还是要玩转链接命令中的顺序。</target>
        </trans-unit>
        <trans-unit id="f0e07f98a7cfbc84ffcc151ea5fe1058d61be1f6" translate="yes" xml:space="preserve">
          <source>Here is an example of the implications if you miss specifying the dependencies for &lt;code&gt;libb.so&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果您错过为&lt;/font&gt; &lt;code&gt;libb.so&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;指定依赖项，这是一个示例。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="23de810391953f2de13f49aab8930e22f2ea8562" translate="yes" xml:space="preserve">
          <source>Here's an example to make it clear how things work with GCC when &lt;strong&gt;static&lt;/strong&gt; libraries are involved. So let's assume we have the following scenario:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这是一个示例，用于阐明&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;涉及&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;静态&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;库&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;时GCC的工作方式&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因此，假设我们有以下情形：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="743ccddd9960d7fb15777a6f8678b4d3f9d2ba26" translate="yes" xml:space="preserve">
          <source>How do we link this? (Note: examples from compiling on Cygwin using gcc 4.3.4)</source>
          <target state="translated">我们该如何链接?(注:使用gcc 4.3.4在Cygwin上编译的例子)</target>
        </trans-unit>
        <trans-unit id="653389e15f70825bc7d2da28dc20db54f5c2ddd3" translate="yes" xml:space="preserve">
          <source>I have seen this a lot, some of our modules link in excess of a 100 libraries of our code plus system &amp;amp; 3rd party libs.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我已经看到很多了，我们的某些模块链接了超过100个我们的代码库以及系统库和第三方库。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="66451297aa30173969730b142d889fb5da89f07d" translate="yes" xml:space="preserve">
          <source>If a static library depends on another library, but the other library again depends on the former library, there is a cycle. You can resolve this by enclosing the cyclically dependent libraries by &lt;code&gt;-(&lt;/code&gt; and &lt;code&gt;-)&lt;/code&gt;, such as &lt;code&gt;-( -la -lb -)&lt;/code&gt; (you may need to escape the parens, such as &lt;code&gt;-\(&lt;/code&gt; and &lt;code&gt;-\)&lt;/code&gt;). The linker then searches those enclosed lib multiple times to ensure cycling dependencies are resolved. Alternatively, you can specify the libraries multiple times, so each is before one another: &lt;code&gt;-la -lb -la&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果静态库依赖于另一个库，但是另一个库又依赖于先前的库，则存在一个循环。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;您可以通过用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;-(&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;和&lt;/font&gt;&lt;/font&gt; &lt;code&gt;-)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;包围循环依赖的库来解决此问题&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，例如&lt;/font&gt;&lt;/font&gt; &lt;code&gt;-( -la -lb -)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（您可能需要转义括号，例如&lt;/font&gt;&lt;/font&gt; &lt;code&gt;-\(&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;和&lt;/font&gt;&lt;/font&gt; &lt;code&gt;-\)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;链接器然后多次搜索那些包含的lib，以确保解决循环依赖性。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;另外，您可以指定多个库，因此每个库都位于另一个库之前：&lt;/font&gt;&lt;/font&gt; &lt;code&gt;-la -lb -la&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5bd339a46b997a32ff6e4baec079e5a5a4aa950e" translate="yes" xml:space="preserve">
          <source>If you add &lt;code&gt;-Wl,--start-group&lt;/code&gt; to the linker flags it does not care which order they're in or if there are circular dependencies.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在链接器标志中&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;添加&lt;/font&gt;&lt;/font&gt; &lt;code&gt;-Wl,--start-group&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，则不在乎它们的顺序或是否存在循环依赖项。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c5b03f21e7f423fa914cf16a2c6046eb385028c9" translate="yes" xml:space="preserve">
          <source>If you now look into what dependencies the binary has, you note the binary itself depends also on &lt;code&gt;libd&lt;/code&gt;, not just &lt;code&gt;libb&lt;/code&gt; as it should. The binary will need to be relinked if &lt;code&gt;libb&lt;/code&gt; later depends on another library, if you do it this way. And if someone else loads &lt;code&gt;libb&lt;/code&gt; using &lt;code&gt;dlopen&lt;/code&gt; at runtime (think of loading plugins dynamically), the call will fail as well. So the &lt;code&gt;&quot;right&quot;&lt;/code&gt; really should be a &lt;code&gt;wrong&lt;/code&gt; as well.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果现在查看二进制文件具有哪些依赖性，您会注意到二进制文件本身也取决于&lt;/font&gt;&lt;/font&gt; &lt;code&gt;libd&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，而不仅&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;取决于&lt;/font&gt;&lt;/font&gt; &lt;code&gt;libb&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果&lt;/font&gt;&lt;/font&gt; &lt;code&gt;libb&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;以后依赖另一个库，则&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;需要重新链接该二进制文件&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（如果您这样做）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;而且，如果其他人&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在运行时&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用&lt;/font&gt; &lt;code&gt;dlopen&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;加载了&lt;/font&gt;&lt;/font&gt; &lt;code&gt;libb&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（考虑动态加载插件），则调用也会失败。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因此，&lt;/font&gt; &lt;code&gt;&quot;right&quot;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;确实也应该是&lt;/font&gt; &lt;code&gt;wrong&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="94d55743d05ff930ed58f15c5d73240788859963" translate="yes" xml:space="preserve">
          <source>It is not correct to omit the dependency of &lt;code&gt;b.so&lt;/code&gt; against &lt;code&gt;d.so&lt;/code&gt; when creating the former. You will be required to specify the library when linking &lt;code&gt;a&lt;/code&gt; then, but &lt;code&gt;a&lt;/code&gt; doesn't really need the integer &lt;code&gt;b&lt;/code&gt; itself, so it should not be made to care about &lt;code&gt;b&lt;/code&gt;'s own dependencies.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;创建前者时&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，忽略&lt;/font&gt;&lt;/font&gt; &lt;code&gt;b.so&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对&lt;/font&gt;&lt;/font&gt; &lt;code&gt;d.so&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的依赖关系是不正确&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;链接&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;时，将要求您指定库&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，但是&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;并不需要整数&lt;/font&gt;&lt;/font&gt; &lt;code&gt;b&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;本身，因此不应考虑&lt;/font&gt;&lt;/font&gt; &lt;code&gt;b&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;自身的依赖性。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ad3a6018335abaad797709de3c3bd7c1ed7086db" translate="yes" xml:space="preserve">
          <source>It's the same here - the libraries must follow the object files of the program. The difference here compared with static libraries is that you need not care about the dependencies of the libraries against each other, because &lt;em&gt;dynamic libraries sort out their dependencies themselves&lt;/em&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这里是相同的-库必须遵循程序的目标文件。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;与静态库相比，这里的区别在于您不必在意彼此之间的依赖关系，因为&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;动态库会自己整理其依赖关系&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fb587ada83d8e1a8ee9481f30ef456fbc3d056e4" translate="yes" xml:space="preserve">
          <source>Link order certainly does matter, at least on some platforms. I have seen crashes for applications linked with libraries in wrong order (where wrong means A linked before B but B depends on A).</source>
          <target state="translated">链接顺序当然很重要,至少在某些平台上是这样。我见过以错误的顺序链接库的应用程序崩溃(错误的意思是A链接在B之前,但B取决于A)。</target>
        </trans-unit>
        <trans-unit id="552a5faa80544adaaae47fe267abe592896ecf9a" translate="yes" xml:space="preserve">
          <source>Linking to dynamic libraries</source>
          <target state="translated">链接到动态库</target>
        </trans-unit>
        <trans-unit id="39f7c9b810cd4f0b4f979ec37f8bac261b04af83" translate="yes" xml:space="preserve">
          <source>Linking to static libraries</source>
          <target state="translated">链接到静态库</target>
        </trans-unit>
        <trans-unit id="7ffdfc7bf8f19a1d2378f568466869dee697675c" translate="yes" xml:space="preserve">
          <source>My old lecturer used to say, &quot;&lt;em&gt;high cohesion &amp;amp; low coupling&lt;/em&gt;&quot;, it&amp;rsquo;s still true today.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我的老讲师曾经说过&amp;ldquo; &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;高凝聚力和低耦合&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &amp;rdquo;，今天仍然如此。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="675e8c1c21c1c57ebddfb73dbfe969aabf3d6f4c" translate="yes" xml:space="preserve">
          <source>On Qt this means adding:</source>
          <target state="translated">在Qt上,这意味着添加。</target>
        </trans-unit>
        <trans-unit id="8ebbbd7ff214e3a23f0c282805225887043056f4" translate="yes" xml:space="preserve">
          <source>Once you hit upon a solution document it so the next developer does not have to work it out again.</source>
          <target state="translated">一旦你击中了一个解决方案的文档,那么下一个开发者就不需要再去解决它了。</target>
        </trans-unit>
        <trans-unit id="0f9dc4dd6ead5ab8bb73a42fddcc77ba01505898" translate="yes" xml:space="preserve">
          <source>Saves loads of time messing about and it doesn't seem to slow down linking much (which takes far less time than compilation anyway).</source>
          <target state="translated">节约了大量的时间,而且它似乎并没有减慢链接的速度(反正比编译时间要短得多)。</target>
        </trans-unit>
        <trans-unit id="40dedb1487d80068341756be595421015f98b8e8" translate="yes" xml:space="preserve">
          <source>Some recent distributions apparently default to using the &lt;code&gt;--as-needed&lt;/code&gt; linker flag, which enforces that the program's object files come before the dynamic libraries. If that flag is passed, the linker will not link to libraries that are not actually needed by the executable (and it detects this from left to right). My recent archlinux distribution doesn't use this flag by default, so it didn't give an error for not following the correct order.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;某些最新发行版显然默认使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;--as-needed&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;链接程序标志，该标志强制程序的目标文件位于动态库之前。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果传递了该标志，则链接器将不会链接到可执行文件实际上并不需要的库（并且从左到右检测到它）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我最近的archlinux发行版默认情况下不使用此标志，因此它没有给出未遵循正确顺序的错误。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8ed67a44705ea0a77cee20b5704065a990d8e5c6" translate="yes" xml:space="preserve">
          <source>The GNU ld linker is a so-called smart linker.  It will keep track of the functions used by preceding static libraries, permanently tossing out those functions that are not used from its lookup tables.  The result is that if you link a static library too early, then the functions in that library are no longer available to static libraries later on the link line.</source>
          <target state="translated">GNU ld linker 是一个所谓的智能链接器。它将跟踪前面的静态库所使用的函数,并将那些没有被使用的函数从它的查找表中永久地扔掉。这样做的结果是,如果你过早地链接了一个静态库,那么这个库中的函数在后面的静态库中就无法使用了。</target>
        </trans-unit>
        <trans-unit id="1bf3a7a5feb37770570198278fa890ec8a7df94a" translate="yes" xml:space="preserve">
          <source>The linker searches from left to right, and notes unresolved symbols as it go. If a library resolves the symbol, it takes the object files of that library to resolve the symbol (b.o out of libb.a in this case).</source>
          <target state="translated">链接器会从左到右搜索,并将未解决的符号记录下来。如果一个库解析了这个符号,它就会取该库的对象文件来解析这个符号(本例中的b.o出libb.a)。</target>
        </trans-unit>
        <trans-unit id="f0791ce3c2f32b1be4cc132d1ddc378cad14eeb1" translate="yes" xml:space="preserve">
          <source>The order within a group is important !
Here's an example: a debug library has a debug routine, but the non-debug
library has a weak version of the same. You must put the debug library
FIRST in the group or you will resolve to the non-debug version.</source>
          <target state="translated">组内的顺序很重要! 这里有一个例子:一个调试库有一个调试例程,但是非调试库有一个弱的版本。你必须把调试库放在组中的第一个,否则你将解析到非调试版本。</target>
        </trans-unit>
        <trans-unit id="a7870b7aaacd3dd70151c322bee18b80dfe8b6f8" translate="yes" xml:space="preserve">
          <source>The typical UNIX linker works from left to right, so put all your dependent libraries on the left, and the ones that satisfy those dependencies on the right of the link line.  You may find that some libraries depend on others while at the same time other libraries depend on them.  This is where it gets complicated.  When it comes to circular references, fix your code!</source>
          <target state="translated">典型的UNIX链接器是从左到右工作的,所以把所有依赖的库放在左边,满足这些依赖的库放在链接行的右边。你可能会发现,有些库依赖其他库,同时其他库也依赖它们。这时候就会变得复杂起来。当涉及到循环引用的时候,请修正你的代码!</target>
        </trans-unit>
        <trans-unit id="d8034293152f97e3102c4dc47a7ee7fd5f63973c" translate="yes" xml:space="preserve">
          <source>Why does the order in which libraries are linked sometimes cause errors in GCC</source>
          <target state="translated">为什么在GCC中链接库的顺序有时会出现错误?</target>
        </trans-unit>
        <trans-unit id="9d6847221bf9641ed18510dd9c8dbb866bd31f6c" translate="yes" xml:space="preserve">
          <source>Why does the order in which libraries are linked sometimes cause errors in GCC?</source>
          <target state="translated">为什么库的链接顺序有时会在GCC中出现错误?</target>
        </trans-unit>
        <trans-unit id="06d6f8381b934aa5122f07fa38d257d4a60c1f31" translate="yes" xml:space="preserve">
          <source>You may can use -Xlinker option.</source>
          <target state="translated">你可以使用-Xlinker选项。</target>
        </trans-unit>
        <trans-unit id="9778abb1e9adcf293232303583978f6128849bdb" translate="yes" xml:space="preserve">
          <source>You need to precede each library in the group list with -Xlinker</source>
          <target state="translated">你需要在组列表中的每个库前面加上 -Xlinker</target>
        </trans-unit>
        <trans-unit id="3c0ee91ef5fb4b45ab9e5ffca63e302f4ef40dff" translate="yes" xml:space="preserve">
          <source>You need to write them as &quot;-Wl,--start-group&quot; etc. to tell GCC to pass the argument through to the linker.</source>
          <target state="translated">你需要把它们写成&quot;-Wl,-start-group &quot;等来告诉GCC将参数传递给链接器。</target>
        </trans-unit>
        <trans-unit id="75008c094d5bb1cdd848888ece2bc12cbe477679" translate="yes" xml:space="preserve">
          <source>is ALMOST equal to</source>
          <target state="translated">几乎等于</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
