<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/61212">
    <body>
      <group id="61212">
        <trans-unit id="f8e13f91d90758aea3dc53595243f02f1e0d355a" translate="yes" xml:space="preserve">
          <source>-d for directory</source>
          <target state="translated">目录中的 -d</target>
        </trans-unit>
        <trans-unit id="91e471083fc48a4b0d2b23121d9083958a9aface" translate="yes" xml:space="preserve">
          <source>-f for force</source>
          <target state="translated">-f代表武力</target>
        </trans-unit>
        <trans-unit id="e20b2ee78233cdc808b587b1e17d58f6c7f44313" translate="yes" xml:space="preserve">
          <source>-i for interactive</source>
          <target state="translated">互动式的 -i</target>
        </trans-unit>
        <trans-unit id="67f5ef2b5a314a01ace0162d64fa4a7c7dfda3e8" translate="yes" xml:space="preserve">
          <source>-x for ignored files(add if required)</source>
          <target state="translated">-x为被忽略的文件(如果需要,请添加)</target>
        </trans-unit>
        <trans-unit id="491faa0f780a676af996359040f36480886cb2d6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.kernel.org/pub/software/scm/git/docs/git-clean.html&quot;&gt;git-clean&lt;/a&gt; is what you are looking for. It is used to remove untracked files from the working tree.</source>
          <target state="translated">&lt;a href=&quot;http://www.kernel.org/pub/software/scm/git/docs/git-clean.html&quot;&gt;git-clean&lt;/a&gt;是您想要的。 它用于从工作树中删除未跟踪的文件。</target>
        </trans-unit>
        <trans-unit id="30566993e0eb6d405a8eee5786ecdb9ff8b223d3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://git-scm.com/docs/git-clean&quot;&gt;git-clean&lt;/a&gt; - Remove untracked files from the working tree</source>
          <target state="translated">&lt;a href=&quot;https://git-scm.com/docs/git-clean&quot;&gt;git-&lt;/a&gt; clean-从工作树中删除未跟踪的文件</target>
        </trans-unit>
        <trans-unit id="9a26307d594f269f5903229015c81534ae2d88de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;gclean&lt;/code&gt;&lt;em&gt;removes untracked directories in addition to untracked files&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;gclean&lt;/code&gt; &lt;em&gt;除了删除未跟踪的文件之外，&lt;/em&gt; 还会 &lt;em&gt;删除未跟踪的目录&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="2ed503241d84ef2925d73991bb5fc3ccdc6f37b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git clean -f -d -x $(git rev-parse --show-cdup)&lt;/code&gt; applies clean to the root directory, no matter where you call it within a repository directory tree. I use it all the time as it does not force you to leave the folder where you working now and allows to clean &amp;amp; commit right from the place where you are.</source>
          <target state="translated">&lt;code&gt;git clean -f -d -x $(git rev-parse --show-cdup)&lt;/code&gt; 将clean应用于根目录，无论您在存储库目录树中的何处调用它。 我一直使用它，因为它不会强迫您离开您现在使用的文件夹，并且可以从您所在的位置直接进行清理和提交。</target>
        </trans-unit>
        <trans-unit id="e4a62dd451d54ec2c9d98fbf018f72d98cdb79a3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git clean -fX&lt;/code&gt; removes ignored files</source>
          <target state="translated">&lt;code&gt;git clean -fX&lt;/code&gt; 删除忽略的文件</target>
        </trans-unit>
        <trans-unit id="0b171c41e7aa2d6a7ebe1fa6cc067cdf9aeb00cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git clean -fd&lt;/code&gt; removes directory</source>
          <target state="translated">&lt;code&gt;git clean -fd&lt;/code&gt; 删除目录</target>
        </trans-unit>
        <trans-unit id="d07b0c60b56c2f89ffc4b5b99092632f9b724d21" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git clean -fx&lt;/code&gt; removes ignored and un-ignored files</source>
          <target state="translated">&lt;code&gt;git clean -fx&lt;/code&gt; 删除被忽略和未被忽略的文件</target>
        </trans-unit>
        <trans-unit id="1225174a2a2abffedc7c2cf37b9eef78da42df98" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git-clean&lt;/code&gt; - Remove untracked files from the working tree</source>
          <target state="translated">&lt;code&gt;git-clean&lt;/code&gt; clean-从工作树中删除未跟踪的文件</target>
        </trans-unit>
        <trans-unit id="c9e0779f2d6e8f621be06fc249f303016c3aad86" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;gpristine&lt;/code&gt; hard reset the local changes, remove untracked directories, 
untracked files and &lt;em&gt;don't use the standard ignore rules read from .gitignore (per directory) and $GIT_DIR/info/exclude, but do still use the ignore rules given with -e options. This allows removing all untracked files, including build products. This can be used (possibly in conjunction with git reset) to create a pristine working directory to test a clean build&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;gpristine&lt;/code&gt; 硬重置本地更改，删除未跟踪的目录，未跟踪的文件，并且&lt;em&gt;不使用从.gitignore（每个目录）和$ GIT_DIR / info / exclude读取的标准忽略规则，但仍使用-e选项提供的忽略规则。&lt;/em&gt; &lt;em&gt;这允许删除所有未跟踪的文件，包括构建产品。&lt;/em&gt; &lt;em&gt;可以使用它（可能与git reset结合使用）创建一个原始的工作目录来测试一个干净的build&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="74b236a6e234cf1350d9af3faaaa3ca84402e491" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;1.&lt;/strong&gt;&lt;strong&gt;-d&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;1.&lt;/strong&gt;&lt;strong&gt;-d&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d08233db6862a17feb1997b9910ce3195dbf1c6e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;2. -f, --force&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;2. -f，--force&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="25045d3df5aff0b55caf157174f766d9501f41b0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;3. -i, --interactive&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;3. -i，--interactive&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="01e0f34f86b8234cee28e7e0653ea2b7646e0391" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;4. -n, --dry-run&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;4. -n，--dry-run&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ac304d1feab25bdb7e40682d3352a651b99034d3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;5. -q, --quiet&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;5. -q，--quiet&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="329af57da90bd2e1b4f721924916fe60037d4613" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;6. -e , --exclude=&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;6. -e，--exclude =&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="20eb9e362510213cd5d84384a0e5891329d20a8b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;7. -x&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;7. -x&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b82dcd5a8b651bd96a4f834e67f12a6180020e5d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;8. -X&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;8. -X&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fa49ea65aa07d04393c0da72249ee14cbdec5c29" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;-X&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;-X&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3df10d701d2ca9f180ba469d962e4eed4d54ed3c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;-d&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;-d&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4ef0aa9fde2cc3c92a29539c0fbeff28d1561d02" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;-f&lt;/code&gt;, &lt;code&gt;--force&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;-f&lt;/code&gt; ，-- force&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d2cf5b873fdfc0dae624388fe53183fefd4483a8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;-n&lt;/code&gt;, &lt;code&gt;--dry-run&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;-n&lt;/code&gt; ，-- &lt;code&gt;--dry-run&lt;/code&gt; &lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fb9ad3ef040b5b1baf95a7bffd14fa100cc53d1c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;-x&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;-x&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0b6f86cf0b1375c361afebbfeca7e41055d7a5b0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;User interactive approach:&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;用户互动方式：&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ae6c80c214fc813ff9eb9ae37bd66d56384b0c33" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Always use&lt;/strong&gt;&lt;code&gt;-n&lt;/code&gt; before running the actual command as it will show you what files would get removed.</source>
          <target state="translated">在运行实际命令之前，请&lt;strong&gt;始终使用&lt;/strong&gt; &lt;code&gt;-n&lt;/code&gt; ，因为它将显示将删除哪些文件。</target>
        </trans-unit>
        <trans-unit id="ffdab263c07c85624929243ad015561f1deecb22" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Available Options:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;可用选项：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3826df3b723ae26f22c2c13190a5adc9450c8637" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Beware!&lt;/strong&gt; Be sure to &lt;strong&gt;commit any needed changes&lt;/strong&gt; (even in non-untracked files) &lt;strong&gt;before performing this&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;谨防！&lt;/strong&gt; &lt;strong&gt;在执行此操作之前，&lt;/strong&gt;请确保&lt;strong&gt;提交所有必要的更改&lt;/strong&gt; （即使在未跟踪的文件中）。</target>
        </trans-unit>
        <trans-unit id="e591909e65e44db7e3f343b4d73bb6e0f9195fb3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Clean out git repository and all submodules recursively&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;递归清理git仓库和所有子模块&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7252d71fbd00904dd2ab1c736ae4f1cda781dc24" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Double check&lt;/strong&gt; before doing it as it will delete the files and folders without making any history...</source>
          <target state="translated">在执行此操作之前， &lt;strong&gt;请仔细检查&lt;/strong&gt; ，因为它会删除文件和文件夹而不会产生任何历史记录...</target>
        </trans-unit>
        <trans-unit id="4168878b06eaa6917a0f012585506612f5054ea6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Example:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a9108ede24ec6135336892fdeecab45ae62e7a84" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Explanation:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Explanation:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0627813abb3f85abd51bf4dc9ea4382836dfa698" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Links :&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;友情链接：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="998bea9f8169ec97ae2a691bc7d5dcb4df13f247" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;New interactive mode&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;新的互动模式&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c1600edccdcfa368dad597d738d0fb2a3ae5cd3b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;em&gt;Add &lt;strong&gt;-n&lt;/strong&gt; or &lt;strong&gt;--dry-run&lt;/strong&gt; to just check what it will do.&lt;/em&gt;</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt; &lt;em&gt;添加&lt;strong&gt;-n&lt;/strong&gt;或&lt;strong&gt;--dry-run&lt;/strong&gt;仅检查其作用。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7f2a5d05005cbe394442613972c8d4ea6cbed026" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt; the case difference on the &lt;code&gt;X&lt;/code&gt; for the two latter commands.</source>
          <target state="translated">&lt;strong&gt;请注意&lt;/strong&gt;后面两个命令在 &lt;code&gt;X&lt;/code&gt; 上的大小写差异。</target>
        </trans-unit>
        <trans-unit id="a8fe3cec22bbf9ce81918964dd2820c142ed2542" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;OK,&lt;/strong&gt; deleting &lt;strong&gt;unwanted untracked files and folders&lt;/strong&gt; are easy using &lt;code&gt;git&lt;/code&gt; in command line, just do it like this:</source>
          <target state="translated">&lt;strong&gt;好的，&lt;/strong&gt;在命令行中使用 &lt;code&gt;git&lt;/code&gt; 可以轻松删除&lt;strong&gt;不需要的未跟踪文件和文件夹&lt;/strong&gt; ，只需执行以下操作：</target>
        </trans-unit>
        <trans-unit id="b9f929ef9cedbfdfa6e6f5ba4a6a1b6863150dbb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Remove all extra folders and files in this repo + submodules&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;删除此repo +子模块中的所有其他文件夹和文件&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b97ccc1a2ee72810c2ea9f55e5270273eba7ac77" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Remove all extra folders and files in this repo but not its submodules&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;删除此存储库中的所有其他文件夹和文件，但不删除其子模块&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="25192fc7ddcd21dff67407f12e55fc4444994d99" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Remove extra folders + ignored files (but not newly added files)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;删除多余的文件夹+被忽略的文件（但不删除新添加的文件）&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2aacf88f4357e83cdc41b2949a990fae43818919" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Remove extra folders but not files (ex. build or logs folder)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;删除多余的文件夹，但不删除文件（例如build或logs文件夹）&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b4e4b014b1c68d632e7f6e2f89c37ae40f37524c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Removing sample.txt&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;删除sample.txt&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7300568fab47ae0a1ce9f8602c59436ee6b510f2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Suggested Method:&lt;/strong&gt;  Interative Mode by using &lt;code&gt;git clean -i&lt;/code&gt;
so we can have control over it. let see remaining available options.</source>
          <target state="translated">&lt;strong&gt;建议的方法：&lt;/strong&gt;使用 &lt;code&gt;git clean -i&lt;/code&gt; 进行交互模式，以便我们对其进行控制。 让我们看看剩余的可用选项。</target>
        </trans-unit>
        <trans-unit id="c35a7cc72a06f0634abe8ddb79bc1ba1960a6c95" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Would remove sample.txt&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;将删除sample.txt&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b1d52e1461980eeea7dd2c388cf355f31b827ffd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;git clean&lt;/strong&gt; - Remove untracked files from the working tree</source>
          <target state="translated">&lt;strong&gt;git&lt;/strong&gt; clean-从工作树中删除未跟踪的文件</target>
        </trans-unit>
        <trans-unit id="db15877443fa2f2d1522de9e2bf4b971d5e18fea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;oh-my-zsh&lt;/strong&gt; with &lt;strong&gt;zsh&lt;/strong&gt; provides those great aliases via the git plugin. They can be used in bash as well.</source>
          <target state="translated">带有&lt;strong&gt;zsh的&lt;/strong&gt; &lt;strong&gt;oh-my-zsh&lt;/strong&gt;通过git插件提供了这些出色的别名。 它们也可以用于bash中。</target>
        </trans-unit>
        <trans-unit id="3e10fa3725daa71e318c92f1e382ced7e1fc56e2" translate="yes" xml:space="preserve">
          <source>A better way is to use: git clean</source>
          <target state="translated">更好的方法是使用:git clean</target>
        </trans-unit>
        <trans-unit id="fe9de18a72ef4a0beb354c0f64075f36a28df745" translate="yes" xml:space="preserve">
          <source>A lifehack for such situation I just invented and tried (that works perfectly):</source>
          <target state="translated">针对这种情况,我刚刚发明并尝试了一种生活的方法(效果很好)。</target>
        </trans-unit>
        <trans-unit id="3edef6f7b59c26fc947e12403346e8ec6f2bab72" translate="yes" xml:space="preserve">
          <source>Again see the &lt;a href=&quot;http://git-scm.com/docs/git-clean&quot;&gt;&lt;code&gt;git-clean&lt;/code&gt;&lt;/a&gt; docs for more information.</source>
          <target state="translated">再次查看&lt;a href=&quot;http://git-scm.com/docs/git-clean&quot;&gt; &lt;code&gt;git-clean&lt;/code&gt; &lt;/a&gt;文档以获取更多信息。</target>
        </trans-unit>
        <trans-unit id="d8df13cdd881f013755e1d4316dd6938d7a85f91" translate="yes" xml:space="preserve">
          <source>Also in this case, &lt;code&gt;-f&lt;/code&gt; stands for force and &lt;code&gt;-d&lt;/code&gt; stands for directory...</source>
          <target state="translated">同样在这种情况下， &lt;code&gt;-f&lt;/code&gt; 代表强制， &lt;code&gt;-d&lt;/code&gt; 代表目录...</target>
        </trans-unit>
        <trans-unit id="b489241b3fab808421aeb93865ff8207792006bf" translate="yes" xml:space="preserve">
          <source>Also, replace the &lt;code&gt;-f&lt;/code&gt; argument with &lt;code&gt;-n&lt;/code&gt; to perform a &lt;code&gt;dry-run&lt;/code&gt; or &lt;code&gt;-i&lt;/code&gt; for interactive mode and it will tell you what will be removed.</source>
          <target state="translated">另外，将 &lt;code&gt;-f&lt;/code&gt; 参数替换为 &lt;code&gt;-n&lt;/code&gt; 以执行 &lt;code&gt;dry-run&lt;/code&gt; 或者将 &lt;code&gt;-i&lt;/code&gt; 替换为交互式模式，它将告诉您要删除的内容。</target>
        </trans-unit>
        <trans-unit id="9304e6bf4c3543883a2042f8480cbf7d0f0111fa" translate="yes" xml:space="preserve">
          <source>Also, you can use &lt;code&gt;-x&lt;/code&gt; flag for including the files which are ignored by git. This would be helpful if you want to delete everything.</source>
          <target state="translated">另外，您可以使用 &lt;code&gt;-x&lt;/code&gt; 标志来包含git忽略的文件。 如果要删除所有内容，这将很有帮助。</target>
        </trans-unit>
        <trans-unit id="c3a4e8c26a7e201ca1796172afe0d242bb8303d1" translate="yes" xml:space="preserve">
          <source>Alternatively</source>
          <target state="translated">Alternatively</target>
        </trans-unit>
        <trans-unit id="84728b60d32c439988dd77259a566417ebcec7d0" translate="yes" xml:space="preserve">
          <source>And adding &lt;code&gt;-i&lt;/code&gt; flag, makes git asking you for permission for deleting files one by one on the go.</source>
          <target state="translated">并添加 &lt;code&gt;-i&lt;/code&gt; 标志，使git询问您是否允许随时删除文件。</target>
        </trans-unit>
        <trans-unit id="fc6f22f358415029a4bab3e4b038d5c2074427e8" translate="yes" xml:space="preserve">
          <source>And combined way to delete untracked dir/files and ignored files.</source>
          <target state="translated">并结合方式删除未被跟踪的dirfiles和被忽略的文件。</target>
        </trans-unit>
        <trans-unit id="3e0eb79f908ec8f740f9fa7331c5220f78e3ad18" translate="yes" xml:space="preserve">
          <source>Be careful while running `git clean` command.</source>
          <target state="translated">运行 &quot;git clean &quot;命令时要小心。</target>
        </trans-unit>
        <trans-unit id="5a76ff079f12b1a74eb9b1c43645e96dd86361c1" translate="yes" xml:space="preserve">
          <source>Be quiet, only report errors, but not the files that are successfully removed.</source>
          <target state="translated">要安静,只能报错,不能报错,不能报成功的文件。</target>
        </trans-unit>
        <trans-unit id="a970e4d24368ec80a52531632e941bee5b58a319" translate="yes" xml:space="preserve">
          <source>Be sure that flags &lt;code&gt;-f&lt;/code&gt;, &lt;code&gt;-d&lt;/code&gt;, &lt;code&gt;-x&lt;/code&gt; match your needs:</source>
          <target state="translated">确保标志 &lt;code&gt;-f&lt;/code&gt; ， &lt;code&gt;-d&lt;/code&gt; ， &lt;code&gt;-x&lt;/code&gt; 满足您的需求：</target>
        </trans-unit>
        <trans-unit id="ba4d0b6277b4d8651f0563244eb65556e9a44fd9" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;git clean&lt;/code&gt; will only remove untracked files that are not ignored. Any file that matches a pattern in your .gitignore or other ignore files will not be removed. If you want to remove those files too, you can add a &lt;code&gt;-x&lt;/code&gt; to the clean command.</source>
          <target state="translated">默认情况下， &lt;code&gt;git clean&lt;/code&gt; 将仅删除未被忽略的未跟踪文件。 与您的.gitignore或其他忽略文件中的模式匹配的任何文件都不会被删除。 如果也要删除这些文件，则可以在clean命令中添加 &lt;code&gt;-x&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f1c87dfaee105599595109043d7898b5206e989e" translate="yes" xml:space="preserve">
          <source>Clean Step - &lt;strong&gt;beware: this will delete files&lt;/strong&gt;:</source>
          <target state="translated">清洁步骤- &lt;strong&gt;当心：这将删除文件&lt;/strong&gt; ：</target>
        </trans-unit>
        <trans-unit id="38d8bc1c18fe237ff5923fdf20c7ff8a302dc45d" translate="yes" xml:space="preserve">
          <source>Cleans the working tree by recursively removing files that are not under version control, &lt;strong&gt;starting from the current directory&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;从当前目录开始，&lt;/strong&gt;以递归方式删除不受版本控制的文件，从而清理工作树。</target>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Description</target>
        </trans-unit>
        <trans-unit id="8a190a462c45d47d231a38f49fbd7f2f651bc199" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t actually remove anything, just show what would be done.</source>
          <target state="translated">实际上不删除任何内容，只是显示将要执行的操作。</target>
        </trans-unit>
        <trans-unit id="592ac5698739501beb280e8c09e191b45525f651" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t use the standard ignore rules read from .gitignore (per
  directory) and &lt;code&gt;$GIT_DIR/info/exclude&lt;/code&gt;, but do still use the ignore
  rules given with &lt;code&gt;-e&lt;/code&gt; options. This allows removing all untracked files,
  including build products. This can be used (possibly in conjunction
  with git reset) to create a pristine working directory to test a clean
  build.</source>
          <target state="translated">不要使用从.gitignore（每个目录）和 &lt;code&gt;$GIT_DIR/info/exclude&lt;/code&gt; 读取的标准忽略规则，但仍要使用 &lt;code&gt;-e&lt;/code&gt; 选项提供的忽略规则。 这允许删除所有未跟踪的文件，包括构建产品。 可以使用它（可能与git reset结合使用）创建原始工作目录以测试干净的构建。</target>
        </trans-unit>
        <trans-unit id="090a3d0a6d55a2120c1e94017bed539936206cb1" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t use the standard ignore rules read from .gitignore (per directory) and $GIT_DIR/info/exclude, but do still use the ignore
   rules given with -e options. This allows removing all untracked files, including build products. This can be used (possibly in
   conjunction with git reset) to create a pristine working directory to test a clean build.</source>
          <target state="translated">不要使用从.gitignore（每个目录）和$ GIT_DIR / info / exclude读取的标准忽略规则，但仍要使用-e选项提供的忽略规则。 这允许删除所有未跟踪的文件，包括构建产品。 可以使用它（可能与git reset结合使用）创建原始工作目录以测试干净的构建。</target>
        </trans-unit>
        <trans-unit id="6ced447a0ccef8b9d5bd51b43aa690b514c9d9e1" translate="yes" xml:space="preserve">
          <source>EDIT2: &lt;code&gt;git stash save&lt;/code&gt; is deprecated in favor of &lt;code&gt;push&lt;/code&gt;. Thanks @script-wolf.</source>
          <target state="translated">EDIT2：不推荐使用 &lt;code&gt;git stash save&lt;/code&gt; ,而推荐使用 &lt;code&gt;push&lt;/code&gt; 。 谢谢@ script-wolf。</target>
        </trans-unit>
        <trans-unit id="25b497511a97b55b25a07bccb030302f7aa18643" translate="yes" xml:space="preserve">
          <source>EDIT: Also I found a way to show untracked file in a stash (e.g. &lt;code&gt;git show stash@{0}^3&lt;/code&gt;) &lt;a href=&quot;https://stackoverflow.com/a/12681856/338986&quot;&gt;https://stackoverflow.com/a/12681856/338986&lt;/a&gt;</source>
          <target state="translated">编辑：我也找到了一种方法来显示隐藏的未跟踪文件（例如 &lt;code&gt;git show stash@{0}^3&lt;/code&gt; ） &lt;a href=&quot;https://stackoverflow.com/a/12681856/338986&quot;&gt;https://stackoverflow.com/a/12681856/338986&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fc8b383c9472f4133ca234be53a8c0ec2f32066a" translate="yes" xml:space="preserve">
          <source>For a very large project you might want to run it a couple of times.</source>
          <target state="translated">对于一个非常大的项目,你可能会想运行几次。</target>
        </trans-unit>
        <trans-unit id="a9a6f512934b9e9061ab3a56083a7816ab6b68c5" translate="yes" xml:space="preserve">
          <source>For me only following worked:</source>
          <target state="translated">对我来说,只有以下几点起作用。</target>
        </trans-unit>
        <trans-unit id="6a5d1f6865cd5150a661d32e536a80a76baf3012" translate="yes" xml:space="preserve">
          <source>How do I use 'git reset --hard HEAD' to revert to a previous commit?</source>
          <target state="translated">如何使用'git reset --hard HEAD'恢复到之前的提交?</target>
        </trans-unit>
        <trans-unit id="081b31ee66011caf6a19bddd2a19ff044c4eeac3" translate="yes" xml:space="preserve">
          <source>How do you delete untracked local files from your current working tree?</source>
          <target state="translated">如何从当前工作树中删除未被跟踪的本地文件?</target>
        </trans-unit>
        <trans-unit id="8335f5e425ae34982cd1fe9959f4f9b10e207b2e" translate="yes" xml:space="preserve">
          <source>How to remove local (untracked) files from the current Git working tree</source>
          <target state="translated">如何从当前Git工作树中删除本地文件(未跟踪的)?</target>
        </trans-unit>
        <trans-unit id="d11fdad8fc441f590c72760be67d7f049c40ac4b" translate="yes" xml:space="preserve">
          <source>I also create the image below to make it more memorable, especially I have seen many people confuse &lt;code&gt;-f&lt;/code&gt; for cleaning folder sometimes or mix it up somehow!</source>
          <target state="translated">我还创建了下面的图像，使其更令人难忘，尤其是我看到许多人混淆 &lt;code&gt;-f&lt;/code&gt; 有时清理文件夹或以某种方式混淆它！</target>
        </trans-unit>
        <trans-unit id="c22560de75194a8d1f689d35361957562fd17125" translate="yes" xml:space="preserve">
          <source>I am surprised nobody mentioned this before:</source>
          <target state="translated">我很惊讶之前没有人提到这个。</target>
        </trans-unit>
        <trans-unit id="38b91cd88481477b0992675088e1151805744fdd" translate="yes" xml:space="preserve">
          <source>I have covered some basics here in my blog, &lt;a href=&quot;https://vaisakh.github.io/2017/02/14/git-intro-basic-commands.html&quot;&gt;git-intro-basic-commands&lt;/a&gt;</source>
          <target state="translated">我已经在我的博客&lt;a href=&quot;https://vaisakh.github.io/2017/02/14/git-intro-basic-commands.html&quot;&gt;git-intro-basic-commands中介绍&lt;/a&gt;了一些基础知识</target>
        </trans-unit>
        <trans-unit id="21fb57c2c17b8b7e6aed463b2f0ac4789e27c1f1" translate="yes" xml:space="preserve">
          <source>I like &lt;code&gt;git stash push -u&lt;/code&gt; because you can undo them all with &lt;code&gt;git stash pop&lt;/code&gt;.</source>
          <target state="translated">我喜欢 &lt;code&gt;git stash push -u&lt;/code&gt; ,因为您可以使用 &lt;code&gt;git stash pop&lt;/code&gt; 撤消它们。</target>
        </trans-unit>
        <trans-unit id="7a83ea73dd37fe9a9ac8b06b223d673e88238f23" translate="yes" xml:space="preserve">
          <source>I like to use &lt;code&gt;git stash&lt;/code&gt; command, later you can get stashed files and changes.
&lt;code&gt;git clean&lt;/code&gt; is also a good option but totally depends on your requirement.
here is the explanation of git stash and git clean,&lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Tools-Stashing-and-Cleaning&quot;&gt;7.3 Git Tools - Stashing and Cleaning&lt;/a&gt;</source>
          <target state="translated">我喜欢使用 &lt;code&gt;git stash&lt;/code&gt; 命令，以后可以获取隐藏文件和更改。 &lt;code&gt;git clean&lt;/code&gt; 也是一个不错的选择，但完全取决于您的要求。 这是git stash和git clean的说明， &lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Tools-Stashing-and-Cleaning&quot;&gt;7.3 Git工具-隐藏和清洁&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a61c80c3295e8ffd1bddabc9f569d809724a1c1f" translate="yes" xml:space="preserve">
          <source>I prefer this to 'git clean' because 'git clean' will delete files
ignored by git, so your next build will have to rebuild everything
and you may lose your IDE settings too.</source>
          <target state="translated">与其说是 &quot;git clean&quot;,不如说是 &quot;git clean&quot;,因为 &quot;git clean &quot;会删除被git忽略的文件,所以你的下一次构建将不得不重新构建一切,而且你可能会失去你的IDE设置。</target>
        </trans-unit>
        <trans-unit id="8bba395e9fb25ea42d05011ddb8f30a6c4997f12" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;clean.requireForce&lt;/code&gt; is set to &quot;true&quot; (the default) in your configuration, one needs to specify &lt;code&gt;-f&lt;/code&gt; otherwise nothing will actually happen.</source>
          <target state="translated">如果您在配置 &lt;code&gt;clean.requireForce&lt;/code&gt; 设置为&amp;ldquo; true&amp;rdquo;（默认设置），则需要指定 &lt;code&gt;-f&lt;/code&gt; ,否则实际上不会发生任何事情。</target>
        </trans-unit>
        <trans-unit id="27aabdb37af0432fadcd5ffecc44449505cac9be" translate="yes" xml:space="preserve">
          <source>If any optional &lt;code&gt;&amp;lt;path&amp;gt;...&lt;/code&gt; arguments are given, only those paths are affected.</source>
          <target state="translated">如果给出任何可选的 &lt;code&gt;&amp;lt;path&amp;gt;...&lt;/code&gt; 参数，则仅影响那些路径。</target>
        </trans-unit>
        <trans-unit id="ca0bf1f76700c07ea80b2ae0d66a11fe045d27fe" translate="yes" xml:space="preserve">
          <source>If file wasn't ignored and not yet checked-in then  it stays. Note the capital X.</source>
          <target state="translated">如果文件没有被忽略,还没有签到,那么它就会保留。请注意大写的X。</target>
        </trans-unit>
        <trans-unit id="e260ac28fbd02674a586da9a188ce001cb9eecdf" translate="yes" xml:space="preserve">
          <source>If needed to remove untracked files from particular subdirectory,</source>
          <target state="translated">如果需要从特定的子目录中删除未被跟踪的文件。</target>
        </trans-unit>
        <trans-unit id="754fbfa8cea73d7b9d6656e7d40cd36b33d3ae34" translate="yes" xml:space="preserve">
          <source>If the Git configuration variable clean.requireForce is not set to
  false, git clean will refuse to run unless given &lt;code&gt;-f&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt; or &lt;code&gt;-i&lt;/code&gt;.</source>
          <target state="translated">如果Git配置变量clean.requireForce未设置为false，除非给定 &lt;code&gt;-f&lt;/code&gt; ， &lt;code&gt;-n&lt;/code&gt; 或 &lt;code&gt;-i&lt;/code&gt; ，否则git clean将拒绝运行。</target>
        </trans-unit>
        <trans-unit id="242707623aae5f8bb3ccecd10afa24b00b26d4fd" translate="yes" xml:space="preserve">
          <source>If the Git configuration variable clean.requireForce is not set to false, git clean will refuse to run unless given -f, -n or
   -i.</source>
          <target state="translated">如果 Git 配置变量 clean.requireForce 未设置为 false,则 git clean 将拒绝运行,除非给出 -f、-n 或 -i。</target>
        </trans-unit>
        <trans-unit id="2ee3cd6157b586c292f5bebaf4742a1125d45d74" translate="yes" xml:space="preserve">
          <source>If untracked directory is a git repository of its own (e.g. submodule), you need to use &lt;code&gt;-f&lt;/code&gt; twice:</source>
          <target state="translated">如果未跟踪的目录是它自己的git存储库（例如，子模块），则需要两次使用 &lt;code&gt;-f&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="ddaa8eb84490ef1ecfb6e1a55d18ca3b6c59edcc" translate="yes" xml:space="preserve">
          <source>If you are not 100% sure that deleting your uncommitted work is safe, you could use stashing instead</source>
          <target state="translated">如果你不能百分之百确定删除未提交的工作是安全的,你可以用存储来代替。</target>
        </trans-unit>
        <trans-unit id="36dcbfc96818563f54fac10886429ec6381667cb" translate="yes" xml:space="preserve">
          <source>If you just want to delete the files listed as untracked by 'git status'</source>
          <target state="translated">如果你只是想删除通过 &quot;git状态 &quot;列出的未跟踪的文件</target>
        </trans-unit>
        <trans-unit id="8b008f30f86ee94d5a13d3cecd09ba7139209355" translate="yes" xml:space="preserve">
          <source>If you not sure and want to check things first, add &lt;code&gt;-n&lt;/code&gt; flag.</source>
          <target state="translated">如果不确定并想先检查一下，请添加 &lt;code&gt;-n&lt;/code&gt; 标志。</target>
        </trans-unit>
        <trans-unit id="0f6e5f19b1a5afda5c1449fc36242e65cb820536" translate="yes" xml:space="preserve">
          <source>If you want to &lt;strong&gt;delete&lt;/strong&gt;(directories) and files, you can delete only untracked directories and files like this:</source>
          <target state="translated">如果要&lt;strong&gt;删除&lt;/strong&gt; （目录）和文件，则只能删除未跟踪的目录和文件，如下所示：</target>
        </trans-unit>
        <trans-unit id="4f36449b364ff484c4a02190964b7fe4122e73b4" translate="yes" xml:space="preserve">
          <source>In addition to those found in .gitignore (per directory) and $GIT_DIR/info/exclude, also consider these patterns to be in the
   set of the ignore rules in effect.</source>
          <target state="translated">除了在.gitignore(每个目录)和$GIT_DIRinfoexclude中发现的那些模式外,还可以认为这些模式是在有效的忽略规则集中。</target>
        </trans-unit>
        <trans-unit id="b893078d9232f3e109a41b6d6ebe51b2d07315e2" translate="yes" xml:space="preserve">
          <source>In all other cases, I was getting message &lt;em&gt;&quot;Skipping Directory&quot;&lt;/em&gt; for some subdirectories.</source>
          <target state="translated">在其他所有情况下，我都收到一些子目录的&lt;em&gt;&amp;ldquo;跳过目录&amp;rdquo;&lt;/em&gt;消息。</target>
        </trans-unit>
        <trans-unit id="6e513fc79360d52998798eee704e12c54ed41d39" translate="yes" xml:space="preserve">
          <source>It will also clear your directory but give you flexibility to retrieve the files at any point in time using &lt;strong&gt;stash&lt;/strong&gt; with &lt;strong&gt;apply&lt;/strong&gt; or &lt;strong&gt;pop&lt;/strong&gt;. Then at later point you could clear your stash using:</source>
          <target state="translated">它还会清除您的目录，但可以让您灵活地在任何时候使用带有&lt;strong&gt;apply&lt;/strong&gt;或&lt;strong&gt;pop的&lt;/strong&gt; &lt;strong&gt;stash&lt;/strong&gt;来检索文件。 然后，您可以在以后使用以下方法清除存储：</target>
        </trans-unit>
        <trans-unit id="818bce931054af6e21ef60b1e85e7ad8e2358f51" translate="yes" xml:space="preserve">
          <source>It will output something like:</source>
          <target state="translated">它将输出类似于:</target>
        </trans-unit>
        <trans-unit id="355083de1b3e519b28ad884fe5846d74ccde9520" translate="yes" xml:space="preserve">
          <source>Normal &lt;code&gt;git clean&lt;/code&gt; command doesn't remove untracked files with my &lt;code&gt;git version 2.9.0.windows.1&lt;/code&gt;.</source>
          <target state="translated">普通的 &lt;code&gt;git clean&lt;/code&gt; 命令不会删除我的 &lt;code&gt;git version 2.9.0.windows.1&lt;/code&gt; 未跟踪文件。</target>
        </trans-unit>
        <trans-unit id="d7d70adae9e248dcbf5927b7eeba22fdf79a73fb" translate="yes" xml:space="preserve">
          <source>Normally, only files unknown to Git are removed, but if the &lt;code&gt;-x&lt;/code&gt; option is specified, ignored files are also removed. This can, for example, be useful to remove all build products.</source>
          <target state="translated">通常，仅删除Git未知的文件，但如果指定 &lt;code&gt;-x&lt;/code&gt; 选项，也会删除忽略的文件。 例如，这对于删除所有构建产品很有用。</target>
        </trans-unit>
        <trans-unit id="6bf5da9c080bee3a8142586c412aa39971137eee" translate="yes" xml:space="preserve">
          <source>Options</source>
          <target state="translated">Options</target>
        </trans-unit>
        <trans-unit id="f4bb9a18f09e2a84cc163ecae438e47b1c4edd13" translate="yes" xml:space="preserve">
          <source>Remove only files ignored by Git. This may be useful to rebuild everything from scratch, but keep manually created files.</source>
          <target state="translated">只删除被Git忽略的文件。这对于从头开始重建一切可能有用,但保留手动创建的文件。</target>
        </trans-unit>
        <trans-unit id="478b2510a9b32cfb4adf26e1a8d78520b35a469c" translate="yes" xml:space="preserve">
          <source>Remove untracked directories in addition to untracked files. If an
  untracked directory is managed by a different Git repository, it is
  not removed by default. Use &lt;code&gt;-f&lt;/code&gt; option twice if you really want to
  remove such a directory.</source>
          <target state="translated">除未跟踪的文件外，还删除未跟踪的目录。 如果未跟踪的目录由其他Git存储库管理，则默认情况下不会将其删除。 如果您确实要删除这样的目录，请使用 &lt;code&gt;-f&lt;/code&gt; 选项两次。</target>
        </trans-unit>
        <trans-unit id="99c804d5c0eaa814c037388cb990936343e9518f" translate="yes" xml:space="preserve">
          <source>Remove untracked directories in addition to untracked files. If an untracked directory is managed by a different Git repository,
   it is not removed by default. Use -f option twice if you really want to remove such a directory.</source>
          <target state="translated">除了未跟踪的文件外,还可以删除未跟踪的目录。如果一个未被跟踪的目录是由不同的 Git 仓库管理的,那么默认情况下不会被删除。如果真的要删除这样的目录,请使用 -f 选项两次。</target>
        </trans-unit>
        <trans-unit id="80dadf8fcd42d7c5ddbd03379233401ea5695869" translate="yes" xml:space="preserve">
          <source>Reset local repository branch to be just like remote repository HEAD</source>
          <target state="translated">重置本地存储库分支,使其与远程存储库的HEAD一样。</target>
        </trans-unit>
        <trans-unit id="bf9833b3864a606f143f671880d0d7c492524c3a" translate="yes" xml:space="preserve">
          <source>Show what would be done and clean files interactively. See &amp;ldquo;Interactive mode&amp;rdquo; for details.</source>
          <target state="translated">显示将要执行的操作并以交互方式清理文件。 有关详细信息，请参见&amp;ldquo;交互模式&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="d835cccb62bd8e11c7c7781ea51546dd0145d044" translate="yes" xml:space="preserve">
          <source>Simple Way to remove untracked files</source>
          <target state="translated">移除未被追踪的文件的简单方法</target>
        </trans-unit>
        <trans-unit id="229db1118475a8de7544cd247da0f8892998a352" translate="yes" xml:space="preserve">
          <source>So, if you want to delete files only, you can use &lt;code&gt;-f&lt;/code&gt; only:</source>
          <target state="translated">因此，如果只想删除文件，则只能使用 &lt;code&gt;-f&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="fd5af672dd9226255f29b30a83a865c6d3b6f65c" translate="yes" xml:space="preserve">
          <source>Step 1 is to show what will be deleted by using the &lt;code&gt;-n&lt;/code&gt; option:</source>
          <target state="translated">步骤1是显示使用 &lt;code&gt;-n&lt;/code&gt; 选项删除的内容：</target>
        </trans-unit>
        <trans-unit id="36c0630a340d2960affa1c4d2360b0e2c06793fb" translate="yes" xml:space="preserve">
          <source>Synopsis</source>
          <target state="translated">Synopsis</target>
        </trans-unit>
        <trans-unit id="d1a81156a427a3ba3ea08032dbccaa760fef0709" translate="yes" xml:space="preserve">
          <source>That being said, the extra hand holding of interactive commands can be tiring for experienced users.  These days I just use the already mentioned &lt;code&gt;git clean -fd&lt;/code&gt;</source>
          <target state="translated">话虽如此，交互式命令的额外手握可能会使有经验的用户感到厌烦。 这些天我只用已经提到过的 &lt;code&gt;git clean -fd&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1e16979dadae90503d2a8d2563cb926b66a51508" translate="yes" xml:space="preserve">
          <source>That stands for &lt;em&gt;interactive&lt;/em&gt; and you will get a quick overview of what is going to be deleted offering you the possibility to include/exclude the affected files. Overall, still faster than running the mandatory &lt;code&gt;--dry-run&lt;/code&gt; before the real cleaning.</source>
          <target state="translated">这表示&lt;em&gt;交互式&lt;/em&gt; ，您将快速了解要删除的内容，从而可以包含/排除受影响的文件。 总体而言，仍比真正清洁之前运行强制性 &lt;code&gt;--dry-run&lt;/code&gt; 更快。</target>
        </trans-unit>
        <trans-unit id="8ecaa8c7363592fdace347348dc5704a2b2c320c" translate="yes" xml:space="preserve">
          <source>The following command will clean out
  the current git repository and all its submodules recursively:</source>
          <target state="translated">下面的命令将递归地清理出当前git仓库及其所有子模块。</target>
        </trans-unit>
        <trans-unit id="d3c7f411ae2d15e9739d393e258ed44b43398355" translate="yes" xml:space="preserve">
          <source>There are other flags as well available, just check &lt;code&gt;git clean --help&lt;/code&gt;.</source>
          <target state="translated">还有其他可用的标志，只需检查 &lt;code&gt;git clean --help&lt;/code&gt; 即可 。</target>
        </trans-unit>
        <trans-unit id="c5dc8cefe79b062a5cba4e594ef334d2c4eb9e90" translate="yes" xml:space="preserve">
          <source>There is also interactive mode available &lt;code&gt;-i&lt;/code&gt; with the clean command</source>
          <target state="translated">还有带clean命令的交互式模式 &lt;code&gt;-i&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c60b8250b722eb69193b0a2fe349cca854f990c0" translate="yes" xml:space="preserve">
          <source>This gets you in same state as fresh clone.</source>
          <target state="translated">这让你的状态和新鲜的克隆人一样。</target>
        </trans-unit>
        <trans-unit id="2cb8460a11f39262d84f8fd686f68a30cd1990b0" translate="yes" xml:space="preserve">
          <source>This is what I always use:</source>
          <target state="translated">这是我经常使用的方法。</target>
        </trans-unit>
        <trans-unit id="bd71539cc5afeadc964f0d5993385fea74630620" translate="yes" xml:space="preserve">
          <source>This removes untracked files, including directories &lt;code&gt;(-d)&lt;/code&gt; and files ignored by &lt;code&gt;git (-x)&lt;/code&gt;.</source>
          <target state="translated">这将删除未跟踪的文件，包括目录 &lt;code&gt;(-d)&lt;/code&gt; 和 &lt;code&gt;git (-x)&lt;/code&gt; 忽略的文件。</target>
        </trans-unit>
        <trans-unit id="06f1bd9f4fe0dfb218e10f796b7563b4634dfd34" translate="yes" xml:space="preserve">
          <source>This will show you the list of files that will be deleted. Now to actually delete those files use this command:</source>
          <target state="translated">这将显示要删除的文件列表。现在要实际删除这些文件,请使用这个命令。</target>
        </trans-unit>
        <trans-unit id="a6b0b319ceb25080098e11794cb448bd66afa4c5" translate="yes" xml:space="preserve">
          <source>To delete everything listed in the output of the previous command:</source>
          <target state="translated">要删除上一条命令输出中列出的所有内容。</target>
        </trans-unit>
        <trans-unit id="3ff0a08ec2f239c3866d1e2fb210a0746cae14d0" translate="yes" xml:space="preserve">
          <source>To know what will be deleted before actually deleting:</source>
          <target state="translated">在实际删除之前,要知道要删除的内容。</target>
        </trans-unit>
        <trans-unit id="5faaa7eae6c6f7a19b9a4b7821c4628e8b7d69e1" translate="yes" xml:space="preserve">
          <source>To remove all untracked files, The simple
way is to &lt;strong&gt;add all of them first&lt;/strong&gt; and &lt;strong&gt;reset the repo&lt;/strong&gt; as below</source>
          <target state="translated">要删除所有未跟踪的文件，最简单的方法是先&lt;strong&gt;添加&lt;/strong&gt;所有未跟踪文件，然后按如下所示&lt;strong&gt;重置存储库&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ebff74a2a3032771203ee8bf63589faff1d048da" translate="yes" xml:space="preserve">
          <source>To remove directories, run &lt;code&gt;git clean -f -d&lt;/code&gt; or &lt;code&gt;git clean -fd&lt;/code&gt;</source>
          <target state="translated">要删除目录，请运行 &lt;code&gt;git clean -f -d&lt;/code&gt; 或 &lt;code&gt;git clean -fd&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="43e5095e742f2512dc6627c9ece53a6400b1e013" translate="yes" xml:space="preserve">
          <source>To remove ignored and non-ignored files, run &lt;code&gt;git clean -f -x&lt;/code&gt; or &lt;code&gt;git clean -fx&lt;/code&gt;</source>
          <target state="translated">要删除被忽略和未被忽略的文件，请运行 &lt;code&gt;git clean -f -x&lt;/code&gt; 或 &lt;code&gt;git clean -fx&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="14620a566b22360746cf44846bd2000a6573ce83" translate="yes" xml:space="preserve">
          <source>To remove ignored files, run &lt;code&gt;git clean -f -X&lt;/code&gt; or &lt;code&gt;git clean -fX&lt;/code&gt;</source>
          <target state="translated">要删除忽略的文件，请运行 &lt;code&gt;git clean -f -X&lt;/code&gt; 或 &lt;code&gt;git clean -fX&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ab95ec59cf77f165602d98d8afeccd692525ebd1" translate="yes" xml:space="preserve">
          <source>To remove the untracked files you should first use command to view the files that will be affected by cleaning</source>
          <target state="translated">要删除未被跟踪的文件,你应该首先使用命令查看将受清理影响的文件。</target>
        </trans-unit>
        <trans-unit id="996de08bbccbc8b245338231646f0f8f8fb991f9" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;-q&lt;/code&gt; if you don't want to see any report after successful deletion.</source>
          <target state="translated">如果您不想在成功删除后看到任何报告，请使用 &lt;code&gt;-q&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="303116fd3c2f98d3c8f28d835f9d096de52954bc" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;git clean -f -d&lt;/code&gt; to make sure that &lt;strong&gt;directories&lt;/strong&gt; are also removed.</source>
          <target state="translated">使用 &lt;code&gt;git clean -f -d&lt;/code&gt; 确保&lt;strong&gt;目录&lt;/strong&gt;也被删除。</target>
        </trans-unit>
        <trans-unit id="f9b4b01b269b34589eb4eac0c47e3a3e7b0d503a" translate="yes" xml:space="preserve">
          <source>We can easily removed local untracked files from the current git working tree by using below git comments.</source>
          <target state="translated">我们可以通过使用下面的git注释,轻松地从当前git工作树中删除本地未被跟踪的文件。</target>
        </trans-unit>
        <trans-unit id="b88a96d49a5e68a33d925ec449b13f60e31821cc" translate="yes" xml:space="preserve">
          <source>You can then check if your files are really gone with &lt;code&gt;git status&lt;/code&gt;.</source>
          <target state="translated">然后，您可以检查您的文件是否真的以 &lt;code&gt;git status&lt;/code&gt; 消失了。</target>
        </trans-unit>
        <trans-unit id="4db1272a1c7187287693eb58c3731401daa08567" translate="yes" xml:space="preserve">
          <source>You will have to toss in a &lt;code&gt;-d&lt;/code&gt; if you also want to take care of empty folders. At the end, it makes  for a nice alias:</source>
          <target state="translated">如果您还想处理空文件夹，则必须折腾 &lt;code&gt;-d&lt;/code&gt; 。 最后，它提供了一个很好的别名：</target>
        </trans-unit>
        <trans-unit id="3aa67f9a6628d26864d04c147f1b94f395c846bc" translate="yes" xml:space="preserve">
          <source>after this you will have modified files only in &lt;code&gt;git status&lt;/code&gt;.</source>
          <target state="translated">之后，您将只能以 &lt;code&gt;git status&lt;/code&gt; 修改文件。</target>
        </trans-unit>
        <trans-unit id="acc851f29df6fed8949d25c2cd53062a360ba4a0" translate="yes" xml:space="preserve">
          <source>can be used all above options in combination as</source>
          <target state="translated">可将上述所有选项组合使用为</target>
        </trans-unit>
        <trans-unit id="c2d07dc7c3fe9d372a3232a60824048bb1d17b7d" translate="yes" xml:space="preserve">
          <source>check git manual for more help</source>
          <target state="translated">查看git手册以获得更多帮助</target>
        </trans-unit>
        <trans-unit id="479c512e5d47cbf05ade4d80d1a2130fd5935511" translate="yes" xml:space="preserve">
          <source>uggested Command for &lt;strong&gt;Removing Untracked Files from git docs&lt;/strong&gt; is &lt;strong&gt;git clean&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;从git docs删除未跟踪文件的&lt;/strong&gt;建议命令是&lt;strong&gt;git clean&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4e0e31dec679361e40e8eeda86527b35cb5b41e0" translate="yes" xml:space="preserve">
          <source>when you want to remove directories and files, this will delete only untracked directories and files</source>
          <target state="translated">当你想删除目录和文件时,这将只删除未被跟踪的目录和文件。</target>
        </trans-unit>
        <trans-unit id="c6ed0daecfba6ba6da45e6968091b4ff08a40eed" translate="yes" xml:space="preserve">
          <source>will remove the untracked files from the current git</source>
          <target state="translated">将删除当前git中未被跟踪的文件。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
