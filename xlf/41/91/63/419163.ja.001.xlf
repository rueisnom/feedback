<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/419163">
    <body>
      <group id="419163">
        <trans-unit id="be437cc206c4a893439095f2b33790a548b29bdd" translate="yes" xml:space="preserve">
          <source>(&lt;strong&gt;instead&lt;/strong&gt;) If your module is not the main program but was imported by another one, then &lt;code&gt;__name__&lt;/code&gt; will be &lt;code&gt;&quot;foo&quot;&lt;/code&gt;, not &lt;code&gt;&quot;__main__&quot;&lt;/code&gt;, and it'll skip the body of the &lt;code&gt;if&lt;/code&gt; statement.</source>
          <target state="translated">（ &lt;strong&gt;代わりに&lt;/strong&gt; ）モジュールがメインプログラムではなく、別のプログラムによってインポートされた場合、 &lt;code&gt;__name__&lt;/code&gt; は &lt;code&gt;&quot;__main__&quot;&lt;/code&gt; ではなく&quot; &lt;code&gt;&quot;foo&quot;&lt;/code&gt; &quot;になり、 &lt;code&gt;if&lt;/code&gt; ステートメントの本文はスキップされます。</target>
        </trans-unit>
        <trans-unit id="87357c2f1577f162cab1176800cb98e9ae9f1df0" translate="yes" xml:space="preserve">
          <source>(As an aside, &lt;a href=&quot;https://stackoverflow.com/questions/23000075/purpose-of-if-name-main&quot;&gt;this question&lt;/a&gt; contains an answer by @kindall that finally helped me to understand - the why, not the how. Unfortunately it's been marked as a duplicate of &lt;a href=&quot;https://stackoverflow.com/questions/419163/what-does-if-name-main-do&quot;&gt;this one&lt;/a&gt;, which I think is a mistake.)</source>
          <target state="translated">（余談ですが、 &lt;a href=&quot;https://stackoverflow.com/questions/23000075/purpose-of-if-name-main&quot;&gt;この質問に&lt;/a&gt;は、@ kindallによる回答が含まれています。これは、なぜではなく、なぜかを理解するのに役立ちました。残念ながら、 この質問の重複としてマークされています。 &lt;a href=&quot;https://stackoverflow.com/questions/419163/what-does-if-name-main-do&quot;&gt;これ&lt;/a&gt;は間違いだと思います。）</target>
        </trans-unit>
        <trans-unit id="99ee0547f367b7fbe108d02a06130f410fdeed36" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://docs.python.org/2/library/__main__.html&quot;&gt;This idiom can also be found in the Python documentation in an explanation of the &lt;code&gt;__main__&lt;/code&gt; module.&lt;/a&gt; That text states:</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/2/library/__main__.html&quot;&gt;このイディオムは、Pythonのドキュメントの &lt;code&gt;__main__&lt;/code&gt; モジュールの説明にもあります。&lt;/a&gt; そのテキストは述べています：</target>
        </trans-unit>
        <trans-unit id="d07b4aba29e620e47507cb0c3f0488674297686a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'__main__'&lt;/code&gt; is the name of the scope in which top-level code executes. A module&amp;rsquo;s &lt;code&gt;__name__&lt;/code&gt; is set equal to &lt;code&gt;'__main__'&lt;/code&gt; when read from standard input, a script, or from an interactive prompt.</source>
          <target state="translated">&lt;code&gt;'__main__'&lt;/code&gt; は、トップレベルのコードが実行されるスコープの名前です 。 モジュールの &lt;code&gt;__name__&lt;/code&gt; は、標準入力、スクリプト、または対話型プロンプトから読み取られると、 &lt;code&gt;'__main__'&lt;/code&gt; に等しく設定されます。</target>
        </trans-unit>
        <trans-unit id="fafdac69f04bc2657902a7797c051653adc55033" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__main__&lt;/code&gt;: Like other programming languages, Python too has an execution entry point, i.e., main. &lt;code&gt;'__main__'&lt;/code&gt;&lt;em&gt;is the name of the scope in which top-level code executes&lt;/em&gt;. Basically you have two ways of using a Python module: Run it directly as a script, or import it. When a module is run as a script, its &lt;code&gt;__name__&lt;/code&gt; is set to &lt;code&gt;__main__&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;__main__&lt;/code&gt; ：他のプログラミング言語と同様に、Pythonにも実行エントリポイント、つまりmainがあります。 &lt;code&gt;'__main__'&lt;/code&gt; &lt;em&gt;は、トップレベルのコードが実行されるスコープの名前&lt;/em&gt; です 。 基本的に、Pythonモジュールを使用する方法は2つあります。スクリプトとして直接実行するか、インポートします。 モジュールがスクリプトとして実行されると、その &lt;code&gt;__name__&lt;/code&gt; は &lt;code&gt;__main__&lt;/code&gt; に設定されます。</target>
        </trans-unit>
        <trans-unit id="39eb9da36f02c4419a8bdef9e03ec68236ed2afc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__name__&lt;/code&gt; can also be used in modules to define the name of a module</source>
          <target state="translated">&lt;code&gt;__name__&lt;/code&gt; をモジュールで使用して、モジュールの名前を定義することもできます</target>
        </trans-unit>
        <trans-unit id="0be6ddf60538888ac5a053e568c5a35b99e293a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__name__&lt;/code&gt; is a &lt;a href=&quot;https://wiki.python.org/moin/DunderAlias&quot;&gt;DunderAlias&lt;/a&gt; - can be thought of as a global variable (accessible from modules) and works in a similar way to &lt;a href=&quot;https://stackoverflow.com/questions/13881395/in-python-what-is-a-global-statement&quot;&gt;&lt;code&gt;global&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;__name__&lt;/code&gt; は&lt;a href=&quot;https://wiki.python.org/moin/DunderAlias&quot;&gt;DunderAlias-&lt;/a&gt;グローバル変数（モジュールからアクセス可能）と考えることができ、globalと同様に機能します。</target>
        </trans-unit>
        <trans-unit id="8f7940fd7af049d3ce98c54968886dbc4470c59c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__name__&lt;/code&gt; is a global variable (in Python, global actually means on the &lt;a href=&quot;https://docs.python.org/tutorial/modules.html#modules&quot;&gt;module level&lt;/a&gt;) that exists in all namespaces. It is typically the module's name (as a &lt;code&gt;str&lt;/code&gt; type).</source>
          <target state="translated">&lt;code&gt;__name__&lt;/code&gt; は、すべての名前空間に存在するグローバル変数（Pythonでは、グローバルは実際には&lt;a href=&quot;https://docs.python.org/tutorial/modules.html#modules&quot;&gt;モジュールレベルを&lt;/a&gt;意味します ）です。 これは通常、モジュールの名前です（ &lt;code&gt;str&lt;/code&gt; タイプとして）。</target>
        </trans-unit>
        <trans-unit id="2cf51e459a190c18f6d42769d3718fcae45ce2cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__name__&lt;/code&gt; is always equal to &lt;code&gt;__main__&lt;/code&gt; whenever that file is &lt;strong&gt;run directly&lt;/strong&gt; showing that this is the main file.</source>
          <target state="translated">&lt;code&gt;__name__&lt;/code&gt; は、そのファイルが&lt;strong&gt;直接実行され&lt;/strong&gt;てこれがメインファイルであることを示す場合は常に &lt;code&gt;__main__&lt;/code&gt; と常に等しくなります。</target>
        </trans-unit>
        <trans-unit id="9bd80d28fa314832c308431bb2b4654a9578e9a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__name__&lt;/code&gt; is an implicit variable in all .py modules; when a.py is imported, the value of &lt;code&gt;__name__&lt;/code&gt; of a.py module is set to its file name &quot;a&quot;; when a.py is run directly using &quot;python a.py&quot;, which means a.py is the entry point, then the value of &lt;code&gt;__name__&lt;/code&gt; of a.py module is set to a string &lt;code&gt;__main__&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;__name__&lt;/code&gt; はすべての.pyモジュールの暗黙的な変数です 。 a.pyがインポートされると、a.pyモジュールの &lt;code&gt;__name__&lt;/code&gt; の値はファイル名 &quot;a&quot;に設定されます。 「python a.py」を使用してa.pyを直接実行すると、a.pyがエントリポイントであることを意味し、a.pyモジュールの &lt;code&gt;__name__&lt;/code&gt; の値は文字列 &lt;code&gt;__main__&lt;/code&gt; に設定されます。</target>
        </trans-unit>
        <trans-unit id="ee91c879b2d309081471328a6d2e05241079dfda" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__name__&lt;/code&gt;: Every module in Python has a special attribute called &lt;code&gt;__name__&lt;/code&gt;.
It is a built-in variable that returns the name of the module.</source>
          <target state="translated">&lt;code&gt;__name__&lt;/code&gt; ：Pythonのすべてのモジュールには、 &lt;code&gt;__name__&lt;/code&gt; と呼ばれる特別な属性があります。 これは、モジュールの名前を返す組み込み変数です。</target>
        </trans-unit>
        <trans-unit id="78840eb1470db249624c988b713afc3e97a69c78" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;if __name__ == &quot;__main__&quot;:&lt;/code&gt; is basically the top-level script environment, and it specifies the interpreter that ('I have the highest priority to be executed first').</source>
          <target state="translated">&lt;code&gt;if __name__ == &quot;__main__&quot;:&lt;/code&gt; 基本的に最上位のスクリプト環境であり、インタープリターを指定します（「最初に実行するのが最も優先順位が高い」）。</target>
        </trans-unit>
        <trans-unit id="2340c4517f7704fbff95ab3e637235230b8ccc11" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;if __name__ == &quot;__main__&quot;&lt;/code&gt; is the part that runs when the script is run from (say) the command line using a command like &lt;code&gt;python myscript.py&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;if __name__ == &quot;__main__&quot;&lt;/code&gt; が &lt;code&gt;python myscript.py&lt;/code&gt; のようなコマンドを使用してコマンドラインから（たとえば）スクリプトを実行したときに実行される部分である場合</target>
        </trans-unit>
        <trans-unit id="018c83f2b5e1ed2102eb4e0da64ee296a8027e39" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import a&lt;/code&gt; action actually runs all that can be ran in &quot;a&quot;</source>
          <target state="translated">アクションを &lt;code&gt;import a&lt;/code&gt; 、「a」で実行できるすべてのアクションが実際に実行されます</target>
        </trans-unit>
        <trans-unit id="df08731afb7c7ed2393aaa3f368ad0bb925ea7df" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Before explaining anything about &lt;code&gt;if __name__ == '__main__'&lt;/code&gt; it is important to understand what &lt;code&gt;__name__&lt;/code&gt; is and what it does.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;if __name__ == '__main__'&lt;/code&gt; かについて説明する前に、__ &lt;code&gt;__name__&lt;/code&gt; とは何か、それが何をするかを理解することが重要です 。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="79da7cc29ac2426a88a714fbfaad47448858fdb1" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Now we know the behaviour of &lt;code&gt;__name__&lt;/code&gt; things become clearer:&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;これで、 &lt;code&gt;__name__&lt;/code&gt; の動作がより明確になることがわかりました。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e6728d8cd0ad927190e1963daa4daa6ea31c0c2f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;example:&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;example:&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="986b24c1aac5848a15ecb03780859084b31b46f1" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;somefile.py:&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;somefile.py:&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="bf1a9df34745e53acb5ed83d94dcb4372a21cee0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;test_file.py:&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;test_file.py:&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="bf539f837085192b477057fecbecb42c7bb86636" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;test_file.py&lt;/em&gt;:</source>
          <target state="translated">&lt;em&gt;test_file.py&lt;/em&gt;:</target>
        </trans-unit>
        <trans-unit id="9b690b9867f89d5298a09814a6babe01c9bf70c4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;1st possibility: Import &lt;code&gt;my_test_module.py&lt;/code&gt; in another module&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;1番目の可能性： &lt;code&gt;my_test_module.py&lt;/code&gt; を別のモジュールにインポートする&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7ac4feb6fd281aa9afa7bdda0ab2e439dc46fad0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;2nd possibility: Invoke &lt;code&gt;my_test_module.py&lt;/code&gt; as a script&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;2番目の可能性： &lt;code&gt;my_test_module.py&lt;/code&gt; をスクリプトとして呼び出す&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7cc1f82081899627449ae26dee60c95d25b23c96" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Summary&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;Summary&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="49a14964903307d811b50a88b1ff45287fbcbe6d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Always&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Always&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c0f57c51335086529afb8880f52e400970642376" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Executing only if the file is a module or package:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ファイルがモジュールまたはパッケージの場合のみ実行：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="58b371b66c6af23b26eadee978e7565caf07d812" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;In short&lt;/strong&gt;, use this '&lt;code&gt;if __name__ == &quot;main&quot;&lt;/code&gt; ' block to prevent (certain) code from being run when the module is imported.</source>
          <target state="translated">&lt;strong&gt;つまり&lt;/strong&gt; 、 ' &lt;code&gt;if __name__ == &quot;main&quot;&lt;/code&gt; 'ブロックを使用して、モジュールのインポート時に（特定の）コードが実行されないようにします。</target>
        </trans-unit>
        <trans-unit id="25c82edc0cf6b044fa8902f9ff4abb5f517318e8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Interpreter:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Interpreter:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a9ed28c097ebb85433364ac1f4e044499a4d8c6c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Module or package:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;モジュールまたはパッケージ：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e1693186367529d23d67840c6cb92fd7b90836c1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Modules:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Modules:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bca1585410631753dd411aa2077f9de811966cd9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Now to answer &lt;code&gt;if __name__ == '__main__'&lt;/code&gt;:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;if __name__ == '__main__'&lt;/code&gt; に答えます。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="230a303facf1a2101a405f86dcdb8fcb53a82aea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Only When Your Module Is Imported by Another&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;モジュールが別のモジュールによってインポートされた場合のみ&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="98cb0f812771c34b1e9af7b910b6edb79e3ec992" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Only When Your Module Is the Main Program&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;モジュールがメインプログラムの場合のみ&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ecabc97610f091b28f299c3556ae2c2c8ba7ed78" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Practice:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Practice:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e25c5146cc441b2968a8c82ef2238dbdcc07728f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Running one condition if the file is the main one and another if it is not:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ファイルがメインの場合は1つの条件を実行し、そうでない場合は別の条件を実行します。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="15379d1a1ff9a18caec0d1609f2db4600cd6fe75" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Script:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Script:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="00e3df3306b151747da81b3135f8996102b6398c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Variants:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Variants:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a427fb5acc312c062284737d9919ea80c80c0203" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;What is &lt;code&gt;__name__&lt;/code&gt;?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;__name__&lt;/code&gt; とは？&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8f2823989afe8101f68c8c884942631f433adaa0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;When Your Module Is Imported By Another&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;モジュールが別のモジュールによってインポートされたとき&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6f40fc5f6f2fe7685a294e653a18be70c2bdc7f4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;When Your Module Is the Main Program&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;モジュールがメインプログラムの場合&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8da700b6247cf29cd4fd28b742f87b159469d2d7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Where:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Where:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e57f67deaea1f928eb43934d908849cb2ac5b721" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;a&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;a&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="433798c30d6b2ba5b1b05b05cff30873a8571d47" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;b&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;b&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="02f26958ff8bbfffbe238764a41e6feacde136f7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;fibo.py (a module named &lt;code&gt;fibo&lt;/code&gt;)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;fibo.py（fiboという名前のモジュール）&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cf22c4f6ccae5c5a45f16a6c1118de9c5f963fef" translate="yes" xml:space="preserve">
          <source>A Better Way</source>
          <target state="translated">より良い方法</target>
        </trans-unit>
        <trans-unit id="cf8a62e672a3b4293103f254c2a62d76c46512dd" translate="yes" xml:space="preserve">
          <source>A side-effect is that you automatically sign on to a methodology that supports multiple entry points. You can run your program using &lt;code&gt;main()&lt;/code&gt; as the entry point, &lt;em&gt;but you don't have to&lt;/em&gt;. While &lt;code&gt;setup.py&lt;/code&gt; expects &lt;code&gt;main()&lt;/code&gt;, other tools use alternate entry points. For example, to run your file as a &lt;code&gt;gunicorn&lt;/code&gt; process, you define an &lt;code&gt;app()&lt;/code&gt; function instead of a &lt;code&gt;main()&lt;/code&gt;. Just as with &lt;code&gt;setup.py&lt;/code&gt;, &lt;code&gt;gunicorn&lt;/code&gt; imports your code so you don't want it do do anything while it's being imported (because of the import lock issue).</source>
          <target state="translated">副作用は、複数のエントリポイントをサポートする方法に自動的にサインオンすることです。 &lt;code&gt;main()&lt;/code&gt; をエントリポイントとして使用してプログラムを実行できます&lt;em&gt;が、そうする必要はありません&lt;/em&gt; 。 &lt;code&gt;setup.py&lt;/code&gt; は &lt;code&gt;main()&lt;/code&gt; を想定していますが、他のツールは代替エントリポイントを使用しています。 たとえば、ファイルを &lt;code&gt;gunicorn&lt;/code&gt; プロセスとして実行するには、 &lt;code&gt;main()&lt;/code&gt; ではなく &lt;code&gt;app()&lt;/code&gt; 関数を定義します。 &lt;code&gt;setup.py&lt;/code&gt; と &lt;code&gt;gunicorn&lt;/code&gt; 、 gunicornはコードをインポートするため、インポート中にコードが何もしないようにする必要があります（インポートロックの問題のため）。</target>
        </trans-unit>
        <trans-unit id="1279ac465ae03ccecc8242e951637177d836eac0" translate="yes" xml:space="preserve">
          <source>After the special variables are set up, the interpreter executes all the code in the module, one statement at a time. You may want to open another window on the side with the code sample so you can follow along with this explanation.</source>
          <target state="translated">特殊変数を設定した後、インタープリタはモジュール内のすべてのコードを一文ずつ実行します。コードサンプルの横に別のウィンドウを開いておくと、この説明についていくことができるかもしれません。</target>
        </trans-unit>
        <trans-unit id="383d69461af4204128d7a2e22e0747b27e8c41c3" translate="yes" xml:space="preserve">
          <source>Again, there will be exceptions, but common practice is that &lt;code&gt;main()&lt;/code&gt; doesn't usually get called externally. So you may be wondering one more thing: if we're not calling &lt;code&gt;main()&lt;/code&gt;, why are we calling the script at all? It's because many people structure their scripts with standalone functions that are built to be run independent of the rest of the code in the file. They're then later called somewhere else in the body of the script. Which brings me to this:</source>
          <target state="translated">繰り返しになりますが、例外はありますが、通常、 &lt;code&gt;main()&lt;/code&gt; は通常、外部から呼び出されません。 では、もう1つ疑問に思っているかもしれません。main &lt;code&gt;main()&lt;/code&gt; 呼び出さない場合、なぜスクリプトをまったく呼び出さないのでしょうか。 これは、多くの人々が、ファイル内の残りのコードとは独立して実行されるように構築されたスタンドアロン関数を使用してスクリプトを構成しているためです。 その後、スクリプトの本文の別の場所で呼び出されます。 これは私にこれをもたらします：</target>
        </trans-unit>
        <trans-unit id="a358e3aa692468b145f1d8ad7d489a6ccc1f8b13" translate="yes" xml:space="preserve">
          <source>All the answers have pretty much explained the functionality. But I will provide one example of its usage which might help clearing out the concept further.</source>
          <target state="translated">すべての回答で機能について説明してきました。しかし、概念をさらに明確にするのに役立つかもしれない、その使用例の一つを提供します。</target>
        </trans-unit>
        <trans-unit id="728913bf30e6213619a10923f8ca08b92f0ccf99" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;https://docs.python.org/3/tutorial/controlflow.html#if-statements&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt; is a flow control statement that contains the block of code will execute if the value given is true. We have seen that &lt;code&gt;__name__&lt;/code&gt; can take either 
&lt;code&gt;__main__&lt;/code&gt; or the file name it has been imported from.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3/tutorial/controlflow.html#if-statements&quot;&gt; &lt;code&gt;if&lt;/code&gt; &lt;/a&gt;は、指定された値がtrueの場合に実行されるコードブロックを含むフロー制御ステートメントです。 &lt;code&gt;__name__&lt;/code&gt; は &lt;code&gt;__main__&lt;/code&gt; またはインポート元のファイル名のいずれかを取ることができることを確認しました。</target>
        </trans-unit>
        <trans-unit id="291a6a1c87e677da65912996bc98ea09be8c889c" translate="yes" xml:space="preserve">
          <source>An Even Better Way</source>
          <target state="translated">より良い方法</target>
        </trans-unit>
        <trans-unit id="e25027686192c6d115ffa987e895d2c366f4813e" translate="yes" xml:space="preserve">
          <source>And a second file &quot;xy.py&quot;:</source>
          <target state="translated">そして2つ目のファイル「xy.py」。</target>
        </trans-unit>
        <trans-unit id="56bea24f0fbd1f255ecadf46a21ba6a136330f7a" translate="yes" xml:space="preserve">
          <source>And the output from executing script2 is:</source>
          <target state="translated">そして、script2を実行したときの出力は</target>
        </trans-unit>
        <trans-unit id="32c90a0b6a16423e14ed51492f9d35d3262ee3dc" translate="yes" xml:space="preserve">
          <source>And then you'll have to remember whether or not you've commented out your test function call. And this extra complexity would mean you're likely to forget, making your development process more troublesome.</source>
          <target state="translated">そして、テスト関数の呼び出しをコメントアウトしたかどうかを覚えておかなければなりません。そして、この余分な複雑さは、忘れてしまう可能性が高く、開発プロセスをより面倒なものにしてしまうことを意味します。</target>
        </trans-unit>
        <trans-unit id="27665df0153065e46daf1f28871bd9475bf8e1d5" translate="yes" xml:space="preserve">
          <source>Another benefit of using this construct: you can also import your code as a module in another script and then run the main function if and when your program decides:</source>
          <target state="translated">この構成を使用するもう一つの利点は、別のスクリプトでコードをモジュールとしてインポートして、プログラムが決定した場合にメイン関数を実行することもできます。</target>
        </trans-unit>
        <trans-unit id="e24f293208b0bd554685671142f6ee40f5264006" translate="yes" xml:space="preserve">
          <source>Another one.</source>
          <target state="translated">もう一人。</target>
        </trans-unit>
        <trans-unit id="490e331532fa57020b75e3d7497ad0ed1e28417b" translate="yes" xml:space="preserve">
          <source>Any other script that's called from this &lt;code&gt;&quot;__main__&quot;&lt;/code&gt; script is assigned its filename as its &lt;code&gt;__name__&lt;/code&gt; (e.g., &lt;code&gt;__name__ == &quot;ab.py&quot;&lt;/code&gt;). Hence, the line &lt;code&gt;if __name__ == &quot;__main__&quot;:&lt;/code&gt; is the interpreter's test to determine if it's interpreting/parsing the 'home' script that was initially executed, or if it's temporarily peeking into another (external) script. This gives the programmer flexibility to have the script behave differently if it's executed directly vs. called externally.</source>
          <target state="translated">この &lt;code&gt;&quot;__main__&quot;&lt;/code&gt; スクリプトから呼び出される他のスクリプトには、 &lt;code&gt;__name__ == &quot;ab.py&quot;&lt;/code&gt; としてファイル名が割り当てられます（例： __name__ == &quot;ab.py&quot; ）。 したがって、行 &lt;code&gt;if __name__ == &quot;__main__&quot;:&lt;/code&gt; は、最初に実行された「ホーム」スクリプトを解釈/解析しているか、または一時的に別の（外部）スクリプトを調べているかを判断するインタープリターのテストです。 これにより、スクリプトを直接実行する場合と外部から呼び出す場合とで、スクリプトの動作を変える柔軟性がプログラマーに与えられます。</target>
        </trans-unit>
        <trans-unit id="4f021478ef2f8fb352704d122ccd48a0f448bb10" translate="yes" xml:space="preserve">
          <source>As an example, consider the following module &lt;code&gt;my_test_module.py&lt;/code&gt;:</source>
          <target state="translated">例として、次のモジュール &lt;code&gt;my_test_module.py&lt;/code&gt; を考えます。</target>
        </trans-unit>
        <trans-unit id="c8214b3e3fc0c1096a5057a6fbcda3ca94b4ab14" translate="yes" xml:space="preserve">
          <source>As by default (when module running as main, not imported) the &lt;code&gt;__name__&lt;/code&gt; variable is set to &lt;code&gt;&quot;__main__&quot;&lt;/code&gt;, and when it'll be imported the &lt;code&gt;__name__&lt;/code&gt; variable will get a different value, most probably the name of the module (&lt;code&gt;'M'&lt;/code&gt;).
This is helpful in running different variants of a modules together, and separating their specific input &amp;amp; output statements and also if there are any test-cases.</source>
          <target state="translated">デフォルトのように（モジュールがメインとして実行され、インポートされない場合）、 &lt;code&gt;__name__&lt;/code&gt; 変数は &lt;code&gt;&quot;__main__&quot;&lt;/code&gt; に設定され、インポートされると、 &lt;code&gt;__name__&lt;/code&gt; 変数は異なる値を取得します。おそらくモジュールの名前（ &lt;code&gt;'M'&lt;/code&gt; ）。 これは、モジュールのさまざまなバリアントを一緒に実行し、それらの特定の入出力ステートメントを分離する場合や、テストケースがある場合にも役立ちます。</target>
        </trans-unit>
        <trans-unit id="0fb36a6c33279c346eb468f0e09c25e124f94cda" translate="yes" xml:space="preserve">
          <source>As the only special case, however, in whatever Python process you run, as in mycode.py:</source>
          <target state="translated">ただし、唯一の特殊なケースとして、mycode.pyのように、どのようなPythonプロセスでも実行します。</target>
        </trans-unit>
        <trans-unit id="77a8033bf10bed893a83d034163981dde9b5ee97" translate="yes" xml:space="preserve">
          <source>As you can see, &lt;code&gt;__name__&lt;/code&gt; tells us which code is the 'main' module.
This is great, because you can just write code and not have to worry about structural issues like in C/C++, where, if a file does not implement a 'main' function then it cannot be compiled as an executable and if it does, it cannot then be used as a library.</source>
          <target state="translated">ご覧のように、 &lt;code&gt;__name__&lt;/code&gt; はどのコードが「メイン」モジュールであるかを示します。 これは素晴らしいことです。なぜなら、コードを書くだけで済み、C / C ++のような構造上の問題を心配する必要がないためです。ファイルが「main」関数を実装していない場合、実行可能ファイルとしてコンパイルできません。その後、ライブラリとして使用することはできません。</target>
        </trans-unit>
        <trans-unit id="c45bdc9c773c22c178338f1dc79c2aa63246ed33" translate="yes" xml:space="preserve">
          <source>As you can see, when a file is executed, Python sets &lt;code&gt;globals()['__name__']&lt;/code&gt; in this file to &lt;code&gt;&quot;__main__&quot;&lt;/code&gt;. This time, the &lt;code&gt;if&lt;/code&gt; statement evaluates to &lt;code&gt;True&lt;/code&gt; and is being run.</source>
          <target state="translated">ご覧のとおり、ファイルが実行されると、Pythonはこのファイルの &lt;code&gt;globals()['__name__']&lt;/code&gt; を &lt;code&gt;&quot;__main__&quot;&lt;/code&gt; に設定します。 今回は、 &lt;code&gt;if&lt;/code&gt; ステートメントが &lt;code&gt;True&lt;/code&gt; に評価され、実行されます。</target>
        </trans-unit>
        <trans-unit id="fa35fc2b3ffb5707c6ed36201d14709b2795177a" translate="yes" xml:space="preserve">
          <source>As you can see, when a module is imported, Python sets &lt;code&gt;globals()['__name__']&lt;/code&gt; in this module to the module's name. Also, upon import all the code in the module is being run. As the &lt;code&gt;if&lt;/code&gt; statement evaluates to &lt;code&gt;False&lt;/code&gt; this part is not executed.</source>
          <target state="translated">ご覧のように、モジュールがインポートされると、Pythonはこのモジュールの &lt;code&gt;globals()['__name__']&lt;/code&gt; をモジュールの名前に設定します。 また、インポート時にモジュール内のすべてのコードが実行されます。 &lt;code&gt;if&lt;/code&gt; ステートメントが &lt;code&gt;False&lt;/code&gt; と評価されるため、この部分は実行されません。</target>
        </trans-unit>
        <trans-unit id="4174aeb05b05eec8583dcae607865c6ef32ba122" translate="yes" xml:space="preserve">
          <source>Assume that you have two Python files, a.py and b.py. Now, a.py imports b.py. We run the a.py file, where the &quot;import b.py&quot; code is executed first. Before the rest of the a.py code runs, the code in the file b.py must run completely.</source>
          <target state="translated">2つのPythonファイル、a.pyとb.pyがあるとします。さて、a.pyはb.pyをインポートします。a.pyファイルを実行すると、&quot;import b.py &quot;コードが最初に実行されます。a.pyの残りのコードが実行される前に、b.pyファイルのコードが完全に実行されなければなりません。</target>
        </trans-unit>
        <trans-unit id="53de5b46d0fbb20fff33ad741960e992c53e5836" translate="yes" xml:space="preserve">
          <source>Based on the mechanism how python sets the variable &lt;code&gt;__name__&lt;/code&gt; for each module, do you know how to achieve point 3? The answer is fairly easy, right? Put a if condition: &lt;code&gt;if __name__ == &quot;__main__&quot;: ...&lt;/code&gt;; you can even put if &lt;code&gt;__name__ == &quot;a&quot;&lt;/code&gt; depending on your functional need</source>
          <target state="translated">Pythonが各モジュールの変数 &lt;code&gt;__name__&lt;/code&gt; を設定するメカニズムに基づいて、ポイント3を達成する方法を知っていますか？ 答えは簡単ですよね？ if条件を入れます： &lt;code&gt;if __name__ == &quot;__main__&quot;: ...&lt;/code&gt; ; &lt;code&gt;__name__ == &quot;a&quot;&lt;/code&gt; 場合でも、必要に応じて配置できます</target>
        </trans-unit>
        <trans-unit id="b5daba4bc12144be47ac4ef97123506a5d670ee9" translate="yes" xml:space="preserve">
          <source>Because of point 1, you may not want everything to be run in &quot;a&quot; when importing it</source>
          <target state="translated">ポイント1のため、インポート時にすべてを &quot;a &quot;で実行させたくない場合があります。</target>
        </trans-unit>
        <trans-unit id="5555032fd1fd8c47f02216cf05cff7797235c4eb" translate="yes" xml:space="preserve">
          <source>Before the interpreter executes the source code file though, it defines a few special variables for that file; &lt;strong&gt;__name__&lt;/strong&gt; is one of those special variables that Python automatically defines for each source code file.</source>
          <target state="translated">ただし、インタープリターはソースコードファイルを実行する前に、そのファイルのいくつかの特別な変数を定義します。 &lt;strong&gt;__name__&lt;/strong&gt;は、Pythonが各ソースコードファイルに対して自動的に定義する特殊変数の1つです。</target>
        </trans-unit>
        <trans-unit id="be4403cc17466eedfa891d4a51f7740fa3d7f3f3" translate="yes" xml:space="preserve">
          <source>Being a variable means that it's value &lt;em&gt;can&lt;/em&gt; be overwritten (&quot;can&quot; does not mean &quot;should&quot;), overwriting the value of &lt;code&gt;__name__&lt;/code&gt; will result in a lack of readability.  So do not do it, for any reason.  If you need a variable define a new variable.</source>
          <target state="translated">変数であることは、その値&lt;em&gt;が&lt;/em&gt;上書きされる&lt;em&gt;可能性&lt;/em&gt;があることを意味し（「できる」は「必要がある」ことを意味しない）、 &lt;code&gt;__name__&lt;/code&gt; の値を上書きすると、読みにくくなります。 したがって、何らかの理由でそれを行わないでください。 変数が必要な場合は、新しい変数を定義します。</target>
        </trans-unit>
        <trans-unit id="cdba82558e6d2b296c8fda06454da814e1ab4ab2" translate="yes" xml:space="preserve">
          <source>Beyond those examples, it's elegant that running a script in Python is just setting up a few magic variables and importing the script. &quot;Running&quot; the script is a side effect of importing the script's module.</source>
          <target state="translated">それらの例を超えて、Pythonでスクリプトを実行するのは、いくつかの魔法の変数を設定してスクリプトをインポートするだけというのがエレガントです。スクリプトを &quot;実行 &quot;することは、スクリプトのモジュールをインポートすることの副作用です。</target>
        </trans-unit>
        <trans-unit id="7fdb9a68214237799e539012c1ae04b1ee6fcbff" translate="yes" xml:space="preserve">
          <source>Blocks A and B are run when we are running &quot;x.py&quot;.</source>
          <target state="translated">ブロックAとブロックBは、&quot;x.py &quot;を実行しているときに実行されます。</target>
        </trans-unit>
        <trans-unit id="51aacee3ee9f4b0785c1a298e8721c7f3d008776" translate="yes" xml:space="preserve">
          <source>But inside the primary module (or an interactive Python session, i.e. the interpreter's Read, Eval, Print Loop, or REPL) you are running everything from its &lt;code&gt;&quot;__main__&quot;&lt;/code&gt;.</source>
          <target state="translated">ただし、プライマリモジュール（またはインタラクティブなPythonセッション、つまりインタープリターのRead、Eval、Print Loop、REPL）内では、 &lt;code&gt;&quot;__main__&quot;&lt;/code&gt; からすべてを実行しています。</target>
        </trans-unit>
        <trans-unit id="3d45165ec85f4c41aac136977806fa7b3e1b0399" translate="yes" xml:space="preserve">
          <source>But just block A (and not B) is run when we are running another module, &quot;y.py&quot; for example, in which x.y is imported and the code is run from there (like when a function in &quot;x.py&quot; is called from y.py).</source>
          <target state="translated">しかし、ブロックA(Bではなく)は、別のモジュール、例えば &quot;y.py &quot;を実行しているときに実行され、その中でx.yがインポートされ、そこからコードが実行されます(&quot;x.py &quot;の関数が &quot;y.py &quot;から呼び出されたときのように)。</target>
        </trans-unit>
        <trans-unit id="187017f79b4f4176019be635feccedac47d394a8" translate="yes" xml:space="preserve">
          <source>But that's a script that probably can't have its functions called externally, because if it did it would immediately start calculating and assigning variables. And chances are if you're trying to re-use a function, your new script is related closely enough to the old one that there will be conflicting variables.</source>
          <target state="translated">しかし、これはスクリプトの関数を外部から呼び出すことができないスクリプトです。そして、関数を再利用しようとしている場合、新しいスクリプトは古いスクリプトと密接に関連しているため、相反する変数が存在する可能性があります。</target>
        </trans-unit>
        <trans-unit id="e0cc7be78b4f7426e808a9f14bb2ee02b52a60bf" translate="yes" xml:space="preserve">
          <source>But the code works without it</source>
          <target state="translated">しかし、コードはそれがなくても動作します。</target>
        </trans-unit>
        <trans-unit id="b868b03c6a857fb43254a438d5d2b52f62b19ea2" translate="yes" xml:space="preserve">
          <source>Call the class from other files. You just have to import it in the calling program.</source>
          <target state="translated">他のファイルからクラスを呼び出す。呼び出し元のプログラムでインポートするだけです。</target>
        </trans-unit>
        <trans-unit id="d1249e34e446972c34012a866f67bc184db7bc52" translate="yes" xml:space="preserve">
          <source>Code Sample</source>
          <target state="translated">コードサンプル</target>
        </trans-unit>
        <trans-unit id="75e291169a2ebb63c935a5de7382990c0513d618" translate="yes" xml:space="preserve">
          <source>Consider:</source>
          <target state="translated">Consider:</target>
        </trans-unit>
        <trans-unit id="9274899889be8b8adc4e3be4ea8d4a133c134b2d" translate="yes" xml:space="preserve">
          <source>Create a file, &lt;strong&gt;a.py&lt;/strong&gt;:</source>
          <target state="translated">ファイル&lt;strong&gt;a.pyを&lt;/strong&gt;作成します。</target>
        </trans-unit>
        <trans-unit id="56a0a9523b0c4b5eb5e2bbdb33ad60b126caa07f" translate="yes" xml:space="preserve">
          <source>Create another file, &lt;strong&gt;b.py&lt;/strong&gt;, in the same directory:</source>
          <target state="translated">同じディレクトリに別のファイル&lt;strong&gt;b.pyを&lt;/strong&gt;作成します。</target>
        </trans-unit>
        <trans-unit id="cd3b4d3abc33414ae3e100a1d6cbfe6b75ea5eb4" translate="yes" xml:space="preserve">
          <source>Create the following files.</source>
          <target state="translated">以下のファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="28d96b6441a5da8450600f4898f133fbdd6961e4" translate="yes" xml:space="preserve">
          <source>Developing and Testing Your Code</source>
          <target state="translated">コードの開発とテスト</target>
        </trans-unit>
        <trans-unit id="6bc05812a294f6f7a5f9e19db22d8cd3b2afc410" translate="yes" xml:space="preserve">
          <source>End of file; back to &lt;code&gt;&quot;__main__&quot;&lt;/code&gt;!</source>
          <target state="translated">ファイルの終わり。 &lt;code&gt;&quot;__main__&quot;&lt;/code&gt; 戻る！</target>
        </trans-unit>
        <trans-unit id="ccf898dbe57906e5594bcd719f8b93726090fd0d" translate="yes" xml:space="preserve">
          <source>Every module in python has a attribute called &lt;code&gt;__name__&lt;/code&gt;. The value of &lt;code&gt;__name__&lt;/code&gt;  attribute is  &lt;code&gt;__main__&lt;/code&gt;  when the module is run directly, like &lt;code&gt;python my_module.py&lt;/code&gt;. Otherwise (like when you say &lt;code&gt;import my_module&lt;/code&gt;) the value of &lt;code&gt;__name__&lt;/code&gt;  is the name of the module.</source>
          <target state="translated">Pythonのすべてのモジュールには、 &lt;code&gt;__name__&lt;/code&gt; という属性があります。 &lt;code&gt;python my_module.py&lt;/code&gt; のように、モジュールが直接実行される場合、 __ &lt;code&gt;__name__&lt;/code&gt; 属性の値は &lt;code&gt;__main__&lt;/code&gt; です 。 それ以外の場合（たとえば、 &lt;code&gt;import my_module&lt;/code&gt; と言う場合）、 __name__の値はモジュールの名前です。</target>
        </trans-unit>
        <trans-unit id="8ea353689f62515305875bd4c1491c1b1eda4969" translate="yes" xml:space="preserve">
          <source>Executing the Module's Code</source>
          <target state="translated">モジュールのコードを実行する</target>
        </trans-unit>
        <trans-unit id="decbc65feed3492d925a3828afa0685ee965a44f" translate="yes" xml:space="preserve">
          <source>Food for Thought</source>
          <target state="translated">思考の糧</target>
        </trans-unit>
        <trans-unit id="c01b0b737be74a6ef3efec2d9c67ec6b0e73c2dd" translate="yes" xml:space="preserve">
          <source>For the latter case, the class should contain a public static void main() method. In Python this purpose is served by the globally defined label &lt;code&gt;'__main__'&lt;/code&gt;.</source>
          <target state="translated">後者の場合、クラスにはpublic static void main（）メソッドが含まれている必要があります。 Pythonでは、この目的はグローバルに定義されたラベル &lt;code&gt;'__main__'&lt;/code&gt; によって提供されます。</target>
        </trans-unit>
        <trans-unit id="06c6abe53de8158ff545ff3025465ac568502266" translate="yes" xml:space="preserve">
          <source>Function &lt;code&gt;x()&lt;/code&gt;; ok, printing '&lt;em&gt;peripheral task: might be useful in other projects&lt;/em&gt;'.</source>
          <target state="translated">関数 &lt;code&gt;x()&lt;/code&gt; ; わかりました、「 &lt;em&gt;周辺タスク：他のプロジェクトで役立つかもしれません&lt;/em&gt; 」を出力します。</target>
        </trans-unit>
        <trans-unit id="270272d52b278ed4834707720d02142b04dac683" translate="yes" xml:space="preserve">
          <source>Given the following code, what does the &lt;code&gt;if __name__ == &quot;__main__&quot;:&lt;/code&gt; do?</source>
          <target state="translated">次のコードの &lt;code&gt;if __name__ == &quot;__main__&quot;:&lt;/code&gt; は何をしますか？</target>
        </trans-unit>
        <trans-unit id="c532f4344993da004ef0d886409dd1dc176dd817" translate="yes" xml:space="preserve">
          <source>Hope this helps out.</source>
          <target state="translated">これが助けになることを願っています。</target>
        </trans-unit>
        <trans-unit id="7cf7df778e073d4ee9549c9276978c839886daaf" translate="yes" xml:space="preserve">
          <source>However, if you want to import the module to another script:</source>
          <target state="translated">ただし、別のスクリプトにモジュールをインポートしたい場合には</target>
        </trans-unit>
        <trans-unit id="3f7f6f7cdf15bc15aa54e3347e678918567e405d" translate="yes" xml:space="preserve">
          <source>However, if your Python script is used by a module, any code outside of the &lt;code&gt;if&lt;/code&gt; statement will be executed, so &lt;code&gt;if \__name__ == &quot;\__main__&quot;&lt;/code&gt; is used just to check if the program is used as a module or not, and therefore decides whether to run the code.</source>
          <target state="translated">ただし、Pythonスクリプトがモジュールで使用されている &lt;code&gt;if&lt;/code&gt; 、 ifステートメント以外のコードが実行されるため &lt;code&gt;if \__name__ == &quot;\__main__&quot;&lt;/code&gt; を使用して、プログラムがモジュールとして使用されているかどうかを確認し、したがって、コードを実行するかどうかを決定します。</target>
        </trans-unit>
        <trans-unit id="27aee883b9125fa742bdc6ce62419f671fc09b30" translate="yes" xml:space="preserve">
          <source>I am not saying you should use this in production code, but it serves to illustrate that there is nothing &quot;magical&quot; about &lt;code&gt;if __name__ == '__main__'&lt;/code&gt;. It is a good convention for invoking a main function in Python files.</source>
          <target state="translated">これを本番コードで使用するべきだと言っているわけではありませんが &lt;code&gt;if __name__ == '__main__'&lt;/code&gt; 「魔法」がないことを示すのに役立ちます。 これは、Pythonファイルでmain関数を呼び出すのに適した規則です。</target>
        </trans-unit>
        <trans-unit id="7aaee90df97cdf574f54c44ac544ddfd2ecf3202" translate="yes" xml:space="preserve">
          <source>I think it's best to break the answer in depth and in simple words:</source>
          <target state="translated">答えを深く、簡単な言葉で割るのが一番だと思います。</target>
        </trans-unit>
        <trans-unit id="2d610a68610206f4422d124c53fd2b4ef28bb011" translate="yes" xml:space="preserve">
          <source>I've been reading so much throughout the answers on this page. I would say, if you know the thing, for sure you will understand those answers, otherwise, you are still confused.</source>
          <target state="translated">私は、このページの回答を通して多くのことを読んできました。私は、あなたが物事を知っている場合は、確かに、あなたはそれらの答えを理解するだろう、と言いたいのですが、そうでない場合は、あなたはまだ混乱しています。</target>
        </trans-unit>
        <trans-unit id="7dc8666b8e0d5305ca6686fcdd3a64aa30613f45" translate="yes" xml:space="preserve">
          <source>If Python is loading this source code file as the main program (i.e. the file you run), then it sets the special &lt;strong&gt;__name__&lt;/strong&gt; variable for this file to have a value &lt;strong&gt;&quot;__main__&quot;&lt;/strong&gt;.</source>
          <target state="translated">Pythonがこのソースコードファイルをメインプログラム（つまり、実行するファイル）としてロードしている場合、このファイルの特別な&lt;strong&gt;__name__&lt;/strong&gt;変数に値&lt;strong&gt;&quot;__main__&quot;を設定し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="a009492026900b4a9397225067c6a9f84f8e1216" translate="yes" xml:space="preserve">
          <source>If indeed &lt;code&gt;__name__&lt;/code&gt; does take the value of &lt;code&gt;__main__&lt;/code&gt; then whatever is in that block of code will execute.</source>
          <target state="translated">実際に &lt;code&gt;__name__&lt;/code&gt; が &lt;code&gt;__main__&lt;/code&gt; の値をとる場合、そのコードブロック内のすべてが実行されます。</target>
        </trans-unit>
        <trans-unit id="0a6d69f64768205bc73fd5ba1367e74b8059c5c0" translate="yes" xml:space="preserve">
          <source>If the python interpreter is running&amp;nbsp;a particular module then &lt;code&gt;__name__&lt;/code&gt; global  variable will have value &lt;code&gt;&quot;__main__&quot;&lt;/code&gt;</source>
          <target state="translated">Pythonインタープリターが特定のモジュールを実行している場合、 &lt;code&gt;__name__&lt;/code&gt; グローバル変数の値は &lt;code&gt;&quot;__main__&quot;&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="b1094aa47aa3aeccd6ed85b8ebb5ed271222d0e3" translate="yes" xml:space="preserve">
          <source>If this .py are run by &lt;code&gt;python this_py.py&lt;/code&gt; under shell, or double clicked in Windows. the code under &quot;the if statement&quot; will be executed.</source>
          <target state="translated">この.pyがシェルで &lt;code&gt;python this_py.py&lt;/code&gt; によって実行されている場合、またはWindowsでダブルクリックされている場合。 「ifステートメント」の下のコードが実行されます。</target>
        </trans-unit>
        <trans-unit id="f0f1e75c2a123bfd0fe539932a26c8d0e246a7f1" translate="yes" xml:space="preserve">
          <source>If this .py file are imported by other .py files, the code under &quot;the if statement&quot; will not be executed.</source>
          <target state="translated">この.pyファイルを他の.pyファイルでインポートした場合、&quot;if文 &quot;の下のコードは実行されません。</target>
        </trans-unit>
        <trans-unit id="cfc7c4aaf15b28c6320a80c22273eb5bfeb2a46e" translate="yes" xml:space="preserve">
          <source>If this is being imported from another module, &lt;strong&gt;__name__&lt;/strong&gt; will be set to that module's name.</source>
          <target state="translated">これが別のモジュールからインポートされている場合、 &lt;strong&gt;__ name__&lt;/strong&gt;はそのモジュールの名前に設定されます。</target>
        </trans-unit>
        <trans-unit id="6523f8ca1b9a6c1da707b351f493c4cbbace2647" translate="yes" xml:space="preserve">
          <source>If we put the code we want to exercise as we develop and test in a function like this and then do our check for &lt;code&gt;'__main__'&lt;/code&gt; immediately after:</source>
          <target state="translated">次のような関数で開発およびテストするときに実行するコードを配置し、直後に &lt;code&gt;'__main__'&lt;/code&gt; のチェックを実行します。</target>
        </trans-unit>
        <trans-unit id="bc80bf0204f13ba7089b5451f461bfc665cec29b" translate="yes" xml:space="preserve">
          <source>If we run the code directly via &lt;code&gt;python test.py&lt;/code&gt;, the module name is &lt;code&gt;__main__&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;python test.py&lt;/code&gt; を介してコードを直接実行する場合、モジュール名は &lt;code&gt;__main__&lt;/code&gt; です 。</target>
        </trans-unit>
        <trans-unit id="a6516beb3b9f8bebd5a8fe5d91c615ccfb9500a4" translate="yes" xml:space="preserve">
          <source>If you are running your module (the source file) as the main program, e.g.</source>
          <target state="translated">モジュール(ソースファイル)をメインプログラムとして実行している場合、例えば</target>
        </trans-unit>
        <trans-unit id="5a002ca7d32e704fd426536fc54e7e1e47ad2e8b" translate="yes" xml:space="preserve">
          <source>If you import this file say A to file B  and execute the file B then &lt;code&gt;if __name__ == &quot;__main__&quot;&lt;/code&gt; in file A becomes false, so it prints  &lt;strong&gt;You can't see me&lt;/strong&gt;</source>
          <target state="translated">このファイルをインポートしてファイルBにAと言ってファイルBを実行すると、ファイルAの &lt;code&gt;if __name__ == &quot;__main__&quot;&lt;/code&gt; がfalseになると、印刷され&lt;strong&gt;ます。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bae9f62ff08151418abbbc49ef9673f76cd6210a" translate="yes" xml:space="preserve">
          <source>If you run &lt;code&gt;two.py&lt;/code&gt; instead:</source>
          <target state="translated">代わりに &lt;code&gt;two.py&lt;/code&gt; を実行する場合：</target>
        </trans-unit>
        <trans-unit id="3d5150bf1d7adcfd96cab36821f53eb6a118618d" translate="yes" xml:space="preserve">
          <source>If your module is the main program, then it will see that &lt;code&gt;__name__&lt;/code&gt; was indeed set to &lt;code&gt;&quot;__main__&quot;&lt;/code&gt; and it calls the two functions, printing the strings &lt;code&gt;&quot;Function A&quot;&lt;/code&gt; and &lt;code&gt;&quot;Function B 10.0&quot;&lt;/code&gt;.</source>
          <target state="translated">モジュールがメインプログラムの場合、 &lt;code&gt;__name__&lt;/code&gt; が実際に &lt;code&gt;&quot;__main__&quot;&lt;/code&gt; に設定されていることがわかり、文字列 &lt;code&gt;&quot;Function A&quot;&lt;/code&gt; および &lt;code&gt;&quot;Function B 10.0&quot;&lt;/code&gt; を出力する2つの関数が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="dec279dce56fe81437675634947d0898c2cd9a40" translate="yes" xml:space="preserve">
          <source>If your script is being imported into another module, its various function and class definitions will be imported and its top-level code will be executed, but the code in the then-body of the &lt;code&gt;if&lt;/code&gt; clause above won't get run as the condition is not met. As a basic example, consider the following two scripts:</source>
          <target state="translated">スクリプトが別のモジュールにインポートされている場合、そのさまざまな関数とクラスの定義がインポートされ、そのトップレベルのコードが実行されますが、上記の &lt;code&gt;if&lt;/code&gt; 句のthen本体のコードは条件として実行されません満たされていません。 基本的な例として、次の2つのスクリプトを考えます。</target>
        </trans-unit>
        <trans-unit id="47cbbcfd6a2d88e3b7665ea5155dcef87bbe0234" translate="yes" xml:space="preserve">
          <source>Import and open file with the &lt;code&gt;__name__ == &quot;ab.py&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;__name__ == &quot;ab.py&quot;&lt;/code&gt; ファイルをインポートして開きます。</target>
        </trans-unit>
        <trans-unit id="4339fb8da56f030c085b801561fcd6353668defe" translate="yes" xml:space="preserve">
          <source>In other words, the code within the &lt;code&gt;if&lt;/code&gt; block will be executed only when the code runs directly. Here &lt;code&gt;directly&lt;/code&gt; means &lt;code&gt;not imported&lt;/code&gt;.</source>
          <target state="translated">つまり、 &lt;code&gt;if&lt;/code&gt; ブロック内のコードは、コードが直接実行されたときにのみ実行されます。 ここでは &lt;code&gt;directly&lt;/code&gt; &lt;code&gt;not imported&lt;/code&gt; ことを意味します。</target>
        </trans-unit>
        <trans-unit id="7ef3470680942e6fd3926f3ffbec1e8810ecf8fb" translate="yes" xml:space="preserve">
          <source>In splitting out independent functions, you gain the ability to re-use your previous work by calling them into another script. For example, &quot;example.py&quot; might import &quot;xy.py&quot; and call &lt;code&gt;x()&lt;/code&gt;, making use of the 'x' function from &quot;xy.py&quot;. (Maybe it's capitalizing the third word of a given text string; creating a NumPy array from a list of numbers and squaring them; or detrending a 3D surface. The possibilities are limitless.)</source>
          <target state="translated">独立した関数を分割することで、以前の作業を別のスクリプトに呼び出して再利用できるようになります。 たとえば、「example.py」は「xy.py」から「x」関数を利用して、「xy.py」をインポートして &lt;code&gt;x()&lt;/code&gt; を呼び出すことができます。 （多分それは与えられたテキスト文字列の3番目の単語を大文字にします;数値のリストからNumPy配列を作成し、それらを二乗します;または3Dサーフェスのトレンドを取り除きます。可能性は無限です。）</target>
        </trans-unit>
        <trans-unit id="d853790bb43ec92bf806d95fb5eb4681a4a8a3c8" translate="yes" xml:space="preserve">
          <source>In summary, here's what'd be printed in the two cases:</source>
          <target state="translated">要約すると、この2つのケースで何が刷り込まれるかというと、こんな感じです。</target>
        </trans-unit>
        <trans-unit id="1f0a6937d20af80d3078dedc2606cc5a59b0e220" translate="yes" xml:space="preserve">
          <source>In the b.py code there is some code that is exclusive to that file b.py and we don't want any other file (other than b.py file), that has imported the b.py file, to run it.</source>
          <target state="translated">b.pyのコードの中には、b.pyファイル専用のコードがあり、そのb.pyファイルをインポートした他のファイル(b.pyファイル以外)に実行させたくありません。</target>
        </trans-unit>
        <trans-unit id="260ca32c942591fccd6abb92b2ac85ea296638c3" translate="yes" xml:space="preserve">
          <source>In this case, the top-level code is an &lt;code&gt;if&lt;/code&gt; block.  &lt;code&gt;__name__&lt;/code&gt; is a built-in variable which evaluates to the name of the current module.  However, if a module is being run directly (as in &lt;code&gt;myscript.py&lt;/code&gt; above), then &lt;code&gt;__name__&lt;/code&gt; instead is set to the string &lt;code&gt;&quot;__main__&quot;&lt;/code&gt;.  Thus, you can test whether your script is being run directly or being imported by something else by testing</source>
          <target state="translated">この場合、トップレベルのコードは &lt;code&gt;if&lt;/code&gt; ブロックです。 &lt;code&gt;__name__&lt;/code&gt; は、現在のモジュールの名前に評価される組み込み変数です。 ただし、モジュールが直接実行されている場合（上記の &lt;code&gt;myscript.py&lt;/code&gt; など ）、代わりに &lt;code&gt;__name__&lt;/code&gt; が文字列 &lt;code&gt;&quot;__main__&quot;&lt;/code&gt; に設定されます。 したがって、テストによって、スクリプトが直接実行されているのか、他の何かによってインポートされているのかをテストできます。</target>
        </trans-unit>
        <trans-unit id="fc7351db8caa3bc174e3dab9c38941592f350c9e" translate="yes" xml:space="preserve">
          <source>Inside an imported module, it's the name of that module.</source>
          <target state="translated">インポートされたモジュールの中では、そのモジュールの名前です。</target>
        </trans-unit>
        <trans-unit id="600ec79b4436fd522224aeb5e817487e39bf7c75" translate="yes" xml:space="preserve">
          <source>It allows the code in the module to be importable by other modules, without executing the code block beneath on import.</source>
          <target state="translated">これにより、インポート時にその下のコードブロックを実行せずに、モジュール内のコードを他のモジュールからインポートできるようになります。</target>
        </trans-unit>
        <trans-unit id="675efdeb054d458c04693317ce35a181157e918e" translate="yes" xml:space="preserve">
          <source>It also allows modules to be run from the command line as main scripts, which can be also very useful.</source>
          <target state="translated">また、コマンドラインからメインスクリプトとしてモジュールを実行することができ、これも非常に便利です。</target>
        </trans-unit>
        <trans-unit id="54b2453f92e0d3e4d73f97207fe07c2dc556e48a" translate="yes" xml:space="preserve">
          <source>It can not only be used in scripts but can also be found in both the interpreter and modules/packages.</source>
          <target state="translated">スクリプトだけでなく、インタプリタとモジュールパッケージの両方で使用することができます。</target>
        </trans-unit>
        <trans-unit id="3528aa55d868a317f591f6ee9b7618c515d6e0af" translate="yes" xml:space="preserve">
          <source>It checks if a module is being imported or not.</source>
          <target state="translated">モジュールがインポートされているかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="4714816743d3504312c6ed1b30410b9d76cd8f74" translate="yes" xml:space="preserve">
          <source>It checks if the &lt;code&gt;__name__&lt;/code&gt; attribute of the Python script is &lt;code&gt;&quot;__main__&quot;&lt;/code&gt;. In other words, if the program itself is executed, the attribute will be &lt;code&gt;__main__&lt;/code&gt;, so the program will be executed (in this case the &lt;code&gt;main()&lt;/code&gt; function).</source>
          <target state="translated">Pythonスクリプトの &lt;code&gt;__name__&lt;/code&gt; 属性が &lt;code&gt;&quot;__main__&quot;&lt;/code&gt; かどうかをチェックします。 つまり、プログラム自体が実行される場合、属性は &lt;code&gt;__main__&lt;/code&gt; になるため、プログラムが実行されます（この場合は &lt;code&gt;main()&lt;/code&gt; 関数）。</target>
        </trans-unit>
        <trans-unit id="d45839ba20c9bcb826d469c0e65576dc489d5de3" translate="yes" xml:space="preserve">
          <source>It could be written in several ways. Another is:</source>
          <target state="translated">いくつかの方法で書くことができます。もう一つは</target>
        </trans-unit>
        <trans-unit id="72796cbd4b51d3cdeb2d0d02bdcb18094d7dd7ca" translate="yes" xml:space="preserve">
          <source>It executes the &lt;code&gt;def&lt;/code&gt; block, creating a function object, then assigning that function object to a variable called &lt;code&gt;functionA&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;def&lt;/code&gt; ブロックを実行して関数オブジェクトを作成し、その関数オブジェクトをfunctionAという変数に割り当て &lt;code&gt;functionA&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4a1336d55772c318b9c2339583e8b328d7e55ca8" translate="yes" xml:space="preserve">
          <source>It executes the second &lt;code&gt;def&lt;/code&gt; block, creating another function object, then assigning it to a variable called &lt;code&gt;functionB&lt;/code&gt;.</source>
          <target state="translated">2番目の &lt;code&gt;def&lt;/code&gt; ブロックを実行し、別の関数オブジェクトを作成して、それを &lt;code&gt;functionB&lt;/code&gt; という変数に割り当てます 。</target>
        </trans-unit>
        <trans-unit id="d422f7632b03e10b878e1d03615ebf1e878466d9" translate="yes" xml:space="preserve">
          <source>It is a special for when a Python file is called from the command line. This is typically used to call a &quot;main()&quot; function or execute other appropriate startup code, like commandline arguments handling for instance.</source>
          <target state="translated">コマンドラインからPythonファイルを呼び出すときのための特殊なものです。これは通常、&quot;main()&quot;関数を呼び出したり、コマンドラインの引数処理のような他の適切な起動コードを実行したりするために使用されます。</target>
        </trans-unit>
        <trans-unit id="7c5e6e85034260b34583d4b3d062afde5577df61" translate="yes" xml:space="preserve">
          <source>It is a string (global as mentioned above) as indicated by &lt;code&gt;type(__name__)&lt;/code&gt; (yielding &lt;code&gt;&amp;lt;class 'str'&amp;gt;&lt;/code&gt;), and is an inbuilt standard for both &lt;a href=&quot;https://docs.python.org/3/library/__main__.html&quot;&gt;Python 3&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/2/library/__main__.html&quot;&gt;Python 2&lt;/a&gt; versions.</source>
          <target state="translated">これは、 &lt;code&gt;type(__name__)&lt;/code&gt; で示される文字列（上記のようにグローバル） （ &lt;code&gt;&amp;lt;class 'str'&amp;gt;&lt;/code&gt; を生成 ）であり、 &lt;a href=&quot;https://docs.python.org/3/library/__main__.html&quot;&gt;Python 3&lt;/a&gt;と&lt;a href=&quot;https://docs.python.org/2/library/__main__.html&quot;&gt;Python 2の&lt;/a&gt;両方のバージョンの組み込み標準です。</target>
        </trans-unit>
        <trans-unit id="3b32f06639244cd4fe1f298cf6a239029bf115ac" translate="yes" xml:space="preserve">
          <source>It is also possible to do other, less common but useful things with &lt;code&gt;__name__&lt;/code&gt;, some I will show here:</source>
          <target state="translated">&lt;code&gt;__name__&lt;/code&gt; を使用して、あまり一般的ではありませんが有用な他のことを行うこともできます。</target>
        </trans-unit>
        <trans-unit id="fa5911f298adfd582f1742f2457c41f8e0363fdb" translate="yes" xml:space="preserve">
          <source>It is always assumed that the value of &lt;code&gt;__name__&lt;/code&gt; to be &lt;code&gt;__main__&lt;/code&gt; or the name of the file.  Once again changing this default value will cause more confusion that it will do good, causing problems further down the line.</source>
          <target state="translated">&lt;code&gt;__name__&lt;/code&gt; の値は &lt;code&gt;__main__&lt;/code&gt; またはファイルの名前であると常に想定されます。 もう一度、このデフォルト値を変更すると、うまくいくという混乱が生じ、将来的に問題が発生します。</target>
        </trans-unit>
        <trans-unit id="433366427f82e9a941e28039c28d109ea0304b44" translate="yes" xml:space="preserve">
          <source>It is considered good practice in general to include the &lt;code&gt;if __name__ == '__main__'&lt;/code&gt; in scripts.</source>
          <target state="translated">スクリプトに &lt;code&gt;if __name__ == '__main__'&lt;/code&gt; を含めることは、一般的には良い習慣と考えられています。</target>
        </trans-unit>
        <trans-unit id="ae6fdd181016a398f76b7382908ae7290de561a7" translate="yes" xml:space="preserve">
          <source>It is usually written for testing.</source>
          <target state="translated">通常はテスト用に書かれています。</target>
        </trans-unit>
        <trans-unit id="c3402e91991c1a14ff2a75a0ab38e464eb5133ba" translate="yes" xml:space="preserve">
          <source>It loads the &lt;code&gt;math&lt;/code&gt; module and assigns it to a variable called &lt;code&gt;math&lt;/code&gt;. This is equivalent to replacing &lt;code&gt;import math&lt;/code&gt; with the following (note that &lt;code&gt;__import__&lt;/code&gt; is a low-level function in Python that takes a string and triggers the actual import):</source>
          <target state="translated">&lt;code&gt;math&lt;/code&gt; モジュールをロードして、それを &lt;code&gt;math&lt;/code&gt; という変数に割り当てます。 これは、 &lt;code&gt;import math&lt;/code&gt; を次のように置き換えることと &lt;code&gt;__import__&lt;/code&gt; です（ __import__は、文字列を受け取り、実際のインポートをトリガーするPythonの低レベル関数であることに注意してください）。</target>
        </trans-unit>
        <trans-unit id="56f71295dc0080691356ca0c01cec7d37f4e28e9" translate="yes" xml:space="preserve">
          <source>It prints the string &lt;code&gt;&quot;before __name__ guard&quot;&lt;/code&gt;.</source>
          <target state="translated">文字列 &lt;code&gt;&quot;before __name__ guard&quot;&lt;/code&gt; 出力します。</target>
        </trans-unit>
        <trans-unit id="2577e5a4b9e5bed19b4432e05d2660faee329607" translate="yes" xml:space="preserve">
          <source>It prints the string &lt;code&gt;&quot;before functionA&quot;&lt;/code&gt;.</source>
          <target state="translated">文字列 &lt;code&gt;&quot;before functionA&quot;&lt;/code&gt; を出力します。</target>
        </trans-unit>
        <trans-unit id="990ff0164122db4967979e56b95623fac83be16d" translate="yes" xml:space="preserve">
          <source>It prints the string &lt;code&gt;&quot;before functionB&quot;&lt;/code&gt;.</source>
          <target state="translated">文字列 &lt;code&gt;&quot;before functionB&quot;&lt;/code&gt; を出力します。</target>
        </trans-unit>
        <trans-unit id="67a82144baac90e3bfe77c37b1e7cfd66966d43e" translate="yes" xml:space="preserve">
          <source>It prints the string &lt;code&gt;&quot;before import&quot;&lt;/code&gt; (without quotes).</source>
          <target state="translated">&lt;code&gt;&quot;before import&quot;&lt;/code&gt; （引用符なし）の文字列を出力します。</target>
        </trans-unit>
        <trans-unit id="487802f670fb40e8bf81d7517f78375a228bb226" translate="yes" xml:space="preserve">
          <source>It will allow the module and its functions and classes to be imported into other scripts without running the &lt;code&gt;main&lt;/code&gt; function, and will also allow the module (and its functions and classes) to be called when running from a different &lt;code&gt;'__main__'&lt;/code&gt; module, i.e.</source>
          <target state="translated">これにより、 &lt;code&gt;main&lt;/code&gt; 関数を実行せずにモジュールとその関数およびクラスを他のスクリプトにインポートできるようになり、別の &lt;code&gt;'__main__'&lt;/code&gt; モジュールから実行するときにモジュール（およびその関数とクラス）を呼び出すことができるようになります。</target>
        </trans-unit>
        <trans-unit id="db31e7b989046834490a12f44ad8c713989903b9" translate="yes" xml:space="preserve">
          <source>It will print the string &lt;code&gt;&quot;after __name__ guard&quot;&lt;/code&gt; in both situations.</source>
          <target state="translated">どちらの場合も、 &lt;code&gt;&quot;after __name__ guard&quot;&lt;/code&gt; という文字列を出力します。</target>
        </trans-unit>
        <trans-unit id="0640f504c6f1cabceaecd1e002b971be93067ac4" translate="yes" xml:space="preserve">
          <source>Let's look at the answer in a more abstract way:</source>
          <target state="translated">その答えをもっと抽象的に見てみましょう。</target>
        </trans-unit>
        <trans-unit id="59c0758ddc6f775006dd70cbf5286216ff0f8137" translate="yes" xml:space="preserve">
          <source>Let's see how this works and how it relates to your question about the &lt;code&gt;__name__&lt;/code&gt; checks we always see in Python scripts.</source>
          <target state="translated">これがどのように機能し、Pythonスクリプトで常に見られる &lt;code&gt;__name__&lt;/code&gt; チェックに関する質問にどのように関連するかを見てみましょう。</target>
        </trans-unit>
        <trans-unit id="36e704322c41ccc6a321769ec4f01db18ff86add" translate="yes" xml:space="preserve">
          <source>Let's see what it does using a simple code that prints the name of the module:</source>
          <target state="translated">モジュールの名前を表示する簡単なコードを使って、何をするのか見てみましょう。</target>
        </trans-unit>
        <trans-unit id="5f645eb565c673e545d1679f2c86c2b42014562e" translate="yes" xml:space="preserve">
          <source>Let's step through the above code to understand what's happening, focusing first on the unindented lines and the order they appear in the scripts. Remember that function - or &lt;code&gt;def&lt;/code&gt; - blocks don't do anything by themselves until they're called. What the interpreter might say if mumbled to itself:</source>
          <target state="translated">上記のコードをステップ実行して、何が起こっているのかを理解します。まず、インデントされていない行とスクリプトに表示される順序に注目します。 function-または &lt;code&gt;def&lt;/code&gt; -ブロックは、呼び出されるまでそれ自体では何もしないことに注意してください。 自分自身につぶやいた場合の通訳の発言：</target>
        </trans-unit>
        <trans-unit id="1254a1f938039680c725134df68b131b5aa46dc5" translate="yes" xml:space="preserve">
          <source>Let's use a slightly different code sample to explore how imports and scripts work.  Suppose the following is in a file called &lt;code&gt;foo.py&lt;/code&gt;.</source>
          <target state="translated">少し異なるコードサンプルを使用して、インポートとスクリプトがどのように機能するかを見てみましょう。 以下が &lt;code&gt;foo.py&lt;/code&gt; というファイルにあるとします 。</target>
        </trans-unit>
        <trans-unit id="842b192efb9c67214acf7a300d55ce4db505bdcc" translate="yes" xml:space="preserve">
          <source>Note that only the top-level &lt;code&gt;print()&lt;/code&gt; statement in &lt;code&gt;my_test_module&lt;/code&gt; is executed.</source>
          <target state="translated">&lt;code&gt;my_test_module&lt;/code&gt; のトップレベルの &lt;code&gt;print()&lt;/code&gt; ステートメントのみが実行されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="81c6d0a8223e137d4fd96a2fea5acdc58cde2cd7" translate="yes" xml:space="preserve">
          <source>Notice that when used in a package or module, &lt;code&gt;__name__&lt;/code&gt; takes the name of the file.  The path of the actual module or package path is not given, but has its own DunderAlias &lt;code&gt;__file__&lt;/code&gt;, that allows for this.</source>
          <target state="translated">パッケージまたはモジュールで使用される場合、 &lt;code&gt;__name__&lt;/code&gt; はファイルの名前を取ります。 実際のモジュールまたはパッケージのパスは指定されていませんが、これを可能にする独自のDunderAlias &lt;code&gt;__file__&lt;/code&gt; があります。</target>
        </trans-unit>
        <trans-unit id="cf84fdf12bf682b1e82dc617a50185e488527e76" translate="yes" xml:space="preserve">
          <source>Now if you invoke &lt;code&gt;main.py&lt;/code&gt;:</source>
          <target state="translated">ここで、 &lt;code&gt;main.py&lt;/code&gt; を呼び出すと、</target>
        </trans-unit>
        <trans-unit id="7cdbc821008ebfe4fc4cd41f81d12ccd5cec7db9" translate="yes" xml:space="preserve">
          <source>Now if you run &lt;code&gt;my_test_module.py&lt;/code&gt; as a Python script, both &lt;code&gt;print()&lt;/code&gt; statements will be exectued:</source>
          <target state="translated">&lt;code&gt;my_test_module.py&lt;/code&gt; をPythonスクリプトとして実行すると、両方の &lt;code&gt;print()&lt;/code&gt; ステートメントが実行されます。</target>
        </trans-unit>
        <trans-unit id="3875b0e9c99d33dd9d9117fb278540c718c1625f" translate="yes" xml:space="preserve">
          <source>Now suppose we call above script from other script</source>
          <target state="translated">上記のスクリプトを他のスクリプトから呼び出すとします。</target>
        </trans-unit>
        <trans-unit id="32d820770706edc1d47e13dfe4072ab74a677b21" translate="yes" xml:space="preserve">
          <source>Now, figure out what will happen if you remove the &lt;code&gt;__name__&lt;/code&gt; check in &lt;code&gt;foo3.py&lt;/code&gt;:</source>
          <target state="translated">ここで、 &lt;code&gt;foo3.py&lt;/code&gt; の &lt;code&gt;__name__&lt;/code&gt; チェックを削除するとどうなるかを考えます。</target>
        </trans-unit>
        <trans-unit id="f61cdcc0e64bc154546828675c159f927f257516" translate="yes" xml:space="preserve">
          <source>Now, if you invoke the interpreter as</source>
          <target state="translated">さて、インタープリタを</target>
        </trans-unit>
        <trans-unit id="8ca2803175deedc185a32811ae0d215b53994bac" translate="yes" xml:space="preserve">
          <source>Oh, a function. I'll remember that.</source>
          <target state="translated">ああ、機能か。覚えておこう。</target>
        </trans-unit>
        <trans-unit id="6077d0ebf452529d19420c847ef52de2a426a2ee" translate="yes" xml:space="preserve">
          <source>Ok, function &lt;code&gt;a()&lt;/code&gt;; I just learned that. Printing '&lt;em&gt;A function in ab file&lt;/em&gt;'.</source>
          <target state="translated">OK、関数 &lt;code&gt;a()&lt;/code&gt; ; 私はちょうどそれを学びました。 印刷 ' &lt;em&gt;abファイル内&lt;/em&gt;の&lt;em&gt;関数&lt;/em&gt; '。</target>
        </trans-unit>
        <trans-unit id="f8c73f6bb1c6fc650c6e40cfdcfea137d51b31bb" translate="yes" xml:space="preserve">
          <source>On import, the &lt;code&gt;do_important&lt;/code&gt; function would be called, so you'd probably comment out your function call, &lt;code&gt;do_important()&lt;/code&gt;, at the bottom.</source>
          <target state="translated">インポート時に、 &lt;code&gt;do_important&lt;/code&gt; 関数が呼び出されるため、下部にある関数呼び出し &lt;code&gt;do_important()&lt;/code&gt; をコメント化します。</target>
        </trans-unit>
        <trans-unit id="2d793a6eac08930c66fb11b06b414c6c74e2e724" translate="yes" xml:space="preserve">
          <source>On the other hand, suppose some other module is the main program and it imports your module. This means there's a statement like this in the main program, or in some other module the main program imports:</source>
          <target state="translated">一方、他のモジュールがメインプログラムであり、そのモジュールがあなたのモジュールをインポートしているとします。つまり、メインプログラムの中にこのような文があったり、メインプログラムがインポートする他のモジュールの中にもこのような文があるということです。</target>
        </trans-unit>
        <trans-unit id="4b8160972d3ededbe405e2919fa2974b8a5330ed" translate="yes" xml:space="preserve">
          <source>Open xy.py as the 'home' file; call it &lt;code&gt;&quot;__main__&quot;&lt;/code&gt; in the &lt;code&gt;__name__&lt;/code&gt; variable.</source>
          <target state="translated">'home'ファイルとしてxy.pyを開きます。 &lt;code&gt;__name__&lt;/code&gt; 変数で &lt;code&gt;&quot;__main__&quot;&lt;/code&gt; と呼びます。</target>
        </trans-unit>
        <trans-unit id="4bed336194a9a5c86b6a734f03b3570d2aae1a68" translate="yes" xml:space="preserve">
          <source>Output</source>
          <target state="translated">Output</target>
        </trans-unit>
        <trans-unit id="a703490bf01742db237973ccf277b94b1592d61d" translate="yes" xml:space="preserve">
          <source>Put simply, &lt;code&gt;__name__&lt;/code&gt; is a variable defined for each script that defines whether the script is being run as the main module or it is being run as an imported module.</source>
          <target state="translated">簡単に言えば、 &lt;code&gt;__name__&lt;/code&gt; は、スクリプトがメインモジュールとして実行されるか、インポートされたモジュールとして実行されるかを定義する、各スクリプトに対して定義された変数です。</target>
        </trans-unit>
        <trans-unit id="e37067e387ec00a654d6a8a4421c869e9ce7f02b" translate="yes" xml:space="preserve">
          <source>Question: Can I have multiple &lt;code&gt;__name__&lt;/code&gt; checking blocks?  Answer: it's strange to do so, but the language won't stop you.</source>
          <target state="translated">質問：複数の &lt;code&gt;__name__&lt;/code&gt; チェックブロックを使用できますか？ 答え：そうするのは奇妙ですが、言語はあなたを止めません。</target>
        </trans-unit>
        <trans-unit id="1f6213cf7dc0a0a2692503179dc1a74e244db9a2" translate="yes" xml:space="preserve">
          <source>Reference: &lt;a href=&quot;https://docs.python.org/3.5/tutorial/modules.html&quot;&gt;https://docs.python.org/3.5/tutorial/modules.html&lt;/a&gt;</source>
          <target state="translated">リファレンス： &lt;a href=&quot;https://docs.python.org/3.5/tutorial/modules.html&quot;&gt;https&lt;/a&gt; : //docs.python.org/3.5/tutorial/modules.html</target>
        </trans-unit>
        <trans-unit id="664467ee79494c88e6f1e2c2697dbbe4ff48a5d2" translate="yes" xml:space="preserve">
          <source>Remember what I said earlier about import statements? When you import a module it doesn't just 'recognize' it and wait for further instructions - it actually runs all the executable operations contained within the script. So, putting the meat of your script into the &lt;code&gt;main()&lt;/code&gt; function effectively quarantines it, putting it in isolation so that it won't immediately run when imported by another script.</source>
          <target state="translated">以前にインポートステートメントについて言ったことを覚えていますか？ モジュールをインポートするとき、それは単に「認識」してそれ以上の指示を待つのではなく、実際にはスクリプト内に含まれるすべての実行可能な操作を実行します。 そのため、スクリプトの &lt;code&gt;main()&lt;/code&gt; 関数に入れると効果的に隔離され、別のスクリプトによってインポートされたときにすぐに実行されないように隔離されます。</target>
        </trans-unit>
        <trans-unit id="f98434905bc42aec74771816b1350633e53ce854" translate="yes" xml:space="preserve">
          <source>Resulting in &lt;code&gt;__main__&lt;/code&gt;</source>
          <target state="translated">結果は &lt;code&gt;__main__&lt;/code&gt; になります</target>
        </trans-unit>
        <trans-unit id="e63592c750f974c67228385bd47700a1dc930828" translate="yes" xml:space="preserve">
          <source>Resulting in &lt;code&gt;somefile&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;somefile&lt;/code&gt; の結果</target>
        </trans-unit>
        <trans-unit id="dca1109ee592b30f70306745ecaf4e3be65dabb6" translate="yes" xml:space="preserve">
          <source>Run it. It will print &lt;strong&gt;a&lt;/strong&gt;, i.e., the name of the file which &lt;strong&gt;is imported&lt;/strong&gt;.</source>
          <target state="translated">それを実行します。 つまり、 &lt;strong&gt;インポートさ&lt;/strong&gt;れるファイルの名前を出力します。</target>
        </trans-unit>
        <trans-unit id="3f5bef58a00ebcb694aa52babce37958f2b198f1" translate="yes" xml:space="preserve">
          <source>Run the class stand alone, for testing purposes.</source>
          <target state="translated">テストのためにクラスをスタンドアローンで実行します。</target>
        </trans-unit>
        <trans-unit id="20e86911fbff3e384f7f5f09191137367a0df800" translate="yes" xml:space="preserve">
          <source>Running them will get you this output:</source>
          <target state="translated">これらを実行すると、以下のような出力が得られます。</target>
        </trans-unit>
        <trans-unit id="10ec89290100bc024be13c487e6ae209eaa691b9" translate="yes" xml:space="preserve">
          <source>Say you write a Python script that does something great and you implement a boatload of functions that are useful for other purposes. If I want to use them I can just import your script and use them without executing your program (given that your code only executes within the  &lt;code&gt;if __name__ == &quot;__main__&quot;:&lt;/code&gt; context). Whereas in C/C++ you would have to portion out those pieces into a separate module that then includes the file. Picture the situation below;</source>
          <target state="translated">あなたが何か素晴らしいことをするPythonスクリプトを書き、他の目的に役立つ関数のボートロードを実装するとします。 それらを使用したい場合は、スクリプトをインポートして、プログラムを実行せずに使用できます（コードが &lt;code&gt;if __name__ == &quot;__main__&quot;:&lt;/code&gt; コンテキスト内でのみ実行される場合 ）。 一方、C / C ++では、これらの部分を別のモジュールに分割して、ファイルを含める必要があります。 以下の状況を想像してください。</target>
        </trans-unit>
        <trans-unit id="8d613d269c466eb978baefb1a911abf766ab0238" translate="yes" xml:space="preserve">
          <source>Say you're writing a Python script designed to be used as a module:</source>
          <target state="translated">モジュールとして使われるように設計されたPythonスクリプトを書いているとしましょう。</target>
        </trans-unit>
        <trans-unit id="fb6ab9485c691b027c37729a425f370d612207ed" translate="yes" xml:space="preserve">
          <source>Simply, it is the entry point to run the file, like the &lt;code&gt;main&lt;/code&gt; function in the &lt;em&gt;C&lt;/em&gt; programming language.</source>
          <target state="translated">単に、 &lt;em&gt;C&lt;/em&gt;プログラミング言語の &lt;code&gt;main&lt;/code&gt; 関数のように、ファイルを実行するためのエントリポイントです。</target>
        </trans-unit>
        <trans-unit id="2f0eb42cc94ae6f1d6b27a11e936825cd6e9be63" translate="yes" xml:space="preserve">
          <source>Small example to explain in short.</source>
          <target state="translated">小例を挙げて簡潔に説明します。</target>
        </trans-unit>
        <trans-unit id="abff45f4f7494a045c401c2b502e510dbd014b28" translate="yes" xml:space="preserve">
          <source>So if we have two scripts;</source>
          <target state="translated">つまり、2つのスクリプトがあるとします。</target>
        </trans-unit>
        <trans-unit id="84ce746d38e49c0592c794aa0e1ec5b2af9e35c4" translate="yes" xml:space="preserve">
          <source>So if you check before executing:</source>
          <target state="translated">なので、実行前に確認しておくと</target>
        </trans-unit>
        <trans-unit id="640d3626fbf5c4384513193cd5a05b99491f804b" translate="yes" xml:space="preserve">
          <source>So that is what this line of code checks. If it is the main file (i.e., b.py) running the code, which in this case it is not (a.py is the main file running), then only the code gets executed.</source>
          <target state="translated">これがこのコードのチェックポイントです。もしそれがコードを実行しているメインファイル(つまりb.py)であれば、コードだけが実行されますが、この場合はそうではありません(a.pyがメインファイルとして実行されています)。</target>
        </trans-unit>
        <trans-unit id="263e6ff9fdb235045559021aa4f3aaf6a28dd1e6" translate="yes" xml:space="preserve">
          <source>So, above is self explanatory that when you call test from other script, if loop &lt;code&gt;__name__&lt;/code&gt; in &lt;code&gt;test.py&lt;/code&gt; will not execute.</source>
          <target state="translated">したがって、上記は他のスクリプトからtestを呼び出したときに &lt;code&gt;test.py&lt;/code&gt; のループ &lt;code&gt;__name__&lt;/code&gt; が実行されないことを示しています。</target>
        </trans-unit>
        <trans-unit id="68f77a6ccbf56724f5b40205ddb5e475652f0586" translate="yes" xml:space="preserve">
          <source>So, code under the &lt;code&gt;if&lt;/code&gt; block will only run if the module is the entry point to your program.</source>
          <target state="translated">したがって、 &lt;code&gt;if&lt;/code&gt; ブロックの下のコードは、モジュールがプログラムのエントリポイントである場合にのみ実行されます。</target>
        </trans-unit>
        <trans-unit id="f39f20521dcc328835dd2bae85539d96c3ed5764" translate="yes" xml:space="preserve">
          <source>So, in your example in part:</source>
          <target state="translated">だから、一部のあなたの例では</target>
        </trans-unit>
        <trans-unit id="9b0e64ff7926b8af4a777a49504ee4171aa1f955" translate="yes" xml:space="preserve">
          <source>So, to show &lt;strong&gt;two different behavior of the same file&lt;/strong&gt;, this is a commonly used trick:</source>
          <target state="translated">したがって、 &lt;strong&gt;同じファイルの2つの異なる動作&lt;/strong&gt;を示すために、これは一般的に使用されるトリックです。</target>
        </trans-unit>
        <trans-unit id="1fd11fffb92fae55b373db1f1b2a14481892db42" translate="yes" xml:space="preserve">
          <source>Special Variables</source>
          <target state="translated">特殊変数</target>
        </trans-unit>
        <trans-unit id="b0b9fd78351c8645d3bb611c5714fc4fb48a880a" translate="yes" xml:space="preserve">
          <source>Suppose the following is in &lt;code&gt;foo2.py&lt;/code&gt;.  What happens if you say &lt;code&gt;python foo2.py&lt;/code&gt; on the command-line? Why?</source>
          <target state="translated">以下が &lt;code&gt;foo2.py&lt;/code&gt; にあると仮定します。 コマンドラインで &lt;code&gt;python foo2.py&lt;/code&gt; と言うとどうなりますか？ どうして？</target>
        </trans-unit>
        <trans-unit id="19e0db61176529f3b08091162b28a1b8097dbc39" translate="yes" xml:space="preserve">
          <source>Suppose we have this code in x.py:</source>
          <target state="translated">x.pyに次のようなコードがあるとします。</target>
        </trans-unit>
        <trans-unit id="b522da1d722893c1c3514d7e1c720966c233662f" translate="yes" xml:space="preserve">
          <source>Take file &quot;ab.py&quot;:</source>
          <target state="translated">ab.pyというファイルを取ります。</target>
        </trans-unit>
        <trans-unit id="63dd3922ae392ebb0802b3e1fb913af39e39d6ef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;__name__&lt;/code&gt; variable points to the namespace wherever the Python interpreter happens to be at the moment.</source>
          <target state="translated">&lt;code&gt;__name__&lt;/code&gt; 変数は、Pythonインタープリターがたまたま存在する名前空間を指します。</target>
        </trans-unit>
        <trans-unit id="355c15d3884285cbe9de6e8c0623457a61fdc6ca" translate="yes" xml:space="preserve">
          <source>The Problem</source>
          <target state="translated">問題点</target>
        </trans-unit>
        <trans-unit id="d9eef56265e1ad5d7b64df6c1fea6c1c26857bc3" translate="yes" xml:space="preserve">
          <source>The above statement is true and prints &lt;em&gt;&quot;direct method&quot;&lt;/em&gt;. Suppose if they imported this class in another class it doesn't print &lt;em&gt;&quot;direct method&quot;&lt;/em&gt; because, while importing, it will set &lt;code&gt;__name__ equal to &quot;first model name&quot;&lt;/code&gt;.</source>
          <target state="translated">上記のステートメントはtrueであり、 &lt;em&gt;「直接メソッド」を出力し&lt;/em&gt;ます。 このクラスを別のクラスにインポートした場合、インポート中に &lt;code&gt;__name__ equal to &quot;first model name&quot;&lt;/code&gt; なるため、 &lt;em&gt;「ダイレクトメソッド」&lt;/em&gt;は出力されないとします。</target>
        </trans-unit>
        <trans-unit id="2b0b314d4585244ae8ac5cd70de557719041b367" translate="yes" xml:space="preserve">
          <source>The arrows are import links. For three modules each trying to include the previous modules code there are six files (nine, counting the implementation files) and five links. This makes it difficult to include other code into a C project unless it is compiled specifically as a library. Now picture it for Python:</source>
          <target state="translated">矢印はインポートリンクです。3つのモジュールがそれぞれ前のモジュールのコードをインクルードしようとすると、6つのファイル(実装ファイルを数えて9つ)と5つのリンクがあります。これは、ライブラリとして特別にコンパイルされていない限り、他のコードをCプロジェクトにインクルードすることを困難にします。では、Pythonの場合を想像してみましょう。</target>
        </trans-unit>
        <trans-unit id="b96b1c26d7d07398a4108598c24c3f6449d82fe1" translate="yes" xml:space="preserve">
          <source>The bottom two lines mean: &quot;If this is the &lt;code&gt;&quot;__main__&quot;&lt;/code&gt; or 'home' script, execute the function called &lt;code&gt;main()&lt;/code&gt;&quot;. That's why you'll see a &lt;code&gt;def main():&lt;/code&gt; block up top, which contains the main flow of the script's functionality.</source>
          <target state="translated">下の2行は、 &lt;code&gt;&quot;__main__&quot;&lt;/code&gt; これが「__main__」または「home」スクリプトの場合、 &lt;code&gt;main()&lt;/code&gt; という関数を実行することを意味します。 そのため、スクリプトの機能のメインフローを含む &lt;code&gt;def main():&lt;/code&gt; block up topが表示されます。</target>
        </trans-unit>
        <trans-unit id="ee36bd7aa18be8f75cff321a8cbe45b79fa20c99" translate="yes" xml:space="preserve">
          <source>The code inside &lt;code&gt;if __name__ == '__main__':&lt;/code&gt;&lt;strong&gt;will only be executed if the module is invoked as a script&lt;/strong&gt;.</source>
          <target state="translated">内部のコード &lt;code&gt;if __name__ == '__main__':&lt;/code&gt; &lt;strong&gt;は、モジュールがスクリプトとして呼び出された場合にのみ実行されます&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="c7cb418b6654cc08bd7fdbc541322601045fee60" translate="yes" xml:space="preserve">
          <source>The global variable, &lt;code&gt;__name__&lt;/code&gt;, in the module that is the entry point to your program, is &lt;code&gt;'__main__'&lt;/code&gt;. Otherwise, it's the name you import the module by.</source>
          <target state="translated">プログラムのエントリポイントであるモジュール内のグローバル変数 &lt;code&gt;__name__&lt;/code&gt; は、 &lt;code&gt;'__main__'&lt;/code&gt; です。 それ以外の場合は、モジュールのインポートに使用した名前です。</target>
        </trans-unit>
        <trans-unit id="abc8795a207d7fd1e55acd3339216f07ad278e91" translate="yes" xml:space="preserve">
          <source>The important thing that python is special at is point 4! The rest is just basic logic.</source>
          <target state="translated">pythonが特別なところで重要なのはポイント4! あとは基本的なロジックだけです。</target>
        </trans-unit>
        <trans-unit id="070234b07de191f078cf7dded19198b7b44d467d" translate="yes" xml:space="preserve">
          <source>The interpreter keeps track of which scripts are running with &lt;code&gt;__name__&lt;/code&gt;. When you run a script - no matter what you've named it - the interpreter calls it &lt;code&gt;&quot;__main__&quot;&lt;/code&gt;, making it the master or 'home' script that gets returned to after running an external script.</source>
          <target state="translated">インタープリターは、 &lt;code&gt;__name__&lt;/code&gt; で実行されているスクリプトを追跡します。 スクリプトを実行すると、名前に関係なく、インタープリターはそれを &lt;code&gt;&quot;__main__&quot;&lt;/code&gt; と呼び、外部スクリプトの実行後に返されるマスターまたは「ホーム」スクリプトにします。</target>
        </trans-unit>
        <trans-unit id="e490bbfebdeff408a85402b8066f8e0d765afb42" translate="yes" xml:space="preserve">
          <source>The interpreter will search for your &lt;code&gt;foo.py&lt;/code&gt; file (along with searching for a few other variants), and prior to executing that module, it will assign the name &lt;code&gt;&quot;foo&quot;&lt;/code&gt; from the import statement to the &lt;code&gt;__name__&lt;/code&gt; variable, i.e.</source>
          <target state="translated">インタープリターは &lt;code&gt;foo.py&lt;/code&gt; ファイルを検索し（他のいくつかのバリアントも検索します）、そのモジュールを実行する前に、インポートステートメントから &lt;code&gt;__name__&lt;/code&gt; 変数に &lt;code&gt;&quot;foo&quot;&lt;/code&gt; という名前を割り当てます。</target>
        </trans-unit>
        <trans-unit id="beb5c6ca096be5c499ae9d622ede781690b12de1" translate="yes" xml:space="preserve">
          <source>The output for the above is &lt;code&gt;__main__&lt;/code&gt;.</source>
          <target state="translated">上記の出力は &lt;code&gt;__main__&lt;/code&gt; です 。</target>
        </trans-unit>
        <trans-unit id="9b315daf004ca0729cd2f96be56c31138214abce" translate="yes" xml:space="preserve">
          <source>The output from executing script1 is</source>
          <target state="translated">script1を実行したときの出力は</target>
        </trans-unit>
        <trans-unit id="a61791ccd424eca040a7f63b8afadbed687c913a" translate="yes" xml:space="preserve">
          <source>The output will be</source>
          <target state="translated">出力されるのは</target>
        </trans-unit>
        <trans-unit id="f7783b7273a972da2fb19a09cf27c06a5a76b303" translate="yes" xml:space="preserve">
          <source>The reason for</source>
          <target state="translated">その理由は</target>
        </trans-unit>
        <trans-unit id="461ad2d3ca9debfc02d07f3beea45fedd8fe7c48" translate="yes" xml:space="preserve">
          <source>The simplest explanation for the &lt;code&gt;__name__&lt;/code&gt; variable (imho) is the following:</source>
          <target state="translated">&lt;code&gt;__name__&lt;/code&gt; 変数（imho）の最も簡単な説明は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="7bb35afec92b2288483eddfee92b6b137ba1ffee" translate="yes" xml:space="preserve">
          <source>There are a number of variables that the system (Python interpreter) provides for source files (modules).  You can get their values anytime you want, so, let us focus on the &lt;strong&gt;__name__&lt;/strong&gt; variable/attribute:</source>
          <target state="translated">システム（Pythonインタープリター）がソースファイル（モジュール）に提供する変数は多数あります。 これらの値はいつでも取得できるので、__ &lt;strong&gt;name__&lt;/strong&gt;変数/属性に注目しましょう。</target>
        </trans-unit>
        <trans-unit id="d334018c829a8afc4b891e4ccfd37fcb00325b95" translate="yes" xml:space="preserve">
          <source>There are lots of different takes here on the mechanics of the code in question, the &quot;How&quot;, but for me none of it made sense until I understood the &quot;Why&quot;. This should be especially helpful for new programmers.</source>
          <target state="translated">ここでは、問題となっているコードの仕組み、つまり「どのように」ということについて、多くの異なるテイクがありますが、私にとっては、「なぜ」を理解するまでは、どれも意味がありませんでした。これは特に新しいプログラマーに役立つはずです。</target>
        </trans-unit>
        <trans-unit id="e63743be839c5f96b5ee726f165c404beeea8567" translate="yes" xml:space="preserve">
          <source>There's a Pythonic way to improve on this, though.</source>
          <target state="translated">これを改善するためのパイソニックな方法があるんだけどね。</target>
        </trans-unit>
        <trans-unit id="7da449e38cd83db4680bb69d26f25544a12a00c0" translate="yes" xml:space="preserve">
          <source>This answer is for Java programmers learning Python.
Every Java file typically contains one public class. You can use that class in two ways:</source>
          <target state="translated">この答えは、Pythonを学習しているJavaプログラマのためのものです。すべてのJavaファイルには、通常1つのパブリッククラスが含まれています。そのクラスは2つの方法で使うことができます。</target>
        </trans-unit>
        <trans-unit id="a93248e8c28b2baad3105d4909c76fa1d06bca1b" translate="yes" xml:space="preserve">
          <source>This means that if &lt;code&gt;__name__&lt;/code&gt; is equal to &lt;code&gt;__main__&lt;/code&gt; then the file must be the main file and must actually be running (or it is the interpreter), not a module or package imported into the script.</source>
          <target state="translated">つまり、 &lt;code&gt;__name__&lt;/code&gt; が &lt;code&gt;__main__&lt;/code&gt; と等しい場合、ファイルはメインファイルであり、スクリプトにインポートされたモジュールまたはパッケージではなく、実際に実行されている（またはインタープリターである）必要があります。</target>
        </trans-unit>
        <trans-unit id="26768ab59b39b3300f945b6b412204438fd854c1" translate="yes" xml:space="preserve">
          <source>This module represents the (otherwise anonymous) scope in which the
  interpreter&amp;rsquo;s main program executes &amp;mdash; commands read either from
  standard input, from a script file, or from an interactive prompt. It
  is this environment in which the idiomatic &amp;ldquo;conditional script&amp;rdquo; stanza
  causes a script to run:</source>
          <target state="translated">このモジュールは、インタプリタのメインプログラムが実行する（そうでなければ匿名の）スコープを表します。コマンドは、標準入力、スクリプトファイル、または対話型プロンプトから読み取られます。 慣用的な「条件付きスクリプト」スタンザがスクリプトを実行させるのは、この環境です。</target>
        </trans-unit>
        <trans-unit id="570c99fbd84e48be7a4bc039c23bb770f7a93f2d" translate="yes" xml:space="preserve">
          <source>This tells us that if the file running is the main file (or you are running from the interpreter directly) then that condition must execute.  If it is a package then it should not, and the value will not be &lt;code&gt;__main__&lt;/code&gt;.</source>
          <target state="translated">これは、実行中のファイルがメインファイルの場合（またはインタープリターから直接実行している場合）、その条件が実行される必要があることを示しています。 それがパッケージである場合、それはすべきではなく、値は &lt;code&gt;__main__&lt;/code&gt; にはなりません。</target>
        </trans-unit>
        <trans-unit id="400df23e6535cffd76bdbec3d29bf175104d993d" translate="yes" xml:space="preserve">
          <source>Thus, including &lt;a href=&quot;https://docs.python.org/library/__main__.html&quot;&gt;the final lines&lt;/a&gt;</source>
          <target state="translated">したがって、 &lt;a href=&quot;https://docs.python.org/library/__main__.html&quot;&gt;最終行&lt;/a&gt;を含める</target>
        </trans-unit>
        <trans-unit id="41ff41b822d3a441a23084a1b748580b08728f3a" translate="yes" xml:space="preserve">
          <source>Thus, the value of the &lt;code&gt;__name__&lt;/code&gt; attribute is set to &lt;code&gt;__main__&lt;/code&gt; when the module is run as the main program. Otherwise the value of &lt;code&gt;__name__&lt;/code&gt;  is set to contain the name of the module.</source>
          <target state="translated">したがって、モジュールがメインプログラムとして実行されるとき、 &lt;code&gt;__name__&lt;/code&gt; 属性の値は &lt;code&gt;__main__&lt;/code&gt; に設定されます。 それ以外の場合、 &lt;code&gt;__name__&lt;/code&gt; の値はモジュールの名前を含むように設定されます。</target>
        </trans-unit>
        <trans-unit id="e5bb2a5a3f702f74d72560d048b4376dfc0840a3" translate="yes" xml:space="preserve">
          <source>Thus, when module &lt;code&gt;one&lt;/code&gt; gets loaded, its &lt;code&gt;__name__&lt;/code&gt; equals &lt;code&gt;&quot;one&quot;&lt;/code&gt; instead of &lt;code&gt;&quot;__main__&quot;&lt;/code&gt;.</source>
          <target state="translated">したがって、モジュール &lt;code&gt;one&lt;/code&gt; がロードされると、その &lt;code&gt;__name__&lt;/code&gt; は &lt;code&gt;&quot;__main__&quot;&lt;/code&gt; ではなく &lt;code&gt;&quot;one&quot;&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="523dcaae791ba2376f9d0e38205b6e104584b94b" translate="yes" xml:space="preserve">
          <source>To be short, you need to know several points:</source>
          <target state="translated">短く言うと、いくつかのポイントを知っておく必要があります。</target>
        </trans-unit>
        <trans-unit id="ab6345109ea5809edd76f43e5ad346f6c84b96e7" translate="yes" xml:space="preserve">
          <source>To outline the basics:</source>
          <target state="translated">基本的なことを概説する。</target>
        </trans-unit>
        <trans-unit id="12ab10369b1f47def1cf885774f934b4e0985f34" translate="yes" xml:space="preserve">
          <source>To solve the problem in point 2, python allows you to put a condition check</source>
          <target state="translated">ポイント2の問題を解決するために、pythonでは条件チェックを入れることで</target>
        </trans-unit>
        <trans-unit id="4711ba0e3e6d6e4a6ad75a1fa7aa2587e14a3867" translate="yes" xml:space="preserve">
          <source>We can execute this directly as</source>
          <target state="translated">これを直接実行するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="babfa4c489d804dc449fbd841bce76fc1745bd5c" translate="yes" xml:space="preserve">
          <source>We now have a final function for the end of our module that will run if we run the module as the primary module.</source>
          <target state="translated">これで、モジュールをプライマリモジュールとして実行した場合に実行されるモジュールの最後の関数ができました。</target>
        </trans-unit>
        <trans-unit id="1c12bf3938c1cb1ecd0ac996a47bdeae5af33c7c" translate="yes" xml:space="preserve">
          <source>We see if &lt;code&gt;__name__ == '__main__':&lt;/code&gt; quite often.</source>
          <target state="translated">&lt;code&gt;__name__ == '__main__':&lt;/code&gt; が頻繁に発生するかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="8c1bfdb1fcdcd5574d83109e0bae5ad3a5cf62db" translate="yes" xml:space="preserve">
          <source>What does &lt;code&gt;if __name__ == &quot;__main__&quot;:&lt;/code&gt; do?</source>
          <target state="translated">&lt;code&gt;if __name__ == &quot;__main__&quot;:&lt;/code&gt; はどうなりますか？</target>
        </trans-unit>
        <trans-unit id="882f556d9b969816afbc080f2c0c2833e74571bd" translate="yes" xml:space="preserve">
          <source>What does if __name__ == “__main__”: do</source>
          <target state="translated">if __name__==&quot;__main__&quot;:は何をしますか?</target>
        </trans-unit>
        <trans-unit id="0519ae47b8614fd1d5f5805a3c6ace1513a3c429" translate="yes" xml:space="preserve">
          <source>What does the &lt;code&gt;if __name__ == &quot;__main__&quot;:&lt;/code&gt; do?</source>
          <target state="translated">&lt;code&gt;if __name__ == &quot;__main__&quot;:&lt;/code&gt; は何をしますか？</target>
        </trans-unit>
        <trans-unit id="e8ade84c1dddd0abd1d4a5cbe46e38dc11bedceb" translate="yes" xml:space="preserve">
          <source>What if we want to run this business process from outside the module?</source>
          <target state="translated">モジュールの外からこのビジネスプロセスを実行したい場合はどうすればいいのでしょうか?</target>
        </trans-unit>
        <trans-unit id="849ed2229cbffb820dde4aac079e940cbf66d22f" translate="yes" xml:space="preserve">
          <source>What is this code actually doing?</source>
          <target state="translated">このコードは実際に何をしているのでしょうか?</target>
        </trans-unit>
        <trans-unit id="ac4dd5fb5ee621db0e7fc13bfab42a28cf4cb6c7" translate="yes" xml:space="preserve">
          <source>What will this do when used as a script?  When imported as a module?</source>
          <target state="translated">スクリプトとして使用した場合はどうなるのでしょうか?モジュールとしてインポートすると?</target>
        </trans-unit>
        <trans-unit id="34026079e5767a32ede0b2469d594a04aa502cd0" translate="yes" xml:space="preserve">
          <source>What's this? An &lt;code&gt;if&lt;/code&gt; statement. Well, the condition has been met (the variable &lt;code&gt;__name__&lt;/code&gt; has been set to &lt;code&gt;&quot;__main__&quot;&lt;/code&gt;), so I'll enter the &lt;code&gt;main()&lt;/code&gt; function and print '&lt;em&gt;main function: this is where the action is&lt;/em&gt;'.</source>
          <target state="translated">これは何ですか？ &lt;code&gt;if&lt;/code&gt; ステートメント。 さて、条件が満たされている（変数 &lt;code&gt;__name__&lt;/code&gt; が &lt;code&gt;&quot;__main__&quot;&lt;/code&gt; に設定されている）ので、 &lt;code&gt;main()&lt;/code&gt; 関数を入力して ' &lt;em&gt;main関数を出力します。これがアクションの場所です&lt;/em&gt; '。</target>
        </trans-unit>
        <trans-unit id="a7a878649d8009684428450f8af9b808c3a3075d" translate="yes" xml:space="preserve">
          <source>When Python loads a source code file, it executes all of the code found in it. (Note that it doesn't call all of the methods and functions defined in the file, but it does define them.)</source>
          <target state="translated">Pythonはソースコードファイルをロードすると、その中にある全てのコードを実行します。(ファイルに定義されている全てのメソッドや関数を呼び出すわけではありませんが、それらを定義していることに注意してください)。</target>
        </trans-unit>
        <trans-unit id="2a4ffb529b1700ce20d37ede654fc1142a11d491" translate="yes" xml:space="preserve">
          <source>When the Python interpeter reads a source file, it first defines a few special variables. In this case, we care about the &lt;code&gt;__name__&lt;/code&gt; variable.</source>
          <target state="translated">Python interpeterがソースファイルを読み取るとき、最初にいくつかの特別な変数を定義します。 この場合、 &lt;code&gt;__name__&lt;/code&gt; 変数に注意します。</target>
        </trans-unit>
        <trans-unit id="447dd3597ff37641a5da70095abbfb1e338af1d5" translate="yes" xml:space="preserve">
          <source>When there are certain statements in our module (&lt;code&gt;M.py&lt;/code&gt;) we want to be executed when it'll be running as main (not imported), we can place those statements (test-cases, print statements) under this &lt;code&gt;if&lt;/code&gt; block.</source>
          <target state="translated">モジュール（ &lt;code&gt;M.py&lt;/code&gt; ）に特定のステートメントがあり、メイン（インポートされていない）として実行するときに実行したい場合、これらのステートメント（テストケース、印刷ステートメント）をこの &lt;code&gt;if&lt;/code&gt; ブロックの下に配置できます。</target>
        </trans-unit>
        <trans-unit id="9877906a93c95cdaf2921362477e675f7b677ec6" translate="yes" xml:space="preserve">
          <source>When you execute &lt;code&gt;xy.py&lt;/code&gt;, you &lt;code&gt;import ab&lt;/code&gt;. The import statement runs the module immediately on import, so &lt;code&gt;ab&lt;/code&gt;'s operations get executed before the remainder of &lt;code&gt;xy&lt;/code&gt;'s. Once finished with &lt;code&gt;ab&lt;/code&gt;, it continues with &lt;code&gt;xy&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;xy.py&lt;/code&gt; を実行すると 、 &lt;code&gt;import ab&lt;/code&gt; がインポートされます。 importステートメントはモジュールをインポート時にすぐに実行するため、残りの &lt;code&gt;xy&lt;/code&gt; の前に &lt;code&gt;ab&lt;/code&gt; の操作が実行されます。 &lt;code&gt;ab&lt;/code&gt; で終わると、 &lt;code&gt;xy&lt;/code&gt; が続きます。</target>
        </trans-unit>
        <trans-unit id="b8b36e56cdbe31fc5262405f5324cf63c8c6e4bf" translate="yes" xml:space="preserve">
          <source>When you execute this</source>
          <target state="translated">これを実行すると</target>
        </trans-unit>
        <trans-unit id="6fd61966708d4f62ded02175bf761bbf0e8fb9c3" translate="yes" xml:space="preserve">
          <source>When you run Python interactively the local &lt;code&gt;__name__&lt;/code&gt; variable is assigned a value of &lt;code&gt;__main__&lt;/code&gt;. Likewise, when you execute a Python module from the command line, rather than importing it into another module, its &lt;code&gt;__name__&lt;/code&gt; attribute is assigned a value of &lt;code&gt;__main__&lt;/code&gt;, rather than the actual name of the module. In this way, modules can look at their own &lt;code&gt;__name__&lt;/code&gt; value to determine for themselves how they are being used, whether as support for another program or as the main application executed from the command line. Thus, the following idiom is quite common in Python modules:</source>
          <target state="translated">Pythonをインタラクティブに実行すると、ローカルの &lt;code&gt;__name__&lt;/code&gt; 変数に &lt;code&gt;__main__&lt;/code&gt; の値が割り当てられます。 同様に、Pythonモジュールを別のモジュールにインポートするのではなく、コマンドラインから実行すると、その &lt;code&gt;__name__&lt;/code&gt; 属性には、モジュールの実際の名前ではなく &lt;code&gt;__main__&lt;/code&gt; の値が割り当てられます。 このようにして、モジュールは独自の &lt;code&gt;__name__&lt;/code&gt; 値を確認して、別のプログラムのサポートとして、またはコマンドラインから実行されるメインアプリケーションとして、それらがどのように使用されているかを自ら判断できます。 したがって、次のイディオムはPythonモジュールでは非常に一般的です。</target>
        </trans-unit>
        <trans-unit id="4382aa34afa3d659f0bb4edaf5dcf55f253232cd" translate="yes" xml:space="preserve">
          <source>When you run this script prints &lt;strong&gt;you can see me&lt;/strong&gt;</source>
          <target state="translated">このスクリプトを実行すると、プリント&lt;strong&gt;が表示されます&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ff92db554b1095b0d40299da20c445f80406d870" translate="yes" xml:space="preserve">
          <source>When your script is run by passing it as a command to the Python interpreter,</source>
          <target state="translated">スクリプトをコマンドとしてPythonインタプリタに渡して実行する場合。</target>
        </trans-unit>
        <trans-unit id="ab593498ef9ec53331cbff2af3b2dd2b51bdf819" translate="yes" xml:space="preserve">
          <source>Whenever the Python interpreter reads a source file, it does two things:</source>
          <target state="translated">Python インタープリタがソースファイルを読み込むときはいつでも、2つのことを行います。</target>
        </trans-unit>
        <trans-unit id="6a1d2d8182ddb99759342b07d21796d4a90b92eb" translate="yes" xml:space="preserve">
          <source>Why Does It Work This Way?</source>
          <target state="translated">なぜこのように機能するのか?</target>
        </trans-unit>
        <trans-unit id="fc47432e4bb8b9783f8dbd23b35f57d699c4a18e" translate="yes" xml:space="preserve">
          <source>Why do we need this?</source>
          <target state="translated">なぜこれが必要なのか?</target>
        </trans-unit>
        <trans-unit id="acd0bc142a66a740172c6969fcbd8897e5de82ac" translate="yes" xml:space="preserve">
          <source>Why implement this?</source>
          <target state="translated">なぜこれを実装するのか?</target>
        </trans-unit>
        <trans-unit id="b6e9143e9e32c607148934a535cfda140fe418d6" translate="yes" xml:space="preserve">
          <source>With the above, your code will only execute when you're running it as the primary module (or intentionally call it from another script).</source>
          <target state="translated">上記を使えば、あなたのコードはプライマリモジュールとして実行している場合にのみ実行されます(または、意図的に他のスクリプトから呼び出している場合もあります)。</target>
        </trans-unit>
        <trans-unit id="913a9ffbcabac7b4746945a64e723d43537938ef" translate="yes" xml:space="preserve">
          <source>Yes, that's right. These separate functions &lt;strong&gt;can&lt;/strong&gt; be called from an in-line script that's not contained inside a &lt;code&gt;main()&lt;/code&gt; function. If you're accustomed (as I am, in my early learning stages of programming) to building in-line scripts that do exactly what you need, and you'll try to figure it out again if you ever need that operation again ... well, you're not used to this kind of internal structure to your code, because it's more complicated to build and it's not as intuitive to read.</source>
          <target state="translated">はい、そうです。 これらの個別の関数&lt;strong&gt;は&lt;/strong&gt; 、 &lt;code&gt;main()&lt;/code&gt; 関数内に含まれていないインラインスクリプトから呼び出す&lt;strong&gt;こと&lt;/strong&gt;が&lt;strong&gt;でき&lt;/strong&gt;ます。 （プログラミングの初期の学習段階で）必要なことを正確に実行するインラインスクリプトを作成することに慣れている場合、その操作が再び必要になった場合は、もう一度それを理解しようとします。 。まあ、コードのこのような内部構造には慣れていません。なぜなら、ビルドするのがより複雑で、読むのも直感的ではないからです。</target>
        </trans-unit>
        <trans-unit id="bbf85bd3bd1a2f405d72d298d6d2e8dc0e6a4075" translate="yes" xml:space="preserve">
          <source>You &lt;em&gt;could&lt;/em&gt; test the module by adding this call of the function to the bottom:</source>
          <target state="translated">この関数の呼び出しを下部に追加して、モジュールをテスト&lt;em&gt;でき&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="786d584d19c5e53ad4e4097843269cf6c5e6292a" translate="yes" xml:space="preserve">
          <source>You can also use it to provide runnable help functions/utilities on packages and modules without the elaborate use of libraries.</source>
          <target state="translated">また、パッケージやモジュール上で実行可能なヘルプ機能を提供するために、ライブラリを精巧に使用せずに使用することもできます。</target>
        </trans-unit>
        <trans-unit id="1022be4eed5ff0cd45b00fa73b4ca1a925550db8" translate="yes" xml:space="preserve">
          <source>You can make the file usable as a &lt;strong&gt;script&lt;/strong&gt; as well as an &lt;strong&gt;importable module&lt;/strong&gt;.</source>
          <target state="translated">このファイルを&lt;strong&gt;スクリプト&lt;/strong&gt;として、また&lt;strong&gt;インポート可能なモジュール&lt;/strong&gt;として使用できるようにすることができ&lt;strong&gt;ます&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="53eb1352da0ffb51c0ec047f0ef125c909ddaefa" translate="yes" xml:space="preserve">
          <source>You get</source>
          <target state="translated">あなたが得る</target>
        </trans-unit>
        <trans-unit id="dadc4d8e7d9fa9779b4e08f566981499d80cb4e7" translate="yes" xml:space="preserve">
          <source>You might naturally wonder why anybody would want this.  Well, sometimes you want to write a &lt;code&gt;.py&lt;/code&gt; file that can be both used by other programs and/or modules as a module, and can also be run as the main program itself.  Examples:</source>
          <target state="translated">なぜ誰もがこれを望んでいるのか疑問に思うかもしれません。 まあ、他のプログラムやモジュールとしてモジュールとして使用でき、メインプログラム自体としても実行できる &lt;code&gt;.py&lt;/code&gt; ファイルを作成したい場合もあります。 例：</target>
        </trans-unit>
        <trans-unit id="8047f868d8a396e2d98f574de9648be818c0aee6" translate="yes" xml:space="preserve">
          <source>You should see that, where &lt;code&gt;__name__&lt;/code&gt;, where it is the main file (or program) will &lt;em&gt;always&lt;/em&gt; return &lt;code&gt;__main__&lt;/code&gt;, and if it is a module/package, or anything that is running off some other Python script, will return the name of the file where it has originated from.</source>
          <target state="translated">メインファイル（またはプログラム）である &lt;code&gt;__name__&lt;/code&gt; が&lt;em&gt;常に&lt;/em&gt; &lt;code&gt;__main__&lt;/code&gt; &lt;em&gt;を&lt;/em&gt;返し、それがモジュール/パッケージである場合、または他のPythonスクリプトで実行されているものがある場合は、ファイルの名前が返されることがわかります。それがどこから来たか。</target>
        </trans-unit>
        <trans-unit id="737d0a68671613e4f63d5688dcabf38a268873ac" translate="yes" xml:space="preserve">
          <source>You write a module, and if someone wants to use your code they just import it and the &lt;code&gt;__name__&lt;/code&gt; variable can help to separate the executable portion of the program from the library part.</source>
          <target state="translated">あなたがモジュールを書いて、誰かがあなたのコードを使い &lt;code&gt;__name__&lt;/code&gt; ば、彼らはそれをインポートするだけで、 __ name__変数はプログラムの実行可能部分をライブラリ部分から分離するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="e48102eb585faacfdf2ded85e1a6e43222bcef6c" translate="yes" xml:space="preserve">
          <source>Your module is a library, but you want to have a script mode where it runs some unit tests or a demo.</source>
          <target state="translated">モジュールはライブラリですが、ユニットテストやデモを実行するスクリプトモードが欲しいと思います。</target>
        </trans-unit>
        <trans-unit id="9775ebd3a1d07733317e1e64b5d35d40fca683d8" translate="yes" xml:space="preserve">
          <source>Your module is mostly used as a main program, but it also provides a programmer-friendly API for advanced users.</source>
          <target state="translated">あなたのモジュールはほとんどがメインプログラムとして使用されていますが、上級者向けのプログラマフレンドリーなAPIも提供しています。</target>
        </trans-unit>
        <trans-unit id="327fb7d82f537223ad218bd0c2bd1f339f312554" translate="yes" xml:space="preserve">
          <source>Your module is only used as a main program, but it has some unit tests, and the testing framework works by importing &lt;code&gt;.py&lt;/code&gt; files like your script and running special test functions. You don't want it to try running the script just because it's importing the module.</source>
          <target state="translated">モジュールはメインプログラムとしてのみ使用されますが、ユニットテストがいくつかあります。テストフレームワークは、スクリプトのような &lt;code&gt;.py&lt;/code&gt; ファイルをインポートし、特別なテスト関数を実行することで機能します。 モジュールをインポートしているからといって、スクリプトの実行を試みたくありません。</target>
        </trans-unit>
        <trans-unit id="7921914ab3f7b51666817a9add8daeeb610bdeaf" translate="yes" xml:space="preserve">
          <source>all of the code that is at indentation level 0 gets executed.  Functions and classes that are defined are, well, defined, but none of their code gets run.  Unlike other languages, there's no &lt;code&gt;main()&lt;/code&gt; function that gets run automatically - the &lt;code&gt;main()&lt;/code&gt; function is implicitly all the code at the top level.</source>
          <target state="translated">インデントレベル0のすべてのコードが実行されます。 定義されている関数とクラスは定義されていますが、コードは実行されません。 他の言語とは異なり、自動的に実行される &lt;code&gt;main()&lt;/code&gt; 関数はありません。main （）関数は暗黙的に最上位のすべてのコードです。</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">and</target>
        </trans-unit>
        <trans-unit id="57216f4f62e4c7cff528a1042119b6bd292590a1" translate="yes" xml:space="preserve">
          <source>and running it (on a command prompt) with something like:</source>
          <target state="translated">のようなものを使って(コマンドプロンプトで)実行します。</target>
        </trans-unit>
        <trans-unit id="3ef1ebbdd755420799ee3cf5f1bbe79340df1c25" translate="yes" xml:space="preserve">
          <source>at the end of your mycode.py script,</source>
          <target state="translated">を mycode.py スクリプトの最後に記述してください。</target>
        </trans-unit>
        <trans-unit id="d2fb4096be84a03b40677e8860e321cd4dab7598" translate="yes" xml:space="preserve">
          <source>if &lt;strong&gt;name&lt;/strong&gt; == '&lt;strong&gt;main&lt;/strong&gt;':</source>
          <target state="translated">&lt;strong&gt;name&lt;/strong&gt; == ' &lt;strong&gt;main&lt;/strong&gt; 'の場合：</target>
        </trans-unit>
        <trans-unit id="e874b6c8f390f7d7eef2f26e6eba081818ffd576" translate="yes" xml:space="preserve">
          <source>is primarily to avoid the &lt;a href=&quot;https://docs.python.org/2/library/threading.html#importing-in-threaded-code&quot;&gt;import lock&lt;/a&gt; problems that would arise from &lt;a href=&quot;https://stackoverflow.com/questions/46326059/&quot;&gt;having code directly imported&lt;/a&gt;. You want &lt;code&gt;main()&lt;/code&gt; to run if your file was directly invoked (that's the &lt;code&gt;__name__ == &quot;__main__&quot;&lt;/code&gt; case), but if your code was imported then the importer has to enter your code from the true main module to avoid import lock problems.</source>
          <target state="translated">主に、 &lt;a href=&quot;https://stackoverflow.com/questions/46326059/&quot;&gt;コードを直接インポート&lt;/a&gt;することから生じる&lt;a href=&quot;https://docs.python.org/2/library/threading.html#importing-in-threaded-code&quot;&gt;インポートロックの&lt;/a&gt;問題を回避するためです。 ファイルが直接呼び出された場合（つまり、 &lt;code&gt;__name__ == &quot;__main__&quot;&lt;/code&gt; 場合）に &lt;code&gt;main()&lt;/code&gt; を実行する必要がありますが、コードがインポートされた場合、インポーターはインポートロックの問題を回避するために真のメインモジュールからコードを入力する必要があります。</target>
        </trans-unit>
        <trans-unit id="ac8e610ec891561e761ac3b81b1844f41418fb4b" translate="yes" xml:space="preserve">
          <source>it executes all of the code found in the file.</source>
          <target state="translated">ファイル内のすべてのコードを実行します。</target>
        </trans-unit>
        <trans-unit id="0ebc8d74e14ef81dd980f3fabdbf3885802c2366" translate="yes" xml:space="preserve">
          <source>it sets a few special variables like &lt;code&gt;__name__&lt;/code&gt;, and then</source>
          <target state="translated">&lt;code&gt;__name__&lt;/code&gt; のようないくつかの特別な変数を設定し、次に</target>
        </trans-unit>
        <trans-unit id="75cd93d2e463e2434b2a0c03ccd41ae796240e8e" translate="yes" xml:space="preserve">
          <source>means that the code block:</source>
          <target state="translated">は、コードブロックを意味します。</target>
        </trans-unit>
        <trans-unit id="6d7de544326381643ee98f9ae79c1d3e6d9eceef" translate="yes" xml:space="preserve">
          <source>the interpreter will assign the hard-coded string &lt;code&gt;&quot;__main__&quot;&lt;/code&gt; to the &lt;code&gt;__name__&lt;/code&gt; variable, i.e.</source>
          <target state="translated">インタプリタは、ハードコードされた文字列 &lt;code&gt;&quot;__main__&quot;&lt;/code&gt; を &lt;code&gt;__name__&lt;/code&gt; 変数に割り当てます。</target>
        </trans-unit>
        <trans-unit id="0a6a0101819f9a81026cd9527ab3084564a94697" translate="yes" xml:space="preserve">
          <source>the otherwise anonymous global namespace is assigned the value of &lt;code&gt;'__main__'&lt;/code&gt; to its &lt;code&gt;__name__&lt;/code&gt;.</source>
          <target state="translated">そうでなければ匿名のグローバル名前空間には、その &lt;code&gt;__name__&lt;/code&gt; に &lt;code&gt;'__main__'&lt;/code&gt; の値が割り当てられます。</target>
        </trans-unit>
        <trans-unit id="b7dc9621082d73413870731d07212c168ee0c948" translate="yes" xml:space="preserve">
          <source>when it is the primary, entry-point module that is run by a Python process,</source>
          <target state="translated">は、Pythonプロセスによって実行されるプライマリのエントリーポイントモジュールである場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="2616062d77ab8e88551d4e00b757e66c49032c1f" translate="yes" xml:space="preserve">
          <source>will be executed only when you run the module directly; the code block will not execute if another module is calling/importing it because the value of &lt;strong&gt;__name__&lt;/strong&gt; will not equal to &quot;&lt;strong&gt;main&lt;/strong&gt;&quot; in that particular instance.</source>
          <target state="translated">モジュールを直接実行した場合にのみ実行されます。 &lt;strong&gt;__name__&lt;/strong&gt;の値がその特定のインスタンスの「 &lt;strong&gt;main&lt;/strong&gt; 」に等しくないため、別のモジュールがそれを呼び出しているかインポートしている場合、コードブロックは実行されません。</target>
        </trans-unit>
        <trans-unit id="ae6fd70eacf54f86ab690f1936c2bc5c6419b15c" translate="yes" xml:space="preserve">
          <source>will cause your script's uniquely defined &lt;code&gt;main&lt;/code&gt; function to run.</source>
          <target state="translated">スクリプトの一意に定義された &lt;code&gt;main&lt;/code&gt; 関数が実行されます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
