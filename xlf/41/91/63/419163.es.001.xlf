<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/419163">
    <body>
      <group id="419163">
        <trans-unit id="be437cc206c4a893439095f2b33790a548b29bdd" translate="yes" xml:space="preserve">
          <source>(&lt;strong&gt;instead&lt;/strong&gt;) If your module is not the main program but was imported by another one, then &lt;code&gt;__name__&lt;/code&gt; will be &lt;code&gt;&quot;foo&quot;&lt;/code&gt;, not &lt;code&gt;&quot;__main__&quot;&lt;/code&gt;, and it'll skip the body of the &lt;code&gt;if&lt;/code&gt; statement.</source>
          <target state="translated">(en &lt;strong&gt;cambio&lt;/strong&gt; ) Si su m&amp;oacute;dulo no es el programa principal pero fue importado por otro, entonces &lt;code&gt;__name__&lt;/code&gt; ser&amp;aacute; &lt;code&gt;&quot;foo&quot;&lt;/code&gt; , no &lt;code&gt;&quot;__main__&quot;&lt;/code&gt; , y omitir&amp;aacute; el cuerpo de la instrucci&amp;oacute;n &lt;code&gt;if&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="87357c2f1577f162cab1176800cb98e9ae9f1df0" translate="yes" xml:space="preserve">
          <source>(As an aside, &lt;a href=&quot;https://stackoverflow.com/questions/23000075/purpose-of-if-name-main&quot;&gt;this question&lt;/a&gt; contains an answer by @kindall that finally helped me to understand - the why, not the how. Unfortunately it's been marked as a duplicate of &lt;a href=&quot;https://stackoverflow.com/questions/419163/what-does-if-name-main-do&quot;&gt;this one&lt;/a&gt;, which I think is a mistake.)</source>
          <target state="translated">(Como comentario aparte, &lt;a href=&quot;https://stackoverflow.com/questions/23000075/purpose-of-if-name-main&quot;&gt;esta pregunta&lt;/a&gt; contiene una respuesta de @kindall que finalmente me ayud&amp;oacute; a comprender: el por qu&amp;eacute;, no el c&amp;oacute;mo. Lamentablemente, se ha marcado como un duplicado de &lt;a href=&quot;https://stackoverflow.com/questions/419163/what-does-if-name-main-do&quot;&gt;esta&lt;/a&gt; , lo que creo que es un error).</target>
        </trans-unit>
        <trans-unit id="99ee0547f367b7fbe108d02a06130f410fdeed36" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://docs.python.org/2/library/__main__.html&quot;&gt;This idiom can also be found in the Python documentation in an explanation of the &lt;code&gt;__main__&lt;/code&gt; module.&lt;/a&gt; That text states:</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/2/library/__main__.html&quot;&gt;Este modismo tambi&amp;eacute;n se puede encontrar en la documentaci&amp;oacute;n de Python en una explicaci&amp;oacute;n del m&amp;oacute;dulo &lt;code&gt;__main__&lt;/code&gt; .&lt;/a&gt; Ese texto dice:</target>
        </trans-unit>
        <trans-unit id="d07b4aba29e620e47507cb0c3f0488674297686a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'__main__'&lt;/code&gt; is the name of the scope in which top-level code executes. A module&amp;rsquo;s &lt;code&gt;__name__&lt;/code&gt; is set equal to &lt;code&gt;'__main__'&lt;/code&gt; when read from standard input, a script, or from an interactive prompt.</source>
          <target state="translated">&lt;code&gt;'__main__'&lt;/code&gt; es el nombre del &amp;aacute;mbito en el que se ejecuta el c&amp;oacute;digo de nivel superior. El &lt;code&gt;'__main__'&lt;/code&gt; un m&amp;oacute;dulo se establece igual a '__principal__' cuando se lee desde una entrada est&amp;aacute;ndar, un script o desde una solicitud interactiva.</target>
        </trans-unit>
        <trans-unit id="fafdac69f04bc2657902a7797c051653adc55033" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__main__&lt;/code&gt;: Like other programming languages, Python too has an execution entry point, i.e., main. &lt;code&gt;'__main__'&lt;/code&gt;&lt;em&gt;is the name of the scope in which top-level code executes&lt;/em&gt;. Basically you have two ways of using a Python module: Run it directly as a script, or import it. When a module is run as a script, its &lt;code&gt;__name__&lt;/code&gt; is set to &lt;code&gt;__main__&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;__main__&lt;/code&gt; : Al igual que otros lenguajes de programaci&amp;oacute;n, Python tambi&amp;eacute;n tiene un punto de entrada de ejecuci&amp;oacute;n, es decir, main. &lt;code&gt;'__main__'&lt;/code&gt; &lt;em&gt;es el nombre del &amp;aacute;mbito en el que se ejecuta el c&amp;oacute;digo de nivel superior&lt;/em&gt; . B&amp;aacute;sicamente, tiene dos formas de usar un m&amp;oacute;dulo de Python: ejecutarlo directamente como un script o importarlo. Cuando un m&amp;oacute;dulo se ejecuta como un script, su &lt;code&gt;__name__&lt;/code&gt; se establece en &lt;code&gt;__main__&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="39eb9da36f02c4419a8bdef9e03ec68236ed2afc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__name__&lt;/code&gt; can also be used in modules to define the name of a module</source>
          <target state="translated">&lt;code&gt;__name__&lt;/code&gt; tambi&amp;eacute;n se puede usar en m&amp;oacute;dulos para definir el nombre de un m&amp;oacute;dulo</target>
        </trans-unit>
        <trans-unit id="0be6ddf60538888ac5a053e568c5a35b99e293a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__name__&lt;/code&gt; is a &lt;a href=&quot;https://wiki.python.org/moin/DunderAlias&quot;&gt;DunderAlias&lt;/a&gt; - can be thought of as a global variable (accessible from modules) and works in a similar way to &lt;a href=&quot;https://stackoverflow.com/questions/13881395/in-python-what-is-a-global-statement&quot;&gt;&lt;code&gt;global&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;__name__&lt;/code&gt; es un &lt;a href=&quot;https://wiki.python.org/moin/DunderAlias&quot;&gt;DunderAlias&lt;/a&gt; : puede considerarse como una variable global (accesible desde m&amp;oacute;dulos) y funciona de manera similar a &lt;a href=&quot;https://stackoverflow.com/questions/13881395/in-python-what-is-a-global-statement&quot;&gt; &lt;code&gt;global&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="8f7940fd7af049d3ce98c54968886dbc4470c59c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__name__&lt;/code&gt; is a global variable (in Python, global actually means on the &lt;a href=&quot;https://docs.python.org/tutorial/modules.html#modules&quot;&gt;module level&lt;/a&gt;) that exists in all namespaces. It is typically the module's name (as a &lt;code&gt;str&lt;/code&gt; type).</source>
          <target state="translated">&lt;code&gt;__name__&lt;/code&gt; es una variable global (en Python, global en realidad significa en el &lt;a href=&quot;https://docs.python.org/tutorial/modules.html#modules&quot;&gt;nivel&lt;/a&gt; del m&amp;oacute;dulo ) que existe en todos los espacios de nombres. Suele ser el nombre del m&amp;oacute;dulo (como un tipo &lt;code&gt;str&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="2cf51e459a190c18f6d42769d3718fcae45ce2cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__name__&lt;/code&gt; is always equal to &lt;code&gt;__main__&lt;/code&gt; whenever that file is &lt;strong&gt;run directly&lt;/strong&gt; showing that this is the main file.</source>
          <target state="translated">&lt;code&gt;__name__&lt;/code&gt; siempre es igual a &lt;code&gt;__main__&lt;/code&gt; cada vez que ese archivo se &lt;strong&gt;ejecuta directamente,&lt;/strong&gt; lo que muestra que este es el archivo principal.</target>
        </trans-unit>
        <trans-unit id="9bd80d28fa314832c308431bb2b4654a9578e9a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__name__&lt;/code&gt; is an implicit variable in all .py modules; when a.py is imported, the value of &lt;code&gt;__name__&lt;/code&gt; of a.py module is set to its file name &quot;a&quot;; when a.py is run directly using &quot;python a.py&quot;, which means a.py is the entry point, then the value of &lt;code&gt;__name__&lt;/code&gt; of a.py module is set to a string &lt;code&gt;__main__&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;__name__&lt;/code&gt; es una variable impl&amp;iacute;cita en todos los m&amp;oacute;dulos .py; cuando se importa a.py, el valor de &lt;code&gt;__name__&lt;/code&gt; del m&amp;oacute;dulo a.py se establece en su nombre de archivo &quot;a&quot;; cuando a.py se ejecuta directamente usando &quot;python a.py&quot;, lo que significa que a.py es el punto de entrada, entonces el valor de &lt;code&gt;__name__&lt;/code&gt; del m&amp;oacute;dulo a.py se establece en una cadena &lt;code&gt;__main__&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ee91c879b2d309081471328a6d2e05241079dfda" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__name__&lt;/code&gt;: Every module in Python has a special attribute called &lt;code&gt;__name__&lt;/code&gt;.
It is a built-in variable that returns the name of the module.</source>
          <target state="translated">&lt;code&gt;__name__&lt;/code&gt; : Cada m&amp;oacute;dulo en Python tiene un atributo especial llamado &lt;code&gt;__name__&lt;/code&gt; . Es una variable incorporada que devuelve el nombre del m&amp;oacute;dulo.</target>
        </trans-unit>
        <trans-unit id="78840eb1470db249624c988b713afc3e97a69c78" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;if __name__ == &quot;__main__&quot;:&lt;/code&gt; is basically the top-level script environment, and it specifies the interpreter that ('I have the highest priority to be executed first').</source>
          <target state="translated">&lt;code&gt;if __name__ == &quot;__main__&quot;:&lt;/code&gt; es b&amp;aacute;sicamente el entorno de script de nivel superior, y especifica el int&amp;eacute;rprete que ('Tengo la m&amp;aacute;xima prioridad para ejecutar primero').</target>
        </trans-unit>
        <trans-unit id="2340c4517f7704fbff95ab3e637235230b8ccc11" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;if __name__ == &quot;__main__&quot;&lt;/code&gt; is the part that runs when the script is run from (say) the command line using a command like &lt;code&gt;python myscript.py&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;if __name__ == &quot;__main__&quot;&lt;/code&gt; es la parte que se ejecuta cuando el script se ejecuta desde (digamos) la l&amp;iacute;nea de comando usando un comando como &lt;code&gt;python myscript.py&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="018c83f2b5e1ed2102eb4e0da64ee296a8027e39" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import a&lt;/code&gt; action actually runs all that can be ran in &quot;a&quot;</source>
          <target state="translated">&lt;code&gt;import a&lt;/code&gt; acci&amp;oacute;n realmente ejecuta todo lo que se puede ejecutar en &quot;a&quot;</target>
        </trans-unit>
        <trans-unit id="df08731afb7c7ed2393aaa3f368ad0bb925ea7df" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Before explaining anything about &lt;code&gt;if __name__ == '__main__'&lt;/code&gt; it is important to understand what &lt;code&gt;__name__&lt;/code&gt; is and what it does.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Antes de explicar cualquier cosa sobre &lt;code&gt;if __name__ == '__main__'&lt;/code&gt; es importante entender qu&amp;eacute; es &lt;code&gt;__name__&lt;/code&gt; y qu&amp;eacute; hace.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="79da7cc29ac2426a88a714fbfaad47448858fdb1" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Now we know the behaviour of &lt;code&gt;__name__&lt;/code&gt; things become clearer:&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Ahora sabemos que el comportamiento de &lt;code&gt;__name__&lt;/code&gt; cosas se vuelve m&amp;aacute;s claro:&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e6728d8cd0ad927190e1963daa4daa6ea31c0c2f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;example:&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;example:&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="986b24c1aac5848a15ecb03780859084b31b46f1" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;somefile.py:&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;somefile.py:&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="bf1a9df34745e53acb5ed83d94dcb4372a21cee0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;test_file.py:&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;test_file.py:&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="bf539f837085192b477057fecbecb42c7bb86636" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;test_file.py&lt;/em&gt;:</source>
          <target state="translated">&lt;em&gt;test_file.py&lt;/em&gt;:</target>
        </trans-unit>
        <trans-unit id="9b690b9867f89d5298a09814a6babe01c9bf70c4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;1st possibility: Import &lt;code&gt;my_test_module.py&lt;/code&gt; in another module&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Primera posibilidad: importar &lt;code&gt;my_test_module.py&lt;/code&gt; en otro m&amp;oacute;dulo&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7ac4feb6fd281aa9afa7bdda0ab2e439dc46fad0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;2nd possibility: Invoke &lt;code&gt;my_test_module.py&lt;/code&gt; as a script&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Segunda posibilidad: invocar &lt;code&gt;my_test_module.py&lt;/code&gt; como script&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7cc1f82081899627449ae26dee60c95d25b23c96" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Summary&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;Summary&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="49a14964903307d811b50a88b1ff45287fbcbe6d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Always&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Always&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c0f57c51335086529afb8880f52e400970642376" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Executing only if the file is a module or package:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Ejecutar solo si el archivo es un m&amp;oacute;dulo o paquete:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="58b371b66c6af23b26eadee978e7565caf07d812" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;In short&lt;/strong&gt;, use this '&lt;code&gt;if __name__ == &quot;main&quot;&lt;/code&gt; ' block to prevent (certain) code from being run when the module is imported.</source>
          <target state="translated">&lt;strong&gt;En resumen&lt;/strong&gt; , use este bloque ' &lt;code&gt;if __name__ == &quot;main&quot;&lt;/code&gt; ' para evitar que se ejecute (cierto) c&amp;oacute;digo cuando se importa el m&amp;oacute;dulo.</target>
        </trans-unit>
        <trans-unit id="25c82edc0cf6b044fa8902f9ff4abb5f517318e8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Interpreter:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Interpreter:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a9ed28c097ebb85433364ac1f4e044499a4d8c6c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Module or package:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;M&amp;oacute;dulo o paquete:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e1693186367529d23d67840c6cb92fd7b90836c1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Modules:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Modules:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bca1585410631753dd411aa2077f9de811966cd9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Now to answer &lt;code&gt;if __name__ == '__main__'&lt;/code&gt;:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Ahora para responder &lt;code&gt;if __name__ == '__main__'&lt;/code&gt; :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="230a303facf1a2101a405f86dcdb8fcb53a82aea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Only When Your Module Is Imported by Another&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Solo cuando su m&amp;oacute;dulo es importado por otro&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="98cb0f812771c34b1e9af7b910b6edb79e3ec992" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Only When Your Module Is the Main Program&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Solo cuando su m&amp;oacute;dulo es el programa principal&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ecabc97610f091b28f299c3556ae2c2c8ba7ed78" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Practice:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Practice:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e25c5146cc441b2968a8c82ef2238dbdcc07728f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Running one condition if the file is the main one and another if it is not:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Ejecutando una condici&amp;oacute;n si el archivo es el principal y otra si no lo es:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="15379d1a1ff9a18caec0d1609f2db4600cd6fe75" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Script:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Script:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="00e3df3306b151747da81b3135f8996102b6398c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Variants:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Variants:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a427fb5acc312c062284737d9919ea80c80c0203" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;What is &lt;code&gt;__name__&lt;/code&gt;?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&amp;iquest;Qu&amp;eacute; es &lt;code&gt;__name__&lt;/code&gt; ?&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8f2823989afe8101f68c8c884942631f433adaa0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;When Your Module Is Imported By Another&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Cuando su m&amp;oacute;dulo es importado por otro&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6f40fc5f6f2fe7685a294e653a18be70c2bdc7f4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;When Your Module Is the Main Program&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Cuando su m&amp;oacute;dulo es el programa principal&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8da700b6247cf29cd4fd28b742f87b159469d2d7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Where:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Where:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e57f67deaea1f928eb43934d908849cb2ac5b721" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;a&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;a&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="433798c30d6b2ba5b1b05b05cff30873a8571d47" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;b&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;b&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="02f26958ff8bbfffbe238764a41e6feacde136f7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;fibo.py (a module named &lt;code&gt;fibo&lt;/code&gt;)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;fibo.py (un m&amp;oacute;dulo llamado &lt;code&gt;fibo&lt;/code&gt; )&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cf22c4f6ccae5c5a45f16a6c1118de9c5f963fef" translate="yes" xml:space="preserve">
          <source>A Better Way</source>
          <target state="translated">Una mejor manera</target>
        </trans-unit>
        <trans-unit id="cf8a62e672a3b4293103f254c2a62d76c46512dd" translate="yes" xml:space="preserve">
          <source>A side-effect is that you automatically sign on to a methodology that supports multiple entry points. You can run your program using &lt;code&gt;main()&lt;/code&gt; as the entry point, &lt;em&gt;but you don't have to&lt;/em&gt;. While &lt;code&gt;setup.py&lt;/code&gt; expects &lt;code&gt;main()&lt;/code&gt;, other tools use alternate entry points. For example, to run your file as a &lt;code&gt;gunicorn&lt;/code&gt; process, you define an &lt;code&gt;app()&lt;/code&gt; function instead of a &lt;code&gt;main()&lt;/code&gt;. Just as with &lt;code&gt;setup.py&lt;/code&gt;, &lt;code&gt;gunicorn&lt;/code&gt; imports your code so you don't want it do do anything while it's being imported (because of the import lock issue).</source>
          <target state="translated">Un efecto secundario es que inicia sesi&amp;oacute;n autom&amp;aacute;ticamente en una metodolog&amp;iacute;a que admite m&amp;uacute;ltiples puntos de entrada. Puede ejecutar su programa usando &lt;code&gt;main()&lt;/code&gt; como punto de entrada, &lt;em&gt;pero no tiene que hacerlo&lt;/em&gt; . Mientras que &lt;code&gt;setup.py&lt;/code&gt; espera &lt;code&gt;main()&lt;/code&gt; , otras herramientas usan puntos de entrada alternativos. Por ejemplo, para ejecutar su archivo como un proceso &lt;code&gt;gunicorn&lt;/code&gt; , usted define una funci&amp;oacute;n &lt;code&gt;app()&lt;/code&gt; lugar de una &lt;code&gt;main()&lt;/code&gt; . Al igual que con &lt;code&gt;setup.py&lt;/code&gt; , &lt;code&gt;gunicorn&lt;/code&gt; importa su c&amp;oacute;digo, por lo que no quiere que haga nada mientras se importa (debido al problema de bloqueo de importaci&amp;oacute;n).</target>
        </trans-unit>
        <trans-unit id="1279ac465ae03ccecc8242e951637177d836eac0" translate="yes" xml:space="preserve">
          <source>After the special variables are set up, the interpreter executes all the code in the module, one statement at a time. You may want to open another window on the side with the code sample so you can follow along with this explanation.</source>
          <target state="translated">Después de que las variables especiales se configuran,el intérprete ejecuta todo el código del módulo,una declaración a la vez.Puede que quieras abrir otra ventana en el lado con el código de muestra para que puedas seguir junto con esta explicación.</target>
        </trans-unit>
        <trans-unit id="383d69461af4204128d7a2e22e0747b27e8c41c3" translate="yes" xml:space="preserve">
          <source>Again, there will be exceptions, but common practice is that &lt;code&gt;main()&lt;/code&gt; doesn't usually get called externally. So you may be wondering one more thing: if we're not calling &lt;code&gt;main()&lt;/code&gt;, why are we calling the script at all? It's because many people structure their scripts with standalone functions that are built to be run independent of the rest of the code in the file. They're then later called somewhere else in the body of the script. Which brings me to this:</source>
          <target state="translated">Nuevamente, habr&amp;aacute; excepciones, pero la pr&amp;aacute;ctica com&amp;uacute;n es que &lt;code&gt;main()&lt;/code&gt; generalmente no recibe llamadas externas. Entonces, quiz&amp;aacute;s se est&amp;eacute; preguntando una cosa m&amp;aacute;s: si no estamos llamando a &lt;code&gt;main()&lt;/code&gt; , &amp;iquest;por qu&amp;eacute; estamos llamando al script? Esto se debe a que muchas personas estructuran sus scripts con funciones independientes que est&amp;aacute;n dise&amp;ntilde;adas para ejecutarse independientemente del resto del c&amp;oacute;digo en el archivo. Luego se les llama en otro lugar del cuerpo del gui&amp;oacute;n. Lo que me lleva a esto:</target>
        </trans-unit>
        <trans-unit id="a358e3aa692468b145f1d8ad7d489a6ccc1f8b13" translate="yes" xml:space="preserve">
          <source>All the answers have pretty much explained the functionality. But I will provide one example of its usage which might help clearing out the concept further.</source>
          <target state="translated">Todas las respuestas han explicado bastante bien la funcionalidad.Pero daré un ejemplo de su uso que podría ayudar a aclarar más el concepto.</target>
        </trans-unit>
        <trans-unit id="728913bf30e6213619a10923f8ca08b92f0ccf99" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;https://docs.python.org/3/tutorial/controlflow.html#if-statements&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt; is a flow control statement that contains the block of code will execute if the value given is true. We have seen that &lt;code&gt;__name__&lt;/code&gt; can take either 
&lt;code&gt;__main__&lt;/code&gt; or the file name it has been imported from.</source>
          <target state="translated">Un &lt;a href=&quot;https://docs.python.org/3/tutorial/controlflow.html#if-statements&quot;&gt; &lt;code&gt;if&lt;/code&gt; &lt;/a&gt; es una declaraci&amp;oacute;n de control de flujo que contiene el bloque de c&amp;oacute;digo que se ejecutar&amp;aacute; si el valor dado es verdadero. Hemos visto que &lt;code&gt;__name__&lt;/code&gt; puede tomar &lt;code&gt;__main__&lt;/code&gt; o el nombre del archivo desde el que se ha importado.</target>
        </trans-unit>
        <trans-unit id="291a6a1c87e677da65912996bc98ea09be8c889c" translate="yes" xml:space="preserve">
          <source>An Even Better Way</source>
          <target state="translated">Una forma aún mejor</target>
        </trans-unit>
        <trans-unit id="e25027686192c6d115ffa987e895d2c366f4813e" translate="yes" xml:space="preserve">
          <source>And a second file &quot;xy.py&quot;:</source>
          <target state="translated">Y un segundo archivo &quot;xy.py&quot;:</target>
        </trans-unit>
        <trans-unit id="56bea24f0fbd1f255ecadf46a21ba6a136330f7a" translate="yes" xml:space="preserve">
          <source>And the output from executing script2 is:</source>
          <target state="translated">Y la salida de la ejecución de script2 es:</target>
        </trans-unit>
        <trans-unit id="32c90a0b6a16423e14ed51492f9d35d3262ee3dc" translate="yes" xml:space="preserve">
          <source>And then you'll have to remember whether or not you've commented out your test function call. And this extra complexity would mean you're likely to forget, making your development process more troublesome.</source>
          <target state="translated">Y entonces tendrás que recordar si has comentado o no la llamada de la función de prueba.Y esta complejidad adicional significaría que probablemente lo olvides,haciendo que tu proceso de desarrollo sea más problemático.</target>
        </trans-unit>
        <trans-unit id="27665df0153065e46daf1f28871bd9475bf8e1d5" translate="yes" xml:space="preserve">
          <source>Another benefit of using this construct: you can also import your code as a module in another script and then run the main function if and when your program decides:</source>
          <target state="translated">Otro beneficio de usar esta construcción:también puedes importar tu código como un módulo en otro script y luego ejecutar la función principal si y cuando tu programa lo decida:</target>
        </trans-unit>
        <trans-unit id="e24f293208b0bd554685671142f6ee40f5264006" translate="yes" xml:space="preserve">
          <source>Another one.</source>
          <target state="translated">Otro más.</target>
        </trans-unit>
        <trans-unit id="490e331532fa57020b75e3d7497ad0ed1e28417b" translate="yes" xml:space="preserve">
          <source>Any other script that's called from this &lt;code&gt;&quot;__main__&quot;&lt;/code&gt; script is assigned its filename as its &lt;code&gt;__name__&lt;/code&gt; (e.g., &lt;code&gt;__name__ == &quot;ab.py&quot;&lt;/code&gt;). Hence, the line &lt;code&gt;if __name__ == &quot;__main__&quot;:&lt;/code&gt; is the interpreter's test to determine if it's interpreting/parsing the 'home' script that was initially executed, or if it's temporarily peeking into another (external) script. This gives the programmer flexibility to have the script behave differently if it's executed directly vs. called externally.</source>
          <target state="translated">A cualquier otro script que se llame desde este &lt;code&gt;&quot;__main__&quot;&lt;/code&gt; se le asigna su nombre de archivo como su &lt;code&gt;__name__&lt;/code&gt; (por ejemplo, &lt;code&gt;__name__ == &quot;ab.py&quot;&lt;/code&gt; ). Por lo tanto, la l&amp;iacute;nea &lt;code&gt;if __name__ == &quot;__main__&quot;:&lt;/code&gt; es la prueba del int&amp;eacute;rprete para determinar si est&amp;aacute; interpretando / analizando el script 'home' que se ejecut&amp;oacute; inicialmente, o si est&amp;aacute; mirando temporalmente a otro script (externo). Esto le da flexibilidad al programador para que el script se comporte de manera diferente si se ejecuta directamente frente a una llamada externa.</target>
        </trans-unit>
        <trans-unit id="4f021478ef2f8fb352704d122ccd48a0f448bb10" translate="yes" xml:space="preserve">
          <source>As an example, consider the following module &lt;code&gt;my_test_module.py&lt;/code&gt;:</source>
          <target state="translated">Como ejemplo, considere el siguiente m&amp;oacute;dulo &lt;code&gt;my_test_module.py&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="c8214b3e3fc0c1096a5057a6fbcda3ca94b4ab14" translate="yes" xml:space="preserve">
          <source>As by default (when module running as main, not imported) the &lt;code&gt;__name__&lt;/code&gt; variable is set to &lt;code&gt;&quot;__main__&quot;&lt;/code&gt;, and when it'll be imported the &lt;code&gt;__name__&lt;/code&gt; variable will get a different value, most probably the name of the module (&lt;code&gt;'M'&lt;/code&gt;).
This is helpful in running different variants of a modules together, and separating their specific input &amp;amp; output statements and also if there are any test-cases.</source>
          <target state="translated">De manera predeterminada (cuando el m&amp;oacute;dulo se ejecuta como principal, no importado), la variable &lt;code&gt;__name__&lt;/code&gt; se establece en &lt;code&gt;&quot;__main__&quot;&lt;/code&gt; , y cuando se importe, la variable &lt;code&gt;__name__&lt;/code&gt; obtendr&amp;aacute; un valor diferente, probablemente el nombre del m&amp;oacute;dulo ( &lt;code&gt;'M'&lt;/code&gt; ) Esto es &amp;uacute;til para ejecutar diferentes variantes de m&amp;oacute;dulos juntos, y separar sus declaraciones de entrada y salida espec&amp;iacute;ficas y tambi&amp;eacute;n si hay casos de prueba.</target>
        </trans-unit>
        <trans-unit id="0fb36a6c33279c346eb468f0e09c25e124f94cda" translate="yes" xml:space="preserve">
          <source>As the only special case, however, in whatever Python process you run, as in mycode.py:</source>
          <target state="translated">Como el único caso especial,sin embargo,en cualquier proceso de Python que se ejecute,como en mycode.py:</target>
        </trans-unit>
        <trans-unit id="77a8033bf10bed893a83d034163981dde9b5ee97" translate="yes" xml:space="preserve">
          <source>As you can see, &lt;code&gt;__name__&lt;/code&gt; tells us which code is the 'main' module.
This is great, because you can just write code and not have to worry about structural issues like in C/C++, where, if a file does not implement a 'main' function then it cannot be compiled as an executable and if it does, it cannot then be used as a library.</source>
          <target state="translated">Como puede ver, &lt;code&gt;__name__&lt;/code&gt; nos dice qu&amp;eacute; c&amp;oacute;digo es el m&amp;oacute;dulo 'principal'. Esto es genial, porque puede escribir c&amp;oacute;digo y no tener que preocuparse por problemas estructurales como en C / C ++, donde, si un archivo no implementa una funci&amp;oacute;n 'principal', entonces no puede compilarse como un ejecutable y si lo hace, entonces no puede usarse como biblioteca.</target>
        </trans-unit>
        <trans-unit id="c45bdc9c773c22c178338f1dc79c2aa63246ed33" translate="yes" xml:space="preserve">
          <source>As you can see, when a file is executed, Python sets &lt;code&gt;globals()['__name__']&lt;/code&gt; in this file to &lt;code&gt;&quot;__main__&quot;&lt;/code&gt;. This time, the &lt;code&gt;if&lt;/code&gt; statement evaluates to &lt;code&gt;True&lt;/code&gt; and is being run.</source>
          <target state="translated">Como puede ver, cuando se ejecuta un archivo, Python establece &lt;code&gt;globals()['__name__']&lt;/code&gt; en este archivo a &lt;code&gt;&quot;__main__&quot;&lt;/code&gt; . Esta vez, la instrucci&amp;oacute;n &lt;code&gt;if&lt;/code&gt; se eval&amp;uacute;a como &lt;code&gt;True&lt;/code&gt; y se est&amp;aacute; ejecutando.</target>
        </trans-unit>
        <trans-unit id="fa35fc2b3ffb5707c6ed36201d14709b2795177a" translate="yes" xml:space="preserve">
          <source>As you can see, when a module is imported, Python sets &lt;code&gt;globals()['__name__']&lt;/code&gt; in this module to the module's name. Also, upon import all the code in the module is being run. As the &lt;code&gt;if&lt;/code&gt; statement evaluates to &lt;code&gt;False&lt;/code&gt; this part is not executed.</source>
          <target state="translated">Como puede ver, cuando se importa un m&amp;oacute;dulo, Python establece &lt;code&gt;globals()['__name__']&lt;/code&gt; en este m&amp;oacute;dulo con el nombre del m&amp;oacute;dulo. Adem&amp;aacute;s, al importar todo el c&amp;oacute;digo del m&amp;oacute;dulo se est&amp;aacute; ejecutando. Como la instrucci&amp;oacute;n &lt;code&gt;if&lt;/code&gt; se eval&amp;uacute;a como &lt;code&gt;False&lt;/code&gt; , esta parte no se ejecuta.</target>
        </trans-unit>
        <trans-unit id="4174aeb05b05eec8583dcae607865c6ef32ba122" translate="yes" xml:space="preserve">
          <source>Assume that you have two Python files, a.py and b.py. Now, a.py imports b.py. We run the a.py file, where the &quot;import b.py&quot; code is executed first. Before the rest of the a.py code runs, the code in the file b.py must run completely.</source>
          <target state="translated">Asume que tienes dos archivos Python,a.py y b.py.Ahora,a.py importa b.py.Ejecutamos el archivo a.py,donde se ejecuta primero el código &quot;importar b.py&quot;.Antes de que se ejecute el resto del código de a.py,el código del archivo b.py debe ejecutarse completamente.</target>
        </trans-unit>
        <trans-unit id="53de5b46d0fbb20fff33ad741960e992c53e5836" translate="yes" xml:space="preserve">
          <source>Based on the mechanism how python sets the variable &lt;code&gt;__name__&lt;/code&gt; for each module, do you know how to achieve point 3? The answer is fairly easy, right? Put a if condition: &lt;code&gt;if __name__ == &quot;__main__&quot;: ...&lt;/code&gt;; you can even put if &lt;code&gt;__name__ == &quot;a&quot;&lt;/code&gt; depending on your functional need</source>
          <target state="translated">Basado en el mecanismo de c&amp;oacute;mo Python establece la variable &lt;code&gt;__name__&lt;/code&gt; para cada m&amp;oacute;dulo, &amp;iquest;sabe c&amp;oacute;mo lograr el punto 3? La respuesta es bastante f&amp;aacute;cil, &amp;iquest;verdad? Ponga una condici&amp;oacute;n if: &lt;code&gt;if __name__ == &quot;__main__&quot;: ...&lt;/code&gt; ; incluso puede poner si &lt;code&gt;__name__ == &quot;a&quot;&lt;/code&gt; dependiendo de su necesidad funcional</target>
        </trans-unit>
        <trans-unit id="b5daba4bc12144be47ac4ef97123506a5d670ee9" translate="yes" xml:space="preserve">
          <source>Because of point 1, you may not want everything to be run in &quot;a&quot; when importing it</source>
          <target state="translated">Debido al punto 1,puede que no quieras que todo se ejecute en &quot;a&quot; al importarlo</target>
        </trans-unit>
        <trans-unit id="5555032fd1fd8c47f02216cf05cff7797235c4eb" translate="yes" xml:space="preserve">
          <source>Before the interpreter executes the source code file though, it defines a few special variables for that file; &lt;strong&gt;__name__&lt;/strong&gt; is one of those special variables that Python automatically defines for each source code file.</source>
          <target state="translated">Sin embargo, antes de que el int&amp;eacute;rprete ejecute el archivo de c&amp;oacute;digo fuente, define algunas variables especiales para ese archivo; &lt;strong&gt;__name__&lt;/strong&gt; es una de esas variables especiales que Python define autom&amp;aacute;ticamente para cada archivo de c&amp;oacute;digo fuente.</target>
        </trans-unit>
        <trans-unit id="be4403cc17466eedfa891d4a51f7740fa3d7f3f3" translate="yes" xml:space="preserve">
          <source>Being a variable means that it's value &lt;em&gt;can&lt;/em&gt; be overwritten (&quot;can&quot; does not mean &quot;should&quot;), overwriting the value of &lt;code&gt;__name__&lt;/code&gt; will result in a lack of readability.  So do not do it, for any reason.  If you need a variable define a new variable.</source>
          <target state="translated">Ser una variable significa que su valor &lt;em&gt;puede&lt;/em&gt; sobrescribirse (&quot;can&quot; no significa &quot;deber&amp;iacute;a&quot;), sobrescribir el valor de &lt;code&gt;__name__&lt;/code&gt; dar&amp;aacute; como resultado una falta de legibilidad. As&amp;iacute; que no lo hagas, por ning&amp;uacute;n motivo. Si necesita una variable, defina una nueva variable.</target>
        </trans-unit>
        <trans-unit id="cdba82558e6d2b296c8fda06454da814e1ab4ab2" translate="yes" xml:space="preserve">
          <source>Beyond those examples, it's elegant that running a script in Python is just setting up a few magic variables and importing the script. &quot;Running&quot; the script is a side effect of importing the script's module.</source>
          <target state="translated">Más allá de esos ejemplos,es elegante que ejecutar un guión en Python es sólo establecer unas pocas variables mágicas e importar el guión.&quot;Ejecutar&quot; el guión es un efecto secundario de la importación del módulo del guión.</target>
        </trans-unit>
        <trans-unit id="7fdb9a68214237799e539012c1ae04b1ee6fcbff" translate="yes" xml:space="preserve">
          <source>Blocks A and B are run when we are running &quot;x.py&quot;.</source>
          <target state="translated">Los bloques A y B se ejecutan cuando estamos ejecutando &quot;x.py&quot;.</target>
        </trans-unit>
        <trans-unit id="51aacee3ee9f4b0785c1a298e8721c7f3d008776" translate="yes" xml:space="preserve">
          <source>But inside the primary module (or an interactive Python session, i.e. the interpreter's Read, Eval, Print Loop, or REPL) you are running everything from its &lt;code&gt;&quot;__main__&quot;&lt;/code&gt;.</source>
          <target state="translated">Pero dentro del m&amp;oacute;dulo primario (o una sesi&amp;oacute;n interactiva de Python, es decir, Read, Eval, Print Loop o REPL del int&amp;eacute;rprete) est&amp;aacute; ejecutando todo desde su &lt;code&gt;&quot;__main__&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3d45165ec85f4c41aac136977806fa7b3e1b0399" translate="yes" xml:space="preserve">
          <source>But just block A (and not B) is run when we are running another module, &quot;y.py&quot; for example, in which x.y is imported and the code is run from there (like when a function in &quot;x.py&quot; is called from y.py).</source>
          <target state="translated">Pero sólo se ejecuta el bloque A (y no el B)cuando estamos ejecutando otro módulo,&quot;y.py&quot; por ejemplo,en el que se importa x.y y el código se ejecuta desde allí (como cuando una función en &quot;x.py&quot; se llama desde y.py).</target>
        </trans-unit>
        <trans-unit id="187017f79b4f4176019be635feccedac47d394a8" translate="yes" xml:space="preserve">
          <source>But that's a script that probably can't have its functions called externally, because if it did it would immediately start calculating and assigning variables. And chances are if you're trying to re-use a function, your new script is related closely enough to the old one that there will be conflicting variables.</source>
          <target state="translated">Pero ese es un script que probablemente no puede hacer que sus funciones sean llamadas externamente,porque si lo hiciera comenzaría inmediatamente a calcular y asignar variables.Y lo más probable es que si estás tratando de reutilizar una función,tu nuevo script está lo suficientemente relacionado con el antiguo como para que haya variables conflictivas.</target>
        </trans-unit>
        <trans-unit id="e0cc7be78b4f7426e808a9f14bb2ee02b52a60bf" translate="yes" xml:space="preserve">
          <source>But the code works without it</source>
          <target state="translated">Pero el código funciona sin él</target>
        </trans-unit>
        <trans-unit id="b868b03c6a857fb43254a438d5d2b52f62b19ea2" translate="yes" xml:space="preserve">
          <source>Call the class from other files. You just have to import it in the calling program.</source>
          <target state="translated">Llama a la clase desde otros archivos.Sólo tienes que importarlo en el programa de llamadas.</target>
        </trans-unit>
        <trans-unit id="d1249e34e446972c34012a866f67bc184db7bc52" translate="yes" xml:space="preserve">
          <source>Code Sample</source>
          <target state="translated">Muestra de código</target>
        </trans-unit>
        <trans-unit id="75e291169a2ebb63c935a5de7382990c0513d618" translate="yes" xml:space="preserve">
          <source>Consider:</source>
          <target state="translated">Consider:</target>
        </trans-unit>
        <trans-unit id="9274899889be8b8adc4e3be4ea8d4a133c134b2d" translate="yes" xml:space="preserve">
          <source>Create a file, &lt;strong&gt;a.py&lt;/strong&gt;:</source>
          <target state="translated">Crea un archivo, &lt;strong&gt;a.py&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="56a0a9523b0c4b5eb5e2bbdb33ad60b126caa07f" translate="yes" xml:space="preserve">
          <source>Create another file, &lt;strong&gt;b.py&lt;/strong&gt;, in the same directory:</source>
          <target state="translated">Cree otro archivo, &lt;strong&gt;b.py&lt;/strong&gt; , en el mismo directorio:</target>
        </trans-unit>
        <trans-unit id="cd3b4d3abc33414ae3e100a1d6cbfe6b75ea5eb4" translate="yes" xml:space="preserve">
          <source>Create the following files.</source>
          <target state="translated">Crea los siguientes archivos.</target>
        </trans-unit>
        <trans-unit id="28d96b6441a5da8450600f4898f133fbdd6961e4" translate="yes" xml:space="preserve">
          <source>Developing and Testing Your Code</source>
          <target state="translated">Desarrollando y probando su código</target>
        </trans-unit>
        <trans-unit id="6bc05812a294f6f7a5f9e19db22d8cd3b2afc410" translate="yes" xml:space="preserve">
          <source>End of file; back to &lt;code&gt;&quot;__main__&quot;&lt;/code&gt;!</source>
          <target state="translated">Fin del documento; volver a &lt;code&gt;&quot;__main__&quot;&lt;/code&gt; !</target>
        </trans-unit>
        <trans-unit id="ccf898dbe57906e5594bcd719f8b93726090fd0d" translate="yes" xml:space="preserve">
          <source>Every module in python has a attribute called &lt;code&gt;__name__&lt;/code&gt;. The value of &lt;code&gt;__name__&lt;/code&gt;  attribute is  &lt;code&gt;__main__&lt;/code&gt;  when the module is run directly, like &lt;code&gt;python my_module.py&lt;/code&gt;. Otherwise (like when you say &lt;code&gt;import my_module&lt;/code&gt;) the value of &lt;code&gt;__name__&lt;/code&gt;  is the name of the module.</source>
          <target state="translated">Cada m&amp;oacute;dulo en python tiene un atributo llamado &lt;code&gt;__name__&lt;/code&gt; . El valor del atributo &lt;code&gt;__name__&lt;/code&gt; es &lt;code&gt;__main__&lt;/code&gt; cuando el m&amp;oacute;dulo se ejecuta directamente, como &lt;code&gt;python my_module.py&lt;/code&gt; . De lo contrario (como cuando dice &lt;code&gt;import my_module&lt;/code&gt; ) el valor de &lt;code&gt;__name__&lt;/code&gt; es el nombre del m&amp;oacute;dulo.</target>
        </trans-unit>
        <trans-unit id="8ea353689f62515305875bd4c1491c1b1eda4969" translate="yes" xml:space="preserve">
          <source>Executing the Module's Code</source>
          <target state="translated">Ejecutar el código del módulo</target>
        </trans-unit>
        <trans-unit id="decbc65feed3492d925a3828afa0685ee965a44f" translate="yes" xml:space="preserve">
          <source>Food for Thought</source>
          <target state="translated">Alimento para el pensamiento</target>
        </trans-unit>
        <trans-unit id="c01b0b737be74a6ef3efec2d9c67ec6b0e73c2dd" translate="yes" xml:space="preserve">
          <source>For the latter case, the class should contain a public static void main() method. In Python this purpose is served by the globally defined label &lt;code&gt;'__main__'&lt;/code&gt;.</source>
          <target state="translated">Para el &amp;uacute;ltimo caso, la clase debe contener un m&amp;eacute;todo main () vac&amp;iacute;o p&amp;uacute;blico est&amp;aacute;tico. En Python, este prop&amp;oacute;sito se &lt;code&gt;'__main__'&lt;/code&gt; mediante la etiqueta globalmente definida '__main__' .</target>
        </trans-unit>
        <trans-unit id="06c6abe53de8158ff545ff3025465ac568502266" translate="yes" xml:space="preserve">
          <source>Function &lt;code&gt;x()&lt;/code&gt;; ok, printing '&lt;em&gt;peripheral task: might be useful in other projects&lt;/em&gt;'.</source>
          <target state="translated">Funci&amp;oacute;n &lt;code&gt;x()&lt;/code&gt; ; ok, imprimiendo ' &lt;em&gt;tarea perif&amp;eacute;rica: podr&amp;iacute;a ser &amp;uacute;til en otros proyectos&lt;/em&gt; '.</target>
        </trans-unit>
        <trans-unit id="270272d52b278ed4834707720d02142b04dac683" translate="yes" xml:space="preserve">
          <source>Given the following code, what does the &lt;code&gt;if __name__ == &quot;__main__&quot;:&lt;/code&gt; do?</source>
          <target state="translated">Dado el siguiente c&amp;oacute;digo, &amp;iquest;qu&amp;eacute; hace el &lt;code&gt;if __name__ == &quot;__main__&quot;:&lt;/code&gt; do?</target>
        </trans-unit>
        <trans-unit id="c532f4344993da004ef0d886409dd1dc176dd817" translate="yes" xml:space="preserve">
          <source>Hope this helps out.</source>
          <target state="translated">Espero que esto ayude.</target>
        </trans-unit>
        <trans-unit id="7cf7df778e073d4ee9549c9276978c839886daaf" translate="yes" xml:space="preserve">
          <source>However, if you want to import the module to another script:</source>
          <target state="translated">Sin embargo,si quieres importar el módulo a otro guión:</target>
        </trans-unit>
        <trans-unit id="3f7f6f7cdf15bc15aa54e3347e678918567e405d" translate="yes" xml:space="preserve">
          <source>However, if your Python script is used by a module, any code outside of the &lt;code&gt;if&lt;/code&gt; statement will be executed, so &lt;code&gt;if \__name__ == &quot;\__main__&quot;&lt;/code&gt; is used just to check if the program is used as a module or not, and therefore decides whether to run the code.</source>
          <target state="translated">Sin embargo, si un m&amp;oacute;dulo usa su script Python, se ejecutar&amp;aacute; cualquier c&amp;oacute;digo fuera de la instrucci&amp;oacute;n &lt;code&gt;if&lt;/code&gt; , por lo que &lt;code&gt;if \__name__ == &quot;\__main__&quot;&lt;/code&gt; solo para verificar si el programa se usa como m&amp;oacute;dulo o no, y por lo tanto, decide si ejecutar el c&amp;oacute;digo.</target>
        </trans-unit>
        <trans-unit id="27aee883b9125fa742bdc6ce62419f671fc09b30" translate="yes" xml:space="preserve">
          <source>I am not saying you should use this in production code, but it serves to illustrate that there is nothing &quot;magical&quot; about &lt;code&gt;if __name__ == '__main__'&lt;/code&gt;. It is a good convention for invoking a main function in Python files.</source>
          <target state="translated">No estoy diciendo que deba usar esto en el c&amp;oacute;digo de producci&amp;oacute;n, pero sirve para ilustrar que no hay nada &quot;m&amp;aacute;gico&quot; sobre &lt;code&gt;if __name__ == '__main__'&lt;/code&gt; . Es una buena convenci&amp;oacute;n para invocar una funci&amp;oacute;n principal en archivos Python.</target>
        </trans-unit>
        <trans-unit id="7aaee90df97cdf574f54c44ac544ddfd2ecf3202" translate="yes" xml:space="preserve">
          <source>I think it's best to break the answer in depth and in simple words:</source>
          <target state="translated">Creo que es mejor romper la respuesta en profundidad y con palabras simples:</target>
        </trans-unit>
        <trans-unit id="2d610a68610206f4422d124c53fd2b4ef28bb011" translate="yes" xml:space="preserve">
          <source>I've been reading so much throughout the answers on this page. I would say, if you know the thing, for sure you will understand those answers, otherwise, you are still confused.</source>
          <target state="translated">He estado leyendo mucho a lo largo de las respuestas de esta página.Diría,si lo sabes,que seguro que entenderás esas respuestas,de lo contrario,sigues confundido.</target>
        </trans-unit>
        <trans-unit id="7dc8666b8e0d5305ca6686fcdd3a64aa30613f45" translate="yes" xml:space="preserve">
          <source>If Python is loading this source code file as the main program (i.e. the file you run), then it sets the special &lt;strong&gt;__name__&lt;/strong&gt; variable for this file to have a value &lt;strong&gt;&quot;__main__&quot;&lt;/strong&gt;.</source>
          <target state="translated">Si Python est&amp;aacute; cargando este archivo de c&amp;oacute;digo fuente como el programa principal (es decir, el archivo que ejecuta), establece la variable especial &lt;strong&gt;__name__&lt;/strong&gt; para que este archivo tenga un valor &lt;strong&gt;&quot;__main__&quot;&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="a009492026900b4a9397225067c6a9f84f8e1216" translate="yes" xml:space="preserve">
          <source>If indeed &lt;code&gt;__name__&lt;/code&gt; does take the value of &lt;code&gt;__main__&lt;/code&gt; then whatever is in that block of code will execute.</source>
          <target state="translated">Si efectivamente &lt;code&gt;__name__&lt;/code&gt; toma el valor de &lt;code&gt;__main__&lt;/code&gt; , entonces se ejecutar&amp;aacute; lo que est&amp;eacute; en ese bloque de c&amp;oacute;digo.</target>
        </trans-unit>
        <trans-unit id="0a6d69f64768205bc73fd5ba1367e74b8059c5c0" translate="yes" xml:space="preserve">
          <source>If the python interpreter is running&amp;nbsp;a particular module then &lt;code&gt;__name__&lt;/code&gt; global  variable will have value &lt;code&gt;&quot;__main__&quot;&lt;/code&gt;</source>
          <target state="translated">Si el int&amp;eacute;rprete de Python est&amp;aacute; ejecutando un m&amp;oacute;dulo en particular, la variable global &lt;code&gt;__name__&lt;/code&gt; tendr&amp;aacute; el valor &lt;code&gt;&quot;__main__&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b1094aa47aa3aeccd6ed85b8ebb5ed271222d0e3" translate="yes" xml:space="preserve">
          <source>If this .py are run by &lt;code&gt;python this_py.py&lt;/code&gt; under shell, or double clicked in Windows. the code under &quot;the if statement&quot; will be executed.</source>
          <target state="translated">Si este .py lo ejecuta &lt;code&gt;python this_py.py&lt;/code&gt; bajo shell, o hace doble clic en Windows. se ejecutar&amp;aacute; el c&amp;oacute;digo debajo de &quot;la declaraci&amp;oacute;n if&quot;.</target>
        </trans-unit>
        <trans-unit id="f0f1e75c2a123bfd0fe539932a26c8d0e246a7f1" translate="yes" xml:space="preserve">
          <source>If this .py file are imported by other .py files, the code under &quot;the if statement&quot; will not be executed.</source>
          <target state="translated">Si este archivo .py es importado por otros archivos .py,el código de la &quot;declaración if&quot; no será ejecutado.</target>
        </trans-unit>
        <trans-unit id="cfc7c4aaf15b28c6320a80c22273eb5bfeb2a46e" translate="yes" xml:space="preserve">
          <source>If this is being imported from another module, &lt;strong&gt;__name__&lt;/strong&gt; will be set to that module's name.</source>
          <target state="translated">Si esto se importa desde otro m&amp;oacute;dulo, &lt;strong&gt;__name__&lt;/strong&gt; se establecer&amp;aacute; con el nombre de ese m&amp;oacute;dulo.</target>
        </trans-unit>
        <trans-unit id="6523f8ca1b9a6c1da707b351f493c4cbbace2647" translate="yes" xml:space="preserve">
          <source>If we put the code we want to exercise as we develop and test in a function like this and then do our check for &lt;code&gt;'__main__'&lt;/code&gt; immediately after:</source>
          <target state="translated">Si ponemos el c&amp;oacute;digo que queremos ejercitar a medida que desarrollamos y probamos una funci&amp;oacute;n como esta y luego hacemos nuestra comprobaci&amp;oacute;n de &lt;code&gt;'__main__'&lt;/code&gt; inmediatamente despu&amp;eacute;s:</target>
        </trans-unit>
        <trans-unit id="bc80bf0204f13ba7089b5451f461bfc665cec29b" translate="yes" xml:space="preserve">
          <source>If we run the code directly via &lt;code&gt;python test.py&lt;/code&gt;, the module name is &lt;code&gt;__main__&lt;/code&gt;:</source>
          <target state="translated">Si ejecutamos el c&amp;oacute;digo directamente a trav&amp;eacute;s de &lt;code&gt;python test.py&lt;/code&gt; , el nombre del m&amp;oacute;dulo es &lt;code&gt;__main__&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="a6516beb3b9f8bebd5a8fe5d91c615ccfb9500a4" translate="yes" xml:space="preserve">
          <source>If you are running your module (the source file) as the main program, e.g.</source>
          <target state="translated">Si está ejecutando su módulo (el archivo fuente)como el programa principal,por ejemplo.</target>
        </trans-unit>
        <trans-unit id="5a002ca7d32e704fd426536fc54e7e1e47ad2e8b" translate="yes" xml:space="preserve">
          <source>If you import this file say A to file B  and execute the file B then &lt;code&gt;if __name__ == &quot;__main__&quot;&lt;/code&gt; in file A becomes false, so it prints  &lt;strong&gt;You can't see me&lt;/strong&gt;</source>
          <target state="translated">Si importa este archivo, diga A al archivo B y ejecute el archivo B, entonces &lt;code&gt;if __name__ == &quot;__main__&quot;&lt;/code&gt; en el archivo A se convierte en falso, por lo que se imprime &lt;strong&gt;No puede verme&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bae9f62ff08151418abbbc49ef9673f76cd6210a" translate="yes" xml:space="preserve">
          <source>If you run &lt;code&gt;two.py&lt;/code&gt; instead:</source>
          <target state="translated">Si ejecutas &lt;code&gt;two.py&lt;/code&gt; en su lugar:</target>
        </trans-unit>
        <trans-unit id="3d5150bf1d7adcfd96cab36821f53eb6a118618d" translate="yes" xml:space="preserve">
          <source>If your module is the main program, then it will see that &lt;code&gt;__name__&lt;/code&gt; was indeed set to &lt;code&gt;&quot;__main__&quot;&lt;/code&gt; and it calls the two functions, printing the strings &lt;code&gt;&quot;Function A&quot;&lt;/code&gt; and &lt;code&gt;&quot;Function B 10.0&quot;&lt;/code&gt;.</source>
          <target state="translated">Si su m&amp;oacute;dulo es el programa principal, ver&amp;aacute; que &lt;code&gt;__name__&lt;/code&gt; se configur&amp;oacute; en &lt;code&gt;&quot;__main__&quot;&lt;/code&gt; y llama a las dos funciones, imprimiendo las cadenas &lt;code&gt;&quot;Function A&quot;&lt;/code&gt; y &lt;code&gt;&quot;Function B 10.0&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="dec279dce56fe81437675634947d0898c2cd9a40" translate="yes" xml:space="preserve">
          <source>If your script is being imported into another module, its various function and class definitions will be imported and its top-level code will be executed, but the code in the then-body of the &lt;code&gt;if&lt;/code&gt; clause above won't get run as the condition is not met. As a basic example, consider the following two scripts:</source>
          <target state="translated">Si su script se est&amp;aacute; importando a otro m&amp;oacute;dulo, se importar&amp;aacute;n sus diversas funciones y definiciones de clase y se ejecutar&amp;aacute; su c&amp;oacute;digo de nivel superior, pero el c&amp;oacute;digo en el cuerpo de la cl&amp;aacute;usula &lt;code&gt;if&lt;/code&gt; anterior no se ejecutar&amp;aacute; como condici&amp;oacute;n No se cumple. Como ejemplo b&amp;aacute;sico, considere los siguientes dos scripts:</target>
        </trans-unit>
        <trans-unit id="47cbbcfd6a2d88e3b7665ea5155dcef87bbe0234" translate="yes" xml:space="preserve">
          <source>Import and open file with the &lt;code&gt;__name__ == &quot;ab.py&quot;&lt;/code&gt;.</source>
          <target state="translated">Importe y abra el archivo con &lt;code&gt;__name__ == &quot;ab.py&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4339fb8da56f030c085b801561fcd6353668defe" translate="yes" xml:space="preserve">
          <source>In other words, the code within the &lt;code&gt;if&lt;/code&gt; block will be executed only when the code runs directly. Here &lt;code&gt;directly&lt;/code&gt; means &lt;code&gt;not imported&lt;/code&gt;.</source>
          <target state="translated">En otras palabras, el c&amp;oacute;digo dentro del bloque &lt;code&gt;if&lt;/code&gt; se ejecutar&amp;aacute; solo cuando el c&amp;oacute;digo se ejecute directamente. Aqu&amp;iacute; &lt;code&gt;directly&lt;/code&gt; significa &lt;code&gt;not imported&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7ef3470680942e6fd3926f3ffbec1e8810ecf8fb" translate="yes" xml:space="preserve">
          <source>In splitting out independent functions, you gain the ability to re-use your previous work by calling them into another script. For example, &quot;example.py&quot; might import &quot;xy.py&quot; and call &lt;code&gt;x()&lt;/code&gt;, making use of the 'x' function from &quot;xy.py&quot;. (Maybe it's capitalizing the third word of a given text string; creating a NumPy array from a list of numbers and squaring them; or detrending a 3D surface. The possibilities are limitless.)</source>
          <target state="translated">Al dividir las funciones independientes, obtienes la capacidad de reutilizar tu trabajo anterior al llamarlas a otro script. Por ejemplo, &quot;example.py&quot; podr&amp;iacute;a importar &quot;xy.py&quot; y llamar a &lt;code&gt;x()&lt;/code&gt; , haciendo uso de la funci&amp;oacute;n 'x' de &quot;xy.py&quot;. (Tal vez es capitalizar la tercera palabra de una cadena de texto determinada; crear una matriz NumPy a partir de una lista de n&amp;uacute;meros y cuadrarlos; o reducir una superficie 3D. Las posibilidades son ilimitadas).</target>
        </trans-unit>
        <trans-unit id="d853790bb43ec92bf806d95fb5eb4681a4a8a3c8" translate="yes" xml:space="preserve">
          <source>In summary, here's what'd be printed in the two cases:</source>
          <target state="translated">En resumen,esto es lo que se imprimiría en los dos casos:</target>
        </trans-unit>
        <trans-unit id="1f0a6937d20af80d3078dedc2606cc5a59b0e220" translate="yes" xml:space="preserve">
          <source>In the b.py code there is some code that is exclusive to that file b.py and we don't want any other file (other than b.py file), that has imported the b.py file, to run it.</source>
          <target state="translated">En el código b.py hay algún código que es exclusivo de ese archivo b.py y no queremos que ningún otro archivo (que no sea el b.py),que haya importado el archivo b.py,lo ejecute.</target>
        </trans-unit>
        <trans-unit id="260ca32c942591fccd6abb92b2ac85ea296638c3" translate="yes" xml:space="preserve">
          <source>In this case, the top-level code is an &lt;code&gt;if&lt;/code&gt; block.  &lt;code&gt;__name__&lt;/code&gt; is a built-in variable which evaluates to the name of the current module.  However, if a module is being run directly (as in &lt;code&gt;myscript.py&lt;/code&gt; above), then &lt;code&gt;__name__&lt;/code&gt; instead is set to the string &lt;code&gt;&quot;__main__&quot;&lt;/code&gt;.  Thus, you can test whether your script is being run directly or being imported by something else by testing</source>
          <target state="translated">En este caso, el c&amp;oacute;digo de nivel superior es un bloque &lt;code&gt;if&lt;/code&gt; . &lt;code&gt;__name__&lt;/code&gt; es una variable integrada que eval&amp;uacute;a el nombre del m&amp;oacute;dulo actual. Sin embargo, si un m&amp;oacute;dulo se est&amp;aacute; ejecutando directamente (como en &lt;code&gt;myscript.py&lt;/code&gt; arriba), entonces &lt;code&gt;__name__&lt;/code&gt; se establece en la cadena &lt;code&gt;&quot;__main__&quot;&lt;/code&gt; . Por lo tanto, puede probar si su script se est&amp;aacute; ejecutando directamente o si est&amp;aacute; siendo importado por otra cosa probando</target>
        </trans-unit>
        <trans-unit id="fc7351db8caa3bc174e3dab9c38941592f350c9e" translate="yes" xml:space="preserve">
          <source>Inside an imported module, it's the name of that module.</source>
          <target state="translated">Dentro de un módulo importado,es el nombre de ese módulo.</target>
        </trans-unit>
        <trans-unit id="600ec79b4436fd522224aeb5e817487e39bf7c75" translate="yes" xml:space="preserve">
          <source>It allows the code in the module to be importable by other modules, without executing the code block beneath on import.</source>
          <target state="translated">Permite que el código del módulo sea importable por otros módulos,sin ejecutar el bloque de código de abajo en la importación.</target>
        </trans-unit>
        <trans-unit id="675efdeb054d458c04693317ce35a181157e918e" translate="yes" xml:space="preserve">
          <source>It also allows modules to be run from the command line as main scripts, which can be also very useful.</source>
          <target state="translated">También permite que los módulos se ejecuten desde la línea de comandos como guiones principales,lo que también puede ser muy útil.</target>
        </trans-unit>
        <trans-unit id="54b2453f92e0d3e4d73f97207fe07c2dc556e48a" translate="yes" xml:space="preserve">
          <source>It can not only be used in scripts but can also be found in both the interpreter and modules/packages.</source>
          <target state="translated">No sólo se puede utilizar en los guiones,sino que también se puede encontrar tanto en el paquete de intérpretes como en el de módulos.</target>
        </trans-unit>
        <trans-unit id="3528aa55d868a317f591f6ee9b7618c515d6e0af" translate="yes" xml:space="preserve">
          <source>It checks if a module is being imported or not.</source>
          <target state="translated">Comprueba si un módulo se está importando o no.</target>
        </trans-unit>
        <trans-unit id="4714816743d3504312c6ed1b30410b9d76cd8f74" translate="yes" xml:space="preserve">
          <source>It checks if the &lt;code&gt;__name__&lt;/code&gt; attribute of the Python script is &lt;code&gt;&quot;__main__&quot;&lt;/code&gt;. In other words, if the program itself is executed, the attribute will be &lt;code&gt;__main__&lt;/code&gt;, so the program will be executed (in this case the &lt;code&gt;main()&lt;/code&gt; function).</source>
          <target state="translated">Comprueba si el atributo &lt;code&gt;__name__&lt;/code&gt; del script Python es &lt;code&gt;&quot;__main__&quot;&lt;/code&gt; . En otras palabras, si el programa en s&amp;iacute; se ejecuta, el atributo ser&amp;aacute; &lt;code&gt;__main__&lt;/code&gt; , por lo que el programa se ejecutar&amp;aacute; (en este caso, la funci&amp;oacute;n &lt;code&gt;main()&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="d45839ba20c9bcb826d469c0e65576dc489d5de3" translate="yes" xml:space="preserve">
          <source>It could be written in several ways. Another is:</source>
          <target state="translated">Podría escribirse de varias maneras.Otra es:</target>
        </trans-unit>
        <trans-unit id="72796cbd4b51d3cdeb2d0d02bdcb18094d7dd7ca" translate="yes" xml:space="preserve">
          <source>It executes the &lt;code&gt;def&lt;/code&gt; block, creating a function object, then assigning that function object to a variable called &lt;code&gt;functionA&lt;/code&gt;.</source>
          <target state="translated">Ejecuta el bloque &lt;code&gt;def&lt;/code&gt; , crea un objeto de funci&amp;oacute;n y luego asigna ese objeto de funci&amp;oacute;n a una variable llamada &lt;code&gt;functionA&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4a1336d55772c318b9c2339583e8b328d7e55ca8" translate="yes" xml:space="preserve">
          <source>It executes the second &lt;code&gt;def&lt;/code&gt; block, creating another function object, then assigning it to a variable called &lt;code&gt;functionB&lt;/code&gt;.</source>
          <target state="translated">Ejecuta el segundo bloque &lt;code&gt;def&lt;/code&gt; , crea otro objeto de funci&amp;oacute;n y luego lo asigna a una variable llamada &lt;code&gt;functionB&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d422f7632b03e10b878e1d03615ebf1e878466d9" translate="yes" xml:space="preserve">
          <source>It is a special for when a Python file is called from the command line. This is typically used to call a &quot;main()&quot; function or execute other appropriate startup code, like commandline arguments handling for instance.</source>
          <target state="translated">Es especial para cuando se llama a un archivo Python desde la línea de comandos.Se usa típicamente para llamar a una función &quot;main()&quot; o para ejecutar otro código de inicio apropiado,como por ejemplo el manejo de argumentos de la línea de comandos.</target>
        </trans-unit>
        <trans-unit id="7c5e6e85034260b34583d4b3d062afde5577df61" translate="yes" xml:space="preserve">
          <source>It is a string (global as mentioned above) as indicated by &lt;code&gt;type(__name__)&lt;/code&gt; (yielding &lt;code&gt;&amp;lt;class 'str'&amp;gt;&lt;/code&gt;), and is an inbuilt standard for both &lt;a href=&quot;https://docs.python.org/3/library/__main__.html&quot;&gt;Python 3&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/2/library/__main__.html&quot;&gt;Python 2&lt;/a&gt; versions.</source>
          <target state="translated">Es una cadena (global como se mencion&amp;oacute; anteriormente) como se indica por &lt;code&gt;type(__name__)&lt;/code&gt; (que produce &lt;code&gt;&amp;lt;class 'str'&amp;gt;&lt;/code&gt; ), y es un est&amp;aacute;ndar incorporado para las versiones &lt;a href=&quot;https://docs.python.org/3/library/__main__.html&quot;&gt;Python 3&lt;/a&gt; y &lt;a href=&quot;https://docs.python.org/2/library/__main__.html&quot;&gt;Python 2&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="3b32f06639244cd4fe1f298cf6a239029bf115ac" translate="yes" xml:space="preserve">
          <source>It is also possible to do other, less common but useful things with &lt;code&gt;__name__&lt;/code&gt;, some I will show here:</source>
          <target state="translated">Tambi&amp;eacute;n es posible hacer otras cosas menos comunes pero &amp;uacute;tiles con &lt;code&gt;__name__&lt;/code&gt; , algunas que mostrar&amp;eacute; aqu&amp;iacute;:</target>
        </trans-unit>
        <trans-unit id="fa5911f298adfd582f1742f2457c41f8e0363fdb" translate="yes" xml:space="preserve">
          <source>It is always assumed that the value of &lt;code&gt;__name__&lt;/code&gt; to be &lt;code&gt;__main__&lt;/code&gt; or the name of the file.  Once again changing this default value will cause more confusion that it will do good, causing problems further down the line.</source>
          <target state="translated">Siempre se supone que el valor de &lt;code&gt;__name__&lt;/code&gt; ser&amp;aacute; &lt;code&gt;__main__&lt;/code&gt; o el nombre del archivo. Una vez m&amp;aacute;s, cambiar este valor predeterminado causar&amp;aacute; m&amp;aacute;s confusi&amp;oacute;n de que ser&amp;aacute; bueno, causando problemas m&amp;aacute;s adelante.</target>
        </trans-unit>
        <trans-unit id="433366427f82e9a941e28039c28d109ea0304b44" translate="yes" xml:space="preserve">
          <source>It is considered good practice in general to include the &lt;code&gt;if __name__ == '__main__'&lt;/code&gt; in scripts.</source>
          <target state="translated">Se considera una buena pr&amp;aacute;ctica en general incluir el &lt;code&gt;if __name__ == '__main__'&lt;/code&gt; en los scripts.</target>
        </trans-unit>
        <trans-unit id="ae6fdd181016a398f76b7382908ae7290de561a7" translate="yes" xml:space="preserve">
          <source>It is usually written for testing.</source>
          <target state="translated">Por lo general,se escribe para las pruebas.</target>
        </trans-unit>
        <trans-unit id="c3402e91991c1a14ff2a75a0ab38e464eb5133ba" translate="yes" xml:space="preserve">
          <source>It loads the &lt;code&gt;math&lt;/code&gt; module and assigns it to a variable called &lt;code&gt;math&lt;/code&gt;. This is equivalent to replacing &lt;code&gt;import math&lt;/code&gt; with the following (note that &lt;code&gt;__import__&lt;/code&gt; is a low-level function in Python that takes a string and triggers the actual import):</source>
          <target state="translated">Carga el m&amp;oacute;dulo &lt;code&gt;math&lt;/code&gt; y lo asigna a una variable llamada &lt;code&gt;math&lt;/code&gt; . Esto es equivalente a reemplazar las &lt;code&gt;import math&lt;/code&gt; con lo siguiente (tenga en cuenta que &lt;code&gt;__import__&lt;/code&gt; es una funci&amp;oacute;n de bajo nivel en Python que toma una cadena y activa la importaci&amp;oacute;n real):</target>
        </trans-unit>
        <trans-unit id="56f71295dc0080691356ca0c01cec7d37f4e28e9" translate="yes" xml:space="preserve">
          <source>It prints the string &lt;code&gt;&quot;before __name__ guard&quot;&lt;/code&gt;.</source>
          <target state="translated">Imprime la cadena &lt;code&gt;&quot;before __name__ guard&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2577e5a4b9e5bed19b4432e05d2660faee329607" translate="yes" xml:space="preserve">
          <source>It prints the string &lt;code&gt;&quot;before functionA&quot;&lt;/code&gt;.</source>
          <target state="translated">Imprime la cadena &lt;code&gt;&quot;before functionA&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="990ff0164122db4967979e56b95623fac83be16d" translate="yes" xml:space="preserve">
          <source>It prints the string &lt;code&gt;&quot;before functionB&quot;&lt;/code&gt;.</source>
          <target state="translated">Imprime la cadena &lt;code&gt;&quot;before functionB&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="67a82144baac90e3bfe77c37b1e7cfd66966d43e" translate="yes" xml:space="preserve">
          <source>It prints the string &lt;code&gt;&quot;before import&quot;&lt;/code&gt; (without quotes).</source>
          <target state="translated">Imprime la cadena &lt;code&gt;&quot;before import&quot;&lt;/code&gt; (sin comillas).</target>
        </trans-unit>
        <trans-unit id="487802f670fb40e8bf81d7517f78375a228bb226" translate="yes" xml:space="preserve">
          <source>It will allow the module and its functions and classes to be imported into other scripts without running the &lt;code&gt;main&lt;/code&gt; function, and will also allow the module (and its functions and classes) to be called when running from a different &lt;code&gt;'__main__'&lt;/code&gt; module, i.e.</source>
          <target state="translated">Permitir&amp;aacute; que el m&amp;oacute;dulo y sus funciones y clases se importen a otros scripts sin ejecutar la funci&amp;oacute;n &lt;code&gt;main&lt;/code&gt; , y tambi&amp;eacute;n permitir&amp;aacute; que se llame al m&amp;oacute;dulo (y sus funciones y clases) cuando se ejecute desde un m&amp;oacute;dulo &lt;code&gt;'__main__'&lt;/code&gt; diferente, es decir</target>
        </trans-unit>
        <trans-unit id="db31e7b989046834490a12f44ad8c713989903b9" translate="yes" xml:space="preserve">
          <source>It will print the string &lt;code&gt;&quot;after __name__ guard&quot;&lt;/code&gt; in both situations.</source>
          <target state="translated">Imprimir&amp;aacute; la cadena &lt;code&gt;&quot;after __name__ guard&quot;&lt;/code&gt; en ambas situaciones.</target>
        </trans-unit>
        <trans-unit id="0640f504c6f1cabceaecd1e002b971be93067ac4" translate="yes" xml:space="preserve">
          <source>Let's look at the answer in a more abstract way:</source>
          <target state="translated">Veamos la respuesta de una manera más abstracta:</target>
        </trans-unit>
        <trans-unit id="59c0758ddc6f775006dd70cbf5286216ff0f8137" translate="yes" xml:space="preserve">
          <source>Let's see how this works and how it relates to your question about the &lt;code&gt;__name__&lt;/code&gt; checks we always see in Python scripts.</source>
          <target state="translated">Veamos c&amp;oacute;mo funciona esto y c&amp;oacute;mo se relaciona con su pregunta sobre las comprobaciones de &lt;code&gt;__name__&lt;/code&gt; que siempre vemos en los scripts de Python.</target>
        </trans-unit>
        <trans-unit id="36e704322c41ccc6a321769ec4f01db18ff86add" translate="yes" xml:space="preserve">
          <source>Let's see what it does using a simple code that prints the name of the module:</source>
          <target state="translated">Veamos qué hace usando un simple código que imprime el nombre del módulo:</target>
        </trans-unit>
        <trans-unit id="5f645eb565c673e545d1679f2c86c2b42014562e" translate="yes" xml:space="preserve">
          <source>Let's step through the above code to understand what's happening, focusing first on the unindented lines and the order they appear in the scripts. Remember that function - or &lt;code&gt;def&lt;/code&gt; - blocks don't do anything by themselves until they're called. What the interpreter might say if mumbled to itself:</source>
          <target state="translated">Revisemos el c&amp;oacute;digo anterior para comprender lo que est&amp;aacute; sucediendo, centr&amp;aacute;ndonos primero en las l&amp;iacute;neas no indentadas y el orden en que aparecen en los scripts. Recuerde que los bloques de funci&amp;oacute;n, o &lt;code&gt;def&lt;/code&gt; , no hacen nada por s&amp;iacute; mismos hasta que se los llama. Lo que el int&amp;eacute;rprete podr&amp;iacute;a decir si murmurara para s&amp;iacute; mismo:</target>
        </trans-unit>
        <trans-unit id="1254a1f938039680c725134df68b131b5aa46dc5" translate="yes" xml:space="preserve">
          <source>Let's use a slightly different code sample to explore how imports and scripts work.  Suppose the following is in a file called &lt;code&gt;foo.py&lt;/code&gt;.</source>
          <target state="translated">Usemos una muestra de c&amp;oacute;digo ligeramente diferente para explorar c&amp;oacute;mo funcionan las importaciones y los scripts. Supongamos que lo siguiente est&amp;aacute; en un archivo llamado &lt;code&gt;foo.py&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="842b192efb9c67214acf7a300d55ce4db505bdcc" translate="yes" xml:space="preserve">
          <source>Note that only the top-level &lt;code&gt;print()&lt;/code&gt; statement in &lt;code&gt;my_test_module&lt;/code&gt; is executed.</source>
          <target state="translated">Tenga en cuenta que solo se ejecuta la instrucci&amp;oacute;n &lt;code&gt;print()&lt;/code&gt; nivel superior en &lt;code&gt;my_test_module&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="81c6d0a8223e137d4fd96a2fea5acdc58cde2cd7" translate="yes" xml:space="preserve">
          <source>Notice that when used in a package or module, &lt;code&gt;__name__&lt;/code&gt; takes the name of the file.  The path of the actual module or package path is not given, but has its own DunderAlias &lt;code&gt;__file__&lt;/code&gt;, that allows for this.</source>
          <target state="translated">Tenga en cuenta que cuando se usa en un paquete o m&amp;oacute;dulo, &lt;code&gt;__name__&lt;/code&gt; toma el nombre del archivo. La ruta del m&amp;oacute;dulo real o la ruta del paquete no se proporciona, pero tiene su propio DunderAlias &lt;code&gt;__file__&lt;/code&gt; , que lo permite.</target>
        </trans-unit>
        <trans-unit id="cf84fdf12bf682b1e82dc617a50185e488527e76" translate="yes" xml:space="preserve">
          <source>Now if you invoke &lt;code&gt;main.py&lt;/code&gt;:</source>
          <target state="translated">Ahora si &lt;code&gt;main.py&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="7cdbc821008ebfe4fc4cd41f81d12ccd5cec7db9" translate="yes" xml:space="preserve">
          <source>Now if you run &lt;code&gt;my_test_module.py&lt;/code&gt; as a Python script, both &lt;code&gt;print()&lt;/code&gt; statements will be exectued:</source>
          <target state="translated">Ahora, si ejecuta &lt;code&gt;my_test_module.py&lt;/code&gt; como un script de Python, se ejecutar&amp;aacute;n ambas declaraciones &lt;code&gt;print()&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="3875b0e9c99d33dd9d9117fb278540c718c1625f" translate="yes" xml:space="preserve">
          <source>Now suppose we call above script from other script</source>
          <target state="translated">Ahora supongamos que llamamos a este guión de otro guión</target>
        </trans-unit>
        <trans-unit id="32d820770706edc1d47e13dfe4072ab74a677b21" translate="yes" xml:space="preserve">
          <source>Now, figure out what will happen if you remove the &lt;code&gt;__name__&lt;/code&gt; check in &lt;code&gt;foo3.py&lt;/code&gt;:</source>
          <target state="translated">Ahora, &lt;code&gt;foo3.py&lt;/code&gt; qu&amp;eacute; suceder&amp;aacute; si elimina la comprobaci&amp;oacute;n de &lt;code&gt;__name__&lt;/code&gt; en foo3.py :</target>
        </trans-unit>
        <trans-unit id="f61cdcc0e64bc154546828675c159f927f257516" translate="yes" xml:space="preserve">
          <source>Now, if you invoke the interpreter as</source>
          <target state="translated">Ahora,si invoca al intérprete como</target>
        </trans-unit>
        <trans-unit id="8ca2803175deedc185a32811ae0d215b53994bac" translate="yes" xml:space="preserve">
          <source>Oh, a function. I'll remember that.</source>
          <target state="translated">Oh,una función.Lo recordaré.</target>
        </trans-unit>
        <trans-unit id="6077d0ebf452529d19420c847ef52de2a426a2ee" translate="yes" xml:space="preserve">
          <source>Ok, function &lt;code&gt;a()&lt;/code&gt;; I just learned that. Printing '&lt;em&gt;A function in ab file&lt;/em&gt;'.</source>
          <target state="translated">Ok, funciona &lt;code&gt;a()&lt;/code&gt; ; Acabo de enterarme de eso. Imprimiendo ' &lt;em&gt;Una funci&amp;oacute;n en un archivo ab&lt;/em&gt; '.</target>
        </trans-unit>
        <trans-unit id="f8c73f6bb1c6fc650c6e40cfdcfea137d51b31bb" translate="yes" xml:space="preserve">
          <source>On import, the &lt;code&gt;do_important&lt;/code&gt; function would be called, so you'd probably comment out your function call, &lt;code&gt;do_important()&lt;/code&gt;, at the bottom.</source>
          <target state="translated">En la importaci&amp;oacute;n, se &lt;code&gt;do_important&lt;/code&gt; funci&amp;oacute;n do_important , por lo que probablemente comentar&amp;iacute;a su llamada a la funci&amp;oacute;n, &lt;code&gt;do_important()&lt;/code&gt; , en la parte inferior.</target>
        </trans-unit>
        <trans-unit id="2d793a6eac08930c66fb11b06b414c6c74e2e724" translate="yes" xml:space="preserve">
          <source>On the other hand, suppose some other module is the main program and it imports your module. This means there's a statement like this in the main program, or in some other module the main program imports:</source>
          <target state="translated">Por otro lado,supongamos que algún otro módulo es el programa principal y que importa su módulo.Esto significa que hay una declaración como esta en el programa principal,o en algún otro módulo que el programa principal importe:</target>
        </trans-unit>
        <trans-unit id="4b8160972d3ededbe405e2919fa2974b8a5330ed" translate="yes" xml:space="preserve">
          <source>Open xy.py as the 'home' file; call it &lt;code&gt;&quot;__main__&quot;&lt;/code&gt; in the &lt;code&gt;__name__&lt;/code&gt; variable.</source>
          <target state="translated">Abra xy.py como el archivo 'home'; &lt;code&gt;&quot;__main__&quot;&lt;/code&gt; en la variable __nombre__ .</target>
        </trans-unit>
        <trans-unit id="4bed336194a9a5c86b6a734f03b3570d2aae1a68" translate="yes" xml:space="preserve">
          <source>Output</source>
          <target state="translated">Output</target>
        </trans-unit>
        <trans-unit id="a703490bf01742db237973ccf277b94b1592d61d" translate="yes" xml:space="preserve">
          <source>Put simply, &lt;code&gt;__name__&lt;/code&gt; is a variable defined for each script that defines whether the script is being run as the main module or it is being run as an imported module.</source>
          <target state="translated">En pocas palabras, &lt;code&gt;__name__&lt;/code&gt; es una variable definida para cada script que define si el script se est&amp;aacute; ejecutando como el m&amp;oacute;dulo principal o si se est&amp;aacute; ejecutando como un m&amp;oacute;dulo importado.</target>
        </trans-unit>
        <trans-unit id="e37067e387ec00a654d6a8a4421c869e9ce7f02b" translate="yes" xml:space="preserve">
          <source>Question: Can I have multiple &lt;code&gt;__name__&lt;/code&gt; checking blocks?  Answer: it's strange to do so, but the language won't stop you.</source>
          <target state="translated">Pregunta: &amp;iquest;Puedo tener m&amp;uacute;ltiples bloques de verificaci&amp;oacute;n &lt;code&gt;__name__&lt;/code&gt; ? Respuesta: es extra&amp;ntilde;o hacerlo, pero el lenguaje no te detendr&amp;aacute;.</target>
        </trans-unit>
        <trans-unit id="1f6213cf7dc0a0a2692503179dc1a74e244db9a2" translate="yes" xml:space="preserve">
          <source>Reference: &lt;a href=&quot;https://docs.python.org/3.5/tutorial/modules.html&quot;&gt;https://docs.python.org/3.5/tutorial/modules.html&lt;/a&gt;</source>
          <target state="translated">Referencia: &lt;a href=&quot;https://docs.python.org/3.5/tutorial/modules.html&quot;&gt;https://docs.python.org/3.5/tutorial/modules.html&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="664467ee79494c88e6f1e2c2697dbbe4ff48a5d2" translate="yes" xml:space="preserve">
          <source>Remember what I said earlier about import statements? When you import a module it doesn't just 'recognize' it and wait for further instructions - it actually runs all the executable operations contained within the script. So, putting the meat of your script into the &lt;code&gt;main()&lt;/code&gt; function effectively quarantines it, putting it in isolation so that it won't immediately run when imported by another script.</source>
          <target state="translated">&amp;iquest;Recuerdas lo que dije antes sobre las declaraciones de importaci&amp;oacute;n? Cuando importa un m&amp;oacute;dulo, no solo lo 'reconoce' y espera m&amp;aacute;s instrucciones, sino que realmente ejecuta todas las operaciones ejecutables contenidas en el script. Por lo tanto, poner la carne de su script en la funci&amp;oacute;n &lt;code&gt;main()&lt;/code&gt; pone en cuarentena de manera efectiva, aisl&amp;aacute;ndolo para que no se ejecute de inmediato cuando otro script lo importe.</target>
        </trans-unit>
        <trans-unit id="f98434905bc42aec74771816b1350633e53ce854" translate="yes" xml:space="preserve">
          <source>Resulting in &lt;code&gt;__main__&lt;/code&gt;</source>
          <target state="translated">Resultando en &lt;code&gt;__main__&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e63592c750f974c67228385bd47700a1dc930828" translate="yes" xml:space="preserve">
          <source>Resulting in &lt;code&gt;somefile&lt;/code&gt;</source>
          <target state="translated">Resultando en &lt;code&gt;somefile&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dca1109ee592b30f70306745ecaf4e3be65dabb6" translate="yes" xml:space="preserve">
          <source>Run it. It will print &lt;strong&gt;a&lt;/strong&gt;, i.e., the name of the file which &lt;strong&gt;is imported&lt;/strong&gt;.</source>
          <target state="translated">Ejecutarlo. Imprimir&amp;aacute; &lt;strong&gt;un&lt;/strong&gt; , es decir, el nombre del archivo que &lt;strong&gt;se importa&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="3f5bef58a00ebcb694aa52babce37958f2b198f1" translate="yes" xml:space="preserve">
          <source>Run the class stand alone, for testing purposes.</source>
          <target state="translated">Dirigir la clase en solitario,con fines de prueba.</target>
        </trans-unit>
        <trans-unit id="20e86911fbff3e384f7f5f09191137367a0df800" translate="yes" xml:space="preserve">
          <source>Running them will get you this output:</source>
          <target state="translated">Ejecutarlas te dará esta salida:</target>
        </trans-unit>
        <trans-unit id="10ec89290100bc024be13c487e6ae209eaa691b9" translate="yes" xml:space="preserve">
          <source>Say you write a Python script that does something great and you implement a boatload of functions that are useful for other purposes. If I want to use them I can just import your script and use them without executing your program (given that your code only executes within the  &lt;code&gt;if __name__ == &quot;__main__&quot;:&lt;/code&gt; context). Whereas in C/C++ you would have to portion out those pieces into a separate module that then includes the file. Picture the situation below;</source>
          <target state="translated">Supongamos que escribe un script de Python que hace algo grandioso e implementa una gran cantidad de funciones que son &amp;uacute;tiles para otros fines. Si quiero usarlos, puedo importar su script y usarlos sin ejecutar su programa (dado que su c&amp;oacute;digo solo se ejecuta dentro del contexto &lt;code&gt;if __name__ == &quot;__main__&quot;:&lt;/code&gt; . Mientras que en C / C ++ tendr&amp;iacute;a que dividir esas piezas en un m&amp;oacute;dulo separado que luego incluye el archivo. Imagine la situaci&amp;oacute;n a continuaci&amp;oacute;n;</target>
        </trans-unit>
        <trans-unit id="8d613d269c466eb978baefb1a911abf766ab0238" translate="yes" xml:space="preserve">
          <source>Say you're writing a Python script designed to be used as a module:</source>
          <target state="translated">Digamos que estás escribiendo un guión en Python diseñado para ser usado como un módulo:</target>
        </trans-unit>
        <trans-unit id="fb6ab9485c691b027c37729a425f370d612207ed" translate="yes" xml:space="preserve">
          <source>Simply, it is the entry point to run the file, like the &lt;code&gt;main&lt;/code&gt; function in the &lt;em&gt;C&lt;/em&gt; programming language.</source>
          <target state="translated">Simplemente, es el punto de entrada para ejecutar el archivo, como la funci&amp;oacute;n &lt;code&gt;main&lt;/code&gt; en el &lt;em&gt;lenguaje de&lt;/em&gt; programaci&amp;oacute;n &lt;em&gt;C.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2f0eb42cc94ae6f1d6b27a11e936825cd6e9be63" translate="yes" xml:space="preserve">
          <source>Small example to explain in short.</source>
          <target state="translated">Pequeño ejemplo para explicarlo en pocas palabras.</target>
        </trans-unit>
        <trans-unit id="abff45f4f7494a045c401c2b502e510dbd014b28" translate="yes" xml:space="preserve">
          <source>So if we have two scripts;</source>
          <target state="translated">Así que si tenemos dos guiones;</target>
        </trans-unit>
        <trans-unit id="84ce746d38e49c0592c794aa0e1ec5b2af9e35c4" translate="yes" xml:space="preserve">
          <source>So if you check before executing:</source>
          <target state="translated">Así que si lo compruebas antes de ejecutar:</target>
        </trans-unit>
        <trans-unit id="640d3626fbf5c4384513193cd5a05b99491f804b" translate="yes" xml:space="preserve">
          <source>So that is what this line of code checks. If it is the main file (i.e., b.py) running the code, which in this case it is not (a.py is the main file running), then only the code gets executed.</source>
          <target state="translated">Así que eso es lo que esta línea de código comprueba.Si es el archivo principal (es decir,b.py)el que ejecuta el código,que en este caso no lo es (a.py es el archivo principal que se ejecuta),entonces sólo se ejecuta el código.</target>
        </trans-unit>
        <trans-unit id="263e6ff9fdb235045559021aa4f3aaf6a28dd1e6" translate="yes" xml:space="preserve">
          <source>So, above is self explanatory that when you call test from other script, if loop &lt;code&gt;__name__&lt;/code&gt; in &lt;code&gt;test.py&lt;/code&gt; will not execute.</source>
          <target state="translated">Entonces, lo anterior se explica por s&amp;iacute; mismo que cuando llamas a la prueba desde otro script, si el bucle &lt;code&gt;__name__&lt;/code&gt; en &lt;code&gt;test.py&lt;/code&gt; no se ejecutar&amp;aacute;.</target>
        </trans-unit>
        <trans-unit id="68f77a6ccbf56724f5b40205ddb5e475652f0586" translate="yes" xml:space="preserve">
          <source>So, code under the &lt;code&gt;if&lt;/code&gt; block will only run if the module is the entry point to your program.</source>
          <target state="translated">Por lo tanto, el c&amp;oacute;digo debajo del bloque &lt;code&gt;if&lt;/code&gt; solo se ejecutar&amp;aacute; si el m&amp;oacute;dulo es el punto de entrada a su programa.</target>
        </trans-unit>
        <trans-unit id="f39f20521dcc328835dd2bae85539d96c3ed5764" translate="yes" xml:space="preserve">
          <source>So, in your example in part:</source>
          <target state="translated">Así que,en su ejemplo en parte:</target>
        </trans-unit>
        <trans-unit id="9b0e64ff7926b8af4a777a49504ee4171aa1f955" translate="yes" xml:space="preserve">
          <source>So, to show &lt;strong&gt;two different behavior of the same file&lt;/strong&gt;, this is a commonly used trick:</source>
          <target state="translated">Entonces, para mostrar &lt;strong&gt;dos comportamientos diferentes del mismo archivo&lt;/strong&gt; , este es un truco de uso com&amp;uacute;n:</target>
        </trans-unit>
        <trans-unit id="1fd11fffb92fae55b373db1f1b2a14481892db42" translate="yes" xml:space="preserve">
          <source>Special Variables</source>
          <target state="translated">Variables especiales</target>
        </trans-unit>
        <trans-unit id="b0b9fd78351c8645d3bb611c5714fc4fb48a880a" translate="yes" xml:space="preserve">
          <source>Suppose the following is in &lt;code&gt;foo2.py&lt;/code&gt;.  What happens if you say &lt;code&gt;python foo2.py&lt;/code&gt; on the command-line? Why?</source>
          <target state="translated">Supongamos que lo siguiente est&amp;aacute; en &lt;code&gt;foo2.py&lt;/code&gt; . &amp;iquest;Qu&amp;eacute; sucede si dices &lt;code&gt;python foo2.py&lt;/code&gt; en la l&amp;iacute;nea de comandos? &amp;iquest;Por qu&amp;eacute;?</target>
        </trans-unit>
        <trans-unit id="19e0db61176529f3b08091162b28a1b8097dbc39" translate="yes" xml:space="preserve">
          <source>Suppose we have this code in x.py:</source>
          <target state="translated">Supongamos que tenemos este código en x.py:</target>
        </trans-unit>
        <trans-unit id="b522da1d722893c1c3514d7e1c720966c233662f" translate="yes" xml:space="preserve">
          <source>Take file &quot;ab.py&quot;:</source>
          <target state="translated">Toma el archivo &quot;ab.py&quot;:</target>
        </trans-unit>
        <trans-unit id="63dd3922ae392ebb0802b3e1fb913af39e39d6ef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;__name__&lt;/code&gt; variable points to the namespace wherever the Python interpreter happens to be at the moment.</source>
          <target state="translated">La variable &lt;code&gt;__name__&lt;/code&gt; apunta al espacio de nombres donde sea que est&amp;eacute; el int&amp;eacute;rprete de Python en este momento.</target>
        </trans-unit>
        <trans-unit id="355c15d3884285cbe9de6e8c0623457a61fdc6ca" translate="yes" xml:space="preserve">
          <source>The Problem</source>
          <target state="translated">El problema</target>
        </trans-unit>
        <trans-unit id="d9eef56265e1ad5d7b64df6c1fea6c1c26857bc3" translate="yes" xml:space="preserve">
          <source>The above statement is true and prints &lt;em&gt;&quot;direct method&quot;&lt;/em&gt;. Suppose if they imported this class in another class it doesn't print &lt;em&gt;&quot;direct method&quot;&lt;/em&gt; because, while importing, it will set &lt;code&gt;__name__ equal to &quot;first model name&quot;&lt;/code&gt;.</source>
          <target state="translated">La declaraci&amp;oacute;n anterior es verdadera e imprime &lt;em&gt;&quot;m&amp;eacute;todo directo&quot;&lt;/em&gt; . Supongamos que si importaron esta clase en otra clase, no imprime &lt;em&gt;&quot;m&amp;eacute;todo directo&quot;&lt;/em&gt; porque, al importar, establecer&amp;aacute; &lt;code&gt;__name__ equal to &quot;first model name&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2b0b314d4585244ae8ac5cd70de557719041b367" translate="yes" xml:space="preserve">
          <source>The arrows are import links. For three modules each trying to include the previous modules code there are six files (nine, counting the implementation files) and five links. This makes it difficult to include other code into a C project unless it is compiled specifically as a library. Now picture it for Python:</source>
          <target state="translated">Las flechas son enlaces de importación.Para tres módulos cada uno tratando de incluir el código de los módulos anteriores hay seis archivos (nueve,contando los archivos de implementación)y cinco enlaces.Esto dificulta la inclusión de otro código en un proyecto C,a menos que sea compilado específicamente como una biblioteca.Ahora imagínatelo para Python:</target>
        </trans-unit>
        <trans-unit id="b96b1c26d7d07398a4108598c24c3f6449d82fe1" translate="yes" xml:space="preserve">
          <source>The bottom two lines mean: &quot;If this is the &lt;code&gt;&quot;__main__&quot;&lt;/code&gt; or 'home' script, execute the function called &lt;code&gt;main()&lt;/code&gt;&quot;. That's why you'll see a &lt;code&gt;def main():&lt;/code&gt; block up top, which contains the main flow of the script's functionality.</source>
          <target state="translated">Las dos l&amp;iacute;neas inferiores significan: &quot;Si este es el &lt;code&gt;&quot;__main__&quot;&lt;/code&gt; o 'home', ejecute la funci&amp;oacute;n llamada &lt;code&gt;main()&lt;/code&gt; &quot;. Es por eso que ver&amp;aacute; un &lt;code&gt;def main():&lt;/code&gt; block up top, que contiene el flujo principal de la funcionalidad del script.</target>
        </trans-unit>
        <trans-unit id="ee36bd7aa18be8f75cff321a8cbe45b79fa20c99" translate="yes" xml:space="preserve">
          <source>The code inside &lt;code&gt;if __name__ == '__main__':&lt;/code&gt;&lt;strong&gt;will only be executed if the module is invoked as a script&lt;/strong&gt;.</source>
          <target state="translated">El c&amp;oacute;digo dentro de &lt;code&gt;if __name__ == '__main__':&lt;/code&gt; &lt;strong&gt;solo se ejecutar&amp;aacute; si el m&amp;oacute;dulo se invoca como un script&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="c7cb418b6654cc08bd7fdbc541322601045fee60" translate="yes" xml:space="preserve">
          <source>The global variable, &lt;code&gt;__name__&lt;/code&gt;, in the module that is the entry point to your program, is &lt;code&gt;'__main__'&lt;/code&gt;. Otherwise, it's the name you import the module by.</source>
          <target state="translated">La variable global, &lt;code&gt;__name__&lt;/code&gt; , en el m&amp;oacute;dulo que es el punto de entrada a su programa, es &lt;code&gt;'__main__'&lt;/code&gt; . De lo contrario, es el nombre por el que importa el m&amp;oacute;dulo.</target>
        </trans-unit>
        <trans-unit id="abc8795a207d7fd1e55acd3339216f07ad278e91" translate="yes" xml:space="preserve">
          <source>The important thing that python is special at is point 4! The rest is just basic logic.</source>
          <target state="translated">¡Lo importante que la pitón es especial en el punto 4! El resto es sólo la lógica básica.</target>
        </trans-unit>
        <trans-unit id="070234b07de191f078cf7dded19198b7b44d467d" translate="yes" xml:space="preserve">
          <source>The interpreter keeps track of which scripts are running with &lt;code&gt;__name__&lt;/code&gt;. When you run a script - no matter what you've named it - the interpreter calls it &lt;code&gt;&quot;__main__&quot;&lt;/code&gt;, making it the master or 'home' script that gets returned to after running an external script.</source>
          <target state="translated">El int&amp;eacute;rprete realiza un seguimiento de los scripts que se ejecutan con &lt;code&gt;__name__&lt;/code&gt; . Cuando ejecuta un script, sin importar c&amp;oacute;mo lo haya nombrado, el int&amp;eacute;rprete lo llama &lt;code&gt;&quot;__main__&quot;&lt;/code&gt; , lo que lo convierte en el script maestro o 'home' al que se devuelve despu&amp;eacute;s de ejecutar un script externo.</target>
        </trans-unit>
        <trans-unit id="e490bbfebdeff408a85402b8066f8e0d765afb42" translate="yes" xml:space="preserve">
          <source>The interpreter will search for your &lt;code&gt;foo.py&lt;/code&gt; file (along with searching for a few other variants), and prior to executing that module, it will assign the name &lt;code&gt;&quot;foo&quot;&lt;/code&gt; from the import statement to the &lt;code&gt;__name__&lt;/code&gt; variable, i.e.</source>
          <target state="translated">El int&amp;eacute;rprete buscar&amp;aacute; su archivo &lt;code&gt;foo.py&lt;/code&gt; (junto con la b&amp;uacute;squeda de algunas otras variantes), y antes de ejecutar ese m&amp;oacute;dulo, asignar&amp;aacute; el nombre &lt;code&gt;&quot;foo&quot;&lt;/code&gt; de la declaraci&amp;oacute;n de importaci&amp;oacute;n a la variable &lt;code&gt;__name__&lt;/code&gt; , es decir</target>
        </trans-unit>
        <trans-unit id="beb5c6ca096be5c499ae9d622ede781690b12de1" translate="yes" xml:space="preserve">
          <source>The output for the above is &lt;code&gt;__main__&lt;/code&gt;.</source>
          <target state="translated">El resultado de lo anterior es &lt;code&gt;__main__&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9b315daf004ca0729cd2f96be56c31138214abce" translate="yes" xml:space="preserve">
          <source>The output from executing script1 is</source>
          <target state="translated">El resultado de la ejecución del script1 es</target>
        </trans-unit>
        <trans-unit id="a61791ccd424eca040a7f63b8afadbed687c913a" translate="yes" xml:space="preserve">
          <source>The output will be</source>
          <target state="translated">La salida será</target>
        </trans-unit>
        <trans-unit id="f7783b7273a972da2fb19a09cf27c06a5a76b303" translate="yes" xml:space="preserve">
          <source>The reason for</source>
          <target state="translated">La razón de</target>
        </trans-unit>
        <trans-unit id="461ad2d3ca9debfc02d07f3beea45fedd8fe7c48" translate="yes" xml:space="preserve">
          <source>The simplest explanation for the &lt;code&gt;__name__&lt;/code&gt; variable (imho) is the following:</source>
          <target state="translated">La explicaci&amp;oacute;n m&amp;aacute;s simple para la variable &lt;code&gt;__name__&lt;/code&gt; (imho) es la siguiente:</target>
        </trans-unit>
        <trans-unit id="7bb35afec92b2288483eddfee92b6b137ba1ffee" translate="yes" xml:space="preserve">
          <source>There are a number of variables that the system (Python interpreter) provides for source files (modules).  You can get their values anytime you want, so, let us focus on the &lt;strong&gt;__name__&lt;/strong&gt; variable/attribute:</source>
          <target state="translated">Hay una serie de variables que el sistema (int&amp;eacute;rprete de Python) proporciona para los archivos fuente (m&amp;oacute;dulos). Puede obtener sus valores en cualquier momento que desee, as&amp;iacute; que, centr&amp;eacute;monos en la variable / atributo &lt;strong&gt;__name__&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="d334018c829a8afc4b891e4ccfd37fcb00325b95" translate="yes" xml:space="preserve">
          <source>There are lots of different takes here on the mechanics of the code in question, the &quot;How&quot;, but for me none of it made sense until I understood the &quot;Why&quot;. This should be especially helpful for new programmers.</source>
          <target state="translated">Hay muchas tomas diferentes aquí sobre la mecánica del código en cuestión,el &quot;Cómo&quot;,pero para mí nada de esto tenía sentido hasta que entendí el &quot;Por qué&quot;.Esto debería ser especialmente útil para los nuevos programadores.</target>
        </trans-unit>
        <trans-unit id="e63743be839c5f96b5ee726f165c404beeea8567" translate="yes" xml:space="preserve">
          <source>There's a Pythonic way to improve on this, though.</source>
          <target state="translated">Sin embargo,hay una forma pitónica de mejorar esto.</target>
        </trans-unit>
        <trans-unit id="7da449e38cd83db4680bb69d26f25544a12a00c0" translate="yes" xml:space="preserve">
          <source>This answer is for Java programmers learning Python.
Every Java file typically contains one public class. You can use that class in two ways:</source>
          <target state="translated">Esta respuesta es para los programadores de Java que están aprendiendo Python.Cada archivo de Java típicamente contiene una clase pública.Puedes usar esa clase de dos maneras:</target>
        </trans-unit>
        <trans-unit id="a93248e8c28b2baad3105d4909c76fa1d06bca1b" translate="yes" xml:space="preserve">
          <source>This means that if &lt;code&gt;__name__&lt;/code&gt; is equal to &lt;code&gt;__main__&lt;/code&gt; then the file must be the main file and must actually be running (or it is the interpreter), not a module or package imported into the script.</source>
          <target state="translated">Esto significa que si &lt;code&gt;__name__&lt;/code&gt; es igual a &lt;code&gt;__main__&lt;/code&gt; , entonces el archivo debe ser el archivo principal y debe estar ejecut&amp;aacute;ndose (o es el int&amp;eacute;rprete), no un m&amp;oacute;dulo o paquete importado al script.</target>
        </trans-unit>
        <trans-unit id="26768ab59b39b3300f945b6b412204438fd854c1" translate="yes" xml:space="preserve">
          <source>This module represents the (otherwise anonymous) scope in which the
  interpreter&amp;rsquo;s main program executes &amp;mdash; commands read either from
  standard input, from a script file, or from an interactive prompt. It
  is this environment in which the idiomatic &amp;ldquo;conditional script&amp;rdquo; stanza
  causes a script to run:</source>
          <target state="translated">Este m&amp;oacute;dulo representa el alcance (por lo dem&amp;aacute;s an&amp;oacute;nimo) en el que se ejecuta el programa principal del int&amp;eacute;rprete: los comandos se leen desde la entrada est&amp;aacute;ndar, desde un archivo de script o desde un mensaje interactivo. Es este entorno en el que la estrofa idiom&amp;aacute;tica de &quot;secuencia de comandos condicional&quot; hace que se ejecute una secuencia de comandos:</target>
        </trans-unit>
        <trans-unit id="570c99fbd84e48be7a4bc039c23bb770f7a93f2d" translate="yes" xml:space="preserve">
          <source>This tells us that if the file running is the main file (or you are running from the interpreter directly) then that condition must execute.  If it is a package then it should not, and the value will not be &lt;code&gt;__main__&lt;/code&gt;.</source>
          <target state="translated">Esto nos dice que si el archivo que se est&amp;aacute; ejecutando es el archivo principal (o si se est&amp;aacute; ejecutando directamente desde el int&amp;eacute;rprete), esa condici&amp;oacute;n debe ejecutarse. Si es un paquete, entonces no deber&amp;iacute;a, y el valor no ser&amp;aacute; &lt;code&gt;__main__&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="400df23e6535cffd76bdbec3d29bf175104d993d" translate="yes" xml:space="preserve">
          <source>Thus, including &lt;a href=&quot;https://docs.python.org/library/__main__.html&quot;&gt;the final lines&lt;/a&gt;</source>
          <target state="translated">Por lo tanto, incluyendo &lt;a href=&quot;https://docs.python.org/library/__main__.html&quot;&gt;las l&amp;iacute;neas finales.&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="41ff41b822d3a441a23084a1b748580b08728f3a" translate="yes" xml:space="preserve">
          <source>Thus, the value of the &lt;code&gt;__name__&lt;/code&gt; attribute is set to &lt;code&gt;__main__&lt;/code&gt; when the module is run as the main program. Otherwise the value of &lt;code&gt;__name__&lt;/code&gt;  is set to contain the name of the module.</source>
          <target state="translated">Por lo tanto, el valor del atributo &lt;code&gt;__name__&lt;/code&gt; se establece en &lt;code&gt;__main__&lt;/code&gt; cuando el m&amp;oacute;dulo se ejecuta como el programa principal. De lo contrario, el valor de &lt;code&gt;__name__&lt;/code&gt; se establece para contener el nombre del m&amp;oacute;dulo.</target>
        </trans-unit>
        <trans-unit id="e5bb2a5a3f702f74d72560d048b4376dfc0840a3" translate="yes" xml:space="preserve">
          <source>Thus, when module &lt;code&gt;one&lt;/code&gt; gets loaded, its &lt;code&gt;__name__&lt;/code&gt; equals &lt;code&gt;&quot;one&quot;&lt;/code&gt; instead of &lt;code&gt;&quot;__main__&quot;&lt;/code&gt;.</source>
          <target state="translated">Por lo tanto, cuando se carga el m&amp;oacute;dulo &lt;code&gt;one&lt;/code&gt; , su &lt;code&gt;__name__&lt;/code&gt; es igual a &lt;code&gt;&quot;one&quot;&lt;/code&gt; lugar de &lt;code&gt;&quot;__main__&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="523dcaae791ba2376f9d0e38205b6e104584b94b" translate="yes" xml:space="preserve">
          <source>To be short, you need to know several points:</source>
          <target state="translated">Para ser breve,necesitas saber varios puntos:</target>
        </trans-unit>
        <trans-unit id="ab6345109ea5809edd76f43e5ad346f6c84b96e7" translate="yes" xml:space="preserve">
          <source>To outline the basics:</source>
          <target state="translated">Para esbozar lo básico:</target>
        </trans-unit>
        <trans-unit id="12ab10369b1f47def1cf885774f934b4e0985f34" translate="yes" xml:space="preserve">
          <source>To solve the problem in point 2, python allows you to put a condition check</source>
          <target state="translated">Para resolver el problema en el punto 2,la pitón te permite hacer un chequeo de la condición</target>
        </trans-unit>
        <trans-unit id="4711ba0e3e6d6e4a6ad75a1fa7aa2587e14a3867" translate="yes" xml:space="preserve">
          <source>We can execute this directly as</source>
          <target state="translated">Podemos ejecutar esto directamente como</target>
        </trans-unit>
        <trans-unit id="babfa4c489d804dc449fbd841bce76fc1745bd5c" translate="yes" xml:space="preserve">
          <source>We now have a final function for the end of our module that will run if we run the module as the primary module.</source>
          <target state="translated">Ahora tenemos una función final para el final de nuestro módulo que se ejecutará si ejecutamos el módulo como el módulo primario.</target>
        </trans-unit>
        <trans-unit id="1c12bf3938c1cb1ecd0ac996a47bdeae5af33c7c" translate="yes" xml:space="preserve">
          <source>We see if &lt;code&gt;__name__ == '__main__':&lt;/code&gt; quite often.</source>
          <target state="translated">Vemos si &lt;code&gt;__name__ == '__main__':&lt;/code&gt; bastante frecuencia.</target>
        </trans-unit>
        <trans-unit id="8c1bfdb1fcdcd5574d83109e0bae5ad3a5cf62db" translate="yes" xml:space="preserve">
          <source>What does &lt;code&gt;if __name__ == &quot;__main__&quot;:&lt;/code&gt; do?</source>
          <target state="translated">&amp;iquest;Qu&amp;eacute; hace &lt;code&gt;if __name__ == &quot;__main__&quot;:&lt;/code&gt; hacer?</target>
        </trans-unit>
        <trans-unit id="882f556d9b969816afbc080f2c0c2833e74571bd" translate="yes" xml:space="preserve">
          <source>What does if __name__ == “__main__”: do</source>
          <target state="translated">¿Qué hace si __nombre__==&quot;__main__&quot;:hacer</target>
        </trans-unit>
        <trans-unit id="0519ae47b8614fd1d5f5805a3c6ace1513a3c429" translate="yes" xml:space="preserve">
          <source>What does the &lt;code&gt;if __name__ == &quot;__main__&quot;:&lt;/code&gt; do?</source>
          <target state="translated">&amp;iquest;Qu&amp;eacute; hace el &lt;code&gt;if __name__ == &quot;__main__&quot;:&lt;/code&gt; hacer?</target>
        </trans-unit>
        <trans-unit id="e8ade84c1dddd0abd1d4a5cbe46e38dc11bedceb" translate="yes" xml:space="preserve">
          <source>What if we want to run this business process from outside the module?</source>
          <target state="translated">¿Y si queremos ejecutar este proceso de negocios desde fuera del módulo?</target>
        </trans-unit>
        <trans-unit id="849ed2229cbffb820dde4aac079e940cbf66d22f" translate="yes" xml:space="preserve">
          <source>What is this code actually doing?</source>
          <target state="translated">¿Qué hace realmente este código?</target>
        </trans-unit>
        <trans-unit id="ac4dd5fb5ee621db0e7fc13bfab42a28cf4cb6c7" translate="yes" xml:space="preserve">
          <source>What will this do when used as a script?  When imported as a module?</source>
          <target state="translated">¿Qué hará esto cuando se use como guión? ¿Cuando sea importado como un módulo?</target>
        </trans-unit>
        <trans-unit id="34026079e5767a32ede0b2469d594a04aa502cd0" translate="yes" xml:space="preserve">
          <source>What's this? An &lt;code&gt;if&lt;/code&gt; statement. Well, the condition has been met (the variable &lt;code&gt;__name__&lt;/code&gt; has been set to &lt;code&gt;&quot;__main__&quot;&lt;/code&gt;), so I'll enter the &lt;code&gt;main()&lt;/code&gt; function and print '&lt;em&gt;main function: this is where the action is&lt;/em&gt;'.</source>
          <target state="translated">&amp;iquest;Qu&amp;eacute; es esto? Una declaraci&amp;oacute;n &lt;code&gt;if&lt;/code&gt; . Bueno, la condici&amp;oacute;n se ha cumplido (la variable &lt;code&gt;__name__&lt;/code&gt; se ha establecido en &lt;code&gt;&quot;__main__&quot;&lt;/code&gt; ), as&amp;iacute; que ingresar&amp;eacute; la funci&amp;oacute;n &lt;code&gt;main()&lt;/code&gt; e imprimir&amp;eacute; ' &lt;em&gt;funci&amp;oacute;n principal: aqu&amp;iacute; es donde est&amp;aacute; la acci&amp;oacute;n&lt;/em&gt; '.</target>
        </trans-unit>
        <trans-unit id="a7a878649d8009684428450f8af9b808c3a3075d" translate="yes" xml:space="preserve">
          <source>When Python loads a source code file, it executes all of the code found in it. (Note that it doesn't call all of the methods and functions defined in the file, but it does define them.)</source>
          <target state="translated">Cuando Python carga un archivo de código fuente,ejecuta todo el código encontrado en él.(Ten en cuenta que no llama a todos los métodos y funciones definidos en el archivo,pero sí los define).</target>
        </trans-unit>
        <trans-unit id="2a4ffb529b1700ce20d37ede654fc1142a11d491" translate="yes" xml:space="preserve">
          <source>When the Python interpeter reads a source file, it first defines a few special variables. In this case, we care about the &lt;code&gt;__name__&lt;/code&gt; variable.</source>
          <target state="translated">Cuando el int&amp;eacute;rprete de Python lee un archivo fuente, primero define algunas variables especiales. En este caso, nos importa la variable &lt;code&gt;__name__&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="447dd3597ff37641a5da70095abbfb1e338af1d5" translate="yes" xml:space="preserve">
          <source>When there are certain statements in our module (&lt;code&gt;M.py&lt;/code&gt;) we want to be executed when it'll be running as main (not imported), we can place those statements (test-cases, print statements) under this &lt;code&gt;if&lt;/code&gt; block.</source>
          <target state="translated">Cuando hay ciertas declaraciones en nuestro m&amp;oacute;dulo ( &lt;code&gt;M.py&lt;/code&gt; ) que queremos que se ejecuten cuando se ejecute como principal (no importado), podemos colocar esas declaraciones (casos de prueba, declaraciones impresas) debajo de este bloque &lt;code&gt;if&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9877906a93c95cdaf2921362477e675f7b677ec6" translate="yes" xml:space="preserve">
          <source>When you execute &lt;code&gt;xy.py&lt;/code&gt;, you &lt;code&gt;import ab&lt;/code&gt;. The import statement runs the module immediately on import, so &lt;code&gt;ab&lt;/code&gt;'s operations get executed before the remainder of &lt;code&gt;xy&lt;/code&gt;'s. Once finished with &lt;code&gt;ab&lt;/code&gt;, it continues with &lt;code&gt;xy&lt;/code&gt;.</source>
          <target state="translated">Cuando ejecuta &lt;code&gt;xy.py&lt;/code&gt; , &lt;code&gt;import ab&lt;/code&gt; . La declaraci&amp;oacute;n de importaci&amp;oacute;n ejecuta el m&amp;oacute;dulo inmediatamente en la importaci&amp;oacute;n, por lo que las operaciones de &lt;code&gt;ab&lt;/code&gt; se ejecutan antes que el resto de &lt;code&gt;xy&lt;/code&gt; . Una vez terminado con &lt;code&gt;ab&lt;/code&gt; , contin&amp;uacute;a con &lt;code&gt;xy&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b8b36e56cdbe31fc5262405f5324cf63c8c6e4bf" translate="yes" xml:space="preserve">
          <source>When you execute this</source>
          <target state="translated">Cuando ejecuten esto...</target>
        </trans-unit>
        <trans-unit id="6fd61966708d4f62ded02175bf761bbf0e8fb9c3" translate="yes" xml:space="preserve">
          <source>When you run Python interactively the local &lt;code&gt;__name__&lt;/code&gt; variable is assigned a value of &lt;code&gt;__main__&lt;/code&gt;. Likewise, when you execute a Python module from the command line, rather than importing it into another module, its &lt;code&gt;__name__&lt;/code&gt; attribute is assigned a value of &lt;code&gt;__main__&lt;/code&gt;, rather than the actual name of the module. In this way, modules can look at their own &lt;code&gt;__name__&lt;/code&gt; value to determine for themselves how they are being used, whether as support for another program or as the main application executed from the command line. Thus, the following idiom is quite common in Python modules:</source>
          <target state="translated">Cuando ejecuta Python interactivamente, a la variable local &lt;code&gt;__name__&lt;/code&gt; se le asigna un valor de &lt;code&gt;__main__&lt;/code&gt; . Del mismo modo, cuando ejecuta un m&amp;oacute;dulo Python desde la l&amp;iacute;nea de comandos, en lugar de importarlo a otro m&amp;oacute;dulo, a su atributo &lt;code&gt;__name__&lt;/code&gt; se le asigna un valor de &lt;code&gt;__main__&lt;/code&gt; , en lugar del nombre real del m&amp;oacute;dulo. De esta manera, los m&amp;oacute;dulos pueden ver su propio valor &lt;code&gt;__name__&lt;/code&gt; para determinar por s&amp;iacute; mismos c&amp;oacute;mo se est&amp;aacute;n utilizando, ya sea como soporte para otro programa o como la aplicaci&amp;oacute;n principal ejecutada desde la l&amp;iacute;nea de comandos. Por lo tanto, el siguiente idioma es bastante com&amp;uacute;n en los m&amp;oacute;dulos de Python:</target>
        </trans-unit>
        <trans-unit id="4382aa34afa3d659f0bb4edaf5dcf55f253232cd" translate="yes" xml:space="preserve">
          <source>When you run this script prints &lt;strong&gt;you can see me&lt;/strong&gt;</source>
          <target state="translated">Cuando ejecutas este script &lt;strong&gt;, puedes verme&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ff92db554b1095b0d40299da20c445f80406d870" translate="yes" xml:space="preserve">
          <source>When your script is run by passing it as a command to the Python interpreter,</source>
          <target state="translated">Cuando tu guión se ejecuta pasándolo como un comando al intérprete de Python,</target>
        </trans-unit>
        <trans-unit id="ab593498ef9ec53331cbff2af3b2dd2b51bdf819" translate="yes" xml:space="preserve">
          <source>Whenever the Python interpreter reads a source file, it does two things:</source>
          <target state="translated">Cada vez que el intérprete de Python lee un archivo fuente,hace dos cosas:</target>
        </trans-unit>
        <trans-unit id="6a1d2d8182ddb99759342b07d21796d4a90b92eb" translate="yes" xml:space="preserve">
          <source>Why Does It Work This Way?</source>
          <target state="translated">¿Por qué funciona así?</target>
        </trans-unit>
        <trans-unit id="fc47432e4bb8b9783f8dbd23b35f57d699c4a18e" translate="yes" xml:space="preserve">
          <source>Why do we need this?</source>
          <target state="translated">¿Por qué necesitamos esto?</target>
        </trans-unit>
        <trans-unit id="acd0bc142a66a740172c6969fcbd8897e5de82ac" translate="yes" xml:space="preserve">
          <source>Why implement this?</source>
          <target state="translated">¿Por qué implementar esto?</target>
        </trans-unit>
        <trans-unit id="b6e9143e9e32c607148934a535cfda140fe418d6" translate="yes" xml:space="preserve">
          <source>With the above, your code will only execute when you're running it as the primary module (or intentionally call it from another script).</source>
          <target state="translated">Con lo anterior,su código sólo se ejecutará cuando lo esté ejecutando como módulo primario (o lo llame intencionadamente desde otro script).</target>
        </trans-unit>
        <trans-unit id="913a9ffbcabac7b4746945a64e723d43537938ef" translate="yes" xml:space="preserve">
          <source>Yes, that's right. These separate functions &lt;strong&gt;can&lt;/strong&gt; be called from an in-line script that's not contained inside a &lt;code&gt;main()&lt;/code&gt; function. If you're accustomed (as I am, in my early learning stages of programming) to building in-line scripts that do exactly what you need, and you'll try to figure it out again if you ever need that operation again ... well, you're not used to this kind of internal structure to your code, because it's more complicated to build and it's not as intuitive to read.</source>
          <target state="translated">Si, eso es correcto. Estas funciones separadas &lt;strong&gt;se&lt;/strong&gt; pueden invocar desde un script en l&amp;iacute;nea que no est&amp;aacute; contenido dentro de una funci&amp;oacute;n &lt;code&gt;main()&lt;/code&gt; . Si est&amp;aacute; acostumbrado (como lo estoy yo, en mis primeras etapas de aprendizaje de programaci&amp;oacute;n) a crear scripts en l&amp;iacute;nea que hagan exactamente lo que necesita, e intentar&amp;aacute; resolverlo nuevamente si alguna vez necesita esa operaci&amp;oacute;n nuevamente. Bueno, no est&amp;aacute;s acostumbrado a este tipo de estructura interna de tu c&amp;oacute;digo, porque es m&amp;aacute;s complicado de construir y no es tan intuitivo de leer.</target>
        </trans-unit>
        <trans-unit id="bbf85bd3bd1a2f405d72d298d6d2e8dc0e6a4075" translate="yes" xml:space="preserve">
          <source>You &lt;em&gt;could&lt;/em&gt; test the module by adding this call of the function to the bottom:</source>
          <target state="translated">Puede probar el m&amp;oacute;dulo agregando esta llamada de la funci&amp;oacute;n al final:</target>
        </trans-unit>
        <trans-unit id="786d584d19c5e53ad4e4097843269cf6c5e6292a" translate="yes" xml:space="preserve">
          <source>You can also use it to provide runnable help functions/utilities on packages and modules without the elaborate use of libraries.</source>
          <target state="translated">También se puede utilizar para proporcionar utilidades de ayuda ejecutables en paquetes y módulos sin el uso elaborado de bibliotecas.</target>
        </trans-unit>
        <trans-unit id="1022be4eed5ff0cd45b00fa73b4ca1a925550db8" translate="yes" xml:space="preserve">
          <source>You can make the file usable as a &lt;strong&gt;script&lt;/strong&gt; as well as an &lt;strong&gt;importable module&lt;/strong&gt;.</source>
          <target state="translated">Puede hacer que el archivo se pueda usar como un &lt;strong&gt;script&lt;/strong&gt; y como un &lt;strong&gt;m&amp;oacute;dulo importable&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="53eb1352da0ffb51c0ec047f0ef125c909ddaefa" translate="yes" xml:space="preserve">
          <source>You get</source>
          <target state="translated">Usted obtiene</target>
        </trans-unit>
        <trans-unit id="dadc4d8e7d9fa9779b4e08f566981499d80cb4e7" translate="yes" xml:space="preserve">
          <source>You might naturally wonder why anybody would want this.  Well, sometimes you want to write a &lt;code&gt;.py&lt;/code&gt; file that can be both used by other programs and/or modules as a module, and can also be run as the main program itself.  Examples:</source>
          <target state="translated">Naturalmente, podr&amp;iacute;a preguntarse por qu&amp;eacute; alguien querr&amp;iacute;a esto. Bueno, a veces desea escribir un archivo &lt;code&gt;.py&lt;/code&gt; que pueda ser utilizado por otros programas y / o m&amp;oacute;dulos como un m&amp;oacute;dulo, y tambi&amp;eacute;n puede ejecutarse como el programa principal en s&amp;iacute;. Ejemplos:</target>
        </trans-unit>
        <trans-unit id="8047f868d8a396e2d98f574de9648be818c0aee6" translate="yes" xml:space="preserve">
          <source>You should see that, where &lt;code&gt;__name__&lt;/code&gt;, where it is the main file (or program) will &lt;em&gt;always&lt;/em&gt; return &lt;code&gt;__main__&lt;/code&gt;, and if it is a module/package, or anything that is running off some other Python script, will return the name of the file where it has originated from.</source>
          <target state="translated">Deber&amp;iacute;a ver que, donde &lt;code&gt;__name__&lt;/code&gt; , donde est&amp;aacute; el archivo principal (o programa) &lt;em&gt;siempre&lt;/em&gt; devolver&amp;aacute; &lt;code&gt;__main__&lt;/code&gt; , y si es un m&amp;oacute;dulo / paquete, o cualquier cosa que se ejecute con alg&amp;uacute;n otro script de Python, devolver&amp;aacute; el nombre del archivo de donde se origin&amp;oacute;.</target>
        </trans-unit>
        <trans-unit id="737d0a68671613e4f63d5688dcabf38a268873ac" translate="yes" xml:space="preserve">
          <source>You write a module, and if someone wants to use your code they just import it and the &lt;code&gt;__name__&lt;/code&gt; variable can help to separate the executable portion of the program from the library part.</source>
          <target state="translated">Usted escribe un m&amp;oacute;dulo, y si alguien quiere usar su c&amp;oacute;digo, simplemente lo importa y la variable &lt;code&gt;__name__&lt;/code&gt; puede ayudar a separar la parte ejecutable del programa de la parte de la biblioteca.</target>
        </trans-unit>
        <trans-unit id="e48102eb585faacfdf2ded85e1a6e43222bcef6c" translate="yes" xml:space="preserve">
          <source>Your module is a library, but you want to have a script mode where it runs some unit tests or a demo.</source>
          <target state="translated">Tu módulo es una biblioteca,pero quieres tener un modo de guión en el que se ejecuten algunas pruebas de unidad o una demostración.</target>
        </trans-unit>
        <trans-unit id="9775ebd3a1d07733317e1e64b5d35d40fca683d8" translate="yes" xml:space="preserve">
          <source>Your module is mostly used as a main program, but it also provides a programmer-friendly API for advanced users.</source>
          <target state="translated">Su módulo se utiliza sobre todo como programa principal,pero también proporciona una API de fácil programación para usuarios avanzados.</target>
        </trans-unit>
        <trans-unit id="327fb7d82f537223ad218bd0c2bd1f339f312554" translate="yes" xml:space="preserve">
          <source>Your module is only used as a main program, but it has some unit tests, and the testing framework works by importing &lt;code&gt;.py&lt;/code&gt; files like your script and running special test functions. You don't want it to try running the script just because it's importing the module.</source>
          <target state="translated">Su m&amp;oacute;dulo solo se usa como programa principal, pero tiene algunas pruebas unitarias, y el marco de prueba funciona importando archivos &lt;code&gt;.py&lt;/code&gt; como su script y ejecutando funciones de prueba especiales. No desea que intente ejecutar el script solo porque est&amp;aacute; importando el m&amp;oacute;dulo.</target>
        </trans-unit>
        <trans-unit id="7921914ab3f7b51666817a9add8daeeb610bdeaf" translate="yes" xml:space="preserve">
          <source>all of the code that is at indentation level 0 gets executed.  Functions and classes that are defined are, well, defined, but none of their code gets run.  Unlike other languages, there's no &lt;code&gt;main()&lt;/code&gt; function that gets run automatically - the &lt;code&gt;main()&lt;/code&gt; function is implicitly all the code at the top level.</source>
          <target state="translated">todo el c&amp;oacute;digo que est&amp;aacute; en el nivel de sangr&amp;iacute;a 0 se ejecuta. Las funciones y clases que est&amp;aacute;n definidas est&amp;aacute;n bien definidas, pero ninguno de sus c&amp;oacute;digos se ejecuta. A diferencia de otros lenguajes, no hay una funci&amp;oacute;n &lt;code&gt;main()&lt;/code&gt; que se ejecute autom&amp;aacute;ticamente: la funci&amp;oacute;n &lt;code&gt;main()&lt;/code&gt; es impl&amp;iacute;citamente todo el c&amp;oacute;digo en el nivel superior.</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">and</target>
        </trans-unit>
        <trans-unit id="57216f4f62e4c7cff528a1042119b6bd292590a1" translate="yes" xml:space="preserve">
          <source>and running it (on a command prompt) with something like:</source>
          <target state="translated">y ejecutándolo (en un símbolo de comando)con algo como:</target>
        </trans-unit>
        <trans-unit id="3ef1ebbdd755420799ee3cf5f1bbe79340df1c25" translate="yes" xml:space="preserve">
          <source>at the end of your mycode.py script,</source>
          <target state="translated">al final de tu guión de mycode.py,</target>
        </trans-unit>
        <trans-unit id="d2fb4096be84a03b40677e8860e321cd4dab7598" translate="yes" xml:space="preserve">
          <source>if &lt;strong&gt;name&lt;/strong&gt; == '&lt;strong&gt;main&lt;/strong&gt;':</source>
          <target state="translated">if &lt;strong&gt;name&lt;/strong&gt; == ' &lt;strong&gt;main&lt;/strong&gt; ':</target>
        </trans-unit>
        <trans-unit id="e874b6c8f390f7d7eef2f26e6eba081818ffd576" translate="yes" xml:space="preserve">
          <source>is primarily to avoid the &lt;a href=&quot;https://docs.python.org/2/library/threading.html#importing-in-threaded-code&quot;&gt;import lock&lt;/a&gt; problems that would arise from &lt;a href=&quot;https://stackoverflow.com/questions/46326059/&quot;&gt;having code directly imported&lt;/a&gt;. You want &lt;code&gt;main()&lt;/code&gt; to run if your file was directly invoked (that's the &lt;code&gt;__name__ == &quot;__main__&quot;&lt;/code&gt; case), but if your code was imported then the importer has to enter your code from the true main module to avoid import lock problems.</source>
          <target state="translated">es principalmente para evitar los problemas de &lt;a href=&quot;https://docs.python.org/2/library/threading.html#importing-in-threaded-code&quot;&gt;bloqueo de importaci&amp;oacute;n&lt;/a&gt; que surgir&amp;iacute;an &lt;a href=&quot;https://stackoverflow.com/questions/46326059/&quot;&gt;al importar el c&amp;oacute;digo directamente&lt;/a&gt; . Desea que &lt;code&gt;main()&lt;/code&gt; ejecute si su archivo fue invocado directamente (ese es el caso &lt;code&gt;__name__ == &quot;__main__&quot;&lt;/code&gt; ), pero si su c&amp;oacute;digo fue importado, entonces el importador debe ingresar su c&amp;oacute;digo desde el verdadero m&amp;oacute;dulo principal para evitar problemas de bloqueo de importaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="ac8e610ec891561e761ac3b81b1844f41418fb4b" translate="yes" xml:space="preserve">
          <source>it executes all of the code found in the file.</source>
          <target state="translated">ejecuta todo el código encontrado en el archivo.</target>
        </trans-unit>
        <trans-unit id="0ebc8d74e14ef81dd980f3fabdbf3885802c2366" translate="yes" xml:space="preserve">
          <source>it sets a few special variables like &lt;code&gt;__name__&lt;/code&gt;, and then</source>
          <target state="translated">establece algunas variables especiales como &lt;code&gt;__name__&lt;/code&gt; , y luego</target>
        </trans-unit>
        <trans-unit id="75cd93d2e463e2434b2a0c03ccd41ae796240e8e" translate="yes" xml:space="preserve">
          <source>means that the code block:</source>
          <target state="translated">significa que el código de bloqueo:</target>
        </trans-unit>
        <trans-unit id="6d7de544326381643ee98f9ae79c1d3e6d9eceef" translate="yes" xml:space="preserve">
          <source>the interpreter will assign the hard-coded string &lt;code&gt;&quot;__main__&quot;&lt;/code&gt; to the &lt;code&gt;__name__&lt;/code&gt; variable, i.e.</source>
          <target state="translated">el int&amp;eacute;rprete asignar&amp;aacute; la cadena codificada &lt;code&gt;&quot;__main__&quot;&lt;/code&gt; a la variable &lt;code&gt;__name__&lt;/code&gt; , es decir</target>
        </trans-unit>
        <trans-unit id="0a6a0101819f9a81026cd9527ab3084564a94697" translate="yes" xml:space="preserve">
          <source>the otherwise anonymous global namespace is assigned the value of &lt;code&gt;'__main__'&lt;/code&gt; to its &lt;code&gt;__name__&lt;/code&gt;.</source>
          <target state="translated">el espacio de nombres global, de otro modo an&amp;oacute;nimo, se le asigna el valor de &lt;code&gt;'__main__'&lt;/code&gt; a su &lt;code&gt;__name__&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b7dc9621082d73413870731d07212c168ee0c948" translate="yes" xml:space="preserve">
          <source>when it is the primary, entry-point module that is run by a Python process,</source>
          <target state="translated">cuando es el módulo primario,de punto de entrada que se ejecuta por un proceso Python,</target>
        </trans-unit>
        <trans-unit id="2616062d77ab8e88551d4e00b757e66c49032c1f" translate="yes" xml:space="preserve">
          <source>will be executed only when you run the module directly; the code block will not execute if another module is calling/importing it because the value of &lt;strong&gt;__name__&lt;/strong&gt; will not equal to &quot;&lt;strong&gt;main&lt;/strong&gt;&quot; in that particular instance.</source>
          <target state="translated">se ejecutar&amp;aacute; solo cuando ejecute el m&amp;oacute;dulo directamente; el bloque de c&amp;oacute;digo no se ejecutar&amp;aacute; si otro m&amp;oacute;dulo lo est&amp;aacute; llamando / importando porque el valor de &lt;strong&gt;__name__&lt;/strong&gt; no ser&amp;aacute; igual a &quot; &lt;strong&gt;main&lt;/strong&gt; &quot; en esa instancia en particular.</target>
        </trans-unit>
        <trans-unit id="ae6fd70eacf54f86ab690f1936c2bc5c6419b15c" translate="yes" xml:space="preserve">
          <source>will cause your script's uniquely defined &lt;code&gt;main&lt;/code&gt; function to run.</source>
          <target state="translated">har&amp;aacute; que se ejecute la funci&amp;oacute;n &lt;code&gt;main&lt;/code&gt; definida de forma exclusiva de su script.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
