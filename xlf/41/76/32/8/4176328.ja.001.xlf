<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/4176328">
    <body>
      <group id="4176328">
        <trans-unit id="8870c0b78d2f8c5d51c2bb94aca02172e8d812a0" translate="yes" xml:space="preserve">
          <source>(&amp;sect;1.9/15)
  The value computations of the operands of an
  operator are sequenced before the value computation of the result of the operator.</source>
          <target state="translated">（&amp;sect;1.9/ 15）演算子のオペランドの値計算は、演算子の結果の値計算の前にシーケンスされます。</target>
        </trans-unit>
        <trans-unit id="f6789a34db8f60925945bcb624e1bf27596aee94" translate="yes" xml:space="preserve">
          <source>(&amp;sect;1.9/15) If a side effect on a scalar object is unsequenced relative to either</source>
          <target state="translated">（&amp;sect;1.9/ 15）スカラーオブジェクトへの副作用がいずれかに対してシーケンスされていない場合</target>
        </trans-unit>
        <trans-unit id="d03eca4ee881d6c9d172a41f36cf1e2dc14c6921" translate="yes" xml:space="preserve">
          <source>(a) &lt;strong&gt;another side effect on the same scalar object&lt;/strong&gt;</source>
          <target state="translated">（a） &lt;strong&gt;同じスカラーオブジェクトに対する別の副作用&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7de31a37bbc3d2d1c7535de9aaa9a2d2c89665c2" translate="yes" xml:space="preserve">
          <source>(b) &lt;strong&gt;a value computation using the value of the same scalar object.&lt;/strong&gt;</source>
          <target state="translated">（b） &lt;strong&gt;同じスカラーオブジェクトの値を使用した値の計算。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a37ce5427ff6266638bda82ba5addfaf1eddd932" translate="yes" xml:space="preserve">
          <source>1) &lt;strong&gt;Between the previous and next sequence point a scalar object shall have its stored value modified at most once by the evaluation of an expression.&lt;/strong&gt;</source>
          <target state="translated">1） &lt;strong&gt;前のシーケンスポイントと次のシーケンスポイントの間で、スカラーオブジェクトは、式の評価によって、格納された値を最大で1回変更します。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3c06988d3595ab2a28cd41d481cfaebc25ee10f2" translate="yes" xml:space="preserve">
          <source>2) &lt;strong&gt;Furthermore, the prior value shall be accessed only to determine the value to be stored.&lt;/strong&gt;</source>
          <target state="translated">2） &lt;strong&gt;さらに、以前の値は、保存される値を決定するためにのみアクセスされるものとします。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fda10bc0210ae7516d38ae8f60df65cb2be2b24a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a , b (&amp;sect;5.18)&lt;/code&gt; (here a , b is a comma operator; in &lt;code&gt;func(a,a++)&lt;/code&gt;&lt;code&gt;,&lt;/code&gt; is not a comma operator, it's merely a separator between the arguments &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;a++&lt;/code&gt;. Thus the behaviour is undefined in that case (if &lt;code&gt;a&lt;/code&gt; is considered to be a primitive type))</source>
          <target state="translated">&lt;code&gt;a , b (&amp;sect;5.18)&lt;/code&gt; （ここでa、bはコンマ演算子です; &lt;code&gt;func(a,a++)&lt;/code&gt; &lt;code&gt;,&lt;/code&gt; はコンマ演算子ではなく、単に引数 &lt;code&gt;a&lt;/code&gt; と &lt;code&gt;a++&lt;/code&gt; 間のセパレータです 。したがって、その場合の動作は定義されていません（ &lt;code&gt;a&lt;/code&gt; がプリミティブ型と見なされる場合）</target>
        </trans-unit>
        <trans-unit id="5cbb99cfd67aa0ed7c9abf9fe32b9cb527dbb10e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int x;&lt;/code&gt;&lt;code&gt;x = 10;&lt;/code&gt;&lt;code&gt;++x;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int x;&lt;/code&gt; &lt;code&gt;x = 10;&lt;/code&gt; &lt;code&gt;++x;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a949dc1c9f550107654d74da78d5d42424053380" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;8.18 Assignment and compound assignment operators&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;8.18代入演算子と複合代入演算子&lt;/strong&gt; ：</target>
        </trans-unit>
        <trans-unit id="9d069fa79ddd4f9f4141383dd0eca1d2590f65b0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Asymmetric&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Asymmetric&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4f52f520e63951b740474e846fac98e153b9acf9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;C++17&lt;/strong&gt; (&lt;code&gt;N4659&lt;/code&gt;) includes a proposal &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0145r3.pdf&quot;&gt;Refining Expression Evaluation Order for Idiomatic C++&lt;/a&gt;
which defines a stricter order of expression evaluation.</source>
          <target state="translated">&lt;strong&gt;C ++ 17&lt;/strong&gt; （ &lt;code&gt;N4659&lt;/code&gt; ）には、 &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0145r3.pdf&quot;&gt;式評価&lt;/a&gt;のより厳密な順序を定義する、 イディオマティック &lt;strong&gt;C ++の&lt;/strong&gt; 式評価順序を洗練する提案が含まれています。</target>
        </trans-unit>
        <trans-unit id="886ab1261d735f993b15c51c1bc58f5542846d90" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Disclaimer&lt;/strong&gt; : Okay. This answer is a bit long. So have patience while reading it. If you already know these things, reading them again won't make you crazy.</source>
          <target state="translated">&lt;strong&gt;免責事項&lt;/strong&gt; ：わかりました。 この答えは少し長いです。 だから、それを読んでいる間、忍耐してください。 これらのことをすでに知っている場合、もう一度読んでも頭がおかしくなりません。</target>
        </trans-unit>
        <trans-unit id="2abc7e47d5ebbbf19c4348696e3073af038cb44d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Final Note&lt;/strong&gt; :</source>
          <target state="translated">&lt;strong&gt;最後のメモ&lt;/strong&gt; ：</target>
        </trans-unit>
        <trans-unit id="e934205b4f3054922c2a5b8b6244db59ae5a2559" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Follow up answer for C++11 &lt;a href=&quot;https://stackoverflow.com/questions/4176328/faq-undefined-behavior-and-sequence-points/4183735#4183735&quot;&gt;here&lt;/a&gt;.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;C ++ 11のフォローアップ回答は&lt;a href=&quot;https://stackoverflow.com/questions/4176328/faq-undefined-behavior-and-sequence-points/4183735#4183735&quot;&gt;こちら&lt;/a&gt; 。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="280bacf147f4332348859249dc18aef73052508a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Pre-requisites&lt;/strong&gt; : An elementary knowledge of &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/&quot;&gt;C++ Standard&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;前提条件&lt;/strong&gt; ： &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/&quot;&gt;C ++標準&lt;/a&gt;の基礎知識</target>
        </trans-unit>
        <trans-unit id="6a9f93a852c700a1f842b06c832daeaedac1a0df" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Pre-requisites&lt;/strong&gt; : An elementary knowledge of Relations (Mathematics).</source>
          <target state="translated">&lt;strong&gt;前提条件&lt;/strong&gt; ：関係（数学）の初歩的な知識。</target>
        </trans-unit>
        <trans-unit id="bb16d5b7f750e589aa8591dc2b0311cf94f000d0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Sequence Points&lt;/strong&gt; have been replaced by &lt;strong&gt;Sequenced Before&lt;/strong&gt; and &lt;strong&gt;Sequenced After&lt;/strong&gt; (and &lt;strong&gt;Unsequenced&lt;/strong&gt; and &lt;strong&gt;Indeterminately Sequenced&lt;/strong&gt;) &lt;a href=&quot;http://en.wikipedia.org/wiki/Relation_(mathematics)&quot;&gt;relations&lt;/a&gt; in C++11.</source>
          <target state="translated">&lt;strong&gt;シーケンスポイント&lt;/strong&gt;は、C ++ 11では、 &lt;strong&gt;シーケンス前&lt;/strong&gt;と&lt;strong&gt;シーケンス後&lt;/strong&gt; （および&lt;strong&gt;シーケンス&lt;/strong&gt; &lt;strong&gt;なし&lt;/strong&gt;と&lt;strong&gt;シーケンスなし&lt;/strong&gt; ）の&lt;a href=&quot;http://en.wikipedia.org/wiki/Relation_(mathematics)&quot;&gt;関係&lt;/a&gt;に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="8d34bf4d70820266daeb2ec70d0a4d26cfd065ec" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Sequenced Before&lt;/strong&gt;&lt;sup&gt;(&amp;sect;1.9/13)&lt;/sup&gt; is a relation which is:</source>
          <target state="translated">&lt;strong&gt;Sequenced Before&lt;/strong&gt; &lt;sup&gt;（&amp;sect;1.9/ 13）&lt;/sup&gt;は次の関係です。</target>
        </trans-unit>
        <trans-unit id="204dc21a36933167085eb6437592dd1d62d82250" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This is a follow up to my &lt;a href=&quot;https://stackoverflow.com/questions/4176328/faq-undefined-behavior-and-sequence-points/4176333#4176333&quot;&gt;previous answer&lt;/a&gt; and contains C++11 related material.&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;これは私の&lt;a href=&quot;https://stackoverflow.com/questions/4176328/faq-undefined-behavior-and-sequence-points/4176333#4176333&quot;&gt;以前の回答の&lt;/a&gt;フォローアップであり、C ++ 11関連の資料が含まれています 。&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="2d52f13cea96c3b5a3d0d430c90cf5210a996c3d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Transitive&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Transitive&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1c671d5cd81ed0921c79d3cd1899a9bca816d7f9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yes!&lt;/strong&gt; Right.</source>
          <target state="translated">&lt;strong&gt;はい！&lt;/strong&gt; 正しい。</target>
        </trans-unit>
        <trans-unit id="022e9567b2b3b169242f2a720ec0a6d446c419ef" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yes!&lt;/strong&gt; This is very true.</source>
          <target state="translated">&lt;strong&gt;はい！&lt;/strong&gt; これは本当です。</target>
        </trans-unit>
        <trans-unit id="929829f559fa26e55cfe9537499e25f431156fbc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;value computations&lt;/strong&gt; (including determining the identity of an object for &lt;a href=&quot;https://stackoverflow.com/questions/3601602/what-are-rvalues-lvalues-xvalues-glvalues-and-prvalues&quot;&gt;glvalue evaluation&lt;/a&gt; and fetching a value previously assigned to an object for &lt;a href=&quot;https://stackoverflow.com/questions/3601602/what-are-rvalues-lvalues-xvalues-glvalues-and-prvalues&quot;&gt;prvalue evaluation&lt;/a&gt;) and</source>
          <target state="translated">&lt;strong&gt;値の計算&lt;/strong&gt; （ &lt;a href=&quot;https://stackoverflow.com/questions/3601602/what-are-rvalues-lvalues-xvalues-glvalues-and-prvalues&quot;&gt;glvalue評価の&lt;/a&gt;ためにオブジェクトのIDを決定し、 prvalue評価のためにオブジェクトに以前に割り当てられた値をフェッチすることを&lt;a href=&quot;https://stackoverflow.com/questions/3601602/what-are-rvalues-lvalues-xvalues-glvalues-and-prvalues&quot;&gt;含む&lt;/a&gt; ）および</target>
        </trans-unit>
        <trans-unit id="620ae72342c6c376f4c4a1a08f78905e1878296d" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;
&lt;em&gt;(Note: This is meant to be an entry to &lt;a href=&quot;https://stackoverflow.com/questions/tagged/c++-faq&quot;&gt;Stack Overflow's C++ FAQ&lt;/a&gt;. If you want to critique the idea of providing an FAQ in this form, then &lt;a href=&quot;https://meta.stackexchange.com/questions/68647/setting-up-a-faq-for-the-c-tag&quot;&gt;the posting on meta that started all this&lt;/a&gt; would be the place to do that. Answers to that question are monitored in the &lt;a href=&quot;http://chat.stackoverflow.com/rooms/10/c-lounge&quot;&gt;C++ chatroom&lt;/a&gt;, where the FAQ idea started out in the first place, so your answer is very likely to get read by those who came up with the idea.)&lt;/em&gt;
&lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;&lt;em&gt;（注：これは、 &lt;a href=&quot;https://stackoverflow.com/questions/tagged/c++-faq&quot;&gt;Stack OverflowのC ++ FAQ&lt;/a&gt;へのエントリになることを意図しています。このフォームでFAQを提供するという考えを批評したい場合は、これ&lt;a href=&quot;https://meta.stackexchange.com/questions/68647/setting-up-a-faq-for-the-c-tag&quot;&gt;をすべて開始したメタへの投稿&lt;/a&gt;がそのための場所になります。回答その質問は&lt;a href=&quot;http://chat.stackoverflow.com/rooms/10/c-lounge&quot;&gt;C ++チャットルーム&lt;/a&gt;で監視され、FAQのアイデアはそもそも始まったので、アイデアを思いついた人があなたの答えを読む可能性が非常に高くなります。&lt;/em&gt;&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="a426f588a643ba6573aa0dc06dff29890b117809" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt; 3 : permissible undefined behavior ranges from ignoring the situation completely with unpredictable results, to behaving during translation or program execution in a documented manner characteristic of the environment (with or with-
out the issuance of a diagnostic message), to terminating a translation or execution (with the issuance of a diagnostic message).&lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;3：予測できない結果を伴う状況の完全な無視から、（診断メッセージの発行の有無にかかわらず）環境に特徴的な文書化された方法での変換またはプログラムの実行中の動作、変換または実行の終了まで、許容される未定義の動作の範囲（診断メッセージの発行あり）。&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="95ae89f99caff438000886790fcdd7dc75b710de" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt; 4: In an expression that is evaluated more than once during the execution
of a program, &lt;strong&gt;unsequenced&lt;/strong&gt; and &lt;strong&gt;indeterminately sequenced&lt;/strong&gt; evaluations of its subexpressions need not be performed consistently in different evaluations. &lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;4：プログラムの実行中に2回以上評価される式では、その&lt;strong&gt;サブ&lt;/strong&gt;式の&lt;strong&gt;順序付け&lt;/strong&gt;されていない、および&lt;strong&gt;不規則に順序付けられた&lt;/strong&gt;評価を、異なる評価で一貫して実行する必要はありません。&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="9312fa9a457767f8b93b9c4711607a7389eaf60e" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;1 : Note : the evaluation of a full-expression can include the evaluation of subexpressions that are not lexically
part of the full-expression.  For example, subexpressions involved in evaluating default argument expressions (8.3.6) are considered to be created in the expression that calls the function, not the expression that defines the default argument&lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;1：注：全式の評価には、語彙的に全式の一部ではない部分式の評価を含めることができます。&lt;/sub&gt; &lt;sub&gt;たとえば、デフォルトの引数式（8.3.6）の評価に関係する部分式は、デフォルトの引数を定義する式ではなく、関数を呼び出す式で作成されたと見なされます。&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="60038c8883c25d5e00c8087ef90a1ff8f121ef42" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;2 : The operators indicated are the built-in operators, as described in clause 5.  When one of these operators is overloaded (clause 13) in a valid context, thus designating a user-defined operator function, the expression designates a function invocation and the operands form an argument list, without an implied sequence point between them.&lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;2：示されている演算子は、5章で説明されている組み込み演算子です。これらの演算子のいずれかが有効なコンテキストでオーバーロードされている場合（第13節）、ユーザー定義の演算子関数を指定すると、式は関数の呼び出しを指定し、オペランドは引数リストを形成し、それらの間の暗黙のシーケンスポイントはありません。&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="dd3c08ea9f72c1327d8c8c9d45bc917ac9981426" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;[NOTES]&lt;/sub&gt;&lt;sub&gt;&lt;br/&gt;
  1 :  A strict partial order is a &lt;a href=&quot;http://en.wikipedia.org/wiki/Binary_relation&quot;&gt;&lt;strong&gt;binary relation&lt;/strong&gt;&lt;/a&gt; &lt;code&gt;&quot;&amp;lt;&quot;&lt;/code&gt; over a set &lt;code&gt;P&lt;/code&gt; which is &lt;a href=&quot;http://en.wikipedia.org/wiki/Asymmetric_relation&quot;&gt;&lt;code&gt;asymmetric&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;http://en.wikipedia.org/wiki/Transitive_relation&quot;&gt;&lt;code&gt;transitive&lt;/code&gt;&lt;/a&gt;, i.e., for all &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, and &lt;code&gt;c&lt;/code&gt; in &lt;code&gt;P&lt;/code&gt;, we have that:&lt;br/&gt; &lt;/sub&gt;&lt;sub&gt;  ........(i). if a &amp;lt; b then &amp;not; (b &amp;lt; a) (&lt;code&gt;asymmetry&lt;/code&gt;);&lt;br/&gt;
  ........(ii). if a &amp;lt; b and b &amp;lt; c then a &amp;lt; c (&lt;code&gt;transitivity&lt;/code&gt;).&lt;br/&gt;
  2 : The execution of &lt;strong&gt;unsequenced evaluations&lt;/strong&gt; can &lt;em&gt;overlap&lt;/em&gt;.&lt;br/&gt;
  3 : &lt;strong&gt;Indeterminately sequenced evaluations&lt;/strong&gt; cannot &lt;em&gt;overlap&lt;/em&gt;, but either could be executed first.
&lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;[ノート]&lt;/sub&gt; &lt;sub&gt;&lt;br/&gt;&lt;/sub&gt; &lt;sub&gt;1：厳密な部分順序は、 &lt;a href=&quot;http://en.wikipedia.org/wiki/Asymmetric_relation&quot;&gt; &lt;code&gt;asymmetric&lt;/code&gt; &lt;/a&gt;で&lt;a href=&quot;http://en.wikipedia.org/wiki/Transitive_relation&quot;&gt; &lt;code&gt;transitive&lt;/code&gt; &lt;/a&gt; 的であるセット &lt;code&gt;P&lt;/code&gt; 上の&lt;a href=&quot;http://en.wikipedia.org/wiki/Binary_relation&quot;&gt;&lt;strong&gt;二項関係&lt;/strong&gt;&lt;/a&gt; &lt;code&gt;&quot;&amp;lt;&quot;&lt;/code&gt; です。つまり、 &lt;code&gt;P&lt;/code&gt; のすべての &lt;code&gt;a&lt;/code&gt; 、 &lt;code&gt;b&lt;/code&gt; 、および &lt;code&gt;c&lt;/code&gt; について、次のようになります。&lt;/sub&gt; &lt;sub&gt;&lt;br/&gt;&lt;/sub&gt; &lt;sub&gt;........（私）。&lt;/sub&gt; &lt;sub&gt;a &amp;lt;bの場合、&amp;not;（b &amp;lt;a）（ &lt;code&gt;asymmetry&lt;/code&gt; ）;&lt;/sub&gt; &lt;sub&gt;&lt;br/&gt;&lt;/sub&gt; &lt;sub&gt;........（ii）&lt;/sub&gt; &lt;sub&gt;a &amp;lt;bおよびb &amp;lt;cの場合、a &amp;lt;c（ &lt;code&gt;transitivity&lt;/code&gt; ）。&lt;/sub&gt; &lt;sub&gt;&lt;br/&gt;&lt;/sub&gt; &lt;sub&gt;2： &lt;strong&gt;シーケンスされていない評価&lt;/strong&gt;の実行は&lt;em&gt;オーバーラップ&lt;/em&gt; &lt;strong&gt;する&lt;/strong&gt;可能性&lt;em&gt;があり&lt;/em&gt;ます。&lt;/sub&gt; &lt;sub&gt;&lt;br/&gt;&lt;/sub&gt; &lt;sub&gt;3： &lt;strong&gt;不規則に順序付けられた評価&lt;/strong&gt;は&lt;em&gt;オーバーラップ&lt;/em&gt;できません&lt;em&gt;が&lt;/em&gt; 、最初に実行できます。&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="c7f05a513b706b4a1f9cb106d583e49db558645f" translate="yes" xml:space="preserve">
          <source>An expression &lt;em&gt;X&lt;/em&gt; is said to be sequenced before an expression &lt;em&gt;Y&lt;/em&gt; if every
  value computation and every side effect associated with the expression &lt;em&gt;X&lt;/em&gt; is sequenced before every value
  computation and every side effect associated with the expression &lt;em&gt;Y&lt;/em&gt;.</source>
          <target state="translated">式&lt;em&gt;Xに&lt;/em&gt;関連付けられているすべての値の計算とすべての副作用が式&lt;em&gt;Yに&lt;/em&gt;関連付けられているすべての値の計算とすべての副作用の前にシーケンス化される場合、式&lt;em&gt;X&lt;/em&gt;は式&lt;em&gt;Yの&lt;/em&gt;前にシーケンス化されるといいます。</target>
        </trans-unit>
        <trans-unit id="153d5bd3ffb42c2afbf3901847ae23308ee5a040" translate="yes" xml:space="preserve">
          <source>Another example &lt;a href=&quot;https://stackoverflow.com/questions/3457967/what-belongs-in-an-educational-tool-to-demonstrate-the-unwarranted-assumptions-pe/3458842#3458842&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/questions/3457967/what-belongs-in-an-educational-tool-to-demonstrate-the-unwarranted-assumptions-pe/3458842#3458842&quot;&gt;ここに&lt;/a&gt;別の例があります 。</target>
        </trans-unit>
        <trans-unit id="8ec01806be24062fea2d9f86213ec8a1e47cbe35" translate="yes" xml:space="preserve">
          <source>At  certain specified points in the execution sequence called &lt;strong&gt;sequence points&lt;/strong&gt;, all &lt;em&gt;side effects&lt;/em&gt; of previous evaluations 
  shall be complete and no &lt;em&gt;side effects&lt;/em&gt; of subsequent evaluations shall have taken place. (&amp;sect;1.9/7)</source>
          <target state="translated">&lt;strong&gt;シーケンスポイント&lt;/strong&gt;と呼ばれる実行シーケンスの特定のポイントで、以前の評価のすべて&lt;em&gt;の副作用&lt;/em&gt;が完了し、その後の評価の&lt;em&gt;副作用&lt;/em&gt;が発生してはなりません。 （&amp;sect;1.9/ 7）</target>
        </trans-unit>
        <trans-unit id="daf318858a3809a2aa50a9396bad28cdbbc5b979" translate="yes" xml:space="preserve">
          <source>Before I get into that you must know the difference(s) between &lt;a href=&quot;https://stackoverflow.com/questions/2397984/undefined-unspecified-and-implementation-defined-behavior&quot;&gt;Undefined Behaviour, Unspecified Behaviour and Implementation Defined Behaviour&lt;/a&gt;.</source>
          <target state="translated">始める前に、 &lt;a href=&quot;https://stackoverflow.com/questions/2397984/undefined-unspecified-and-implementation-defined-behavior&quot;&gt;未定義の動作、未指定の動作、実装定義の動作&lt;/a&gt;の違いを知っておく必要があります。</target>
        </trans-unit>
        <trans-unit id="91dd0af55b97c31dc0bccf19143f7b7880f341a1" translate="yes" xml:space="preserve">
          <source>But in &lt;code&gt;N4659&lt;/code&gt;</source>
          <target state="translated">しかし &lt;code&gt;N4659&lt;/code&gt; では</target>
        </trans-unit>
        <trans-unit id="d51d489d3ac886e7ea3ca9a2b07bed917b53895d" translate="yes" xml:space="preserve">
          <source>But the following expressions are fine:</source>
          <target state="translated">しかし、以下のような表現は問題ありません。</target>
        </trans-unit>
        <trans-unit id="99eaf8f6cc151e73b21d6790c8bc8a2b84b7ba36" translate="yes" xml:space="preserve">
          <source>C++98 and C++03</source>
          <target state="translated">C++98およびC++03</target>
        </trans-unit>
        <trans-unit id="9e67e09870ca0989e71cb269267edc0455043285" translate="yes" xml:space="preserve">
          <source>Evaluation  of  an  expression produces something and if in addition there is a change in the state of the execution environment it is said that the expression (its evaluation) has some side effect(s).</source>
          <target state="translated">式の評価は何かを生成し、それに加えて実行環境の状態に変化があれば、その式(その評価)は何らかの副作用を持つと言われています。</target>
        </trans-unit>
        <trans-unit id="ba67e3bf4a955da66b33b710af3baabeaf6f5983" translate="yes" xml:space="preserve">
          <source>Evaluation of operands of &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; operators are unsequenced relative to each other.</source>
          <target state="translated">&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; 演算子と &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; 演算子のオペランドの評価は、相互に順序付けられていません。</target>
        </trans-unit>
        <trans-unit id="64e262c018b20f74702f4f2184ebedf6e4ec767b" translate="yes" xml:space="preserve">
          <source>Evaluation of operands of &lt;code&gt;+&lt;/code&gt; operator are unsequenced relative to each other.</source>
          <target state="translated">&lt;code&gt;+&lt;/code&gt; 演算子のオペランドの評価は、相互に順序付けられていません。</target>
        </trans-unit>
        <trans-unit id="4207deb1ca4c1aeaec83c1e9887c129a6054ca46" translate="yes" xml:space="preserve">
          <source>Evaluations &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; are &lt;strong&gt;indeterminately sequenced&lt;/strong&gt; when either &lt;code&gt;A&lt;/code&gt; is sequenced before &lt;code&gt;B&lt;/code&gt; or &lt;code&gt;B&lt;/code&gt; is sequenced before &lt;code&gt;A&lt;/code&gt;, but it is unspecified which&lt;sup&gt;3&lt;/sup&gt;.</source>
          <target state="translated">評価 &lt;code&gt;A&lt;/code&gt; と &lt;code&gt;B&lt;/code&gt; は、 &lt;code&gt;A&lt;/code&gt; が &lt;code&gt;B&lt;/code&gt; の前に&lt;strong&gt;シーケンスされている&lt;/strong&gt;場合、または &lt;code&gt;B&lt;/code&gt; が &lt;code&gt;A&lt;/code&gt; の前に&lt;strong&gt;シーケンスされている&lt;/strong&gt;場合、 &lt;strong&gt;不確定にシーケンスさ&lt;/strong&gt;れますが、どれが指定されていないか&lt;sup&gt;3&lt;/sup&gt; 。</target>
        </trans-unit>
        <trans-unit id="6c07fa7c9e378ccd40615376ea6880ef0d1c7126" translate="yes" xml:space="preserve">
          <source>Every value computation and side effect associated with a full-expression is &lt;strong&gt;sequenced before&lt;/strong&gt; every value computation and side effect associated with the &lt;strong&gt;next full-expression to be evaluated&lt;/strong&gt;.</source>
          <target state="translated">全式に関連付けられているすべての値の計算と副作用は、 &lt;strong&gt;評価される次の全式に&lt;/strong&gt;関連付けられているすべての値の計算と副作用の&lt;strong&gt;前&lt;/strong&gt;に&lt;strong&gt;シーケンス&lt;/strong&gt; &lt;strong&gt;され&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="8ef2e1210c47909b18d1b60b9c30a0116c39a246" translate="yes" xml:space="preserve">
          <source>Example 1:</source>
          <target state="translated">例1.</target>
        </trans-unit>
        <trans-unit id="e11895e8b0e4fd9700bfd1eef21691b78b345f1b" translate="yes" xml:space="preserve">
          <source>Example 2:</source>
          <target state="translated">例2.</target>
        </trans-unit>
        <trans-unit id="19b6677ab36387289cbb2372a028e31d1e438889" translate="yes" xml:space="preserve">
          <source>Example 3 :</source>
          <target state="translated">例3.</target>
        </trans-unit>
        <trans-unit id="0483beb1135269908e7a45fb455b6f6963675242" translate="yes" xml:space="preserve">
          <source>Example :</source>
          <target state="translated">例.</target>
        </trans-unit>
        <trans-unit id="fb3447b632f6a431215776dcf254a01001a40c4f" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="translated">Examples:</target>
        </trans-unit>
        <trans-unit id="406e4bca4b11d6e472a01508642fc217ed5ef469" translate="yes" xml:space="preserve">
          <source>Except where noted, evaluations of operands of individual operators and of subexpressions of individual expressions are &lt;strong&gt;unsequenced&lt;/strong&gt;&lt;sup&gt;4&lt;/sup&gt;.</source>
          <target state="translated">特に明記されていない限り、個々の演算子のオペランドおよび個々の式の部分式の評価は、 &lt;strong&gt;順序付けされていません&lt;/strong&gt; &lt;sup&gt;4&lt;/sup&gt; 。</target>
        </trans-unit>
        <trans-unit id="a860b41292f726793b4b3135e3a7635bcdbf99ef" translate="yes" xml:space="preserve">
          <source>Expressions &lt;code&gt;(5)&lt;/code&gt;, &lt;code&gt;(7)&lt;/code&gt; and &lt;code&gt;(8)&lt;/code&gt; do not invoke undefined behaviour. Check out the following answers for a more detailed explanation.</source>
          <target state="translated">式 &lt;code&gt;(5)&lt;/code&gt; 、 &lt;code&gt;(7)&lt;/code&gt; 、および &lt;code&gt;(8)&lt;/code&gt; は、未定義の動作を呼び出しません。 詳細な説明については、以下の回答を確認してください。</target>
        </trans-unit>
        <trans-unit id="88fa3152aa1a080052016562134c18cdbc4e0603" translate="yes" xml:space="preserve">
          <source>For example :</source>
          <target state="translated">例えば。</target>
        </trans-unit>
        <trans-unit id="f42745ac0f5de04dd9f5e31b65fbbb63e4c15167" translate="yes" xml:space="preserve">
          <source>For example in &lt;code&gt;i = i + 1&lt;/code&gt; all the access of &lt;code&gt;i&lt;/code&gt; (in L.H.S and in R.H.S) are &lt;strong&gt;directly involved in computation&lt;/strong&gt; of the value to be written. So it is fine.</source>
          <target state="translated">たとえば、 &lt;code&gt;i = i + 1&lt;/code&gt; では、 iのすべてのアクセス（LHSおよびRHS）は、書き込まれる値の&lt;strong&gt;計算&lt;/strong&gt;に&lt;strong&gt;直接関与し&lt;/strong&gt;ます。 結構です。</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="9aa68292d7569023871135b4089b691e89a56f5a" translate="yes" xml:space="preserve">
          <source>Formally it means given any two evaluations&lt;sup&gt;(See below)&lt;/sup&gt;&lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt;, if &lt;code&gt;A&lt;/code&gt; is &lt;strong&gt;sequenced before&lt;/strong&gt;&lt;code&gt;B&lt;/code&gt;, then the execution of &lt;code&gt;A&lt;/code&gt;&lt;em&gt;shall precede&lt;/em&gt; the execution of &lt;code&gt;B&lt;/code&gt;. If &lt;code&gt;A&lt;/code&gt; is not sequenced before &lt;code&gt;B&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; is not sequenced before &lt;code&gt;A&lt;/code&gt;, then &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; are &lt;strong&gt;unsequenced&lt;/strong&gt;&lt;sup&gt;2&lt;/sup&gt;.</source>
          <target state="translated">形式的には、任意の2つの評価&lt;sup&gt;（以下を参照）&lt;/sup&gt; &lt;code&gt;A&lt;/code&gt; と &lt;code&gt;B&lt;/code&gt; が与えられることを意味し&lt;sup&gt;ます&lt;/sup&gt; &lt;code&gt;A&lt;/code&gt; が &lt;code&gt;B&lt;/code&gt; の &lt;strong&gt;前にシーケンスされている&lt;/strong&gt;場合、 Aの実行は &lt;code&gt;B&lt;/code&gt; の実行に&lt;em&gt;先行&lt;/em&gt;します。 &lt;code&gt;A&lt;/code&gt; が &lt;code&gt;B&lt;/code&gt; の前にシーケンスされておらず、 &lt;code&gt;B&lt;/code&gt; が &lt;code&gt;A&lt;/code&gt; の前にシーケンスされていない場合、 &lt;code&gt;A&lt;/code&gt; と &lt;code&gt;B&lt;/code&gt; のシーケンスは&lt;strong&gt;解除されます&lt;/strong&gt; &lt;sup&gt;2&lt;/sup&gt; 。</target>
        </trans-unit>
        <trans-unit id="eac423cee75b32090f5d0d9792a419ddd0af5e6f" translate="yes" xml:space="preserve">
          <source>From the above sentence the following expressions invoke Undefined Behaviour:</source>
          <target state="translated">上記の文から、以下の表現は、未定義の行動を呼び出します。</target>
        </trans-unit>
        <trans-unit id="ba6c960249f3aafc39737f39e23d6cefa0037a31" translate="yes" xml:space="preserve">
          <source>However several other similar cases still lead to undefined behavior.</source>
          <target state="translated">しかし、他のいくつかの類似したケースでは、まだ定義されていない動作が発生しています。</target>
        </trans-unit>
        <trans-unit id="64f407e5e5f324cd785789444eed0a59f0937e5e" translate="yes" xml:space="preserve">
          <source>I am guessing there is a fundamental reason for the change, it isn't merely cosmetic to make the old interpretation clearer: that reason is concurrency. Unspecified order of elaboration is merely selection of one of several possible serial orderings, this is quite different to before and after orderings, because if there is no specified ordering, concurrent evaluation is possible: not so with the old rules. For example in:</source>
          <target state="translated">私は、この変更には根本的な理由があると推測していますが、古い解釈をより明確にするための単なる化粧品ではありません。指定された順序がなければ、同時評価が可能なので、これは前後の順序付けとは全く異なります。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="dc15d88006a8199cfa78e1c45d14c286fb27f703" translate="yes" xml:space="preserve">
          <source>I often use funny and convoluted expressions like &lt;code&gt;a[++i] = i;&lt;/code&gt;, to make myself feel better. Why should I stop using them?</source>
          <target state="translated">私はしばしば &lt;code&gt;a[++i] = i;&lt;/code&gt; ようなおかしくて複雑な式を使います。 、気分を良くするために。 なぜ私はそれらの使用をやめるべきですか？</target>
        </trans-unit>
        <trans-unit id="7bf88b9125f90667375d801ebb86d1d08c42099d" translate="yes" xml:space="preserve">
          <source>If you find any flaw in the post please leave a comment. Power-users (With rep &amp;gt;20000) please do not hesitate to edit the post for correcting typos and other mistakes.</source>
          <target state="translated">投稿に欠陥がある場合は、コメントを残してください。 パワーユーザー（担当者&amp;gt; 20000）は、タイプミスやその他の間違いを修正するために投稿を編集してください。</target>
        </trans-unit>
        <trans-unit id="bc47a04d1a4bab80348b412aad415fc3dd9f9ce5" translate="yes" xml:space="preserve">
          <source>If you've read this, be sure to visit the follow-up question &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/4638364&quot;&gt;Undefined behavior and sequence points reloaded&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">これを読んだ場合は、フォローアップの質問&lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/4638364&quot;&gt;Undefined behavior and sequence points reloaded&lt;/a&gt;&lt;/em&gt;にアクセスしてください。</target>
        </trans-unit>
        <trans-unit id="652e555c4df01fc076aec8ee7a1d86b707fe7184" translate="yes" xml:space="preserve">
          <source>In (&amp;sect;1.9/15) it has been mentioned that</source>
          <target state="translated">（&amp;sect;1.9/ 15）では、</target>
        </trans-unit>
        <trans-unit id="4c52f5367ab947bba6d1b1cf5bca260a9edc87de" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;C99(ISO/IEC 9899:TC3)&lt;/code&gt; which seems absent from this discussion thus far the following steteents are made regarding order of evaluaiton.</source>
          <target state="translated">&lt;code&gt;C99(ISO/IEC 9899:TC3)&lt;/code&gt; では 、これまでのところこの議論に欠けているように見えますが、評価の順序に関して次のステテンが作成されています。</target>
        </trans-unit>
        <trans-unit id="bd5b7a4772b25de672849363c08a46e9876609fe" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;N4140&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;N4140&lt;/code&gt; の場合 ：</target>
        </trans-unit>
        <trans-unit id="c7e36d1d9a63e34fb0930c72cc616f8c4fbbd0c1" translate="yes" xml:space="preserve">
          <source>In C++11, evaluation of an expression (or a sub-expression) in general includes:</source>
          <target state="translated">C++11 では、一般的に式(または部分式)の評価には次のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="940e8112672c49e76504070e5cdf7d536f7df4e1" translate="yes" xml:space="preserve">
          <source>In addition to the initialization operation the value of &lt;code&gt;y&lt;/code&gt; gets changed due to the side effect of &lt;code&gt;++&lt;/code&gt; operator.</source>
          <target state="translated">初期化操作に加えて、 &lt;code&gt;++&lt;/code&gt; 演算子の副作用により &lt;code&gt;y&lt;/code&gt; の値が変更されます。</target>
        </trans-unit>
        <trans-unit id="e3894686d84dca096a2337f3716d28b44fedb4db" translate="yes" xml:space="preserve">
          <source>In all cases, the assignment is sequenced after the value
  computation of the right and left operands, and before the value computation of the assignment expression.
  &lt;strong&gt;&lt;em&gt;The right operand is sequenced before the left operand.&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">すべての場合において、割り当ては、右および左のオペランドの値計算の後、割り当て式の値計算の前にシーケンスされます。 &lt;strong&gt;&lt;em&gt;右のオペランドは左のオペランドの前に順序付けられます。&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f3783804d60a76a00fd374673d91cebbb0e44e25" translate="yes" xml:space="preserve">
          <source>In particular, the &lt;strong&gt;&lt;em&gt;following sentence&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">特に、 &lt;strong&gt;&lt;em&gt;次の文&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="617effb1d8e8263589de961e2e7b9f950ccfd3d0" translate="yes" xml:space="preserve">
          <source>In short, undefined behaviour means &lt;strong&gt;anything&lt;/strong&gt; can happen from daemons flying out of your nose to  your girlfriend getting pregnant.</source>
          <target state="translated">つまり、未定義の動作は、あなたの鼻から飛び立つデーモンからあなたのガールフレンドが妊娠するまで&lt;strong&gt;何でも&lt;/strong&gt;起こり得ることを意味します。</target>
        </trans-unit>
        <trans-unit id="30e4fdc9922ca401ebec5c5d2ca75e8eddd91c38" translate="yes" xml:space="preserve">
          <source>Informally it means that between two sequence points a variable must not be modified more than once.
In an expression statement, the &lt;code&gt;next sequence point&lt;/code&gt; is usually at the terminating semicolon, and the &lt;code&gt;previous sequence point&lt;/code&gt; is at the end of the previous statement. An expression may also contain intermediate &lt;code&gt;sequence points&lt;/code&gt;.</source>
          <target state="translated">非公式には、2つのシーケンスポイント間で変数を2回以上変更してはならないことを意味します。 式ステートメントでは、通常、 &lt;code&gt;next sequence point&lt;/code&gt; は終了セミコロンにあり、 &lt;code&gt;previous sequence point&lt;/code&gt; は前のステートメントの終わりにあります。 式には、中間 &lt;code&gt;sequence points&lt;/code&gt; 含めることもできます。</target>
        </trans-unit>
        <trans-unit id="72d6c19372257ac1933afb0a881d59d363366e13" translate="yes" xml:space="preserve">
          <source>Is it true that there are no Sequence Points in C++11?</source>
          <target state="translated">C++11にはシーケンスポイントがないというのは本当ですか?</target>
        </trans-unit>
        <trans-unit id="8bdbba62423aafb33233c14c04af680f2c1edba6" translate="yes" xml:space="preserve">
          <source>More importantly</source>
          <target state="translated">より重要なのは</target>
        </trans-unit>
        <trans-unit id="990cdd13220ac29d0b6ede208ef83a4fa9dbd84e" translate="yes" xml:space="preserve">
          <source>Multiple preincrement operations on a variable in C++0x</source>
          <target state="translated">C++0x の変数に対する複数のプリインクリメント演算</target>
        </trans-unit>
        <trans-unit id="d1ed313837b92d00cf87c6dae332f5af91bfca80" translate="yes" xml:space="preserve">
          <source>Now  (&amp;sect;1.9/14) says:</source>
          <target state="translated">今（&amp;sect;1.9/ 14）は言う：</target>
        </trans-unit>
        <trans-unit id="8a484c465793ca714b6bcdc23b747ba39bd901d6" translate="yes" xml:space="preserve">
          <source>Now the Standard in &lt;code&gt;&amp;sect;5/4&lt;/code&gt; says</source>
          <target state="translated">今、 &lt;code&gt;&amp;sect;5/4&lt;/code&gt; の標準は言う</target>
        </trans-unit>
        <trans-unit id="8bd7723fe01aeb7a98d73d693451c80beee344d7" translate="yes" xml:space="preserve">
          <source>Of course, using a C++17 compliant compiler does not necessarily mean that one should start writing such expressions.</source>
          <target state="translated">もちろん、C++17準拠のコンパイラを使用しても、必ずしもそのような式を書き始める必要はありません。</target>
        </trans-unit>
        <trans-unit id="458d1997bcf26b81560b08ea6ea5be3aa11f4376" translate="yes" xml:space="preserve">
          <source>Sequence point is a point in time at which the dust has settled and all side effects which have been seen so far are guaranteed to be complete.</source>
          <target state="translated">シーケンスポイントとは、塵も積もれば沈静化し、これまでに見られた全ての副作用が完全に保証されている時点のことです。</target>
        </trans-unit>
        <trans-unit id="9b53077da07196f084c3c12e2d14dc1059eec0c2" translate="yes" xml:space="preserve">
          <source>Side effects? What are side effects?</source>
          <target state="translated">副作用とは?副作用とは?</target>
        </trans-unit>
        <trans-unit id="e25244b7a39a375416acf31f2d6810f2b050173a" translate="yes" xml:space="preserve">
          <source>So far so good. Moving on to sequence points. An alternation definition of seq-points given by the comp.lang.c author &lt;code&gt;Steve Summit&lt;/code&gt;:</source>
          <target state="translated">ここまでは順調ですね。 シーケンスポイントに移ります。 comp.lang.cの作者である &lt;code&gt;Steve Summit&lt;/code&gt; によって与えられたシーケンスポイントの代替定義：</target>
        </trans-unit>
        <trans-unit id="3276033ca3f269623eda3a83e62e8252eee54d70" translate="yes" xml:space="preserve">
          <source>So there must be some relation between Undefined Behaviour and the above-mentioned things, right?</source>
          <target state="translated">ということは、未定義の行動と上記のようなことには何かしらの関係があるはずですよね?</target>
        </trans-unit>
        <trans-unit id="eabf5b327e550da30860ed745c1e2eae65082eff" translate="yes" xml:space="preserve">
          <source>That means in &lt;code&gt;x + y&lt;/code&gt; the value computation of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are sequenced before the value computation of &lt;code&gt;(x + y)&lt;/code&gt;.</source>
          <target state="translated">つまり、 &lt;code&gt;x + y&lt;/code&gt; では、 &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; の値の計算は、 &lt;code&gt;(x + y)&lt;/code&gt; 値の計算の前にシーケンスされます。</target>
        </trans-unit>
        <trans-unit id="04fa30dedddd3187dfef29f539bfd6d837ce07f7" translate="yes" xml:space="preserve">
          <source>The Standard defines Undefined Behaviour in Section &lt;code&gt;&amp;sect;1.3.12&lt;/code&gt; as</source>
          <target state="translated">標準では、 &lt;code&gt;&amp;sect;1.3.12&lt;/code&gt; で未定義の動作を次のように定義しています。</target>
        </trans-unit>
        <trans-unit id="cc3825fe31d3f227de05d63696f01adfd25413f6" translate="yes" xml:space="preserve">
          <source>The Standard says</source>
          <target state="translated">スタンダードには、次のように書かれています。</target>
        </trans-unit>
        <trans-unit id="ecfe246ba857988aa603cf220b0140b9f496a485" translate="yes" xml:space="preserve">
          <source>The order of evaluation of the operands is unspecified. If an attempt
  is made to modify the result of an assignment operator or to access it
  after the next sequence point, the behavior[sic] is undefined.(Section
  6.5.16 pp 91)</source>
          <target state="translated">オペランドの評価順序は不定です。代入演算子の結果を変更しようとしたり、次のシーケンスポイントの後にアクセスしようとした場合、動作[sic]は未定義です(セクション6.5.16 pp 91)</target>
        </trans-unit>
        <trans-unit id="98d34d7717c305fec376084020473ffd968566be" translate="yes" xml:space="preserve">
          <source>This answer is for the older versions of the C++ standard.  The C++11 and C++14 versions of the standard do not formally contain 'sequence points'; operations are 'sequenced before' or 'unsequenced' or 'indeterminately sequenced' instead.  The net effect is essentially the same, but the terminology is different.</source>
          <target state="translated">この回答は、C++標準の古いバージョンのものです。標準の C++11 バージョンと C++14 バージョンには正式に「シーケンス ポイント」が含まれておらず、操作は「前にシーケンスされた」か「シーケンスされていない」か「不確定にシーケンスされた」かのいずれかになります。正味の効果は基本的には同じですが、用語が異なります。</target>
        </trans-unit>
        <trans-unit id="391877d79b1fd6dd824fd29ab9c7d8d671230e24" translate="yes" xml:space="preserve">
          <source>This rule effectively constrains legal expressions to those in which the accesses demonstrably precede the modification.</source>
          <target state="translated">この規則は、法的表現を、アクセスが明らかに修正に先行するものに効果的に制約する。</target>
        </trans-unit>
        <trans-unit id="f7263d87574b12081e5695094ca83a2c5298a6b0" translate="yes" xml:space="preserve">
          <source>Those are:</source>
          <target state="translated">それは</target>
        </trans-unit>
        <trans-unit id="86ffe4e34823f77699906a8f2cc28e0a36b44be6" translate="yes" xml:space="preserve">
          <source>Trivial example:</source>
          <target state="translated">些細な例。</target>
        </trans-unit>
        <trans-unit id="a15a56e2346e0d81d8d95c79e39e94430fe5d1e8" translate="yes" xml:space="preserve">
          <source>Undefined  behavior  may  also  be  expected  when  this
  International Standard omits the description of any explicit definition of behavior.</source>
          <target state="translated">この国際規格では、動作の明示的な定義の記述を省略した場合、未定義の動作も予想される。</target>
        </trans-unit>
        <trans-unit id="5109b2e7ff59ff1bf194187e9b404f9b063d4e37" translate="yes" xml:space="preserve">
          <source>Undefined behavior and sequence points</source>
          <target state="translated">未定義の動作とシーケンスポイント</target>
        </trans-unit>
        <trans-unit id="fbb99fc8283814cb9af4d737b1328eb2f80f2298" translate="yes" xml:space="preserve">
          <source>Unsequenced Value Computations</source>
          <target state="translated">連続しない値の計算</target>
        </trans-unit>
        <trans-unit id="0b9ee0bad57b9aa23197de1969ca62cd45c0e10e" translate="yes" xml:space="preserve">
          <source>Value computation and side effect associated with &lt;code&gt;++x&lt;/code&gt; is sequenced after the value computation and side effect of &lt;code&gt;x = 10;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;++x&lt;/code&gt; に関連する値の計算と副作用は、 &lt;code&gt;x = 10;&lt;/code&gt; 値の計算と副作用の後にシーケンスされます。</target>
        </trans-unit>
        <trans-unit id="c1553ee23f64335d9f5575846335c215c4f556fe" translate="yes" xml:space="preserve">
          <source>What are &quot;sequence points&quot;?</source>
          <target state="translated">シーケンスポイント」とは?</target>
        </trans-unit>
        <trans-unit id="5580eab4cffca63ecfa895dce1c35429a7721d75" translate="yes" xml:space="preserve">
          <source>What are Sequence Points?</source>
          <target state="translated">シーケンスポイントとは?</target>
        </trans-unit>
        <trans-unit id="6e9c789346e18ce5be4e6deda5cc8b7767a977e7" translate="yes" xml:space="preserve">
          <source>What are the common sequence points listed in the C++ Standard ?</source>
          <target state="translated">C++標準に記載されている共通のシーケンスポイントは何ですか?</target>
        </trans-unit>
        <trans-unit id="a5ed464308c94903d6f60610da2f96028a67653c" translate="yes" xml:space="preserve">
          <source>What does it mean?</source>
          <target state="translated">それはどういう意味なのでしょうか?</target>
        </trans-unit>
        <trans-unit id="ddf1970fbf15053c0de78fbdb8bb9c5a5319d4a6" translate="yes" xml:space="preserve">
          <source>What does it mean? It means if an object is written to within a full expression, any and all accesses to it within the same expression &lt;strong&gt;must be directly involved in the computation of the value to be written&lt;/strong&gt;.</source>
          <target state="translated">どういう意味ですか？ つまり、オブジェクトが完全な式内で書き込まれる場合、同じ式内でのオブジェクトへのすべてのアクセス&lt;strong&gt;は、書き込まれる値の計算に直接関与&lt;/strong&gt;する&lt;strong&gt;必要があります&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="e9b9cc427f946732e721b7ccbf4b3c3166aeea40" translate="yes" xml:space="preserve">
          <source>What exactly is this 'Sequenced before' thing?</source>
          <target state="translated">この「前にシークエンスされた」って具体的には何なんだ?</target>
        </trans-unit>
        <trans-unit id="44c906335f64785d553c0284006d490c13bf0900" translate="yes" xml:space="preserve">
          <source>What is Undefined Behaviour?</source>
          <target state="translated">未定義の行動とは?</target>
        </trans-unit>
        <trans-unit id="f9c7bb688ad67e35f31fb2b89ccb85808deb976e" translate="yes" xml:space="preserve">
          <source>What is the meaning of the word 'evaluation' in context of C++11?</source>
          <target state="translated">C++11 の文脈で「評価」という言葉の意味は?</target>
        </trans-unit>
        <trans-unit id="093a89bf3df40d809fb2ed82e44f0855443490b8" translate="yes" xml:space="preserve">
          <source>What is the relation between Undefined Behaviour and Sequence Points?</source>
          <target state="translated">未定義行動とシーケンスポイントの関係は?</target>
        </trans-unit>
        <trans-unit id="caf82056aa35f376cce3be24a9b9a2227c913f8e" translate="yes" xml:space="preserve">
          <source>What is the relation between undefined behaviour and sequence points?</source>
          <target state="translated">未定義の動作とシーケンスポイントの関係は?</target>
        </trans-unit>
        <trans-unit id="6fb1c9cfb5692133ce65e0caed51fa572a4b8df5" translate="yes" xml:space="preserve">
          <source>When calling a function (whether or not the function is inline), every value computation and side effect associated with any argument expression, or with the postfix expression designating the called function, is sequenced before execution of every expression or statement in the body of the called function. [&lt;em&gt;Note:&lt;/em&gt;&lt;strong&gt;Value computations and side effects associated with different argument expressions are unsequenced&lt;/strong&gt;.  &amp;mdash; &lt;em&gt;end note&lt;/em&gt;]</source>
          <target state="translated">関数を呼び出すとき（関数がインラインかどうかに関係なく）、引数式、または呼び出された関数を指定する後置式に関連付けられているすべての値の計算と副作用は、呼び出された関数。 [ &lt;em&gt;注：&lt;/em&gt; &lt;strong&gt;異なる引数式に関連付けられた値の計算と副作用は、シーケンスされていません&lt;/strong&gt; 。 &amp;mdash; &lt;em&gt;エンドノート&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="51b6b5895ef96bb02783c8a47c62b0dd464c3aba" translate="yes" xml:space="preserve">
          <source>You must also know that &lt;code&gt;the order of evaluation of operands of individual operators and subexpressions of individual expressions, and the order in which side effects take place, is unspecified&lt;/code&gt;.</source>
          <target state="translated">また &lt;code&gt;the order of evaluation of operands of individual operators and subexpressions of individual expressions, and the order in which side effects take place, is unspecified&lt;/code&gt; ないことも知っておく必要があります 。</target>
        </trans-unit>
        <trans-unit id="466a6585cbd4be9a5e956ed88dd68a492784a9f9" translate="yes" xml:space="preserve">
          <source>[...]the order of evaluation of subexpressions and the order in which
  side effects take place are both unspecified. (Section 6.5 pp 67)</source>
          <target state="translated">[....]副表現の評価の順序と副作用が起こる順序は、いずれも不特定である。(セクション6.5 pp 67)</target>
        </trans-unit>
        <trans-unit id="9bb817c4fd78f76ae7b6675b66a0af1204c51885" translate="yes" xml:space="preserve">
          <source>at a function call (whether or not the function is inline), after the evaluation of all function arguments (if any) which 
takes place before execution of any expressions or statements in the function body (&lt;code&gt;&amp;sect;1.9/17&lt;/code&gt;).</source>
          <target state="translated">関数呼び出し（関数がインラインかどうかに関係なく）、関数本体内の式またはステートメントの実行前に行われるすべての関数引数（ある場合）の評価後（ &lt;code&gt;&amp;sect;1.9/17&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="f12161911d4fad86511b4eb366e2ee36effc8211" translate="yes" xml:space="preserve">
          <source>at the end of the evaluation of full expression (&lt;code&gt;&amp;sect;1.9/16&lt;/code&gt;) (A full-expression is an expression that is not a subexpression of another expression.)&lt;sup&gt;1&lt;/sup&gt;</source>
          <target state="translated">完全式の評価の終了時（ &lt;code&gt;&amp;sect;1.9/16&lt;/code&gt; ）（完全式は、別の式の部分式ではない式です。） &lt;sup&gt;1&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="b3394eecdcb8cb1117c318cedb871d0572708579" translate="yes" xml:space="preserve">
          <source>behavior, such as might arise upon use of an erroneous program construct or erroneous data, for which this International Standard imposes &lt;strong&gt;no  requirements &lt;sup&gt;3&lt;/sup&gt;&lt;/strong&gt;.</source>
          <target state="translated">この国際標準が&lt;strong&gt;要件&lt;/strong&gt;を課さ&lt;strong&gt;ない&lt;/strong&gt; 、誤ったプログラム構造または誤ったデータの使用時に発生する可能性のある動作など&lt;strong&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="cca93eac493b7391171ec42a66933b5d0d433e1e" translate="yes" xml:space="preserve">
          <source>between evaluations executed by a single &lt;a href=&quot;http://en.wikipedia.org/wiki/Thread_(computer_science)&quot;&gt;thread&lt;/a&gt; and induces a &lt;strong&gt;strict partial order&lt;/strong&gt;&lt;sup&gt;1&lt;/sup&gt;</source>
          <target state="translated">単一の&lt;a href=&quot;http://en.wikipedia.org/wiki/Thread_(computer_science)&quot;&gt;スレッド&lt;/a&gt;によって実行された評価の間で、 &lt;strong&gt;厳密な半順序&lt;/strong&gt;を引き起こします &lt;sup&gt;1&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="3c7b1f87e9915365f75a64d6e2a47b9e86d8035e" translate="yes" xml:space="preserve">
          <source>in the evaluation of each of the following expressions after the evaluation of the first expression (&lt;code&gt;&amp;sect;1.9/18&lt;/code&gt;) &lt;sup&gt;2&lt;/sup&gt;</source>
          <target state="translated">最初の式の評価後の次の各式の評価（ &lt;code&gt;&amp;sect;1.9/18&lt;/code&gt; ） &lt;sup&gt;2&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="6f83c8b6514790a9407377c3f4ef98b941b04595" translate="yes" xml:space="preserve">
          <source>initiation of &lt;strong&gt;side effects&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;副作用の&lt;/strong&gt;開始。</target>
        </trans-unit>
        <trans-unit id="6c0c70ca023797ca6b5b8e5572c7ec724cb314ce" translate="yes" xml:space="preserve">
          <source>is disallowed because one of the accesses of &lt;code&gt;i&lt;/code&gt; (the one in &lt;code&gt;a[i]&lt;/code&gt;) has nothing to do with the value which ends up being stored in i (which happens over in &lt;code&gt;i++&lt;/code&gt;), and so there's no good way to define--either for our understanding or the compiler's--whether the access should take place before or after the incremented value is stored. So the behaviour is undefined.</source>
          <target state="translated">&lt;code&gt;i&lt;/code&gt; のアクセスの1つ（ &lt;code&gt;a[i]&lt;/code&gt; 内の1つ）は、iに格納されることになる値（ &lt;code&gt;i++&lt;/code&gt; で発生）とは関係がないため、許可されません。したがって、定義する適切な方法はありません-私たちの理解またはコンパイラーのどちらか-アクセスがインクリメントされた値が格納される前または後に行われるべきかどうか。 したがって、動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="6df2d1e296ea26ed60c7b7b29576ce6872dfc6a2" translate="yes" xml:space="preserve">
          <source>make several cases of previously undefined behavior valid, including the one in question:</source>
          <target state="translated">問題のものを含め、以前に定義されていない動作のいくつかのケースを有効にします。</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">or</target>
        </trans-unit>
        <trans-unit id="f98714b22930c003dcee8dfb1a4a94df52338e76" translate="yes" xml:space="preserve">
          <source>previously either a then b, or, b then a. Now, a and b can be evaluated with instructions interleaved or even on different cores.</source>
          <target state="translated">以前は a then b、または b then a のどちらかでしたが、今では、a と b は命令がインターリーブされていたり、異なるコアでも評価できるようになりました。</target>
        </trans-unit>
        <trans-unit id="016cfaace633cc6567b132c93461aba49d804cd4" translate="yes" xml:space="preserve">
          <source>the behaviour is &lt;strong&gt;undefined&lt;/strong&gt;.</source>
          <target state="translated">動作は&lt;strong&gt;未定義&lt;/strong&gt;です。</target>
        </trans-unit>
        <trans-unit id="11688589f9f4e92309082daaedd72c31492e5f21" translate="yes" xml:space="preserve">
          <source>together with the following clarification</source>
          <target state="translated">次のような明確化とともに</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
