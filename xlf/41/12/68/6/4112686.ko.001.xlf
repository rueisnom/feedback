<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://stackoverflow.com/questions/4112686">
    <body>
      <group id="4112686">
        <trans-unit id="2058f92b0de7e12c6782c1a4eda7cfebe29256ec" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Ajax&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Ajax&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fc151f7bb9f6c75ba5aa00ebfc79caba10f9a670" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Here is ajax Sample&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;아약스 샘플입니다&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e9b04aae0fcb1123c59e5b55206bb9fdae6f5829" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;In Servlet&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;서블릿에서&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="983c95a5ee8d4366708a42d41fe5cd2558bc337e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;LoginServlet Servlet Code :-&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;LoginServlet 서블릿 코드 :-&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6a5fb6e5fc13a01937ae02611fcad859574413d2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;index.html&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;index.html&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="402400b00b019f3b35fb23e3a52105143431569d" translate="yes" xml:space="preserve">
          <source>Access Java / Servlet / JSP / JSTL / EL variables in JavaScript</source>
          <target state="translated">JavaScript로 Java / Servlet / JSP / JSTL / EL 변수에 액세스</target>
        </trans-unit>
        <trans-unit id="c70e9a2dda5670ffe54888a0054ca4d0bdb6f986" translate="yes" xml:space="preserve">
          <source>Ajax (also AJAX) an acronym for Asynchronous JavaScript and XML) is a group of interrelated web development techniques used on the client-side to create asynchronous web applications. With Ajax, web applications can send data to, and retrieve data from, a server asynchronously 
Below is example code:</source>
          <target state="translated">Ajax (AJAX) (Asynchronous JavaScript and XML의 약어)는 클라이언트 측에서 비동기 웹 애플리케이션을 작성하는 데 사용되는 상호 관련된 웹 개발 기술 그룹입니다. Ajax를 사용하면 웹 애플리케이션이 서버와 비동기 적으로 데이터를주고받을 수 있습니다. 아래는 예제 코드입니다.</target>
        </trans-unit>
        <trans-unit id="2fad0a651e220aefadec27dc104de3e10b23be80" translate="yes" xml:space="preserve">
          <source>Ajaxifying an existing form</source>
          <target state="translated">기존 양식의 아약시</target>
        </trans-unit>
        <trans-unit id="113ae3d09a0c918d7c1bcb8f7f05166e16fe886e" translate="yes" xml:space="preserve">
          <source>And the JSP:</source>
          <target state="translated">그리고 JSP :</target>
        </trans-unit>
        <trans-unit id="0c1a194459d4f382c580c25f68a3dead23f08e70" translate="yes" xml:space="preserve">
          <source>Call Servlet and invoke Java code from JavaScript along with parameters</source>
          <target state="translated">Servlet을 호출하고 매개 변수와 함께 JavaScript에서 Java 코드를 호출하십시오.</target>
        </trans-unit>
        <trans-unit id="1be07164444118687e39c18c9d8a253ec4bd137a" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;/some.jsp&lt;/code&gt; like below (note: the code doesn't expect the JSP file being placed in a subfolder, if you do so, alter servlet URL accordingly):</source>
          <target state="translated">아래와 같이 &lt;code&gt;/some.jsp&lt;/code&gt; 를 작성하십시오 (참고 : 코드는 JSP 파일이 서브 폴더에 배치 될 것으로 예상하지 않습니다. 그렇게하면 서블릿 URL을 적절히 변경하십시오).</target>
        </trans-unit>
        <trans-unit id="218c81d29238c44d6989d05c6a863c654a6b371d" translate="yes" xml:space="preserve">
          <source>Create a servlet with a &lt;code&gt;doGet()&lt;/code&gt; method which look like this:</source>
          <target state="translated">다음과 같은 &lt;code&gt;doGet()&lt;/code&gt; 메소드를 사용하여 서블릿을 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="74fa38aab4bf8664c9779452f07c09fe8194e1af" translate="yes" xml:space="preserve">
          <source>Do note that a lot of starters mix &lt;code&gt;contentType&lt;/code&gt; with &lt;code&gt;dataType&lt;/code&gt;. The &lt;code&gt;contentType&lt;/code&gt; represents the type of the &lt;strong&gt;request&lt;/strong&gt; body. The &lt;code&gt;dataType&lt;/code&gt; represents the (expected) type of the &lt;strong&gt;response&lt;/strong&gt; body, which is usually unnecessary as jQuery already autodetects it based on response's &lt;code&gt;Content-Type&lt;/code&gt; header.</source>
          <target state="translated">많은 초보자가 &lt;code&gt;contentType&lt;/code&gt; 과 &lt;code&gt;dataType&lt;/code&gt; 을 혼합한다는 점에 유의하십시오. &lt;code&gt;contentType&lt;/code&gt; 은 &lt;strong&gt;요청&lt;/strong&gt; 본문의 유형을 나타냅니다. &lt;code&gt;dataType&lt;/code&gt; 은 &lt;strong&gt;응답&lt;/strong&gt; 본문의 (예상 된) 유형을 나타내며, 일반적으로 jQuery가 응답의 &lt;code&gt;Content-Type&lt;/code&gt; 헤더를 기반으로 자동 감지하므로 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e7ca8fc2fbc7580c6e74e346b13bf93f92eaf53b" translate="yes" xml:space="preserve">
          <source>Do note that jQuery automatically parses the response as JSON and gives you directly a JSON object (&lt;code&gt;responseJson&lt;/code&gt;) as function argument when you set the response content type to &lt;code&gt;application/json&lt;/code&gt;. If you forget to set it or rely on a default of &lt;code&gt;text/plain&lt;/code&gt; or &lt;code&gt;text/html&lt;/code&gt;, then the &lt;code&gt;responseJson&lt;/code&gt; argument wouldn't give you a JSON object, but a plain vanilla string and you'd need to manually fiddle around with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse&quot;&gt;&lt;code&gt;JSON.parse()&lt;/code&gt;&lt;/a&gt; afterwards, which is thus totally unnecessary if you set the content type right in first place.</source>
          <target state="translated">jQuery는 응답을 자동으로 JSON으로 구문 분석하고 응답 컨텐츠 유형을 &lt;code&gt;application/json&lt;/code&gt; 으로 설정할 때 JSON 오브젝트 ( &lt;code&gt;responseJson&lt;/code&gt; )를 함수 인수로 직접 제공합니다. 설정을 잊거나 기본값 인 &lt;code&gt;text/plain&lt;/code&gt; 또는 &lt;code&gt;text/html&lt;/code&gt; 에 의존하는 경우 &lt;code&gt;responseJson&lt;/code&gt; 인수는 JSON 객체를 제공하지 않지만 일반 바닐라 문자열을 제공하므로 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse&quot;&gt; &lt;code&gt;JSON.parse()&lt;/code&gt; &lt;/a&gt; 으로 수동으로 조정해야합니다 . 나중에 parse () 를 사용하면 컨텐츠 유형을 먼저 설정하면 완전히 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7716e53e6264d789d93f62b54b389ddc31f8c9d3" translate="yes" xml:space="preserve">
          <source>Do note that this all is more clumsy than just using &lt;code&gt;$.param()&lt;/code&gt;. Normally, you want to use &lt;code&gt;JSON.stringify()&lt;/code&gt; only if the target service is e.g. a JAX-RS (RESTful) service which is for some reason only capable of consuming JSON strings and not regular request parameters.</source>
          <target state="translated">이 모든 것이 단지 &lt;code&gt;$.param()&lt;/code&gt; 사용하는 것보다 더 어색합니다. 일반적으로 대상 서비스가 JAX-RS (RESTful) 서비스 인 경우에만 &lt;code&gt;JSON.stringify()&lt;/code&gt; 를 사용 하려고 합니다.이 서비스는 어떤 이유로 든 일반 요청 매개 변수가 아닌 JSON 문자열 만 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="076a5bb453b0c056da4abb1b6bd46e404396643a" translate="yes" xml:space="preserve">
          <source>Here's an example which displays &lt;code&gt;List&amp;lt;Product&amp;gt;&lt;/code&gt; in a &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; where the &lt;code&gt;Product&lt;/code&gt; class has the properties &lt;code&gt;Long id&lt;/code&gt;, &lt;code&gt;String name&lt;/code&gt; and &lt;code&gt;BigDecimal price&lt;/code&gt;. The servlet:</source>
          <target state="translated">다음은 &lt;code&gt;Product&lt;/code&gt; 클래스에 &lt;code&gt;Long id&lt;/code&gt; , &lt;code&gt;String name&lt;/code&gt; 및 &lt;code&gt;BigDecimal price&lt;/code&gt; 속성이있는 &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; &lt;code&gt;List&amp;lt;Product&amp;gt;&lt;/code&gt; 에 List &amp;lt;Product&amp;gt; 를 표시하는 예제입니다. 서블릿 :</target>
        </trans-unit>
        <trans-unit id="76606af17829a9c914ce8f7ffdba8e558646d376" translate="yes" xml:space="preserve">
          <source>Here's an example which displays &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; as &lt;code&gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;&lt;/code&gt;. The servlet:</source>
          <target state="translated">다음은 &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; 을 &lt;code&gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;&lt;/code&gt; 로 표시하는 예입니다. 서블릿 :</target>
        </trans-unit>
        <trans-unit id="1fedc26505ef0a45590a9011066063c7e892fe65" translate="yes" xml:space="preserve">
          <source>Here's an example which does effectively the same as previous example, but then with XML instead of JSON. When using JSP as XML output generator you'll see that it's less tedious to code the table and all. JSTL is this way much more helpful as you can actually use it to iterate over the results and perform server side data formatting. The servlet:</source>
          <target state="translated">다음은 이전 예제와 동일하지만 JSON 대신 XML을 사용하는 예제입니다. JSP를 XML 출력 생성기로 사용하면 테이블과 코드를 모두 코딩하는 것이 덜 지루하다는 것을 알 수 있습니다. JSTL은 실제로 결과를 반복하고 서버 측 데이터 형식을 수행하는 데 사용할 수 있으므로 훨씬 유용합니다. 서블릿 :</target>
        </trans-unit>
        <trans-unit id="19358dfb5297679ce0acc76090ad0fed08d881b2" translate="yes" xml:space="preserve">
          <source>Here's another example which displays &lt;code&gt;Map&amp;lt;String, String&amp;gt;&lt;/code&gt; as &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;Map&amp;lt;String, String&amp;gt;&lt;/code&gt; 을 &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; 으로 표시하는 또 다른 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="8b0e1d9c633234ea0495dd581b0582c7449952fa" translate="yes" xml:space="preserve">
          <source>Here, we are going to create the simple example to create the login form using servlet.</source>
          <target state="translated">여기서는 서블릿을 사용하여 로그인 양식을 작성하는 간단한 예제를 작성합니다.</target>
        </trans-unit>
        <trans-unit id="6b5e95c3c081372fa9b03d1ed20f55fe66a66b84" translate="yes" xml:space="preserve">
          <source>How to switch easily between ajax-based website and basic HTML website?</source>
          <target state="translated">Ajax 기반 웹 사이트와 기본 HTML 웹 사이트를 쉽게 전환하는 방법은 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="70cbe90eaa16a4700707cad552786a51fb645ab2" translate="yes" xml:space="preserve">
          <source>How to upload files to server using JSP/Servlet and Ajax?</source>
          <target state="translated">JSP / Servlet 및 Ajax를 사용하여 서버에 파일을 업로드하는 방법은 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="940f0507c952fdbc369b877849a17245348e5801" translate="yes" xml:space="preserve">
          <source>How to use Servlets and Ajax</source>
          <target state="translated">서블릿 및 Ajax 사용 방법</target>
        </trans-unit>
        <trans-unit id="72b18b38822f945c39d076ebbaf2df215a2f0ced" translate="yes" xml:space="preserve">
          <source>I will show you a whole example of servlet &amp;amp; how do ajax call.</source>
          <target state="translated">서블릿의 전체 예와 아약스 호출 방법을 보여 드리겠습니다.</target>
        </trans-unit>
        <trans-unit id="742dbe1ab1d99c7c39225c1cb57c44b7fe21aa08" translate="yes" xml:space="preserve">
          <source>I'm very new to web apps and Servlets and I have the following question:</source>
          <target state="translated">나는 웹 앱과 서블릿을 처음 접했고 다음과 같은 질문이 있습니다.</target>
        </trans-unit>
        <trans-unit id="b7040a94ad17c3b5189f80147817e1670383c612" translate="yes" xml:space="preserve">
          <source>If you don't have a form at all, but just wanted to interact with the servlet &quot;in the background&quot; whereby you'd like to POST some data, then you can use jQuery &lt;a href=&quot;http://api.jquery.com/jquery.param/&quot;&gt;&lt;code&gt;$.param()&lt;/code&gt;&lt;/a&gt; to easily convert a JSON object to an URL-encoded query string.</source>
          <target state="translated">양식이 전혀 없지만 &quot;백그라운드에서&quot;서블릿과 상호 작용하여 일부 데이터를 POST &lt;a href=&quot;http://api.jquery.com/jquery.param/&quot;&gt; &lt;code&gt;$.param()&lt;/code&gt; &lt;/a&gt; 경우 jQuery $ .param () 을 사용하여 JSON 객체를 쉽게 변환 할 수 있습니다 URL 인코딩 된 쿼리 문자열</target>
        </trans-unit>
        <trans-unit id="b4579b1eac22795f9aa92a821890b3fe553d42f7" translate="yes" xml:space="preserve">
          <source>If you however intend to send the JSON object as a whole instead of as individual request parameters for some reason, then you'd need to serialize it to a string using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify&quot;&gt;&lt;code&gt;JSON.stringify()&lt;/code&gt;&lt;/a&gt; (not part of jQuery) and instruct jQuery to set request content type to &lt;code&gt;application/json&lt;/code&gt; instead of (default) &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;. This can't be done via &lt;code&gt;$.post()&lt;/code&gt; convenience function, but needs to be done via &lt;code&gt;$.ajax()&lt;/code&gt; as below.</source>
          <target state="translated">그러나 어떤 이유로 든 개별 요청 매개 변수 대신 전체로 JSON 객체를 보내려면 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify&quot;&gt; &lt;code&gt;JSON.stringify()&lt;/code&gt; &lt;/a&gt; (jQuery의 일부가 아님 )를 사용하여 문자열로 직렬화하고 jQuery에 설정하도록 지시해야합니다 (기본) &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; 대신 &lt;code&gt;application/json&lt;/code&gt; 에 컨텐츠 유형을 요청 하십시오 . 이것은 &lt;code&gt;$.post()&lt;/code&gt; 편의 함수를 통해 수행 할 수 없지만 아래에서 &lt;code&gt;$.ajax()&lt;/code&gt; 를 통해 수행해야합니다.</target>
        </trans-unit>
        <trans-unit id="3486e9159c31f3a00b22d150b18bfbf25ccec1d3" translate="yes" xml:space="preserve">
          <source>Important to realize and understand is that any &lt;code&gt;sendRedirect()&lt;/code&gt; and &lt;code&gt;forward()&lt;/code&gt; call by the servlet on an ajax request would only forward or redirect &lt;em&gt;the ajax request itself&lt;/em&gt; and not the main document/window where the ajax request originated. JavaScript/jQuery would in such case only retrieve the redirected/forwarded response as &lt;code&gt;responseText&lt;/code&gt; variable in the callback function. If it represents a whole HTML page and not an ajax-specific XML or JSON response, then all you could do is to replace the current document with it.</source>
          <target state="translated">아약스 요청에서 서블릿에 의한 &lt;code&gt;sendRedirect()&lt;/code&gt; 및 &lt;code&gt;forward()&lt;/code&gt; 호출은 아약스 요청이 시작된 기본 문서 / 창이 아닌 &lt;em&gt;아약스 요청 자체를&lt;/em&gt; 전달하거나 리디렉션 만한다는 점을 이해하고 이해해야 &lt;em&gt;합니다&lt;/em&gt; . 이러한 경우 JavaScript / jQuery는 리디렉션 / 전달 된 응답 만 콜백 함수에서 &lt;code&gt;responseText&lt;/code&gt; 변수로 검색합니다. Ajax 관련 XML 또는 JSON 응답이 아닌 전체 HTML 페이지를 나타내는 경우 현재 문서를 해당 페이지로 바꾸면됩니다.</target>
        </trans-unit>
        <trans-unit id="62023385138308b68158d933935bc448896ed4bb" translate="yes" xml:space="preserve">
          <source>Indeed, the keyword is &quot;ajax&quot;: &lt;em&gt;Asynchronous JavaScript and XML&lt;/em&gt;. However, last years it's more than often &lt;em&gt;Asynchronous JavaScript and JSON&lt;/em&gt;. Basically, you let JS execute an asynchronous HTTP request and update the HTML DOM tree based on the response data.</source>
          <target state="translated">실제로 키워드는 &quot;ajax&quot;: &lt;em&gt;Asynchronous JavaScript and XML&lt;/em&gt; 입니다. 그러나 지난 몇 년 동안 종종 &lt;em&gt;비동기 JavaScript 및 JSON 이상&lt;/em&gt; 입니다. 기본적으로 JS가 비동기 HTTP 요청을 실행하고 응답 데이터를 기반으로 HTML DOM 트리를 업데이트 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7dcdb57f219d93549fb03015051304d8abb8679d" translate="yes" xml:space="preserve">
          <source>It is also possible to implement this kind of thing using some browser plugin or add-on, though it may be tricky for a plugin to reach into the browser's data structures to update the DOM.  (Native code plugins normally write to some graphics frame that is embedded in the page.)</source>
          <target state="translated">플러그인이 브라우저의 데이터 구조에 도달하여 DOM을 업데이트하는 것은 까다로울 수 있지만 일부 브라우저 플러그인 또는 애드온을 사용하여 이런 종류의 것을 구현할 수도 있습니다. 기본 코드 플러그인은 일반적으로 페이지에 포함 된 일부 그래픽 프레임에 씁니다.</target>
        </trans-unit>
        <trans-unit id="fdf95eca9f8b1d2244f7b2cd723ef976ae32c350" translate="yes" xml:space="preserve">
          <source>Jsp page java script function to submit data to servlet with two variable firstName and lastName:</source>
          <target state="translated">두 개의 변수 firstName 및 lastName을 사용하여 서블릿에 데이터를 제출하는 JSP 페이지 Java 스크립트 함수 :</target>
        </trans-unit>
        <trans-unit id="b4b9557d228a01bca5554f1ab7acdcd854b66199" translate="yes" xml:space="preserve">
          <source>Kickoff example returning &lt;code&gt;String&lt;/code&gt; as plain text</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; 을 일반 텍스트로 반환하는 킥오프 예제</target>
        </trans-unit>
        <trans-unit id="5179696436ccb32906957d8a57c587c03f4caab2" translate="yes" xml:space="preserve">
          <source>Manually sending JSON object to servlet</source>
          <target state="translated">서블릿에 JSON 객체를 수동으로 보내기</target>
        </trans-unit>
        <trans-unit id="01e4e4e67b46ca3b3e78d00525ca2700a9c99b3a" translate="yes" xml:space="preserve">
          <source>Manually sending request parameters to servlet</source>
          <target state="translated">서블릿에 요청 매개 변수 수동 전송</target>
        </trans-unit>
        <trans-unit id="dde61058e584e3bdf27674e7b20f4195924c8af5" translate="yes" xml:space="preserve">
          <source>Map this servlet on an URL pattern of &lt;code&gt;/someservlet&lt;/code&gt; or &lt;code&gt;/someservlet/*&lt;/code&gt; as below (obviously, the URL pattern is free to your choice, but you'd need to alter the &lt;code&gt;someservlet&lt;/code&gt; URL in JS code examples over all place accordingly):</source>
          <target state="translated">이 서블릿을 아래와 같이 &lt;code&gt;/someservlet&lt;/code&gt; 또는 &lt;code&gt;/someservlet/*&lt;/code&gt; 의 URL 패턴에 맵핑 하십시오 (물론 URL 패턴은 자유롭게 선택할 수 있지만 JS 코드 예제에서 &lt;code&gt;someservlet&lt;/code&gt; URL을 그에 따라 변경해야합니다).</target>
        </trans-unit>
        <trans-unit id="c56e5df70c3ac3a6c3973476fdf82139c44069da" translate="yes" xml:space="preserve">
          <source>Normally you cant update a page from a servlet. Client (browser) has to request an update. Eiter client loads a whole new page or it requests an update to a part of an existing page. This technique is called Ajax.</source>
          <target state="translated">일반적으로 서블릿에서 페이지를 업데이트 할 수 없습니다. 클라이언트 (브라우저)는 업데이트를 요청해야합니다. Eiter 클라이언트는 완전히 새로운 페이지를로드하거나 기존 페이지의 일부에 대한 업데이트를 요청합니다. 이 기술을 Ajax라고합니다.</target>
        </trans-unit>
        <trans-unit id="bd39a665cfc0865af33aa13bcfa362533cc6e53c" translate="yes" xml:space="preserve">
          <source>Note that this doesn't change the URL as enduser sees in browser's address bar. So there are issues with bookmarkability. Therefore, it's much better to just return an &quot;instruction&quot; for JavaScript/jQuery to perform a redirect instead of returning the whole content of the redirected page. E.g. by returning a boolean, or an URL.</source>
          <target state="translated">최종 사용자가 브라우저의 주소 표시 줄에서 볼 수 있듯이 URL은 변경되지 않습니다. 북마크 기능에 문제가 있습니다. 따라서 리디렉션 된 페이지의 전체 내용을 반환하는 대신 JavaScript / jQuery가 리디렉션을 수행하도록 &quot;명령&quot;을 반환하는 것이 훨씬 좋습니다. 예를 들어 부울 또는 URL을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="22feb91f5c22ed94258e3f081aa26bfc5c037905" translate="yes" xml:space="preserve">
          <source>Now open the &lt;a href=&quot;http://localhost:8080/context/test.jsp&quot;&gt;http://localhost:8080/context/test.jsp&lt;/a&gt; in the browser and press the button. You'll see that the content of the div get updated with the servlet response.</source>
          <target state="translated">이제 브라우저에서 &lt;a href=&quot;http://localhost:8080/context/test.jsp&quot;&gt;http : // localhost : 8080 / context / test.jsp&lt;/a&gt; 를 열고 버튼을 누릅니다. div의 내용이 서블릿 응답으로 업데이트되는 것을 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cfd2f0fb386862ba0d1aa2adf79265c37a9d89c7" translate="yes" xml:space="preserve">
          <source>Or, when you're not on a Servlet 3.0 compatible container yet (Tomcat 7, Glassfish 3, JBoss AS 6, etc or newer), then map it in &lt;code&gt;web.xml&lt;/code&gt; the old fashioned way (see also &lt;a href=&quot;https://stackoverflow.com/tags/servlets/info&quot;&gt;our Servlets wiki page&lt;/a&gt;):</source>
          <target state="translated">또는 아직 Servlet 3.0 호환 컨테이너에 있지 않은 경우 (Tomcat 7, Glassfish 3, JBoss AS 6 등 이상) &lt;code&gt;web.xml&lt;/code&gt; 에 구식 방식으로 매핑하십시오 ( &lt;a href=&quot;https://stackoverflow.com/tags/servlets/info&quot;&gt;Servlet 위키 페이지 참조&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="26171874502aeafcb87d300f5bedd28651eb82f6" translate="yes" xml:space="preserve">
          <source>Returning &lt;code&gt;List&amp;lt;Entity&amp;gt;&lt;/code&gt; as JSON</source>
          <target state="translated">JSON으로 &lt;code&gt;List&amp;lt;Entity&amp;gt;&lt;/code&gt; 반환</target>
        </trans-unit>
        <trans-unit id="5f03764f3bd2c86ee26d6b433ce4069420e16f5b" translate="yes" xml:space="preserve">
          <source>Returning &lt;code&gt;List&amp;lt;Entity&amp;gt;&lt;/code&gt; as XML</source>
          <target state="translated">XML로 &lt;code&gt;List&amp;lt;Entity&amp;gt;&lt;/code&gt; 반환</target>
        </trans-unit>
        <trans-unit id="3688b821c329699e6f9a80ff22369c56a5beac00" translate="yes" xml:space="preserve">
          <source>Returning &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; as JSON</source>
          <target state="translated">JSON으로 &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; 반환</target>
        </trans-unit>
        <trans-unit id="679fcf8af507bcac5a23e4ab406f76e65e4b3b8d" translate="yes" xml:space="preserve">
          <source>Returning &lt;code&gt;Map&amp;lt;String, String&amp;gt;&lt;/code&gt; as JSON</source>
          <target state="translated">JSON으로 &lt;code&gt;Map&amp;lt;String, String&amp;gt;&lt;/code&gt; 반환</target>
        </trans-unit>
        <trans-unit id="371a87eafb4de078ff674d69a5a89c186532eb49" translate="yes" xml:space="preserve">
          <source>See also:</source>
          <target state="translated">또한보십시오:</target>
        </trans-unit>
        <trans-unit id="1a93f0fc4e88ee9727bc2cea774ad68b33c0e53b" translate="yes" xml:space="preserve">
          <source>Sending a redirect from servlet</source>
          <target state="translated">서블릿에서 리디렉션 보내기</target>
        </trans-unit>
        <trans-unit id="acb0ba47f04915e496a795c1972528f72461d66f" translate="yes" xml:space="preserve">
          <source>Servlet to read data send back to jsp in xml format ( You could use text as well. Just you need to change response content to text and render data on javascript function.)</source>
          <target state="translated">데이터를 읽는 서블릿은 XML 형식으로 jsp로 다시 전송합니다 (텍스트도 사용할 수 있습니다. 응답 내용을 텍스트로 변경하고 javascript 함수에서 데이터를 렌더링하면됩니다).</target>
        </trans-unit>
        <trans-unit id="826f726c00ea26b16c7091f335fee7e5d8de8abb" translate="yes" xml:space="preserve">
          <source>Since it's pretty a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/AJAX/Getting_Started&quot;&gt;tedious&lt;/a&gt; work to make it to work across all browsers (especially Internet Explorer versus others), there are plenty of JavaScript libraries out which simplifies this in single functions and covers as many as possible browser-specific bugs/quirks under the hoods, such as &lt;a href=&quot;http://jquery.com&quot;&gt;jQuery&lt;/a&gt;, &lt;a href=&quot;http://www.prototypejs.org/&quot;&gt;Prototype&lt;/a&gt;, &lt;a href=&quot;http://mootools.net/&quot;&gt;Mootools&lt;/a&gt;. Since jQuery is most popular these days, I'll use it in the below examples.</source>
          <target state="translated">모든 브라우저 (특히 Internet Explorer와 다른 브라우저)에서 작동하도록하는 것은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/AJAX/Getting_Started&quot;&gt;지루한&lt;/a&gt; 작업이므로 단일 기능으로이를 단순화하고 가능한 많은 브라우저 관련 버그 / 질문을 다루는 JavaScript 라이브러리가 많이 있습니다. &lt;a href=&quot;http://jquery.com&quot;&gt;jQuery&lt;/a&gt; , &lt;a href=&quot;http://www.prototypejs.org/&quot;&gt;Prototype&lt;/a&gt; , &lt;a href=&quot;http://mootools.net/&quot;&gt;Mootools&lt;/a&gt; 와 같은 요즘 jQuery가 가장 많이 사용되므로 아래 예제에서 사용하겠습니다.</target>
        </trans-unit>
        <trans-unit id="82ec09f975dd38e549357b84053114b13839f782" translate="yes" xml:space="preserve">
          <source>That code is typically javascript that is embedded in or linked from the HTML page, hence the AJAX suggestion.  (In fact, if we assume that the updated text comes from the server via an HTTP request, this is classic AJAX.)</source>
          <target state="translated">이 코드는 일반적으로 HTML 페이지에 포함되거나 링크 된 자바 스크립트이므로 AJAX 제안입니다. (실제로, 업데이트 된 텍스트가 HTTP 요청을 통해 서버에서 온 것으로 가정하면 이것이 전형적인 AJAX입니다.)</target>
        </trans-unit>
        <trans-unit id="c28f33370f7556ae09d69388971724ff1b8b65c1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://malsup.com/jquery/form/&quot;&gt;jQuery Form plugin&lt;/a&gt; does less or more the same as above jQuery example, but it has additional transparent support for &lt;code&gt;multipart/form-data&lt;/code&gt; forms as required by file uploads.</source>
          <target state="translated">&lt;a href=&quot;http://malsup.com/jquery/form/&quot;&gt;jQuery 양식 플러그인&lt;/a&gt; 은 위의 jQuery 예제와 거의 동일하지만 파일 업로드에 필요한 &lt;code&gt;multipart/form-data&lt;/code&gt; 양식을 추가로 투명하게 지원합니다.</target>
        </trans-unit>
        <trans-unit id="13111950dc911470d158617cc00323a3fb10b09b" translate="yes" xml:space="preserve">
          <source>The JS code:</source>
          <target state="translated">JS 코드 :</target>
        </trans-unit>
        <trans-unit id="60f85f5144e41851339584a99a25400fd02624ab" translate="yes" xml:space="preserve">
          <source>The JSP code (note: if you put the &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; in a &lt;code&gt;&amp;lt;jsp:include&amp;gt;&lt;/code&gt;, it may be reusable elsewhere in a non-ajax response):</source>
          <target state="translated">JSP 코드 (참고 : &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; 을 &lt;code&gt;&amp;lt;jsp:include&amp;gt;&lt;/code&gt; 에 넣으면 비 축적 응답의 다른 곳에서 재사용 할 수 있습니다) :</target>
        </trans-unit>
        <trans-unit id="82bcb8bc50271a9fe41b3d0c7f74b3983ec746ae" translate="yes" xml:space="preserve">
          <source>The right way to update the page currently displayed in the user's browser (without reloading it) is to have some code executing in the browser update the page's DOM.</source>
          <target state="translated">다시로드하지 않고 사용자 브라우저에 현재 표시된 페이지를 업데이트하는 올바른 방법은 브라우저에서 일부 코드를 실행하여 페이지의 DOM을 업데이트하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="81f36ba7704aff0b7ff66243392e07ee62fa4339" translate="yes" xml:space="preserve">
          <source>The same &lt;code&gt;doPost()&lt;/code&gt; method as shown here above can be reused. Do note that above syntax also works with &lt;code&gt;$.get()&lt;/code&gt; in jQuery and &lt;code&gt;doGet()&lt;/code&gt; in servlet.</source>
          <target state="translated">여기에 표시된 것과 동일한 &lt;code&gt;doPost()&lt;/code&gt; 메소드를 재사용 할 수 있습니다. 위의 구문은 jQuery의 &lt;code&gt;$.get()&lt;/code&gt; 및 서블릿의 &lt;code&gt;doGet()&lt;/code&gt; 에서도 작동합니다.</target>
        </trans-unit>
        <trans-unit id="ec4192092629e132db0176d50836c910fcf6d4f8" translate="yes" xml:space="preserve">
          <source>Then, in order to process the JSON object in the servlet which isn't being sent as individual request parameters but as a whole JSON string the above way, you only need to manually parse the request body using a JSON tool instead of using &lt;code&gt;getParameter()&lt;/code&gt; the usual way. Namely, servlets don't support &lt;code&gt;application/json&lt;/code&gt; formatted requests, but only &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; or &lt;code&gt;multipart/form-data&lt;/code&gt; formatted requests. Gson also supports parsing a JSON string into a JSON object.</source>
          <target state="translated">그런 다음 개별 요청 매개 변수로 전송되지 않고 위의 전체 JSON 문자열로 전송되는 서블릿에서 JSON 객체를 처리하려면 &lt;code&gt;getParameter()&lt;/code&gt; 를 사용하는 대신 JSON 도구를 사용하여 요청 본문 만 수동으로 구문 분석하면됩니다. ) 일반적인 방법. 즉, 서블릿은 &lt;code&gt;application/json&lt;/code&gt; 형식의 요청을 지원하지 않지만 &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; 또는 &lt;code&gt;multipart/form-data&lt;/code&gt; 형식의 요청 만 지원합니다. Gson은 또한 JSON 문자열을 JSON 객체로 구문 분석하는 것을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="89fd0d601f377a83a71d1cdde17c69e5d81a1961" translate="yes" xml:space="preserve">
          <source>Using bootstrap multi select</source>
          <target state="translated">부트 스트랩 멀티 선택 사용</target>
        </trans-unit>
        <trans-unit id="2a9a8c670858d784d66a1602187d7c2c90e1a17b" translate="yes" xml:space="preserve">
          <source>Whenever I print something inside the servlet and call it by the webbrowser, it returns a new page containing that text. Is there a way to print the text in the current page using Ajax?</source>
          <target state="translated">서블릿 내부에 무언가를 인쇄하고 웹 브라우저에서 호출 할 때마다 해당 텍스트가 포함 된 새 페이지가 반환됩니다. Ajax를 사용하여 현재 페이지의 텍스트를 인쇄하는 방법이 있습니까?</target>
        </trans-unit>
        <trans-unit id="b2688f5607d6b932d92c51a110809c5f7b5681ba" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;http://www.hunlock.com/blogs/Mastering_JSON_%28_JavaScript_Object_Notation_%29&quot;&gt;JSON&lt;/a&gt; instead of plaintext as response format you can even get some steps further. It allows for more dynamics. First, you'd like to have a tool to convert between Java objects and JSON strings. There are plenty of them as well (see the bottom of &lt;a href=&quot;http://json.org/&quot;&gt;this page&lt;/a&gt; for an overview). My personal favourite is &lt;a href=&quot;http://code.google.com/p/google-gson/&quot;&gt;Google Gson&lt;/a&gt;. Download and put its JAR file in &lt;code&gt;/WEB-INF/lib&lt;/code&gt; folder of your webapplication.</source>
          <target state="translated">응답 형식으로 일반 텍스트 대신 &lt;a href=&quot;http://www.hunlock.com/blogs/Mastering_JSON_%28_JavaScript_Object_Notation_%29&quot;&gt;JSON을&lt;/a&gt; 사용하면 몇 가지 단계를 더 진행할 수도 있습니다. 더 많은 역 동성을 허용합니다. 먼저 Java 객체와 JSON 문자열 사이를 변환하는 도구가 필요합니다. 그것들도 많이 있습니다 (개요는 &lt;a href=&quot;http://json.org/&quot;&gt;이 페이지&lt;/a&gt; 의 하단을 참조하십시오). 내가 가장 좋아하는 것은 &lt;a href=&quot;http://code.google.com/p/google-gson/&quot;&gt;Google Gson&lt;/a&gt; 입니다. JAR 파일을 다운로드하여 웹 애플리케이션의 &lt;code&gt;/WEB-INF/lib&lt;/code&gt; 폴더에 저장하십시오.</target>
        </trans-unit>
        <trans-unit id="d09487967ad994c6f9ec09684e86a745ebd6f9e7" translate="yes" xml:space="preserve">
          <source>You can in the servlet distinguish between normal requests and ajax requests as below:</source>
          <target state="translated">서블릿에서 다음과 같이 일반 요청과 ajax 요청을 구별 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6488cbad5e8c23f7a9f7b7b89ab6dd45d6c58009" translate="yes" xml:space="preserve">
          <source>You can progressively enhance it with ajax as below:</source>
          <target state="translated">아래와 같이 ajax로 점진적으로 향상시킬 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b976f30c066f9d428daf94d5a76c8335226ccf0a" translate="yes" xml:space="preserve">
          <source>You can use jQuery &lt;a href=&quot;https://api.jquery.com/serialize/&quot;&gt;&lt;code&gt;$.serialize()&lt;/code&gt;&lt;/a&gt; to easily ajaxify existing POST forms without fiddling around with collecting and passing the individual form input parameters. Assuming an existing form which works perfectly fine without JavaScript/jQuery (and thus degrades gracefully when enduser has JavaScript disabled):</source>
          <target state="translated">jQuery &lt;a href=&quot;https://api.jquery.com/serialize/&quot;&gt; &lt;code&gt;$.serialize()&lt;/code&gt; &lt;/a&gt; 를 사용하면 개별 양식 입력 매개 변수를 수집하고 전달하지 않고도 기존 POST 양식을 쉽게 조정할 수 있습니다. JavaScript / jQuery없이 완벽하게 작동하는 기존 양식을 가정하여 최종 사용자가 JavaScript를 비활성화하면 정상적으로 저하됩니다.</target>
        </trans-unit>
        <trans-unit id="ca21397eada293cac22191e78e91633a316e1244" translate="yes" xml:space="preserve">
          <source>You'll by now probably realize why XML is so much more powerful than JSON for the particular purpose of updating a HTML document using Ajax. JSON is funny, but after all generally only useful for so-called &quot;public web services&quot;. MVC frameworks like &lt;a href=&quot;https://stackoverflow.com/tags/jsf/info&quot;&gt;JSF&lt;/a&gt; use XML under the covers for their ajax magic.</source>
          <target state="translated">이제 Ajax를 사용하여 HTML 문서를 업데이트 할 목적으로 XML이 JSON보다 훨씬 강력한 이유를 알게 될 것입니다. JSON은 재미 있지만 결국 &quot;공개 웹 서비스&quot;에만 유용합니다. &lt;a href=&quot;https://stackoverflow.com/tags/jsf/info&quot;&gt;JSF&lt;/a&gt; 와 같은 MVC 프레임 워크는 아약스 마법을 위해 XML을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="8fcd25a39d2037183044a8897e9a5333d727fded" translate="yes" xml:space="preserve">
          <source>with</source>
          <target state="translated">with</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
