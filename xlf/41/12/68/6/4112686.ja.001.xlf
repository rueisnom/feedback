<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/4112686">
    <body>
      <group id="4112686">
        <trans-unit id="2058f92b0de7e12c6782c1a4eda7cfebe29256ec" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Ajax&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Ajax&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fc151f7bb9f6c75ba5aa00ebfc79caba10f9a670" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Here is ajax Sample&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;これがajaxサンプルです&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e9b04aae0fcb1123c59e5b55206bb9fdae6f5829" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;In Servlet&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;サーブレット内&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="983c95a5ee8d4366708a42d41fe5cd2558bc337e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;LoginServlet Servlet Code :-&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;LoginServletサーブレットコード：-&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6a5fb6e5fc13a01937ae02611fcad859574413d2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;index.html&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;index.html&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="402400b00b019f3b35fb23e3a52105143431569d" translate="yes" xml:space="preserve">
          <source>Access Java / Servlet / JSP / JSTL / EL variables in JavaScript</source>
          <target state="translated">JavaScriptでJavaサーブレットJSP JSTL EL変数にアクセスする</target>
        </trans-unit>
        <trans-unit id="c70e9a2dda5670ffe54888a0054ca4d0bdb6f986" translate="yes" xml:space="preserve">
          <source>Ajax (also AJAX) an acronym for Asynchronous JavaScript and XML) is a group of interrelated web development techniques used on the client-side to create asynchronous web applications. With Ajax, web applications can send data to, and retrieve data from, a server asynchronously 
Below is example code:</source>
          <target state="translated">Ajax (Asynchronous JavaScriptとXMLの頭文字をとってAJAXとも呼ばれる)は、クライアント側で非同期のWebアプリケーションを作成するために使用される、相互に関連したWeb開発技術のグループです。Ajaxを使うと、ウェブアプリケーションは非同期にサーバにデータを送信したり、サーバからデータを取得したりすることができます。 以下はコード例です。</target>
        </trans-unit>
        <trans-unit id="2fad0a651e220aefadec27dc104de3e10b23be80" translate="yes" xml:space="preserve">
          <source>Ajaxifying an existing form</source>
          <target state="translated">既存のフォームを Ajax 化する</target>
        </trans-unit>
        <trans-unit id="113ae3d09a0c918d7c1bcb8f7f05166e16fe886e" translate="yes" xml:space="preserve">
          <source>And the JSP:</source>
          <target state="translated">そしてJSP。</target>
        </trans-unit>
        <trans-unit id="0c1a194459d4f382c580c25f68a3dead23f08e70" translate="yes" xml:space="preserve">
          <source>Call Servlet and invoke Java code from JavaScript along with parameters</source>
          <target state="translated">サーブレットを呼び出し、JavaScriptからJavaコードをパラメータとともに呼び出す</target>
        </trans-unit>
        <trans-unit id="1be07164444118687e39c18c9d8a253ec4bd137a" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;/some.jsp&lt;/code&gt; like below (note: the code doesn't expect the JSP file being placed in a subfolder, if you do so, alter servlet URL accordingly):</source>
          <target state="translated">以下のような &lt;code&gt;/some.jsp&lt;/code&gt; を作成します（注：コードは、JSPファイルがサブフォルダーに配置されることを想定していません。そうする場合は、サーブレットのURLを適宜変更してください）。</target>
        </trans-unit>
        <trans-unit id="218c81d29238c44d6989d05c6a863c654a6b371d" translate="yes" xml:space="preserve">
          <source>Create a servlet with a &lt;code&gt;doGet()&lt;/code&gt; method which look like this:</source>
          <target state="translated">次のような &lt;code&gt;doGet()&lt;/code&gt; メソッドを使用してサーブレットを作成します。</target>
        </trans-unit>
        <trans-unit id="74fa38aab4bf8664c9779452f07c09fe8194e1af" translate="yes" xml:space="preserve">
          <source>Do note that a lot of starters mix &lt;code&gt;contentType&lt;/code&gt; with &lt;code&gt;dataType&lt;/code&gt;. The &lt;code&gt;contentType&lt;/code&gt; represents the type of the &lt;strong&gt;request&lt;/strong&gt; body. The &lt;code&gt;dataType&lt;/code&gt; represents the (expected) type of the &lt;strong&gt;response&lt;/strong&gt; body, which is usually unnecessary as jQuery already autodetects it based on response's &lt;code&gt;Content-Type&lt;/code&gt; header.</source>
          <target state="translated">多くのスターターが &lt;code&gt;contentType&lt;/code&gt; と &lt;code&gt;dataType&lt;/code&gt; を混合していることに注意してください。 &lt;code&gt;contentType&lt;/code&gt; は、 &lt;strong&gt;リクエストの&lt;/strong&gt;本文のタイプを表します 。 &lt;code&gt;dataType&lt;/code&gt; は、 &lt;strong&gt;応答&lt;/strong&gt;本文の（予期される）タイプを表します。jQueryはすでに応答の &lt;code&gt;Content-Type&lt;/code&gt; ヘッダーに基づいてそれを自動検出しているため、通常は不要です。</target>
        </trans-unit>
        <trans-unit id="e7ca8fc2fbc7580c6e74e346b13bf93f92eaf53b" translate="yes" xml:space="preserve">
          <source>Do note that jQuery automatically parses the response as JSON and gives you directly a JSON object (&lt;code&gt;responseJson&lt;/code&gt;) as function argument when you set the response content type to &lt;code&gt;application/json&lt;/code&gt;. If you forget to set it or rely on a default of &lt;code&gt;text/plain&lt;/code&gt; or &lt;code&gt;text/html&lt;/code&gt;, then the &lt;code&gt;responseJson&lt;/code&gt; argument wouldn't give you a JSON object, but a plain vanilla string and you'd need to manually fiddle around with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse&quot;&gt;&lt;code&gt;JSON.parse()&lt;/code&gt;&lt;/a&gt; afterwards, which is thus totally unnecessary if you set the content type right in first place.</source>
          <target state="translated">応答のコンテンツタイプを &lt;code&gt;application/json&lt;/code&gt; に設定すると、jQueryが応答をJSONとして自動的に解析し、JSONオブジェクト（ &lt;code&gt;responseJson&lt;/code&gt; ）を関数の引数として直接提供することに注意してください。 設定を忘れたり、デフォルトの &lt;code&gt;text/plain&lt;/code&gt; または &lt;code&gt;text/html&lt;/code&gt; に依存したりする場合、 &lt;code&gt;responseJson&lt;/code&gt; 引数はJSONオブジェクトを提供しませんが、プレーンなバニラ文字列を提供するため、手動で&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse&quot;&gt; &lt;code&gt;JSON.parse()&lt;/code&gt; &lt;/a&gt;いじる必要があります。あとでparse（）を実行します。これは、最初にコンテンツタイプを設定した場合はまったく不要です。</target>
        </trans-unit>
        <trans-unit id="7716e53e6264d789d93f62b54b389ddc31f8c9d3" translate="yes" xml:space="preserve">
          <source>Do note that this all is more clumsy than just using &lt;code&gt;$.param()&lt;/code&gt;. Normally, you want to use &lt;code&gt;JSON.stringify()&lt;/code&gt; only if the target service is e.g. a JAX-RS (RESTful) service which is for some reason only capable of consuming JSON strings and not regular request parameters.</source>
          <target state="translated">これはすべて &lt;code&gt;$.param()&lt;/code&gt; を使用するよりも扱いにくいことに注意してください。 通常、 &lt;code&gt;JSON.stringify()&lt;/code&gt; を使用するのは、ターゲットサービスが、何らかの理由で通常のリクエストパラメータではなくJSON文字列のみを消費できるJAX-RS（RESTful）サービスである場合のみです。</target>
        </trans-unit>
        <trans-unit id="076a5bb453b0c056da4abb1b6bd46e404396643a" translate="yes" xml:space="preserve">
          <source>Here's an example which displays &lt;code&gt;List&amp;lt;Product&amp;gt;&lt;/code&gt; in a &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; where the &lt;code&gt;Product&lt;/code&gt; class has the properties &lt;code&gt;Long id&lt;/code&gt;, &lt;code&gt;String name&lt;/code&gt; and &lt;code&gt;BigDecimal price&lt;/code&gt;. The servlet:</source>
          <target state="translated">以下は、 &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; に &lt;code&gt;List&amp;lt;Product&amp;gt;&lt;/code&gt; を表示する例です &lt;code&gt;Product&lt;/code&gt; クラスには、 &lt;code&gt;Long id&lt;/code&gt; 、 &lt;code&gt;String name&lt;/code&gt; 、 &lt;code&gt;BigDecimal price&lt;/code&gt; のプロパティがあります。 サーブレット：</target>
        </trans-unit>
        <trans-unit id="76606af17829a9c914ce8f7ffdba8e558646d376" translate="yes" xml:space="preserve">
          <source>Here's an example which displays &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; as &lt;code&gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;&lt;/code&gt;. The servlet:</source>
          <target state="translated">&lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; を &lt;code&gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;&lt;/code&gt; として表示する例を次に示します。 サーブレット：</target>
        </trans-unit>
        <trans-unit id="1fedc26505ef0a45590a9011066063c7e892fe65" translate="yes" xml:space="preserve">
          <source>Here's an example which does effectively the same as previous example, but then with XML instead of JSON. When using JSP as XML output generator you'll see that it's less tedious to code the table and all. JSTL is this way much more helpful as you can actually use it to iterate over the results and perform server side data formatting. The servlet:</source>
          <target state="translated">前の例と実質的には同じですが、JSONの代わりにXMLを使用した例を紹介します。JSP を XML 出力ジェネレータとして使用すると、テーブルなどのコードを書くのが面倒ではないことがわかるでしょう。JSTL は、結果の反復処理やサーバサイドのデータフォーマットを行うために実際に使うことができるので、この方法の方がはるかに便利です。サーブレットです。</target>
        </trans-unit>
        <trans-unit id="19358dfb5297679ce0acc76090ad0fed08d881b2" translate="yes" xml:space="preserve">
          <source>Here's another example which displays &lt;code&gt;Map&amp;lt;String, String&amp;gt;&lt;/code&gt; as &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;Map&amp;lt;String, String&amp;gt;&lt;/code&gt; を &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; として表示する別の例を次に示します。</target>
        </trans-unit>
        <trans-unit id="8b0e1d9c633234ea0495dd581b0582c7449952fa" translate="yes" xml:space="preserve">
          <source>Here, we are going to create the simple example to create the login form using servlet.</source>
          <target state="translated">ここでは、サーブレットを使ってログインフォームを作成する簡単な例を作成していきます。</target>
        </trans-unit>
        <trans-unit id="6b5e95c3c081372fa9b03d1ed20f55fe66a66b84" translate="yes" xml:space="preserve">
          <source>How to switch easily between ajax-based website and basic HTML website?</source>
          <target state="translated">ajaxベースのWebサイトと基本的なHTMLサイトを簡単に切り替えるには?</target>
        </trans-unit>
        <trans-unit id="70cbe90eaa16a4700707cad552786a51fb645ab2" translate="yes" xml:space="preserve">
          <source>How to upload files to server using JSP/Servlet and Ajax?</source>
          <target state="translated">JSPServletとAjaxを使ってサーバーにファイルをアップロードする方法は?</target>
        </trans-unit>
        <trans-unit id="940f0507c952fdbc369b877849a17245348e5801" translate="yes" xml:space="preserve">
          <source>How to use Servlets and Ajax</source>
          <target state="translated">サーブレットとAjaxの使い方</target>
        </trans-unit>
        <trans-unit id="72b18b38822f945c39d076ebbaf2df215a2f0ced" translate="yes" xml:space="preserve">
          <source>I will show you a whole example of servlet &amp;amp; how do ajax call.</source>
          <target state="translated">サーブレットの例とajax呼び出しの方法を紹介します。</target>
        </trans-unit>
        <trans-unit id="742dbe1ab1d99c7c39225c1cb57c44b7fe21aa08" translate="yes" xml:space="preserve">
          <source>I'm very new to web apps and Servlets and I have the following question:</source>
          <target state="translated">私はWebアプリやServletについて非常に初心者で、次のような質問をしています。</target>
        </trans-unit>
        <trans-unit id="b7040a94ad17c3b5189f80147817e1670383c612" translate="yes" xml:space="preserve">
          <source>If you don't have a form at all, but just wanted to interact with the servlet &quot;in the background&quot; whereby you'd like to POST some data, then you can use jQuery &lt;a href=&quot;http://api.jquery.com/jquery.param/&quot;&gt;&lt;code&gt;$.param()&lt;/code&gt;&lt;/a&gt; to easily convert a JSON object to an URL-encoded query string.</source>
          <target state="translated">フォームがまったくなく、サーブレットを「バックグラウンドで」操作して、データをPOSTしたい場合は、jQuery &lt;a href=&quot;http://api.jquery.com/jquery.param/&quot;&gt; &lt;code&gt;$.param()&lt;/code&gt; &lt;/a&gt;を使用してJSONオブジェクトを簡単に変換できます。 URLエンコードされたクエリ文字列に。</target>
        </trans-unit>
        <trans-unit id="b4579b1eac22795f9aa92a821890b3fe553d42f7" translate="yes" xml:space="preserve">
          <source>If you however intend to send the JSON object as a whole instead of as individual request parameters for some reason, then you'd need to serialize it to a string using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify&quot;&gt;&lt;code&gt;JSON.stringify()&lt;/code&gt;&lt;/a&gt; (not part of jQuery) and instruct jQuery to set request content type to &lt;code&gt;application/json&lt;/code&gt; instead of (default) &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;. This can't be done via &lt;code&gt;$.post()&lt;/code&gt; convenience function, but needs to be done via &lt;code&gt;$.ajax()&lt;/code&gt; as below.</source>
          <target state="translated">ただし、何らかの理由で個別のリクエストパラメータとしてではなく、JSONオブジェクト全体を送信する場合は、 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify&quot;&gt; &lt;code&gt;JSON.stringify()&lt;/code&gt; &lt;/a&gt; （jQueryの一部ではない）を使用して文字列にシリアル化し、jQueryに設定するように指示する必要があります。コンテンツタイプを（デフォルト） &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; ではなく &lt;code&gt;application/json&lt;/code&gt; に要求します 。 これは &lt;code&gt;$.post()&lt;/code&gt; コンビニエンス関数では実行できませんが、以下のように &lt;code&gt;$.ajax()&lt;/code&gt; 実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="3486e9159c31f3a00b22d150b18bfbf25ccec1d3" translate="yes" xml:space="preserve">
          <source>Important to realize and understand is that any &lt;code&gt;sendRedirect()&lt;/code&gt; and &lt;code&gt;forward()&lt;/code&gt; call by the servlet on an ajax request would only forward or redirect &lt;em&gt;the ajax request itself&lt;/em&gt; and not the main document/window where the ajax request originated. JavaScript/jQuery would in such case only retrieve the redirected/forwarded response as &lt;code&gt;responseText&lt;/code&gt; variable in the callback function. If it represents a whole HTML page and not an ajax-specific XML or JSON response, then all you could do is to replace the current document with it.</source>
          <target state="translated">理解して理解することが重要なのは、サーブレットによるajaxリクエストでの &lt;code&gt;sendRedirect()&lt;/code&gt; および &lt;code&gt;forward()&lt;/code&gt; 呼び出し&lt;em&gt;は、ajaxリクエスト自体&lt;/em&gt;を転送またはリダイレクトするだけであり、ajaxリクエストが発生したメインのドキュメント/ウィンドウではないということです。 このような場合、JavaScript / jQueryは、リダイレクト/転送された &lt;code&gt;responseText&lt;/code&gt; を、コールバック関数のresponseText変数としてのみ取得します。 HTMLページ全体を表し、ajax固有のXMLまたはJSON応答ではない場合は、現在のドキュメントをそれで置き換えるだけです。</target>
        </trans-unit>
        <trans-unit id="62023385138308b68158d933935bc448896ed4bb" translate="yes" xml:space="preserve">
          <source>Indeed, the keyword is &quot;ajax&quot;: &lt;em&gt;Asynchronous JavaScript and XML&lt;/em&gt;. However, last years it's more than often &lt;em&gt;Asynchronous JavaScript and JSON&lt;/em&gt;. Basically, you let JS execute an asynchronous HTTP request and update the HTML DOM tree based on the response data.</source>
          <target state="translated">実際、キーワードは「ajax」： &lt;em&gt;非同期JavaScriptとXML&lt;/em&gt;です。 ただし、昨年は&lt;em&gt;非同期JavaScriptとJSON&lt;/em&gt;が頻繁に&lt;em&gt;使用されています&lt;/em&gt; 。 基本的に、JSに非同期HTTPリクエストを実行させ、応答データに基づいてHTML DOMツリーを更新します。</target>
        </trans-unit>
        <trans-unit id="7dcdb57f219d93549fb03015051304d8abb8679d" translate="yes" xml:space="preserve">
          <source>It is also possible to implement this kind of thing using some browser plugin or add-on, though it may be tricky for a plugin to reach into the browser's data structures to update the DOM.  (Native code plugins normally write to some graphics frame that is embedded in the page.)</source>
          <target state="translated">ブラウザのプラグインやアドオンを使ってこの種のことを実装することも可能ですが、プラグインがブラウザのデータ構造に到達して DOM を更新するのは厄介かもしれません。(ネイティブコードのプラグインは通常、ページに埋め込まれたグラフィックフレームに書き込みます)。</target>
        </trans-unit>
        <trans-unit id="fdf95eca9f8b1d2244f7b2cd723ef976ae32c350" translate="yes" xml:space="preserve">
          <source>Jsp page java script function to submit data to servlet with two variable firstName and lastName:</source>
          <target state="translated">Jspページのjavaスクリプト関数は、firstNameとlastNameの2つの変数を持つサーブレットにデータを送信します。</target>
        </trans-unit>
        <trans-unit id="b4b9557d228a01bca5554f1ab7acdcd854b66199" translate="yes" xml:space="preserve">
          <source>Kickoff example returning &lt;code&gt;String&lt;/code&gt; as plain text</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; をプレーンテキストとして返すキックオフの例</target>
        </trans-unit>
        <trans-unit id="5179696436ccb32906957d8a57c587c03f4caab2" translate="yes" xml:space="preserve">
          <source>Manually sending JSON object to servlet</source>
          <target state="translated">サーブレットに手動でJSONオブジェクトを送信する</target>
        </trans-unit>
        <trans-unit id="01e4e4e67b46ca3b3e78d00525ca2700a9c99b3a" translate="yes" xml:space="preserve">
          <source>Manually sending request parameters to servlet</source>
          <target state="translated">リクエストパラメータを手動でサーブレットに送信する</target>
        </trans-unit>
        <trans-unit id="dde61058e584e3bdf27674e7b20f4195924c8af5" translate="yes" xml:space="preserve">
          <source>Map this servlet on an URL pattern of &lt;code&gt;/someservlet&lt;/code&gt; or &lt;code&gt;/someservlet/*&lt;/code&gt; as below (obviously, the URL pattern is free to your choice, but you'd need to alter the &lt;code&gt;someservlet&lt;/code&gt; URL in JS code examples over all place accordingly):</source>
          <target state="translated">以下のように、このサーブレットを &lt;code&gt;/someservlet&lt;/code&gt; または &lt;code&gt;/someservlet/*&lt;/code&gt; の URLパターンにマップします（明らかに、URLパターンは自由に選択できますが、JSコードの例の &lt;code&gt;someservlet&lt;/code&gt; URLをすべての場所で変更する必要があります）。</target>
        </trans-unit>
        <trans-unit id="c56e5df70c3ac3a6c3973476fdf82139c44069da" translate="yes" xml:space="preserve">
          <source>Normally you cant update a page from a servlet. Client (browser) has to request an update. Eiter client loads a whole new page or it requests an update to a part of an existing page. This technique is called Ajax.</source>
          <target state="translated">通常、サーブレットからページを更新することはできません。クライアント(ブラウザ)が更新を要求しなければなりません。クライアントは新しいページ全体を読み込むか、既存のページの一部に更新を要求します。このテクニックはAjaxと呼ばれています。</target>
        </trans-unit>
        <trans-unit id="bd39a665cfc0865af33aa13bcfa362533cc6e53c" translate="yes" xml:space="preserve">
          <source>Note that this doesn't change the URL as enduser sees in browser's address bar. So there are issues with bookmarkability. Therefore, it's much better to just return an &quot;instruction&quot; for JavaScript/jQuery to perform a redirect instead of returning the whole content of the redirected page. E.g. by returning a boolean, or an URL.</source>
          <target state="translated">これでは、エンドユーザーがブラウザのアドレスバーで見ているようなURLは変更されないので注意してください。そのため、ブックマーク性に問題があります。したがって、リダイレクトされたページの内容全体を返すのではなく、JavaScriptjQueryがリダイレクトを実行するための &quot;命令 &quot;を返すだけの方がはるかに良いです。例えば、ブール値やURLを返すことで。</target>
        </trans-unit>
        <trans-unit id="22feb91f5c22ed94258e3f081aa26bfc5c037905" translate="yes" xml:space="preserve">
          <source>Now open the &lt;a href=&quot;http://localhost:8080/context/test.jsp&quot;&gt;http://localhost:8080/context/test.jsp&lt;/a&gt; in the browser and press the button. You'll see that the content of the div get updated with the servlet response.</source>
          <target state="translated">ブラウザで&lt;a href=&quot;http://localhost:8080/context/test.jsp&quot;&gt;http：// localhost：8080 / context / test.jsp&lt;/a&gt;を開き、ボタンを押します。 divのコンテンツがサーブレットの応答で更新されることがわかります。</target>
        </trans-unit>
        <trans-unit id="cfd2f0fb386862ba0d1aa2adf79265c37a9d89c7" translate="yes" xml:space="preserve">
          <source>Or, when you're not on a Servlet 3.0 compatible container yet (Tomcat 7, Glassfish 3, JBoss AS 6, etc or newer), then map it in &lt;code&gt;web.xml&lt;/code&gt; the old fashioned way (see also &lt;a href=&quot;https://stackoverflow.com/tags/servlets/info&quot;&gt;our Servlets wiki page&lt;/a&gt;):</source>
          <target state="translated">または、サーブレット3.0互換のコンテナ（Tomcat 7、Glassfish 3、JBoss AS 6など）をまだ使用していない場合は、 &lt;code&gt;web.xml&lt;/code&gt; で古い方法でマッピングし&lt;a href=&quot;https://stackoverflow.com/tags/servlets/info&quot;&gt;ます（サーブレットのWikiページ&lt;/a&gt;も参照してください ）。</target>
        </trans-unit>
        <trans-unit id="26171874502aeafcb87d300f5bedd28651eb82f6" translate="yes" xml:space="preserve">
          <source>Returning &lt;code&gt;List&amp;lt;Entity&amp;gt;&lt;/code&gt; as JSON</source>
          <target state="translated">&lt;code&gt;List&amp;lt;Entity&amp;gt;&lt;/code&gt; をJSONとして返す</target>
        </trans-unit>
        <trans-unit id="5f03764f3bd2c86ee26d6b433ce4069420e16f5b" translate="yes" xml:space="preserve">
          <source>Returning &lt;code&gt;List&amp;lt;Entity&amp;gt;&lt;/code&gt; as XML</source>
          <target state="translated">&lt;code&gt;List&amp;lt;Entity&amp;gt;&lt;/code&gt; をXMLとして返す</target>
        </trans-unit>
        <trans-unit id="3688b821c329699e6f9a80ff22369c56a5beac00" translate="yes" xml:space="preserve">
          <source>Returning &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; as JSON</source>
          <target state="translated">JSONとして &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; を返す</target>
        </trans-unit>
        <trans-unit id="679fcf8af507bcac5a23e4ab406f76e65e4b3b8d" translate="yes" xml:space="preserve">
          <source>Returning &lt;code&gt;Map&amp;lt;String, String&amp;gt;&lt;/code&gt; as JSON</source>
          <target state="translated">JSONとして &lt;code&gt;Map&amp;lt;String, String&amp;gt;&lt;/code&gt; を返す</target>
        </trans-unit>
        <trans-unit id="371a87eafb4de078ff674d69a5a89c186532eb49" translate="yes" xml:space="preserve">
          <source>See also:</source>
          <target state="translated">も参照してください。</target>
        </trans-unit>
        <trans-unit id="1a93f0fc4e88ee9727bc2cea774ad68b33c0e53b" translate="yes" xml:space="preserve">
          <source>Sending a redirect from servlet</source>
          <target state="translated">サーブレットからのリダイレクトの送信</target>
        </trans-unit>
        <trans-unit id="acb0ba47f04915e496a795c1972528f72461d66f" translate="yes" xml:space="preserve">
          <source>Servlet to read data send back to jsp in xml format ( You could use text as well. Just you need to change response content to text and render data on javascript function.)</source>
          <target state="translated">データを読み込んで、xml形式でjspに送り返すサーブレット (テキストも使えます。レスポンスの内容をテキストに変更して、javascriptの関数でデータをレンダリングする必要があるだけです)</target>
        </trans-unit>
        <trans-unit id="826f726c00ea26b16c7091f335fee7e5d8de8abb" translate="yes" xml:space="preserve">
          <source>Since it's pretty a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/AJAX/Getting_Started&quot;&gt;tedious&lt;/a&gt; work to make it to work across all browsers (especially Internet Explorer versus others), there are plenty of JavaScript libraries out which simplifies this in single functions and covers as many as possible browser-specific bugs/quirks under the hoods, such as &lt;a href=&quot;http://jquery.com&quot;&gt;jQuery&lt;/a&gt;, &lt;a href=&quot;http://www.prototypejs.org/&quot;&gt;Prototype&lt;/a&gt;, &lt;a href=&quot;http://mootools.net/&quot;&gt;Mootools&lt;/a&gt;. Since jQuery is most popular these days, I'll use it in the below examples.</source>
          <target state="translated">すべてのブラウザー（特にInternet Explorerと他のブラウザー）で動作させるのはかなり&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/AJAX/Getting_Started&quot;&gt;退屈な&lt;/a&gt;作業であるため、単一の関数でこれを簡素化し、可能な限りブラウザー固有のバグ/問題をカバーするJavaScriptライブラリがたくさんあります。 、 &lt;a href=&quot;http://jquery.com&quot;&gt;jQuery&lt;/a&gt; 、 &lt;a href=&quot;http://www.prototypejs.org/&quot;&gt;Prototype&lt;/a&gt; 、 &lt;a href=&quot;http://mootools.net/&quot;&gt;Mootoolsなど&lt;/a&gt; 。 最近、jQueryが最も普及しているため、以下の例で使用します。</target>
        </trans-unit>
        <trans-unit id="82ec09f975dd38e549357b84053114b13839f782" translate="yes" xml:space="preserve">
          <source>That code is typically javascript that is embedded in or linked from the HTML page, hence the AJAX suggestion.  (In fact, if we assume that the updated text comes from the server via an HTTP request, this is classic AJAX.)</source>
          <target state="translated">このコードは典型的にはHTMLページに埋め込まれるかリンクされるjavascriptです。(実際、更新されたテキストがHTTPリクエストを経由してサーバーから来ると仮定すると、これは古典的なAJAXです)。</target>
        </trans-unit>
        <trans-unit id="c28f33370f7556ae09d69388971724ff1b8b65c1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://malsup.com/jquery/form/&quot;&gt;jQuery Form plugin&lt;/a&gt; does less or more the same as above jQuery example, but it has additional transparent support for &lt;code&gt;multipart/form-data&lt;/code&gt; forms as required by file uploads.</source>
          <target state="translated">&lt;a href=&quot;http://malsup.com/jquery/form/&quot;&gt;jQuery Formプラグイン&lt;/a&gt;は、上記のjQueryの例とほぼ同じように機能しますが、ファイルのアップロードに必要な &lt;code&gt;multipart/form-data&lt;/code&gt; フォームの追加の透過サポートを備えています。</target>
        </trans-unit>
        <trans-unit id="13111950dc911470d158617cc00323a3fb10b09b" translate="yes" xml:space="preserve">
          <source>The JS code:</source>
          <target state="translated">JSのコードです。</target>
        </trans-unit>
        <trans-unit id="60f85f5144e41851339584a99a25400fd02624ab" translate="yes" xml:space="preserve">
          <source>The JSP code (note: if you put the &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; in a &lt;code&gt;&amp;lt;jsp:include&amp;gt;&lt;/code&gt;, it may be reusable elsewhere in a non-ajax response):</source>
          <target state="translated">JSPコード（注： &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; を &lt;code&gt;&amp;lt;jsp:include&amp;gt;&lt;/code&gt; に入れると、非Ajax応答のどこかで再利用できる可能性があります）：</target>
        </trans-unit>
        <trans-unit id="82bcb8bc50271a9fe41b3d0c7f74b3983ec746ae" translate="yes" xml:space="preserve">
          <source>The right way to update the page currently displayed in the user's browser (without reloading it) is to have some code executing in the browser update the page's DOM.</source>
          <target state="translated">ユーザーのブラウザに現在表示されているページを(リロードせずに)更新する正しい方法は、ブラウザ内で実行されているいくつかのコードにページの DOM を更新させることです。</target>
        </trans-unit>
        <trans-unit id="81f36ba7704aff0b7ff66243392e07ee62fa4339" translate="yes" xml:space="preserve">
          <source>The same &lt;code&gt;doPost()&lt;/code&gt; method as shown here above can be reused. Do note that above syntax also works with &lt;code&gt;$.get()&lt;/code&gt; in jQuery and &lt;code&gt;doGet()&lt;/code&gt; in servlet.</source>
          <target state="translated">上記の同じ &lt;code&gt;doPost()&lt;/code&gt; メソッドを再利用できます。 上記の構文は、jQueryの &lt;code&gt;$.get()&lt;/code&gt; およびサーブレットの &lt;code&gt;doGet()&lt;/code&gt; でも機能することに注意してください。</target>
        </trans-unit>
        <trans-unit id="ec4192092629e132db0176d50836c910fcf6d4f8" translate="yes" xml:space="preserve">
          <source>Then, in order to process the JSON object in the servlet which isn't being sent as individual request parameters but as a whole JSON string the above way, you only need to manually parse the request body using a JSON tool instead of using &lt;code&gt;getParameter()&lt;/code&gt; the usual way. Namely, servlets don't support &lt;code&gt;application/json&lt;/code&gt; formatted requests, but only &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; or &lt;code&gt;multipart/form-data&lt;/code&gt; formatted requests. Gson also supports parsing a JSON string into a JSON object.</source>
          <target state="translated">次に、サーブレットでJSONオブジェクトを個別のリクエストパラメータとしてではなく、上記の方法でJSON文字列全体として処理するために、 &lt;code&gt;getParameter()&lt;/code&gt; を使用する代わりに、JSONツールを使用してリクエストの本文を手動で解析するだけで済みます。 ）通常の方法。 つまり、サーブレットは &lt;code&gt;application/json&lt;/code&gt; 形式のリクエストをサポートしていませんが、 &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; または &lt;code&gt;multipart/form-data&lt;/code&gt; 形式のリクエストのみをサポートしています。 Gsonは、JSON文字列をJSONオブジェクトに解析することもサポートしています。</target>
        </trans-unit>
        <trans-unit id="89fd0d601f377a83a71d1cdde17c69e5d81a1961" translate="yes" xml:space="preserve">
          <source>Using bootstrap multi select</source>
          <target state="translated">ブートストラップのマルチセレクトを使用して</target>
        </trans-unit>
        <trans-unit id="2a9a8c670858d784d66a1602187d7c2c90e1a17b" translate="yes" xml:space="preserve">
          <source>Whenever I print something inside the servlet and call it by the webbrowser, it returns a new page containing that text. Is there a way to print the text in the current page using Ajax?</source>
          <target state="translated">サーブレット内で何かを印刷してウェブブラウザーで呼び出すと、そのテキストを含む新しいページが返ってきます。Ajaxを使って現在のページのテキストを印刷する方法はありますか?</target>
        </trans-unit>
        <trans-unit id="b2688f5607d6b932d92c51a110809c5f7b5681ba" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;http://www.hunlock.com/blogs/Mastering_JSON_%28_JavaScript_Object_Notation_%29&quot;&gt;JSON&lt;/a&gt; instead of plaintext as response format you can even get some steps further. It allows for more dynamics. First, you'd like to have a tool to convert between Java objects and JSON strings. There are plenty of them as well (see the bottom of &lt;a href=&quot;http://json.org/&quot;&gt;this page&lt;/a&gt; for an overview). My personal favourite is &lt;a href=&quot;http://code.google.com/p/google-gson/&quot;&gt;Google Gson&lt;/a&gt;. Download and put its JAR file in &lt;code&gt;/WEB-INF/lib&lt;/code&gt; folder of your webapplication.</source>
          <target state="translated">応答フォーマットとしてプレーンテキストの代わりに&lt;a href=&quot;http://www.hunlock.com/blogs/Mastering_JSON_%28_JavaScript_Object_Notation_%29&quot;&gt;JSONを&lt;/a&gt;使用すると、さらにいくつかの手順を実行できます。 それはより多くのダイナミクスを可能にします。 まず、JavaオブジェクトとJSON文字列の間で変換するツールが必要です。 それらもたくさんあります（概要については、 &lt;a href=&quot;http://json.org/&quot;&gt;このページ&lt;/a&gt;の下部を参照してください ）。 私の個人的なお気に入りは&lt;a href=&quot;http://code.google.com/p/google-gson/&quot;&gt;Google Gson&lt;/a&gt;です。 JARファイルをダウンロードして、Webアプリケーションの &lt;code&gt;/WEB-INF/lib&lt;/code&gt; フォルダーに配置します。</target>
        </trans-unit>
        <trans-unit id="d09487967ad994c6f9ec09684e86a745ebd6f9e7" translate="yes" xml:space="preserve">
          <source>You can in the servlet distinguish between normal requests and ajax requests as below:</source>
          <target state="translated">サーブレットでは、以下のように通常のリクエストとajaxリクエストを区別することができます。</target>
        </trans-unit>
        <trans-unit id="6488cbad5e8c23f7a9f7b7b89ab6dd45d6c58009" translate="yes" xml:space="preserve">
          <source>You can progressively enhance it with ajax as below:</source>
          <target state="translated">以下のように、ajaxを使って段階的に強化することができます。</target>
        </trans-unit>
        <trans-unit id="b976f30c066f9d428daf94d5a76c8335226ccf0a" translate="yes" xml:space="preserve">
          <source>You can use jQuery &lt;a href=&quot;https://api.jquery.com/serialize/&quot;&gt;&lt;code&gt;$.serialize()&lt;/code&gt;&lt;/a&gt; to easily ajaxify existing POST forms without fiddling around with collecting and passing the individual form input parameters. Assuming an existing form which works perfectly fine without JavaScript/jQuery (and thus degrades gracefully when enduser has JavaScript disabled):</source>
          <target state="translated">jQuery &lt;a href=&quot;https://api.jquery.com/serialize/&quot;&gt; &lt;code&gt;$.serialize()&lt;/code&gt; &lt;/a&gt;を使用すると、個々のフォーム入力パラメーターを収集して渡すことなく、既存のPOSTフォームを簡単にajax化できます。 JavaScript / jQueryがなくても完全に正常に機能する既存のフォーム（したがって、エンドユーザーがJavaScriptを無効にしていると、正常に機能しなくなる）を想定しています。</target>
        </trans-unit>
        <trans-unit id="ca21397eada293cac22191e78e91633a316e1244" translate="yes" xml:space="preserve">
          <source>You'll by now probably realize why XML is so much more powerful than JSON for the particular purpose of updating a HTML document using Ajax. JSON is funny, but after all generally only useful for so-called &quot;public web services&quot;. MVC frameworks like &lt;a href=&quot;https://stackoverflow.com/tags/jsf/info&quot;&gt;JSF&lt;/a&gt; use XML under the covers for their ajax magic.</source>
          <target state="translated">おそらく、Ajaxを使用してHTML文書を更新するという特定の目的のために、XMLがJSONよりもはるかに強力である理由を理解することでしょう。 JSONはおもしろいですが、結局のところ、いわゆる「パブリックWebサービス」に対してのみ一般的に役立ちます。 &lt;a href=&quot;https://stackoverflow.com/tags/jsf/info&quot;&gt;JSFの&lt;/a&gt;ようなMVCフレームワークは、そのajaxマジックのために内部でXMLを使用しています。</target>
        </trans-unit>
        <trans-unit id="8fcd25a39d2037183044a8897e9a5333d727fded" translate="yes" xml:space="preserve">
          <source>with</source>
          <target state="translated">with</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
