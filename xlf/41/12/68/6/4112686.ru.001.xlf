<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://stackoverflow.com/questions/4112686">
    <body>
      <group id="4112686">
        <trans-unit id="2058f92b0de7e12c6782c1a4eda7cfebe29256ec" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Ajax&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Ajax&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fc151f7bb9f6c75ba5aa00ebfc79caba10f9a670" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Here is ajax Sample&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Вот пример ajax&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e9b04aae0fcb1123c59e5b55206bb9fdae6f5829" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;In Servlet&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;В сервлете&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="983c95a5ee8d4366708a42d41fe5cd2558bc337e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;LoginServlet Servlet Code :-&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Код сервлета ЛогинСервлет: -&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6a5fb6e5fc13a01937ae02611fcad859574413d2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;index.html&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;index.html&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="402400b00b019f3b35fb23e3a52105143431569d" translate="yes" xml:space="preserve">
          <source>Access Java / Servlet / JSP / JSTL / EL variables in JavaScript</source>
          <target state="translated">Доступ к Java-сервлету JSP JSTL EL переменные на JavaScript</target>
        </trans-unit>
        <trans-unit id="c70e9a2dda5670ffe54888a0054ca4d0bdb6f986" translate="yes" xml:space="preserve">
          <source>Ajax (also AJAX) an acronym for Asynchronous JavaScript and XML) is a group of interrelated web development techniques used on the client-side to create asynchronous web applications. With Ajax, web applications can send data to, and retrieve data from, a server asynchronously 
Below is example code:</source>
          <target state="translated">Ajax (также AJAX)аббревиатура для Asynchronous JavaScript и XML)представляет собой группу взаимосвязанных методов веб-разработки,используемых на стороне клиента для создания асинхронных веб-приложений.С Ajax,веб-приложения могут посылать данные и получать данные от сервера асинхронно Ниже приведен пример кода:</target>
        </trans-unit>
        <trans-unit id="2fad0a651e220aefadec27dc104de3e10b23be80" translate="yes" xml:space="preserve">
          <source>Ajaxifying an existing form</source>
          <target state="translated">Аяксифицируя существующую форму</target>
        </trans-unit>
        <trans-unit id="113ae3d09a0c918d7c1bcb8f7f05166e16fe886e" translate="yes" xml:space="preserve">
          <source>And the JSP:</source>
          <target state="translated">И JSP:</target>
        </trans-unit>
        <trans-unit id="0c1a194459d4f382c580c25f68a3dead23f08e70" translate="yes" xml:space="preserve">
          <source>Call Servlet and invoke Java code from JavaScript along with parameters</source>
          <target state="translated">Вызовите сервлет и вызовите Java-код из JavaScript вместе с параметрами.</target>
        </trans-unit>
        <trans-unit id="1be07164444118687e39c18c9d8a253ec4bd137a" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;/some.jsp&lt;/code&gt; like below (note: the code doesn't expect the JSP file being placed in a subfolder, if you do so, alter servlet URL accordingly):</source>
          <target state="translated">Создайте &lt;code&gt;/some.jsp&lt;/code&gt; , как показано ниже (примечание: код не ожидает, что файл JSP будет помещен в подпапку, если вы это сделаете, измените URL сервлета соответствующим образом):</target>
        </trans-unit>
        <trans-unit id="218c81d29238c44d6989d05c6a863c654a6b371d" translate="yes" xml:space="preserve">
          <source>Create a servlet with a &lt;code&gt;doGet()&lt;/code&gt; method which look like this:</source>
          <target state="translated">Создайте сервлет с методом &lt;code&gt;doGet()&lt;/code&gt; который выглядит следующим образом:</target>
        </trans-unit>
        <trans-unit id="74fa38aab4bf8664c9779452f07c09fe8194e1af" translate="yes" xml:space="preserve">
          <source>Do note that a lot of starters mix &lt;code&gt;contentType&lt;/code&gt; with &lt;code&gt;dataType&lt;/code&gt;. The &lt;code&gt;contentType&lt;/code&gt; represents the type of the &lt;strong&gt;request&lt;/strong&gt; body. The &lt;code&gt;dataType&lt;/code&gt; represents the (expected) type of the &lt;strong&gt;response&lt;/strong&gt; body, which is usually unnecessary as jQuery already autodetects it based on response's &lt;code&gt;Content-Type&lt;/code&gt; header.</source>
          <target state="translated">Обратите внимание, что многие начинающие смешивают &lt;code&gt;contentType&lt;/code&gt; с &lt;code&gt;dataType&lt;/code&gt; . &lt;code&gt;contentType&lt;/code&gt; представляет тип тела &lt;strong&gt;запроса&lt;/strong&gt; . &lt;code&gt;dataType&lt;/code&gt; представляет (ожидаемый) тип тела &lt;strong&gt;ответа&lt;/strong&gt; , что обычно не требуется, поскольку jQuery уже автоматически определяет его на основе заголовка &lt;code&gt;Content-Type&lt;/code&gt; ответа.</target>
        </trans-unit>
        <trans-unit id="e7ca8fc2fbc7580c6e74e346b13bf93f92eaf53b" translate="yes" xml:space="preserve">
          <source>Do note that jQuery automatically parses the response as JSON and gives you directly a JSON object (&lt;code&gt;responseJson&lt;/code&gt;) as function argument when you set the response content type to &lt;code&gt;application/json&lt;/code&gt;. If you forget to set it or rely on a default of &lt;code&gt;text/plain&lt;/code&gt; or &lt;code&gt;text/html&lt;/code&gt;, then the &lt;code&gt;responseJson&lt;/code&gt; argument wouldn't give you a JSON object, but a plain vanilla string and you'd need to manually fiddle around with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse&quot;&gt;&lt;code&gt;JSON.parse()&lt;/code&gt;&lt;/a&gt; afterwards, which is thus totally unnecessary if you set the content type right in first place.</source>
          <target state="translated">Обратите внимание, что jQuery автоматически анализирует ответ как JSON и предоставляет вам непосредственно объект JSON ( &lt;code&gt;responseJson&lt;/code&gt; ) в качестве аргумента функции, когда вы устанавливаете тип содержимого ответа на &lt;code&gt;application/json&lt;/code&gt; . Если вы забудете установить его или использовать значение по умолчанию &lt;code&gt;text/plain&lt;/code&gt; или &lt;code&gt;text/html&lt;/code&gt; , то аргумент &lt;code&gt;responseJson&lt;/code&gt; даст не объект JSON, а простую ванильную строку, и вам придется вручную поиграть с &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse&quot;&gt; &lt;code&gt;JSON.parse()&lt;/code&gt; &lt;/a&gt; впоследствии, что совершенно не нужно, если вы устанавливаете тип контента прямо на первом месте.</target>
        </trans-unit>
        <trans-unit id="7716e53e6264d789d93f62b54b389ddc31f8c9d3" translate="yes" xml:space="preserve">
          <source>Do note that this all is more clumsy than just using &lt;code&gt;$.param()&lt;/code&gt;. Normally, you want to use &lt;code&gt;JSON.stringify()&lt;/code&gt; only if the target service is e.g. a JAX-RS (RESTful) service which is for some reason only capable of consuming JSON strings and not regular request parameters.</source>
          <target state="translated">Обратите внимание, что все это более неуклюже, чем просто использование &lt;code&gt;$.param()&lt;/code&gt; . Обычно вы хотите использовать &lt;code&gt;JSON.stringify()&lt;/code&gt; только в том случае, если целевой службой является, например, служба JAX-RS (RESTful), которая по какой-то причине способна принимать только строки JSON, а не обычные параметры запроса.</target>
        </trans-unit>
        <trans-unit id="076a5bb453b0c056da4abb1b6bd46e404396643a" translate="yes" xml:space="preserve">
          <source>Here's an example which displays &lt;code&gt;List&amp;lt;Product&amp;gt;&lt;/code&gt; in a &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; where the &lt;code&gt;Product&lt;/code&gt; class has the properties &lt;code&gt;Long id&lt;/code&gt;, &lt;code&gt;String name&lt;/code&gt; and &lt;code&gt;BigDecimal price&lt;/code&gt;. The servlet:</source>
          <target state="translated">Вот пример, который отображает &lt;code&gt;List&amp;lt;Product&amp;gt;&lt;/code&gt; в &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; , где класс &lt;code&gt;Product&lt;/code&gt; имеет свойства &lt;code&gt;Long id&lt;/code&gt; , &lt;code&gt;String name&lt;/code&gt; и &lt;code&gt;BigDecimal price&lt;/code&gt; . Сервлет:</target>
        </trans-unit>
        <trans-unit id="76606af17829a9c914ce8f7ffdba8e558646d376" translate="yes" xml:space="preserve">
          <source>Here's an example which displays &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; as &lt;code&gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;&lt;/code&gt;. The servlet:</source>
          <target state="translated">Вот пример, который отображает &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; как &lt;code&gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;&lt;/code&gt; . Сервлет:</target>
        </trans-unit>
        <trans-unit id="1fedc26505ef0a45590a9011066063c7e892fe65" translate="yes" xml:space="preserve">
          <source>Here's an example which does effectively the same as previous example, but then with XML instead of JSON. When using JSP as XML output generator you'll see that it's less tedious to code the table and all. JSTL is this way much more helpful as you can actually use it to iterate over the results and perform server side data formatting. The servlet:</source>
          <target state="translated">Вот пример,который фактически делает то же самое,что и предыдущий пример,но затем с XML вместо JSON.При использовании JSP в качестве генератора вывода XML вы увидите,что менее утомительно кодировать таблицу и все остальное.JSTL гораздо более полезен,так как вы можете использовать его для итераций по результатам и выполнения форматирования данных на стороне сервера.Сервлет:</target>
        </trans-unit>
        <trans-unit id="19358dfb5297679ce0acc76090ad0fed08d881b2" translate="yes" xml:space="preserve">
          <source>Here's another example which displays &lt;code&gt;Map&amp;lt;String, String&amp;gt;&lt;/code&gt; as &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">Вот еще один пример, который отображает &lt;code&gt;Map&amp;lt;String, String&amp;gt;&lt;/code&gt; как &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="8b0e1d9c633234ea0495dd581b0582c7449952fa" translate="yes" xml:space="preserve">
          <source>Here, we are going to create the simple example to create the login form using servlet.</source>
          <target state="translated">Здесь мы создадим простой пример для создания формы входа с помощью сервлета.</target>
        </trans-unit>
        <trans-unit id="6b5e95c3c081372fa9b03d1ed20f55fe66a66b84" translate="yes" xml:space="preserve">
          <source>How to switch easily between ajax-based website and basic HTML website?</source>
          <target state="translated">Как легко переключаться между сайтом на основе ajax и базовым HTML-сайтом?</target>
        </trans-unit>
        <trans-unit id="70cbe90eaa16a4700707cad552786a51fb645ab2" translate="yes" xml:space="preserve">
          <source>How to upload files to server using JSP/Servlet and Ajax?</source>
          <target state="translated">Как загрузить файлы на сервер с помощью JSPServlet и Ajax?</target>
        </trans-unit>
        <trans-unit id="940f0507c952fdbc369b877849a17245348e5801" translate="yes" xml:space="preserve">
          <source>How to use Servlets and Ajax</source>
          <target state="translated">Как использовать сервлеты и аякс</target>
        </trans-unit>
        <trans-unit id="72b18b38822f945c39d076ebbaf2df215a2f0ced" translate="yes" xml:space="preserve">
          <source>I will show you a whole example of servlet &amp;amp; how do ajax call.</source>
          <target state="translated">Я покажу вам целый пример сервлета и как вызывать ajax.</target>
        </trans-unit>
        <trans-unit id="742dbe1ab1d99c7c39225c1cb57c44b7fe21aa08" translate="yes" xml:space="preserve">
          <source>I'm very new to web apps and Servlets and I have the following question:</source>
          <target state="translated">Я очень новичок в веб-приложениях и сервлетах и у меня есть следующий вопрос:</target>
        </trans-unit>
        <trans-unit id="b7040a94ad17c3b5189f80147817e1670383c612" translate="yes" xml:space="preserve">
          <source>If you don't have a form at all, but just wanted to interact with the servlet &quot;in the background&quot; whereby you'd like to POST some data, then you can use jQuery &lt;a href=&quot;http://api.jquery.com/jquery.param/&quot;&gt;&lt;code&gt;$.param()&lt;/code&gt;&lt;/a&gt; to easily convert a JSON object to an URL-encoded query string.</source>
          <target state="translated">Если у вас вообще нет формы, но вы просто хотите взаимодействовать с сервлетом &amp;laquo;в фоновом режиме&amp;raquo;, с помощью которого вы хотите разместить некоторые данные, то вы можете использовать jQuery &lt;a href=&quot;http://api.jquery.com/jquery.param/&quot;&gt; &lt;code&gt;$.param()&lt;/code&gt; &lt;/a&gt; для простого преобразования объекта JSON. в строку запроса в кодировке URL.</target>
        </trans-unit>
        <trans-unit id="b4579b1eac22795f9aa92a821890b3fe553d42f7" translate="yes" xml:space="preserve">
          <source>If you however intend to send the JSON object as a whole instead of as individual request parameters for some reason, then you'd need to serialize it to a string using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify&quot;&gt;&lt;code&gt;JSON.stringify()&lt;/code&gt;&lt;/a&gt; (not part of jQuery) and instruct jQuery to set request content type to &lt;code&gt;application/json&lt;/code&gt; instead of (default) &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;. This can't be done via &lt;code&gt;$.post()&lt;/code&gt; convenience function, but needs to be done via &lt;code&gt;$.ajax()&lt;/code&gt; as below.</source>
          <target state="translated">Однако если вы по какой-то причине намереваетесь отправить объект JSON целиком, а не как отдельные параметры запроса, вам нужно будет сериализовать его в строку, используя &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify&quot;&gt; &lt;code&gt;JSON.stringify()&lt;/code&gt; &lt;/a&gt; (не является частью jQuery) и дать команду jQuery установить запрашивать тип контента для &lt;code&gt;application/json&lt;/code&gt; вместо (по умолчанию) &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; . Это не может быть сделано с помощью удобной функции &lt;code&gt;$.post()&lt;/code&gt; , но должно быть сделано с помощью &lt;code&gt;$.ajax()&lt;/code&gt; как показано ниже.</target>
        </trans-unit>
        <trans-unit id="3486e9159c31f3a00b22d150b18bfbf25ccec1d3" translate="yes" xml:space="preserve">
          <source>Important to realize and understand is that any &lt;code&gt;sendRedirect()&lt;/code&gt; and &lt;code&gt;forward()&lt;/code&gt; call by the servlet on an ajax request would only forward or redirect &lt;em&gt;the ajax request itself&lt;/em&gt; and not the main document/window where the ajax request originated. JavaScript/jQuery would in such case only retrieve the redirected/forwarded response as &lt;code&gt;responseText&lt;/code&gt; variable in the callback function. If it represents a whole HTML page and not an ajax-specific XML or JSON response, then all you could do is to replace the current document with it.</source>
          <target state="translated">Важно понимать и понимать, что любой &lt;code&gt;sendRedirect()&lt;/code&gt; и &lt;code&gt;forward()&lt;/code&gt; , выполняемый сервлетом по запросу ajax, будет только перенаправлять или перенаправлять &lt;em&gt;сам запрос ajax,&lt;/em&gt; а не основной документ / окно, из которого возник запрос ajax. В этом случае JavaScript / jQuery будет получать только перенаправленный / перенаправленный ответ как переменную &lt;code&gt;responseText&lt;/code&gt; в функции обратного вызова. Если он представляет собой целую страницу HTML, а не специфический для ajax ответ XML или JSON, все, что вы можете сделать, это заменить текущий документ им.</target>
        </trans-unit>
        <trans-unit id="62023385138308b68158d933935bc448896ed4bb" translate="yes" xml:space="preserve">
          <source>Indeed, the keyword is &quot;ajax&quot;: &lt;em&gt;Asynchronous JavaScript and XML&lt;/em&gt;. However, last years it's more than often &lt;em&gt;Asynchronous JavaScript and JSON&lt;/em&gt;. Basically, you let JS execute an asynchronous HTTP request and update the HTML DOM tree based on the response data.</source>
          <target state="translated">Действительно, ключевое слово &amp;laquo;ajax&amp;raquo;: &lt;em&gt;асинхронный JavaScript и XML&lt;/em&gt; . Однако в последние годы это чаще, чем &lt;em&gt;асинхронный JavaScript и JSON&lt;/em&gt; . По сути, вы позволяете JS выполнять асинхронный HTTP-запрос и обновлять дерево HTML DOM на основе данных ответа.</target>
        </trans-unit>
        <trans-unit id="7dcdb57f219d93549fb03015051304d8abb8679d" translate="yes" xml:space="preserve">
          <source>It is also possible to implement this kind of thing using some browser plugin or add-on, though it may be tricky for a plugin to reach into the browser's data structures to update the DOM.  (Native code plugins normally write to some graphics frame that is embedded in the page.)</source>
          <target state="translated">Также возможно реализовать этот тип вещей,используя какой-нибудь плагин браузера или надстройку,хотя это может быть сложно для плагина,чтобы добраться до структур данных браузера,чтобы обновить DOM.(Плагины с собственным кодом обычно пишут на какой-нибудь графический фрейм,который встроен в страницу).</target>
        </trans-unit>
        <trans-unit id="fdf95eca9f8b1d2244f7b2cd723ef976ae32c350" translate="yes" xml:space="preserve">
          <source>Jsp page java script function to submit data to servlet with two variable firstName and lastName:</source>
          <target state="translated">Функция java-скрипта Jsp страницы для передачи данных сервлету с двумя переменными firstName и lastName:</target>
        </trans-unit>
        <trans-unit id="b4b9557d228a01bca5554f1ab7acdcd854b66199" translate="yes" xml:space="preserve">
          <source>Kickoff example returning &lt;code&gt;String&lt;/code&gt; as plain text</source>
          <target state="translated">Пример Kickoff, возвращающий &lt;code&gt;String&lt;/code&gt; в виде простого текста</target>
        </trans-unit>
        <trans-unit id="5179696436ccb32906957d8a57c587c03f4caab2" translate="yes" xml:space="preserve">
          <source>Manually sending JSON object to servlet</source>
          <target state="translated">Ручная отправка объекта JSON на сервлет</target>
        </trans-unit>
        <trans-unit id="01e4e4e67b46ca3b3e78d00525ca2700a9c99b3a" translate="yes" xml:space="preserve">
          <source>Manually sending request parameters to servlet</source>
          <target state="translated">Ручная отправка параметров запроса на сервлет</target>
        </trans-unit>
        <trans-unit id="dde61058e584e3bdf27674e7b20f4195924c8af5" translate="yes" xml:space="preserve">
          <source>Map this servlet on an URL pattern of &lt;code&gt;/someservlet&lt;/code&gt; or &lt;code&gt;/someservlet/*&lt;/code&gt; as below (obviously, the URL pattern is free to your choice, but you'd need to alter the &lt;code&gt;someservlet&lt;/code&gt; URL in JS code examples over all place accordingly):</source>
          <target state="translated">Сопоставьте этот сервлет с шаблоном URL-адреса &lt;code&gt;/someservlet&lt;/code&gt; или &lt;code&gt;/someservlet/*&lt;/code&gt; , как показано ниже (очевидно, шаблон URL-адреса свободен по вашему выбору, но вам необходимо изменить URL-адрес &lt;code&gt;someservlet&lt;/code&gt; в примерах кода JS для всех мест соответственно):</target>
        </trans-unit>
        <trans-unit id="c56e5df70c3ac3a6c3973476fdf82139c44069da" translate="yes" xml:space="preserve">
          <source>Normally you cant update a page from a servlet. Client (browser) has to request an update. Eiter client loads a whole new page or it requests an update to a part of an existing page. This technique is called Ajax.</source>
          <target state="translated">Обычно вы не можете обновить страницу с сервлета.Клиент (браузер)должен запросить обновление.Eiter клиент загружает целую новую страницу или запрашивает обновление части существующей страницы.Эта техника называется Ajax.</target>
        </trans-unit>
        <trans-unit id="bd39a665cfc0865af33aa13bcfa362533cc6e53c" translate="yes" xml:space="preserve">
          <source>Note that this doesn't change the URL as enduser sees in browser's address bar. So there are issues with bookmarkability. Therefore, it's much better to just return an &quot;instruction&quot; for JavaScript/jQuery to perform a redirect instead of returning the whole content of the redirected page. E.g. by returning a boolean, or an URL.</source>
          <target state="translated">Обратите внимание,что это не меняет URL,как это видит конечный пользователь в адресной строке браузера.Так что есть проблемы с закладкой.Поэтому гораздо лучше просто вернуть &quot;инструкцию&quot; для JavaScriptjQuery для выполнения перенаправления вместо того,чтобы возвращать все содержимое перенаправленной страницы.Например,вернув булевую строку или URL.</target>
        </trans-unit>
        <trans-unit id="22feb91f5c22ed94258e3f081aa26bfc5c037905" translate="yes" xml:space="preserve">
          <source>Now open the &lt;a href=&quot;http://localhost:8080/context/test.jsp&quot;&gt;http://localhost:8080/context/test.jsp&lt;/a&gt; in the browser and press the button. You'll see that the content of the div get updated with the servlet response.</source>
          <target state="translated">Теперь откройте &lt;a href=&quot;http://localhost:8080/context/test.jsp&quot;&gt;http: // localhost: 8080 / context / test.jsp&lt;/a&gt; в браузере и нажмите кнопку. Вы увидите, что содержимое div обновляется ответом сервлета.</target>
        </trans-unit>
        <trans-unit id="cfd2f0fb386862ba0d1aa2adf79265c37a9d89c7" translate="yes" xml:space="preserve">
          <source>Or, when you're not on a Servlet 3.0 compatible container yet (Tomcat 7, Glassfish 3, JBoss AS 6, etc or newer), then map it in &lt;code&gt;web.xml&lt;/code&gt; the old fashioned way (see also &lt;a href=&quot;https://stackoverflow.com/tags/servlets/info&quot;&gt;our Servlets wiki page&lt;/a&gt;):</source>
          <target state="translated">Или, если вы еще не находитесь в контейнере, совместимом с Servlet 3.0 (Tomcat 7, Glassfish 3, JBoss AS 6 и т. Д. Или более поздней версии), то отобразите его в &lt;code&gt;web.xml&lt;/code&gt; по старинке (см. Также &lt;a href=&quot;https://stackoverflow.com/tags/servlets/info&quot;&gt;нашу вики-страницу Servlets&lt;/a&gt; ):</target>
        </trans-unit>
        <trans-unit id="26171874502aeafcb87d300f5bedd28651eb82f6" translate="yes" xml:space="preserve">
          <source>Returning &lt;code&gt;List&amp;lt;Entity&amp;gt;&lt;/code&gt; as JSON</source>
          <target state="translated">Возвращение &lt;code&gt;List&amp;lt;Entity&amp;gt;&lt;/code&gt; как JSON</target>
        </trans-unit>
        <trans-unit id="5f03764f3bd2c86ee26d6b433ce4069420e16f5b" translate="yes" xml:space="preserve">
          <source>Returning &lt;code&gt;List&amp;lt;Entity&amp;gt;&lt;/code&gt; as XML</source>
          <target state="translated">Возвращение &lt;code&gt;List&amp;lt;Entity&amp;gt;&lt;/code&gt; виде XML</target>
        </trans-unit>
        <trans-unit id="3688b821c329699e6f9a80ff22369c56a5beac00" translate="yes" xml:space="preserve">
          <source>Returning &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; as JSON</source>
          <target state="translated">Возвращение &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; как JSON</target>
        </trans-unit>
        <trans-unit id="679fcf8af507bcac5a23e4ab406f76e65e4b3b8d" translate="yes" xml:space="preserve">
          <source>Returning &lt;code&gt;Map&amp;lt;String, String&amp;gt;&lt;/code&gt; as JSON</source>
          <target state="translated">Возвращая &lt;code&gt;Map&amp;lt;String, String&amp;gt;&lt;/code&gt; как JSON</target>
        </trans-unit>
        <trans-unit id="371a87eafb4de078ff674d69a5a89c186532eb49" translate="yes" xml:space="preserve">
          <source>See also:</source>
          <target state="translated">См.также:</target>
        </trans-unit>
        <trans-unit id="1a93f0fc4e88ee9727bc2cea774ad68b33c0e53b" translate="yes" xml:space="preserve">
          <source>Sending a redirect from servlet</source>
          <target state="translated">Отправка перенаправления с сервлета</target>
        </trans-unit>
        <trans-unit id="acb0ba47f04915e496a795c1972528f72461d66f" translate="yes" xml:space="preserve">
          <source>Servlet to read data send back to jsp in xml format ( You could use text as well. Just you need to change response content to text and render data on javascript function.)</source>
          <target state="translated">Сервлет для чтения данных,отправляемых обратно в jsp в формате xml (можно использовать и текст).Просто вам нужно изменить содержание ответа на текст и отобразить данные в функции javascript).</target>
        </trans-unit>
        <trans-unit id="826f726c00ea26b16c7091f335fee7e5d8de8abb" translate="yes" xml:space="preserve">
          <source>Since it's pretty a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/AJAX/Getting_Started&quot;&gt;tedious&lt;/a&gt; work to make it to work across all browsers (especially Internet Explorer versus others), there are plenty of JavaScript libraries out which simplifies this in single functions and covers as many as possible browser-specific bugs/quirks under the hoods, such as &lt;a href=&quot;http://jquery.com&quot;&gt;jQuery&lt;/a&gt;, &lt;a href=&quot;http://www.prototypejs.org/&quot;&gt;Prototype&lt;/a&gt;, &lt;a href=&quot;http://mootools.net/&quot;&gt;Mootools&lt;/a&gt;. Since jQuery is most popular these days, I'll use it in the below examples.</source>
          <target state="translated">Поскольку это довольно &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/AJAX/Getting_Started&quot;&gt;утомительная&lt;/a&gt; работа, чтобы заставить его работать во всех браузерах (особенно Internet Explorer и других), существует множество библиотек JavaScript, которые упрощают это в отдельных функциях и покрывают как можно больше специфичных для браузера ошибок / излишеств. такие как &lt;a href=&quot;http://jquery.com&quot;&gt;jQuery&lt;/a&gt; , &lt;a href=&quot;http://www.prototypejs.org/&quot;&gt;Prototype&lt;/a&gt; , &lt;a href=&quot;http://mootools.net/&quot;&gt;Mootools&lt;/a&gt; . Поскольку jQuery наиболее популярен в наши дни, я буду использовать его в следующих примерах.</target>
        </trans-unit>
        <trans-unit id="82ec09f975dd38e549357b84053114b13839f782" translate="yes" xml:space="preserve">
          <source>That code is typically javascript that is embedded in or linked from the HTML page, hence the AJAX suggestion.  (In fact, if we assume that the updated text comes from the server via an HTTP request, this is classic AJAX.)</source>
          <target state="translated">Этот код,как правило,представляет собой javascript,который встроен в HTML-страницу или связан с ней,отсюда и предложение AJAX.(На самом деле,если мы предположим,что обновленный текст приходит с сервера через HTTP запрос,это классический AJAX).</target>
        </trans-unit>
        <trans-unit id="c28f33370f7556ae09d69388971724ff1b8b65c1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://malsup.com/jquery/form/&quot;&gt;jQuery Form plugin&lt;/a&gt; does less or more the same as above jQuery example, but it has additional transparent support for &lt;code&gt;multipart/form-data&lt;/code&gt; forms as required by file uploads.</source>
          <target state="translated">&lt;a href=&quot;http://malsup.com/jquery/form/&quot;&gt;Плагин jQuery Form&lt;/a&gt; выполняет в большей или меньшей степени те же действия, что и в приведенном выше примере jQuery, но имеет дополнительную прозрачную поддержку форм &lt;code&gt;multipart/form-data&lt;/code&gt; , как того требует загрузка файлов.</target>
        </trans-unit>
        <trans-unit id="13111950dc911470d158617cc00323a3fb10b09b" translate="yes" xml:space="preserve">
          <source>The JS code:</source>
          <target state="translated">JS код:</target>
        </trans-unit>
        <trans-unit id="60f85f5144e41851339584a99a25400fd02624ab" translate="yes" xml:space="preserve">
          <source>The JSP code (note: if you put the &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; in a &lt;code&gt;&amp;lt;jsp:include&amp;gt;&lt;/code&gt;, it may be reusable elsewhere in a non-ajax response):</source>
          <target state="translated">Код JSP (примечание: если вы поместите &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; в &lt;code&gt;&amp;lt;jsp:include&amp;gt;&lt;/code&gt; , он может быть повторно использован в другом месте в ответе не-ajax):</target>
        </trans-unit>
        <trans-unit id="82bcb8bc50271a9fe41b3d0c7f74b3983ec746ae" translate="yes" xml:space="preserve">
          <source>The right way to update the page currently displayed in the user's browser (without reloading it) is to have some code executing in the browser update the page's DOM.</source>
          <target state="translated">Правильным способом обновления страницы,отображаемой в настоящее время в браузере пользователя (без его перезагрузки),является выполнение некоторого кода в браузере,обновляющего DOM страницы.</target>
        </trans-unit>
        <trans-unit id="81f36ba7704aff0b7ff66243392e07ee62fa4339" translate="yes" xml:space="preserve">
          <source>The same &lt;code&gt;doPost()&lt;/code&gt; method as shown here above can be reused. Do note that above syntax also works with &lt;code&gt;$.get()&lt;/code&gt; in jQuery and &lt;code&gt;doGet()&lt;/code&gt; in servlet.</source>
          <target state="translated">Тот же самый метод &lt;code&gt;doPost()&lt;/code&gt; как показано здесь выше, может быть использован повторно. Обратите внимание, что приведенный выше синтаксис также работает с &lt;code&gt;$.get()&lt;/code&gt; в jQuery и &lt;code&gt;doGet()&lt;/code&gt; в сервлете.</target>
        </trans-unit>
        <trans-unit id="ec4192092629e132db0176d50836c910fcf6d4f8" translate="yes" xml:space="preserve">
          <source>Then, in order to process the JSON object in the servlet which isn't being sent as individual request parameters but as a whole JSON string the above way, you only need to manually parse the request body using a JSON tool instead of using &lt;code&gt;getParameter()&lt;/code&gt; the usual way. Namely, servlets don't support &lt;code&gt;application/json&lt;/code&gt; formatted requests, but only &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; or &lt;code&gt;multipart/form-data&lt;/code&gt; formatted requests. Gson also supports parsing a JSON string into a JSON object.</source>
          <target state="translated">Затем, чтобы обработать объект JSON в сервлете, который отправляется не как отдельные параметры запроса, а как целая строка JSON описанным выше способом, вам нужно только вручную проанализировать тело запроса с помощью инструмента JSON вместо использования &lt;code&gt;getParameter()&lt;/code&gt; обычный способ. А именно, сервлеты не поддерживают запросы в формате &lt;code&gt;application/json&lt;/code&gt; , а только запросы в формате &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; или &lt;code&gt;multipart/form-data&lt;/code&gt; . Gson также поддерживает анализ строки JSON в объект JSON.</target>
        </trans-unit>
        <trans-unit id="89fd0d601f377a83a71d1cdde17c69e5d81a1961" translate="yes" xml:space="preserve">
          <source>Using bootstrap multi select</source>
          <target state="translated">Использование мульти-выбора с помощью бутстрапа</target>
        </trans-unit>
        <trans-unit id="2a9a8c670858d784d66a1602187d7c2c90e1a17b" translate="yes" xml:space="preserve">
          <source>Whenever I print something inside the servlet and call it by the webbrowser, it returns a new page containing that text. Is there a way to print the text in the current page using Ajax?</source>
          <target state="translated">Всякий раз,когда я печатаю что-либо внутри сервлета и вызываю его веб-браузером,он возвращает новую страницу,содержащую этот текст.Есть ли способ распечатать текст на текущей странице с помощью Ajax?</target>
        </trans-unit>
        <trans-unit id="b2688f5607d6b932d92c51a110809c5f7b5681ba" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;http://www.hunlock.com/blogs/Mastering_JSON_%28_JavaScript_Object_Notation_%29&quot;&gt;JSON&lt;/a&gt; instead of plaintext as response format you can even get some steps further. It allows for more dynamics. First, you'd like to have a tool to convert between Java objects and JSON strings. There are plenty of them as well (see the bottom of &lt;a href=&quot;http://json.org/&quot;&gt;this page&lt;/a&gt; for an overview). My personal favourite is &lt;a href=&quot;http://code.google.com/p/google-gson/&quot;&gt;Google Gson&lt;/a&gt;. Download and put its JAR file in &lt;code&gt;/WEB-INF/lib&lt;/code&gt; folder of your webapplication.</source>
          <target state="translated">С &lt;a href=&quot;http://www.hunlock.com/blogs/Mastering_JSON_%28_JavaScript_Object_Notation_%29&quot;&gt;JSON&lt;/a&gt; вместо открытого текста в качестве формата ответа вы можете даже продвинуться дальше. Это учитывает больше динамики. Во-первых, вы хотели бы иметь инструмент для преобразования между объектами Java и строками JSON. Их также много (см. Обзор в нижней части &lt;a href=&quot;http://json.org/&quot;&gt;этой страницы&lt;/a&gt; ). Мой личный фаворит - &lt;a href=&quot;http://code.google.com/p/google-gson/&quot;&gt;Google Gson&lt;/a&gt; . Загрузите и поместите его JAR-файл в папку &lt;code&gt;/WEB-INF/lib&lt;/code&gt; вашего веб-приложения.</target>
        </trans-unit>
        <trans-unit id="d09487967ad994c6f9ec09684e86a745ebd6f9e7" translate="yes" xml:space="preserve">
          <source>You can in the servlet distinguish between normal requests and ajax requests as below:</source>
          <target state="translated">В сервлетах можно различать обычные запросы и запросы ajax,как показано ниже:</target>
        </trans-unit>
        <trans-unit id="6488cbad5e8c23f7a9f7b7b89ab6dd45d6c58009" translate="yes" xml:space="preserve">
          <source>You can progressively enhance it with ajax as below:</source>
          <target state="translated">Вы можете постепенно усилить его с помощью аякса,как показано ниже:</target>
        </trans-unit>
        <trans-unit id="b976f30c066f9d428daf94d5a76c8335226ccf0a" translate="yes" xml:space="preserve">
          <source>You can use jQuery &lt;a href=&quot;https://api.jquery.com/serialize/&quot;&gt;&lt;code&gt;$.serialize()&lt;/code&gt;&lt;/a&gt; to easily ajaxify existing POST forms without fiddling around with collecting and passing the individual form input parameters. Assuming an existing form which works perfectly fine without JavaScript/jQuery (and thus degrades gracefully when enduser has JavaScript disabled):</source>
          <target state="translated">Вы можете использовать jQuery &lt;a href=&quot;https://api.jquery.com/serialize/&quot;&gt; &lt;code&gt;$.serialize()&lt;/code&gt; &lt;/a&gt; чтобы легко изменить существующие формы POST без необходимости собирать и передавать отдельные входные параметры формы. Предполагая, что существующая форма прекрасно работает без JavaScript / jQuery (и, следовательно, изящно ухудшается, когда в enduser отключен JavaScript):</target>
        </trans-unit>
        <trans-unit id="ca21397eada293cac22191e78e91633a316e1244" translate="yes" xml:space="preserve">
          <source>You'll by now probably realize why XML is so much more powerful than JSON for the particular purpose of updating a HTML document using Ajax. JSON is funny, but after all generally only useful for so-called &quot;public web services&quot;. MVC frameworks like &lt;a href=&quot;https://stackoverflow.com/tags/jsf/info&quot;&gt;JSF&lt;/a&gt; use XML under the covers for their ajax magic.</source>
          <target state="translated">Теперь вы, вероятно, поймете, почему XML настолько мощнее, чем JSON, для конкретной цели обновления HTML-документа с помощью Ajax. JSON забавен, но в конце концов полезен только для так называемых &amp;laquo;публичных веб-сервисов&amp;raquo;. Фреймворки MVC, такие как &lt;a href=&quot;https://stackoverflow.com/tags/jsf/info&quot;&gt;JSF,&lt;/a&gt; используют XML под прикрытием для своей магии ajax.</target>
        </trans-unit>
        <trans-unit id="8fcd25a39d2037183044a8897e9a5333d727fded" translate="yes" xml:space="preserve">
          <source>with</source>
          <target state="translated">with</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
