<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/4112686">
    <body>
      <group id="4112686">
        <trans-unit id="2058f92b0de7e12c6782c1a4eda7cfebe29256ec" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Ajax&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Ajax&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fc151f7bb9f6c75ba5aa00ebfc79caba10f9a670" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Here is ajax Sample&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;这是ajax示例&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e9b04aae0fcb1123c59e5b55206bb9fdae6f5829" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;In Servlet&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;在Servlet中&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="983c95a5ee8d4366708a42d41fe5cd2558bc337e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;LoginServlet Servlet Code :-&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;LoginServlet Servlet代码：-&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6a5fb6e5fc13a01937ae02611fcad859574413d2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;index.html&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;index.html&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="402400b00b019f3b35fb23e3a52105143431569d" translate="yes" xml:space="preserve">
          <source>Access Java / Servlet / JSP / JSTL / EL variables in JavaScript</source>
          <target state="translated">在JavaScript中访问Java Servlet JSP JSTL EL变量</target>
        </trans-unit>
        <trans-unit id="c70e9a2dda5670ffe54888a0054ca4d0bdb6f986" translate="yes" xml:space="preserve">
          <source>Ajax (also AJAX) an acronym for Asynchronous JavaScript and XML) is a group of interrelated web development techniques used on the client-side to create asynchronous web applications. With Ajax, web applications can send data to, and retrieve data from, a server asynchronously 
Below is example code:</source>
          <target state="translated">Ajax(也是Ajax)的首字母缩写Asynchronous JavaScript和XML)是一组相互关联的Web开发技术,用于在客户端创建异步Web应用程序。使用Ajax,Web应用程序可以异步地向服务器发送数据,并从服务器上检索数据。</target>
        </trans-unit>
        <trans-unit id="2fad0a651e220aefadec27dc104de3e10b23be80" translate="yes" xml:space="preserve">
          <source>Ajaxifying an existing form</source>
          <target state="translated">Ajaxify一个现有的表单</target>
        </trans-unit>
        <trans-unit id="113ae3d09a0c918d7c1bcb8f7f05166e16fe886e" translate="yes" xml:space="preserve">
          <source>And the JSP:</source>
          <target state="translated">还有JSP。</target>
        </trans-unit>
        <trans-unit id="0c1a194459d4f382c580c25f68a3dead23f08e70" translate="yes" xml:space="preserve">
          <source>Call Servlet and invoke Java code from JavaScript along with parameters</source>
          <target state="translated">调用Servlet并从JavaScript中调用Java代码与参数一起调用Java代码</target>
        </trans-unit>
        <trans-unit id="1be07164444118687e39c18c9d8a253ec4bd137a" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;/some.jsp&lt;/code&gt; like below (note: the code doesn't expect the JSP file being placed in a subfolder, if you do so, alter servlet URL accordingly):</source>
          <target state="translated">如下所示创建一个 &lt;code&gt;/some.jsp&lt;/code&gt; （注意：代码不希望将JSP文件放置在子文件夹中，如果这样做，请相应地更改servlet URL）：</target>
        </trans-unit>
        <trans-unit id="218c81d29238c44d6989d05c6a863c654a6b371d" translate="yes" xml:space="preserve">
          <source>Create a servlet with a &lt;code&gt;doGet()&lt;/code&gt; method which look like this:</source>
          <target state="translated">使用 &lt;code&gt;doGet()&lt;/code&gt; 方法创建一个servlet，如下所示：</target>
        </trans-unit>
        <trans-unit id="74fa38aab4bf8664c9779452f07c09fe8194e1af" translate="yes" xml:space="preserve">
          <source>Do note that a lot of starters mix &lt;code&gt;contentType&lt;/code&gt; with &lt;code&gt;dataType&lt;/code&gt;. The &lt;code&gt;contentType&lt;/code&gt; represents the type of the &lt;strong&gt;request&lt;/strong&gt; body. The &lt;code&gt;dataType&lt;/code&gt; represents the (expected) type of the &lt;strong&gt;response&lt;/strong&gt; body, which is usually unnecessary as jQuery already autodetects it based on response's &lt;code&gt;Content-Type&lt;/code&gt; header.</source>
          <target state="translated">请注意，许多入门者将 &lt;code&gt;contentType&lt;/code&gt; 与 &lt;code&gt;dataType&lt;/code&gt; 混合使用。 &lt;code&gt;contentType&lt;/code&gt; 代表&lt;strong&gt;请求&lt;/strong&gt;主体的类型。 &lt;code&gt;dataType&lt;/code&gt; 表示&lt;strong&gt;响应&lt;/strong&gt;主体的（预期）类型，通常是不必要的，因为jQuery已经基于响应的 &lt;code&gt;Content-Type&lt;/code&gt; 标头自动检测到它。</target>
        </trans-unit>
        <trans-unit id="e7ca8fc2fbc7580c6e74e346b13bf93f92eaf53b" translate="yes" xml:space="preserve">
          <source>Do note that jQuery automatically parses the response as JSON and gives you directly a JSON object (&lt;code&gt;responseJson&lt;/code&gt;) as function argument when you set the response content type to &lt;code&gt;application/json&lt;/code&gt;. If you forget to set it or rely on a default of &lt;code&gt;text/plain&lt;/code&gt; or &lt;code&gt;text/html&lt;/code&gt;, then the &lt;code&gt;responseJson&lt;/code&gt; argument wouldn't give you a JSON object, but a plain vanilla string and you'd need to manually fiddle around with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse&quot;&gt;&lt;code&gt;JSON.parse()&lt;/code&gt;&lt;/a&gt; afterwards, which is thus totally unnecessary if you set the content type right in first place.</source>
          <target state="translated">请注意，当您将响应内容类型设置为 &lt;code&gt;application/json&lt;/code&gt; 时，jQuery会自动将响应解析为JSON，并直接为您提供JSON对象（ &lt;code&gt;responseJson&lt;/code&gt; ）作为函数参数。 如果您忘记设置它或依赖于默认的 &lt;code&gt;text/plain&lt;/code&gt; 或 &lt;code&gt;text/html&lt;/code&gt; ，则 &lt;code&gt;responseJson&lt;/code&gt; 参数将不会为您提供JSON对象，而是一个普通的香草字符串，您需要手动处理&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse&quot;&gt; &lt;code&gt;JSON.parse()&lt;/code&gt; &lt;/a&gt; ，因此如果首先将内容类型设置为正确，则完全没有必要。</target>
        </trans-unit>
        <trans-unit id="7716e53e6264d789d93f62b54b389ddc31f8c9d3" translate="yes" xml:space="preserve">
          <source>Do note that this all is more clumsy than just using &lt;code&gt;$.param()&lt;/code&gt;. Normally, you want to use &lt;code&gt;JSON.stringify()&lt;/code&gt; only if the target service is e.g. a JAX-RS (RESTful) service which is for some reason only capable of consuming JSON strings and not regular request parameters.</source>
          <target state="translated">请注意，这比仅使用 &lt;code&gt;$.param()&lt;/code&gt; 更笨拙。 通常，仅当目标服务是例如JAX-RS（RESTful）服务时才需要使用 &lt;code&gt;JSON.stringify()&lt;/code&gt; ，由于某种原因，该服务仅能够使用JSON字符串，而不能使用常规请求参数。</target>
        </trans-unit>
        <trans-unit id="076a5bb453b0c056da4abb1b6bd46e404396643a" translate="yes" xml:space="preserve">
          <source>Here's an example which displays &lt;code&gt;List&amp;lt;Product&amp;gt;&lt;/code&gt; in a &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; where the &lt;code&gt;Product&lt;/code&gt; class has the properties &lt;code&gt;Long id&lt;/code&gt;, &lt;code&gt;String name&lt;/code&gt; and &lt;code&gt;BigDecimal price&lt;/code&gt;. The servlet:</source>
          <target state="translated">这是一个在 &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; 中显示 &lt;code&gt;List&amp;lt;Product&amp;gt;&lt;/code&gt; 的示例，其中 &lt;code&gt;Product&lt;/code&gt; 类具有 &lt;code&gt;Long id&lt;/code&gt; ， &lt;code&gt;String name&lt;/code&gt; 和 &lt;code&gt;BigDecimal price&lt;/code&gt; 属性。 Servlet：</target>
        </trans-unit>
        <trans-unit id="76606af17829a9c914ce8f7ffdba8e558646d376" translate="yes" xml:space="preserve">
          <source>Here's an example which displays &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; as &lt;code&gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;&lt;/code&gt;. The servlet:</source>
          <target state="translated">这是一个将 &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; 显示为 &lt;code&gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;&lt;/code&gt; 的示例。 Servlet：</target>
        </trans-unit>
        <trans-unit id="1fedc26505ef0a45590a9011066063c7e892fe65" translate="yes" xml:space="preserve">
          <source>Here's an example which does effectively the same as previous example, but then with XML instead of JSON. When using JSP as XML output generator you'll see that it's less tedious to code the table and all. JSTL is this way much more helpful as you can actually use it to iterate over the results and perform server side data formatting. The servlet:</source>
          <target state="translated">这里有一个例子,它的功能和前面的例子一样,但是用XML代替JSON。当你使用JSP作为XML输出生成器时,你会发现,在编码表和所有的事情上没有那么繁琐。JSTL是这种方式更有帮助,因为你可以实际使用它来迭代结果并执行服务器端数据格式化。的servlet。</target>
        </trans-unit>
        <trans-unit id="19358dfb5297679ce0acc76090ad0fed08d881b2" translate="yes" xml:space="preserve">
          <source>Here's another example which displays &lt;code&gt;Map&amp;lt;String, String&amp;gt;&lt;/code&gt; as &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">这是另一个将 &lt;code&gt;Map&amp;lt;String, String&amp;gt;&lt;/code&gt; 为 &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; 的示例：</target>
        </trans-unit>
        <trans-unit id="8b0e1d9c633234ea0495dd581b0582c7449952fa" translate="yes" xml:space="preserve">
          <source>Here, we are going to create the simple example to create the login form using servlet.</source>
          <target state="translated">在这里,我们将创建一个简单的例子,用servlet创建登录表单。</target>
        </trans-unit>
        <trans-unit id="6b5e95c3c081372fa9b03d1ed20f55fe66a66b84" translate="yes" xml:space="preserve">
          <source>How to switch easily between ajax-based website and basic HTML website?</source>
          <target state="translated">如何在基于ajax的网站和基本HTML网站之间轻松切换?</target>
        </trans-unit>
        <trans-unit id="70cbe90eaa16a4700707cad552786a51fb645ab2" translate="yes" xml:space="preserve">
          <source>How to upload files to server using JSP/Servlet and Ajax?</source>
          <target state="translated">如何使用JSPServlet和Ajax上传文件到服务器?</target>
        </trans-unit>
        <trans-unit id="940f0507c952fdbc369b877849a17245348e5801" translate="yes" xml:space="preserve">
          <source>How to use Servlets and Ajax</source>
          <target state="translated">如何使用Servlets和Ajax</target>
        </trans-unit>
        <trans-unit id="72b18b38822f945c39d076ebbaf2df215a2f0ced" translate="yes" xml:space="preserve">
          <source>I will show you a whole example of servlet &amp;amp; how do ajax call.</source>
          <target state="translated">我将向您展示servlet的整个示例以及ajax调用的方式。</target>
        </trans-unit>
        <trans-unit id="742dbe1ab1d99c7c39225c1cb57c44b7fe21aa08" translate="yes" xml:space="preserve">
          <source>I'm very new to web apps and Servlets and I have the following question:</source>
          <target state="translated">我对Web应用程序和Servlets很陌生,我有以下问题。</target>
        </trans-unit>
        <trans-unit id="b7040a94ad17c3b5189f80147817e1670383c612" translate="yes" xml:space="preserve">
          <source>If you don't have a form at all, but just wanted to interact with the servlet &quot;in the background&quot; whereby you'd like to POST some data, then you can use jQuery &lt;a href=&quot;http://api.jquery.com/jquery.param/&quot;&gt;&lt;code&gt;$.param()&lt;/code&gt;&lt;/a&gt; to easily convert a JSON object to an URL-encoded query string.</source>
          <target state="translated">如果您根本没有表单，而只想与&amp;ldquo;后台&amp;rdquo;与servlet交互，从而希望发布一些数据，则可以使用jQuery &lt;a href=&quot;http://api.jquery.com/jquery.param/&quot;&gt; &lt;code&gt;$.param()&lt;/code&gt; &lt;/a&gt;轻松地转换JSON对象URL编码的查询字符串。</target>
        </trans-unit>
        <trans-unit id="b4579b1eac22795f9aa92a821890b3fe553d42f7" translate="yes" xml:space="preserve">
          <source>If you however intend to send the JSON object as a whole instead of as individual request parameters for some reason, then you'd need to serialize it to a string using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify&quot;&gt;&lt;code&gt;JSON.stringify()&lt;/code&gt;&lt;/a&gt; (not part of jQuery) and instruct jQuery to set request content type to &lt;code&gt;application/json&lt;/code&gt; instead of (default) &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;. This can't be done via &lt;code&gt;$.post()&lt;/code&gt; convenience function, but needs to be done via &lt;code&gt;$.ajax()&lt;/code&gt; as below.</source>
          <target state="translated">但是，如果出于某种原因打算将JSON对象作为一个整体而不是作为单个请求参数发送，则需要使用&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify&quot;&gt; &lt;code&gt;JSON.stringify()&lt;/code&gt; &lt;/a&gt; （不是jQuery的一部分）将其序列化为字符串，并指示jQuery进行设置向 &lt;code&gt;application/json&lt;/code&gt; 请求内容类型，而不是（默认） &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; 。 这不能通过 &lt;code&gt;$.post()&lt;/code&gt; 便捷函数来完成，但是需要通过 &lt;code&gt;$.ajax()&lt;/code&gt; 来完成，如下所示。</target>
        </trans-unit>
        <trans-unit id="3486e9159c31f3a00b22d150b18bfbf25ccec1d3" translate="yes" xml:space="preserve">
          <source>Important to realize and understand is that any &lt;code&gt;sendRedirect()&lt;/code&gt; and &lt;code&gt;forward()&lt;/code&gt; call by the servlet on an ajax request would only forward or redirect &lt;em&gt;the ajax request itself&lt;/em&gt; and not the main document/window where the ajax request originated. JavaScript/jQuery would in such case only retrieve the redirected/forwarded response as &lt;code&gt;responseText&lt;/code&gt; variable in the callback function. If it represents a whole HTML page and not an ajax-specific XML or JSON response, then all you could do is to replace the current document with it.</source>
          <target state="translated">认识和理解的重要之处在于，servlet对ajax请求的任何 &lt;code&gt;sendRedirect()&lt;/code&gt; 和 &lt;code&gt;forward()&lt;/code&gt; 调用只会转发或重定向&lt;em&gt;ajax请求本身&lt;/em&gt; ，而不转发或重定向&lt;em&gt;ajax请求产生&lt;/em&gt;的主文档/窗口。 在这种情况下，JavaScript / jQuery将仅在回调函数中将重定向/转发的响应作为 &lt;code&gt;responseText&lt;/code&gt; 变量检索。 如果它代表整个HTML页面，而不是特定于Ajax的XML或JSON响应，那么您所能做的就是用它替换当前文档。</target>
        </trans-unit>
        <trans-unit id="62023385138308b68158d933935bc448896ed4bb" translate="yes" xml:space="preserve">
          <source>Indeed, the keyword is &quot;ajax&quot;: &lt;em&gt;Asynchronous JavaScript and XML&lt;/em&gt;. However, last years it's more than often &lt;em&gt;Asynchronous JavaScript and JSON&lt;/em&gt;. Basically, you let JS execute an asynchronous HTTP request and update the HTML DOM tree based on the response data.</source>
          <target state="translated">实际上，关键字是&amp;ldquo; ajax&amp;rdquo;： &lt;em&gt;异步JavaScript和XML&lt;/em&gt; 。 但是，去年，它比&lt;em&gt;异步JavaScript和JSON&lt;/em&gt;更为常见。 基本上，让JS执行异步HTTP请求并根据响应数据更新HTML DOM树。</target>
        </trans-unit>
        <trans-unit id="7dcdb57f219d93549fb03015051304d8abb8679d" translate="yes" xml:space="preserve">
          <source>It is also possible to implement this kind of thing using some browser plugin or add-on, though it may be tricky for a plugin to reach into the browser's data structures to update the DOM.  (Native code plugins normally write to some graphics frame that is embedded in the page.)</source>
          <target state="translated">也可以使用一些浏览器插件或附加组件来实现这种事情,尽管插件要进入浏览器的数据结构来更新DOM可能比较麻烦。(原生代码插件通常会写到一些嵌入到页面中的图形框架中)。</target>
        </trans-unit>
        <trans-unit id="fdf95eca9f8b1d2244f7b2cd723ef976ae32c350" translate="yes" xml:space="preserve">
          <source>Jsp page java script function to submit data to servlet with two variable firstName and lastName:</source>
          <target state="translated">Jsp页面的java脚本函数将数据提交到servlet中的两个变量firstName和lastName。</target>
        </trans-unit>
        <trans-unit id="b4b9557d228a01bca5554f1ab7acdcd854b66199" translate="yes" xml:space="preserve">
          <source>Kickoff example returning &lt;code&gt;String&lt;/code&gt; as plain text</source>
          <target state="translated">启动示例返回 &lt;code&gt;String&lt;/code&gt; 为纯文本</target>
        </trans-unit>
        <trans-unit id="5179696436ccb32906957d8a57c587c03f4caab2" translate="yes" xml:space="preserve">
          <source>Manually sending JSON object to servlet</source>
          <target state="translated">手动发送JSON对象到servlet</target>
        </trans-unit>
        <trans-unit id="01e4e4e67b46ca3b3e78d00525ca2700a9c99b3a" translate="yes" xml:space="preserve">
          <source>Manually sending request parameters to servlet</source>
          <target state="translated">手动向servlet发送请求参数</target>
        </trans-unit>
        <trans-unit id="dde61058e584e3bdf27674e7b20f4195924c8af5" translate="yes" xml:space="preserve">
          <source>Map this servlet on an URL pattern of &lt;code&gt;/someservlet&lt;/code&gt; or &lt;code&gt;/someservlet/*&lt;/code&gt; as below (obviously, the URL pattern is free to your choice, but you'd need to alter the &lt;code&gt;someservlet&lt;/code&gt; URL in JS code examples over all place accordingly):</source>
          <target state="translated">将此servlet映射到 &lt;code&gt;/someservlet&lt;/code&gt; 或 &lt;code&gt;/someservlet/*&lt;/code&gt; 的URL模式，如下所示（显然，URL模式是您自由选择的，但是您需要相应地在JS代码示例中的所有位置上更改 &lt;code&gt;someservlet&lt;/code&gt; URL）：</target>
        </trans-unit>
        <trans-unit id="c56e5df70c3ac3a6c3973476fdf82139c44069da" translate="yes" xml:space="preserve">
          <source>Normally you cant update a page from a servlet. Client (browser) has to request an update. Eiter client loads a whole new page or it requests an update to a part of an existing page. This technique is called Ajax.</source>
          <target state="translated">通常情况下,你不能通过servlet更新一个页面。客户端(浏览器)必须请求更新。Eiter客户端加载一个新的页面,或者请求更新现有页面的一部分。这种技术被称为Ajax。</target>
        </trans-unit>
        <trans-unit id="bd39a665cfc0865af33aa13bcfa362533cc6e53c" translate="yes" xml:space="preserve">
          <source>Note that this doesn't change the URL as enduser sees in browser's address bar. So there are issues with bookmarkability. Therefore, it's much better to just return an &quot;instruction&quot; for JavaScript/jQuery to perform a redirect instead of returning the whole content of the redirected page. E.g. by returning a boolean, or an URL.</source>
          <target state="translated">注意,这并不能改变终端用户在浏览器地址栏中看到的URL。因此,这就存在着书签的可读性问题。因此,只返回一个 &quot;指令 &quot;让JavaScriptjQuery执行重定向,而不是返回被重定向页面的整个内容,这样做会更好。例如,通过返回一个布尔值,或者一个URL。</target>
        </trans-unit>
        <trans-unit id="22feb91f5c22ed94258e3f081aa26bfc5c037905" translate="yes" xml:space="preserve">
          <source>Now open the &lt;a href=&quot;http://localhost:8080/context/test.jsp&quot;&gt;http://localhost:8080/context/test.jsp&lt;/a&gt; in the browser and press the button. You'll see that the content of the div get updated with the servlet response.</source>
          <target state="translated">现在，在浏览器中打开&lt;a href=&quot;http://localhost:8080/context/test.jsp&quot;&gt;http：// localhost：8080 / context / test.jsp&lt;/a&gt;并按按钮。 您将看到div的内容随servlet响应一起更新。</target>
        </trans-unit>
        <trans-unit id="cfd2f0fb386862ba0d1aa2adf79265c37a9d89c7" translate="yes" xml:space="preserve">
          <source>Or, when you're not on a Servlet 3.0 compatible container yet (Tomcat 7, Glassfish 3, JBoss AS 6, etc or newer), then map it in &lt;code&gt;web.xml&lt;/code&gt; the old fashioned way (see also &lt;a href=&quot;https://stackoverflow.com/tags/servlets/info&quot;&gt;our Servlets wiki page&lt;/a&gt;):</source>
          <target state="translated">或者，如果您还没有使用与Servlet 3.0兼容的容器（Tomcat 7，Glassfish 3，JBoss AS 6等，或更高版本），则可以通过老式方法将其映射到 &lt;code&gt;web.xml&lt;/code&gt; 中（另请参见&lt;a href=&quot;https://stackoverflow.com/tags/servlets/info&quot;&gt;我们的Servlets Wiki页面&lt;/a&gt; ）：</target>
        </trans-unit>
        <trans-unit id="26171874502aeafcb87d300f5bedd28651eb82f6" translate="yes" xml:space="preserve">
          <source>Returning &lt;code&gt;List&amp;lt;Entity&amp;gt;&lt;/code&gt; as JSON</source>
          <target state="translated">返回 &lt;code&gt;List&amp;lt;Entity&amp;gt;&lt;/code&gt; 作为JSON</target>
        </trans-unit>
        <trans-unit id="5f03764f3bd2c86ee26d6b433ce4069420e16f5b" translate="yes" xml:space="preserve">
          <source>Returning &lt;code&gt;List&amp;lt;Entity&amp;gt;&lt;/code&gt; as XML</source>
          <target state="translated">以XML返回 &lt;code&gt;List&amp;lt;Entity&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3688b821c329699e6f9a80ff22369c56a5beac00" translate="yes" xml:space="preserve">
          <source>Returning &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; as JSON</source>
          <target state="translated">返回 &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; 作为JSON</target>
        </trans-unit>
        <trans-unit id="679fcf8af507bcac5a23e4ab406f76e65e4b3b8d" translate="yes" xml:space="preserve">
          <source>Returning &lt;code&gt;Map&amp;lt;String, String&amp;gt;&lt;/code&gt; as JSON</source>
          <target state="translated">将 &lt;code&gt;Map&amp;lt;String, String&amp;gt;&lt;/code&gt; 返回为JSON</target>
        </trans-unit>
        <trans-unit id="371a87eafb4de078ff674d69a5a89c186532eb49" translate="yes" xml:space="preserve">
          <source>See also:</source>
          <target state="translated">也见。</target>
        </trans-unit>
        <trans-unit id="1a93f0fc4e88ee9727bc2cea774ad68b33c0e53b" translate="yes" xml:space="preserve">
          <source>Sending a redirect from servlet</source>
          <target state="translated">从servlet发送一个重定向</target>
        </trans-unit>
        <trans-unit id="acb0ba47f04915e496a795c1972528f72461d66f" translate="yes" xml:space="preserve">
          <source>Servlet to read data send back to jsp in xml format ( You could use text as well. Just you need to change response content to text and render data on javascript function.)</source>
          <target state="translated">Servlet读取数据以xml格式发送回jsp(你也可以使用文本。只是你需要将响应内容改为文本,并在javascript函数上渲染数据。)</target>
        </trans-unit>
        <trans-unit id="826f726c00ea26b16c7091f335fee7e5d8de8abb" translate="yes" xml:space="preserve">
          <source>Since it's pretty a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/AJAX/Getting_Started&quot;&gt;tedious&lt;/a&gt; work to make it to work across all browsers (especially Internet Explorer versus others), there are plenty of JavaScript libraries out which simplifies this in single functions and covers as many as possible browser-specific bugs/quirks under the hoods, such as &lt;a href=&quot;http://jquery.com&quot;&gt;jQuery&lt;/a&gt;, &lt;a href=&quot;http://www.prototypejs.org/&quot;&gt;Prototype&lt;/a&gt;, &lt;a href=&quot;http://mootools.net/&quot;&gt;Mootools&lt;/a&gt;. Since jQuery is most popular these days, I'll use it in the below examples.</source>
          <target state="translated">由于要使其能够在所有浏览器（尤其是Internet Explorer与其他浏览器）上进行是一项&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/AJAX/Getting_Started&quot;&gt;繁琐的&lt;/a&gt;工作，因此有大量的JavaScript库简化了单个功能，并涵盖了尽可能多的特定于浏览器的错误/怪癖。 ，例如&lt;a href=&quot;http://jquery.com&quot;&gt;jQuery&lt;/a&gt; ， &lt;a href=&quot;http://www.prototypejs.org/&quot;&gt;Prototype&lt;/a&gt;和&lt;a href=&quot;http://mootools.net/&quot;&gt;Mootools&lt;/a&gt; 。 由于jQuery目前最流行，因此我将在以下示例中使用它。</target>
        </trans-unit>
        <trans-unit id="82ec09f975dd38e549357b84053114b13839f782" translate="yes" xml:space="preserve">
          <source>That code is typically javascript that is embedded in or linked from the HTML page, hence the AJAX suggestion.  (In fact, if we assume that the updated text comes from the server via an HTTP request, this is classic AJAX.)</source>
          <target state="translated">这些代码通常是嵌入到HTML页面中或从HTML页面中链接的javascript代码,因此建议使用AJAX。(事实上,如果我们假设更新的文本来自于服务器通过HTTP请求,这就是典型的AJAX。)</target>
        </trans-unit>
        <trans-unit id="c28f33370f7556ae09d69388971724ff1b8b65c1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://malsup.com/jquery/form/&quot;&gt;jQuery Form plugin&lt;/a&gt; does less or more the same as above jQuery example, but it has additional transparent support for &lt;code&gt;multipart/form-data&lt;/code&gt; forms as required by file uploads.</source>
          <target state="translated">&lt;a href=&quot;http://malsup.com/jquery/form/&quot;&gt;jQuery Form插件的&lt;/a&gt;功能与上述jQuery示例差不多，但它具有文件上传所需的对 &lt;code&gt;multipart/form-data&lt;/code&gt; 表单的额外透明支持。</target>
        </trans-unit>
        <trans-unit id="13111950dc911470d158617cc00323a3fb10b09b" translate="yes" xml:space="preserve">
          <source>The JS code:</source>
          <target state="translated">的JS代码。</target>
        </trans-unit>
        <trans-unit id="60f85f5144e41851339584a99a25400fd02624ab" translate="yes" xml:space="preserve">
          <source>The JSP code (note: if you put the &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; in a &lt;code&gt;&amp;lt;jsp:include&amp;gt;&lt;/code&gt;, it may be reusable elsewhere in a non-ajax response):</source>
          <target state="translated">JSP代码（注意：如果将 &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; 放在 &lt;code&gt;&amp;lt;jsp:include&amp;gt;&lt;/code&gt; 中 ，则它可以在非ajax响应中的其他地方重用）：</target>
        </trans-unit>
        <trans-unit id="82bcb8bc50271a9fe41b3d0c7f74b3983ec746ae" translate="yes" xml:space="preserve">
          <source>The right way to update the page currently displayed in the user's browser (without reloading it) is to have some code executing in the browser update the page's DOM.</source>
          <target state="translated">要更新用户浏览器中当前显示的页面(不需要重新加载),正确的方法是让浏览器中执行一些代码来更新页面的DOM。</target>
        </trans-unit>
        <trans-unit id="81f36ba7704aff0b7ff66243392e07ee62fa4339" translate="yes" xml:space="preserve">
          <source>The same &lt;code&gt;doPost()&lt;/code&gt; method as shown here above can be reused. Do note that above syntax also works with &lt;code&gt;$.get()&lt;/code&gt; in jQuery and &lt;code&gt;doGet()&lt;/code&gt; in servlet.</source>
          <target state="translated">可以重用与上述相同的 &lt;code&gt;doPost()&lt;/code&gt; 方法。 请注意，上述语法也可用于jQuery中的 &lt;code&gt;$.get()&lt;/code&gt; 和servlet中的 &lt;code&gt;doGet()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ec4192092629e132db0176d50836c910fcf6d4f8" translate="yes" xml:space="preserve">
          <source>Then, in order to process the JSON object in the servlet which isn't being sent as individual request parameters but as a whole JSON string the above way, you only need to manually parse the request body using a JSON tool instead of using &lt;code&gt;getParameter()&lt;/code&gt; the usual way. Namely, servlets don't support &lt;code&gt;application/json&lt;/code&gt; formatted requests, but only &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; or &lt;code&gt;multipart/form-data&lt;/code&gt; formatted requests. Gson also supports parsing a JSON string into a JSON object.</source>
          <target state="translated">然后，为了以上述方式处理不是作为单独的请求参数而是作为整个JSON字符串发送的Servlet中的JSON对象，您只需要使用JSON工具手动解析请求主体，而不是使用 &lt;code&gt;getParameter()&lt;/code&gt; 通常的方法。 即，小服务 &lt;code&gt;application/json&lt;/code&gt; 不支持应用程序/ json格式的请求，而仅支持应用 &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; 或多 &lt;code&gt;multipart/form-data&lt;/code&gt; 格式的请求。 Gson还支持将JSON字符串解析为JSON对象。</target>
        </trans-unit>
        <trans-unit id="89fd0d601f377a83a71d1cdde17c69e5d81a1961" translate="yes" xml:space="preserve">
          <source>Using bootstrap multi select</source>
          <target state="translated">使用bootstrap多选</target>
        </trans-unit>
        <trans-unit id="2a9a8c670858d784d66a1602187d7c2c90e1a17b" translate="yes" xml:space="preserve">
          <source>Whenever I print something inside the servlet and call it by the webbrowser, it returns a new page containing that text. Is there a way to print the text in the current page using Ajax?</source>
          <target state="translated">每当我在servlet中打印一些东西并被webbrowser调用时,它会返回一个包含该文本的新页面。有没有一种方法可以使用Ajax打印当前页面中的文字?</target>
        </trans-unit>
        <trans-unit id="b2688f5607d6b932d92c51a110809c5f7b5681ba" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;http://www.hunlock.com/blogs/Mastering_JSON_%28_JavaScript_Object_Notation_%29&quot;&gt;JSON&lt;/a&gt; instead of plaintext as response format you can even get some steps further. It allows for more dynamics. First, you'd like to have a tool to convert between Java objects and JSON strings. There are plenty of them as well (see the bottom of &lt;a href=&quot;http://json.org/&quot;&gt;this page&lt;/a&gt; for an overview). My personal favourite is &lt;a href=&quot;http://code.google.com/p/google-gson/&quot;&gt;Google Gson&lt;/a&gt;. Download and put its JAR file in &lt;code&gt;/WEB-INF/lib&lt;/code&gt; folder of your webapplication.</source>
          <target state="translated">使用&lt;a href=&quot;http://www.hunlock.com/blogs/Mastering_JSON_%28_JavaScript_Object_Notation_%29&quot;&gt;JSON&lt;/a&gt;而不是纯文本作为响应格式，您甚至可以进一步采取一些措施。 它允许更多的动态。 首先，您想要一个工具来在Java对象和JSON字符串之间进行转换。 也有很多（请参见&lt;a href=&quot;http://json.org/&quot;&gt;本页&lt;/a&gt;底部的概述）。 我个人最喜欢的是&lt;a href=&quot;http://code.google.com/p/google-gson/&quot;&gt;Google Gson&lt;/a&gt; 。 下载其JAR文件并将其放在 &lt;code&gt;/WEB-INF/lib&lt;/code&gt; 程序的/ WEB-INF / lib文件夹中。</target>
        </trans-unit>
        <trans-unit id="d09487967ad994c6f9ec09684e86a745ebd6f9e7" translate="yes" xml:space="preserve">
          <source>You can in the servlet distinguish between normal requests and ajax requests as below:</source>
          <target state="translated">你可以在servlet中区分普通请求和ajax请求,如下图所示。</target>
        </trans-unit>
        <trans-unit id="6488cbad5e8c23f7a9f7b7b89ab6dd45d6c58009" translate="yes" xml:space="preserve">
          <source>You can progressively enhance it with ajax as below:</source>
          <target state="translated">你可以用ajax来逐步增强它,如下图所示。</target>
        </trans-unit>
        <trans-unit id="b976f30c066f9d428daf94d5a76c8335226ccf0a" translate="yes" xml:space="preserve">
          <source>You can use jQuery &lt;a href=&quot;https://api.jquery.com/serialize/&quot;&gt;&lt;code&gt;$.serialize()&lt;/code&gt;&lt;/a&gt; to easily ajaxify existing POST forms without fiddling around with collecting and passing the individual form input parameters. Assuming an existing form which works perfectly fine without JavaScript/jQuery (and thus degrades gracefully when enduser has JavaScript disabled):</source>
          <target state="translated">您可以使用jQuery &lt;a href=&quot;https://api.jquery.com/serialize/&quot;&gt; &lt;code&gt;$.serialize()&lt;/code&gt; &lt;/a&gt;轻松地将现有的POST表单废除，而无需费心收集和传递各个表单输入参数。 假设现有形式在没有JavaScript / jQuery的情况下也能很好地工作（因此，当最终用户禁用JavaScript时，它会优雅地降级）：</target>
        </trans-unit>
        <trans-unit id="ca21397eada293cac22191e78e91633a316e1244" translate="yes" xml:space="preserve">
          <source>You'll by now probably realize why XML is so much more powerful than JSON for the particular purpose of updating a HTML document using Ajax. JSON is funny, but after all generally only useful for so-called &quot;public web services&quot;. MVC frameworks like &lt;a href=&quot;https://stackoverflow.com/tags/jsf/info&quot;&gt;JSF&lt;/a&gt; use XML under the covers for their ajax magic.</source>
          <target state="translated">您现在可能已经意识到，出于使用Ajax更新HTML文档的特定目的，为什么XML比JSON强大得多。 JSON很有趣，但毕竟通常只对所谓的&amp;ldquo;公共Web服务&amp;rdquo;有用。 像&lt;a href=&quot;https://stackoverflow.com/tags/jsf/info&quot;&gt;JSF&lt;/a&gt;这样的MVC框架在其ajax魔术的底层使用XML。</target>
        </trans-unit>
        <trans-unit id="8fcd25a39d2037183044a8897e9a5333d727fded" translate="yes" xml:space="preserve">
          <source>with</source>
          <target state="translated">with</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
