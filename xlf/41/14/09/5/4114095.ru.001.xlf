<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://stackoverflow.com/questions/4114095">
    <body>
      <group id="4114095">
        <trans-unit id="e04a70a050e0184c775c34cc5b81f69d06b5dbc4" translate="yes" xml:space="preserve">
          <source>&quot;Move&quot; your head back to the desired commit.</source>
          <target state="translated">&quot;Двигай&quot; голову обратно к желаемому договору.</target>
        </trans-unit>
        <trans-unit id="4148ca3446d8d4e6a32759ec85d980d2895c84c8" translate="yes" xml:space="preserve">
          <source>(The &lt;code&gt;--no-commit&lt;/code&gt; flag lets git revert all the commits at once- otherwise you'll be prompted for a message for each commit in the range, littering your history with unnecessary new commits.)</source>
          <target state="translated">(Флаг &lt;code&gt;--no-commit&lt;/code&gt; позволяет git отменить все коммиты одновременно, в противном случае вам будет предложено ввести сообщение для каждого коммита в диапазоне, засоряя вашу историю ненужными новыми коммитами.)</target>
        </trans-unit>
        <trans-unit id="e15d04330bbe740f6a74404ee089d55347802fef" translate="yes" xml:space="preserve">
          <source>(to check COMMIT_ID use &lt;code&gt;git log&lt;/code&gt;)</source>
          <target state="translated">(для проверки COMMIT_ID используйте &lt;code&gt;git log&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="0564dd57a84c02e672779732094c56edac717756" translate="yes" xml:space="preserve">
          <source>** Note:** As mentioned in comments don't do this if you're sharing your branch with other people who have copies of the old commits</source>
          <target state="translated">**Замечание:**Как упоминалось в комментариях,не делайте этого,если вы делитесь своей веткой с другими людьми,у которых есть копии старых коммитов.</target>
        </trans-unit>
        <trans-unit id="f0c56341861d3a785e407509c045330522d22834" translate="yes" xml:space="preserve">
          <source>--hard</source>
          <target state="translated">--hard</target>
        </trans-unit>
        <trans-unit id="39cd6d54ca024c3d25abf1100015175fb07ed816" translate="yes" xml:space="preserve">
          <source>--soft</source>
          <target state="translated">--soft</target>
        </trans-unit>
        <trans-unit id="3170ffa737d53dfa1e49c230fc0deda33fe5f900" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://stackoverflow.com/a/4114122/456814&quot;&gt;Jefromi's solutions&lt;/a&gt; are definitely the best ones, and you should definitely use them. However, for the sake of completeness, I also wanted to show these other alternative solutions that can also be used to revert a commit (in the sense that you &lt;strong&gt;create a new commit that undoes changes in previous commit&lt;/strong&gt;, just like what &lt;code&gt;git revert&lt;/code&gt; does).</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/a/4114122/456814&quot;&gt;Решения Jefromi,&lt;/a&gt; безусловно, самые лучшие, и вам обязательно стоит их использовать. Однако для полноты картины я также хотел показать эти другие альтернативные решения, которые также можно использовать для отмены фиксации (в том смысле, что вы &lt;strong&gt;создаете новую фиксацию, которая отменяет изменения в предыдущей фиксации&lt;/strong&gt; , так же, как это делает &lt;code&gt;git revert&lt;/code&gt; ). ,</target>
        </trans-unit>
        <trans-unit id="7e7010d06d8ef75028c81045c4e8e665e47400c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;--soft&lt;/code&gt; indicates that the uncommitted files should be retained as working files opposed to &lt;code&gt;--hard&lt;/code&gt; which would discard them.</source>
          <target state="translated">&lt;code&gt;--soft&lt;/code&gt; указывает, что незафиксированные файлы должны быть сохранены как рабочие файлы, а не &lt;code&gt;--hard&lt;/code&gt; , который их отбрасывает.</target>
        </trans-unit>
        <trans-unit id="af9a83c35282ccf6b38d1f91d218020d39a4319e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HEAD&lt;/code&gt; is simply a reference to the current commit (latest) on the current branch. There can only be a single &lt;code&gt;HEAD&lt;/code&gt; at any given time (excluding &lt;code&gt;git worktree&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;HEAD&lt;/code&gt; - это просто ссылка на текущий коммит (последний) в текущей ветке. В любой момент времени может быть только один &lt;code&gt;HEAD&lt;/code&gt; (исключая &lt;code&gt;git worktree&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="c9377808b29b1b2885d71fd864cfb1eaf22a08f4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HEAD~1&lt;/code&gt; is the last commit.  If you want to rollback 3 commits you could use &lt;code&gt;HEAD~3&lt;/code&gt;.  If you want to rollback to a specific revision number, you could also do that using its SHA hash.</source>
          <target state="translated">&lt;code&gt;HEAD~1&lt;/code&gt; - последний коммит. Если вы хотите откатить 3 коммита, вы можете использовать &lt;code&gt;HEAD~3&lt;/code&gt; . Если вы хотите выполнить откат до определенного номера ревизии, вы также можете сделать это, используя его хэш SHA.</target>
        </trans-unit>
        <trans-unit id="8362fb05761b16c13e670545438dd3cbe76732ed" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Sample:&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Sample:&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="43d0a6c03da527ec12858c306ab6555e6caf9088" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;&lt;a href=&quot;https://git-scm.com/docs/git-reset&quot;&gt;&lt;code&gt;git reset HEAD --hard &amp;lt;commit_id&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;&lt;a href=&quot;https://git-scm.com/docs/git-reset&quot;&gt; &lt;code&gt;git reset HEAD --hard &amp;lt;commit_id&amp;gt;&lt;/code&gt; &lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5941d87399c11b4c01ccb41bbd0ab033fe969fd0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;&lt;code&gt;First of all what is HEAD?&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt; &lt;code&gt;First of all what is HEAD?&lt;/code&gt; &lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d1253bf83df98a1b2c7a29a783edb0908bb3dd47" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;&lt;code&gt;detached HEAD&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt; &lt;code&gt;detached HEAD&lt;/code&gt; &lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="19f54112a4fcd0d690e93b53da0c501fa0fff714" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Caution!&lt;/strong&gt; This command can cause losing commit history, if user put the wrong commit mistakenly. Always have en extra backup of your git some
  where else just in case if you do mistakes, than you are a bit safer.
  :)</source>
          <target state="translated">&lt;strong&gt;Внимание!&lt;/strong&gt; Эта команда может привести к потере истории коммитов, если пользователь ошибочно добавил неверный коммит. Всегда имейте дополнительную резервную копию вашего git где-нибудь еще на всякий случай, если вы делаете ошибки, чем вы немного безопаснее. :)</target>
        </trans-unit>
        <trans-unit id="785ae5f8e57e7bb1825787323ff5e8191b3b952c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Every time the HEAD is modified there will be a new entry in the &lt;code&gt;reflog&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Каждый раз, когда &lt;code&gt;reflog&lt;/code&gt; в reflog будет новая запись&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d6859536c2cfa6c9f9a2889b1c0dd1aa5ed99eb1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Explanation:&lt;/strong&gt; using &lt;code&gt;git reset&lt;/code&gt;, you can reset to a specific state. It's common using it with a commit hash as you see above.</source>
          <target state="translated">&lt;strong&gt;Объяснение:&lt;/strong&gt; используя &lt;code&gt;git reset&lt;/code&gt; , вы можете сбросить до определенного состояния. Обычно вы используете это с хэшем коммита, как вы видели выше.</target>
        </trans-unit>
        <trans-unit id="eb182cc53494f3ad8a6ff778131dffe11ebe85c5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;OK,&lt;/strong&gt; going back to a previous commit in Git is quite easy...</source>
          <target state="translated">&lt;strong&gt;Хорошо,&lt;/strong&gt; вернуться к предыдущему коммиту в Git довольно просто ...</target>
        </trans-unit>
        <trans-unit id="7e772e2042df02f4ac5a238212782b6d4443ff7d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;QUICK AND DIRTY&lt;/strong&gt;: depending on the circumstances, quick and dirty may in fact be very GOOD. What my solution here does is &lt;strong&gt;NOT&lt;/strong&gt; replace irreversibly the files you have in your working directory with files hauled up/extracted from the depths of the git repository lurking beneath your .git/ directory using fiendishly clever and diabolically powerful git commands, of which there are many. &lt;strong&gt;YOU DO NOT HAVE TO DO SUCH DEEP-SEA DIVING TO RECOVER what may appear to be a disastrous situation, and attempting to do so without sufficient expertise may prove fatal&lt;/strong&gt;.</source>
          <target state="translated">Быстро и грязно: в зависимости от обстоятельств, быстрое и грязное может быть очень хорошим. Что мое решение здесь делает, так это &lt;strong&gt;НЕ&lt;/strong&gt; необратимо заменяет файлы, которые у вас есть в вашем рабочем каталоге, на файлы, извлеченные / извлеченные из глубины репозитория git, скрывающиеся под вашим каталогом .git /, используя чертовски умные и дьявольски мощные команды git, из которых есть много. &lt;strong&gt;ВЫ НЕ ДОЛЖНЫ ДЕЛАТЬ ТАКОЕ ГЛУБОКОЕ ДЕЙСТВИЕ, ЧТОБЫ ВОССТАНОВИТЬ то, что может показаться катастрофической ситуацией, и попытка сделать это без достаточного опыта может оказаться фатальной&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="0a648cd0606cca5d79438d4f156e8c36af2fbb7f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;UPDATE&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;UPDATE&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7878cb7ef8c06d6486adcc9797b87c6465365093" translate="yes" xml:space="preserve">
          <source>A few options on how to recover from a detached HEAD:</source>
          <target state="translated">Несколько вариантов,как восстановиться от отсоединенной HEAD:</target>
        </trans-unit>
        <trans-unit id="4dfe83e406d11d3436d23ab86d77fdd7d265e9d1" translate="yes" xml:space="preserve">
          <source>After all the changes, when you push all these commands, you might have to use:</source>
          <target state="translated">После всех изменений,когда вы нажмете на все эти команды,вам,возможно,придется использовать:</target>
        </trans-unit>
        <trans-unit id="827bbaa3663448c6ac82349b74e8b6dbac2840f5" translate="yes" xml:space="preserve">
          <source>Also from the comments, if you wanted a less 'ballzy' method you could use</source>
          <target state="translated">Также из комментариев,если вам нужен менее &quot;бальзамный&quot; метод,вы можете использовать</target>
        </trans-unit>
        <trans-unit id="3902dbcd464f156f54bd98d40c88fd9ece998663" translate="yes" xml:space="preserve">
          <source>Alternative 1: Hard and Soft Resets</source>
          <target state="translated">Альтернатива 1:Жесткий и мягкий сбросы</target>
        </trans-unit>
        <trans-unit id="f7440ea2bf2d9cd756dc173beb3fbb2c0b96d8c4" translate="yes" xml:space="preserve">
          <source>Alternative 2: Delete the Current Tree and Replace with the New One</source>
          <target state="translated">Альтернатива 2:Удалить текущее дерево и заменить на новое.</target>
        </trans-unit>
        <trans-unit id="340d66c4fa37dbe035c6408a713ee2d51dda30c1" translate="yes" xml:space="preserve">
          <source>And not only &lt;code&gt;git push&lt;/code&gt;.</source>
          <target state="translated">И не только &lt;code&gt;git push&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="11661e7c79c2472a2ccca3cd18e34e3b89b601de" translate="yes" xml:space="preserve">
          <source>As your commits are pushed remotely, you need to remove them. Let me assume your branch is &lt;em&gt;develop&lt;/em&gt; and it is pushed over &lt;em&gt;origin&lt;/em&gt;.</source>
          <target state="translated">Поскольку ваши коммиты передаются удаленно, вам нужно их удалить. Позвольте мне предположить, что ваша ветвь &lt;em&gt;развивается,&lt;/em&gt; и она отталкивается от &lt;em&gt;происхождения&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="f1cbde60a0009c9d0edd5c3e0172fa943911e90e" translate="yes" xml:space="preserve">
          <source>Assuming you're talking about master and on that respective branch (that said, this could be any working branch you're concerned with):</source>
          <target state="translated">Предположим,что вы говорите о мастере и о соответствующей ветке (при этом это может быть любая работающая ветка,которая вас интересует):</target>
        </trans-unit>
        <trans-unit id="deb1eef83454f8b7a428db302e61bd2120a598c0" translate="yes" xml:space="preserve">
          <source>At this point you can create a branch and start to work from this point on:</source>
          <target state="translated">В этот момент вы можете создать ветку и начать работу с этой точки:</target>
        </trans-unit>
        <trans-unit id="92e0a8b083d31eeec3fb7a54b8954e484fe4bac4" translate="yes" xml:space="preserve">
          <source>Be careful with this flag. It resets the working tree and all changes to tracked files and all will be gone!</source>
          <target state="translated">Осторожнее с этим флагом.Он сбрасывает рабочее дерево и все изменения в отслеживаемых файлах и все пропадут!</target>
        </trans-unit>
        <trans-unit id="7b8436733b5d2fc8b339e76308ff8f0bce1ffb29" translate="yes" xml:space="preserve">
          <source>Before answering let's add some background, explaining what this &lt;code&gt;HEAD&lt;/code&gt; is.</source>
          <target state="translated">Прежде чем ответить, давайте добавим некоторую предысторию, объясняющую, что это за &lt;code&gt;HEAD&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="34948cca5fa253149fae12b8b2bf9e121701e283" translate="yes" xml:space="preserve">
          <source>Better to use revert (see other answers) than reset. 
If you're a one man team then it probably doesn't matter.</source>
          <target state="translated">Лучше использовать возврат (см.другие ответы),чем сброс.Если вы команда из одного человека,то это,вероятно,не имеет значения.</target>
        </trans-unit>
        <trans-unit id="1fb7af211b3dbdd61026144dfc055b0281908607" translate="yes" xml:space="preserve">
          <source>But as you see the difference is using the two flags &lt;code&gt;--soft&lt;/code&gt; and &lt;code&gt;--hard&lt;/code&gt;, by default &lt;code&gt;git reset&lt;/code&gt; using &lt;code&gt;--soft&lt;/code&gt; flag, but it's a good practice always using the flag, I explain each flag:</source>
          <target state="translated">Но, как вы видите, разница заключается в использовании двух флагов &lt;code&gt;--soft&lt;/code&gt; и &lt;code&gt;--hard&lt;/code&gt; , по умолчанию &lt;code&gt;git reset&lt;/code&gt; с использованием флага &lt;code&gt;--soft&lt;/code&gt; , но рекомендуется всегда использовать этот флаг, я объясняю каждый флаг:</target>
        </trans-unit>
        <trans-unit id="3a40a3783dc2f06f1af89b954e94f1911bb876ad" translate="yes" xml:space="preserve">
          <source>Check &lt;code&gt;git log&lt;/code&gt; to verify your changes.</source>
          <target state="translated">Проверьте &lt;code&gt;git log&lt;/code&gt; , чтобы проверить ваши изменения.</target>
        </trans-unit>
        <trans-unit id="08f74d88ac0c5925d8abd0552fd45357483210d4" translate="yes" xml:space="preserve">
          <source>Copy the whole directory and call it something else, like &quot;my project - copy&quot;. Assuming your git repository (&quot;repo&quot;) files are under the &quot;my project&quot; directory (the default place for them, under a directory called &quot;.git&quot;), you will now have copied both your work files and your repo files.</source>
          <target state="translated">Скопируйте весь каталог и назовите его как-нибудь по-другому,например &quot;мой проект-копируй&quot;.Предполагая,что ваши файлы git-репозитория (&quot;repo&quot;)находятся под директорией &quot;мой проект&quot; (место по умолчанию,под директорией,называемой &quot;.git&quot;),вы скопировали как ваши рабочие файлы,так и файлы репо.</target>
        </trans-unit>
        <trans-unit id="b8dccbee136be960880188a55bdb68eb079a6375" translate="yes" xml:space="preserve">
          <source>Create a &lt;a href=&quot;http://en.wikipedia.org/wiki/Bash_%28Unix_shell%29&quot;&gt;Bash&lt;/a&gt; shell script to revert each of them:</source>
          <target state="translated">Создайте сценарий оболочки &lt;a href=&quot;http://en.wikipedia.org/wiki/Bash_%28Unix_shell%29&quot;&gt;Bash,&lt;/a&gt; чтобы вернуть каждый из них:</target>
        </trans-unit>
        <trans-unit id="02bd119e81cc5355f078fe13af30b2da39d568b8" translate="yes" xml:space="preserve">
          <source>Credits go to a similar Stack Overflow question, &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/1895059/git-revert-to-a-commit-by-sha-hash&quot;&gt;Revert to a commit by a SHA hash in Git?&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">Кредиты переходят к аналогичному вопросу переполнения стека. &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/1895059/git-revert-to-a-commit-by-sha-hash&quot;&gt;Вернуть ли к фиксации хэш SHA в Git?&lt;/a&gt;&lt;/em&gt; ,</target>
        </trans-unit>
        <trans-unit id="5d141bd57bfd683cbbec69826d5890d110b047df" translate="yes" xml:space="preserve">
          <source>Do this in the directory &quot;my project&quot;:</source>
          <target state="translated">Сделайте это в каталоге &quot;мой проект&quot;:</target>
        </trans-unit>
        <trans-unit id="378126339503a68fbaa8c750f1f8573ba4cef3c8" translate="yes" xml:space="preserve">
          <source>Especially if, for example, this is a desperate situation and you're a newbie with Git!</source>
          <target state="translated">Особенно,если,например,это отчаянная ситуация,а ты новичок с Git'ом!</target>
        </trans-unit>
        <trans-unit id="659226488a54232bdf101d9941ce68c9bf52d0fc" translate="yes" xml:space="preserve">
          <source>Extra Alternatives to Jefromi's Solutions</source>
          <target state="translated">Дополнительные альтернативы решениям Jefromi</target>
        </trans-unit>
        <trans-unit id="e2691319c7272d9172f6c142db095dd9d2ef86e8" translate="yes" xml:space="preserve">
          <source>For rollback (or to revert):</source>
          <target state="translated">Для отката (или возврата):</target>
        </trans-unit>
        <trans-unit id="b678c79ecbee0d37c6f6be648ab4d24e89b21a6f" translate="yes" xml:space="preserve">
          <source>Git is a brilliant creation but absolutely no-one is able to just &quot;pick it up on the fly&quot;: also people who try to explain it &lt;strong&gt;far too often&lt;/strong&gt; assume prior knowledge of other VCS [Version Control Systems] and delve far too deep far too soon, and commit other crimes, like using interchangeable terms for &quot;checking out&quot; - in ways which sometimes appear almost calculated to confuse a beginner.</source>
          <target state="translated">Git - блестящее творение, но абсолютно никто не может просто &amp;laquo;поднять его на лету&amp;raquo;: также люди, которые &lt;strong&gt;слишком часто&lt;/strong&gt; пытаются объяснить это, предполагают, что они уже знакомы с другими VCS [системами контроля версий] и слишком глубоко вникают слишком рано, и совершать другие преступления, такие как использование взаимозаменяемых терминов для &amp;laquo;проверки&amp;raquo; - способами, которые иногда кажутся почти рассчитанными, чтобы запутать начинающего</target>
        </trans-unit>
        <trans-unit id="bfb8913d15cf59c5da03d05deec15a29efbd97e3" translate="yes" xml:space="preserve">
          <source>Hard delete unpublished commits</source>
          <target state="translated">Жесткое удаление неопубликованных коммитов</target>
        </trans-unit>
        <trans-unit id="d37dc1a343e485e372ab88fd5766ed464acce0a7" translate="yes" xml:space="preserve">
          <source>Here is a &lt;strong&gt;much simpler&lt;/strong&gt; way to go back to a previous commit (and have it in an uncommited state, to do with it whatever you like):</source>
          <target state="translated">Вот &lt;strong&gt;гораздо более простой&lt;/strong&gt; способ вернуться к предыдущему коммиту (и иметь его в незафиксированном состоянии, чтобы делать с ним что угодно):</target>
        </trans-unit>
        <trans-unit id="215d7a8e885045e594e831263c3e9ba11f717afe" translate="yes" xml:space="preserve">
          <source>How do I revert a Git repository to a previous commit</source>
          <target state="translated">Как вернуть Git-репозиторий к предыдущему коммиту.</target>
        </trans-unit>
        <trans-unit id="f4b9e60697411c2b40df2355799c33b516b6278b" translate="yes" xml:space="preserve">
          <source>How do I revert from my current state to a snapshot made on a certain commit?</source>
          <target state="translated">Как мне вернуться из текущего состояния на снимок,сделанный на определенном коммите?</target>
        </trans-unit>
        <trans-unit id="9819e65d810cdde62bd17e39442b700ad932d75c" translate="yes" xml:space="preserve">
          <source>How do I revert to the commit from November 3, i.e. commit &lt;code&gt;0d1d7fc&lt;/code&gt;?</source>
          <target state="translated">Как мне вернуться к &lt;code&gt;0d1d7fc&lt;/code&gt; с 3 ноября, т.е. коммит 0d1d7fc ?</target>
        </trans-unit>
        <trans-unit id="a0bc944d8d865d8ba6bc35d44c2edb19d282e0b7" translate="yes" xml:space="preserve">
          <source>How to move HEAD back to a previous location? (Detached head)</source>
          <target state="translated">Как переместить HEAD обратно в предыдущее место? (Отделенная голова)</target>
        </trans-unit>
        <trans-unit id="b87ef2ff181d7d386886af94b08f992cfc8c5136" translate="yes" xml:space="preserve">
          <source>I also created the image below that may happen in a real life working with Git:</source>
          <target state="translated">Я также создал изображение ниже,которое может произойти в реальной жизни,работая с Git'ом:</target>
        </trans-unit>
        <trans-unit id="8c33029b35f3d01145d86868163313daf5c84274" translate="yes" xml:space="preserve">
          <source>I believe some people may come to this question wanting to know how to rollback committed changes they've made in their master - ie throw everything away and go back to origin/master, in which case, do this:</source>
          <target state="translated">Я думаю,что некоторые люди могут подойти к этому вопросу,желая узнать,как откатить совершенные изменения,которые они сделали в своем хозяине-т.е.выбросить все и вернуться к хозяину,и в этом случае,сделать это:</target>
        </trans-unit>
        <trans-unit id="e72247558e4b5ad84fc16e003254af4f90587b17" translate="yes" xml:space="preserve">
          <source>I found a much more convenient and simple way to achieve the results above:</source>
          <target state="translated">Я нашел гораздо более удобный и простой способ достичь вышеуказанных результатов:</target>
        </trans-unit>
        <trans-unit id="0262f3bdfcb749038ef55e8d537b8a1a7c721298" translate="yes" xml:space="preserve">
          <source>I found the answer from in a blog post (now no longer exists)</source>
          <target state="translated">Я нашел ответ в посте блога (сейчас его больше нет).</target>
        </trans-unit>
        <trans-unit id="26c73afeef62688ff9fde1fd66868ad120f3a9c0" translate="yes" xml:space="preserve">
          <source>I have had a similar issue and wanted to revert back to an earlier commit. In my case I was not interested to keep the newer commit, hence I used &lt;code&gt;Hard&lt;/code&gt;.</source>
          <target state="translated">У меня была похожая проблема, и я хотел вернуться к предыдущей фиксации. В моем случае я не был заинтересован в сохранении нового коммита, поэтому я использовал &lt;code&gt;Hard&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d6910536d152b4d8cb3df0022070f30f0dc88999" translate="yes" xml:space="preserve">
          <source>I have tried a lot of ways to revert local changes in Git, and it seems that this works the best if you just want to revert to the latest commit state.</source>
          <target state="translated">Я пробовал много способов вернуть локальные изменения в Git'е,и кажется,что это работает лучше всего,если вы просто хотите вернуться к последнему состоянию коммита.</target>
        </trans-unit>
        <trans-unit id="20144fbb67d31dfaa0aab28764e5a24600f64929" translate="yes" xml:space="preserve">
          <source>If I do &lt;code&gt;git log&lt;/code&gt;, then I get the following output:</source>
          <target state="translated">Если я делаю &lt;code&gt;git log&lt;/code&gt; , то получаю следующий вывод:</target>
        </trans-unit>
        <trans-unit id="a9dc1195c97f99966a626fc0a6b57adb56e167fa" translate="yes" xml:space="preserve">
          <source>If changes are not required from the previous commit to HEAD and just discard all changes, do:</source>
          <target state="translated">Если изменения не требуются от предыдущего коммита в HEAD и просто отбросить все изменения,сделайте это:</target>
        </trans-unit>
        <trans-unit id="c7c4de579733c15d4364d2a57e8371976d3f8015" translate="yes" xml:space="preserve">
          <source>If the situation is an &lt;strong&gt;urgent one&lt;/strong&gt;, and you just want to do what the questioner asked in a &lt;strong&gt;quick and dirty&lt;/strong&gt; way, assuming your project is under a directory called, for example, &quot;my project&quot;:</source>
          <target state="translated">Если ситуация &lt;strong&gt;срочная&lt;/strong&gt; , и вы просто хотите сделать то, что спросил спрашивающий, &lt;strong&gt;быстрым и грязным&lt;/strong&gt; способом, предполагая, что ваш проект находится в каталоге, называемом, например, &amp;laquo;мой проект&amp;raquo;:</target>
        </trans-unit>
        <trans-unit id="b06ed00b1db93823cdbc02006aad46f5fb3ad39f" translate="yes" xml:space="preserve">
          <source>If you are not on the latest commit - meaning that &lt;code&gt;HEAD&lt;/code&gt; is pointing to a prior commit in history it's called &lt;strong&gt;&lt;em&gt;&lt;code&gt;detached HEAD&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;.</source>
          <target state="translated">Если вы не используете последний коммит - это означает, что &lt;code&gt;HEAD&lt;/code&gt; указывает на предыдущий коммит в истории, он называется &lt;strong&gt;&lt;em&gt; &lt;code&gt;detached HEAD&lt;/code&gt; &lt;/em&gt;&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="8531e0a48ed45802099d9ae7e009dfd16c1eba9c" translate="yes" xml:space="preserve">
          <source>If you decide you didn't want to revert after all, you can revert the revert (as described here) or reset back to before the revert (see the previous section).</source>
          <target state="translated">Если вы решили,что не хотите возвращаться к прежним значениям,вы можете вернуться к прежним значениям (как описано здесь)или вернуться к прежним значениям перед возвращением (см.предыдущий раздел).</target>
        </trans-unit>
        <trans-unit id="8d7fa0de483735064b1cb81199ea5be983c9fc2b" translate="yes" xml:space="preserve">
          <source>If you find something wrong, do:</source>
          <target state="translated">Если найдешь что-то не так,делай:</target>
        </trans-unit>
        <trans-unit id="0c568174f2a4a4531694150c506de49219506b53" translate="yes" xml:space="preserve">
          <source>If you have &lt;strong&gt;one and only&lt;/strong&gt; commit in your repo, try</source>
          <target state="translated">Если у вас есть &lt;strong&gt;один-единственный&lt;/strong&gt; коммит в репо, попробуйте</target>
        </trans-unit>
        <trans-unit id="f8561a2aa2ca03b7277119e0d3ed51f7d90d7f06" translate="yes" xml:space="preserve">
          <source>If you mess up, you've already thrown away your local changes, but you can at least get back to where you were before by resetting again.</source>
          <target state="translated">Если вы напортачили,вы уже выбросили свои местные изменения,но вы можете,по крайней мере,вернуться к тому,что было раньше,перезагрузившись снова.</target>
        </trans-unit>
        <trans-unit id="427ff9573e5ddce662f5ac0851f87ec0e4f79bd7" translate="yes" xml:space="preserve">
          <source>If you want the Git repository to a previous commit:</source>
          <target state="translated">Если вы хотите,чтобы Git-репозиторий был зафиксирован на предыдущем коммите:</target>
        </trans-unit>
        <trans-unit id="a4276522808022598711b636fe0f6fb240bcec8f" translate="yes" xml:space="preserve">
          <source>If you want to &quot;uncommit&quot;, erase the last commit message, and put the modified files back in staging, you would use the command:</source>
          <target state="translated">Если вы хотите &quot;снять коммит&quot;,стереть сообщение о последнем коммите и поместить изменённые файлы обратно в инсценировку,вы используете эту команду:</target>
        </trans-unit>
        <trans-unit id="de04053c3af13c4e631f9c32fc311eee129f128d" translate="yes" xml:space="preserve">
          <source>If you want to correct some error in the last commit a good alternative would be using &lt;strong&gt;git commit --amend&lt;/strong&gt; command. If the last commit is not pointed by any reference, this will do the trick, as it create a commit with the same parent as the last commit. If there is no reference to the last commit, it will simply be discarded and this commit will be the last commit. This is a good way of correcting commits without reverting commits. However it has its own limitations.</source>
          <target state="translated">Если вы хотите исправить какую-то ошибку в последнем &lt;strong&gt;коммите,&lt;/strong&gt; хорошей альтернативой будет использование команды &lt;strong&gt;git commit --amend&lt;/strong&gt; . Если последняя фиксация не указана какой-либо ссылкой, это сделает свое дело, так как создаст фиксацию с тем же родителем, что и последняя фиксация. Если нет ссылки на последний коммит, он просто будет отброшен, и этот коммит будет последним коммитом. Это хороший способ исправления коммитов без возврата коммитов. Однако это имеет свои ограничения.</target>
        </trans-unit>
        <trans-unit id="8f961938dac4103278585a68d34a01db4237b0fc" translate="yes" xml:space="preserve">
          <source>If you want to keep your changes, you can also use:</source>
          <target state="translated">Если вы хотите сохранить изменения,вы также можете использовать:</target>
        </trans-unit>
        <trans-unit id="d856fff44e0b372b7b4c3612a30af8112dd941ab" translate="yes" xml:space="preserve">
          <source>If you want to temporarily go back to it, fool around, then come back to where you are, all you have to do is check out the desired commit:</source>
          <target state="translated">Если вы хотите временно вернуться к нему,валять дурака,а затем вернуться туда,где вы находитесь,всё,что вам нужно сделать,это проверить желаемый коммит:</target>
        </trans-unit>
        <trans-unit id="25ef3e3b661a2247aab4fb208c0d2510055a9739" translate="yes" xml:space="preserve">
          <source>If, on the other hand, you want to really get rid of everything you've done since then, there are two possibilities. One, if you haven't published any of these commits, simply reset:</source>
          <target state="translated">С другой стороны,если вы действительно хотите избавиться от всего,что вы сделали с тех пор,есть два варианта.Первая-если вы не опубликовали ни одного из этих коммитов,просто сбросьте их:</target>
        </trans-unit>
        <trans-unit id="ebd49d9e9e79e3647b4491da259cf962d75113e8" translate="yes" xml:space="preserve">
          <source>It WILL override all your local changes and DELETE all added files since the last commit in the branch.</source>
          <target state="translated">Он будет переопределять все ваши локальные изменения и УДАЛИТЬ все добавленные файлы с момента последнего коммита в ветке.</target>
        </trans-unit>
        <trans-unit id="3c149ded6611aef9d7462af1e5621ecaaf07abf6" translate="yes" xml:space="preserve">
          <source>It directly clears all the changes that you have been making since the last commit.</source>
          <target state="translated">Он напрямую очищает все изменения,которые вы делали с момента последнего коммита.</target>
        </trans-unit>
        <trans-unit id="58bbb523b3d2e34c2af2248245176f969ea2f258" translate="yes" xml:space="preserve">
          <source>It is capable of taking range from the HEAD like below. Here 1 says &quot;revert last commit.&quot;</source>
          <target state="translated">Он способен взять дальность действия от HEAD,как внизу.Здесь 1 говорит &quot;вернуть последний коммит&quot;.</target>
        </trans-unit>
        <trans-unit id="eb09fdc79570755955c80aa0d4bc081876b97bac" translate="yes" xml:space="preserve">
          <source>It is the same code code as boulder_ruby suggested, but I have added &lt;code&gt;git add .&lt;/code&gt; before  &lt;code&gt;git reset --hard HEAD&lt;/code&gt; to erase all new files created since the last commit since this is what most people expect I believe when reverting to the latest commit.</source>
          <target state="translated">Это тот же код, который предложил boulder_ruby, но я добавил &lt;code&gt;git add .&lt;/code&gt; перед &lt;code&gt;git reset --hard HEAD&lt;/code&gt; чтобы стереть все новые файлы, созданные с момента последнего коммита, так как большинство людей ожидают этого при возвращении к последнему коммиту.</target>
        </trans-unit>
        <trans-unit id="4c30d8d0b88769f23fbadcbdeb36ad079e70ea8a" translate="yes" xml:space="preserve">
          <source>It will NOT create any commits as &lt;code&gt;git revert&lt;/code&gt; does.</source>
          <target state="translated">Это НЕ будет создавать коммиты, как это делает &lt;code&gt;git revert&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8005ef78b00c05ee0f92589ff930d6b321f3c1fe" translate="yes" xml:space="preserve">
          <source>It will NOT detach your HEAD like &lt;code&gt;git checkout &amp;lt;commithashcode&amp;gt;&lt;/code&gt; does.</source>
          <target state="translated">Это НЕ отсоединит вашу &lt;code&gt;git checkout &amp;lt;commithashcode&amp;gt;&lt;/code&gt; делает git checkout &amp;lt;commithashcode&amp;gt; .</target>
        </trans-unit>
        <trans-unit id="6eb5bea727a80b27c2fa5b69b3487e69026c556a" translate="yes" xml:space="preserve">
          <source>It will remove your previous Git commit.</source>
          <target state="translated">Он удалит ваш предыдущий Git-комммит.</target>
        </trans-unit>
        <trans-unit id="7249d3ccfdff131742220b6429cf95e4e286e0d6" translate="yes" xml:space="preserve">
          <source>It works only with branches names, so you can revert only to latest commit in the branch this way.</source>
          <target state="translated">Он работает только с именами ветвей,так что таким образом вы можете вернуться только к последнему коммиту в ветке.</target>
        </trans-unit>
        <trans-unit id="bd597ad6f3e74b984d2eff89845813ceef14c52b" translate="yes" xml:space="preserve">
          <source>Just &lt;code&gt;git reset --hard HEAD&lt;/code&gt; will get rid of modifications, but it won't get rid of &quot;new&quot; files. In their case they'd accidentally dragged an important folder somewhere random, and all those files were being treated as new by Git, so a &lt;code&gt;reset --hard&lt;/code&gt; didn't fix it. By running the &lt;code&gt;git add -A .&lt;/code&gt; beforehand, it explicitly tracked them all with git, to be wiped out by the reset.</source>
          <target state="translated">Просто &lt;code&gt;git reset --hard HEAD&lt;/code&gt; избавится от модификаций, но не избавится от &amp;laquo;новых&amp;raquo; файлов. В их случае они случайно перетащили важную папку куда-то в случайном порядке, и все эти файлы были обработаны Git как новые, поэтому &lt;code&gt;reset --hard&lt;/code&gt; не исправил . &lt;code&gt;git add -A .&lt;/code&gt; заранее, он явно отслеживал их всех с помощью git, чтобы сбросить их при перезагрузке.</target>
        </trans-unit>
        <trans-unit id="c8a473be30d0bd103f06c5bf43af10cddca46531" translate="yes" xml:space="preserve">
          <source>Lastly, push &lt;em&gt;develop&lt;/em&gt; again:</source>
          <target state="translated">Наконец, нажмите &lt;em&gt;развиваться&lt;/em&gt; снова:</target>
        </trans-unit>
        <trans-unit id="8031e401d2da65a74406a30adeb72243cd3390a7" translate="yes" xml:space="preserve">
          <source>Lots of complicated and dangerous answers here, but it's actually easy:</source>
          <target state="translated">Здесь много сложных и опасных ответов,но на самом деле это легко:</target>
        </trans-unit>
        <trans-unit id="6a3ea14413dd6ac5b8e74268e0d3256e4a55da1b" translate="yes" xml:space="preserve">
          <source>Note that this is Resetting and Forcing the change to the remote, so that if others on your team have already git pulled, you will cause problems for them. You are destroying the change history, which is an important reason why people use git in the first place.</source>
          <target state="translated">Обратите внимание,что это Сброс и принудительное изменение на пульте дистанционного управления,так что если другие в вашей команде уже потянули git,вы будете создавать проблемы для них.Вы уничтожаете историю изменений,что является важной причиной,по которой люди используют git в первую очередь.</target>
        </trans-unit>
        <trans-unit id="4be35ba1efbe333f75c355856eb657e4448b68fa" translate="yes" xml:space="preserve">
          <source>Note: (&lt;a href=&quot;https://github.com/git/git/blob/master/Documentation/RelNotes/2.7.0.txt&quot;&gt;Since Git 2.7&lt;/a&gt;) you can also use the &lt;code&gt;git rebase --no-autostash&lt;/code&gt; as well.</source>
          <target state="translated">Примечание: ( &lt;a href=&quot;https://github.com/git/git/blob/master/Documentation/RelNotes/2.7.0.txt&quot;&gt;начиная с Git 2.7&lt;/a&gt; ) вы также можете использовать &lt;code&gt;git rebase --no-autostash&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="08e293c8b2eb9661fb2b9e59253581e609baa6c8" translate="yes" xml:space="preserve">
          <source>Nothing here worked for me apart from this exact combination:</source>
          <target state="translated">Ничто здесь не работало на меня,кроме этой комбинации:</target>
        </trans-unit>
        <trans-unit id="419ddbdcdc17f46e12b7bf15b16aa8731606d7b0" translate="yes" xml:space="preserve">
          <source>Now you can &lt;code&gt;checkout&lt;/code&gt; all un-added files by</source>
          <target state="translated">Теперь вы можете &lt;code&gt;checkout&lt;/code&gt; все не добавленные файлы</target>
        </trans-unit>
        <trans-unit id="e54b6879a199c4996950e6c441beef9bc4f56ce4" translate="yes" xml:space="preserve">
          <source>On the command line it will look like this - SHA-1 instead of the branch name since the &lt;code&gt;HEAD&lt;/code&gt; is not pointing to the the tip of the current branch:</source>
          <target state="translated">В командной строке это будет выглядеть так - SHA-1 вместо имени ветви, поскольку &lt;code&gt;HEAD&lt;/code&gt; не указывает на конец текущей ветви:</target>
        </trans-unit>
        <trans-unit id="32ab2cb78ae1de14f78e6d0c088c542ad358e245" translate="yes" xml:space="preserve">
          <source>On the other hand, if you've published the work, you probably don't want to reset the branch, since that's effectively rewriting history. In that case, you could indeed revert the commits. With Git, revert has a very specific meaning: create a commit with the reverse patch to cancel it out. This way you don't rewrite any history.</source>
          <target state="translated">С другой стороны,если вы опубликовали работу,вы,вероятно,не захотите сбрасывать ветку,так как это эффективно переписывает историю.В таком случае,вы действительно могли бы вернуть коммиты.В Git'е возврат имеет очень специфическое значение:создайте коммит с обратным патчем,чтобы отменить его.Таким образом,вы не будете переписывать историю.</target>
        </trans-unit>
        <trans-unit id="56a3c461f0299749f2a082f928f4ebddece45866" translate="yes" xml:space="preserve">
          <source>On this subject of &quot;backing up to the Cloud&quot;, the next step is to open an account (free of course) with GitHub or (better in my view) &lt;a href=&quot;https://gitlab.com&quot;&gt;GitLab&lt;/a&gt;. You can then regularly do a &lt;code&gt;git push&lt;/code&gt; command to make your Cloud repo up-to-date &quot;properly&quot;. But again, talking about this may be too much too soon.</source>
          <target state="translated">В этой теме &amp;laquo;резервного копирования в облако&amp;raquo; следующим шагом является открытие учетной записи (конечно же, бесплатной) с помощью GitHub или (на мой взгляд, лучше) &lt;a href=&quot;https://gitlab.com&quot;&gt;GitLab&lt;/a&gt; . Затем вы можете регулярно выполнять команду &lt;code&gt;git push&lt;/code&gt; , чтобы сделать ваше облачное хранилище обновленным &amp;laquo;должным образом&amp;raquo;. Но, опять же, говорить об этом может быть слишком рано.</target>
        </trans-unit>
        <trans-unit id="62f200b3dfaa6dff2d5ae300412e4adc775e9540" translate="yes" xml:space="preserve">
          <source>Or if you want to make commits while you're there, go ahead and make a new branch while you're at it:</source>
          <target state="translated">Или,если вы хотите сделать коммиты,пока вы там,идите и создайте новую ветку,пока вы там:</target>
        </trans-unit>
        <trans-unit id="60b244e32b96925828e25d2b3c24cfdc70e7d1f5" translate="yes" xml:space="preserve">
          <source>PS: It has a little problem; it also deletes all you recently stored stash changes. Which I guess in most cases should not matter.</source>
          <target state="translated">PS:У него есть небольшая проблема;он также удаляет все недавно сохраненные изменения тайника.Что,на мой взгляд,в большинстве случаев не должно иметь значения.</target>
        </trans-unit>
        <trans-unit id="5b5050c847d01d43c2c27ca22983b3c3aa0c9f7b" translate="yes" xml:space="preserve">
          <source>PS: One other thought: It is (now) actually quite simple to keep the Git repo in a directory other than the one with the working files. This would mean you would not have to copy the entire Git repository using the above quick &amp;amp; dirty solution. See the answer by Fryer using &lt;code&gt;--separate-git-dir&lt;/code&gt;&lt;a href=&quot;https://stackoverflow.com/questions/505467/can-i-store-the-git-folder-outside-the-files-i-want-tracked&quot;&gt;here&lt;/a&gt;. &lt;strong&gt;Be warned&lt;/strong&gt;, though: If you have a &quot;separate-directory&quot; repository which you don't copy, and you do a hard reset, all versions subsequent to the reset commit will be lost forever, unless you have, as you absolutely should, regularly backed up your repository, preferably to the Cloud (e.g. &lt;a href=&quot;https://en.wikipedia.org/wiki/Google_Drive&quot;&gt;Google Drive&lt;/a&gt;) among other places.</source>
          <target state="translated">PS: Еще одна мысль: (сейчас) на самом деле довольно просто хранить репозиторий Git в каталоге, отличном от каталога с рабочими файлами. Это означает, что вам не нужно будет копировать весь репозиторий Git, используя вышеуказанное быстрое и грязное решение. Смотрите ответ Фрайера, используя &lt;code&gt;--separate-git-dir&lt;/code&gt; &lt;a href=&quot;https://stackoverflow.com/questions/505467/can-i-store-the-git-folder-outside-the-files-i-want-tracked&quot;&gt;здесь&lt;/a&gt; . Тем не менее, &lt;strong&gt;будьте осторожны&lt;/strong&gt; : если у вас есть репозиторий &amp;laquo;отдельный каталог&amp;raquo;, который вы не копируете, и вы выполняете полный сброс, все версии, следующие за фиксацией сброса, будут потеряны навсегда, если у вас нет, как вы абсолютно должны, регулярно создавайте резервные копии вашего хранилища, желательно в облаке (например, &lt;a href=&quot;https://en.wikipedia.org/wiki/Google_Drive&quot;&gt;Google Drive&lt;/a&gt; ) среди других мест.</target>
        </trans-unit>
        <trans-unit id="fd0ba66aa9ddaa029e7c11b077be6e222c3aa32a" translate="yes" xml:space="preserve">
          <source>Per the &lt;a href=&quot;https://en.wikipedia.org/wiki/Man_page&quot;&gt;man page&lt;/a&gt;, it can also be used as such:</source>
          <target state="translated">Для справочной &lt;a href=&quot;https://en.wikipedia.org/wiki/Man_page&quot;&gt;страницы&lt;/a&gt; , он также может быть использован как таковой:</target>
        </trans-unit>
        <trans-unit id="1070632c158ecb6d00478018b42aa2927bcfff94" translate="yes" xml:space="preserve">
          <source>Pull the latest version of your repository from Bitbucket using the &lt;code&gt;git pull --all&lt;/code&gt; command.</source>
          <target state="translated">Извлеките последнюю версию вашего хранилища из Bitbucket с помощью команды &lt;code&gt;git pull --all&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9fe38f7b3252db2987b29485e48b59951ef72185" translate="yes" xml:space="preserve">
          <source>Push the change to Git repository using &lt;code&gt;git push --force&lt;/code&gt; to force push the change.</source>
          <target state="translated">Перенесите изменения в Git-репозиторий, используя &lt;code&gt;git push --force&lt;/code&gt; , чтобы принудительно отправить изменения.</target>
        </trans-unit>
        <trans-unit id="2dd8de4c78a70b4822060391dc7092a8a0da9c11" translate="yes" xml:space="preserve">
          <source>Reset the head of your repository's history using the &lt;code&gt;git reset --hard HEAD~N&lt;/code&gt; where N is the number of commits you want to take the head back. In the following example the head would be set back one commit, to the last commit in the repository history:</source>
          <target state="translated">Сбросьте &lt;code&gt;git reset --hard HEAD~N&lt;/code&gt; истории вашего репозитория, используя git reset --hard HEAD ~ N, где N - количество коммитов, которые вы хотите вернуть назад. В следующем примере заголовок будет возвращен на один коммит до последнего коммита в истории репозитория:</target>
        </trans-unit>
        <trans-unit id="d0be8e3d2b5caaa96f38eb189df8ec95362918aa" translate="yes" xml:space="preserve">
          <source>Revert back &lt;strong&gt;with keeping&lt;/strong&gt; the changes:</source>
          <target state="translated">Вернитесь назад &lt;strong&gt;с сохранением&lt;/strong&gt; изменений:</target>
        </trans-unit>
        <trans-unit id="9c0d62b8fc38ca4721e6e1706ee9f51dce3b15f2" translate="yes" xml:space="preserve">
          <source>Revert back &lt;strong&gt;without keeping&lt;/strong&gt; the changes:</source>
          <target state="translated">Вернуть обратно &lt;strong&gt;без сохранения&lt;/strong&gt; изменений:</target>
        </trans-unit>
        <trans-unit id="ee00d25f4d3f7808f421b0d05a47469fb758bd2e" translate="yes" xml:space="preserve">
          <source>Revert is the command to rollback the commits.</source>
          <target state="translated">Revert-это команда для отката коммитов.</target>
        </trans-unit>
        <trans-unit id="c6b4bece923a7536b8b1b2f52de3a298484975dc" translate="yes" xml:space="preserve">
          <source>Revert to &lt;em&gt;most recent&lt;/em&gt; commit and ignoring all local changes:</source>
          <target state="translated">Возврат к &lt;em&gt;самой последней&lt;/em&gt; фиксации и игнорирование всех локальных изменений:</target>
        </trans-unit>
        <trans-unit id="e6348ed8b19da88a2dc2a2d4d06140b03041b1fd" translate="yes" xml:space="preserve">
          <source>Reverting The Working Copy to an Older Commit</source>
          <target state="translated">Перенос рабочей копии в комитет старейшин.</target>
        </trans-unit>
        <trans-unit id="c31dc90f055c63b6461a162487e4f54af0389983" translate="yes" xml:space="preserve">
          <source>Reverting Working Copy to Most Recent Commit</source>
          <target state="translated">Скользящая рабочая копия на самый последний комитет</target>
        </trans-unit>
        <trans-unit id="068a74558d4325c7d1e5fc758527efac26587586" translate="yes" xml:space="preserve">
          <source>Rogue Coder?</source>
          <target state="translated">Родж-Кодер?</target>
        </trans-unit>
        <trans-unit id="4a01fa35392523364900604a0d0713b788eebb53" translate="yes" xml:space="preserve">
          <source>Run the Git log command with &lt;code&gt;-n 4&lt;/code&gt; from your terminal. The number after the &lt;code&gt;-n&lt;/code&gt; determines the number of commits in the log starting from the most recent commit in your local history.</source>
          <target state="translated">Запустите команду Git log с &lt;code&gt;-n 4&lt;/code&gt; на вашем терминале. Число после &lt;code&gt;-n&lt;/code&gt; определяет количество коммитов в журнале, начиная с самого последнего коммита в вашей локальной истории.</target>
        </trans-unit>
        <trans-unit id="5e60c86f8418a7c1455bb5883bd1d7711db7d549" translate="yes" xml:space="preserve">
          <source>Say you have the following commits in a text file named &lt;code&gt;~/commits-to-revert.txt&lt;/code&gt; (I used &lt;code&gt;git log --pretty=oneline&lt;/code&gt; to get them)</source>
          <target state="translated">Скажем, у вас есть следующие коммиты в текстовом файле с именем &lt;code&gt;~/commits-to-revert.txt&lt;/code&gt; (я использовал &lt;code&gt;git log --pretty=oneline&lt;/code&gt; , чтобы получить их)</target>
        </trans-unit>
        <trans-unit id="81732aeea4059405eab03949322e5aa6b57b1dfa" translate="yes" xml:space="preserve">
          <source>Select your required commit, and check it by</source>
          <target state="translated">Выберите нужный вам коммит и проверьте его</target>
        </trans-unit>
        <trans-unit id="67cfec235644a14ea2c7c197d4b69761db936191" translate="yes" xml:space="preserve">
          <source>Short description:</source>
          <target state="translated">Краткое описание:</target>
        </trans-unit>
        <trans-unit id="fe04fdc25bd7034b2cf3e1bb748034b199565949" translate="yes" xml:space="preserve">
          <source>Similarly to alternative #1, this reproduces the state of &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt; in the current working copy. It is necessary to do &lt;code&gt;git rm&lt;/code&gt; first because &lt;code&gt;git checkout&lt;/code&gt; won't remove files that have been added since &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">Подобно альтернативе № 1, он воспроизводит состояние &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt; в текущей рабочей копии. Сначала нужно выполнить &lt;code&gt;git rm&lt;/code&gt; , потому что &lt;code&gt;git checkout&lt;/code&gt; не удалит файлы, которые были добавлены после &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5deb2504bde4f4691c3fbcb5913a32747fdace3a" translate="yes" xml:space="preserve">
          <source>So, no need for commit ids and so on :)</source>
          <target state="translated">Так что,нет необходимости в коммитах и т.д.:)</target>
        </trans-unit>
        <trans-unit id="6954634df3ee2911f1393b2cdf9d64b6a21f4038" translate="yes" xml:space="preserve">
          <source>Source: &lt;a href=&quot;http://nakkaya.com/2009/09/24/git-delete-last-commit/&quot;&gt;http://nakkaya.com/2009/09/24/git-delete-last-commit/&lt;/a&gt;</source>
          <target state="translated">Источник: &lt;a href=&quot;http://nakkaya.com/2009/09/24/git-delete-last-commit/&quot;&gt;http://nakkaya.com/2009/09/24/git-delete-last-commit/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d5800959f85dcc1c548571a3f3a0105891f5b415" translate="yes" xml:space="preserve">
          <source>Temporarily switch to a different commit</source>
          <target state="translated">Временно переключиться на другой коммит</target>
        </trans-unit>
        <trans-unit id="0f2773d8bddf901d05f958a871f495f7e27fdba5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://schacon.github.com/git/git-revert.html&quot;&gt;&lt;code&gt;git-revert&lt;/code&gt; manpage&lt;/a&gt; actually covers a lot of this in its description. Another useful link is &lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Tools-Advanced-Merging#_undoing_merges&quot;&gt;this git-scm.com section discussing git-revert&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://schacon.github.com/git/git-revert.html&quot;&gt; &lt;code&gt;git-revert&lt;/code&gt; страница git-revert на&lt;/a&gt; самом деле охватывает многое из этого в своем описании. Другая полезная ссылка - &lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Tools-Advanced-Merging#_undoing_merges&quot;&gt;это раздел git-scm.com, где обсуждается git-revert&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0b78da6e377c9c98a192707a215236eede0cd2bb" translate="yes" xml:space="preserve">
          <source>The best option for me and probably others is the Git reset option:</source>
          <target state="translated">Лучшим вариантом для меня и,возможно,для других является вариант Git'а с перезагрузкой:</target>
        </trans-unit>
        <trans-unit id="54a5ff1a1b6340200a291fdbc4a740dc59a7559a" translate="yes" xml:space="preserve">
          <source>The content of &lt;code&gt;HEAD&lt;/code&gt; is stored inside &lt;code&gt;.git/HEAD&lt;/code&gt;, and it contains the 40 bytes SHA-1 of the current commit.</source>
          <target state="translated">Содержимое &lt;code&gt;HEAD&lt;/code&gt; хранится в &lt;code&gt;.git/HEAD&lt;/code&gt; и содержит 40 байтов SHA-1 текущего коммита.</target>
        </trans-unit>
        <trans-unit id="26523735edbc0fadce77f13b3d4489dc7b54899c" translate="yes" xml:space="preserve">
          <source>The default flag as explained, not need to provide it, does not change the working tree, but it adds all changed files ready to commit, so you go back to the commit status which changes to files get unstaged.</source>
          <target state="translated">Флаг по умолчанию,как объяснено,не требует его предоставления,не изменяет рабочее дерево,но добавляет все изменённые файлы,готовые к фиксации,так что вы возвращаетесь в состояние фиксации,изменения в которых в файлах становятся нестабильными.</target>
        </trans-unit>
        <trans-unit id="c8937a58fd58248066d458a8e3e1faa865c7e84a" translate="yes" xml:space="preserve">
          <source>The key here is forcing the push, no extra commits/commit messages, etc.</source>
          <target state="translated">Ключ здесь-принудительное нажатие,никаких дополнительных сообщений о коммитте и т.д.</target>
        </trans-unit>
        <trans-unit id="f9b0929e5129e850ed1b5be9e16b85c31b2892f2" translate="yes" xml:space="preserve">
          <source>The obvious thing if you want to carry on with the state of the project without actually discarding the work since this retrieved commit is to rename your directory again: Delete the project containing the retrieved commit (or give it a temporary name) and rename your &quot;my project - copy&quot; directory back to &quot;my project&quot;. Then maybe try to understand some of the other answers here, and probably do another commit fairly soon.</source>
          <target state="translated">Очевидная вещь,если вы хотите продолжить состояние проекта без фактического отбрасывания работы,так как этот полученный коммит состоит в том,чтобы переименовать ваш каталог снова:Удалите проект,содержащий полученную фиксацию (или дайте ему временное имя)и переименуйте вашу директорию &quot;my project-copy&quot; обратно в &quot;my project&quot;.Затем,возможно,попробуйте понять некоторые из других ответов здесь,и,возможно,сделайте ещё один коммит довольно скоро.</target>
        </trans-unit>
        <trans-unit id="4b50aaa5d7059e59a4807acb3932d2d3b6d7295e" translate="yes" xml:space="preserve">
          <source>Then it will save your changes.</source>
          <target state="translated">Тогда это сохранит ваши изменения.</target>
        </trans-unit>
        <trans-unit id="58b39406130fc132b234d68312b4211c64120db0" translate="yes" xml:space="preserve">
          <source>Then you need to get develop to the status you want, let me assume the commit hash is EFGHIJK:</source>
          <target state="translated">Тогда вам нужно развиваться до нужного вам статуса,позвольте мне предположить,что хэш коммита-это EFGHIJK:</target>
        </trans-unit>
        <trans-unit id="ea3d908ec7db49d81934603e4f0e6b285b817827" translate="yes" xml:space="preserve">
          <source>There is a command (not a part of core Git, but it is in the &lt;a href=&quot;https://github.com/visionmedia/git-extras&quot;&gt;git-extras&lt;/a&gt; package) specifically for reverting and staging old commits:</source>
          <target state="translated">Существует команда (не входящая в состав ядра Git, но она входит в пакет &lt;a href=&quot;https://github.com/visionmedia/git-extras&quot;&gt;git-extras&lt;/a&gt; ) специально для возврата и постановки старых коммитов:</target>
        </trans-unit>
        <trans-unit id="815f16f30f9ba6b824003a15340434622e387031" translate="yes" xml:space="preserve">
          <source>This basically works by using the fact that soft resets will leave the state of the previous commit staged in the index/staging-area, which you can then commit.</source>
          <target state="translated">В основном это работает,используя тот факт,что мягкий сбрасывающий коммит оставит состояние предыдущего коммита в области индексации,которое вы можете затем зафиксировать.</target>
        </trans-unit>
        <trans-unit id="85fd59a0e320797d0e3cfbedfe47292634df1558" translate="yes" xml:space="preserve">
          <source>This depends a lot on what you mean by &quot;revert&quot;.</source>
          <target state="translated">Это во многом зависит от того,что ты имеешь в виду под &quot;реверсом&quot;.</target>
        </trans-unit>
        <trans-unit id="ae7ed64993835cbe67a58f9f2cd839e739812861" translate="yes" xml:space="preserve">
          <source>This has been the best option for me! It is simple, fast and effective!</source>
          <target state="translated">Это был лучший вариант для меня! Это просто,быстро и эффективно!</target>
        </trans-unit>
        <trans-unit id="0f8803f90afffda4da3bd38d62f19dc63d2a481d" translate="yes" xml:space="preserve">
          <source>This is a &lt;strong&gt;safe and easy way to rollback to a previous state&lt;/strong&gt;. No history is destroyed, so it can be used for commits that have already been made public.</source>
          <target state="translated">Это &lt;strong&gt;безопасный и простой способ возврата к предыдущему состоянию&lt;/strong&gt; . История не уничтожается, поэтому ее можно использовать для коммитов, которые уже были обнародованы.</target>
        </trans-unit>
        <trans-unit id="3dcd570acd02deab0e0528c3bef08d7781c4101e" translate="yes" xml:space="preserve">
          <source>This is a very slightly modified version of Charles Bailey's solution to &lt;a href=&quot;https://stackoverflow.com/questions/1895059/revert-to-a-commit-by-sha-hash-in-git/1895095#1895095&quot;&gt;Revert to a commit by a SHA hash in Git?&lt;/a&gt;:</source>
          <target state="translated">Это очень немного измененная версия решения Чарльза Бейли &amp;laquo; &lt;a href=&quot;https://stackoverflow.com/questions/1895059/revert-to-a-commit-by-sha-hash-in-git/1895095#1895095&quot;&gt;Вернуть коммит с помощью хэша SHA в Git?&amp;raquo;.&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="0c675ec8ac6c294e8061252ff39c89b38b305a0c" translate="yes" xml:space="preserve">
          <source>This is an extremely useful command in situations where you committed the wrong thing and you want to undo that last commit.</source>
          <target state="translated">Это очень полезная команда в ситуациях,когда вы совершили ошибку и хотите отменить последний коммит.</target>
        </trans-unit>
        <trans-unit id="33268d90d137e16d0ff7bdf13883c995cd339665" translate="yes" xml:space="preserve">
          <source>This is how I did it:</source>
          <target state="translated">Вот как я это сделал:</target>
        </trans-unit>
        <trans-unit id="89f1f2cd90d517dbecb5870742250306be88f1ee" translate="yes" xml:space="preserve">
          <source>This is one more way to directly reset to a recent commit</source>
          <target state="translated">Это ещё один способ прямого сброса на недавний коммит.</target>
        </trans-unit>
        <trans-unit id="a638c35d7c8a1baea04fbfbe74917c3a635754fa" translate="yes" xml:space="preserve">
          <source>This reverts everything back to the previous state, including file and directory creations, and deletions, commit it to your branch and you retain the history, but you have it reverted back to the same file structure. Why Git doesn't have a &lt;code&gt;git revert --to &amp;lt;hash&amp;gt;&lt;/code&gt; is beyond me.</source>
          <target state="translated">Это возвращает все назад к предыдущему состоянию, включая создание файлов и каталогов, а также удаление, фиксирует это в вашей ветви, и вы сохраняете историю, но вы возвращаете ее обратно в ту же файловую структуру. Почему у Git нет &lt;code&gt;git revert --to &amp;lt;hash&amp;gt;&lt;/code&gt; - вне меня.</target>
        </trans-unit>
        <trans-unit id="b2c32a1b98727e64ca2da1eaa9ddc6a817e68906" translate="yes" xml:space="preserve">
          <source>This schema illustrates which command does what. As you can see there &lt;code&gt;reset &amp;amp;&amp;amp; checkout&lt;/code&gt; modify the &lt;code&gt;HEAD&lt;/code&gt;.</source>
          <target state="translated">Эта схема иллюстрирует, какая команда что делает. Как вы видите, &lt;code&gt;reset &amp;amp;&amp;amp; checkout&lt;/code&gt; изменяет &lt;code&gt;HEAD&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8a3f409131a6896a9bc560e6025e02d2b5433f7b" translate="yes" xml:space="preserve">
          <source>This solution comes from svick's solution to &lt;a href=&quot;https://stackoverflow.com/questions/3380805/checkout-old-commit-and-make-it-a-new-commit/3382249#3382249&quot;&gt;Checkout old commit and make it a new commit&lt;/a&gt;:</source>
          <target state="translated">Это решение взято из решения svick &lt;a href=&quot;https://stackoverflow.com/questions/3380805/checkout-old-commit-and-make-it-a-new-commit/3382249#3382249&quot;&gt;Checkout old commit и делает его новым commit&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="23e15c6d963b17e7997420be2c7d3b3f99d8ef72" translate="yes" xml:space="preserve">
          <source>This will checkout new branch pointing to the desired commit. This command will checkout to a given commit.</source>
          <target state="translated">При этом будет извлечена новая ветка,указывающая на нужный коммит.Эта команда будет извлечена для заданного коммита.</target>
        </trans-unit>
        <trans-unit id="deecf3786f5adeab0a8d032a5b74b01cb144271d" translate="yes" xml:space="preserve">
          <source>This will get you back to your desired commit</source>
          <target state="translated">Это вернет вас к желаемому обязательству</target>
        </trans-unit>
        <trans-unit id="40dbc891e4d9a6e9d189f3487caaedd144c42f8a" translate="yes" xml:space="preserve">
          <source>This will reset all changed files to un-added state.</source>
          <target state="translated">При этом все измененные файлы будут сброшены в недобавленное состояние.</target>
        </trans-unit>
        <trans-unit id="a896003d14a51adf413918e0193aff717b25832a" translate="yes" xml:space="preserve">
          <source>This will return the state of the repo under &quot;my project&quot; to what it was when you made that commit (a &quot;commit&quot; means a snapshot of your working files). All commits since then will be lost forever under &quot;my project&quot;, BUT... &lt;strong&gt;they will still be present&lt;/strong&gt; in the repo under &quot;my project - copy&quot; since you copied &lt;em&gt;all&lt;/em&gt; those files - including the ones under .../.git/.</source>
          <target state="translated">Это вернет состояние репо в &amp;laquo;моем проекте&amp;raquo; к тому, что было, когда вы сделали этот коммит (&amp;laquo;коммит&amp;raquo; означает снимок ваших рабочих файлов). Все коммиты с тех пор будут навсегда потеряны в &amp;laquo;моем проекте&amp;raquo;, НО ... &lt;strong&gt;они все равно будут присутствовать&lt;/strong&gt; в репозитории в разделе &amp;laquo;мой проект - копия&amp;raquo;, так как вы скопировали &lt;em&gt;все&lt;/em&gt; эти файлы, в том числе и те, которые находятся в ... /. Git /.</target>
        </trans-unit>
        <trans-unit id="d4bd97818967ec523bd6f7b1579640e38609e22e" translate="yes" xml:space="preserve">
          <source>This will revert everything from the HEAD back to the commit hash, meaning it will recreate that commit state in the working tree &lt;em&gt;as if&lt;/em&gt; every commit since had been walked back. You can then commit the current tree, and it will create a brand new commit essentially equivalent to the commit you &quot;reverted&quot; to.</source>
          <target state="translated">Это вернет все из HEAD обратно в хеш коммита, что означает, что он будет воссоздавать это состояние коммита в рабочем дереве, &lt;em&gt;как если бы&lt;/em&gt; каждый коммит с тех пор был возвращен. Затем вы можете зафиксировать текущее дерево, и оно создаст совершенно новый коммит, по существу эквивалентный коммиту, к которому вы &amp;laquo;вернулись&amp;raquo;.</target>
        </trans-unit>
        <trans-unit id="c67e05bcff0f4c1a62d4ecdacccace9fec0a9a55" translate="yes" xml:space="preserve">
          <source>This will revert on the local repository, and here after using &lt;code&gt;git push -f&lt;/code&gt; will update the remote repository.</source>
          <target state="translated">Это вернется в локальный репозиторий, и здесь после использования &lt;code&gt;git push -f&lt;/code&gt; обновит удаленный репозиторий.</target>
        </trans-unit>
        <trans-unit id="5d91c733edd0666eeb1a577ec8aa795bdf80e0be" translate="yes" xml:space="preserve">
          <source>To be clear, these alternatives &lt;strong&gt;&lt;em&gt;are not the best way to revert commits&lt;/em&gt;&lt;/strong&gt;, &lt;a href=&quot;https://stackoverflow.com/a/4114122/456814&quot;&gt;Jefromi's solutions are&lt;/a&gt;, but I just want to point out that you can also use these other methods to achieve the same thing as &lt;code&gt;git revert&lt;/code&gt;.</source>
          <target state="translated">Чтобы быть ясным, эти альтернативы &lt;strong&gt;&lt;em&gt;не лучший способ отменить коммиты&lt;/em&gt;&lt;/strong&gt; , &lt;a href=&quot;https://stackoverflow.com/a/4114122/456814&quot;&gt;как решения Jefromi&lt;/a&gt; , но я просто хочу отметить, что вы можете также использовать эти другие методы для достижения того же, что и &lt;code&gt;git revert&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="36f8bb30864057728606d69b5633ce52d6920b0e" translate="yes" xml:space="preserve">
          <source>To completely clean a coder's directory up from some accidental changes, we used:</source>
          <target state="translated">Чтобы полностью очистить каталог кодера от случайных изменений,мы использовали его:</target>
        </trans-unit>
        <trans-unit id="a1f640222eec0351f9613d995f9798a710e3b622" translate="yes" xml:space="preserve">
          <source>To go back to where you were, just check out the branch you were on again. (If you've made changes, as always when switching branches, you'll have to deal with them as appropriate. You could reset to throw them away; you could stash, checkout, stash pop to take them with you; you could commit them to a branch there if you want a branch there.)</source>
          <target state="translated">Чтобы вернуться туда,где вы были,просто проверьте филиал,на котором вы были.(Если вы внесли изменения,как всегда при смене ответвления,вам придётся иметь с ними дело по мере необходимости.Вы можете сбросить их,чтобы выбросить;вы можете спрятать,извлечь,занести в тайник,чтобы забрать их с собой;вы можете зафиксировать их в том же ответвлении,если вы хотите,чтобы там было ответвление).</target>
        </trans-unit>
        <trans-unit id="129cac7b2f2308cb06623ae91e17d42a34cd6450" translate="yes" xml:space="preserve">
          <source>To keep the changes from the previous commit to HEAD and move to the previous commit, do:</source>
          <target state="translated">Чтобы сохранить изменения от предыдущего коммита в HEAD и перейти к предыдущему коммиту,сделайте это:</target>
        </trans-unit>
        <trans-unit id="2cdc5dc8a6118cdbdf6653eb58002f8b4b9643eb" translate="yes" xml:space="preserve">
          <source>To revert to a commit that's older than the most recent commit:</source>
          <target state="translated">Вернуться к коммиту,который старше последнего:</target>
        </trans-unit>
        <trans-unit id="af05159b40594ed3dd36e91ea67e0ecc5c9b9824" translate="yes" xml:space="preserve">
          <source>To revert to a previous commit, ignoring any changes:</source>
          <target state="translated">Чтобы вернуться к предыдущему коммиту,игнорируя любые изменения:</target>
        </trans-unit>
        <trans-unit id="18f27a31c44cf903ff5441d21940a6fca4a36ad5" translate="yes" xml:space="preserve">
          <source>To save yourself much stress, learn from my scars. You have to pretty much have to read a book on Git - I'd recommend &lt;a href=&quot;http://shop.oreilly.com/product/0636920022862.do&quot;&gt;&quot;Version Control with Git&quot;&lt;/a&gt;. Do it sooner rather than later. If you do, bear in mind that much of the complexity of Git comes from branching and then remerging: you can skip those parts in any book. From your question there's &lt;strong&gt;no reason why people should be blinding you with science&lt;/strong&gt;.</source>
          <target state="translated">Чтобы избавить себя от стресса, учитесь на моих шрамах. Вы должны в значительной степени прочитать книгу по Git - я бы порекомендовал &lt;a href=&quot;http://shop.oreilly.com/product/0636920022862.do&quot;&gt;&amp;laquo;Контроль версий с помощью Git&amp;raquo;&lt;/a&gt; . Сделай это раньше, чем позже. Если вы это сделаете, имейте в виду, что большая часть сложности Git связана с ветвлением и последующим повторным использованием: вы можете пропустить эти части в любой книге. Из твоего вопроса &lt;strong&gt;нет причин, почему люди должны ослеплять тебя наукой&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="60371cbf5e87d6f2002f2a206a806a7e5f91fa95" translate="yes" xml:space="preserve">
          <source>Try resetting to the desired commit -</source>
          <target state="translated">Попробуйте перезагрузить на нужный коммит -</target>
        </trans-unit>
        <trans-unit id="4ab73cc42152aafd9cdeb94678eddca0f26c65b2" translate="yes" xml:space="preserve">
          <source>Try the above two steps, and if you find this is what you want then &lt;code&gt;git push&lt;/code&gt;.</source>
          <target state="translated">Попробуйте описанные выше два шага, и если вы обнаружите, что это то, что вам нужно, то &lt;code&gt;git push&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ce0fc03dd48af3f60e24d84c9f03e10d33ab29f2" translate="yes" xml:space="preserve">
          <source>Undo published commits with new commits</source>
          <target state="translated">Отменить опубликованные коммиты с новыми коммитами</target>
        </trans-unit>
        <trans-unit id="e357f037417b79c1f53b14e55b45586d58a3a8fc" translate="yes" xml:space="preserve">
          <source>Working on your own and just want it to work? Follow these instructions below, they&amp;rsquo;ve worked reliably for me and many others for years.</source>
          <target state="translated">Работаете самостоятельно и просто хотите, чтобы это работало? Следуйте приведенным ниже инструкциям, они надежно работали для меня и многих других в течение многих лет.</target>
        </trans-unit>
        <trans-unit id="bfbc1492c175741aec1b19e36c158372c2acb248" translate="yes" xml:space="preserve">
          <source>Working with others? Git is complicated. Read the comments below this answer before you do something rash.</source>
          <target state="translated">Работаешь с другими? Гит-это сложно.Прочтите комментарии ниже этого ответа,прежде чем делать что-то необдуманное.</target>
        </trans-unit>
        <trans-unit id="6fc5b5d4f9f58f2ada5512e1323131052ffa47d8" translate="yes" xml:space="preserve">
          <source>You can always use the &lt;code&gt;reflog&lt;/code&gt; as well. &lt;code&gt;git reflog&lt;/code&gt; will display any change which updated the &lt;code&gt;HEAD&lt;/code&gt; and checking out the desired reflog entry will set the &lt;code&gt;HEAD&lt;/code&gt; back to this commit.</source>
          <target state="translated">Вы также всегда можете использовать &lt;code&gt;reflog&lt;/code&gt; . &lt;code&gt;git reflog&lt;/code&gt; отобразит все изменения, которые обновили &lt;code&gt;HEAD&lt;/code&gt; , а проверка нужной записи reflog вернет &lt;code&gt;HEAD&lt;/code&gt; к этому коммиту.</target>
        </trans-unit>
        <trans-unit id="b8c8bcea16c9481768b294a2ff0bb5893fbd2b22" translate="yes" xml:space="preserve">
          <source>You can complete all these initial steps yourself and push back to the Git repository.</source>
          <target state="translated">Вы можете выполнить все эти начальные шаги самостоятельно и вернуться в Git-репозиторий.</target>
        </trans-unit>
        <trans-unit id="46d4a73bb0c7e90909ecbe27018a35659e540a96" translate="yes" xml:space="preserve">
          <source>You can do this by the following two commands:</source>
          <target state="translated">Это можно сделать следующими двумя командами:</target>
        </trans-unit>
        <trans-unit id="87a7f8aebc0121bb14d36842cc030ba7f7a06899" translate="yes" xml:space="preserve">
          <source>You first need to remove &lt;em&gt;develop&lt;/em&gt; from &lt;em&gt;origin&lt;/em&gt;:</source>
          <target state="translated">Сначала нужно удалить &lt;em&gt;развернутый объект&lt;/em&gt; из &lt;em&gt;источника&lt;/em&gt; :</target>
        </trans-unit>
        <trans-unit id="585c85b4dfbefb384c267da9a02b846ad39914b9" translate="yes" xml:space="preserve">
          <source>You may also find this answer helpful in this case:</source>
          <target state="translated">Вы также можете найти этот ответ полезным в данном случае:</target>
        </trans-unit>
        <trans-unit id="d87b94b215284e1aa841827bb6562b76a92a53bb" translate="yes" xml:space="preserve">
          <source>You then have two versions on your system... you can examine or copy or modify files of interest, or whatever, from the previous commit. You can completely discard the files under &quot;my project - copy&quot;, if you have decided the new work since the restored commit was going nowhere...</source>
          <target state="translated">Затем у вас в системе есть две версии...вы можете просмотреть,скопировать или изменить интересующие вас файлы,или что-то ещё из предыдущего коммита.Вы можете полностью отказаться от файлов в разделе &quot;мой проект-копирование&quot;,если вы решили новую работу с тех пор,как восстановленный коммит никуда не делся...</target>
        </trans-unit>
        <trans-unit id="0f2e318b1935d70cae2d23c7890a20999cf17577" translate="yes" xml:space="preserve">
          <source>and then do &lt;code&gt;git push&lt;/code&gt;</source>
          <target state="translated">а затем сделать &lt;code&gt;git push&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9ce7c8c60b9f299878c97f98c24b38f49d1d7943" translate="yes" xml:space="preserve">
          <source>or &lt;code&gt;git reset --hard HEAD~2&lt;/code&gt; or whatever.</source>
          <target state="translated">или &lt;code&gt;git reset --hard HEAD~2&lt;/code&gt; или что-то еще.</target>
        </trans-unit>
        <trans-unit id="b8f6644189516425ecbec15a26511b2a1d063607" translate="yes" xml:space="preserve">
          <source>till you get the required commit. To make the HEAD point to that, do</source>
          <target state="translated">пока ты не получишь требуемое обязательство.Чтобы заставить Головореда указать на это,сделайте.</target>
        </trans-unit>
        <trans-unit id="47c1a7bde6fea0f98c36d82121612c5d695d52d3" translate="yes" xml:space="preserve">
          <source>where HEAD is the last commit in your current branch</source>
          <target state="translated">где HEAD-последний коммит в вашем текущем филиале.</target>
        </trans-unit>
        <trans-unit id="31057de6b748ee9376193a5a0bb4847fa68394d5" translate="yes" xml:space="preserve">
          <source>where HEAD points to the latest commit at you current branch.</source>
          <target state="translated">где HEAD указывает на последний коммит в вашем текущем филиале.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
