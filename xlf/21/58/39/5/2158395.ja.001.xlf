<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/2158395">
    <body>
      <group id="2158395">
        <trans-unit id="5fbf4a00d6a882121a802d2725d98940aaaeb108" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Edit:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Edit:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b94d16302cf154c51472d68c89f80eccc9bf39da" translate="yes" xml:space="preserve">
          <source>A little more concise, but pretty much the same.</source>
          <target state="translated">もう少し簡潔に言うと、かなり同じです。</target>
        </trans-unit>
        <trans-unit id="2e1e92ffc64201504c5a6eff5c1414fff1c14c5b" translate="yes" xml:space="preserve">
          <source>Also note that this is equivalent to a DFS in a tree where some nodes are sublists &lt;code&gt;A = [1, 2]&lt;/code&gt; and some are simple items: &lt;code&gt;0, 1, 2, 3, 4&lt;/code&gt; (for &lt;code&gt;L = [0, [1,2], 3, 4]&lt;/code&gt;). The tree looks like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは、一部のノードがサブリスト&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A = [1, 2]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あり、一部が単純なアイテム&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;であるツリー内のDFSと同等であることに注意してください&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt; &lt;code&gt;0, 1, 2, 3, 4&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（&lt;/font&gt;&lt;/font&gt; &lt;code&gt;L = [0, [1,2], 3, 4]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ツリーは次のようになります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="39ae53263fd5d3fc2ad1e4969d6289c8ceffa883" translate="yes" xml:space="preserve">
          <source>Also note:</source>
          <target state="translated">また、注意してください。</target>
        </trans-unit>
        <trans-unit id="b988bb020235fef9787bc47fbe5d47be55ac3d74" translate="yes" xml:space="preserve">
          <source>Also, notice that in &lt;code&gt;is_list_like&lt;/code&gt; I have &lt;code&gt;isinstance(item, list)&lt;/code&gt;, which could be changed to handle more input types, here I just wanted to have the simplest version where (iterable) is just a list. But you could also do that:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;また、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;is_list_like&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;には&lt;/font&gt;&lt;/font&gt; &lt;code&gt;isinstance(item, list)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、より多くの入力タイプを処理するように変更できることに注意してください。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;しかし、それを行うこともできます：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4cc5ad86f665601e560433987cb7417b01efca95" translate="yes" xml:space="preserve">
          <source>Although &lt;code&gt;flatten&lt;/code&gt; can handle infinite generators, it can not handle infinite nesting:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;flatten&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;無限の発電機を扱うことができ、それは無限のネストを処理することはできません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="29c9eeb6d8077aaaaf78d4e63ffe4b8b711c773d" translate="yes" xml:space="preserve">
          <source>Although an elegant and very pythonic answer has been selected I would present my solution just for the review:</source>
          <target state="translated">エレガントで非常にピソニックな答えが選ばれましたが、私はレビューのためだけに私の解答を提示します。</target>
        </trans-unit>
        <trans-unit id="79005deb294f385cf51ff98cdbfe50b8975ffaaa" translate="yes" xml:space="preserve">
          <source>Although, if you knew you would have square brackets in your list in strings, like &lt;code&gt;[[1, 2], &quot;[3, 4] and [5]&quot;]&lt;/code&gt;, you would have to do something else.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;[[1, 2], &quot;[3, 4] and [5]&quot;]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ように、リスト内の角括弧が文字列であることがわかっている場合は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、別のことを行う必要があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ea99bd96f840dbdf67557a459fb8a821cca61dbf" translate="yes" xml:space="preserve">
          <source>Basically, it converts the nested list to a string, uses a regex to strip out the nested syntax, and then converts the result back to a (flattened) list.</source>
          <target state="translated">基本的には、入れ子になったリストを文字列に変換し、正規表現を使って入れ子になった構文を削除し、その結果を(平坦化された)リストに変換します。</target>
        </trans-unit>
        <trans-unit id="7bce1bc51c3449501719ffd5a57d46f6c16b5528" translate="yes" xml:space="preserve">
          <source>Basically, it's the exact same thing as finding the treasure. The dungeon is the &lt;em&gt;computer's memory&lt;/em&gt;, your goal now is not to find a treasure but to &lt;em&gt;compute some function&lt;/em&gt; (find &lt;em&gt;f(x)&lt;/em&gt; for a given &lt;em&gt;x&lt;/em&gt;). The indications simply are sub-routines that will help you solving &lt;em&gt;f(x)&lt;/em&gt;. Your strategy is the same as the &lt;em&gt;call stack&lt;/em&gt; strategy, the notebook is the stack, the rooms are the functions' return addresses:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;基本的に、それは宝物を見つけることとまったく同じです。ダンジョンは&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コンピュータのメモリです&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。あなたの目標は、宝物を見つけることではなく、&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;いくつかの関数&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;計算することです&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;与えられた&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;x&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に対して&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;f（x）&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;見つけます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）。表示は、単に&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;f（x）&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を解くのに役立つサブルーチンです&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。あなたの戦略は&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コールスタック&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;戦略&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と同じです、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ノートブックはスタック、部屋は関数のリターンアドレスです：&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="00e8a0bc89e1685335629d80defa1da3e4b13655" translate="yes" xml:space="preserve">
          <source>Call stack size and recursive programming (dungeon analogy)</source>
          <target state="translated">呼び出しスタックサイズと再帰的プログラミング(ダンジョンのアナロジー</target>
        </trans-unit>
        <trans-unit id="fe08d2e421da75ca59dd2aeab5263533ae932acd" translate="yes" xml:space="preserve">
          <source>Deprecated since version 2.6: The compiler package has been removed in Python 3.</source>
          <target state="translated">バージョン2.6より非推奨:Python 3ではコンパイラパッケージが削除されました。</target>
        </trans-unit>
        <trans-unit id="f5169c84497de3aea74f7da9e7e177d1427e736b" translate="yes" xml:space="preserve">
          <source>Enjoy!</source>
          <target state="translated">Enjoy!</target>
        </trans-unit>
        <trans-unit id="6e0393cc0cfaf97f6bbc102a7c484c707418a0a6" translate="yes" xml:space="preserve">
          <source>Executing a recursive program</source>
          <target state="translated">再帰的プログラムの実行</target>
        </trans-unit>
        <trans-unit id="cffa8ae998bde40c61124489d1d7d218e9c222c6" translate="yes" xml:space="preserve">
          <source>Finding the treasure and exit</source>
          <target state="translated">宝物探しと出口</target>
        </trans-unit>
        <trans-unit id="89d4cc02db3c116e3e5e4b9ef0aa736c4918c1e7" translate="yes" xml:space="preserve">
          <source>Flatten an irregular list of lists</source>
          <target state="translated">不規則なリストを平らにする</target>
        </trans-unit>
        <trans-unit id="dc5881a87e62d2dd4244fc1bbeb8669c4db39c54" translate="yes" xml:space="preserve">
          <source>For the implementation, in python you can simplify a little bit by using iterators instead of simple lists. References to the (sub)iterators will be used to store &lt;em&gt;sublists return addresses&lt;/em&gt; (instead of having both the list address and the index). This is not a big difference but I feel this is more readable (and also a bit faster):</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;実装では、Pythonでは単純なリストの代わりにイテレータを使用することで、少し単純化できます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（サブ）イテレータへの参照は、（&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;リストアドレスとインデックスの両方を持つのではなく）&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サブリストの戻りアドレス&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を格納するために使用され&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは大きな違いではありませんが、これはより読みやすく（そして少し速く）感じます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="14b3b87237e51935f59f6a45980acb7e07912e3d" translate="yes" xml:space="preserve">
          <source>Generator using recursion and duck typing (updated for Python 3):</source>
          <target state="translated">再帰とダック型付けを使ったジェネレータ(Python 3用に更新されました。</target>
        </trans-unit>
        <trans-unit id="29a3d6e99377c3e58e92fa6570cbcd314d1369e0" translate="yes" xml:space="preserve">
          <source>Generator version of @unutbu's non-recursive solution, as requested by @Andrew in a comment:</source>
          <target state="translated">コメントで @Andrew さんにリクエストされた @unutbu さんの非再帰的解のジェネレーター版。</target>
        </trans-unit>
        <trans-unit id="de414681c4d86a10bca5d7259bca22e7cc442e38" translate="yes" xml:space="preserve">
          <source>Here are some examples demonstrating its use:</source>
          <target state="translated">ここでは、その使用例をご紹介します。</target>
        </trans-unit>
        <trans-unit id="d761607d7fd53dc85f57f027dcb4d53b118a4328" translate="yes" xml:space="preserve">
          <source>Here is another py2 approach, Im not sure if its the fastest or the most elegant nor safest ...</source>
          <target state="translated">ここでは別のpy2のアプローチを紹介します。</target>
        </trans-unit>
        <trans-unit id="f8f1df1a614a50ef001234abdbb4b19c8fcde356" translate="yes" xml:space="preserve">
          <source>Here is my functional version of recursive flatten which handles both tuples and lists, and lets you throw in any mix of positional arguments. Returns a generator which produces the entire sequence in order, arg by arg:</source>
          <target state="translated">これはタプルとリストの両方を処理し、任意の位置引数の組み合わせが可能な再帰的平坦化の機能版です。arg by argの順にシーケンス全体を生成するジェネレータを返します。</target>
        </trans-unit>
        <trans-unit id="192708e2b1612f7e2636733beef7d6446a1d0792" translate="yes" xml:space="preserve">
          <source>Here's a simple function that flattens lists of arbitrary depth. No recursion, to avoid stack overflow.</source>
          <target state="translated">任意の深さのリストを平坦化するシンプルな関数があります。スタックオーバーフローを避けるため、再帰はありません。</target>
        </trans-unit>
        <trans-unit id="cca580c17fbc89a2f6cb82d0bd1f19329e72e277" translate="yes" xml:space="preserve">
          <source>Here's another answer that is even more interesting...</source>
          <target state="translated">ここでさらに面白い回答が...。</target>
        </trans-unit>
        <trans-unit id="4d57f3784cbadc37b4cfe69affdca1585e5114eb" translate="yes" xml:space="preserve">
          <source>Here's the &lt;code&gt;compiler.ast.flatten&lt;/code&gt; implementation in 2.7.5:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2.7.5 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の&lt;/font&gt;&lt;/font&gt; &lt;code&gt;compiler.ast.flatten&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;実装は次のとおりです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="86313aca1240327c8110d73a59910a2e4748a8eb" translate="yes" xml:space="preserve">
          <source>How to avoid this issue?</source>
          <target state="translated">この問題を回避するには?</target>
        </trans-unit>
        <trans-unit id="73311ad0ce2612a0bac165fe5b4f0d2143fe420c" translate="yes" xml:space="preserve">
          <source>I actually adapted this from some practice Scheme code that I had written a while back.</source>
          <target state="translated">実はこれは、以前に書いたSchemeの練習用のコードを参考にしたものです。</target>
        </trans-unit>
        <trans-unit id="1fe7bbe6a54abd708286ebfd2590e527d89fb6bf" translate="yes" xml:space="preserve">
          <source>I am aware that there are already many awesome answers but i wanted to add an answer that uses the functional programming method of solving the question. In this answer i make use of double recursion :</source>
          <target state="translated">すでに多くの素晴らしい解答があることは承知していますが、問題を解く関数型プログラミングの方法を使った解答を追加したいと思いました。この答えでは、私は二重再帰を使用しています。</target>
        </trans-unit>
        <trans-unit id="25ff56d30963a5a4f97668f1bc5fc99613a35d75" translate="yes" xml:space="preserve">
          <source>I didn't go through all the already available answers here, but here is a one liner I came up with, borrowing from lisp's way of first and rest list processing</source>
          <target state="translated">ここで既に利用可能な答えをすべて調べたわけではありませんが、ここでは私が思いついた一本のライナーを紹介します。</target>
        </trans-unit>
        <trans-unit id="63f84972799a9df278bff951da68e8c61c51e0db" translate="yes" xml:space="preserve">
          <source>I disagree with the previous implementation. The problem is that you should not be able to flatten something that is not an iterable. It is confusing and gives the wrong impression of the argument.</source>
          <target state="translated">先の実装には反対です。問題は、イテレート可能なものではないものを平らにしてはいけないということです。紛らわしいし、議論の印象も悪くなる。</target>
        </trans-unit>
        <trans-unit id="d21115e6807ec7e80c0e53149fb1e2549851a053" translate="yes" xml:space="preserve">
          <source>I prefer simple answers.  No generators.  No recursion or recursion limits.  Just iteration:</source>
          <target state="translated">単純な答えを好む。発電機を使わない 再帰や再帰限界もない。反復だけ。</target>
        </trans-unit>
        <trans-unit id="d552c40c91766011979100b463254df3b544b08b" translate="yes" xml:space="preserve">
          <source>I used recursive to solve &lt;strong&gt;&lt;em&gt;nested list with any depth&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ネストされたリストを任意の深さで&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;解決するために再帰を使用しました&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e5f4c4090ed4da94119c438444b23567bd92e579" translate="yes" xml:space="preserve">
          <source>I used the &lt;a href=&quot;http://docs.python.org/library/collections.html#abcs-abstract-base-classes&quot;&gt;Iterable ABC&lt;/a&gt; added in 2.6.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2.6で追加&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;された&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://docs.python.org/library/collections.html#abcs-abstract-base-classes&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Iterable ABC&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ました。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7bfd5938dfd46dcfadadefac4f96e2163678e963" translate="yes" xml:space="preserve">
          <source>I'm new to python and come from a lisp background. This is what I came up with (check out the var names for lulz):</source>
          <target state="translated">私はpythonの初心者で、ispのバックグラウンドを持っています。これは私が思いついたものです(lulzのvar名をチェックしてください)。</target>
        </trans-unit>
        <trans-unit id="02500c7b14b0e35ad9d368d2709d1abf9be8bcbc" translate="yes" xml:space="preserve">
          <source>I'm not sure if this is necessarily quicker or more effective, but this is what I do:</source>
          <target state="translated">必ずしもこれが即効性があるかどうかはわかりませんが、これはこれでいいと思います。</target>
        </trans-unit>
        <trans-unit id="6237c2b268a9a2c753eb0575cba2851d46cd8806" translate="yes" xml:space="preserve">
          <source>I'm surprised no one has thought of this. Damn recursion I don't get the recursive answers that the advanced people here made. anyway here is my attempt on this. caveat is it's very specific to the OP's use case</source>
          <target state="translated">誰もこれを考えていないことに驚いています。くそっ、再帰的な答えは、ここの上級者が作ったような再帰的な答えが出てこないんだ。</target>
        </trans-unit>
        <trans-unit id="f2a887d9dc7263e6673a358d623c71925b5827af" translate="yes" xml:space="preserve">
          <source>I'm the author of the &lt;code&gt;iteration_utilities&lt;/code&gt; library.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私は&lt;/font&gt;&lt;/font&gt; &lt;code&gt;iteration_utilities&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ライブラリーの作成者です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="16f02278b2307a15155e59a48d751351737d9dc0" translate="yes" xml:space="preserve">
          <source>If you like recursion, this might be a solution of interest to you:</source>
          <target state="translated">再帰が好きな方には、興味のある解答になるかもしれません。</target>
        </trans-unit>
        <trans-unit id="ce254e7f2d55496a2a51b2fc7c005e802480f05a" translate="yes" xml:space="preserve">
          <source>If you need to test your solution, you can use this function to generate a simple nested list:</source>
          <target state="translated">ソリューションをテストする必要がある場合は、この関数を使用して単純なネストされたリストを生成することができます。</target>
        </trans-unit>
        <trans-unit id="ae9dea2001369860e6d6e3b472dfa7fe73dd1491" translate="yes" xml:space="preserve">
          <source>If you're not too familiar with the call stack, then maybe the following will help (otherwise you can just scroll to the &lt;strong&gt;Implementation&lt;/strong&gt;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コールスタックに慣れていない場合は、次の方法が役立つ場合があります（それ以外の場合は、&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;実装に&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;スクロールするだけです&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ccc8187609cdbafce2adf1007c1c12e540acf4ff" translate="yes" xml:space="preserve">
          <source>Imagine you enter a huge &lt;em&gt;dungeon with numbered rooms&lt;/em&gt;, looking for a treasure. You don't know the place but you have some &lt;strong&gt;indications&lt;/strong&gt; on how to find the treasure. Each indication is a riddle (difficulty varies, but you can't predict how hard they will be). You decide to think a little bit about a strategy to save time, you make two observations:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;宝物を探して、&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;番号の付いた部屋の&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ある巨大な&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ダンジョンに&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;入ると想像してみてください&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あなたは場所を知りませんが&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、宝物を見つける方法について&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;いくつかの&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;目安&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;があります&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それぞれの兆候はなぞなぞです（難易度はさまざまですが、どれほど難しいかは予測できません）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あなたは時間を節約するための戦略について少し考えることに決め、あなたは2つの観察をします：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8781d615fd77be9578225c40ac67b9471394cced" translate="yes" xml:space="preserve">
          <source>Implementation</source>
          <target state="translated">Implementation</target>
        </trans-unit>
        <trans-unit id="755295b4b33843ecc770e563e6c872d57ade6d17" translate="yes" xml:space="preserve">
          <source>In Python 3, the &lt;code&gt;basestring&lt;/code&gt; is no more, but you can use a tuple of &lt;code&gt;str&lt;/code&gt; and &lt;code&gt;bytes&lt;/code&gt; to get the same effect there.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Python 3では、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;basestring&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はなくなりましたが、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;str&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;bytes&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;タプルを使用し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;て同じ効果を得る&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ことができます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="63ceef487e0ed2113d3415ac21f524ca491369eb" translate="yes" xml:space="preserve">
          <source>In the end, remember that you can't print a infinitely nested list &lt;code&gt;L&lt;/code&gt; using &lt;code&gt;print(L)&lt;/code&gt; because internally it will use recursive calls to &lt;code&gt;__repr__&lt;/code&gt; (&lt;code&gt;RecursionError: maximum recursion depth exceeded while getting the repr of an object&lt;/code&gt;). For the same reason, solutions to &lt;code&gt;flatten&lt;/code&gt; involving &lt;code&gt;str&lt;/code&gt; will fail with the same error message.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最後に、&lt;/font&gt; &lt;code&gt;print(L)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;て無限にネストされたリスト&lt;/font&gt;&lt;/font&gt; &lt;code&gt;L&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;印刷&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;することはできない&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ことに注意してください。これは、内部で&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__repr__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;への再帰呼び出しを使用するため&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（&lt;/font&gt;&lt;/font&gt; &lt;code&gt;RecursionError: maximum recursion depth exceeded while getting the repr of an object&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;同じ理由で、&lt;/font&gt; &lt;code&gt;str&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;含む&lt;/font&gt;&lt;/font&gt; &lt;code&gt;flatten&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ソリューション&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、同じエラーメッセージで失敗します。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fa8151a1aab9fc8bab222f58152b8c8370bb3f5f" translate="yes" xml:space="preserve">
          <source>In this example, the stack maximum size is 2, because the input list (and therefore the tree) have depth 2.</source>
          <target state="translated">この例では、入力リスト(したがってツリー)の深さが2であるため、スタックの最大サイズは2となります。</target>
        </trans-unit>
        <trans-unit id="cc4e9d94220d7cd5461a09f4298103ba3f39a77f" translate="yes" xml:space="preserve">
          <source>Is this the best model? Did I overlook something? Any problems?</source>
          <target state="translated">これがベストモデルなのか?何か見落としていたのでしょうか?何か問題でも?</target>
        </trans-unit>
        <trans-unit id="9be35c6488088a4b9b217f398fdaa6add15ed10f" translate="yes" xml:space="preserve">
          <source>It can ignore any specific (or derived) type you would like, it returns an iterator, so you can convert it to any specific container such as list, tuple, dict or simply consume it in order to reduce memory footprint, for better or worse it can handle initial non-iterable objects such as int ...</source>
          <target state="translated">特定の(あるいは派生した)型を無視することができ、イテレータを返すので、リスト、タプル、ディクトなどの特定のコンテナに変換したり、メモリフットプリントを削減するために単純に消費したりすることができます。</target>
        </trans-unit>
        <trans-unit id="3e28f912c3bce57b5166b693a2a552f23ab60528" translate="yes" xml:space="preserve">
          <source>It was fun trying to create a function that could flatten irregular list in Python, but of course that is what Python is for (to make programming fun). The following generator works fairly well with some caveats:</source>
          <target state="translated">Pythonで不規則なリストを平坦化する関数を作ろうとするのは楽しかったのですが、もちろんPythonはそのためにあるのです(プログラミングを楽しくするために)。以下のジェネレータは、いくつかの注意点がありますが、かなりうまく動作します。</target>
        </trans-unit>
        <trans-unit id="4bb90b9d131e83bfcc3336776d86f58c4d625af1" translate="yes" xml:space="preserve">
          <source>It will flatten datatypes that you might want left alone (like &lt;code&gt;bytearray&lt;/code&gt;, &lt;code&gt;bytes&lt;/code&gt;, and &lt;code&gt;str&lt;/code&gt; objects). Also, the code relies on the fact that requesting an iterator from a non-iterable raises a &lt;code&gt;TypeError&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そのままにしておきたいデータ型（&lt;/font&gt;&lt;/font&gt; &lt;code&gt;bytearray&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;str&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;オブジェクトなど）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;をフラット化します&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;また、コードは、非反復可能オブジェクトから反復子を要求すると&lt;/font&gt;&lt;/font&gt; &lt;code&gt;TypeError&lt;/code&gt; が発生&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;するという事実に依存しています&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1e7334089e0c1aa21da068f2629fd98c0ba9bf10" translate="yes" xml:space="preserve">
          <source>It's an iterator so you need to iterate it (for example by wrapping it with &lt;code&gt;list&lt;/code&gt; or using it in a loop). Internally it uses an iterative approach instead of an recursive approach and it's written as C extension so it can be faster than pure python approaches:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これはイテレータなので、反復する必要があります（たとえば、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;list&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ラップする&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;か、ループで使用するなど）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;内部的には、再帰的アプローチではなく反復的アプローチを使用し、C拡張として記述されているため、純粋なpythonアプローチよりも高速です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="327d7cc30ef399ae94d35dcc5692804d9ea4a921" translate="yes" xml:space="preserve">
          <source>It's hard (long) to find the treasure as you'll have to solve (potentially hard) riddles to get there.</source>
          <target state="translated">宝物を見つけるには、謎解きをしなければならないので、難しい(長い)。</target>
        </trans-unit>
        <trans-unit id="42a9a19d3d56bb3334c62df22e60fdada2dcdcd2" translate="yes" xml:space="preserve">
          <source>Just use a &lt;a href=&quot;https://funcy.readthedocs.io/en/stable/&quot;&gt;&lt;code&gt;funcy&lt;/code&gt;&lt;/a&gt; library:
&lt;code&gt;pip install funcy&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;https://funcy.readthedocs.io/en/stable/&quot;&gt; &lt;code&gt;funcy&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ライブラリを&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用する&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;だけ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です： &lt;/font&gt;&lt;/font&gt; &lt;code&gt;pip install funcy&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5e972ca2d74e4344909c9d769a43e177bf4b73da" translate="yes" xml:space="preserve">
          <source>My solution:</source>
          <target state="translated">私の解決策。</target>
        </trans-unit>
        <trans-unit id="bad516f05c5f73910361629673802985b60ee859" translate="yes" xml:space="preserve">
          <source>Note most of the heavy lifting is done in C, since as far as I know thats how itertools are implemented, so while it is recursive, AFAIK it isn't bounded by python recursion depth since the function calls are happening in C, though this doesn't mean you are bounded by memory, specially in OS X where its stack size has a hard limit as of today (OS X Mavericks) ...</source>
          <target state="translated">私が知っている限りでは、それは itertools がどのように実装されているかを知っているので、再帰的ではありますが、AFAIK によれば、関数呼び出しは C で行われているので、Python の再帰の深さには縛られませんが、これはメモリに縛られるという意味ではありません。</target>
        </trans-unit>
        <trans-unit id="ed6380feaa8a9c7ce4fafd4f95fc7270dbb5cb2e" translate="yes" xml:space="preserve">
          <source>Once the treasure found, returning to the entrance may be easy, you just have to use the same path in the other direction (though this needs a bit of memory to recall your path).</source>
          <target state="translated">宝物を見つけたら、入り口に戻るのは簡単かもしれませんが、他の方向にも同じ道を使う必要があります(これは自分の道を思い出すのに少し記憶力が必要ですが)。</target>
        </trans-unit>
        <trans-unit id="d0cd477d78798b3f11b8ce3d44411f3dfe6dd415" translate="yes" xml:space="preserve">
          <source>Or perhaps even better, an iterator. The only solution I saw that works for an arbitrary nesting is found &lt;a href=&quot;https://stackoverflow.com/questions/406121&quot;&gt;in this question&lt;/a&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あるいは、おそらくもっと良いのはイテレータです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;任意のネストで機能することがわかっ&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/406121&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;た&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;唯一の解決策は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、この質問にあり&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2be78dba5189bfabfa4dc4f74e5681909c29d399" translate="yes" xml:space="preserve">
          <source>Or without chaining:</source>
          <target state="translated">鎖がない場合も。</target>
        </trans-unit>
        <trans-unit id="195bb83dcdc0362b1e06e323cc01a996b7dc71a5" translate="yes" xml:space="preserve">
          <source>Please tell how good or bad this code is?</source>
          <target state="translated">このコードの良し悪しを教えてください。</target>
        </trans-unit>
        <trans-unit id="85428b26db4c1794e05f4269b0c513309de817c9" translate="yes" xml:space="preserve">
          <source>Python 2</source>
          <target state="translated">Python 2</target>
        </trans-unit>
        <trans-unit id="0101a74afd88d622354b05b2b6416e029264bbac" translate="yes" xml:space="preserve">
          <source>Python 3</source>
          <target state="translated">パイソン 3</target>
        </trans-unit>
        <trans-unit id="b1a4bdad53d496f016539994db00ab42bad7ab3a" translate="yes" xml:space="preserve">
          <source>Seems to work. Test:</source>
          <target state="translated">うまくいくようです。テストだ</target>
        </trans-unit>
        <trans-unit id="b017e65239c7000352a2a4d2945b86297a105e82" translate="yes" xml:space="preserve">
          <source>Slightly simplified version of this generator:</source>
          <target state="translated">このジェネレーターの少し簡略化されたバージョン。</target>
        </trans-unit>
        <trans-unit id="4e6420f44801052d8450e03e5a463a2b1ebe007c" translate="yes" xml:space="preserve">
          <source>So after i define function combine_nlist, it is easy to use this function do flatting. Or you can combine it into one function. I like my solution because it can be applied to any nested list.</source>
          <target state="translated">そこで、関数combine_nlistを定義しておくと、この関数を使って平坦化を行うのが簡単になります。あるいは、これを一つの関数にまとめることもできます。これはどんなネストされたリストにも適用できるので気に入っています。</target>
        </trans-unit>
        <trans-unit id="e66b79cc8c23c3de703aca50e255ff68402ff67a" translate="yes" xml:space="preserve">
          <source>Test-run</source>
          <target state="translated">Test-run</target>
        </trans-unit>
        <trans-unit id="0554905ed68d85c07973d301a7834f6460a2979e" translate="yes" xml:space="preserve">
          <source>Testing and remarks on other implementations</source>
          <target state="translated">他の実装のテストと備考</target>
        </trans-unit>
        <trans-unit id="9b290a7129085c8c8ce8c31773fae071246e9164" translate="yes" xml:space="preserve">
          <source>Testing the generator works fine with the list that was provided. However, the new code will raise a &lt;code&gt;TypeError&lt;/code&gt; when a non-iterable object is given to it. Example are shown below of the new behavior.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ジェネレーターのテストは、提供されたリストで正常に機能します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ただし、新しいコードでは、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;反復不可能なオブジェクトが渡されると&lt;/font&gt;&lt;/font&gt; &lt;code&gt;TypeError&lt;/code&gt; が発生&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;新しい動作の例を以下に示します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="532857664f8e776457b2a0176cabc53f62598867" translate="yes" xml:space="preserve">
          <source>That's actually pretty simple: &quot;don't use recursion if you don't know how deep it can go&quot;. That's not always true as in some cases, &lt;a href=&quot;https://stackoverflow.com/questions/310974/what-is-tail-call-optimization&quot;&gt;Tail Call recursion can be Optimized (TCO)&lt;/a&gt;. But in python, this is not the case, and even &quot;well written&quot; recursive function will &lt;strong&gt;not&lt;/strong&gt; optimize stack use. There is an interesting post from Guido about this question: &lt;a href=&quot;http://neopythonic.blogspot.com/2009/04/tail-recursion-elimination.html&quot;&gt;&lt;em&gt;Tail Recursion Elimination&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それは実際には非常に単純です：「それがどれだけ深く行くことができるかわからない場合は再帰を使用しないでください」。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;場合によっては、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/310974/what-is-tail-call-optimization&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;テールコールの再帰を最適化（TCO）できるため&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、これは常に正しいとは限りません&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;しかし、Pythonではこれは当てはまりません。「よく書かれた」再帰関数でさえ、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;スタックの使用を最適化し&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ません&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この質問についてのGuidoからの興味深い投稿があります&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://neopythonic.blogspot.com/2009/04/tail-recursion-elimination.html&quot;&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。TailRecursion Elimination&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5702b5681f002e1c77cf7f5d0d3515813c4410e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flatten&lt;/code&gt; function here turns the list into a string, takes out &lt;strong&gt;all&lt;/strong&gt; of the square brackets, attaches square brackets back onto the ends, and turns it back into a list.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここの&lt;/font&gt;&lt;/font&gt; &lt;code&gt;flatten&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;関数は、リストを文字列に変換し、&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;すべて&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の角かっこ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を取り出し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、角かっこを両端に付加し、リストに戻します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8528f7ed2c3c94ffb0211e58b7f2acb86af244a5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;yield from&lt;/code&gt; operator returns an item from a generator one at a time. This &lt;a href=&quot;https://docs.python.org/3/whatsnew/3.3.html#pep-380&quot;&gt;syntax for delegating to a subgenerator&lt;/a&gt; was added in 3.3</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;演算子&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の&lt;/font&gt;&lt;/font&gt; &lt;code&gt;yield from&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、ジェネレーターから一度に1つのアイテムを返します。&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.python.org/3/whatsnew/3.3.html#pep-380&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サブジェネレーター&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;委任するための&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;構文&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は3.3で追加されました&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="154968401f3a779a0b98b804cf8977b61118a1da" translate="yes" xml:space="preserve">
          <source>The DFS traversal pre-order is: L, 0, A, 1, 2, 3, 4. Remember, in order to implement an iterative DFS you also &quot;need&quot; a stack. The implementation I proposed before result in having the following states (for the &lt;code&gt;stack&lt;/code&gt; and the &lt;code&gt;flat_list&lt;/code&gt;):</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;DFSトラバーサルの事前注文は、L、0、A、1、2、3、4です。反復DFSを実装するには、スタックも「必要」であることに注意してください。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;以前に提案した実装では、次の状態になり&lt;/font&gt;&lt;/font&gt; &lt;code&gt;stack&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;スタック&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;flat_list&lt;/code&gt; の場合&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="135a1768cd4daf87f3b12fac9dbe360fe7259fd6" translate="yes" xml:space="preserve">
          <source>The code is:</source>
          <target state="translated">コードは</target>
        </trans-unit>
        <trans-unit id="9bb4d095e6d13b019637c537fa9e20277e4e2a63" translate="yes" xml:space="preserve">
          <source>The easiest way is to use the &lt;a href=&quot;https://github.com/metagriffin/morph&quot;&gt;morph&lt;/a&gt; library using &lt;code&gt;pip install morph&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最も簡単な方法は、&lt;/font&gt; &lt;code&gt;pip install morph&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用して&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/metagriffin/morph&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;モーフ&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ライブラリを使用&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;すること&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9730b9e2745e5198081261761f9462f7733b005a" translate="yes" xml:space="preserve">
          <source>The flattened list is then returned.</source>
          <target state="translated">そして、平坦化されたリストが返されます。</target>
        </trans-unit>
        <trans-unit id="b6b91a4964cc48f9f9afa9ebc468a09d9ec028d7" translate="yes" xml:space="preserve">
          <source>The following generator is almost the same as the first but does not have the problem of trying to flatten a non-iterable object. It fails as one would expect when an inappropriate argument is given to it.</source>
          <target state="translated">次のジェネレータは、最初のものとほぼ同じですが、文字化不可能なオブジェクトを平らにしようとする問題はありません。これは、不適切な引数が与えられた場合に期待されるように失敗します。</target>
        </trans-unit>
        <trans-unit id="bf5ea765f8026469fe3f7a96d57d282354586b40" translate="yes" xml:space="preserve">
          <source>The inner for loop iterates through the list.  If it finds a list element, it (1) uses list.extend() to flatten that part one level of nesting and (2) switches keepChecking to True.  keepchecking is used to control the outer while loop.  If the outer loop gets set to true, it triggers the inner loop for another pass.</source>
          <target state="translated">内側の for ループはリストを繰り返し処理します。リスト要素を見つけた場合、(1)list.extend()を使用してその部分を1レベルのネスティングで平坦化し、(2)keepCheckingをTrueに切り替えます。外側のループがtrueに設定された場合、内側のループをトリガーにして別のパスを実行します。</target>
        </trans-unit>
        <trans-unit id="072c6ff6dd9019102323263f9272dee7bb233cef" translate="yes" xml:space="preserve">
          <source>The problem you encountered in the dungeon will be the same here, the call stack has a finite size (here 1000) and therefore, if you enter too many functions without returning back then you'll fill the call stack and have an error that look like &lt;strike&gt;&quot;Dear adventurer, I'm very sorry but your notebook is full&quot;&lt;/strike&gt;: &lt;code&gt;RecursionError: maximum recursion depth exceeded&lt;/code&gt;. Note that you don't need recursion to fill the call stack, but it's very unlikely that a non-recursive program call 1000 functions without ever returning. It's important to also understand that once you returned from a function, the call stack is freed from the address used (hence the name &quot;stack&quot;, return address are pushed in before entering a function and pulled out when returning). In the special case of a simple recursion (a function &lt;code&gt;f&lt;/code&gt; that call itself once -- over and over --) you will enter &lt;code&gt;f&lt;/code&gt; over and over until the computation is finished (until the treasure is found) and return from &lt;code&gt;f&lt;/code&gt; until you go back to the place where you called &lt;code&gt;f&lt;/code&gt; in the first place. The call stack will never be freed from anything until the end where it will be freed from all return addresses one after the other.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ダンジョンで発生した問題はここでも同じです。コールスタックのサイズは有限（ここでは1000）であるため、戻り値を返さずに関数を入力しすぎると、コールスタックがいっぱいになり、エラーが発生します。以下のように&lt;/font&gt;&lt;/font&gt;&lt;strike&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;「親愛なる冒険家、私は非常に残念ですが、あなたのノートブックはいっぱいです」&lt;/font&gt;&lt;/font&gt;&lt;/strike&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt; &lt;code&gt;RecursionError: maximum recursion depth exceeded&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。呼び出しスタックを満たすために再帰は必要ありませんが、非再帰プログラムが戻ることなく1000関数を呼び出すことはほとんどありません。関数から戻ると、コールスタックは使用されたアドレスから解放されることを理解することも重要です（そのため、「スタック」という名前で、関数に入る前に戻りアドレスがプッシュされ、戻り時にプルされます）。簡単な再帰の特殊な場合には（関数&lt;/font&gt;&lt;/font&gt; &lt;code&gt;f&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; -何度も-その呼び出し自体に一度）あなたは入ります&lt;/font&gt;&lt;/font&gt; &lt;code&gt;f&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;計算は（宝が見つかるまで）が終了してから復帰するまで何度も&lt;/font&gt;&lt;/font&gt; &lt;code&gt;f&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;君が行くまで&lt;/font&gt; &lt;code&gt;f&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;を呼び出した場所に戻る&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そもそも。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;呼び出しスタックは、すべての戻りアドレスから順番に解放されるまで、何も解放されません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fccb286979da55d6c6e125dbea7209d07f046f87" translate="yes" xml:space="preserve">
          <source>There are better, faster methods (If you've reached here, you have seen them already)</source>
          <target state="translated">より良い、より速い方法があります(ここまで来た方はもう見たことがあると思いますが</target>
        </trans-unit>
        <trans-unit id="f9caba178eb8922f0394406ccdde49ee49df43a0" translate="yes" xml:space="preserve">
          <source>There is a technique that you can use to make any recursive function iterative, this technique we could call &lt;em&gt;&lt;strong&gt;bring your own notebook&lt;/strong&gt;&lt;/em&gt;. For example, in our particular case we simply are exploring a list, entering a room is equivalent to entering a sublist, the question you should ask yourself is &lt;em&gt;how can I get back from a list to its parent list?&lt;/em&gt; The answer is not that complex, repeat the following until the &lt;code&gt;stack&lt;/code&gt; is empty:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;再帰的な関数を反復的に実行するために使用できる手法があります。この手法は&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、独自のノートブックを持っていく&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ことができます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;たとえば、私たちが特定のケースで単にリストを探索している場合、部屋を入力することはサブリストを入力することと同じです。自問する必要があるのは&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、リストからその親リストに戻る方法です。&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;答えはそれほど複雑ではありません。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;stack&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が空になる&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;まで以下を繰り返し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a76c19332391eecb7270208d09b08dff1cefe111" translate="yes" xml:space="preserve">
          <source>This considers strings as &quot;simple items&quot; and therefore &lt;code&gt;flatten_iter([[&quot;test&quot;, &quot;a&quot;], &quot;b])&lt;/code&gt; will return &lt;code&gt;[&quot;test&quot;, &quot;a&quot;, &quot;b&quot;]&lt;/code&gt; and not &lt;code&gt;[&quot;t&quot;, &quot;e&quot;, &quot;s&quot;, &quot;t&quot;, &quot;a&quot;, &quot;b&quot;]&lt;/code&gt;. Remark that in that case, &lt;code&gt;iter(item)&lt;/code&gt; is called twice on each item, let's pretend it's an exercise for the reader to make this cleaner.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは文字列を「単純な項目」と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;flatten_iter([[&quot;test&quot;, &quot;a&quot;], &quot;b])&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ため、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;flatten_iter（[[&quot;test&quot;、 &quot;a&quot;]、 &quot;b]）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;/font&gt; &lt;code&gt;[&quot;test&quot;, &quot;a&quot;, &quot;b&quot;]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を返し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;[&quot;t&quot;, &quot;e&quot;, &quot;s&quot;, &quot;t&quot;, &quot;a&quot;, &quot;b&quot;]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は返さ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ない&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;e &quot;、&quot; s &quot;、&quot; t &quot;、&quot; a &quot;、&quot; b &quot;]&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。その場合、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;iter(item)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が各アイテムで2回呼び出される&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ことに注意して&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ください&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;読者がこのクリーナーを作成する練習であるとしましょう。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="35450707d84bb0ce84709e530c6a2b600bd4d904" translate="yes" xml:space="preserve">
          <source>This is a simple implement of flatten on python2</source>
          <target state="translated">これは python2 で flatten を実装したものです。</target>
        </trans-unit>
        <trans-unit id="2e4799018e16d870c6e5e1422846257d94aa57ba" translate="yes" xml:space="preserve">
          <source>This version of &lt;code&gt;flatten&lt;/code&gt; avoids python's recursion limit (and thus works with arbitrarily deep, nested iterables). It is a generator which can handle strings and arbitrary iterables (even infinite ones).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このバージョンの&lt;/font&gt;&lt;/font&gt; &lt;code&gt;flatten&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、pythonの再帰制限を回避します（したがって、任意に深くネストされた反復可能オブジェクトで機能します）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは、文字列と任意の反復可能オブジェクト（無限のものも含む）を処理できるジェネレーターです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a2bd5654ac77b479f712d41c3a504f60b62c199d" translate="yes" xml:space="preserve">
          <source>This will flatten a list or dictionary (or list of lists or dictionaries of dictionaries etc). It assumes that the values are strings and it creates a string that concatenates each item with a separator argument. If you wanted you could use the separator to split the result into a list object afterward. It uses recursion if the next value is a list or a string. Use the key argument to tell whether you want the keys or the values (set key to false) from the dictionary object.</source>
          <target state="translated">これは、リストや辞書(またはリストのリストや辞書の辞書など)を平坦化します。これは、値が文字列であると仮定して、各項目を区切り文字の引数で連結した文字列を作成します。必要であれば、結果をリストオブジェクトに分割するためにセパレータを使用することもできます。次の値がリストか文字列かは再帰を使用します。key 引数を使用して、辞書オブジェクトからキーを取得するか、値を取得するかを指定します (key を false に設定します)。</target>
        </trans-unit>
        <trans-unit id="77dfd5cfcd224f3d1363dfe3cb85003efe050d9f" translate="yes" xml:space="preserve">
          <source>This works with two lists: an inner for loop and an outer while loop.</source>
          <target state="translated">これは、内側のforループと外側のwhileループの2つのリストで動作します。</target>
        </trans-unit>
        <trans-unit id="e537559c79429148f10b6b9cf0978b9e2371bc8a" translate="yes" xml:space="preserve">
          <source>Those passes keep happening until no more nested lists are found.  When a pass finally occurs where none are found, keepChecking never gets tripped to true, which means listIsNested stays false and the outer while loop exits.</source>
          <target state="translated">これらのパスは、入れ子になったリストが見つからなくなるまで繰り返し行われます。最終的に何も見つからないパスが発生した場合、keepCheckingは決してtrueにトリップしません。</target>
        </trans-unit>
        <trans-unit id="861a0e430ffac5e4ae6e11b7a947f2c32d388cf4" translate="yes" xml:space="preserve">
          <source>Usage:</source>
          <target state="translated">Usage:</target>
        </trans-unit>
        <trans-unit id="303c2ecddc270d76490ec99651c75c05229ac735" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;itertools.chain&lt;/code&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;itertools.chain&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="057ed5e75ff2f0ad40d7cbbc26525344260fd727" translate="yes" xml:space="preserve">
          <source>Using generator functions can make your example a little easier to read and probably boost the performance.</source>
          <target state="translated">ジェネレーター関数を使用すると、サンプルを少し読みやすくすることができ、おそらくパフォーマンスを向上させることができます。</target>
        </trans-unit>
        <trans-unit id="2217cada8873c4496bd08dcd7534fbce6ad78f5c" translate="yes" xml:space="preserve">
          <source>When I say &lt;em&gt;most of the codes&lt;/em&gt; I mean all codes that use any form of recursion (or call a standard library function that is recursive). All these codes fail because for every of the recursive call made, the (call) stack grow by one unit, and the (default) python call stack has a size of 1000.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私が言うとき&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;のコードのほとんどを&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私は再帰のいずれかの形式を使用するすべてのコードを意味する（または再帰的である標準ライブラリ関数を呼び出します）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これらのコードはすべて、再帰呼び出しが行われるたびに、（呼び出し）スタックが1単位大きくなり、（デフォルト）python呼び出しスタックのサイズが1000になるため失敗します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8d2be4bbcc49edcd35c84a1c8296c7bc26899184" translate="yes" xml:space="preserve">
          <source>When entering the dungeon, you notice a small &lt;strong&gt;notebook&lt;/strong&gt; here. You decide to use it to write down every room you exit after solving a riddle (when entering a new room), this way you'll be able to return back to the entrance. That's a genius idea, you &lt;em&gt;won't even spend a cent&lt;/em&gt; implementing your strategy.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ダンジョンに入ると、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここに&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;小さな&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ノートが見え&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（新しい部屋に入るとき）なぞなぞを解いた後に出るすべての部屋を書き留めるためにそれを使用することを決定します。これにより、入り口に戻ることができます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは天才的なアイデアです&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。戦略の実装に&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;1セントも費やす&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;こと&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はありません&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ea08aaefc36c7bd0e08223e9634c0ae634211149" translate="yes" xml:space="preserve">
          <source>When trying to answer such a question you really need to give the limitations of the code you propose as a solution. If it was only about performances I wouldn't mind too much, but most of the codes proposed as solution (including the accepted answer) fail to flatten any list that has a depth greater than 1000.</source>
          <target state="translated">このような質問に答えようとするとき、あなたが解決策として提案したコードの限界を示す必要があります。それが性能についてだけであれば、私はあまり気にしないでしょうが、解決策として提案されたコードのほとんどは(受け入れられた答えを含む)1000よりも大きい深さを持つ任意のリストを平坦化することに失敗します。</target>
        </trans-unit>
        <trans-unit id="1c4f6558f38981ddb59d040b4538d37b7efc2d09" translate="yes" xml:space="preserve">
          <source>Where the desired output is</source>
          <target state="translated">希望する出力が</target>
        </trans-unit>
        <trans-unit id="07d07b7b8ea752db0d14deeb6cb38e985e165f11" translate="yes" xml:space="preserve">
          <source>Which gives: &lt;code&gt;build_deep_list(5)&lt;/code&gt; &amp;gt;&amp;gt;&amp;gt; &lt;code&gt;[4, [3, [2, [1, [0]]]]]&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これにより、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;build_deep_list(5)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &amp;gt;&amp;gt;&amp;gt; &lt;/font&gt;&lt;/font&gt; &lt;code&gt;[4, [3, [2, [1, [0]]]]]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="12006179f5926aac3184169403362f3f9c481acf" translate="yes" xml:space="preserve">
          <source>Without using any library:</source>
          <target state="translated">図書館を使わずに</target>
        </trans-unit>
        <trans-unit id="bf88998d5c009de437a318db8effc7a1537c6a7e" translate="yes" xml:space="preserve">
          <source>Yes, I know this subject has been covered before (&lt;a href=&quot;https://stackoverflow.com/questions/120886&quot;&gt;here&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/questions/406121&quot;&gt;here&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/questions/457215&quot;&gt;here&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/questions/952914&quot;&gt;here&lt;/a&gt;), but as far as I know, all solutions, except for one, fail on a list like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はい、私はこの主題が以前にカバーされたことを知っています（&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/120886&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここ&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/406121&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここ&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/457215&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここ&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/952914&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここ&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）が、私が知る限り、1つを除くすべてのソリューションは次のようなリストで失敗します：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="74a1b281a15fddb74b8fce9e6b33b2503f2b15ba" translate="yes" xml:space="preserve">
          <source>You could use &lt;a href=&quot;https://iteration-utilities.readthedocs.io/en/latest/generated/deepflatten.html&quot;&gt;&lt;code&gt;deepflatten&lt;/code&gt;&lt;/a&gt; from the 3rd party package &lt;a href=&quot;https://iteration-utilities.readthedocs.io/en/latest/index.html&quot;&gt;&lt;code&gt;iteration_utilities&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;サードパーティのパッケージ&lt;/font&gt;&lt;a href=&quot;https://iteration-utilities.readthedocs.io/en/latest/index.html&quot;&gt; &lt;code&gt;iteration_utilities&lt;/code&gt; の&lt;/a&gt;&lt;/font&gt;&lt;a href=&quot;https://iteration-utilities.readthedocs.io/en/latest/generated/deepflatten.html&quot;&gt; &lt;code&gt;deepflatten&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用でき&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3debaf3c28a15f60ba292768b82cfaf8dfacc54c" translate="yes" xml:space="preserve">
          <source>You enter the dungeon, solving with great success the first 1001 riddles, but here comes something you hadn't planed, you have no space left in the notebook you borrowed. You decide to &lt;em&gt;abandon&lt;/em&gt; your quest as you prefer not having the treasure than being lost forever inside the dungeon (that looks smart indeed).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あなたはダンジョンに入り、最初の1001個のなぞなぞを大成功で解決しましたが、ここでは、あなたが計画していなかった何かが出てきました。借りたノートにはスペースが残っていません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ダンジョンの中で永遠に失われるよりは宝物を手に入れたくないので、クエスト&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;放棄&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;することに&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;し&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます（実際にスマートに見えます）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="64d4175e880a1832a2a0d0bb31fd6657fe5d0d89" translate="yes" xml:space="preserve">
          <source>every time an item is found, &lt;code&gt;yield&lt;/code&gt; it (or add them in a list);</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アイテムが見つかるたびに、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それを&lt;/font&gt;&lt;/font&gt; &lt;code&gt;yield&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます（またはリストに追加します）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9e51c354b48926dd260c73a845d3893393cf58cb" translate="yes" xml:space="preserve">
          <source>here is one simple and one not-so-simple case -</source>
          <target state="translated">ここに簡単なケースとそうでないケースがあります。</target>
        </trans-unit>
        <trans-unit id="adc6d4918f750b646571daa2e00df52c14b564db" translate="yes" xml:space="preserve">
          <source>here we are using sets to check for the type so it takes O(1) vs O(number of types) to check whether or not an element should be ignored, though of course any value with derived type of the stated ignored types will fail, this is why its using &lt;code&gt;str&lt;/code&gt;, &lt;code&gt;unicode&lt;/code&gt; so use it with caution ...</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここではタイプをチェックするためにセットを使用しているため、要素を無視する必要があるかどうかをチェックするためにO（1）とO（タイプの数）が必要ですが、もちろん、指定された無視されたタイプの派生タイプの値は失敗します、これが&lt;/font&gt;&lt;/font&gt; &lt;code&gt;str&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;unicode&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用する&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;理由&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ですので、注意して使用してください...&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ccedab2b750529fb2f1b87bbe07378ea34020ea1" translate="yes" xml:space="preserve">
          <source>once a list is fully explored, go back to the parent list using the &lt;code&gt;stack&lt;/code&gt;&lt;em&gt;return &lt;code&gt;address&lt;/code&gt; (and &lt;code&gt;index&lt;/code&gt;)&lt;/em&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;リストが完全に探索されたら、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;stack&lt;/code&gt; &lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;戻り&lt;/font&gt;&lt;/font&gt; &lt;code&gt;address&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（および&lt;/font&gt;&lt;/font&gt; &lt;code&gt;index&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用して親リストに&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;戻り&lt;/font&gt;&lt;/em&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="27806062493e422e06f1adc0af3df9590689c118" translate="yes" xml:space="preserve">
          <source>output:</source>
          <target state="translated">output:</target>
        </trans-unit>
        <trans-unit id="296855ad54af49593cc7b3f4e5521f091bd38983" translate="yes" xml:space="preserve">
          <source>push the current list &lt;code&gt;address&lt;/code&gt; and &lt;code&gt;index&lt;/code&gt; in a &lt;code&gt;stack&lt;/code&gt; when entering a new sublist (note that a list address+index is also an address, therefore we just use the exact same technique used by the call stack);</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;新しいサブリストを入力するときに&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、現在のリスト&lt;/font&gt;&lt;/font&gt; &lt;code&gt;address&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;index&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;/font&gt; &lt;code&gt;stack&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プッシュし&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（リストアドレス+インデックスもアドレスなので、コールスタックで使用されているのとまったく同じ手法を使用することに注意してください）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="37a5301a88da334dc5afc5b63979daa0f3f45e68" translate="yes" xml:space="preserve">
          <source>result</source>
          <target state="translated">result</target>
        </trans-unit>
        <trans-unit id="37b8dabf0b7bfae1c2eecb47a6afcd8bc92cc94c" translate="yes" xml:space="preserve">
          <source>returns:</source>
          <target state="translated">returns:</target>
        </trans-unit>
        <trans-unit id="9dd608f36d0db13a98f4add5e42d48a50fa3c769" translate="yes" xml:space="preserve">
          <source>tests:</source>
          <target state="translated">tests:</target>
        </trans-unit>
        <trans-unit id="90b34293d40fd211f22a7eb82950647a7a0d5b3f" translate="yes" xml:space="preserve">
          <source>there is a slightly faster approach, but less portable method, only use it if you can assume that the base elements of the input can be explicitly determined otherwise, you'll get an infinite recursion, and OS X with its limited stack size, will throw a segmentation fault fairly quickly ...</source>
          <target state="translated">少し速いアプローチがありますが、ポータブルではない方法で、入力の基本要素が明示的に決定できると仮定できる場合にのみ使用してください。</target>
        </trans-unit>
        <trans-unit id="e33ad899228cb347b7c6fd1b4662e7475fffbffc" translate="yes" xml:space="preserve">
          <source>totally hacky but I think it would work (depending on your data_type)</source>
          <target state="translated">完全にハックなのですが、(data_typeにもよりますが)うまくいくと思います。</target>
        </trans-unit>
        <trans-unit id="341f78d1b5a5471d159f158c1f163fc170e38478" translate="yes" xml:space="preserve">
          <source>yields:</source>
          <target state="translated">yields:</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
