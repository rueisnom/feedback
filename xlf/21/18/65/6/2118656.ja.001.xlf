<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/2118656">
    <body>
      <group id="2118656">
        <trans-unit id="866488c406c7c36740322c706d4fb76667c9ff6c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UICommand&lt;/code&gt; and &lt;code&gt;UIInput&lt;/code&gt; components must be placed inside an &lt;code&gt;UIForm&lt;/code&gt; component, e.g. &lt;code&gt;&amp;lt;h:form&amp;gt;&lt;/code&gt; (and thus not plain HTML &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt;), otherwise nothing can be sent to the server. &lt;code&gt;UICommand&lt;/code&gt; components must also not have &lt;code&gt;type=&quot;button&quot;&lt;/code&gt; attribute, otherwise it will be a dead button which is only useful for JavaScript &lt;code&gt;onclick&lt;/code&gt;. See also &lt;a href=&quot;https://stackoverflow.com/questions/3681123/how-to-get-hinputtext-values-from-gui-xhtml-into-java-class-jsf-bean&quot;&gt;How to send form input values and invoke a method in JSF bean&lt;/a&gt; and &lt;a href=&quot;https://stackoverflow.com/questions/12958208/hcommandbutton-does-not-initiate-a-postback&quot;&gt;&amp;lt;h:commandButton&amp;gt; does not initiate a postback&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;UICommand&lt;/code&gt; および &lt;code&gt;UIInput&lt;/code&gt; コンポーネントは、 &lt;code&gt;&amp;lt;h:form&amp;gt;&lt;/code&gt; などのUIFormコンポーネント内に配置する必要があります（したがって、プレーンHTML &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; ではありません）。そうしないと、何もサーバーに送信できません。 &lt;code&gt;UICommand&lt;/code&gt; コンポーネントにも &lt;code&gt;type=&quot;button&quot;&lt;/code&gt; 属性を含めないでください。そうしないと、JavaScript &lt;code&gt;onclick&lt;/code&gt; でのみ役立つデッドボタンになります。 「 &lt;a href=&quot;https://stackoverflow.com/questions/3681123/how-to-get-hinputtext-values-from-gui-xhtml-into-java-class-jsf-bean&quot;&gt;フォーム入力値を送信してJSF Beanでメソッドを呼び出す方法&lt;/a&gt; 」も参照してください。 &lt;a href=&quot;https://stackoverflow.com/questions/12958208/hcommandbutton-does-not-initiate-a-postback&quot;&gt;&amp;lt;h：commandButton&amp;gt;はポストバックを開始しません&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="d978d9b3753f9d16c9ec6fe433e3273e16654fc4" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(warning: when you post screenshots from HTTP request headers like above from a production environment, then make sure you scramble/obfuscate any session cookies in the screenshot to avoid session hijacking attacks!)&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;（警告：上記のようなHTTPリクエストヘッダーのスクリーンショットを本番環境から投稿する場合は、スクリーンショット内のセッションCookieをスクランブル/難読化して、セッションハイジャック攻撃を回避してください。）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b971e4f0bb141033e78686962da9b91c12019960" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This is the solution, which is worked for me.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;これは私のために働いている解決策です。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b7a820491ba9cea62cbb9eb9033a2f0fe79a2697" translate="yes" xml:space="preserve">
          <source>As the PrimeFaces User's Guide states in section 3.18, the defaults for &lt;code&gt;process&lt;/code&gt; and &lt;code&gt;update&lt;/code&gt; are both &lt;code&gt;@form&lt;/code&gt;, which pretty much opposes the defaults you might expect from plain JSF &lt;code&gt;f:ajax&lt;/code&gt; or RichFaces, which are &lt;code&gt;execute=&quot;@this&quot;&lt;/code&gt; and &lt;code&gt;render=&quot;@none&quot;&lt;/code&gt; respectively.</source>
          <target state="translated">PrimeFaces User's Guideがセクション3.18で述べているように、 &lt;code&gt;process&lt;/code&gt; と &lt;code&gt;update&lt;/code&gt; デフォルトはどちらも &lt;code&gt;@form&lt;/code&gt; です。これは、 &lt;code&gt;execute=&quot;@this&quot;&lt;/code&gt; と &lt;code&gt;render=&quot;@none&quot;&lt;/code&gt; プレーンなJSF &lt;code&gt;f:ajax&lt;/code&gt; またはRichFacesに期待されるデフォルトとはかなり反対です。それぞれ「@none」 。</target>
        </trans-unit>
        <trans-unit id="ab36e796edd5a2aff059837493ac2891867d064d" translate="yes" xml:space="preserve">
          <source>Basically, using sendRedirect() allowed the JSF &quot;container&quot; to take control whereas RequestDispatcher.forward() was obviously not.</source>
          <target state="translated">基本的に、sendRedirect()を使うことでJSFの &quot;コンテナ &quot;が制御できるようになりますが、RequestDispatcher.forward()は明らかにそうではありません。</target>
        </trans-unit>
        <trans-unit id="3be03732e361b25d3aa4cc4127e47b23cc0bc01a" translate="yes" xml:space="preserve">
          <source>Bottom line, the problem was that the middle-man-servlet was using RequestDispatcher.forward(...) to redirect from the HttpServlet environment to the JSF environment whereas the servlet being called prior to it was redirecting with HttpServletResponse.sendRedirect(...).</source>
          <target state="translated">結論から言うと、問題はミドルマン・サーブレットがRequestDispatcher.forward(....)を使用して HttpServlet環境からJSF環境にリダイレクトしていたのに対し、その前に呼び出されたサーブレットは HttpServletResponse.sendRedirect(....)を使用してリダイレクトしていたということです。</target>
        </trans-unit>
        <trans-unit id="387a85de6fd64795614cf3a03aeb1eb3a0202d39" translate="yes" xml:space="preserve">
          <source>Bug in the framework. For example, RichFaces has a &quot;&lt;a href=&quot;https://issues.jboss.org/browse/RF-12594&quot;&gt;conversion error&lt;/a&gt;&quot; when using a &lt;code&gt;rich:calendar&lt;/code&gt; UI element with a &lt;code&gt;defaultLabel&lt;/code&gt; attribute (or, in some cases, a &lt;code&gt;rich:placeholder&lt;/code&gt; sub-element). This bug prevents the bean method from being invoked when no value is set for the calendar date. Tracing framework bugs can be accomplished by starting with a simple working example and building the page back up until the bug is discovered.</source>
          <target state="translated">フレームワークのバグ。 たとえば、 &lt;code&gt;defaultLabel&lt;/code&gt; 属性（または、場合によっては &lt;code&gt;rich:placeholder&lt;/code&gt; サブ要素）を指定して &lt;code&gt;rich:calendar&lt;/code&gt; UI要素を使用すると、RichFacesに「 &lt;a href=&quot;https://issues.jboss.org/browse/RF-12594&quot;&gt;変換エラー&lt;/a&gt; 」が発生します 。 このバグにより、カレンダーの日付に値が設定されていない場合にBeanメソッドが呼び出されなくなります。 フレームワークのバグの追跡は、簡単な実際の例から始めて、バグが発見されるまでページを作成し直すことで実現できます。</target>
        </trans-unit>
        <trans-unit id="f52fd3814b69cf3df3d930cda2ccbc4fa45914c1" translate="yes" xml:space="preserve">
          <source>Click the &lt;em&gt;Network&lt;/em&gt; tab to see the HTTP traffic monitor. Submit the form and investigate if the request headers and form data and the response body are as per expectations. Below screenshot is an example from Chrome which demonstrates a successful ajax submit of a simple form with a single &lt;code&gt;&amp;lt;h:inputText&amp;gt;&lt;/code&gt; and a single &lt;code&gt;&amp;lt;h:commandButton&amp;gt;&lt;/code&gt; with &lt;code&gt;&amp;lt;f:ajax execute=&quot;@form&quot; render=&quot;@form&quot;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">[ &lt;em&gt;ネットワーク&lt;/em&gt; ]タブをクリックして、HTTPトラフィックモニターを表示します。 フォームを送信し、リクエストヘッダーとフォームデータ、および応答本文が期待どおりかどうかを調査します。 以下のスクリーンショットは、単一の &lt;code&gt;&amp;lt;h:inputText&amp;gt;&lt;/code&gt; および単一の &lt;code&gt;&amp;lt;h:commandButton&amp;gt;&lt;/code&gt; と &lt;code&gt;&amp;lt;f:ajax execute=&quot;@form&quot; render=&quot;@form&quot;&amp;gt;&lt;/code&gt; た単純なフォームのajax送信が成功したことを示すChromeの例です。 &amp;gt; 。</target>
        </trans-unit>
        <trans-unit id="ad43ac09dd124cb666003cf8589c2e04c4dd12a5" translate="yes" xml:space="preserve">
          <source>Debugging hints</source>
          <target state="translated">デバッグのヒント</target>
        </trans-unit>
        <trans-unit id="5f0f18a890d46086092f46381c0776f9a1e0fb0a" translate="yes" xml:space="preserve">
          <source>For this purpose, you can dispense the &lt;code&gt;type&lt;/code&gt; attribute (default value is &lt;code&gt;&quot;submit&quot;&lt;/code&gt;) or you can explicitly use &lt;code&gt;type=&quot;submit&quot;&lt;/code&gt;.</source>
          <target state="translated">この目的のために、 &lt;code&gt;type&lt;/code&gt; 属性（デフォルト値は &lt;code&gt;&quot;submit&quot;&lt;/code&gt; ）をディスペンスするか、明示的に &lt;code&gt;type=&quot;submit&quot;&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="a04bb2946c575867840a2e08c55c9b55395447c2" translate="yes" xml:space="preserve">
          <source>Got stuck with this issue myself and found one more cause for this problem.
If you don't have setter methods in your backing bean for the properties used in your *.xhtml , then the action is simply not invoked.</source>
          <target state="translated">自分自身がこの問題で立ち往生していて、この問題のもう一つの原因を見つけました。もしあなたがバッキングビーンで*.xhtmlで使用されるプロパティのためのセッターメソッドを持っていない場合、アクションは単に呼び出されません。</target>
        </trans-unit>
        <trans-unit id="8b5d5e1850f3f69592961b6908eaccc7e7789e20" translate="yes" xml:space="preserve">
          <source>Here, process=&quot;userGroupSetupForm&quot; atrribute is mandatory for Ajax call. actionListener is calling a method from @ViewScope Bean. Also updating growl message, Datatable: userGroupList and Form: userGroupSetupForm.</source>
          <target state="translated">ここでは、process=&quot;userGroupSetupForm&quot; atributeはAjax呼び出しに必須で、actionListenerは@ViewScope Beanからメソッドを呼び出しています。また、グロウメッセージ、Datatable:userGroupListとForm:userGroupSetupFormを更新しています。</target>
        </trans-unit>
        <trans-unit id="e4f350fbbd6cd44f6756b173b457a31d927cc6ae" translate="yes" xml:space="preserve">
          <source>Hope this will help someone!</source>
          <target state="translated">誰かのお役に立てれば幸いです</target>
        </trans-unit>
        <trans-unit id="9cf3abd217ce1127f62e6207c9f17e88720b5fcb" translate="yes" xml:space="preserve">
          <source>I fixed my problem with placing the:</source>
          <target state="translated">置き場所に困っていたのを直しました。</target>
        </trans-unit>
        <trans-unit id="ada7b48d682b4c15818372e71d2f57a896c7f67a" translate="yes" xml:space="preserve">
          <source>I had a command button on a row of a datatable (the extended version, so &lt;code&gt;&amp;lt;hx:datatable&amp;gt;&lt;/code&gt;) and the UICommand would not fire from certain rows from the table (the rows that would not fire were the rows greater than the default row display size).</source>
          <target state="translated">データテーブルの行（拡張バージョンなので &lt;code&gt;&amp;lt;hx:datatable&amp;gt;&lt;/code&gt; ）にコマンドボタンがあり、UICommandがテーブルの特定の行から起動しませんでした（起動しない行はデフォルト行よりも大きい行でした）ディスプレイサイズ）。</target>
        </trans-unit>
        <trans-unit id="771d92126e32f5d42b83fd8f7b7d8509d3301e8d" translate="yes" xml:space="preserve">
          <source>I had a drop-down component for selecting number of rows to display. The value backing this field was in &lt;code&gt;RequestScope&lt;/code&gt;. The data backing the table itself was in a sort of &lt;code&gt;ViewScope&lt;/code&gt; (in reality, temporarily in &lt;code&gt;SessionScope&lt;/code&gt;).</source>
          <target state="translated">表示する行数を選択するためのドロップダウンコンポーネントがありました。 このフィールドを裏付ける値は &lt;code&gt;RequestScope&lt;/code&gt; にありました 。 テーブル自体を支えるデータは一種の &lt;code&gt;ViewScope&lt;/code&gt; にありました （実際には、一時的に &lt;code&gt;SessionScope&lt;/code&gt; にありました ）。</target>
        </trans-unit>
        <trans-unit id="2a55afc4ed451bf938ab6a7781f2985f0cfdbb57" translate="yes" xml:space="preserve">
          <source>I had lots of fun debugging an issue where a &lt;code&gt;&amp;lt;h:commandLink&amp;gt;&lt;/code&gt;'s action in &lt;code&gt;richfaces&lt;/code&gt;&lt;code&gt;datatable&lt;/code&gt; refused to fire. The table used to work at some point but stopped for no apparent reason. I left no stone unturned, only to find out that my &lt;code&gt;rich:datatable&lt;/code&gt; was using the wrong &lt;code&gt;rowKeyConverter&lt;/code&gt; which returned nulls that richfaces happily used as row keys. This prevented my &lt;code&gt;&amp;lt;h:commandLink&amp;gt;&lt;/code&gt; action from getting called.</source>
          <target state="translated">&lt;code&gt;richfaces&lt;/code&gt; &lt;code&gt;datatable&lt;/code&gt; の &lt;code&gt;&amp;lt;h:commandLink&amp;gt;&lt;/code&gt; のアクションが実行を拒否される問題をデバッグするのはとても楽しいものでした 。 テーブルはある時点で機能していましたが、明確な理由もなく停止しました。 &lt;code&gt;rich:datatable&lt;/code&gt; が、 &lt;code&gt;rowKeyConverter&lt;/code&gt; を返す間違ったrowKeyConverterを使用していて、 richfacesが行キーとしてうまく使用されていることを確認するためだけに、私は石を振り返りませんでした。 これにより、 &lt;code&gt;&amp;lt;h:commandLink&amp;gt;&lt;/code&gt; アクションが呼び出されなくなりました。</target>
        </trans-unit>
        <trans-unit id="5251cdd4c6bff16176d8657be0cf1a79d3c894cc" translate="yes" xml:space="preserve">
          <source>I had this problem as well and only really started to hone in on the root cause after opening up the browser's web console.  Until that, I was unable to get any error messages (even with &lt;code&gt;&amp;lt;p:messages&amp;gt;&lt;/code&gt;).  The web console showed an HTTP 405 status code coming back from the &lt;code&gt;&amp;lt;h:commandButton type=&quot;submit&quot; action=&quot;#{myBean.submit}&quot;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">私もこの問題を抱えていて、ブラウザーのWebコンソールを開いてから根本的な原因を突き止め始めました。 それまでは、エラーメッセージを取得できませんでした（ &lt;code&gt;&amp;lt;p:messages&amp;gt;&lt;/code&gt; を使用しても ）。 Webコンソールに、 &lt;code&gt;&amp;lt;h:commandButton type=&quot;submit&quot; action=&quot;#{myBean.submit}&quot;&amp;gt;&lt;/code&gt; から返されるHTTP 405ステータスコードが表示されました。</target>
        </trans-unit>
        <trans-unit id="e9f5e148d29cf7fae55e775799f77920ad0986c8" translate="yes" xml:space="preserve">
          <source>I recently ran into a problem with a UICommand not invoking in a JSF 1.2 application using IBM Extended Faces Components.</source>
          <target state="translated">最近、IBM Extended Faces Componentsを使用したJSF 1.2アプリケーションでUICommandが起動しないという問題に遭遇しました。</target>
        </trans-unit>
        <trans-unit id="192636a4bca94899648371c8cb323c3f1ce21472" translate="yes" xml:space="preserve">
          <source>I think this is alluded to in BalusC #4 above, but not only did the table value need to be View or Session scoped but also the attribute controlling the number of rows to display on that table.</source>
          <target state="translated">これは上記のBalusC #4でも言及されていると思いますが、テーブルの値はViewやSessionのスコープが必要だっただけでなく、そのテーブルに表示する行数を制御する属性も必要でした。</target>
        </trans-unit>
        <trans-unit id="2c2fe531415109359e102a0680cfcc231f4047c0" translate="yes" xml:space="preserve">
          <source>I would mention one more thing that concerns Primefaces's &lt;code&gt;p:commandButton&lt;/code&gt;!</source>
          <target state="translated">Primefacesの &lt;code&gt;p:commandButton&lt;/code&gt; に関係するもう1つのことを述べます。</target>
        </trans-unit>
        <trans-unit id="9924714aee235af76994537f44085e166f664203" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;UICommand&lt;/code&gt; or &lt;code&gt;UIInput&lt;/code&gt; components are included by a dynamic source such as &lt;code&gt;&amp;lt;ui:include src=&quot;#{bean.include}&quot;&amp;gt;&lt;/code&gt;, then you need to ensure that exactly the same &lt;code&gt;#{bean.include}&lt;/code&gt; value is preserved during the view build time of the form submit request. JSF will reexecute it during building the component tree. Putting the bean in the view scope and/or making sure that you load the data model in &lt;code&gt;@PostConstruct&lt;/code&gt; of the bean (and thus not in a getter method!) should fix it. See also &lt;a href=&quot;https://stackoverflow.com/questions/7108668/how-to-ajax-refresh-dynamic-include-content-by-navigation-menu-jsf-spa&quot;&gt;How to ajax-refresh dynamic include content by navigation menu? (JSF SPA)&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;UICommand&lt;/code&gt; または &lt;code&gt;UIInput&lt;/code&gt; コンポーネントが &lt;code&gt;&amp;lt;ui:include src=&quot;#{bean.include}&quot;&amp;gt;&lt;/code&gt; などの動的ソースによって含まれている場合は、ビュー中にまったく同じ &lt;code&gt;#{bean.include}&lt;/code&gt; 値が保持されるようにする必要があります。フォーム送信リクエストのビルド時間。 JSFは、コンポーネントツリーの構築中に再実行します。 Beanをビュースコープに配置するか、Beanの &lt;code&gt;@PostConstruct&lt;/code&gt; にデータモデルを確実にロードすることで（したがって、getterメソッドではなく）、それを修正する必要があります。 &lt;a href=&quot;https://stackoverflow.com/questions/7108668/how-to-ajax-refresh-dynamic-include-content-by-navigation-menu-jsf-spa&quot;&gt;ナビゲーションメニューで動的インクルードコンテンツをajax-refreshする方法&lt;/a&gt;も参照してください。 （JSF SPA） 。</target>
        </trans-unit>
        <trans-unit id="d039e312f75e608caf4b0e9a953fa4288127b59a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;UICommand&lt;/code&gt; or &lt;code&gt;UIInput&lt;/code&gt; components are placed inside an iterating component like &lt;code&gt;&amp;lt;h:dataTable&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;ui:repeat&amp;gt;&lt;/code&gt;, etc, then you need to ensure that exactly the same &lt;code&gt;value&lt;/code&gt; of the iterating component is been preserved during the apply request values phase of the form submit request. JSF will reiterate over it to find the clicked link/button and submitted input values. Putting the bean in the view scope and/or making sure that you load the data model in &lt;code&gt;@PostConstruct&lt;/code&gt; of the bean (and thus not in a getter method!) should fix it. See also &lt;a href=&quot;https://stackoverflow.com/questions/5765853/when-should-i-load-the-collection-from-database-for-hdatatable&quot;&gt;How and when should I load the model from database for h:dataTable&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;UICommand&lt;/code&gt; または &lt;code&gt;UIInput&lt;/code&gt; コンポーネントが &lt;code&gt;&amp;lt;h:dataTable&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;ui:repeat&amp;gt;&lt;/code&gt; などの反復コンポーネント内に配置されている場合、リクエスト値の適用フェーズ中に、反復コンポーネントのまったく同じ &lt;code&gt;value&lt;/code&gt; が保持されるようにする必要があります。フォーム送信リクエスト。 JSFはそれを繰り返して、クリックされたリンク/ボタンと送信された入力値を見つけます。 Beanをビュースコープに配置するか、Beanの &lt;code&gt;@PostConstruct&lt;/code&gt; にデータモデルを確実にロードすることで（したがって、getterメソッドではなく）、それを修正する必要があります。 &lt;a href=&quot;https://stackoverflow.com/questions/5765853/when-should-i-load-the-collection-from-database-for-hdatatable&quot;&gt;h：dataTableのデータベースからモデルをロードする方法とタイミング&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="3376040c6a80d6d2d66683587c3c37544d43149c" translate="yes" xml:space="preserve">
          <source>If a parent of the &lt;code&gt;&amp;lt;h:form&amp;gt;&lt;/code&gt; with the &lt;code&gt;UICommand&lt;/code&gt; button is beforehand been rendered/updated by an ajax request coming from another form in the same page, then the first action will always fail in JSF 2.2 or older. The second and subsequent actions will work. This is caused by a bug in view state handling which is reported as &lt;a href=&quot;https://github.com/javaee/javaserverfaces-spec/issues/790&quot;&gt;JSF spec issue 790&lt;/a&gt; and currently fixed in JSF 2.3. For older JSF versions, you need to explicitly specify the ID of the &lt;code&gt;&amp;lt;h:form&amp;gt;&lt;/code&gt; in the &lt;code&gt;render&lt;/code&gt; of the &lt;code&gt;&amp;lt;f:ajax&amp;gt;&lt;/code&gt;. See also &lt;a href=&quot;https://stackoverflow.com/questions/11408130/hcommandbutton-hcommandlink-does-not-work-on-first-click-works-only-on-second&quot;&gt;h:commandButton/h:commandLink does not work on first click, works only on second click&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;UICommand&lt;/code&gt; ボタンを持つ &lt;code&gt;&amp;lt;h:form&amp;gt;&lt;/code&gt; の親が、同じページ内の別のフォームからのajaxリクエストによって事前にレンダリング/更新されている場合、JSF 2.2以前では、最初のアクションは常に失敗します。 2番目以降のアクションは機能します。 これは、 &lt;a href=&quot;https://github.com/javaee/javaserverfaces-spec/issues/790&quot;&gt;JSF仕様の問題790&lt;/a&gt;として報告され、現在JSF 2.3で修正されているビューステート処理のバグが原因です。 古いJSFバージョンの場合、 &lt;code&gt;&amp;lt;f:ajax&amp;gt;&lt;/code&gt; の &lt;code&gt;render&lt;/code&gt; で &lt;code&gt;&amp;lt;h:form&amp;gt;&lt;/code&gt; のIDを明示的に指定する必要があります。 &lt;a href=&quot;https://stackoverflow.com/questions/11408130/hcommandbutton-hcommandlink-does-not-work-on-first-click-works-only-on-second&quot;&gt;h：commandButton / h：commandLinkも最初のクリックでは機能せず、2回目のクリックでのみ機能します&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="d4a9ed5b372bb2f791d112478dcb7a6c28e7e44a" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&amp;lt;h:form&amp;gt;&lt;/code&gt; has &lt;code&gt;enctype=&quot;multipart/form-data&quot;&lt;/code&gt; set in order to support file uploading, then you need to make sure that you're using at least JSF 2.2, or that the servlet filter who is responsible for parsing multipart/form-data requests is properly configured, otherwise the &lt;code&gt;FacesServlet&lt;/code&gt; will end up getting no request parameters at all and thus not be able to apply the request values. How to configure such a filter depends on the file upload component being used. For Tomahawk &lt;code&gt;&amp;lt;t:inputFileUpload&amp;gt;&lt;/code&gt;, check &lt;a href=&quot;https://stackoverflow.com/questions/5418292/jsf-2-0-file-upload/5424229#5424229&quot;&gt;this answer&lt;/a&gt; and for PrimeFaces &lt;code&gt;&amp;lt;p:fileUpload&amp;gt;&lt;/code&gt;, check &lt;a href=&quot;https://stackoverflow.com/questions/8875818/how-to-use-primefaces-pfileupload-listener-method-is-never-invoked/8880083#8880083&quot;&gt;this answer&lt;/a&gt;. Or, if you're actually not uploading a file at all, then remove the attribute altogether.</source>
          <target state="translated">ファイルのアップロードをサポートするために &lt;code&gt;&amp;lt;h:form&amp;gt;&lt;/code&gt; に &lt;code&gt;enctype=&quot;multipart/form-data&quot;&lt;/code&gt; が設定されている場合は、少なくともJSF 2.2を使用していること、または責任を負うサーブレットフィルターがmultipart / form-dataリクエストの解析は適切に設定されていない場合、 &lt;code&gt;FacesServlet&lt;/code&gt; はリクエストパラメータをまったく取得せず、リクエスト値を適用できなくなります。 このようなフィルターの構成方法は、使用されているファイルアップロードコンポーネントによって異なります。 トマホーク &lt;code&gt;&amp;lt;t:inputFileUpload&amp;gt;&lt;/code&gt; の場合は&lt;a href=&quot;https://stackoverflow.com/questions/5418292/jsf-2-0-file-upload/5424229#5424229&quot;&gt;この回答&lt;/a&gt;を確認し、PrimeFaces &lt;code&gt;&amp;lt;p:fileUpload&amp;gt;&lt;/code&gt; の場合は&lt;a href=&quot;https://stackoverflow.com/questions/8875818/how-to-use-primefaces-pfileupload-listener-method-is-never-invoked/8880083#8880083&quot;&gt;この回答を&lt;/a&gt;確認してください。 または、実際にファイルをアップロードしない場合は、属性を完全に削除します。</target>
        </trans-unit>
        <trans-unit id="22cd41b11cd350ae8b00095e457defda31bbf524" translate="yes" xml:space="preserve">
          <source>If the row display was increased via the control which value was also bound to the datatable's &lt;code&gt;rows&lt;/code&gt; attribute, none of the rows displayed as a result of this change could fire the UICommand when clicked.</source>
          <target state="translated">どの値もデータテーブルの &lt;code&gt;rows&lt;/code&gt; 属性にバインドされているコントロールを介して行の表示が増加した場合、この変更の結果として表示されたどの行も、クリックしたときにUICommandを起動できませんでした。</target>
        </trans-unit>
        <trans-unit id="78fb12f9d4f9ffdea734456966c80e8cfbfde585" translate="yes" xml:space="preserve">
          <source>If the submitted values still end up being &lt;code&gt;null&lt;/code&gt;, and you're using CDI to manage beans, then make sure that you import the scope annotation from the correct package, else CDI will default to &lt;code&gt;@Dependent&lt;/code&gt; which effectively recreates the bean on every single evaluation of the EL expression. See also &lt;a href=&quot;https://stackoverflow.com/questions/9470440/sessionscoped-bean-looses-scope-and-gets-recreated-all-the-time-fields-become&quot;&gt;@SessionScoped bean looses scope and gets recreated all the time, fields become null&lt;/a&gt; and &lt;a href=&quot;https://stackoverflow.com/questions/19322364/what-is-the-default-managed-bean-scope-in-a-jsf-2-application&quot;&gt;What is the default Managed Bean Scope in a JSF 2 application?&lt;/a&gt;</source>
          <target state="translated">送信された値が依然として &lt;code&gt;null&lt;/code&gt; のままで 、CDIを使用してBeanを管理している場合は、正しいパッケージからスコープアノテーションをインポートしてください。そうでない場合、CDIはデフォルトで &lt;code&gt;@Dependent&lt;/code&gt; になり、すべての単一の評価でBeanを効果的に再作成しますEL式の。 &lt;a href=&quot;https://stackoverflow.com/questions/9470440/sessionscoped-bean-looses-scope-and-gets-recreated-all-the-time-fields-become&quot;&gt;@SessionScoped Bean&lt;/a&gt;もスコープを失い、常に再作成され、フィールドがnullになることも参照してください。JSF2 &lt;a href=&quot;https://stackoverflow.com/questions/19322364/what-is-the-default-managed-bean-scope-in-a-jsf-2-application&quot;&gt;アプリケーションのデフォルトの管理対象Beanスコープは何ですか？&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f05f88312346985c9a90156785bf6578f9f4e0bd" translate="yes" xml:space="preserve">
          <source>If you are using a PrimeFaces &lt;code&gt;&amp;lt;p:dialog&amp;gt;&lt;/code&gt; or a &lt;code&gt;&amp;lt;p:overlayPanel&amp;gt;&lt;/code&gt;, then make sure that they have their own &lt;code&gt;&amp;lt;h:form&amp;gt;&lt;/code&gt;. Because, these components are by default by JavaScript relocated to end of HTML &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;. So, if they were originally sitting inside a &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt;, then they would now not anymore sit in a &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt;. See also &lt;a href=&quot;https://stackoverflow.com/questions/18958729/pcommandbutton-action-doesnt-work-inside-pdialog&quot;&gt;p:commandbutton action doesn't work inside p:dialog&lt;/a&gt;</source>
          <target state="translated">PrimeFaces &lt;code&gt;&amp;lt;p:dialog&amp;gt;&lt;/code&gt; または &lt;code&gt;&amp;lt;p:overlayPanel&amp;gt;&lt;/code&gt; を使用している場合は、独自の &lt;code&gt;&amp;lt;h:form&amp;gt;&lt;/code&gt; があることを確認してください。 なぜなら、これらのコンポーネントはデフォルトでJavaScriptによってHTML &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; の末尾に再配置されるためです。 したがって、元々 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 内に座っていた場合は、もはや &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 内に座っていません。 &lt;a href=&quot;https://stackoverflow.com/questions/18958729/pcommandbutton-action-doesnt-work-inside-pdialog&quot;&gt;p：commandbuttonアクションがp：dialog内で機能しない&lt;/a&gt;も参照してください</target>
        </trans-unit>
        <trans-unit id="fcac2640402780d0075832d85cbc7c426c4691e0" translate="yes" xml:space="preserve">
          <source>If you're using &lt;strong&gt;PrimeFaces&lt;/strong&gt; (or some similar API) &lt;code&gt;p:commandButton&lt;/code&gt; or &lt;code&gt;p:commandLink&lt;/code&gt;, chances are that you have forgotten to explicitly add &lt;code&gt;process=&quot;@this&quot;&lt;/code&gt; to your command components.</source>
          <target state="translated">&lt;strong&gt;PrimeFaces&lt;/strong&gt; （または同様のAPI） &lt;code&gt;p:commandButton&lt;/code&gt; または &lt;code&gt;p:commandLink&lt;/code&gt; を使用している場合、コマンドコンポーネントに明示的に &lt;code&gt;process=&quot;@this&quot;&lt;/code&gt; を追加するのを忘れている可能性があります。</target>
        </trans-unit>
        <trans-unit id="1403aaffc997b6c2b3ecacbce732c81da1e089e5" translate="yes" xml:space="preserve">
          <source>If you're using Ajax via JSF 2.x &lt;code&gt;&amp;lt;f:ajax&amp;gt;&lt;/code&gt; or e.g. PrimeFaces &lt;code&gt;&amp;lt;p:commandXxx&amp;gt;&lt;/code&gt;, make sure that you have a &lt;code&gt;&amp;lt;h:head&amp;gt;&lt;/code&gt; in the master template instead of the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;. Otherwise JSF won't be able to auto-include the necessary JavaScript files which contains the Ajax functions. This would result in a JavaScript error like &quot;mojarra is not defined&quot; or &quot;PrimeFaces is not defined&quot; in browser's JS console. See also &lt;a href=&quot;https://stackoverflow.com/questions/9933777/hcommandlink-actionlistener-is-not-invoked-when-used-with-fajax-and-uirepeat&quot;&gt;h:commandLink actionlistener is not invoked when used with f:ajax and ui:repeat&lt;/a&gt;.</source>
          <target state="translated">JSF 2.x &lt;code&gt;&amp;lt;f:ajax&amp;gt;&lt;/code&gt; またはPrimeFaces &lt;code&gt;&amp;lt;p:commandXxx&amp;gt;&lt;/code&gt; を介してAjaxを使用している場合は、マスターテンプレートに &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; ではなく &lt;code&gt;&amp;lt;h:head&amp;gt;&lt;/code&gt; があることを確認してください。 そうしないと、JSFはAjax関数を含む必要なJavaScriptファイルを自動インクルードできません。 これにより、ブラウザのJSコンソールで「mojarra is not defined」や「PrimeFaces is not defined」などのJavaScriptエラーが発生します。 &lt;a href=&quot;https://stackoverflow.com/questions/9933777/hcommandlink-actionlistener-is-not-invoked-when-used-with-fajax-and-uirepeat&quot;&gt;f：ajaxおよびui：repeatと一緒に使用するとh：commandLink actionlistenerが呼び出されない&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="067b0bee847820b1fa42033b6d78512872c7deff" translate="yes" xml:space="preserve">
          <source>If you're using Ajax, and the submitted values end up being &lt;code&gt;null&lt;/code&gt;, then make sure that the &lt;code&gt;UIInput&lt;/code&gt; and &lt;code&gt;UICommand&lt;/code&gt; components of interest are covered by the &lt;code&gt;&amp;lt;f:ajax execute&amp;gt;&lt;/code&gt; or e.g. &lt;code&gt;&amp;lt;p:commandXxx process&amp;gt;&lt;/code&gt;, otherwise they won't be executed/processed. See also &lt;a href=&quot;https://stackoverflow.com/questions/17960929/submitted-form-values-not-updated-in-model-when-adding-fajax-to-hcommandbut&quot;&gt;Submitted form values not updated in model when adding &amp;lt;f:ajax&amp;gt; to &amp;lt;h:commandButton&amp;gt;&lt;/a&gt; and &lt;a href=&quot;https://stackoverflow.com/questions/25339056/understanding-process-and-update-attributes-of-primefaces&quot;&gt;Understanding PrimeFaces process/update and JSF f:ajax execute/render attributes&lt;/a&gt;.</source>
          <target state="translated">Ajaxを使用していて、送信された値が &lt;code&gt;null&lt;/code&gt; になる場合は、 &lt;code&gt;UIInput&lt;/code&gt; および &lt;code&gt;UICommand&lt;/code&gt; コンポーネントが &lt;code&gt;&amp;lt;f:ajax execute&amp;gt;&lt;/code&gt; または例 &lt;code&gt;&amp;lt;p:commandXxx process&amp;gt;&lt;/code&gt; でカバーされていることを確認してください。 t実行/処理されます。 &lt;a href=&quot;https://stackoverflow.com/questions/17960929/submitted-form-values-not-updated-in-model-when-adding-fajax-to-hcommandbut&quot;&gt;&amp;lt;f：ajax&amp;gt;を&amp;lt;h：commandButton&amp;gt;に追加するときにモデルで更新されない送信済みフォームの値&lt;/a&gt;と&lt;a href=&quot;https://stackoverflow.com/questions/25339056/understanding-process-and-update-attributes-of-primefaces&quot;&gt;PrimeFacesプロセス/更新およびJSF f：ajax実行/レンダリング属性&lt;/a&gt;についても参照してください。</target>
        </trans-unit>
        <trans-unit id="26dbf2c15abdeb08213c97b58bcc0aa4ec635e0d" translate="yes" xml:space="preserve">
          <source>If your &lt;code&gt;h:commandLink&lt;/code&gt; is inside a &lt;code&gt;h:dataTable&lt;/code&gt; there is another reason why the &lt;code&gt;h:commandLink&lt;/code&gt; might not work:</source>
          <target state="translated">&lt;code&gt;h:commandLink&lt;/code&gt; が &lt;code&gt;h:dataTable&lt;/code&gt; 内にある場合、 &lt;code&gt;h:commandLink&lt;/code&gt; が機能しない可能性がある別の理由があります。</target>
        </trans-unit>
        <trans-unit id="c76acb4b3d3f7a637166854a94ce22d2fdec0f06" translate="yes" xml:space="preserve">
          <source>In case you still stucks, it's time to debug. In the client side, press F12 in webbrowser to open the web developer toolset. Click the &lt;em&gt;Console&lt;/em&gt; tab so see the JavaScript conosle. It should be free of any JavaScript errors. Below screenshot is an example from Chrome which demonstrates the case of submitting an &lt;code&gt;&amp;lt;f:ajax&amp;gt;&lt;/code&gt; enabled button while not having &lt;code&gt;&amp;lt;h:head&amp;gt;&lt;/code&gt; declared (as described in point 7 above).</source>
          <target state="translated">まだ行き詰まっている場合は、デバッグの時間です。 クライアント側で、WebブラウザーでF12キーを押して、Web開発者ツールセットを開きます。 [ &lt;em&gt;コンソール&lt;/em&gt; ]タブをクリックして、JavaScript &lt;em&gt;コンソールを&lt;/em&gt;表示します。 JavaScriptエラーがあってはなりません。 以下のスクリーンショットは、 &lt;code&gt;&amp;lt;h:head&amp;gt;&lt;/code&gt; が宣言されていないときに &lt;code&gt;&amp;lt;f:ajax&amp;gt;&lt;/code&gt; が有効なボタンを送信するケースを示すChromeの例です（上記のポイント7で説明）。</target>
        </trans-unit>
        <trans-unit id="183480165efa4b95340f558c47bf0d901be7a5f3" translate="yes" xml:space="preserve">
          <source>In my case, I have a mix of vanilla HttpServlet's providing OAuth authentication via Auth0 and JSF facelets and beans carrying out my application views and business logic.</source>
          <target state="translated">私の場合は、Auth0 を介して OAuth 認証を提供するバニラ HttpServlet と、アプリケーションのビューとビジネスロジックを実行する JSF フェイスレットとビーンズを組み合わせています。</target>
        </trans-unit>
        <trans-unit id="934391f3715be29d2e0b4423613ce2cc51ecb036" translate="yes" xml:space="preserve">
          <source>In the server side, make sure that server is started in debug mode. Put a debug breakpoint in a method of the JSF component of interest which you expect to be called during processing the form submit. E.g. in case of &lt;code&gt;UICommand&lt;/code&gt; component, that would be &lt;a href=&quot;http://grepcode.com/file/repo1.maven.org/maven2/javax.faces/javax.faces-api/2.2/javax/faces/component/UICommand.java#UICommand.queueEvent%28javax.faces.event.FacesEvent%29&quot;&gt;&lt;code&gt;UICommand#queueEvent()&lt;/code&gt;&lt;/a&gt; and in case of &lt;code&gt;UIInput&lt;/code&gt; component, that would be &lt;a href=&quot;http://grepcode.com/file/repo1.maven.org/maven2/javax.faces/javax.faces-api/2.2/javax/faces/component/UIInput.java#UIInput.validate%28javax.faces.context.FacesContext%29&quot;&gt;&lt;code&gt;UIInput#validate()&lt;/code&gt;&lt;/a&gt;. Just step through the code execution and inspect if the flow and variables are as per expectations. Below screenshot is an example from Eclipse's debugger.</source>
          <target state="translated">サーバー側で、サーバーがデバッグモードで起動されていることを確認します。 フォーム送信の処理中に呼び出されると予想される対象のJSFコンポーネントのメソッドにデバッグブレークポイントを配置します。 たとえば、 &lt;code&gt;UICommand&lt;/code&gt; コンポーネントの場合はUICommand &lt;a href=&quot;http://grepcode.com/file/repo1.maven.org/maven2/javax.faces/javax.faces-api/2.2/javax/faces/component/UICommand.java#UICommand.queueEvent%28javax.faces.event.FacesEvent%29&quot;&gt; &lt;code&gt;UICommand#queueEvent()&lt;/code&gt; &lt;/a&gt;なり、 &lt;code&gt;UIInput&lt;/code&gt; コンポーネントの場合は&lt;a href=&quot;http://grepcode.com/file/repo1.maven.org/maven2/javax.faces/javax.faces-api/2.2/javax/faces/component/UIInput.java#UIInput.validate%28javax.faces.context.FacesContext%29&quot;&gt; &lt;code&gt;UIInput#validate()&lt;/code&gt; になり&lt;/a&gt;ます。 コードの実行をステップ実行し、フローと変数が期待どおりかどうかを調べます。 以下のスクリーンショットは、Eclipseのデバッガーの例です。</target>
        </trans-unit>
        <trans-unit id="3c8d8b817f472ca51d910bf99f9f2c1366df731c" translate="yes" xml:space="preserve">
          <source>In:</source>
          <target state="translated">In:</target>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="2ff2e35a47d0ca16aab845cbe22de6fbe450b984" translate="yes" xml:space="preserve">
          <source>Just took me a looong time to find out. (... and I think it's rather unclever to use defaults that are different from JSF!)</source>
          <target state="translated">ただ、気づくのに時間がかかった。(...そして、JSFとは違うデフォルトを使うのは、むしろ不粋だと思います!)</target>
        </trans-unit>
        <trans-unit id="1d86930b3117bca325817a10d4c98d91c0673298" translate="yes" xml:space="preserve">
          <source>Make sure that no &lt;code&gt;Filter&lt;/code&gt; or &lt;code&gt;Servlet&lt;/code&gt; in the same request-response chain has blocked the request fo the &lt;code&gt;FacesServlet&lt;/code&gt; somehow.</source>
          <target state="translated">同じリクエスト/レスポンスチェーン内の &lt;code&gt;Filter&lt;/code&gt; や &lt;code&gt;Servlet&lt;/code&gt; が &lt;code&gt;FacesServlet&lt;/code&gt; のリクエストを何らかの方法でブロックしていないことを確認してください。</target>
        </trans-unit>
        <trans-unit id="8665d2dc8b166e8db7e3f138791b0ce08b02a5b7" translate="yes" xml:space="preserve">
          <source>Make sure that no &lt;code&gt;PhaseListener&lt;/code&gt; or any &lt;code&gt;EventListener&lt;/code&gt; in the request-response chain has changed the JSF lifecycle to skip the invoke action phase by for example calling &lt;code&gt;FacesContext#renderResponse()&lt;/code&gt; or &lt;code&gt;FacesContext#responseComplete()&lt;/code&gt;.</source>
          <target state="translated">たとえば、 &lt;code&gt;FacesContext#renderResponse()&lt;/code&gt; や &lt;code&gt;FacesContext#responseComplete()&lt;/code&gt; を呼び出すなどして、アクションの呼び出しフェーズをスキップするように、リクエストレスポンスチェーン内の &lt;code&gt;PhaseListener&lt;/code&gt; または &lt;code&gt;EventListener&lt;/code&gt; がJSFライフサイクルを変更していないことを確認してください。</target>
        </trans-unit>
        <trans-unit id="c99951cd6fa460dec364216152eeebb4a475e63d" translate="yes" xml:space="preserve">
          <source>Make sure that the &lt;code&gt;ActionEvent&lt;/code&gt; argument of &lt;code&gt;actionListener&lt;/code&gt; is an  &lt;code&gt;javax.faces.event.ActionEvent&lt;/code&gt; and thus not &lt;code&gt;java.awt.event.ActionEvent&lt;/code&gt;, which is what most IDEs suggest as 1st autocomplete option. Having no argument is wrong as well if you use &lt;code&gt;actionListener=&quot;#{bean.method}&quot;&lt;/code&gt;. If you don't want an argument in your method, use &lt;code&gt;actionListener=&quot;#{bean.method()}&quot;&lt;/code&gt;. Or perhaps you actually want to use &lt;code&gt;action&lt;/code&gt; instead of &lt;code&gt;actionListener&lt;/code&gt;. See also &lt;a href=&quot;https://stackoverflow.com/questions/3909267/differences-between-action-and-actionlistener&quot;&gt;Differences between action and actionListener&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;actionListener&lt;/code&gt; の &lt;code&gt;ActionEvent&lt;/code&gt; 引数が &lt;code&gt;javax.faces.event.ActionEvent&lt;/code&gt; であって、 &lt;code&gt;java.awt.event.ActionEvent&lt;/code&gt; ではないことを確認してください。これは、ほとんどのIDEが最初のオートコンプリートオプションとして提案しているものです。 &lt;code&gt;actionListener=&quot;#{bean.method}&quot;&lt;/code&gt; を使用する場合も、引数がないことは間違いです。 メソッドに引数が必要ない場合は、 &lt;code&gt;actionListener=&quot;#{bean.method()}&quot;&lt;/code&gt; を使用します。 あるいは、実際には &lt;code&gt;actionListener&lt;/code&gt; の代わりに &lt;code&gt;action&lt;/code&gt; を使用したいかもしれません。 &lt;a href=&quot;https://stackoverflow.com/questions/3909267/differences-between-action-and-actionlistener&quot;&gt;actionとactionListenerの違い&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="787bb671c544c94f96b9ebd91b2b2969dcf21603" translate="yes" xml:space="preserve">
          <source>No &lt;code&gt;UIInput&lt;/code&gt; value validation/conversion error should have occurred. You can use &lt;code&gt;&amp;lt;h:messages&amp;gt;&lt;/code&gt; to show any messages which are not shown by any input-specific &lt;code&gt;&amp;lt;h:message&amp;gt;&lt;/code&gt; components. Don't forget to include the &lt;code&gt;id&lt;/code&gt; of &lt;code&gt;&amp;lt;h:messages&amp;gt;&lt;/code&gt; in the &lt;code&gt;&amp;lt;f:ajax render&amp;gt;&lt;/code&gt;, if any, so that it will be updated as well on ajax requests. See also &lt;a href=&quot;https://stackoverflow.com/questions/16175178/hmessages-does-not-display-messages-when-pcommandbutton-is-pressed&quot;&gt;h:messages does not display messages when p:commandButton is pressed&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;UIInput&lt;/code&gt; 値の検証/変換エラーは発生していないはずです。 &lt;code&gt;&amp;lt;h:messages&amp;gt;&lt;/code&gt; を使用して、入力固有の &lt;code&gt;&amp;lt;h:message&amp;gt;&lt;/code&gt; コンポーネントでは表示されないメッセージを表示できます。 &lt;code&gt;&amp;lt;h:messages&amp;gt;&lt;/code&gt; の &lt;code&gt;id&lt;/code&gt; を&amp;lt; &lt;code&gt;&amp;lt;f:ajax render&amp;gt;&lt;/code&gt; に含めることを忘れないでください。そうすることで、ajaxリクエストでも更新されるようになります。 &lt;a href=&quot;https://stackoverflow.com/questions/16175178/hmessages-does-not-display-messages-when-pcommandbutton-is-pressed&quot;&gt;p：commandButtonが押されたときにh：messagesがメッセージを表示しない&lt;/a&gt;ことも参照してください。</target>
        </trans-unit>
        <trans-unit id="046e5ea2ef03122b66dcfbbd6d14c9c7c885e722" translate="yes" xml:space="preserve">
          <source>Once I refactored my web.xml, and removed a middle-man-servlet, it then &quot;magically&quot; worked.</source>
          <target state="translated">web.xmlをリファクタリングして、ミドルマンサービスレットを削除したら、「魔法のように」動くようになりました。</target>
        </trans-unit>
        <trans-unit id="900f6d313ce970b4b46db22096b5f7b210942ed8" translate="yes" xml:space="preserve">
          <source>One more possibility: if the symptom is that the first invocation works, but subsequent ones do not, you may be using PrimeFaces 3.x with JSF 2.2, as detailed here: &lt;a href=&quot;https://stackoverflow.com/questions/15897201/no-viewstate-is-sent&quot;&gt;No ViewState is sent&lt;/a&gt;.</source>
          <target state="translated">もう1つの可能性：最初の呼び出しは機能するがその後の呼び出しは機能しないという症状である場合、PrimeFaces 3.xをJSF 2.2で使用している可能性が&lt;a href=&quot;https://stackoverflow.com/questions/15897201/no-viewstate-is-sent&quot;&gt;あります&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="acb58217267f8aa5bbd4414adc16b34810b71c1b" translate="yes" xml:space="preserve">
          <source>Placing this attribute in the same scope as the table data itself fixed the problem.</source>
          <target state="translated">この属性をテーブルデータ自体と同じスコープに配置すると、問題が修正されました。</target>
        </trans-unit>
        <trans-unit id="e70a41047a9be3f21e41f17344e58620a8b2f37b" translate="yes" xml:space="preserve">
          <source>Possible causes</source>
          <target state="translated">考えられる原因</target>
        </trans-unit>
        <trans-unit id="6c9d7f7a081fedd16ef6bbbaebd4c0160a1cbf0a" translate="yes" xml:space="preserve">
          <source>So if the underlying data-source is request scoped, the &lt;code&gt;h:commandLink&lt;/code&gt; does not work!</source>
          <target state="translated">したがって、基になるデータソースがリクエストスコープの場合、 &lt;code&gt;h:commandLink&lt;/code&gt; は機能しません。</target>
        </trans-unit>
        <trans-unit id="89bde3332b761fb73fb19320e8a928b98c3b3e89" translate="yes" xml:space="preserve">
          <source>Sometimes, when using &lt;code&gt;&amp;lt;h:commandLink&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;h:commandButton&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;f:ajax&amp;gt;&lt;/code&gt;, the &lt;code&gt;action&lt;/code&gt;, &lt;code&gt;actionListener&lt;/code&gt; or &lt;code&gt;listener&lt;/code&gt; method associated with the tag are simply not being invoked. Or, the bean properties are not updated with submitted &lt;code&gt;UIInput&lt;/code&gt; values.</source>
          <target state="translated">&lt;code&gt;&amp;lt;h:commandLink&amp;gt;&lt;/code&gt; 、 &amp;lt;h：commandButton&amp;gt; 、または &lt;code&gt;&amp;lt;f:ajax&amp;gt;&lt;/code&gt; を使用しているときに、タグに関連付けられている &lt;code&gt;action&lt;/code&gt; 、 &lt;code&gt;actionListener&lt;/code&gt; または &lt;code&gt;listener&lt;/code&gt; メソッドが呼び出されない場合があります。 または、Beanプロパティーは、送信された &lt;code&gt;UIInput&lt;/code&gt; 値で更新されません。</target>
        </trans-unit>
        <trans-unit id="2b55403f5e52a8b313917ce599cc8d82a298ce25" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;onclick&lt;/code&gt; attribute of the &lt;code&gt;UICommand&lt;/code&gt; component and the &lt;code&gt;onsubmit&lt;/code&gt; attribute of the &lt;code&gt;UIForm&lt;/code&gt; component should not return &lt;code&gt;false&lt;/code&gt; or cause a JavaScript error. There should in case of &lt;code&gt;&amp;lt;h:commandLink&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;f:ajax&amp;gt;&lt;/code&gt; also be no JS errors visible in the browser's JS console. Usually googling the exact error message will already give you the answer. See also &lt;a href=&quot;https://stackoverflow.com/questions/16166039/adding-jquery-to-primefaces-results-in-uncaught-typeerror-over-all-place&quot;&gt;Adding jQuery to PrimeFaces results in Uncaught TypeErrors&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;UICommand&lt;/code&gt; コンポーネントの &lt;code&gt;onclick&lt;/code&gt; 属性とUIFormコンポーネントの &lt;code&gt;onsubmit&lt;/code&gt; 属性が &lt;code&gt;false&lt;/code&gt; を返したり、JavaScriptエラーを引き起こしたりしてはなりません。 &lt;code&gt;&amp;lt;h:commandLink&amp;gt;&lt;/code&gt; または &lt;code&gt;&amp;lt;f:ajax&amp;gt;&lt;/code&gt; の場合も、ブラウザのJSコンソールにJSエラーが表示されないはずです。 通常、正確なエラーメッセージをグーグルすることで、すでに回答が得られます。 &lt;a href=&quot;https://stackoverflow.com/questions/16166039/adding-jquery-to-primefaces-results-in-uncaught-typeerror-over-all-place&quot;&gt;PrimeFaces結果にjQueryを追加するとUncaught TypeErrors&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="683575e6a93b9626ee5db4bd9e19d0d15619cd91" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rendered&lt;/code&gt; attribute of the component and all of its parents and the &lt;code&gt;test&lt;/code&gt; attribute of any parent &lt;code&gt;&amp;lt;c:if&amp;gt;&lt;/code&gt;/&lt;code&gt;&amp;lt;c:when&amp;gt;&lt;/code&gt; should not evaluate to &lt;code&gt;false&lt;/code&gt; during the apply request values phase of the form submit request. JSF will recheck it as part of safeguard against tampered/hacked requests. Storing the variables responsible for the condition in a &lt;code&gt;@ViewScoped&lt;/code&gt; bean or making sure that you're properly preinitializing the condition in &lt;code&gt;@PostConstruct&lt;/code&gt; of a &lt;code&gt;@RequestScoped&lt;/code&gt; bean should fix it. The same applies to the &lt;code&gt;disabled&lt;/code&gt; attribute of the component, which should not evaluate to &lt;code&gt;true&lt;/code&gt; during apply request values phase. See also &lt;a href=&quot;https://stackoverflow.com/questions/13326404/jsf-commandbutton-action-not-invoked&quot;&gt;JSF CommandButton action not invoked&lt;/a&gt; and &lt;a href=&quot;https://stackoverflow.com/questions/18782503/form-submit-in-conditionally-rendered-component-is-not-processed&quot;&gt;Form submit in conditionally rendered component is not processed&lt;/a&gt;.</source>
          <target state="translated">コンポーネントとそのすべての親の &lt;code&gt;rendered&lt;/code&gt; 属性、および任意の親 &lt;code&gt;&amp;lt;c:if&amp;gt;&lt;/code&gt; / &lt;code&gt;&amp;lt;c:when&amp;gt;&lt;/code&gt; の &lt;code&gt;test&lt;/code&gt; 属性は、フォーム送信リクエストのリクエスト値の適用フェーズ中に &lt;code&gt;false&lt;/code&gt; と評価されるべきではありません。 JSFは、改ざん/ハッキングされた要求に対する保護の一環として再確認します。 条件の原因となる変数を &lt;code&gt;@ViewScoped&lt;/code&gt; Beanに格納するか、 @ RequestScoped Beanの &lt;code&gt;@PostConstruct&lt;/code&gt; で条件を適切に事前初期化していることを確認すると、条件が修正されます。 同じことがコンポーネントの &lt;code&gt;disabled&lt;/code&gt; された属性にも当てはまり、リクエスト値の適用フェーズでは &lt;code&gt;true&lt;/code&gt; と評価されるべきではありません。 「 &lt;a href=&quot;https://stackoverflow.com/questions/13326404/jsf-commandbutton-action-not-invoked&quot;&gt;JSF CommandButtonアクションが呼び出されない」&lt;/a&gt;および「 &lt;a href=&quot;https://stackoverflow.com/questions/18782503/form-submit-in-conditionally-rendered-component-is-not-processed&quot;&gt;条件付きでレンダリングされたコンポーネントでのフォーム送信が処理され&lt;/a&gt; ない 」も参照してください。</target>
        </trans-unit>
        <trans-unit id="c81848ff08fc3983fe3b2c5aa9924909dad9fd69" translate="yes" xml:space="preserve">
          <source>The underlying data-source which is bound to the &lt;code&gt;h:dataTable&lt;/code&gt; must also be available in the second JSF-Lifecycle that is triggered when the link is clicked.</source>
          <target state="translated">&lt;code&gt;h:dataTable&lt;/code&gt; にバインドされている基になるデータソースは、リンクがクリックされたときにトリガーされる2番目のJSFライフサイクルでも使用できる必要があります。</target>
        </trans-unit>
        <trans-unit id="31194f50c39ca6965c1c258a38ee81b4f0441b53" translate="yes" xml:space="preserve">
          <source>To solve;</source>
          <target state="translated">解決するために。</target>
        </trans-unit>
        <trans-unit id="cd38dcc63534233835be9bd9ba0ef22a7253957e" translate="yes" xml:space="preserve">
          <source>What I don't know is why the facelet was able to access the bean properties but could not set them, and this clearly screams for doing away with the mix of servlets and JSF, but I hope this helps someone avoid many hours of head-to-table-banging.</source>
          <target state="translated">私が知らないのは、なぜフェイスレットがビーンのプロパティにアクセスできたのに、それらを設定できなかったのかということで、これは明らかにサーブレットとJSFの混合物を排除するために叫んでいます。</target>
        </trans-unit>
        <trans-unit id="55d020f4d16abc75661bbb064220f5f235d8332c" translate="yes" xml:space="preserve">
          <source>What are the possible causes and solutions for this?</source>
          <target state="translated">考えられる原因と解決策は?</target>
        </trans-unit>
        <trans-unit id="52fb4fb0c0ae3500cce8b73c884ba66d78512a5b" translate="yes" xml:space="preserve">
          <source>When you use a &lt;code&gt;p:commandButton&lt;/code&gt; for the action that needs to be done on the server, you can not use &lt;code&gt;type=&quot;button&quot;&lt;/code&gt; because that is for &lt;b&gt;Push buttons&lt;/b&gt; which are used to execute custom javascript without causing an ajax/non-ajax request to the server.</source>
          <target state="translated">サーバーで実行する必要があるアクションに &lt;code&gt;p:commandButton&lt;/code&gt; を使用する場合、 &lt;code&gt;type=&quot;button&quot;&lt;/code&gt; は使用できません。これは、ajax / non-ajaxリクエストを発生させずにカスタムJavaScriptを実行するために使用される&lt;b&gt;プッシュボタンの&lt;/b&gt;ためです。サーバーに。</target>
        </trans-unit>
        <trans-unit id="00e25c622df489b30b52379657126b136ec6699d" translate="yes" xml:space="preserve">
          <source>Whenever an &lt;code&gt;UICommand&lt;/code&gt; component (&lt;code&gt;&amp;lt;h:commandXxx&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;p:commandXxx&amp;gt;&lt;/code&gt;, etc) fails to invoke the associated action method, or an &lt;code&gt;UIInput&lt;/code&gt; component (&lt;code&gt;&amp;lt;h:inputXxx&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;p:inputXxxx&amp;gt;&lt;/code&gt;, etc) fails to process the submitted values and/or update the model values, and you aren't seeing any googlable exceptions and/or warnings in the server log, also not when you configure an ajax exception handler as per &lt;a href=&quot;https://stackoverflow.com/questions/27526753/exception-handling-in-jsf-ajax-requests&quot;&gt;Exception handling in JSF ajax requests&lt;/a&gt;, nor when you set below context parameter in &lt;code&gt;web.xml&lt;/code&gt;,</source>
          <target state="translated">&lt;code&gt;UICommand&lt;/code&gt; コンポーネント（ &lt;code&gt;&amp;lt;h:commandXxx&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;p:commandXxx&amp;gt;&lt;/code&gt; など）が関連するアクションメソッドの呼び出しに失敗した場合、または &lt;code&gt;UIInput&lt;/code&gt; コンポーネント（ &lt;code&gt;&amp;lt;h:inputXxx&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;p:inputXxxx&amp;gt;&lt;/code&gt; など）が送信された値および/またはモデル値を更新し、サーバーログにグーグル可能な例外や警告を表示していません。また&lt;a href=&quot;https://stackoverflow.com/questions/27526753/exception-handling-in-jsf-ajax-requests&quot;&gt;、JSF ajaxリクエストの例外処理&lt;/a&gt;に従ってajax例外ハンドラーを構成したときも、設定したときもありません。 &lt;code&gt;web.xml&lt;/code&gt; のコンテキストパラメータの下</target>
        </trans-unit>
        <trans-unit id="8cc2d69e76122736995792000c78c4891eb63435" translate="yes" xml:space="preserve">
          <source>While my answer isn't 100% applicable, but most search engines find this as the first hit, I decided to post it nontheless:</source>
          <target state="translated">私の答えは100%当てはまるものではありませんが、ほとんどの検索エンジンはこれを最初のヒットとして見つけますが、それにもかかわらず、私はそれを投稿することにしました。</target>
        </trans-unit>
        <trans-unit id="423ade3816837a68684473e4349ce56f6c5c7386" translate="yes" xml:space="preserve">
          <source>You cannot nest multiple &lt;code&gt;UIForm&lt;/code&gt; components in each other. This is illegal in HTML. The browser behavior is unspecified. Watch out with include files! You can use &lt;code&gt;UIForm&lt;/code&gt; components in parallel, but they won't process each other during submit. You should also watch out with &quot;God Form&quot; antipattern; make sure that you don't unintentionally process/validate all other (invisible) inputs in the very same form (e.g. having a hidden dialog with required inputs in the very same form). See also &lt;a href=&quot;https://stackoverflow.com/questions/7371903/using-multiple-hform-in-a-jsf-page&quot;&gt;How to use &amp;lt;h:form&amp;gt; in JSF page? Single form? Multiple forms? Nested forms?&lt;/a&gt;.</source>
          <target state="translated">複数の &lt;code&gt;UIForm&lt;/code&gt; コンポーネントを互いにネストすることはできません。 これはHTMLでは違法です。 ブラウザの動作は規定されていません。 インクルードファイルに注意してください！ &lt;code&gt;UIForm&lt;/code&gt; コンポーネントは並行して使用できますが、送信時に相互に処理されません。 また、 &quot;God Form&quot;アンチパターンにも注意する必要があります。 非常に同じフォームにある他のすべての（非表示）入力を誤って処理/検証しないようにしてください（たとえば、非常に同じフォームに必要な入力がある非表示のダイアログがある）。 &lt;a href=&quot;https://stackoverflow.com/questions/7371903/using-multiple-hform-in-a-jsf-page&quot;&gt;JSFページで&amp;lt;h：form&amp;gt;を使用する方法&lt;/a&gt;も参照してください。 シングルフォーム？ 複数のフォーム？ ネストされたフォーム？ 。</target>
        </trans-unit>
        <trans-unit id="83b9786384a50732d924ecf189d5816e812eb225" translate="yes" xml:space="preserve">
          <source>and you are also not seeing any googlable errors and/or warnings in browser's JavaScript console (press F12 in Chrome/Firefox23+/IE9+ to open the web developer toolset and then open the &lt;em&gt;Console&lt;/em&gt; tab), then work through below list of possible causes.</source>
          <target state="translated">また、ブラウザーのJavaScriptコンソールにグーグルエラーや警告が表示されない（Chrome / Firefox23 + / IE9 +でF12を押してWeb開発者ツールセットを開き、[ &lt;em&gt;コンソール&lt;/em&gt; ]タブを開く）場合は、以下の考えられる原因のリストに進んでください。</target>
        </trans-unit>
        <trans-unit id="0108272869d720e2cea513ee55f9f5fad26a791d" translate="yes" xml:space="preserve">
          <source>commandButton/commandLink/ajax action/listener method not invoked or input value not set/updated</source>
          <target state="translated">commandButtoncommandLinkajax actionlistener メソッドが起動されていないか、入力値が設定されていません。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
