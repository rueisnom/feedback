<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/215718">
    <body>
      <group id="215718">
        <trans-unit id="b5825ff58f9e82e24d04cfda6316ecce0102dd5d" translate="yes" xml:space="preserve">
          <source>(OBS: &lt;code&gt;$file&lt;/code&gt; needs to be prefixed with &lt;code&gt;./&lt;/code&gt; if it is a relative path for &lt;code&gt;git show $revision:$file&lt;/code&gt; to work)</source>
          <target state="translated">（OBS：如果 &lt;code&gt;$file&lt;/code&gt; 是 &lt;code&gt;git show $revision:$file&lt;/code&gt; 的相对路径，则$ file必须前缀。）</target>
        </trans-unit>
        <trans-unit id="591b8c37c7f90285bacc6d2a2421434d66dd7763" translate="yes" xml:space="preserve">
          <source>(The second &lt;code&gt;add&lt;/code&gt; stages the file in the index, but it does &lt;em&gt;not&lt;/em&gt; get
committed.)</source>
          <target state="translated">（第二个 &lt;code&gt;add&lt;/code&gt; 在索引中暂存了文件，但未提交。）</target>
        </trans-unit>
        <trans-unit id="a36fc01ed773a54675b80694c5408121c02a0738" translate="yes" xml:space="preserve">
          <source>. The final history result is:</source>
          <target state="translated">.最终的历史结果是:</target>
        </trans-unit>
        <trans-unit id="fee3678a710ca3d67435ace9c7cfbf9bb5fbf45c" translate="yes" xml:space="preserve">
          <source>... check out the branch of changes you want to apply to the &lt;code&gt;master&lt;/code&gt; branch. The &lt;code&gt;rebase&lt;/code&gt; command takes the commits from &lt;code&gt;&amp;lt;my branch&amp;gt;&lt;/code&gt; (that are not found in &lt;code&gt;master&lt;/code&gt;) and reapplies them to the head of &lt;code&gt;master&lt;/code&gt;. In other words, the parent of the first commit in &lt;code&gt;&amp;lt;my branch&amp;gt;&lt;/code&gt; is no longer a previous commit in the &lt;code&gt;master&lt;/code&gt; history, but the current head of &lt;code&gt;master&lt;/code&gt;. The two commands are the same as:</source>
          <target state="translated">...签出要应用于 &lt;code&gt;master&lt;/code&gt; 分支的更改分支。 &lt;code&gt;rebase&lt;/code&gt; 命令从 &lt;code&gt;&amp;lt;my branch&amp;gt;&lt;/code&gt; 中获取提交（在 &lt;code&gt;master&lt;/code&gt; 中找不到），并将其重新应用于master的头部。 换句话说， &lt;code&gt;&amp;lt;my branch&amp;gt;&lt;/code&gt; 中的第一次提交的父项不再是 &lt;code&gt;master&lt;/code&gt; 历史记录中的先前提交，而是master的当前头。 这两个命令与以下命令相同：</target>
        </trans-unit>
        <trans-unit id="32457f44393ae83650a6759d1be7de7ec9b74db0" translate="yes" xml:space="preserve">
          <source>... do a fast-forward merge to apply all &lt;code&gt;&amp;lt;my branch&amp;gt;&lt;/code&gt; changes onto &lt;code&gt;master&lt;/code&gt;. Without this step, the rebase commit does not get added to &lt;code&gt;master&lt;/code&gt;. The final result is:</source>
          <target state="translated">...进行快速合并以将所有 &lt;code&gt;&amp;lt;my branch&amp;gt;&lt;/code&gt; 更改应用到 &lt;code&gt;master&lt;/code&gt; 。 没有此步骤，就不会将rebase提交添加到 &lt;code&gt;master&lt;/code&gt; 。 最终结果是：</target>
        </trans-unit>
        <trans-unit id="2caad0f2173d2d655cbc3c0c173dfe1327ac0aac" translate="yes" xml:space="preserve">
          <source>1.&lt;code&gt;git checkout file.txt&lt;/code&gt; : this will remove local changes, if you don't need them</source>
          <target state="translated">1. &lt;code&gt;git checkout file.txt&lt;/code&gt; ：如果您不需要本地更改，它将删除本地更改</target>
        </trans-unit>
        <trans-unit id="df790f400c1cc6b2a08aa71acda622ee4bd096a0" translate="yes" xml:space="preserve">
          <source>2.&lt;code&gt;git checkout abc1 file.txt&lt;/code&gt; : this will bring your file to your &lt;em&gt;wanted&lt;/em&gt; version</source>
          <target state="translated">2. &lt;code&gt;git checkout abc1 file.txt&lt;/code&gt; ：这会将您的文件带到您&lt;em&gt;想要的&lt;/em&gt;版本</target>
        </trans-unit>
        <trans-unit id="96eceaf7f9624a618629e12754e8271e7f08f999" translate="yes" xml:space="preserve">
          <source>2.Git revert file to a specific branch</source>
          <target state="translated">2.Git还原文件到特定的分支</target>
        </trans-unit>
        <trans-unit id="38874695380346721a7604681b87c1e9c7fe8a27" translate="yes" xml:space="preserve">
          <source>3.&lt;code&gt;git commit -m &quot;Restored file.txt to version abc1&quot;&lt;/code&gt; : this will commit your reversion.</source>
          <target state="translated">3. &lt;code&gt;git commit -m &quot;Restored file.txt to version abc1&quot;&lt;/code&gt; ：这将提交您的还原。</target>
        </trans-unit>
        <trans-unit id="7cf714c2624816bb516ad8b391c6b93811919927" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Git checkout ./foo&lt;/code&gt; means revert path &lt;code&gt;./foo&lt;/code&gt; from the &lt;strong&gt;index&lt;/strong&gt;;
adding &lt;code&gt;HEAD&lt;/code&gt; instructs Git to revert that path in the index to its
&lt;code&gt;HEAD&lt;/code&gt; revision before doing so.</source>
          <target state="translated">&lt;code&gt;Git checkout ./foo&lt;/code&gt; 表示从&lt;strong&gt;索引&lt;/strong&gt;还原路径 &lt;code&gt;./foo&lt;/code&gt; ； 添加 &lt;code&gt;HEAD&lt;/code&gt; 会指示Git在执行此操作之前将索引中的该路径还原为其 &lt;code&gt;HEAD&lt;/code&gt; 版本。</target>
        </trans-unit>
        <trans-unit id="b204ed8a47fce3eb889e67797fb2a6c5c18ba160" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git add &amp;lt;file_i_want_to_revert&amp;gt;&lt;/code&gt; &amp;amp;&amp;amp; &lt;code&gt;git commit -m 'reverting file'&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;git add &amp;lt;file_i_want_to_revert&amp;gt;&lt;/code&gt; &amp;amp;&amp;amp; &lt;code&gt;git commit -m 'reverting file'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5d250d674ef27174ace7c324f83e3c1fabd51414" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git push&lt;/code&gt; : this will push everything on the remote repository</source>
          <target state="translated">&lt;code&gt;git push&lt;/code&gt; ：这将把所有内容推送到远程存储库</target>
        </trans-unit>
        <trans-unit id="efed4d6b61f93b94ee297db82a715a90aa7d15ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;master&lt;/code&gt; and &lt;code&gt;&amp;lt;my branch&amp;gt;&lt;/code&gt; both reference &lt;code&gt;B'&lt;/code&gt;. Also, from this point it is safe to delete the &lt;code&gt;&amp;lt;my branch&amp;gt;&lt;/code&gt; reference.</source>
          <target state="translated">&lt;code&gt;master&lt;/code&gt; 和 &lt;code&gt;&amp;lt;my branch&amp;gt;&lt;/code&gt; 都引用 &lt;code&gt;B'&lt;/code&gt; 。 同样，从这一点来看，删除 &lt;code&gt;&amp;lt;my branch&amp;gt;&lt;/code&gt; 引用是安全的。</target>
        </trans-unit>
        <trans-unit id="258460c32a16b76b3e60476dbbd3ff002a43cc10" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Essentially, all that one would manually do in this situation,&lt;br/&gt;
wrapped-up in one beautiful, efficient git-alias - &lt;strong&gt;&lt;a href=&quot;http://thecodeartist.blogspot.in/2015/04/git-prevision-checkout-previous-version-of-file.html&quot;&gt;git-prevision&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;本质上，在这种情况下，所有操作都是手动完成的，&lt;/em&gt; &lt;em&gt;&lt;br/&gt;&lt;/em&gt; &lt;em&gt;包裹在一个美丽，高效的git-alias中&lt;strong&gt;&lt;a href=&quot;http://thecodeartist.blogspot.in/2015/04/git-prevision-checkout-previous-version-of-file.html&quot;&gt;-git-prevision&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="bf46ceae77448799296a4e0af15b5ca191315bd7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Now say that I messed up something in the file &lt;code&gt;file.txt&lt;/code&gt; and I want to go back to a previous commit &lt;code&gt;abc1&lt;/code&gt;.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;现在说我把文件 &lt;code&gt;file.txt&lt;/code&gt; 中的内容弄乱了，我想回到上一个提交 &lt;code&gt;abc1&lt;/code&gt; 。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="36972d770d4324031e868adb718961ad2fedeaad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;What you need to type in your terminal&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;您需要在终端中输入什么&lt;/strong&gt; ：</target>
        </trans-unit>
        <trans-unit id="477090777cdde6459cd1f1f2a79835ec1d98bc30" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;You can do it in 4 steps:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;您可以通过4个步骤进行操作：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9b7bb5a088ff06aeaacfda92e37bebcb8cad6aa6" translate="yes" xml:space="preserve">
          <source>A good workflow for managaging waypoints is to use tags to cleanly mark points in your timeline. I can't quite understand your last sentence but what you may want is diverge a branch from a previous point in time. To do this, use the handy checkout command:</source>
          <target state="translated">管理航点的一个好的工作流程是使用标签在你的时间线中清晰地标记出点。我不太理解你的最后一句话,但你可能想要的是将一个分支从之前的时间点上分流。要做到这一点,使用方便的checkout命令。</target>
        </trans-unit>
        <trans-unit id="56d824866a6d08aa48ffad391812836d6ee7590c" translate="yes" xml:space="preserve">
          <source>Add the following to your &lt;code&gt;gitconfig&lt;/code&gt;</source>
          <target state="translated">将以下内容添加到您的 &lt;code&gt;gitconfig&lt;/code&gt; 中</target>
        </trans-unit>
        <trans-unit id="d6794f540c9383b891b6eb812b82b44e41bc8136" translate="yes" xml:space="preserve">
          <source>Amusingly, &lt;code&gt;git checkout foo&lt;/code&gt; will not work if the working copy is in a directory named &lt;code&gt;foo&lt;/code&gt;; however, both &lt;code&gt;git checkout HEAD foo&lt;/code&gt; and &lt;code&gt;git checkout ./foo&lt;/code&gt; will:</source>
          <target state="translated">有趣的是，如果工作副本位于名为 &lt;code&gt;foo&lt;/code&gt; 的目录中，则 &lt;code&gt;git checkout foo&lt;/code&gt; 将不起作用。 但是， &lt;code&gt;git checkout HEAD foo&lt;/code&gt; 和 &lt;code&gt;git checkout ./foo&lt;/code&gt; 都将：</target>
        </trans-unit>
        <trans-unit id="266b50f277a5694518b6bfdc6e42edebb1af0559" translate="yes" xml:space="preserve">
          <source>And also, I use this a lot just to see a particular version temporarily:</source>
          <target state="translated">还有,我经常用这个,就是为了临时看一个特定的版本。</target>
        </trans-unit>
        <trans-unit id="676448f80335a1ff6b3b72a7a46372f78112e20d" translate="yes" xml:space="preserve">
          <source>And the even more weird:</source>
          <target state="translated">而更诡异的是。</target>
        </trans-unit>
        <trans-unit id="d9cbf88d398665d3532ddefd0bccf8862f319fdf" translate="yes" xml:space="preserve">
          <source>And to revert to last committed version, which is most frequently needed, you can use this simpler command.</source>
          <target state="translated">而要恢复到上一次提交的版本,也就是最经常需要的版本,可以使用这个更简单的命令。</target>
        </trans-unit>
        <trans-unit id="2e7c984a77366a93c0e580d56e9199c8b8fd1c66" translate="yes" xml:space="preserve">
          <source>Armed with the knowledge that a commit can have two parents in the case of a merge, you should know that HEAD^1 is the first parent and HEAD~1 is the second parent.</source>
          <target state="translated">在合并的情况下,一个提交可以有两个父系的知识,你应该知道HEAD^1是第一父系,HEAD~1是第二父系。</target>
        </trans-unit>
        <trans-unit id="7af4315327fae43e58172c56db0d71c9f137aef4" translate="yes" xml:space="preserve">
          <source>As a side note, I've always been uncomfortable with this command because it's used for both ordinary things (changing between branches) and unusual, destructive things (discarding changes in the working directory).</source>
          <target state="translated">话说回来,我对这个命令一直很不习惯,因为它既用于普通的事情(分支之间的变化),也用于不寻常的、破坏性的事情(丢弃工作目录中的变化)。</target>
        </trans-unit>
        <trans-unit id="f982352059af8695b664ee28e5af660998d5bb71" translate="yes" xml:space="preserve">
          <source>As of git v2.23.0 there's a new &lt;a href=&quot;https://git-scm.com/docs/git-restore/2.23.0&quot;&gt;git restore&lt;/a&gt; method which is supposed to assume part of what &lt;code&gt;git checkout&lt;/code&gt; was responsible for (even the accepted answer mentions that &lt;code&gt;git checkout&lt;/code&gt; is quite confusing). See highlights of changes on &lt;a href=&quot;https://github.blog/2019-08-16-highlights-from-git-2-23/&quot;&gt;github blog&lt;/a&gt;.</source>
          <target state="translated">从git v2.23.0开始，有一个新的&lt;a href=&quot;https://git-scm.com/docs/git-restore/2.23.0&quot;&gt;git restore&lt;/a&gt;方法，该方法应该假定 &lt;code&gt;git checkout&lt;/code&gt; 负责的一部分（即使接受的答案也提到 &lt;code&gt;git checkout&lt;/code&gt; 相当令人困惑）。 在&lt;a href=&quot;https://github.blog/2019-08-16-highlights-from-git-2-23/&quot;&gt;github博客&lt;/a&gt;上查看更改的要点。</target>
        </trans-unit>
        <trans-unit id="23294bad7c9328074d6b716db4fb480963f166ef" translate="yes" xml:space="preserve">
          <source>Assume you have</source>
          <target state="translated">假设你有</target>
        </trans-unit>
        <trans-unit id="a33c8a8992133dbbe4b62c8221bb6de59f96f4f8" translate="yes" xml:space="preserve">
          <source>Assuming the hash of the commit you want is &lt;code&gt;c5f567&lt;/code&gt;:</source>
          <target state="translated">假设所需的提交哈希为 &lt;code&gt;c5f567&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="56efa7fa07f7ffa350b60f738f48cb45a284b4e2" translate="yes" xml:space="preserve">
          <source>Basically, it will first generate a patch corresponding to the changes you want to revert, and then reverse-apply the patch to drop those changes.</source>
          <target state="translated">基本上,它将首先生成一个与你要恢复的更改相对应的补丁,然后反向应用该补丁来删除这些更改。</target>
        </trans-unit>
        <trans-unit id="ad80726ef525640c921576661fe867ad82814162" translate="yes" xml:space="preserve">
          <source>Between the step 2 and 3 of course you can do &lt;code&gt;git status&lt;/code&gt; to understand what is going on. Usually you should see the &lt;code&gt;file.txt&lt;/code&gt; already added and that is why there is no need of a &lt;code&gt;git add&lt;/code&gt;.</source>
          <target state="translated">当然，在第2步和第3步之间，您可以执行 &lt;code&gt;git status&lt;/code&gt; 来了解发生了什么。 通常，您应该看到 &lt;code&gt;file.txt&lt;/code&gt; 已经添加，这就是为什么不需要 &lt;code&gt;git add&lt;/code&gt; 的原因 。</target>
        </trans-unit>
        <trans-unit id="782a5604779a6c00915a15ade9bc687e5dc344ff" translate="yes" xml:space="preserve">
          <source>Either will work if there is only one parent in the tree.</source>
          <target state="translated">如果树上只有一个父或母,两者都可以。</target>
        </trans-unit>
        <trans-unit id="17102f52fd3cce62fad05455a0f2d18055a91b76" translate="yes" xml:space="preserve">
          <source>First Reset Head For Target File</source>
          <target state="translated">目标文件的第一个复位头</target>
        </trans-unit>
        <trans-unit id="bfdcc24a2297f1b4d866b8b4d6324466d26a0752" translate="yes" xml:space="preserve">
          <source>For example, to checkout the immediate previous revision of a single file &lt;code&gt;x/y/z.c&lt;/code&gt;, run</source>
          <target state="translated">例如，要签出单个文件 &lt;code&gt;x/y/z.c&lt;/code&gt; 前一修订版本，请运行</target>
        </trans-unit>
        <trans-unit id="aa9087013701645fca0b992c3de18a64b8371eda" translate="yes" xml:space="preserve">
          <source>For me none of the reply seemed really clear and therefore I would like to add mine which seems super easy.</source>
          <target state="translated">对我来说,我的回答似乎都不太清楚,所以我想加我的,这似乎超级容易。</target>
        </trans-unit>
        <trans-unit id="33a7a08d0236981d7881b666b88d31938cad645f" translate="yes" xml:space="preserve">
          <source>Git revert file to a specific commit</source>
          <target state="translated">Git还原文件到特定的提交</target>
        </trans-unit>
        <trans-unit id="c54a4fcc2bb35f19be56660c8cf2efdd74d4b12e" translate="yes" xml:space="preserve">
          <source>Here's how &lt;code&gt;rebase&lt;/code&gt; works:</source>
          <target state="translated">重新设置的工作方式如下：</target>
        </trans-unit>
        <trans-unit id="34e88036c4b6ee76e0310acd3938ebc58d579ad3" translate="yes" xml:space="preserve">
          <source>How can I reset or revert a file to a specific revision</source>
          <target state="translated">如何重置或还原文件到特定的版本?</target>
        </trans-unit>
        <trans-unit id="28a5668453816bf78805f2d7389b310f348f6c21" translate="yes" xml:space="preserve">
          <source>How git prevision works?</source>
          <target state="translated">git prevision是如何工作的?</target>
        </trans-unit>
        <trans-unit id="a31a4172bb80c1e2c39c01e2f486f436e980bb1b" translate="yes" xml:space="preserve">
          <source>I had the same issue just now and I found &lt;a href=&quot;https://stackoverflow.com/questions/725749/how-would-you-go-about-reverting-a-single-file-to-previous-commit-state-using-git/727725#727725&quot;&gt;this answer&lt;/a&gt; easiest to understand (&lt;code&gt;commit-ref&lt;/code&gt; is the SHA value of the change in the log you want to go back to):</source>
          <target state="translated">我刚才遇到了同样的问题，我发现&lt;a href=&quot;https://stackoverflow.com/questions/725749/how-would-you-go-about-reverting-a-single-file-to-previous-commit-state-using-git/727725#727725&quot;&gt;这个答案&lt;/a&gt;最容易理解（ &lt;code&gt;commit-ref&lt;/code&gt; 是您想返回的日志更改的SHA值）：</target>
        </trans-unit>
        <trans-unit id="c482061f28ab6cfd966c23ba70b6c8386d0bc31f" translate="yes" xml:space="preserve">
          <source>I have a commit &lt;code&gt;abc1&lt;/code&gt; and after it I have done several (or one modification) to a file &lt;code&gt;file.txt&lt;/code&gt;.</source>
          <target state="translated">我有一个提交 &lt;code&gt;abc1&lt;/code&gt; ，然后对文件 &lt;code&gt;file.txt&lt;/code&gt; 进行了几次（或一次修改）。</target>
        </trans-unit>
        <trans-unit id="07db4bd64374279d69677172755ef734ce8ed408" translate="yes" xml:space="preserve">
          <source>I have done a &lt;code&gt;git log&lt;/code&gt; along with a &lt;code&gt;git diff&lt;/code&gt; to find the revision I need, but just have no idea how to get the file back to its former state in the past.</source>
          <target state="translated">我已经做了一个 &lt;code&gt;git log&lt;/code&gt; 和一个 &lt;code&gt;git diff&lt;/code&gt; 来找到我需要的修订，但是却不知道如何使文件回到过去的状态。</target>
        </trans-unit>
        <trans-unit id="ed87c4bc9d2291fea23c1be89e2820e43eb50040" translate="yes" xml:space="preserve">
          <source>I have made some changes to a file which has been committed a few times as part of a group of files, but now want to reset/revert the changes on it back to a previous version.</source>
          <target state="translated">我对一个文件做了一些修改,这个文件作为一组文件的一部分已经提交了几次,但现在想将其上的修改恢复到以前的版本。</target>
        </trans-unit>
        <trans-unit id="24e2abbca211d54018b0666cfb95a48ea4571e8b" translate="yes" xml:space="preserve">
          <source>I have to plug &lt;a href=&quot;https://people.gnome.org/~newren/eg/&quot;&gt;EasyGit&lt;/a&gt; here, which is a wrapper to make git more approachable to novices without confusing seasoned users. One of the things it does is &lt;a href=&quot;http://www.gnome.org/~newren/eg/git-eg-differences.html#revert&quot;&gt;give more meanings to &lt;code&gt;git revert&lt;/code&gt;&lt;/a&gt;. In this case, you would simply say:</source>
          <target state="translated">我必须在此处插入&lt;a href=&quot;https://people.gnome.org/~newren/eg/&quot;&gt;EasyGit&lt;/a&gt; ，这是一个包装器，可以使git更适合新手使用，而不会混淆经验丰富的用户。 它做的一件事是&lt;a href=&quot;http://www.gnome.org/~newren/eg/git-eg-differences.html#revert&quot;&gt;给 &lt;code&gt;git revert&lt;/code&gt; 提供更多含义&lt;/a&gt; 。 在这种情况下，您只需说：</target>
        </trans-unit>
        <trans-unit id="7a7a661de7f3b1fa4ca1341e6a3ca072bff7ff72" translate="yes" xml:space="preserve">
          <source>I think I've found it....from &lt;a href=&quot;http://www-cs-students.stanford.edu/~blynn/gitmagic/ch02.html&quot;&gt;http://www-cs-students.stanford.edu/~blynn/gitmagic/ch02.html&lt;/a&gt;</source>
          <target state="translated">我想我已经找到了....来自&lt;a href=&quot;http://www-cs-students.stanford.edu/~blynn/gitmagic/ch02.html&quot;&gt;http://www-cs-students.stanford.edu/~blynn/gitmagic/ch02.html&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fb4b101b427252c1c19d2cc0a0b6e7e25e1a660e" translate="yes" xml:space="preserve">
          <source>Ian</source>
          <target state="translated">Ian</target>
        </trans-unit>
        <trans-unit id="1f01d64d9e95619b3479c465f76dacf05ab7a0f9" translate="yes" xml:space="preserve">
          <source>If  you want to get rid of the changes both the second and the third iteration, it is very simple:</source>
          <target state="translated">如果你想把第二次和第三次迭代的变化都去掉,其实很简单。</target>
        </trans-unit>
        <trans-unit id="5ee5f95b6ab776d625e41b6694a827c71b0ca6a0" translate="yes" xml:space="preserve">
          <source>If you just need to go back to the last commited version</source>
          <target state="translated">如果你只需要返回到最后一个已发布的版本</target>
        </trans-unit>
        <trans-unit id="b47839b0ffeee7daaba954b42b6fddbba5089814" translate="yes" xml:space="preserve">
          <source>If you know how many commits you need to go back, you can use:</source>
          <target state="translated">如果你知道你需要多少投入,你可以用。</target>
        </trans-unit>
        <trans-unit id="c450c6eaa44851942bbf746ba2c07e78f9b5b024" translate="yes" xml:space="preserve">
          <source>If you want to revert changes from one commit on a single file only, just as &lt;code&gt;git revert&lt;/code&gt; would do but only for one file (or say a subset of the commit files), I suggest to use both &lt;code&gt;git diff&lt;/code&gt; and &lt;code&gt;git apply&lt;/code&gt; like that (with &lt;code&gt;&amp;lt;sha&amp;gt;&lt;/code&gt; = the hash of the commit you want to revert) :</source>
          <target state="translated">如果您只想还原单个文件上的一次提交的更改，就像 &lt;code&gt;git revert&lt;/code&gt; 那样，但仅针对一个文件（或说提交文件的子集），我建议同时使用 &lt;code&gt;git diff&lt;/code&gt; 和 &lt;code&gt;git apply&lt;/code&gt; （使用 &lt;code&gt;&amp;lt;sha&amp;gt;&lt;/code&gt; =您要还原的提交的哈希值）：</target>
        </trans-unit>
        <trans-unit id="dff44a3840f7c7129778d6db8cbb9b408316a939" translate="yes" xml:space="preserve">
          <source>If you want to revert to the commit before &lt;code&gt;c5f567&lt;/code&gt;, append &lt;code&gt;~1&lt;/code&gt; (where 1 is the number of commits you want to go back, it can be anything):</source>
          <target state="translated">如果要恢复到 &lt;code&gt;c5f567&lt;/code&gt; 之前的提交，请附加 &lt;code&gt;~1&lt;/code&gt; （其中1是要返回的提交数，可以是任意值）：</target>
        </trans-unit>
        <trans-unit id="5894247679b1b7d420a38142c3019e2429a5b142" translate="yes" xml:space="preserve">
          <source>In order to go to a previous commit version of the file, get the commit number, say eb917a1
then</source>
          <target state="translated">为了转到文件的前一个提交版本,获取提交号,比如说eb917a1,然后</target>
        </trans-unit>
        <trans-unit id="6f7b7fb7f08216536d8432551fbfd4b32855cb8e" translate="yes" xml:space="preserve">
          <source>In the case that you want to revert a file to a previous commit (and the file you want to revert already committed) you can use</source>
          <target state="translated">如果你想恢复一个文件到之前的提交(而你想恢复的文件已经提交了),你可以使用</target>
        </trans-unit>
        <trans-unit id="d9f77d9f0d4306c8fffa8b85a2a4b66f96cadd9f" translate="yes" xml:space="preserve">
          <source>It might be easier to remember this command as both the &quot;base&quot; and &quot;modify&quot; branches are explicit.</source>
          <target state="translated">由于 &quot;基础 &quot;和 &quot;修改 &quot;分支都是明文规定的,所以这个命令可能比较容易记住。</target>
        </trans-unit>
        <trans-unit id="b789119370256ad6dfc91f751f31a3f0970704bf" translate="yes" xml:space="preserve">
          <source>Many answers here claims to use &lt;code&gt;git reset ... &amp;lt;file&amp;gt;&lt;/code&gt; or &lt;code&gt;git checkout ... &amp;lt;file&amp;gt;&lt;/code&gt; but by doing so, you will loose every modifications on &lt;code&gt;&amp;lt;file&amp;gt;&lt;/code&gt; committed after the commit you want to revert.</source>
          <target state="translated">这里的许多答案都声称使用 &lt;code&gt;git reset ... &amp;lt;file&amp;gt;&lt;/code&gt; 或 &lt;code&gt;git checkout ... &amp;lt;file&amp;gt;&lt;/code&gt; 但是这样做，您将丢失对要还原的提交后提交的 &lt;code&gt;&amp;lt;file&amp;gt;&lt;/code&gt; 的所有修改。</target>
        </trans-unit>
        <trans-unit id="25427e58a2647e826b13b2ecd001be46b0498741" translate="yes" xml:space="preserve">
          <source>Many suggestions here, most along the lines of &lt;code&gt;git checkout $revision -- $file&lt;/code&gt;. A couple of obscure alternatives:</source>
          <target state="translated">这里有很多建议，大部分都是 &lt;code&gt;git checkout $revision -- $file&lt;/code&gt; 。 几个晦涩的替代方案：</target>
        </trans-unit>
        <trans-unit id="9e22435ae74aa5d90740e1410b3c5d93a6ad9762" translate="yes" xml:space="preserve">
          <source>Next, type:</source>
          <target state="translated">接下来,类型。</target>
        </trans-unit>
        <trans-unit id="d04438c2ef16c8c18441030c74f69673367ffd85" translate="yes" xml:space="preserve">
          <source>Note that whoever created commit $B may not have been very disciplined and may have committed totally unrelated change in the same commit, and this revert may touch files other than &lt;em&gt;file&lt;/em&gt; you see offending changes, so you may want to check the result carefully after doing so.</source>
          <target state="translated">请注意，无论谁创建的提交$ B可能都没有受到严格的纪律，并且可能在同一提交中提交了完全不相关的更改，并且此还原可能会涉及您看到有问题的更改以外的&lt;em&gt;文件&lt;/em&gt; ，因此您可能需要在执行后仔细检查结果所以。</target>
        </trans-unit>
        <trans-unit id="eaa89032148588bf6becd5929ad147db4791f55e" translate="yes" xml:space="preserve">
          <source>Note, however, that &lt;code&gt;git checkout ./foo&lt;/code&gt; and &lt;code&gt;git checkout HEAD ./foo&lt;/code&gt;
are not &lt;strong&gt;exactly&lt;/strong&gt; the same thing; case in point:</source>
          <target state="translated">但是请注意， &lt;code&gt;git checkout ./foo&lt;/code&gt; 和 &lt;code&gt;git checkout HEAD ./foo&lt;/code&gt; 并不&lt;strong&gt;完全相同&lt;/strong&gt; 。 例子：</target>
        </trans-unit>
        <trans-unit id="99b005577479ff4803b3a3f975beb3eb985c1f44" translate="yes" xml:space="preserve">
          <source>Note: Do not forget to type the hash before the last one. Last hash points your current position (HEAD) and changes nothing.</source>
          <target state="translated">注意:不要忘了在最后一个哈希值前键入。最后一个哈希指向你当前的位置(head),并且没有任何变化。</target>
        </trans-unit>
        <trans-unit id="fc2161f6412078a566333e0dff9e1c59245fa40b" translate="yes" xml:space="preserve">
          <source>Obviously someone either needs to write an intelligible book on git, or git needs to be better explained in the documentation.  Faced with this same problem I guessed that</source>
          <target state="translated">很显然,要么有人需要写一本关于git的知识性书籍,要么git需要在文档中得到更好的解释。面对同样的问题,我猜到了以下几点</target>
        </trans-unit>
        <trans-unit id="36ff88d15f466bbdf074101531f8e7fd40a41063" translate="yes" xml:space="preserve">
          <source>Of course, it shall not work if reverted lines had been modified by any commit between &lt;code&gt;&amp;lt;sha1&amp;gt;&lt;/code&gt; and &lt;code&gt;HEAD&lt;/code&gt; (conflict).</source>
          <target state="translated">当然，如果通过 &lt;code&gt;&amp;lt;sha1&amp;gt;&lt;/code&gt; 与 &lt;code&gt;HEAD&lt;/code&gt; 之间的任何提交修改了还原行（冲突），它将不起作用。</target>
        </trans-unit>
        <trans-unit id="e835ae5df71dd85f545c0df325e20833f5e4d7d2" translate="yes" xml:space="preserve">
          <source>On the other hand, what you meant is to get rid of the change the second iteration (i.e. commit $B) brought in, while keeping what commit $C did to the file, you would want to revert $B</source>
          <target state="translated">另一方面,你的意思是要摆脱第二次迭代(即提交$B)带来的改变,同时保留提交$C对文件所做的改变,你要还原$B</target>
        </trans-unit>
        <trans-unit id="bfdc07321aeb66a2cb401379cbd9a906f8c01f90" translate="yes" xml:space="preserve">
          <source>Or if you want to restore to the content of one commit before c5f567:</source>
          <target state="translated">或者如果你想恢复到c5f567之前的一个提交的内容。</target>
        </trans-unit>
        <trans-unit id="5aee3fa460fb5bbeba7d99fec0866d0d23d74cf1" translate="yes" xml:space="preserve">
          <source>Second Checkout That File</source>
          <target state="translated">第二次结账</target>
        </trans-unit>
        <trans-unit id="74101dc7ded8d843039da0a5ce4cf311f55c53cb" translate="yes" xml:space="preserve">
          <source>So based on Greg Hewgill's answer (assuming the commit hash is &lt;code&gt;c5f567&lt;/code&gt;) the command would look like this:</source>
          <target state="translated">因此，基于Greg Hewgill的答案（假设commit哈希为 &lt;code&gt;c5f567&lt;/code&gt; ），命令将如下所示：</target>
        </trans-unit>
        <trans-unit id="9295d6be53a6a7084c6333657fcfa2a14c7e58da" translate="yes" xml:space="preserve">
          <source>Sometimes you just want to go back and forget about every change past a certain point because they're all wrong.</source>
          <target state="translated">有时候,你只想回到过去,忘记每一次的改变,因为它们都是错的。</target>
        </trans-unit>
        <trans-unit id="7f83df967576e38e44e02d4157f199b4088a5d46" translate="yes" xml:space="preserve">
          <source>Start with:</source>
          <target state="translated">首先是:</target>
        </trans-unit>
        <trans-unit id="7248f99234c1000d0a84df4ff79e22c0ba5db38b" translate="yes" xml:space="preserve">
          <source>That doesn't solve your problem, if you want to revert a change in a specific file and that commit changed more than that file.</source>
          <target state="translated">这并不能解决你的问题,如果你想恢复一个特定文件中的更改,而该提交的更改比该文件更多。</target>
        </trans-unit>
        <trans-unit id="41bcc0642be854b987ab1a7f8ef8efd1aba1113a" translate="yes" xml:space="preserve">
          <source>That will reset &lt;code&gt;foo&lt;/code&gt; to HEAD. You can also:</source>
          <target state="translated">这会将 &lt;code&gt;foo&lt;/code&gt; 重置为HEAD。 你也可以：</target>
        </trans-unit>
        <trans-unit id="79ce4f5089dbc29683f3c3193ca4505cdbd8b064" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://git-scm.com/docs/git-checkout&quot;&gt;git checkout&lt;/a&gt; man page gives more information.</source>
          <target state="translated">&lt;a href=&quot;https://git-scm.com/docs/git-checkout&quot;&gt;git checkout&lt;/a&gt;手册页提供了更多信息。</target>
        </trans-unit>
        <trans-unit id="c435417cc37b27db84bf6bef140224f6410e3f26" translate="yes" xml:space="preserve">
          <source>The command basically</source>
          <target state="translated">该命令基本上是</target>
        </trans-unit>
        <trans-unit id="eb1c80dddaaf5fe9a02dd77be570833e1a09f3b9" translate="yes" xml:space="preserve">
          <source>The default behaviour of this command is to restore the state of a working tree with the content coming from the &lt;code&gt;source&lt;/code&gt; parameter (which in your case will be a commit hash).</source>
          <target state="translated">该命令的默认行为是使用内容来自 &lt;code&gt;source&lt;/code&gt; 参数（在您的情况下将是提交哈希）恢复工作树的状态。</target>
        </trans-unit>
        <trans-unit id="a979c03a53462e7a71d762726857558bc4feb921" translate="yes" xml:space="preserve">
          <source>The final two commands ...</source>
          <target state="translated">最后的两个命令.....</target>
        </trans-unit>
        <trans-unit id="71d786c97f3c8c3dabbf5a6c1aa5932ca628335d" translate="yes" xml:space="preserve">
          <source>The first two commands ...
commit
    git checkout 
    git rebase master</source>
          <target state="translated">前两个命令...提交 git checkout git rebase master</target>
        </trans-unit>
        <trans-unit id="35888d1979e5d94dc9b4782517736b618d84d4f3" translate="yes" xml:space="preserve">
          <source>Then commit the change:</source>
          <target state="translated">那就承诺改变。</target>
        </trans-unit>
        <trans-unit id="4a43dbba5992c5ed5f8717bfda1566bfa1acd8f4" translate="yes" xml:space="preserve">
          <source>Then just stage and commit the &quot;new&quot; version.</source>
          <target state="translated">然后只是阶段性的投入 &quot;新 &quot;版本。</target>
        </trans-unit>
        <trans-unit id="1408c710688c5aa2a404f03246c0f0bbc8987f44" translate="yes" xml:space="preserve">
          <source>Then to revert a specific file to that commit use the reset command:</source>
          <target state="translated">然后使用重置命令将特定文件恢复到该提交。</target>
        </trans-unit>
        <trans-unit id="9298d629c1eee64bd276738a0f7aa9d97e72e801" translate="yes" xml:space="preserve">
          <source>This assumes that you're on the &lt;code&gt;master&lt;/code&gt; branch, and the version you want is 5 commits back.</source>
          <target state="translated">假设您在 &lt;code&gt;master&lt;/code&gt; 分支上，并且想要的版本是5 commits。</target>
        </trans-unit>
        <trans-unit id="8565382ac72e993b2eb3fd4502841b727ad56795" translate="yes" xml:space="preserve">
          <source>This is a very simple step. Checkout file to the commit id we want, here one commit id before, and then just git commit amend and we are done.</source>
          <target state="translated">这是一个非常简单的步骤。将文件结账到我们想要的提交ID,这里的一个提交ID之前,然后只需git提交修正就可以了。</target>
        </trans-unit>
        <trans-unit id="ada69ffef4385015a61c2ce8074ed2c46fb7dac9" translate="yes" xml:space="preserve">
          <source>This is very handy. If we want to bring any file to any prior commit id at the top of commit, we can easily do.</source>
          <target state="translated">这是非常方便的。如果我们想把任何文件带入到提交的顶部的任何之前的提交ID,我们可以很容易做到。</target>
        </trans-unit>
        <trans-unit id="1d896a6d995583b5a1820af56009733ca4701bf7" translate="yes" xml:space="preserve">
          <source>This will put that old version in your working directory and from there you can commit it if you want.</source>
          <target state="translated">这将把旧版本放到你的工作目录中,如果你想的话,你可以从那里提交。</target>
        </trans-unit>
        <trans-unit id="03ec1fde279ea516b88fb87f6e809d7e1818fe18" translate="yes" xml:space="preserve">
          <source>This will simply take you to the last committed state of the file</source>
          <target state="translated">这将简单地把你带到文件的最后一个提交状态。</target>
        </trans-unit>
        <trans-unit id="ea818889737bcbfb88dad12f938a46c07380ce2a" translate="yes" xml:space="preserve">
          <source>This worked for me:</source>
          <target state="translated">这对我来说很有效。</target>
        </trans-unit>
        <trans-unit id="c134e9370f9e75b44dbecba00222000df80a9011" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;git log&lt;/code&gt; to obtain the hash key for specific version and then use &lt;code&gt;git checkout &amp;lt;hashkey&amp;gt;&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;git log&lt;/code&gt; 获取特定版本的哈希键，然后使用 &lt;code&gt;git checkout &amp;lt;hashkey&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a591a1721e5fbf13786b3ca56695e4edb0c59652" translate="yes" xml:space="preserve">
          <source>Will revert a given commit.  It sounds like you think &lt;code&gt;git revert&lt;/code&gt; only affects the most recent commit.</source>
          <target state="translated">将还原给定的提交。 听起来您好像认为 &lt;code&gt;git revert&lt;/code&gt; 仅影响最近的提交。</target>
        </trans-unit>
        <trans-unit id="69c1097eea16f8b4acf1f313b770df18e8e3b64e" translate="yes" xml:space="preserve">
          <source>You can quickly review the changes made to a file using the diff command:</source>
          <target state="translated">您可以使用差异命令快速查看对文件的更改。</target>
        </trans-unit>
        <trans-unit id="2fb09fae799bac48e15480aed464437c8def3297" translate="yes" xml:space="preserve">
          <source>You can then rebase that against your mainline when you are ready to merge those changes:</source>
          <target state="translated">然后,当你准备好合并这些更改时,你可以根据你的主线来重新设定。</target>
        </trans-unit>
        <trans-unit id="01164d9f3c13476d5d9fabbd374107899efd0832" translate="yes" xml:space="preserve">
          <source>You can use any reference to a git commit, including the SHA-1 if that's most convenient. The point is that the command looks like this:</source>
          <target state="translated">你可以使用git提交的任何引用,包括SHA-1,如果这样做最方便的话。问题的关键是,这个命令看起来是这样的。</target>
        </trans-unit>
        <trans-unit id="5f57292459d1d57869eaa2996b187d8c8c60a9b5" translate="yes" xml:space="preserve">
          <source>You have to be careful when you say &quot;rollback&quot;.  If you used to have one version of a file in commit $A, and then later made two changes in two separate commits $B and $C (so what you are seeing is the third iteration of the file), and if you say &quot;I want to roll back to the first one&quot;, do you really mean it?</source>
          <target state="translated">当你说 &quot;回滚 &quot;的时候,你必须要小心。如果你以前在提交 $A 中有一个版本的文件,后来在 $B 和 $C 两个不同的提交中做了两次修改(所以你看到的是文件的第三次迭代),如果你说 &quot;我想回滚到第一个版本&quot;,你真的是这个意思吗?</target>
        </trans-unit>
        <trans-unit id="b38827e3892e482a472af9638ab342c721e63f20" translate="yes" xml:space="preserve">
          <source>You may need to use the &lt;code&gt;--hard&lt;/code&gt; option if you have local modifications.</source>
          <target state="translated">如果您进行了本地修改，则可能需要使用 &lt;code&gt;--hard&lt;/code&gt; 选项。</target>
        </trans-unit>
        <trans-unit id="0aedad02be128eae2a151feac2d2e4a243bad1e9" translate="yes" xml:space="preserve">
          <source>after them all, you can see results in your last commit in the source tree</source>
          <target state="translated">后,你可以在源代码树中的最后一次提交中看到结果。</target>
        </trans-unit>
        <trans-unit id="6dfd3cae2ded57b2c7f78356a7e89bc0d0b88206" translate="yes" xml:space="preserve">
          <source>and then you commit the result.  The command asks &quot;I want to check out the file from the state recorded by the commit $A&quot;.</source>
          <target state="translated">然后提交结果。该命令问 &quot;我想从提交$A记录的状态中查出文件&quot;。</target>
        </trans-unit>
        <trans-unit id="1a2362974d3d2c0b25fb36f35a8ade64d9e09c04" translate="yes" xml:space="preserve">
          <source>change the lines and find your commit that the wrong file sent as commit</source>
          <target state="translated">更改行,找到错误的提交文件,将其作为提交文件发送错误的提交。</target>
        </trans-unit>
        <trans-unit id="b9857956b1d42fd4d4f61da91f3286aaa7062c53" translate="yes" xml:space="preserve">
          <source>drop all other files in your work area</source>
          <target state="translated">把其他文件都放进工作区</target>
        </trans-unit>
        <trans-unit id="7f53a68d324346fc8457a1665141697dcc97ee86" translate="yes" xml:space="preserve">
          <source>e.g.</source>
          <target state="translated">e.g.</target>
        </trans-unit>
        <trans-unit id="ee7f4bc641db71c0b45270dc513a93cbec01f858" translate="yes" xml:space="preserve">
          <source>executes a &lt;code&gt;git checkout&lt;/code&gt; to the commit-id for the specified file.</source>
          <target state="translated">对指定文件的commit-id执行 &lt;code&gt;git checkout&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dedcf5a59e9312a7174bacef0dd537d038abd334" translate="yes" xml:space="preserve">
          <source>for one revision back, etc.</source>
          <target state="translated">为一次改版回来,等等。</target>
        </trans-unit>
        <trans-unit id="fbba42524404e7cf6b505bb107b82fa16cbb644f" translate="yes" xml:space="preserve">
          <source>git checkout Last_Stable_commit_Number -- fileName</source>
          <target state="translated">git checkout Last_Stable_commit_Number ----fileName</target>
        </trans-unit>
        <trans-unit id="d94fb3713abc45db59917f6e199151d18491b07f" translate="yes" xml:space="preserve">
          <source>git checkout ref|commitHash -- filePath</source>
          <target state="translated">commitHash --filePath</target>
        </trans-unit>
        <trans-unit id="cd10b39e2f91190a85b673925202f12642ca485e" translate="yes" xml:space="preserve">
          <source>git-aliases, awk and shell-functions to the rescue!</source>
          <target state="translated">git-aliases、awk和shell-functions来拯救!</target>
        </trans-unit>
        <trans-unit id="ff3ddd01b027817c6d90b6fd6a5040a78c805938" translate="yes" xml:space="preserve">
          <source>good luck</source>
          <target state="translated">好运</target>
        </trans-unit>
        <trans-unit id="4a17176adf520427bee47d4d1e93b849273381e8" translate="yes" xml:space="preserve">
          <source>handpick the files to revert and commit them</source>
          <target state="translated">随手选取文件进行还原,提交</target>
        </trans-unit>
        <trans-unit id="2e8d979b0b0e997402b755543de00bda6c8e85da" translate="yes" xml:space="preserve">
          <source>if you commit a wrong file in your last commits follow the instruction :</source>
          <target state="translated">如果你在最后一次提交时提交了一个错误的文件,请按照指令 :</target>
        </trans-unit>
        <trans-unit id="4347cf8245dc69cea2ba122db8097385f180002b" translate="yes" xml:space="preserve">
          <source>open source tree, change to this commit</source>
          <target state="translated">开源树,改成这个提交</target>
        </trans-unit>
        <trans-unit id="a730a61422c8050e274edbf806241be955c80e8e" translate="yes" xml:space="preserve">
          <source>open your visual studio code and revert back by committing your removed files</source>
          <target state="translated">打开你的visual studio代码,并通过提交删除的文件来恢复。</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">or</target>
        </trans-unit>
        <trans-unit id="092be29e704b91b3f5badc3d257df7ad22444361" translate="yes" xml:space="preserve">
          <source>performs a &lt;code&gt;git log&lt;/code&gt; on the specified file and</source>
          <target state="translated">在指定的文件上执行 &lt;code&gt;git log&lt;/code&gt; ，然后</target>
        </trans-unit>
        <trans-unit id="fbdd51ec7a9d25c06a8ee3deedcb888ed4d53229" translate="yes" xml:space="preserve">
          <source>picks the appropriate commit-id in the history of the file and</source>
          <target state="translated">在文件的历史记录中选择适当的提交ID,并在</target>
        </trans-unit>
        <trans-unit id="15bbbb29eb272748b21c4dcfa46c69fc2ac290ac" translate="yes" xml:space="preserve">
          <source>revert the entire commit with the file you want to specifically revert - it will create a new commit on your branch</source>
          <target state="translated">恢复整个提交和你要恢复的文件-它将在你的分支上创建一个新的提交。</target>
        </trans-unit>
        <trans-unit id="965c698aefff64ee1286f337e7a48a6c02df9611" translate="yes" xml:space="preserve">
          <source>select it and then click on ... buttons right-hand side ... click reverse file</source>
          <target state="translated">选择它,然后点击右侧的...按钮...点击反向文件</target>
        </trans-unit>
        <trans-unit id="564164e12f79db74a4ea245e85319f9bdbf127e2" translate="yes" xml:space="preserve">
          <source>soft reset that commit - removes the commit and moves the changes to the working area</source>
          <target state="translated">软重置该提交-移除提交,并将更改移动到工作区。</target>
        </trans-unit>
        <trans-unit id="80de9ccfe165996e273cd72e5bffffff5d4e0134" translate="yes" xml:space="preserve">
          <source>then you can see it on file status tab at the bottom left-hand side 
then click unstage:</source>
          <target state="translated">然后你可以在左下角的文件状态选项卡上看到它,然后点击unstage。</target>
        </trans-unit>
        <trans-unit id="4f339a7749c460a3e9d54829af2aef23da4f888b" translate="yes" xml:space="preserve">
          <source>to restore the state to a given commit and erase all newer commits from the record permanently.</source>
          <target state="translated">恢复到给定的提交状态,并从记录中永久删除所有较新的提交。</target>
        </trans-unit>
        <trans-unit id="3f78691ba6b220f52f8cb88c1c59986f48871a87" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;&amp;lt;N&amp;gt;&lt;/code&gt; is the number of revisions of the file to rollback for file &lt;code&gt;&amp;lt;filename&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">其中 &lt;code&gt;&amp;lt;N&amp;gt;&lt;/code&gt; 是文件 &lt;code&gt;&amp;lt;filename&amp;gt;&lt;/code&gt; 要回滚的文件的修订版本数。</target>
        </trans-unit>
        <trans-unit id="8cb199f821e44bf15f4a80b7dbe7503020ba66f8" translate="yes" xml:space="preserve">
          <source>which shows you a list of recent commits, and their SHA1 hashes.</source>
          <target state="translated">它显示了最近提交的列表,以及它们的SHA1哈希值。</target>
        </trans-unit>
        <trans-unit id="2ff9ff768bb2ce0d55c5d259de07282908ee3967" translate="yes" xml:space="preserve">
          <source>would undo the last commit which is seemed to do.</source>
          <target state="translated">将撤销最后的承诺,这似乎是做。</target>
        </trans-unit>
        <trans-unit id="73134e5c0867544e90ef49da8ccd9c9049c6c0d8" translate="yes" xml:space="preserve">
          <source>you can see the list of your changes in that commit</source>
          <target state="translated">你可以在该提交中看到你的修改列表</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
