<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://stackoverflow.com/questions/215718">
    <body>
      <group id="215718">
        <trans-unit id="b5825ff58f9e82e24d04cfda6316ecce0102dd5d" translate="yes" xml:space="preserve">
          <source>(OBS: &lt;code&gt;$file&lt;/code&gt; needs to be prefixed with &lt;code&gt;./&lt;/code&gt; if it is a relative path for &lt;code&gt;git show $revision:$file&lt;/code&gt; to work)</source>
          <target state="translated">(OBS : &lt;code&gt;$file&lt;/code&gt; 은 &lt;code&gt;git show $revision:$file&lt;/code&gt; 의 상대 경로 인 경우 &lt;code&gt;./&lt;/code&gt; 로 시작해야합니다 . )</target>
        </trans-unit>
        <trans-unit id="591b8c37c7f90285bacc6d2a2421434d66dd7763" translate="yes" xml:space="preserve">
          <source>(The second &lt;code&gt;add&lt;/code&gt; stages the file in the index, but it does &lt;em&gt;not&lt;/em&gt; get
committed.)</source>
          <target state="translated">(두 번째 &lt;code&gt;add&lt;/code&gt; 는 파일을 색인에 스테이징하지만 커밋되지는 &lt;em&gt;않습니다&lt;/em&gt; .)</target>
        </trans-unit>
        <trans-unit id="a36fc01ed773a54675b80694c5408121c02a0738" translate="yes" xml:space="preserve">
          <source>. The final history result is:</source>
          <target state="translated">. 최종 히스토리 결과는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="fee3678a710ca3d67435ace9c7cfbf9bb5fbf45c" translate="yes" xml:space="preserve">
          <source>... check out the branch of changes you want to apply to the &lt;code&gt;master&lt;/code&gt; branch. The &lt;code&gt;rebase&lt;/code&gt; command takes the commits from &lt;code&gt;&amp;lt;my branch&amp;gt;&lt;/code&gt; (that are not found in &lt;code&gt;master&lt;/code&gt;) and reapplies them to the head of &lt;code&gt;master&lt;/code&gt;. In other words, the parent of the first commit in &lt;code&gt;&amp;lt;my branch&amp;gt;&lt;/code&gt; is no longer a previous commit in the &lt;code&gt;master&lt;/code&gt; history, but the current head of &lt;code&gt;master&lt;/code&gt;. The two commands are the same as:</source>
          <target state="translated">... &lt;code&gt;master&lt;/code&gt; 브랜치에 적용 할 변경 브랜치를 확인하십시오. &lt;code&gt;rebase&lt;/code&gt; 명령은 &lt;code&gt;&amp;lt;my branch&amp;gt;&lt;/code&gt; ( &lt;code&gt;master&lt;/code&gt; 에없는 )에서 커밋을 가져 와서 master 의 헤드에 다시 적용합니다. 즉, &lt;code&gt;&amp;lt;my branch&amp;gt;&lt;/code&gt; 에서 첫 번째 커밋의 부모는 더 이상 &lt;code&gt;master&lt;/code&gt; 히스토리에서 이전 커밋이 아니라 현재 &lt;code&gt;master&lt;/code&gt; 헤드입니다. 두 명령은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="32457f44393ae83650a6759d1be7de7ec9b74db0" translate="yes" xml:space="preserve">
          <source>... do a fast-forward merge to apply all &lt;code&gt;&amp;lt;my branch&amp;gt;&lt;/code&gt; changes onto &lt;code&gt;master&lt;/code&gt;. Without this step, the rebase commit does not get added to &lt;code&gt;master&lt;/code&gt;. The final result is:</source>
          <target state="translated">... 모든 &lt;code&gt;&amp;lt;my branch&amp;gt;&lt;/code&gt; 변경 사항을 &lt;code&gt;master&lt;/code&gt; 에 적용하려면 빨리 병합을 수행하십시오. 이 단계가 없으면 rebase 커밋이 &lt;code&gt;master&lt;/code&gt; 에 추가되지 않습니다. 최종 결과는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="2caad0f2173d2d655cbc3c0c173dfe1327ac0aac" translate="yes" xml:space="preserve">
          <source>1.&lt;code&gt;git checkout file.txt&lt;/code&gt; : this will remove local changes, if you don't need them</source>
          <target state="translated">1. &lt;code&gt;git checkout file.txt&lt;/code&gt; : 로컬 변경 사항이 필요하지 않으면 제거합니다.</target>
        </trans-unit>
        <trans-unit id="df790f400c1cc6b2a08aa71acda622ee4bd096a0" translate="yes" xml:space="preserve">
          <source>2.&lt;code&gt;git checkout abc1 file.txt&lt;/code&gt; : this will bring your file to your &lt;em&gt;wanted&lt;/em&gt; version</source>
          <target state="translated">2. &lt;code&gt;git checkout abc1 file.txt&lt;/code&gt; : 파일을 &lt;em&gt;원하는&lt;/em&gt; 버전으로 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="96eceaf7f9624a618629e12754e8271e7f08f999" translate="yes" xml:space="preserve">
          <source>2.Git revert file to a specific branch</source>
          <target state="translated">2.Git 파일을 특정 브랜치로 되돌리기</target>
        </trans-unit>
        <trans-unit id="38874695380346721a7604681b87c1e9c7fe8a27" translate="yes" xml:space="preserve">
          <source>3.&lt;code&gt;git commit -m &quot;Restored file.txt to version abc1&quot;&lt;/code&gt; : this will commit your reversion.</source>
          <target state="translated">3. &lt;code&gt;git commit -m &quot;Restored file.txt to version abc1&quot;&lt;/code&gt; : 복귀를 커밋합니다.</target>
        </trans-unit>
        <trans-unit id="7cf714c2624816bb516ad8b391c6b93811919927" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Git checkout ./foo&lt;/code&gt; means revert path &lt;code&gt;./foo&lt;/code&gt; from the &lt;strong&gt;index&lt;/strong&gt;;
adding &lt;code&gt;HEAD&lt;/code&gt; instructs Git to revert that path in the index to its
&lt;code&gt;HEAD&lt;/code&gt; revision before doing so.</source>
          <target state="translated">&lt;code&gt;Git checkout ./foo&lt;/code&gt; 는 &lt;strong&gt;인덱스&lt;/strong&gt; 에서 경로 &lt;code&gt;./foo&lt;/code&gt; 를 되 돌리는 것을 의미합니다. &lt;code&gt;HEAD&lt;/code&gt; 를 추가하면 Git에 인덱스의 해당 경로를 &lt;code&gt;HEAD&lt;/code&gt; 개정으로 되돌 리도록 지시합니다.</target>
        </trans-unit>
        <trans-unit id="b204ed8a47fce3eb889e67797fb2a6c5c18ba160" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git add &amp;lt;file_i_want_to_revert&amp;gt;&lt;/code&gt; &amp;amp;&amp;amp; &lt;code&gt;git commit -m 'reverting file'&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;git add &amp;lt;file_i_want_to_revert&amp;gt;&lt;/code&gt; &amp;amp;&amp;amp; &lt;code&gt;git commit -m 'reverting file'&lt;/code&gt; reverting file'</target>
        </trans-unit>
        <trans-unit id="5d250d674ef27174ace7c324f83e3c1fabd51414" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git push&lt;/code&gt; : this will push everything on the remote repository</source>
          <target state="translated">&lt;code&gt;git push&lt;/code&gt; : 원격 저장소의 모든 것을 푸시합니다.</target>
        </trans-unit>
        <trans-unit id="efed4d6b61f93b94ee297db82a715a90aa7d15ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;master&lt;/code&gt; and &lt;code&gt;&amp;lt;my branch&amp;gt;&lt;/code&gt; both reference &lt;code&gt;B'&lt;/code&gt;. Also, from this point it is safe to delete the &lt;code&gt;&amp;lt;my branch&amp;gt;&lt;/code&gt; reference.</source>
          <target state="translated">&lt;code&gt;master&lt;/code&gt; 와 &lt;code&gt;&amp;lt;my branch&amp;gt;&lt;/code&gt; 는 모두 &lt;code&gt;B'&lt;/code&gt; 참조합니다. 또한이 시점부터 &lt;code&gt;&amp;lt;my branch&amp;gt;&lt;/code&gt; 참조를 삭제하는 것이 안전합니다.</target>
        </trans-unit>
        <trans-unit id="258460c32a16b76b3e60476dbbd3ff002a43cc10" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Essentially, all that one would manually do in this situation,&lt;br/&gt;
wrapped-up in one beautiful, efficient git-alias - &lt;strong&gt;&lt;a href=&quot;http://thecodeartist.blogspot.in/2015/04/git-prevision-checkout-previous-version-of-file.html&quot;&gt;git-prevision&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;기본적으로이 상황에서 수동으로 수행하는 모든 작업은&lt;/em&gt; &lt;em&gt;&lt;br/&gt;&lt;/em&gt; &lt;em&gt;하나의 아름답고 효율적인 git-alias에 싸서 &lt;strong&gt;&lt;a href=&quot;http://thecodeartist.blogspot.in/2015/04/git-prevision-checkout-previous-version-of-file.html&quot;&gt;-git-prevision&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="bf46ceae77448799296a4e0af15b5ca191315bd7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Now say that I messed up something in the file &lt;code&gt;file.txt&lt;/code&gt; and I want to go back to a previous commit &lt;code&gt;abc1&lt;/code&gt;.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;이제 &lt;code&gt;file.txt&lt;/code&gt; 파일에서 무언가를 엉망으로 만들고 이전 커밋 &lt;code&gt;abc1&lt;/code&gt; 로 돌아가고 싶습니다 .&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="36972d770d4324031e868adb718961ad2fedeaad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;What you need to type in your terminal&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;터미널에 입력해야 할 것&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="477090777cdde6459cd1f1f2a79835ec1d98bc30" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;You can do it in 4 steps:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;4 단계로 수행 할 수 있습니다.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9b7bb5a088ff06aeaacfda92e37bebcb8cad6aa6" translate="yes" xml:space="preserve">
          <source>A good workflow for managaging waypoints is to use tags to cleanly mark points in your timeline. I can't quite understand your last sentence but what you may want is diverge a branch from a previous point in time. To do this, use the handy checkout command:</source>
          <target state="translated">웨이 포인트 관리를위한 좋은 워크 플로우는 태그를 사용하여 타임 라인에서 포인트를 깔끔하게 표시하는 것입니다. 나는 당신의 마지막 문장을 이해할 수 없지만 당신이 원하는 것은 이전 시점에서 분기를 분기하는 것입니다. 이렇게하려면 편리한 체크 아웃 명령을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="56d824866a6d08aa48ffad391812836d6ee7590c" translate="yes" xml:space="preserve">
          <source>Add the following to your &lt;code&gt;gitconfig&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;gitconfig&lt;/code&gt; 에 다음을 추가하십시오</target>
        </trans-unit>
        <trans-unit id="d6794f540c9383b891b6eb812b82b44e41bc8136" translate="yes" xml:space="preserve">
          <source>Amusingly, &lt;code&gt;git checkout foo&lt;/code&gt; will not work if the working copy is in a directory named &lt;code&gt;foo&lt;/code&gt;; however, both &lt;code&gt;git checkout HEAD foo&lt;/code&gt; and &lt;code&gt;git checkout ./foo&lt;/code&gt; will:</source>
          <target state="translated">작업 복사본이 &lt;code&gt;foo&lt;/code&gt; 라는 디렉토리에 있으면 &lt;code&gt;git checkout foo&lt;/code&gt; 가 작동하지 않습니다. 그러나 &lt;code&gt;git checkout HEAD foo&lt;/code&gt; 와 &lt;code&gt;git checkout ./foo&lt;/code&gt; 는 다음을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="266b50f277a5694518b6bfdc6e42edebb1af0559" translate="yes" xml:space="preserve">
          <source>And also, I use this a lot just to see a particular version temporarily:</source>
          <target state="translated">또한 특정 버전을 일시적으로 볼 때만 많이 사용합니다.</target>
        </trans-unit>
        <trans-unit id="676448f80335a1ff6b3b72a7a46372f78112e20d" translate="yes" xml:space="preserve">
          <source>And the even more weird:</source>
          <target state="translated">그리고 더 이상한 :</target>
        </trans-unit>
        <trans-unit id="d9cbf88d398665d3532ddefd0bccf8862f319fdf" translate="yes" xml:space="preserve">
          <source>And to revert to last committed version, which is most frequently needed, you can use this simpler command.</source>
          <target state="translated">가장 자주 필요한 최신 커밋 된 버전으로 되돌리려면이 간단한 명령을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2e7c984a77366a93c0e580d56e9199c8b8fd1c66" translate="yes" xml:space="preserve">
          <source>Armed with the knowledge that a commit can have two parents in the case of a merge, you should know that HEAD^1 is the first parent and HEAD~1 is the second parent.</source>
          <target state="translated">병합의 경우 커밋에 부모가 두 명있을 수 있다는 사실을 알고 HEAD ^ 1은 첫 번째 부모이고 HEAD ~ 1은 두 번째 부모라는 것을 알아야합니다.</target>
        </trans-unit>
        <trans-unit id="7af4315327fae43e58172c56db0d71c9f137aef4" translate="yes" xml:space="preserve">
          <source>As a side note, I've always been uncomfortable with this command because it's used for both ordinary things (changing between branches) and unusual, destructive things (discarding changes in the working directory).</source>
          <target state="translated">부수적으로, 나는이 명령이 평범한 것 (분 기간 변경)과 비정상적이고 파괴적인 것 (작업 디렉토리의 변경 사항 무시) 모두에 사용되기 때문에 항상 불편했습니다.</target>
        </trans-unit>
        <trans-unit id="f982352059af8695b664ee28e5af660998d5bb71" translate="yes" xml:space="preserve">
          <source>As of git v2.23.0 there's a new &lt;a href=&quot;https://git-scm.com/docs/git-restore/2.23.0&quot;&gt;git restore&lt;/a&gt; method which is supposed to assume part of what &lt;code&gt;git checkout&lt;/code&gt; was responsible for (even the accepted answer mentions that &lt;code&gt;git checkout&lt;/code&gt; is quite confusing). See highlights of changes on &lt;a href=&quot;https://github.blog/2019-08-16-highlights-from-git-2-23/&quot;&gt;github blog&lt;/a&gt;.</source>
          <target state="translated">git v2.23.0부터 &lt;code&gt;git checkout&lt;/code&gt; 이 담당 한 것의 일부를 가정하는 새로운 &lt;a href=&quot;https://git-scm.com/docs/git-restore/2.23.0&quot;&gt;git restore&lt;/a&gt; 방법이 있습니다 (허용 된 답변조차도 &lt;code&gt;git checkout&lt;/code&gt; 이 상당히 혼란 스럽다고 언급합니다). &lt;a href=&quot;https://github.blog/2019-08-16-highlights-from-git-2-23/&quot;&gt;github 블로그의&lt;/a&gt; 주요 변경 사항을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="23294bad7c9328074d6b716db4fb480963f166ef" translate="yes" xml:space="preserve">
          <source>Assume you have</source>
          <target state="translated">당신이 가지고 있다고 가정</target>
        </trans-unit>
        <trans-unit id="a33c8a8992133dbbe4b62c8221bb6de59f96f4f8" translate="yes" xml:space="preserve">
          <source>Assuming the hash of the commit you want is &lt;code&gt;c5f567&lt;/code&gt;:</source>
          <target state="translated">원하는 커밋의 해시가 &lt;code&gt;c5f567&lt;/code&gt; 이라고 가정합니다.</target>
        </trans-unit>
        <trans-unit id="56efa7fa07f7ffa350b60f738f48cb45a284b4e2" translate="yes" xml:space="preserve">
          <source>Basically, it will first generate a patch corresponding to the changes you want to revert, and then reverse-apply the patch to drop those changes.</source>
          <target state="translated">기본적으로 되돌릴 변경 사항에 해당하는 패치를 생성 한 다음 패치를 역적 용하여 변경 사항을 삭제합니다.</target>
        </trans-unit>
        <trans-unit id="ad80726ef525640c921576661fe867ad82814162" translate="yes" xml:space="preserve">
          <source>Between the step 2 and 3 of course you can do &lt;code&gt;git status&lt;/code&gt; to understand what is going on. Usually you should see the &lt;code&gt;file.txt&lt;/code&gt; already added and that is why there is no need of a &lt;code&gt;git add&lt;/code&gt;.</source>
          <target state="translated">물론 2 단계와 3 단계 사이에서 &lt;code&gt;git status&lt;/code&gt; 를 수행하여 진행 상황 을 이해할 수 있습니다. 일반적으로 &lt;code&gt;file.txt&lt;/code&gt; 가 이미 추가되어 있으므로 &lt;code&gt;git add&lt;/code&gt; 가 필요하지 않은 것입니다.</target>
        </trans-unit>
        <trans-unit id="782a5604779a6c00915a15ade9bc687e5dc344ff" translate="yes" xml:space="preserve">
          <source>Either will work if there is only one parent in the tree.</source>
          <target state="translated">트리에 부모가 하나만 있으면 작동합니다.</target>
        </trans-unit>
        <trans-unit id="17102f52fd3cce62fad05455a0f2d18055a91b76" translate="yes" xml:space="preserve">
          <source>First Reset Head For Target File</source>
          <target state="translated">대상 파일의 첫 번째 재설정 헤드</target>
        </trans-unit>
        <trans-unit id="bfdcc24a2297f1b4d866b8b4d6324466d26a0752" translate="yes" xml:space="preserve">
          <source>For example, to checkout the immediate previous revision of a single file &lt;code&gt;x/y/z.c&lt;/code&gt;, run</source>
          <target state="translated">예를 들어, 단일 파일 &lt;code&gt;x/y/z.c&lt;/code&gt; 의 바로 이전 개정을 확인하려면 다음을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="aa9087013701645fca0b992c3de18a64b8371eda" translate="yes" xml:space="preserve">
          <source>For me none of the reply seemed really clear and therefore I would like to add mine which seems super easy.</source>
          <target state="translated">나에게 답장은 실제로 명확하게 보이지 않았으므로 매우 쉬운 것처럼 내 것을 추가하고 싶습니다.</target>
        </trans-unit>
        <trans-unit id="33a7a08d0236981d7881b666b88d31938cad645f" translate="yes" xml:space="preserve">
          <source>Git revert file to a specific commit</source>
          <target state="translated">힘내 파일을 특정 커밋으로 되돌리기</target>
        </trans-unit>
        <trans-unit id="c54a4fcc2bb35f19be56660c8cf2efdd74d4b12e" translate="yes" xml:space="preserve">
          <source>Here's how &lt;code&gt;rebase&lt;/code&gt; works:</source>
          <target state="translated">&lt;code&gt;rebase&lt;/code&gt; 작동 방식은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="34e88036c4b6ee76e0310acd3938ebc58d579ad3" translate="yes" xml:space="preserve">
          <source>How can I reset or revert a file to a specific revision</source>
          <target state="translated">파일을 특정 개정으로 재설정하거나 되 돌리는 방법</target>
        </trans-unit>
        <trans-unit id="28a5668453816bf78805f2d7389b310f348f6c21" translate="yes" xml:space="preserve">
          <source>How git prevision works?</source>
          <target state="translated">git prevision은 어떻게 작동합니까?</target>
        </trans-unit>
        <trans-unit id="a31a4172bb80c1e2c39c01e2f486f436e980bb1b" translate="yes" xml:space="preserve">
          <source>I had the same issue just now and I found &lt;a href=&quot;https://stackoverflow.com/questions/725749/how-would-you-go-about-reverting-a-single-file-to-previous-commit-state-using-git/727725#727725&quot;&gt;this answer&lt;/a&gt; easiest to understand (&lt;code&gt;commit-ref&lt;/code&gt; is the SHA value of the change in the log you want to go back to):</source>
          <target state="translated">나는 지금 똑같은 문제가 있었고이 &lt;a href=&quot;https://stackoverflow.com/questions/725749/how-would-you-go-about-reverting-a-single-file-to-previous-commit-state-using-git/727725#727725&quot;&gt;대답&lt;/a&gt; 을 이해하는 것이 가장 쉽다는 것을 알았습니다 ( &lt;code&gt;commit-ref&lt;/code&gt; 는 돌아가고 싶은 로그 변경의 SHA 값입니다).</target>
        </trans-unit>
        <trans-unit id="c482061f28ab6cfd966c23ba70b6c8386d0bc31f" translate="yes" xml:space="preserve">
          <source>I have a commit &lt;code&gt;abc1&lt;/code&gt; and after it I have done several (or one modification) to a file &lt;code&gt;file.txt&lt;/code&gt;.</source>
          <target state="translated">커밋 &lt;code&gt;abc1&lt;/code&gt; 이 있고 &lt;code&gt;file.txt&lt;/code&gt; 파일에 여러 번 (또는 한 번 수정)했습니다.</target>
        </trans-unit>
        <trans-unit id="07db4bd64374279d69677172755ef734ce8ed408" translate="yes" xml:space="preserve">
          <source>I have done a &lt;code&gt;git log&lt;/code&gt; along with a &lt;code&gt;git diff&lt;/code&gt; to find the revision I need, but just have no idea how to get the file back to its former state in the past.</source>
          <target state="translated">필요한 개정을 찾기 위해 &lt;code&gt;git diff&lt;/code&gt; 와 함께 &lt;code&gt;git log&lt;/code&gt; 를 수행했지만 파일을 과거의 이전 상태로 되 돌리는 방법을 모릅니다.</target>
        </trans-unit>
        <trans-unit id="ed87c4bc9d2291fea23c1be89e2820e43eb50040" translate="yes" xml:space="preserve">
          <source>I have made some changes to a file which has been committed a few times as part of a group of files, but now want to reset/revert the changes on it back to a previous version.</source>
          <target state="translated">파일 그룹의 일부로 몇 번 커밋 된 파일을 일부 변경했지만 이제 변경 내용을 이전 버전으로 다시 설정 / 되돌리려 고합니다.</target>
        </trans-unit>
        <trans-unit id="24e2abbca211d54018b0666cfb95a48ea4571e8b" translate="yes" xml:space="preserve">
          <source>I have to plug &lt;a href=&quot;https://people.gnome.org/~newren/eg/&quot;&gt;EasyGit&lt;/a&gt; here, which is a wrapper to make git more approachable to novices without confusing seasoned users. One of the things it does is &lt;a href=&quot;http://www.gnome.org/~newren/eg/git-eg-differences.html#revert&quot;&gt;give more meanings to &lt;code&gt;git revert&lt;/code&gt;&lt;/a&gt;. In this case, you would simply say:</source>
          <target state="translated">&lt;a href=&quot;https://people.gnome.org/~newren/eg/&quot;&gt;EasyGit을&lt;/a&gt; 여기에 연결 해야 합니다. 그것이하는 것 중 하나는 &lt;a href=&quot;http://www.gnome.org/~newren/eg/git-eg-differences.html#revert&quot;&gt; &lt;code&gt;git revert&lt;/code&gt; 에 더 많은 의미를 부여&lt;/a&gt; 하는 것입니다. 이 경우 간단히 다음과 같이 말할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7a7a661de7f3b1fa4ca1341e6a3ca072bff7ff72" translate="yes" xml:space="preserve">
          <source>I think I've found it....from &lt;a href=&quot;http://www-cs-students.stanford.edu/~blynn/gitmagic/ch02.html&quot;&gt;http://www-cs-students.stanford.edu/~blynn/gitmagic/ch02.html&lt;/a&gt;</source>
          <target state="translated">나는 그것을 발견했다고 생각한다 .... &lt;a href=&quot;http://www-cs-students.stanford.edu/~blynn/gitmagic/ch02.html&quot;&gt;http://www-cs-students.stanford.edu/~blynn/gitmagic/ch02.html&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fb4b101b427252c1c19d2cc0a0b6e7e25e1a660e" translate="yes" xml:space="preserve">
          <source>Ian</source>
          <target state="translated">Ian</target>
        </trans-unit>
        <trans-unit id="1f01d64d9e95619b3479c465f76dacf05ab7a0f9" translate="yes" xml:space="preserve">
          <source>If  you want to get rid of the changes both the second and the third iteration, it is very simple:</source>
          <target state="translated">두 번째와 세 번째 반복 모두에서 변경 사항을 제거하려면 매우 간단합니다.</target>
        </trans-unit>
        <trans-unit id="5ee5f95b6ab776d625e41b6694a827c71b0ca6a0" translate="yes" xml:space="preserve">
          <source>If you just need to go back to the last commited version</source>
          <target state="translated">마지막 커밋 된 버전으로 돌아 가야하는 경우</target>
        </trans-unit>
        <trans-unit id="b47839b0ffeee7daaba954b42b6fddbba5089814" translate="yes" xml:space="preserve">
          <source>If you know how many commits you need to go back, you can use:</source>
          <target state="translated">다시 커밋해야하는 커밋 수를 알고 있으면 다음을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c450c6eaa44851942bbf746ba2c07e78f9b5b024" translate="yes" xml:space="preserve">
          <source>If you want to revert changes from one commit on a single file only, just as &lt;code&gt;git revert&lt;/code&gt; would do but only for one file (or say a subset of the commit files), I suggest to use both &lt;code&gt;git diff&lt;/code&gt; and &lt;code&gt;git apply&lt;/code&gt; like that (with &lt;code&gt;&amp;lt;sha&amp;gt;&lt;/code&gt; = the hash of the commit you want to revert) :</source>
          <target state="translated">단일 파일에 대한 하나의 커밋에서 변경 사항을 되돌리려면 &lt;code&gt;git revert&lt;/code&gt; 가하지 만 하나의 파일에 대해서만 (또는 커밋 파일의 하위 집합이라고 함) &lt;code&gt;git diff&lt;/code&gt; 와 &lt;code&gt;git apply&lt;/code&gt; 모두 적용 하는 것이 좋습니다 ( &lt;code&gt;&amp;lt;sha&amp;gt;&lt;/code&gt; = 되돌릴 커밋의 해시) :</target>
        </trans-unit>
        <trans-unit id="dff44a3840f7c7129778d6db8cbb9b408316a939" translate="yes" xml:space="preserve">
          <source>If you want to revert to the commit before &lt;code&gt;c5f567&lt;/code&gt;, append &lt;code&gt;~1&lt;/code&gt; (where 1 is the number of commits you want to go back, it can be anything):</source>
          <target state="translated">&lt;code&gt;c5f567&lt;/code&gt; 이전에 커밋으로 되돌리려면 &lt;code&gt;~1&lt;/code&gt; 추가하십시오 (여기서 1은 되돌릴 커밋 수입니다).</target>
        </trans-unit>
        <trans-unit id="5894247679b1b7d420a38142c3019e2429a5b142" translate="yes" xml:space="preserve">
          <source>In order to go to a previous commit version of the file, get the commit number, say eb917a1
then</source>
          <target state="translated">파일의 이전 커밋 버전으로 이동하려면 커밋 번호를 확인하십시오 (예 : eb917a1).</target>
        </trans-unit>
        <trans-unit id="6f7b7fb7f08216536d8432551fbfd4b32855cb8e" translate="yes" xml:space="preserve">
          <source>In the case that you want to revert a file to a previous commit (and the file you want to revert already committed) you can use</source>
          <target state="translated">파일을 이전 커밋 (및 이미 커밋 한 파일을 이미 커밋 한 파일)으로 되돌리려면 다음을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d9f77d9f0d4306c8fffa8b85a2a4b66f96cadd9f" translate="yes" xml:space="preserve">
          <source>It might be easier to remember this command as both the &quot;base&quot; and &quot;modify&quot; branches are explicit.</source>
          <target state="translated">&quot;base&quot;및 &quot;modify&quot;분기가 모두 명시 적이므로이 명령을 기억하는 것이 더 쉬울 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b789119370256ad6dfc91f751f31a3f0970704bf" translate="yes" xml:space="preserve">
          <source>Many answers here claims to use &lt;code&gt;git reset ... &amp;lt;file&amp;gt;&lt;/code&gt; or &lt;code&gt;git checkout ... &amp;lt;file&amp;gt;&lt;/code&gt; but by doing so, you will loose every modifications on &lt;code&gt;&amp;lt;file&amp;gt;&lt;/code&gt; committed after the commit you want to revert.</source>
          <target state="translated">여기에 많은 답변이 &lt;code&gt;git reset ... &amp;lt;file&amp;gt;&lt;/code&gt; 또는 &lt;code&gt;git checkout ... &amp;lt;file&amp;gt;&lt;/code&gt; 을 사용한다고 주장하지만 그렇게하면 되돌릴 커밋 후에 커밋 된 &lt;code&gt;&amp;lt;file&amp;gt;&lt;/code&gt; 의 모든 수정 사항이 손실됩니다.</target>
        </trans-unit>
        <trans-unit id="25427e58a2647e826b13b2ecd001be46b0498741" translate="yes" xml:space="preserve">
          <source>Many suggestions here, most along the lines of &lt;code&gt;git checkout $revision -- $file&lt;/code&gt;. A couple of obscure alternatives:</source>
          <target state="translated">여기 &lt;code&gt;git checkout $revision -- $file&lt;/code&gt; 줄을 따라 많은 제안이 있습니다. 몇 가지 모호한 대안 :</target>
        </trans-unit>
        <trans-unit id="9e22435ae74aa5d90740e1410b3c5d93a6ad9762" translate="yes" xml:space="preserve">
          <source>Next, type:</source>
          <target state="translated">다음을 입력하십시오.</target>
        </trans-unit>
        <trans-unit id="d04438c2ef16c8c18441030c74f69673367ffd85" translate="yes" xml:space="preserve">
          <source>Note that whoever created commit $B may not have been very disciplined and may have committed totally unrelated change in the same commit, and this revert may touch files other than &lt;em&gt;file&lt;/em&gt; you see offending changes, so you may want to check the result carefully after doing so.</source>
          <target state="translated">커밋 $ B를 만든 사람은 매우 규율이없고 같은 커밋에서 완전히 관련이없는 변경을 커밋했을 수 있으며,이 되돌리기는 문제가있는 &lt;em&gt;파일&lt;/em&gt; 이 아닌 다른 &lt;em&gt;파일&lt;/em&gt; 을 건드릴 수 있으므로 수행 후 결과를주의 깊게 확인하고 싶을 수 있습니다 그래서.</target>
        </trans-unit>
        <trans-unit id="eaa89032148588bf6becd5929ad147db4791f55e" translate="yes" xml:space="preserve">
          <source>Note, however, that &lt;code&gt;git checkout ./foo&lt;/code&gt; and &lt;code&gt;git checkout HEAD ./foo&lt;/code&gt;
are not &lt;strong&gt;exactly&lt;/strong&gt; the same thing; case in point:</source>
          <target state="translated">그러나 &lt;code&gt;git checkout ./foo&lt;/code&gt; 와 &lt;code&gt;git checkout HEAD ./foo&lt;/code&gt; 는 &lt;strong&gt;정확히&lt;/strong&gt; 같은 것은 아닙니다. 지목 사항:</target>
        </trans-unit>
        <trans-unit id="99b005577479ff4803b3a3f975beb3eb985c1f44" translate="yes" xml:space="preserve">
          <source>Note: Do not forget to type the hash before the last one. Last hash points your current position (HEAD) and changes nothing.</source>
          <target state="translated">참고 : 마지막 해시 앞에 해시를 입력하는 것을 잊지 마십시오. 마지막 해시는 현재 위치 (HEAD)를 가리키고 아무것도 변경하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="fc2161f6412078a566333e0dff9e1c59245fa40b" translate="yes" xml:space="preserve">
          <source>Obviously someone either needs to write an intelligible book on git, or git needs to be better explained in the documentation.  Faced with this same problem I guessed that</source>
          <target state="translated">분명히 누군가가 git에 대한 이해하기 쉬운 책을 쓰거나 git이 문서에서 더 잘 설명되어야합니다. 나는이 같은 문제에 직면</target>
        </trans-unit>
        <trans-unit id="36ff88d15f466bbdf074101531f8e7fd40a41063" translate="yes" xml:space="preserve">
          <source>Of course, it shall not work if reverted lines had been modified by any commit between &lt;code&gt;&amp;lt;sha1&amp;gt;&lt;/code&gt; and &lt;code&gt;HEAD&lt;/code&gt; (conflict).</source>
          <target state="translated">물론 &lt;code&gt;&amp;lt;sha1&amp;gt;&lt;/code&gt; 과 &lt;code&gt;HEAD&lt;/code&gt; (충돌) 사이의 커밋으로 되 돌린 행이 수정 된 경우 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e835ae5df71dd85f545c0df325e20833f5e4d7d2" translate="yes" xml:space="preserve">
          <source>On the other hand, what you meant is to get rid of the change the second iteration (i.e. commit $B) brought in, while keeping what commit $C did to the file, you would want to revert $B</source>
          <target state="translated">반면에, 당신이 의미하는 것은 $ C가 파일에 수행 한 것을 유지하면서 두 번째 반복 (예 : commit $ B)으로 인한 변경을 제거하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="bfdc07321aeb66a2cb401379cbd9a906f8c01f90" translate="yes" xml:space="preserve">
          <source>Or if you want to restore to the content of one commit before c5f567:</source>
          <target state="translated">또는 c5f567 이전에 하나의 커밋 내용으로 복원하려는 경우 :</target>
        </trans-unit>
        <trans-unit id="5aee3fa460fb5bbeba7d99fec0866d0d23d74cf1" translate="yes" xml:space="preserve">
          <source>Second Checkout That File</source>
          <target state="translated">해당 파일을 두 번째 체크 아웃</target>
        </trans-unit>
        <trans-unit id="74101dc7ded8d843039da0a5ce4cf311f55c53cb" translate="yes" xml:space="preserve">
          <source>So based on Greg Hewgill's answer (assuming the commit hash is &lt;code&gt;c5f567&lt;/code&gt;) the command would look like this:</source>
          <target state="translated">따라서 Greg Hewgill의 답변 (커밋 해시가 &lt;code&gt;c5f567&lt;/code&gt; 이라고 가정)에 따라 명령은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="9295d6be53a6a7084c6333657fcfa2a14c7e58da" translate="yes" xml:space="preserve">
          <source>Sometimes you just want to go back and forget about every change past a certain point because they're all wrong.</source>
          <target state="translated">때로는 돌아가서 특정 지점을 지나는 모든 변경 사항을 잊어 버릴 수도 있습니다. 모두 잘못되었습니다.</target>
        </trans-unit>
        <trans-unit id="7f83df967576e38e44e02d4157f199b4088a5d46" translate="yes" xml:space="preserve">
          <source>Start with:</source>
          <target state="translated">로 시작 :</target>
        </trans-unit>
        <trans-unit id="7248f99234c1000d0a84df4ff79e22c0ba5db38b" translate="yes" xml:space="preserve">
          <source>That doesn't solve your problem, if you want to revert a change in a specific file and that commit changed more than that file.</source>
          <target state="translated">특정 파일의 변경 사항을 되돌리고 해당 커밋이 해당 파일보다 더 많이 변경된 경우에는 문제가 해결되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="41bcc0642be854b987ab1a7f8ef8efd1aba1113a" translate="yes" xml:space="preserve">
          <source>That will reset &lt;code&gt;foo&lt;/code&gt; to HEAD. You can also:</source>
          <target state="translated">&lt;code&gt;foo&lt;/code&gt; 를 HEAD로 재설정합니다. 당신은 또한 수:</target>
        </trans-unit>
        <trans-unit id="79ce4f5089dbc29683f3c3193ca4505cdbd8b064" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://git-scm.com/docs/git-checkout&quot;&gt;git checkout&lt;/a&gt; man page gives more information.</source>
          <target state="translated">&lt;a href=&quot;https://git-scm.com/docs/git-checkout&quot;&gt;git checkout&lt;/a&gt; 매뉴얼 페이지에 자세한 정보가 있습니다.</target>
        </trans-unit>
        <trans-unit id="c435417cc37b27db84bf6bef140224f6410e3f26" translate="yes" xml:space="preserve">
          <source>The command basically</source>
          <target state="translated">기본적으로 명령</target>
        </trans-unit>
        <trans-unit id="eb1c80dddaaf5fe9a02dd77be570833e1a09f3b9" translate="yes" xml:space="preserve">
          <source>The default behaviour of this command is to restore the state of a working tree with the content coming from the &lt;code&gt;source&lt;/code&gt; parameter (which in your case will be a commit hash).</source>
          <target state="translated">이 명령의 기본 동작은 &lt;code&gt;source&lt;/code&gt; 매개 변수 (이 경우 커밋 해시)에서 오는 내용으로 작업 트리의 상태를 복원하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="a979c03a53462e7a71d762726857558bc4feb921" translate="yes" xml:space="preserve">
          <source>The final two commands ...</source>
          <target state="translated">마지막 두 명령 ...</target>
        </trans-unit>
        <trans-unit id="71d786c97f3c8c3dabbf5a6c1aa5932ca628335d" translate="yes" xml:space="preserve">
          <source>The first two commands ...
commit
    git checkout 
    git rebase master</source>
          <target state="translated">처음 두 명령 ... 커밋 git checkout git rebase master</target>
        </trans-unit>
        <trans-unit id="35888d1979e5d94dc9b4782517736b618d84d4f3" translate="yes" xml:space="preserve">
          <source>Then commit the change:</source>
          <target state="translated">그런 다음 변경 사항을 커밋하십시오.</target>
        </trans-unit>
        <trans-unit id="4a43dbba5992c5ed5f8717bfda1566bfa1acd8f4" translate="yes" xml:space="preserve">
          <source>Then just stage and commit the &quot;new&quot; version.</source>
          <target state="translated">그런 다음 &quot;새&quot;버전을 준비하고 커밋하십시오.</target>
        </trans-unit>
        <trans-unit id="1408c710688c5aa2a404f03246c0f0bbc8987f44" translate="yes" xml:space="preserve">
          <source>Then to revert a specific file to that commit use the reset command:</source>
          <target state="translated">그런 다음 특정 파일을 해당 커밋으로 되돌리려면 reset 명령을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="9298d629c1eee64bd276738a0f7aa9d97e72e801" translate="yes" xml:space="preserve">
          <source>This assumes that you're on the &lt;code&gt;master&lt;/code&gt; branch, and the version you want is 5 commits back.</source>
          <target state="translated">이것은 &lt;code&gt;master&lt;/code&gt; 브랜치에 있고 원하는 버전이 5 커밋이라고 가정합니다.</target>
        </trans-unit>
        <trans-unit id="8565382ac72e993b2eb3fd4502841b727ad56795" translate="yes" xml:space="preserve">
          <source>This is a very simple step. Checkout file to the commit id we want, here one commit id before, and then just git commit amend and we are done.</source>
          <target state="translated">이것은 매우 간단한 단계입니다. 우리가 원하는 커밋 ID에 대한 체크 아웃 파일, 여기에 하나의 커밋 ID, 그리고 git commit amend을 수정하면 완료됩니다.</target>
        </trans-unit>
        <trans-unit id="ada69ffef4385015a61c2ce8074ed2c46fb7dac9" translate="yes" xml:space="preserve">
          <source>This is very handy. If we want to bring any file to any prior commit id at the top of commit, we can easily do.</source>
          <target state="translated">이것은 매우 편리합니다. 커밋 상단의 이전 커밋 ID로 파일을 가져 오려면 쉽게 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1d896a6d995583b5a1820af56009733ca4701bf7" translate="yes" xml:space="preserve">
          <source>This will put that old version in your working directory and from there you can commit it if you want.</source>
          <target state="translated">이전 버전을 작업 디렉토리에 넣고 원하는 경우 커밋 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="03ec1fde279ea516b88fb87f6e809d7e1818fe18" translate="yes" xml:space="preserve">
          <source>This will simply take you to the last committed state of the file</source>
          <target state="translated">이것은 단순히 파일의 마지막 커밋 상태로 이동합니다</target>
        </trans-unit>
        <trans-unit id="ea818889737bcbfb88dad12f938a46c07380ce2a" translate="yes" xml:space="preserve">
          <source>This worked for me:</source>
          <target state="translated">이것은 나를 위해 일했다 :</target>
        </trans-unit>
        <trans-unit id="c134e9370f9e75b44dbecba00222000df80a9011" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;git log&lt;/code&gt; to obtain the hash key for specific version and then use &lt;code&gt;git checkout &amp;lt;hashkey&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;git log&lt;/code&gt; 를 사용하여 특정 버전의 해시 키를 얻은 다음 &lt;code&gt;git checkout &amp;lt;hashkey&amp;gt;&lt;/code&gt; 를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="a591a1721e5fbf13786b3ca56695e4edb0c59652" translate="yes" xml:space="preserve">
          <source>Will revert a given commit.  It sounds like you think &lt;code&gt;git revert&lt;/code&gt; only affects the most recent commit.</source>
          <target state="translated">주어진 커밋을 되돌립니다. &lt;code&gt;git revert&lt;/code&gt; 가 가장 최근의 커밋에만 영향을 미친다고 생각되는 것 같습니다.</target>
        </trans-unit>
        <trans-unit id="69c1097eea16f8b4acf1f313b770df18e8e3b64e" translate="yes" xml:space="preserve">
          <source>You can quickly review the changes made to a file using the diff command:</source>
          <target state="translated">diff 명령을 사용하여 파일의 변경 사항을 신속하게 검토 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2fb09fae799bac48e15480aed464437c8def3297" translate="yes" xml:space="preserve">
          <source>You can then rebase that against your mainline when you are ready to merge those changes:</source>
          <target state="translated">그런 다음 변경 사항을 병합 할 준비가되면 메인 라인을 기준으로 리베이스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="01164d9f3c13476d5d9fabbd374107899efd0832" translate="yes" xml:space="preserve">
          <source>You can use any reference to a git commit, including the SHA-1 if that's most convenient. The point is that the command looks like this:</source>
          <target state="translated">가장 편리한 경우 SHA-1을 포함하여 git commit에 대한 참조를 사용할 수 있습니다. 요점은 명령이 다음과 같다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="5f57292459d1d57869eaa2996b187d8c8c60a9b5" translate="yes" xml:space="preserve">
          <source>You have to be careful when you say &quot;rollback&quot;.  If you used to have one version of a file in commit $A, and then later made two changes in two separate commits $B and $C (so what you are seeing is the third iteration of the file), and if you say &quot;I want to roll back to the first one&quot;, do you really mean it?</source>
          <target state="translated">&quot;롤백&quot;이라고 말할 때주의해야합니다. 커밋 $ A에 한 버전의 파일이 있고 나중에 두 개의 별도 커밋 $ B와 $ C에서 두 가지 변경을 한 경우 (파일의 세 번째 반복이 표시됨) &quot; 첫 번째로 롤백하고 싶습니다. 정말로 그렇습니까?</target>
        </trans-unit>
        <trans-unit id="b38827e3892e482a472af9638ab342c721e63f20" translate="yes" xml:space="preserve">
          <source>You may need to use the &lt;code&gt;--hard&lt;/code&gt; option if you have local modifications.</source>
          <target state="translated">로컬로 수정 한 경우 &lt;code&gt;--hard&lt;/code&gt; 옵션을 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="0aedad02be128eae2a151feac2d2e4a243bad1e9" translate="yes" xml:space="preserve">
          <source>after them all, you can see results in your last commit in the source tree</source>
          <target state="translated">그 후에는 소스 트리에서 마지막 커밋 결과를 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6dfd3cae2ded57b2c7f78356a7e89bc0d0b88206" translate="yes" xml:space="preserve">
          <source>and then you commit the result.  The command asks &quot;I want to check out the file from the state recorded by the commit $A&quot;.</source>
          <target state="translated">그런 다음 결과를 커밋합니다. 명령은 &quot;커밋 $ A에 의해 기록 된 상태에서 파일을 체크 아웃하고 싶습니다&quot;라고 묻습니다.</target>
        </trans-unit>
        <trans-unit id="1a2362974d3d2c0b25fb36f35a8ade64d9e09c04" translate="yes" xml:space="preserve">
          <source>change the lines and find your commit that the wrong file sent as commit</source>
          <target state="translated">행을 변경하고 잘못된 파일이 커밋으로 전송 된 커밋을 찾으십시오.</target>
        </trans-unit>
        <trans-unit id="b9857956b1d42fd4d4f61da91f3286aaa7062c53" translate="yes" xml:space="preserve">
          <source>drop all other files in your work area</source>
          <target state="translated">작업 영역에 다른 모든 파일을 버리십시오</target>
        </trans-unit>
        <trans-unit id="7f53a68d324346fc8457a1665141697dcc97ee86" translate="yes" xml:space="preserve">
          <source>e.g.</source>
          <target state="translated">e.g.</target>
        </trans-unit>
        <trans-unit id="ee7f4bc641db71c0b45270dc513a93cbec01f858" translate="yes" xml:space="preserve">
          <source>executes a &lt;code&gt;git checkout&lt;/code&gt; to the commit-id for the specified file.</source>
          <target state="translated">지정된 파일에 대해 commit-id에 대한 &lt;code&gt;git checkout&lt;/code&gt; 을 실행합니다.</target>
        </trans-unit>
        <trans-unit id="dedcf5a59e9312a7174bacef0dd537d038abd334" translate="yes" xml:space="preserve">
          <source>for one revision back, etc.</source>
          <target state="translated">다시 한 번 수정하는 등</target>
        </trans-unit>
        <trans-unit id="fbba42524404e7cf6b505bb107b82fa16cbb644f" translate="yes" xml:space="preserve">
          <source>git checkout Last_Stable_commit_Number -- fileName</source>
          <target state="translated">git checkout Last_Stable_commit_Number-파일 이름</target>
        </trans-unit>
        <trans-unit id="d94fb3713abc45db59917f6e199151d18491b07f" translate="yes" xml:space="preserve">
          <source>git checkout ref|commitHash -- filePath</source>
          <target state="translated">git checkout ref | commitHash-파일 경로</target>
        </trans-unit>
        <trans-unit id="cd10b39e2f91190a85b673925202f12642ca485e" translate="yes" xml:space="preserve">
          <source>git-aliases, awk and shell-functions to the rescue!</source>
          <target state="translated">구조에 git-aliases, awk 및 shell-functions!</target>
        </trans-unit>
        <trans-unit id="ff3ddd01b027817c6d90b6fd6a5040a78c805938" translate="yes" xml:space="preserve">
          <source>good luck</source>
          <target state="translated">행운을 빕니다</target>
        </trans-unit>
        <trans-unit id="4a17176adf520427bee47d4d1e93b849273381e8" translate="yes" xml:space="preserve">
          <source>handpick the files to revert and commit them</source>
          <target state="translated">되돌리고 커밋 할 파일을 수동으로 선택</target>
        </trans-unit>
        <trans-unit id="2e8d979b0b0e997402b755543de00bda6c8e85da" translate="yes" xml:space="preserve">
          <source>if you commit a wrong file in your last commits follow the instruction :</source>
          <target state="translated">마지막 커밋에서 잘못된 파일을 커밋하면 다음 지침을 따르십시오.</target>
        </trans-unit>
        <trans-unit id="4347cf8245dc69cea2ba122db8097385f180002b" translate="yes" xml:space="preserve">
          <source>open source tree, change to this commit</source>
          <target state="translated">오픈 소스 트리,이 커밋으로 변경</target>
        </trans-unit>
        <trans-unit id="a730a61422c8050e274edbf806241be955c80e8e" translate="yes" xml:space="preserve">
          <source>open your visual studio code and revert back by committing your removed files</source>
          <target state="translated">제거 된 파일을 커밋하여 Visual Studio 코드를 열고 되 돌리십시오.</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">or</target>
        </trans-unit>
        <trans-unit id="092be29e704b91b3f5badc3d257df7ad22444361" translate="yes" xml:space="preserve">
          <source>performs a &lt;code&gt;git log&lt;/code&gt; on the specified file and</source>
          <target state="translated">지정된 파일에서 &lt;code&gt;git log&lt;/code&gt; 를 수행하고</target>
        </trans-unit>
        <trans-unit id="fbdd51ec7a9d25c06a8ee3deedcb888ed4d53229" translate="yes" xml:space="preserve">
          <source>picks the appropriate commit-id in the history of the file and</source>
          <target state="translated">파일 히스토리에서 적절한 commit-id를 선택하고</target>
        </trans-unit>
        <trans-unit id="15bbbb29eb272748b21c4dcfa46c69fc2ac290ac" translate="yes" xml:space="preserve">
          <source>revert the entire commit with the file you want to specifically revert - it will create a new commit on your branch</source>
          <target state="translated">구체적으로 되돌리려는 파일로 전체 커밋을 되 돌리십시오. 브랜치에서 새 커밋을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="965c698aefff64ee1286f337e7a48a6c02df9611" translate="yes" xml:space="preserve">
          <source>select it and then click on ... buttons right-hand side ... click reverse file</source>
          <target state="translated">그것을 선택하고 ... 버튼을 클릭하십시오. 오른쪽 ... 역 파일을 클릭하십시오.</target>
        </trans-unit>
        <trans-unit id="564164e12f79db74a4ea245e85319f9bdbf127e2" translate="yes" xml:space="preserve">
          <source>soft reset that commit - removes the commit and moves the changes to the working area</source>
          <target state="translated">커밋을 소프트 리셋-커밋을 제거하고 변경 사항을 작업 영역으로 이동</target>
        </trans-unit>
        <trans-unit id="80de9ccfe165996e273cd72e5bffffff5d4e0134" translate="yes" xml:space="preserve">
          <source>then you can see it on file status tab at the bottom left-hand side 
then click unstage:</source>
          <target state="translated">왼쪽 하단의 파일 상태 탭에서 확인한 다음 스테이지 해제를 클릭하십시오.</target>
        </trans-unit>
        <trans-unit id="4f339a7749c460a3e9d54829af2aef23da4f888b" translate="yes" xml:space="preserve">
          <source>to restore the state to a given commit and erase all newer commits from the record permanently.</source>
          <target state="translated">주어진 커밋으로 상태를 복원하고 레코드에서 모든 최신 커밋을 영구적으로 삭제합니다.</target>
        </trans-unit>
        <trans-unit id="3f78691ba6b220f52f8cb88c1c59986f48871a87" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;&amp;lt;N&amp;gt;&lt;/code&gt; is the number of revisions of the file to rollback for file &lt;code&gt;&amp;lt;filename&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">여기서 &lt;code&gt;&amp;lt;N&amp;gt;&lt;/code&gt; 은 &lt;code&gt;&amp;lt;filename&amp;gt;&lt;/code&gt; 파일에 대해 롤백 할 파일의 개정 수입니다.</target>
        </trans-unit>
        <trans-unit id="8cb199f821e44bf15f4a80b7dbe7503020ba66f8" translate="yes" xml:space="preserve">
          <source>which shows you a list of recent commits, and their SHA1 hashes.</source>
          <target state="translated">최근 커밋 목록과 SHA1 해시가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="2ff9ff768bb2ce0d55c5d259de07282908ee3967" translate="yes" xml:space="preserve">
          <source>would undo the last commit which is seemed to do.</source>
          <target state="translated">마지막 커밋을 취소합니다.</target>
        </trans-unit>
        <trans-unit id="73134e5c0867544e90ef49da8ccd9c9049c6c0d8" translate="yes" xml:space="preserve">
          <source>you can see the list of your changes in that commit</source>
          <target state="translated">해당 커밋에서 변경 사항 목록을 볼 수 있습니다</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
