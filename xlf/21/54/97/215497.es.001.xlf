<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/215497">
    <body>
      <group id="215497">
        <trans-unit id="9c3a7eb169356df9222bd586b22d0df4e9a13f8c" translate="yes" xml:space="preserve">
          <source>(Caveat:  I am not a Java programmer, I am a Perl programmer.  Perl has no formal protections which is perhaps why I understand the problem so well :) )</source>
          <target state="translated">(Advertencia:No soy un programador de Java,soy un programador de Perl.Perl no tiene protecciones formales,por lo que tal vez comprendo muy bien el problema.))</target>
        </trans-unit>
        <trans-unit id="0a36612cffe057499a0611c73fed1aa932c69c44" translate="yes" xml:space="preserve">
          <source>....
Protected: Protected access modifier is the a little tricky and you can say is a superset of the default access modifier. Protected members are same as the default members as far as the access in the same package is concerned. The difference is that, the protected members are also accessible to the subclasses of the class in which the member is declared which are outside the package in which the parent class is present.</source>
          <target state="translated">....Protegido:El modificador de acceso protegido es un poco difícil y se puede decir que es un superconjunto del modificador de acceso por defecto.Los miembros protegidos son los mismos que los miembros por defecto en lo que respecta al acceso en el mismo paquete.La diferencia es que los miembros protegidos también son accesibles a las subclases de la clase en la que se declara el miembro que están fuera del paquete en el que está presente la clase padre.</target>
        </trans-unit>
        <trans-unit id="bb129938f682e401003e1aed2ed4b40494353513" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html&quot;&gt;The official tutorial&lt;/a&gt; may be of some use to you.</source>
          <target state="translated">&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html&quot;&gt;El tutorial oficial&lt;/a&gt; puede ser de alguna utilidad para usted.</target>
        </trans-unit>
        <trans-unit id="a40d787e477845abe3af3bd4319e70db8b848c65" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html&quot;&gt;http://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html&lt;/a&gt;&lt;a href=&quot;http://www.tutorialspoint.com/java/java_access_modifiers.htm&quot;&gt;http://www.tutorialspoint.com/java/java_access_modifiers.htm&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html&quot;&gt;http://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html&lt;/a&gt;&lt;a href=&quot;http://www.tutorialspoint.com/java/java_access_modifiers.htm&quot;&gt;http://www.tutorialspoint.com/java/java_access_modifiers.htm&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c31ee98b0e56e1e2ad44c152f3835eb79ef6b74d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://stackoverflow.com/questions/676930/private-member-access-java&quot;&gt;A class's methods &lt;em&gt;are&lt;/em&gt; allowed to access private members of other objects of the same class.&lt;/a&gt; More precisely, a method of class C can access private members of C on objects of any subclass of C. Java doesn't support restricting access by instance, only by class. (Compare with Scala, which does support it using &lt;code&gt;private[this]&lt;/code&gt;.)</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/questions/676930/private-member-access-java&quot;&gt;Los m&amp;eacute;todos de una clase pueden acceder a miembros privados de otros objetos de la misma clase.&lt;/a&gt; M&amp;aacute;s precisamente, un m&amp;eacute;todo de clase C puede acceder a miembros privados de C en objetos de cualquier subclase de C. Java no admite restringir el acceso por instancia, solo por clase. (Comp&amp;aacute;relo con Scala, que lo admite usando &lt;code&gt;private[this]&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="8f7f1dc8bc472b94392e3bd3ed6215989161afa4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;default&lt;/code&gt; (or &lt;code&gt;package-private&lt;/code&gt;): package scope.</source>
          <target state="translated">&lt;code&gt;default&lt;/code&gt; (o &lt;code&gt;package-private&lt;/code&gt; ): alcance del paquete.</target>
        </trans-unit>
        <trans-unit id="3d298ea01eb1875fcce90ecc58ed559377bd324e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;default&lt;/code&gt; --&amp;gt; No access modifier keyword is present. This means it is available strictly within the package of the class. &lt;strong&gt;Nowhere&lt;/strong&gt; outside that package it can be accessed.</source>
          <target state="translated">&lt;code&gt;default&lt;/code&gt; -&amp;gt; No hay una palabra clave modificadora de acceso presente. Esto significa que est&amp;aacute; disponible estrictamente dentro del paquete de la clase. No se puede acceder a &lt;strong&gt;ninguna parte&lt;/strong&gt; fuera de ese paquete.</target>
        </trans-unit>
        <trans-unit id="632f0c7f906968661339fb461c45f7088fc72706" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;package&lt;/code&gt; is not apply to package hierarchy</source>
          <target state="translated">&lt;code&gt;package&lt;/code&gt; no se aplica a la jerarqu&amp;iacute;a de paquetes</target>
        </trans-unit>
        <trans-unit id="ad079c92642a022565d1ecd33455b4303c1a0f85" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;private&lt;/code&gt; --&amp;gt; accessible only within the same class where it is declared</source>
          <target state="translated">&lt;code&gt;private&lt;/code&gt; -&amp;gt; accesible solo dentro de la misma clase donde se declara</target>
        </trans-unit>
        <trans-unit id="9f1519bd1834a636bcfd85562fc722c65063bd03" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;private&lt;/code&gt;: accessible within the same class only.</source>
          <target state="translated">&lt;code&gt;private&lt;/code&gt; : accesible solo dentro de la misma clase.</target>
        </trans-unit>
        <trans-unit id="463f7217c25ecb5d72756d802aad36eb4f6fe8b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;private&lt;/code&gt;: class scope.</source>
          <target state="translated">&lt;code&gt;private&lt;/code&gt; : alcance de clase.</target>
        </trans-unit>
        <trans-unit id="af2e4fa6e526002b3cd89f765ab0e780189d733b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;protected&lt;/code&gt; --&amp;gt; Slightly less stricter than &lt;code&gt;default&lt;/code&gt; and apart from the same package classes it can be accessed by sub classes outside the &lt;em&gt;package&lt;/em&gt; it is declared.</source>
          <target state="translated">&lt;code&gt;protected&lt;/code&gt; -&amp;gt; Un poco menos estricto que el &lt;code&gt;default&lt;/code&gt; y aparte de las mismas clases de paquetes, se puede acceder por subclases fuera del &lt;em&gt;paquete&lt;/em&gt; que se declara.</target>
        </trans-unit>
        <trans-unit id="c5a581c238cfb204babe7a22d7bc46e3fa3256dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;protected&lt;/code&gt;: &lt;code&gt;package scope + child&lt;/code&gt; (like package, but we can subclass it from different packages). The protected modifier always keeps the &quot;parent-child&quot; relationship.</source>
          <target state="translated">&lt;code&gt;protected&lt;/code&gt; : &lt;code&gt;package scope + child&lt;/code&gt; (como paquete, pero podemos subclasificarlo de diferentes paquetes). El modificador protegido siempre mantiene la relaci&amp;oacute;n &quot;padre-hijo&quot;.</target>
        </trans-unit>
        <trans-unit id="910fdd220b274308d3d2344d80bf0070904f5aa0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;protected&lt;/code&gt;: accessible by the classes of the same package and the subclasses residing in any package.</source>
          <target state="translated">&lt;code&gt;protected&lt;/code&gt; : accesible por las clases del mismo paquete y las subclases que residen en cualquier paquete.</target>
        </trans-unit>
        <trans-unit id="050d466202fbb4d01a4953aeadb3468653e9d848" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;public&lt;/code&gt; --&amp;gt; accessible from every where</source>
          <target state="translated">&lt;code&gt;public&lt;/code&gt; -&amp;gt; accesible desde cualquier lugar</target>
        </trans-unit>
        <trans-unit id="0a072f8abd92b9840a119d8fd2cb36807b61f4b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;public&lt;/code&gt;: accessible from everywhere.</source>
          <target state="translated">&lt;code&gt;public&lt;/code&gt; : accesible desde todas partes.</target>
        </trans-unit>
        <trans-unit id="a9e5f72177dfd12fd5219a4e1db9d66c86b32aa9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;public&lt;/code&gt;: everywhere.</source>
          <target state="translated">&lt;code&gt;public&lt;/code&gt; : en todas partes.</target>
        </trans-unit>
        <trans-unit id="cd953930c2c863ea399304a3c30036133536f2ae" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;A class, method, constructor, interface etc declared public can be accessed from any other class.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Se puede acceder a una clase, m&amp;eacute;todo, constructor, interfaz, etc. declarado p&amp;uacute;blico desde cualquier otra clase.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="be09917e70f565d8c708abe4cd6e61635b34eda0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;A variable or method declared without any access control modifier is available to any other class in the same package. The fields in an interface are implicitly public static final and the methods in an interface are by default public.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Una variable o m&amp;eacute;todo declarado sin ning&amp;uacute;n modificador de control de acceso est&amp;aacute; disponible para cualquier otra clase en el mismo paquete.&lt;/em&gt; &lt;em&gt;Los campos en una interfaz son impl&amp;iacute;citamente p&amp;uacute;blicos est&amp;aacute;ticos finales y los m&amp;eacute;todos en una interfaz son p&amp;uacute;blicos por defecto.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f0ee011cda99cb49527b83f0a5b8919102a1698c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Because of class inheritance, all public methods and variables of a class are inherited by its subclasses.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Debido a la herencia de clase, todos sus m&amp;eacute;todos y variables p&amp;uacute;blicas de una clase son heredados por sus subclases.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ad348a2083c2d62016b21c1d255f3de23fa10b04" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Class and Interface&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Clase e interfaz&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="eaf0f2821bca046e8de9d5d37c914cacefc406cd" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Default access modifier means we do not explicitly declare an access modifier for a class, field, method, etc.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;El modificador de acceso predeterminado significa que no declaramos expl&amp;iacute;citamente un modificador de acceso para una clase, campo, m&amp;eacute;todo, etc.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="bb32cde4a8fce643003f72d2e1ba00918148a8da" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Different Packages&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Diferentes paquetes&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7d207fca631fc5ab4283a1e1cfa2b49aaaa7a4fc" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;However if the public class we are trying to access is in a different package, then the public class still need to be imported.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Sin embargo, si la clase p&amp;uacute;blica a la que intentamos acceder est&amp;aacute; en un paquete diferente, entonces la clase p&amp;uacute;blica a&amp;uacute;n debe importarse.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ed9665876783be76d2d202971e92d2ede6dcd26f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Methods, Variables and Constructors that are declared private can only be accessed within the declared class itself.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Solo se puede acceder a los m&amp;eacute;todos, variables y constructores que se declaran privados dentro de la clase declarada.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c601c4a206533aa7d299807e34c12f78d76e7236" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Methods, fields can be declared protected, however methods and fields in a interface cannot be declared protected.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Los m&amp;eacute;todos y los campos se pueden declarar protegidos, sin embargo, los m&amp;eacute;todos y los campos en una interfaz no se pueden declarar protegidos.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="607c9d99976709c606c4f88193f8de1144d0b2fb" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Private access modifier is the most restrictive access level. Class and interfaces cannot be private.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;El modificador de acceso privado es el nivel de acceso m&amp;aacute;s restrictivo.&lt;/em&gt; &lt;em&gt;La clase y las interfaces no pueden ser privadas.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e9080a57bc2a9fbd0bde174c2cd9cfb1cc3d4e8b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Protected access gives the subclass a chance to use the helper method or variable, while preventing a nonrelated class from trying to use it.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;El acceso protegido le da a la subclase la oportunidad de usar el m&amp;eacute;todo auxiliar o variable, al tiempo que evita que una clase no relacionada intente usarlo.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e00422beb6d4fb1981562f55a7072acc71253369" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;The protected access modifier cannot be applied to class and interfaces.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;El modificador de acceso protegido no se puede aplicar a clases e interfaces.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b9e9bd71728a515b974c723b972dd81ff4a911f8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Therefore fields, methods, blocks declared inside a public class can be accessed from any class belonging to the Java Universe.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Por lo tanto, se puede acceder a los campos, m&amp;eacute;todos y bloques declarados dentro de una clase p&amp;uacute;blica desde cualquier clase que pertenezca al Universo Java.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="65b8ac6a51801d8f9df0125860bf27145bcd2152" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Variables that are declared private can be accessed outside the class if public getter methods are present in the class.
Variables, methods and constructors which are declared protected in a superclass can be accessed only by the subclasses in other package or any class within the package of the protected members' class.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Se puede acceder a las variables que se declaran privadas fuera de la clase si los m&amp;eacute;todos getter p&amp;uacute;blicos est&amp;aacute;n presentes en la clase.&lt;/em&gt; &lt;em&gt;Las subclases de otro paquete o cualquier clase dentro del paquete de la clase de miembros protegidos solo pueden acceder a las variables, m&amp;eacute;todos y constructores que se declaran protegidos en una superclase.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9dfafa3f02ac99007413a76b7fa0132f54e95264" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Within the same Packages&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Dentro de los mismos paquetes&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c98ea408dc0e335456b8bc359e5f6e6688da4fb9" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;class -&amp;gt;&lt;/em&gt; a top level class can be package-private. It can only be accessible from same package. Not from sub package, not from outside package.</source>
          <target state="translated">&lt;em&gt;clase -&amp;gt;&lt;/em&gt; una clase de nivel superior puede ser privada del paquete. Solo se puede acceder desde el mismo paquete. No del subpaquete, no del paquete externo.</target>
        </trans-unit>
        <trans-unit id="9a2f5c5e06678e57a12196a656cbc25665cdfb9d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;class -&amp;gt;&lt;/em&gt; a top level class cannot be private. inner classes can be private which are accessible from same class.</source>
          <target state="translated">&lt;em&gt;clase -&amp;gt;&lt;/em&gt; una clase de nivel superior no puede ser privada. Las clases internas pueden ser privadas a las que se puede acceder desde la misma clase.</target>
        </trans-unit>
        <trans-unit id="49557558779971098b1beab7b3aca3d6045daa29" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;class -&amp;gt;&lt;/em&gt; a top level class cannot be protected.</source>
          <target state="translated">&lt;em&gt;clase -&amp;gt;&lt;/em&gt; una clase de nivel superior no se puede proteger.</target>
        </trans-unit>
        <trans-unit id="d03616909ff20fb6283b735f101a6bbb643bb3eb" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;class -&amp;gt;&lt;/em&gt; accessible from package/subpackage/another package</source>
          <target state="translated">&lt;em&gt;clase -&amp;gt;&lt;/em&gt; accesible desde paquete / subpaquete / otro paquete</target>
        </trans-unit>
        <trans-unit id="c9e263282cf692bb34eb4b225c833709b4cf7edc" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;instance variable -&amp;gt;&lt;/em&gt; Only accessible in same package or subpackage. Can only be access outside the package while extending class.</source>
          <target state="translated">&lt;em&gt;variable de instancia -&amp;gt;&lt;/em&gt; Solo accesible en el mismo paquete o subpaquete. Solo se puede acceder fuera del paquete mientras se extiende la clase.</target>
        </trans-unit>
        <trans-unit id="96c7893be4597454db4583a10a583947d4674561" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;instance variable -&amp;gt;&lt;/em&gt; accessible from package/subpackage/another package</source>
          <target state="translated">&lt;em&gt;variable de instancia -&amp;gt;&lt;/em&gt; accesible desde paquete / subpaquete / otro paquete</target>
        </trans-unit>
        <trans-unit id="026e2611c853bf535859a5b5903a3be7acf05507" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;instance variable -&amp;gt;&lt;/em&gt; accessible from same package. Not from sub package, not from outside package.</source>
          <target state="translated">&lt;em&gt;variable de instancia -&amp;gt;&lt;/em&gt; accesible desde el mismo paquete. No del subpaquete, no del paquete externo.</target>
        </trans-unit>
        <trans-unit id="173b1d875a31dfc5921965ffcf90d681aa11e6a0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;instance variable -&amp;gt;&lt;/em&gt; accessible only in the class. Cannot access outside the class.</source>
          <target state="translated">&lt;em&gt;variable de instancia -&amp;gt;&lt;/em&gt; accesible solo en la clase. No se puede acceder fuera de la clase.</target>
        </trans-unit>
        <trans-unit id="5f686cfad1f0d2953f73e22512646f451cc92170" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;(D)irect&lt;/strong&gt; (invoke from a method inside the same class, or via &quot;this&quot; syntax).</source>
          <target state="translated">&lt;strong&gt;(D) irect&lt;/strong&gt; (invocar desde un m&amp;eacute;todo dentro de la misma clase, o mediante la sintaxis &quot;this&quot;).</target>
        </trans-unit>
        <trans-unit id="2f0ba70dae68262e43e56b87dcf8848fd89d6328" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;(I)nheritance&lt;/strong&gt; (via subclassing).</source>
          <target state="translated">&lt;strong&gt;(I) herencia&lt;/strong&gt; (a trav&amp;eacute;s de subclases).</target>
        </trans-unit>
        <trans-unit id="37f3255a916c82622528f7b0e38edaeecd6e05d6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;(R)eference&lt;/strong&gt; (invoke a method using a reference to the class, or via &quot;dot&quot; syntax).</source>
          <target state="translated">&lt;strong&gt;(R) eferencia&lt;/strong&gt; (invoque un m&amp;eacute;todo usando una referencia a la clase, o mediante la sintaxis &quot;punto&quot;).</target>
        </trans-unit>
        <trans-unit id="d47c24704c2b9863e2e3ea5d7687a108717bebe5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;1. Default:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;1. Predeterminado:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e866b80161e29b930ff930217326b95750c6bf3e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;2. Public&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;2. P&amp;uacute;blico&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4c5b5405bad9144f153406167830cfeaa7599707" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;3. Private&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;3. Privado&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="aedac4ee80eebec26a1eb8895f25fc3e9ab66966" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;4. Protected&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;4. Protegido&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="10ae501fbb4b985b6a4a6387afbed4b6c308d6df" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Note&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;Note&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9cb1729758cbd3ed754ecb8b9228916334559d56" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Access modifiers in Java.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Modificadores de acceso en Java.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1448cd0adc12ffa3db85751d7d788972e1ab2fad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Basically, within same package you can access default members on instance of class directly or on 'this' reference in subclasses.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;B&amp;aacute;sicamente, dentro del mismo paquete puede acceder a los miembros predeterminados en la instancia de la clase directamente o en 'esta' referencia en subclases.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="85289d4bbd59b9fc93e676b9dd9d70acb4cca817" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Default (no modifier)&lt;/strong&gt;: Limited access to class and package</source>
          <target state="translated">&lt;strong&gt;Predeterminado (sin modificador)&lt;/strong&gt; : acceso limitado a la clase y al paquete</target>
        </trans-unit>
        <trans-unit id="a1878f65fb532348cd1105c6341d17ed1f134691" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Default -No keyword:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Predeterminado -No palabra clave:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2b04f00e04bc38cbb526378ea597f7474886dbd7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Default:&lt;/strong&gt; It is accessible in the same package from any of the class of package.</source>
          <target state="translated">&lt;strong&gt;Valor predeterminado:&lt;/strong&gt; se puede acceder en el mismo paquete desde cualquiera de la clase de paquete.</target>
        </trans-unit>
        <trans-unit id="1bc0a5d67820f61786ae04d054caabfe5bd3f6ff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Examples:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Examples:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="41b7f6e44695c115445cfdf86e3775318ae5636a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Overriding static methods in java&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Anulaci&amp;oacute;n de m&amp;eacute;todos est&amp;aacute;ticos en java&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7c1f15f4ebb983532fb274e28770fe57bde1d4d2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Package-private (default)&lt;/strong&gt;:
This access specifier will provide access specified by private access specifier in addition to access described below.</source>
          <target state="translated">&lt;strong&gt;Paquete privado (predeterminado)&lt;/strong&gt; : este especificador de acceso proporcionar&amp;aacute; el acceso especificado por el especificador de acceso privado adem&amp;aacute;s del acceso que se describe a continuaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="2394388ff716cba591b2a38592dcfb0fc54be273" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Private:&lt;/strong&gt;  it can be access in same class.</source>
          <target state="translated">&lt;strong&gt;Privado:&lt;/strong&gt; se puede acceder en la misma clase.</target>
        </trans-unit>
        <trans-unit id="d0ded9f3e89154a12e4907eb9238a15f78247f90" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Private&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Private&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9cb9f56d3c4fd96b6c4e794bc32a4d40c75f7676" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Private&lt;/strong&gt;:
When you are developing some class and you want member of this class not to be exposed outside this class then you should declare it as private. private members can be accessed only in class where they are defined i.e. enclosing class. &lt;strong&gt;private members can be accessed on 'this' reference and also on other instances of class enclosing these members, but only within the definition of this class.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Privado&lt;/strong&gt; : cuando est&amp;aacute; desarrollando alguna clase y desea que un miembro de esta clase no quede expuesto fuera de esta clase, debe declararlo como privado. Se puede acceder a los miembros privados solo en la clase donde est&amp;aacute;n definidos, es decir, encerrando la clase. &lt;strong&gt;Se puede acceder a los miembros privados en 'esta' referencia y tambi&amp;eacute;n en otras instancias de clase que incluyen a estos miembros, pero solo dentro de la definici&amp;oacute;n de esta clase.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d034dfbbb5bc7f21cf96cfb8f1346e544c26d94d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Private&lt;/strong&gt;: Limited access to class only</source>
          <target state="translated">&lt;strong&gt;Privado&lt;/strong&gt; : acceso limitado a clase solamente</target>
        </trans-unit>
        <trans-unit id="8695d4960b797f2b6f67e904191eb903c43e1aa9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Protected:&lt;/strong&gt; you can access variables in same package as well as subclass in any other package.
so basically it is &lt;strong&gt;default + Inherited&lt;/strong&gt; behavior.</source>
          <target state="translated">&lt;strong&gt;Protegido:&lt;/strong&gt; puede acceder a las variables en el mismo paquete, as&amp;iacute; como a la subclase en cualquier otro paquete. as&amp;iacute; que b&amp;aacute;sicamente es el comportamiento &lt;strong&gt;predeterminado + heredado&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="1cc4ba9e4e89686db9f53e13fd8b66ac42177424" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Protected&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Protected&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d10a4c31137ee8169148752120d940b936bc3f24" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Protected&lt;/strong&gt;: Limited access to class, package and subclasses (both inside and outside package)</source>
          <target state="translated">&lt;strong&gt;Protegido&lt;/strong&gt; : acceso limitado a la clase, paquete y subclases (tanto dentro como fuera del paquete)</target>
        </trans-unit>
        <trans-unit id="09bfe678952f0c3d0b3e5646e875cdb224ae65c9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Public:&lt;/strong&gt; It is basically as simple as you can access from any class whether that is in same package or not.</source>
          <target state="translated">&lt;strong&gt;P&amp;uacute;blico:&lt;/strong&gt; es b&amp;aacute;sicamente tan simple como puede acceder desde cualquier clase, ya sea que est&amp;eacute; en el mismo paquete o no.</target>
        </trans-unit>
        <trans-unit id="daf97633cf021dedd039ac3d7f17e15721760df8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Public&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Public&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4ef6e4673df9ec5787ab0c659ebd27e9c95e224b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Public&lt;/strong&gt;: Accessible to class, package (all), and subclasses... In short, everywhere.</source>
          <target state="translated">&lt;strong&gt;P&amp;uacute;blico&lt;/strong&gt; : Accesible a clase, paquete (todos) y subclases ... En resumen, en todas partes.</target>
        </trans-unit>
        <trans-unit id="3ea3436ff46ae8818a665ddb071efa68994538cf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;default&lt;/strong&gt; - accessible from package.</source>
          <target state="translated">&lt;strong&gt;predeterminado&lt;/strong&gt; : accesible desde el paquete.</target>
        </trans-unit>
        <trans-unit id="5b4cfa6911291d8ddc421bedd52ed7d82f9ee73d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;package-private:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;package-private:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4c53c0e830d80b72103ef701f9080f24a7d1a99a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;private:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;private:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6d91069bf7a48c4c4d6a00bfe7860b6cbc143d2e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;private&lt;/strong&gt; - accessible from its class only.</source>
          <target state="translated">&lt;strong&gt;privado&lt;/strong&gt; : accesible solo desde su clase.</target>
        </trans-unit>
        <trans-unit id="afe8465ac8ccd97429f85b76250e88d3dfed7a2b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;protected:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;protected:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d2bed00fc75e7d51b53be0dee63c249e4a93a6e9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;protected&lt;/strong&gt; - accessible from package and sub-classes in other package.
as well</source>
          <target state="translated">&lt;strong&gt;protegido&lt;/strong&gt; : accesible desde el paquete y las subclases en otro paquete. tambi&amp;eacute;n</target>
        </trans-unit>
        <trans-unit id="7056cef6786f8cf6365723485c784d324755daf7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;protected&lt;/strong&gt;:
This access specifier will provide access specified by package-private access specifier in addition to access described below.</source>
          <target state="translated">&lt;strong&gt;protegido&lt;/strong&gt; : este especificador de acceso proporcionar&amp;aacute; el acceso especificado por el especificador de acceso privado del paquete adem&amp;aacute;s del acceso que se describe a continuaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="31d169cdb7e077cb9bf36e76bd03f5556f7d9daa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;public:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;public:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4f45ba4381db9194fc2431928eb13db0ea7fad3d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;public&lt;/strong&gt; - accessible from anywhere in the application.</source>
          <target state="translated">&lt;strong&gt;p&amp;uacute;blico&lt;/strong&gt; : accesible desde cualquier lugar de la aplicaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="c79deadce74e410ea5f7108d88f579a381133846" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;public&lt;/strong&gt;: This access specifier will provide access specified by protected access specifier in addition to access described below.</source>
          <target state="translated">&lt;strong&gt;public&lt;/strong&gt; : Este especificador de acceso proporcionar&amp;aacute; el acceso especificado por el especificador de acceso protegido adem&amp;aacute;s del acceso que se describe a continuaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="d36eb0da54971756790f3d446942c6a1a8ca6054" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;(*) &lt;a href=&quot;https://stackoverflow.com/questions/28612420/what-is-encapsulation-exactly&quot;&gt;What is Encapsulation exactly?&lt;/a&gt;&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;(*) &lt;a href=&quot;https://stackoverflow.com/questions/28612420/what-is-encapsulation-exactly&quot;&gt;&amp;iquest;Qu&amp;eacute; es exactamente la encapsulaci&amp;oacute;n?&lt;/a&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="69e4829657ddc7c46d77dc0bc935268a8736ae11" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;void saveGame(File dst)&lt;/code&gt; method which is called from the GUI code should be public.</source>
          <target state="translated">Un &lt;code&gt;void saveGame(File dst)&lt;/code&gt; que se llama desde el c&amp;oacute;digo GUI debe ser p&amp;uacute;blico.</target>
        </trans-unit>
        <trans-unit id="5a1965065a3a72db5cb5bbc47bad12cce01c8893" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;private&lt;/strong&gt; member (&lt;code&gt;i&lt;/code&gt;) is &lt;em&gt;only&lt;/em&gt; accessible within the same class as it is declared.</source>
          <target state="translated">Un miembro &lt;strong&gt;privado&lt;/strong&gt; ( &lt;code&gt;i&lt;/code&gt; ) &lt;em&gt;solo&lt;/em&gt; es accesible dentro de la misma clase que se declara.</target>
        </trans-unit>
        <trans-unit id="c567cfcccb536538fb2bff328e96d3817df1bc65" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;protected&lt;/strong&gt; member (&lt;code&gt;k&lt;/code&gt;) is accessible within all classes in the same package &lt;em&gt;and&lt;/em&gt; within subclasses in other packages.</source>
          <target state="translated">Se puede acceder a un miembro &lt;strong&gt;protegido&lt;/strong&gt; ( &lt;code&gt;k&lt;/code&gt; ) dentro de todas las clases en el mismo paquete &lt;em&gt;y&lt;/em&gt; dentro de las subclases en otros paquetes.</target>
        </trans-unit>
        <trans-unit id="eb72f226a8ba71d7c3578d0fab29e570e86013a3" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;public&lt;/strong&gt; member (&lt;code&gt;l&lt;/code&gt;) is accessible to all classes (unless it resides in a &lt;a href=&quot;http://openjdk.java.net/projects/jigsaw/spec/sotms/&quot;&gt;module&lt;/a&gt; that does not export the package it is declared in).</source>
          <target state="translated">Un miembro &lt;strong&gt;p&amp;uacute;blico&lt;/strong&gt; ( &lt;code&gt;l&lt;/code&gt; ) es accesible para todas las clases (a menos que resida en un &lt;a href=&quot;http://openjdk.java.net/projects/jigsaw/spec/sotms/&quot;&gt;m&amp;oacute;dulo&lt;/a&gt; que no exporta el paquete en el que est&amp;aacute; declarado).</target>
        </trans-unit>
        <trans-unit id="28f9daadf043c9bd9f0d0e247b851c20599c84f6" translate="yes" xml:space="preserve">
          <source>A Java access modifier specifies which classes can access a given
  class and its fields, constructors and methods. Access modifiers can
  be specified separately for a class, its constructors, fields and
  methods. Java access modifiers are also sometimes referred to in daily
  speech as Java access specifiers, but the correct name is Java access
  modifiers. Classes, fields, constructors and methods can have one of
  four different Java access modifiers:</source>
          <target state="translated">Un modificador de acceso de Java especifica qué clases pueden acceder a una clase determinada y sus campos,constructores y métodos.Los modificadores de acceso pueden especificarse por separado para una clase,sus constructores,campos y métodos.Los modificadores de acceso de Java también se denominan a veces en el lenguaje cotidiano como especificadores de acceso de Java,pero el nombre correcto es modificadores de acceso de Java.Las clases,campos,constructores y métodos pueden tener uno de los cuatro modificadores de acceso de Java diferentes:</target>
        </trans-unit>
        <trans-unit id="2e82124ab3a422db45abe523f1679bc6aa91180c" translate="yes" xml:space="preserve">
          <source>A class may be declared with the modifier public, in which case that
  class is visible to all classes everywhere. If a class has no modifier
  (the default, also known as package-private), it is visible only
  within its own package</source>
          <target state="translated">Una clase puede ser declarada con el público modificador,en cuyo caso esa clase es visible para todas las clases en todas partes.Si una clase no tiene ningún modificador (el predeterminado,también conocido como paquete-privado),es visible sólo dentro de su propio paquete</target>
        </trans-unit>
        <trans-unit id="702664d37f54e24a65c5847af5c9c48dec38ac9b" translate="yes" xml:space="preserve">
          <source>A class that should only be instantiated in a factory class (in the same package) should have a package restricted constructor, since it shouldn't be possible to call it directly from outside the package.</source>
          <target state="translated">Una clase que sólo debería instanciarse en una clase de fábrica (en el mismo paquete)debería tener un paquete de constructor restringido,ya que no debería ser posible llamarlo directamente desde fuera del paquete.</target>
        </trans-unit>
        <trans-unit id="2d6ccdc5fb3619653080b70f843a3d53183d1d68" translate="yes" xml:space="preserve">
          <source>A class, method, constructor, interface, etc. declared public can be accessed from any other class. Therefore fields, methods, blocks declared inside a public class can be accessed from any class belonging to the Java universe.</source>
          <target state="translated">Una clase,método,constructor,interfaz,etc.declarados públicos pueden ser accedidos desde cualquier otra clase.Por lo tanto,los campos,métodos,bloques declarados dentro de una clase pública pueden ser accedidos desde cualquier clase perteneciente al universo Java.</target>
        </trans-unit>
        <trans-unit id="59c33800560e8ea15395ce4e031d5c61d474b047" translate="yes" xml:space="preserve">
          <source>A field &lt;code&gt;long internalCounter&lt;/code&gt; should probably be private since it's mutable and an implementation detail.</source>
          <target state="translated">Un campo &lt;code&gt;long internalCounter&lt;/code&gt; probablemente deber&amp;iacute;a ser privado ya que es mutable y un detalle de implementaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="84f15ff4b953e019c687edc46342c1a4d6e9ef49" translate="yes" xml:space="preserve">
          <source>A member with &lt;strong&gt;no access modifier&lt;/strong&gt; (&lt;code&gt;j&lt;/code&gt;) is only accessible within classes in the same package.</source>
          <target state="translated">Un miembro &lt;strong&gt;sin modificador de acceso&lt;/strong&gt; ( &lt;code&gt;j&lt;/code&gt; ) solo es accesible dentro de las clases en el mismo paquete.</target>
        </trans-unit>
        <trans-unit id="c55ab8ded977750bfe1904b046504c141b94218c" translate="yes" xml:space="preserve">
          <source>A non-subclass inside a package of a subclass (A subclass inherits the protected members from its parent, and it makes them private to non-subclasses):</source>
          <target state="translated">Una no subclase dentro de un paquete de una subclase (Una subclase hereda los miembros protegidos de su padre,y los hace privados a las no subclases):</target>
        </trans-unit>
        <trans-unit id="d652e362bd9495b3b5c5a0d3c9f4d692d5d6cfac" translate="yes" xml:space="preserve">
          <source>Access Specifiers in Java:
There are 4 access specifiers in java, namely private, package-private (default), protected and public in increasing access order.</source>
          <target state="translated">Especificadores de acceso en Java:Hay 4 especificadores de acceso en java,a saber,privado,paquete-privado (por defecto),protegido y público en orden de acceso creciente.</target>
        </trans-unit>
        <trans-unit id="d90ffb4fa501229758715d3323e06c84a5ae97b4" translate="yes" xml:space="preserve">
          <source>Access level modifiers determine whether other classes can use a
  particular field or invoke a particular method. There are two levels
  of access control:</source>
          <target state="translated">Los modificadores del nivel de acceso determinan si otras clases pueden utilizar un campo determinado o invocar un método determinado.Hay dos niveles de control de acceso:</target>
        </trans-unit>
        <trans-unit id="f35f9b2fc1a98f9e2d94d1f9485056d27b28eeaf" translate="yes" xml:space="preserve">
          <source>Access levels affect you in two ways. First, when you use classes that
  come from another source, such as the classes in the Java platform,
  access levels determine which members of those classes your own
  classes can use. Second, when you write a class, you need to decide
  what access level every member variable and every method in your class
  should have.</source>
          <target state="translated">Los niveles de acceso te afectan de dos maneras.Primero,cuando usas clases que provienen de otra fuente,como las clases de la plataforma Java,los niveles de acceso determinan qué miembros de esas clases pueden usar tus propias clases.Segundo,cuando escribes una clase,necesitas decidir qué nivel de acceso debe tener cada variable de miembro y cada método de tu clase.</target>
        </trans-unit>
        <trans-unit id="03834d1bba262bb9c1fe64f18662c2cfe0984376" translate="yes" xml:space="preserve">
          <source>Access modifier can be applicable for &lt;code&gt;class&lt;/code&gt;, &lt;code&gt;field&lt;/code&gt;&lt;a href=&quot;https://stackoverflow.com/a/60907642/4770877&quot;&gt;&lt;sup&gt;[About]&lt;/sup&gt;&lt;/a&gt;, &lt;code&gt;method&lt;/code&gt;. Try to access, subclass or override this.</source>
          <target state="translated">El modificador de acceso puede ser aplicable para la &lt;code&gt;class&lt;/code&gt; , &lt;code&gt;field&lt;/code&gt; &lt;a href=&quot;https://stackoverflow.com/a/60907642/4770877&quot;&gt;&lt;sup&gt;[Acerca de]&lt;/sup&gt;&lt;/a&gt; , &lt;code&gt;method&lt;/code&gt; . Intenta acceder, subclase o anular esto.</target>
        </trans-unit>
        <trans-unit id="9e3f67bc099476112adf6c930b20ba16a50afeba" translate="yes" xml:space="preserve">
          <source>Access modifiers are there to restrict access at several levels.</source>
          <target state="translated">Los modificadores de acceso están ahí para restringir el acceso a varios niveles.</target>
        </trans-unit>
        <trans-unit id="ef81daf780b1360468865cad0409109e0c35badd" translate="yes" xml:space="preserve">
          <source>Access modifiers is a tool to help you to prevent accidentally breaking encapsulation&lt;sup&gt;(*)&lt;/sup&gt;. Ask yourself if you intend the member to be something that's internal to the class, package, class hierarchy or not internal at all, and choose access level accordingly.</source>
          <target state="translated">Access Modifiers es una herramienta para ayudarlo a evitar romper accidentalmente la encapsulaci&amp;oacute;n &lt;sup&gt;(*)&lt;/sup&gt; . Preg&amp;uacute;ntese si tiene la intenci&amp;oacute;n de que el miembro sea algo interno a la clase, paquete, jerarqu&amp;iacute;a de clases o no sea interno, y elija el nivel de acceso correspondiente.</target>
        </trans-unit>
        <trans-unit id="5eff681f376245a3dee4c9191f68f56b0af848bd" translate="yes" xml:space="preserve">
          <source>Access to &lt;code&gt;field&lt;/code&gt; or &lt;code&gt;method&lt;/code&gt; is through a &lt;code&gt;class&lt;/code&gt;.</source>
          <target state="translated">El acceso al &lt;code&gt;field&lt;/code&gt; o &lt;code&gt;method&lt;/code&gt; es a trav&amp;eacute;s de una &lt;code&gt;class&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b2412c998fc16dee0b53ff74260ef514b93a1606" translate="yes" xml:space="preserve">
          <source>Accessible only inside the same class.</source>
          <target state="translated">Accesible sólo dentro de la misma clase.</target>
        </trans-unit>
        <trans-unit id="3a2d2458a3a2813e65aa1e280528e2ae281eb1b6" translate="yes" xml:space="preserve">
          <source>Accessible only to the classes in the same package and to the subclasses</source>
          <target state="translated">Accesible sólo a las clases del mismo paquete y a las subclases</target>
        </trans-unit>
        <trans-unit id="d0e99d1f0ad00dcd92752660239fe3e6461be76a" translate="yes" xml:space="preserve">
          <source>Accessible to the classes in the same package only.</source>
          <target state="translated">Accesible a las clases en el mismo paquete solamente.</target>
        </trans-unit>
        <trans-unit id="5b3141b0946b8bc5002beaffc46356be6f4c620a" translate="yes" xml:space="preserve">
          <source>All the access specifiers are possible on class members (constructors, methods and static member functions, nested classes).</source>
          <target state="translated">Todos los especificadores de acceso son posibles en los miembros de la clase (constructores,métodos y funciones de los miembros estáticos,clases anidadas).</target>
        </trans-unit>
        <trans-unit id="039d200ae5db7c7b5f2a7c153d81e8001cb8966c" translate="yes" xml:space="preserve">
          <source>Also, use the @Override annotation when overriding to keep things from breaking when you refactor.</source>
          <target state="translated">Además,usa la anotación @Override cuando anules para evitar que las cosas se rompan cuando refactorices.</target>
        </trans-unit>
        <trans-unit id="2e74d999b3d7180df815ddf8cc8c8247175ccf3b" translate="yes" xml:space="preserve">
          <source>An internal &lt;code&gt;void beforeRender()&lt;/code&gt; method called right before rendering and used as a hook in subclasses should be protected.</source>
          <target state="translated">&lt;code&gt;void beforeRender()&lt;/code&gt; m&amp;eacute;todo de void beforeRender () interno llamado justo antes del renderizado y utilizado como un gancho en subclases.</target>
        </trans-unit>
        <trans-unit id="f562bc00e2ff22b13660ce46b08683a5aa376aae" translate="yes" xml:space="preserve">
          <source>Another thing is that classes which depend a lot on each other may end up in the same package and could eventually be refactored or merged if the dependency is too strong.</source>
          <target state="translated">Otra cosa es que las clases que dependen mucho unas de otras pueden terminar en el mismo paquete y podrían eventualmente ser refactorizadas o fusionadas si la dependencia es demasiado fuerte.</target>
        </trans-unit>
        <trans-unit id="2c41355fcbb760f41e646cca45391d28712651f9" translate="yes" xml:space="preserve">
          <source>As a general rule I try to avoid overriding method implementations by subclassing; it's too easy to screw up the logic. Declare abstract protected methods if you intend for it to be overridden.</source>
          <target state="translated">Como regla general,trato de evitar anular las implementaciones de los métodos por medio de la subclasificación;es demasiado fácil arruinar la lógica.Declare métodos abstractos protegidos si pretende que sean anulados.</target>
        </trans-unit>
        <trans-unit id="32423b1a28b9a1d669c73210c669f380ab7cd7cf" translate="yes" xml:space="preserve">
          <source>As a result, if we divide access right into three rights:</source>
          <target state="translated">Como resultado,si dividimos el derecho de acceso en tres derechos:</target>
        </trans-unit>
        <trans-unit id="db2bda78247e71f5efa83e0fc3e723c83ff44d0a" translate="yes" xml:space="preserve">
          <source>As a rule of thumb:</source>
          <target state="translated">Como regla general:</target>
        </trans-unit>
        <trans-unit id="a81942444a4d0f2780ea3a629f2fe55b7bc48ec8" translate="yes" xml:space="preserve">
          <source>Assume that we have 2 classes; &lt;code&gt;Father&lt;/code&gt; and &lt;code&gt;Son&lt;/code&gt;, each in its own package:</source>
          <target state="translated">Supongamos que tenemos 2 clases; &lt;code&gt;Father&lt;/code&gt; e &lt;code&gt;Son&lt;/code&gt; , cada uno en su propio paquete:</target>
        </trans-unit>
        <trans-unit id="aa9a0ac313bc297e77263ee6fbe80f0f9519aae9" translate="yes" xml:space="preserve">
          <source>At the member level&amp;mdash;public, private, protected, or package-private (no explicit modifier).</source>
          <target state="translated">En el nivel de miembro: p&amp;uacute;blico, privado, protegido o paquete privado (sin modificador expl&amp;iacute;cito).</target>
        </trans-unit>
        <trans-unit id="e305218fd0f9ba9ee5a5cdb055df557e07100698" translate="yes" xml:space="preserve">
          <source>At the top level&amp;mdash;public, or package-private (no explicit modifier).</source>
          <target state="translated">En el nivel superior: p&amp;uacute;blico o paquete privado (sin modificador expl&amp;iacute;cito).</target>
        </trans-unit>
        <trans-unit id="1c758ca2bda73911a8bb40b724a78e1d5d7c8eff" translate="yes" xml:space="preserve">
          <source>Because of class inheritance, all public methods and variables of a class are inherited by its subclasses.</source>
          <target state="translated">Debido a la herencia de la clase,todos los métodos públicos y variables de una clase son heredados por sus subclases.</target>
        </trans-unit>
        <trans-unit id="fb75e9527859877f47e7706814e662a02518f379" translate="yes" xml:space="preserve">
          <source>But these protected members are &amp;ldquo;accessible outside the package only through inheritance&amp;ldquo;. i.e you can access a protected member of a class in its subclass present in some other package directly as if the member is present in the subclass itself. But that protected member will not be accessible in the subclass outside the package by using parent class&amp;rsquo;s reference. 
....</source>
          <target state="translated">Pero estos miembros protegidos son &quot;accesibles fuera del paquete solo a trav&amp;eacute;s de la herencia&quot;. es decir, puede acceder a un miembro protegido de una clase en su subclase presente en alg&amp;uacute;n otro paquete directamente como si el miembro estuviera presente en la propia subclase. Pero ese miembro protegido no ser&amp;aacute; accesible en la subclase fuera del paquete utilizando la referencia de la clase padre. ....</target>
        </trans-unit>
        <trans-unit id="c4a8265d49bc8acc6dd4762df0a314fae0081dc6" translate="yes" xml:space="preserve">
          <source>C++ defines an additional level called &quot;friend&quot; and the less you know about that the better.</source>
          <target state="translated">C++define un nivel adicional llamado &quot;amigo&quot; y cuanto menos sepas sobre eso,mejor.</target>
        </trans-unit>
        <trans-unit id="fea15bced6cf072a20331c3293889e5278470a9f" translate="yes" xml:space="preserve">
          <source>Can be accessed from anywhere. (Global Access)</source>
          <target state="translated">Se puede acceder desde cualquier lugar.(Acceso global)</target>
        </trans-unit>
        <trans-unit id="b6b8d9b4123fecc2397339f9346b53016b47c561" translate="yes" xml:space="preserve">
          <source>Can only be seen and used by the &lt;strong&gt;package&lt;/strong&gt; in which it was declared.  This is the default in Java (which some see as a mistake).</source>
          <target state="translated">Solo puede ser visto y utilizado por el &lt;strong&gt;paquete&lt;/strong&gt; en el que se declar&amp;oacute;. Este es el valor predeterminado en Java (que algunos ven como un error).</target>
        </trans-unit>
        <trans-unit id="29a771fa03b2207c5bfcb8ccc88b283b088d93d8" translate="yes" xml:space="preserve">
          <source>Class and Interface</source>
          <target state="translated">Clase e Interfaz</target>
        </trans-unit>
        <trans-unit id="abdbdface1f6d0a002a132de8ee6c16f0286d809" translate="yes" xml:space="preserve">
          <source>Class can be public or default</source>
          <target state="translated">La clase puede ser pública o por defecto</target>
        </trans-unit>
        <trans-unit id="4eff37234b0241258920d335734419acce47e495" translate="yes" xml:space="preserve">
          <source>Class members can be public, protected, default or private.</source>
          <target state="translated">Los miembros de la clase pueden ser públicos,protegidos,por defecto o privados.</target>
        </trans-unit>
        <trans-unit id="b77183cc688eb0a13673641268a14b314543ef5c" translate="yes" xml:space="preserve">
          <source>Compiler output:</source>
          <target state="translated">Salida del compilador:</target>
        </trans-unit>
        <trans-unit id="5813699819cb9238ea0a3cac18732617dd8b7ef9" translate="yes" xml:space="preserve">
          <source>David's answer provides the meaning of each access modifier. As for when to use each, I'd suggest making public all classes and the methods of each class that are meant for external use (its API), and everything else private.</source>
          <target state="translated">La respuesta de David proporciona el significado de cada modificador de acceso.En cuanto a cuándo usar cada uno,sugeriría hacer públicas todas las clases y los métodos de cada clase que están destinados a uso externo (su API),y todo lo demás privado.</target>
        </trans-unit>
        <trans-unit id="b3048e4be2bec9d78ee94630c8921320fc4664da" translate="yes" xml:space="preserve">
          <source>Easy rule. Start with declaring everything private. And then progress towards the public as the needs arise and design warrants it.</source>
          <target state="translated">Regla fácil.Empieza por declarar todo privado.Y luego avanzar hacia lo público según las necesidades y el diseño lo justifique.</target>
        </trans-unit>
        <trans-unit id="1aed6cf212aa5ca85fdc040a3f80f02392b4b63d" translate="yes" xml:space="preserve">
          <source>Everyone can see it.</source>
          <target state="translated">Todo el mundo puede verlo.</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="fb3447b632f6a431215776dcf254a01001a40c4f" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="translated">Examples:</target>
        </trans-unit>
        <trans-unit id="a9375f321c90af9af48e6e3fb9835073a5901dfe" translate="yes" xml:space="preserve">
          <source>Explanations</source>
          <target state="translated">Explanations</target>
        </trans-unit>
        <trans-unit id="de130795061e0af332069bc81b222c01a70e8ee6" translate="yes" xml:space="preserve">
          <source>Finally, your friend wants to read your progress report for the semester which is posted on the website. However, every student has their own personal login to access this section of the campus website. This would make these credentials as &lt;strong&gt;PRIVATE&lt;/strong&gt;.</source>
          <target state="translated">Finalmente, su amigo quiere leer su informe de progreso para el semestre que se publica en el sitio web. Sin embargo, cada estudiante tiene su propio inicio de sesi&amp;oacute;n personal para acceder a esta secci&amp;oacute;n del sitio web del campus. Esto har&amp;iacute;a que estas credenciales sean &lt;strong&gt;PRIVADAS&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="414b0040a73b05acdd918cc38af972d787b57ad2" translate="yes" xml:space="preserve">
          <source>Following block diagram explain how data members of &lt;strong&gt;base class&lt;/strong&gt; are &lt;strong&gt;inherited&lt;/strong&gt; when &lt;strong&gt;derived class&lt;/strong&gt; access mode is &lt;strong&gt;private&lt;/strong&gt;.</source>
          <target state="translated">El siguiente diagrama de bloques explica c&amp;oacute;mo se &lt;strong&gt;heredan los&lt;/strong&gt; miembros de datos de la &lt;strong&gt;clase base&lt;/strong&gt; cuando el modo de acceso a la &lt;strong&gt;clase derivada&lt;/strong&gt; es &lt;strong&gt;privado&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="211709b4e5a975998dfceb9f90b343faddbc3a82" translate="yes" xml:space="preserve">
          <source>For a taste of how these interact, consider this example. It is possible to &quot;leak&quot; private inner classes; this is usually a warning:</source>
          <target state="translated">Para saber cómo interactúan,consideren este ejemplo.Es posible &quot;filtrar&quot; las clases internas privadas;esto suele ser una advertencia:</target>
        </trans-unit>
        <trans-unit id="629b7e6e087c9f024573fb85ac0935aa91d841eb" translate="yes" xml:space="preserve">
          <source>For classes in the top scope, only &lt;code&gt;public&lt;/code&gt; and package-private are permitted. This design choice is presumably because &lt;code&gt;protected&lt;/code&gt; and &lt;code&gt;private&lt;/code&gt; would be redundant at the package level (there is no inheritance of packages).</source>
          <target state="translated">Para las clases en el &amp;aacute;mbito superior, solo se permiten los paquetes &lt;code&gt;public&lt;/code&gt; y privados. Presumiblemente, esta elecci&amp;oacute;n de dise&amp;ntilde;o se debe a que la &lt;code&gt;protected&lt;/code&gt; y la &lt;code&gt;private&lt;/code&gt; ser&amp;iacute;an redundantes a nivel de paquete (no hay herencia de paquetes).</target>
        </trans-unit>
        <trans-unit id="6db6725e9e7d5c088630e348048d1e73fc7657d3" translate="yes" xml:space="preserve">
          <source>For example,</source>
          <target state="translated">Por ejemplo,</target>
        </trans-unit>
        <trans-unit id="358ca920d00cef8e692577e7de482b71e23ffa72" translate="yes" xml:space="preserve">
          <source>For example:
You may put sensitive security methods in a 'security' package.
Then put a public class which accesses some of the security related code in this package but keep other security classes &lt;strong&gt;package private&lt;/strong&gt;.
Thus other developers will only be able to use the publicly available class from outside of this package (unless they change the modifier).
This is not a security feature, but will &lt;strong&gt;guide&lt;/strong&gt; usage.</source>
          <target state="translated">Por ejemplo: puede poner m&amp;eacute;todos de seguridad sensibles en un paquete de 'seguridad'. Luego, coloque una clase p&amp;uacute;blica que acceda a parte del c&amp;oacute;digo relacionado con la seguridad en este paquete, pero mantenga &lt;strong&gt;privado el paquete de&lt;/strong&gt; otras clases de seguridad. Por lo tanto, otros desarrolladores solo podr&amp;aacute;n usar la clase disponible p&amp;uacute;blicamente desde fuera de este paquete (a menos que cambien el modificador). Esta no es una caracter&amp;iacute;stica de seguridad, pero &lt;strong&gt;guiar&amp;aacute; el&lt;/strong&gt; uso.</target>
        </trans-unit>
        <trans-unit id="dc227021f08c9353ab45ce62f177cc6fd693f40c" translate="yes" xml:space="preserve">
          <source>From &lt;a href=&quot;http://tutorials.jenkov.com/java/access-modifiers.html&quot;&gt;Java Access Modifiers&lt;/a&gt;:</source>
          <target state="translated">Desde &lt;a href=&quot;http://tutorials.jenkov.com/java/access-modifiers.html&quot;&gt;modificadores de acceso Java&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="3bf7a6338bd5d5a3a5912a1ea99b4fa3eaa6fe75" translate="yes" xml:space="preserve">
          <source>From &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html&quot;&gt;Controlling Access to Members of a Class&lt;/a&gt; tutorials:</source>
          <target state="translated">Desde tutoriales de &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html&quot;&gt;control de acceso a miembros de una clase&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="c9146570be1c93d6b1aab81c70a95becda8f9183" translate="yes" xml:space="preserve">
          <source>Here is detailed answer</source>
          <target state="translated">Aquí está la respuesta detallada</target>
        </trans-unit>
        <trans-unit id="dab161dd919298ea5955c5ca83a5191994ed419b" translate="yes" xml:space="preserve">
          <source>Here's a better version of the table. (Future proof with a column for modules.)</source>
          <target state="translated">Aquí hay una versión mejor de la mesa.(A prueba de futuro con una columna para los módulos.)</target>
        </trans-unit>
        <trans-unit id="0e6d777d680c768e495440c452935c2860321ef2" translate="yes" xml:space="preserve">
          <source>Hope this helps!</source>
          <target state="translated">¡Espero que esto ayude!</target>
        </trans-unit>
        <trans-unit id="aa86ea3205f5b702b5c530cc16d177882fb58320" translate="yes" xml:space="preserve">
          <source>However, if the public class we are trying to access is in a different package, then the public class still need to be imported.</source>
          <target state="translated">Sin embargo,si la clase pública a la que intentamos acceder se encuentra en un paquete diferente,entonces la clase pública aún debe ser importada.</target>
        </trans-unit>
        <trans-unit id="3068a4b8c73e5abddb06c0c44f94cd1fc95d98ad" translate="yes" xml:space="preserve">
          <source>However, this is quite complicated, and for full details, &lt;a href=&quot;http://docs.oracle.com/javase/specs/jls/se7/html/jls-6.html#jls-6.6&quot;&gt;consult the Java Language Specification&lt;/a&gt;. (Yes, there have been compiler bugs in the past.)</source>
          <target state="translated">Sin embargo, esto es bastante complicado, y para m&amp;aacute;s detalles, &lt;a href=&quot;http://docs.oracle.com/javase/specs/jls/se7/html/jls-6.html#jls-6.6&quot;&gt;consulte la Especificaci&amp;oacute;n del lenguaje Java&lt;/a&gt; . (S&amp;iacute;, ha habido errores de compilaci&amp;oacute;n en el pasado).</target>
        </trans-unit>
        <trans-unit id="65c381ea7d6931f0058f4696124a3922c9a01d9e" translate="yes" xml:space="preserve">
          <source>If a class member is declared with keyword protected then in this case it is available ONLY to same class members</source>
          <target state="translated">Si un miembro de la clase es declarado con una palabra clave protegida,entonces en este caso está disponible SOLAMENTE para los mismos miembros de la clase.</target>
        </trans-unit>
        <trans-unit id="711d3ba82f3b647c7d5406080db3495d8ec4da48" translate="yes" xml:space="preserve">
          <source>If a class member is declared with keyword protected then it can be accessed from same class members, outside class members within the same package and inherited class members. If a class member is protected then it can NOT be accessed from outside package class unless the outside packaged class is inherited i.e. extends the other package superclass. But a protected class member is always available to same package classes it does NOT matter weather the same package class is inherited or NOT</source>
          <target state="translated">Si se declara a un miembro de la clase con una palabra clave protegida,se puede acceder a él desde los mismos miembros de la clase,desde miembros de la clase ajenos al mismo paquete y desde miembros de la clase heredados.Si un miembro de la clase está protegido,entonces no se puede acceder a él desde fuera de la clase del paquete a menos que la clase del paquete exterior sea heredada,es decir,que extienda la otra superclase del paquete.Pero un miembro de la clase protegida siempre está disponible para las mismas clases del paquete NO importa si la misma clase del paquete es heredada o NO</target>
        </trans-unit>
        <trans-unit id="00c3f094a058fa6a019b6a1d9bef50a5bac1da87" translate="yes" xml:space="preserve">
          <source>If a class member is declared with public then it can be accessed from anywhere</source>
          <target state="translated">Si un miembro de la clase se declara con público entonces se puede acceder a él desde cualquier lugar</target>
        </trans-unit>
        <trans-unit id="80f687d570b26042fb8176f323cd37d2559e1a3d" translate="yes" xml:space="preserve">
          <source>If on the contrary you set everything as &lt;strong&gt;public&lt;/strong&gt; it will not be clear what should or should not be accessed, which may lead to writing a lot of javadoc (which does not enforce anything via the compiler...).</source>
          <target state="translated">Si, por el contrario, establece todo como &lt;strong&gt;p&amp;uacute;blico&lt;/strong&gt; , no estar&amp;aacute; claro a qu&amp;eacute; se debe acceder o no, lo que puede conducir a escribir mucho javadoc (que no impone nada a trav&amp;eacute;s del compilador ...).</target>
        </trans-unit>
        <trans-unit id="8a060e14cb3887508691d17bc70585a7b1cb9b1f" translate="yes" xml:space="preserve">
          <source>If you try to access private members on one class in another will throw compile error. For example,</source>
          <target state="translated">Si intentas acceder a los miembros privados de una clase en otra,se producirá un error de compilación.Por ejemplo,</target>
        </trans-unit>
        <trans-unit id="31d88a3684ae0701668196799b25e5ac3e976cb2" translate="yes" xml:space="preserve">
          <source>If you want users to be able to customize behaviors, rather than making internals public so they can override them, it's often a better idea to shove those guts into an object and make that interface public.  That way they can simply plug in a new object.  For example, if you were writing a CD player and wanted the &quot;go find info about this CD&quot; bit customizable, rather than make those methods public you'd put all that functionality into its own object and make just your object getter/setter public.  In this way being stingy about exposing your guts encourages good composition and separation of concerns</source>
          <target state="translated">Si quieres que los usuarios puedan personalizar sus comportamientos,en lugar de hacer públicos los internos para que puedan anularlos,suele ser mejor idea meter esas tripas en un objeto y hacer pública esa interfaz.De esa manera pueden simplemente conectar un nuevo objeto.Por ejemplo,si estuvieras grabando un reproductor de CD y quisieras que el bit &quot;ve a buscar información sobre este CD&quot; fuera personalizable,en lugar de hacer públicos esos métodos,pondrías toda esa funcionalidad en su propio objeto y harías público sólo tu objeto &quot;gettersetter&quot;.De esta manera,ser tacaño en cuanto a exponer las tripas fomenta la buena composición y la separación de las preocupaciones</target>
        </trans-unit>
        <trans-unit id="7c7a886c87a6eb77fdc25a1035f8d6da53cf8656" translate="yes" xml:space="preserve">
          <source>In Java default is NOT an access modifier keyword. If a class member is declared without any access modifier keyword then in this case it is considered as default member. The default class member is always available to same package class members. But outside package class member can NOT access default class members even if outside classes are subclasses unlike protected members</source>
          <target state="translated">En Java,por defecto NO es una palabra clave modificadora del acceso.Si un miembro de la clase se declara sin ninguna palabra clave modificadora de acceso,entonces en este caso se considera como miembro por defecto.El miembro de la clase por defecto siempre está disponible para los miembros de la clase del mismo paquete.Pero el miembro de la clase del paquete NO puede acceder a los miembros de la clase por defecto aunque las clases externas sean subclases a diferencia de los miembros protegidos.</target>
        </trans-unit>
        <trans-unit id="fff3d91dbf347df5d37ad1067782bedfe095b46f" translate="yes" xml:space="preserve">
          <source>In Java, are there clear rules on when to use each of access modifiers, namely the default (package private), &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt; and &lt;code&gt;private&lt;/code&gt;, while making &lt;code&gt;class&lt;/code&gt; and &lt;code&gt;interface&lt;/code&gt; and dealing with inheritance?</source>
          <target state="translated">En Java, &amp;iquest;existen reglas claras sobre cu&amp;aacute;ndo usar cada uno de los modificadores de acceso, a saber, el predeterminado (paquete privado), &lt;code&gt;public&lt;/code&gt; , &lt;code&gt;protected&lt;/code&gt; y &lt;code&gt;private&lt;/code&gt; , mientras se hace la &lt;code&gt;class&lt;/code&gt; y la &lt;code&gt;interface&lt;/code&gt; y se trata la herencia?</target>
        </trans-unit>
        <trans-unit id="0a637c3e550bf7e3b47867e3e5c6bf98ec1df2d9" translate="yes" xml:space="preserve">
          <source>In non-static methods you can access directly because of &lt;strong&gt;this&lt;/strong&gt; reference (also in constructors)but to access in static methods you need to create object of the class.</source>
          <target state="translated">En m&amp;eacute;todos no est&amp;aacute;ticos, puede acceder directamente debido a &lt;strong&gt;esta&lt;/strong&gt; referencia (tambi&amp;eacute;n en constructores), pero para acceder en m&amp;eacute;todos est&amp;aacute;ticos necesita crear un objeto de la clase.</target>
        </trans-unit>
        <trans-unit id="f53b845e511550d070f01e7e1e45f0c6618de79e" translate="yes" xml:space="preserve">
          <source>In very short</source>
          <target state="translated">En muy poco tiempo</target>
        </trans-unit>
        <trans-unit id="0a280c9c0cc8b973c8bf1ae5a66442e357f07610" translate="yes" xml:space="preserve">
          <source>Inheritance. Successor &lt;code&gt;class&lt;/code&gt;(subclass) access modifier can be any. Successor &lt;code&gt;method&lt;/code&gt;(override) access modifier should be the same or expand it</source>
          <target state="translated">Herencia. El modificador de acceso a la &lt;code&gt;class&lt;/code&gt; sucesora (subclase) puede ser cualquiera. El modificador de acceso al &lt;code&gt;method&lt;/code&gt; sucesor (anulaci&amp;oacute;n) debe ser el mismo o expandirlo</target>
        </trans-unit>
        <trans-unit id="aacf14c4398ec9fe537fae7e92753856f34743cb" translate="yes" xml:space="preserve">
          <source>Inner classes</source>
          <target state="translated">Clases internas</target>
        </trans-unit>
        <trans-unit id="0ebd78cffc1684194f3fbbff5f4da1d70adec54f" translate="yes" xml:space="preserve">
          <source>Inside a class that is located in the same package where &lt;code&gt;foo()&lt;/code&gt; is defined (&lt;code&gt;fatherpackage&lt;/code&gt;):</source>
          <target state="translated">Dentro de una clase que se encuentra en el mismo paquete donde se define &lt;code&gt;foo()&lt;/code&gt; ( &lt;code&gt;fatherpackage&lt;/code&gt; ):</target>
        </trans-unit>
        <trans-unit id="4cb68522151730f7fe478771c760ac74a2dfdcd4" translate="yes" xml:space="preserve">
          <source>Inside a subclass, on the current instance via &lt;code&gt;this&lt;/code&gt; or &lt;code&gt;super&lt;/code&gt;:</source>
          <target state="translated">Dentro de una subclase, en la instancia actual a trav&amp;eacute;s de &lt;code&gt;this&lt;/code&gt; o &lt;code&gt;super&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="85ab384f0543ec447c88c37b720be06d8d5088de" translate="yes" xml:space="preserve">
          <source>Is an access to a member with this access specifier allowed?</source>
          <target state="translated">¿Se permite el acceso a un miembro con este especificador de acceso?</target>
        </trans-unit>
        <trans-unit id="68afd36f6cfde7e67dffed921baf25b1a58cbfec" translate="yes" xml:space="preserve">
          <source>It is all about &lt;strong&gt;encapsulation&lt;/strong&gt; (or as Joe Phillips stated, &lt;em&gt;least knowledge&lt;/em&gt;).</source>
          <target state="translated">Se trata de &lt;strong&gt;encapsulaci&amp;oacute;n&lt;/strong&gt; (o como dijo Joe Phillips, &lt;em&gt;menos conocimiento&lt;/em&gt; ).</target>
        </trans-unit>
        <trans-unit id="9428cccda535e253598eaa7cdab4627dc9261f0f" translate="yes" xml:space="preserve">
          <source>It's actually a bit more complicated than a simple grid shows. The grid tells you whether an access is allowed, but what exactly constitutes an access? Also, access levels interact with nested classes and inheritance in complex ways.</source>
          <target state="translated">En realidad es un poco más complicado de lo que muestra una simple cuadrícula.La cuadrícula te dice si un acceso está permitido,pero ¿qué constituye exactamente un acceso? Además,los niveles de acceso interactúan con las clases anidadas y la herencia de manera compleja.</target>
        </trans-unit>
        <trans-unit id="8d7eff0719ace3e48da815165c32c20e33793293" translate="yes" xml:space="preserve">
          <source>Java - Method accessibility inside package-private class?</source>
          <target state="translated">Java-Accesibilidad del método dentro de un paquete de clase privada?</target>
        </trans-unit>
        <trans-unit id="540bbbbbf4debb7face493bc9c0566a5b985f14c" translate="yes" xml:space="preserve">
          <source>Java access modifiers are used to provide access control in Java.</source>
          <target state="translated">Los modificadores de acceso de Java se utilizan para proporcionar control de acceso en Java.</target>
        </trans-unit>
        <trans-unit id="b326f17a3d2f7a73292bcff3aa33360fd288b8b2" translate="yes" xml:space="preserve">
          <source>Java access modifies which you can use</source>
          <target state="translated">El acceso a Java modifica lo que se puede utilizar</target>
        </trans-unit>
        <trans-unit id="2d507bfe48fd363710c7aa776449fca5b38c5c5a" translate="yes" xml:space="preserve">
          <source>Let's add a protected method &lt;code&gt;foo()&lt;/code&gt; to &lt;code&gt;Father&lt;/code&gt;.</source>
          <target state="translated">Agreguemos un m&amp;eacute;todo protegido &lt;code&gt;foo()&lt;/code&gt; a &lt;code&gt;Father&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="825e439c12e8399e15d6ef5cddfff02318859b29" translate="yes" xml:space="preserve">
          <source>Let's assume that you're a student at a university and you have a friend who's coming to visit you over the weekend. Suppose there exists a big statue of the university's founder in the middle of the campus.</source>
          <target state="translated">Supongamos que eres un estudiante de la universidad y tienes un amigo que viene a visitarte el fin de semana.Supongamos que existe una gran estatua del fundador de la universidad en medio del campus.</target>
        </trans-unit>
        <trans-unit id="dc55fb860e4b429ce495c5cbc9ba6248283659cf" translate="yes" xml:space="preserve">
          <source>Like you'd think, only the &lt;strong&gt;class&lt;/strong&gt; in which it is declared can see it.</source>
          <target state="translated">Como pensar&amp;iacute;as, solo la &lt;strong&gt;clase&lt;/strong&gt; en la que se declara puede verlo.</target>
        </trans-unit>
        <trans-unit id="8709df24bd586627893f85ebfa1884c2f82a5e55" translate="yes" xml:space="preserve">
          <source>List item</source>
          <target state="translated">Lista de artículos...</target>
        </trans-unit>
        <trans-unit id="c1398e89d57631598bc754b3d6e89f276728b298" translate="yes" xml:space="preserve">
          <source>Local variables and formal parameters cannot take access specifiers. Since they are inherently inaccessible to the outside according to scoping rules, they are effectively private.</source>
          <target state="translated">Las variables locales y los parámetros formales no pueden tomar los especificadores de acceso.Dado que son inherentemente inaccesibles al exterior según las reglas de alcance,son efectivamente privados.</target>
        </trans-unit>
        <trans-unit id="1b8528ca6c2239a069ccb77a16a61d04aaa3ad2b" translate="yes" xml:space="preserve">
          <source>Many languages find the hierarchical nature of public/protected/private to be too limiting and not in line with reality.  To that end there is the concept of a &lt;a href=&quot;http://en.wikipedia.org/wiki/Trait_class&quot;&gt;trait class&lt;/a&gt;, but that's another show.</source>
          <target state="translated">Muchos idiomas encuentran que la naturaleza jer&amp;aacute;rquica de p&amp;uacute;blico / protegido / privado es demasiado limitante y no est&amp;aacute; en l&amp;iacute;nea con la realidad. Para ese fin existe el concepto de una &lt;a href=&quot;http://en.wikipedia.org/wiki/Trait_class&quot;&gt;clase de rasgo&lt;/a&gt; , pero ese es otro espect&amp;aacute;culo.</target>
        </trans-unit>
        <trans-unit id="61039d9442076fb2e85d753a984b29c6d6e97613" translate="yes" xml:space="preserve">
          <source>Member is &lt;code&gt;private&lt;/code&gt;: Only if member is defined within the same class as calling code.</source>
          <target state="translated">El miembro es &lt;code&gt;private&lt;/code&gt; : solo si el miembro se define dentro de la misma clase que el c&amp;oacute;digo de llamada.</target>
        </trans-unit>
        <trans-unit id="9a6766c91a1dac9b515e329f73674dee7761caf9" translate="yes" xml:space="preserve">
          <source>Member is &lt;code&gt;protected&lt;/code&gt;: Same package, or if member is defined in a superclass of the class containing the calling code.</source>
          <target state="translated">El miembro est&amp;aacute; &lt;code&gt;protected&lt;/code&gt; : mismo paquete, o si el miembro est&amp;aacute; definido en una superclase de la clase que contiene el c&amp;oacute;digo de llamada.</target>
        </trans-unit>
        <trans-unit id="56756b869829e0a2b3e5809cfb44466392b0d8dd" translate="yes" xml:space="preserve">
          <source>Member is &lt;code&gt;public&lt;/code&gt;: Yes.</source>
          <target state="translated">El miembro es &lt;code&gt;public&lt;/code&gt; : s&amp;iacute;.</target>
        </trans-unit>
        <trans-unit id="333249b7b9e011c07bbf34cd6918aeb87c291c5d" translate="yes" xml:space="preserve">
          <source>Member is package private: Only if the calling code is within the member's immediately enclosing package.</source>
          <target state="translated">El miembro es un paquete privado:Sólo si el código de llamada está dentro del paquete que el miembro incluye inmediatamente.</target>
        </trans-unit>
        <trans-unit id="46e6a422e152e53fcd52afdc532361e67997177b" translate="yes" xml:space="preserve">
          <source>Methods, variables and constructors that are declared private can only be accessed within the declared class itself. The private access modifier is the most restrictive access level. Class and interfaces cannot be private.</source>
          <target state="translated">Los métodos,variables y constructores que se declaran privados sólo pueden accederse dentro de la propia clase declarada.El modificador de acceso privado es el nivel de acceso más restrictivo.La clase y las interfaces no pueden ser privadas.</target>
        </trans-unit>
        <trans-unit id="335faa2a06faaaaddaf19dca7a6e552702624138" translate="yes" xml:space="preserve">
          <source>Methods,Variables and Constructors</source>
          <target state="translated">Métodos,variables y constructores</target>
        </trans-unit>
        <trans-unit id="89cb26c7ec8c16073c200078d9348aed52d6c686" translate="yes" xml:space="preserve">
          <source>My two cents :)</source>
          <target state="translated">Mis dos centavos :)</target>
        </trans-unit>
        <trans-unit id="87a523f027d0ba7adab70824c7b1fb94c7132d6f" translate="yes" xml:space="preserve">
          <source>Next, you want to take your friend to your dorm, but for that you need to register him as a visitor. This means that he gets an access pass (which is the same as yours) to get into various buildings on campus. This would make his access card as &lt;strong&gt;PROTECTED&lt;/strong&gt;.</source>
          <target state="translated">Luego, desea llevar a su amigo a su dormitorio, pero para eso debe registrarlo como visitante. Esto significa que obtiene un pase de acceso (que es el mismo que el suyo) para ingresar a varios edificios en el campus. Esto har&amp;iacute;a que su tarjeta de acceso fuera &lt;strong&gt;PROTEGIDA&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="7ec331f3044739b47bc605e4558099cf08d010f7" translate="yes" xml:space="preserve">
          <source>Normally, member variables are defined private, but member methods are public.</source>
          <target state="translated">Normalmente,las variables de los miembros se definen como privadas,pero los métodos de los miembros son públicos.</target>
        </trans-unit>
        <trans-unit id="c6238ff0e30b27995906139dc0f1043520c044df" translate="yes" xml:space="preserve">
          <source>Note: &lt;em&gt;This is just a &lt;strong&gt;supplement&lt;/strong&gt; for the accepted answer.&lt;/em&gt;</source>
          <target state="translated">Nota: &lt;em&gt;Esto es solo un &lt;strong&gt;suplemento&lt;/strong&gt; para la respuesta aceptada.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="adb9aaea02b1cff0a3c213ab075fcb4d010034c7" translate="yes" xml:space="preserve">
          <source>Note: Declaring data members with private access specifier is known as &lt;strong&gt;data hiding.&lt;/strong&gt;</source>
          <target state="translated">Nota: la declaraci&amp;oacute;n de miembros de datos con un especificador de acceso privado se conoce como &lt;strong&gt;ocultaci&amp;oacute;n de datos.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="70440046a3dc2e079f23ee1c57dfa76669b732aa" translate="yes" xml:space="preserve">
          <source>Notes</source>
          <target state="translated">Notes</target>
        </trans-unit>
        <trans-unit id="32500c238248244eb78c9f14aa99e41bd6942ed2" translate="yes" xml:space="preserve">
          <source>Now the confusion arises when it comes to &lt;code&gt;default&lt;/code&gt; and &lt;code&gt;protected&lt;/code&gt;</source>
          <target state="translated">Ahora surge la confusi&amp;oacute;n cuando se trata de &lt;code&gt;default&lt;/code&gt; y &lt;code&gt;protected&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bf67bd37c73d81bc5307563f78c833d29fe10889" translate="yes" xml:space="preserve">
          <source>Often times I've realized that remembering the basic concepts of any language can made possible by creating real-world analogies. Here is my analogy for understanding access modifiers in Java:</source>
          <target state="translated">A menudo me he dado cuenta de que recordar los conceptos básicos de cualquier idioma puede ser posible creando analogías del mundo real.Aquí está mi analogía para entender los modificadores de acceso en Java:</target>
        </trans-unit>
        <trans-unit id="97a14c4e2738d6c2804656e0a006451d5b27f196" translate="yes" xml:space="preserve">
          <source>On an reference whose type is the parent class and it is &lt;em&gt;inside&lt;/em&gt; the package where &lt;code&gt;foo()&lt;/code&gt; is defined (&lt;code&gt;fatherpackage&lt;/code&gt;) [This can be included inside context no. 1]:</source>
          <target state="translated">En una referencia cuyo tipo es la clase padre y est&amp;aacute; &lt;em&gt;dentro&lt;/em&gt; del paquete donde se define &lt;code&gt;foo()&lt;/code&gt; ( &lt;code&gt;fatherpackage&lt;/code&gt; ) [Esto puede incluirse dentro del contexto no. 1]:</target>
        </trans-unit>
        <trans-unit id="b47a88794e5bc9eb69dfcdd8c1454a1d628c58f2" translate="yes" xml:space="preserve">
          <source>On an reference whose type is the parent class and it is &lt;em&gt;outside&lt;/em&gt; the package where &lt;code&gt;foo()&lt;/code&gt; is defined (&lt;code&gt;fatherpackage&lt;/code&gt;):</source>
          <target state="translated">En una referencia cuyo tipo es la clase padre y est&amp;aacute; &lt;em&gt;fuera&lt;/em&gt; del paquete donde se define &lt;code&gt;foo()&lt;/code&gt; ( &lt;code&gt;fatherpackage&lt;/code&gt; ):</target>
        </trans-unit>
        <trans-unit id="c64917ce44fe5662d78c50ec0a072083dbcd8daf" translate="yes" xml:space="preserve">
          <source>On an reference whose type is the same class:</source>
          <target state="translated">En una referencia cuyo tipo es la misma clase:</target>
        </trans-unit>
        <trans-unit id="1735879fe3a2e22b9b283485856a39553a8ac889" translate="yes" xml:space="preserve">
          <source>Only having private constructors also means that the class cannot be subclassed externally, since Java requires a subclass's constructors to implicitly or explicitly call a superclass constructor. (It can, however, contain a nested class that subclasses it.)</source>
          <target state="translated">El hecho de tener constructores privados también significa que la clase no puede ser subclasificada externamente,ya que Java requiere que los constructores de una subclase llamen implícita o explícitamente a un constructor de superclase.(Sin embargo,puede contener una clase anidada que la subclasifica.)</target>
        </trans-unit>
        <trans-unit id="1d75774c0f96b6ee44eb6643c9fea71b50b90ea8" translate="yes" xml:space="preserve">
          <source>Order</source>
          <target state="translated">Order</target>
        </trans-unit>
        <trans-unit id="59e00bdab1723eeefe789e083d87acb6847d6733" translate="yes" xml:space="preserve">
          <source>Output: Hello</source>
          <target state="translated">Salida:Hola</target>
        </trans-unit>
        <trans-unit id="67a5927c5cce6b22e97f84af83e9faa9704ee973" translate="yes" xml:space="preserve">
          <source>Output:Hello</source>
          <target state="translated">Output:Hello</target>
        </trans-unit>
        <trans-unit id="48db52b778fccd255894481994bdacd74ee198b0" translate="yes" xml:space="preserve">
          <source>Over time you'll develop a sense for when to make some classes package-private and when to declare certain methods protected for use in subclasses.</source>
          <target state="translated">Con el tiempo desarrollarás un sentido de cuándo hacer algunas clases paquete-privado y cuándo declarar ciertos métodos protegidos para su uso en subclases.</target>
        </trans-unit>
        <trans-unit id="2d1fefb5c50582321c4d75309559ed4fb1fb5c62" translate="yes" xml:space="preserve">
          <source>Package Private</source>
          <target state="translated">Paquete privado</target>
        </trans-unit>
        <trans-unit id="02d690f0069219ba265f693b9aa34bc858bc7b64" translate="yes" xml:space="preserve">
          <source>Package Private + can be seen by subclasses or package member.</source>
          <target state="translated">El Paquete Privado+puede ser visto por las subclases o el miembro del paquete.</target>
        </trans-unit>
        <trans-unit id="67edadea70b35c0bde5fedf6ce3b8d7307338c28" translate="yes" xml:space="preserve">
          <source>Personally, I stick with just &quot;private&quot; and &quot;public&quot;.  Many OO languages just have that.  &quot;Protected&quot; can be handy, but it's really a cheat.  Once an interface is more than private it's outside of your control and you have to go looking in other people's code to find uses.</source>
          <target state="translated">Personalmente,me quedo con sólo &quot;privado&quot; y &quot;público&quot;.Muchos idiomas tienen eso.&quot;Protegido&quot; puede ser útil,pero es realmente un engaño.Una vez que una interfaz es más que privada,está fuera de tu control y tienes que buscar en el código de otras personas para encontrar usos.</target>
        </trans-unit>
        <trans-unit id="b092b192a4d648e172b4a375b0666e778cde5015" translate="yes" xml:space="preserve">
          <source>Please note:</source>
          <target state="translated">Por favor,tenga en cuenta:</target>
        </trans-unit>
        <trans-unit id="237dfa0a21c8e17a7276cf161eef7e0fba067c47" translate="yes" xml:space="preserve">
          <source>Private</source>
          <target state="translated">Private</target>
        </trans-unit>
        <trans-unit id="73c2c05c567e0abdbe3ba13d814ebd8d7a054684" translate="yes" xml:space="preserve">
          <source>Private access modifier - private:</source>
          <target state="translated">Modificador de acceso privado-privado:</target>
        </trans-unit>
        <trans-unit id="47498edf610d2474479d092eef6b21971a8e54cb" translate="yes" xml:space="preserve">
          <source>Private is not accessible outside the class
Default is accessible only in the package.
Protected in package as well as any class which extends it.
Public is open for all.</source>
          <target state="translated">Privado no es accesible fuera de la clase Por defecto es accesible sólo en el paquete.Protegido en el paquete así como cualquier clase que lo extienda.Público está abierto para todos.</target>
        </trans-unit>
        <trans-unit id="28531336563e1f3883b87d858af447e561471bd7" translate="yes" xml:space="preserve">
          <source>Protected</source>
          <target state="translated">Protected</target>
        </trans-unit>
        <trans-unit id="07dc0891cffa12c73230979cda26f3ea127ced21" translate="yes" xml:space="preserve">
          <source>Protected access gives the subclass a chance to use the helper method or variable, while preventing a nonrelated class from trying to use it.</source>
          <target state="translated">El acceso protegido da a la subclase la oportunidad de utilizar el método o variable de ayuda,a la vez que impide que una clase no relacionada intente utilizarlo.</target>
        </trans-unit>
        <trans-unit id="427cebdbe94bd945eeb72a25018bea95d6a0d3e4" translate="yes" xml:space="preserve">
          <source>Protected access modifier - protected:</source>
          <target state="translated">Modificador de acceso protegido-protegido:</target>
        </trans-unit>
        <trans-unit id="dc5eb704bbcae1aff4efb71c55461d47767dabe7" translate="yes" xml:space="preserve">
          <source>Public</source>
          <target state="translated">Public</target>
        </trans-unit>
        <trans-unit id="373d5d53b0dab15eec7ea7ad71ce7aec9d662c30" translate="yes" xml:space="preserve">
          <source>Public Protected Default and private are access modifiers.</source>
          <target state="translated">Public Protected Default y private son modificadores de acceso.</target>
        </trans-unit>
        <trans-unit id="5df8a0072d803165a9f31208c9db4592974fa499" translate="yes" xml:space="preserve">
          <source>Public access modifier - public:</source>
          <target state="translated">Modificador de acceso público-público:</target>
        </trans-unit>
        <trans-unit id="483bf2075c12023a5e849d12a42027be89c5e94b" translate="yes" xml:space="preserve">
          <source>Published</source>
          <target state="translated">Published</target>
        </trans-unit>
        <trans-unit id="79337cebe0b8469f44ee26dd522be3c1abbde46b" translate="yes" xml:space="preserve">
          <source>References links</source>
          <target state="translated">Enlaces de referencia</target>
        </trans-unit>
        <trans-unit id="23c4f19c70076332ae76378be5204b96f6c98f0f" translate="yes" xml:space="preserve">
          <source>Related Answers</source>
          <target state="translated">Respuestas relacionadas</target>
        </trans-unit>
        <trans-unit id="56eee76535b8adfa9fe3329a7d09b87c34cc1f70" translate="yes" xml:space="preserve">
          <source>Related: &lt;a href=&quot;https://stackoverflow.com/questions/267781/java-class-accessibility&quot;&gt;Java Class Accessibility&lt;/a&gt;</source>
          <target state="translated">Relacionado: &lt;a href=&quot;https://stackoverflow.com/questions/267781/java-class-accessibility&quot;&gt;Accesibilidad de clase Java&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="17d8ed1a776981997da35f245b5fd1b0aca174fa" translate="yes" xml:space="preserve">
          <source>So bottom line is, &lt;strong&gt;protected members can be accessed in other packages, only if some class from this other package, extends class enclosing this protected member and protected member is accessed on 'this' reference or explicit instances of extended class, within definition of extended class.&lt;/strong&gt;</source>
          <target state="translated">Entonces, en &lt;strong&gt;resumen, se puede acceder a los miembros protegidos en otros paquetes, solo si alguna clase de este otro paquete, extiende la clase que encierra a este miembro protegido y se accede al miembro protegido en 'esta' referencia o instancias expl&amp;iacute;citas de clase extendida, dentro de la definici&amp;oacute;n de extendida clase.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="21d3937db339f6e43775069049c209555c9447c1" translate="yes" xml:space="preserve">
          <source>So, rule of thumb is to make things only as visible as they have to be.  Start with private and only add more visibility as needed.  Only make public that which is absolutely necessary for the user to know, every detail you make public cramps your ability to redesign the system.</source>
          <target state="translated">Por lo tanto,la regla general es hacer las cosas sólo tan visibles como tienen que ser.Empieza con lo privado y sólo añade más visibilidad según sea necesario.Sólo haz público lo que es absolutamente necesario para que el usuario sepa,cada detalle que hagas público obstaculiza tu capacidad de rediseñar el sistema.</target>
        </trans-unit>
        <trans-unit id="154dbc9264721e755cac5da7fa4be2894fd9a2ab" translate="yes" xml:space="preserve">
          <source>Some related questions:</source>
          <target state="translated">Algunas preguntas relacionadas:</target>
        </trans-unit>
        <trans-unit id="4b2dc2e152a6049bc5dd339a5aaa36977da34901" translate="yes" xml:space="preserve">
          <source>Source : &lt;a href=&quot;http://www.trytoprogram.com/cplusplus-programming/access-specifiers/&quot;&gt; Access Specifiers &amp;ndash; Private, Public and Protected
&lt;/a&gt;</source>
          <target state="translated">Fuente: &lt;a href=&quot;http://www.trytoprogram.com/cplusplus-programming/access-specifiers/&quot;&gt;Especificadores de acceso: privados, p&amp;uacute;blicos y protegidos&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c03da846ed372f26ddbd2660e72f7d8755c812d7" translate="yes" xml:space="preserve">
          <source>Start with the most restrictive (private) and see if you need less restrictive modifiers later on.</source>
          <target state="translated">Empiece con el más restrictivo (privado)y vea si necesita modificadores menos restrictivos más adelante.</target>
        </trans-unit>
        <trans-unit id="12b71c3e0fe5f7c0b8d17cc03186e281412da4a8" translate="yes" xml:space="preserve">
          <source>Summary</source>
          <target state="translated">Summary</target>
        </trans-unit>
        <trans-unit id="2db7bd0663d3a295c6b4c5b37588b2c72bf5eb2d" translate="yes" xml:space="preserve">
          <source>Swift access modifiers</source>
          <target state="translated">Modificadores de acceso rápido</target>
        </trans-unit>
        <trans-unit id="d3b8c8a1daa787e5c27587774294ce4f3fd4a1b6" translate="yes" xml:space="preserve">
          <source>The &quot;default&quot; access (specified by the absence of a keyword) is also called &lt;a href=&quot;https://stackoverflow.com/questions/5416074/java-package-private-terminology&quot;&gt;&lt;strong&gt;package-private&lt;/strong&gt;&lt;/a&gt;. Exception: in an interface, no modifier means public access; modifiers other than public are forbidden. Enum constants are always public.</source>
          <target state="translated">El acceso &quot;predeterminado&quot; (especificado por la ausencia de una palabra clave) tambi&amp;eacute;n se denomina &lt;a href=&quot;https://stackoverflow.com/questions/5416074/java-package-private-terminology&quot;&gt;&lt;strong&gt;paquete privado&lt;/strong&gt;&lt;/a&gt; . Excepci&amp;oacute;n: en una interfaz, ning&amp;uacute;n modificador significa acceso p&amp;uacute;blico; Los modificadores que no sean p&amp;uacute;blicos est&amp;aacute;n prohibidos. Las constantes de enumeraci&amp;oacute;n son siempre p&amp;uacute;blicas.</target>
        </trans-unit>
        <trans-unit id="2586c08972816888f55708f755c54e0e86ec9ba4" translate="yes" xml:space="preserve">
          <source>The access specifiers can be strictly ordered</source>
          <target state="translated">Los especificadores de acceso pueden ser ordenados estrictamente</target>
        </trans-unit>
        <trans-unit id="df6efd781f79998f9f898aa9e074a442cdff5a02" translate="yes" xml:space="preserve">
          <source>The difference can be found in the links already provided but which one to use usually comes down to the &quot;Principle of Least Knowledge&quot;. Only allow the least visibility that is needed.</source>
          <target state="translated">La diferencia se encuentra en los enlaces ya proporcionados,pero el que se debe utilizar se suele reducir al &quot;Principio del Conocimiento Mínimo&quot;.Sólo permite la menor visibilidad que se necesita.</target>
        </trans-unit>
        <trans-unit id="679e82b3df66656fd5d1f4c9549d8ab9122877e6" translate="yes" xml:space="preserve">
          <source>The first data column indicates whether the class itself has access to
  the member defined by the access level. As you can see, a class always
  has access to its own members. The second column indicates whether
  classes in the same package as the class (regardless of their
  parentage) have access to the member. The third column indicates
  whether subclasses of the class declared outside this package have
  access to the member. The fourth column indicates whether all classes
  have access to the member.</source>
          <target state="translated">La primera columna de datos indica si la clase misma tiene acceso al miembro definido por el nivel de acceso.Como pueden ver,una clase siempre tiene acceso a sus propios miembros.La segunda columna indica si las clases del mismo paquete que la clase (independientemente de su parentesco)tienen acceso al miembro.La tercera columna indica si las subclases de la clase declarada fuera de este paquete tienen acceso al miembro.La cuarta columna indica si todas las clases tienen acceso al miembro.</target>
        </trans-unit>
        <trans-unit id="c3ef407bfffcf2e4ffd72f9afb533124d421f084" translate="yes" xml:space="preserve">
          <source>The following situations are not valid.</source>
          <target state="translated">Las siguientes situaciones no son válidas.</target>
        </trans-unit>
        <trans-unit id="6e0ae3808955f5f848f420a39b6f2822eb0679d1" translate="yes" xml:space="preserve">
          <source>The following table shows the access to members permitted by each
  modifier.</source>
          <target state="translated">En el siguiente cuadro se muestra el acceso a los miembros permitido por cada modificador.</target>
        </trans-unit>
        <trans-unit id="6c3b0509347cd9fae8904b92da0d10e55784f19a" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;foo()&lt;/code&gt; can be called in 4 contexts:</source>
          <target state="translated">El m&amp;eacute;todo &lt;code&gt;foo()&lt;/code&gt; se puede llamar en 4 contextos:</target>
        </trans-unit>
        <trans-unit id="d356b3ec320b607fd260202ec32d80a6d8ebd453" translate="yes" xml:space="preserve">
          <source>The most misunderstood access modifier in Java is &lt;code&gt;protected&lt;/code&gt;. We know that it's similar to the default modifier with one exception in which subclasses can see it. But how? Here is an example which hopefully clarifies the confusion:</source>
          <target state="translated">El modificador de acceso m&amp;aacute;s incomprendido en Java est&amp;aacute; &lt;code&gt;protected&lt;/code&gt; . Sabemos que es similar al modificador predeterminado con una excepci&amp;oacute;n en la que las subclases pueden verlo. &amp;iquest;Pero c&amp;oacute;mo? Aqu&amp;iacute; hay un ejemplo que, con suerte, aclara la confusi&amp;oacute;n:</target>
        </trans-unit>
        <trans-unit id="be00e0232f8d8959670788550d4e065b0397435d" translate="yes" xml:space="preserve">
          <source>The protected access modifier cannot be applied to class and interfaces. Methods, fields can be declared protected, however methods and fields in a interface cannot be declared protected.</source>
          <target state="translated">El modificador de acceso protegido no puede aplicarse a las clases e interfaces.Los métodos y los campos pueden declararse protegidos,pero los métodos y los campos de una interfaz no pueden declararse protegidos.</target>
        </trans-unit>
        <trans-unit id="169ba09f6c249dafbff995f433c80a45b0644db7" translate="yes" xml:space="preserve">
          <source>They are meant for encapsulation, or hiding and showing contents of the class.</source>
          <target state="translated">Están destinados a ser encapsulados,o a ocultar y mostrar el contenido de la clase.</target>
        </trans-unit>
        <trans-unit id="682ffc8981fc2bc88a6aeadf052aa2ee7fc48504" translate="yes" xml:space="preserve">
          <source>This access is more restricted than public and protected, but less restricted than private.</source>
          <target state="translated">Este acceso está más restringido que el público y protegido,pero menos restringido que el privado.</target>
        </trans-unit>
        <trans-unit id="ee4eefa591c2b5d729b2fadc0b84fbb3c332905c" translate="yes" xml:space="preserve">
          <source>This is related to Java &lt;a href=&quot;https://en.wikipedia.org/wiki/Access_modifiers&quot;&gt;Access Modifiers&lt;/a&gt;.</source>
          <target state="translated">Esto est&amp;aacute; relacionado con los &lt;a href=&quot;https://en.wikipedia.org/wiki/Access_modifiers&quot;&gt;modificadores de acceso&lt;/a&gt; Java.</target>
        </trans-unit>
        <trans-unit id="198b4459a701114bd5c61fdbe1c4faf71ffb4fe3" translate="yes" xml:space="preserve">
          <source>This is where the idea of &quot;published&quot; comes in.  Changing an interface (refactoring it) requires that you find all the code which is using it and change that, too.  If the interface is private, well no problem.  If it's protected you have to go find all your subclasses.  If it's public you have to go find all the code which uses your code.  Sometimes this is possible, for example if you're working on corporate code that's for internal use only it doesn't matter if an interface is public.  You can grab all the code out of the corporate repository.  But if an interface is &quot;published&quot;, if there is code using it outside your control, then you're hosed.  You must support that interface or risk breaking code.  Even protected interfaces can be considered published (which is why I don't bother with protected).</source>
          <target state="translated">Aquí es donde entra la idea de &quot;publicado&quot;.Cambiar una interfaz (refactorizarla)requiere que encuentres todo el código que la está usando y cambiar eso también.Si la interfaz es privada,bueno,no hay problema.Si está protegida tienes que ir a buscar todas tus subclases.Si es pública,tienes que encontrar todo el código que utiliza tu código.A veces esto es posible,por ejemplo si estás trabajando en código corporativo que es sólo para uso interno,no importa si una interfaz es pública.Puedes tomar todo el código del repositorio corporativo.Pero si una interfaz es &quot;publicada&quot;,si hay código que la usa fuera de su control,entonces está &quot;hostigado&quot;.Debes apoyar esa interfaz o arriesgarte a romper el código.Incluso las interfaces protegidas pueden considerarse publicadas (por eso no me molesto en protegerlas).</target>
        </trans-unit>
        <trans-unit id="6b5d1e74f2eea7ead15ccf29069baea5d0f69c05" translate="yes" xml:space="preserve">
          <source>This page writes well about the protected &amp;amp; default access modifier</source>
          <target state="translated">Esta p&amp;aacute;gina escribe bien sobre el modificador de acceso protegido y predeterminado</target>
        </trans-unit>
        <trans-unit id="eeb5424c66259e76273a69d238cdcc3c9e66fd22" translate="yes" xml:space="preserve">
          <source>To access if you are in same package you can access directly, but if you are in another package then you can create an object of the class.</source>
          <target state="translated">Para acceder si estás en el mismo paquete puedes acceder directamente,pero si estás en otro paquete puedes crear un objeto de la clase.</target>
        </trans-unit>
        <trans-unit id="14ae94913500b0661223e0efa7a5e7ca28857425" translate="yes" xml:space="preserve">
          <source>To access protected field defined in base class you can create object of child class.</source>
          <target state="translated">Para acceder al campo protegido definido en la clase base se puede crear el objeto de la clase infantil.</target>
        </trans-unit>
        <trans-unit id="0ad466926d52efdf7885ec86fe714f4f216f7680" translate="yes" xml:space="preserve">
          <source>To access you can create an object of the class. But you can not access this variable outside of the package.</source>
          <target state="translated">Para acceder puedes crear un objeto de la clase.Pero no puedes acceder a esta variable fuera del paquete.</target>
        </trans-unit>
        <trans-unit id="1fb58ec9231bc98bca307ae528c066d345048ea9" translate="yes" xml:space="preserve">
          <source>Top level class(first level scope) can be &lt;code&gt;public&lt;/code&gt; and &lt;code&gt;default&lt;/code&gt;. &lt;code&gt;Nested class&lt;/code&gt;&lt;a href=&quot;https://stackoverflow.com/a/59220181/4770877&quot;&gt;&lt;sup&gt;[About]&lt;/sup&gt;&lt;/a&gt; can have any of them</source>
          <target state="translated">La clase de nivel superior (alcance de primer nivel) puede ser &lt;code&gt;public&lt;/code&gt; y &lt;code&gt;default&lt;/code&gt; . &lt;code&gt;Nested class&lt;/code&gt; &lt;a href=&quot;https://stackoverflow.com/a/59220181/4770877&quot;&gt;&lt;sup&gt;[Acerca de]&lt;/sup&gt;&lt;/a&gt; puede tener cualquiera de ellos</target>
        </trans-unit>
        <trans-unit id="384f7244462f630639626ae0b32c7bdfb001d0ba" translate="yes" xml:space="preserve">
          <source>Using the private modifier is the main way that an object encapsulates itself and hides data from the outside world.</source>
          <target state="translated">El uso del modificador privado es la principal forma en que un objeto se encapsula a sí mismo y oculta datos del mundo exterior.</target>
        </trans-unit>
        <trans-unit id="ab4e39861714a7bba115c44241b41a0b85300324" translate="yes" xml:space="preserve">
          <source>Variables and methods can be declared without any modifiers that are called. Default examples:</source>
          <target state="translated">Las variables y los métodos pueden ser declarados sin los modificadores que se llaman.Ejemplos por defecto:</target>
        </trans-unit>
        <trans-unit id="34077ede14eaaebed19ee0bede3eea6d7f3eb11e" translate="yes" xml:space="preserve">
          <source>Variables that are declared private can be accessed outside the class if public getter methods are present in the class.</source>
          <target state="translated">Las variables que se declaran privadas pueden ser accedidas fuera de la clase si los métodos de obtención pública están presentes en la clase.</target>
        </trans-unit>
        <trans-unit id="0a50d48aa080a7c6783e40cbfdb6e97dd79fc57b" translate="yes" xml:space="preserve">
          <source>Variables, methods and constructors which are declared protected in a superclass can be accessed only by the subclasses in another package or any class within the package of the protected members' class.</source>
          <target state="translated">Las variables,métodos y constructores que se declaran protegidos en una superclase sólo pueden ser accedidos por las subclases de otro paquete o cualquier clase dentro del paquete de la clase de los miembros protegidos.</target>
        </trans-unit>
        <trans-unit id="12f084bc06fb25984a713a05ac96ec8fd8c87e3e" translate="yes" xml:space="preserve">
          <source>Visible outside the code I control.  (While not Java syntax, it is important for this discussion).</source>
          <target state="translated">Visible fuera del código que controlo.(Aunque no es la sintaxis de Java,es importante para esta discusión).</target>
        </trans-unit>
        <trans-unit id="14bcee1179ba8505e906f60fb57592380df65a40" translate="yes" xml:space="preserve">
          <source>Visible to the class only (&lt;strong&gt;private&lt;/strong&gt;).</source>
          <target state="translated">Visible solo para la clase ( &lt;strong&gt;privado&lt;/strong&gt; ).</target>
        </trans-unit>
        <trans-unit id="7f09f62b5791cfabbdd6e4c34df55d9bdb437435" translate="yes" xml:space="preserve">
          <source>Visible to the package and all subclasses (&lt;strong&gt;protected&lt;/strong&gt;).</source>
          <target state="translated">Visible para el paquete y todas las subclases ( &lt;strong&gt;protegido&lt;/strong&gt; ).</target>
        </trans-unit>
        <trans-unit id="54ef9402017fe93855f3b30d829bfd206f6e7f50" translate="yes" xml:space="preserve">
          <source>Visible to the package. The default. No modifiers are needed.</source>
          <target state="translated">Visible para el paquete.El valor por defecto.No se necesitan modificadores.</target>
        </trans-unit>
        <trans-unit id="ca587ffd93b05980f46dc7a85340bbf8390ffe51" translate="yes" xml:space="preserve">
          <source>Visible to the world (&lt;strong&gt;public&lt;/strong&gt;).</source>
          <target state="translated">Visible para el mundo ( &lt;strong&gt;p&amp;uacute;blico&lt;/strong&gt; ).</target>
        </trans-unit>
        <trans-unit id="546b60f326b8d6a60c507410a570c1777530716c" translate="yes" xml:space="preserve">
          <source>We all use method and member modifiers like private, public, ... but one thing too few developers do is use packages to &lt;strong&gt;organize&lt;/strong&gt; code logically.</source>
          <target state="translated">Todos usamos modificadores de m&amp;eacute;todo y miembros como privado, p&amp;uacute;blico, ... pero una cosa que muy pocos desarrolladores hacen es usar paquetes para &lt;strong&gt;organizar el&lt;/strong&gt; c&amp;oacute;digo l&amp;oacute;gicamente.</target>
        </trans-unit>
        <trans-unit id="0e9aa520836ae4a575fd28c23d90b4382f8165ec" translate="yes" xml:space="preserve">
          <source>We cannot Override the Static fields.if you try to override it does not show any error 
but it doesnot work what we except.</source>
          <target state="translated">No podemos anular los campos estáticos.Si intentas anularlos no muestra ningún error pero no funciona lo que nosotros excepto.</target>
        </trans-unit>
        <trans-unit id="e35308834027bed876c4f7f710ec90003c87538e" translate="yes" xml:space="preserve">
          <source>What access specifiers apply to</source>
          <target state="translated">A qué especificadores de acceso se aplican</target>
        </trans-unit>
        <trans-unit id="d80aa50837cce957e5ce3fb6bafde8063b8ddb68" translate="yes" xml:space="preserve">
          <source>What is the difference between public, protected, package-private and private in Java</source>
          <target state="translated">¿Cuál es la diferencia entre público,protegido,paquete-privado y privado en Java</target>
        </trans-unit>
        <trans-unit id="b46b79fb2f1824c3f83b93eb49daf91f0e91d07b" translate="yes" xml:space="preserve">
          <source>When exposing members ask yourself if you are exposing representation choices or abstraction choices. The first is something you want to avoid as it will introduce too many dependencies on the actual representation rather than on its observable behavior.</source>
          <target state="translated">Cuando exponga a los miembros pregúntese si está exponiendo opciones de representación o de abstracción.La primera es algo que quieres evitar ya que introducirá demasiadas dependencias en la representación real en vez de en su comportamiento observable.</target>
        </trans-unit>
        <trans-unit id="e2edee9f094279931ccc7f4853b4b3611fed2c3b" translate="yes" xml:space="preserve">
          <source>When should you use what?  The whole idea is encapsulation to hide information.  As much as possible you want to hide the detail of how something is done from your users.  Why?  Because then you can change them later and not break anybody's code.  This lets you optimize, refactor, redesign and fix bugs without worry that someone was using that code you just overhauled.</source>
          <target state="translated">¿Cuándo deberías usar qué? La idea es la encapsulación para ocultar información.En la medida de lo posible quieres ocultar a tus usuarios los detalles de cómo se hace algo.¿Por qué? Porque así puedes cambiarlos más tarde y no romper el código de nadie.Esto te permite optimizar,refactorizar,rediseñar y corregir errores sin preocuparte de que alguien esté usando ese código que acabas de revisar.</target>
        </trans-unit>
        <trans-unit id="79af6581bf04a23396460cd17b21987c89702dec" translate="yes" xml:space="preserve">
          <source>When you are developing some package and hence some class (say Class1) within it, then you should use protected access specifier for data member within Class1 if you don't want this member to be accessed outside your package (say in package of consumer of your package i.e. client who is using your APIs) in general, but you want to make an exception and allow access to this member only if client writes class say Class2 that extends Class1. So, in general, protected members will be accessible on 'this' reference in derived classes i.e. Class2 and also on explicit instances of Class2.</source>
          <target state="translated">Cuando estás desarrollando algún paquete y por lo tanto alguna clase (digamos Clase1)dentro de él,entonces deberías usar el especificador de acceso protegido para el miembro de datos dentro de la Clase1 si no quieres que se acceda a este miembro fuera de tu paquete (digamos en el paquete del consumidor de tu paquete,es decir,el cliente que está usando tus APIs)en general,pero quieres hacer una excepción y permitir el acceso a este miembro sólo si el cliente escribe clase digamos Clase2 que extienda la Clase1.Así que,en general,los miembros protegidos serán accesibles en &quot;esta&quot; referencia en clases derivadas,es decir,Clase2 y también en instancias explícitas de Clase2.</target>
        </trans-unit>
        <trans-unit id="027f6037ffd06215488adde61c7e586ebdeedc8b" translate="yes" xml:space="preserve">
          <source>When you are developing some package and hence some class (say Class1) within it, then you should use public access specifier for data member within Class1 if you want this member to be accessible in other packages on instance of Class1 created in some class of other package. &lt;strong&gt;Basically this access specifier should be used when you intent to expose your data member to world without any condition.&lt;/strong&gt;</source>
          <target state="translated">Cuando desarrolle alg&amp;uacute;n paquete y, por lo tanto, alguna clase (por ejemplo, Clase1) dentro de &amp;eacute;l, debe usar un especificador de acceso p&amp;uacute;blico para el miembro de datos dentro de la Clase1 si desea que este miembro sea accesible en otros paquetes, por ejemplo, en la Clase 1 creada en alguna clase de otra paquete. &lt;strong&gt;B&amp;aacute;sicamente, este especificador de acceso debe usarse cuando intente exponer su miembro de datos al mundo sin ninguna condici&amp;oacute;n.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="de23e22099f028dd172f317f3ef75423c6e9cb8a" translate="yes" xml:space="preserve">
          <source>When you are developing some package and hence some class (say Class1) within it, you may use default (need not be mentioned explicitly) access specifier, to expose member within class, to other classes within your (same) package. In these other classes (within same package), you can access these default members on instance of Class1. Also you can access these default members within subclasses of Class1, say Class2 (on this reference or on instance of Class1 or on instance of Class2).</source>
          <target state="translated">Cuando desarrollas algún paquete y por lo tanto alguna clase (digamos Clase1)dentro de él,puedes usar el especificador de acceso por defecto (no es necesario mencionarlo explícitamente),para exponer al miembro dentro de la clase,a otras clases dentro de tu (mismo)paquete.En estas otras clases (dentro del mismo paquete),puedes acceder a estos miembros por defecto en la instancia de la Clase 1.También puedes acceder a estos miembros por defecto dentro de las subclases de la Clase 1,por ejemplo,la Clase 2 (en esta referencia o en la instancia de la Clase 1 o en la instancia de la Clase 2).</target>
        </trans-unit>
        <trans-unit id="ab5f7c5da1e908785059d10eee82f660fd70e889" translate="yes" xml:space="preserve">
          <source>When you are thinking of access modifiers just think of it in this way (applies to both &lt;strong&gt;variables&lt;/strong&gt; and &lt;strong&gt;methods&lt;/strong&gt;):</source>
          <target state="translated">Cuando est&amp;eacute; pensando en modificadores de acceso, pi&amp;eacute;nselo de esta manera (se aplica tanto a las &lt;strong&gt;variables&lt;/strong&gt; como a los &lt;strong&gt;m&amp;eacute;todos&lt;/strong&gt; ):</target>
        </trans-unit>
        <trans-unit id="b2cf35e176192eaa161d1a6d979b561f22449218" translate="yes" xml:space="preserve">
          <source>When you bring him to the campus, the first thing that you and your friend sees is this statue. This means that anyone who walks in the campus can look at the statue without the university's permission. This makes the statue as &lt;strong&gt;PUBLIC&lt;/strong&gt;.</source>
          <target state="translated">Cuando lo traes al campus, lo primero que t&amp;uacute; y tu amigo ven es esta estatua. Esto significa que cualquiera que camine en el campus puede mirar la estatua sin el permiso de la universidad. Esto hace que la estatua sea &lt;strong&gt;P&amp;Uacute;BLICA&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="9733e2040efa0c9d4a97d71582ab64f36a523dfc" translate="yes" xml:space="preserve">
          <source>When you write another class Class3 within same/different package
that extends Class2, protected member from Class1 will be accessible
on this reference and also on explicit instance of Class3. This will
be true for any hierarchy that is extended i.e. protected member
will still be accessible on this reference or instance of extended
class. Note that in Class3, if you create instance of Class2 then
you will not be able to access protected member from Class1 though
it is inherited.</source>
          <target state="translated">Cuando escriba otra clase Clase3 dentro del mismo paquete diferente que extiende la Clase2,el miembro protegido de la Clase1 será accesible en esta referencia y también en la instancia explícita de la Clase3.Esto será cierto para cualquier jerarquía que se extienda,es decir,el miembro protegido seguirá siendo accesible en esta referencia o instancia de clase extendida.Tenga en cuenta que en la Clase 3,si crea una instancia de la Clase 2,entonces no podrá acceder al miembro protegido de la Clase 1 aunque sea hereditario.</target>
        </trans-unit>
        <trans-unit id="7db19bf48ccf8618b8d48b1bccd529b75f5e1638" translate="yes" xml:space="preserve">
          <source>Which modifier to choose?</source>
          <target state="translated">¿Qué modificador elegir?</target>
        </trans-unit>
        <trans-unit id="78394873daaf3ca1c582b2022bd91ff90bffcfbf" translate="yes" xml:space="preserve">
          <source>You also have to consider &lt;em&gt;nested&lt;/em&gt; scopes, such as inner classes. An example of the complexity is that inner classes have members, which themselves can take access modifiers. So you can have a private inner class with a public member; can the member be accessed? (See below.) The general rule is to look at scope and think recursively to see whether you can access each level.</source>
          <target state="translated">Tambi&amp;eacute;n debe tener en cuenta los &amp;aacute;mbitos &lt;em&gt;anidados&lt;/em&gt; , como las clases internas. Un ejemplo de la complejidad es que las clases internas tienen miembros, que pueden tomar modificadores de acceso. Entonces puedes tener una clase interna privada con un miembro p&amp;uacute;blico; &amp;iquest;Se puede acceder al miembro? (Ver m&amp;aacute;s abajo). La regla general es mirar el alcance y pensar recursivamente para ver si puede acceder a cada nivel.</target>
        </trans-unit>
        <trans-unit id="6a9833145068de24bf1a54b7ae1bbaa1ff417a9d" translate="yes" xml:space="preserve">
          <source>You need access to a constructor to construct an object. Thus if all constructors are private, the class can only be constructed by code living within the class (typically static factory methods or static variable initializers). Similarly for package-private or protected constructors.</source>
          <target state="translated">Necesitas acceso a un constructor para construir un objeto.Así,si todos los constructores son privados,la clase sólo puede ser construida por el código que vive dentro de la clase (típicamente métodos de fábrica estáticos o inicializadores de variables estáticas).De manera similar para los constructores de paquetes privados o protegidos.</target>
        </trans-unit>
        <trans-unit id="13ebc736719c7b0ac170a13671dcbca61014c961" translate="yes" xml:space="preserve">
          <source>You won't be able to access inherited protected member of Class1 in
Class2, if you attempt to access it on explicit instance of Class1,
although it is inherited in it.</source>
          <target state="translated">No podrá acceder al miembro protegido heredado de la clase 1 en la clase 2,si intenta acceder a él en la instancia explícita de la clase 1,aunque sea heredado en ella.</target>
        </trans-unit>
        <trans-unit id="0342c9aebe9dfc86b2722a15889bef207a17eb8e" translate="yes" xml:space="preserve">
          <source>Your friend wants to login to the campus WiFi but doesn't have the any credentials to do so. The only way he can get online is if you share your login with him. (Remember, every student who goes to the university also possesses these login credentials). This would make your login credentials as &lt;strong&gt;NO MODIFIER&lt;/strong&gt;.</source>
          <target state="translated">Su amigo quiere iniciar sesi&amp;oacute;n en el WiFi del campus, pero no tiene las credenciales para hacerlo. La &amp;uacute;nica forma en que puede conectarse es si comparte su nombre de usuario con &amp;eacute;l. (Recuerde, cada estudiante que va a la universidad tambi&amp;eacute;n posee estas credenciales de inicio de sesi&amp;oacute;n). Esto har&amp;iacute;a que sus credenciales de inicio de sesi&amp;oacute;n como &lt;strong&gt;NO MODIFICADOR&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="7505d64a54e061b7acd54ccd58b49dc43500b635" translate="yes" xml:space="preserve">
          <source>default</source>
          <target state="translated">default</target>
        </trans-unit>
        <trans-unit id="0c6a031212fa407e33d1f50ffda6a1bf40baaa82" translate="yes" xml:space="preserve">
          <source>default (no modifier specified): accessible by the classes of the same package.</source>
          <target state="translated">por defecto (no se especifica ningún modificador):accesible por las clases del mismo paquete.</target>
        </trans-unit>
        <trans-unit id="64fa1dc60398c6bcdee08aa6c839a166432e015b" translate="yes" xml:space="preserve">
          <source>default (package)</source>
          <target state="translated">por defecto (paquete)</target>
        </trans-unit>
        <trans-unit id="81d4e9552c19ab8c332c76804f094d59bfe0653c" translate="yes" xml:space="preserve">
          <source>meaning that &lt;code&gt;public&lt;/code&gt; provides the most access, &lt;code&gt;private&lt;/code&gt; the least. Any reference possible on a private member is also valid for a package-private member; any reference to a package-private member is valid on a protected member, and so on. (Giving access to protected members to other classes in the same package was considered a mistake.)</source>
          <target state="translated">lo que significa que el &lt;code&gt;public&lt;/code&gt; proporciona m&amp;aacute;s acceso, el &lt;code&gt;private&lt;/code&gt; menos. Cualquier referencia posible en un miembro privado tambi&amp;eacute;n es v&amp;aacute;lida para un miembro privado de paquete; cualquier referencia a un miembro privado del paquete es v&amp;aacute;lida en un miembro protegido, y as&amp;iacute; sucesivamente. (Dar acceso a miembros protegidos a otras clases en el mismo paquete se consider&amp;oacute; un error).</target>
        </trans-unit>
        <trans-unit id="e80721793c24ae14edfca9b26ad406a9815cd3ff" translate="yes" xml:space="preserve">
          <source>private</source>
          <target state="translated">private</target>
        </trans-unit>
        <trans-unit id="964cab4bb4a5111731b0c00dbb43f794698d8731" translate="yes" xml:space="preserve">
          <source>protected</source>
          <target state="translated">protected</target>
        </trans-unit>
        <trans-unit id="61c9b2b17db77a27841bbeeabff923448b0f6388" translate="yes" xml:space="preserve">
          <source>public</source>
          <target state="translated">public</target>
        </trans-unit>
        <trans-unit id="10aa8b2ec5bd3e37ab9afc32631742bf8b2f7f90" translate="yes" xml:space="preserve">
          <source>public &amp;gt; protected &amp;gt; package-private &amp;gt; private</source>
          <target state="translated">p&amp;uacute;blico&amp;gt; protegido&amp;gt; paquete-privado&amp;gt; privado</target>
        </trans-unit>
        <trans-unit id="04e4d31337d73d519a701e0100bf1767c9be25cc" translate="yes" xml:space="preserve">
          <source>then we have this simple table:</source>
          <target state="translated">entonces tenemos esta simple mesa:</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
