<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://stackoverflow.com/questions/21567291">
    <body>
      <group id="21567291">
        <trans-unit id="ec7c214a1fdc8780b60bcb590f4198cc7cd9b775" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;What's the difference?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Какая разница?&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fd943620ecdfe6d8c4a83ff65c22201fa31d31a9" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;1: &lt;code&gt;std::skipws&lt;/code&gt; is manipulator that tells the input stream to discard leading whitespace when performing formatted input. This can be turned off with the &lt;code&gt;std::noskipws&lt;/code&gt; manipulator.&lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;1: &lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::skipws&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; - это манипулятор, который указывает потоку ввода отбрасывать &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;начальные&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; пробелы при выполнении форматированного ввода. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Это можно отключить с &lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::noskipws&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; манипулятора &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;std :: noskipws&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="b985457f75403e475b47db94270c83136e39c4ee" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;2: Input streams deem certain characters as whitespace by default, such the space character, newline character, form feed, carriage return, etc.&lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2: Входные потоки по умолчанию считают определенные символы пробелами, такими как пробел, символ новой строки, перевод формы, возврат каретки и т. Д.&lt;/font&gt;&lt;/font&gt;&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="54861e0dd6e7e7340d75914d2f06224b2a47e8e4" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;3: This is the signature of &lt;code&gt;std::basic_istream&amp;lt;...&amp;gt;::ignore()&lt;/code&gt;. You can call it with zero arguments to discard a single character from the stream, one argument to discard a certain amount of characters, or two arguments to discard &lt;code&gt;count&lt;/code&gt; characters or until it reaches &lt;code&gt;delim&lt;/code&gt;, whichever one comes first. You normally use &lt;code&gt;std::numeric_limits&amp;lt;std::streamsize&amp;gt;::max()&lt;/code&gt; as the value of &lt;code&gt;count&lt;/code&gt; if you don't know how many characters there are before the delimiter, but you want to discard them anyway.&lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;3: это подпись &lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::basic_istream&amp;lt;...&amp;gt;::ignore()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . Вы можете вызвать его с нулевыми аргументами, чтобы отбросить один символ из потока, одним аргументом, чтобы отбросить определенное количество символов, или двумя аргументами, чтобы отбросить &lt;/font&gt;&lt;/font&gt; &lt;code&gt;count&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; символов, или пока он не достигнет &lt;/font&gt;&lt;/font&gt; &lt;code&gt;delim&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , в зависимости от того, какой из них &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;окажется&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; первым. Обычно вы используете &lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::numeric_limits&amp;lt;std::streamsize&amp;gt;::max()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; в качестве значения &lt;/font&gt;&lt;/font&gt; &lt;code&gt;count&lt;/code&gt; ,&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; если вы не знаете, сколько символов перед разделителем, но вы все равно хотите их отбросить.&lt;/font&gt;&lt;/font&gt;&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="88f90b25366407b37d1a00c8dcc4e4e535f6dc18" translate="yes" xml:space="preserve">
          <source>A newline is always appended to your input when you select</source>
          <target state="translated">Новая строка всегда добавляется к вашему входу,когда вы выбираете</target>
        </trans-unit>
        <trans-unit id="3ba0e9b83fcbdba251f0dc44b8e0d3fa71cec891" translate="yes" xml:space="preserve">
          <source>Another overload of this function takes a delimiter of type &lt;code&gt;charT&lt;/code&gt;. A delimiter character is a character that represents the boundary between sequences of input. This particular overload sets the delimiter to the newline character &lt;code&gt;input.widen('\n')&lt;/code&gt; by default since one was not supplied.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Другая перегрузка этой функции принимает разделитель типа &lt;/font&gt;&lt;/font&gt; &lt;code&gt;charT&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Символ разделителя - это символ, представляющий границу между последовательностями ввода. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Эта конкретная перегрузка &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;по умолчанию &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;устанавливает разделитель на символ новой строки &lt;/font&gt;&lt;/font&gt; &lt;code&gt;input.widen('\n')&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , поскольку он не был указан.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="052521750e9a3c56e9fde37e02efbbf787c20b0c" translate="yes" xml:space="preserve">
          <source>Another way to discard the whitespace is to use the &lt;code&gt;std::ws&lt;/code&gt; function which is a manipulator designed to extract and discard leading whitespace from the beginning of an input stream:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Еще один способ отбросить пробел - использовать &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;функцию &lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::ws&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; которая является манипулятором, предназначенным для извлечения и отбрасывания начальных пробелов из начала входного потока:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ebd400daeaa87b9872c1451d8dc28b406e3f2dd3" translate="yes" xml:space="preserve">
          <source>Because this leading newline inhibits the expected functionality of your program, it follows that it must be skipped our ignored somehow. One option is to call &lt;code&gt;std::cin.ignore()&lt;/code&gt; after the the first extraction. It will discard the next available character so that the newline is no longer in the way.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Поскольку этот ведущий символ новой строки запрещает ожидаемую функциональность вашей программы, из этого следует, что ее нужно как-то пропустить. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Одним из вариантов является вызов &lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::cin.ignore()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; после первого извлечения. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Он будет отбрасывать следующий доступный символ, чтобы новая строка больше не мешала.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2b9eceb7a86a9f577ef80586c5c1d7fde9ff493d" translate="yes" xml:space="preserve">
          <source>Enter</source>
          <target state="translated">Enter</target>
        </trans-unit>
        <trans-unit id="a51d561ae289fee633489fe4e190348071c52ee1" translate="yes" xml:space="preserve">
          <source>Everything will be OK if you change your initial code in the following way:</source>
          <target state="translated">Все будет хорошо,если вы измените свой исходный код следующим образом:</target>
        </trans-unit>
        <trans-unit id="2849cb13a335fb59ef4ed494dc8432c9a3a24fa2" translate="yes" xml:space="preserve">
          <source>I have the following piece of code that prompts the user for their name and state:</source>
          <target state="translated">У меня есть следующий кусок кода,который подсказывает пользователю его имя и состояние:</target>
        </trans-unit>
        <trans-unit id="617bd29fce2e70b33c9e8d355f4bc533284670e9" translate="yes" xml:space="preserve">
          <source>If the delimiter has been found</source>
          <target state="translated">Если разделитель найден</target>
        </trans-unit>
        <trans-unit id="1305802d6e249da94f4f7a07e0bea5b8321d5036" translate="yes" xml:space="preserve">
          <source>If the end-of-file (EOF) character has been found</source>
          <target state="translated">Если был найден символ конца файла (EOF)</target>
        </trans-unit>
        <trans-unit id="306ba67ef99ba715c1d94551412622dd4f53a4ec" translate="yes" xml:space="preserve">
          <source>If the stream has extracted the maximum amount of characters a &lt;code&gt;std::basic_string&amp;lt;charT&amp;gt;&lt;/code&gt; can hold</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Если поток извлек максимальное количество символов, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::basic_string&amp;lt;charT&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; может содержать &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;std :: basic_string &amp;lt;charT&amp;gt;&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9ba38a94a4a02a8ac31ed6e31b42019bc855bb4a" translate="yes" xml:space="preserve">
          <source>If you are mixing formatted input with unformatted input and you need to discard residual whitespace, use &lt;code&gt;std::ws&lt;/code&gt;. Otherwise, if you need to clear out invalid input regardless of what it is, use &lt;code&gt;ignore()&lt;/code&gt;. In our example, we only need to clear whitespace since the stream consumed your input of &lt;code&gt;&quot;John&quot;&lt;/code&gt; for the &lt;code&gt;name&lt;/code&gt; variable. All that was left was the newline character.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Если вы смешиваете форматированный ввод с неформатированным вводом и вам нужно удалить остаточные пробелы, используйте &lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::ws&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;В противном случае, если вам нужно очистить неверный ввод независимо от того, что это, используйте &lt;/font&gt;&lt;/font&gt; &lt;code&gt;ignore()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;В нашем примере нам нужно только очистить пробелы, так как поток потребляет ваш ввод &lt;/font&gt;&lt;/font&gt; &lt;code&gt;&quot;John&quot;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; для &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;переменной &lt;/font&gt;&lt;/font&gt; &lt;code&gt;name&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Осталось только символ новой строки.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="84a322941debc5bf79050fd668f579d2e95fc9c4" translate="yes" xml:space="preserve">
          <source>In-Depth Explanation:</source>
          <target state="translated">Глубокое объяснение:</target>
        </trans-unit>
        <trans-unit id="7f321a5d5b1b57e654ad8e7d23fbb0e6633caed5" translate="yes" xml:space="preserve">
          <source>Now, these are a few of the conditions whereby &lt;code&gt;std::getline()&lt;/code&gt; terminates input:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Теперь вот несколько условий, при которых &lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::getline()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; завершает ввод:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="24f096b221f9534bcad007f2b5a32b490950b5b5" translate="yes" xml:space="preserve">
          <source>Return</source>
          <target state="translated">Return</target>
        </trans-unit>
        <trans-unit id="9784d91c3b7fceefefbe649b337cd37547c26834" translate="yes" xml:space="preserve">
          <source>Since the above condition is false, the sentry object will not discard the whitespace. The reason &lt;code&gt;noskipws&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt; by this function is because the point of &lt;code&gt;std::getline()&lt;/code&gt; is to read raw, unformatted characters into a &lt;code&gt;std::basic_string&amp;lt;charT&amp;gt;&lt;/code&gt; object.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Так как вышеприведенное условие ложно, сторожевой объект не будет отбрасывать пробел. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Причина, по которой &lt;/font&gt;&lt;/font&gt; &lt;code&gt;noskipws&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; устанавливается в &lt;/font&gt;&lt;/font&gt; &lt;code&gt;true&lt;/code&gt; с&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; помощью этой функции, заключается в том, что &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;целью &lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::getline()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; является чтение необработанных неформатированных символов в объект &lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::basic_string&amp;lt;charT&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7b2c45bc9b8a5268549eb87988ee9abf386351d8" translate="yes" xml:space="preserve">
          <source>The Solution:</source>
          <target state="translated">Решение:</target>
        </trans-unit>
        <trans-unit id="69c8c8d928a345d55b90e7a352d075898f33e91b" translate="yes" xml:space="preserve">
          <source>The above is a sentry object which is instantiated in all formatted/unformatted I/O functions in a standard C++ implementation. Sentry objects are used for preparing the stream for I/O and determining whether or not it is in a fail state. You'll only find that in the &lt;em&gt;unformatted&lt;/em&gt; input functions, the second argument to the sentry constructor is &lt;code&gt;true&lt;/code&gt;. That argument means that leading whitespace will &lt;em&gt;not&lt;/em&gt; be discarded from the beginning of the input sequence. Here is the relevant quote from the Standard [&amp;sect;27.7.2.1.3/2]:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Выше представлен часовой объект, который создается во всех отформатированных / неформатированных функциях ввода-вывода в стандартной реализации C ++. Объекты Sentry используются для подготовки потока к вводу-выводу и определения того, находится ли он в состоянии сбоя или нет. Вы найдете только то, что в &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;неотформатированных&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; входных функциях второй аргумент конструктора sentry равен &lt;/font&gt;&lt;/font&gt; &lt;code&gt;true&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . Этот аргумент означает, что &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;начальные &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;пробелы &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;не&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; будут отбрасываться с начала входной последовательности. Вот соответствующая цитата из Стандарта [&amp;sect;27.7.2.1.3 / 2]:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="be721a2e400755675c47f55aefe8d028d7a02def" translate="yes" xml:space="preserve">
          <source>The difference is that &lt;code&gt;ignore(std::streamsize count = 1, int_type delim = Traits::eof())&lt;/code&gt;&lt;sup&gt;3&lt;/sup&gt; indiscriminately discards characters until it either discards &lt;code&gt;count&lt;/code&gt; characters, finds the delimiter (specified by the second argument &lt;code&gt;delim&lt;/code&gt;) or hits the end of the stream. &lt;code&gt;std::ws&lt;/code&gt; is only used for discarding whitespace characters from the beginning of the stream.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Разница в том, что &lt;/font&gt;&lt;/font&gt; &lt;code&gt;ignore(std::streamsize count = 1, int_type delim = Traits::eof())&lt;/code&gt; &lt;sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;3&lt;/font&gt;&lt;/font&gt;&lt;/sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; без разбора отбрасывает символы до тех пор, пока он либо не отбросит &lt;/font&gt;&lt;/font&gt; &lt;code&gt;count&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; символов, не найдет разделитель (заданный вторым аргументом &lt;/font&gt;&lt;/font&gt; &lt;code&gt;delim&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ) или не достигнет конца потока. &lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::ws&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; используется только для удаления пробельных символов в начале потока.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="beb3607e8d8a4eda931f55fb5f54ea024fd0e1a5" translate="yes" xml:space="preserve">
          <source>The third condition is the one we're dealing with. Your input into &lt;code&gt;state&lt;/code&gt; is represented thusly:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Третье условие - это то, с которым мы имеем дело. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ваш вклад в &lt;/font&gt;&lt;/font&gt; &lt;code&gt;state&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; представляется так:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="be5b756cffe7eb6f28666a60b997bad4e4f0ff19" translate="yes" xml:space="preserve">
          <source>There's no way to stop this behavior of &lt;code&gt;std::getline()&lt;/code&gt;. What you'll have to do is discard the new line yourself before &lt;code&gt;std::getline()&lt;/code&gt; runs (but do it &lt;em&gt;after&lt;/em&gt; the formatted extraction). This can be done by using &lt;code&gt;ignore()&lt;/code&gt; to discard the rest of the input until we reach a fresh new line:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Нет способа остановить это поведение &lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::getline()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . То, что вам нужно сделать, это удалить новую строку самостоятельно перед &lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::getline()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (но сделайте это &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;после&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; форматированного извлечения). Это можно сделать с помощью &lt;/font&gt;&lt;/font&gt; &lt;code&gt;ignore()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; чтобы отбросить оставшуюся часть ввода, пока мы не достигнем новой новой строки:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="de39c9c8eccb3d48cd77f434ca497754395456e5" translate="yes" xml:space="preserve">
          <source>This happens because an implicit line feed also known as newline character &lt;code&gt;\n&lt;/code&gt; is appended to all user input from a terminal as it's telling the stream to start a new line. You can safely account for this by using &lt;a href=&quot;http://en.cppreference.com/w/cpp/string/basic_string/getline&quot;&gt;&lt;code&gt;std::getline&lt;/code&gt;&lt;/a&gt; when checking for multiple lines of user input. The default behavior of &lt;code&gt;std::getline&lt;/code&gt; will read everything up to and including the newline character &lt;code&gt;\n&lt;/code&gt; from the input stream object which is &lt;code&gt;std::cin&lt;/code&gt; in this case.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Это происходит потому, что неявный перевод строки, также известный как символ новой строки &lt;/font&gt;&lt;/font&gt; &lt;code&gt;\n&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , добавляется ко всем пользовательским вводам с терминала, когда он сообщает потоку начать новую строку. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вы можете смело учитывать это, используя &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.cppreference.com/w/cpp/string/basic_string/getline&quot;&gt; &lt;code&gt;std::getline&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; при проверке нескольких строк пользовательского ввода. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Поведение по умолчанию &lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::getline&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; будет читать все, включая символ новой строки &lt;/font&gt;&lt;/font&gt; &lt;code&gt;\n&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; из объекта входного потока, &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;в данном случае &lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::cin&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c2f0e692274b5741fba942bfcca92c9d72b216ab" translate="yes" xml:space="preserve">
          <source>This has little to do with the input you provided yourself but rather with the default behavior &lt;code&gt;std::getline()&lt;/code&gt; exhibits. When you provided your input for the name (&lt;code&gt;std::cin &amp;gt;&amp;gt; name&lt;/code&gt;), you not only submitted the following characters, but also an implicit newline was appended to the stream:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Это не имеет ничего общего с вводом, который вы предоставили самостоятельно, а скорее с поведением по умолчанию &lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::getline()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . Когда вы указали свой ввод для имени ( &lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::cin &amp;gt;&amp;gt; name&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ), вы не только отправили следующие символы, но и неявный символ новой строки был добавлен к потоку:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="aead94030654d0d4376565f7c7d2c09982ef7a93" translate="yes" xml:space="preserve">
          <source>This is the overload of &lt;code&gt;std::getline()&lt;/code&gt; that you called:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Это перегрузка &lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::getline()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; которую вы вызвали:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2885605d4d66577c4326b3736993f9e0d974cf56" translate="yes" xml:space="preserve">
          <source>Unlike the formatted input operators, &lt;code&gt;std::getline()&lt;/code&gt; is an &lt;em&gt;unformatted&lt;/em&gt; input function. And all unformatted input functions have the following code somewhat in common:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;В отличие от форматированных операторов ввода, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::getline()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; является &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;неформатированной&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; функцией ввода. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;И все неотформатированные функции ввода имеют следующий общий код:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7652cb2c60ebc2c8990bfa640aaa291d02b1e548" translate="yes" xml:space="preserve">
          <source>What I find is that the name has been successfully extracted, but not the state. Here is the input and resulting output:</source>
          <target state="translated">Что я нахожу,так это то,что название было успешно извлечено,но не государство.Вот входное и результирующее состояние:</target>
        </trans-unit>
        <trans-unit id="f484fecbd5602cfbd1cd7e1256c7746ee1c70397" translate="yes" xml:space="preserve">
          <source>Why does std::getline() skip input after a formatted extraction</source>
          <target state="translated">Почему std::getline()пропускает ввод после форматированного экстрагирования</target>
        </trans-unit>
        <trans-unit id="9a5b63c2c27331b350ca1f1ac9bc40e93e0def5f" translate="yes" xml:space="preserve">
          <source>Why does this happen?</source>
          <target state="translated">Почему это происходит?</target>
        </trans-unit>
        <trans-unit id="48807d13b9d5be24aaf6ca75c32641493050f84e" translate="yes" xml:space="preserve">
          <source>Why has the name of the state been omitted from the output? I've given the proper input, but the code somehow ignores it. Why does this happen?</source>
          <target state="translated">Почему название государства было опущено из вывода? Я дал правильный ввод,но код каким-то образом игнорирует его.Почему это происходит?</target>
        </trans-unit>
        <trans-unit id="c633f6012ce2a23b10616accc184e616c83199a2" translate="yes" xml:space="preserve">
          <source>You may have noticed that you don't typically run into this problem when extracting with the formatted input operator (&lt;code&gt;operator&amp;gt;&amp;gt;()&lt;/code&gt;). This is because input streams use whitespace as delimiters for input and have the &lt;code&gt;std::skipws&lt;/code&gt;&lt;sup&gt;1&lt;/sup&gt; manipulator set on by default. Streams will discard the leading whitespace from the stream when beginning to perform formatted input.&lt;sup&gt;2&lt;/sup&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Возможно, вы заметили, что вы обычно не сталкиваетесь с этой проблемой при извлечении с помощью оператора форматированного ввода ( &lt;/font&gt;&lt;/font&gt; &lt;code&gt;operator&amp;gt;&amp;gt;()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Это связано с тем, что входные потоки используют пробелы в качестве разделителей для ввода и &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;по умолчанию установлен манипулятор &lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::skipws&lt;/code&gt; &lt;sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;1&lt;/font&gt;&lt;/font&gt;&lt;/sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Потоки будут отбрасывать начальные пробелы из потока, когда начинают выполнять форматированный ввод. &lt;/font&gt;&lt;/font&gt;&lt;sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2&lt;/font&gt;&lt;/font&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="1b877967a4435b6ab378c6d234c358ea451509a3" translate="yes" xml:space="preserve">
          <source>You'll need to include &lt;code&gt;&amp;lt;limits&amp;gt;&lt;/code&gt; to use &lt;code&gt;std::numeric_limits&lt;/code&gt;. &lt;code&gt;std::basic_istream&amp;lt;...&amp;gt;::ignore()&lt;/code&gt; is a function that discards a specified amount of characters until it either finds a delimiter or reaches the end of the stream (&lt;code&gt;ignore()&lt;/code&gt; also discards the delimiter if it finds it). The &lt;code&gt;max()&lt;/code&gt; function returns the largest amount of characters that a stream can accept.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вам нужно будет включить &lt;/font&gt;&lt;/font&gt; &lt;code&gt;&amp;lt;limits&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; чтобы использовать &lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::numeric_limits&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::basic_istream&amp;lt;...&amp;gt;::ignore()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; - это функция, которая отбрасывает указанное количество символов, пока не найдет разделитель или не достигнет конца потока ( &lt;/font&gt;&lt;/font&gt; &lt;code&gt;ignore()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; также отбрасывает разделитель, если найдет его) , &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Функция &lt;/font&gt;&lt;/font&gt; &lt;code&gt;max()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; возвращает наибольшее количество символов, которое может принять поток.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3852f688831d420a220fab41247f52313cf624d3" translate="yes" xml:space="preserve">
          <source>[...] If &lt;code&gt;noskipws&lt;/code&gt; is zero and &lt;code&gt;is.flags() &amp;amp; ios_base::skipws&lt;/code&gt; is nonzero, the function extracts and discards each character as long as the next available input character &lt;code&gt;c&lt;/code&gt; is a whitespace character. [...]</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;[...] Если &lt;/font&gt;&lt;/font&gt; &lt;code&gt;noskipws&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; равен нулю и &lt;/font&gt;&lt;/font&gt; &lt;code&gt;is.flags() &amp;amp; ios_base::skipws&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; равен нулю, функция извлекает и удаляет каждый символ, если следующий доступный входной символ &lt;/font&gt;&lt;/font&gt; &lt;code&gt;c&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; является символом пробела. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;[...]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">or</target>
        </trans-unit>
        <trans-unit id="f53a910c78329f1a95fd48bc21f823b8b460ee47" translate="yes" xml:space="preserve">
          <source>when submitting from a terminal. It is also used in files for moving toward the next line. The newline is left in the buffer after the extraction into &lt;code&gt;name&lt;/code&gt; until the next I/O operation where it is either discarded or consumed. When the flow of control reaches &lt;code&gt;std::getline()&lt;/code&gt;, the newline will be discarded, but the input will cease immediately. The reason this happens is because the default functionality of this function dictates that it should (it attempts to read a line and stops when it finds a newline).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;при отправке из терминала. Он также используется в файлах для перехода к следующей строке. Новая строка остается в буфере после извлечения в &lt;/font&gt;&lt;/font&gt; &lt;code&gt;name&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; до следующей операции ввода-вывода, где она либо отбрасывается, либо используется. Когда поток управления достигает &lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::getline()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , новая строка будет отброшена, но ввод немедленно прекратится. Причина, по которой это происходит, состоит в том, что функциональность по умолчанию этой функции диктует, что она должна (она пытается прочитать строку и останавливается, когда находит новую строку).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="71669d4354037a18ace2fdfc8f29b7515fffc4e7" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;next_pointer&lt;/code&gt; is the next character to be parsed. Since the character stored at the next position in the input sequence is the delimiter, &lt;code&gt;std::getline()&lt;/code&gt; will quietly discard that character, increment &lt;code&gt;next_pointer&lt;/code&gt; to the next available character, and stop input. This means that the rest of the characters that you have provided still remain in the buffer for the next I/O operation. You'll notice that if you perform another read from the line into &lt;code&gt;state&lt;/code&gt;, your extraction will yield the correct result as the last call to &lt;code&gt;std::getline()&lt;/code&gt; discarded the delimiter.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;где &lt;/font&gt;&lt;/font&gt; &lt;code&gt;next_pointer&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; - следующий символ, который будет проанализирован. Поскольку символ, хранящийся в следующей позиции во входной последовательности, является разделителем, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::getline()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; тихо отбросит этот символ, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;next_pointer&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; значение &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;next_pointer&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; до следующего доступного символа и остановит ввод. Это означает, что остальные предоставленные вами символы все еще остаются в буфере для следующей операции ввода-вывода. Вы заметите, что если вы выполните еще одно чтение из строки в &lt;/font&gt;&lt;/font&gt; &lt;code&gt;state&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , ваше извлечение даст правильный результат, так как последний вызов &lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::getline()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; отбрасывает разделитель.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
