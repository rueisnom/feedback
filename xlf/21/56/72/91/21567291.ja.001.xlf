<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/21567291">
    <body>
      <group id="21567291">
        <trans-unit id="ec7c214a1fdc8780b60bcb590f4198cc7cd9b775" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;What's the difference?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;違いは何ですか？&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fd943620ecdfe6d8c4a83ff65c22201fa31d31a9" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;1: &lt;code&gt;std::skipws&lt;/code&gt; is manipulator that tells the input stream to discard leading whitespace when performing formatted input. This can be turned off with the &lt;code&gt;std::noskipws&lt;/code&gt; manipulator.&lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;1：&lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::skipws&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、フォーマットされた入力を実行するときに先頭の空白を破棄するように入力ストリームに指示するマニピュレーターです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは&lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::noskipws&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;マニピュレーターで&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;オフにできます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="b985457f75403e475b47db94270c83136e39c4ee" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;2: Input streams deem certain characters as whitespace by default, such the space character, newline character, form feed, carriage return, etc.&lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2：入力ストリームは、デフォルトで、空白文字、改行文字、改ページ、改行などの特定の文字を空白と見なします。&lt;/font&gt;&lt;/font&gt;&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="54861e0dd6e7e7340d75914d2f06224b2a47e8e4" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;3: This is the signature of &lt;code&gt;std::basic_istream&amp;lt;...&amp;gt;::ignore()&lt;/code&gt;. You can call it with zero arguments to discard a single character from the stream, one argument to discard a certain amount of characters, or two arguments to discard &lt;code&gt;count&lt;/code&gt; characters or until it reaches &lt;code&gt;delim&lt;/code&gt;, whichever one comes first. You normally use &lt;code&gt;std::numeric_limits&amp;lt;std::streamsize&amp;gt;::max()&lt;/code&gt; as the value of &lt;code&gt;count&lt;/code&gt; if you don't know how many characters there are before the delimiter, but you want to discard them anyway.&lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;3：これは&lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::basic_istream&amp;lt;...&amp;gt;::ignore()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;のシグネチャです&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。引数を0として呼び出すと、ストリームから1文字を破棄し、1つの引数で特定の&lt;/font&gt;&lt;/font&gt; &lt;code&gt;count&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;文字&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を破棄するか、2つの引数で&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;カウント&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;文字&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を破棄するか、または&lt;/font&gt;&lt;/font&gt; &lt;code&gt;delim&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;到達するまでの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;いずれか早い方で&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;呼び出します&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。通常&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、区切り文字の前に何文字あるかわからないが、とにかく破棄したい場合&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、&lt;/font&gt; &lt;code&gt;count&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;の値として&lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::numeric_limits&amp;lt;std::streamsize&amp;gt;::max()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;します。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="88f90b25366407b37d1a00c8dcc4e4e535f6dc18" translate="yes" xml:space="preserve">
          <source>A newline is always appended to your input when you select</source>
          <target state="translated">を選択すると、入力には常に改行が付加されます。</target>
        </trans-unit>
        <trans-unit id="3ba0e9b83fcbdba251f0dc44b8e0d3fa71cec891" translate="yes" xml:space="preserve">
          <source>Another overload of this function takes a delimiter of type &lt;code&gt;charT&lt;/code&gt;. A delimiter character is a character that represents the boundary between sequences of input. This particular overload sets the delimiter to the newline character &lt;code&gt;input.widen('\n')&lt;/code&gt; by default since one was not supplied.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この関数の別のオーバーロードは、タイプ&lt;/font&gt;&lt;/font&gt; &lt;code&gt;charT&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;区切り文字を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;取り&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;区切り文字は、入力シーケンス間の境界を表す文字です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この特定のオーバーロードは、区切り文字&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が指定されていないため&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、区切り文字を改行文字&lt;/font&gt;&lt;/font&gt; &lt;code&gt;input.widen('\n')&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;にデフォルトで設定します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="052521750e9a3c56e9fde37e02efbbf787c20b0c" translate="yes" xml:space="preserve">
          <source>Another way to discard the whitespace is to use the &lt;code&gt;std::ws&lt;/code&gt; function which is a manipulator designed to extract and discard leading whitespace from the beginning of an input stream:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;空白を破棄する別の方法&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、入力ストリームの先頭から先頭の空白を抽出して破棄するように設計されたマニピュレーターである&lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::ws&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;関数&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用すること&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ebd400daeaa87b9872c1451d8dc28b406e3f2dd3" translate="yes" xml:space="preserve">
          <source>Because this leading newline inhibits the expected functionality of your program, it follows that it must be skipped our ignored somehow. One option is to call &lt;code&gt;std::cin.ignore()&lt;/code&gt; after the the first extraction. It will discard the next available character so that the newline is no longer in the way.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この先頭の改行はプログラムの期待される機能を阻害するため、無視されたものをスキップする必要があります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;1つのオプションは&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、最初の抽出の後に&lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::cin.ignore()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を呼び出す&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ことです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;次の使用可能な文字を破棄して、改行が邪魔にならないようにします。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2b9eceb7a86a9f577ef80586c5c1d7fde9ff493d" translate="yes" xml:space="preserve">
          <source>Enter</source>
          <target state="translated">Enter</target>
        </trans-unit>
        <trans-unit id="a51d561ae289fee633489fe4e190348071c52ee1" translate="yes" xml:space="preserve">
          <source>Everything will be OK if you change your initial code in the following way:</source>
          <target state="translated">以下の方法で初期コードを変更すれば全てOKです。</target>
        </trans-unit>
        <trans-unit id="2849cb13a335fb59ef4ed494dc8432c9a3a24fa2" translate="yes" xml:space="preserve">
          <source>I have the following piece of code that prompts the user for their name and state:</source>
          <target state="translated">次のようなコードを使って、ユーザーに名前と状態の入力を促しています。</target>
        </trans-unit>
        <trans-unit id="617bd29fce2e70b33c9e8d355f4bc533284670e9" translate="yes" xml:space="preserve">
          <source>If the delimiter has been found</source>
          <target state="translated">区切り文字が見つかった場合</target>
        </trans-unit>
        <trans-unit id="1305802d6e249da94f4f7a07e0bea5b8321d5036" translate="yes" xml:space="preserve">
          <source>If the end-of-file (EOF) character has been found</source>
          <target state="translated">ファイル終端文字(EOF)が見つかった場合</target>
        </trans-unit>
        <trans-unit id="306ba67ef99ba715c1d94551412622dd4f53a4ec" translate="yes" xml:space="preserve">
          <source>If the stream has extracted the maximum amount of characters a &lt;code&gt;std::basic_string&amp;lt;charT&amp;gt;&lt;/code&gt; can hold</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ストリームが&lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::basic_string&amp;lt;charT&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が保持できる&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最大文字数を抽出した場合&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9ba38a94a4a02a8ac31ed6e31b42019bc855bb4a" translate="yes" xml:space="preserve">
          <source>If you are mixing formatted input with unformatted input and you need to discard residual whitespace, use &lt;code&gt;std::ws&lt;/code&gt;. Otherwise, if you need to clear out invalid input regardless of what it is, use &lt;code&gt;ignore()&lt;/code&gt;. In our example, we only need to clear whitespace since the stream consumed your input of &lt;code&gt;&quot;John&quot;&lt;/code&gt; for the &lt;code&gt;name&lt;/code&gt; variable. All that was left was the newline character.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;フォーマットされた入力とフォーマットされていない入力を混在させており、残りの空白を破棄する必要がある場合は、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::ws&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用します&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それ以外の場合、それが何であるかに関係なく無効な入力をクリアする必要がある場合は、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;ignore()&lt;/code&gt; を&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用します&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この例では、ストリーム&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が&lt;/font&gt; &lt;code&gt;name&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;変数の&lt;/font&gt;&lt;/font&gt; &lt;code&gt;&quot;John&quot;&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;入力を消費したため、空白のみをクリアする必要があり&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;残ったのは改行文字だけでした。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="84a322941debc5bf79050fd668f579d2e95fc9c4" translate="yes" xml:space="preserve">
          <source>In-Depth Explanation:</source>
          <target state="translated">掘り下げた説明。</target>
        </trans-unit>
        <trans-unit id="7f321a5d5b1b57e654ad8e7d23fbb0e6633caed5" translate="yes" xml:space="preserve">
          <source>Now, these are a few of the conditions whereby &lt;code&gt;std::getline()&lt;/code&gt; terminates input:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;さて、これらは&lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::getline()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;入力を終了&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;する条件のいくつかです&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="24f096b221f9534bcad007f2b5a32b490950b5b5" translate="yes" xml:space="preserve">
          <source>Return</source>
          <target state="translated">Return</target>
        </trans-unit>
        <trans-unit id="9784d91c3b7fceefefbe649b337cd37547c26834" translate="yes" xml:space="preserve">
          <source>Since the above condition is false, the sentry object will not discard the whitespace. The reason &lt;code&gt;noskipws&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt; by this function is because the point of &lt;code&gt;std::getline()&lt;/code&gt; is to read raw, unformatted characters into a &lt;code&gt;std::basic_string&amp;lt;charT&amp;gt;&lt;/code&gt; object.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;上記の条件はfalseであるため、監視オブジェクトは空白を破棄しません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;理由&lt;/font&gt;&lt;/font&gt; &lt;code&gt;noskipws&lt;/code&gt; が&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に設定されている&lt;/font&gt;&lt;/font&gt; &lt;code&gt;true&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この機能によってはポイントからである&lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::getline()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;内生、フォーマットされていない文字を読み取ることである&lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::basic_string&amp;lt;charT&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;オブジェクト。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7b2c45bc9b8a5268549eb87988ee9abf386351d8" translate="yes" xml:space="preserve">
          <source>The Solution:</source>
          <target state="translated">解決策です。</target>
        </trans-unit>
        <trans-unit id="69c8c8d928a345d55b90e7a352d075898f33e91b" translate="yes" xml:space="preserve">
          <source>The above is a sentry object which is instantiated in all formatted/unformatted I/O functions in a standard C++ implementation. Sentry objects are used for preparing the stream for I/O and determining whether or not it is in a fail state. You'll only find that in the &lt;em&gt;unformatted&lt;/em&gt; input functions, the second argument to the sentry constructor is &lt;code&gt;true&lt;/code&gt;. That argument means that leading whitespace will &lt;em&gt;not&lt;/em&gt; be discarded from the beginning of the input sequence. Here is the relevant quote from the Standard [&amp;sect;27.7.2.1.3/2]:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;上記は、標準C ++実装のすべてのフォーマット済み/未フォーマットI / O関数でインスタンス化される監視オブジェクトです。 Sentryオブジェクトは、ストリームをI / O用に準備し、それが障害状態にあるかどうかを判別するために使用されます。&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;フォーマットさ&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;れて&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;いない&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;入力関数では、sentryコンストラクターの2番目の引数が&lt;/font&gt;&lt;/font&gt; &lt;code&gt;true&lt;/code&gt; である&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ことがわかり&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。その引数は、先頭の空白が&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;入力シーケンスの先頭から破棄され&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ない&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ことを&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;意味し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。標準からの関連する引用[&amp;sect;27.7.2.1.3/ 2]：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="be721a2e400755675c47f55aefe8d028d7a02def" translate="yes" xml:space="preserve">
          <source>The difference is that &lt;code&gt;ignore(std::streamsize count = 1, int_type delim = Traits::eof())&lt;/code&gt;&lt;sup&gt;3&lt;/sup&gt; indiscriminately discards characters until it either discards &lt;code&gt;count&lt;/code&gt; characters, finds the delimiter (specified by the second argument &lt;code&gt;delim&lt;/code&gt;) or hits the end of the stream. &lt;code&gt;std::ws&lt;/code&gt; is only used for discarding whitespace characters from the beginning of the stream.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;違いは、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;ignore(std::streamsize count = 1, int_type delim = Traits::eof())&lt;/code&gt; &lt;sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;3&lt;/font&gt;&lt;/font&gt;&lt;/sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;count&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;文字を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;破棄するか&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、区切り文字（2番目の引数&lt;/font&gt;&lt;/font&gt; &lt;code&gt;delim&lt;/code&gt; で&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;指定）を見つける&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;か、末尾に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;到達する&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;まで、無差別に文字を破棄することです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ストリームの。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::ws&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、ストリームの先頭から空白文字を破棄するためにのみ使用されます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="beb3607e8d8a4eda931f55fb5f54ea024fd0e1a5" translate="yes" xml:space="preserve">
          <source>The third condition is the one we're dealing with. Your input into &lt;code&gt;state&lt;/code&gt; is represented thusly:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;3番目の条件は、私たちが扱っているものです。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;state&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;への入力&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は次のように表されます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="be5b756cffe7eb6f28666a60b997bad4e4f0ff19" translate="yes" xml:space="preserve">
          <source>There's no way to stop this behavior of &lt;code&gt;std::getline()&lt;/code&gt;. What you'll have to do is discard the new line yourself before &lt;code&gt;std::getline()&lt;/code&gt; runs (but do it &lt;em&gt;after&lt;/em&gt; the formatted extraction). This can be done by using &lt;code&gt;ignore()&lt;/code&gt; to discard the rest of the input until we reach a fresh new line:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;std::getline()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この動作を停止する方法はありません&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::getline()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;実行&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;する前に、新しい行を自分で破棄する必要があります&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（ただし&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、フォーマットされた抽出の&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;後に&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;行います&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）。これを行うには、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;ignore()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用して&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、新しい行に達するまで残りの入力を破棄します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="de39c9c8eccb3d48cd77f434ca497754395456e5" translate="yes" xml:space="preserve">
          <source>This happens because an implicit line feed also known as newline character &lt;code&gt;\n&lt;/code&gt; is appended to all user input from a terminal as it's telling the stream to start a new line. You can safely account for this by using &lt;a href=&quot;http://en.cppreference.com/w/cpp/string/basic_string/getline&quot;&gt;&lt;code&gt;std::getline&lt;/code&gt;&lt;/a&gt; when checking for multiple lines of user input. The default behavior of &lt;code&gt;std::getline&lt;/code&gt; will read everything up to and including the newline character &lt;code&gt;\n&lt;/code&gt; from the input stream object which is &lt;code&gt;std::cin&lt;/code&gt; in this case.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、ストリームが新しい行を開始するように指示しているときに、端末からのすべてのユーザー入力に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;改行文字&lt;/font&gt;&lt;/font&gt; &lt;code&gt;\n&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;も呼ばれる暗黙的な改行&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が追加さ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;れるために発生します&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ユーザー入力の複数行をチェックするときに&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.cppreference.com/w/cpp/string/basic_string/getline&quot;&gt; &lt;code&gt;std::getline&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用することで、これを安全に説明&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;できます。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::getline&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;のデフォルトの動作は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、この場合&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt; &lt;code&gt;std::cin&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;で&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ある入力ストリームオブジェクトから&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;改行文字&lt;/font&gt;&lt;/font&gt; &lt;code&gt;\n&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;までの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;すべてを読み取ります&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c2f0e692274b5741fba942bfcca92c9d72b216ab" translate="yes" xml:space="preserve">
          <source>This has little to do with the input you provided yourself but rather with the default behavior &lt;code&gt;std::getline()&lt;/code&gt; exhibits. When you provided your input for the name (&lt;code&gt;std::cin &amp;gt;&amp;gt; name&lt;/code&gt;), you not only submitted the following characters, but also an implicit newline was appended to the stream:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは、あなた自身が提供した入力とはほとんど関係ありませんが、デフォルトの動作である&lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::getline()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;示します。名前（&lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::cin &amp;gt;&amp;gt; name&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;入力すると、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;次の文字だけでなく、暗黙的な改行もストリームに追加されます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="aead94030654d0d4376565f7c7d2c09982ef7a93" translate="yes" xml:space="preserve">
          <source>This is the overload of &lt;code&gt;std::getline()&lt;/code&gt; that you called:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;呼び出した&lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::getline()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;のオーバーロード&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2885605d4d66577c4326b3736993f9e0d974cf56" translate="yes" xml:space="preserve">
          <source>Unlike the formatted input operators, &lt;code&gt;std::getline()&lt;/code&gt; is an &lt;em&gt;unformatted&lt;/em&gt; input function. And all unformatted input functions have the following code somewhat in common:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;フォーマットされた入力演算子とは異なり、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::getline()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;フォーマットされていない&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;入力関数です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;また、すべてのフォーマットされていない入力関数には、次のコードがいくぶん共通しています。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7652cb2c60ebc2c8990bfa640aaa291d02b1e548" translate="yes" xml:space="preserve">
          <source>What I find is that the name has been successfully extracted, but not the state. Here is the input and resulting output:</source>
          <target state="translated">私が見つけたのは、名前は正常に抽出されていますが、状態は抽出されていないということです。以下が入力と結果の出力です。</target>
        </trans-unit>
        <trans-unit id="f484fecbd5602cfbd1cd7e1256c7746ee1c70397" translate="yes" xml:space="preserve">
          <source>Why does std::getline() skip input after a formatted extraction</source>
          <target state="translated">std::getline()がフォーマットされた抽出の後に入力をスキップするのはなぜですか?</target>
        </trans-unit>
        <trans-unit id="9a5b63c2c27331b350ca1f1ac9bc40e93e0def5f" translate="yes" xml:space="preserve">
          <source>Why does this happen?</source>
          <target state="translated">なぜこのようなことが起こるのでしょうか?</target>
        </trans-unit>
        <trans-unit id="48807d13b9d5be24aaf6ca75c32641493050f84e" translate="yes" xml:space="preserve">
          <source>Why has the name of the state been omitted from the output? I've given the proper input, but the code somehow ignores it. Why does this happen?</source>
          <target state="translated">なぜ出力された状態の名前が省略されているのでしょうか?適切な入力を与えたのに、コードはなぜか無視してしまいます。なぜこのようなことが起こるのでしょうか?</target>
        </trans-unit>
        <trans-unit id="c633f6012ce2a23b10616accc184e616c83199a2" translate="yes" xml:space="preserve">
          <source>You may have noticed that you don't typically run into this problem when extracting with the formatted input operator (&lt;code&gt;operator&amp;gt;&amp;gt;()&lt;/code&gt;). This is because input streams use whitespace as delimiters for input and have the &lt;code&gt;std::skipws&lt;/code&gt;&lt;sup&gt;1&lt;/sup&gt; manipulator set on by default. Streams will discard the leading whitespace from the stream when beginning to perform formatted input.&lt;sup&gt;2&lt;/sup&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;書式付き入力演算子（&lt;/font&gt;&lt;/font&gt; &lt;code&gt;operator&amp;gt;&amp;gt;()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）で&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;抽出する場合、通常この問題に遭遇しないことに気づいたかもしれません&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは、入力ストリームが入力の区切り文字として空白を使用&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;し、デフォルトで&lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::skipws&lt;/code&gt; &lt;sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;1&lt;/font&gt;&lt;/font&gt;&lt;/sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;マニピュレーターがオンになっているためです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ストリームは、フォーマットされた入力の実行を開始すると、ストリームから先頭の空白を破棄します。&lt;/font&gt;&lt;/font&gt;&lt;sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2&lt;/font&gt;&lt;/font&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="1b877967a4435b6ab378c6d234c358ea451509a3" translate="yes" xml:space="preserve">
          <source>You'll need to include &lt;code&gt;&amp;lt;limits&amp;gt;&lt;/code&gt; to use &lt;code&gt;std::numeric_limits&lt;/code&gt;. &lt;code&gt;std::basic_istream&amp;lt;...&amp;gt;::ignore()&lt;/code&gt; is a function that discards a specified amount of characters until it either finds a delimiter or reaches the end of the stream (&lt;code&gt;ignore()&lt;/code&gt; also discards the delimiter if it finds it). The &lt;code&gt;max()&lt;/code&gt; function returns the largest amount of characters that a stream can accept.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &lt;code&gt;std::numeric_limits&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;するには、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;&amp;lt;limits&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を含める必要があります&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt; &lt;code&gt;std::basic_istream&amp;lt;...&amp;gt;::ignore()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、区切り文字が見つかるか、ストリームの最後に到達するまで、指定された文字数を破棄する関数です（&lt;/font&gt; &lt;code&gt;ignore()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、区切り文字が見つかれば破棄します） 。&lt;/font&gt; &lt;code&gt;max()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;関数は、ストリームが受け入れることができる文字の最大量を返します。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3852f688831d420a220fab41247f52313cf624d3" translate="yes" xml:space="preserve">
          <source>[...] If &lt;code&gt;noskipws&lt;/code&gt; is zero and &lt;code&gt;is.flags() &amp;amp; ios_base::skipws&lt;/code&gt; is nonzero, the function extracts and discards each character as long as the next available input character &lt;code&gt;c&lt;/code&gt; is a whitespace character. [...]</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;[...] &lt;/font&gt;&lt;/font&gt; &lt;code&gt;noskipws&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;がゼロで、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;is.flags() &amp;amp; ios_base::skipws&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;がゼロ以外の場合、関数は、次に使用可能な入力文字&lt;/font&gt;&lt;/font&gt; &lt;code&gt;c&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が空白文字である&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;限り、各文字を抽出して破棄します&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;[...]&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">or</target>
        </trans-unit>
        <trans-unit id="f53a910c78329f1a95fd48bc21f823b8b460ee47" translate="yes" xml:space="preserve">
          <source>when submitting from a terminal. It is also used in files for moving toward the next line. The newline is left in the buffer after the extraction into &lt;code&gt;name&lt;/code&gt; until the next I/O operation where it is either discarded or consumed. When the flow of control reaches &lt;code&gt;std::getline()&lt;/code&gt;, the newline will be discarded, but the input will cease immediately. The reason this happens is because the default functionality of this function dictates that it should (it attempts to read a line and stops when it finds a newline).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;端末から送信する場合。次の行に移動するためのファイルでも使用されます。改行は、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;name&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;抽出された後、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;破棄または消費される次のI / O操作まで&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;バッファに残されます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。制御のフローが&lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::getline()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;到達&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;すると、改行は破棄されますが、入力はすぐに停止します。これが発生する理由は、この関数のデフォルトの機能が必要であることを示しているためです（行を読み取ろうとし、改行が見つかると停止します）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="71669d4354037a18ace2fdfc8f29b7515fffc4e7" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;next_pointer&lt;/code&gt; is the next character to be parsed. Since the character stored at the next position in the input sequence is the delimiter, &lt;code&gt;std::getline()&lt;/code&gt; will quietly discard that character, increment &lt;code&gt;next_pointer&lt;/code&gt; to the next available character, and stop input. This means that the rest of the characters that you have provided still remain in the buffer for the next I/O operation. You'll notice that if you perform another read from the line into &lt;code&gt;state&lt;/code&gt;, your extraction will yield the correct result as the last call to &lt;code&gt;std::getline()&lt;/code&gt; discarded the delimiter.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここで、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;next_pointer&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は解析される次の文字です。入力シーケンスの次の位置に格納されている文字が区切り文字であるため、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::getline()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はその文字を静かに破棄し、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;next_pointer&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を次の使用可能な文字に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;インクリメント&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;して、入力を停止します。つまり、指定した残りの文字は、次のI / O操作のためにバッファに残ります。この行から&lt;/font&gt;&lt;/font&gt; &lt;code&gt;state&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;への別の読み取りを実行する&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::getline()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;への最後の呼び出しで&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;区切り文字が破棄さ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;れたため、抽出により正しい結果が得られることが&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;わかり&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
