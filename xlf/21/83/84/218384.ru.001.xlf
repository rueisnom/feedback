<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://stackoverflow.com/questions/218384">
    <body>
      <group id="218384">
        <trans-unit id="46c79bb66ada9c56c9356e3a5d4614b774e8bdc4" translate="yes" xml:space="preserve">
          <source>&quot;Test.java:4&quot; gives the source filename of the class, AND it tells us that the statement where this occurred is in line 4 of the file.</source>
          <target state="translated">&quot;Test.java:4&quot; дает имя исходного файла класса,И говорит нам,что утверждение,где это произошло,находится в 4-й строке файла.</target>
        </trans-unit>
        <trans-unit id="f8604be0c3c1ed69f32edb319a462c6359c0f2ff" translate="yes" xml:space="preserve">
          <source>&quot;at Test.main&quot; says that we were in the &lt;code&gt;main&lt;/code&gt; method of the &lt;code&gt;Test&lt;/code&gt; class.</source>
          <target state="translated">&amp;laquo;at Test.main&amp;raquo; говорит, что мы были в &lt;code&gt;main&lt;/code&gt; методе класса &lt;code&gt;Test&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="12c1a4fa7b528e612a2c55a656eae759beb053c2" translate="yes" xml:space="preserve">
          <source>(This is a technicality, but I think it bears mentioning: A reference that points to null isn't the same as a C pointer that points to an invalid memory location.  A null pointer is literally not pointing &lt;em&gt;anywhere&lt;/em&gt;, which is subtly different than pointing to a location that happens to be invalid.)</source>
          <target state="translated">(Это техническая задача, но я думаю, что стоит упомянуть: ссылка, указывающая на ноль, не совпадает с указателем C, указывающим на недопустимое расположение в памяти. Нулевой указатель буквально &lt;em&gt;никуда&lt;/em&gt; не указывает, что несколько отличается от указывая на местоположение, которое оказывается недействительным.)</target>
        </trans-unit>
        <trans-unit id="3728b911d50de4ab1fcf39dee7550bebda59d186" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NullPointerException&lt;/code&gt;s are exceptions that occur when you try to use a reference that points to no location in memory (null) as though it were referencing an object.  Calling a method on a null reference or trying to access a field of a null reference will trigger a &lt;code&gt;NullPointerException&lt;/code&gt;.  These are the most common, but other ways are listed on the &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/NullPointerException.html&quot;&gt;&lt;code&gt;NullPointerException&lt;/code&gt;&lt;/a&gt; javadoc page.</source>
          <target state="translated">&lt;code&gt;NullPointerException&lt;/code&gt; - это исключения, которые возникают, когда вы пытаетесь использовать ссылку, которая указывает на отсутствие места в памяти (null), как если бы оно ссылалось на объект. Вызов метода с нулевой ссылкой или попытка доступа к полю с нулевой ссылкой вызовет &lt;code&gt;NullPointerException&lt;/code&gt; . Это наиболее распространенные, но другие способы перечислены на странице javadoc &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/NullPointerException.html&quot;&gt; &lt;code&gt;NullPointerException&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="49dafbcd2fe39c57babb5928a1f4a08427635d46" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Identify the null values&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Определить нулевые значения&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="551e0b7660ec60a1ba024654ebf85dd6e11ea8a2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Смотрите также:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a2fb070431451825a43dbcb68523c4e1049f4a93" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Summary:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Summary:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7654b80f753ecf9a584b54f4799cf0bb000071db" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Trace where these values come from&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Трассировка, откуда берутся эти значения&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2bed1aff07e6c53e21f30814c172aaa955a67f89" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Trace where these values should be set&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Трассировка, где должны быть установлены эти значения&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b2d6017504b728ef2dbcbb062072c2f986d225f4" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;1 - Not quite true. There are things called nested exceptions...&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;1 - не совсем верно.&lt;/sup&gt; &lt;sup&gt;Есть вещи, называемые вложенными исключениями ...&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="09098c16c787fffa3d5bef267be27f9b94eec756" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;This particular NPE can be avoided if the comparison order is reversed; namely, use &lt;code&gt;.equals&lt;/code&gt; on a guaranteed non-null object.&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;Этого конкретного NPE можно избежать, если порядок сравнения меняется на противоположный;&lt;/sup&gt; &lt;sup&gt;а именно, используйте &lt;code&gt;.equals&lt;/code&gt; для гарантированного ненулевого объекта.&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="230dd3a64393775192474761fa0c5cca37186f78" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;NullPointerException&lt;/code&gt; is thrown at runtime whenever your program attempts to use a &lt;code&gt;null&lt;/code&gt; as if it was a real reference. For example, if you write this:</source>
          <target state="translated">&lt;code&gt;NullPointerException&lt;/code&gt; генерируется во время выполнения всякий раз, когда ваша программа пытается использовать &lt;code&gt;null&lt;/code&gt; как если бы оно было реальной ссылкой. Например, если вы напишите это:</target>
        </trans-unit>
        <trans-unit id="a9e0552c7dd394c9a31c99c24d2f880c9a4d06fd" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;null&lt;/code&gt; pointer is one that points to nowhere.  When you dereference a pointer &lt;code&gt;p&lt;/code&gt;, you say &quot;give me the data at the location stored in &quot;p&quot;.  When &lt;code&gt;p&lt;/code&gt; is a &lt;code&gt;null&lt;/code&gt; pointer, the location stored in &lt;code&gt;p&lt;/code&gt; is &lt;code&gt;nowhere&lt;/code&gt;, you're saying &quot;give me the data at the location 'nowhere'&quot;.  Obviously, it can't do this, so it throws a &lt;code&gt;null pointer exception&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; указатель - это указатель, который указывает на никуда. Когда вы разыменовываете указатель &lt;code&gt;p&lt;/code&gt; , вы говорите: &amp;laquo;дайте мне данные в месте, сохраненном в&amp;laquo; p &amp;raquo;. Когда &lt;code&gt;p&lt;/code&gt; - &lt;code&gt;null&lt;/code&gt; указатель, местоположение, сохраненное в &lt;code&gt;p&lt;/code&gt; , &lt;code&gt;nowhere&lt;/code&gt; , вы говорите:&amp;laquo; дайте мне данные в этом месте &amp;raquo; &amp;laquo;Нигде&amp;raquo; &amp;raquo;. Очевидно, он не может этого сделать, поэтому он &lt;code&gt;null pointer exception&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d6c4c5d7a89d4a6783980274bfbadea09013a5b5" translate="yes" xml:space="preserve">
          <source>A good place to start is the &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/lang/NullPointerException.html&quot;&gt;JavaDocs&lt;/a&gt;. They have this covered:</source>
          <target state="translated">Хорошее место для начала - &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/lang/NullPointerException.html&quot;&gt;JavaDocs&lt;/a&gt; . У них есть это покрыто:</target>
        </trans-unit>
        <trans-unit id="2e2d1cdef73de0035e0ec0fce5be6a96a237140d" translate="yes" xml:space="preserve">
          <source>A lot of explanations are already present to explain how it happens and how to fix it, but you should also follow &lt;strong&gt;best practices&lt;/strong&gt; to avoid &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/NullPointerException.html&quot;&gt;&lt;code&gt;NullPointerException&lt;/code&gt;&lt;/a&gt;s at all.</source>
          <target state="translated">Уже есть много объяснений, объясняющих, как это происходит и как это исправить, но вы также должны следовать &lt;strong&gt;рекомендациям,&lt;/strong&gt; чтобы вообще избежать исключений &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/NullPointerException.html&quot;&gt; &lt;code&gt;NullPointerException&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="638d693f2f038480214d58b990af25de39a3580e" translate="yes" xml:space="preserve">
          <source>A null pointer exception is an indicator that you are using an object without initializing it.</source>
          <target state="translated">Исключение нулевого указателя-это индикатор того,что вы используете объект без его инициализации.</target>
        </trans-unit>
        <trans-unit id="b54dde997bbaa1c77cec63081960af235d128fa6" translate="yes" xml:space="preserve">
          <source>A null pointer exception is thrown when an application attempts to use null in a case where an object is required. These include:</source>
          <target state="translated">Исключение нулевого указателя бросается,когда приложение пытается использовать нулевой указатель в случае,когда требуется объект.К ним относятся:</target>
        </trans-unit>
        <trans-unit id="63cfcf1fbbdb802eace27ba6ed8669bc6cd6c3d1" translate="yes" xml:space="preserve">
          <source>Accessing or modifying the field of a &lt;code&gt;null&lt;/code&gt; object.</source>
          <target state="translated">Доступ или изменение поля &lt;code&gt;null&lt;/code&gt; объекта.</target>
        </trans-unit>
        <trans-unit id="7bec35c01df22161ef1985731a3e114df5d788b9" translate="yes" xml:space="preserve">
          <source>Accessing or modifying the field of a null object.</source>
          <target state="translated">Доступ к полю нулевого объекта или его изменение.</target>
        </trans-unit>
        <trans-unit id="081b055d444278a91fcdc52fd056525afd4590b2" translate="yes" xml:space="preserve">
          <source>Accessing or modifying the slots of &lt;code&gt;null&lt;/code&gt; as if it were an array.</source>
          <target state="translated">Доступ или изменение &lt;code&gt;null&lt;/code&gt; слотов, как если бы это был массив.</target>
        </trans-unit>
        <trans-unit id="3071a717183323279cc12121c92bbf3a0674c2d0" translate="yes" xml:space="preserve">
          <source>Accessing or modifying the slots of null as if it were an array.</source>
          <target state="translated">Доступ к нулевым слотам или их изменение,как если бы это был массив.</target>
        </trans-unit>
        <trans-unit id="3c82e5aec8823b4eada017e77cc5f6f29a9a4682" translate="yes" xml:space="preserve">
          <source>All elements inside of an array &lt;a href=&quot;http://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html#jls-4.12.5&quot;&gt;are initialized to their common initial value&lt;/a&gt;; for any type of object array, that means that all elements are &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">Все элементы внутри массива &lt;a href=&quot;http://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html#jls-4.12.5&quot;&gt;инициализируются своим общим начальным значением&lt;/a&gt; ; для любого типа массива объектов это означает, что все элементы являются &lt;code&gt;null&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d5256dfc3f6349ad33fe733f72303dfc4540eb37" translate="yes" xml:space="preserve">
          <source>Alternatively, there may be cases where the purpose of the method is not solely to operate on the passed in object, and therefore a null parameter may be acceptable. In this case, you would need to check for a &lt;strong&gt;null parameter&lt;/strong&gt; and behave differently. You should also explain this in the documentation. For example, &lt;code&gt;doSomething()&lt;/code&gt; could be written as:</source>
          <target state="translated">Альтернативно, могут быть случаи, когда целью метода является не только работа с переданным объектом, и поэтому нулевой параметр может быть приемлемым. В этом случае вам нужно будет проверить &lt;strong&gt;нулевой параметр&lt;/strong&gt; и вести себя по-другому. Вы также должны объяснить это в документации. Например, &lt;code&gt;doSomething()&lt;/code&gt; можно записать так:</target>
        </trans-unit>
        <trans-unit id="c610b12b0bdb7da0de89b6112dad5051859e5f8a" translate="yes" xml:space="preserve">
          <source>And on another place in your code:</source>
          <target state="translated">И в другом месте твоего кода:</target>
        </trans-unit>
        <trans-unit id="fec17b583e2fe54653432fe84eafb118f367f489" translate="yes" xml:space="preserve">
          <source>Another occurrence of a &lt;code&gt;NullPointerException&lt;/code&gt; occurs when one declares an object array, then immediately tries to dereference elements inside of it.</source>
          <target state="translated">Другое возникновение &lt;code&gt;NullPointerException&lt;/code&gt; происходит, когда кто-либо объявляет массив объектов, а затем немедленно пытается разыменовать элементы внутри него.</target>
        </trans-unit>
        <trans-unit id="ec98bf54606e720fcaaa69af937b822723782a2b" translate="yes" xml:space="preserve">
          <source>Applications should throw instances of this class to indicate other
  illegal uses of the null object.</source>
          <target state="translated">Приложения должны бросать экземпляры этого класса для указания на другие незаконные использования нулевого объекта.</target>
        </trans-unit>
        <trans-unit id="bc2a7a3d52ad00a39aa87d3ee50b3aaad37ba8df" translate="yes" xml:space="preserve">
          <source>Applications should throw instances of this class to indicate other illegal uses of the &lt;code&gt;null&lt;/code&gt; object.</source>
          <target state="translated">Приложения должны генерировать экземпляры этого класса, чтобы указать на другое незаконное использование &lt;code&gt;null&lt;/code&gt; объекта.</target>
        </trans-unit>
        <trans-unit id="3bb9c94bc952d51ad045ffee95f408bcacb6ca66" translate="yes" xml:space="preserve">
          <source>As you should know, Java types are divided into &lt;em&gt;primitive types&lt;/em&gt; (&lt;code&gt;boolean&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, etc.) and &lt;em&gt;reference types&lt;/em&gt;. Reference types in Java allow you to use the special value &lt;code&gt;null&lt;/code&gt; which is the Java way of saying &quot;no object&quot;.</source>
          <target state="translated">Как вы должны знать, типы Java делятся на &lt;em&gt;примитивные типы&lt;/em&gt; ( &lt;code&gt;boolean&lt;/code&gt; , &lt;code&gt;int&lt;/code&gt; и т. Д.) И &lt;em&gt;ссылочные типы&lt;/em&gt; . Ссылочные типы в Java позволяют вам использовать специальное значение &lt;code&gt;null&lt;/code&gt; , которое в Java означает &amp;laquo;нет объекта&amp;raquo;.</target>
        </trans-unit>
        <trans-unit id="56bc238aac80b83b0ad417696ff3ad35156f1e99" translate="yes" xml:space="preserve">
          <source>At this time you have just &lt;strong&gt;declared&lt;/strong&gt; this object but not &lt;strong&gt;initialized or instantiated&lt;/strong&gt;. And whenever you try to access any property or method in it, it will throw  &lt;code&gt;NullPointerException&lt;/code&gt; which makes sense.</source>
          <target state="translated">В настоящее время вы только что &lt;strong&gt;объявили&lt;/strong&gt; этот объект, но не &lt;strong&gt;инициализировали или не создали его&lt;/strong&gt; . И всякий раз, когда вы пытаетесь получить доступ к какому-либо свойству или методу, оно &lt;code&gt;NullPointerException&lt;/code&gt; которое имеет смысл.</target>
        </trans-unit>
        <trans-unit id="c3ca15f5dab40cddc958cc899caa21a2ead819af" translate="yes" xml:space="preserve">
          <source>Avoid returning null in methods, for example returning empty collections when applicable.</source>
          <target state="translated">Избегайте возврата нуля в методах,например,возврата пустых коллекций,когда это применимо.</target>
        </trans-unit>
        <trans-unit id="5bf95245956d03bfda307dee31c95faa928638e7" translate="yes" xml:space="preserve">
          <source>Avoiding &amp;ldquo;!= null&amp;rdquo; statements in Java?</source>
          <target state="translated">Избегать операторов &amp;laquo;! = Null&amp;raquo; в Java?</target>
        </trans-unit>
        <trans-unit id="e712d8332074c0bc1572f647f4af0f2ae63f7453" translate="yes" xml:space="preserve">
          <source>Because you are using &lt;code&gt;student&lt;/code&gt;, but you forgot to initialize it like in the
correct code shown below:</source>
          <target state="translated">Потому что вы используете &lt;code&gt;student&lt;/code&gt; , но вы забыли инициализировать его, как показано в следующем коде:</target>
        </trans-unit>
        <trans-unit id="b92e2b55b4354330a3c96dc3a92d018a12ff9a30" translate="yes" xml:space="preserve">
          <source>But (I hear you say) what if the NPE was thrown inside the &lt;code&gt;length()&lt;/code&gt; method call?</source>
          <target state="translated">Но (я слышу, вы говорите), что если NPE был брошен в вызов метода &lt;code&gt;length()&lt;/code&gt; ?</target>
        </trans-unit>
        <trans-unit id="70de7c517ab05f22376120259b795a5d367579bd" translate="yes" xml:space="preserve">
          <source>But, when you try to declare a reference &lt;em&gt;type&lt;/em&gt;, something different happens. Take the following code:</source>
          <target state="translated">Но когда вы пытаетесь объявить ссылочный &lt;em&gt;тип&lt;/em&gt; , происходит что-то другое. Возьмите следующий код:</target>
        </trans-unit>
        <trans-unit id="3b760c60d971f57b8c1e7ecdfb80c460f606d442" translate="yes" xml:space="preserve">
          <source>Calling the instance method of a &lt;code&gt;null&lt;/code&gt; object.</source>
          <target state="translated">Вызов метода экземпляра &lt;code&gt;null&lt;/code&gt; объекта.</target>
        </trans-unit>
        <trans-unit id="634a22d75f5bdbe844d7fa3fc013a702dcded4d8" translate="yes" xml:space="preserve">
          <source>Calling the instance method of a null object.</source>
          <target state="translated">Вызов метода экземпляра нулевого объекта.</target>
        </trans-unit>
        <trans-unit id="2a0a9d9e68fd881b18d0b16e39eef09d5cd31ae1" translate="yes" xml:space="preserve">
          <source>Declaration: &lt;code&gt;Item item[] = new Item[5];&lt;/code&gt;</source>
          <target state="translated">Декларация: &lt;code&gt;Item item[] = new Item[5];&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="019ac43ed7ec529c737b8e34b517aec2236183b6" translate="yes" xml:space="preserve">
          <source>Declaration: &lt;code&gt;Object object;&lt;/code&gt;</source>
          <target state="translated">Объявление: &lt;code&gt;Object object;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0c746af47b00ccd6d6e07567df1b2eaa4c74bbcd" translate="yes" xml:space="preserve">
          <source>Declare</source>
          <target state="translated">Declare</target>
        </trans-unit>
        <trans-unit id="90599a45b68a2a1c4b1602b265e701d17c3453c2" translate="yes" xml:space="preserve">
          <source>Dereferencing usually happens when using &lt;code&gt;.&lt;/code&gt; to access a method or field, or using &lt;code&gt;[&lt;/code&gt; to index an array.</source>
          <target state="translated">Разыменование обычно происходит при использовании &lt;code&gt;.&lt;/code&gt; получить доступ к методу или полю или использовать &lt;code&gt;[&lt;/code&gt; для индексации массива.</target>
        </trans-unit>
        <trans-unit id="d1d4b339edce051f7810e587e0c51e16ae74146a" translate="yes" xml:space="preserve">
          <source>Either the &lt;code&gt;print&lt;/code&gt; or &lt;code&gt;printString&lt;/code&gt; method can &lt;em&gt;check for null&lt;/em&gt;, for example:</source>
          <target state="translated">Метод &lt;code&gt;print&lt;/code&gt; или &lt;code&gt;printString&lt;/code&gt; может &lt;em&gt;проверять наличие нуля&lt;/em&gt; , например:</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="37aefda29876d0fc65311b06db99106714c1d07e" translate="yes" xml:space="preserve">
          <source>Fail fast and use asserts to avoid propagation of null objects through the whole application when they shouldn't be null.</source>
          <target state="translated">Быстро отказываются и используют утверждения,чтобы избежать распространения нулевых объектов через все приложение,когда они не должны быть нулевыми.</target>
        </trans-unit>
        <trans-unit id="c1fb00189acb7a631f566fbdba728784b7fb6217" translate="yes" xml:space="preserve">
          <source>Finally, &lt;a href=&quot;https://stackoverflow.com/q/3988788/2775450&quot;&gt;How to pinpoint the exception &amp;amp; cause using Stack Trace&lt;/a&gt;</source>
          <target state="translated">Наконец, &lt;a href=&quot;https://stackoverflow.com/q/3988788/2775450&quot;&gt;как определить исключение и причину, используя Stack Trace&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e523347a7b87520e096c7d1a14d92c4714f695c7" translate="yes" xml:space="preserve">
          <source>First observation: the compilation succeeds! The problem in the program is NOT a compilation error. It is a &lt;em&gt;runtime&lt;/em&gt; error. (Some IDEs may warn your program will always throw an exception ... but the standard &lt;code&gt;javac&lt;/code&gt; compiler doesn't.)</source>
          <target state="translated">Первое наблюдение: компиляция удалась! Проблема в программе НЕ является ошибкой компиляции. Это ошибка во &lt;em&gt;время выполнения&lt;/em&gt; . (Некоторые IDE могут предупредить, что ваша программа всегда выдает исключение ... но стандартный компилятор &lt;code&gt;javac&lt;/code&gt; этого не делает.)</target>
        </trans-unit>
        <trans-unit id="8034a9b3e958bafca5b80be28a9299b4df2a9530" translate="yes" xml:space="preserve">
          <source>For example, below is a student class which will use it in our code.</source>
          <target state="translated">Например,ниже приведен студенческий класс,который будет использовать его в нашем коде.</target>
        </trans-unit>
        <trans-unit id="369b0266a6a685e58d0bf30452751bfdd1e0a29b" translate="yes" xml:space="preserve">
          <source>For instance, you may have a method as follows:</source>
          <target state="translated">Например,у вас может быть следующий метод:</target>
        </trans-unit>
        <trans-unit id="e426a7d0a0945c9b135618483f0d59c549ba4902" translate="yes" xml:space="preserve">
          <source>Here, we see that the exception is thrown on line 13 (in the &lt;code&gt;printString&lt;/code&gt; method). Look at the line and check which values are null by
adding &lt;em&gt;logging statements&lt;/em&gt; or using a &lt;em&gt;debugger&lt;/em&gt;. We find out that &lt;code&gt;s&lt;/code&gt; is null, and calling the &lt;code&gt;length&lt;/code&gt; method on it throws the exception. We can see that the program stops throwing the exception when &lt;code&gt;s.length()&lt;/code&gt; is removed from the method.</source>
          <target state="translated">Здесь мы видим, что исключение &lt;code&gt;printString&lt;/code&gt; строке 13 (в методе printString ). Посмотрите на строку и проверьте, какие значения являются нулевыми, добавив &lt;em&gt;операторы регистрации&lt;/em&gt; или используя &lt;em&gt;отладчик&lt;/em&gt; . Мы выясняем, что &lt;code&gt;s&lt;/code&gt; имеет значение null, и вызов метода &lt;code&gt;length&lt;/code&gt; для него вызывает исключение. Мы видим, что программа перестает генерировать исключение, когда &lt;code&gt;s.length()&lt;/code&gt; удаляется из метода.</target>
        </trans-unit>
        <trans-unit id="24b11a882fed564b0eb9222ebda986752854af8c" translate="yes" xml:space="preserve">
          <source>How can that throw an NPE?</source>
          <target state="translated">Как это может бросить NPE?</target>
        </trans-unit>
        <trans-unit id="61b251a05ff88cf9158093feb2fc5a5c219ef28a" translate="yes" xml:space="preserve">
          <source>How do I fix it?</source>
          <target state="translated">Как мне это исправить?</target>
        </trans-unit>
        <trans-unit id="327df277bc05aac18f0fa7fb4e2e987135c7512d" translate="yes" xml:space="preserve">
          <source>I still can't find the problem</source>
          <target state="translated">Я до сих пор не могу найти проблему</target>
        </trans-unit>
        <trans-unit id="66b032c360e09ab3e68584d1ba075e1987c06cf7" translate="yes" xml:space="preserve">
          <source>I would add, very important, make a good use of the &lt;code&gt;final&lt;/code&gt; modifier.
&lt;a href=&quot;https://stackoverflow.com/questions/137868/using-final-modifier-whenever-applicable-in-java&quot;&gt;Using the &quot;final&quot; modifier whenever applicable in Java&lt;/a&gt;</source>
          <target state="translated">Я бы добавил, что очень важно, хорошо использовать &lt;code&gt;final&lt;/code&gt; модификатор. &lt;a href=&quot;https://stackoverflow.com/questions/137868/using-final-modifier-whenever-applicable-in-java&quot;&gt;Использование модификатора &quot;final&quot;, когда это применимо в Java&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6308f70b4f0ae15d5eb767dca1766a9e484da9fb" translate="yes" xml:space="preserve">
          <source>If the exception has an associated error message, that will be output after the exception name. &lt;code&gt;NullPointerException&lt;/code&gt; is unusual in this respect, because it rarely has an error message.</source>
          <target state="translated">Если с исключением связано сообщение об ошибке, оно будет выведено после имени исключения. &lt;code&gt;NullPointerException&lt;/code&gt; необычен в этом отношении, потому что он редко имеет сообщение об ошибке.</target>
        </trans-unit>
        <trans-unit id="fb26238ed800420e5c53a71b6bf0a0b7a52eaeb2" translate="yes" xml:space="preserve">
          <source>If the value of &lt;code&gt;bar&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; then &lt;code&gt;bar[pos]&lt;/code&gt; will throw an NPE.</source>
          <target state="translated">Если значение &lt;code&gt;bar&lt;/code&gt; равно &lt;code&gt;null&lt;/code&gt; то &lt;code&gt;bar[pos]&lt;/code&gt; выбросит NPE.</target>
        </trans-unit>
        <trans-unit id="37e77872a7e487d9afdbefdbf2345bfd255ec57b" translate="yes" xml:space="preserve">
          <source>If the value of &lt;code&gt;bar[pos]&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; then calling &lt;code&gt;length()&lt;/code&gt; on it will throw an NPE.</source>
          <target state="translated">Если значение &lt;code&gt;bar[pos]&lt;/code&gt; равно &lt;code&gt;null&lt;/code&gt; то вызов функции &lt;code&gt;length()&lt;/code&gt; вызовет NPE.</target>
        </trans-unit>
        <trans-unit id="2fb4addbf00588879005cb609de5d3b982823f43" translate="yes" xml:space="preserve">
          <source>If you are not giving the initialization section then the &lt;code&gt;NullPointerException&lt;/code&gt; arise.</source>
          <target state="translated">Если вы не передаете раздел инициализации, возникает &lt;code&gt;NullPointerException&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e65cd02770e6747d2781dbef1dbe7a0838997ff2" translate="yes" xml:space="preserve">
          <source>If you attempt to dereference &lt;code&gt;num&lt;/code&gt; BEFORE creating the object you get a &lt;code&gt;NullPointerException&lt;/code&gt;. In the most trivial cases, the compiler will catch the problem and let you know that &quot;&lt;code&gt;num may not have been initialized&lt;/code&gt;,&quot; but sometimes you may write code that does not directly create the object.</source>
          <target state="translated">Если вы попытаетесь разыменовать &lt;code&gt;num&lt;/code&gt; ДО создания объекта, вы получите &lt;code&gt;NullPointerException&lt;/code&gt; . В самых тривиальных случаях компилятор поймает проблему и сообщит, что &amp;laquo; &lt;code&gt;num may not have been initialized&lt;/code&gt; &amp;raquo;, но иногда вы можете написать код, который не создает объект напрямую.</target>
        </trans-unit>
        <trans-unit id="b405ab91b8fae348c65830646a2f15cfa73ec595" translate="yes" xml:space="preserve">
          <source>If you count the lines in the file above, line 4 is the one that I labeled with the &quot;HERE&quot; comment.</source>
          <target state="translated">Если считать строки в файле выше,то 4-я строка-это та,которую я пометил комментарием &quot;ЗДЕСЬ&quot;.</target>
        </trans-unit>
        <trans-unit id="a3f749cff981330fc865245f1db404f2d1866f2b" translate="yes" xml:space="preserve">
          <source>If you tried to debug the problem and still don't have a solution, you can post a question for more help, but make sure to include what you've tried so far. At a minimum, &lt;strong&gt;include the stacktrace&lt;/strong&gt; in the question, and &lt;strong&gt;mark the important line numbers&lt;/strong&gt; in the code. Also, try simplifying the code first (see &lt;a href=&quot;http://sscce.org/&quot;&gt;SSCCE&lt;/a&gt;).</source>
          <target state="translated">Если вы попытались отладить проблему и все еще не нашли решения, вы можете опубликовать вопрос для получения дополнительной помощи, но обязательно укажите, что вы уже пробовали. Как минимум, &lt;strong&gt;включите&lt;/strong&gt; в вопрос &lt;strong&gt;трассировку стека&lt;/strong&gt; и &lt;strong&gt;отметьте важные номера строк&lt;/strong&gt; в коде. Кроме того, попробуйте сначала упростить код (см. &lt;a href=&quot;http://sscce.org/&quot;&gt;SSCCE&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="d37b6038f9a6cd2dff562dfe87901f623ec47b9e" translate="yes" xml:space="preserve">
          <source>If you want to use any object then you have two phases:</source>
          <target state="translated">Если вы хотите использовать любой объект,то у вас есть две фазы:</target>
        </trans-unit>
        <trans-unit id="9d544f7bccdff6bb68a69fb25d6a390dd45d80a2" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;http://en.wikipedia.org/wiki/Java_%28programming_language%29&quot;&gt;Java&lt;/a&gt; all the variables you declare are actually &quot;references&quot; to the objects (or primitives) and not the objects themselves.</source>
          <target state="translated">В &lt;a href=&quot;http://en.wikipedia.org/wiki/Java_%28programming_language%29&quot;&gt;Java&lt;/a&gt; все переменные, которые вы объявляете, на самом деле являются &amp;laquo;ссылками&amp;raquo; на объекты (или примитивы), а не на сами объекты.</target>
        </trans-unit>
        <trans-unit id="758063698f54411c5380c94bde31ca08d17694ea" translate="yes" xml:space="preserve">
          <source>In Java, everything (excluding primitive types) is in the form of a class.</source>
          <target state="translated">В Java все (за исключением примитивных типов)находится в виде класса.</target>
        </trans-unit>
        <trans-unit id="2d1e8941405e95d8f2a50326004d775c905ad0da" translate="yes" xml:space="preserve">
          <source>In fact there is only one way: it can only happen if &lt;code&gt;foo&lt;/code&gt; has the value &lt;code&gt;null&lt;/code&gt;.  We then try to run the &lt;code&gt;length()&lt;/code&gt; method on &lt;code&gt;null&lt;/code&gt; and .... BANG!</source>
          <target state="translated">На самом деле есть только один способ: это может произойти, только если &lt;code&gt;foo&lt;/code&gt; имеет значение &lt;code&gt;null&lt;/code&gt; . Затем мы пытаемся запустить метод &lt;code&gt;length()&lt;/code&gt; для &lt;code&gt;null&lt;/code&gt; и .... BANG!</target>
        </trans-unit>
        <trans-unit id="e072b7c921ded7d305ef1e675e84ddd558ea97ee" translate="yes" xml:space="preserve">
          <source>In general, it's because something hasn't been initialized properly.</source>
          <target state="translated">В общем,это потому,что что что-то не было правильно инициализировано.</target>
        </trans-unit>
        <trans-unit id="e84992bf73e77db6c21133edfc7e60f3abe481d5" translate="yes" xml:space="preserve">
          <source>In short the stack trace will tell us unambiguously which statement of the program has thrown the NPE.</source>
          <target state="translated">Короче говоря,трасса стека однозначно скажет нам,какое утверждение программы выбросило NPE.</target>
        </trans-unit>
        <trans-unit id="ff129ea13cbf7d94f4945873a0e66ab25fb80786" translate="yes" xml:space="preserve">
          <source>In the second line, the &lt;code&gt;new&lt;/code&gt; keyword is used to instantiate (or create) an object of type &lt;code&gt;Integer&lt;/code&gt; and the pointer variable &lt;code&gt;num&lt;/code&gt; is assigned to that &lt;code&gt;Integer&lt;/code&gt; object.</source>
          <target state="translated">Во второй строке &lt;code&gt;new&lt;/code&gt; ключевое слово используется для создания экземпляра (или создания) объекта типа &lt;code&gt;Integer&lt;/code&gt; , и переменная-указатель &lt;code&gt;num&lt;/code&gt; назначается этому объекту &lt;code&gt;Integer&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f88263ab738c6ace334b24405051e63bb3e43df8" translate="yes" xml:space="preserve">
          <source>In this example, the variable &lt;code&gt;x&lt;/code&gt; is an &lt;code&gt;int&lt;/code&gt; and Java will initialize it to &lt;code&gt;0&lt;/code&gt; for you. When you assign it the value of &lt;code&gt;10&lt;/code&gt; on the second line, your value of &lt;code&gt;10&lt;/code&gt; is written into the memory location referred to by &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">В этом примере переменная &lt;code&gt;x&lt;/code&gt; является &lt;code&gt;int&lt;/code&gt; , и Java инициализирует ее для &lt;code&gt;0&lt;/code&gt; для вас. Когда вы присваиваете значение &lt;code&gt;10&lt;/code&gt; во второй строке, ваше значение &lt;code&gt;10&lt;/code&gt; записывается в ячейку памяти, на которую ссылается &lt;code&gt;x&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="58e9dc951da0b9f4f2e75e6349c8988645b66556" translate="yes" xml:space="preserve">
          <source>In which case, &lt;code&gt;obj&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;. If the method is intended to do something to the passed-in object, it is appropriate to throw the &lt;code&gt;NullPointerException&lt;/code&gt; because it's a programmer error and the programmer will need that information for debugging purposes.  Please include the name of the object variable in the exception message, like</source>
          <target state="translated">В этом случае &lt;code&gt;obj&lt;/code&gt; является &lt;code&gt;null&lt;/code&gt; . Если метод предназначен для того, чтобы что-то сделать с переданным объектом, целесообразно &lt;code&gt;NullPointerException&lt;/code&gt; поскольку это ошибка программиста, и программисту эта информация понадобится для целей отладки. Пожалуйста, включите имя переменной объекта в сообщение об исключении, например</target>
        </trans-unit>
        <trans-unit id="eaa842988aa6b70454294a66ea91b95dd8434276" translate="yes" xml:space="preserve">
          <source>In which case, you are not creating the object &lt;code&gt;obj&lt;/code&gt;, but rather assuming that it was created before the &lt;code&gt;doSomething()&lt;/code&gt; method was called. Note, it is possible to call the method like this:</source>
          <target state="translated">В этом случае вы не создаете объект &lt;code&gt;obj&lt;/code&gt; , а скорее предполагаете, что он был создан до &lt;code&gt;doSomething()&lt;/code&gt; метода doSomething () . Обратите внимание, что метод можно вызвать так:</target>
        </trans-unit>
        <trans-unit id="0ef62b29237cb984a3dfc705f60d31635eca26a1" translate="yes" xml:space="preserve">
          <source>Indeed it is! And that is the problem. When we initialize like this:</source>
          <target state="translated">Ещё бы! В этом-то и проблема.Когда мы инициализируем так:</target>
        </trans-unit>
        <trans-unit id="68fa16ffd48f366e4fa8d57fea78ff03fcab0191" translate="yes" xml:space="preserve">
          <source>Initialization</source>
          <target state="translated">Initialization</target>
        </trans-unit>
        <trans-unit id="dd695f048156244b311843d310329edc10ad3530" translate="yes" xml:space="preserve">
          <source>Initialization: &lt;code&gt;item[0] = new Item();&lt;/code&gt;</source>
          <target state="translated">Инициализация: &lt;code&gt;item[0] = new Item();&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fa4a5d2f4df0ef578634d30eb2c60e497f43b6cf" translate="yes" xml:space="preserve">
          <source>Initialization: &lt;code&gt;object = new Object();&lt;/code&gt;</source>
          <target state="translated">Инициализация: &lt;code&gt;object = new Object();&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1926c212a3dc9c16b0c0d64823cf41cde00923e6" translate="yes" xml:space="preserve">
          <source>It is also the case that if you attempt to use a null reference with &lt;code&gt;synchronized&lt;/code&gt;, that will also throw this exception, &lt;a href=&quot;https://docs.oracle.com/javase/specs/jls/se7/html/jls-14.html#jls-14.19&quot;&gt;per the JLS&lt;/a&gt;:</source>
          <target state="translated">Это также тот случай, когда вы попытаетесь использовать нулевую ссылку с &lt;code&gt;synchronized&lt;/code&gt; , это также вызовет это исключение, &lt;a href=&quot;https://docs.oracle.com/javase/specs/jls/se7/html/jls-14.html#jls-14.19&quot;&gt;согласно JLS&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="2d16dbce2624ff3130d8e2270cf0f83a79ee462c" translate="yes" xml:space="preserve">
          <source>It tells you the full name of the exception that was thrown; i.e. &lt;code&gt;java.lang.NullPointerException&lt;/code&gt;.</source>
          <target state="translated">Он сообщает вам полное имя исключения, которое было сгенерировано; т.е. &lt;code&gt;java.lang.NullPointerException&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8417e2fba268434b1c803e3ff401a4e1a47b61fc" translate="yes" xml:space="preserve">
          <source>It tells you the name of the Java thread in which the exception was thrown.  For a simple program with one thread (like this one), it will be &quot;main&quot;. Let's move on ...</source>
          <target state="translated">В нем указано название нити Java,в которой было брошено исключение.Для простой программы с одним потоком (как этот)он будет &quot;главным&quot;.Давайте продолжим ...</target>
        </trans-unit>
        <trans-unit id="2a253b1e78bf697c2a11dc2ac9d828a12960e3d4" translate="yes" xml:space="preserve">
          <source>It's like you are trying to access an object which is &lt;code&gt;null&lt;/code&gt;. Consider below example:</source>
          <target state="translated">Это как будто вы пытаетесь получить доступ к объекту, который является &lt;code&gt;null&lt;/code&gt; . Рассмотрим пример ниже:</target>
        </trans-unit>
        <trans-unit id="76418c77d1fc266f3a62cf5f684db71e4d1120d9" translate="yes" xml:space="preserve">
          <source>Let's illustrate with the simple example (above) first. We start by looking at the line that the stack trace has told us is where the NPE happened:</source>
          <target state="translated">Проиллюстрируем сначала простым примером (см.выше).Начнем с того,что посмотрим на линию,которую нам подсказала трасса стека,где произошло NPE:</target>
        </trans-unit>
        <trans-unit id="d339292be5c375475471a2ad89e7eae3c587ba51" translate="yes" xml:space="preserve">
          <source>Looking at the first line, how could that throw an NPE?  There are two ways:</source>
          <target state="translated">Глядя на первую строчку,как это могло бросить NPE? Есть два способа:</target>
        </trans-unit>
        <trans-unit id="3048bc36d2ef3a5ca1d47ab6ade02d04a15cfa52" translate="yes" xml:space="preserve">
          <source>Next check where this value comes from. By following the callers of the method, we see that &lt;code&gt;s&lt;/code&gt; is passed in with &lt;code&gt;printString(name)&lt;/code&gt; in the &lt;code&gt;print()&lt;/code&gt; method, and &lt;code&gt;this.name&lt;/code&gt; is null.</source>
          <target state="translated">Затем проверьте, откуда это значение. Следуя указаниям метода, мы видим, что &lt;code&gt;s&lt;/code&gt; передается с &lt;code&gt;printString(name)&lt;/code&gt; в методе &lt;code&gt;print()&lt;/code&gt; , и &lt;code&gt;this.name&lt;/code&gt; имеет значение null.</target>
        </trans-unit>
        <trans-unit id="68bd69464f365c0fbf0e01313f81d5c88e5bffca" translate="yes" xml:space="preserve">
          <source>Next, we need to figure out which of those scenarios explains what is actually happening. We will start by exploring the first one:</source>
          <target state="translated">Далее нам нужно выяснить,какой из этих сценариев объясняет то,что на самом деле происходит.Начнем с изучения первого:</target>
        </trans-unit>
        <trans-unit id="8eceeaca2b7a976cb9ee01b6b05534d3a2006ca8" translate="yes" xml:space="preserve">
          <source>Note that in a more complicated example, there will be lots of lines in the NPE stack trace. But you can be sure that the second line (the first &quot;at&quot; line) will tell you where the NPE was thrown&lt;sup&gt;1&lt;/sup&gt;.</source>
          <target state="translated">Обратите внимание, что в более сложном примере в трассировке стека NPE будет много строк. Но вы можете быть уверены, что вторая строка (первая строка &amp;laquo;at&amp;raquo;) скажет вам, куда был брошен NPE &lt;sup&gt;1&lt;/sup&gt; .</target>
        </trans-unit>
        <trans-unit id="7efbcba01f44f10b16dc449b3a4ce5b93ec278ac" translate="yes" xml:space="preserve">
          <source>OK, so let's try a slightly more tricky example. This will require some &lt;em&gt;logical deduction&lt;/em&gt;.</source>
          <target state="translated">Хорошо, давайте попробуем немного более хитрый пример. Это потребует некоторого &lt;em&gt;логического вывода&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="09140446828a190f98d3e888ff50d49babf39577" translate="yes" xml:space="preserve">
          <source>On the first line inside &lt;code&gt;main&lt;/code&gt;, I'm explicitly setting the &lt;code&gt;Object&lt;/code&gt; reference &lt;code&gt;obj&lt;/code&gt; equal to &lt;code&gt;null&lt;/code&gt;.  This means I have a reference, but it isn't pointing to any object.  After that, I try to treat the reference as though it points to an object by calling a method on it.  This results in a &lt;code&gt;NullPointerException&lt;/code&gt; because there is no code to execute in the location that the reference is pointing.</source>
          <target state="translated">В первой строке внутри &lt;code&gt;main&lt;/code&gt; я явно устанавливаю ссылку на &lt;code&gt;obj&lt;/code&gt; равной &lt;code&gt;null&lt;/code&gt; . Это означает, что у меня есть ссылка, но она не указывает ни на какой объект. После этого я пытаюсь обработать ссылку так, как будто она указывает на объект, вызывая метод для него. Это приводит к &lt;code&gt;NullPointerException&lt;/code&gt; , потому что нет кода для выполнения в расположении, на которое указывает ссылка.</target>
        </trans-unit>
        <trans-unit id="5b3e2ae3b2ddecc346c758e8d3b5549b755c1e92" translate="yes" xml:space="preserve">
          <source>Or you can design the class so that &lt;code&gt;name&lt;/code&gt;&lt;em&gt;always has a non-null value&lt;/em&gt;:</source>
          <target state="translated">Или вы можете создать класс так, чтобы &lt;code&gt;name&lt;/code&gt; &lt;em&gt;всегда имело ненулевое значение&lt;/em&gt; :</target>
        </trans-unit>
        <trans-unit id="cc52fe609e5da3175933559d437d1fdb72e364c5" translate="yes" xml:space="preserve">
          <source>Other fixes</source>
          <target state="translated">Другие исправления</target>
        </trans-unit>
        <trans-unit id="5332d8134d57cacdb6ee04717450e635f41c6767" translate="yes" xml:space="preserve">
          <source>Otherwise, if the value of the Expression is null, a &lt;code&gt;NullPointerException&lt;/code&gt; is thrown.</source>
          <target state="translated">В противном случае, если значение Expression равно null, &lt;code&gt;NullPointerException&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="59f63782fa2d7a08a6249d7857f98b11c193fbd3" translate="yes" xml:space="preserve">
          <source>Prefer &lt;code&gt;valueOf()&lt;/code&gt; over &lt;code&gt;toString()&lt;/code&gt;.</source>
          <target state="translated">Предпочитаю &lt;code&gt;valueOf()&lt;/code&gt; &lt;code&gt;toString()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e6eb6b961bbe76bed259ea3835d017bb805fcd01" translate="yes" xml:space="preserve">
          <source>Probably the quickest example code I could come up with to illustrate a &lt;code&gt;NullPointerException&lt;/code&gt; would be:</source>
          <target state="translated">Вероятно, самый быстрый пример кода, который я мог бы предложить для иллюстрации &lt;code&gt;NullPointerException&lt;/code&gt; был бы:</target>
        </trans-unit>
        <trans-unit id="e1aa69767a9902b2d9d069ada53c5e09041f46fc" translate="yes" xml:space="preserve">
          <source>Question: How do I read the NPE stacktrace?</source>
          <target state="translated">Вопрос:Как прочитать статистику NPE?</target>
        </trans-unit>
        <trans-unit id="2a7214e14c4e2559dd384c3596ba27c46d122f5b" translate="yes" xml:space="preserve">
          <source>Question: How do I track down the cause of the NPE exception in my code?</source>
          <target state="translated">Вопрос:Как отследить причину исключения NPE в моем коде?</target>
        </trans-unit>
        <trans-unit id="110059053a369d1fac95bf75cd737030c08abcd5" translate="yes" xml:space="preserve">
          <source>Question: What causes a &lt;code&gt;NullPointerException&lt;/code&gt; (NPE)?</source>
          <target state="translated">Вопрос: что вызывает &lt;code&gt;NullPointerException&lt;/code&gt; (NPE)?</target>
        </trans-unit>
        <trans-unit id="f7b4ef7eaa8bdc43a3fc8327ee8e3b2a393de223" translate="yes" xml:space="preserve">
          <source>Reference: &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/lang/NullPointerException.html&quot;&gt;http://docs.oracle.com/javase/8/docs/api/java/lang/NullPointerException.html&lt;/a&gt;</source>
          <target state="translated">Ссылка: &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/lang/NullPointerException.html&quot;&gt;http://docs.oracle.com/javase/8/docs/api/java/lang/NullPointerException.html&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="20c7030469d7703e9338b3a13079900db1ad58d0" translate="yes" xml:space="preserve">
          <source>Same for the array concept:</source>
          <target state="translated">То же самое и с концепцией массива:</target>
        </trans-unit>
        <trans-unit id="a328a8219b1d929d6ed454cdd41b31e02977388d" translate="yes" xml:space="preserve">
          <source>Second observation: when I run the program, it outputs two lines of &quot;gobbledy-gook&quot;. &lt;strong&gt;WRONG!!&lt;/strong&gt; That's not gobbledy-gook. It is a stacktrace ... and it provides &lt;em&gt;vital information&lt;/em&gt; that will help you track down the error in your code, if you take the time to read it carefully.</source>
          <target state="translated">Второе наблюдение: когда я запускаю программу, она выводит две строки &quot;gobbledy-gook&quot;. &lt;strong&gt;НЕПРАВИЛЬНО!!&lt;/strong&gt; Это не болтунья. Это трассировка стека ... и она предоставляет &lt;em&gt;важную информацию&lt;/em&gt; , которая поможет вам отследить ошибку в вашем коде, если вы потратите время на ее тщательное чтение.</target>
        </trans-unit>
        <trans-unit id="5ece6ed3284a8e7793f5f8e6191387a1ca65d15c" translate="yes" xml:space="preserve">
          <source>See also:
&lt;a href=&quot;http://javarevisited.blogspot.com/2013/05/ava-tips-and-best-practices-to-avoid-nullpointerexception-program-application.html&quot;&gt;A good list of best practices&lt;/a&gt;</source>
          <target state="translated">Смотрите также: &lt;a href=&quot;http://javarevisited.blogspot.com/2013/05/ava-tips-and-best-practices-to-avoid-nullpointerexception-program-application.html&quot;&gt;хороший список лучших практик&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c66fb315fd8a9161821812042eba9ece0fca8b7e" translate="yes" xml:space="preserve">
          <source>See this below example as well:</source>
          <target state="translated">См.также приведенный ниже пример:</target>
        </trans-unit>
        <trans-unit id="3f608da5633e1fbbbac554cb0e0f6193783c3e96" translate="yes" xml:space="preserve">
          <source>So let's look at what it says:</source>
          <target state="translated">Так что давайте посмотрим,что там написано:</target>
        </trans-unit>
        <trans-unit id="a957e6b089e86c3afa609e7f79243914d473cc8f" translate="yes" xml:space="preserve">
          <source>So now we have two &quot;at&quot; lines. The first one is for this line:</source>
          <target state="translated">Итак,теперь у нас две строчки &quot;на&quot;.Первая-для этой строки:</target>
        </trans-unit>
        <trans-unit id="ad6c8b1add16d8acb60150ed283087c1e312a08e" translate="yes" xml:space="preserve">
          <source>So what about our second scenario? Well, we can see that &lt;code&gt;pos&lt;/code&gt; is &lt;code&gt;1&lt;/code&gt;, so that means that &lt;code&gt;foo[1]&lt;/code&gt; must be &lt;code&gt;null&lt;/code&gt;. Is that possible?</source>
          <target state="translated">Так что насчет нашего второго сценария? Итак, мы можем видеть, что &lt;code&gt;pos&lt;/code&gt; равно &lt;code&gt;1&lt;/code&gt; , так что это означает, что &lt;code&gt;foo[1]&lt;/code&gt; должно быть &lt;code&gt;null&lt;/code&gt; . Это возможно?</target>
        </trans-unit>
        <trans-unit id="edded83678c3da726f6a8903ea8346cc771eea21" translate="yes" xml:space="preserve">
          <source>So where did that &lt;code&gt;null&lt;/code&gt; come from? In this case it is obvious, and it is obvious what we need to do to fix it. (Assign a non-null value to &lt;code&gt;foo&lt;/code&gt;.)</source>
          <target state="translated">Так откуда взялся этот &lt;code&gt;null&lt;/code&gt; ? В этом случае это очевидно, и очевидно, что нам нужно сделать, чтобы это исправить. (Назначьте ненулевое значение для &lt;code&gt;foo&lt;/code&gt; .)</target>
        </trans-unit>
        <trans-unit id="4b796033ff61d122122d65b5810f1c0b31a4da7c" translate="yes" xml:space="preserve">
          <source>So you have a &lt;code&gt;NullPointerException&lt;/code&gt;. How do you fix it? Let's take a simple example which throws a &lt;code&gt;NullPointerException&lt;/code&gt;:</source>
          <target state="translated">Итак, у вас есть &lt;code&gt;NullPointerException&lt;/code&gt; . Как вы это исправите? Давайте рассмотрим простой пример, который &lt;code&gt;NullPointerException&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="3a73c967d00d54d26fc9adb9c9ba33d3cc383d28" translate="yes" xml:space="preserve">
          <source>Sonar with findbugs can detect NPE.
&lt;a href=&quot;https://stackoverflow.com/questions/20899931/can-sonar-catch-null-pointer-exceptions-caused-by-jvm-dynamically&quot;&gt;Can sonar catch null pointer exceptions caused by JVM Dynamically&lt;/a&gt;</source>
          <target state="translated">Сонар с findbugs может обнаружить NPE. &lt;a href=&quot;https://stackoverflow.com/questions/20899931/can-sonar-catch-null-pointer-exceptions-caused-by-jvm-dynamically&quot;&gt;Может ли сонар ловить исключения нулевого указателя, вызванные JVM динамически&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0b3f0dcd539c143def5976a02527992145f3bd87" translate="yes" xml:space="preserve">
          <source>Suppose that I compile and run the program above:</source>
          <target state="translated">Предположим,что я скомпилирую и запущу программу,описанную выше:</target>
        </trans-unit>
        <trans-unit id="fc52468f6c93bbc71a7e83fc6a1c10802582b2cc" translate="yes" xml:space="preserve">
          <source>Taking the length of &lt;code&gt;null&lt;/code&gt; as if it were an array.</source>
          <target state="translated">Принимая длину &lt;code&gt;null&lt;/code&gt; как если бы это был массив.</target>
        </trans-unit>
        <trans-unit id="a7a05060b85348fb26d1541414ea261fc8549ebe" translate="yes" xml:space="preserve">
          <source>Taking the length of null as if it were an array.</source>
          <target state="translated">Принятие длины нуля,как если бы это был массив.</target>
        </trans-unit>
        <trans-unit id="70e38b9cf4b5f335ee765ffbb4c9d75eed7a25c7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NullPointerException&lt;/code&gt; occurs when you declare a variable but did not create an object and assign to the variable before trying to use the contents of the variable (called &lt;em&gt;dereferencing&lt;/em&gt;). So you are pointing to something that does not actually exist.</source>
          <target state="translated">&lt;code&gt;NullPointerException&lt;/code&gt; возникает, когда вы объявляете переменную, но не создаете объект и не присваиваете переменную, прежде чем пытаться использовать содержимое переменной (называемое &lt;em&gt;разыменованием&lt;/em&gt; ). Таким образом, вы указываете на то, чего на самом деле не существует.</target>
        </trans-unit>
        <trans-unit id="4dd2a758bfbc7c2e200907cb43a178174a1ef438" translate="yes" xml:space="preserve">
          <source>The below code gives you a null pointer exception.</source>
          <target state="translated">Нижеприведенный код дает исключение по нулевому указателю.</target>
        </trans-unit>
        <trans-unit id="5afcbf74c6133d5e8acb0880821ac443b031db8d" translate="yes" xml:space="preserve">
          <source>The first line declares a variable named &lt;code&gt;num&lt;/code&gt;, but it does not actually contain a primitive value yet. Instead, it contains a pointer (because the type is &lt;code&gt;Integer&lt;/code&gt; which is a reference type). Since you have not yet said what to point to, Java sets it to &lt;code&gt;null&lt;/code&gt;, which means &quot;&lt;strong&gt;I am pointing to &lt;em&gt;nothing&lt;/em&gt;&lt;/strong&gt;&quot;.</source>
          <target state="translated">Первая строка объявляет переменную с именем &lt;code&gt;num&lt;/code&gt; , но на самом деле она еще не содержит примитивного значения. Вместо этого он содержит указатель (потому что типом является &lt;code&gt;Integer&lt;/code&gt; , который является ссылочным типом). Поскольку вы еще не сказали, на что указывать, Java устанавливает его в &lt;code&gt;null&lt;/code&gt; , что означает &amp;laquo; &lt;strong&gt;я &lt;em&gt;ни&lt;/em&gt; на что &lt;em&gt;не&lt;/em&gt; указываю&lt;/strong&gt; &amp;raquo;.</target>
        </trans-unit>
        <trans-unit id="94ff3f2d90b51f92f5a22e77c70e18165e13575b" translate="yes" xml:space="preserve">
          <source>The first line of the stack trace tells you a number of things:</source>
          <target state="translated">Первая строка следа стека говорит о многом:</target>
        </trans-unit>
        <trans-unit id="11b1b8cb1b03ae2aa5fe1b9dc487442dbfdff843" translate="yes" xml:space="preserve">
          <source>The first step is identifying exactly &lt;em&gt;which values are causing the exception&lt;/em&gt;. For this, we need to do some debugging. It's important to learn to read a &lt;em&gt;stacktrace&lt;/em&gt;. This will show you where the exception was thrown:</source>
          <target state="translated">Первый шаг - точно определить, &lt;em&gt;какие значения вызывают исключение&lt;/em&gt; . Для этого нам нужно сделать некоторую отладку. Важно научиться читать &lt;em&gt;трассировку стека&lt;/em&gt; . Это покажет вам, где было сгенерировано исключение:</target>
        </trans-unit>
        <trans-unit id="5f86a6ec7cb1a7454d5e5706d38263349a9ab618" translate="yes" xml:space="preserve">
          <source>The object lives in the VM memory space and the only way to access it is using &lt;code&gt;this&lt;/code&gt; references. Take this example:</source>
          <target state="translated">Объект находится в пространстве памяти ВМ, и единственный способ получить к нему доступ - использовать &lt;code&gt;this&lt;/code&gt; ссылки. Возьмите этот пример:</target>
        </trans-unit>
        <trans-unit id="e2b9b98cc8af92a275b3f463db51d343e34aca5d" translate="yes" xml:space="preserve">
          <source>The second line is the most important one in diagnosing an NPE.</source>
          <target state="translated">Вторая строка является наиболее важной при диагностике NPE.</target>
        </trans-unit>
        <trans-unit id="200bc558e7d3cbedcdab6266531c26406b51859d" translate="yes" xml:space="preserve">
          <source>The variable can have a &lt;em&gt;default value&lt;/em&gt; (and &lt;code&gt;setName&lt;/code&gt; can prevent it being set to null):</source>
          <target state="translated">Переменная может иметь &lt;em&gt;значение по умолчанию&lt;/em&gt; (а &lt;code&gt;setName&lt;/code&gt; может помешать ей иметь значение null):</target>
        </trans-unit>
        <trans-unit id="a42f342c5074f18b2ee8c62146f8c92dc81607f4" translate="yes" xml:space="preserve">
          <source>There are many ways that you could use a &lt;code&gt;null&lt;/code&gt; value that will result in a &lt;code&gt;NullPointerException&lt;/code&gt;. In fact, the only things that you &lt;em&gt;can&lt;/em&gt; do with a &lt;code&gt;null&lt;/code&gt; without causing an NPE are:</source>
          <target state="translated">Есть много способов, которыми вы можете использовать &lt;code&gt;null&lt;/code&gt; значение, которое приведет к &lt;code&gt;NullPointerException&lt;/code&gt; . Фактически, единственное, что вы &lt;em&gt;можете&lt;/em&gt; сделать с &lt;code&gt;null&lt;/code&gt; не вызывая NPE:</target>
        </trans-unit>
        <trans-unit id="87a50685fb8181533a1a38415f42609ffed3b6b7" translate="yes" xml:space="preserve">
          <source>This an important thing to know - when there are no more references to an object (in the example above when &lt;code&gt;reference&lt;/code&gt; and &lt;code&gt;otherReference&lt;/code&gt; both point to null) then the object is &quot;unreachable&quot;. There is no way we can work with it, so this object is ready to be garbage collected, and at some point, the VM will free the memory used by this object and will allocate another.</source>
          <target state="translated">Это важно знать: когда больше нет ссылок на объект (в приведенном выше примере, когда &lt;code&gt;reference&lt;/code&gt; и &lt;code&gt;otherReference&lt;/code&gt; указывают на ноль ), тогда объект &amp;laquo;недоступен&amp;raquo;. Мы не можем работать с ним, поэтому этот объект готов к сборке мусора, и в какой-то момент виртуальная машина освободит память, используемую этим объектом, и выделит другой.</target>
        </trans-unit>
        <trans-unit id="4027f6004fa781ce93560b2dd9d73f25224a03bd" translate="yes" xml:space="preserve">
          <source>This is enough to give us a solution: add a call to &lt;code&gt;printer.setName()&lt;/code&gt; before calling &lt;code&gt;printer.print()&lt;/code&gt;.</source>
          <target state="translated">Этого достаточно, чтобы дать нам решение: добавьте вызов &lt;code&gt;printer.setName()&lt;/code&gt; перед вызовом &lt;code&gt;printer.print()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0ca84ac3076d9c11cfc10289571d11019273ee9b" translate="yes" xml:space="preserve">
          <source>This is the hard part. The short answer is to apply logical inference to the evidence provided by the stack trace, the source code and the relevant API documentation.</source>
          <target state="translated">Это самое сложное.Короткий ответ заключается в том,чтобы применить логический вывод к доказательствам,предоставленным трассой стека,исходным кодом и соответствующей документацией по API.</target>
        </trans-unit>
        <trans-unit id="7676e926601728e6f60a78aa4a791254b0dcaa71" translate="yes" xml:space="preserve">
          <source>This tells us a number of things:</source>
          <target state="translated">Это говорит нам о многом:</target>
        </trans-unit>
        <trans-unit id="c54f75a574b2c4fd91cac2f701399ef8dfb71a73" translate="yes" xml:space="preserve">
          <source>Throwing &lt;code&gt;null&lt;/code&gt; as if it were a Throwable value.</source>
          <target state="translated">Бросить ноль, как если бы это было значение Throwable.</target>
        </trans-unit>
        <trans-unit id="07a54638a8e2bc759d8cf4b233a15f1d6bf23eb7" translate="yes" xml:space="preserve">
          <source>Throwing null as if it were a Throwable value.</source>
          <target state="translated">Бросание нуля,как если бы это было Бросаемое значение.</target>
        </trans-unit>
        <trans-unit id="619270eb9d34c9bc6746a84f38e87b07725f7c5b" translate="yes" xml:space="preserve">
          <source>Thrown when an application attempts to use null in a case where an
  object is required. These include:</source>
          <target state="translated">Бросается,когда приложение пытается использовать ноль в случае,когда требуется объект.К ним относятся:</target>
        </trans-unit>
        <trans-unit id="d45e625248d1bd8fbefc6c9c54d4c25071618a70" translate="yes" xml:space="preserve">
          <source>Use annotations &lt;a href=&quot;https://javaee.github.io/javaee-spec/javadocs/javax/validation/constraints/NotNull.html&quot;&gt;&lt;code&gt;@NotNull&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://javadoc.io/static/com.github.spotbugs/spotbugs-annotations/3.1.12/edu/umd/cs/findbugs/annotations/Nullable.html&quot;&gt;&lt;code&gt;@Nullable&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Используйте аннотации &lt;a href=&quot;https://javaee.github.io/javaee-spec/javadocs/javax/validation/constraints/NotNull.html&quot;&gt; &lt;code&gt;@NotNull&lt;/code&gt; &lt;/a&gt; и &lt;a href=&quot;https://javadoc.io/static/com.github.spotbugs/spotbugs-annotations/3.1.12/edu/umd/cs/findbugs/annotations/Nullable.html&quot;&gt; &lt;code&gt;@Nullable&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3a45ab3058a4a8d1f2705a89ea1c87802cd3caa9" translate="yes" xml:space="preserve">
          <source>Use equals with a known object first: &lt;code&gt;if(&quot;knownObject&quot;.equals(unknownObject)&lt;/code&gt;</source>
          <target state="translated">Сначала используйте equals с известным объектом: &lt;code&gt;if(&quot;knownObject&quot;.equals(unknownObject)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8c9a4702b1c2baf074df6f4b2f4056e68b58c6b2" translate="yes" xml:space="preserve">
          <source>Use null safe &lt;a href=&quot;https://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/StringUtils.html&quot;&gt;&lt;code&gt;StringUtils&lt;/code&gt;&lt;/a&gt; methods &lt;code&gt;StringUtils.isEmpty(null)&lt;/code&gt;.</source>
          <target state="translated">Используйте нулевые безопасные методы &lt;code&gt;StringUtils.isEmpty(null)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8e7aac8f8901568e201b480a0f51d1e38bd4e704" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;final&lt;/code&gt; modifier to enforce good initialization.</source>
          <target state="translated">Используйте модификатор &lt;code&gt;final&lt;/code&gt; , чтобы обеспечить хорошую инициализацию.</target>
        </trans-unit>
        <trans-unit id="5571a8c84a86d2b329356c5ece6f990e0c2ee9e8" translate="yes" xml:space="preserve">
          <source>Well, if that happened, the stack trace would look different. The first &quot;at&quot; line would say that the exception was thrown in some line in the &lt;code&gt;java.lang.String&lt;/code&gt; class, and line 4 of &lt;code&gt;Test.java&lt;/code&gt; would be the second &quot;at&quot; line.</source>
          <target state="translated">Ну, если бы это произошло, трассировка стека выглядела бы иначе. Первая строка &amp;laquo;at&amp;raquo; будет означать, что исключение было сгенерировано в некоторой строке в классе &lt;code&gt;java.lang.String&lt;/code&gt; , а строка 4 &lt;code&gt;Test.java&lt;/code&gt; будет второй строкой &amp;laquo;at&amp;raquo;.</target>
        </trans-unit>
        <trans-unit id="2ea8cb4ce3fa7d8910d932e12186ed6c797ff3eb" translate="yes" xml:space="preserve">
          <source>What are Null Pointer Exceptions (&lt;code&gt;java.lang.NullPointerException&lt;/code&gt;) and what causes them?</source>
          <target state="translated">Что такое исключения нулевого указателя ( &lt;code&gt;java.lang.NullPointerException&lt;/code&gt; ) и что их вызывает?</target>
        </trans-unit>
        <trans-unit id="a23e7c7dd6bd4a210d09c8c4d18ed8b71c338010" translate="yes" xml:space="preserve">
          <source>What is a NullPointerException, and how do I fix it</source>
          <target state="translated">Что такое NullPointerException,и как мне это исправить.</target>
        </trans-unit>
        <trans-unit id="fd79d84a8b29d705a7298fe1cdcfa64995856eae" translate="yes" xml:space="preserve">
          <source>What is a NullPointerException?</source>
          <target state="translated">Что такое NullPointerException?</target>
        </trans-unit>
        <trans-unit id="0edb28c818192a20185dc07fb4a9521f4d21afac" translate="yes" xml:space="preserve">
          <source>What methods/tools can be used to determine the cause so that you stop
  the exception from causing the program to terminate prematurely?</source>
          <target state="translated">Какие методы можно использовать для определения причины,чтобы предотвратить преждевременное прекращение программы из-за исключения?</target>
        </trans-unit>
        <trans-unit id="045d1c645b9d61717b1c4818404fbc1b9d0fe6eb" translate="yes" xml:space="preserve">
          <source>When you attempt to execute one object method, the reference asks the living object to execute that method. But if the reference is referencing NULL (nothing, zero, void, nada)  then there is no way the method gets executed. Then the runtime let you know this by throwing a NullPointerException.</source>
          <target state="translated">Когда вы пытаетесь выполнить метод одного объекта,ссылка просит живой объект выполнить этот метод.Но если ссылка ссылается на NULL (ничего,ноль,пустота,ничего),то выполнить метод не получится.Тогда время выполнения сообщит вам об этом,бросив NullPointerException.</target>
        </trans-unit>
        <trans-unit id="b38b6a98cef1c3244acc9814b85d017efbbe9ca2" translate="yes" xml:space="preserve">
          <source>When you declare a reference variable (i.e. an object) you are really creating a pointer to an object. Consider the following code where you declare a variable of primitive type &lt;code&gt;int&lt;/code&gt;:</source>
          <target state="translated">Когда вы объявляете ссылочную переменную (т.е. объект), вы действительно создаете указатель на объект. Рассмотрим следующий код, в котором вы объявляете переменную примитивного типа &lt;code&gt;int&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="971a4d1346f3c7ff4aec8932ef90985736642518" translate="yes" xml:space="preserve">
          <source>Where does &lt;code&gt;bar&lt;/code&gt; come from? It is a parameter to the &lt;code&gt;test&lt;/code&gt; method call, and if we look at how &lt;code&gt;test&lt;/code&gt; was called, we can see that it comes from the &lt;code&gt;foo&lt;/code&gt; static variable. In addition, we can see clearly that we initialized &lt;code&gt;foo&lt;/code&gt; to a non-null value.  That is sufficient to tentatively dismiss this explanation. (In theory, something else could &lt;em&gt;change&lt;/em&gt;&lt;code&gt;foo&lt;/code&gt; to &lt;code&gt;null&lt;/code&gt; ... but that is not happening here.)</source>
          <target state="translated">Откуда берется &lt;code&gt;bar&lt;/code&gt; ? Это параметр для вызова метода &lt;code&gt;test&lt;/code&gt; , и если мы посмотрим, как вызывался &lt;code&gt;test&lt;/code&gt; , мы увидим, что он исходит из статической переменной &lt;code&gt;foo&lt;/code&gt; . Кроме того, мы можем ясно видеть, что мы инициализировали &lt;code&gt;foo&lt;/code&gt; ненулевым значением. Этого достаточно, чтобы предварительно отклонить это объяснение. (Теоретически, что-то еще может &lt;em&gt;изменить&lt;/em&gt; &lt;code&gt;foo&lt;/code&gt; на &lt;code&gt;null&lt;/code&gt; ... но здесь этого не происходит.)</target>
        </trans-unit>
        <trans-unit id="8734be1e4922d39775902ac36f9de454e8f5cd18" translate="yes" xml:space="preserve">
          <source>Where is &lt;code&gt;this.name&lt;/code&gt; set? In the &lt;code&gt;setName(String)&lt;/code&gt; method. With some more debugging, we can see that this method isn't called at all. If the method was called, make sure to check the &lt;em&gt;order&lt;/em&gt; that these methods are called, and the set method isn't called &lt;em&gt;after&lt;/em&gt; the print method.</source>
          <target state="translated">Где установлено &lt;code&gt;this.name&lt;/code&gt; ? В &lt;code&gt;setName(String)&lt;/code&gt; . После некоторой отладки мы видим, что этот метод вообще не вызывается. Если метод был вызван, обязательно проверьте &lt;em&gt;порядок&lt;/em&gt; вызова этих методов, и метод set не вызывается &lt;em&gt;после&lt;/em&gt; метода print.</target>
        </trans-unit>
        <trans-unit id="706f4059c0a82014b57c44cebf4ce048cfdc2bda" translate="yes" xml:space="preserve">
          <source>You &lt;em&gt;must&lt;/em&gt; initialize the elements in the array &lt;em&gt;before&lt;/em&gt; accessing or dereferencing them.</source>
          <target state="translated">Вы &lt;em&gt;должны&lt;/em&gt; инициализировать элементы в массиве, &lt;em&gt;прежде чем&lt;/em&gt; обращаться к ним или разыменовывать их.</target>
        </trans-unit>
        <trans-unit id="c84e0b49f0f58904617fb6abbab17f59ee3f10cf" translate="yes" xml:space="preserve">
          <source>Your reference is &quot;pointing&quot; to null, thus &quot;Null -&amp;gt; Pointer&quot;.</source>
          <target state="translated">Ваша ссылка &amp;laquo;указывает&amp;raquo; на ноль, то есть &amp;laquo;Нуль -&amp;gt; Указатель&amp;raquo;.</target>
        </trans-unit>
        <trans-unit id="b2766c956c0871691da99343bea9fdce861530cc" translate="yes" xml:space="preserve">
          <source>and the second one is for this line:</source>
          <target state="translated">а второй-за эту линию:</target>
        </trans-unit>
        <trans-unit id="2b6f2c4a758bdfa568fbd16a03a6270d7b0cb1d4" translate="yes" xml:space="preserve">
          <source>assign it to a reference variable or read it from a reference variable,</source>
          <target state="translated">присваивает ее переменной-справке или считывает ее из переменной-справки,</target>
        </trans-unit>
        <trans-unit id="4794f1fa5f6182550ad52c39225ba650ca2c5cac" translate="yes" xml:space="preserve">
          <source>assign it to an array element or read it from an array element (provided that array reference itself is non-null!),</source>
          <target state="translated">присвоить его элементу массива или прочитать из элемента массива (при условии,что сама ссылка на массив не является нулевой!),</target>
        </trans-unit>
        <trans-unit id="fea64947f3e1c19acb6fae94b6a25dd469358299" translate="yes" xml:space="preserve">
          <source>pass it as a parameter or return it as a result, or</source>
          <target state="translated">передать его в качестве параметра или вернуть в результате,или</target>
        </trans-unit>
        <trans-unit id="60ce2f688c217a588196b5698debb2b0bed8b3dc" translate="yes" xml:space="preserve">
          <source>test it using the &lt;code&gt;==&lt;/code&gt; or &lt;code&gt;!=&lt;/code&gt; operators, or &lt;code&gt;instanceof&lt;/code&gt;.</source>
          <target state="translated">протестируйте его, используя операторы &lt;code&gt;==&lt;/code&gt; или &lt;code&gt;!=&lt;/code&gt; , или &lt;code&gt;instanceof&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="48dd492845e5923b030e505964695a889432ed8e" translate="yes" xml:space="preserve">
          <source>the statement labelled &quot;HERE&quot; is going to attempt to run the &lt;code&gt;length()&lt;/code&gt; method on a &lt;code&gt;null&lt;/code&gt; reference, and this will throw a &lt;code&gt;NullPointerException&lt;/code&gt;.</source>
          <target state="translated">оператор, помеченный &amp;laquo;ЗДЕСЬ&amp;raquo;, попытается запустить метод &lt;code&gt;length()&lt;/code&gt; для &lt;code&gt;null&lt;/code&gt; ссылки, и это вызовет &lt;code&gt;NullPointerException&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c5c707c98218e538788fb9a4baa24f7af56308cd" translate="yes" xml:space="preserve">
          <source>we allocate a &lt;code&gt;String[]&lt;/code&gt; with two elements &lt;em&gt;that are initialized to &lt;code&gt;null&lt;/code&gt;&lt;/em&gt;. After that, we have not changed the contents of &lt;code&gt;foo&lt;/code&gt; ... so &lt;code&gt;foo[1]&lt;/code&gt; will still be &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">мы выделяем &lt;code&gt;String[]&lt;/code&gt; с двумя элементами &lt;em&gt;, которые инициализируются &lt;code&gt;null&lt;/code&gt; &lt;/em&gt; . После этого мы не изменили содержимое &lt;code&gt;foo&lt;/code&gt; ... поэтому &lt;code&gt;foo[1]&lt;/code&gt; все равно будет &lt;code&gt;null&lt;/code&gt; .</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
