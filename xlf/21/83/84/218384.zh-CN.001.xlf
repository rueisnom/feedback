<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/218384">
    <body>
      <group id="218384">
        <trans-unit id="46c79bb66ada9c56c9356e3a5d4614b774e8bdc4" translate="yes" xml:space="preserve">
          <source>&quot;Test.java:4&quot; gives the source filename of the class, AND it tells us that the statement where this occurred is in line 4 of the file.</source>
          <target state="translated">&quot;Test.java:4 &quot;给出了该类的源文件名,并且它告诉我们该类的语句发生在文件的第4行。</target>
        </trans-unit>
        <trans-unit id="f8604be0c3c1ed69f32edb319a462c6359c0f2ff" translate="yes" xml:space="preserve">
          <source>&quot;at Test.main&quot; says that we were in the &lt;code&gt;main&lt;/code&gt; method of the &lt;code&gt;Test&lt;/code&gt; class.</source>
          <target state="translated">&amp;ldquo;在Test.main上&amp;rdquo;表示我们处于 &lt;code&gt;Test&lt;/code&gt; 类的 &lt;code&gt;main&lt;/code&gt; 方法中。</target>
        </trans-unit>
        <trans-unit id="12c1a4fa7b528e612a2c55a656eae759beb053c2" translate="yes" xml:space="preserve">
          <source>(This is a technicality, but I think it bears mentioning: A reference that points to null isn't the same as a C pointer that points to an invalid memory location.  A null pointer is literally not pointing &lt;em&gt;anywhere&lt;/em&gt;, which is subtly different than pointing to a location that happens to be invalid.)</source>
          <target state="translated">（这是一种技术，但是我认为值得一提：指向null的引用与指向无效内存位置的C指针不同。null指针实际上不指向&lt;em&gt;任何地方&lt;/em&gt; ，这与指向恰好是无效的位置。）</target>
        </trans-unit>
        <trans-unit id="3728b911d50de4ab1fcf39dee7550bebda59d186" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NullPointerException&lt;/code&gt;s are exceptions that occur when you try to use a reference that points to no location in memory (null) as though it were referencing an object.  Calling a method on a null reference or trying to access a field of a null reference will trigger a &lt;code&gt;NullPointerException&lt;/code&gt;.  These are the most common, but other ways are listed on the &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/NullPointerException.html&quot;&gt;&lt;code&gt;NullPointerException&lt;/code&gt;&lt;/a&gt; javadoc page.</source>
          <target state="translated">&lt;code&gt;NullPointerException&lt;/code&gt; 是当您尝试使用指向内存中没有位置（空）的引用时就发生的异常，就像它在引用对象一样。 在空引用上调用方法或尝试访问空引用的字段将触发 &lt;code&gt;NullPointerException&lt;/code&gt; 。 这些是最常见的方法，但&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/NullPointerException.html&quot;&gt; &lt;code&gt;NullPointerException&lt;/code&gt; &lt;/a&gt; javadoc页面上列出了其他方法。</target>
        </trans-unit>
        <trans-unit id="49dafbcd2fe39c57babb5928a1f4a08427635d46" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Identify the null values&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;识别空值&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="551e0b7660ec60a1ba024654ebf85dd6e11ea8a2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;也可以看看：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a2fb070431451825a43dbcb68523c4e1049f4a93" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Summary:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Summary:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7654b80f753ecf9a584b54f4799cf0bb000071db" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Trace where these values come from&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;追踪这些值的来源&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2bed1aff07e6c53e21f30814c172aaa955a67f89" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Trace where these values should be set&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;跟踪应在何处设置这些值&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b2d6017504b728ef2dbcbb062072c2f986d225f4" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;1 - Not quite true. There are things called nested exceptions...&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;1-不太正确。&lt;/sup&gt; &lt;sup&gt;有些事情称为嵌套异常...&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="09098c16c787fffa3d5bef267be27f9b94eec756" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;This particular NPE can be avoided if the comparison order is reversed; namely, use &lt;code&gt;.equals&lt;/code&gt; on a guaranteed non-null object.&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;如果比较顺序相反，则可以避免使用这种特定的NPE。&lt;/sup&gt; &lt;sup&gt;也就是说，对有保证的非null对象使用 &lt;code&gt;.equals&lt;/code&gt; 。&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="230dd3a64393775192474761fa0c5cca37186f78" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;NullPointerException&lt;/code&gt; is thrown at runtime whenever your program attempts to use a &lt;code&gt;null&lt;/code&gt; as if it was a real reference. For example, if you write this:</source>
          <target state="translated">每当您的程序尝试使用 &lt;code&gt;null&lt;/code&gt; 时 （如果它是真实的引用），都会在运行时引发 &lt;code&gt;NullPointerException&lt;/code&gt; 。 例如，如果您编写此代码：</target>
        </trans-unit>
        <trans-unit id="a9e0552c7dd394c9a31c99c24d2f880c9a4d06fd" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;null&lt;/code&gt; pointer is one that points to nowhere.  When you dereference a pointer &lt;code&gt;p&lt;/code&gt;, you say &quot;give me the data at the location stored in &quot;p&quot;.  When &lt;code&gt;p&lt;/code&gt; is a &lt;code&gt;null&lt;/code&gt; pointer, the location stored in &lt;code&gt;p&lt;/code&gt; is &lt;code&gt;nowhere&lt;/code&gt;, you're saying &quot;give me the data at the location 'nowhere'&quot;.  Obviously, it can't do this, so it throws a &lt;code&gt;null pointer exception&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; 指针是指向无处的指针。 当取消引用指针 &lt;code&gt;p&lt;/code&gt; 时 ，您说&amp;ldquo;将存储在&amp;ldquo; p&amp;rdquo;中的位置的数据给我。当 &lt;code&gt;p&lt;/code&gt; 是 &lt;code&gt;null&lt;/code&gt; 指针时，存储在 &lt;code&gt;p&lt;/code&gt; 中的位置 &lt;code&gt;nowhere&lt;/code&gt; ，您的意思是&amp;ldquo;将位置的数据给我显然，它无法执行此操作，因此会引发 &lt;code&gt;null pointer exception&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d6c4c5d7a89d4a6783980274bfbadea09013a5b5" translate="yes" xml:space="preserve">
          <source>A good place to start is the &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/lang/NullPointerException.html&quot;&gt;JavaDocs&lt;/a&gt;. They have this covered:</source>
          <target state="translated">&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/lang/NullPointerException.html&quot;&gt;JavaDocs&lt;/a&gt;是一个很好的起点。 他们涵盖了：</target>
        </trans-unit>
        <trans-unit id="2e2d1cdef73de0035e0ec0fce5be6a96a237140d" translate="yes" xml:space="preserve">
          <source>A lot of explanations are already present to explain how it happens and how to fix it, but you should also follow &lt;strong&gt;best practices&lt;/strong&gt; to avoid &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/NullPointerException.html&quot;&gt;&lt;code&gt;NullPointerException&lt;/code&gt;&lt;/a&gt;s at all.</source>
          <target state="translated">已经有很多解释来解释它是如何发生的以及如何解决它，但是您还应该遵循&lt;strong&gt;最佳实践，&lt;/strong&gt;以完全避免&lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/NullPointerException.html&quot;&gt; &lt;code&gt;NullPointerException&lt;/code&gt; &lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="638d693f2f038480214d58b990af25de39a3580e" translate="yes" xml:space="preserve">
          <source>A null pointer exception is an indicator that you are using an object without initializing it.</source>
          <target state="translated">空指针异常是指你在使用一个对象时没有初始化它的指示器。</target>
        </trans-unit>
        <trans-unit id="b54dde997bbaa1c77cec63081960af235d128fa6" translate="yes" xml:space="preserve">
          <source>A null pointer exception is thrown when an application attempts to use null in a case where an object is required. These include:</source>
          <target state="translated">当应用程序试图在需要对象的情况下使用空指针时,会抛出一个空指针异常。这些异常包括:</target>
        </trans-unit>
        <trans-unit id="63cfcf1fbbdb802eace27ba6ed8669bc6cd6c3d1" translate="yes" xml:space="preserve">
          <source>Accessing or modifying the field of a &lt;code&gt;null&lt;/code&gt; object.</source>
          <target state="translated">访问或修改 &lt;code&gt;null&lt;/code&gt; 对象的字段。</target>
        </trans-unit>
        <trans-unit id="7bec35c01df22161ef1985731a3e114df5d788b9" translate="yes" xml:space="preserve">
          <source>Accessing or modifying the field of a null object.</source>
          <target state="translated">访问或修改空对象的字段。</target>
        </trans-unit>
        <trans-unit id="081b055d444278a91fcdc52fd056525afd4590b2" translate="yes" xml:space="preserve">
          <source>Accessing or modifying the slots of &lt;code&gt;null&lt;/code&gt; as if it were an array.</source>
          <target state="translated">访问或修改 &lt;code&gt;null&lt;/code&gt; 插槽，就好像它是一个数组一样。</target>
        </trans-unit>
        <trans-unit id="3071a717183323279cc12121c92bbf3a0674c2d0" translate="yes" xml:space="preserve">
          <source>Accessing or modifying the slots of null as if it were an array.</source>
          <target state="translated">像数组一样访问或修改null的插槽。</target>
        </trans-unit>
        <trans-unit id="3c82e5aec8823b4eada017e77cc5f6f29a9a4682" translate="yes" xml:space="preserve">
          <source>All elements inside of an array &lt;a href=&quot;http://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html#jls-4.12.5&quot;&gt;are initialized to their common initial value&lt;/a&gt;; for any type of object array, that means that all elements are &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">数组内的所有元素&lt;a href=&quot;http://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html#jls-4.12.5&quot;&gt;都初始化为它们的公共初始值&lt;/a&gt; ； 对于任何类型的对象数组，这意味着所有元素均为 &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d5256dfc3f6349ad33fe733f72303dfc4540eb37" translate="yes" xml:space="preserve">
          <source>Alternatively, there may be cases where the purpose of the method is not solely to operate on the passed in object, and therefore a null parameter may be acceptable. In this case, you would need to check for a &lt;strong&gt;null parameter&lt;/strong&gt; and behave differently. You should also explain this in the documentation. For example, &lt;code&gt;doSomething()&lt;/code&gt; could be written as:</source>
          <target state="translated">替代地，在某些情况下，该方法的目的不仅是对传入的对象进行操作，因此null参数是可以接受的。 在这种情况下，您将需要检查&lt;strong&gt;null参数&lt;/strong&gt;并表现不同。 您还应该在文档中对此进行解释。 例如， &lt;code&gt;doSomething()&lt;/code&gt; 可以写为：</target>
        </trans-unit>
        <trans-unit id="c610b12b0bdb7da0de89b6112dad5051859e5f8a" translate="yes" xml:space="preserve">
          <source>And on another place in your code:</source>
          <target state="translated">而在你的代码中的另一个地方,</target>
        </trans-unit>
        <trans-unit id="fec17b583e2fe54653432fe84eafb118f367f489" translate="yes" xml:space="preserve">
          <source>Another occurrence of a &lt;code&gt;NullPointerException&lt;/code&gt; occurs when one declares an object array, then immediately tries to dereference elements inside of it.</source>
          <target state="translated">当声明一个对象数组，然后立即尝试取消引用其中的元素时，会再次发生 &lt;code&gt;NullPointerException&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ec98bf54606e720fcaaa69af937b822723782a2b" translate="yes" xml:space="preserve">
          <source>Applications should throw instances of this class to indicate other
  illegal uses of the null object.</source>
          <target state="translated">应用程序应抛出该类的实例,以表明空对象的其他非法使用。</target>
        </trans-unit>
        <trans-unit id="bc2a7a3d52ad00a39aa87d3ee50b3aaad37ba8df" translate="yes" xml:space="preserve">
          <source>Applications should throw instances of this class to indicate other illegal uses of the &lt;code&gt;null&lt;/code&gt; object.</source>
          <target state="translated">应用程序应抛出此类的实例，以指示对 &lt;code&gt;null&lt;/code&gt; 对象的其他非法使用。</target>
        </trans-unit>
        <trans-unit id="3bb9c94bc952d51ad045ffee95f408bcacb6ca66" translate="yes" xml:space="preserve">
          <source>As you should know, Java types are divided into &lt;em&gt;primitive types&lt;/em&gt; (&lt;code&gt;boolean&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, etc.) and &lt;em&gt;reference types&lt;/em&gt;. Reference types in Java allow you to use the special value &lt;code&gt;null&lt;/code&gt; which is the Java way of saying &quot;no object&quot;.</source>
          <target state="translated">如您所知，Java类型分为&lt;em&gt;原始类型&lt;/em&gt; （ &lt;code&gt;boolean&lt;/code&gt; ， &lt;code&gt;int&lt;/code&gt; 等）和&lt;em&gt;引用类型&lt;/em&gt; 。 Java中的引用类型使您可以使用特殊值 &lt;code&gt;null&lt;/code&gt; ，这是Java表示&amp;ldquo;无对象&amp;rdquo;的方式。</target>
        </trans-unit>
        <trans-unit id="56bc238aac80b83b0ad417696ff3ad35156f1e99" translate="yes" xml:space="preserve">
          <source>At this time you have just &lt;strong&gt;declared&lt;/strong&gt; this object but not &lt;strong&gt;initialized or instantiated&lt;/strong&gt;. And whenever you try to access any property or method in it, it will throw  &lt;code&gt;NullPointerException&lt;/code&gt; which makes sense.</source>
          <target state="translated">此时，您刚刚&lt;strong&gt;声明了&lt;/strong&gt;该对象，但尚未&lt;strong&gt;初始化或实例化&lt;/strong&gt; 。 而且，每当您尝试访问其中的任何属性或方法时，它都会抛出 &lt;code&gt;NullPointerException&lt;/code&gt; ，这很有意义。</target>
        </trans-unit>
        <trans-unit id="c3ca15f5dab40cddc958cc899caa21a2ead819af" translate="yes" xml:space="preserve">
          <source>Avoid returning null in methods, for example returning empty collections when applicable.</source>
          <target state="translated">在方法中避免返回空的方法,例如在适用的情况下返回空集合。</target>
        </trans-unit>
        <trans-unit id="5bf95245956d03bfda307dee31c95faa928638e7" translate="yes" xml:space="preserve">
          <source>Avoiding &amp;ldquo;!= null&amp;rdquo; statements in Java?</source>
          <target state="translated">避免在Java中使用&amp;ldquo;！= null&amp;rdquo;语句？</target>
        </trans-unit>
        <trans-unit id="e712d8332074c0bc1572f647f4af0f2ae63f7453" translate="yes" xml:space="preserve">
          <source>Because you are using &lt;code&gt;student&lt;/code&gt;, but you forgot to initialize it like in the
correct code shown below:</source>
          <target state="translated">因为您使用的是 &lt;code&gt;student&lt;/code&gt; ，但是您忘记像下面显示的正确代码中那样对其进行初始化：</target>
        </trans-unit>
        <trans-unit id="b92e2b55b4354330a3c96dc3a92d018a12ff9a30" translate="yes" xml:space="preserve">
          <source>But (I hear you say) what if the NPE was thrown inside the &lt;code&gt;length()&lt;/code&gt; method call?</source>
          <target state="translated">但是（我听你说）如果NPE被抛出在 &lt;code&gt;length()&lt;/code&gt; 方法调用内怎么办？</target>
        </trans-unit>
        <trans-unit id="70de7c517ab05f22376120259b795a5d367579bd" translate="yes" xml:space="preserve">
          <source>But, when you try to declare a reference &lt;em&gt;type&lt;/em&gt;, something different happens. Take the following code:</source>
          <target state="translated">但是，当您尝试声明引用&lt;em&gt;类型时&lt;/em&gt; ，会发生一些不同的事情。 采取以下代码：</target>
        </trans-unit>
        <trans-unit id="3b760c60d971f57b8c1e7ecdfb80c460f606d442" translate="yes" xml:space="preserve">
          <source>Calling the instance method of a &lt;code&gt;null&lt;/code&gt; object.</source>
          <target state="translated">调用 &lt;code&gt;null&lt;/code&gt; 对象的实例方法。</target>
        </trans-unit>
        <trans-unit id="634a22d75f5bdbe844d7fa3fc013a702dcded4d8" translate="yes" xml:space="preserve">
          <source>Calling the instance method of a null object.</source>
          <target state="translated">调用空对象的实例方法。</target>
        </trans-unit>
        <trans-unit id="2a0a9d9e68fd881b18d0b16e39eef09d5cd31ae1" translate="yes" xml:space="preserve">
          <source>Declaration: &lt;code&gt;Item item[] = new Item[5];&lt;/code&gt;</source>
          <target state="translated">声明： &lt;code&gt;Item item[] = new Item[5];&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="019ac43ed7ec529c737b8e34b517aec2236183b6" translate="yes" xml:space="preserve">
          <source>Declaration: &lt;code&gt;Object object;&lt;/code&gt;</source>
          <target state="translated">声明： &lt;code&gt;Object object;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0c746af47b00ccd6d6e07567df1b2eaa4c74bbcd" translate="yes" xml:space="preserve">
          <source>Declare</source>
          <target state="translated">Declare</target>
        </trans-unit>
        <trans-unit id="90599a45b68a2a1c4b1602b265e701d17c3453c2" translate="yes" xml:space="preserve">
          <source>Dereferencing usually happens when using &lt;code&gt;.&lt;/code&gt; to access a method or field, or using &lt;code&gt;[&lt;/code&gt; to index an array.</source>
          <target state="translated">使用时通常会解除引用 &lt;code&gt;.&lt;/code&gt; 访问方法或字段，或使用 &lt;code&gt;[&lt;/code&gt; 为数组建立索引。</target>
        </trans-unit>
        <trans-unit id="d1d4b339edce051f7810e587e0c51e16ae74146a" translate="yes" xml:space="preserve">
          <source>Either the &lt;code&gt;print&lt;/code&gt; or &lt;code&gt;printString&lt;/code&gt; method can &lt;em&gt;check for null&lt;/em&gt;, for example:</source>
          <target state="translated">&lt;code&gt;print&lt;/code&gt; 或 &lt;code&gt;printString&lt;/code&gt; 方法都可以&lt;em&gt;检查null&lt;/em&gt; ，例如：</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="37aefda29876d0fc65311b06db99106714c1d07e" translate="yes" xml:space="preserve">
          <source>Fail fast and use asserts to avoid propagation of null objects through the whole application when they shouldn't be null.</source>
          <target state="translated">快速失败,当对象不应该为空时,使用断言来避免空对象在整个应用程序中传播。</target>
        </trans-unit>
        <trans-unit id="c1fb00189acb7a631f566fbdba728784b7fb6217" translate="yes" xml:space="preserve">
          <source>Finally, &lt;a href=&quot;https://stackoverflow.com/q/3988788/2775450&quot;&gt;How to pinpoint the exception &amp;amp; cause using Stack Trace&lt;/a&gt;</source>
          <target state="translated">最后， &lt;a href=&quot;https://stackoverflow.com/q/3988788/2775450&quot;&gt;如何使用堆栈跟踪来查明异常和原因&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e523347a7b87520e096c7d1a14d92c4714f695c7" translate="yes" xml:space="preserve">
          <source>First observation: the compilation succeeds! The problem in the program is NOT a compilation error. It is a &lt;em&gt;runtime&lt;/em&gt; error. (Some IDEs may warn your program will always throw an exception ... but the standard &lt;code&gt;javac&lt;/code&gt; compiler doesn't.)</source>
          <target state="translated">初步观察：编译成功！ 程序中的问题不是编译错误。 这是&lt;em&gt;运行时&lt;/em&gt;错误。 （某些IDE可能会警告您的程序将始终引发异常&amp;hellip;&amp;hellip;但是标准的 &lt;code&gt;javac&lt;/code&gt; 编译器不会。）</target>
        </trans-unit>
        <trans-unit id="8034a9b3e958bafca5b80be28a9299b4df2a9530" translate="yes" xml:space="preserve">
          <source>For example, below is a student class which will use it in our code.</source>
          <target state="translated">例如,下面是一个学生班,在我们的代码中会用到它。</target>
        </trans-unit>
        <trans-unit id="369b0266a6a685e58d0bf30452751bfdd1e0a29b" translate="yes" xml:space="preserve">
          <source>For instance, you may have a method as follows:</source>
          <target state="translated">例如,你可以有如下方法。</target>
        </trans-unit>
        <trans-unit id="e426a7d0a0945c9b135618483f0d59c549ba4902" translate="yes" xml:space="preserve">
          <source>Here, we see that the exception is thrown on line 13 (in the &lt;code&gt;printString&lt;/code&gt; method). Look at the line and check which values are null by
adding &lt;em&gt;logging statements&lt;/em&gt; or using a &lt;em&gt;debugger&lt;/em&gt;. We find out that &lt;code&gt;s&lt;/code&gt; is null, and calling the &lt;code&gt;length&lt;/code&gt; method on it throws the exception. We can see that the program stops throwing the exception when &lt;code&gt;s.length()&lt;/code&gt; is removed from the method.</source>
          <target state="translated">在这里，我们看到在第13行（在 &lt;code&gt;printString&lt;/code&gt; 方法中）引发了异常。 查看该行，并通过添加&lt;em&gt;日志记录语句&lt;/em&gt;或使用&lt;em&gt;调试器&lt;/em&gt;检查哪些值为空。 我们发现 &lt;code&gt;s&lt;/code&gt; 为null，并在其上调用 &lt;code&gt;length&lt;/code&gt; 方法将引发异常。 我们可以看到，从方法中删除 &lt;code&gt;s.length()&lt;/code&gt; 时，程序停止引发异常。</target>
        </trans-unit>
        <trans-unit id="24b11a882fed564b0eb9222ebda986752854af8c" translate="yes" xml:space="preserve">
          <source>How can that throw an NPE?</source>
          <target state="translated">这怎么可能扔出一个NPE?</target>
        </trans-unit>
        <trans-unit id="61b251a05ff88cf9158093feb2fc5a5c219ef28a" translate="yes" xml:space="preserve">
          <source>How do I fix it?</source>
          <target state="translated">怎么解决?</target>
        </trans-unit>
        <trans-unit id="327df277bc05aac18f0fa7fb4e2e987135c7512d" translate="yes" xml:space="preserve">
          <source>I still can't find the problem</source>
          <target state="translated">我还是找不到问题</target>
        </trans-unit>
        <trans-unit id="66b032c360e09ab3e68584d1ba075e1987c06cf7" translate="yes" xml:space="preserve">
          <source>I would add, very important, make a good use of the &lt;code&gt;final&lt;/code&gt; modifier.
&lt;a href=&quot;https://stackoverflow.com/questions/137868/using-final-modifier-whenever-applicable-in-java&quot;&gt;Using the &quot;final&quot; modifier whenever applicable in Java&lt;/a&gt;</source>
          <target state="translated">我要补充一点，非常重要的是，充分利用 &lt;code&gt;final&lt;/code&gt; 修饰符。 &lt;a href=&quot;https://stackoverflow.com/questions/137868/using-final-modifier-whenever-applicable-in-java&quot;&gt;只要适用于Java，就使用&amp;ldquo;最终&amp;rdquo;修饰符&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6308f70b4f0ae15d5eb767dca1766a9e484da9fb" translate="yes" xml:space="preserve">
          <source>If the exception has an associated error message, that will be output after the exception name. &lt;code&gt;NullPointerException&lt;/code&gt; is unusual in this respect, because it rarely has an error message.</source>
          <target state="translated">如果异常具有关联的错误消息，则将在异常名称之后输出。 &lt;code&gt;NullPointerException&lt;/code&gt; 在这方面很不寻常，因为它很少有错误消息。</target>
        </trans-unit>
        <trans-unit id="fb26238ed800420e5c53a71b6bf0a0b7a52eaeb2" translate="yes" xml:space="preserve">
          <source>If the value of &lt;code&gt;bar&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; then &lt;code&gt;bar[pos]&lt;/code&gt; will throw an NPE.</source>
          <target state="translated">如果 &lt;code&gt;bar&lt;/code&gt; 的值为 &lt;code&gt;null&lt;/code&gt; ,则 &lt;code&gt;bar[pos]&lt;/code&gt; 将抛出NPE。</target>
        </trans-unit>
        <trans-unit id="37e77872a7e487d9afdbefdbf2345bfd255ec57b" translate="yes" xml:space="preserve">
          <source>If the value of &lt;code&gt;bar[pos]&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; then calling &lt;code&gt;length()&lt;/code&gt; on it will throw an NPE.</source>
          <target state="translated">如果 &lt;code&gt;bar[pos]&lt;/code&gt; 值为 &lt;code&gt;null&lt;/code&gt; ,则对其调用 &lt;code&gt;length()&lt;/code&gt; 将抛出NPE。</target>
        </trans-unit>
        <trans-unit id="2fb4addbf00588879005cb609de5d3b982823f43" translate="yes" xml:space="preserve">
          <source>If you are not giving the initialization section then the &lt;code&gt;NullPointerException&lt;/code&gt; arise.</source>
          <target state="translated">如果不提供初始化部分，则会出现 &lt;code&gt;NullPointerException&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e65cd02770e6747d2781dbef1dbe7a0838997ff2" translate="yes" xml:space="preserve">
          <source>If you attempt to dereference &lt;code&gt;num&lt;/code&gt; BEFORE creating the object you get a &lt;code&gt;NullPointerException&lt;/code&gt;. In the most trivial cases, the compiler will catch the problem and let you know that &quot;&lt;code&gt;num may not have been initialized&lt;/code&gt;,&quot; but sometimes you may write code that does not directly create the object.</source>
          <target state="translated">如果在创建对象之前尝试取消引用 &lt;code&gt;num&lt;/code&gt; ，则会收到 &lt;code&gt;NullPointerException&lt;/code&gt; 。 在大多数情况下，编译器会发现问题，并告诉您&amp;ldquo; &lt;code&gt;num may not have been initialized&lt;/code&gt; &amp;rdquo;，但是有时您可能会编写不直接创建对象的代码。</target>
        </trans-unit>
        <trans-unit id="b405ab91b8fae348c65830646a2f15cfa73ec595" translate="yes" xml:space="preserve">
          <source>If you count the lines in the file above, line 4 is the one that I labeled with the &quot;HERE&quot; comment.</source>
          <target state="translated">如果算上上面文件中的行数,第4行就是我标注了 &quot;这里 &quot;的注释。</target>
        </trans-unit>
        <trans-unit id="a3f749cff981330fc865245f1db404f2d1866f2b" translate="yes" xml:space="preserve">
          <source>If you tried to debug the problem and still don't have a solution, you can post a question for more help, but make sure to include what you've tried so far. At a minimum, &lt;strong&gt;include the stacktrace&lt;/strong&gt; in the question, and &lt;strong&gt;mark the important line numbers&lt;/strong&gt; in the code. Also, try simplifying the code first (see &lt;a href=&quot;http://sscce.org/&quot;&gt;SSCCE&lt;/a&gt;).</source>
          <target state="translated">如果您尝试调试问题而仍然没有解决方案，则可以发布问题以寻求更多帮助，但请确保包括到目前为止已尝试的内容。 至少要在问题中&lt;strong&gt;包括stacktrace&lt;/strong&gt; ，并在代码中&lt;strong&gt;标记重要的行号&lt;/strong&gt; 。 另外，请尝试首先简化代码（请参阅&lt;a href=&quot;http://sscce.org/&quot;&gt;SSCCE&lt;/a&gt; ）。</target>
        </trans-unit>
        <trans-unit id="d37b6038f9a6cd2dff562dfe87901f623ec47b9e" translate="yes" xml:space="preserve">
          <source>If you want to use any object then you have two phases:</source>
          <target state="translated">如果你想使用任何对象,那么你有两个阶段。</target>
        </trans-unit>
        <trans-unit id="9d544f7bccdff6bb68a69fb25d6a390dd45d80a2" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;http://en.wikipedia.org/wiki/Java_%28programming_language%29&quot;&gt;Java&lt;/a&gt; all the variables you declare are actually &quot;references&quot; to the objects (or primitives) and not the objects themselves.</source>
          <target state="translated">在&lt;a href=&quot;http://en.wikipedia.org/wiki/Java_%28programming_language%29&quot;&gt;Java中&lt;/a&gt; ，您声明的所有变量实际上都是对对象（或原语）的&amp;ldquo;引用&amp;rdquo;，而不是对象本身。</target>
        </trans-unit>
        <trans-unit id="758063698f54411c5380c94bde31ca08d17694ea" translate="yes" xml:space="preserve">
          <source>In Java, everything (excluding primitive types) is in the form of a class.</source>
          <target state="translated">在Java中,一切(不包括基元类型)都是以类的形式存在。</target>
        </trans-unit>
        <trans-unit id="2d1e8941405e95d8f2a50326004d775c905ad0da" translate="yes" xml:space="preserve">
          <source>In fact there is only one way: it can only happen if &lt;code&gt;foo&lt;/code&gt; has the value &lt;code&gt;null&lt;/code&gt;.  We then try to run the &lt;code&gt;length()&lt;/code&gt; method on &lt;code&gt;null&lt;/code&gt; and .... BANG!</source>
          <target state="translated">实际上，只有一种方法：只有当 &lt;code&gt;foo&lt;/code&gt; 的值为 &lt;code&gt;null&lt;/code&gt; 时,它才会发生。 然后，我们尝试在 &lt;code&gt;null&lt;/code&gt; 和....上运行 &lt;code&gt;length()&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="e072b7c921ded7d305ef1e675e84ddd558ea97ee" translate="yes" xml:space="preserve">
          <source>In general, it's because something hasn't been initialized properly.</source>
          <target state="translated">一般来说,这是因为有的东西还没有被初始化好。</target>
        </trans-unit>
        <trans-unit id="e84992bf73e77db6c21133edfc7e60f3abe481d5" translate="yes" xml:space="preserve">
          <source>In short the stack trace will tell us unambiguously which statement of the program has thrown the NPE.</source>
          <target state="translated">简而言之,栈跟踪会明确地告诉我们程序的哪条语句抛出了NPE。</target>
        </trans-unit>
        <trans-unit id="ff129ea13cbf7d94f4945873a0e66ab25fb80786" translate="yes" xml:space="preserve">
          <source>In the second line, the &lt;code&gt;new&lt;/code&gt; keyword is used to instantiate (or create) an object of type &lt;code&gt;Integer&lt;/code&gt; and the pointer variable &lt;code&gt;num&lt;/code&gt; is assigned to that &lt;code&gt;Integer&lt;/code&gt; object.</source>
          <target state="translated">在第二行中， &lt;code&gt;new&lt;/code&gt; 关键字用于实例化（或创建） &lt;code&gt;Integer&lt;/code&gt; 类型的对象，并将指针变量 &lt;code&gt;num&lt;/code&gt; 分配给该 &lt;code&gt;Integer&lt;/code&gt; 对象。</target>
        </trans-unit>
        <trans-unit id="f88263ab738c6ace334b24405051e63bb3e43df8" translate="yes" xml:space="preserve">
          <source>In this example, the variable &lt;code&gt;x&lt;/code&gt; is an &lt;code&gt;int&lt;/code&gt; and Java will initialize it to &lt;code&gt;0&lt;/code&gt; for you. When you assign it the value of &lt;code&gt;10&lt;/code&gt; on the second line, your value of &lt;code&gt;10&lt;/code&gt; is written into the memory location referred to by &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">在此示例中，变量 &lt;code&gt;x&lt;/code&gt; 是一个 &lt;code&gt;int&lt;/code&gt; ，Java会为您将其初始化为 &lt;code&gt;0&lt;/code&gt; 。 在第二行为其分配值 &lt;code&gt;10&lt;/code&gt; 时，会将值 &lt;code&gt;10&lt;/code&gt; 写入 &lt;code&gt;x&lt;/code&gt; 所指的存储位置。</target>
        </trans-unit>
        <trans-unit id="58e9dc951da0b9f4f2e75e6349c8988645b66556" translate="yes" xml:space="preserve">
          <source>In which case, &lt;code&gt;obj&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;. If the method is intended to do something to the passed-in object, it is appropriate to throw the &lt;code&gt;NullPointerException&lt;/code&gt; because it's a programmer error and the programmer will need that information for debugging purposes.  Please include the name of the object variable in the exception message, like</source>
          <target state="translated">在这种情况下， &lt;code&gt;obj&lt;/code&gt; 为 &lt;code&gt;null&lt;/code&gt; 。 如果该方法旨在对传入的对象做某事，则抛出 &lt;code&gt;NullPointerException&lt;/code&gt; 是适当的，因为它是程序员的错误，程序员将需要该信息来进行调试。 请在异常消息中包括对象变量的名称，例如</target>
        </trans-unit>
        <trans-unit id="eaa842988aa6b70454294a66ea91b95dd8434276" translate="yes" xml:space="preserve">
          <source>In which case, you are not creating the object &lt;code&gt;obj&lt;/code&gt;, but rather assuming that it was created before the &lt;code&gt;doSomething()&lt;/code&gt; method was called. Note, it is possible to call the method like this:</source>
          <target state="translated">在这种情况下，您不是在创建对象 &lt;code&gt;obj&lt;/code&gt; ，而是假设它是在调用 &lt;code&gt;doSomething()&lt;/code&gt; 方法之前创建的。 注意，可以这样调用方法：</target>
        </trans-unit>
        <trans-unit id="0ef62b29237cb984a3dfc705f60d31635eca26a1" translate="yes" xml:space="preserve">
          <source>Indeed it is! And that is the problem. When we initialize like this:</source>
          <target state="translated">确实是这样!而这就是问题所在。当我们像这样初始化时,</target>
        </trans-unit>
        <trans-unit id="68fa16ffd48f366e4fa8d57fea78ff03fcab0191" translate="yes" xml:space="preserve">
          <source>Initialization</source>
          <target state="translated">Initialization</target>
        </trans-unit>
        <trans-unit id="dd695f048156244b311843d310329edc10ad3530" translate="yes" xml:space="preserve">
          <source>Initialization: &lt;code&gt;item[0] = new Item();&lt;/code&gt;</source>
          <target state="translated">初始化： &lt;code&gt;item[0] = new Item();&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fa4a5d2f4df0ef578634d30eb2c60e497f43b6cf" translate="yes" xml:space="preserve">
          <source>Initialization: &lt;code&gt;object = new Object();&lt;/code&gt;</source>
          <target state="translated">初始化： &lt;code&gt;object = new Object();&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1926c212a3dc9c16b0c0d64823cf41cde00923e6" translate="yes" xml:space="preserve">
          <source>It is also the case that if you attempt to use a null reference with &lt;code&gt;synchronized&lt;/code&gt;, that will also throw this exception, &lt;a href=&quot;https://docs.oracle.com/javase/specs/jls/se7/html/jls-14.html#jls-14.19&quot;&gt;per the JLS&lt;/a&gt;:</source>
          <target state="translated">同样的情况是，如果您尝试使用具有sync的null引用，则&lt;a href=&quot;https://docs.oracle.com/javase/specs/jls/se7/html/jls-14.html#jls-14.19&quot;&gt;根据JLS&lt;/a&gt;也会抛出此异常：</target>
        </trans-unit>
        <trans-unit id="2d16dbce2624ff3130d8e2270cf0f83a79ee462c" translate="yes" xml:space="preserve">
          <source>It tells you the full name of the exception that was thrown; i.e. &lt;code&gt;java.lang.NullPointerException&lt;/code&gt;.</source>
          <target state="translated">它告诉您所引发的异常的全名。 即 &lt;code&gt;java.lang.NullPointerException&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8417e2fba268434b1c803e3ff401a4e1a47b61fc" translate="yes" xml:space="preserve">
          <source>It tells you the name of the Java thread in which the exception was thrown.  For a simple program with one thread (like this one), it will be &quot;main&quot;. Let's move on ...</source>
          <target state="translated">它告诉你抛出异常的Java线程的名称。对于一个有一个线程的简单程序(比如这个程序),它将是 &quot;main&quot;。让我们继续往下看.....</target>
        </trans-unit>
        <trans-unit id="2a253b1e78bf697c2a11dc2ac9d828a12960e3d4" translate="yes" xml:space="preserve">
          <source>It's like you are trying to access an object which is &lt;code&gt;null&lt;/code&gt;. Consider below example:</source>
          <target state="translated">就像您要访问的对象为 &lt;code&gt;null&lt;/code&gt; 一样 。 考虑以下示例：</target>
        </trans-unit>
        <trans-unit id="76418c77d1fc266f3a62cf5f684db71e4d1120d9" translate="yes" xml:space="preserve">
          <source>Let's illustrate with the simple example (above) first. We start by looking at the line that the stack trace has told us is where the NPE happened:</source>
          <target state="translated">我们先用一个简单的例子(上图)来说明。我们先看一下堆栈轨迹告诉我们的那条线是NPE发生的地方。</target>
        </trans-unit>
        <trans-unit id="d339292be5c375475471a2ad89e7eae3c587ba51" translate="yes" xml:space="preserve">
          <source>Looking at the first line, how could that throw an NPE?  There are two ways:</source>
          <target state="translated">看第一行,怎么会扔出NPE呢?有两种方法。</target>
        </trans-unit>
        <trans-unit id="3048bc36d2ef3a5ca1d47ab6ade02d04a15cfa52" translate="yes" xml:space="preserve">
          <source>Next check where this value comes from. By following the callers of the method, we see that &lt;code&gt;s&lt;/code&gt; is passed in with &lt;code&gt;printString(name)&lt;/code&gt; in the &lt;code&gt;print()&lt;/code&gt; method, and &lt;code&gt;this.name&lt;/code&gt; is null.</source>
          <target state="translated">接下来检查此值的来源。 通过跟踪该方法的调用者，我们看到 &lt;code&gt;s&lt;/code&gt; 是通过 &lt;code&gt;print()&lt;/code&gt; 方法中的 &lt;code&gt;printString(name)&lt;/code&gt; 传入的，而 &lt;code&gt;this.name&lt;/code&gt; 为null。</target>
        </trans-unit>
        <trans-unit id="68bd69464f365c0fbf0e01313f81d5c88e5bffca" translate="yes" xml:space="preserve">
          <source>Next, we need to figure out which of those scenarios explains what is actually happening. We will start by exploring the first one:</source>
          <target state="translated">接下来,我们需要弄清楚这些情景中的哪种情景能解释实际发生的事情。我们将从第一种情况开始探索。</target>
        </trans-unit>
        <trans-unit id="8eceeaca2b7a976cb9ee01b6b05534d3a2006ca8" translate="yes" xml:space="preserve">
          <source>Note that in a more complicated example, there will be lots of lines in the NPE stack trace. But you can be sure that the second line (the first &quot;at&quot; line) will tell you where the NPE was thrown&lt;sup&gt;1&lt;/sup&gt;.</source>
          <target state="translated">请注意，在一个更复杂的示例中，NPE堆栈跟踪中将有很多行。 但是您可以确定第二行（第一行&amp;ldquo; at&amp;rdquo;行）将告诉您NPE的抛出位置&lt;sup&gt;1&lt;/sup&gt; 。</target>
        </trans-unit>
        <trans-unit id="7efbcba01f44f10b16dc449b3a4ce5b93ec278ac" translate="yes" xml:space="preserve">
          <source>OK, so let's try a slightly more tricky example. This will require some &lt;em&gt;logical deduction&lt;/em&gt;.</source>
          <target state="translated">好的，让我们尝试一个更棘手的示例。 这将需要一些&lt;em&gt;逻辑上的推论&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="09140446828a190f98d3e888ff50d49babf39577" translate="yes" xml:space="preserve">
          <source>On the first line inside &lt;code&gt;main&lt;/code&gt;, I'm explicitly setting the &lt;code&gt;Object&lt;/code&gt; reference &lt;code&gt;obj&lt;/code&gt; equal to &lt;code&gt;null&lt;/code&gt;.  This means I have a reference, but it isn't pointing to any object.  After that, I try to treat the reference as though it points to an object by calling a method on it.  This results in a &lt;code&gt;NullPointerException&lt;/code&gt; because there is no code to execute in the location that the reference is pointing.</source>
          <target state="translated">在 &lt;code&gt;main&lt;/code&gt; 内部的第一行，我将 &lt;code&gt;Object&lt;/code&gt; 引用 &lt;code&gt;obj&lt;/code&gt; 显式设置为 &lt;code&gt;null&lt;/code&gt; 。 这意味着我有一个引用，但它没有指向任何对象。 之后，我尝试通过在其上调用方法来将引用当作指向对象的方式来对待。 这将导致 &lt;code&gt;NullPointerException&lt;/code&gt; ,因为在引用指向的位置没有代码可执行。</target>
        </trans-unit>
        <trans-unit id="5b3e2ae3b2ddecc346c758e8d3b5549b755c1e92" translate="yes" xml:space="preserve">
          <source>Or you can design the class so that &lt;code&gt;name&lt;/code&gt;&lt;em&gt;always has a non-null value&lt;/em&gt;:</source>
          <target state="translated">或者，您可以设计类，使 &lt;code&gt;name&lt;/code&gt; &lt;em&gt;始终具有非null值&lt;/em&gt; ：</target>
        </trans-unit>
        <trans-unit id="cc52fe609e5da3175933559d437d1fdb72e364c5" translate="yes" xml:space="preserve">
          <source>Other fixes</source>
          <target state="translated">其他修复方法</target>
        </trans-unit>
        <trans-unit id="5332d8134d57cacdb6ee04717450e635f41c6767" translate="yes" xml:space="preserve">
          <source>Otherwise, if the value of the Expression is null, a &lt;code&gt;NullPointerException&lt;/code&gt; is thrown.</source>
          <target state="translated">否则，如果Expression的值为null，则抛出 &lt;code&gt;NullPointerException&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="59f63782fa2d7a08a6249d7857f98b11c193fbd3" translate="yes" xml:space="preserve">
          <source>Prefer &lt;code&gt;valueOf()&lt;/code&gt; over &lt;code&gt;toString()&lt;/code&gt;.</source>
          <target state="translated">在 &lt;code&gt;toString()&lt;/code&gt; 上首选 &lt;code&gt;valueOf()&lt;/code&gt; （） 。</target>
        </trans-unit>
        <trans-unit id="e6eb6b961bbe76bed259ea3835d017bb805fcd01" translate="yes" xml:space="preserve">
          <source>Probably the quickest example code I could come up with to illustrate a &lt;code&gt;NullPointerException&lt;/code&gt; would be:</source>
          <target state="translated">我想出一个最快的示例代码来说明 &lt;code&gt;NullPointerException&lt;/code&gt; 可能是：</target>
        </trans-unit>
        <trans-unit id="e1aa69767a9902b2d9d069ada53c5e09041f46fc" translate="yes" xml:space="preserve">
          <source>Question: How do I read the NPE stacktrace?</source>
          <target state="translated">问题:如何读取NPE的堆栈跟踪?如何读取NPE的栈道跟踪?</target>
        </trans-unit>
        <trans-unit id="2a7214e14c4e2559dd384c3596ba27c46d122f5b" translate="yes" xml:space="preserve">
          <source>Question: How do I track down the cause of the NPE exception in my code?</source>
          <target state="translated">问题:我的问题是什么?如何追查代码中NPE异常的原因?</target>
        </trans-unit>
        <trans-unit id="110059053a369d1fac95bf75cd737030c08abcd5" translate="yes" xml:space="preserve">
          <source>Question: What causes a &lt;code&gt;NullPointerException&lt;/code&gt; (NPE)?</source>
          <target state="translated">问题：什么原因导致 &lt;code&gt;NullPointerException&lt;/code&gt; （NPE）？</target>
        </trans-unit>
        <trans-unit id="f7b4ef7eaa8bdc43a3fc8327ee8e3b2a393de223" translate="yes" xml:space="preserve">
          <source>Reference: &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/lang/NullPointerException.html&quot;&gt;http://docs.oracle.com/javase/8/docs/api/java/lang/NullPointerException.html&lt;/a&gt;</source>
          <target state="translated">参考： &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/lang/NullPointerException.html&quot;&gt;http&lt;/a&gt; : //docs.oracle.com/javase/8/docs/api/java/lang/NullPointerException.html</target>
        </trans-unit>
        <trans-unit id="20c7030469d7703e9338b3a13079900db1ad58d0" translate="yes" xml:space="preserve">
          <source>Same for the array concept:</source>
          <target state="translated">同样是阵列的概念。</target>
        </trans-unit>
        <trans-unit id="a328a8219b1d929d6ed454cdd41b31e02977388d" translate="yes" xml:space="preserve">
          <source>Second observation: when I run the program, it outputs two lines of &quot;gobbledy-gook&quot;. &lt;strong&gt;WRONG!!&lt;/strong&gt; That's not gobbledy-gook. It is a stacktrace ... and it provides &lt;em&gt;vital information&lt;/em&gt; that will help you track down the error in your code, if you take the time to read it carefully.</source>
          <target state="translated">第二个观察：当我运行程序时，它输出两行&amp;ldquo; gobbledy-gook&amp;rdquo;。 &lt;strong&gt;错误！！&lt;/strong&gt; 那不是傻瓜。 这是一个堆栈跟踪...，它提供了&lt;em&gt;重要的信息&lt;/em&gt; ，如果您需要花时间仔细阅读它，它将帮助您找到代码中的错误。</target>
        </trans-unit>
        <trans-unit id="5ece6ed3284a8e7793f5f8e6191387a1ca65d15c" translate="yes" xml:space="preserve">
          <source>See also:
&lt;a href=&quot;http://javarevisited.blogspot.com/2013/05/ava-tips-and-best-practices-to-avoid-nullpointerexception-program-application.html&quot;&gt;A good list of best practices&lt;/a&gt;</source>
          <target state="translated">另请参阅： &lt;a href=&quot;http://javarevisited.blogspot.com/2013/05/ava-tips-and-best-practices-to-avoid-nullpointerexception-program-application.html&quot;&gt;最佳做法的好清单&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c66fb315fd8a9161821812042eba9ece0fca8b7e" translate="yes" xml:space="preserve">
          <source>See this below example as well:</source>
          <target state="translated">看下面这个例子也是如此。</target>
        </trans-unit>
        <trans-unit id="3f608da5633e1fbbbac554cb0e0f6193783c3e96" translate="yes" xml:space="preserve">
          <source>So let's look at what it says:</source>
          <target state="translated">那么,我们来看看它说的是什么?</target>
        </trans-unit>
        <trans-unit id="a957e6b089e86c3afa609e7f79243914d473cc8f" translate="yes" xml:space="preserve">
          <source>So now we have two &quot;at&quot; lines. The first one is for this line:</source>
          <target state="translated">所以现在我们有两行 &quot;在&quot;。第一条是针对这条线的。</target>
        </trans-unit>
        <trans-unit id="ad6c8b1add16d8acb60150ed283087c1e312a08e" translate="yes" xml:space="preserve">
          <source>So what about our second scenario? Well, we can see that &lt;code&gt;pos&lt;/code&gt; is &lt;code&gt;1&lt;/code&gt;, so that means that &lt;code&gt;foo[1]&lt;/code&gt; must be &lt;code&gt;null&lt;/code&gt;. Is that possible?</source>
          <target state="translated">那么我们的第二种情况呢？ 好吧，我们可以看到 &lt;code&gt;pos&lt;/code&gt; 是 &lt;code&gt;1&lt;/code&gt; ，这意味着 &lt;code&gt;foo[1]&lt;/code&gt; 必须为 &lt;code&gt;null&lt;/code&gt; 。 那可能吗？</target>
        </trans-unit>
        <trans-unit id="edded83678c3da726f6a8903ea8346cc771eea21" translate="yes" xml:space="preserve">
          <source>So where did that &lt;code&gt;null&lt;/code&gt; come from? In this case it is obvious, and it is obvious what we need to do to fix it. (Assign a non-null value to &lt;code&gt;foo&lt;/code&gt;.)</source>
          <target state="translated">那么， &lt;code&gt;null&lt;/code&gt; 是从哪里来的呢？ 在这种情况下，很明显，很明显，我们需要进行修复。 （将一个非空值分配给 &lt;code&gt;foo&lt;/code&gt; 。）</target>
        </trans-unit>
        <trans-unit id="4b796033ff61d122122d65b5810f1c0b31a4da7c" translate="yes" xml:space="preserve">
          <source>So you have a &lt;code&gt;NullPointerException&lt;/code&gt;. How do you fix it? Let's take a simple example which throws a &lt;code&gt;NullPointerException&lt;/code&gt;:</source>
          <target state="translated">因此，您有一个 &lt;code&gt;NullPointerException&lt;/code&gt; 。 您如何解决？ 让我们举一个抛出 &lt;code&gt;NullPointerException&lt;/code&gt; 的简单示例：</target>
        </trans-unit>
        <trans-unit id="3a73c967d00d54d26fc9adb9c9ba33d3cc383d28" translate="yes" xml:space="preserve">
          <source>Sonar with findbugs can detect NPE.
&lt;a href=&quot;https://stackoverflow.com/questions/20899931/can-sonar-catch-null-pointer-exceptions-caused-by-jvm-dynamically&quot;&gt;Can sonar catch null pointer exceptions caused by JVM Dynamically&lt;/a&gt;</source>
          <target state="translated">带有findbug的声纳可以检测NPE。 &lt;a href=&quot;https://stackoverflow.com/questions/20899931/can-sonar-catch-null-pointer-exceptions-caused-by-jvm-dynamically&quot;&gt;声纳能否动态捕获由JVM引起的空指针异常&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0b3f0dcd539c143def5976a02527992145f3bd87" translate="yes" xml:space="preserve">
          <source>Suppose that I compile and run the program above:</source>
          <target state="translated">假设我编译并运行上面的程序。</target>
        </trans-unit>
        <trans-unit id="fc52468f6c93bbc71a7e83fc6a1c10802582b2cc" translate="yes" xml:space="preserve">
          <source>Taking the length of &lt;code&gt;null&lt;/code&gt; as if it were an array.</source>
          <target state="translated">将 &lt;code&gt;null&lt;/code&gt; 的长度视为数组。</target>
        </trans-unit>
        <trans-unit id="a7a05060b85348fb26d1541414ea261fc8549ebe" translate="yes" xml:space="preserve">
          <source>Taking the length of null as if it were an array.</source>
          <target state="translated">把空的长度当作是一个数组。</target>
        </trans-unit>
        <trans-unit id="70e38b9cf4b5f335ee765ffbb4c9d75eed7a25c7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NullPointerException&lt;/code&gt; occurs when you declare a variable but did not create an object and assign to the variable before trying to use the contents of the variable (called &lt;em&gt;dereferencing&lt;/em&gt;). So you are pointing to something that does not actually exist.</source>
          <target state="translated">当您声明变量但未创建对象并在尝试使用变量的内容之前将其分配给变量时，会发生 &lt;code&gt;NullPointerException&lt;/code&gt; （称为&lt;em&gt;dereferencing&lt;/em&gt; ）。 因此，您指向的是实际上不存在的东西。</target>
        </trans-unit>
        <trans-unit id="4dd2a758bfbc7c2e200907cb43a178174a1ef438" translate="yes" xml:space="preserve">
          <source>The below code gives you a null pointer exception.</source>
          <target state="translated">下面的代码给你一个空指针异常。</target>
        </trans-unit>
        <trans-unit id="5afcbf74c6133d5e8acb0880821ac443b031db8d" translate="yes" xml:space="preserve">
          <source>The first line declares a variable named &lt;code&gt;num&lt;/code&gt;, but it does not actually contain a primitive value yet. Instead, it contains a pointer (because the type is &lt;code&gt;Integer&lt;/code&gt; which is a reference type). Since you have not yet said what to point to, Java sets it to &lt;code&gt;null&lt;/code&gt;, which means &quot;&lt;strong&gt;I am pointing to &lt;em&gt;nothing&lt;/em&gt;&lt;/strong&gt;&quot;.</source>
          <target state="translated">第一行声明了一个名为 &lt;code&gt;num&lt;/code&gt; 的变量，但实际上尚未包含原始值。 相反，它包含一个指针（因为类型是 &lt;code&gt;Integer&lt;/code&gt; ，它是引用类型）。 由于您尚未说出要指向的内容，因此Java将其设置为 &lt;code&gt;null&lt;/code&gt; ，这意味着&amp;ldquo; &lt;strong&gt;我&lt;em&gt;什么都没有&lt;/em&gt;指向&lt;/strong&gt; &amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="94ff3f2d90b51f92f5a22e77c70e18165e13575b" translate="yes" xml:space="preserve">
          <source>The first line of the stack trace tells you a number of things:</source>
          <target state="translated">栈道的第一行痕迹告诉你一些事情。</target>
        </trans-unit>
        <trans-unit id="11b1b8cb1b03ae2aa5fe1b9dc487442dbfdff843" translate="yes" xml:space="preserve">
          <source>The first step is identifying exactly &lt;em&gt;which values are causing the exception&lt;/em&gt;. For this, we need to do some debugging. It's important to learn to read a &lt;em&gt;stacktrace&lt;/em&gt;. This will show you where the exception was thrown:</source>
          <target state="translated">第一步是准确地确定&lt;em&gt;哪些值导致了异常&lt;/em&gt; 。 为此，我们需要进行一些调试。 学习读取&lt;em&gt;stacktrace&lt;/em&gt;很重要。 这将向您显示引发异常的位置：</target>
        </trans-unit>
        <trans-unit id="5f86a6ec7cb1a7454d5e5706d38263349a9ab618" translate="yes" xml:space="preserve">
          <source>The object lives in the VM memory space and the only way to access it is using &lt;code&gt;this&lt;/code&gt; references. Take this example:</source>
          <target state="translated">该对象位于VM内存空间中，访问此对象的唯一方法是使用 &lt;code&gt;this&lt;/code&gt; 引用。 举个例子：</target>
        </trans-unit>
        <trans-unit id="e2b9b98cc8af92a275b3f463db51d343e34aca5d" translate="yes" xml:space="preserve">
          <source>The second line is the most important one in diagnosing an NPE.</source>
          <target state="translated">第二条线是诊断NPE最重要的一条。</target>
        </trans-unit>
        <trans-unit id="200bc558e7d3cbedcdab6266531c26406b51859d" translate="yes" xml:space="preserve">
          <source>The variable can have a &lt;em&gt;default value&lt;/em&gt; (and &lt;code&gt;setName&lt;/code&gt; can prevent it being set to null):</source>
          <target state="translated">该变量可以具有&lt;em&gt;默认值&lt;/em&gt; （并且 &lt;code&gt;setName&lt;/code&gt; 可以防止将其设置为null）：</target>
        </trans-unit>
        <trans-unit id="a42f342c5074f18b2ee8c62146f8c92dc81607f4" translate="yes" xml:space="preserve">
          <source>There are many ways that you could use a &lt;code&gt;null&lt;/code&gt; value that will result in a &lt;code&gt;NullPointerException&lt;/code&gt;. In fact, the only things that you &lt;em&gt;can&lt;/em&gt; do with a &lt;code&gt;null&lt;/code&gt; without causing an NPE are:</source>
          <target state="translated">您可以通过多种方式使用 &lt;code&gt;null&lt;/code&gt; 值，这将导致 &lt;code&gt;NullPointerException&lt;/code&gt; 。 实际上，在不导致NPE的情况下， &lt;em&gt;可以&lt;/em&gt;使用 &lt;code&gt;null&lt;/code&gt; 进行的唯一操作是：</target>
        </trans-unit>
        <trans-unit id="87a50685fb8181533a1a38415f42609ffed3b6b7" translate="yes" xml:space="preserve">
          <source>This an important thing to know - when there are no more references to an object (in the example above when &lt;code&gt;reference&lt;/code&gt; and &lt;code&gt;otherReference&lt;/code&gt; both point to null) then the object is &quot;unreachable&quot;. There is no way we can work with it, so this object is ready to be garbage collected, and at some point, the VM will free the memory used by this object and will allocate another.</source>
          <target state="translated">要知道这一点很重要-当不再有对对象的引用时（在上面的示例中 &lt;code&gt;reference&lt;/code&gt; 和 &lt;code&gt;otherReference&lt;/code&gt; 都指向null时），则对象是&amp;ldquo;不可访问的&amp;rdquo;。 我们无法使用它，因此已准备好对该对象进行垃圾回收，并且在某些时候，VM将释放该对象使用的内存并分配另一个。</target>
        </trans-unit>
        <trans-unit id="4027f6004fa781ce93560b2dd9d73f25224a03bd" translate="yes" xml:space="preserve">
          <source>This is enough to give us a solution: add a call to &lt;code&gt;printer.setName()&lt;/code&gt; before calling &lt;code&gt;printer.print()&lt;/code&gt;.</source>
          <target state="translated">这足以为我们提供解决方案：在调用 &lt;code&gt;printer.setName()&lt;/code&gt; 之前添加对printer.setName（）的调用。</target>
        </trans-unit>
        <trans-unit id="0ca84ac3076d9c11cfc10289571d11019273ee9b" translate="yes" xml:space="preserve">
          <source>This is the hard part. The short answer is to apply logical inference to the evidence provided by the stack trace, the source code and the relevant API documentation.</source>
          <target state="translated">这是最难的部分。简而言之,就是根据堆栈痕迹、源代码和相关的API文档提供的证据进行逻辑推理。</target>
        </trans-unit>
        <trans-unit id="7676e926601728e6f60a78aa4a791254b0dcaa71" translate="yes" xml:space="preserve">
          <source>This tells us a number of things:</source>
          <target state="translated">这告诉我们一些事情。</target>
        </trans-unit>
        <trans-unit id="c54f75a574b2c4fd91cac2f701399ef8dfb71a73" translate="yes" xml:space="preserve">
          <source>Throwing &lt;code&gt;null&lt;/code&gt; as if it were a Throwable value.</source>
          <target state="translated">将 &lt;code&gt;null&lt;/code&gt; 视为Throwable值。</target>
        </trans-unit>
        <trans-unit id="07a54638a8e2bc759d8cf4b233a15f1d6bf23eb7" translate="yes" xml:space="preserve">
          <source>Throwing null as if it were a Throwable value.</source>
          <target state="translated">抛出空值,好像它是一个可抛出的值。</target>
        </trans-unit>
        <trans-unit id="619270eb9d34c9bc6746a84f38e87b07725f7c5b" translate="yes" xml:space="preserve">
          <source>Thrown when an application attempts to use null in a case where an
  object is required. These include:</source>
          <target state="translated">当应用程序试图在需要对象的情况下使用null时抛出。这些情况包括:</target>
        </trans-unit>
        <trans-unit id="d45e625248d1bd8fbefc6c9c54d4c25071618a70" translate="yes" xml:space="preserve">
          <source>Use annotations &lt;a href=&quot;https://javaee.github.io/javaee-spec/javadocs/javax/validation/constraints/NotNull.html&quot;&gt;&lt;code&gt;@NotNull&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://javadoc.io/static/com.github.spotbugs/spotbugs-annotations/3.1.12/edu/umd/cs/findbugs/annotations/Nullable.html&quot;&gt;&lt;code&gt;@Nullable&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">使用注释&lt;a href=&quot;https://javaee.github.io/javaee-spec/javadocs/javax/validation/constraints/NotNull.html&quot;&gt; &lt;code&gt;@NotNull&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;https://javadoc.io/static/com.github.spotbugs/spotbugs-annotations/3.1.12/edu/umd/cs/findbugs/annotations/Nullable.html&quot;&gt; &lt;code&gt;@Nullable&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3a45ab3058a4a8d1f2705a89ea1c87802cd3caa9" translate="yes" xml:space="preserve">
          <source>Use equals with a known object first: &lt;code&gt;if(&quot;knownObject&quot;.equals(unknownObject)&lt;/code&gt;</source>
          <target state="translated">首先对已知对象使用equals： &lt;code&gt;if(&quot;knownObject&quot;.equals(unknownObject)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8c9a4702b1c2baf074df6f4b2f4056e68b58c6b2" translate="yes" xml:space="preserve">
          <source>Use null safe &lt;a href=&quot;https://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/StringUtils.html&quot;&gt;&lt;code&gt;StringUtils&lt;/code&gt;&lt;/a&gt; methods &lt;code&gt;StringUtils.isEmpty(null)&lt;/code&gt;.</source>
          <target state="translated">使用null安全的&lt;a href=&quot;https://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/StringUtils.html&quot;&gt; &lt;code&gt;StringUtils&lt;/code&gt; &lt;/a&gt;方法 &lt;code&gt;StringUtils.isEmpty(null)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8e7aac8f8901568e201b480a0f51d1e38bd4e704" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;final&lt;/code&gt; modifier to enforce good initialization.</source>
          <target state="translated">使用 &lt;code&gt;final&lt;/code&gt; 修饰符强制执行良好的初始化。</target>
        </trans-unit>
        <trans-unit id="5571a8c84a86d2b329356c5ece6f990e0c2ee9e8" translate="yes" xml:space="preserve">
          <source>Well, if that happened, the stack trace would look different. The first &quot;at&quot; line would say that the exception was thrown in some line in the &lt;code&gt;java.lang.String&lt;/code&gt; class, and line 4 of &lt;code&gt;Test.java&lt;/code&gt; would be the second &quot;at&quot; line.</source>
          <target state="translated">好吧，如果发生这种情况，堆栈跟踪看起来会有所不同。 第一行&amp;ldquo; at&amp;rdquo;表示该异常是在 &lt;code&gt;java.lang.String&lt;/code&gt; 类的某个行中引发的，而 &lt;code&gt;Test.java&lt;/code&gt; 的第四行将是第二行&amp;ldquo; at&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="2ea8cb4ce3fa7d8910d932e12186ed6c797ff3eb" translate="yes" xml:space="preserve">
          <source>What are Null Pointer Exceptions (&lt;code&gt;java.lang.NullPointerException&lt;/code&gt;) and what causes them?</source>
          <target state="translated">什么是空指针异常（ &lt;code&gt;java.lang.NullPointerException&lt;/code&gt; ），是什么导致它们？</target>
        </trans-unit>
        <trans-unit id="a23e7c7dd6bd4a210d09c8c4d18ed8b71c338010" translate="yes" xml:space="preserve">
          <source>What is a NullPointerException, and how do I fix it</source>
          <target state="translated">什么是NullPointerException,如何修复它?</target>
        </trans-unit>
        <trans-unit id="fd79d84a8b29d705a7298fe1cdcfa64995856eae" translate="yes" xml:space="preserve">
          <source>What is a NullPointerException?</source>
          <target state="translated">什么是NullPointerException?</target>
        </trans-unit>
        <trans-unit id="0edb28c818192a20185dc07fb4a9521f4d21afac" translate="yes" xml:space="preserve">
          <source>What methods/tools can be used to determine the cause so that you stop
  the exception from causing the program to terminate prematurely?</source>
          <target state="translated">可以用什么方法来确定原因,从而阻止异常导致程序提前终止?</target>
        </trans-unit>
        <trans-unit id="045d1c645b9d61717b1c4818404fbc1b9d0fe6eb" translate="yes" xml:space="preserve">
          <source>When you attempt to execute one object method, the reference asks the living object to execute that method. But if the reference is referencing NULL (nothing, zero, void, nada)  then there is no way the method gets executed. Then the runtime let you know this by throwing a NullPointerException.</source>
          <target state="translated">当你尝试执行一个对象方法时,引用会要求活对象执行该方法。但是,如果引用是引用NULL(nothing,0,0,void,nada),那么这个方法就不可能被执行。然后运行时通过抛出一个NullPointerException让你知道这一点。</target>
        </trans-unit>
        <trans-unit id="b38b6a98cef1c3244acc9814b85d017efbbe9ca2" translate="yes" xml:space="preserve">
          <source>When you declare a reference variable (i.e. an object) you are really creating a pointer to an object. Consider the following code where you declare a variable of primitive type &lt;code&gt;int&lt;/code&gt;:</source>
          <target state="translated">声明引用变量（即对象）时，实际上是在创建指向对象的指针。 考虑以下代码，在其中声明基本类型为 &lt;code&gt;int&lt;/code&gt; 的变量：</target>
        </trans-unit>
        <trans-unit id="971a4d1346f3c7ff4aec8932ef90985736642518" translate="yes" xml:space="preserve">
          <source>Where does &lt;code&gt;bar&lt;/code&gt; come from? It is a parameter to the &lt;code&gt;test&lt;/code&gt; method call, and if we look at how &lt;code&gt;test&lt;/code&gt; was called, we can see that it comes from the &lt;code&gt;foo&lt;/code&gt; static variable. In addition, we can see clearly that we initialized &lt;code&gt;foo&lt;/code&gt; to a non-null value.  That is sufficient to tentatively dismiss this explanation. (In theory, something else could &lt;em&gt;change&lt;/em&gt;&lt;code&gt;foo&lt;/code&gt; to &lt;code&gt;null&lt;/code&gt; ... but that is not happening here.)</source>
          <target state="translated">&lt;code&gt;bar&lt;/code&gt; 从哪里来？ 它是 &lt;code&gt;test&lt;/code&gt; 方法调用的参数，如果我们看一下 &lt;code&gt;test&lt;/code&gt; 调用方式，我们可以看到它来自 &lt;code&gt;foo&lt;/code&gt; 静态变量。 此外，我们可以清楚地看到我们将 &lt;code&gt;foo&lt;/code&gt; 初始化为非null值。 这足以暂时驳斥该解释。 （理论上，其他方法可以&lt;em&gt;将&lt;/em&gt; &lt;code&gt;foo&lt;/code&gt; &lt;em&gt;更改&lt;/em&gt;为 &lt;code&gt;null&lt;/code&gt; &amp;hellip;&amp;hellip;但这在这里没有发生。）</target>
        </trans-unit>
        <trans-unit id="8734be1e4922d39775902ac36f9de454e8f5cd18" translate="yes" xml:space="preserve">
          <source>Where is &lt;code&gt;this.name&lt;/code&gt; set? In the &lt;code&gt;setName(String)&lt;/code&gt; method. With some more debugging, we can see that this method isn't called at all. If the method was called, make sure to check the &lt;em&gt;order&lt;/em&gt; that these methods are called, and the set method isn't called &lt;em&gt;after&lt;/em&gt; the print method.</source>
          <target state="translated">这个名称在哪里设置？ 在 &lt;code&gt;setName(String)&lt;/code&gt; 方法中。 通过更多的调试，我们可以看到根本没有调用此方法。 如果调用了该方法，请确保检查这些方法的调用&lt;em&gt;顺序&lt;/em&gt; ，并且在print方法&lt;em&gt;之后&lt;/em&gt;不调用set方法。</target>
        </trans-unit>
        <trans-unit id="706f4059c0a82014b57c44cebf4ce048cfdc2bda" translate="yes" xml:space="preserve">
          <source>You &lt;em&gt;must&lt;/em&gt; initialize the elements in the array &lt;em&gt;before&lt;/em&gt; accessing or dereferencing them.</source>
          <target state="translated">您&lt;em&gt;必须&lt;/em&gt; &lt;em&gt;在&lt;/em&gt;访问或取消引用数组&lt;em&gt;之前&lt;/em&gt;初始化数组中的元素。</target>
        </trans-unit>
        <trans-unit id="c84e0b49f0f58904617fb6abbab17f59ee3f10cf" translate="yes" xml:space="preserve">
          <source>Your reference is &quot;pointing&quot; to null, thus &quot;Null -&amp;gt; Pointer&quot;.</source>
          <target state="translated">您的引用是&amp;ldquo;指向&amp;rdquo; null，因此是&amp;ldquo; Null-&amp;gt;指针&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="b2766c956c0871691da99343bea9fdce861530cc" translate="yes" xml:space="preserve">
          <source>and the second one is for this line:</source>
          <target state="translated">而第二个就是为了这一行。</target>
        </trans-unit>
        <trans-unit id="2b6f2c4a758bdfa568fbd16a03a6270d7b0cb1d4" translate="yes" xml:space="preserve">
          <source>assign it to a reference variable or read it from a reference variable,</source>
          <target state="translated">将其分配给一个参考变量或从参考变量中读取。</target>
        </trans-unit>
        <trans-unit id="4794f1fa5f6182550ad52c39225ba650ca2c5cac" translate="yes" xml:space="preserve">
          <source>assign it to an array element or read it from an array element (provided that array reference itself is non-null!),</source>
          <target state="translated">将其分配给数组元素或从数组元素中读取(前提是数组引用本身是非空的!)。</target>
        </trans-unit>
        <trans-unit id="fea64947f3e1c19acb6fae94b6a25dd469358299" translate="yes" xml:space="preserve">
          <source>pass it as a parameter or return it as a result, or</source>
          <target state="translated">作为参数传递或作为结果返回,或</target>
        </trans-unit>
        <trans-unit id="60ce2f688c217a588196b5698debb2b0bed8b3dc" translate="yes" xml:space="preserve">
          <source>test it using the &lt;code&gt;==&lt;/code&gt; or &lt;code&gt;!=&lt;/code&gt; operators, or &lt;code&gt;instanceof&lt;/code&gt;.</source>
          <target state="translated">使用 &lt;code&gt;==&lt;/code&gt; 或 &lt;code&gt;!=&lt;/code&gt; 运算符或 &lt;code&gt;instanceof&lt;/code&gt; 对其进行测试。</target>
        </trans-unit>
        <trans-unit id="48dd492845e5923b030e505964695a889432ed8e" translate="yes" xml:space="preserve">
          <source>the statement labelled &quot;HERE&quot; is going to attempt to run the &lt;code&gt;length()&lt;/code&gt; method on a &lt;code&gt;null&lt;/code&gt; reference, and this will throw a &lt;code&gt;NullPointerException&lt;/code&gt;.</source>
          <target state="translated">标记为&amp;ldquo; HERE&amp;rdquo;的语句将尝试在 &lt;code&gt;null&lt;/code&gt; 引用上运行 &lt;code&gt;length()&lt;/code&gt; 方法，这将引发 &lt;code&gt;NullPointerException&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c5c707c98218e538788fb9a4baa24f7af56308cd" translate="yes" xml:space="preserve">
          <source>we allocate a &lt;code&gt;String[]&lt;/code&gt; with two elements &lt;em&gt;that are initialized to &lt;code&gt;null&lt;/code&gt;&lt;/em&gt;. After that, we have not changed the contents of &lt;code&gt;foo&lt;/code&gt; ... so &lt;code&gt;foo[1]&lt;/code&gt; will still be &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">我们为 &lt;code&gt;String[]&lt;/code&gt; 分配了两个&lt;em&gt;初始化为 &lt;code&gt;null&lt;/code&gt; 的&lt;/em&gt;元素。 之后，我们没有更改 &lt;code&gt;foo&lt;/code&gt; ...的内容，因此 &lt;code&gt;foo[1]&lt;/code&gt; 仍为 &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
