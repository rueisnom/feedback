<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://stackoverflow.com/questions/166221">
    <body>
      <group id="166221">
        <trans-unit id="bde1bb6bdfc4ce6d648eddba8fecf1f35e5a4599" translate="yes" xml:space="preserve">
          <source>-- Use as little as --</source>
          <target state="translated">--...используй так же мало,как ...</target>
        </trans-unit>
        <trans-unit id="191f36cefd639ecd80c2171565d0def830f358af" translate="yes" xml:space="preserve">
          <source>-- or as much as --</source>
          <target state="translated">--...или в той же степени...</target>
        </trans-unit>
        <trans-unit id="321ae22f35c07216907e385c988025d44d8ac2ad" translate="yes" xml:space="preserve">
          <source>2019 Update: It &lt;em&gt;still&lt;/em&gt; depends on the browsers &lt;em&gt;your&lt;/em&gt; demographic uses.</source>
          <target state="translated">Обновление 2019 года: &lt;em&gt;все еще&lt;/em&gt; зависит от браузеров, которые &lt;em&gt;вы&lt;/em&gt; используете.</target>
        </trans-unit>
        <trans-unit id="2e56ec18d7e62ff92bcd4bd2b8d829a71cca462d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;//github.com/matiasgagliano/bifrost&quot;&gt;Bifr&amp;ouml;st&lt;/a&gt; is just a small wrapper that adds fallback support to jQuery's ajax method, but many of the aforementioned plugins like &lt;a href=&quot;//malsup.com/jquery/form/&quot;&gt;jQuery Form Plugin&lt;/a&gt; or &lt;a href=&quot;//github.com/blueimp/jQuery-File-Upload&quot;&gt;jQuery File Upload&lt;/a&gt; include the whole stack from HTML5 to different fallbacks and some useful features to ease out the process. Depending on your needs and requirements you might want to consider a bare implementation or either of this plugins.</source>
          <target state="translated">&lt;a href=&quot;//github.com/matiasgagliano/bifrost&quot;&gt;Bifr&amp;ouml;st&lt;/a&gt; - это всего лишь небольшая оболочка, которая добавляет поддержку отката в метод jjuery ajax, но многие из вышеупомянутых плагинов, такие как &lt;a href=&quot;//malsup.com/jquery/form/&quot;&gt;плагин jQuery Form&lt;/a&gt; или &lt;a href=&quot;//github.com/blueimp/jQuery-File-Upload&quot;&gt;jQuery File Upload,&lt;/a&gt; включают целый стек из HTML5 для различных откатов и некоторые полезные функции для облегчения процесса. В зависимости от ваших потребностей и требований вы можете рассмотреть пустую реализацию или один из этих плагинов.</target>
        </trans-unit>
        <trans-unit id="c4e04f28630d3612238d3f2f91c0924b1e021f0a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.williambharding.com/blog/rails/rails-ajax-image-uploading-made-simple-with-jquery/&quot;&gt;I've written this up in a Rails environment&lt;/a&gt;.  It's only about five lines of JavaScript, if you use the lightweight jQuery-form plugin.</source>
          <target state="translated">&lt;a href=&quot;http://www.williambharding.com/blog/rails/rails-ajax-image-uploading-made-simple-with-jquery/&quot;&gt;Я написал это в среде Rails&lt;/a&gt; . Это всего лишь пять строк JavaScript, если вы используете легкий плагин jQuery-form.</target>
        </trans-unit>
        <trans-unit id="a080e25de8093d3cadbce3a0b96ea7b03a96e991" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;-note- you only need to keep reading if you are interested in how to setup a UI blocker when doing uploading/downloading&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;-Примечание- вам нужно только продолжать чтение, если вы заинтересованы в том, как настроить блокировщик пользовательского интерфейса при загрузке / загрузке&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1fd35578d942edc9cb657126c44ba09a40438f67" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Access Across Domains&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Доступ через домены&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8a5cffabbdeeff043700b5dfeb1cb6b2216a4e97" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Advantage:&lt;/strong&gt; Fetch API is &lt;strong&gt;natively supported&lt;/strong&gt; by all modern browsers, so you don't have to import anything. Also, note that fetch() returns a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise&lt;/a&gt; which is then handled by using &lt;code&gt;.then(..code to handle response..)&lt;/code&gt; asynchronously.</source>
          <target state="translated">&lt;strong&gt;Преимущество:&lt;/strong&gt; Fetch API &lt;strong&gt;изначально поддерживается&lt;/strong&gt; всеми современными браузерами, поэтому вам не нужно ничего импортировать. Также обратите внимание, что fetch () возвращает &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise,&lt;/a&gt; который затем обрабатывается с использованием &lt;code&gt;.then(..code to handle response..)&lt;/code&gt; асинхронно.</target>
        </trans-unit>
        <trans-unit id="88869f5dcc5e648c77bb81bf1b6aa9e29fe1a968" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Chrome, iFrames, and onLoad&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Chrome, iFrames и onLoad&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="340f495f32cb36a45623f626af8a65af6739387a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Create an XMLHttpRequest Object&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Создать объект XMLHttpRequest&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fc93c4a4bc534bbd891d3cc25bc8f573f9a911c9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;File Upload ASP.NET Core MVC:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Загрузка файла ASP.NET Core MVC:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a40279dd4c1bd5f957300a46831c4dcf38bb63c4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;HTML part&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;HTML часть&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1ed559f58d1012098e76aa02f5987633940fcf2d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;HTML&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;HTML&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ff581c0a160c88e74d2a6f9860227f014946483f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Here's the EXAMPLE application&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Вот пример приложения&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="62badaaf4753ecb6b40f104d53c1d15b8e0102aa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;I hope it would be helpful&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Я надеюсь, что это будет полезно&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="50f60c68344fc3d3c15ad60b7566259c67185caf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JAVASCRIPT&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;JAVASCRIPT&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="34c4a0e1b97eacf196df7509404f04c72f7d500a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JS part&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;JS часть&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="79e70e3362d4cf26bc4e399f24131a18fcddb9a1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;PHP part&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;PHP часть&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c0ea0dc97baa1d4c675361104fa844e8cea6bf02" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;PHP&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;PHP&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7b4b994b4e199273b339fd6a6bbf81718148df85" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The XMLHttpRequest Object&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Объект XMLHttpRequest&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5217b738c3143d4d2b55934df2f4161c3aa15f61" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;step 1&lt;/strong&gt; In your project open Nuget manager and add package (jquery fileupload(only you need to write it in search box it will come up and install it.))
URL: &lt;a href=&quot;https://github.com/blueimp/jQuery-File-Upload&quot;&gt;https://github.com/blueimp/jQuery-File-Upload&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;Шаг 1&lt;/strong&gt; В вашем проекте откройте диспетчер Nuget и добавьте пакет (jquery fileupload (только вам нужно написать его в поле поиска, он появится и установить его). URL: &lt;a href=&quot;https://github.com/blueimp/jQuery-File-Upload&quot;&gt;https://github.com/blueimp/jQuery-File- Загрузить&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="abee2b907144afea1b70b16731b2b300ede57ac5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;step 2&lt;/strong&gt; Add below scripts in the HTML files, which are already added to the project by running above package:</source>
          <target state="translated">&lt;strong&gt;Шаг 2&lt;/strong&gt; Добавьте нижеприведенные скрипты в файлы HTML, которые уже добавлены в проект, запустив вышеуказанный пакет:</target>
        </trans-unit>
        <trans-unit id="1d5e08389ed908e9e6ca001e26548376cf8a13bf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;step 3&lt;/strong&gt;  Write file upload control as per below code:</source>
          <target state="translated">&lt;strong&gt;Шаг 3&lt;/strong&gt; Напишите элемент управления загрузкой файла, как показано ниже:</target>
        </trans-unit>
        <trans-unit id="b0684d91ae0c646a55715a9c025968c3974dff9d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;step 4&lt;/strong&gt;  write a js method as uploadFile as below:</source>
          <target state="translated">&lt;strong&gt;шаг 4,&lt;/strong&gt; напишите метод js как uploadFile, как показано ниже:</target>
        </trans-unit>
        <trans-unit id="ed5df500f19bb6a07ba65da44693d249ac76bf3b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;step 5&lt;/strong&gt; In ready function call element file upload to initiate the process as per below:</source>
          <target state="translated">&lt;strong&gt;шаг 5&lt;/strong&gt; В готовой загрузке файла элемента вызова функции для запуска процесса, как показано ниже:</target>
        </trans-unit>
        <trans-unit id="5c729b6d1ce5a11776346ee8a8764df6b0e0a9a7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;step 6&lt;/strong&gt; Write MVC controller and Action as per below:</source>
          <target state="translated">&lt;strong&gt;Шаг 6&lt;/strong&gt; Запишите контроллер MVC и Действие согласно ниже:</target>
        </trans-unit>
        <trans-unit id="d11d31fceb3683f3352ba6df7fb150d80d69fb47" translate="yes" xml:space="preserve">
          <source>A modern approach &lt;strong&gt;without Jquery&lt;/strong&gt; is to use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/FileList&quot;&gt;FileList&lt;/a&gt; object you get back from &lt;code&gt;&amp;lt;input type=&quot;file&quot;&amp;gt;&lt;/code&gt; when user selects a file(s) and then use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API&quot;&gt;Fetch&lt;/a&gt; to post the FileList wrapped around a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/FormData&quot;&gt;FormData&lt;/a&gt; object.</source>
          <target state="translated">Современный подход &lt;strong&gt;без Jquery&lt;/strong&gt; состоит в том, чтобы использовать объект &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/FileList&quot;&gt;FileList, который&lt;/a&gt; вы возвращаете из &lt;code&gt;&amp;lt;input type=&quot;file&quot;&amp;gt;&lt;/code&gt; , когда пользователь выбирает файл (-ы), а затем использовать &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API&quot;&gt;Fetch&lt;/a&gt; для публикации FileList, обернутого вокруг объекта &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/FormData&quot;&gt;FormData&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="327a8ba0ed4f81315cde0bbe0dbbe18c1a2aa517" translate="yes" xml:space="preserve">
          <source>A solution I found was to have the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; target a hidden iFrame. The iFrame can then run JS to display to the user that it's complete (on page load).</source>
          <target state="translated">Решение, которое я нашел, состояло в том, чтобы &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; была предназначена для скрытого iFrame. Затем iFrame может запустить JS, чтобы показать пользователю, что он завершен (при загрузке страницы).</target>
        </trans-unit>
        <trans-unit id="dd781a59c3d9928cba98ad84022ee83c741ed709" translate="yes" xml:space="preserve">
          <source>ASP.NET MVC based Multiple File Upload made in jQuery</source>
          <target state="translated">Загрузка нескольких файлов на основе ASP.NET MVC,выполненная в jQuery</target>
        </trans-unit>
        <trans-unit id="cb3aa313c45e4f71a2e7758387f9e0f9d050666c" translate="yes" xml:space="preserve">
          <source>ASP.NET Web Forms based Mulitple File Upload Feature with Progress Bar</source>
          <target state="translated">Функция загрузки мультиплексированных файлов на основе веб-форм ASP.NET с прогресс-баром</target>
        </trans-unit>
        <trans-unit id="7ccb7a6f21c909df5fd4cb541526dcb7a5dd8c9c" translate="yes" xml:space="preserve">
          <source>All modern browsers (Chrome, Firefox,
  IE7+, Edge, Safari, Opera) have a built-in XMLHttpRequest object.</source>
          <target state="translated">Все современные браузеры (Chrome,Firefox,IE7+,Edge,Safari,Opera)имеют встроенный объект XMLHttpRequest.</target>
        </trans-unit>
        <trans-unit id="bf11d2224fc3d745059588a934da0acf78c6b5c8" translate="yes" xml:space="preserve">
          <source>All modern browsers support the XMLHttpRequest object.
  The XMLHttpRequest object can be used to exchange data with a web
  server behind the scenes. This means that it is possible to update
  parts of a web page, without reloading the whole page.</source>
          <target state="translated">Все современные браузеры поддерживают объект XMLHttpRequest.Объект XMLHttpRequest может использоваться для обмена данными с веб-сервером за кулисами.Это означает,что можно обновлять части веб-страницы без перезагрузки всей страницы.</target>
        </trans-unit>
        <trans-unit id="76de35634500342f6ed12f15742181f57da106d9" translate="yes" xml:space="preserve">
          <source>Also some further information about XMLHttpReques:</source>
          <target state="translated">Также некоторая дополнительная информация о XMLHttpReques:</target>
        </trans-unit>
        <trans-unit id="9b3816471bd27fdea3c09c75c6166f5f418925a5" translate="yes" xml:space="preserve">
          <source>Also, Syncfusion JavaScript UI file upload provides solution for this scenario simply using event argument. you can find documentation &lt;a href=&quot;https://ej2.syncfusion.com/documentation/uploader/how-to/#add-additional-data-on-upload&quot;&gt;here&lt;/a&gt; and further details about this control here enter link description &lt;a href=&quot;https://www.syncfusion.com/javascript-ui-controls/file-upload&quot;&gt;here&lt;/a&gt;</source>
          <target state="translated">Кроме того, загрузка файла интерфейса пользователя Syncfusion JavaScript предоставляет решение для этого сценария, просто используя аргумент события. вы можете найти документацию &lt;a href=&quot;https://ej2.syncfusion.com/documentation/uploader/how-to/#add-additional-data-on-upload&quot;&gt;здесь&lt;/a&gt; и более подробную информацию об этом элементе управления здесь, введите описание ссылки &lt;a href=&quot;https://www.syncfusion.com/javascript-ui-controls/file-upload&quot;&gt;здесь&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="12c1e87c3ffe1cf00af7e0ab5667d19d6130afb5" translate="yes" xml:space="preserve">
          <source>An important thing to understand with the &quot;new&quot; HTML5 &lt;code&gt;file&lt;/code&gt; API is that it &lt;a href=&quot;http://caniuse.com/fileapi&quot;&gt;wasn't supported until IE&amp;nbsp;10&lt;/a&gt;. If the specific market you're aiming at has a higher-than-average propensity toward older versions of Windows, you might not have access to it.</source>
          <target state="translated">С &amp;laquo;новым&amp;raquo; &lt;code&gt;file&lt;/code&gt; API-интерфейсом HTML5 важно понимать, что он &lt;a href=&quot;http://caniuse.com/fileapi&quot;&gt;не поддерживается до IE 10&lt;/a&gt; . Если конкретный рынок, на который вы ориентируетесь, имеет склонность выше средних к старым версиям Windows, у вас может не быть к нему доступа.</target>
        </trans-unit>
        <trans-unit id="0939693418a22cd5f714580377676338d7c4adcc" translate="yes" xml:space="preserve">
          <source>And here&amp;rsquo;s the Rails controller action, pretty vanilla:</source>
          <target state="translated">А вот действие контроллера Rails, довольно ванильное:</target>
        </trans-unit>
        <trans-unit id="bf20a417b00c7fcdca6922207cf8a95a9d2c7131" translate="yes" xml:space="preserve">
          <source>And on the server side, just before transferring the file data, create the cookie</source>
          <target state="translated">А на стороне сервера,как раз перед передачей файловых данных,создайте куки-файл.</target>
        </trans-unit>
        <trans-unit id="6e3f19defed4ed1a717794d55274f1f5c7fb2f8a" translate="yes" xml:space="preserve">
          <source>As of 2017, about 5% of browsers are one of IE 6, 7, 8 or 9. If you head into a big corporation (e.g., this is a B2B tool, or something you're delivering for training) that number can skyrocket. In 2016, I dealt with a company using IE8 on over 60% of their machines.</source>
          <target state="translated">По состоянию на 2017 год,около 5% браузеров являются одними из IE 6,7,8 или 9.Если вы направитесь в большую корпорацию (например,это B2B инструмент,или что-то,что вы поставляете для обучения),это число может взлететь до небес.В 2016 году я имел дело с компанией,использующей IE8 на более чем 60% своих машин.</target>
        </trans-unit>
        <trans-unit id="e58fbf58b4e2636023e44cabd72f9afa7b552d3a" translate="yes" xml:space="preserve">
          <source>As you can see, with HTML5 (and some research) file uploading not only becomes possible but super easy. Try it with &lt;a href=&quot;http://en.wikipedia.org/wiki/Google_Chrome&quot;&gt;Google Chrome&lt;/a&gt; as some of the HTML5 components of the examples aren't available in every browser.</source>
          <target state="translated">Как вы можете видеть, с HTML5 (и некоторыми исследованиями) загрузка файлов не только становится возможной, но и очень простой. Попробуйте это с &lt;a href=&quot;http://en.wikipedia.org/wiki/Google_Chrome&quot;&gt;Google Chrome, так&lt;/a&gt; как некоторые компоненты примеров HTML5 доступны не во всех браузерах.</target>
        </trans-unit>
        <trans-unit id="739b02e8340806bd763467024fad5fc825ffbdbd" translate="yes" xml:space="preserve">
          <source>Asynchronous File Upload</source>
          <target state="translated">Асинхронная загрузка файлов</target>
        </trans-unit>
        <trans-unit id="f08ffb71aa4169fe87dcfe83fa18741fac6956d9" translate="yes" xml:space="preserve">
          <source>At the PHP level this will work as normal file upload. extra-data can be retrieved as &lt;code&gt;$_POST&lt;/code&gt; data.</source>
          <target state="translated">На уровне PHP это будет работать как обычная загрузка файлов. дополнительные данные могут быть получены как данные &lt;code&gt;$_POST&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e1fbeca40d7191954f4c8223d677668706fd65b2" translate="yes" xml:space="preserve">
          <source>Best part is you can send extra data such as ids &amp;amp; etc with the file when you use this script. I have mention it &lt;code&gt;extra-data&lt;/code&gt; as in the script.</source>
          <target state="translated">Самое приятное, что при использовании этого сценария вы можете отправить дополнительные данные, такие как идентификаторы и т. Д. Вместе с файлом. Я упомянул это &lt;code&gt;extra-data&lt;/code&gt; как в сценарии.</target>
        </trans-unit>
        <trans-unit id="194e13da720a1f025685e5d677eba8a1aff3860a" translate="yes" xml:space="preserve">
          <source>CSS</source>
          <target state="translated">CSS</target>
        </trans-unit>
        <trans-unit id="a36a5ffa6e0dcfb64fac1b2b3d6fb176de9689de" translate="yes" xml:space="preserve">
          <source>Controller</source>
          <target state="translated">Controller</target>
        </trans-unit>
        <trans-unit id="f62f45b8d2d944a83b198140ebaa928cce8a9cdb" translate="yes" xml:space="preserve">
          <source>Convert file to base64 using |HTML5's &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/FileReader#readAsDataURL%28%29&quot;&gt;readAsDataURL()&lt;/a&gt; or &lt;a href=&quot;http://scotch.io/quick-tips/js/how-to-encode-and-decode-strings-with-base64-in-javascript&quot;&gt;some base64 encoder&lt;/a&gt;. 
&lt;a href=&quot;http://jsfiddle.net/eliseosoto/JHQnk/&quot;&gt;Fiddle here&lt;/a&gt;</source>
          <target state="translated">Конвертируйте файл в base64, используя &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/FileReader#readAsDataURL%28%29&quot;&gt;readAsDataURL ()&lt;/a&gt; HTML5 или &lt;a href=&quot;http://scotch.io/quick-tips/js/how-to-encode-and-decode-strings-with-base64-in-javascript&quot;&gt;какой-нибудь кодировщик base64&lt;/a&gt; . &lt;a href=&quot;http://jsfiddle.net/eliseosoto/JHQnk/&quot;&gt;Скрипка здесь&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ad3031a58e14e8ab3356947a4d923efc5af9719e" translate="yes" xml:space="preserve">
          <source>Cross-browser -- works in IE7+, Firefox, Chrome, Safari, Opera</source>
          <target state="translated">Кросс-браузер --работает в IE7+,Firefox,Chrome,Safari,Opera.</target>
        </trans-unit>
        <trans-unit id="de6a2ac98a906778381a246e83009244d3e7bcb4" translate="yes" xml:space="preserve">
          <source>Currently Chrome doesn't trigger the onLoad event for the iframe when it's used to transfer files.  Firefox, IE, and Edge all fire the onload event for file transfers.</source>
          <target state="translated">В настоящее время Chrome не запускает событие onLoad для iframe,когда он используется для передачи файлов.Firefox,IE и Edge все запускают событие onLoad для передачи файлов.</target>
        </trans-unit>
        <trans-unit id="e52c854d5631eec7468ba4727b4c77eb745f2965" translate="yes" xml:space="preserve">
          <source>Demo</source>
          <target state="translated">Demo</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="5ab7721397827b925456d2a147cb5704105a62a7" translate="yes" xml:space="preserve">
          <source>Example usage:</source>
          <target state="translated">Пример использования:</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">Расширить фрагмент</target>
        </trans-unit>
        <trans-unit id="b32ef340ea4702fd5f41dbe4001671d76174ef71" translate="yes" xml:space="preserve">
          <source>Explanation</source>
          <target state="translated">Explanation</target>
        </trans-unit>
        <trans-unit id="b4a100ebc4c1820c605bd96d9dd279ff888640e2" translate="yes" xml:space="preserve">
          <source>Fallback</source>
          <target state="translated">Fallback</target>
        </trans-unit>
        <trans-unit id="2881c4db66bb51a107b08ba43533875b85f0f559" translate="yes" xml:space="preserve">
          <source>First, you can do some validation if you want. For example, in the &lt;code&gt;.on('change')&lt;/code&gt; event of the file:</source>
          <target state="translated">Во-первых, вы можете сделать некоторую проверку, если хотите. Например, в &lt;code&gt;.on('change')&lt;/code&gt; файла:</target>
        </trans-unit>
        <trans-unit id="d6c51e6336a45599aef34db8592c306091a1b29d" translate="yes" xml:space="preserve">
          <source>Flexible and highly customizable -- use any element as upload button, style your own progress indicators</source>
          <target state="translated">Гибкость и высокая настраиваемость-используйте любой элемент в качестве кнопки загрузки,стилизируйте свои собственные индикаторы прогресса.</target>
        </trans-unit>
        <trans-unit id="d418547c9d63224a7bbdce6df08c5ef4f28aba0a" translate="yes" xml:space="preserve">
          <source>For PHP, look for &lt;a href=&quot;https://developer.hyvor.com/php/image-upload-ajax-php-mysql&quot;&gt;https://developer.hyvor.com/php/image-upload-ajax-php-mysql&lt;/a&gt;</source>
          <target state="translated">Для PHP, посмотрите &lt;a href=&quot;https://developer.hyvor.com/php/image-upload-ajax-php-mysql&quot;&gt;https://developer.hyvor.com/php/image-upload-ajax-php-mysql&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="08ce5feea4874259e52cc43066f0431477b1c4e9" translate="yes" xml:space="preserve">
          <source>For a quick, pure JavaScript (&lt;strong&gt;no jQuery&lt;/strong&gt;) example see &quot;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/Using_FormData_Objects#Sending_files_using_a_FormData_object&quot;&gt;Sending files using a FormData object&lt;/a&gt;&quot;.</source>
          <target state="translated">Быстрый, чистый пример JavaScript ( &lt;strong&gt;без jQuery&lt;/strong&gt; ) см. В разделе &amp;laquo; &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/Using_FormData_Objects#Sending_files_using_a_FormData_object&quot;&gt;Отправка файлов с использованием объекта FormData&lt;/a&gt; &amp;raquo;.</target>
        </trans-unit>
        <trans-unit id="7afe5a982d1f2e8750c9e989e3d699a14855d178" translate="yes" xml:space="preserve">
          <source>For more details, you can continue reading &lt;a href=&quot;https://www.w3schools.com/js/js_ajax_http.asp&quot;&gt;here&lt;/a&gt;...</source>
          <target state="translated">Для более подробной информации, вы можете продолжить чтение &lt;a href=&quot;https://www.w3schools.com/js/js_ajax_http.asp&quot;&gt;здесь&lt;/a&gt; ...</target>
        </trans-unit>
        <trans-unit id="8af703a066b3eb71965852b4f11718bc51cf19b1" translate="yes" xml:space="preserve">
          <source>For security reasons, modern browsers do not
  allow access across domains.</source>
          <target state="translated">По соображениям безопасности современные браузеры не разрешают доступ между доменами.</target>
        </trans-unit>
        <trans-unit id="9f738ce8457f291b18ee47e665e96baa84f38fcd" translate="yes" xml:space="preserve">
          <source>HTML</source>
          <target state="translated">HTML</target>
        </trans-unit>
        <trans-unit id="11dc542c0ffeed8b41bad901e2044f438e4ab0e5" translate="yes" xml:space="preserve">
          <source>HTML:</source>
          <target state="translated">HTML:</target>
        </trans-unit>
        <trans-unit id="8bf644df1d676a0a3e4b69aa8aee04684f2de2e8" translate="yes" xml:space="preserve">
          <source>Here you are not using a plugin and stuff. You can change the code as you want. You are not blindly coding here. This is the core functionality of any jQuery file upload. Actually Javascript.</source>
          <target state="translated">Здесь ты не пользуешься плагином и прочим.Вы можете менять код,как хотите.Ты не слепо кодируешь здесь.Это основная функциональность любой загрузки jQuery файла.На самом деле Javascript.</target>
        </trans-unit>
        <trans-unit id="caf4b1cff302e045b3730574f02d74a6ef516095" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s the Rails code for it:</source>
          <target state="translated">Вот код Rails для этого:</target>
        </trans-unit>
        <trans-unit id="3fc79829ba27d8c1c75995914c2cc497af893f75" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s the associated JavaScript:</source>
          <target state="translated">Вот связанный JavaScript:</target>
        </trans-unit>
        <trans-unit id="da114669a0537123c37e953285babee52306e476" translate="yes" xml:space="preserve">
          <source>Here's just another solution of how to upload file (&lt;strong&gt;without any plugin&lt;/strong&gt;)</source>
          <target state="translated">Вот еще одно решение о том, как загрузить файл ( &lt;strong&gt;без какого-либо плагина&lt;/strong&gt; )</target>
        </trans-unit>
        <trans-unit id="5990cd6351c2fe56d35d2afe5c25f991789b7174" translate="yes" xml:space="preserve">
          <source>How can I upload files asynchronously</source>
          <target state="translated">Как я могу загружать файлы асинхронно.</target>
        </trans-unit>
        <trans-unit id="3c02ab2bda440d908a78f019a28279c099ab766a" translate="yes" xml:space="preserve">
          <source>However, there are viable non-JS methods of file uploads. You can create an iframe on the page (that you hide with CSS) and then target your form to post to that iframe. The main page doesn't need to move.</source>
          <target state="translated">Тем не менее,существуют приемлемые не JS-методы загрузки файлов.Вы можете создать на странице iframe (который вы скрываете с помощью CSS)и затем направить вашу форму на этот iframe.Главная страница не нуждается в перемещении.</target>
        </trans-unit>
        <trans-unit id="c176b5b32b0fffa253d395e9965f972693e29a3c" translate="yes" xml:space="preserve">
          <source>I have been using the below script to upload images which happens to work fine.</source>
          <target state="translated">Я использовал приведенный ниже скрипт,чтобы загрузить изображения,которые,как оказалось,работают нормально.</target>
        </trans-unit>
        <trans-unit id="450c5d9b7c8c7dcc267fa47c87251658a6774ca3" translate="yes" xml:space="preserve">
          <source>I have done a lot of searching and I have come to another solution for uploading files without any plugin and only with ajax. The solution is as below:</source>
          <target state="translated">Я сделал много поиска и пришел к другому решению для загрузки файлов без плагина и только с помощью ajax.Решение представлено ниже:</target>
        </trans-unit>
        <trans-unit id="ed3f24638549f840c22003b42a5de19f6e915d95" translate="yes" xml:space="preserve">
          <source>I made a jQuery plugin to handle this issue for Chrome when downloading, you can find here</source>
          <target state="translated">Я сделал плагин jQuery,чтобы справиться с этой проблемой для Chrome при загрузке,вы можете найти здесь</target>
        </trans-unit>
        <trans-unit id="62faeec7e8dee8ece0a999faa924f5cb9f444db9" translate="yes" xml:space="preserve">
          <source>I recommend using the &lt;a href=&quot;http://fineuploader.com/demos.html&quot;&gt;Fine Uploader&lt;/a&gt; plugin for this purpose. Your &lt;code&gt;JavaScript&lt;/code&gt; code would be:</source>
          <target state="translated">Я рекомендую использовать плагин &lt;a href=&quot;http://fineuploader.com/demos.html&quot;&gt;Fine Uploader&lt;/a&gt; для этой цели. Ваш код &lt;code&gt;JavaScript&lt;/code&gt; будет:</target>
        </trans-unit>
        <trans-unit id="d4131cec799b334c694e0f46269e18cafcc1caec" translate="yes" xml:space="preserve">
          <source>I use response &lt;code&gt;div&lt;/code&gt; to show the uploading animation and response after upload is done.</source>
          <target state="translated">Я использую response &lt;code&gt;div&lt;/code&gt; , чтобы показать анимацию загрузки и ответ после загрузки.</target>
        </trans-unit>
        <trans-unit id="25f31ab2de4c8c97a9dad9b491627c09fc9760ab" translate="yes" xml:space="preserve">
          <source>I would like to upload a file asynchronously with jQuery.</source>
          <target state="translated">Я хотел бы загрузить файл асинхронно с jQuery.</target>
        </trans-unit>
        <trans-unit id="b2cc78d3bc8c28e369a8c37bbc9545d02130f7c7" translate="yes" xml:space="preserve">
          <source>I&amp;rsquo;ve been using this for the past few weeks with Bloggity, and it&amp;rsquo;s worked like a champ.</source>
          <target state="translated">Я использовал это в течение последних нескольких недель с Bloggity, и это работало как чемпион.</target>
        </trans-unit>
        <trans-unit id="fae42fcde1c6ffa628f482196b3f69eddfcbccfd" translate="yes" xml:space="preserve">
          <source>If done properly it should work virtually on any browser, but it has some caveats as how to obtain the response from the iframe.</source>
          <target state="translated">Если все сделано правильно,то он должен работать практически в любом браузере,но у него есть некоторые предостережения,как получить ответ от iframe.</target>
        </trans-unit>
        <trans-unit id="ac9e395b92ca11305f6f6debfc730c8764e71d2a" translate="yes" xml:space="preserve">
          <source>If you need multiple file-uploads, it's best to do each file one at a time (to overcome maximum file upload limits). Post the first form to the iframe, monitor its progress using the above and when it has finished, post the second form to the iframe, and so on.</source>
          <target state="translated">Если вам нужно загрузить несколько файлов,лучше всего делать каждый файл по одному (чтобы преодолеть максимальные ограничения на загрузку файлов).Отправьте первую форму в ифрейм,следите за ее прогрессом,используя вышеуказанную форму,и когда она будет завершена,отправьте вторую форму в ифрейм,и так далее.</target>
        </trans-unit>
        <trans-unit id="6f181e65d320f5e01038c0018f20b3edcefd18d8" translate="yes" xml:space="preserve">
          <source>If you want to use the example above on one of your own web pages, the
  XML files you load must be located on your own server.</source>
          <target state="translated">Если вы хотите использовать вышеприведенный пример на одной из ваших собственных веб-страниц,загружаемые вами XML-файлы должны быть расположены на вашем собственном сервере.</target>
        </trans-unit>
        <trans-unit id="14fe30068ecbbb53cbd6ebdc9d97a7edb54e9a05" translate="yes" xml:space="preserve">
          <source>In the View create file upload control in html:</source>
          <target state="translated">В окне Вид создать управление загрузкой файлов в html:</target>
        </trans-unit>
        <trans-unit id="74d4ecf22707e7df0a7043488d65926f4bc9fc6a" translate="yes" xml:space="preserve">
          <source>In this case you may prefer to use a wrapper plugin like &lt;a href=&quot;//github.com/matiasgagliano/bifrost&quot;&gt;Bifr&amp;ouml;st&lt;/a&gt; which uses the &lt;em&gt;iframe technique&lt;/em&gt; but also provides a &lt;a href=&quot;//api.jquery.com/jQuery.ajaxTransport&quot;&gt;jQuery Ajax transport&lt;/a&gt; allowing to &lt;strong&gt;send files&lt;/strong&gt; with just the &lt;code&gt;$.ajax()&lt;/code&gt; method like this:</source>
          <target state="translated">В этом случае вы можете предпочесть использовать плагин-оболочку, такой как &lt;a href=&quot;//github.com/matiasgagliano/bifrost&quot;&gt;Bifr&amp;ouml;st,&lt;/a&gt; который использует &lt;em&gt;технику iframe,&lt;/em&gt; но также предоставляет &lt;a href=&quot;//api.jquery.com/jQuery.ajaxTransport&quot;&gt;транспорт jQuery Ajax,&lt;/a&gt; позволяющий &lt;strong&gt;отправлять файлы&lt;/strong&gt; только &lt;code&gt;$.ajax()&lt;/code&gt; например так:</target>
        </trans-unit>
        <trans-unit id="71f2e90f8cac48a34fc1ecffd12ffbcc3f278134" translate="yes" xml:space="preserve">
          <source>Instead of the file being uploaded, I am only getting the filename. What can I do to fix this problem?</source>
          <target state="translated">Вместо загружаемого файла я получаю только имя файла.Что я могу сделать,чтобы решить эту проблему?</target>
        </trans-unit>
        <trans-unit id="a2b34c8ecd529ea93b439ef738316f51623ec501" translate="yes" xml:space="preserve">
          <source>It consists of setting an iframe as the target of the form with the file inputs. When the user submits a request is made and the files are uploaded but the response is displayed inside the iframe instead of re-rendering the main page. Hiding the iframe makes the whole process transparent to the user and emulates an asynchronous request.</source>
          <target state="translated">Она состоит в установке ифрейма в качестве мишени формы с файловыми входами.Когда пользователь отправляет запрос и файлы загружаются,но ответ отображается внутри ифрейма,а не на главной странице.Скрытие iframe делает весь процесс прозрачным для пользователя и эмулирует асинхронный запрос.</target>
        </trans-unit>
        <trans-unit id="fc7666c5b1ddcaf2b2495cb20e836556519a1a25" translate="yes" xml:space="preserve">
          <source>It does file uploading without navigating away from the page and offers a few bonuses like drag &amp;amp; drop, resuming uploads in case of browser crashes/flaky networks, and importing from e.g. Instagram.
It's open source and does not rely on jQuery/React/Angular/Vue, but can be used with it. Disclaimer: as its creator I'm biased ;)</source>
          <target state="translated">Он осуществляет загрузку файлов без перехода со страницы и предлагает несколько бонусов, таких как перетаскивание, возобновление загрузки в случае сбоя браузера / нестабильных сетей и импорт, например, из Instagram. Это открытый исходный код и не зависит от jQuery / React / Angular / Vue, но может использоваться с ним. Отказ от ответственности: как его создатель я предвзято;)</target>
        </trans-unit>
        <trans-unit id="b07b361a2afac417b4c562ce3767dd9a9bf65e28" translate="yes" xml:space="preserve">
          <source>It does not depend on specific HTML, just give it a &lt;code&gt;&amp;lt;input type=&quot;file&quot;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">Он не зависит от конкретного HTML, просто дайте ему &lt;code&gt;&amp;lt;input type=&quot;file&quot;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5214822f121f4614360130ec5d7c91654b2c7d27" translate="yes" xml:space="preserve">
          <source>It does not matter how many files you use, or where they are on the page</source>
          <target state="translated">Не имеет значения,сколько файлов вы используете,и где они находятся на странице.</target>
        </trans-unit>
        <trans-unit id="ac4827b61d1fae86fb89b0c53151a10e0cdc9f6a" translate="yes" xml:space="preserve">
          <source>It does not require your server to respond in any particular way</source>
          <target state="translated">Он не требует,чтобы ваш сервер отвечал каким-либо определенным образом.</target>
        </trans-unit>
        <trans-unit id="8e9eb53d562cbb50167ee9e0d62459e188ae3600" translate="yes" xml:space="preserve">
          <source>It's 2019 as of this edit, almost 11 years after my initial answer. IE9 and lower are &lt;em&gt;globally&lt;/em&gt; around the 1% mark but there are still clusters  of higher usage.</source>
          <target state="translated">Сейчас 2019 год, почти 11 лет после моего первоначального ответа. IE9 и ниже находятся на &lt;em&gt;глобальном уровне&lt;/em&gt; около отметки 1%, но все еще есть кластеры более высокого использования.</target>
        </trans-unit>
        <trans-unit id="3693257f0f11b5dc67397868daf7f6aa335eafcc" translate="yes" xml:space="preserve">
          <source>It's a &quot;real&quot; post so it's not wholly interactive. If you need status you need something server-side to process that. This varies massively depending on your server. &lt;a href=&quot;http://en.wikipedia.org/wiki/ASP.NET&quot;&gt;ASP.NET&lt;/a&gt; has nicer mechanisms. PHP plain fails, but you can use &lt;a href=&quot;http://en.wikipedia.org/wiki/Perl&quot;&gt;Perl&lt;/a&gt; or Apache modifications to get around it.</source>
          <target state="translated">Это &amp;laquo;настоящий&amp;raquo; пост, поэтому он не совсем интерактивный. Если вам нужен статус, вам нужно что-то на стороне сервера для обработки этого. Это сильно зависит от вашего сервера. &lt;a href=&quot;http://en.wikipedia.org/wiki/ASP.NET&quot;&gt;ASP.NET&lt;/a&gt; имеет более приятные механизмы. PHP не работает, но вы можете использовать модификации &lt;a href=&quot;http://en.wikipedia.org/wiki/Perl&quot;&gt;Perl&lt;/a&gt; или Apache, чтобы обойти это.</target>
        </trans-unit>
        <trans-unit id="ee620923ff5fc510555dc37083a135ee93b5404b" translate="yes" xml:space="preserve">
          <source>JavaScript</source>
          <target state="translated">JavaScript</target>
        </trans-unit>
        <trans-unit id="e9ce9e5bca25bed2e1d65ad277a45c51f6436d5e" translate="yes" xml:space="preserve">
          <source>Javascript:</source>
          <target state="translated">Javascript:</target>
        </trans-unit>
        <trans-unit id="fabc997f26bb34ab27fb85cede45244f0e00756c" translate="yes" xml:space="preserve">
          <source>Look for &lt;em&gt;Handling the upload process for a file, asynchronously&lt;/em&gt; in here:
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Using_files_from_web_applications&quot;&gt;https://developer.mozilla.org/en-US/docs/Using_files_from_web_applications&lt;/a&gt;</source>
          <target state="translated">Посмотрите, &lt;em&gt;как обрабатывать процесс загрузки файла, асинхронно&lt;/em&gt; здесь: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Using_files_from_web_applications&quot;&gt;https://developer.mozilla.org/en-US/docs/Using_files_from_web_applications&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fc83d2854c412dfba1c7a58c1a436eb82eeace0a" translate="yes" xml:space="preserve">
          <source>MIT license -- free to use in commercial project</source>
          <target state="translated">Лицензия MIT --свободна для использования в коммерческом проекте.</target>
        </trans-unit>
        <trans-unit id="4811b0a73bc69b5d9bc9915eb426b548fd412558" translate="yes" xml:space="preserve">
          <source>My answer from 2008 follows.</source>
          <target state="translated">Мой ответ с 2008 года следующий.</target>
        </trans-unit>
        <trans-unit id="263f343463a2ad34105afd3aaf81794ae30cc032" translate="yes" xml:space="preserve">
          <source>No flash or external CSS -- just one 5Kb Javascript file</source>
          <target state="translated">Никакой флэш или внешней CSS --только один 5Kb Javascript файл.</target>
        </trans-unit>
        <trans-unit id="a6f0475a67750e40f11833df2968aaaa14e00c5a" translate="yes" xml:space="preserve">
          <source>No forms required, just provide an element that will serve as upload button</source>
          <target state="translated">Никаких форм не требуется,просто предоставьте элемент,который будет служить в качестве кнопки загрузки.</target>
        </trans-unit>
        <trans-unit id="017b350f6d0aa9b4c2001b6238c78c88c5caee16" translate="yes" xml:space="preserve">
          <source>Note: This answer is outdated, it is now possible to upload files using XHR.</source>
          <target state="translated">Замечание:Этот ответ устарел,теперь можно загружать файлы с помощью XHR.</target>
        </trans-unit>
        <trans-unit id="22e5e2f293b33c3c42e7c2fdbaabd1bc2eb07a79" translate="yes" xml:space="preserve">
          <source>Now create action method in your controller:</source>
          <target state="translated">Теперь создайте метод действия в контроллере:</target>
        </trans-unit>
        <trans-unit id="521344f2ab4397105ce0ad0abbf28260488378ea" translate="yes" xml:space="preserve">
          <source>Now the &lt;code&gt;$.ajax()&lt;/code&gt; submit with the button's click:</source>
          <target state="translated">Теперь &lt;code&gt;$.ajax()&lt;/code&gt; отправляется нажатием кнопки:</target>
        </trans-unit>
        <trans-unit id="8a7b05d8fe86621706c0e9d929d76eb67f588358" translate="yes" xml:space="preserve">
          <source>Optional, built-in support for fully cross-browser progress bars (using PHP's APC extension)</source>
          <target state="translated">Опционально,встроенная поддержка полностью кросс-браузерных индикаторов прогресса (с использованием расширения PHP APC).</target>
        </trans-unit>
        <trans-unit id="eec22d0597e79c57029dbf0e40cac08a34fe9f8d" translate="yes" xml:space="preserve">
          <source>Or use a Java/Flash solution. They're a lot more flexible in what they can do with their posts...</source>
          <target state="translated">Или используйте решение JavaFlash.Они гораздо более гибки в том,что они могут делать со своими постами...</target>
        </trans-unit>
        <trans-unit id="ab2e26dd8b8868a3969cb3321e0c983c0d9d67d4" translate="yes" xml:space="preserve">
          <source>Plugins</source>
          <target state="translated">Plugins</target>
        </trans-unit>
        <trans-unit id="809b23f2cc0d5742ade51cff49b3030c9cad052d" translate="yes" xml:space="preserve">
          <source>Sample from the link</source>
          <target state="translated">Образец по ссылке</target>
        </trans-unit>
        <trans-unit id="bb050ee73b97973e82f48d001e0f99d9eb46e0a6" translate="yes" xml:space="preserve">
          <source>Sample: If you use jQuery, you can do easy to an upload file. This is a small and strong jQuery plugin, &lt;a href=&quot;http://jquery.malsup.com/form/&quot;&gt;http://jquery.malsup.com/form/&lt;/a&gt;.</source>
          <target state="translated">Пример: если вы используете jQuery, вы можете легко загрузить файл. Это небольшой и сильный плагин jQuery, &lt;a href=&quot;http://jquery.malsup.com/form/&quot;&gt;http://jquery.malsup.com/form/&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="be7779a7a4baa3021e7af15e69c50f6dc680085d" translate="yes" xml:space="preserve">
          <source>Simple Ajax Uploader is another option:</source>
          <target state="translated">Простой загрузчик Аякса-еще один вариант:</target>
        </trans-unit>
        <trans-unit id="919d3c5f734aa4adc982838364ec08831e2fee5f" translate="yes" xml:space="preserve">
          <source>Supports multiple, concurrent uploads -- even in non-HTML5 browsers</source>
          <target state="translated">Поддерживает несколько одновременных загрузок --даже в браузерах,не использующих HTML5.</target>
        </trans-unit>
        <trans-unit id="12b45d20e27141bcc96bbba17495a24d835f9ab4" translate="yes" xml:space="preserve">
          <source>Syntax for creating an XMLHttpRequest object:</source>
          <target state="translated">Синтаксис для создания объекта XMLHttpRequest:</target>
        </trans-unit>
        <trans-unit id="3412a9c6235ff5b37ad48cb45f00cdc34d3ee732" translate="yes" xml:space="preserve">
          <source>That is if you don't want to use a plugin, JavaScript or any other forms of &quot;magic&quot; other than HTML.  Of course you can combine this with JavaScript or what have you...</source>
          <target state="translated">То есть,если вы не хотите использовать плагин,JavaScript или любые другие формы &quot;магии&quot;,кроме HTML.Конечно,вы можете комбинировать это с JavaScript или с тем,что у вас есть...</target>
        </trans-unit>
        <trans-unit id="4230320763beb5352ba3a4092a6778c357563688" translate="yes" xml:space="preserve">
          <source>That's where the jQuery-form plugin comes into play.</source>
          <target state="translated">Вот где вступает в игру плагин в форме jQuery.</target>
        </trans-unit>
        <trans-unit id="6eae58e88c8d2921c3b26025cdc6b58ddb238109" translate="yes" xml:space="preserve">
          <source>The HTML:</source>
          <target state="translated">HTML:</target>
        </trans-unit>
        <trans-unit id="390638562e82dba24d94b5de3f5c0308c84c1a74" translate="yes" xml:space="preserve">
          <source>The challenge is in getting AJAX upload working as the standard &lt;code&gt;remote_form_for&lt;/code&gt; doesn't understand multi-part form submission. It's not going to send the file data Rails seeks back with the AJAX request.</source>
          <target state="translated">Задача состоит в том, чтобы заставить загрузку AJAX работать, так как стандартная форма &lt;code&gt;remote_form_for&lt;/code&gt; не понимает отправку форм из нескольких частей. Он не собирается отправлять данные файла, которые Rails ищет обратно с помощью запроса AJAX.</target>
        </trans-unit>
        <trans-unit id="49b114f26640a12f59f60f3e14211093199ff7a0" translate="yes" xml:space="preserve">
          <source>The data being submitted is a formdata. On your jQuery, use a form submit function instead of a button click to submit the form file as shown below.</source>
          <target state="translated">Представляемые данные представляют собой формуляры.В вашем jQuery используйте функцию отправки формы вместо нажатия кнопки для отправки файла формы,как показано ниже.</target>
        </trans-unit>
        <trans-unit id="d8cd78f2a0041bf4679790dab499d0a49ef37189" translate="yes" xml:space="preserve">
          <source>The examples on W3Schools all open XML files located on the W3Schools
  domain.</source>
          <target state="translated">Примеры на W3Schools все открытые XML файлы,расположенные в домене W3Schools.</target>
        </trans-unit>
        <trans-unit id="e7f43609a80f2f2b73d736b04a118418a0bd20fb" translate="yes" xml:space="preserve">
          <source>The important take-away from this &amp;mdash;whatever the feature&amp;mdash; is, &lt;strong&gt;check what browser &lt;em&gt;your&lt;/em&gt; users use&lt;/strong&gt;. If you don't, you'll learn a quick and painful lesson in why &quot;works for me&quot; isn't good enough in a deliverable to a client. &lt;a href=&quot;https://caniuse.com/&quot;&gt;caniuse&lt;/a&gt; is a useful tool but note where they get their demographics from. They may not align with yours. This is never truer than enterprise environments.</source>
          <target state="translated">Важным выводом из этого - какой бы ни была функция - является &lt;strong&gt;проверка того&lt;/strong&gt; , &lt;strong&gt;какой браузер используют &lt;em&gt;ваши&lt;/em&gt; пользователи&lt;/strong&gt; . Если вы этого не сделаете, вы извлечете быстрый и мучительный урок о том, почему &amp;laquo;работает на меня&amp;raquo; недостаточно хорошо в доставке клиенту. &lt;a href=&quot;https://caniuse.com/&quot;&gt;caniuse&lt;/a&gt; - полезный инструмент, но обратите внимание, откуда они берут свою демографию. Они могут не совпадать с вашими. Это никогда не является правдой, чем корпоративная среда.</target>
        </trans-unit>
        <trans-unit id="a125f59057273a8af67729f1f45a25b2762c1dc4" translate="yes" xml:space="preserve">
          <source>The only solution that I found works for Chrome was to use a cookie.</source>
          <target state="translated">Единственным решением,которое я нашел для Chrome,было использование cookie.</target>
        </trans-unit>
        <trans-unit id="5812fbdfc0bc3b9c120d769fa65d55c658f0660c" translate="yes" xml:space="preserve">
          <source>The plugin will see the cookie, and then trigger the &lt;code&gt;onComplete&lt;/code&gt; callback.</source>
          <target state="translated">Плагин увидит cookie, а затем активирует обратный вызов &lt;code&gt;onComplete&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="98e8c7e0d95591c874a7b0b8bd5207b67ce58ed0" translate="yes" xml:space="preserve">
          <source>The same basic principal applies to uploading, as well.</source>
          <target state="translated">Тот же самый основной принцип применяется и к загрузке.</target>
        </trans-unit>
        <trans-unit id="b6fbb25c068582f33f40efe3e9f35544937e8142" translate="yes" xml:space="preserve">
          <source>The server side language is C# but you can do some modification for making it work with other language like PHP.</source>
          <target state="translated">Язык на стороне сервера-C#,но вы можете сделать некоторые изменения,чтобы заставить его работать с другим языком,таким как PHP.</target>
        </trans-unit>
        <trans-unit id="0cdcd101c4de354f1f65a932ad520fdd765bde2f" translate="yes" xml:space="preserve">
          <source>The simplest and most robust way I have done this in the past, is to simply target a hidden iFrame tag with your form - then it will submit within the iframe without reloading the page.</source>
          <target state="translated">Самый простой и надежный способ,которым я делал это в прошлом,это просто нацелить скрытый тэг iFrame на вашу форму-тогда он будет отправлен внутри iframe без перезагрузки страницы.</target>
        </trans-unit>
        <trans-unit id="1c7fc2372a83049e8d4d379a6511258fca4454c5" translate="yes" xml:space="preserve">
          <source>Then to retrieve:</source>
          <target state="translated">Затем,чтобы извлечь:</target>
        </trans-unit>
        <trans-unit id="65d3b355e07f3eb773497ea1ab4c340a4c84c77e" translate="yes" xml:space="preserve">
          <source>This &lt;a href=&quot;https://github.com/jfeldstein/jQuery.AjaxFileUpload.js&quot;&gt;AJAX file upload jQuery plugin&lt;/a&gt; uploads the file somehwere, and passes the
response to a callback, nothing else.</source>
          <target state="translated">Этот &lt;a href=&quot;https://github.com/jfeldstein/jQuery.AjaxFileUpload.js&quot;&gt;плагин JQuery для&lt;/a&gt; загрузки AJAX-файлов загружает файл где-то и передает ответ на обратный вызов, и ничего более.</target>
        </trans-unit>
        <trans-unit id="cf8b6bd07fc1b5f1d621c20a6d94f15cc5f34d2e" translate="yes" xml:space="preserve">
          <source>This is my solution.</source>
          <target state="translated">Это мое решение.</target>
        </trans-unit>
        <trans-unit id="4531ce2d24bfc01f63faa9a897c9a543cf017e24" translate="yes" xml:space="preserve">
          <source>This means that both the web page and the XML file it tries to load,
  must be located on the same server.</source>
          <target state="translated">Это означает,что и веб-страница,и XML-файл,который она пытается загрузить,должны быть расположены на одном сервере.</target>
        </trans-unit>
        <trans-unit id="bf51ae97ae357e25e1f45fa314ff335778a6f8ba" translate="yes" xml:space="preserve">
          <source>To do that basically when the upload/download is started:</source>
          <target state="translated">Сделать это,в основном,при запуске загрузки:</target>
        </trans-unit>
        <trans-unit id="ddc232fdf5f4506b591f568ec582361ce9acaaf8" translate="yes" xml:space="preserve">
          <source>To upload file asynchronously with Jquery use below steps:</source>
          <target state="translated">Чтобы загрузить файл асинхронно с Jquery используйте следующие шаги:</target>
        </trans-unit>
        <trans-unit id="edc229fa8c3ae5b5f37117272d4039d0fd8d1de2" translate="yes" xml:space="preserve">
          <source>To use the downloader  ( include the JS, obviously )</source>
          <target state="translated">Использовать загрузчик(включить JS,очевидно)</target>
        </trans-unit>
        <trans-unit id="986d7ad933b97fd6b787c296e4f88ce2795fa8b1" translate="yes" xml:space="preserve">
          <source>Using &lt;strong&gt;HTML5&lt;/strong&gt; and &lt;strong&gt;JavaScript&lt;/strong&gt;, uploading async is quite easy, I create the uploading logic along with your html, this is not fully working as it needs the api, but demonstrate how it works, if you have the endpoint called &lt;code&gt;/upload&lt;/code&gt; from root of your website, this code should work for you:</source>
          <target state="translated">Используя &lt;strong&gt;HTML5&lt;/strong&gt; и &lt;strong&gt;JavaScript&lt;/strong&gt; , выгрузка асинхронных файлов довольно проста, я создаю логику выгрузки вместе с вашим html, она работает не полностью, так как требует API, но продемонстрирую, как она работает, если у вас есть конечная точка, называемая &lt;code&gt;/upload&lt;/code&gt; из корня вашего веб-сайт, этот код должен работать для вас:</target>
        </trans-unit>
        <trans-unit id="c595835322d5931bd41f02e6a0fd61fc10b56862" translate="yes" xml:space="preserve">
          <source>Using a cookie for this is ugly but it works.</source>
          <target state="translated">Использование печенья для этого уродливо,но это работает.</target>
        </trans-unit>
        <trans-unit id="aa06e8203208b8dc6d008e57140df517695d5513" translate="yes" xml:space="preserve">
          <source>Using simple &lt;strong&gt;Javascripts&lt;/strong&gt; and &lt;strong&gt;AJAX&lt;/strong&gt; (with progress-bar)</source>
          <target state="translated">Использование простых &lt;strong&gt;Javascripts&lt;/strong&gt; и &lt;strong&gt;AJAX&lt;/strong&gt; (с индикатором выполнения)</target>
        </trans-unit>
        <trans-unit id="67eb426c9991bc55d107aac3bceffab46f10b33d" translate="yes" xml:space="preserve">
          <source>View more details</source>
          <target state="translated">Посмотреть дополнительную информацию</target>
        </trans-unit>
        <trans-unit id="16e0ed787a50984c4ec9211a30c898d021065472" translate="yes" xml:space="preserve">
          <source>When HTML5 isn't supported (no &lt;em&gt;File API&lt;/em&gt;) the only other pure JavaScript solution (no &lt;em&gt;Flash&lt;/em&gt; or any other browser plugin) is the &lt;strong&gt;hidden iframe&lt;/strong&gt; technique, which allows to emulate an asynchronous request without using the &lt;em&gt;XMLHttpRequest&lt;/em&gt; object.</source>
          <target state="translated">Когда HTML5 не поддерживается (без &lt;em&gt;File API&lt;/em&gt; ), единственным другим чистым решением JavaScript (без &lt;em&gt;Flash&lt;/em&gt; или любого другого подключаемого модуля браузера) является &lt;strong&gt;скрытый&lt;/strong&gt; метод &lt;strong&gt;iframe&lt;/strong&gt; , который позволяет эмулировать асинхронный запрос без использования объекта &lt;em&gt;XMLHttpRequest&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="e03b6ec90b69aaea312ae2454fe4fff39afb0b8e" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;http://en.wikipedia.org/wiki/HTML5&quot;&gt;HTML5&lt;/a&gt; you can make file uploads with Ajax and jQuery. Not only that, you can do file validations (name, size, and MIME type) or handle the progress event with the HTML5 progress tag (or a div). Recently I had to make a file uploader, but I didn't want to use &lt;a href=&quot;http://en.wikipedia.org/wiki/Adobe_Flash&quot;&gt;Flash&lt;/a&gt; nor Iframes or plugins and after some research I came up with the solution.</source>
          <target state="translated">С &lt;a href=&quot;http://en.wikipedia.org/wiki/HTML5&quot;&gt;HTML5&lt;/a&gt; вы можете загружать файлы с помощью Ajax и jQuery. Кроме того, вы можете выполнять проверку файлов (имя, размер и тип MIME) или обрабатывать событие progress с помощью тега прогресса HTML5 (или div). Недавно мне пришлось сделать загрузчик файлов, но я не хотел использовать &lt;a href=&quot;http://en.wikipedia.org/wiki/Adobe_Flash&quot;&gt;Flash,&lt;/a&gt; ни Iframes, ни плагины, и после некоторых исследований я нашел решение.</target>
        </trans-unit>
        <trans-unit id="5a1c56819ef92f5425d7e71d292f57e6885c684f" translate="yes" xml:space="preserve">
          <source>With HTML5</source>
          <target state="translated">С HTML5</target>
        </trans-unit>
        <trans-unit id="df1ff37ebde5a9239d88fe64c0df188251ffbfbd" translate="yes" xml:space="preserve">
          <source>Wrapping up for future readers.</source>
          <target state="translated">Упаковка для будущих читателей.</target>
        </trans-unit>
        <trans-unit id="758c334d85c5cd56d8d6ecf8d17938157933679d" translate="yes" xml:space="preserve">
          <source>You can also read the contents of the iframe &lt;code&gt;onLoad&lt;/code&gt; for server errors or success responses and then output that to user.</source>
          <target state="translated">Вы также можете прочитать содержимое iframe &lt;code&gt;onLoad&lt;/code&gt; для ошибок сервера или ответов об успешном выполнении, а затем вывести их пользователю.</target>
        </trans-unit>
        <trans-unit id="c9857486cc5286e83b21cca8bd7d4b59265fda80" translate="yes" xml:space="preserve">
          <source>You can also send files &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Submitting_forms_and_uploading_files&quot;&gt;without FormData&lt;/a&gt; but either way the File API must be present to process files in such a way that they can be sent with &lt;em&gt;XMLHttpRequest&lt;/em&gt; (Ajax).</source>
          <target state="translated">Вы также можете отправлять файлы &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Submitting_forms_and_uploading_files&quot;&gt;без FormData,&lt;/a&gt; но для обработки файлов таким образом, чтобы они могли быть отправлены с помощью &lt;em&gt;XMLHttpRequest&lt;/em&gt; (Ajax), должен присутствовать API-интерфейс File File.</target>
        </trans-unit>
        <trans-unit id="3a669263981f837bea72ddda769e1d84e6727ed2" translate="yes" xml:space="preserve">
          <source>You can do it in vanilla JavaScript pretty easily. Here's a snippet from my current project:</source>
          <target state="translated">Вы можете сделать это в ванильном JavaScript довольно легко.Вот отрывок из моего текущего проекта:</target>
        </trans-unit>
        <trans-unit id="3bca08384e231b9c523f0e4421f1874520b48ca0" translate="yes" xml:space="preserve">
          <source>You can do the Asynchronous Multiple File uploads using JavaScript or jQuery and that to without using any plugin. You can also show the real time progress of file upload in the progress control. I have come across 2 nice links -</source>
          <target state="translated">Вы можете выполнять асинхронную загрузку множества файлов с помощью JavaScript или jQuery и все это без использования какого-либо плагина.Вы также можете показывать прогресс загрузки файлов в реальном времени в контроле прогресса.Я наткнулся на 2 приятных ссылки -</target>
        </trans-unit>
        <trans-unit id="3492ddbc79dbdffa0d865d65652219b165d4b629" translate="yes" xml:space="preserve">
          <source>You can pass additional parameters along with file name on making asynchronous upload using XMLHttpRequest (without flash and iframe dependency). Append the additional parameter value with FormData and send the upload request.</source>
          <target state="translated">Вы можете передать дополнительные параметры вместе с именем файла при асинхронной загрузке с помощью XMLHttpRequest (без зависимости от flash-и iframe).Добавьте значение дополнительного параметра с помощью FormData и отправьте запрос на загрузку.</target>
        </trans-unit>
        <trans-unit id="d371428babf6e03ccb0a2d00352c4f4c8aeb4a3d" translate="yes" xml:space="preserve">
          <source>You can see a solved solution with a working demo &lt;a href=&quot;http://whats-online.info/science-and-tutorials/30/select-preview-rename-and-upload-image-using-jquery-Ajax/&quot;&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt; that allows you to preview and submit form files to the server. For your case, you need to use &lt;a href=&quot;http://en.wikipedia.org/wiki/Ajax_%28programming%29&quot;&gt;Ajax&lt;/a&gt; to facilitate the file upload to the server:</source>
          <target state="translated">Здесь вы можете увидеть решение с работающей демонстрацией, которая позволяет вам просматривать и отправлять файлы форм на сервер. В вашем случае вам нужно использовать &lt;a href=&quot;http://en.wikipedia.org/wiki/Ajax_%28programming%29&quot;&gt;Ajax&lt;/a&gt; для облегчения загрузки файла на сервер:</target>
        </trans-unit>
        <trans-unit id="bffefe47049362c07c11d3a1fec5b8496efa53d1" translate="yes" xml:space="preserve">
          <source>You can upload files &lt;strong&gt;with jQuery&lt;/strong&gt; using the &lt;code&gt;$.ajax()&lt;/code&gt; method if &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/Using_FormData_Objects&quot;&gt;FormData&lt;/a&gt; and the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Using_files_from_web_applications&quot;&gt;File API&lt;/a&gt; are supported (both HTML5 features).</source>
          <target state="translated">Вы можете загружать файлы &lt;strong&gt;с&lt;/strong&gt; помощью &lt;strong&gt;jQuery,&lt;/strong&gt; используя метод &lt;code&gt;$.ajax()&lt;/code&gt; если &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/Using_FormData_Objects&quot;&gt;поддерживаются FormData&lt;/a&gt; и &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Using_files_from_web_applications&quot;&gt;File API&lt;/a&gt; (обе функции HTML5).</target>
        </trans-unit>
        <trans-unit id="c15f754d5d6223b7ec469a1b4eb84b3da5e58719" translate="yes" xml:space="preserve">
          <source>You can upload simply with jQuery &lt;code&gt;.ajax()&lt;/code&gt;.</source>
          <target state="translated">Вы можете загрузить просто с помощью jQuery &lt;code&gt;.ajax()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3c94090f45521fa505560d818d146d87684fe4b4" translate="yes" xml:space="preserve">
          <source>You can use</source>
          <target state="translated">Вы можете использовать</target>
        </trans-unit>
        <trans-unit id="7df9b6e4a487605a23092ab6190f8850bb66f166" translate="yes" xml:space="preserve">
          <source>You can use &lt;strong&gt;newer&lt;/strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch&quot;&gt;Fetch API&lt;/a&gt; by JavaScript. Like this:</source>
          <target state="translated">Вы можете использовать &lt;strong&gt;более новый&lt;/strong&gt; &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch&quot;&gt;Fetch API с&lt;/a&gt; помощью JavaScript. Как это:</target>
        </trans-unit>
        <trans-unit id="e86e0df84288d21d27d3708cff031be7dff10cd4" translate="yes" xml:space="preserve">
          <source>You can use form data to post all your values including images.</source>
          <target state="translated">Вы можете использовать данные формы для размещения всех ваших значений,включая изображения.</target>
        </trans-unit>
        <trans-unit id="d7a176b05840ed78be2f460c5adf701b4447fb9f" translate="yes" xml:space="preserve">
          <source>You cannot upload files using &lt;a href=&quot;http://en.wikipedia.org/wiki/XMLHttpRequest&quot;&gt;XMLHttpRequest&lt;/a&gt; (Ajax). You can simulate the effect using an iframe or Flash. The excellent &lt;a href=&quot;http://malsup.com/jquery/form/&quot;&gt;jQuery Form Plugin&lt;/a&gt; that posts your files through an iframe to get the effect.</source>
          <target state="translated">Вы не можете загружать файлы, используя &lt;a href=&quot;http://en.wikipedia.org/wiki/XMLHttpRequest&quot;&gt;XMLHttpRequest&lt;/a&gt; (Ajax). Вы можете смоделировать эффект, используя iframe или Flash. Отличный &lt;a href=&quot;http://malsup.com/jquery/form/&quot;&gt;плагин jQuery Form,&lt;/a&gt; который отправляет ваши файлы через iframe, чтобы получить эффект.</target>
        </trans-unit>
        <trans-unit id="6a4afc416fe9e0f6b4c5767861f1f62cfad74985" translate="yes" xml:space="preserve">
          <source>You could also consider using something like &lt;a href=&quot;https://uppy.io&quot;&gt;https://uppy.io&lt;/a&gt;.</source>
          <target state="translated">Вы также можете использовать что-то вроде &lt;a href=&quot;https://uppy.io&quot;&gt;https://uppy.io&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="3e1039ae78b67c69d546e3905a6f44ea9e2fc812" translate="yes" xml:space="preserve">
          <source>[Client Side] Interval sees the cookie and uses it like the onLoad event.  For example you can start a UI blocker and then onLoad ( or when cookie is made )  you remove the UI blocker.</source>
          <target state="translated">[Клиентская сторона]Интервал видит куки и использует их как событие onLoad.Например,вы можете запустить блокировщик пользовательского интерфейса,а затем onLoad(или при создании куки-файла)вы удаляете блокировщик пользовательского интерфейса.</target>
        </trans-unit>
        <trans-unit id="814deaebb10db6821413d4652b86a99d86f25497" translate="yes" xml:space="preserve">
          <source>[Client Side] Start an interval to look for the existence of a cookie</source>
          <target state="translated">[Клиентская сторона]Начните интервал поиска существования куки.</target>
        </trans-unit>
        <trans-unit id="a8217709aac017aeb4d34c53d1f3e9d9135af392" translate="yes" xml:space="preserve">
          <source>[Server Side] Do whatever you need to with the file data</source>
          <target state="translated">[На стороне сервера]Делайте с данными файла все,что вам нужно.</target>
        </trans-unit>
        <trans-unit id="78d740e19d1ef7b0aa14bdd37f137cfe5e86410b" translate="yes" xml:space="preserve">
          <source>[Server Side] Set cookie for client side interval</source>
          <target state="translated">[Со стороны сервера]Установите куки для интервала на стороне клиента.</target>
        </trans-unit>
        <trans-unit id="c7c112398701ddd6804b1d20d93e37e2b9ef50bc" translate="yes" xml:space="preserve">
          <source>and the js</source>
          <target state="translated">и &quot;джс</target>
        </trans-unit>
        <trans-unit id="da4fe6d463e704e846c51de753a5380b7df066a4" translate="yes" xml:space="preserve">
          <source>hostingEnvironment variable is of type IHostingEnvironment which can be injected to the controller using dependency injection, like:</source>
          <target state="translated">Переменная hostEnvironment имеет тип IHostingEnvironment,которая может быть инжектирована в контроллер с помощью инжекции зависимостей,например:</target>
        </trans-unit>
        <trans-unit id="33d6bffa4a3d4423b7febcb3bbd1be0ba811cf44" translate="yes" xml:space="preserve">
          <source>jQuery &lt;a href=&quot;http://www.uploadify.com/download/&quot;&gt;Uploadify&lt;/a&gt; is another good plugin which I have used before to upload files. The JavaScript code is as simple as the following: code. However, the new version does not work in Internet&amp;nbsp;Explorer.</source>
          <target state="translated">jQuery &lt;a href=&quot;http://www.uploadify.com/download/&quot;&gt;Uploadify&lt;/a&gt; - еще один хороший плагин, который я использовал для загрузки файлов. Код JavaScript так же прост: код. Однако новая версия не работает в Internet Explorer.</target>
        </trans-unit>
        <trans-unit id="29a3ad536e11dc259f0c6bbe59ce601bd99ff89c" translate="yes" xml:space="preserve">
          <source>jquery.fileupload.js</source>
          <target state="translated">jquery.fileupload.js</target>
        </trans-unit>
        <trans-unit id="0f913f3272a84b9673f477976776e2cfb85e54f7" translate="yes" xml:space="preserve">
          <source>jquery.iframe-transport.js</source>
          <target state="translated">jquery.iframe-transport.js</target>
        </trans-unit>
        <trans-unit id="d880eeee0bc5308e41c8be5beb047a21c90ac8cb" translate="yes" xml:space="preserve">
          <source>jquery.ui.widget.js</source>
          <target state="translated">jquery.ui.widget.js</target>
        </trans-unit>
        <trans-unit id="f0b426739dc5921e29e22f64ffeb8158a0b89cb7" translate="yes" xml:space="preserve">
          <source>variable = new XMLHttpRequest();</source>
          <target state="translated">переменная=new XMLHttpRequest();</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
