<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://stackoverflow.com/questions/166221">
    <body>
      <group id="166221">
        <trans-unit id="bde1bb6bdfc4ce6d648eddba8fecf1f35e5a4599" translate="yes" xml:space="preserve">
          <source>-- Use as little as --</source>
          <target state="translated">-최소한으로 사용하십시오-</target>
        </trans-unit>
        <trans-unit id="191f36cefd639ecd80c2171565d0def830f358af" translate="yes" xml:space="preserve">
          <source>-- or as much as --</source>
          <target state="translated">-또는만큼-</target>
        </trans-unit>
        <trans-unit id="321ae22f35c07216907e385c988025d44d8ac2ad" translate="yes" xml:space="preserve">
          <source>2019 Update: It &lt;em&gt;still&lt;/em&gt; depends on the browsers &lt;em&gt;your&lt;/em&gt; demographic uses.</source>
          <target state="translated">2019 업데이트 : 인구 통계가 사용하는 브라우저에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="2e56ec18d7e62ff92bcd4bd2b8d829a71cca462d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;//github.com/matiasgagliano/bifrost&quot;&gt;Bifr&amp;ouml;st&lt;/a&gt; is just a small wrapper that adds fallback support to jQuery's ajax method, but many of the aforementioned plugins like &lt;a href=&quot;//malsup.com/jquery/form/&quot;&gt;jQuery Form Plugin&lt;/a&gt; or &lt;a href=&quot;//github.com/blueimp/jQuery-File-Upload&quot;&gt;jQuery File Upload&lt;/a&gt; include the whole stack from HTML5 to different fallbacks and some useful features to ease out the process. Depending on your needs and requirements you might want to consider a bare implementation or either of this plugins.</source>
          <target state="translated">&lt;a href=&quot;//github.com/matiasgagliano/bifrost&quot;&gt;Bifr&amp;ouml;st&lt;/a&gt; 는 jQuery의 ajax 메소드에 폴백 지원을 추가하는 작은 래퍼이지만 &lt;a href=&quot;//malsup.com/jquery/form/&quot;&gt;jQuery Form Plugin&lt;/a&gt; 또는 &lt;a href=&quot;//github.com/blueimp/jQuery-File-Upload&quot;&gt;jQuery File Upload&lt;/a&gt; 와 같은 많은 플러그인에는 HTML5에서 다른 폴백까지의 전체 스택과 프로세스를 용이하게하는 유용한 기능이 포함되어 있습니다. 요구 사항과 요구 사항에 따라 간단한 구현 또는이 플러그인 중 하나를 고려할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c4e04f28630d3612238d3f2f91c0924b1e021f0a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.williambharding.com/blog/rails/rails-ajax-image-uploading-made-simple-with-jquery/&quot;&gt;I've written this up in a Rails environment&lt;/a&gt;.  It's only about five lines of JavaScript, if you use the lightweight jQuery-form plugin.</source>
          <target state="translated">&lt;a href=&quot;http://www.williambharding.com/blog/rails/rails-ajax-image-uploading-made-simple-with-jquery/&quot;&gt;나는 이것을 Rails 환경에서 작성했습니다&lt;/a&gt; . 경량 jQuery 양식 플러그인을 사용하는 경우 약 5 줄의 JavaScript입니다.</target>
        </trans-unit>
        <trans-unit id="a080e25de8093d3cadbce3a0b96ea7b03a96e991" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;-note- you only need to keep reading if you are interested in how to setup a UI blocker when doing uploading/downloading&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;-참고-업로드 / 다운로드시 UI 차단기를 설정하는 방법에 관심이있는 경우 계속 읽으십시오.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1fd35578d942edc9cb657126c44ba09a40438f67" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Access Across Domains&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;도메인 간 액세스&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8a5cffabbdeeff043700b5dfeb1cb6b2216a4e97" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Advantage:&lt;/strong&gt; Fetch API is &lt;strong&gt;natively supported&lt;/strong&gt; by all modern browsers, so you don't have to import anything. Also, note that fetch() returns a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise&lt;/a&gt; which is then handled by using &lt;code&gt;.then(..code to handle response..)&lt;/code&gt; asynchronously.</source>
          <target state="translated">&lt;strong&gt;장점 :&lt;/strong&gt; Fetch API는 모든 최신 브라우저에서 &lt;strong&gt;기본적으로 지원&lt;/strong&gt; 되므로 아무 것도 가져올 필요가 없습니다. 또한 fetch ()는 &lt;code&gt;.then(..code to handle response..)&lt;/code&gt; 사용하여 응답을 처리합니다.)을 비동기 적 으로 처리 하여 처리되는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise&lt;/a&gt; 를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="88869f5dcc5e648c77bb81bf1b6aa9e29fe1a968" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Chrome, iFrames, and onLoad&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Chrome, iFrame 및 onLoad&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="340f495f32cb36a45623f626af8a65af6739387a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Create an XMLHttpRequest Object&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;XMLHttpRequest 객체 생성&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fc93c4a4bc534bbd891d3cc25bc8f573f9a911c9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;File Upload ASP.NET Core MVC:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;파일 업로드 ASP.NET Core MVC :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a40279dd4c1bd5f957300a46831c4dcf38bb63c4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;HTML part&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;HTML 부분&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1ed559f58d1012098e76aa02f5987633940fcf2d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;HTML&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;HTML&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ff581c0a160c88e74d2a6f9860227f014946483f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Here's the EXAMPLE application&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;EXAMPLE 애플리케이션은 다음과 같습니다&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="62badaaf4753ecb6b40f104d53c1d15b8e0102aa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;I hope it would be helpful&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;도움이 되길 바랍니다.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="50f60c68344fc3d3c15ad60b7566259c67185caf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JAVASCRIPT&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;JAVASCRIPT&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="34c4a0e1b97eacf196df7509404f04c72f7d500a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JS part&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;JS 부분&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="79e70e3362d4cf26bc4e399f24131a18fcddb9a1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;PHP part&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;PHP 부분&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c0ea0dc97baa1d4c675361104fa844e8cea6bf02" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;PHP&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;PHP&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7b4b994b4e199273b339fd6a6bbf81718148df85" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The XMLHttpRequest Object&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;XMLHttpRequest 객체&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5217b738c3143d4d2b55934df2f4161c3aa15f61" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;step 1&lt;/strong&gt; In your project open Nuget manager and add package (jquery fileupload(only you need to write it in search box it will come up and install it.))
URL: &lt;a href=&quot;https://github.com/blueimp/jQuery-File-Upload&quot;&gt;https://github.com/blueimp/jQuery-File-Upload&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;1 단계&lt;/strong&gt; 프로젝트에서 Nuget 관리자를 열고 패키지를 추가하십시오 (jquery fileupload (검색 상자에 작성해야합니다.)) URL : &lt;a href=&quot;https://github.com/blueimp/jQuery-File-Upload&quot;&gt;https://github.com/blueimp/jQuery-File- 업로드&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="abee2b907144afea1b70b16731b2b300ede57ac5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;step 2&lt;/strong&gt; Add below scripts in the HTML files, which are already added to the project by running above package:</source>
          <target state="translated">&lt;strong&gt;2 단계&lt;/strong&gt; 위의 패키지를 실행하여 프로젝트에 이미 추가 된 HTML 파일에 아래 스크립트를 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="1d5e08389ed908e9e6ca001e26548376cf8a13bf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;step 3&lt;/strong&gt;  Write file upload control as per below code:</source>
          <target state="translated">&lt;strong&gt;3 단계&lt;/strong&gt; 아래 코드에 따라 파일 업로드 제어를 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="b0684d91ae0c646a55715a9c025968c3974dff9d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;step 4&lt;/strong&gt;  write a js method as uploadFile as below:</source>
          <target state="translated">&lt;strong&gt;4 단계&lt;/strong&gt; : 아래와 같이 js 메소드를 uploadFile로 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="ed5df500f19bb6a07ba65da44693d249ac76bf3b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;step 5&lt;/strong&gt; In ready function call element file upload to initiate the process as per below:</source>
          <target state="translated">&lt;strong&gt;5 단계&lt;/strong&gt; 준비된 함수 호출 요소 파일 업로드에서 아래에 따라 프로세스를 시작합니다.</target>
        </trans-unit>
        <trans-unit id="5c729b6d1ce5a11776346ee8a8764df6b0e0a9a7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;step 6&lt;/strong&gt; Write MVC controller and Action as per below:</source>
          <target state="translated">&lt;strong&gt;6 단계&lt;/strong&gt; MVC 컨트롤러를 작성하고 다음과 같이 조치를 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="d11d31fceb3683f3352ba6df7fb150d80d69fb47" translate="yes" xml:space="preserve">
          <source>A modern approach &lt;strong&gt;without Jquery&lt;/strong&gt; is to use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/FileList&quot;&gt;FileList&lt;/a&gt; object you get back from &lt;code&gt;&amp;lt;input type=&quot;file&quot;&amp;gt;&lt;/code&gt; when user selects a file(s) and then use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API&quot;&gt;Fetch&lt;/a&gt; to post the FileList wrapped around a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/FormData&quot;&gt;FormData&lt;/a&gt; object.</source>
          <target state="translated">&lt;strong&gt;Jquery&lt;/strong&gt; 가 &lt;strong&gt;없는&lt;/strong&gt; 현대적인 접근 방식은 사용자가 파일을 선택할 때 &lt;code&gt;&amp;lt;input type=&quot;file&quot;&amp;gt;&lt;/code&gt; 에서 가져온 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/FileList&quot;&gt;FileList&lt;/a&gt; 객체를 사용하고 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API&quot;&gt;Fetch&lt;/a&gt; 를 사용하여 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/FormData&quot;&gt;FormData&lt;/a&gt; 객체를 감싸는 FileList를 게시하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="327a8ba0ed4f81315cde0bbe0dbbe18c1a2aa517" translate="yes" xml:space="preserve">
          <source>A solution I found was to have the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; target a hidden iFrame. The iFrame can then run JS to display to the user that it's complete (on page load).</source>
          <target state="translated">내가 찾은 해결책은 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 이 숨겨진 iFrame을 대상으로하는 것입니다. 그런 다음 iFrame은 JS를 실행하여 페이지로드시 완료되었음을 사용자에게 표시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dd781a59c3d9928cba98ad84022ee83c741ed709" translate="yes" xml:space="preserve">
          <source>ASP.NET MVC based Multiple File Upload made in jQuery</source>
          <target state="translated">jQuery에서 만든 ASP.NET MVC 기반 다중 파일 업로드</target>
        </trans-unit>
        <trans-unit id="cb3aa313c45e4f71a2e7758387f9e0f9d050666c" translate="yes" xml:space="preserve">
          <source>ASP.NET Web Forms based Mulitple File Upload Feature with Progress Bar</source>
          <target state="translated">진행률 표시 줄이있는 ASP.NET Web Forms 기반의 다중 파일 업로드 기능</target>
        </trans-unit>
        <trans-unit id="7ccb7a6f21c909df5fd4cb541526dcb7a5dd8c9c" translate="yes" xml:space="preserve">
          <source>All modern browsers (Chrome, Firefox,
  IE7+, Edge, Safari, Opera) have a built-in XMLHttpRequest object.</source>
          <target state="translated">모든 최신 브라우저 (Chrome, Firefox, IE7 +, Edge, Safari, Opera)에는 XMLHttpRequest 객체가 내장되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="bf11d2224fc3d745059588a934da0acf78c6b5c8" translate="yes" xml:space="preserve">
          <source>All modern browsers support the XMLHttpRequest object.
  The XMLHttpRequest object can be used to exchange data with a web
  server behind the scenes. This means that it is possible to update
  parts of a web page, without reloading the whole page.</source>
          <target state="translated">모든 최신 브라우저는 XMLHttpRequest 객체를 지원합니다. XMLHttpRequest 객체를 사용하여 비하인드 웹 서버와 데이터를 교환 할 수 있습니다. 즉, 전체 페이지를 다시로드하지 않고도 웹 페이지의 일부를 업데이트 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="76de35634500342f6ed12f15742181f57da106d9" translate="yes" xml:space="preserve">
          <source>Also some further information about XMLHttpReques:</source>
          <target state="translated">XMLHttpReques에 대한 추가 정보도 있습니다.</target>
        </trans-unit>
        <trans-unit id="9b3816471bd27fdea3c09c75c6166f5f418925a5" translate="yes" xml:space="preserve">
          <source>Also, Syncfusion JavaScript UI file upload provides solution for this scenario simply using event argument. you can find documentation &lt;a href=&quot;https://ej2.syncfusion.com/documentation/uploader/how-to/#add-additional-data-on-upload&quot;&gt;here&lt;/a&gt; and further details about this control here enter link description &lt;a href=&quot;https://www.syncfusion.com/javascript-ui-controls/file-upload&quot;&gt;here&lt;/a&gt;</source>
          <target state="translated">또한 Syncfusion JavaScript UI 파일 업로드는 단순히 이벤트 인수를 사용하여이 시나리오에 대한 솔루션을 제공합니다. &lt;a href=&quot;https://ej2.syncfusion.com/documentation/uploader/how-to/#add-additional-data-on-upload&quot;&gt;여기에서&lt;/a&gt; 문서를 찾을 수 있고 여기 에서이 컨트롤에 대한 자세한 내용을 여기에 링크 설명을 입력 &lt;a href=&quot;https://www.syncfusion.com/javascript-ui-controls/file-upload&quot;&gt;하십시오.&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="12c1e87c3ffe1cf00af7e0ab5667d19d6130afb5" translate="yes" xml:space="preserve">
          <source>An important thing to understand with the &quot;new&quot; HTML5 &lt;code&gt;file&lt;/code&gt; API is that it &lt;a href=&quot;http://caniuse.com/fileapi&quot;&gt;wasn't supported until IE&amp;nbsp;10&lt;/a&gt;. If the specific market you're aiming at has a higher-than-average propensity toward older versions of Windows, you might not have access to it.</source>
          <target state="translated">&quot;새로운&quot;HTML5 &lt;code&gt;file&lt;/code&gt; API로 이해해야 할 중요한 점은 &lt;a href=&quot;http://caniuse.com/fileapi&quot;&gt;IE 10까지 지원되지&lt;/a&gt; 않았다는 것입니다. 특정 시장에서 이전 버전의 Windows에 대한 평균 이상의 경향이있는 경우 해당 시장에 액세스하지 못할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0939693418a22cd5f714580377676338d7c4adcc" translate="yes" xml:space="preserve">
          <source>And here&amp;rsquo;s the Rails controller action, pretty vanilla:</source>
          <target state="translated">그리고 여기 Rails 컨트롤러 액션, 예쁜 바닐라가 있습니다 :</target>
        </trans-unit>
        <trans-unit id="bf20a417b00c7fcdca6922207cf8a95a9d2c7131" translate="yes" xml:space="preserve">
          <source>And on the server side, just before transferring the file data, create the cookie</source>
          <target state="translated">그리고 서버 측에서 파일 데이터를 전송하기 직전에 쿠키를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="6e3f19defed4ed1a717794d55274f1f5c7fb2f8a" translate="yes" xml:space="preserve">
          <source>As of 2017, about 5% of browsers are one of IE 6, 7, 8 or 9. If you head into a big corporation (e.g., this is a B2B tool, or something you're delivering for training) that number can skyrocket. In 2016, I dealt with a company using IE8 on over 60% of their machines.</source>
          <target state="translated">2017 년 현재 브라우저의 약 5 %는 IE 6, 7, 8 또는 9 중 하나입니다. 대기업으로 향하는 경우 (예 : B2B 도구 또는 교육을 위해 제공하는 것) 해당 수치가 급등 할 수 있습니다 . 2016 년에, 나는 기계의 60 % 이상에서 IE8을 사용하는 회사를 상대했습니다.</target>
        </trans-unit>
        <trans-unit id="e58fbf58b4e2636023e44cabd72f9afa7b552d3a" translate="yes" xml:space="preserve">
          <source>As you can see, with HTML5 (and some research) file uploading not only becomes possible but super easy. Try it with &lt;a href=&quot;http://en.wikipedia.org/wiki/Google_Chrome&quot;&gt;Google Chrome&lt;/a&gt; as some of the HTML5 components of the examples aren't available in every browser.</source>
          <target state="translated">보다시피 HTML5 (및 일부 연구) 파일 업로드를 사용하면 파일 업로드가 가능할뿐만 아니라 매우 쉬워집니다. 일부 브라우저에서 예제의 일부 HTML5 구성 요소를 사용할 수있는 것은 아니므로 &lt;a href=&quot;http://en.wikipedia.org/wiki/Google_Chrome&quot;&gt;Chrome&lt;/a&gt; 으로 사용해보세요.</target>
        </trans-unit>
        <trans-unit id="739b02e8340806bd763467024fad5fc825ffbdbd" translate="yes" xml:space="preserve">
          <source>Asynchronous File Upload</source>
          <target state="translated">비동기 파일 업로드</target>
        </trans-unit>
        <trans-unit id="f08ffb71aa4169fe87dcfe83fa18741fac6956d9" translate="yes" xml:space="preserve">
          <source>At the PHP level this will work as normal file upload. extra-data can be retrieved as &lt;code&gt;$_POST&lt;/code&gt; data.</source>
          <target state="translated">PHP 수준에서는 정상적인 파일 업로드로 작동합니다. 추가 데이터는 &lt;code&gt;$_POST&lt;/code&gt; 데이터로 검색 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e1fbeca40d7191954f4c8223d677668706fd65b2" translate="yes" xml:space="preserve">
          <source>Best part is you can send extra data such as ids &amp;amp; etc with the file when you use this script. I have mention it &lt;code&gt;extra-data&lt;/code&gt; as in the script.</source>
          <target state="translated">이 스크립트를 사용할 때 ID와 같은 추가 데이터를 파일과 함께 보낼 수 있습니다. 스크립트에서와 같이 &lt;code&gt;extra-data&lt;/code&gt; 를 언급했습니다.</target>
        </trans-unit>
        <trans-unit id="194e13da720a1f025685e5d677eba8a1aff3860a" translate="yes" xml:space="preserve">
          <source>CSS</source>
          <target state="translated">CSS</target>
        </trans-unit>
        <trans-unit id="a36a5ffa6e0dcfb64fac1b2b3d6fb176de9689de" translate="yes" xml:space="preserve">
          <source>Controller</source>
          <target state="translated">Controller</target>
        </trans-unit>
        <trans-unit id="f62f45b8d2d944a83b198140ebaa928cce8a9cdb" translate="yes" xml:space="preserve">
          <source>Convert file to base64 using |HTML5's &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/FileReader#readAsDataURL%28%29&quot;&gt;readAsDataURL()&lt;/a&gt; or &lt;a href=&quot;http://scotch.io/quick-tips/js/how-to-encode-and-decode-strings-with-base64-in-javascript&quot;&gt;some base64 encoder&lt;/a&gt;. 
&lt;a href=&quot;http://jsfiddle.net/eliseosoto/JHQnk/&quot;&gt;Fiddle here&lt;/a&gt;</source>
          <target state="translated">HTML5의 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/FileReader#readAsDataURL%28%29&quot;&gt;readAsDataURL ()&lt;/a&gt; 또는 &lt;a href=&quot;http://scotch.io/quick-tips/js/how-to-encode-and-decode-strings-with-base64-in-javascript&quot;&gt;일부 base64 인코더를&lt;/a&gt; 사용하여 파일을 base64로 변환하십시오. &lt;a href=&quot;http://jsfiddle.net/eliseosoto/JHQnk/&quot;&gt;여기에 바이올린&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ad3031a58e14e8ab3356947a4d923efc5af9719e" translate="yes" xml:space="preserve">
          <source>Cross-browser -- works in IE7+, Firefox, Chrome, Safari, Opera</source>
          <target state="translated">크로스 브라우저-IE7 +, Firefox, Chrome, Safari, Opera에서 작동</target>
        </trans-unit>
        <trans-unit id="de6a2ac98a906778381a246e83009244d3e7bcb4" translate="yes" xml:space="preserve">
          <source>Currently Chrome doesn't trigger the onLoad event for the iframe when it's used to transfer files.  Firefox, IE, and Edge all fire the onload event for file transfers.</source>
          <target state="translated">현재 Chrome은 파일 전송에 사용될 때 iframe에 대한 onLoad 이벤트를 트리거하지 않습니다. Firefox, IE 및 Edge는 모두 파일 전송시 onload 이벤트를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="e52c854d5631eec7468ba4727b4c77eb745f2965" translate="yes" xml:space="preserve">
          <source>Demo</source>
          <target state="translated">Demo</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="5ab7721397827b925456d2a147cb5704105a62a7" translate="yes" xml:space="preserve">
          <source>Example usage:</source>
          <target state="translated">사용법 예 :</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">스 니펫 확장</target>
        </trans-unit>
        <trans-unit id="b32ef340ea4702fd5f41dbe4001671d76174ef71" translate="yes" xml:space="preserve">
          <source>Explanation</source>
          <target state="translated">Explanation</target>
        </trans-unit>
        <trans-unit id="b4a100ebc4c1820c605bd96d9dd279ff888640e2" translate="yes" xml:space="preserve">
          <source>Fallback</source>
          <target state="translated">Fallback</target>
        </trans-unit>
        <trans-unit id="2881c4db66bb51a107b08ba43533875b85f0f559" translate="yes" xml:space="preserve">
          <source>First, you can do some validation if you want. For example, in the &lt;code&gt;.on('change')&lt;/code&gt; event of the file:</source>
          <target state="translated">먼저 원하는 경우 유효성 검사를 수행 할 수 있습니다. 예를 들어, 파일의 &lt;code&gt;.on('change')&lt;/code&gt; 이벤트에서 :</target>
        </trans-unit>
        <trans-unit id="d6c51e6336a45599aef34db8592c306091a1b29d" translate="yes" xml:space="preserve">
          <source>Flexible and highly customizable -- use any element as upload button, style your own progress indicators</source>
          <target state="translated">유연하고 고도로 사용자 정의 가능-모든 요소를 ​​업로드 버튼으로 사용하고 자체 진행률 표시기</target>
        </trans-unit>
        <trans-unit id="d418547c9d63224a7bbdce6df08c5ef4f28aba0a" translate="yes" xml:space="preserve">
          <source>For PHP, look for &lt;a href=&quot;https://developer.hyvor.com/php/image-upload-ajax-php-mysql&quot;&gt;https://developer.hyvor.com/php/image-upload-ajax-php-mysql&lt;/a&gt;</source>
          <target state="translated">PHP의 경우 &lt;a href=&quot;https://developer.hyvor.com/php/image-upload-ajax-php-mysql&quot;&gt;https://developer.hyvor.com/php/image-upload-ajax-php-mysql을&lt;/a&gt; 찾으십시오.</target>
        </trans-unit>
        <trans-unit id="08ce5feea4874259e52cc43066f0431477b1c4e9" translate="yes" xml:space="preserve">
          <source>For a quick, pure JavaScript (&lt;strong&gt;no jQuery&lt;/strong&gt;) example see &quot;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/Using_FormData_Objects#Sending_files_using_a_FormData_object&quot;&gt;Sending files using a FormData object&lt;/a&gt;&quot;.</source>
          <target state="translated">빠르고 순수한 JavaScript ( &lt;strong&gt;jQuery 없음&lt;/strong&gt; ) 예제는 &quot; &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/Using_FormData_Objects#Sending_files_using_a_FormData_object&quot;&gt;FormData 객체를 사용하여 파일 보내기&lt;/a&gt; &quot;를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="7afe5a982d1f2e8750c9e989e3d699a14855d178" translate="yes" xml:space="preserve">
          <source>For more details, you can continue reading &lt;a href=&quot;https://www.w3schools.com/js/js_ajax_http.asp&quot;&gt;here&lt;/a&gt;...</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;https://www.w3schools.com/js/js_ajax_http.asp&quot;&gt;여기에서&lt;/a&gt; 계속 읽을 수 있습니다 ...</target>
        </trans-unit>
        <trans-unit id="8af703a066b3eb71965852b4f11718bc51cf19b1" translate="yes" xml:space="preserve">
          <source>For security reasons, modern browsers do not
  allow access across domains.</source>
          <target state="translated">보안상의 이유로 최신 브라우저는 도메인 간 액세스를 허용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9f738ce8457f291b18ee47e665e96baa84f38fcd" translate="yes" xml:space="preserve">
          <source>HTML</source>
          <target state="translated">HTML</target>
        </trans-unit>
        <trans-unit id="11dc542c0ffeed8b41bad901e2044f438e4ab0e5" translate="yes" xml:space="preserve">
          <source>HTML:</source>
          <target state="translated">HTML:</target>
        </trans-unit>
        <trans-unit id="8bf644df1d676a0a3e4b69aa8aee04684f2de2e8" translate="yes" xml:space="preserve">
          <source>Here you are not using a plugin and stuff. You can change the code as you want. You are not blindly coding here. This is the core functionality of any jQuery file upload. Actually Javascript.</source>
          <target state="translated">여기서는 플러그인과 물건을 사용하지 않습니다. 원하는대로 코드를 변경할 수 있습니다. 당신은 여기서 맹목적으로 코딩하지 않습니다. 이것은 모든 jQuery 파일 업로드의 핵심 기능입니다. 실제로 자바 스크립트.</target>
        </trans-unit>
        <trans-unit id="caf4b1cff302e045b3730574f02d74a6ef516095" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s the Rails code for it:</source>
          <target state="translated">레일즈 코드는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="3fc79829ba27d8c1c75995914c2cc497af893f75" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s the associated JavaScript:</source>
          <target state="translated">관련 JavaScript는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="da114669a0537123c37e953285babee52306e476" translate="yes" xml:space="preserve">
          <source>Here's just another solution of how to upload file (&lt;strong&gt;without any plugin&lt;/strong&gt;)</source>
          <target state="translated">다음은 &lt;strong&gt;플러그인없이&lt;/strong&gt; 파일을 업로드하는 방법에 대한 또 다른 솔루션입니다.</target>
        </trans-unit>
        <trans-unit id="5990cd6351c2fe56d35d2afe5c25f991789b7174" translate="yes" xml:space="preserve">
          <source>How can I upload files asynchronously</source>
          <target state="translated">파일을 비동기 적으로 업로드하는 방법</target>
        </trans-unit>
        <trans-unit id="3c02ab2bda440d908a78f019a28279c099ab766a" translate="yes" xml:space="preserve">
          <source>However, there are viable non-JS methods of file uploads. You can create an iframe on the page (that you hide with CSS) and then target your form to post to that iframe. The main page doesn't need to move.</source>
          <target state="translated">그러나 파일 업로드 방법에는 비 JS 방법이 있습니다. CSS로 숨기는 페이지에서 iframe을 만든 다음 해당 iframe에 게시 할 양식을 대상으로 지정할 수 있습니다. 메인 페이지는 이동할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="c176b5b32b0fffa253d395e9965f972693e29a3c" translate="yes" xml:space="preserve">
          <source>I have been using the below script to upload images which happens to work fine.</source>
          <target state="translated">아래 스크립트를 사용하여 정상적으로 작동하는 이미지를 업로드했습니다.</target>
        </trans-unit>
        <trans-unit id="450c5d9b7c8c7dcc267fa47c87251658a6774ca3" translate="yes" xml:space="preserve">
          <source>I have done a lot of searching and I have come to another solution for uploading files without any plugin and only with ajax. The solution is as below:</source>
          <target state="translated">나는 많은 검색을 수행했으며 플러그인없이 ajax로만 파일을 업로드하는 다른 솔루션을 찾았습니다. 해결책은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="ed3f24638549f840c22003b42a5de19f6e915d95" translate="yes" xml:space="preserve">
          <source>I made a jQuery plugin to handle this issue for Chrome when downloading, you can find here</source>
          <target state="translated">다운로드 할 때 Chrome 의이 문제를 처리하기 위해 jQuery 플러그인을 만들었습니다. 여기에서 찾을 수 있습니다</target>
        </trans-unit>
        <trans-unit id="62faeec7e8dee8ece0a999faa924f5cb9f444db9" translate="yes" xml:space="preserve">
          <source>I recommend using the &lt;a href=&quot;http://fineuploader.com/demos.html&quot;&gt;Fine Uploader&lt;/a&gt; plugin for this purpose. Your &lt;code&gt;JavaScript&lt;/code&gt; code would be:</source>
          <target state="translated">이 목적으로 &lt;a href=&quot;http://fineuploader.com/demos.html&quot;&gt;Fine Uploader&lt;/a&gt; 플러그인을 사용하는 것이 좋습니다. &lt;code&gt;JavaScript&lt;/code&gt; 코드는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d4131cec799b334c694e0f46269e18cafcc1caec" translate="yes" xml:space="preserve">
          <source>I use response &lt;code&gt;div&lt;/code&gt; to show the uploading animation and response after upload is done.</source>
          <target state="translated">response &lt;code&gt;div&lt;/code&gt; 를 사용하여 업로드 애니메이션 및 업로드 완료 후 응답을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="25f31ab2de4c8c97a9dad9b491627c09fc9760ab" translate="yes" xml:space="preserve">
          <source>I would like to upload a file asynchronously with jQuery.</source>
          <target state="translated">jQuery와 함께 파일을 비동기 적으로 업로드하고 싶습니다.</target>
        </trans-unit>
        <trans-unit id="b2cc78d3bc8c28e369a8c37bbc9545d02130f7c7" translate="yes" xml:space="preserve">
          <source>I&amp;rsquo;ve been using this for the past few weeks with Bloggity, and it&amp;rsquo;s worked like a champ.</source>
          <target state="translated">나는 지난 몇 주 동안 Bloggity와 함께 이것을 사용해 왔으며 챔피언처럼 작동했습니다.</target>
        </trans-unit>
        <trans-unit id="fae42fcde1c6ffa628f482196b3f69eddfcbccfd" translate="yes" xml:space="preserve">
          <source>If done properly it should work virtually on any browser, but it has some caveats as how to obtain the response from the iframe.</source>
          <target state="translated">제대로 완료되면 거의 모든 브라우저에서 작동하지만 iframe에서 응답을 얻는 방법에는 몇 가지주의 사항이 있습니다.</target>
        </trans-unit>
        <trans-unit id="ac9e395b92ca11305f6f6debfc730c8764e71d2a" translate="yes" xml:space="preserve">
          <source>If you need multiple file-uploads, it's best to do each file one at a time (to overcome maximum file upload limits). Post the first form to the iframe, monitor its progress using the above and when it has finished, post the second form to the iframe, and so on.</source>
          <target state="translated">여러 파일 업로드가 필요한 경우 최대 파일 업로드 한도를 극복하기 위해 한 번에 하나씩 각 파일을 수행하는 것이 가장 좋습니다. 첫 번째 양식을 iframe에 게시하고 위를 사용하여 진행 상황을 모니터링하고 완료되면 두 번째 양식을 iframe에 게시하는 등의 작업을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="6f181e65d320f5e01038c0018f20b3edcefd18d8" translate="yes" xml:space="preserve">
          <source>If you want to use the example above on one of your own web pages, the
  XML files you load must be located on your own server.</source>
          <target state="translated">자신의 웹 페이지 중 하나에서 위 예제를 사용하려면로드 한 XML 파일이 자체 서버에 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="14fe30068ecbbb53cbd6ebdc9d97a7edb54e9a05" translate="yes" xml:space="preserve">
          <source>In the View create file upload control in html:</source>
          <target state="translated">html에서 파일 작성 제어보기보기에서 :</target>
        </trans-unit>
        <trans-unit id="74d4ecf22707e7df0a7043488d65926f4bc9fc6a" translate="yes" xml:space="preserve">
          <source>In this case you may prefer to use a wrapper plugin like &lt;a href=&quot;//github.com/matiasgagliano/bifrost&quot;&gt;Bifr&amp;ouml;st&lt;/a&gt; which uses the &lt;em&gt;iframe technique&lt;/em&gt; but also provides a &lt;a href=&quot;//api.jquery.com/jQuery.ajaxTransport&quot;&gt;jQuery Ajax transport&lt;/a&gt; allowing to &lt;strong&gt;send files&lt;/strong&gt; with just the &lt;code&gt;$.ajax()&lt;/code&gt; method like this:</source>
          <target state="translated">이 경우 &lt;em&gt;iframe 기술&lt;/em&gt; 을 사용하지만 다음과 같이 &lt;code&gt;$.ajax()&lt;/code&gt; 메소드 &lt;strong&gt;로 파일&lt;/strong&gt; 을 &lt;strong&gt;보낼&lt;/strong&gt; 수있는 &lt;a href=&quot;//api.jquery.com/jQuery.ajaxTransport&quot;&gt;jQuery Ajax 전송을&lt;/a&gt; 제공하는 &lt;a href=&quot;//github.com/matiasgagliano/bifrost&quot;&gt;Bifr&amp;ouml;st&lt;/a&gt; 와 같은 래퍼 플러그인을 사용하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="71f2e90f8cac48a34fc1ecffd12ffbcc3f278134" translate="yes" xml:space="preserve">
          <source>Instead of the file being uploaded, I am only getting the filename. What can I do to fix this problem?</source>
          <target state="translated">파일을 업로드하는 대신 파일 이름 만 가져옵니다. 이 문제를 해결하려면 어떻게해야합니까?</target>
        </trans-unit>
        <trans-unit id="a2b34c8ecd529ea93b439ef738316f51623ec501" translate="yes" xml:space="preserve">
          <source>It consists of setting an iframe as the target of the form with the file inputs. When the user submits a request is made and the files are uploaded but the response is displayed inside the iframe instead of re-rendering the main page. Hiding the iframe makes the whole process transparent to the user and emulates an asynchronous request.</source>
          <target state="translated">파일 입력을 사용하여 iframe을 양식의 대상으로 설정합니다. 사용자가 요청을 제출하면 파일이 업로드되지만 기본 페이지를 다시 렌더링하는 대신 iframe 내부에 응답이 표시됩니다. iframe을 숨기면 전체 프로세스가 사용자에게 투명 해지고 비동기 요청을 에뮬레이트합니다.</target>
        </trans-unit>
        <trans-unit id="fc7666c5b1ddcaf2b2495cb20e836556519a1a25" translate="yes" xml:space="preserve">
          <source>It does file uploading without navigating away from the page and offers a few bonuses like drag &amp;amp; drop, resuming uploads in case of browser crashes/flaky networks, and importing from e.g. Instagram.
It's open source and does not rely on jQuery/React/Angular/Vue, but can be used with it. Disclaimer: as its creator I'm biased ;)</source>
          <target state="translated">페이지를 탐색하지 않고 파일 업로드를 수행하며 끌어서 놓기, 브라우저 충돌 / 불완전한 네트워크의 경우 업로드 재개 및 Instagram에서 가져 오기와 같은 몇 가지 보너스를 제공합니다. 오픈 소스이며 jQuery / React / Angular / Vue에 의존하지 않지만 함께 사용할 수 있습니다. 면책 조항 : 작성자로서 편견이 있습니다.)</target>
        </trans-unit>
        <trans-unit id="b07b361a2afac417b4c562ce3767dd9a9bf65e28" translate="yes" xml:space="preserve">
          <source>It does not depend on specific HTML, just give it a &lt;code&gt;&amp;lt;input type=&quot;file&quot;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">특정 HTML에 의존하지 않고 &lt;code&gt;&amp;lt;input type=&quot;file&quot;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5214822f121f4614360130ec5d7c91654b2c7d27" translate="yes" xml:space="preserve">
          <source>It does not matter how many files you use, or where they are on the page</source>
          <target state="translated">사용하는 파일 수 또는 페이지의 위치는 중요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ac4827b61d1fae86fb89b0c53151a10e0cdc9f6a" translate="yes" xml:space="preserve">
          <source>It does not require your server to respond in any particular way</source>
          <target state="translated">서버가 특정 방식으로 응답하지 않아도됩니다.</target>
        </trans-unit>
        <trans-unit id="8e9eb53d562cbb50167ee9e0d62459e188ae3600" translate="yes" xml:space="preserve">
          <source>It's 2019 as of this edit, almost 11 years after my initial answer. IE9 and lower are &lt;em&gt;globally&lt;/em&gt; around the 1% mark but there are still clusters  of higher usage.</source>
          <target state="translated">이 답변은 2019 년이며, 최초 답변 후 거의 11 년이 지났습니다. IE9 이하는 &lt;em&gt;전 세계적&lt;/em&gt; 으로 1 % 정도이지만 여전히 더 높은 사용량의 클러스터가 있습니다.</target>
        </trans-unit>
        <trans-unit id="3693257f0f11b5dc67397868daf7f6aa335eafcc" translate="yes" xml:space="preserve">
          <source>It's a &quot;real&quot; post so it's not wholly interactive. If you need status you need something server-side to process that. This varies massively depending on your server. &lt;a href=&quot;http://en.wikipedia.org/wiki/ASP.NET&quot;&gt;ASP.NET&lt;/a&gt; has nicer mechanisms. PHP plain fails, but you can use &lt;a href=&quot;http://en.wikipedia.org/wiki/Perl&quot;&gt;Perl&lt;/a&gt; or Apache modifications to get around it.</source>
          <target state="translated">&quot;실제&quot;게시물이므로 대화식이 아닙니다. 상태가 필요한 경우 처리 할 서버 측이 필요합니다. 서버에 따라 크게 다릅니다. &lt;a href=&quot;http://en.wikipedia.org/wiki/ASP.NET&quot;&gt;ASP.NET&lt;/a&gt; 에는 더 좋은 메커니즘이 있습니다. PHP plain은 실패하지만 &lt;a href=&quot;http://en.wikipedia.org/wiki/Perl&quot;&gt;Perl&lt;/a&gt; 또는 Apache 수정을 사용하여 해결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ee620923ff5fc510555dc37083a135ee93b5404b" translate="yes" xml:space="preserve">
          <source>JavaScript</source>
          <target state="translated">JavaScript</target>
        </trans-unit>
        <trans-unit id="e9ce9e5bca25bed2e1d65ad277a45c51f6436d5e" translate="yes" xml:space="preserve">
          <source>Javascript:</source>
          <target state="translated">Javascript:</target>
        </trans-unit>
        <trans-unit id="fabc997f26bb34ab27fb85cede45244f0e00756c" translate="yes" xml:space="preserve">
          <source>Look for &lt;em&gt;Handling the upload process for a file, asynchronously&lt;/em&gt; in here:
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Using_files_from_web_applications&quot;&gt;https://developer.mozilla.org/en-US/docs/Using_files_from_web_applications&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Using_files_from_web_applications&quot;&gt;https://developer.mozilla.org/en-US/docs/Using_files_from_web_applications&lt;/a&gt; 에서 &lt;em&gt;비동기 적으로 파일 업로드 프로세스 처리를&lt;/em&gt; 찾으십시오.</target>
        </trans-unit>
        <trans-unit id="fc83d2854c412dfba1c7a58c1a436eb82eeace0a" translate="yes" xml:space="preserve">
          <source>MIT license -- free to use in commercial project</source>
          <target state="translated">MIT 라이센스-상업용 프로젝트에서 무료로 사용 가능</target>
        </trans-unit>
        <trans-unit id="4811b0a73bc69b5d9bc9915eb426b548fd412558" translate="yes" xml:space="preserve">
          <source>My answer from 2008 follows.</source>
          <target state="translated">2008 년의 나의 대답은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="263f343463a2ad34105afd3aaf81794ae30cc032" translate="yes" xml:space="preserve">
          <source>No flash or external CSS -- just one 5Kb Javascript file</source>
          <target state="translated">플래시 또는 외부 CSS 없음-단 하나의 5Kb Javascript 파일</target>
        </trans-unit>
        <trans-unit id="a6f0475a67750e40f11833df2968aaaa14e00c5a" translate="yes" xml:space="preserve">
          <source>No forms required, just provide an element that will serve as upload button</source>
          <target state="translated">양식이 필요하지 않으며 업로드 버튼 역할을 할 요소 만 제공하십시오.</target>
        </trans-unit>
        <trans-unit id="017b350f6d0aa9b4c2001b6238c78c88c5caee16" translate="yes" xml:space="preserve">
          <source>Note: This answer is outdated, it is now possible to upload files using XHR.</source>
          <target state="translated">참고 :이 답변은 구식이므로 이제 XHR을 사용하여 파일을 업로드 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="22e5e2f293b33c3c42e7c2fdbaabd1bc2eb07a79" translate="yes" xml:space="preserve">
          <source>Now create action method in your controller:</source>
          <target state="translated">이제 컨트롤러에서 액션 메소드를 생성하십시오 :</target>
        </trans-unit>
        <trans-unit id="521344f2ab4397105ce0ad0abbf28260488378ea" translate="yes" xml:space="preserve">
          <source>Now the &lt;code&gt;$.ajax()&lt;/code&gt; submit with the button's click:</source>
          <target state="translated">이제 &lt;code&gt;$.ajax()&lt;/code&gt; 버튼을 클릭하여 제출하십시오.</target>
        </trans-unit>
        <trans-unit id="8a7b05d8fe86621706c0e9d929d76eb67f588358" translate="yes" xml:space="preserve">
          <source>Optional, built-in support for fully cross-browser progress bars (using PHP's APC extension)</source>
          <target state="translated">브라우저 간 진행률 표시 줄을 완전히 지원하는 선택적 내장 지원 (PHP의 APC 확장 사용)</target>
        </trans-unit>
        <trans-unit id="eec22d0597e79c57029dbf0e40cac08a34fe9f8d" translate="yes" xml:space="preserve">
          <source>Or use a Java/Flash solution. They're a lot more flexible in what they can do with their posts...</source>
          <target state="translated">또는 Java / Flash 솔루션을 사용하십시오. 그들은 게시물로 할 수있는 일에 훨씬 더 유연합니다 ...</target>
        </trans-unit>
        <trans-unit id="ab2e26dd8b8868a3969cb3321e0c983c0d9d67d4" translate="yes" xml:space="preserve">
          <source>Plugins</source>
          <target state="translated">Plugins</target>
        </trans-unit>
        <trans-unit id="809b23f2cc0d5742ade51cff49b3030c9cad052d" translate="yes" xml:space="preserve">
          <source>Sample from the link</source>
          <target state="translated">링크 샘플</target>
        </trans-unit>
        <trans-unit id="bb050ee73b97973e82f48d001e0f99d9eb46e0a6" translate="yes" xml:space="preserve">
          <source>Sample: If you use jQuery, you can do easy to an upload file. This is a small and strong jQuery plugin, &lt;a href=&quot;http://jquery.malsup.com/form/&quot;&gt;http://jquery.malsup.com/form/&lt;/a&gt;.</source>
          <target state="translated">샘플 : jQuery를 사용하면 파일을 쉽게 업로드 할 수 있습니다. 작고 강력한 jQuery 플러그인 인 &lt;a href=&quot;http://jquery.malsup.com/form/&quot;&gt;http://jquery.malsup.com/form/&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="be7779a7a4baa3021e7af15e69c50f6dc680085d" translate="yes" xml:space="preserve">
          <source>Simple Ajax Uploader is another option:</source>
          <target state="translated">Simple Ajax Uploader는 또 다른 옵션입니다.</target>
        </trans-unit>
        <trans-unit id="919d3c5f734aa4adc982838364ec08831e2fee5f" translate="yes" xml:space="preserve">
          <source>Supports multiple, concurrent uploads -- even in non-HTML5 browsers</source>
          <target state="translated">HTML5가 아닌 브라우저에서도 여러 개의 동시 업로드 지원</target>
        </trans-unit>
        <trans-unit id="12b45d20e27141bcc96bbba17495a24d835f9ab4" translate="yes" xml:space="preserve">
          <source>Syntax for creating an XMLHttpRequest object:</source>
          <target state="translated">XMLHttpRequest 객체를 생성하기위한 구문 :</target>
        </trans-unit>
        <trans-unit id="3412a9c6235ff5b37ad48cb45f00cdc34d3ee732" translate="yes" xml:space="preserve">
          <source>That is if you don't want to use a plugin, JavaScript or any other forms of &quot;magic&quot; other than HTML.  Of course you can combine this with JavaScript or what have you...</source>
          <target state="translated">플러그인, JavaScript 또는 HTML 이외의 다른 형태의 &quot;마법&quot;을 사용하지 않으려는 경우입니다. 물론 이것을 JavaScript와 결합하거나 무엇을 가질 수 있습니까?</target>
        </trans-unit>
        <trans-unit id="4230320763beb5352ba3a4092a6778c357563688" translate="yes" xml:space="preserve">
          <source>That's where the jQuery-form plugin comes into play.</source>
          <target state="translated">그것이 jQuery 양식 플러그인이 등장하는 곳입니다.</target>
        </trans-unit>
        <trans-unit id="6eae58e88c8d2921c3b26025cdc6b58ddb238109" translate="yes" xml:space="preserve">
          <source>The HTML:</source>
          <target state="translated">HTML :</target>
        </trans-unit>
        <trans-unit id="390638562e82dba24d94b5de3f5c0308c84c1a74" translate="yes" xml:space="preserve">
          <source>The challenge is in getting AJAX upload working as the standard &lt;code&gt;remote_form_for&lt;/code&gt; doesn't understand multi-part form submission. It's not going to send the file data Rails seeks back with the AJAX request.</source>
          <target state="translated">문제는 AJAX 업로드를 표준 &lt;code&gt;remote_form_for&lt;/code&gt; 가 다중 파트 양식 제출을 이해하지 못하도록하는 것입니다. Rails가 AJAX 요청으로 다시 검색하는 파일 데이터를 보내지 않을 것입니다.</target>
        </trans-unit>
        <trans-unit id="49b114f26640a12f59f60f3e14211093199ff7a0" translate="yes" xml:space="preserve">
          <source>The data being submitted is a formdata. On your jQuery, use a form submit function instead of a button click to submit the form file as shown below.</source>
          <target state="translated">제출되는 데이터는 formdata입니다. jQuery에서 아래 표시된 것처럼 단추 클릭 대신 양식 제출 기능을 사용하여 양식 파일을 제출하십시오.</target>
        </trans-unit>
        <trans-unit id="d8cd78f2a0041bf4679790dab499d0a49ef37189" translate="yes" xml:space="preserve">
          <source>The examples on W3Schools all open XML files located on the W3Schools
  domain.</source>
          <target state="translated">W3Schools의 예제는 W3Schools 도메인에있는 모든 열린 XML 파일입니다.</target>
        </trans-unit>
        <trans-unit id="e7f43609a80f2f2b73d736b04a118418a0bd20fb" translate="yes" xml:space="preserve">
          <source>The important take-away from this &amp;mdash;whatever the feature&amp;mdash; is, &lt;strong&gt;check what browser &lt;em&gt;your&lt;/em&gt; users use&lt;/strong&gt;. If you don't, you'll learn a quick and painful lesson in why &quot;works for me&quot; isn't good enough in a deliverable to a client. &lt;a href=&quot;https://caniuse.com/&quot;&gt;caniuse&lt;/a&gt; is a useful tool but note where they get their demographics from. They may not align with yours. This is never truer than enterprise environments.</source>
          <target state="translated">이 기능에서 중요한 것은 기능이 &lt;strong&gt;무엇이든 사용자가 사용하는 브라우저를 확인하는 것&lt;/strong&gt; 입니다. 그렇지 않은 경우 고객에게 제공 할 수있는 &quot;나를 위해 일하기&quot;가 충분하지 않은 이유에 대한 빠르고 고통스러운 교훈을 배우게됩니다. &lt;a href=&quot;https://caniuse.com/&quot;&gt;caniuse&lt;/a&gt; 는 유용한 도구이지만 인구 통계를 어디서 얻었는지 기록해 둡니다 . 그들은 당신과 일치하지 않을 수 있습니다. 이것은 기업 환경보다 결코 사실이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="a125f59057273a8af67729f1f45a25b2762c1dc4" translate="yes" xml:space="preserve">
          <source>The only solution that I found works for Chrome was to use a cookie.</source>
          <target state="translated">Chrome에서 작동하는 유일한 해결책은 쿠키를 사용하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="5812fbdfc0bc3b9c120d769fa65d55c658f0660c" translate="yes" xml:space="preserve">
          <source>The plugin will see the cookie, and then trigger the &lt;code&gt;onComplete&lt;/code&gt; callback.</source>
          <target state="translated">플러그인은 쿠키를보고 &lt;code&gt;onComplete&lt;/code&gt; 콜백을 트리거합니다.</target>
        </trans-unit>
        <trans-unit id="98e8c7e0d95591c874a7b0b8bd5207b67ce58ed0" translate="yes" xml:space="preserve">
          <source>The same basic principal applies to uploading, as well.</source>
          <target state="translated">업로드에도 동일한 기본 원칙이 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="b6fbb25c068582f33f40efe3e9f35544937e8142" translate="yes" xml:space="preserve">
          <source>The server side language is C# but you can do some modification for making it work with other language like PHP.</source>
          <target state="translated">서버 측 언어는 C #이지만 PHP와 같은 다른 언어와 작동하도록 약간의 수정을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0cdcd101c4de354f1f65a932ad520fdd765bde2f" translate="yes" xml:space="preserve">
          <source>The simplest and most robust way I have done this in the past, is to simply target a hidden iFrame tag with your form - then it will submit within the iframe without reloading the page.</source>
          <target state="translated">과거에 내가 한 가장 간단하고 강력한 방법은 양식으로 숨겨진 iFrame 태그를 타겟팅하는 것입니다. 그러면 페이지를 다시로드하지 않고 iframe 내에서 제출합니다.</target>
        </trans-unit>
        <trans-unit id="1c7fc2372a83049e8d4d379a6511258fca4454c5" translate="yes" xml:space="preserve">
          <source>Then to retrieve:</source>
          <target state="translated">그런 다음 검색하십시오.</target>
        </trans-unit>
        <trans-unit id="65d3b355e07f3eb773497ea1ab4c340a4c84c77e" translate="yes" xml:space="preserve">
          <source>This &lt;a href=&quot;https://github.com/jfeldstein/jQuery.AjaxFileUpload.js&quot;&gt;AJAX file upload jQuery plugin&lt;/a&gt; uploads the file somehwere, and passes the
response to a callback, nothing else.</source>
          <target state="translated">이 &lt;a href=&quot;https://github.com/jfeldstein/jQuery.AjaxFileUpload.js&quot;&gt;AJAX 파일 업로드 jQuery 플러그인&lt;/a&gt; 은 파일을 일부 업로드하고 콜백에 응답을 전달합니다.</target>
        </trans-unit>
        <trans-unit id="cf8b6bd07fc1b5f1d621c20a6d94f15cc5f34d2e" translate="yes" xml:space="preserve">
          <source>This is my solution.</source>
          <target state="translated">이것이 나의 해결책이다.</target>
        </trans-unit>
        <trans-unit id="4531ce2d24bfc01f63faa9a897c9a543cf017e24" translate="yes" xml:space="preserve">
          <source>This means that both the web page and the XML file it tries to load,
  must be located on the same server.</source>
          <target state="translated">즉,로드하려는 웹 페이지와 XML 파일이 모두 동일한 서버에 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="bf51ae97ae357e25e1f45fa314ff335778a6f8ba" translate="yes" xml:space="preserve">
          <source>To do that basically when the upload/download is started:</source>
          <target state="translated">기본적으로 업로드 / 다운로드가 시작될 때이를 수행하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="ddc232fdf5f4506b591f568ec582361ce9acaaf8" translate="yes" xml:space="preserve">
          <source>To upload file asynchronously with Jquery use below steps:</source>
          <target state="translated">Jquery를 사용하여 파일을 비동기 적으로 업로드하려면 다음 단계를 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="edc229fa8c3ae5b5f37117272d4039d0fd8d1de2" translate="yes" xml:space="preserve">
          <source>To use the downloader  ( include the JS, obviously )</source>
          <target state="translated">다운로더를 사용하려면 (분명히 JS 포함)</target>
        </trans-unit>
        <trans-unit id="986d7ad933b97fd6b787c296e4f88ce2795fa8b1" translate="yes" xml:space="preserve">
          <source>Using &lt;strong&gt;HTML5&lt;/strong&gt; and &lt;strong&gt;JavaScript&lt;/strong&gt;, uploading async is quite easy, I create the uploading logic along with your html, this is not fully working as it needs the api, but demonstrate how it works, if you have the endpoint called &lt;code&gt;/upload&lt;/code&gt; from root of your website, this code should work for you:</source>
          <target state="translated">&lt;strong&gt;HTML5&lt;/strong&gt; 및 &lt;strong&gt;JavaScript를&lt;/strong&gt; 사용하면 비동기 업로드가 매우 쉽습니다 .html과 함께 업로드 논리를 만듭니다.이 API가 필요하므로 완전히 작동하지 않지만 작동 방식을 보여줍니다. 웹 사이트 에서이 코드는 다음과 같이 작동합니다.</target>
        </trans-unit>
        <trans-unit id="c595835322d5931bd41f02e6a0fd61fc10b56862" translate="yes" xml:space="preserve">
          <source>Using a cookie for this is ugly but it works.</source>
          <target state="translated">이것을 위해 쿠키를 사용하는 것은 추악하지만 작동합니다.</target>
        </trans-unit>
        <trans-unit id="aa06e8203208b8dc6d008e57140df517695d5513" translate="yes" xml:space="preserve">
          <source>Using simple &lt;strong&gt;Javascripts&lt;/strong&gt; and &lt;strong&gt;AJAX&lt;/strong&gt; (with progress-bar)</source>
          <target state="translated">간단한 &lt;strong&gt;자바 스크립트&lt;/strong&gt; 및 &lt;strong&gt;AJAX 사용&lt;/strong&gt; (진행률 표시 줄 포함)</target>
        </trans-unit>
        <trans-unit id="67eb426c9991bc55d107aac3bceffab46f10b33d" translate="yes" xml:space="preserve">
          <source>View more details</source>
          <target state="translated">자세한 내용보기</target>
        </trans-unit>
        <trans-unit id="16e0ed787a50984c4ec9211a30c898d021065472" translate="yes" xml:space="preserve">
          <source>When HTML5 isn't supported (no &lt;em&gt;File API&lt;/em&gt;) the only other pure JavaScript solution (no &lt;em&gt;Flash&lt;/em&gt; or any other browser plugin) is the &lt;strong&gt;hidden iframe&lt;/strong&gt; technique, which allows to emulate an asynchronous request without using the &lt;em&gt;XMLHttpRequest&lt;/em&gt; object.</source>
          <target state="translated">HTML5가 지원되지 않는 경우 ( &lt;em&gt;File API&lt;/em&gt; 는 아님) 유일한 다른 순수 JavaScript 솔루션 ( &lt;em&gt;Flash&lt;/em&gt; 또는 다른 브라우저 플러그인은 없음)은 &lt;strong&gt;숨겨진 iframe&lt;/strong&gt; 기술로 &lt;em&gt;XMLHttpRequest&lt;/em&gt; 객체를 사용하지 않고 비동기식 요청을 에뮬레이션 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e03b6ec90b69aaea312ae2454fe4fff39afb0b8e" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;http://en.wikipedia.org/wiki/HTML5&quot;&gt;HTML5&lt;/a&gt; you can make file uploads with Ajax and jQuery. Not only that, you can do file validations (name, size, and MIME type) or handle the progress event with the HTML5 progress tag (or a div). Recently I had to make a file uploader, but I didn't want to use &lt;a href=&quot;http://en.wikipedia.org/wiki/Adobe_Flash&quot;&gt;Flash&lt;/a&gt; nor Iframes or plugins and after some research I came up with the solution.</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/HTML5&quot;&gt;HTML5&lt;/a&gt; 를 사용하면 Ajax 및 jQuery로 파일을 업로드 할 수 있습니다. 뿐만 아니라 파일 유효성 검사 (이름, 크기 및 MIME 유형)를 수행하거나 HTML5 progress 태그 (또는 div)를 사용하여 progress 이벤트를 처리 할 수 ​​있습니다. 최근에 파일 업 로더를 만들어야했지만 &lt;a href=&quot;http://en.wikipedia.org/wiki/Adobe_Flash&quot;&gt;Flash&lt;/a&gt; 나 Iframe 또는 플러그인을 사용하고 싶지 않았으며 조사 후 해결책을 찾았습니다.</target>
        </trans-unit>
        <trans-unit id="5a1c56819ef92f5425d7e71d292f57e6885c684f" translate="yes" xml:space="preserve">
          <source>With HTML5</source>
          <target state="translated">HTML5로</target>
        </trans-unit>
        <trans-unit id="df1ff37ebde5a9239d88fe64c0df188251ffbfbd" translate="yes" xml:space="preserve">
          <source>Wrapping up for future readers.</source>
          <target state="translated">미래 독자들을위한 마무리.</target>
        </trans-unit>
        <trans-unit id="758c334d85c5cd56d8d6ecf8d17938157933679d" translate="yes" xml:space="preserve">
          <source>You can also read the contents of the iframe &lt;code&gt;onLoad&lt;/code&gt; for server errors or success responses and then output that to user.</source>
          <target state="translated">서버 오류 또는 성공 응답에 대한 iframe &lt;code&gt;onLoad&lt;/code&gt; 의 내용을 읽은 다음 사용자에게 출력 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="c9857486cc5286e83b21cca8bd7d4b59265fda80" translate="yes" xml:space="preserve">
          <source>You can also send files &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Submitting_forms_and_uploading_files&quot;&gt;without FormData&lt;/a&gt; but either way the File API must be present to process files in such a way that they can be sent with &lt;em&gt;XMLHttpRequest&lt;/em&gt; (Ajax).</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Submitting_forms_and_uploading_files&quot;&gt;FormData없이&lt;/a&gt; 파일 을 보낼 수도 있지만 파일을 &lt;em&gt;XMLHttpRequest&lt;/em&gt; (Ajax)와 함께 보낼 수있는 방식으로 파일을 처리하기 위해 File API가 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="3a669263981f837bea72ddda769e1d84e6727ed2" translate="yes" xml:space="preserve">
          <source>You can do it in vanilla JavaScript pretty easily. Here's a snippet from my current project:</source>
          <target state="translated">바닐라 JavaScript로 쉽게 할 수 있습니다. 다음은 현재 프로젝트의 스 니펫입니다.</target>
        </trans-unit>
        <trans-unit id="3bca08384e231b9c523f0e4421f1874520b48ca0" translate="yes" xml:space="preserve">
          <source>You can do the Asynchronous Multiple File uploads using JavaScript or jQuery and that to without using any plugin. You can also show the real time progress of file upload in the progress control. I have come across 2 nice links -</source>
          <target state="translated">JavaScript 또는 jQuery를 사용하여 비동기 다중 파일 업로드를 수행 할 수 있으며 플러그인을 사용하지 않고도 수행 할 수 있습니다. 진행률 제어에서 파일 업로드의 실시간 진행률을 표시 할 수도 있습니다. 나는 2 개의 멋진 링크를 보았습니다.</target>
        </trans-unit>
        <trans-unit id="3492ddbc79dbdffa0d865d65652219b165d4b629" translate="yes" xml:space="preserve">
          <source>You can pass additional parameters along with file name on making asynchronous upload using XMLHttpRequest (without flash and iframe dependency). Append the additional parameter value with FormData and send the upload request.</source>
          <target state="translated">XMLHttpRequest (플래시 및 iframe 종속성없이)를 사용하여 비동기 업로드를 수행 할 때 파일 이름과 함께 추가 매개 변수를 전달할 수 있습니다. FormData로 추가 매개 변수 값을 추가하고 업로드 요청을 보냅니다.</target>
        </trans-unit>
        <trans-unit id="d371428babf6e03ccb0a2d00352c4f4c8aeb4a3d" translate="yes" xml:space="preserve">
          <source>You can see a solved solution with a working demo &lt;a href=&quot;http://whats-online.info/science-and-tutorials/30/select-preview-rename-and-upload-image-using-jquery-Ajax/&quot;&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt; that allows you to preview and submit form files to the server. For your case, you need to use &lt;a href=&quot;http://en.wikipedia.org/wiki/Ajax_%28programming%29&quot;&gt;Ajax&lt;/a&gt; to facilitate the file upload to the server:</source>
          <target state="translated">양식 파일을 미리보고 서버에 제출할 수있는 실무 데모를 통해 해결 된 솔루션을 확인할 수 있습니다. 귀하의 경우 서버에 파일을 쉽게 업로드하려면 &lt;a href=&quot;http://en.wikipedia.org/wiki/Ajax_%28programming%29&quot;&gt;Ajax&lt;/a&gt; 를 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="bffefe47049362c07c11d3a1fec5b8496efa53d1" translate="yes" xml:space="preserve">
          <source>You can upload files &lt;strong&gt;with jQuery&lt;/strong&gt; using the &lt;code&gt;$.ajax()&lt;/code&gt; method if &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/Using_FormData_Objects&quot;&gt;FormData&lt;/a&gt; and the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Using_files_from_web_applications&quot;&gt;File API&lt;/a&gt; are supported (both HTML5 features).</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/Using_FormData_Objects&quot;&gt;FormData&lt;/a&gt; 및 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Using_files_from_web_applications&quot;&gt;File API&lt;/a&gt; 가 지원되는 경우 (HTML5 기능 모두 &lt;code&gt;$.ajax()&lt;/code&gt; 메소드를 사용하여 &lt;strong&gt;jQuery로&lt;/strong&gt; 파일 &lt;strong&gt;을&lt;/strong&gt; 업로드 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c15f754d5d6223b7ec469a1b4eb84b3da5e58719" translate="yes" xml:space="preserve">
          <source>You can upload simply with jQuery &lt;code&gt;.ajax()&lt;/code&gt;.</source>
          <target state="translated">jQuery &lt;code&gt;.ajax()&lt;/code&gt; 간단하게 업로드 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3c94090f45521fa505560d818d146d87684fe4b4" translate="yes" xml:space="preserve">
          <source>You can use</source>
          <target state="translated">당신이 사용할 수있는</target>
        </trans-unit>
        <trans-unit id="7df9b6e4a487605a23092ab6190f8850bb66f166" translate="yes" xml:space="preserve">
          <source>You can use &lt;strong&gt;newer&lt;/strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch&quot;&gt;Fetch API&lt;/a&gt; by JavaScript. Like this:</source>
          <target state="translated">JavaScript로 &lt;strong&gt;최신&lt;/strong&gt; &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch&quot;&gt;Fetch API&lt;/a&gt; 를 사용할 수 있습니다. 이처럼 :</target>
        </trans-unit>
        <trans-unit id="e86e0df84288d21d27d3708cff031be7dff10cd4" translate="yes" xml:space="preserve">
          <source>You can use form data to post all your values including images.</source>
          <target state="translated">양식 데이터를 사용하여 이미지를 포함한 모든 값을 게시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d7a176b05840ed78be2f460c5adf701b4447fb9f" translate="yes" xml:space="preserve">
          <source>You cannot upload files using &lt;a href=&quot;http://en.wikipedia.org/wiki/XMLHttpRequest&quot;&gt;XMLHttpRequest&lt;/a&gt; (Ajax). You can simulate the effect using an iframe or Flash. The excellent &lt;a href=&quot;http://malsup.com/jquery/form/&quot;&gt;jQuery Form Plugin&lt;/a&gt; that posts your files through an iframe to get the effect.</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/XMLHttpRequest&quot;&gt;XMLHttpRequest&lt;/a&gt; (Ajax)를 사용하여 파일을 업로드 할 수 없습니다. iframe 또는 Flash를 사용하여 효과를 시뮬레이션 할 수 있습니다. 효과를 얻기 위해 iframe을 통해 파일을 게시하는 우수한 &lt;a href=&quot;http://malsup.com/jquery/form/&quot;&gt;jQuery Form Plugin&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="6a4afc416fe9e0f6b4c5767861f1f62cfad74985" translate="yes" xml:space="preserve">
          <source>You could also consider using something like &lt;a href=&quot;https://uppy.io&quot;&gt;https://uppy.io&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://uppy.io&quot;&gt;https://uppy.io&lt;/a&gt; 와 같은 것을 사용할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="3e1039ae78b67c69d546e3905a6f44ea9e2fc812" translate="yes" xml:space="preserve">
          <source>[Client Side] Interval sees the cookie and uses it like the onLoad event.  For example you can start a UI blocker and then onLoad ( or when cookie is made )  you remove the UI blocker.</source>
          <target state="translated">[클라이언트 측] 간격은 쿠키를보고 onLoad 이벤트처럼 사용합니다. 예를 들어 UI 차단기를 시작한 다음 onLoad (또는 쿠키가 만들어 질 때) UI 차단기를 제거 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="814deaebb10db6821413d4652b86a99d86f25497" translate="yes" xml:space="preserve">
          <source>[Client Side] Start an interval to look for the existence of a cookie</source>
          <target state="translated">[클라이언트 측] 쿠키가 있는지 찾기위한 간격을 시작하십시오.</target>
        </trans-unit>
        <trans-unit id="a8217709aac017aeb4d34c53d1f3e9d9135af392" translate="yes" xml:space="preserve">
          <source>[Server Side] Do whatever you need to with the file data</source>
          <target state="translated">[서버 측] 파일 데이터로 필요한 작업을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="78d740e19d1ef7b0aa14bdd37f137cfe5e86410b" translate="yes" xml:space="preserve">
          <source>[Server Side] Set cookie for client side interval</source>
          <target state="translated">[서버 측] 클라이언트 측 간격을위한 쿠키 설정</target>
        </trans-unit>
        <trans-unit id="c7c112398701ddd6804b1d20d93e37e2b9ef50bc" translate="yes" xml:space="preserve">
          <source>and the js</source>
          <target state="translated">그리고 js</target>
        </trans-unit>
        <trans-unit id="da4fe6d463e704e846c51de753a5380b7df066a4" translate="yes" xml:space="preserve">
          <source>hostingEnvironment variable is of type IHostingEnvironment which can be injected to the controller using dependency injection, like:</source>
          <target state="translated">호스팅 환경 변수는 IHostingEnvironment 유형이며 다음과 같이 종속성 주입을 사용하여 컨트롤러에 주입 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="33d6bffa4a3d4423b7febcb3bbd1be0ba811cf44" translate="yes" xml:space="preserve">
          <source>jQuery &lt;a href=&quot;http://www.uploadify.com/download/&quot;&gt;Uploadify&lt;/a&gt; is another good plugin which I have used before to upload files. The JavaScript code is as simple as the following: code. However, the new version does not work in Internet&amp;nbsp;Explorer.</source>
          <target state="translated">jQuery &lt;a href=&quot;http://www.uploadify.com/download/&quot;&gt;Uploadify&lt;/a&gt; 는 파일을 업로드하기 전에 사용했던 또 다른 좋은 플러그인입니다. JavaScript 코드는 코드만큼 간단합니다. 그러나 새 버전은 Internet Explorer에서 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="29a3ad536e11dc259f0c6bbe59ce601bd99ff89c" translate="yes" xml:space="preserve">
          <source>jquery.fileupload.js</source>
          <target state="translated">jquery.fileupload.js</target>
        </trans-unit>
        <trans-unit id="0f913f3272a84b9673f477976776e2cfb85e54f7" translate="yes" xml:space="preserve">
          <source>jquery.iframe-transport.js</source>
          <target state="translated">jquery.iframe-transport.js</target>
        </trans-unit>
        <trans-unit id="d880eeee0bc5308e41c8be5beb047a21c90ac8cb" translate="yes" xml:space="preserve">
          <source>jquery.ui.widget.js</source>
          <target state="translated">jquery.ui.widget.js</target>
        </trans-unit>
        <trans-unit id="f0b426739dc5921e29e22f64ffeb8158a0b89cb7" translate="yes" xml:space="preserve">
          <source>variable = new XMLHttpRequest();</source>
          <target state="translated">변수 = 새로운 XMLHttpRequest ();</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
