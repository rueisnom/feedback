<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/166221">
    <body>
      <group id="166221">
        <trans-unit id="bde1bb6bdfc4ce6d648eddba8fecf1f35e5a4599" translate="yes" xml:space="preserve">
          <source>-- Use as little as --</source>
          <target state="translated">----尽量少用 --</target>
        </trans-unit>
        <trans-unit id="191f36cefd639ecd80c2171565d0def830f358af" translate="yes" xml:space="preserve">
          <source>-- or as much as --</source>
          <target state="translated">----或多达 ----</target>
        </trans-unit>
        <trans-unit id="321ae22f35c07216907e385c988025d44d8ac2ad" translate="yes" xml:space="preserve">
          <source>2019 Update: It &lt;em&gt;still&lt;/em&gt; depends on the browsers &lt;em&gt;your&lt;/em&gt; demographic uses.</source>
          <target state="translated">2019更新：它&lt;em&gt;仍然&lt;/em&gt;取决于&lt;em&gt;您的&lt;/em&gt;人口统计使用的浏览器。</target>
        </trans-unit>
        <trans-unit id="2e56ec18d7e62ff92bcd4bd2b8d829a71cca462d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;//github.com/matiasgagliano/bifrost&quot;&gt;Bifr&amp;ouml;st&lt;/a&gt; is just a small wrapper that adds fallback support to jQuery's ajax method, but many of the aforementioned plugins like &lt;a href=&quot;//malsup.com/jquery/form/&quot;&gt;jQuery Form Plugin&lt;/a&gt; or &lt;a href=&quot;//github.com/blueimp/jQuery-File-Upload&quot;&gt;jQuery File Upload&lt;/a&gt; include the whole stack from HTML5 to different fallbacks and some useful features to ease out the process. Depending on your needs and requirements you might want to consider a bare implementation or either of this plugins.</source>
          <target state="translated">&lt;a href=&quot;//github.com/matiasgagliano/bifrost&quot;&gt;Bifr&amp;ouml;st&lt;/a&gt;只是一个小的包装，它为jQuery的ajax方法添加了后备支持，但是许多上述插件，例如&lt;a href=&quot;//malsup.com/jquery/form/&quot;&gt;jQuery Form Plugin&lt;/a&gt;或&lt;a href=&quot;//github.com/blueimp/jQuery-File-Upload&quot;&gt;jQuery File Upload，都&lt;/a&gt;包括从HTML5到不同后备的整个堆栈，以及一些简化该过程的有用功能。 根据您的需求和要求，您可能需要考虑一个简单的实现或两个插件之一。</target>
        </trans-unit>
        <trans-unit id="c4e04f28630d3612238d3f2f91c0924b1e021f0a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.williambharding.com/blog/rails/rails-ajax-image-uploading-made-simple-with-jquery/&quot;&gt;I've written this up in a Rails environment&lt;/a&gt;.  It's only about five lines of JavaScript, if you use the lightweight jQuery-form plugin.</source>
          <target state="translated">&lt;a href=&quot;http://www.williambharding.com/blog/rails/rails-ajax-image-uploading-made-simple-with-jquery/&quot;&gt;我已经在Rails环境中编写了此代码&lt;/a&gt; 。 如果您使用轻量级的jQuery-form插件，则仅包含五行JavaScript。</target>
        </trans-unit>
        <trans-unit id="a080e25de8093d3cadbce3a0b96ea7b03a96e991" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;-note- you only need to keep reading if you are interested in how to setup a UI blocker when doing uploading/downloading&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;-注意-如果您对上载/下载时如何设置UI阻止程序感兴趣，则只需要继续阅读&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1fd35578d942edc9cb657126c44ba09a40438f67" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Access Across Domains&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;跨域访问&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8a5cffabbdeeff043700b5dfeb1cb6b2216a4e97" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Advantage:&lt;/strong&gt; Fetch API is &lt;strong&gt;natively supported&lt;/strong&gt; by all modern browsers, so you don't have to import anything. Also, note that fetch() returns a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise&lt;/a&gt; which is then handled by using &lt;code&gt;.then(..code to handle response..)&lt;/code&gt; asynchronously.</source>
          <target state="translated">&lt;strong&gt;优点：&lt;/strong&gt;所有现代浏览器都原生&lt;strong&gt;支持&lt;/strong&gt; Fetch API，因此您无需导入任何内容。 另外，请注意fetch（）返回一个&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise&lt;/a&gt; ，然后通过使用 &lt;code&gt;.then(..code to handle response..)&lt;/code&gt; 异步处理响应..）进行处理 。</target>
        </trans-unit>
        <trans-unit id="88869f5dcc5e648c77bb81bf1b6aa9e29fe1a968" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Chrome, iFrames, and onLoad&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Chrome，iFrame和onLoad&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="340f495f32cb36a45623f626af8a65af6739387a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Create an XMLHttpRequest Object&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;创建一个XMLHttpRequest对象&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fc93c4a4bc534bbd891d3cc25bc8f573f9a911c9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;File Upload ASP.NET Core MVC:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;文件上传ASP.NET Core MVC：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a40279dd4c1bd5f957300a46831c4dcf38bb63c4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;HTML part&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;HTML部分&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1ed559f58d1012098e76aa02f5987633940fcf2d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;HTML&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;HTML&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ff581c0a160c88e74d2a6f9860227f014946483f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Here's the EXAMPLE application&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;这是示例应用程序&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="62badaaf4753ecb6b40f104d53c1d15b8e0102aa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;I hope it would be helpful&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;我希望这会有所帮助&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="50f60c68344fc3d3c15ad60b7566259c67185caf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JAVASCRIPT&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;JAVASCRIPT&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="34c4a0e1b97eacf196df7509404f04c72f7d500a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JS part&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;JS部分&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="79e70e3362d4cf26bc4e399f24131a18fcddb9a1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;PHP part&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;PHP部分&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c0ea0dc97baa1d4c675361104fa844e8cea6bf02" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;PHP&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;PHP&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7b4b994b4e199273b339fd6a6bbf81718148df85" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The XMLHttpRequest Object&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;XMLHttpRequest对象&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5217b738c3143d4d2b55934df2f4161c3aa15f61" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;step 1&lt;/strong&gt; In your project open Nuget manager and add package (jquery fileupload(only you need to write it in search box it will come up and install it.))
URL: &lt;a href=&quot;https://github.com/blueimp/jQuery-File-Upload&quot;&gt;https://github.com/blueimp/jQuery-File-Upload&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;步骤1&lt;/strong&gt;在您的项目中，打开Nuget管理器并添加包（jquery fileupload（仅需要在搜索框中编写它，它就会出现并安装它。））URL： &lt;a href=&quot;https://github.com/blueimp/jQuery-File-Upload&quot;&gt;https&lt;/a&gt; : //github.com/blueimp/jQuery-File-上载</target>
        </trans-unit>
        <trans-unit id="abee2b907144afea1b70b16731b2b300ede57ac5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;step 2&lt;/strong&gt; Add below scripts in the HTML files, which are already added to the project by running above package:</source>
          <target state="translated">&lt;strong&gt;步骤2&lt;/strong&gt;在HTML文件中添加以下脚本，这些脚本已通过运行上述包而添加到项目中：</target>
        </trans-unit>
        <trans-unit id="1d5e08389ed908e9e6ca001e26548376cf8a13bf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;step 3&lt;/strong&gt;  Write file upload control as per below code:</source>
          <target state="translated">&lt;strong&gt;步骤3&lt;/strong&gt;按照以下代码编写文件上传控件：</target>
        </trans-unit>
        <trans-unit id="b0684d91ae0c646a55715a9c025968c3974dff9d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;step 4&lt;/strong&gt;  write a js method as uploadFile as below:</source>
          <target state="translated">&lt;strong&gt;步骤4&lt;/strong&gt;将js方法编写为uploadFile，如下所示：</target>
        </trans-unit>
        <trans-unit id="ed5df500f19bb6a07ba65da44693d249ac76bf3b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;step 5&lt;/strong&gt; In ready function call element file upload to initiate the process as per below:</source>
          <target state="translated">&lt;strong&gt;步骤5&lt;/strong&gt;在就绪函数调用元素文件上传中，按照以下&lt;strong&gt;步骤&lt;/strong&gt;启动过程：</target>
        </trans-unit>
        <trans-unit id="5c729b6d1ce5a11776346ee8a8764df6b0e0a9a7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;step 6&lt;/strong&gt; Write MVC controller and Action as per below:</source>
          <target state="translated">&lt;strong&gt;步骤6&lt;/strong&gt;按照以下&lt;strong&gt;步骤&lt;/strong&gt;编写MVC控制器和操作：</target>
        </trans-unit>
        <trans-unit id="d11d31fceb3683f3352ba6df7fb150d80d69fb47" translate="yes" xml:space="preserve">
          <source>A modern approach &lt;strong&gt;without Jquery&lt;/strong&gt; is to use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/FileList&quot;&gt;FileList&lt;/a&gt; object you get back from &lt;code&gt;&amp;lt;input type=&quot;file&quot;&amp;gt;&lt;/code&gt; when user selects a file(s) and then use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API&quot;&gt;Fetch&lt;/a&gt; to post the FileList wrapped around a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/FormData&quot;&gt;FormData&lt;/a&gt; object.</source>
          <target state="translated">&lt;strong&gt;没有Jquery&lt;/strong&gt;的现代方法是，当用户选择文件时，使用从 &lt;code&gt;&amp;lt;input type=&quot;file&quot;&amp;gt;&lt;/code&gt; 获取的&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/FileList&quot;&gt;FileList&lt;/a&gt;对象，然后使用&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API&quot;&gt;Fetch&lt;/a&gt;发布包裹在&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/FormData&quot;&gt;FormData&lt;/a&gt;对象周围的FileList。</target>
        </trans-unit>
        <trans-unit id="327a8ba0ed4f81315cde0bbe0dbbe18c1a2aa517" translate="yes" xml:space="preserve">
          <source>A solution I found was to have the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; target a hidden iFrame. The iFrame can then run JS to display to the user that it's complete (on page load).</source>
          <target state="translated">我发现的解决方案是将 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 目标设置为隐藏的iFrame。 然后，iFrame可以运行JS以向用户显示其已完成（页面加载时）。</target>
        </trans-unit>
        <trans-unit id="dd781a59c3d9928cba98ad84022ee83c741ed709" translate="yes" xml:space="preserve">
          <source>ASP.NET MVC based Multiple File Upload made in jQuery</source>
          <target state="translated">基于ASP.NET MVC的多文件上传,用jQuery制作的多文件上传</target>
        </trans-unit>
        <trans-unit id="cb3aa313c45e4f71a2e7758387f9e0f9d050666c" translate="yes" xml:space="preserve">
          <source>ASP.NET Web Forms based Mulitple File Upload Feature with Progress Bar</source>
          <target state="translated">基于ASP.NET Web表单的多文件上传功能,带进度条</target>
        </trans-unit>
        <trans-unit id="7ccb7a6f21c909df5fd4cb541526dcb7a5dd8c9c" translate="yes" xml:space="preserve">
          <source>All modern browsers (Chrome, Firefox,
  IE7+, Edge, Safari, Opera) have a built-in XMLHttpRequest object.</source>
          <target state="translated">所有现代浏览器(Chrome、Firefox、IE7+、Edge、Safari、Opera)都有一个内置的XMLHttpRequest对象。</target>
        </trans-unit>
        <trans-unit id="bf11d2224fc3d745059588a934da0acf78c6b5c8" translate="yes" xml:space="preserve">
          <source>All modern browsers support the XMLHttpRequest object.
  The XMLHttpRequest object can be used to exchange data with a web
  server behind the scenes. This means that it is possible to update
  parts of a web page, without reloading the whole page.</source>
          <target state="translated">所有现代浏览器都支持XMLHttpRequest对象。XMLHttpRequest对象可以用来在幕后与Web服务器交换数据。这意味着可以更新网页的部分内容,而无需重新加载整个页面。</target>
        </trans-unit>
        <trans-unit id="76de35634500342f6ed12f15742181f57da106d9" translate="yes" xml:space="preserve">
          <source>Also some further information about XMLHttpReques:</source>
          <target state="translated">还有一些关于XMLHttpReques的进一步信息。</target>
        </trans-unit>
        <trans-unit id="9b3816471bd27fdea3c09c75c6166f5f418925a5" translate="yes" xml:space="preserve">
          <source>Also, Syncfusion JavaScript UI file upload provides solution for this scenario simply using event argument. you can find documentation &lt;a href=&quot;https://ej2.syncfusion.com/documentation/uploader/how-to/#add-additional-data-on-upload&quot;&gt;here&lt;/a&gt; and further details about this control here enter link description &lt;a href=&quot;https://www.syncfusion.com/javascript-ui-controls/file-upload&quot;&gt;here&lt;/a&gt;</source>
          <target state="translated">此外，Syncfusion JavaScript UI文件上传仅使用事件参数即可为该方案提供解决方案。 您可以在&lt;a href=&quot;https://ej2.syncfusion.com/documentation/uploader/how-to/#add-additional-data-on-upload&quot;&gt;此处&lt;/a&gt;找到文档，并在此找到有关此控件的更多详细信息，在此处输入链接描述</target>
        </trans-unit>
        <trans-unit id="12c1e87c3ffe1cf00af7e0ab5667d19d6130afb5" translate="yes" xml:space="preserve">
          <source>An important thing to understand with the &quot;new&quot; HTML5 &lt;code&gt;file&lt;/code&gt; API is that it &lt;a href=&quot;http://caniuse.com/fileapi&quot;&gt;wasn't supported until IE&amp;nbsp;10&lt;/a&gt;. If the specific market you're aiming at has a higher-than-average propensity toward older versions of Windows, you might not have access to it.</source>
          <target state="translated">使用&amp;ldquo;新&amp;rdquo; HTML5 &lt;code&gt;file&lt;/code&gt; API时要了解的重要一点是， &lt;a href=&quot;http://caniuse.com/fileapi&quot;&gt;直到IE 10才支持&lt;/a&gt;它。 如果您瞄准的特定市场对较旧版本的Windows具有高于平均水平的倾向，则您可能无权使用它。</target>
        </trans-unit>
        <trans-unit id="0939693418a22cd5f714580377676338d7c4adcc" translate="yes" xml:space="preserve">
          <source>And here&amp;rsquo;s the Rails controller action, pretty vanilla:</source>
          <target state="translated">这是Rails控制器的动作，非常漂亮：</target>
        </trans-unit>
        <trans-unit id="bf20a417b00c7fcdca6922207cf8a95a9d2c7131" translate="yes" xml:space="preserve">
          <source>And on the server side, just before transferring the file data, create the cookie</source>
          <target state="translated">而在服务器端,就在传输文件数据之前,创建cookie</target>
        </trans-unit>
        <trans-unit id="6e3f19defed4ed1a717794d55274f1f5c7fb2f8a" translate="yes" xml:space="preserve">
          <source>As of 2017, about 5% of browsers are one of IE 6, 7, 8 or 9. If you head into a big corporation (e.g., this is a B2B tool, or something you're delivering for training) that number can skyrocket. In 2016, I dealt with a company using IE8 on over 60% of their machines.</source>
          <target state="translated">截至2017年,大约有5%的浏览器是IE 6、7、8或9中的一种。如果你进入一个大公司(例如,这是一个B2B工具,或者你为培训提供的东西),这个数字可能会飙升。在2016年,我曾与一家公司打过交道,他们60%以上的机器都在使用IE8。</target>
        </trans-unit>
        <trans-unit id="e58fbf58b4e2636023e44cabd72f9afa7b552d3a" translate="yes" xml:space="preserve">
          <source>As you can see, with HTML5 (and some research) file uploading not only becomes possible but super easy. Try it with &lt;a href=&quot;http://en.wikipedia.org/wiki/Google_Chrome&quot;&gt;Google Chrome&lt;/a&gt; as some of the HTML5 components of the examples aren't available in every browser.</source>
          <target state="translated">如您所见，借助HTML5（和一些研究），文件上传不仅成为可能，而且超级容易。 请尝试使用&lt;a href=&quot;http://en.wikipedia.org/wiki/Google_Chrome&quot;&gt;Google Chrome浏览器，&lt;/a&gt;因为示例的某些HTML5组件并非在所有浏览器中都可用。</target>
        </trans-unit>
        <trans-unit id="739b02e8340806bd763467024fad5fc825ffbdbd" translate="yes" xml:space="preserve">
          <source>Asynchronous File Upload</source>
          <target state="translated">异步文件上传</target>
        </trans-unit>
        <trans-unit id="f08ffb71aa4169fe87dcfe83fa18741fac6956d9" translate="yes" xml:space="preserve">
          <source>At the PHP level this will work as normal file upload. extra-data can be retrieved as &lt;code&gt;$_POST&lt;/code&gt; data.</source>
          <target state="translated">在PHP级别，它可以正常上传文件。 可以将多余的数据检索为 &lt;code&gt;$_POST&lt;/code&gt; 数据。</target>
        </trans-unit>
        <trans-unit id="e1fbeca40d7191954f4c8223d677668706fd65b2" translate="yes" xml:space="preserve">
          <source>Best part is you can send extra data such as ids &amp;amp; etc with the file when you use this script. I have mention it &lt;code&gt;extra-data&lt;/code&gt; as in the script.</source>
          <target state="translated">最好的部分是，使用此脚本时，您可以随文件发送额外的数据，例如ids等。 我已经提到了脚本中的 &lt;code&gt;extra-data&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="194e13da720a1f025685e5d677eba8a1aff3860a" translate="yes" xml:space="preserve">
          <source>CSS</source>
          <target state="translated">CSS</target>
        </trans-unit>
        <trans-unit id="a36a5ffa6e0dcfb64fac1b2b3d6fb176de9689de" translate="yes" xml:space="preserve">
          <source>Controller</source>
          <target state="translated">Controller</target>
        </trans-unit>
        <trans-unit id="f62f45b8d2d944a83b198140ebaa928cce8a9cdb" translate="yes" xml:space="preserve">
          <source>Convert file to base64 using |HTML5's &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/FileReader#readAsDataURL%28%29&quot;&gt;readAsDataURL()&lt;/a&gt; or &lt;a href=&quot;http://scotch.io/quick-tips/js/how-to-encode-and-decode-strings-with-base64-in-javascript&quot;&gt;some base64 encoder&lt;/a&gt;. 
&lt;a href=&quot;http://jsfiddle.net/eliseosoto/JHQnk/&quot;&gt;Fiddle here&lt;/a&gt;</source>
          <target state="translated">|使用HTML5的&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/FileReader#readAsDataURL%28%29&quot;&gt;readAsDataURL（）&lt;/a&gt;或&lt;a href=&quot;http://scotch.io/quick-tips/js/how-to-encode-and-decode-strings-with-base64-in-javascript&quot;&gt;某些base64编码器&lt;/a&gt;将文件转换为base64。 &lt;a href=&quot;http://jsfiddle.net/eliseosoto/JHQnk/&quot;&gt;在这里摆弄&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ad3031a58e14e8ab3356947a4d923efc5af9719e" translate="yes" xml:space="preserve">
          <source>Cross-browser -- works in IE7+, Firefox, Chrome, Safari, Opera</source>
          <target state="translated">跨浏览器----可在IE7+、Firefox、Chrome、Safari、Opera等浏览器中工作</target>
        </trans-unit>
        <trans-unit id="de6a2ac98a906778381a246e83009244d3e7bcb4" translate="yes" xml:space="preserve">
          <source>Currently Chrome doesn't trigger the onLoad event for the iframe when it's used to transfer files.  Firefox, IE, and Edge all fire the onload event for file transfers.</source>
          <target state="translated">目前,Chrome浏览器在使用iframe传输文件时,不会触发iframe的onLoad事件。Firefox、IE和Edge都会触发文件传输时的onload事件。</target>
        </trans-unit>
        <trans-unit id="e52c854d5631eec7468ba4727b4c77eb745f2965" translate="yes" xml:space="preserve">
          <source>Demo</source>
          <target state="translated">Demo</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="5ab7721397827b925456d2a147cb5704105a62a7" translate="yes" xml:space="preserve">
          <source>Example usage:</source>
          <target state="translated">用例:</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">扩展片段</target>
        </trans-unit>
        <trans-unit id="b32ef340ea4702fd5f41dbe4001671d76174ef71" translate="yes" xml:space="preserve">
          <source>Explanation</source>
          <target state="translated">Explanation</target>
        </trans-unit>
        <trans-unit id="b4a100ebc4c1820c605bd96d9dd279ff888640e2" translate="yes" xml:space="preserve">
          <source>Fallback</source>
          <target state="translated">Fallback</target>
        </trans-unit>
        <trans-unit id="2881c4db66bb51a107b08ba43533875b85f0f559" translate="yes" xml:space="preserve">
          <source>First, you can do some validation if you want. For example, in the &lt;code&gt;.on('change')&lt;/code&gt; event of the file:</source>
          <target state="translated">首先，您可以根据需要进行一些验证。 例如，在文件的 &lt;code&gt;.on('change')&lt;/code&gt; 事件中：</target>
        </trans-unit>
        <trans-unit id="d6c51e6336a45599aef34db8592c306091a1b29d" translate="yes" xml:space="preserve">
          <source>Flexible and highly customizable -- use any element as upload button, style your own progress indicators</source>
          <target state="translated">灵活和高度可定制----使用任何元素作为上传按钮,为自己的进度指示器设置风格。</target>
        </trans-unit>
        <trans-unit id="d418547c9d63224a7bbdce6df08c5ef4f28aba0a" translate="yes" xml:space="preserve">
          <source>For PHP, look for &lt;a href=&quot;https://developer.hyvor.com/php/image-upload-ajax-php-mysql&quot;&gt;https://developer.hyvor.com/php/image-upload-ajax-php-mysql&lt;/a&gt;</source>
          <target state="translated">对于PHP，请查找&lt;a href=&quot;https://developer.hyvor.com/php/image-upload-ajax-php-mysql&quot;&gt;https://developer.hyvor.com/php/image-upload-ajax-php-mysql&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="08ce5feea4874259e52cc43066f0431477b1c4e9" translate="yes" xml:space="preserve">
          <source>For a quick, pure JavaScript (&lt;strong&gt;no jQuery&lt;/strong&gt;) example see &quot;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/Using_FormData_Objects#Sending_files_using_a_FormData_object&quot;&gt;Sending files using a FormData object&lt;/a&gt;&quot;.</source>
          <target state="translated">有关快速的纯JavaScript（ &lt;strong&gt;无jQuery&lt;/strong&gt; ）示例，请参见&amp;ldquo; &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/Using_FormData_Objects#Sending_files_using_a_FormData_object&quot;&gt;使用FormData对象发送文件&lt;/a&gt; &amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="7afe5a982d1f2e8750c9e989e3d699a14855d178" translate="yes" xml:space="preserve">
          <source>For more details, you can continue reading &lt;a href=&quot;https://www.w3schools.com/js/js_ajax_http.asp&quot;&gt;here&lt;/a&gt;...</source>
          <target state="translated">有关更多详细信息，您可以&lt;a href=&quot;https://www.w3schools.com/js/js_ajax_http.asp&quot;&gt;在此处&lt;/a&gt;继续阅读...</target>
        </trans-unit>
        <trans-unit id="8af703a066b3eb71965852b4f11718bc51cf19b1" translate="yes" xml:space="preserve">
          <source>For security reasons, modern browsers do not
  allow access across domains.</source>
          <target state="translated">出于安全考虑,现代浏览器不允许跨域访问。</target>
        </trans-unit>
        <trans-unit id="9f738ce8457f291b18ee47e665e96baa84f38fcd" translate="yes" xml:space="preserve">
          <source>HTML</source>
          <target state="translated">HTML</target>
        </trans-unit>
        <trans-unit id="11dc542c0ffeed8b41bad901e2044f438e4ab0e5" translate="yes" xml:space="preserve">
          <source>HTML:</source>
          <target state="translated">HTML:</target>
        </trans-unit>
        <trans-unit id="8bf644df1d676a0a3e4b69aa8aee04684f2de2e8" translate="yes" xml:space="preserve">
          <source>Here you are not using a plugin and stuff. You can change the code as you want. You are not blindly coding here. This is the core functionality of any jQuery file upload. Actually Javascript.</source>
          <target state="translated">这里你不使用插件之类的东西。你可以按照你的要求修改代码。你在这里不是盲目的编码。这是任何jQuery文件上传的核心功能。其实Javascript。</target>
        </trans-unit>
        <trans-unit id="caf4b1cff302e045b3730574f02d74a6ef516095" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s the Rails code for it:</source>
          <target state="translated">这是它的Rails代码：</target>
        </trans-unit>
        <trans-unit id="3fc79829ba27d8c1c75995914c2cc497af893f75" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s the associated JavaScript:</source>
          <target state="translated">以下是相关的JavaScript：</target>
        </trans-unit>
        <trans-unit id="da114669a0537123c37e953285babee52306e476" translate="yes" xml:space="preserve">
          <source>Here's just another solution of how to upload file (&lt;strong&gt;without any plugin&lt;/strong&gt;)</source>
          <target state="translated">这只是如何上传文件的另一种解决方案（ &lt;strong&gt;没有任何插件&lt;/strong&gt; ）</target>
        </trans-unit>
        <trans-unit id="5990cd6351c2fe56d35d2afe5c25f991789b7174" translate="yes" xml:space="preserve">
          <source>How can I upload files asynchronously</source>
          <target state="translated">如何异步上传文件</target>
        </trans-unit>
        <trans-unit id="3c02ab2bda440d908a78f019a28279c099ab766a" translate="yes" xml:space="preserve">
          <source>However, there are viable non-JS methods of file uploads. You can create an iframe on the page (that you hide with CSS) and then target your form to post to that iframe. The main page doesn't need to move.</source>
          <target state="translated">然而,有一些可行的非JS文件上传方法。你可以在页面上创建一个iframe(你可以用CSS隐藏),然后将你的表单发布到那个iframe。主页面不需要移动。</target>
        </trans-unit>
        <trans-unit id="c176b5b32b0fffa253d395e9965f972693e29a3c" translate="yes" xml:space="preserve">
          <source>I have been using the below script to upload images which happens to work fine.</source>
          <target state="translated">我一直在使用下面的脚本来上传图片,恰好可以正常工作。</target>
        </trans-unit>
        <trans-unit id="450c5d9b7c8c7dcc267fa47c87251658a6774ca3" translate="yes" xml:space="preserve">
          <source>I have done a lot of searching and I have come to another solution for uploading files without any plugin and only with ajax. The solution is as below:</source>
          <target state="translated">我做了很多搜索,我找到了另一个没有任何插件,只用ajax上传文件的解决方案。该解决方案如下所示。</target>
        </trans-unit>
        <trans-unit id="ed3f24638549f840c22003b42a5de19f6e915d95" translate="yes" xml:space="preserve">
          <source>I made a jQuery plugin to handle this issue for Chrome when downloading, you can find here</source>
          <target state="translated">我做了一个jQuery插件来处理Chrome浏览器下载时的这个问题,你可以在这里找到</target>
        </trans-unit>
        <trans-unit id="62faeec7e8dee8ece0a999faa924f5cb9f444db9" translate="yes" xml:space="preserve">
          <source>I recommend using the &lt;a href=&quot;http://fineuploader.com/demos.html&quot;&gt;Fine Uploader&lt;/a&gt; plugin for this purpose. Your &lt;code&gt;JavaScript&lt;/code&gt; code would be:</source>
          <target state="translated">我建议为此使用&lt;a href=&quot;http://fineuploader.com/demos.html&quot;&gt;Fine Uploader&lt;/a&gt;插件。 您的 &lt;code&gt;JavaScript&lt;/code&gt; 代码为：</target>
        </trans-unit>
        <trans-unit id="d4131cec799b334c694e0f46269e18cafcc1caec" translate="yes" xml:space="preserve">
          <source>I use response &lt;code&gt;div&lt;/code&gt; to show the uploading animation and response after upload is done.</source>
          <target state="translated">我使用response &lt;code&gt;div&lt;/code&gt; 来显示上传动画和上传完成后的响应。</target>
        </trans-unit>
        <trans-unit id="25f31ab2de4c8c97a9dad9b491627c09fc9760ab" translate="yes" xml:space="preserve">
          <source>I would like to upload a file asynchronously with jQuery.</source>
          <target state="translated">我想用jQuery异步上传一个文件。</target>
        </trans-unit>
        <trans-unit id="b2cc78d3bc8c28e369a8c37bbc9545d02130f7c7" translate="yes" xml:space="preserve">
          <source>I&amp;rsquo;ve been using this for the past few weeks with Bloggity, and it&amp;rsquo;s worked like a champ.</source>
          <target state="translated">在过去的几周里，我一直在Bloggity上使用它，它的工作原理像冠军。</target>
        </trans-unit>
        <trans-unit id="fae42fcde1c6ffa628f482196b3f69eddfcbccfd" translate="yes" xml:space="preserve">
          <source>If done properly it should work virtually on any browser, but it has some caveats as how to obtain the response from the iframe.</source>
          <target state="translated">如果操作得当,它几乎可以在任何浏览器上运行,但它有一些注意事项,即如何从iframe中获取响应。</target>
        </trans-unit>
        <trans-unit id="ac9e395b92ca11305f6f6debfc730c8764e71d2a" translate="yes" xml:space="preserve">
          <source>If you need multiple file-uploads, it's best to do each file one at a time (to overcome maximum file upload limits). Post the first form to the iframe, monitor its progress using the above and when it has finished, post the second form to the iframe, and so on.</source>
          <target state="translated">如果你需要多个文件上传,最好一个个文件一个个的做(为了克服文件上传的最大限制)。将第一个表单发布到iframe中,用上面的方法监控它的进度,当它完成后,将第二个表单发布到iframe中,以此类推。</target>
        </trans-unit>
        <trans-unit id="6f181e65d320f5e01038c0018f20b3edcefd18d8" translate="yes" xml:space="preserve">
          <source>If you want to use the example above on one of your own web pages, the
  XML files you load must be located on your own server.</source>
          <target state="translated">如果你想在你自己的网页上使用上面的例子,你加载的XML文件必须位于你自己的服务器上。</target>
        </trans-unit>
        <trans-unit id="14fe30068ecbbb53cbd6ebdc9d97a7edb54e9a05" translate="yes" xml:space="preserve">
          <source>In the View create file upload control in html:</source>
          <target state="translated">在View中创建文件上传控件中的html。</target>
        </trans-unit>
        <trans-unit id="74d4ecf22707e7df0a7043488d65926f4bc9fc6a" translate="yes" xml:space="preserve">
          <source>In this case you may prefer to use a wrapper plugin like &lt;a href=&quot;//github.com/matiasgagliano/bifrost&quot;&gt;Bifr&amp;ouml;st&lt;/a&gt; which uses the &lt;em&gt;iframe technique&lt;/em&gt; but also provides a &lt;a href=&quot;//api.jquery.com/jQuery.ajaxTransport&quot;&gt;jQuery Ajax transport&lt;/a&gt; allowing to &lt;strong&gt;send files&lt;/strong&gt; with just the &lt;code&gt;$.ajax()&lt;/code&gt; method like this:</source>
          <target state="translated">在这种情况下，您可能会喜欢使用&lt;a href=&quot;//github.com/matiasgagliano/bifrost&quot;&gt;Bifr&amp;ouml;st之&lt;/a&gt;类的包装器插件，该插件使用&lt;em&gt;iframe技术，&lt;/em&gt;但还提供了&lt;a href=&quot;//api.jquery.com/jQuery.ajaxTransport&quot;&gt;jQuery Ajax传输，&lt;/a&gt;允许仅使用 &lt;code&gt;$.ajax()&lt;/code&gt; 方法&lt;strong&gt;发送文件&lt;/strong&gt; ，如下所示：</target>
        </trans-unit>
        <trans-unit id="71f2e90f8cac48a34fc1ecffd12ffbcc3f278134" translate="yes" xml:space="preserve">
          <source>Instead of the file being uploaded, I am only getting the filename. What can I do to fix this problem?</source>
          <target state="translated">我没有上传文件,而是只得到文件名。我该怎么做才能解决这个问题?</target>
        </trans-unit>
        <trans-unit id="a2b34c8ecd529ea93b439ef738316f51623ec501" translate="yes" xml:space="preserve">
          <source>It consists of setting an iframe as the target of the form with the file inputs. When the user submits a request is made and the files are uploaded but the response is displayed inside the iframe instead of re-rendering the main page. Hiding the iframe makes the whole process transparent to the user and emulates an asynchronous request.</source>
          <target state="translated">它包括设置一个iframe作为表单的目标文件输入的iframe。当用户提交请求时,文件被上传,但响应会在iframe中显示,而不是重新渲染主页面。隐藏iframe可以使整个过程对用户透明,并模拟异步请求。</target>
        </trans-unit>
        <trans-unit id="fc7666c5b1ddcaf2b2495cb20e836556519a1a25" translate="yes" xml:space="preserve">
          <source>It does file uploading without navigating away from the page and offers a few bonuses like drag &amp;amp; drop, resuming uploads in case of browser crashes/flaky networks, and importing from e.g. Instagram.
It's open source and does not rely on jQuery/React/Angular/Vue, but can be used with it. Disclaimer: as its creator I'm biased ;)</source>
          <target state="translated">它可以在不离开页面的情况下进行文件上传，并提供一些额外的功能，例如拖放，在浏览器崩溃/网络不稳定时恢复上传，以及从例如Instagram导入。 它是开源的，不依赖jQuery / React / Angular / Vue，但可以与它一起使用。 免责声明：作为创作者，我有偏见;）</target>
        </trans-unit>
        <trans-unit id="b07b361a2afac417b4c562ce3767dd9a9bf65e28" translate="yes" xml:space="preserve">
          <source>It does not depend on specific HTML, just give it a &lt;code&gt;&amp;lt;input type=&quot;file&quot;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">它不依赖于特定的HTML，只需为其提供 &lt;code&gt;&amp;lt;input type=&quot;file&quot;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5214822f121f4614360130ec5d7c91654b2c7d27" translate="yes" xml:space="preserve">
          <source>It does not matter how many files you use, or where they are on the page</source>
          <target state="translated">你使用了多少个文件,或者它们在页面上的位置并不重要。</target>
        </trans-unit>
        <trans-unit id="ac4827b61d1fae86fb89b0c53151a10e0cdc9f6a" translate="yes" xml:space="preserve">
          <source>It does not require your server to respond in any particular way</source>
          <target state="translated">它不需要你的服务器以任何特定方式响应</target>
        </trans-unit>
        <trans-unit id="8e9eb53d562cbb50167ee9e0d62459e188ae3600" translate="yes" xml:space="preserve">
          <source>It's 2019 as of this edit, almost 11 years after my initial answer. IE9 and lower are &lt;em&gt;globally&lt;/em&gt; around the 1% mark but there are still clusters  of higher usage.</source>
          <target state="translated">截至本次编辑截止到2019年，距我最初的回答已经过去11年了。 IE9及更低版本在&lt;em&gt;全球范围内均&lt;/em&gt;在1％左右，但仍存在使用率更高的集群。</target>
        </trans-unit>
        <trans-unit id="3693257f0f11b5dc67397868daf7f6aa335eafcc" translate="yes" xml:space="preserve">
          <source>It's a &quot;real&quot; post so it's not wholly interactive. If you need status you need something server-side to process that. This varies massively depending on your server. &lt;a href=&quot;http://en.wikipedia.org/wiki/ASP.NET&quot;&gt;ASP.NET&lt;/a&gt; has nicer mechanisms. PHP plain fails, but you can use &lt;a href=&quot;http://en.wikipedia.org/wiki/Perl&quot;&gt;Perl&lt;/a&gt; or Apache modifications to get around it.</source>
          <target state="translated">这是一个&amp;ldquo;真实&amp;rdquo;的帖子，因此并不完全是交互式的。 如果您需要状态，则需要服务器端进行处理。 具体取决于您的服务器。 &lt;a href=&quot;http://en.wikipedia.org/wiki/ASP.NET&quot;&gt;ASP.NET&lt;/a&gt;具有更好的机制。 PHP Plain失败了，但是您可以使用&lt;a href=&quot;http://en.wikipedia.org/wiki/Perl&quot;&gt;Perl&lt;/a&gt;或Apache修改来解决它。</target>
        </trans-unit>
        <trans-unit id="ee620923ff5fc510555dc37083a135ee93b5404b" translate="yes" xml:space="preserve">
          <source>JavaScript</source>
          <target state="translated">JavaScript</target>
        </trans-unit>
        <trans-unit id="e9ce9e5bca25bed2e1d65ad277a45c51f6436d5e" translate="yes" xml:space="preserve">
          <source>Javascript:</source>
          <target state="translated">Javascript:</target>
        </trans-unit>
        <trans-unit id="fabc997f26bb34ab27fb85cede45244f0e00756c" translate="yes" xml:space="preserve">
          <source>Look for &lt;em&gt;Handling the upload process for a file, asynchronously&lt;/em&gt; in here:
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Using_files_from_web_applications&quot;&gt;https://developer.mozilla.org/en-US/docs/Using_files_from_web_applications&lt;/a&gt;</source>
          <target state="translated">在此处查找&lt;em&gt;异步处理文件的上传过程&lt;/em&gt; ： &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Using_files_from_web_applications&quot;&gt;https&lt;/a&gt; : //developer.mozilla.org/zh-CN/docs/Using_files_from_web_applications</target>
        </trans-unit>
        <trans-unit id="fc83d2854c412dfba1c7a58c1a436eb82eeace0a" translate="yes" xml:space="preserve">
          <source>MIT license -- free to use in commercial project</source>
          <target state="translated">麻省理工学院的许可证----可在商业项目中免费使用</target>
        </trans-unit>
        <trans-unit id="4811b0a73bc69b5d9bc9915eb426b548fd412558" translate="yes" xml:space="preserve">
          <source>My answer from 2008 follows.</source>
          <target state="translated">我从2008年开始的回答如下。</target>
        </trans-unit>
        <trans-unit id="263f343463a2ad34105afd3aaf81794ae30cc032" translate="yes" xml:space="preserve">
          <source>No flash or external CSS -- just one 5Kb Javascript file</source>
          <target state="translated">没有Flash或外部CSS----只有一个5Kb的Javascript文件</target>
        </trans-unit>
        <trans-unit id="a6f0475a67750e40f11833df2968aaaa14e00c5a" translate="yes" xml:space="preserve">
          <source>No forms required, just provide an element that will serve as upload button</source>
          <target state="translated">不需要表单,只需提供一个作为上传按钮的元素即可。</target>
        </trans-unit>
        <trans-unit id="017b350f6d0aa9b4c2001b6238c78c88c5caee16" translate="yes" xml:space="preserve">
          <source>Note: This answer is outdated, it is now possible to upload files using XHR.</source>
          <target state="translated">注意:这个答案已经过时了,现在可以用XHR上传文件。</target>
        </trans-unit>
        <trans-unit id="22e5e2f293b33c3c42e7c2fdbaabd1bc2eb07a79" translate="yes" xml:space="preserve">
          <source>Now create action method in your controller:</source>
          <target state="translated">现在在你的控制器中创建动作方法。</target>
        </trans-unit>
        <trans-unit id="521344f2ab4397105ce0ad0abbf28260488378ea" translate="yes" xml:space="preserve">
          <source>Now the &lt;code&gt;$.ajax()&lt;/code&gt; submit with the button's click:</source>
          <target state="translated">现在，单击按钮即可提交 &lt;code&gt;$.ajax()&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="8a7b05d8fe86621706c0e9d929d76eb67f588358" translate="yes" xml:space="preserve">
          <source>Optional, built-in support for fully cross-browser progress bars (using PHP's APC extension)</source>
          <target state="translated">可选,内置支持完全跨浏览器进度条(使用PHP的APC扩展)。</target>
        </trans-unit>
        <trans-unit id="eec22d0597e79c57029dbf0e40cac08a34fe9f8d" translate="yes" xml:space="preserve">
          <source>Or use a Java/Flash solution. They're a lot more flexible in what they can do with their posts...</source>
          <target state="translated">或者使用JavaFlash解决方案。他们的帖子能做的事情要灵活得多......</target>
        </trans-unit>
        <trans-unit id="ab2e26dd8b8868a3969cb3321e0c983c0d9d67d4" translate="yes" xml:space="preserve">
          <source>Plugins</source>
          <target state="translated">Plugins</target>
        </trans-unit>
        <trans-unit id="809b23f2cc0d5742ade51cff49b3030c9cad052d" translate="yes" xml:space="preserve">
          <source>Sample from the link</source>
          <target state="translated">链接中的样本</target>
        </trans-unit>
        <trans-unit id="bb050ee73b97973e82f48d001e0f99d9eb46e0a6" translate="yes" xml:space="preserve">
          <source>Sample: If you use jQuery, you can do easy to an upload file. This is a small and strong jQuery plugin, &lt;a href=&quot;http://jquery.malsup.com/form/&quot;&gt;http://jquery.malsup.com/form/&lt;/a&gt;.</source>
          <target state="translated">示例：如果使用jQuery，则可以轻松上传文件。 这是一个小巧而强大的jQuery插件， &lt;a href=&quot;http://jquery.malsup.com/form/&quot;&gt;http://jquery.malsup.com/form/&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="be7779a7a4baa3021e7af15e69c50f6dc680085d" translate="yes" xml:space="preserve">
          <source>Simple Ajax Uploader is another option:</source>
          <target state="translated">Simple Ajax Uploader是另一种选择。</target>
        </trans-unit>
        <trans-unit id="919d3c5f734aa4adc982838364ec08831e2fee5f" translate="yes" xml:space="preserve">
          <source>Supports multiple, concurrent uploads -- even in non-HTML5 browsers</source>
          <target state="translated">支持多个并发上传----即使是在非HTML5浏览器中也是如此。</target>
        </trans-unit>
        <trans-unit id="12b45d20e27141bcc96bbba17495a24d835f9ab4" translate="yes" xml:space="preserve">
          <source>Syntax for creating an XMLHttpRequest object:</source>
          <target state="translated">创建一个XMLHttpRequest对象的语法。</target>
        </trans-unit>
        <trans-unit id="3412a9c6235ff5b37ad48cb45f00cdc34d3ee732" translate="yes" xml:space="preserve">
          <source>That is if you don't want to use a plugin, JavaScript or any other forms of &quot;magic&quot; other than HTML.  Of course you can combine this with JavaScript or what have you...</source>
          <target state="translated">如果你不想使用插件、JavaScript或HTML以外的任何其他形式的 &quot;魔法&quot;,那么就可以。当然,你可以将其与JavaScript或者其他什么结合起来......</target>
        </trans-unit>
        <trans-unit id="4230320763beb5352ba3a4092a6778c357563688" translate="yes" xml:space="preserve">
          <source>That's where the jQuery-form plugin comes into play.</source>
          <target state="translated">这就是jQuery-form插件发挥作用的地方。</target>
        </trans-unit>
        <trans-unit id="6eae58e88c8d2921c3b26025cdc6b58ddb238109" translate="yes" xml:space="preserve">
          <source>The HTML:</source>
          <target state="translated">的HTML。</target>
        </trans-unit>
        <trans-unit id="390638562e82dba24d94b5de3f5c0308c84c1a74" translate="yes" xml:space="preserve">
          <source>The challenge is in getting AJAX upload working as the standard &lt;code&gt;remote_form_for&lt;/code&gt; doesn't understand multi-part form submission. It's not going to send the file data Rails seeks back with the AJAX request.</source>
          <target state="translated">挑战在于如何使AJAX上传工作，因为标准 &lt;code&gt;remote_form_for&lt;/code&gt; 无法理解多部分表单提交。 它不会发送Rails随AJAX请求返回的文件数据。</target>
        </trans-unit>
        <trans-unit id="49b114f26640a12f59f60f3e14211093199ff7a0" translate="yes" xml:space="preserve">
          <source>The data being submitted is a formdata. On your jQuery, use a form submit function instead of a button click to submit the form file as shown below.</source>
          <target state="translated">正在提交的数据是一个formdata。在你的jQuery上,使用一个表单提交函数,而不是点击按钮来提交表单文件,如下图所示。</target>
        </trans-unit>
        <trans-unit id="d8cd78f2a0041bf4679790dab499d0a49ef37189" translate="yes" xml:space="preserve">
          <source>The examples on W3Schools all open XML files located on the W3Schools
  domain.</source>
          <target state="translated">W3Schools 上的示例都打开了位于 W3Schools 域中的 XML 文件。</target>
        </trans-unit>
        <trans-unit id="e7f43609a80f2f2b73d736b04a118418a0bd20fb" translate="yes" xml:space="preserve">
          <source>The important take-away from this &amp;mdash;whatever the feature&amp;mdash; is, &lt;strong&gt;check what browser &lt;em&gt;your&lt;/em&gt; users use&lt;/strong&gt;. If you don't, you'll learn a quick and painful lesson in why &quot;works for me&quot; isn't good enough in a deliverable to a client. &lt;a href=&quot;https://caniuse.com/&quot;&gt;caniuse&lt;/a&gt; is a useful tool but note where they get their demographics from. They may not align with yours. This is never truer than enterprise environments.</source>
          <target state="translated">无论功能如何，重要的收获是， &lt;strong&gt;请检查用户使用的浏览器&lt;/strong&gt; 。 如果您不这样做，您将学到一个快速而痛苦的课程，以了解为什么&amp;ldquo;为我工作&amp;rdquo;在交付给客户的产品中不够好。 &lt;a href=&quot;https://caniuse.com/&quot;&gt;caniuse&lt;/a&gt;是一个有用的工具，但请注意他们从哪里获得人口统计信息。 它们可能与您的不一致。 这从未比企业环境真实。</target>
        </trans-unit>
        <trans-unit id="a125f59057273a8af67729f1f45a25b2762c1dc4" translate="yes" xml:space="preserve">
          <source>The only solution that I found works for Chrome was to use a cookie.</source>
          <target state="translated">我找到的唯一可行的解决方案是使用cookie。</target>
        </trans-unit>
        <trans-unit id="5812fbdfc0bc3b9c120d769fa65d55c658f0660c" translate="yes" xml:space="preserve">
          <source>The plugin will see the cookie, and then trigger the &lt;code&gt;onComplete&lt;/code&gt; callback.</source>
          <target state="translated">插件将看到cookie，然后触发 &lt;code&gt;onComplete&lt;/code&gt; 回调。</target>
        </trans-unit>
        <trans-unit id="98e8c7e0d95591c874a7b0b8bd5207b67ce58ed0" translate="yes" xml:space="preserve">
          <source>The same basic principal applies to uploading, as well.</source>
          <target state="translated">同样的基本原则也适用于上传,。</target>
        </trans-unit>
        <trans-unit id="b6fbb25c068582f33f40efe3e9f35544937e8142" translate="yes" xml:space="preserve">
          <source>The server side language is C# but you can do some modification for making it work with other language like PHP.</source>
          <target state="translated">服务器端的语言是C#,但你可以做一些修改,使其与其他语言如PHP一起工作。</target>
        </trans-unit>
        <trans-unit id="0cdcd101c4de354f1f65a932ad520fdd765bde2f" translate="yes" xml:space="preserve">
          <source>The simplest and most robust way I have done this in the past, is to simply target a hidden iFrame tag with your form - then it will submit within the iframe without reloading the page.</source>
          <target state="translated">我过去做过的最简单、最稳健的方法,就是用你的表单中隐藏的iFrame标签作为目标,然后它就会在iframe中提交,而不需要重新加载页面。</target>
        </trans-unit>
        <trans-unit id="1c7fc2372a83049e8d4d379a6511258fca4454c5" translate="yes" xml:space="preserve">
          <source>Then to retrieve:</source>
          <target state="translated">然后再去找回。</target>
        </trans-unit>
        <trans-unit id="65d3b355e07f3eb773497ea1ab4c340a4c84c77e" translate="yes" xml:space="preserve">
          <source>This &lt;a href=&quot;https://github.com/jfeldstein/jQuery.AjaxFileUpload.js&quot;&gt;AJAX file upload jQuery plugin&lt;/a&gt; uploads the file somehwere, and passes the
response to a callback, nothing else.</source>
          <target state="translated">这个&lt;a href=&quot;https://github.com/jfeldstein/jQuery.AjaxFileUpload.js&quot;&gt;AJAX文件上传jQuery插件&lt;/a&gt;以某种方式上传文件，并将响应传递给回调，仅此而已。</target>
        </trans-unit>
        <trans-unit id="cf8b6bd07fc1b5f1d621c20a6d94f15cc5f34d2e" translate="yes" xml:space="preserve">
          <source>This is my solution.</source>
          <target state="translated">这是我的解决方案。</target>
        </trans-unit>
        <trans-unit id="4531ce2d24bfc01f63faa9a897c9a543cf017e24" translate="yes" xml:space="preserve">
          <source>This means that both the web page and the XML file it tries to load,
  must be located on the same server.</source>
          <target state="translated">这意味着网页和它试图加载的XML文件必须位于同一服务器上。</target>
        </trans-unit>
        <trans-unit id="bf51ae97ae357e25e1f45fa314ff335778a6f8ba" translate="yes" xml:space="preserve">
          <source>To do that basically when the upload/download is started:</source>
          <target state="translated">要做到这一点,基本上是在启动uploaddownload的时候。</target>
        </trans-unit>
        <trans-unit id="ddc232fdf5f4506b591f568ec582361ce9acaaf8" translate="yes" xml:space="preserve">
          <source>To upload file asynchronously with Jquery use below steps:</source>
          <target state="translated">要使用Jquery异步上传文件,请使用以下步骤。</target>
        </trans-unit>
        <trans-unit id="edc229fa8c3ae5b5f37117272d4039d0fd8d1de2" translate="yes" xml:space="preserve">
          <source>To use the downloader  ( include the JS, obviously )</source>
          <target state="translated">要使用下载器(显然包括JS),要使用下载器</target>
        </trans-unit>
        <trans-unit id="986d7ad933b97fd6b787c296e4f88ce2795fa8b1" translate="yes" xml:space="preserve">
          <source>Using &lt;strong&gt;HTML5&lt;/strong&gt; and &lt;strong&gt;JavaScript&lt;/strong&gt;, uploading async is quite easy, I create the uploading logic along with your html, this is not fully working as it needs the api, but demonstrate how it works, if you have the endpoint called &lt;code&gt;/upload&lt;/code&gt; from root of your website, this code should work for you:</source>
          <target state="translated">使用&lt;strong&gt;HTML5&lt;/strong&gt;和&lt;strong&gt;JavaScript&lt;/strong&gt; ，上传异步非常简单，我与html一起创建了上传逻辑，由于它需要api，因此无法完全正常工作，但是如果从端点的根目录调用了 &lt;code&gt;/upload&lt;/code&gt; ，则可以演示其工作原理网站，此代码应适用于您：</target>
        </trans-unit>
        <trans-unit id="c595835322d5931bd41f02e6a0fd61fc10b56862" translate="yes" xml:space="preserve">
          <source>Using a cookie for this is ugly but it works.</source>
          <target state="translated">用cookie来做这个是很难看的,但很管用。</target>
        </trans-unit>
        <trans-unit id="aa06e8203208b8dc6d008e57140df517695d5513" translate="yes" xml:space="preserve">
          <source>Using simple &lt;strong&gt;Javascripts&lt;/strong&gt; and &lt;strong&gt;AJAX&lt;/strong&gt; (with progress-bar)</source>
          <target state="translated">使用简单的&lt;strong&gt;Javascript&lt;/strong&gt;和&lt;strong&gt;AJAX&lt;/strong&gt; （带有进度条）</target>
        </trans-unit>
        <trans-unit id="67eb426c9991bc55d107aac3bceffab46f10b33d" translate="yes" xml:space="preserve">
          <source>View more details</source>
          <target state="translated">查看更多详情</target>
        </trans-unit>
        <trans-unit id="16e0ed787a50984c4ec9211a30c898d021065472" translate="yes" xml:space="preserve">
          <source>When HTML5 isn't supported (no &lt;em&gt;File API&lt;/em&gt;) the only other pure JavaScript solution (no &lt;em&gt;Flash&lt;/em&gt; or any other browser plugin) is the &lt;strong&gt;hidden iframe&lt;/strong&gt; technique, which allows to emulate an asynchronous request without using the &lt;em&gt;XMLHttpRequest&lt;/em&gt; object.</source>
          <target state="translated">当不支持HTML5（没有&lt;em&gt;File API&lt;/em&gt; ）时，唯一的其他纯JavaScript解决方案（没有&lt;em&gt;Flash&lt;/em&gt;或任何其他浏览器插件）是&lt;strong&gt;隐藏的iframe&lt;/strong&gt;技术，该技术允许在不使用&lt;em&gt;XMLHttpRequest&lt;/em&gt;对象的情况下模拟异步请求。</target>
        </trans-unit>
        <trans-unit id="e03b6ec90b69aaea312ae2454fe4fff39afb0b8e" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;http://en.wikipedia.org/wiki/HTML5&quot;&gt;HTML5&lt;/a&gt; you can make file uploads with Ajax and jQuery. Not only that, you can do file validations (name, size, and MIME type) or handle the progress event with the HTML5 progress tag (or a div). Recently I had to make a file uploader, but I didn't want to use &lt;a href=&quot;http://en.wikipedia.org/wiki/Adobe_Flash&quot;&gt;Flash&lt;/a&gt; nor Iframes or plugins and after some research I came up with the solution.</source>
          <target state="translated">使用&lt;a href=&quot;http://en.wikipedia.org/wiki/HTML5&quot;&gt;HTML5，&lt;/a&gt;您可以使用Ajax和jQuery进行文件上传。 不仅如此，您还可以执行文件验证（名称，大小和MIME类型）或使用HTML5进度标签（或div）处理进度事件。 最近，我不得不制作一个文件上传器，但是我不想使用&lt;a href=&quot;http://en.wikipedia.org/wiki/Adobe_Flash&quot;&gt;Flash&lt;/a&gt; ，iframes或插件，经过一番研究后，我想到了解决方案。</target>
        </trans-unit>
        <trans-unit id="5a1c56819ef92f5425d7e71d292f57e6885c684f" translate="yes" xml:space="preserve">
          <source>With HTML5</source>
          <target state="translated">有了HTML5</target>
        </trans-unit>
        <trans-unit id="df1ff37ebde5a9239d88fe64c0df188251ffbfbd" translate="yes" xml:space="preserve">
          <source>Wrapping up for future readers.</source>
          <target state="translated">为以后的读者做个总结。</target>
        </trans-unit>
        <trans-unit id="758c334d85c5cd56d8d6ecf8d17938157933679d" translate="yes" xml:space="preserve">
          <source>You can also read the contents of the iframe &lt;code&gt;onLoad&lt;/code&gt; for server errors or success responses and then output that to user.</source>
          <target state="translated">您还可以读取iframe &lt;code&gt;onLoad&lt;/code&gt; 的内容以获得服务器错误或成功响应，然后将其输出给用户。</target>
        </trans-unit>
        <trans-unit id="c9857486cc5286e83b21cca8bd7d4b59265fda80" translate="yes" xml:space="preserve">
          <source>You can also send files &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Submitting_forms_and_uploading_files&quot;&gt;without FormData&lt;/a&gt; but either way the File API must be present to process files in such a way that they can be sent with &lt;em&gt;XMLHttpRequest&lt;/em&gt; (Ajax).</source>
          <target state="translated">您也可以发送&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Submitting_forms_and_uploading_files&quot;&gt;不带FormData的&lt;/a&gt;文件，但必须以两种方式发送文件API来处理文件，以便可以使用&lt;em&gt;XMLHttpRequest&lt;/em&gt; （Ajax）发送文件。</target>
        </trans-unit>
        <trans-unit id="3a669263981f837bea72ddda769e1d84e6727ed2" translate="yes" xml:space="preserve">
          <source>You can do it in vanilla JavaScript pretty easily. Here's a snippet from my current project:</source>
          <target state="translated">你可以用vanilla JavaScript很容易做到。下面是我目前项目中的一个片段。</target>
        </trans-unit>
        <trans-unit id="3bca08384e231b9c523f0e4421f1874520b48ca0" translate="yes" xml:space="preserve">
          <source>You can do the Asynchronous Multiple File uploads using JavaScript or jQuery and that to without using any plugin. You can also show the real time progress of file upload in the progress control. I have come across 2 nice links -</source>
          <target state="translated">你可以使用JavaScript或jQuery进行异步多文件上传,无需使用任何插件。你也可以在进度控件中显示文件上传的实时进度。我遇到了2个不错的链接</target>
        </trans-unit>
        <trans-unit id="3492ddbc79dbdffa0d865d65652219b165d4b629" translate="yes" xml:space="preserve">
          <source>You can pass additional parameters along with file name on making asynchronous upload using XMLHttpRequest (without flash and iframe dependency). Append the additional parameter value with FormData and send the upload request.</source>
          <target state="translated">在使用XMLHttpRequest进行异步上传时,你可以将附加的参数和文件名一起传递(没有flash和iframe的依赖性)。将附加的参数值与FormData一起附加,然后发送上传请求。</target>
        </trans-unit>
        <trans-unit id="d371428babf6e03ccb0a2d00352c4f4c8aeb4a3d" translate="yes" xml:space="preserve">
          <source>You can see a solved solution with a working demo &lt;a href=&quot;http://whats-online.info/science-and-tutorials/30/select-preview-rename-and-upload-image-using-jquery-Ajax/&quot;&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt; that allows you to preview and submit form files to the server. For your case, you need to use &lt;a href=&quot;http://en.wikipedia.org/wiki/Ajax_%28programming%29&quot;&gt;Ajax&lt;/a&gt; to facilitate the file upload to the server:</source>
          <target state="translated">您可以&lt;a href=&quot;http://whats-online.info/science-and-tutorials/30/select-preview-rename-and-upload-image-using-jquery-Ajax/&quot;&gt;&lt;strong&gt;在此处&lt;/strong&gt;&lt;/a&gt;看到带有有效演示的解决方案，可以预览表单文件并将其提交到服务器。 对于您的情况，您需要使用&lt;a href=&quot;http://en.wikipedia.org/wiki/Ajax_%28programming%29&quot;&gt;Ajax&lt;/a&gt;来方便将文件上传到服务器：</target>
        </trans-unit>
        <trans-unit id="bffefe47049362c07c11d3a1fec5b8496efa53d1" translate="yes" xml:space="preserve">
          <source>You can upload files &lt;strong&gt;with jQuery&lt;/strong&gt; using the &lt;code&gt;$.ajax()&lt;/code&gt; method if &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/Using_FormData_Objects&quot;&gt;FormData&lt;/a&gt; and the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Using_files_from_web_applications&quot;&gt;File API&lt;/a&gt; are supported (both HTML5 features).</source>
          <target state="translated">如果支持&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/Using_FormData_Objects&quot;&gt;FormData&lt;/a&gt;和&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Using_files_from_web_applications&quot;&gt;File API&lt;/a&gt; （均具有HTML5功能），则可以使用 &lt;code&gt;$.ajax()&lt;/code&gt; 方法使用&lt;strong&gt;jQuery&lt;/strong&gt;上传文件。</target>
        </trans-unit>
        <trans-unit id="c15f754d5d6223b7ec469a1b4eb84b3da5e58719" translate="yes" xml:space="preserve">
          <source>You can upload simply with jQuery &lt;code&gt;.ajax()&lt;/code&gt;.</source>
          <target state="translated">您可以仅使用jQuery &lt;code&gt;.ajax()&lt;/code&gt; 上传。</target>
        </trans-unit>
        <trans-unit id="3c94090f45521fa505560d818d146d87684fe4b4" translate="yes" xml:space="preserve">
          <source>You can use</source>
          <target state="translated">你可以使用</target>
        </trans-unit>
        <trans-unit id="7df9b6e4a487605a23092ab6190f8850bb66f166" translate="yes" xml:space="preserve">
          <source>You can use &lt;strong&gt;newer&lt;/strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch&quot;&gt;Fetch API&lt;/a&gt; by JavaScript. Like this:</source>
          <target state="translated">您可以通过JavaScript使用&lt;strong&gt;更新的&lt;/strong&gt; &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch&quot;&gt;Fetch API&lt;/a&gt; 。 像这样：</target>
        </trans-unit>
        <trans-unit id="e86e0df84288d21d27d3708cff031be7dff10cd4" translate="yes" xml:space="preserve">
          <source>You can use form data to post all your values including images.</source>
          <target state="translated">你可以使用表单数据来发布你的所有值,包括图片。</target>
        </trans-unit>
        <trans-unit id="d7a176b05840ed78be2f460c5adf701b4447fb9f" translate="yes" xml:space="preserve">
          <source>You cannot upload files using &lt;a href=&quot;http://en.wikipedia.org/wiki/XMLHttpRequest&quot;&gt;XMLHttpRequest&lt;/a&gt; (Ajax). You can simulate the effect using an iframe or Flash. The excellent &lt;a href=&quot;http://malsup.com/jquery/form/&quot;&gt;jQuery Form Plugin&lt;/a&gt; that posts your files through an iframe to get the effect.</source>
          <target state="translated">您不能使用&lt;a href=&quot;http://en.wikipedia.org/wiki/XMLHttpRequest&quot;&gt;XMLHttpRequest&lt;/a&gt; （Ajax）上传文件。 您可以使用iframe或Flash模拟效果。 出色的&lt;a href=&quot;http://malsup.com/jquery/form/&quot;&gt;jQuery表单插件&lt;/a&gt; ，可通过iframe发布文件以获得效果。</target>
        </trans-unit>
        <trans-unit id="6a4afc416fe9e0f6b4c5767861f1f62cfad74985" translate="yes" xml:space="preserve">
          <source>You could also consider using something like &lt;a href=&quot;https://uppy.io&quot;&gt;https://uppy.io&lt;/a&gt;.</source>
          <target state="translated">您也可以考虑使用&lt;a href=&quot;https://uppy.io&quot;&gt;https://uppy.io之类的&lt;/a&gt;东西。</target>
        </trans-unit>
        <trans-unit id="3e1039ae78b67c69d546e3905a6f44ea9e2fc812" translate="yes" xml:space="preserve">
          <source>[Client Side] Interval sees the cookie and uses it like the onLoad event.  For example you can start a UI blocker and then onLoad ( or when cookie is made )  you remove the UI blocker.</source>
          <target state="translated">客户端]Interval会看到cookie并像onLoad事件一样使用它。例如,你可以启动一个UI阻止器,然后在onLoad(或者当cookie被制作出来后)删除UI阻止器。</target>
        </trans-unit>
        <trans-unit id="814deaebb10db6821413d4652b86a99d86f25497" translate="yes" xml:space="preserve">
          <source>[Client Side] Start an interval to look for the existence of a cookie</source>
          <target state="translated">客户端]启动一个区间来查找cookie的存在。</target>
        </trans-unit>
        <trans-unit id="a8217709aac017aeb4d34c53d1f3e9d9135af392" translate="yes" xml:space="preserve">
          <source>[Server Side] Do whatever you need to with the file data</source>
          <target state="translated">服务器端]对文件数据做任何你需要做的事情。</target>
        </trans-unit>
        <trans-unit id="78d740e19d1ef7b0aa14bdd37f137cfe5e86410b" translate="yes" xml:space="preserve">
          <source>[Server Side] Set cookie for client side interval</source>
          <target state="translated">服务器端]为客户端设置cookie的时间间隔</target>
        </trans-unit>
        <trans-unit id="c7c112398701ddd6804b1d20d93e37e2b9ef50bc" translate="yes" xml:space="preserve">
          <source>and the js</source>
          <target state="translated">和js</target>
        </trans-unit>
        <trans-unit id="da4fe6d463e704e846c51de753a5380b7df066a4" translate="yes" xml:space="preserve">
          <source>hostingEnvironment variable is of type IHostingEnvironment which can be injected to the controller using dependency injection, like:</source>
          <target state="translated">hostingEnvironment变量的类型为IHostingEnvironment,可以使用依赖注入的方式注入到控制器中,比如说。</target>
        </trans-unit>
        <trans-unit id="33d6bffa4a3d4423b7febcb3bbd1be0ba811cf44" translate="yes" xml:space="preserve">
          <source>jQuery &lt;a href=&quot;http://www.uploadify.com/download/&quot;&gt;Uploadify&lt;/a&gt; is another good plugin which I have used before to upload files. The JavaScript code is as simple as the following: code. However, the new version does not work in Internet&amp;nbsp;Explorer.</source>
          <target state="translated">jQuery &lt;a href=&quot;http://www.uploadify.com/download/&quot;&gt;Uploadify&lt;/a&gt;是另一个好插件，我之前曾使用过该插件来上传文件。 JavaScript代码很简单，如下所示：代码。 但是，新版本在Internet Explorer中不起作用。</target>
        </trans-unit>
        <trans-unit id="29a3ad536e11dc259f0c6bbe59ce601bd99ff89c" translate="yes" xml:space="preserve">
          <source>jquery.fileupload.js</source>
          <target state="translated">jquery.fileupload.js</target>
        </trans-unit>
        <trans-unit id="0f913f3272a84b9673f477976776e2cfb85e54f7" translate="yes" xml:space="preserve">
          <source>jquery.iframe-transport.js</source>
          <target state="translated">jquery.iframe-transport.js</target>
        </trans-unit>
        <trans-unit id="d880eeee0bc5308e41c8be5beb047a21c90ac8cb" translate="yes" xml:space="preserve">
          <source>jquery.ui.widget.js</source>
          <target state="translated">jquery.ui.widget.js</target>
        </trans-unit>
        <trans-unit id="f0b426739dc5921e29e22f64ffeb8158a0b89cb7" translate="yes" xml:space="preserve">
          <source>variable = new XMLHttpRequest();</source>
          <target state="translated">variable=new XMLHttpRequest();</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
