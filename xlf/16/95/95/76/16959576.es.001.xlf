<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/16959576">
    <body>
      <group id="16959576">
        <trans-unit id="a838e95c861b722e4d4150b9f6f1920e5169c62c" translate="yes" xml:space="preserve">
          <source>(anonymous) functions inside functions</source>
          <target state="translated">Funciones (anónimas)dentro de las funciones</target>
        </trans-unit>
        <trans-unit id="ab5b78942d8672ca80abd97cd7594c7910b40e16" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$GLOBALS&lt;/code&gt; - All the global variables in the current script</source>
          <target state="translated">&lt;code&gt;$GLOBALS&lt;/code&gt; : todas las variables globales en el script actual</target>
        </trans-unit>
        <trans-unit id="e447db7dd407c0465d263640675852f291dfb97c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$_COOKIE&lt;/code&gt; - Cookies passed with the current request</source>
          <target state="translated">&lt;code&gt;$_COOKIE&lt;/code&gt; - Cookies pasadas con la solicitud actual</target>
        </trans-unit>
        <trans-unit id="23f8f9f798cae387bccb009c8570466e221ed320" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$_ENV&lt;/code&gt; - The environment variables of the current script</source>
          <target state="translated">&lt;code&gt;$_ENV&lt;/code&gt; : las variables de entorno del script actual</target>
        </trans-unit>
        <trans-unit id="fe1c222af7a08d0d9c3ec4bb66ceb471334a1d2e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$_FILES&lt;/code&gt; - Files passed in an HTTP POST request with a &lt;code&gt;multipart/form-data&lt;/code&gt; MIME type</source>
          <target state="translated">&lt;code&gt;$_FILES&lt;/code&gt; : archivos pasados ​​en una solicitud HTTP POST con un tipo MIME &lt;code&gt;multipart/form-data&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3275cc5081faa33f360f5ef474b432441bcaa20f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$_GET&lt;/code&gt; - Values passed in the query string of the URL, regardless of the HTTP method used for the request</source>
          <target state="translated">&lt;code&gt;$_GET&lt;/code&gt; : valores pasados ​​en la cadena de consulta de la URL, independientemente del m&amp;eacute;todo HTTP utilizado para la solicitud</target>
        </trans-unit>
        <trans-unit id="48134a27485958dd1da440984cdd0905a6e393d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$_POST&lt;/code&gt; - Values passed in an HTTP POST request with &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; or &lt;code&gt;multipart/form-data&lt;/code&gt; MIME types</source>
          <target state="translated">&lt;code&gt;$_POST&lt;/code&gt; : valores pasados ​​en una solicitud HTTP POST con los tipos MIME &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; o &lt;code&gt;multipart/form-data&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6446cb3a90bcb73f4a0b18700333ae3ebffd3183" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$_REQUEST&lt;/code&gt; - Typically a combination of &lt;code&gt;$_GET&lt;/code&gt; and &lt;code&gt;$_POST&lt;/code&gt;, but sometimes &lt;code&gt;$_COOKIES&lt;/code&gt;. The content is determined by the &lt;a href=&quot;https://www.php.net/manual/en/ini.core.php#ini.request-order&quot;&gt;&lt;code&gt;request_order&lt;/code&gt; directive&lt;/a&gt; in &lt;code&gt;php.ini&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$_REQUEST&lt;/code&gt; : por lo general, una combinaci&amp;oacute;n de &lt;code&gt;$_GET&lt;/code&gt; y &lt;code&gt;$_POST&lt;/code&gt; , pero a veces &lt;code&gt;$_COOKIES&lt;/code&gt; . El contenido est&amp;aacute; determinado por la &lt;a href=&quot;https://www.php.net/manual/en/ini.core.php#ini.request-order&quot;&gt;directiva &lt;code&gt;request_order&lt;/code&gt; &lt;/a&gt; en &lt;code&gt;php.ini&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7c57ad330fea26b47817fd32122a481ce3485a56" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$_SERVER&lt;/code&gt; - Information on the server and execution environment</source>
          <target state="translated">&lt;code&gt;$_SERVER&lt;/code&gt; - Informaci&amp;oacute;n sobre el servidor y el entorno de ejecuci&amp;oacute;n</target>
        </trans-unit>
        <trans-unit id="06bfdc6ae6b40934570555d25de4ec53967c8a4d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$_SESSION&lt;/code&gt; - Session variables stored internally by PHP</source>
          <target state="translated">&lt;code&gt;$_SESSION&lt;/code&gt; - Variables de sesi&amp;oacute;n almacenadas internamente por PHP</target>
        </trans-unit>
        <trans-unit id="7a54fd83e265d890f6ebf01bc2fdf3d2c3e6969d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$foo&lt;/code&gt; is in the &lt;em&gt;global&lt;/em&gt; scope, &lt;code&gt;$baz&lt;/code&gt; is in a &lt;em&gt;local&lt;/em&gt; scope inside &lt;code&gt;myFunc&lt;/code&gt;. Only code inside &lt;code&gt;myFunc&lt;/code&gt; has access to &lt;code&gt;$baz&lt;/code&gt;. Only code &lt;em&gt;outside&lt;/em&gt;&lt;code&gt;myFunc&lt;/code&gt; has access to &lt;code&gt;$foo&lt;/code&gt;. Neither has access to the other:</source>
          <target state="translated">&lt;code&gt;$foo&lt;/code&gt; est&amp;aacute; en el &amp;aacute;mbito &lt;em&gt;global&lt;/em&gt; , &lt;code&gt;$baz&lt;/code&gt; est&amp;aacute; en un &amp;aacute;mbito &lt;em&gt;local&lt;/em&gt; dentro de &lt;code&gt;myFunc&lt;/code&gt; . Solo el c&amp;oacute;digo dentro de &lt;code&gt;myFunc&lt;/code&gt; tiene acceso a &lt;code&gt;$baz&lt;/code&gt; . Solo el c&amp;oacute;digo &lt;em&gt;fuera de&lt;/em&gt; &lt;code&gt;myFunc&lt;/code&gt; tiene acceso a &lt;code&gt;$foo&lt;/code&gt; . Ninguno tiene acceso al otro:</target>
        </trans-unit>
        <trans-unit id="860f3738e06320b6aa3a5029bf8cabd8046b48e2" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;a.php&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;a.php&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4906962156ed3cee35484627e34c88784c364e12" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;b.php&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;b.php&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="148c38c993db37ff964ae08c70d69d37223693b8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;c.php&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;c.php&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ee745f8274eea67c263f470c1a6b81cd56ebc429" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Is static variable the only way to keep values between calls to a function?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&amp;iquest;Es la variable est&amp;aacute;tica la &amp;uacute;nica forma de mantener valores entre llamadas a una funci&amp;oacute;n?&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d16fd476d750bb2f2055776c40ba91b588355415" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Static variables use-cases&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Casos de uso de variables est&amp;aacute;ticas&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8c8b0fdf7a7ff852b65f48f1feaeed776c9bf16d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Tricks&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Tricks&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a4bac3cd12a4a22859cd13a8ef9ac8e413098752" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;What is it 'static variable'?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&amp;iquest;Qu&amp;eacute; es 'variable est&amp;aacute;tica'?&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7a74d4fc619243713656d431f8206726c097f47d" translate="yes" xml:space="preserve">
          <source>A list of current superglobals:</source>
          <target state="translated">Una lista de los superglobales actuales:</target>
        </trans-unit>
        <trans-unit id="2ebda5656975b8f33dec11db266353e84483083d" translate="yes" xml:space="preserve">
          <source>All the caller of this function sees is this:</source>
          <target state="translated">Todo lo que ve el que llama a esta función es esto:</target>
        </trans-unit>
        <trans-unit id="f58e02d5845b0bfb45a72c39d1f6598fa7ed232b" translate="yes" xml:space="preserve">
          <source>Although variables defined inside of a function's scope can not be accessed from the outside that does not mean you can not use their values after that function completes. PHP has a well known &lt;code&gt;static&lt;/code&gt; keyword that is widely used in object-oriented PHP for defining static methods and properties but one should keep in mind that &lt;code&gt;static&lt;/code&gt; may also be used inside functions to define static variables.</source>
          <target state="translated">Aunque no se puede acceder a las variables definidas dentro del alcance de una funci&amp;oacute;n desde el exterior, eso no significa que no pueda usar sus valores despu&amp;eacute;s de que esa funci&amp;oacute;n se complete. PHP tiene una palabra clave &lt;code&gt;static&lt;/code&gt; bien conocida que se usa ampliamente en PHP orientado a objetos para definir m&amp;eacute;todos y propiedades est&amp;aacute;ticos, pero uno debe tener en cuenta que &lt;code&gt;static&lt;/code&gt; tambi&amp;eacute;n se puede usar dentro de las funciones para definir variables est&amp;aacute;ticas.</target>
        </trans-unit>
        <trans-unit id="d37e56f52da019cf5be302a35cc6e102b1d3ea80" translate="yes" xml:space="preserve">
          <source>Another way to keep values between function calls is to use closures. Closures were introduced in PHP 5.3. In two words they allow you to limit access to some set of variables within a function scope to another anonymous function that will be the only way to access them. Being in closure variables may imitate (more or less successfully) OOP concepts like 'class constants' (if they were passed in closure by value) or 'private properties' (if passed by reference) in structured programming.</source>
          <target state="translated">Otra forma de mantener los valores entre las llamadas a funciones es usar cierres.Los cierres fueron introducidos en PHP 5.3.En dos palabras,permiten limitar el acceso a algún conjunto de variables dentro del ámbito de una función a otra función anónima que será la única forma de acceder a ellas.Estando en cierre las variables pueden imitar (con más o menos éxito)conceptos OOP como 'constantes de clase' (si fueron pasadas en cierre por valor)o 'propiedades privadas' (si fueron pasadas por referencia)en programación estructurada.</target>
        </trans-unit>
        <trans-unit id="c81690f2d671c4f52561ea256066e3c802a3fde5" translate="yes" xml:space="preserve">
          <source>As said before, the global scope is somewhat special, and functions can explicitly import variables from it:</source>
          <target state="translated">Como ya se ha dicho,el ámbito global es algo especial,y las funciones pueden importar explícitamente variables de él:</target>
        </trans-unit>
        <trans-unit id="131355e4733c051ffbf0c276bc8ecd95e99a5ad2" translate="yes" xml:space="preserve">
          <source>But one subject that was missed was that of &lt;a href=&quot;https://php.net/manual/en/language.variables.superglobals.php&quot;&gt;superglobals&lt;/a&gt;, including the commonly used &lt;code&gt;$_POST&lt;/code&gt;, &lt;code&gt;$_GET&lt;/code&gt;, &lt;code&gt;$_SESSION&lt;/code&gt;, etc. These variables are arrays that are always available, in any scope, without a &lt;code&gt;global&lt;/code&gt; declaration.</source>
          <target state="translated">Pero un tema que se perdi&amp;oacute; fue el de las &lt;a href=&quot;https://php.net/manual/en/language.variables.superglobals.php&quot;&gt;superglobales&lt;/a&gt; , incluidos los &lt;code&gt;$_POST&lt;/code&gt; , &lt;code&gt;$_GET&lt;/code&gt; , &lt;code&gt;$_SESSION&lt;/code&gt; , etc. de uso com&amp;uacute;n . Estas variables son matrices que siempre est&amp;aacute;n disponibles, en cualquier &amp;aacute;mbito, sin una declaraci&amp;oacute;n &lt;code&gt;global&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c1d90c3f28d82a888a53b5293c825c1fcbf61454" translate="yes" xml:space="preserve">
          <source>Crossing scope boundaries</source>
          <target state="translated">Cruzando los límites del alcance</target>
        </trans-unit>
        <trans-unit id="2936310739c388c59bd9b9ae7f91baa8826864e1" translate="yes" xml:space="preserve">
          <source>Dealing with scoping issues may seem annoying, but &lt;strong&gt;limited variable scope is essential to writing complex applications!&lt;/strong&gt; If every variable you declare would be available from everywhere else inside your application, you'd be stepping all over your variables with no real way to track what changes what. There are only so many sensible names you can give to your variables, you probably want to use the variable &quot;&lt;code&gt;$name&lt;/code&gt;&quot; in more than one place. If you could only have this unique variable name once in your app, you'd have to resort to really complicated naming schemes to make sure your variables are unique and that you're not changing the wrong variable from the wrong piece of code.</source>
          <target state="translated">Tratar los problemas de alcance puede parecer molesto, &amp;iexcl;pero el &lt;strong&gt;alcance variable limitado es esencial para escribir aplicaciones complejas!&lt;/strong&gt; Si cada variable que declara estar&amp;iacute;a disponible desde cualquier otro lugar dentro de su aplicaci&amp;oacute;n, estar&amp;iacute;a pasando por encima de sus variables sin una forma real de rastrear qu&amp;eacute; cambia qu&amp;eacute;. Solo hay tantos nombres razonables que puede dar a sus variables, probablemente quiera usar la variable &quot; &lt;code&gt;$name&lt;/code&gt; &quot; en m&amp;aacute;s de un lugar. Si solo pudiera tener este nombre de variable &amp;uacute;nico una vez en su aplicaci&amp;oacute;n, tendr&amp;iacute;a que recurrir a esquemas de nombres realmente complicados para asegurarse de que sus variables sean &amp;uacute;nicas y que no est&amp;eacute; cambiando la variable incorrecta del c&amp;oacute;digo incorrecto.</target>
        </trans-unit>
        <trans-unit id="9ad03cae3f3faeea070af78623a2e5a9f3c527ac" translate="yes" xml:space="preserve">
          <source>Every new &lt;code&gt;function&lt;/code&gt; declaration introduces a new scope, it's that simple.</source>
          <target state="translated">Cada nueva declaraci&amp;oacute;n de &lt;code&gt;function&lt;/code&gt; introduce un nuevo alcance, es as&amp;iacute; de simple.</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="12461211a8851c6382719dc0035a3df5bc1b39e7" translate="yes" xml:space="preserve">
          <source>Extending the scope of variables into anonymous functions</source>
          <target state="translated">Extendiendo el alcance de las variables a funciones anónimas</target>
        </trans-unit>
        <trans-unit id="5d7a4224119faa0fd1a269c4341f2620d26f7167" translate="yes" xml:space="preserve">
          <source>File boundaries do &lt;em&gt;not separate&lt;/em&gt; scope:</source>
          <target state="translated">Los l&amp;iacute;mites del archivo &lt;em&gt;no separan el&lt;/em&gt; alcance:</target>
        </trans-unit>
        <trans-unit id="ae5429ab2e5c045bcac291b5854c96b21e0b41c1" translate="yes" xml:space="preserve">
          <source>For example, this function will print out the name of the user running the PHP script. The variable is available to the function without any problem.</source>
          <target state="translated">Por ejemplo,esta función imprimirá el nombre del usuario que ejecuta el script PHP.La variable está disponible para la función sin ningún problema.</target>
        </trans-unit>
        <trans-unit id="652a40170ba8591c912f745feccf44afade5a2b1" translate="yes" xml:space="preserve">
          <source>How is a scope defined in PHP?</source>
          <target state="translated">¿Cómo se define un alcance en PHP?</target>
        </trans-unit>
        <trans-unit id="922ea91a2ea4163e309e51776ea16ec24fecb388" translate="yes" xml:space="preserve">
          <source>I won't post a complete answer to the question, as the existing ones and the &lt;a href=&quot;https://www.php.net/manual/en/language.variables.scope.php&quot;&gt;PHP manual&lt;/a&gt; do a great job of explaining most of this.</source>
          <target state="translated">No publicar&amp;eacute; una respuesta completa a la pregunta, ya que las existentes y el &lt;a href=&quot;https://www.php.net/manual/en/language.variables.scope.php&quot;&gt;manual de PHP&lt;/a&gt; hacen un gran trabajo al explicar la mayor parte de esto.</target>
        </trans-unit>
        <trans-unit id="f1453b707e2be9fbe202d36fa790ada6cd6197ed" translate="yes" xml:space="preserve">
          <source>If there was no scope, what would the above function do? Where does &lt;code&gt;$bar&lt;/code&gt; come from? What state does it have? Is it even initialized? Do you have to check every time? This is not maintainable. Which brings us to...</source>
          <target state="translated">Si no hubiera alcance, &amp;iquest;qu&amp;eacute; har&amp;iacute;a la funci&amp;oacute;n anterior? &amp;iquest;De d&amp;oacute;nde viene &lt;code&gt;$bar&lt;/code&gt; ? &amp;iquest;Qu&amp;eacute; estado tiene? &amp;iquest;Es incluso inicializado? &amp;iquest;Tienes que revisar cada vez? Esto no es mantenible. Lo que nos lleva a ...</target>
        </trans-unit>
        <trans-unit id="3ea2c15205d5dc0df8889a788f44c499ed5daa89" translate="yes" xml:space="preserve">
          <source>If we'd defined &lt;code&gt;$counter&lt;/code&gt; without &lt;code&gt;static&lt;/code&gt; then each time echoed value would be the same as &lt;code&gt;$num&lt;/code&gt; parameter passed to the function. Using &lt;code&gt;static&lt;/code&gt; allows to build this simple counter without additional workaround.</source>
          <target state="translated">Si hubi&amp;eacute;ramos definido &lt;code&gt;$counter&lt;/code&gt; sin &lt;code&gt;static&lt;/code&gt; , cada vez que el valor reflejado ser&amp;iacute;a el mismo que el par&amp;aacute;metro &lt;code&gt;$num&lt;/code&gt; pasado a la funci&amp;oacute;n. El uso de &lt;code&gt;static&lt;/code&gt; permite construir este simple contador sin una soluci&amp;oacute;n adicional.</target>
        </trans-unit>
        <trans-unit id="016571b21f01e1f2f3c21aa699a0d85d4dd6f082" translate="yes" xml:space="preserve">
          <source>In the above example, &lt;code&gt;a.php&lt;/code&gt; was included inside &lt;code&gt;myFunc&lt;/code&gt;, any variables inside &lt;code&gt;a.php&lt;/code&gt; only have local function scope. Just because they &lt;em&gt;appear&lt;/em&gt; to be in the global scope in &lt;code&gt;a.php&lt;/code&gt; doesn't necessarily mean they are, it actually depends on which context that code is included/executed in.</source>
          <target state="translated">En el ejemplo anterior, &lt;code&gt;a.php&lt;/code&gt; se incluy&amp;oacute; dentro de &lt;code&gt;myFunc&lt;/code&gt; , cualquier variable dentro de &lt;code&gt;a.php&lt;/code&gt; solo tiene un alcance de funci&amp;oacute;n local. El hecho de que &lt;em&gt;parezcan&lt;/em&gt; estar en el &amp;aacute;mbito global en &lt;code&gt;a.php&lt;/code&gt; no significa necesariamente que lo est&amp;eacute;n, sino que depende del contexto en el que se incluye / ejecuta ese c&amp;oacute;digo.</target>
        </trans-unit>
        <trans-unit id="ec554381014e42af1e8683e98f1aefa0c936c9ba" translate="yes" xml:space="preserve">
          <source>Note: This is a reference question for dealing with variable scope in PHP. Please close any of the many questions fitting this pattern as a duplicate of this one.</source>
          <target state="translated">Nota:Esta es una pregunta de referencia para tratar con el alcance variable en PHP.Por favor,cierre cualquiera de las muchas preguntas que encajan en este patrón como un duplicado de ésta.</target>
        </trans-unit>
        <trans-unit id="61bbf9a337d819ea79646c2dcd315776ac0ab6f4" translate="yes" xml:space="preserve">
          <source>Observe:</source>
          <target state="translated">Observe:</target>
        </trans-unit>
        <trans-unit id="3b23157b44fc6889bccbe888ff20db2f5fe02bfd" translate="yes" xml:space="preserve">
          <source>Reference: What is variable scope, which variables are accessible from where and what are “undefined variable” errors</source>
          <target state="translated">Referencia:Qué es el alcance de las variables,qué variables son accesibles desde dónde y qué son los errores de las &quot;variables no definidas&quot;.</target>
        </trans-unit>
        <trans-unit id="bd4afc0073cac79bf136f8e1d922b83f76e969ad" translate="yes" xml:space="preserve">
          <source>Result:</source>
          <target state="translated">Result:</target>
        </trans-unit>
        <trans-unit id="f8d3b96b00480366f537ded0d968e8049343afb0" translate="yes" xml:space="preserve">
          <source>Scope and included files</source>
          <target state="translated">Alcance y archivos incluidos</target>
        </trans-unit>
        <trans-unit id="32740030904056284188e1034478ed55d904fcdd" translate="yes" xml:space="preserve">
          <source>Static function is kinda 'shared' between methods of objects of the
    same class. It is easy to understand by viewing the following example:</source>
          <target state="translated">La función estática es algo &quot;compartido&quot; entre los métodos de los objetos de la misma clase.Es fácil de entender viendo el siguiente ejemplo:</target>
        </trans-unit>
        <trans-unit id="f9790900a624b27bf7e92850b9dfa1ef4cea7d80" translate="yes" xml:space="preserve">
          <source>Static variable differs from ordinary variable defined in function's scope in case that it does not loose value when program execution leaves this scope. Let's consider the following example of using static variables:</source>
          <target state="translated">La variable estática difiere de la variable ordinaria definida en el ámbito de la función en caso de que no pierda valor cuando la ejecución del programa salga de este ámbito.Consideremos el siguiente ejemplo de utilización de variables estáticas:</target>
        </trans-unit>
        <trans-unit id="020d21b43c9e6b9b10c807da9b8098c7e835e866" translate="yes" xml:space="preserve">
          <source>Static variable exists only in a local function scope. It can not be
    accessed outside of the function it has been defined in. So you may 
    be sure that it will keep its value unchanged until the next call to
    that function.</source>
          <target state="translated">La variable estática sólo existe en el ámbito de una función local.No se puede acceder a ella fuera de la función en la que ha sido definida.Así que puede estar seguro de que mantendrá su valor sin cambios hasta la próxima llamada a esa función.</target>
        </trans-unit>
        <trans-unit id="5e9f12b97dc60a216b26c5009a27702745a72b74" translate="yes" xml:space="preserve">
          <source>Static variable may only be defined as a scalar or as a scalar 
    expression (since PHP 5.6). Assigning other values to it inevitably 
    leads to a failure at least at the moment this article was written.
Nevertheless you are able to do so just on the next line of your code:</source>
          <target state="translated">La variable estática sólo puede definirse como un escalar o como una expresión escalar (desde PHP 5.6).Asignarle otros valores conduce inevitablemente a un fracaso,al menos en el momento de escribir este artículo.Sin embargo,es posible hacerlo sólo en la siguiente línea de su código:</target>
        </trans-unit>
        <trans-unit id="47934530c39e0bc54c73c188c5dd0204fa9de270" translate="yes" xml:space="preserve">
          <source>The anonymous function explicitly includes &lt;code&gt;$foo&lt;/code&gt; from its surrounding scope. Note that this is not the same as &lt;em&gt;global&lt;/em&gt; scope.</source>
          <target state="translated">La funci&amp;oacute;n an&amp;oacute;nima incluye expl&amp;iacute;citamente &lt;code&gt;$foo&lt;/code&gt; de su alcance circundante. Tenga en cuenta que esto no es lo mismo que &lt;em&gt;el&lt;/em&gt; alcance &lt;em&gt;global&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="78945653e9206cea1434050a9d50d32f7de0e05e" translate="yes" xml:space="preserve">
          <source>The general rule of &quot;globals are bad&quot; is typically amended in PHP to &quot;globals are bad but superglobals are alright,&quot; as long as one is not misusing them. (All these variables are writable, so they could be used to avoid dependency injection if you were really terrible.)</source>
          <target state="translated">La regla general de &quot;los globos son malos&quot; es típicamente enmendada en PHP a &quot;los globos son malos pero los superglobos están bien&quot;,siempre y cuando no se haga un mal uso de ellos.(Todas estas variables son escribibles,así que podrían ser usadas para evitar la inyección de dependencia si fueras realmente terrible.)</target>
        </trans-unit>
        <trans-unit id="d2d45572c41369f79365e5e6f3eadd1968dffe83" translate="yes" xml:space="preserve">
          <source>The latter actually allows to use closures instead of static variables. What to use is always up to developer to decide but it should be mentioned that static variables are definitely useful when working with recursions and deserve to be noticed by devs.</source>
          <target state="translated">Este último permite en realidad utilizar cierres en lugar de variables estáticas.Lo que se utilice siempre depende del desarrollador,pero cabe mencionar que las variables estáticas son definitivamente útiles cuando se trabaja con recursividad y merecen ser notadas por los desarrolladores.</target>
        </trans-unit>
        <trans-unit id="4cc5dfbb24227901a1a1eb2cd1d96bd93f174b6c" translate="yes" xml:space="preserve">
          <source>The right way: passing variables in and out</source>
          <target state="translated">La forma correcta:pasando variables dentro y fuera</target>
        </trans-unit>
        <trans-unit id="c451255be5458efde09d08e0f66cadda0055ce56" translate="yes" xml:space="preserve">
          <source>The same rules apply to &lt;code&gt;include&lt;/code&gt;d code as applies to any other code: only &lt;code&gt;function&lt;/code&gt;s separate scope. For the purpose of scope, you may think of including files like copy and pasting code:</source>
          <target state="translated">Las mismas reglas se aplican para &lt;code&gt;include&lt;/code&gt; c&amp;oacute;digo d que se aplica a cualquier otro c&amp;oacute;digo: solo el alcance separado de la &lt;code&gt;function&lt;/code&gt; . Para fines de alcance, puede pensar en incluir archivos como copiar y pegar c&amp;oacute;digo:</target>
        </trans-unit>
        <trans-unit id="071e971943c4d359bae69ff92a351fa2dbd377fb" translate="yes" xml:space="preserve">
          <source>The variable &lt;code&gt;$bar&lt;/code&gt; is explicitly coming into this scope as function argument. Just looking at this function it's clear where the values it works with originate from. It then explicitly &lt;em&gt;returns&lt;/em&gt; a value. The caller has the confidence to know what variables the function will work with and where its return values come from:</source>
          <target state="translated">La variable &lt;code&gt;$bar&lt;/code&gt; entra expl&amp;iacute;citamente en este &amp;aacute;mbito como argumento de funci&amp;oacute;n. Simplemente mirando esta funci&amp;oacute;n queda claro de d&amp;oacute;nde se originan los valores con los que trabaja. Luego, &lt;em&gt;devuelve&lt;/em&gt; expl&amp;iacute;citamente un valor. La persona que llama tiene la confianza de saber con qu&amp;eacute; variables trabajar&amp;aacute; la funci&amp;oacute;n y de d&amp;oacute;nde provienen sus valores de retorno:</target>
        </trans-unit>
        <trans-unit id="5466b5ce2738d42daa755eea4ae20e0eebbb561a" translate="yes" xml:space="preserve">
          <source>The wrong way: &lt;code&gt;global&lt;/code&gt;</source>
          <target state="translated">El camino equivocado: &lt;code&gt;global&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bcd77de6020f24f4c53057055534728b8eb52912" translate="yes" xml:space="preserve">
          <source>There's no indication that this function has any &lt;em&gt;side effects&lt;/em&gt;, yet it does. This very easily becomes a tangled mess as some functions keep modifying &lt;em&gt;and requiring&lt;/em&gt; some global state. You want functions to be &lt;em&gt;stateless&lt;/em&gt;, acting only on their inputs and returning defined output, however many times you call them.</source>
          <target state="translated">No hay indicios de que esta funci&amp;oacute;n tenga ning&amp;uacute;n &lt;em&gt;efecto secundario&lt;/em&gt; , pero lo tiene. Esto se convierte f&amp;aacute;cilmente en un l&amp;iacute;o enredado ya que algunas funciones se siguen modificando &lt;em&gt;y requieren&lt;/em&gt; un estado global. Desea que las funciones no tengan &lt;em&gt;estado&lt;/em&gt; , que act&amp;uacute;en solo en sus entradas y que devuelvan salidas definidas, por muchas veces que las llame.</target>
        </trans-unit>
        <trans-unit id="2c7ad2ed688205af4b707f4b4e4cd61596a15526" translate="yes" xml:space="preserve">
          <source>These variables are not guaranteed to be present; an administrator can disable some or all of them using the &lt;a href=&quot;https://www.php.net/manual/en/ini.core.php#ini.variables-order&quot;&gt;&lt;code&gt;variables_order&lt;/code&gt; directive&lt;/a&gt; in &lt;code&gt;php.ini&lt;/code&gt;, but this is not common behaviour.</source>
          <target state="translated">No se garantiza que estas variables est&amp;eacute;n presentes; un administrador puede deshabilitar algunos o todos ellos utilizando la &lt;a href=&quot;https://www.php.net/manual/en/ini.core.php#ini.variables-order&quot;&gt;directiva &lt;code&gt;variables_order&lt;/code&gt; &lt;/a&gt; en &lt;code&gt;php.ini&lt;/code&gt; , pero este no es un comportamiento com&amp;uacute;n.</target>
        </trans-unit>
        <trans-unit id="729a9879fbcdd4d85db86c6d1b36908bb5bf9949" translate="yes" xml:space="preserve">
          <source>This function uses and modifies the global variable &lt;code&gt;$foo&lt;/code&gt;. &lt;strong&gt;Do not do this!&lt;/strong&gt;&lt;sub&gt;(Unless you really really really really know what you're doing, and even then: don't!)&lt;/sub&gt;</source>
          <target state="translated">Esta funci&amp;oacute;n usa y modifica la variable global &lt;code&gt;$foo&lt;/code&gt; . &lt;strong&gt;&amp;iexcl;No hagas esto!&lt;/strong&gt; &lt;sub&gt;(A menos que realmente realmente sepas lo que est&amp;aacute;s haciendo, e incluso entonces: &amp;iexcl;no!)&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="5f2b6b1f3294c6b1b9b389bdda4e74e3dd5b76b5" translate="yes" xml:space="preserve">
          <source>This only works with objects of the same class. If objects are from different classes (even extending one another) behavior of static vars will be as expected.</source>
          <target state="translated">Esto sólo funciona con objetos de la misma clase.Si los objetos son de diferentes clases (incluso extendiéndose unos a otros)el comportamiento de los vars estáticos será el esperado.</target>
        </trans-unit>
        <trans-unit id="93dce72d02933cfb02ef65e7b7d61dfcd89aefbc" translate="yes" xml:space="preserve">
          <source>To cache value which is normally better to retrieve once. For
example, result of reading immutable file on server.</source>
          <target state="translated">Para guardar el valor que normalmente es mejor recuperar una vez.Por ejemplo,el resultado de leer un archivo inmutable en el servidor.</target>
        </trans-unit>
        <trans-unit id="9366d1449ad260d48207a9d7c5869d5ac4aa8828" translate="yes" xml:space="preserve">
          <source>To store values between consequent calls to function.</source>
          <target state="translated">Para almacenar valores entre las llamadas consecutivas a la función.</target>
        </trans-unit>
        <trans-unit id="e070a653dbaac809338df34a78de0871495dad48" translate="yes" xml:space="preserve">
          <source>To store values between recursive calls when there is no way (or no
purpose) to pass them as params.</source>
          <target state="translated">Para almacenar valores entre llamadas recursivas cuando no hay manera (o no hay propósito)de pasarlos como parámetros.</target>
        </trans-unit>
        <trans-unit id="f0653e4d69e68c99f3473e13c00ee9cce6be01a2" translate="yes" xml:space="preserve">
          <source>Variables have a limited &quot;scope&quot;, or &quot;places from which they are accessible&quot;. Just because you wrote &lt;code&gt;$foo = 'bar';&lt;/code&gt; once &lt;em&gt;somewhere&lt;/em&gt; in your application doesn't mean you can refer to &lt;code&gt;$foo&lt;/code&gt; from &lt;em&gt;everywhere&lt;/em&gt; else inside the application. The variable &lt;code&gt;$foo&lt;/code&gt; has a certain scope within which it is valid and only code in the same scope has access to the variable.</source>
          <target state="translated">Las variables tienen un &quot;alcance&quot; o &quot;lugares desde los cuales son accesibles&quot;. Solo porque escribiste &lt;code&gt;$foo = 'bar';&lt;/code&gt; una vez en &lt;em&gt;alg&amp;uacute;n lugar&lt;/em&gt; de su aplicaci&amp;oacute;n no significa que puede consultar &lt;code&gt;$foo&lt;/code&gt; desde &lt;em&gt;cualquier&lt;/em&gt; otro lugar dentro de la aplicaci&amp;oacute;n. La variable &lt;code&gt;$foo&lt;/code&gt; tiene un cierto alcance dentro del cual es v&amp;aacute;lida y solo el c&amp;oacute;digo en el mismo alcance tiene acceso a la variable.</target>
        </trans-unit>
        <trans-unit id="3ec32b35eb769978685d4877ea5219c78f585a12" translate="yes" xml:space="preserve">
          <source>Very simple: PHP has &lt;em&gt;function scope&lt;/em&gt;. That's the only kind of scope separator that exists in PHP. Variables inside a function are only available inside that function. Variables outside of functions are available anywhere outside of functions, but not inside any function. This means there's one special scope in PHP: the &lt;em&gt;global&lt;/em&gt; scope. Any variable declared outside of any function is within this global scope.</source>
          <target state="translated">Muy simple: PHP tiene &lt;em&gt;alcance de funci&amp;oacute;n&lt;/em&gt; . Ese es el &amp;uacute;nico tipo de separador de alcance que existe en PHP. Las variables dentro de una funci&amp;oacute;n solo est&amp;aacute;n disponibles dentro de esa funci&amp;oacute;n. Las variables fuera de las funciones est&amp;aacute;n disponibles en cualquier lugar fuera de las funciones, pero no dentro de ninguna funci&amp;oacute;n. Esto significa que hay un alcance especial en PHP: el alcance &lt;em&gt;global&lt;/em&gt; . Cualquier variable declarada fuera de cualquier funci&amp;oacute;n est&amp;aacute; dentro de este alcance global.</target>
        </trans-unit>
        <trans-unit id="af1e7856d7ec0ce5f15615436c1ef95f0cf0aae6" translate="yes" xml:space="preserve">
          <source>What about functions inside functions and classes?</source>
          <target state="translated">¿Qué hay de las funciones dentro de las funciones y clases?</target>
        </trans-unit>
        <trans-unit id="6254f2b5f8bf1ba12db135d773afffbbef9b6be2" translate="yes" xml:space="preserve">
          <source>What is &quot;variable scope&quot; in PHP? Are variables from one .php file accessible in another? Why do I sometimes get &lt;em&gt;&quot;undefined variable&quot;&lt;/em&gt; errors?</source>
          <target state="translated">&amp;iquest;Qu&amp;eacute; es el &quot;alcance variable&quot; en PHP? &amp;iquest;Son accesibles las variables de un archivo .php en otro? &amp;iquest;Por qu&amp;eacute; a veces obtengo errores de &lt;em&gt;&quot;variable indefinida&quot;&lt;/em&gt; ?</target>
        </trans-unit>
        <trans-unit id="bb6449bdee5b63295f7aa04798c75018ea21ef24" translate="yes" xml:space="preserve">
          <source>What is &quot;variable scope&quot;?</source>
          <target state="translated">¿Qué es el &quot;alcance variable&quot;?</target>
        </trans-unit>
        <trans-unit id="96131e2666075b2978079441b07aa07043ed2fa4" translate="yes" xml:space="preserve">
          <source>What is scope good for?</source>
          <target state="translated">¿Para qué sirve el alcance?</target>
        </trans-unit>
        <trans-unit id="ac89234b35981829ff5582a0e47710a2abd12fb2" translate="yes" xml:space="preserve">
          <source>You should avoid using the global scope in any way as much as possible; most certainly you should not be &quot;pulling&quot; variables out of the global scope into a local scope.</source>
          <target state="translated">Se debe evitar en lo posible utilizar el ámbito global;ciertamente no se debe &quot;sacar&quot; las variables del ámbito global para pasarlas a un ámbito local.</target>
        </trans-unit>
        <trans-unit id="1adaa84dc07a16d34ede5b9a70713ff832a0f853" translate="yes" xml:space="preserve">
          <source>classes</source>
          <target state="translated">classes</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
