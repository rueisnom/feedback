<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/16959576">
    <body>
      <group id="16959576">
        <trans-unit id="a838e95c861b722e4d4150b9f6f1920e5169c62c" translate="yes" xml:space="preserve">
          <source>(anonymous) functions inside functions</source>
          <target state="translated">関数内関数</target>
        </trans-unit>
        <trans-unit id="ab5b78942d8672ca80abd97cd7594c7910b40e16" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$GLOBALS&lt;/code&gt; - All the global variables in the current script</source>
          <target state="translated">&lt;code&gt;$GLOBALS&lt;/code&gt; 現在のスクリプトのすべてのグローバル変数</target>
        </trans-unit>
        <trans-unit id="e447db7dd407c0465d263640675852f291dfb97c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$_COOKIE&lt;/code&gt; - Cookies passed with the current request</source>
          <target state="translated">&lt;code&gt;$_COOKIE&lt;/code&gt; 現在のリクエストで渡されたCookie</target>
        </trans-unit>
        <trans-unit id="23f8f9f798cae387bccb009c8570466e221ed320" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$_ENV&lt;/code&gt; - The environment variables of the current script</source>
          <target state="translated">&lt;code&gt;$_ENV&lt;/code&gt; 現在のスクリプトの環境変数</target>
        </trans-unit>
        <trans-unit id="fe1c222af7a08d0d9c3ec4bb66ceb471334a1d2e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$_FILES&lt;/code&gt; - Files passed in an HTTP POST request with a &lt;code&gt;multipart/form-data&lt;/code&gt; MIME type</source>
          <target state="translated">&lt;code&gt;$_FILES&lt;/code&gt; - &lt;code&gt;multipart/form-data&lt;/code&gt; MIMEタイプのHTTP POSTリクエストで渡されたファイル</target>
        </trans-unit>
        <trans-unit id="3275cc5081faa33f360f5ef474b432441bcaa20f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$_GET&lt;/code&gt; - Values passed in the query string of the URL, regardless of the HTTP method used for the request</source>
          <target state="translated">&lt;code&gt;$_GET&lt;/code&gt; リクエストに使用されるHTTPメソッドに関係なく、URLのクエリ文字列で渡される値</target>
        </trans-unit>
        <trans-unit id="48134a27485958dd1da440984cdd0905a6e393d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$_POST&lt;/code&gt; - Values passed in an HTTP POST request with &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; or &lt;code&gt;multipart/form-data&lt;/code&gt; MIME types</source>
          <target state="translated">&lt;code&gt;$_POST&lt;/code&gt; - &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; または &lt;code&gt;multipart/form-data&lt;/code&gt; MIMEタイプでHTTP POSTリクエストに渡される値</target>
        </trans-unit>
        <trans-unit id="6446cb3a90bcb73f4a0b18700333ae3ebffd3183" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$_REQUEST&lt;/code&gt; - Typically a combination of &lt;code&gt;$_GET&lt;/code&gt; and &lt;code&gt;$_POST&lt;/code&gt;, but sometimes &lt;code&gt;$_COOKIES&lt;/code&gt;. The content is determined by the &lt;a href=&quot;https://www.php.net/manual/en/ini.core.php#ini.request-order&quot;&gt;&lt;code&gt;request_order&lt;/code&gt; directive&lt;/a&gt; in &lt;code&gt;php.ini&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$_REQUEST&lt;/code&gt; 通常は &lt;code&gt;$_GET&lt;/code&gt; と &lt;code&gt;$_POST&lt;/code&gt; 組み合わせですが、場合によっては &lt;code&gt;$_COOKIES&lt;/code&gt; です。 内容は &lt;code&gt;php.ini&lt;/code&gt; の&lt;a href=&quot;https://www.php.net/manual/en/ini.core.php#ini.request-order&quot;&gt; &lt;code&gt;request_order&lt;/code&gt; ディレクティブ&lt;/a&gt;によって決定されます。</target>
        </trans-unit>
        <trans-unit id="7c57ad330fea26b47817fd32122a481ce3485a56" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$_SERVER&lt;/code&gt; - Information on the server and execution environment</source>
          <target state="translated">&lt;code&gt;$_SERVER&lt;/code&gt; サーバーと実行環境に関する情報</target>
        </trans-unit>
        <trans-unit id="06bfdc6ae6b40934570555d25de4ec53967c8a4d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$_SESSION&lt;/code&gt; - Session variables stored internally by PHP</source>
          <target state="translated">&lt;code&gt;$_SESSION&lt;/code&gt; -PHPによって内部的に保存されたセッション変数</target>
        </trans-unit>
        <trans-unit id="7a54fd83e265d890f6ebf01bc2fdf3d2c3e6969d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$foo&lt;/code&gt; is in the &lt;em&gt;global&lt;/em&gt; scope, &lt;code&gt;$baz&lt;/code&gt; is in a &lt;em&gt;local&lt;/em&gt; scope inside &lt;code&gt;myFunc&lt;/code&gt;. Only code inside &lt;code&gt;myFunc&lt;/code&gt; has access to &lt;code&gt;$baz&lt;/code&gt;. Only code &lt;em&gt;outside&lt;/em&gt;&lt;code&gt;myFunc&lt;/code&gt; has access to &lt;code&gt;$foo&lt;/code&gt;. Neither has access to the other:</source>
          <target state="translated">&lt;code&gt;$foo&lt;/code&gt; は&lt;em&gt;グローバル&lt;/em&gt;スコープにあり、 &lt;code&gt;$baz&lt;/code&gt; は &lt;code&gt;myFunc&lt;/code&gt; 内の&lt;em&gt;ローカル&lt;/em&gt;スコープにあります 。 &lt;code&gt;myFunc&lt;/code&gt; 内のコードのみが &lt;code&gt;$baz&lt;/code&gt; アクセスできます。 &lt;code&gt;myFunc&lt;/code&gt; &lt;em&gt;外の&lt;/em&gt;コードのみが &lt;code&gt;$foo&lt;/code&gt; アクセスできます。 どちらも他にアクセスできません：</target>
        </trans-unit>
        <trans-unit id="860f3738e06320b6aa3a5029bf8cabd8046b48e2" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;a.php&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;a.php&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4906962156ed3cee35484627e34c88784c364e12" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;b.php&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;b.php&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="148c38c993db37ff964ae08c70d69d37223693b8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;c.php&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;c.php&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ee745f8274eea67c263f470c1a6b81cd56ebc429" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Is static variable the only way to keep values between calls to a function?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;静的変数は、関数の呼び出し間で値を保持する唯一の方法ですか？&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d16fd476d750bb2f2055776c40ba91b588355415" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Static variables use-cases&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;静的変数の使用例&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8c8b0fdf7a7ff852b65f48f1feaeed776c9bf16d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Tricks&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Tricks&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a4bac3cd12a4a22859cd13a8ef9ac8e413098752" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;What is it 'static variable'?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;「静的変数」とは何ですか？&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7a74d4fc619243713656d431f8206726c097f47d" translate="yes" xml:space="preserve">
          <source>A list of current superglobals:</source>
          <target state="translated">現在のスーパーグロバルのリスト。</target>
        </trans-unit>
        <trans-unit id="2ebda5656975b8f33dec11db266353e84483083d" translate="yes" xml:space="preserve">
          <source>All the caller of this function sees is this:</source>
          <target state="translated">この関数の呼び出し元が見ているのはこれだけです。</target>
        </trans-unit>
        <trans-unit id="f58e02d5845b0bfb45a72c39d1f6598fa7ed232b" translate="yes" xml:space="preserve">
          <source>Although variables defined inside of a function's scope can not be accessed from the outside that does not mean you can not use their values after that function completes. PHP has a well known &lt;code&gt;static&lt;/code&gt; keyword that is widely used in object-oriented PHP for defining static methods and properties but one should keep in mind that &lt;code&gt;static&lt;/code&gt; may also be used inside functions to define static variables.</source>
          <target state="translated">関数のスコープ内で定義された変数に外部からアクセスすることはできませんが、関数が完了した後でその値を使用できないことを意味しません。 PHPには、静的メソッドとプロパティを定義するためにオブジェクト指向PHPで広く使用されている有名 &lt;code&gt;static&lt;/code&gt; キーワードがありますが、 &lt;code&gt;static&lt;/code&gt; を定義するために関数内でもstaticを使用できることに注意してください。</target>
        </trans-unit>
        <trans-unit id="d37e56f52da019cf5be302a35cc6e102b1d3ea80" translate="yes" xml:space="preserve">
          <source>Another way to keep values between function calls is to use closures. Closures were introduced in PHP 5.3. In two words they allow you to limit access to some set of variables within a function scope to another anonymous function that will be the only way to access them. Being in closure variables may imitate (more or less successfully) OOP concepts like 'class constants' (if they were passed in closure by value) or 'private properties' (if passed by reference) in structured programming.</source>
          <target state="translated">関数呼び出しの間に値を保持するもうひとつの方法は、クロージャを使用することです。クローサは PHP 5.3 で導入されました。つまり、関数スコープ内の変数へのアクセスを匿名の関数に限定し、その関数が唯一のアクセス手段となるということです。クロージャ内にある変数は、構造化プログラミングにおける 'クラス定数' (値でクロージャに渡された場合)や 'プライベートプロパティ' (参照で渡された場合)のような OOP の概念を (多かれ少なかれ)真似しているかもしれません。</target>
        </trans-unit>
        <trans-unit id="c81690f2d671c4f52561ea256066e3c802a3fde5" translate="yes" xml:space="preserve">
          <source>As said before, the global scope is somewhat special, and functions can explicitly import variables from it:</source>
          <target state="translated">前述したように、グローバルスコープはやや特殊で、関数はそこから明示的に変数をインポートすることができます。</target>
        </trans-unit>
        <trans-unit id="131355e4733c051ffbf0c276bc8ecd95e99a5ad2" translate="yes" xml:space="preserve">
          <source>But one subject that was missed was that of &lt;a href=&quot;https://php.net/manual/en/language.variables.superglobals.php&quot;&gt;superglobals&lt;/a&gt;, including the commonly used &lt;code&gt;$_POST&lt;/code&gt;, &lt;code&gt;$_GET&lt;/code&gt;, &lt;code&gt;$_SESSION&lt;/code&gt;, etc. These variables are arrays that are always available, in any scope, without a &lt;code&gt;global&lt;/code&gt; declaration.</source>
          <target state="translated">しかし、見落とされた1つの主題は、一般的に使用される &lt;code&gt;$_POST&lt;/code&gt; 、 &lt;code&gt;$_GET&lt;/code&gt; 、 &lt;code&gt;$_SESSION&lt;/code&gt; などを含む&lt;a href=&quot;https://php.net/manual/en/language.variables.superglobals.php&quot;&gt;スーパーグローバルの&lt;/a&gt;主題でした。これらの変数は、 &lt;code&gt;global&lt;/code&gt; 宣言なしで、どのスコープでも常に使用可能な配列です。</target>
        </trans-unit>
        <trans-unit id="c1d90c3f28d82a888a53b5293c825c1fcbf61454" translate="yes" xml:space="preserve">
          <source>Crossing scope boundaries</source>
          <target state="translated">範囲の境界を越える</target>
        </trans-unit>
        <trans-unit id="2936310739c388c59bd9b9ae7f91baa8826864e1" translate="yes" xml:space="preserve">
          <source>Dealing with scoping issues may seem annoying, but &lt;strong&gt;limited variable scope is essential to writing complex applications!&lt;/strong&gt; If every variable you declare would be available from everywhere else inside your application, you'd be stepping all over your variables with no real way to track what changes what. There are only so many sensible names you can give to your variables, you probably want to use the variable &quot;&lt;code&gt;$name&lt;/code&gt;&quot; in more than one place. If you could only have this unique variable name once in your app, you'd have to resort to really complicated naming schemes to make sure your variables are unique and that you're not changing the wrong variable from the wrong piece of code.</source>
          <target state="translated">スコーピングの問題に対処するのは面倒なように思えるかもしれませんが、 &lt;strong&gt;複雑なアプリケーションを作成するには&lt;/strong&gt; 、 &lt;strong&gt;限られた変数スコープが不可欠です。&lt;/strong&gt; 宣言したすべての変数がアプリケーション内の他のどこからでも利用できる場合、何が何を変更するかを追跡する実際の方法がなく、変数をすべてステップオーバーすることになります。 変数に付けることができる &lt;code&gt;$name&lt;/code&gt; は非常に多くあります。おそらく、変数 &quot; $ name &quot;を複数の場所で使用したいと思うでしょう。 アプリでこの一意の変数名を1回しか使用できない場合、変数が一意であり、間違った変数を間違ったコードから変更していないことを確認するために、非常に複雑な命名規則に頼る必要があります。</target>
        </trans-unit>
        <trans-unit id="9ad03cae3f3faeea070af78623a2e5a9f3c527ac" translate="yes" xml:space="preserve">
          <source>Every new &lt;code&gt;function&lt;/code&gt; declaration introduces a new scope, it's that simple.</source>
          <target state="translated">すべての新しい &lt;code&gt;function&lt;/code&gt; 宣言は新しいスコープを導入し、それはとても簡単です。</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="12461211a8851c6382719dc0035a3df5bc1b39e7" translate="yes" xml:space="preserve">
          <source>Extending the scope of variables into anonymous functions</source>
          <target state="translated">変数のスコープを匿名関数に拡張する</target>
        </trans-unit>
        <trans-unit id="5d7a4224119faa0fd1a269c4341f2620d26f7167" translate="yes" xml:space="preserve">
          <source>File boundaries do &lt;em&gt;not separate&lt;/em&gt; scope:</source>
          <target state="translated">ファイル境界はスコープを&lt;em&gt;分離&lt;/em&gt;し&lt;em&gt;ません&lt;/em&gt; ：</target>
        </trans-unit>
        <trans-unit id="ae5429ab2e5c045bcac291b5854c96b21e0b41c1" translate="yes" xml:space="preserve">
          <source>For example, this function will print out the name of the user running the PHP script. The variable is available to the function without any problem.</source>
          <target state="translated">例えば、この関数はPHPスクリプトを実行しているユーザーの名前を出力します。この変数は問題なく関数で利用できるようになっています。</target>
        </trans-unit>
        <trans-unit id="652a40170ba8591c912f745feccf44afade5a2b1" translate="yes" xml:space="preserve">
          <source>How is a scope defined in PHP?</source>
          <target state="translated">PHPではスコープはどのように定義されていますか?</target>
        </trans-unit>
        <trans-unit id="922ea91a2ea4163e309e51776ea16ec24fecb388" translate="yes" xml:space="preserve">
          <source>I won't post a complete answer to the question, as the existing ones and the &lt;a href=&quot;https://www.php.net/manual/en/language.variables.scope.php&quot;&gt;PHP manual&lt;/a&gt; do a great job of explaining most of this.</source>
          <target state="translated">既存の質問と&lt;a href=&quot;https://www.php.net/manual/en/language.variables.scope.php&quot;&gt;PHPのマニュアル&lt;/a&gt;はこれのほとんどを説明するのに優れているので、質問に対する完全な回答は掲載しません。</target>
        </trans-unit>
        <trans-unit id="f1453b707e2be9fbe202d36fa790ada6cd6197ed" translate="yes" xml:space="preserve">
          <source>If there was no scope, what would the above function do? Where does &lt;code&gt;$bar&lt;/code&gt; come from? What state does it have? Is it even initialized? Do you have to check every time? This is not maintainable. Which brings us to...</source>
          <target state="translated">スコープがない場合、上記の関数は何をしますか？ &lt;code&gt;$bar&lt;/code&gt; どこから来たのですか？ それはどのような状態ですか？ それも初期化されていますか？ 毎回チェックする必要がありますか？ これは維持できません。 これにより...</target>
        </trans-unit>
        <trans-unit id="3ea2c15205d5dc0df8889a788f44c499ed5daa89" translate="yes" xml:space="preserve">
          <source>If we'd defined &lt;code&gt;$counter&lt;/code&gt; without &lt;code&gt;static&lt;/code&gt; then each time echoed value would be the same as &lt;code&gt;$num&lt;/code&gt; parameter passed to the function. Using &lt;code&gt;static&lt;/code&gt; allows to build this simple counter without additional workaround.</source>
          <target state="translated">&lt;code&gt;static&lt;/code&gt; なしで &lt;code&gt;$counter&lt;/code&gt; を定義した場合、エコーされる値は &lt;code&gt;$num&lt;/code&gt; 、関数に渡される$ numパラメーターと同じになります。 &lt;code&gt;static&lt;/code&gt; を使用すると、追加の回避策なしでこの単純なカウンターを構築できます。</target>
        </trans-unit>
        <trans-unit id="016571b21f01e1f2f3c21aa699a0d85d4dd6f082" translate="yes" xml:space="preserve">
          <source>In the above example, &lt;code&gt;a.php&lt;/code&gt; was included inside &lt;code&gt;myFunc&lt;/code&gt;, any variables inside &lt;code&gt;a.php&lt;/code&gt; only have local function scope. Just because they &lt;em&gt;appear&lt;/em&gt; to be in the global scope in &lt;code&gt;a.php&lt;/code&gt; doesn't necessarily mean they are, it actually depends on which context that code is included/executed in.</source>
          <target state="translated">上記の例では、 &lt;code&gt;a.php&lt;/code&gt; はmyFunc内に含まれて &lt;code&gt;myFunc&lt;/code&gt; 、 &lt;code&gt;a.php&lt;/code&gt; 内の変数はローカル関数スコープのみを持っています。 それら&lt;em&gt;が&lt;/em&gt; &lt;code&gt;a.php&lt;/code&gt; のグローバルスコープにあるように&lt;em&gt;見える&lt;/em&gt;からといって、必ずしもそうであるとは限らないため、実際には、コードが含まれている/実行されているコンテキストによって異なります。</target>
        </trans-unit>
        <trans-unit id="ec554381014e42af1e8683e98f1aefa0c936c9ba" translate="yes" xml:space="preserve">
          <source>Note: This is a reference question for dealing with variable scope in PHP. Please close any of the many questions fitting this pattern as a duplicate of this one.</source>
          <target state="translated">注意:これはPHPで変数のスコープを扱うための参考質問です。このパターンに当てはまる多くの質問は、この質問の重複として閉じてください。</target>
        </trans-unit>
        <trans-unit id="61bbf9a337d819ea79646c2dcd315776ac0ab6f4" translate="yes" xml:space="preserve">
          <source>Observe:</source>
          <target state="translated">Observe:</target>
        </trans-unit>
        <trans-unit id="3b23157b44fc6889bccbe888ff20db2f5fe02bfd" translate="yes" xml:space="preserve">
          <source>Reference: What is variable scope, which variables are accessible from where and what are “undefined variable” errors</source>
          <target state="translated">参考にさせていただきます。変数スコープとは何か、どの変数がどこからアクセスできるのか、&quot;未定義変数 &quot;エラーとは何か</target>
        </trans-unit>
        <trans-unit id="bd4afc0073cac79bf136f8e1d922b83f76e969ad" translate="yes" xml:space="preserve">
          <source>Result:</source>
          <target state="translated">Result:</target>
        </trans-unit>
        <trans-unit id="f8d3b96b00480366f537ded0d968e8049343afb0" translate="yes" xml:space="preserve">
          <source>Scope and included files</source>
          <target state="translated">スコープと同梱されているファイル</target>
        </trans-unit>
        <trans-unit id="32740030904056284188e1034478ed55d904fcdd" translate="yes" xml:space="preserve">
          <source>Static function is kinda 'shared' between methods of objects of the
    same class. It is easy to understand by viewing the following example:</source>
          <target state="translated">静的関数は、同じクラスのオブジェクトのメソッド間で共有されています。以下の例を見ていただくとわかりやすいと思います。</target>
        </trans-unit>
        <trans-unit id="f9790900a624b27bf7e92850b9dfa1ef4cea7d80" translate="yes" xml:space="preserve">
          <source>Static variable differs from ordinary variable defined in function's scope in case that it does not loose value when program execution leaves this scope. Let's consider the following example of using static variables:</source>
          <target state="translated">静的変数は、関数のスコープに定義されている通常の変数とは異なり、プログラムの実行がこのスコープから外れても値が失われないという点が異なります。静的変数を使用する場合の例を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="020d21b43c9e6b9b10c807da9b8098c7e835e866" translate="yes" xml:space="preserve">
          <source>Static variable exists only in a local function scope. It can not be
    accessed outside of the function it has been defined in. So you may 
    be sure that it will keep its value unchanged until the next call to
    that function.</source>
          <target state="translated">静的変数はローカル関数スコープ内にのみ存在します。定義された関数の外部からはアクセスできません。そのため、次にその関数を呼び出すまで値を変更しないようにしておくとよいでしょう。</target>
        </trans-unit>
        <trans-unit id="5e9f12b97dc60a216b26c5009a27702745a72b74" translate="yes" xml:space="preserve">
          <source>Static variable may only be defined as a scalar or as a scalar 
    expression (since PHP 5.6). Assigning other values to it inevitably 
    leads to a failure at least at the moment this article was written.
Nevertheless you are able to do so just on the next line of your code:</source>
          <target state="translated">静的変数はスカラかスカラ式でしか定義できません (PHP 5.6 以降)。これに他の値を代入すると、少なくともこの記事が書かれた時点では必然的に失敗することになります。それにもかかわらず、コードの次の行でそれを行うことができます。</target>
        </trans-unit>
        <trans-unit id="47934530c39e0bc54c73c188c5dd0204fa9de270" translate="yes" xml:space="preserve">
          <source>The anonymous function explicitly includes &lt;code&gt;$foo&lt;/code&gt; from its surrounding scope. Note that this is not the same as &lt;em&gt;global&lt;/em&gt; scope.</source>
          <target state="translated">無名関数には、周囲のスコープから明示的に &lt;code&gt;$foo&lt;/code&gt; が含まれます。 これは&lt;em&gt;グローバル&lt;/em&gt;スコープと同じではないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="78945653e9206cea1434050a9d50d32f7de0e05e" translate="yes" xml:space="preserve">
          <source>The general rule of &quot;globals are bad&quot; is typically amended in PHP to &quot;globals are bad but superglobals are alright,&quot; as long as one is not misusing them. (All these variables are writable, so they could be used to avoid dependency injection if you were really terrible.)</source>
          <target state="translated">グローバルは悪い」という一般的なルールは、悪用していない限り、PHPでは一般的に「グローバルは悪いが、スーパーグローバルは大丈夫」というように修正されています。(これらの変数はすべて書き込み可能なので、下手をすれば依存性注入を避けるために使うことができます)。</target>
        </trans-unit>
        <trans-unit id="d2d45572c41369f79365e5e6f3eadd1968dffe83" translate="yes" xml:space="preserve">
          <source>The latter actually allows to use closures instead of static variables. What to use is always up to developer to decide but it should be mentioned that static variables are definitely useful when working with recursions and deserve to be noticed by devs.</source>
          <target state="translated">後者の方が実際には静的変数の代わりにクロージャを使うことができます。何を使うかは常に開発者の判断に委ねられていますが、静的変数は再帰処理を行う際には間違いなく有用であり、開発者の注目を集めるに値するものであることを述べておきます。</target>
        </trans-unit>
        <trans-unit id="4cc5dfbb24227901a1a1eb2cd1d96bd93f174b6c" translate="yes" xml:space="preserve">
          <source>The right way: passing variables in and out</source>
          <target state="translated">正しい方法:変数をインとアウトに渡す</target>
        </trans-unit>
        <trans-unit id="c451255be5458efde09d08e0f66cadda0055ce56" translate="yes" xml:space="preserve">
          <source>The same rules apply to &lt;code&gt;include&lt;/code&gt;d code as applies to any other code: only &lt;code&gt;function&lt;/code&gt;s separate scope. For the purpose of scope, you may think of including files like copy and pasting code:</source>
          <target state="translated">他のコードに適用されるのと同じルール &lt;code&gt;include&lt;/code&gt; dコードを含めるために適用されます。 &lt;code&gt;function&lt;/code&gt; のみが別のスコープです。 スコープの目的で、コードのコピーや貼り付けのようなファイルを含めることを考えるかもしれません：</target>
        </trans-unit>
        <trans-unit id="071e971943c4d359bae69ff92a351fa2dbd377fb" translate="yes" xml:space="preserve">
          <source>The variable &lt;code&gt;$bar&lt;/code&gt; is explicitly coming into this scope as function argument. Just looking at this function it's clear where the values it works with originate from. It then explicitly &lt;em&gt;returns&lt;/em&gt; a value. The caller has the confidence to know what variables the function will work with and where its return values come from:</source>
          <target state="translated">変数 &lt;code&gt;$bar&lt;/code&gt; は、関数の引数として明示的にこのスコープに入ります。 この関数を見ると、関数の値がどこから来ているかがわかります。 次に、明示的&lt;em&gt;に&lt;/em&gt;値を&lt;em&gt;返し&lt;/em&gt;ます。 呼び出し元は、関数が使用する変数とその戻り値がどこから来るかを知る自信があります。</target>
        </trans-unit>
        <trans-unit id="5466b5ce2738d42daa755eea4ae20e0eebbb561a" translate="yes" xml:space="preserve">
          <source>The wrong way: &lt;code&gt;global&lt;/code&gt;</source>
          <target state="translated">間違った方法： &lt;code&gt;global&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bcd77de6020f24f4c53057055534728b8eb52912" translate="yes" xml:space="preserve">
          <source>There's no indication that this function has any &lt;em&gt;side effects&lt;/em&gt;, yet it does. This very easily becomes a tangled mess as some functions keep modifying &lt;em&gt;and requiring&lt;/em&gt; some global state. You want functions to be &lt;em&gt;stateless&lt;/em&gt;, acting only on their inputs and returning defined output, however many times you call them.</source>
          <target state="translated">この関数&lt;em&gt;に副作用&lt;/em&gt;があることを示すものはありませんが、 &lt;em&gt;副作用&lt;/em&gt;があります。 一部の関数は変更&lt;em&gt;を&lt;/em&gt;続け&lt;em&gt;、&lt;/em&gt;いくつかのグローバルな状態&lt;em&gt;を必要とする&lt;/em&gt;ため、これは非常に簡単に混乱します。 関数を&lt;em&gt;ステートレス&lt;/em&gt;にして、入力にのみ作用し、定義された出力を返すようにしますが、何度も呼び出します。</target>
        </trans-unit>
        <trans-unit id="2c7ad2ed688205af4b707f4b4e4cd61596a15526" translate="yes" xml:space="preserve">
          <source>These variables are not guaranteed to be present; an administrator can disable some or all of them using the &lt;a href=&quot;https://www.php.net/manual/en/ini.core.php#ini.variables-order&quot;&gt;&lt;code&gt;variables_order&lt;/code&gt; directive&lt;/a&gt; in &lt;code&gt;php.ini&lt;/code&gt;, but this is not common behaviour.</source>
          <target state="translated">これらの変数が存在することは保証されていません。 管理者は &lt;code&gt;php.ini&lt;/code&gt; の&lt;a href=&quot;https://www.php.net/manual/en/ini.core.php#ini.variables-order&quot;&gt; &lt;code&gt;variables_order&lt;/code&gt; ディレクティブ&lt;/a&gt;を使用してそれらの一部またはすべてを無効にできますが、これは一般的な動作ではありません。</target>
        </trans-unit>
        <trans-unit id="729a9879fbcdd4d85db86c6d1b36908bb5bf9949" translate="yes" xml:space="preserve">
          <source>This function uses and modifies the global variable &lt;code&gt;$foo&lt;/code&gt;. &lt;strong&gt;Do not do this!&lt;/strong&gt;&lt;sub&gt;(Unless you really really really really know what you're doing, and even then: don't!)&lt;/sub&gt;</source>
          <target state="translated">この関数は、グローバル変数 &lt;code&gt;$foo&lt;/code&gt; 使用および変更します。 &lt;strong&gt;こんなことしないで！&lt;/strong&gt; &lt;sub&gt;（あなたが本当に本当に本当に本当に本当に本当にあなたが何をしているかを知っているのでなければ、それでも：知らないでください！）&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="5f2b6b1f3294c6b1b9b389bdda4e74e3dd5b76b5" translate="yes" xml:space="preserve">
          <source>This only works with objects of the same class. If objects are from different classes (even extending one another) behavior of static vars will be as expected.</source>
          <target state="translated">これは、同じクラスのオブジェクトに対してのみ動作します。オブジェクトが異なるクラスのものであれば (互いに拡張している場合でも)、静的変数の動作は期待通りになります。</target>
        </trans-unit>
        <trans-unit id="93dce72d02933cfb02ef65e7b7d61dfcd89aefbc" translate="yes" xml:space="preserve">
          <source>To cache value which is normally better to retrieve once. For
example, result of reading immutable file on server.</source>
          <target state="translated">通常は一度取得した方が良い値をキャッシュします。例えば、サーバ上の不変ファイルを読み込んだ結果などです。</target>
        </trans-unit>
        <trans-unit id="9366d1449ad260d48207a9d7c5869d5ac4aa8828" translate="yes" xml:space="preserve">
          <source>To store values between consequent calls to function.</source>
          <target state="translated">関数の呼び出しの間に値を保存します。</target>
        </trans-unit>
        <trans-unit id="e070a653dbaac809338df34a78de0871495dad48" translate="yes" xml:space="preserve">
          <source>To store values between recursive calls when there is no way (or no
purpose) to pass them as params.</source>
          <target state="translated">パラメータとして渡す方法がない(または目的がない)場合に、再帰的な呼び出しの間に値を保存します。</target>
        </trans-unit>
        <trans-unit id="f0653e4d69e68c99f3473e13c00ee9cce6be01a2" translate="yes" xml:space="preserve">
          <source>Variables have a limited &quot;scope&quot;, or &quot;places from which they are accessible&quot;. Just because you wrote &lt;code&gt;$foo = 'bar';&lt;/code&gt; once &lt;em&gt;somewhere&lt;/em&gt; in your application doesn't mean you can refer to &lt;code&gt;$foo&lt;/code&gt; from &lt;em&gt;everywhere&lt;/em&gt; else inside the application. The variable &lt;code&gt;$foo&lt;/code&gt; has a certain scope within which it is valid and only code in the same scope has access to the variable.</source>
          <target state="translated">変数には「スコープ」または「アクセス可能な場所」が制限されています。 &lt;code&gt;$foo = 'bar';&lt;/code&gt; と書いたからといって、 アプリケーションの&lt;em&gt;どこか&lt;/em&gt;に一度でも、アプリケーション内の&lt;em&gt;どこ&lt;/em&gt;から&lt;em&gt;でも&lt;/em&gt; &lt;code&gt;$foo&lt;/code&gt; を参照できるという意味ではありません。 変数 &lt;code&gt;$foo&lt;/code&gt; には有効範囲がある特定のスコープがあり、同じスコープ内のコードのみが変数にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="3ec32b35eb769978685d4877ea5219c78f585a12" translate="yes" xml:space="preserve">
          <source>Very simple: PHP has &lt;em&gt;function scope&lt;/em&gt;. That's the only kind of scope separator that exists in PHP. Variables inside a function are only available inside that function. Variables outside of functions are available anywhere outside of functions, but not inside any function. This means there's one special scope in PHP: the &lt;em&gt;global&lt;/em&gt; scope. Any variable declared outside of any function is within this global scope.</source>
          <target state="translated">非常にシンプル：PHPには&lt;em&gt;関数スコープがあり&lt;/em&gt;ます。 これは、PHPに存在する唯一のスコープセパレータです。 関数内の変数は、その関数内でのみ使用できます。 関数外の変数は、関数外のどこでも使用できますが、関数内では使用できません。 つまり、PHPには1つの特別なスコープ、つまり&lt;em&gt;グローバル&lt;/em&gt;スコープがあります。 関数の外部で宣言された変数は、このグローバルスコープ内にあります。</target>
        </trans-unit>
        <trans-unit id="af1e7856d7ec0ce5f15615436c1ef95f0cf0aae6" translate="yes" xml:space="preserve">
          <source>What about functions inside functions and classes?</source>
          <target state="translated">関数やクラスの中の関数は?</target>
        </trans-unit>
        <trans-unit id="6254f2b5f8bf1ba12db135d773afffbbef9b6be2" translate="yes" xml:space="preserve">
          <source>What is &quot;variable scope&quot; in PHP? Are variables from one .php file accessible in another? Why do I sometimes get &lt;em&gt;&quot;undefined variable&quot;&lt;/em&gt; errors?</source>
          <target state="translated">PHPの「変数スコープ」とは何ですか？ ある.phpファイルの変数は別の.phpファイルからアクセスできますか？ なぜ&lt;em&gt;「未定義の変数」&lt;/em&gt;エラーが発生するのですか？</target>
        </trans-unit>
        <trans-unit id="bb6449bdee5b63295f7aa04798c75018ea21ef24" translate="yes" xml:space="preserve">
          <source>What is &quot;variable scope&quot;?</source>
          <target state="translated">可変スコープ」とは何ですか?</target>
        </trans-unit>
        <trans-unit id="96131e2666075b2978079441b07aa07043ed2fa4" translate="yes" xml:space="preserve">
          <source>What is scope good for?</source>
          <target state="translated">スコープは何のためにあるのか?</target>
        </trans-unit>
        <trans-unit id="ac89234b35981829ff5582a0e47710a2abd12fb2" translate="yes" xml:space="preserve">
          <source>You should avoid using the global scope in any way as much as possible; most certainly you should not be &quot;pulling&quot; variables out of the global scope into a local scope.</source>
          <target state="translated">どのような方法であれ、グローバルスコープを使用することは可能な限り避けるべきであり、最も確かなことは、グローバルスコープからローカルスコープに変数を「引っ張り出す」ことではないということです。</target>
        </trans-unit>
        <trans-unit id="1adaa84dc07a16d34ede5b9a70713ff832a0f853" translate="yes" xml:space="preserve">
          <source>classes</source>
          <target state="translated">classes</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
