<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/16959576">
    <body>
      <group id="16959576">
        <trans-unit id="a838e95c861b722e4d4150b9f6f1920e5169c62c" translate="yes" xml:space="preserve">
          <source>(anonymous) functions inside functions</source>
          <target state="translated">函数</target>
        </trans-unit>
        <trans-unit id="ab5b78942d8672ca80abd97cd7594c7910b40e16" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$GLOBALS&lt;/code&gt; - All the global variables in the current script</source>
          <target state="translated">&lt;code&gt;$GLOBALS&lt;/code&gt; 当前脚本中的所有全局变量</target>
        </trans-unit>
        <trans-unit id="e447db7dd407c0465d263640675852f291dfb97c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$_COOKIE&lt;/code&gt; - Cookies passed with the current request</source>
          <target state="translated">&lt;code&gt;$_COOKIE&lt;/code&gt; 当前请求传递的Cookie</target>
        </trans-unit>
        <trans-unit id="23f8f9f798cae387bccb009c8570466e221ed320" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$_ENV&lt;/code&gt; - The environment variables of the current script</source>
          <target state="translated">&lt;code&gt;$_ENV&lt;/code&gt; 当前脚本的环境变量</target>
        </trans-unit>
        <trans-unit id="fe1c222af7a08d0d9c3ec4bb66ceb471334a1d2e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$_FILES&lt;/code&gt; - Files passed in an HTTP POST request with a &lt;code&gt;multipart/form-data&lt;/code&gt; MIME type</source>
          <target state="translated">&lt;code&gt;$_FILES&lt;/code&gt; 在HTTP POST请求中传递的具有 &lt;code&gt;multipart/form-data&lt;/code&gt; MIME类型的文件</target>
        </trans-unit>
        <trans-unit id="3275cc5081faa33f360f5ef474b432441bcaa20f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$_GET&lt;/code&gt; - Values passed in the query string of the URL, regardless of the HTTP method used for the request</source>
          <target state="translated">&lt;code&gt;$_GET&lt;/code&gt; 在URL的查询字符串中传递的值，无论用于请求的HTTP方法如何</target>
        </trans-unit>
        <trans-unit id="48134a27485958dd1da440984cdd0905a6e393d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$_POST&lt;/code&gt; - Values passed in an HTTP POST request with &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; or &lt;code&gt;multipart/form-data&lt;/code&gt; MIME types</source>
          <target state="translated">&lt;code&gt;$_POST&lt;/code&gt; 在HTTP POST请求中使用 &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; 或 &lt;code&gt;multipart/form-data&lt;/code&gt; MIME类型传递的值</target>
        </trans-unit>
        <trans-unit id="6446cb3a90bcb73f4a0b18700333ae3ebffd3183" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$_REQUEST&lt;/code&gt; - Typically a combination of &lt;code&gt;$_GET&lt;/code&gt; and &lt;code&gt;$_POST&lt;/code&gt;, but sometimes &lt;code&gt;$_COOKIES&lt;/code&gt;. The content is determined by the &lt;a href=&quot;https://www.php.net/manual/en/ini.core.php#ini.request-order&quot;&gt;&lt;code&gt;request_order&lt;/code&gt; directive&lt;/a&gt; in &lt;code&gt;php.ini&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$_REQUEST&lt;/code&gt; 通常是 &lt;code&gt;$_GET&lt;/code&gt; 和 &lt;code&gt;$_POST&lt;/code&gt; 的组合，但有时是 &lt;code&gt;$_COOKIES&lt;/code&gt; 。 内容由 &lt;code&gt;php.ini&lt;/code&gt; 中的&lt;a href=&quot;https://www.php.net/manual/en/ini.core.php#ini.request-order&quot;&gt; &lt;code&gt;request_order&lt;/code&gt; 指令&lt;/a&gt;确定。</target>
        </trans-unit>
        <trans-unit id="7c57ad330fea26b47817fd32122a481ce3485a56" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$_SERVER&lt;/code&gt; - Information on the server and execution environment</source>
          <target state="translated">&lt;code&gt;$_SERVER&lt;/code&gt; 有关服务器和执行环境的信息</target>
        </trans-unit>
        <trans-unit id="06bfdc6ae6b40934570555d25de4ec53967c8a4d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$_SESSION&lt;/code&gt; - Session variables stored internally by PHP</source>
          <target state="translated">&lt;code&gt;$_SESSION&lt;/code&gt; 由PHP内部存储的会话变量</target>
        </trans-unit>
        <trans-unit id="7a54fd83e265d890f6ebf01bc2fdf3d2c3e6969d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$foo&lt;/code&gt; is in the &lt;em&gt;global&lt;/em&gt; scope, &lt;code&gt;$baz&lt;/code&gt; is in a &lt;em&gt;local&lt;/em&gt; scope inside &lt;code&gt;myFunc&lt;/code&gt;. Only code inside &lt;code&gt;myFunc&lt;/code&gt; has access to &lt;code&gt;$baz&lt;/code&gt;. Only code &lt;em&gt;outside&lt;/em&gt;&lt;code&gt;myFunc&lt;/code&gt; has access to &lt;code&gt;$foo&lt;/code&gt;. Neither has access to the other:</source>
          <target state="translated">&lt;code&gt;$foo&lt;/code&gt; 在&lt;em&gt;全局&lt;/em&gt;范围内， &lt;code&gt;$baz&lt;/code&gt; 在 &lt;code&gt;myFunc&lt;/code&gt; 内部的&lt;em&gt;局部&lt;/em&gt;范围内。 只有 &lt;code&gt;myFunc&lt;/code&gt; 内部的代码可以访问 &lt;code&gt;$baz&lt;/code&gt; 。 只有 &lt;code&gt;myFunc&lt;/code&gt; &lt;em&gt;之外的&lt;/em&gt;代码才能访问 &lt;code&gt;$foo&lt;/code&gt; 。 双方都无法访问对方：</target>
        </trans-unit>
        <trans-unit id="860f3738e06320b6aa3a5029bf8cabd8046b48e2" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;a.php&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;a.php&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4906962156ed3cee35484627e34c88784c364e12" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;b.php&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;b.php&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="148c38c993db37ff964ae08c70d69d37223693b8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;c.php&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;c.php&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ee745f8274eea67c263f470c1a6b81cd56ebc429" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Is static variable the only way to keep values between calls to a function?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;静态变量是在函数调用之间保持值的唯一方法吗？&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d16fd476d750bb2f2055776c40ba91b588355415" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Static variables use-cases&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;静态变量用例&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8c8b0fdf7a7ff852b65f48f1feaeed776c9bf16d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Tricks&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Tricks&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a4bac3cd12a4a22859cd13a8ef9ac8e413098752" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;What is it 'static variable'?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;什么是&amp;ldquo;静态变量&amp;rdquo;？&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7a74d4fc619243713656d431f8206726c097f47d" translate="yes" xml:space="preserve">
          <source>A list of current superglobals:</source>
          <target state="translated">目前的超级球星名单。</target>
        </trans-unit>
        <trans-unit id="2ebda5656975b8f33dec11db266353e84483083d" translate="yes" xml:space="preserve">
          <source>All the caller of this function sees is this:</source>
          <target state="translated">这个函数的调用者看到的就是这个。</target>
        </trans-unit>
        <trans-unit id="f58e02d5845b0bfb45a72c39d1f6598fa7ed232b" translate="yes" xml:space="preserve">
          <source>Although variables defined inside of a function's scope can not be accessed from the outside that does not mean you can not use their values after that function completes. PHP has a well known &lt;code&gt;static&lt;/code&gt; keyword that is widely used in object-oriented PHP for defining static methods and properties but one should keep in mind that &lt;code&gt;static&lt;/code&gt; may also be used inside functions to define static variables.</source>
          <target state="translated">尽管无法从外部访问在函数范围内定义的变量，这并不意味着您无法在该函数完成后使用其值。 PHP具有一个众所周知的 &lt;code&gt;static&lt;/code&gt; 关键字，该关键字在面向对象的PHP中广泛用于定义静态方法和属性，但应记住， &lt;code&gt;static&lt;/code&gt; 也可以在函数内部使用以定义静态变量。</target>
        </trans-unit>
        <trans-unit id="d37e56f52da019cf5be302a35cc6e102b1d3ea80" translate="yes" xml:space="preserve">
          <source>Another way to keep values between function calls is to use closures. Closures were introduced in PHP 5.3. In two words they allow you to limit access to some set of variables within a function scope to another anonymous function that will be the only way to access them. Being in closure variables may imitate (more or less successfully) OOP concepts like 'class constants' (if they were passed in closure by value) or 'private properties' (if passed by reference) in structured programming.</source>
          <target state="translated">另一种在函数调用之间保持值的方法是使用闭包。闭包是在PHP 5.3中引入的。用两句话来说,它们允许你将对函数范围内的某些变量集的访问限制在另一个匿名函数中,这将是访问这些变量的唯一途径。在闭包中的变量可以模仿(或多或少成功地模仿结构化编程中的 &quot;类常量&quot;(如果在闭包中通过值传递)或 &quot;私有属性&quot;(如果通过引用传递)等OOP概念。</target>
        </trans-unit>
        <trans-unit id="c81690f2d671c4f52561ea256066e3c802a3fde5" translate="yes" xml:space="preserve">
          <source>As said before, the global scope is somewhat special, and functions can explicitly import variables from it:</source>
          <target state="translated">如前所述,全局作用域有些特殊,函数可以从全局作用域中显式导入变量。</target>
        </trans-unit>
        <trans-unit id="131355e4733c051ffbf0c276bc8ecd95e99a5ad2" translate="yes" xml:space="preserve">
          <source>But one subject that was missed was that of &lt;a href=&quot;https://php.net/manual/en/language.variables.superglobals.php&quot;&gt;superglobals&lt;/a&gt;, including the commonly used &lt;code&gt;$_POST&lt;/code&gt;, &lt;code&gt;$_GET&lt;/code&gt;, &lt;code&gt;$_SESSION&lt;/code&gt;, etc. These variables are arrays that are always available, in any scope, without a &lt;code&gt;global&lt;/code&gt; declaration.</source>
          <target state="translated">但是缺少的一个主题是&lt;a href=&quot;https://php.net/manual/en/language.variables.superglobals.php&quot;&gt;超全局变量&lt;/a&gt; ，包括常用的 &lt;code&gt;$_POST&lt;/code&gt; ， &lt;code&gt;$_GET&lt;/code&gt; ， &lt;code&gt;$_SESSION&lt;/code&gt; 等。这些变量是在任何范围内始终可用的数组，而没有 &lt;code&gt;global&lt;/code&gt; 声明。</target>
        </trans-unit>
        <trans-unit id="c1d90c3f28d82a888a53b5293c825c1fcbf61454" translate="yes" xml:space="preserve">
          <source>Crossing scope boundaries</source>
          <target state="translated">跨越范围界限</target>
        </trans-unit>
        <trans-unit id="2936310739c388c59bd9b9ae7f91baa8826864e1" translate="yes" xml:space="preserve">
          <source>Dealing with scoping issues may seem annoying, but &lt;strong&gt;limited variable scope is essential to writing complex applications!&lt;/strong&gt; If every variable you declare would be available from everywhere else inside your application, you'd be stepping all over your variables with no real way to track what changes what. There are only so many sensible names you can give to your variables, you probably want to use the variable &quot;&lt;code&gt;$name&lt;/code&gt;&quot; in more than one place. If you could only have this unique variable name once in your app, you'd have to resort to really complicated naming schemes to make sure your variables are unique and that you're not changing the wrong variable from the wrong piece of code.</source>
          <target state="translated">处理范围问题似乎很烦人，但是&lt;strong&gt;有限的变量范围对于编写复杂的应用程序至关重要！&lt;/strong&gt; 如果声明的每个变量在应用程序中的其他任何地方都可用，那么您将遍历所有变量，而没有真正的方法来跟踪什么更改。 您可以为变量指定的名称太多了，您可能想在多个位置使用变量&amp;ldquo; &lt;code&gt;$name&lt;/code&gt; &amp;rdquo;。 如果您只能在应用程序中使用一次唯一的变量名，则必须采用真正复杂的命名方案，以确保变量是唯一的，并且不会从错误的代码段中更改错误的变量。</target>
        </trans-unit>
        <trans-unit id="9ad03cae3f3faeea070af78623a2e5a9f3c527ac" translate="yes" xml:space="preserve">
          <source>Every new &lt;code&gt;function&lt;/code&gt; declaration introduces a new scope, it's that simple.</source>
          <target state="translated">每个新的 &lt;code&gt;function&lt;/code&gt; 声明都会引入一个新的作用域，就是这么简单。</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="12461211a8851c6382719dc0035a3df5bc1b39e7" translate="yes" xml:space="preserve">
          <source>Extending the scope of variables into anonymous functions</source>
          <target state="translated">将变量的范围扩展为匿名函数</target>
        </trans-unit>
        <trans-unit id="5d7a4224119faa0fd1a269c4341f2620d26f7167" translate="yes" xml:space="preserve">
          <source>File boundaries do &lt;em&gt;not separate&lt;/em&gt; scope:</source>
          <target state="translated">文件边界&lt;em&gt;不分开&lt;/em&gt;范围：</target>
        </trans-unit>
        <trans-unit id="ae5429ab2e5c045bcac291b5854c96b21e0b41c1" translate="yes" xml:space="preserve">
          <source>For example, this function will print out the name of the user running the PHP script. The variable is available to the function without any problem.</source>
          <target state="translated">例如,这个函数将打印出运行PHP脚本的用户名称。这个变量对函数来说是没有任何问题的。</target>
        </trans-unit>
        <trans-unit id="652a40170ba8591c912f745feccf44afade5a2b1" translate="yes" xml:space="preserve">
          <source>How is a scope defined in PHP?</source>
          <target state="translated">PHP中如何定义一个作用域?</target>
        </trans-unit>
        <trans-unit id="922ea91a2ea4163e309e51776ea16ec24fecb388" translate="yes" xml:space="preserve">
          <source>I won't post a complete answer to the question, as the existing ones and the &lt;a href=&quot;https://www.php.net/manual/en/language.variables.scope.php&quot;&gt;PHP manual&lt;/a&gt; do a great job of explaining most of this.</source>
          <target state="translated">我不会对这个问题给出完整的答案，因为现有的问题和&lt;a href=&quot;https://www.php.net/manual/en/language.variables.scope.php&quot;&gt;PHP手册&lt;/a&gt;在解释大多数问题方面做得很好。</target>
        </trans-unit>
        <trans-unit id="f1453b707e2be9fbe202d36fa790ada6cd6197ed" translate="yes" xml:space="preserve">
          <source>If there was no scope, what would the above function do? Where does &lt;code&gt;$bar&lt;/code&gt; come from? What state does it have? Is it even initialized? Do you have to check every time? This is not maintainable. Which brings us to...</source>
          <target state="translated">如果没有范围，上述功能会做什么？ &lt;code&gt;$bar&lt;/code&gt; 来自哪里？ 它处于什么状态？ 它甚至被初始化了吗？ 每次都要检查吗？ 这是无法维持的。 这带我们去...</target>
        </trans-unit>
        <trans-unit id="3ea2c15205d5dc0df8889a788f44c499ed5daa89" translate="yes" xml:space="preserve">
          <source>If we'd defined &lt;code&gt;$counter&lt;/code&gt; without &lt;code&gt;static&lt;/code&gt; then each time echoed value would be the same as &lt;code&gt;$num&lt;/code&gt; parameter passed to the function. Using &lt;code&gt;static&lt;/code&gt; allows to build this simple counter without additional workaround.</source>
          <target state="translated">如果我们定义的 &lt;code&gt;$counter&lt;/code&gt; 没有 &lt;code&gt;static&lt;/code&gt; 值，则每次回显的值都将与传递给函数的 &lt;code&gt;$num&lt;/code&gt; 参数相同。 使用 &lt;code&gt;static&lt;/code&gt; 可以构建此简单计数器，而无需其他解决方法。</target>
        </trans-unit>
        <trans-unit id="016571b21f01e1f2f3c21aa699a0d85d4dd6f082" translate="yes" xml:space="preserve">
          <source>In the above example, &lt;code&gt;a.php&lt;/code&gt; was included inside &lt;code&gt;myFunc&lt;/code&gt;, any variables inside &lt;code&gt;a.php&lt;/code&gt; only have local function scope. Just because they &lt;em&gt;appear&lt;/em&gt; to be in the global scope in &lt;code&gt;a.php&lt;/code&gt; doesn't necessarily mean they are, it actually depends on which context that code is included/executed in.</source>
          <target state="translated">在上面的示例中， &lt;code&gt;a.php&lt;/code&gt; 包含在 &lt;code&gt;myFunc&lt;/code&gt; 内， a.php内的任何变量仅具有局部函数作用域。 仅仅因为它们&lt;em&gt;似乎出现&lt;/em&gt;在 &lt;code&gt;a.php&lt;/code&gt; 中的全局范围内并不一定意味着它们存在，而是实际上取决于包含/执行代码的上下文。</target>
        </trans-unit>
        <trans-unit id="ec554381014e42af1e8683e98f1aefa0c936c9ba" translate="yes" xml:space="preserve">
          <source>Note: This is a reference question for dealing with variable scope in PHP. Please close any of the many questions fitting this pattern as a duplicate of this one.</source>
          <target state="translated">注:本题是处理PHP中变量作用域的参考题。请关闭任何一个符合这个模式的问题,作为本题的重复题。</target>
        </trans-unit>
        <trans-unit id="61bbf9a337d819ea79646c2dcd315776ac0ab6f4" translate="yes" xml:space="preserve">
          <source>Observe:</source>
          <target state="translated">Observe:</target>
        </trans-unit>
        <trans-unit id="3b23157b44fc6889bccbe888ff20db2f5fe02bfd" translate="yes" xml:space="preserve">
          <source>Reference: What is variable scope, which variables are accessible from where and what are “undefined variable” errors</source>
          <target state="translated">参考资料。什么是变量范围,哪些变量可以从哪里访问,什么是 &quot;未定义变量 &quot;的错误?</target>
        </trans-unit>
        <trans-unit id="bd4afc0073cac79bf136f8e1d922b83f76e969ad" translate="yes" xml:space="preserve">
          <source>Result:</source>
          <target state="translated">Result:</target>
        </trans-unit>
        <trans-unit id="f8d3b96b00480366f537ded0d968e8049343afb0" translate="yes" xml:space="preserve">
          <source>Scope and included files</source>
          <target state="translated">范围和包含的文件</target>
        </trans-unit>
        <trans-unit id="32740030904056284188e1034478ed55d904fcdd" translate="yes" xml:space="preserve">
          <source>Static function is kinda 'shared' between methods of objects of the
    same class. It is easy to understand by viewing the following example:</source>
          <target state="translated">静态函数在同一类对象的方法之间有点 &quot;共享&quot;。看下面的例子就很容易理解。</target>
        </trans-unit>
        <trans-unit id="f9790900a624b27bf7e92850b9dfa1ef4cea7d80" translate="yes" xml:space="preserve">
          <source>Static variable differs from ordinary variable defined in function's scope in case that it does not loose value when program execution leaves this scope. Let's consider the following example of using static variables:</source>
          <target state="translated">静态变量与函数作用域中定义的普通变量不同的是,当程序执行离开这个作用域时,静态变量的值不会丢失。让我们来看看下面这个使用静态变量的例子。</target>
        </trans-unit>
        <trans-unit id="020d21b43c9e6b9b10c807da9b8098c7e835e866" translate="yes" xml:space="preserve">
          <source>Static variable exists only in a local function scope. It can not be
    accessed outside of the function it has been defined in. So you may 
    be sure that it will keep its value unchanged until the next call to
    that function.</source>
          <target state="translated">静态变量只存在于本地函数作用域中。它不能在它所定义的函数之外被访问。因此,你可以确定它的值会保持不变,直到下一次调用该函数为止。</target>
        </trans-unit>
        <trans-unit id="5e9f12b97dc60a216b26c5009a27702745a72b74" translate="yes" xml:space="preserve">
          <source>Static variable may only be defined as a scalar or as a scalar 
    expression (since PHP 5.6). Assigning other values to it inevitably 
    leads to a failure at least at the moment this article was written.
Nevertheless you are able to do so just on the next line of your code:</source>
          <target state="translated">静态变量只能被定义为标量或标量表达式(从PHP 5.6开始)。给它指定其他值必然会导致失败,至少在这篇文章写出来的时候是这样。然而,你可以在下一行代码中就可以这样做。</target>
        </trans-unit>
        <trans-unit id="47934530c39e0bc54c73c188c5dd0204fa9de270" translate="yes" xml:space="preserve">
          <source>The anonymous function explicitly includes &lt;code&gt;$foo&lt;/code&gt; from its surrounding scope. Note that this is not the same as &lt;em&gt;global&lt;/em&gt; scope.</source>
          <target state="translated">匿名函数从其周围的作用域显式包括 &lt;code&gt;$foo&lt;/code&gt; 。 请注意，这与&lt;em&gt;全局&lt;/em&gt;范围不同。</target>
        </trans-unit>
        <trans-unit id="78945653e9206cea1434050a9d50d32f7de0e05e" translate="yes" xml:space="preserve">
          <source>The general rule of &quot;globals are bad&quot; is typically amended in PHP to &quot;globals are bad but superglobals are alright,&quot; as long as one is not misusing them. (All these variables are writable, so they could be used to avoid dependency injection if you were really terrible.)</source>
          <target state="translated">在PHP中,&quot;globals是坏的 &quot;的一般规则通常会被修正为 &quot;globals是坏的,但超globals是好的&quot;,只要不误用就好。(所有这些变量都是可写的,所以如果你真的很糟糕,可以用它们来避免依赖注入)。</target>
        </trans-unit>
        <trans-unit id="d2d45572c41369f79365e5e6f3eadd1968dffe83" translate="yes" xml:space="preserve">
          <source>The latter actually allows to use closures instead of static variables. What to use is always up to developer to decide but it should be mentioned that static variables are definitely useful when working with recursions and deserve to be noticed by devs.</source>
          <target state="translated">后者实际上允许使用闭包而不是静态变量。使用什么变量总是由开发者来决定,但需要提到的是,静态变量在使用递归时绝对是非常有用的,值得开发者注意。</target>
        </trans-unit>
        <trans-unit id="4cc5dfbb24227901a1a1eb2cd1d96bd93f174b6c" translate="yes" xml:space="preserve">
          <source>The right way: passing variables in and out</source>
          <target state="translated">正确的方法:将变量传入和传出</target>
        </trans-unit>
        <trans-unit id="c451255be5458efde09d08e0f66cadda0055ce56" translate="yes" xml:space="preserve">
          <source>The same rules apply to &lt;code&gt;include&lt;/code&gt;d code as applies to any other code: only &lt;code&gt;function&lt;/code&gt;s separate scope. For the purpose of scope, you may think of including files like copy and pasting code:</source>
          <target state="translated">适用于d代码的规则与适用于任何其他代码的规则相同：仅 &lt;code&gt;function&lt;/code&gt; 的单独范围。 出于范围的目的，您可能会考虑包括复制和粘贴代码之类的文件：</target>
        </trans-unit>
        <trans-unit id="071e971943c4d359bae69ff92a351fa2dbd377fb" translate="yes" xml:space="preserve">
          <source>The variable &lt;code&gt;$bar&lt;/code&gt; is explicitly coming into this scope as function argument. Just looking at this function it's clear where the values it works with originate from. It then explicitly &lt;em&gt;returns&lt;/em&gt; a value. The caller has the confidence to know what variables the function will work with and where its return values come from:</source>
          <target state="translated">变量 &lt;code&gt;$bar&lt;/code&gt; 作为函数参数明确地进入此范围。 只需查看此函数，就可以清楚知道其使用值的来源。 然后，它显式&lt;em&gt;返回&lt;/em&gt;一个值。 调用者有信心知道函数将使用哪些变量以及其返回值来自何处：</target>
        </trans-unit>
        <trans-unit id="5466b5ce2738d42daa755eea4ae20e0eebbb561a" translate="yes" xml:space="preserve">
          <source>The wrong way: &lt;code&gt;global&lt;/code&gt;</source>
          <target state="translated">错误的方式： &lt;code&gt;global&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bcd77de6020f24f4c53057055534728b8eb52912" translate="yes" xml:space="preserve">
          <source>There's no indication that this function has any &lt;em&gt;side effects&lt;/em&gt;, yet it does. This very easily becomes a tangled mess as some functions keep modifying &lt;em&gt;and requiring&lt;/em&gt; some global state. You want functions to be &lt;em&gt;stateless&lt;/em&gt;, acting only on their inputs and returning defined output, however many times you call them.</source>
          <target state="translated">没有迹象表明此功能有任何&lt;em&gt;副作用&lt;/em&gt; ，但确实如此。 由于某些函数不断修改&lt;em&gt;并需要&lt;/em&gt;某些全局状态，因此这很容易成为一团糟。 您希望函数是&lt;em&gt;无状态的&lt;/em&gt; ，仅对它们的输入起作用并返回定义的输出，无论您多次调用它们。</target>
        </trans-unit>
        <trans-unit id="2c7ad2ed688205af4b707f4b4e4cd61596a15526" translate="yes" xml:space="preserve">
          <source>These variables are not guaranteed to be present; an administrator can disable some or all of them using the &lt;a href=&quot;https://www.php.net/manual/en/ini.core.php#ini.variables-order&quot;&gt;&lt;code&gt;variables_order&lt;/code&gt; directive&lt;/a&gt; in &lt;code&gt;php.ini&lt;/code&gt;, but this is not common behaviour.</source>
          <target state="translated">这些变量不能保证存在。 管理员可以使用 &lt;code&gt;php.ini&lt;/code&gt; 中的&lt;a href=&quot;https://www.php.net/manual/en/ini.core.php#ini.variables-order&quot;&gt; &lt;code&gt;variables_order&lt;/code&gt; 指令&lt;/a&gt;禁用其中的某些或全部，但这不是常见的行为。</target>
        </trans-unit>
        <trans-unit id="729a9879fbcdd4d85db86c6d1b36908bb5bf9949" translate="yes" xml:space="preserve">
          <source>This function uses and modifies the global variable &lt;code&gt;$foo&lt;/code&gt;. &lt;strong&gt;Do not do this!&lt;/strong&gt;&lt;sub&gt;(Unless you really really really really know what you're doing, and even then: don't!)&lt;/sub&gt;</source>
          <target state="translated">该函数使用并修改全局变量 &lt;code&gt;$foo&lt;/code&gt; 。 &lt;strong&gt;不要这样做！&lt;/strong&gt; &lt;sub&gt;（除非您真的真的真的知道自己在做什么，即使如此：不要！）&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="5f2b6b1f3294c6b1b9b389bdda4e74e3dd5b76b5" translate="yes" xml:space="preserve">
          <source>This only works with objects of the same class. If objects are from different classes (even extending one another) behavior of static vars will be as expected.</source>
          <target state="translated">这只适用于同一类的对象。如果对象来自不同的类(甚至是相互扩展),静态变量的行为将如预期的那样。</target>
        </trans-unit>
        <trans-unit id="93dce72d02933cfb02ef65e7b7d61dfcd89aefbc" translate="yes" xml:space="preserve">
          <source>To cache value which is normally better to retrieve once. For
example, result of reading immutable file on server.</source>
          <target state="translated">缓存通常情况下最好检索一次的值。例如,读取服务器上的不可变文件的结果。</target>
        </trans-unit>
        <trans-unit id="9366d1449ad260d48207a9d7c5869d5ac4aa8828" translate="yes" xml:space="preserve">
          <source>To store values between consequent calls to function.</source>
          <target state="translated">在随后的函数调用之间存储值。</target>
        </trans-unit>
        <trans-unit id="e070a653dbaac809338df34a78de0871495dad48" translate="yes" xml:space="preserve">
          <source>To store values between recursive calls when there is no way (or no
purpose) to pass them as params.</source>
          <target state="translated">当没有办法(或没有目的)将值作为参数传递时,在递归调用之间存储值。</target>
        </trans-unit>
        <trans-unit id="f0653e4d69e68c99f3473e13c00ee9cce6be01a2" translate="yes" xml:space="preserve">
          <source>Variables have a limited &quot;scope&quot;, or &quot;places from which they are accessible&quot;. Just because you wrote &lt;code&gt;$foo = 'bar';&lt;/code&gt; once &lt;em&gt;somewhere&lt;/em&gt; in your application doesn't mean you can refer to &lt;code&gt;$foo&lt;/code&gt; from &lt;em&gt;everywhere&lt;/em&gt; else inside the application. The variable &lt;code&gt;$foo&lt;/code&gt; has a certain scope within which it is valid and only code in the same scope has access to the variable.</source>
          <target state="translated">变量具有有限的&amp;ldquo;作用域&amp;rdquo;或&amp;ldquo;可从其访问的位置&amp;rdquo;。 仅仅因为你写了 &lt;code&gt;$foo = 'bar';&lt;/code&gt; 在应用程序中&lt;em&gt;某个位置&lt;/em&gt;出现一次并不意味着您可以在应用程序中的其他&lt;em&gt;任何&lt;/em&gt;地方引用 &lt;code&gt;$foo&lt;/code&gt; 。 变量 &lt;code&gt;$foo&lt;/code&gt; 在一定范围内有效，并且只有相同范围内的代码才能访问该变量。</target>
        </trans-unit>
        <trans-unit id="3ec32b35eb769978685d4877ea5219c78f585a12" translate="yes" xml:space="preserve">
          <source>Very simple: PHP has &lt;em&gt;function scope&lt;/em&gt;. That's the only kind of scope separator that exists in PHP. Variables inside a function are only available inside that function. Variables outside of functions are available anywhere outside of functions, but not inside any function. This means there's one special scope in PHP: the &lt;em&gt;global&lt;/em&gt; scope. Any variable declared outside of any function is within this global scope.</source>
          <target state="translated">很简单：PHP具有&lt;em&gt;函数作用域&lt;/em&gt; 。 那是PHP中存在的唯一一种范围分隔符。 函数内部的变量仅在该函数内部可用。 函数外部的变量在函数外部的任何位置可用，但在任何函数内部均不可用。 这意味着PHP中有一个特殊的作用域： &lt;em&gt;全局&lt;/em&gt;作用域。 在任何函数外部声明的任何变量都在此全局范围内。</target>
        </trans-unit>
        <trans-unit id="af1e7856d7ec0ce5f15615436c1ef95f0cf0aae6" translate="yes" xml:space="preserve">
          <source>What about functions inside functions and classes?</source>
          <target state="translated">那么函数和类里面的函数呢?</target>
        </trans-unit>
        <trans-unit id="6254f2b5f8bf1ba12db135d773afffbbef9b6be2" translate="yes" xml:space="preserve">
          <source>What is &quot;variable scope&quot; in PHP? Are variables from one .php file accessible in another? Why do I sometimes get &lt;em&gt;&quot;undefined variable&quot;&lt;/em&gt; errors?</source>
          <target state="translated">什么是PHP中的&amp;ldquo;变量范围&amp;rdquo;？ 一个.php文件中的变量可以在另一个文件中访问吗？ 为什么有时会出现&lt;em&gt;&amp;ldquo;未定义变量&amp;rdquo;&lt;/em&gt;错误？</target>
        </trans-unit>
        <trans-unit id="bb6449bdee5b63295f7aa04798c75018ea21ef24" translate="yes" xml:space="preserve">
          <source>What is &quot;variable scope&quot;?</source>
          <target state="translated">什么是 &quot;可变范围&quot;?</target>
        </trans-unit>
        <trans-unit id="96131e2666075b2978079441b07aa07043ed2fa4" translate="yes" xml:space="preserve">
          <source>What is scope good for?</source>
          <target state="translated">范围有什么好处?</target>
        </trans-unit>
        <trans-unit id="ac89234b35981829ff5582a0e47710a2abd12fb2" translate="yes" xml:space="preserve">
          <source>You should avoid using the global scope in any way as much as possible; most certainly you should not be &quot;pulling&quot; variables out of the global scope into a local scope.</source>
          <target state="translated">你应该尽量避免以任何方式使用全局作用域;当然,你不应该把变量从全局作用域中 &quot;拉出 &quot;到本地作用域中。</target>
        </trans-unit>
        <trans-unit id="1adaa84dc07a16d34ede5b9a70713ff832a0f853" translate="yes" xml:space="preserve">
          <source>classes</source>
          <target state="translated">classes</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
