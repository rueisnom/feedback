<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://stackoverflow.com/questions/16959576">
    <body>
      <group id="16959576">
        <trans-unit id="a838e95c861b722e4d4150b9f6f1920e5169c62c" translate="yes" xml:space="preserve">
          <source>(anonymous) functions inside functions</source>
          <target state="translated">(анонимные)функции внутри функций</target>
        </trans-unit>
        <trans-unit id="ab5b78942d8672ca80abd97cd7594c7910b40e16" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$GLOBALS&lt;/code&gt; - All the global variables in the current script</source>
          <target state="translated">&lt;code&gt;$GLOBALS&lt;/code&gt; - все глобальные переменные в текущем скрипте</target>
        </trans-unit>
        <trans-unit id="e447db7dd407c0465d263640675852f291dfb97c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$_COOKIE&lt;/code&gt; - Cookies passed with the current request</source>
          <target state="translated">&lt;code&gt;$_COOKIE&lt;/code&gt; - куки передаются с текущим запросом</target>
        </trans-unit>
        <trans-unit id="23f8f9f798cae387bccb009c8570466e221ed320" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$_ENV&lt;/code&gt; - The environment variables of the current script</source>
          <target state="translated">&lt;code&gt;$_ENV&lt;/code&gt; - переменные окружения текущего скрипта</target>
        </trans-unit>
        <trans-unit id="fe1c222af7a08d0d9c3ec4bb66ceb471334a1d2e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$_FILES&lt;/code&gt; - Files passed in an HTTP POST request with a &lt;code&gt;multipart/form-data&lt;/code&gt; MIME type</source>
          <target state="translated">&lt;code&gt;$_FILES&lt;/code&gt; - Файлы, переданные в HTTP-запросе POST с MIME-типом &lt;code&gt;multipart/form-data&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3275cc5081faa33f360f5ef474b432441bcaa20f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$_GET&lt;/code&gt; - Values passed in the query string of the URL, regardless of the HTTP method used for the request</source>
          <target state="translated">&lt;code&gt;$_GET&lt;/code&gt; - значения, передаваемые в строке запроса URL, независимо от метода HTTP, используемого для запроса</target>
        </trans-unit>
        <trans-unit id="48134a27485958dd1da440984cdd0905a6e393d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$_POST&lt;/code&gt; - Values passed in an HTTP POST request with &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; or &lt;code&gt;multipart/form-data&lt;/code&gt; MIME types</source>
          <target state="translated">&lt;code&gt;$_POST&lt;/code&gt; - значения, передаваемые в HTTP-запросе POST с MIME-типами &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; или &lt;code&gt;multipart/form-data&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6446cb3a90bcb73f4a0b18700333ae3ebffd3183" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$_REQUEST&lt;/code&gt; - Typically a combination of &lt;code&gt;$_GET&lt;/code&gt; and &lt;code&gt;$_POST&lt;/code&gt;, but sometimes &lt;code&gt;$_COOKIES&lt;/code&gt;. The content is determined by the &lt;a href=&quot;https://www.php.net/manual/en/ini.core.php#ini.request-order&quot;&gt;&lt;code&gt;request_order&lt;/code&gt; directive&lt;/a&gt; in &lt;code&gt;php.ini&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$_REQUEST&lt;/code&gt; - Обычно это комбинация &lt;code&gt;$_GET&lt;/code&gt; и &lt;code&gt;$_POST&lt;/code&gt; , но иногда &lt;code&gt;$_COOKIES&lt;/code&gt; . Содержание определяется &lt;a href=&quot;https://www.php.net/manual/en/ini.core.php#ini.request-order&quot;&gt;директивой &lt;code&gt;request_order&lt;/code&gt; &lt;/a&gt; в &lt;code&gt;php.ini&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7c57ad330fea26b47817fd32122a481ce3485a56" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$_SERVER&lt;/code&gt; - Information on the server and execution environment</source>
          <target state="translated">&lt;code&gt;$_SERVER&lt;/code&gt; - Информация о сервере и среде исполнения</target>
        </trans-unit>
        <trans-unit id="06bfdc6ae6b40934570555d25de4ec53967c8a4d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$_SESSION&lt;/code&gt; - Session variables stored internally by PHP</source>
          <target state="translated">&lt;code&gt;$_SESSION&lt;/code&gt; - переменные сессии хранятся внутри PHP</target>
        </trans-unit>
        <trans-unit id="7a54fd83e265d890f6ebf01bc2fdf3d2c3e6969d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$foo&lt;/code&gt; is in the &lt;em&gt;global&lt;/em&gt; scope, &lt;code&gt;$baz&lt;/code&gt; is in a &lt;em&gt;local&lt;/em&gt; scope inside &lt;code&gt;myFunc&lt;/code&gt;. Only code inside &lt;code&gt;myFunc&lt;/code&gt; has access to &lt;code&gt;$baz&lt;/code&gt;. Only code &lt;em&gt;outside&lt;/em&gt;&lt;code&gt;myFunc&lt;/code&gt; has access to &lt;code&gt;$foo&lt;/code&gt;. Neither has access to the other:</source>
          <target state="translated">&lt;code&gt;$foo&lt;/code&gt; находится в &lt;em&gt;глобальной&lt;/em&gt; области видимости, &lt;code&gt;$baz&lt;/code&gt; находится в &lt;em&gt;локальной&lt;/em&gt; области видимости внутри &lt;code&gt;myFunc&lt;/code&gt; . Только код внутри &lt;code&gt;myFunc&lt;/code&gt; имеет доступ к &lt;code&gt;$baz&lt;/code&gt; . Только код &lt;em&gt;вне&lt;/em&gt; &lt;code&gt;myFunc&lt;/code&gt; имеет доступ к &lt;code&gt;$foo&lt;/code&gt; . Ни один из них не имеет доступа к другому:</target>
        </trans-unit>
        <trans-unit id="860f3738e06320b6aa3a5029bf8cabd8046b48e2" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;a.php&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;a.php&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4906962156ed3cee35484627e34c88784c364e12" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;b.php&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;b.php&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="148c38c993db37ff964ae08c70d69d37223693b8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;c.php&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;c.php&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ee745f8274eea67c263f470c1a6b81cd56ebc429" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Is static variable the only way to keep values between calls to a function?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Является ли статическая переменная единственным способом сохранить значения между вызовами функции?&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d16fd476d750bb2f2055776c40ba91b588355415" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Static variables use-cases&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Примеры использования статических переменных&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8c8b0fdf7a7ff852b65f48f1feaeed776c9bf16d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Tricks&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Tricks&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a4bac3cd12a4a22859cd13a8ef9ac8e413098752" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;What is it 'static variable'?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Что такое &amp;laquo;статическая переменная&amp;raquo;?&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7a74d4fc619243713656d431f8206726c097f47d" translate="yes" xml:space="preserve">
          <source>A list of current superglobals:</source>
          <target state="translated">Список текущих суперглобулей:</target>
        </trans-unit>
        <trans-unit id="2ebda5656975b8f33dec11db266353e84483083d" translate="yes" xml:space="preserve">
          <source>All the caller of this function sees is this:</source>
          <target state="translated">Все,что видит вызывающий эту функцию,это вот это:</target>
        </trans-unit>
        <trans-unit id="f58e02d5845b0bfb45a72c39d1f6598fa7ed232b" translate="yes" xml:space="preserve">
          <source>Although variables defined inside of a function's scope can not be accessed from the outside that does not mean you can not use their values after that function completes. PHP has a well known &lt;code&gt;static&lt;/code&gt; keyword that is widely used in object-oriented PHP for defining static methods and properties but one should keep in mind that &lt;code&gt;static&lt;/code&gt; may also be used inside functions to define static variables.</source>
          <target state="translated">Хотя переменные, определенные внутри области действия функции, не могут быть доступны извне, это не означает, что вы не можете использовать их значения после завершения этой функции. В PHP есть хорошо известное ключевое слово &lt;code&gt;static&lt;/code&gt; , которое широко используется в объектно-ориентированном PHP для определения статических методов и свойств, но следует помнить, что &lt;code&gt;static&lt;/code&gt; также может использоваться внутри функций для определения статических переменных.</target>
        </trans-unit>
        <trans-unit id="d37e56f52da019cf5be302a35cc6e102b1d3ea80" translate="yes" xml:space="preserve">
          <source>Another way to keep values between function calls is to use closures. Closures were introduced in PHP 5.3. In two words they allow you to limit access to some set of variables within a function scope to another anonymous function that will be the only way to access them. Being in closure variables may imitate (more or less successfully) OOP concepts like 'class constants' (if they were passed in closure by value) or 'private properties' (if passed by reference) in structured programming.</source>
          <target state="translated">Другим способом сохранения значений между вызовами функций является использование замыкания.Закрытия были введены в PHP 5.3.В двух словах они позволяют ограничить доступ к некоторому набору переменных в области видимости функции другой анонимной функцией,которая будет единственным способом доступа к ним.Нахождение в закрытии переменных может более или менее успешно имитировать в структурированном программировании такие концепции ООП,как 'константы класса' (если они передавались при закрытии по значению)или 'приватные свойства' (если передавались по ссылке).</target>
        </trans-unit>
        <trans-unit id="c81690f2d671c4f52561ea256066e3c802a3fde5" translate="yes" xml:space="preserve">
          <source>As said before, the global scope is somewhat special, and functions can explicitly import variables from it:</source>
          <target state="translated">Как уже было сказано,глобальный масштаб несколько особенный,и функции могут явно импортировать из него переменные:</target>
        </trans-unit>
        <trans-unit id="131355e4733c051ffbf0c276bc8ecd95e99a5ad2" translate="yes" xml:space="preserve">
          <source>But one subject that was missed was that of &lt;a href=&quot;https://php.net/manual/en/language.variables.superglobals.php&quot;&gt;superglobals&lt;/a&gt;, including the commonly used &lt;code&gt;$_POST&lt;/code&gt;, &lt;code&gt;$_GET&lt;/code&gt;, &lt;code&gt;$_SESSION&lt;/code&gt;, etc. These variables are arrays that are always available, in any scope, without a &lt;code&gt;global&lt;/code&gt; declaration.</source>
          <target state="translated">Но одной темой, которая была упущена, был вопрос о &lt;a href=&quot;https://php.net/manual/en/language.variables.superglobals.php&quot;&gt;суперглобалах&lt;/a&gt; , включая обычно используемые &lt;code&gt;$_POST&lt;/code&gt; , &lt;code&gt;$_GET&lt;/code&gt; , &lt;code&gt;$_SESSION&lt;/code&gt; и т. Д. Эти переменные - это массивы, которые всегда доступны в любой области без &lt;code&gt;global&lt;/code&gt; объявления.</target>
        </trans-unit>
        <trans-unit id="c1d90c3f28d82a888a53b5293c825c1fcbf61454" translate="yes" xml:space="preserve">
          <source>Crossing scope boundaries</source>
          <target state="translated">Пересечение границ области применения</target>
        </trans-unit>
        <trans-unit id="2936310739c388c59bd9b9ae7f91baa8826864e1" translate="yes" xml:space="preserve">
          <source>Dealing with scoping issues may seem annoying, but &lt;strong&gt;limited variable scope is essential to writing complex applications!&lt;/strong&gt; If every variable you declare would be available from everywhere else inside your application, you'd be stepping all over your variables with no real way to track what changes what. There are only so many sensible names you can give to your variables, you probably want to use the variable &quot;&lt;code&gt;$name&lt;/code&gt;&quot; in more than one place. If you could only have this unique variable name once in your app, you'd have to resort to really complicated naming schemes to make sure your variables are unique and that you're not changing the wrong variable from the wrong piece of code.</source>
          <target state="translated">Решение проблем с областями видимости может показаться раздражающим, но &lt;strong&gt;ограниченная область применения переменных необходима для написания сложных приложений!&lt;/strong&gt; Если бы каждая объявленная вами переменная была бы доступна из любого места внутри вашего приложения, вы бы пошагово перебирали все переменные, не имея реального способа отследить, что и что изменится. Существует только так много разумных имен, которые вы можете дать своим переменным, вы, вероятно, захотите использовать переменную &amp;laquo; &lt;code&gt;$name&lt;/code&gt; &amp;raquo; более чем в одном месте. Если бы вы могли иметь это уникальное имя переменной только один раз в своем приложении, вам пришлось бы прибегнуть к действительно сложным схемам именования, чтобы убедиться, что ваши переменные уникальны и что вы не меняете неправильную переменную из неправильного фрагмента кода.</target>
        </trans-unit>
        <trans-unit id="9ad03cae3f3faeea070af78623a2e5a9f3c527ac" translate="yes" xml:space="preserve">
          <source>Every new &lt;code&gt;function&lt;/code&gt; declaration introduces a new scope, it's that simple.</source>
          <target state="translated">Каждое новое объявление &lt;code&gt;function&lt;/code&gt; вводит новую область видимости, это так просто.</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="12461211a8851c6382719dc0035a3df5bc1b39e7" translate="yes" xml:space="preserve">
          <source>Extending the scope of variables into anonymous functions</source>
          <target state="translated">Расширение диапазона переменных в анонимные функции</target>
        </trans-unit>
        <trans-unit id="5d7a4224119faa0fd1a269c4341f2620d26f7167" translate="yes" xml:space="preserve">
          <source>File boundaries do &lt;em&gt;not separate&lt;/em&gt; scope:</source>
          <target state="translated">Границы файла &lt;em&gt;не разделяют&lt;/em&gt; область видимости:</target>
        </trans-unit>
        <trans-unit id="ae5429ab2e5c045bcac291b5854c96b21e0b41c1" translate="yes" xml:space="preserve">
          <source>For example, this function will print out the name of the user running the PHP script. The variable is available to the function without any problem.</source>
          <target state="translated">Например,эта функция распечатает имя пользователя,выполняющего PHP-скрипт.Переменная доступна функции без проблем.</target>
        </trans-unit>
        <trans-unit id="652a40170ba8591c912f745feccf44afade5a2b1" translate="yes" xml:space="preserve">
          <source>How is a scope defined in PHP?</source>
          <target state="translated">Как определяется область видимости в PHP?</target>
        </trans-unit>
        <trans-unit id="922ea91a2ea4163e309e51776ea16ec24fecb388" translate="yes" xml:space="preserve">
          <source>I won't post a complete answer to the question, as the existing ones and the &lt;a href=&quot;https://www.php.net/manual/en/language.variables.scope.php&quot;&gt;PHP manual&lt;/a&gt; do a great job of explaining most of this.</source>
          <target state="translated">Я не буду публиковать полный ответ на этот вопрос, поскольку существующие и руководство по &lt;a href=&quot;https://www.php.net/manual/en/language.variables.scope.php&quot;&gt;PHP&lt;/a&gt; делают большую часть объяснения большей части этого.</target>
        </trans-unit>
        <trans-unit id="f1453b707e2be9fbe202d36fa790ada6cd6197ed" translate="yes" xml:space="preserve">
          <source>If there was no scope, what would the above function do? Where does &lt;code&gt;$bar&lt;/code&gt; come from? What state does it have? Is it even initialized? Do you have to check every time? This is not maintainable. Which brings us to...</source>
          <target state="translated">Если бы не было области действия, что бы делала вышеуказанная функция? Откуда берется &lt;code&gt;$bar&lt;/code&gt; ? В каком состоянии он находится? Это даже инициализировано? Вы должны проверять каждый раз? Это не подлежит ремонту. Что приводит нас к ...</target>
        </trans-unit>
        <trans-unit id="3ea2c15205d5dc0df8889a788f44c499ed5daa89" translate="yes" xml:space="preserve">
          <source>If we'd defined &lt;code&gt;$counter&lt;/code&gt; without &lt;code&gt;static&lt;/code&gt; then each time echoed value would be the same as &lt;code&gt;$num&lt;/code&gt; parameter passed to the function. Using &lt;code&gt;static&lt;/code&gt; allows to build this simple counter without additional workaround.</source>
          <target state="translated">Если бы мы определили &lt;code&gt;$counter&lt;/code&gt; без &lt;code&gt;static&lt;/code&gt; то каждый раз, когда отображаемое значение будет таким же, как параметр &lt;code&gt;$num&lt;/code&gt; передаваемый в функцию. Использование &lt;code&gt;static&lt;/code&gt; позволяет построить этот простой счетчик без дополнительных обходных путей.</target>
        </trans-unit>
        <trans-unit id="016571b21f01e1f2f3c21aa699a0d85d4dd6f082" translate="yes" xml:space="preserve">
          <source>In the above example, &lt;code&gt;a.php&lt;/code&gt; was included inside &lt;code&gt;myFunc&lt;/code&gt;, any variables inside &lt;code&gt;a.php&lt;/code&gt; only have local function scope. Just because they &lt;em&gt;appear&lt;/em&gt; to be in the global scope in &lt;code&gt;a.php&lt;/code&gt; doesn't necessarily mean they are, it actually depends on which context that code is included/executed in.</source>
          <target state="translated">В приведенном выше примере &lt;code&gt;a.php&lt;/code&gt; был включен в &lt;code&gt;myFunc&lt;/code&gt; , любые переменные внутри &lt;code&gt;a.php&lt;/code&gt; имеют только локальную область действия функции. То, что они &lt;em&gt;кажутся&lt;/em&gt; в глобальной области видимости в &lt;code&gt;a.php&lt;/code&gt; , не обязательно означает, что они есть, на самом деле это зависит от того, в каком контексте этот код включен / выполнен.</target>
        </trans-unit>
        <trans-unit id="ec554381014e42af1e8683e98f1aefa0c936c9ba" translate="yes" xml:space="preserve">
          <source>Note: This is a reference question for dealing with variable scope in PHP. Please close any of the many questions fitting this pattern as a duplicate of this one.</source>
          <target state="translated">Замечание:Это справочный вопрос для работы с областью видимости переменных в PHP.Пожалуйста,закройте любой из множества вопросов,подходящих под этот шаблон,как дубликат этого вопроса.</target>
        </trans-unit>
        <trans-unit id="61bbf9a337d819ea79646c2dcd315776ac0ab6f4" translate="yes" xml:space="preserve">
          <source>Observe:</source>
          <target state="translated">Observe:</target>
        </trans-unit>
        <trans-unit id="3b23157b44fc6889bccbe888ff20db2f5fe02bfd" translate="yes" xml:space="preserve">
          <source>Reference: What is variable scope, which variables are accessible from where and what are “undefined variable” errors</source>
          <target state="translated">Ссылка:Что такое область видимости переменных,какие переменные доступны откуда и какие ошибки &quot;неопределенных переменных&quot;.</target>
        </trans-unit>
        <trans-unit id="bd4afc0073cac79bf136f8e1d922b83f76e969ad" translate="yes" xml:space="preserve">
          <source>Result:</source>
          <target state="translated">Result:</target>
        </trans-unit>
        <trans-unit id="f8d3b96b00480366f537ded0d968e8049343afb0" translate="yes" xml:space="preserve">
          <source>Scope and included files</source>
          <target state="translated">Область действия и прилагаемые файлы</target>
        </trans-unit>
        <trans-unit id="32740030904056284188e1034478ed55d904fcdd" translate="yes" xml:space="preserve">
          <source>Static function is kinda 'shared' between methods of objects of the
    same class. It is easy to understand by viewing the following example:</source>
          <target state="translated">Статическая функция как бы &quot;делится&quot; между методами объектов одного класса.Это легко понять,просмотрев следующий пример:</target>
        </trans-unit>
        <trans-unit id="f9790900a624b27bf7e92850b9dfa1ef4cea7d80" translate="yes" xml:space="preserve">
          <source>Static variable differs from ordinary variable defined in function's scope in case that it does not loose value when program execution leaves this scope. Let's consider the following example of using static variables:</source>
          <target state="translated">Статическая переменная отличается от обычной переменной,определенной в области видимости функции,тем,что она не теряет значение,когда выполнение программы выходит из этой области видимости.Рассмотрим следующий пример использования статических переменных:</target>
        </trans-unit>
        <trans-unit id="020d21b43c9e6b9b10c807da9b8098c7e835e866" translate="yes" xml:space="preserve">
          <source>Static variable exists only in a local function scope. It can not be
    accessed outside of the function it has been defined in. So you may 
    be sure that it will keep its value unchanged until the next call to
    that function.</source>
          <target state="translated">Статическая переменная существует только в локальной области видимости функции.Она не может быть доступна вне функции,в которой она была определена.Поэтому вы можете быть уверены,что ее значение останется неизменным до следующего вызова этой функции.</target>
        </trans-unit>
        <trans-unit id="5e9f12b97dc60a216b26c5009a27702745a72b74" translate="yes" xml:space="preserve">
          <source>Static variable may only be defined as a scalar or as a scalar 
    expression (since PHP 5.6). Assigning other values to it inevitably 
    leads to a failure at least at the moment this article was written.
Nevertheless you are able to do so just on the next line of your code:</source>
          <target state="translated">Статическая переменная может быть определена только как скалярное выражение или как скалярное выражение (начиная с PHP 5.6).Присвоение ей других значений неизбежно приводит к неудаче,по крайней мере,на момент написания статьи.Тем не менее,это можно сделать только в следующей строке кода:</target>
        </trans-unit>
        <trans-unit id="47934530c39e0bc54c73c188c5dd0204fa9de270" translate="yes" xml:space="preserve">
          <source>The anonymous function explicitly includes &lt;code&gt;$foo&lt;/code&gt; from its surrounding scope. Note that this is not the same as &lt;em&gt;global&lt;/em&gt; scope.</source>
          <target state="translated">Анонимная функция явно включает &lt;code&gt;$foo&lt;/code&gt; из окружающей ее области. Обратите внимание, что это не то же самое, что &lt;em&gt;глобальная&lt;/em&gt; область.</target>
        </trans-unit>
        <trans-unit id="78945653e9206cea1434050a9d50d32f7de0e05e" translate="yes" xml:space="preserve">
          <source>The general rule of &quot;globals are bad&quot; is typically amended in PHP to &quot;globals are bad but superglobals are alright,&quot; as long as one is not misusing them. (All these variables are writable, so they could be used to avoid dependency injection if you were really terrible.)</source>
          <target state="translated">Общее правило &quot;глобулы-это плохо&quot; обычно изменяется в PHP на &quot;глобулы-это плохо,но суперглобулы-это хорошо&quot;,при условии,что они не используются не по назначению.(Все эти переменные могут быть записаны,поэтому их можно было бы использовать,чтобы избежать инъекций зависимостей,если бы вы были действительно ужасны).</target>
        </trans-unit>
        <trans-unit id="d2d45572c41369f79365e5e6f3eadd1968dffe83" translate="yes" xml:space="preserve">
          <source>The latter actually allows to use closures instead of static variables. What to use is always up to developer to decide but it should be mentioned that static variables are definitely useful when working with recursions and deserve to be noticed by devs.</source>
          <target state="translated">Последнее фактически позволяет использовать замыкания вместо статических переменных.Что использовать,всегда остается за разработчиком,но следует отметить,что статические переменные определенно полезны при работе с рекурсами и заслуживают внимания devs.</target>
        </trans-unit>
        <trans-unit id="4cc5dfbb24227901a1a1eb2cd1d96bd93f174b6c" translate="yes" xml:space="preserve">
          <source>The right way: passing variables in and out</source>
          <target state="translated">Правильный путь:передача переменных внутрь и наружу</target>
        </trans-unit>
        <trans-unit id="c451255be5458efde09d08e0f66cadda0055ce56" translate="yes" xml:space="preserve">
          <source>The same rules apply to &lt;code&gt;include&lt;/code&gt;d code as applies to any other code: only &lt;code&gt;function&lt;/code&gt;s separate scope. For the purpose of scope, you may think of including files like copy and pasting code:</source>
          <target state="translated">Для &lt;code&gt;include&lt;/code&gt; d-кода применяются те же правила, что и для любого другого кода: только отдельная область действия функции. Для целей охвата вы можете подумать о включении таких файлов, как копирование и вставка кода:</target>
        </trans-unit>
        <trans-unit id="071e971943c4d359bae69ff92a351fa2dbd377fb" translate="yes" xml:space="preserve">
          <source>The variable &lt;code&gt;$bar&lt;/code&gt; is explicitly coming into this scope as function argument. Just looking at this function it's clear where the values it works with originate from. It then explicitly &lt;em&gt;returns&lt;/em&gt; a value. The caller has the confidence to know what variables the function will work with and where its return values come from:</source>
          <target state="translated">Переменная &lt;code&gt;$bar&lt;/code&gt; явно входит в эту область в качестве аргумента функции. Глядя на эту функцию, становится ясно, откуда берутся значения, с которыми она работает. Затем он явно &lt;em&gt;возвращает&lt;/em&gt; значение. Вызывающая сторона уверена, что знает, с какими переменными будет работать функция и откуда возвращаются ее значения:</target>
        </trans-unit>
        <trans-unit id="5466b5ce2738d42daa755eea4ae20e0eebbb561a" translate="yes" xml:space="preserve">
          <source>The wrong way: &lt;code&gt;global&lt;/code&gt;</source>
          <target state="translated">Неправильный путь: &lt;code&gt;global&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bcd77de6020f24f4c53057055534728b8eb52912" translate="yes" xml:space="preserve">
          <source>There's no indication that this function has any &lt;em&gt;side effects&lt;/em&gt;, yet it does. This very easily becomes a tangled mess as some functions keep modifying &lt;em&gt;and requiring&lt;/em&gt; some global state. You want functions to be &lt;em&gt;stateless&lt;/em&gt;, acting only on their inputs and returning defined output, however many times you call them.</source>
          <target state="translated">Нет никаких признаков того, что эта функция имеет какие-либо &lt;em&gt;побочные эффекты&lt;/em&gt; , но она есть. Это очень легко становится запутанным беспорядком, поскольку некоторые функции продолжают изменяться &lt;em&gt;и требуют&lt;/em&gt; некоторого глобального состояния. Вы хотите, чтобы функции не имели &lt;em&gt;состояния&lt;/em&gt; , действовали только на свои входы и возвращали определенный вывод, сколько бы раз вы их ни вызывали.</target>
        </trans-unit>
        <trans-unit id="2c7ad2ed688205af4b707f4b4e4cd61596a15526" translate="yes" xml:space="preserve">
          <source>These variables are not guaranteed to be present; an administrator can disable some or all of them using the &lt;a href=&quot;https://www.php.net/manual/en/ini.core.php#ini.variables-order&quot;&gt;&lt;code&gt;variables_order&lt;/code&gt; directive&lt;/a&gt; in &lt;code&gt;php.ini&lt;/code&gt;, but this is not common behaviour.</source>
          <target state="translated">Эти переменные не обязательно присутствуют; администратор может отключить некоторые или все из них, используя &lt;a href=&quot;https://www.php.net/manual/en/ini.core.php#ini.variables-order&quot;&gt;директиву &lt;code&gt;variables_order&lt;/code&gt; &lt;/a&gt; в &lt;code&gt;php.ini&lt;/code&gt; , но это не обычное поведение.</target>
        </trans-unit>
        <trans-unit id="729a9879fbcdd4d85db86c6d1b36908bb5bf9949" translate="yes" xml:space="preserve">
          <source>This function uses and modifies the global variable &lt;code&gt;$foo&lt;/code&gt;. &lt;strong&gt;Do not do this!&lt;/strong&gt;&lt;sub&gt;(Unless you really really really really know what you're doing, and even then: don't!)&lt;/sub&gt;</source>
          <target state="translated">Эта функция использует и изменяет глобальную переменную &lt;code&gt;$foo&lt;/code&gt; . &lt;strong&gt;Не делай это!&lt;/strong&gt; &lt;sub&gt;(Если вы действительно действительно действительно знаете, что делаете, и даже тогда: не надо!)&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="5f2b6b1f3294c6b1b9b389bdda4e74e3dd5b76b5" translate="yes" xml:space="preserve">
          <source>This only works with objects of the same class. If objects are from different classes (even extending one another) behavior of static vars will be as expected.</source>
          <target state="translated">Это работает только с объектами одного класса.Если объекты из разных классов (даже расширяющих друг друга),поведение статических парков будет таким,как ожидается.</target>
        </trans-unit>
        <trans-unit id="93dce72d02933cfb02ef65e7b7d61dfcd89aefbc" translate="yes" xml:space="preserve">
          <source>To cache value which is normally better to retrieve once. For
example, result of reading immutable file on server.</source>
          <target state="translated">Для кэширования значения,которое обычно лучше извлечь один раз.Например,результат чтения неизменяемого файла на сервере.</target>
        </trans-unit>
        <trans-unit id="9366d1449ad260d48207a9d7c5869d5ac4aa8828" translate="yes" xml:space="preserve">
          <source>To store values between consequent calls to function.</source>
          <target state="translated">Для сохранения значений между последующими вызовами функции.</target>
        </trans-unit>
        <trans-unit id="e070a653dbaac809338df34a78de0871495dad48" translate="yes" xml:space="preserve">
          <source>To store values between recursive calls when there is no way (or no
purpose) to pass them as params.</source>
          <target state="translated">Для хранения значений между рекурсивными вызовами,когда нет возможности (или цели)передать их как параметры.</target>
        </trans-unit>
        <trans-unit id="f0653e4d69e68c99f3473e13c00ee9cce6be01a2" translate="yes" xml:space="preserve">
          <source>Variables have a limited &quot;scope&quot;, or &quot;places from which they are accessible&quot;. Just because you wrote &lt;code&gt;$foo = 'bar';&lt;/code&gt; once &lt;em&gt;somewhere&lt;/em&gt; in your application doesn't mean you can refer to &lt;code&gt;$foo&lt;/code&gt; from &lt;em&gt;everywhere&lt;/em&gt; else inside the application. The variable &lt;code&gt;$foo&lt;/code&gt; has a certain scope within which it is valid and only code in the same scope has access to the variable.</source>
          <target state="translated">Переменные имеют ограниченную &amp;laquo;область видимости&amp;raquo; или &amp;laquo;места, из которых они доступны&amp;raquo;. Просто потому, что вы написали &lt;code&gt;$foo = 'bar';&lt;/code&gt; Однажды &lt;em&gt;где-то&lt;/em&gt; в вашем приложении не означает, что вы можете ссылаться на &lt;code&gt;$foo&lt;/code&gt; из &lt;em&gt;любого&lt;/em&gt; другого места внутри приложения. Переменная &lt;code&gt;$foo&lt;/code&gt; имеет определенную область видимости, в которой она действительна, и только код в той же области имеет доступ к переменной.</target>
        </trans-unit>
        <trans-unit id="3ec32b35eb769978685d4877ea5219c78f585a12" translate="yes" xml:space="preserve">
          <source>Very simple: PHP has &lt;em&gt;function scope&lt;/em&gt;. That's the only kind of scope separator that exists in PHP. Variables inside a function are only available inside that function. Variables outside of functions are available anywhere outside of functions, but not inside any function. This means there's one special scope in PHP: the &lt;em&gt;global&lt;/em&gt; scope. Any variable declared outside of any function is within this global scope.</source>
          <target state="translated">Очень просто: PHP имеет &lt;em&gt;область действия функции&lt;/em&gt; . Это единственный вид разделителя области видимости, который существует в PHP. Переменные внутри функции доступны только внутри этой функции. Переменные вне функций доступны везде вне функций, но не внутри какой-либо функции. Это означает, что в PHP есть одна особая область: &lt;em&gt;глобальная&lt;/em&gt; область. Любая переменная, объявленная вне какой-либо функции, находится в этой глобальной области видимости.</target>
        </trans-unit>
        <trans-unit id="af1e7856d7ec0ce5f15615436c1ef95f0cf0aae6" translate="yes" xml:space="preserve">
          <source>What about functions inside functions and classes?</source>
          <target state="translated">А как насчет функций внутри функций и классов?</target>
        </trans-unit>
        <trans-unit id="6254f2b5f8bf1ba12db135d773afffbbef9b6be2" translate="yes" xml:space="preserve">
          <source>What is &quot;variable scope&quot; in PHP? Are variables from one .php file accessible in another? Why do I sometimes get &lt;em&gt;&quot;undefined variable&quot;&lt;/em&gt; errors?</source>
          <target state="translated">Что такое &amp;laquo;переменная область&amp;raquo; в PHP? Доступны ли переменные из одного файла .php в другом? Почему я иногда получаю ошибки &lt;em&gt;&amp;laquo;неопределенная переменная&amp;raquo;&lt;/em&gt; ?</target>
        </trans-unit>
        <trans-unit id="bb6449bdee5b63295f7aa04798c75018ea21ef24" translate="yes" xml:space="preserve">
          <source>What is &quot;variable scope&quot;?</source>
          <target state="translated">Что такое &quot;переменная область видимости&quot;?</target>
        </trans-unit>
        <trans-unit id="96131e2666075b2978079441b07aa07043ed2fa4" translate="yes" xml:space="preserve">
          <source>What is scope good for?</source>
          <target state="translated">Для чего хороши возможности?</target>
        </trans-unit>
        <trans-unit id="ac89234b35981829ff5582a0e47710a2abd12fb2" translate="yes" xml:space="preserve">
          <source>You should avoid using the global scope in any way as much as possible; most certainly you should not be &quot;pulling&quot; variables out of the global scope into a local scope.</source>
          <target state="translated">Следует как можно больше избегать использования глобального диапазона;скорее всего,не следует &quot;вытягивать&quot; переменные из глобального диапазона в локальный.</target>
        </trans-unit>
        <trans-unit id="1adaa84dc07a16d34ede5b9a70713ff832a0f853" translate="yes" xml:space="preserve">
          <source>classes</source>
          <target state="translated">classes</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
