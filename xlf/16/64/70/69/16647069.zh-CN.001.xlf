<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/16647069">
    <body>
      <group id="16647069">
        <trans-unit id="64e9f69e0eda747eff93390d2e407af1a8e6d15a" translate="yes" xml:space="preserve">
          <source>&quot;It is faster!&quot; - Once you have the host that can run Linux containers, Docker is definitely faster at running a container than any virtual machine would be to launch. But launching a virtual machine (or remote machine) is a one-time cost. Over the course of the day, most Vagrant users never actually destroy their VM. It is a strange optimization for development environments. In production, where Docker really shines, I understand the need to quickly spin up/down containers.</source>
          <target state="translated">&quot;它的速度更快!&quot;-一旦你有了可以运行Linux容器的主机,Docker在运行容器方面绝对比任何虚拟机启动都要快。但是启动一个虚拟机(或远程机)是一次性的成本。在一天的时间里,大多数Vagrant用户从未实际销毁过他们的虚拟机。对于开发环境来说,这是一个奇怪的优化。在生产环境中,Docker真正闪耀的地方,我理解快速旋转更新容器的需求。</target>
        </trans-unit>
        <trans-unit id="ebaa2553839db99c20b90b730ed853ee017a3ff4" translate="yes" xml:space="preserve">
          <source>&quot;It is less moving parts&quot; - Yes, it can be, if you use Docker exclusively for every project. Even then, it is sacrificing flexibility for Docker lock-in. If you ever decide to not use Docker for any project, past, present, or future, then you'll have more moving parts. If you had used Vagrant, you have that one moving part that supports the rest.</source>
          <target state="translated">&quot;它的活动部件较少&quot;--是的,如果你在每个项目中都专门使用Docker的话,可以这样做。即使是这样,也是在为Docker的锁定而牺牲了灵活性。如果你曾经决定不在任何项目中使用Docker,不管是过去、现在还是未来,那么你会有更多的活动部件。如果你曾经使用过Vagrant,那么你就会有那个支持其他的活动部件。</target>
        </trans-unit>
        <trans-unit id="36479eef7dc91eb68da322a641b8a81a7924826d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://fabiorehm.com/blog/2013/04/28/lxc-provider-for-vagrant/&quot;&gt;Vagrant-lxc&lt;/a&gt; is a plugin for Vagrant that let's you use LXC to provision Vagrant. It does not have all the features that the default vagrant VM (VirtualBox) has but it should allow you more flexibility than docker containers. There is a video in the link showing its capabilities that is worth watching.</source>
          <target state="translated">&lt;a href=&quot;http://fabiorehm.com/blog/2013/04/28/lxc-provider-for-vagrant/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vagrant-lxc&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vagrant&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的插件，让您使用LXC来配置Vagrant。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;它没有默认游民虚拟机（VirtualBox）具有的所有功能，但与Docker容器相比，它应具有更大的灵活性。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;链接中有一个视频，显示了其功能，值得观看。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2a5a82083899dba6ad2386ea19ed8f6985492edf" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Disclaimer: I wrote Vagrant! But because I wrote Vagrant, I spend most of my time living in the DevOps world which includes software like Docker. I work with a lot of companies using Vagrant and many use Docker, and I see how the two interplay.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;免责声明：我写了Vagrant！&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;但是因为我写了Vagrant，所以大部分时间都花在DevOps世界中，其中包括Docker之类的软件。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我与许多使用Vagrant的公司合作，许多使用Docker，并且我看到两者之间如何相互作用。&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ceef433b9fab61b896e62247a65c2f245a6966d0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Before I talk too much, a direct answer:&lt;/strong&gt; in your specific scenario (yourself working alone, working on Linux, using Docker in production), you can stick with Docker alone and simplify things. In many other scenarios (I discuss further), it isn't so easy.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在我谈论太多之前，一个直接的答案是：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在您的特定情况下（您自己工作，在Linux上工作，在生产中使用Docker），您可以单独使用Docker并简化事情。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在许多其他情况下（我将进一步讨论），这并不是那么容易。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8115e639335d833240663506049d0442b68dbba5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Conclusion&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Conclusion&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="aedb1ef926c0885e5d82b12e357fff83c3b843f5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Definitely Docker for the win!&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;绝对是Docker的胜利！&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="12f22cbfe2cb3c33462bde67f1341cfd334dc89e" translate="yes" xml:space="preserve">
          <source>A final big plus is gained when you are moving into production, translating the development environment over to an infrastructure of hosts that are all the same in that they just have enough config to run docker means very little work indeed.</source>
          <target state="translated">最后一个大的加分项是,当你转入生产时,将开发环境转化为一个由主机组成的基础架构,而这些主机都是一样的,它们只是有足够的配置来运行docker,这意味着工作确实很少。</target>
        </trans-unit>
        <trans-unit id="a39a49106910c679d82f34436a9a8e7ca644724b" translate="yes" xml:space="preserve">
          <source>A non-docker Chef solo configuration would be considerably more complicated.</source>
          <target state="translated">非Docker Chef的单人配置将相当复杂。</target>
        </trans-unit>
        <trans-unit id="b3d6ebd4bde713011d00ded5d62c7082158d4b3d" translate="yes" xml:space="preserve">
          <source>As you may know Vagrant is for virtual machine management whereas Docker is for software containers management.
If you are not aware of the difference, here is:
A software container can share the same machine and kernel with other software containers. Using containers you save money because you don't waste resources on multiple operating systems (kernels), you can pack more software per server keeping a good degree of isolation.</source>
          <target state="translated">大家可能知道Vagrant是用来管理虚拟机的,而Docker是用来管理软件容器的。如果你还不知道其中的区别,下面是。一个软件容器可以与其他软件容器共享同一个机器和内核。使用容器可以节省资金,因为你不会在多个操作系统(内核)上浪费资源,你可以在每台服务器上打包更多的软件,保持良好的隔离度。</target>
        </trans-unit>
        <trans-unit id="57c5fe83d7a4e4bb41a8be75ab420418c3663b07" translate="yes" xml:space="preserve">
          <source>Continuously test the delivery mechanism to the VM(s) managed by Vagrant</source>
          <target state="translated">持续测试Vagrant管理的VM的交付机制</target>
        </trans-unit>
        <trans-unit id="8c9739a4d4881da5e95135f303654ada0f18cef7" translate="yes" xml:space="preserve">
          <source>Deliver the container to a Vagrant VM.</source>
          <target state="translated">将容器交付给Vagrant VM。</target>
        </trans-unit>
        <trans-unit id="16ab122f3b38a2fca2950e020e21b18bf3cb60ef" translate="yes" xml:space="preserve">
          <source>Docker on the other hand uses kernel cgroup and namespacing via &lt;a href=&quot;https://en.wikipedia.org/wiki/LXC&quot;&gt;LXC&lt;/a&gt;. It means that you are using the same kernel as the host and the same file system.
You can use Dockerfile with the &lt;code&gt;docker build&lt;/code&gt; command in order to handle the provisioning and configuration of your container. You have an example at &lt;a href=&quot;https://docs.docker.com/&quot;&gt;docs.docker.com&lt;/a&gt; on how to make your Dockerfile; it is very intuitive.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;另一方面，Docker通过&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/LXC&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;LXC&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用内核cgroup和命名空间&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这意味着您使用与主机相同的内核和相同的文件系统。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;您可以将Dockerfile与docker &lt;/font&gt;&lt;/font&gt; &lt;code&gt;docker build&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;命令一起使用，以处理容器的置备和配置。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;您在&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.docker.com/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;docs.docker.com&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;上&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;有一个&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;有关如何制作Dockerfile的示例；&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这是非常直观的。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="aa7a7be46f84391b8276013f27e43d30475d255a" translate="yes" xml:space="preserve">
          <source>Docker specifically runs Docker containers. If you're comparing directly to Vagrant: it is specifically a more specific (can only run Docker containers), less flexible (requires Linux or Linux host somewhere) solution. Of course if you're talking about production or CI, there is no comparison to Vagrant! Vagrant doesn't live in these environments, and so Docker should be used.</source>
          <target state="translated">Docker专门运行Docker容器。如果你直接和Vagrant进行比较的话:具体来说,它是一个比较特殊的(只能运行Docker容器),灵活性较差(需要Linux或Linux主机的某个地方)的解决方案。当然,如果你说的是生产型或者CI,那就没有Vagrant可以比的! Vagrant并不生活在这些环境中,所以应该使用Docker。</target>
        </trans-unit>
        <trans-unit id="80ddd9675bcb8f6abff91e9ab660fb332c84cf6c" translate="yes" xml:space="preserve">
          <source>Docker&amp;rsquo;s lightweight containers are faster compared with classic VMs
  and have become popular among developers and as part of CD and DevOps
  initiatives. If your purpose is isolation, Docker is an excellent choice.
  Vagrant is a VM manager that enables you to script configurations of
  individual VMs as well as do the provisioning. However, it is sill a
  VM dependent on VirtualBox (or another VM manager) with relatively
  large overhead. It requires you to have a hard drive idle that can be
  huge, it takes a lot of RAM, and performance can be suboptimal. Docker
  uses kernel cgroups and namespace isolation via LXC. This means that
  you are using the same kernel as the host and the same ile system.
  Vagrant is a level above Docker in terms of abstraction, so they are
  not really comparable. Configuration management tools such as Puppet are
  widely used for provisioning target environments. Reusing existing
  Puppet-based solutions is easy with Docker. You can also slice your
  solution, so the infrastructure is provisioned with Puppet; the
  middleware, the business application itself, or both are provisioned
  with Docker; and Docker is wrapped by Vagrant. With this range of
  tools, you can do what&amp;rsquo;s best for your scenario.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;与传统VM相比，Docker的轻量级容器速度更快，并已成为开发人员和CD和DevOps计划的一部分而受到欢迎。如果您的目的是隔离，那么Doc​​ker是一个绝佳的选择。 Vagrant是一个VM管理器，使您可以编写单个VM的配置脚本并进行配置。但是，这是依赖于VirtualBox的VM（或另一个VM管理器）的开销相对较大。它要求您使硬盘驱动器空闲，该硬盘驱动器可能很大，需要大量的RAM，并且性能可能欠佳。 Docker通过LXC使用内核cgroup和名称空间隔离。这意味着您使用与主机和相同的ile系统相同的内核。在抽象性方面，Vagrant比Docker高一个级别，因此它们之间的可比性并不高。配置管理工具（例如Puppet）被广泛用于供应目标环境。使用Docker可以轻松重用现有的基于Puppet的解决方案。您还可以分割您的解决方案，以便Puppet可以配置基础结构。中间件，业务应用程序本身或两者都由Docker预置; Docker由Vagrant包装。借助这些工具，您可以根据自己的情况做最好的事情。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a578c0664e2eebf827008f95aaef32d849c36cae" translate="yes" xml:space="preserve">
          <source>First, Vagrant is not a good abstraction for Docker. Vagrant was designed to manage virtual machines. Docker was designed to manage an application runtime. This means that Docker, by design, can interact with an application in richer ways, and has more information about the application runtime. The primitives in Docker are processes, log streams, environment variables, and network links between components. The primitives in Vagrant are machines, block devices, and ssh keys. Vagrant simply sits lower in the stack, and the only way it can interact with a container is by pretending it's just another kind of machine, that you can &quot;boot&quot; and &quot;log into&quot;. So, sure, you can type &quot;vagrant up&quot; with a Docker plugin and something pretty will happen. Is it a substitute for the full breadth of what Docker can do? Try native Docker for a couple days and see for yourself :)</source>
          <target state="translated">首先,Vagrant对于Docker来说并不是一个好的抽象。Vagrant是为了管理虚拟机而设计的。Docker是为了管理应用运行时而设计的。这意味着,Docker在设计上,可以以更丰富的方式与应用程序进行交互,并且拥有更多关于应用程序运行时的信息。Docker中的基元是进程、日志流、环境变量和组件之间的网络链接。Vagrant 中的基元是机器、块设备和 ssh 密钥。Vagrant只是坐在堆栈中较低的位置,它唯一能与容器交互的方式就是假装它只是另一种机器,你可以 &quot;启动 &quot;和 &quot;登录&quot;。所以,当然,你可以用Docker插件键入 &quot;vagrant up&quot;,就会有漂亮的事情发生。它能代替Docker所能做的全部广度吗?试着用原生Docker几天,你自己看看吧 :)</target>
        </trans-unit>
        <trans-unit id="03c3a123fcbd88a5928d6a5f5fa306f81f990237" translate="yes" xml:space="preserve">
          <source>Go for Docker Swarm if your requirements cross the single machine resources limit.</source>
          <target state="translated">如果您的需求超过了单机资源限制,请选择Docker Swarm。</target>
        </trans-unit>
        <trans-unit id="84bfa872bd59c8e2bcc41401a551a649895046dd" translate="yes" xml:space="preserve">
          <source>Here is a typical Vagrantfile</source>
          <target state="translated">下面是一个典型的流浪者档案</target>
        </trans-unit>
        <trans-unit id="80366611cec2099197710375dbe97b99dbd3a81b" translate="yes" xml:space="preserve">
          <source>Hope this clears things up!</source>
          <target state="translated">希望这能把事情弄清楚!</target>
        </trans-unit>
        <trans-unit id="74771a2f761b77293b10b6df9bcd780b6368374f" translate="yes" xml:space="preserve">
          <source>How to build, use and orchestrate Docker containers in DevOps
&lt;a href=&quot;http://www.javamagazine.mozaicreader.com/JulyAug2015#&amp;amp;pageSet=34&amp;amp;page=0&quot;&gt;http://www.javamagazine.mozaicreader.com/JulyAug2015#&amp;amp;pageSet=34&amp;amp;page=0&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如何在DevOps中构建，使用和编排Docker容器 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.javamagazine.mozaicreader.com/JulyAug2015#&amp;amp;pageSet=34&amp;amp;page=0&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http://www.javamagazine.mozaicreader.com/JulyAug2015#&amp;amp;pageSet=34&amp;amp;page=0&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c2685b9ea010e149de682d17f3c766093463d4a1" translate="yes" xml:space="preserve">
          <source>I am considering either Vagrant or Docker for this purpose. What are the pros and cons, or how do these solutions compare?</source>
          <target state="translated">为此,我正在考虑使用Vagrant或Docker。这些方案的优缺点是什么,或者说这两个方案的对比如何?</target>
        </trans-unit>
        <trans-unit id="795e61ffcf98d57bb9dc7a1b4f155908a8693ccb" translate="yes" xml:space="preserve">
          <source>I do have a decent amount of experience with Vagrant and can highly recommend it. It's certainly a more heavyweight solution in terms of it being VM based instead of LXC based. However, I've found a decent laptop (8&amp;nbsp;GB RAM, i5/i7 CPU) has no trouble running a VM using Vagrant/VirtualBox alongside development tooling.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我对Vagrant确实有相当丰富的经验，可以强烈推荐它。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;就基于VM而不是基于LXC而言，这无疑是一个更重量级的解决方案。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;但是，我发现一台不错的笔记本电脑（8 GB RAM，i5 / i7 CPU）可以在使用Vagrant / VirtualBox以及开发工具的情况下运行VM。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="01e1301ed961a941aa27dae5d4819bf0995bc3a9" translate="yes" xml:space="preserve">
          <source>I have been using a combination of VirtualBox, Vagrant and Docker for all my projects for several months and have strongly felt the following benefits.</source>
          <target state="translated">几个月来,我一直在使用VirtualBox、Vagrant和Docker的组合来完成我的所有项目,并强烈地感受到了以下好处。</target>
        </trans-unit>
        <trans-unit id="d5574bbf6c293c4ffa5ee529a6a8602f551f601a" translate="yes" xml:space="preserve">
          <source>I hope now its clear to see that it is very difficult, and I believe not correct, to compare Docker to Vagrant. For dev environments, Vagrant is more abstract, more general. Docker (and the various ways you can make it behave like Vagrant) is a specific use case of Vagrant, ignoring everything else Vagrant has to offer.</source>
          <target state="translated">我希望现在可以清楚地看到,这是很难的,而且我相信是不正确的,将Docker与Vagrant进行比较。对于开发环境,Vagrant更抽象,更笼统。Docker(以及你可以让它像Vagrant一样的各种方式)是Vagrant的一个具体用例,而忽略了Vagrant的其他一切。</target>
        </trans-unit>
        <trans-unit id="266a345aeade71ae1f55f705d1bf4a4ac876a69f" translate="yes" xml:space="preserve">
          <source>I preface my reply by admitting I have no experience with Docker, other than as an avid observer of what looks to be a really neat solution that's gaining a lot of traction.</source>
          <target state="translated">在回答之前,我承认我对Docker没有任何经验,只是作为一个狂热的观察者,我对这个看起来非常好的解决方案没有任何经验,而这个解决方案正在获得很大的牵引力。</target>
        </trans-unit>
        <trans-unit id="1da0a4684250d4f801d81ef70509001de806850f" translate="yes" xml:space="preserve">
          <source>I use Ubuntu for development and deployment and have a need for creating an isolated environment.</source>
          <target state="translated">我使用Ubuntu进行开发和部署,有创建一个隔离环境的需求。</target>
        </trans-unit>
        <trans-unit id="21756dbc3f9e053c2a1e1e2693cb7205d6298ce5" translate="yes" xml:space="preserve">
          <source>I'm the author of Docker.</source>
          <target state="translated">我是《Docker》的作者。</target>
        </trans-unit>
        <trans-unit id="83107c774e24baa3359721c6b10d1d2e94db5b13" translate="yes" xml:space="preserve">
          <source>If you interested I have a more detailed article on the development environment on my own web site at</source>
          <target state="translated">如果你有兴趣的话,我在我自己的网站上有一篇关于开发环境的详细文章,网址是</target>
        </trans-unit>
        <trans-unit id="cb700ef0c65219a8149df94f4d5b0c7f83e3544d" translate="yes" xml:space="preserve">
          <source>If your organization runs only Docker containers for all their projects and only has developers running on Linux, then okay, Docker could definitely work for you!</source>
          <target state="translated">如果你的组织只为他们的所有项目运行Docker容器,并且只有开发人员在Linux上运行,那么好吧,Docker绝对可以为你工作!</target>
        </trans-unit>
        <trans-unit id="f683ae3a8da933c7985d1ef7762fe49b02496fa1" translate="yes" xml:space="preserve">
          <source>If your purpose is the isolation, I think Docker is what you want.</source>
          <target state="translated">如果你的目的是隔离,我认为Docker就是你想要的。</target>
        </trans-unit>
        <trans-unit id="f496e74bc23d1d5de8151a9f48e6c5974eefa7f9" translate="yes" xml:space="preserve">
          <source>Implementing A Vagrant / Docker Development Environment</source>
          <target state="translated">实施Vagrant Docker开发环境</target>
        </trans-unit>
        <trans-unit id="be594435f695537c0f5a084ee3fcdc1335fff8b4" translate="yes" xml:space="preserve">
          <source>In Vagrant you can completely do away with any Chef solo provisioning and all you need your vagrant file to do is prepare a machine that runs a single small shell script that installs docker.  This means that my Vagrantfiles for every project are almost identical and very simple.</source>
          <target state="translated">在Vagrant中,你可以完全不需要任何Chef的solo provisioning,你需要你的vagrant文件所要做的就是准备一台机器,运行一个安装docker的小shell脚本。这意味着,我的Vagrant文件在每个项目中几乎都是一样的,非常简单。</target>
        </trans-unit>
        <trans-unit id="8226b530b2828383729716d372b19461989cd459" translate="yes" xml:space="preserve">
          <source>In conclusion: in highly specific use cases, Docker is certainly a possible replacement for Vagrant. In most use cases, it is not. Vagrant doesn't hinder your usage of Docker; it actually does what it can to make that experience smoother. If you find this isn't true, I'm happy to take suggestions to improve things, since a goal of Vagrant is to work equally well with any system.</source>
          <target state="translated">总结:在高度特定的用例中,Docker肯定是可以替代Vagrant的。但在大多数用例中,它并不是。Vagrant不会阻碍你对Docker的使用,它实际上是在尽力让你的使用体验更顺畅。如果你觉得这不是真的,我很乐意接受改进的建议,因为Vagrant的目标是在任何系统中都能同样出色地工作。</target>
        </trans-unit>
        <trans-unit id="571a8c9b0b75e617e77d6c4703c630f8e4f11f51" translate="yes" xml:space="preserve">
          <source>In summary: Vagrant is for managing machines, and Docker is for building and running application environments.</source>
          <target state="translated">总结:Vagrant是用于管理机器,而Docker是用于构建和运行应用环境。</target>
        </trans-unit>
        <trans-unit id="7542230d15af6767c6aec97a5a2316acae31daec" translate="yes" xml:space="preserve">
          <source>In theory it's possible to use Vagrant as an abstraction layer for Docker. I recommend against this for two reasons:</source>
          <target state="translated">理论上来说,使用Vagrant作为Docker的抽象层是可以的。我建议反对这样做,原因有二。</target>
        </trans-unit>
        <trans-unit id="a334e3169973872efed2661a2c2ca623f3c81a5f" translate="yes" xml:space="preserve">
          <source>In this example I am running MongoDB, Elastisearch, RabbitMQ and Memcached</source>
          <target state="translated">在这个例子中,我正在运行MongoDB、Elastisearch、RabbitMQ和Memcached。</target>
        </trans-unit>
        <trans-unit id="7896840f4711fb9c239ae9c66c6519d7eca4dc09" translate="yes" xml:space="preserve">
          <source>Interestingly, Vagrant and Docker may actually be complimentary. Vagrant can be extended to support different virtualization providers, and it may be possible that Docker is one such provider which gets support in the near future. See &lt;a href=&quot;https://github.com/dotcloud/docker/issues/404&quot;&gt;https://github.com/dotcloud/docker/issues/404&lt;/a&gt; for recent discussion on the topic.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;有趣的是，Vagrant和Docker实际上可能是互补的。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vagrant可以扩展为支持不同的虚拟化提供程序，而Docker可能是这样的提供程序之一，不久的将来会获得支持。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;有关&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;该主题的最新讨论，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;请参见&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/dotcloud/docker/issues/404&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https://github.com/dotcloud/docker/issues/404&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="db55c72885526babb16752fb132e7638a5dc64d3" translate="yes" xml:space="preserve">
          <source>It isn't correct to directly compare Vagrant to Docker. In some scenarios, they do overlap, and in the vast majority, they don't. Actually, the more apt comparison would be Vagrant versus something like Boot2Docker (minimal OS that can run Docker). Vagrant is a level above Docker in terms of abstractions, so it isn't a fair comparison in most cases.</source>
          <target state="translated">直接拿Vagrant和Docker做比较是不正确的。在某些情况下,它们确实有重叠,而在绝大多数情况下,它们没有重叠。实际上,更贴切的比较应该是Vagrant和Boot2Docker这样的东西(可以运行Docker的最小化操作系统)。Vagrant 在抽象方面比 Docker 高一个层次,所以在大多数情况下,这并不是一个公平的比较。</target>
        </trans-unit>
        <trans-unit id="51c7caa6193b979e7f731ad0bacd460e39fa86bb" translate="yes" xml:space="preserve">
          <source>It's a common misconception that you can only use Docker on Linux. That's incorrect; you can also install Docker on Mac, and Windows. When installed on Mac, Docker bundles a tiny Linux VM (25&amp;nbsp;MB on disk!) which acts as a wrapper for your container. Once installed this is completely transparent; you can use the Docker command-line in exactly the same way. This gives you the best of both worlds: you can test and develop your application using containers, which are very lightweight, easy to test and easy to move around (see for example &lt;a href=&quot;https://hub.docker.com&quot;&gt;https://hub.docker.com&lt;/a&gt; for sharing reusable containers with the Docker community), and you don't need to worry about the nitty-gritty details of managing virtual machines, which are just a means to an end anyway.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一个常见的误解是，您只能在Linux上使用Docker。那是不对的。您还可以在Mac和Windows上安装Docker。在Mac上安装时，Docker会捆绑一个微型Linux VM（磁盘上有25 MB！），该VM充当容器的包装器。安装后，它是完全透明的；您可以以完全相同的方式使用Docker命令行。这为您提供了两全其美的优势：您可以使用容器进行测试和开发应用程序，这些容器非常轻巧，易于测试并且易于移动（例如，&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://hub.docker.com&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;请&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;参阅&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https://hub.docker.com&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，以与以下人员共享可重复使用的容器： Docker社区），您无需担心管理虚拟机的细节，这只是达到目的的一种手段。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="45cc2e78cd92403a188aa713443a5b002162f138" translate="yes" xml:space="preserve">
          <source>Iterate on the component(s) to code against.</source>
          <target state="translated">迭代组件上的代码。</target>
        </trans-unit>
        <trans-unit id="831bf3bb9ccd38413f3223abafe0808607c7b1e5" translate="yes" xml:space="preserve">
          <source>Now to get all the services I need running I have a docker_start script that looks somthing like this</source>
          <target state="translated">现在,我有一个docker_start脚本,看起来是这样的</target>
        </trans-unit>
        <trans-unit id="f0f9e72b450d71926c145297ebb5b6a8d2800a4b" translate="yes" xml:space="preserve">
          <source>Of course is a new discipline to care with its own pitfals and challenges.</source>
          <target state="translated">当然是一门新的学科,要照顾到它的坑爹和挑战。</target>
        </trans-unit>
        <trans-unit id="1f5be52a267971b858616d166763a3ad658d7bb8" translate="yes" xml:space="preserve">
          <source>One of the really great things with Vagrant is the integration with &lt;a href=&quot;http://en.wikipedia.org/wiki/Puppet_%28software%29&quot;&gt;Puppet&lt;/a&gt;/&lt;a href=&quot;https://en.wikipedia.org/wiki/Chef_%28software%29&quot;&gt;Chef&lt;/a&gt;/shell scripts for automating configuration. If you're using one of these options to configure your production environment, you can create a development environment which is as close to identical as you're going to get, and this is exactly what you want.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vagrant真正很棒的事情之一是与&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Puppet_%28software%29&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Puppet&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; / &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Chef_%28software%29&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Chef&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; / shell脚本&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的集成，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;用于自动配置。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果使用这些选项之一来配置生产环境，则可以创建一个开发环境，该开发环境几乎与要获得的完全相同，而这正是您想要的。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ec252b7937e27d100e817ea646b06eab07d8d8af" translate="yes" xml:space="preserve">
          <source>Otherwise, I don't see a benefit to attempting to use Docker alone, since you lose a lot of what Vagrant has to offer, which have real business/productivity benefits:</source>
          <target state="translated">否则,我不认为尝试单独使用Docker会有什么好处,因为你会失去很多Vagrant所能提供的东西,而这些东西有真正的商业生产力的好处。</target>
        </trans-unit>
        <trans-unit id="bab99a4387026ddc94f3e9d007f84ac8e6bdb321" translate="yes" xml:space="preserve">
          <source>Please note that you can also use Docker for provisioning with Vagrant. This is very different than using Docker as a provider. &lt;a href=&quot;http://docs.vagrantup.com/v2/provisioning/docker.html&quot;&gt;http://docs.vagrantup.com/v2/provisioning/docker.html&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;请注意，您还可以将Docker与Vagrant一​​起使用。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这与使用Docker作为提供程序非常不同。&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://docs.vagrantup.com/v2/provisioning/docker.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http://docs.vagrantup.com/v2/provisioning/docker.html&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="af38ba35548de03e0b53000d47956167509829e7" translate="yes" xml:space="preserve">
          <source>Repeat this for all application components.</source>
          <target state="translated">对所有的应用组件重复上述步骤。</target>
        </trans-unit>
        <trans-unit id="f062e117843850276752b3ef927824d492f94ca3" translate="yes" xml:space="preserve">
          <source>Second, the lock-in argument. &quot;If you use Vagrant as an abstraction, you will not be locked into Docker!&quot;. From the point of view of Vagrant, which is designed to manage machines, this makes perfect sense: aren't containers just another kind of machine? Just like Amazon EC2 and VMware, we must be careful not to tie our provisioning tools to any particular vendor! This would create lock-in - better to abstract it all away with Vagrant. Except this misses the point of Docker entirely. Docker doesn't provision machines; it wraps your application in a lightweight portable runtime which can be dropped anywhere.</source>
          <target state="translated">第二,锁定论点。&quot;如果你把Vagrant作为一个抽象,就不会被锁定在Docker中!&quot;。从Vagrant的角度来看,这句话完全有道理:容器不就是另一种机器吗?就像亚马逊EC2和VMware一样,我们一定要注意不要把我们的供应工具与任何一个厂商捆绑在一起! 这样做会造成锁定----最好是用Vagrant把这一切抽象化掉。只是这样做完全错过了Docker的重点。Docker并不供应机器,它将你的应用程序包裹在一个轻量级的可移植运行时中,可以丢弃在任何地方。</target>
        </trans-unit>
        <trans-unit id="63798b973134fcff610515a865d931cd7f4bb300" translate="yes" xml:space="preserve">
          <source>Should I use Vagrant or Docker for creating an isolated environment</source>
          <target state="translated">我应该使用Vagrant还是Docker来创建隔离环境?</target>
        </trans-unit>
        <trans-unit id="e342edb0236a68b3b3358d9a09b4be49b7e7748e" translate="yes" xml:space="preserve">
          <source>Sleep well knowing when it is time to deploy the container, that integration testing was occurring on a much more continuous basis than it was before Docker.</source>
          <target state="translated">睡个好觉,知道什么时候该部署容器了,集成测试比Docker之前要连续进行得多。</target>
        </trans-unit>
        <trans-unit id="4254350df60a32c6e6130a881780c47f2b1b2528" translate="yes" xml:space="preserve">
          <source>So I see Vagrant evolving as a way of leveraging some of the awesome consequences Docker will have for app deployment.</source>
          <target state="translated">所以我认为Vagrant的演进是利用Docker对应用部署的一些可怕后果。</target>
        </trans-unit>
        <trans-unit id="1ae02a8d8667acba097ad137bc19e81a009b0918" translate="yes" xml:space="preserve">
          <source>Take a Java/Go application component and build it as a container
(note, not sure if the app should be built in the container or built then
installed to the container)</source>
          <target state="translated">取一个JavaGo应用程序组件,将其作为一个容器来构建(注意,不知道应用程序是应该在容器中构建还是安装到容器中去构建</target>
        </trans-unit>
        <trans-unit id="751b6f88d07e4787a1e2e247ad7ad2f4598c246a" translate="yes" xml:space="preserve">
          <source>The Bootstrap file that installs docker looks like this</source>
          <target state="translated">安装docker的Bootstrap文件看起来是这样的</target>
        </trans-unit>
        <trans-unit id="95e42d8c02236732151693c6220da42cd2eb11cf" translate="yes" xml:space="preserve">
          <source>The fact that as a developer I am constantly and consistently delivering containers to the VM and testing the application more holistically means that production releases will be further simplified.</source>
          <target state="translated">作为一名开发人员,我不断地、持续地将容器交付给虚拟机,并更全面地测试应用,这意味着生产发布将进一步简化。</target>
        </trans-unit>
        <trans-unit id="5e038958d5831f7501c7e9f7b01865b32159f651" translate="yes" xml:space="preserve">
          <source>The only reason you could want to use Vagrant is if you need to do BSD, Windows or other non-Linux development on your Ubuntu box. Otherwise, go for Docker.</source>
          <target state="translated">唯一可以使用Vagrant的原因是,如果你需要在Ubuntu的盒子上进行BSD、Windows或其他非Linux开发,那么你可以使用Vagrant。否则,请使用Docker。</target>
        </trans-unit>
        <trans-unit id="ec3fa2be605bbfda0daadda6de437a7e2ab8a96f" translate="yes" xml:space="preserve">
          <source>The other great thing with Vagrant is that you can version your Vagrantfile along with your application code. This means that everyone else on your team can share this file and you're guaranteed that everyone is working with the same environment configuration.</source>
          <target state="translated">Vagrant的另一个好处是,你可以将你的Vagrant文件和你的应用程序代码一起版本。这意味着你的团队中的每个人都可以共享这个文件,你可以保证每个人都使用相同的环境配置。</target>
        </trans-unit>
        <trans-unit id="aa21c7b0c1f5a57538aeb32528b3b479e4af0e12" translate="yes" xml:space="preserve">
          <source>The short answer is that if you want to manage machines, you should use Vagrant. And if you want to build and run applications environments, you should use Docker.</source>
          <target state="translated">简单的答案是,如果你想管理机器,你应该使用Vagrant。而如果你想构建和运行应用环境,你应该使用Docker。</target>
        </trans-unit>
        <trans-unit id="05dde88d23625506bfb21b458ae6b6d3479116d8" translate="yes" xml:space="preserve">
          <source>The thinking goes something like this:</source>
          <target state="translated">其思路是这样的。</target>
        </trans-unit>
        <trans-unit id="6a6bc37772ba6f7940bd8a7b45822a2e641f81f2" translate="yes" xml:space="preserve">
          <source>There is a really informative article in the actual Oracle Java magazine about using Docker in combination with Vagrant (and Puppet):</source>
          <target state="translated">在实际的Oracle Java杂志上有一篇关于结合Vagrant(和Puppet)使用Docker的文章,内容非常丰富。</target>
        </trans-unit>
        <trans-unit id="289452da861664a9dd45090386e4368e70a5f104" translate="yes" xml:space="preserve">
          <source>They are very much complementary.</source>
          <target state="translated">两者是非常相辅相成的。</target>
        </trans-unit>
        <trans-unit id="0f7e684dc8ada8d02c0227d80b555833593b376a" translate="yes" xml:space="preserve">
          <source>This means you can replace &lt;a href=&quot;https://en.wikipedia.org/wiki/Chef_%28software%29&quot;&gt;Chef&lt;/a&gt; or &lt;a href=&quot;http://en.wikipedia.org/wiki/Puppet_%28software%29&quot;&gt;Puppet&lt;/a&gt; with Docker. You can use combinations like Docker as provider (VM) with Chef as provisioner. Or you can use VirtualBox as provider and Docker as provisioner.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这意味着您可以&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;用Docker &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;替换&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Chef_%28software%29&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Chef&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;或&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Puppet_%28software%29&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Puppet&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;您可以使用诸如Docker作为提供者（VM）和Chef作为预配者的组合。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;或者，您可以使用VirtualBox作为提供者，而使用Docker作为预配者。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6d9d3c5f3ed2a350e4b8bc925a19807a443d833f" translate="yes" xml:space="preserve">
          <source>This seems to be the logical extension of Mitchell's statement that Vagrant is for development combined with Farley/Humbles thinking in Continuous Delivery. If I, as a developer, can shrink the feedback loop on integration testing and application delivery, higher quality and better work environments will follow.</source>
          <target state="translated">这似乎是对Mitchell的说法的逻辑延伸,Vagrant是为开发而生,结合FarleyHumbles在持续交付中的思维,这句话的逻辑延伸。如果我作为一个开发者,能够缩小集成测试和应用交付的反馈环,那么更高的质量和更好的工作环境就会随之而来。</target>
        </trans-unit>
        <trans-unit id="46ca9b4ef92d13aec598dba576c238a245baa1d0" translate="yes" xml:space="preserve">
          <source>To address specific counter arguments that I've heard in favor of using Docker instead of Vagrant:</source>
          <target state="translated">为了解决我听到的具体反驳意见,我听到的是支持使用Docker而不是Vagrant。</target>
        </trans-unit>
        <trans-unit id="a1a81d5698f299b0e22ec55295abb9cb8f0f1e92" translate="yes" xml:space="preserve">
          <source>Using both is an important part of application delivery testing. I am only beginning to get involved with Docker and thinking very hard about an application team that has terrible complexity in building and delivering its software.  Think of a classic Phoenix Project / Continuous Delivery situation.</source>
          <target state="translated">使用这两种方法是应用交付测试的重要组成部分。我现在才开始接触Docker,对于一个应用团队,在构建和交付软件的过程中具有可怕的复杂性,我也是刚刚开始接触Docker,并且思考得很认真。想想看一个典型的凤凰项目持续交付的情况。</target>
        </trans-unit>
        <trans-unit id="c56bfd57ad91150dd9a5d83cd039ed857e632932" translate="yes" xml:space="preserve">
          <source>Vagrant 1.6 has first-class support for &lt;a href=&quot;http://www.vagrantup.com/blog/feature-preview-vagrant-1-6-docker-dev-environments.html&quot;&gt;docker-based development environments&lt;/a&gt;. This will not launch a virtual machine on Linux, and will automatically launch a virtual machine on Mac and Windows. The end result is that working with Docker is uniform across all platforms, while Vagrant still handles the tedious details of things such as networking, synced folders, etc.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vagrant 1.6对&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.vagrantup.com/blog/feature-preview-vagrant-1-6-docker-dev-environments.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;基于docker的开发环境&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;提供了一流的支持&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。这不会在Linux上启动虚拟机，而会在Mac和Windows上自动启动虚拟机。最终结果是，在所有平台上使用Docker都是统一的，而Vagrant仍然处理诸如网络，同步文件夹等繁琐的细节。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8b8ec4b9b97fd1f750140c280c50612f2ef99fbb" translate="yes" xml:space="preserve">
          <source>Vagrant can launch VirtualBox, VMware, AWS, OpenStack, etc. machines. It doesn't matter what you need, Vagrant can launch it. If you are using Docker, Vagrant can install Docker on any of these so you can use them for that purpose.</source>
          <target state="translated">Vagrant可以启动VirtualBox、VMware、AWS、OpenStack等机器。不管你需要什么,Vagrant都可以启动它。如果你正在使用Docker,Vagrant可以将Docker安装在其中任何一个机器上,这样你就可以为此目的使用。</target>
        </trans-unit>
        <trans-unit id="3ba5ca5808d23256edd13271c9225a76f9e685e7" translate="yes" xml:space="preserve">
          <source>Vagrant is a single workflow for all your projects. Or to put another way, it is just one thing people have to learn to run a project whether it is in a Docker container or not. If, for example, in the future, a competitor arises to compete directly with Docker, Vagrant will be able to run that too.</source>
          <target state="translated">Vagrant是你所有项目的单一工作流程。或者换个说法,不管项目是否在Docker容器中,它只是人们必须要学会的一件事,来运行一个项目。比如说,如果将来出现了竞争对手,直接和Docker竞争,Vagrant也能运行。</target>
        </trans-unit>
        <trans-unit id="c27f223a6cb9238f63be51ac1d309395fccd336b" translate="yes" xml:space="preserve">
          <source>Vagrant is a tool for managing virtual machines. Docker is a tool for building and deploying applications by packaging them into lightweight containers. A container can hold pretty much any software component along with its dependencies (executables, libraries, configuration files, etc.), and execute it in a guaranteed and repeatable runtime environment. This makes it very easy to build your app once and deploy it anywhere - on your laptop for testing, then on different servers for live deployment, etc.</source>
          <target state="translated">Vagrant是一个管理虚拟机的工具。Docker是一种通过将应用程序打包成轻量级容器来构建和部署应用程序的工具。一个容器可以容纳几乎所有的软件组件及其依赖关系(可执行文件、库、配置文件等),并在一个有保证的、可重复的运行时环境中执行。这使得您可以非常容易地构建一次应用程序并在任何地方部署-在您的笔记本电脑上进行测试,然后在不同的服务器上进行实时部署等。</target>
        </trans-unit>
        <trans-unit id="efeca42dc823d05ae77ad67cd7d621ddd1de7b6d" translate="yes" xml:space="preserve">
          <source>Vagrant is a virtual machine manager. It allows you to script the virtual machine configuration as well as the provisioning. However, it is still a virtual machine depending on &lt;a href=&quot;http://en.wikipedia.org/wiki/VirtualBox&quot;&gt;VirtualBox&lt;/a&gt; (or others) with a huge overhead. It requires you to have a hard drive file that can be huge, it takes a lot of ram, and performance may be not very good.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vagrant是虚拟机经理。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;它允许您编写虚拟机配置和配置脚本。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;但是，它仍然是依赖&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/VirtualBox&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;VirtualBox&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（或其他）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的虚拟机&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，具有巨大的开销。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;它要求您拥有一个巨大的硬盘文件，需要大量内存，并且性能可能不是很好。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="835066f6f2446a7ca317229318fbd937babb3b9e" translate="yes" xml:space="preserve">
          <source>Vagrant knows how to configure some advanced or non-trivial things like networking and syncing folders. For example: Vagrant knows how to attach a static IP to a machine or forward ports, and the configuration is the same no matter what system you use (VirtualBox, VMware, etc.) For synced folders, Vagrant provides multiple mechanisms to get your local files over to the remote machine (VirtualBox shared folders, NFS, rsync, Samba [plugin], etc.). If you're using Docker, even Docker with a VM without Vagrant, you would have to manually do this or they would have to reinvent Vagrant in this case.</source>
          <target state="translated">Vagrant知道如何配置一些高级的或非高级的东西,比如联网和同步文件夹。比如说,Vagrant知道如何将静态IP附加到机器上或者转发端口。Vagrant知道如何在机器上附加一个静态IP或转发端口,无论你使用什么系统(VirtualBox、VMware等),配置都是一样的。如果你使用的是Docker,甚至是没有Vagrant的虚拟机的Docker,那么你就必须手动操作,否则他们在这种情况下必须重新发明Vagrant。</target>
        </trans-unit>
        <trans-unit id="860bf614250849c4cf7a8462f202554344f82d3d" translate="yes" xml:space="preserve">
          <source>Vagrant launches things to run apps/services for the purpose of development. This can be on VirtualBox, VMware. It can be remote like AWS, OpenStack. Within those, if you use containers, Vagrant doesn't care, and embraces that: it can automatically install, pull down, build, and run Docker containers, for example. With Vagrant 1.6, Vagrant has &lt;a href=&quot;http://www.vagrantup.com/blog/feature-preview-vagrant-1-6-docker-dev-environments.html&quot;&gt;docker-based development environments&lt;/a&gt;, and supports using Docker with the same workflow as Vagrant across Linux, Mac, and Windows. Vagrant doesn't try to replace Docker here, it embraces Docker practices.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vagrant出于开发目的启动运行应用程序/服务的事物。这可以在VMware的VirtualBox上。它可以像AWS，OpenStack一样是远程的。在这些容器中，如果您使用容器，则Vagrant不在乎，并接受它：例如，它可以自动安装，下拉，构建和运行Docker容器。在Vagrant 1.6中，Vagrant具有&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.vagrantup.com/blog/feature-preview-vagrant-1-6-docker-dev-environments.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;基于docker的开发环境&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，并支持在Linux，Mac和Windows上以与Vagrant相同的工作流程使用Docker。 Vagrant在这里没有尝试替换Docker，而是采用了Docker实践。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f1a64a0cdb06a03bddf57928277455accf45f34f" translate="yes" xml:space="preserve">
          <source>Vagrant works on Windows (back to XP), Mac (back to 10.5), and Linux (back to kernel 2.6). In all three cases, the workflow is the same. If you use Docker, Vagrant can launch a machine (VM or remote) that can run Docker on all three of these systems.</source>
          <target state="translated">Vagrant可以在Windows(回到XP)、Mac(回到10.5)和Linux(回到内核2.6)上工作。在这三种情况下,工作流程都是一样的。如果你使用Docker,Vagrant可以启动一个可以在这三个系统上运行Docker的机器(VM或远程)。</target>
        </trans-unit>
        <trans-unit id="058c9b8617f3dc2354c776be946dc78bbdd2bcbf" translate="yes" xml:space="preserve">
          <source>What runtime you choose for your application has nothing to do with how you provision your machines! For example it's pretty frequent to deploy applications to machines which are provisioned by someone else (for example an EC2 instance deployed by your system administrator, perhaps using Vagrant), or to bare metal machines which Vagrant can't provision at all. Conversely, you may use Vagrant to provision machines which have nothing to do with developing your application - for example a ready-to-use Windows IIS box or something. Or you may use Vagrant to provision machines for projects which don't use Docker - perhaps they use a combination of rubygems and rvm for dependency management and sandboxing for example.</source>
          <target state="translated">你为你的应用程序选择什么样的运行时,与你如何配置机器无关。例如,将应用程序部署到由别人配置的机器上(例如由您的系统管理员部署的EC2实例,可能是使用Vagrant),或者部署到Vagrant根本无法配置的裸机上。相反,你可以使用Vagrant来配置与开发应用程序无关的机器--比如一个现成的Windows IIS盒子之类的。或者你也可以用Vagrant来为不使用Docker的项目提供机器--也许他们使用rubygems和rvm的组合来进行依赖管理和沙盒管理。</target>
        </trans-unit>
        <trans-unit id="79ccd86a62436e552d5fc21716baf34aaa4159ad" translate="yes" xml:space="preserve">
          <source>With Vagrant now you can have Docker as a provider. &lt;a href=&quot;http://docs.vagrantup.com/v2/docker/&quot;&gt;http://docs.vagrantup.com/v2/docker/&lt;/a&gt;. Docker provider can be used instead of VirtualBox or VMware.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;现在，借助Vagrant，您可以将Docker作为提供程序。&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://docs.vagrantup.com/v2/docker/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http://docs.vagrantup.com/v2/docker/&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;可以使用Docker提供程序代替VirtualBox或VMware。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
