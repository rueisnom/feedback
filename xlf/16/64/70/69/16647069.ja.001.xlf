<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/16647069">
    <body>
      <group id="16647069">
        <trans-unit id="64e9f69e0eda747eff93390d2e407af1a8e6d15a" translate="yes" xml:space="preserve">
          <source>&quot;It is faster!&quot; - Once you have the host that can run Linux containers, Docker is definitely faster at running a container than any virtual machine would be to launch. But launching a virtual machine (or remote machine) is a one-time cost. Over the course of the day, most Vagrant users never actually destroy their VM. It is a strange optimization for development environments. In production, where Docker really shines, I understand the need to quickly spin up/down containers.</source>
          <target state="translated">&quot;速い!&quot;-Linuxコンテナを実行できるホストを用意してしまえば、どんな仮想マシンを起動するよりもDockerの方がコンテナの実行速度は間違いなく速いです。しかし、仮想マシン(またはリモートマシン)の起動には1回限りのコストがかかります。一日のうちに、ほとんどのVagrantユーザーは実際にVMを破壊することはありません。開発環境では妙に最適化されています。Dockerが本当に輝く本番環境では、アップダウンコンテナを素早く回転させる必要性を理解しています。</target>
        </trans-unit>
        <trans-unit id="ebaa2553839db99c20b90b730ed853ee017a3ff4" translate="yes" xml:space="preserve">
          <source>&quot;It is less moving parts&quot; - Yes, it can be, if you use Docker exclusively for every project. Even then, it is sacrificing flexibility for Docker lock-in. If you ever decide to not use Docker for any project, past, present, or future, then you'll have more moving parts. If you had used Vagrant, you have that one moving part that supports the rest.</source>
          <target state="translated">&quot;動く部分が少なくて済む&quot;-すべてのプロジェクトでDockerを独占的に使用しているのであれば、そうなる可能性があります。そうであっても、Dockerのロックインのために柔軟性を犠牲にしていることになります。過去、現在、未来を問わず、どんなプロジェクトにもDockerを使わないと決めた場合、可動部分が増えることになります。もしあなたがVagrantを使っていたとしたら、他の部分をサポートしている可動部分が1つあることになります。</target>
        </trans-unit>
        <trans-unit id="36479eef7dc91eb68da322a641b8a81a7924826d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://fabiorehm.com/blog/2013/04/28/lxc-provider-for-vagrant/&quot;&gt;Vagrant-lxc&lt;/a&gt; is a plugin for Vagrant that let's you use LXC to provision Vagrant. It does not have all the features that the default vagrant VM (VirtualBox) has but it should allow you more flexibility than docker containers. There is a video in the link showing its capabilities that is worth watching.</source>
          <target state="translated">&lt;a href=&quot;http://fabiorehm.com/blog/2013/04/28/lxc-provider-for-vagrant/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vagrant-lxc&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vagrantの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プラグインで、LXCを使用してVagrantをプロビジョニングできます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;デフォルトのvagrant VM（VirtualBox）が持つすべての機能を備えているわけではありませんが、Dockerコンテナーよりも柔軟性があります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;リンクに、見る価値のある機能を示すビデオがあります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2a5a82083899dba6ad2386ea19ed8f6985492edf" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Disclaimer: I wrote Vagrant! But because I wrote Vagrant, I spend most of my time living in the DevOps world which includes software like Docker. I work with a lot of companies using Vagrant and many use Docker, and I see how the two interplay.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;免責事項：私はヴァグラントを書いた！&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;しかし、私はVagrantを作成したため、Dockerのようなソフトウェアを含むDevOpsの世界での生活のほとんどを費やしています。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私は多くの企業でVagrantを使用しており、多くの企業がDockerを使用しています。この2つがどのように相互作用するかを理解しています。&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ceef433b9fab61b896e62247a65c2f245a6966d0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Before I talk too much, a direct answer:&lt;/strong&gt; in your specific scenario (yourself working alone, working on Linux, using Docker in production), you can stick with Docker alone and simplify things. In many other scenarios (I discuss further), it isn't so easy.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;話をする前に、直接的な答えを述べ&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。特定のシナリオ（自分で作業している、Linuxで作業している、本番環境でDockerを使用している）では、Dockerだけに固執して作業を簡略化できます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;他の多くのシナリオ（後で説明します）では、それほど簡単ではありません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8115e639335d833240663506049d0442b68dbba5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Conclusion&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Conclusion&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="aedb1ef926c0885e5d82b12e357fff83c3b843f5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Definitely Docker for the win!&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;勝利のための間違いなくDocker！&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="12f22cbfe2cb3c33462bde67f1341cfd334dc89e" translate="yes" xml:space="preserve">
          <source>A final big plus is gained when you are moving into production, translating the development environment over to an infrastructure of hosts that are all the same in that they just have enough config to run docker means very little work indeed.</source>
          <target state="translated">最後の大きなプラスは、本番環境に移行したときに得られるもので、開発環境を、docker を実行するのに十分な設定を持っているという点で、すべて同じホストのインフラストラクチャに変換することは、実際には非常に少ない作業を意味します。</target>
        </trans-unit>
        <trans-unit id="a39a49106910c679d82f34436a9a8e7ca644724b" translate="yes" xml:space="preserve">
          <source>A non-docker Chef solo configuration would be considerably more complicated.</source>
          <target state="translated">ドッカーではないChefのソロ設定はかなり複雑になります。</target>
        </trans-unit>
        <trans-unit id="b3d6ebd4bde713011d00ded5d62c7082158d4b3d" translate="yes" xml:space="preserve">
          <source>As you may know Vagrant is for virtual machine management whereas Docker is for software containers management.
If you are not aware of the difference, here is:
A software container can share the same machine and kernel with other software containers. Using containers you save money because you don't waste resources on multiple operating systems (kernels), you can pack more software per server keeping a good degree of isolation.</source>
          <target state="translated">ご存知の方も多いと思いますが、Vagrantは仮想マシン管理のためのものであるのに対し、Dockerはソフトウェアコンテナ管理のためのものです。違いがわからない方はこちら。ソフトウェアコンテナは他のソフトウェアコンテナと同じマシンやカーネルを共有することができます。コンテナを使えば、複数のオペレーティングシステム(カーネル)にリソースを浪費することがないので、コストを節約することができます。</target>
        </trans-unit>
        <trans-unit id="57c5fe83d7a4e4bb41a8be75ab420418c3663b07" translate="yes" xml:space="preserve">
          <source>Continuously test the delivery mechanism to the VM(s) managed by Vagrant</source>
          <target state="translated">Vagrantで管理されているVMへの配信メカニズムを継続的にテストする</target>
        </trans-unit>
        <trans-unit id="8c9739a4d4881da5e95135f303654ada0f18cef7" translate="yes" xml:space="preserve">
          <source>Deliver the container to a Vagrant VM.</source>
          <target state="translated">コンテナをVagrant VMに配信します。</target>
        </trans-unit>
        <trans-unit id="16ab122f3b38a2fca2950e020e21b18bf3cb60ef" translate="yes" xml:space="preserve">
          <source>Docker on the other hand uses kernel cgroup and namespacing via &lt;a href=&quot;https://en.wikipedia.org/wiki/LXC&quot;&gt;LXC&lt;/a&gt;. It means that you are using the same kernel as the host and the same file system.
You can use Dockerfile with the &lt;code&gt;docker build&lt;/code&gt; command in order to handle the provisioning and configuration of your container. You have an example at &lt;a href=&quot;https://docs.docker.com/&quot;&gt;docs.docker.com&lt;/a&gt; on how to make your Dockerfile; it is very intuitive.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一方、Dockerは&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/LXC&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;LXC&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を介してカーネルcgroupとネームスペースを使用します&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは、ホストと同じカーネルと同じファイルシステムを使用していることを意味します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コンテナー&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;のプロビジョニングと構成を処理するために&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、Dockerfileをdocker &lt;/font&gt;&lt;/font&gt; &lt;code&gt;docker build&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コマンドで&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用でき&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.docker.com/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;docs.docker.com&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に、Dockerfileを作成する方法の&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;例があり&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;とても直感的です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="aa7a7be46f84391b8276013f27e43d30475d255a" translate="yes" xml:space="preserve">
          <source>Docker specifically runs Docker containers. If you're comparing directly to Vagrant: it is specifically a more specific (can only run Docker containers), less flexible (requires Linux or Linux host somewhere) solution. Of course if you're talking about production or CI, there is no comparison to Vagrant! Vagrant doesn't live in these environments, and so Docker should be used.</source>
          <target state="translated">Dockerは特にDockerコンテナを実行します。Vagrantと直接比較するのであれば、Vagrantの方が具体的には(Dockerコンテナしか動かせない)、柔軟性が低い(どこかでLinuxかLinuxホストが必要)ソリューションです。もちろん、本番環境やCIの話をしているのであれば、Vagrantと比較することはできません。Vagrantはこれらの環境では生きていないので、Dockerを使うべきです。</target>
        </trans-unit>
        <trans-unit id="80ddd9675bcb8f6abff91e9ab660fb332c84cf6c" translate="yes" xml:space="preserve">
          <source>Docker&amp;rsquo;s lightweight containers are faster compared with classic VMs
  and have become popular among developers and as part of CD and DevOps
  initiatives. If your purpose is isolation, Docker is an excellent choice.
  Vagrant is a VM manager that enables you to script configurations of
  individual VMs as well as do the provisioning. However, it is sill a
  VM dependent on VirtualBox (or another VM manager) with relatively
  large overhead. It requires you to have a hard drive idle that can be
  huge, it takes a lot of RAM, and performance can be suboptimal. Docker
  uses kernel cgroups and namespace isolation via LXC. This means that
  you are using the same kernel as the host and the same ile system.
  Vagrant is a level above Docker in terms of abstraction, so they are
  not really comparable. Configuration management tools such as Puppet are
  widely used for provisioning target environments. Reusing existing
  Puppet-based solutions is easy with Docker. You can also slice your
  solution, so the infrastructure is provisioned with Puppet; the
  middleware, the business application itself, or both are provisioned
  with Docker; and Docker is wrapped by Vagrant. With this range of
  tools, you can do what&amp;rsquo;s best for your scenario.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Dockerの軽量コンテナーは、従来のVMに比べて高速であり、開発者の間で、そしてCDおよびDevOpsイニシアチブの一部として人気を博しています。目的が分離である場合は、Dockerが最適です。 Vagrantは、個々のVMの構成をスクリプト化し、プロビジョニングを実行できるVMマネージャーです。ただし、それは比較的大きなオーバーヘッドを持つVirtualBox（または別のVMマネージャー）に依存するVMです。巨大になる可能性のあるハードドライブアイドルが必要であり、RAMを大量に消費し、パフォーマンスが最適でない可能性があります。 DockerはLXCを介してカーネルcgroupと名前空間の分離を使用します。これは、ホストと同じカーネルと同じファイルシステムを使用していることを意味します。 Vagrantは、抽象化の観点からDockerの上位のレベルであるため、実際には比較できません。Puppetなどの構成管理ツールは、ターゲット環境のプロビジョニングに広く使用されています。 Dockerを使用すると、既存のPuppetベースのソリューションを簡単に再利用できます。ソリューションをスライスして、インフラストラクチャをPuppetでプロビジョニングすることもできます。ミドルウェア、ビジネスアプリケーション自体、またはその両方がDockerでプロビジョニングされます。 DockerはVagrantによってラップされています。この範囲のツールを使用すると、シナリオに最適な方法を実行できます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a578c0664e2eebf827008f95aaef32d849c36cae" translate="yes" xml:space="preserve">
          <source>First, Vagrant is not a good abstraction for Docker. Vagrant was designed to manage virtual machines. Docker was designed to manage an application runtime. This means that Docker, by design, can interact with an application in richer ways, and has more information about the application runtime. The primitives in Docker are processes, log streams, environment variables, and network links between components. The primitives in Vagrant are machines, block devices, and ssh keys. Vagrant simply sits lower in the stack, and the only way it can interact with a container is by pretending it's just another kind of machine, that you can &quot;boot&quot; and &quot;log into&quot;. So, sure, you can type &quot;vagrant up&quot; with a Docker plugin and something pretty will happen. Is it a substitute for the full breadth of what Docker can do? Try native Docker for a couple days and see for yourself :)</source>
          <target state="translated">まず、VagrantはDockerの抽象化には向いていません。Vagrantは仮想マシンを管理するために設計されていました。Dockerはアプリケーションのランタイムを管理するように設計されていました。つまり、Dockerは設計上、よりリッチな方法でアプリケーションと対話することができ、アプリケーションランタイムに関するより多くの情報を持っています。Dockerのプリミティブは、プロセス、ログストリーム、環境変数、コンポーネント間のネットワークリンクです。Vagrantのプリミティブはマシン、ブロックデバイス、ssh鍵です。Vagrantは単にスタックの下に座っているだけで、コンテナと対話する唯一の方法は、コンテナを「起動」して「ログイン」することができる別の種類のマシンであるかのように装うことです。だから、確かに、Dockerプラグインで &quot;vagrant up &quot;と入力すれば、何かきれいなことが起こるでしょう。Dockerができることの幅の広さの代用になるのでしょうか?ネイティブなDockerを数日試してみて、自分の目で確かめてみてください。)</target>
        </trans-unit>
        <trans-unit id="03c3a123fcbd88a5928d6a5f5fa306f81f990237" translate="yes" xml:space="preserve">
          <source>Go for Docker Swarm if your requirements cross the single machine resources limit.</source>
          <target state="translated">要件がシングルマシンのリソース制限を超える場合は、Docker Swarmを使用してください。</target>
        </trans-unit>
        <trans-unit id="84bfa872bd59c8e2bcc41401a551a649895046dd" translate="yes" xml:space="preserve">
          <source>Here is a typical Vagrantfile</source>
          <target state="translated">ここに代表的なVagrantfileがあります。</target>
        </trans-unit>
        <trans-unit id="80366611cec2099197710375dbe97b99dbd3a81b" translate="yes" xml:space="preserve">
          <source>Hope this clears things up!</source>
          <target state="translated">これでスッキリするといいですね!</target>
        </trans-unit>
        <trans-unit id="74771a2f761b77293b10b6df9bcd780b6368374f" translate="yes" xml:space="preserve">
          <source>How to build, use and orchestrate Docker containers in DevOps
&lt;a href=&quot;http://www.javamagazine.mozaicreader.com/JulyAug2015#&amp;amp;pageSet=34&amp;amp;page=0&quot;&gt;http://www.javamagazine.mozaicreader.com/JulyAug2015#&amp;amp;pageSet=34&amp;amp;page=0&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;DevOpsでDockerコンテナーを構築、使用、オーケストレーションする方法 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.javamagazine.mozaicreader.com/JulyAug2015#&amp;amp;pageSet=34&amp;amp;page=0&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http://www.javamagazine.mozaicreader.com/JulyAug2015#&amp;amp;pageSet=34&amp;amp;page=0&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c2685b9ea010e149de682d17f3c766093463d4a1" translate="yes" xml:space="preserve">
          <source>I am considering either Vagrant or Docker for this purpose. What are the pros and cons, or how do these solutions compare?</source>
          <target state="translated">そのためにVagrantかDockerのどちらかを検討しています。長所と短所、あるいはこれらのソリューションの比較を教えてください。</target>
        </trans-unit>
        <trans-unit id="795e61ffcf98d57bb9dc7a1b4f155908a8693ccb" translate="yes" xml:space="preserve">
          <source>I do have a decent amount of experience with Vagrant and can highly recommend it. It's certainly a more heavyweight solution in terms of it being VM based instead of LXC based. However, I've found a decent laptop (8&amp;nbsp;GB RAM, i5/i7 CPU) has no trouble running a VM using Vagrant/VirtualBox alongside development tooling.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私はVagrantでかなりの量の経験があり、強くお勧めできます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;LXCベースではなくVMベースであるという点で、これは確かにより重いソリューションです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ただし、適切なラップトップ（8 GB RAM、i5 / i7 CPU）では、開発ツールと一緒にVagrant / VirtualBoxを使用してVMを実行しても問題はないことがわかりました。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="01e1301ed961a941aa27dae5d4819bf0995bc3a9" translate="yes" xml:space="preserve">
          <source>I have been using a combination of VirtualBox, Vagrant and Docker for all my projects for several months and have strongly felt the following benefits.</source>
          <target state="translated">数ヶ月前からVirtualBox、Vagrant、Dockerを組み合わせて全てのプロジェクトで使用していますが、以下のようなメリットを強く感じています。</target>
        </trans-unit>
        <trans-unit id="d5574bbf6c293c4ffa5ee529a6a8602f551f601a" translate="yes" xml:space="preserve">
          <source>I hope now its clear to see that it is very difficult, and I believe not correct, to compare Docker to Vagrant. For dev environments, Vagrant is more abstract, more general. Docker (and the various ways you can make it behave like Vagrant) is a specific use case of Vagrant, ignoring everything else Vagrant has to offer.</source>
          <target state="translated">DockerとVagrantを比較するのは非常に難しく、正しくないと思います。開発環境としては、Vagrantの方がより抽象的で一般的です。Docker(とVagrantのように動作させるための様々な方法)はVagrantの特定のユースケースであり、Vagrantが提供している他の全てを無視しています。</target>
        </trans-unit>
        <trans-unit id="266a345aeade71ae1f55f705d1bf4a4ac876a69f" translate="yes" xml:space="preserve">
          <source>I preface my reply by admitting I have no experience with Docker, other than as an avid observer of what looks to be a really neat solution that's gaining a lot of traction.</source>
          <target state="translated">私はDockerを使った経験がないことを認めて返事を前置きしますが、それは、多くの牽引力を得ている本当にきちんとしたソリューションに見えるものを熱心に観察しているからです。</target>
        </trans-unit>
        <trans-unit id="1da0a4684250d4f801d81ef70509001de806850f" translate="yes" xml:space="preserve">
          <source>I use Ubuntu for development and deployment and have a need for creating an isolated environment.</source>
          <target state="translated">私は開発やデプロイにUbuntuを使用していますが、隔離された環境を作りたいというニーズがあります。</target>
        </trans-unit>
        <trans-unit id="21756dbc3f9e053c2a1e1e2693cb7205d6298ce5" translate="yes" xml:space="preserve">
          <source>I'm the author of Docker.</source>
          <target state="translated">Dockerの作者です。</target>
        </trans-unit>
        <trans-unit id="83107c774e24baa3359721c6b10d1d2e94db5b13" translate="yes" xml:space="preserve">
          <source>If you interested I have a more detailed article on the development environment on my own web site at</source>
          <target state="translated">もし興味があれば、私は自分のウェブサイトで開発環境についてのより詳細な記事を持っています。</target>
        </trans-unit>
        <trans-unit id="cb700ef0c65219a8149df94f4d5b0c7f83e3544d" translate="yes" xml:space="preserve">
          <source>If your organization runs only Docker containers for all their projects and only has developers running on Linux, then okay, Docker could definitely work for you!</source>
          <target state="translated">もしあなたの組織がすべてのプロジェクトでDockerコンテナだけを運用していて、開発者がLinux上でしか動いていないのであれば、Dockerは間違いなくあなたのために機能するでしょう。</target>
        </trans-unit>
        <trans-unit id="f683ae3a8da933c7985d1ef7762fe49b02496fa1" translate="yes" xml:space="preserve">
          <source>If your purpose is the isolation, I think Docker is what you want.</source>
          <target state="translated">隔離が目的ならDockerでいいと思います。</target>
        </trans-unit>
        <trans-unit id="f496e74bc23d1d5de8151a9f48e6c5974eefa7f9" translate="yes" xml:space="preserve">
          <source>Implementing A Vagrant / Docker Development Environment</source>
          <target state="translated">Vagrant Docker開発環境の実装</target>
        </trans-unit>
        <trans-unit id="be594435f695537c0f5a084ee3fcdc1335fff8b4" translate="yes" xml:space="preserve">
          <source>In Vagrant you can completely do away with any Chef solo provisioning and all you need your vagrant file to do is prepare a machine that runs a single small shell script that installs docker.  This means that my Vagrantfiles for every project are almost identical and very simple.</source>
          <target state="translated">VagrantではChefのソロプロビジョニングを完全に省くことができ、vagrantファイルが必要なのはdockerをインストールする小さなシェルスクリプトを実行するマシンを用意するだけです。つまり、どのプロジェクトでも私のVagrantfileはほとんど同じで、とてもシンプルなものになっています。</target>
        </trans-unit>
        <trans-unit id="8226b530b2828383729716d372b19461989cd459" translate="yes" xml:space="preserve">
          <source>In conclusion: in highly specific use cases, Docker is certainly a possible replacement for Vagrant. In most use cases, it is not. Vagrant doesn't hinder your usage of Docker; it actually does what it can to make that experience smoother. If you find this isn't true, I'm happy to take suggestions to improve things, since a goal of Vagrant is to work equally well with any system.</source>
          <target state="translated">結論から言うと、非常に特殊なユースケースでは、Dockerは確かにVagrantの代わりになる可能性があります。しかし、ほとんどのユースケースではそうではありません。VagrantはDockerの利用を妨げるものではなく、実際にはその経験をよりスムーズにするためにできることをしてくれます。もしこれが真実ではないと分かったら、私は物事を改善するための提案を喜んで受け止めます。</target>
        </trans-unit>
        <trans-unit id="571a8c9b0b75e617e77d6c4703c630f8e4f11f51" translate="yes" xml:space="preserve">
          <source>In summary: Vagrant is for managing machines, and Docker is for building and running application environments.</source>
          <target state="translated">まとめ:Vagrantはマシンを管理するためのもので、Dockerはアプリケーション環境を構築して実行するためのものです。</target>
        </trans-unit>
        <trans-unit id="7542230d15af6767c6aec97a5a2316acae31daec" translate="yes" xml:space="preserve">
          <source>In theory it's possible to use Vagrant as an abstraction layer for Docker. I recommend against this for two reasons:</source>
          <target state="translated">理論的にはDockerの抽象化レイヤーとしてVagrantを使うことは可能です。私は2つの理由でこれに反対することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="a334e3169973872efed2661a2c2ca623f3c81a5f" translate="yes" xml:space="preserve">
          <source>In this example I am running MongoDB, Elastisearch, RabbitMQ and Memcached</source>
          <target state="translated">この例では、MongoDB、Elastisearch、RabbitMQ、Memcached を実行しています。</target>
        </trans-unit>
        <trans-unit id="7896840f4711fb9c239ae9c66c6519d7eca4dc09" translate="yes" xml:space="preserve">
          <source>Interestingly, Vagrant and Docker may actually be complimentary. Vagrant can be extended to support different virtualization providers, and it may be possible that Docker is one such provider which gets support in the near future. See &lt;a href=&quot;https://github.com/dotcloud/docker/issues/404&quot;&gt;https://github.com/dotcloud/docker/issues/404&lt;/a&gt; for recent discussion on the topic.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;興味深いことに、VagrantとDockerは実際には補完的である場合があります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vagrantは、さまざまな仮想化プロバイダーをサポートするように拡張できます。Dockerは、近い将来サポートされるプロバイダーの1つである可能性があります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このトピックに関する最近の議論については、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/dotcloud/docker/issues/404&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https：//github.com/dotcloud/docker/issues/404&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;参照して&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ください&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="db55c72885526babb16752fb132e7638a5dc64d3" translate="yes" xml:space="preserve">
          <source>It isn't correct to directly compare Vagrant to Docker. In some scenarios, they do overlap, and in the vast majority, they don't. Actually, the more apt comparison would be Vagrant versus something like Boot2Docker (minimal OS that can run Docker). Vagrant is a level above Docker in terms of abstractions, so it isn't a fair comparison in most cases.</source>
          <target state="translated">VagrantとDockerを直接比較するのは正しくない。いくつかのシナリオでは重なることもありますが、大多数のシナリオでは重ならないこともあります。実際には、VagrantとBoot2Dockerのようなもの(Dockerを動かすことができる最小限のOS)との比較がより適切でしょう。Vagrantは抽象度の点でDockerの上のレベルなので、ほとんどの場合は公平な比較ではありません。</target>
        </trans-unit>
        <trans-unit id="51c7caa6193b979e7f731ad0bacd460e39fa86bb" translate="yes" xml:space="preserve">
          <source>It's a common misconception that you can only use Docker on Linux. That's incorrect; you can also install Docker on Mac, and Windows. When installed on Mac, Docker bundles a tiny Linux VM (25&amp;nbsp;MB on disk!) which acts as a wrapper for your container. Once installed this is completely transparent; you can use the Docker command-line in exactly the same way. This gives you the best of both worlds: you can test and develop your application using containers, which are very lightweight, easy to test and easy to move around (see for example &lt;a href=&quot;https://hub.docker.com&quot;&gt;https://hub.docker.com&lt;/a&gt; for sharing reusable containers with the Docker community), and you don't need to worry about the nitty-gritty details of managing virtual machines, which are just a means to an end anyway.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;LinuxではDockerしか使用できないというのは、よくある誤解です。それは不正解です。 MacおよびWindowsにDockerをインストールすることもできます。 DockerをMacにインストールすると、コンテナーのラッパーとして機能する小さなLinux VM（ディスク上で25 MB！）がバンドルされます。インストールすると、これは完全に透過的です。 Dockerコマンドラインをまったく同じ方法で使用できます。これにより、両方の長所が得られます。非常に軽量で、テストが簡単で、移動が簡単なコンテナーを使用して、アプリケーションをテストおよび開発できます（たとえば&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、再利用可能なコンテナーの共有&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;については、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://hub.docker.com&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https：//hub.docker.com&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;参照して&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ください）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Dockerコミュニティ）、そして仮想マシンの管理の詳細について心配する必要はありません。これはとにかく目的を達成するための手段にすぎません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="45cc2e78cd92403a188aa713443a5b002162f138" translate="yes" xml:space="preserve">
          <source>Iterate on the component(s) to code against.</source>
          <target state="translated">対象となるコンポーネントを反復処理します。</target>
        </trans-unit>
        <trans-unit id="831bf3bb9ccd38413f3223abafe0808607c7b1e5" translate="yes" xml:space="preserve">
          <source>Now to get all the services I need running I have a docker_start script that looks somthing like this</source>
          <target state="translated">これで、必要なサービスをすべて実行するために、以下のようなdocker_startスクリプトを作成しました。</target>
        </trans-unit>
        <trans-unit id="f0f9e72b450d71926c145297ebb5b6a8d2800a4b" translate="yes" xml:space="preserve">
          <source>Of course is a new discipline to care with its own pitfals and challenges.</source>
          <target state="translated">もちろん、独自のピットファルと課題を持ってケアするための新しい規律です。</target>
        </trans-unit>
        <trans-unit id="1f5be52a267971b858616d166763a3ad658d7bb8" translate="yes" xml:space="preserve">
          <source>One of the really great things with Vagrant is the integration with &lt;a href=&quot;http://en.wikipedia.org/wiki/Puppet_%28software%29&quot;&gt;Puppet&lt;/a&gt;/&lt;a href=&quot;https://en.wikipedia.org/wiki/Chef_%28software%29&quot;&gt;Chef&lt;/a&gt;/shell scripts for automating configuration. If you're using one of these options to configure your production environment, you can create a development environment which is as close to identical as you're going to get, and this is exactly what you want.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vagrantのすばらしい点の1つは、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;構成を自動化するための&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Puppet_%28software%29&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Puppet&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; / &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Chef_%28software%29&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Chef&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; / shellスクリプト&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;との統合&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これらのオプションのいずれかを使用して実稼働環境を構成している場合、取得しようとしているものとほぼ同じである開発環境を作成できます。これはまさに必要なことです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ec252b7937e27d100e817ea646b06eab07d8d8af" translate="yes" xml:space="preserve">
          <source>Otherwise, I don't see a benefit to attempting to use Docker alone, since you lose a lot of what Vagrant has to offer, which have real business/productivity benefits:</source>
          <target state="translated">そうでなければ、Dockerを単独で使おうとするメリットはないと思います。</target>
        </trans-unit>
        <trans-unit id="bab99a4387026ddc94f3e9d007f84ac8e6bdb321" translate="yes" xml:space="preserve">
          <source>Please note that you can also use Docker for provisioning with Vagrant. This is very different than using Docker as a provider. &lt;a href=&quot;http://docs.vagrantup.com/v2/provisioning/docker.html&quot;&gt;http://docs.vagrantup.com/v2/provisioning/docker.html&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;VagrantでのプロビジョニングにDockerを使用することもできます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは、Dockerをプロバイダーとして使用する場合とは大きく異なります。&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://docs.vagrantup.com/v2/provisioning/docker.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http://docs.vagrantup.com/v2/provisioning/docker.html&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="af38ba35548de03e0b53000d47956167509829e7" translate="yes" xml:space="preserve">
          <source>Repeat this for all application components.</source>
          <target state="translated">これをすべてのアプリケーションコンポーネントに対して繰り返します。</target>
        </trans-unit>
        <trans-unit id="f062e117843850276752b3ef927824d492f94ca3" translate="yes" xml:space="preserve">
          <source>Second, the lock-in argument. &quot;If you use Vagrant as an abstraction, you will not be locked into Docker!&quot;. From the point of view of Vagrant, which is designed to manage machines, this makes perfect sense: aren't containers just another kind of machine? Just like Amazon EC2 and VMware, we must be careful not to tie our provisioning tools to any particular vendor! This would create lock-in - better to abstract it all away with Vagrant. Except this misses the point of Docker entirely. Docker doesn't provision machines; it wraps your application in a lightweight portable runtime which can be dropped anywhere.</source>
          <target state="translated">2つ目は、ロックイン論。&quot;Vagrantを抽象化して使えば、Dockerにロックインされることはない!&quot; マシンを管理するために設計されたVagrantの観点から見れば、これは完全に理にかなっています:コンテナはただの別の種類のマシンではないでしょうか?Amazon EC2やVMwareのように、プロビジョニングツールを特定のベンダーに縛られないように注意しなければなりません。これではロックインが発生してしまいます-Vagrantで全てを抽象化した方が良いでしょう。しかし、これはDockerのポイントを完全に見逃している。Dockerはマシンをプロビジョニングするのではなく、アプリケーションを軽量なポータブルランタイムで包み込み、どこにでも落とせるようにします。</target>
        </trans-unit>
        <trans-unit id="63798b973134fcff610515a865d931cd7f4bb300" translate="yes" xml:space="preserve">
          <source>Should I use Vagrant or Docker for creating an isolated environment</source>
          <target state="translated">隔離された環境を作るにはVagrantとDockerのどちらを使うべきか</target>
        </trans-unit>
        <trans-unit id="e342edb0236a68b3b3358d9a09b4be49b7e7748e" translate="yes" xml:space="preserve">
          <source>Sleep well knowing when it is time to deploy the container, that integration testing was occurring on a much more continuous basis than it was before Docker.</source>
          <target state="translated">コンテナをデプロイする時には、Docker以前よりもずっと継続的に統合テストが行われていたことを知って、よく眠ることができます。</target>
        </trans-unit>
        <trans-unit id="4254350df60a32c6e6130a881780c47f2b1b2528" translate="yes" xml:space="preserve">
          <source>So I see Vagrant evolving as a way of leveraging some of the awesome consequences Docker will have for app deployment.</source>
          <target state="translated">Vagrantの進化は、Dockerがアプリのデプロイにもたらすであろう素晴らしい結果のいくつかを活用するための方法だと私は見ています。</target>
        </trans-unit>
        <trans-unit id="1ae02a8d8667acba097ad137bc19e81a009b0918" translate="yes" xml:space="preserve">
          <source>Take a Java/Go application component and build it as a container
(note, not sure if the app should be built in the container or built then
installed to the container)</source>
          <target state="translated">JavaGoアプリケーションのコンポーネントを取り、コンテナとしてビルドします(アプリがコンテナ内にビルドされるべきか、ビルドしてからコンテナにインストールされるべきかはわかりません。)</target>
        </trans-unit>
        <trans-unit id="751b6f88d07e4787a1e2e247ad7ad2f4598c246a" translate="yes" xml:space="preserve">
          <source>The Bootstrap file that installs docker looks like this</source>
          <target state="translated">dockerをインストールするBootstrapファイルは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="95e42d8c02236732151693c6220da42cd2eb11cf" translate="yes" xml:space="preserve">
          <source>The fact that as a developer I am constantly and consistently delivering containers to the VM and testing the application more holistically means that production releases will be further simplified.</source>
          <target state="translated">開発者として常に一貫してVMにコンテナを提供し、アプリケーションをより全体的にテストしているという事実は、プロダクションリリースがさらに簡素化されることを意味しています。</target>
        </trans-unit>
        <trans-unit id="5e038958d5831f7501c7e9f7b01865b32159f651" translate="yes" xml:space="preserve">
          <source>The only reason you could want to use Vagrant is if you need to do BSD, Windows or other non-Linux development on your Ubuntu box. Otherwise, go for Docker.</source>
          <target state="translated">Vagrantを使いたいと思う唯一の理由は、BSDやWindowsなどLinux以外の開発をUbuntuで行う必要がある場合です。それ以外の場合はDockerを使いましょう。</target>
        </trans-unit>
        <trans-unit id="ec3fa2be605bbfda0daadda6de437a7e2ab8a96f" translate="yes" xml:space="preserve">
          <source>The other great thing with Vagrant is that you can version your Vagrantfile along with your application code. This means that everyone else on your team can share this file and you're guaranteed that everyone is working with the same environment configuration.</source>
          <target state="translated">Vagrantのもう一つの素晴らしい点は、アプリケーションコードと一緒にVagrantfileもバージョン管理できることです。つまり、チーム内の他の誰もがこのファイルを共有することができ、全員が同じ環境設定で作業できることが保証されています。</target>
        </trans-unit>
        <trans-unit id="aa21c7b0c1f5a57538aeb32528b3b479e4af0e12" translate="yes" xml:space="preserve">
          <source>The short answer is that if you want to manage machines, you should use Vagrant. And if you want to build and run applications environments, you should use Docker.</source>
          <target state="translated">簡単に言うと、マシンを管理したいならVagrantを使うべきだということです。そして、アプリケーション環境を構築して実行したいのであれば、Dockerを使うべきだということです。</target>
        </trans-unit>
        <trans-unit id="05dde88d23625506bfb21b458ae6b6d3479116d8" translate="yes" xml:space="preserve">
          <source>The thinking goes something like this:</source>
          <target state="translated">考え方はこんな感じです。</target>
        </trans-unit>
        <trans-unit id="6a6bc37772ba6f7940bd8a7b45822a2e641f81f2" translate="yes" xml:space="preserve">
          <source>There is a really informative article in the actual Oracle Java magazine about using Docker in combination with Vagrant (and Puppet):</source>
          <target state="translated">実際のOracle Javaの雑誌に、Vagrant(とPuppet)と組み合わせてDockerを使うという本当に有益な記事があります。</target>
        </trans-unit>
        <trans-unit id="289452da861664a9dd45090386e4368e70a5f104" translate="yes" xml:space="preserve">
          <source>They are very much complementary.</source>
          <target state="translated">それらは非常に補完的なものです。</target>
        </trans-unit>
        <trans-unit id="0f7e684dc8ada8d02c0227d80b555833593b376a" translate="yes" xml:space="preserve">
          <source>This means you can replace &lt;a href=&quot;https://en.wikipedia.org/wiki/Chef_%28software%29&quot;&gt;Chef&lt;/a&gt; or &lt;a href=&quot;http://en.wikipedia.org/wiki/Puppet_%28software%29&quot;&gt;Puppet&lt;/a&gt; with Docker. You can use combinations like Docker as provider (VM) with Chef as provisioner. Or you can use VirtualBox as provider and Docker as provisioner.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;つまり、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Chef_%28software%29&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Chef&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;または&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Puppet_%28software%29&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Puppet&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;をDockerに&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;置き換えることができます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;プロバイダー（VM）としてのDockerとプロビジョニング担当者としてのChefのような組み合わせを使用できます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;または、VirtualBoxをプロバイダーとして、Dockerをプロビジョナーとして使用できます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6d9d3c5f3ed2a350e4b8bc925a19807a443d833f" translate="yes" xml:space="preserve">
          <source>This seems to be the logical extension of Mitchell's statement that Vagrant is for development combined with Farley/Humbles thinking in Continuous Delivery. If I, as a developer, can shrink the feedback loop on integration testing and application delivery, higher quality and better work environments will follow.</source>
          <target state="translated">これは、Vagrantは継続的なデリバリーにおけるFarleyHumblesの考え方と組み合わせた開発のためのものであるというMitchellの発言の論理的な延長線上にあるように思われます。開発者である私が、統合テストとアプリケーションデリバリーのフィードバックループを縮めることができれば、より高品質でより良い作業環境が得られるでしょう。</target>
        </trans-unit>
        <trans-unit id="46ca9b4ef92d13aec598dba576c238a245baa1d0" translate="yes" xml:space="preserve">
          <source>To address specific counter arguments that I've heard in favor of using Docker instead of Vagrant:</source>
          <target state="translated">VagrantではなくDockerを使うことに賛成していると聞いた具体的な反論に対処するために。</target>
        </trans-unit>
        <trans-unit id="a1a81d5698f299b0e22ec55295abb9cb8f0f1e92" translate="yes" xml:space="preserve">
          <source>Using both is an important part of application delivery testing. I am only beginning to get involved with Docker and thinking very hard about an application team that has terrible complexity in building and delivering its software.  Think of a classic Phoenix Project / Continuous Delivery situation.</source>
          <target state="translated">両方を使うことは、アプリケーションデリバリーテストの重要な部分です。私はDockerと関わり始めたばかりで、ソフトウェアの構築と配信に恐ろしいほどの複雑さを持つアプリケーションチームのことを一生懸命考えています。古典的なPhoenix ProjectのContinuous Deliveryの状況を考えてみてください。</target>
        </trans-unit>
        <trans-unit id="c56bfd57ad91150dd9a5d83cd039ed857e632932" translate="yes" xml:space="preserve">
          <source>Vagrant 1.6 has first-class support for &lt;a href=&quot;http://www.vagrantup.com/blog/feature-preview-vagrant-1-6-docker-dev-environments.html&quot;&gt;docker-based development environments&lt;/a&gt;. This will not launch a virtual machine on Linux, and will automatically launch a virtual machine on Mac and Windows. The end result is that working with Docker is uniform across all platforms, while Vagrant still handles the tedious details of things such as networking, synced folders, etc.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vagrant 1.6は、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.vagrantup.com/blog/feature-preview-vagrant-1-6-docker-dev-environments.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Dockerベースの開発環境を&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ファーストクラスでサポートしてい&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。これはLinuxでは仮想マシンを起動せず、MacおよびWindowsで仮想マシンを自動的に起動します。その結果、Dockerでの作業はすべてのプラットフォームで同じですが、Vagrantはネットワーキング、同期フォルダーなどの面倒な細部を処理します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8b8ec4b9b97fd1f750140c280c50612f2ef99fbb" translate="yes" xml:space="preserve">
          <source>Vagrant can launch VirtualBox, VMware, AWS, OpenStack, etc. machines. It doesn't matter what you need, Vagrant can launch it. If you are using Docker, Vagrant can install Docker on any of these so you can use them for that purpose.</source>
          <target state="translated">VagrantはVirtualBox、VMware、AWS、OpenStackなどのマシンを起動することができます。何が必要かは関係ありませんが、Vagrantは起動することができます。Dockerを使っているのであれば、VagrantはこれらのどれかにDockerをインストールすることができるので、その目的で使うことができます。</target>
        </trans-unit>
        <trans-unit id="3ba5ca5808d23256edd13271c9225a76f9e685e7" translate="yes" xml:space="preserve">
          <source>Vagrant is a single workflow for all your projects. Or to put another way, it is just one thing people have to learn to run a project whether it is in a Docker container or not. If, for example, in the future, a competitor arises to compete directly with Docker, Vagrant will be able to run that too.</source>
          <target state="translated">Vagrantはすべてのプロジェクトのための単一のワークフローです。別の言い方をすれば、Dockerコンテナに入っていようがいまいが、プロジェクトを動かすために人々が身につけなければならないことの一つに過ぎません。将来、例えばDockerと直接競合するような競合が出てきた場合、Vagrantはそれも実行できるようになります。</target>
        </trans-unit>
        <trans-unit id="c27f223a6cb9238f63be51ac1d309395fccd336b" translate="yes" xml:space="preserve">
          <source>Vagrant is a tool for managing virtual machines. Docker is a tool for building and deploying applications by packaging them into lightweight containers. A container can hold pretty much any software component along with its dependencies (executables, libraries, configuration files, etc.), and execute it in a guaranteed and repeatable runtime environment. This makes it very easy to build your app once and deploy it anywhere - on your laptop for testing, then on different servers for live deployment, etc.</source>
          <target state="translated">Vagrantは仮想マシンを管理するツールです。Dockerはアプリケーションを軽量コンテナにパッケージングして構築し、デプロイするためのツールです。コンテナは、依存関係(実行ファイル、ライブラリ、設定ファイルなど)と一緒に、ほぼすべてのソフトウェアコンポーネントを保持し、保証された再現性のあるランタイム環境で実行することができます。これにより、アプリを一度ビルドして、テスト用にラップトップにデプロイし、次にライブデプロイ用に別のサーバーにデプロイするなど、どこでも簡単にデプロイすることができます。</target>
        </trans-unit>
        <trans-unit id="efeca42dc823d05ae77ad67cd7d621ddd1de7b6d" translate="yes" xml:space="preserve">
          <source>Vagrant is a virtual machine manager. It allows you to script the virtual machine configuration as well as the provisioning. However, it is still a virtual machine depending on &lt;a href=&quot;http://en.wikipedia.org/wiki/VirtualBox&quot;&gt;VirtualBox&lt;/a&gt; (or others) with a huge overhead. It requires you to have a hard drive file that can be huge, it takes a lot of ram, and performance may be not very good.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vagrantは仮想マシンマネージャーです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;仮想マシンの構成とプロビジョニングをスクリプト化できます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ただし、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/VirtualBox&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;VirtualBox&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（またはその他）に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;依存する仮想マシンであり、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;オーバーヘッドが非常に大きくなります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;巨大になる可能性のあるハードドライブファイルが必要であり、RAMを大量に消費し、パフォーマンスがあまり良くない場合があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="835066f6f2446a7ca317229318fbd937babb3b9e" translate="yes" xml:space="preserve">
          <source>Vagrant knows how to configure some advanced or non-trivial things like networking and syncing folders. For example: Vagrant knows how to attach a static IP to a machine or forward ports, and the configuration is the same no matter what system you use (VirtualBox, VMware, etc.) For synced folders, Vagrant provides multiple mechanisms to get your local files over to the remote machine (VirtualBox shared folders, NFS, rsync, Samba [plugin], etc.). If you're using Docker, even Docker with a VM without Vagrant, you would have to manually do this or they would have to reinvent Vagrant in this case.</source>
          <target state="translated">Vagrantはネットワーキングやフォルダの同期など、高度な設定や、他愛のない設定をする方法を知っています。例えば 同期フォルダについては、Vagrantはローカルのファイルをリモートマシンに転送するための複数のメカニズムを提供しています(VirtualBoxの共有フォルダ、NFS、rsync、Samba [プラグイン]など)。もしあなたがDockerを使っている場合、Vagrantを使っていないVMでもDockerを使っている場合は、手動でこれをしなければならないか、この場合はVagrantを再発明しなければならないでしょう。</target>
        </trans-unit>
        <trans-unit id="860bf614250849c4cf7a8462f202554344f82d3d" translate="yes" xml:space="preserve">
          <source>Vagrant launches things to run apps/services for the purpose of development. This can be on VirtualBox, VMware. It can be remote like AWS, OpenStack. Within those, if you use containers, Vagrant doesn't care, and embraces that: it can automatically install, pull down, build, and run Docker containers, for example. With Vagrant 1.6, Vagrant has &lt;a href=&quot;http://www.vagrantup.com/blog/feature-preview-vagrant-1-6-docker-dev-environments.html&quot;&gt;docker-based development environments&lt;/a&gt;, and supports using Docker with the same workflow as Vagrant across Linux, Mac, and Windows. Vagrant doesn't try to replace Docker here, it embraces Docker practices.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vagrantは、開発を目的としてアプリやサービスを実行するための機能を起動します。これは、VirtualBox、VMwareにあります。 AWSやOpenStackのようにリモートにすることもできます。その中で、コンテナーを使用する場合、Vagrantは気にせず、それを受け入れます。たとえば、Dockerコンテナーを自動的にインストール、プルダウン、ビルド、および実行できます。 Vagrant 1.6では、Vagrantは&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Docker &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.vagrantup.com/blog/feature-preview-vagrant-1-6-docker-dev-environments.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ベースの開発環境&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を備えており、Linux、Mac、Windows全体でVagrantと同じワークフローでDockerの使用をサポートしています。 VagrantはここでDockerを置き換えることを試みていません。Dockerプラクティスを採用しています。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f1a64a0cdb06a03bddf57928277455accf45f34f" translate="yes" xml:space="preserve">
          <source>Vagrant works on Windows (back to XP), Mac (back to 10.5), and Linux (back to kernel 2.6). In all three cases, the workflow is the same. If you use Docker, Vagrant can launch a machine (VM or remote) that can run Docker on all three of these systems.</source>
          <target state="translated">VagrantはWindows (XPまで)、Mac (10.5まで)、Linux (kernel 2.6まで)で動作します。この3つのケースでは、ワークフローは同じです。Dockerを使っている場合、Vagrantはこれら3つのシステム全てでDockerを実行できるマシン(VMやリモート)を起動することができます。</target>
        </trans-unit>
        <trans-unit id="058c9b8617f3dc2354c776be946dc78bbdd2bcbf" translate="yes" xml:space="preserve">
          <source>What runtime you choose for your application has nothing to do with how you provision your machines! For example it's pretty frequent to deploy applications to machines which are provisioned by someone else (for example an EC2 instance deployed by your system administrator, perhaps using Vagrant), or to bare metal machines which Vagrant can't provision at all. Conversely, you may use Vagrant to provision machines which have nothing to do with developing your application - for example a ready-to-use Windows IIS box or something. Or you may use Vagrant to provision machines for projects which don't use Docker - perhaps they use a combination of rubygems and rvm for dependency management and sandboxing for example.</source>
          <target state="translated">アプリケーションにどのようなランタイムを選択するかは、マシンのプロビジョニング方法とは関係ありません!例えば、アプリケーションを他の誰かがプロビジョニングしたマシンにデプロイすることはよくあります。例えば、他の誰かがプロビジョニングしたマシン(例えば、システム管理者がデプロイしたEC2のインスタンス、Vagrantを使っているかもしれません)にアプリケーションをデプロイしたり、Vagrantがプロビジョニングできないベアメタルマシンにアプリケーションをデプロイすることはよくあります。逆に、アプリケーションの開発とは関係のないマシンのプロビジョニングにVagrantを使うこともできます。あるいは、Dockerを使っていないプロジェクトのためにVagrantを使ってマシンをプロビジョニングすることもできます-依存関係管理やサンドボックス化のためにrubygemsとrvmを組み合わせて使っているかもしれません。</target>
        </trans-unit>
        <trans-unit id="79ccd86a62436e552d5fc21716baf34aaa4159ad" translate="yes" xml:space="preserve">
          <source>With Vagrant now you can have Docker as a provider. &lt;a href=&quot;http://docs.vagrantup.com/v2/docker/&quot;&gt;http://docs.vagrantup.com/v2/docker/&lt;/a&gt;. Docker provider can be used instead of VirtualBox or VMware.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vagrantを使用すると、Dockerをプロバイダーとして使用できます。&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://docs.vagrantup.com/v2/docker/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http://docs.vagrantup.com/v2/docker/&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;VirtualBoxまたはVMwareの代わりにDockerプロバイダーを使用できます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
