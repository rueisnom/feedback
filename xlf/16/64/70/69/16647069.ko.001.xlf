<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://stackoverflow.com/questions/16647069">
    <body>
      <group id="16647069">
        <trans-unit id="64e9f69e0eda747eff93390d2e407af1a8e6d15a" translate="yes" xml:space="preserve">
          <source>&quot;It is faster!&quot; - Once you have the host that can run Linux containers, Docker is definitely faster at running a container than any virtual machine would be to launch. But launching a virtual machine (or remote machine) is a one-time cost. Over the course of the day, most Vagrant users never actually destroy their VM. It is a strange optimization for development environments. In production, where Docker really shines, I understand the need to quickly spin up/down containers.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&quot;더 빠릅니다!&quot; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;-Linux 컨테이너를 실행할 수있는 호스트가 있으면 Docker는 가상 머신을 시작하는 것보다 컨테이너를 빠르게 실행할 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그러나 가상 머신 (또는 원격 머신)을 시작하는 것은 일회성 비용입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하루 종일 대부분의 Vagrant 사용자는 실제로 VM을 파괴하지 않습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;개발 환경에 대한 이상한 최적화입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Docker가 실제로 빛나는 프로덕션 환경에서 컨테이너를 빠르게 스핀 업 / 다운해야한다는 것을 알고 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ebaa2553839db99c20b90b730ed853ee017a3ff4" translate="yes" xml:space="preserve">
          <source>&quot;It is less moving parts&quot; - Yes, it can be, if you use Docker exclusively for every project. Even then, it is sacrificing flexibility for Docker lock-in. If you ever decide to not use Docker for any project, past, present, or future, then you'll have more moving parts. If you had used Vagrant, you have that one moving part that supports the rest.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&quot;이동하는 부분이 적다&quot;-예, 모든 프로젝트에 Docker를 독점적으로 사용한다면 가능합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그럼에도 불구하고 Docker lock-in의 유연성을 희생합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;과거, 현재 또는 미래의 프로젝트에 Docker를 사용하지 않기로 결정한 경우 움직이는 부분이 더 많습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vagrant를 사용했다면 나머지 부분을 지원하는 움직이는 부분이 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="36479eef7dc91eb68da322a641b8a81a7924826d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://fabiorehm.com/blog/2013/04/28/lxc-provider-for-vagrant/&quot;&gt;Vagrant-lxc&lt;/a&gt; is a plugin for Vagrant that let's you use LXC to provision Vagrant. It does not have all the features that the default vagrant VM (VirtualBox) has but it should allow you more flexibility than docker containers. There is a video in the link showing its capabilities that is worth watching.</source>
          <target state="translated">&lt;a href=&quot;http://fabiorehm.com/blog/2013/04/28/lxc-provider-for-vagrant/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vagrant-lxc&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Lgrant&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 사용하여 Vagrant를 프로비저닝 할 수있는 Vagrant 플러그인입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;기본 vagrant VM (VirtualBox)의 모든 기능을 갖추고 있지는 않지만 docker 컨테이너보다 더 유연합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;볼 가치가있는 기능을 보여주는 비디오가 링크에 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2a5a82083899dba6ad2386ea19ed8f6985492edf" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Disclaimer: I wrote Vagrant! But because I wrote Vagrant, I spend most of my time living in the DevOps world which includes software like Docker. I work with a lot of companies using Vagrant and many use Docker, and I see how the two interplay.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;면책 조항 : 나는 Vagrant를 썼습니다! &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그러나 Vagrant를 작성했기 때문에 Docker와 같은 소프트웨어가 포함 된 DevOps 세계에서 대부분의 시간을 보냅니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vagrant를 사용하는 많은 회사와 Docker를 사용하는 많은 회사와 협력하고 있으며 두 회사가 어떻게 상호 작용하는지 확인합니다.&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ceef433b9fab61b896e62247a65c2f245a6966d0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Before I talk too much, a direct answer:&lt;/strong&gt; in your specific scenario (yourself working alone, working on Linux, using Docker in production), you can stick with Docker alone and simplify things. In many other scenarios (I discuss further), it isn't so easy.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;너무 많은 이야기를하기 전에 직접 답&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 하십시오. 특정 시나리오 (자체 작업, Linux 작업, 프로덕션에서 Docker 사용)에서 Docker 만 사용하여 작업을 단순화 할 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다른 많은 시나리오에서 (나는 더 논의한다) 쉽지 않다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8115e639335d833240663506049d0442b68dbba5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Conclusion&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Conclusion&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="aedb1ef926c0885e5d82b12e357fff83c3b843f5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Definitely Docker for the win!&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;승리를위한 도커!&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="12f22cbfe2cb3c33462bde67f1341cfd334dc89e" translate="yes" xml:space="preserve">
          <source>A final big plus is gained when you are moving into production, translating the development environment over to an infrastructure of hosts that are all the same in that they just have enough config to run docker means very little work indeed.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;프로덕션 환경으로 전환 할 때 최종 빅 플러스는 개발 환경을 도커를 실행하기에 충분한 구성이 있다는 점에서 모두 동일한 호스트 인프라로 변환하므로 실제로 작업이 거의 없습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a39a49106910c679d82f34436a9a8e7ca644724b" translate="yes" xml:space="preserve">
          <source>A non-docker Chef solo configuration would be considerably more complicated.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;독 커가 아닌 Chef 솔로 구성은 훨씬 더 복잡합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b3d6ebd4bde713011d00ded5d62c7082158d4b3d" translate="yes" xml:space="preserve">
          <source>As you may know Vagrant is for virtual machine management whereas Docker is for software containers management.
If you are not aware of the difference, here is:
A software container can share the same machine and kernel with other software containers. Using containers you save money because you don't waste resources on multiple operating systems (kernels), you can pack more software per server keeping a good degree of isolation.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;아시다시피 Vagrant는 가상 머신 관리를위한 것이고 Docker는 소프트웨어 컨테이너 관리를위한 것입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;차이점을 모르는 경우 다음과 같습니다. 소프트웨어 컨테이너는 동일한 시스템 및 커널을 다른 소프트웨어 컨테이너와 공유 할 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;컨테이너를 사용하면 여러 운영 체제 (커널)에서 리소스를 낭비하지 않기 때문에 비용을 절약 할 수 있으므로 서버 당 더 많은 소프트웨어를 패키징하여 격리 수준을 유지할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="57c5fe83d7a4e4bb41a8be75ab420418c3663b07" translate="yes" xml:space="preserve">
          <source>Continuously test the delivery mechanism to the VM(s) managed by Vagrant</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vagrant가 관리하는 VM에 전달 메커니즘을 지속적으로 테스트&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8c9739a4d4881da5e95135f303654ada0f18cef7" translate="yes" xml:space="preserve">
          <source>Deliver the container to a Vagrant VM.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;컨테이너를 Vagrant VM에 제공하십시오.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="16ab122f3b38a2fca2950e020e21b18bf3cb60ef" translate="yes" xml:space="preserve">
          <source>Docker on the other hand uses kernel cgroup and namespacing via &lt;a href=&quot;https://en.wikipedia.org/wiki/LXC&quot;&gt;LXC&lt;/a&gt;. It means that you are using the same kernel as the host and the same file system.
You can use Dockerfile with the &lt;code&gt;docker build&lt;/code&gt; command in order to handle the provisioning and configuration of your container. You have an example at &lt;a href=&quot;https://docs.docker.com/&quot;&gt;docs.docker.com&lt;/a&gt; on how to make your Dockerfile; it is very intuitive.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;반면 Docker는 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/LXC&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;LXC&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 통해 커널 cgroup과 네임 스페이스를 사용합니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이는 호스트 및 동일한 파일 시스템과 동일한 커널을 사용하고 있음을 의미합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;컨테이너의 프로비저닝 및 구성을 처리하기 위해 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;dockerfile을 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;docker build&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 명령 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;과 함께 사용할 수 있습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;당신은 예를 들어이 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.docker.com/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;docs.docker.com&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 당신의 Dockerfile을 만드는 방법에 대한을; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;매우 직관적입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="aa7a7be46f84391b8276013f27e43d30475d255a" translate="yes" xml:space="preserve">
          <source>Docker specifically runs Docker containers. If you're comparing directly to Vagrant: it is specifically a more specific (can only run Docker containers), less flexible (requires Linux or Linux host somewhere) solution. Of course if you're talking about production or CI, there is no comparison to Vagrant! Vagrant doesn't live in these environments, and so Docker should be used.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Docker는 특히 Docker 컨테이너를 실행합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vagrant와 직접 비교하는 경우 : 특히 더 구체적이며 (Docker 컨테이너 만 실행할 수 있음) 덜 유연합니다 (Linux 또는 Linux 호스트가 필요합니다). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;물론 생산 또는 CI에 대해 이야기하고 있다면 Vagrant와 비교할 수 없습니다! &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vagrant는 이러한 환경에 살지 않으므로 Docker를 사용해야합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="80ddd9675bcb8f6abff91e9ab660fb332c84cf6c" translate="yes" xml:space="preserve">
          <source>Docker&amp;rsquo;s lightweight containers are faster compared with classic VMs
  and have become popular among developers and as part of CD and DevOps
  initiatives. If your purpose is isolation, Docker is an excellent choice.
  Vagrant is a VM manager that enables you to script configurations of
  individual VMs as well as do the provisioning. However, it is sill a
  VM dependent on VirtualBox (or another VM manager) with relatively
  large overhead. It requires you to have a hard drive idle that can be
  huge, it takes a lot of RAM, and performance can be suboptimal. Docker
  uses kernel cgroups and namespace isolation via LXC. This means that
  you are using the same kernel as the host and the same ile system.
  Vagrant is a level above Docker in terms of abstraction, so they are
  not really comparable. Configuration management tools such as Puppet are
  widely used for provisioning target environments. Reusing existing
  Puppet-based solutions is easy with Docker. You can also slice your
  solution, so the infrastructure is provisioned with Puppet; the
  middleware, the business application itself, or both are provisioned
  with Docker; and Docker is wrapped by Vagrant. With this range of
  tools, you can do what&amp;rsquo;s best for your scenario.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Docker의 경량 컨테이너는 클래식 VM에 비해 더 빠르며 개발자들 사이에서 CD 및 DevOps 이니셔티브의 일부로 인기를 얻었습니다. 목적이 격리라면 Docker가 탁월한 선택입니다. Vagrant는 프로비저닝뿐만 아니라 개별 VM의 구성을 스크립팅 할 수있는 VM 관리자입니다. 그러나 비교적 큰 오버 헤드가있는 VirtualBox (또는 다른 VM 관리자)에 종속 된 VM이 아닙니다. 거대한 하드 드라이브 유휴 상태가 필요하고 많은 RAM이 필요하며 성능이 차선책 일 수 있습니다. Docker는 LXC를 통해 커널 cgroup과 네임 스페이스 격리를 사용합니다. 이는 호스트 및 동일한 ile 시스템과 동일한 커널을 사용하고 있음을 의미합니다. Vagrant는 추상화 측면에서 Docker보다 높은 수준이므로 실제로 비교할 수는 없습니다.Puppet과 같은 구성 관리 도구는 대상 환경을 프로비저닝하는 데 널리 사용됩니다. Docker를 사용하면 기존 Puppet 기반 솔루션을 쉽게 재사용 할 수 있습니다. 또한 솔루션을 슬라이스하여 Puppet으로 인프라를 프로비저닝 할 수 있습니다. 미들웨어, 비즈니스 애플리케이션 자체 또는 둘 다 Docker로 프로비저닝됩니다. Docker는 Vagrant로 포장되어 있습니다. 이 범위의 도구를 사용하면 시나리오에 가장 적합한 것을 수행 할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a578c0664e2eebf827008f95aaef32d849c36cae" translate="yes" xml:space="preserve">
          <source>First, Vagrant is not a good abstraction for Docker. Vagrant was designed to manage virtual machines. Docker was designed to manage an application runtime. This means that Docker, by design, can interact with an application in richer ways, and has more information about the application runtime. The primitives in Docker are processes, log streams, environment variables, and network links between components. The primitives in Vagrant are machines, block devices, and ssh keys. Vagrant simply sits lower in the stack, and the only way it can interact with a container is by pretending it's just another kind of machine, that you can &quot;boot&quot; and &quot;log into&quot;. So, sure, you can type &quot;vagrant up&quot; with a Docker plugin and something pretty will happen. Is it a substitute for the full breadth of what Docker can do? Try native Docker for a couple days and see for yourself :)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;첫째, Vagrant는 Docker의 추상화가 아닙니다. Vagrant는 가상 머신을 관리하도록 설계되었습니다. Docker는 응용 프로그램 런타임을 관리하도록 설계되었습니다. 즉, Docker는 설계 상 응용 프로그램과보다 다양한 방식으로 상호 작용할 수 있으며 응용 프로그램 런타임에 대한 자세한 정보를 제공합니다. Docker의 기본 요소는 프로세스, 로그 스트림, 환경 변수 및 구성 요소 간의 네트워크 링크입니다. Vagrant의 기본 요소는 시스템, 블록 장치 및 ssh 키입니다. Vagrant는 단순히 스택에서 낮게 유지되며 컨테이너와 상호 작용할 수있는 유일한 방법은 다른 종류의 컴퓨터 인 것처럼 &quot;부팅&quot;하고 &quot;로그인&quot;하는 것입니다. 따라서 Docker 플러그인으로 &quot;vagrant up&quot;을 입력하면 예쁜 일이 발생합니다.Docker가 할 수있는 모든 것을 대체 할 수 있습니까? 며칠 동안 네이티브 Docker를 사용 해보고 직접보십시오 :)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="03c3a123fcbd88a5928d6a5f5fa306f81f990237" translate="yes" xml:space="preserve">
          <source>Go for Docker Swarm if your requirements cross the single machine resources limit.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;요구 사항이 단일 시스템 리소스 제한을 초과하면 Docker Swarm으로 이동하십시오.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="84bfa872bd59c8e2bcc41401a551a649895046dd" translate="yes" xml:space="preserve">
          <source>Here is a typical Vagrantfile</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;전형적인 Vagrantfile이 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="80366611cec2099197710375dbe97b99dbd3a81b" translate="yes" xml:space="preserve">
          <source>Hope this clears things up!</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;희망이 이것들을 정리하기를 바랍니다!&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="74771a2f761b77293b10b6df9bcd780b6368374f" translate="yes" xml:space="preserve">
          <source>How to build, use and orchestrate Docker containers in DevOps
&lt;a href=&quot;http://www.javamagazine.mozaicreader.com/JulyAug2015#&amp;amp;pageSet=34&amp;amp;page=0&quot;&gt;http://www.javamagazine.mozaicreader.com/JulyAug2015#&amp;amp;pageSet=34&amp;amp;page=0&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;DevOps에서 Docker 컨테이너를 빌드, 사용 및 조정하는 방법 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.javamagazine.mozaicreader.com/JulyAug2015#&amp;amp;pageSet=34&amp;amp;page=0&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http://www.javamagazine.mozaicreader.com/JulyAug2015#&amp;amp;pageSet=34&amp;amp;page=0&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c2685b9ea010e149de682d17f3c766093463d4a1" translate="yes" xml:space="preserve">
          <source>I am considering either Vagrant or Docker for this purpose. What are the pros and cons, or how do these solutions compare?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 목적으로 Vagrant 또는 Docker를 고려하고 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;장단점은 무엇입니까? 또는 이러한 솔루션을 어떻게 비교합니까?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="795e61ffcf98d57bb9dc7a1b4f155908a8693ccb" translate="yes" xml:space="preserve">
          <source>I do have a decent amount of experience with Vagrant and can highly recommend it. It's certainly a more heavyweight solution in terms of it being VM based instead of LXC based. However, I've found a decent laptop (8&amp;nbsp;GB RAM, i5/i7 CPU) has no trouble running a VM using Vagrant/VirtualBox alongside development tooling.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;나는 Vagrant에 대해 상당한 경험을 가지고 있으며 강력히 추천 할 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;LXC 기반이 아닌 VM 기반이라는 점에서 더 무거운 솔루션입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그러나 괜찮은 랩톱 (8GB RAM, i5 / i7 CPU)은 개발 도구와 함께 Vagrant / VirtualBox를 사용하여 VM을 실행하는 데 문제가 없음을 발견했습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="01e1301ed961a941aa27dae5d4819bf0995bc3a9" translate="yes" xml:space="preserve">
          <source>I have been using a combination of VirtualBox, Vagrant and Docker for all my projects for several months and have strongly felt the following benefits.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;나는 몇 달 동안 모든 프로젝트에 VirtualBox, Vagrant 및 Docker의 조합을 사용해 왔으며 다음과 같은 이점을 강하게 느꼈습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d5574bbf6c293c4ffa5ee529a6a8602f551f601a" translate="yes" xml:space="preserve">
          <source>I hope now its clear to see that it is very difficult, and I believe not correct, to compare Docker to Vagrant. For dev environments, Vagrant is more abstract, more general. Docker (and the various ways you can make it behave like Vagrant) is a specific use case of Vagrant, ignoring everything else Vagrant has to offer.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Docker와 Vagrant를 비교하는 것이 매우 어렵다는 것을 분명히 알기를 바랍니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;개발 환경의 경우 Vagrant는 더 추상적이고 더 일반적입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Docker (및 Vagrant처럼 행동 할 수있는 다양한 방법)는 Vagrant가 제공하는 모든 것을 무시하고 Vagrant의 특정 사용 사례입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="266a345aeade71ae1f55f705d1bf4a4ac876a69f" translate="yes" xml:space="preserve">
          <source>I preface my reply by admitting I have no experience with Docker, other than as an avid observer of what looks to be a really neat solution that's gaining a lot of traction.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Docker에 대한 경험이 없다는 것을 인정하여 답장을 선포합니다. 단, 많은 견인력을 얻는 정말 깔끔한 솔루션으로 보이는 것에 대한 열렬한 관찰자입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1da0a4684250d4f801d81ef70509001de806850f" translate="yes" xml:space="preserve">
          <source>I use Ubuntu for development and deployment and have a need for creating an isolated environment.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;개발 및 배포에 Ubuntu를 사용하며 격리 된 환경을 만들어야합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="21756dbc3f9e053c2a1e1e2693cb7205d6298ce5" translate="yes" xml:space="preserve">
          <source>I'm the author of Docker.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;저는 Docker의 저자입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="83107c774e24baa3359721c6b10d1d2e94db5b13" translate="yes" xml:space="preserve">
          <source>If you interested I have a more detailed article on the development environment on my own web site at</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;관심이 있다면 내 웹 사이트의 개발 환경에 대한 자세한 기사가 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cb700ef0c65219a8149df94f4d5b0c7f83e3544d" translate="yes" xml:space="preserve">
          <source>If your organization runs only Docker containers for all their projects and only has developers running on Linux, then okay, Docker could definitely work for you!</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;조직에서 모든 프로젝트에 대해 Docker 컨테이너 만 실행하고 Linux에서 실행중인 개발자 만있는 경우 Docker가 확실히 효과가 있습니다!&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f683ae3a8da933c7985d1ef7762fe49b02496fa1" translate="yes" xml:space="preserve">
          <source>If your purpose is the isolation, I think Docker is what you want.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;당신의 목적이 고립이라면 Docker가 당신이 원하는 것이라고 생각합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f496e74bc23d1d5de8151a9f48e6c5974eefa7f9" translate="yes" xml:space="preserve">
          <source>Implementing A Vagrant / Docker Development Environment</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;방랑자 / 도커 개발 환경 구현&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="be594435f695537c0f5a084ee3fcdc1335fff8b4" translate="yes" xml:space="preserve">
          <source>In Vagrant you can completely do away with any Chef solo provisioning and all you need your vagrant file to do is prepare a machine that runs a single small shell script that installs docker.  This means that my Vagrantfiles for every project are almost identical and very simple.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vagrant에서는 Chef 솔로 프로비저닝을 완전히 제거 할 수 있으며, docker를 설치하는 하나의 작은 쉘 스크립트를 실행하는 시스템을 준비하기 만하면 vagrant 파일이 필요합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이것은 모든 프로젝트에 대한 나의 Vagrantfile이 거의 동일하고 매우 단순하다는 것을 의미합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8226b530b2828383729716d372b19461989cd459" translate="yes" xml:space="preserve">
          <source>In conclusion: in highly specific use cases, Docker is certainly a possible replacement for Vagrant. In most use cases, it is not. Vagrant doesn't hinder your usage of Docker; it actually does what it can to make that experience smoother. If you find this isn't true, I'm happy to take suggestions to improve things, since a goal of Vagrant is to work equally well with any system.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;결론 : 매우 구체적인 사용 사례에서 Docker는 Vagrant를 대체 할 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;대부분의 경우에는 그렇지 않습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vagrant는 Docker 사용을 방해하지 않습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;실제로는 그 경험을 더 매끄럽게 만들기 위해 할 수있는 일을합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이것이 사실이 아니라면 Vagrant의 목표는 모든 시스템과 동일하게 작동하는 것이기 때문에 개선 사항을 제안합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="571a8c9b0b75e617e77d6c4703c630f8e4f11f51" translate="yes" xml:space="preserve">
          <source>In summary: Vagrant is for managing machines, and Docker is for building and running application environments.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;요약 : Vagrant는 컴퓨터 관리 용이며 Docker는 응용 프로그램 환경 구축 및 실행 용입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7542230d15af6767c6aec97a5a2316acae31daec" translate="yes" xml:space="preserve">
          <source>In theory it's possible to use Vagrant as an abstraction layer for Docker. I recommend against this for two reasons:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이론적으로 Vagrant를 Docker의 추상화 계층으로 사용할 수 있습니다. 나는 두 가지 이유로 이것을 반대하는 것이 좋습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a334e3169973872efed2661a2c2ca623f3c81a5f" translate="yes" xml:space="preserve">
          <source>In this example I am running MongoDB, Elastisearch, RabbitMQ and Memcached</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 예에서는 MongoDB, Elastisearch, RabbitMQ 및 Memcached를 실행하고 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7896840f4711fb9c239ae9c66c6519d7eca4dc09" translate="yes" xml:space="preserve">
          <source>Interestingly, Vagrant and Docker may actually be complimentary. Vagrant can be extended to support different virtualization providers, and it may be possible that Docker is one such provider which gets support in the near future. See &lt;a href=&quot;https://github.com/dotcloud/docker/issues/404&quot;&gt;https://github.com/dotcloud/docker/issues/404&lt;/a&gt; for recent discussion on the topic.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;흥미롭게도 Vagrant와 Docker는 실제로 무료 일 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;여러 가상화 공급자를 지원하기 위해 Vagrant를 확장 할 수 있으며 Docker가 가까운 장래에 지원을받는 그러한 공급자 중 하나 일 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;주제에 대한 최근 토론 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;은 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/dotcloud/docker/issues/404&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https://github.com/dotcloud/docker/issues/404&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;참조 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하십시오&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="db55c72885526babb16752fb132e7638a5dc64d3" translate="yes" xml:space="preserve">
          <source>It isn't correct to directly compare Vagrant to Docker. In some scenarios, they do overlap, and in the vast majority, they don't. Actually, the more apt comparison would be Vagrant versus something like Boot2Docker (minimal OS that can run Docker). Vagrant is a level above Docker in terms of abstractions, so it isn't a fair comparison in most cases.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vagrant를 Docker와 직접 비교하는 것은 올바르지 않습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;어떤 시나리오에서는 그것들이 겹치며 대다수는 그렇지 않습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;실제로, 더 적절한 비교는 Vagrant와 Boot2Docker (Docker를 실행할 수있는 최소 OS)와 같은 것입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vagrant는 추상화 측면에서 Docker보다 높은 수준이므로 대부분의 경우 공정한 비교가 아닙니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="51c7caa6193b979e7f731ad0bacd460e39fa86bb" translate="yes" xml:space="preserve">
          <source>It's a common misconception that you can only use Docker on Linux. That's incorrect; you can also install Docker on Mac, and Windows. When installed on Mac, Docker bundles a tiny Linux VM (25&amp;nbsp;MB on disk!) which acts as a wrapper for your container. Once installed this is completely transparent; you can use the Docker command-line in exactly the same way. This gives you the best of both worlds: you can test and develop your application using containers, which are very lightweight, easy to test and easy to move around (see for example &lt;a href=&quot;https://hub.docker.com&quot;&gt;https://hub.docker.com&lt;/a&gt; for sharing reusable containers with the Docker community), and you don't need to worry about the nitty-gritty details of managing virtual machines, which are just a means to an end anyway.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Linux에서만 Docker를 사용할 수 있다는 것은 일반적인 오해입니다. 맞지 않습니다. Mac 및 Windows에 Docker를 설치할 수도 있습니다. Mac에 설치하면 Docker는 작은 Linux VM (디스크의 25MB!)을 컨테이너의 래퍼 역할을합니다. 일단 설치되면 완전히 투명합니다. Docker 명령 줄을 정확히 같은 방식으로 사용할 수 있습니다. 이렇게하면 두 가지 이점을 모두 얻을 수 있습니다. 컨테이너를 사용하여 응용 프로그램을 테스트하고 개발할 수 있습니다. 컨테이너는 매우 가볍고 테스트하기 쉽고 이동하기 쉽습니다 (예 : &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://hub.docker.com&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https://hub.docker.com&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 과 재사용 가능한 컨테이너를 공유) Docker 커뮤니티)를 사용하면 가상 머신 관리에 대한 세부 사항에 대해 걱정할 필요가 없습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="45cc2e78cd92403a188aa713443a5b002162f138" translate="yes" xml:space="preserve">
          <source>Iterate on the component(s) to code against.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;코딩 할 구성 요소를 반복하십시오.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="831bf3bb9ccd38413f3223abafe0808607c7b1e5" translate="yes" xml:space="preserve">
          <source>Now to get all the services I need running I have a docker_start script that looks somthing like this</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이제 실행 해야하는 모든 서비스를 얻으려면 다음과 같은 docker_start 스크립트가 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f0f9e72b450d71926c145297ebb5b6a8d2800a4b" translate="yes" xml:space="preserve">
          <source>Of course is a new discipline to care with its own pitfals and challenges.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;물론 자신 만의 함정과 도전을 돌볼 수있는 새로운 원칙이 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1f5be52a267971b858616d166763a3ad658d7bb8" translate="yes" xml:space="preserve">
          <source>One of the really great things with Vagrant is the integration with &lt;a href=&quot;http://en.wikipedia.org/wiki/Puppet_%28software%29&quot;&gt;Puppet&lt;/a&gt;/&lt;a href=&quot;https://en.wikipedia.org/wiki/Chef_%28software%29&quot;&gt;Chef&lt;/a&gt;/shell scripts for automating configuration. If you're using one of these options to configure your production environment, you can create a development environment which is as close to identical as you're going to get, and this is exactly what you want.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vagrant의 가장 큰 장점 중 하나는 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;구성 자동화를 위해 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Puppet_%28software%29&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Puppet&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; / &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Chef_%28software%29&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Chef&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; / shell 스크립트 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;와의 통합입니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이러한 옵션 중 하나를 사용하여 프로덕션 환경을 구성하는 경우, 원하는 환경과 거의 비슷한 개발 환경을 만들 수 있으며 이것이 바로 원하는 것입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ec252b7937e27d100e817ea646b06eab07d8d8af" translate="yes" xml:space="preserve">
          <source>Otherwise, I don't see a benefit to attempting to use Docker alone, since you lose a lot of what Vagrant has to offer, which have real business/productivity benefits:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그렇지 않으면, 당신은 실질적인 비즈니스 / 생산성 이점이있는 Vagrant가 제공하는 많은 것을 잃기 때문에 Docker를 혼자 사용하려고 시도하면 이점이 없습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bab99a4387026ddc94f3e9d007f84ac8e6bdb321" translate="yes" xml:space="preserve">
          <source>Please note that you can also use Docker for provisioning with Vagrant. This is very different than using Docker as a provider. &lt;a href=&quot;http://docs.vagrantup.com/v2/provisioning/docker.html&quot;&gt;http://docs.vagrantup.com/v2/provisioning/docker.html&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vagrant를 사용하여 프로비저닝하는 데 Docker를 사용할 수도 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이것은 Docker를 공급자로 사용하는 것과는 매우 다릅니다. &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://docs.vagrantup.com/v2/provisioning/docker.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http://docs.vagrantup.com/v2/provisioning/docker.html&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="af38ba35548de03e0b53000d47956167509829e7" translate="yes" xml:space="preserve">
          <source>Repeat this for all application components.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;모든 응용 프로그램 구성 요소에 대해이 과정을 반복하십시오.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f062e117843850276752b3ef927824d492f94ca3" translate="yes" xml:space="preserve">
          <source>Second, the lock-in argument. &quot;If you use Vagrant as an abstraction, you will not be locked into Docker!&quot;. From the point of view of Vagrant, which is designed to manage machines, this makes perfect sense: aren't containers just another kind of machine? Just like Amazon EC2 and VMware, we must be careful not to tie our provisioning tools to any particular vendor! This would create lock-in - better to abstract it all away with Vagrant. Except this misses the point of Docker entirely. Docker doesn't provision machines; it wraps your application in a lightweight portable runtime which can be dropped anywhere.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;둘째, 잠금 인수. &quot;Vagrant를 추상화로 사용하면 Docker에 고정되지 않습니다!&quot;. 기계를 관리하도록 설계된 Vagrant의 관점에서 이것은 완벽한 의미가 있습니다. 컨테이너가 다른 종류의 기계가 아닌가? Amazon EC2 및 VMware와 마찬가지로 프로비저닝 도구를 특정 공급 업체에 연결하지 않도록주의해야합니다! 이것은 잠금을 생성합니다-Vagrant로 완전히 추상화하는 것이 좋습니다. 이것을 제외하면 Docker의 요점을 완전히 놓친 것입니다. Docker는 컴퓨터를 프로비저닝하지 않습니다. 어디서나 떨어질 수있는 가벼운 휴대용 런타임으로 애플리케이션을 감 쌉니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="63798b973134fcff610515a865d931cd7f4bb300" translate="yes" xml:space="preserve">
          <source>Should I use Vagrant or Docker for creating an isolated environment</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;격리 된 환경을 만들기 위해 Vagrant 또는 Docker를 사용해야합니까?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e342edb0236a68b3b3358d9a09b4be49b7e7748e" translate="yes" xml:space="preserve">
          <source>Sleep well knowing when it is time to deploy the container, that integration testing was occurring on a much more continuous basis than it was before Docker.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;컨테이너 배포시기가 언제인지 잘 알고 있습니다. 통합 테스트는 Docker 이전보다 훨씬 더 지속적으로 수행되고있었습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4254350df60a32c6e6130a881780c47f2b1b2528" translate="yes" xml:space="preserve">
          <source>So I see Vagrant evolving as a way of leveraging some of the awesome consequences Docker will have for app deployment.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;따라서 Docker가 앱 배포에 미칠 수있는 멋진 결과를 활용하는 방법으로 Vagrant가 진화하는 것을 봅니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1ae02a8d8667acba097ad137bc19e81a009b0918" translate="yes" xml:space="preserve">
          <source>Take a Java/Go application component and build it as a container
(note, not sure if the app should be built in the container or built then
installed to the container)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Java / Go 애플리케이션 컴포넌트를 가져 와서 컨테이너로 빌드하십시오 (앱이 컨테이너에 빌드되어야하는지 컨테이너에 빌드되어야하는지 확실하지 않음)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="751b6f88d07e4787a1e2e247ad7ad2f4598c246a" translate="yes" xml:space="preserve">
          <source>The Bootstrap file that installs docker looks like this</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;docker를 설치하는 Bootstrap 파일은 다음과 같습니다&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="95e42d8c02236732151693c6220da42cd2eb11cf" translate="yes" xml:space="preserve">
          <source>The fact that as a developer I am constantly and consistently delivering containers to the VM and testing the application more holistically means that production releases will be further simplified.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;개발자로서 컨테이너에 VM을 지속적으로 지속적으로 제공하고 애플리케이션을보다 전체적으로 테스트한다는 것은 프로덕션 릴리스가 더욱 단순화 될 것임을 의미합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5e038958d5831f7501c7e9f7b01865b32159f651" translate="yes" xml:space="preserve">
          <source>The only reason you could want to use Vagrant is if you need to do BSD, Windows or other non-Linux development on your Ubuntu box. Otherwise, go for Docker.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vagrant를 사용할 수있는 유일한 이유는 Ubuntu 상자에서 BSD, Windows 또는 기타 비 Linux 개발을 수행해야하기 때문입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그렇지 않으면 Docker로 이동하십시오.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ec3fa2be605bbfda0daadda6de437a7e2ab8a96f" translate="yes" xml:space="preserve">
          <source>The other great thing with Vagrant is that you can version your Vagrantfile along with your application code. This means that everyone else on your team can share this file and you're guaranteed that everyone is working with the same environment configuration.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vagrant의 또 다른 장점은 응용 프로그램 코드와 함께 Vagrantfile의 버전을 지정할 수 있다는 것입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;즉, 팀의 다른 모든 사람이이 파일을 공유 할 수 있으며 모든 사람이 동일한 환경 구성으로 작업하고 있음을 보증합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="aa21c7b0c1f5a57538aeb32528b3b479e4af0e12" translate="yes" xml:space="preserve">
          <source>The short answer is that if you want to manage machines, you should use Vagrant. And if you want to build and run applications environments, you should use Docker.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;짧은 대답은 컴퓨터를 관리하려면 Vagrant를 사용해야한다는 것입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;응용 프로그램 환경을 구축하고 실행하려면 Docker를 사용해야합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="05dde88d23625506bfb21b458ae6b6d3479116d8" translate="yes" xml:space="preserve">
          <source>The thinking goes something like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;생각은 다음과 같습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6a6bc37772ba6f7940bd8a7b45822a2e641f81f2" translate="yes" xml:space="preserve">
          <source>There is a really informative article in the actual Oracle Java magazine about using Docker in combination with Vagrant (and Puppet):</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;실제 Oracle Java 매거진에는 Docker를 Vagrant (및 Puppet)와 함께 사용하는 방법에 대한 유용한 정보가 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="289452da861664a9dd45090386e4368e70a5f104" translate="yes" xml:space="preserve">
          <source>They are very much complementary.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그들은 매우 보완 적입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0f7e684dc8ada8d02c0227d80b555833593b376a" translate="yes" xml:space="preserve">
          <source>This means you can replace &lt;a href=&quot;https://en.wikipedia.org/wiki/Chef_%28software%29&quot;&gt;Chef&lt;/a&gt; or &lt;a href=&quot;http://en.wikipedia.org/wiki/Puppet_%28software%29&quot;&gt;Puppet&lt;/a&gt; with Docker. You can use combinations like Docker as provider (VM) with Chef as provisioner. Or you can use VirtualBox as provider and Docker as provisioner.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;즉, &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Chef_%28software%29&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Chef&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 또는 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Puppet_%28software%29&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Puppet&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 을 Docker로 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;바꿀 수 있습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Chef를 provisioner로 사용하여 Docker as provider (VM)와 같은 조합을 사용할 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;또는 VirtualBox를 공급자로, Docker를 공급자로 사용할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6d9d3c5f3ed2a350e4b8bc925a19807a443d833f" translate="yes" xml:space="preserve">
          <source>This seems to be the logical extension of Mitchell's statement that Vagrant is for development combined with Farley/Humbles thinking in Continuous Delivery. If I, as a developer, can shrink the feedback loop on integration testing and application delivery, higher quality and better work environments will follow.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이것은 Vagrant가 Continuous Delivery의 Farley / Humbles 사고와 결합 된 개발을위한 것이라고 Mitchell의 진술의 논리적 확장으로 보입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;개발자로서 통합 테스트 및 애플리케이션 제공에 대한 피드백 루프를 줄일 수 있다면 더 높은 품질과 더 나은 작업 환경이 뒤따를 것입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="46ca9b4ef92d13aec598dba576c238a245baa1d0" translate="yes" xml:space="preserve">
          <source>To address specific counter arguments that I've heard in favor of using Docker instead of Vagrant:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vagrant 대신 Docker를 사용하는 것에 대해 들었던 특정 반박 론을 해결하려면 다음을 수행하십시오.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a1a81d5698f299b0e22ec55295abb9cb8f0f1e92" translate="yes" xml:space="preserve">
          <source>Using both is an important part of application delivery testing. I am only beginning to get involved with Docker and thinking very hard about an application team that has terrible complexity in building and delivering its software.  Think of a classic Phoenix Project / Continuous Delivery situation.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;두 가지를 모두 사용하는 것은 응용 프로그램 제공 테스트에서 중요한 부분입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Docker에 참여하기 시작했고 소프트웨어를 구축하고 제공하는 데 끔찍한 응용 프로그램 팀에 대해 매우 열심히 생각하고 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;고전적인 Phoenix 프로젝트 / 지속적인 배달 상황을 생각해보십시오.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c56bfd57ad91150dd9a5d83cd039ed857e632932" translate="yes" xml:space="preserve">
          <source>Vagrant 1.6 has first-class support for &lt;a href=&quot;http://www.vagrantup.com/blog/feature-preview-vagrant-1-6-docker-dev-environments.html&quot;&gt;docker-based development environments&lt;/a&gt;. This will not launch a virtual machine on Linux, and will automatically launch a virtual machine on Mac and Windows. The end result is that working with Docker is uniform across all platforms, while Vagrant still handles the tedious details of things such as networking, synced folders, etc.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vagrant 1.6은 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.vagrantup.com/blog/feature-preview-vagrant-1-6-docker-dev-environments.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;docker 기반 개발 환경&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 을 일류 지원 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;합니다&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Linux에서는 가상 머신이 시작되지 않으며 Mac 및 Windows에서는 가상 머신이 자동으로 실행됩니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;결과적으로 Docker 작업은 모든 플랫폼에서 균일하며 Vagrant는 네트워킹, 동기화 된 폴더 등과 같은 지루한 세부 사항을 여전히 처리합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8b8ec4b9b97fd1f750140c280c50612f2ef99fbb" translate="yes" xml:space="preserve">
          <source>Vagrant can launch VirtualBox, VMware, AWS, OpenStack, etc. machines. It doesn't matter what you need, Vagrant can launch it. If you are using Docker, Vagrant can install Docker on any of these so you can use them for that purpose.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vagrant는 VirtualBox, VMware, AWS, OpenStack 등의 머신을 시작할 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;필요한 것은 중요하지 않습니다. Vagrant가 시작할 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Docker를 사용하는 경우 Vagrant는 Docker를 이들 중 하나에 설치하여 해당 용도로 사용할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3ba5ca5808d23256edd13271c9225a76f9e685e7" translate="yes" xml:space="preserve">
          <source>Vagrant is a single workflow for all your projects. Or to put another way, it is just one thing people have to learn to run a project whether it is in a Docker container or not. If, for example, in the future, a competitor arises to compete directly with Docker, Vagrant will be able to run that too.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vagrant는 모든 프로젝트를위한 단일 워크 플로우입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;또는 달리 말하면, Docker 컨테이너에 있는지 여부에 관계없이 사람들이 프로젝트를 실행하는 방법을 배워야합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;예를 들어, 미래에 경쟁 업체가 Docker와 직접 경쟁하게되면 Vagrant도이를 실행할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c27f223a6cb9238f63be51ac1d309395fccd336b" translate="yes" xml:space="preserve">
          <source>Vagrant is a tool for managing virtual machines. Docker is a tool for building and deploying applications by packaging them into lightweight containers. A container can hold pretty much any software component along with its dependencies (executables, libraries, configuration files, etc.), and execute it in a guaranteed and repeatable runtime environment. This makes it very easy to build your app once and deploy it anywhere - on your laptop for testing, then on different servers for live deployment, etc.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vagrant는 가상 머신을 관리하기위한 도구입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Docker는 응용 프로그램을 경량 컨테이너에 패키징하여 빌드 및 배포하기위한 도구입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;컨테이너는 거의 모든 소프트웨어 구성 요소와 해당 종속성 (실행 파일, 라이브러리, 구성 파일 등)을 보유하고 보장되고 반복 가능한 런타임 환경에서 실행할 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;따라서 테스트를 위해 랩톱에서 라이브 배포를 위해 다른 서버에서 앱을 한 번 빌드하고 어디서나 배포 할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="efeca42dc823d05ae77ad67cd7d621ddd1de7b6d" translate="yes" xml:space="preserve">
          <source>Vagrant is a virtual machine manager. It allows you to script the virtual machine configuration as well as the provisioning. However, it is still a virtual machine depending on &lt;a href=&quot;http://en.wikipedia.org/wiki/VirtualBox&quot;&gt;VirtualBox&lt;/a&gt; (or others) with a huge overhead. It requires you to have a hard drive file that can be huge, it takes a lot of ram, and performance may be not very good.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vagrant는 가상 머신 관리자입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;프로비저닝뿐만 아니라 가상 머신 구성을 스크립팅 할 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그러나 여전히 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;오버 헤드가 큰 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/VirtualBox&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;VirtualBox&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (또는 기타) &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;에 따라 가상 머신입니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;용량이 큰 하드 드라이브 파일이 필요하고 많은 램이 필요하며 성능이 좋지 않을 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="835066f6f2446a7ca317229318fbd937babb3b9e" translate="yes" xml:space="preserve">
          <source>Vagrant knows how to configure some advanced or non-trivial things like networking and syncing folders. For example: Vagrant knows how to attach a static IP to a machine or forward ports, and the configuration is the same no matter what system you use (VirtualBox, VMware, etc.) For synced folders, Vagrant provides multiple mechanisms to get your local files over to the remote machine (VirtualBox shared folders, NFS, rsync, Samba [plugin], etc.). If you're using Docker, even Docker with a VM without Vagrant, you would have to manually do this or they would have to reinvent Vagrant in this case.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vagrant는 네트워킹 및 폴더 동기화와 같은 고급 또는 사소한 것을 구성하는 방법을 알고 있습니다. 예를 들어 : Vagrant는 컴퓨터 또는 전달 포트에 고정 IP를 연결하는 방법을 알고 있으며 구성은 동일한 시스템 (VirtualBox, VMware 등)에 관계없이 동일합니다. 동기화 된 폴더에 대해 Vagrant는 로컬을 가져 오는 여러 메커니즘을 제공합니다. 파일을 원격 컴퓨터 (VirtualBox 공유 폴더, NFS, rsync, Samba [plugin] 등)로 가져옵니다. Docker, Vagrant가없는 VM이있는 Docker를 사용하는 경우 수동 으로이 작업을 수행 하거나이 경우 Vagrant를 재발 명해야합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="860bf614250849c4cf7a8462f202554344f82d3d" translate="yes" xml:space="preserve">
          <source>Vagrant launches things to run apps/services for the purpose of development. This can be on VirtualBox, VMware. It can be remote like AWS, OpenStack. Within those, if you use containers, Vagrant doesn't care, and embraces that: it can automatically install, pull down, build, and run Docker containers, for example. With Vagrant 1.6, Vagrant has &lt;a href=&quot;http://www.vagrantup.com/blog/feature-preview-vagrant-1-6-docker-dev-environments.html&quot;&gt;docker-based development environments&lt;/a&gt;, and supports using Docker with the same workflow as Vagrant across Linux, Mac, and Windows. Vagrant doesn't try to replace Docker here, it embraces Docker practices.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vagrant는 개발 목적으로 앱 / 서비스를 실행하는 것을 시작합니다. 이것은 VirtualBox, VMware에있을 수 있습니다. AWS, OpenStack과 같이 원격 일 수 있습니다. 그 중에서도 컨테이너를 사용하는 경우 Vagrant는 신경 쓰지 않으며 다음을 수용합니다. 예를 들어 Docker 컨테이너를 자동으로 설치, 풀다운, 빌드 및 실행할 수 있습니다. Vagrant 1.6을 통해 Vagrant는 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.vagrantup.com/blog/feature-preview-vagrant-1-6-docker-dev-environments.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;docker 기반 개발 환경을&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 가지고 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;있으며 Linux, Mac 및 Windows에서 Vagrant와 동일한 워크 플로우로 Docker를 사용할 수 있습니다. Vagrant는 Docker를 대체하려고 시도하지 않으며 Docker 관행을 포용합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f1a64a0cdb06a03bddf57928277455accf45f34f" translate="yes" xml:space="preserve">
          <source>Vagrant works on Windows (back to XP), Mac (back to 10.5), and Linux (back to kernel 2.6). In all three cases, the workflow is the same. If you use Docker, Vagrant can launch a machine (VM or remote) that can run Docker on all three of these systems.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vagrant는 Windows (XP로 돌아 가기), Mac (10.5로 돌아 가기) 및 Linux (커널 2.6로 돌아 가기)에서 작동합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;세 경우 모두 작업 과정이 동일합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Docker를 사용하는 경우 Vagrant는 이러한 세 시스템 모두에서 Docker를 실행할 수있는 머신 (VM 또는 원격)을 시작할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="058c9b8617f3dc2354c776be946dc78bbdd2bcbf" translate="yes" xml:space="preserve">
          <source>What runtime you choose for your application has nothing to do with how you provision your machines! For example it's pretty frequent to deploy applications to machines which are provisioned by someone else (for example an EC2 instance deployed by your system administrator, perhaps using Vagrant), or to bare metal machines which Vagrant can't provision at all. Conversely, you may use Vagrant to provision machines which have nothing to do with developing your application - for example a ready-to-use Windows IIS box or something. Or you may use Vagrant to provision machines for projects which don't use Docker - perhaps they use a combination of rubygems and rvm for dependency management and sandboxing for example.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;응용 프로그램에 대해 선택한 런타임은 시스템을 프로비저닝하는 방법과 아무 관련이 없습니다! &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;예를 들어 다른 사람이 프로비저닝 한 시스템 (예 : Vagrant를 사용하여 시스템 관리자가 배포 한 EC2 인스턴스) 또는 Vagrant가 전혀 프로비저닝 할 수없는 베어 메탈 시스템에 애플리케이션을 배포하는 것은 매우 빈번합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;반대로 Vagrant를 사용하면 응용 프로그램 개발과 아무런 관련이없는 컴퓨터 (예 : 즉시 사용 가능한 Windows IIS 상자 등)를 프로비저닝 할 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;또는 Vagrant를 사용하여 Docker를 사용하지 않는 프로젝트의 시스템을 프로비저닝 할 수 있습니다. 예를 들어 종속성 관리 및 샌드 박싱과 같이 rubygems와 rvm을 조합하여 사용할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="79ccd86a62436e552d5fc21716baf34aaa4159ad" translate="yes" xml:space="preserve">
          <source>With Vagrant now you can have Docker as a provider. &lt;a href=&quot;http://docs.vagrantup.com/v2/docker/&quot;&gt;http://docs.vagrantup.com/v2/docker/&lt;/a&gt;. Docker provider can be used instead of VirtualBox or VMware.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vagrant를 사용하면 Docker를 공급자로 사용할 수 있습니다. &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://docs.vagrantup.com/v2/docker/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http://docs.vagrantup.com/v2/docker/&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;VirtualBox 또는 VMware 대신 Docker 공급자를 사용할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
