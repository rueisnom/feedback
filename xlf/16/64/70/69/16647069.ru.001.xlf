<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://stackoverflow.com/questions/16647069">
    <body>
      <group id="16647069">
        <trans-unit id="64e9f69e0eda747eff93390d2e407af1a8e6d15a" translate="yes" xml:space="preserve">
          <source>&quot;It is faster!&quot; - Once you have the host that can run Linux containers, Docker is definitely faster at running a container than any virtual machine would be to launch. But launching a virtual machine (or remote machine) is a one-time cost. Over the course of the day, most Vagrant users never actually destroy their VM. It is a strange optimization for development environments. In production, where Docker really shines, I understand the need to quickly spin up/down containers.</source>
          <target state="translated">&quot;Это быстрее!&quot;-Как только у вас есть хост,который может запускать Linux-контейнеры,Docker определенно быстрее запускает контейнер,чем любая виртуальная машина.Но запуск виртуальной машины (или удаленной машины)-это единовременная затрата.В течение дня большинство пользователей Vagrant никогда на самом деле не уничтожают свои виртуальные машины.Это странная оптимизация для сред разработки.На производстве,где Docker действительно блестит,я понимаю необходимость быстро вращать обновляемые контейнеры.</target>
        </trans-unit>
        <trans-unit id="ebaa2553839db99c20b90b730ed853ee017a3ff4" translate="yes" xml:space="preserve">
          <source>&quot;It is less moving parts&quot; - Yes, it can be, if you use Docker exclusively for every project. Even then, it is sacrificing flexibility for Docker lock-in. If you ever decide to not use Docker for any project, past, present, or future, then you'll have more moving parts. If you had used Vagrant, you have that one moving part that supports the rest.</source>
          <target state="translated">&quot;Это меньше движущихся частей&quot;-Да,может быть,если вы используете Docker исключительно для каждого проекта.Даже в этом случае,это жертвует гибкостью для Docker lock-in.Если вы когда-нибудь решите не использовать Docker для любого проекта,прошлого,настоящего или будущего,то у вас будет больше движущихся частей.Если бы вы использовали Vagrant,у вас есть одна движущаяся часть,которая поддерживает остальные.</target>
        </trans-unit>
        <trans-unit id="36479eef7dc91eb68da322a641b8a81a7924826d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://fabiorehm.com/blog/2013/04/28/lxc-provider-for-vagrant/&quot;&gt;Vagrant-lxc&lt;/a&gt; is a plugin for Vagrant that let's you use LXC to provision Vagrant. It does not have all the features that the default vagrant VM (VirtualBox) has but it should allow you more flexibility than docker containers. There is a video in the link showing its capabilities that is worth watching.</source>
          <target state="translated">&lt;a href=&quot;http://fabiorehm.com/blog/2013/04/28/lxc-provider-for-vagrant/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vagrant-lxc&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; - это плагин для Vagrant, который позволяет вам использовать LXC для предоставления Vagrant. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Он не обладает всеми функциями, которыми обладает стандартная бродячая виртуальная машина (VirtualBox), но он должен обеспечивать большую гибкость, чем контейнеры Docker. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;В ссылке есть видео, показывающее его возможности, которые стоит посмотреть.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2a5a82083899dba6ad2386ea19ed8f6985492edf" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Disclaimer: I wrote Vagrant! But because I wrote Vagrant, I spend most of my time living in the DevOps world which includes software like Docker. I work with a lot of companies using Vagrant and many use Docker, and I see how the two interplay.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Отказ от ответственности: я написал Vagrant! &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Но поскольку я написал Vagrant, я трачу большую часть своего времени на жизнь в мире DevOps, который включает в себя программное обеспечение, такое как Docker. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Я работаю со многими компаниями, использующими Vagrant, и многие используют Docker, и я вижу, как они взаимодействуют.&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ceef433b9fab61b896e62247a65c2f245a6966d0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Before I talk too much, a direct answer:&lt;/strong&gt; in your specific scenario (yourself working alone, working on Linux, using Docker in production), you can stick with Docker alone and simplify things. In many other scenarios (I discuss further), it isn't so easy.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Прежде чем говорить слишком много, скажу прямой ответ:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; в вашем конкретном сценарии (вы работаете один, работаете в Linux, используете Docker в работе), вы можете придерживаться только Docker и упростить вещи. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Во многих других сценариях (я обсуждаю далее) это не так просто.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8115e639335d833240663506049d0442b68dbba5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Conclusion&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Conclusion&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="aedb1ef926c0885e5d82b12e357fff83c3b843f5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Definitely Docker for the win!&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Определенно Docker для победы!&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="12f22cbfe2cb3c33462bde67f1341cfd334dc89e" translate="yes" xml:space="preserve">
          <source>A final big plus is gained when you are moving into production, translating the development environment over to an infrastructure of hosts that are all the same in that they just have enough config to run docker means very little work indeed.</source>
          <target state="translated">Конечный большой плюс получается,когда вы переходите на производство,переводя среду разработки на инфраструктуру хостов,которые все равно имеют достаточно конфигурации,чтобы запустить докер,что в действительности означает очень мало работы.</target>
        </trans-unit>
        <trans-unit id="a39a49106910c679d82f34436a9a8e7ca644724b" translate="yes" xml:space="preserve">
          <source>A non-docker Chef solo configuration would be considerably more complicated.</source>
          <target state="translated">Сольная конфигурация без докера Шеф-повара была бы значительно сложнее.</target>
        </trans-unit>
        <trans-unit id="b3d6ebd4bde713011d00ded5d62c7082158d4b3d" translate="yes" xml:space="preserve">
          <source>As you may know Vagrant is for virtual machine management whereas Docker is for software containers management.
If you are not aware of the difference, here is:
A software container can share the same machine and kernel with other software containers. Using containers you save money because you don't waste resources on multiple operating systems (kernels), you can pack more software per server keeping a good degree of isolation.</source>
          <target state="translated">Как вы,возможно,знаете,Vagrant предназначен для управления виртуальными машинами,в то время как Docker-для управления программными контейнерами.Если вы не знаете разницы,вот:Программный контейнер может совместно использовать одну и ту же машину и ядро с другими программными контейнерами.Используя контейнеры,вы экономите деньги,поскольку не тратите ресурсы на несколько операционных систем (ядер),вы можете упаковать больше программного обеспечения на сервер,сохраняя при этом хорошую степень изоляции.</target>
        </trans-unit>
        <trans-unit id="57c5fe83d7a4e4bb41a8be75ab420418c3663b07" translate="yes" xml:space="preserve">
          <source>Continuously test the delivery mechanism to the VM(s) managed by Vagrant</source>
          <target state="translated">Непрерывное тестирование механизма доставки к ВМ(ам),управляемым VM(ами)Vagrant</target>
        </trans-unit>
        <trans-unit id="8c9739a4d4881da5e95135f303654ada0f18cef7" translate="yes" xml:space="preserve">
          <source>Deliver the container to a Vagrant VM.</source>
          <target state="translated">Доставьте контейнер в Бродячий ВМ.</target>
        </trans-unit>
        <trans-unit id="16ab122f3b38a2fca2950e020e21b18bf3cb60ef" translate="yes" xml:space="preserve">
          <source>Docker on the other hand uses kernel cgroup and namespacing via &lt;a href=&quot;https://en.wikipedia.org/wiki/LXC&quot;&gt;LXC&lt;/a&gt;. It means that you are using the same kernel as the host and the same file system.
You can use Dockerfile with the &lt;code&gt;docker build&lt;/code&gt; command in order to handle the provisioning and configuration of your container. You have an example at &lt;a href=&quot;https://docs.docker.com/&quot;&gt;docs.docker.com&lt;/a&gt; on how to make your Dockerfile; it is very intuitive.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Docker, с другой стороны, использует ядро ​​cgroup и пространство имен через &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/LXC&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;LXC&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Это означает, что вы используете то же ядро, что и хост, и ту же файловую систему. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вы можете использовать Dockerfile с командой &lt;/font&gt;&lt;/font&gt; &lt;code&gt;docker build&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; для управления подготовкой и настройкой вашего контейнера. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;У вас есть пример на &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.docker.com/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;docs.docker.com&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; о том, как сделать ваш Dockerfile; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;это очень интуитивно понятно.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="aa7a7be46f84391b8276013f27e43d30475d255a" translate="yes" xml:space="preserve">
          <source>Docker specifically runs Docker containers. If you're comparing directly to Vagrant: it is specifically a more specific (can only run Docker containers), less flexible (requires Linux or Linux host somewhere) solution. Of course if you're talking about production or CI, there is no comparison to Vagrant! Vagrant doesn't live in these environments, and so Docker should be used.</source>
          <target state="translated">Докер специально управляет контейнерами Докер.Если напрямую сравнивать с Vagrant:это более специфическое (можно запускать только контейнеры Docker),менее гибкое (требуется где-то Linux или Linux-хост)решение.Конечно,если вы говорите о производстве или CI,нет никакого сравнения с Vagrant! Vagrant не живет в таких средах,поэтому следует использовать Docker.</target>
        </trans-unit>
        <trans-unit id="80ddd9675bcb8f6abff91e9ab660fb332c84cf6c" translate="yes" xml:space="preserve">
          <source>Docker&amp;rsquo;s lightweight containers are faster compared with classic VMs
  and have become popular among developers and as part of CD and DevOps
  initiatives. If your purpose is isolation, Docker is an excellent choice.
  Vagrant is a VM manager that enables you to script configurations of
  individual VMs as well as do the provisioning. However, it is sill a
  VM dependent on VirtualBox (or another VM manager) with relatively
  large overhead. It requires you to have a hard drive idle that can be
  huge, it takes a lot of RAM, and performance can be suboptimal. Docker
  uses kernel cgroups and namespace isolation via LXC. This means that
  you are using the same kernel as the host and the same ile system.
  Vagrant is a level above Docker in terms of abstraction, so they are
  not really comparable. Configuration management tools such as Puppet are
  widely used for provisioning target environments. Reusing existing
  Puppet-based solutions is easy with Docker. You can also slice your
  solution, so the infrastructure is provisioned with Puppet; the
  middleware, the business application itself, or both are provisioned
  with Docker; and Docker is wrapped by Vagrant. With this range of
  tools, you can do what&amp;rsquo;s best for your scenario.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Легкие контейнеры Docker быстрее по сравнению с классическими виртуальными машинами и стали популярными среди разработчиков и в рамках инициатив CD и DevOps. Если ваша цель - изоляция, Docker - отличный выбор. Vagrant - это менеджер виртуальных машин, который позволяет создавать сценарии конфигурации отдельных виртуальных машин, а также выполнять настройку. Однако это все-таки виртуальная машина, зависящая от VirtualBox (или другого менеджера виртуальных машин) с относительно большими издержками. Для этого требуется простоя жесткого диска, который может быть огромным, занимает много оперативной памяти, а производительность может быть ниже оптимальной. Docker использует cgroups ядра и изоляцию пространства имен через LXC. Это означает, что вы используете то же ядро, что и хост, и ту же систему ile. Vagrant на уровень выше Docker с точки зрения абстракции, поэтому они на самом деле не сопоставимы.Инструменты управления конфигурацией, такие как Puppet, широко используются для предоставления целевых сред. С помощью Docker легко использовать существующие решения на основе Puppet. Вы также можете нарезать свое решение, чтобы инфраструктура обеспечивалась Puppet; промежуточное программное обеспечение, само бизнес-приложение или оба они предоставляются с помощью Docker; и Докер обволакивает Вагрант. С этим набором инструментов вы можете делать то, что лучше для вашего сценария.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a578c0664e2eebf827008f95aaef32d849c36cae" translate="yes" xml:space="preserve">
          <source>First, Vagrant is not a good abstraction for Docker. Vagrant was designed to manage virtual machines. Docker was designed to manage an application runtime. This means that Docker, by design, can interact with an application in richer ways, and has more information about the application runtime. The primitives in Docker are processes, log streams, environment variables, and network links between components. The primitives in Vagrant are machines, block devices, and ssh keys. Vagrant simply sits lower in the stack, and the only way it can interact with a container is by pretending it's just another kind of machine, that you can &quot;boot&quot; and &quot;log into&quot;. So, sure, you can type &quot;vagrant up&quot; with a Docker plugin and something pretty will happen. Is it a substitute for the full breadth of what Docker can do? Try native Docker for a couple days and see for yourself :)</source>
          <target state="translated">Во-первых,бродяга-не лучшая абстракция для Докер.Vagrant был разработан для управления виртуальными машинами.Докер был создан для управления временем выполнения приложений.Это означает,что Docker,по своей конструкции,может взаимодействовать с приложением более богатыми способами,и имеет больше информации о времени выполнения приложения.Примерами в Docker'е являются процессы,потоки журналов,переменные среды и сетевые связи между компонентами.Примитивами в Vagrant являются машины,блокирующие устройства и ssh-ключи.Vagrant просто сидит ниже в стеке,и единственный способ взаимодействия с контейнером-это притвориться,что это просто другой вид машины,который можно &quot;загрузить&quot; и &quot;войти&quot;.Так что,конечно,вы можете набрать &quot;бродяга&quot; с помощью плагина Docker и произойдет что-нибудь симпатичное.Это замена всей широты того,что Docker может сделать? Попробуйте &quot;родной&quot; Docker на пару дней и убедитесь сами :)</target>
        </trans-unit>
        <trans-unit id="03c3a123fcbd88a5928d6a5f5fa306f81f990237" translate="yes" xml:space="preserve">
          <source>Go for Docker Swarm if your requirements cross the single machine resources limit.</source>
          <target state="translated">Перейдите в Docker Swarm,если ваши требования пересекают ограничения по ресурсам одной машины.</target>
        </trans-unit>
        <trans-unit id="84bfa872bd59c8e2bcc41401a551a649895046dd" translate="yes" xml:space="preserve">
          <source>Here is a typical Vagrantfile</source>
          <target state="translated">Вот типичный профиль бродяги</target>
        </trans-unit>
        <trans-unit id="80366611cec2099197710375dbe97b99dbd3a81b" translate="yes" xml:space="preserve">
          <source>Hope this clears things up!</source>
          <target state="translated">Надеюсь,это все прояснит!</target>
        </trans-unit>
        <trans-unit id="74771a2f761b77293b10b6df9bcd780b6368374f" translate="yes" xml:space="preserve">
          <source>How to build, use and orchestrate Docker containers in DevOps
&lt;a href=&quot;http://www.javamagazine.mozaicreader.com/JulyAug2015#&amp;amp;pageSet=34&amp;amp;page=0&quot;&gt;http://www.javamagazine.mozaicreader.com/JulyAug2015#&amp;amp;pageSet=34&amp;amp;page=0&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Как создавать, использовать и организовывать контейнеры Docker в DevOps &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.javamagazine.mozaicreader.com/JulyAug2015#&amp;amp;pageSet=34&amp;amp;page=0&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http://www.javamagazine.mozaicreader.com/JulyAug2015#&amp;amp;pageSet=34&amp;amp;page=0&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c2685b9ea010e149de682d17f3c766093463d4a1" translate="yes" xml:space="preserve">
          <source>I am considering either Vagrant or Docker for this purpose. What are the pros and cons, or how do these solutions compare?</source>
          <target state="translated">Для этого я рассматриваю либо Бродягу,либо Докера.Каковы плюсы и минусы,или как эти решения сравниваются?</target>
        </trans-unit>
        <trans-unit id="795e61ffcf98d57bb9dc7a1b4f155908a8693ccb" translate="yes" xml:space="preserve">
          <source>I do have a decent amount of experience with Vagrant and can highly recommend it. It's certainly a more heavyweight solution in terms of it being VM based instead of LXC based. However, I've found a decent laptop (8&amp;nbsp;GB RAM, i5/i7 CPU) has no trouble running a VM using Vagrant/VirtualBox alongside development tooling.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;У меня есть приличный опыт работы с Vagrant, и я очень рекомендую его. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Это, безусловно, более тяжелое решение с точки зрения того, что оно основано на виртуальной машине, а не на LXC. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Однако я обнаружил, что приличный ноутбук (8 ГБ ОЗУ, процессор i5 / i7) без проблем запускает виртуальную машину с использованием Vagrant / VirtualBox вместе с инструментами разработки.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="01e1301ed961a941aa27dae5d4819bf0995bc3a9" translate="yes" xml:space="preserve">
          <source>I have been using a combination of VirtualBox, Vagrant and Docker for all my projects for several months and have strongly felt the following benefits.</source>
          <target state="translated">Я использовал комбинацию VirtualBox,Vagrant и Docker во всех своих проектах в течение нескольких месяцев и сильно почувствовал следующие преимущества.</target>
        </trans-unit>
        <trans-unit id="d5574bbf6c293c4ffa5ee529a6a8602f551f601a" translate="yes" xml:space="preserve">
          <source>I hope now its clear to see that it is very difficult, and I believe not correct, to compare Docker to Vagrant. For dev environments, Vagrant is more abstract, more general. Docker (and the various ways you can make it behave like Vagrant) is a specific use case of Vagrant, ignoring everything else Vagrant has to offer.</source>
          <target state="translated">Я надеюсь,что теперь ясно видно,что это очень трудно,и я считаю неправильным,сравнить Докер с бродягой.Для девственной среды бродяга более абстрактный,более общий.Докер (и различные способы,которыми вы можете заставить его вести себя как бродяга)является специфическим случаем использования Vagrant,игнорируя все остальное,что может предложить бродяга.</target>
        </trans-unit>
        <trans-unit id="266a345aeade71ae1f55f705d1bf4a4ac876a69f" translate="yes" xml:space="preserve">
          <source>I preface my reply by admitting I have no experience with Docker, other than as an avid observer of what looks to be a really neat solution that's gaining a lot of traction.</source>
          <target state="translated">В предисловии к своему ответу я признаю,что у меня нет никакого опыта работы с Docker,кроме как в качестве заядлого наблюдателя за тем,что выглядит по-настоящему аккуратным решением,которое набирает большую популярность.</target>
        </trans-unit>
        <trans-unit id="1da0a4684250d4f801d81ef70509001de806850f" translate="yes" xml:space="preserve">
          <source>I use Ubuntu for development and deployment and have a need for creating an isolated environment.</source>
          <target state="translated">Я использую Ubuntu для разработки и развертывания,и у меня есть необходимость создания изолированной среды.</target>
        </trans-unit>
        <trans-unit id="21756dbc3f9e053c2a1e1e2693cb7205d6298ce5" translate="yes" xml:space="preserve">
          <source>I'm the author of Docker.</source>
          <target state="translated">Я автор &quot;Докер&quot;.</target>
        </trans-unit>
        <trans-unit id="83107c774e24baa3359721c6b10d1d2e94db5b13" translate="yes" xml:space="preserve">
          <source>If you interested I have a more detailed article on the development environment on my own web site at</source>
          <target state="translated">Если вам интересно,у меня есть более подробная статья о среде разработки на моем собственном сайте по адресу</target>
        </trans-unit>
        <trans-unit id="cb700ef0c65219a8149df94f4d5b0c7f83e3544d" translate="yes" xml:space="preserve">
          <source>If your organization runs only Docker containers for all their projects and only has developers running on Linux, then okay, Docker could definitely work for you!</source>
          <target state="translated">Если в Вашей организации для всех проектов используются только контейнеры Docker,а разработчики работают только под Linux,то ладно,Docker определенно может работать на Вас!</target>
        </trans-unit>
        <trans-unit id="f683ae3a8da933c7985d1ef7762fe49b02496fa1" translate="yes" xml:space="preserve">
          <source>If your purpose is the isolation, I think Docker is what you want.</source>
          <target state="translated">Если ваша цель-изоляция,я думаю,Докер-это то,чего вы хотите.</target>
        </trans-unit>
        <trans-unit id="f496e74bc23d1d5de8151a9f48e6c5974eefa7f9" translate="yes" xml:space="preserve">
          <source>Implementing A Vagrant / Docker Development Environment</source>
          <target state="translated">Внедрение среды разработки бродячих докеров</target>
        </trans-unit>
        <trans-unit id="be594435f695537c0f5a084ee3fcdc1335fff8b4" translate="yes" xml:space="preserve">
          <source>In Vagrant you can completely do away with any Chef solo provisioning and all you need your vagrant file to do is prepare a machine that runs a single small shell script that installs docker.  This means that my Vagrantfiles for every project are almost identical and very simple.</source>
          <target state="translated">В Vagrant вы можете полностью отказаться от любой самостоятельной настройки Chef,и все,что вам нужно-это подготовить машину,на которой запущен один маленький скрипт командной оболочки,устанавливающий docker.Это означает,что мои файлы Vagrantfile для каждого проекта практически идентичны и очень просты.</target>
        </trans-unit>
        <trans-unit id="8226b530b2828383729716d372b19461989cd459" translate="yes" xml:space="preserve">
          <source>In conclusion: in highly specific use cases, Docker is certainly a possible replacement for Vagrant. In most use cases, it is not. Vagrant doesn't hinder your usage of Docker; it actually does what it can to make that experience smoother. If you find this isn't true, I'm happy to take suggestions to improve things, since a goal of Vagrant is to work equally well with any system.</source>
          <target state="translated">В заключение:в очень специфических случаях использования,Докер,безусловно,является возможной заменой для бродяг.В большинстве случаев это не так.Vagrant не мешает вам использовать Docker;на самом деле,он делает все возможное,чтобы сделать этот опыт более гладким.Если вы считаете,что это не так,я с радостью приму предложения по улучшению,поскольку цель Vagrant-одинаково хорошо работать с любой системой.</target>
        </trans-unit>
        <trans-unit id="571a8c9b0b75e617e77d6c4703c630f8e4f11f51" translate="yes" xml:space="preserve">
          <source>In summary: Vagrant is for managing machines, and Docker is for building and running application environments.</source>
          <target state="translated">Вкратце:Vagrant-для управления машинами,а Docker-для создания и запуска приложений.</target>
        </trans-unit>
        <trans-unit id="7542230d15af6767c6aec97a5a2316acae31daec" translate="yes" xml:space="preserve">
          <source>In theory it's possible to use Vagrant as an abstraction layer for Docker. I recommend against this for two reasons:</source>
          <target state="translated">Теоретически можно использовать Vagrant как абстракционный слой для Docker.Я не рекомендую это делать по двум причинам:</target>
        </trans-unit>
        <trans-unit id="a334e3169973872efed2661a2c2ca623f3c81a5f" translate="yes" xml:space="preserve">
          <source>In this example I am running MongoDB, Elastisearch, RabbitMQ and Memcached</source>
          <target state="translated">В этом примере я запускаю MongoDB,Elastisearch,RabbitMQ и Memcached.</target>
        </trans-unit>
        <trans-unit id="7896840f4711fb9c239ae9c66c6519d7eca4dc09" translate="yes" xml:space="preserve">
          <source>Interestingly, Vagrant and Docker may actually be complimentary. Vagrant can be extended to support different virtualization providers, and it may be possible that Docker is one such provider which gets support in the near future. See &lt;a href=&quot;https://github.com/dotcloud/docker/issues/404&quot;&gt;https://github.com/dotcloud/docker/issues/404&lt;/a&gt; for recent discussion on the topic.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Интересно, что Vagrant и Docker на самом деле могут быть бесплатными. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vagrant может быть расширен для поддержки различных поставщиков виртуализации, и возможно, что Docker станет одним из таких поставщиков, который получит поддержку в ближайшем будущем. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;См. &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/dotcloud/docker/issues/404&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Https://github.com/dotcloud/docker/issues/404&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; для недавнего обсуждения этой темы.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="db55c72885526babb16752fb132e7638a5dc64d3" translate="yes" xml:space="preserve">
          <source>It isn't correct to directly compare Vagrant to Docker. In some scenarios, they do overlap, and in the vast majority, they don't. Actually, the more apt comparison would be Vagrant versus something like Boot2Docker (minimal OS that can run Docker). Vagrant is a level above Docker in terms of abstractions, so it isn't a fair comparison in most cases.</source>
          <target state="translated">Неправильно напрямую сравнивать бродягу с Докером.В некоторых сценариях они пересекаются,а в подавляющем большинстве нет.На самом деле,тем более правильным было бы сравнение Vagrant с чем-то вроде Boot2Docker (минимальная операционная система,которая может работать под управлением Docker).Vagrant-это уровень выше Docker с точки зрения абстракций,так что в большинстве случаев это не является справедливым сравнением.</target>
        </trans-unit>
        <trans-unit id="51c7caa6193b979e7f731ad0bacd460e39fa86bb" translate="yes" xml:space="preserve">
          <source>It's a common misconception that you can only use Docker on Linux. That's incorrect; you can also install Docker on Mac, and Windows. When installed on Mac, Docker bundles a tiny Linux VM (25&amp;nbsp;MB on disk!) which acts as a wrapper for your container. Once installed this is completely transparent; you can use the Docker command-line in exactly the same way. This gives you the best of both worlds: you can test and develop your application using containers, which are very lightweight, easy to test and easy to move around (see for example &lt;a href=&quot;https://hub.docker.com&quot;&gt;https://hub.docker.com&lt;/a&gt; for sharing reusable containers with the Docker community), and you don't need to worry about the nitty-gritty details of managing virtual machines, which are just a means to an end anyway.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Это распространенное заблуждение, что вы можете использовать Docker только в Linux. Это неверно; Вы также можете установить Docker на Mac и Windows. При установке на Mac Docker связывает крошечную виртуальную машину Linux (25 МБ на диске!), Которая действует как оболочка для вашего контейнера. После установки это полностью прозрачно; вы можете использовать командную строку Docker точно таким же образом. Это дает вам лучшее из обоих миров: вы можете тестировать и разрабатывать свое приложение, используя контейнеры, которые очень легки, просты в тестировании и легко перемещаются (см., Например, &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://hub.docker.com&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https://hub.docker.com&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; для обмена повторно используемыми контейнерами с сообщество Docker), и вам не нужно беспокоиться о мельчайших подробностях управления виртуальными машинами, которые в любом случае являются лишь средством достижения цели.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="45cc2e78cd92403a188aa713443a5b002162f138" translate="yes" xml:space="preserve">
          <source>Iterate on the component(s) to code against.</source>
          <target state="translated">Итерация компонента(ов)к коду против.</target>
        </trans-unit>
        <trans-unit id="831bf3bb9ccd38413f3223abafe0808607c7b1e5" translate="yes" xml:space="preserve">
          <source>Now to get all the services I need running I have a docker_start script that looks somthing like this</source>
          <target state="translated">Теперь,чтобы получить все службы,которые мне нужно запустить,у меня есть скрипт docker_start,который выглядит примерно так.</target>
        </trans-unit>
        <trans-unit id="f0f9e72b450d71926c145297ebb5b6a8d2800a4b" translate="yes" xml:space="preserve">
          <source>Of course is a new discipline to care with its own pitfals and challenges.</source>
          <target state="translated">Конечно же,это новая дисциплина,которая должна заботиться о своих собственных подводных камнях и вызовах.</target>
        </trans-unit>
        <trans-unit id="1f5be52a267971b858616d166763a3ad658d7bb8" translate="yes" xml:space="preserve">
          <source>One of the really great things with Vagrant is the integration with &lt;a href=&quot;http://en.wikipedia.org/wiki/Puppet_%28software%29&quot;&gt;Puppet&lt;/a&gt;/&lt;a href=&quot;https://en.wikipedia.org/wiki/Chef_%28software%29&quot;&gt;Chef&lt;/a&gt;/shell scripts for automating configuration. If you're using one of these options to configure your production environment, you can create a development environment which is as close to identical as you're going to get, and this is exactly what you want.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Одна из замечательных особенностей Vagrant - это интеграция со &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;скриптами &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Puppet_%28software%29&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Puppet&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; / &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Chef_%28software%29&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Chef&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; / shell для автоматизации настройки. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Если вы используете один из этих параметров для настройки производственной среды, вы можете создать среду разработки, максимально приближенную к идентичной, которую вы собираетесь получить, и это именно то, что вам нужно.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ec252b7937e27d100e817ea646b06eab07d8d8af" translate="yes" xml:space="preserve">
          <source>Otherwise, I don't see a benefit to attempting to use Docker alone, since you lose a lot of what Vagrant has to offer, which have real business/productivity benefits:</source>
          <target state="translated">В противном случае,я не вижу смысла пытаться использовать Docker в одиночку,так как вы теряете много того,что Vagrant может предложить,которые имеют реальные преимущества в плане бизнес-продуктивности:</target>
        </trans-unit>
        <trans-unit id="bab99a4387026ddc94f3e9d007f84ac8e6bdb321" translate="yes" xml:space="preserve">
          <source>Please note that you can also use Docker for provisioning with Vagrant. This is very different than using Docker as a provider. &lt;a href=&quot;http://docs.vagrantup.com/v2/provisioning/docker.html&quot;&gt;http://docs.vagrantup.com/v2/provisioning/docker.html&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Обратите внимание, что вы также можете использовать Docker для обеспечения Vagrant. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Это сильно отличается от использования Docker в качестве провайдера. &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://docs.vagrantup.com/v2/provisioning/docker.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http://docs.vagrantup.com/v2/provisioning/docker.html&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="af38ba35548de03e0b53000d47956167509829e7" translate="yes" xml:space="preserve">
          <source>Repeat this for all application components.</source>
          <target state="translated">Повторите это для всех компонентов приложения.</target>
        </trans-unit>
        <trans-unit id="f062e117843850276752b3ef927824d492f94ca3" translate="yes" xml:space="preserve">
          <source>Second, the lock-in argument. &quot;If you use Vagrant as an abstraction, you will not be locked into Docker!&quot;. From the point of view of Vagrant, which is designed to manage machines, this makes perfect sense: aren't containers just another kind of machine? Just like Amazon EC2 and VMware, we must be careful not to tie our provisioning tools to any particular vendor! This would create lock-in - better to abstract it all away with Vagrant. Except this misses the point of Docker entirely. Docker doesn't provision machines; it wraps your application in a lightweight portable runtime which can be dropped anywhere.</source>
          <target state="translated">Во-вторых,аргумент о блокировке.&quot;Если вы используете бродягу как абстракцию,вы не будете заперты в Докер!&quot;.С точки зрения Vagrant,который предназначен для управления машинами,это имеет прекрасный смысл:не являются ли контейнеры просто другим видом машины? Как и Amazon EC2 и VMware,мы должны быть осторожны и не привязывать наши инструменты предоставления услуг к какому-либо конкретному поставщику! Это создаст блокировку-лучше абстрагироваться от Vagrant.За исключением того,что это полностью упускает суть Docker.Docker не предоставляет машины для инициализации;он обертывает ваше приложение в легкое портативное время выполнения,которое может быть сброшено куда угодно.</target>
        </trans-unit>
        <trans-unit id="63798b973134fcff610515a865d931cd7f4bb300" translate="yes" xml:space="preserve">
          <source>Should I use Vagrant or Docker for creating an isolated environment</source>
          <target state="translated">Должен ли я использовать Vagrant или Docker для создания изолированной среды.</target>
        </trans-unit>
        <trans-unit id="e342edb0236a68b3b3358d9a09b4be49b7e7748e" translate="yes" xml:space="preserve">
          <source>Sleep well knowing when it is time to deploy the container, that integration testing was occurring on a much more continuous basis than it was before Docker.</source>
          <target state="translated">Хорошо спать,зная,когда пришло время разворачивать контейнер,что интеграционное тестирование происходит на гораздо более постоянной основе,чем это было до Docker.</target>
        </trans-unit>
        <trans-unit id="4254350df60a32c6e6130a881780c47f2b1b2528" translate="yes" xml:space="preserve">
          <source>So I see Vagrant evolving as a way of leveraging some of the awesome consequences Docker will have for app deployment.</source>
          <target state="translated">Поэтому я вижу,как Vagrant развивается как способ использования некоторых из удивительных последствий,которые Docker будет иметь для развертывания приложений.</target>
        </trans-unit>
        <trans-unit id="1ae02a8d8667acba097ad137bc19e81a009b0918" translate="yes" xml:space="preserve">
          <source>Take a Java/Go application component and build it as a container
(note, not sure if the app should be built in the container or built then
installed to the container)</source>
          <target state="translated">Возьмите компонент приложения JavaGo и соберите его в виде контейнера (обратите внимание,не уверен,что приложение должно быть встроено в контейнер или собрано,а затем установлено в контейнер).</target>
        </trans-unit>
        <trans-unit id="751b6f88d07e4787a1e2e247ad7ad2f4598c246a" translate="yes" xml:space="preserve">
          <source>The Bootstrap file that installs docker looks like this</source>
          <target state="translated">Файл Bootstrap,который устанавливает докер,выглядит так.</target>
        </trans-unit>
        <trans-unit id="95e42d8c02236732151693c6220da42cd2eb11cf" translate="yes" xml:space="preserve">
          <source>The fact that as a developer I am constantly and consistently delivering containers to the VM and testing the application more holistically means that production releases will be further simplified.</source>
          <target state="translated">Тот факт,что я как разработчик постоянно и последовательно поставляю контейнеры в ВМ и тестирую приложение более комплексно,означает,что производственные релизы будут еще более упрощены.</target>
        </trans-unit>
        <trans-unit id="5e038958d5831f7501c7e9f7b01865b32159f651" translate="yes" xml:space="preserve">
          <source>The only reason you could want to use Vagrant is if you need to do BSD, Windows or other non-Linux development on your Ubuntu box. Otherwise, go for Docker.</source>
          <target state="translated">Единственная причина,по которой вы можете захотеть использовать Vagrant,это если вам нужно делать BSD,Windows или другие не-Linux разработки на вашем Ubuntu коробке.В противном случае используйте Docker.</target>
        </trans-unit>
        <trans-unit id="ec3fa2be605bbfda0daadda6de437a7e2ab8a96f" translate="yes" xml:space="preserve">
          <source>The other great thing with Vagrant is that you can version your Vagrantfile along with your application code. This means that everyone else on your team can share this file and you're guaranteed that everyone is working with the same environment configuration.</source>
          <target state="translated">Другая замечательная вещь с Vagrant заключается в том,что вы можете версию своего Vagrant файла вместе с кодом приложения.Это означает,что все остальные члены вашей команды могут поделиться этим файлом,и вам гарантировано,что все работают с одинаковой конфигурацией среды.</target>
        </trans-unit>
        <trans-unit id="aa21c7b0c1f5a57538aeb32528b3b479e4af0e12" translate="yes" xml:space="preserve">
          <source>The short answer is that if you want to manage machines, you should use Vagrant. And if you want to build and run applications environments, you should use Docker.</source>
          <target state="translated">Короткий ответ заключается в том,что если вы хотите управлять машинами,вы должны использовать Vagrant.А если вы хотите собирать и запускать среды приложений,вам следует использовать Docker.</target>
        </trans-unit>
        <trans-unit id="05dde88d23625506bfb21b458ae6b6d3479116d8" translate="yes" xml:space="preserve">
          <source>The thinking goes something like this:</source>
          <target state="translated">Мысли идут что-то вроде этого:</target>
        </trans-unit>
        <trans-unit id="6a6bc37772ba6f7940bd8a7b45822a2e641f81f2" translate="yes" xml:space="preserve">
          <source>There is a really informative article in the actual Oracle Java magazine about using Docker in combination with Vagrant (and Puppet):</source>
          <target state="translated">В реальном журнале Oracle Java есть действительно информативная статья об использовании Docker в сочетании с Vagrant (и Puppet):</target>
        </trans-unit>
        <trans-unit id="289452da861664a9dd45090386e4368e70a5f104" translate="yes" xml:space="preserve">
          <source>They are very much complementary.</source>
          <target state="translated">Они очень дополняют друг друга.</target>
        </trans-unit>
        <trans-unit id="0f7e684dc8ada8d02c0227d80b555833593b376a" translate="yes" xml:space="preserve">
          <source>This means you can replace &lt;a href=&quot;https://en.wikipedia.org/wiki/Chef_%28software%29&quot;&gt;Chef&lt;/a&gt; or &lt;a href=&quot;http://en.wikipedia.org/wiki/Puppet_%28software%29&quot;&gt;Puppet&lt;/a&gt; with Docker. You can use combinations like Docker as provider (VM) with Chef as provisioner. Or you can use VirtualBox as provider and Docker as provisioner.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Это означает, что вы можете заменить &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Chef_%28software%29&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Chef&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; или &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Puppet_%28software%29&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Puppet&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; на Docker. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вы можете использовать такие комбинации, как Docker в качестве провайдера (VM) с Chef в качестве провайдера. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Или вы можете использовать VirtualBox в качестве поставщика и Docker в качестве поставщика.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6d9d3c5f3ed2a350e4b8bc925a19807a443d833f" translate="yes" xml:space="preserve">
          <source>This seems to be the logical extension of Mitchell's statement that Vagrant is for development combined with Farley/Humbles thinking in Continuous Delivery. If I, as a developer, can shrink the feedback loop on integration testing and application delivery, higher quality and better work environments will follow.</source>
          <target state="translated">Похоже,что это логическое продолжение заявления Митчелла о том,что &quot;Бродяга&quot; предназначен для развития в сочетании с мышлением Фарли-Хамблса в непрерывной поставке.Если я,как разработчик,может сократить цикл обратной связи по интеграции тестирования и доставки приложений,более высокое качество и лучшая рабочая среда будет следовать.</target>
        </trans-unit>
        <trans-unit id="46ca9b4ef92d13aec598dba576c238a245baa1d0" translate="yes" xml:space="preserve">
          <source>To address specific counter arguments that I've heard in favor of using Docker instead of Vagrant:</source>
          <target state="translated">Для обращения к конкретным встречным аргументам,которые я слышал в пользу использования Docker вместо Vagrant:</target>
        </trans-unit>
        <trans-unit id="a1a81d5698f299b0e22ec55295abb9cb8f0f1e92" translate="yes" xml:space="preserve">
          <source>Using both is an important part of application delivery testing. I am only beginning to get involved with Docker and thinking very hard about an application team that has terrible complexity in building and delivering its software.  Think of a classic Phoenix Project / Continuous Delivery situation.</source>
          <target state="translated">Использование обоих является важной частью тестирования доставки приложений.Я только начинаю работать с Docker и очень много думаю о команде разработчиков приложений,которая имеет ужасную сложность в создании и доставке программного обеспечения.Подумайте о классической ситуации с непрерывной доставкой в рамках проекта Phoenix.</target>
        </trans-unit>
        <trans-unit id="c56bfd57ad91150dd9a5d83cd039ed857e632932" translate="yes" xml:space="preserve">
          <source>Vagrant 1.6 has first-class support for &lt;a href=&quot;http://www.vagrantup.com/blog/feature-preview-vagrant-1-6-docker-dev-environments.html&quot;&gt;docker-based development environments&lt;/a&gt;. This will not launch a virtual machine on Linux, and will automatically launch a virtual machine on Mac and Windows. The end result is that working with Docker is uniform across all platforms, while Vagrant still handles the tedious details of things such as networking, synced folders, etc.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vagrant 1.6 имеет первоклассную поддержку &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.vagrantup.com/blog/feature-preview-vagrant-1-6-docker-dev-environments.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;сред разработки на основе докеров&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . Это не запустит виртуальную машину в Linux и автоматически запустит виртуальную машину в Mac и Windows. Конечным результатом является то, что работа с Docker одинакова на всех платформах, в то время как Vagrant по-прежнему обрабатывает утомительные детали таких вещей, как работа в сети, синхронизированные папки и т. Д.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8b8ec4b9b97fd1f750140c280c50612f2ef99fbb" translate="yes" xml:space="preserve">
          <source>Vagrant can launch VirtualBox, VMware, AWS, OpenStack, etc. machines. It doesn't matter what you need, Vagrant can launch it. If you are using Docker, Vagrant can install Docker on any of these so you can use them for that purpose.</source>
          <target state="translated">Бродяга может запускать машины VirtualBox,VMware,AWS,OpenStack и т.д..Неважно,что вам нужно,Vagrant может запустить его.Если вы используете Docker,Vagrant может установить Docker на любой из них,чтобы вы могли использовать его для этих целей.</target>
        </trans-unit>
        <trans-unit id="3ba5ca5808d23256edd13271c9225a76f9e685e7" translate="yes" xml:space="preserve">
          <source>Vagrant is a single workflow for all your projects. Or to put another way, it is just one thing people have to learn to run a project whether it is in a Docker container or not. If, for example, in the future, a competitor arises to compete directly with Docker, Vagrant will be able to run that too.</source>
          <target state="translated">Бродяга-это единый рабочий процесс для всех ваших проектов.Или,другими словами,это просто одна вещь,которой люди должны научиться управлять проектом,вне зависимости от того,находится ли он в контейнере Docker или нет.Если,например,в будущем у конкурента возникнет конкуренция непосредственно с Docker,Vagrant сможет запустить и это.</target>
        </trans-unit>
        <trans-unit id="c27f223a6cb9238f63be51ac1d309395fccd336b" translate="yes" xml:space="preserve">
          <source>Vagrant is a tool for managing virtual machines. Docker is a tool for building and deploying applications by packaging them into lightweight containers. A container can hold pretty much any software component along with its dependencies (executables, libraries, configuration files, etc.), and execute it in a guaranteed and repeatable runtime environment. This makes it very easy to build your app once and deploy it anywhere - on your laptop for testing, then on different servers for live deployment, etc.</source>
          <target state="translated">Vagrant-это инструмент для управления виртуальными машинами.Docker-это инструмент для создания и развертывания приложений путем упаковки их в легкие контейнеры.Контейнер может вмещать практически любой программный компонент вместе с его зависимостями (исполняемые файлы,библиотеки,конфигурационные файлы и т.д.),и выполнять его в гарантированной и воспроизводимой среде выполнения.Это позволяет очень легко собрать приложение один раз и развернуть его в любом месте-на ноутбуке для тестирования,затем на разных серверах для живого развертывания и т.д.</target>
        </trans-unit>
        <trans-unit id="efeca42dc823d05ae77ad67cd7d621ddd1de7b6d" translate="yes" xml:space="preserve">
          <source>Vagrant is a virtual machine manager. It allows you to script the virtual machine configuration as well as the provisioning. However, it is still a virtual machine depending on &lt;a href=&quot;http://en.wikipedia.org/wiki/VirtualBox&quot;&gt;VirtualBox&lt;/a&gt; (or others) with a huge overhead. It requires you to have a hard drive file that can be huge, it takes a lot of ram, and performance may be not very good.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vagrant - менеджер виртуальных машин. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Это позволяет вам создавать сценарии конфигурации виртуальной машины, а также инициализации. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Тем не менее, это все еще виртуальная машина в зависимости от &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/VirtualBox&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;VirtualBox&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (или других) с огромными издержками. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Это требует, чтобы у вас был файл жесткого диска, который мог быть огромным, это требовало большого количества оперативной памяти, а производительность могла быть не очень хорошей.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="835066f6f2446a7ca317229318fbd937babb3b9e" translate="yes" xml:space="preserve">
          <source>Vagrant knows how to configure some advanced or non-trivial things like networking and syncing folders. For example: Vagrant knows how to attach a static IP to a machine or forward ports, and the configuration is the same no matter what system you use (VirtualBox, VMware, etc.) For synced folders, Vagrant provides multiple mechanisms to get your local files over to the remote machine (VirtualBox shared folders, NFS, rsync, Samba [plugin], etc.). If you're using Docker, even Docker with a VM without Vagrant, you would have to manually do this or they would have to reinvent Vagrant in this case.</source>
          <target state="translated">Vagrant знает,как настроить некоторые продвинутые или нетривиальные вещи,такие как работа в сети и синхронизация папок.Например:Vagrant знает,как прикрепить статический IP-адрес к машине или перенаправить порты,и настройка одинакова независимо от того,какую систему вы используете (VirtualBox,VMware и т.д.)Для синхронизированных папок Vagrant предоставляет множество механизмов для переноса ваших локальных файлов на удаленную машину (общие папки VirtualBox,NFS,rsync,Samba [плагин]и т.д.).Если вы используете Docker,даже Docker с ВМ без Vagrant,вам придется сделать это вручную,иначе в этом случае придется заново изобретать Vagrant.</target>
        </trans-unit>
        <trans-unit id="860bf614250849c4cf7a8462f202554344f82d3d" translate="yes" xml:space="preserve">
          <source>Vagrant launches things to run apps/services for the purpose of development. This can be on VirtualBox, VMware. It can be remote like AWS, OpenStack. Within those, if you use containers, Vagrant doesn't care, and embraces that: it can automatically install, pull down, build, and run Docker containers, for example. With Vagrant 1.6, Vagrant has &lt;a href=&quot;http://www.vagrantup.com/blog/feature-preview-vagrant-1-6-docker-dev-environments.html&quot;&gt;docker-based development environments&lt;/a&gt;, and supports using Docker with the same workflow as Vagrant across Linux, Mac, and Windows. Vagrant doesn't try to replace Docker here, it embraces Docker practices.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vagrant запускает приложения для запуска приложений / сервисов с целью разработки. Это может быть на VirtualBox, VMware. Он может быть удаленным, как AWS, OpenStack. В тех случаях, когда вы используете контейнеры, Vagrant не заботится об этом и принимает это: он может, например, автоматически устанавливать, извлекать, собирать и запускать контейнеры Docker. В Vagrant 1.6 Vagrant имеет &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.vagrantup.com/blog/feature-preview-vagrant-1-6-docker-dev-environments.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;среды разработки на основе&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; докеров и поддерживает использование Docker с тем же рабочим процессом, что и Vagrant в Linux, Mac и Windows. Вагрант не пытается заменить Docker здесь, он охватывает практики Docker.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f1a64a0cdb06a03bddf57928277455accf45f34f" translate="yes" xml:space="preserve">
          <source>Vagrant works on Windows (back to XP), Mac (back to 10.5), and Linux (back to kernel 2.6). In all three cases, the workflow is the same. If you use Docker, Vagrant can launch a machine (VM or remote) that can run Docker on all three of these systems.</source>
          <target state="translated">Vagrant работает на Windows (с XP),Mac (с 10.5)и Linux (с ядром 2.6).Во всех трех случаях рабочий процесс одинаков.Если вы используете Docker,Vagrant может запустить машину (VM или удаленную),которая может запустить Docker на всех этих трех системах.</target>
        </trans-unit>
        <trans-unit id="058c9b8617f3dc2354c776be946dc78bbdd2bcbf" translate="yes" xml:space="preserve">
          <source>What runtime you choose for your application has nothing to do with how you provision your machines! For example it's pretty frequent to deploy applications to machines which are provisioned by someone else (for example an EC2 instance deployed by your system administrator, perhaps using Vagrant), or to bare metal machines which Vagrant can't provision at all. Conversely, you may use Vagrant to provision machines which have nothing to do with developing your application - for example a ready-to-use Windows IIS box or something. Or you may use Vagrant to provision machines for projects which don't use Docker - perhaps they use a combination of rubygems and rvm for dependency management and sandboxing for example.</source>
          <target state="translated">Какое время выполнения вы выбираете для своего приложения,не имеет никакого отношения к тому,как вы предоставляете свои машины! Например,довольно часто приложения устанавливаются на машины,которые предоставляются кем-то другим (например,на EC2,установленный вашим системным администратором,возможно,с помощью Vagrant),или на пустые машины,которые Vagrant не может предоставить вовсе.И наоборот,вы можете использовать Vagrant для инициализации машин,которые не имеют никакого отношения к разработке приложений-например,готовый к использованию модуль Windows IIS или что-то в этом роде.Или вы можете использовать Vagrant для инициализации машин для проектов,которые не используют Docker-возможно,они используют комбинацию рубигемов и rvm для управления зависимостями и песочницы,например.</target>
        </trans-unit>
        <trans-unit id="79ccd86a62436e552d5fc21716baf34aaa4159ad" translate="yes" xml:space="preserve">
          <source>With Vagrant now you can have Docker as a provider. &lt;a href=&quot;http://docs.vagrantup.com/v2/docker/&quot;&gt;http://docs.vagrantup.com/v2/docker/&lt;/a&gt;. Docker provider can be used instead of VirtualBox or VMware.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;С Vagrant теперь вы можете иметь Docker в качестве поставщика. &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://docs.vagrantup.com/v2/docker/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http://docs.vagrantup.com/v2/docker/&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Поставщик Docker может использоваться вместо VirtualBox или VMware.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
