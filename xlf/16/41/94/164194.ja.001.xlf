<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/164194">
    <body>
      <group id="164194">
        <trans-unit id="7369f1dbbb13c0f5b1914ae576611fabf3d5a20a" translate="yes" xml:space="preserve">
          <source>&quot;str&quot; is an array allocated on the stack and can be modified freely.</source>
          <target state="translated">&quot;str &quot;はスタック上に確保された配列で、自由に変更することができます。</target>
        </trans-unit>
        <trans-unit id="6f4f9823718a35a3ce0df5bf6d6359ac144110be" translate="yes" xml:space="preserve">
          <source>5 In translation phase 7, a byte or code of value zero is appended to each multibyte
  character sequence that results from a string literal or literals. The multibyte character
  sequence is then used to initialize an array of static storage duration and length just
  sufficient to contain the sequence. For character string literals, the array elements have
  type char, and are initialized with the individual bytes of the multibyte character
  sequence [...]</source>
          <target state="translated">5 翻訳フェーズ7では、文字列リテラルまたはリテラルから得られる各マルチバイト文字列に、値ゼロのバイトまたはコードが付加されます。次に、マルチバイト文字列は、その配列を格納するのに十分な長さと持続時間を持つ配列を初期化するために使用されます。文字列リテラルの場合、配列要素はchar型を持ち、マルチバイト文字列の個々のバイトで初期化されます。</target>
        </trans-unit>
        <trans-unit id="cd7322bb185146ef549f5a00c1243d9e4faecc12" translate="yes" xml:space="preserve">
          <source>6 It is unspecified whether these arrays are distinct provided their elements have the
  appropriate values. If the program attempts to modify such an array, the behavior is
  undefined.</source>
          <target state="translated">6 これらの配列が,その要素が適切な値を持っていれば別個の配列であるかどうかは不定です.プログラムがこのような配列を変更しようとした場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="fac3ed3a23c3121f9d9408f6549bff597dc35ee0" translate="yes" xml:space="preserve">
          <source>6.7.8/32 &quot;Initialization&quot; gives a direct example:</source>
          <target state="translated">6.7.832 「初期化」は直接の例を示しています。</target>
        </trans-unit>
        <trans-unit id="8b695488b8249b4a46f3f5b555499d55486b4d72" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;char *str&lt;/code&gt; is a pointer to a string which is non modifiable(the reason for getting seg fault)..</source>
          <target state="translated">&lt;code&gt;char *str&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、変更不可能な文字列へのポインタです（seg障害の原因）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e645b13168dcb6a2c365f5127c101d353a93e2aa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;A&lt;/strong&gt;: A string literal (the formal term
  for a double-quoted string in C
  source) can be used in two slightly
  different ways:</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;A&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：文字列リテラル（Cソースで二重引用符で囲まれた文字列の正式な用語）は、2つのわずかに異なる方法で使用できます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="989caef3a70ec06f60e066ab0e2e395d4de66975" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;C99 N1256 draft&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C99 N1256ドラフト&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b7c1aaf324c090633cc6b151399499e5ec81a78b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;GCC 4.8 x86-64 ELF implementation&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;GCC 4.8 x86-64 ELF実装&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="49f8d9a28773b6bc3930685952238d28afd5aee5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Q&lt;/strong&gt;: What is the difference between these initializations?</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Q&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：これらの初期化の違いは何ですか？&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d3c7f722e91108fa4fcb25941a0310cb3b603976" translate="yes" xml:space="preserve">
          <source>Also, printing the size of &lt;code&gt;str&lt;/code&gt; in the second example will show you that the compiler has allocated 7 bytes for it:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;また、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2番目の例&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;で&lt;/font&gt;&lt;/font&gt; &lt;code&gt;str&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;のサイズを出力&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;すると、コンパイラーがそれに7バイトを割り当てていることがわかります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cbd97cb6ba42b992540a09774cb2c6478490196a" translate="yes" xml:space="preserve">
          <source>An array of character type may be initialized by a character string literal, optionally
  enclosed in braces. Successive characters of the character string literal (including the
  terminating null character if there is room or if the array is of unknown size) initialize the
  elements of the array.</source>
          <target state="translated">文字型の配列は、中括弧で囲まれた文字列リテラルで初期化することができます。文字列リテラルの連続した文字(余裕がある場合や配列のサイズが不明な場合は終了するヌル文字を含む)が配列の要素を初期化します。</target>
        </trans-unit>
        <trans-unit id="24944353ecb56980e9abe0eb848367d1bbe16eec" translate="yes" xml:space="preserve">
          <source>Anywhere else, it turns into an unnamed, static array of characters,
  and this unnamed array may be stored
  in read-only memory, and which
  therefore cannot necessarily be
  modified. In an expression context,
  the array is converted at once to a
  pointer, as usual (see section 6), so
  the second declaration initializes p
  to point to the unnamed array's first
  element.</source>
          <target state="translated">それ以外の場所では、それは名前のない静的な文字の配列に変わり、この名前のない配列は読み取り専用のメモリに格納されている可能性があり、したがって、必ずしも変更することはできません。式のコンテキストでは、配列は通常通り一度にポインタに変換されます(第6節を参照)ので、2番目の宣言では、無名配列の最初の要素を指すようにpを初期化します。</target>
        </trans-unit>
        <trans-unit id="08626871d2cc92f267c8fd80fc601794cef57016" translate="yes" xml:space="preserve">
          <source>As the initializer for an array of char, as in the declaration of &lt;code&gt;char a[]&lt;/code&gt; , it specifies the initial values
  of the characters in that array (and,
  if necessary, its size).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;char a[]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;宣言のように、charの配列の初期化子として、その配列の文字&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の初期値（および必要に応じてそのサイズ）を指定します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0f2ac90e5ac860abf9685d09d6b4fbd7022d39d8" translate="yes" xml:space="preserve">
          <source>As we all know  pointer points to memory location in memory ,
uninitialized pointer points to random memory location so and after initialization points to particular memory location</source>
          <target state="translated">我々はすべてのメモリ内のメモリ位置へのポインタのポイントを知っているように、非初期化ポインタはランダムなメモリ位置を指しているので、特定のメモリ位置への初期化ポイントの後に</target>
        </trans-unit>
        <trans-unit id="53f7bb1d4edd3ccbef6d448faa7bc39cbca32ee8" translate="yes" xml:space="preserve">
          <source>Assume the strings are,</source>
          <target state="translated">文字列と仮定します。</target>
        </trans-unit>
        <trans-unit id="0a9b511b34e15ea2b692a64eadb322d81b287abf" translate="yes" xml:space="preserve">
          <source>Because the type of &lt;code&gt;&quot;whatever&quot;&lt;/code&gt; in the context of the 1st example is &lt;code&gt;const char *&lt;/code&gt; (even if you assign it to a non-const char*), which means you shouldn't try and write to it.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;1番目の例のコンテキスト&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;での&lt;/font&gt;&lt;/font&gt; &lt;code&gt;&quot;whatever&quot;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;タイプ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;/font&gt; &lt;code&gt;const char *&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（非const char *に割り当てた場合でも）であるため、書き込みを試みてはならないということです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="25b5fe8d44d915ccc40ac69a9cf6c6ac4e5b0299" translate="yes" xml:space="preserve">
          <source>But ptr can be initialised to other string value directly since it is just pointer so it can be point to any memory address of variable of its data type</source>
          <target state="translated">しかし、ptr はただのポインタなので、他の文字列の値に直接初期化することができます。</target>
        </trans-unit>
        <trans-unit id="8646ef6ae439093b3a509c848a73e94716034cd4" translate="yes" xml:space="preserve">
          <source>Compile and decompile:</source>
          <target state="translated">コンパイルして逆コンパイルします。</target>
        </trans-unit>
        <trans-unit id="88ec39701a0c4df5266196b2dee36c3fa2c11fef" translate="yes" xml:space="preserve">
          <source>Conclusion: GCC stores &lt;code&gt;char*&lt;/code&gt; it in &lt;code&gt;.rodata&lt;/code&gt; section, not in &lt;code&gt;.text&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;結論：GCCは&lt;/font&gt;&lt;/font&gt; &lt;code&gt;char*&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; it &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt; &lt;code&gt;.text&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;ではなく&lt;/font&gt;&lt;/font&gt; &lt;code&gt;.rodata&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;セクションに&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;格納&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;し&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="64ca5ab0ff194c61c227c75f16866d610381468c" translate="yes" xml:space="preserve">
          <source>EXAMPLE 8: The declaration</source>
          <target state="translated">EXAMPLE 8.宣言</target>
        </trans-unit>
        <trans-unit id="3b35a62bda88de385c42aaf857d1210eaf12a76e" translate="yes" xml:space="preserve">
          <source>Everywhere else: it generates an:</source>
          <target state="translated">他の場所:それは生成されます。</target>
        </trans-unit>
        <trans-unit id="46e39defeb634a812d739b9ddcfc21883259a655" translate="yes" xml:space="preserve">
          <source>First is one constant string which can't be modified. Second is an array with initialized value, so it can be modified.</source>
          <target state="translated">1つ目は修正できない1つの定数文字列です。2つ目は初期化された値を持つ配列なので、変更可能です。</target>
        </trans-unit>
        <trans-unit id="fcf9bd7f6f632d83d63a2a6cecbb14e0e50ea42e" translate="yes" xml:space="preserve">
          <source>If we do the same for &lt;code&gt;char[]&lt;/code&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;同じことを&lt;/font&gt;&lt;/font&gt; &lt;code&gt;char[]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に対して行う場合&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f59390f0a45c1b4712554097c095cc344081aa9e" translate="yes" xml:space="preserve">
          <source>In memory array is stored in continuous memory cells, stored as &lt;code&gt;[h][e][l][l][o][\0] =&amp;gt;[]&lt;/code&gt; is 1 char byte size memory cell ,and this continuous memory cells can be access by name named strarray here.so here string array &lt;code&gt;strarray&lt;/code&gt; itself containing all characters of string initialized to it.in this case here &lt;code&gt;&quot;hello&quot;&lt;/code&gt;
so we can easily change its memory content by accessing each character by its index value</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;メモリアレイは、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;[h][e][l][l][o][\0] =&amp;gt;[]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;として保存される連続メモリセルに格納され、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;1文字のバイトサイズのメモリセルです。この連続メモリセルは、 here.soここStrArrayと名前の名前文字列配列によるアクセス&lt;/font&gt;&lt;/font&gt; &lt;code&gt;strarray&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;文字列のすべての文字を含む自体は、ここでこのケースをit.inに初期化&lt;/font&gt;&lt;/font&gt; &lt;code&gt;&quot;hello&quot;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 我々は簡単にそのインデックス値で各文字にアクセスすることにより、そのメモリの内容を変更することができますので、&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4337c1da9ceb238dfadf01362b0e7aaea46cc2b6" translate="yes" xml:space="preserve">
          <source>In the first case, the literal is to be copied when 'a' comes into scope. Here 'a' is an array defined on stack. It means the string will be created on the stack and its data is copied from code (text) memory, which is typically read-only (this is implementation specific, a compiler can place this read-only program data in read-writable memory also).</source>
          <target state="translated">最初のケースでは、'a' がスコープに入ったときにリテラルがコピーされます。ここでは 'a' はスタック上で定義された配列です。これは、文字列がスタック上に作成され、そのデータがコード(テキスト)メモリからコピーされることを意味し、通常は読み取り専用です(これは実装固有のもので、コンパイラはこの読み取り専用のプログラムデータを読み取り可能なメモリに置くこともできます)。</target>
        </trans-unit>
        <trans-unit id="c000469e8149dce9f4db193ab1d1c419c544bc92" translate="yes" xml:space="preserve">
          <source>In the first code, &quot;string&quot; is a string constant, and string constants should never be modified because they are often placed into read only memory.  &quot;str&quot; is a pointer being used to modify the constant.</source>
          <target state="translated">最初のコードでは、&quot;string &quot;は文字列定数であり、文字列定数は、読み取り専用のメモリに置かれることが多いので、決して変更されるべきではありません。&quot;str &quot;は定数を変更するために使用されるポインタです。</target>
        </trans-unit>
        <trans-unit id="97ea0635da2a3e86ec6d0d79f1cfbaee517b1039" translate="yes" xml:space="preserve">
          <source>In the first place, &lt;code&gt;str&lt;/code&gt; is a pointer that points at &lt;code&gt;&quot;string&quot;&lt;/code&gt;.  The compiler is allowed to put string literals in places in memory that you cannot write to, but can only read.  (This really should have triggered a warning, since you're assigning a &lt;code&gt;const char *&lt;/code&gt; to a &lt;code&gt;char *&lt;/code&gt;.  Did you have warnings disabled, or did you just ignore them?)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そもそも&lt;/font&gt;&lt;/font&gt; &lt;code&gt;str&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;/font&gt; &lt;code&gt;&quot;string&quot;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を指すポインタです&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コンパイラは、文字列リテラルをメモリ内の書き込みできない場所に置くことができますが、読み取ることはできます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（これは本当にあなたが代入していることから、警告をトリガしているはず&lt;/font&gt;&lt;/font&gt; &lt;code&gt;const char *&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;する&lt;/font&gt;&lt;/font&gt; &lt;code&gt;char *&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。あなたは警告が無効になっていなかった、またはあなたがちょうどそれらを無視したのですか？）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ff20b6a5219ae768033783979a87d2390005f2e7" translate="yes" xml:space="preserve">
          <source>In the second case, p is a pointer defined on stack (local scope) and referring a string literal (program data or text) stored else where. Usually modifying such memory is not good practice nor encouraged.</source>
          <target state="translated">2番目のケースでは、pはスタック(ローカルスコープ)上で定義されたポインタであり、別の場所に格納された文字列リテラル(プログラムデータまたはテキスト)を参照しています。通常、このようなメモリを変更することは良い習慣ではありませんし、推奨されません。</target>
        </trans-unit>
        <trans-unit id="1838ffd28fb512b277c85a385ef6b7802941bd8e" translate="yes" xml:space="preserve">
          <source>In the second code, &quot;string&quot; is an array initializer, sort of short hand for</source>
          <target state="translated">2つ目のコードでは、&quot;string &quot;は配列のイニシャライザであり、一種の</target>
        </trans-unit>
        <trans-unit id="c5aa22fba1b64b02c810315d7188a316eef98093" translate="yes" xml:space="preserve">
          <source>In the second example, the string &lt;code&gt;&quot;string&quot;&lt;/code&gt; is &lt;em&gt;copied&lt;/em&gt; by the compiler from its read-only home to the &lt;code&gt;str[]&lt;/code&gt; array. Then changing the first character is permitted. You can check this by printing the address of each:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2番目の例では、文字列&lt;/font&gt;&lt;/font&gt; &lt;code&gt;&quot;string&quot;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、コンパイラによって読み取り専用のホームから&lt;/font&gt; &lt;code&gt;str[]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列に&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コピーさ&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;れ&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;その後、最初の文字の変更が許可されます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これを確認するには、それぞれのアドレスを印刷します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ea00e14bcd6a402dfaf6f0f35e2ce17d7c1d0e5a" translate="yes" xml:space="preserve">
          <source>In the second place, you're creating an array, which is memory that you've got full access to, and initializing it with &lt;code&gt;&quot;string&quot;&lt;/code&gt;.  You're creating a &lt;code&gt;char[7]&lt;/code&gt; (six for the letters, one for the terminating '\0'), and you do whatever you like with it.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2番目の場所では、完全なアクセス権を持つメモリである配列を作成し、それを&lt;/font&gt;&lt;/font&gt; &lt;code&gt;&quot;string&quot;&lt;/code&gt; で&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;初期化してい&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あなたは、作成している&lt;/font&gt;&lt;/font&gt; &lt;code&gt;char[7]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;手紙のための6、終端の「\ 0」の1）を、そしてあなたはそれと同じように何でもを行います。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bff6151bb1c52734e7b864d94be02cc2901c7e76" translate="yes" xml:space="preserve">
          <source>In your first example, you're getting a pointer to that const data.  In your second example, you're initializing an array of 7 characters with a copy of the const data.</source>
          <target state="translated">最初の例では、その const データへのポインタを取得しています。2 番目の例では、const データのコピーで 7 文字の配列を初期化しています。</target>
        </trans-unit>
        <trans-unit id="10fd75efad3719fe3bb4eb8209929e181c321d6b" translate="yes" xml:space="preserve">
          <source>Initialize &lt;code&gt;char[]&lt;/code&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;char[]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;初期化し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="71621f4c0ca35b4b447632316c08b9f646620f62" translate="yes" xml:space="preserve">
          <source>Like any other regular array, &lt;code&gt;c&lt;/code&gt; can be modified.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;他の通常の配列と同様に、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;c&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は変更できます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f0cb45122635efbac7d2998e31e4b524f1c810c9" translate="yes" xml:space="preserve">
          <source>Most of these answers are correct, but just to add a little more clarity...</source>
          <target state="translated">ほとんどの答えは正解ですが、もう少し分かりやすくするために...</target>
        </trans-unit>
        <trans-unit id="ab87e7164433d13846cff22c0a5731378c323d7e" translate="yes" xml:space="preserve">
          <source>My program crashes if I try to assign a new value to &lt;code&gt;p[i]&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私は、新しい値を代入しようとする私のプログラムがクラッシュする&lt;/font&gt;&lt;/font&gt; &lt;code&gt;p[i]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e46d81bdcd2425d26c847ea2d5d64bbe3b1cb583" translate="yes" xml:space="preserve">
          <source>Normally, string literals are stored in read-only memory when the program is run. This is to prevent you from accidentally changing a string constant. In your first example, &lt;code&gt;&quot;string&quot;&lt;/code&gt; is stored in read-only memory and &lt;code&gt;*str&lt;/code&gt; points to the first character. The segfault happens when you try to change the first character to &lt;code&gt;'z'&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;通常、文字列リテラルは、プログラムの実行時に読み取り専用メモリに格納されます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは、文字列定数を誤って変更しないようにするためです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最初の例では、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;&quot;string&quot;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は読み取り専用メモリに格納され、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;*str&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は最初の文字を指し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最初の文字を&lt;/font&gt;&lt;/font&gt; &lt;code&gt;'z'&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に変更しようとすると、セグメンテーション違反が発生します&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7ac69938cb0651b2d6b8ce2d43bf3af47cb99539" translate="yes" xml:space="preserve">
          <source>Note however that the default linker script puts &lt;code&gt;.rodata&lt;/code&gt; and &lt;code&gt;.text&lt;/code&gt; in the same segment, which has execute but no write permission. This can be observed with:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ただし、デフォルトのリンカースクリプトは&lt;/font&gt;&lt;/font&gt; &lt;code&gt;.rodata&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;.text&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を同じセグメントに&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配置することに注意してください&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。これは実行はできますが、書き込み権限はありません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは次のようにして観察できます：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f4e329055872d3c12f2cc484b260a44f643d9971" translate="yes" xml:space="preserve">
          <source>Note the implicit cast from &lt;code&gt;char[]&lt;/code&gt; to &lt;code&gt;char *&lt;/code&gt;, which is always legal.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;char[]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;から&lt;/font&gt;&lt;/font&gt; &lt;code&gt;char *&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;へ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の暗黙のキャストに注意してください&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。これは常に有効です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="86546a25fe2d8c85ef2156d6bfee43929dbe1777" translate="yes" xml:space="preserve">
          <source>Output contains:</source>
          <target state="translated">出力が含まれています。</target>
        </trans-unit>
        <trans-unit id="bc5de071a8adc9ea913c6f9e5f0005a2d40cc14d" translate="yes" xml:space="preserve">
          <source>Pointer</source>
          <target state="translated">Pointer</target>
        </trans-unit>
        <trans-unit id="79e5360bcf55c6212f0b1414e9099c15ef47ee22" translate="yes" xml:space="preserve">
          <source>Program:</source>
          <target state="translated">Program:</target>
        </trans-unit>
        <trans-unit id="26bd51102e586ff70bb0587551dbc67bec7fc0ad" translate="yes" xml:space="preserve">
          <source>See the C FAQ, &lt;a href=&quot;http://c-faq.com/decl/strlitinit.html&quot;&gt;Question 1.32&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C FAQ、&lt;/font&gt;&lt;a href=&quot;http://c-faq.com/decl/strlitinit.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;質問1.32を&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;参照してください&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6b9a3011e9aa306b196ebd07257ac293bbdbd232" translate="yes" xml:space="preserve">
          <source>So &lt;code&gt;str[0]=&lt;/code&gt; is attempting to write to the read-only code of the application.  I would guess this is probably compiler dependent though.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;つまり、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;str[0]=&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、アプリケーションの読み取り専用コードに書き込もうとしています。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これはおそらくコンパイラに依存していると思います。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1332c2aeb09d0c1817fe85b41907f9631446a288" translate="yes" xml:space="preserve">
          <source>So this is just a shortcut for:</source>
          <target state="translated">ということで、これはただの近道です。</target>
        </trans-unit>
        <trans-unit id="b5698d0895816d08e306d72f3fb561310cfca67f" translate="yes" xml:space="preserve">
          <source>So when you write:</source>
          <target state="translated">だから、書くときは</target>
        </trans-unit>
        <trans-unit id="b4f5fa445d8872f4d54fec5b7f0c287426411c5a" translate="yes" xml:space="preserve">
          <source>Some compilers have a switch
  controlling whether string literals
  are writable or not (for compiling old
  code), and some may have options to
  cause string literals to be formally
  treated as arrays of const char (for
  better error catching).</source>
          <target state="translated">コンパイラの中には、文字列リテラルが書き込み可能かどうかを制御するスイッチを持っているものがあります(古いコードをコンパイルするため)。</target>
        </trans-unit>
        <trans-unit id="bcfac5632b1f0c9485944d083e902221ab174657" translate="yes" xml:space="preserve">
          <source>String literals like &quot;string&quot; are probably allocated in your executable's address space as read-only data (give or take your compiler).  When you go to touch it, it freaks out that you're in its bathing suit area and lets you know with a seg fault.</source>
          <target state="translated">文字列 &quot;のような文字列リテラルは、おそらく実行ファイルのアドレス空間に読み取り専用のデータとして確保されています。触ろうとすると、あなたが水着の領域にいることにビビってしまい、セグフォルトで知らせてくれます。</target>
        </trans-unit>
        <trans-unit id="65ee6b0cdf5b4fc22f771b21a56a4d300a3a3bfe" translate="yes" xml:space="preserve">
          <source>Tested with MSVC and GCC.</source>
          <target state="translated">MSVCとGCCでテストしました。</target>
        </trans-unit>
        <trans-unit id="93ef0dd827103681fcee453b78be2ff14e1a261d" translate="yes" xml:space="preserve">
          <source>The</source>
          <target state="translated">The</target>
        </trans-unit>
        <trans-unit id="7f018e4fa7f9467f75ae0f3445107e843a7ea140" translate="yes" xml:space="preserve">
          <source>The &quot;read only memory&quot; that people are referring to is the text segment in ASM terms. It's the same place in memory where the instructions are loaded. This is read-only for obvious reasons like security. When you create a char* initialized to a string, the string data is compiled into the text segment and the program initializes the pointer to point into the text segment. So if you try to change it, kaboom. Segfault.</source>
          <target state="translated">人々が参照している「読み取り専用メモリ」とは、ASM用語ではテキストセグメントのことです。これは、命令がロードされるメモリ内の同じ場所です。これはセキュリティのような明白な理由から、読み取り専用になっています。文字列に初期化されたchar*を作成すると、文字列データはテキストセグメントにコンパイルされ、プログラムはポインタをテキストセグメントに指すように初期化します。だから、それを変更しようとすると、カッブーン。セグフォルト。</target>
        </trans-unit>
        <trans-unit id="db2526ed7b3f0955d3ba159e7158dc450975f890" translate="yes" xml:space="preserve">
          <source>The C FAQ that @matli linked to mentions it, but no one else here has yet, so for clarification: if a string literal (double-quoted string in your source) is used anywhere &lt;em&gt;other than&lt;/em&gt; to initialize a character array (ie: @Mark's second example, which works correctly), that string is stored by the compiler in a special &lt;em&gt;static string table&lt;/em&gt;, which is akin to creating a global static variable (read-only, of course) that is essentially anonymous (has no variable &quot;name&quot;). The &lt;em&gt;read-only&lt;/em&gt; part is the important part, and is why the @Mark's first code example segfaults.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@matliがリンクしたCのFAQには言及されていますが、ここにはまだ誰もいません。そのため、明確にするために&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、文字配列（&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ソースで二重引用符で囲まれた文字列）が&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;文字配列の初期化&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;以外&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用されて&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;いる場合&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（つまり、@ Markの2番目の例は正しく動作します）、その文字列はコンパイラによって特別な&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;静的文字列テーブル&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;格納され&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。これは、本質的に匿名である（変数 &quot;name&quot;を持たない）グローバル静的変数（もちろん読み取り専用）を作成するのと同じです&quot;）。&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;読み取り専用の&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;部分が重要な部分であり、そしてなぜ、@マークの最初のコード例のセグメンテーションフォルトです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="153d6e82c56945ee94a9b46f97146ff737c5a61d" translate="yes" xml:space="preserve">
          <source>The above sets &lt;code&gt;str&lt;/code&gt; to point to the literal value &lt;code&gt;&quot;string&quot;&lt;/code&gt; which is hard-coded in the program's binary image, which is probably flagged as read-only in memory.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;上記は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、プログラムのバイナリイメージにハードコードされ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ているリテラル値&lt;/font&gt; &lt;code&gt;&quot;string&quot;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;を指す&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ように&lt;/font&gt;&lt;/font&gt; &lt;code&gt;str&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;設定し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは、メモリ内で読み取り専用のフラグが立てられている可能性があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b40d2b2f20d0458f25ede06c4f5dd644c7b2ba9f" translate="yes" xml:space="preserve">
          <source>The compiler has enforced this by putting the string in a read-only part of memory, hence writing to it generates a segfault.</source>
          <target state="translated">コンパイラは、文字列をメモリの読み取り専用部分に置くことでこれを強制しています。</target>
        </trans-unit>
        <trans-unit id="af5b4181887adb17c079d2ba90c26ce6b8194e5b" translate="yes" xml:space="preserve">
          <source>The contents of the arrays are modifiable. On the other hand, the declaration</source>
          <target state="translated">配列の内容は変更可能です。一方で、宣言</target>
        </trans-unit>
        <trans-unit id="7eabf5eb08cf7d0aa68f14acaece18add4ee544d" translate="yes" xml:space="preserve">
          <source>The following code receives seg fault on line 2:</source>
          <target state="translated">以下のコードは、2 行目でセグフォルトを受信します。</target>
        </trans-unit>
        <trans-unit id="38b874fa8a4a12a55bfe752327cc1339971672a4" translate="yes" xml:space="preserve">
          <source>The line:</source>
          <target state="translated">ラインです。</target>
        </trans-unit>
        <trans-unit id="51a8d743261763d0c5ba6a3d8400bee365d6b7e1" translate="yes" xml:space="preserve">
          <source>Then if you modify &lt;code&gt;c[0]&lt;/code&gt;, you also modify &lt;code&gt;__unnamed&lt;/code&gt;, which is UB.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;次に、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;c[0]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;変更する&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__unnamed&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、UBである&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;__unnamed&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;も変更されます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="04c2442ba0cb356bca376365107aaf0cde3ee082" translate="yes" xml:space="preserve">
          <source>There are two different uses of character string literals:</source>
          <target state="translated">文字列リテラルには2つの異なる用途があります。</target>
        </trans-unit>
        <trans-unit id="8e34f037d3b8729159339c78ec31107ef278d97a" translate="yes" xml:space="preserve">
          <source>This declaration is identical to</source>
          <target state="translated">この宣言は</target>
        </trans-unit>
        <trans-unit id="f06c9be022ff454489265524b61c1f9972fefa06" translate="yes" xml:space="preserve">
          <source>This is &quot;more magic&quot;, and described at 6.7.8/14 &quot;Initialization&quot;:</source>
          <target state="translated">これは「より多くの魔法」であり、6.7.814「初期化」に記載されています。</target>
        </trans-unit>
        <trans-unit id="33114f84c8b259a7d360bf056480d7a655a4fe82" translate="yes" xml:space="preserve">
          <source>This is documented at 6.4.5 &quot;String literals&quot;:</source>
          <target state="translated">これは6.4.5「文字列リテラル」で説明されています。</target>
        </trans-unit>
        <trans-unit id="21b0b9815b988cab4a0b05332115eaf25e71b859" translate="yes" xml:space="preserve">
          <source>This is similar to:</source>
          <target state="translated">と似ています。</target>
        </trans-unit>
        <trans-unit id="fee34be18f8766afae1debba6298fcb27f068cec" translate="yes" xml:space="preserve">
          <source>To understand this error or problem you should first know difference b/w the pointer and array
  so here firstly i have explain you differences b/w them</source>
          <target state="translated">このエラーや問題を理解するためには、まずポインタと配列の違いを知る必要があります。</target>
        </trans-unit>
        <trans-unit id="a478f8da6e515e2fe6dd6cf28c5c4f51c92040d9" translate="yes" xml:space="preserve">
          <source>When written as an array, the compiler places the initialized string data in the data segment instead, which is the same place that your global variables and such live. This memory is mutable, since there are no instructions in the data segment. This time when the compiler initializes the character array (which is still just a char*) it's pointing into the data segment rather than the text segment, which you can safely alter at run-time.</source>
          <target state="translated">配列として書かれた場合、コンパイラは初期化された文字列データを代わりにデータ・セグメントに配置します。データセグメントには命令がないので、このメモリは変更可能です。このとき、コンパイラが文字配列を初期化するときには、テキスト・セグメントではなくデータ・セグメントを指すようになります。</target>
        </trans-unit>
        <trans-unit id="43057d0685a9d16e1cc0b2587f6e1f0f9008dd5b" translate="yes" xml:space="preserve">
          <source>While this works perfectly well:</source>
          <target state="translated">これが完璧に機能している間は</target>
        </trans-unit>
        <trans-unit id="0ba0bb95ffdcd69d1d7712168e6a876a3d9f0af4" translate="yes" xml:space="preserve">
          <source>Why do I get a segmentation fault when writing to a string initialized with “char *s” but not “char s[]”</source>
          <target state="translated">char *s &quot;で初期化された文字列には &quot;char s[]&quot;ではなく &quot;char *s &quot;で初期化された文字列に書き込むと、セグメンテーションエラーが発生するのはなぜですか?</target>
        </trans-unit>
        <trans-unit id="97dfcf15090fe7931b0df660cee46dcc110c2899" translate="yes" xml:space="preserve">
          <source>Why do I get a segmentation fault when writing to a string?</source>
          <target state="translated">文字列への書き込み時にセグメンテーションエラーが発生するのはなぜですか?</target>
        </trans-unit>
        <trans-unit id="84a6f36914b097f4069d48b0b519d0c189fa5de1" translate="yes" xml:space="preserve">
          <source>allocates a pointer to a string literal, which the compiler is putting in a non-modifiable part of your executable;</source>
          <target state="translated">は文字列リテラルへのポインタを確保します。</target>
        </trans-unit>
        <trans-unit id="4eb2c39a057f022d979f91705d518db79edb0bf8" translate="yes" xml:space="preserve">
          <source>allocates an array of characters and &lt;strong&gt;copies&lt;/strong&gt; the literal string into that array, which is fully writable, so the subsequent update is no problem.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;文字の配列を割り当て、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;リテラル文字列をその配列に&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コピー&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;します。この配列は完全に書き込み可能であるため、その後の更新は問題ありません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f2214b85c01a8d4edbc6eff4ad1019b49b487aa9" translate="yes" xml:space="preserve">
          <source>allocates and initializes a local array which is modifiable</source>
          <target state="translated">変更可能なローカル配列を確保して初期化します。</target>
        </trans-unit>
        <trans-unit id="d5b239ccd2177ae46d581df782b5594c7a0d9837" translate="yes" xml:space="preserve">
          <source>and its value changed to &lt;code&gt;'m'&lt;/code&gt; so strarray value changed to &lt;code&gt;&quot;mello&quot;&lt;/code&gt;;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そしてその値が&lt;/font&gt;&lt;/font&gt; &lt;code&gt;'m'&lt;/code&gt; に&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;変更された&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ため、strarray値は&lt;/font&gt;&lt;/font&gt; &lt;code&gt;&quot;mello&quot;&lt;/code&gt; に&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;変更されました&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d331ecd74f69ad7ca2e044d44238d690431a55f6" translate="yes" xml:space="preserve">
          <source>and ptr is stored in stack section and pointing to constant string &lt;code&gt;&quot;hello&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そしてptrはスタックセクションに保存され、定数文字列&lt;/font&gt; &lt;code&gt;&quot;hello&quot;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;を指します&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="938eeebcc6d366c0b191b2f834fbc620432d9112" translate="yes" xml:space="preserve">
          <source>array of char &lt;a href=&quot;https://stackoverflow.com/questions/2245664/what-is-the-type-of-string-literals-in-c-c&quot;&gt;What is the type of string literals in C and C++?&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;charの配列&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/2245664/what-is-the-type-of-string-literals-in-c-c&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;CおよびC ++の文字列リテラルのタイプは何ですか？&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f64bf1221a6ac522194ae0c7ab90762fb2e7ca99" translate="yes" xml:space="preserve">
          <source>defines &quot;plain&quot; char array objects &lt;code&gt;s&lt;/code&gt; and &lt;code&gt;t&lt;/code&gt; whose elements are initialized with character string literals.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;要素が文字列リテラルで初期化される&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;「プレーン」なchar配列オブジェクト&lt;/font&gt;&lt;/font&gt; &lt;code&gt;s&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;および&lt;/font&gt;&lt;/font&gt; &lt;code&gt;t&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;定義し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f9173e3cc5a32f0d4ae02383bf750ccb501d24de" translate="yes" xml:space="preserve">
          <source>defines &lt;code&gt;p&lt;/code&gt; with type &quot;pointer to char&quot; and initializes it to point to an object with type &quot;array of char&quot; with length 4 whose elements are initialized with a character string literal. If an attempt is made to use &lt;code&gt;p&lt;/code&gt; to modify the contents of the array, the behavior is undefined.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;タイプ &quot;pointer to char&quot;で&lt;/font&gt;&lt;/font&gt; &lt;code&gt;p&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;定義し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、要素を文字列リテラルで初期化する長さ4のタイプ &quot;array of char&quot;のオブジェクトを指すように初期化します。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;p&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;て配列の内容を変更&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;しようとした場合&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の動作は未定義です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="af637eef49d7eacafd71fda4b5594f52ab24f683" translate="yes" xml:space="preserve">
          <source>here pointer ptr is initialized to string &lt;code&gt;&quot;hello&quot;&lt;/code&gt; which is  constant string stored in read only memory (ROM) so &lt;code&gt;&quot;hello&quot;&lt;/code&gt; can not be changed as it is stored in ROM</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここで、ポインターptrは&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、読み取り専用メモリ（ROM）に格納されている定数文字列である&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;文字列&lt;/font&gt;&lt;/font&gt; &lt;code&gt;&quot;hello&quot;&lt;/code&gt; に&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;初期化されます。ROMに&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;格納されているため、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;&quot;hello&quot;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は変更できません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="43d341a6f1c4cea8b8f1e09a5ce91bcfa5b9e857" translate="yes" xml:space="preserve">
          <source>line defines a pointer and points it to a literal string.  The literal string is not writable so when you do:</source>
          <target state="translated">行はポインタを定義し、リテラル文字列を指し示します。リテラル文字列は書き込み可能ではないので、書き込みをすると</target>
        </trans-unit>
        <trans-unit id="ff74309b3859b009b29964a766f21e44f0016a02" translate="yes" xml:space="preserve">
          <source>one point to note here that we can change the content of string array by changing character by character but can not initialized other string directly to it like &lt;code&gt;strarray=&quot;new string&quot;&lt;/code&gt; is invalid</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我々は文字で文字を変更することにより、文字列配列の内容を変更することができますが、同じように直接他の文字列を初期化することができないことをここで注意すべき一点&lt;/font&gt;&lt;/font&gt; &lt;code&gt;strarray=&quot;new string&quot;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;無効です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="215d031429d1b7843b753e6f1d83e313eba91b16" translate="yes" xml:space="preserve">
          <source>segmentation fault is caused when you tyr to access the memory which is non accessible.</source>
          <target state="translated">セグメンテーション障害は、非アクセス可能なメモリにアクセスするときに発生します。</target>
        </trans-unit>
        <trans-unit id="b54d50ef4ba8196181cb1705327251659b50884e" translate="yes" xml:space="preserve">
          <source>so it gets stored in the stack (relative to &lt;code&gt;%rbp&lt;/code&gt;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そのため、スタックに格納されます（&lt;/font&gt;&lt;/font&gt; &lt;code&gt;%rbp&lt;/code&gt; に対して&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="feb09f52e5024b791dd6ebc8ee7d24c1b947d9b6" translate="yes" xml:space="preserve">
          <source>so ptr[0]='m' is invalid since you can not access read only memory</source>
          <target state="translated">読み取り専用メモリにアクセスできないので、ptr[0]=m' は無効です。</target>
        </trans-unit>
        <trans-unit id="e70a97412ee866c25a7972ced744e63de9f7f87a" translate="yes" xml:space="preserve">
          <source>string array</source>
          <target state="translated">文字列配列</target>
        </trans-unit>
        <trans-unit id="d5607fe56fc2010bb7d690790ccafa089c8db902" translate="yes" xml:space="preserve">
          <source>that gives UB if modified</source>
          <target state="translated">これは、変更された場合にUBを与える</target>
        </trans-unit>
        <trans-unit id="867b9a00623e417b4844f0dffcffb808848bad58" translate="yes" xml:space="preserve">
          <source>unnamed</source>
          <target state="translated">unnamed</target>
        </trans-unit>
        <trans-unit id="82b76e320e6a246cb2b9c19bd7c16502ea374dee" translate="yes" xml:space="preserve">
          <source>we obtain:</source>
          <target state="translated">を得ることができます。</target>
        </trans-unit>
        <trans-unit id="cb2a656c582155d38c9effe568399734a250635b" translate="yes" xml:space="preserve">
          <source>whereas &lt;code&gt;char str[]&lt;/code&gt; is an array and can be modifiable..</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一方、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;char str[]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は配列であり、変更可能です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b30fcd4fae496a47d73de21913c424b6de7ef0a5" translate="yes" xml:space="preserve">
          <source>which contains:</source>
          <target state="translated">が含まれています。</target>
        </trans-unit>
        <trans-unit id="6dcfd341c68e6a635162413a9b37b77231e5afb8" translate="yes" xml:space="preserve">
          <source>with static storage</source>
          <target state="translated">静的記憶装置付き</target>
        </trans-unit>
        <trans-unit id="c378582dd3e8fcd41744e8aa9b969d86fc2cbf4a" translate="yes" xml:space="preserve">
          <source>you get a seg fault.  On some platforms, the literal might be in writable memory so you won't see a segfault, but it's invalid code (resulting in undefined behavior) regardless.</source>
          <target state="translated">を実行するとセグメンテーションフォールトが発生します。プラットフォームによっては、リテラルが書き込み可能なメモリ内にある場合があるので、セグメンテーションフォルトは発生しませんが、それは関係なく無効なコードです (結果として未定義の動作になります)。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
