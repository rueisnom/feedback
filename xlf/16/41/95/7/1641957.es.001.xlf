<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/1641957">
    <body>
      <group id="1641957">
        <trans-unit id="a65b63696c33e0257a6a7d898695f32a537f1f5c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a&lt;/code&gt; contains space for seven integers, and you can put a value in one of them with an assignment, like this:</source>
          <target state="translated">&lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; contiene espacio para siete enteros, y puede poner un valor en uno de ellos con una asignaci&amp;oacute;n, como esta:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8af120010556eba3c3b2a7bad71ae9d8d645b402" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;p&lt;/code&gt; doesn't contain any spaces for integers, but it can point to a space for an integer. We can, for example, set it to point to one of the places in the array &lt;code&gt;a&lt;/code&gt;, such as the first one:</source>
          <target state="translated">&lt;code&gt;p&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; no contiene espacios para enteros, pero puede apuntar a un espacio para un entero. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Podemos, por ejemplo, configurarlo para que apunte a uno de los lugares de la matriz &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , como el primero:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0a0e3f2feb92d1b5feba526fda2d2ab318506af4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Edit&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Edit&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="36c71ee593be8556de149c97168c4774739f6dca" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;&lt;li&gt;Which *may* affect how the address value is interpreted - depends on the machine.&lt;/li&gt;&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="3b1981349530961f711b6dde2175785818e28c8e" translate="yes" xml:space="preserve">
          <source>A pointer like this allocates memory for just the pointer &lt;code&gt;p&lt;/code&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Un puntero como este asigna memoria solo para el puntero &lt;/font&gt;&lt;/font&gt; &lt;code&gt;p&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="da1c1c9d22ab49cd630b97c63360a180e96b79e6" translate="yes" xml:space="preserve">
          <source>An array declared like this</source>
          <target state="translated">Un conjunto declarado así</target>
        </trans-unit>
        <trans-unit id="f2d1d4b464535d85f938c9fc1b4cfdac71b16845" translate="yes" xml:space="preserve">
          <source>An array is a collection of secuential and contiguous elements in memory. In C an array's name is the index to the first element, and applying an offset you can access the rest of elements.
An &quot;index to the first element&quot; is indeed a pointer to a memory direction.</source>
          <target state="translated">Una matriz es una colección de elementos secuenciales y contiguos en la memoria.En C el nombre de una matriz es el índice del primer elemento,y aplicando un offset se puede acceder al resto de elementos.Un &quot;índice al primer elemento&quot; es en realidad un puntero a una dirección de memoria.</target>
        </trans-unit>
        <trans-unit id="49216096309a8b134d13a16eff464e7b50905513" translate="yes" xml:space="preserve">
          <source>An array is an array and a pointer is a pointer, but in most cases array names are &lt;em&gt;converted&lt;/em&gt; to pointers. A term often used is that they &lt;em&gt;decay&lt;/em&gt; to pointers.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Una matriz es una matriz y un puntero es un puntero, pero en la mayor&amp;iacute;a de los casos los nombres de matriz se &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;convierten&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en punteros. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Un t&amp;eacute;rmino usado a menudo es que se &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;descomponen&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en punteros.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cb191b43cbfa05cc8f4b650113cdbb910d1d8f8e" translate="yes" xml:space="preserve">
          <source>And other nifty stuff you can do to pointer (e.g. adding/substracting an offset), you can also do to an array:</source>
          <target state="translated">Y otras cosas ingeniosas que puedes hacer al puntero (por ejemplo,sumar y restar un desplazamiento),también puedes hacerlas a una matriz:</target>
        </trans-unit>
        <trans-unit id="4acf022bcade8c95cfb9c03697ff65b8d99428f5" translate="yes" xml:space="preserve">
          <source>Answering the question in the comment:</source>
          <target state="translated">Respondiendo a la pregunta del comentario:</target>
        </trans-unit>
        <trans-unit id="27a6c0b546c4d3c425a0ab9158f3517403572a6f" translate="yes" xml:space="preserve">
          <source>Array name is the address of 1st element of an array. So yes array name is a const pointer.</source>
          <target state="translated">El nombre de la matriz es la dirección del primer elemento de una matriz.Así que sí,el nombre de la matriz es un puntero constante.</target>
        </trans-unit>
        <trans-unit id="f74a5048a36b59f77a0535c2113470eb8139cba4" translate="yes" xml:space="preserve">
          <source>Both the print statements will give exactly same output for a machine. In my system it gave:</source>
          <target state="translated">Ambas declaraciones impresas darán exactamente la misma salida para una máquina.En mi sistema dio:</target>
        </trans-unit>
        <trans-unit id="3e980bf5df5a6b0791e7999f54355eb789d75f96" translate="yes" xml:space="preserve">
          <source>C was derived from an earlier language called B, and in B &lt;code&gt;a&lt;/code&gt;&lt;em&gt;was&lt;/em&gt; a separate pointer object from the array elements &lt;code&gt;a[0]&lt;/code&gt;, &lt;code&gt;a[1]&lt;/code&gt;, etc.  Ritchie wanted to keep B's array semantics, but he didn't want to mess with storing the separate pointer object.  So he got rid of it.  Instead, the compiler will convert array expressions to pointer expressions during translation as necessary.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C se deriv&amp;oacute; de un lenguaje anterior llamado B, y en B &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a&lt;/code&gt; &lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;era&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; un objeto puntero separado de los elementos de la matriz &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a[0]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a[1]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , etc. Ritchie quer&amp;iacute;a mantener la sem&amp;aacute;ntica de la matriz de B, pero no quer&amp;iacute;a meterse con el almacenamiento del objeto puntero separado. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Entonces se deshizo de &amp;eacute;l. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En cambio, el compilador convertir&amp;aacute; expresiones de matriz en expresiones de puntero durante la traducci&amp;oacute;n, seg&amp;uacute;n sea necesario.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="785394bb3c2dd7a2e69abfa10c8f6b5f9a143f13" translate="yes" xml:space="preserve">
          <source>C++ refuses any such attempts with errors in compile-time.</source>
          <target state="translated">C++rechaza cualquier intento de este tipo con errores en tiempo de compilación.</target>
        </trans-unit>
        <trans-unit id="2c79c2f8fe6cef139b77391f6699a0512a187188" translate="yes" xml:space="preserve">
          <source>Edit:</source>
          <target state="translated">Edit:</target>
        </trans-unit>
        <trans-unit id="dc832d2b81bf05bf8b249d7318841b3f1d696256" translate="yes" xml:space="preserve">
          <source>Even though &lt;code&gt;c&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt; &quot;point&quot; to the same memory, you can obtain address of the &lt;code&gt;c&lt;/code&gt; pointer, but you cannot obtain the address of the &lt;code&gt;a&lt;/code&gt; pointer.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;A pesar de que &lt;/font&gt;&lt;/font&gt; &lt;code&gt;c&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &quot;punto&quot; a la misma memoria, se puede obtener la direcci&amp;oacute;n de la &lt;/font&gt;&lt;/font&gt; &lt;code&gt;c&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; puntero, pero no se puede obtener la direcci&amp;oacute;n del &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; puntero.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ff4533c11ca4835b8de0c93a3bff2a5c686d812b" translate="yes" xml:space="preserve">
          <source>For this to work with a normal array, such as our &lt;code&gt;a&lt;/code&gt;, the name &lt;code&gt;a&lt;/code&gt; in &lt;code&gt;a[3]&lt;/code&gt; must first be converted to a pointer (to the first element in &lt;code&gt;a&lt;/code&gt;). Then we step 3 elements forward, and take whatever is there. In other words: take the element at position 3 in the array. (Which is the fourth element in the array, since the first one is numbered 0.)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para que esto funcione con una matriz normal, como nuestra &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , el nombre &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a[3]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; debe convertirse primero en un puntero (en el primer elemento en &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ). Luego avanzamos 3 elementos hacia adelante y tomamos lo que est&amp;aacute; all&amp;iacute;. En otras palabras: tome el elemento en la posici&amp;oacute;n 3 de la matriz. (Cu&amp;aacute;l es el cuarto elemento en la matriz, ya que el primero est&amp;aacute; numerado 0.)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="04d0043ae1c3750d8c0596233e2b3a656c8cc9dc" translate="yes" xml:space="preserve">
          <source>Here is a pointer:</source>
          <target state="translated">Aquí hay un puntero:</target>
        </trans-unit>
        <trans-unit id="4f58e12c03f35b97de868fb6ccbc823b9cf25d84" translate="yes" xml:space="preserve">
          <source>Here is an array:</source>
          <target state="translated">Aquí hay una matriz:</target>
        </trans-unit>
        <trans-unit id="26fdb55537479116b8bb70c902712035182e615d" translate="yes" xml:space="preserve">
          <source>I think this example sheds some light on the issue:</source>
          <target state="translated">Creo que este ejemplo arroja algo de luz sobre el tema:</target>
        </trans-unit>
        <trans-unit id="e52fdc0c02ae77c45834fad2bc8b942e05d4df6c" translate="yes" xml:space="preserve">
          <source>If I use sizeof, do i count the size of only the elements of the array? Then the array &amp;ldquo;head&amp;rdquo; also takes up space with the information about length and a pointer (and this means that it takes more space, than a normal pointer would)?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si uso sizeof, &amp;iquest;cuento solo el tama&amp;ntilde;o de los elementos de la matriz? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Entonces, la &quot;cabeza&quot; de la matriz tambi&amp;eacute;n ocupa espacio con la informaci&amp;oacute;n sobre la longitud y un puntero (y esto significa que ocupa m&amp;aacute;s espacio que un puntero normal).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="43bba69b9ac50d749365e68162dec25883d49421" translate="yes" xml:space="preserve">
          <source>If an expression of array type (such as the array name) appears in a larger expression and it isn't the operand of either the &lt;code&gt;&amp;amp;&lt;/code&gt; or &lt;code&gt;sizeof&lt;/code&gt; operators, then the type of the array expression is converted from &quot;N-element array of T&quot; to &quot;pointer to T&quot;, and the value of the expression is the address of the first element in the array.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si una expresi&amp;oacute;n de tipo de matriz (como el nombre de la matriz) aparece en una expresi&amp;oacute;n m&amp;aacute;s grande y no es el operando de los &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;operadores &lt;/font&gt;&lt;/font&gt; &lt;code&gt;&amp;amp;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; o &lt;/font&gt;&lt;/font&gt; &lt;code&gt;sizeof&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , entonces el tipo de la expresi&amp;oacute;n de matriz se convierte de &quot;matriz de elementos N de T &quot;a&quot; puntero a T &quot;, y el valor de la expresi&amp;oacute;n es la direcci&amp;oacute;n del primer elemento de la matriz.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ba70f7455ba6c29acbc8157772437ec33ae3725d" translate="yes" xml:space="preserve">
          <source>In short, the array name is not a pointer, but in most contexts it is treated &lt;em&gt;as though&lt;/em&gt; it were a pointer.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En resumen, el nombre de la matriz no es un puntero, pero en la mayor&amp;iacute;a de los contextos se trata &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;como si&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; fuera un puntero.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="82d89c2db0d03b410e54277f35b6ed4060a4a4c1" translate="yes" xml:space="preserve">
          <source>Is an array name a pointer</source>
          <target state="translated">¿Es un nombre de matriz un puntero</target>
        </trans-unit>
        <trans-unit id="91ff9a612f00efc43ff0f917fc5e022bc26f334b" translate="yes" xml:space="preserve">
          <source>Is an array's name a pointer in C?
If not, what is the difference between an array's name and a pointer variable?</source>
          <target state="translated">¿El nombre de una matriz es un puntero en la C? Si no,¿cuál es la diferencia entre el nombre de una matriz y una variable de puntero?</target>
        </trans-unit>
        <trans-unit id="f3589d6cb1b7dd7cd7a26de719cc0c00d35826d4" translate="yes" xml:space="preserve">
          <source>It compiles fine (with 2 warnings) in gcc 4.9.2, and prints the following:</source>
          <target state="translated">Compila bien (con 2 advertencias)en gcc 4.9.2,e imprime lo siguiente:</target>
        </trans-unit>
        <trans-unit id="cecbc4d4228ef8dc9341b6c96bc5124fd89d0558" translate="yes" xml:space="preserve">
          <source>It doesn't allocate any &lt;code&gt;int&lt;/code&gt;s. You can modify it:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;No asigna ning&amp;uacute;n &lt;/font&gt;&lt;/font&gt; &lt;code&gt;int&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; s. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Puedes modificarlo:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="16e33fca2cdd522181cf0b7ca8357efed7b62cd6" translate="yes" xml:space="preserve">
          <source>Language-wise, if C didn't expose the array as just &lt;strong&gt;some sort of &quot;pointer&quot;&lt;/strong&gt;(pedantically it's just a memory location. It cannot point to arbitrary location in memory, nor can be controlled by the programmer). We always need to code this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En cuanto al lenguaje, si C no expone la matriz como &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;una especie de &quot;puntero&quot;&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (pedag&amp;oacute;gicamente es solo una ubicaci&amp;oacute;n de memoria. No puede apuntar a una ubicaci&amp;oacute;n arbitraria en la memoria, ni puede ser controlada por el programador). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Siempre necesitamos codificar esto:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b31097b34416d6851880556b2b66e2b1ec0639d1" translate="yes" xml:space="preserve">
          <source>Now you can use &lt;code&gt;p&lt;/code&gt; in a similar way to an array:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ahora puede usar &lt;/font&gt;&lt;/font&gt; &lt;code&gt;p&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; de manera similar a una matriz:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="23ea9fbffbc95378d5bdc4a84ac145cf46be1d5e" translate="yes" xml:space="preserve">
          <source>Remember that I said arrays don't store any metadata about their size.  As soon as that array expression &quot;decays&quot; to a pointer, all you have is a pointer to a single element.  That element may be the first of a sequence of elements, or it may be a single object.  There's no way to know based on the pointer itself.</source>
          <target state="translated">Recuerda que dije que los arreglos no almacenan ningún metadato sobre su tamaño.En cuanto la expresión de la matriz &quot;decae&quot; en un puntero,todo lo que tienes es un puntero a un solo elemento.Ese elemento puede ser el primero de una secuencia de elementos,o puede ser un solo objeto.No hay forma de saberlo basándose en el puntero en sí mismo.</target>
        </trans-unit>
        <trans-unit id="d0197e59f6275d6a2efafeb51fd00878e52c3b85" translate="yes" xml:space="preserve">
          <source>So the answer is kinda 'yes'.</source>
          <target state="translated">Así que la respuesta es un poco &quot;sí&quot;.</target>
        </trans-unit>
        <trans-unit id="a97d455d32e853de61af180cec9ac7cd1fdea184" translate="yes" xml:space="preserve">
          <source>So, in summary, array names in a C program are (in most cases) converted to pointers. One exception is when we use the &lt;code&gt;sizeof&lt;/code&gt; operator on an array. If &lt;code&gt;a&lt;/code&gt; was converted to a pointer in this context, &lt;code&gt;sizeof a&lt;/code&gt; would give the size of a pointer and not of the actual array, which would be rather useless, so in that case &lt;code&gt;a&lt;/code&gt; means the array itself.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Entonces, en resumen, los nombres de matriz en un programa C se convierten (en la mayor&amp;iacute;a de los casos) en punteros. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Una excepci&amp;oacute;n es cuando usamos el &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;operador &lt;/font&gt;&lt;/font&gt; &lt;code&gt;sizeof&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en una matriz. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; se convirtiera en un puntero en este contexto, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;sizeof a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; dar&amp;iacute;a el tama&amp;ntilde;o de un puntero y no de la matriz real, lo que ser&amp;iacute;a bastante in&amp;uacute;til, por lo que en ese caso &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; significa la matriz misma.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3289ed5abacd7b3f3180f45fb3dd0700fbc360e8" translate="yes" xml:space="preserve">
          <source>So, the conclusion is no, the array is not a pointer, it is not stored in memory (not even read-only one) as a pointer, even though it looks like it is, since you can obtain its address with the &amp;amp; operator. But - oops - that operator does not work :-)), either way, you've been warned:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Entonces, la conclusi&amp;oacute;n es no, la matriz no es un puntero, no est&amp;aacute; almacenada en la memoria (ni siquiera de solo lectura) como un puntero, aunque parezca que es, ya que puede obtener su direcci&amp;oacute;n con el operador &amp;amp; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Pero, vaya, ese operador no funciona :-)), de cualquier manera, te han advertido:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f9ca93754d462229b1356c3197d92508ff9c9fc7" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;expression&lt;/em&gt;&lt;code&gt;a&lt;/code&gt; refers to the entire array, but there's no &lt;em&gt;object&lt;/em&gt;&lt;code&gt;a&lt;/code&gt; separate from the array elements themselves.  Thus, &lt;code&gt;sizeof a&lt;/code&gt; gives you the size (in bytes) of the entire array.  The expression &lt;code&gt;&amp;amp;a&lt;/code&gt; gives you the address of the array, &lt;em&gt;which is the same as the address of the first element&lt;/em&gt;.  The difference between &lt;code&gt;&amp;amp;a&lt;/code&gt; and &lt;code&gt;&amp;amp;a[0]&lt;/code&gt; is the type of the result&lt;sup&gt;1&lt;/sup&gt; - &lt;code&gt;char (*)[10]&lt;/code&gt; in the first case and &lt;code&gt;char *&lt;/code&gt; in the second.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;expresi&amp;oacute;n &lt;/font&gt;&lt;/font&gt;&lt;/em&gt; &lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; se refiere a toda la matriz, pero no hay &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;objeto &lt;/font&gt;&lt;/font&gt;&lt;/em&gt; &lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; separado de los elementos de la matriz en s&amp;iacute;. Por lo tanto, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;sizeof a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; le da el tama&amp;ntilde;o (en bytes) de toda la matriz. La expresi&amp;oacute;n &lt;/font&gt;&lt;/font&gt; &lt;code&gt;&amp;amp;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; le da la direcci&amp;oacute;n de la matriz, &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;que es la misma que la direcci&amp;oacute;n del primer elemento&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . La diferencia entre &lt;/font&gt;&lt;/font&gt; &lt;code&gt;&amp;amp;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;&amp;amp;a[0]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es el tipo del resultado &lt;/font&gt;&lt;/font&gt;&lt;sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;1&lt;/font&gt;&lt;/font&gt;&lt;/sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; - &lt;/font&gt;&lt;/font&gt; &lt;code&gt;char (*)[10]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en el primer caso y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;char *&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en el segundo.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0d28329fda7a89d1cc1685169ae04c78242090a3" translate="yes" xml:space="preserve">
          <source>The array name behaves like a pointer and points to the first element of the array. Example:</source>
          <target state="translated">El nombre de la matriz se comporta como un puntero y apunta al primer elemento de la matriz.Ejemplo:</target>
        </trans-unit>
        <trans-unit id="98874795f3a895dfe9b213af066d8f4073e1fff5" translate="yes" xml:space="preserve">
          <source>The array name by itself yields a memory location, so you can treat the array name like a pointer:</source>
          <target state="translated">El nombre de la matriz por sí mismo produce una ubicación de memoria,así que puedes tratar el nombre de la matriz como un puntero:</target>
        </trans-unit>
        <trans-unit id="0dcc422ff08a279a1e2d5cef7e653f8170067200" translate="yes" xml:space="preserve">
          <source>The difference with pointer variables is that you cannot change the location the array's name is pointing to, so is similar to a const pointer (it's similar, not the same. See Mark's comment). But also that you don't need to dereference the array name to get the value if you use pointer aritmetic:</source>
          <target state="translated">La diferencia con las variables de los punteros es que no se puede cambiar la ubicación a la que apunta el nombre de la matriz,por lo que es similar a un puntero de la const (es similar,no es lo mismo.Ver el comentario de Mark).Pero también que no es necesario derivar el nombre de la matriz para obtener el valor si se usa la aritmética del puntero:</target>
        </trans-unit>
        <trans-unit id="a9db9c418a7e3247f03dea45dae15f851902b4e2" translate="yes" xml:space="preserve">
          <source>The problem is that &lt;code&gt;a&lt;/code&gt; isn't a pointer or an address - it's the entire array object.  Thus, the rule in C that whenever the compiler sees an expression of array type (such as &lt;code&gt;a&lt;/code&gt;, which has type &lt;code&gt;char [10]&lt;/code&gt;) &lt;em&gt;and&lt;/em&gt; that expression isn't the operand of the &lt;code&gt;sizeof&lt;/code&gt; or unary &lt;code&gt;&amp;amp;&lt;/code&gt; operators, the type of that expression is converted (&quot;decays&quot;) to a pointer type (&lt;code&gt;char *&lt;/code&gt;), and the value of the expression is the address of the first element of the array.  Therefore, the &lt;em&gt;expression&lt;/em&gt;&lt;code&gt;a&lt;/code&gt; has the same type and value as the expression &lt;code&gt;&amp;amp;a[0]&lt;/code&gt; (and by extension, the expression &lt;code&gt;*a&lt;/code&gt; has the same type and value as the expression &lt;code&gt;a[0]&lt;/code&gt;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El problema es que &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; no es un puntero o una direcci&amp;oacute;n, es todo el objeto de matriz. Por lo tanto, la regla en C dice que cada vez que el compilador ve una expresi&amp;oacute;n de tipo de matriz (como &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , que tiene el tipo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;char [10]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ) &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;y&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; esa expresi&amp;oacute;n no es el operando de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;sizeof&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; o unary &lt;/font&gt;&lt;/font&gt; &lt;code&gt;&amp;amp;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; operadores, el tipo de esa expresi&amp;oacute;n se convierte (&quot;decae&quot;) en un tipo de puntero ( &lt;/font&gt;&lt;/font&gt; &lt;code&gt;char *&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ), y el valor de la expresi&amp;oacute;n es la direcci&amp;oacute;n del primer elemento de la matriz. Por lo tanto, la &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;expresi&amp;oacute;n &lt;/font&gt;&lt;/font&gt;&lt;/em&gt; &lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tiene el mismo tipo y valor que la expresi&amp;oacute;n &lt;/font&gt;&lt;/font&gt; &lt;code&gt;&amp;amp;a[0]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (y, por extensi&amp;oacute;n, la expresi&amp;oacute;n &lt;/font&gt;&lt;/font&gt; &lt;code&gt;*a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;tiene el mismo tipo y valor que la expresi&amp;oacute;n &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a[0]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6f548972fa36ac45779003bea107dfbb76d2d488" translate="yes" xml:space="preserve">
          <source>The reason that this works is that the array dereferencing operator in C, &lt;code&gt;[ ]&lt;/code&gt;, is defined in terms of pointers. &lt;code&gt;x[y]&lt;/code&gt; means: start with the pointer &lt;code&gt;x&lt;/code&gt;, step &lt;code&gt;y&lt;/code&gt; elements forward after what the pointer points to, and then take whatever is there. Using pointer arithmetic syntax, &lt;code&gt;x[y]&lt;/code&gt; can also be written as &lt;code&gt;*(x+y)&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La raz&amp;oacute;n por la que esto funciona es que el operador de desreferencia de matriz en C, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;[ ]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , se define en t&amp;eacute;rminos de punteros. &lt;/font&gt;&lt;/font&gt; &lt;code&gt;x[y]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; significa: comience con el puntero &lt;/font&gt;&lt;/font&gt; &lt;code&gt;x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , avance los &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;elementos &lt;/font&gt;&lt;/font&gt; &lt;code&gt;y&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; despu&amp;eacute;s de lo que se&amp;ntilde;ala el puntero, y luego tome lo que est&amp;eacute; all&amp;iacute;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Usando la sintaxis aritm&amp;eacute;tica del puntero, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;x[y]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tambi&amp;eacute;n se puede escribir como &lt;/font&gt;&lt;/font&gt; &lt;code&gt;*(x+y)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6f2dcef49a0db01e0a7c12be52a715974b939123" translate="yes" xml:space="preserve">
          <source>This does &lt;em&gt;not&lt;/em&gt; copy the contents of the array &lt;code&gt;a&lt;/code&gt; into the pointer &lt;code&gt;p&lt;/code&gt; (whatever that would mean). Instead, the array name &lt;code&gt;a&lt;/code&gt; is converted to a pointer to its first element. So that assignment does the same as the previous one.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esto &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;no&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; copia el contenido de la matriz &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en el puntero &lt;/font&gt;&lt;/font&gt; &lt;code&gt;p&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (lo que sea que eso signifique). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En cambio, el nombre de matriz &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; se convierte en un puntero a su primer elemento. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Entonces esa asignaci&amp;oacute;n hace lo mismo que la anterior.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="97720397d9de5f7776ab7b47e7a8bfd49701b55a" translate="yes" xml:space="preserve">
          <source>This is what I meant to demonstrate:</source>
          <target state="translated">Esto es lo que quería demostrar:</target>
        </trans-unit>
        <trans-unit id="6cb72e404bfa6e3beb3f71ca01eb21c970c483b3" translate="yes" xml:space="preserve">
          <source>What can be confusing is that you can also write this:</source>
          <target state="translated">Lo que puede ser confuso es que también puedes escribir esto:</target>
        </trans-unit>
        <trans-unit id="80283cb84d242a672f9326e918eb292aa25e03a1" translate="yes" xml:space="preserve">
          <source>When an array is not used as a value its name represents the whole array.</source>
          <target state="translated">Cuando una matriz no se utiliza como valor,su nombre representa la totalidad de la matriz.</target>
        </trans-unit>
        <trans-unit id="e71642da6d1b01725d37461218c15ebb74996fb8" translate="yes" xml:space="preserve">
          <source>When an array is used as a value, its name represents the address of the first element.</source>
          <target state="translated">Cuando se utiliza una matriz como valor,su nombre representa la dirección del primer elemento.</target>
        </trans-unit>
        <trans-unit id="8f799144b5aa153b1336a4c4f5cce1a7ac1be330" translate="yes" xml:space="preserve">
          <source>When you create an array, the only space that's allocated is the space for the elements themselves; no storage is materialized for a separate pointer or any metadata.  Given</source>
          <target state="translated">Cuando se crea una matriz,el único espacio que se asigna es el espacio para los elementos mismos;no se materializa ningún almacenamiento para un puntero separado o cualquier metadato.Dado</target>
        </trans-unit>
        <trans-unit id="433ebd018ce79b88da18999315449f05dc8d71b1" translate="yes" xml:space="preserve">
          <source>When you pass an array expression to a function, all the function receives is a pointer to the first element - it has no idea how big the array is (this is why the &lt;code&gt;gets&lt;/code&gt; function was such a menace and was eventually removed from the library).  For the function to know how many elements the array has, you must either use a sentinel value (such as the 0 terminator in C strings) or you must pass the number of elements as a separate parameter.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cuando pasa una expresi&amp;oacute;n de matriz a una funci&amp;oacute;n, toda la funci&amp;oacute;n recibe un puntero al primer elemento; no tiene idea de cu&amp;aacute;n grande es la matriz (es por eso que la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;funci&amp;oacute;n &lt;/font&gt;&lt;/font&gt; &lt;code&gt;gets&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; fue una amenaza y finalmente se elimin&amp;oacute; de la biblioteca) . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para que la funci&amp;oacute;n sepa cu&amp;aacute;ntos elementos tiene la matriz, debe usar un valor centinela (como el terminador 0 en cadenas C) o debe pasar el n&amp;uacute;mero de elementos como un par&amp;aacute;metro separado.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="444cd2ba614efe0a40a0f07d2e8b928989698ac1" translate="yes" xml:space="preserve">
          <source>Where things get weird is when you want to access individual elements - the expression &lt;code&gt;a[i]&lt;/code&gt; is defined as the result of &lt;code&gt;*(a + i)&lt;/code&gt; - given an address value &lt;code&gt;a&lt;/code&gt;, offset &lt;code&gt;i&lt;/code&gt; elements (&lt;em&gt;not bytes&lt;/em&gt;) from that address and dereference the result.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Donde las cosas se ponen raras es cuando desea acceder a elementos individuales: la expresi&amp;oacute;n &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a[i]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; se define como el resultado de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;*(a + i)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , dado un valor de direcci&amp;oacute;n &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;elementos de &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;desplazamiento &lt;/font&gt;&lt;/font&gt; &lt;code&gt;i&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ( &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;no bytes&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ) de esa direcci&amp;oacute;n y desreferencia el resultado.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ce975dab7db08d876a488028d14f674ddd0355a7" translate="yes" xml:space="preserve">
          <source>allocates memory for 10 &lt;code&gt;int&lt;/code&gt;s. You can't modify &lt;code&gt;a&lt;/code&gt; but you can do pointer arithmetic with &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;asigna memoria para 10 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;int&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; s. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;No puede modificar &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; pero puede hacer aritm&amp;eacute;tica de puntero con &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b8183efb0be6881053c90b57f32320ef2303983c" translate="yes" xml:space="preserve">
          <source>and use array subscripts as you can with a:</source>
          <target state="translated">y usar los subíndices de la matriz como se puede con un:</target>
        </trans-unit>
        <trans-unit id="bd65de0a4b51328a21a99edd332b685d63966d06" translate="yes" xml:space="preserve">
          <source>oops :-)</source>
          <target state="translated">oops :-)</target>
        </trans-unit>
        <trans-unit id="c4fcaf9177247fe669b7a709778a547acbac41d5" translate="yes" xml:space="preserve">
          <source>what you get in memory is</source>
          <target state="translated">lo que obtienes en la memoria es</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
