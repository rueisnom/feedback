<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/1641957">
    <body>
      <group id="1641957">
        <trans-unit id="a65b63696c33e0257a6a7d898695f32a537f1f5c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a&lt;/code&gt; contains space for seven integers, and you can put a value in one of them with an assignment, like this:</source>
          <target state="translated">&lt;code&gt;a&lt;/code&gt; に&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は7つの整数用のスペースがあり、次のように、割り当てを使用してそれらの1つに値を配置できます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8af120010556eba3c3b2a7bad71ae9d8d645b402" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;p&lt;/code&gt; doesn't contain any spaces for integers, but it can point to a space for an integer. We can, for example, set it to point to one of the places in the array &lt;code&gt;a&lt;/code&gt;, such as the first one:</source>
          <target state="translated">&lt;code&gt;p&lt;/code&gt; に&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は整数用のスペースは含まれていませんが、整数用のスペースを指すことができます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;たとえば、配列&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の最初&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の場所など、いずれかの場所を指すように設定できます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0a0e3f2feb92d1b5feba526fda2d2ab318506af4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Edit&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Edit&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="36c71ee593be8556de149c97168c4774739f6dca" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;&lt;li&gt;Which *may* affect how the address value is interpreted - depends on the machine.&lt;/li&gt;&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="3b1981349530961f711b6dde2175785818e28c8e" translate="yes" xml:space="preserve">
          <source>A pointer like this allocates memory for just the pointer &lt;code&gt;p&lt;/code&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このようなポインターは、ポインター&lt;/font&gt;&lt;/font&gt; &lt;code&gt;p&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;だけにメモリを割り当てます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="da1c1c9d22ab49cd630b97c63360a180e96b79e6" translate="yes" xml:space="preserve">
          <source>An array declared like this</source>
          <target state="translated">このように宣言された配列</target>
        </trans-unit>
        <trans-unit id="f2d1d4b464535d85f938c9fc1b4cfdac71b16845" translate="yes" xml:space="preserve">
          <source>An array is a collection of secuential and contiguous elements in memory. In C an array's name is the index to the first element, and applying an offset you can access the rest of elements.
An &quot;index to the first element&quot; is indeed a pointer to a memory direction.</source>
          <target state="translated">配列とは、メモリ内の連続した要素の集合体です。C言語では、配列の名前は最初の要素へのインデックスであり、オフセットを適用することで残りの要素にアクセスすることができます。最初の要素へのインデックス」は,確かにメモリの方向へのポインタです.</target>
        </trans-unit>
        <trans-unit id="49216096309a8b134d13a16eff464e7b50905513" translate="yes" xml:space="preserve">
          <source>An array is an array and a pointer is a pointer, but in most cases array names are &lt;em&gt;converted&lt;/em&gt; to pointers. A term often used is that they &lt;em&gt;decay&lt;/em&gt; to pointers.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列は配列であり、ポインターはポインターですが、ほとんどの場合、配列名は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ポインターに&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;変換さ&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;れます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;よく使われる用語は、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ポインタ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;腐敗&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;することです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cb191b43cbfa05cc8f4b650113cdbb910d1d8f8e" translate="yes" xml:space="preserve">
          <source>And other nifty stuff you can do to pointer (e.g. adding/substracting an offset), you can also do to an array:</source>
          <target state="translated">また、ポインタにできる他の粋なこと(例えば、オフセットの追加や抽象化など)は、配列にもできます。</target>
        </trans-unit>
        <trans-unit id="4acf022bcade8c95cfb9c03697ff65b8d99428f5" translate="yes" xml:space="preserve">
          <source>Answering the question in the comment:</source>
          <target state="translated">コメントでの質問への回答。</target>
        </trans-unit>
        <trans-unit id="27a6c0b546c4d3c425a0ab9158f3517403572a6f" translate="yes" xml:space="preserve">
          <source>Array name is the address of 1st element of an array. So yes array name is a const pointer.</source>
          <target state="translated">配列名は配列の1番目の要素のアドレスです。つまり、配列名は const ポインタです。</target>
        </trans-unit>
        <trans-unit id="f74a5048a36b59f77a0535c2113470eb8139cba4" translate="yes" xml:space="preserve">
          <source>Both the print statements will give exactly same output for a machine. In my system it gave:</source>
          <target state="translated">どちらのprint文もマシンに対して全く同じ出力を与えます。私のシステムでは、それは与えました。</target>
        </trans-unit>
        <trans-unit id="3e980bf5df5a6b0791e7999f54355eb789d75f96" translate="yes" xml:space="preserve">
          <source>C was derived from an earlier language called B, and in B &lt;code&gt;a&lt;/code&gt;&lt;em&gt;was&lt;/em&gt; a separate pointer object from the array elements &lt;code&gt;a[0]&lt;/code&gt;, &lt;code&gt;a[1]&lt;/code&gt;, etc.  Ritchie wanted to keep B's array semantics, but he didn't want to mess with storing the separate pointer object.  So he got rid of it.  Instead, the compiler will convert array expressions to pointer expressions during translation as necessary.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;CはBと呼ばれ、以前の言語に由来し、Bにして&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;いた&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列要素から別のポインタオブジェクト&lt;/font&gt; &lt;code&gt;a[0]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt; &lt;code&gt;a[1]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;などリッチーは、Bの配列のセマンティクスを維持したいが、彼はしたくありませんでした個別のポインタオブジェクトを保存するのはごちゃごちゃです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それで彼はそれを取り除きました。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;代わりに、コンパイラーは必要に応じて、変換中に配列式をポインター式に変換します。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a&lt;/code&gt; &lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="785394bb3c2dd7a2e69abfa10c8f6b5f9a143f13" translate="yes" xml:space="preserve">
          <source>C++ refuses any such attempts with errors in compile-time.</source>
          <target state="translated">C++では、コンパイル時にエラーが発生した場合、そのような試みは拒否されます。</target>
        </trans-unit>
        <trans-unit id="2c79c2f8fe6cef139b77391f6699a0512a187188" translate="yes" xml:space="preserve">
          <source>Edit:</source>
          <target state="translated">Edit:</target>
        </trans-unit>
        <trans-unit id="dc832d2b81bf05bf8b249d7318841b3f1d696256" translate="yes" xml:space="preserve">
          <source>Even though &lt;code&gt;c&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt; &quot;point&quot; to the same memory, you can obtain address of the &lt;code&gt;c&lt;/code&gt; pointer, but you cannot obtain the address of the &lt;code&gt;a&lt;/code&gt; pointer.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;にもかかわらず、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;c&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;同じメモリへの「ポイント」、あなたはのアドレス取得することができ&lt;/font&gt; &lt;code&gt;c&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;ポインタを、しかし、あなたはのアドレス取得することはできません&lt;/font&gt; &lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;ポインタを。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ff4533c11ca4835b8de0c93a3bff2a5c686d812b" translate="yes" xml:space="preserve">
          <source>For this to work with a normal array, such as our &lt;code&gt;a&lt;/code&gt;, the name &lt;code&gt;a&lt;/code&gt; in &lt;code&gt;a[3]&lt;/code&gt; must first be converted to a pointer (to the first element in &lt;code&gt;a&lt;/code&gt;). Then we step 3 elements forward, and take whatever is there. In other words: take the element at position 3 in the array. (Which is the fourth element in the array, since the first one is numbered 0.)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これをaなどの通常の配列で機能させるに&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、まず&lt;/font&gt; &lt;code&gt;a[3]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;名前&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を（&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;a&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の最初の要素へ&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ポインターに変換する必要があり&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。次に、3つの要素を前に進め、そこにあるものをすべて取ります。つまり、配列の3番目の要素を取得します。 （最初の要素には0と番号が付けられているため、これは配列の4番目の要素です。）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="04d0043ae1c3750d8c0596233e2b3a656c8cc9dc" translate="yes" xml:space="preserve">
          <source>Here is a pointer:</source>
          <target state="translated">ここにポインターがあります。</target>
        </trans-unit>
        <trans-unit id="4f58e12c03f35b97de868fb6ccbc823b9cf25d84" translate="yes" xml:space="preserve">
          <source>Here is an array:</source>
          <target state="translated">ここに配列があります。</target>
        </trans-unit>
        <trans-unit id="26fdb55537479116b8bb70c902712035182e615d" translate="yes" xml:space="preserve">
          <source>I think this example sheds some light on the issue:</source>
          <target state="translated">この例は、この問題に光を当てていると思います。</target>
        </trans-unit>
        <trans-unit id="e52fdc0c02ae77c45834fad2bc8b942e05d4df6c" translate="yes" xml:space="preserve">
          <source>If I use sizeof, do i count the size of only the elements of the array? Then the array &amp;ldquo;head&amp;rdquo; also takes up space with the information about length and a pointer (and this means that it takes more space, than a normal pointer would)?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;sizeofを使用する場合、配列の要素のみのサイズをカウントしますか？&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;次に、配列の「ヘッド」も長さとポインタに関する情報を使用して領域を占有します（これは、通常のポインタよりも多くの領域を使用することを意味します）？&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="43bba69b9ac50d749365e68162dec25883d49421" translate="yes" xml:space="preserve">
          <source>If an expression of array type (such as the array name) appears in a larger expression and it isn't the operand of either the &lt;code&gt;&amp;amp;&lt;/code&gt; or &lt;code&gt;sizeof&lt;/code&gt; operators, then the type of the array expression is converted from &quot;N-element array of T&quot; to &quot;pointer to T&quot;, and the value of the expression is the address of the first element in the array.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列型（配列名など）の式がより大きな式に現れ、それが&lt;/font&gt;&lt;/font&gt; &lt;code&gt;&amp;amp;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;または&lt;/font&gt;&lt;/font&gt; &lt;code&gt;sizeof&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;演算子&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;のオペランドではない場合&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、配列式の型は &quot;TのN要素配列から変換されます&quot;to&quot; pointer to T &quot;、および式の値は配列の最初の要素のアドレスです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ba70f7455ba6c29acbc8157772437ec33ae3725d" translate="yes" xml:space="preserve">
          <source>In short, the array name is not a pointer, but in most contexts it is treated &lt;em&gt;as though&lt;/em&gt; it were a pointer.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;要するに、配列名はポインターではありませんが、ほとんどのコンテキストでは&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それはポインターである&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;かの&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ように&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;扱わ&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;れ&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="82d89c2db0d03b410e54277f35b6ed4060a4a4c1" translate="yes" xml:space="preserve">
          <source>Is an array name a pointer</source>
          <target state="translated">配列名はポインタですか?</target>
        </trans-unit>
        <trans-unit id="91ff9a612f00efc43ff0f917fc5e022bc26f334b" translate="yes" xml:space="preserve">
          <source>Is an array's name a pointer in C?
If not, what is the difference between an array's name and a pointer variable?</source>
          <target state="translated">C言語で配列の名前はポインタですか?そうでない場合、配列の名前とポインタ変数の違いは何ですか?</target>
        </trans-unit>
        <trans-unit id="f3589d6cb1b7dd7cd7a26de719cc0c00d35826d4" translate="yes" xml:space="preserve">
          <source>It compiles fine (with 2 warnings) in gcc 4.9.2, and prints the following:</source>
          <target state="translated">gcc 4.9.2では正常にコンパイルされ(2つの警告があります)、以下のように表示されます。</target>
        </trans-unit>
        <trans-unit id="cecbc4d4228ef8dc9341b6c96bc5124fd89d0558" translate="yes" xml:space="preserve">
          <source>It doesn't allocate any &lt;code&gt;int&lt;/code&gt;s. You can modify it:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;int&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は割り当てられません&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あなたはそれを修正することができます：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="16e33fca2cdd522181cf0b7ca8357efed7b62cd6" translate="yes" xml:space="preserve">
          <source>Language-wise, if C didn't expose the array as just &lt;strong&gt;some sort of &quot;pointer&quot;&lt;/strong&gt;(pedantically it's just a memory location. It cannot point to arbitrary location in memory, nor can be controlled by the programmer). We always need to code this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;言語的には、Cが配列を&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ある種の「ポインタ」&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;として公開しなかった場合&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（厳密には、それは単なるメモリの場所です。メモリ内の任意の場所を指すことはできず、プログラマが制御することもできません）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私たちは常にこれをコーディングする必要があります：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b31097b34416d6851880556b2b66e2b1ec0639d1" translate="yes" xml:space="preserve">
          <source>Now you can use &lt;code&gt;p&lt;/code&gt; in a similar way to an array:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これで&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、配列と同じように&lt;/font&gt;&lt;/font&gt; &lt;code&gt;p&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用できます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="23ea9fbffbc95378d5bdc4a84ac145cf46be1d5e" translate="yes" xml:space="preserve">
          <source>Remember that I said arrays don't store any metadata about their size.  As soon as that array expression &quot;decays&quot; to a pointer, all you have is a pointer to a single element.  That element may be the first of a sequence of elements, or it may be a single object.  There's no way to know based on the pointer itself.</source>
          <target state="translated">配列はサイズに関するメタデータを保存しないと言ったことを覚えておいてください。配列式がポインタに &quot;減衰 &quot;するとすぐに、あなたが持っているのは単一の要素へのポインタだけになります。その要素は一連の要素の最初のものかもしれませんし、単一のオブジェクトかもしれません。ポインタ自体に基づいて知る方法はありません。</target>
        </trans-unit>
        <trans-unit id="d0197e59f6275d6a2efafeb51fd00878e52c3b85" translate="yes" xml:space="preserve">
          <source>So the answer is kinda 'yes'.</source>
          <target state="translated">だから、答えは「はい」という感じです。</target>
        </trans-unit>
        <trans-unit id="a97d455d32e853de61af180cec9ac7cd1fdea184" translate="yes" xml:space="preserve">
          <source>So, in summary, array names in a C program are (in most cases) converted to pointers. One exception is when we use the &lt;code&gt;sizeof&lt;/code&gt; operator on an array. If &lt;code&gt;a&lt;/code&gt; was converted to a pointer in this context, &lt;code&gt;sizeof a&lt;/code&gt; would give the size of a pointer and not of the actual array, which would be rather useless, so in that case &lt;code&gt;a&lt;/code&gt; means the array itself.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、要約すると、Cプログラムの配列名は（ほとんどの場合）ポインターに変換されます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;1つの例外は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、配列&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に対して&lt;/font&gt;&lt;/font&gt; &lt;code&gt;sizeof&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;演算子&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用する場合&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;場合は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、この文脈でのポインタに変換し、&lt;/font&gt; &lt;code&gt;sizeof a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;ので、その場合には、かなり役に立たないであろう実際の配列のポインタとしないのサイズを与える&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列自体を意味します。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3289ed5abacd7b3f3180f45fb3dd0700fbc360e8" translate="yes" xml:space="preserve">
          <source>So, the conclusion is no, the array is not a pointer, it is not stored in memory (not even read-only one) as a pointer, even though it looks like it is, since you can obtain its address with the &amp;amp; operator. But - oops - that operator does not work :-)), either way, you've been warned:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、結論はノーです。配列はポインタではなく、メモリに（読み取り専用でさえも）ポインタとしては格納されていません。たとえそのように見えても、＆演算子でアドレスを取得できるためです。 。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;しかし-おっと-その演算子は機能しません:-)）いずれにせよ、あなたは警告されました：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f9ca93754d462229b1356c3197d92508ff9c9fc7" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;expression&lt;/em&gt;&lt;code&gt;a&lt;/code&gt; refers to the entire array, but there's no &lt;em&gt;object&lt;/em&gt;&lt;code&gt;a&lt;/code&gt; separate from the array elements themselves.  Thus, &lt;code&gt;sizeof a&lt;/code&gt; gives you the size (in bytes) of the entire array.  The expression &lt;code&gt;&amp;amp;a&lt;/code&gt; gives you the address of the array, &lt;em&gt;which is the same as the address of the first element&lt;/em&gt;.  The difference between &lt;code&gt;&amp;amp;a&lt;/code&gt; and &lt;code&gt;&amp;amp;a[0]&lt;/code&gt; is the type of the result&lt;sup&gt;1&lt;/sup&gt; - &lt;code&gt;char (*)[10]&lt;/code&gt; in the first case and &lt;code&gt;char *&lt;/code&gt; in the second.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;式&lt;/font&gt;&lt;/font&gt;&lt;/em&gt; &lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列全体を意味するが、全くありません&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;対象&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列要素自体とは別のはしたがって、&lt;/font&gt; &lt;code&gt;sizeof a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;は配列全体のサイズ（バイト単位）を提供します。式&lt;/font&gt; &lt;code&gt;&amp;amp;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、配列のアドレスを提供します。&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは、最初の要素のアドレスと同じ&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。差&lt;/font&gt; &lt;code&gt;&amp;amp;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt; &lt;code&gt;&amp;amp;a[0]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;結果のタイプである&lt;/font&gt;&lt;sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;1&lt;/font&gt;&lt;/sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; - &lt;/font&gt; &lt;code&gt;char (*)[10]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;最初のケースとで&lt;/font&gt; &lt;code&gt;char *&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;秒で。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0d28329fda7a89d1cc1685169ae04c78242090a3" translate="yes" xml:space="preserve">
          <source>The array name behaves like a pointer and points to the first element of the array. Example:</source>
          <target state="translated">配列名はポインタのように振る舞い、配列の最初の要素を指します。例を示します。</target>
        </trans-unit>
        <trans-unit id="98874795f3a895dfe9b213af066d8f4073e1fff5" translate="yes" xml:space="preserve">
          <source>The array name by itself yields a memory location, so you can treat the array name like a pointer:</source>
          <target state="translated">配列名はそれ自体がメモリの位置を返すので、配列名をポインタのように扱うことができます。</target>
        </trans-unit>
        <trans-unit id="0dcc422ff08a279a1e2d5cef7e653f8170067200" translate="yes" xml:space="preserve">
          <source>The difference with pointer variables is that you cannot change the location the array's name is pointing to, so is similar to a const pointer (it's similar, not the same. See Mark's comment). But also that you don't need to dereference the array name to get the value if you use pointer aritmetic:</source>
          <target state="translated">ポインタ変数との違いは、配列の名前が指す場所を変更できないことで、 const ポインタに似ています (似ていますが、同じではありません。 マークのコメントを参照してください)。しかし、ポインタ aritmetic を使えば、配列名を参照して値を取得する必要がないということでもあります。</target>
        </trans-unit>
        <trans-unit id="a9db9c418a7e3247f03dea45dae15f851902b4e2" translate="yes" xml:space="preserve">
          <source>The problem is that &lt;code&gt;a&lt;/code&gt; isn't a pointer or an address - it's the entire array object.  Thus, the rule in C that whenever the compiler sees an expression of array type (such as &lt;code&gt;a&lt;/code&gt;, which has type &lt;code&gt;char [10]&lt;/code&gt;) &lt;em&gt;and&lt;/em&gt; that expression isn't the operand of the &lt;code&gt;sizeof&lt;/code&gt; or unary &lt;code&gt;&amp;amp;&lt;/code&gt; operators, the type of that expression is converted (&quot;decays&quot;) to a pointer type (&lt;code&gt;char *&lt;/code&gt;), and the value of the expression is the address of the first element of the array.  Therefore, the &lt;em&gt;expression&lt;/em&gt;&lt;code&gt;a&lt;/code&gt; has the same type and value as the expression &lt;code&gt;&amp;amp;a[0]&lt;/code&gt; (and by extension, the expression &lt;code&gt;*a&lt;/code&gt; has the same type and value as the expression &lt;code&gt;a[0]&lt;/code&gt;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;問題は、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;がポインタやアドレスではなく、配列オブジェクト全体であることです。したがって、Cにおけるルールがコンパイラは、（例えば、配列型の発現を見ることたび&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;タイプ有する、&lt;/font&gt; &lt;code&gt;char [10]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;）を&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;し、&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;その発現は、オペランドない&lt;/font&gt; &lt;code&gt;sizeof&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;または単項&lt;/font&gt; &lt;code&gt;&amp;amp;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;演算子、その式の型はポインタ型（&lt;/font&gt; &lt;code&gt;char *&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;）に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;変換（「減衰」）され、式&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の値は配列の最初の要素のアドレスになります。したがって、&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;式&lt;/font&gt;&lt;/em&gt; &lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、式&lt;/font&gt; &lt;code&gt;&amp;amp;a[0]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;と同じタイプと値を持ちます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（拡張すると、式&lt;/font&gt; &lt;code&gt;*a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;も同じです）。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;式&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a[0]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と同じタイプと値を持っています&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6f548972fa36ac45779003bea107dfbb76d2d488" translate="yes" xml:space="preserve">
          <source>The reason that this works is that the array dereferencing operator in C, &lt;code&gt;[ ]&lt;/code&gt;, is defined in terms of pointers. &lt;code&gt;x[y]&lt;/code&gt; means: start with the pointer &lt;code&gt;x&lt;/code&gt;, step &lt;code&gt;y&lt;/code&gt; elements forward after what the pointer points to, and then take whatever is there. Using pointer arithmetic syntax, &lt;code&gt;x[y]&lt;/code&gt; can also be written as &lt;code&gt;*(x+y)&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これが機能する理由は、Cの配列逆参照演算子&lt;/font&gt;&lt;/font&gt; &lt;code&gt;[ ]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;がポインターで定義されているためです。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;x[y]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の手段：ポインタで始まる&lt;/font&gt;&lt;/font&gt; &lt;code&gt;x&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、工程&lt;/font&gt;&lt;/font&gt; &lt;code&gt;y&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;前方にどのポインタが後素子、及びそこで何取ります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ポインター算術構文を使用すると、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;x[y]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;/font&gt; &lt;code&gt;*(x+y)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と書くこともでき&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6f2dcef49a0db01e0a7c12be52a715974b939123" translate="yes" xml:space="preserve">
          <source>This does &lt;em&gt;not&lt;/em&gt; copy the contents of the array &lt;code&gt;a&lt;/code&gt; into the pointer &lt;code&gt;p&lt;/code&gt; (whatever that would mean). Instead, the array name &lt;code&gt;a&lt;/code&gt; is converted to a pointer to its first element. So that assignment does the same as the previous one.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、配列&lt;/font&gt; &lt;code&gt;a&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;内容を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ポインター&lt;/font&gt; &lt;code&gt;p&lt;/code&gt; に&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コピー&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;しませ&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ん&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（意味が何であれ）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;代わりに、配列名&lt;/font&gt; &lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;は最初の要素へのポインターに変換されます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そのため、その割り当ては前の割り当てと同じです。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="97720397d9de5f7776ab7b47e7a8bfd49701b55a" translate="yes" xml:space="preserve">
          <source>This is what I meant to demonstrate:</source>
          <target state="translated">これが私がデモをしたかったことです。</target>
        </trans-unit>
        <trans-unit id="6cb72e404bfa6e3beb3f71ca01eb21c970c483b3" translate="yes" xml:space="preserve">
          <source>What can be confusing is that you can also write this:</source>
          <target state="translated">紛らわしいのは、こんなことも書けるということです。</target>
        </trans-unit>
        <trans-unit id="80283cb84d242a672f9326e918eb292aa25e03a1" translate="yes" xml:space="preserve">
          <source>When an array is not used as a value its name represents the whole array.</source>
          <target state="translated">配列を値として使用しない場合は、その名前は配列全体を表します。</target>
        </trans-unit>
        <trans-unit id="e71642da6d1b01725d37461218c15ebb74996fb8" translate="yes" xml:space="preserve">
          <source>When an array is used as a value, its name represents the address of the first element.</source>
          <target state="translated">配列を値として使用する場合、その名前は最初の要素のアドレスを表します。</target>
        </trans-unit>
        <trans-unit id="8f799144b5aa153b1336a4c4f5cce1a7ac1be330" translate="yes" xml:space="preserve">
          <source>When you create an array, the only space that's allocated is the space for the elements themselves; no storage is materialized for a separate pointer or any metadata.  Given</source>
          <target state="translated">配列を作成する際に割り当てられるスペースは、要素そのもののためのスペースのみであり、別のポインタやメタデータのためのストレージは存在しません。配列を作成する際には、要素自体のスペースのみが割り当てられます。</target>
        </trans-unit>
        <trans-unit id="433ebd018ce79b88da18999315449f05dc8d71b1" translate="yes" xml:space="preserve">
          <source>When you pass an array expression to a function, all the function receives is a pointer to the first element - it has no idea how big the array is (this is why the &lt;code&gt;gets&lt;/code&gt; function was such a menace and was eventually removed from the library).  For the function to know how many elements the array has, you must either use a sentinel value (such as the 0 terminator in C strings) or you must pass the number of elements as a separate parameter.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;配列式を関数に渡すと、すべての関数が最初の要素へのポインターを受け取ります-配列の大きさはわかりません（これが、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;gets&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;関数がこのような脅威であり、最終的にライブラリーから削除された&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;理由&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です）。 。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;関数が配列の要素数を知るには、センチネル値（C文字列の0ターミネーターなど）を使用するか、要素数を別のパラメーターとして渡す必要があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="444cd2ba614efe0a40a0f07d2e8b928989698ac1" translate="yes" xml:space="preserve">
          <source>Where things get weird is when you want to access individual elements - the expression &lt;code&gt;a[i]&lt;/code&gt; is defined as the result of &lt;code&gt;*(a + i)&lt;/code&gt; - given an address value &lt;code&gt;a&lt;/code&gt;, offset &lt;code&gt;i&lt;/code&gt; elements (&lt;em&gt;not bytes&lt;/em&gt;) from that address and dereference the result.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;奇妙なのは、個々の要素にアクセスしたいときです-式&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a[i]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;/font&gt; &lt;code&gt;*(a + i)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の結果として定義され&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます-アドレス値&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a&lt;/code&gt; が&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;与えられ、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そのアドレスからの&lt;/font&gt;&lt;/font&gt; &lt;code&gt;i&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;要素（&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;バイトではなく&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）の&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;オフセット&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と逆参照結果。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ce975dab7db08d876a488028d14f674ddd0355a7" translate="yes" xml:space="preserve">
          <source>allocates memory for 10 &lt;code&gt;int&lt;/code&gt;s. You can't modify &lt;code&gt;a&lt;/code&gt; but you can do pointer arithmetic with &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;10 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;int&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;メモリを割り当てます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あなたは、変更することはできません&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が、あなたがポインタ演算を行うことができます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b8183efb0be6881053c90b57f32320ef2303983c" translate="yes" xml:space="preserve">
          <source>and use array subscripts as you can with a:</source>
          <target state="translated">と同様に配列の添え字を使用します。</target>
        </trans-unit>
        <trans-unit id="bd65de0a4b51328a21a99edd332b685d63966d06" translate="yes" xml:space="preserve">
          <source>oops :-)</source>
          <target state="translated">おっと)</target>
        </trans-unit>
        <trans-unit id="c4fcaf9177247fe669b7a709778a547acbac41d5" translate="yes" xml:space="preserve">
          <source>what you get in memory is</source>
          <target state="translated">記憶の中にあるのは</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
