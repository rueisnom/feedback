<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://stackoverflow.com/questions/1628088">
    <body>
      <group id="1628088">
        <trans-unit id="b7c5dd599473b7bd24bbf278876639d88d886c8e" translate="yes" xml:space="preserve">
          <source>* assumes your .git files aren't corrupt</source>
          <target state="translated">*предполагает,что ваши git-файлы не повреждены *</target>
        </trans-unit>
        <trans-unit id="2b80e53a3cbe88a91abd4c1aea24c7d121a3b629" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git clean -d --force&lt;/code&gt;&lt;sub&gt;&lt;sup&gt;Removes untracked files and directories which hinder git to say &amp;ldquo;working directory clean&amp;rdquo;.&lt;/sup&gt;&lt;/sub&gt;</source>
          <target state="translated">&lt;code&gt;git clean -d --force&lt;/code&gt; &lt;sub&gt;&lt;sup&gt;--force Удаляет неотслеживаемые файлы и каталоги, которые мешают git сказать &amp;laquo;очистить рабочий каталог&amp;raquo;.&lt;/sup&gt;&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="5a06f9fea91d79966b1435341d11edca8243c9f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git fetch --prune&lt;/code&gt;&lt;sub&gt;&lt;sup&gt;(optional) Updates the local snapshot of the remote repo. Further commands are local only.&lt;/sup&gt;&lt;/sub&gt;</source>
          <target state="translated">&lt;code&gt;git fetch --prune&lt;/code&gt; &lt;sub&gt;&lt;sup&gt;(необязательно)&lt;/sup&gt;&lt;/sub&gt; Обновляет &lt;sub&gt;&lt;sup&gt;локальный снимок удаленного репо.&lt;/sup&gt;&lt;/sub&gt; &lt;sub&gt;&lt;sup&gt;Дальнейшие команды только локальные.&lt;/sup&gt;&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="ca7d14a2015105f8e76bd9806be5cec9a42c111e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git fetch origin&lt;/code&gt; downloads the latest from remote without trying to merge or rebase anything.</source>
          <target state="translated">&lt;code&gt;git fetch origin&lt;/code&gt; загружает последние с удаленного, не пытаясь объединить или перебазировать что-либо.</target>
        </trans-unit>
        <trans-unit id="a86a9e9ddeb3946c72874be0d7c53e98bbf4c6df" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git reset --hard @{upstream}&lt;/code&gt;&lt;sub&gt;&lt;sup&gt;Puts the local branch pointer to where the snapshot of the remote is, as well as set the index and the working directory to the files of that commit.&lt;/sup&gt;&lt;/sub&gt;</source>
          <target state="translated">&lt;code&gt;git reset --hard @{upstream}&lt;/code&gt; &lt;sub&gt;&lt;sup&gt;Переносит локальный указатель ветки туда, где находится снимок удаленного компьютера, а также устанавливает индекс и рабочий каталог для файлов этого коммита.&lt;/sup&gt;&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="f66d6d1ea03f90db50e2727159826a8c090a1c9e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git reset --hard HEAD&lt;/code&gt; actually only resets to the last committed state. In this case HEAD refers to the HEAD of your branch.</source>
          <target state="translated">&lt;code&gt;git reset --hard HEAD&lt;/code&gt; фактически сбрасывает только до последнего зафиксированного состояния. В этом случае HEAD относится к HEAD вашей ветки.</target>
        </trans-unit>
        <trans-unit id="87b9d88918c5866a66ff7131a43ad669fceb1830" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;How it works:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Как это работает:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dce57b9082e7a1425f18ee70331d2033b230ea48" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The one-stop-answer is:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Единый ответ:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3104ad444d46bf10a4ba85ab26694ef63154971b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The question mixes two issues here:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Вопрос смешивает два вопроса здесь:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="91e47202f9d714a74f39bd1c83e48ec081f2b8a4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning&lt;/strong&gt;: &lt;code&gt;git clean -x -d -f&lt;/code&gt; is &lt;em&gt;irreversible&lt;/em&gt; and you may lose files and data (e.g. things you have ignored using &lt;code&gt;.gitignore&lt;/code&gt;).</source>
          <target state="translated">&lt;strong&gt;Предупреждение&lt;/strong&gt; : &lt;code&gt;git clean -x -d -f&lt;/code&gt; &lt;em&gt;необратима,&lt;/em&gt; и вы можете потерять файлы и данные (например, вещи, которые вы проигнорировали, используя &lt;code&gt;.gitignore&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="1cfd1982343cecfe6ecc8b1adfda0e01ca27d467" translate="yes" xml:space="preserve">
          <source>All of the above suggests are right, but often to &lt;em&gt;really&lt;/em&gt; reset your project, you also need to remove even files that are in your &lt;code&gt;.gitignore&lt;/code&gt;.</source>
          <target state="translated">Все вышеперечисленные предложения &lt;code&gt;.gitignore&lt;/code&gt; , но часто, чтобы &lt;em&gt;действительно&lt;/em&gt; сбросить ваш проект, вам также необходимо удалить даже файлы, которые находятся в вашем .gitignore .</target>
        </trans-unit>
        <trans-unit id="86bda52590b1e52b365b3f4160556578ba1a63a8" translate="yes" xml:space="preserve">
          <source>Also, you go for reset the current branch of &lt;code&gt;origin&lt;/code&gt; to &lt;code&gt;HEAD&lt;/code&gt;.</source>
          <target state="translated">Кроме того, вы идете для сброса текущей ветви &lt;code&gt;origin&lt;/code&gt; в &lt;code&gt;HEAD&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c8316cb5450ca7f337bb3c6698e131ffa516f787" translate="yes" xml:space="preserve">
          <source>As for your specific question as to why those files appear in the status as modified, it looks like perhaps you did a soft reset instead of a hard reset.  This will cause the files that were changed in the &lt;code&gt;HEAD&lt;/code&gt; commit to appear as if they were staged, which is likely what you are seeing here.</source>
          <target state="translated">Что касается вашего конкретного вопроса относительно того, почему эти файлы появляются в статусе как измененные, похоже, что вы сделали программный сброс вместо аппаратного сброса. Это приведет к тому, что файлы, которые были изменены в &lt;code&gt;HEAD&lt;/code&gt; будут выглядеть так, как если бы они были размещены, что, вероятно, то, что вы видите здесь.</target>
        </trans-unit>
        <trans-unit id="6376de0afc8a12bbf623e0a8165838bebd8c5778" translate="yes" xml:space="preserve">
          <source>BTW, this situation that you're in looks an awful lot like a common case where a push has been done into the currently checked out branch of a non-bare repository. Did you recently push into your local repo? If not, then no worries -- something else must have caused these files to unexpectedly end up modified. Otherwise, you should be aware that it's not recommended to push into a non-bare repository (and not into the currently checked-out branch, in particular).</source>
          <target state="translated">Кстати,эта ситуация,в которой вы находитесь,очень похожа на обычный случай,когда был сделан толчок в текущую извлеченную ветку неосновного репозитория.Вы недавно ввели в ваше локальное репо? Если нет,то не беспокойтесь-что-то другое,должно быть,вызвало непредвиденное изменение этих файлов.В противном случае,вы должны знать,что не рекомендуется делать это в неборевом репозитории (и не в текущей извлечённой ветке,в частности).</target>
        </trans-unit>
        <trans-unit id="38ebbdb0428983e332bf4bd6d6521d5ec20bedf3" translate="yes" xml:space="preserve">
          <source>Be careful though. Hard resets cannot easily be undone. It is better to do as Dan suggests, and branch off a copy of your changes before resetting.</source>
          <target state="translated">Будь осторожен.Жесткий сброс не может быть легко отменен.Лучше делать,как предлагает Дэн,и разветвлять копии ваших изменений перед перезагрузкой.</target>
        </trans-unit>
        <trans-unit id="5c8b1ef19d77ab6304905a29da2c322cc95c1042" translate="yes" xml:space="preserve">
          <source>But when I run a &lt;code&gt;git status&lt;/code&gt;,</source>
          <target state="translated">Но когда я запускаю &lt;code&gt;git status&lt;/code&gt; ,</target>
        </trans-unit>
        <trans-unit id="76db3773a26afa2e3213b3eab913192a7120a272" translate="yes" xml:space="preserve">
          <source>Can you please tell me why I have these 'modified'? I haven't touched these files? If I did, I want to remove those.</source>
          <target state="translated">Скажите,пожалуйста,почему у меня есть эти &quot;модифицированные&quot;? Я не трогал эти файлы? Если трогал,я хочу их удалить.</target>
        </trans-unit>
        <trans-unit id="e73bd79543051cc326d6ad174e0bdce1b82adfb4" translate="yes" xml:space="preserve">
          <source>Check your remotes, make sure your upstream and origin are what you expect, if not as expected then use &lt;code&gt;git remote add upstream &amp;lt;insert URL&amp;gt;&lt;/code&gt;, e.g. of the original GitHub repo that you forked from, and/or &lt;code&gt;git remote add origin &amp;lt;insert URL of the forked GitHub repo&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">Проверьте свои пульты, убедитесь, что ваш исходящий и исходный код соответствуют вашим ожиданиям, если не так, как ожидалось, используйте &lt;code&gt;git remote add upstream &amp;lt;insert URL&amp;gt;&lt;/code&gt; , например, исходный репозиторий GitHub, с которого вы ответили, и / или &lt;code&gt;git remote add origin &amp;lt;insert URL of the forked GitHub repo&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="61446bcf307102157ed7dbb36eed7999ff90eb2f" translate="yes" xml:space="preserve">
          <source>Finally, as needed, get the latest changes:</source>
          <target state="translated">Наконец,по мере необходимости,получайте последние изменения:</target>
        </trans-unit>
        <trans-unit id="787b9668c0e9d9acfbb39a389226fa7d5e788beb" translate="yes" xml:space="preserve">
          <source>First, reset to the previously fetched &lt;code&gt;HEAD&lt;/code&gt; of the corresponding upstream branch:</source>
          <target state="translated">Сначала вернемся к ранее выбранному &lt;code&gt;HEAD&lt;/code&gt; соответствующей ветви восходящего направления:</target>
        </trans-unit>
        <trans-unit id="e3104999f51b9b30d33823de15a7ea27480d5e5f" translate="yes" xml:space="preserve">
          <source>Followed by:</source>
          <target state="translated">За ним:</target>
        </trans-unit>
        <trans-unit id="be64a46da1cd2aacb95a11143fd2908f0922ad72" translate="yes" xml:space="preserve">
          <source>Fortunately I didn't have any other branches I cared about.</source>
          <target state="translated">К счастью,у меня не было других ветвей,о которых я заботился.</target>
        </trans-unit>
        <trans-unit id="896f6fda05f984da67c66c3ac56ddf5d4500d262" translate="yes" xml:space="preserve">
          <source>Have you forgotten to create a feature-branch and have committed directly on master by mistake?</source>
          <target state="translated">Вы забыли создать функциональный блок и по ошибке совершили ошибку непосредственно на мастере?</target>
        </trans-unit>
        <trans-unit id="438d3f87a07443d5e97c2ea6ce1c740d7ee3d4e6" translate="yes" xml:space="preserve">
          <source>Here is a script that automates what the most popular answer suggests ...
See &lt;a href=&quot;https://stackoverflow.com/a/13308579/1497139&quot;&gt;https://stackoverflow.com/a/13308579/1497139&lt;/a&gt; for an improved version that supports branches</source>
          <target state="translated">Вот скрипт, который автоматизирует то, что предлагает самый популярный ответ ... См. &lt;a href=&quot;https://stackoverflow.com/a/13308579/1497139&quot;&gt;Https://stackoverflow.com/a/13308579/1497139&lt;/a&gt; для улучшенной версии, которая поддерживает ветви</target>
        </trans-unit>
        <trans-unit id="430ef6313973a77582ba0a013ca6d7b1dd95cd62" translate="yes" xml:space="preserve">
          <source>How do I reset my local branch to be just like the branch on the remote repository?</source>
          <target state="translated">Как перезагрузить мою локальную ветку,чтобы она была точно такой же,как ветка в удалённом репозитории?</target>
        </trans-unit>
        <trans-unit id="dbd131e78f7989788308807f5cc0a6e882f2ae79" translate="yes" xml:space="preserve">
          <source>I also added an &quot;are you sure&quot; prompt, &amp;amp; some feedback output</source>
          <target state="translated">Я также добавил приглашение &amp;laquo;Вы уверены&amp;raquo; и некоторые отзывы</target>
        </trans-unit>
        <trans-unit id="8b23435297d06f0f532540f5ebfe3115401eca74" translate="yes" xml:space="preserve">
          <source>I did:</source>
          <target state="translated">Я так и сделал:</target>
        </trans-unit>
        <trans-unit id="4a95767b928637e8e79611b706d6f812f23455e1" translate="yes" xml:space="preserve">
          <source>I had 2 not needed commits, hence the number 2. You can change it to your own number of commits to reset.</source>
          <target state="translated">У меня было 2 не нужных коммита,отсюда и номер 2.Вы можете изменить его на ваше собственное количество коммитов для сброса.</target>
        </trans-unit>
        <trans-unit id="f0fa2991b071e50a7c1e93d04a5f06d9f740313a" translate="yes" xml:space="preserve">
          <source>I needed to do (the solution in the accepted answer):</source>
          <target state="translated">Мне нужно было это сделать (решение в принятом ответе):</target>
        </trans-unit>
        <trans-unit id="76be46a31f9b3aeca7508d0c72b4e06a1ea3c728" translate="yes" xml:space="preserve">
          <source>If branch &quot;mybranch&quot; is &lt;strong&gt;not&lt;/strong&gt; currently checked out, to reset it to remote branch &quot;myremote/mybranch&quot;'s head, you can use this &lt;a href=&quot;http://schacon.github.io/git/git.html#_low_level_commands_plumbing&quot;&gt;low-level&lt;/a&gt; command:</source>
          <target state="translated">Если ветвь &quot;mybranch&quot; в настоящее время &lt;strong&gt;не&lt;/strong&gt; извлечена, чтобы сбросить ее до заголовка удаленной ветки &quot;myremote / mybranch&quot;, вы можете использовать эту команду &lt;a href=&quot;http://schacon.github.io/git/git.html#_low_level_commands_plumbing&quot;&gt;низкого уровня&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="68440e41acdb368524d7755f5a89e2ffaf1b724d" translate="yes" xml:space="preserve">
          <source>If you don't mind saving your local changes, yet still want to update your repository to match origin/HEAD, you can simply stash your local changes and then pull:</source>
          <target state="translated">Если вы не возражаете против сохранения ваших локальных изменений,но всё же хотите обновить ваш репозиторий,чтобы он соответствовал originHEAD,вы можете просто спрятать ваши локальные изменения и затем вытащить их:</target>
        </trans-unit>
        <trans-unit id="768505b684bb89cf7ddeded6078305cc207bfd5b" translate="yes" xml:space="preserve">
          <source>If you had a problem as me, that you have already committed some changes, but now, for any reason you want to get rid of it, the quickest way is to use &lt;code&gt;git reset&lt;/code&gt; like this:</source>
          <target state="translated">Если у вас была проблема со мной, что вы уже совершили некоторые изменения, но теперь, по любой причине, вы хотите от нее избавиться, самый быстрый способ - использовать &lt;code&gt;git reset&lt;/code&gt; следующим образом:</target>
        </trans-unit>
        <trans-unit id="a77b296a2e0b8429914884cc43ffd630635fb5ee" translate="yes" xml:space="preserve">
          <source>If you have several commits, this won't work..</source>
          <target state="translated">Если у вас есть несколько коммитов,это не сработает...</target>
        </trans-unit>
        <trans-unit id="3fa501f9e5b0d7d83d708c4cfbc33dbd5c371072" translate="yes" xml:space="preserve">
          <source>If you want to go back to the &lt;code&gt;HEAD&lt;/code&gt; state for both the working directory and the index, then you should &lt;code&gt;git reset --hard HEAD&lt;/code&gt;, rather than to &lt;code&gt;HEAD^&lt;/code&gt;. (This may have been a typo, just like the single versus double dash for &lt;code&gt;--hard&lt;/code&gt;.)</source>
          <target state="translated">Если вы хотите вернуться в состояние &lt;code&gt;HEAD&lt;/code&gt; как для рабочего каталога, так и для индекса, то вам нужно &lt;code&gt;git reset --hard HEAD&lt;/code&gt; , а не &lt;code&gt;HEAD^&lt;/code&gt; . (Это может быть опечатка, точно так же как одиночный или двойной тире для &lt;code&gt;--hard&lt;/code&gt; .)</target>
        </trans-unit>
        <trans-unit id="4dc7d92448cccbeb6f525d9e0e157903b6d37c76" translate="yes" xml:space="preserve">
          <source>If you want to reset your local branch to the latest commit in the upstream branch, what works for me so far is:</source>
          <target state="translated">Если вы хотите сбросить ваше локальное ответвление на последний коммит в вышестоящей ветке,то пока что мне это работает:</target>
        </trans-unit>
        <trans-unit id="8fc88c74d9df8ad8f192bbf2f68e255fe5176230" translate="yes" xml:space="preserve">
          <source>If you want to save your current branch's state before doing this (just in case), you can do:</source>
          <target state="translated">Если вы хотите сохранить состояние вашей текущей ветки перед этим (на всякий случай),вы можете это сделать:</target>
        </trans-unit>
        <trans-unit id="5d2984d4d5bb10b9f54763a52f2a0cb87a35b7b8" translate="yes" xml:space="preserve">
          <source>Next, as needed, remove untracked files, optionally also with &lt;code&gt;-x&lt;/code&gt;:</source>
          <target state="translated">Затем, при необходимости, удалите неотслеживаемые файлы, при необходимости также с &lt;code&gt;-x&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="92b5c14091994ef039439e4e9e6449bfef29b6f7" translate="yes" xml:space="preserve">
          <source>No amount of reset and cleaning seemed to have any effect on untracked and modified files in my local git repo (I tried all the options above). My only solution to this was to rm the local repo and re-clone it from the remote.</source>
          <target state="translated">Никакое количество сброса и очистки,похоже,не повлияло на неотслеживаемые и изменённые файлы в моём локальном git-репо (я перепробовал все опции,описанные выше).Моим единственным решением было выполнить rm локальное repo и переклинировать его с удалённого компьютера.</target>
        </trans-unit>
        <trans-unit id="e2051d2c3371377634ff95f72bc156f14b1946b9" translate="yes" xml:space="preserve">
          <source>Note that instead of upstream/develop you could use a commit hash, other branch name, etc. Use a CLI tool such as Oh My Zsh to check that your branch is green indicating that there is nothing to commit and the working directory is clean (which is confirmed or also verifiable by &lt;code&gt;git status&lt;/code&gt;). Note that this may actually add commits compared to upstream develop if there is anything automatically added by a commit, e.g. UML diagrams, license headers, etc., so in that case, you could then pull the changes on &lt;code&gt;origin develop&lt;/code&gt; to &lt;code&gt;upstream develop&lt;/code&gt;, if needed.</source>
          <target state="translated">Обратите внимание, что вместо upstream / development вы могли бы использовать хеш коммита, другое имя ветки и т. Д. Используйте инструмент CLI, такой как Oh My Zsh, чтобы проверить, что ваша ветвь имеет зеленый цвет, указывая, что нечего коммитить, а рабочий каталог чистый ( что подтверждается или также подтверждается &lt;code&gt;git status&lt;/code&gt; ). Обратите внимание, что это может фактически добавить коммиты по сравнению с разработкой в ​​восходящем потоке, если что-то автоматически добавляется коммитом, например, диаграммы UML, заголовки лицензий и т. Д., Так что в этом случае вы могли бы затем вытащить изменения в &lt;code&gt;origin develop&lt;/code&gt; для последующей &lt;code&gt;upstream develop&lt;/code&gt; , если необходимо.</target>
        </trans-unit>
        <trans-unit id="9e11e9c96afe5a79ffc753908539e02eb805353f" translate="yes" xml:space="preserve">
          <source>Note that it is good practice not to make changes to your local master/develop branch, but instead checkout to another branch for any change, with the branch name prepended by the type of change, e.g. &lt;code&gt;feat/&lt;/code&gt;, &lt;code&gt;chore/&lt;/code&gt;, &lt;code&gt;fix/&lt;/code&gt;, etc. Thus you only need to pull changes, not push any changes from master. Same thing for other branches that others contribute to. So the above should only be used if you have happened to commit changes to a branch that others have committed to, and need to reset. Otherwise in future avoid pushing to a branch that others push to, instead checkout and push to the said branch via the checked out branch.</source>
          <target state="translated">Обратите внимание, что хорошей практикой является не вносить изменения в вашу локальную ветку master / development, а вместо этого извлекать изменения в другую ветку с именем ветки, к которому добавляется тип изменения, например, &lt;code&gt;feat/&lt;/code&gt; , &lt;code&gt;chore/&lt;/code&gt; , &lt;code&gt;fix/&lt;/code&gt; и т. Д. Таким образом, вам нужно только извлечь изменения, а не выдвинуть изменения из мастера. То же самое и для других отраслей, которым способствуют другие. Таким образом, вышеприведенное следует использовать только в том случае, если вы зафиксировали изменения в ветке, в которую были внесены другие, и вам необходимо выполнить сброс. В противном случае в будущем избегайте нажатия на ветку, к которой другие подталкивают, вместо этого извлекайте и проталкивайте к указанной ветке через извлеченную ветку.</target>
        </trans-unit>
        <trans-unit id="01ef3d499838982aa13f175969bfe29c96ab7c4f" translate="yes" xml:space="preserve">
          <source>Note that the first example assumes that the remote repo's name is &quot;origin&quot; and that the branch named &quot;master&quot; in the remote repo matches the currently checked-out branch in your local repo.</source>
          <target state="translated">Обратите внимание,что в первом примере предполагается,что имя удалённого репо &quot;origin&quot; и что ветка с именем &quot;master&quot; в удалённом репо совпадает с текущей извлечённой веткой в вашем локальном репо.</target>
        </trans-unit>
        <trans-unit id="9e27e83a26c5015a0895d4462a7317368d6883ba" translate="yes" xml:space="preserve">
          <source>Notice that you will lose the changes you've made, so be careful!</source>
          <target state="translated">Обратите внимание,что вы потеряете сделанные изменения,так что будьте осторожны!</target>
        </trans-unit>
        <trans-unit id="7cd4b3d709ccbc7c50e91ae8854babd3e7e20936" translate="yes" xml:space="preserve">
          <source>Now your work is saved on the branch &quot;my-saved-work&quot; in case you decide you want it back (or want to look at it later or diff it against your updated branch).</source>
          <target state="translated">Теперь ваша работа сохраняется в ветке &quot;моя сохранённая работа&quot; на тот случай,если вы решите,что хотите её вернуть (или хотите посмотреть на неё позже,или отличить от вашей обновлённой ветки).</target>
        </trans-unit>
        <trans-unit id="602e8545f6a99d1bc5dd567a5a5cd759d60d91c5" translate="yes" xml:space="preserve">
          <source>On GitHub, you can also checkout the branch with the same name as the local one, in order to save the work there, although this isn't necessary if origin develop has the same changes as the local saved-work branch. I'm using the develop branch as an example, but it can be any existing branch name.</source>
          <target state="translated">На GitHub вы также можете проверить ветку с тем же именем,что и локальная,чтобы сохранить там работу,хотя в этом нет необходимости,если исходная разработка имеет те же изменения,что и локальная сохранённая ветка.В качестве примера я использую ветку разработки,но это может быть любое существующее имя ветки.</target>
        </trans-unit>
        <trans-unit id="f407dfa1340086653b5547fde530651270310b2f" translate="yes" xml:space="preserve">
          <source>Only 3 commands will make it work</source>
          <target state="translated">Только 3 команды заставят его работать</target>
        </trans-unit>
        <trans-unit id="0bbef6306bd32f4bf914905e62f9fa8b92ceaddc" translate="yes" xml:space="preserve">
          <source>Previous answers assume that the branch to be reset is the current branch (checked out). In comments, OP &lt;em&gt;hap497&lt;/em&gt; clarified that the branch is indeed checked out, but this is not explicitly required by the original question. Since there is at least one &quot;duplicate&quot; question, &lt;a href=&quot;https://stackoverflow.com/questions/27385949/reset-branch-completely-to-repository-state&quot;&gt;Reset branch completely to repository state&lt;/a&gt;, which does not assume that the branch is checked out, here's an alternative:</source>
          <target state="translated">Предыдущие ответы предполагают, что ветвь, которая будет сброшена, является текущей веткой (проверено). В комментариях OP &lt;em&gt;hap497&lt;/em&gt; пояснил, что ветка действительно проверена, но это не требуется явно в исходном вопросе. Поскольку существует хотя бы один &amp;laquo;повторяющийся&amp;raquo; вопрос, &lt;a href=&quot;https://stackoverflow.com/questions/27385949/reset-branch-completely-to-repository-state&quot;&gt;полностью сбросьте ветвь в состояние хранилища&lt;/a&gt; , что не предполагает, что ветвь извлечена, вот альтернатива:</target>
        </trans-unit>
        <trans-unit id="b75a75ff8e26600ed9036663a14b65f172230cda" translate="yes" xml:space="preserve">
          <source>Provided that the remote repository is &lt;code&gt;origin&lt;/code&gt;, and that you're interested in &lt;code&gt;branch_name&lt;/code&gt;:</source>
          <target state="translated">При условии, что удаленный репозиторий является &lt;code&gt;branch_name&lt;/code&gt; , и что вы заинтересованы в имени_в ветви :</target>
        </trans-unit>
        <trans-unit id="80dadf8fcd42d7c5ddbd03379233401ea5695869" translate="yes" xml:space="preserve">
          <source>Reset local repository branch to be just like remote repository HEAD</source>
          <target state="translated">Сбросить локальную ветку репозитория,чтобы она была похожа на удаленный репозиторий HEAD</target>
        </trans-unit>
        <trans-unit id="625739de9bebf7312edde965ac2eed3b668854d8" translate="yes" xml:space="preserve">
          <source>Setting your branch to exactly match the remote branch can be done in two steps:</source>
          <target state="translated">Настройка вашего ответвления на точное совпадение с удалённым ответвлением может быть выполнена в два этапа:</target>
        </trans-unit>
        <trans-unit id="60597c753da58007b9e191a77c1c8691c688da5d" translate="yes" xml:space="preserve">
          <source>So answering your question - if you're 5 commits ahead of remote repository HEAD, you should run this command:</source>
          <target state="translated">Итак,ответ на ваш вопрос-если у вас 5 коммитов впереди удаленного репозитория HEAD,вы должны выполнить эту команду:</target>
        </trans-unit>
        <trans-unit id="fa63791c5a7e17e45766502882e3d598e0f7154a" translate="yes" xml:space="preserve">
          <source>The advantage of specifying &lt;code&gt;@{u}&lt;/code&gt; or its verbose form &lt;code&gt;@{upstream}&lt;/code&gt; is that the name of the remote repo and branch don't have to be explicitly specified.</source>
          <target state="translated">Преимущество указания &lt;code&gt;@{u}&lt;/code&gt; или его подробной формы &lt;code&gt;@{upstream}&lt;/code&gt; заключается в том, что имя удаленного репо и филиала не нужно указывать явно.</target>
        </trans-unit>
        <trans-unit id="7011b1a621a67e63735eb77a3fab573aef5632e9" translate="yes" xml:space="preserve">
          <source>The answer</source>
          <target state="translated">Ответ</target>
        </trans-unit>
        <trans-unit id="478ec521620e94b78b3dbf05a935ced75c024b4e" translate="yes" xml:space="preserve">
          <source>The only solution that works in all cases that I've seen is to delete and reclone. Maybe there's another way, but obviously this way leaves no chance of old state being left there, so I prefer it. Bash one-liner you can set as a macro if you often mess things up in git:</source>
          <target state="translated">Единственное решение,которое работает во всех случаях,которое я видел,это удаление и восстановление.Может быть,есть другой способ,но очевидно,что этот способ не оставляет шансов на то,что там останется старое состояние,поэтому я предпочитаю его.Бэш-один лайнер можно настроить как макрос,если вы часто путаете вещи в git'е:</target>
        </trans-unit>
        <trans-unit id="e4bffe98bea1e26ae0e9bc219a8f0bd4361abe7b" translate="yes" xml:space="preserve">
          <source>Then if you need to merge these changes with another branch while where there are any conflicts, preserving the changes in develop, use:</source>
          <target state="translated">Тогда,если вам нужно слить эти изменения с другой веткой,в то время как там,где есть какие-либо конфликты,сохраняя изменения в разработке,используйте:</target>
        </trans-unit>
        <trans-unit id="f5e26b4bfa8027e36854328a818c244fcf88dbce" translate="yes" xml:space="preserve">
          <source>Then the &lt;code&gt;git reset&lt;/code&gt; resets the &lt;code&gt;&amp;lt;branch_name&amp;gt;&lt;/code&gt; branch to what you just fetched. The &lt;code&gt;--hard&lt;/code&gt; option changes all the files in your working tree to match the files in &lt;code&gt;origin/branch_name&lt;/code&gt;.</source>
          <target state="translated">Затем &lt;code&gt;git reset&lt;/code&gt; сбрасывает &lt;code&gt;&amp;lt;branch_name&amp;gt;&lt;/code&gt; к тому, что вы только что получили . Опция &lt;code&gt;--hard&lt;/code&gt; изменяет все файлы в вашем рабочем дереве в соответствии с файлами в &lt;code&gt;origin/branch_name&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="10a7a1773daed55900a270a1a0e5d89cf69e4009" translate="yes" xml:space="preserve">
          <source>This is something I face regularly, &amp;amp; I've generalised the script Wolfgang provided above to work with any branch</source>
          <target state="translated">С этим я регулярно сталкиваюсь, и я обобщил приведенный выше скрипт Вольфганга для работы с любой веткой.</target>
        </trans-unit>
        <trans-unit id="6eeef0f736ac579a6b450054c7672ceda745a237" translate="yes" xml:space="preserve">
          <source>This is what I use often:</source>
          <target state="translated">Это то,чем я часто пользуюсь:</target>
        </trans-unit>
        <trans-unit id="ad001485ea4d9b1f48db4108cba9c62f0c2e9392" translate="yes" xml:space="preserve">
          <source>This method leaves the checked out branch as it is, and the working tree untouched. It simply moves mybranch's head to another commit, whatever is given as the second argument. This is especially helpful if multiple branches need to be updated to new remote heads.</source>
          <target state="translated">Этот метод оставляет проверенную ветку такой,какая она есть,и рабочее дерево нетронутым.Он просто перемещает голову мибраны на другой коммит,что бы ни было дано в качестве второго аргумента.Это особенно полезно,если необходимо обновить несколько ветвей до новых удалённых головок.</target>
        </trans-unit>
        <trans-unit id="e67802e913f3b5fa7586ca4ccb855a327977675b" translate="yes" xml:space="preserve">
          <source>To get the moral equivalent of &lt;strong&gt;erasing your project directory and re-cloning&lt;/strong&gt; from the remote is:</source>
          <target state="translated">Чтобы получить моральный эквивалент &lt;strong&gt;удаления каталога проекта и повторного клонирования&lt;/strong&gt; с удаленного компьютера, выполните следующие действия.</target>
        </trans-unit>
        <trans-unit id="818127423f55d63b873083f1566cd3f2db3afe69" translate="yes" xml:space="preserve">
          <source>To see what files will be removed (without actually removing them):</source>
          <target state="translated">Посмотреть,какие файлы будут удалены (без фактического удаления):</target>
        </trans-unit>
        <trans-unit id="0447d23b709f2a826d65e08a1bd1cac55b55adc6" translate="yes" xml:space="preserve">
          <source>Use caution when doing this, though, and use &lt;code&gt;gitk&lt;/code&gt; or a similar tool to double check source and destination. If you accidentally do this on the current branch (and git will not keep you from this), you may become confused, because the new branch content does not match the working tree, which did not change (to fix, update the branch again, to where it was before).</source>
          <target state="translated">При этом соблюдайте осторожность и используйте &lt;code&gt;gitk&lt;/code&gt; или аналогичный инструмент для двойной проверки источника и назначения. Если вы случайно сделаете это в текущей ветке (и git не помешает вам), вы можете запутаться, потому что новое содержимое ветки не соответствует рабочему дереву, которое не изменилось (чтобы исправить, снова обновите ветку, туда, где это было раньше).</target>
        </trans-unit>
        <trans-unit id="f02f2d8e58d78f59a49b6704d9118a6266ccd033" translate="yes" xml:space="preserve">
          <source>Use the commands below. These commands will remove all untracked files from local git too</source>
          <target state="translated">Используйте команды ниже.Эти команды также удалят все неотслеживаемые файлы из локального git'а.</target>
        </trans-unit>
        <trans-unit id="2b7736c160c48fb317cd027ac0a3b44faa7230de" translate="yes" xml:space="preserve">
          <source>What you probably want to do, is reset to the head of origin or whatever you remote repository is called. I'd probably just do something like</source>
          <target state="translated">Что вы,вероятно,захотите сделать,так это перезагрузить в заголовок исходного кода или как там вы называете удаленный репозиторий.Я бы,наверное,сделал что-нибудь вроде</target>
        </trans-unit>
        <trans-unit id="14899b864f4a68fa56157694f1b6e1b6f6b78bb8" translate="yes" xml:space="preserve">
          <source>While use</source>
          <target state="translated">В процессе использования</target>
        </trans-unit>
        <trans-unit id="6742ff1e473a30661dbb7554a0c504dc807dd0b2" translate="yes" xml:space="preserve">
          <source>With all the changes together:</source>
          <target state="translated">Со всеми изменениями вместе:</target>
        </trans-unit>
        <trans-unit id="aaf6e5cb4bcd222906fc7ade9bb3cd536bfbddd0" translate="yes" xml:space="preserve">
          <source>You can create the feature branch now and set master back without affecting the &lt;em&gt;worktree&lt;/em&gt; (local filesystem) to avoid triggering builds, tests and trouble with file-locks:</source>
          <target state="translated">Теперь вы можете создать ветку &lt;em&gt;компонентов&lt;/em&gt; и вернуть master обратно, не затрагивая &lt;em&gt;рабочее дерево&lt;/em&gt; (локальную файловую систему), чтобы избежать запуска сборок, тестов и проблем с блокировками файлов:</target>
        </trans-unit>
        <trans-unit id="07954d7adf15cacdc17060e2475de642bdcb6986" translate="yes" xml:space="preserve">
          <source>how to clear your staging area (and possibly the working directory), so that &lt;code&gt;git status&lt;/code&gt; says &lt;code&gt;nothing to commit, working directory clean.&lt;/code&gt;</source>
          <target state="translated">как очистить вашу промежуточную область (и, возможно, рабочий каталог), чтобы &lt;code&gt;git status&lt;/code&gt; &lt;code&gt;nothing to commit, working directory clean.&lt;/code&gt; говорил о фиксации, рабочий каталог очищался.</target>
        </trans-unit>
        <trans-unit id="7c3a6fb0b81301b8711d3817cf6da231fac77e24" translate="yes" xml:space="preserve">
          <source>how to reset a local branch to the point where the remote is</source>
          <target state="translated">как сбросить локальное ответвление до точки,где находится удаленный.</target>
        </trans-unit>
        <trans-unit id="50e14edbe7ca0ce2634b3291f85a47aa1d9c7968" translate="yes" xml:space="preserve">
          <source>note, you should checkout to another branch to be able to delete required branch</source>
          <target state="translated">обратите внимание,что для того,чтобы иметь возможность удалить нужное ответвление,вам необходимо обратиться в другое ответвление.</target>
        </trans-unit>
        <trans-unit id="44a2d30638b452855a13d4f2a43c8d4aa05f6e0e" translate="yes" xml:space="preserve">
          <source>to preserve branch_name's conflicting changes. Otherwise use a mergetool with &lt;code&gt;git mergetool&lt;/code&gt;.</source>
          <target state="translated">чтобы сохранить конфликтующие изменения branch_name. В противном случае используйте mergetool с &lt;code&gt;git mergetool&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="12b13d31e8066018bcde449f67345b7bfcf52de0" translate="yes" xml:space="preserve">
          <source>to remove local files</source>
          <target state="translated">для удаления локальных файлов</target>
        </trans-unit>
        <trans-unit id="d110ecc4bf5aa685f91d30ec3d951d336ba2b9a9" translate="yes" xml:space="preserve">
          <source>to totally reset branch</source>
          <target state="translated">полностью сбросить ветку</target>
        </trans-unit>
        <trans-unit id="14a4e920d1a119c78726be84a2502584abc89313" translate="yes" xml:space="preserve">
          <source>was underrated (&lt;strong&gt;-d&lt;/strong&gt; to remove directories).
Thanks!</source>
          <target state="translated">был недооценен ( &lt;strong&gt;-d&lt;/strong&gt; для удаления каталогов). Спасибо!</target>
        </trans-unit>
        <trans-unit id="7212db004bf9a51e42dafe5bd156f27109417202" translate="yes" xml:space="preserve">
          <source>xkcd: Git</source>
          <target state="translated">xkcd:Гит</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
