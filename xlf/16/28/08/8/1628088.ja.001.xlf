<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/1628088">
    <body>
      <group id="1628088">
        <trans-unit id="b7c5dd599473b7bd24bbf278876639d88d886c8e" translate="yes" xml:space="preserve">
          <source>* assumes your .git files aren't corrupt</source>
          <target state="translated">*.git ファイルが壊れていないことを前提にしています。</target>
        </trans-unit>
        <trans-unit id="2b80e53a3cbe88a91abd4c1aea24c7d121a3b629" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git clean -d --force&lt;/code&gt;&lt;sub&gt;&lt;sup&gt;Removes untracked files and directories which hinder git to say &amp;ldquo;working directory clean&amp;rdquo;.&lt;/sup&gt;&lt;/sub&gt;</source>
          <target state="translated">&lt;code&gt;git clean -d --force&lt;/code&gt; &lt;sub&gt;&lt;sup&gt;gitが「working directory clean」と言うのを妨げている追跡されていないファイルとディレクトリを削除します。&lt;/sup&gt;&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="5a06f9fea91d79966b1435341d11edca8243c9f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git fetch --prune&lt;/code&gt;&lt;sub&gt;&lt;sup&gt;(optional) Updates the local snapshot of the remote repo. Further commands are local only.&lt;/sup&gt;&lt;/sub&gt;</source>
          <target state="translated">&lt;code&gt;git fetch --prune&lt;/code&gt; &lt;sub&gt;&lt;sup&gt;（オプション）リモートリポジトリのローカルスナップショットを更新します。&lt;/sup&gt;&lt;/sub&gt; &lt;sub&gt;&lt;sup&gt;その他のコマンドはローカルのみです。&lt;/sup&gt;&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="ca7d14a2015105f8e76bd9806be5cec9a42c111e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git fetch origin&lt;/code&gt; downloads the latest from remote without trying to merge or rebase anything.</source>
          <target state="translated">&lt;code&gt;git fetch origin&lt;/code&gt; は、何もマージしたりリベースしたりすることなく、リモートから最新のものをダウンロードします。</target>
        </trans-unit>
        <trans-unit id="a86a9e9ddeb3946c72874be0d7c53e98bbf4c6df" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git reset --hard @{upstream}&lt;/code&gt;&lt;sub&gt;&lt;sup&gt;Puts the local branch pointer to where the snapshot of the remote is, as well as set the index and the working directory to the files of that commit.&lt;/sup&gt;&lt;/sub&gt;</source>
          <target state="translated">&lt;code&gt;git reset --hard @{upstream}&lt;/code&gt; &lt;sub&gt;&lt;sup&gt;ローカルブランチポインターをリモートのスナップショットの場所に&lt;/sup&gt;&lt;/sub&gt; 置き &lt;sub&gt;&lt;sup&gt;、インデックスと作業ディレクトリをそのコミットのファイルに設定します。&lt;/sup&gt;&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="f66d6d1ea03f90db50e2727159826a8c090a1c9e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git reset --hard HEAD&lt;/code&gt; actually only resets to the last committed state. In this case HEAD refers to the HEAD of your branch.</source>
          <target state="translated">&lt;code&gt;git reset --hard HEAD&lt;/code&gt; は、実際には最後にコミットされた状態にのみリセットされます。 この場合、HEADはブランチのHEADを指します。</target>
        </trans-unit>
        <trans-unit id="87b9d88918c5866a66ff7131a43ad669fceb1830" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;How it works:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;使い方：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dce57b9082e7a1425f18ee70331d2033b230ea48" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The one-stop-answer is:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ワンストップ答えは：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3104ad444d46bf10a4ba85ab26694ef63154971b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The question mixes two issues here:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;質問はここで2つの問題を混ぜ合わせます：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="91e47202f9d714a74f39bd1c83e48ec081f2b8a4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning&lt;/strong&gt;: &lt;code&gt;git clean -x -d -f&lt;/code&gt; is &lt;em&gt;irreversible&lt;/em&gt; and you may lose files and data (e.g. things you have ignored using &lt;code&gt;.gitignore&lt;/code&gt;).</source>
          <target state="translated">&lt;strong&gt;警告&lt;/strong&gt; ： &lt;code&gt;git clean -x -d -f&lt;/code&gt; は &lt;code&gt;.gitignore&lt;/code&gt; ことができず、ファイルやデータが失われる可能性があります（例： .gitignoreを使用して無視したもの ）。</target>
        </trans-unit>
        <trans-unit id="1cfd1982343cecfe6ecc8b1adfda0e01ca27d467" translate="yes" xml:space="preserve">
          <source>All of the above suggests are right, but often to &lt;em&gt;really&lt;/em&gt; reset your project, you also need to remove even files that are in your &lt;code&gt;.gitignore&lt;/code&gt;.</source>
          <target state="translated">上記のすべてが適切ですが、 &lt;em&gt;実際に&lt;/em&gt;プロジェクトをリセットするには、 &lt;code&gt;.gitignore&lt;/code&gt; にあるファイルも削除する必要があります。</target>
        </trans-unit>
        <trans-unit id="86bda52590b1e52b365b3f4160556578ba1a63a8" translate="yes" xml:space="preserve">
          <source>Also, you go for reset the current branch of &lt;code&gt;origin&lt;/code&gt; to &lt;code&gt;HEAD&lt;/code&gt;.</source>
          <target state="translated">また、現在の &lt;code&gt;origin&lt;/code&gt; ブランチを &lt;code&gt;HEAD&lt;/code&gt; にリセットします。</target>
        </trans-unit>
        <trans-unit id="c8316cb5450ca7f337bb3c6698e131ffa516f787" translate="yes" xml:space="preserve">
          <source>As for your specific question as to why those files appear in the status as modified, it looks like perhaps you did a soft reset instead of a hard reset.  This will cause the files that were changed in the &lt;code&gt;HEAD&lt;/code&gt; commit to appear as if they were staged, which is likely what you are seeing here.</source>
          <target state="translated">これらのファイルが変更された状態で表示される理由に関する特定の質問については、ハードリセットではなくソフトリセットを行ったようです。 これにより、 &lt;code&gt;HEAD&lt;/code&gt; コミットで変更されたファイルがステージングされたかのように表示されます。これは、ここに表示されているものと思われます。</target>
        </trans-unit>
        <trans-unit id="6376de0afc8a12bbf623e0a8165838bebd8c5778" translate="yes" xml:space="preserve">
          <source>BTW, this situation that you're in looks an awful lot like a common case where a push has been done into the currently checked out branch of a non-bare repository. Did you recently push into your local repo? If not, then no worries -- something else must have caused these files to unexpectedly end up modified. Otherwise, you should be aware that it's not recommended to push into a non-bare repository (and not into the currently checked-out branch, in particular).</source>
          <target state="translated">ところで、あなたが置かれているこの状況は、非ベアリポジトリの現在チェックアウトされているブランチへのプッシュが行われている、よくあるケースに酷似しています。最近ローカルリポジトリにプッシュしましたか?もしそうでなければ、心配ありません --何か他の原因でこれらのファイルが予期せず変更されてしまったに違いありません。そうでなければ、非ベアリポジトリへのプッシュは推奨されていないことに注意してください (特に現在チェックアウトされているブランチへのプッシュは推奨されていません)。</target>
        </trans-unit>
        <trans-unit id="38ebbdb0428983e332bf4bd6d6521d5ec20bedf3" translate="yes" xml:space="preserve">
          <source>Be careful though. Hard resets cannot easily be undone. It is better to do as Dan suggests, and branch off a copy of your changes before resetting.</source>
          <target state="translated">しかし、注意してください。ハードリセットは簡単には元に戻せません。ダンが提案しているように、リセットする前に変更内容のコピーを分岐させておくのが良いでしょう。</target>
        </trans-unit>
        <trans-unit id="5c8b1ef19d77ab6304905a29da2c322cc95c1042" translate="yes" xml:space="preserve">
          <source>But when I run a &lt;code&gt;git status&lt;/code&gt;,</source>
          <target state="translated">しかし、 &lt;code&gt;git status&lt;/code&gt; を実行すると、</target>
        </trans-unit>
        <trans-unit id="76db3773a26afa2e3213b3eab913192a7120a272" translate="yes" xml:space="preserve">
          <source>Can you please tell me why I have these 'modified'? I haven't touched these files? If I did, I want to remove those.</source>
          <target state="translated">なぜこれらの「修正」があるのか、教えていただけますか?私はこれらのファイルに触れていないのですか?もし触っていたら、それらを削除したいのですが。</target>
        </trans-unit>
        <trans-unit id="e73bd79543051cc326d6ad174e0bdce1b82adfb4" translate="yes" xml:space="preserve">
          <source>Check your remotes, make sure your upstream and origin are what you expect, if not as expected then use &lt;code&gt;git remote add upstream &amp;lt;insert URL&amp;gt;&lt;/code&gt;, e.g. of the original GitHub repo that you forked from, and/or &lt;code&gt;git remote add origin &amp;lt;insert URL of the forked GitHub repo&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;git remote add upstream &amp;lt;insert URL&amp;gt;&lt;/code&gt; を確認し、アップストリームとオリジンが期待どおりであることを確認します。期待どおりでない場合は、 git remote addアップストリーム&amp;lt;挿入URL&amp;gt;を使用してください 。たとえば、元のGitHubリポジトリから分岐したものや、 &lt;code&gt;git remote add origin &amp;lt;insert URL of the forked GitHub repo&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="61446bcf307102157ed7dbb36eed7999ff90eb2f" translate="yes" xml:space="preserve">
          <source>Finally, as needed, get the latest changes:</source>
          <target state="translated">最後に、必要に応じて、最新の変更点を取得します。</target>
        </trans-unit>
        <trans-unit id="787b9668c0e9d9acfbb39a389226fa7d5e788beb" translate="yes" xml:space="preserve">
          <source>First, reset to the previously fetched &lt;code&gt;HEAD&lt;/code&gt; of the corresponding upstream branch:</source>
          <target state="translated">まず、対応する上流ブランチの以前にフェッチされた &lt;code&gt;HEAD&lt;/code&gt; にリセットします。</target>
        </trans-unit>
        <trans-unit id="e3104999f51b9b30d33823de15a7ea27480d5e5f" translate="yes" xml:space="preserve">
          <source>Followed by:</source>
          <target state="translated">フォローされました。</target>
        </trans-unit>
        <trans-unit id="be64a46da1cd2aacb95a11143fd2908f0922ad72" translate="yes" xml:space="preserve">
          <source>Fortunately I didn't have any other branches I cared about.</source>
          <target state="translated">幸いなことに、他に気になる枝はありませんでした。</target>
        </trans-unit>
        <trans-unit id="896f6fda05f984da67c66c3ac56ddf5d4500d262" translate="yes" xml:space="preserve">
          <source>Have you forgotten to create a feature-branch and have committed directly on master by mistake?</source>
          <target state="translated">フィーチャーブランチの作成を忘れてしまい、誤ってマスターに直接コミットしてしまったことはありませんか?</target>
        </trans-unit>
        <trans-unit id="438d3f87a07443d5e97c2ea6ce1c740d7ee3d4e6" translate="yes" xml:space="preserve">
          <source>Here is a script that automates what the most popular answer suggests ...
See &lt;a href=&quot;https://stackoverflow.com/a/13308579/1497139&quot;&gt;https://stackoverflow.com/a/13308579/1497139&lt;/a&gt; for an improved version that supports branches</source>
          <target state="translated">以下は、最も一般的な回答が示唆することを自動化するスクリプトです...ブランチをサポートする改良されたバージョンについては、 &lt;a href=&quot;https://stackoverflow.com/a/13308579/1497139&quot;&gt;https：//stackoverflow.com/a/13308579/1497139&lt;/a&gt;を参照してください</target>
        </trans-unit>
        <trans-unit id="430ef6313973a77582ba0a013ca6d7b1dd95cd62" translate="yes" xml:space="preserve">
          <source>How do I reset my local branch to be just like the branch on the remote repository?</source>
          <target state="translated">ローカルブランチをリモートリポジトリ上のブランチと同じようにリセットするには?</target>
        </trans-unit>
        <trans-unit id="dbd131e78f7989788308807f5cc0a6e882f2ae79" translate="yes" xml:space="preserve">
          <source>I also added an &quot;are you sure&quot; prompt, &amp;amp; some feedback output</source>
          <target state="translated">「よろしいですか」というプロンプトとフィードバック出力も追加しました</target>
        </trans-unit>
        <trans-unit id="8b23435297d06f0f532540f5ebfe3115401eca74" translate="yes" xml:space="preserve">
          <source>I did:</source>
          <target state="translated">私がやったんだ</target>
        </trans-unit>
        <trans-unit id="4a95767b928637e8e79611b706d6f812f23455e1" translate="yes" xml:space="preserve">
          <source>I had 2 not needed commits, hence the number 2. You can change it to your own number of commits to reset.</source>
          <target state="translated">私は不要なコミットが2つあったので、2という数字にしました。自分のコミット数に変更してリセットすることができます。</target>
        </trans-unit>
        <trans-unit id="f0fa2991b071e50a7c1e93d04a5f06d9f740313a" translate="yes" xml:space="preserve">
          <source>I needed to do (the solution in the accepted answer):</source>
          <target state="translated">必要があった(受け入れた答えの中の解答)。</target>
        </trans-unit>
        <trans-unit id="76be46a31f9b3aeca7508d0c72b4e06a1ea3c728" translate="yes" xml:space="preserve">
          <source>If branch &quot;mybranch&quot; is &lt;strong&gt;not&lt;/strong&gt; currently checked out, to reset it to remote branch &quot;myremote/mybranch&quot;'s head, you can use this &lt;a href=&quot;http://schacon.github.io/git/git.html#_low_level_commands_plumbing&quot;&gt;low-level&lt;/a&gt; command:</source>
          <target state="translated">ブランチ「mybranch」が現在チェックアウトされて&lt;strong&gt;いない&lt;/strong&gt;場合、リモートブランチ「myremote / mybranch」のヘッドにリセットするには、次の&lt;a href=&quot;http://schacon.github.io/git/git.html#_low_level_commands_plumbing&quot;&gt;低レベル&lt;/a&gt;コマンドを使用できます。</target>
        </trans-unit>
        <trans-unit id="68440e41acdb368524d7755f5a89e2ffaf1b724d" translate="yes" xml:space="preserve">
          <source>If you don't mind saving your local changes, yet still want to update your repository to match origin/HEAD, you can simply stash your local changes and then pull:</source>
          <target state="translated">もし、ローカルの変更を保存しても構わないが、まだ originHEAD に合わせてリポジトリを更新したい場合は、ローカルの変更を保存してから pull してください。</target>
        </trans-unit>
        <trans-unit id="768505b684bb89cf7ddeded6078305cc207bfd5b" translate="yes" xml:space="preserve">
          <source>If you had a problem as me, that you have already committed some changes, but now, for any reason you want to get rid of it, the quickest way is to use &lt;code&gt;git reset&lt;/code&gt; like this:</source>
          <target state="translated">私のように問題があり、既にいくつかの変更をコミットしているが、何らかの理由でそれを取り除きたい場合、最も簡単な方法は次のように &lt;code&gt;git reset&lt;/code&gt; を使用することです。</target>
        </trans-unit>
        <trans-unit id="a77b296a2e0b8429914884cc43ffd630635fb5ee" translate="yes" xml:space="preserve">
          <source>If you have several commits, this won't work..</source>
          <target state="translated">複数のコミットがある場合は、これではうまくいきません。</target>
        </trans-unit>
        <trans-unit id="3fa501f9e5b0d7d83d708c4cfbc33dbd5c371072" translate="yes" xml:space="preserve">
          <source>If you want to go back to the &lt;code&gt;HEAD&lt;/code&gt; state for both the working directory and the index, then you should &lt;code&gt;git reset --hard HEAD&lt;/code&gt;, rather than to &lt;code&gt;HEAD^&lt;/code&gt;. (This may have been a typo, just like the single versus double dash for &lt;code&gt;--hard&lt;/code&gt;.)</source>
          <target state="translated">作業ディレクトリとインデックスの両方を &lt;code&gt;HEAD&lt;/code&gt; 状態に戻したい場合は、 &lt;code&gt;HEAD^&lt;/code&gt; ではなく &lt;code&gt;git reset --hard HEAD&lt;/code&gt; を実行する必要があります。 （これは、-- &lt;code&gt;--hard&lt;/code&gt; シングルダッシュとダブルダッシュのようにタイプミスだった可能性があります。）</target>
        </trans-unit>
        <trans-unit id="4dc7d92448cccbeb6f525d9e0e157903b6d37c76" translate="yes" xml:space="preserve">
          <source>If you want to reset your local branch to the latest commit in the upstream branch, what works for me so far is:</source>
          <target state="translated">ローカルブランチを上流ブランチの最新のコミットにリセットしたい場合、これまでのところ私には何が効くかというと、これです。</target>
        </trans-unit>
        <trans-unit id="8fc88c74d9df8ad8f192bbf2f68e255fe5176230" translate="yes" xml:space="preserve">
          <source>If you want to save your current branch's state before doing this (just in case), you can do:</source>
          <target state="translated">これをする前に現在のブランチの状態を保存しておきたい場合は(念のため)。</target>
        </trans-unit>
        <trans-unit id="5d2984d4d5bb10b9f54763a52f2a0cb87a35b7b8" translate="yes" xml:space="preserve">
          <source>Next, as needed, remove untracked files, optionally also with &lt;code&gt;-x&lt;/code&gt;:</source>
          <target state="translated">次に、必要に応じて、追跡されていないファイルを削除します。オプションで &lt;code&gt;-x&lt;/code&gt; も使用します。</target>
        </trans-unit>
        <trans-unit id="92b5c14091994ef039439e4e9e6449bfef29b6f7" translate="yes" xml:space="preserve">
          <source>No amount of reset and cleaning seemed to have any effect on untracked and modified files in my local git repo (I tried all the options above). My only solution to this was to rm the local repo and re-clone it from the remote.</source>
          <target state="translated">いくらリセットしても、ローカルの git レポの未追跡ファイルや変更されたファイルには何の影響もないように思えました (上記のオプションをすべて試してみました)。私の唯一の解決策は、ローカルのレポを rm してリモートからクローンし直すことでした。</target>
        </trans-unit>
        <trans-unit id="e2051d2c3371377634ff95f72bc156f14b1946b9" translate="yes" xml:space="preserve">
          <source>Note that instead of upstream/develop you could use a commit hash, other branch name, etc. Use a CLI tool such as Oh My Zsh to check that your branch is green indicating that there is nothing to commit and the working directory is clean (which is confirmed or also verifiable by &lt;code&gt;git status&lt;/code&gt;). Note that this may actually add commits compared to upstream develop if there is anything automatically added by a commit, e.g. UML diagrams, license headers, etc., so in that case, you could then pull the changes on &lt;code&gt;origin develop&lt;/code&gt; to &lt;code&gt;upstream develop&lt;/code&gt;, if needed.</source>
          <target state="translated">アップストリーム/開発の代わりに、コミットハッシュや他のブランチ名などを使用できることに注意してください。OhMy ZshなどのCLIツールを使用して、ブランチが緑色で、コミットするものがなく、作業ディレクトリがクリーンであることを確認します（ &lt;code&gt;git status&lt;/code&gt; によって確認または検証可能です）。 UMLダイアグラム、ライセンスヘッダーなど、コミットによって自動的に追加されるものがある場合、これは上流の開発と比較して実際にコミットを追加する可能性があることに注意してください。その場合、その後、 &lt;code&gt;origin develop&lt;/code&gt; の変更を &lt;code&gt;upstream develop&lt;/code&gt; にプルできます。必要。</target>
        </trans-unit>
        <trans-unit id="9e11e9c96afe5a79ffc753908539e02eb805353f" translate="yes" xml:space="preserve">
          <source>Note that it is good practice not to make changes to your local master/develop branch, but instead checkout to another branch for any change, with the branch name prepended by the type of change, e.g. &lt;code&gt;feat/&lt;/code&gt;, &lt;code&gt;chore/&lt;/code&gt;, &lt;code&gt;fix/&lt;/code&gt;, etc. Thus you only need to pull changes, not push any changes from master. Same thing for other branches that others contribute to. So the above should only be used if you have happened to commit changes to a branch that others have committed to, and need to reset. Otherwise in future avoid pushing to a branch that others push to, instead checkout and push to the said branch via the checked out branch.</source>
          <target state="translated">ローカルのmaster / developブランチに変更を加えないことをお勧めします。代わりに、変更のために別のブランチにチェックアウトし、ブランチの名前の前に変更のタイプを付加します（例： &lt;code&gt;feat/&lt;/code&gt; 、 &lt;code&gt;chore/&lt;/code&gt; 、 &lt;code&gt;fix/&lt;/code&gt; など）。 。したがって、変更をプルするだけでよく、マスターから変更をプッシュする必要はありません。 他のブランチが貢献している他のブランチも同じです。 したがって、上記の方法は、他のユーザーがコミットしたブランチへの変更をたまたまコミットしてリセットする必要がある場合にのみ使用してください。 それ以外の場合は、将来、他の人がプッシュするブランチにプッシュすることを避け、代わりにチェックアウトして、チェックアウトされたブランチを介してそのブランチにプッシュします。</target>
        </trans-unit>
        <trans-unit id="01ef3d499838982aa13f175969bfe29c96ab7c4f" translate="yes" xml:space="preserve">
          <source>Note that the first example assumes that the remote repo's name is &quot;origin&quot; and that the branch named &quot;master&quot; in the remote repo matches the currently checked-out branch in your local repo.</source>
          <target state="translated">最初の例では、リモートレポの名前が &quot;origin&quot; で、リモートレポの &quot;master&quot; という名前のブランチがローカルレポの現在チェックアウトされているブランチと一致していると仮定していることに注意してください。</target>
        </trans-unit>
        <trans-unit id="9e27e83a26c5015a0895d4462a7317368d6883ba" translate="yes" xml:space="preserve">
          <source>Notice that you will lose the changes you've made, so be careful!</source>
          <target state="translated">変更したものが消えてしまうので注意しましょう</target>
        </trans-unit>
        <trans-unit id="7cd4b3d709ccbc7c50e91ae8854babd3e7e20936" translate="yes" xml:space="preserve">
          <source>Now your work is saved on the branch &quot;my-saved-work&quot; in case you decide you want it back (or want to look at it later or diff it against your updated branch).</source>
          <target state="translated">これであなたの作品は &quot;my-saved-work&quot; ブランチに保存されます。</target>
        </trans-unit>
        <trans-unit id="602e8545f6a99d1bc5dd567a5a5cd759d60d91c5" translate="yes" xml:space="preserve">
          <source>On GitHub, you can also checkout the branch with the same name as the local one, in order to save the work there, although this isn't necessary if origin develop has the same changes as the local saved-work branch. I'm using the develop branch as an example, but it can be any existing branch name.</source>
          <target state="translated">GitHub では、ローカルのブランチと同じ名前のブランチをチェックアウトして、そこで作業を保存することもできます。ここでは develop ブランチを例に挙げていますが、既存のブランチ名でも構いません。</target>
        </trans-unit>
        <trans-unit id="f407dfa1340086653b5547fde530651270310b2f" translate="yes" xml:space="preserve">
          <source>Only 3 commands will make it work</source>
          <target state="translated">3つのコマンドだけで動作させることができます</target>
        </trans-unit>
        <trans-unit id="0bbef6306bd32f4bf914905e62f9fa8b92ceaddc" translate="yes" xml:space="preserve">
          <source>Previous answers assume that the branch to be reset is the current branch (checked out). In comments, OP &lt;em&gt;hap497&lt;/em&gt; clarified that the branch is indeed checked out, but this is not explicitly required by the original question. Since there is at least one &quot;duplicate&quot; question, &lt;a href=&quot;https://stackoverflow.com/questions/27385949/reset-branch-completely-to-repository-state&quot;&gt;Reset branch completely to repository state&lt;/a&gt;, which does not assume that the branch is checked out, here's an alternative:</source>
          <target state="translated">以前の回答では、リセットするブランチが現在のブランチ（チェックアウト済み）であると想定しています。 コメントの中で、OP &lt;em&gt;hap497&lt;/em&gt;はブランチが実際にチェックアウトされていることを明確にしましたが、これは元の質問では明示的に要求されていません。 少なくとも1つの「重複する」質問があるので、 &lt;a href=&quot;https://stackoverflow.com/questions/27385949/reset-branch-completely-to-repository-state&quot;&gt;ブランチを完全にリポジトリ状態にリセットします&lt;/a&gt; 。これは、ブランチがチェックアウトされていることを想定していません。代わりの方法を次に示します。</target>
        </trans-unit>
        <trans-unit id="b75a75ff8e26600ed9036663a14b65f172230cda" translate="yes" xml:space="preserve">
          <source>Provided that the remote repository is &lt;code&gt;origin&lt;/code&gt;, and that you're interested in &lt;code&gt;branch_name&lt;/code&gt;:</source>
          <target state="translated">リモートリポジトリが &lt;code&gt;origin&lt;/code&gt; であり、 &lt;code&gt;branch_name&lt;/code&gt; に興味がある場合 ：</target>
        </trans-unit>
        <trans-unit id="80dadf8fcd42d7c5ddbd03379233401ea5695869" translate="yes" xml:space="preserve">
          <source>Reset local repository branch to be just like remote repository HEAD</source>
          <target state="translated">ローカルリポジトリのブランチをリモートリポジトリのようにリセットする HEAD</target>
        </trans-unit>
        <trans-unit id="625739de9bebf7312edde965ac2eed3b668854d8" translate="yes" xml:space="preserve">
          <source>Setting your branch to exactly match the remote branch can be done in two steps:</source>
          <target state="translated">リモートブランチと正確に一致するようにブランチを設定するには、2つのステップがあります。</target>
        </trans-unit>
        <trans-unit id="60597c753da58007b9e191a77c1c8691c688da5d" translate="yes" xml:space="preserve">
          <source>So answering your question - if you're 5 commits ahead of remote repository HEAD, you should run this command:</source>
          <target state="translated">質問の答え-もしあなたがリモートリポジトリの HEAD より 5 コミット先にコミットしている場合、このコマンドを実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="fa63791c5a7e17e45766502882e3d598e0f7154a" translate="yes" xml:space="preserve">
          <source>The advantage of specifying &lt;code&gt;@{u}&lt;/code&gt; or its verbose form &lt;code&gt;@{upstream}&lt;/code&gt; is that the name of the remote repo and branch don't have to be explicitly specified.</source>
          <target state="translated">&lt;code&gt;@{u}&lt;/code&gt; またはその詳細形式 &lt;code&gt;@{upstream}&lt;/code&gt; を指定する利点は、リモートリポジトリとブランチの名前を明示的に指定する必要がないことです。</target>
        </trans-unit>
        <trans-unit id="7011b1a621a67e63735eb77a3fab573aef5632e9" translate="yes" xml:space="preserve">
          <source>The answer</source>
          <target state="translated">答えは</target>
        </trans-unit>
        <trans-unit id="478ec521620e94b78b3dbf05a935ced75c024b4e" translate="yes" xml:space="preserve">
          <source>The only solution that works in all cases that I've seen is to delete and reclone. Maybe there's another way, but obviously this way leaves no chance of old state being left there, so I prefer it. Bash one-liner you can set as a macro if you often mess things up in git:</source>
          <target state="translated">私が見てきたすべてのケースで有効な唯一の解決策は、削除して再クローンすることです。他にも方法があるのかもしれませんが、明らかにこの方法では古い状態が残る可能性がないので、私はそれを好みます。よくgitでいじっている場合にマクロとして設定できるBashのワンライナー。</target>
        </trans-unit>
        <trans-unit id="e4bffe98bea1e26ae0e9bc219a8f0bd4361abe7b" translate="yes" xml:space="preserve">
          <source>Then if you need to merge these changes with another branch while where there are any conflicts, preserving the changes in develop, use:</source>
          <target state="translated">そして、これらの変更を別のブランチにマージする必要がある場合は、コンフリクトが発生している間に、開発中の変更を保存するために使用します。</target>
        </trans-unit>
        <trans-unit id="f5e26b4bfa8027e36854328a818c244fcf88dbce" translate="yes" xml:space="preserve">
          <source>Then the &lt;code&gt;git reset&lt;/code&gt; resets the &lt;code&gt;&amp;lt;branch_name&amp;gt;&lt;/code&gt; branch to what you just fetched. The &lt;code&gt;--hard&lt;/code&gt; option changes all the files in your working tree to match the files in &lt;code&gt;origin/branch_name&lt;/code&gt;.</source>
          <target state="translated">次に &lt;code&gt;git reset&lt;/code&gt; を実行すると、 &lt;code&gt;&amp;lt;branch_name&amp;gt;&lt;/code&gt; ブランチがフェッチしたものにリセットされます。 &lt;code&gt;--hard&lt;/code&gt; オプションは、作業ツリー内のすべてのファイルを、 &lt;code&gt;origin/branch_name&lt;/code&gt; 内のファイルと一致するように変更します。</target>
        </trans-unit>
        <trans-unit id="10a7a1773daed55900a270a1a0e5d89cf69e4009" translate="yes" xml:space="preserve">
          <source>This is something I face regularly, &amp;amp; I've generalised the script Wolfgang provided above to work with any branch</source>
          <target state="translated">これは私が定期的に直面していることであり、私は任意のブランチで動作するように上記で提供されたスクリプトWolfgangを一般化しました</target>
        </trans-unit>
        <trans-unit id="6eeef0f736ac579a6b450054c7672ceda745a237" translate="yes" xml:space="preserve">
          <source>This is what I use often:</source>
          <target state="translated">これは私がよく使うものです。</target>
        </trans-unit>
        <trans-unit id="ad001485ea4d9b1f48db4108cba9c62f0c2e9392" translate="yes" xml:space="preserve">
          <source>This method leaves the checked out branch as it is, and the working tree untouched. It simply moves mybranch's head to another commit, whatever is given as the second argument. This is especially helpful if multiple branches need to be updated to new remote heads.</source>
          <target state="translated">このメソッドはチェックアウトされたブランチをそのまま残し、作業ツリーはそのままにします。このメソッドは、単に mybranch の先頭を別のコミットに移動させます。これは、複数のブランチを新しいリモートヘッドに更新する必要がある場合に特に便利です。</target>
        </trans-unit>
        <trans-unit id="e67802e913f3b5fa7586ca4ccb855a327977675b" translate="yes" xml:space="preserve">
          <source>To get the moral equivalent of &lt;strong&gt;erasing your project directory and re-cloning&lt;/strong&gt; from the remote is:</source>
          <target state="translated">&lt;strong&gt;プロジェクトディレクトリ&lt;/strong&gt;を&lt;strong&gt;消去&lt;/strong&gt;し、リモートから&lt;strong&gt;再クローンすることと&lt;/strong&gt;同等の道徳的な結果を得るためには、次のようにし&lt;strong&gt;ます&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="818127423f55d63b873083f1566cd3f2db3afe69" translate="yes" xml:space="preserve">
          <source>To see what files will be removed (without actually removing them):</source>
          <target state="translated">どのようなファイルが削除されるかを確認するには(実際には削除せずに)。</target>
        </trans-unit>
        <trans-unit id="0447d23b709f2a826d65e08a1bd1cac55b55adc6" translate="yes" xml:space="preserve">
          <source>Use caution when doing this, though, and use &lt;code&gt;gitk&lt;/code&gt; or a similar tool to double check source and destination. If you accidentally do this on the current branch (and git will not keep you from this), you may become confused, because the new branch content does not match the working tree, which did not change (to fix, update the branch again, to where it was before).</source>
          <target state="translated">ただし、これを行う場合は注意してください。ソースと宛先を再確認するには、 &lt;code&gt;gitk&lt;/code&gt; または同様のツールを使用してください。 現在のブランチで誤ってこれを行った場合（そしてgitがこれを妨げない）、新しいブランチのコンテンツが変更されていない作業ツリーと一致しないため、混乱する可能性があります（修正するには、ブランチを再度更新し、それが以前あった場所に）。</target>
        </trans-unit>
        <trans-unit id="f02f2d8e58d78f59a49b6704d9118a6266ccd033" translate="yes" xml:space="preserve">
          <source>Use the commands below. These commands will remove all untracked files from local git too</source>
          <target state="translated">以下のコマンドを使用します。これらのコマンドは、ローカルの git からトラックされていないすべてのファイルを削除します。</target>
        </trans-unit>
        <trans-unit id="2b7736c160c48fb317cd027ac0a3b44faa7230de" translate="yes" xml:space="preserve">
          <source>What you probably want to do, is reset to the head of origin or whatever you remote repository is called. I'd probably just do something like</source>
          <target state="translated">おそらくあなたがしたいことは、リモートリポジトリの名前が何であれ、オリジンのヘッドにリセットすることです。のようなことをします。</target>
        </trans-unit>
        <trans-unit id="14899b864f4a68fa56157694f1b6e1b6f6b78bb8" translate="yes" xml:space="preserve">
          <source>While use</source>
          <target state="translated">使用中</target>
        </trans-unit>
        <trans-unit id="6742ff1e473a30661dbb7554a0c504dc807dd0b2" translate="yes" xml:space="preserve">
          <source>With all the changes together:</source>
          <target state="translated">すべての変化を一緒にして</target>
        </trans-unit>
        <trans-unit id="aaf6e5cb4bcd222906fc7ade9bb3cd536bfbddd0" translate="yes" xml:space="preserve">
          <source>You can create the feature branch now and set master back without affecting the &lt;em&gt;worktree&lt;/em&gt; (local filesystem) to avoid triggering builds, tests and trouble with file-locks:</source>
          <target state="translated">ここで機能ブランチを作成し、 &lt;em&gt;ワークツリー&lt;/em&gt; （ローカルファイルシステム）に影響を与えずにマスターを元に戻し、ビルド、テスト、およびファイルロックのトラブルのトリガーを回避できます。</target>
        </trans-unit>
        <trans-unit id="07954d7adf15cacdc17060e2475de642bdcb6986" translate="yes" xml:space="preserve">
          <source>how to clear your staging area (and possibly the working directory), so that &lt;code&gt;git status&lt;/code&gt; says &lt;code&gt;nothing to commit, working directory clean.&lt;/code&gt;</source>
          <target state="translated">ステージング領域（および場合によっては作業ディレクトリ）をクリアして、 &lt;code&gt;git status&lt;/code&gt; &lt;code&gt;nothing to commit, working directory clean.&lt;/code&gt; 示さ ないようにして、作業ディレクトリをクリーンにする方法。</target>
        </trans-unit>
        <trans-unit id="7c3a6fb0b81301b8711d3817cf6da231fac77e24" translate="yes" xml:space="preserve">
          <source>how to reset a local branch to the point where the remote is</source>
          <target state="translated">ローカルブランチをリモートにリセットする方法</target>
        </trans-unit>
        <trans-unit id="50e14edbe7ca0ce2634b3291f85a47aa1d9c7968" translate="yes" xml:space="preserve">
          <source>note, you should checkout to another branch to be able to delete required branch</source>
          <target state="translated">注意:必要なブランチを削除するには、別のブランチにチェックアウトする必要があります。</target>
        </trans-unit>
        <trans-unit id="44a2d30638b452855a13d4f2a43c8d4aa05f6e0e" translate="yes" xml:space="preserve">
          <source>to preserve branch_name's conflicting changes. Otherwise use a mergetool with &lt;code&gt;git mergetool&lt;/code&gt;.</source>
          <target state="translated">branch_nameの競合する変更を保持します。 それ以外の場合は、 &lt;code&gt;git mergetool&lt;/code&gt; で mergetoolを使用します。</target>
        </trans-unit>
        <trans-unit id="12b13d31e8066018bcde449f67345b7bfcf52de0" translate="yes" xml:space="preserve">
          <source>to remove local files</source>
          <target state="translated">ローカルファイルを削除する</target>
        </trans-unit>
        <trans-unit id="d110ecc4bf5aa685f91d30ec3d951d336ba2b9a9" translate="yes" xml:space="preserve">
          <source>to totally reset branch</source>
          <target state="translated">ブランチを完全にリセットする</target>
        </trans-unit>
        <trans-unit id="14a4e920d1a119c78726be84a2502584abc89313" translate="yes" xml:space="preserve">
          <source>was underrated (&lt;strong&gt;-d&lt;/strong&gt; to remove directories).
Thanks!</source>
          <target state="translated">過小評価されました（ディレクトリを削除するには&lt;strong&gt;-d&lt;/strong&gt; ）。 ありがとう！</target>
        </trans-unit>
        <trans-unit id="7212db004bf9a51e42dafe5bd156f27109417202" translate="yes" xml:space="preserve">
          <source>xkcd: Git</source>
          <target state="translated">xkcd:Git</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
