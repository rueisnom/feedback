<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/161813">
    <body>
      <group id="161813">
        <trans-unit id="5984419b5778f9a4c4f7bbb85c74b9adb45ae5f3" translate="yes" xml:space="preserve">
          <source>(Remember to replace the path with the actual path of Kdiff exe file.)</source>
          <target state="translated">(パスは Kdiff の exe ファイルの実際のパスに置き換えることを忘れないでください)</target>
        </trans-unit>
        <trans-unit id="b3390a19d5b0b5180fb4449d7387b045df408917" translate="yes" xml:space="preserve">
          <source>. You can directly reach MERGED view using</source>
          <target state="translated">.を使用して直接 MERGED ビューにアクセスすることができます。</target>
        </trans-unit>
        <trans-unit id="996050e0bcf31b18b5ad6eec3902db1dfd23c7d0" translate="yes" xml:space="preserve">
          <source>2. Current Line Blame.</source>
          <target state="translated">2.現在のライン責め。</target>
        </trans-unit>
        <trans-unit id="0dd3171390dbf54eaabed9e7d572666d50b603d6" translate="yes" xml:space="preserve">
          <source>3. Easily Resolve Conflicts.</source>
          <target state="translated">3.容易に対立を解決する。</target>
        </trans-unit>
        <trans-unit id="175b85fd9594552b6934b9ae3d20eb4a7e48d2e5" translate="yes" xml:space="preserve">
          <source>3. Gutter Blame</source>
          <target state="translated">3.ガッターブレーム</target>
        </trans-unit>
        <trans-unit id="b293034cf0e4f2b9bc829b319d6f42c4bc355f18" translate="yes" xml:space="preserve">
          <source>4. Status Bar Blame</source>
          <target state="translated">4.ステータスバーのお咎め</target>
        </trans-unit>
        <trans-unit id="a9dfc97bcc8b604231d8feb585f8d1717d975502" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/blog/2293-resolve-simple-merge-conflicts-on-github&quot;&gt;This blog post&lt;/a&gt; explains in detail, but the basics are that upon 'merging' two branches via the UI, you will now see a 'resolve conflicts' option that will take you to an editor allowing you to deal with these merge conflicts.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/blog/2293-resolve-simple-merge-conflicts-on-github&quot;&gt;このブログ投稿で&lt;/a&gt;は詳細を説明していますが、基本的には、UIを介して2つのブランチを「マージ」 すると 、「競合の解決」オプションが表示され、これらのマージの競合に対処できるエディターが表示されます。</target>
        </trans-unit>
        <trans-unit id="018f2256b1785efde626620cc8bd84ab64840292" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;:diffget //2&lt;/code&gt;, get changes from original (&lt;em&gt;HEAD&lt;/em&gt;) branch:</source>
          <target state="translated">&lt;code&gt;:diffget //2&lt;/code&gt; 、元の（ &lt;em&gt;HEAD&lt;/em&gt; ）ブランチから変更を取得：</target>
        </trans-unit>
        <trans-unit id="4a315742a5934e8708bdc2484f385a7d3c687891" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;:diffget //3&lt;/code&gt;, get changes from merging branch:</source>
          <target state="translated">&lt;code&gt;:diffget //3&lt;/code&gt; 、マージブランチから変更を取得します：</target>
        </trans-unit>
        <trans-unit id="e80a5e0becdd40012fa121d96beff436eb5e3b4c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;:wqa&lt;/code&gt; save and exit from vi</source>
          <target state="translated">&lt;code&gt;:wqa&lt;/code&gt; 保存してviを終了</target>
        </trans-unit>
        <trans-unit id="7951c4074799958813e65ba7cb4fb5f1e4effb0a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;current change&lt;/code&gt;(meaning original one before merging)'?.</source>
          <target state="translated">&lt;code&gt;current change&lt;/code&gt; （マージ前の元の変更を意味します） '？</target>
        </trans-unit>
        <trans-unit id="cddd78bcafbe734e87c29feb3bdf74f542ee186d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git clean&lt;/code&gt; Remove extra files (e.g. *.orig) created by diff tool.</source>
          <target state="translated">&lt;code&gt;git clean&lt;/code&gt; diffツールで作成された余分なファイル（* .origなど）を削除します。</target>
        </trans-unit>
        <trans-unit id="b05ba11bf3186d99f40a15ddad3b2f2a030823cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git&lt;/code&gt; CLI</source>
          <target state="translated">&lt;code&gt;git&lt;/code&gt; CLI</target>
        </trans-unit>
        <trans-unit id="8b77648ec75a644255f4be7f9dd3cb5598cd48b1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;git pull --rebase&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;git pull --rebase&lt;/code&gt; &lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5f09a2e8f5d2d646276a9fed6e51d451e73790e8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fully accept my or theirs version&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;私または彼らのバージョンを完全に受け入れます&lt;/strong&gt; ：</target>
        </trans-unit>
        <trans-unit id="267c669633d51c6d9d96098cd1ca2edf3517fbfc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Review all changes and accept them individually&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;すべての変更を確認し、個別に受け入れます&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ed861af4419c3cf99a6bd58ce8d7f88ee4689f87" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 1&lt;/strong&gt;: Go to the branch</source>
          <target state="translated">&lt;strong&gt;ステップ1&lt;/strong&gt; ：ブランチに行く</target>
        </trans-unit>
        <trans-unit id="1394a7eae7d30cfc247b029e7951dd56ca53c501" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 1&lt;/strong&gt;: Run following commands in your terminal</source>
          <target state="translated">&lt;strong&gt;ステップ1&lt;/strong&gt; ：端末で次のコマンドを実行する</target>
        </trans-unit>
        <trans-unit id="08609d4bd19a06850313be45322700c83c9024c0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 2&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;ステップ2&lt;/strong&gt; ：</target>
        </trans-unit>
        <trans-unit id="4364353baa0d76480a726b3cb0e63e3af4e07ec5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 2&lt;/strong&gt;: Run following command in terminal</source>
          <target state="translated">&lt;strong&gt;手順2&lt;/strong&gt; ：端末で次のコマンドを実行します</target>
        </trans-unit>
        <trans-unit id="bffa2453a0caf54f7f41e4901b00658c41850505" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 3&lt;/strong&gt;: If there are some conflicts, go to these files to modify it.</source>
          <target state="translated">&lt;strong&gt;ステップ3&lt;/strong&gt; ：競合がある場合は、これらのファイルに移動して変更します。</target>
        </trans-unit>
        <trans-unit id="d1ac3f3562d27d0da9d0f9b4b271ae6324475f03" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 3&lt;/strong&gt;: You will see a vimdiff display in following format</source>
          <target state="translated">&lt;strong&gt;手順3&lt;/strong&gt; ：次の形式でvimdiffディスプレイが表示されます</target>
        </trans-unit>
        <trans-unit id="08dbaa67c856b82d176404d2167fd871d3061c01" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 4&lt;/strong&gt;. You could edit the MERGED view the following way</source>
          <target state="translated">&lt;strong&gt;ステップ4&lt;/strong&gt; 。 次の方法でマージされたビューを編集できます</target>
        </trans-unit>
        <trans-unit id="1f2f10e210d256aacda5ae7ee805f719ed3379f8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 4&lt;/strong&gt;: Add these changes</source>
          <target state="translated">&lt;strong&gt;ステップ4&lt;/strong&gt; ：これらの変更を追加する</target>
        </trans-unit>
        <trans-unit id="918cb69b300466e33c7c768d2aee0e95d478cf58" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 5&lt;/strong&gt;. Save, Exit, Commit and Clean up</source>
          <target state="translated">&lt;strong&gt;ステップ5&lt;/strong&gt; 。 保存、終了、コミット、クリーンアップ</target>
        </trans-unit>
        <trans-unit id="bcfc8490c541aaec58a661d05b3701aaad06f759" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 5&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;ステップ5&lt;/strong&gt; ：</target>
        </trans-unit>
        <trans-unit id="7532866bda99e4ba384b10fa2b5e75ec6644f55e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 6&lt;/strong&gt;: If there is still conflict, go back to step 3 again. If there is no conflict, do following:</source>
          <target state="translated">&lt;strong&gt;手順6&lt;/strong&gt; ：それでも競合がある場合は、手順3に戻ります。 競合がない場合は、以下を実行します。</target>
        </trans-unit>
        <trans-unit id="74361e5409372dd18c19e09534a67f4a53a3d21d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 7&lt;/strong&gt;: And then there is no conflict between test and master. You can use merge directly.</source>
          <target state="translated">&lt;strong&gt;ステップ7&lt;/strong&gt; ：テストとマスターの間に競合はありません。 直接マージを使用できます。</target>
        </trans-unit>
        <trans-unit id="880ae413917c7925af5b1274ea0eec0d3965879e" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;However you've to be careful, as remote changes that conflicts were done for some reason.&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;ただし、競合するリモート変更が何らかの理由で行われたため、注意が必要です。&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="842ae3472f12c24803c1bb2ee89ee22d6c383c46" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;Image source: &lt;a href=&quot;https://sourcegear.com/diffmerge/&quot;&gt;DiffMerge&lt;/a&gt; (Linux screenshot)&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;画像ソース： &lt;a href=&quot;https://sourcegear.com/diffmerge/&quot;&gt;DiffMerge&lt;/a&gt; （Linuxスクリーンショット）&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="8eee615565678d9c8bc0a9f2f921d251a1a3cbdc" translate="yes" xml:space="preserve">
          <source>A safer way to resolve conflicts is to use &lt;a href=&quot;https://github.com/Peaker/git-mediate&quot;&gt;git-mediate&lt;/a&gt; (the common solutions suggested here are quite error prone imho).</source>
          <target state="translated">競合を解決するより安全な方法は、 &lt;a href=&quot;https://github.com/Peaker/git-mediate&quot;&gt;git-&lt;/a&gt; mediateを使用することです （ここで提案されている一般的な解決策は、エラーが発生しやすいです）。</target>
        </trans-unit>
        <trans-unit id="beb67c154281a51eab633a88fcdbbd4656d59cd3" translate="yes" xml:space="preserve">
          <source>A_MBPro:test anu$ git merge origin/ Auto-merging
  src/test/java/com/.../TestClass.java CONFLICT
  (content): Merge conflict in
  src/test/java/com/.../TestClass.java</source>
          <target state="translated">A_MBPro:test anu$ git merge origin 自動マージ srctestjavacom...TestClass.java CONFLICT (content)をマージします。srctestjavacom...TestClass.java の競合をマージします。</target>
        </trans-unit>
        <trans-unit id="a7b183a6f77c99b78584e9f4f9c6586693f1a738" translate="yes" xml:space="preserve">
          <source>Accept my version (local, ours):</source>
          <target state="translated">私のバージョン(ローカル、クマ)を受け入れてください。</target>
        </trans-unit>
        <trans-unit id="5bc00cfaa92376af7b8a3890a3b1000ebf89813e" translate="yes" xml:space="preserve">
          <source>Accept their version (remote, theirs):</source>
          <target state="translated">彼らのバージョン(リモート、彼らの)を受け入れる。</target>
        </trans-unit>
        <trans-unit id="de248d3c434336170b313b4a606fae76271119ac" translate="yes" xml:space="preserve">
          <source>After seeing a conflict, you can do two things:</source>
          <target state="translated">葛藤を見た後にできることは2つ。</target>
        </trans-unit>
        <trans-unit id="88c796f3f9c1bd62bd2303bc6fd590d651d18149" translate="yes" xml:space="preserve">
          <source>Also (and more relevant to your situation), I try to avoid:</source>
          <target state="translated">また、(あなたの状況にもっと関連している)私は避けるようにしています。</target>
        </trans-unit>
        <trans-unit id="64d1d3763e3678125c90fb233fae5e747be5afc3" translate="yes" xml:space="preserve">
          <source>Also, the &lt;a href=&quot;https://www.kernel.org/pub/software/scm/git/docs/git-merge.html#_how_to_resolve_conflicts&quot;&gt;How to Resolve Conflicts&lt;/a&gt; section explains how to resolve the conflicts:</source>
          <target state="translated">また、「 &lt;a href=&quot;https://www.kernel.org/pub/software/scm/git/docs/git-merge.html#_how_to_resolve_conflicts&quot;&gt;競合を解決&lt;/a&gt;する方法」セクションでは、競合を解決する方法について説明しています。</target>
        </trans-unit>
        <trans-unit id="e30eff925100b7c3e119ed678e39009e962455b0" translate="yes" xml:space="preserve">
          <source>Alt</source>
          <target state="translated">Alt</target>
        </trans-unit>
        <trans-unit id="d83728a889e246005c68fb7b4ea004251b567ef9" translate="yes" xml:space="preserve">
          <source>Alternatively you can use &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/opendiff.1.html&quot;&gt;opendiff&lt;/a&gt; (part of Xcode Tools) which lets you merge two files or directories together to create a third file or directory.</source>
          <target state="translated">または、 &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/opendiff.1.html&quot;&gt;opendiff&lt;/a&gt; （Xcode Toolsの一部）を使用して、2つのファイルまたはディレクトリをマージし、3つ目のファイルまたはディレクトリを作成できます。</target>
        </trans-unit>
        <trans-unit id="d2b49ab034efe5c43e47bb8c7fa6908660e6c2ee" translate="yes" xml:space="preserve">
          <source>And probably (if not provided) you need the following extra simple wrapper placed in your PATH (e.g. &lt;code&gt;/usr/bin&lt;/code&gt;):</source>
          <target state="translated">そしておそらく（提供されていない場合）PATHに次の追加の単純なラッパー（ &lt;code&gt;/usr/bin&lt;/code&gt; など ）を配置する必要があります。</target>
        </trans-unit>
        <trans-unit id="203ef75231b705089e654d36b91e46318dfe1500" translate="yes" xml:space="preserve">
          <source>And then we try a final time</source>
          <target state="translated">そして、最後に試してみる。</target>
        </trans-unit>
        <trans-unit id="3e6f3db27cc8c401fedee6e7d282bbfea034770c" translate="yes" xml:space="preserve">
          <source>And there are many features you can check them &lt;a href=&quot;https://github.com/eamodio/vscode-gitlens&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">そして、あなたがそれらを&lt;a href=&quot;https://github.com/eamodio/vscode-gitlens&quot;&gt;ここで&lt;/a&gt;チェックできる多くの機能があります 。</target>
        </trans-unit>
        <trans-unit id="031f3f8f8291e0e1de20b7de05bfa588693494ab" translate="yes" xml:space="preserve">
          <source>As of December 12th 2016, you can merge branches and &lt;strong&gt;resolve conflicts on github.com&lt;/strong&gt;</source>
          <target state="translated">2016年12月12日以降、 &lt;strong&gt;github.comで&lt;/strong&gt;ブランチをマージして&lt;strong&gt;競合&lt;/strong&gt;を&lt;strong&gt;解決&lt;/strong&gt;できます</target>
        </trans-unit>
        <trans-unit id="8388f57e8cdf32dbfd337f07999e3a94c43253c4" translate="yes" xml:space="preserve">
          <source>As per @JoshGlover comment:</source>
          <target state="translated">JoshGloverのコメント通り。</target>
        </trans-unit>
        <trans-unit id="f474daae6a62b7028ecb784c6fbd046b9c1252cc" translate="yes" xml:space="preserve">
          <source>BASE &amp;ndash; common ancestor, how file looked before both changes</source>
          <target state="translated">BASE &amp;ndash;共通の祖先、両方の変更前のファイルの外観</target>
        </trans-unit>
        <trans-unit id="bfa88da268e9e2de28582188413cdb7c3a37c5c4" translate="yes" xml:space="preserve">
          <source>BTW if you install Git Extensions there is an option in its setup wizard to install Kdiff3.</source>
          <target state="translated">ところで、Git Extensions をインストールした場合、セットアップウィザードに Kdiff3 をインストールするオプションがあります。</target>
        </trans-unit>
        <trans-unit id="d1f71a9a3f6b22f46159ecc1b5cc3fd1ee29d31c" translate="yes" xml:space="preserve">
          <source>Before pushing your newly committed change to remote server, try &lt;code&gt;git pull --rebase&lt;/code&gt; rather &lt;code&gt;git pull&lt;/code&gt; and manual &lt;code&gt;merge&lt;/code&gt; and it will automatically sync latest remote server changes (with a fetch + merge) and will put your local latest commit at the top in git log. No need to worry about manual pull/merge.</source>
          <target state="translated">新しくコミットされた変更をリモートサーバーにプッシュする前に、 &lt;code&gt;git pull&lt;/code&gt; と手動 &lt;code&gt;merge&lt;/code&gt; ではなく &lt;code&gt;git pull --rebase&lt;/code&gt; を試してください。これにより、最新のリモートサーバーの変更が（フェッチ+マージで）自動的に同期され、ローカルの最新のコミットがgitの一番上に配置されますログ。 手動のプル/マージについて心配する必要はありません。</target>
        </trans-unit>
        <trans-unit id="5690562f60aa2958acf32cea69a82be068935ee2" translate="yes" xml:space="preserve">
          <source>Below is the sample procedure to use &lt;code&gt;vimdiff&lt;/code&gt; for resolve merge conflicts. Based on &lt;a href=&quot;http://www.rosipov.com/blog/use-vimdiff-as-git-mergetool/#fromHistor&quot;&gt;this link&lt;/a&gt;</source>
          <target state="translated">以下は、 &lt;code&gt;vimdiff&lt;/code&gt; を使用してマージの競合を解決するためのサンプル手順です。 &lt;a href=&quot;http://www.rosipov.com/blog/use-vimdiff-as-git-mergetool/#fromHistor&quot;&gt;このリンクに&lt;/a&gt;基づく</target>
        </trans-unit>
        <trans-unit id="5763578555f814c96231de97e5710d397db26670" translate="yes" xml:space="preserve">
          <source>Bonus:</source>
          <target state="translated">Bonus:</target>
        </trans-unit>
        <trans-unit id="e2b00999c812c0f8501ad55c392f1fbc4b4fc3ca" translate="yes" xml:space="preserve">
          <source>Change it to the way you want it, then commit with commands</source>
          <target state="translated">好きなように変更して、コマンドでコミットしてください。</target>
        </trans-unit>
        <trans-unit id="a16928497c72104aa81a7d81e344898c5e5a9d2c" translate="yes" xml:space="preserve">
          <source>Check out the answers in Stack Overflow question &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/101752/aborting-a-merge-in-git&quot;&gt;Aborting a merge in Git&lt;/a&gt;&lt;/em&gt;, especially &lt;a href=&quot;https://stackoverflow.com/questions/101752/aborting-a-merge-in-git#107860&quot;&gt;Charles Bailey's answer&lt;/a&gt; which shows how to view the different versions of the file with problems, for example,</source>
          <target state="translated">スタックオーバーフローの質問の回答、 &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/101752/aborting-a-merge-in-git&quot;&gt;Git&lt;/a&gt;&lt;/em&gt;での&lt;em&gt;マージの中止&lt;/em&gt; 、特に問題のあるファイルのさまざまなバージョンを表示する方法を示す&lt;a href=&quot;https://stackoverflow.com/questions/101752/aborting-a-merge-in-git#107860&quot;&gt;Charles Baileyの回答&lt;/a&gt;を確認してください。</target>
        </trans-unit>
        <trans-unit id="148d7ea3194dfb3824271bc5bf58dc3bda5baee5" translate="yes" xml:space="preserve">
          <source>Check the Git status:
&lt;strong&gt;&lt;em&gt;git status&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">Gitステータスを確認します： &lt;strong&gt;&lt;em&gt;git status&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6b4260a19776ffbf9dfe81497f156c7830b80d1f" translate="yes" xml:space="preserve">
          <source>Check the files, in which you would find the conflicts marked like</source>
          <target state="translated">のようにマークされているコンフリクトがあるファイルをチェックしてください。</target>
        </trans-unit>
        <trans-unit id="aa6390380b1645608f5ff58880c2c59a7c7468a6" translate="yes" xml:space="preserve">
          <source>Check the status again:
 &lt;strong&gt;&lt;em&gt;git status&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">ステータスをもう一度確認してください： &lt;strong&gt;&lt;em&gt;git status&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b69003626d6cb4346f37832218c2fac266a2dcd9" translate="yes" xml:space="preserve">
          <source>Checkout a local branch (temp1 in my example here):
&lt;strong&gt;&lt;em&gt;git checkout -b temp1&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">ローカルブランチをチェックアウトします（この例ではtemp1）： &lt;strong&gt;&lt;em&gt;git checkout -b temp1&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b0362ddbc2b43b66fa4e6cca7d6f8961ded7dee2" translate="yes" xml:space="preserve">
          <source>Choose one of the alternatives or a combination of both in a way that you want new code to be, while removing equal signs and angle brackets.</source>
          <target state="translated">等号や角括弧を削除しながら、新しいコードにしたい方法で、選択肢の1つまたは両方の組み合わせを選択します。</target>
        </trans-unit>
        <trans-unit id="f65afcc3c7fda48e7af81a4b11b34d1f34f30d83" translate="yes" xml:space="preserve">
          <source>Click the conflicting file and you will have the option to Merge, Compare, Take Source, Take Target.  The merge tool in VS is very easy to use.</source>
          <target state="translated">競合するファイルをクリックすると、マージ、比較、ソースを取る、ターゲットを取るのオプションがあります。VS のマージツールは非常に使いやすいです。</target>
        </trans-unit>
        <trans-unit id="ec2dece8f71f03d22fdc5a37975a1dbbea9b6ee2" translate="yes" xml:space="preserve">
          <source>Close your project in VS. Especially in big projects VS tends to freak out when merging using the UI.</source>
          <target state="translated">VSでプロジェクトを閉じる。特に大きなプロジェクトでは、VSはUIを使ってマージするときにパニクりがちです。</target>
        </trans-unit>
        <trans-unit id="fb0b442c1c1c3d03199691d9d6fc5d9cec8d1471" translate="yes" xml:space="preserve">
          <source>Commit the changes to the same commit id (this avoids a new separate patch set):
&lt;strong&gt;&lt;em&gt;git commit --amend&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">変更を同じコミットIDにコミットします（これにより、新しい個別のパッチセットが回避されます）： &lt;strong&gt;&lt;em&gt;git commit --amend&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5831691140428fa04453f5bba220df00be0565ab" translate="yes" xml:space="preserve">
          <source>Comparison with the common ancestor</source>
          <target state="translated">共通祖先との比較</target>
        </trans-unit>
        <trans-unit id="c771b1de682f5642315c2602673d7fb1b2fcd43e" translate="yes" xml:space="preserve">
          <source>CoolAJ86's answer sums up pretty much everything. In case you have changes in both branches in the same piece of code you will have to do a manual merge. Open the file in conflict in any text editor and you should see following structure.</source>
          <target state="translated">CoolAJ86さんの回答は、ほとんどすべてをまとめています。同じコードの中で両方のブランチに変更がある場合、手動でマージする必要があります。衝突しているファイルをテキストエディタで開くと、以下のような構造になっているはずです。</target>
        </trans-unit>
        <trans-unit id="25623d3d6597110b3dc53adcb06a990460c0bdc2" translate="yes" xml:space="preserve">
          <source>Decide not to merge. The only clean-ups you need are to reset the index file to the &lt;code&gt;HEAD&lt;/code&gt; commit to reverse 2. and to clean up working tree changes made by 2. and 3.; &lt;code&gt;git merge --abort&lt;/code&gt; can be used for this.</source>
          <target state="translated">マージしないことを決定します。 必要なクリーンアップは、インデックスファイルを &lt;code&gt;HEAD&lt;/code&gt; コミットにリセットして2を元に戻し、2と3によって行われた作業ツリーの変更をクリーンアップすることだけです。 &lt;code&gt;git merge --abort&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="22e56642085575f2908ddb864308068f7e968cad" translate="yes" xml:space="preserve">
          <source>Default &lt;code&gt;mergetool&lt;/code&gt; works in &lt;strong&gt;command line&lt;/strong&gt;. How to use a command line mergetool should be a separate question.</source>
          <target state="translated">デフォルトの &lt;code&gt;mergetool&lt;/code&gt; は&lt;strong&gt;コマンドラインで機能し&lt;/strong&gt;ます。 コマンドラインのmergetoolの使い方は別の質問です。</target>
        </trans-unit>
        <trans-unit id="62142d242914ddff0d898b153644b0eafdec9b6b" translate="yes" xml:space="preserve">
          <source>Delete the unwanted files locally created by mergetool, usually mergetool creates extra file with *.orig extension. Please delete that file as that is just the duplicate and fix changes locally and add the correct version of your files.
&lt;strong&gt;&lt;em&gt;git add #your_changed_correct_files&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">mergetoolによってローカルに作成された不要なファイルを削除します。通常、mergetoolは* .orig拡張子を持つ追加のファイルを作成します。 そのファイルは重複しているため、削除してローカルで変更を修正し、正しいバージョンのファイルを追加してください。 &lt;strong&gt;&lt;em&gt;git add #your_changed_correct_files&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cf55c22c3384a1a5442c9356b103938aff517cff" translate="yes" xml:space="preserve">
          <source>DiffMerge</source>
          <target state="translated">DiffMerge</target>
        </trans-unit>
        <trans-unit id="974874822de58470f022f79813163910737446e5" translate="yes" xml:space="preserve">
          <source>Do the merge in command prompt.</source>
          <target state="translated">コマンドプロンプトでマージします。</target>
        </trans-unit>
        <trans-unit id="8f3dad5896c6d2f85c69a69d9b5dcfaeb1b52705" translate="yes" xml:space="preserve">
          <source>Does not seem to always work for me and usually ends up displaying every commit that was different between the two branches, this happens even when using &lt;code&gt;--&lt;/code&gt; to separate the path from the command.</source>
          <target state="translated">私にとって常に機能するとは限らず、通常、2つのブランチ間で異なるすべてのコミットが表示されることになります。これは、 &lt;code&gt;--&lt;/code&gt; を使用してコマンドからパスを分離する場合でも発生します。</target>
        </trans-unit>
        <trans-unit id="bf93e5ce8bc1228c2585b3f5a368053c9fe8346a" translate="yes" xml:space="preserve">
          <source>Down</source>
          <target state="translated">Down</target>
        </trans-unit>
        <trans-unit id="5f743014bcdaf6c6b456b0a51baf9dbd2767737b" translate="yes" xml:space="preserve">
          <source>Each time you edit a file to resolve a conflict, &lt;code&gt;git add filename&lt;/code&gt; will update the index and your diff will no longer show it. When all the conflicts are handled and their files have been &lt;code&gt;git add&lt;/code&gt;-ed, &lt;code&gt;git commit&lt;/code&gt; will complete your merge.</source>
          <target state="translated">競合を解決するためにファイルを編集するたびに、 &lt;code&gt;git add filename&lt;/code&gt; はインデックスを更新し、diffはそれを表示しなくなります。 すべての競合が処理され、それらのファイルが &lt;code&gt;git add&lt;/code&gt; -edされると、 &lt;code&gt;git commit&lt;/code&gt; によってマージが完了します。</target>
        </trans-unit>
        <trans-unit id="941cfe8b1f11cde20411fa8dc823e6451b6066fa" translate="yes" xml:space="preserve">
          <source>Edit the conflicted files manually and look for the code block between &lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/code&gt;/&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; then choose the version either from above or below &lt;code&gt;=====&lt;/code&gt;. See: &lt;a href=&quot;http://git-scm.com/docs/git-merge#_how_conflicts_are_presented&quot;&gt;How conflicts are presented&lt;/a&gt;.</source>
          <target state="translated">競合するファイルを手動で編集し、 &lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/code&gt; / &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; の間のコードブロックを探してから、上または下からバージョンを選択してください &lt;code&gt;=====&lt;/code&gt; 。 参照： &lt;a href=&quot;http://git-scm.com/docs/git-merge#_how_conflicts_are_presented&quot;&gt;競合の表示方法&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="aacd1ff5034e63964e7c7c658577c21417051af1" translate="yes" xml:space="preserve">
          <source>Finally, review the files ready for commit using: &lt;code&gt;git status&lt;/code&gt;.</source>
          <target state="translated">最後に、 &lt;code&gt;git status&lt;/code&gt; を使用して、コミットの準備ができているファイルを確認します。</target>
        </trans-unit>
        <trans-unit id="a094f4d7d41c2764c2f031fe68c19f7697500e17" translate="yes" xml:space="preserve">
          <source>Find details at: &lt;a href=&quot;http://gitolite.com/git-pull--rebase&quot;&gt;http://gitolite.com/git-pull--rebase&lt;/a&gt;</source>
          <target state="translated">詳細については、 &lt;a href=&quot;http://gitolite.com/git-pull--rebase&quot;&gt;http&lt;/a&gt; ： //gitolite.com/git-pull--rebaseを参照してください</target>
        </trans-unit>
        <trans-unit id="4809b89a126e0c64267d7eedaadd6a71a6de0432" translate="yes" xml:space="preserve">
          <source>Find which files cause conflicts by command</source>
          <target state="translated">コマンドでコンフリクトの原因となるファイルを探す</target>
        </trans-unit>
        <trans-unit id="444ae617023a2ca15a17f8826dd18fc1b206e9f6" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;http://en.wikipedia.org/wiki/Emacs&quot;&gt;Emacs&lt;/a&gt; users which want to resolve merge conflicts semi-manually:</source>
          <target state="translated">マージの競合を半手動で解決したい&lt;a href=&quot;http://en.wikipedia.org/wiki/Emacs&quot;&gt;Emacs&lt;/a&gt;ユーザーの場合：</target>
        </trans-unit>
        <trans-unit id="b9276f3406ed29b514fe3f13e76db9e122964538" translate="yes" xml:space="preserve">
          <source>For conflicts that involve more than a few lines, it's easier to see what's going on in an external GUI tool. I like opendiff -- Git also supports vimdiff, gvimdiff, kdiff3, tkdiff, meld, xxdiff, emerge out of the box and you can install others: &lt;code&gt;git config merge.tool &quot;your.tool&quot;&lt;/code&gt; will set your chosen tool and then &lt;code&gt;git mergetool&lt;/code&gt; after a failed merge will  show you the diffs in context.</source>
          <target state="translated">数行を超える競合の場合は、外部GUIツールで何が起こっているのかを簡単に確認できます。 私はopendiffが好きです-Gitはvimdiff、gvimdiff、kdiff3、tkdiff、meld、xxdiffもサポートしており、すぐにインストールでき、他のものをインストールできます： &lt;code&gt;git config merge.tool &quot;your.tool&quot;&lt;/code&gt; は、選択したツールを設定してから、 &lt;code&gt;git mergetool&lt;/code&gt; 失敗したマージの後、コンテキストの差分が表示されます。</target>
        </trans-unit>
        <trans-unit id="a96746ef03f16d34404a31209e137b75cb15ca6e" translate="yes" xml:space="preserve">
          <source>For example, if you know that you and another person are both working on different refactoring that will both affect the same set of files, you should talk to each other ahead of time and get a better sense for what types of changes each of you is making. You might save considerable time and effort if you conduct your planned changes serially rather than in parallel.</source>
          <target state="translated">例えば、あなたと別の人が同じファイルセットに影響を与える異なるリファクタリングに取り組んでいることを知っている場合、前もってお互いに話し合って、それぞれがどのような変更を行っているかについてより良い感覚を得る必要があります。計画された変更を並行して行うのではなく、連続的に行うと、かなりの時間と労力を節約できるかもしれません。</target>
        </trans-unit>
        <trans-unit id="8333e3cfab4df3827ff6836fb6b710b9358f125a" translate="yes" xml:space="preserve">
          <source>For major refactorings that cut across a large swath of code, you should strongly consider working serially: everybody stops working on that area of the code while one person performs the complete refactoring.</source>
          <target state="translated">大規模なリファクタリングでコードの大部分を横断する場合は、シリアルに作業を行うことを強く考慮すべきです。</target>
        </trans-unit>
        <trans-unit id="4fa9753aa4fd3c850748555a3e9f4a60b89ac341" translate="yes" xml:space="preserve">
          <source>For practical tutorial, check: &lt;a href=&quot;https://www.katacoda.com/courses/git/5&quot;&gt;Scenario 5 - Fixing Merge Conflicts by Katacoda&lt;/a&gt;.</source>
          <target state="translated">実際のチュートリアルについては、 &lt;a href=&quot;https://www.katacoda.com/courses/git/5&quot;&gt;シナリオ5-Katacodaによるマージの競合の修正を&lt;/a&gt;確認してください。</target>
        </trans-unit>
        <trans-unit id="8e13a07312a1b166bfac8963c011d8cef1459d58" translate="yes" xml:space="preserve">
          <source>For those who are using Visual Studio (2015 in my case)</source>
          <target state="translated">Visual Studio(私の場合は2015)をお使いの方へ</target>
        </trans-unit>
        <trans-unit id="332ea3a31e79d47a90b9a3ccec9c1cdfdbaa5829" translate="yes" xml:space="preserve">
          <source>From the documentation:</source>
          <target state="translated">ドキュメントから。</target>
        </trans-unit>
        <trans-unit id="7df338298732a7a44cfe3459a9c54089c35b179d" translate="yes" xml:space="preserve">
          <source>Get the patchset:
&lt;strong&gt;&lt;em&gt;git fetch&lt;/em&gt;&lt;/strong&gt; (checkout the right patch from your Git commit)</source>
          <target state="translated">パッチセットを入手： &lt;strong&gt;&lt;em&gt;git fetch&lt;/em&gt;&lt;/strong&gt; （Gitコミットから適切なパッチをチェックアウト）</target>
        </trans-unit>
        <trans-unit id="69a3ed9b700833291e3fb52128a1c1896ad1a625" translate="yes" xml:space="preserve">
          <source>Gitlense For VS Code</source>
          <target state="translated">VSコードのためのギトレンセ</target>
        </trans-unit>
        <trans-unit id="cb033caab8c1571bd1cc040deef3f29714bc9898" translate="yes" xml:space="preserve">
          <source>Here are a few tips:</source>
          <target state="translated">ここでは、いくつかのヒントをご紹介します。</target>
        </trans-unit>
        <trans-unit id="d6ac82bd2169504c0f1bd7ac53df06a10044601a" translate="yes" xml:space="preserve">
          <source>Here are simple steps what to do when you get into conflicted state:</source>
          <target state="translated">ここでは、葛藤状態になったときにどうするかの簡単な手順を紹介します。</target>
        </trans-unit>
        <trans-unit id="4015aea13e4cb51abe076db016a9c3d37c5ab85e" translate="yes" xml:space="preserve">
          <source>Here's a probable use-case, from the top:</source>
          <target state="translated">上から順に、想定されるユースケースをご紹介します。</target>
        </trans-unit>
        <trans-unit id="53343ebc96836cd5b3243181b65465e0cf2310da" translate="yes" xml:space="preserve">
          <source>Here's what Kdiff3 looks like:</source>
          <target state="translated">Kdiff3はこんな感じです。</target>
        </trans-unit>
        <trans-unit id="cb24c6a6c393ebe7ec3779e9477715f34a1e1c8e" translate="yes" xml:space="preserve">
          <source>How do I resolve merge conflicts in Git?</source>
          <target state="translated">Git でのマージの競合を解決するには?</target>
        </trans-unit>
        <trans-unit id="d351a3caff947e2b59eb23475d4c1ea1dd8fc47a" translate="yes" xml:space="preserve">
          <source>How to resolve merge conflicts in Git</source>
          <target state="translated">Git でマージの競合を解決する方法</target>
        </trans-unit>
        <trans-unit id="821a9fc9b328173923a3a75703b4c5f4fabf1ea0" translate="yes" xml:space="preserve">
          <source>I already like this feature:</source>
          <target state="translated">私はすでにこの機能が気に入っています。</target>
        </trans-unit>
        <trans-unit id="ebb18fa7969201cbf38ba225dade79fc2ac15133" translate="yes" xml:space="preserve">
          <source>I always follow the below steps to avoid conflicts.</source>
          <target state="translated">私はいつも以下の手順を踏んでコンフリクトを回避しています。</target>
        </trans-unit>
        <trans-unit id="5cbeb9173e4a15b8b07727c351b6c3fdec416f12" translate="yes" xml:space="preserve">
          <source>I am using Microsoft's Visual Code for resolving conflicts. Its very simple to use. I keep my project open in the workspace. It detects and highlights conflicts, moreover give GUI options to select whatever change I want to keep from HEAD or incoming.</source>
          <target state="translated">私は競合を解決するためにMicrosoftのVisual Codeを使用しています。使い方はとてもシンプルです。ワークスペースでプロジェクトを開いています。競合を検出してハイライトし、さらに、GUIオプションを使って、HEADからの変更と着信からの変更を選択することができます。</target>
        </trans-unit>
        <trans-unit id="d6a10190fb2d0293b50b8df275083b88901d5e6b" translate="yes" xml:space="preserve">
          <source>I either want my or their version in full, or want to review individual changes and decide for each of them.</source>
          <target state="translated">私は自分のバージョンかそのバージョンの完全版が欲しいのか、それとも個々の変更点を見直してそれぞれに決めたいのか、どちらかです。</target>
        </trans-unit>
        <trans-unit id="0402c816503737edd063d7527db024b2749d4ccb" translate="yes" xml:space="preserve">
          <source>I find merge tools rarely help me understand the conflict or the resolution. I'm usually more successful looking at the conflict markers in a text editor and using git log as a supplement.</source>
          <target state="translated">マージツールを使っても、競合や解決策を理解するのに役立つことはほとんどありません。私は通常、テキストエディタでコンフリクトマーカーを見て git log を補足するほうが成功することが多いです。</target>
        </trans-unit>
        <trans-unit id="1b084f84735683c433246463bf526f719f03fe77" translate="yes" xml:space="preserve">
          <source>I hope that this will help every one concerning this issue.</source>
          <target state="translated">これがこの問題に関するすべての人の助けになることを願っています。</target>
        </trans-unit>
        <trans-unit id="d0caea9b3f59d542fa6ac97fea504dcb8e68f4bc" translate="yes" xml:space="preserve">
          <source>I think the real key is knowing how changes flow with local and remote repositories.  The key to this is understanding tracking branches.  I have found that I think of the tracking branch as the 'missing piece in the middle' between me my local, actual files directory and the remote defined as origin.</source>
          <target state="translated">本当の鍵は、ローカルとリモートのリポジトリで変更がどのように流れるかを知ることだと思います。その鍵となるのは、トラッキングブランチを理解することです。私はトラッキングブランチを、私のローカルの実際のファイルディレクトリとリモートの定義されたオリジンとの間にある「中間の欠落した部分」と考えています。</target>
        </trans-unit>
        <trans-unit id="f0dcaf5654b405f76244139f625e12b8ecb4399c" translate="yes" xml:space="preserve">
          <source>I'm surprised no one else spoke about resolving conflict using &lt;code&gt;patience&lt;/code&gt; with the merge recursive strategy. For a big merge conflict, using &lt;code&gt;patience&lt;/code&gt; provided good results for me. The idea is that it will try to match blocks rather than individual lines.</source>
          <target state="translated">マージ再帰的戦略の &lt;code&gt;patience&lt;/code&gt; を使用して競合を解決することについて他の誰も話していないことに驚いています。 大きなマージの競合では、 &lt;code&gt;patience&lt;/code&gt; を使用することで、良い結果が得られました。 アイデアは、個々の行ではなくブロックを一致させようとするというものです。</target>
        </trans-unit>
        <trans-unit id="c6fa9d4f262c6727eee44346dad7bdce3894c5b9" translate="yes" xml:space="preserve">
          <source>I've personally got into the habit of 2 things to help avoid this.</source>
          <target state="translated">個人的にはこれを避けるために2つのことを習慣にしています。</target>
        </trans-unit>
        <trans-unit id="fb58a335235a03f06da06668899ed8f3672ab468" translate="yes" xml:space="preserve">
          <source>I've successfully used &lt;a href=&quot;https://sourcegear.com/diffmerge/&quot;&gt;DiffMerge&lt;/a&gt; which can visually compare and merge files on Windows, macOS and Linux/Unix.</source>
          <target state="translated">Windows、macOS、およびLinux / Unixでファイルを視覚的に比較およびマージできる&lt;a href=&quot;https://sourcegear.com/diffmerge/&quot;&gt;DiffMerge&lt;/a&gt;を正常に使用しました。</target>
        </trans-unit>
        <trans-unit id="b50738c5e6ed82977210183ce1837c1f0b3de951" translate="yes" xml:space="preserve">
          <source>Identify which files are in conflict (Git should tell you this).</source>
          <target state="translated">どのファイルが競合しているかを確認します (Git が教えてくれるはずです)。</target>
        </trans-unit>
        <trans-unit id="c722a2e638436ed8fb95c066ae4ce83c149e74f2" translate="yes" xml:space="preserve">
          <source>If all conflicts were solved successfully, commit the changes by: &lt;code&gt;git commit -a&lt;/code&gt; and push to remote as usual.</source>
          <target state="translated">すべての競合が正常に解決された場合は、次の方法で変更をコミットします &lt;code&gt;git commit -a&lt;/code&gt; と通常どおりリモートにプッシュします。</target>
        </trans-unit>
        <trans-unit id="175991024547a83ccaab97a5b5236f8c382363c5" translate="yes" xml:space="preserve">
          <source>If the conflict is longer, then I will cut and paste each of the three sections into three separate files, such as &quot;mine&quot;, &quot;common&quot; and &quot;theirs&quot;.</source>
          <target state="translated">葛藤が長くなった場合は、「私のもの」「共通のもの」「彼らのもの」というように、3つのセクションのそれぞれを切り取って貼り付けていきます。</target>
        </trans-unit>
        <trans-unit id="d20842fcd97f861418ee0876bd663fea842315ce" translate="yes" xml:space="preserve">
          <source>If the conflict is only a few lines, this generally makes the conflict very obvious. (Knowing how to fix a conflict is very different; you need to be aware of what other people are working on. If you're confused, it's probably best to just call that person into your room so they can see what you're looking at.)</source>
          <target state="translated">衝突が数行しかない場合、一般的には衝突が非常に明白になります。(衝突を修正する方法を知ることは、非常に異なっています。他の人が何に取り組んでいるかを意識する必要があります。あなたが混乱している場合は、彼らはあなたが見ているものを見ることができるように、あなたの部屋にその人を呼び出すことが最善の方法かもしれません)</target>
        </trans-unit>
        <trans-unit id="0a3d7fce00a142bd9776e2f018dc7698e902aa15" translate="yes" xml:space="preserve">
          <source>If you are using intelliJ as IDE
Try to merge parent to your branch by</source>
          <target state="translated">IDEとしてintelliJを使用している場合は、次のようにして親ブランチをマージしてみてください。</target>
        </trans-unit>
        <trans-unit id="e4c3e0b130c36910f9d97995518a0afbab1aff04" translate="yes" xml:space="preserve">
          <source>If you can't work serially (due to time pressure, maybe), then communicating about expected merge conflicts at least helps you solve the problems sooner while the details are still fresh in mind. For example, if a co-worker is making a disruptive series of commits over the course of a one-week period, you may choose to merge/rebase on that co-workers branch once or twice each day during that week. That way, if you do find merge/rebase conflicts, you can solve them more quickly than if you wait a few weeks to merge everything together in one big lump.</source>
          <target state="translated">(時間的なプレッシャーのために)連続して作業できない場合は、予想されるマージの衝突についてコミュニケーションを取ることで、少なくとも詳細がまだ頭に残っているうちに問題を早期に解決することができます。例えば、ある同僚が一週間の間に破壊的なコミットを繰り返していた場合、その週の間にその同僚のブランチを毎日一度か二度マージすることを選択することができます。そうすれば、mergerebase の競合を見つけた場合、数週間待ってすべてをひとつの大きな塊にまとめてマージするよりも、より迅速に解決することができます。</target>
        </trans-unit>
        <trans-unit id="8de6d362944cca0dce5c2e38813cddd83e8e685b" translate="yes" xml:space="preserve">
          <source>If you change the indentation of your program for instance, the default Git merge strategy sometimes matches single braces &lt;code&gt;{&lt;/code&gt; which belongs to different functions. This is avoided with &lt;code&gt;patience&lt;/code&gt;:</source>
          <target state="translated">たとえば、プログラムのインデントを変更すると、デフォルトのGitマージ戦略が、さまざまな関数に属する単一の中括弧 &lt;code&gt;{&lt;/code&gt; と一致する場合があります。 これは &lt;code&gt;patience&lt;/code&gt; で回避されます：</target>
        </trans-unit>
        <trans-unit id="6276c8e1991c84cf5b8e5c3d836c05c6fee80fc7" translate="yes" xml:space="preserve">
          <source>If you have a merge conflict and want to see what others had in mind when modifying their branch, it's sometimes easier to compare their branch directly with the common ancestor (instead of our branch). For that you can use &lt;code&gt;merge-base&lt;/code&gt;:</source>
          <target state="translated">マージの競合があり、他の人がブランチを変更するときに何を考えていたかを確認したい場合は、ブランチ（ブランチではなく）を直接共通の祖先と直接比較する方が簡単な場合があります。 そのために &lt;code&gt;merge-base&lt;/code&gt; を使用できます：</target>
        </trans-unit>
        <trans-unit id="3c883d427128e3ee60335551b4037a18d86bfca4" translate="yes" xml:space="preserve">
          <source>If you have automated tests, run those. If you have a &lt;a href=&quot;https://en.wikipedia.org/wiki/Lint_%28software%29&quot;&gt;lint&lt;/a&gt;, run that. If it's a buildable project, then build it before you commit, etc. In all cases, you need to do a bit of testing to make sure your changes didn't break anything. (Heck, even a merge without conflicts can break working code.)</source>
          <target state="translated">自動テストがある場合は、それらを実行します。 &lt;a href=&quot;https://en.wikipedia.org/wiki/Lint_%28software%29&quot;&gt;lint&lt;/a&gt;がある場合は、それを実行します。 ビルド可能なプロジェクトの場合は、コミットする前にビルドしてください。すべての場合において、変更が何かを壊していないことを確認するために、少しテストを行う必要があります。 （いや、衝突のないマージでさえ、動作しているコードが壊れる可能性があります。）</target>
        </trans-unit>
        <trans-unit id="8f7ad0b58875a2eef77bed1a3b771769ae25e55c" translate="yes" xml:space="preserve">
          <source>If you still have any files under &lt;code&gt;Unmerged paths&lt;/code&gt;, and you did solve the conflict manually, then let Git know that you solved it by: &lt;code&gt;git add path/file&lt;/code&gt;.</source>
          <target state="translated">[ &lt;code&gt;Unmerged paths&lt;/code&gt; れていないパス]にまだファイルがあり、競合を手動で解決した場合は、 &lt;code&gt;git add path/file&lt;/code&gt; で解決したことをGitに知らせます 。</target>
        </trans-unit>
        <trans-unit id="618a9df3236f9b4b00c66e050c030f70e7bfbaf7" translate="yes" xml:space="preserve">
          <source>If you want to do &lt;strong&gt;for all conflict files&lt;/strong&gt; run:</source>
          <target state="translated">&lt;strong&gt;すべての競合ファイルを&lt;/strong&gt;実行する場合は、次の&lt;strong&gt;コマンドを&lt;/strong&gt;実行します。</target>
        </trans-unit>
        <trans-unit id="40e2ccced76045c87f99f9598b0f6ca2b170ac5d" translate="yes" xml:space="preserve">
          <source>If you want to get changes from BASE</source>
          <target state="translated">BASEからの変更点を取得したい場合</target>
        </trans-unit>
        <trans-unit id="9a91acbff11907c7623923e649ccb1161cc13790" translate="yes" xml:space="preserve">
          <source>If you want to get changes from LOCAL</source>
          <target state="translated">LOCALから変更を受けたい場合</target>
        </trans-unit>
        <trans-unit id="3ff3c58bc799a86cb942b0f9edeea683c119470b" translate="yes" xml:space="preserve">
          <source>If you want to get changes from REMOTE</source>
          <target state="translated">REMOTEからの変更を取得したい場合</target>
        </trans-unit>
        <trans-unit id="7f764d3f6b37d69b7cfb44ee1e10315cfa562c73" translate="yes" xml:space="preserve">
          <source>If you want to merge from branch (test) to master, you can follow these steps:</source>
          <target state="translated">ブランチ(テスト)からマスターにマージしたい場合は、以下の手順で行います。</target>
        </trans-unit>
        <trans-unit id="5b99b606e7392bf3cc501c5e6406eeea867175e7" translate="yes" xml:space="preserve">
          <source>If you're making frequent small commits, then start by looking at the commit comments with &lt;code&gt;git log --merge&lt;/code&gt;. Then &lt;code&gt;git diff&lt;/code&gt; will show you the conflicts.</source>
          <target state="translated">小さなコミットを頻繁に行う場合は、まず &lt;code&gt;git log --merge&lt;/code&gt; でコミットコメントを確認します。 次に、 &lt;code&gt;git diff&lt;/code&gt; が競合を表示します。</target>
        </trans-unit>
        <trans-unit id="e087c5303db4581add8424216fe62c3476f5c96d" translate="yes" xml:space="preserve">
          <source>If you're unsure of a merge, don't force it.</source>
          <target state="translated">マージに自信がない場合は、無理にしないでください。</target>
        </trans-unit>
        <trans-unit id="eae8dcd45665da5a6e192ad89e08d8c301cd9888" translate="yes" xml:space="preserve">
          <source>In case of conflict, just use</source>
          <target state="translated">競合する場合は</target>
        </trans-unit>
        <trans-unit id="d592dbde4754ce459b94a6718b0d95d29d91ed12" translate="yes" xml:space="preserve">
          <source>In speaking of pull/fetch/merge in the above answers, I would like to share an interesting and productive trick,</source>
          <target state="translated">上記の回答の中で、プルフェッチマージといえば、おもしろくて生産性の高いコツをご紹介したいと思います。</target>
        </trans-unit>
        <trans-unit id="404c8199355521cd32b47a7d72664223656e0afb" translate="yes" xml:space="preserve">
          <source>In the long run, planning ahead and being aware of what others are working on are the best tools for anticipating merge conflicts and prepare yourself to resolve them correctly in less time.</source>
          <target state="translated">長い目で見れば、先に計画を立て、他の人が何に取り組んでいるかを意識することは、マージコンフリクトを予測し、より短い時間で正しく解決できるように自分自身を準備するための最良のツールです。</target>
        </trans-unit>
        <trans-unit id="2ddfdc4de435b57cc9f426f563d158f02c8f1dfc" translate="yes" xml:space="preserve">
          <source>In this step you will try to fix the conflict using your prefer IDE</source>
          <target state="translated">このステップでは、お好みの IDE を使用してコンフリクトを修正します。</target>
        </trans-unit>
        <trans-unit id="dc64513761c45dd824144f46922e260041bf8652" translate="yes" xml:space="preserve">
          <source>Instead I try to do</source>
          <target state="translated">その代わりに私がしようとしているのは</target>
        </trans-unit>
        <trans-unit id="c042f3d9b71b32db250543be269d410c99d13527" translate="yes" xml:space="preserve">
          <source>Instead of:</source>
          <target state="translated">代わりに</target>
        </trans-unit>
        <trans-unit id="7114095c6f61ba912555fde2a05cdbdc7435bd0d" translate="yes" xml:space="preserve">
          <source>It can help you very well by showing what are the changes made to the original one and should you accept  &lt;code&gt;incoming&lt;/code&gt; or</source>
          <target state="translated">これは、元の変更に加えられた変更を示し、 &lt;code&gt;incoming&lt;/code&gt; または</target>
        </trans-unit>
        <trans-unit id="97c4c9cdb8b4f9dade9ea3c515bca654b46ccc5b" translate="yes" xml:space="preserve">
          <source>It graphically can show the changes between 3 files and it allows automatic merging (when safe to do so) and full control over editing the resulting file.</source>
          <target state="translated">それは3つのファイル間の変更をグラフィカルに表示することができ、それは自動的にマージ(安全な場合)と結果のファイルの編集の完全な制御を可能にします。</target>
        </trans-unit>
        <trans-unit id="fc65623ad7e5af9ffb0022bbd490aee9cc8be179" translate="yes" xml:space="preserve">
          <source>It helped for me and it can work for you too !</source>
          <target state="translated">それは私のために助けられ、それはあなたのためにも働くことができます</target>
        </trans-unit>
        <trans-unit id="26cb61480f17932403ae66265778d74b745d11b3" translate="yes" xml:space="preserve">
          <source>It opens a GUI that steps you through each conflict, and you get to choose how to merge.  Sometimes it requires a bit of hand editing afterwards, but usually it's enough by itself.  It is much better than doing the whole thing by hand certainly.</source>
          <target state="translated">これはGUIを開き、各コンフリクトを通してステップを行い、マージ方法を選択します。時には手で編集する必要がありますが、通常はそれだけで十分です。確かに手で全部やるよりはずっといいですね。</target>
        </trans-unit>
        <trans-unit id="b42f3381050c1b31f935c0dabe817fe60cac10a9" translate="yes" xml:space="preserve">
          <source>It will open local version (ours), &quot;base&quot; or &quot;merged&quot; version (the current result of the merge) and remote version (theirs). Save the merged version when you are finished, run &lt;code&gt;git mergetool -t meld&lt;/code&gt; again until you get &quot;No files need merging&quot;, then go to Steps 3. and 4.</source>
          <target state="translated">ローカルバージョン（our）、「ベース」または「マージ」バージョン（マージの現在の結果）およびリモートバージョン（それら）を開きます。 完了したら、マージされたバージョンを保存し、「マージする必要のあるファイルがなくなる」まで &lt;code&gt;git mergetool -t meld&lt;/code&gt; を再度実行し、ステップ3と4に進みます。</target>
        </trans-unit>
        <trans-unit id="bb08ab4098d66264a23b33d34e2a1fb7f673e561" translate="yes" xml:space="preserve">
          <source>It will show all conflicts like this</source>
          <target state="translated">このようにすべてのコンフリクトが表示されます。</target>
        </trans-unit>
        <trans-unit id="dbcce2d9085ea3f26119a032f6da8d8969d5be5c" translate="yes" xml:space="preserve">
          <source>LOCAL &amp;ndash; this is file from the current branch</source>
          <target state="translated">LOCAL &amp;ndash;これは現在のブランチからのファイルです</target>
        </trans-unit>
        <trans-unit id="8ae1c34bd37fad49cc5f8e02da648a78e89c3ed8" translate="yes" xml:space="preserve">
          <source>Left</source>
          <target state="translated">Left</target>
        </trans-unit>
        <trans-unit id="555712d9829e6328a9b7d5ec70facbda745fb9b3" translate="yes" xml:space="preserve">
          <source>Look at the diffs from each branch. &lt;code&gt;git log --merge -p &amp;lt;path&amp;gt;&lt;/code&gt; will show diffs first for the &lt;code&gt;HEAD&lt;/code&gt; version and then the &lt;code&gt;MERGE_HEAD&lt;/code&gt; version.</source>
          <target state="translated">各ブランチの差分を見てください。 &lt;code&gt;git log --merge -p &amp;lt;path&amp;gt;&lt;/code&gt; は、最初に &lt;code&gt;HEAD&lt;/code&gt; バージョンの差分を表示し、次に &lt;code&gt;MERGE_HEAD&lt;/code&gt; バージョンの差分を表示します。</target>
        </trans-unit>
        <trans-unit id="a326ab540e0d9536d53dbc94d57cb0c25e24d9a1" translate="yes" xml:space="preserve">
          <source>Look at the diffs. &lt;code&gt;git diff&lt;/code&gt; will show a three-way diff, highlighting changes from both the &lt;code&gt;HEAD&lt;/code&gt; and &lt;code&gt;MERGE_HEAD&lt;/code&gt; versions.</source>
          <target state="translated">差分を見てください。 &lt;code&gt;git diff&lt;/code&gt; は、3方向の差分を表示し、 &lt;code&gt;HEAD&lt;/code&gt; バージョンと &lt;code&gt;MERGE_HEAD&lt;/code&gt; バージョンの両方からの変更を強調表示します。</target>
        </trans-unit>
        <trans-unit id="f8c63749f2ae2fa24fa7ef48c360ef59f66a1f48" translate="yes" xml:space="preserve">
          <source>Look at the originals. &lt;code&gt;git show :1:filename&lt;/code&gt; shows the common ancestor, &lt;code&gt;git show :2:filename&lt;/code&gt; shows the &lt;code&gt;HEAD&lt;/code&gt; version, and &lt;code&gt;git show :3:filename&lt;/code&gt; shows the &lt;code&gt;MERGE_HEAD&lt;/code&gt; version.</source>
          <target state="translated">オリジナルを見てください。 &lt;code&gt;git show :1:filename&lt;/code&gt; は共通の祖先を示し、 &lt;code&gt;git show :2:filename&lt;/code&gt; は &lt;code&gt;HEAD&lt;/code&gt; バージョンを示し、 &lt;code&gt;git show :3:filename&lt;/code&gt; は &lt;code&gt;MERGE_HEAD&lt;/code&gt; バージョンを示します 。</target>
        </trans-unit>
        <trans-unit id="da48cfaff0482f5a700e60e4191306b2026eace6" translate="yes" xml:space="preserve">
          <source>MERGED &amp;ndash; merge result, this is what gets saved in the repo</source>
          <target state="translated">マージ&amp;ndash;マージ結果、これがリポジトリに保存されます</target>
        </trans-unit>
        <trans-unit id="c207672d3b478974acf7e5502421de413cf99f62" translate="yes" xml:space="preserve">
          <source>Merge conflicts could occur in different situations:</source>
          <target state="translated">マージの競合は、さまざまな状況で発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="89538bead44a3004ea9986328c5b27cb003d4f0c" translate="yes" xml:space="preserve">
          <source>Merge conflicts happens when changes are made to a file at the same time. Here is how to solve it.</source>
          <target state="translated">マージの競合は、ファイルに同時に変更が加えられたときに発生します。ここではそれを解決する方法を説明します。</target>
        </trans-unit>
        <trans-unit id="e5fff5bc126a251ef08a0ce23b8487354eb67b5f" translate="yes" xml:space="preserve">
          <source>Merging can feel overwhelming, especially when there are a lot of conflicting files and the conflict markers cover hundreds of lines. Often times when estimating software projects we don't include enough time for overhead items like handling a gnarly merge, so it feels like a real drag to spend several hours dissecting each conflict.</source>
          <target state="translated">特に競合するファイルが多く、競合マーカーが何百行にも及ぶ場合には、マージに圧倒されてしまうことがあります。ソフトウェアプロジェクトの見積もりを行う際には、厄介なマージの処理などのオーバーヘッド項目に十分な時間を割くことができないことがよくあり、各コンフリクトの解析に数時間を費やすのは本当に苦痛に感じます。</target>
        </trans-unit>
        <trans-unit id="e39bb33836c26f3139f0a912c706206ba5e974d5" translate="yes" xml:space="preserve">
          <source>More info about vimdiff navigation &lt;a href=&quot;https://stackoverflow.com/questions/4556184/vim-move-window-left-right&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://stackoverflow.com/questions/27151456/how-do-i-jump-to-the-next-prev-diff-in-git-difftool&quot;&gt;here&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/questions/4556184/vim-move-window-left-right&quot;&gt;ここ&lt;/a&gt;と&lt;a href=&quot;https://stackoverflow.com/questions/27151456/how-do-i-jump-to-the-next-prev-diff-in-git-difftool&quot;&gt;ここに&lt;/a&gt; vimdiffナビゲーションに関する詳細情報</target>
        </trans-unit>
        <trans-unit id="2b1bfe9110cf0c706e0d05da6f4787b55fdde2a0" translate="yes" xml:space="preserve">
          <source>Note the list of conflicted files with: &lt;code&gt;git status&lt;/code&gt; (under &lt;code&gt;Unmerged paths&lt;/code&gt; section).</source>
          <target state="translated">競合するファイルのリストに注意してください： &lt;code&gt;git status&lt;/code&gt; （ &lt;code&gt;Unmerged paths&lt;/code&gt; セクションの下）。</target>
        </trans-unit>
        <trans-unit id="76a117ad8111894a1bf378d48165f39268206dd8" translate="yes" xml:space="preserve">
          <source>Now every thing is fine and you will find your commit in gerrit</source>
          <target state="translated">これで全てが順調にいき、ゲリットの中にコミットを見つけることができます。</target>
        </trans-unit>
        <trans-unit id="439caa25a979e2fb12ce16caa7f6dd15ef11c706" translate="yes" xml:space="preserve">
          <source>Now note that the file TestClass.java is shown in red in intelliJ
Also git status will show</source>
          <target state="translated">ここで、TestClass.javaというファイルがintelliJで赤く表示されていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="da73ee3e345c38d30a956ed6fc100e554e797dbc" translate="yes" xml:space="preserve">
          <source>Now you can do the same and maintain as many local branches you want and work simultaneous my just doing a git checkout to your branch when ever necessary.</source>
          <target state="translated">これで、必要なときにはブランチに git チェックアウトをするだけで、同じようにローカルブランチのメンテナンスを行うことができるようになりました。</target>
        </trans-unit>
        <trans-unit id="25b6fa122cc4fa3ab8aae8c0fb7c6910f4daf896" translate="yes" xml:space="preserve">
          <source>Oh my, oh my, upstream changed some things, but just to use my changes...no...their changes...</source>
          <target state="translated">おやおや、川上が変更したこともありましたが、私の変更点を利用するためだけに...いや、彼らの変更点を利用するためだけに...。</target>
        </trans-unit>
        <trans-unit id="4960aa7dc5964ca6ef5eb3e74371acd1a4093407" translate="yes" xml:space="preserve">
          <source>On macOS you can install via:</source>
          <target state="translated">macOSでは、経由してインストールできます。</target>
        </trans-unit>
        <trans-unit id="10317b5751b3df6c5c097f628325b733f07f54e7" translate="yes" xml:space="preserve">
          <source>Once in the 3-ways merge, &lt;em&gt;fugitive&lt;/em&gt; will let you get the changes of any of the branches you are merging in the following fashion:</source>
          <target state="translated">3ウェイマージに入ると、 &lt;em&gt;fugitive&lt;/em&gt;はマージするブランチの変更を次の方法で取得できます。</target>
        </trans-unit>
        <trans-unit id="a577bec41e40cb755e1ccc45c2a5d18df1988e6d" translate="yes" xml:space="preserve">
          <source>Once you are finished merging the file, type &lt;code&gt;:Gwrite&lt;/code&gt; in the merged buffer. 
Vimcasts released a great &lt;a href=&quot;http://vimcasts.org/episodes/fugitive-vim-resolving-merge-conflicts-with-vimdiff/&quot;&gt;video&lt;/a&gt; explaining in detail this steps.</source>
          <target state="translated">ファイルのマージが終了したら、マージされたバッファーに &lt;code&gt;:Gwrite&lt;/code&gt; と入力します。 Vimcastsは、このステップを詳細に説明する素晴らしい&lt;a href=&quot;http://vimcasts.org/episodes/fugitive-vim-resolving-merge-conflicts-with-vimdiff/&quot;&gt;ビデオ&lt;/a&gt;をリリースしました。</target>
        </trans-unit>
        <trans-unit id="43f787b16f278fcf8aa01eef0994a4578332b046" translate="yes" xml:space="preserve">
          <source>Once you've resolved &lt;strong&gt;all&lt;/strong&gt; conflicts, do &lt;code&gt;git rebase --continue&lt;/code&gt; or whatever command 
Git said to do when you completed.</source>
          <target state="translated">&lt;strong&gt;すべての&lt;/strong&gt;競合を解決したら、 &lt;code&gt;git rebase --continue&lt;/code&gt; または完了時にGitが実行すると言ったコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="db3bda9aacc5bca97220fd96373a3421022ea32c" translate="yes" xml:space="preserve">
          <source>Once you've resolved the conflict in a file &lt;code&gt;git add the_file&lt;/code&gt;.</source>
          <target state="translated">ファイルの競合を解決したら、 &lt;code&gt;git add the_file&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="59017e16293cce2b88b043f41e02d21dac1a985e" translate="yes" xml:space="preserve">
          <source>Open each file and examine the diffs; Git demarcates them.  Hopefully it will be obvious which version of each block to keep.  You may need to discuss it with fellow developers who committed the code.</source>
          <target state="translated">それぞれのファイルを開いて diff を調べてみましょう。うまくいけば、各ブロックのどのバージョンを残すべきかが明らかになるでしょう。コードをコミットした開発者仲間と話し合う必要があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="e85b9596370fb9c69c9435dbfa9bd28dc6b6ab65" translate="yes" xml:space="preserve">
          <source>Open each of those files one by one, or all at once by:</source>
          <target state="translated">それぞれのファイルを一つずつ、または一度に開くことができます。</target>
        </trans-unit>
        <trans-unit id="90a01728725fc6bffec18879dac73281b710df12" translate="yes" xml:space="preserve">
          <source>Open the file in intelliJ, it will have sections with</source>
          <target state="translated">intelliJでファイルを開くと、そのファイルには</target>
        </trans-unit>
        <trans-unit id="d94753520a26eddd7b65afc1ab802df26dfc0b83" translate="yes" xml:space="preserve">
          <source>Or else you will have to use a GUI merge tool to step through files one by one, say the merge tool is &lt;code&gt;p4merge&lt;/code&gt;, or write any one's name you've already installed</source>
          <target state="translated">または、GUIマージツールを使用してファイルを1つずつステップ実行する必要があります。たとえば、マージツールが &lt;code&gt;p4merge&lt;/code&gt; であるか、インストール済みの名前を記述します。</target>
        </trans-unit>
        <trans-unit id="33dc7a1152af93385b97abf2bed64a4471a85875" translate="yes" xml:space="preserve">
          <source>PS: It will work only if you've configured git with with your code and Visual Studio Code.</source>
          <target state="translated">PS:コードとVisual Studio Codeでgitを設定している場合のみ動作します。</target>
        </trans-unit>
        <trans-unit id="6052e8e1fbe0373fcc55364272596ceb5789b5e1" translate="yes" xml:space="preserve">
          <source>Path and filename conflicts can be solved by &lt;code&gt;git add&lt;/code&gt;/&lt;code&gt;git rm&lt;/code&gt;.</source>
          <target state="translated">パスとファイル名の競合は &lt;code&gt;git add&lt;/code&gt; / &lt;code&gt;git rm&lt;/code&gt; で解決できます。</target>
        </trans-unit>
        <trans-unit id="d7dd1808b84c37fb3ea9b4448dcf162c6448fab5" translate="yes" xml:space="preserve">
          <source>Plan ahead; communicate with co-workers.</source>
          <target state="translated">前もって計画を立て、同僚とコミュニケーションをとる。</target>
        </trans-unit>
        <trans-unit id="a404d7bca3c1d51acaf1b7dab0af047b2a2ffb83" translate="yes" xml:space="preserve">
          <source>Planning ahead and being aware of what others are working on can help prevent merge conflicts and/or help resolve them earlier -- while the details are still fresh in mind.</source>
          <target state="translated">前もって計画を立て、他の人が何に取り組んでいるかを把握しておくことで、マージの衝突を防ぎ、詳細がまだ記憶に新しいうちに早期に解決することができます。</target>
        </trans-unit>
        <trans-unit id="83c0b885b0a38566ed9722438c0513be76f77cfd" translate="yes" xml:space="preserve">
          <source>Please follow the following steps to fix merge conflicts in Git:</source>
          <target state="translated">Git でのマージコンフリクトを修正するには、以下の手順に従ってください。</target>
        </trans-unit>
        <trans-unit id="f7d4c271606f9ee9168d1a393f65cdddde869ceb" translate="yes" xml:space="preserve">
          <source>Pull the recent contents from master:
&lt;strong&gt;&lt;em&gt;git pull --rebase origin master&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">マスターから最近のコンテンツを&lt;strong&gt;&lt;em&gt;プルします&lt;/em&gt;&lt;/strong&gt; ： &lt;strong&gt;&lt;em&gt;git pull --rebase origin master&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3ee9fffd45db979e0d1c74f03d3dd56b26471c3c" translate="yes" xml:space="preserve">
          <source>Push to the master branch:
&lt;strong&gt;&lt;em&gt;git push&lt;/em&gt;&lt;/strong&gt; (to your Git repository)</source>
          <target state="translated">マスターブランチに&lt;strong&gt;&lt;em&gt;プッシュ&lt;/em&gt;&lt;/strong&gt; ： &lt;strong&gt;&lt;em&gt;git push&lt;/em&gt;&lt;/strong&gt; （Gitリポジトリに）</target>
        </trans-unit>
        <trans-unit id="b6fbb68683d3832aa04f181677975e02a81e5630" translate="yes" xml:space="preserve">
          <source>REMOTE &amp;ndash; file you are merging into your branch</source>
          <target state="translated">REMOTE &amp;ndash;ブランチにマージするファイル</target>
        </trans-unit>
        <trans-unit id="88b35db955662f7fccc81b814566407d747daaa3" translate="yes" xml:space="preserve">
          <source>Related: &lt;a href=&quot;https://stackoverflow.com/q/25576415/55075&quot;&gt;What is the precise meaning of &quot;ours&quot; and &quot;theirs&quot; in git?&lt;/a&gt;</source>
          <target state="translated">関連： &lt;a href=&quot;https://stackoverflow.com/q/25576415/55075&quot;&gt;gitの「ours」と「theirs」の正確な意味は何ですか？&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="bb682014aabba1d2c235e608a21de9821bfbc40c" translate="yes" xml:space="preserve">
          <source>Replacing &lt;code&gt;$MERGED_IN_BRANCH&lt;/code&gt; with the branch I merged in and &lt;code&gt;[path]&lt;/code&gt; with the file that is conflicting. This command will log all the commits, in patch form, between (&lt;code&gt;..&lt;/code&gt;) two commits. If you leave one side empty like in the commands above git will automatically use &lt;code&gt;HEAD&lt;/code&gt; (the branch you are merging into in this case).</source>
          <target state="translated">&lt;code&gt;$MERGED_IN_BRANCH&lt;/code&gt; を、私がマージしたブランチで置き換え、 &lt;code&gt;[path]&lt;/code&gt; を競合するファイルで置き換えます。 このコマンドは、2つのコミット（ &lt;code&gt;..&lt;/code&gt; ）の間のすべてのコミットをパッチ形式でログに記録します。 上記のコマンドのように片側を空のままにすると、gitは自動的に &lt;code&gt;HEAD&lt;/code&gt; （この場合、マージするブランチ）を使用します。</target>
        </trans-unit>
        <trans-unit id="754ec967779bd2370b6031e462d4cfe9fcbd0f6a" translate="yes" xml:space="preserve">
          <source>Resolve the conflicts. Git will mark the conflicts in the working tree. Edit the files into shape and &lt;code&gt;git add&lt;/code&gt; them to the index. Use &lt;code&gt;git commit&lt;/code&gt; to seal the deal.</source>
          <target state="translated">競合を解決します。 Gitは作業ツリーで競合をマークします。 ファイルを整形して &lt;code&gt;git add&lt;/code&gt; インデックスに追加します。 &lt;code&gt;git commit&lt;/code&gt; を使用して契約を締結します。</target>
        </trans-unit>
        <trans-unit id="10f8070070547ece9227547970e8168b7821ea8b" translate="yes" xml:space="preserve">
          <source>Review changes and accept either version for each of them.</source>
          <target state="translated">変更点を確認して、それぞれのバージョンのどちらかを受け入れる。</target>
        </trans-unit>
        <trans-unit id="954daa8b00335c66e262106e01f7dc22b19a4372" translate="yes" xml:space="preserve">
          <source>Right</source>
          <target state="translated">Right</target>
        </trans-unit>
        <trans-unit id="a2bfb47b2fe2945a9227665d3b4bfc8f09393dfe" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://medium.com/@yairchu/how-git-mediate-made-me-stop-fearing-merge-conflicts-and-start-treating-them-like-an-easy-game-of-a2c71b919984&quot;&gt;this post&lt;/a&gt; for a quick intro on how to use it.</source>
          <target state="translated">使い方の簡単な紹介については、 &lt;a href=&quot;https://medium.com/@yairchu/how-git-mediate-made-me-stop-fearing-merge-conflicts-and-start-treating-them-like-an-easy-game-of-a2c71b919984&quot;&gt;この投稿&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="3ccbda76134d2bbffe0a7eb4a8057418496f4c8f" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://www.kernel.org/pub/software/scm/git/docs/git-merge.html#_how_conflicts_are_presented&quot;&gt;How Conflicts Are Presented&lt;/a&gt; or, in Git, the &lt;code&gt;git merge&lt;/code&gt; documentation to understand what merge conflict markers are.</source>
          <target state="translated">マージ競合マーカーとは何かを理解するには、 &lt;a href=&quot;https://www.kernel.org/pub/software/scm/git/docs/git-merge.html#_how_conflicts_are_presented&quot;&gt;競合がどのように提示される&lt;/a&gt;か、またはGitで &lt;code&gt;git merge&lt;/code&gt; ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="494638b10d967211b2ee49f2b5a0c6f2944955f6" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;https://help.github.com/articles/resolving-a-merge-conflict-from-the-command-line/&quot;&gt;Resolving a merge conflict from the command line&lt;/a&gt; at GitHub</source>
          <target state="translated">参照：GitHubの&lt;a href=&quot;https://help.github.com/articles/resolving-a-merge-conflict-from-the-command-line/&quot;&gt;コマンドラインからのマージ競合の解決&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="117985687fb4e31fc4b0b70ce40cfa454b78879d" translate="yes" xml:space="preserve">
          <source>Simply download it and run in repo as:</source>
          <target state="translated">ダウンロードしてレポで実行するだけです。</target>
        </trans-unit>
        <trans-unit id="3b4d4db1016a0dcd197daee09f21a7c6173951d5" translate="yes" xml:space="preserve">
          <source>Simply, if you know well that changes in one of the repositories is not important, and want to resolve all changes in favor of the other one, use:</source>
          <target state="translated">単に、あなたがよく知っている場合は、リポジトリのいずれかの変更が重要ではないことを知っているし、他のもののためにすべての変更を解決したい場合は、使用します。</target>
        </trans-unit>
        <trans-unit id="bdc26a6c55a54975e8e87cc14ea1935913a21dd5" translate="yes" xml:space="preserve">
          <source>So instead I do:</source>
          <target state="translated">だから代わりに私がやる。</target>
        </trans-unit>
        <trans-unit id="3e66f4270aaf5aad76b4a5003b6d4c3258489502" translate="yes" xml:space="preserve">
          <source>So you decide to take a look at the changes:</source>
          <target state="translated">その変化を見てみることにしたんですね。</target>
        </trans-unit>
        <trans-unit id="ad9d48522fcf343c56c523ee1bc1c12a8297dbe1" translate="yes" xml:space="preserve">
          <source>So you get up-to-date and try again, but have a conflict:</source>
          <target state="translated">そこで、最新の情報を入手して、もう一度試してみたものの、競合が発生してしまいます。</target>
        </trans-unit>
        <trans-unit id="8f28dcb6026cd0952fcd9aac2a3fbb12726aed7c" translate="yes" xml:space="preserve">
          <source>Solve the conflicts separately for each file by one of the following approaches:</source>
          <target state="translated">以下のいずれかの方法で、ファイルごとにコンフリクトを個別に解決します。</target>
        </trans-unit>
        <trans-unit id="b8390b6223d0ac9dbfbdb4d9ee338a66d523cbc0" translate="yes" xml:space="preserve">
          <source>Somebody already mentioned this, but understanding the intention behind each diff hunk is generally very helpful for understanding where a conflict came from and how to handle it.</source>
          <target state="translated">すでに誰かが言及していますが、それぞれの diff ハンクの背後にある意図を理解することは、一般的にどこから紛争が発生したのかを理解し、それをどのように処理するのかを理解する上で非常に役立ちます。</target>
        </trans-unit>
        <trans-unit id="e94e2a8ac1328e89e2951fe041052cadadb87fc8" translate="yes" xml:space="preserve">
          <source>Start the mergetool and check the conflicts and fix them...and check the changes in the remote branch with your current branch:
&lt;strong&gt;&lt;em&gt;git mergetool&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">mergetoolを起動し、競合を確認して修正します...そしてリモートブランチの変更を現在のブランチで確認します： &lt;strong&gt;&lt;em&gt;git mergetool&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5ff57f4185e884322f43c9c59da60f12f41285ea" translate="yes" xml:space="preserve">
          <source>TL;DR</source>
          <target state="translated">TL;DR</target>
        </trans-unit>
        <trans-unit id="db2022cd2cf86579d8076f3076c361ff76371894" translate="yes" xml:space="preserve">
          <source>Ta-da!</source>
          <target state="translated">Ta-da!</target>
        </trans-unit>
        <trans-unit id="cb0d4640cc97fab3274414a90556c59b65391899" translate="yes" xml:space="preserve">
          <source>The best thing I have found is to use the &quot;diff3&quot; merge conflict style:</source>
          <target state="translated">私が見つけた最良の方法は、&quot;diff3 &quot;マージコンフリクトスタイルを使うことです。</target>
        </trans-unit>
        <trans-unit id="fa416c6119c6e16e6b0b6ae731c70e6bbd2ef937" translate="yes" xml:space="preserve">
          <source>The command doesn't necessarily open a GUI unless you install one. Running &lt;code&gt;git mergetool&lt;/code&gt; for me resulted in &lt;code&gt;vimdiff&lt;/code&gt; being used. You can install one of the following tools to use it instead: &lt;code&gt;meld&lt;/code&gt;, &lt;code&gt;opendiff&lt;/code&gt;, &lt;code&gt;kdiff3&lt;/code&gt;, &lt;code&gt;tkdiff&lt;/code&gt;, &lt;code&gt;xxdiff&lt;/code&gt;, &lt;code&gt;tortoisemerge&lt;/code&gt;, &lt;code&gt;gvimdiff&lt;/code&gt;, &lt;code&gt;diffuse&lt;/code&gt;, &lt;code&gt;ecmerge&lt;/code&gt;, &lt;code&gt;p4merge&lt;/code&gt;, &lt;code&gt;araxis&lt;/code&gt;, &lt;code&gt;vimdiff&lt;/code&gt;, &lt;code&gt;emerge&lt;/code&gt;.</source>
          <target state="translated">インストールしない限り、このコマンドでGUIが開かれるとは限りません。 私のために &lt;code&gt;git mergetool&lt;/code&gt; を実行すると、 &lt;code&gt;vimdiff&lt;/code&gt; が使用されました。 代わりに、次のいずれかのツールをインストールして使用できます： &lt;code&gt;opendiff&lt;/code&gt; 、 opendiff 、 &lt;code&gt;kdiff3&lt;/code&gt; 、 &lt;code&gt;tkdiff&lt;/code&gt; 、 &lt;code&gt;xxdiff&lt;/code&gt; 、 &lt;code&gt;tortoisemerge&lt;/code&gt; 、 &lt;code&gt;gvimdiff&lt;/code&gt; 、 &lt;code&gt;diffuse&lt;/code&gt; 、 &lt;code&gt;ecmerge&lt;/code&gt; 、 &lt;code&gt;p4merge&lt;/code&gt; 、 &lt;code&gt;araxis&lt;/code&gt; 、 &lt;code&gt;vimdiff&lt;/code&gt; 、 &lt;code&gt;emerge&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="00181eebd298a786ad84b0a5cfdc81e9f1a4196b" translate="yes" xml:space="preserve">
          <source>The middle section is what the common ancestor looked like. This is useful because you can compare it to the top and bottom versions to get a better sense of what was changed on each branch, which gives you a better idea for what the purpose of each change was.</source>
          <target state="translated">真ん中の部分は、共通の祖先がどのようなものだったかを示しています。これを上下のバージョンと比較することで、各ブランチで何が変更されたのかをよりよく知ることができ、それぞれの変更の目的が何だったのかをよりよく知ることができるので便利です。</target>
        </trans-unit>
        <trans-unit id="84eff26971566856e04b40855b74ac202b029577" translate="yes" xml:space="preserve">
          <source>Then I can run the following commands to see the two diff hunks that caused the conflict:</source>
          <target state="translated">そうすれば、以下のコマンドを実行して、コンフリクトの原因となった二つの diff hunks を確認することができます。</target>
        </trans-unit>
        <trans-unit id="960e9499cb2875d16461130707873670bf09ea5c" translate="yes" xml:space="preserve">
          <source>Then every time you come across a merge conflict you just need to run this command:</source>
          <target state="translated">そして、マージの競合に遭遇するたびに、このコマンドを実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="3259e73bc0d30282ee86971a518870c81c32ad76" translate="yes" xml:space="preserve">
          <source>Then it opens the Kdiff3, and first tries to resolve the merge conflicts automatically. Most of the conflicts would be resolved spontaneously and you need to fix the rest manually.</source>
          <target state="translated">そして Kdiff3 を開き、最初にマージのコンフリクトを自動的に解決しようとします。ほとんどのコンフリクトは自然に解決され、残りのコンフリクトは手動で修正する必要があります。</target>
        </trans-unit>
        <trans-unit id="cd0247227edaffbcc3ab9deb3c823775c53bdc38" translate="yes" xml:space="preserve">
          <source>Then once you're done, save the file and it goes to the next file with conflict and you do the same thing again until all the conflicts are resolved.</source>
          <target state="translated">そして、それが終わったら、ファイルを保存して、それはコンフリクトのある次のファイルに行き、すべてのコンフリクトが解決されるまで、あなたは再び同じことを行います。</target>
        </trans-unit>
        <trans-unit id="7a782f5dc825122a5b15059b520496a2b37aeed9" translate="yes" xml:space="preserve">
          <source>Then open the project in VS and go to Team Explorer -&amp;gt; Branch.  Now there is a message that says Merge is pending and conflicting files are listed right below the message.</source>
          <target state="translated">次に、VSでプロジェクトを開き、チームエクスプローラー-&amp;gt;ブランチに移動します。 Mergeが保留中であり、競合するファイルがメッセージのすぐ下にリストされているというメッセージが表示されます。</target>
        </trans-unit>
        <trans-unit id="6276b71b7b9d1df026bc479f15195ae504382e10" translate="yes" xml:space="preserve">
          <source>Then setup git configs to use Kdiff as its mergetool:</source>
          <target state="translated">そして、git の設定で Kdiff を mergetool として使用するように設定します。</target>
        </trans-unit>
        <trans-unit id="6e37b00edbd74e9993355959a37378dd58899b7f" translate="yes" xml:space="preserve">
          <source>Then you can use the following keyboard shortcuts:</source>
          <target state="translated">そうすると、以下のようなキーボードショートカットを使うことができます。</target>
        </trans-unit>
        <trans-unit id="35380e99d8fccffbf29acf9e8f9efd6178d21e86" translate="yes" xml:space="preserve">
          <source>There are 3 steps:</source>
          <target state="translated">3つのステップがあります。</target>
        </trans-unit>
        <trans-unit id="886c558dcdd074dc65267395c98971c06030fdc7" translate="yes" xml:space="preserve">
          <source>These 4 views are</source>
          <target state="translated">これらの4つのビューは</target>
        </trans-unit>
        <trans-unit id="22479224c315e3ac8965a8d67b70537247f8ee88" translate="yes" xml:space="preserve">
          <source>This above command is the most useful command in my git life which saved a lots of time.</source>
          <target state="translated">このコマンドは私のgitライフの中で最も便利なコマンドで、多くの時間を節約してくれました。</target>
        </trans-unit>
        <trans-unit id="59037e1d8acc37c2c0be80dd1fa1d263cb2c7a35" translate="yes" xml:space="preserve">
          <source>This answers is to add an alternative for those VIM users like I that prefers to do everything within the editor.</source>
          <target state="translated">この答えは、エディタ内ですべてを行うことを好む私のようなそれらのVIMユーザーのための代替手段を追加することです。</target>
        </trans-unit>
        <trans-unit id="61c64505fa913e4a77f659489f58212df9cc15bb" translate="yes" xml:space="preserve">
          <source>This is not the same as using a merge tool, since a merge tool will include all of the non-conflicting diff hunks too. I find that to be distracting.</source>
          <target state="translated">これはマージツールを使うのと同じではありません、マージツールには矛盾しない diff hunks もすべて含まれますから。これは気が散ると思います。</target>
        </trans-unit>
        <trans-unit id="7a9726ba4331f750e36611e6d88058f64fce2ae7" translate="yes" xml:space="preserve">
          <source>This produces conflict markers like this:</source>
          <target state="translated">これにより、このようなコンフリクトマーカーが生成されます。</target>
        </trans-unit>
        <trans-unit id="9429d7dd63b1a82244a4ee81fc2e98d38e5dc2f3" translate="yes" xml:space="preserve">
          <source>This shows all of the commits that touched that file in between the common ancestor and the two heads you are merging. (So it doesn't include commits that already exist in both branches before merging.) This helps you ignore diff hunks that clearly are not a factor in your current conflict.</source>
          <target state="translated">これは、共通の祖先とマージしようとしている二つのブランチの間で、そのファイルに触れたすべてのコミットを表示します (つまり、マージ前に両方のブランチにすでに存在していたコミットは含まれません)。(つまり、マージ前に両方のブランチに既に存在していたコミットは含まれません)。これは、現在の競合の要因ではないことが明らかな diff ハンクを無視するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="e8052170fcce5a238152e51b1b9fa51d7a1954b9" translate="yes" xml:space="preserve">
          <source>This way you are more deliberate about which files get added and you also get to review the list and think a bit more while using the editor for the message.  I find it also improves my commit messages when I use a full screen editor rather than the &lt;code&gt;-m&lt;/code&gt; option.</source>
          <target state="translated">このようにすると、追加するファイルについてより慎重になり、メッセージのエディターを使用しながらリストを確認し、もう少し考えることができます。 &lt;code&gt;-m&lt;/code&gt; オプションではなく全画面エディターを使用すると、コミットメッセージも改善されることがわかりました。</target>
        </trans-unit>
        <trans-unit id="9bb8d189f888727aa299a713fa141bbbf42bccb5" translate="yes" xml:space="preserve">
          <source>This will allow you to see what commits went into the file in the two branches after they diverged. It usually makes it much easier to solve conflicts.</source>
          <target state="translated">これにより、2つのブランチで分岐した後にどのコミットがファイルに入ったのかを確認することができます。これにより、通常は競合を解決するのがはるかに簡単になります。</target>
        </trans-unit>
        <trans-unit id="9f7b2877e2f1a7bd2921ac234215cbfe9c395a9f" translate="yes" xml:space="preserve">
          <source>This will open three buffers (mine, theirs, and the output buffer). Navigate by pressing 'n' (next region), 'p' (prevision region). Press 'a' and 'b' to copy mine or theirs region to the output buffer, respectively. And/or edit the output buffer directly.</source>
          <target state="translated">これで 3 つのバッファが開きます (私のバッファ、彼らのバッファ、出力バッファ)。n' (次の領域)、'p' (先読み領域)を押して移動します。a' と 'b' を押して、それぞれ mine と theirs の領域を出力バッファにコピーします。また、出力バッファを直接編集することもできます。</target>
        </trans-unit>
        <trans-unit id="21f2993514dad951f274354d8d0b9637a2d6b95f" translate="yes" xml:space="preserve">
          <source>This will set vimdiff as the default merge tool.</source>
          <target state="translated">これにより、vimdiff がデフォルトのマージツールとして設定されます。</target>
        </trans-unit>
        <trans-unit id="3cd317ab4778d4d010adb46a5d176b3961ac48ba" translate="yes" xml:space="preserve">
          <source>Thus, if you don't want to use the command-line or &lt;em&gt;any 3rd party tools that are offered here from older answers&lt;/em&gt;, go with GitHub's native tool.</source>
          <target state="translated">したがって、 &lt;em&gt;古い回答からここで提供されている&lt;/em&gt;コマンドラインや&lt;em&gt;サードパーティのツール&lt;/em&gt;を使用したくない場合は、GitHubのネイティブツールを使用してください。</target>
        </trans-unit>
        <trans-unit id="3599a4eee13e823c58dbc9bf040eace561214a89" translate="yes" xml:space="preserve">
          <source>Tip Five</source>
          <target state="translated">ヒント5</target>
        </trans-unit>
        <trans-unit id="fefceba8ec7bb1e54efb028d96558e09d4820c6f" translate="yes" xml:space="preserve">
          <source>Tip Four</source>
          <target state="translated">ヒント4</target>
        </trans-unit>
        <trans-unit id="8ca22f40b9bee969d8e790727afea793e1112fac" translate="yes" xml:space="preserve">
          <source>Tip One</source>
          <target state="translated">ヒント1</target>
        </trans-unit>
        <trans-unit id="a998c26341cf9c0a16ddb925ccfd55e91c1a2222" translate="yes" xml:space="preserve">
          <source>Tip Three</source>
          <target state="translated">ヒント3</target>
        </trans-unit>
        <trans-unit id="d41d33682690e4ffb5a78c2c2d6f8f79b7aa226e" translate="yes" xml:space="preserve">
          <source>Tip Two</source>
          <target state="translated">ヒント2</target>
        </trans-unit>
        <trans-unit id="fab1e01085f3441c59ae11c6bd959811634c7f61" translate="yes" xml:space="preserve">
          <source>To accept local/our version, use: &lt;code&gt;git checkout --ours path/file&lt;/code&gt;</source>
          <target state="translated">ローカル/私たちのバージョンを受け入れるには、次を使用します： &lt;code&gt;git checkout --ours path/file&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fc9e8d98a4f0ab6180fa3f017fa21cb84a1c8789" translate="yes" xml:space="preserve">
          <source>To accept remote/other version, use: &lt;code&gt;git checkout --theirs path/file&lt;/code&gt;. This will reject any local changes you did for that file.</source>
          <target state="translated">リモート/その他のバージョンを受け入れるには、 &lt;code&gt;git checkout --theirs path/file&lt;/code&gt; を使用します 。 これにより、そのファイルに対して行ったローカルでの変更はすべて拒否されます。</target>
        </trans-unit>
        <trans-unit id="328411be8e4df9b5a71a4f7ca3e682ee0f2b25e1" translate="yes" xml:space="preserve">
          <source>To check if everything is merged successfully, just run the mergetool command again, you should get this result:</source>
          <target state="translated">すべてが正常にマージされたかどうかを確認するには、mergetoolコマンドをもう一度実行すると、このような結果が得られるはずです。</target>
        </trans-unit>
        <trans-unit id="cba02a9087cefb199c787a07b77e046e2a0cbe7e" translate="yes" xml:space="preserve">
          <source>Tpope came up with this great plugin for VIM called &lt;a href=&quot;https://github.com/tpope/vim-fugitive&quot;&gt;fugitive&lt;/a&gt;. Once installed you can run &lt;code&gt;:Gstatus&lt;/code&gt; to check the files that have conflict and &lt;code&gt;:Gdiff&lt;/code&gt; to open Git in a 3 ways merge.</source>
          <target state="translated">Tpopeは、VIM用のこの&lt;a href=&quot;https://github.com/tpope/vim-fugitive&quot;&gt;fugitive&lt;/a&gt;という素晴らしいプラグインを思い付きました。 インストールしたら、 &lt;code&gt;:Gstatus&lt;/code&gt; を実行して競合のあるファイルを確認し、 ：Gdiffを実行して3つの方法でGitを開きます。</target>
        </trans-unit>
        <trans-unit id="297282c36d932ef18e4c066b3c37718ab7751ff6" translate="yes" xml:space="preserve">
          <source>Try Visual Studio Code for editing if you aren't already.
What it does is after you try merging(and land up in merge conflicts).VS code automatically detects the merge conflicts.</source>
          <target state="translated">もしあなたがまだ編集していないのであれば、Visual Studioのコードを試してみてください。何をするかというと、マージしようとすると(マージコンフリクトに陥ってしまう)、VSコードは自動的にマージコンフリクトを検出します。</target>
        </trans-unit>
        <trans-unit id="792091d7030cdecc4d447756a237c850f8471184" translate="yes" xml:space="preserve">
          <source>Try: &lt;code&gt;git mergetool&lt;/code&gt;</source>
          <target state="translated">試してください： &lt;code&gt;git mergetool&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2038bdec9210202d0d9d74839e3925ff0cd91ba1" translate="yes" xml:space="preserve">
          <source>Up</source>
          <target state="translated">Up</target>
        </trans-unit>
        <trans-unit id="d646749d4d83e809e6e32cea285d2b3353654aee" translate="yes" xml:space="preserve">
          <source>Use GUI to solve the conflicts: &lt;code&gt;git mergetool&lt;/code&gt; (the easiest way).</source>
          <target state="translated">GUIを使用して競合を解決します： &lt;code&gt;git mergetool&lt;/code&gt; （最も簡単な方法）。</target>
        </trans-unit>
        <trans-unit id="cf410607b4d646fae6b37dffcb3f37fcc481f52b" translate="yes" xml:space="preserve">
          <source>Use a mergetool. &lt;code&gt;git mergetool&lt;/code&gt; to launch a graphical mergetool which will work you through the merge.</source>
          <target state="translated">mergetoolを使用します。 &lt;code&gt;git mergetool&lt;/code&gt; は、マージを実行するグ​​ラフィカルなマージツールを起動します。</target>
        </trans-unit>
        <trans-unit id="31701f35723c5222b63893f168de94cece275c49" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;patience&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;patience&lt;/code&gt; を使う</target>
        </trans-unit>
        <trans-unit id="880da6b11bd5b493205b58216361da302d14dcfc" translate="yes" xml:space="preserve">
          <source>Usually, you only want to see the changes for a particular file:</source>
          <target state="translated">通常は、特定のファイルの変更点だけを見たい場合が多いです。</target>
        </trans-unit>
        <trans-unit id="7c63bd7f640efb4658c5ef3f2317ffb187782ce9" translate="yes" xml:space="preserve">
          <source>Verify your changes with automated tools.</source>
          <target state="translated">自動化されたツールで変更内容を確認します。</target>
        </trans-unit>
        <trans-unit id="f60a56ea3737fcb2ba54e60f89647a6f3fd091f4" translate="yes" xml:space="preserve">
          <source>What I do to work around this issue is open up two command lines and in one run</source>
          <target state="translated">この問題を回避するためにやっていることは、2つのコマンドラインを開き、1つのコマンドラインで</target>
        </trans-unit>
        <trans-unit id="ca7621a606f4aed5c196696f398beac26081f137" translate="yes" xml:space="preserve">
          <source>When finished with all buffers type</source>
          <target state="translated">すべてのバッファが終了したら、次のように入力します。</target>
        </trans-unit>
        <trans-unit id="b196d6892bc8c0cda1ad69fd5abf79daf53a8311" translate="yes" xml:space="preserve">
          <source>When finished: Press 'q'. Emacs asks you if you want to save this buffer: yes.
After finishing a buffer mark it as resolved by running from the teriminal:</source>
          <target state="translated">終了したら q' を押してください。Emacs はこのバッファを保存するかどうかを尋ねてきます。バッファを終了したら、犯人から逃げて解決したとマークしてください。</target>
        </trans-unit>
        <trans-unit id="0079906e6ed4bd3200fdeda0e2f1d9bd10432c17" translate="yes" xml:space="preserve">
          <source>When running &quot;git fetch&quot; and then &quot;git merge&quot;</source>
          <target state="translated">git fetch &quot;を実行してから &quot;git merge &quot;を実行すると</target>
        </trans-unit>
        <trans-unit id="ed97e73a69229caf78e776810b2baf62c68f0e1e" translate="yes" xml:space="preserve">
          <source>When running &quot;git fetch&quot; and then &quot;git rebase&quot;</source>
          <target state="translated">git fetch &quot;を実行してから &quot;git rebase &quot;を実行すると</target>
        </trans-unit>
        <trans-unit id="d3e31411344bc765f68830306cd14dace0d3781b" translate="yes" xml:space="preserve">
          <source>When running &quot;git pull&quot; (which is actually equal to one of the above-mentioned conditions)</source>
          <target state="translated">git pull」を実行する場合(実際には上記の条件のいずれかに該当します</target>
        </trans-unit>
        <trans-unit id="df97565f7f4215529afa06a8719dc16c812bbb7c" translate="yes" xml:space="preserve">
          <source>When running &quot;git stash pop&quot;</source>
          <target state="translated">git stash pop」を実行する場合</target>
        </trans-unit>
        <trans-unit id="b925d35f901c8e88e7050608cd7f82c6637d6e6a" translate="yes" xml:space="preserve">
          <source>When visiting a buffer requiring edits in Emacs, type</source>
          <target state="translated">Emacs で編集が必要なバッファにアクセスする場合は、次のようにタイプします。</target>
        </trans-unit>
        <trans-unit id="a679f0f3e69fd30103ffcbe92197cb52f6926959" translate="yes" xml:space="preserve">
          <source>When you're applying git patches (commits that are exported to files to be transferred, for example, by email)</source>
          <target state="translated">gitパッチ(メールなどで転送するファイルに書き出したコミット)を適用する場合</target>
        </trans-unit>
        <trans-unit id="7dbf0b1ee668c5327c5601883ca0d2f8229365d5" translate="yes" xml:space="preserve">
          <source>Which has two drawbacks -</source>
          <target state="translated">これには2つの欠点があります。</target>
        </trans-unit>
        <trans-unit id="31bc2e26b996657f230dedf9a07bd32f1e303695" translate="yes" xml:space="preserve">
          <source>You can also install &lt;strong&gt;visual tool&lt;/strong&gt; for this, e.g. &lt;code&gt;meld&lt;/code&gt; and run</source>
          <target state="translated">このための&lt;strong&gt;ビジュアルツール&lt;/strong&gt;をインストールすることもできます（例： &lt;code&gt;meld&lt;/code&gt; and run）</target>
        </trans-unit>
        <trans-unit id="790b31a63efa02e224509906d42d1e68c01a62b4" translate="yes" xml:space="preserve">
          <source>You can also read about merge conflict markers and how to resolve them in the &lt;a href=&quot;http://git-scm.com/book&quot;&gt;Pro Git&lt;/a&gt; book section &lt;a href=&quot;http://git-scm.com/book/ch3-2.html#Basic-Merge-Conflicts&quot;&gt;Basic Merge Conflicts&lt;/a&gt;.</source>
          <target state="translated">マージ競合マーカーとその解決方法については、 &lt;a href=&quot;http://git-scm.com/book&quot;&gt;Pro Git&lt;/a&gt;ブックのセクション「 &lt;a href=&quot;http://git-scm.com/book/ch3-2.html#Basic-Merge-Conflicts&quot;&gt;基本的なマージ競合&lt;/a&gt; 」を参照してください。</target>
        </trans-unit>
        <trans-unit id="9f31297c5e422ba4e0ac2754f95ec698d7a04e9c" translate="yes" xml:space="preserve">
          <source>You can follow this link to check ho to fix the conflict in the file</source>
          <target state="translated">ファイル内のコンフリクトを修正するには、以下のリンクを参照してください。</target>
        </trans-unit>
        <trans-unit id="8b03c300fb2dfcf5e23681981aa19ff96cc9a605" translate="yes" xml:space="preserve">
          <source>You can navigate among these views using</source>
          <target state="translated">これらのビューの間を移動するには</target>
        </trans-unit>
        <trans-unit id="b523d391ec33d09697ad69e6d5a6118d93f4340e" translate="yes" xml:space="preserve">
          <source>You can try &lt;a href=&quot;https://github.com/eamodio/vscode-gitlens&quot;&gt;Gitlense&lt;/a&gt; for VS Code, They key features are:</source>
          <target state="translated">VS Codeの&lt;a href=&quot;https://github.com/eamodio/vscode-gitlens&quot;&gt;Gitlense&lt;/a&gt;を試すことができます。主な機能は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="77487b0c89edd8fd842e99d65a1b39d2c6b378f5" translate="yes" xml:space="preserve">
          <source>You can work through the conflict with a number of tools:</source>
          <target state="translated">いくつかのツールを使って葛藤を乗り越えていくことができます。</target>
        </trans-unit>
        <trans-unit id="b30d311ef730d06366142f68b918eb7de6eff6a8" translate="yes" xml:space="preserve">
          <source>You could fix merge conflicts in a number of ways as other have detailed.</source>
          <target state="translated">他の人が詳細に説明しているように、いくつかの方法でマージ時の競合を修正することができます。</target>
        </trans-unit>
        <trans-unit id="9c2ffbd6fc110a458093bbd52a05163f36ae3277" translate="yes" xml:space="preserve">
          <source>You may also find this helpful:</source>
          <target state="translated">こちらも参考になるかもしれません。</target>
        </trans-unit>
        <trans-unit id="286fb5e21b99f880f05109475c17463fa0b3267f" translate="yes" xml:space="preserve">
          <source>You need to install a merge tool which is compatible with Git to resolve the conflicts. I personally use KDiff3, and I've found it nice and handy. You can download its Windows version here:</source>
          <target state="translated">競合を解決するには、Gitと互換性のあるマージツールをインストールする必要があります。個人的には KDiff3 を使っています。Windows 版はこちらからダウンロードできます。</target>
        </trans-unit>
        <trans-unit id="434d4f50f345ed0c2068ebd627e18730e17b1cea" translate="yes" xml:space="preserve">
          <source>You're going to pull some changes, but oops, you're not up to date:</source>
          <target state="translated">変更点を引っ張るつもりだろうが、おっと、最新ではない。</target>
        </trans-unit>
        <trans-unit id="702de8ea769f6905593d16855500a2a2250467e0" translate="yes" xml:space="preserve">
          <source>[Update - as time has passed I've switched more to:</source>
          <target state="translated">[更新-時間が経つにつれ、私はより多くのものに切り替えました。</target>
        </trans-unit>
        <trans-unit id="f262650e9e1db8dba57ae4f90e12681210514be8" translate="yes" xml:space="preserve">
          <source>a) All new/changed files get added and that might include some unwanted changes.</source>
          <target state="translated">a)すべての新しい変更されたファイルが追加され、不要な変更が含まれている可能性があります。</target>
        </trans-unit>
        <trans-unit id="d8f51ea63fa8dabc79021e3ac41153644af4867d" translate="yes" xml:space="preserve">
          <source>and after finishing a file, you will have to save and close, so the next one will open.</source>
          <target state="translated">と、ファイルを終えた後に保存して閉じると、次のファイルが開くようになります。</target>
        </trans-unit>
        <trans-unit id="d11a6901ad3dd341ac6dec5ff43994226ec32610" translate="yes" xml:space="preserve">
          <source>and in the other</source>
          <target state="translated">そして、他方では</target>
        </trans-unit>
        <trans-unit id="8af7458f49d10ad26c59eed720fbe89d311a8e8a" translate="yes" xml:space="preserve">
          <source>b) You don't get to review the file list first.</source>
          <target state="translated">b)まずファイルリストを見直さない。</target>
        </trans-unit>
        <trans-unit id="761e2de83a662b85af44b187e5329eda0d6cc296" translate="yes" xml:space="preserve">
          <source>because pull implies a merge and if you have changes locally that you didn't want merged you can easily end up with merged code and/or merge conflicts for code that shouldn't have been merged.</source>
          <target state="translated">プルはマージを意味するので、マージしたくない変更をローカルで行った場合、マージされたコードやマージされるべきではないコードのマージコンフリクトが発生しやすくなるからです。</target>
        </trans-unit>
        <trans-unit id="1d9e48cd581ca4bff14e812e60b255593b08a1f2" translate="yes" xml:space="preserve">
          <source>ctrl</source>
          <target state="translated">ctrl</target>
        </trans-unit>
        <trans-unit id="951f120ff31d9ffa4990456740576c71f454fd6f" translate="yes" xml:space="preserve">
          <source>followed by</source>
          <target state="translated">続いて</target>
        </trans-unit>
        <trans-unit id="84d20a21b4d0ddce218ad7c73b3cd55f875524fe" translate="yes" xml:space="preserve">
          <source>git add</source>
          <target state="translated">git add</target>
        </trans-unit>
        <trans-unit id="10103c8447d37408c54fd2f05b61beb2106dbe2c" translate="yes" xml:space="preserve">
          <source>git add . AND git commit AND git push (on your local branch after your changes)</source>
          <target state="translated">git add.AND git commit AND git push (変更後のローカルブランチで)</target>
        </trans-unit>
        <trans-unit id="97a35b07063385f6e4f744ee2072932e6c998999" translate="yes" xml:space="preserve">
          <source>git branch, fork, fetch, merge, rebase and clone, what are the differences?</source>
          <target state="translated">git branch、fork、fetch、merge、rebase、clone、何が違うの?</target>
        </trans-unit>
        <trans-unit id="acdbee7f26e843e5752461c1e69b28c077726557" translate="yes" xml:space="preserve">
          <source>git checkout -b mybranch (Checkout a new a branch and start working on that branch so that your master always remains top of trunk.)</source>
          <target state="translated">git checkout -b mybranch (新しいブランチをチェックアウトして、そのブランチで作業を開始します。)</target>
        </trans-unit>
        <trans-unit id="8dacaca6254212f6c1b95c243fac496f957d68fd" translate="yes" xml:space="preserve">
          <source>git checkout &lt;strong&gt;your branch&lt;/strong&gt;</source>
          <target state="translated">git checkout &lt;strong&gt;あなたのブランチ&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2664b948d9b5e7add8ed204bae0397137605164e" translate="yes" xml:space="preserve">
          <source>git checkout master (Come back to your master.)</source>
          <target state="translated">git checkout master (マスターに戻ってきてください)</target>
        </trans-unit>
        <trans-unit id="389878c8eec9e6eeeaf853870f869d492ebf1da1" translate="yes" xml:space="preserve">
          <source>git checkout master (Come to the master branch)</source>
          <target state="translated">git checkout master (マスターブランチに来てください)</target>
        </trans-unit>
        <trans-unit id="c1431e6a9b5c4d41e1866a32209e9ec5716cab6c" translate="yes" xml:space="preserve">
          <source>git checkout target_branch</source>
          <target state="translated">git checkout target_branch</target>
        </trans-unit>
        <trans-unit id="811a2036a9fa0acad088e97ae90bc7238103c1c2" translate="yes" xml:space="preserve">
          <source>git commit --amend</source>
          <target state="translated">git commit --amend</target>
        </trans-unit>
        <trans-unit id="7652ed4e9782162856d4648e8895b3387d9f68e6" translate="yes" xml:space="preserve">
          <source>git fetch</source>
          <target state="translated">git フェッチ</target>
        </trans-unit>
        <trans-unit id="18213e1f2a603f93f7ce5af7c44200e84b562957" translate="yes" xml:space="preserve">
          <source>git merge source_branch</source>
          <target state="translated">git merge source_branch</target>
        </trans-unit>
        <trans-unit id="503fbe5dbd88ba93126e84d902ed6c73cb283de3" translate="yes" xml:space="preserve">
          <source>git pull (Update your master to get the latest code)</source>
          <target state="translated">git pull (マスターを更新して最新のコードを取得)</target>
        </trans-unit>
        <trans-unit id="6c664ccf46e6763b8b96abeb86d1c050dc32ed1b" translate="yes" xml:space="preserve">
          <source>git push origin HEAD:refs/drafts/master  (push like a drafts)</source>
          <target state="translated">git push origin HEAD:refsdraftsmaster (下書きのようにプッシュ)</target>
        </trans-unit>
        <trans-unit id="b5ac89e12759c8756542b31c467362aa3d963acf" translate="yes" xml:space="preserve">
          <source>git rebase --continue</source>
          <target state="translated">git rebase --continue</target>
        </trans-unit>
        <trans-unit id="094cbd5065890d847d3c0dc1805f140ff1396ad9" translate="yes" xml:space="preserve">
          <source>git rebase master</source>
          <target state="translated">git rebase マスター</target>
        </trans-unit>
        <trans-unit id="5c2dd944dde9e08881bef0894fe7b22a5c9c4b06" translate="yes" xml:space="preserve">
          <source>j</source>
          <target state="translated">j</target>
        </trans-unit>
        <trans-unit id="cd6fdcbf5a860d174ac10af745972501941dc684" translate="yes" xml:space="preserve">
          <source>macOS</source>
          <target state="translated">macOS</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">or</target>
        </trans-unit>
        <trans-unit id="431e26c1c98728d02fcb3684df3869849e02bd8a" translate="yes" xml:space="preserve">
          <source>shows all files which require conflict resolution.</source>
          <target state="translated">は、競合解決を必要とするすべてのファイルを表示します。</target>
        </trans-unit>
        <trans-unit id="d365548fc7381a5f7a04540a4a2854c3130d9c18" translate="yes" xml:space="preserve">
          <source>to accept change from left or right</source>
          <target state="translated">右往左往</target>
        </trans-unit>
        <trans-unit id="834cd3a249a98dcc416499afdc5d38f6bee07ab1" translate="yes" xml:space="preserve">
          <source>to finish the merge.</source>
          <target state="translated">をクリックしてマージを完了させます。</target>
        </trans-unit>
        <trans-unit id="c3b50f2456638fa4af5346e46e1aa31547e3b122" translate="yes" xml:space="preserve">
          <source>to jump to previous/next changes.</source>
          <target state="translated">をクリックすると、前の変更にジャンプします。</target>
        </trans-unit>
        <trans-unit id="9fdbaee88f3bdf6029a899cfe02d702e1ba2d855" translate="yes" xml:space="preserve">
          <source>to resolve changes in favor of the &lt;strong&gt;other or the main repository&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;他のリポジトリまたはメインリポジトリ&lt;/strong&gt;を優先して変更を解決し&lt;strong&gt;ます&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="744a6e5be1804b7157ee48c402c528b472bce458" translate="yes" xml:space="preserve">
          <source>to resolve changes in the favor of &lt;strong&gt;your repository&lt;/strong&gt;, or</source>
          <target state="translated">&lt;strong&gt;リポジトリを&lt;/strong&gt;優先して変更を解決する、または</target>
        </trans-unit>
        <trans-unit id="aff024fe4ab0fece4091de044c58c9ae4233383a" translate="yes" xml:space="preserve">
          <source>w</source>
          <target state="translated">w</target>
        </trans-unit>
        <trans-unit id="aa4da17c46bbc043e6803b9d9522d18404b1395f" translate="yes" xml:space="preserve">
          <source>where HEAD is changes on your local branch and origin/ is changes from the remote branch. Here keep the stuff that you need and remove the stuff you don't need.After that the normal steps should do. That is</source>
          <target state="translated">HEAD はローカルブランチの変更点、origin はリモートブランチからの変更点です。ここでは、必要なものは残しておき、必要のないものは削除します。これが</target>
        </trans-unit>
        <trans-unit id="bdc9da0d0104e6a64e5550c899831ed0af155617" translate="yes" xml:space="preserve">
          <source>⌘</source>
          <target state="translated">⌘</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
