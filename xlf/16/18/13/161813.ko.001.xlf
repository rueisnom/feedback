<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://stackoverflow.com/questions/161813">
    <body>
      <group id="161813">
        <trans-unit id="5984419b5778f9a4c4f7bbb85c74b9adb45ae5f3" translate="yes" xml:space="preserve">
          <source>(Remember to replace the path with the actual path of Kdiff exe file.)</source>
          <target state="translated">(경로를 Kdiff exe 파일의 실제 경로로 바꾸십시오.)</target>
        </trans-unit>
        <trans-unit id="b3390a19d5b0b5180fb4449d7387b045df408917" translate="yes" xml:space="preserve">
          <source>. You can directly reach MERGED view using</source>
          <target state="translated">. 다음을 사용하여 MERGED보기에 직접 도달 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="996050e0bcf31b18b5ad6eec3902db1dfd23c7d0" translate="yes" xml:space="preserve">
          <source>2. Current Line Blame.</source>
          <target state="translated">2. 현재의 라인 비난.</target>
        </trans-unit>
        <trans-unit id="0dd3171390dbf54eaabed9e7d572666d50b603d6" translate="yes" xml:space="preserve">
          <source>3. Easily Resolve Conflicts.</source>
          <target state="translated">3. 갈등을 쉽게 해결하십시오.</target>
        </trans-unit>
        <trans-unit id="175b85fd9594552b6934b9ae3d20eb4a7e48d2e5" translate="yes" xml:space="preserve">
          <source>3. Gutter Blame</source>
          <target state="translated">3. 거터 비난</target>
        </trans-unit>
        <trans-unit id="b293034cf0e4f2b9bc829b319d6f42c4bc355f18" translate="yes" xml:space="preserve">
          <source>4. Status Bar Blame</source>
          <target state="translated">4. 상태 표시 줄 비난</target>
        </trans-unit>
        <trans-unit id="a9dfc97bcc8b604231d8feb585f8d1717d975502" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/blog/2293-resolve-simple-merge-conflicts-on-github&quot;&gt;This blog post&lt;/a&gt; explains in detail, but the basics are that upon 'merging' two branches via the UI, you will now see a 'resolve conflicts' option that will take you to an editor allowing you to deal with these merge conflicts.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/blog/2293-resolve-simple-merge-conflicts-on-github&quot;&gt;이 블로그 게시물&lt;/a&gt; 은 자세하게 설명하지만 기본 사항은 UI를 통해 두 분기를 '병합'하면 이러한 충돌 충돌을 처리 할 수있는 편집기로 이동하는 '충돌 해결'옵션이 표시된다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="018f2256b1785efde626620cc8bd84ab64840292" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;:diffget //2&lt;/code&gt;, get changes from original (&lt;em&gt;HEAD&lt;/em&gt;) branch:</source>
          <target state="translated">&lt;code&gt;:diffget //2&lt;/code&gt; , 원래 ( &lt;em&gt;HEAD&lt;/em&gt; ) 브랜치에서 변경 사항을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="4a315742a5934e8708bdc2484f385a7d3c687891" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;:diffget //3&lt;/code&gt;, get changes from merging branch:</source>
          <target state="translated">&lt;code&gt;:diffget //3&lt;/code&gt; , 병합 지점에서 변경 사항 가져 오기 :</target>
        </trans-unit>
        <trans-unit id="e80a5e0becdd40012fa121d96beff436eb5e3b4c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;:wqa&lt;/code&gt; save and exit from vi</source>
          <target state="translated">&lt;code&gt;:wqa&lt;/code&gt; vi에서 저장하고 종료</target>
        </trans-unit>
        <trans-unit id="7951c4074799958813e65ba7cb4fb5f1e4effb0a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;current change&lt;/code&gt;(meaning original one before merging)'?.</source>
          <target state="translated">&lt;code&gt;current change&lt;/code&gt; (병합 전의 원래 의미) '?.</target>
        </trans-unit>
        <trans-unit id="cddd78bcafbe734e87c29feb3bdf74f542ee186d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git clean&lt;/code&gt; Remove extra files (e.g. *.orig) created by diff tool.</source>
          <target state="translated">&lt;code&gt;git clean&lt;/code&gt; diff 도구로 만든 추가 파일 (예 : * .orig)을 제거합니다.</target>
        </trans-unit>
        <trans-unit id="b05ba11bf3186d99f40a15ddad3b2f2a030823cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git&lt;/code&gt; CLI</source>
          <target state="translated">&lt;code&gt;git&lt;/code&gt; CLI</target>
        </trans-unit>
        <trans-unit id="8b77648ec75a644255f4be7f9dd3cb5598cd48b1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;git pull --rebase&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;git pull --rebase&lt;/code&gt; &lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5f09a2e8f5d2d646276a9fed6e51d451e73790e8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fully accept my or theirs version&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;내 또는 그들의 버전을 완전히 수락하십시오&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="267c669633d51c6d9d96098cd1ca2edf3517fbfc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Review all changes and accept them individually&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;모든 변경 사항을 검토하고 개별적으로 승인&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ed861af4419c3cf99a6bd58ce8d7f88ee4689f87" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 1&lt;/strong&gt;: Go to the branch</source>
          <target state="translated">&lt;strong&gt;1 단계&lt;/strong&gt; : 지점으로 이동</target>
        </trans-unit>
        <trans-unit id="1394a7eae7d30cfc247b029e7951dd56ca53c501" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 1&lt;/strong&gt;: Run following commands in your terminal</source>
          <target state="translated">&lt;strong&gt;1 단계&lt;/strong&gt; : 터미널에서 다음 명령 실행</target>
        </trans-unit>
        <trans-unit id="08609d4bd19a06850313be45322700c83c9024c0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 2&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;2 단계&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="4364353baa0d76480a726b3cb0e63e3af4e07ec5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 2&lt;/strong&gt;: Run following command in terminal</source>
          <target state="translated">&lt;strong&gt;2 단계&lt;/strong&gt; : 터미널에서 다음 명령 실행</target>
        </trans-unit>
        <trans-unit id="bffa2453a0caf54f7f41e4901b00658c41850505" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 3&lt;/strong&gt;: If there are some conflicts, go to these files to modify it.</source>
          <target state="translated">&lt;strong&gt;3 단계&lt;/strong&gt; : 충돌이있는 경우이 파일로 이동하여 수정하십시오.</target>
        </trans-unit>
        <trans-unit id="d1ac3f3562d27d0da9d0f9b4b271ae6324475f03" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 3&lt;/strong&gt;: You will see a vimdiff display in following format</source>
          <target state="translated">&lt;strong&gt;3 단계&lt;/strong&gt; : 다음 형식의 vimdiff 디스플레이가 표시됩니다</target>
        </trans-unit>
        <trans-unit id="08dbaa67c856b82d176404d2167fd871d3061c01" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 4&lt;/strong&gt;. You could edit the MERGED view the following way</source>
          <target state="translated">&lt;strong&gt;4 단계&lt;/strong&gt; . 다음과 같은 방법으로 MERGED보기를 편집 할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="1f2f10e210d256aacda5ae7ee805f719ed3379f8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 4&lt;/strong&gt;: Add these changes</source>
          <target state="translated">&lt;strong&gt;4 단계&lt;/strong&gt; :이 변경 사항 추가</target>
        </trans-unit>
        <trans-unit id="918cb69b300466e33c7c768d2aee0e95d478cf58" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 5&lt;/strong&gt;. Save, Exit, Commit and Clean up</source>
          <target state="translated">&lt;strong&gt;5 단계&lt;/strong&gt; . 저장, 종료, 커밋 및 정리</target>
        </trans-unit>
        <trans-unit id="bcfc8490c541aaec58a661d05b3701aaad06f759" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 5&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;5 단계&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="7532866bda99e4ba384b10fa2b5e75ec6644f55e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 6&lt;/strong&gt;: If there is still conflict, go back to step 3 again. If there is no conflict, do following:</source>
          <target state="translated">&lt;strong&gt;6 단계&lt;/strong&gt; : 여전히 충돌이 있으면 3 단계로 다시 돌아가십시오. 충돌이 없으면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="74361e5409372dd18c19e09534a67f4a53a3d21d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 7&lt;/strong&gt;: And then there is no conflict between test and master. You can use merge directly.</source>
          <target state="translated">&lt;strong&gt;7 단계&lt;/strong&gt; : 테스트와 마스터 사이에 충돌이 없습니다. 병합을 직접 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="880ae413917c7925af5b1274ea0eec0d3965879e" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;However you've to be careful, as remote changes that conflicts were done for some reason.&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;그러나 어떤 이유로 인해 충돌이 발생하는 원격 변경 사항이 있으므로주의해야합니다.&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="842ae3472f12c24803c1bb2ee89ee22d6c383c46" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;Image source: &lt;a href=&quot;https://sourcegear.com/diffmerge/&quot;&gt;DiffMerge&lt;/a&gt; (Linux screenshot)&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;이미지 출처 : &lt;a href=&quot;https://sourcegear.com/diffmerge/&quot;&gt;DiffMerge&lt;/a&gt; (Linux 스크린 샷)&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="8eee615565678d9c8bc0a9f2f921d251a1a3cbdc" translate="yes" xml:space="preserve">
          <source>A safer way to resolve conflicts is to use &lt;a href=&quot;https://github.com/Peaker/git-mediate&quot;&gt;git-mediate&lt;/a&gt; (the common solutions suggested here are quite error prone imho).</source>
          <target state="translated">충돌을 해결하는 더 안전한 방법은 &lt;a href=&quot;https://github.com/Peaker/git-mediate&quot;&gt;git-mediate&lt;/a&gt; 를 사용 하는 것입니다 (여기서 제안 된 일반적인 솔루션은 오류가 발생하기 쉽습니다).</target>
        </trans-unit>
        <trans-unit id="beb67c154281a51eab633a88fcdbbd4656d59cd3" translate="yes" xml:space="preserve">
          <source>A_MBPro:test anu$ git merge origin/ Auto-merging
  src/test/java/com/.../TestClass.java CONFLICT
  (content): Merge conflict in
  src/test/java/com/.../TestClass.java</source>
          <target state="translated">A_MBPro : 테스트 anu $ git merge origin / 자동 병합 src / test / java / com /.../ TestClass.java CONFLICT (콘텐츠) : src / test / java / com /.../ TestClass.java에서 병합 충돌</target>
        </trans-unit>
        <trans-unit id="a7b183a6f77c99b78584e9f4f9c6586693f1a738" translate="yes" xml:space="preserve">
          <source>Accept my version (local, ours):</source>
          <target state="translated">내 버전 (로컬, 로컬 버전)을 수락하십시오.</target>
        </trans-unit>
        <trans-unit id="5bc00cfaa92376af7b8a3890a3b1000ebf89813e" translate="yes" xml:space="preserve">
          <source>Accept their version (remote, theirs):</source>
          <target state="translated">그들의 버전을 수락하십시오 (원격, 그들의 것) :</target>
        </trans-unit>
        <trans-unit id="de248d3c434336170b313b4a606fae76271119ac" translate="yes" xml:space="preserve">
          <source>After seeing a conflict, you can do two things:</source>
          <target state="translated">충돌을 본 후 두 가지 작업을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="88c796f3f9c1bd62bd2303bc6fd590d651d18149" translate="yes" xml:space="preserve">
          <source>Also (and more relevant to your situation), I try to avoid:</source>
          <target state="translated">또한 (그리고 귀하의 상황과 더 관련이 있음), 나는 피하려고합니다 :</target>
        </trans-unit>
        <trans-unit id="64d1d3763e3678125c90fb233fae5e747be5afc3" translate="yes" xml:space="preserve">
          <source>Also, the &lt;a href=&quot;https://www.kernel.org/pub/software/scm/git/docs/git-merge.html#_how_to_resolve_conflicts&quot;&gt;How to Resolve Conflicts&lt;/a&gt; section explains how to resolve the conflicts:</source>
          <target state="translated">또한 &lt;a href=&quot;https://www.kernel.org/pub/software/scm/git/docs/git-merge.html#_how_to_resolve_conflicts&quot;&gt;충돌을 해결&lt;/a&gt; 하는 방법 섹션에서는 충돌을 해결 하는 방법에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="e30eff925100b7c3e119ed678e39009e962455b0" translate="yes" xml:space="preserve">
          <source>Alt</source>
          <target state="translated">Alt</target>
        </trans-unit>
        <trans-unit id="d83728a889e246005c68fb7b4ea004251b567ef9" translate="yes" xml:space="preserve">
          <source>Alternatively you can use &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/opendiff.1.html&quot;&gt;opendiff&lt;/a&gt; (part of Xcode Tools) which lets you merge two files or directories together to create a third file or directory.</source>
          <target state="translated">또는 &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/opendiff.1.html&quot;&gt;opendiff&lt;/a&gt; (Xcode Tools의 일부)를 사용하여 두 개의 파일 또는 디렉토리를 병합하여 세 번째 파일 또는 디렉토리를 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d2b49ab034efe5c43e47bb8c7fa6908660e6c2ee" translate="yes" xml:space="preserve">
          <source>And probably (if not provided) you need the following extra simple wrapper placed in your PATH (e.g. &lt;code&gt;/usr/bin&lt;/code&gt;):</source>
          <target state="translated">그리고 아마도 (제공되지 않은 경우) PATH에 다음과 같은 추가 간단한 래퍼가 필요합니다 (예 : &lt;code&gt;/usr/bin&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="203ef75231b705089e654d36b91e46318dfe1500" translate="yes" xml:space="preserve">
          <source>And then we try a final time</source>
          <target state="translated">그리고 마지막으로 시도합니다</target>
        </trans-unit>
        <trans-unit id="3e6f3db27cc8c401fedee6e7d282bbfea034770c" translate="yes" xml:space="preserve">
          <source>And there are many features you can check them &lt;a href=&quot;https://github.com/eamodio/vscode-gitlens&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">그리고 &lt;a href=&quot;https://github.com/eamodio/vscode-gitlens&quot;&gt;여기에서&lt;/a&gt; 확인할 수있는 많은 기능이 있습니다.</target>
        </trans-unit>
        <trans-unit id="031f3f8f8291e0e1de20b7de05bfa588693494ab" translate="yes" xml:space="preserve">
          <source>As of December 12th 2016, you can merge branches and &lt;strong&gt;resolve conflicts on github.com&lt;/strong&gt;</source>
          <target state="translated">2016 년 12 월 12 일부터 &lt;strong&gt;github.com에서&lt;/strong&gt; 브랜치를 병합하고 &lt;strong&gt;충돌을 해결할&lt;/strong&gt; 수 있습니다</target>
        </trans-unit>
        <trans-unit id="8388f57e8cdf32dbfd337f07999e3a94c43253c4" translate="yes" xml:space="preserve">
          <source>As per @JoshGlover comment:</source>
          <target state="translated">@JoshGlover 의견에 따라 :</target>
        </trans-unit>
        <trans-unit id="f474daae6a62b7028ecb784c6fbd046b9c1252cc" translate="yes" xml:space="preserve">
          <source>BASE &amp;ndash; common ancestor, how file looked before both changes</source>
          <target state="translated">BASE &amp;ndash; 공통 조상, 파일이 두 변경 전에 어떻게 보였는가</target>
        </trans-unit>
        <trans-unit id="bfa88da268e9e2de28582188413cdb7c3a37c5c4" translate="yes" xml:space="preserve">
          <source>BTW if you install Git Extensions there is an option in its setup wizard to install Kdiff3.</source>
          <target state="translated">BTW Git Extensions를 설치하면 설정 마법사에 Kdiff3를 설치하는 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="d1f71a9a3f6b22f46159ecc1b5cc3fd1ee29d31c" translate="yes" xml:space="preserve">
          <source>Before pushing your newly committed change to remote server, try &lt;code&gt;git pull --rebase&lt;/code&gt; rather &lt;code&gt;git pull&lt;/code&gt; and manual &lt;code&gt;merge&lt;/code&gt; and it will automatically sync latest remote server changes (with a fetch + merge) and will put your local latest commit at the top in git log. No need to worry about manual pull/merge.</source>
          <target state="translated">새로 커밋 된 변경 사항을 원격 서버로 푸시하기 전에 &lt;code&gt;git pull --rebase&lt;/code&gt; 대신 &lt;code&gt;git pull&lt;/code&gt; 및 수동 &lt;code&gt;merge&lt;/code&gt; 을 시도하면 최신 원격 서버 변경 사항 (fetch + merge)을 자동으로 동기화하고 로컬 최신 커밋을 git의 맨 위에 놓습니다 로그. 수동 풀 / 병합에 대해 걱정할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="5690562f60aa2958acf32cea69a82be068935ee2" translate="yes" xml:space="preserve">
          <source>Below is the sample procedure to use &lt;code&gt;vimdiff&lt;/code&gt; for resolve merge conflicts. Based on &lt;a href=&quot;http://www.rosipov.com/blog/use-vimdiff-as-git-mergetool/#fromHistor&quot;&gt;this link&lt;/a&gt;</source>
          <target state="translated">다음은 병합 충돌을 해결하기 위해 &lt;code&gt;vimdiff&lt;/code&gt; 를 사용하는 샘플 절차입니다. &lt;a href=&quot;http://www.rosipov.com/blog/use-vimdiff-as-git-mergetool/#fromHistor&quot;&gt;이 링크를&lt;/a&gt; 기반으로</target>
        </trans-unit>
        <trans-unit id="5763578555f814c96231de97e5710d397db26670" translate="yes" xml:space="preserve">
          <source>Bonus:</source>
          <target state="translated">Bonus:</target>
        </trans-unit>
        <trans-unit id="e2b00999c812c0f8501ad55c392f1fbc4b4fc3ca" translate="yes" xml:space="preserve">
          <source>Change it to the way you want it, then commit with commands</source>
          <target state="translated">원하는 방식으로 변경 한 다음 명령으로 커밋</target>
        </trans-unit>
        <trans-unit id="a16928497c72104aa81a7d81e344898c5e5a9d2c" translate="yes" xml:space="preserve">
          <source>Check out the answers in Stack Overflow question &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/101752/aborting-a-merge-in-git&quot;&gt;Aborting a merge in Git&lt;/a&gt;&lt;/em&gt;, especially &lt;a href=&quot;https://stackoverflow.com/questions/101752/aborting-a-merge-in-git#107860&quot;&gt;Charles Bailey's answer&lt;/a&gt; which shows how to view the different versions of the file with problems, for example,</source>
          <target state="translated">스택 오버플로 질문에서 답변을 확인하십시오 &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/101752/aborting-a-merge-in-git&quot;&gt;.Git에서 병합 중단&lt;/a&gt;&lt;/em&gt; , 특히 &lt;a href=&quot;https://stackoverflow.com/questions/101752/aborting-a-merge-in-git#107860&quot;&gt;Charles Bailey의 답변&lt;/a&gt; 은 문제가있는 다른 버전의 파일을 보는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="148d7ea3194dfb3824271bc5bf58dc3bda5baee5" translate="yes" xml:space="preserve">
          <source>Check the Git status:
&lt;strong&gt;&lt;em&gt;git status&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">힘내 상태 확인 : &lt;strong&gt;&lt;em&gt;자식 상태&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6b4260a19776ffbf9dfe81497f156c7830b80d1f" translate="yes" xml:space="preserve">
          <source>Check the files, in which you would find the conflicts marked like</source>
          <target state="translated">다음과 같이 충돌이있는 파일을 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="aa6390380b1645608f5ff58880c2c59a7c7468a6" translate="yes" xml:space="preserve">
          <source>Check the status again:
 &lt;strong&gt;&lt;em&gt;git status&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">상태를 다시 확인하십시오 : &lt;strong&gt;&lt;em&gt;자식 상태&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b69003626d6cb4346f37832218c2fac266a2dcd9" translate="yes" xml:space="preserve">
          <source>Checkout a local branch (temp1 in my example here):
&lt;strong&gt;&lt;em&gt;git checkout -b temp1&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">로컬 브랜치를 체크 아웃하십시오 (여기의 예제에서는 temp1) : &lt;strong&gt;&lt;em&gt;git checkout -b temp1&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b0362ddbc2b43b66fa4e6cca7d6f8961ded7dee2" translate="yes" xml:space="preserve">
          <source>Choose one of the alternatives or a combination of both in a way that you want new code to be, while removing equal signs and angle brackets.</source>
          <target state="translated">등호와 꺾쇠 괄호를 제거하면서 새 코드를 원하는 방식으로 대안 중 하나 또는 둘의 조합을 선택하십시오.</target>
        </trans-unit>
        <trans-unit id="f65afcc3c7fda48e7af81a4b11b34d1f34f30d83" translate="yes" xml:space="preserve">
          <source>Click the conflicting file and you will have the option to Merge, Compare, Take Source, Take Target.  The merge tool in VS is very easy to use.</source>
          <target state="translated">충돌하는 파일을 클릭하면 병합, 비교, 소스 가져 오기, 대상 가져 오기 옵션이 있습니다. VS의 병합 도구는 사용하기가 매우 쉽습니다.</target>
        </trans-unit>
        <trans-unit id="ec2dece8f71f03d22fdc5a37975a1dbbea9b6ee2" translate="yes" xml:space="preserve">
          <source>Close your project in VS. Especially in big projects VS tends to freak out when merging using the UI.</source>
          <target state="translated">VS에서 프로젝트를 닫습니다. 특히 큰 프로젝트에서 VS는 UI를 사용하여 병합 할 때 놀라게하는 경향이 있습니다.</target>
        </trans-unit>
        <trans-unit id="fb0b442c1c1c3d03199691d9d6fc5d9cec8d1471" translate="yes" xml:space="preserve">
          <source>Commit the changes to the same commit id (this avoids a new separate patch set):
&lt;strong&gt;&lt;em&gt;git commit --amend&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">동일한 커밋 ID로 변경 사항을 커밋하십시오 (이것은 새로운 별도의 패치 세트를 피합니다) : &lt;strong&gt;&lt;em&gt;git commit --amend&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5831691140428fa04453f5bba220df00be0565ab" translate="yes" xml:space="preserve">
          <source>Comparison with the common ancestor</source>
          <target state="translated">공통 조상과의 비교</target>
        </trans-unit>
        <trans-unit id="c771b1de682f5642315c2602673d7fb1b2fcd43e" translate="yes" xml:space="preserve">
          <source>CoolAJ86's answer sums up pretty much everything. In case you have changes in both branches in the same piece of code you will have to do a manual merge. Open the file in conflict in any text editor and you should see following structure.</source>
          <target state="translated">CoolAJ86의 답변은 거의 모든 것을 요약합니다. 동일한 코드에서 두 가지 모두에 변경 사항이있는 경우 수동 병합을 수행해야합니다. 텍스트 편집기에서 충돌로 파일을 열면 다음 구조가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="25623d3d6597110b3dc53adcb06a990460c0bdc2" translate="yes" xml:space="preserve">
          <source>Decide not to merge. The only clean-ups you need are to reset the index file to the &lt;code&gt;HEAD&lt;/code&gt; commit to reverse 2. and to clean up working tree changes made by 2. and 3.; &lt;code&gt;git merge --abort&lt;/code&gt; can be used for this.</source>
          <target state="translated">병합하지 않기로 결정하십시오. 필요한 정리 작업은 인덱스 파일을 &lt;code&gt;HEAD&lt;/code&gt; 커밋으로 재설정하여 2를 반대로하고 2와 3으로 작성된 작업 트리 변경 사항을 정리하는 것입니다. &lt;code&gt;git merge --abort&lt;/code&gt; 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="22e56642085575f2908ddb864308068f7e968cad" translate="yes" xml:space="preserve">
          <source>Default &lt;code&gt;mergetool&lt;/code&gt; works in &lt;strong&gt;command line&lt;/strong&gt;. How to use a command line mergetool should be a separate question.</source>
          <target state="translated">기본 &lt;code&gt;mergetool&lt;/code&gt; 은 &lt;strong&gt;명령 행&lt;/strong&gt; 에서 작동 &lt;strong&gt;합니다&lt;/strong&gt; . 명령 행 mergetool을 사용하는 방법은 별도의 질문이어야합니다.</target>
        </trans-unit>
        <trans-unit id="62142d242914ddff0d898b153644b0eafdec9b6b" translate="yes" xml:space="preserve">
          <source>Delete the unwanted files locally created by mergetool, usually mergetool creates extra file with *.orig extension. Please delete that file as that is just the duplicate and fix changes locally and add the correct version of your files.
&lt;strong&gt;&lt;em&gt;git add #your_changed_correct_files&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">mergetool에 의해 로컬로 생성 된 불필요한 파일을 삭제합니다. 일반적으로 mergetool은 확장자가 * .orig 인 추가 파일을 만듭니다. 중복 된 파일이므로 해당 파일을 삭제하고 로컬에서 변경 사항을 수정하고 올바른 버전의 파일을 추가하십시오. &lt;strong&gt;&lt;em&gt;git add #your_changed_correct_files&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cf55c22c3384a1a5442c9356b103938aff517cff" translate="yes" xml:space="preserve">
          <source>DiffMerge</source>
          <target state="translated">DiffMerge</target>
        </trans-unit>
        <trans-unit id="974874822de58470f022f79813163910737446e5" translate="yes" xml:space="preserve">
          <source>Do the merge in command prompt.</source>
          <target state="translated">명령 프롬프트에서 병합을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="8f3dad5896c6d2f85c69a69d9b5dcfaeb1b52705" translate="yes" xml:space="preserve">
          <source>Does not seem to always work for me and usually ends up displaying every commit that was different between the two branches, this happens even when using &lt;code&gt;--&lt;/code&gt; to separate the path from the command.</source>
          <target state="translated">항상 나를 위해 작동하지는 않으며 일반적으로 두 분기 사이에 다른 모든 커밋을 표시합니다. 이는 경로를 명령과 분리하기 위해 사용할 때도 발생합니다.</target>
        </trans-unit>
        <trans-unit id="bf93e5ce8bc1228c2585b3f5a368053c9fe8346a" translate="yes" xml:space="preserve">
          <source>Down</source>
          <target state="translated">Down</target>
        </trans-unit>
        <trans-unit id="5f743014bcdaf6c6b456b0a51baf9dbd2767737b" translate="yes" xml:space="preserve">
          <source>Each time you edit a file to resolve a conflict, &lt;code&gt;git add filename&lt;/code&gt; will update the index and your diff will no longer show it. When all the conflicts are handled and their files have been &lt;code&gt;git add&lt;/code&gt;-ed, &lt;code&gt;git commit&lt;/code&gt; will complete your merge.</source>
          <target state="translated">충돌을 해결하기 위해 파일을 편집 할 때마다 &lt;code&gt;git add filename&lt;/code&gt; 은 색인을 업데이트하고 diff는 더 이상 표시하지 않습니다. 모든 충돌이 처리되고 파일이 &lt;code&gt;git add&lt;/code&gt; -ed되면 &lt;code&gt;git commit&lt;/code&gt; 이 병합을 완료합니다.</target>
        </trans-unit>
        <trans-unit id="941cfe8b1f11cde20411fa8dc823e6451b6066fa" translate="yes" xml:space="preserve">
          <source>Edit the conflicted files manually and look for the code block between &lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/code&gt;/&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; then choose the version either from above or below &lt;code&gt;=====&lt;/code&gt;. See: &lt;a href=&quot;http://git-scm.com/docs/git-merge#_how_conflicts_are_presented&quot;&gt;How conflicts are presented&lt;/a&gt;.</source>
          <target state="translated">충돌 한 파일을 수동으로 편집하고 &lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/code&gt; / &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; 사이의 코드 블록을 찾은 다음 위 또는 아래에서 &lt;code&gt;=====&lt;/code&gt; 버전을 선택하십시오. &lt;a href=&quot;http://git-scm.com/docs/git-merge#_how_conflicts_are_presented&quot;&gt;충돌이 표시되는 방법을&lt;/a&gt; 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="aacd1ff5034e63964e7c7c658577c21417051af1" translate="yes" xml:space="preserve">
          <source>Finally, review the files ready for commit using: &lt;code&gt;git status&lt;/code&gt;.</source>
          <target state="translated">마지막으로, &lt;code&gt;git status&lt;/code&gt; 를 사용하여 커밋 할 준비가 된 파일을 검토하십시오.</target>
        </trans-unit>
        <trans-unit id="a094f4d7d41c2764c2f031fe68c19f7697500e17" translate="yes" xml:space="preserve">
          <source>Find details at: &lt;a href=&quot;http://gitolite.com/git-pull--rebase&quot;&gt;http://gitolite.com/git-pull--rebase&lt;/a&gt;</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;http://gitolite.com/git-pull--rebase&quot;&gt;http://gitolite.com/git-pull--rebase를 참조하십시오.&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4809b89a126e0c64267d7eedaadd6a71a6de0432" translate="yes" xml:space="preserve">
          <source>Find which files cause conflicts by command</source>
          <target state="translated">명령으로 충돌을 일으키는 파일 찾기</target>
        </trans-unit>
        <trans-unit id="444ae617023a2ca15a17f8826dd18fc1b206e9f6" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;http://en.wikipedia.org/wiki/Emacs&quot;&gt;Emacs&lt;/a&gt; users which want to resolve merge conflicts semi-manually:</source>
          <target state="translated">병합 충돌을 수동으로 해결하려는 &lt;a href=&quot;http://en.wikipedia.org/wiki/Emacs&quot;&gt;Emacs&lt;/a&gt; 사용자의 경우 :</target>
        </trans-unit>
        <trans-unit id="b9276f3406ed29b514fe3f13e76db9e122964538" translate="yes" xml:space="preserve">
          <source>For conflicts that involve more than a few lines, it's easier to see what's going on in an external GUI tool. I like opendiff -- Git also supports vimdiff, gvimdiff, kdiff3, tkdiff, meld, xxdiff, emerge out of the box and you can install others: &lt;code&gt;git config merge.tool &quot;your.tool&quot;&lt;/code&gt; will set your chosen tool and then &lt;code&gt;git mergetool&lt;/code&gt; after a failed merge will  show you the diffs in context.</source>
          <target state="translated">몇 줄 이상이 포함 된 충돌의 경우 외부 GUI 도구에서 진행중인 작업을보다 쉽게 ​​확인할 수 있습니다. 나는 opendiff를 좋아한다-Git은 vimdiff, gvimdiff, kdiff3, tkdiff, meld, xxdiff를 지원하며 다른 상자에서 나올 수 있으며 다른 것을 설치할 수 있습니다 : &lt;code&gt;git config merge.tool &quot;your.tool&quot;&lt;/code&gt; 은 선택한 도구를 설정 한 다음 &lt;code&gt;git mergetool&lt;/code&gt; 실패한 병합 후 diff가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="a96746ef03f16d34404a31209e137b75cb15ca6e" translate="yes" xml:space="preserve">
          <source>For example, if you know that you and another person are both working on different refactoring that will both affect the same set of files, you should talk to each other ahead of time and get a better sense for what types of changes each of you is making. You might save considerable time and effort if you conduct your planned changes serially rather than in parallel.</source>
          <target state="translated">예를 들어, 귀하와 다른 사람이 모두 동일한 파일 세트에 영향을 줄 수있는 다른 리팩토링 작업을하고 있다는 것을 알고 있다면, 미리 서로 대화하고 각각의 변경 유형에 대해 더 잘 이해해야합니다. 만들기. 계획된 변경을 병렬로 수행하지 않고 순차적으로 수행하면 상당한 시간과 노력을 절약 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8333e3cfab4df3827ff6836fb6b710b9358f125a" translate="yes" xml:space="preserve">
          <source>For major refactorings that cut across a large swath of code, you should strongly consider working serially: everybody stops working on that area of the code while one person performs the complete refactoring.</source>
          <target state="translated">많은 양의 코드를 처리하는 주요 리팩토링의 경우 직렬 작업을 강력히 고려해야합니다. 한 사람이 완전한 리팩토링을 수행하는 동안 모든 사람이 해당 코드 영역에서 작업을 중지합니다.</target>
        </trans-unit>
        <trans-unit id="4fa9753aa4fd3c850748555a3e9f4a60b89ac341" translate="yes" xml:space="preserve">
          <source>For practical tutorial, check: &lt;a href=&quot;https://www.katacoda.com/courses/git/5&quot;&gt;Scenario 5 - Fixing Merge Conflicts by Katacoda&lt;/a&gt;.</source>
          <target state="translated">실용적인 자습서를 보려면 &lt;a href=&quot;https://www.katacoda.com/courses/git/5&quot;&gt;Katacoda의 시나리오 5-수정 병합 충돌을 확인하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="8e13a07312a1b166bfac8963c011d8cef1459d58" translate="yes" xml:space="preserve">
          <source>For those who are using Visual Studio (2015 in my case)</source>
          <target state="translated">Visual Studio를 사용하는 사람들을 위해 (필자의 경우 2015)</target>
        </trans-unit>
        <trans-unit id="332ea3a31e79d47a90b9a3ccec9c1cdfdbaa5829" translate="yes" xml:space="preserve">
          <source>From the documentation:</source>
          <target state="translated">설명서에서 :</target>
        </trans-unit>
        <trans-unit id="7df338298732a7a44cfe3459a9c54089c35b179d" translate="yes" xml:space="preserve">
          <source>Get the patchset:
&lt;strong&gt;&lt;em&gt;git fetch&lt;/em&gt;&lt;/strong&gt; (checkout the right patch from your Git commit)</source>
          <target state="translated">패치 세트 받기 : &lt;strong&gt;&lt;em&gt;git fetch&lt;/em&gt;&lt;/strong&gt; (Git 커밋에서 올바른 패치를 확인하십시오)</target>
        </trans-unit>
        <trans-unit id="69a3ed9b700833291e3fb52128a1c1896ad1a625" translate="yes" xml:space="preserve">
          <source>Gitlense For VS Code</source>
          <target state="translated">VS 코드를위한 Gitlense</target>
        </trans-unit>
        <trans-unit id="cb033caab8c1571bd1cc040deef3f29714bc9898" translate="yes" xml:space="preserve">
          <source>Here are a few tips:</source>
          <target state="translated">다음은 몇 가지 팁입니다.</target>
        </trans-unit>
        <trans-unit id="d6ac82bd2169504c0f1bd7ac53df06a10044601a" translate="yes" xml:space="preserve">
          <source>Here are simple steps what to do when you get into conflicted state:</source>
          <target state="translated">충돌 상태가 될 때 수행 할 간단한 단계는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="4015aea13e4cb51abe076db016a9c3d37c5ab85e" translate="yes" xml:space="preserve">
          <source>Here's a probable use-case, from the top:</source>
          <target state="translated">다음은 가능한 유스 케이스입니다.</target>
        </trans-unit>
        <trans-unit id="53343ebc96836cd5b3243181b65465e0cf2310da" translate="yes" xml:space="preserve">
          <source>Here's what Kdiff3 looks like:</source>
          <target state="translated">Kdiff3의 모습은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="cb24c6a6c393ebe7ec3779e9477715f34a1e1c8e" translate="yes" xml:space="preserve">
          <source>How do I resolve merge conflicts in Git?</source>
          <target state="translated">Git에서 병합 충돌을 어떻게 해결합니까?</target>
        </trans-unit>
        <trans-unit id="d351a3caff947e2b59eb23475d4c1ea1dd8fc47a" translate="yes" xml:space="preserve">
          <source>How to resolve merge conflicts in Git</source>
          <target state="translated">Git에서 병합 충돌을 해결하는 방법</target>
        </trans-unit>
        <trans-unit id="821a9fc9b328173923a3a75703b4c5f4fabf1ea0" translate="yes" xml:space="preserve">
          <source>I already like this feature:</source>
          <target state="translated">나는 이미이 기능을 좋아한다 :</target>
        </trans-unit>
        <trans-unit id="ebb18fa7969201cbf38ba225dade79fc2ac15133" translate="yes" xml:space="preserve">
          <source>I always follow the below steps to avoid conflicts.</source>
          <target state="translated">나는 항상 충돌을 피하기 위해 아래 단계를 따릅니다.</target>
        </trans-unit>
        <trans-unit id="5cbeb9173e4a15b8b07727c351b6c3fdec416f12" translate="yes" xml:space="preserve">
          <source>I am using Microsoft's Visual Code for resolving conflicts. Its very simple to use. I keep my project open in the workspace. It detects and highlights conflicts, moreover give GUI options to select whatever change I want to keep from HEAD or incoming.</source>
          <target state="translated">충돌을 해결하기 위해 Microsoft의 Visual Code를 사용하고 있습니다. 사용이 매우 간단합니다. 작업 공간에서 프로젝트를 열어 둡니다. 충돌을 감지하고 강조하며, GUI 또는 HEAD 또는 수신에서 변경하려는 항목을 선택할 수있는 GUI 옵션을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="d6a10190fb2d0293b50b8df275083b88901d5e6b" translate="yes" xml:space="preserve">
          <source>I either want my or their version in full, or want to review individual changes and decide for each of them.</source>
          <target state="translated">내 버전 또는 전체 버전을 원하거나 개별 변경 사항을 검토하고 각 변경 사항을 결정하려고합니다.</target>
        </trans-unit>
        <trans-unit id="0402c816503737edd063d7527db024b2749d4ccb" translate="yes" xml:space="preserve">
          <source>I find merge tools rarely help me understand the conflict or the resolution. I'm usually more successful looking at the conflict markers in a text editor and using git log as a supplement.</source>
          <target state="translated">병합 도구를 사용하면 충돌이나 해결 방법을 이해하는 데 거의 도움이되지 않습니다. 나는 일반적으로 텍스트 편집기에서 충돌 마커를보고 git log를 보충으로 사용하는 것이 더 성공적입니다.</target>
        </trans-unit>
        <trans-unit id="1b084f84735683c433246463bf526f719f03fe77" translate="yes" xml:space="preserve">
          <source>I hope that this will help every one concerning this issue.</source>
          <target state="translated">이것이이 문제에 관한 모든 사람들에게 도움이되기를 바랍니다.</target>
        </trans-unit>
        <trans-unit id="d0caea9b3f59d542fa6ac97fea504dcb8e68f4bc" translate="yes" xml:space="preserve">
          <source>I think the real key is knowing how changes flow with local and remote repositories.  The key to this is understanding tracking branches.  I have found that I think of the tracking branch as the 'missing piece in the middle' between me my local, actual files directory and the remote defined as origin.</source>
          <target state="translated">진짜 열쇠는 로컬 및 원격 리포지토리에서 변경 사항이 어떻게 흐르는 지 아는 것입니다. 이것의 핵심은 추적 지점을 이해하는 것입니다. 나는 추적 브랜치를 로컬, 실제 파일 디렉토리와 원점으로 정의 된 원격 사이의 '중간에 누락 된 부분'으로 생각한다는 것을 알았습니다.</target>
        </trans-unit>
        <trans-unit id="f0dcaf5654b405f76244139f625e12b8ecb4399c" translate="yes" xml:space="preserve">
          <source>I'm surprised no one else spoke about resolving conflict using &lt;code&gt;patience&lt;/code&gt; with the merge recursive strategy. For a big merge conflict, using &lt;code&gt;patience&lt;/code&gt; provided good results for me. The idea is that it will try to match blocks rather than individual lines.</source>
          <target state="translated">나는 병합 재귀 전략에 &lt;code&gt;patience&lt;/code&gt; 을 사용하여 갈등을 해결하는 것에 대해 아무도 이야기하지 않은 것에 놀랐습니다. 큰 병합 충돌의 경우 &lt;code&gt;patience&lt;/code&gt; 사용하면 좋은 결과를 얻었습니다. 아이디어는 개별 라인이 아닌 블록을 일치 시키려고한다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="c6fa9d4f262c6727eee44346dad7bdce3894c5b9" translate="yes" xml:space="preserve">
          <source>I've personally got into the habit of 2 things to help avoid this.</source>
          <target state="translated">나는 이것을 피하기 위해 개인적으로 2 가지 습관을 들었습니다.</target>
        </trans-unit>
        <trans-unit id="fb58a335235a03f06da06668899ed8f3672ab468" translate="yes" xml:space="preserve">
          <source>I've successfully used &lt;a href=&quot;https://sourcegear.com/diffmerge/&quot;&gt;DiffMerge&lt;/a&gt; which can visually compare and merge files on Windows, macOS and Linux/Unix.</source>
          <target state="translated">Windows, macOS 및 Linux / Unix에서 파일을 시각적으로 비교하고 병합 할 수있는 &lt;a href=&quot;https://sourcegear.com/diffmerge/&quot;&gt;DiffMerge&lt;/a&gt; 를 성공적으로 사용했습니다.</target>
        </trans-unit>
        <trans-unit id="b50738c5e6ed82977210183ce1837c1f0b3de951" translate="yes" xml:space="preserve">
          <source>Identify which files are in conflict (Git should tell you this).</source>
          <target state="translated">충돌하는 파일을 식별하십시오 (Git에서 알려야합니다).</target>
        </trans-unit>
        <trans-unit id="c722a2e638436ed8fb95c066ae4ce83c149e74f2" translate="yes" xml:space="preserve">
          <source>If all conflicts were solved successfully, commit the changes by: &lt;code&gt;git commit -a&lt;/code&gt; and push to remote as usual.</source>
          <target state="translated">모든 충돌이 성공적으로 해결되면 &lt;code&gt;git commit -a&lt;/code&gt; 명령으로 변경 사항을 커밋하고 평소처럼 원격으로 푸시합니다.</target>
        </trans-unit>
        <trans-unit id="175991024547a83ccaab97a5b5236f8c382363c5" translate="yes" xml:space="preserve">
          <source>If the conflict is longer, then I will cut and paste each of the three sections into three separate files, such as &quot;mine&quot;, &quot;common&quot; and &quot;theirs&quot;.</source>
          <target state="translated">충돌이 더 길면 세 섹션을 각각 잘라내어 &quot;mine&quot;, &quot;common&quot;및 &quot;thes&quot;와 같은 세 개의 별도 파일로 붙여 넣습니다.</target>
        </trans-unit>
        <trans-unit id="d20842fcd97f861418ee0876bd663fea842315ce" translate="yes" xml:space="preserve">
          <source>If the conflict is only a few lines, this generally makes the conflict very obvious. (Knowing how to fix a conflict is very different; you need to be aware of what other people are working on. If you're confused, it's probably best to just call that person into your room so they can see what you're looking at.)</source>
          <target state="translated">갈등이 몇 줄에 불과한 경우 일반적으로 갈등이 매우 분명합니다. (충돌을 해결하는 방법을 아는 것은 매우 다릅니다. 다른 사람들이 무엇을하고 있는지 알고 있어야합니다. 혼란 스러우면 상대방을 방으로 불러서 내가보고있는 것을 볼 수 있도록하는 것이 가장 좋습니다 에서.)</target>
        </trans-unit>
        <trans-unit id="0a3d7fce00a142bd9776e2f018dc7698e902aa15" translate="yes" xml:space="preserve">
          <source>If you are using intelliJ as IDE
Try to merge parent to your branch by</source>
          <target state="translated">intelliJ를 IDE로 사용하는 경우 다음 방법으로 부모를 지점에 병합하십시오.</target>
        </trans-unit>
        <trans-unit id="e4c3e0b130c36910f9d97995518a0afbab1aff04" translate="yes" xml:space="preserve">
          <source>If you can't work serially (due to time pressure, maybe), then communicating about expected merge conflicts at least helps you solve the problems sooner while the details are still fresh in mind. For example, if a co-worker is making a disruptive series of commits over the course of a one-week period, you may choose to merge/rebase on that co-workers branch once or twice each day during that week. That way, if you do find merge/rebase conflicts, you can solve them more quickly than if you wait a few weeks to merge everything together in one big lump.</source>
          <target state="translated">시간 압력으로 인해 연속적으로 작업 할 수없는 경우 예상되는 병합 충돌에 대해 통신하면 최소한 세부 사항을 계속 생각하면서 문제를 더 빨리 해결하는 데 도움이됩니다. 예를 들어, 1 주일 동안 동료가 중단적인 일련의 커밋을 수행하는 경우 해당 주 동안 매일 1 ~ 2 회 해당 동료 지점을 병합 / 리베이스하도록 선택할 수 있습니다. 이렇게하면 병합 / 리베이스 충돌이 발견되면 몇 주 동안 기다렸다가 한 번에 모든 것을 병합하는 것보다 더 빨리 해결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8de6d362944cca0dce5c2e38813cddd83e8e685b" translate="yes" xml:space="preserve">
          <source>If you change the indentation of your program for instance, the default Git merge strategy sometimes matches single braces &lt;code&gt;{&lt;/code&gt; which belongs to different functions. This is avoided with &lt;code&gt;patience&lt;/code&gt;:</source>
          <target state="translated">예를 들어 프로그램의 들여 쓰기를 변경하면 기본 Git 병합 전략이 때때로 다른 함수에 속하는 단일 중괄호 &lt;code&gt;{&lt;/code&gt; 와 일치합니다. 이것은 &lt;code&gt;patience&lt;/code&gt; 으로 피할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="6276c8e1991c84cf5b8e5c3d836c05c6fee80fc7" translate="yes" xml:space="preserve">
          <source>If you have a merge conflict and want to see what others had in mind when modifying their branch, it's sometimes easier to compare their branch directly with the common ancestor (instead of our branch). For that you can use &lt;code&gt;merge-base&lt;/code&gt;:</source>
          <target state="translated">병합 충돌이 발생하고 분기를 수정할 때 다른 사람들이 염두에두고있는 것을 확인하려는 경우 분기가 아닌 공통 조상과 분기를 직접 비교하는 것이 더 쉬운 경우가 있습니다. 이를 위해 &lt;code&gt;merge-base&lt;/code&gt; 를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3c883d427128e3ee60335551b4037a18d86bfca4" translate="yes" xml:space="preserve">
          <source>If you have automated tests, run those. If you have a &lt;a href=&quot;https://en.wikipedia.org/wiki/Lint_%28software%29&quot;&gt;lint&lt;/a&gt;, run that. If it's a buildable project, then build it before you commit, etc. In all cases, you need to do a bit of testing to make sure your changes didn't break anything. (Heck, even a merge without conflicts can break working code.)</source>
          <target state="translated">자동화 된 테스트가있는 경우 테스트를 실행하십시오. &lt;a href=&quot;https://en.wikipedia.org/wiki/Lint_%28software%29&quot;&gt;보풀&lt;/a&gt; 이 있으면 실행하십시오. 빌드 가능한 프로젝트 인 경우 커밋하기 전에 빌드하십시오. 모든 경우에 변경 사항이 적용되지 않는지 확인하기 위해 약간의 테스트를 수행해야합니다. (충돌없이 병합하더라도 작업 코드가 손상 될 수 있습니다.)</target>
        </trans-unit>
        <trans-unit id="8f7ad0b58875a2eef77bed1a3b771769ae25e55c" translate="yes" xml:space="preserve">
          <source>If you still have any files under &lt;code&gt;Unmerged paths&lt;/code&gt;, and you did solve the conflict manually, then let Git know that you solved it by: &lt;code&gt;git add path/file&lt;/code&gt;.</source>
          <target state="translated">여전히 &lt;code&gt;Unmerged paths&lt;/code&gt; 아래에 파일이 있고 수동으로 충돌을 해결 한 경우 &lt;code&gt;git add path/file&lt;/code&gt; 을 사용 하여 문제를 해결했음을 Git에 알려주십시오.</target>
        </trans-unit>
        <trans-unit id="618a9df3236f9b4b00c66e050c030f70e7bfbaf7" translate="yes" xml:space="preserve">
          <source>If you want to do &lt;strong&gt;for all conflict files&lt;/strong&gt; run:</source>
          <target state="translated">&lt;strong&gt;모든 충돌 파일에 대해&lt;/strong&gt; 수행하려면 다음을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="40e2ccced76045c87f99f9598b0f6ca2b170ac5d" translate="yes" xml:space="preserve">
          <source>If you want to get changes from BASE</source>
          <target state="translated">BASE에서 변경 사항을 가져 오려면</target>
        </trans-unit>
        <trans-unit id="9a91acbff11907c7623923e649ccb1161cc13790" translate="yes" xml:space="preserve">
          <source>If you want to get changes from LOCAL</source>
          <target state="translated">LOCAL에서 변경 사항을 받으려면</target>
        </trans-unit>
        <trans-unit id="3ff3c58bc799a86cb942b0f9edeea683c119470b" translate="yes" xml:space="preserve">
          <source>If you want to get changes from REMOTE</source>
          <target state="translated">REMOTE에서 변경 사항을 받으려면</target>
        </trans-unit>
        <trans-unit id="7f764d3f6b37d69b7cfb44ee1e10315cfa562c73" translate="yes" xml:space="preserve">
          <source>If you want to merge from branch (test) to master, you can follow these steps:</source>
          <target state="translated">지점 (테스트)에서 마스터로 병합하려는 경우 다음 단계를 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5b99b606e7392bf3cc501c5e6406eeea867175e7" translate="yes" xml:space="preserve">
          <source>If you're making frequent small commits, then start by looking at the commit comments with &lt;code&gt;git log --merge&lt;/code&gt;. Then &lt;code&gt;git diff&lt;/code&gt; will show you the conflicts.</source>
          <target state="translated">자주 작은 커밋을 수행하는 경우 &lt;code&gt;git log --merge&lt;/code&gt; 로 커밋 주석을 살펴보십시오. 그런 다음 &lt;code&gt;git diff&lt;/code&gt; 가 충돌을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="e087c5303db4581add8424216fe62c3476f5c96d" translate="yes" xml:space="preserve">
          <source>If you're unsure of a merge, don't force it.</source>
          <target state="translated">병합이 확실하지 않은 경우 강제로 병합하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="eae8dcd45665da5a6e192ad89e08d8c301cd9888" translate="yes" xml:space="preserve">
          <source>In case of conflict, just use</source>
          <target state="translated">충돌이 발생하면</target>
        </trans-unit>
        <trans-unit id="d592dbde4754ce459b94a6718b0d95d29d91ed12" translate="yes" xml:space="preserve">
          <source>In speaking of pull/fetch/merge in the above answers, I would like to share an interesting and productive trick,</source>
          <target state="translated">위의 답변에서 끌어 오기 / 가져 오기 / 병합에 대해 흥미롭고 생산적인 트릭을 공유하고 싶습니다.</target>
        </trans-unit>
        <trans-unit id="404c8199355521cd32b47a7d72664223656e0afb" translate="yes" xml:space="preserve">
          <source>In the long run, planning ahead and being aware of what others are working on are the best tools for anticipating merge conflicts and prepare yourself to resolve them correctly in less time.</source>
          <target state="translated">장기적으로 미리 계획하고 다른 사람들이 무엇을하고 있는지 인식하는 것이 병합 충돌을 예상하고 더 짧은 시간 내에 올바르게 해결할 수 있도록 준비하는 가장 좋은 도구입니다.</target>
        </trans-unit>
        <trans-unit id="2ddfdc4de435b57cc9f426f563d158f02c8f1dfc" translate="yes" xml:space="preserve">
          <source>In this step you will try to fix the conflict using your prefer IDE</source>
          <target state="translated">이 단계에서는 선호하는 IDE를 사용하여 충돌을 해결하려고합니다.</target>
        </trans-unit>
        <trans-unit id="dc64513761c45dd824144f46922e260041bf8652" translate="yes" xml:space="preserve">
          <source>Instead I try to do</source>
          <target state="translated">대신 나는 노력하려고</target>
        </trans-unit>
        <trans-unit id="c042f3d9b71b32db250543be269d410c99d13527" translate="yes" xml:space="preserve">
          <source>Instead of:</source>
          <target state="translated">대신에:</target>
        </trans-unit>
        <trans-unit id="7114095c6f61ba912555fde2a05cdbdc7435bd0d" translate="yes" xml:space="preserve">
          <source>It can help you very well by showing what are the changes made to the original one and should you accept  &lt;code&gt;incoming&lt;/code&gt; or</source>
          <target state="translated">원래 변경 사항이 무엇인지 표시하고 &lt;code&gt;incoming&lt;/code&gt; 또는</target>
        </trans-unit>
        <trans-unit id="97c4c9cdb8b4f9dade9ea3c515bca654b46ccc5b" translate="yes" xml:space="preserve">
          <source>It graphically can show the changes between 3 files and it allows automatic merging (when safe to do so) and full control over editing the resulting file.</source>
          <target state="translated">3 개의 파일 간 변경 사항을 그래픽으로 표시 할 수 있으며 자동 병합 (안전한 경우) 및 결과 파일 편집을 완벽하게 제어 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fc65623ad7e5af9ffb0022bbd490aee9cc8be179" translate="yes" xml:space="preserve">
          <source>It helped for me and it can work for you too !</source>
          <target state="translated">그것은 나에게 도움이되었고 그것은 당신을 위해 일할 수 있습니다!</target>
        </trans-unit>
        <trans-unit id="26cb61480f17932403ae66265778d74b745d11b3" translate="yes" xml:space="preserve">
          <source>It opens a GUI that steps you through each conflict, and you get to choose how to merge.  Sometimes it requires a bit of hand editing afterwards, but usually it's enough by itself.  It is much better than doing the whole thing by hand certainly.</source>
          <target state="translated">각 충돌을 단계별로 안내하는 GUI가 열리고 병합 방법을 선택할 수 있습니다. 때로는 나중에 약간의 손 편집이 필요하지만 일반적으로 충분합니다. 손으로 모든 일을하는 것보다 훨씬 낫습니다.</target>
        </trans-unit>
        <trans-unit id="b42f3381050c1b31f935c0dabe817fe60cac10a9" translate="yes" xml:space="preserve">
          <source>It will open local version (ours), &quot;base&quot; or &quot;merged&quot; version (the current result of the merge) and remote version (theirs). Save the merged version when you are finished, run &lt;code&gt;git mergetool -t meld&lt;/code&gt; again until you get &quot;No files need merging&quot;, then go to Steps 3. and 4.</source>
          <target state="translated">로컬 버전 (우리), &quot;기본&quot;또는 &quot;병합&quot;버전 (현재 병합 결과) 및 원격 버전 (그들의)이 열립니다. 완료되면 병합 된 버전을 저장하고 &quot;파일을 병합 할 필요가 없습니다&quot;가 표시 될 때까지 &lt;code&gt;git mergetool -t meld&lt;/code&gt; 를 다시 실행 한 다음 3 단계 및 4 단계로 이동하십시오.</target>
        </trans-unit>
        <trans-unit id="bb08ab4098d66264a23b33d34e2a1fb7f673e561" translate="yes" xml:space="preserve">
          <source>It will show all conflicts like this</source>
          <target state="translated">이 같은 모든 충돌을 보여줍니다</target>
        </trans-unit>
        <trans-unit id="dbcce2d9085ea3f26119a032f6da8d8969d5be5c" translate="yes" xml:space="preserve">
          <source>LOCAL &amp;ndash; this is file from the current branch</source>
          <target state="translated">LOCAL &amp;ndash; 현재 지점의 파일입니다.</target>
        </trans-unit>
        <trans-unit id="8ae1c34bd37fad49cc5f8e02da648a78e89c3ed8" translate="yes" xml:space="preserve">
          <source>Left</source>
          <target state="translated">Left</target>
        </trans-unit>
        <trans-unit id="555712d9829e6328a9b7d5ec70facbda745fb9b3" translate="yes" xml:space="preserve">
          <source>Look at the diffs from each branch. &lt;code&gt;git log --merge -p &amp;lt;path&amp;gt;&lt;/code&gt; will show diffs first for the &lt;code&gt;HEAD&lt;/code&gt; version and then the &lt;code&gt;MERGE_HEAD&lt;/code&gt; version.</source>
          <target state="translated">각 지점의 diff를보십시오. &lt;code&gt;git log --merge -p &amp;lt;path&amp;gt;&lt;/code&gt; 는 &lt;code&gt;HEAD&lt;/code&gt; 버전에 대한 diff를 먼저 표시 한 다음 &lt;code&gt;MERGE_HEAD&lt;/code&gt; 버전을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="a326ab540e0d9536d53dbc94d57cb0c25e24d9a1" translate="yes" xml:space="preserve">
          <source>Look at the diffs. &lt;code&gt;git diff&lt;/code&gt; will show a three-way diff, highlighting changes from both the &lt;code&gt;HEAD&lt;/code&gt; and &lt;code&gt;MERGE_HEAD&lt;/code&gt; versions.</source>
          <target state="translated">차이점을보세요. &lt;code&gt;git diff&lt;/code&gt; 는 &lt;code&gt;HEAD&lt;/code&gt; 및 &lt;code&gt;MERGE_HEAD&lt;/code&gt; 버전의 변경 사항을 강조 표시하는 3 방향 diff를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="f8c63749f2ae2fa24fa7ef48c360ef59f66a1f48" translate="yes" xml:space="preserve">
          <source>Look at the originals. &lt;code&gt;git show :1:filename&lt;/code&gt; shows the common ancestor, &lt;code&gt;git show :2:filename&lt;/code&gt; shows the &lt;code&gt;HEAD&lt;/code&gt; version, and &lt;code&gt;git show :3:filename&lt;/code&gt; shows the &lt;code&gt;MERGE_HEAD&lt;/code&gt; version.</source>
          <target state="translated">원본을보십시오. &lt;code&gt;git show :1:filename&lt;/code&gt; 은 공통 조상을 나타내고 &lt;code&gt;git show :2:filename&lt;/code&gt; 은 &lt;code&gt;HEAD&lt;/code&gt; 버전을, &lt;code&gt;git show :3:filename&lt;/code&gt; 은 &lt;code&gt;MERGE_HEAD&lt;/code&gt; 버전을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="da48cfaff0482f5a700e60e4191306b2026eace6" translate="yes" xml:space="preserve">
          <source>MERGED &amp;ndash; merge result, this is what gets saved in the repo</source>
          <target state="translated">MERGED &amp;ndash; 병합 결과, 이것이 repo에 저장되는 것입니다</target>
        </trans-unit>
        <trans-unit id="c207672d3b478974acf7e5502421de413cf99f62" translate="yes" xml:space="preserve">
          <source>Merge conflicts could occur in different situations:</source>
          <target state="translated">서로 다른 상황에서 병합 충돌이 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="89538bead44a3004ea9986328c5b27cb003d4f0c" translate="yes" xml:space="preserve">
          <source>Merge conflicts happens when changes are made to a file at the same time. Here is how to solve it.</source>
          <target state="translated">동시에 파일을 변경하면 병합 충돌이 발생합니다. 해결 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e5fff5bc126a251ef08a0ce23b8487354eb67b5f" translate="yes" xml:space="preserve">
          <source>Merging can feel overwhelming, especially when there are a lot of conflicting files and the conflict markers cover hundreds of lines. Often times when estimating software projects we don't include enough time for overhead items like handling a gnarly merge, so it feels like a real drag to spend several hours dissecting each conflict.</source>
          <target state="translated">특히 충돌하는 파일이 많고 충돌 마커가 수백 줄을 포함하는 경우 병합이 압도적으로 느껴질 수 있습니다. 종종 소프트웨어 프로젝트를 추정 할 때 심하게 병합 처리하는 등의 오버 헤드 항목에 충분한 시간을 포함하지 않기 때문에 각 충돌을 해체하는 데 몇 시간을 소비하는 것이 실제로 당황한 것처럼 느껴집니다.</target>
        </trans-unit>
        <trans-unit id="e39bb33836c26f3139f0a912c706206ba5e974d5" translate="yes" xml:space="preserve">
          <source>More info about vimdiff navigation &lt;a href=&quot;https://stackoverflow.com/questions/4556184/vim-move-window-left-right&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://stackoverflow.com/questions/27151456/how-do-i-jump-to-the-next-prev-diff-in-git-difftool&quot;&gt;here&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/questions/4556184/vim-move-window-left-right&quot;&gt;여기&lt;/a&gt; 및 &lt;a href=&quot;https://stackoverflow.com/questions/27151456/how-do-i-jump-to-the-next-prev-diff-in-git-difftool&quot;&gt;여기&lt;/a&gt; 에 vimdiff 탐색에 대한 추가 정보</target>
        </trans-unit>
        <trans-unit id="2b1bfe9110cf0c706e0d05da6f4787b55fdde2a0" translate="yes" xml:space="preserve">
          <source>Note the list of conflicted files with: &lt;code&gt;git status&lt;/code&gt; (under &lt;code&gt;Unmerged paths&lt;/code&gt; section).</source>
          <target state="translated">충돌 &lt;code&gt;git status&lt;/code&gt; 파일 목록은 다음과 같습니다 : git status ( &lt;code&gt;Unmerged paths&lt;/code&gt; 섹션 아래).</target>
        </trans-unit>
        <trans-unit id="76a117ad8111894a1bf378d48165f39268206dd8" translate="yes" xml:space="preserve">
          <source>Now every thing is fine and you will find your commit in gerrit</source>
          <target state="translated">이제 모든 것이 잘되고 gerrit에서 커밋을 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="439caa25a979e2fb12ce16caa7f6dd15ef11c706" translate="yes" xml:space="preserve">
          <source>Now note that the file TestClass.java is shown in red in intelliJ
Also git status will show</source>
          <target state="translated">이제 TestClass.java 파일이 intelliJ에서 빨간색으로 표시됩니다. 또한 git status가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="da73ee3e345c38d30a956ed6fc100e554e797dbc" translate="yes" xml:space="preserve">
          <source>Now you can do the same and maintain as many local branches you want and work simultaneous my just doing a git checkout to your branch when ever necessary.</source>
          <target state="translated">이제 원하는 지역 지점과 동일한 작업을 수행하고 유지 관리하고 필요할 때 지점에 git checkout을 수행하는 동시에 작업 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="25b6fa122cc4fa3ab8aae8c0fb7c6910f4daf896" translate="yes" xml:space="preserve">
          <source>Oh my, oh my, upstream changed some things, but just to use my changes...no...their changes...</source>
          <target state="translated">오 마이, 오 마이, 업스트림은 몇 가지 사항을 변경했지만 내 변경 사항을 사용하기 위해 ... 아니 ... 변경 사항 ...</target>
        </trans-unit>
        <trans-unit id="4960aa7dc5964ca6ef5eb3e74371acd1a4093407" translate="yes" xml:space="preserve">
          <source>On macOS you can install via:</source>
          <target state="translated">macOS에서는 다음을 통해 설치할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="10317b5751b3df6c5c097f628325b733f07f54e7" translate="yes" xml:space="preserve">
          <source>Once in the 3-ways merge, &lt;em&gt;fugitive&lt;/em&gt; will let you get the changes of any of the branches you are merging in the following fashion:</source>
          <target state="translated">3 웨이 병합에서 &lt;em&gt;비산&lt;/em&gt; 하면 다음과 같은 방식으로 병합하려는 분기의 변경 내용을 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a577bec41e40cb755e1ccc45c2a5d18df1988e6d" translate="yes" xml:space="preserve">
          <source>Once you are finished merging the file, type &lt;code&gt;:Gwrite&lt;/code&gt; in the merged buffer. 
Vimcasts released a great &lt;a href=&quot;http://vimcasts.org/episodes/fugitive-vim-resolving-merge-conflicts-with-vimdiff/&quot;&gt;video&lt;/a&gt; explaining in detail this steps.</source>
          <target state="translated">파일 병합을 마치면 병합 된 버퍼에 &lt;code&gt;:Gwrite&lt;/code&gt; 를 입력 하십시오 . Vimcasts는이 단계를 자세히 설명하는 훌륭한 &lt;a href=&quot;http://vimcasts.org/episodes/fugitive-vim-resolving-merge-conflicts-with-vimdiff/&quot;&gt;비디오를&lt;/a&gt; 발표했습니다.</target>
        </trans-unit>
        <trans-unit id="43f787b16f278fcf8aa01eef0994a4578332b046" translate="yes" xml:space="preserve">
          <source>Once you've resolved &lt;strong&gt;all&lt;/strong&gt; conflicts, do &lt;code&gt;git rebase --continue&lt;/code&gt; or whatever command 
Git said to do when you completed.</source>
          <target state="translated">&lt;strong&gt;모든&lt;/strong&gt; 충돌을 해결했으면 &lt;code&gt;git rebase --continue&lt;/code&gt; 또는 Git이 완료했을 때 수행 한 명령을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="db3bda9aacc5bca97220fd96373a3421022ea32c" translate="yes" xml:space="preserve">
          <source>Once you've resolved the conflict in a file &lt;code&gt;git add the_file&lt;/code&gt;.</source>
          <target state="translated">파일 &lt;code&gt;git add the_file&lt;/code&gt; 에서 충돌을 해결하면 the_file을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="59017e16293cce2b88b043f41e02d21dac1a985e" translate="yes" xml:space="preserve">
          <source>Open each file and examine the diffs; Git demarcates them.  Hopefully it will be obvious which version of each block to keep.  You may need to discuss it with fellow developers who committed the code.</source>
          <target state="translated">각 파일을 열고 diff를 검사하십시오. 힘내는 그들을 구분합니다. 바라건대 각 블록의 버전을 유지하는 것이 분명 할 것입니다. 코드를 커밋 한 동료 개발자와 논의해야 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="e85b9596370fb9c69c9435dbfa9bd28dc6b6ab65" translate="yes" xml:space="preserve">
          <source>Open each of those files one by one, or all at once by:</source>
          <target state="translated">다음과 같이 각 파일을 하나씩 또는 한 번에여십시오.</target>
        </trans-unit>
        <trans-unit id="90a01728725fc6bffec18879dac73281b710df12" translate="yes" xml:space="preserve">
          <source>Open the file in intelliJ, it will have sections with</source>
          <target state="translated">intelliJ에서 파일을 열면 섹션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="d94753520a26eddd7b65afc1ab802df26dfc0b83" translate="yes" xml:space="preserve">
          <source>Or else you will have to use a GUI merge tool to step through files one by one, say the merge tool is &lt;code&gt;p4merge&lt;/code&gt;, or write any one's name you've already installed</source>
          <target state="translated">그렇지 않으면 GUI 병합 도구를 사용하여 파일을 하나씩 단계별로 이동해야합니다. 병합 도구는 &lt;code&gt;p4merge&lt;/code&gt; 이거나 이미 설치 한 이름을 작성해야합니다.</target>
        </trans-unit>
        <trans-unit id="33dc7a1152af93385b97abf2bed64a4471a85875" translate="yes" xml:space="preserve">
          <source>PS: It will work only if you've configured git with with your code and Visual Studio Code.</source>
          <target state="translated">추신 : 코드와 Visual Studio Code로 git을 구성한 경우에만 작동합니다.</target>
        </trans-unit>
        <trans-unit id="6052e8e1fbe0373fcc55364272596ceb5789b5e1" translate="yes" xml:space="preserve">
          <source>Path and filename conflicts can be solved by &lt;code&gt;git add&lt;/code&gt;/&lt;code&gt;git rm&lt;/code&gt;.</source>
          <target state="translated">경로 및 파일 이름 충돌은 &lt;code&gt;git add&lt;/code&gt; / &lt;code&gt;git rm&lt;/code&gt; 로 해결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d7dd1808b84c37fb3ea9b4448dcf162c6448fab5" translate="yes" xml:space="preserve">
          <source>Plan ahead; communicate with co-workers.</source>
          <target state="translated">미리 계획하십시오. 동료들과 의사 소통합니다.</target>
        </trans-unit>
        <trans-unit id="a404d7bca3c1d51acaf1b7dab0af047b2a2ffb83" translate="yes" xml:space="preserve">
          <source>Planning ahead and being aware of what others are working on can help prevent merge conflicts and/or help resolve them earlier -- while the details are still fresh in mind.</source>
          <target state="translated">미리 계획을 세우고 다른 사람들이 무엇을하고 있는지 알면 병합 충돌을 방지하고 조기에 해결하는 데 도움이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="83c0b885b0a38566ed9722438c0513be76f77cfd" translate="yes" xml:space="preserve">
          <source>Please follow the following steps to fix merge conflicts in Git:</source>
          <target state="translated">Git에서 병합 충돌을 해결하려면 다음 단계를 따르십시오.</target>
        </trans-unit>
        <trans-unit id="f7d4c271606f9ee9168d1a393f65cdddde869ceb" translate="yes" xml:space="preserve">
          <source>Pull the recent contents from master:
&lt;strong&gt;&lt;em&gt;git pull --rebase origin master&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;git pull --rebase origin master&lt;/em&gt;&lt;/strong&gt; 에서 최근 내용을 &lt;strong&gt;&lt;em&gt;가져옵니다.&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3ee9fffd45db979e0d1c74f03d3dd56b26471c3c" translate="yes" xml:space="preserve">
          <source>Push to the master branch:
&lt;strong&gt;&lt;em&gt;git push&lt;/em&gt;&lt;/strong&gt; (to your Git repository)</source>
          <target state="translated">마스터 브랜치로 &lt;strong&gt;&lt;em&gt;푸시&lt;/em&gt;&lt;/strong&gt; : &lt;strong&gt;&lt;em&gt;git push&lt;/em&gt;&lt;/strong&gt; (Git 저장소로)</target>
        </trans-unit>
        <trans-unit id="b6fbb68683d3832aa04f181677975e02a81e5630" translate="yes" xml:space="preserve">
          <source>REMOTE &amp;ndash; file you are merging into your branch</source>
          <target state="translated">REMOTE &amp;ndash; 브랜치에 병합 할 파일</target>
        </trans-unit>
        <trans-unit id="88b35db955662f7fccc81b814566407d747daaa3" translate="yes" xml:space="preserve">
          <source>Related: &lt;a href=&quot;https://stackoverflow.com/q/25576415/55075&quot;&gt;What is the precise meaning of &quot;ours&quot; and &quot;theirs&quot; in git?&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/q/25576415/55075&quot;&gt;git에서 &quot;우리&quot;와 &quot;그들&quot;의 정확한 의미는 무엇입니까?&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="bb682014aabba1d2c235e608a21de9821bfbc40c" translate="yes" xml:space="preserve">
          <source>Replacing &lt;code&gt;$MERGED_IN_BRANCH&lt;/code&gt; with the branch I merged in and &lt;code&gt;[path]&lt;/code&gt; with the file that is conflicting. This command will log all the commits, in patch form, between (&lt;code&gt;..&lt;/code&gt;) two commits. If you leave one side empty like in the commands above git will automatically use &lt;code&gt;HEAD&lt;/code&gt; (the branch you are merging into in this case).</source>
          <target state="translated">&lt;code&gt;$MERGED_IN_BRANCH&lt;/code&gt; 를 내가 병합 한 브랜치로 바꾸고 &lt;code&gt;[path]&lt;/code&gt; 를 충돌하는 파일로 바꿉니다 . 이 명령은 ( &lt;code&gt;..&lt;/code&gt; ) 두 커밋 사이에 패치 형식으로 모든 커밋을 기록합니다. 위의 명령과 같이 한쪽을 비워두면 git은 자동으로 &lt;code&gt;HEAD&lt;/code&gt; (이 경우 병합하는 분기)를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="754ec967779bd2370b6031e462d4cfe9fcbd0f6a" translate="yes" xml:space="preserve">
          <source>Resolve the conflicts. Git will mark the conflicts in the working tree. Edit the files into shape and &lt;code&gt;git add&lt;/code&gt; them to the index. Use &lt;code&gt;git commit&lt;/code&gt; to seal the deal.</source>
          <target state="translated">충돌을 해결하십시오. 힘내 작업 트리에서 충돌을 표시합니다. 파일을 모양으로 편집하고 &lt;code&gt;git add&lt;/code&gt; 을 색인에 추가하십시오 . &lt;code&gt;git commit&lt;/code&gt; 을 사용하여 거래를 봉인하십시오.</target>
        </trans-unit>
        <trans-unit id="10f8070070547ece9227547970e8168b7821ea8b" translate="yes" xml:space="preserve">
          <source>Review changes and accept either version for each of them.</source>
          <target state="translated">변경 사항을 검토하고 각 버전에 대해 두 버전 중 하나를 수락하십시오.</target>
        </trans-unit>
        <trans-unit id="954daa8b00335c66e262106e01f7dc22b19a4372" translate="yes" xml:space="preserve">
          <source>Right</source>
          <target state="translated">Right</target>
        </trans-unit>
        <trans-unit id="a2bfb47b2fe2945a9227665d3b4bfc8f09393dfe" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://medium.com/@yairchu/how-git-mediate-made-me-stop-fearing-merge-conflicts-and-start-treating-them-like-an-easy-game-of-a2c71b919984&quot;&gt;this post&lt;/a&gt; for a quick intro on how to use it.</source>
          <target state="translated">사용 방법에 대한 빠른 소개는 &lt;a href=&quot;https://medium.com/@yairchu/how-git-mediate-made-me-stop-fearing-merge-conflicts-and-start-treating-them-like-an-easy-game-of-a2c71b919984&quot;&gt;이 게시물&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="3ccbda76134d2bbffe0a7eb4a8057418496f4c8f" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://www.kernel.org/pub/software/scm/git/docs/git-merge.html#_how_conflicts_are_presented&quot;&gt;How Conflicts Are Presented&lt;/a&gt; or, in Git, the &lt;code&gt;git merge&lt;/code&gt; documentation to understand what merge conflict markers are.</source>
          <target state="translated">병합 충돌 마커가 무엇인지 이해하려면 충돌이 표시되는 &lt;a href=&quot;https://www.kernel.org/pub/software/scm/git/docs/git-merge.html#_how_conflicts_are_presented&quot;&gt;방법&lt;/a&gt; 또는 Git에서 &lt;code&gt;git merge&lt;/code&gt; 문서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="494638b10d967211b2ee49f2b5a0c6f2944955f6" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;https://help.github.com/articles/resolving-a-merge-conflict-from-the-command-line/&quot;&gt;Resolving a merge conflict from the command line&lt;/a&gt; at GitHub</source>
          <target state="translated">참조 : GitHub &lt;a href=&quot;https://help.github.com/articles/resolving-a-merge-conflict-from-the-command-line/&quot;&gt;의 명령 줄&lt;/a&gt; 에서 병합 충돌 해결</target>
        </trans-unit>
        <trans-unit id="117985687fb4e31fc4b0b70ce40cfa454b78879d" translate="yes" xml:space="preserve">
          <source>Simply download it and run in repo as:</source>
          <target state="translated">간단히 다운로드하여 repo에서 다음과 같이 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="3b4d4db1016a0dcd197daee09f21a7c6173951d5" translate="yes" xml:space="preserve">
          <source>Simply, if you know well that changes in one of the repositories is not important, and want to resolve all changes in favor of the other one, use:</source>
          <target state="translated">리포지토리 중 하나의 변경이 중요하지 않다는 것을 잘 알고 있고 다른 변경 사항을 위해 모든 변경 사항을 해결하려면 다음을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="bdc26a6c55a54975e8e87cc14ea1935913a21dd5" translate="yes" xml:space="preserve">
          <source>So instead I do:</source>
          <target state="translated">대신에 나는 :</target>
        </trans-unit>
        <trans-unit id="3e66f4270aaf5aad76b4a5003b6d4c3258489502" translate="yes" xml:space="preserve">
          <source>So you decide to take a look at the changes:</source>
          <target state="translated">따라서 변경 사항을 살펴보기로 결정합니다.</target>
        </trans-unit>
        <trans-unit id="ad9d48522fcf343c56c523ee1bc1c12a8297dbe1" translate="yes" xml:space="preserve">
          <source>So you get up-to-date and try again, but have a conflict:</source>
          <target state="translated">따라서 최신 정보를 얻고 다시 시도하지만 충돌이 있습니다.</target>
        </trans-unit>
        <trans-unit id="8f28dcb6026cd0952fcd9aac2a3fbb12726aed7c" translate="yes" xml:space="preserve">
          <source>Solve the conflicts separately for each file by one of the following approaches:</source>
          <target state="translated">다음 방법 중 하나를 사용하여 각 파일의 충돌을 개별적으로 해결하십시오.</target>
        </trans-unit>
        <trans-unit id="b8390b6223d0ac9dbfbdb4d9ee338a66d523cbc0" translate="yes" xml:space="preserve">
          <source>Somebody already mentioned this, but understanding the intention behind each diff hunk is generally very helpful for understanding where a conflict came from and how to handle it.</source>
          <target state="translated">누군가 이미 이것을 언급했지만 각 diff hunk의 의도를 이해하면 일반적으로 충돌이 발생한 위치와 처리 방법을 이해하는 데 매우 도움이됩니다.</target>
        </trans-unit>
        <trans-unit id="e94e2a8ac1328e89e2951fe041052cadadb87fc8" translate="yes" xml:space="preserve">
          <source>Start the mergetool and check the conflicts and fix them...and check the changes in the remote branch with your current branch:
&lt;strong&gt;&lt;em&gt;git mergetool&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">mergetool을 시작하고 충돌을 확인하고 수정하십시오 ... 현재 지점으로 원격 지점의 변경 사항을 확인하십시오 : &lt;strong&gt;&lt;em&gt;git mergetool&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5ff57f4185e884322f43c9c59da60f12f41285ea" translate="yes" xml:space="preserve">
          <source>TL;DR</source>
          <target state="translated">TL;DR</target>
        </trans-unit>
        <trans-unit id="db2022cd2cf86579d8076f3076c361ff76371894" translate="yes" xml:space="preserve">
          <source>Ta-da!</source>
          <target state="translated">Ta-da!</target>
        </trans-unit>
        <trans-unit id="cb0d4640cc97fab3274414a90556c59b65391899" translate="yes" xml:space="preserve">
          <source>The best thing I have found is to use the &quot;diff3&quot; merge conflict style:</source>
          <target state="translated">내가 찾은 가장 좋은 것은 &quot;diff3&quot;병합 충돌 스타일을 사용하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="fa416c6119c6e16e6b0b6ae731c70e6bbd2ef937" translate="yes" xml:space="preserve">
          <source>The command doesn't necessarily open a GUI unless you install one. Running &lt;code&gt;git mergetool&lt;/code&gt; for me resulted in &lt;code&gt;vimdiff&lt;/code&gt; being used. You can install one of the following tools to use it instead: &lt;code&gt;meld&lt;/code&gt;, &lt;code&gt;opendiff&lt;/code&gt;, &lt;code&gt;kdiff3&lt;/code&gt;, &lt;code&gt;tkdiff&lt;/code&gt;, &lt;code&gt;xxdiff&lt;/code&gt;, &lt;code&gt;tortoisemerge&lt;/code&gt;, &lt;code&gt;gvimdiff&lt;/code&gt;, &lt;code&gt;diffuse&lt;/code&gt;, &lt;code&gt;ecmerge&lt;/code&gt;, &lt;code&gt;p4merge&lt;/code&gt;, &lt;code&gt;araxis&lt;/code&gt;, &lt;code&gt;vimdiff&lt;/code&gt;, &lt;code&gt;emerge&lt;/code&gt;.</source>
          <target state="translated">GUI를 설치하지 않으면 명령이 반드시 열릴 필요는 없습니다. 나를 위해 &lt;code&gt;git mergetool&lt;/code&gt; 을 실행하면 &lt;code&gt;vimdiff&lt;/code&gt; 가 사용되었습니다. 다음 도구 중 하나를 설치하여 대신 사용할 수 있습니다. &lt;code&gt;meld&lt;/code&gt; , &lt;code&gt;opendiff&lt;/code&gt; , &lt;code&gt;kdiff3&lt;/code&gt; , &lt;code&gt;tkdiff&lt;/code&gt; , &lt;code&gt;xxdiff&lt;/code&gt; , &lt;code&gt;tortoisemerge&lt;/code&gt; , &lt;code&gt;gvimdiff&lt;/code&gt; , &lt;code&gt;p4merge&lt;/code&gt; , &lt;code&gt;ecmerge&lt;/code&gt; , p4merge , &lt;code&gt;araxis&lt;/code&gt; , &lt;code&gt;vimdiff&lt;/code&gt; , &lt;code&gt;emerge&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="00181eebd298a786ad84b0a5cfdc81e9f1a4196b" translate="yes" xml:space="preserve">
          <source>The middle section is what the common ancestor looked like. This is useful because you can compare it to the top and bottom versions to get a better sense of what was changed on each branch, which gives you a better idea for what the purpose of each change was.</source>
          <target state="translated">중간 부분은 공통 조상의 모습입니다. 이것은 각 브랜치에서 변경된 사항을 더 잘 이해할 수 있도록 상위 및 하위 버전과 비교할 수 있기 때문에 유용합니다. 그러면 각 변경의 목적이 무엇인지 더 잘 알 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="84eff26971566856e04b40855b74ac202b029577" translate="yes" xml:space="preserve">
          <source>Then I can run the following commands to see the two diff hunks that caused the conflict:</source>
          <target state="translated">그런 다음 다음 명령을 실행하여 충돌을 일으킨 두 개의 diff hunk를 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="960e9499cb2875d16461130707873670bf09ea5c" translate="yes" xml:space="preserve">
          <source>Then every time you come across a merge conflict you just need to run this command:</source>
          <target state="translated">그런 다음 병합 충돌이 발생할 때마다이 명령을 실행하면됩니다.</target>
        </trans-unit>
        <trans-unit id="3259e73bc0d30282ee86971a518870c81c32ad76" translate="yes" xml:space="preserve">
          <source>Then it opens the Kdiff3, and first tries to resolve the merge conflicts automatically. Most of the conflicts would be resolved spontaneously and you need to fix the rest manually.</source>
          <target state="translated">그런 다음 Kdiff3을 열고 먼저 병합 충돌을 자동으로 해결하려고 시도합니다. 대부분의 충돌은 자발적으로 해결되며 나머지는 수동으로 수정해야합니다.</target>
        </trans-unit>
        <trans-unit id="cd0247227edaffbcc3ab9deb3c823775c53bdc38" translate="yes" xml:space="preserve">
          <source>Then once you're done, save the file and it goes to the next file with conflict and you do the same thing again until all the conflicts are resolved.</source>
          <target state="translated">그런 다음 파일을 저장하면 파일이 저장되고 충돌이 발생한 다음 파일로 이동하여 모든 충돌이 해결 될 때까지 동일한 작업을 다시 수행합니다.</target>
        </trans-unit>
        <trans-unit id="7a782f5dc825122a5b15059b520496a2b37aeed9" translate="yes" xml:space="preserve">
          <source>Then open the project in VS and go to Team Explorer -&amp;gt; Branch.  Now there is a message that says Merge is pending and conflicting files are listed right below the message.</source>
          <target state="translated">그런 다음 VS에서 프로젝트를 열고 팀 탐색기-&amp;gt; 분기로 이동하십시오. 이제 병합이 보류 중이며 충돌하는 파일이 메시지 바로 아래에 나열된다는 메시지가 나타납니다.</target>
        </trans-unit>
        <trans-unit id="6276b71b7b9d1df026bc479f15195ae504382e10" translate="yes" xml:space="preserve">
          <source>Then setup git configs to use Kdiff as its mergetool:</source>
          <target state="translated">그런 다음 git configs를 설정하여 Kdiff를 mergetool로 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="6e37b00edbd74e9993355959a37378dd58899b7f" translate="yes" xml:space="preserve">
          <source>Then you can use the following keyboard shortcuts:</source>
          <target state="translated">그런 다음 다음 단축키를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="35380e99d8fccffbf29acf9e8f9efd6178d21e86" translate="yes" xml:space="preserve">
          <source>There are 3 steps:</source>
          <target state="translated">3 단계가 있습니다.</target>
        </trans-unit>
        <trans-unit id="886c558dcdd074dc65267395c98971c06030fdc7" translate="yes" xml:space="preserve">
          <source>These 4 views are</source>
          <target state="translated">이 4 가지 견해는</target>
        </trans-unit>
        <trans-unit id="22479224c315e3ac8965a8d67b70537247f8ee88" translate="yes" xml:space="preserve">
          <source>This above command is the most useful command in my git life which saved a lots of time.</source>
          <target state="translated">이 위의 명령은 내 자식 생활에서 가장 유용한 명령으로 많은 시간을 절약했습니다.</target>
        </trans-unit>
        <trans-unit id="59037e1d8acc37c2c0be80dd1fa1d263cb2c7a35" translate="yes" xml:space="preserve">
          <source>This answers is to add an alternative for those VIM users like I that prefers to do everything within the editor.</source>
          <target state="translated">이 답변은 편집기 내에서 모든 작업을 수행하는 것을 선호하는 VIM 사용자를위한 대안을 추가하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="61c64505fa913e4a77f659489f58212df9cc15bb" translate="yes" xml:space="preserve">
          <source>This is not the same as using a merge tool, since a merge tool will include all of the non-conflicting diff hunks too. I find that to be distracting.</source>
          <target state="translated">병합 도구는 충돌하지 않는 모든 diff hunk도 포함하므로 병합 도구를 사용하는 것과는 다릅니다. 주의가 산만 해지는 것을 알았습니다.</target>
        </trans-unit>
        <trans-unit id="7a9726ba4331f750e36611e6d88058f64fce2ae7" translate="yes" xml:space="preserve">
          <source>This produces conflict markers like this:</source>
          <target state="translated">다음과 같은 충돌 마커가 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="9429d7dd63b1a82244a4ee81fc2e98d38e5dc2f3" translate="yes" xml:space="preserve">
          <source>This shows all of the commits that touched that file in between the common ancestor and the two heads you are merging. (So it doesn't include commits that already exist in both branches before merging.) This helps you ignore diff hunks that clearly are not a factor in your current conflict.</source>
          <target state="translated">이것은 공통 조상과 병합하는 두 헤드 사이에서 해당 파일을 터치 한 모든 커밋을 보여줍니다. (따라서 병합하기 전에 두 브랜치에 이미 존재하는 커밋은 포함되지 않습니다.) 이렇게하면 현재 충돌에 영향을 미치지 않는 다른 덩어리를 무시할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e8052170fcce5a238152e51b1b9fa51d7a1954b9" translate="yes" xml:space="preserve">
          <source>This way you are more deliberate about which files get added and you also get to review the list and think a bit more while using the editor for the message.  I find it also improves my commit messages when I use a full screen editor rather than the &lt;code&gt;-m&lt;/code&gt; option.</source>
          <target state="translated">이렇게하면 어떤 파일이 추가되는지 더 신중하게 알 수 있으며 메시지 편집기를 사용하는 동안 목록을 검토하고 조금 더 생각하게됩니다. &lt;code&gt;-m&lt;/code&gt; 옵션 대신 전체 화면 편집기를 사용하면 커밋 메시지가 향상됩니다.</target>
        </trans-unit>
        <trans-unit id="9bb8d189f888727aa299a713fa141bbbf42bccb5" translate="yes" xml:space="preserve">
          <source>This will allow you to see what commits went into the file in the two branches after they diverged. It usually makes it much easier to solve conflicts.</source>
          <target state="translated">이를 통해 두 분기에서 커밋 된 파일이 분기 된 후에 확인할 수 있습니다. 일반적으로 충돌을 해결하기가 훨씬 쉽습니다.</target>
        </trans-unit>
        <trans-unit id="9f7b2877e2f1a7bd2921ac234215cbfe9c395a9f" translate="yes" xml:space="preserve">
          <source>This will open three buffers (mine, theirs, and the output buffer). Navigate by pressing 'n' (next region), 'p' (prevision region). Press 'a' and 'b' to copy mine or theirs region to the output buffer, respectively. And/or edit the output buffer directly.</source>
          <target state="translated">이렇게하면 3 개의 버퍼 (광산, 버퍼 및 출력 버퍼)가 열립니다. 'n'(다음 영역), 'p'(제공 영역)를 눌러 탐색하십시오. 'a'와 'b'를 눌러 광산 또는 해당 지역을 출력 버퍼에 각각 복사하십시오. 출력 버퍼를 직접 편집하십시오.</target>
        </trans-unit>
        <trans-unit id="21f2993514dad951f274354d8d0b9637a2d6b95f" translate="yes" xml:space="preserve">
          <source>This will set vimdiff as the default merge tool.</source>
          <target state="translated">그러면 vimdiff가 기본 병합 도구로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="3cd317ab4778d4d010adb46a5d176b3961ac48ba" translate="yes" xml:space="preserve">
          <source>Thus, if you don't want to use the command-line or &lt;em&gt;any 3rd party tools that are offered here from older answers&lt;/em&gt;, go with GitHub's native tool.</source>
          <target state="translated">따라서 &lt;em&gt;이전 답변에서 제공되는&lt;/em&gt; 명령 줄 또는 &lt;em&gt;타사 도구&lt;/em&gt; 를 사용하지 않으려면 GitHub의 기본 도구를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="3599a4eee13e823c58dbc9bf040eace561214a89" translate="yes" xml:space="preserve">
          <source>Tip Five</source>
          <target state="translated">팁 5</target>
        </trans-unit>
        <trans-unit id="fefceba8ec7bb1e54efb028d96558e09d4820c6f" translate="yes" xml:space="preserve">
          <source>Tip Four</source>
          <target state="translated">팁 4</target>
        </trans-unit>
        <trans-unit id="8ca22f40b9bee969d8e790727afea793e1112fac" translate="yes" xml:space="preserve">
          <source>Tip One</source>
          <target state="translated">팁 하나</target>
        </trans-unit>
        <trans-unit id="a998c26341cf9c0a16ddb925ccfd55e91c1a2222" translate="yes" xml:space="preserve">
          <source>Tip Three</source>
          <target state="translated">팁 3</target>
        </trans-unit>
        <trans-unit id="d41d33682690e4ffb5a78c2c2d6f8f79b7aa226e" translate="yes" xml:space="preserve">
          <source>Tip Two</source>
          <target state="translated">팁 2</target>
        </trans-unit>
        <trans-unit id="fab1e01085f3441c59ae11c6bd959811634c7f61" translate="yes" xml:space="preserve">
          <source>To accept local/our version, use: &lt;code&gt;git checkout --ours path/file&lt;/code&gt;</source>
          <target state="translated">로컬 / 우리 버전을 수락하려면 다음을 사용하십시오 : &lt;code&gt;git checkout --ours path/file&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fc9e8d98a4f0ab6180fa3f017fa21cb84a1c8789" translate="yes" xml:space="preserve">
          <source>To accept remote/other version, use: &lt;code&gt;git checkout --theirs path/file&lt;/code&gt;. This will reject any local changes you did for that file.</source>
          <target state="translated">원격 / 기타 버전을 승인하려면 다음을 사용하십시오. &lt;code&gt;git checkout --theirs path/file&lt;/code&gt; . 해당 파일에 대한 로컬 변경 사항이 거부됩니다.</target>
        </trans-unit>
        <trans-unit id="328411be8e4df9b5a71a4f7ca3e682ee0f2b25e1" translate="yes" xml:space="preserve">
          <source>To check if everything is merged successfully, just run the mergetool command again, you should get this result:</source>
          <target state="translated">모든 것이 성공적으로 병합되었는지 확인하려면 mergetool 명령을 다시 실행하면 다음과 같은 결과가 나타납니다.</target>
        </trans-unit>
        <trans-unit id="cba02a9087cefb199c787a07b77e046e2a0cbe7e" translate="yes" xml:space="preserve">
          <source>Tpope came up with this great plugin for VIM called &lt;a href=&quot;https://github.com/tpope/vim-fugitive&quot;&gt;fugitive&lt;/a&gt;. Once installed you can run &lt;code&gt;:Gstatus&lt;/code&gt; to check the files that have conflict and &lt;code&gt;:Gdiff&lt;/code&gt; to open Git in a 3 ways merge.</source>
          <target state="translated">Tpope는 VIM 용 &lt;a href=&quot;https://github.com/tpope/vim-fugitive&quot;&gt;fugitive&lt;/a&gt; 라는 훌륭한 플러그인을 개발했습니다. 일단 설치되면 &lt;code&gt;:Gstatus&lt;/code&gt; 를 실행하여 충돌하는 파일을 확인하고 &lt;code&gt;:Gdiff&lt;/code&gt; 를 사용하여 3 가지 방법으로 Git을 엽니 다.</target>
        </trans-unit>
        <trans-unit id="297282c36d932ef18e4c066b3c37718ab7751ff6" translate="yes" xml:space="preserve">
          <source>Try Visual Studio Code for editing if you aren't already.
What it does is after you try merging(and land up in merge conflicts).VS code automatically detects the merge conflicts.</source>
          <target state="translated">Visual Studio Code를 아직 편집하지 않은 경우 편집 해보십시오. 병합을 시도한 후 병합 충돌이 발생하면 VS 코드는 병합 충돌을 자동으로 감지합니다.</target>
        </trans-unit>
        <trans-unit id="792091d7030cdecc4d447756a237c850f8471184" translate="yes" xml:space="preserve">
          <source>Try: &lt;code&gt;git mergetool&lt;/code&gt;</source>
          <target state="translated">시도 : &lt;code&gt;git mergetool&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2038bdec9210202d0d9d74839e3925ff0cd91ba1" translate="yes" xml:space="preserve">
          <source>Up</source>
          <target state="translated">Up</target>
        </trans-unit>
        <trans-unit id="d646749d4d83e809e6e32cea285d2b3353654aee" translate="yes" xml:space="preserve">
          <source>Use GUI to solve the conflicts: &lt;code&gt;git mergetool&lt;/code&gt; (the easiest way).</source>
          <target state="translated">GUI를 사용하여 충돌을 해결하십시오 : &lt;code&gt;git mergetool&lt;/code&gt; (가장 쉬운 방법).</target>
        </trans-unit>
        <trans-unit id="cf410607b4d646fae6b37dffcb3f37fcc481f52b" translate="yes" xml:space="preserve">
          <source>Use a mergetool. &lt;code&gt;git mergetool&lt;/code&gt; to launch a graphical mergetool which will work you through the merge.</source>
          <target state="translated">mergetool을 사용하십시오. &lt;code&gt;git mergetool&lt;/code&gt; 을 사용하면 병합을 통해 그래픽 병합 도구를 시작할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="31701f35723c5222b63893f168de94cece275c49" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;patience&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;patience&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="880da6b11bd5b493205b58216361da302d14dcfc" translate="yes" xml:space="preserve">
          <source>Usually, you only want to see the changes for a particular file:</source>
          <target state="translated">일반적으로 특정 파일에 대한 변경 사항 만보고자합니다.</target>
        </trans-unit>
        <trans-unit id="7c63bd7f640efb4658c5ef3f2317ffb187782ce9" translate="yes" xml:space="preserve">
          <source>Verify your changes with automated tools.</source>
          <target state="translated">자동화 된 도구로 변경 사항을 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="f60a56ea3737fcb2ba54e60f89647a6f3fd091f4" translate="yes" xml:space="preserve">
          <source>What I do to work around this issue is open up two command lines and in one run</source>
          <target state="translated">이 문제를 해결하기 위해해야 ​​할 일은 두 개의 명령 줄을 열고 한 번에 실행하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="ca7621a606f4aed5c196696f398beac26081f137" translate="yes" xml:space="preserve">
          <source>When finished with all buffers type</source>
          <target state="translated">모든 버퍼 유형으로 완료되면</target>
        </trans-unit>
        <trans-unit id="b196d6892bc8c0cda1ad69fd5abf79daf53a8311" translate="yes" xml:space="preserve">
          <source>When finished: Press 'q'. Emacs asks you if you want to save this buffer: yes.
After finishing a buffer mark it as resolved by running from the teriminal:</source>
          <target state="translated">완료되면 : 'q'를 누르십시오. Emacs는이 버퍼를 저장할 것인지 묻습니다. 예. 버퍼를 완료 한 후 터미널에서 실행하여 해결 된 것으로 표시하십시오.</target>
        </trans-unit>
        <trans-unit id="0079906e6ed4bd3200fdeda0e2f1d9bd10432c17" translate="yes" xml:space="preserve">
          <source>When running &quot;git fetch&quot; and then &quot;git merge&quot;</source>
          <target state="translated">&quot;git fetch&quot;를 실행 한 다음 &quot;git merge&quot;를 실행할 때</target>
        </trans-unit>
        <trans-unit id="ed97e73a69229caf78e776810b2baf62c68f0e1e" translate="yes" xml:space="preserve">
          <source>When running &quot;git fetch&quot; and then &quot;git rebase&quot;</source>
          <target state="translated">&quot;git fetch&quot;를 실행 한 다음 &quot;git rebase&quot;를 실행할 때</target>
        </trans-unit>
        <trans-unit id="d3e31411344bc765f68830306cd14dace0d3781b" translate="yes" xml:space="preserve">
          <source>When running &quot;git pull&quot; (which is actually equal to one of the above-mentioned conditions)</source>
          <target state="translated">&quot;git pull&quot;을 실행할 때 (실제로 위에서 언급 한 조건 중 하나와 동일)</target>
        </trans-unit>
        <trans-unit id="df97565f7f4215529afa06a8719dc16c812bbb7c" translate="yes" xml:space="preserve">
          <source>When running &quot;git stash pop&quot;</source>
          <target state="translated">&quot;git stash pop&quot;을 실행할 때</target>
        </trans-unit>
        <trans-unit id="b925d35f901c8e88e7050608cd7f82c6637d6e6a" translate="yes" xml:space="preserve">
          <source>When visiting a buffer requiring edits in Emacs, type</source>
          <target state="translated">Emacs에서 편집이 필요한 버퍼를 방문 할 때 다음을 입력하십시오.</target>
        </trans-unit>
        <trans-unit id="a679f0f3e69fd30103ffcbe92197cb52f6926959" translate="yes" xml:space="preserve">
          <source>When you're applying git patches (commits that are exported to files to be transferred, for example, by email)</source>
          <target state="translated">git 패치를 적용 할 때 (예를 들어, 이메일로 전송할 파일로 내보내는 커밋)</target>
        </trans-unit>
        <trans-unit id="7dbf0b1ee668c5327c5601883ca0d2f8229365d5" translate="yes" xml:space="preserve">
          <source>Which has two drawbacks -</source>
          <target state="translated">두 가지 단점이 있습니다-</target>
        </trans-unit>
        <trans-unit id="31bc2e26b996657f230dedf9a07bd32f1e303695" translate="yes" xml:space="preserve">
          <source>You can also install &lt;strong&gt;visual tool&lt;/strong&gt; for this, e.g. &lt;code&gt;meld&lt;/code&gt; and run</source>
          <target state="translated">이를 위해 &lt;strong&gt;시각적 도구&lt;/strong&gt; 를 설치할 수도 있습니다 (예 : &lt;code&gt;meld&lt;/code&gt; and run)</target>
        </trans-unit>
        <trans-unit id="790b31a63efa02e224509906d42d1e68c01a62b4" translate="yes" xml:space="preserve">
          <source>You can also read about merge conflict markers and how to resolve them in the &lt;a href=&quot;http://git-scm.com/book&quot;&gt;Pro Git&lt;/a&gt; book section &lt;a href=&quot;http://git-scm.com/book/ch3-2.html#Basic-Merge-Conflicts&quot;&gt;Basic Merge Conflicts&lt;/a&gt;.</source>
          <target state="translated">또한 &lt;a href=&quot;http://git-scm.com/book&quot;&gt;Pro Git&lt;/a&gt; 서적 섹션의 &lt;a href=&quot;http://git-scm.com/book/ch3-2.html#Basic-Merge-Conflicts&quot;&gt;기본 병합 충돌&lt;/a&gt; 에서 병합 충돌 마커 및이를 해결하는 방법에 대해 읽을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9f31297c5e422ba4e0ac2754f95ec698d7a04e9c" translate="yes" xml:space="preserve">
          <source>You can follow this link to check ho to fix the conflict in the file</source>
          <target state="translated">이 링크를 따라 파일에서 충돌을 해결하기 위해 ho를 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8b03c300fb2dfcf5e23681981aa19ff96cc9a605" translate="yes" xml:space="preserve">
          <source>You can navigate among these views using</source>
          <target state="translated">다음을 사용하여 이러한보기를 탐색 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b523d391ec33d09697ad69e6d5a6118d93f4340e" translate="yes" xml:space="preserve">
          <source>You can try &lt;a href=&quot;https://github.com/eamodio/vscode-gitlens&quot;&gt;Gitlense&lt;/a&gt; for VS Code, They key features are:</source>
          <target state="translated">&lt;a href=&quot;https://github.com/eamodio/vscode-gitlens&quot;&gt;Gitlense&lt;/a&gt; for VS Code를 사용해 볼 수 있습니다. 주요 기능은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="77487b0c89edd8fd842e99d65a1b39d2c6b378f5" translate="yes" xml:space="preserve">
          <source>You can work through the conflict with a number of tools:</source>
          <target state="translated">여러 도구와의 충돌을 통해 작업 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b30d311ef730d06366142f68b918eb7de6eff6a8" translate="yes" xml:space="preserve">
          <source>You could fix merge conflicts in a number of ways as other have detailed.</source>
          <target state="translated">다른 방법과 같이 여러 가지 방법으로 병합 충돌을 해결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9c2ffbd6fc110a458093bbd52a05163f36ae3277" translate="yes" xml:space="preserve">
          <source>You may also find this helpful:</source>
          <target state="translated">도움이 될 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="286fb5e21b99f880f05109475c17463fa0b3267f" translate="yes" xml:space="preserve">
          <source>You need to install a merge tool which is compatible with Git to resolve the conflicts. I personally use KDiff3, and I've found it nice and handy. You can download its Windows version here:</source>
          <target state="translated">충돌을 해결하려면 Git과 호환되는 병합 도구를 설치해야합니다. 나는 개인적으로 KDiff3를 사용하고 있으며 멋지고 편리하다는 것을 알았습니다. Windows 버전은 여기에서 다운로드 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="434d4f50f345ed0c2068ebd627e18730e17b1cea" translate="yes" xml:space="preserve">
          <source>You're going to pull some changes, but oops, you're not up to date:</source>
          <target state="translated">몇 가지 변경 사항을 가져와야하지만 죄송합니다.</target>
        </trans-unit>
        <trans-unit id="702de8ea769f6905593d16855500a2a2250467e0" translate="yes" xml:space="preserve">
          <source>[Update - as time has passed I've switched more to:</source>
          <target state="translated">[업데이트-시간이 지남에 따라 더 전환했습니다 :</target>
        </trans-unit>
        <trans-unit id="f262650e9e1db8dba57ae4f90e12681210514be8" translate="yes" xml:space="preserve">
          <source>a) All new/changed files get added and that might include some unwanted changes.</source>
          <target state="translated">a) 모든 새로운 / 변경된 파일이 추가되며 원치 않는 변경이 포함될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d8f51ea63fa8dabc79021e3ac41153644af4867d" translate="yes" xml:space="preserve">
          <source>and after finishing a file, you will have to save and close, so the next one will open.</source>
          <target state="translated">파일을 완성한 후에는 저장하고 닫아야하므로 다음 파일이 열립니다.</target>
        </trans-unit>
        <trans-unit id="d11a6901ad3dd341ac6dec5ff43994226ec32610" translate="yes" xml:space="preserve">
          <source>and in the other</source>
          <target state="translated">그리고 다른</target>
        </trans-unit>
        <trans-unit id="8af7458f49d10ad26c59eed720fbe89d311a8e8a" translate="yes" xml:space="preserve">
          <source>b) You don't get to review the file list first.</source>
          <target state="translated">b) 먼저 파일 목록을 검토 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="761e2de83a662b85af44b187e5329eda0d6cc296" translate="yes" xml:space="preserve">
          <source>because pull implies a merge and if you have changes locally that you didn't want merged you can easily end up with merged code and/or merge conflicts for code that shouldn't have been merged.</source>
          <target state="translated">pull은 병합을 의미하기 때문에 로컬에서 병합하지 않으려는 변경 사항이있는 경우 병합하지 않아야하는 코드에 대해 병합 된 코드 및 / 또는 병합 충돌로 쉽게 끝날 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1d9e48cd581ca4bff14e812e60b255593b08a1f2" translate="yes" xml:space="preserve">
          <source>ctrl</source>
          <target state="translated">ctrl</target>
        </trans-unit>
        <trans-unit id="951f120ff31d9ffa4990456740576c71f454fd6f" translate="yes" xml:space="preserve">
          <source>followed by</source>
          <target state="translated">뒤에</target>
        </trans-unit>
        <trans-unit id="84d20a21b4d0ddce218ad7c73b3cd55f875524fe" translate="yes" xml:space="preserve">
          <source>git add</source>
          <target state="translated">자식 추가</target>
        </trans-unit>
        <trans-unit id="10103c8447d37408c54fd2f05b61beb2106dbe2c" translate="yes" xml:space="preserve">
          <source>git add . AND git commit AND git push (on your local branch after your changes)</source>
          <target state="translated">git add. AND git commit 및 git push (변경 후 로컬 지점에서)</target>
        </trans-unit>
        <trans-unit id="97a35b07063385f6e4f744ee2072932e6c998999" translate="yes" xml:space="preserve">
          <source>git branch, fork, fetch, merge, rebase and clone, what are the differences?</source>
          <target state="translated">자식 분기, 포크, 가져 오기, 병합, 리베이스 및 복제, 차이점은 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="acdbee7f26e843e5752461c1e69b28c077726557" translate="yes" xml:space="preserve">
          <source>git checkout -b mybranch (Checkout a new a branch and start working on that branch so that your master always remains top of trunk.)</source>
          <target state="translated">git checkout -b mybranch (새 브랜치를 체크 아웃하고 그 브랜치에서 작업하기 시작하면 마스터는 항상 트렁크의 맨 위에 유지됩니다.)</target>
        </trans-unit>
        <trans-unit id="8dacaca6254212f6c1b95c243fac496f957d68fd" translate="yes" xml:space="preserve">
          <source>git checkout &lt;strong&gt;your branch&lt;/strong&gt;</source>
          <target state="translated">자식 체크 아웃 &lt;strong&gt;지점&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2664b948d9b5e7add8ed204bae0397137605164e" translate="yes" xml:space="preserve">
          <source>git checkout master (Come back to your master.)</source>
          <target state="translated">git checkout master (마스터에게 돌아 오십시오.)</target>
        </trans-unit>
        <trans-unit id="389878c8eec9e6eeeaf853870f869d492ebf1da1" translate="yes" xml:space="preserve">
          <source>git checkout master (Come to the master branch)</source>
          <target state="translated">자식 체크 아웃 마스터 (마스터 지점에 오십시오)</target>
        </trans-unit>
        <trans-unit id="c1431e6a9b5c4d41e1866a32209e9ec5716cab6c" translate="yes" xml:space="preserve">
          <source>git checkout target_branch</source>
          <target state="translated">git checkout target_branch</target>
        </trans-unit>
        <trans-unit id="811a2036a9fa0acad088e97ae90bc7238103c1c2" translate="yes" xml:space="preserve">
          <source>git commit --amend</source>
          <target state="translated">git commit --amend</target>
        </trans-unit>
        <trans-unit id="7652ed4e9782162856d4648e8895b3387d9f68e6" translate="yes" xml:space="preserve">
          <source>git fetch</source>
          <target state="translated">자식 가져 오기</target>
        </trans-unit>
        <trans-unit id="18213e1f2a603f93f7ce5af7c44200e84b562957" translate="yes" xml:space="preserve">
          <source>git merge source_branch</source>
          <target state="translated">자식 병합 source_branch</target>
        </trans-unit>
        <trans-unit id="503fbe5dbd88ba93126e84d902ed6c73cb283de3" translate="yes" xml:space="preserve">
          <source>git pull (Update your master to get the latest code)</source>
          <target state="translated">git pull (최신 코드를 얻으려면 마스터를 업데이트하십시오)</target>
        </trans-unit>
        <trans-unit id="6c664ccf46e6763b8b96abeb86d1c050dc32ed1b" translate="yes" xml:space="preserve">
          <source>git push origin HEAD:refs/drafts/master  (push like a drafts)</source>
          <target state="translated">git push origin HEAD : refs / drafts / master (초안처럼 밀어 넣기)</target>
        </trans-unit>
        <trans-unit id="b5ac89e12759c8756542b31c467362aa3d963acf" translate="yes" xml:space="preserve">
          <source>git rebase --continue</source>
          <target state="translated">git rebase-계속</target>
        </trans-unit>
        <trans-unit id="094cbd5065890d847d3c0dc1805f140ff1396ad9" translate="yes" xml:space="preserve">
          <source>git rebase master</source>
          <target state="translated">자식 리베이스 마스터</target>
        </trans-unit>
        <trans-unit id="5c2dd944dde9e08881bef0894fe7b22a5c9c4b06" translate="yes" xml:space="preserve">
          <source>j</source>
          <target state="translated">j</target>
        </trans-unit>
        <trans-unit id="cd6fdcbf5a860d174ac10af745972501941dc684" translate="yes" xml:space="preserve">
          <source>macOS</source>
          <target state="translated">macOS</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">or</target>
        </trans-unit>
        <trans-unit id="431e26c1c98728d02fcb3684df3869849e02bd8a" translate="yes" xml:space="preserve">
          <source>shows all files which require conflict resolution.</source>
          <target state="translated">충돌 해결이 필요한 모든 파일을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="d365548fc7381a5f7a04540a4a2854c3130d9c18" translate="yes" xml:space="preserve">
          <source>to accept change from left or right</source>
          <target state="translated">왼쪽에서 오른쪽으로 변경을 수락</target>
        </trans-unit>
        <trans-unit id="834cd3a249a98dcc416499afdc5d38f6bee07ab1" translate="yes" xml:space="preserve">
          <source>to finish the merge.</source>
          <target state="translated">병합을 완료합니다.</target>
        </trans-unit>
        <trans-unit id="c3b50f2456638fa4af5346e46e1aa31547e3b122" translate="yes" xml:space="preserve">
          <source>to jump to previous/next changes.</source>
          <target state="translated">이전 / 다음 변경으로 이동합니다.</target>
        </trans-unit>
        <trans-unit id="9fdbaee88f3bdf6029a899cfe02d702e1ba2d855" translate="yes" xml:space="preserve">
          <source>to resolve changes in favor of the &lt;strong&gt;other or the main repository&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;다른 저장소 나 주요 저장소&lt;/strong&gt; 를 위해 변경 사항을 해결 &lt;strong&gt;합니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="744a6e5be1804b7157ee48c402c528b472bce458" translate="yes" xml:space="preserve">
          <source>to resolve changes in the favor of &lt;strong&gt;your repository&lt;/strong&gt;, or</source>
          <target state="translated">&lt;strong&gt;저장소에&lt;/strong&gt; 유리하게 변경 사항을 해결하거나</target>
        </trans-unit>
        <trans-unit id="aff024fe4ab0fece4091de044c58c9ae4233383a" translate="yes" xml:space="preserve">
          <source>w</source>
          <target state="translated">w</target>
        </trans-unit>
        <trans-unit id="aa4da17c46bbc043e6803b9d9522d18404b1395f" translate="yes" xml:space="preserve">
          <source>where HEAD is changes on your local branch and origin/ is changes from the remote branch. Here keep the stuff that you need and remove the stuff you don't need.After that the normal steps should do. That is</source>
          <target state="translated">여기서 HEAD는 로컬 브랜치에서 변경되고 origin /은 원격 브랜치에서 변경됩니다. 여기에 필요한 물건을 보관하고 필요없는 물건을 제거하십시오. 그 후 정상적인 단계를 수행하십시오. 그건</target>
        </trans-unit>
        <trans-unit id="bdc9da0d0104e6a64e5550c899831ed0af155617" translate="yes" xml:space="preserve">
          <source>⌘</source>
          <target state="translated">⌘</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
