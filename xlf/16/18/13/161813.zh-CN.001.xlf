<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/161813">
    <body>
      <group id="161813">
        <trans-unit id="5984419b5778f9a4c4f7bbb85c74b9adb45ae5f3" translate="yes" xml:space="preserve">
          <source>(Remember to replace the path with the actual path of Kdiff exe file.)</source>
          <target state="translated">(记得将路径替换为Kdiff执行文件的实际路径)</target>
        </trans-unit>
        <trans-unit id="b3390a19d5b0b5180fb4449d7387b045df408917" translate="yes" xml:space="preserve">
          <source>. You can directly reach MERGED view using</source>
          <target state="translated">.您可以直接通过以下方式到达MERGED视图</target>
        </trans-unit>
        <trans-unit id="996050e0bcf31b18b5ad6eec3902db1dfd23c7d0" translate="yes" xml:space="preserve">
          <source>2. Current Line Blame.</source>
          <target state="translated">2.现行责怪。</target>
        </trans-unit>
        <trans-unit id="0dd3171390dbf54eaabed9e7d572666d50b603d6" translate="yes" xml:space="preserve">
          <source>3. Easily Resolve Conflicts.</source>
          <target state="translated">3.轻松化解矛盾。</target>
        </trans-unit>
        <trans-unit id="175b85fd9594552b6934b9ae3d20eb4a7e48d2e5" translate="yes" xml:space="preserve">
          <source>3. Gutter Blame</source>
          <target state="translated">第3个沟渠的责备</target>
        </trans-unit>
        <trans-unit id="b293034cf0e4f2b9bc829b319d6f42c4bc355f18" translate="yes" xml:space="preserve">
          <source>4. Status Bar Blame</source>
          <target state="translated">4.状态栏的责备</target>
        </trans-unit>
        <trans-unit id="a9dfc97bcc8b604231d8feb585f8d1717d975502" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/blog/2293-resolve-simple-merge-conflicts-on-github&quot;&gt;This blog post&lt;/a&gt; explains in detail, but the basics are that upon 'merging' two branches via the UI, you will now see a 'resolve conflicts' option that will take you to an editor allowing you to deal with these merge conflicts.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/blog/2293-resolve-simple-merge-conflicts-on-github&quot;&gt;这篇博客文章&lt;/a&gt;详细解释了，但基本原理是，通过UI&amp;ldquo;合并&amp;rdquo;两个分支后，您现在将看到&amp;ldquo;解决冲突&amp;rdquo;选项，该选项将带您到允许您处理这些合并冲突的编辑器。</target>
        </trans-unit>
        <trans-unit id="018f2256b1785efde626620cc8bd84ab64840292" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;:diffget //2&lt;/code&gt;, get changes from original (&lt;em&gt;HEAD&lt;/em&gt;) branch:</source>
          <target state="translated">&lt;code&gt;:diffget //2&lt;/code&gt; ，从原始（ &lt;em&gt;HEAD&lt;/em&gt; ）分支获取更改：</target>
        </trans-unit>
        <trans-unit id="4a315742a5934e8708bdc2484f385a7d3c687891" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;:diffget //3&lt;/code&gt;, get changes from merging branch:</source>
          <target state="translated">&lt;code&gt;:diffget //3&lt;/code&gt; ，从合并分支获取更改：</target>
        </trans-unit>
        <trans-unit id="e80a5e0becdd40012fa121d96beff436eb5e3b4c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;:wqa&lt;/code&gt; save and exit from vi</source>
          <target state="translated">&lt;code&gt;:wqa&lt;/code&gt; 保存并退出vi</target>
        </trans-unit>
        <trans-unit id="7951c4074799958813e65ba7cb4fb5f1e4effb0a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;current change&lt;/code&gt;(meaning original one before merging)'?.</source>
          <target state="translated">&lt;code&gt;current change&lt;/code&gt; （表示合并前的原始更改 ）'？。</target>
        </trans-unit>
        <trans-unit id="cddd78bcafbe734e87c29feb3bdf74f542ee186d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git clean&lt;/code&gt; Remove extra files (e.g. *.orig) created by diff tool.</source>
          <target state="translated">&lt;code&gt;git clean&lt;/code&gt; 删除由diff工具创建的多余文件（例如* .orig）。</target>
        </trans-unit>
        <trans-unit id="b05ba11bf3186d99f40a15ddad3b2f2a030823cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git&lt;/code&gt; CLI</source>
          <target state="translated">&lt;code&gt;git&lt;/code&gt; CLI</target>
        </trans-unit>
        <trans-unit id="8b77648ec75a644255f4be7f9dd3cb5598cd48b1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;git pull --rebase&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;git pull --rebase&lt;/code&gt; &lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5f09a2e8f5d2d646276a9fed6e51d451e73790e8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fully accept my or theirs version&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;完全接受我或他们的版本&lt;/strong&gt; ：</target>
        </trans-unit>
        <trans-unit id="267c669633d51c6d9d96098cd1ca2edf3517fbfc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Review all changes and accept them individually&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;查看所有更改并单独接受&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ed861af4419c3cf99a6bd58ce8d7f88ee4689f87" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 1&lt;/strong&gt;: Go to the branch</source>
          <target state="translated">&lt;strong&gt;步骤1&lt;/strong&gt; ：前往分行</target>
        </trans-unit>
        <trans-unit id="1394a7eae7d30cfc247b029e7951dd56ca53c501" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 1&lt;/strong&gt;: Run following commands in your terminal</source>
          <target state="translated">&lt;strong&gt;第1步&lt;/strong&gt; ：在终端中运行以下命令</target>
        </trans-unit>
        <trans-unit id="08609d4bd19a06850313be45322700c83c9024c0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 2&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;第二步&lt;/strong&gt; ：</target>
        </trans-unit>
        <trans-unit id="4364353baa0d76480a726b3cb0e63e3af4e07ec5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 2&lt;/strong&gt;: Run following command in terminal</source>
          <target state="translated">&lt;strong&gt;第2步&lt;/strong&gt; ：在终端中运行以下命令</target>
        </trans-unit>
        <trans-unit id="bffa2453a0caf54f7f41e4901b00658c41850505" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 3&lt;/strong&gt;: If there are some conflicts, go to these files to modify it.</source>
          <target state="translated">&lt;strong&gt;步骤3&lt;/strong&gt; ：如果有冲突，请转到这些文件进行修改。</target>
        </trans-unit>
        <trans-unit id="d1ac3f3562d27d0da9d0f9b4b271ae6324475f03" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 3&lt;/strong&gt;: You will see a vimdiff display in following format</source>
          <target state="translated">&lt;strong&gt;步骤3&lt;/strong&gt; ：您将看到以下格式的vimdiff显示</target>
        </trans-unit>
        <trans-unit id="08dbaa67c856b82d176404d2167fd871d3061c01" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 4&lt;/strong&gt;. You could edit the MERGED view the following way</source>
          <target state="translated">&lt;strong&gt;第四步&lt;/strong&gt; 。 您可以通过以下方式编辑MERGED视图</target>
        </trans-unit>
        <trans-unit id="1f2f10e210d256aacda5ae7ee805f719ed3379f8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 4&lt;/strong&gt;: Add these changes</source>
          <target state="translated">&lt;strong&gt;步骤4&lt;/strong&gt; ：添加这些更改</target>
        </trans-unit>
        <trans-unit id="918cb69b300466e33c7c768d2aee0e95d478cf58" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 5&lt;/strong&gt;. Save, Exit, Commit and Clean up</source>
          <target state="translated">&lt;strong&gt;步骤5&lt;/strong&gt; 。 保存，退出，提交和清理</target>
        </trans-unit>
        <trans-unit id="bcfc8490c541aaec58a661d05b3701aaad06f759" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 5&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;步骤5&lt;/strong&gt; ：</target>
        </trans-unit>
        <trans-unit id="7532866bda99e4ba384b10fa2b5e75ec6644f55e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 6&lt;/strong&gt;: If there is still conflict, go back to step 3 again. If there is no conflict, do following:</source>
          <target state="translated">&lt;strong&gt;步骤6&lt;/strong&gt; ：如果仍然存在冲突，请再次返回步骤3。 如果没有冲突，请执行以下操作：</target>
        </trans-unit>
        <trans-unit id="74361e5409372dd18c19e09534a67f4a53a3d21d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 7&lt;/strong&gt;: And then there is no conflict between test and master. You can use merge directly.</source>
          <target state="translated">&lt;strong&gt;步骤7&lt;/strong&gt; ：然后，测试和主机之间就不会发生冲突。 您可以直接使用合并。</target>
        </trans-unit>
        <trans-unit id="880ae413917c7925af5b1274ea0eec0d3965879e" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;However you've to be careful, as remote changes that conflicts were done for some reason.&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;但是，您必须要小心，因为出于某种原因完成了冲突的远程更改。&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="842ae3472f12c24803c1bb2ee89ee22d6c383c46" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;Image source: &lt;a href=&quot;https://sourcegear.com/diffmerge/&quot;&gt;DiffMerge&lt;/a&gt; (Linux screenshot)&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;图像来源： &lt;a href=&quot;https://sourcegear.com/diffmerge/&quot;&gt;DiffMerge&lt;/a&gt; （Linux屏幕截图）&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="8eee615565678d9c8bc0a9f2f921d251a1a3cbdc" translate="yes" xml:space="preserve">
          <source>A safer way to resolve conflicts is to use &lt;a href=&quot;https://github.com/Peaker/git-mediate&quot;&gt;git-mediate&lt;/a&gt; (the common solutions suggested here are quite error prone imho).</source>
          <target state="translated">解决冲突的一种更安全的方法是使用&lt;a href=&quot;https://github.com/Peaker/git-mediate&quot;&gt;git-mediate&lt;/a&gt; （此处建议的常见解决方案是容易出错的恕我直言）。</target>
        </trans-unit>
        <trans-unit id="beb67c154281a51eab633a88fcdbbd4656d59cd3" translate="yes" xml:space="preserve">
          <source>A_MBPro:test anu$ git merge origin/ Auto-merging
  src/test/java/com/.../TestClass.java CONFLICT
  (content): Merge conflict in
  src/test/java/com/.../TestClass.java</source>
          <target state="translated">A_MBPro:test anu$ git merge origin 自动合并srctestjavacom...TestClass.java中的冲突(内容)。合并srctestjavacom...TestClass.java中的冲突。</target>
        </trans-unit>
        <trans-unit id="a7b183a6f77c99b78584e9f4f9c6586693f1a738" translate="yes" xml:space="preserve">
          <source>Accept my version (local, ours):</source>
          <target state="translated">接受我的版本(本地,熊)。</target>
        </trans-unit>
        <trans-unit id="5bc00cfaa92376af7b8a3890a3b1000ebf89813e" translate="yes" xml:space="preserve">
          <source>Accept their version (remote, theirs):</source>
          <target state="translated">接受他们的版本(远程,他们的)。</target>
        </trans-unit>
        <trans-unit id="de248d3c434336170b313b4a606fae76271119ac" translate="yes" xml:space="preserve">
          <source>After seeing a conflict, you can do two things:</source>
          <target state="translated">看到冲突后,可以做两件事。</target>
        </trans-unit>
        <trans-unit id="88c796f3f9c1bd62bd2303bc6fd590d651d18149" translate="yes" xml:space="preserve">
          <source>Also (and more relevant to your situation), I try to avoid:</source>
          <target state="translated">另外(和你的情况比较相关),我尽量避免。</target>
        </trans-unit>
        <trans-unit id="64d1d3763e3678125c90fb233fae5e747be5afc3" translate="yes" xml:space="preserve">
          <source>Also, the &lt;a href=&quot;https://www.kernel.org/pub/software/scm/git/docs/git-merge.html#_how_to_resolve_conflicts&quot;&gt;How to Resolve Conflicts&lt;/a&gt; section explains how to resolve the conflicts:</source>
          <target state="translated">此外，&amp;ldquo; &lt;a href=&quot;https://www.kernel.org/pub/software/scm/git/docs/git-merge.html#_how_to_resolve_conflicts&quot;&gt;如何解决冲突&amp;rdquo;&lt;/a&gt;部分介绍了如何解决冲突：</target>
        </trans-unit>
        <trans-unit id="e30eff925100b7c3e119ed678e39009e962455b0" translate="yes" xml:space="preserve">
          <source>Alt</source>
          <target state="translated">Alt</target>
        </trans-unit>
        <trans-unit id="d83728a889e246005c68fb7b4ea004251b567ef9" translate="yes" xml:space="preserve">
          <source>Alternatively you can use &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/opendiff.1.html&quot;&gt;opendiff&lt;/a&gt; (part of Xcode Tools) which lets you merge two files or directories together to create a third file or directory.</source>
          <target state="translated">或者，您可以使用&lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/opendiff.1.html&quot;&gt;opendiff&lt;/a&gt; （Xcode工具的一部分），它可以将两个文件或目录合并在一起以创建第三个文件或目录。</target>
        </trans-unit>
        <trans-unit id="d2b49ab034efe5c43e47bb8c7fa6908660e6c2ee" translate="yes" xml:space="preserve">
          <source>And probably (if not provided) you need the following extra simple wrapper placed in your PATH (e.g. &lt;code&gt;/usr/bin&lt;/code&gt;):</source>
          <target state="translated">并且可能（如果未提供）您需要在PATH中放置以下额外的简单包装器（例如 &lt;code&gt;/usr/bin&lt;/code&gt; ）：</target>
        </trans-unit>
        <trans-unit id="203ef75231b705089e654d36b91e46318dfe1500" translate="yes" xml:space="preserve">
          <source>And then we try a final time</source>
          <target state="translated">然后我们再试最后一次</target>
        </trans-unit>
        <trans-unit id="3e6f3db27cc8c401fedee6e7d282bbfea034770c" translate="yes" xml:space="preserve">
          <source>And there are many features you can check them &lt;a href=&quot;https://github.com/eamodio/vscode-gitlens&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">您可以&lt;a href=&quot;https://github.com/eamodio/vscode-gitlens&quot;&gt;在此处&lt;/a&gt;查看许多功能。</target>
        </trans-unit>
        <trans-unit id="031f3f8f8291e0e1de20b7de05bfa588693494ab" translate="yes" xml:space="preserve">
          <source>As of December 12th 2016, you can merge branches and &lt;strong&gt;resolve conflicts on github.com&lt;/strong&gt;</source>
          <target state="translated">从2016年12月12日开始，您可以合并分支并&lt;strong&gt;解决github.com上的冲突&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8388f57e8cdf32dbfd337f07999e3a94c43253c4" translate="yes" xml:space="preserve">
          <source>As per @JoshGlover comment:</source>
          <target state="translated">根据@JoshGlover的评论。</target>
        </trans-unit>
        <trans-unit id="f474daae6a62b7028ecb784c6fbd046b9c1252cc" translate="yes" xml:space="preserve">
          <source>BASE &amp;ndash; common ancestor, how file looked before both changes</source>
          <target state="translated">BASE &amp;ndash;共同祖先，两次更改之前文件的外观</target>
        </trans-unit>
        <trans-unit id="bfa88da268e9e2de28582188413cdb7c3a37c5c4" translate="yes" xml:space="preserve">
          <source>BTW if you install Git Extensions there is an option in its setup wizard to install Kdiff3.</source>
          <target state="translated">BTW如果你安装了Git Extensions,在它的设置向导里有一个选项可以安装Kdiff3。</target>
        </trans-unit>
        <trans-unit id="d1f71a9a3f6b22f46159ecc1b5cc3fd1ee29d31c" translate="yes" xml:space="preserve">
          <source>Before pushing your newly committed change to remote server, try &lt;code&gt;git pull --rebase&lt;/code&gt; rather &lt;code&gt;git pull&lt;/code&gt; and manual &lt;code&gt;merge&lt;/code&gt; and it will automatically sync latest remote server changes (with a fetch + merge) and will put your local latest commit at the top in git log. No need to worry about manual pull/merge.</source>
          <target state="translated">在将新提交的更改推送到远程服务器之前，请尝试 &lt;code&gt;git pull --rebase&lt;/code&gt; 而不是 &lt;code&gt;git pull&lt;/code&gt; 和手动 &lt;code&gt;merge&lt;/code&gt; ，它将自动同步最新的远程服务器更改（使用fetch + merge），并将本地最新提交置于git的顶部日志。 无需担心手动拉/合并。</target>
        </trans-unit>
        <trans-unit id="5690562f60aa2958acf32cea69a82be068935ee2" translate="yes" xml:space="preserve">
          <source>Below is the sample procedure to use &lt;code&gt;vimdiff&lt;/code&gt; for resolve merge conflicts. Based on &lt;a href=&quot;http://www.rosipov.com/blog/use-vimdiff-as-git-mergetool/#fromHistor&quot;&gt;this link&lt;/a&gt;</source>
          <target state="translated">以下是使用 &lt;code&gt;vimdiff&lt;/code&gt; 解决合并冲突的示例过程。 基于&lt;a href=&quot;http://www.rosipov.com/blog/use-vimdiff-as-git-mergetool/#fromHistor&quot;&gt;此链接&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5763578555f814c96231de97e5710d397db26670" translate="yes" xml:space="preserve">
          <source>Bonus:</source>
          <target state="translated">Bonus:</target>
        </trans-unit>
        <trans-unit id="e2b00999c812c0f8501ad55c392f1fbc4b4fc3ca" translate="yes" xml:space="preserve">
          <source>Change it to the way you want it, then commit with commands</source>
          <target state="translated">把它改成你想要的样子,然后用命令提交</target>
        </trans-unit>
        <trans-unit id="a16928497c72104aa81a7d81e344898c5e5a9d2c" translate="yes" xml:space="preserve">
          <source>Check out the answers in Stack Overflow question &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/101752/aborting-a-merge-in-git&quot;&gt;Aborting a merge in Git&lt;/a&gt;&lt;/em&gt;, especially &lt;a href=&quot;https://stackoverflow.com/questions/101752/aborting-a-merge-in-git#107860&quot;&gt;Charles Bailey's answer&lt;/a&gt; which shows how to view the different versions of the file with problems, for example,</source>
          <target state="translated">请查看Stack Overflow问题中的答案， &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/101752/aborting-a-merge-in-git&quot;&gt;中止Git中的合并&lt;/a&gt;&lt;/em&gt; ，特别是&lt;a href=&quot;https://stackoverflow.com/questions/101752/aborting-a-merge-in-git#107860&quot;&gt;Charles Bailey的答案&lt;/a&gt; ，该答案显示了如何查看有问题的文件的不同版本，例如，</target>
        </trans-unit>
        <trans-unit id="148d7ea3194dfb3824271bc5bf58dc3bda5baee5" translate="yes" xml:space="preserve">
          <source>Check the Git status:
&lt;strong&gt;&lt;em&gt;git status&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">检查Git状态： &lt;strong&gt;&lt;em&gt;git status&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6b4260a19776ffbf9dfe81497f156c7830b80d1f" translate="yes" xml:space="preserve">
          <source>Check the files, in which you would find the conflicts marked like</source>
          <target state="translated">检查文件,在这些文件中,你会发现标有如下冲突的文件</target>
        </trans-unit>
        <trans-unit id="aa6390380b1645608f5ff58880c2c59a7c7468a6" translate="yes" xml:space="preserve">
          <source>Check the status again:
 &lt;strong&gt;&lt;em&gt;git status&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">再次检查状态： &lt;strong&gt;&lt;em&gt;git status&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b69003626d6cb4346f37832218c2fac266a2dcd9" translate="yes" xml:space="preserve">
          <source>Checkout a local branch (temp1 in my example here):
&lt;strong&gt;&lt;em&gt;git checkout -b temp1&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">签出本地分支（在我的示例中为temp1）： &lt;strong&gt;&lt;em&gt;git checkout -b temp1&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b0362ddbc2b43b66fa4e6cca7d6f8961ded7dee2" translate="yes" xml:space="preserve">
          <source>Choose one of the alternatives or a combination of both in a way that you want new code to be, while removing equal signs and angle brackets.</source>
          <target state="translated">选择一个备选方案或两者的组合,以你希望新代码的方式,同时删除等号和角括号。</target>
        </trans-unit>
        <trans-unit id="f65afcc3c7fda48e7af81a4b11b34d1f34f30d83" translate="yes" xml:space="preserve">
          <source>Click the conflicting file and you will have the option to Merge, Compare, Take Source, Take Target.  The merge tool in VS is very easy to use.</source>
          <target state="translated">点击冲突的文件,就可以选择合并、比较、取源、取目标。VS中的合并工具非常好用。</target>
        </trans-unit>
        <trans-unit id="ec2dece8f71f03d22fdc5a37975a1dbbea9b6ee2" translate="yes" xml:space="preserve">
          <source>Close your project in VS. Especially in big projects VS tends to freak out when merging using the UI.</source>
          <target state="translated">在VS中关闭你的项目。特别是在大项目中,VS在使用UI进行合并时,往往会发飙。</target>
        </trans-unit>
        <trans-unit id="fb0b442c1c1c3d03199691d9d6fc5d9cec8d1471" translate="yes" xml:space="preserve">
          <source>Commit the changes to the same commit id (this avoids a new separate patch set):
&lt;strong&gt;&lt;em&gt;git commit --amend&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">将更改提交到相同的提交ID（避免使用新的单独补丁集）： &lt;strong&gt;&lt;em&gt;git commit --amend&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5831691140428fa04453f5bba220df00be0565ab" translate="yes" xml:space="preserve">
          <source>Comparison with the common ancestor</source>
          <target state="translated">与共同祖先的比较</target>
        </trans-unit>
        <trans-unit id="c771b1de682f5642315c2602673d7fb1b2fcd43e" translate="yes" xml:space="preserve">
          <source>CoolAJ86's answer sums up pretty much everything. In case you have changes in both branches in the same piece of code you will have to do a manual merge. Open the file in conflict in any text editor and you should see following structure.</source>
          <target state="translated">CoolAJ86的回答几乎总结了所有的问题。如果你在同一段代码中的两个分支都有变化,你必须手动合并。在任何文本编辑器中打开冲突文件,你应该会看到以下结构。</target>
        </trans-unit>
        <trans-unit id="25623d3d6597110b3dc53adcb06a990460c0bdc2" translate="yes" xml:space="preserve">
          <source>Decide not to merge. The only clean-ups you need are to reset the index file to the &lt;code&gt;HEAD&lt;/code&gt; commit to reverse 2. and to clean up working tree changes made by 2. and 3.; &lt;code&gt;git merge --abort&lt;/code&gt; can be used for this.</source>
          <target state="translated">决定不合并。 您需要执行的唯一清除操作是将索引文件重置为 &lt;code&gt;HEAD&lt;/code&gt; commit以反转2。并清除2和3所做的工作树更改。 &lt;code&gt;git merge --abort&lt;/code&gt; 可用于此目的。</target>
        </trans-unit>
        <trans-unit id="22e56642085575f2908ddb864308068f7e968cad" translate="yes" xml:space="preserve">
          <source>Default &lt;code&gt;mergetool&lt;/code&gt; works in &lt;strong&gt;command line&lt;/strong&gt;. How to use a command line mergetool should be a separate question.</source>
          <target state="translated">默认 &lt;code&gt;mergetool&lt;/code&gt; 在&lt;strong&gt;命令行中工作&lt;/strong&gt; 。 如何使用命令行合并工具应该是一个单独的问题。</target>
        </trans-unit>
        <trans-unit id="62142d242914ddff0d898b153644b0eafdec9b6b" translate="yes" xml:space="preserve">
          <source>Delete the unwanted files locally created by mergetool, usually mergetool creates extra file with *.orig extension. Please delete that file as that is just the duplicate and fix changes locally and add the correct version of your files.
&lt;strong&gt;&lt;em&gt;git add #your_changed_correct_files&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">删除由mergetool本地创建的不需要的文件，通常mergetool会创建带有* .orig扩展名的多余文件。 请删除该文件，因为它只是重复的文件，并在本地修复更改，然后添加文件的正确版本。 &lt;strong&gt;&lt;em&gt;git添加#your_changed_correct_files&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cf55c22c3384a1a5442c9356b103938aff517cff" translate="yes" xml:space="preserve">
          <source>DiffMerge</source>
          <target state="translated">DiffMerge</target>
        </trans-unit>
        <trans-unit id="974874822de58470f022f79813163910737446e5" translate="yes" xml:space="preserve">
          <source>Do the merge in command prompt.</source>
          <target state="translated">在命令提示符中进行合并。</target>
        </trans-unit>
        <trans-unit id="8f3dad5896c6d2f85c69a69d9b5dcfaeb1b52705" translate="yes" xml:space="preserve">
          <source>Does not seem to always work for me and usually ends up displaying every commit that was different between the two branches, this happens even when using &lt;code&gt;--&lt;/code&gt; to separate the path from the command.</source>
          <target state="translated">似乎并不总是对我有用，通常最终会显示两个分支之间不同的每个提交，即使使用 &lt;code&gt;--&lt;/code&gt; 将路径与命令分开也是如此。</target>
        </trans-unit>
        <trans-unit id="bf93e5ce8bc1228c2585b3f5a368053c9fe8346a" translate="yes" xml:space="preserve">
          <source>Down</source>
          <target state="translated">Down</target>
        </trans-unit>
        <trans-unit id="5f743014bcdaf6c6b456b0a51baf9dbd2767737b" translate="yes" xml:space="preserve">
          <source>Each time you edit a file to resolve a conflict, &lt;code&gt;git add filename&lt;/code&gt; will update the index and your diff will no longer show it. When all the conflicts are handled and their files have been &lt;code&gt;git add&lt;/code&gt;-ed, &lt;code&gt;git commit&lt;/code&gt; will complete your merge.</source>
          <target state="translated">每次您编辑文件以解决冲突时， &lt;code&gt;git add filename&lt;/code&gt; 将更新索引，并且您的差异将不再显示它。 当所有冲突都已解决并且其文件已被 &lt;code&gt;git add&lt;/code&gt; -ed时， &lt;code&gt;git commit&lt;/code&gt; 将完成您的合并。</target>
        </trans-unit>
        <trans-unit id="941cfe8b1f11cde20411fa8dc823e6451b6066fa" translate="yes" xml:space="preserve">
          <source>Edit the conflicted files manually and look for the code block between &lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/code&gt;/&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; then choose the version either from above or below &lt;code&gt;=====&lt;/code&gt;. See: &lt;a href=&quot;http://git-scm.com/docs/git-merge#_how_conflicts_are_presented&quot;&gt;How conflicts are presented&lt;/a&gt;.</source>
          <target state="translated">手动编辑有冲突的文件，并查找 &lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/code&gt; / &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; 之间的代码块，然后从上方或下方选择版本 &lt;code&gt;=====&lt;/code&gt; 。 请参阅： &lt;a href=&quot;http://git-scm.com/docs/git-merge#_how_conflicts_are_presented&quot;&gt;如何提出冲突&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="aacd1ff5034e63964e7c7c658577c21417051af1" translate="yes" xml:space="preserve">
          <source>Finally, review the files ready for commit using: &lt;code&gt;git status&lt;/code&gt;.</source>
          <target state="translated">最后，使用 &lt;code&gt;git status&lt;/code&gt; 查看准备提交的文件。</target>
        </trans-unit>
        <trans-unit id="a094f4d7d41c2764c2f031fe68c19f7697500e17" translate="yes" xml:space="preserve">
          <source>Find details at: &lt;a href=&quot;http://gitolite.com/git-pull--rebase&quot;&gt;http://gitolite.com/git-pull--rebase&lt;/a&gt;</source>
          <target state="translated">有关详细信息，请访问： &lt;a href=&quot;http://gitolite.com/git-pull--rebase&quot;&gt;http&lt;/a&gt; : //gitolite.com/git-pull--rebase</target>
        </trans-unit>
        <trans-unit id="4809b89a126e0c64267d7eedaadd6a71a6de0432" translate="yes" xml:space="preserve">
          <source>Find which files cause conflicts by command</source>
          <target state="translated">通过命令查找导致冲突的文件</target>
        </trans-unit>
        <trans-unit id="444ae617023a2ca15a17f8826dd18fc1b206e9f6" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;http://en.wikipedia.org/wiki/Emacs&quot;&gt;Emacs&lt;/a&gt; users which want to resolve merge conflicts semi-manually:</source>
          <target state="translated">对于想要手动解决合并冲突的&lt;a href=&quot;http://en.wikipedia.org/wiki/Emacs&quot;&gt;Emacs&lt;/a&gt;用户：</target>
        </trans-unit>
        <trans-unit id="b9276f3406ed29b514fe3f13e76db9e122964538" translate="yes" xml:space="preserve">
          <source>For conflicts that involve more than a few lines, it's easier to see what's going on in an external GUI tool. I like opendiff -- Git also supports vimdiff, gvimdiff, kdiff3, tkdiff, meld, xxdiff, emerge out of the box and you can install others: &lt;code&gt;git config merge.tool &quot;your.tool&quot;&lt;/code&gt; will set your chosen tool and then &lt;code&gt;git mergetool&lt;/code&gt; after a failed merge will  show you the diffs in context.</source>
          <target state="translated">对于涉及多行的冲突，更容易查看外部GUI工具中发生的情况。 我喜欢opendiff-Git还支持vimdiff，gvimdiff，kdiff3，tkdiff，meld，xxdiff，可以直接安装，也可以安装其他工具： &lt;code&gt;git config merge.tool &quot;your.tool&quot;&lt;/code&gt; 将设置您选择的工具，然后是 &lt;code&gt;git mergetool&lt;/code&gt; 合并失败后，将显示上下文差异。</target>
        </trans-unit>
        <trans-unit id="a96746ef03f16d34404a31209e137b75cb15ca6e" translate="yes" xml:space="preserve">
          <source>For example, if you know that you and another person are both working on different refactoring that will both affect the same set of files, you should talk to each other ahead of time and get a better sense for what types of changes each of you is making. You might save considerable time and effort if you conduct your planned changes serially rather than in parallel.</source>
          <target state="translated">例如,如果你知道你和另一个人都在进行不同的重构,而这两个人都会影响到同一组文件,那么你应该提前和对方沟通,以便更好地了解你们每个人都在做什么类型的修改。如果你们以串行而不是并行的方式进行计划中的修改,可能会节省大量的时间和精力。</target>
        </trans-unit>
        <trans-unit id="8333e3cfab4df3827ff6836fb6b710b9358f125a" translate="yes" xml:space="preserve">
          <source>For major refactorings that cut across a large swath of code, you should strongly consider working serially: everybody stops working on that area of the code while one person performs the complete refactoring.</source>
          <target state="translated">对于大范围的代码重构,你应该强烈地考虑以串行方式进行:当一个人完成完整的重构时,每个人都停止对该区域的代码进行工作。</target>
        </trans-unit>
        <trans-unit id="4fa9753aa4fd3c850748555a3e9f4a60b89ac341" translate="yes" xml:space="preserve">
          <source>For practical tutorial, check: &lt;a href=&quot;https://www.katacoda.com/courses/git/5&quot;&gt;Scenario 5 - Fixing Merge Conflicts by Katacoda&lt;/a&gt;.</source>
          <target state="translated">有关实际的教程，请检查： &lt;a href=&quot;https://www.katacoda.com/courses/git/5&quot;&gt;场景5-修复Katacoda的合并冲突&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="8e13a07312a1b166bfac8963c011d8cef1459d58" translate="yes" xml:space="preserve">
          <source>For those who are using Visual Studio (2015 in my case)</source>
          <target state="translated">对于那些正在使用Visual Studio(2015年)的人来说</target>
        </trans-unit>
        <trans-unit id="332ea3a31e79d47a90b9a3ccec9c1cdfdbaa5829" translate="yes" xml:space="preserve">
          <source>From the documentation:</source>
          <target state="translated">从文件中可以看出:</target>
        </trans-unit>
        <trans-unit id="7df338298732a7a44cfe3459a9c54089c35b179d" translate="yes" xml:space="preserve">
          <source>Get the patchset:
&lt;strong&gt;&lt;em&gt;git fetch&lt;/em&gt;&lt;/strong&gt; (checkout the right patch from your Git commit)</source>
          <target state="translated">获取补丁集： &lt;strong&gt;&lt;em&gt;git fetch&lt;/em&gt;&lt;/strong&gt; （从Git提交中签出正确的补丁）</target>
        </trans-unit>
        <trans-unit id="69a3ed9b700833291e3fb52128a1c1896ad1a625" translate="yes" xml:space="preserve">
          <source>Gitlense For VS Code</source>
          <target state="translated">Gitlense for VS 代码</target>
        </trans-unit>
        <trans-unit id="cb033caab8c1571bd1cc040deef3f29714bc9898" translate="yes" xml:space="preserve">
          <source>Here are a few tips:</source>
          <target state="translated">这里有几个小技巧。</target>
        </trans-unit>
        <trans-unit id="d6ac82bd2169504c0f1bd7ac53df06a10044601a" translate="yes" xml:space="preserve">
          <source>Here are simple steps what to do when you get into conflicted state:</source>
          <target state="translated">以下是一些简单的步骤,当你陷入矛盾状态时该怎么做。</target>
        </trans-unit>
        <trans-unit id="4015aea13e4cb51abe076db016a9c3d37c5ab85e" translate="yes" xml:space="preserve">
          <source>Here's a probable use-case, from the top:</source>
          <target state="translated">这里有一个可能的用例,从上面看。</target>
        </trans-unit>
        <trans-unit id="53343ebc96836cd5b3243181b65465e0cf2310da" translate="yes" xml:space="preserve">
          <source>Here's what Kdiff3 looks like:</source>
          <target state="translated">下面是Kdiff3的样子。</target>
        </trans-unit>
        <trans-unit id="cb24c6a6c393ebe7ec3779e9477715f34a1e1c8e" translate="yes" xml:space="preserve">
          <source>How do I resolve merge conflicts in Git?</source>
          <target state="translated">如何解决Git中的合并冲突?</target>
        </trans-unit>
        <trans-unit id="d351a3caff947e2b59eb23475d4c1ea1dd8fc47a" translate="yes" xml:space="preserve">
          <source>How to resolve merge conflicts in Git</source>
          <target state="translated">如何解决Git中的合并冲突</target>
        </trans-unit>
        <trans-unit id="821a9fc9b328173923a3a75703b4c5f4fabf1ea0" translate="yes" xml:space="preserve">
          <source>I already like this feature:</source>
          <target state="translated">我已经很喜欢这个功能了。</target>
        </trans-unit>
        <trans-unit id="ebb18fa7969201cbf38ba225dade79fc2ac15133" translate="yes" xml:space="preserve">
          <source>I always follow the below steps to avoid conflicts.</source>
          <target state="translated">我总是按照下面的步骤去做,避免冲突。</target>
        </trans-unit>
        <trans-unit id="5cbeb9173e4a15b8b07727c351b6c3fdec416f12" translate="yes" xml:space="preserve">
          <source>I am using Microsoft's Visual Code for resolving conflicts. Its very simple to use. I keep my project open in the workspace. It detects and highlights conflicts, moreover give GUI options to select whatever change I want to keep from HEAD or incoming.</source>
          <target state="translated">我正在使用微软的Visual Code来解决冲突。它使用起来非常简单。我在工作区中打开我的项目,它可以检测并突出显示冲突。它可以检测和突出显示冲突,而且给GUI选项,让我选择我想从HEAD或传入的任何变化。</target>
        </trans-unit>
        <trans-unit id="d6a10190fb2d0293b50b8df275083b88901d5e6b" translate="yes" xml:space="preserve">
          <source>I either want my or their version in full, or want to review individual changes and decide for each of them.</source>
          <target state="translated">我要么要我的或他们的版本完整的,要么想审查个别的修改,并为每个人决定。</target>
        </trans-unit>
        <trans-unit id="0402c816503737edd063d7527db024b2749d4ccb" translate="yes" xml:space="preserve">
          <source>I find merge tools rarely help me understand the conflict or the resolution. I'm usually more successful looking at the conflict markers in a text editor and using git log as a supplement.</source>
          <target state="translated">我发现合并工具很少能帮助我理解冲突或解决方法。通常情况下,我在文本编辑器中查看冲突标记并使用git log作为补充,会更成功。</target>
        </trans-unit>
        <trans-unit id="1b084f84735683c433246463bf526f719f03fe77" translate="yes" xml:space="preserve">
          <source>I hope that this will help every one concerning this issue.</source>
          <target state="translated">希望对大家有帮助。</target>
        </trans-unit>
        <trans-unit id="d0caea9b3f59d542fa6ac97fea504dcb8e68f4bc" translate="yes" xml:space="preserve">
          <source>I think the real key is knowing how changes flow with local and remote repositories.  The key to this is understanding tracking branches.  I have found that I think of the tracking branch as the 'missing piece in the middle' between me my local, actual files directory and the remote defined as origin.</source>
          <target state="translated">我认为真正的关键是了解本地和远程版本库的变化如何流动。这方面的关键是理解跟踪分支。我发现,我认为跟踪分支是我的本地、实际文件目录和远程定义为原点之间的 &quot;中间缺失的一块&quot;。</target>
        </trans-unit>
        <trans-unit id="f0dcaf5654b405f76244139f625e12b8ecb4399c" translate="yes" xml:space="preserve">
          <source>I'm surprised no one else spoke about resolving conflict using &lt;code&gt;patience&lt;/code&gt; with the merge recursive strategy. For a big merge conflict, using &lt;code&gt;patience&lt;/code&gt; provided good results for me. The idea is that it will try to match blocks rather than individual lines.</source>
          <target state="translated">令我惊讶的是，没有其他人谈论过使用合并递归策略来 &lt;code&gt;patience&lt;/code&gt; 解决冲突。 对于较大的合并冲突，使用 &lt;code&gt;patience&lt;/code&gt; 为我提供了良好的结果。 这个想法是它将尝试匹配块而不是单个行。</target>
        </trans-unit>
        <trans-unit id="c6fa9d4f262c6727eee44346dad7bdce3894c5b9" translate="yes" xml:space="preserve">
          <source>I've personally got into the habit of 2 things to help avoid this.</source>
          <target state="translated">我个人已经养成了2个习惯,可以帮助避免这个问题。</target>
        </trans-unit>
        <trans-unit id="fb58a335235a03f06da06668899ed8f3672ab468" translate="yes" xml:space="preserve">
          <source>I've successfully used &lt;a href=&quot;https://sourcegear.com/diffmerge/&quot;&gt;DiffMerge&lt;/a&gt; which can visually compare and merge files on Windows, macOS and Linux/Unix.</source>
          <target state="translated">我已经成功使用了&lt;a href=&quot;https://sourcegear.com/diffmerge/&quot;&gt;DiffMerge&lt;/a&gt; ，它可以在Windows，macOS和Linux / Unix上直观地比较和合并文件。</target>
        </trans-unit>
        <trans-unit id="b50738c5e6ed82977210183ce1837c1f0b3de951" translate="yes" xml:space="preserve">
          <source>Identify which files are in conflict (Git should tell you this).</source>
          <target state="translated">识别出哪些文件有冲突(Git应该会告诉你)。</target>
        </trans-unit>
        <trans-unit id="c722a2e638436ed8fb95c066ae4ce83c149e74f2" translate="yes" xml:space="preserve">
          <source>If all conflicts were solved successfully, commit the changes by: &lt;code&gt;git commit -a&lt;/code&gt; and push to remote as usual.</source>
          <target state="translated">如果成功解决了所有冲突，请通过以下方式提交更改： &lt;code&gt;git commit -a&lt;/code&gt; ,然后像往常一样推送到remote。</target>
        </trans-unit>
        <trans-unit id="175991024547a83ccaab97a5b5236f8c382363c5" translate="yes" xml:space="preserve">
          <source>If the conflict is longer, then I will cut and paste each of the three sections into three separate files, such as &quot;mine&quot;, &quot;common&quot; and &quot;theirs&quot;.</source>
          <target state="translated">如果冲突时间较长,那我就把这三个部分分别剪贴成 &quot;我的&quot;、&quot;共同的&quot;、&quot;他们的 &quot;等三个文件。</target>
        </trans-unit>
        <trans-unit id="d20842fcd97f861418ee0876bd663fea842315ce" translate="yes" xml:space="preserve">
          <source>If the conflict is only a few lines, this generally makes the conflict very obvious. (Knowing how to fix a conflict is very different; you need to be aware of what other people are working on. If you're confused, it's probably best to just call that person into your room so they can see what you're looking at.)</source>
          <target state="translated">如果冲突只有几句,一般情况下,这就会使冲突非常明显。(知道如何解决冲突是很不一样的,你要知道别人在做什么,你要知道别人在做什么。如果你感到困惑,可能最好的办法是直接把那个人叫到你的房间里,让他们看清楚你在看什么)。</target>
        </trans-unit>
        <trans-unit id="0a3d7fce00a142bd9776e2f018dc7698e902aa15" translate="yes" xml:space="preserve">
          <source>If you are using intelliJ as IDE
Try to merge parent to your branch by</source>
          <target state="translated">如果你使用intelliJ作为IDE,请尝试通过以下方法将父分支合并到你的分支中去</target>
        </trans-unit>
        <trans-unit id="e4c3e0b130c36910f9d97995518a0afbab1aff04" translate="yes" xml:space="preserve">
          <source>If you can't work serially (due to time pressure, maybe), then communicating about expected merge conflicts at least helps you solve the problems sooner while the details are still fresh in mind. For example, if a co-worker is making a disruptive series of commits over the course of a one-week period, you may choose to merge/rebase on that co-workers branch once or twice each day during that week. That way, if you do find merge/rebase conflicts, you can solve them more quickly than if you wait a few weeks to merge everything together in one big lump.</source>
          <target state="translated">如果你不能进行系列化工作(可能是由于时间的压力),那么沟通一下预期的合并冲突,至少可以帮助你在细节问题还没想起来的时候,更早地解决问题。比如说,如果一个同事在一周的时间里做了一系列破坏性的提交,你可以选择在这一周内每天对该同事的分支进行一到两次合并。这样一来,如果你真的发现了合并基础的冲突,你可以更快地解决这些冲突,而不是等几周后再把所有的事情合并成一个大的整体。</target>
        </trans-unit>
        <trans-unit id="8de6d362944cca0dce5c2e38813cddd83e8e685b" translate="yes" xml:space="preserve">
          <source>If you change the indentation of your program for instance, the default Git merge strategy sometimes matches single braces &lt;code&gt;{&lt;/code&gt; which belongs to different functions. This is avoided with &lt;code&gt;patience&lt;/code&gt;:</source>
          <target state="translated">例如，如果您更改程序的缩进，则默认的Git合并策略有时会匹配单个大括号 &lt;code&gt;{&lt;/code&gt; ，它属于不同的功能。 有 &lt;code&gt;patience&lt;/code&gt; 可以避免这种情况：</target>
        </trans-unit>
        <trans-unit id="6276c8e1991c84cf5b8e5c3d836c05c6fee80fc7" translate="yes" xml:space="preserve">
          <source>If you have a merge conflict and want to see what others had in mind when modifying their branch, it's sometimes easier to compare their branch directly with the common ancestor (instead of our branch). For that you can use &lt;code&gt;merge-base&lt;/code&gt;:</source>
          <target state="translated">如果您有合并冲突，并且想了解其他人在修改其分支时的想法，则有时将其分支直接与公共祖先（而不是我们的分支）进行比较会更容易。 为此，您可以使用 &lt;code&gt;merge-base&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="3c883d427128e3ee60335551b4037a18d86bfca4" translate="yes" xml:space="preserve">
          <source>If you have automated tests, run those. If you have a &lt;a href=&quot;https://en.wikipedia.org/wiki/Lint_%28software%29&quot;&gt;lint&lt;/a&gt;, run that. If it's a buildable project, then build it before you commit, etc. In all cases, you need to do a bit of testing to make sure your changes didn't break anything. (Heck, even a merge without conflicts can break working code.)</source>
          <target state="translated">如果您有自动化测试，请运行这些测试。 如果您有&lt;a href=&quot;https://en.wikipedia.org/wiki/Lint_%28software%29&quot;&gt;绒毛&lt;/a&gt; ，请运行它。 如果它是一个可构建的项目，则在提交之前进行构建，等等。在所有情况下，您都需要进行一些测试以确保所做的更改不会破坏任何内容。 （糟糕，即使没有冲突的合并也可能破坏工作代码。）</target>
        </trans-unit>
        <trans-unit id="8f7ad0b58875a2eef77bed1a3b771769ae25e55c" translate="yes" xml:space="preserve">
          <source>If you still have any files under &lt;code&gt;Unmerged paths&lt;/code&gt;, and you did solve the conflict manually, then let Git know that you solved it by: &lt;code&gt;git add path/file&lt;/code&gt;.</source>
          <target state="translated">如果在&amp;ldquo;未 &lt;code&gt;Unmerged paths&lt;/code&gt; 下仍然有任何文件，并且您确实手动解决了冲突，那么请让Git知道已通过以下方式解决了该问题： &lt;code&gt;git add path/file&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="618a9df3236f9b4b00c66e050c030f70e7bfbaf7" translate="yes" xml:space="preserve">
          <source>If you want to do &lt;strong&gt;for all conflict files&lt;/strong&gt; run:</source>
          <target state="translated">如果要&lt;strong&gt;对所有冲突文件&lt;/strong&gt;执行以下操作：</target>
        </trans-unit>
        <trans-unit id="40e2ccced76045c87f99f9598b0f6ca2b170ac5d" translate="yes" xml:space="preserve">
          <source>If you want to get changes from BASE</source>
          <target state="translated">如果你想从BASE中获得变化</target>
        </trans-unit>
        <trans-unit id="9a91acbff11907c7623923e649ccb1161cc13790" translate="yes" xml:space="preserve">
          <source>If you want to get changes from LOCAL</source>
          <target state="translated">如果你想从LOCAL中获得更改</target>
        </trans-unit>
        <trans-unit id="3ff3c58bc799a86cb942b0f9edeea683c119470b" translate="yes" xml:space="preserve">
          <source>If you want to get changes from REMOTE</source>
          <target state="translated">如果你想从REMOTE获得变化</target>
        </trans-unit>
        <trans-unit id="7f764d3f6b37d69b7cfb44ee1e10315cfa562c73" translate="yes" xml:space="preserve">
          <source>If you want to merge from branch (test) to master, you can follow these steps:</source>
          <target state="translated">如果你想从分支(测试)合并到主站,可以按照以下步骤进行合并。</target>
        </trans-unit>
        <trans-unit id="5b99b606e7392bf3cc501c5e6406eeea867175e7" translate="yes" xml:space="preserve">
          <source>If you're making frequent small commits, then start by looking at the commit comments with &lt;code&gt;git log --merge&lt;/code&gt;. Then &lt;code&gt;git diff&lt;/code&gt; will show you the conflicts.</source>
          <target state="translated">如果您要进行频繁的小提交，请首先使用 &lt;code&gt;git log --merge&lt;/code&gt; 查看提交注释。 然后 &lt;code&gt;git diff&lt;/code&gt; 将向您显示冲突。</target>
        </trans-unit>
        <trans-unit id="e087c5303db4581add8424216fe62c3476f5c96d" translate="yes" xml:space="preserve">
          <source>If you're unsure of a merge, don't force it.</source>
          <target state="translated">如果你不确定合并,就不要强求。</target>
        </trans-unit>
        <trans-unit id="eae8dcd45665da5a6e192ad89e08d8c301cd9888" translate="yes" xml:space="preserve">
          <source>In case of conflict, just use</source>
          <target state="translated">如果发生冲突,只需使用</target>
        </trans-unit>
        <trans-unit id="d592dbde4754ce459b94a6718b0d95d29d91ed12" translate="yes" xml:space="preserve">
          <source>In speaking of pull/fetch/merge in the above answers, I would like to share an interesting and productive trick,</source>
          <target state="translated">说到上面的答案中的拉菲奇merge,我想和大家分享一个有趣又有成效的小技巧。</target>
        </trans-unit>
        <trans-unit id="404c8199355521cd32b47a7d72664223656e0afb" translate="yes" xml:space="preserve">
          <source>In the long run, planning ahead and being aware of what others are working on are the best tools for anticipating merge conflicts and prepare yourself to resolve them correctly in less time.</source>
          <target state="translated">从长远来看,未雨绸缪,了解别人的工作内容,是预测合并冲突的最好手段,让自己做好准备,用更少的时间正确解决冲突。</target>
        </trans-unit>
        <trans-unit id="2ddfdc4de435b57cc9f426f563d158f02c8f1dfc" translate="yes" xml:space="preserve">
          <source>In this step you will try to fix the conflict using your prefer IDE</source>
          <target state="translated">在这一步中,你将尝试使用你喜欢的IDE修复冲突</target>
        </trans-unit>
        <trans-unit id="dc64513761c45dd824144f46922e260041bf8652" translate="yes" xml:space="preserve">
          <source>Instead I try to do</source>
          <target state="translated">相反,我试着去做</target>
        </trans-unit>
        <trans-unit id="c042f3d9b71b32db250543be269d410c99d13527" translate="yes" xml:space="preserve">
          <source>Instead of:</source>
          <target state="translated">而不是:</target>
        </trans-unit>
        <trans-unit id="7114095c6f61ba912555fde2a05cdbdc7435bd0d" translate="yes" xml:space="preserve">
          <source>It can help you very well by showing what are the changes made to the original one and should you accept  &lt;code&gt;incoming&lt;/code&gt; or</source>
          <target state="translated">通过显示对原始内容所做的更改以及您是否应该接受 &lt;code&gt;incoming&lt;/code&gt; 或</target>
        </trans-unit>
        <trans-unit id="97c4c9cdb8b4f9dade9ea3c515bca654b46ccc5b" translate="yes" xml:space="preserve">
          <source>It graphically can show the changes between 3 files and it allows automatic merging (when safe to do so) and full control over editing the resulting file.</source>
          <target state="translated">它可以图形化地显示3个文件之间的变化,并允许自动合并(在安全的情况下)和完全控制编辑结果文件。</target>
        </trans-unit>
        <trans-unit id="fc65623ad7e5af9ffb0022bbd490aee9cc8be179" translate="yes" xml:space="preserve">
          <source>It helped for me and it can work for you too !</source>
          <target state="translated">它对我有帮助,对你也有帮助!</target>
        </trans-unit>
        <trans-unit id="26cb61480f17932403ae66265778d74b745d11b3" translate="yes" xml:space="preserve">
          <source>It opens a GUI that steps you through each conflict, and you get to choose how to merge.  Sometimes it requires a bit of hand editing afterwards, but usually it's enough by itself.  It is much better than doing the whole thing by hand certainly.</source>
          <target state="translated">它会打开一个GUI,通过GUI来引导你完成每个冲突,你可以选择如何合并。有时需要手动编辑,但通常情况下,它本身就足够了。当然,这比手工做整个事情要好得多。</target>
        </trans-unit>
        <trans-unit id="b42f3381050c1b31f935c0dabe817fe60cac10a9" translate="yes" xml:space="preserve">
          <source>It will open local version (ours), &quot;base&quot; or &quot;merged&quot; version (the current result of the merge) and remote version (theirs). Save the merged version when you are finished, run &lt;code&gt;git mergetool -t meld&lt;/code&gt; again until you get &quot;No files need merging&quot;, then go to Steps 3. and 4.</source>
          <target state="translated">它将打开本地版本（我们的），&amp;ldquo;基本&amp;rdquo;或&amp;ldquo;合并的&amp;rdquo;版本（合并的当前结果）和远程版本（它们的）。 完成后保存合并的版本，再次运行 &lt;code&gt;git mergetool -t meld&lt;/code&gt; ，直到得到&amp;ldquo;不需要合并文件&amp;rdquo;，然后转到步骤3和4。</target>
        </trans-unit>
        <trans-unit id="bb08ab4098d66264a23b33d34e2a1fb7f673e561" translate="yes" xml:space="preserve">
          <source>It will show all conflicts like this</source>
          <target state="translated">它将显示所有的冲突是这样的</target>
        </trans-unit>
        <trans-unit id="dbcce2d9085ea3f26119a032f6da8d8969d5be5c" translate="yes" xml:space="preserve">
          <source>LOCAL &amp;ndash; this is file from the current branch</source>
          <target state="translated">本地&amp;ndash;这是当前分支中的文件</target>
        </trans-unit>
        <trans-unit id="8ae1c34bd37fad49cc5f8e02da648a78e89c3ed8" translate="yes" xml:space="preserve">
          <source>Left</source>
          <target state="translated">Left</target>
        </trans-unit>
        <trans-unit id="555712d9829e6328a9b7d5ec70facbda745fb9b3" translate="yes" xml:space="preserve">
          <source>Look at the diffs from each branch. &lt;code&gt;git log --merge -p &amp;lt;path&amp;gt;&lt;/code&gt; will show diffs first for the &lt;code&gt;HEAD&lt;/code&gt; version and then the &lt;code&gt;MERGE_HEAD&lt;/code&gt; version.</source>
          <target state="translated">查看每个分支的差异。 &lt;code&gt;git log --merge -p &amp;lt;path&amp;gt;&lt;/code&gt; 将首先显示 &lt;code&gt;HEAD&lt;/code&gt; 版本的差异，然后显示 &lt;code&gt;MERGE_HEAD&lt;/code&gt; 版本。</target>
        </trans-unit>
        <trans-unit id="a326ab540e0d9536d53dbc94d57cb0c25e24d9a1" translate="yes" xml:space="preserve">
          <source>Look at the diffs. &lt;code&gt;git diff&lt;/code&gt; will show a three-way diff, highlighting changes from both the &lt;code&gt;HEAD&lt;/code&gt; and &lt;code&gt;MERGE_HEAD&lt;/code&gt; versions.</source>
          <target state="translated">看差异。 &lt;code&gt;git diff&lt;/code&gt; 将显示三向差异，突出显示 &lt;code&gt;HEAD&lt;/code&gt; 和 &lt;code&gt;MERGE_HEAD&lt;/code&gt; 版本的更改。</target>
        </trans-unit>
        <trans-unit id="f8c63749f2ae2fa24fa7ef48c360ef59f66a1f48" translate="yes" xml:space="preserve">
          <source>Look at the originals. &lt;code&gt;git show :1:filename&lt;/code&gt; shows the common ancestor, &lt;code&gt;git show :2:filename&lt;/code&gt; shows the &lt;code&gt;HEAD&lt;/code&gt; version, and &lt;code&gt;git show :3:filename&lt;/code&gt; shows the &lt;code&gt;MERGE_HEAD&lt;/code&gt; version.</source>
          <target state="translated">看看原件。 &lt;code&gt;git show :1:filename&lt;/code&gt; 显示共同祖先， &lt;code&gt;git show :2:filename&lt;/code&gt; 显示 &lt;code&gt;HEAD&lt;/code&gt; 版本，而 &lt;code&gt;git show :3:filename&lt;/code&gt; 显示 &lt;code&gt;MERGE_HEAD&lt;/code&gt; 版本。</target>
        </trans-unit>
        <trans-unit id="da48cfaff0482f5a700e60e4191306b2026eace6" translate="yes" xml:space="preserve">
          <source>MERGED &amp;ndash; merge result, this is what gets saved in the repo</source>
          <target state="translated">已合并-合并结果，这就是保存在存储库中的内容</target>
        </trans-unit>
        <trans-unit id="c207672d3b478974acf7e5502421de413cf99f62" translate="yes" xml:space="preserve">
          <source>Merge conflicts could occur in different situations:</source>
          <target state="translated">合并冲突可能会在不同情况下发生。</target>
        </trans-unit>
        <trans-unit id="89538bead44a3004ea9986328c5b27cb003d4f0c" translate="yes" xml:space="preserve">
          <source>Merge conflicts happens when changes are made to a file at the same time. Here is how to solve it.</source>
          <target state="translated">当同时对一个文件进行修改时,会出现合并冲突。以下是如何解决的方法。</target>
        </trans-unit>
        <trans-unit id="e5fff5bc126a251ef08a0ce23b8487354eb67b5f" translate="yes" xml:space="preserve">
          <source>Merging can feel overwhelming, especially when there are a lot of conflicting files and the conflict markers cover hundreds of lines. Often times when estimating software projects we don't include enough time for overhead items like handling a gnarly merge, so it feels like a real drag to spend several hours dissecting each conflict.</source>
          <target state="translated">合并可能会让人感到不知所措,尤其是当有很多冲突的文件,而且冲突标记覆盖了数百条线时。很多时候,当我们在估算软件项目时,往往不会考虑到足够多的时间来处理一些开销性的项目,比如处理一个棘手的合并,所以花几个小时的时间来剖析每一个冲突,感觉真的很麻烦。</target>
        </trans-unit>
        <trans-unit id="e39bb33836c26f3139f0a912c706206ba5e974d5" translate="yes" xml:space="preserve">
          <source>More info about vimdiff navigation &lt;a href=&quot;https://stackoverflow.com/questions/4556184/vim-move-window-left-right&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://stackoverflow.com/questions/27151456/how-do-i-jump-to-the-next-prev-diff-in-git-difftool&quot;&gt;here&lt;/a&gt;</source>
          <target state="translated">有关&lt;a href=&quot;https://stackoverflow.com/questions/4556184/vim-move-window-left-right&quot;&gt;此处&lt;/a&gt;和&lt;a href=&quot;https://stackoverflow.com/questions/27151456/how-do-i-jump-to-the-next-prev-diff-in-git-difftool&quot;&gt;此处的&lt;/a&gt; vimdiff导航的更多信息</target>
        </trans-unit>
        <trans-unit id="2b1bfe9110cf0c706e0d05da6f4787b55fdde2a0" translate="yes" xml:space="preserve">
          <source>Note the list of conflicted files with: &lt;code&gt;git status&lt;/code&gt; (under &lt;code&gt;Unmerged paths&lt;/code&gt; section).</source>
          <target state="translated">请注意以下冲突文件列表： &lt;code&gt;git status&lt;/code&gt; （在&amp;ldquo;未 &lt;code&gt;Unmerged paths&lt;/code&gt; 部分下）。</target>
        </trans-unit>
        <trans-unit id="76a117ad8111894a1bf378d48165f39268206dd8" translate="yes" xml:space="preserve">
          <source>Now every thing is fine and you will find your commit in gerrit</source>
          <target state="translated">现在,一切都很好,你会发现你的承诺在Gerrit</target>
        </trans-unit>
        <trans-unit id="439caa25a979e2fb12ce16caa7f6dd15ef11c706" translate="yes" xml:space="preserve">
          <source>Now note that the file TestClass.java is shown in red in intelliJ
Also git status will show</source>
          <target state="translated">现在注意,TestClass.java文件在intelliJ中以红色显示,同时git状态会显示</target>
        </trans-unit>
        <trans-unit id="da73ee3e345c38d30a956ed6fc100e554e797dbc" translate="yes" xml:space="preserve">
          <source>Now you can do the same and maintain as many local branches you want and work simultaneous my just doing a git checkout to your branch when ever necessary.</source>
          <target state="translated">现在,你可以做同样的事情,在必要的时候,你可以在你的分支上做同样的事情,并维护尽可能多的本地分支,同时工作。</target>
        </trans-unit>
        <trans-unit id="25b6fa122cc4fa3ab8aae8c0fb7c6910f4daf896" translate="yes" xml:space="preserve">
          <source>Oh my, oh my, upstream changed some things, but just to use my changes...no...their changes...</source>
          <target state="translated">哎呀,哎呀,哎呀,上游改变了一些东西,但只是为了用我的改变...........不.........他们的改变..........。</target>
        </trans-unit>
        <trans-unit id="4960aa7dc5964ca6ef5eb3e74371acd1a4093407" translate="yes" xml:space="preserve">
          <source>On macOS you can install via:</source>
          <target state="translated">在macOS上,你可以通过安装。</target>
        </trans-unit>
        <trans-unit id="10317b5751b3df6c5c097f628325b733f07f54e7" translate="yes" xml:space="preserve">
          <source>Once in the 3-ways merge, &lt;em&gt;fugitive&lt;/em&gt; will let you get the changes of any of the branches you are merging in the following fashion:</source>
          <target state="translated">在三向合并中， &lt;em&gt;逃犯&lt;/em&gt;将使您能够以以下方式获取要合并的任何分支的更改：</target>
        </trans-unit>
        <trans-unit id="a577bec41e40cb755e1ccc45c2a5d18df1988e6d" translate="yes" xml:space="preserve">
          <source>Once you are finished merging the file, type &lt;code&gt;:Gwrite&lt;/code&gt; in the merged buffer. 
Vimcasts released a great &lt;a href=&quot;http://vimcasts.org/episodes/fugitive-vim-resolving-merge-conflicts-with-vimdiff/&quot;&gt;video&lt;/a&gt; explaining in detail this steps.</source>
          <target state="translated">完成合并文件后，在合并的缓冲区中键入 &lt;code&gt;:Gwrite&lt;/code&gt; 。 Vimcasts发布了一段精彩的&lt;a href=&quot;http://vimcasts.org/episodes/fugitive-vim-resolving-merge-conflicts-with-vimdiff/&quot;&gt;视频&lt;/a&gt; ，详细介绍了此步骤。</target>
        </trans-unit>
        <trans-unit id="43f787b16f278fcf8aa01eef0994a4578332b046" translate="yes" xml:space="preserve">
          <source>Once you've resolved &lt;strong&gt;all&lt;/strong&gt; conflicts, do &lt;code&gt;git rebase --continue&lt;/code&gt; or whatever command 
Git said to do when you completed.</source>
          <target state="translated">解决&lt;strong&gt;所有&lt;/strong&gt;冲突后，请执行 &lt;code&gt;git rebase --continue&lt;/code&gt; 或完成时Git所说的命令。</target>
        </trans-unit>
        <trans-unit id="db3bda9aacc5bca97220fd96373a3421022ea32c" translate="yes" xml:space="preserve">
          <source>Once you've resolved the conflict in a file &lt;code&gt;git add the_file&lt;/code&gt;.</source>
          <target state="translated">解决冲突后，在文件 &lt;code&gt;git add the_file&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="59017e16293cce2b88b043f41e02d21dac1a985e" translate="yes" xml:space="preserve">
          <source>Open each file and examine the diffs; Git demarcates them.  Hopefully it will be obvious which version of each block to keep.  You may need to discuss it with fellow developers who committed the code.</source>
          <target state="translated">打开每个文件并检查 diffs;Git 将它们划分出来。希望可以明显地看出每个区块应该保留哪个版本。你可能需要和提交代码的同伴讨论一下。</target>
        </trans-unit>
        <trans-unit id="e85b9596370fb9c69c9435dbfa9bd28dc6b6ab65" translate="yes" xml:space="preserve">
          <source>Open each of those files one by one, or all at once by:</source>
          <target state="translated">逐一打开这些文件,或一次全部打开。</target>
        </trans-unit>
        <trans-unit id="90a01728725fc6bffec18879dac73281b710df12" translate="yes" xml:space="preserve">
          <source>Open the file in intelliJ, it will have sections with</source>
          <target state="translated">在intelliJ中打开文件,它将会有以下几个部分带着</target>
        </trans-unit>
        <trans-unit id="d94753520a26eddd7b65afc1ab802df26dfc0b83" translate="yes" xml:space="preserve">
          <source>Or else you will have to use a GUI merge tool to step through files one by one, say the merge tool is &lt;code&gt;p4merge&lt;/code&gt;, or write any one's name you've already installed</source>
          <target state="translated">否则，您将不得不使用GUI合并工具来一步一步地浏览文件，例如，合并工具为 &lt;code&gt;p4merge&lt;/code&gt; ，或者写下您已经安装的任何人的名字</target>
        </trans-unit>
        <trans-unit id="33dc7a1152af93385b97abf2bed64a4471a85875" translate="yes" xml:space="preserve">
          <source>PS: It will work only if you've configured git with with your code and Visual Studio Code.</source>
          <target state="translated">PS:只有当你将git与你的代码和Visual Studio Code一起配置了git,它才会工作。</target>
        </trans-unit>
        <trans-unit id="6052e8e1fbe0373fcc55364272596ceb5789b5e1" translate="yes" xml:space="preserve">
          <source>Path and filename conflicts can be solved by &lt;code&gt;git add&lt;/code&gt;/&lt;code&gt;git rm&lt;/code&gt;.</source>
          <target state="translated">路径和文件名冲突可以通过 &lt;code&gt;git add&lt;/code&gt; / &lt;code&gt;git rm&lt;/code&gt; 解决。</target>
        </trans-unit>
        <trans-unit id="d7dd1808b84c37fb3ea9b4448dcf162c6448fab5" translate="yes" xml:space="preserve">
          <source>Plan ahead; communicate with co-workers.</source>
          <target state="translated">未雨绸缪;与同事沟通。</target>
        </trans-unit>
        <trans-unit id="a404d7bca3c1d51acaf1b7dab0af047b2a2ffb83" translate="yes" xml:space="preserve">
          <source>Planning ahead and being aware of what others are working on can help prevent merge conflicts and/or help resolve them earlier -- while the details are still fresh in mind.</source>
          <target state="translated">提前规划和了解他人正在进行的工作,可以帮助防止合并冲突,或帮助尽早解决冲突----趁着细节还在脑海中。</target>
        </trans-unit>
        <trans-unit id="83c0b885b0a38566ed9722438c0513be76f77cfd" translate="yes" xml:space="preserve">
          <source>Please follow the following steps to fix merge conflicts in Git:</source>
          <target state="translated">请按照以下步骤来修复Git中的合并冲突。</target>
        </trans-unit>
        <trans-unit id="f7d4c271606f9ee9168d1a393f65cdddde869ceb" translate="yes" xml:space="preserve">
          <source>Pull the recent contents from master:
&lt;strong&gt;&lt;em&gt;git pull --rebase origin master&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">从master &lt;strong&gt;&lt;em&gt;提取&lt;/em&gt;&lt;/strong&gt;最近的内容： &lt;strong&gt;&lt;em&gt;git pull --rebase origin master&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3ee9fffd45db979e0d1c74f03d3dd56b26471c3c" translate="yes" xml:space="preserve">
          <source>Push to the master branch:
&lt;strong&gt;&lt;em&gt;git push&lt;/em&gt;&lt;/strong&gt; (to your Git repository)</source>
          <target state="translated">推送到master分支： &lt;strong&gt;&lt;em&gt;git push&lt;/em&gt;&lt;/strong&gt; （到您的Git存储库）</target>
        </trans-unit>
        <trans-unit id="b6fbb68683d3832aa04f181677975e02a81e5630" translate="yes" xml:space="preserve">
          <source>REMOTE &amp;ndash; file you are merging into your branch</source>
          <target state="translated">远程&amp;ndash;将文件合并到分支中</target>
        </trans-unit>
        <trans-unit id="88b35db955662f7fccc81b814566407d747daaa3" translate="yes" xml:space="preserve">
          <source>Related: &lt;a href=&quot;https://stackoverflow.com/q/25576415/55075&quot;&gt;What is the precise meaning of &quot;ours&quot; and &quot;theirs&quot; in git?&lt;/a&gt;</source>
          <target state="translated">相关： &lt;a href=&quot;https://stackoverflow.com/q/25576415/55075&quot;&gt;git中&amp;ldquo;我们的&amp;rdquo;和&amp;ldquo;他们的&amp;rdquo;的确切含义是什么？&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="bb682014aabba1d2c235e608a21de9821bfbc40c" translate="yes" xml:space="preserve">
          <source>Replacing &lt;code&gt;$MERGED_IN_BRANCH&lt;/code&gt; with the branch I merged in and &lt;code&gt;[path]&lt;/code&gt; with the file that is conflicting. This command will log all the commits, in patch form, between (&lt;code&gt;..&lt;/code&gt;) two commits. If you leave one side empty like in the commands above git will automatically use &lt;code&gt;HEAD&lt;/code&gt; (the branch you are merging into in this case).</source>
          <target state="translated">将 &lt;code&gt;$MERGED_IN_BRANCH&lt;/code&gt; 替换为我合并的分支，并将 &lt;code&gt;[path]&lt;/code&gt; 替换为有冲突的文件。 此命令将以补丁形式记录两次（ &lt;code&gt;..&lt;/code&gt; ）之间的所有提交。 如果像上面的命令中那样将一侧留空，则git将自动使用 &lt;code&gt;HEAD&lt;/code&gt; （在这种情况下，您要合并到的分支）。</target>
        </trans-unit>
        <trans-unit id="754ec967779bd2370b6031e462d4cfe9fcbd0f6a" translate="yes" xml:space="preserve">
          <source>Resolve the conflicts. Git will mark the conflicts in the working tree. Edit the files into shape and &lt;code&gt;git add&lt;/code&gt; them to the index. Use &lt;code&gt;git commit&lt;/code&gt; to seal the deal.</source>
          <target state="translated">解决冲突。 Git将标记工作树中的冲突。 将文件编辑为shape并 &lt;code&gt;git add&lt;/code&gt; 它们添加到索引中。 使用 &lt;code&gt;git commit&lt;/code&gt; 来完成交易。</target>
        </trans-unit>
        <trans-unit id="10f8070070547ece9227547970e8168b7821ea8b" translate="yes" xml:space="preserve">
          <source>Review changes and accept either version for each of them.</source>
          <target state="translated">复习修改,并接受每一个版本的修改。</target>
        </trans-unit>
        <trans-unit id="954daa8b00335c66e262106e01f7dc22b19a4372" translate="yes" xml:space="preserve">
          <source>Right</source>
          <target state="translated">Right</target>
        </trans-unit>
        <trans-unit id="a2bfb47b2fe2945a9227665d3b4bfc8f09393dfe" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://medium.com/@yairchu/how-git-mediate-made-me-stop-fearing-merge-conflicts-and-start-treating-them-like-an-easy-game-of-a2c71b919984&quot;&gt;this post&lt;/a&gt; for a quick intro on how to use it.</source>
          <target state="translated">有关如何使用它的快速介绍，请参见&lt;a href=&quot;https://medium.com/@yairchu/how-git-mediate-made-me-stop-fearing-merge-conflicts-and-start-treating-them-like-an-easy-game-of-a2c71b919984&quot;&gt;这篇文章&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="3ccbda76134d2bbffe0a7eb4a8057418496f4c8f" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://www.kernel.org/pub/software/scm/git/docs/git-merge.html#_how_conflicts_are_presented&quot;&gt;How Conflicts Are Presented&lt;/a&gt; or, in Git, the &lt;code&gt;git merge&lt;/code&gt; documentation to understand what merge conflict markers are.</source>
          <target state="translated">请参阅&lt;a href=&quot;https://www.kernel.org/pub/software/scm/git/docs/git-merge.html#_how_conflicts_are_presented&quot;&gt;冲突的显示方式，&lt;/a&gt;或者在Git中， &lt;code&gt;git merge&lt;/code&gt; 文档以了解什么是合并冲突标记。</target>
        </trans-unit>
        <trans-unit id="494638b10d967211b2ee49f2b5a0c6f2944955f6" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;https://help.github.com/articles/resolving-a-merge-conflict-from-the-command-line/&quot;&gt;Resolving a merge conflict from the command line&lt;/a&gt; at GitHub</source>
          <target state="translated">另请参阅： &lt;a href=&quot;https://help.github.com/articles/resolving-a-merge-conflict-from-the-command-line/&quot;&gt;从&lt;/a&gt; GitHub 的命令行解决合并冲突</target>
        </trans-unit>
        <trans-unit id="117985687fb4e31fc4b0b70ce40cfa454b78879d" translate="yes" xml:space="preserve">
          <source>Simply download it and run in repo as:</source>
          <target state="translated">只需下载后在repo中运行即可。</target>
        </trans-unit>
        <trans-unit id="3b4d4db1016a0dcd197daee09f21a7c6173951d5" translate="yes" xml:space="preserve">
          <source>Simply, if you know well that changes in one of the repositories is not important, and want to resolve all changes in favor of the other one, use:</source>
          <target state="translated">很简单,如果你很清楚地知道其中一个存储库中的更改并不重要,并且想解决所有的更改都有利于另一个存储库,那就使用。</target>
        </trans-unit>
        <trans-unit id="bdc26a6c55a54975e8e87cc14ea1935913a21dd5" translate="yes" xml:space="preserve">
          <source>So instead I do:</source>
          <target state="translated">所以,我不做。</target>
        </trans-unit>
        <trans-unit id="3e66f4270aaf5aad76b4a5003b6d4c3258489502" translate="yes" xml:space="preserve">
          <source>So you decide to take a look at the changes:</source>
          <target state="translated">所以,你决定看一看变化。</target>
        </trans-unit>
        <trans-unit id="ad9d48522fcf343c56c523ee1bc1c12a8297dbe1" translate="yes" xml:space="preserve">
          <source>So you get up-to-date and try again, but have a conflict:</source>
          <target state="translated">所以,你得到了最新的信息,再去尝试,却发生了冲突。</target>
        </trans-unit>
        <trans-unit id="8f28dcb6026cd0952fcd9aac2a3fbb12726aed7c" translate="yes" xml:space="preserve">
          <source>Solve the conflicts separately for each file by one of the following approaches:</source>
          <target state="translated">用下列方法之一分别解决每个文件的冲突:</target>
        </trans-unit>
        <trans-unit id="b8390b6223d0ac9dbfbdb4d9ee338a66d523cbc0" translate="yes" xml:space="preserve">
          <source>Somebody already mentioned this, but understanding the intention behind each diff hunk is generally very helpful for understanding where a conflict came from and how to handle it.</source>
          <target state="translated">有人已经提到了这一点,但了解每一个差异大块背后的意图,一般来说对理解冲突的来源和处理冲突的方式都很有帮助。</target>
        </trans-unit>
        <trans-unit id="e94e2a8ac1328e89e2951fe041052cadadb87fc8" translate="yes" xml:space="preserve">
          <source>Start the mergetool and check the conflicts and fix them...and check the changes in the remote branch with your current branch:
&lt;strong&gt;&lt;em&gt;git mergetool&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">启动mergetool并检查冲突并解决问题...并使用当前分支检查远程分支中的更改： &lt;strong&gt;&lt;em&gt;git mergetool&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5ff57f4185e884322f43c9c59da60f12f41285ea" translate="yes" xml:space="preserve">
          <source>TL;DR</source>
          <target state="translated">TL;DR</target>
        </trans-unit>
        <trans-unit id="db2022cd2cf86579d8076f3076c361ff76371894" translate="yes" xml:space="preserve">
          <source>Ta-da!</source>
          <target state="translated">Ta-da!</target>
        </trans-unit>
        <trans-unit id="cb0d4640cc97fab3274414a90556c59b65391899" translate="yes" xml:space="preserve">
          <source>The best thing I have found is to use the &quot;diff3&quot; merge conflict style:</source>
          <target state="translated">我发现最好的方法是使用 &quot;diff3 &quot;合并冲突样式。</target>
        </trans-unit>
        <trans-unit id="fa416c6119c6e16e6b0b6ae731c70e6bbd2ef937" translate="yes" xml:space="preserve">
          <source>The command doesn't necessarily open a GUI unless you install one. Running &lt;code&gt;git mergetool&lt;/code&gt; for me resulted in &lt;code&gt;vimdiff&lt;/code&gt; being used. You can install one of the following tools to use it instead: &lt;code&gt;meld&lt;/code&gt;, &lt;code&gt;opendiff&lt;/code&gt;, &lt;code&gt;kdiff3&lt;/code&gt;, &lt;code&gt;tkdiff&lt;/code&gt;, &lt;code&gt;xxdiff&lt;/code&gt;, &lt;code&gt;tortoisemerge&lt;/code&gt;, &lt;code&gt;gvimdiff&lt;/code&gt;, &lt;code&gt;diffuse&lt;/code&gt;, &lt;code&gt;ecmerge&lt;/code&gt;, &lt;code&gt;p4merge&lt;/code&gt;, &lt;code&gt;araxis&lt;/code&gt;, &lt;code&gt;vimdiff&lt;/code&gt;, &lt;code&gt;emerge&lt;/code&gt;.</source>
          <target state="translated">该命令不一定会打开GUI，除非您安装了一个GUI。 对我运行 &lt;code&gt;git mergetool&lt;/code&gt; 导致使用了 &lt;code&gt;vimdiff&lt;/code&gt; 。 您可以安装以下工具之一来代替使用它： &lt;code&gt;opendiff&lt;/code&gt; ， opendiff ， &lt;code&gt;kdiff3&lt;/code&gt; ， &lt;code&gt;tkdiff&lt;/code&gt; ， &lt;code&gt;xxdiff&lt;/code&gt; ， &lt;code&gt;tortoisemerge&lt;/code&gt; ， &lt;code&gt;gvimdiff&lt;/code&gt; ， &lt;code&gt;diffuse&lt;/code&gt; ， &lt;code&gt;ecmerge&lt;/code&gt; ， &lt;code&gt;p4merge&lt;/code&gt; ， &lt;code&gt;araxis&lt;/code&gt; ， &lt;code&gt;vimdiff&lt;/code&gt; ， &lt;code&gt;emerge&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="00181eebd298a786ad84b0a5cfdc81e9f1a4196b" translate="yes" xml:space="preserve">
          <source>The middle section is what the common ancestor looked like. This is useful because you can compare it to the top and bottom versions to get a better sense of what was changed on each branch, which gives you a better idea for what the purpose of each change was.</source>
          <target state="translated">中间的部分是普通祖宗的样子。这一点很有用,因为你可以把它和上面的版本和下面的版本进行比较,可以更好地了解每一个分支上的变化,这样你就能更清楚地知道每次变化的目的是什么。</target>
        </trans-unit>
        <trans-unit id="84eff26971566856e04b40855b74ac202b029577" translate="yes" xml:space="preserve">
          <source>Then I can run the following commands to see the two diff hunks that caused the conflict:</source>
          <target state="translated">然后,我可以运行以下命令来查看引起冲突的两个不同的Hunks。</target>
        </trans-unit>
        <trans-unit id="960e9499cb2875d16461130707873670bf09ea5c" translate="yes" xml:space="preserve">
          <source>Then every time you come across a merge conflict you just need to run this command:</source>
          <target state="translated">然后每次遇到合并冲突时,你只需要运行这个命令。</target>
        </trans-unit>
        <trans-unit id="3259e73bc0d30282ee86971a518870c81c32ad76" translate="yes" xml:space="preserve">
          <source>Then it opens the Kdiff3, and first tries to resolve the merge conflicts automatically. Most of the conflicts would be resolved spontaneously and you need to fix the rest manually.</source>
          <target state="translated">然后打开Kdiff3,首先尝试自动解决合并冲突。大部分的冲突都会自动解决,剩下的就需要手动解决。</target>
        </trans-unit>
        <trans-unit id="cd0247227edaffbcc3ab9deb3c823775c53bdc38" translate="yes" xml:space="preserve">
          <source>Then once you're done, save the file and it goes to the next file with conflict and you do the same thing again until all the conflicts are resolved.</source>
          <target state="translated">然后一旦你完成了,保存文件,它就会进入下一个有冲突的文件,你再做同样的事情,直到所有的冲突都解决。</target>
        </trans-unit>
        <trans-unit id="7a782f5dc825122a5b15059b520496a2b37aeed9" translate="yes" xml:space="preserve">
          <source>Then open the project in VS and go to Team Explorer -&amp;gt; Branch.  Now there is a message that says Merge is pending and conflicting files are listed right below the message.</source>
          <target state="translated">然后在VS中打开项目，然后转到Team Explorer-&amp;gt; Branch。 现在，出现一条消息，指出合并处于挂起状态，并且在该消息的正下方列出了冲突的文件。</target>
        </trans-unit>
        <trans-unit id="6276b71b7b9d1df026bc479f15195ae504382e10" translate="yes" xml:space="preserve">
          <source>Then setup git configs to use Kdiff as its mergetool:</source>
          <target state="translated">然后设置git配置,使用Kdiff作为它的merget工具。</target>
        </trans-unit>
        <trans-unit id="6e37b00edbd74e9993355959a37378dd58899b7f" translate="yes" xml:space="preserve">
          <source>Then you can use the following keyboard shortcuts:</source>
          <target state="translated">那么你可以使用下面的键盘快捷方式。</target>
        </trans-unit>
        <trans-unit id="35380e99d8fccffbf29acf9e8f9efd6178d21e86" translate="yes" xml:space="preserve">
          <source>There are 3 steps:</source>
          <target state="translated">有3个步骤。</target>
        </trans-unit>
        <trans-unit id="886c558dcdd074dc65267395c98971c06030fdc7" translate="yes" xml:space="preserve">
          <source>These 4 views are</source>
          <target state="translated">这4种观点是</target>
        </trans-unit>
        <trans-unit id="22479224c315e3ac8965a8d67b70537247f8ee88" translate="yes" xml:space="preserve">
          <source>This above command is the most useful command in my git life which saved a lots of time.</source>
          <target state="translated">上面这条命令是我在git生活中最有用的命令,它节省了很多时间。</target>
        </trans-unit>
        <trans-unit id="59037e1d8acc37c2c0be80dd1fa1d263cb2c7a35" translate="yes" xml:space="preserve">
          <source>This answers is to add an alternative for those VIM users like I that prefers to do everything within the editor.</source>
          <target state="translated">这个答案是为了给那些像我这样喜欢在编辑器里做一切事情的VIM用户增加一个选择。</target>
        </trans-unit>
        <trans-unit id="61c64505fa913e4a77f659489f58212df9cc15bb" translate="yes" xml:space="preserve">
          <source>This is not the same as using a merge tool, since a merge tool will include all of the non-conflicting diff hunks too. I find that to be distracting.</source>
          <target state="translated">这和使用合并工具是不一样的,因为合并工具也会把所有不冲突的difflicing hunks都包括在内。我觉得这样做会让人分心。</target>
        </trans-unit>
        <trans-unit id="7a9726ba4331f750e36611e6d88058f64fce2ae7" translate="yes" xml:space="preserve">
          <source>This produces conflict markers like this:</source>
          <target state="translated">这就产生了像这样的冲突标记。</target>
        </trans-unit>
        <trans-unit id="9429d7dd63b1a82244a4ee81fc2e98d38e5dc2f3" translate="yes" xml:space="preserve">
          <source>This shows all of the commits that touched that file in between the common ancestor and the two heads you are merging. (So it doesn't include commits that already exist in both branches before merging.) This helps you ignore diff hunks that clearly are not a factor in your current conflict.</source>
          <target state="translated">这会显示所有在共同祖先和你要合并的两个分支之间的提交。(所以它不包括合并前已经存在于两个分支中的提交。)这可以帮助你忽略那些显然与你当前冲突无关的 diff hunks。</target>
        </trans-unit>
        <trans-unit id="e8052170fcce5a238152e51b1b9fa51d7a1954b9" translate="yes" xml:space="preserve">
          <source>This way you are more deliberate about which files get added and you also get to review the list and think a bit more while using the editor for the message.  I find it also improves my commit messages when I use a full screen editor rather than the &lt;code&gt;-m&lt;/code&gt; option.</source>
          <target state="translated">这样，您就可以更仔细地考虑要添加哪些文件，还可以查看列表，并在使用编辑器消息时多加考虑。 我发现当我使用全屏编辑器而不是 &lt;code&gt;-m&lt;/code&gt; 选项时，它也可以改善提交消息。</target>
        </trans-unit>
        <trans-unit id="9bb8d189f888727aa299a713fa141bbbf42bccb5" translate="yes" xml:space="preserve">
          <source>This will allow you to see what commits went into the file in the two branches after they diverged. It usually makes it much easier to solve conflicts.</source>
          <target state="translated">这将使你可以看到两个分支中的提交在分歧后,有哪些提交进入了文件。这通常会让解决冲突变得更加容易。</target>
        </trans-unit>
        <trans-unit id="9f7b2877e2f1a7bd2921ac234215cbfe9c395a9f" translate="yes" xml:space="preserve">
          <source>This will open three buffers (mine, theirs, and the output buffer). Navigate by pressing 'n' (next region), 'p' (prevision region). Press 'a' and 'b' to copy mine or theirs region to the output buffer, respectively. And/or edit the output buffer directly.</source>
          <target state="translated">这将打开三个缓冲区(我的、他们的和输出缓冲区)。通过按'n'(下一个区域)、'p'(前视区域)来导航。按'a'和'b'分别复制我的或他们的区域到输出缓冲区。或直接编辑输出缓冲区。</target>
        </trans-unit>
        <trans-unit id="21f2993514dad951f274354d8d0b9637a2d6b95f" translate="yes" xml:space="preserve">
          <source>This will set vimdiff as the default merge tool.</source>
          <target state="translated">这将设置vimdiff为默认的合并工具。</target>
        </trans-unit>
        <trans-unit id="3cd317ab4778d4d010adb46a5d176b3961ac48ba" translate="yes" xml:space="preserve">
          <source>Thus, if you don't want to use the command-line or &lt;em&gt;any 3rd party tools that are offered here from older answers&lt;/em&gt;, go with GitHub's native tool.</source>
          <target state="translated">因此，如果您不想使用&lt;em&gt;旧答案中提供&lt;/em&gt;的命令行或&lt;em&gt;任何第三方工具&lt;/em&gt; ，请使用GitHub的本机工具。</target>
        </trans-unit>
        <trans-unit id="3599a4eee13e823c58dbc9bf040eace561214a89" translate="yes" xml:space="preserve">
          <source>Tip Five</source>
          <target state="translated">技巧五</target>
        </trans-unit>
        <trans-unit id="fefceba8ec7bb1e54efb028d96558e09d4820c6f" translate="yes" xml:space="preserve">
          <source>Tip Four</source>
          <target state="translated">技巧四</target>
        </trans-unit>
        <trans-unit id="8ca22f40b9bee969d8e790727afea793e1112fac" translate="yes" xml:space="preserve">
          <source>Tip One</source>
          <target state="translated">提示一</target>
        </trans-unit>
        <trans-unit id="a998c26341cf9c0a16ddb925ccfd55e91c1a2222" translate="yes" xml:space="preserve">
          <source>Tip Three</source>
          <target state="translated">技巧三</target>
        </trans-unit>
        <trans-unit id="d41d33682690e4ffb5a78c2c2d6f8f79b7aa226e" translate="yes" xml:space="preserve">
          <source>Tip Two</source>
          <target state="translated">技巧二</target>
        </trans-unit>
        <trans-unit id="fab1e01085f3441c59ae11c6bd959811634c7f61" translate="yes" xml:space="preserve">
          <source>To accept local/our version, use: &lt;code&gt;git checkout --ours path/file&lt;/code&gt;</source>
          <target state="translated">要接受本地/我们的版本，请使用： &lt;code&gt;git checkout --ours path/file&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fc9e8d98a4f0ab6180fa3f017fa21cb84a1c8789" translate="yes" xml:space="preserve">
          <source>To accept remote/other version, use: &lt;code&gt;git checkout --theirs path/file&lt;/code&gt;. This will reject any local changes you did for that file.</source>
          <target state="translated">要接受远程/其他版本，请使用： &lt;code&gt;git checkout --theirs path/file&lt;/code&gt; 。 这将拒绝您对该文件所做的任何本地更改。</target>
        </trans-unit>
        <trans-unit id="328411be8e4df9b5a71a4f7ca3e682ee0f2b25e1" translate="yes" xml:space="preserve">
          <source>To check if everything is merged successfully, just run the mergetool command again, you should get this result:</source>
          <target state="translated">要检查是否成功合并,只要再次运行mergetool命令,应该会得到这样的结果。</target>
        </trans-unit>
        <trans-unit id="cba02a9087cefb199c787a07b77e046e2a0cbe7e" translate="yes" xml:space="preserve">
          <source>Tpope came up with this great plugin for VIM called &lt;a href=&quot;https://github.com/tpope/vim-fugitive&quot;&gt;fugitive&lt;/a&gt;. Once installed you can run &lt;code&gt;:Gstatus&lt;/code&gt; to check the files that have conflict and &lt;code&gt;:Gdiff&lt;/code&gt; to open Git in a 3 ways merge.</source>
          <target state="translated">Tpope提出了这个伟大的VIM插件&lt;a href=&quot;https://github.com/tpope/vim-fugitive&quot;&gt;fugitive&lt;/a&gt; 。 安装完成后，您可以运行 &lt;code&gt;:Gstatus&lt;/code&gt; 来检查有冲突的文件，然后运行：Gdiff来以三种方式打开Git。</target>
        </trans-unit>
        <trans-unit id="297282c36d932ef18e4c066b3c37718ab7751ff6" translate="yes" xml:space="preserve">
          <source>Try Visual Studio Code for editing if you aren't already.
What it does is after you try merging(and land up in merge conflicts).VS code automatically detects the merge conflicts.</source>
          <target state="translated">如果你还没有的话,可以尝试用Visual Studio Code进行编辑。它的作用是在你尝试合并后(合并冲突),VS代码会自动检测到合并冲突。</target>
        </trans-unit>
        <trans-unit id="792091d7030cdecc4d447756a237c850f8471184" translate="yes" xml:space="preserve">
          <source>Try: &lt;code&gt;git mergetool&lt;/code&gt;</source>
          <target state="translated">尝试： &lt;code&gt;git mergetool&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2038bdec9210202d0d9d74839e3925ff0cd91ba1" translate="yes" xml:space="preserve">
          <source>Up</source>
          <target state="translated">Up</target>
        </trans-unit>
        <trans-unit id="d646749d4d83e809e6e32cea285d2b3353654aee" translate="yes" xml:space="preserve">
          <source>Use GUI to solve the conflicts: &lt;code&gt;git mergetool&lt;/code&gt; (the easiest way).</source>
          <target state="translated">使用GUI解决冲突： &lt;code&gt;git mergetool&lt;/code&gt; （最简单的方法）。</target>
        </trans-unit>
        <trans-unit id="cf410607b4d646fae6b37dffcb3f37fcc481f52b" translate="yes" xml:space="preserve">
          <source>Use a mergetool. &lt;code&gt;git mergetool&lt;/code&gt; to launch a graphical mergetool which will work you through the merge.</source>
          <target state="translated">使用mergetool。 &lt;code&gt;git mergetool&lt;/code&gt; 启动图形化合并工具，它将通过合并工作。</target>
        </trans-unit>
        <trans-unit id="31701f35723c5222b63893f168de94cece275c49" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;patience&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;patience&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="880da6b11bd5b493205b58216361da302d14dcfc" translate="yes" xml:space="preserve">
          <source>Usually, you only want to see the changes for a particular file:</source>
          <target state="translated">通常情况下,你只想看到特定文件的更改。</target>
        </trans-unit>
        <trans-unit id="7c63bd7f640efb4658c5ef3f2317ffb187782ce9" translate="yes" xml:space="preserve">
          <source>Verify your changes with automated tools.</source>
          <target state="translated">用自动工具验证您的更改。</target>
        </trans-unit>
        <trans-unit id="f60a56ea3737fcb2ba54e60f89647a6f3fd091f4" translate="yes" xml:space="preserve">
          <source>What I do to work around this issue is open up two command lines and in one run</source>
          <target state="translated">为了解决这个问题,我所做的是打开两个命令行,然后在一次运行</target>
        </trans-unit>
        <trans-unit id="ca7621a606f4aed5c196696f398beac26081f137" translate="yes" xml:space="preserve">
          <source>When finished with all buffers type</source>
          <target state="translated">完成所有缓冲区后,输入</target>
        </trans-unit>
        <trans-unit id="b196d6892bc8c0cda1ad69fd5abf79daf53a8311" translate="yes" xml:space="preserve">
          <source>When finished: Press 'q'. Emacs asks you if you want to save this buffer: yes.
After finishing a buffer mark it as resolved by running from the teriminal:</source>
          <target state="translated">完成后。按'q'。Emacs会问你是否要保存这个缓冲区:是。在完成一个缓冲区后,将其标记为已解决的缓冲区,并将其从该缓冲区中运行。</target>
        </trans-unit>
        <trans-unit id="0079906e6ed4bd3200fdeda0e2f1d9bd10432c17" translate="yes" xml:space="preserve">
          <source>When running &quot;git fetch&quot; and then &quot;git merge&quot;</source>
          <target state="translated">当运行 &quot;git fetch &quot;然后 &quot;git merge &quot;时</target>
        </trans-unit>
        <trans-unit id="ed97e73a69229caf78e776810b2baf62c68f0e1e" translate="yes" xml:space="preserve">
          <source>When running &quot;git fetch&quot; and then &quot;git rebase&quot;</source>
          <target state="translated">当运行 &quot;git fetch &quot;和 &quot;git rebase &quot;时</target>
        </trans-unit>
        <trans-unit id="d3e31411344bc765f68830306cd14dace0d3781b" translate="yes" xml:space="preserve">
          <source>When running &quot;git pull&quot; (which is actually equal to one of the above-mentioned conditions)</source>
          <target state="translated">当运行 &quot;git pull&quot;(实际上等于上述条件之一)时</target>
        </trans-unit>
        <trans-unit id="df97565f7f4215529afa06a8719dc16c812bbb7c" translate="yes" xml:space="preserve">
          <source>When running &quot;git stash pop&quot;</source>
          <target state="translated">运行 &quot;git stash pop &quot;时</target>
        </trans-unit>
        <trans-unit id="b925d35f901c8e88e7050608cd7f82c6637d6e6a" translate="yes" xml:space="preserve">
          <source>When visiting a buffer requiring edits in Emacs, type</source>
          <target state="translated">在Emacs中访问需要编辑的缓冲区时,输入</target>
        </trans-unit>
        <trans-unit id="a679f0f3e69fd30103ffcbe92197cb52f6926959" translate="yes" xml:space="preserve">
          <source>When you're applying git patches (commits that are exported to files to be transferred, for example, by email)</source>
          <target state="translated">当你在应用git补丁(导出到要传输的文件中的提交,例如,通过电子邮件传输的提交)时</target>
        </trans-unit>
        <trans-unit id="7dbf0b1ee668c5327c5601883ca0d2f8229365d5" translate="yes" xml:space="preserve">
          <source>Which has two drawbacks -</source>
          <target state="translated">其中有两个缺点----</target>
        </trans-unit>
        <trans-unit id="31bc2e26b996657f230dedf9a07bd32f1e303695" translate="yes" xml:space="preserve">
          <source>You can also install &lt;strong&gt;visual tool&lt;/strong&gt; for this, e.g. &lt;code&gt;meld&lt;/code&gt; and run</source>
          <target state="translated">您也可以为此安装&lt;strong&gt;可视化工具&lt;/strong&gt; ，例如， &lt;code&gt;meld&lt;/code&gt; 并运行</target>
        </trans-unit>
        <trans-unit id="790b31a63efa02e224509906d42d1e68c01a62b4" translate="yes" xml:space="preserve">
          <source>You can also read about merge conflict markers and how to resolve them in the &lt;a href=&quot;http://git-scm.com/book&quot;&gt;Pro Git&lt;/a&gt; book section &lt;a href=&quot;http://git-scm.com/book/ch3-2.html#Basic-Merge-Conflicts&quot;&gt;Basic Merge Conflicts&lt;/a&gt;.</source>
          <target state="translated">您还可以在&lt;a href=&quot;http://git-scm.com/book&quot;&gt;Pro Git&lt;/a&gt;书的&amp;ldquo; &lt;a href=&quot;http://git-scm.com/book/ch3-2.html#Basic-Merge-Conflicts&quot;&gt;基本合并冲突&lt;/a&gt; &amp;rdquo;部分中了解有关合并冲突标记以及如何解决它们的信息。</target>
        </trans-unit>
        <trans-unit id="9f31297c5e422ba4e0ac2754f95ec698d7a04e9c" translate="yes" xml:space="preserve">
          <source>You can follow this link to check ho to fix the conflict in the file</source>
          <target state="translated">你可以按照这个链接来检查如何修复文件中的冲突。</target>
        </trans-unit>
        <trans-unit id="8b03c300fb2dfcf5e23681981aa19ff96cc9a605" translate="yes" xml:space="preserve">
          <source>You can navigate among these views using</source>
          <target state="translated">您可以通过以下方式在这些视图中进行导航</target>
        </trans-unit>
        <trans-unit id="b523d391ec33d09697ad69e6d5a6118d93f4340e" translate="yes" xml:space="preserve">
          <source>You can try &lt;a href=&quot;https://github.com/eamodio/vscode-gitlens&quot;&gt;Gitlense&lt;/a&gt; for VS Code, They key features are:</source>
          <target state="translated">您可以尝试&lt;a href=&quot;https://github.com/eamodio/vscode-gitlens&quot;&gt;Gitlense&lt;/a&gt; for VS Code，它们的主要功能是：</target>
        </trans-unit>
        <trans-unit id="77487b0c89edd8fd842e99d65a1b39d2c6b378f5" translate="yes" xml:space="preserve">
          <source>You can work through the conflict with a number of tools:</source>
          <target state="translated">你可以用一些工具来解决这个冲突。</target>
        </trans-unit>
        <trans-unit id="b30d311ef730d06366142f68b918eb7de6eff6a8" translate="yes" xml:space="preserve">
          <source>You could fix merge conflicts in a number of ways as other have detailed.</source>
          <target state="translated">你可以用一些方法来解决合并冲突,其他的方法也有详细说明。</target>
        </trans-unit>
        <trans-unit id="9c2ffbd6fc110a458093bbd52a05163f36ae3277" translate="yes" xml:space="preserve">
          <source>You may also find this helpful:</source>
          <target state="translated">你可能也会发现这一点很有帮助。</target>
        </trans-unit>
        <trans-unit id="286fb5e21b99f880f05109475c17463fa0b3267f" translate="yes" xml:space="preserve">
          <source>You need to install a merge tool which is compatible with Git to resolve the conflicts. I personally use KDiff3, and I've found it nice and handy. You can download its Windows version here:</source>
          <target state="translated">你需要安装一个与Git兼容的合并工具来解决冲突。我个人用的是KDiff3,我发现它很好用,也很方便。你可以在这里下载它的Windows版本。</target>
        </trans-unit>
        <trans-unit id="434d4f50f345ed0c2068ebd627e18730e17b1cea" translate="yes" xml:space="preserve">
          <source>You're going to pull some changes, but oops, you're not up to date:</source>
          <target state="translated">你要拉一些改动,但哎呀,你还没跟上。</target>
        </trans-unit>
        <trans-unit id="702de8ea769f6905593d16855500a2a2250467e0" translate="yes" xml:space="preserve">
          <source>[Update - as time has passed I've switched more to:</source>
          <target state="translated">[更新----随着时间的推移,我更多的是换成了:</target>
        </trans-unit>
        <trans-unit id="f262650e9e1db8dba57ae4f90e12681210514be8" translate="yes" xml:space="preserve">
          <source>a) All new/changed files get added and that might include some unwanted changes.</source>
          <target state="translated">a)所有新修改的文件都会被添加,这可能包括一些不需要的修改。</target>
        </trans-unit>
        <trans-unit id="d8f51ea63fa8dabc79021e3ac41153644af4867d" translate="yes" xml:space="preserve">
          <source>and after finishing a file, you will have to save and close, so the next one will open.</source>
          <target state="translated">并在完成一个文件后,要保存并关闭,那么下一个就会打开。</target>
        </trans-unit>
        <trans-unit id="d11a6901ad3dd341ac6dec5ff43994226ec32610" translate="yes" xml:space="preserve">
          <source>and in the other</source>
          <target state="translated">而在另一个</target>
        </trans-unit>
        <trans-unit id="8af7458f49d10ad26c59eed720fbe89d311a8e8a" translate="yes" xml:space="preserve">
          <source>b) You don't get to review the file list first.</source>
          <target state="translated">b)你不能先审查文件清单。</target>
        </trans-unit>
        <trans-unit id="761e2de83a662b85af44b187e5329eda0d6cc296" translate="yes" xml:space="preserve">
          <source>because pull implies a merge and if you have changes locally that you didn't want merged you can easily end up with merged code and/or merge conflicts for code that shouldn't have been merged.</source>
          <target state="translated">因为pull意味着合并,如果你在本地有不希望合并的改动,你很容易导致合并后的代码和不应该合并的代码发生冲突。</target>
        </trans-unit>
        <trans-unit id="1d9e48cd581ca4bff14e812e60b255593b08a1f2" translate="yes" xml:space="preserve">
          <source>ctrl</source>
          <target state="translated">ctrl</target>
        </trans-unit>
        <trans-unit id="951f120ff31d9ffa4990456740576c71f454fd6f" translate="yes" xml:space="preserve">
          <source>followed by</source>
          <target state="translated">其次是</target>
        </trans-unit>
        <trans-unit id="84d20a21b4d0ddce218ad7c73b3cd55f875524fe" translate="yes" xml:space="preserve">
          <source>git add</source>
          <target state="translated">git add</target>
        </trans-unit>
        <trans-unit id="10103c8447d37408c54fd2f05b61beb2106dbe2c" translate="yes" xml:space="preserve">
          <source>git add . AND git commit AND git push (on your local branch after your changes)</source>
          <target state="translated">git add .and git commit AND git commit AND git push (在你的本地分支上做完修改后,在你的本地分支上)</target>
        </trans-unit>
        <trans-unit id="97a35b07063385f6e4f744ee2072932e6c998999" translate="yes" xml:space="preserve">
          <source>git branch, fork, fetch, merge, rebase and clone, what are the differences?</source>
          <target state="translated">git分支、fork、fetch、merge、rebase和clone,有什么区别?</target>
        </trans-unit>
        <trans-unit id="acdbee7f26e843e5752461c1e69b28c077726557" translate="yes" xml:space="preserve">
          <source>git checkout -b mybranch (Checkout a new a branch and start working on that branch so that your master always remains top of trunk.)</source>
          <target state="translated">git checkout -b mybranch (检查出一个新的分支,然后开始在该分支上工作,这样你的主干就会始终保持在树干的顶部。)</target>
        </trans-unit>
        <trans-unit id="8dacaca6254212f6c1b95c243fac496f957d68fd" translate="yes" xml:space="preserve">
          <source>git checkout &lt;strong&gt;your branch&lt;/strong&gt;</source>
          <target state="translated">git结帐&lt;strong&gt;您的分支&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2664b948d9b5e7add8ed204bae0397137605164e" translate="yes" xml:space="preserve">
          <source>git checkout master (Come back to your master.)</source>
          <target state="translated">git结账大师(回过头来找主人</target>
        </trans-unit>
        <trans-unit id="389878c8eec9e6eeeaf853870f869d492ebf1da1" translate="yes" xml:space="preserve">
          <source>git checkout master (Come to the master branch)</source>
          <target state="translated">git checkout master(来到主分支)</target>
        </trans-unit>
        <trans-unit id="c1431e6a9b5c4d41e1866a32209e9ec5716cab6c" translate="yes" xml:space="preserve">
          <source>git checkout target_branch</source>
          <target state="translated">git checkout target_branch</target>
        </trans-unit>
        <trans-unit id="811a2036a9fa0acad088e97ae90bc7238103c1c2" translate="yes" xml:space="preserve">
          <source>git commit --amend</source>
          <target state="translated">提交</target>
        </trans-unit>
        <trans-unit id="7652ed4e9782162856d4648e8895b3387d9f68e6" translate="yes" xml:space="preserve">
          <source>git fetch</source>
          <target state="translated">git fetch</target>
        </trans-unit>
        <trans-unit id="18213e1f2a603f93f7ce5af7c44200e84b562957" translate="yes" xml:space="preserve">
          <source>git merge source_branch</source>
          <target state="translated">git merge source_branch</target>
        </trans-unit>
        <trans-unit id="503fbe5dbd88ba93126e84d902ed6c73cb283de3" translate="yes" xml:space="preserve">
          <source>git pull (Update your master to get the latest code)</source>
          <target state="translated">git pull (更新你的主程序,以获得最新的代码)</target>
        </trans-unit>
        <trans-unit id="6c664ccf46e6763b8b96abeb86d1c050dc32ed1b" translate="yes" xml:space="preserve">
          <source>git push origin HEAD:refs/drafts/master  (push like a drafts)</source>
          <target state="translated">git push origin HEAD:refsdraftsmaster (push like a drafts)</target>
        </trans-unit>
        <trans-unit id="b5ac89e12759c8756542b31c467362aa3d963acf" translate="yes" xml:space="preserve">
          <source>git rebase --continue</source>
          <target state="translated">git rebase ---continue</target>
        </trans-unit>
        <trans-unit id="094cbd5065890d847d3c0dc1805f140ff1396ad9" translate="yes" xml:space="preserve">
          <source>git rebase master</source>
          <target state="translated">git rebase主站</target>
        </trans-unit>
        <trans-unit id="5c2dd944dde9e08881bef0894fe7b22a5c9c4b06" translate="yes" xml:space="preserve">
          <source>j</source>
          <target state="translated">j</target>
        </trans-unit>
        <trans-unit id="cd6fdcbf5a860d174ac10af745972501941dc684" translate="yes" xml:space="preserve">
          <source>macOS</source>
          <target state="translated">macOS</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">or</target>
        </trans-unit>
        <trans-unit id="431e26c1c98728d02fcb3684df3869849e02bd8a" translate="yes" xml:space="preserve">
          <source>shows all files which require conflict resolution.</source>
          <target state="translated">显示所有需要解决冲突的文件。</target>
        </trans-unit>
        <trans-unit id="d365548fc7381a5f7a04540a4a2854c3130d9c18" translate="yes" xml:space="preserve">
          <source>to accept change from left or right</source>
          <target state="translated">左右逢源</target>
        </trans-unit>
        <trans-unit id="834cd3a249a98dcc416499afdc5d38f6bee07ab1" translate="yes" xml:space="preserve">
          <source>to finish the merge.</source>
          <target state="translated">以完成合并。</target>
        </trans-unit>
        <trans-unit id="c3b50f2456638fa4af5346e46e1aa31547e3b122" translate="yes" xml:space="preserve">
          <source>to jump to previous/next changes.</source>
          <target state="translated">跳转到上一个下一个变化。</target>
        </trans-unit>
        <trans-unit id="9fdbaee88f3bdf6029a899cfe02d702e1ba2d855" translate="yes" xml:space="preserve">
          <source>to resolve changes in favor of the &lt;strong&gt;other or the main repository&lt;/strong&gt;.</source>
          <target state="translated">解决有利于&lt;strong&gt;其他或主要存储库的&lt;/strong&gt;变更。</target>
        </trans-unit>
        <trans-unit id="744a6e5be1804b7157ee48c402c528b472bce458" translate="yes" xml:space="preserve">
          <source>to resolve changes in the favor of &lt;strong&gt;your repository&lt;/strong&gt;, or</source>
          <target state="translated">解决有利于&lt;strong&gt;您的存储库的&lt;/strong&gt;更改，或者</target>
        </trans-unit>
        <trans-unit id="aff024fe4ab0fece4091de044c58c9ae4233383a" translate="yes" xml:space="preserve">
          <source>w</source>
          <target state="translated">w</target>
        </trans-unit>
        <trans-unit id="aa4da17c46bbc043e6803b9d9522d18404b1395f" translate="yes" xml:space="preserve">
          <source>where HEAD is changes on your local branch and origin/ is changes from the remote branch. Here keep the stuff that you need and remove the stuff you don't need.After that the normal steps should do. That is</source>
          <target state="translated">其中head是本地分支的变化,origin是远程分支的变化。这里保留你需要的东西,然后删除不需要的东西。这就是</target>
        </trans-unit>
        <trans-unit id="bdc9da0d0104e6a64e5550c899831ed0af155617" translate="yes" xml:space="preserve">
          <source>⌘</source>
          <target state="translated">⌘</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
