<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/1602934">
    <body>
      <group id="1602934">
        <trans-unit id="591133f53078cffc847dc0eb75e14301e71ff3a1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://docs.python.org/reference/expressions.html#membership-test-operations&quot;&gt;&lt;code&gt;in&lt;/code&gt;&lt;/a&gt; is the intended way to test for the existence of a key in a &lt;a href=&quot;https://docs.python.org/library/stdtypes.html#dict&quot;&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/reference/expressions.html#membership-test-operations&quot;&gt; &lt;code&gt;in&lt;/code&gt; &lt;/a&gt;是测试&lt;a href=&quot;https://docs.python.org/library/stdtypes.html#dict&quot;&gt; &lt;code&gt;dict&lt;/code&gt; &lt;/a&gt;密钥是否存在的预期方法。</target>
        </trans-unit>
        <trans-unit id="6963ef6ef133fe63667bae98c4e406849bc2b0b0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://stackoverflow.com/questions/1835756/using-try-vs-if-in-python&quot;&gt;Using try vs if in python&lt;/a&gt; or</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/questions/1835756/using-try-vs-if-in-python&quot;&gt;在python中使用try vs if&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="37b6a58bff6459d250b5618cc7f15d7cf23b5741" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'key' in mydict&lt;/code&gt; elapsed time 1.07 sec</source>
          <target state="translated">&lt;code&gt;'key' in mydict&lt;/code&gt; 经过时间1.07秒</target>
        </trans-unit>
        <trans-unit id="fd392cfe1ec3c98a6d2529fdab4d41b86b354b19" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mydefaultdict['key']&lt;/code&gt; elapsed time 1.07 sec</source>
          <target state="translated">&lt;code&gt;mydefaultdict['key']&lt;/code&gt; 经过的时间1.07秒</target>
        </trans-unit>
        <trans-unit id="b29aa702799125fbd0589e7ef5d2e064481139d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mydict.get('key')&lt;/code&gt; elapsed time 1.84 sec</source>
          <target state="translated">&lt;code&gt;mydict.get('key')&lt;/code&gt; 经过的时间1.84秒</target>
        </trans-unit>
        <trans-unit id="f6212b6b8989c362a666b41eb2f00aad1c711918" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Explanation&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Explanation&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6dbbced910ce854ef29e677d7d9fe10e6bc54a9e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The ways in which you can get the results are:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;获得结果的方式是：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="25c6f0ca130fb1ad84b8dd117a322ea04fa9daa0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Which is better is dependent on 3 things:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;哪个更好取决于三个因素：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2a5f8bb504046f62fd121ff29978b6d94fa221f7" translate="yes" xml:space="preserve">
          <source>A common use for checking the existence of a key in a dictionary before mutating it is to default-initialize the value (e.g. if your values are lists, for example, and you want to ensure that there is an empty list to which you can append when inserting the first value for a key). In cases such as those, you may find the &lt;a href=&quot;https://docs.python.org/2/library/collections.html#collections.defaultdict&quot;&gt;&lt;code&gt;collections.defaultdict()&lt;/code&gt;&lt;/a&gt; type to be of interest.</source>
          <target state="translated">更改字典之前，在字典中检查键是否存在的常见用途是对值进行默认初始化（例如，如果您的值是列表，并且您想确保可以在其后附加一个空列表）在插入键的第一个值时）。 在这种情况下，您可能会发现有意思的&lt;a href=&quot;https://docs.python.org/2/library/collections.html#collections.defaultdict&quot;&gt; &lt;code&gt;collections.defaultdict()&lt;/code&gt; &lt;/a&gt;类型。</target>
        </trans-unit>
        <trans-unit id="986783231c059d9ed27a2c92fbece3a44392d398" translate="yes" xml:space="preserve">
          <source>But if we switch the order &lt;code&gt;1/0&lt;/code&gt; is evaluated first and raises an exception:</source>
          <target state="translated">但是，如果我们切换顺序 &lt;code&gt;1/0&lt;/code&gt; ,则会首先对其求值并引发异常：</target>
        </trans-unit>
        <trans-unit id="db389597cb0d96c4bc635cdf63b287dc51ef4eee" translate="yes" xml:space="preserve">
          <source>Check if a given key already exists in a dictionary</source>
          <target state="translated">检查字典中是否已经存在一个给定的密钥</target>
        </trans-unit>
        <trans-unit id="3394968f476faed3131c00e48a0c1e7a6b9f966a" translate="yes" xml:space="preserve">
          <source>Checking for member existence in Python</source>
          <target state="translated">在Python中检查成员是否存在</target>
        </trans-unit>
        <trans-unit id="d85116e736c56c2c067bdfa4d989248051196be9" translate="yes" xml:space="preserve">
          <source>Dictionary in python has a get('key', default) method. So you can just set a default value in case there is no key.</source>
          <target state="translated">python中的字典有一个get('key',default)方法。所以在没有key的情况下,你可以直接设置一个默认值。</target>
        </trans-unit>
        <trans-unit id="597258f905b6cbfadef9e590bf4094627436fcd4" translate="yes" xml:space="preserve">
          <source>Do you intend to use conditions like if...else...elseif...else?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45f145997d62a4abb975be326b0c4cc692e411f0" translate="yes" xml:space="preserve">
          <source>Does the dictionary 'normally has the key' or 'normally does not have the key'.</source>
          <target state="translated">词典上是'通常有钥匙'还是'通常没有钥匙'。</target>
        </trans-unit>
        <trans-unit id="ec93c8dd4fefc64c37ffb2971b2fb28f6625471a" translate="yes" xml:space="preserve">
          <source>First you should know that in Python, &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;None&lt;/code&gt;, or objects with zero length evaluate to &lt;code&gt;False&lt;/code&gt;. Everything else evaluates to &lt;code&gt;True&lt;/code&gt;. Boolean operations are evaluated left to right and return the operand not True or False.</source>
          <target state="translated">首先，您应该知道在Python中， &lt;code&gt;0&lt;/code&gt; ， &lt;code&gt;None&lt;/code&gt; 或长度为零的对象的值为 &lt;code&gt;False&lt;/code&gt; 。 其他所有结果都为 &lt;code&gt;True&lt;/code&gt; 。 布尔运算从左到右求值，并且返回的操作数不是True或False。</target>
        </trans-unit>
        <trans-unit id="7cb3c2b1adb4fd7a61c8aedca10b82c1b2246fc5" translate="yes" xml:space="preserve">
          <source>For additional info on speed execution of the accepted answer's proposed methods (10m loops):</source>
          <target state="translated">关于接受答案的建议方法(10m循环)的速度执行的其他信息。</target>
        </trans-unit>
        <trans-unit id="1f55b895719e821df4e24a8718fb9c2d6b3f0a02" translate="yes" xml:space="preserve">
          <source>How big is dictionary?</source>
          <target state="translated">字典有多大?</target>
        </trans-unit>
        <trans-unit id="44007472c1a02e9d9e51e304d75c2b7f0839aa16" translate="yes" xml:space="preserve">
          <source>However, this is at best a cosmetic improvement. Why do you believe this is not the best way?</source>
          <target state="translated">然而,这充其量也只是表面上的改善。为什么你认为这不是最好的方法呢?</target>
        </trans-unit>
        <trans-unit id="3eb163b93c81be2eb82b5902f369e06977660d2a" translate="yes" xml:space="preserve">
          <source>I think this is not the best way to accomplish this task. Is there a better way to test for a key in the dictionary?</source>
          <target state="translated">我想,这不是完成这个任务的最好方法。有没有更好的方法来考查字典里的关键?</target>
        </trans-unit>
        <trans-unit id="f19123e3b7e09f32bea0ab8fc1b66aec7f6582c3" translate="yes" xml:space="preserve">
          <source>I wanted to test if a key exists in a dictionary before updating the value for the key.
I wrote the following code:</source>
          <target state="translated">我想在更新该键的值之前,测试一个键是否存在于字典中。我写了以下代码。</target>
        </trans-unit>
        <trans-unit id="0ab009ba67ac8d9c77d1dca6bbfd97ddf9830903" translate="yes" xml:space="preserve">
          <source>I would recommend using the &lt;code&gt;setdefault&lt;/code&gt; method instead.  It sounds like it will do everything you want.</source>
          <target state="translated">我建议改用 &lt;code&gt;setdefault&lt;/code&gt; 方法。 听起来它将满足您的所有需求。</target>
        </trans-unit>
        <trans-unit id="7f8257c264f760967737186d45bc0e3ad7219721" translate="yes" xml:space="preserve">
          <source>If you wanted a default, you can always use &lt;a href=&quot;https://docs.python.org/library/stdtypes.html#dict.get&quot;&gt;&lt;code&gt;dict.get()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">如果要使用默认值，则可以始终使用&lt;a href=&quot;https://docs.python.org/library/stdtypes.html#dict.get&quot;&gt; &lt;code&gt;dict.get()&lt;/code&gt; &lt;/a&gt; ：</target>
        </trans-unit>
        <trans-unit id="57ddfb8843f832ad1bb60ea13075731e0f75356d" translate="yes" xml:space="preserve">
          <source>In older code, you may also find some uses of &lt;code&gt;has_key()&lt;/code&gt;, a deprecated method for checking the existence of keys in dictionaries (just use &lt;code&gt;key_name in dict_name&lt;/code&gt;, instead).</source>
          <target state="translated">在较早的代码中，您可能还会发现 &lt;code&gt;has_key()&lt;/code&gt; 的一些用法， has_key（）是一种不推荐使用的方法，用于检查字典中键的存在（仅 &lt;code&gt;key_name in dict_name&lt;/code&gt; 使用key_name ）。</target>
        </trans-unit>
        <trans-unit id="acf951feab09154bb41a958d736dbe4d074e6f27" translate="yes" xml:space="preserve">
          <source>Just an FYI adding to Chris. B (best answer):</source>
          <target state="translated">只是一个参考资料,补充到克里斯。B(最佳答案)。</target>
        </trans-unit>
        <trans-unit id="c6b2adcaea916728f52e79fb66215b5050684050" translate="yes" xml:space="preserve">
          <source>Leading that &lt;code&gt;get()&lt;/code&gt; method is not reliable in case some values may be &lt;code&gt;None&lt;/code&gt;.
This story should have a happier ending. If we use the &lt;code&gt;in&lt;/code&gt; comparator:</source>
          <target state="translated">如果某些值可能为 &lt;code&gt;None&lt;/code&gt; ,则导致 &lt;code&gt;get()&lt;/code&gt; 方法不可靠。 这个故事的结局应该更快乐。 如果我们使用 &lt;code&gt;in&lt;/code&gt; 比较器：</target>
        </trans-unit>
        <trans-unit id="7be4a4f8fe8c136ea1812aa5ff5433b439cc6d5a" translate="yes" xml:space="preserve">
          <source>Let's see an example:</source>
          <target state="translated">我们来看一个例子。</target>
        </trans-unit>
        <trans-unit id="993d8f252026b3dea07d43c4267889099c7bd84f" translate="yes" xml:space="preserve">
          <source>Printing shows the key we don't have will return &lt;code&gt;None&lt;/code&gt;:</source>
          <target state="translated">打印显示我们没有的键将返回 &lt;code&gt;None&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="38f76c76e34de8eb1621bdb354a4c109e558159c" translate="yes" xml:space="preserve">
          <source>Python 2 only: (and python 2.7 supports &lt;code&gt;in&lt;/code&gt; already)</source>
          <target state="translated">仅限 &lt;code&gt;in&lt;/code&gt; Python 2 ：（并且python 2.7已支持）</target>
        </trans-unit>
        <trans-unit id="080797e8a082de132d48286d667c038b33d8e9d7" translate="yes" xml:space="preserve">
          <source>Python dictionary has the method called &lt;code&gt;__contains__&lt;/code&gt;. This method will return True if the dictionary has the key else returns False.</source>
          <target state="translated">Python字典具有称为 &lt;code&gt;__contains__&lt;/code&gt; 的方法。 如果字典具有键，则此方法将返回True，否则返回False。</target>
        </trans-unit>
        <trans-unit id="49610401a99726c011a79d7137edab7af0d3aab3" translate="yes" xml:space="preserve">
          <source>Read More: &lt;a href=&quot;http://paltman.com/try-except-performance-in-python-a-simple-test/&quot;&gt;http://paltman.com/try-except-performance-in-python-a-simple-test/&lt;/a&gt;</source>
          <target state="translated">了解更多： &lt;a href=&quot;http://paltman.com/try-except-performance-in-python-a-simple-test/&quot;&gt;http&lt;/a&gt; : //paltman.com/try-except-performance-in-python-a-simple-test/</target>
        </trans-unit>
        <trans-unit id="959839b5e07b00dff497613be230a572d05b3cd7" translate="yes" xml:space="preserve">
          <source>See other SO posts:</source>
          <target state="translated">见其他SO的帖子。</target>
        </trans-unit>
        <trans-unit id="0833f8d908412fdbaea4b03ab31dbc79c781e880" translate="yes" xml:space="preserve">
          <source>Sharing one more way of checking if a key exists using boolean operators.</source>
          <target state="translated">分享一种使用布尔运算符检查密钥是否存在的方法。</target>
        </trans-unit>
        <trans-unit id="9f9da45eb445a1f8a9232e3da98c666643520ad1" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;'Some string'&lt;/code&gt; evaluates to &lt;code&gt;True&lt;/code&gt;, the rest of the &lt;code&gt;or&lt;/code&gt; is not evaluated and there is no division by zero error raised.</source>
          <target state="translated">由于 &lt;code&gt;'Some string'&lt;/code&gt; 求值为 &lt;code&gt;True&lt;/code&gt; ，其余的 &lt;code&gt;or&lt;/code&gt; 不求值，并且不存在除以零的错误。</target>
        </trans-unit>
        <trans-unit id="81600a48b25d678645efb38986980180321afdda" translate="yes" xml:space="preserve">
          <source>That will be much &lt;a href=&quot;https://stackoverflow.com/a/30527984/452708&quot;&gt;faster&lt;/a&gt; as it uses the dictionary's hashing as opposed to doing a linear search, which calling keys would do.</source>
          <target state="translated">这将&lt;a href=&quot;https://stackoverflow.com/a/30527984/452708&quot;&gt;更快，&lt;/a&gt;因为它使用字典的哈希而不是进行线性搜索（调用键可以做到）。</target>
        </trans-unit>
        <trans-unit id="bcb8d1e6235c48f2b9fc10152fef4fe7a0107f3f" translate="yes" xml:space="preserve">
          <source>The brutal method to check if the key already exists may be the &lt;code&gt;get()&lt;/code&gt; method:</source>
          <target state="translated">检查密钥是否已存在的残酷方法可能是 &lt;code&gt;get()&lt;/code&gt; 方法：</target>
        </trans-unit>
        <trans-unit id="b8af6196482458212eb3bbdeb73e052d378f1c8a" translate="yes" xml:space="preserve">
          <source>The other two &lt;em&gt;interesting&lt;/em&gt; methods &lt;code&gt;items()&lt;/code&gt; and &lt;code&gt;keys()&lt;/code&gt; sounds like too much of work. So let's examine if &lt;code&gt;get()&lt;/code&gt; is the right method for us. We have our dict &lt;code&gt;d&lt;/code&gt;:</source>
          <target state="translated">其他两个&lt;em&gt;有趣的&lt;/em&gt;方法 &lt;code&gt;items()&lt;/code&gt; 和 &lt;code&gt;keys()&lt;/code&gt; 听起来工作量太大。 因此，让我们检查一下 &lt;code&gt;get()&lt;/code&gt; 是否适合我们。 我们有dict &lt;code&gt;d&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="2515071735ea713c92dc72d142b87e9dc2f70cb7" translate="yes" xml:space="preserve">
          <source>Therefore using &lt;code&gt;in&lt;/code&gt; or &lt;code&gt;defaultdict&lt;/code&gt; are recommended against &lt;code&gt;get&lt;/code&gt;.</source>
          <target state="translated">因此 &lt;code&gt;in&lt;/code&gt; 建议针对in使用in或 &lt;code&gt;defaultdict&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="32f82939a7bf703c0f0f37c6aeb1bb86ba05c657" translate="yes" xml:space="preserve">
          <source>This already returns the correct result if the key exists, but we want it to print 'boo' when it doesn't. So, we take the result and &lt;code&gt;or&lt;/code&gt; it with &lt;code&gt;'boo'&lt;/code&gt;</source>
          <target state="translated">如果键存在，这已经返回了正确的结果，但是我们希望它在不存在时打印&amp;ldquo; boo&amp;rdquo;。 因此，我们将结果与 &lt;code&gt;'boo'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0da9aa61c73d25f489970427f2fef58028ae1332" translate="yes" xml:space="preserve">
          <source>This returns</source>
          <target state="translated">这将返回</target>
        </trans-unit>
        <trans-unit id="21c7fc5c32908dd98a28d125a39c2e97f43e40c3" translate="yes" xml:space="preserve">
          <source>This shows that &lt;code&gt;in&lt;/code&gt; compare operator is not just more reliable but even faster than &lt;code&gt;get()&lt;/code&gt;.</source>
          <target state="translated">这表明 &lt;code&gt;in&lt;/code&gt; compare运算符中，它不仅比 &lt;code&gt;get()&lt;/code&gt; 更加可靠，而且甚至更快。</target>
        </trans-unit>
        <trans-unit id="784a92c5855dcd7bc19f620b812fc2a93c5f4d9c" translate="yes" xml:space="preserve">
          <source>To get the idea how to do that we first inspect what methods we can call on dictionary. 
Here are the methods:</source>
          <target state="translated">为了了解如何做,我们首先检查一下我们可以在字典上调用哪些方法。下面是这些方法。</target>
        </trans-unit>
        <trans-unit id="f0e6cbf4ab0d570d019e9935381dd23e4e25aeb3" translate="yes" xml:space="preserve">
          <source>Use of try/block instead of 'in' or 'if':</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd538b76338c3923d174ce59c61689b16b2b7666" translate="yes" xml:space="preserve">
          <source>Using ternary operator:</source>
          <target state="translated">使用三元运算器。</target>
        </trans-unit>
        <trans-unit id="4b8581247344e93f156dff6ff29725a4fd4c9abb" translate="yes" xml:space="preserve">
          <source>We &lt;strike&gt;may&lt;/strike&gt; use that to get the info if the key is present or no.
But consider this if we create a dict with a single &lt;code&gt;key:None&lt;/code&gt;:</source>
          <target state="translated">如果密钥存在或不存在，我们&lt;strike&gt;可能会&lt;/strike&gt;用它来获取信息。 但是如果我们用一个 &lt;code&gt;key:None&lt;/code&gt; 创建一个字典，请考虑一下：无 ：</target>
        </trans-unit>
        <trans-unit id="7553a658793106d4d6cddd5b9191049f46bd231c" translate="yes" xml:space="preserve">
          <source>We can use this for pattern for checking if a key exists.</source>
          <target state="translated">我们可以用这个来做为模式,检查一个键是否存在。</target>
        </trans-unit>
        <trans-unit id="e6a10209f0453ba456711a491938cc4be7a0cfbe" translate="yes" xml:space="preserve">
          <source>We get the correct results.
We may examine the Python byte code:</source>
          <target state="translated">我们得到的结果是正确的。我们可以考察一下Python的字节码。</target>
        </trans-unit>
        <trans-unit id="f2238e9d8603a636e603f54f0a3a44b2fd4a4444" translate="yes" xml:space="preserve">
          <source>What about using EAFP (easier to ask forgiveness than permission):</source>
          <target state="translated">使用EAFP怎么样(请求宽恕比允许更容易)。</target>
        </trans-unit>
        <trans-unit id="b04b9520c2509e7702cdd5d418566569a968c827" translate="yes" xml:space="preserve">
          <source>Works as well; the reason is that calling &lt;code&gt;int()&lt;/code&gt; returns &lt;code&gt;0&lt;/code&gt; which is what &lt;code&gt;defaultdict&lt;/code&gt; does behind the scenes (when constructing a dictionary), hence the name &quot;Factory Function&quot; in the documentation.</source>
          <target state="translated">也可以； 原因是调用 &lt;code&gt;int()&lt;/code&gt; 返回 &lt;code&gt;0&lt;/code&gt; ，这是 &lt;code&gt;defaultdict&lt;/code&gt; 在后台（构造字典时）所做的事情，因此在文档中名称为&amp;ldquo; Factory Function&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="520e8e00a3b3d87e7647d8bcea9edffedf68d4f2" translate="yes" xml:space="preserve">
          <source>You can shorten this:</source>
          <target state="translated">你可以把这个缩短。</target>
        </trans-unit>
        <trans-unit id="9ed54184f5a6ef98cc59b61b34b4cb0ced213ea7" translate="yes" xml:space="preserve">
          <source>You can test for the presence of a key in a dictionary, using the &lt;b&gt;in&lt;/b&gt; keyword:</source>
          <target state="translated">您可以使用&lt;b&gt;in&lt;/b&gt;关键字测试字典中是否存在键：</target>
        </trans-unit>
        <trans-unit id="65dfdbf567991222587b5a44ca8a9c9ed717131c" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;for&lt;/code&gt; loop to iterate over the dictionary and get the name of key you want to find in the dictionary, after that check if it exist or not using &lt;code&gt;if&lt;/code&gt; condition:</source>
          <target state="translated">您可以使用 &lt;code&gt;for&lt;/code&gt; 循环遍历字典并获取要在字典中找到的键的名称，然后使用 &lt;code&gt;if&lt;/code&gt; 条件检查它是否存在：</target>
        </trans-unit>
        <trans-unit id="64db6e76183d314faddc5c2fc7cf9a2d4a26c2ba" translate="yes" xml:space="preserve">
          <source>You don't have to call keys:</source>
          <target state="translated">你不需要叫钥匙。</target>
        </trans-unit>
        <trans-unit id="c170f5dffece2e3429d2c4755d32ab7c1e743125" translate="yes" xml:space="preserve">
          <source>and if you wanted to always ensure a default value for any key you can either use &lt;a href=&quot;https://docs.python.org/library/stdtypes.html#dict.setdefault&quot;&gt;&lt;code&gt;dict.setdefault()&lt;/code&gt;&lt;/a&gt; repeatedly or &lt;a href=&quot;https://docs.python.org/library/collections.html#collections.defaultdict&quot;&gt;&lt;code&gt;defaultdict&lt;/code&gt;&lt;/a&gt; from the &lt;a href=&quot;https://docs.python.org/library/collections.html&quot;&gt;&lt;code&gt;collections&lt;/code&gt;&lt;/a&gt; module, like so:</source>
          <target state="translated">如果您想始终确保任何键的默认值，则可以重复使用&lt;a href=&quot;https://docs.python.org/library/stdtypes.html#dict.setdefault&quot;&gt; &lt;code&gt;dict.setdefault()&lt;/code&gt; &lt;/a&gt;或从&lt;a href=&quot;https://docs.python.org/library/collections.html&quot;&gt; &lt;code&gt;collections&lt;/code&gt; &lt;/a&gt;模块使用&lt;a href=&quot;https://docs.python.org/library/collections.html#collections.defaultdict&quot;&gt; &lt;code&gt;defaultdict&lt;/code&gt; &lt;/a&gt; ，如下所示：</target>
        </trans-unit>
        <trans-unit id="ae1363255c883a43efc82e3f7cd7da252ef14831" translate="yes" xml:space="preserve">
          <source>but in general, the &lt;code&gt;in&lt;/code&gt; keyword is the best way to do it.</source>
          <target state="translated">但通常， &lt;code&gt;in&lt;/code&gt; 关键字是执行此操作的最佳方法。</target>
        </trans-unit>
        <trans-unit id="a588f054b06e774ef540898967245cf42a31de55" translate="yes" xml:space="preserve">
          <source>does the same as</source>
          <target state="translated">一样</target>
        </trans-unit>
        <trans-unit id="666c6917b6725a9873afc00e1a7d06a7735106bb" translate="yes" xml:space="preserve">
          <source>if key in your_dict</source>
          <target state="translated">if key in your_dict</target>
        </trans-unit>
        <trans-unit id="586132887331bf673c22801c8949d0629ccede8a" translate="yes" xml:space="preserve">
          <source>if your_dict.has_key(key) &lt;a href=&quot;https://docs.python.org/3.1/whatsnew/3.0.html#builtins&quot;&gt;Removed in Python 3&lt;/a&gt;</source>
          <target state="translated">如果your_dict.has_key（key） &lt;a href=&quot;https://docs.python.org/3.1/whatsnew/3.0.html#builtins&quot;&gt;在Python 3中删除&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="efd3e0cfee814627e24cdcfb5f19dda53a7728b7" translate="yes" xml:space="preserve">
          <source>try/except block</source>
          <target state="translated">拒之门外</target>
        </trans-unit>
        <trans-unit id="c518722a87413e94197bd3998aa67b5f598adede" translate="yes" xml:space="preserve">
          <source>you can use the has_key() method:</source>
          <target state="translated">你可以使用has_key()方法。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
