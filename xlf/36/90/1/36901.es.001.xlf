<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/36901">
    <body>
      <group id="36901">
        <trans-unit id="c4923479209994d522d1740b7cd3097f3afa7e4b" translate="yes" xml:space="preserve">
          <source>'*' operator unpacks data structure such as a list or tuple  into arguments needed by function definition.</source>
          <target state="translated">El operador &quot;*&quot; descompone la estructura de datos,como una lista o una tupla,en los argumentos necesarios para la definición de la función.</target>
        </trans-unit>
        <trans-unit id="74a58a15f76f4145555ab65613e710dee0aaca7d" translate="yes" xml:space="preserve">
          <source>'**' operator unpacks a dictionary into arguments needed by function definition.</source>
          <target state="translated">El operador '**' desempaqueta un diccionario con los argumentos necesarios para la definición de la función.</target>
        </trans-unit>
        <trans-unit id="f6b359d1865f19eb9d426f416d514730a67eccfc" translate="yes" xml:space="preserve">
          <source>(Thanks to mgilson for the PEP link.)</source>
          <target state="translated">(Gracias a mgilson por el enlace PEP.)</target>
        </trans-unit>
        <trans-unit id="1b2bdd544173f0325e186a3d408936d76a7cd87a" translate="yes" xml:space="preserve">
          <source>* can also unpack a &lt;strong&gt;generator&lt;/strong&gt;</source>
          <target state="translated">* tambi&amp;eacute;n puede desempaquetar un &lt;strong&gt;generador&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="02de2d002252b3da90ad05f886293cf0484ac3b0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;**&lt;/code&gt; is exclusively reserved for dictionaries.</source>
          <target state="translated">&lt;code&gt;**&lt;/code&gt; est&amp;aacute; reservado exclusivamente para diccionarios.</target>
        </trans-unit>
        <trans-unit id="2cf326c516844f4113fcb75fd6abb41f6827695c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;**&lt;/code&gt; means receive variable arguments as dictionary</source>
          <target state="translated">&lt;code&gt;**&lt;/code&gt; significa recibir argumentos variables como diccionario</target>
        </trans-unit>
        <trans-unit id="ea91a0e8fbc5ce9fc1d1887ac061d90237e80a67" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;**kwargs&lt;/code&gt; allows for any number of optional keyword arguments (parameters), which will be in a dict named &lt;code&gt;kwargs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;**kwargs&lt;/code&gt; permite cualquier cantidad de argumentos opcionales de palabras clave (par&amp;aacute;metros), que estar&amp;aacute;n en un dict llamado &lt;code&gt;kwargs&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d80585a56779acc5b0ad3eb5b9e73d9ef7e74bfe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;**kwargs&lt;/code&gt; allows you to pass keyworded variable length of arguments to a function. You should use &lt;code&gt;**kwargs&lt;/code&gt; if you want to handle named arguments in a function.</source>
          <target state="translated">&lt;code&gt;**kwargs&lt;/code&gt; le permite pasar argumentos de longitud variable de palabras clave a una funci&amp;oacute;n. Debe usar &lt;code&gt;**kwargs&lt;/code&gt; si desea manejar argumentos con nombre en una funci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="dc450e8410bb5b81c3faf57ca5dfbdb36fe0c4d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;*&lt;/code&gt; and &lt;code&gt;**&lt;/code&gt; have special usage in the function argument list. &lt;code&gt;*&lt;/code&gt;
implies that the argument is a list and &lt;code&gt;**&lt;/code&gt; implies that the argument
is a dictionary. This allows functions to take arbitrary number of
arguments</source>
          <target state="translated">&lt;code&gt;*&lt;/code&gt; y &lt;code&gt;**&lt;/code&gt; tienen un uso especial en la lista de argumentos de la funci&amp;oacute;n. &lt;code&gt;*&lt;/code&gt; implica que el argumento es una lista e &lt;code&gt;**&lt;/code&gt; implica que el argumento es un diccionario. Esto permite que las funciones tomen un n&amp;uacute;mero arbitrario de argumentos</target>
        </trans-unit>
        <trans-unit id="646e6f68fc6fc0f172910b7ae53e333ccdbdf675" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;*&lt;/code&gt; means receive variable arguments as tuple</source>
          <target state="translated">&lt;code&gt;*&lt;/code&gt; significa recibir argumentos variables como tupla</target>
        </trans-unit>
        <trans-unit id="d4541b9e96a6ad3672a7c02ad538b463d7bbae10" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;*args&lt;/code&gt; (typically said &quot;star-args&quot;) and &lt;code&gt;**kwargs&lt;/code&gt; (stars can be implied by saying &quot;kwargs&quot;, but be explicit with &quot;double-star kwargs&quot;) are common idioms of Python for using the &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;**&lt;/code&gt; notation. These specific variable names aren't required (e.g. you could use &lt;code&gt;*foos&lt;/code&gt; and &lt;code&gt;**bars&lt;/code&gt;), but a departure from convention is likely to enrage your fellow Python coders.</source>
          <target state="translated">&lt;code&gt;*args&lt;/code&gt; (generalmente se dice &quot;star-args&quot;) y &lt;code&gt;**kwargs&lt;/code&gt; (las estrellas pueden ser impl&amp;iacute;citas al decir &quot;kwargs&quot;, pero sea expl&amp;iacute;cito con &quot;double-star kwargs&quot;) son expresiones comunes de Python para usar la notaci&amp;oacute;n &lt;code&gt;*&lt;/code&gt; y &lt;code&gt;**&lt;/code&gt; . Estos nombres de variables espec&amp;iacute;ficos no son obligatorios (por ejemplo, podr&amp;iacute;a usar &lt;code&gt;*foos&lt;/code&gt; y &lt;code&gt;**bars&lt;/code&gt; ), pero es probable que una desviaci&amp;oacute;n de la convenci&amp;oacute;n enfurezca a sus codificadores de Python.</target>
        </trans-unit>
        <trans-unit id="000a612bbb899711b6d999e67117df15d720c4f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;*args&lt;/code&gt; allows for any number of optional positional arguments (parameters), which will be assigned to a tuple named &lt;code&gt;args&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;*args&lt;/code&gt; permite cualquier n&amp;uacute;mero de argumentos posicionales opcionales (par&amp;aacute;metros), que se asignar&amp;aacute;n a una tupla llamada &lt;code&gt;args&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a21e58e874efd5d5471e19924132aa39fd60ecd4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;*args&lt;/code&gt; and &lt;code&gt;**kwargs&lt;/code&gt;: allow you to pass a variable number of arguments to a function.</source>
          <target state="translated">&lt;code&gt;*args&lt;/code&gt; y &lt;code&gt;**kwargs&lt;/code&gt; : le permiten pasar un n&amp;uacute;mero variable de argumentos a una funci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="c11b9a4bbc515b4b84ebc72faf0f618df2cf435e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;*args&lt;/code&gt;: is used to send a non-keyworded variable length argument list to the function:</source>
          <target state="translated">&lt;code&gt;*args&lt;/code&gt; : se usa para enviar una lista de argumentos de longitud variable sin palabras clave a la funci&amp;oacute;n:</target>
        </trans-unit>
        <trans-unit id="cd293480f3802120e494ecb797df550cbc0da842" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bar(100)&lt;/code&gt; prints:</source>
          <target state="translated">&lt;code&gt;bar(100)&lt;/code&gt; imprime:</target>
        </trans-unit>
        <trans-unit id="2b19bee1d5c998645875739dbaa2f77f25bdfd4a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;def bar(param1, **param2):&lt;/code&gt; is a method can accept arbitrary number of values with keys for &lt;code&gt;*param2&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;def bar(param1, **param2):&lt;/code&gt; es un m&amp;eacute;todo que puede aceptar un n&amp;uacute;mero arbitrario de valores con claves para &lt;code&gt;*param2&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fa9db175acae07bc148fd8a18e1d86066bfbe76a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;def foo(param1, *param2):&lt;/code&gt; is a method can accept arbitrary number of values for &lt;code&gt;*param2&lt;/code&gt;,</source>
          <target state="translated">&lt;code&gt;def foo(param1, *param2):&lt;/code&gt; es un m&amp;eacute;todo que puede aceptar un n&amp;uacute;mero arbitrario de valores para &lt;code&gt;*param2&lt;/code&gt; ,</target>
        </trans-unit>
        <trans-unit id="d457e800acd00734cfb232f7d555b2be33e3a422" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;param1&lt;/code&gt; is a simple parameter.</source>
          <target state="translated">&lt;code&gt;param1&lt;/code&gt; es un par&amp;aacute;metro simple.</target>
        </trans-unit>
        <trans-unit id="b83429dc7d3f741551503d2152003ebd8a2a0d36" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;1) single *&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;1) soltero *&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dbc1a1b748546fc5fee7f5a2eb2a422aaa998044" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;2) Now &lt;code&gt;**&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;2) Ahora &lt;code&gt;**&lt;/code&gt; &lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ad4ca10d4f8dfe916ff3af0ee489a423135bb817" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;BONUS:&lt;/strong&gt; From python 3.8 onward, one can use &lt;code&gt;/&lt;/code&gt; in function definition to enforce  positional only parameters. In the following example, parameters a and b are &lt;strong&gt;positional-only&lt;/strong&gt;, while c or d can be positional or keyword, and e or f are required to be keywords:</source>
          <target state="translated">&lt;strong&gt;BONIFICACI&amp;Oacute;N:&lt;/strong&gt; desde Python 3.8 en adelante, uno puede usar &lt;code&gt;/&lt;/code&gt; en la definici&amp;oacute;n de funciones para imponer par&amp;aacute;metros solo posicionales. En el siguiente ejemplo, los par&amp;aacute;metros a y b son &lt;strong&gt;solo posicionales&lt;/strong&gt; , mientras que c o d pueden ser posicionales o palabras clave, y se requiere que eof sean palabras clave:</target>
        </trans-unit>
        <trans-unit id="e5c53baf9a2776f02becbdc77ff91727f9331686" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 1&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Ejemplo 1&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9982a3d97a9090ed22f6a37e2cf0f2ae71f563db" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 2&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Ejemplo 2&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b72348d158a4f2c8789aa3aca14e843c932286c6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 3: practical usage in decorators&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Ejemplo 3: uso pr&amp;aacute;ctico en decoradores&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3ccfff51da82250c6945871fe29c0806ff574c48" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Output:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Output:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="284c0cc1c16634ee278d62d9da4d70563394d278" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;TL;DR&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;TL;DR&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="610c569442d4ee811a21008a245c9213c6a6ed47" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To accept any number of keyword arguments using &lt;code&gt;**kwargs&lt;/code&gt;:&lt;/strong&gt;&lt;code&gt;def foo(**kwargs): pass&lt;/code&gt;, here 'foo' accepts any number of keyword arguments, i. e., the following calls are valid &lt;code&gt;foo(name='Tom')&lt;/code&gt;, &lt;code&gt;foo(name='Tom', age=33)&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;Para aceptar cualquier n&amp;uacute;mero de argumentos de palabras clave usando &lt;code&gt;**kwargs&lt;/code&gt; :&lt;/strong&gt; &lt;code&gt;def foo(**kwargs): pass&lt;/code&gt; , aqu&amp;iacute; 'foo' acepta cualquier n&amp;uacute;mero de argumentos de palabras clave, es decir, las siguientes llamadas son v&amp;aacute;lidas &lt;code&gt;foo(name='Tom')&lt;/code&gt; , &lt;code&gt;foo(name='Tom', age=33)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b288f38f2636ab753bb7bef6bd186943d14ecacc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To accept any number of positional and keyword arguments using &lt;code&gt;*args, **kwargs&lt;/code&gt;:&lt;/strong&gt;&lt;code&gt;def foo(*args, **kwargs): pass&lt;/code&gt;, here &lt;code&gt;foo&lt;/code&gt; accepts any number of positional and keyword arguments, i. e., the following calls are valid &lt;code&gt;foo(1,name='Tom')&lt;/code&gt;, &lt;code&gt;foo(1, 'bar', name='Tom', age=33)&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;Para aceptar cualquier n&amp;uacute;mero de argumentos posicionales y de palabras clave utilizando &lt;code&gt;*args, **kwargs&lt;/code&gt; :&lt;/strong&gt; &lt;code&gt;def foo(*args, **kwargs): pass&lt;/code&gt; , aqu&amp;iacute; &lt;code&gt;foo&lt;/code&gt; acepta cualquier n&amp;uacute;mero de argumentos posicionales y de palabras clave, es decir, las siguientes llamadas son v&amp;aacute;lidas &lt;code&gt;foo(1,name='Tom')&lt;/code&gt; , &lt;code&gt;foo(1, 'bar', name='Tom', age=33)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fdbf64b072553f800b4d1528b6368138ca2c56ab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To accept any number of positional arguments using &lt;code&gt;*args&lt;/code&gt;:&lt;/strong&gt;&lt;code&gt;def foo(*args): pass&lt;/code&gt;, here &lt;code&gt;foo&lt;/code&gt; accepts any number of positional arguments, i. e., the following calls are valid &lt;code&gt;foo(1)&lt;/code&gt;, &lt;code&gt;foo(1, 'bar')&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;Para aceptar cualquier n&amp;uacute;mero de argumentos posicionales usando &lt;code&gt;*args&lt;/code&gt; :&lt;/strong&gt; &lt;code&gt;def foo(*args): pass&lt;/code&gt; , aqu&amp;iacute; &lt;code&gt;foo&lt;/code&gt; acepta cualquier n&amp;uacute;mero de argumentos posicionales, es decir, las siguientes llamadas son v&amp;aacute;lidas &lt;code&gt;foo(1)&lt;/code&gt; , &lt;code&gt;foo(1, 'bar')&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d249b30f21813b362e014d115b40c5bf792a281e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To enforce keyword only arguments using &lt;code&gt;*&lt;/code&gt;:&lt;/strong&gt;&lt;code&gt;def foo(pos1, pos2, *, kwarg1): pass&lt;/code&gt;, here &lt;code&gt;*&lt;/code&gt; means that foo only accept keyword arguments after pos2, hence &lt;code&gt;foo(1, 2, 3)&lt;/code&gt; raises TypeError but &lt;code&gt;foo(1, 2, kwarg1=3)&lt;/code&gt; is ok.</source>
          <target state="translated">&lt;strong&gt;Para imponer argumentos de palabras clave solamente usando &lt;code&gt;*&lt;/code&gt; :&lt;/strong&gt; &lt;code&gt;def foo(pos1, pos2, *, kwarg1): pass&lt;/code&gt; , here &lt;code&gt;*&lt;/code&gt; significa que foo solo acepta argumentos de palabras clave despu&amp;eacute;s de pos2, por lo tanto &lt;code&gt;foo(1, 2, 3)&lt;/code&gt; genera TypeError pero &lt;code&gt;foo(1, 2, kwarg1=3)&lt;/code&gt; est&amp;aacute; bien.</target>
        </trans-unit>
        <trans-unit id="8b0981f8cf0aa7145101e76ca36408f9c0a5506c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To express no further interest in more keyword arguments using &lt;code&gt;\**_&lt;/code&gt; (Note: this is a convention only):&lt;/strong&gt;&lt;code&gt;def foo(bar, baz, **_): pass&lt;/code&gt; means (by convention) &lt;code&gt;foo&lt;/code&gt; only uses &lt;code&gt;bar&lt;/code&gt; and &lt;code&gt;baz&lt;/code&gt; arguments in its working and will ignore others.</source>
          <target state="translated">&lt;strong&gt;Para no expresar m&amp;aacute;s inter&amp;eacute;s en m&amp;aacute;s argumentos de palabras clave usando &lt;code&gt;\**_&lt;/code&gt; (Nota: esto es solo una convenci&amp;oacute;n):&lt;/strong&gt; &lt;code&gt;def foo(bar, baz, **_): pass&lt;/code&gt; significa (por convenci&amp;oacute;n) &lt;code&gt;foo&lt;/code&gt; solo usa argumentos &lt;code&gt;bar&lt;/code&gt; y &lt;code&gt;baz&lt;/code&gt; en est&amp;aacute; funcionando e ignorar&amp;aacute; a otros.</target>
        </trans-unit>
        <trans-unit id="7ab830ff0e82e8ba04ae92cec214286e4c980ac6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To express no further interest in more positional arguments using &lt;code&gt;*_&lt;/code&gt; (Note: this is a convention only):&lt;/strong&gt;&lt;code&gt;def foo(bar, baz, *_): pass&lt;/code&gt; means (by convention) &lt;code&gt;foo&lt;/code&gt; only uses &lt;code&gt;bar&lt;/code&gt; and &lt;code&gt;baz&lt;/code&gt; arguments in its working and will ignore others.</source>
          <target state="translated">&lt;strong&gt;Para no expresar m&amp;aacute;s inter&amp;eacute;s en m&amp;aacute;s argumentos posicionales usando &lt;code&gt;*_&lt;/code&gt; (Nota: esto es solo una convenci&amp;oacute;n):&lt;/strong&gt; &lt;code&gt;def foo(bar, baz, *_): pass&lt;/code&gt; significa (por convenci&amp;oacute;n) &lt;code&gt;foo&lt;/code&gt; solo usa argumentos &lt;code&gt;bar&lt;/code&gt; y &lt;code&gt;baz&lt;/code&gt; en su funcionamiento y ignorar&amp;aacute; a los dem&amp;aacute;s.</target>
        </trans-unit>
        <trans-unit id="5e4d39811d8cee940c5d59a19b14f749dcb48295" translate="yes" xml:space="preserve">
          <source>A good example of using both in a function is:</source>
          <target state="translated">Un buen ejemplo de la utilización de ambos en una función es:</target>
        </trans-unit>
        <trans-unit id="a298513579e35207d98c0815b66416f3f97b4698" translate="yes" xml:space="preserve">
          <source>A subclass can then be</source>
          <target state="translated">Una subclase puede entonces ser</target>
        </trans-unit>
        <trans-unit id="62bf8fc9bc68216425b83b033a2d2bd97805418e" translate="yes" xml:space="preserve">
          <source>Again, more simply, here we require &lt;code&gt;kwarg&lt;/code&gt; to be given by name, not positionally:</source>
          <target state="translated">De nuevo, m&amp;aacute;s simplemente, aqu&amp;iacute; requerimos que &lt;code&gt;kwarg&lt;/code&gt; se d&amp;eacute; por nombre, no por posici&amp;oacute;n:</target>
        </trans-unit>
        <trans-unit id="809e68b98d39b103a32103257a2b244cf31ca467" translate="yes" xml:space="preserve">
          <source>Also Python 3 adds new semantic (refer &lt;a href=&quot;https://www.python.org/dev/peps/pep-3102/&quot;&gt;PEP 3102&lt;/a&gt;):</source>
          <target state="translated">Tambi&amp;eacute;n Python 3 agrega nueva sem&amp;aacute;ntica (consulte &lt;a href=&quot;https://www.python.org/dev/peps/pep-3102/&quot;&gt;PEP 3102&lt;/a&gt; ):</target>
        </trans-unit>
        <trans-unit id="4c8e088035f2b1475516b7fc43ddabb9edcbe3ba" translate="yes" xml:space="preserve">
          <source>Also, &lt;code&gt;*&lt;/code&gt; can be used by itself  to indicate that keyword only arguments follow, without allowing for unlimited positional arguments.</source>
          <target state="translated">Adem&amp;aacute;s, &lt;code&gt;*&lt;/code&gt; se puede usar solo para indicar que siguen argumentos de palabras clave solamente, sin permitir argumentos posicionales ilimitados.</target>
        </trans-unit>
        <trans-unit id="6a6f5c8171b3aff6eb567735beb28045eb8b3581" translate="yes" xml:space="preserve">
          <source>Also, a subclass with a new attribute which makes sense only to that subclass instance can call the Base class &lt;code&gt;__init__&lt;/code&gt; to offload the attributes setting.
This is done through *args and **kwargs. kwargs mainly used so that code is readable using named arguments. For example,</source>
          <target state="translated">Adem&amp;aacute;s, una subclase con un nuevo atributo que solo tiene sentido para esa instancia de subclase puede llamar a la clase Base &lt;code&gt;__init__&lt;/code&gt; para descargar la configuraci&amp;oacute;n de atributos. Esto se hace a trav&amp;eacute;s de * args y ** kwargs. kwargs se usa principalmente para que el c&amp;oacute;digo sea legible utilizando argumentos con nombre. Por ejemplo,</target>
        </trans-unit>
        <trans-unit id="941017aafd6ce8752031e7a86c40872c1d44c7ad" translate="yes" xml:space="preserve">
          <source>An example from Python3 Document</source>
          <target state="translated">Un ejemplo del documento de Python3</target>
        </trans-unit>
        <trans-unit id="f728b4c46940ef4939aedd7c78d82235855c9e4f" translate="yes" xml:space="preserve">
          <source>And by factoring out our code, which &lt;code&gt;*args&lt;/code&gt; and &lt;code&gt;**kwargs&lt;/code&gt; allows us to do, we reduce lines of code, improve readability and maintainability, and have sole canonical locations for the logic in our program. If we need to change any part of this structure, we have one place in which to make each change.</source>
          <target state="translated">Y al factorizar nuestro c&amp;oacute;digo, que &lt;code&gt;*args&lt;/code&gt; y &lt;code&gt;**kwargs&lt;/code&gt; nos permiten hacer, reducimos las l&amp;iacute;neas de c&amp;oacute;digo, mejoramos la legibilidad y la facilidad de mantenimiento, y tenemos ubicaciones can&amp;oacute;nicas &amp;uacute;nicas para la l&amp;oacute;gica en nuestro programa. Si necesitamos cambiar alguna parte de esta estructura, tenemos un lugar en el que hacer cada cambio.</target>
        </trans-unit>
        <trans-unit id="be56e527c4927fc931b3d869b5999e5e9411b330" translate="yes" xml:space="preserve">
          <source>And now every wrapped function can be written much more succinctly, as we've factored out the redundancy:</source>
          <target state="translated">Y ahora cada función envuelta puede ser escrita mucho más sucintamente,ya que hemos factorizado la redundancia:</target>
        </trans-unit>
        <trans-unit id="272a5867ff3c6c36ec58af2ec1adc2e2bdae6b60" translate="yes" xml:space="preserve">
          <source>And we can no longer accept unlimited positional arguments because we don't have &lt;code&gt;*args*&lt;/code&gt;:</source>
          <target state="translated">Y ya no podemos aceptar argumentos posicionales ilimitados porque no tenemos &lt;code&gt;*args*&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="0b07a246fb1c6724bf5bb8d0fd6c30ceab979dfd" translate="yes" xml:space="preserve">
          <source>Another usage of the &lt;code&gt;*l&lt;/code&gt; idiom is to &lt;strong&gt;unpack argument lists&lt;/strong&gt; when calling a function.</source>
          <target state="translated">Otro uso del idioma &lt;code&gt;*l&lt;/code&gt; es &lt;strong&gt;desempaquetar listas de argumentos&lt;/strong&gt; al llamar a una funci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="a56026bb3260c8f7cdf5974b41089feb98cd65e7" translate="yes" xml:space="preserve">
          <source>As another example, we can use dict expansion in &lt;code&gt;str.format&lt;/code&gt;:</source>
          <target state="translated">Como otro ejemplo, podemos usar la expansi&amp;oacute;n dict en &lt;code&gt;str.format&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="f9506ad8d7ec60bc7b5829a999c8ceb09f4d0fb8" translate="yes" xml:space="preserve">
          <source>Basically, any number of &lt;strong&gt;positional arguments&lt;/strong&gt; can use *args and any &lt;strong&gt;named arguments&lt;/strong&gt; (or kwargs aka keyword arguments) can use **kwargs.</source>
          <target state="translated">B&amp;aacute;sicamente, cualquier n&amp;uacute;mero de &lt;strong&gt;argumentos posicionales&lt;/strong&gt; puede usar * args y cualquier &lt;strong&gt;argumento con nombre&lt;/strong&gt; (o kwargs, tambi&amp;eacute;n conocido como argumento de palabras clave) puede usar ** kwargs.</target>
        </trans-unit>
        <trans-unit id="193b10038bc8a0af892c8f2e776952cf5897379c" translate="yes" xml:space="preserve">
          <source>Below are 6 different use cases for &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;**&lt;/code&gt; in python programming:</source>
          <target state="translated">A continuaci&amp;oacute;n se presentan 6 casos de uso diferentes para &lt;code&gt;*&lt;/code&gt; y &lt;code&gt;**&lt;/code&gt; en la programaci&amp;oacute;n de Python:</target>
        </trans-unit>
        <trans-unit id="58a0baf8c6804e8201dd4d22f25df94546e28974" translate="yes" xml:space="preserve">
          <source>Both idioms can be mixed with normal arguments to allow a set of fixed and some variable arguments:</source>
          <target state="translated">Ambos modismos pueden mezclarse con argumentos normales para permitir un conjunto de argumentos fijos y algunos variables:</target>
        </trans-unit>
        <trans-unit id="7f3f07a76c207ae0c4904e706b58ba513add5c23" translate="yes" xml:space="preserve">
          <source>Building on nickd's &lt;a href=&quot;https://stackoverflow.com/a/36911/8588359&quot;&gt;answer&lt;/a&gt;...</source>
          <target state="translated">Sobre la base de la &lt;a href=&quot;https://stackoverflow.com/a/36911/8588359&quot;&gt;respuesta&lt;/a&gt; de Nickd ...</target>
        </trans-unit>
        <trans-unit id="bcaa33a7ae44bd5042c37a9cdbea7f843b1cf7c8" translate="yes" xml:space="preserve">
          <source>Caveats</source>
          <target state="translated">Caveats</target>
        </trans-unit>
        <trans-unit id="cc11b3a28fa30ae6d3d3ad1438824cbd5224ba5c" translate="yes" xml:space="preserve">
          <source>Context</source>
          <target state="translated">Context</target>
        </trans-unit>
        <trans-unit id="292f60f275382399afa74120ffd27ed50a5e4820" translate="yes" xml:space="preserve">
          <source>Defining Functions</source>
          <target state="translated">Definición de funciones</target>
        </trans-unit>
        <trans-unit id="d3520f614d39ec8a767708415cb67124ef323ade" translate="yes" xml:space="preserve">
          <source>Expansion, Passing any number of arguments</source>
          <target state="translated">Expansión,Pasando cualquier número de argumentos</target>
        </trans-unit>
        <trans-unit id="6db6725e9e7d5c088630e348048d1e73fc7657d3" translate="yes" xml:space="preserve">
          <source>For example,</source>
          <target state="translated">Por ejemplo,</target>
        </trans-unit>
        <trans-unit id="14f3e8fd51b161882e6b5aa2d0b75cf99f633ba9" translate="yes" xml:space="preserve">
          <source>For example, Python 2's xrange does not explicitly expect &lt;code&gt;*args&lt;/code&gt;, but since it takes 3 integers as arguments:</source>
          <target state="translated">Por ejemplo, xrange de Python 2 no espera expl&amp;iacute;citamente &lt;code&gt;*args&lt;/code&gt; , pero dado que toma 3 enteros como argumentos:</target>
        </trans-unit>
        <trans-unit id="7af97b435f13f14645d917b304a83fcd1be73671" translate="yes" xml:space="preserve">
          <source>For example, the syntax for implementing &lt;strong&gt;varargs&lt;/strong&gt; in Java as follows:</source>
          <target state="translated">Por ejemplo, la sintaxis para implementar &lt;strong&gt;varargs&lt;/strong&gt; en Java de la siguiente manera:</target>
        </trans-unit>
        <trans-unit id="493e6e7861151089d2bbb7ac7589c01c800e24d0" translate="yes" xml:space="preserve">
          <source>For those of you who learn by examples!</source>
          <target state="translated">¡Para aquellos de ustedes que aprenden con el ejemplo!</target>
        </trans-unit>
        <trans-unit id="7ba7aff8700fed3c1874a29167ef370d01a8a7b7" translate="yes" xml:space="preserve">
          <source>From the Python documentation:</source>
          <target state="translated">De la documentación de Python:</target>
        </trans-unit>
        <trans-unit id="e620618aef9f68baf0a6922ef26c1ee6d6334c80" translate="yes" xml:space="preserve">
          <source>Here, &lt;code&gt;kwarg2&lt;/code&gt; again must be an explicitly named, keyword argument:</source>
          <target state="translated">Aqu&amp;iacute;, &lt;code&gt;kwarg2&lt;/code&gt; nuevamente debe ser un argumento de palabra clave expl&amp;iacute;citamente nombrado:</target>
        </trans-unit>
        <trans-unit id="72539057bd10b616a696bb7c198c6fa4c5f6db94" translate="yes" xml:space="preserve">
          <source>I want to give an example which others haven't  mentioned</source>
          <target state="translated">Quiero dar un ejemplo que otros no han mencionado</target>
        </trans-unit>
        <trans-unit id="f0eb94c0b755223ff3d41798dad7d9d87841455e" translate="yes" xml:space="preserve">
          <source>If any keyword argument does not correspond to a formal parameter name, a TypeError exception is raised, unless a formal parameter using the syntax &quot;**identifier&quot; is present; in this case, that formal parameter receives a dictionary containing the excess keyword arguments (using the keywords as keys and the argument values as corresponding values), or a (new) empty dictionary if there were no excess keyword arguments.</source>
          <target state="translated">Si algún argumento de palabra clave no corresponde a un nombre de parámetro formal,se plantea una excepción TypeError,a menos que exista un parámetro formal que utilice la sintaxis &quot;**identificador&quot;;en este caso,ese parámetro formal recibe un diccionario que contiene el exceso de argumentos de palabras clave (utilizando las palabras clave como claves y los valores de los argumentos como valores correspondientes),o un (nuevo)diccionario vacío si no hay exceso de argumentos de palabras clave.</target>
        </trans-unit>
        <trans-unit id="a4500c45138c4750180a1f2aeda2a22aab649db8" translate="yes" xml:space="preserve">
          <source>If applicable, &lt;code&gt;**&lt;/code&gt; must come after &lt;code&gt;*&lt;/code&gt;, always.</source>
          <target state="translated">Si corresponde, &lt;code&gt;**&lt;/code&gt; debe aparecer despu&amp;eacute;s de &lt;code&gt;*&lt;/code&gt; , siempre.</target>
        </trans-unit>
        <trans-unit id="efc74abb309d2f65c1476683ef984eb8eebc2d17" translate="yes" xml:space="preserve">
          <source>If there are more positional arguments than there are formal parameter slots, a TypeError exception is raised, unless a formal parameter using the syntax &quot;*identifier&quot; is present; in this case, that formal parameter receives a tuple containing the excess positional arguments (or an empty tuple if there were no excess positional arguments).</source>
          <target state="translated">Si hay más argumentos posicionales que ranuras de parámetros formales,se plantea una excepción TypeError,a menos que exista un parámetro formal que utilice la sintaxis &quot;*identificador&quot;;en este caso,ese parámetro formal recibe una tupla que contiene el exceso de argumentos posicionales (o una tupla vacía si no hubo exceso de argumentos posicionales).</target>
        </trans-unit>
        <trans-unit id="66c49fe41a858b7f28cff7b597d5e664961e5e4d" translate="yes" xml:space="preserve">
          <source>In Python 3 it is possible to use &lt;code&gt;*l&lt;/code&gt; on the left side of an assignment (&lt;a href=&quot;http://www.python.org/dev/peps/pep-3132/&quot;&gt;Extended Iterable Unpacking&lt;/a&gt;), though it gives a list instead of a tuple in this context:</source>
          <target state="translated">En Python 3 es posible usar &lt;code&gt;*l&lt;/code&gt; en el lado izquierdo de una tarea ( &lt;a href=&quot;http://www.python.org/dev/peps/pep-3132/&quot;&gt;Desembalaje extendido iterable&lt;/a&gt; ), aunque en este contexto proporciona una lista en lugar de una tupla:</target>
        </trans-unit>
        <trans-unit id="8691aef17626aa432a214ae58f6b125acef8b90e" translate="yes" xml:space="preserve">
          <source>In Python 3.5, you can also use this syntax in &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;dict&lt;/code&gt;, &lt;code&gt;tuple&lt;/code&gt;, and &lt;code&gt;set&lt;/code&gt; displays (also sometimes called literals). See &lt;a href=&quot;http://legacy.python.org/dev/peps/pep-0448/&quot;&gt;PEP 488: Additional Unpacking Generalizations&lt;/a&gt;.</source>
          <target state="translated">En Python 3.5, tambi&amp;eacute;n puede usar esta sintaxis en las &lt;code&gt;list&lt;/code&gt; as , &lt;code&gt;dict&lt;/code&gt; , &lt;code&gt;tuple&lt;/code&gt; y &lt;code&gt;set&lt;/code&gt; displays (a veces tambi&amp;eacute;n llamados literales). Ver &lt;a href=&quot;http://legacy.python.org/dev/peps/pep-0448/&quot;&gt;PEP 488: Generalizaciones adicionales de desempaque&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="fb835208e8f00e81b3abf80c30e2f9a12d147dfa" translate="yes" xml:space="preserve">
          <source>In a &lt;strong&gt;function call&lt;/strong&gt; the '*' &lt;strong&gt;unpacks&lt;/strong&gt; data structure of tuple or list into positional or keyword arguments to be received by function definition.</source>
          <target state="translated">En una &lt;strong&gt;llamada a funci&amp;oacute;n,&lt;/strong&gt; el '*' &lt;strong&gt;descomprime&lt;/strong&gt; la estructura de datos de tupla o lista en argumentos posicionales o de palabras clave que se recibir&amp;aacute;n por definici&amp;oacute;n de funci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="6675a7f7c18173022240f8345a27606cfd7103d2" translate="yes" xml:space="preserve">
          <source>In a &lt;strong&gt;function call&lt;/strong&gt; the '**' &lt;strong&gt;unpacks&lt;/strong&gt; data structure of dictionary into positional or keyword arguments to be received by function definition.</source>
          <target state="translated">En una &lt;strong&gt;llamada a funci&amp;oacute;n,&lt;/strong&gt; el '**' &lt;strong&gt;descomprime&lt;/strong&gt; la estructura de datos del diccionario en argumentos posicionales o de palabras clave que se recibir&amp;aacute;n por definici&amp;oacute;n de funci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="983cd25b8c190befd85158d737e65c788cae99aa" translate="yes" xml:space="preserve">
          <source>In a &lt;strong&gt;function definition&lt;/strong&gt; the '*' &lt;strong&gt;packs&lt;/strong&gt; positional arguments into a tuple.</source>
          <target state="translated">En una &lt;strong&gt;definici&amp;oacute;n de funci&amp;oacute;n,&lt;/strong&gt; el '*' &lt;strong&gt;agrupa&lt;/strong&gt; argumentos posicionales en una tupla.</target>
        </trans-unit>
        <trans-unit id="8242ded2b6c77202b6aba67403b98d26e3b9f8a7" translate="yes" xml:space="preserve">
          <source>In a &lt;strong&gt;function definition&lt;/strong&gt; the '**' &lt;strong&gt;packs&lt;/strong&gt; keyword arguments into a dictionary.</source>
          <target state="translated">En una &lt;strong&gt;definici&amp;oacute;n de funci&amp;oacute;n,&lt;/strong&gt; '**' &lt;strong&gt;incluye&lt;/strong&gt; argumentos de palabras clave en un diccionario.</target>
        </trans-unit>
        <trans-unit id="58735475502a63f86aa44994b9acb298f79302cd" translate="yes" xml:space="preserve">
          <source>In addition to function calls, *args and **kwargs are useful in class hierarchies and also avoid having to write &lt;code&gt;__init__&lt;/code&gt; method in Python. Similar usage can seen in frameworks like Django code.</source>
          <target state="translated">Adem&amp;aacute;s de las llamadas a funciones, * args y ** kwargs son &amp;uacute;tiles en las jerarqu&amp;iacute;as de clases y tambi&amp;eacute;n evitan tener que escribir el m&amp;eacute;todo &lt;code&gt;__init__&lt;/code&gt; en Python. Se puede ver un uso similar en marcos como el c&amp;oacute;digo Django.</target>
        </trans-unit>
        <trans-unit id="bb34dbc12b27d5ff2442c4a9c7fb3c9d138f554a" translate="yes" xml:space="preserve">
          <source>In addition to the answers in this thread, here is another detail that was not mentioned elsewhere. This expands on the &lt;a href=&quot;https://stackoverflow.com/a/47580283/42223&quot;&gt;answer by Brad Solomon&lt;/a&gt;</source>
          <target state="translated">Adem&amp;aacute;s de las respuestas en este hilo, aqu&amp;iacute; hay otro detalle que no se mencion&amp;oacute; en otra parte. Esto ampl&amp;iacute;a la &lt;a href=&quot;https://stackoverflow.com/a/47580283/42223&quot;&gt;respuesta de Brad Solomon&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="29d133b1e0b3cf691330c1265f0ade4596a9ef8c" translate="yes" xml:space="preserve">
          <source>In function &lt;strong&gt;definition&lt;/strong&gt; The '**' operator packs the received arguments into a dictionary.</source>
          <target state="translated">En la &lt;strong&gt;definici&amp;oacute;n de la&lt;/strong&gt; funci&amp;oacute;n El operador '**' empaqueta los argumentos recibidos en un diccionario.</target>
        </trans-unit>
        <trans-unit id="28cb4f66a57b75adf03d90ef92f1211c290e7b52" translate="yes" xml:space="preserve">
          <source>In function &lt;strong&gt;definition&lt;/strong&gt; the '*' operator packs the received arguments into a tuple.</source>
          <target state="translated">En la &lt;strong&gt;definici&amp;oacute;n de&lt;/strong&gt; la funci&amp;oacute;n, el operador '*' empaqueta los argumentos recibidos en una tupla.</target>
        </trans-unit>
        <trans-unit id="841557c0934b1382a8328ac98e096ab23880171f" translate="yes" xml:space="preserve">
          <source>In the following method definitions, what does the &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;**&lt;/code&gt; do for &lt;code&gt;param2&lt;/code&gt;?</source>
          <target state="translated">En las siguientes definiciones de m&amp;eacute;todos, &amp;iquest;qu&amp;eacute; hacen &lt;code&gt;*&lt;/code&gt; y &lt;code&gt;**&lt;/code&gt; para &lt;code&gt;param2&lt;/code&gt; ?</target>
        </trans-unit>
        <trans-unit id="31c9310dcc0195a2b23932b6507e5eb5f7d2c26a" translate="yes" xml:space="preserve">
          <source>In this example, we see that if we try to pass &lt;code&gt;kwarg&lt;/code&gt; positionally, we get an error:</source>
          <target state="translated">En este ejemplo, vemos que si intentamos pasar &lt;code&gt;kwarg&lt;/code&gt; posicionalmente, obtenemos un error:</target>
        </trans-unit>
        <trans-unit id="cf7edb843a9194f38e1949d77a78828942274ba5" translate="yes" xml:space="preserve">
          <source>It also allows multiple iterables to be unpacked in a single function call.</source>
          <target state="translated">También permite desempacar múltiples iterables en una sola llamada de función.</target>
        </trans-unit>
        <trans-unit id="4035e8005d566ecb14be86fc663eabe8f865894f" translate="yes" xml:space="preserve">
          <source>It is also possible to use this the other way around:</source>
          <target state="translated">También es posible usar esto al revés:</target>
        </trans-unit>
        <trans-unit id="c05cd1bca9e7cae9cdcb250882a9c06c018ab02d" translate="yes" xml:space="preserve">
          <source>It packs arguments passed to the function into &lt;code&gt;list&lt;/code&gt; and &lt;code&gt;dict&lt;/code&gt; respectively inside the function body. When you define a function signature like this:</source>
          <target state="translated">Empaqueta argumentos pasados ​​a la funci&amp;oacute;n en la &lt;code&gt;list&lt;/code&gt; a y &lt;code&gt;dict&lt;/code&gt; respectivamente dentro del cuerpo de la funci&amp;oacute;n. Cuando define una firma de funci&amp;oacute;n como esta:</target>
        </trans-unit>
        <trans-unit id="dfb09dacdeab7cfd3c08651d82a2887a40500007" translate="yes" xml:space="preserve">
          <source>It's also worth noting that you can use &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;**&lt;/code&gt; when calling functions as well. This is a shortcut that allows you to pass multiple arguments to a function directly using either a list/tuple or a dictionary. For example, if you have the following function:</source>
          <target state="translated">Tambi&amp;eacute;n vale la pena se&amp;ntilde;alar que tambi&amp;eacute;n puede usar &lt;code&gt;*&lt;/code&gt; y &lt;code&gt;**&lt;/code&gt; al llamar a funciones. Este es un acceso directo que le permite pasar m&amp;uacute;ltiples argumentos a una funci&amp;oacute;n directamente usando una lista / tupla o un diccionario. Por ejemplo, si tiene la siguiente funci&amp;oacute;n:</target>
        </trans-unit>
        <trans-unit id="7901e31b6d26720b22aaec3f1116bd71366e50e7" translate="yes" xml:space="preserve">
          <source>Let us first understand what are positional arguments and keyword arguments.
Below is an example of function definition with &lt;strong&gt;Positional arguments.&lt;/strong&gt;</source>
          <target state="translated">Primero, comprendamos qu&amp;eacute; son argumentos posicionales y argumentos de palabras clave. A continuaci&amp;oacute;n se muestra un ejemplo de definici&amp;oacute;n de funci&amp;oacute;n con &lt;strong&gt;argumentos posicionales.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f4b23038a2cc7c7d11a51aa8537b685f687d5820" translate="yes" xml:space="preserve">
          <source>Let us get straight to an example and then discuss it.</source>
          <target state="translated">Vayamos directamente a un ejemplo y luego discutamos.</target>
        </trans-unit>
        <trans-unit id="87e52c50e2e0e5058b445b9067a0a72b6d2cd8d7" translate="yes" xml:space="preserve">
          <source>Let us show this by defining a function that takes two normal variables &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, and can accept more arguments as &lt;code&gt;myArgs&lt;/code&gt;, and can accept even more arguments as &lt;code&gt;myKW&lt;/code&gt;. Later, we will show how to feed &lt;code&gt;y&lt;/code&gt; using &lt;code&gt;myArgDict&lt;/code&gt;.</source>
          <target state="translated">Perm&amp;iacute;tanos mostrar esto definiendo una funci&amp;oacute;n que toma dos variables normales &lt;code&gt;x&lt;/code&gt; , &lt;code&gt;y&lt;/code&gt; , y puede aceptar m&amp;aacute;s argumentos como &lt;code&gt;myArgs&lt;/code&gt; , y puede aceptar a&amp;uacute;n m&amp;aacute;s argumentos como &lt;code&gt;myKW&lt;/code&gt; . M&amp;aacute;s adelante, mostraremos c&amp;oacute;mo alimentar &lt;code&gt;y&lt;/code&gt; usando &lt;code&gt;myArgDict&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bb41e5bdd359dec6da0c1f298c3c0b43cc86932e" translate="yes" xml:space="preserve">
          <source>Let's call this function with &lt;code&gt;foo(1, 2, 3, 4, e=5, f=6, g=7)&lt;/code&gt;</source>
          <target state="translated">Llamemos a esta funci&amp;oacute;n con &lt;code&gt;foo(1, 2, 3, 4, e=5, f=6, g=7)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a245374ac3ff8ea606f1d3b17466eb8e31c565f7" translate="yes" xml:space="preserve">
          <source>New in Python 3: Defining functions with keyword only arguments</source>
          <target state="translated">Nuevo en Python 3:Definición de funciones con argumentos de sólo palabras clave</target>
        </trans-unit>
        <trans-unit id="91a5336d571b1fe3c1f7791c93e16e9bd59c5ada" translate="yes" xml:space="preserve">
          <source>Non-optional argument assignment happens first.</source>
          <target state="translated">La asignación de argumentos no opcionales ocurre primero.</target>
        </trans-unit>
        <trans-unit id="91448b75d21315f518a18d8fc42a1ce53bf91a2a" translate="yes" xml:space="preserve">
          <source>Note: The keys in &lt;code&gt;mydict&lt;/code&gt; have to be named exactly like the parameters of function &lt;code&gt;foo&lt;/code&gt;. Otherwise it will throw a &lt;code&gt;TypeError&lt;/code&gt;:</source>
          <target state="translated">Nota: Las claves en &lt;code&gt;mydict&lt;/code&gt; deben nombrarse exactamente como los par&amp;aacute;metros de la funci&amp;oacute;n &lt;code&gt;foo&lt;/code&gt; . De lo contrario, arrojar&amp;aacute; un &lt;code&gt;TypeError&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="24ebde1388a779e5d0c30351caa8f0ace467cf94" translate="yes" xml:space="preserve">
          <source>Now let us see an example of '**' used in function definition:</source>
          <target state="translated">Ahora veamos un ejemplo de &quot;**&quot; utilizado en la definición de la función:</target>
        </trans-unit>
        <trans-unit id="b619a1ead86d849e65e82eda63f8fe990eca62f9" translate="yes" xml:space="preserve">
          <source>Now let us study an example of function definition with &lt;strong&gt;keyword arguments&lt;/strong&gt;:</source>
          <target state="translated">Ahora estudiemos un ejemplo de definici&amp;oacute;n de funci&amp;oacute;n con &lt;strong&gt;argumentos de palabras clave&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="4a2039738304b820b9d7fa888013e4fe9300e160" translate="yes" xml:space="preserve">
          <source>Now let us study the '*' operator and '**' operator.</source>
          <target state="translated">Ahora estudiemos el operador &quot;*&quot; y el operador &quot;**&quot;.</target>
        </trans-unit>
        <trans-unit id="2bbdf3ea245d185075329f6ce6fb3db2e270559b" translate="yes" xml:space="preserve">
          <source>Now let us study the '*' operator use in &lt;strong&gt;function definition&lt;/strong&gt;.
Example:</source>
          <target state="translated">Ahora estudiemos el uso del operador '*' en la &lt;strong&gt;definici&amp;oacute;n de funciones&lt;/strong&gt; . Ejemplo:</target>
        </trans-unit>
        <trans-unit id="ab3d3532798f22ac8cd363026830e3bc22bd4736" translate="yes" xml:space="preserve">
          <source>OK, so maybe we're not seeing the utility yet. So imagine you have several functions with redundant code before and/or after the differentiating code. The following named functions are just pseudo-code for illustrative purposes.</source>
          <target state="translated">Bien,tal vez no estamos viendo la utilidad todavía.Así que imagina que tienes varias funciones con código redundante antes o después del código diferenciador.Las siguientes funciones nombradas son sólo pseudo-código para fines ilustrativos.</target>
        </trans-unit>
        <trans-unit id="f3c8c95c5e534bcd2ea0034a0d83177efa6923f4" translate="yes" xml:space="preserve">
          <source>Output:</source>
          <target state="translated">Output:</target>
        </trans-unit>
        <trans-unit id="b1586a28b4adf696fa94b895eeaff2889a1ab757" translate="yes" xml:space="preserve">
          <source>Please note these operators can be used in 2 areas:</source>
          <target state="translated">Tenga en cuenta que estos operadores pueden ser utilizados en 2 áreas:</target>
        </trans-unit>
        <trans-unit id="d6b4ce72d3b7c0e1f8d8a432ab3632aac2b48700" translate="yes" xml:space="preserve">
          <source>Python 2 compatible demos</source>
          <target state="translated">Demostraciones compatibles con Python 2</target>
        </trans-unit>
        <trans-unit id="56fce8c175adcf994a88eaf001f3be01c032ad86" translate="yes" xml:space="preserve">
          <source>Quick Example</source>
          <target state="translated">Ejemplo rápido</target>
        </trans-unit>
        <trans-unit id="ae5980edbf86fe41fa4f231cd5375aec2949aed3" translate="yes" xml:space="preserve">
          <source>Relatedly: uses for the star/splat operators have been &lt;a href=&quot;https://docs.python.org/3/whatsnew/3.5.html#pep-448-additional-unpacking-generalizations&quot;&gt;expanded&lt;/a&gt; in Python 3</source>
          <target state="translated">Relacionado: los usos para los operadores estrella / splat se han &lt;a href=&quot;https://docs.python.org/3/whatsnew/3.5.html#pep-448-additional-unpacking-generalizations&quot;&gt;ampliado&lt;/a&gt; en Python 3</target>
        </trans-unit>
        <trans-unit id="f5cf0ceedb335135a295394a6abb33e7369b6ed4" translate="yes" xml:space="preserve">
          <source>So remember</source>
          <target state="translated">Así que recuerda</target>
        </trans-unit>
        <trans-unit id="7727bb5c748719530e5365f60dc1345a08cbbc5e" translate="yes" xml:space="preserve">
          <source>So remember:</source>
          <target state="translated">Así que recuerda:</target>
        </trans-unit>
        <trans-unit id="4daa26ea0c8c2263bb963c398bb22881ee6e987a" translate="yes" xml:space="preserve">
          <source>So this is a function definition with positional arguments.
You can call it with keyword/named arguments as well:</source>
          <target state="translated">Así que esta es una definición de función con argumentos posicionales.También puedes llamarla con argumentos de nombre clave:</target>
        </trans-unit>
        <trans-unit id="0f4462555ad3a05048aab639fb7bffc0533da2ae" translate="yes" xml:space="preserve">
          <source>So we now know function definitions with positional as well as keyword arguments.</source>
          <target state="translated">Así que ahora conocemos las definiciones de las funciones con argumentos posicionales y de palabras clave.</target>
        </trans-unit>
        <trans-unit id="4c070a54b1f4117ae25ca6094d330ad2f48f23e5" translate="yes" xml:space="preserve">
          <source>Such function accepts only 3 positional arguments, and everything after &lt;code&gt;*&lt;/code&gt; can only be passed as keyword arguments.</source>
          <target state="translated">Dicha funci&amp;oacute;n acepta solo 3 argumentos posicionales, y todo despu&amp;eacute;s de &lt;code&gt;*&lt;/code&gt; solo se puede pasar como argumentos de palabras clave.</target>
        </trans-unit>
        <trans-unit id="5ff57f4185e884322f43c9c59da60f12f41285ea" translate="yes" xml:space="preserve">
          <source>TL;DR</source>
          <target state="translated">TL;DR</target>
        </trans-unit>
        <trans-unit id="32602316336694ff9b888c208e8e51d3fc544690" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;**kwargs&lt;/code&gt; will give you all 
&lt;strong&gt;keyword arguments&lt;/strong&gt; except for those corresponding to a formal parameter as a dictionary.</source>
          <target state="translated">&lt;code&gt;**kwargs&lt;/code&gt; le dar&amp;aacute; todos los &lt;strong&gt;argumentos de palabras clave,&lt;/strong&gt; excepto los correspondientes a un par&amp;aacute;metro formal como diccionario.</target>
        </trans-unit>
        <trans-unit id="cf63e04524574cf4580aa2c7181367ee304b6f02" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*args&lt;/code&gt; and &lt;code&gt;**kwargs&lt;/code&gt; is a common idiom to allow arbitrary number of arguments to functions as described in the section &lt;a href=&quot;http://docs.python.org/dev/tutorial/controlflow.html#more-on-defining-functions&quot;&gt;more on defining functions&lt;/a&gt; in the Python documentation.</source>
          <target state="translated">El &lt;code&gt;*args&lt;/code&gt; y &lt;code&gt;**kwargs&lt;/code&gt; es un idioma com&amp;uacute;n para permitir un n&amp;uacute;mero arbitrario de argumentos a las funciones como se describe en la secci&amp;oacute;n &lt;a href=&quot;http://docs.python.org/dev/tutorial/controlflow.html#more-on-defining-functions&quot;&gt;m&amp;aacute;s sobre la definici&amp;oacute;n de funciones&lt;/a&gt; en la documentaci&amp;oacute;n de Python.</target>
        </trans-unit>
        <trans-unit id="3712da16870cb2acecd53004226f6aed43506f17" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*args&lt;/code&gt; will give you all function parameters &lt;a href=&quot;https://docs.python.org/dev/tutorial/controlflow.html#arbitrary-argument-lists&quot;&gt;as a tuple&lt;/a&gt;:</source>
          <target state="translated">Los &lt;code&gt;*args&lt;/code&gt; le dar&amp;aacute;n todos los par&amp;aacute;metros de funci&amp;oacute;n &lt;a href=&quot;https://docs.python.org/dev/tutorial/controlflow.html#arbitrary-argument-lists&quot;&gt;como una tupla&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="93b505fb3abc4a37f6c7efe50f5052207c2aa74a" translate="yes" xml:space="preserve">
          <source>The complete code is &lt;a href=&quot;http://harisankar-krishnaswamy.blogspot.sg/2015/08/using-args-and-kwargs-python-code-post.html&quot;&gt;here&lt;/a&gt;</source>
          <target state="translated">El c&amp;oacute;digo completo est&amp;aacute; &lt;a href=&quot;http://harisankar-krishnaswamy.blogspot.sg/2015/08/using-args-and-kwargs-python-code-post.html&quot;&gt;aqu&amp;iacute;.&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a896ce94825ba4df77e4618c23aa21e3591103c9" translate="yes" xml:space="preserve">
          <source>The double ** means there can be any number of extra named parameters. &lt;code&gt;bar()&lt;/code&gt; can be invoked like &lt;code&gt;bar(1, a=2, b=3)&lt;/code&gt;. In the body of bar() param2 is a dictionary containing {'a':2, 'b':3 }</source>
          <target state="translated">El doble ** significa que puede haber cualquier n&amp;uacute;mero de par&amp;aacute;metros con nombre adicionales. &lt;code&gt;bar()&lt;/code&gt; puede invocarse como &lt;code&gt;bar(1, a=2, b=3)&lt;/code&gt; . En el cuerpo de bar () param2 hay un diccionario que contiene {'a': 2, 'b': 3}</target>
        </trans-unit>
        <trans-unit id="504eb92669c468e236a773b315b925eb19aaf5ee" translate="yes" xml:space="preserve">
          <source>The following function describes how they can be used, and demonstrates behavior. Note the named &lt;code&gt;b&lt;/code&gt; argument will be consumed by the second positional argument before :</source>
          <target state="translated">La siguiente funci&amp;oacute;n describe c&amp;oacute;mo se pueden usar y demuestra el comportamiento. Tenga en cuenta que el argumento &lt;code&gt;b&lt;/code&gt; nombrado ser&amp;aacute; consumido por el segundo argumento posicional antes:</target>
        </trans-unit>
        <trans-unit id="e443aae8785e85d922c3fa35db5f6379233330af" translate="yes" xml:space="preserve">
          <source>The function recieving the parameters does not have to know that they are being expanded.</source>
          <target state="translated">La función que recibe los parámetros no tiene que saber que se están expandiendo.</target>
        </trans-unit>
        <trans-unit id="fafee0b6f78ca93506971dffb50240f2686eae25" translate="yes" xml:space="preserve">
          <source>The purpose of &lt;code&gt;**&lt;/code&gt; is to give you the ability to feed a function's arguments by providing a dictionary (e.g. &lt;code&gt;f(**{'x' : 1, 'y' : 2})&lt;/code&gt; ).</source>
          <target state="translated">El prop&amp;oacute;sito de &lt;code&gt;**&lt;/code&gt; es darle la capacidad de alimentar los argumentos de una funci&amp;oacute;n proporcionando un diccionario (por ejemplo, &lt;code&gt;f(**{'x' : 1, 'y' : 2})&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="2f5a6a43eafba8c82a9d72f0ede407675439bd2a" translate="yes" xml:space="preserve">
          <source>The purpose of &lt;code&gt;*&lt;/code&gt;  is to give you the ability to define a function that can take an arbitrary number of arguments provided as a list (e.g. &lt;code&gt;f(*myList)&lt;/code&gt; ).</source>
          <target state="translated">El prop&amp;oacute;sito de &lt;code&gt;*&lt;/code&gt; es darle la capacidad de definir una funci&amp;oacute;n que puede tomar un n&amp;uacute;mero arbitrario de argumentos proporcionados como una lista (por ejemplo, &lt;code&gt;f(*myList)&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="0540e6129858e4f8523a3a6fa9049a40a569a1e2" translate="yes" xml:space="preserve">
          <source>The single * means that there can be any number of extra positional arguments. &lt;code&gt;foo()&lt;/code&gt; can be invoked like &lt;code&gt;foo(1,2,3,4,5)&lt;/code&gt;. In the body of foo() param2 is a sequence containing 2-5.</source>
          <target state="translated">El * simple significa que puede haber cualquier n&amp;uacute;mero de argumentos posicionales adicionales. &lt;code&gt;foo()&lt;/code&gt; se puede invocar como &lt;code&gt;foo(1,2,3,4,5)&lt;/code&gt; . En el cuerpo de foo () param2 es una secuencia que contiene 2-5.</target>
        </trans-unit>
        <trans-unit id="2d1570fcc1afe648dd6fd1efa9f4eba37db798fb" translate="yes" xml:space="preserve">
          <source>The subclass then be instantiated as</source>
          <target state="translated">La subclase se instanciará entonces como</target>
        </trans-unit>
        <trans-unit id="7e318ae5502f2c6caa085e9130b7c26c1122e926" translate="yes" xml:space="preserve">
          <source>The use of '*' operator and '**' operator in &lt;strong&gt;function call.&lt;/strong&gt;</source>
          <target state="translated">El uso del operador '*' y el operador '**' en la &lt;strong&gt;llamada a la funci&amp;oacute;n.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="221ec3c13c3ff3139d5fa30b8bad1a628fef59e9" translate="yes" xml:space="preserve">
          <source>The zip() receives multiple iretable args, and return a generator.</source>
          <target state="translated">El zip()recibe múltiples arcos irrompibles,y devuelve un generador.</target>
        </trans-unit>
        <trans-unit id="a62bafe25d51ed5be42368872e804941b20a4a6e" translate="yes" xml:space="preserve">
          <source>They allow for &lt;strong&gt;functions to be defined to accept&lt;/strong&gt; and for &lt;strong&gt;users to pass&lt;/strong&gt; any number of arguments, positional (&lt;code&gt;*&lt;/code&gt;) and keyword (&lt;code&gt;**&lt;/code&gt;).</source>
          <target state="translated">Permiten que las &lt;strong&gt;funciones se definan para aceptar&lt;/strong&gt; y que los &lt;strong&gt;usuarios pasen&lt;/strong&gt; cualquier n&amp;uacute;mero de argumentos, posicionales ( &lt;code&gt;*&lt;/code&gt; ) y palabras clave ( &lt;code&gt;**&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="76e5ec318c3f4aae99285e9dc60f5a60d259a905" translate="yes" xml:space="preserve">
          <source>This also works in reverse, i.e. from the caller side. for example if you have a function defined as:</source>
          <target state="translated">Esto también funciona a la inversa,es decir,desde el lado de la persona que llama.Por ejemplo,si tienes una función definida como:</target>
        </trans-unit>
        <trans-unit id="f71bfb2e76b0ba5c8edbecd4ae4daf6a4102ad02" translate="yes" xml:space="preserve">
          <source>This example would help you remember &lt;code&gt;*args&lt;/code&gt;, &lt;code&gt;**kwargs&lt;/code&gt; and even &lt;code&gt;super&lt;/code&gt; and inheritance in Python at once.</source>
          <target state="translated">Este ejemplo lo ayudar&amp;iacute;a a recordar &lt;code&gt;*args&lt;/code&gt; , &lt;code&gt;**kwargs&lt;/code&gt; e incluso &lt;code&gt;super&lt;/code&gt; y herencia en Python a la vez.</target>
        </trans-unit>
        <trans-unit id="2e78a575536cd3c81799e8d59abbcc1aef7ff457" translate="yes" xml:space="preserve">
          <source>This is somewhat similar to what you can do with python &lt;code&gt;f-strings&lt;/code&gt;&lt;a href=&quot;https://stackoverflow.com/questions/tagged/f-string&quot;&gt;f-string&lt;/a&gt; but with the added overhead of declaring a dict to hold the variables (f-string does not require a dict).</source>
          <target state="translated">Esto es algo similar a lo que puede hacer con python &lt;code&gt;f-strings&lt;/code&gt; &lt;a href=&quot;https://stackoverflow.com/questions/tagged/f-string&quot;&gt;f-string&lt;/a&gt; pero con la sobrecarga adicional de declarar un dict para contener las variables (f-string no requiere un dict).</target>
        </trans-unit>
        <trans-unit id="e9f49a602092f2600ab4dbfbc225050cee771531" translate="yes" xml:space="preserve">
          <source>This really just serves to summarize Lorin Hochstein's &lt;a href=&quot;https://stackoverflow.com/a/36926/7954504&quot;&gt;answer&lt;/a&gt; but I find it helpful.</source>
          <target state="translated">Esto realmente sirve para resumir la &lt;a href=&quot;https://stackoverflow.com/a/36926/7954504&quot;&gt;respuesta de&lt;/a&gt; Lorin Hochstein, pero me parece &amp;uacute;til.</target>
        </trans-unit>
        <trans-unit id="c41e617275ef98f70808b26e784db9772637feed" translate="yes" xml:space="preserve">
          <source>This table is handy for using &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;**&lt;/code&gt; in function &lt;em&gt;construction&lt;/em&gt; and function &lt;em&gt;call&lt;/em&gt;:</source>
          <target state="translated">Esta tabla es &amp;uacute;til para usar &lt;code&gt;*&lt;/code&gt; y &lt;code&gt;**&lt;/code&gt; en la &lt;em&gt;construcci&amp;oacute;n de&lt;/em&gt; funciones y la &lt;em&gt;llamada a&lt;/em&gt; funciones:</target>
        </trans-unit>
        <trans-unit id="d26fb807a328081eaceffc49cd97f7b17a9ac470" translate="yes" xml:space="preserve">
          <source>Unpacking with &lt;code&gt;**&lt;/code&gt; is also useful when using python &lt;code&gt;str.format&lt;/code&gt;.</source>
          <target state="translated">Desempaquetar con &lt;code&gt;**&lt;/code&gt; tambi&amp;eacute;n es &amp;uacute;til cuando se usa python &lt;code&gt;str.format&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="861a0e430ffac5e4ae6e11b7a947f2c32d388cf4" translate="yes" xml:space="preserve">
          <source>Usage:</source>
          <target state="translated">Usage:</target>
        </trans-unit>
        <trans-unit id="99fb84d8b321ffa9a9069c867daeb8f9d53c541c" translate="yes" xml:space="preserve">
          <source>Use with string formatting</source>
          <target state="translated">Usar con formato de cadena</target>
        </trans-unit>
        <trans-unit id="4a799ab566a9451f574fb3da7249ae89668ffe3b" translate="yes" xml:space="preserve">
          <source>Used like the following:</source>
          <target state="translated">Usado como el siguiente:</target>
        </trans-unit>
        <trans-unit id="43a00a174601ad173cf07207f8cd33994f1103d9" translate="yes" xml:space="preserve">
          <source>We can also call it using another function, into which we just provide &lt;code&gt;a&lt;/code&gt;:</source>
          <target state="translated">Tambi&amp;eacute;n podemos llamarlo usando otra funci&amp;oacute;n, en la que solo proporcionamos &lt;code&gt;a&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="eec1d477fb271bf52684fd29e0ae7094d81e0a4d" translate="yes" xml:space="preserve">
          <source>We can check the online help for the function's signature, with &lt;code&gt;help(foo)&lt;/code&gt;, which tells us</source>
          <target state="translated">Podemos consultar la ayuda en l&amp;iacute;nea para la firma de la funci&amp;oacute;n, con &lt;code&gt;help(foo)&lt;/code&gt; , que nos dice</target>
        </trans-unit>
        <trans-unit id="071466cc8ede79b9743ebb45f3b9307858ccd94e" translate="yes" xml:space="preserve">
          <source>We might be able to handle this differently, but we can certainly extract the redundancy with a decorator, and so our below example demonstrates how &lt;code&gt;*args&lt;/code&gt; and &lt;code&gt;**kwargs&lt;/code&gt; can be very useful:</source>
          <target state="translated">Es posible que podamos manejar esto de manera diferente, pero ciertamente podemos extraer la redundancia con un decorador, por lo que nuestro siguiente ejemplo demuestra c&amp;oacute;mo &lt;code&gt;*args&lt;/code&gt; y &lt;code&gt;**kwargs&lt;/code&gt; pueden ser muy &amp;uacute;tiles:</target>
        </trans-unit>
        <trans-unit id="b7ea4cbb24ea5b0d07e6f28ecfaf88c925dadd18" translate="yes" xml:space="preserve">
          <source>We must explicitly pass the &lt;code&gt;kwarg&lt;/code&gt; parameter as a keyword argument.</source>
          <target state="translated">Debemos pasar expl&amp;iacute;citamente el par&amp;aacute;metro &lt;code&gt;kwarg&lt;/code&gt; como argumento de palabra clave.</target>
        </trans-unit>
        <trans-unit id="afb7cb9daf1c756ee48ed6afd251e0968bb9474f" translate="yes" xml:space="preserve">
          <source>We typically use these when we don't know what our function is going to receive or how many arguments we may be passing, and sometimes even when naming every variable separately would get very messy and redundant (but this is a case where usually explicit is better than implicit).</source>
          <target state="translated">Normalmente los utilizamos cuando no sabemos qué función va a recibir o cuántos argumentos podemos estar pasando,y a veces incluso cuando nombrar cada variable por separado se volvería muy desordenado y redundante (pero éste es un caso en el que normalmente lo explícito es mejor que lo implícito).</target>
        </trans-unit>
        <trans-unit id="233bc8dee4817e4eae3ea779d6439f59b4f59bbb" translate="yes" xml:space="preserve">
          <source>What does ** (double star/asterisk) and * (star/asterisk) do for parameters</source>
          <target state="translated">¿Qué hacen **(doble starasterisco)y*(starasterisco)para los parámetros</target>
        </trans-unit>
        <trans-unit id="043cce10c16f63cb0c473e49b9c9a719c0674492" translate="yes" xml:space="preserve">
          <source>What does &lt;code&gt;**&lt;/code&gt; (double star) and &lt;code&gt;*&lt;/code&gt; (star) do for parameters</source>
          <target state="translated">&amp;iquest;Qu&amp;eacute; hacen &lt;code&gt;**&lt;/code&gt; (estrella doble) y &lt;code&gt;*&lt;/code&gt; (estrella) para los par&amp;aacute;metros</target>
        </trans-unit>
        <trans-unit id="8af1dddd6c2192a020edaa51d45191a8693034d0" translate="yes" xml:space="preserve">
          <source>Will produce:</source>
          <target state="translated">Producirá:</target>
        </trans-unit>
        <trans-unit id="1ed3fd9bd4c1f256dcc104023a64d45285ef0146" translate="yes" xml:space="preserve">
          <source>With the following code:</source>
          <target state="translated">Con el siguiente código:</target>
        </trans-unit>
        <trans-unit id="89e91d292d7914d17c805c0dd69622e7e39268be" translate="yes" xml:space="preserve">
          <source>You can (and should) choose any appropriate name, but if the intention is for the arguments to be of non-specific semantics, &lt;code&gt;args&lt;/code&gt; and &lt;code&gt;kwargs&lt;/code&gt; are standard names.</source>
          <target state="translated">Puede (y debe) elegir cualquier nombre apropiado, pero si la intenci&amp;oacute;n es que los argumentos sean de sem&amp;aacute;ntica no espec&amp;iacute;fica, &lt;code&gt;args&lt;/code&gt; y &lt;code&gt;kwargs&lt;/code&gt; son nombres est&amp;aacute;ndar.</target>
        </trans-unit>
        <trans-unit id="c10ea9af188d5d91cbab26c0e813033c66126cd5" translate="yes" xml:space="preserve">
          <source>You can also use &lt;code&gt;*args&lt;/code&gt; and &lt;code&gt;**kwargs&lt;/code&gt; to pass in parameters from lists (or any iterable) and dicts (or any mapping), respectively.</source>
          <target state="translated">Tambi&amp;eacute;n puede usar &lt;code&gt;*args&lt;/code&gt; y &lt;code&gt;**kwargs&lt;/code&gt; para pasar par&amp;aacute;metros de listas (o cualquier iterable) y dictos (o cualquier mapeo), respectivamente.</target>
        </trans-unit>
        <trans-unit id="b42ee187d69586d1f39155928626c35d1cde5fb8" translate="yes" xml:space="preserve">
          <source>You can call this function with positional arguments as well:</source>
          <target state="translated">También puedes llamar a esta función con argumentos posicionales:</target>
        </trans-unit>
        <trans-unit id="277476897ef47b624210790858b6cdfcc04e5aa8" translate="yes" xml:space="preserve">
          <source>You can do things like:</source>
          <target state="translated">Puedes hacer cosas como:</target>
        </trans-unit>
        <trans-unit id="080bdd4b11396c960350e4e97d2ff50dbf02b258" translate="yes" xml:space="preserve">
          <source>You can have &lt;a href=&quot;https://www.python.org/dev/peps/pep-3102/&quot;&gt;keyword only arguments&lt;/a&gt; after the &lt;code&gt;*args&lt;/code&gt; - for example, here, &lt;code&gt;kwarg2&lt;/code&gt; must be given as a keyword argument - not positionally:</source>
          <target state="translated">Puede tener &lt;a href=&quot;https://www.python.org/dev/peps/pep-3102/&quot;&gt;argumentos de solo palabras clave&lt;/a&gt; despu&amp;eacute;s de &lt;code&gt;*args&lt;/code&gt; , por ejemplo, aqu&amp;iacute;, &lt;code&gt;kwarg2&lt;/code&gt; debe darse como un argumento de palabra clave, no posicionalmente:</target>
        </trans-unit>
        <trans-unit id="794557036415543543af5f1912c1507e42924507" translate="yes" xml:space="preserve">
          <source>You cannot use a non-optional argument twice.</source>
          <target state="translated">No puedes usar un argumento no opcional dos veces.</target>
        </trans-unit>
        <trans-unit id="8be25461c64d172078a03a0ec37aabb6b3175e9f" translate="yes" xml:space="preserve">
          <source>a) &lt;strong&gt;function call&lt;/strong&gt;</source>
          <target state="translated">a) &lt;strong&gt;llamada de funci&amp;oacute;n&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5b8ece01faa7de12cfc700e3749c548d91f9ccb9" translate="yes" xml:space="preserve">
          <source>b) &lt;strong&gt;function definition&lt;/strong&gt;</source>
          <target state="translated">b) &lt;strong&gt;definici&amp;oacute;n de funci&amp;oacute;n&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="08311cc2119febe4e48dfcb0db0929fd8ae81d7e" translate="yes" xml:space="preserve">
          <source>it can be called with any number of arguments and keyword arguments. The non-keyword arguments get packed into a list called &lt;code&gt;args&lt;/code&gt; inside the the function body and the keyword arguments get packed into a dict called &lt;code&gt;kwds&lt;/code&gt; inside the function body.</source>
          <target state="translated">Se puede invocar con cualquier n&amp;uacute;mero de argumentos y argumentos de palabras clave. Los argumentos que no son palabras clave se empaquetan en una lista llamada &lt;code&gt;args&lt;/code&gt; dentro del cuerpo de la funci&amp;oacute;n y los argumentos de palabras clave se empaquetan en un dict llamado &lt;code&gt;kwds&lt;/code&gt; dentro del cuerpo de la funci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="f185697f8ffee0494f5a9ca561ffa16269aaa2e4" translate="yes" xml:space="preserve">
          <source>now inside the function body, when the function is called, there are two local variables, &lt;code&gt;args&lt;/code&gt; which is a list having value &lt;code&gt;[&quot;this&quot;, &quot;is a list of&quot;, &quot;non-keyword&quot;, &quot;arguments&quot;]&lt;/code&gt; and &lt;code&gt;kwds&lt;/code&gt; which is a &lt;code&gt;dict&lt;/code&gt; having value &lt;code&gt;{&quot;keyword&quot; : &quot;ligma&quot;, &quot;options&quot; : [1,2,3]}&lt;/code&gt;</source>
          <target state="translated">ahora dentro del cuerpo de la funci&amp;oacute;n, cuando se llama a la funci&amp;oacute;n, hay dos variables locales, &lt;code&gt;args&lt;/code&gt; , que es una lista que tiene un valor &lt;code&gt;[&quot;this&quot;, &quot;is a list of&quot;, &quot;non-keyword&quot;, &quot;arguments&quot;]&lt;/code&gt; y &lt;code&gt;kwds&lt;/code&gt; que es un &lt;code&gt;dict&lt;/code&gt; que tiene el valor &lt;code&gt;{&quot;keyword&quot; : &quot;ligma&quot;, &quot;options&quot; : [1,2,3]}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5a47e545e87233be9061b9f3c1748aeec79ce9e9" translate="yes" xml:space="preserve">
          <source>python 3.x</source>
          <target state="translated">pitón 3.x</target>
        </trans-unit>
        <trans-unit id="07fcd4ad0499856dfdeabb4c0a597ca70871dd39" translate="yes" xml:space="preserve">
          <source>the output is</source>
          <target state="translated">la salida es</target>
        </trans-unit>
        <trans-unit id="c0312cefbf9b17e9389098ab519b7a2c6225ccac" translate="yes" xml:space="preserve">
          <source>unpacking with &lt;code&gt;**&lt;/code&gt;</source>
          <target state="translated">desempacando con &lt;code&gt;**&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="469f623755b36ae79ca6ef17aeded6d0e236120c" translate="yes" xml:space="preserve">
          <source>unzip_x will be [1, 2, 3], unzip_y will be [4, 5, 6]</source>
          <target state="translated">unzip_x será [1,2,3],unzip_y será [4,5,6]</target>
        </trans-unit>
        <trans-unit id="b45d58392bc34be02450e99b0b277b08dd9bca68" translate="yes" xml:space="preserve">
          <source>use with string formatting</source>
          <target state="translated">usar con el formato de la cadena</target>
        </trans-unit>
        <trans-unit id="fb8d239cc4547ad356ef28527d756262f9bef562" translate="yes" xml:space="preserve">
          <source>when the '*' or '**' operator is used in a &lt;strong&gt;function call&lt;/strong&gt; -</source>
          <target state="translated">cuando el operador '*' o '**' se usa en una &lt;strong&gt;llamada de funci&amp;oacute;n&lt;/strong&gt; -</target>
        </trans-unit>
        <trans-unit id="d8655e943d84ac23e65b556422ceb5ee5d1db650" translate="yes" xml:space="preserve">
          <source>which can be instatiated as</source>
          <target state="translated">que puede ser instaurado como</target>
        </trans-unit>
        <trans-unit id="99c16e7d13d5e5df076271fc43ca71919374d7b2" translate="yes" xml:space="preserve">
          <source>which prints:</source>
          <target state="translated">que imprime:</target>
        </trans-unit>
        <trans-unit id="56f64359bcaff739c2bfb83bbb0ff89946112fc6" translate="yes" xml:space="preserve">
          <source>you can call it with by unpacking iterables or mappings you have in the calling scope:</source>
          <target state="translated">con el que puedes llamarlo desempacando los iterables o mapeos que tienes en el ámbito de llamada:</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
