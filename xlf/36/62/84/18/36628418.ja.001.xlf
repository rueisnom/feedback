<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/36628418">
    <body>
      <group id="36628418">
        <trans-unit id="8584b9fc9c78f36dbcad73668ac8face924fb95b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Let's see how different sanitizing methods affect the password -&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;さまざまなサニタイズ方法がパスワードにどのように影響するか見てみましょう-&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="993e426272dc393d633c21e33ded7154d984ff4b" translate="yes" xml:space="preserve">
          <source>Additional Mapping Rule: Any instances of non-ASCII space MUST be
     mapped to ASCII space (U+0020); a non-ASCII space is any Unicode
     code point having a Unicode general category of &quot;Zs&quot; (with the
     exception of U+0020).</source>
          <target state="translated">追加のマッピング規則 非ASCII空間のインスタンスはすべてASCII空間にマッピングされなければならない[MUST](U+0020)。非ASCII空間のすべてのインスタンスは、ASCII空間(U+0020)にマッピングされなければなりません(MUST)。非ASCII空間とは、「Zs」のUnicode一般分類を持つUnicodeコード点のことです(U+0020を除く)。</target>
        </trans-unit>
        <trans-unit id="cd42ef8da1a91f2450cd1212ca3d7bfb2c94f765" translate="yes" xml:space="preserve">
          <source>Before hashing the password, you should normalise it as described in &lt;a href=&quot;https://tools.ietf.org/html/rfc7613#section-4&quot;&gt;section 4 of RFC 7613&lt;/a&gt;.  In particular:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;パスワードをハッシュする前に&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc7613#section-4&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、RFC 7613のセクション4で&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;説明されているように、パスワードを正規化する必要が&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あります&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;特に：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c4ad68993deef0064341abbbc8f7bdf52d78bf7e" translate="yes" xml:space="preserve">
          <source>Cleansing User Passwords</source>
          <target state="translated">ユーザーパスワードのクレンジング</target>
        </trans-unit>
        <trans-unit id="4c7b83a9818b81fd2eb75d1d84d4ae0e8fa385d0" translate="yes" xml:space="preserve">
          <source>Could be hashed to &lt;code&gt;$2y$10$1tOKcWUWBW5gBka04tGMO.BH7gs/qjAHZsC5wyG0zmI2C.KgaqU5G&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &lt;code&gt;$2y$10$1tOKcWUWBW5gBka04tGMO.BH7gs/qjAHZsC5wyG0zmI2C.KgaqU5G&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;ハッシュできます&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3cf1c4fafb69452ffdc4cd55a0ba0cebece07899" translate="yes" xml:space="preserve">
          <source>How should I escape or cleanse user-provided passwords before I hash them and store them in my database?</source>
          <target state="translated">ユーザーが提供したパスワードをハッシュ化してデータベースに保存する前に、どのようにしてパスワードをエスケープまたはクリーンアップするべきですか?</target>
        </trans-unit>
        <trans-unit id="5dae5be14975f6336e3378cdf664d2fc045e34c8" translate="yes" xml:space="preserve">
          <source>If you follow the mantras of allowing users to use the &lt;a href=&quot;https://xkcd.com/936/&quot;&gt;passwords / phrases&lt;/a&gt; they desire and you &lt;a href=&quot;http://jayblanchard.net/security_fail_passwords.html&quot;&gt;don't limit passwords&lt;/a&gt;, allowing any length, any number of spaces and any special characters hashing will make the password/passphrase safe no matter what is contained within the password. As of right now the most common hash (the default), &lt;a href=&quot;http://php.net/manual/en/password.constants.php&quot;&gt;&lt;code&gt;PASSWORD_BCRYPT&lt;/code&gt;&lt;/a&gt;, turns the password into a 60 character wide string containing a random salt along with the hashed password information and a cost (the algorithmic cost of creating the hash):</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ユーザーが&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;希望&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;する&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://xkcd.com/936/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;パスワード/フレーズの&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用を許可するというマントラに従い、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;パスワードを&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://jayblanchard.net/security_fail_passwords.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;制限しない場合&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、長さ、スペースの数、および特殊文字のハッシュを許可すると、パスワード/パスフレーズが何に含まれていても安全になりますパスワード。現在、最も一般的なハッシュ（デフォルト）&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://php.net/manual/en/password.constants.php&quot;&gt; &lt;code&gt;PASSWORD_BCRYPT&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、パスワードを、ハッシュされたパスワード情報とコスト（ハッシュを作成するアルゴリズムのコスト）とともにランダムなソルトを含む60文字幅の文字列に変換します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="26a65262e8cd2a578fc0f4a062da77338e02bd81" translate="yes" xml:space="preserve">
          <source>Normalization Rule: Unicode Normalization Form C (NFC) MUST be
     applied to all characters.</source>
          <target state="translated">正規化規則。Unicode 正規化フォーム C (NFC)は、 すべてのキ ャ ラ ク タ に適用す る 必要があ り ます (MUST)。</target>
        </trans-unit>
        <trans-unit id="ce65f23c1bb991038111916fed990ae39379a8f9" translate="yes" xml:space="preserve">
          <source>PASSWORD_BCRYPT is used to create new password hashes using the CRYPT_BLOWFISH algorithm. This will always result in a hash using the &quot;$2y$&quot; crypt format, which is always 60 characters wide.</source>
          <target state="translated">PASSWORD_BCRYPTは、CRYPT_BLOWFISHアルゴリズムを使用して新しいパスワードハッシュを作成するために使用されます。これは常に60文字幅の&quot;$2y$&quot;暗号フォーマットを使用したハッシュになります。</target>
        </trans-unit>
        <trans-unit id="fd19e6d6cb4b26b0ef86cb95d8b5872a311f4828" translate="yes" xml:space="preserve">
          <source>Results:</source>
          <target state="translated">Results:</target>
        </trans-unit>
        <trans-unit id="63837fcad7ce457f056c83742176fbd69432d1fc" translate="yes" xml:space="preserve">
          <source>The act of hashing a password is the act of making the password safe to store in your database.  The hash function doesn't give special meaning to any bytes, so no cleansing of its input is required for security reasons</source>
          <target state="translated">パスワードをハッシュ化するという行為は、パスワードをデータベースに保存しても安全なものにするための行為です。ハッシュ関数はどのバイトにも特別な意味を与えないので、セキュリティ上の理由から入力のクレンジングは必要ありません。</target>
        </trans-unit>
        <trans-unit id="feb555691dadde95b7d9a6a18fa6e85ab5daf0b7" translate="yes" xml:space="preserve">
          <source>The password is &lt;code&gt;I'm a &quot;dessert topping&quot; &amp;amp; a &amp;lt;floor wax&amp;gt;!&lt;/code&gt; (There are 5 spaces at the end of the password which are not displayed here.)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;パスワードは&lt;/font&gt;&lt;/font&gt; &lt;code&gt;I'm a &quot;dessert topping&quot; &amp;amp; a &amp;lt;floor wax&amp;gt;!&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（パスワードの最後に5つのスペースがあり、ここには表示されません。）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dbf8102cff6399c48e82f6e369e4ed7d537a12d6" translate="yes" xml:space="preserve">
          <source>The space requirements for storing the hash are subject to change as different hashing methods are added to the function, so it is always better to go larger on the column type for the stored hash, such as &lt;code&gt;VARCHAR(255)&lt;/code&gt; or &lt;code&gt;TEXT&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ハッシュを格納するためのスペース要件は、関数に異なるハッシュ方式が追加されると変更される可能性があるため、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;VARCHAR(255)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;や&lt;/font&gt;&lt;/font&gt; &lt;code&gt;TEXT&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;など、格納されたハッシュの列タイプを常に大きくすることをお勧めします&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2945462a303bfcb25eb372109a372bf65a9cde6d" translate="yes" xml:space="preserve">
          <source>This attempts to ensure that if the user types the same password but using a different input method, the password should still be accepted.</source>
          <target state="translated">これは、ユーザが同じパスワードを入力しても、異なる入力方法を使用している場合でも、パスワードが受け入れられるようにしようとするものです。</target>
        </trans-unit>
        <trans-unit id="e90840f680684198f73a8aa5f29b24d2d026e171" translate="yes" xml:space="preserve">
          <source>Using a PHP version less than 5.5? You can use the &lt;code&gt;password_hash()&lt;/code&gt;&lt;a href=&quot;https://github.com/ircmaxell/password_compat&quot;&gt;compatibility pack&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;5.5未満のPHPバージョンを使用していますか？&lt;/font&gt;&lt;/font&gt; &lt;code&gt;password_hash()&lt;/code&gt; &lt;a href=&quot;https://github.com/ircmaxell/password_compat&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;互換パックを&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用でき&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="40f9bf51e55b0e770125a81675f59fe1177266be" translate="yes" xml:space="preserve">
          <source>What happens when we send these to &lt;code&gt;password_hash()&lt;/code&gt;? They all get hashed, just as the query did above. The problem comes in when you try to verify the password. If we employ one or more of these methods we must re-employ them prior to comparing them with &lt;a href=&quot;http://php.net/manual/en/function.password-verify.php&quot;&gt;&lt;code&gt;password_verify()&lt;/code&gt;&lt;/a&gt;. The following would fail:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これらを&lt;/font&gt;&lt;/font&gt; &lt;code&gt;password_hash()&lt;/code&gt; に&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;送信するとどうなり&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;か？&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;上記のクエリと同じように、すべてハッシュ化されます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;パスワードを確認しようとすると、問題が発生します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これらのメソッドを1つ以上使用する場合、それらを&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://php.net/manual/en/function.password-verify.php&quot;&gt; &lt;code&gt;password_verify()&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と比較する前に再採用する必要があり&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;以下は失敗します：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cf7173ef9053b8b0fcd2284d238e848860c0b112" translate="yes" xml:space="preserve">
          <source>When PHP developers consider hashing users' passwords for security purposes, they often tend to think of those passwords like they would any other user-provided data. This subject comes up often in PHP questions related to password storage; the developer often wants to cleanse the password using functions such as &lt;code&gt;escape_string()&lt;/code&gt;(in various iterations), &lt;code&gt;htmlspecialchars()&lt;/code&gt;, &lt;code&gt;addslashes()&lt;/code&gt; and others before hashing it and storing it in the database.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;PHP開発者がセキュリティ上の目的でユーザーのパスワードをハッシュすることを検討するとき、彼らはしばしば他のユーザー提供のデータと同じようにそれらのパスワードを考える傾向があります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この問題は、パスワードの保存に関連するPHPの質問でよく出てきます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;開発者は多くの場合のような機能を使用してパスワードを浄化したい&lt;/font&gt;&lt;/font&gt; &lt;code&gt;escape_string()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（各種の反復で）、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;htmlspecialchars()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;addslashes()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と、それをハッシュし、それをデータベースに格納する前に他の人。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="563585def1cd6c2bc25d69e62939e8d210b0a248" translate="yes" xml:space="preserve">
          <source>When we apply the following methods of trimming we get some wildy different results:</source>
          <target state="translated">以下のようなトリミング方法を適用すると、野生的に異なる結果が得られます。</target>
        </trans-unit>
        <trans-unit id="d654cef1c3ae03d4ad2b6cc790e7cec71243c5b1" translate="yes" xml:space="preserve">
          <source>You could use a complete SQL query as your password and it would be hashed, making it unexecutable by the SQL engine e.g.,</source>
          <target state="translated">完全なSQLクエリをパスワードとして使用することができ、それはハッシュ化され、SQLエンジンでは実行できないようになります。</target>
        </trans-unit>
        <trans-unit id="b3561d5cf09d787a977934588e811a43d9c68706" translate="yes" xml:space="preserve">
          <source>You really shouldn't use &lt;a href=&quot;https://security.stackexchange.com/questions/19906/is-md5-considered-insecure&quot;&gt;MD5 password hashes&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;https://security.stackexchange.com/questions/19906/is-md5-considered-insecure&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MD5パスワードハッシュ&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は使用しないでください&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="de6c80d4166acf55031f3d82a36a9538fa673f08" translate="yes" xml:space="preserve">
          <source>You should never escape, trim or use any other cleansing mechanism on passwords you'll be hashing with PHP's &lt;a href=&quot;http://php.net/manual/en/function.password-hash.php&quot;&gt;&lt;code&gt;password_hash()&lt;/code&gt;&lt;/a&gt; for a number of reasons, the single largest of which is because doing additional cleansing to the password requires unnecessary additional code.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;いくつかの理由で、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;PHPの&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://php.net/manual/en/function.password-hash.php&quot;&gt; &lt;code&gt;password_hash()&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用して&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ハッシュするパスワードに対して、エスケープ、トリム、またはその他のクレンジングメカニズムを決して使用しないでください。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;その最大の原因の1つは、パスワードに追加のクレンジングを行うために不要な追加コードが必要になるためです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d1a0f994fbdfb81a6dc7477fff34fdb2a5eb3c37" translate="yes" xml:space="preserve">
          <source>You will argue (and you see it in every post where user data is accepted for use in your systems) that we should cleanse all user input and you would be right for every other piece of information we're accepting from our users. Passwords are different. &lt;em&gt;Hashed passwords cannot offer any SQL injection threat because the string is turned into hash prior to storing in the database.&lt;/em&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私たちはすべてのユーザー入力をクレンジングする必要があり、ユーザーからユーザーが受け入れる他のすべての情報については正しいと主張します（そして、ユーザーデータがシステムでの使用が受け入れられるすべての投稿に表示されます）。パスワードが異なります。&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;文字列はデータベースに格納される前にハッシュに変換されるため、ハッシュされたパスワードはSQLインジェクションの脅威を提供できません。&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8254c491075ba65f6b2a0dcd3390a961757f4feb" translate="yes" xml:space="preserve">
          <source>You would have to run the posted password through the cleansing method you chose before using the result of that in password verification. It is an unnecessary set of steps and will make the hash no better.</source>
          <target state="translated">その結果をパスワード検証に使う前に、自分で選んだクレンジング方法で投稿されたパスワードを実行しなければならないでしょう。これは不必要なステップのセットであり、ハッシュが良くなることはありません。</target>
        </trans-unit>
        <trans-unit id="a5230bf3ac1fc697c044aa12dc9e2fb2c6ea3dcf" translate="yes" xml:space="preserve">
          <source>and:</source>
          <target state="translated">and:</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
