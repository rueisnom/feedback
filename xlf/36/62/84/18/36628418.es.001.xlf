<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/36628418">
    <body>
      <group id="36628418">
        <trans-unit id="8584b9fc9c78f36dbcad73668ac8face924fb95b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Let's see how different sanitizing methods affect the password -&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Veamos c&amp;oacute;mo los diferentes m&amp;eacute;todos de desinfecci&amp;oacute;n afectan la contrase&amp;ntilde;a:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="993e426272dc393d633c21e33ded7154d984ff4b" translate="yes" xml:space="preserve">
          <source>Additional Mapping Rule: Any instances of non-ASCII space MUST be
     mapped to ASCII space (U+0020); a non-ASCII space is any Unicode
     code point having a Unicode general category of &quot;Zs&quot; (with the
     exception of U+0020).</source>
          <target state="translated">Regla de mapeo adicional:Cualquier instancia de espacio no-ASCII DEBE ser mapeada a espacio ASCII (U+0020);un espacio no-ASCII es cualquier punto de código Unicode que tenga una categoría general Unicode de &quot;Zs&quot; (con la excepción de U+0020).</target>
        </trans-unit>
        <trans-unit id="cd42ef8da1a91f2450cd1212ca3d7bfb2c94f765" translate="yes" xml:space="preserve">
          <source>Before hashing the password, you should normalise it as described in &lt;a href=&quot;https://tools.ietf.org/html/rfc7613#section-4&quot;&gt;section 4 of RFC 7613&lt;/a&gt;.  In particular:</source>
          <target state="translated">Antes de cifrar la contrase&amp;ntilde;a, debe normalizarla como se describe en la &lt;a href=&quot;https://tools.ietf.org/html/rfc7613#section-4&quot;&gt;secci&amp;oacute;n 4 de RFC 7613&lt;/a&gt; . En particular:</target>
        </trans-unit>
        <trans-unit id="c4ad68993deef0064341abbbc8f7bdf52d78bf7e" translate="yes" xml:space="preserve">
          <source>Cleansing User Passwords</source>
          <target state="translated">Limpieza de las contraseñas de los usuarios</target>
        </trans-unit>
        <trans-unit id="4c7b83a9818b81fd2eb75d1d84d4ae0e8fa385d0" translate="yes" xml:space="preserve">
          <source>Could be hashed to &lt;code&gt;$2y$10$1tOKcWUWBW5gBka04tGMO.BH7gs/qjAHZsC5wyG0zmI2C.KgaqU5G&lt;/code&gt;</source>
          <target state="translated">Podr&amp;iacute;a reducirse a &lt;code&gt;$2y$10$1tOKcWUWBW5gBka04tGMO.BH7gs/qjAHZsC5wyG0zmI2C.KgaqU5G&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3cf1c4fafb69452ffdc4cd55a0ba0cebece07899" translate="yes" xml:space="preserve">
          <source>How should I escape or cleanse user-provided passwords before I hash them and store them in my database?</source>
          <target state="translated">¿Cómo debería escapar o limpiar las contraseñas proporcionadas por el usuario antes de que las tenga y las almacene en mi base de datos?</target>
        </trans-unit>
        <trans-unit id="5dae5be14975f6336e3378cdf664d2fc045e34c8" translate="yes" xml:space="preserve">
          <source>If you follow the mantras of allowing users to use the &lt;a href=&quot;https://xkcd.com/936/&quot;&gt;passwords / phrases&lt;/a&gt; they desire and you &lt;a href=&quot;http://jayblanchard.net/security_fail_passwords.html&quot;&gt;don't limit passwords&lt;/a&gt;, allowing any length, any number of spaces and any special characters hashing will make the password/passphrase safe no matter what is contained within the password. As of right now the most common hash (the default), &lt;a href=&quot;http://php.net/manual/en/password.constants.php&quot;&gt;&lt;code&gt;PASSWORD_BCRYPT&lt;/code&gt;&lt;/a&gt;, turns the password into a 60 character wide string containing a random salt along with the hashed password information and a cost (the algorithmic cost of creating the hash):</source>
          <target state="translated">Si sigue los mantras de permitir que los usuarios usen las &lt;a href=&quot;https://xkcd.com/936/&quot;&gt;contrase&amp;ntilde;as / frases&lt;/a&gt; que desean y &lt;a href=&quot;http://jayblanchard.net/security_fail_passwords.html&quot;&gt;no limita las contrase&amp;ntilde;as&lt;/a&gt; , permitir cualquier longitud, cualquier n&amp;uacute;mero de espacios y cualquier hash de caracteres especiales har&amp;aacute; que la contrase&amp;ntilde;a / frase de contrase&amp;ntilde;a sea segura sin importar lo que contenga la contrase&amp;ntilde;a. A partir de ahora, el hash m&amp;aacute;s com&amp;uacute;n (el predeterminado), &lt;a href=&quot;http://php.net/manual/en/password.constants.php&quot;&gt; &lt;code&gt;PASSWORD_BCRYPT&lt;/code&gt; &lt;/a&gt; , convierte la contrase&amp;ntilde;a en una cadena de 60 caracteres de ancho que contiene una sal aleatoria junto con la informaci&amp;oacute;n de la contrase&amp;ntilde;a hash y un costo (el costo algor&amp;iacute;tmico de crear el hash):</target>
        </trans-unit>
        <trans-unit id="26a65262e8cd2a578fc0f4a062da77338e02bd81" translate="yes" xml:space="preserve">
          <source>Normalization Rule: Unicode Normalization Form C (NFC) MUST be
     applied to all characters.</source>
          <target state="translated">Regla de normalización:La forma C de normalización de Unicode (NFC)DEBE aplicarse a todos los caracteres.</target>
        </trans-unit>
        <trans-unit id="ce65f23c1bb991038111916fed990ae39379a8f9" translate="yes" xml:space="preserve">
          <source>PASSWORD_BCRYPT is used to create new password hashes using the CRYPT_BLOWFISH algorithm. This will always result in a hash using the &quot;$2y$&quot; crypt format, which is always 60 characters wide.</source>
          <target state="translated">PASSWORD_BCRYPT se usa para crear nuevos hashes de contraseñas usando el algoritmo CRYPT_BLOWFISH.Esto siempre resultará en un hash usando el formato de cripta &quot;$2y$&quot;,que siempre tiene 60 caracteres de ancho.</target>
        </trans-unit>
        <trans-unit id="fd19e6d6cb4b26b0ef86cb95d8b5872a311f4828" translate="yes" xml:space="preserve">
          <source>Results:</source>
          <target state="translated">Results:</target>
        </trans-unit>
        <trans-unit id="63837fcad7ce457f056c83742176fbd69432d1fc" translate="yes" xml:space="preserve">
          <source>The act of hashing a password is the act of making the password safe to store in your database.  The hash function doesn't give special meaning to any bytes, so no cleansing of its input is required for security reasons</source>
          <target state="translated">El acto de hacer una contraseña es el acto de hacer que la contraseña sea segura para guardarla en su base de datos.La función de hash no le da un significado especial a ningún byte,por lo que no se requiere la limpieza de su entrada por razones de seguridad</target>
        </trans-unit>
        <trans-unit id="feb555691dadde95b7d9a6a18fa6e85ab5daf0b7" translate="yes" xml:space="preserve">
          <source>The password is &lt;code&gt;I'm a &quot;dessert topping&quot; &amp;amp; a &amp;lt;floor wax&amp;gt;!&lt;/code&gt; (There are 5 spaces at the end of the password which are not displayed here.)</source>
          <target state="translated">&amp;iexcl;La contrase&amp;ntilde;a es &lt;code&gt;I'm a &quot;dessert topping&quot; &amp;amp; a &amp;lt;floor wax&amp;gt;!&lt;/code&gt; (Hay 5 espacios al final de la contrase&amp;ntilde;a que no se muestran aqu&amp;iacute;).</target>
        </trans-unit>
        <trans-unit id="dbf8102cff6399c48e82f6e369e4ed7d537a12d6" translate="yes" xml:space="preserve">
          <source>The space requirements for storing the hash are subject to change as different hashing methods are added to the function, so it is always better to go larger on the column type for the stored hash, such as &lt;code&gt;VARCHAR(255)&lt;/code&gt; or &lt;code&gt;TEXT&lt;/code&gt;.</source>
          <target state="translated">Los requisitos de espacio para almacenar el hash est&amp;aacute;n sujetos a cambios a medida que se agregan diferentes m&amp;eacute;todos de hash a la funci&amp;oacute;n, por lo que siempre es mejor ampliar el tipo de columna para el hash almacenado, como &lt;code&gt;VARCHAR(255)&lt;/code&gt; o &lt;code&gt;TEXT&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2945462a303bfcb25eb372109a372bf65a9cde6d" translate="yes" xml:space="preserve">
          <source>This attempts to ensure that if the user types the same password but using a different input method, the password should still be accepted.</source>
          <target state="translated">Con ello se intenta garantizar que si el usuario escribe la misma contraseña pero utilizando un método de entrada diferente,la contraseña siga siendo aceptada.</target>
        </trans-unit>
        <trans-unit id="e90840f680684198f73a8aa5f29b24d2d026e171" translate="yes" xml:space="preserve">
          <source>Using a PHP version less than 5.5? You can use the &lt;code&gt;password_hash()&lt;/code&gt;&lt;a href=&quot;https://github.com/ircmaxell/password_compat&quot;&gt;compatibility pack&lt;/a&gt;.</source>
          <target state="translated">&amp;iquest;Usa una versi&amp;oacute;n de PHP inferior a 5.5? Puede usar el &lt;a href=&quot;https://github.com/ircmaxell/password_compat&quot;&gt;paquete de compatibilidad&lt;/a&gt; &lt;code&gt;password_hash()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="40f9bf51e55b0e770125a81675f59fe1177266be" translate="yes" xml:space="preserve">
          <source>What happens when we send these to &lt;code&gt;password_hash()&lt;/code&gt;? They all get hashed, just as the query did above. The problem comes in when you try to verify the password. If we employ one or more of these methods we must re-employ them prior to comparing them with &lt;a href=&quot;http://php.net/manual/en/function.password-verify.php&quot;&gt;&lt;code&gt;password_verify()&lt;/code&gt;&lt;/a&gt;. The following would fail:</source>
          <target state="translated">&amp;iquest;Qu&amp;eacute; sucede cuando enviamos estos a &lt;code&gt;password_hash()&lt;/code&gt; ? Todos se convierten en hash, tal como lo hizo la consulta anterior. El problema surge cuando intenta verificar la contrase&amp;ntilde;a. Si empleamos uno o m&amp;aacute;s de estos m&amp;eacute;todos, debemos volver a emplearlos antes de compararlos con &lt;a href=&quot;http://php.net/manual/en/function.password-verify.php&quot;&gt; &lt;code&gt;password_verify()&lt;/code&gt; &lt;/a&gt; . Lo siguiente fallar&amp;iacute;a:</target>
        </trans-unit>
        <trans-unit id="cf7173ef9053b8b0fcd2284d238e848860c0b112" translate="yes" xml:space="preserve">
          <source>When PHP developers consider hashing users' passwords for security purposes, they often tend to think of those passwords like they would any other user-provided data. This subject comes up often in PHP questions related to password storage; the developer often wants to cleanse the password using functions such as &lt;code&gt;escape_string()&lt;/code&gt;(in various iterations), &lt;code&gt;htmlspecialchars()&lt;/code&gt;, &lt;code&gt;addslashes()&lt;/code&gt; and others before hashing it and storing it in the database.</source>
          <target state="translated">Cuando los desarrolladores de PHP consideran descifrar las contrase&amp;ntilde;as de los usuarios por motivos de seguridad, a menudo tienden a pensar en esas contrase&amp;ntilde;as como lo har&amp;iacute;an con cualquier otro dato proporcionado por el usuario. Este tema aparece a menudo en preguntas de PHP relacionadas con el almacenamiento de contrase&amp;ntilde;as; el desarrollador a menudo quiere limpiar la contrase&amp;ntilde;a usando funciones como &lt;code&gt;escape_string()&lt;/code&gt; (en varias iteraciones), &lt;code&gt;htmlspecialchars()&lt;/code&gt; , &lt;code&gt;addslashes()&lt;/code&gt; y otras antes de codificarla y almacenarla en la base de datos.</target>
        </trans-unit>
        <trans-unit id="563585def1cd6c2bc25d69e62939e8d210b0a248" translate="yes" xml:space="preserve">
          <source>When we apply the following methods of trimming we get some wildy different results:</source>
          <target state="translated">Cuando aplicamos los siguientes métodos de recorte obtenemos resultados muy diferentes:</target>
        </trans-unit>
        <trans-unit id="d654cef1c3ae03d4ad2b6cc790e7cec71243c5b1" translate="yes" xml:space="preserve">
          <source>You could use a complete SQL query as your password and it would be hashed, making it unexecutable by the SQL engine e.g.,</source>
          <target state="translated">Podrías usar una consulta SQL completa como tu contraseña y ésta sería &quot;hashhed&quot;,lo que la haría inejecutable por el motor SQL,por ejemplo,</target>
        </trans-unit>
        <trans-unit id="b3561d5cf09d787a977934588e811a43d9c68706" translate="yes" xml:space="preserve">
          <source>You really shouldn't use &lt;a href=&quot;https://security.stackexchange.com/questions/19906/is-md5-considered-insecure&quot;&gt;MD5 password hashes&lt;/a&gt;.</source>
          <target state="translated">Realmente no deber&amp;iacute;as usar &lt;a href=&quot;https://security.stackexchange.com/questions/19906/is-md5-considered-insecure&quot;&gt;hash de contrase&amp;ntilde;as MD5&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="de6c80d4166acf55031f3d82a36a9538fa673f08" translate="yes" xml:space="preserve">
          <source>You should never escape, trim or use any other cleansing mechanism on passwords you'll be hashing with PHP's &lt;a href=&quot;http://php.net/manual/en/function.password-hash.php&quot;&gt;&lt;code&gt;password_hash()&lt;/code&gt;&lt;/a&gt; for a number of reasons, the single largest of which is because doing additional cleansing to the password requires unnecessary additional code.</source>
          <target state="translated">Nunca debe escapar, recortar ni usar ning&amp;uacute;n otro mecanismo de limpieza en las contrase&amp;ntilde;as que usar&amp;aacute; hash con PHP &lt;a href=&quot;http://php.net/manual/en/function.password-hash.php&quot;&gt; &lt;code&gt;password_hash()&lt;/code&gt; &lt;/a&gt; por varias razones, la mayor de las cuales es porque hacer una limpieza adicional a la contrase&amp;ntilde;a requiere un c&amp;oacute;digo adicional innecesario.</target>
        </trans-unit>
        <trans-unit id="d1a0f994fbdfb81a6dc7477fff34fdb2a5eb3c37" translate="yes" xml:space="preserve">
          <source>You will argue (and you see it in every post where user data is accepted for use in your systems) that we should cleanse all user input and you would be right for every other piece of information we're accepting from our users. Passwords are different. &lt;em&gt;Hashed passwords cannot offer any SQL injection threat because the string is turned into hash prior to storing in the database.&lt;/em&gt;</source>
          <target state="translated">Argumentar&amp;aacute; (y lo ve en todas las publicaciones donde se aceptan datos de usuario para su uso en sus sistemas) que deber&amp;iacute;amos limpiar toda la informaci&amp;oacute;n del usuario y que ser&amp;iacute;a correcto para cualquier otra informaci&amp;oacute;n que aceptemos de nuestros usuarios. Las contrase&amp;ntilde;as son diferentes. &lt;em&gt;Las contrase&amp;ntilde;as hash no pueden ofrecer ninguna amenaza de inyecci&amp;oacute;n SQL porque la cadena se convierte en hash antes de almacenarla en la base de datos.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8254c491075ba65f6b2a0dcd3390a961757f4feb" translate="yes" xml:space="preserve">
          <source>You would have to run the posted password through the cleansing method you chose before using the result of that in password verification. It is an unnecessary set of steps and will make the hash no better.</source>
          <target state="translated">Tendrías que ejecutar la contraseña publicada a través del método de limpieza que escogiste antes de usar el resultado de eso en la verificación de la contraseña.Es un conjunto de pasos innecesarios y no mejorará el hachís.</target>
        </trans-unit>
        <trans-unit id="a5230bf3ac1fc697c044aa12dc9e2fb2c6ea3dcf" translate="yes" xml:space="preserve">
          <source>and:</source>
          <target state="translated">and:</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
