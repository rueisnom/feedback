<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/363681">
    <body>
      <group id="363681">
        <trans-unit id="d50e7d328513f2b1a3b6f829fc2ef7beaee8f61a" translate="yes" xml:space="preserve">
          <source>5, 6, 7, 8, 9, 10</source>
          <target state="translated">5,6,7,8,9,10</target>
        </trans-unit>
        <trans-unit id="53c3407a956a2afee1b19e7564b1abf79e14907f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(max - min)&lt;/code&gt; may cause overflow when &lt;code&gt;min&lt;/code&gt; is negative.</source>
          <target state="translated">当 &lt;code&gt;min&lt;/code&gt; 为负数时 &lt;code&gt;(max - min)&lt;/code&gt; 可能导致溢出。</target>
        </trans-unit>
        <trans-unit id="bf9143d161501c7f1c62618f26ce7e4a6d960d7d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ThreadLocalRandom&lt;/code&gt; equivalent of class &lt;code&gt;java.util.Random&lt;/code&gt; for multithreaded environment. Generating a random number is carried out locally in each of the threads. So we have a better performance by reducing the conflicts.</source>
          <target state="translated">&lt;code&gt;ThreadLocalRandom&lt;/code&gt; 等效于类 &lt;code&gt;java.util.Random&lt;/code&gt; ,用于多线程环境。 生成随机数是在每个线程中本地执行的。 因此，通过减少冲突，我们可以获得更好的性能。</target>
        </trans-unit>
        <trans-unit id="c85ad3092147df9dac267fde8b3196c03bdb8ae9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rng.nextInt(n)&lt;/code&gt; cannot reach &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;rng.nextInt(n)&lt;/code&gt; 无法达到 &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4d9e9e20f7aac2528246c075ba0f26e77d941a04" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; will be between &lt;code&gt;0-9&lt;/code&gt; inclusive.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 将介于 &lt;code&gt;0-9&lt;/code&gt; 到9之间（含0和9） 。</target>
        </trans-unit>
        <trans-unit id="04d17d49d42f7aa958c56bf72045501d97a8fc85" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt;,&lt;code&gt;y&lt;/code&gt; - intervals e.g. (1,10)</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; ， &lt;code&gt;y&lt;/code&gt; -间隔，例如（1,10）</target>
        </trans-unit>
        <trans-unit id="52ff87f83adec2d054f8a075e9cb74a1b67b93c5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Joshua Bloch. Effective Java. Third Edition.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;约书亚&amp;middot;布洛赫（Joshua Bloch）。&lt;/em&gt; &lt;em&gt;有效的Java。&lt;/em&gt; &lt;em&gt;第三版。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="280c4216aff1256df92681928aa89bfa708968bf" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Let us understand this&lt;/em&gt;...</source>
          <target state="translated">&lt;em&gt;让我们了解一下&lt;/em&gt; ...</target>
        </trans-unit>
        <trans-unit id="4ba02a860d62a0ce3fdca0984fef470f8c6c326d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;5, 6, 7, 8, 9, 10&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;5、6、7、8、9、10&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9fa5db5f8d5fdc066b6910c7eac99d7509f63f88" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Attempt 1:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;尝试1：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d64953374ebeb47427eaab15525c43c69cfbcd0d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Attempt 2:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;尝试2：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fff64afa139479edf99f7d4cdfb30fafff9256d7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Before Java 1.7&lt;/strong&gt;, the standard way to do this is as follows:</source>
          <target state="translated">&lt;strong&gt;在Java 1.7之前&lt;/strong&gt; ，执行此操作的标准方法如下：</target>
        </trans-unit>
        <trans-unit id="35dfe5bc3594a02bd3fe6c09d25980ab5a21e6e6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Results example:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;结果示例：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f2beb69e6e367fef69658c1d696a2a07e072fa71" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Sources:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Sources:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="08d8492fd7800370f43a1ff11b550bf2063aa5c9" translate="yes" xml:space="preserve">
          <source>A foolproof solution would return correct results for any &lt;code&gt;min &amp;lt;= max&lt;/code&gt; within [&lt;code&gt;Integer.MIN_VALUE&lt;/code&gt;, &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;]. Consider the following naive implementation:</source>
          <target state="translated">一个万无一失的解决方案将为[ &lt;code&gt;Integer.MIN_VALUE&lt;/code&gt; ， &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt; ]中的任何 &lt;code&gt;min &amp;lt;= max&lt;/code&gt; 返回正确的结果。 考虑以下简单的实现：</target>
        </trans-unit>
        <trans-unit id="8e0e5429c91836b2a3a26f6b53db4e04f16b4adc" translate="yes" xml:space="preserve">
          <source>Adding the &lt;em&gt;min&lt;/em&gt; value to the random number would produce:</source>
          <target state="translated">将&lt;em&gt;最小值&lt;/em&gt;添加到随机数将产生：</target>
        </trans-unit>
        <trans-unit id="bd7228f94379933c630a807d21e13e69534c5d0c" translate="yes" xml:space="preserve">
          <source>Although inefficient, note that the probability of success in the &lt;code&gt;while&lt;/code&gt; loop will always be 50% or higher.</source>
          <target state="translated">尽管效率很低，但请注意， &lt;code&gt;while&lt;/code&gt; 循环中成功的概率将始终为50％或更高。</target>
        </trans-unit>
        <trans-unit id="9a38b3d8b61a7e56fdb74467cc2100d1afca0839" translate="yes" xml:space="preserve">
          <source>An example run of this class :</source>
          <target state="translated">该类的一个运行示例。</target>
        </trans-unit>
        <trans-unit id="9143967cde6d291f9d89ee77cd2abcf07b7eca30" translate="yes" xml:space="preserve">
          <source>And there you have it. A random integer value in the range &lt;code&gt;[Min,Max]&lt;/code&gt;, or per the example &lt;code&gt;[5,10]&lt;/code&gt;:</source>
          <target state="translated">那里有。 范围为 &lt;code&gt;[Min,Max]&lt;/code&gt; 或根据示例 &lt;code&gt;[5,10]&lt;/code&gt; 的随机整数值：</target>
        </trans-unit>
        <trans-unit id="e5bba3c3294fb4832a4861ba0cf5a9d4bf11f5b4" translate="yes" xml:space="preserve">
          <source>Another option is just using &lt;a href=&quot;http://en.wikipedia.org/wiki/Apache_Commons&quot;&gt;Apache Commons&lt;/a&gt;:</source>
          <target state="translated">另一个选择是仅使用&lt;a href=&quot;http://en.wikipedia.org/wiki/Apache_Commons&quot;&gt;Apache Commons&lt;/a&gt; ：</target>
        </trans-unit>
        <trans-unit id="c5ac9068c887d83e6ebc1412e1fa3f4ae45884d7" translate="yes" xml:space="preserve">
          <source>As of Java 7, you should no longer use &lt;code&gt;Random&lt;/code&gt;. For most uses, the
  random number generator of choice is now
  &lt;a href=&quot;https://stackoverflow.com/questions/363681/how-do-i-generate-random-integers-within-a-specific-range-in-java#answer-363692&quot;&gt;&lt;code&gt;ThreadLocalRandom&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">从Java 7开始，您不应再使用 &lt;code&gt;Random&lt;/code&gt; 。 对于大多数用途，现在选择的随机数生成器是&lt;a href=&quot;https://stackoverflow.com/questions/363681/how-do-i-generate-random-integers-within-a-specific-range-in-java#answer-363692&quot;&gt; &lt;code&gt;ThreadLocalRandom&lt;/code&gt; &lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="aba0312d9a00a85dfb670fbece899e5dd624a8e6" translate="yes" xml:space="preserve">
          <source>Below is its source-code</source>
          <target state="translated">以下是它的源码</target>
        </trans-unit>
        <trans-unit id="cf63e30970b4511f038a5360a0266801fcf00ada" translate="yes" xml:space="preserve">
          <source>But, this still doesn't include &lt;code&gt;Max&lt;/code&gt; and you are getting a double value. In order to get the &lt;code&gt;Max&lt;/code&gt; value included, you need to add 1 to your range parameter &lt;code&gt;(Max - Min)&lt;/code&gt; and then truncate the decimal part by casting to an int. This is accomplished via:</source>
          <target state="translated">但是，这仍然不包括 &lt;code&gt;Max&lt;/code&gt; ，您将获得双倍的价值。 为了获得包括的 &lt;code&gt;Max&lt;/code&gt; ，您需要在范围参数 &lt;code&gt;(Max - Min)&lt;/code&gt; 上加1，然后通过强制转换为整数来截断小数部分。 这可以通过以下方式完成：</target>
        </trans-unit>
        <trans-unit id="2d16f8004de47fad10a065d864e6ba3850945279" translate="yes" xml:space="preserve">
          <source>For a better understanding, check out forum post &lt;em&gt;&lt;a href=&quot;http://web.archive.org/web/20070308142422/http://www.kirupa.com/forum/showthread.php?s=&amp;amp;postid=81565&quot;&gt;Random Intervals (archive.org)&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">为了更好地理解，请查看论坛帖子&lt;em&gt;&lt;a href=&quot;http://web.archive.org/web/20070308142422/http://www.kirupa.com/forum/showthread.php?s=&amp;amp;postid=81565&quot;&gt;Random Intervals（archive.org）&lt;/a&gt;&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="a8f8675fcb00fa671abfefd2fae7d859fdc39737" translate="yes" xml:space="preserve">
          <source>For example if you want to generate five random integers (or a single one) in the range [0, 10], just do:</source>
          <target state="translated">例如,如果你想在[0,10]的范围内生成5个随机整数(或单个整数),只需执行。</target>
        </trans-unit>
        <trans-unit id="c8472b4997d85d5093b6dce45d6c532479cc3125" translate="yes" xml:space="preserve">
          <source>For example, if you want &lt;code&gt;[5,10)&lt;/code&gt;, you need to cover five integer values so you use</source>
          <target state="translated">例如，如果您想要 &lt;code&gt;[5,10)&lt;/code&gt; ，则需要覆盖五个整数值，因此您可以使用</target>
        </trans-unit>
        <trans-unit id="8049a097ac56b55cd395efa4bd307f3149bd7c68" translate="yes" xml:space="preserve">
          <source>For example: &lt;a href=&quot;http://commons.apache.org/proper/commons-math/javadocs/api-3.6.1/org/apache/commons/math3/random/RandomDataGenerator.html#nextInt(int,%20int)&quot;&gt;&lt;code&gt;RandomDataGenerator.nextInt&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;http://commons.apache.org/proper/commons-math/javadocs/api-3.6.1/org/apache/commons/math3/random/RandomDataGenerator.html#nextLong(long,%20long)&quot;&gt;&lt;code&gt;RandomDataGenerator.nextLong&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">例如： &lt;a href=&quot;http://commons.apache.org/proper/commons-math/javadocs/api-3.6.1/org/apache/commons/math3/random/RandomDataGenerator.html#nextInt(int,%20int)&quot;&gt; &lt;code&gt;RandomDataGenerator.nextInt&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;http://commons.apache.org/proper/commons-math/javadocs/api-3.6.1/org/apache/commons/math3/random/RandomDataGenerator.html#nextLong(long,%20long)&quot;&gt; &lt;code&gt;RandomDataGenerator.nextLong&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b3ce23cc604d2531eaaf48822cc50603a59ed270" translate="yes" xml:space="preserve">
          <source>For fork join pools and parallel
  streams, use &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/SplittableRandom.html&quot;&gt;&lt;code&gt;SplittableRandom&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">对于派生连接池和并行流，请使用&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/SplittableRandom.html&quot;&gt; &lt;code&gt;SplittableRandom&lt;/code&gt; &lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="bc2898b6a33ab68f6f7b16591bb107b97c73ec3d" translate="yes" xml:space="preserve">
          <source>For fork join pools and parallel streams, use &lt;code&gt;SplittableRandom&lt;/code&gt; that is usually faster, has a better statistical independence and uniformity properties in comparison with &lt;code&gt;Random&lt;/code&gt;.</source>
          <target state="translated">对于派生连接池和并行流，请使用 &lt;code&gt;SplittableRandom&lt;/code&gt; ，该方法通常更快，与 &lt;code&gt;Random&lt;/code&gt; 相比具有更好的统计独立性和统一性。</target>
        </trans-unit>
        <trans-unit id="6bac0d2ddabf8e503354adfa7097b62a1d921feb" translate="yes" xml:space="preserve">
          <source>Forgive me for being fastidious, but the solution suggested by the majority, i.e., &lt;code&gt;min + rng.nextInt(max - min + 1))&lt;/code&gt;, seems perilous due to the fact that:</source>
          <target state="translated">原谅我过于挑剔，但是大多数人建议的解决方案，即 &lt;code&gt;min + rng.nextInt(max - min + 1))&lt;/code&gt; 似乎很危险，原因是：</target>
        </trans-unit>
        <trans-unit id="02c3945cac1df84e8900052087bdfcb5b2a93474" translate="yes" xml:space="preserve">
          <source>Generate a random number for the difference of min and max by using the &lt;a href=&quot;http://docs.oracle.com/javase/6/docs/api/java/util/Random.html#nextInt(int)&quot;&gt;nextint(n)&lt;/a&gt; method and then add min number to the result:</source>
          <target state="translated">使用&lt;a href=&quot;http://docs.oracle.com/javase/6/docs/api/java/util/Random.html#nextInt(int)&quot;&gt;nextint（n）&lt;/a&gt;方法为min和max的差生成一个随机数，然后将min数加到结果中：</target>
        </trans-unit>
        <trans-unit id="b65442957effc5ae8cf9a5120361b59260c9a77f" translate="yes" xml:space="preserve">
          <source>Hence we obtain the desired range.</source>
          <target state="translated">因此,我们得到所需的范围。</target>
        </trans-unit>
        <trans-unit id="f11fd49c3f468066ec77cff040bb469c0232feb2" translate="yes" xml:space="preserve">
          <source>Here is a simple sample that shows how to generate random number from closed &lt;code&gt;[min, max]&lt;/code&gt; range, while &lt;code&gt;min &amp;lt;= max is true&lt;/code&gt;</source>
          <target state="translated">这是一个简单的示例，显示了如何从封闭的 &lt;code&gt;[min, max]&lt;/code&gt; 范围生成随机数，而 &lt;code&gt;min &amp;lt;= max is true&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b7c3366e5ec1b3da9c727be2680e7d4dee23d5ed" translate="yes" xml:space="preserve">
          <source>Here's a helpful class to generate random &lt;code&gt;ints&lt;/code&gt; in a range with any combination of inclusive/exclusive bounds:</source>
          <target state="translated">这是一个有用的类，可以在包含范围内的任意 &lt;code&gt;ints&lt;/code&gt; 的范围内生成随机整数 ：</target>
        </trans-unit>
        <trans-unit id="d268331db1b9b884025cc54bc5158b9f204e66ae" translate="yes" xml:space="preserve">
          <source>How do I generate a random &lt;code&gt;int&lt;/code&gt; value in a specific range?</source>
          <target state="translated">如何生成特定范围内的随机 &lt;code&gt;int&lt;/code&gt; 数值？</target>
        </trans-unit>
        <trans-unit id="dec58326940bddfa45be9172efd157f71cdd076b" translate="yes" xml:space="preserve">
          <source>How do I generate random integers within a specific range in Java</source>
          <target state="translated">如何在Java中生成特定范围内的随机整数?</target>
        </trans-unit>
        <trans-unit id="2c70bb0e1f91d52382d883299a5a4093fc32cb4d" translate="yes" xml:space="preserve">
          <source>However, conversely there is no way to explicitly set the seed so it can be difficult to reproduce results in situations where that is useful such as testing or saving game states or similar.  In those situations, the pre-Java 1.7 technique shown below can be used.</source>
          <target state="translated">但是,反过来,没有办法显式设置种子,所以在测试或保存游戏状态或类似的情况下,很难重现结果。在这种情况下,可以使用下面所示的pre-Java 1.7技术。</target>
        </trans-unit>
        <trans-unit id="59b7e8e581d6f1baea7f8059ef1d817a37a1507a" translate="yes" xml:space="preserve">
          <source>I found this example &lt;a href=&quot;http://www.javapractices.com/topic/TopicAction.do?Id=62&quot;&gt;Generate random numbers&lt;/a&gt; :</source>
          <target state="translated">我发现此示例&lt;a href=&quot;http://www.javapractices.com/topic/TopicAction.do?Id=62&quot;&gt;生成随机数&lt;/a&gt; ：</target>
        </trans-unit>
        <trans-unit id="e048e284d40932f784386db3d94e6ffacd41387a" translate="yes" xml:space="preserve">
          <source>I have tried the following, but those do not work:</source>
          <target state="translated">我试过以下几种方法,但都不管用:</target>
        </trans-unit>
        <trans-unit id="d5c59659497994547255e487eca88abb8961fd73" translate="yes" xml:space="preserve">
          <source>I use this:</source>
          <target state="translated">我用的是这个。</target>
        </trans-unit>
        <trans-unit id="5f799b4cb133c93bc90160bd29e1a8ca5ed963ad" translate="yes" xml:space="preserve">
          <source>I wonder if any of the random number generating methods provided by an &lt;a href=&quot;http://commons.apache.org/proper/commons-math/&quot;&gt;Apache Commons Math&lt;/a&gt; library would fit the bill.</source>
          <target state="translated">我想知道&lt;a href=&quot;http://commons.apache.org/proper/commons-math/&quot;&gt;Apache Commons Math&lt;/a&gt;库提供的任何随机数生成方法是否符合要求。</target>
        </trans-unit>
        <trans-unit id="366a43e263681eedef28a5a33bbc50a696763bbe" translate="yes" xml:space="preserve">
          <source>If you need to do multiple separate calls, you can create an infinite primitive iterator from the stream:</source>
          <target state="translated">如果需要进行多次单独的调用,可以从流中创建一个无限基元迭代器。</target>
        </trans-unit>
        <trans-unit id="447a63aba3759f1f4a96fc54ecd09a49f85164d9" translate="yes" xml:space="preserve">
          <source>In &lt;strong&gt;Java 1.7 or later&lt;/strong&gt;, the standard way to do this is as follows:</source>
          <target state="translated">在&lt;strong&gt;Java 1.7或更高版本中&lt;/strong&gt; ，执行此操作的标准方法如下：</target>
        </trans-unit>
        <trans-unit id="7898c77d48fca6bc334863640a321ca356cf69f5" translate="yes" xml:space="preserve">
          <source>In case of rolling a dice it would be random number between 1 to 6 (not 0 to 6), so:</source>
          <target state="translated">在掷骰子的情况下,它将是1到6之间的随机数(不是0到6),所以。</target>
        </trans-unit>
        <trans-unit id="552e0466f4b727e6a8c1c4bea066b62a9700db3d" translate="yes" xml:space="preserve">
          <source>In order to get a specific range of values first, you need to multiply by the magnitude of the range of values you want covered.</source>
          <target state="translated">为了得到一个具体的数值范围,你需要先乘以你想要覆盖的数值范围的大小。</target>
        </trans-unit>
        <trans-unit id="8ef8da9bc1b158af295e22f14c239b788f451f6e" translate="yes" xml:space="preserve">
          <source>In particular, there is no need to reinvent the random integer generation wheel when there is a straightforward API within the standard library to accomplish the task.</source>
          <target state="translated">特别是当标准库内有一个直接的API来完成任务时,就不需要重新发明随机整数生成轮。</target>
        </trans-unit>
        <trans-unit id="7c5f907db8d8f66b9cf13bcbfaad22baf8e61084" translate="yes" xml:space="preserve">
          <source>Initialize max with highest value and min with the lowest value.</source>
          <target state="translated">初始化最大值为最高值,最小值为最低值。</target>
        </trans-unit>
        <trans-unit id="463010c9c79f697ccbda5c6bd19062186e254834" translate="yes" xml:space="preserve">
          <source>It can be done by simply doing the statement:</source>
          <target state="translated">只需做报表就可以了。</target>
        </trans-unit>
        <trans-unit id="2c6fd9233d041771929275a2fc9ec445f0dc6df7" translate="yes" xml:space="preserve">
          <source>It is just clean and simple.</source>
          <target state="translated">就是干净利落,简单明了。</target>
        </trans-unit>
        <trans-unit id="d58f7688b2dd075af1a24d8cabbe88050514e329" translate="yes" xml:space="preserve">
          <source>It's better to use &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/security/SecureRandom.html&quot;&gt;SecureRandom&lt;/a&gt; rather than just Random.</source>
          <target state="translated">最好使用&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/security/SecureRandom.html&quot;&gt;SecureRandom&lt;/a&gt;而不是Random。</target>
        </trans-unit>
        <trans-unit id="aca01fcedbfb604965c6c46b3c65e0a6e9d35e5e" translate="yes" xml:space="preserve">
          <source>Just a small modification of your first solution would suffice.</source>
          <target state="translated">只要对你的第一个解决方案稍作修改就够了。</target>
        </trans-unit>
        <trans-unit id="4caac01541d68f7e084a78bdeef9b94cfce311b1" translate="yes" xml:space="preserve">
          <source>Just use the &lt;a href=&quot;http://docs.oracle.com/javase/6/docs/api/java/util/Random.html&quot;&gt;Random&lt;/a&gt; class:</source>
          <target state="translated">只需使用&lt;a href=&quot;http://docs.oracle.com/javase/6/docs/api/java/util/Random.html&quot;&gt;Random&lt;/a&gt;类：</target>
        </trans-unit>
        <trans-unit id="37f5c4e33889e12238766319713940db408759cc" translate="yes" xml:space="preserve">
          <source>Let us take an example.</source>
          <target state="translated">让我们举个例子。</target>
        </trans-unit>
        <trans-unit id="0d90506adf1e2e55ae91bb1009c94d83158f8b26" translate="yes" xml:space="preserve">
          <source>Note that this approach is more biased and less efficient than a &lt;code&gt;nextInt&lt;/code&gt; approach, &lt;a href=&quot;https://stackoverflow.com/a/738651/360211&quot;&gt;https://stackoverflow.com/a/738651/360211&lt;/a&gt;</source>
          <target state="translated">请注意，此方法比 &lt;code&gt;nextInt&lt;/code&gt; 方法&lt;a href=&quot;https://stackoverflow.com/a/738651/360211&quot;&gt;https://stackoverflow.com/a/738651/360211&lt;/a&gt;更具偏见且效率较低</target>
        </trans-unit>
        <trans-unit id="92827374c6e4932c8cc6b2094c09b0ff8bc44954" translate="yes" xml:space="preserve">
          <source>Now you need to shift this range up to the range that you are targeting. You do this by adding the Min value.</source>
          <target state="translated">现在,你需要将这个范围上移到你的目标范围。你可以通过添加Min值来实现。</target>
        </trans-unit>
        <trans-unit id="a4569b7b35289c7071f41cd6d9daec9eaa4785a1" translate="yes" xml:space="preserve">
          <source>Now, we need to determine how many possible values can be obtained. For this example, it would be:</source>
          <target state="translated">现在,我们需要确定可以得到多少个可能的值。在这个例子中,它将是:</target>
        </trans-unit>
        <trans-unit id="3de45ab53e152047f79f89466daae34ac7cd2499" translate="yes" xml:space="preserve">
          <source>One standard pattern for accomplishing this is:</source>
          <target state="translated">实现这一目标的一个标准模式是:</target>
        </trans-unit>
        <trans-unit id="ae911dea46ca8d7df93a74c89c46b05327ff335d" translate="yes" xml:space="preserve">
          <source>Or take a look to RandomUtils from &lt;a href=&quot;http://commons.apache.org/lang&quot;&gt;Apache Commons&lt;/a&gt;.</source>
          <target state="translated">或查看&lt;a href=&quot;http://commons.apache.org/lang&quot;&gt;Apache Commons中的&lt;/a&gt; RandomUtils。</target>
        </trans-unit>
        <trans-unit id="bb0a1880f256b5864abf8caf179d1be2edc0ceb8" translate="yes" xml:space="preserve">
          <source>Randomizer.java</source>
          <target state="translated">Randomizer.java</target>
        </trans-unit>
        <trans-unit id="e633e13622fb2103878088059bfab284d8e5a7b5" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Random.html#nextInt(int)&quot;&gt;the relevant JavaDoc&lt;/a&gt;.  In practice, the &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Random.html&quot;&gt;java.util.Random&lt;/a&gt; class is often preferable to &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Math.html#random()&quot;&gt;java.lang.Math.random()&lt;/a&gt;.</source>
          <target state="translated">请参阅&lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Random.html#nextInt(int)&quot;&gt;相关的JavaDoc&lt;/a&gt; 。 实际上， &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Random.html&quot;&gt;java.util.Random&lt;/a&gt;类通常比&lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Math.html#random()&quot;&gt;java.lang.Math.random（）&lt;/a&gt;更可取。</target>
        </trans-unit>
        <trans-unit id="8d2cd3fc97afda799ef644a4cf17c348a9264921" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ThreadLocalRandom.html#nextInt(int,int)&quot;&gt;the relevant JavaDoc&lt;/a&gt;.  This approach has the advantage of not needing to explicitly initialize a &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Random.html&quot;&gt;java.util.Random&lt;/a&gt; instance, which can be a source of confusion and error if used inappropriately.</source>
          <target state="translated">请参阅&lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ThreadLocalRandom.html#nextInt(int,int)&quot;&gt;相关的JavaDoc&lt;/a&gt; 。 这种方法的优点是不需要显式初始化&lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Random.html&quot;&gt;java.util.Random&lt;/a&gt;实例，如果使用不当，可能会引起混乱和错误。</target>
        </trans-unit>
        <trans-unit id="fb9188eb09356f33a7756e3704cb495043408e97" translate="yes" xml:space="preserve">
          <source>See more here for implementation of &lt;a href=&quot;https://insight.io/github.com/lambdalab-mirror/jdk8u-jdk/blob/master/src/share/classes/java/util/Random.java?line=77&quot;&gt;&lt;code&gt;Random&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">在此处查看更多有关&lt;a href=&quot;https://insight.io/github.com/lambdalab-mirror/jdk8u-jdk/blob/master/src/share/classes/java/util/Random.java?line=77&quot;&gt; &lt;code&gt;Random&lt;/code&gt; &lt;/a&gt;执行的信息</target>
        </trans-unit>
        <trans-unit id="3dabc4abce1d3a4e8cb5658649498f34bc588594" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;i.length&lt;/code&gt; will return &lt;code&gt;25&lt;/code&gt;, the &lt;code&gt;nextInt( i.length )&lt;/code&gt; will return a number between the range of &lt;code&gt;0-24&lt;/code&gt;. The other option is going with &lt;code&gt;Math.Random&lt;/code&gt; which works in the same way.</source>
          <target state="translated">由于 &lt;code&gt;i.length&lt;/code&gt; 将返回 &lt;code&gt;25&lt;/code&gt; ，因此 &lt;code&gt;nextInt( i.length )&lt;/code&gt; 将返回介于 &lt;code&gt;0-24&lt;/code&gt; 之间的数字。 另一个选择是使用 &lt;code&gt;Math.Random&lt;/code&gt; ，它以相同的方式工作。</target>
        </trans-unit>
        <trans-unit id="bd31e08a34e92273d4cbd1bec88c2a165e28bf85" translate="yes" xml:space="preserve">
          <source>So, count of this would be max - min + 1.</source>
          <target state="translated">所以,这个数是最大-最小+1。</target>
        </trans-unit>
        <trans-unit id="c1867e29f00dd437faa0b55d65bc65ae286e52d1" translate="yes" xml:space="preserve">
          <source>So, given the following array of &lt;code&gt;25&lt;/code&gt; items, the code to generate a random number between &lt;code&gt;0&lt;/code&gt; (the base of the array) and &lt;code&gt;array.length&lt;/code&gt; would be:</source>
          <target state="translated">因此，给定以下由 &lt;code&gt;25&lt;/code&gt; 个项目组成的数组，用于生成介于 &lt;code&gt;0&lt;/code&gt; （数组的基数）和 &lt;code&gt;array.length&lt;/code&gt; 之间的随机数的代码为：</target>
        </trans-unit>
        <trans-unit id="72738bf06d8d0a70e528f6ed8fd8661243e5630e" translate="yes" xml:space="preserve">
          <source>Starting from Java 8</source>
          <target state="translated">从Java 8开始</target>
        </trans-unit>
        <trans-unit id="a25b7c18ebed7b7c9af41c4c67f70c4e45395133" translate="yes" xml:space="preserve">
          <source>Suppose I wish to generate a number between &lt;strong&gt;5-10&lt;/strong&gt;:</source>
          <target state="translated">假设我希望生成&lt;strong&gt;5-10&lt;/strong&gt;之间的数字：</target>
        </trans-unit>
        <trans-unit id="c1c5a9e4d6f004e36ddd7f55b4d8633d650d1994" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://en.wikipedia.org/wiki/Java_%28programming_language%29&quot;&gt;Java&lt;/a&gt; Math library function Math.random() generates a double value in the range &lt;code&gt;[0,1)&lt;/code&gt;. Notice this range does not include the 1.</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/Java_%28programming_language%29&quot;&gt;Java&lt;/a&gt; Math库函数Math.random（）生成 &lt;code&gt;[0,1)&lt;/code&gt; 范围内的双精度值。 请注意，此范围不包括1。</target>
        </trans-unit>
        <trans-unit id="eccd7eeb52fe249a07ca013f67076d983ea58341" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.Random&lt;/code&gt; class in &lt;a href=&quot;http://en.wikipedia.org/wiki/Java_%28programming_language%29&quot;&gt;Java&lt;/a&gt; is 0-based. So, if you write something like this:</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/Java_%28programming_language%29&quot;&gt;Java中&lt;/a&gt;的 &lt;code&gt;Math.Random&lt;/code&gt; 类基于0。 因此，如果您编写如下内容：</target>
        </trans-unit>
        <trans-unit id="133a683d8f4c28e294e02e524cac52fe3ea24a78" translate="yes" xml:space="preserve">
          <source>The first parameter indicates just the size of the &lt;code&gt;IntStream&lt;/code&gt; generated (which is the overloaded method of the one that produces an unlimited &lt;code&gt;IntStream&lt;/code&gt;).</source>
          <target state="translated">第一个参数仅指示生成的 &lt;code&gt;IntStream&lt;/code&gt; 的大小（这是产生无限 &lt;code&gt;IntStream&lt;/code&gt; 的方法的重载方法）。</target>
        </trans-unit>
        <trans-unit id="d4d4e3e92822f3130ce0367f4f91aa69860d0e93" translate="yes" xml:space="preserve">
          <source>The integer &lt;code&gt;x&lt;/code&gt; is now the random number that has a possible outcome of &lt;code&gt;5-10&lt;/code&gt;.</source>
          <target state="translated">现在，整数 &lt;code&gt;x&lt;/code&gt; 是可能的结果为 &lt;code&gt;5-10&lt;/code&gt; 的随机数。</target>
        </trans-unit>
        <trans-unit id="f7f2ec9196e96b8112aaa02149a620546116a366" translate="yes" xml:space="preserve">
          <source>The random number will generate a number between &lt;strong&gt;0-5&lt;/strong&gt;.</source>
          <target state="translated">随机数将生成一个介于&lt;strong&gt;0-5&lt;/strong&gt;之间的数字。</target>
        </trans-unit>
        <trans-unit id="90e78b44ea50e84549e5a290935cc79e4e0f4621" translate="yes" xml:space="preserve">
          <source>This example generates random integers in a specific range.</source>
          <target state="translated">这个例子在一个特定的范围内生成随机整数。</target>
        </trans-unit>
        <trans-unit id="08883864fe28aa40245cba16a067b1c946f8015a" translate="yes" xml:space="preserve">
          <source>This gives you a random number in between 1 (inclusive) and 11 (exclusive), so initialize the upperBound value by adding 1. For example, if you want to generate random number between 1 to 10 then initialize the upperBound number with 11 instead of 10.</source>
          <target state="translated">这将给你一个介于1(含)和11(不含)之间的随机数,所以初始化上界值为1。例如,如果你想生成1到10之间的随机数,那么初始化上界值为11,而不是10。</target>
        </trans-unit>
        <trans-unit id="700e64c296f5400c00d07a7c1a67e9c89c33f689" translate="yes" xml:space="preserve">
          <source>This method will return a random number &lt;strong&gt;&lt;em&gt;between&lt;/em&gt;&lt;/strong&gt; the provided min and max value:</source>
          <target state="translated">此方法将在提供的最小值和最大值&lt;strong&gt;&lt;em&gt;之间&lt;/em&gt;&lt;/strong&gt;返回一个随机数：</target>
        </trans-unit>
        <trans-unit id="7822457d6f4e8c86fdaa8bf1b9b8264d09faecf2" translate="yes" xml:space="preserve">
          <source>This methods might be convenient to use:</source>
          <target state="translated">这种方法可能会方便使用。</target>
        </trans-unit>
        <trans-unit id="0d8faedcb05512e7db6071eb6abb74c6244fd654" translate="yes" xml:space="preserve">
          <source>This returns a value in the range &lt;code&gt;[0,Max-Min)&lt;/code&gt;, where 'Max-Min' is not included.</source>
          <target state="translated">这将返回 &lt;code&gt;[0,Max-Min)&lt;/code&gt; 范围内的值，其中不包括&amp;ldquo; Max-Min&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="258b417eb98f9290077dfb43f49e9d574743cd1f" translate="yes" xml:space="preserve">
          <source>This would return a value in the range &lt;code&gt;[0,5)&lt;/code&gt;, where 5 is not included.</source>
          <target state="translated">这将返回 &lt;code&gt;[0,5)&lt;/code&gt; 范围内的值，其中不包括5。</target>
        </trans-unit>
        <trans-unit id="f6f568dca88a06389ce53e35d22ec0aafe164131" translate="yes" xml:space="preserve">
          <source>To generate a random &lt;code&gt;int&lt;/code&gt; in the range &lt;code&gt;[0, 1_000]:&lt;/code&gt;</source>
          <target state="translated">生成范围为 &lt;code&gt;[0, 1_000]:&lt;/code&gt; 的随机 &lt;code&gt;int&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="b13ad3eb91a11da1d982b900adfef5d2d508c818" translate="yes" xml:space="preserve">
          <source>To generate a random &lt;code&gt;int[100]&lt;/code&gt; array of values in the range &lt;code&gt;[0, 1_000]:&lt;/code&gt;</source>
          <target state="translated">要生成范围为 &lt;code&gt;[0, 1_000]:&lt;/code&gt; 的值的随机 &lt;code&gt;int[100]&lt;/code&gt; 数组：</target>
        </trans-unit>
        <trans-unit id="b3c7eea642061711c9c8d75d712fa3f7f121c36e" translate="yes" xml:space="preserve">
          <source>To generate a random number &quot;in between two numbers&quot;, use the following code:</source>
          <target state="translated">要生成一个 &quot;在两个数字之间 &quot;的随机数,请使用以下代码。</target>
        </trans-unit>
        <trans-unit id="91b254b64c641f0c4328c157d3831fb77fba5534" translate="yes" xml:space="preserve">
          <source>To return a Stream of random values:</source>
          <target state="translated">要返回一个随机值流。</target>
        </trans-unit>
        <trans-unit id="bc0e34154d952ed72b15f5d9618112640d548177" translate="yes" xml:space="preserve">
          <source>Use:</source>
          <target state="translated">Use:</target>
        </trans-unit>
        <trans-unit id="a0d2b34d4eef4147d99113918dbc139ed84e08ac" translate="yes" xml:space="preserve">
          <source>When you need a lot of random numbers, I do not recommend the Random class in the API. It has just a too small period. Try the &lt;a href=&quot;http://en.wikipedia.org/wiki/Mersenne_twister&quot;&gt;Mersenne twister&lt;/a&gt; instead. There is &lt;a href=&quot;http://cs.gmu.edu/~sean/research/&quot;&gt;a Java implementation&lt;/a&gt;.</source>
          <target state="translated">当您需要大量随机数时，建议不要在API中使用Random类。 周期太短了。 请尝试使用&lt;a href=&quot;http://en.wikipedia.org/wiki/Mersenne_twister&quot;&gt;梅森捻线机&lt;/a&gt; 。 有&lt;a href=&quot;http://cs.gmu.edu/~sean/research/&quot;&gt;一个Java实现&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="cd2a1f36f534b81da88520f4a604511f4b37908b" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;/questions/tagged/java-8&quot;&gt;java-8&lt;/a&gt; they introduced the method &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/Random.html#ints-int-int-&quot;&gt;&lt;code&gt;ints(int randomNumberOrigin, int randomNumberBound)&lt;/code&gt;&lt;/a&gt; in the &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/Random.html&quot;&gt;&lt;code&gt;Random&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">使用&lt;a href=&quot;/questions/tagged/java-8&quot;&gt;Java-8，&lt;/a&gt;他们在&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/Random.html&quot;&gt; &lt;code&gt;Random&lt;/code&gt; &lt;/a&gt;类中引入了方法&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/Random.html#ints-int-int-&quot;&gt; &lt;code&gt;ints(int randomNumberOrigin, int randomNumberBound)&lt;/code&gt; &lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="41429a68605d604e389aaaa0a0b8a46714dcb25d" translate="yes" xml:space="preserve">
          <source>You can achieve that concisely in Java 8:</source>
          <target state="translated">你可以在Java 8中简明扼要地实现这一点。</target>
        </trans-unit>
        <trans-unit id="b1b7eb221e4bca208144f8aae631e6cce25400d1" translate="yes" xml:space="preserve">
          <source>You can also do it for &lt;code&gt;double&lt;/code&gt; and &lt;code&gt;long&lt;/code&gt; values. I hope it helps! :)</source>
          <target state="translated">您也可以为 &lt;code&gt;double&lt;/code&gt; &lt;code&gt;long&lt;/code&gt; 值和长整型值进行处理。 希望对您有所帮助！ :)</target>
        </trans-unit>
        <trans-unit id="179ff90253b359a52f237edcd59c571c14038a17" translate="yes" xml:space="preserve">
          <source>You can cast it to an Integer if you want.</source>
          <target state="translated">如果你愿意,你可以把它铸成一个整数。</target>
        </trans-unit>
        <trans-unit id="a432157a9ecc952193c02063e4d46cd81c51713f" translate="yes" xml:space="preserve">
          <source>You can edit your second code example to:</source>
          <target state="translated">你可以编辑你的第二个代码示例到。</target>
        </trans-unit>
        <trans-unit id="960c74253818fdbd5d40dbe15a77fb40a0849ef5" translate="yes" xml:space="preserve">
          <source>You can reuse it as field in hole class, also having all &lt;code&gt;Random.class&lt;/code&gt; methods in one place</source>
          <target state="translated">您可以将其作为孔类中的字段重用，也可以将所有 &lt;code&gt;Random.class&lt;/code&gt; 方法放在一个位置</target>
        </trans-unit>
        <trans-unit id="4288add94bffc01de307edfcef9226c3130e13bb" translate="yes" xml:space="preserve">
          <source>You now will get a value in the range &lt;code&gt;[Min,Max)&lt;/code&gt;. Following our example, that means &lt;code&gt;[5,10)&lt;/code&gt;:</source>
          <target state="translated">现在，您将获得 &lt;code&gt;[Min,Max)&lt;/code&gt; 范围内的值。 按照我们的示例，这意味着 &lt;code&gt;[5,10)&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="1af7c48e2897bbe1df52be462305f6d0b0d68adb" translate="yes" xml:space="preserve">
          <source>and this method will return a random number &lt;strong&gt;&lt;em&gt;from&lt;/em&gt;&lt;/strong&gt; the provided min and max value (so the generated number could also be the min or max number):</source>
          <target state="translated">并且此方法将从提供的最小值和最大值中返回一个随机数（因此生成的数字也可以是最小值或最大值）：</target>
        </trans-unit>
        <trans-unit id="33c2e6d69c65771ba0007da739b03e0184cca83a" translate="yes" xml:space="preserve">
          <source>i.e. 0, 1, 2, 3, 4, 5</source>
          <target state="translated">即:0、1、2、3、4、5</target>
        </trans-unit>
        <trans-unit id="8af56a1614b434cf3178f6d4d3f5fc7ad69d5ea5" translate="yes" xml:space="preserve">
          <source>i.e. 10 - 5 + 1 = 6</source>
          <target state="translated">即10-5+1=6</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
