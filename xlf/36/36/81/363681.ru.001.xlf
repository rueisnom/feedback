<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://stackoverflow.com/questions/363681">
    <body>
      <group id="363681">
        <trans-unit id="d50e7d328513f2b1a3b6f829fc2ef7beaee8f61a" translate="yes" xml:space="preserve">
          <source>5, 6, 7, 8, 9, 10</source>
          <target state="translated">5,6,7,8,9,10</target>
        </trans-unit>
        <trans-unit id="53c3407a956a2afee1b19e7564b1abf79e14907f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(max - min)&lt;/code&gt; may cause overflow when &lt;code&gt;min&lt;/code&gt; is negative.</source>
          <target state="translated">&lt;code&gt;(max - min)&lt;/code&gt; может вызвать переполнение, если &lt;code&gt;min&lt;/code&gt; отрицательно.</target>
        </trans-unit>
        <trans-unit id="bf9143d161501c7f1c62618f26ce7e4a6d960d7d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ThreadLocalRandom&lt;/code&gt; equivalent of class &lt;code&gt;java.util.Random&lt;/code&gt; for multithreaded environment. Generating a random number is carried out locally in each of the threads. So we have a better performance by reducing the conflicts.</source>
          <target state="translated">&lt;code&gt;ThreadLocalRandom&lt;/code&gt; эквивалент класса &lt;code&gt;java.util.Random&lt;/code&gt; для многопоточной среды. Генерация случайного числа осуществляется локально в каждом из потоков. Таким образом, мы имеем лучшую производительность, уменьшая конфликты.</target>
        </trans-unit>
        <trans-unit id="c85ad3092147df9dac267fde8b3196c03bdb8ae9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rng.nextInt(n)&lt;/code&gt; cannot reach &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;rng.nextInt(n)&lt;/code&gt; не может достичь &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4d9e9e20f7aac2528246c075ba0f26e77d941a04" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; will be between &lt;code&gt;0-9&lt;/code&gt; inclusive.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; будет между &lt;code&gt;0-9&lt;/code&gt; включительно.</target>
        </trans-unit>
        <trans-unit id="04d17d49d42f7aa958c56bf72045501d97a8fc85" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt;,&lt;code&gt;y&lt;/code&gt; - intervals e.g. (1,10)</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; , &lt;code&gt;y&lt;/code&gt; - интервалы, например (1,10)</target>
        </trans-unit>
        <trans-unit id="52ff87f83adec2d054f8a075e9cb74a1b67b93c5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Joshua Bloch. Effective Java. Third Edition.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Джошуа Блох.&lt;/em&gt; &lt;em&gt;Эффективная Java.&lt;/em&gt; &lt;em&gt;Третье издание.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="280c4216aff1256df92681928aa89bfa708968bf" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Let us understand this&lt;/em&gt;...</source>
          <target state="translated">&lt;em&gt;Дайте нам понять это&lt;/em&gt; ...</target>
        </trans-unit>
        <trans-unit id="4ba02a860d62a0ce3fdca0984fef470f8c6c326d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;5, 6, 7, 8, 9, 10&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;5, 6, 7, 8, 9, 10&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9fa5db5f8d5fdc066b6910c7eac99d7509f63f88" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Attempt 1:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Попытка 1:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d64953374ebeb47427eaab15525c43c69cfbcd0d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Attempt 2:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Попытка 2:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fff64afa139479edf99f7d4cdfb30fafff9256d7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Before Java 1.7&lt;/strong&gt;, the standard way to do this is as follows:</source>
          <target state="translated">&lt;strong&gt;До Java 1.7&lt;/strong&gt; стандартный способ сделать это был следующим:</target>
        </trans-unit>
        <trans-unit id="35dfe5bc3594a02bd3fe6c09d25980ab5a21e6e6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Results example:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример результатов:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f2beb69e6e367fef69658c1d696a2a07e072fa71" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Sources:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Sources:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="08d8492fd7800370f43a1ff11b550bf2063aa5c9" translate="yes" xml:space="preserve">
          <source>A foolproof solution would return correct results for any &lt;code&gt;min &amp;lt;= max&lt;/code&gt; within [&lt;code&gt;Integer.MIN_VALUE&lt;/code&gt;, &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;]. Consider the following naive implementation:</source>
          <target state="translated">Надежное решение вернет правильные результаты для любого &lt;code&gt;min &amp;lt;= max&lt;/code&gt; пределах [ &lt;code&gt;Integer.MIN_VALUE&lt;/code&gt; , &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt; ]. Рассмотрим следующую наивную реализацию:</target>
        </trans-unit>
        <trans-unit id="8e0e5429c91836b2a3a26f6b53db4e04f16b4adc" translate="yes" xml:space="preserve">
          <source>Adding the &lt;em&gt;min&lt;/em&gt; value to the random number would produce:</source>
          <target state="translated">Добавление &lt;em&gt;минимального&lt;/em&gt; значения к случайному числу приведет к:</target>
        </trans-unit>
        <trans-unit id="bd7228f94379933c630a807d21e13e69534c5d0c" translate="yes" xml:space="preserve">
          <source>Although inefficient, note that the probability of success in the &lt;code&gt;while&lt;/code&gt; loop will always be 50% or higher.</source>
          <target state="translated">Хотя это неэффективно, обратите внимание, что вероятность успеха в цикле while всегда будет 50% или выше.</target>
        </trans-unit>
        <trans-unit id="9a38b3d8b61a7e56fdb74467cc2100d1afca0839" translate="yes" xml:space="preserve">
          <source>An example run of this class :</source>
          <target state="translated">Пример прогона этого класса :</target>
        </trans-unit>
        <trans-unit id="9143967cde6d291f9d89ee77cd2abcf07b7eca30" translate="yes" xml:space="preserve">
          <source>And there you have it. A random integer value in the range &lt;code&gt;[Min,Max]&lt;/code&gt;, or per the example &lt;code&gt;[5,10]&lt;/code&gt;:</source>
          <target state="translated">И там у вас есть это. Случайное целочисленное значение в диапазоне &lt;code&gt;[Min,Max]&lt;/code&gt; или по примеру &lt;code&gt;[5,10]&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="e5bba3c3294fb4832a4861ba0cf5a9d4bf11f5b4" translate="yes" xml:space="preserve">
          <source>Another option is just using &lt;a href=&quot;http://en.wikipedia.org/wiki/Apache_Commons&quot;&gt;Apache Commons&lt;/a&gt;:</source>
          <target state="translated">Другой вариант - просто использовать &lt;a href=&quot;http://en.wikipedia.org/wiki/Apache_Commons&quot;&gt;Apache Commons&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="c5ac9068c887d83e6ebc1412e1fa3f4ae45884d7" translate="yes" xml:space="preserve">
          <source>As of Java 7, you should no longer use &lt;code&gt;Random&lt;/code&gt;. For most uses, the
  random number generator of choice is now
  &lt;a href=&quot;https://stackoverflow.com/questions/363681/how-do-i-generate-random-integers-within-a-specific-range-in-java#answer-363692&quot;&gt;&lt;code&gt;ThreadLocalRandom&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Начиная с Java 7, вы больше не должны использовать &lt;code&gt;Random&lt;/code&gt; . Для большинства случаев &lt;a href=&quot;https://stackoverflow.com/questions/363681/how-do-i-generate-random-integers-within-a-specific-range-in-java#answer-363692&quot;&gt; &lt;code&gt;ThreadLocalRandom&lt;/code&gt; &lt;/a&gt; генератором случайных чисел является ThreadLocalRandom .</target>
        </trans-unit>
        <trans-unit id="aba0312d9a00a85dfb670fbece899e5dd624a8e6" translate="yes" xml:space="preserve">
          <source>Below is its source-code</source>
          <target state="translated">Ниже приведен его исходный код</target>
        </trans-unit>
        <trans-unit id="cf63e30970b4511f038a5360a0266801fcf00ada" translate="yes" xml:space="preserve">
          <source>But, this still doesn't include &lt;code&gt;Max&lt;/code&gt; and you are getting a double value. In order to get the &lt;code&gt;Max&lt;/code&gt; value included, you need to add 1 to your range parameter &lt;code&gt;(Max - Min)&lt;/code&gt; and then truncate the decimal part by casting to an int. This is accomplished via:</source>
          <target state="translated">Но это все равно не включает &lt;code&gt;Max&lt;/code&gt; и вы получаете двойное значение. Чтобы включить значение &lt;code&gt;Max&lt;/code&gt; , вам нужно добавить 1 к параметру диапазона &lt;code&gt;(Max - Min)&lt;/code&gt; а затем обрезать десятичную часть путем приведения к int. Это достигается с помощью:</target>
        </trans-unit>
        <trans-unit id="2d16f8004de47fad10a065d864e6ba3850945279" translate="yes" xml:space="preserve">
          <source>For a better understanding, check out forum post &lt;em&gt;&lt;a href=&quot;http://web.archive.org/web/20070308142422/http://www.kirupa.com/forum/showthread.php?s=&amp;amp;postid=81565&quot;&gt;Random Intervals (archive.org)&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">Для лучшего понимания, проверьте сообщение на форуме &lt;em&gt;&lt;a href=&quot;http://web.archive.org/web/20070308142422/http://www.kirupa.com/forum/showthread.php?s=&amp;amp;postid=81565&quot;&gt;Случайные интервалы (archive.org)&lt;/a&gt;&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="a8f8675fcb00fa671abfefd2fae7d859fdc39737" translate="yes" xml:space="preserve">
          <source>For example if you want to generate five random integers (or a single one) in the range [0, 10], just do:</source>
          <target state="translated">Например,если вы хотите сгенерировать пять случайных целых чисел (или одно целое)в диапазоне [0,10],просто сделайте это:</target>
        </trans-unit>
        <trans-unit id="c8472b4997d85d5093b6dce45d6c532479cc3125" translate="yes" xml:space="preserve">
          <source>For example, if you want &lt;code&gt;[5,10)&lt;/code&gt;, you need to cover five integer values so you use</source>
          <target state="translated">Например, если вы хотите &lt;code&gt;[5,10)&lt;/code&gt; , вам нужно охватить пять целочисленных значений, чтобы вы использовали</target>
        </trans-unit>
        <trans-unit id="8049a097ac56b55cd395efa4bd307f3149bd7c68" translate="yes" xml:space="preserve">
          <source>For example: &lt;a href=&quot;http://commons.apache.org/proper/commons-math/javadocs/api-3.6.1/org/apache/commons/math3/random/RandomDataGenerator.html#nextInt(int,%20int)&quot;&gt;&lt;code&gt;RandomDataGenerator.nextInt&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;http://commons.apache.org/proper/commons-math/javadocs/api-3.6.1/org/apache/commons/math3/random/RandomDataGenerator.html#nextLong(long,%20long)&quot;&gt;&lt;code&gt;RandomDataGenerator.nextLong&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Например: &lt;a href=&quot;http://commons.apache.org/proper/commons-math/javadocs/api-3.6.1/org/apache/commons/math3/random/RandomDataGenerator.html#nextInt(int,%20int)&quot;&gt; &lt;code&gt;RandomDataGenerator.nextInt&lt;/code&gt; &lt;/a&gt; или &lt;a href=&quot;http://commons.apache.org/proper/commons-math/javadocs/api-3.6.1/org/apache/commons/math3/random/RandomDataGenerator.html#nextLong(long,%20long)&quot;&gt; &lt;code&gt;RandomDataGenerator.nextLong&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b3ce23cc604d2531eaaf48822cc50603a59ed270" translate="yes" xml:space="preserve">
          <source>For fork join pools and parallel
  streams, use &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/SplittableRandom.html&quot;&gt;&lt;code&gt;SplittableRandom&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Для пулов объединения вилок и параллельных потоков используйте &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/SplittableRandom.html&quot;&gt; &lt;code&gt;SplittableRandom&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="bc2898b6a33ab68f6f7b16591bb107b97c73ec3d" translate="yes" xml:space="preserve">
          <source>For fork join pools and parallel streams, use &lt;code&gt;SplittableRandom&lt;/code&gt; that is usually faster, has a better statistical independence and uniformity properties in comparison with &lt;code&gt;Random&lt;/code&gt;.</source>
          <target state="translated">Для пулов объединения вилок и параллельных потоков используйте &lt;code&gt;SplittableRandom&lt;/code&gt; , который обычно быстрее, обладает лучшими свойствами статистической независимости и однородности по сравнению со &lt;code&gt;Random&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6bac0d2ddabf8e503354adfa7097b62a1d921feb" translate="yes" xml:space="preserve">
          <source>Forgive me for being fastidious, but the solution suggested by the majority, i.e., &lt;code&gt;min + rng.nextInt(max - min + 1))&lt;/code&gt;, seems perilous due to the fact that:</source>
          <target state="translated">Прости меня за привередливость, но решение, предложенное большинством, то есть &lt;code&gt;min + rng.nextInt(max - min + 1))&lt;/code&gt; , кажется опасным из-за того, что:</target>
        </trans-unit>
        <trans-unit id="02c3945cac1df84e8900052087bdfcb5b2a93474" translate="yes" xml:space="preserve">
          <source>Generate a random number for the difference of min and max by using the &lt;a href=&quot;http://docs.oracle.com/javase/6/docs/api/java/util/Random.html#nextInt(int)&quot;&gt;nextint(n)&lt;/a&gt; method and then add min number to the result:</source>
          <target state="translated">Сгенерируйте случайное число для разницы min и max с помощью &lt;a href=&quot;http://docs.oracle.com/javase/6/docs/api/java/util/Random.html#nextInt(int)&quot;&gt;метода nextint (n),&lt;/a&gt; а затем добавьте минимальное число к результату:</target>
        </trans-unit>
        <trans-unit id="b65442957effc5ae8cf9a5120361b59260c9a77f" translate="yes" xml:space="preserve">
          <source>Hence we obtain the desired range.</source>
          <target state="translated">Таким образом,мы получаем желаемый диапазон.</target>
        </trans-unit>
        <trans-unit id="f11fd49c3f468066ec77cff040bb469c0232feb2" translate="yes" xml:space="preserve">
          <source>Here is a simple sample that shows how to generate random number from closed &lt;code&gt;[min, max]&lt;/code&gt; range, while &lt;code&gt;min &amp;lt;= max is true&lt;/code&gt;</source>
          <target state="translated">Вот простой пример, который показывает, как генерировать случайное число из закрытого диапазона &lt;code&gt;[min, max]&lt;/code&gt; , в то время как &lt;code&gt;min &amp;lt;= max is true&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b7c3366e5ec1b3da9c727be2680e7d4dee23d5ed" translate="yes" xml:space="preserve">
          <source>Here's a helpful class to generate random &lt;code&gt;ints&lt;/code&gt; in a range with any combination of inclusive/exclusive bounds:</source>
          <target state="translated">Вот полезный класс для генерации случайных &lt;code&gt;ints&lt;/code&gt; в диапазоне с любой комбинацией включающих / исключающих границ:</target>
        </trans-unit>
        <trans-unit id="d268331db1b9b884025cc54bc5158b9f204e66ae" translate="yes" xml:space="preserve">
          <source>How do I generate a random &lt;code&gt;int&lt;/code&gt; value in a specific range?</source>
          <target state="translated">Как создать случайное значение типа &lt;code&gt;int&lt;/code&gt; в определенном диапазоне?</target>
        </trans-unit>
        <trans-unit id="dec58326940bddfa45be9172efd157f71cdd076b" translate="yes" xml:space="preserve">
          <source>How do I generate random integers within a specific range in Java</source>
          <target state="translated">Как генерировать случайные целые числа в определенном диапазоне на Java</target>
        </trans-unit>
        <trans-unit id="2c70bb0e1f91d52382d883299a5a4093fc32cb4d" translate="yes" xml:space="preserve">
          <source>However, conversely there is no way to explicitly set the seed so it can be difficult to reproduce results in situations where that is useful such as testing or saving game states or similar.  In those situations, the pre-Java 1.7 technique shown below can be used.</source>
          <target state="translated">Однако,наоборот,нет способа явно задать семя,так что может быть трудно воспроизвести результаты в ситуациях,когда это полезно,например,тестирование или сохранение игровых состояний или подобное.В таких ситуациях может быть использована техника до Java 1.7,показанная ниже.</target>
        </trans-unit>
        <trans-unit id="59b7e8e581d6f1baea7f8059ef1d817a37a1507a" translate="yes" xml:space="preserve">
          <source>I found this example &lt;a href=&quot;http://www.javapractices.com/topic/TopicAction.do?Id=62&quot;&gt;Generate random numbers&lt;/a&gt; :</source>
          <target state="translated">Я нашел этот пример &lt;a href=&quot;http://www.javapractices.com/topic/TopicAction.do?Id=62&quot;&gt;Генерация случайных чисел&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="e048e284d40932f784386db3d94e6ffacd41387a" translate="yes" xml:space="preserve">
          <source>I have tried the following, but those do not work:</source>
          <target state="translated">Я попробовал следующее,но это не работает:</target>
        </trans-unit>
        <trans-unit id="d5c59659497994547255e487eca88abb8961fd73" translate="yes" xml:space="preserve">
          <source>I use this:</source>
          <target state="translated">Я использую это:</target>
        </trans-unit>
        <trans-unit id="5f799b4cb133c93bc90160bd29e1a8ca5ed963ad" translate="yes" xml:space="preserve">
          <source>I wonder if any of the random number generating methods provided by an &lt;a href=&quot;http://commons.apache.org/proper/commons-math/&quot;&gt;Apache Commons Math&lt;/a&gt; library would fit the bill.</source>
          <target state="translated">Интересно, подойдет ли какой-либо из методов генерации случайных чисел, предоставляемых библиотекой &lt;a href=&quot;http://commons.apache.org/proper/commons-math/&quot;&gt;Apache Commons Math&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="366a43e263681eedef28a5a33bbc50a696763bbe" translate="yes" xml:space="preserve">
          <source>If you need to do multiple separate calls, you can create an infinite primitive iterator from the stream:</source>
          <target state="translated">Если вам нужно сделать несколько отдельных вызовов,вы можете создать бесконечный примитивный итератор из потока:</target>
        </trans-unit>
        <trans-unit id="447a63aba3759f1f4a96fc54ecd09a49f85164d9" translate="yes" xml:space="preserve">
          <source>In &lt;strong&gt;Java 1.7 or later&lt;/strong&gt;, the standard way to do this is as follows:</source>
          <target state="translated">В &lt;strong&gt;Java 1.7 или более поздней&lt;/strong&gt; версии стандартный способ сделать это заключается в следующем:</target>
        </trans-unit>
        <trans-unit id="7898c77d48fca6bc334863640a321ca356cf69f5" translate="yes" xml:space="preserve">
          <source>In case of rolling a dice it would be random number between 1 to 6 (not 0 to 6), so:</source>
          <target state="translated">В случае броска костей это будет случайное число от 1 до 6 (а не от 0 до 6):</target>
        </trans-unit>
        <trans-unit id="552e0466f4b727e6a8c1c4bea066b62a9700db3d" translate="yes" xml:space="preserve">
          <source>In order to get a specific range of values first, you need to multiply by the magnitude of the range of values you want covered.</source>
          <target state="translated">Для того,чтобы сначала получить определенный диапазон значений,необходимо умножить на величину диапазона значений,который вы хотите охватить.</target>
        </trans-unit>
        <trans-unit id="8ef8da9bc1b158af295e22f14c239b788f451f6e" translate="yes" xml:space="preserve">
          <source>In particular, there is no need to reinvent the random integer generation wheel when there is a straightforward API within the standard library to accomplish the task.</source>
          <target state="translated">В частности,нет необходимости заново изобретать колесо генерации случайных целых чисел,когда в стандартной библиотеке есть простой API для выполнения задачи.</target>
        </trans-unit>
        <trans-unit id="7c5f907db8d8f66b9cf13bcbfaad22baf8e61084" translate="yes" xml:space="preserve">
          <source>Initialize max with highest value and min with the lowest value.</source>
          <target state="translated">Инициализируйте max с наибольшим значением и min с наименьшим.</target>
        </trans-unit>
        <trans-unit id="463010c9c79f697ccbda5c6bd19062186e254834" translate="yes" xml:space="preserve">
          <source>It can be done by simply doing the statement:</source>
          <target state="translated">Это можно сделать,просто сделав заявление:</target>
        </trans-unit>
        <trans-unit id="2c6fd9233d041771929275a2fc9ec445f0dc6df7" translate="yes" xml:space="preserve">
          <source>It is just clean and simple.</source>
          <target state="translated">Это просто чисто и просто.</target>
        </trans-unit>
        <trans-unit id="d58f7688b2dd075af1a24d8cabbe88050514e329" translate="yes" xml:space="preserve">
          <source>It's better to use &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/security/SecureRandom.html&quot;&gt;SecureRandom&lt;/a&gt; rather than just Random.</source>
          <target state="translated">Лучше использовать &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/security/SecureRandom.html&quot;&gt;SecureRandom&lt;/a&gt; , чем просто Random.</target>
        </trans-unit>
        <trans-unit id="aca01fcedbfb604965c6c46b3c65e0a6e9d35e5e" translate="yes" xml:space="preserve">
          <source>Just a small modification of your first solution would suffice.</source>
          <target state="translated">Достаточно лишь небольшого изменения вашего первого решения.</target>
        </trans-unit>
        <trans-unit id="4caac01541d68f7e084a78bdeef9b94cfce311b1" translate="yes" xml:space="preserve">
          <source>Just use the &lt;a href=&quot;http://docs.oracle.com/javase/6/docs/api/java/util/Random.html&quot;&gt;Random&lt;/a&gt; class:</source>
          <target state="translated">Просто используйте класс &lt;a href=&quot;http://docs.oracle.com/javase/6/docs/api/java/util/Random.html&quot;&gt;Random&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="37f5c4e33889e12238766319713940db408759cc" translate="yes" xml:space="preserve">
          <source>Let us take an example.</source>
          <target state="translated">Возьмем пример.</target>
        </trans-unit>
        <trans-unit id="0d90506adf1e2e55ae91bb1009c94d83158f8b26" translate="yes" xml:space="preserve">
          <source>Note that this approach is more biased and less efficient than a &lt;code&gt;nextInt&lt;/code&gt; approach, &lt;a href=&quot;https://stackoverflow.com/a/738651/360211&quot;&gt;https://stackoverflow.com/a/738651/360211&lt;/a&gt;</source>
          <target state="translated">Обратите внимание, что этот подход является более предвзятым и менее эффективным, чем подход &lt;code&gt;nextInt&lt;/code&gt; , &lt;a href=&quot;https://stackoverflow.com/a/738651/360211&quot;&gt;https://stackoverflow.com/a/738651/360211&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="92827374c6e4932c8cc6b2094c09b0ff8bc44954" translate="yes" xml:space="preserve">
          <source>Now you need to shift this range up to the range that you are targeting. You do this by adding the Min value.</source>
          <target state="translated">Теперь вам нужно сместить эту дальность до той,на которую вы нацелились.Сделайте это,добавив Мин.</target>
        </trans-unit>
        <trans-unit id="a4569b7b35289c7071f41cd6d9daec9eaa4785a1" translate="yes" xml:space="preserve">
          <source>Now, we need to determine how many possible values can be obtained. For this example, it would be:</source>
          <target state="translated">Теперь нам нужно определить,сколько возможных значений можно получить.Для этого примера:</target>
        </trans-unit>
        <trans-unit id="3de45ab53e152047f79f89466daae34ac7cd2499" translate="yes" xml:space="preserve">
          <source>One standard pattern for accomplishing this is:</source>
          <target state="translated">Один стандартный образец для достижения этого:</target>
        </trans-unit>
        <trans-unit id="ae911dea46ca8d7df93a74c89c46b05327ff335d" translate="yes" xml:space="preserve">
          <source>Or take a look to RandomUtils from &lt;a href=&quot;http://commons.apache.org/lang&quot;&gt;Apache Commons&lt;/a&gt;.</source>
          <target state="translated">Или взгляните на RandomUtils от &lt;a href=&quot;http://commons.apache.org/lang&quot;&gt;Apache Commons&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="bb0a1880f256b5864abf8caf179d1be2edc0ceb8" translate="yes" xml:space="preserve">
          <source>Randomizer.java</source>
          <target state="translated">Randomizer.java</target>
        </trans-unit>
        <trans-unit id="e633e13622fb2103878088059bfab284d8e5a7b5" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Random.html#nextInt(int)&quot;&gt;the relevant JavaDoc&lt;/a&gt;.  In practice, the &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Random.html&quot;&gt;java.util.Random&lt;/a&gt; class is often preferable to &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Math.html#random()&quot;&gt;java.lang.Math.random()&lt;/a&gt;.</source>
          <target state="translated">Смотрите &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Random.html#nextInt(int)&quot;&gt;соответствующий JavaDoc&lt;/a&gt; . На практике класс &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Random.html&quot;&gt;java.util.Random&lt;/a&gt; часто предпочтительнее &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Math.html#random()&quot;&gt;java.lang.Math.random ()&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="8d2cd3fc97afda799ef644a4cf17c348a9264921" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ThreadLocalRandom.html#nextInt(int,int)&quot;&gt;the relevant JavaDoc&lt;/a&gt;.  This approach has the advantage of not needing to explicitly initialize a &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Random.html&quot;&gt;java.util.Random&lt;/a&gt; instance, which can be a source of confusion and error if used inappropriately.</source>
          <target state="translated">Смотрите &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ThreadLocalRandom.html#nextInt(int,int)&quot;&gt;соответствующий JavaDoc&lt;/a&gt; . Преимущество этого подхода заключается в том, что нет необходимости явно инициализировать экземпляр &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Random.html&quot;&gt;java.util.Random&lt;/a&gt; , который может стать источником путаницы и ошибок при неправильном использовании.</target>
        </trans-unit>
        <trans-unit id="fb9188eb09356f33a7756e3704cb495043408e97" translate="yes" xml:space="preserve">
          <source>See more here for implementation of &lt;a href=&quot;https://insight.io/github.com/lambdalab-mirror/jdk8u-jdk/blob/master/src/share/classes/java/util/Random.java?line=77&quot;&gt;&lt;code&gt;Random&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Смотрите больше здесь для реализации &lt;a href=&quot;https://insight.io/github.com/lambdalab-mirror/jdk8u-jdk/blob/master/src/share/classes/java/util/Random.java?line=77&quot;&gt; &lt;code&gt;Random&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3dabc4abce1d3a4e8cb5658649498f34bc588594" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;i.length&lt;/code&gt; will return &lt;code&gt;25&lt;/code&gt;, the &lt;code&gt;nextInt( i.length )&lt;/code&gt; will return a number between the range of &lt;code&gt;0-24&lt;/code&gt;. The other option is going with &lt;code&gt;Math.Random&lt;/code&gt; which works in the same way.</source>
          <target state="translated">Поскольку &lt;code&gt;i.length&lt;/code&gt; вернет &lt;code&gt;25&lt;/code&gt; , &lt;code&gt;nextInt( i.length )&lt;/code&gt; вернет число в диапазоне от 0 до &lt;code&gt;0-24&lt;/code&gt; . Другой вариант идет с &lt;code&gt;Math.Random&lt;/code&gt; , который работает таким же образом.</target>
        </trans-unit>
        <trans-unit id="bd31e08a34e92273d4cbd1bec88c2a165e28bf85" translate="yes" xml:space="preserve">
          <source>So, count of this would be max - min + 1.</source>
          <target state="translated">Итак,подсчет будет максимальным-мин+1.</target>
        </trans-unit>
        <trans-unit id="c1867e29f00dd437faa0b55d65bc65ae286e52d1" translate="yes" xml:space="preserve">
          <source>So, given the following array of &lt;code&gt;25&lt;/code&gt; items, the code to generate a random number between &lt;code&gt;0&lt;/code&gt; (the base of the array) and &lt;code&gt;array.length&lt;/code&gt; would be:</source>
          <target state="translated">Таким образом, учитывая следующий массив из &lt;code&gt;25&lt;/code&gt; элементов, код для генерации случайного числа между &lt;code&gt;0&lt;/code&gt; (основание массива) и &lt;code&gt;array.length&lt;/code&gt; будет:</target>
        </trans-unit>
        <trans-unit id="72738bf06d8d0a70e528f6ed8fd8661243e5630e" translate="yes" xml:space="preserve">
          <source>Starting from Java 8</source>
          <target state="translated">Начиная с Java 8</target>
        </trans-unit>
        <trans-unit id="a25b7c18ebed7b7c9af41c4c67f70c4e45395133" translate="yes" xml:space="preserve">
          <source>Suppose I wish to generate a number between &lt;strong&gt;5-10&lt;/strong&gt;:</source>
          <target state="translated">Предположим, я хочу сгенерировать число от &lt;strong&gt;5 до 10&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="c1c5a9e4d6f004e36ddd7f55b4d8633d650d1994" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://en.wikipedia.org/wiki/Java_%28programming_language%29&quot;&gt;Java&lt;/a&gt; Math library function Math.random() generates a double value in the range &lt;code&gt;[0,1)&lt;/code&gt;. Notice this range does not include the 1.</source>
          <target state="translated">Функция библиотеки &lt;a href=&quot;http://en.wikipedia.org/wiki/Java_%28programming_language%29&quot;&gt;Java&lt;/a&gt; Math Math.random () генерирует двойное значение в диапазоне &lt;code&gt;[0,1)&lt;/code&gt; . Обратите внимание, что этот диапазон не включает 1.</target>
        </trans-unit>
        <trans-unit id="eccd7eeb52fe249a07ca013f67076d983ea58341" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.Random&lt;/code&gt; class in &lt;a href=&quot;http://en.wikipedia.org/wiki/Java_%28programming_language%29&quot;&gt;Java&lt;/a&gt; is 0-based. So, if you write something like this:</source>
          <target state="translated">Класс &lt;code&gt;Math.Random&lt;/code&gt; в &lt;a href=&quot;http://en.wikipedia.org/wiki/Java_%28programming_language%29&quot;&gt;Java&lt;/a&gt; основан на 0. Итак, если вы напишите что-то вроде этого:</target>
        </trans-unit>
        <trans-unit id="133a683d8f4c28e294e02e524cac52fe3ea24a78" translate="yes" xml:space="preserve">
          <source>The first parameter indicates just the size of the &lt;code&gt;IntStream&lt;/code&gt; generated (which is the overloaded method of the one that produces an unlimited &lt;code&gt;IntStream&lt;/code&gt;).</source>
          <target state="translated">Первый параметр указывает только размер сгенерированного &lt;code&gt;IntStream&lt;/code&gt; (который является перегруженным методом того, который производит неограниченный &lt;code&gt;IntStream&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="d4d4e3e92822f3130ce0367f4f91aa69860d0e93" translate="yes" xml:space="preserve">
          <source>The integer &lt;code&gt;x&lt;/code&gt; is now the random number that has a possible outcome of &lt;code&gt;5-10&lt;/code&gt;.</source>
          <target state="translated">Целое число &lt;code&gt;x&lt;/code&gt; теперь является случайным числом, которое имеет возможный результат &lt;code&gt;5-10&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f7f2ec9196e96b8112aaa02149a620546116a366" translate="yes" xml:space="preserve">
          <source>The random number will generate a number between &lt;strong&gt;0-5&lt;/strong&gt;.</source>
          <target state="translated">Случайное число будет генерировать число от &lt;strong&gt;0 до 5&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="90e78b44ea50e84549e5a290935cc79e4e0f4621" translate="yes" xml:space="preserve">
          <source>This example generates random integers in a specific range.</source>
          <target state="translated">В этом примере генерируются случайные целые числа в определенном диапазоне.</target>
        </trans-unit>
        <trans-unit id="08883864fe28aa40245cba16a067b1c946f8015a" translate="yes" xml:space="preserve">
          <source>This gives you a random number in between 1 (inclusive) and 11 (exclusive), so initialize the upperBound value by adding 1. For example, if you want to generate random number between 1 to 10 then initialize the upperBound number with 11 instead of 10.</source>
          <target state="translated">Это дает случайное число между 1 (включительно)и 11 (исключая),поэтому инициализируйте значение upperBound добавлением 1.Например,если вы хотите сгенерировать случайное число от 1 до 10,то инициализируйте upperBound числом 11 вместо 10.</target>
        </trans-unit>
        <trans-unit id="700e64c296f5400c00d07a7c1a67e9c89c33f689" translate="yes" xml:space="preserve">
          <source>This method will return a random number &lt;strong&gt;&lt;em&gt;between&lt;/em&gt;&lt;/strong&gt; the provided min and max value:</source>
          <target state="translated">Этот метод возвратит случайное число &lt;strong&gt;&lt;em&gt;между&lt;/em&gt;&lt;/strong&gt; предоставленным минимальным и максимальным значением:</target>
        </trans-unit>
        <trans-unit id="7822457d6f4e8c86fdaa8bf1b9b8264d09faecf2" translate="yes" xml:space="preserve">
          <source>This methods might be convenient to use:</source>
          <target state="translated">Этот метод может быть удобен в использовании:</target>
        </trans-unit>
        <trans-unit id="0d8faedcb05512e7db6071eb6abb74c6244fd654" translate="yes" xml:space="preserve">
          <source>This returns a value in the range &lt;code&gt;[0,Max-Min)&lt;/code&gt;, where 'Max-Min' is not included.</source>
          <target state="translated">Это возвращает значение в диапазоне &lt;code&gt;[0,Max-Min)&lt;/code&gt; , где &amp;laquo;Макс-Мин&amp;raquo; не включен.</target>
        </trans-unit>
        <trans-unit id="258b417eb98f9290077dfb43f49e9d574743cd1f" translate="yes" xml:space="preserve">
          <source>This would return a value in the range &lt;code&gt;[0,5)&lt;/code&gt;, where 5 is not included.</source>
          <target state="translated">Это вернет значение в диапазоне &lt;code&gt;[0,5)&lt;/code&gt; , где 5 не включено.</target>
        </trans-unit>
        <trans-unit id="f6f568dca88a06389ce53e35d22ec0aafe164131" translate="yes" xml:space="preserve">
          <source>To generate a random &lt;code&gt;int&lt;/code&gt; in the range &lt;code&gt;[0, 1_000]:&lt;/code&gt;</source>
          <target state="translated">Чтобы сгенерировать случайный &lt;code&gt;[0, 1_000]:&lt;/code&gt; &lt;code&gt;int&lt;/code&gt; в диапазоне [0, 1_000]:</target>
        </trans-unit>
        <trans-unit id="b13ad3eb91a11da1d982b900adfef5d2d508c818" translate="yes" xml:space="preserve">
          <source>To generate a random &lt;code&gt;int[100]&lt;/code&gt; array of values in the range &lt;code&gt;[0, 1_000]:&lt;/code&gt;</source>
          <target state="translated">Чтобы сгенерировать случайный массив значений &lt;code&gt;int[100]&lt;/code&gt; в диапазоне &lt;code&gt;[0, 1_000]:&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b3c7eea642061711c9c8d75d712fa3f7f121c36e" translate="yes" xml:space="preserve">
          <source>To generate a random number &quot;in between two numbers&quot;, use the following code:</source>
          <target state="translated">Чтобы сгенерировать случайное число &quot;между двумя числами&quot;,используйте следующий код:</target>
        </trans-unit>
        <trans-unit id="91b254b64c641f0c4328c157d3831fb77fba5534" translate="yes" xml:space="preserve">
          <source>To return a Stream of random values:</source>
          <target state="translated">Чтобы вернуть поток случайных значений:</target>
        </trans-unit>
        <trans-unit id="bc0e34154d952ed72b15f5d9618112640d548177" translate="yes" xml:space="preserve">
          <source>Use:</source>
          <target state="translated">Use:</target>
        </trans-unit>
        <trans-unit id="a0d2b34d4eef4147d99113918dbc139ed84e08ac" translate="yes" xml:space="preserve">
          <source>When you need a lot of random numbers, I do not recommend the Random class in the API. It has just a too small period. Try the &lt;a href=&quot;http://en.wikipedia.org/wiki/Mersenne_twister&quot;&gt;Mersenne twister&lt;/a&gt; instead. There is &lt;a href=&quot;http://cs.gmu.edu/~sean/research/&quot;&gt;a Java implementation&lt;/a&gt;.</source>
          <target state="translated">Когда вам нужно много случайных чисел, я не рекомендую случайный класс в API. У него слишком маленький период. Попробуйте вместо этого &lt;a href=&quot;http://en.wikipedia.org/wiki/Mersenne_twister&quot;&gt;твистер Мерсенна&lt;/a&gt; . Есть &lt;a href=&quot;http://cs.gmu.edu/~sean/research/&quot;&gt;реализация Java&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="cd2a1f36f534b81da88520f4a604511f4b37908b" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;/questions/tagged/java-8&quot;&gt;java-8&lt;/a&gt; they introduced the method &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/Random.html#ints-int-int-&quot;&gt;&lt;code&gt;ints(int randomNumberOrigin, int randomNumberBound)&lt;/code&gt;&lt;/a&gt; in the &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/Random.html&quot;&gt;&lt;code&gt;Random&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">С &lt;a href=&quot;/questions/tagged/java-8&quot;&gt;java-8&lt;/a&gt; они ввели метод &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/Random.html#ints-int-int-&quot;&gt; &lt;code&gt;ints(int randomNumberOrigin, int randomNumberBound)&lt;/code&gt; &lt;/a&gt; в классе &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/Random.html&quot;&gt; &lt;code&gt;Random&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="41429a68605d604e389aaaa0a0b8a46714dcb25d" translate="yes" xml:space="preserve">
          <source>You can achieve that concisely in Java 8:</source>
          <target state="translated">Вы можете достичь этого лаконично на Java 8:</target>
        </trans-unit>
        <trans-unit id="b1b7eb221e4bca208144f8aae631e6cce25400d1" translate="yes" xml:space="preserve">
          <source>You can also do it for &lt;code&gt;double&lt;/code&gt; and &lt;code&gt;long&lt;/code&gt; values. I hope it helps! :)</source>
          <target state="translated">Вы также можете сделать это для &lt;code&gt;double&lt;/code&gt; и &lt;code&gt;long&lt;/code&gt; значений. Я надеюсь, что это помогает! :)</target>
        </trans-unit>
        <trans-unit id="179ff90253b359a52f237edcd59c571c14038a17" translate="yes" xml:space="preserve">
          <source>You can cast it to an Integer if you want.</source>
          <target state="translated">Ты можешь отдать его Целому Субъекту,если хочешь.</target>
        </trans-unit>
        <trans-unit id="a432157a9ecc952193c02063e4d46cd81c51713f" translate="yes" xml:space="preserve">
          <source>You can edit your second code example to:</source>
          <target state="translated">Вы можете отредактировать свой второй пример кода:</target>
        </trans-unit>
        <trans-unit id="960c74253818fdbd5d40dbe15a77fb40a0849ef5" translate="yes" xml:space="preserve">
          <source>You can reuse it as field in hole class, also having all &lt;code&gt;Random.class&lt;/code&gt; methods in one place</source>
          <target state="translated">Вы можете повторно использовать его как поле в классе отверстий, также имея все методы &lt;code&gt;Random.class&lt;/code&gt; в одном месте</target>
        </trans-unit>
        <trans-unit id="4288add94bffc01de307edfcef9226c3130e13bb" translate="yes" xml:space="preserve">
          <source>You now will get a value in the range &lt;code&gt;[Min,Max)&lt;/code&gt;. Following our example, that means &lt;code&gt;[5,10)&lt;/code&gt;:</source>
          <target state="translated">Теперь вы получите значение в диапазоне &lt;code&gt;[Min,Max)&lt;/code&gt; . Следуя нашему примеру, это означает &lt;code&gt;[5,10)&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="1af7c48e2897bbe1df52be462305f6d0b0d68adb" translate="yes" xml:space="preserve">
          <source>and this method will return a random number &lt;strong&gt;&lt;em&gt;from&lt;/em&gt;&lt;/strong&gt; the provided min and max value (so the generated number could also be the min or max number):</source>
          <target state="translated">и этот метод вернет случайное число &lt;strong&gt;&lt;em&gt;из&lt;/em&gt;&lt;/strong&gt; предоставленного минимального и максимального значения (поэтому сгенерированное число также может быть минимальным или максимальным числом):</target>
        </trans-unit>
        <trans-unit id="33c2e6d69c65771ba0007da739b03e0184cca83a" translate="yes" xml:space="preserve">
          <source>i.e. 0, 1, 2, 3, 4, 5</source>
          <target state="translated">т.е.0,1,2,3,4,5.</target>
        </trans-unit>
        <trans-unit id="8af56a1614b434cf3178f6d4d3f5fc7ad69d5ea5" translate="yes" xml:space="preserve">
          <source>i.e. 10 - 5 + 1 = 6</source>
          <target state="translated">т.е.10-5+1=6</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
