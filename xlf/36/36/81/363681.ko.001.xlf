<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://stackoverflow.com/questions/363681">
    <body>
      <group id="363681">
        <trans-unit id="d50e7d328513f2b1a3b6f829fc2ef7beaee8f61a" translate="yes" xml:space="preserve">
          <source>5, 6, 7, 8, 9, 10</source>
          <target state="translated">5, 6, 7, 8, 9, 10</target>
        </trans-unit>
        <trans-unit id="53c3407a956a2afee1b19e7564b1abf79e14907f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(max - min)&lt;/code&gt; may cause overflow when &lt;code&gt;min&lt;/code&gt; is negative.</source>
          <target state="translated">&lt;code&gt;min&lt;/code&gt; 이 음수이면 &lt;code&gt;(max - min)&lt;/code&gt; 오버플로가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bf9143d161501c7f1c62618f26ce7e4a6d960d7d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ThreadLocalRandom&lt;/code&gt; equivalent of class &lt;code&gt;java.util.Random&lt;/code&gt; for multithreaded environment. Generating a random number is carried out locally in each of the threads. So we have a better performance by reducing the conflicts.</source>
          <target state="translated">멀티 스레드 환경의 경우 &lt;code&gt;java.util.Random&lt;/code&gt; 클래스에 해당하는 &lt;code&gt;ThreadLocalRandom&lt;/code&gt; 난수 생성은 각 스레드에서 로컬로 수행됩니다. 따라서 충돌을 줄임으로써 성능이 향상됩니다.</target>
        </trans-unit>
        <trans-unit id="c85ad3092147df9dac267fde8b3196c03bdb8ae9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rng.nextInt(n)&lt;/code&gt; cannot reach &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;rng.nextInt(n)&lt;/code&gt; 은 &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt; 에 도달 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="4d9e9e20f7aac2528246c075ba0f26e77d941a04" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; will be between &lt;code&gt;0-9&lt;/code&gt; inclusive.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 는 &lt;code&gt;0-9&lt;/code&gt; 사이입니다.</target>
        </trans-unit>
        <trans-unit id="04d17d49d42f7aa958c56bf72045501d97a8fc85" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt;,&lt;code&gt;y&lt;/code&gt; - intervals e.g. (1,10)</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; , &lt;code&gt;y&lt;/code&gt; - 간격 예 (1,10)</target>
        </trans-unit>
        <trans-unit id="52ff87f83adec2d054f8a075e9cb74a1b67b93c5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Joshua Bloch. Effective Java. Third Edition.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;조슈아 블로흐.&lt;/em&gt; &lt;em&gt;효과적인 자바.&lt;/em&gt; &lt;em&gt;세번째 판.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="280c4216aff1256df92681928aa89bfa708968bf" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Let us understand this&lt;/em&gt;...</source>
          <target state="translated">&lt;em&gt;우리가 이것을 이해하자&lt;/em&gt; ...</target>
        </trans-unit>
        <trans-unit id="4ba02a860d62a0ce3fdca0984fef470f8c6c326d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;5, 6, 7, 8, 9, 10&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;5, 6, 7, 8, 9, 10&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9fa5db5f8d5fdc066b6910c7eac99d7509f63f88" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Attempt 1:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;시도 1 :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d64953374ebeb47427eaab15525c43c69cfbcd0d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Attempt 2:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;시도 2 :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fff64afa139479edf99f7d4cdfb30fafff9256d7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Before Java 1.7&lt;/strong&gt;, the standard way to do this is as follows:</source>
          <target state="translated">&lt;strong&gt;Java 1.7 이전&lt;/strong&gt; 의 표준 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="35dfe5bc3594a02bd3fe6c09d25980ab5a21e6e6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Results example:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;결과 예 :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f2beb69e6e367fef69658c1d696a2a07e072fa71" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Sources:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Sources:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="08d8492fd7800370f43a1ff11b550bf2063aa5c9" translate="yes" xml:space="preserve">
          <source>A foolproof solution would return correct results for any &lt;code&gt;min &amp;lt;= max&lt;/code&gt; within [&lt;code&gt;Integer.MIN_VALUE&lt;/code&gt;, &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;]. Consider the following naive implementation:</source>
          <target state="translated">완벽한 솔루션은 [ &lt;code&gt;Integer.MIN_VALUE&lt;/code&gt; , &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt; ] 내에서 &lt;code&gt;min &amp;lt;= max&lt;/code&gt; 대한 올바른 결과를 반환합니다. 다음과 같은 순진한 구현을 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="8e0e5429c91836b2a3a26f6b53db4e04f16b4adc" translate="yes" xml:space="preserve">
          <source>Adding the &lt;em&gt;min&lt;/em&gt; value to the random number would produce:</source>
          <target state="translated">임의의 숫자에 &lt;em&gt;최소값을&lt;/em&gt; 추가하면 다음이 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="bd7228f94379933c630a807d21e13e69534c5d0c" translate="yes" xml:space="preserve">
          <source>Although inefficient, note that the probability of success in the &lt;code&gt;while&lt;/code&gt; loop will always be 50% or higher.</source>
          <target state="translated">비효율적이지만 &lt;code&gt;while&lt;/code&gt; 루프에서 성공할 확률은 항상 50 % 이상입니다.</target>
        </trans-unit>
        <trans-unit id="9a38b3d8b61a7e56fdb74467cc2100d1afca0839" translate="yes" xml:space="preserve">
          <source>An example run of this class :</source>
          <target state="translated">이 클래스의 예제 실행 :</target>
        </trans-unit>
        <trans-unit id="9143967cde6d291f9d89ee77cd2abcf07b7eca30" translate="yes" xml:space="preserve">
          <source>And there you have it. A random integer value in the range &lt;code&gt;[Min,Max]&lt;/code&gt;, or per the example &lt;code&gt;[5,10]&lt;/code&gt;:</source>
          <target state="translated">그리고 거기 있습니다. &lt;code&gt;[Min,Max]&lt;/code&gt; 범위 또는 예 &lt;code&gt;[5,10]&lt;/code&gt; 의 임의의 정수 값 :</target>
        </trans-unit>
        <trans-unit id="e5bba3c3294fb4832a4861ba0cf5a9d4bf11f5b4" translate="yes" xml:space="preserve">
          <source>Another option is just using &lt;a href=&quot;http://en.wikipedia.org/wiki/Apache_Commons&quot;&gt;Apache Commons&lt;/a&gt;:</source>
          <target state="translated">또 다른 옵션은 &lt;a href=&quot;http://en.wikipedia.org/wiki/Apache_Commons&quot;&gt;Apache Commons를 사용하는 것입니다&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c5ac9068c887d83e6ebc1412e1fa3f4ae45884d7" translate="yes" xml:space="preserve">
          <source>As of Java 7, you should no longer use &lt;code&gt;Random&lt;/code&gt;. For most uses, the
  random number generator of choice is now
  &lt;a href=&quot;https://stackoverflow.com/questions/363681/how-do-i-generate-random-integers-within-a-specific-range-in-java#answer-363692&quot;&gt;&lt;code&gt;ThreadLocalRandom&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Java 7 &lt;code&gt;Random&lt;/code&gt; 더 이상 Random을 사용하지 않아야합니다. 대부분의 용도에서 선택한 난수 생성기는 이제 &lt;a href=&quot;https://stackoverflow.com/questions/363681/how-do-i-generate-random-integers-within-a-specific-range-in-java#answer-363692&quot;&gt; &lt;code&gt;ThreadLocalRandom&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="aba0312d9a00a85dfb670fbece899e5dd624a8e6" translate="yes" xml:space="preserve">
          <source>Below is its source-code</source>
          <target state="translated">아래는 소스 코드입니다</target>
        </trans-unit>
        <trans-unit id="cf63e30970b4511f038a5360a0266801fcf00ada" translate="yes" xml:space="preserve">
          <source>But, this still doesn't include &lt;code&gt;Max&lt;/code&gt; and you are getting a double value. In order to get the &lt;code&gt;Max&lt;/code&gt; value included, you need to add 1 to your range parameter &lt;code&gt;(Max - Min)&lt;/code&gt; and then truncate the decimal part by casting to an int. This is accomplished via:</source>
          <target state="translated">그러나 이것은 여전히 &lt;code&gt;Max&lt;/code&gt; 를 포함하지 않으며 두 배의 가치를 얻습니다. 포함 된 &lt;code&gt;Max&lt;/code&gt; 값을 얻으려면 범위 매개 변수 &lt;code&gt;(Max - Min)&lt;/code&gt; 에 1을 추가 한 다음 int로 캐스팅하여 소수 부분을 잘라야합니다. 이것은 다음을 통해 달성됩니다.</target>
        </trans-unit>
        <trans-unit id="2d16f8004de47fad10a065d864e6ba3850945279" translate="yes" xml:space="preserve">
          <source>For a better understanding, check out forum post &lt;em&gt;&lt;a href=&quot;http://web.archive.org/web/20070308142422/http://www.kirupa.com/forum/showthread.php?s=&amp;amp;postid=81565&quot;&gt;Random Intervals (archive.org)&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">더 잘 이해하려면 포럼 게시물 &lt;em&gt;&lt;a href=&quot;http://web.archive.org/web/20070308142422/http://www.kirupa.com/forum/showthread.php?s=&amp;amp;postid=81565&quot;&gt;Random Intervals (archive.org)를 확인하십시오&lt;/a&gt;&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="a8f8675fcb00fa671abfefd2fae7d859fdc39737" translate="yes" xml:space="preserve">
          <source>For example if you want to generate five random integers (or a single one) in the range [0, 10], just do:</source>
          <target state="translated">예를 들어 [0, 10] 범위에서 5 개의 임의 정수 (또는 단일 정수)를 생성하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="c8472b4997d85d5093b6dce45d6c532479cc3125" translate="yes" xml:space="preserve">
          <source>For example, if you want &lt;code&gt;[5,10)&lt;/code&gt;, you need to cover five integer values so you use</source>
          <target state="translated">예를 들어 &lt;code&gt;[5,10)&lt;/code&gt; 을 원하면 5 개의 정수 값을 포함해야합니다.</target>
        </trans-unit>
        <trans-unit id="8049a097ac56b55cd395efa4bd307f3149bd7c68" translate="yes" xml:space="preserve">
          <source>For example: &lt;a href=&quot;http://commons.apache.org/proper/commons-math/javadocs/api-3.6.1/org/apache/commons/math3/random/RandomDataGenerator.html#nextInt(int,%20int)&quot;&gt;&lt;code&gt;RandomDataGenerator.nextInt&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;http://commons.apache.org/proper/commons-math/javadocs/api-3.6.1/org/apache/commons/math3/random/RandomDataGenerator.html#nextLong(long,%20long)&quot;&gt;&lt;code&gt;RandomDataGenerator.nextLong&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">예를 들면 다음과 같습니다. &lt;a href=&quot;http://commons.apache.org/proper/commons-math/javadocs/api-3.6.1/org/apache/commons/math3/random/RandomDataGenerator.html#nextInt(int,%20int)&quot;&gt; &lt;code&gt;RandomDataGenerator.nextInt&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;http://commons.apache.org/proper/commons-math/javadocs/api-3.6.1/org/apache/commons/math3/random/RandomDataGenerator.html#nextLong(long,%20long)&quot;&gt; &lt;code&gt;RandomDataGenerator.nextLong&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b3ce23cc604d2531eaaf48822cc50603a59ed270" translate="yes" xml:space="preserve">
          <source>For fork join pools and parallel
  streams, use &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/SplittableRandom.html&quot;&gt;&lt;code&gt;SplittableRandom&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">포크 조인 풀 및 병렬 스트림의 경우 &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/SplittableRandom.html&quot;&gt; &lt;code&gt;SplittableRandom&lt;/code&gt; 을&lt;/a&gt; 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="bc2898b6a33ab68f6f7b16591bb107b97c73ec3d" translate="yes" xml:space="preserve">
          <source>For fork join pools and parallel streams, use &lt;code&gt;SplittableRandom&lt;/code&gt; that is usually faster, has a better statistical independence and uniformity properties in comparison with &lt;code&gt;Random&lt;/code&gt;.</source>
          <target state="translated">포크 조인 풀 및 병렬 스트림의 경우, 일반적으로 더 빠른 &lt;code&gt;SplittableRandom&lt;/code&gt; 을 사용하십시오. 이는 &lt;code&gt;Random&lt;/code&gt; 과 비교할 때 통계적 독립성과 균일 성이 더 좋습니다.</target>
        </trans-unit>
        <trans-unit id="6bac0d2ddabf8e503354adfa7097b62a1d921feb" translate="yes" xml:space="preserve">
          <source>Forgive me for being fastidious, but the solution suggested by the majority, i.e., &lt;code&gt;min + rng.nextInt(max - min + 1))&lt;/code&gt;, seems perilous due to the fact that:</source>
          <target state="translated">까다로워서 용서하지만 대다수가 제안하는 솔루션, 즉 &lt;code&gt;min + rng.nextInt(max - min + 1))&lt;/code&gt; 은 다음과 같은 사실 때문에 위험합니다.</target>
        </trans-unit>
        <trans-unit id="02c3945cac1df84e8900052087bdfcb5b2a93474" translate="yes" xml:space="preserve">
          <source>Generate a random number for the difference of min and max by using the &lt;a href=&quot;http://docs.oracle.com/javase/6/docs/api/java/util/Random.html#nextInt(int)&quot;&gt;nextint(n)&lt;/a&gt; method and then add min number to the result:</source>
          <target state="translated">&lt;a href=&quot;http://docs.oracle.com/javase/6/docs/api/java/util/Random.html#nextInt(int)&quot;&gt;nextint (n)&lt;/a&gt; 메소드를 사용하여 min과 max의 차이에 대한 난수를 생성 한 다음 결과에 최소 숫자를 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="b65442957effc5ae8cf9a5120361b59260c9a77f" translate="yes" xml:space="preserve">
          <source>Hence we obtain the desired range.</source>
          <target state="translated">따라서 원하는 범위를 얻습니다.</target>
        </trans-unit>
        <trans-unit id="f11fd49c3f468066ec77cff040bb469c0232feb2" translate="yes" xml:space="preserve">
          <source>Here is a simple sample that shows how to generate random number from closed &lt;code&gt;[min, max]&lt;/code&gt; range, while &lt;code&gt;min &amp;lt;= max is true&lt;/code&gt;</source>
          <target state="translated">다음은 닫힌 &lt;code&gt;[min, max]&lt;/code&gt; 범위에서 난수를 생성하는 방법을 보여주는 간단한 샘플입니다. &lt;code&gt;min &amp;lt;= max is true&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b7c3366e5ec1b3da9c727be2680e7d4dee23d5ed" translate="yes" xml:space="preserve">
          <source>Here's a helpful class to generate random &lt;code&gt;ints&lt;/code&gt; in a range with any combination of inclusive/exclusive bounds:</source>
          <target state="translated">다음은 포괄적 / 독점 범위의 조합으로 임의의 &lt;code&gt;ints&lt;/code&gt; 를 생성하는 유용한 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="d268331db1b9b884025cc54bc5158b9f204e66ae" translate="yes" xml:space="preserve">
          <source>How do I generate a random &lt;code&gt;int&lt;/code&gt; value in a specific range?</source>
          <target state="translated">특정 범위에서 임의의 &lt;code&gt;int&lt;/code&gt; 값을 어떻게 생성합니까?</target>
        </trans-unit>
        <trans-unit id="dec58326940bddfa45be9172efd157f71cdd076b" translate="yes" xml:space="preserve">
          <source>How do I generate random integers within a specific range in Java</source>
          <target state="translated">Java에서 특정 범위 내에서 임의의 정수를 생성하는 방법</target>
        </trans-unit>
        <trans-unit id="2c70bb0e1f91d52382d883299a5a4093fc32cb4d" translate="yes" xml:space="preserve">
          <source>However, conversely there is no way to explicitly set the seed so it can be difficult to reproduce results in situations where that is useful such as testing or saving game states or similar.  In those situations, the pre-Java 1.7 technique shown below can be used.</source>
          <target state="translated">그러나 반대로 시드를 명시 적으로 설정하는 방법은 없으므로 게임 상태를 테스트하거나 저장하는 등의 유용한 상황에서 결과를 재현하기 어려울 수 있습니다. 이러한 상황에서는 아래에 표시된 Java 1.7 이전 기술을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="59b7e8e581d6f1baea7f8059ef1d817a37a1507a" translate="yes" xml:space="preserve">
          <source>I found this example &lt;a href=&quot;http://www.javapractices.com/topic/TopicAction.do?Id=62&quot;&gt;Generate random numbers&lt;/a&gt; :</source>
          <target state="translated">이 예제에서 &lt;a href=&quot;http://www.javapractices.com/topic/TopicAction.do?Id=62&quot;&gt;난수 생성을&lt;/a&gt; 발견했습니다.</target>
        </trans-unit>
        <trans-unit id="e048e284d40932f784386db3d94e6ffacd41387a" translate="yes" xml:space="preserve">
          <source>I have tried the following, but those do not work:</source>
          <target state="translated">다음을 시도했지만 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d5c59659497994547255e487eca88abb8961fd73" translate="yes" xml:space="preserve">
          <source>I use this:</source>
          <target state="translated">나는 이것을 사용한다 :</target>
        </trans-unit>
        <trans-unit id="5f799b4cb133c93bc90160bd29e1a8ca5ed963ad" translate="yes" xml:space="preserve">
          <source>I wonder if any of the random number generating methods provided by an &lt;a href=&quot;http://commons.apache.org/proper/commons-math/&quot;&gt;Apache Commons Math&lt;/a&gt; library would fit the bill.</source>
          <target state="translated">&lt;a href=&quot;http://commons.apache.org/proper/commons-math/&quot;&gt;Apache Commons Math&lt;/a&gt; 라이브러리에서 제공하는 난수 생성 방법 중 어느 것이나 법안에 맞는지 궁금합니다.</target>
        </trans-unit>
        <trans-unit id="366a43e263681eedef28a5a33bbc50a696763bbe" translate="yes" xml:space="preserve">
          <source>If you need to do multiple separate calls, you can create an infinite primitive iterator from the stream:</source>
          <target state="translated">여러 개의 개별 호출을 수행해야하는 경우 스트림에서 무한 기본 반복자를 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="447a63aba3759f1f4a96fc54ecd09a49f85164d9" translate="yes" xml:space="preserve">
          <source>In &lt;strong&gt;Java 1.7 or later&lt;/strong&gt;, the standard way to do this is as follows:</source>
          <target state="translated">&lt;strong&gt;Java 1.7 이상&lt;/strong&gt; 에서이를 수행하는 표준 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="7898c77d48fca6bc334863640a321ca356cf69f5" translate="yes" xml:space="preserve">
          <source>In case of rolling a dice it would be random number between 1 to 6 (not 0 to 6), so:</source>
          <target state="translated">주사위를 굴릴 경우 1에서 6 사이의 임의의 숫자 (0에서 6이 아님)가됩니다.</target>
        </trans-unit>
        <trans-unit id="552e0466f4b727e6a8c1c4bea066b62a9700db3d" translate="yes" xml:space="preserve">
          <source>In order to get a specific range of values first, you need to multiply by the magnitude of the range of values you want covered.</source>
          <target state="translated">특정 범위의 값을 먼저 얻으려면 적용 할 값 범위의 크기를 곱해야합니다.</target>
        </trans-unit>
        <trans-unit id="8ef8da9bc1b158af295e22f14c239b788f451f6e" translate="yes" xml:space="preserve">
          <source>In particular, there is no need to reinvent the random integer generation wheel when there is a straightforward API within the standard library to accomplish the task.</source>
          <target state="translated">특히 작업을 수행하기 위해 표준 라이브러리 내에 간단한 API가있는 경우 임의 정수 생성 휠을 재발 명할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="7c5f907db8d8f66b9cf13bcbfaad22baf8e61084" translate="yes" xml:space="preserve">
          <source>Initialize max with highest value and min with the lowest value.</source>
          <target state="translated">최대 값으로 최대 값을 초기화하고 최소값으로 최소값을 초기화하십시오.</target>
        </trans-unit>
        <trans-unit id="463010c9c79f697ccbda5c6bd19062186e254834" translate="yes" xml:space="preserve">
          <source>It can be done by simply doing the statement:</source>
          <target state="translated">간단히 진술을 수행하면됩니다.</target>
        </trans-unit>
        <trans-unit id="2c6fd9233d041771929275a2fc9ec445f0dc6df7" translate="yes" xml:space="preserve">
          <source>It is just clean and simple.</source>
          <target state="translated">깨끗하고 간단합니다.</target>
        </trans-unit>
        <trans-unit id="d58f7688b2dd075af1a24d8cabbe88050514e329" translate="yes" xml:space="preserve">
          <source>It's better to use &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/security/SecureRandom.html&quot;&gt;SecureRandom&lt;/a&gt; rather than just Random.</source>
          <target state="translated">무작위보다는 &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/security/SecureRandom.html&quot;&gt;SecureRandom&lt;/a&gt; 을 사용하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="aca01fcedbfb604965c6c46b3c65e0a6e9d35e5e" translate="yes" xml:space="preserve">
          <source>Just a small modification of your first solution would suffice.</source>
          <target state="translated">첫 번째 솔루션을 약간만 수정하면 충분합니다.</target>
        </trans-unit>
        <trans-unit id="4caac01541d68f7e084a78bdeef9b94cfce311b1" translate="yes" xml:space="preserve">
          <source>Just use the &lt;a href=&quot;http://docs.oracle.com/javase/6/docs/api/java/util/Random.html&quot;&gt;Random&lt;/a&gt; class:</source>
          <target state="translated">&lt;a href=&quot;http://docs.oracle.com/javase/6/docs/api/java/util/Random.html&quot;&gt;Random&lt;/a&gt; 클래스를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="37f5c4e33889e12238766319713940db408759cc" translate="yes" xml:space="preserve">
          <source>Let us take an example.</source>
          <target state="translated">예를 들어 보자.</target>
        </trans-unit>
        <trans-unit id="0d90506adf1e2e55ae91bb1009c94d83158f8b26" translate="yes" xml:space="preserve">
          <source>Note that this approach is more biased and less efficient than a &lt;code&gt;nextInt&lt;/code&gt; approach, &lt;a href=&quot;https://stackoverflow.com/a/738651/360211&quot;&gt;https://stackoverflow.com/a/738651/360211&lt;/a&gt;</source>
          <target state="translated">이 방식은 &lt;code&gt;nextInt&lt;/code&gt; 방식 ( &lt;a href=&quot;https://stackoverflow.com/a/738651/360211&quot;&gt;https://stackoverflow.com/a/738651/360211)&lt;/a&gt; 보다 편향되어 효율성이 떨어집니다.</target>
        </trans-unit>
        <trans-unit id="92827374c6e4932c8cc6b2094c09b0ff8bc44954" translate="yes" xml:space="preserve">
          <source>Now you need to shift this range up to the range that you are targeting. You do this by adding the Min value.</source>
          <target state="translated">이제이 범위를 타겟팅하는 범위로 이동해야합니다. 최소값을 추가하면됩니다.</target>
        </trans-unit>
        <trans-unit id="a4569b7b35289c7071f41cd6d9daec9eaa4785a1" translate="yes" xml:space="preserve">
          <source>Now, we need to determine how many possible values can be obtained. For this example, it would be:</source>
          <target state="translated">이제 얻을 수있는 값의 수를 결정해야합니다. 이 예의 경우 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="3de45ab53e152047f79f89466daae34ac7cd2499" translate="yes" xml:space="preserve">
          <source>One standard pattern for accomplishing this is:</source>
          <target state="translated">이를 달성하기위한 하나의 표준 패턴은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="ae911dea46ca8d7df93a74c89c46b05327ff335d" translate="yes" xml:space="preserve">
          <source>Or take a look to RandomUtils from &lt;a href=&quot;http://commons.apache.org/lang&quot;&gt;Apache Commons&lt;/a&gt;.</source>
          <target state="translated">또는 &lt;a href=&quot;http://commons.apache.org/lang&quot;&gt;Apache Commons의&lt;/a&gt; RandomUtils를 살펴보십시오.</target>
        </trans-unit>
        <trans-unit id="bb0a1880f256b5864abf8caf179d1be2edc0ceb8" translate="yes" xml:space="preserve">
          <source>Randomizer.java</source>
          <target state="translated">Randomizer.java</target>
        </trans-unit>
        <trans-unit id="e633e13622fb2103878088059bfab284d8e5a7b5" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Random.html#nextInt(int)&quot;&gt;the relevant JavaDoc&lt;/a&gt;.  In practice, the &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Random.html&quot;&gt;java.util.Random&lt;/a&gt; class is often preferable to &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Math.html#random()&quot;&gt;java.lang.Math.random()&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Random.html#nextInt(int)&quot;&gt;관련 JavaDoc을&lt;/a&gt; 참조하십시오. 실제로 &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Random.html&quot;&gt;java.util.Random&lt;/a&gt; 클래스는 종종 &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Math.html#random()&quot;&gt;java.lang.Math.random ()&lt;/a&gt; 보다 선호됩니다.</target>
        </trans-unit>
        <trans-unit id="8d2cd3fc97afda799ef644a4cf17c348a9264921" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ThreadLocalRandom.html#nextInt(int,int)&quot;&gt;the relevant JavaDoc&lt;/a&gt;.  This approach has the advantage of not needing to explicitly initialize a &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Random.html&quot;&gt;java.util.Random&lt;/a&gt; instance, which can be a source of confusion and error if used inappropriately.</source>
          <target state="translated">&lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ThreadLocalRandom.html#nextInt(int,int)&quot;&gt;관련 JavaDoc을&lt;/a&gt; 참조하십시오. 이 접근법은 &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Random.html&quot;&gt;java.util.Random&lt;/a&gt; 인스턴스를 명시 적으로 초기화 할 필요가 없다는 장점이 있는데, 부적절하게 사용하면 혼란과 오류의 원인이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fb9188eb09356f33a7756e3704cb495043408e97" translate="yes" xml:space="preserve">
          <source>See more here for implementation of &lt;a href=&quot;https://insight.io/github.com/lambdalab-mirror/jdk8u-jdk/blob/master/src/share/classes/java/util/Random.java?line=77&quot;&gt;&lt;code&gt;Random&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://insight.io/github.com/lambdalab-mirror/jdk8u-jdk/blob/master/src/share/classes/java/util/Random.java?line=77&quot;&gt; &lt;code&gt;Random&lt;/code&gt; &lt;/a&gt; 구현에 대해서는 여기를 참조하십시오</target>
        </trans-unit>
        <trans-unit id="3dabc4abce1d3a4e8cb5658649498f34bc588594" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;i.length&lt;/code&gt; will return &lt;code&gt;25&lt;/code&gt;, the &lt;code&gt;nextInt( i.length )&lt;/code&gt; will return a number between the range of &lt;code&gt;0-24&lt;/code&gt;. The other option is going with &lt;code&gt;Math.Random&lt;/code&gt; which works in the same way.</source>
          <target state="translated">&lt;code&gt;i.length&lt;/code&gt; 는 &lt;code&gt;25&lt;/code&gt; 를 반환하므로 &lt;code&gt;nextInt( i.length )&lt;/code&gt; 는 &lt;code&gt;0-24&lt;/code&gt; 범위의 숫자를 반환합니다. 다른 옵션은 &lt;code&gt;Math.Random&lt;/code&gt; 과 동일하게 작동합니다.</target>
        </trans-unit>
        <trans-unit id="bd31e08a34e92273d4cbd1bec88c2a165e28bf85" translate="yes" xml:space="preserve">
          <source>So, count of this would be max - min + 1.</source>
          <target state="translated">따라서이 수는 최대-최소 + 1입니다.</target>
        </trans-unit>
        <trans-unit id="c1867e29f00dd437faa0b55d65bc65ae286e52d1" translate="yes" xml:space="preserve">
          <source>So, given the following array of &lt;code&gt;25&lt;/code&gt; items, the code to generate a random number between &lt;code&gt;0&lt;/code&gt; (the base of the array) and &lt;code&gt;array.length&lt;/code&gt; would be:</source>
          <target state="translated">따라서 다음 &lt;code&gt;25&lt;/code&gt; 개의 항목 배열이 주어지면 &lt;code&gt;0&lt;/code&gt; (배열의 기준)과 &lt;code&gt;array.length&lt;/code&gt; 사이의 난수를 생성하는 코드는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="72738bf06d8d0a70e528f6ed8fd8661243e5630e" translate="yes" xml:space="preserve">
          <source>Starting from Java 8</source>
          <target state="translated">Java 8에서 시작</target>
        </trans-unit>
        <trans-unit id="a25b7c18ebed7b7c9af41c4c67f70c4e45395133" translate="yes" xml:space="preserve">
          <source>Suppose I wish to generate a number between &lt;strong&gt;5-10&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;5-10&lt;/strong&gt; 사이의 숫자를 생성한다고 가정합니다.</target>
        </trans-unit>
        <trans-unit id="c1c5a9e4d6f004e36ddd7f55b4d8633d650d1994" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://en.wikipedia.org/wiki/Java_%28programming_language%29&quot;&gt;Java&lt;/a&gt; Math library function Math.random() generates a double value in the range &lt;code&gt;[0,1)&lt;/code&gt;. Notice this range does not include the 1.</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/Java_%28programming_language%29&quot;&gt;Java&lt;/a&gt; Math 라이브러리 함수 Math.random ()은 &lt;code&gt;[0,1)&lt;/code&gt; 범위의 double 값을 생성합니다. 이 범위에는 1이 포함되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="eccd7eeb52fe249a07ca013f67076d983ea58341" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.Random&lt;/code&gt; class in &lt;a href=&quot;http://en.wikipedia.org/wiki/Java_%28programming_language%29&quot;&gt;Java&lt;/a&gt; is 0-based. So, if you write something like this:</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/Java_%28programming_language%29&quot;&gt;Java&lt;/a&gt; 의 &lt;code&gt;Math.Random&lt;/code&gt; 클래스는 0 기반입니다. 따라서 다음과 같이 작성하면</target>
        </trans-unit>
        <trans-unit id="133a683d8f4c28e294e02e524cac52fe3ea24a78" translate="yes" xml:space="preserve">
          <source>The first parameter indicates just the size of the &lt;code&gt;IntStream&lt;/code&gt; generated (which is the overloaded method of the one that produces an unlimited &lt;code&gt;IntStream&lt;/code&gt;).</source>
          <target state="translated">첫 번째 매개 변수는 생성 된 &lt;code&gt;IntStream&lt;/code&gt; 의 크기 (무제한 &lt;code&gt;IntStream&lt;/code&gt; 을 생성하는 메소드의 오버로드 된 메소드)를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="d4d4e3e92822f3130ce0367f4f91aa69860d0e93" translate="yes" xml:space="preserve">
          <source>The integer &lt;code&gt;x&lt;/code&gt; is now the random number that has a possible outcome of &lt;code&gt;5-10&lt;/code&gt;.</source>
          <target state="translated">정수 &lt;code&gt;x&lt;/code&gt; 는 이제 가능한 결과 &lt;code&gt;5-10&lt;/code&gt; 의 난수입니다.</target>
        </trans-unit>
        <trans-unit id="f7f2ec9196e96b8112aaa02149a620546116a366" translate="yes" xml:space="preserve">
          <source>The random number will generate a number between &lt;strong&gt;0-5&lt;/strong&gt;.</source>
          <target state="translated">난수는 &lt;strong&gt;0-5&lt;/strong&gt; 사이의 숫자를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="90e78b44ea50e84549e5a290935cc79e4e0f4621" translate="yes" xml:space="preserve">
          <source>This example generates random integers in a specific range.</source>
          <target state="translated">이 예제는 특정 범위에서 임의의 정수를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="08883864fe28aa40245cba16a067b1c946f8015a" translate="yes" xml:space="preserve">
          <source>This gives you a random number in between 1 (inclusive) and 11 (exclusive), so initialize the upperBound value by adding 1. For example, if you want to generate random number between 1 to 10 then initialize the upperBound number with 11 instead of 10.</source>
          <target state="translated">이것은 1 (포함)과 11 (제외) 사이의 난수를 제공하므로 1을 추가하여 upperBound 값을 초기화하십시오. 예를 들어, 1 ~ 10 사이의 난수를 생성하려면 다음 대신 11로 upperBound 수를 초기화하십시오 10.</target>
        </trans-unit>
        <trans-unit id="700e64c296f5400c00d07a7c1a67e9c89c33f689" translate="yes" xml:space="preserve">
          <source>This method will return a random number &lt;strong&gt;&lt;em&gt;between&lt;/em&gt;&lt;/strong&gt; the provided min and max value:</source>
          <target state="translated">이 메소드는 제공된 최소값과 최대 값 &lt;strong&gt;&lt;em&gt;사이&lt;/em&gt;&lt;/strong&gt; 의 난수를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="7822457d6f4e8c86fdaa8bf1b9b8264d09faecf2" translate="yes" xml:space="preserve">
          <source>This methods might be convenient to use:</source>
          <target state="translated">이 방법은 사용하기 편리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="0d8faedcb05512e7db6071eb6abb74c6244fd654" translate="yes" xml:space="preserve">
          <source>This returns a value in the range &lt;code&gt;[0,Max-Min)&lt;/code&gt;, where 'Max-Min' is not included.</source>
          <target state="translated">'Max-Min'이 포함되지 않은 &lt;code&gt;[0,Max-Min)&lt;/code&gt; 범위의 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="258b417eb98f9290077dfb43f49e9d574743cd1f" translate="yes" xml:space="preserve">
          <source>This would return a value in the range &lt;code&gt;[0,5)&lt;/code&gt;, where 5 is not included.</source>
          <target state="translated">이것은 &lt;code&gt;[0,5)&lt;/code&gt; 범위의 값을 반환하며, 여기서 5는 포함되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f6f568dca88a06389ce53e35d22ec0aafe164131" translate="yes" xml:space="preserve">
          <source>To generate a random &lt;code&gt;int&lt;/code&gt; in the range &lt;code&gt;[0, 1_000]:&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;[0, 1_000]:&lt;/code&gt; 범위에서 임의의 &lt;code&gt;int&lt;/code&gt; 를 생성하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="b13ad3eb91a11da1d982b900adfef5d2d508c818" translate="yes" xml:space="preserve">
          <source>To generate a random &lt;code&gt;int[100]&lt;/code&gt; array of values in the range &lt;code&gt;[0, 1_000]:&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;[0, 1_000]:&lt;/code&gt; 범위의 임의의 &lt;code&gt;int[100]&lt;/code&gt; 값 배열을 생성하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="b3c7eea642061711c9c8d75d712fa3f7f121c36e" translate="yes" xml:space="preserve">
          <source>To generate a random number &quot;in between two numbers&quot;, use the following code:</source>
          <target state="translated">&quot;두 숫자 사이에&quot;난수를 생성하려면 다음 코드를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="91b254b64c641f0c4328c157d3831fb77fba5534" translate="yes" xml:space="preserve">
          <source>To return a Stream of random values:</source>
          <target state="translated">임의의 값의 스트림을 반환하려면</target>
        </trans-unit>
        <trans-unit id="bc0e34154d952ed72b15f5d9618112640d548177" translate="yes" xml:space="preserve">
          <source>Use:</source>
          <target state="translated">Use:</target>
        </trans-unit>
        <trans-unit id="a0d2b34d4eef4147d99113918dbc139ed84e08ac" translate="yes" xml:space="preserve">
          <source>When you need a lot of random numbers, I do not recommend the Random class in the API. It has just a too small period. Try the &lt;a href=&quot;http://en.wikipedia.org/wiki/Mersenne_twister&quot;&gt;Mersenne twister&lt;/a&gt; instead. There is &lt;a href=&quot;http://cs.gmu.edu/~sean/research/&quot;&gt;a Java implementation&lt;/a&gt;.</source>
          <target state="translated">많은 난수가 필요할 때 API에서 Random 클래스를 권장하지 않습니다. 기간이 너무 짧습니다. &lt;a href=&quot;http://en.wikipedia.org/wiki/Mersenne_twister&quot;&gt;메르 센 트위스터를&lt;/a&gt; 대신 사용해보십시오. &lt;a href=&quot;http://cs.gmu.edu/~sean/research/&quot;&gt;Java 구현이&lt;/a&gt; 있습니다.</target>
        </trans-unit>
        <trans-unit id="cd2a1f36f534b81da88520f4a604511f4b37908b" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;/questions/tagged/java-8&quot;&gt;java-8&lt;/a&gt; they introduced the method &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/Random.html#ints-int-int-&quot;&gt;&lt;code&gt;ints(int randomNumberOrigin, int randomNumberBound)&lt;/code&gt;&lt;/a&gt; in the &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/Random.html&quot;&gt;&lt;code&gt;Random&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">&lt;a href=&quot;/questions/tagged/java-8&quot;&gt;java-8&lt;/a&gt; 에서는 &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/Random.html&quot;&gt; &lt;code&gt;Random&lt;/code&gt; &lt;/a&gt; 클래스에 &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/Random.html#ints-int-int-&quot;&gt; &lt;code&gt;ints(int randomNumberOrigin, int randomNumberBound)&lt;/code&gt; &lt;/a&gt; 메소드를 도입했습니다.</target>
        </trans-unit>
        <trans-unit id="41429a68605d604e389aaaa0a0b8a46714dcb25d" translate="yes" xml:space="preserve">
          <source>You can achieve that concisely in Java 8:</source>
          <target state="translated">Java 8에서 간결하게 달성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b1b7eb221e4bca208144f8aae631e6cce25400d1" translate="yes" xml:space="preserve">
          <source>You can also do it for &lt;code&gt;double&lt;/code&gt; and &lt;code&gt;long&lt;/code&gt; values. I hope it helps! :)</source>
          <target state="translated">&lt;code&gt;double&lt;/code&gt; 및 &lt;code&gt;long&lt;/code&gt; 값에 대해서도 수행 할 수 있습니다. 도움이 되길 바랍니다! :)</target>
        </trans-unit>
        <trans-unit id="179ff90253b359a52f237edcd59c571c14038a17" translate="yes" xml:space="preserve">
          <source>You can cast it to an Integer if you want.</source>
          <target state="translated">원하는 경우 정수로 캐스트 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a432157a9ecc952193c02063e4d46cd81c51713f" translate="yes" xml:space="preserve">
          <source>You can edit your second code example to:</source>
          <target state="translated">두 번째 코드 예제를 편집하여 다음을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="960c74253818fdbd5d40dbe15a77fb40a0849ef5" translate="yes" xml:space="preserve">
          <source>You can reuse it as field in hole class, also having all &lt;code&gt;Random.class&lt;/code&gt; methods in one place</source>
          <target state="translated">구멍 클래스의 필드로 재사용 할 수 있으며 모든 &lt;code&gt;Random.class&lt;/code&gt; 메소드를 한 곳에 둘 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4288add94bffc01de307edfcef9226c3130e13bb" translate="yes" xml:space="preserve">
          <source>You now will get a value in the range &lt;code&gt;[Min,Max)&lt;/code&gt;. Following our example, that means &lt;code&gt;[5,10)&lt;/code&gt;:</source>
          <target state="translated">이제 &lt;code&gt;[Min,Max)&lt;/code&gt; 범위의 값을 얻게됩니다. 우리의 예에 따르면, 그것은 &lt;code&gt;[5,10)&lt;/code&gt; 을 의미합니다 :</target>
        </trans-unit>
        <trans-unit id="1af7c48e2897bbe1df52be462305f6d0b0d68adb" translate="yes" xml:space="preserve">
          <source>and this method will return a random number &lt;strong&gt;&lt;em&gt;from&lt;/em&gt;&lt;/strong&gt; the provided min and max value (so the generated number could also be the min or max number):</source>
          <target state="translated">이 메소드는 제공된 최소값 및 최대 값 &lt;strong&gt;&lt;em&gt;에서&lt;/em&gt;&lt;/strong&gt; 난수를 리턴합니다 (따라서 생성 된 숫자는 최소 또는 최대 값일 수 있음).</target>
        </trans-unit>
        <trans-unit id="33c2e6d69c65771ba0007da739b03e0184cca83a" translate="yes" xml:space="preserve">
          <source>i.e. 0, 1, 2, 3, 4, 5</source>
          <target state="translated">즉, 0, 1, 2, 3, 4, 5</target>
        </trans-unit>
        <trans-unit id="8af56a1614b434cf3178f6d4d3f5fc7ad69d5ea5" translate="yes" xml:space="preserve">
          <source>i.e. 10 - 5 + 1 = 6</source>
          <target state="translated">즉 10-5 + 1 = 6</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
