<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/363681">
    <body>
      <group id="363681">
        <trans-unit id="d50e7d328513f2b1a3b6f829fc2ef7beaee8f61a" translate="yes" xml:space="preserve">
          <source>5, 6, 7, 8, 9, 10</source>
          <target state="translated">5,6,7,8,9,10</target>
        </trans-unit>
        <trans-unit id="53c3407a956a2afee1b19e7564b1abf79e14907f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(max - min)&lt;/code&gt; may cause overflow when &lt;code&gt;min&lt;/code&gt; is negative.</source>
          <target state="translated">&lt;code&gt;(max - min)&lt;/code&gt; &lt;code&gt;min&lt;/code&gt; が負の場合、オーバーフローが発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="bf9143d161501c7f1c62618f26ce7e4a6d960d7d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ThreadLocalRandom&lt;/code&gt; equivalent of class &lt;code&gt;java.util.Random&lt;/code&gt; for multithreaded environment. Generating a random number is carried out locally in each of the threads. So we have a better performance by reducing the conflicts.</source>
          <target state="translated">マルチスレッド環境用の &lt;code&gt;java.util.Random&lt;/code&gt; クラスに相当する &lt;code&gt;ThreadLocalRandom&lt;/code&gt; 。 乱数の生成は、各スレッドでローカルに実行されます。 したがって、競合を減らすことでパフォーマンスが向上します。</target>
        </trans-unit>
        <trans-unit id="c85ad3092147df9dac267fde8b3196c03bdb8ae9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rng.nextInt(n)&lt;/code&gt; cannot reach &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;rng.nextInt(n)&lt;/code&gt; が &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt; に到達できません。</target>
        </trans-unit>
        <trans-unit id="4d9e9e20f7aac2528246c075ba0f26e77d941a04" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; will be between &lt;code&gt;0-9&lt;/code&gt; inclusive.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; は &lt;code&gt;0-9&lt;/code&gt; までの範囲になります。</target>
        </trans-unit>
        <trans-unit id="04d17d49d42f7aa958c56bf72045501d97a8fc85" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt;,&lt;code&gt;y&lt;/code&gt; - intervals e.g. (1,10)</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 、 &lt;code&gt;y&lt;/code&gt; -間隔例（1,10）</target>
        </trans-unit>
        <trans-unit id="52ff87f83adec2d054f8a075e9cb74a1b67b93c5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Joshua Bloch. Effective Java. Third Edition.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;ジョシュア・ブロック。&lt;/em&gt; &lt;em&gt;効果的なJava。&lt;/em&gt; &lt;em&gt;第3版。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="280c4216aff1256df92681928aa89bfa708968bf" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Let us understand this&lt;/em&gt;...</source>
          <target state="translated">&lt;em&gt;これを理解しましょう&lt;/em&gt; ...</target>
        </trans-unit>
        <trans-unit id="4ba02a860d62a0ce3fdca0984fef470f8c6c326d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;5, 6, 7, 8, 9, 10&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;5、6、7、8、9、10&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9fa5db5f8d5fdc066b6910c7eac99d7509f63f88" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Attempt 1:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;試行1：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d64953374ebeb47427eaab15525c43c69cfbcd0d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Attempt 2:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;試み2：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fff64afa139479edf99f7d4cdfb30fafff9256d7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Before Java 1.7&lt;/strong&gt;, the standard way to do this is as follows:</source>
          <target state="translated">&lt;strong&gt;Java 1.7以前&lt;/strong&gt;は、これを行う標準的な方法は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="35dfe5bc3594a02bd3fe6c09d25980ab5a21e6e6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Results example:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;結果の例：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f2beb69e6e367fef69658c1d696a2a07e072fa71" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Sources:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Sources:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="08d8492fd7800370f43a1ff11b550bf2063aa5c9" translate="yes" xml:space="preserve">
          <source>A foolproof solution would return correct results for any &lt;code&gt;min &amp;lt;= max&lt;/code&gt; within [&lt;code&gt;Integer.MIN_VALUE&lt;/code&gt;, &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;]. Consider the following naive implementation:</source>
          <target state="translated">フールプルーフソリューションは、[ &lt;code&gt;Integer.MIN_VALUE&lt;/code&gt; 、 &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt; ]内のすべての &lt;code&gt;min &amp;lt;= max&lt;/code&gt; に対して正しい結果を返します。 次の素朴な実装を検討してください。</target>
        </trans-unit>
        <trans-unit id="8e0e5429c91836b2a3a26f6b53db4e04f16b4adc" translate="yes" xml:space="preserve">
          <source>Adding the &lt;em&gt;min&lt;/em&gt; value to the random number would produce:</source>
          <target state="translated">乱数に&lt;em&gt;最小&lt;/em&gt;値を追加すると、次のようになります。</target>
        </trans-unit>
        <trans-unit id="bd7228f94379933c630a807d21e13e69534c5d0c" translate="yes" xml:space="preserve">
          <source>Although inefficient, note that the probability of success in the &lt;code&gt;while&lt;/code&gt; loop will always be 50% or higher.</source>
          <target state="translated">非効率的ですが、 &lt;code&gt;while&lt;/code&gt; ループで成功する確率は常に50％以上になることに注意してください。</target>
        </trans-unit>
        <trans-unit id="9a38b3d8b61a7e56fdb74467cc2100d1afca0839" translate="yes" xml:space="preserve">
          <source>An example run of this class :</source>
          <target state="translated">このクラスの実行例です。</target>
        </trans-unit>
        <trans-unit id="9143967cde6d291f9d89ee77cd2abcf07b7eca30" translate="yes" xml:space="preserve">
          <source>And there you have it. A random integer value in the range &lt;code&gt;[Min,Max]&lt;/code&gt;, or per the example &lt;code&gt;[5,10]&lt;/code&gt;:</source>
          <target state="translated">そして、そこにあります。 &lt;code&gt;[Min,Max]&lt;/code&gt; 範囲、または例 &lt;code&gt;[5,10]&lt;/code&gt; のランダムな整数値：</target>
        </trans-unit>
        <trans-unit id="e5bba3c3294fb4832a4861ba0cf5a9d4bf11f5b4" translate="yes" xml:space="preserve">
          <source>Another option is just using &lt;a href=&quot;http://en.wikipedia.org/wiki/Apache_Commons&quot;&gt;Apache Commons&lt;/a&gt;:</source>
          <target state="translated">別のオプションは、 &lt;a href=&quot;http://en.wikipedia.org/wiki/Apache_Commons&quot;&gt;Apache Commons&lt;/a&gt;を使用することです：</target>
        </trans-unit>
        <trans-unit id="c5ac9068c887d83e6ebc1412e1fa3f4ae45884d7" translate="yes" xml:space="preserve">
          <source>As of Java 7, you should no longer use &lt;code&gt;Random&lt;/code&gt;. For most uses, the
  random number generator of choice is now
  &lt;a href=&quot;https://stackoverflow.com/questions/363681/how-do-i-generate-random-integers-within-a-specific-range-in-java#answer-363692&quot;&gt;&lt;code&gt;ThreadLocalRandom&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Java 7以降、 &lt;code&gt;Random&lt;/code&gt; を使用しないでください。 ほとんどの用途で、最適な乱数ジェネレータは&lt;a href=&quot;https://stackoverflow.com/questions/363681/how-do-i-generate-random-integers-within-a-specific-range-in-java#answer-363692&quot;&gt; &lt;code&gt;ThreadLocalRandom&lt;/code&gt; になりました&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="aba0312d9a00a85dfb670fbece899e5dd624a8e6" translate="yes" xml:space="preserve">
          <source>Below is its source-code</source>
          <target state="translated">以下はそのソースコードです</target>
        </trans-unit>
        <trans-unit id="cf63e30970b4511f038a5360a0266801fcf00ada" translate="yes" xml:space="preserve">
          <source>But, this still doesn't include &lt;code&gt;Max&lt;/code&gt; and you are getting a double value. In order to get the &lt;code&gt;Max&lt;/code&gt; value included, you need to add 1 to your range parameter &lt;code&gt;(Max - Min)&lt;/code&gt; and then truncate the decimal part by casting to an int. This is accomplished via:</source>
          <target state="translated">しかし、これにはまだ &lt;code&gt;Max&lt;/code&gt; が含まれておらず、二重の値を取得しています。 &lt;code&gt;Max&lt;/code&gt; 値を含めるには、範囲パラメーター &lt;code&gt;(Max - Min)&lt;/code&gt; 1を追加してから、intにキャストして小数部を切り捨てます。 これは、以下を介して実行されます。</target>
        </trans-unit>
        <trans-unit id="2d16f8004de47fad10a065d864e6ba3850945279" translate="yes" xml:space="preserve">
          <source>For a better understanding, check out forum post &lt;em&gt;&lt;a href=&quot;http://web.archive.org/web/20070308142422/http://www.kirupa.com/forum/showthread.php?s=&amp;amp;postid=81565&quot;&gt;Random Intervals (archive.org)&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">よりよく理解するために、フォーラムの投稿&lt;em&gt;&lt;a href=&quot;http://web.archive.org/web/20070308142422/http://www.kirupa.com/forum/showthread.php?s=&amp;amp;postid=81565&quot;&gt;Random Intervals（archive.org）を&lt;/a&gt;&lt;/em&gt;チェックしてください。</target>
        </trans-unit>
        <trans-unit id="a8f8675fcb00fa671abfefd2fae7d859fdc39737" translate="yes" xml:space="preserve">
          <source>For example if you want to generate five random integers (or a single one) in the range [0, 10], just do:</source>
          <target state="translated">例えば、[0,10]の範囲内に5つの乱数(または1つの乱数)を生成したい場合は、そうすればよい。</target>
        </trans-unit>
        <trans-unit id="c8472b4997d85d5093b6dce45d6c532479cc3125" translate="yes" xml:space="preserve">
          <source>For example, if you want &lt;code&gt;[5,10)&lt;/code&gt;, you need to cover five integer values so you use</source>
          <target state="translated">たとえば、 &lt;code&gt;[5,10)&lt;/code&gt; が必要な場合は、5つの整数値をカバーする必要があるので、</target>
        </trans-unit>
        <trans-unit id="8049a097ac56b55cd395efa4bd307f3149bd7c68" translate="yes" xml:space="preserve">
          <source>For example: &lt;a href=&quot;http://commons.apache.org/proper/commons-math/javadocs/api-3.6.1/org/apache/commons/math3/random/RandomDataGenerator.html#nextInt(int,%20int)&quot;&gt;&lt;code&gt;RandomDataGenerator.nextInt&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;http://commons.apache.org/proper/commons-math/javadocs/api-3.6.1/org/apache/commons/math3/random/RandomDataGenerator.html#nextLong(long,%20long)&quot;&gt;&lt;code&gt;RandomDataGenerator.nextLong&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">例： &lt;a href=&quot;http://commons.apache.org/proper/commons-math/javadocs/api-3.6.1/org/apache/commons/math3/random/RandomDataGenerator.html#nextInt(int,%20int)&quot;&gt; &lt;code&gt;RandomDataGenerator.nextInt&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;http://commons.apache.org/proper/commons-math/javadocs/api-3.6.1/org/apache/commons/math3/random/RandomDataGenerator.html#nextLong(long,%20long)&quot;&gt; &lt;code&gt;RandomDataGenerator.nextLong&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b3ce23cc604d2531eaaf48822cc50603a59ed270" translate="yes" xml:space="preserve">
          <source>For fork join pools and parallel
  streams, use &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/SplittableRandom.html&quot;&gt;&lt;code&gt;SplittableRandom&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">フォーク結合プールと並列ストリームの場合は、 &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/SplittableRandom.html&quot;&gt; &lt;code&gt;SplittableRandom&lt;/code&gt; を&lt;/a&gt;使用します 。</target>
        </trans-unit>
        <trans-unit id="bc2898b6a33ab68f6f7b16591bb107b97c73ec3d" translate="yes" xml:space="preserve">
          <source>For fork join pools and parallel streams, use &lt;code&gt;SplittableRandom&lt;/code&gt; that is usually faster, has a better statistical independence and uniformity properties in comparison with &lt;code&gt;Random&lt;/code&gt;.</source>
          <target state="translated">フォーク結合プールと並列ストリームの場合は、通常は高速で、 &lt;code&gt;Random&lt;/code&gt; と比較して統計的独立性と均一性のプロパティが優れている &lt;code&gt;SplittableRandom&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="6bac0d2ddabf8e503354adfa7097b62a1d921feb" translate="yes" xml:space="preserve">
          <source>Forgive me for being fastidious, but the solution suggested by the majority, i.e., &lt;code&gt;min + rng.nextInt(max - min + 1))&lt;/code&gt;, seems perilous due to the fact that:</source>
          <target state="translated">気難しいので私を許してください、しかし大多数によって提案された解決策、すなわち &lt;code&gt;min + rng.nextInt(max - min + 1))&lt;/code&gt; は次の事実のために危険であるようです：</target>
        </trans-unit>
        <trans-unit id="02c3945cac1df84e8900052087bdfcb5b2a93474" translate="yes" xml:space="preserve">
          <source>Generate a random number for the difference of min and max by using the &lt;a href=&quot;http://docs.oracle.com/javase/6/docs/api/java/util/Random.html#nextInt(int)&quot;&gt;nextint(n)&lt;/a&gt; method and then add min number to the result:</source>
          <target state="translated">&lt;a href=&quot;http://docs.oracle.com/javase/6/docs/api/java/util/Random.html#nextInt(int)&quot;&gt;nextint（n）&lt;/a&gt;メソッドを使用して最小値と最大値の差の乱数を生成し、結果に最小値を追加します。</target>
        </trans-unit>
        <trans-unit id="b65442957effc5ae8cf9a5120361b59260c9a77f" translate="yes" xml:space="preserve">
          <source>Hence we obtain the desired range.</source>
          <target state="translated">したがって、我々は所望の範囲を得る。</target>
        </trans-unit>
        <trans-unit id="f11fd49c3f468066ec77cff040bb469c0232feb2" translate="yes" xml:space="preserve">
          <source>Here is a simple sample that shows how to generate random number from closed &lt;code&gt;[min, max]&lt;/code&gt; range, while &lt;code&gt;min &amp;lt;= max is true&lt;/code&gt;</source>
          <target state="translated">以下は、閉じた &lt;code&gt;[min, max]&lt;/code&gt; 範囲から乱数を生成する方法を示す簡単なサンプルですが、 &lt;code&gt;min &amp;lt;= max is true&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b7c3366e5ec1b3da9c727be2680e7d4dee23d5ed" translate="yes" xml:space="preserve">
          <source>Here's a helpful class to generate random &lt;code&gt;ints&lt;/code&gt; in a range with any combination of inclusive/exclusive bounds:</source>
          <target state="translated">以下は、包含境界と排他境界の任意の組み合わせで範囲内にランダムな &lt;code&gt;ints&lt;/code&gt; を生成するのに役立つクラスです。</target>
        </trans-unit>
        <trans-unit id="d268331db1b9b884025cc54bc5158b9f204e66ae" translate="yes" xml:space="preserve">
          <source>How do I generate a random &lt;code&gt;int&lt;/code&gt; value in a specific range?</source>
          <target state="translated">特定の範囲でランダムな &lt;code&gt;int&lt;/code&gt; 値を生成するにはどうすればよいですか？</target>
        </trans-unit>
        <trans-unit id="dec58326940bddfa45be9172efd157f71cdd076b" translate="yes" xml:space="preserve">
          <source>How do I generate random integers within a specific range in Java</source>
          <target state="translated">Javaで特定の範囲内の乱数整数を生成するには?</target>
        </trans-unit>
        <trans-unit id="2c70bb0e1f91d52382d883299a5a4093fc32cb4d" translate="yes" xml:space="preserve">
          <source>However, conversely there is no way to explicitly set the seed so it can be difficult to reproduce results in situations where that is useful such as testing or saving game states or similar.  In those situations, the pre-Java 1.7 technique shown below can be used.</source>
          <target state="translated">しかし、逆に言えば、明示的にシードを設定する方法がないので、テストやゲームステートの保存など、それが有用な場面では結果を再現するのが難しいかもしれません。このような状況では、以下に示すようなJava 1.7以前のテクニックを使うことができます。</target>
        </trans-unit>
        <trans-unit id="59b7e8e581d6f1baea7f8059ef1d817a37a1507a" translate="yes" xml:space="preserve">
          <source>I found this example &lt;a href=&quot;http://www.javapractices.com/topic/TopicAction.do?Id=62&quot;&gt;Generate random numbers&lt;/a&gt; :</source>
          <target state="translated">私はこの例を見つけました&lt;a href=&quot;http://www.javapractices.com/topic/TopicAction.do?Id=62&quot;&gt;乱数を生成します&lt;/a&gt; ：</target>
        </trans-unit>
        <trans-unit id="e048e284d40932f784386db3d94e6ffacd41387a" translate="yes" xml:space="preserve">
          <source>I have tried the following, but those do not work:</source>
          <target state="translated">以下のことを試してみましたが、うまくいきません。</target>
        </trans-unit>
        <trans-unit id="d5c59659497994547255e487eca88abb8961fd73" translate="yes" xml:space="preserve">
          <source>I use this:</source>
          <target state="translated">私はこれを使っています。</target>
        </trans-unit>
        <trans-unit id="5f799b4cb133c93bc90160bd29e1a8ca5ed963ad" translate="yes" xml:space="preserve">
          <source>I wonder if any of the random number generating methods provided by an &lt;a href=&quot;http://commons.apache.org/proper/commons-math/&quot;&gt;Apache Commons Math&lt;/a&gt; library would fit the bill.</source>
          <target state="translated">&lt;a href=&quot;http://commons.apache.org/proper/commons-math/&quot;&gt;Apache Commons Math&lt;/a&gt;ライブラリによって提供される乱数生成メソッドのいずれかが、法案に適合するかどうか疑問に思います。</target>
        </trans-unit>
        <trans-unit id="366a43e263681eedef28a5a33bbc50a696763bbe" translate="yes" xml:space="preserve">
          <source>If you need to do multiple separate calls, you can create an infinite primitive iterator from the stream:</source>
          <target state="translated">複数回に分けて呼び出す必要がある場合は、ストリームから無限プリミティブイテレータを作成することができます。</target>
        </trans-unit>
        <trans-unit id="447a63aba3759f1f4a96fc54ecd09a49f85164d9" translate="yes" xml:space="preserve">
          <source>In &lt;strong&gt;Java 1.7 or later&lt;/strong&gt;, the standard way to do this is as follows:</source>
          <target state="translated">&lt;strong&gt;Java 1.7以降&lt;/strong&gt;では、これを行う標準的な方法は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="7898c77d48fca6bc334863640a321ca356cf69f5" translate="yes" xml:space="preserve">
          <source>In case of rolling a dice it would be random number between 1 to 6 (not 0 to 6), so:</source>
          <target state="translated">サイコロを振った場合は、1から6までの乱数(0から6ではない)になります。</target>
        </trans-unit>
        <trans-unit id="552e0466f4b727e6a8c1c4bea066b62a9700db3d" translate="yes" xml:space="preserve">
          <source>In order to get a specific range of values first, you need to multiply by the magnitude of the range of values you want covered.</source>
          <target state="translated">最初に特定の範囲の値を取得するためには、カバーしたい値の範囲の大きさを乗算する必要があります。</target>
        </trans-unit>
        <trans-unit id="8ef8da9bc1b158af295e22f14c239b788f451f6e" translate="yes" xml:space="preserve">
          <source>In particular, there is no need to reinvent the random integer generation wheel when there is a straightforward API within the standard library to accomplish the task.</source>
          <target state="translated">特に、標準ライブラリ内にタスクを達成するための簡単なAPIがあれば、乱数整数生成ホイールを再発明する必要はありません。</target>
        </trans-unit>
        <trans-unit id="7c5f907db8d8f66b9cf13bcbfaad22baf8e61084" translate="yes" xml:space="preserve">
          <source>Initialize max with highest value and min with the lowest value.</source>
          <target state="translated">maxを最大値、minを最小値で初期化します。</target>
        </trans-unit>
        <trans-unit id="463010c9c79f697ccbda5c6bd19062186e254834" translate="yes" xml:space="preserve">
          <source>It can be done by simply doing the statement:</source>
          <target state="translated">ステートメントをするだけでOKです。</target>
        </trans-unit>
        <trans-unit id="2c6fd9233d041771929275a2fc9ec445f0dc6df7" translate="yes" xml:space="preserve">
          <source>It is just clean and simple.</source>
          <target state="translated">すっきりしていてシンプルなだけです。</target>
        </trans-unit>
        <trans-unit id="d58f7688b2dd075af1a24d8cabbe88050514e329" translate="yes" xml:space="preserve">
          <source>It's better to use &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/security/SecureRandom.html&quot;&gt;SecureRandom&lt;/a&gt; rather than just Random.</source>
          <target state="translated">Randomだけではなく、 &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/security/SecureRandom.html&quot;&gt;SecureRandom&lt;/a&gt;を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="aca01fcedbfb604965c6c46b3c65e0a6e9d35e5e" translate="yes" xml:space="preserve">
          <source>Just a small modification of your first solution would suffice.</source>
          <target state="translated">最初の解決策に少し手を加えるだけで十分です。</target>
        </trans-unit>
        <trans-unit id="4caac01541d68f7e084a78bdeef9b94cfce311b1" translate="yes" xml:space="preserve">
          <source>Just use the &lt;a href=&quot;http://docs.oracle.com/javase/6/docs/api/java/util/Random.html&quot;&gt;Random&lt;/a&gt; class:</source>
          <target state="translated">&lt;a href=&quot;http://docs.oracle.com/javase/6/docs/api/java/util/Random.html&quot;&gt;Random&lt;/a&gt;クラスを使用するだけです。</target>
        </trans-unit>
        <trans-unit id="37f5c4e33889e12238766319713940db408759cc" translate="yes" xml:space="preserve">
          <source>Let us take an example.</source>
          <target state="translated">例を挙げてみましょう。</target>
        </trans-unit>
        <trans-unit id="0d90506adf1e2e55ae91bb1009c94d83158f8b26" translate="yes" xml:space="preserve">
          <source>Note that this approach is more biased and less efficient than a &lt;code&gt;nextInt&lt;/code&gt; approach, &lt;a href=&quot;https://stackoverflow.com/a/738651/360211&quot;&gt;https://stackoverflow.com/a/738651/360211&lt;/a&gt;</source>
          <target state="translated">この方法は、 &lt;code&gt;nextInt&lt;/code&gt; の方法&lt;a href=&quot;https://stackoverflow.com/a/738651/360211&quot;&gt;https://stackoverflow.com/a/738651/360211&lt;/a&gt;よりバイアスがかかり効率が悪いことに注意してください。</target>
        </trans-unit>
        <trans-unit id="92827374c6e4932c8cc6b2094c09b0ff8bc44954" translate="yes" xml:space="preserve">
          <source>Now you need to shift this range up to the range that you are targeting. You do this by adding the Min value.</source>
          <target state="translated">ここで、この範囲をターゲットとしている範囲までシフトさせる必要があります。これを行うには、Min値を追加します。</target>
        </trans-unit>
        <trans-unit id="a4569b7b35289c7071f41cd6d9daec9eaa4785a1" translate="yes" xml:space="preserve">
          <source>Now, we need to determine how many possible values can be obtained. For this example, it would be:</source>
          <target state="translated">さて、どれだけの可能な値が得られるかを判断する必要があります。この例では、そうなるでしょう。</target>
        </trans-unit>
        <trans-unit id="3de45ab53e152047f79f89466daae34ac7cd2499" translate="yes" xml:space="preserve">
          <source>One standard pattern for accomplishing this is:</source>
          <target state="translated">それを実現するための定番パターンが一つ。</target>
        </trans-unit>
        <trans-unit id="ae911dea46ca8d7df93a74c89c46b05327ff335d" translate="yes" xml:space="preserve">
          <source>Or take a look to RandomUtils from &lt;a href=&quot;http://commons.apache.org/lang&quot;&gt;Apache Commons&lt;/a&gt;.</source>
          <target state="translated">または、 &lt;a href=&quot;http://commons.apache.org/lang&quot;&gt;Apache Commonsの&lt;/a&gt; RandomUtilsをご覧ください。</target>
        </trans-unit>
        <trans-unit id="bb0a1880f256b5864abf8caf179d1be2edc0ceb8" translate="yes" xml:space="preserve">
          <source>Randomizer.java</source>
          <target state="translated">Randomizer.java</target>
        </trans-unit>
        <trans-unit id="e633e13622fb2103878088059bfab284d8e5a7b5" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Random.html#nextInt(int)&quot;&gt;the relevant JavaDoc&lt;/a&gt;.  In practice, the &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Random.html&quot;&gt;java.util.Random&lt;/a&gt; class is often preferable to &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Math.html#random()&quot;&gt;java.lang.Math.random()&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Random.html#nextInt(int)&quot;&gt;関連するJavaDocを&lt;/a&gt;参照してください。 実際には、 &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Random.html&quot;&gt;java.util.Random&lt;/a&gt;クラスが&lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Math.html#random()&quot;&gt;java.lang.Math.random（）&lt;/a&gt;よりも望ましい場合がよくあります 。</target>
        </trans-unit>
        <trans-unit id="8d2cd3fc97afda799ef644a4cf17c348a9264921" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ThreadLocalRandom.html#nextInt(int,int)&quot;&gt;the relevant JavaDoc&lt;/a&gt;.  This approach has the advantage of not needing to explicitly initialize a &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Random.html&quot;&gt;java.util.Random&lt;/a&gt; instance, which can be a source of confusion and error if used inappropriately.</source>
          <target state="translated">&lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ThreadLocalRandom.html#nextInt(int,int)&quot;&gt;関連するJavaDocを&lt;/a&gt;参照してください。 このアプローチには、 &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Random.html&quot;&gt;java.util.Random&lt;/a&gt;インスタンスを明示的に初期化する必要がないという利点があり、不適切に使用すると混乱やエラーの原因となる可能性があります。</target>
        </trans-unit>
        <trans-unit id="fb9188eb09356f33a7756e3704cb495043408e97" translate="yes" xml:space="preserve">
          <source>See more here for implementation of &lt;a href=&quot;https://insight.io/github.com/lambdalab-mirror/jdk8u-jdk/blob/master/src/share/classes/java/util/Random.java?line=77&quot;&gt;&lt;code&gt;Random&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://insight.io/github.com/lambdalab-mirror/jdk8u-jdk/blob/master/src/share/classes/java/util/Random.java?line=77&quot;&gt; &lt;code&gt;Random&lt;/code&gt; &lt;/a&gt;実装については、こちらをご覧ください</target>
        </trans-unit>
        <trans-unit id="3dabc4abce1d3a4e8cb5658649498f34bc588594" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;i.length&lt;/code&gt; will return &lt;code&gt;25&lt;/code&gt;, the &lt;code&gt;nextInt( i.length )&lt;/code&gt; will return a number between the range of &lt;code&gt;0-24&lt;/code&gt;. The other option is going with &lt;code&gt;Math.Random&lt;/code&gt; which works in the same way.</source>
          <target state="translated">&lt;code&gt;i.length&lt;/code&gt; は &lt;code&gt;25&lt;/code&gt; を返すため、 &lt;code&gt;nextInt( i.length )&lt;/code&gt; は0〜24の範囲の数値を返します。 もう1つのオプションは、同じように機能する &lt;code&gt;Math.Random&lt;/code&gt; を使用することです。</target>
        </trans-unit>
        <trans-unit id="bd31e08a34e92273d4cbd1bec88c2a165e28bf85" translate="yes" xml:space="preserve">
          <source>So, count of this would be max - min + 1.</source>
          <target state="translated">なので、これのカウントは最大-最小+1になります。</target>
        </trans-unit>
        <trans-unit id="c1867e29f00dd437faa0b55d65bc65ae286e52d1" translate="yes" xml:space="preserve">
          <source>So, given the following array of &lt;code&gt;25&lt;/code&gt; items, the code to generate a random number between &lt;code&gt;0&lt;/code&gt; (the base of the array) and &lt;code&gt;array.length&lt;/code&gt; would be:</source>
          <target state="translated">したがって、次の &lt;code&gt;25&lt;/code&gt; 項目の配列がある場合、 &lt;code&gt;0&lt;/code&gt; （配列の &lt;code&gt;array.length&lt;/code&gt; ）とarray.lengthの間の乱数を生成するコードは次のようになります。</target>
        </trans-unit>
        <trans-unit id="72738bf06d8d0a70e528f6ed8fd8661243e5630e" translate="yes" xml:space="preserve">
          <source>Starting from Java 8</source>
          <target state="translated">Java 8からのスタート</target>
        </trans-unit>
        <trans-unit id="a25b7c18ebed7b7c9af41c4c67f70c4e45395133" translate="yes" xml:space="preserve">
          <source>Suppose I wish to generate a number between &lt;strong&gt;5-10&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;5〜10の&lt;/strong&gt;数値を生成したいとします。</target>
        </trans-unit>
        <trans-unit id="c1c5a9e4d6f004e36ddd7f55b4d8633d650d1994" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://en.wikipedia.org/wiki/Java_%28programming_language%29&quot;&gt;Java&lt;/a&gt; Math library function Math.random() generates a double value in the range &lt;code&gt;[0,1)&lt;/code&gt;. Notice this range does not include the 1.</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/Java_%28programming_language%29&quot;&gt;Java&lt;/a&gt; Mathライブラリ関数Math.random（）は、範囲 &lt;code&gt;[0,1)&lt;/code&gt; の double値を生成します。 この範囲には1が含まれていないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="eccd7eeb52fe249a07ca013f67076d983ea58341" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.Random&lt;/code&gt; class in &lt;a href=&quot;http://en.wikipedia.org/wiki/Java_%28programming_language%29&quot;&gt;Java&lt;/a&gt; is 0-based. So, if you write something like this:</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/Java_%28programming_language%29&quot;&gt;Java&lt;/a&gt;の &lt;code&gt;Math.Random&lt;/code&gt; クラスは0ベースです。 したがって、次のように書くと、</target>
        </trans-unit>
        <trans-unit id="133a683d8f4c28e294e02e524cac52fe3ea24a78" translate="yes" xml:space="preserve">
          <source>The first parameter indicates just the size of the &lt;code&gt;IntStream&lt;/code&gt; generated (which is the overloaded method of the one that produces an unlimited &lt;code&gt;IntStream&lt;/code&gt;).</source>
          <target state="translated">最初のパラメーターは、生成された &lt;code&gt;IntStream&lt;/code&gt; （無制限の &lt;code&gt;IntStream&lt;/code&gt; を生成するメソッドのオーバーロードメソッド）のサイズのみを示します。</target>
        </trans-unit>
        <trans-unit id="d4d4e3e92822f3130ce0367f4f91aa69860d0e93" translate="yes" xml:space="preserve">
          <source>The integer &lt;code&gt;x&lt;/code&gt; is now the random number that has a possible outcome of &lt;code&gt;5-10&lt;/code&gt;.</source>
          <target state="translated">整数 &lt;code&gt;x&lt;/code&gt; は、結果として &lt;code&gt;5-10&lt;/code&gt; の可能性がある乱数になります。</target>
        </trans-unit>
        <trans-unit id="f7f2ec9196e96b8112aaa02149a620546116a366" translate="yes" xml:space="preserve">
          <source>The random number will generate a number between &lt;strong&gt;0-5&lt;/strong&gt;.</source>
          <target state="translated">乱数は&lt;strong&gt;0〜5の&lt;/strong&gt;数値を生成します。</target>
        </trans-unit>
        <trans-unit id="90e78b44ea50e84549e5a290935cc79e4e0f4621" translate="yes" xml:space="preserve">
          <source>This example generates random integers in a specific range.</source>
          <target state="translated">この例では、特定の範囲の乱数整数を生成します。</target>
        </trans-unit>
        <trans-unit id="08883864fe28aa40245cba16a067b1c946f8015a" translate="yes" xml:space="preserve">
          <source>This gives you a random number in between 1 (inclusive) and 11 (exclusive), so initialize the upperBound value by adding 1. For example, if you want to generate random number between 1 to 10 then initialize the upperBound number with 11 instead of 10.</source>
          <target state="translated">これにより、1(含む)から11(排他的)の間の乱数が生成されるので、1を足して upperBound の値を初期化します。例えば、1から10の間の乱数を生成したい場合は、上限値を10の代わりに11で初期化します。</target>
        </trans-unit>
        <trans-unit id="700e64c296f5400c00d07a7c1a67e9c89c33f689" translate="yes" xml:space="preserve">
          <source>This method will return a random number &lt;strong&gt;&lt;em&gt;between&lt;/em&gt;&lt;/strong&gt; the provided min and max value:</source>
          <target state="translated">このメソッドは、指定さ&lt;strong&gt;&lt;em&gt;れ&lt;/em&gt;&lt;/strong&gt;た最小値と最大値の&lt;strong&gt;&lt;em&gt;間&lt;/em&gt;&lt;/strong&gt;の乱数を返します。</target>
        </trans-unit>
        <trans-unit id="7822457d6f4e8c86fdaa8bf1b9b8264d09faecf2" translate="yes" xml:space="preserve">
          <source>This methods might be convenient to use:</source>
          <target state="translated">こういった方法があると便利かもしれません。</target>
        </trans-unit>
        <trans-unit id="0d8faedcb05512e7db6071eb6abb74c6244fd654" translate="yes" xml:space="preserve">
          <source>This returns a value in the range &lt;code&gt;[0,Max-Min)&lt;/code&gt;, where 'Max-Min' is not included.</source>
          <target state="translated">これは、 &lt;code&gt;[0,Max-Min)&lt;/code&gt; Max、Min]を含まない[0、Max-Min）の範囲の値を返します。</target>
        </trans-unit>
        <trans-unit id="258b417eb98f9290077dfb43f49e9d574743cd1f" translate="yes" xml:space="preserve">
          <source>This would return a value in the range &lt;code&gt;[0,5)&lt;/code&gt;, where 5 is not included.</source>
          <target state="translated">これにより、 &lt;code&gt;[0,5)&lt;/code&gt; の範囲の値が返されます。5は含まれません。</target>
        </trans-unit>
        <trans-unit id="f6f568dca88a06389ce53e35d22ec0aafe164131" translate="yes" xml:space="preserve">
          <source>To generate a random &lt;code&gt;int&lt;/code&gt; in the range &lt;code&gt;[0, 1_000]:&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;[0, 1_000]:&lt;/code&gt; 範囲でランダムな &lt;code&gt;int&lt;/code&gt; を生成するには：</target>
        </trans-unit>
        <trans-unit id="b13ad3eb91a11da1d982b900adfef5d2d508c818" translate="yes" xml:space="preserve">
          <source>To generate a random &lt;code&gt;int[100]&lt;/code&gt; array of values in the range &lt;code&gt;[0, 1_000]:&lt;/code&gt;</source>
          <target state="translated">範囲 &lt;code&gt;[0, 1_000]:&lt;/code&gt; の値のランダムな &lt;code&gt;int[100]&lt;/code&gt; 配列を生成するには：</target>
        </trans-unit>
        <trans-unit id="b3c7eea642061711c9c8d75d712fa3f7f121c36e" translate="yes" xml:space="preserve">
          <source>To generate a random number &quot;in between two numbers&quot;, use the following code:</source>
          <target state="translated">2つの数字の間にある」乱数を生成するには、以下のコードを使用します。</target>
        </trans-unit>
        <trans-unit id="91b254b64c641f0c4328c157d3831fb77fba5534" translate="yes" xml:space="preserve">
          <source>To return a Stream of random values:</source>
          <target state="translated">ランダムな値のストリームを返す。</target>
        </trans-unit>
        <trans-unit id="bc0e34154d952ed72b15f5d9618112640d548177" translate="yes" xml:space="preserve">
          <source>Use:</source>
          <target state="translated">Use:</target>
        </trans-unit>
        <trans-unit id="a0d2b34d4eef4147d99113918dbc139ed84e08ac" translate="yes" xml:space="preserve">
          <source>When you need a lot of random numbers, I do not recommend the Random class in the API. It has just a too small period. Try the &lt;a href=&quot;http://en.wikipedia.org/wiki/Mersenne_twister&quot;&gt;Mersenne twister&lt;/a&gt; instead. There is &lt;a href=&quot;http://cs.gmu.edu/~sean/research/&quot;&gt;a Java implementation&lt;/a&gt;.</source>
          <target state="translated">たくさんの乱数が必要な場合は、APIのRandomクラスはお勧めしません。 期間が短すぎます。 代わりに&lt;a href=&quot;http://en.wikipedia.org/wiki/Mersenne_twister&quot;&gt;メルセンヌツイスターをお&lt;/a&gt;試しください。 &lt;a href=&quot;http://cs.gmu.edu/~sean/research/&quot;&gt;Javaの実装&lt;/a&gt;があります 。</target>
        </trans-unit>
        <trans-unit id="cd2a1f36f534b81da88520f4a604511f4b37908b" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;/questions/tagged/java-8&quot;&gt;java-8&lt;/a&gt; they introduced the method &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/Random.html#ints-int-int-&quot;&gt;&lt;code&gt;ints(int randomNumberOrigin, int randomNumberBound)&lt;/code&gt;&lt;/a&gt; in the &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/Random.html&quot;&gt;&lt;code&gt;Random&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">彼らは&lt;a href=&quot;/questions/tagged/java-8&quot;&gt;java-8&lt;/a&gt;で&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/Random.html&quot;&gt; &lt;code&gt;Random&lt;/code&gt; &lt;/a&gt;クラスにメソッド&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/Random.html#ints-int-int-&quot;&gt; &lt;code&gt;ints(int randomNumberOrigin, int randomNumberBound)&lt;/code&gt; &lt;/a&gt;を導入しました。</target>
        </trans-unit>
        <trans-unit id="41429a68605d604e389aaaa0a0b8a46714dcb25d" translate="yes" xml:space="preserve">
          <source>You can achieve that concisely in Java 8:</source>
          <target state="translated">Java 8ではそれを簡潔に実現することができます。</target>
        </trans-unit>
        <trans-unit id="b1b7eb221e4bca208144f8aae631e6cce25400d1" translate="yes" xml:space="preserve">
          <source>You can also do it for &lt;code&gt;double&lt;/code&gt; and &lt;code&gt;long&lt;/code&gt; values. I hope it helps! :)</source>
          <target state="translated">&lt;code&gt;double&lt;/code&gt; 値と &lt;code&gt;long&lt;/code&gt; 値に対しても実行できます。 お役に立てば幸いです。 :)</target>
        </trans-unit>
        <trans-unit id="179ff90253b359a52f237edcd59c571c14038a17" translate="yes" xml:space="preserve">
          <source>You can cast it to an Integer if you want.</source>
          <target state="translated">必要に応じて整数にキャストすることができます。</target>
        </trans-unit>
        <trans-unit id="a432157a9ecc952193c02063e4d46cd81c51713f" translate="yes" xml:space="preserve">
          <source>You can edit your second code example to:</source>
          <target state="translated">2つ目のコード例を編集することができます。</target>
        </trans-unit>
        <trans-unit id="960c74253818fdbd5d40dbe15a77fb40a0849ef5" translate="yes" xml:space="preserve">
          <source>You can reuse it as field in hole class, also having all &lt;code&gt;Random.class&lt;/code&gt; methods in one place</source>
          <target state="translated">これを穴クラスのフィールドとして再利用でき、すべての &lt;code&gt;Random.class&lt;/code&gt; メソッドも1か所にあります</target>
        </trans-unit>
        <trans-unit id="4288add94bffc01de307edfcef9226c3130e13bb" translate="yes" xml:space="preserve">
          <source>You now will get a value in the range &lt;code&gt;[Min,Max)&lt;/code&gt;. Following our example, that means &lt;code&gt;[5,10)&lt;/code&gt;:</source>
          <target state="translated">今度は &lt;code&gt;[Min,Max)&lt;/code&gt; 範囲の値を取得します。 私たちの例に従うと、それは &lt;code&gt;[5,10)&lt;/code&gt; を意味します：</target>
        </trans-unit>
        <trans-unit id="1af7c48e2897bbe1df52be462305f6d0b0d68adb" translate="yes" xml:space="preserve">
          <source>and this method will return a random number &lt;strong&gt;&lt;em&gt;from&lt;/em&gt;&lt;/strong&gt; the provided min and max value (so the generated number could also be the min or max number):</source>
          <target state="translated">このメソッドは、指定さ&lt;strong&gt;&lt;em&gt;れ&lt;/em&gt;&lt;/strong&gt;た最小値と最大値&lt;strong&gt;&lt;em&gt;から&lt;/em&gt;&lt;/strong&gt;乱数を返します（したがって、生成された数値は最小値または最大値になることもあります）：</target>
        </trans-unit>
        <trans-unit id="33c2e6d69c65771ba0007da739b03e0184cca83a" translate="yes" xml:space="preserve">
          <source>i.e. 0, 1, 2, 3, 4, 5</source>
          <target state="translated">ばんごう</target>
        </trans-unit>
        <trans-unit id="8af56a1614b434cf3178f6d4d3f5fc7ad69d5ea5" translate="yes" xml:space="preserve">
          <source>i.e. 10 - 5 + 1 = 6</source>
          <target state="translated">つまり、10-5+1=6</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
