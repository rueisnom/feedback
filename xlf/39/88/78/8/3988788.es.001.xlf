<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/3988788">
    <body>
      <group id="3988788">
        <trans-unit id="9e17c4cb1696a52b482ad758b2ff26ed5d3b3913" translate="yes" xml:space="preserve">
          <source>-&amp;gt; &lt;strong&gt;Locate the root cause in the middle is your job.&lt;/strong&gt;</source>
          <target state="translated">-&amp;gt; &lt;strong&gt;Localizar la causa ra&amp;iacute;z en el medio es su trabajo.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7efdc3da3f50066fd34771714e2a5d58bba23bab" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;About this question - quite often I see a question come through where a novice programmer is &quot;getting an error&quot;, and they simply paste their stack trace and some random block of code without understanding what the stack trace is or how they can use it. This question is intended as a reference for novice programmers who might need help understanding the value of a stack trace.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Acerca de esta pregunta: con frecuencia veo que surge una pregunta en la que un programador novato est&amp;aacute; &quot;recibiendo un error&quot;, y simplemente pegan su seguimiento de pila y alg&amp;uacute;n bloque de c&amp;oacute;digo aleatorio sin comprender cu&amp;aacute;l es el seguimiento de pila o c&amp;oacute;mo pueden usarlo.&lt;/em&gt; &lt;em&gt;Esta pregunta pretende ser una referencia para programadores novatos que puedan necesitar ayuda para comprender el valor de un seguimiento de pila.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e30b6c9a4a40d436e4c73aca3e343c2bb6300046" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example with a chain of exceptions&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Ejemplo con una cadena de excepciones&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1aa697efe4c7ad2e19dd36e95353a7dbaf884e2d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;How should I deal with Stacktraces/Exceptions?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&amp;iquest;C&amp;oacute;mo debo tratar con Stacktraces / Exceptions?&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0c0c6819414fd35c2dd636ddb836570f5c6003f8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Key 1&lt;/strong&gt;:A tricky and important thing here need to be understand is : the deepest cause may not be the &quot;root cause&quot;, because if you write some &quot;bad code&quot;, it may cause some exception underneath which is deeper than its layer. For example, a bad sql query may cause SQLServerException connection reset in the bottem instead of syndax error, which may just in the middle of the stack.</source>
          <target state="translated">&lt;strong&gt;Clave 1&lt;/strong&gt; : Una cosa dif&amp;iacute;cil e importante aqu&amp;iacute; que hay que entender es: la causa m&amp;aacute;s profunda puede no ser la &quot;causa ra&amp;iacute;z&quot;, porque si escribe alg&amp;uacute;n &quot;c&amp;oacute;digo incorrecto&quot;, puede causar alguna excepci&amp;oacute;n debajo que es m&amp;aacute;s profunda que su capa. Por ejemplo, una consulta SQL incorrecta puede provocar el restablecimiento de la conexi&amp;oacute;n SQLServerException en el bottem en lugar del error de sincronizaci&amp;oacute;n, que puede estar justo en el medio de la pila.</target>
        </trans-unit>
        <trans-unit id="f9b27c0022bb53c8f1eda585728984a27b016e54" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Key 2&lt;/strong&gt;:Another tricky but important thing is inside each &quot;Cause by&quot; block, the first line was the deepest layer and happen first place for this block. For instance,</source>
          <target state="translated">&lt;strong&gt;Clave 2&lt;/strong&gt; : Otra cosa dif&amp;iacute;cil pero importante est&amp;aacute; dentro de cada bloque &quot;Causa por&quot;, la primera l&amp;iacute;nea fue la capa m&amp;aacute;s profunda y sucedi&amp;oacute; en primer lugar para este bloque. Por ejemplo,</target>
        </trans-unit>
        <trans-unit id="a6f80e689cac9f3d1c38029e6dc4646b88000beb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Manipulated stack trace:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Seguimiento de pila manipulado:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="efae31b0f686ad094d22681d2e39cca7f4838076" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;More daunting example with library code&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Ejemplo m&amp;aacute;s desalentador con c&amp;oacute;digo de biblioteca&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="30cc467eaf3b95a0739540a9156ebc43493b1920" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Simple Example&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Ejemplo simple&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f01621c5ba99bb45938e4719e48e833d01071218" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Standard behavior:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Comportamiento est&amp;aacute;ndar:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0def28abff50b5453af5effe03f21c319e75a393" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;TLDR&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;TLDR&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="54f43df9b5cad10843edbfcc5365f620a5f11c69" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To understand the name&lt;/strong&gt;: A stack trace is a a list of Exceptions( or you can say a list of &quot;Cause by&quot;), from the most surface Exception(e.g. Service Layer Exception) to the deepest one (e.g. Database Exception). Just like the reason we call it 'stack' is because stack is First in Last out (FILO), the deepest exception was happened in the very beginning, then a chain of exception was generated a series of consequences, the surface Exception was the last one happened in time, but we see it in the first place.</source>
          <target state="translated">&lt;strong&gt;Para comprender el nombre&lt;/strong&gt; : Un seguimiento de pila es una lista de Excepciones (o puede decir una lista de &quot;Causa por&quot;), desde la Excepci&amp;oacute;n m&amp;aacute;s superficial (por ejemplo, Excepci&amp;oacute;n de capa de servicio) hasta la m&amp;aacute;s profunda (por ejemplo, Excepci&amp;oacute;n de base de datos). Al igual que la raz&amp;oacute;n por la que lo llamamos 'stack' es porque stack es First in Last out (FILO), la excepci&amp;oacute;n m&amp;aacute;s profunda se produjo al principio, luego se gener&amp;oacute; una cadena de excepci&amp;oacute;n, una serie de consecuencias, la excepci&amp;oacute;n de superficie fue la &amp;uacute;ltima uno sucedi&amp;oacute; a tiempo, pero lo vemos en primer lugar.</target>
        </trans-unit>
        <trans-unit id="8c7c8060530d12e9c50d077a6c2083b8ced2d726" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;What is a Stacktrace?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&amp;iquest;Qu&amp;eacute; es un Stacktrace?&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5c07623d7483d1dbf34b9b1dfdb26de4239c6d4a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;What is an Exception?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&amp;iquest;Qu&amp;eacute; es una excepci&amp;oacute;n?&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2a965cc63ff98aa09a9add3204ed8471c665810a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why should I not use &lt;code&gt;catch (Exception e)&lt;/code&gt;?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&amp;iquest;Por qu&amp;eacute; no debo usar &lt;code&gt;catch (Exception e)&lt;/code&gt; ?&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6226ce539868df18e25336c8aac8f012bdde715e" translate="yes" xml:space="preserve">
          <source>A stacktrace is a very helpful debugging tool. It shows the call stack (meaning, the stack of functions that were called up to that point) at the time an uncaught exception was thrown (or the time the stacktrace was generated manually). This is very useful because it doesn't only show you where the error happened, but also how the program ended up in that place of the code.
This leads over to the next question:</source>
          <target state="translated">Un stacktrace es una herramienta de depuración muy útil.Muestra la pila de llamadas (es decir,la pila de funciones que fueron llamadas hasta ese momento)en el momento en que se lanzó una excepción no capturada (o en el momento en que el stacktrace se generó manualmente).Esto es muy útil porque no sólo muestra dónde ocurrió el error,sino también cómo el programa terminó en ese lugar del código.Esto nos lleva a la siguiente pregunta:</target>
        </trans-unit>
        <trans-unit id="e2c723fd5136ff587ea2f2fd14ae158435d55ec6" translate="yes" xml:space="preserve">
          <source>Again, with this exception we'd want to look at line &lt;code&gt;22&lt;/code&gt; of &lt;code&gt;Book.java&lt;/code&gt; to see what might cause the &lt;code&gt;NullPointerException&lt;/code&gt; here.</source>
          <target state="translated">Nuevamente, con esta excepci&amp;oacute;n, nos gustar&amp;iacute;a mirar la l&amp;iacute;nea &lt;code&gt;22&lt;/code&gt; de &lt;code&gt;Book.java&lt;/code&gt; para ver qu&amp;eacute; puede causar la &lt;code&gt;NullPointerException&lt;/code&gt; aqu&amp;iacute;.</target>
        </trans-unit>
        <trans-unit id="0ded27539184c5108bce982dfb7dae5374889b46" translate="yes" xml:space="preserve">
          <source>An Exception is what the runtime environment uses to tell you that an error occurred. Popular examples are NullPointerException, IndexOutOfBoundsException or ArithmeticException. Each of these are caused when you try to do something that is not possible. For example, a NullPointerException will be thrown when you try to dereference a Null-object:</source>
          <target state="translated">Una Excepción es lo que el entorno de ejecución utiliza para indicarle que se ha producido un error.Ejemplos populares son NullPointerException,IndexOutOfBoundsException o ArithmeticException.Cada una de ellas se produce cuando intentas hacer algo que no es posible.Por ejemplo,una excepción de punto nulo será lanzada cuando intentes desviarte de un objeto nulo:</target>
        </trans-unit>
        <trans-unit id="1446b54943846ed8ede7eecb7acb580739cf75ea" translate="yes" xml:space="preserve">
          <source>At first, find out what is causing the Exception. Try googleing the name of the exception to find out, what is the cause of that exception. Most of the time it will be caused by incorrect code. In the given examples above, all of the exceptions are caused by incorrect code. So for the NullPointerException example you could make sure that &lt;code&gt;a&lt;/code&gt; is never null at that time. You could, for example, initialise &lt;code&gt;a&lt;/code&gt; or include a check like this one:</source>
          <target state="translated">Al principio, averig&amp;uuml;e qu&amp;eacute; est&amp;aacute; causando la excepci&amp;oacute;n. Intente googlear el nombre de la excepci&amp;oacute;n para averiguar cu&amp;aacute;l es la causa de esa excepci&amp;oacute;n. La mayor&amp;iacute;a de las veces ser&amp;aacute; causado por un c&amp;oacute;digo incorrecto. En los ejemplos anteriores, todas las excepciones son causadas por un c&amp;oacute;digo incorrecto. Entonces, para el ejemplo NullPointerException, puede asegurarse de que &lt;code&gt;a&lt;/code&gt; nunca sea nulo en ese momento. Podr&amp;iacute;a, por ejemplo, inicializar o incluir un cheque como este:</target>
        </trans-unit>
        <trans-unit id="fec354ceddcbe7ea20bb5ca5289ffec7bb364462" translate="yes" xml:space="preserve">
          <source>Book.java:16 was called by Auther.java:25 which was called by Bootstrap.java:14, Book.java:16 was the root cause.
Here attach a diagram sort the trace stack in chronological order.</source>
          <target state="translated">Book.java:16 fue llamado por Auther.java:25 que fue llamado por Bootstrap.java:14,Book.java:16 fue la causa principal.Aquí adjuntamos un diagrama que ordena la pila de rastros en orden cronológico.</target>
        </trans-unit>
        <trans-unit id="80bd8c5b2084abf7b62c1a6d5f7ab234ebfa537a" translate="yes" xml:space="preserve">
          <source>Figure out what is the cause of the exception and fix it, so that it doesn't throw the exception at all.</source>
          <target state="translated">Averigua cuál es la causa de la excepción y arréglala,para que no arroje la excepción en absoluto.</target>
        </trans-unit>
        <trans-unit id="e438e6ab6e9a62b6589d45cb6ab68d42a04e71c6" translate="yes" xml:space="preserve">
          <source>First, ensure that you have all of your Java sources accessible in an Eclipse project.</source>
          <target state="translated">Primero,asegúrate de que tienes todas tus fuentes de Java accesibles en un proyecto Eclipse.</target>
        </trans-unit>
        <trans-unit id="564a794ca9340e5bd5c39ffc26dcfd0ab1ac2acd" translate="yes" xml:space="preserve">
          <source>However, all the method calls under that are library code. So we'll move up to the &quot;Caused by&quot; above it, and look for the first method call originating from our code, which is:</source>
          <target state="translated">Sin embargo,todas las llamadas del método bajo eso son código de biblioteca.Así que nos moveremos al &quot;Causado por&quot; de arriba,y buscaremos la primera llamada a un método que se origine en nuestro código,que es:</target>
        </trans-unit>
        <trans-unit id="ea628175c8c7097d7fa1404e48c24d9e23055a01" translate="yes" xml:space="preserve">
          <source>I am posting this answer so the topmost answer (when sorted by activity) is not one that is just plain wrong.</source>
          <target state="translated">Estoy publicando esta respuesta para que la respuesta más alta (cuando se ordena por actividad)no sea una que esté simplemente equivocada.</target>
        </trans-unit>
        <trans-unit id="5b77138d4162100bb0d1021e6370830c0d6aae0b" translate="yes" xml:space="preserve">
          <source>If 1. is not possible, catch the specific exception and handle it.</source>
          <target state="translated">Si 1.no es posible,captar la excepción específica y manejarla.</target>
        </trans-unit>
        <trans-unit id="15d8614888c88baa8e0dd1a6f06bbc31587cc34c" translate="yes" xml:space="preserve">
          <source>If you are using open-source software, you might need to download and attach to your project the sources if you want to examine. Download the source jars, in your project, open the &lt;em&gt;Referenced Libraries&lt;/em&gt; folder to find your jar for your open-source module (the one with the class files) then right click, select &lt;em&gt;Properties&lt;/em&gt; and attach the source jar.</source>
          <target state="translated">Si est&amp;aacute; utilizando software de c&amp;oacute;digo abierto, es posible que necesite descargar y adjuntar a su proyecto las fuentes si desea examinarlas. Descargue los archivos jar de origen, en su proyecto, abra la carpeta &lt;em&gt;Bibliotecas referenciadas&lt;/em&gt; para encontrar su jar para su m&amp;oacute;dulo de c&amp;oacute;digo abierto (el que tiene los archivos de clase), luego haga clic derecho, seleccione &lt;em&gt;Propiedades&lt;/em&gt; y adjunte el jar de origen.</target>
        </trans-unit>
        <trans-unit id="487eb90890ff758ab851426d85fc6a7789a9eae0" translate="yes" xml:space="preserve">
          <source>If you get a stack trace and want to trace the cause of the exception, a good start point in understanding it is to use the &lt;em&gt;Java Stack Trace Console&lt;/em&gt; in &lt;strong&gt;Eclipse&lt;/strong&gt;. If you use another IDE there may be a similar feature, but this answer is about Eclipse.</source>
          <target state="translated">Si obtiene un seguimiento de la pila y desea rastrear la causa de la excepci&amp;oacute;n, un buen punto de partida para comprenderlo es utilizar la &lt;em&gt;Consola de seguimiento de pila de Java&lt;/em&gt; en &lt;strong&gt;Eclipse&lt;/strong&gt; . Si usa otro IDE, puede haber una caracter&amp;iacute;stica similar, pero esta respuesta es sobre Eclipse.</target>
        </trans-unit>
        <trans-unit id="613591bc550676714745432c75c4a608a01e1002" translate="yes" xml:space="preserve">
          <source>In our code we would want to evaluate that &lt;code&gt;firstName&lt;/code&gt; contains a value, we would do this like so: &lt;code&gt;if(firstName == null || firstName.equals(&quot;&quot;))  return;&lt;/code&gt;</source>
          <target state="translated">En nuestro c&amp;oacute;digo nos gustar&amp;iacute;a evaluar que &lt;code&gt;firstName&lt;/code&gt; contiene un valor, lo har&amp;iacute;amos as&amp;iacute;: &lt;code&gt;if(firstName == null || firstName.equals(&quot;&quot;)) return;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="09a8a4114baff1ef1a66283b7e865492f7e51289" translate="yes" xml:space="preserve">
          <source>In simple terms, a &lt;strong&gt;stack trace&lt;/strong&gt; is a list of the method calls that the application was in the middle of when an Exception was thrown.</source>
          <target state="translated">En t&amp;eacute;rminos simples, un &lt;strong&gt;seguimiento de pila&lt;/strong&gt; es una lista de las llamadas a m&amp;eacute;todos que la aplicaci&amp;oacute;n estaba en el medio de cuando se lanz&amp;oacute; una Excepci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="14b0ec51c80a071a2bd3488f704f780ec376c702" translate="yes" xml:space="preserve">
          <source>In this example, there's a lot more. What we're mostly concerned about is looking for methods that are from &lt;em&gt;our code&lt;/em&gt;, which would be anything in the &lt;code&gt;com.example.myproject&lt;/code&gt; package. From the second example (above), we'd first want to look down for the root cause, which is:</source>
          <target state="translated">En este ejemplo, hay mucho m&amp;aacute;s. Lo que m&amp;aacute;s nos preocupa es buscar m&amp;eacute;todos que provienen de &lt;em&gt;nuestro c&amp;oacute;digo&lt;/em&gt; , que ser&amp;iacute;a cualquier cosa en el paquete &lt;code&gt;com.example.myproject&lt;/code&gt; . En el segundo ejemplo (arriba), primero queremos buscar la causa ra&amp;iacute;z, que es:</target>
        </trans-unit>
        <trans-unit id="fd8f9a5ad29840838bb582c1d11aeb8597efa9b6" translate="yes" xml:space="preserve">
          <source>Just to add to the other examples, there are &lt;strong&gt;inner(nested) classes&lt;/strong&gt; that appear with the &lt;code&gt;$&lt;/code&gt; sign. For example:</source>
          <target state="translated">Solo para agregar a los otros ejemplos, hay &lt;strong&gt;clases internas (anidadas)&lt;/strong&gt; que aparecen con el signo &lt;code&gt;$&lt;/code&gt; . Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="8ad5d1e6de22d3b3226789df2d8fbb5e80d49cf6" translate="yes" xml:space="preserve">
          <source>Let's use a small example to show why you should not just catch all exceptions:</source>
          <target state="translated">Usemos un pequeño ejemplo para mostrar por qué no se deben captar todas las excepciones:</target>
        </trans-unit>
        <trans-unit id="23fb093c264a0e642af1b47a80f767b268b0a3c0" translate="yes" xml:space="preserve">
          <source>Like in previous examples, we should look at &lt;code&gt;MyEntityService.java&lt;/code&gt; on line &lt;code&gt;59&lt;/code&gt;, because that's where this error originated (this one's a bit obvious what went wrong, since the SQLException states the error, but the debugging procedure is what we're after).</source>
          <target state="translated">Al igual que en los ejemplos anteriores, deber&amp;iacute;amos mirar &lt;code&gt;MyEntityService.java&lt;/code&gt; en la l&amp;iacute;nea &lt;code&gt;59&lt;/code&gt; , porque ah&amp;iacute; es donde se origin&amp;oacute; este error (esto es un poco obvio por lo que sali&amp;oacute; mal, ya que la excepci&amp;oacute;n SQLException indica el error, pero el procedimiento de depuraci&amp;oacute;n es lo que estamos buscando) .</target>
        </trans-unit>
        <trans-unit id="8fc9cf7ede540afe6a0e435663def251386adccc" translate="yes" xml:space="preserve">
          <source>Never just add a try/catch and then just ignore the exception! Don't do that!</source>
          <target state="translated">¡Nunca añadas una prueba y luego ignores la excepción! ¡No hagas eso!</target>
        </trans-unit>
        <trans-unit id="39d9f60e1e2998c13e4e2032d71593c865205a1e" translate="yes" xml:space="preserve">
          <source>Never use &lt;code&gt;catch (Exception e)&lt;/code&gt;, always catch specific Exceptions. That will save you a lot of headaches.</source>
          <target state="translated">Nunca use &lt;code&gt;catch (Exception e)&lt;/code&gt; , siempre capture Excepciones espec&amp;iacute;ficas. Eso te ahorrar&amp;aacute; muchos dolores de cabeza.</target>
        </trans-unit>
        <trans-unit id="495ca3360ccb4106b9d0e5dce9e4592ebbcbe3e7" translate="yes" xml:space="preserve">
          <source>Paste your stack trace into the console. It will then provide a list of links into your source code and any other source code available.</source>
          <target state="translated">Pegue el rastro de su pila en la consola.Entonces proporcionará una lista de enlaces en su código fuente y cualquier otro código fuente disponible.</target>
        </trans-unit>
        <trans-unit id="93298efff7ecf9f3994b22176c9239a238b08680" translate="yes" xml:space="preserve">
          <source>People have referred to this as a &quot;stack trace&quot;. &lt;strong&gt;What is a stack trace?&lt;/strong&gt; What can it tell me about the error that's happening in my program?</source>
          <target state="translated">La gente se ha referido a esto como un &quot;rastro de pila&quot;. &lt;strong&gt;&amp;iquest;Qu&amp;eacute; es un seguimiento de pila?&lt;/strong&gt; &amp;iquest;Qu&amp;eacute; puede decirme sobre el error que est&amp;aacute; ocurriendo en mi programa?</target>
        </trans-unit>
        <trans-unit id="2d6cea83d2fa9c56b7e4f83d9acb2e8a9b781054" translate="yes" xml:space="preserve">
          <source>Since Rob has used the &lt;code&gt;NullPointerException&lt;/code&gt; (NPE) to illustrate something common, we can help to remove this issue in the following manner:</source>
          <target state="translated">Como Rob ha utilizado la &lt;code&gt;NullPointerException&lt;/code&gt; (NPE) para ilustrar algo com&amp;uacute;n, podemos ayudar a eliminar este problema de la siguiente manera:</target>
        </trans-unit>
        <trans-unit id="c6e423de13a20e8485c4d2b1b23c4c523c61a38c" translate="yes" xml:space="preserve">
          <source>Sometimes applications will catch an Exception and re-throw it as the cause of another Exception.  This typically looks like:</source>
          <target state="translated">A veces las solicitudes captan una Excepción y la vuelven a lanzar como la causa de otra Excepción.Esto es lo que típicamente parece:</target>
        </trans-unit>
        <trans-unit id="e466c8c050df7f99d7ed3eda1da2960c7c20347e" translate="yes" xml:space="preserve">
          <source>Sometimes when I run my application it gives me an error that looks like:</source>
          <target state="translated">A veces cuando ejecuto mi aplicación me da un error que parece:</target>
        </trans-unit>
        <trans-unit id="d22141c591cb9e0635bd1ecdf684ef89dcc76510" translate="yes" xml:space="preserve">
          <source>Sometimes you can't make sure that you don't get an exception. For example, if you are using a network connection in your program, you cannot stop the computer from loosing it's internet connection (e.g. you can't stop the user from disconnecting the computer's network connection). In this case the network library will probably throw an exception. Now you should catch the exception and &lt;strong&gt;handle&lt;/strong&gt; it. This means, in the example with the network connection, you should try to reopen the connection or notify the user or something like that. Also, whenever you use catch, always catch only the exception you want to catch, &lt;strong&gt;do not use broad catch statements like &lt;code&gt;catch (Exception e)&lt;/code&gt;&lt;/strong&gt; that would catch all exceptions. This is very important, because otherwise you might accidentally catch the wrong exception and react in the wrong way.</source>
          <target state="translated">A veces no puedes asegurarte de no obtener una excepci&amp;oacute;n. Por ejemplo, si est&amp;aacute; utilizando una conexi&amp;oacute;n de red en su programa, no puede evitar que la computadora pierda su conexi&amp;oacute;n a Internet (por ejemplo, no puede evitar que el usuario desconecte la conexi&amp;oacute;n de red de la computadora). En este caso, la biblioteca de red probablemente arrojar&amp;aacute; una excepci&amp;oacute;n. Ahora deber&amp;iacute;as atrapar la excepci&amp;oacute;n y &lt;strong&gt;manejarla&lt;/strong&gt; . Esto significa que, en el ejemplo con la conexi&amp;oacute;n de red, debe intentar volver a abrir la conexi&amp;oacute;n o notificar al usuario o algo as&amp;iacute;. Adem&amp;aacute;s, siempre que use catch, siempre capture solo la excepci&amp;oacute;n que desea capturar, &lt;strong&gt;no use declaraciones de captura amplias como &lt;code&gt;catch (Exception e)&lt;/code&gt; &lt;/strong&gt; que capturar&amp;iacute;an todas las excepciones. Esto es muy importante, porque de lo contrario podr&amp;iacute;a detectar accidentalmente la excepci&amp;oacute;n incorrecta y reaccionar de la manera incorrecta.</target>
        </trans-unit>
        <trans-unit id="cb9cb776c20bea056423449369d53ef52a9c4259" translate="yes" xml:space="preserve">
          <source>Stack trace:</source>
          <target state="translated">Rastro de la pila:</target>
        </trans-unit>
        <trans-unit id="bf69b603dad9a6fc4eb1f9b4f8ea6caf897877da" translate="yes" xml:space="preserve">
          <source>The above is the proper order to check for nulls, we start with the base object, dog in this case, and then begin walking down the tree of possibilities to make sure everything is valid before processing.  If the order were reversed a NPE could potentially be thrown and our program would crash.</source>
          <target state="translated">Lo anterior es el orden adecuado para comprobar si hay nulos,empezamos con el objeto base,perro en este caso,y luego empezamos a caminar por el árbol de posibilidades para asegurarnos de que todo es válido antes de procesarlo.Si el orden se invirtiera,un NPE podría potencialmente ser lanzado y nuestro programa se estrellaría.</target>
        </trans-unit>
        <trans-unit id="5fb27293f5065e48d95aab824bc00124be221a18" translate="yes" xml:space="preserve">
          <source>The above prevents us from using &lt;code&gt;firstName&lt;/code&gt; as an unsafe parameter.  Therefore  by doing null checks before processing we can help to ensure that our code will run properly.  To expand on an example that utilizes an object with methods we can look here:</source>
          <target state="translated">Lo anterior nos impide usar &lt;code&gt;firstName&lt;/code&gt; como un par&amp;aacute;metro inseguro. Por lo tanto, al hacer comprobaciones nulas antes del procesamiento, podemos ayudar a garantizar que nuestro c&amp;oacute;digo se ejecute correctamente. Para ampliar un ejemplo que utiliza un objeto con m&amp;eacute;todos, podemos mirar aqu&amp;iacute;:</target>
        </trans-unit>
        <trans-unit id="7453ef913bb69c16a9f8a1f7b1324fb28f009efa" translate="yes" xml:space="preserve">
          <source>The most recent method call made will be the &lt;em&gt;top&lt;/em&gt; of the stack, which is the top line (excluding the message text). Going down the stack goes back in time. The second line is the method that calls the first line, etc.</source>
          <target state="translated">La llamada al m&amp;eacute;todo m&amp;aacute;s reciente realizada ser&amp;aacute; la &lt;em&gt;parte superior&lt;/em&gt; de la pila, que es la l&amp;iacute;nea superior (excluyendo el texto del mensaje). Bajar por la pila retrocede en el tiempo. La segunda l&amp;iacute;nea es el m&amp;eacute;todo que llama a la primera l&amp;iacute;nea, etc.</target>
        </trans-unit>
        <trans-unit id="11fbf33c63bd03732692540005c072cdd3ed1096" translate="yes" xml:space="preserve">
          <source>The other posts describe what a stack trace is, but it can still be hard to work with.</source>
          <target state="translated">Los otros postes describen lo que es un rastro de pila,pero aún así puede ser difícil de trabajar.</target>
        </trans-unit>
        <trans-unit id="c3ddf11fc25689b080b12527baea39641ae0db87" translate="yes" xml:space="preserve">
          <source>Then in the &lt;em&gt;Java&lt;/em&gt; perspective, click on the &lt;em&gt;Console&lt;/em&gt; tab (usually at the bottom). If the Console view is not visible, go to the menu option &lt;em&gt;Window -&amp;gt; Show View&lt;/em&gt; and select &lt;em&gt;Console&lt;/em&gt;.</source>
          <target state="translated">Luego, en la perspectiva de &lt;em&gt;Java&lt;/em&gt; , haga clic en la pesta&amp;ntilde;a &lt;em&gt;Consola&lt;/em&gt; (generalmente en la parte inferior). Si la vista de la consola no est&amp;aacute; visible, vaya a la opci&amp;oacute;n de men&amp;uacute; &lt;em&gt;Ventana -&amp;gt; Mostrar vista&lt;/em&gt; y seleccione &lt;em&gt;Consola&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="575a7a948c6a156a106d55a90241bd4749fad5ca" translate="yes" xml:space="preserve">
          <source>Then in the console window, click on the following button (on the right)</source>
          <target state="translated">Luego,en la ventana de la consola,haga clic en el siguiente botón (a la derecha)</target>
        </trans-unit>
        <trans-unit id="7b113dc376f62ec3b062c6c5782a7c23ce7ed13e" translate="yes" xml:space="preserve">
          <source>There is one more stacktrace feature offered by Throwable family - the possibility to &lt;strong&gt;manipulate&lt;/strong&gt; stack trace information.</source>
          <target state="translated">La familia Throwable ofrece una caracter&amp;iacute;stica m&amp;aacute;s de stacktrace: la posibilidad de &lt;strong&gt;manipular la&lt;/strong&gt; informaci&amp;oacute;n de seguimiento de stack.</target>
        </trans-unit>
        <trans-unit id="0839a810ec4da88cdf6083cb5086fe5cee3ee685" translate="yes" xml:space="preserve">
          <source>This is a very simple stack trace. If we start at the beginning of the list of &quot;at ...&quot;, we can tell where our error happened. What we're looking for is the &lt;strong&gt;topmost&lt;/strong&gt; method call that is part of our application. In this case, it's:</source>
          <target state="translated">Este es un seguimiento de pila muy simple. Si comenzamos al principio de la lista de &quot;en ...&quot;, podemos saber d&amp;oacute;nde ocurri&amp;oacute; nuestro error. Lo que estamos buscando es la llamada al m&amp;eacute;todo &lt;strong&gt;m&amp;aacute;s importante&lt;/strong&gt; que es parte de nuestra aplicaci&amp;oacute;n. En este caso, es:</target>
        </trans-unit>
        <trans-unit id="5f628c41d41907e9337eb90dc7ec480a43bef487" translate="yes" xml:space="preserve">
          <source>This is what you might see (image from the Eclipse documentation):</source>
          <target state="translated">Esto es lo que podrías ver (imagen de la documentación de Eclipse):</target>
        </trans-unit>
        <trans-unit id="78507f11dd782b6c1af51bf682954e32ebc76066" translate="yes" xml:space="preserve">
          <source>This might give you a stack trace that looks like:</source>
          <target state="translated">Esto podría darte un rastro de pila que se parece:</target>
        </trans-unit>
        <trans-unit id="4ec60d92e12153a63d117ff1ab794bc3e4143c4b" translate="yes" xml:space="preserve">
          <source>This way, the offending line is not executed if &lt;code&gt;a==null&lt;/code&gt;. Same goes for the other examples.</source>
          <target state="translated">De esta manera, la l&amp;iacute;nea ofensiva no se ejecuta si &lt;code&gt;a==null&lt;/code&gt; . Lo mismo ocurre con los otros ejemplos.</target>
        </trans-unit>
        <trans-unit id="86a413041e25913218b0abb28f5e2dc38fc95d9c" translate="yes" xml:space="preserve">
          <source>This would indicate that something (probably &lt;code&gt;title&lt;/code&gt;) is &lt;code&gt;null&lt;/code&gt; in the above code.</source>
          <target state="translated">Esto indicar&amp;iacute;a que algo (probablemente el &lt;code&gt;title&lt;/code&gt; ) es &lt;code&gt;null&lt;/code&gt; en el c&amp;oacute;digo anterior.</target>
        </trans-unit>
        <trans-unit id="b633c5cf2b51a5bd3a70b5d319f1c2ac9b9edcfd" translate="yes" xml:space="preserve">
          <source>To add on to what Rob has mentioned.  Setting break points in your application allows for the step-by-step processing of the stack.  This enables the developer to use the debugger to see at what exact point the method is doing something that was unanticipated.</source>
          <target state="translated">Para añadir a lo que Rob ha mencionado.Establecer puntos de ruptura en su aplicación permite el procesamiento paso a paso de la pila.Esto permite al desarrollador utilizar el depurador para ver en qué punto exacto el método está haciendo algo que no estaba previsto.</target>
        </trans-unit>
        <trans-unit id="0f129ed2e3eafd696b404b089bdae450998145a1" translate="yes" xml:space="preserve">
          <source>To debug this, we can open up &lt;code&gt;Book.java&lt;/code&gt; and look at line &lt;code&gt;16&lt;/code&gt;, which is:</source>
          <target state="translated">Para depurar esto, podemos abrir &lt;code&gt;Book.java&lt;/code&gt; y mirar la l&amp;iacute;nea &lt;code&gt;16&lt;/code&gt; , que es:</target>
        </trans-unit>
        <trans-unit id="52b747244a3584dd256e5f32c7d956aa076a29e9" translate="yes" xml:space="preserve">
          <source>Usually stack traces are much more complex than the two examples above. Here's an example (it's a long one, but demonstrates several levels of chained exceptions):</source>
          <target state="translated">Por lo general,los rastros apilados son mucho más complejos que los dos ejemplos anteriores.He aquí un ejemplo (es largo,pero demuestra varios niveles de excepciones encadenadas):</target>
        </trans-unit>
        <trans-unit id="af1112769853e924619a8bd8e2ffe91ac135d2d0" translate="yes" xml:space="preserve">
          <source>What is a stack trace, and how can I use it to debug my application errors</source>
          <target state="translated">¿Qué es un rastro de pila,y cómo puedo usarlo para depurar mis errores de aplicación</target>
        </trans-unit>
        <trans-unit id="2b95441b3fc2100f60bfef05621335153b0f9dc6" translate="yes" xml:space="preserve">
          <source>What this code is trying to do is to catch the &lt;code&gt;ArithmeticException&lt;/code&gt; caused by a possible division by 0. But it also catches a possible &lt;code&gt;NullPointerException&lt;/code&gt; that is thrown if &lt;code&gt;a&lt;/code&gt; or &lt;code&gt;b&lt;/code&gt; are &lt;code&gt;null&lt;/code&gt;. This means, you might get a &lt;code&gt;NullPointerException&lt;/code&gt; but you'll treat it as an ArithmeticException and probably do the wrong thing. In the best case you still miss that there was a NullPointerException. Stuff like that makes debugging much harder, so don't do that.</source>
          <target state="translated">Lo que este c&amp;oacute;digo intenta hacer es detectar la &lt;code&gt;ArithmeticException&lt;/code&gt; causada por una posible divisi&amp;oacute;n por 0. Pero tambi&amp;eacute;n detecta una posible &lt;code&gt;NullPointerException&lt;/code&gt; que se genera si &lt;code&gt;a&lt;/code&gt; o &lt;code&gt;b&lt;/code&gt; son &lt;code&gt;null&lt;/code&gt; . Esto significa que puede obtener una &lt;code&gt;NullPointerException&lt;/code&gt; pero la tratar&amp;aacute; como una ArithmeticException y probablemente har&amp;aacute; algo incorrecto. En el mejor de los casos, a&amp;uacute;n extra&amp;ntilde;a que haya una NullPointerException. Cosas as&amp;iacute; hacen que la depuraci&amp;oacute;n sea mucho m&amp;aacute;s dif&amp;iacute;cil, as&amp;iacute; que no hagas eso.</target>
        </trans-unit>
        <trans-unit id="8693b761def5d0171d4bb9ab2c4d0391af84116a" translate="yes" xml:space="preserve">
          <source>What's different about this one is the &quot;Caused by&quot;. Sometimes exceptions will have multiple &quot;Caused by&quot; sections. For these, you typically want to find the &quot;root cause&quot;, which will be one of the lowest &quot;Caused by&quot; sections in the stack trace. In our case, it's:</source>
          <target state="translated">Lo que es diferente en este es el &quot;Causado por&quot;.A veces las excepciones tendrán múltiples secciones de &quot;Causado por&quot;.Para éstas,normalmente se quiere encontrar la &quot;causa raíz&quot;,que será una de las secciones &quot;Causadas por&quot; más bajas en el rastro de la pila.En nuestro caso,es:</target>
        </trans-unit>
        <trans-unit id="a7a6bd69868c0f78cdebeb816648bd67743a6f14" translate="yes" xml:space="preserve">
          <source>Will result in this stack trace:</source>
          <target state="translated">Resultará en este rastro de pila:</target>
        </trans-unit>
        <trans-unit id="4b7552fe1f875853c01a7103f490b266ec4b133d" translate="yes" xml:space="preserve">
          <source>With the example given in the question, we can determine exactly where the exception was thrown in the application. Let's have a look at the stack trace:</source>
          <target state="translated">Con el ejemplo que se da en la pregunta,podemos determinar exactamente dónde se lanzó la excepción en la aplicación.Echemos un vistazo al rastro de la pila:</target>
        </trans-unit>
        <trans-unit id="173e07b2c48da36a70ece276f153fcc804be2dc1" translate="yes" xml:space="preserve">
          <source>and then select &lt;strong&gt;Java Stack Trace Console&lt;/strong&gt; from the drop-down list.</source>
          <target state="translated">y luego seleccione &lt;strong&gt;Java Stack Trace Console&lt;/strong&gt; de la lista desplegable.</target>
        </trans-unit>
        <trans-unit id="182d561f07be6784421367d9d0c622c6249e6740" translate="yes" xml:space="preserve">
          <source>if we have a method that takes parameters such as:  &lt;code&gt;void (String firstName)&lt;/code&gt;</source>
          <target state="translated">si tenemos un m&amp;eacute;todo que toma par&amp;aacute;metros como: &lt;code&gt;void (String firstName)&lt;/code&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
