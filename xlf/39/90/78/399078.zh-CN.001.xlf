<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/399078">
    <body>
      <group id="399078">
        <trans-unit id="7d67bb6716e56cca3eca8a9065af38ddcf97e9f6" translate="yes" xml:space="preserve">
          <source>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Anywhere: &lt;code&gt;. ^ $ * + - ? ( ) [ ] { } \ |&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;任何地方：&lt;/font&gt;&lt;/font&gt; &lt;code&gt;. ^ $ * + - ? ( ) [ ] { } \ |&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2a8c55057c2c0495b9bccfbec7b17e45412ea5d8" translate="yes" xml:space="preserve">
          <source>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;For literals, don't escape: &lt;code&gt;+ ? ( ) { } |&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;对于文字，请不要转义：&lt;/font&gt;&lt;/font&gt; &lt;code&gt;+ ? ( ) { } |&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a97d47555ec0720c1f70236663cc597967c70a60" translate="yes" xml:space="preserve">
          <source>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;For standard regex behavior, escape: &lt;code&gt;\+ \? \( \) \{ \} \|&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;对于标准的正则表达式行为，请转义：&lt;/font&gt;&lt;/font&gt; &lt;code&gt;\+ \? \( \) \{ \} \|&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f12e6d0791605981ba059a406b6691a5f9790e5e" translate="yes" xml:space="preserve">
          <source>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Inside a character class: &lt;code&gt;^ - [ ]&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在字符类中：&lt;/font&gt;&lt;/font&gt; &lt;code&gt;^ - [ ]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="918002f5c663d22dba42a630d4b732416c76c2b3" translate="yes" xml:space="preserve">
          <source>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Outside a character class: &lt;code&gt;. ^ $ * + ? ( ) [ { } \ |&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;字符类外：&lt;/font&gt;&lt;/font&gt; &lt;code&gt;. ^ $ * + ? ( ) [ { } \ |&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="91540850fdd2484dc131620648016ffd98c1f7b1" translate="yes" xml:space="preserve">
          <source>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Outside a character class: &lt;code&gt;. ^ $ * [ \&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;字符类外：&lt;/font&gt;&lt;/font&gt; &lt;code&gt;. ^ $ * [ \&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f2da9c9d2e4568a1a403995617dc37f29af2dbfd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://perldoc.perl.org/perlre.html#Quoting-metacharacters&quot;&gt;https://perldoc.perl.org/perlre.html#Quoting-metacharacters&lt;/a&gt; and &lt;a href=&quot;https://perldoc.perl.org/functions/quotemeta.html&quot;&gt;https://perldoc.perl.org/functions/quotemeta.html&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://perldoc.perl.org/perlre.html#Quoting-metacharacters&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https://perldoc.perl.org/perlre.html#Quoting-metacharacters&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;和&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://perldoc.perl.org/functions/quotemeta.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https://perldoc.perl.org/functions/quotemeta.html&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2c393bf2f34a2d6c181e8a2227df5d4efeef0d62" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;BRE/ed/grep/sed&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;BRE/ed/grep/sed&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f59e21f8afbeffd98079028ce6aeaf7d6a78fa84" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ERE/awk/egrep/emacs&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ERE/awk/egrep/emacs&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e676b1e710b18dc41e56c23b6c72c2cc9e9870df" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Edit:&lt;/strong&gt; After the comment below, just thought I'd mention the fact that you also have to consider the difference between finite state automata and non-finite state automata when looking at the behaviour of regexp evaluation.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;编辑：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在下面的评论之后，我以为我提到了一个事实，即在查看正则表达式评估的行为时，还必须考虑有限状态自动机和非有限状态自动机之间的区别。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="45c05493036228b57a91a503e22683c5ed128082" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;Includes C, C++, Delphi, EditPad, Java, JavaScript, Perl, PHP (preg), PostgreSQL, PowerGREP, PowerShell, Python, REALbasic, Real Studio, Ruby, TCL, VB.Net, VBScript, wxWidgets, XML Schema, Xojo, XRegExp.&lt;br/&gt;PCRE compatibility may vary&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;包括C，C ++，Delphi，EditPad，Java，JavaScript，Perl，PHP（preg），PostgreSQL，PowerGREP，PowerShell，Python，REALbasic，Real Studio，Ruby，TCL，VB.Net，VBScript，wxWidgets，XML Schema，Xojo， XRegExp。&lt;/font&gt;&lt;/font&gt;&lt;br/&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;PCRE兼容性可能会有所不同&lt;/font&gt;&lt;/font&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="7267e98c4a2f05739245cf705a86774ca73aa3eb" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;Includes awk, ed, egrep, emacs, GNUlib, grep, PHP (ereg), MySQL, Oracle, R, sed.&lt;br/&gt;PCRE support may be enabled in later versions or by using extensions&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;包括awk，ed，egrep，emacs，GNUlib，grep，PHP（ereg），MySQL，Oracle，R，sed。&lt;/font&gt;&lt;/font&gt;&lt;br/&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;可以在更高版本中或通过使用扩展启用PCRE支持&lt;/font&gt;&lt;/font&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="53935ccb1d1bcc34d9efdfc75f0d546800f41839" translate="yes" xml:space="preserve">
          <source>Ah the joys of studying at UNSW in the late '70's! (-:</source>
          <target state="translated">70年代末在新南威尔士大学学习的乐趣啊! (-:</target>
        </trans-unit>
        <trans-unit id="483f30ef22803526f1679fc7151333a7355f53c7" translate="yes" xml:space="preserve">
          <source>Alphanumeric characters cannot be escaped with a backslash</source>
          <target state="translated">字母数字字符不能用反斜线转义。</target>
        </trans-unit>
        <trans-unit id="f7ebf500ba421b0bf9df4deedc3b6483601a07fa" translate="yes" xml:space="preserve">
          <source>Anyway, regexp's are so clunky compared to &lt;a href=&quot;http://en.wikipedia.org/wiki/SNOBOL&quot;&gt;SNOBOL&lt;/a&gt;!  Now &lt;strong&gt;that&lt;/strong&gt; was an interesting programming course! Along with the one on &lt;a href=&quot;http://en.wikipedia.org/wiki/Simula_67&quot;&gt;Simula&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;无论如何，与&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/SNOBOL&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;SNOBOL&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;相比，regexp是如此笨拙&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;！&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;现在&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，这&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是一个有趣的编程课程！&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;与&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Simula_67&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Simula&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;上的一个一起&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="58c85a0276f22c46ce13b2389bc79add52b37f1c" translate="yes" xml:space="preserve">
          <source>Arbitrary symbols can be escaped with a backslash in PCRE, but not BRE/ERE (they must only be escaped when required). For PCRE &lt;code&gt;] -&lt;/code&gt; only need escaping within a character class, but I kept them in a single list for simplicity</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;可以在PCRE中使用反斜杠对任意符号进行转义，但不能对BRE / ERE进行反斜杠（必须在需要时才对它们进行转义）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对于PCRE &lt;/font&gt;&lt;/font&gt; &lt;code&gt;] -&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;仅需在字符类中转义，但为简单起见，我将其保留在单个列表中&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1a704c051e3f6fec7c0f0d461f093c5717764bc8" translate="yes" xml:space="preserve">
          <source>Aside from escapes, different regex implementations may support different modifiers, character classes, anchors, quantifiers, and other features. For more details, check out &lt;a href=&quot;http://www.regular-expressions.info&quot;&gt;regular-expressions.info&lt;/a&gt;, or use &lt;a href=&quot;https://regex101.com/&quot;&gt;regex101.com&lt;/a&gt; to test your expressions live</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;除了转义之外，不同的正则表达式实现可能支持不同的修饰符，字符类，锚点，量词和其他功能。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;有关详细信息，请&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.regular-expressions.info&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;regular-expressions.info&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，或使用&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://regex101.com/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;regex101.com&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;来测试你的表情生活&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d89ca9e85b093f0601f26d305e30b91ef0aee25b" translate="yes" xml:space="preserve">
          <source>BTW Character classes are pretty vanilla regexp components so they tend to work in most situations where you need escaped characters in regexps.</source>
          <target state="translated">BTW 角色类是相当虚幻的regexp组件,所以在大多数需要转义角色的情况下,它们往往可以在regexps中使用。</target>
        </trans-unit>
        <trans-unit id="13174a9bc7f1c0d22d348a38e636143a4c31cda4" translate="yes" xml:space="preserve">
          <source>Be aware how the string in memory is processed: if can be a plain string inside the code, or a string entered to the command line, but a could be either an interactive command line or a command line stated inside a shell script file, or inside a variable in memory mentioned by the code, or an (string)argument through further evaluation, or a string containing code generated dynamically with any sort of encapsulation...</source>
          <target state="translated">要注意内存中的字符串是如何处理的:if可以是代码内部的一个普通字符串,也可以是输入到命令行的字符串,但a可以是交互式的命令行,也可以是shell脚本文件内部的命令行,或者是代码提到的内存中的一个变量,或者是通过进一步的评估的(字符串)参数,或者是包含了动态生成的代码的字符串,用任何一种封装方式来封装....</target>
        </trans-unit>
        <trans-unit id="dd01e7e261a6b1fe70b847c4b38dda03985adf94" translate="yes" xml:space="preserve">
          <source>Check out Jeff Friedl's &lt;a href=&quot;http://regex.info/&quot;&gt;Mastering Regular Expressions&lt;/a&gt; book.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;查阅Jeff Friedl的《&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://regex.info/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;精通正则表达式》&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一书。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8361115b121b188d914f90203e49011346e5c7e6" translate="yes" xml:space="preserve">
          <source>E.g. A regexp in the command line starting with &lt;code&gt;perl -npe&lt;/code&gt;, needs to be transferred to a set of &lt;em&gt;exec&lt;/em&gt; system calls connecting as pipe the file handles, each of this exec system calls just has a list of arguments that were separated by (non escaped)spaces, and possibly pipes(|) and redirection (&amp;gt; N&amp;gt; N&amp;gt;&amp;amp;M), parenthesis, interactive expansion of &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;?&lt;/code&gt;, &lt;code&gt;$(())&lt;/code&gt; ... (all this are special characters used by the *sh which might appear to interfere with the character of the regular expression in the next context, but they are evaluated in order: before the command line. The command line is read by a program as bash/sh/csh/tcsh/zsh, essentially inside double quote or single quote the escape is simpler but it is not necessary to quote a string in the command line because mostly the space has to be prefixed with backslash and the quote are not necessary leaving available the expand functionality for characters * and ?, but this parse as different context as within quote. Then when the command line is evaluated the regexp obtained in memory (not as written in the command line) receives the same treatment as it would be in a source file.
For regexp there is character-set context within square brackets [ ], perl regular expression can be quoted by a large set of non alfa-numeric characters (E.g. m// or m:/better/for/path: ...).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;例如，以&lt;/font&gt;&lt;/font&gt; &lt;code&gt;perl -npe&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;开头的命令行中的正则表达式&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;需要转移到一组&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;exec&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;系统调用，它们以文件句柄的管道方式连接，每个exec系统调用仅包含由（不转义）分隔的参数列表。 ）空间，可能还有管道（|）和重定向（&amp;gt; N&amp;gt; N&amp;gt;＆M），括号，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;*&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;和&lt;/font&gt;&lt;/font&gt; &lt;code&gt;?&lt;/code&gt; 的&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;交互式展开&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;$(())&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;...（所有这些都是* sh使用的特殊字符，在下一个上下文中可能看起来会干扰正则表达式的字符，但它们的评估顺序为：在命令行之前。命令行由a读取。作为bash / sh / csh / tcsh / zsh的程序，本质上在双引号或单引号内进行转义比较简单，但不必在命令行中用引号引起来，因为大多数空格必须以反斜杠作为前缀，并且引号是不必保留字符*和？的扩展功能，但是可以将其解析为与引号内不同的上下文，然后在评估命令行时，在内存中获得的regexp（与在命令行中写入的方式不同）将受到与它相同的处理将在源文件中。对于regexp，方括号[]中包含字符集上下文，perl正则表达式可以用大量非字母数字字符（例如m //或m：/ better / for / path：...）引用。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="adcff3eaaa4ead07debf3d94dc837f7ed21cec06" translate="yes" xml:space="preserve">
          <source>Each of this context assigned some characters with special functionality.</source>
          <target state="translated">在这个语境中,每个人都分配了一些具有特殊功能的字符。</target>
        </trans-unit>
        <trans-unit id="f08f9b14d233c90e12f3bfe6ffd77d280540b8a2" translate="yes" xml:space="preserve">
          <source>Escaping any other characters is an error with POSIX ERE.</source>
          <target state="translated">任何其他字符的转义都是POSIX ERE的错误。</target>
        </trans-unit>
        <trans-unit id="d175c420ed0e4eac7898cadf08c6b147e48609e3" translate="yes" xml:space="preserve">
          <source>Escaping parentheses and curly brackets in BREs gives them the special meaning their unescaped versions have in EREs.  Some implementations (e.g. GNU) also give special meaning to other characters when escaped, such as \? and +.  Escaping a character other than .^$*(){} is normally an error with BREs.</source>
          <target state="translated">在 BREs 中,转义括号和大括号赋予了它们在 EREs 中的特殊含义。一些实现(例如 GNU)在转义时也会赋予其他字符以特殊的含义,例如:\? 和 +。除了.^$**(){}之外,转义字符通常是BREs中的一个错误。</target>
        </trans-unit>
        <trans-unit id="f87278cc2c06764d8e04de06f830e733e448a3fd" translate="yes" xml:space="preserve">
          <source>Except if it's a &quot; or '.  :/</source>
          <target state="translated">除非它是 &quot;或'。</target>
        </trans-unit>
        <trans-unit id="407083df41efb846753191551f28dbb6de294319" translate="yes" xml:space="preserve">
          <source>For Ionic (Typescript) you have to double slash in order to scape the characters.
For example (this is to match some special characters):</source>
          <target state="translated">对于Ionic (Typescript),你必须用双斜线来进行字符扫描。例如(这是为了匹配一些特殊字符)。</target>
        </trans-unit>
        <trans-unit id="54f275ed7771dcb69cbc20ef9c202565ae878bcf" translate="yes" xml:space="preserve">
          <source>For PCRE, and most other so-called Perl-compatible flavors, escape these outside character classes:</source>
          <target state="translated">对于PCRE,以及大多数其他所谓的Perl兼容的口味,逃过这些外部的字符类。</target>
        </trans-unit>
        <trans-unit id="54c4e41693531e3ab7c7a314ea4e2eaa6d1cf7e1" translate="yes" xml:space="preserve">
          <source>For PHP, &quot;it is always safe to precede a non-alphanumeric with &quot;\&quot; to specify that it stands for itself.&quot; - &lt;a href=&quot;http://php.net/manual/en/regexp.reference.escape.php&quot;&gt;http://php.net/manual/en/regexp.reference.escape.php&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对于PHP，&amp;ldquo;在非字母数字前加&amp;ldquo; \&amp;rdquo;来指定它代表自身总是安全的。&amp;rdquo; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;- &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://php.net/manual/en/regexp.reference.escape.php&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http://php.net/manual/en/regexp.reference.escape.php&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9380e5c8736cd4f19e0b9dd344946b2244877c31" translate="yes" xml:space="preserve">
          <source>For POSIX extended regexes (ERE), escape these outside character classes (same as PCRE):</source>
          <target state="translated">对于POSIX扩展的扩展序列符(ERE),转义这些外部字符类(与PCRE相同)。</target>
        </trans-unit>
        <trans-unit id="c2b64b544c190d00d427d2155b94a792b1b9db30" translate="yes" xml:space="preserve">
          <source>However, keeping a page like the &lt;a href=&quot;http://www.regular-expressions.info/tools.html&quot;&gt;Regular Expression Tools Page&lt;/a&gt; or this &lt;a href=&quot;http://www.addedbytes.com/cheat-sheets/regular-expressions-cheat-sheet/&quot;&gt;Regular Expression Cheatsheet&lt;/a&gt; can go a long way to help you quickly filter things out.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;但是，保留&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.regular-expressions.info/tools.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;正则表达式工具页面&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;或此&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.addedbytes.com/cheat-sheets/regular-expressions-cheat-sheet/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;正则表达式备忘单之类的页面&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;可以&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;大大&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;帮助您快速过滤掉内容。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a849b55daf78cf386fa658998ec37854ddff4799" translate="yes" xml:space="preserve">
          <source>I am tired of always trying to guess, if I should escape special characters like '&lt;code&gt;()[]{}|&lt;/code&gt;' etc. when using many implementations of regexps.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我厌倦了总是想猜测，是否应该转义' &lt;/font&gt;&lt;/font&gt; &lt;code&gt;()[]{}|&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;等特殊字符 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;等使用许多正则表达式的实现。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e7ca436bca697c7810913b29993feabb023b8083" translate="yes" xml:space="preserve">
          <source>I tend to just use a simple character class definition instead, so the above expression becomes</source>
          <target state="translated">我倾向于用一个简单的字符类定义来代替,所以上面的表达式就变成了</target>
        </trans-unit>
        <trans-unit id="54394c6bb51712440f21ae57bbe2313f22ce140e" translate="yes" xml:space="preserve">
          <source>If all this makes your head spin, grab a copy of &lt;a href=&quot;http://www.regexbuddy.com&quot;&gt;RegexBuddy&lt;/a&gt;.  On the Create tab, click Insert Token, and then Literal.  RegexBuddy will add escapes as needed.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果所有这些使您的头部旋转，请抓住&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.regexbuddy.com&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;RegexBuddy&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的副本&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在&amp;ldquo;创建&amp;rdquo;选项卡上，单击&amp;ldquo;插入令牌&amp;rdquo;，然后单击&amp;ldquo;文字&amp;rdquo;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;RegexBuddy将根据需要添加转义符。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e77fe7b95e12760b0659f5fe78377351558ca7ab" translate="yes" xml:space="preserve">
          <source>If unsure about a specific character, it can be escaped like &lt;code&gt;\xFF&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果不确定特定字符，可以像&lt;/font&gt; &lt;code&gt;\xFF&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;一样转义&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="06293a23dfd9a2808f8f5af94622a77f9985f0f4" translate="yes" xml:space="preserve">
          <source>In POSIX basic regular expressions (BRE), these are metacharacters that you need to escape to suppress their meaning:</source>
          <target state="translated">在POSIX基本正则表达式(BRE)中,这些都是需要转义的元字符,你需要转义来压制它们的意义。</target>
        </trans-unit>
        <trans-unit id="11f83cfdeb5fd5da7a22a95360d91b3ad72833f6" translate="yes" xml:space="preserve">
          <source>In the official documentation, such characters are called metacharacters. Example of quoting:</source>
          <target state="translated">在官方文档中,这种字符被称为元字符。引用的例子。</target>
        </trans-unit>
        <trans-unit id="ab1a58228582b4b117b80856b4c70bcaadadd844" translate="yes" xml:space="preserve">
          <source>Inside character classes, BREs follow the same rule as EREs.</source>
          <target state="translated">在字符类内部,BREs遵循与REs相同的规则。</target>
        </trans-unit>
        <trans-unit id="e2b30b848c1b94f3704299738525753a115907c3" translate="yes" xml:space="preserve">
          <source>Inside character classes, the backslash is a literal character in POSIX regular expressions.  You cannot use it to escape anything.  You have to use &quot;clever placement&quot; if you want to include character class metacharacters as literals.  Put the ^ anywhere except at the start, the ] at the start, and the - at the start or the end of the character class to match these literally, e.g.:</source>
          <target state="translated">在字符类内部,反斜杠是POSIX正则表达式中的一个字面字符。你不能用它来转义任何东西。如果你想把字符类中的元字符作为字面符号,你必须使用 &quot;巧妙的放置&quot;。除了开头的^,把^放在任何地方,把]放在开头,把-放在字符类的开头或结尾,以匹配这些字面意义上的字符,例如::</target>
        </trans-unit>
        <trans-unit id="894aa802f4d8b50284470b8d7af8d180642a0cbc" translate="yes" xml:space="preserve">
          <source>It is different with, for example, Python, sed, grep, awk, Perl, rename, Apache, find and so on.
Is there any rule set which tells when I should, and when I should not, escape special characters? Does it depend on the regexp type, like PCRE, POSIX or extended regexps?</source>
          <target state="translated">这与Python、sed、grep、awk、Perl、rename、Apache、find等不同。有什么规则可以告诉我什么时候应该转义,什么时候不应该转义?这是否取决于regexp类型,比如PCRE、POSIX或扩展的regexps?</target>
        </trans-unit>
        <trans-unit id="f92cf4d271e5e508b9d65066ab31d73c4b3a60db" translate="yes" xml:space="preserve">
          <source>Legacy RegEx Flavors (BRE/ERE)</source>
          <target state="translated">Legacy RegEx风味(BREERE)</target>
        </trans-unit>
        <trans-unit id="87ba021fd029962b2cfc3314e679c5178f8e8f91" translate="yes" xml:space="preserve">
          <source>Modern RegEx Flavors (PCRE)</source>
          <target state="translated">Modern RegEx Flavors (PCRE)</target>
        </trans-unit>
        <trans-unit id="8dbd969ee97bd9bfab2f6fa3ae907ed08d524cab" translate="yes" xml:space="preserve">
          <source>Not all the world's a PCRE!</source>
          <target state="translated">不是全世界都是PCRE!</target>
        </trans-unit>
        <trans-unit id="70440046a3dc2e079f23ee1c57dfa76669b732aa" translate="yes" xml:space="preserve">
          <source>Notes</source>
          <target state="translated">Notes</target>
        </trans-unit>
        <trans-unit id="58712ad0108374c3dbf6f92a6b72b766dd6aebab" translate="yes" xml:space="preserve">
          <source>POSIX recognizes multiple variations on regular expressions - basic regular expressions (BRE) and extended regular expressions (ERE).  And even then, there are quirks because of the historical implementations of the utilities standardized by POSIX.</source>
          <target state="translated">POSIX识别正则表达式的多种变体--基本正则表达式(BRE)和扩展正则表达式(ERE)。即使如此,由于POSIX标准化的实用程序的历史实现,也有一些怪癖。</target>
        </trans-unit>
        <trans-unit id="42499e430e3ad3149c99af96ca10e885aaf46de4" translate="yes" xml:space="preserve">
          <source>Pay attention to this &lt;code&gt;] [ - _ . /&lt;/code&gt; characters. They have to be double slashed. If you don't do that, you are going to have a type error in your code.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;请注意此&lt;/font&gt;&lt;/font&gt; &lt;code&gt;] [ - _ . /&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;字符。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;他们必须被大大削减。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果不这样做，您的代码中将出现类型错误。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="061d7c539b5b77283f5797bd9cad026318098133" translate="yes" xml:space="preserve">
          <source>Quoted expression strings must also have the surrounding quote characters escaped, and often with backslashes doubled-up (like &lt;code&gt;&quot;(\&quot;)(/)(\\.)&quot;&lt;/code&gt; versus &lt;code&gt;/(&quot;)(\/)(\.)/&lt;/code&gt; in JavaScript)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;引述表达串还必须具有周边引号字符转义，并经常与反斜杠加倍向上（如&lt;/font&gt;&lt;/font&gt; &lt;code&gt;&quot;(\&quot;)(/)(\\.)&quot;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;与&lt;/font&gt;&lt;/font&gt; &lt;code&gt;/(&quot;)(\/)(\.)/&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在JavaScript）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6c4898925ca3b5988085856c93d5eb8db2bb8ad5" translate="yes" xml:space="preserve">
          <source>Really, there isn't.  there are about a half-zillion different regex syntaxes; they seem to come down to Perl, EMACS/GNU, and AT&amp;amp;T in general, but I'm always getting surprised too.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;真的没有。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;大约有一半的正则表达式语法；&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;他们似乎可以归结为Perl，EMACS / GNU和AT＆T，但我也总是感到惊讶。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7bfebe3640cdb3426c48e83c532cc87ad6d71ffa" translate="yes" xml:space="preserve">
          <source>So you really have to know what style you are trying to quote.</source>
          <target state="translated">所以,你真的要知道你想引用什么风格。</target>
        </trans-unit>
        <trans-unit id="39b6f38bf2b3ef957f165d6856f072c9d6cb4abb" translate="yes" xml:space="preserve">
          <source>Sometimes simple escaping is not possible with the characters you've listed. For example, using a backslash to escape a bracket isn't going to work in the left hand side of a substitution string in sed, namely</source>
          <target state="translated">有时简单的转义是无法使用你所列出的字符的。例如,使用反斜线来转义括号就不能在sed中的替换字符串的左侧,即</target>
        </trans-unit>
        <trans-unit id="3ffbf9108e1fb9f4f739a7c110dd8d9f4aaaeb20" translate="yes" xml:space="preserve">
          <source>There isn't a simple rule for when to use which notation, or even which notation a given command uses.</source>
          <target state="translated">对于何时使用哪种符号,甚至给定的命令使用哪种符号,并没有一个简单的规则。</target>
        </trans-unit>
        <trans-unit id="1eae24d3735cf6382bb598acd327833adead48fa" translate="yes" xml:space="preserve">
          <source>To escape regex pattern variables (or partial variables) in PHP use preg_quote()</source>
          <target state="translated">要在PHP中转义regex模式变量(或部分变量),请使用preg_quote()</target>
        </trans-unit>
        <trans-unit id="547d9c5fe8cf140947c895b536944d926d9e0565" translate="yes" xml:space="preserve">
          <source>To know when and what to escape without attempts is necessary to understand precisely the chain of contexts the string pass through. You will specify the string from the farthest side to its final destination which is the memory handled by the regexp parsing code.</source>
          <target state="translated">要知道什么时候和什么时候可以不尝试转义,就必须准确地理解字符串所经过的上下文链。你将指定从最远端到最终目的地的字符串,也就是regexp解析代码所处理的内存。</target>
        </trans-unit>
        <trans-unit id="495c0df080d56ef66956bee36ba63ba18fb51ee5" translate="yes" xml:space="preserve">
          <source>Unfortunately there really isn't a set set of escape codes since it varies based on the language you are using.</source>
          <target state="translated">遗憾的是,没有一整套的转义码,因为它根据你使用的语言不同而不同。</target>
        </trans-unit>
        <trans-unit id="e0c90f58ad09d2083cef1d05099012604eb5e2e4" translate="yes" xml:space="preserve">
          <source>Unfortunately, the meaning of things like ( and \( are swapped between Emacs style regular expressions and most other styles.  So if you try to escape these you may be doing the opposite of what you want.</source>
          <target state="translated">不幸的是,像(和((和 Ⅳ)这样的东西的含义在Emacs 风格的正则表达式和大多数其他风格的正则表达式之间是互换的。因此,如果你试图逃避这些东西,你可能会事与愿违。</target>
        </trans-unit>
        <trans-unit id="202929eaf3ff70c56f13ef4bebb902c161a24535" translate="yes" xml:space="preserve">
          <source>What special characters must be escaped in regular expressions</source>
          <target state="translated">正则表达式中必须转义哪些特殊字符</target>
        </trans-unit>
        <trans-unit id="42311309ff2118567ad88fb48a34fbf0d59ff5ce" translate="yes" xml:space="preserve">
          <source>When you want to pass the character literally without using its special function (local to the context), than that's the case you have to escape it, for the next context... which might need some other escape characters which might additionally need to be escaped in the preceding context(s).
Furthermore there can be things like character encoding (the most insidious is utf-8 because it look like ASCII for common characters, but might be optionally interpreted even by the terminal depending on its settings so it might behave differently, then the encoding attribute of HTML/XML, it's necessary to understand the process precisely right.</source>
          <target state="translated">当你想在不使用它的特殊函数(本地上下文)的情况下,你必须对它进行转义,以便在下一个上下文中..........这可能需要一些其他的转义字符,而这些字符可能还需要在前面的上下文中进行转义。此外,还有一些东西可能是像字符编码(最隐蔽的是utf-8,因为它看起来像ASCII的普通字符,但可能会被终端根据其设置的不同而选择性地解释,所以它可能会有不同的行为,然后是HTMLXML的编码属性,这就需要准确地理解这个过程。</target>
        </trans-unit>
        <trans-unit id="a0a70f58b2f56278f97d8e49ecc8b78c271bc6df" translate="yes" xml:space="preserve">
          <source>Which characters you must and which you mustn't escape indeed depends on the regex flavor you're working with.</source>
          <target state="translated">哪些字符你必须和哪些你不能逃避,这确实取决于你所使用的regex风味。</target>
        </trans-unit>
        <trans-unit id="65f33a96f4971b1a18dc55f52b610954b500eaef" translate="yes" xml:space="preserve">
          <source>You have more details about characters in other answer, which are very specific to the final regexp context. As I noted you mention that you find the regexp escape with attempts, that's probably because different context has different set of character that confused your memory of attempts (often backslash is the character used in those different context to escape a literal character instead of its function).</source>
          <target state="translated">你在其他的回答里有更多关于字符的细节,这对最终的regexp上下文来说是非常具体的。正如我注意到你提到的你发现regexp转义与尝试,这可能是因为不同的上下文有不同的字符集,混淆了你对尝试的记忆(通常反斜线是在那些不同的上下文中用来转义的字符,而不是它的功能)。</target>
        </trans-unit>
        <trans-unit id="0b2b1ae2916b329bfb39c280bca9d2f0928411cc" translate="yes" xml:space="preserve">
          <source>You might like to look at &quot;the shiny ball book&quot; aka Effective Perl (&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0201419750&quot;&gt;sanitised Amazon link&lt;/a&gt;), specifically the chapter on regular expressions, to get a feel for then difference in regexp engine evaluation types.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;您可能想看一下&amp;ldquo;闪亮的书&amp;rdquo;，又名有效的Perl（经过&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0201419750&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;消毒的Amazon链接&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;），特别是有关正则表达式的章节，以了解正则表达式引擎评估类型的不同之处。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="053134580733d1b999fe3b6e87c6cffd5823b4cb" translate="yes" xml:space="preserve">
          <source>and these inside character classes:</source>
          <target state="translated">和这些里面的角色类。</target>
        </trans-unit>
        <trans-unit id="29a0a78174e89d70570199cb327a0b8879d9165e" translate="yes" xml:space="preserve">
          <source>which I find works for most regexp implementations.</source>
          <target state="translated">我发现这对大多数regexp的实现是有效的。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
