<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/399078">
    <body>
      <group id="399078">
        <trans-unit id="7d67bb6716e56cca3eca8a9065af38ddcf97e9f6" translate="yes" xml:space="preserve">
          <source>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Anywhere: &lt;code&gt;. ^ $ * + - ? ( ) [ ] { } \ |&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;En cualquier lugar: &lt;/font&gt;&lt;/font&gt; &lt;code&gt;. ^ $ * + - ? ( ) [ ] { } \ |&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2a8c55057c2c0495b9bccfbec7b17e45412ea5d8" translate="yes" xml:space="preserve">
          <source>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;For literals, don't escape: &lt;code&gt;+ ? ( ) { } |&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Para literales, no escapen: &lt;/font&gt;&lt;/font&gt; &lt;code&gt;+ ? ( ) { } |&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a97d47555ec0720c1f70236663cc597967c70a60" translate="yes" xml:space="preserve">
          <source>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;For standard regex behavior, escape: &lt;code&gt;\+ \? \( \) \{ \} \|&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Para el comportamiento est&amp;aacute;ndar de expresiones regulares, escape: &lt;/font&gt;&lt;/font&gt; &lt;code&gt;\+ \? \( \) \{ \} \|&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f12e6d0791605981ba059a406b6691a5f9790e5e" translate="yes" xml:space="preserve">
          <source>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Inside a character class: &lt;code&gt;^ - [ ]&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Dentro de una clase de personaje: &lt;/font&gt;&lt;/font&gt; &lt;code&gt;^ - [ ]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="918002f5c663d22dba42a630d4b732416c76c2b3" translate="yes" xml:space="preserve">
          <source>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Outside a character class: &lt;code&gt;. ^ $ * + ? ( ) [ { } \ |&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Un fuera de clase de caracteres: &lt;/font&gt;&lt;/font&gt; &lt;code&gt;. ^ $ * + ? ( ) [ { } \ |&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="91540850fdd2484dc131620648016ffd98c1f7b1" translate="yes" xml:space="preserve">
          <source>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Outside a character class: &lt;code&gt;. ^ $ * [ \&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Un fuera de clase de caracteres: &lt;/font&gt;&lt;/font&gt; &lt;code&gt;. ^ $ * [ \&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f2da9c9d2e4568a1a403995617dc37f29af2dbfd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://perldoc.perl.org/perlre.html#Quoting-metacharacters&quot;&gt;https://perldoc.perl.org/perlre.html#Quoting-metacharacters&lt;/a&gt; and &lt;a href=&quot;https://perldoc.perl.org/functions/quotemeta.html&quot;&gt;https://perldoc.perl.org/functions/quotemeta.html&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://perldoc.perl.org/perlre.html#Quoting-metacharacters&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https://perldoc.perl.org/perlre.html#Quoting-metacharacters&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://perldoc.perl.org/functions/quotemeta.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https://perldoc.perl.org/functions/quotemeta.html&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2c393bf2f34a2d6c181e8a2227df5d4efeef0d62" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;BRE/ed/grep/sed&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;BRE/ed/grep/sed&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f59e21f8afbeffd98079028ce6aeaf7d6a78fa84" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ERE/awk/egrep/emacs&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ERE/awk/egrep/emacs&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e676b1e710b18dc41e56c23b6c72c2cc9e9870df" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Edit:&lt;/strong&gt; After the comment below, just thought I'd mention the fact that you also have to consider the difference between finite state automata and non-finite state automata when looking at the behaviour of regexp evaluation.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Editar:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; despu&amp;eacute;s del comentario a continuaci&amp;oacute;n, solo pens&amp;eacute; en mencionar el hecho de que tambi&amp;eacute;n debe considerar la diferencia entre aut&amp;oacute;matas de estado finito y aut&amp;oacute;matas de estado no finito al observar el comportamiento de la evaluaci&amp;oacute;n de expresiones regulares.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="45c05493036228b57a91a503e22683c5ed128082" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;Includes C, C++, Delphi, EditPad, Java, JavaScript, Perl, PHP (preg), PostgreSQL, PowerGREP, PowerShell, Python, REALbasic, Real Studio, Ruby, TCL, VB.Net, VBScript, wxWidgets, XML Schema, Xojo, XRegExp.&lt;br/&gt;PCRE compatibility may vary&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Incluye C, C ++, Delphi, EditPad, Java, JavaScript, Perl, PHP (preg), PostgreSQL, PowerGREP, PowerShell, Python, REALbasic, Real Studio, Ruby, TCL, VB.Net, VBScript, wxWidgets, XML Schema, Xojo, XRegExp. &lt;/font&gt;&lt;/font&gt;&lt;br/&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La compatibilidad con PCRE puede variar&lt;/font&gt;&lt;/font&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="7267e98c4a2f05739245cf705a86774ca73aa3eb" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;Includes awk, ed, egrep, emacs, GNUlib, grep, PHP (ereg), MySQL, Oracle, R, sed.&lt;br/&gt;PCRE support may be enabled in later versions or by using extensions&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Incluye awk, ed, egrep, emacs, GNUlib, grep, PHP (ereg), MySQL, Oracle, R, sed. &lt;/font&gt;&lt;/font&gt;&lt;br/&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El soporte PCRE puede habilitarse en versiones posteriores o mediante el uso de extensiones&lt;/font&gt;&lt;/font&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="53935ccb1d1bcc34d9efdfc75f0d546800f41839" translate="yes" xml:space="preserve">
          <source>Ah the joys of studying at UNSW in the late '70's! (-:</source>
          <target state="translated">¡Ah,las alegrías de estudiar en la UNSW a finales de los 70! (-:</target>
        </trans-unit>
        <trans-unit id="483f30ef22803526f1679fc7151333a7355f53c7" translate="yes" xml:space="preserve">
          <source>Alphanumeric characters cannot be escaped with a backslash</source>
          <target state="translated">Los caracteres alfanuméricos no se pueden escapar con una barra invertida</target>
        </trans-unit>
        <trans-unit id="f7ebf500ba421b0bf9df4deedc3b6483601a07fa" translate="yes" xml:space="preserve">
          <source>Anyway, regexp's are so clunky compared to &lt;a href=&quot;http://en.wikipedia.org/wiki/SNOBOL&quot;&gt;SNOBOL&lt;/a&gt;!  Now &lt;strong&gt;that&lt;/strong&gt; was an interesting programming course! Along with the one on &lt;a href=&quot;http://en.wikipedia.org/wiki/Simula_67&quot;&gt;Simula&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iexcl;De todos modos, las expresiones regulares son tan torpes en comparaci&amp;oacute;n con &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/SNOBOL&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;SNOBOL&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ! &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iexcl;Ese s&amp;iacute; &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;que&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; fue un curso de programaci&amp;oacute;n interesante! &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Junto con el de &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Simula_67&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Simula&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="58c85a0276f22c46ce13b2389bc79add52b37f1c" translate="yes" xml:space="preserve">
          <source>Arbitrary symbols can be escaped with a backslash in PCRE, but not BRE/ERE (they must only be escaped when required). For PCRE &lt;code&gt;] -&lt;/code&gt; only need escaping within a character class, but I kept them in a single list for simplicity</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Los s&amp;iacute;mbolos arbitrarios se pueden escapar con una barra diagonal inversa en PCRE, pero no BRE / ERE (solo se deben escapar cuando sea necesario). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para PCRE &lt;/font&gt;&lt;/font&gt; &lt;code&gt;] -&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; solo necesito escapar dentro de una clase de caracteres, pero los mantuve en una sola lista por simplicidad&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1a704c051e3f6fec7c0f0d461f093c5717764bc8" translate="yes" xml:space="preserve">
          <source>Aside from escapes, different regex implementations may support different modifiers, character classes, anchors, quantifiers, and other features. For more details, check out &lt;a href=&quot;http://www.regular-expressions.info&quot;&gt;regular-expressions.info&lt;/a&gt;, or use &lt;a href=&quot;https://regex101.com/&quot;&gt;regex101.com&lt;/a&gt; to test your expressions live</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Adem&amp;aacute;s de los escapes, las diferentes implementaciones de expresiones regulares pueden admitir diferentes modificadores, clases de caracteres, anclajes, cuantificadores y otras caracter&amp;iacute;sticas. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para m&amp;aacute;s detalles, visite &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.regular-expressions.info&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;regular-expressions.info&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , o use &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://regex101.com/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;regex101.com&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para probar sus expresiones en vivo&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d89ca9e85b093f0601f26d305e30b91ef0aee25b" translate="yes" xml:space="preserve">
          <source>BTW Character classes are pretty vanilla regexp components so they tend to work in most situations where you need escaped characters in regexps.</source>
          <target state="translated">Las clases de personajes son componentes regexp bastante vainilla,por lo que tienden a funcionar en la mayoría de las situaciones en las que se necesitan personajes fugitivos en regexps.</target>
        </trans-unit>
        <trans-unit id="13174a9bc7f1c0d22d348a38e636143a4c31cda4" translate="yes" xml:space="preserve">
          <source>Be aware how the string in memory is processed: if can be a plain string inside the code, or a string entered to the command line, but a could be either an interactive command line or a command line stated inside a shell script file, or inside a variable in memory mentioned by the code, or an (string)argument through further evaluation, or a string containing code generated dynamically with any sort of encapsulation...</source>
          <target state="translated">Tenga en cuenta cómo se procesa la cadena en memoria:si puede ser una cadena simple dentro del código,o una cadena introducida en la línea de comandos,pero a podría ser una línea de comandos interactiva o una línea de comandos declarada dentro de un archivo de script de shell,o dentro de una variable en la memoria mencionada por el código,o un argumento (de cadena)a través de una evaluación adicional,o una cadena que contiene código generado dinámicamente con cualquier tipo de encapsulación...</target>
        </trans-unit>
        <trans-unit id="dd01e7e261a6b1fe70b847c4b38dda03985adf94" translate="yes" xml:space="preserve">
          <source>Check out Jeff Friedl's &lt;a href=&quot;http://regex.info/&quot;&gt;Mastering Regular Expressions&lt;/a&gt; book.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Echa un vistazo al &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;libro &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://regex.info/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Mastering Regular Expressions de&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Jeff Friedl &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8361115b121b188d914f90203e49011346e5c7e6" translate="yes" xml:space="preserve">
          <source>E.g. A regexp in the command line starting with &lt;code&gt;perl -npe&lt;/code&gt;, needs to be transferred to a set of &lt;em&gt;exec&lt;/em&gt; system calls connecting as pipe the file handles, each of this exec system calls just has a list of arguments that were separated by (non escaped)spaces, and possibly pipes(|) and redirection (&amp;gt; N&amp;gt; N&amp;gt;&amp;amp;M), parenthesis, interactive expansion of &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;?&lt;/code&gt;, &lt;code&gt;$(())&lt;/code&gt; ... (all this are special characters used by the *sh which might appear to interfere with the character of the regular expression in the next context, but they are evaluated in order: before the command line. The command line is read by a program as bash/sh/csh/tcsh/zsh, essentially inside double quote or single quote the escape is simpler but it is not necessary to quote a string in the command line because mostly the space has to be prefixed with backslash and the quote are not necessary leaving available the expand functionality for characters * and ?, but this parse as different context as within quote. Then when the command line is evaluated the regexp obtained in memory (not as written in the command line) receives the same treatment as it would be in a source file.
For regexp there is character-set context within square brackets [ ], perl regular expression can be quoted by a large set of non alfa-numeric characters (E.g. m// or m:/better/for/path: ...).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por ejemplo, una &lt;/font&gt;&lt;/font&gt; &lt;code&gt;perl -npe&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en la l&amp;iacute;nea de comando que comienza con &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;perl -npe&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , debe transferirse a un conjunto de &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;llamadas al sistema &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ejecutivo&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que se conectan como canalizaciones que maneja el archivo, cada una de estas llamadas al sistema ejecutivo solo tiene una lista de argumentos separados por (no escapado ) espacios, y posiblemente tuber&amp;iacute;as (|) y redirecci&amp;oacute;n (&amp;gt; N&amp;gt; N&amp;gt; &amp;amp; M), par&amp;eacute;ntesis, expansi&amp;oacute;n interactiva de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;*&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;?&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;$(())&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;... (todo esto son caracteres especiales utilizados por * sh que pueden parecer interferir con el car&amp;aacute;cter de la expresi&amp;oacute;n regular en el siguiente contexto, pero se eval&amp;uacute;an en orden: antes de la l&amp;iacute;nea de comando. La l&amp;iacute;nea de comando es le&amp;iacute;da por un programa como bash / sh / csh / tcsh / zsh, esencialmente dentro de comillas dobles o comillas simples, el escape es m&amp;aacute;s simple, pero no es necesario citar una cadena en la l&amp;iacute;nea de comando porque la mayor&amp;iacute;a del espacio tiene que estar prefijado con una barra diagonal inversa y la cita es no es necesario dejar disponible la funcionalidad de expansi&amp;oacute;n para los caracteres * y?, pero esto se analiza en un contexto diferente al de la comilla. Luego, cuando se eval&amp;uacute;a la l&amp;iacute;nea de comando, la expresi&amp;oacute;n regular obtenida en la memoria (no como est&amp;aacute; escrita en la l&amp;iacute;nea de comando) recibe el mismo tratamiento que estar&amp;iacute;a en un archivo fuente. Para regexp hay un contexto de juego de caracteres entre corchetes [],La expresi&amp;oacute;n regular perl se puede citar mediante un gran conjunto de caracteres no alfa-num&amp;eacute;ricos (por ejemplo, m // or m: / better / for / path: ...).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="adcff3eaaa4ead07debf3d94dc837f7ed21cec06" translate="yes" xml:space="preserve">
          <source>Each of this context assigned some characters with special functionality.</source>
          <target state="translated">Cada uno de estos contextos asignó algunos personajes con una funcionalidad especial.</target>
        </trans-unit>
        <trans-unit id="f08f9b14d233c90e12f3bfe6ffd77d280540b8a2" translate="yes" xml:space="preserve">
          <source>Escaping any other characters is an error with POSIX ERE.</source>
          <target state="translated">Escapar de cualquier otro personaje es un error con POSIX ERE.</target>
        </trans-unit>
        <trans-unit id="d175c420ed0e4eac7898cadf08c6b147e48609e3" translate="yes" xml:space="preserve">
          <source>Escaping parentheses and curly brackets in BREs gives them the special meaning their unescaped versions have in EREs.  Some implementations (e.g. GNU) also give special meaning to other characters when escaped, such as \? and +.  Escaping a character other than .^$*(){} is normally an error with BREs.</source>
          <target state="translated">Escapar de los paréntesis y los corchetes rizados en las EER les da el significado especial que tienen sus versiones no escapadas en las EER.Algunas implementaciones (por ejemplo,GNU)también dan un significado especial a otros caracteres cuando se escapan,como \? y +.Escapar un carácter que no sea .^$*(){}es normalmente un error con los BREs.</target>
        </trans-unit>
        <trans-unit id="f87278cc2c06764d8e04de06f830e733e448a3fd" translate="yes" xml:space="preserve">
          <source>Except if it's a &quot; or '.  :/</source>
          <target state="translated">Excepto si es un &quot;o&quot;..:</target>
        </trans-unit>
        <trans-unit id="407083df41efb846753191551f28dbb6de294319" translate="yes" xml:space="preserve">
          <source>For Ionic (Typescript) you have to double slash in order to scape the characters.
For example (this is to match some special characters):</source>
          <target state="translated">Para Ionic (Typescript)tienes que hacer una doble barra para escapar de los personajes.Por ejemplo (esto es para hacer coincidir algunos caracteres especiales):</target>
        </trans-unit>
        <trans-unit id="54f275ed7771dcb69cbc20ef9c202565ae878bcf" translate="yes" xml:space="preserve">
          <source>For PCRE, and most other so-called Perl-compatible flavors, escape these outside character classes:</source>
          <target state="translated">Para el PCRE,y la mayoría de los otros sabores llamados compatibles con Perl,escapan a estas clases de personajes externos:</target>
        </trans-unit>
        <trans-unit id="54c4e41693531e3ab7c7a314ea4e2eaa6d1cf7e1" translate="yes" xml:space="preserve">
          <source>For PHP, &quot;it is always safe to precede a non-alphanumeric with &quot;\&quot; to specify that it stands for itself.&quot; - &lt;a href=&quot;http://php.net/manual/en/regexp.reference.escape.php&quot;&gt;http://php.net/manual/en/regexp.reference.escape.php&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para PHP, &quot;siempre es seguro preceder un no alfanum&amp;eacute;rico con&quot; \ &quot;para especificar que se defiende a s&amp;iacute; mismo&quot;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;- &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://php.net/manual/en/regexp.reference.escape.php&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http://php.net/manual/en/regexp.reference.escape.php&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9380e5c8736cd4f19e0b9dd344946b2244877c31" translate="yes" xml:space="preserve">
          <source>For POSIX extended regexes (ERE), escape these outside character classes (same as PCRE):</source>
          <target state="translated">Para los regexes extendidos POSIX (ERE),escapan a estas clases de caracteres externos (igual que el PCRE):</target>
        </trans-unit>
        <trans-unit id="c2b64b544c190d00d427d2155b94a792b1b9db30" translate="yes" xml:space="preserve">
          <source>However, keeping a page like the &lt;a href=&quot;http://www.regular-expressions.info/tools.html&quot;&gt;Regular Expression Tools Page&lt;/a&gt; or this &lt;a href=&quot;http://www.addedbytes.com/cheat-sheets/regular-expressions-cheat-sheet/&quot;&gt;Regular Expression Cheatsheet&lt;/a&gt; can go a long way to help you quickly filter things out.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Sin embargo, mantener una p&amp;aacute;gina como la &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.regular-expressions.info/tools.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;P&amp;aacute;gina de herramientas de expresi&amp;oacute;n regular&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; o esta &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.addedbytes.com/cheat-sheets/regular-expressions-cheat-sheet/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Hoja de referencia de expresiones regulares&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; puede ser de gran ayuda para ayudarlo a filtrar r&amp;aacute;pidamente las cosas.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a849b55daf78cf386fa658998ec37854ddff4799" translate="yes" xml:space="preserve">
          <source>I am tired of always trying to guess, if I should escape special characters like '&lt;code&gt;()[]{}|&lt;/code&gt;' etc. when using many implementations of regexps.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Estoy cansado de tratar de adivinar si debo escapar de caracteres especiales como ' &lt;/font&gt;&lt;/font&gt; &lt;code&gt;()[]{}|&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;'etc. cuando se usan muchas implementaciones de expresiones regulares.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e7ca436bca697c7810913b29993feabb023b8083" translate="yes" xml:space="preserve">
          <source>I tend to just use a simple character class definition instead, so the above expression becomes</source>
          <target state="translated">Tiendo a usar una simple definición de clase de personaje en su lugar,por lo que la expresión anterior se convierte en</target>
        </trans-unit>
        <trans-unit id="54394c6bb51712440f21ae57bbe2313f22ce140e" translate="yes" xml:space="preserve">
          <source>If all this makes your head spin, grab a copy of &lt;a href=&quot;http://www.regexbuddy.com&quot;&gt;RegexBuddy&lt;/a&gt;.  On the Create tab, click Insert Token, and then Literal.  RegexBuddy will add escapes as needed.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si todo esto te hace girar la cabeza, toma una copia de &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.regexbuddy.com&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;RegexBuddy&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En la pesta&amp;ntilde;a Crear, haga clic en Insertar token y luego en Literal. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;RegexBuddy agregar&amp;aacute; escapes seg&amp;uacute;n sea necesario.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e77fe7b95e12760b0659f5fe78377351558ca7ab" translate="yes" xml:space="preserve">
          <source>If unsure about a specific character, it can be escaped like &lt;code&gt;\xFF&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si no est&amp;aacute; seguro acerca de un personaje espec&amp;iacute;fico, se puede escapar como &lt;/font&gt;&lt;/font&gt; &lt;code&gt;\xFF&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="06293a23dfd9a2808f8f5af94622a77f9985f0f4" translate="yes" xml:space="preserve">
          <source>In POSIX basic regular expressions (BRE), these are metacharacters that you need to escape to suppress their meaning:</source>
          <target state="translated">En las expresiones regulares básicas de POSIX (BRE),son metacaracteres de los que hay que escapar para suprimir su significado:</target>
        </trans-unit>
        <trans-unit id="11f83cfdeb5fd5da7a22a95360d91b3ad72833f6" translate="yes" xml:space="preserve">
          <source>In the official documentation, such characters are called metacharacters. Example of quoting:</source>
          <target state="translated">En la documentación oficial,estos personajes se denominan metacaracteres.Ejemplo de cita:</target>
        </trans-unit>
        <trans-unit id="ab1a58228582b4b117b80856b4c70bcaadadd844" translate="yes" xml:space="preserve">
          <source>Inside character classes, BREs follow the same rule as EREs.</source>
          <target state="translated">Dentro de las clases de personaje,los BREs siguen la misma regla que los EREs.</target>
        </trans-unit>
        <trans-unit id="e2b30b848c1b94f3704299738525753a115907c3" translate="yes" xml:space="preserve">
          <source>Inside character classes, the backslash is a literal character in POSIX regular expressions.  You cannot use it to escape anything.  You have to use &quot;clever placement&quot; if you want to include character class metacharacters as literals.  Put the ^ anywhere except at the start, the ] at the start, and the - at the start or the end of the character class to match these literally, e.g.:</source>
          <target state="translated">Dentro de las clases de personaje,la barra invertida es un personaje literal en las expresiones regulares de POSIX.No puedes usarlo para escapar de nada.Tienes que usar &quot;colocación inteligente&quot; si quieres incluir los metacaracteres de la clase de personaje como literales.Ponga el ^ en cualquier lugar excepto al principio,el]al principio,y el-al principio o al final de la clase de personaje para que coincida con estos literalmente,por ejemplo:</target>
        </trans-unit>
        <trans-unit id="894aa802f4d8b50284470b8d7af8d180642a0cbc" translate="yes" xml:space="preserve">
          <source>It is different with, for example, Python, sed, grep, awk, Perl, rename, Apache, find and so on.
Is there any rule set which tells when I should, and when I should not, escape special characters? Does it depend on the regexp type, like PCRE, POSIX or extended regexps?</source>
          <target state="translated">Es diferente con,por ejemplo,Python,sed,grep,awk,Perl,renombrar,Apache,encontrar y así sucesivamente.¿Hay algún conjunto de reglas que diga cuándo debo y cuándo no debo escapar de los personajes especiales? ¿Depende del tipo de regexp,como PCRE,POSIX o regexps extendido?</target>
        </trans-unit>
        <trans-unit id="f92cf4d271e5e508b9d65066ab31d73c4b3a60db" translate="yes" xml:space="preserve">
          <source>Legacy RegEx Flavors (BRE/ERE)</source>
          <target state="translated">Legado RegEx Flavors (BREERE)</target>
        </trans-unit>
        <trans-unit id="87ba021fd029962b2cfc3314e679c5178f8e8f91" translate="yes" xml:space="preserve">
          <source>Modern RegEx Flavors (PCRE)</source>
          <target state="translated">Sabores modernos de RegEx (PCRE)</target>
        </trans-unit>
        <trans-unit id="8dbd969ee97bd9bfab2f6fa3ae907ed08d524cab" translate="yes" xml:space="preserve">
          <source>Not all the world's a PCRE!</source>
          <target state="translated">¡No todo el mundo es un PCRE!</target>
        </trans-unit>
        <trans-unit id="70440046a3dc2e079f23ee1c57dfa76669b732aa" translate="yes" xml:space="preserve">
          <source>Notes</source>
          <target state="translated">Notes</target>
        </trans-unit>
        <trans-unit id="58712ad0108374c3dbf6f92a6b72b766dd6aebab" translate="yes" xml:space="preserve">
          <source>POSIX recognizes multiple variations on regular expressions - basic regular expressions (BRE) and extended regular expressions (ERE).  And even then, there are quirks because of the historical implementations of the utilities standardized by POSIX.</source>
          <target state="translated">POSIX reconoce múltiples variaciones de las expresiones regulares:expresiones regulares básicas (BRE)y expresiones regulares extendidas (ERE).Y aún así,hay peculiaridades debido a las implementaciones históricas de las utilidades estandarizadas por POSIX.</target>
        </trans-unit>
        <trans-unit id="42499e430e3ad3149c99af96ca10e885aaf46de4" translate="yes" xml:space="preserve">
          <source>Pay attention to this &lt;code&gt;] [ - _ . /&lt;/code&gt; characters. They have to be double slashed. If you don't do that, you are going to have a type error in your code.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Presta atenci&amp;oacute;n a esto &lt;/font&gt;&lt;/font&gt; &lt;code&gt;] [ - _ . /&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; personajes. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tienen que ser doblemente cortadas. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si no hace eso, tendr&amp;aacute; un error de tipo en su c&amp;oacute;digo.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="061d7c539b5b77283f5797bd9cad026318098133" translate="yes" xml:space="preserve">
          <source>Quoted expression strings must also have the surrounding quote characters escaped, and often with backslashes doubled-up (like &lt;code&gt;&quot;(\&quot;)(/)(\\.)&quot;&lt;/code&gt; versus &lt;code&gt;/(&quot;)(\/)(\.)/&lt;/code&gt; in JavaScript)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Las cadenas de expresi&amp;oacute;n entre comillas tambi&amp;eacute;n deben tener los caracteres de comillas circundantes escapados, y a menudo con barras invertidas dobladas (como &lt;/font&gt;&lt;/font&gt; &lt;code&gt;&quot;(\&quot;)(/)(\\.)&quot;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Versus &lt;/font&gt;&lt;/font&gt; &lt;code&gt;/(&quot;)(\/)(\.)/&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en JavaScript)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6c4898925ca3b5988085856c93d5eb8db2bb8ad5" translate="yes" xml:space="preserve">
          <source>Really, there isn't.  there are about a half-zillion different regex syntaxes; they seem to come down to Perl, EMACS/GNU, and AT&amp;amp;T in general, but I'm always getting surprised too.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Realmente no lo hay. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;hay aproximadamente medio mill&amp;oacute;n de sintaxis de expresiones regulares diferentes; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Parece que se reducen a Perl, EMACS / GNU y AT&amp;amp;T en general, pero tambi&amp;eacute;n siempre me sorprende.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7bfebe3640cdb3426c48e83c532cc87ad6d71ffa" translate="yes" xml:space="preserve">
          <source>So you really have to know what style you are trying to quote.</source>
          <target state="translated">Así que realmente tienes que saber qué estilo estás tratando de citar.</target>
        </trans-unit>
        <trans-unit id="39b6f38bf2b3ef957f165d6856f072c9d6cb4abb" translate="yes" xml:space="preserve">
          <source>Sometimes simple escaping is not possible with the characters you've listed. For example, using a backslash to escape a bracket isn't going to work in the left hand side of a substitution string in sed, namely</source>
          <target state="translated">A veces la simple fuga no es posible con los personajes de la lista.Por ejemplo,usar una barra invertida para escapar de un paréntesis no va a funcionar en el lado izquierdo de una cadena de sustitución en sed,a saber</target>
        </trans-unit>
        <trans-unit id="3ffbf9108e1fb9f4f739a7c110dd8d9f4aaaeb20" translate="yes" xml:space="preserve">
          <source>There isn't a simple rule for when to use which notation, or even which notation a given command uses.</source>
          <target state="translated">No hay una regla sencilla sobre cuándo usar qué notación,o incluso qué notación usa un comando dado.</target>
        </trans-unit>
        <trans-unit id="1eae24d3735cf6382bb598acd327833adead48fa" translate="yes" xml:space="preserve">
          <source>To escape regex pattern variables (or partial variables) in PHP use preg_quote()</source>
          <target state="translated">Para escapar de las variables de patrón regex (o variables parciales)en PHP use preg_quote()</target>
        </trans-unit>
        <trans-unit id="547d9c5fe8cf140947c895b536944d926d9e0565" translate="yes" xml:space="preserve">
          <source>To know when and what to escape without attempts is necessary to understand precisely the chain of contexts the string pass through. You will specify the string from the farthest side to its final destination which is the memory handled by the regexp parsing code.</source>
          <target state="translated">Para saber cuándo y qué escapar sin intentarlo es necesario comprender con precisión la cadena de contextos por los que pasa la cuerda.Se especificará la cadena desde el lado más lejano hasta su destino final que es la memoria manejada por el código de análisis regexp.</target>
        </trans-unit>
        <trans-unit id="495c0df080d56ef66956bee36ba63ba18fb51ee5" translate="yes" xml:space="preserve">
          <source>Unfortunately there really isn't a set set of escape codes since it varies based on the language you are using.</source>
          <target state="translated">Desafortunadamente no hay un conjunto de códigos de escape,ya que varía según el idioma que se utilice.</target>
        </trans-unit>
        <trans-unit id="e0c90f58ad09d2083cef1d05099012604eb5e2e4" translate="yes" xml:space="preserve">
          <source>Unfortunately, the meaning of things like ( and \( are swapped between Emacs style regular expressions and most other styles.  So if you try to escape these you may be doing the opposite of what you want.</source>
          <target state="translated">Desafortunadamente,el significado de cosas como(y \ ~ se intercambian entre las expresiones regulares del estilo de Emacs y la mayoría de los otros estilos.Así que si tratas de escapar de estas cosas puedes estar haciendo lo contrario de lo que quieres.</target>
        </trans-unit>
        <trans-unit id="202929eaf3ff70c56f13ef4bebb902c161a24535" translate="yes" xml:space="preserve">
          <source>What special characters must be escaped in regular expressions</source>
          <target state="translated">¿Qué personajes especiales deben escaparse en las expresiones regulares</target>
        </trans-unit>
        <trans-unit id="42311309ff2118567ad88fb48a34fbf0d59ff5ce" translate="yes" xml:space="preserve">
          <source>When you want to pass the character literally without using its special function (local to the context), than that's the case you have to escape it, for the next context... which might need some other escape characters which might additionally need to be escaped in the preceding context(s).
Furthermore there can be things like character encoding (the most insidious is utf-8 because it look like ASCII for common characters, but might be optionally interpreted even by the terminal depending on its settings so it might behave differently, then the encoding attribute of HTML/XML, it's necessary to understand the process precisely right.</source>
          <target state="translated">Cuando se quiere pasar el personaje literalmente sin usar su función especial (local al contexto),entonces se tiene que escapar de él,para el siguiente contexto...que podría necesitar algunos otros personajes de escape que podrían necesitar adicionalmente ser escapados en el contexto o contextos precedentes.Además,puede haber cosas como la codificación de caracteres (la más insidiosa es utf-8 porque parece ASCII para los caracteres comunes,pero puede ser interpretada opcionalmente incluso por el terminal dependiendo de sus ajustes,por lo que podría comportarse de manera diferente,entonces el atributo de codificación de HTMLXML,es necesario entender el proceso precisamente bien.</target>
        </trans-unit>
        <trans-unit id="a0a70f58b2f56278f97d8e49ecc8b78c271bc6df" translate="yes" xml:space="preserve">
          <source>Which characters you must and which you mustn't escape indeed depends on the regex flavor you're working with.</source>
          <target state="translated">Los personajes a los que debes y no debes escapar dependen del sabor de regex con el que trabajes.</target>
        </trans-unit>
        <trans-unit id="65f33a96f4971b1a18dc55f52b610954b500eaef" translate="yes" xml:space="preserve">
          <source>You have more details about characters in other answer, which are very specific to the final regexp context. As I noted you mention that you find the regexp escape with attempts, that's probably because different context has different set of character that confused your memory of attempts (often backslash is the character used in those different context to escape a literal character instead of its function).</source>
          <target state="translated">Tienes más detalles sobre los personajes de la otra respuesta,que son muy específicos del contexto final de regexp.Como he señalado,mencionas que encuentras el escape de regexp con los intentos,eso es probablemente porque el contexto diferente tiene un conjunto diferente de caracteres que confunde tu memoria de los intentos (a menudo la barra invertida es el carácter utilizado en esos contextos diferentes para escapar de un carácter literal en lugar de su función).</target>
        </trans-unit>
        <trans-unit id="0b2b1ae2916b329bfb39c280bca9d2f0928411cc" translate="yes" xml:space="preserve">
          <source>You might like to look at &quot;the shiny ball book&quot; aka Effective Perl (&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0201419750&quot;&gt;sanitised Amazon link&lt;/a&gt;), specifically the chapter on regular expressions, to get a feel for then difference in regexp engine evaluation types.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Es posible que desee ver &quot;el libro de la bola brillante&quot;, tambi&amp;eacute;n conocido como Effective Perl ( &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0201419750&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;enlace de Amazon desinfectado&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ), espec&amp;iacute;ficamente el cap&amp;iacute;tulo sobre expresiones regulares, para tener una idea de la diferencia en los tipos de evaluaci&amp;oacute;n del motor regexp.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="053134580733d1b999fe3b6e87c6cffd5823b4cb" translate="yes" xml:space="preserve">
          <source>and these inside character classes:</source>
          <target state="translated">y estas clases de personajes internos:</target>
        </trans-unit>
        <trans-unit id="29a0a78174e89d70570199cb327a0b8879d9165e" translate="yes" xml:space="preserve">
          <source>which I find works for most regexp implementations.</source>
          <target state="translated">que encuentro que funciona para la mayoría de las implementaciones de regexpansión.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
