<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/520650">
    <body>
      <group id="520650">
        <trans-unit id="839e4a2006b278a93c4dc0f1936567078302c3f3" translate="yes" xml:space="preserve">
          <source>&amp;hellip;</source>
          <target state="translated">&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="25e853a2a24fa0ad48c2bee321bcc5a15edc14d2" translate="yes" xml:space="preserve">
          <source>1- update your local meta-data using  : &lt;strong&gt;git fetch --all&lt;/strong&gt;</source>
          <target state="translated">1-使用以下命令更新本地元数据： &lt;strong&gt;git fetch --all&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="482a680dd8a4b457825a7c710320c30db8dc88e8" translate="yes" xml:space="preserve">
          <source>2- show your remote and local branches using : &lt;strong&gt;git branch -a&lt;/strong&gt;
, see the following Screenshot</source>
          <target state="translated">2-使用以下命令显示您的远程和本地分支： &lt;strong&gt;git branch -a&lt;/strong&gt; ，请参见以下屏幕截图</target>
        </trans-unit>
        <trans-unit id="7b5db2296ee74dd789740192433afaa7c114792a" translate="yes" xml:space="preserve">
          <source>3- switch to target branch , that you want to linked with the remote: using</source>
          <target state="translated">3-切换到目标分支,你要与远程连接的目标分支:用</target>
        </trans-unit>
        <trans-unit id="8a4e5088c58753bba6f565a36e19a1ee2a167e30" translate="yes" xml:space="preserve">
          <source>4- Link your local branch to a remote branch using:</source>
          <target state="translated">4-4-使用以下方法将你的本地分支与远程分支连接起来。</target>
        </trans-unit>
        <trans-unit id="302a1eb1c80169524e62e458497beb1c1ebb2884" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git branch --set-upstream&lt;/code&gt; is deprecated and may be removed in a relatively distant future.  &lt;code&gt;git branch [-u|--set-upstream-to]&lt;/code&gt; has been introduced with a saner order of arguments.</source>
          <target state="translated">&lt;code&gt;git branch --set-upstream&lt;/code&gt; 已被弃用，并且可以在相对遥远的将来删除。 &lt;code&gt;git branch [-u|--set-upstream-to]&lt;/code&gt; 引入了更清晰的参数顺序。</target>
        </trans-unit>
        <trans-unit id="c6f1ad77e070140e29440cec460e4a5191823e09" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;As of Git 1.7.0:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;从Git 1.7.0开始：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8e7b4681c21c9698c251f25bccf90351be796e3f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;As of Git 1.8.0:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;从Git 1.8.0开始：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ef937726101d6bbf1ea792d981c362dd127505c0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Notes:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Notes:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a0d650f874faccda51dd7cf956cf555ce99f0922" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Summary.&lt;/strong&gt; Just run this 2 commands:</source>
          <target state="translated">&lt;strong&gt;摘要。&lt;/strong&gt; 只需运行以下两个命令：</target>
        </trans-unit>
        <trans-unit id="ef40c1a17bf0eb5459615f2caafe9f134e270bd6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;git branch --set-upstream-to  nameOfRemoteBranch&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;git branch --set-upstream-to nameOfRemoteBranch&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="433c0db2f1da0f707af209684bbd897b01424949" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;git checkout branchName&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;git checkout branchName&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2175dce9f18d19c6790ef2e6a5211f0a8b5dde09" translate="yes" xml:space="preserve">
          <source>Actually for the accepted answer to work:</source>
          <target state="translated">其实,对于接受的答案要想成功。</target>
        </trans-unit>
        <trans-unit id="db0d229e5fd37417113eed0e9bec214db6913d58" translate="yes" xml:space="preserve">
          <source>After a &lt;code&gt;git pull&lt;/code&gt; :</source>
          <target state="translated">经过 &lt;code&gt;git pull&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="be11e15bd052b944663a1bf9d1d521010b55378d" translate="yes" xml:space="preserve">
          <source>All of the above commands will cause local branch &lt;code&gt;foo&lt;/code&gt; to track remote branch &lt;code&gt;foo&lt;/code&gt; from remote &lt;code&gt;upstream&lt;/code&gt;.</source>
          <target state="translated">以上所有命令将导致本地分支 &lt;code&gt;foo&lt;/code&gt; 从远程 &lt;code&gt;upstream&lt;/code&gt; 跟踪远程分支foo 。</target>
        </trans-unit>
        <trans-unit id="b9a4046a8a02bc1fe2ebc567693dff9da8ef9159" translate="yes" xml:space="preserve">
          <source>And push:</source>
          <target state="translated">而推。</target>
        </trans-unit>
        <trans-unit id="3381d379cdf90a3ccfbab0ab749a0d66a5be3140" translate="yes" xml:space="preserve">
          <source>And remotes come by itelsef, even if not linked locally:</source>
          <target state="translated">而遥控器是由Itelsef来的,即使不在本地链接,也是如此。</target>
        </trans-unit>
        <trans-unit id="f5406aee60dad4beb1bc59c6f8110d3fe911279a" translate="yes" xml:space="preserve">
          <source>Be wary of &lt;strong&gt;push.default&lt;/strong&gt;.</source>
          <target state="translated">注意&lt;strong&gt;push.default&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="0c6d39b82817a1c728ef4d41ca55503af512eb70" translate="yes" xml:space="preserve">
          <source>But of course, still no local branch:</source>
          <target state="translated">但当然,还是没有当地的分公司。</target>
        </trans-unit>
        <trans-unit id="321f07a5dc46c5faa77250eebfbfb9153b41b0c1" translate="yes" xml:space="preserve">
          <source>Defining the upstream will fail with newly created remotes that have not been fetched. In that case run &lt;code&gt;git fetch upstream&lt;/code&gt; beforehand.</source>
          <target state="translated">对于尚未获取的新创建的远程，定义上游将失败。 在这种情况下，请事先运行 &lt;code&gt;git fetch upstream&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="642e0b6aa9498866f9b36f67f68098584d5415a9" translate="yes" xml:space="preserve">
          <source>Editing &lt;code&gt;.git/config&lt;/code&gt; is probably the easiest and fastest way. That's what the Git commands for handling remote branches are doing, anyway.</source>
          <target state="translated">编辑 &lt;code&gt;.git/config&lt;/code&gt; 可能是最简单，最快的方法。 无论如何，这就是用于处理远程分支的Git命令正在做的事情。</target>
        </trans-unit>
        <trans-unit id="ec471d84b36457f0d9d75c03377c9e3cd5f3de93" translate="yes" xml:space="preserve">
          <source>Example of use:</source>
          <target state="translated">用例:</target>
        </trans-unit>
        <trans-unit id="e3b0f9cf9fe54392b9850690e70d5a19b3049ed0" translate="yes" xml:space="preserve">
          <source>Followed by the previous command to promote the local branch into a tracking branch.</source>
          <target state="translated">按照之前的命令,将本地分支推进为跟踪分支。</target>
        </trans-unit>
        <trans-unit id="69b7a10c18ed24060dc228ffad4955ae5e20a358" translate="yes" xml:space="preserve">
          <source>For 1.6.x, it can be done using the &lt;a href=&quot;http://github.com/webmat/git_remote_branch&quot;&gt;git_remote_branch&lt;/a&gt; tool:</source>
          <target state="translated">对于1.6.x，可以使用&lt;a href=&quot;http://github.com/webmat/git_remote_branch&quot;&gt;git_remote_branch&lt;/a&gt;工具来完成：</target>
        </trans-unit>
        <trans-unit id="f8e4f74b3f04939dc01a5fb1898f9268cd812162" translate="yes" xml:space="preserve">
          <source>For anyone who, like me, just wants to sync up your local branch name with the remote branch name, here's a handy command:</source>
          <target state="translated">对于那些像我一样,只想将本地分支名称与远程分支名称同步的人,这里有一个方便的命令。</target>
        </trans-unit>
        <trans-unit id="201699513ef2a4c0ba3fea740ff38c08ed15cca2" translate="yes" xml:space="preserve">
          <source>For creating new branch, we could use following command</source>
          <target state="translated">在创建新的分支时,我们可以使用以下命令</target>
        </trans-unit>
        <trans-unit id="831553e85e104e6db643f645bb7209950cd3a1ac" translate="yes" xml:space="preserve">
          <source>For the already created branch to create link between remote then from that branch use below command</source>
          <target state="translated">对于已经创建的分支,在远程之间创建链接,然后从该分支中使用下面的命令</target>
        </trans-unit>
        <trans-unit id="b4e7a0f12040e5bf87933315fd8fbe4d69103f52" translate="yes" xml:space="preserve">
          <source>Given a branch &lt;code&gt;foo&lt;/code&gt; and a remote &lt;code&gt;upstream&lt;/code&gt;:</source>
          <target state="translated">给定一个分支 &lt;code&gt;foo&lt;/code&gt; 和一个远程 &lt;code&gt;upstream&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="b90a65bb3f023289543245202bb91a06623e994f" translate="yes" xml:space="preserve">
          <source>Given that &lt;code&gt;$BRANCH&lt;/code&gt; and &lt;code&gt;origin/$BRANCH&lt;/code&gt; exist, and you've not currently checked out &lt;code&gt;$BRANCH&lt;/code&gt; (switch away if you have), do:</source>
          <target state="translated">鉴于 &lt;code&gt;$BRANCH&lt;/code&gt; 和 &lt;code&gt;origin/$BRANCH&lt;/code&gt; 存在，并且您当前尚未签出 &lt;code&gt;$BRANCH&lt;/code&gt; （如果有，请转出），请执行以下操作：</target>
        </trans-unit>
        <trans-unit id="b2082b0529d43107e21b566b54a231d3847c067f" translate="yes" xml:space="preserve">
          <source>Here, using &lt;code&gt;github&lt;/code&gt; and &lt;code&gt;git version 2.1.4&lt;/code&gt;, just do:</source>
          <target state="translated">在这里，使用 &lt;code&gt;github&lt;/code&gt; 和 &lt;code&gt;git version 2.1.4&lt;/code&gt; ，只需执行以下操作：</target>
        </trans-unit>
        <trans-unit id="99468834166619cff3d41953aa1861fa3254e72e" translate="yes" xml:space="preserve">
          <source>I believe that in as early as Git 1.5.x you could make a local branch &lt;code&gt;$BRANCH&lt;/code&gt; track a remote branch &lt;code&gt;origin/$BRANCH&lt;/code&gt;, like this.</source>
          <target state="translated">我相信，早在Git 1.5.x中，您就可以使本地分支 &lt;code&gt;$BRANCH&lt;/code&gt; 跟踪远程分支 &lt;code&gt;origin/$BRANCH&lt;/code&gt; ，就像这样。</target>
        </trans-unit>
        <trans-unit id="0892ad751b32f0e3e4e34baf158a193449f5e251" translate="yes" xml:space="preserve">
          <source>I do this as a side-effect of pushing with the &lt;code&gt;-u&lt;/code&gt; option as in</source>
          <target state="translated">我这样做是因为使用 &lt;code&gt;-u&lt;/code&gt; 选项进行推送的副作用</target>
        </trans-unit>
        <trans-unit id="6f837b2de15855d9503a43ae7bd7a697e5e30654" translate="yes" xml:space="preserve">
          <source>I know I can just edit the &lt;code&gt;.git/config&lt;/code&gt; file, but it seems there should be an easier way.</source>
          <target state="translated">我知道我可以编辑 &lt;code&gt;.git/config&lt;/code&gt; 文件，但是似乎应该有一个更简单的方法。</target>
        </trans-unit>
        <trans-unit id="9fc9269153f81927987af9afa58dd0d075a8070b" translate="yes" xml:space="preserve">
          <source>I know how to make a new branch that tracks remote branches, but &lt;strong&gt;how do I make an existing branch track a remote branch?&lt;/strong&gt;</source>
          <target state="translated">我知道如何创建一个跟踪远程分支的新分支，但是&lt;strong&gt;如何使现有分支跟踪一个远程分支？&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f5854d5480066570d4625bf001550cec8c993aae" translate="yes" xml:space="preserve">
          <source>I use the following command (Suppose your local branch name is &quot;branch-name-local&quot; and remote branch name is &quot;branch-name-remote&quot;):</source>
          <target state="translated">我使用以下命令(假设你的本地分支名称为 &quot;分支-名-本地&quot;,远程分支名称为 &quot;分支-名-远程&quot;)。</target>
        </trans-unit>
        <trans-unit id="67a310bb050c3895563039216ae3c81ab2039da0" translate="yes" xml:space="preserve">
          <source>If both local and remote branches have the same name, then just do the following:</source>
          <target state="translated">如果本地分支和远程分支都有相同的名称,那么只需执行以下操作即可。</target>
        </trans-unit>
        <trans-unit id="9ddc227136798dc6b8b2e8377662f800a3273982" translate="yes" xml:space="preserve">
          <source>If you don't want to muck with the file by hand (and it's not that hard to do), you can always use &lt;code&gt;git config&lt;/code&gt; to do it...but again, that's just going to edit the &lt;code&gt;.git/config&lt;/code&gt; file, anyway.</source>
          <target state="translated">如果您不想手工处理该文件（并非难事），则始终可以使用 &lt;code&gt;git config&lt;/code&gt; 进行操作...但是，再次，这只是编辑 &lt;code&gt;.git/config&lt;/code&gt; 文件，无论如何。</target>
        </trans-unit>
        <trans-unit id="9fc01d2115fdd97a758d7db92ffd56b0c9e0867d" translate="yes" xml:space="preserve">
          <source>If you tried to &quot;git push&quot; when on the &quot;upstream&quot; branch, with &lt;strong&gt;push.default matching&lt;/strong&gt; git would automatically try to merge the local branch &quot;master&quot; into &quot;upstream/master&quot;, causing a whole lot of chaos.</source>
          <target state="translated">如果您尝试在&amp;ldquo;上游&amp;rdquo;分支上进行&amp;ldquo; git push&amp;rdquo;操作，则使用&lt;strong&gt;push.default匹配的&lt;/strong&gt; git会自动尝试将本地分支&amp;ldquo; master&amp;rdquo;合并为&amp;ldquo; upstream / master&amp;rdquo;，从而造成很多混乱。</target>
        </trans-unit>
        <trans-unit id="ca62f3456b5d2ef5e3f4fb01aa64cafbe280eb25" translate="yes" xml:space="preserve">
          <source>In a somewhat related way I was trying to add a remote tracking branch to an existing branch, but did not have access to that remote repository on the system where I wanted to add that remote tracking branch on (because I frequently export a copy of this repo via sneakernet to another system that has the access to push to that remote). I found that there was no way to force adding a remote branch on the local that hadn't been fetched yet (so local did not know that the branch existed on the remote and I would get the error: &lt;code&gt;the requested upstream branch 'origin/remotebranchname' does not exist&lt;/code&gt;).</source>
          <target state="translated">我以某种相关的方式尝试将远程跟踪分支添加到现有分支，但是没有访问我要在其上添加该远程跟踪分支的系统上的远程存储库的权限（因为我经常导出此副本通过sneakernet回购到另一个可以推送到该远程服务器的系统）。 我发现没有办法强制在尚未获取的本地上添加一个远程分支（所以本地不知道该分支存在于远程上，我会得到错误： &lt;code&gt;the requested upstream branch 'origin/remotebranchname' does not exist&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="462d440c03124462db7fb625dec6df8826bb4e8a" translate="yes" xml:space="preserve">
          <source>In the end I managed to add the new, previously unknown remote branch (without fetching) by adding a new head file at &lt;code&gt;.git/refs/remotes/origin/remotebranchname&lt;/code&gt; and then copying the ref (eyeballing was quickest, lame as it was ;-) from the system with access to the origin repo to the workstation (with the local repo where I was adding the remote branch on).</source>
          <target state="translated">最后，我设法通过在 &lt;code&gt;.git/refs/remotes/origin/remotebranchname&lt;/code&gt; 处添加一个新的头文件，然后复制ref（眼球运动最快，很， 脚 ）来添加以前未知的新远程分支（不进行获取）。 -）从具有原始仓库访问权限的系统到工作站（以及我在其中添加远程分支的本地仓库）。</target>
        </trans-unit>
        <trans-unit id="f53b845e511550d070f01e7e1e45f0c6618de79e" translate="yes" xml:space="preserve">
          <source>In very short</source>
          <target state="translated">很短的时间内</target>
        </trans-unit>
        <trans-unit id="05302f87a14f905f4a86d0e207c7e56b341d8ba2" translate="yes" xml:space="preserve">
          <source>It was tempting to say &lt;code&gt;git branch --set-upstream origin/master&lt;/code&gt;, but that tells Git to arrange the local branch &quot;origin/master&quot; to integrate with the currently checked out branch, which is highly unlikely what the user meant. The option is deprecated; use the new &lt;code&gt;--set-upstream-to&lt;/code&gt; (with a short-and-sweet &lt;code&gt;-u&lt;/code&gt;) option instead.</source>
          <target state="translated">说 &lt;code&gt;git branch --set-upstream origin/master&lt;/code&gt; 很诱人，但是这告诉Git安排本地分支&amp;ldquo; origin / master&amp;rdquo;与当前已签出的分支集成，这在用户看来是不太可能的。 该选项已弃用； 而是使用新的 &lt;code&gt;--set-upstream-to&lt;/code&gt; （带有简短的 &lt;code&gt;-u&lt;/code&gt; ）选项。</target>
        </trans-unit>
        <trans-unit id="b799f710e3cbfced4c1fd7ef72071e420af6e178" translate="yes" xml:space="preserve">
          <source>It's also nice to know this, it shows which branches are tracked and which ones are not. :</source>
          <target state="translated">知道这个也很好,它可以显示出哪些分支被跟踪,哪些没有被跟踪。</target>
        </trans-unit>
        <trans-unit id="6d356b5df8bcd562e073fb3ae1eda5377cc94447" translate="yes" xml:space="preserve">
          <source>Local branch &quot;master&quot; tracking to origin/master</source>
          <target state="translated">本地分支 &quot;主 &quot;跟踪到原点主</target>
        </trans-unit>
        <trans-unit id="00f51740ea72a02fb8d8af6110b403ae990e6b1f" translate="yes" xml:space="preserve">
          <source>Make an existing Git branch track a remote branch</source>
          <target state="translated">让现有的Git分支跟踪一个远程分支</target>
        </trans-unit>
        <trans-unit id="2ccbad05c62ba32c83196aab71a10e0362219a5f" translate="yes" xml:space="preserve">
          <source>Make sure you run :</source>
          <target state="translated">确保你运行。</target>
        </trans-unit>
        <trans-unit id="66bab0c98d290677deb6c8acd58f8e2b5f407bc6" translate="yes" xml:space="preserve">
          <source>N.B  : &lt;strong&gt;nameOfRemoteBranch&lt;/strong&gt; : to copy from the output of step 2 &quot; git branch -r &quot;</source>
          <target state="translated">注意： &lt;strong&gt;nameOfRemoteBranch&lt;/strong&gt; ：从步骤2&amp;ldquo; git branch -r&amp;rdquo;的输出中复制</target>
        </trans-unit>
        <trans-unit id="29f9639908414a74a4edad675ae8f24e470a7b3c" translate="yes" xml:space="preserve">
          <source>Note, if &lt;code&gt;origin/$BRANCH&lt;/code&gt; doesn't exist yet, you can create it by pushing your local &lt;code&gt;$BRANCH&lt;/code&gt; into the remote repository with:</source>
          <target state="translated">注意，如果 &lt;code&gt;origin/$BRANCH&lt;/code&gt; 还不存在，则可以通过以下方式将本地 &lt;code&gt;$BRANCH&lt;/code&gt; 推送到远程存储库中来创建它：</target>
        </trans-unit>
        <trans-unit id="529f488f6e873a71dda5779d1f7a474fc188e0f7" translate="yes" xml:space="preserve">
          <source>Now configure master to know to track:</source>
          <target state="translated">现在配置主知道跟踪。</target>
        </trans-unit>
        <trans-unit id="933ec7d113daad37e95ca09a6904dfab16f01e47" translate="yes" xml:space="preserve">
          <source>Once that was done, I could then use &lt;code&gt;git branch --set-upstream-to=origin/remotebranchname&lt;/code&gt;</source>
          <target state="translated">完成后，我可以使用 &lt;code&gt;git branch --set-upstream-to=origin/remotebranchname&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="df34f97b12e0fd56d969206822b6e99cba06feec" translate="yes" xml:space="preserve">
          <source>Or, if local branch &lt;code&gt;foo&lt;/code&gt; is not the current branch:</source>
          <target state="translated">或者，如果本地分支 &lt;code&gt;foo&lt;/code&gt; 不是当前分支：</target>
        </trans-unit>
        <trans-unit id="61e6ab3fc612ba1e4e733350605fd490819090e5" translate="yes" xml:space="preserve">
          <source>Or, if you like to type longer commands, these are equivalent to the above two:</source>
          <target state="translated">或者,如果你喜欢输入较长的命令,这些命令相当于上面两个。</target>
        </trans-unit>
        <trans-unit id="00fcdda14949d42c1610edfba9ca80d41d59564f" translate="yes" xml:space="preserve">
          <source>Or:</source>
          <target state="translated">Or:</target>
        </trans-unit>
        <trans-unit id="f3965055988300dc2fbaf1b90f068e8d50005512" translate="yes" xml:space="preserve">
          <source>Remote branch &quot;upstream&quot; tracking to upstream/master</source>
          <target state="translated">远程分支的 &quot;上游 &quot;追踪到上游master</target>
        </trans-unit>
        <trans-unit id="d80da71ef6a53a2b3b9d799788c11cadd9e1b197" translate="yes" xml:space="preserve">
          <source>Say you have a local &lt;code&gt;foo&lt;/code&gt; branch and want it to treat the branch by the same name as its upstream. Make this happen with</source>
          <target state="translated">假设您有一个本地 &lt;code&gt;foo&lt;/code&gt; 分支，并希望它以与上游相同的名称对待该分支。 做到这一点与</target>
        </trans-unit>
        <trans-unit id="b4cde6939df09f2ddec842ed70f18f90347d975a" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;https://stackoverflow.com/q/6089294/95706&quot;&gt;Why do I need to do `--set-upstream` all the time?&lt;/a&gt;</source>
          <target state="translated">另请参阅： &lt;a href=&quot;https://stackoverflow.com/q/6089294/95706&quot;&gt;为什么我总是需要执行--set-upstream？&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d4936024bfd619e1b0b870c278b0a034d9d392f4" translate="yes" xml:space="preserve">
          <source>See? Now if you just checkout develp, it will do the magic automatically:</source>
          <target state="translated">看到了吗?现在,如果你只需结账,它就会自动完成魔法。</target>
        </trans-unit>
        <trans-unit id="4a204b928a126245e388bf33bf80315eba204ed5" translate="yes" xml:space="preserve">
          <source>Set up the 'remote' if you don't have it already</source>
          <target state="translated">如果你还没有设置 &quot;远程&quot;,请设置 &quot;远程&quot;。</target>
        </trans-unit>
        <trans-unit id="e26ba0e6397a9558ba3f8bccac20444cbef58e3f" translate="yes" xml:space="preserve">
          <source>So easy!</source>
          <target state="translated">太简单了!</target>
        </trans-unit>
        <trans-unit id="a79459df856bb066d8bfcab0e76661da61c2841a" translate="yes" xml:space="preserve">
          <source>That will cause Git to make &lt;code&gt;foo&lt;/code&gt; track &lt;code&gt;upstream/foo&lt;/code&gt;.</source>
          <target state="translated">这将导致Git使 &lt;code&gt;foo&lt;/code&gt; 跟踪 &lt;code&gt;upstream/foo&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f7b4c79027644b6a4c30b978e020db879e1f2a88" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;git-branch&lt;/code&gt; command also understands &lt;code&gt;--set-upstream&lt;/code&gt;, but its use can be confusing. &lt;a href=&quot;https://lkml.org/lkml/2012/10/1/419&quot;&gt;Version 1.8.0&lt;/a&gt; modifies the interface.</source>
          <target state="translated">&lt;code&gt;git-branch&lt;/code&gt; 命令也理解 &lt;code&gt;--set-upstream&lt;/code&gt; ，但是它的使用可能会造成混淆。 &lt;a href=&quot;https://lkml.org/lkml/2012/10/1/419&quot;&gt;版本1.8.0&lt;/a&gt;修改了界面。</target>
        </trans-unit>
        <trans-unit id="6387e46bb3c7e772fcbf63e6a37c25a7ba3cf61a" translate="yes" xml:space="preserve">
          <source>The equivalent long option is &lt;code&gt;--set-upstream&lt;/code&gt;.</source>
          <target state="translated">等效的long选项是 &lt;code&gt;--set-upstream&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b66059c6f5d98121c331e037cd7c2a6cf65d71a1" translate="yes" xml:space="preserve">
          <source>The old (1.7.x) syntax is deprecated in favor of the new (1.8+) syntax.  The new syntax is intended to be more intuitive and easier to remember.</source>
          <target state="translated">旧的 (1.7.x)语法被淘汰,改用新的 (1.8+)语法。新的语法是为了更直观,更容易记忆。</target>
        </trans-unit>
        <trans-unit id="a0f2867a42c6c057921cd23d5346d5a8d7bcd3fb" translate="yes" xml:space="preserve">
          <source>There are, of course, ways to automatically track a remote branch when using &lt;code&gt;git checkout&lt;/code&gt; (by passing the &lt;code&gt;--track&lt;/code&gt; flag, for example), but these commands work with &lt;em&gt;new&lt;/em&gt; branches, not existing ones.</source>
          <target state="translated">当然，有多种方法可以在使用 &lt;code&gt;git checkout&lt;/code&gt; 时自动跟踪远程分支（例如，通过传递 &lt;code&gt;--track&lt;/code&gt; 标志），但是这些命令适用于&lt;em&gt;新&lt;/em&gt;分支，而不适用于现有分支。</target>
        </trans-unit>
        <trans-unit id="e84de129bbca35e65e9ac505e6ff4dc4dcac71d6" translate="yes" xml:space="preserve">
          <source>This gives more sane behaviour:</source>
          <target state="translated">这让人的行为更加理智。</target>
        </trans-unit>
        <trans-unit id="0b995568463f4971fed4b1422424fe7c08535f9a" translate="yes" xml:space="preserve">
          <source>This isn't a direct answer to this question, but I wanted to leave a note here for anyone who may be having the same issue as me when trying to configure an upstream branch.</source>
          <target state="translated">这并不是这个问题的直接答案,但我想在这里留下一个说明,让那些可能和我一样遇到同样问题的人,在尝试配置上游分支时也能得到同样的答案。</target>
        </trans-unit>
        <trans-unit id="d7311476a8098f1797ecc6c43a61a8bb34741608" translate="yes" xml:space="preserve">
          <source>This recreates &lt;code&gt;$BRANCH&lt;/code&gt; as a tracking branch. The &lt;code&gt;-f&lt;/code&gt; forces the creation despite &lt;code&gt;$BRANCH&lt;/code&gt; existing already. &lt;code&gt;--track&lt;/code&gt; is optional if the usual defaults are in place (that is, the git-config parameter &lt;code&gt;branch.autosetupmerge&lt;/code&gt; is true).</source>
          <target state="translated">这会将 &lt;code&gt;$BRANCH&lt;/code&gt; 重新创建为跟踪分支。 &lt;code&gt;-f&lt;/code&gt; 强制创建，尽管 &lt;code&gt;$BRANCH&lt;/code&gt; 已经存在。 如果使用常规的默认设置（即git-config参数 &lt;code&gt;branch.autosetupmerge&lt;/code&gt; 为true），则 &lt;code&gt;--track&lt;/code&gt; 是可选的。</target>
        </trans-unit>
        <trans-unit id="ae49e546b88fe88acca4ef2b50b9f15229e3218c" translate="yes" xml:space="preserve">
          <source>This will make your &lt;code&gt;yourLocalBranchName&lt;/code&gt; track the remote branch called &lt;code&gt;develop&lt;/code&gt;.</source>
          <target state="translated">这将使 &lt;code&gt;yourLocalBranchName&lt;/code&gt; 跟踪名为 &lt;code&gt;develop&lt;/code&gt; 的远程分支。</target>
        </trans-unit>
        <trans-unit id="0d32f9a9382f48a6d19239851b495720724a3bdb" translate="yes" xml:space="preserve">
          <source>This would work too</source>
          <target state="translated">这样也可以</target>
        </trans-unit>
        <trans-unit id="563637c6d22e162b5c871cc1e4e6531e5b834b5e" translate="yes" xml:space="preserve">
          <source>Use '--track' Option</source>
          <target state="translated">使用'-轨道'选项</target>
        </trans-unit>
        <trans-unit id="3f0bfb586bf06f6235522841ca0a7a8a2dde08e1" translate="yes" xml:space="preserve">
          <source>With older git versions, the default was &lt;strong&gt;matching&lt;/strong&gt;, which would cause very undesirable behaviour if you have, for example:</source>
          <target state="translated">在较旧的git版本中，默认设置为&lt;strong&gt;match&lt;/strong&gt; ，如果您使用git，则会导致非常不理想的行为，例如：</target>
        </trans-unit>
        <trans-unit id="9583047ed9434c4e943f50bd6e12800bf911811f" translate="yes" xml:space="preserve">
          <source>You can alawys take a look at the config file to see what is tracking what by running:</source>
          <target state="translated">你可以看一下配置文件,看看是什么在追踪什么。</target>
        </trans-unit>
        <trans-unit id="2c3b4c0fea4aeda6e9542f82aea0d06fbfc3dfaa" translate="yes" xml:space="preserve">
          <source>You can do the following (assuming you are checked out on master and want to push to a remote branch master):</source>
          <target state="translated">你可以进行以下操作(假设你是在主站退房,想推送到远程分支主站)。</target>
        </trans-unit>
        <trans-unit id="c3f64509db14d527ff170454ee0a83f43c1c46e7" translate="yes" xml:space="preserve">
          <source>You might find the &lt;a href=&quot;http://github.com/webmat/git_remote_branch&quot;&gt;&lt;code&gt;git_remote_branch&lt;/code&gt;&lt;/a&gt; tool useful. It offers simple commands for creating, publishing, deleting, tracking &amp;amp; renaming remote branches. One nice feature is that you can ask a &lt;code&gt;grb&lt;/code&gt; command to explain what git commands it would execute.</source>
          <target state="translated">您可能会发现&lt;a href=&quot;http://github.com/webmat/git_remote_branch&quot;&gt; &lt;code&gt;git_remote_branch&lt;/code&gt; &lt;/a&gt;工具很有用。 它提供了用于创建，发布，删除，跟踪和重命名远程分支的简单命令。 一个不错的功能是，您可以要求使用 &lt;code&gt;grb&lt;/code&gt; 命令来说明它将执行什么git命令。</target>
        </trans-unit>
        <trans-unit id="f7e0d4847cf0176cba2ee7045931cd1d79c23b94" translate="yes" xml:space="preserve">
          <source>and you ready to :</source>
          <target state="translated">而你准备好了。</target>
        </trans-unit>
        <trans-unit id="e7b1d047edc1809bb7dbf8cc79f2d3ce8f874732" translate="yes" xml:space="preserve">
          <source>example :</source>
          <target state="translated">例子</target>
        </trans-unit>
        <trans-unit id="ef5ebc5c0db8738f4357d0bb610b0e0308c2ad8a" translate="yes" xml:space="preserve">
          <source>git config --global push.default upstream</source>
          <target state="translated">git config ---global push.default upstream</target>
        </trans-unit>
        <trans-unit id="9b19ed69b186a563ad451d736069071d1743c389" translate="yes" xml:space="preserve">
          <source>or just</source>
          <target state="translated">或只是</target>
        </trans-unit>
        <trans-unit id="c1e14de5ae9ca54bb13ccd7013e8619322d10300" translate="yes" xml:space="preserve">
          <source>or simply by  :</source>
          <target state="translated">或简单地说,就是通过</target>
        </trans-unit>
        <trans-unit id="df6ad19037c97987c4ff9792810c0e145356717c" translate="yes" xml:space="preserve">
          <source>run</source>
          <target state="translated">run</target>
        </trans-unit>
        <trans-unit id="d75a2ff31fde3b4120b0e32764c7942c04086559" translate="yes" xml:space="preserve">
          <source>switch to the branch if you are not in it already:</source>
          <target state="translated">如果你还不在其中,请切换到分支。</target>
        </trans-unit>
        <trans-unit id="36f77779ee29601feb5bcf6c85d8104906d70f63" translate="yes" xml:space="preserve">
          <source>to be able to push trouble free</source>
          <target state="translated">得心应手</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
