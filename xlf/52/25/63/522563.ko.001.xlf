<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://stackoverflow.com/questions/522563">
    <body>
      <group id="522563">
        <trans-unit id="f5659f951540bc5603463c73c3fbe704af061ec7" translate="yes" xml:space="preserve">
          <source>1. Using enumerate (&lt;em&gt;considered most idiomatic&lt;/em&gt;)</source>
          <target state="translated">1. 열거 사용 ( &lt;em&gt;가장 관용적 인 것으로 간주 됨&lt;/em&gt; )</target>
        </trans-unit>
        <trans-unit id="235ce63087380364406d19d2ff5c42e831e15d26" translate="yes" xml:space="preserve">
          <source>2. Creating a variable to hold the index (&lt;em&gt;using &lt;code&gt;for&lt;/code&gt;&lt;/em&gt;)</source>
          <target state="translated">2. 색인을 보유 할 변수 작성 ( &lt;em&gt; &lt;code&gt;for&lt;/code&gt; 사용&lt;/em&gt; )</target>
        </trans-unit>
        <trans-unit id="5a8fd903a66ff1b5f503308168e5ffc6285d028c" translate="yes" xml:space="preserve">
          <source>3. Creating a variable to hold the index (&lt;em&gt;using &lt;code&gt;while&lt;/code&gt;&lt;/em&gt;)</source>
          <target state="translated">3. 색인을 보유 할 변수 작성 ( &lt;em&gt; &lt;code&gt;while&lt;/code&gt; 사용&lt;/em&gt; )</target>
        </trans-unit>
        <trans-unit id="2e428d9a00eeeb5c27c6916292288a1031e6030e" translate="yes" xml:space="preserve">
          <source>4. There is always another way</source>
          <target state="translated">4. 항상 다른 방법이 있습니다</target>
        </trans-unit>
        <trans-unit id="631ed686968a23edabffb54726ef80fabbdc832e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/11990105/rangelenlist-or-enumeratelist&quot;&gt;range(len(list)) or enumerate(list)?&lt;/a&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/11990105/rangelenlist-or-enumeratelist&quot;&gt;range (len (list)) 또는 enumerate (list)?&lt;/a&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f745e83795b616fcd5b6051dae1e9dcb13195688" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/4852944/what-is-faster-for-loop-using-enumerate-or-for-loop-using-xrange-in-python&quot;&gt;What is faster for loop using enumerate or for loop using xrange in Python?&lt;/a&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/4852944/what-is-faster-for-loop-using-enumerate-or-for-loop-using-xrange-in-python&quot;&gt;파이썬에서 열거 형을 사용하거나 xrange를 사용하여 for 루프를 사용하는 것이 더 빠릅니까?&lt;/a&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="01a88ec29399c2ac6c31014b519227219001ebb1" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/94935/what-is-the-difference-between-range-and-xrange-functions-in-python-2-x&quot;&gt;What is the difference between range and xrange functions in Python 2.X?&lt;/a&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/94935/what-is-the-difference-between-range-and-xrange-functions-in-python-2-x&quot;&gt;Python 2.X에서 range와 xrange 함수의 차이점은 무엇입니까?&lt;/a&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="05a52fc6849c511bc0c89ee9078d3bb9b38b43ee" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;for i in enumerate(items): print(i)&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;for i in enumerate(items): print(i)&lt;/code&gt; &lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2dcc0a81ea7cc33e16025533e61ef0768d400574" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;for i, val in enumerate(items): print(i)&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;for i, val in enumerate(items): print(i)&lt;/code&gt; &lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="06dcd159a873dc937a8d379d54a4d056ddb842ea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;for i, val in enumerate(items): print(i, val)&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;for i, val in enumerate(items): print(i, val)&lt;/code&gt; &lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8ff483c968632929b930b16095b650468011e28e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;EDIT&lt;/strong&gt;
Highlighted in the comment that this method doesn&amp;rsquo;t work if there are duplicates in &lt;code&gt;ints&lt;/code&gt;, the method below should work for any values in &lt;code&gt;ints&lt;/code&gt;:</source>
          <target state="translated">&lt;strong&gt;편집&lt;/strong&gt; &lt;code&gt;ints&lt;/code&gt; 에 중복이있는 경우이 방법이 작동하지 않는다는 의견에서 강조 표시되면 아래 방법은 &lt;code&gt;ints&lt;/code&gt; 값에 대해 작동해야합니다.</target>
        </trans-unit>
        <trans-unit id="3c470bec149bd96cfdf7cf1e061b790dee2c28a6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;enumerate&lt;/strong&gt; return &lt;strong&gt;tuple&lt;/strong&gt;</source>
          <target state="translated">리턴 &lt;strong&gt;튜플&lt;/strong&gt; &lt;strong&gt;열거&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4d82db5533d2f4fd9d698a77c27c5ccb30c7f3b2" translate="yes" xml:space="preserve">
          <source>Accessing the index in 'for' loops</source>
          <target state="translated">'for'루프에서 인덱스에 액세스</target>
        </trans-unit>
        <trans-unit id="bc9273cdaa1a7dd3a7e732f9a9e3a77308b7f1f4" translate="yes" xml:space="preserve">
          <source>According to this discussion: &lt;a href=&quot;http://bytes.com/topic/python/answers/464012-objects-list-index&quot;&gt;http://bytes.com/topic/python/answers/464012-objects-list-index&lt;/a&gt;</source>
          <target state="translated">이 토론에 따르면 : &lt;a href=&quot;http://bytes.com/topic/python/answers/464012-objects-list-index&quot;&gt;http://bytes.com/topic/python/answers/464012-objects-list-index&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e4b5978216181e8d6bfba8c2dcbeba1c3c0b5fcd" translate="yes" xml:space="preserve">
          <source>Adding some useful links below:</source>
          <target state="translated">아래에 유용한 링크를 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="8ea2032b0d9309613331fcf6a234213892ca0ba0" translate="yes" xml:space="preserve">
          <source>And note that Python's indexes start at zero, so you would get 0 to 4 with the above. If you want the count, 1 to 5, do this:</source>
          <target state="translated">그리고 파이썬의 인덱스는 0에서 시작하므로 위와 같이 0에서 4를 얻습니다. 1에서 5까지의 개수를 원하면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="0b49ae31818e7598ed4dfb5fd79a98fcf43520f2" translate="yes" xml:space="preserve">
          <source>And we see we get a tuple of &lt;code&gt;0&lt;/code&gt;, the first index, and &lt;code&gt;'a'&lt;/code&gt;, the first item:</source>
          <target state="translated">그리고 우리는 첫 번째 인덱스 &lt;code&gt;0&lt;/code&gt; 과 첫 번째 항목 &lt;code&gt;'a'&lt;/code&gt; 의 튜플을 얻습니다.</target>
        </trans-unit>
        <trans-unit id="ef948caecf39a0f0936a16dce327c7282c2d1e40" translate="yes" xml:space="preserve">
          <source>As explained before, there are other ways to do this that have not been explained here and they may even apply more in other situations. &lt;em&gt;e.g&lt;/em&gt; using &lt;code&gt;itertools.chain&lt;/code&gt; with for. It handles nested loops better than the other examples.</source>
          <target state="translated">앞에서 설명한 것처럼 여기에 설명되지 않은 다른 방법이 있으며 다른 상황에서도 더 많이 적용될 수 있습니다. &lt;em&gt;예&lt;/em&gt; 를 &lt;em&gt;들어&lt;/em&gt; &lt;code&gt;itertools.chain&lt;/code&gt; 을 for와 함께 사용하십시오. 다른 예제보다 중첩 루프를 더 잘 처리합니다.</target>
        </trans-unit>
        <trans-unit id="62d6861779094cf1dff833b8fd41fd3858c503b4" translate="yes" xml:space="preserve">
          <source>As is the norm in Python there are several ways to do this. In all examples assume: &lt;code&gt;lst = [1, 2, 3, 4, 5]&lt;/code&gt;</source>
          <target state="translated">파이썬의 표준과 마찬가지로 이것을 수행하는 몇 가지 방법이 있습니다. 모든 예에서 다음을 가정합니다 : &lt;code&gt;lst = [1, 2, 3, 4, 5]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e19ada2c0961fe9062a224a2246ca5e9757ba3fa" translate="yes" xml:space="preserve">
          <source>As the result, using &lt;code&gt;range&lt;/code&gt; method is the fastest one up to list with 1000 items. For list with size &amp;gt; 10 000 items &lt;code&gt;enumerate&lt;/code&gt; is the winner.</source>
          <target state="translated">결과적으로 &lt;code&gt;range&lt;/code&gt; 방법을 사용하는 것이 1000 개의 항목을 나열하는 것 중 가장 빠릅니다. 크기가 10 000보다 큰 목록의 경우 &lt;code&gt;enumerate&lt;/code&gt; 가 승자입니다.</target>
        </trans-unit>
        <trans-unit id="008dfbbaaa4393c7fa0b99d6683bd766d52c99a3" translate="yes" xml:space="preserve">
          <source>Best solution for this problem is use &lt;strong&gt;enumerate&lt;/strong&gt; in-build python function.</source>
          <target state="translated">이 문제에 대한 최선의 해결책은 &lt;strong&gt;열거 형&lt;/strong&gt; 파이썬 함수를 사용하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="18036edf4b77d3774747f5a733d5bdda96841fba" translate="yes" xml:space="preserve">
          <source>Breaking it down - a step by step explanation</source>
          <target state="translated">세분화-단계별 설명</target>
        </trans-unit>
        <trans-unit id="3b868e5ff21600f1de0e24b148f0cf3b1690d0a7" translate="yes" xml:space="preserve">
          <source>Check out &lt;a href=&quot;https://www.python.org/dev/peps/pep-0279/&quot;&gt;PEP 279&lt;/a&gt; for more.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;https://www.python.org/dev/peps/pep-0279/&quot;&gt;PEP 279&lt;/a&gt; 를 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="e39262defe80a83fac1b793497417432c8b1a879" translate="yes" xml:space="preserve">
          <source>Conclusion</source>
          <target state="translated">Conclusion</target>
        </trans-unit>
        <trans-unit id="403b6bd21aeee67349d70e3fa2c8b35ed877b6e2" translate="yes" xml:space="preserve">
          <source>Even if you don't need indexes as you go, but you need a count of the iterations (sometimes desirable) you can start with &lt;code&gt;1&lt;/code&gt; and the final number will be your count.</source>
          <target state="translated">인덱스를 필요로하지 않아도 반복 횟수가 필요하지만 (때로는 원할 경우) &lt;code&gt;1&lt;/code&gt; 부터 시작할 수 있으며 최종 숫자는 카운트가됩니다.</target>
        </trans-unit>
        <trans-unit id="8988bf3f69022a45727eac5ee717b81349a2df8c" translate="yes" xml:space="preserve">
          <source>First of all, the indexes will be from 0 to 4. Programming languages start counting from 0; don't forget that or you will come across an index out of bounds exception. All you need in the for loop is a variable counting from 0 to 4 like so:</source>
          <target state="translated">우선, 인덱스는 0부터 4까지입니다. 프로그래밍 언어는 0부터 카운트를 시작합니다. 잊지 마십시오. 또는 범위를 벗어난 색인 예외가 발생합니다. for 루프에서 필요한 것은 다음과 같이 0에서 4까지의 계수입니다.</target>
        </trans-unit>
        <trans-unit id="5e668a82f2c71df0f0d99a3757004e5a08c3aa58" translate="yes" xml:space="preserve">
          <source>First, to clarify, the &lt;code&gt;enumerate&lt;/code&gt; function iteratively returns the index and corresponding item for each item in a list.</source>
          <target state="translated">먼저 &lt;code&gt;enumerate&lt;/code&gt; 함수는 목록의 각 항목에 대한 색인과 해당 항목을 반복적으로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="c21e4770e68eeec1014df7fc95c186a909162b1b" translate="yes" xml:space="preserve">
          <source>Getting a count</source>
          <target state="translated">카운트하기</target>
        </trans-unit>
        <trans-unit id="05d913a1b4569cf7170cb0ee3a9575380b5162b9" translate="yes" xml:space="preserve">
          <source>Here's what you get when you're accessing index in &lt;code&gt;for&lt;/code&gt; loops:</source>
          <target state="translated">&lt;code&gt;for&lt;/code&gt; 루프에서 인덱스에 액세스 할 때 얻을 수있는 내용은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="238d10339da2180d5c07cfcfee16dc61db79e19c" translate="yes" xml:space="preserve">
          <source>How do I access the index in a &lt;code&gt;for&lt;/code&gt; loop like the following?</source>
          <target state="translated">다음과 같은 &lt;code&gt;for&lt;/code&gt; 루프에서 인덱스에 어떻게 액세스합니까?</target>
        </trans-unit>
        <trans-unit id="9091d401bec11b78947c586dc65ddc7d0307986e" translate="yes" xml:space="preserve">
          <source>However, the index for a list runs from zero.  So, then we need to know if what you actually want is the index and item for each item in a list, or whether you really want numbers starting from 1.  Fortunately, in Python, it is easy to do either or both.</source>
          <target state="translated">그러나 목록의 인덱스는 0부터 실행됩니다. 따라서 실제로 원하는 것이 목록의 각 항목에 대한 인덱스 및 항목인지 또는 1부터 시작하여 숫자를 원하는지 여부를 알아야합니다. 다행히 파이썬에서는 두 가지 중 하나 또는 모두를 수행하는 것이 쉽습니다.</target>
        </trans-unit>
        <trans-unit id="879f6a7887962a5f79d424fb68a4de137173f815" translate="yes" xml:space="preserve">
          <source>I want to get this output:</source>
          <target state="translated">이 출력을 얻고 싶습니다 :</target>
        </trans-unit>
        <trans-unit id="4b55e201130ca7562b47da4d1754e8112870683d" translate="yes" xml:space="preserve">
          <source>If I were to iterate &lt;code&gt;nums = [1, 2, 3, 4, 5]&lt;/code&gt; I would do</source>
          <target state="translated">&lt;code&gt;nums = [1, 2, 3, 4, 5]&lt;/code&gt; 를 반복한다면</target>
        </trans-unit>
        <trans-unit id="fb7c9e1c651d5892981dbae3c6a0d7bcc29a12b6" translate="yes" xml:space="preserve">
          <source>If there is no duplicate value in the list:</source>
          <target state="translated">목록에 중복 값이없는 경우 :</target>
        </trans-unit>
        <trans-unit id="88894a5508ef6b5450e43b42bdce69cec5f69e24" translate="yes" xml:space="preserve">
          <source>If you want your loop to span a part of the list, you can use the standard Python syntax for a part of the list. For example, to loop from the second item in a list up to but not including the last item, you could use</source>
          <target state="translated">루프를 목록의 일부로 확장하려면 목록의 일부에 표준 Python 구문을 사용할 수 있습니다. 예를 들어 목록의 두 번째 항목에서 마지막 항목까지는 반복하지 않으려면 다음을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9982401e31222a7d599f871341ea9ac3365d0f8e" translate="yes" xml:space="preserve">
          <source>Important hint, though a little misleading since &lt;code&gt;index&lt;/code&gt; will be a &lt;code&gt;tuple&lt;/code&gt;&lt;code&gt;(idx, item)&lt;/code&gt; here.
Good to go.</source>
          <target state="translated">&lt;code&gt;index&lt;/code&gt; 가 &lt;code&gt;tuple&lt;/code&gt; &lt;code&gt;(idx, item)&lt;/code&gt; 이기 때문에 약간의 오해의 소지가 있지만 중요한 힌트입니다. 잘가요</target>
        </trans-unit>
        <trans-unit id="442ca59f4ca9d0effee5eb4ca966f4c44f248aac" translate="yes" xml:space="preserve">
          <source>In your question, you write &lt;em&gt;&quot;how do I access the loop index, from 1 to 5 in this case?&quot;&lt;/em&gt;</source>
          <target state="translated">귀하의 질문에, &lt;em&gt;&quot;이 경우 1에서 5까지 루프 인덱스에 어떻게 액세스합니까?&quot;라고&lt;/em&gt; 씁니다.</target>
        </trans-unit>
        <trans-unit id="174c6420785ceec6a2f5ff14d03833c455fae2a5" translate="yes" xml:space="preserve">
          <source>It uses the method of &lt;code&gt;enumerate&lt;/code&gt; in the selected answer to this question, but with list comprehension, making it faster with less code.</source>
          <target state="translated">이 질문에 대한 선택된 답변에 &lt;code&gt;enumerate&lt;/code&gt; 방법을 사용하지만 목록 이해력이있어 코드가 적을수록 더 빠릅니다.</target>
        </trans-unit>
        <trans-unit id="b480f3bde3855166ee8c17215c422cfd27cb8fe3" translate="yes" xml:space="preserve">
          <source>It's pretty simple to start it from &lt;code&gt;1&lt;/code&gt; other than &lt;code&gt;0&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;0&lt;/code&gt; 이외의 &lt;code&gt;1&lt;/code&gt; 에서 시작하는 것은 매우 간단합니다.</target>
        </trans-unit>
        <trans-unit id="7a10d4ae3310ae0d92985e7ad4adffe66d449aee" translate="yes" xml:space="preserve">
          <source>Keep in mind that I wrote 0 to 5 because the loop stops one number before the max. :)</source>
          <target state="translated">루프가 최대 값보다 한 번호 앞을 멈추기 때문에 0에서 5까지 썼음을 명심하십시오. :)</target>
        </trans-unit>
        <trans-unit id="e4d1d426dc3dc875bb0d9245432f5dd5db4d15b5" translate="yes" xml:space="preserve">
          <source>List comprehension:</source>
          <target state="translated">목록 이해 :</target>
        </trans-unit>
        <trans-unit id="a9fdc52ee369f02d9960a5f4e7a2a78dd41fdb1d" translate="yes" xml:space="preserve">
          <source>Loop counter iteration</source>
          <target state="translated">루프 카운터 반복</target>
        </trans-unit>
        <trans-unit id="fb4691ebc50abdcb831b7e2ad7ca6e649683442c" translate="yes" xml:space="preserve">
          <source>Looping over both elements and indices can be achieved either by the old idiom or by using the new &lt;code&gt;zip&lt;/code&gt; built-in function:</source>
          <target state="translated">구식 관용구 또는 새로운 &lt;code&gt;zip&lt;/code&gt; 내장 함수를 사용하여 요소와 색인을 모두 반복 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2c924e3088204ee77ba681f72be3444357932fca" translate="yes" xml:space="preserve">
          <source>Note</source>
          <target state="translated">Note</target>
        </trans-unit>
        <trans-unit id="70b01ede04b89513eb7eab874a1326a3d2136861" translate="yes" xml:space="preserve">
          <source>Note that once again, the output index runs from 0,</source>
          <target state="translated">다시 한번, 출력 인덱스는 0부터 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="cf76f54e6a2c8fda4c2408971263a298fc9f73b9" translate="yes" xml:space="preserve">
          <source>Notice that the index runs from 0. This kind of indexing is common among modern programming languages including Python and C.</source>
          <target state="translated">인덱스는 0에서 시작합니다. 이러한 종류의 인덱싱은 Python 및 C를 포함한 최신 프로그래밍 언어에서 일반적입니다.</target>
        </trans-unit>
        <trans-unit id="de8354287d16f859c00cf238545ca819adf4ee68" translate="yes" xml:space="preserve">
          <source>Now we pass this iterable to enumerate, creating an enumerate object:</source>
          <target state="translated">이제이 iterable을 전달하여 열거 객체를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="75e44a72a864869d2706f0267f255238fadf813c" translate="yes" xml:space="preserve">
          <source>Old fashioned way:</source>
          <target state="translated">구식 방법 :</target>
        </trans-unit>
        <trans-unit id="3158942ab311de63ffb8dce299b6e4150a1eb39c" translate="yes" xml:space="preserve">
          <source>Or alternatively</source>
          <target state="translated">또는 대안으로</target>
        </trans-unit>
        <trans-unit id="8f99c8ee53c5c57207c4a501757ecd22c98b158f" translate="yes" xml:space="preserve">
          <source>Or get the length as &lt;code&gt;l = len(nums)&lt;/code&gt;</source>
          <target state="translated">또는 길이를 &lt;code&gt;l = len(nums)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="aea621c2783348102b802e0f3f06d0065ca47192" translate="yes" xml:space="preserve">
          <source>Or in languages that do not have a for-each loop:</source>
          <target state="translated">또는 for-each 루프가없는 언어로 :</target>
        </trans-unit>
        <trans-unit id="f3c8c95c5e534bcd2ea0034a0d83177efa6923f4" translate="yes" xml:space="preserve">
          <source>Output:</source>
          <target state="translated">Output:</target>
        </trans-unit>
        <trans-unit id="58b5be0bff4803cb394a82b7bf256098bed71bdb" translate="yes" xml:space="preserve">
          <source>Please see &lt;strong&gt;different approaches&lt;/strong&gt; which can be used to iterate over list and access index value and &lt;strong&gt;their performance metrics&lt;/strong&gt; (which I suppose would be useful for you) in code samples below:</source>
          <target state="translated">아래 코드 샘플에서 목록 및 액세스 인덱스 값과 &lt;strong&gt;해당 성능 메트릭&lt;/strong&gt; (여러분에게 유용 할 것으로 예상 됨)을 반복하는 데 사용할 수있는 &lt;strong&gt;다양한 접근 방법&lt;/strong&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="65522ec33b9b3c8dd2ce536d98f4de99c10e5f41" translate="yes" xml:space="preserve">
          <source>Python indexes start at zero</source>
          <target state="translated">파이썬 인덱스는 0에서 시작</target>
        </trans-unit>
        <trans-unit id="8a3dba8e43519a05dbbf3051775e3d21bd473ae2" translate="yes" xml:space="preserve">
          <source>Python's &lt;a href=&quot;https://docs.python.org/2/library/functions.html#enumerate&quot;&gt;&lt;code&gt;enumerate&lt;/code&gt; function&lt;/a&gt; reduces the visual clutter by hiding the accounting for the indexes, and encapsulating the iterable into another iterable (an &lt;code&gt;enumerate&lt;/code&gt; object) that yields a two-item tuple of the index and the item that the original iterable would provide. That looks like this:</source>
          <target state="translated">Python의 &lt;a href=&quot;https://docs.python.org/2/library/functions.html#enumerate&quot;&gt; &lt;code&gt;enumerate&lt;/code&gt; 함수&lt;/a&gt; 는 인덱스에 대한 설명을 숨기고 iterable을 다른 iterable ( &lt;code&gt;enumerate&lt;/code&gt; 객체)로 캡슐화하여 인덱스의 두 항목 튜플과 원래 iterable이 제공 할 항목을 생성합니다. 이것은 다음과 같습니다</target>
        </trans-unit>
        <trans-unit id="bd4afc0073cac79bf136f8e1d922b83f76e969ad" translate="yes" xml:space="preserve">
          <source>Result:</source>
          <target state="translated">Result:</target>
        </trans-unit>
        <trans-unit id="92bb2163f6b9152909286271a0efc60115876349" translate="yes" xml:space="preserve">
          <source>See performance metrics for each method below:</source>
          <target state="translated">아래의 각 방법에 대한 성능 지표를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="5816289b4203da6a109c74174b3df67255ef58c6" translate="yes" xml:space="preserve">
          <source>So do this:</source>
          <target state="translated">이렇게하십시오 :</target>
        </trans-unit>
        <trans-unit id="51f036c0a194c1c7f1227381ba329dfcf71fffda" translate="yes" xml:space="preserve">
          <source>That brings us to the &lt;code&gt;start=n&lt;/code&gt; switch for &lt;code&gt;enumerate()&lt;/code&gt;.  This simply offsets the index, you can equivalently simply add a number to the index inside the loop.</source>
          <target state="translated">그러면 &lt;code&gt;enumerate()&lt;/code&gt; 대한 &lt;code&gt;start=n&lt;/code&gt; 스위치가 나타납니다. 이것은 단순히 인덱스를 상쇄하므로 루프 내부의 인덱스에 숫자를 간단히 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="524f2064743dced6287d82abe02a8b7de82158da" translate="yes" xml:space="preserve">
          <source>The better option is to use the built-in function &lt;a href=&quot;https://docs.python.org/3/library/functions.html#enumerate&quot;&gt;&lt;code&gt;enumerate()&lt;/code&gt;&lt;/a&gt;, available in both Python 2 and 3:</source>
          <target state="translated">더 나은 옵션은 내장 함수 &lt;a href=&quot;https://docs.python.org/3/library/functions.html#enumerate&quot;&gt; &lt;code&gt;enumerate()&lt;/code&gt; &lt;/a&gt; 를 사용하는 것입니다. 파이썬 2와 3에서 모두 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="72666f635de9ba88d8bbf499bb869cc9139a2fbb" translate="yes" xml:space="preserve">
          <source>The count seems to be more what you intend to ask for (as opposed to index) when you said you wanted from 1 to 5.</source>
          <target state="translated">1에서 5까지를 원한다고 말했을 때 (인수가 아닌) 요청하려는 것보다 더 많은 것으로 보입니다.</target>
        </trans-unit>
        <trans-unit id="5889a239b2fdbf2fd38b22843ceba2fc4ca42a8d" translate="yes" xml:space="preserve">
          <source>The current idiom for looping over the indices makes use of the built-in &lt;code&gt;range&lt;/code&gt; function:</source>
          <target state="translated">인덱스를 반복하는 현재 관용구는 내장 &lt;code&gt;range&lt;/code&gt; 기능을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="1d9b3a20118dc5079fc11404e3400e342863b7fc" translate="yes" xml:space="preserve">
          <source>The fastest way to access indexes of list within loop in &lt;strong&gt;Python 2.7&lt;/strong&gt; is to use the &lt;a href=&quot;https://docs.python.org/2/library/functions.html#range&quot;&gt;range method&lt;/a&gt; for small lists and &lt;a href=&quot;https://docs.python.org/2/library/functions.html#enumerate&quot;&gt;enumerate method&lt;/a&gt; for medium and huge size lists.</source>
          <target state="translated">&lt;strong&gt;Python 2.7&lt;/strong&gt; 에서 루프 내의 목록 색인에 액세스하는 가장 빠른 &lt;a href=&quot;https://docs.python.org/2/library/functions.html#range&quot;&gt;방법&lt;/a&gt; 은 작은 목록에 범위 방법 을 사용하고 중간 및 큰 크기 목록에 대해 &lt;a href=&quot;https://docs.python.org/2/library/functions.html#enumerate&quot;&gt;방법&lt;/a&gt; 을 열거하는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="3d331254940942c3ce3c8b67df9ca2d6d1577a21" translate="yes" xml:space="preserve">
          <source>The output for the above is then,</source>
          <target state="translated">위의 출력은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c55395401359835a6e3f32b3f23a39a7f4f78ecc" translate="yes" xml:space="preserve">
          <source>The output is</source>
          <target state="translated">출력은</target>
        </trans-unit>
        <trans-unit id="0c3e96daef7d3939249a9c22065d9691ddfda4ad" translate="yes" xml:space="preserve">
          <source>This code sample is fairly well the &lt;a href=&quot;http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html#index-item-2-enumerate&quot;&gt;canonical&lt;/a&gt; example of the difference between code that is idiomatic of Python and code that is not. Idiomatic code is sophisticated (but not complicated) Python, written in the way that it was intended to be used. Idiomatic code is expected by the designers of the language, which means that usually this code is not just more readable, but also more efficient.</source>
          <target state="translated">이 코드 샘플은 파이썬의 관용적 코드와 그렇지 않은 코드의 차이점에 대한 &lt;a href=&quot;http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html#index-item-2-enumerate&quot;&gt;표준&lt;/a&gt; 예입니다. 관용적 코드는 정교하지만 (복잡하지는 않지만) 파이썬으로, 의도 된 방식으로 작성되었습니다. 관용어는 언어 설계자에 의해 예상됩니다. 즉, 일반적으로이 코드는 더 읽기 쉽고 효율적입니다.</target>
        </trans-unit>
        <trans-unit id="8093d66bbb0e512a4835aca412375f8623d5799a" translate="yes" xml:space="preserve">
          <source>This is also the safest option in my opinion because the chance of going into infinite recursion has been eliminated. Both the item and its index are held in variables and there is no need to write any further code
to access the item.</source>
          <target state="translated">무한 재귀로 들어갈 가능성이 없어 졌기 때문에 이것은 또한 내 의견으로는 가장 안전한 옵션입니다. 항목과 해당 색인 모두 변수로 유지되며 항목에 액세스하기 위해 추가 코드를 작성할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="60bf4dd3e992fdce3aa7d016b191eebf627d7772" translate="yes" xml:space="preserve">
          <source>This serves the purpose well enough:</source>
          <target state="translated">이것은 목적을 충분히 제공합니다.</target>
        </trans-unit>
        <trans-unit id="026e437d2f8a925ce37473b9f91f30f19894e93d" translate="yes" xml:space="preserve">
          <source>To break these examples down, say we have a list of items that we want to iterate over with an index:</source>
          <target state="translated">이 예제들을 정리하기 위해 인덱스로 반복하고 싶은 아이템리스트가 있다고 가정 해 봅시다.</target>
        </trans-unit>
        <trans-unit id="2abe0ae19b64824be6eda80ac4fab5075467cb4d" translate="yes" xml:space="preserve">
          <source>To get the value of an index use</source>
          <target state="translated">인덱스 값을 얻으려면</target>
        </trans-unit>
        <trans-unit id="e284e860a431d523434958daed9f3a804089b77f" translate="yes" xml:space="preserve">
          <source>To get these indexes from an iterable as you iterate over it, use the enumerate function</source>
          <target state="translated">반복 할 때 반복 가능한 색인에서 이러한 색인을 가져 오려면 enumerate 함수를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="cdb48f7775fbda0e529c68f861da7702f0a8ad35" translate="yes" xml:space="preserve">
          <source>To print tuple of (index, value) in list comprehension using a &lt;code&gt;for&lt;/code&gt; loop:</source>
          <target state="translated">&lt;code&gt;for&lt;/code&gt; 루프를 사용하여 목록 이해에서 (색인, 값) 튜플을 인쇄하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="212ef0bd801953b3a1e597cda26266942483b3da" translate="yes" xml:space="preserve">
          <source>Unidiomatic control flow</source>
          <target state="translated">단일 제어 흐름</target>
        </trans-unit>
        <trans-unit id="5ad79f66b91e7b335fda65142286bfca021278ba" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;enumerate&lt;/code&gt; to get the index with the element as you iterate:</source>
          <target state="translated">&lt;code&gt;enumerate&lt;/code&gt; 를 사용하여 반복 할 때 요소가있는 색인을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="9c6b0a0c1a00597993f5be006fcc0a53968ed9b4" translate="yes" xml:space="preserve">
          <source>Use the Enumerate Function</source>
          <target state="translated">열거 함수 사용</target>
        </trans-unit>
        <trans-unit id="fb80d04fbfb309698df71468b1d806ceaa1e4548" translate="yes" xml:space="preserve">
          <source>Use this code if you need to reset the index value at the end of the loop:</source>
          <target state="translated">루프 끝에서 색인 값을 재설정해야하는 경우이 코드를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="3280d0ccd6d17e2a6d690f1ddb82a1f52049f6f6" translate="yes" xml:space="preserve">
          <source>Using a for loop, how do I access the loop index, from 1 to 5 in this case?</source>
          <target state="translated">for 루프를 사용하면이 경우 1에서 5까지 루프 인덱스에 어떻게 액세스합니까?</target>
        </trans-unit>
        <trans-unit id="85ddfe9225fbe54e2a59a5b0043cedc452783a83" translate="yes" xml:space="preserve">
          <source>Using an additional state variable, such as an index variable (which you would normally use in languages such as C or PHP), is considered non-pythonic.</source>
          <target state="translated">색인 변수 (예 : C 또는 PHP와 같은 언어에서 일반적으로 사용)와 같은 추가 상태 변수를 사용하는 것은 비피 토닉으로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="a69473264ae887877426044ee94b7be264b5d2ea" translate="yes" xml:space="preserve">
          <source>Using enumerate in the idiomatic way (along with tuple unpacking) creates code that is more readable and maintainable:</source>
          <target state="translated">튜플 압축 풀기와 함께 관용적 방식으로 열거를 사용하면 더 읽기 쉽고 유지 관리가 쉬운 코드가 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="ddbdf96fe188826bd6b92a9e05161275d45b31bd" translate="yes" xml:space="preserve">
          <source>We can pull the first item out of this iterable that we would get in a loop with the &lt;code&gt;next&lt;/code&gt; function:</source>
          <target state="translated">&lt;code&gt;next&lt;/code&gt; 함수를 사용하여 루프에 들어갈 수 있도록 반복 가능한 첫 번째 항목을 가져올 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="97c77715f72ae91df41df5629e449f5f2d9b2b98" translate="yes" xml:space="preserve">
          <source>What you are asking for is the Pythonic equivalent of the following, which is the algorithm most programmers of lower-level languages would use:</source>
          <target state="translated">당신이 요구하는 것은 다음과 같은 Pythonic과 같습니다.이 언어는 대부분의 저급 언어 프로그래머가 사용할 알고리즘입니다.</target>
        </trans-unit>
        <trans-unit id="94e0f3c9a703c64a371b3193c4b6f1168b016a1e" translate="yes" xml:space="preserve">
          <source>When I loop through it using a &lt;code&gt;for&lt;/code&gt; loop, how do I access the loop index, from 1 to 5 in this case?</source>
          <target state="translated">&lt;code&gt;for&lt;/code&gt; 루프를 사용하여 루프 를 반복 할 때이 경우 1에서 5까지 루프 인덱스에 어떻게 액세스합니까?</target>
        </trans-unit>
        <trans-unit id="6f1c53fc630f92c3afe7972bf03db4cc3749c37b" translate="yes" xml:space="preserve">
          <source>You can also try this:</source>
          <target state="translated">당신은 또한 이것을 시도 할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="96464a04d26aaa6c5cd503b3a067dedf8a4bcf92" translate="yes" xml:space="preserve">
          <source>You can do it with this code:</source>
          <target state="translated">이 코드로 할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="979b70181c7544f051bf89f222e2829e927ab0b8" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;index&lt;/code&gt; method</source>
          <target state="translated">당신은 &lt;code&gt;index&lt;/code&gt; 방법을 사용할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="f0310f362baf06ed4045620c0e9924bc3cd3dc91" translate="yes" xml:space="preserve">
          <source>and when we inspect &lt;code&gt;index&lt;/code&gt;, we find it refers to the first index, 0, and &lt;code&gt;item&lt;/code&gt; refers to the first item, &lt;code&gt;'a'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;index&lt;/code&gt; 를 검사 할 때 첫 번째 인덱스 0을 가리키고 &lt;code&gt;item&lt;/code&gt; 은 첫 번째 항목 &lt;code&gt;'a'&lt;/code&gt; 를 찾습니다.</target>
        </trans-unit>
        <trans-unit id="0e198764313a0200376c5af02fcbf44d3ea1bc6a" translate="yes" xml:space="preserve">
          <source>first value is &lt;strong&gt;index&lt;/strong&gt;</source>
          <target state="translated">첫 번째 값은 &lt;strong&gt;인덱스입니다&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4f03b0674e31ec673e906b6c4f313848a6582c69" translate="yes" xml:space="preserve">
          <source>for which the output is</source>
          <target state="translated">출력이있는</target>
        </trans-unit>
        <trans-unit id="5dd1ea7d6bc659478a3ca907c288b312a743812a" translate="yes" xml:space="preserve">
          <source>if you want to get both the index and the value in &lt;code&gt;ints&lt;/code&gt; as a list of tuples.</source>
          <target state="translated">튜플 목록으로 인덱스와 &lt;code&gt;ints&lt;/code&gt; 값을 모두 가져 오려면</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">or</target>
        </trans-unit>
        <trans-unit id="0b1f0cd76597c8d9d0482a22983cfca2515c9edd" translate="yes" xml:space="preserve">
          <source>or sometimes more commonly (but unidiomatically) found in Python:</source>
          <target state="translated">또는 때로는 파이썬에서 더 일반적으로 (그러나 관용적으로) 발견됩니다.</target>
        </trans-unit>
        <trans-unit id="3f0e19612fbdb3ab18629a3b6dd38a86383f06a9" translate="yes" xml:space="preserve">
          <source>second value is &lt;strong&gt;element&lt;/strong&gt; of array at that index</source>
          <target state="translated">두 번째 값은 해당 인덱스의 배열 &lt;strong&gt;요소&lt;/strong&gt; 입니다</target>
        </trans-unit>
        <trans-unit id="6e91c27641dfbd3b74cd7b0a569f8a5dba1a0a4c" translate="yes" xml:space="preserve">
          <source>via &lt;a href=&quot;http://www.python.org/dev/peps/pep-0212/&quot;&gt;http://www.python.org/dev/peps/pep-0212/&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://www.python.org/dev/peps/pep-0212/&quot;&gt;http://www.python.org/dev/peps/pep-0212/&lt;/a&gt; 를 통해</target>
        </trans-unit>
        <trans-unit id="5551edaffbe0160598db33d9d51e96ead15e4bee" translate="yes" xml:space="preserve">
          <source>we can use what is referred to as &quot;&lt;a href=&quot;https://docs.python.org/2/tutorial/datastructures.html#tuples-and-sequences&quot;&gt;sequence unpacking&lt;/a&gt;&quot; to extract the elements from this two-tuple:</source>
          <target state="translated">이 두 튜플에서 요소를 추출하기 위해 &quot; &lt;a href=&quot;https://docs.python.org/2/tutorial/datastructures.html#tuples-and-sequences&quot;&gt;시퀀스 언 패킹&lt;/a&gt; &quot;이라고하는 것을 사용할 수 있습니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
