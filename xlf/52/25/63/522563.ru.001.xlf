<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://stackoverflow.com/questions/522563">
    <body>
      <group id="522563">
        <trans-unit id="f5659f951540bc5603463c73c3fbe704af061ec7" translate="yes" xml:space="preserve">
          <source>1. Using enumerate (&lt;em&gt;considered most idiomatic&lt;/em&gt;)</source>
          <target state="translated">1. Использование перечисления ( &lt;em&gt;считается наиболее идиоматическим&lt;/em&gt; )</target>
        </trans-unit>
        <trans-unit id="235ce63087380364406d19d2ff5c42e831e15d26" translate="yes" xml:space="preserve">
          <source>2. Creating a variable to hold the index (&lt;em&gt;using &lt;code&gt;for&lt;/code&gt;&lt;/em&gt;)</source>
          <target state="translated">2. Создание переменной для хранения индекса ( &lt;em&gt;используется &lt;code&gt;for&lt;/code&gt; &lt;/em&gt; )</target>
        </trans-unit>
        <trans-unit id="5a8fd903a66ff1b5f503308168e5ffc6285d028c" translate="yes" xml:space="preserve">
          <source>3. Creating a variable to hold the index (&lt;em&gt;using &lt;code&gt;while&lt;/code&gt;&lt;/em&gt;)</source>
          <target state="translated">3. Создание переменной для хранения индекса ( &lt;em&gt;используя &lt;code&gt;while&lt;/code&gt; &lt;/em&gt; )</target>
        </trans-unit>
        <trans-unit id="2e428d9a00eeeb5c27c6916292288a1031e6030e" translate="yes" xml:space="preserve">
          <source>4. There is always another way</source>
          <target state="translated">4.Всегда есть другой способ</target>
        </trans-unit>
        <trans-unit id="631ed686968a23edabffb54726ef80fabbdc832e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/11990105/rangelenlist-or-enumeratelist&quot;&gt;range(len(list)) or enumerate(list)?&lt;/a&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/11990105/rangelenlist-or-enumeratelist&quot;&gt;диапазон (len (список)) или перечислить (список)?&lt;/a&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f745e83795b616fcd5b6051dae1e9dcb13195688" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/4852944/what-is-faster-for-loop-using-enumerate-or-for-loop-using-xrange-in-python&quot;&gt;What is faster for loop using enumerate or for loop using xrange in Python?&lt;/a&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/4852944/what-is-faster-for-loop-using-enumerate-or-for-loop-using-xrange-in-python&quot;&gt;Что быстрее для цикла с использованием перечисления или для цикла с использованием xrange в Python?&lt;/a&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="01a88ec29399c2ac6c31014b519227219001ebb1" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/94935/what-is-the-difference-between-range-and-xrange-functions-in-python-2-x&quot;&gt;What is the difference between range and xrange functions in Python 2.X?&lt;/a&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/94935/what-is-the-difference-between-range-and-xrange-functions-in-python-2-x&quot;&gt;В чем разница между функциями range и xrange в Python 2.X?&lt;/a&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="05a52fc6849c511bc0c89ee9078d3bb9b38b43ee" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;for i in enumerate(items): print(i)&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;for i in enumerate(items): print(i)&lt;/code&gt; &lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2dcc0a81ea7cc33e16025533e61ef0768d400574" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;for i, val in enumerate(items): print(i)&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;for i, val in enumerate(items): print(i)&lt;/code&gt; &lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="06dcd159a873dc937a8d379d54a4d056ddb842ea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;for i, val in enumerate(items): print(i, val)&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;for i, val in enumerate(items): print(i, val)&lt;/code&gt; &lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8ff483c968632929b930b16095b650468011e28e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;EDIT&lt;/strong&gt;
Highlighted in the comment that this method doesn&amp;rsquo;t work if there are duplicates in &lt;code&gt;ints&lt;/code&gt;, the method below should work for any values in &lt;code&gt;ints&lt;/code&gt;:</source>
          <target state="translated">&lt;strong&gt;РЕДАКТИРОВАТЬ&lt;/strong&gt; Подчеркнуто в комментарии, что этот метод не работает, если есть дубликаты в &lt;code&gt;ints&lt;/code&gt; , метод ниже должен работать для любых значений в &lt;code&gt;ints&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="3c470bec149bd96cfdf7cf1e061b790dee2c28a6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;enumerate&lt;/strong&gt; return &lt;strong&gt;tuple&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;перечислить&lt;/strong&gt; возвращаемый &lt;strong&gt;кортеж&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4d82db5533d2f4fd9d698a77c27c5ccb30c7f3b2" translate="yes" xml:space="preserve">
          <source>Accessing the index in 'for' loops</source>
          <target state="translated">Доступ к индексу в циклах 'for'</target>
        </trans-unit>
        <trans-unit id="bc9273cdaa1a7dd3a7e732f9a9e3a77308b7f1f4" translate="yes" xml:space="preserve">
          <source>According to this discussion: &lt;a href=&quot;http://bytes.com/topic/python/answers/464012-objects-list-index&quot;&gt;http://bytes.com/topic/python/answers/464012-objects-list-index&lt;/a&gt;</source>
          <target state="translated">Согласно этой дискуссии: &lt;a href=&quot;http://bytes.com/topic/python/answers/464012-objects-list-index&quot;&gt;http://bytes.com/topic/python/answers/464012-objects-list-index&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e4b5978216181e8d6bfba8c2dcbeba1c3c0b5fcd" translate="yes" xml:space="preserve">
          <source>Adding some useful links below:</source>
          <target state="translated">Добавление некоторых полезных ссылок ниже:</target>
        </trans-unit>
        <trans-unit id="8ea2032b0d9309613331fcf6a234213892ca0ba0" translate="yes" xml:space="preserve">
          <source>And note that Python's indexes start at zero, so you would get 0 to 4 with the above. If you want the count, 1 to 5, do this:</source>
          <target state="translated">И обратите внимание,что индексы Python начинаются с нуля,так что вы получите от 0 до 4 с вышеуказанным.Если хочешь посчитать от 1 до 5,сделай это:</target>
        </trans-unit>
        <trans-unit id="0b49ae31818e7598ed4dfb5fd79a98fcf43520f2" translate="yes" xml:space="preserve">
          <source>And we see we get a tuple of &lt;code&gt;0&lt;/code&gt;, the first index, and &lt;code&gt;'a'&lt;/code&gt;, the first item:</source>
          <target state="translated">И мы видим, что мы получаем кортеж &lt;code&gt;0&lt;/code&gt; , первый индекс, и &lt;code&gt;'a'&lt;/code&gt; , первый элемент:</target>
        </trans-unit>
        <trans-unit id="ef948caecf39a0f0936a16dce327c7282c2d1e40" translate="yes" xml:space="preserve">
          <source>As explained before, there are other ways to do this that have not been explained here and they may even apply more in other situations. &lt;em&gt;e.g&lt;/em&gt; using &lt;code&gt;itertools.chain&lt;/code&gt; with for. It handles nested loops better than the other examples.</source>
          <target state="translated">Как объяснялось ранее, есть другие способы сделать это, которые не были объяснены здесь, и они могут даже применить больше в других ситуациях. &lt;em&gt;например,&lt;/em&gt; используя &lt;code&gt;itertools.chain&lt;/code&gt; с for. Он обрабатывает вложенные циклы лучше, чем другие примеры.</target>
        </trans-unit>
        <trans-unit id="62d6861779094cf1dff833b8fd41fd3858c503b4" translate="yes" xml:space="preserve">
          <source>As is the norm in Python there are several ways to do this. In all examples assume: &lt;code&gt;lst = [1, 2, 3, 4, 5]&lt;/code&gt;</source>
          <target state="translated">Как правило, в Python есть несколько способов сделать это. Во всех примерах предположим: &lt;code&gt;lst = [1, 2, 3, 4, 5]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e19ada2c0961fe9062a224a2246ca5e9757ba3fa" translate="yes" xml:space="preserve">
          <source>As the result, using &lt;code&gt;range&lt;/code&gt; method is the fastest one up to list with 1000 items. For list with size &amp;gt; 10 000 items &lt;code&gt;enumerate&lt;/code&gt; is the winner.</source>
          <target state="translated">В результате использование метода &lt;code&gt;range&lt;/code&gt; является самым быстрым из списка с 1000 наименованиями. Для списка размером более 10 000 наименований &lt;code&gt;enumerate&lt;/code&gt; победитель.</target>
        </trans-unit>
        <trans-unit id="008dfbbaaa4393c7fa0b99d6683bd766d52c99a3" translate="yes" xml:space="preserve">
          <source>Best solution for this problem is use &lt;strong&gt;enumerate&lt;/strong&gt; in-build python function.</source>
          <target state="translated">Лучшее решение этой проблемы - использовать встроенную функцию Python.</target>
        </trans-unit>
        <trans-unit id="18036edf4b77d3774747f5a733d5bdda96841fba" translate="yes" xml:space="preserve">
          <source>Breaking it down - a step by step explanation</source>
          <target state="translated">Ломать его-пошаговое объяснение</target>
        </trans-unit>
        <trans-unit id="3b868e5ff21600f1de0e24b148f0cf3b1690d0a7" translate="yes" xml:space="preserve">
          <source>Check out &lt;a href=&quot;https://www.python.org/dev/peps/pep-0279/&quot;&gt;PEP 279&lt;/a&gt; for more.</source>
          <target state="translated">Проверьте &lt;a href=&quot;https://www.python.org/dev/peps/pep-0279/&quot;&gt;PEP 279&lt;/a&gt; для получения дополнительной информации.</target>
        </trans-unit>
        <trans-unit id="e39262defe80a83fac1b793497417432c8b1a879" translate="yes" xml:space="preserve">
          <source>Conclusion</source>
          <target state="translated">Conclusion</target>
        </trans-unit>
        <trans-unit id="403b6bd21aeee67349d70e3fa2c8b35ed877b6e2" translate="yes" xml:space="preserve">
          <source>Even if you don't need indexes as you go, but you need a count of the iterations (sometimes desirable) you can start with &lt;code&gt;1&lt;/code&gt; and the final number will be your count.</source>
          <target state="translated">Даже если вам не нужны индексы на ходу, но вам нужно количество итераций (иногда желательно), вы можете начать с &lt;code&gt;1&lt;/code&gt; , а последним числом будет ваш счет.</target>
        </trans-unit>
        <trans-unit id="8988bf3f69022a45727eac5ee717b81349a2df8c" translate="yes" xml:space="preserve">
          <source>First of all, the indexes will be from 0 to 4. Programming languages start counting from 0; don't forget that or you will come across an index out of bounds exception. All you need in the for loop is a variable counting from 0 to 4 like so:</source>
          <target state="translated">Прежде всего,индексы будут от 0 до 4.Языки программирования начинают отсчитываться от 0;не забывайте об этом,иначе вы столкнетесь с индексом вне пределов исключения.Все,что вам нужно в цикле for-это переменная,отсчитывающая от 0 до 4:</target>
        </trans-unit>
        <trans-unit id="5e668a82f2c71df0f0d99a3757004e5a08c3aa58" translate="yes" xml:space="preserve">
          <source>First, to clarify, the &lt;code&gt;enumerate&lt;/code&gt; function iteratively returns the index and corresponding item for each item in a list.</source>
          <target state="translated">Во-первых, чтобы уточнить, функция &lt;code&gt;enumerate&lt;/code&gt; итеративно возвращает индекс и соответствующий элемент для каждого элемента в списке.</target>
        </trans-unit>
        <trans-unit id="c21e4770e68eeec1014df7fc95c186a909162b1b" translate="yes" xml:space="preserve">
          <source>Getting a count</source>
          <target state="translated">Получить счет</target>
        </trans-unit>
        <trans-unit id="05d913a1b4569cf7170cb0ee3a9575380b5162b9" translate="yes" xml:space="preserve">
          <source>Here's what you get when you're accessing index in &lt;code&gt;for&lt;/code&gt; loops:</source>
          <target state="translated">Вот что вы получаете, когда получаете доступ к индексам &lt;code&gt;for&lt;/code&gt; циклов:</target>
        </trans-unit>
        <trans-unit id="238d10339da2180d5c07cfcfee16dc61db79e19c" translate="yes" xml:space="preserve">
          <source>How do I access the index in a &lt;code&gt;for&lt;/code&gt; loop like the following?</source>
          <target state="translated">Как мне получить доступ к индексу в цикле, как показано ниже?</target>
        </trans-unit>
        <trans-unit id="9091d401bec11b78947c586dc65ddc7d0307986e" translate="yes" xml:space="preserve">
          <source>However, the index for a list runs from zero.  So, then we need to know if what you actually want is the index and item for each item in a list, or whether you really want numbers starting from 1.  Fortunately, in Python, it is easy to do either or both.</source>
          <target state="translated">Однако,индекс для списка начинается с нуля.Итак,тогда нам нужно знать,является ли то,что вы на самом деле хотите,индексом и элементом для каждого элемента списка,или вы действительно хотите номера,начинающиеся с 1.К счастью,на Python это легко сделать или то и другое,или и то,и другое.</target>
        </trans-unit>
        <trans-unit id="879f6a7887962a5f79d424fb68a4de137173f815" translate="yes" xml:space="preserve">
          <source>I want to get this output:</source>
          <target state="translated">Я хочу получить этот результат:</target>
        </trans-unit>
        <trans-unit id="4b55e201130ca7562b47da4d1754e8112870683d" translate="yes" xml:space="preserve">
          <source>If I were to iterate &lt;code&gt;nums = [1, 2, 3, 4, 5]&lt;/code&gt; I would do</source>
          <target state="translated">Если бы я &lt;code&gt;nums = [1, 2, 3, 4, 5]&lt;/code&gt; я бы сделал</target>
        </trans-unit>
        <trans-unit id="fb7c9e1c651d5892981dbae3c6a0d7bcc29a12b6" translate="yes" xml:space="preserve">
          <source>If there is no duplicate value in the list:</source>
          <target state="translated">Если в списке нет дублирующего значения:</target>
        </trans-unit>
        <trans-unit id="88894a5508ef6b5450e43b42bdce69cec5f69e24" translate="yes" xml:space="preserve">
          <source>If you want your loop to span a part of the list, you can use the standard Python syntax for a part of the list. For example, to loop from the second item in a list up to but not including the last item, you could use</source>
          <target state="translated">Если вы хотите,чтобы ваш цикл охватывал часть списка,вы можете использовать стандартный синтаксис Python для части списка.Например,чтобы зациклиться со второго элемента списка до последнего,но не включая его,вы можете использовать</target>
        </trans-unit>
        <trans-unit id="9982401e31222a7d599f871341ea9ac3365d0f8e" translate="yes" xml:space="preserve">
          <source>Important hint, though a little misleading since &lt;code&gt;index&lt;/code&gt; will be a &lt;code&gt;tuple&lt;/code&gt;&lt;code&gt;(idx, item)&lt;/code&gt; here.
Good to go.</source>
          <target state="translated">Важный совет, хотя и немного вводящий в заблуждение, так как здесь &lt;code&gt;index&lt;/code&gt; будет &lt;code&gt;tuple&lt;/code&gt; &lt;code&gt;(idx, item)&lt;/code&gt; . Хорошо пойти.</target>
        </trans-unit>
        <trans-unit id="442ca59f4ca9d0effee5eb4ca966f4c44f248aac" translate="yes" xml:space="preserve">
          <source>In your question, you write &lt;em&gt;&quot;how do I access the loop index, from 1 to 5 in this case?&quot;&lt;/em&gt;</source>
          <target state="translated">В своем вопросе вы пишете &lt;em&gt;&quot;как мне получить доступ к индексу цикла, в данном случае от 1 до 5?&quot;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="174c6420785ceec6a2f5ff14d03833c455fae2a5" translate="yes" xml:space="preserve">
          <source>It uses the method of &lt;code&gt;enumerate&lt;/code&gt; in the selected answer to this question, but with list comprehension, making it faster with less code.</source>
          <target state="translated">Он использует метод &lt;code&gt;enumerate&lt;/code&gt; в выбранном ответе на этот вопрос, но с пониманием списка, что делает его быстрее с меньшим количеством кода.</target>
        </trans-unit>
        <trans-unit id="b480f3bde3855166ee8c17215c422cfd27cb8fe3" translate="yes" xml:space="preserve">
          <source>It's pretty simple to start it from &lt;code&gt;1&lt;/code&gt; other than &lt;code&gt;0&lt;/code&gt;:</source>
          <target state="translated">Начать с &lt;code&gt;1&lt;/code&gt; , отличного от &lt;code&gt;0&lt;/code&gt; , довольно просто:</target>
        </trans-unit>
        <trans-unit id="7a10d4ae3310ae0d92985e7ad4adffe66d449aee" translate="yes" xml:space="preserve">
          <source>Keep in mind that I wrote 0 to 5 because the loop stops one number before the max. :)</source>
          <target state="translated">Имейте в виду,что я написал от 0 до 5,потому что цикл останавливается на одну цифру раньше максимального :).</target>
        </trans-unit>
        <trans-unit id="e4d1d426dc3dc875bb0d9245432f5dd5db4d15b5" translate="yes" xml:space="preserve">
          <source>List comprehension:</source>
          <target state="translated">Понимание списка:</target>
        </trans-unit>
        <trans-unit id="a9fdc52ee369f02d9960a5f4e7a2a78dd41fdb1d" translate="yes" xml:space="preserve">
          <source>Loop counter iteration</source>
          <target state="translated">Счетчик циклов итерация</target>
        </trans-unit>
        <trans-unit id="fb4691ebc50abdcb831b7e2ad7ca6e649683442c" translate="yes" xml:space="preserve">
          <source>Looping over both elements and indices can be achieved either by the old idiom or by using the new &lt;code&gt;zip&lt;/code&gt; built-in function:</source>
          <target state="translated">Циклы по элементам и индексам могут быть достигнуты либо с помощью старой идиомы, либо с помощью новой встроенной функции &lt;code&gt;zip&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="2c924e3088204ee77ba681f72be3444357932fca" translate="yes" xml:space="preserve">
          <source>Note</source>
          <target state="translated">Note</target>
        </trans-unit>
        <trans-unit id="70b01ede04b89513eb7eab874a1326a3d2136861" translate="yes" xml:space="preserve">
          <source>Note that once again, the output index runs from 0,</source>
          <target state="translated">Обратите внимание,что выходной индекс снова начинается с 0,</target>
        </trans-unit>
        <trans-unit id="cf76f54e6a2c8fda4c2408971263a298fc9f73b9" translate="yes" xml:space="preserve">
          <source>Notice that the index runs from 0. This kind of indexing is common among modern programming languages including Python and C.</source>
          <target state="translated">Обратите внимание,что индекс начинается с 0.Такой вид индексирования распространен среди современных языков программирования,в том числе Python и C.</target>
        </trans-unit>
        <trans-unit id="de8354287d16f859c00cf238545ca819adf4ee68" translate="yes" xml:space="preserve">
          <source>Now we pass this iterable to enumerate, creating an enumerate object:</source>
          <target state="translated">Теперь мы передаем этот итерабельный объект для перечисления,создавая объект перечисления:</target>
        </trans-unit>
        <trans-unit id="75e44a72a864869d2706f0267f255238fadf813c" translate="yes" xml:space="preserve">
          <source>Old fashioned way:</source>
          <target state="translated">Старомодный способ:</target>
        </trans-unit>
        <trans-unit id="3158942ab311de63ffb8dce299b6e4150a1eb39c" translate="yes" xml:space="preserve">
          <source>Or alternatively</source>
          <target state="translated">Или же</target>
        </trans-unit>
        <trans-unit id="8f99c8ee53c5c57207c4a501757ecd22c98b158f" translate="yes" xml:space="preserve">
          <source>Or get the length as &lt;code&gt;l = len(nums)&lt;/code&gt;</source>
          <target state="translated">Или получите длину как &lt;code&gt;l = len(nums)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="aea621c2783348102b802e0f3f06d0065ca47192" translate="yes" xml:space="preserve">
          <source>Or in languages that do not have a for-each loop:</source>
          <target state="translated">Или на языках,которые не имеют петли для каждого:</target>
        </trans-unit>
        <trans-unit id="f3c8c95c5e534bcd2ea0034a0d83177efa6923f4" translate="yes" xml:space="preserve">
          <source>Output:</source>
          <target state="translated">Output:</target>
        </trans-unit>
        <trans-unit id="58b5be0bff4803cb394a82b7bf256098bed71bdb" translate="yes" xml:space="preserve">
          <source>Please see &lt;strong&gt;different approaches&lt;/strong&gt; which can be used to iterate over list and access index value and &lt;strong&gt;their performance metrics&lt;/strong&gt; (which I suppose would be useful for you) in code samples below:</source>
          <target state="translated">Пожалуйста, ознакомьтесь с &lt;strong&gt;различными подходами,&lt;/strong&gt; которые можно использовать для перебора списка и значения индекса доступа и &lt;strong&gt;их метрик производительности&lt;/strong&gt; (которые, я полагаю, будут полезны для вас) в примерах кода ниже:</target>
        </trans-unit>
        <trans-unit id="65522ec33b9b3c8dd2ce536d98f4de99c10e5f41" translate="yes" xml:space="preserve">
          <source>Python indexes start at zero</source>
          <target state="translated">Питоновые индексы начинаются с нуля</target>
        </trans-unit>
        <trans-unit id="8a3dba8e43519a05dbbf3051775e3d21bd473ae2" translate="yes" xml:space="preserve">
          <source>Python's &lt;a href=&quot;https://docs.python.org/2/library/functions.html#enumerate&quot;&gt;&lt;code&gt;enumerate&lt;/code&gt; function&lt;/a&gt; reduces the visual clutter by hiding the accounting for the indexes, and encapsulating the iterable into another iterable (an &lt;code&gt;enumerate&lt;/code&gt; object) that yields a two-item tuple of the index and the item that the original iterable would provide. That looks like this:</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/2/library/functions.html#enumerate&quot;&gt;Функция &lt;code&gt;enumerate&lt;/code&gt; &lt;/a&gt; Python уменьшает визуальный беспорядок, скрывая учет индексов и инкапсулируя итерируемое в другой итерируемый объект (объект &lt;code&gt;enumerate&lt;/code&gt; ), который дает кортеж из двух элементов индекса и элемент, который будет обеспечивать исходная итерация. Это выглядит так:</target>
        </trans-unit>
        <trans-unit id="bd4afc0073cac79bf136f8e1d922b83f76e969ad" translate="yes" xml:space="preserve">
          <source>Result:</source>
          <target state="translated">Result:</target>
        </trans-unit>
        <trans-unit id="92bb2163f6b9152909286271a0efc60115876349" translate="yes" xml:space="preserve">
          <source>See performance metrics for each method below:</source>
          <target state="translated">См.показатели производительности для каждого метода ниже:</target>
        </trans-unit>
        <trans-unit id="5816289b4203da6a109c74174b3df67255ef58c6" translate="yes" xml:space="preserve">
          <source>So do this:</source>
          <target state="translated">Так сделай это:</target>
        </trans-unit>
        <trans-unit id="51f036c0a194c1c7f1227381ba329dfcf71fffda" translate="yes" xml:space="preserve">
          <source>That brings us to the &lt;code&gt;start=n&lt;/code&gt; switch for &lt;code&gt;enumerate()&lt;/code&gt;.  This simply offsets the index, you can equivalently simply add a number to the index inside the loop.</source>
          <target state="translated">Это приводит нас к переключателю &lt;code&gt;start=n&lt;/code&gt; для &lt;code&gt;enumerate()&lt;/code&gt; . Это просто смещает индекс, вы можете эквивалентно просто добавить число к индексу внутри цикла.</target>
        </trans-unit>
        <trans-unit id="524f2064743dced6287d82abe02a8b7de82158da" translate="yes" xml:space="preserve">
          <source>The better option is to use the built-in function &lt;a href=&quot;https://docs.python.org/3/library/functions.html#enumerate&quot;&gt;&lt;code&gt;enumerate()&lt;/code&gt;&lt;/a&gt;, available in both Python 2 and 3:</source>
          <target state="translated">Лучшим вариантом является использование встроенной функции &lt;a href=&quot;https://docs.python.org/3/library/functions.html#enumerate&quot;&gt; &lt;code&gt;enumerate()&lt;/code&gt; &lt;/a&gt; , доступной как в Python 2, так и в 3:</target>
        </trans-unit>
        <trans-unit id="72666f635de9ba88d8bbf499bb869cc9139a2fbb" translate="yes" xml:space="preserve">
          <source>The count seems to be more what you intend to ask for (as opposed to index) when you said you wanted from 1 to 5.</source>
          <target state="translated">Счет,кажется,больше того,что вы собираетесь просить (в отличие от индекса),когда вы сказали,что вы хотите от 1 до 5.</target>
        </trans-unit>
        <trans-unit id="5889a239b2fdbf2fd38b22843ceba2fc4ca42a8d" translate="yes" xml:space="preserve">
          <source>The current idiom for looping over the indices makes use of the built-in &lt;code&gt;range&lt;/code&gt; function:</source>
          <target state="translated">Текущая идиома для зацикливания индексов использует встроенную функцию &lt;code&gt;range&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="1d9b3a20118dc5079fc11404e3400e342863b7fc" translate="yes" xml:space="preserve">
          <source>The fastest way to access indexes of list within loop in &lt;strong&gt;Python 2.7&lt;/strong&gt; is to use the &lt;a href=&quot;https://docs.python.org/2/library/functions.html#range&quot;&gt;range method&lt;/a&gt; for small lists and &lt;a href=&quot;https://docs.python.org/2/library/functions.html#enumerate&quot;&gt;enumerate method&lt;/a&gt; for medium and huge size lists.</source>
          <target state="translated">Самый быстрый способ получить доступ к индексам списка в цикле в &lt;strong&gt;Python 2.7&lt;/strong&gt; - это использовать &lt;a href=&quot;https://docs.python.org/2/library/functions.html#range&quot;&gt;метод range&lt;/a&gt; для небольших списков и &lt;a href=&quot;https://docs.python.org/2/library/functions.html#enumerate&quot;&gt;метод перечисления&lt;/a&gt; для списков среднего и большого размера.</target>
        </trans-unit>
        <trans-unit id="3d331254940942c3ce3c8b67df9ca2d6d1577a21" translate="yes" xml:space="preserve">
          <source>The output for the above is then,</source>
          <target state="translated">Выход для вышеперечисленного,</target>
        </trans-unit>
        <trans-unit id="c55395401359835a6e3f32b3f23a39a7f4f78ecc" translate="yes" xml:space="preserve">
          <source>The output is</source>
          <target state="translated">На выходе</target>
        </trans-unit>
        <trans-unit id="0c3e96daef7d3939249a9c22065d9691ddfda4ad" translate="yes" xml:space="preserve">
          <source>This code sample is fairly well the &lt;a href=&quot;http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html#index-item-2-enumerate&quot;&gt;canonical&lt;/a&gt; example of the difference between code that is idiomatic of Python and code that is not. Idiomatic code is sophisticated (but not complicated) Python, written in the way that it was intended to be used. Idiomatic code is expected by the designers of the language, which means that usually this code is not just more readable, but also more efficient.</source>
          <target state="translated">Этот пример кода довольно хорошо является &lt;a href=&quot;http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html#index-item-2-enumerate&quot;&gt;каноническим&lt;/a&gt; примером различия между кодом, идиоматическим для Python, и кодом, которого нет. Идиоматический код является сложным (но не сложным) Python, написанным так, как он был предназначен для использования. Разработчики языка ожидают идиоматического кода, что означает, что обычно этот код не только более читабелен, но и более эффективен.</target>
        </trans-unit>
        <trans-unit id="8093d66bbb0e512a4835aca412375f8623d5799a" translate="yes" xml:space="preserve">
          <source>This is also the safest option in my opinion because the chance of going into infinite recursion has been eliminated. Both the item and its index are held in variables and there is no need to write any further code
to access the item.</source>
          <target state="translated">Это также самый безопасный,на мой взгляд,вариант,потому что шанс попасть в бесконечную рекурсию был исключен.И элемент,и его индекс хранятся в переменных,и нет необходимости писать дополнительный код для доступа к элементу.</target>
        </trans-unit>
        <trans-unit id="60bf4dd3e992fdce3aa7d016b191eebf627d7772" translate="yes" xml:space="preserve">
          <source>This serves the purpose well enough:</source>
          <target state="translated">Это достаточно хорошо служит цели:</target>
        </trans-unit>
        <trans-unit id="026e437d2f8a925ce37473b9f91f30f19894e93d" translate="yes" xml:space="preserve">
          <source>To break these examples down, say we have a list of items that we want to iterate over with an index:</source>
          <target state="translated">Чтобы разбить эти примеры на части,скажем,что у нас есть список элементов,которые мы хотим повторить с помощью индекса:</target>
        </trans-unit>
        <trans-unit id="2abe0ae19b64824be6eda80ac4fab5075467cb4d" translate="yes" xml:space="preserve">
          <source>To get the value of an index use</source>
          <target state="translated">Чтобы получить значение использования индекса</target>
        </trans-unit>
        <trans-unit id="e284e860a431d523434958daed9f3a804089b77f" translate="yes" xml:space="preserve">
          <source>To get these indexes from an iterable as you iterate over it, use the enumerate function</source>
          <target state="translated">Чтобы получить эти индексы из итерабельного файла в процессе итераций,используйте функцию перечисления</target>
        </trans-unit>
        <trans-unit id="cdb48f7775fbda0e529c68f861da7702f0a8ad35" translate="yes" xml:space="preserve">
          <source>To print tuple of (index, value) in list comprehension using a &lt;code&gt;for&lt;/code&gt; loop:</source>
          <target state="translated">Чтобы напечатать кортеж (index, value) в понимании списка, используя цикл &lt;code&gt;for&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="212ef0bd801953b3a1e597cda26266942483b3da" translate="yes" xml:space="preserve">
          <source>Unidiomatic control flow</source>
          <target state="translated">Унидиоматический поток управления</target>
        </trans-unit>
        <trans-unit id="5ad79f66b91e7b335fda65142286bfca021278ba" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;enumerate&lt;/code&gt; to get the index with the element as you iterate:</source>
          <target state="translated">Используйте &lt;code&gt;enumerate&lt;/code&gt; , чтобы получить индекс с элементом во время итерации:</target>
        </trans-unit>
        <trans-unit id="9c6b0a0c1a00597993f5be006fcc0a53968ed9b4" translate="yes" xml:space="preserve">
          <source>Use the Enumerate Function</source>
          <target state="translated">Использовать функцию перечисления</target>
        </trans-unit>
        <trans-unit id="fb80d04fbfb309698df71468b1d806ceaa1e4548" translate="yes" xml:space="preserve">
          <source>Use this code if you need to reset the index value at the end of the loop:</source>
          <target state="translated">Используйте этот код,если необходимо сбросить значение индекса в конце цикла:</target>
        </trans-unit>
        <trans-unit id="3280d0ccd6d17e2a6d690f1ddb82a1f52049f6f6" translate="yes" xml:space="preserve">
          <source>Using a for loop, how do I access the loop index, from 1 to 5 in this case?</source>
          <target state="translated">Используя a for loop,как в этом случае получить доступ к индексу цикла от 1 до 5?</target>
        </trans-unit>
        <trans-unit id="85ddfe9225fbe54e2a59a5b0043cedc452783a83" translate="yes" xml:space="preserve">
          <source>Using an additional state variable, such as an index variable (which you would normally use in languages such as C or PHP), is considered non-pythonic.</source>
          <target state="translated">Использование дополнительной переменной состояния,такой как индексная переменная (которую вы обычно используете в таких языках,как C или PHP),считается непитоническим.</target>
        </trans-unit>
        <trans-unit id="a69473264ae887877426044ee94b7be264b5d2ea" translate="yes" xml:space="preserve">
          <source>Using enumerate in the idiomatic way (along with tuple unpacking) creates code that is more readable and maintainable:</source>
          <target state="translated">Использование перечисления идиоматическим образом (наряду с распаковкой кортежа)создает более читабельный и удобный в обслуживании код:</target>
        </trans-unit>
        <trans-unit id="ddbdf96fe188826bd6b92a9e05161275d45b31bd" translate="yes" xml:space="preserve">
          <source>We can pull the first item out of this iterable that we would get in a loop with the &lt;code&gt;next&lt;/code&gt; function:</source>
          <target state="translated">Мы можем извлечь первый элемент из этой итерации, который мы бы запустили в цикл с помощью &lt;code&gt;next&lt;/code&gt; функции:</target>
        </trans-unit>
        <trans-unit id="97c77715f72ae91df41df5629e449f5f2d9b2b98" translate="yes" xml:space="preserve">
          <source>What you are asking for is the Pythonic equivalent of the following, which is the algorithm most programmers of lower-level languages would use:</source>
          <target state="translated">То,что вы просите-это питонический эквивалент следующего алгоритма,который использовал бы большинство программистов низшего уровня:</target>
        </trans-unit>
        <trans-unit id="94e0f3c9a703c64a371b3193c4b6f1168b016a1e" translate="yes" xml:space="preserve">
          <source>When I loop through it using a &lt;code&gt;for&lt;/code&gt; loop, how do I access the loop index, from 1 to 5 in this case?</source>
          <target state="translated">Когда я перебираю цикл с помощью цикла &lt;code&gt;for&lt;/code&gt; , как мне получить доступ к индексу цикла, в данном случае от 1 до 5?</target>
        </trans-unit>
        <trans-unit id="6f1c53fc630f92c3afe7972bf03db4cc3749c37b" translate="yes" xml:space="preserve">
          <source>You can also try this:</source>
          <target state="translated">Ты также можешь попробовать это:</target>
        </trans-unit>
        <trans-unit id="96464a04d26aaa6c5cd503b3a067dedf8a4bcf92" translate="yes" xml:space="preserve">
          <source>You can do it with this code:</source>
          <target state="translated">Ты можешь сделать это с этим кодом:</target>
        </trans-unit>
        <trans-unit id="979b70181c7544f051bf89f222e2829e927ab0b8" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;index&lt;/code&gt; method</source>
          <target state="translated">Вы можете использовать метод &lt;code&gt;index&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f0310f362baf06ed4045620c0e9924bc3cd3dc91" translate="yes" xml:space="preserve">
          <source>and when we inspect &lt;code&gt;index&lt;/code&gt;, we find it refers to the first index, 0, and &lt;code&gt;item&lt;/code&gt; refers to the first item, &lt;code&gt;'a'&lt;/code&gt;.</source>
          <target state="translated">и когда мы проверяем &lt;code&gt;index&lt;/code&gt; , мы обнаруживаем, что он ссылается на первый индекс, 0, а &lt;code&gt;item&lt;/code&gt; ссылается на первый элемент, &lt;code&gt;'a'&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0e198764313a0200376c5af02fcbf44d3ea1bc6a" translate="yes" xml:space="preserve">
          <source>first value is &lt;strong&gt;index&lt;/strong&gt;</source>
          <target state="translated">первое значение &lt;strong&gt;индекса&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4f03b0674e31ec673e906b6c4f313848a6582c69" translate="yes" xml:space="preserve">
          <source>for which the output is</source>
          <target state="translated">для которого вывод</target>
        </trans-unit>
        <trans-unit id="5dd1ea7d6bc659478a3ca907c288b312a743812a" translate="yes" xml:space="preserve">
          <source>if you want to get both the index and the value in &lt;code&gt;ints&lt;/code&gt; as a list of tuples.</source>
          <target state="translated">если вы хотите получить и индекс, и значение в &lt;code&gt;ints&lt;/code&gt; в виде списка кортежей.</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">or</target>
        </trans-unit>
        <trans-unit id="0b1f0cd76597c8d9d0482a22983cfca2515c9edd" translate="yes" xml:space="preserve">
          <source>or sometimes more commonly (but unidiomatically) found in Python:</source>
          <target state="translated">а иногда и более часто (но однозначно)встречается в Питоне:</target>
        </trans-unit>
        <trans-unit id="3f0e19612fbdb3ab18629a3b6dd38a86383f06a9" translate="yes" xml:space="preserve">
          <source>second value is &lt;strong&gt;element&lt;/strong&gt; of array at that index</source>
          <target state="translated">Второе значение является &lt;strong&gt;элементом&lt;/strong&gt; массива по этому индексу</target>
        </trans-unit>
        <trans-unit id="6e91c27641dfbd3b74cd7b0a569f8a5dba1a0a4c" translate="yes" xml:space="preserve">
          <source>via &lt;a href=&quot;http://www.python.org/dev/peps/pep-0212/&quot;&gt;http://www.python.org/dev/peps/pep-0212/&lt;/a&gt;</source>
          <target state="translated">через &lt;a href=&quot;http://www.python.org/dev/peps/pep-0212/&quot;&gt;http://www.python.org/dev/peps/pep-0212/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5551edaffbe0160598db33d9d51e96ead15e4bee" translate="yes" xml:space="preserve">
          <source>we can use what is referred to as &quot;&lt;a href=&quot;https://docs.python.org/2/tutorial/datastructures.html#tuples-and-sequences&quot;&gt;sequence unpacking&lt;/a&gt;&quot; to extract the elements from this two-tuple:</source>
          <target state="translated">мы можем использовать то, что называется &amp;laquo; &lt;a href=&quot;https://docs.python.org/2/tutorial/datastructures.html#tuples-and-sequences&quot;&gt;распаковка последовательности&lt;/a&gt; &amp;raquo;, чтобы извлечь элементы из этого двухкорпусного:</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
